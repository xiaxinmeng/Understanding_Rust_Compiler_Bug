{"sha": "7b0caa58d9ff6ad0dca62a55a8d2e654c15d6fff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiMGNhYTU4ZDlmZjZhZDBkY2E2MmE1NWE4ZDJlNjU0YzE1ZDZmZmY=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2017-03-11T19:57:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-03-11T19:57:49Z"}, "message": "Rollup merge of #40419 - GuillaumeGomez:fix-const-rendering, r=frewsxcv\n\nFix associated consts display\n\nFixes #40370.\n\nr? @frewsxcv", "tree": {"sha": "1c7e400ef9245c80923c4ed7c0bd658e2378928a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c7e400ef9245c80923c4ed7c0bd658e2378928a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b0caa58d9ff6ad0dca62a55a8d2e654c15d6fff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b0caa58d9ff6ad0dca62a55a8d2e654c15d6fff", "html_url": "https://github.com/rust-lang/rust/commit/7b0caa58d9ff6ad0dca62a55a8d2e654c15d6fff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b0caa58d9ff6ad0dca62a55a8d2e654c15d6fff/comments", "author": null, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d208b2de1055b17fca6282c8af00a39414e9af90", "url": "https://api.github.com/repos/rust-lang/rust/commits/d208b2de1055b17fca6282c8af00a39414e9af90", "html_url": "https://github.com/rust-lang/rust/commit/d208b2de1055b17fca6282c8af00a39414e9af90"}, {"sha": "ea3c82cd96e155e087780a0c062cad51b992a66a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea3c82cd96e155e087780a0c062cad51b992a66a", "html_url": "https://github.com/rust-lang/rust/commit/ea3c82cd96e155e087780a0c062cad51b992a66a"}], "stats": {"total": 66, "additions": 47, "deletions": 19}, "files": [{"sha": "fc5507d4d5559cde8ddc306560265c9bf8fe92d9", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 47, "deletions": 19, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/7b0caa58d9ff6ad0dca62a55a8d2e654c15d6fff/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b0caa58d9ff6ad0dca62a55a8d2e654c15d6fff/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=7b0caa58d9ff6ad0dca62a55a8d2e654c15d6fff", "patch": "@@ -442,7 +442,7 @@ pub fn href(did: DefId) -> Option<(String, ItemType, Vec<String>)> {\n /// Used when rendering a `ResolvedPath` structure. This invokes the `path`\n /// rendering function with the necessary arguments for linking to a local path.\n fn resolved_path(w: &mut fmt::Formatter, did: DefId, path: &clean::Path,\n-                 print_all: bool, use_absolute: bool) -> fmt::Result {\n+                 print_all: bool, use_absolute: bool, is_not_debug: bool) -> fmt::Result {\n     let last = path.segments.last().unwrap();\n     let rel_root = match &*path.segments[0].name {\n         \"self\" => Some(\"./\".to_string()),\n@@ -459,10 +459,14 @@ fn resolved_path(w: &mut fmt::Formatter, did: DefId, path: &clean::Path,\n                     } else {\n                         root.push_str(&seg.name);\n                         root.push_str(\"/\");\n-                        write!(w, \"<a class=\\\"mod\\\"\n-                                       href=\\\"{}index.html\\\">{}</a>::\",\n-                                 root,\n-                                 seg.name)?;\n+                        if is_not_debug {\n+                            write!(w, \"<a class=\\\"mod\\\"\n+                                           href=\\\"{}index.html\\\">{}</a>::\",\n+                                     root,\n+                                     seg.name)?;\n+                        } else {\n+                            write!(w, \"{}::\", seg.name)?;\n+                        }\n                     }\n                 }\n             }\n@@ -474,19 +478,37 @@ fn resolved_path(w: &mut fmt::Formatter, did: DefId, path: &clean::Path,\n         }\n     }\n     if w.alternate() {\n-        write!(w, \"{:#}{:#}\", HRef::new(did, &last.name), last.params)?;\n+        if is_not_debug {\n+            write!(w, \"{:#}{:#}\", HRef::new(did, &last.name), last.params)?;\n+        } else {\n+            write!(w, \"{:?}{:?}\", HRef::new(did, &last.name), last.params)?;\n+        }\n     } else {\n-        let path = if use_absolute {\n-            match href(did) {\n-                Some((_, _, fqp)) => format!(\"{}::{}\",\n-                                             fqp[..fqp.len()-1].join(\"::\"),\n-                                             HRef::new(did, fqp.last().unwrap())),\n-                None => format!(\"{}\", HRef::new(did, &last.name)),\n-            }\n+        if is_not_debug {\n+            let path = if use_absolute {\n+                match href(did) {\n+                    Some((_, _, fqp)) => format!(\"{}::{}\",\n+                                                 fqp[..fqp.len()-1].join(\"::\"),\n+                                                 HRef::new(did, fqp.last().unwrap())),\n+                    None => format!(\"{}\", HRef::new(did, &last.name)),\n+                }\n+            } else {\n+                format!(\"{}\", HRef::new(did, &last.name))\n+            };\n+            write!(w, \"{}{}\", path, last.params)?;\n         } else {\n-            format!(\"{}\", HRef::new(did, &last.name))\n-        };\n-        write!(w, \"{}{}\", path, last.params)?;\n+            let path = if use_absolute {\n+                match href(did) {\n+                    Some((_, _, fqp)) => format!(\"{:?}::{:?}\",\n+                                                 fqp[..fqp.len()-1].join(\"::\"),\n+                                                 HRef::new(did, fqp.last().unwrap())),\n+                    None => format!(\"{:?}\", HRef::new(did, &last.name)),\n+                }\n+            } else {\n+                format!(\"{:?}\", HRef::new(did, &last.name))\n+            };\n+            write!(w, \"{}{:?}\", path, last.params)?;\n+        }\n     }\n     Ok(())\n }\n@@ -570,6 +592,12 @@ impl<'a> fmt::Display for HRef<'a> {\n     }\n }\n \n+impl<'a> fmt::Debug for HRef<'a> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"{}\", self.text)\n+    }\n+}\n+\n fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter, use_absolute: bool,\n             is_not_debug: bool) -> fmt::Result {\n     match *t {\n@@ -578,7 +606,7 @@ fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter, use_absolute: bool,\n         }\n         clean::ResolvedPath{ did, ref typarams, ref path, is_generic } => {\n             // Paths like T::Output and Self::Output should be rendered with all segments\n-            resolved_path(f, did, path, is_generic, use_absolute)?;\n+            resolved_path(f, did, path, is_generic, use_absolute, is_not_debug)?;\n             tybounds(f, typarams)\n         }\n         clean::Infer => write!(f, \"_\"),\n@@ -767,7 +795,7 @@ fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter, use_absolute: bool,\n                 write!(f, \"{}::\", self_type)?;\n             }\n             let path = clean::Path::singleton(name.clone());\n-            resolved_path(f, did, &path, true, use_absolute)?;\n+            resolved_path(f, did, &path, true, use_absolute, is_not_debug)?;\n \n             // FIXME: `typarams` are not rendered, and this seems bad?\n             drop(typarams);\n@@ -1051,7 +1079,7 @@ impl fmt::Display for clean::Import {\n impl fmt::Display for clean::ImportSource {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match self.did {\n-            Some(did) => resolved_path(f, did, &self.path, true, false),\n+            Some(did) => resolved_path(f, did, &self.path, true, false, true),\n             _ => {\n                 for (i, seg) in self.path.segments.iter().enumerate() {\n                     if i > 0 {"}]}