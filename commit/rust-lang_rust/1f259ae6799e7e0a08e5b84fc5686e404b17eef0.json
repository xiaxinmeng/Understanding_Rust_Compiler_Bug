{"sha": "1f259ae6799e7e0a08e5b84fc5686e404b17eef0", "node_id": "C_kwDOAAsO6NoAKDFmMjU5YWU2Nzk5ZTdlMGEwOGU1Yjg0ZmM1Njg2ZTQwNGIxN2VlZjA", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-11-25T14:39:38Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-12-01T15:51:05Z"}, "message": "rustc_hir: Change representation of import paths to support multiple resolutions", "tree": {"sha": "388417f61bf1eb19e633f3e613353f01c05b8730", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/388417f61bf1eb19e633f3e613353f01c05b8730"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f259ae6799e7e0a08e5b84fc5686e404b17eef0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f259ae6799e7e0a08e5b84fc5686e404b17eef0", "html_url": "https://github.com/rust-lang/rust/commit/1f259ae6799e7e0a08e5b84fc5686e404b17eef0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f259ae6799e7e0a08e5b84fc5686e404b17eef0/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6cd4dd3091dfe0ce4a728bd9ae177361fba23736", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cd4dd3091dfe0ce4a728bd9ae177361fba23736", "html_url": "https://github.com/rust-lang/rust/commit/6cd4dd3091dfe0ce4a728bd9ae177361fba23736"}], "stats": {"total": 246, "additions": 134, "deletions": 112}, "files": [{"sha": "b26b37b0466b15688637f86315c5d8d18a79fe10", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1f259ae6799e7e0a08e5b84fc5686e404b17eef0/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f259ae6799e7e0a08e5b84fc5686e404b17eef0/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=1f259ae6799e7e0a08e5b84fc5686e404b17eef0", "patch": "@@ -508,7 +508,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 let mut resolutions = self.expect_full_res_from_use(id).fuse();\n                 // We want to return *something* from this function, so hold onto the first item\n                 // for later.\n-                let ret_res = self.lower_res(resolutions.next().unwrap_or(Res::Err));\n+                let ret_res = smallvec![self.lower_res(resolutions.next().unwrap_or(Res::Err))];\n \n                 // Here, we are looping over namespaces, if they exist for the definition\n                 // being imported. We only handle type and value namespaces because we\n@@ -538,8 +538,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     let span = path.span;\n \n                     self.with_hir_id_owner(new_node_id, |this| {\n-                        let res = this.lower_res(res);\n-                        let path = this.lower_path_extra(res, &path, ParamMode::Explicit);\n+                        let res = smallvec![this.lower_res(res)];\n+                        let path = this.lower_use_path(res, &path, ParamMode::Explicit);\n                         let kind = hir::ItemKind::Use(path, hir::UseKind::Single);\n                         if let Some(attrs) = attrs {\n                             this.attrs.insert(hir::ItemLocalId::new(0), attrs);\n@@ -556,15 +556,14 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     });\n                 }\n \n-                let path = self.lower_path_extra(ret_res, &path, ParamMode::Explicit);\n+                let path = self.lower_use_path(ret_res, &path, ParamMode::Explicit);\n                 hir::ItemKind::Use(path, hir::UseKind::Single)\n             }\n             UseTreeKind::Glob => {\n-                let path = self.lower_path(\n-                    id,\n-                    &Path { segments, span: path.span, tokens: None },\n-                    ParamMode::Explicit,\n-                );\n+                let res = self.expect_full_res(id);\n+                let res = smallvec![self.lower_res(res)];\n+                let path = Path { segments, span: path.span, tokens: None };\n+                let path = self.lower_use_path(res, &path, ParamMode::Explicit);\n                 hir::ItemKind::Use(path, hir::UseKind::Glob)\n             }\n             UseTreeKind::Nested(ref trees) => {\n@@ -635,8 +634,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 }\n \n                 let res = self.expect_full_res_from_use(id).next().unwrap_or(Res::Err);\n-                let res = self.lower_res(res);\n-                let path = self.lower_path_extra(res, &prefix, ParamMode::Explicit);\n+                let res = smallvec![self.lower_res(res)];\n+                let path = self.lower_use_path(res, &prefix, ParamMode::Explicit);\n                 hir::ItemKind::Use(path, hir::UseKind::ListStem)\n             }\n         }"}, {"sha": "8d23c26e603b77bf035aded708af0676d47dff59", "filename": "compiler/rustc_ast_lowering/src/path.rs", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1f259ae6799e7e0a08e5b84fc5686e404b17eef0/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f259ae6799e7e0a08e5b84fc5686e404b17eef0/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs?ref=1f259ae6799e7e0a08e5b84fc5686e404b17eef0", "patch": "@@ -12,7 +12,7 @@ use rustc_hir::GenericArg;\n use rustc_span::symbol::{kw, Ident};\n use rustc_span::{BytePos, Span, DUMMY_SP};\n \n-use smallvec::smallvec;\n+use smallvec::{smallvec, SmallVec};\n \n impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     #[instrument(level = \"trace\", skip(self))]\n@@ -144,13 +144,13 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         );\n     }\n \n-    pub(crate) fn lower_path_extra(\n+    pub(crate) fn lower_use_path(\n         &mut self,\n-        res: Res,\n+        res: SmallVec<[Res; 3]>,\n         p: &Path,\n         param_mode: ParamMode,\n-    ) -> &'hir hir::Path<'hir> {\n-        self.arena.alloc(hir::Path {\n+    ) -> &'hir hir::UsePath<'hir> {\n+        self.arena.alloc(hir::UsePath {\n             res,\n             segments: self.arena.alloc_from_iter(p.segments.iter().map(|segment| {\n                 self.lower_path_segment(\n@@ -165,17 +165,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         })\n     }\n \n-    pub(crate) fn lower_path(\n-        &mut self,\n-        id: NodeId,\n-        p: &Path,\n-        param_mode: ParamMode,\n-    ) -> &'hir hir::Path<'hir> {\n-        let res = self.expect_full_res(id);\n-        let res = self.lower_res(res);\n-        self.lower_path_extra(res, p, param_mode)\n-    }\n-\n     pub(crate) fn lower_path_segment(\n         &mut self,\n         path_span: Span,"}, {"sha": "e2c33e7e06268328a9d027e2e1b48eb6f1e8d778", "filename": "compiler/rustc_data_structures/src/stable_hasher.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f259ae6799e7e0a08e5b84fc5686e404b17eef0/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f259ae6799e7e0a08e5b84fc5686e404b17eef0/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs?ref=1f259ae6799e7e0a08e5b84fc5686e404b17eef0", "patch": "@@ -399,7 +399,7 @@ where\n     }\n }\n \n-impl<A, CTX> HashStable<CTX> for SmallVec<[A; 1]>\n+impl<A, const N: usize, CTX> HashStable<CTX> for SmallVec<[A; N]>\n where\n     A: HashStable<CTX>,\n {"}, {"sha": "c89e7eb75f8f0d9480aa31e51435eabbb9ad6947", "filename": "compiler/rustc_hir/src/arena.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f259ae6799e7e0a08e5b84fc5686e404b17eef0/compiler%2Frustc_hir%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f259ae6799e7e0a08e5b84fc5686e404b17eef0/compiler%2Frustc_hir%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Farena.rs?ref=1f259ae6799e7e0a08e5b84fc5686e404b17eef0", "patch": "@@ -39,6 +39,7 @@ macro_rules! arena_types {\n             [] param: rustc_hir::Param<'tcx>,\n             [] pat: rustc_hir::Pat<'tcx>,\n             [] path: rustc_hir::Path<'tcx>,\n+            [] use_path: rustc_hir::UsePath<'tcx>,\n             [] path_segment: rustc_hir::PathSegment<'tcx>,\n             [] poly_trait_ref: rustc_hir::PolyTraitRef<'tcx>,\n             [] qpath: rustc_hir::QPath<'tcx>,"}, {"sha": "118eafe2910f0a8f504247c3a6f345b8ef1bcad0", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1f259ae6799e7e0a08e5b84fc5686e404b17eef0/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f259ae6799e7e0a08e5b84fc5686e404b17eef0/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=1f259ae6799e7e0a08e5b84fc5686e404b17eef0", "patch": "@@ -183,14 +183,17 @@ impl Lifetime {\n /// `std::cmp::PartialEq`. It's represented as a sequence of identifiers,\n /// along with a bunch of supporting information.\n #[derive(Debug, HashStable_Generic)]\n-pub struct Path<'hir> {\n+pub struct Path<'hir, R = Res> {\n     pub span: Span,\n     /// The resolution for the path.\n-    pub res: Res,\n+    pub res: R,\n     /// The segments in the path: the things separated by `::`.\n     pub segments: &'hir [PathSegment<'hir>],\n }\n \n+/// Up to three resolutions for type, value and macro namespaces.\n+pub type UsePath<'hir> = Path<'hir, SmallVec<[Res; 3]>>;\n+\n impl Path<'_> {\n     pub fn is_global(&self) -> bool {\n         !self.segments.is_empty() && self.segments[0].ident.name == kw::PathRoot\n@@ -3068,7 +3071,7 @@ pub enum ItemKind<'hir> {\n     /// or just\n     ///\n     /// `use foo::bar::baz;` (with `as baz` implicitly on the right).\n-    Use(&'hir Path<'hir>, UseKind),\n+    Use(&'hir UsePath<'hir>, UseKind),\n \n     /// A `static` item.\n     Static(&'hir Ty<'hir>, Mutability, BodyId),"}, {"sha": "cbb530424ca5d36d37a2c343f798ac70a48d4a26", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1f259ae6799e7e0a08e5b84fc5686e404b17eef0/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f259ae6799e7e0a08e5b84fc5686e404b17eef0/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=1f259ae6799e7e0a08e5b84fc5686e404b17eef0", "patch": "@@ -367,7 +367,7 @@ pub trait Visitor<'v>: Sized {\n     fn visit_fn(&mut self, fk: FnKind<'v>, fd: &'v FnDecl<'v>, b: BodyId, _: Span, id: HirId) {\n         walk_fn(self, fk, fd, b, id)\n     }\n-    fn visit_use(&mut self, path: &'v Path<'v>, hir_id: HirId) {\n+    fn visit_use(&mut self, path: &'v UsePath<'v>, hir_id: HirId) {\n         walk_use(self, path, hir_id)\n     }\n     fn visit_trait_item(&mut self, ti: &'v TraitItem<'v>) {\n@@ -938,9 +938,12 @@ pub fn walk_fn_kind<'v, V: Visitor<'v>>(visitor: &mut V, function_kind: FnKind<'\n     }\n }\n \n-pub fn walk_use<'v, V: Visitor<'v>>(visitor: &mut V, path: &'v Path<'v>, hir_id: HirId) {\n+pub fn walk_use<'v, V: Visitor<'v>>(visitor: &mut V, path: &'v UsePath<'v>, hir_id: HirId) {\n     visitor.visit_id(hir_id);\n-    visitor.visit_path(path, hir_id);\n+    let UsePath { segments, ref res, span } = *path;\n+    for &res in res {\n+        visitor.visit_path(&Path { segments, res, span }, hir_id);\n+    }\n }\n \n pub fn walk_trait_item<'v, V: Visitor<'v>>(visitor: &mut V, trait_item: &'v TraitItem<'v>) {"}, {"sha": "2460a23bb3f34ff52fa9375bbb6e6c0ce913f9a9", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f259ae6799e7e0a08e5b84fc5686e404b17eef0/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f259ae6799e7e0a08e5b84fc5686e404b17eef0/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=1f259ae6799e7e0a08e5b84fc5686e404b17eef0", "patch": "@@ -1591,7 +1591,7 @@ impl<'a> State<'a> {\n         self.print_ident(Ident::with_dummy_span(name))\n     }\n \n-    pub fn print_path(&mut self, path: &hir::Path<'_>, colons_before_params: bool) {\n+    pub fn print_path<R>(&mut self, path: &hir::Path<'_, R>, colons_before_params: bool) {\n         self.maybe_print_comment(path.span.lo());\n \n         for (i, segment) in path.segments.iter().enumerate() {"}, {"sha": "a7854cd49988f721806864a33570b646bc5379d2", "filename": "compiler/rustc_passes/src/hir_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f259ae6799e7e0a08e5b84fc5686e404b17eef0/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f259ae6799e7e0a08e5b84fc5686e404b17eef0/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs?ref=1f259ae6799e7e0a08e5b84fc5686e404b17eef0", "patch": "@@ -369,7 +369,7 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n         hir_visit::walk_fn(self, fk, fd, b, id)\n     }\n \n-    fn visit_use(&mut self, p: &'v hir::Path<'v>, hir_id: hir::HirId) {\n+    fn visit_use(&mut self, p: &'v hir::UsePath<'v>, hir_id: hir::HirId) {\n         // This is `visit_use`, but the type is `Path` so record it that way.\n         self.record(\"Path\", Id::None, p);\n         hir_visit::walk_use(self, p, hir_id)"}, {"sha": "b45288538256f84e9c10b8a80409cd9a773c9bfc", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f259ae6799e7e0a08e5b84fc5686e404b17eef0/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f259ae6799e7e0a08e5b84fc5686e404b17eef0/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=1f259ae6799e7e0a08e5b84fc5686e404b17eef0", "patch": "@@ -185,13 +185,13 @@ impl<'tcx> DumpVisitor<'tcx> {\n         }\n     }\n \n-    fn write_sub_paths(&mut self, path: &'tcx hir::Path<'tcx>) {\n+    fn write_sub_paths<R>(&mut self, path: &'tcx hir::Path<'tcx, R>) {\n         self.write_segments(path.segments)\n     }\n \n     // As write_sub_paths, but does not process the last ident in the path (assuming it\n     // will be processed elsewhere). See note on write_sub_paths about global.\n-    fn write_sub_paths_truncated(&mut self, path: &'tcx hir::Path<'tcx>) {\n+    fn write_sub_paths_truncated<R>(&mut self, path: &'tcx hir::Path<'tcx, R>) {\n         if let [segments @ .., _] = path.segments {\n             self.write_segments(segments)\n         }"}, {"sha": "f05eb2b7432b5cabd3c8eb1b0839acf7e5a1788e", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f259ae6799e7e0a08e5b84fc5686e404b17eef0/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f259ae6799e7e0a08e5b84fc5686e404b17eef0/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=1f259ae6799e7e0a08e5b84fc5686e404b17eef0", "patch": "@@ -594,7 +594,9 @@ impl<'tcx> SaveContext<'tcx> {\n         match self.tcx.hir().get(hir_id) {\n             Node::TraitRef(tr) => tr.path.res,\n \n-            Node::Item(&hir::Item { kind: hir::ItemKind::Use(path, _), .. }) => path.res,\n+            Node::Item(&hir::Item { kind: hir::ItemKind::Use(path, _), .. }) => {\n+                path.res.get(0).copied().unwrap_or(Res::Err)\n+            }\n             Node::PathSegment(seg) => {\n                 if seg.res != Res::Err {\n                     seg.res"}, {"sha": "80909919ba2b69e64a21c3e6c502ac4ec23363c1", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1f259ae6799e7e0a08e5b84fc5686e404b17eef0/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f259ae6799e7e0a08e5b84fc5686e404b17eef0/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=1f259ae6799e7e0a08e5b84fc5686e404b17eef0", "patch": "@@ -2231,6 +2231,26 @@ fn clean_extern_crate<'tcx>(\n }\n \n fn clean_use_statement<'tcx>(\n+    import: &hir::Item<'tcx>,\n+    name: Symbol,\n+    path: &hir::UsePath<'tcx>,\n+    kind: hir::UseKind,\n+    cx: &mut DocContext<'tcx>,\n+    inlined_names: &mut FxHashSet<(ItemType, Symbol)>,\n+) -> Vec<Item> {\n+    let mut items = Vec::new();\n+    let hir::UsePath { segments, ref res, span } = *path;\n+    for &res in res {\n+        if let Res::Def(DefKind::Ctor(..), _) | Res::SelfCtor(..) = res {\n+            continue;\n+        }\n+        let path = hir::Path { segments, res, span };\n+        items.append(&mut clean_use_statement_inner(import, name, &path, kind, cx, inlined_names));\n+    }\n+    items\n+}\n+\n+fn clean_use_statement_inner<'tcx>(\n     import: &hir::Item<'tcx>,\n     name: Symbol,\n     path: &hir::Path<'tcx>,"}, {"sha": "2590bb0df3f0e62ef74c84ce9eab4b3922e2862b", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1f259ae6799e7e0a08e5b84fc5686e404b17eef0/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f259ae6799e7e0a08e5b84fc5686e404b17eef0/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=1f259ae6799e7e0a08e5b84fc5686e404b17eef0", "patch": "@@ -242,7 +242,9 @@ impl ExternalCrate {\n                         hir::ItemKind::Use(path, hir::UseKind::Single)\n                             if tcx.visibility(id.owner_id).is_public() =>\n                         {\n-                            as_keyword(path.res.expect_non_local())\n+                            path.res\n+                                .iter()\n+                                .find_map(|res| as_keyword(res.expect_non_local()))\n                                 .map(|(_, prim)| (id.owner_id.to_def_id(), prim))\n                         }\n                         _ => None,\n@@ -310,10 +312,11 @@ impl ExternalCrate {\n                         hir::ItemKind::Use(path, hir::UseKind::Single)\n                             if tcx.visibility(id.owner_id).is_public() =>\n                         {\n-                            as_primitive(path.res.expect_non_local()).map(|(_, prim)| {\n+                            path.res\n+                                .iter()\n+                                .find_map(|res| as_primitive(res.expect_non_local()))\n                                 // Pretend the primitive is local.\n-                                (id.owner_id.to_def_id(), prim)\n-                            })\n+                                .map(|(_, prim)| (id.owner_id.to_def_id(), prim))\n                         }\n                         _ => None,\n                     }"}, {"sha": "4514894cabe0fcdf33035cf0b9b2b3ed580946ff", "filename": "src/librustdoc/html/render/span_map.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f259ae6799e7e0a08e5b84fc5686e404b17eef0/src%2Flibrustdoc%2Fhtml%2Frender%2Fspan_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f259ae6799e7e0a08e5b84fc5686e404b17eef0/src%2Flibrustdoc%2Fhtml%2Frender%2Fspan_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fspan_map.rs?ref=1f259ae6799e7e0a08e5b84fc5686e404b17eef0", "patch": "@@ -190,12 +190,4 @@ impl<'tcx> Visitor<'tcx> for SpanMapVisitor<'tcx> {\n         }\n         intravisit::walk_expr(self, expr);\n     }\n-\n-    fn visit_use(&mut self, path: &'tcx rustc_hir::Path<'tcx>, id: HirId) {\n-        if self.handle_macro(path.span) {\n-            return;\n-        }\n-        self.handle_path(path);\n-        intravisit::walk_use(self, path, id);\n-    }\n }"}, {"sha": "22068ebe041c729ca87e33470255f9e40c22bb3b", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 30, "deletions": 29, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/1f259ae6799e7e0a08e5b84fc5686e404b17eef0/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f259ae6799e7e0a08e5b84fc5686e404b17eef0/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=1f259ae6799e7e0a08e5b84fc5686e404b17eef0", "patch": "@@ -301,39 +301,40 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             hir::ItemKind::GlobalAsm(..) => {}\n             hir::ItemKind::Use(_, hir::UseKind::ListStem) => {}\n             hir::ItemKind::Use(path, kind) => {\n-                let is_glob = kind == hir::UseKind::Glob;\n-\n-                // Struct and variant constructors and proc macro stubs always show up alongside\n-                // their definitions, we've already processed them so just discard these.\n-                if let Res::Def(DefKind::Ctor(..), _) | Res::SelfCtor(..) = path.res {\n-                    return;\n-                }\n-\n-                let attrs = self.cx.tcx.hir().attrs(item.hir_id());\n+                for &res in &path.res {\n+                    // Struct and variant constructors and proc macro stubs always show up alongside\n+                    // their definitions, we've already processed them so just discard these.\n+                    if let Res::Def(DefKind::Ctor(..), _) | Res::SelfCtor(..) = res {\n+                        continue;\n+                    }\n \n-                // If there was a private module in the current path then don't bother inlining\n-                // anything as it will probably be stripped anyway.\n-                if is_pub && self.inside_public_path {\n-                    let please_inline = attrs.iter().any(|item| match item.meta_item_list() {\n-                        Some(ref list) if item.has_name(sym::doc) => {\n-                            list.iter().any(|i| i.has_name(sym::inline))\n+                    let attrs = self.cx.tcx.hir().attrs(item.hir_id());\n+\n+                    // If there was a private module in the current path then don't bother inlining\n+                    // anything as it will probably be stripped anyway.\n+                    if is_pub && self.inside_public_path {\n+                        let please_inline = attrs.iter().any(|item| match item.meta_item_list() {\n+                            Some(ref list) if item.has_name(sym::doc) => {\n+                                list.iter().any(|i| i.has_name(sym::inline))\n+                            }\n+                            _ => false,\n+                        });\n+                        let is_glob = kind == hir::UseKind::Glob;\n+                        let ident = if is_glob { None } else { Some(name) };\n+                        if self.maybe_inline_local(\n+                            item.hir_id(),\n+                            res,\n+                            ident,\n+                            is_glob,\n+                            om,\n+                            please_inline,\n+                        ) {\n+                            continue;\n                         }\n-                        _ => false,\n-                    });\n-                    let ident = if is_glob { None } else { Some(name) };\n-                    if self.maybe_inline_local(\n-                        item.hir_id(),\n-                        path.res,\n-                        ident,\n-                        is_glob,\n-                        om,\n-                        please_inline,\n-                    ) {\n-                        return;\n                     }\n-                }\n \n-                om.items.push((item, renamed, parent_id))\n+                    om.items.push((item, renamed, parent_id))\n+                }\n             }\n             hir::ItemKind::Macro(ref macro_def, _) => {\n                 // `#[macro_export] macro_rules!` items are handled separately in `visit()`,"}, {"sha": "1f56d0118a404b50d88b938620c01b70fcc11212", "filename": "src/tools/clippy/clippy_lints/src/disallowed_types.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f259ae6799e7e0a08e5b84fc5686e404b17eef0/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdisallowed_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f259ae6799e7e0a08e5b84fc5686e404b17eef0/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdisallowed_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdisallowed_types.rs?ref=1f259ae6799e7e0a08e5b84fc5686e404b17eef0", "patch": "@@ -106,7 +106,9 @@ impl<'tcx> LateLintPass<'tcx> for DisallowedTypes {\n \n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'tcx>) {\n         if let ItemKind::Use(path, UseKind::Single) = &item.kind {\n-            self.check_res_emit(cx, &path.res, item.span);\n+            for res in &path.res {\n+                self.check_res_emit(cx, res, item.span);\n+            }\n         }\n     }\n "}, {"sha": "e2e6a87a30151472b7bc93e250f556275641f441", "filename": "src/tools/clippy/clippy_lints/src/macro_use.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f259ae6799e7e0a08e5b84fc5686e404b17eef0/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmacro_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f259ae6799e7e0a08e5b84fc5686e404b17eef0/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmacro_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmacro_use.rs?ref=1f259ae6799e7e0a08e5b84fc5686e404b17eef0", "patch": "@@ -94,7 +94,10 @@ impl<'tcx> LateLintPass<'tcx> for MacroUseImports {\n             let hir_id = item.hir_id();\n             let attrs = cx.tcx.hir().attrs(hir_id);\n             if let Some(mac_attr) = attrs.iter().find(|attr| attr.has_name(sym::macro_use));\n-            if let Res::Def(DefKind::Mod, id) = path.res;\n+            if let Some(id) = path.res.iter().find_map(|res| match res {\n+                Res::Def(DefKind::Mod, id) => Some(id),\n+                _ => None,\n+            });\n             if !id.is_local();\n             then {\n                 for kid in cx.tcx.module_children(id).iter() {"}, {"sha": "773174679dbdce618b244bfdfe9f5516d2eaaa0f", "filename": "src/tools/clippy/clippy_lints/src/missing_enforced_import_rename.rs", "status": "modified", "additions": 31, "deletions": 28, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/1f259ae6799e7e0a08e5b84fc5686e404b17eef0/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_enforced_import_rename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f259ae6799e7e0a08e5b84fc5686e404b17eef0/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_enforced_import_rename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_enforced_import_rename.rs?ref=1f259ae6799e7e0a08e5b84fc5686e404b17eef0", "patch": "@@ -66,35 +66,38 @@ impl LateLintPass<'_> for ImportRename {\n     }\n \n     fn check_item(&mut self, cx: &LateContext<'_>, item: &Item<'_>) {\n-        if_chain! {\n-            if let ItemKind::Use(path, UseKind::Single) = &item.kind;\n-            if let Res::Def(_, id) = path.res;\n-            if let Some(name) = self.renames.get(&id);\n-            // Remove semicolon since it is not present for nested imports\n-            let span_without_semi = cx.sess().source_map().span_until_char(item.span, ';');\n-            if let Some(snip) = snippet_opt(cx, span_without_semi);\n-            if let Some(import) = match snip.split_once(\" as \") {\n-                None => Some(snip.as_str()),\n-                Some((import, rename)) => {\n-                    if rename.trim() == name.as_str() {\n-                        None\n-                    } else {\n-                        Some(import.trim())\n+        if let ItemKind::Use(path, UseKind::Single) = &item.kind {\n+            for &res in &path.res {\n+                if_chain! {\n+                    if let Res::Def(_, id) = res;\n+                    if let Some(name) = self.renames.get(&id);\n+                    // Remove semicolon since it is not present for nested imports\n+                    let span_without_semi = cx.sess().source_map().span_until_char(item.span, ';');\n+                    if let Some(snip) = snippet_opt(cx, span_without_semi);\n+                    if let Some(import) = match snip.split_once(\" as \") {\n+                        None => Some(snip.as_str()),\n+                        Some((import, rename)) => {\n+                            if rename.trim() == name.as_str() {\n+                                None\n+                            } else {\n+                                Some(import.trim())\n+                            }\n+                        },\n+                    };\n+                    then {\n+                        span_lint_and_sugg(\n+                            cx,\n+                            MISSING_ENFORCED_IMPORT_RENAMES,\n+                            span_without_semi,\n+                            \"this import should be renamed\",\n+                            \"try\",\n+                            format!(\n+                                \"{import} as {name}\",\n+                            ),\n+                            Applicability::MachineApplicable,\n+                        );\n                     }\n-                },\n-            };\n-            then {\n-                span_lint_and_sugg(\n-                    cx,\n-                    MISSING_ENFORCED_IMPORT_RENAMES,\n-                    span_without_semi,\n-                    \"this import should be renamed\",\n-                    \"try\",\n-                    format!(\n-                        \"{import} as {name}\",\n-                    ),\n-                    Applicability::MachineApplicable,\n-                );\n+                }\n             }\n         }\n     }"}, {"sha": "d612d249c2f000ab3c869952f1806ff491ac2450", "filename": "src/tools/clippy/clippy_lints/src/redundant_pub_crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f259ae6799e7e0a08e5b84fc5686e404b17eef0/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_pub_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f259ae6799e7e0a08e5b84fc5686e404b17eef0/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_pub_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_pub_crate.rs?ref=1f259ae6799e7e0a08e5b84fc5686e404b17eef0", "patch": "@@ -84,7 +84,7 @@ impl<'tcx> LateLintPass<'tcx> for RedundantPubCrate {\n \n fn is_not_macro_export<'tcx>(item: &'tcx Item<'tcx>) -> bool {\n     if let ItemKind::Use(path, _) = item.kind {\n-        if let Res::Def(DefKind::Macro(MacroKind::Bang), _) = path.res {\n+        if path.res.iter().all(|res| matches!(res, Res::Def(DefKind::Macro(MacroKind::Bang), _))) {\n             return false;\n         }\n     } else if let ItemKind::Macro(..) = item.kind {"}, {"sha": "e4d1ee195c4dfb10aed5eed874f7de6fe280d84d", "filename": "src/tools/clippy/clippy_lints/src/wildcard_imports.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f259ae6799e7e0a08e5b84fc5686e404b17eef0/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwildcard_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f259ae6799e7e0a08e5b84fc5686e404b17eef0/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwildcard_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwildcard_imports.rs?ref=1f259ae6799e7e0a08e5b84fc5686e404b17eef0", "patch": "@@ -176,7 +176,8 @@ impl LateLintPass<'_> for WildcardImports {\n                     format!(\"{import_source_snippet}::{imports_string}\")\n                 };\n \n-                let (lint, message) = if let Res::Def(DefKind::Enum, _) = use_path.res {\n+                // Glob imports always have a single resolution.\n+                let (lint, message) = if let Res::Def(DefKind::Enum, _) = use_path.res[0] {\n                     (ENUM_GLOB_USE, \"usage of wildcard import for enum variants\")\n                 } else {\n                     (WILDCARD_IMPORTS, \"usage of wildcard import\")"}]}