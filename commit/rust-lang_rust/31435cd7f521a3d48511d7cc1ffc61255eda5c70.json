{"sha": "31435cd7f521a3d48511d7cc1ffc61255eda5c70", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxNDM1Y2Q3ZjUyMWEzZDQ4NTExZDdjYzFmZmM2MTI1NWVkYTVjNzA=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-03-15T22:41:30Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-03-15T22:42:46Z"}, "message": "Reimplement AbsolutePathBuffer", "tree": {"sha": "48ef88c483c21e47423977952a0552dbcf17028b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48ef88c483c21e47423977952a0552dbcf17028b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31435cd7f521a3d48511d7cc1ffc61255eda5c70", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZxoS6lESXlRGMHWcaTCGhp1QZjcFAlyMKmYACgkQaTCGhp1Q\nZjdSPw//aHPuGut+Xab1YcsFgc4Zik0xcUKnEqiceRNfeTmKhARJZVq/KF6c8M/I\n2bq6kVAI+zzfixO7qdGfPqoW92EjiYtmmbmW/xczgkDJ0hCIHvOCM+wUccn2BlCz\nz+rXcuCl94MH2S88sktJG8m9sXW8VoNV5PDbUqR36E8CxW4YvRa+QJJ+XUbRxCUl\nCoG1/bpz3fW6RBhEI3P6+wK0FKslhkCWHphP+kqQtfOQlu3C89D4kWaLi0DsKahH\nKRT0TFUK/x8O0dDf5MbC/O6BOaoDvpgSDESeAYXSqsMg3kwZ3MtlsboSbPTCtCLr\nHUhGHnnXZndKpU3mFjTuNKmREbPZde5tR+chhqD9lSonbBSAGnRz2A0zUUJVyIx3\n3EfTi/rfr7wquPwnl0c3f894m6JlFsMdcdxGwiu7Sn0gX0IYHwguxzQ6PMLTlhoj\nNeUnEYw0ZmM7Q/bNGumIX5nQDF7426CQ+czbQmxR4xUAPIkjQbPH1Nxe9V5bYJ9G\nAB1cri/K2XGzSRbBllCbBWQTdqATPjdvZN8sYpIqCtklO6FntMa7M8pN7UODpbr0\nyuGhRemvgNC3Yr23pMfCIdEI/ls8m/Btra3VOauMnvZh2PvGLeOQ8UR8R1dNonah\n5YFkuEWY6ruqStIyDogq7M6+73jfTfGPYSkXv0h5HQSGD6Lir9I=\n=YO+M\n-----END PGP SIGNATURE-----", "payload": "tree 48ef88c483c21e47423977952a0552dbcf17028b\nparent 54e20519d2e3e2de72f6a58e521f405763bae4a6\nauthor flip1995 <hello@philkrones.com> 1552689690 +0100\ncommitter flip1995 <hello@philkrones.com> 1552689766 +0100\n\nReimplement AbsolutePathBuffer\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31435cd7f521a3d48511d7cc1ffc61255eda5c70", "html_url": "https://github.com/rust-lang/rust/commit/31435cd7f521a3d48511d7cc1ffc61255eda5c70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31435cd7f521a3d48511d7cc1ffc61255eda5c70/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54e20519d2e3e2de72f6a58e521f405763bae4a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/54e20519d2e3e2de72f6a58e521f405763bae4a6", "html_url": "https://github.com/rust-lang/rust/commit/54e20519d2e3e2de72f6a58e521f405763bae4a6"}], "stats": {"total": 141, "additions": 107, "deletions": 34}, "files": [{"sha": "0c12bab957c33fa946a49a617b212f52eb879bdf", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/31435cd7f521a3d48511d7cc1ffc61255eda5c70/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31435cd7f521a3d48511d7cc1ffc61255eda5c70/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=31435cd7f521a3d48511d7cc1ffc61255eda5c70", "patch": "@@ -352,22 +352,22 @@ fn check_clippy_lint_names(cx: &LateContext<'_, '_>, items: &[NestedMetaItem]) {\n     }\n }\n \n-fn is_relevant_item(tcx: TyCtxt<'_, '_, '_>, item: &Item) -> bool {\n+fn is_relevant_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, item: &Item) -> bool {\n     if let ItemKind::Fn(_, _, _, eid) = item.node {\n         is_relevant_expr(tcx, tcx.body_tables(eid), &tcx.hir().body(eid).value)\n     } else {\n         true\n     }\n }\n \n-fn is_relevant_impl(tcx: TyCtxt<'_, '_, '_>, item: &ImplItem) -> bool {\n+fn is_relevant_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, item: &ImplItem) -> bool {\n     match item.node {\n         ImplItemKind::Method(_, eid) => is_relevant_expr(tcx, tcx.body_tables(eid), &tcx.hir().body(eid).value),\n         _ => false,\n     }\n }\n \n-fn is_relevant_trait(tcx: TyCtxt<'_, '_, '_>, item: &TraitItem) -> bool {\n+fn is_relevant_trait<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, item: &TraitItem) -> bool {\n     match item.node {\n         TraitItemKind::Method(_, TraitMethod::Required(_)) => true,\n         TraitItemKind::Method(_, TraitMethod::Provided(eid)) => {\n@@ -377,7 +377,7 @@ fn is_relevant_trait(tcx: TyCtxt<'_, '_, '_>, item: &TraitItem) -> bool {\n     }\n }\n \n-fn is_relevant_block(tcx: TyCtxt<'_, '_, '_>, tables: &ty::TypeckTables<'_>, block: &Block) -> bool {\n+fn is_relevant_block<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, tables: &ty::TypeckTables<'_>, block: &Block) -> bool {\n     if let Some(stmt) = block.stmts.first() {\n         match &stmt.node {\n             StmtKind::Local(_) => true,\n@@ -389,7 +389,7 @@ fn is_relevant_block(tcx: TyCtxt<'_, '_, '_>, tables: &ty::TypeckTables<'_>, blo\n     }\n }\n \n-fn is_relevant_expr(tcx: TyCtxt<'_, '_, '_>, tables: &ty::TypeckTables<'_>, expr: &Expr) -> bool {\n+fn is_relevant_expr<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, tables: &ty::TypeckTables<'_>, expr: &Expr) -> bool {\n     match &expr.node {\n         ExprKind::Block(block, _) => is_relevant_block(tcx, tables, block),\n         ExprKind::Ret(Some(e)) => is_relevant_expr(tcx, tables, e),"}, {"sha": "3d6fa273c3e31497539581620521f37a143770cc", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31435cd7f521a3d48511d7cc1ffc61255eda5c70/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31435cd7f521a3d48511d7cc1ffc61255eda5c70/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=31435cd7f521a3d48511d7cc1ffc61255eda5c70", "patch": "@@ -245,7 +245,7 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n                     let def = self.tables.qpath_def(qpath, callee.hir_id);\n                     if let Some(def_id) = def.opt_def_id();\n                     let def_path = get_def_path(self.tcx, def_id);\n-                    if let &[\"core\", \"num\", impl_ty, \"max_value\"] = &def_path[..];\n+                    if let &[\"core\", \"num\", impl_ty, \"max_value\"] = &def_path.iter().map(|s| s.as_str()).collect::<Vec<_>>()[..];\n                     then {\n                        let value = match impl_ty {\n                            \"<impl i8>\" => i8::max_value() as u128,"}, {"sha": "f8158bd16f73e4d3d8e5aa028b688a2512cb1fc8", "filename": "clippy_lints/src/fallible_impl_from.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31435cd7f521a3d48511d7cc1ffc61255eda5c70/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31435cd7f521a3d48511d7cc1ffc61255eda5c70/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffallible_impl_from.rs?ref=31435cd7f521a3d48511d7cc1ffc61255eda5c70", "patch": "@@ -132,7 +132,7 @@ fn lint_impl_body<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, impl_span: Span, impl_it\n     }\n }\n \n-fn match_type(tcx: ty::TyCtxt<'_, '_, '_>, ty: ty::Ty<'_>, path: &[&str]) -> bool {\n+fn match_type<'a, 'tcx>(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>, ty: ty::Ty<'_>, path: &[&str]) -> bool {\n     match ty.sty {\n         ty::Adt(adt, _) => match_def_path(tcx, adt.did, path),\n         _ => false,"}, {"sha": "1943373eb4a38796d783c07783234d727597b42a", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/31435cd7f521a3d48511d7cc1ffc61255eda5c70/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31435cd7f521a3d48511d7cc1ffc61255eda5c70/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=31435cd7f521a3d48511d7cc1ffc61255eda5c70", "patch": "@@ -1,6 +1,7 @@\n // error-pattern:cargo-clippy\n \n #![feature(box_syntax)]\n+#![feature(never_type)]\n #![feature(rustc_private)]\n #![feature(slice_patterns)]\n #![feature(stmt_expr_attributes)]"}, {"sha": "d4c4756e45811be67776aec7158f8fe520bdbe6c", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/31435cd7f521a3d48511d7cc1ffc61255eda5c70/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31435cd7f521a3d48511d7cc1ffc61255eda5c70/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=31435cd7f521a3d48511d7cc1ffc61255eda5c70", "patch": "@@ -12,6 +12,7 @@ use rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintC\n use rustc::ty::layout::LayoutOf;\n use rustc::ty::{self, InferTy, Ty, TyCtxt, TypeckTables};\n use rustc::{declare_tool_lint, lint_array};\n+use rustc::ty::print::Printer;\n use rustc_errors::Applicability;\n use rustc_target::spec::abi::Abi;\n use rustc_typeck::hir_ty_to_ty;\n@@ -1135,15 +1136,14 @@ impl LintPass for CastPass {\n \n // Check if the given type is either `core::ffi::c_void` or\n // one of the platform specific `libc::<platform>::c_void` of libc.\n-fn is_c_void(tcx: TyCtxt<'_, '_, '_>, ty: Ty<'_>) -> bool {\n+fn is_c_void<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, ty: Ty<'_>) -> bool {\n     if let ty::Adt(adt, _) = ty.sty {\n-        let mut apb = AbsolutePathBuffer { names: vec![] };\n-        tcx.push_item_path(&mut apb, adt.did, false);\n+        let names = AbsolutePathBuffer { tcx }.print_def_path(adt.did, &[]).unwrap();\n \n-        if apb.names.is_empty() {\n+        if names.is_empty() {\n             return false;\n         }\n-        if apb.names[0] == \"libc\" || apb.names[0] == \"core\" && *apb.names.last().unwrap() == \"c_void\" {\n+        if names[0] == \"libc\" || names[0] == \"core\" && *names.last().unwrap() == \"c_void\" {\n             return true;\n         }\n     }"}, {"sha": "c9c11ef44e4994a9849860117713aa106c7cd31e", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 94, "deletions": 22, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/31435cd7f521a3d48511d7cc1ffc61255eda5c70/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31435cd7f521a3d48511d7cc1ffc61255eda5c70/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=31435cd7f521a3d48511d7cc1ffc61255eda5c70", "patch": "@@ -24,6 +24,8 @@ use if_chain::if_chain;\n use matches::matches;\n use rustc::hir;\n use rustc::hir::def::Def;\n+use rustc::hir::map::DisambiguatedDefPathData;\n+use rustc::hir::def_id::CrateNum;\n use rustc::hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc::hir::intravisit::{NestedVisitorMap, Visitor};\n use rustc::hir::Node;\n@@ -41,7 +43,6 @@ use rustc_errors::Applicability;\n use syntax::ast::{self, LitKind};\n use syntax::attr;\n use syntax::source_map::{Span, DUMMY_SP};\n-use syntax::symbol;\n use syntax::symbol::{keywords, Symbol};\n \n use crate::reexport::*;\n@@ -97,19 +98,97 @@ pub fn in_macro(span: Span) -> bool {\n /// Used to store the absolute path to a type.\n ///\n /// See `match_def_path` for usage.\n-#[derive(Debug)]\n-pub struct AbsolutePathBuffer {\n-    pub names: Vec<symbol::LocalInternedString>,\n+pub struct AbsolutePathBuffer<'a, 'tcx> {\n+    pub tcx: TyCtxt<'a, 'tcx, 'tcx>,\n }\n \n-impl ty::item_path::ItemPathBuffer for AbsolutePathBuffer {\n-    fn root_mode(&self) -> &ty::item_path::RootMode {\n-        const ABSOLUTE: &ty::item_path::RootMode = &ty::item_path::RootMode::Absolute;\n-        ABSOLUTE\n+use rustc::ty::print::Printer;\n+\n+impl<'tcx> Printer<'tcx, 'tcx> for AbsolutePathBuffer<'_, 'tcx> {\n+    type Error = !;\n+\n+    type Path = Vec<String>;\n+    type Region = ();\n+    type Type = ();\n+    type DynExistential = ();\n+\n+    fn tcx<'a>(&'a self) -> TyCtxt<'a, 'tcx, 'tcx> {\n+        self.tcx\n+    }\n+\n+    fn print_region(\n+        self,\n+        _region: ty::Region<'_>,\n+        ) -> Result<Self::Region, Self::Error> {\n+        Ok(())\n+    }\n+\n+    fn print_type(\n+        self,\n+        _ty: Ty<'tcx>,\n+        ) -> Result<Self::Type, Self::Error> {\n+        Ok(())\n+    }\n+\n+    fn print_dyn_existential(\n+        self,\n+        _predicates: &'tcx ty::List<ty::ExistentialPredicate<'tcx>>,\n+        ) -> Result<Self::DynExistential, Self::Error> {\n+        Ok(())\n     }\n \n-    fn push(&mut self, text: &str) {\n-        self.names.push(symbol::Symbol::intern(text).as_str());\n+    fn path_crate(\n+        self,\n+        cnum: CrateNum,\n+        ) -> Result<Self::Path, Self::Error> {\n+        Ok(vec![self.tcx.original_crate_name(cnum).to_string()])\n+    }\n+    fn path_qualified(\n+        self,\n+        self_ty: Ty<'tcx>,\n+        trait_ref: Option<ty::TraitRef<'tcx>>,\n+        ) -> Result<Self::Path, Self::Error> {\n+        // This shouldn't ever be needed, but just in case:\n+        Ok(vec![match trait_ref {\n+            Some(trait_ref) => format!(\"{:?}\", trait_ref),\n+            None => format!(\"<{}>\", self_ty),\n+        }])\n+    }\n+\n+    fn path_append_impl(\n+        self,\n+        print_prefix: impl FnOnce(Self) -> Result<Self::Path, Self::Error>,\n+        _disambiguated_data: &DisambiguatedDefPathData,\n+        self_ty: Ty<'tcx>,\n+        trait_ref: Option<ty::TraitRef<'tcx>>,\n+        ) -> Result<Self::Path, Self::Error> {\n+        let mut path = print_prefix(self)?;\n+\n+        // This shouldn't ever be needed, but just in case:\n+        path.push(match trait_ref {\n+            Some(trait_ref) => {\n+                format!(\"<impl {} for {}>\", trait_ref, self_ty)\n+            }\n+            None => format!(\"<impl {}>\", self_ty),\n+        });\n+\n+        Ok(path)\n+    }\n+    fn path_append(\n+        self,\n+        print_prefix: impl FnOnce(Self) -> Result<Self::Path, Self::Error>,\n+        disambiguated_data: &DisambiguatedDefPathData,\n+        ) -> Result<Self::Path, Self::Error> {\n+        let mut path = print_prefix(self)?;\n+        path.push(disambiguated_data.data.as_interned_str().to_string());\n+        Ok(path)\n+    }\n+    fn path_generic_args(\n+        self,\n+        print_prefix: impl FnOnce(Self) -> Result<Self::Path, Self::Error>,\n+        _args: &[Kind<'tcx>],\n+        ) -> Result<Self::Path, Self::Error> {\n+        print_prefix(self)\n     }\n }\n \n@@ -121,12 +200,10 @@ impl ty::item_path::ItemPathBuffer for AbsolutePathBuffer {\n /// ```\n ///\n /// See also the `paths` module.\n-pub fn match_def_path(tcx: TyCtxt<'_, '_, '_>, def_id: DefId, path: &[&str]) -> bool {\n-    let mut apb = AbsolutePathBuffer { names: vec![] };\n+pub fn match_def_path<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId, path: &[&str]) -> bool {\n+    let names = AbsolutePathBuffer { tcx }.print_def_path(def_id, &[]).unwrap();\n \n-    tcx.push_item_path(&mut apb, def_id, false);\n-\n-    apb.names.len() == path.len() && apb.names.into_iter().zip(path.iter()).all(|(a, &b)| *a == *b)\n+    names.len() == path.len() && names.into_iter().zip(path.iter()).all(|(a, &b)| *a == *b)\n }\n \n /// Gets the absolute path of `def_id` as a vector of `&str`.\n@@ -138,13 +215,8 @@ pub fn match_def_path(tcx: TyCtxt<'_, '_, '_>, def_id: DefId, path: &[&str]) ->\n ///     // The given `def_id` is that of an `Option` type\n /// };\n /// ```\n-pub fn get_def_path(tcx: TyCtxt<'_, '_, '_>, def_id: DefId) -> Vec<&'static str> {\n-    let mut apb = AbsolutePathBuffer { names: vec![] };\n-    tcx.push_item_path(&mut apb, def_id, false);\n-    apb.names\n-        .iter()\n-        .map(syntax_pos::symbol::LocalInternedString::get)\n-        .collect()\n+pub fn get_def_path<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Vec<String> {\n+    AbsolutePathBuffer { tcx }.print_def_path(def_id, &[]).unwrap()\n }\n \n /// Checks if type is struct, enum or union type with the given def path."}]}