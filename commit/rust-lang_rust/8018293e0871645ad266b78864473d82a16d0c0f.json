{"sha": "8018293e0871645ad266b78864473d82a16d0c0f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwMTgyOTNlMDg3MTY0NWFkMjY2Yjc4ODY0NDczZDgyYTE2ZDBjMGY=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-12-30T02:34:06Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-01-05T01:28:54Z"}, "message": "Switch encode_utf* to by-value self.", "tree": {"sha": "8e039cd928ed3e0c9e9d27bfbf4384eb04f87448", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e039cd928ed3e0c9e9d27bfbf4384eb04f87448"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8018293e0871645ad266b78864473d82a16d0c0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8018293e0871645ad266b78864473d82a16d0c0f", "html_url": "https://github.com/rust-lang/rust/commit/8018293e0871645ad266b78864473d82a16d0c0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8018293e0871645ad266b78864473d82a16d0c0f/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abdeefdbcc96e0f270a4f74892589e1e6cb9b928", "url": "https://api.github.com/repos/rust-lang/rust/commits/abdeefdbcc96e0f270a4f74892589e1e6cb9b928", "html_url": "https://github.com/rust-lang/rust/commit/abdeefdbcc96e0f270a4f74892589e1e6cb9b928"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "332c002451fe2a84b6776141616a7d1280d5d8c5", "filename": "src/libcore/char.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8018293e0871645ad266b78864473d82a16d0c0f/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8018293e0871645ad266b78864473d82a16d0c0f/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=8018293e0871645ad266b78864473d82a16d0c0f", "patch": "@@ -183,15 +183,15 @@ pub trait Char {\n     /// If the buffer is not large enough, nothing will be written into it\n     /// and a `None` will be returned.\n     #[unstable = \"pending trait organization\"]\n-    fn encode_utf8(&self, dst: &mut [u8]) -> Option<uint>;\n+    fn encode_utf8(self, dst: &mut [u8]) -> Option<uint>;\n \n     /// Encodes this character as UTF-16 into the provided `u16` buffer,\n     /// and then returns the number of `u16`s written.\n     ///\n     /// If the buffer is not large enough, nothing will be written into it\n     /// and a `None` will be returned.\n     #[unstable = \"pending trait organization\"]\n-    fn encode_utf16(&self, dst: &mut [u16]) -> Option<uint>;\n+    fn encode_utf16(self, dst: &mut [u16]) -> Option<uint>;\n }\n \n #[experimental = \"trait is experimental\"]\n@@ -260,9 +260,9 @@ impl Char for char {\n \n     #[inline]\n     #[unstable = \"pending error conventions, trait organization\"]\n-    fn encode_utf8<'a>(&self, dst: &'a mut [u8]) -> Option<uint> {\n+    fn encode_utf8(self, dst: &mut [u8]) -> Option<uint> {\n         // Marked #[inline] to allow llvm optimizing it away\n-        let code = *self as u32;\n+        let code = self as u32;\n         if code < MAX_ONE_B && dst.len() >= 1 {\n             dst[0] = code as u8;\n             Some(1)\n@@ -288,9 +288,9 @@ impl Char for char {\n \n     #[inline]\n     #[unstable = \"pending error conventions, trait organization\"]\n-    fn encode_utf16(&self, dst: &mut [u16]) -> Option<uint> {\n+    fn encode_utf16(self, dst: &mut [u16]) -> Option<uint> {\n         // Marked #[inline] to allow llvm optimizing it away\n-        let mut ch = *self as u32;\n+        let mut ch = self as u32;\n         if (ch & 0xFFFF_u32) == ch  && dst.len() >= 1 {\n             // The BMP falls through (assuming non-surrogate, as it should)\n             dst[0] = ch as u16;"}]}