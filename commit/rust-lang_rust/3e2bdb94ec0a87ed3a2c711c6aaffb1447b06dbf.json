{"sha": "3e2bdb94ec0a87ed3a2c711c6aaffb1447b06dbf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlMmJkYjk0ZWMwYTg3ZWQzYTJjNzExYzZhYWZmYjE0NDdiMDZkYmY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-04-08T20:04:58Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-04-14T12:53:33Z"}, "message": "Don't store TyCtxt in UnwindContext", "tree": {"sha": "bb84b6bbfc05bcbf3eb509443f98df28d07a7c13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb84b6bbfc05bcbf3eb509443f98df28d07a7c13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e2bdb94ec0a87ed3a2c711c6aaffb1447b06dbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e2bdb94ec0a87ed3a2c711c6aaffb1447b06dbf", "html_url": "https://github.com/rust-lang/rust/commit/3e2bdb94ec0a87ed3a2c711c6aaffb1447b06dbf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e2bdb94ec0a87ed3a2c711c6aaffb1447b06dbf/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b09b8b1bd475f3782818e825b8f5f32d4df77d6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b09b8b1bd475f3782818e825b8f5f32d4df77d6c", "html_url": "https://github.com/rust-lang/rust/commit/b09b8b1bd475f3782818e825b8f5f32d4df77d6c"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "a09e32577869e7452c6ad1bb007e5c80c5629630", "filename": "src/allocator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e2bdb94ec0a87ed3a2c711c6aaffb1447b06dbf/src%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e2bdb94ec0a87ed3a2c711c6aaffb1447b06dbf/src%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fallocator.rs?ref=3e2bdb94ec0a87ed3a2c711c6aaffb1447b06dbf", "patch": "@@ -11,7 +11,7 @@ use rustc_span::symbol::sym;\n pub(crate) fn codegen(\n     tcx: TyCtxt<'_>,\n     module: &mut impl Module,\n-    unwind_context: &mut UnwindContext<'_>,\n+    unwind_context: &mut UnwindContext,\n ) -> bool {\n     let any_dynamic_crate = tcx.dependency_formats(LOCAL_CRATE).iter().any(|(_, list)| {\n         use rustc_middle::middle::dependency_format::Linkage;\n@@ -29,7 +29,7 @@ pub(crate) fn codegen(\n \n fn codegen_inner(\n     module: &mut impl Module,\n-    unwind_context: &mut UnwindContext<'_>,\n+    unwind_context: &mut UnwindContext,\n     kind: AllocatorKind,\n ) {\n     let usize_ty = module.target_config().pointer_type();"}, {"sha": "aeafc901fa533c5d759358931067c304db844ff9", "filename": "src/debuginfo/unwind.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3e2bdb94ec0a87ed3a2c711c6aaffb1447b06dbf/src%2Fdebuginfo%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e2bdb94ec0a87ed3a2c711c6aaffb1447b06dbf/src%2Fdebuginfo%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Funwind.rs?ref=3e2bdb94ec0a87ed3a2c711c6aaffb1447b06dbf", "patch": "@@ -5,17 +5,19 @@ use crate::prelude::*;\n use cranelift_codegen::isa::{unwind::UnwindInfo, TargetIsa};\n \n use gimli::write::{Address, CieId, EhFrame, FrameTable, Section};\n+use gimli::RunTimeEndian;\n \n use crate::backend::WriteDebugInfo;\n \n-pub(crate) struct UnwindContext<'tcx> {\n-    tcx: TyCtxt<'tcx>,\n+pub(crate) struct UnwindContext {\n+    endian: RunTimeEndian,\n     frame_table: FrameTable,\n     cie_id: Option<CieId>,\n }\n \n-impl<'tcx> UnwindContext<'tcx> {\n-    pub(crate) fn new(tcx: TyCtxt<'tcx>, isa: &dyn TargetIsa, pic_eh_frame: bool) -> Self {\n+impl UnwindContext {\n+    pub(crate) fn new(tcx: TyCtxt<'_>, isa: &dyn TargetIsa, pic_eh_frame: bool) -> Self {\n+        let endian = super::target_endian(tcx);\n         let mut frame_table = FrameTable::default();\n \n         let cie_id = if let Some(mut cie) = isa.create_systemv_cie() {\n@@ -28,7 +30,7 @@ impl<'tcx> UnwindContext<'tcx> {\n             None\n         };\n \n-        UnwindContext { tcx, frame_table, cie_id }\n+        UnwindContext { endian, frame_table, cie_id }\n     }\n \n     pub(crate) fn add_function(&mut self, func_id: FuncId, context: &Context, isa: &dyn TargetIsa) {\n@@ -54,8 +56,7 @@ impl<'tcx> UnwindContext<'tcx> {\n     }\n \n     pub(crate) fn emit<P: WriteDebugInfo>(self, product: &mut P) {\n-        let mut eh_frame =\n-            EhFrame::from(super::emit::WriterRelocate::new(super::target_endian(self.tcx)));\n+        let mut eh_frame = EhFrame::from(super::emit::WriterRelocate::new(self.endian));\n         self.frame_table.write_eh_frame(&mut eh_frame).unwrap();\n \n         if !eh_frame.0.writer.slice().is_empty() {\n@@ -75,8 +76,7 @@ impl<'tcx> UnwindContext<'tcx> {\n         self,\n         jit_module: &cranelift_jit::JITModule,\n     ) -> Option<UnwindRegistry> {\n-        let mut eh_frame =\n-            EhFrame::from(super::emit::WriterRelocate::new(super::target_endian(self.tcx)));\n+        let mut eh_frame = EhFrame::from(super::emit::WriterRelocate::new(self.endian));\n         self.frame_table.write_eh_frame(&mut eh_frame).unwrap();\n \n         if eh_frame.0.writer.slice().is_empty() {"}, {"sha": "db7d39fea4c59950c55256d42c54b0cf932ab03d", "filename": "src/driver/aot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e2bdb94ec0a87ed3a2c711c6aaffb1447b06dbf/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e2bdb94ec0a87ed3a2c711c6aaffb1447b06dbf/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=3e2bdb94ec0a87ed3a2c711c6aaffb1447b06dbf", "patch": "@@ -31,7 +31,7 @@ fn emit_module(\n     kind: ModuleKind,\n     module: ObjectModule,\n     debug: Option<DebugContext<'_>>,\n-    unwind_context: UnwindContext<'_>,\n+    unwind_context: UnwindContext,\n ) -> ModuleCodegenResult {\n     let mut product = module.finish();\n "}, {"sha": "ee556bd2281a58489c3a2292067c8bcfad301867", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e2bdb94ec0a87ed3a2c711c6aaffb1447b06dbf/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e2bdb94ec0a87ed3a2c711c6aaffb1447b06dbf/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=3e2bdb94ec0a87ed3a2c711c6aaffb1447b06dbf", "patch": "@@ -124,7 +124,7 @@ struct CodegenCx<'m, 'tcx: 'm> {\n     global_asm: String,\n     cached_context: Context,\n     debug_context: Option<DebugContext<'tcx>>,\n-    unwind_context: UnwindContext<'tcx>,\n+    unwind_context: UnwindContext,\n }\n \n impl<'m, 'tcx> CodegenCx<'m, 'tcx> {\n@@ -151,7 +151,7 @@ impl<'m, 'tcx> CodegenCx<'m, 'tcx> {\n         }\n     }\n \n-    fn finalize(self) -> (String, Option<DebugContext<'tcx>>, UnwindContext<'tcx>) {\n+    fn finalize(self) -> (String, Option<DebugContext<'tcx>>, UnwindContext) {\n         (self.global_asm, self.debug_context, self.unwind_context)\n     }\n }"}, {"sha": "22dc3f2bfe64e20f0c5d0c113d236986d77daa88", "filename": "src/main_shim.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e2bdb94ec0a87ed3a2c711c6aaffb1447b06dbf/src%2Fmain_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e2bdb94ec0a87ed3a2c711c6aaffb1447b06dbf/src%2Fmain_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain_shim.rs?ref=3e2bdb94ec0a87ed3a2c711c6aaffb1447b06dbf", "patch": "@@ -9,7 +9,7 @@ use crate::prelude::*;\n pub(crate) fn maybe_create_entry_wrapper(\n     tcx: TyCtxt<'_>,\n     module: &mut impl Module,\n-    unwind_context: &mut UnwindContext<'_>,\n+    unwind_context: &mut UnwindContext,\n ) {\n     let (main_def_id, use_start_lang_item) = match tcx.entry_fn(LOCAL_CRATE) {\n         Some((def_id, entry_ty)) => (\n@@ -32,7 +32,7 @@ pub(crate) fn maybe_create_entry_wrapper(\n     fn create_entry_fn(\n         tcx: TyCtxt<'_>,\n         m: &mut impl Module,\n-        unwind_context: &mut UnwindContext<'_>,\n+        unwind_context: &mut UnwindContext,\n         rust_main_def_id: DefId,\n         use_start_lang_item: bool,\n     ) {"}]}