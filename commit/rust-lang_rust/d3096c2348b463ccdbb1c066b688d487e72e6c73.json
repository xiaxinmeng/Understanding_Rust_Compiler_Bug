{"sha": "d3096c2348b463ccdbb1c066b688d487e72e6c73", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzMDk2YzIzNDhiNDYzY2NkYmIxYzA2NmI2ODhkNDg3ZTcyZTZjNzM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-07-05T20:24:57Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-07-14T19:27:07Z"}, "message": "Move llvm bindings to their own crate", "tree": {"sha": "4898f011ff31aa4425ad64a3a4a6721b0f840333", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4898f011ff31aa4425ad64a3a4a6721b0f840333"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3096c2348b463ccdbb1c066b688d487e72e6c73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3096c2348b463ccdbb1c066b688d487e72e6c73", "html_url": "https://github.com/rust-lang/rust/commit/d3096c2348b463ccdbb1c066b688d487e72e6c73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3096c2348b463ccdbb1c066b688d487e72e6c73/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61e84a5dcaf923ee4f8c98e8b7911650cf215f54", "url": "https://api.github.com/repos/rust-lang/rust/commits/61e84a5dcaf923ee4f8c98e8b7911650cf215f54", "html_url": "https://github.com/rust-lang/rust/commit/61e84a5dcaf923ee4f8c98e8b7911650cf215f54"}], "stats": {"total": 228, "additions": 209, "deletions": 19}, "files": [{"sha": "bc34fc2dcdfbb5cc771b32dae4351fbb7d59857d", "filename": ".gitignore", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3096c2348b463ccdbb1c066b688d487e72e6c73/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/d3096c2348b463ccdbb1c066b688d487e72e6c73/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=d3096c2348b463ccdbb1c066b688d487e72e6c73", "patch": "@@ -86,5 +86,5 @@ src/etc/dl\n .settings/\n /build\n i686-pc-mingw32/\n-src/librustc/lib/llvmdeps.rs\n+src/librustc_llvm/llvmdeps.rs\n *.pot"}, {"sha": "e565d3eb2b9402506e6ded6dd0d210f541e00ae9", "filename": "mk/crates.mk", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d3096c2348b463ccdbb1c066b688d487e72e6c73/mk%2Fcrates.mk", "raw_url": "https://github.com/rust-lang/rust/raw/d3096c2348b463ccdbb1c066b688d487e72e6c73/mk%2Fcrates.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcrates.mk?ref=d3096c2348b463ccdbb1c066b688d487e72e6c73", "patch": "@@ -53,7 +53,7 @@ TARGET_CRATES := libc std green rustuv native flate arena glob term semver \\\n                  uuid serialize sync getopts collections num test time rand \\\n                  url log regex graphviz core rlibc alloc debug rustrt \\\n                  unicode\n-HOST_CRATES := syntax rustc rustdoc fourcc hexfloat regex_macros fmt_macros\n+HOST_CRATES := syntax rustc rustdoc fourcc hexfloat regex_macros fmt_macros rustc_llvm\n CRATES := $(TARGET_CRATES) $(HOST_CRATES)\n TOOLS := compiletest rustdoc rustc\n \n@@ -70,8 +70,9 @@ DEPS_green := std native:context_switch\n DEPS_rustuv := std native:uv native:uv_support\n DEPS_native := std\n DEPS_syntax := std term serialize log fmt_macros debug\n-DEPS_rustc := syntax native:rustllvm flate arena serialize getopts \\\n-              time log graphviz debug\n+DEPS_rustc := syntax flate arena serialize getopts \\\n+              time log graphviz debug rustc_llvm\n+DEPS_rustc_llvm := native:rustllvm libc std\n DEPS_rustdoc := rustc native:hoedown serialize getopts \\\n                 test time debug\n DEPS_flate := std native:miniz"}, {"sha": "177e4de310324dd6f2d3c1e35f0e50d5b80d8119", "filename": "mk/llvm.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3096c2348b463ccdbb1c066b688d487e72e6c73/mk%2Fllvm.mk", "raw_url": "https://github.com/rust-lang/rust/raw/d3096c2348b463ccdbb1c066b688d487e72e6c73/mk%2Fllvm.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fllvm.mk?ref=d3096c2348b463ccdbb1c066b688d487e72e6c73", "patch": "@@ -57,7 +57,7 @@ $(foreach host,$(CFG_HOST), \\\n $(foreach host,$(CFG_HOST), \\\n  $(eval LLVM_CONFIGS := $(LLVM_CONFIGS) $(LLVM_CONFIG_$(host))))\n \n-$(S)src/librustc/lib/llvmdeps.rs: \\\n+$(S)src/librustc_llvm/llvmdeps.rs: \\\n \t\t    $(LLVM_CONFIGS) \\\n \t\t    $(S)src/etc/mklldeps.py \\\n \t\t    $(MKFILE_DEPS)"}, {"sha": "7da11a21a7cb7fe4927f397d75390870c32d766c", "filename": "mk/target.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3096c2348b463ccdbb1c066b688d487e72e6c73/mk%2Ftarget.mk", "raw_url": "https://github.com/rust-lang/rust/raw/d3096c2348b463ccdbb1c066b688d487e72e6c73/mk%2Ftarget.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftarget.mk?ref=d3096c2348b463ccdbb1c066b688d487e72e6c73", "patch": "@@ -134,7 +134,7 @@ SNAPSHOT_RUSTC_POST_CLEANUP=$(HBIN0_H_$(CFG_BUILD))/rustc$(X_$(CFG_BUILD))\n \n define TARGET_HOST_RULES\n \n-$$(TLIB$(1)_T_$(2)_H_$(3))/stamp.rustc: $(S)src/librustc/lib/llvmdeps.rs\n+$$(TLIB$(1)_T_$(2)_H_$(3))/stamp.rustc_llvm: $(S)src/librustc_llvm/llvmdeps.rs\n \n $$(TBIN$(1)_T_$(2)_H_$(3))/:\n \tmkdir -p $$@"}, {"sha": "7da3ae0208714f3694c7b31e7eb909cdd4309492", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3096c2348b463ccdbb1c066b688d487e72e6c73/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3096c2348b463ccdbb1c066b688d487e72e6c73/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=d3096c2348b463ccdbb1c066b688d487e72e6c73", "patch": "@@ -41,6 +41,7 @@ extern crate flate;\n extern crate getopts;\n extern crate graphviz;\n extern crate libc;\n+extern crate llvm = \"rustc_llvm\";\n extern crate serialize;\n extern crate time;\n #[phase(plugin, link)] extern crate log;\n@@ -128,8 +129,7 @@ pub mod util {\n }\n \n pub mod lib {\n-    pub mod llvm;\n-    pub mod llvmdeps;\n+    pub use llvm;\n }\n \n __build_diagnostic_array!(DIAGNOSTICS)"}, {"sha": "05e5e585a63aba0305792e23421a41f78daf50e5", "filename": "src/librustc/lib/llvmdeps.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/d3096c2348b463ccdbb1c066b688d487e72e6c73/src%2Flibrustc%2Flib%2Fllvmdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3096c2348b463ccdbb1c066b688d487e72e6c73/src%2Flibrustc%2Flib%2Fllvmdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvmdeps.rs?ref=d3096c2348b463ccdbb1c066b688d487e72e6c73", "patch": "@@ -0,0 +1,64 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// WARNING: THIS IS A GENERATED FILE, DO NOT MODIFY\n+//          take a look at src/etc/mklldeps.py if you're interested\n+\n+#[cfg(target_arch = \"x86_64\", target_os = \"linux\")]\n+#[link(name = \"LLVMInstrumentation\", kind = \"static\")]\n+#[link(name = \"LLVMInterpreter\", kind = \"static\")]\n+#[link(name = \"LLVMMCJIT\", kind = \"static\")]\n+#[link(name = \"LLVMRuntimeDyld\", kind = \"static\")]\n+#[link(name = \"LLVMJIT\", kind = \"static\")]\n+#[link(name = \"LLVMExecutionEngine\", kind = \"static\")]\n+#[link(name = \"LLVMAsmParser\", kind = \"static\")]\n+#[link(name = \"LLVMLinker\", kind = \"static\")]\n+#[link(name = \"LLVMBitWriter\", kind = \"static\")]\n+#[link(name = \"LLVMipo\", kind = \"static\")]\n+#[link(name = \"LLVMVectorize\", kind = \"static\")]\n+#[link(name = \"LLVMMipsDisassembler\", kind = \"static\")]\n+#[link(name = \"LLVMMipsCodeGen\", kind = \"static\")]\n+#[link(name = \"LLVMMipsAsmParser\", kind = \"static\")]\n+#[link(name = \"LLVMMipsDesc\", kind = \"static\")]\n+#[link(name = \"LLVMMipsInfo\", kind = \"static\")]\n+#[link(name = \"LLVMMipsAsmPrinter\", kind = \"static\")]\n+#[link(name = \"LLVMARMDisassembler\", kind = \"static\")]\n+#[link(name = \"LLVMARMCodeGen\", kind = \"static\")]\n+#[link(name = \"LLVMARMAsmParser\", kind = \"static\")]\n+#[link(name = \"LLVMARMDesc\", kind = \"static\")]\n+#[link(name = \"LLVMARMInfo\", kind = \"static\")]\n+#[link(name = \"LLVMARMAsmPrinter\", kind = \"static\")]\n+#[link(name = \"LLVMX86Disassembler\", kind = \"static\")]\n+#[link(name = \"LLVMX86AsmParser\", kind = \"static\")]\n+#[link(name = \"LLVMX86CodeGen\", kind = \"static\")]\n+#[link(name = \"LLVMSelectionDAG\", kind = \"static\")]\n+#[link(name = \"LLVMAsmPrinter\", kind = \"static\")]\n+#[link(name = \"LLVMMCParser\", kind = \"static\")]\n+#[link(name = \"LLVMCodeGen\", kind = \"static\")]\n+#[link(name = \"LLVMScalarOpts\", kind = \"static\")]\n+#[link(name = \"LLVMInstCombine\", kind = \"static\")]\n+#[link(name = \"LLVMTransformUtils\", kind = \"static\")]\n+#[link(name = \"LLVMipa\", kind = \"static\")]\n+#[link(name = \"LLVMAnalysis\", kind = \"static\")]\n+#[link(name = \"LLVMTarget\", kind = \"static\")]\n+#[link(name = \"LLVMX86Desc\", kind = \"static\")]\n+#[link(name = \"LLVMX86Info\", kind = \"static\")]\n+#[link(name = \"LLVMX86AsmPrinter\", kind = \"static\")]\n+#[link(name = \"LLVMMC\", kind = \"static\")]\n+#[link(name = \"LLVMObject\", kind = \"static\")]\n+#[link(name = \"LLVMBitReader\", kind = \"static\")]\n+#[link(name = \"LLVMCore\", kind = \"static\")]\n+#[link(name = \"LLVMX86Utils\", kind = \"static\")]\n+#[link(name = \"LLVMSupport\", kind = \"static\")]\n+#[link(name = \"pthread\")]\n+#[link(name = \"dl\")]\n+#[link(name = \"m\")]\n+#[link(name = \"stdc++\")]\n+extern {}"}, {"sha": "5ee69e02af96a2aaef2171d8343a160938a45a0c", "filename": "src/librustc/middle/trans/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3096c2348b463ccdbb1c066b688d487e72e6c73/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3096c2348b463ccdbb1c066b688d487e72e6c73/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs?ref=d3096c2348b463ccdbb1c066b688d487e72e6c73", "patch": "@@ -11,7 +11,7 @@\n use driver::config::NoDebugInfo;\n use driver::session::Session;\n use lib::llvm::{ContextRef, ModuleRef, ValueRef};\n-use lib::llvm::{llvm, TargetData, TypeNames};\n+use lib::llvm::{llvm, TargetData};\n use lib::llvm::mk_target_data;\n use metadata::common::LinkMeta;\n use middle::resolve;\n@@ -21,7 +21,7 @@ use middle::trans::builder::Builder;\n use middle::trans::common::{ExternMap,tydesc_info,BuilderRef_res};\n use middle::trans::debuginfo;\n use middle::trans::monomorphize::MonoId;\n-use middle::trans::type_::Type;\n+use middle::trans::type_::{Type, TypeNames};\n use middle::ty;\n use util::sha2::Sha256;\n use util::nodemap::{NodeMap, NodeSet, DefIdMap};"}, {"sha": "54de3996811639e97505e7300ee3dd116e57f8e1", "filename": "src/librustc/middle/trans/type_.rs", "status": "modified", "additions": 52, "deletions": 2, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/d3096c2348b463ccdbb1c066b688d487e72e6c73/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3096c2348b463ccdbb1c066b688d487e72e6c73/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs?ref=d3096c2348b463ccdbb1c066b688d487e72e6c73", "patch": "@@ -10,7 +10,7 @@\n \n #![allow(non_uppercase_pattern_statics)]\n \n-use lib::llvm::{llvm, TypeRef, Bool, False, True, TypeKind};\n+use lib::llvm::{llvm, TypeRef, Bool, False, True, TypeKind, ValueRef};\n use lib::llvm::{Float, Double, X86_FP80, PPC_FP128, FP128};\n \n use middle::trans::context::CrateContext;\n@@ -20,8 +20,11 @@ use syntax::abi::{X86, X86_64, Arm, Mips, Mipsel};\n \n use std::c_str::ToCStr;\n use std::mem;\n+use std::cell::RefCell;\n+use std::collections::HashMap;\n+use std::str::raw::from_c_str;\n \n-use libc::{c_uint};\n+use libc::{c_uint, c_void, free};\n \n #[deriving(Clone, PartialEq, Show)]\n pub struct Type {\n@@ -303,3 +306,50 @@ impl Type {\n         }\n     }\n }\n+\n+/* Memory-managed object interface to type handles. */\n+\n+pub struct TypeNames {\n+    named_types: RefCell<HashMap<String, TypeRef>>,\n+}\n+\n+impl TypeNames {\n+    pub fn new() -> TypeNames {\n+        TypeNames {\n+            named_types: RefCell::new(HashMap::new())\n+        }\n+    }\n+\n+    pub fn associate_type(&self, s: &str, t: &Type) {\n+        assert!(self.named_types.borrow_mut().insert(s.to_string(),\n+                                                     t.to_ref()));\n+    }\n+\n+    pub fn find_type(&self, s: &str) -> Option<Type> {\n+        self.named_types.borrow().find_equiv(&s).map(|x| Type::from_ref(*x))\n+    }\n+\n+    pub fn type_to_str(&self, ty: Type) -> String {\n+        unsafe {\n+            let s = llvm::LLVMTypeToString(ty.to_ref());\n+            let ret = from_c_str(s);\n+            free(s as *mut c_void);\n+            ret.to_string()\n+        }\n+    }\n+\n+    pub fn types_to_str(&self, tys: &[Type]) -> String {\n+        let strs: Vec<String> = tys.iter().map(|t| self.type_to_str(*t)).collect();\n+        format!(\"[{}]\", strs.connect(\",\"))\n+    }\n+\n+    pub fn val_to_str(&self, val: ValueRef) -> String {\n+        unsafe {\n+            let s = llvm::LLVMValueToString(val);\n+            let ret = from_c_str(s);\n+            free(s as *mut c_void);\n+            ret.to_string()\n+        }\n+    }\n+}\n+"}, {"sha": "121e8882f1ae18040324be652422439ec0125cbe", "filename": "src/librustc_llvm/lib.rs", "status": "renamed", "additions": 82, "deletions": 7, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/d3096c2348b463ccdbb1c066b688d487e72e6c73/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3096c2348b463ccdbb1c066b688d487e72e6c73/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=d3096c2348b463ccdbb1c066b688d487e72e6c73", "patch": "@@ -13,13 +13,24 @@\n #![allow(non_snake_case_functions)]\n #![allow(dead_code)]\n \n-use std::c_str::ToCStr;\n-use std::cell::RefCell;\n-use std::collections::HashMap;\n-use libc::{c_uint, c_ushort, c_void, free, uint64_t};\n-use std::str::raw::from_c_str;\n+#![crate_id = \"rustc_llvm#0.11.0\"]\n+#![crate_name = \"rustc_llvm\"]\n+#![experimental]\n+#![license = \"MIT/ASL2\"]\n+#![crate_type = \"dylib\"]\n+#![crate_type = \"rlib\"]\n+#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n+       html_root_url = \"http://doc.rust-lang.org/\")]\n+\n+#![feature(globs)]\n+#![feature(link_args)]\n+#![allow(unused_attribute)] // NOTE: remove after stage0\n+\n+extern crate libc;\n \n-use middle::trans::type_::Type;\n+use std::c_str::ToCStr;\n+use libc::{c_uint, c_ushort, uint64_t, c_int, size_t};\n \n pub type Opcode = u32;\n pub type Bool = c_uint;\n@@ -338,6 +349,10 @@ pub mod llvm {\n     use libc::{c_char, c_int, c_longlong, c_ushort, c_uint, c_ulonglong,\n                size_t, uint64_t};\n \n+    pub unsafe fn LLVMInitializeX86AsmPrinter() {\n+        LLVMInitializeX86AsmPrinter_()\n+    }\n+\n     // Link to our native llvm bindings (things that we need to use the C++ api\n     // for) and because llvm is written in C++ we need to link against libstdc++\n     //\n@@ -1747,7 +1762,8 @@ pub mod llvm {\n         pub fn LLVMInitializeX86TargetInfo();\n         pub fn LLVMInitializeX86Target();\n         pub fn LLVMInitializeX86TargetMC();\n-        pub fn LLVMInitializeX86AsmPrinter();\n+        #[link_name = \"LLVMInitializeX86AsmPrinter\"]\n+        pub fn LLVMInitializeX86AsmPrinter_();\n         pub fn LLVMInitializeX86AsmParser();\n         pub fn LLVMInitializeARMTargetInfo();\n         pub fn LLVMInitializeARMTarget();\n@@ -1861,6 +1877,7 @@ pub fn SetFunctionAttribute(fn_: ValueRef, attr: Attribute) {\n         llvm::LLVMAddFunctionAttribute(fn_, FunctionIndex as c_uint, attr as uint64_t)\n     }\n }\n+\n /* Memory-managed object interface to type handles. */\n \n pub struct TypeNames {\n@@ -1981,3 +1998,61 @@ pub fn mk_section_iter(llof: ObjectFileRef) -> SectionIter {\n         }\n     }\n }\n+\n+// FIXME #15460 - create a public function that actually calls our\n+// static LLVM symbols. Otherwise the linker will just throw llvm\n+// away.  We're just calling lots of stuff until we transitively get\n+// all of LLVM. This is worse than anything.\n+pub unsafe fn static_link_hack_this_sucks() {\n+    llvm::LLVMInitializePasses();\n+\n+    llvm::LLVMInitializeX86TargetInfo();\n+    llvm::LLVMInitializeX86Target();\n+    llvm::LLVMInitializeX86TargetMC();\n+    llvm::LLVMInitializeX86AsmPrinter();\n+    llvm::LLVMInitializeX86AsmParser();\n+\n+    llvm::LLVMInitializeARMTargetInfo();\n+    llvm::LLVMInitializeARMTarget();\n+    llvm::LLVMInitializeARMTargetMC();\n+    llvm::LLVMInitializeARMAsmPrinter();\n+    llvm::LLVMInitializeARMAsmParser();\n+\n+    llvm::LLVMInitializeMipsTargetInfo();\n+    llvm::LLVMInitializeMipsTarget();\n+    llvm::LLVMInitializeMipsTargetMC();\n+    llvm::LLVMInitializeMipsAsmPrinter();\n+    llvm::LLVMInitializeMipsAsmParser();\n+\n+    llvm::LLVMRustSetLLVMOptions(0 as c_int,\n+                                       0 as *const _);\n+\n+    llvm::LLVMPassManagerBuilderPopulateModulePassManager(0 as *mut _, 0 as *mut _);\n+    llvm::LLVMPassManagerBuilderPopulateLTOPassManager(0 as *mut _, 0 as *mut _, False, False);\n+    llvm::LLVMPassManagerBuilderPopulateFunctionPassManager(0 as *mut _, 0 as *mut _);\n+    llvm::LLVMPassManagerBuilderSetOptLevel(0 as *mut _, 0 as c_uint);\n+    llvm::LLVMPassManagerBuilderUseInlinerWithThreshold(0 as *mut _, 0 as c_uint);\n+    llvm::LLVMWriteBitcodeToFile(0 as *mut _, 0 as *const _);\n+    llvm::LLVMPassManagerBuilderCreate();\n+    llvm::LLVMPassManagerBuilderDispose(0 as *mut _);\n+\n+    llvm::LLVMRustLinkInExternalBitcode(0 as *mut _, 0 as *const _, 0 as size_t);\n+\n+    LLVMLinkInJIT();\n+    LLVMLinkInMCJIT();\n+    LLVMLinkInInterpreter();\n+\n+    extern {\n+        fn LLVMLinkInJIT();\n+        fn LLVMLinkInMCJIT();\n+        fn LLVMLinkInInterpreter();\n+    }\n+}\n+\n+// The module containing the native LLVM dependencies, generated by the build system\n+// Note that this must come after the rustllvm extern declaration so that\n+// parts of LLVM that rustllvm depends on aren't thrown away by the linker.\n+// Works to the above fix for #15460 to ensure LLVM dependencies that\n+// are only used by rustllvm don't get stripped by the linker.\n+mod llvmdeps;\n+", "previous_filename": "src/librustc/lib/llvm.rs"}]}