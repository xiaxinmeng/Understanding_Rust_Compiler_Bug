{"sha": "47bf8e734f25e1ed65864263a8795f1335d6dce0", "node_id": "C_kwDOAAsO6NoAKDQ3YmY4ZTczNGYyNWUxZWQ2NTg2NDI2M2E4Nzk1ZjEzMzVkNmRjZTA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-31T10:12:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-31T10:12:49Z"}, "message": "Auto merge of #2908 - RalfJung:bench, r=oli-obk\n\nCI: test ./miri bench", "tree": {"sha": "555368d54c5a2a1d7c56879e3a6e4b0fc0646a99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/555368d54c5a2a1d7c56879e3a6e4b0fc0646a99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47bf8e734f25e1ed65864263a8795f1335d6dce0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47bf8e734f25e1ed65864263a8795f1335d6dce0", "html_url": "https://github.com/rust-lang/rust/commit/47bf8e734f25e1ed65864263a8795f1335d6dce0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47bf8e734f25e1ed65864263a8795f1335d6dce0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb35803cb7990a12d83aab676fd546de00ca8b7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb35803cb7990a12d83aab676fd546de00ca8b7f", "html_url": "https://github.com/rust-lang/rust/commit/fb35803cb7990a12d83aab676fd546de00ca8b7f"}, {"sha": "91cb951ee908a35ab1050876e62411698cb2cc84", "url": "https://api.github.com/repos/rust-lang/rust/commits/91cb951ee908a35ab1050876e62411698cb2cc84", "html_url": "https://github.com/rust-lang/rust/commit/91cb951ee908a35ab1050876e62411698cb2cc84"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "a8aae524e7101fd35a214c48329c55a65f865737", "filename": "src/tools/miri/ci.sh", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/47bf8e734f25e1ed65864263a8795f1335d6dce0/src%2Ftools%2Fmiri%2Fci.sh", "raw_url": "https://github.com/rust-lang/rust/raw/47bf8e734f25e1ed65864263a8795f1335d6dce0/src%2Ftools%2Fmiri%2Fci.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fci.sh?ref=47bf8e734f25e1ed65864263a8795f1335d6dce0", "patch": "@@ -17,11 +17,11 @@ begingroup \"Building Miri\"\n echo \"Installing release version of Miri\"\n export RUSTFLAGS=\"-D warnings\"\n export CARGO_INCREMENTAL=0\n-./miri install # implicitly locked\n+export CARGO_EXTRA_FLAGS=\"--locked\"\n+./miri install\n \n # Prepare debug build for direct `./miri` invocations\n echo \"Building debug version of Miri\"\n-export CARGO_EXTRA_FLAGS=\"--locked\"\n ./miri check --no-default-features # make sure this can be built\n ./miri check --all-features # and this, too\n ./miri build --all-targets # the build that all the `./miri test` below will use\n@@ -39,8 +39,11 @@ function run_tests {\n   ## ui test suite\n   ./miri test\n   if [ -z \"${MIRI_TEST_TARGET+exists}\" ]; then\n-    # Only for host architecture: tests with optimizations (`-O` is what cargo passes, but crank MIR\n-    # optimizations up all the way, too).\n+    # Host-only tests: running these on all targets is unlikely to catch more problems and would\n+    # cost a lot of CI time.\n+\n+    # Tests with optimizations (`-O` is what cargo passes, but crank MIR optimizations up all the\n+    # way, too).\n     # Optimizations change diagnostics (mostly backtraces), so we don't check\n     # them. Also error locations change so we don't run the failing tests.\n     # We explicitly enable debug-assertions here, they are disabled by -O but we have tests\n@@ -51,6 +54,9 @@ function run_tests {\n     for FILE in tests/many-seeds/*.rs; do\n       MIRI_SEEDS=64 CARGO_EXTRA_FLAGS=\"$CARGO_EXTRA_FLAGS -q\" ./miri many-seeds ./miri run \"$FILE\"\n     done\n+\n+    # Check that the benchmarks build and run, but without actually benchmarking.\n+    HYPERFINE=\"bash -c\" ./miri bench\n   fi\n \n   ## test-cargo-miri\n@@ -75,13 +81,6 @@ function run_tests {\n   unset RUSTC MIRI\n   rm -rf .cargo\n \n-  # Ensure that our benchmarks all work, but only on Linux hosts.\n-  if [ -z \"${MIRI_TEST_TARGET+exists}\" ] && [ \"$HOST_TARGET\" = x86_64-unknown-linux-gnu ] ; then\n-    for BENCH in $(ls \"bench-cargo-miri\"); do\n-      cargo miri run --manifest-path bench-cargo-miri/$BENCH/Cargo.toml\n-    done\n-  fi\n-\n   endgroup\n }\n "}, {"sha": "7cda995879cfbdb9d1490afcc67a3738d65f6c09", "filename": "src/tools/miri/miri", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/47bf8e734f25e1ed65864263a8795f1335d6dce0/src%2Ftools%2Fmiri%2Fmiri", "raw_url": "https://github.com/rust-lang/rust/raw/47bf8e734f25e1ed65864263a8795f1335d6dce0/src%2Ftools%2Fmiri%2Fmiri", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fmiri?ref=47bf8e734f25e1ed65864263a8795f1335d6dce0", "patch": "@@ -77,7 +77,7 @@ if [ -z \"$COMMAND\" ]; then\n fi\n shift\n # macOS does not have a useful readlink/realpath so we have to use Python instead...\n-MIRIDIR=$(python3 -c 'import os, sys; print(os.path.dirname(os.path.realpath(sys.argv[1])))' \"$0\")\n+MIRIDIR=$(python3 -c 'import pathlib, sys; print(pathlib.Path(sys.argv[1]).resolve().parent.as_posix())' \"$0\")\n # Used for rustc syncs.\n JOSH_FILTER=\":rev(75dd959a3a40eb5b4574f8d2e23aa6efbeb33573:prefix=src/tools/miri):/src/tools/miri\"\n # Needed for `./miri bench`.\n@@ -184,6 +184,8 @@ many-seeds)\n     exit 0\n     ;;\n bench)\n+    # The hyperfine to use\n+    HYPERFINE=${HYPERFINE:-hyperfine -w 1 -m 5 --shell=none}\n     # Make sure we have an up-to-date Miri installed\n     \"$0\" install\n     # Run the requested benchmarks\n@@ -193,7 +195,7 @@ bench)\n         BENCHES=(\"$@\")\n     fi\n     for BENCH in \"${BENCHES[@]}\"; do\n-        hyperfine -w 1 -m 5 --shell=none \"cargo +$TOOLCHAIN miri run --manifest-path $MIRIDIR/bench-cargo-miri/$BENCH/Cargo.toml\"\n+        $HYPERFINE \"cargo +$TOOLCHAIN miri run --manifest-path $MIRIDIR/bench-cargo-miri/$BENCH/Cargo.toml\"\n     done\n     exit 0\n     ;;\n@@ -280,10 +282,9 @@ find_sysroot() {\n # Run command.\n case \"$COMMAND\" in\n install)\n-    # \"--locked\" to respect the Cargo.lock file if it exists.\n     # Install binaries to the miri toolchain's sysroot so they do not interact with other toolchains.\n-    $CARGO install $CARGO_EXTRA_FLAGS --path \"$MIRIDIR\" --force --locked --root \"$SYSROOT\" \"$@\"\n-    $CARGO install $CARGO_EXTRA_FLAGS --path \"$MIRIDIR\"/cargo-miri --force --locked --root \"$SYSROOT\" \"$@\"\n+    $CARGO install $CARGO_EXTRA_FLAGS --path \"$MIRIDIR\" --force --root \"$SYSROOT\" \"$@\"\n+    $CARGO install $CARGO_EXTRA_FLAGS --path \"$MIRIDIR\"/cargo-miri --force --root \"$SYSROOT\" \"$@\"\n     ;;\n check)\n     # Check, and let caller control flags."}]}