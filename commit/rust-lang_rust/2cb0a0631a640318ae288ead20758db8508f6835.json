{"sha": "2cb0a0631a640318ae288ead20758db8508f6835", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjYjBhMDYzMWE2NDAzMThhZTI4OGVhZDIwNzU4ZGI4NTA4ZjY4MzU=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-06-27T21:07:20Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-06-27T21:46:58Z"}, "message": "Update tests for grouped nll move errors", "tree": {"sha": "effff316398cd1155683847366e1e77bd01b7a62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/effff316398cd1155683847366e1e77bd01b7a62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2cb0a0631a640318ae288ead20758db8508f6835", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2cb0a0631a640318ae288ead20758db8508f6835", "html_url": "https://github.com/rust-lang/rust/commit/2cb0a0631a640318ae288ead20758db8508f6835", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2cb0a0631a640318ae288ead20758db8508f6835/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0193d1f736b755004e15b7c1bc41467b177845cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/0193d1f736b755004e15b7c1bc41467b177845cf", "html_url": "https://github.com/rust-lang/rust/commit/0193d1f736b755004e15b7c1bc41467b177845cf"}], "stats": {"total": 482, "additions": 378, "deletions": 104}, "files": [{"sha": "4bb66ace02687c2e597603aa3e11333183bebb26", "filename": "src/test/compile-fail/borrowck/borrowck-move-out-of-struct-with-dtor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2cb0a0631a640318ae288ead20758db8508f6835/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-move-out-of-struct-with-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cb0a0631a640318ae288ead20758db8508f6835/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-move-out-of-struct-with-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-move-out-of-struct-with-dtor.rs?ref=2cb0a0631a640318ae288ead20758db8508f6835", "patch": "@@ -18,9 +18,9 @@ impl Drop for S {\n \n fn move_in_match() {\n     match (S {f:\"foo\".to_string()}) {\n+        //[mir]~^ ERROR [E0509]\n         S {f:_s} => {}\n         //[ast]~^ ERROR cannot move out of type `S`, which implements the `Drop` trait [E0509]\n-        //[mir]~^^ ERROR [E0509]\n     }\n }\n "}, {"sha": "28403644a234af55a0ee3760042cd9a711d01f3e", "filename": "src/test/ui/E0508.ast.nll.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0193d1f736b755004e15b7c1bc41467b177845cf/src%2Ftest%2Fui%2FE0508.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0193d1f736b755004e15b7c1bc41467b177845cf/src%2Ftest%2Fui%2FE0508.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0508.ast.nll.stderr?ref=0193d1f736b755004e15b7c1bc41467b177845cf", "patch": "@@ -1,9 +0,0 @@\n-error[E0508]: cannot move out of type `[NonCopy; 1]`, a non-copy array\n-  --> $DIR/E0508.rs:18:18\n-   |\n-LL |     let _value = array[0];  //[ast]~ ERROR [E0508]\n-   |                  ^^^^^^^^ cannot move out of here\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0508`."}, {"sha": "28403644a234af55a0ee3760042cd9a711d01f3e", "filename": "src/test/ui/E0508.mir.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0193d1f736b755004e15b7c1bc41467b177845cf/src%2Ftest%2Fui%2FE0508.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0193d1f736b755004e15b7c1bc41467b177845cf/src%2Ftest%2Fui%2FE0508.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0508.mir.stderr?ref=0193d1f736b755004e15b7c1bc41467b177845cf", "patch": "@@ -1,9 +0,0 @@\n-error[E0508]: cannot move out of type `[NonCopy; 1]`, a non-copy array\n-  --> $DIR/E0508.rs:18:18\n-   |\n-LL |     let _value = array[0];  //[ast]~ ERROR [E0508]\n-   |                  ^^^^^^^^ cannot move out of here\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0508`."}, {"sha": "86445ad89821c5c209168afe86df55eaa776c683", "filename": "src/test/ui/E0508.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2cb0a0631a640318ae288ead20758db8508f6835/src%2Ftest%2Fui%2FE0508.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cb0a0631a640318ae288ead20758db8508f6835/src%2Ftest%2Fui%2FE0508.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0508.rs?ref=2cb0a0631a640318ae288ead20758db8508f6835", "patch": "@@ -8,13 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// revisions: ast mir\n-//[mir]compile-flags: -Z borrowck=mir\n-\n struct NonCopy;\n \n fn main() {\n     let array = [NonCopy; 1];\n-    let _value = array[0];  //[ast]~ ERROR [E0508]\n-                            //[mir]~^ ERROR [E0508]\n+    let _value = array[0];  //~ ERROR [E0508]\n }"}, {"sha": "28ce0d971c69d36440e6a8a4e35d1661674e8555", "filename": "src/test/ui/E0508.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2cb0a0631a640318ae288ead20758db8508f6835/src%2Ftest%2Fui%2FE0508.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2cb0a0631a640318ae288ead20758db8508f6835/src%2Ftest%2Fui%2FE0508.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0508.stderr?ref=2cb0a0631a640318ae288ead20758db8508f6835", "patch": "@@ -1,7 +1,7 @@\n error[E0508]: cannot move out of type `[NonCopy; 1]`, a non-copy array\n-  --> $DIR/E0508.rs:18:18\n+  --> $DIR/E0508.rs:15:18\n    |\n-LL |     let _value = array[0];  //[ast]~ ERROR [E0508]\n+LL |     let _value = array[0];  //~ ERROR [E0508]\n    |                  ^^^^^^^^\n    |                  |\n    |                  cannot move out of here", "previous_filename": "src/test/ui/E0508.ast.stderr"}, {"sha": "a34c97974da110360c9a96b768bb5258e36b46d6", "filename": "src/test/ui/borrowck/borrowck-move-error-with-note.nll.stderr", "status": "modified", "additions": 29, "deletions": 23, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/2cb0a0631a640318ae288ead20758db8508f6835/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2cb0a0631a640318ae288ead20758db8508f6835/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.nll.stderr?ref=2cb0a0631a640318ae288ead20758db8508f6835", "patch": "@@ -1,40 +1,46 @@\n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/borrowck-move-error-with-note.rs:23:19\n+  --> $DIR/borrowck-move-error-with-note.rs:21:11\n    |\n+LL |     match *f {             //~ ERROR cannot move out of\n+   |           ^^\n+   |           |\n+   |           cannot move out of borrowed content\n+   |           help: consider removing this dereference operator: `f`\n+LL |                            //~| cannot move out\n LL |         Foo::Foo1(num1,\n-   |                   ^^^^ cannot move out of borrowed content\n-\n-error[E0507]: cannot move out of borrowed content\n-  --> $DIR/borrowck-move-error-with-note.rs:24:19\n-   |\n+   |                   ---- move occurs because num1 has type `std::boxed::Box<u32>`, which does not implement the `Copy` trait\n LL |                   num2) => (),\n-   |                   ^^^^ cannot move out of borrowed content\n-\n-error[E0507]: cannot move out of borrowed content\n-  --> $DIR/borrowck-move-error-with-note.rs:25:19\n-   |\n+   |                   ---- move occurs because num2 has type `std::boxed::Box<u32>`, which does not implement the `Copy` trait\n LL |         Foo::Foo2(num) => (),\n-   |                   ^^^ cannot move out of borrowed content\n+   |                   --- move occurs because num has type `std::boxed::Box<u32>`, which does not implement the `Copy` trait\n \n error[E0509]: cannot move out of type `S`, which implements the `Drop` trait\n-  --> $DIR/borrowck-move-error-with-note.rs:42:16\n+  --> $DIR/borrowck-move-error-with-note.rs:39:11\n    |\n-LL |             f: _s,\n-   |                ^^ cannot move out of here\n-\n-error[E0509]: cannot move out of type `S`, which implements the `Drop` trait\n-  --> $DIR/borrowck-move-error-with-note.rs:43:16\n+LL |     match (S {f: \"foo\".to_string(), g: \"bar\".to_string()}) {\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of here\n+help: to prevent move, use ref or ref mut\n+   |\n+LL |             f: ref _s,\n+   |                ^^^^^^\n+help: to prevent move, use ref or ref mut\n    |\n-LL |             g: _t\n-   |                ^^ cannot move out of here\n+LL |             g: ref _t\n+   |                ^^^^^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/borrowck-move-error-with-note.rs:59:9\n+  --> $DIR/borrowck-move-error-with-note.rs:57:11\n    |\n+LL |     match a.a {           //~ ERROR cannot move out of\n+   |           ^^^\n+   |           |\n+   |           cannot move out of borrowed content\n+   |           help: consider using a reference instead: `&a.a`\n+LL |                           //~| cannot move out\n LL |         n => {\n-   |         ^ cannot move out of borrowed content\n+   |         - move occurs because n has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 3 previous errors\n \n Some errors occurred: E0507, E0509.\n For more information about an error, try `rustc --explain E0507`."}, {"sha": "d01b24507d9fe390ba6d72d208d07ef4144da6a6", "filename": "src/test/ui/borrowck/borrowck-move-out-of-vec-tail.nll.stderr", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2cb0a0631a640318ae288ead20758db8508f6835/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2cb0a0631a640318ae288ead20758db8508f6835/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.nll.stderr?ref=2cb0a0631a640318ae288ead20758db8508f6835", "patch": "@@ -1,15 +1,17 @@\n error[E0508]: cannot move out of type `[Foo]`, a non-copy slice\n-  --> $DIR/borrowck-move-out-of-vec-tail.rs:30:33\n+  --> $DIR/borrowck-move-out-of-vec-tail.rs:29:19\n    |\n-LL |                 &[Foo { string: a },\n-   |                                 ^ cannot move out of here\n-\n-error[E0508]: cannot move out of type `[Foo]`, a non-copy slice\n-  --> $DIR/borrowck-move-out-of-vec-tail.rs:34:33\n+LL |             match tail {\n+   |                   ^^^^ cannot move out of here\n+help: to prevent move, use ref or ref mut\n+   |\n+LL |                 &[Foo { string: ref a },\n+   |                                 ^^^^^\n+help: to prevent move, use ref or ref mut\n    |\n-LL |                   Foo { string: b }] => {\n-   |                                 ^ cannot move out of here\n+LL |                   Foo { string: ref b }] => {\n+   |                                 ^^^^^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0508`."}, {"sha": "50ef3ba40e7b23afc6a5ad665c1f3f6d91d4000d", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-nesting.nll.stderr", "status": "modified", "additions": 35, "deletions": 21, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/2cb0a0631a640318ae288ead20758db8508f6835/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2cb0a0631a640318ae288ead20758db8508f6835/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.nll.stderr?ref=2cb0a0631a640318ae288ead20758db8508f6835", "patch": "@@ -23,54 +23,68 @@ LL |             _b.use_ref();\n    |             -- borrow later used here\n \n error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n-  --> $DIR/borrowck-vec-pattern-nesting.rs:44:15\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:43:11\n    |\n+LL |     match vec {\n+   |           ^^^ cannot move out of here\n LL |         &mut [_a, //~ ERROR cannot move out\n-   |               ^^ cannot move out of here\n+   |               -- help: to prevent move, use ref or ref mut: `ref _a`\n \n error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n   --> $DIR/borrowck-vec-pattern-nesting.rs:57:13\n    |\n LL |     let a = vec[0]; //~ ERROR cannot move out\n-   |             ^^^^^^ cannot move out of here\n+   |             ^^^^^^\n+   |             |\n+   |             cannot move out of here\n+   |             help: consider using a reference instead: `&vec[0]`\n \n error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n-  --> $DIR/borrowck-vec-pattern-nesting.rs:67:10\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:64:11\n    |\n+LL |     match vec {\n+   |           ^^^ cannot move out of here\n+...\n LL |          _b] => {}\n-   |          ^^ cannot move out of here\n+   |          -- help: to prevent move, use ref or ref mut: `ref _b`\n \n error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n   --> $DIR/borrowck-vec-pattern-nesting.rs:70:13\n    |\n LL |     let a = vec[0]; //~ ERROR cannot move out\n-   |             ^^^^^^ cannot move out of here\n+   |             ^^^^^^\n+   |             |\n+   |             cannot move out of here\n+   |             help: consider using a reference instead: `&vec[0]`\n \n error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n-  --> $DIR/borrowck-vec-pattern-nesting.rs:78:15\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:77:11\n    |\n-LL |         &mut [_a, _b, _c] => {}  //~ ERROR cannot move out\n-   |               ^^ cannot move out of here\n-\n-error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n-  --> $DIR/borrowck-vec-pattern-nesting.rs:78:19\n+LL |     match vec {\n+   |           ^^^ cannot move out of here\n+help: to prevent move, use ref or ref mut\n    |\n-LL |         &mut [_a, _b, _c] => {}  //~ ERROR cannot move out\n-   |                   ^^ cannot move out of here\n-\n-error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n-  --> $DIR/borrowck-vec-pattern-nesting.rs:78:23\n+LL |         &mut [ref _a, _b, _c] => {}  //~ ERROR cannot move out\n+   |               ^^^^^^\n+help: to prevent move, use ref or ref mut\n+   |\n+LL |         &mut [_a, ref _b, _c] => {}  //~ ERROR cannot move out\n+   |                   ^^^^^^\n+help: to prevent move, use ref or ref mut\n    |\n-LL |         &mut [_a, _b, _c] => {}  //~ ERROR cannot move out\n-   |                       ^^ cannot move out of here\n+LL |         &mut [_a, _b, ref _c] => {}  //~ ERROR cannot move out\n+   |                       ^^^^^^\n \n error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n   --> $DIR/borrowck-vec-pattern-nesting.rs:82:13\n    |\n LL |     let a = vec[0]; //~ ERROR cannot move out\n-   |             ^^^^^^ cannot move out of here\n+   |             ^^^^^^\n+   |             |\n+   |             cannot move out of here\n+   |             help: consider using a reference instead: `&vec[0]`\n \n-error: aborting due to 10 previous errors\n+error: aborting due to 8 previous errors\n \n Some errors occurred: E0506, E0508.\n For more information about an error, try `rustc --explain E0506`."}, {"sha": "d872c7efe2bc116dca0abdd552dcf4aec7b3888c", "filename": "src/test/ui/borrowck/issue-51415.nll.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2cb0a0631a640318ae288ead20758db8508f6835/src%2Ftest%2Fui%2Fborrowck%2Fissue-51415.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2cb0a0631a640318ae288ead20758db8508f6835/src%2Ftest%2Fui%2Fborrowck%2Fissue-51415.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-51415.nll.stderr?ref=2cb0a0631a640318ae288ead20758db8508f6835", "patch": "@@ -1,8 +1,11 @@\n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/issue-51415.rs:16:47\n+  --> $DIR/issue-51415.rs:16:42\n    |\n LL |     let opt = a.iter().enumerate().find(|(_, &s)| {\n-   |                                               ^ cannot move out of borrowed content\n+   |                                          ^^^^^-^\n+   |                                          |    |\n+   |                                          |    help: to prevent move, use ref or ref mut: `ref s`\n+   |                                          cannot move out of borrowed content\n \n error: aborting due to previous error\n "}, {"sha": "34616a8de45ed9882743c67058448700e39b5133", "filename": "src/test/ui/codemap_tests/overlapping_spans.nll.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2cb0a0631a640318ae288ead20758db8508f6835/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_spans.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2cb0a0631a640318ae288ead20758db8508f6835/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_spans.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_spans.nll.stderr?ref=2cb0a0631a640318ae288ead20758db8508f6835", "patch": "@@ -1,8 +1,10 @@\n error[E0509]: cannot move out of type `S`, which implements the `Drop` trait\n-  --> $DIR/overlapping_spans.rs:21:14\n+  --> $DIR/overlapping_spans.rs:20:11\n    |\n+LL |     match (S {f:\"foo\".to_string()}) {\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of here\n LL |         S {f:_s} => {} //~ ERROR cannot move out\n-   |              ^^ cannot move out of here\n+   |              -- help: to prevent move, use ref or ref mut: `ref _s`\n \n error: aborting due to previous error\n "}, {"sha": "56d970494a0e07efe8687505c9ada8b9355cac21", "filename": "src/test/ui/error-codes/E0509.nll.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0193d1f736b755004e15b7c1bc41467b177845cf/src%2Ftest%2Fui%2Ferror-codes%2FE0509.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0193d1f736b755004e15b7c1bc41467b177845cf/src%2Ftest%2Fui%2Ferror-codes%2FE0509.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0509.nll.stderr?ref=0193d1f736b755004e15b7c1bc41467b177845cf", "patch": "@@ -1,9 +0,0 @@\n-error[E0509]: cannot move out of type `DropStruct`, which implements the `Drop` trait\n-  --> $DIR/E0509.rs:26:23\n-   |\n-LL |     let fancy_field = drop_struct.fancy; //~ ERROR E0509\n-   |                       ^^^^^^^^^^^^^^^^^ cannot move out of here\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0509`."}, {"sha": "162e43abc0ac47a0e915200ff2df12e647227194", "filename": "src/test/ui/issue-40402-ref-hints/issue-40402-1.nll.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2cb0a0631a640318ae288ead20758db8508f6835/src%2Ftest%2Fui%2Fissue-40402-ref-hints%2Fissue-40402-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2cb0a0631a640318ae288ead20758db8508f6835/src%2Ftest%2Fui%2Fissue-40402-ref-hints%2Fissue-40402-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-40402-ref-hints%2Fissue-40402-1.nll.stderr?ref=2cb0a0631a640318ae288ead20758db8508f6835", "patch": "@@ -2,7 +2,10 @@ error[E0507]: cannot move out of borrowed content\n   --> $DIR/issue-40402-1.rs:19:13\n    |\n LL |     let e = f.v[0]; //~ ERROR cannot move out of indexed content\n-   |             ^^^^^^ cannot move out of borrowed content\n+   |             ^^^^^^\n+   |             |\n+   |             cannot move out of borrowed content\n+   |             help: consider using a reference instead: `&f.v[0]`\n \n error: aborting due to previous error\n "}, {"sha": "cd75be24589dfbf443bd00671ba8dc3e43056891", "filename": "src/test/ui/issue-40402-ref-hints/issue-40402-2.nll.stderr", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2cb0a0631a640318ae288ead20758db8508f6835/src%2Ftest%2Fui%2Fissue-40402-ref-hints%2Fissue-40402-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2cb0a0631a640318ae288ead20758db8508f6835/src%2Ftest%2Fui%2Fissue-40402-ref-hints%2Fissue-40402-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-40402-ref-hints%2Fissue-40402-2.nll.stderr?ref=2cb0a0631a640318ae288ead20758db8508f6835", "patch": "@@ -1,15 +1,14 @@\n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/issue-40402-2.rs:15:10\n+  --> $DIR/issue-40402-2.rs:15:18\n    |\n LL |     let (a, b) = x[0]; //~ ERROR cannot move out of indexed content\n-   |          ^ cannot move out of borrowed content\n+   |          -  -    ^^^^\n+   |          |  |    |\n+   |          |  |    cannot move out of borrowed content\n+   |          |  |    help: consider using a reference instead: `&x[0]`\n+   |          |  move occurs because b has type `std::string::String`, which does not implement the `Copy` trait\n+   |          move occurs because a has type `std::string::String`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of borrowed content\n-  --> $DIR/issue-40402-2.rs:15:13\n-   |\n-LL |     let (a, b) = x[0]; //~ ERROR cannot move out of indexed content\n-   |             ^ cannot move out of borrowed content\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0507`."}, {"sha": "94f2074b45d4c0a444f38b6606876e5eefdb3097", "filename": "src/test/ui/moves-based-on-type-block-bad.nll.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2cb0a0631a640318ae288ead20758db8508f6835/src%2Ftest%2Fui%2Fmoves-based-on-type-block-bad.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2cb0a0631a640318ae288ead20758db8508f6835/src%2Ftest%2Fui%2Fmoves-based-on-type-block-bad.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves-based-on-type-block-bad.nll.stderr?ref=2cb0a0631a640318ae288ead20758db8508f6835", "patch": "@@ -1,8 +1,14 @@\n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/moves-based-on-type-block-bad.rs:37:28\n+  --> $DIR/moves-based-on-type-block-bad.rs:34:19\n    |\n+LL |             match hellothere.x { //~ ERROR cannot move out\n+   |                   ^^^^^^^^^^^^\n+   |                   |\n+   |                   cannot move out of borrowed content\n+   |                   help: consider using a reference instead: `&hellothere.x`\n+...\n LL |                 box E::Bar(x) => println!(\"{}\", x.to_string()),\n-   |                            ^ cannot move out of borrowed content\n+   |                            - move occurs because x has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "6445f166b57197a493f642a4597f83444229c96c", "filename": "src/test/ui/nll/move-errors.rs", "status": "added", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/2cb0a0631a640318ae288ead20758db8508f6835/src%2Ftest%2Fui%2Fnll%2Fmove-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cb0a0631a640318ae288ead20758db8508f6835/src%2Ftest%2Fui%2Fnll%2Fmove-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmove-errors.rs?ref=2cb0a0631a640318ae288ead20758db8508f6835", "patch": "@@ -0,0 +1,130 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(unused)]\n+#![feature(nll)]\n+\n+struct A(String);\n+struct C(D);\n+\n+fn suggest_remove_deref() {\n+    let a = &A(\"\".to_string());\n+    let b = *a;\n+    //~^ ERROR\n+}\n+\n+fn suggest_borrow() {\n+    let a = [A(\"\".to_string())];\n+    let b = a[0];\n+    //~^ ERROR\n+}\n+\n+fn suggest_borrow2() {\n+    let mut a = A(\"\".to_string());\n+    let r = &&mut a;\n+    let s = **r;\n+    //~^ ERROR\n+}\n+\n+fn suggest_borrow3() {\n+    use std::rc::Rc;\n+    let mut a = A(\"\".to_string());\n+    let r = Rc::new(a);\n+    let s = *r;\n+    //~^ ERROR\n+}\n+\n+fn suggest_borrow4() {\n+    let a = [A(\"\".to_string())][0];\n+    //~^ ERROR\n+}\n+\n+fn suggest_borrow5() {\n+    let a = &A(\"\".to_string());\n+    let A(s) = *a;\n+    //~^ ERROR\n+}\n+\n+fn suggest_ref() {\n+    let c = C(D(String::new()));\n+    let C(D(s)) = c;\n+    //~^ ERROR\n+}\n+\n+fn suggest_nothing() {\n+    let a = &A(\"\".to_string());\n+    let b;\n+    b = *a;\n+    //~^ ERROR\n+}\n+\n+enum B {\n+    V(String),\n+    U(D),\n+}\n+\n+struct D(String);\n+\n+impl Drop for D {\n+    fn drop(&mut self) {}\n+}\n+\n+struct F(String, String);\n+\n+impl Drop for F {\n+    fn drop(&mut self) {}\n+}\n+\n+fn probably_suggest_borrow() {\n+    let x = [B::V(String::new())];\n+    match x[0] {\n+    //~^ ERROR\n+        B::U(d) => (),\n+        B::V(s) => (),\n+    }\n+}\n+\n+fn have_to_suggest_ref() {\n+    let x = B::V(String::new());\n+    match x {\n+    //~^ ERROR\n+        B::V(s) => drop(s),\n+        B::U(D(s)) => (),\n+    };\n+}\n+\n+fn two_separate_errors() {\n+    let x = (D(String::new()), &String::new());\n+    match x {\n+    //~^ ERROR\n+    //~^^ ERROR\n+        (D(s), &t) => (),\n+        _ => (),\n+    }\n+}\n+\n+fn have_to_suggest_double_ref() {\n+    let x = F(String::new(), String::new());\n+    match x {\n+    //~^ ERROR\n+        F(s, mut t) => (),\n+        _ => (),\n+    }\n+}\n+\n+fn double_binding(x: &Result<String, String>) {\n+    match *x {\n+    //~^ ERROR\n+        Ok(s) | Err(s) => (),\n+    }\n+}\n+\n+fn main() {\n+}"}, {"sha": "3f2c651ae3a6af343245fc10d536e088545fcd6a", "filename": "src/test/ui/nll/move-errors.stderr", "status": "added", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/2cb0a0631a640318ae288ead20758db8508f6835/src%2Ftest%2Fui%2Fnll%2Fmove-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2cb0a0631a640318ae288ead20758db8508f6835/src%2Ftest%2Fui%2Fnll%2Fmove-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmove-errors.stderr?ref=2cb0a0631a640318ae288ead20758db8508f6835", "patch": "@@ -0,0 +1,140 @@\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/move-errors.rs:19:13\n+   |\n+LL |     let b = *a;\n+   |             ^^\n+   |             |\n+   |             cannot move out of borrowed content\n+   |             help: consider removing this dereference operator: `a`\n+\n+error[E0508]: cannot move out of type `[A; 1]`, a non-copy array\n+  --> $DIR/move-errors.rs:25:13\n+   |\n+LL |     let b = a[0];\n+   |             ^^^^\n+   |             |\n+   |             cannot move out of here\n+   |             help: consider using a reference instead: `&a[0]`\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/move-errors.rs:32:13\n+   |\n+LL |     let s = **r;\n+   |             ^^^\n+   |             |\n+   |             cannot move out of borrowed content\n+   |             help: consider using a reference instead: `&**r`\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/move-errors.rs:40:13\n+   |\n+LL |     let s = *r;\n+   |             ^^\n+   |             |\n+   |             cannot move out of borrowed content\n+   |             help: consider using a reference instead: `&*r`\n+\n+error[E0508]: cannot move out of type `[A; 1]`, a non-copy array\n+  --> $DIR/move-errors.rs:45:13\n+   |\n+LL |     let a = [A(\"\".to_string())][0];\n+   |             ^^^^^^^^^^^^^^^^^^^^^^\n+   |             |\n+   |             cannot move out of here\n+   |             help: consider using a reference instead: `&[A(\"\".to_string())][0]`\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/move-errors.rs:51:16\n+   |\n+LL |     let A(s) = *a;\n+   |           -    ^^\n+   |           |    |\n+   |           |    cannot move out of borrowed content\n+   |           |    help: consider removing this dereference operator: `a`\n+   |           move occurs because s has type `std::string::String`, which does not implement the `Copy` trait\n+\n+error[E0509]: cannot move out of type `D`, which implements the `Drop` trait\n+  --> $DIR/move-errors.rs:57:19\n+   |\n+LL |     let C(D(s)) = c;\n+   |             -     ^ cannot move out of here\n+   |             |\n+   |             help: to prevent move, use ref or ref mut: `ref s`\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/move-errors.rs:64:9\n+   |\n+LL |     b = *a;\n+   |         ^^ cannot move out of borrowed content\n+\n+error[E0508]: cannot move out of type `[B; 1]`, a non-copy array\n+  --> $DIR/move-errors.rs:87:11\n+   |\n+LL |     match x[0] {\n+   |           ^^^^\n+   |           |\n+   |           cannot move out of here\n+   |           help: consider using a reference instead: `&x[0]`\n+LL |     //~^ ERROR\n+LL |         B::U(d) => (),\n+   |              - move occurs because d has type `D`, which does not implement the `Copy` trait\n+LL |         B::V(s) => (),\n+   |              - move occurs because s has type `std::string::String`, which does not implement the `Copy` trait\n+\n+error[E0509]: cannot move out of type `D`, which implements the `Drop` trait\n+  --> $DIR/move-errors.rs:96:11\n+   |\n+LL |     match x {\n+   |           ^ cannot move out of here\n+...\n+LL |         B::U(D(s)) => (),\n+   |                - help: to prevent move, use ref or ref mut: `ref s`\n+\n+error[E0509]: cannot move out of type `D`, which implements the `Drop` trait\n+  --> $DIR/move-errors.rs:105:11\n+   |\n+LL |     match x {\n+   |           ^ cannot move out of here\n+...\n+LL |         (D(s), &t) => (),\n+   |            - help: to prevent move, use ref or ref mut: `ref s`\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/move-errors.rs:105:11\n+   |\n+LL |     match x {\n+   |           ^ cannot move out of borrowed content\n+...\n+LL |         (D(s), &t) => (),\n+   |                 - help: to prevent move, use ref or ref mut: `ref t`\n+\n+error[E0509]: cannot move out of type `F`, which implements the `Drop` trait\n+  --> $DIR/move-errors.rs:115:11\n+   |\n+LL |     match x {\n+   |           ^ cannot move out of here\n+help: to prevent move, use ref or ref mut\n+   |\n+LL |         F(ref s, mut t) => (),\n+   |           ^^^^^\n+help: to prevent move, use ref or ref mut\n+   |\n+LL |         F(s, ref mut t) => (),\n+   |              ^^^^^^^^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/move-errors.rs:123:11\n+   |\n+LL |     match *x {\n+   |           ^^\n+   |           |\n+   |           cannot move out of borrowed content\n+   |           help: consider removing this dereference operator: `x`\n+LL |     //~^ ERROR\n+LL |         Ok(s) | Err(s) => (),\n+   |            - move occurs because s has type `std::string::String`, which does not implement the `Copy` trait\n+\n+error: aborting due to 14 previous errors\n+\n+Some errors occurred: E0507, E0508, E0509.\n+For more information about an error, try `rustc --explain E0507`."}]}