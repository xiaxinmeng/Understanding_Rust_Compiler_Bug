{"sha": "1a2aaf68de4989eaacf5b669da00b50dca8b41e0", "node_id": "C_kwDOAAsO6NoAKDFhMmFhZjY4ZGU0OTg5ZWFhY2Y1YjY2OWRhMDBiNTBkY2E4YjQxZTA", "commit": {"author": {"name": "xphoniex", "email": "dj.2dixx@gmail.com", "date": "2022-08-14T16:29:26Z"}, "committer": {"name": "xphoniex", "email": "dj.2dixx@gmail.com", "date": "2022-08-14T16:29:26Z"}, "message": "Skip `unnecessary_to_owned` when `t != t.to_string()`\n\nSigned-off-by: xphoniex <dj.2dixx@gmail.com>", "tree": {"sha": "7118074f6458d80682d6e5c4a64f41ef6fc46fec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7118074f6458d80682d6e5c4a64f41ef6fc46fec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a2aaf68de4989eaacf5b669da00b50dca8b41e0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQHHBAABCgAxFiEEZVdHorrKL5SwslvIn6z+zh47OZQFAmL5Iu0THGRqLjJkaXh4\nQGdtYWlsLmNvbQAKCRCfrP7OHjs5lFZNC/9T3HVeZGMF98+kZw0ZmC8pbnivAvfW\nqmWVccN4iVCK96ar2+JEJJl2PVWBY4I3fbNvmh1GQUZJN1Z2em8z/wj3B6WA3k0y\nc5DIMqaM7zkm84jgXmlfL+n41SeXMosbaLV5iE/MWY6Bedl9Ro0kBwiCBM48h2Vl\nKaiV1n8U4Zv7qRC9b0Dz5JHQN8vmdYCbAIb5qV43niRy1UHx2vli5G0iTYCxaSsu\ntVLT9U/XAFVr3ELytL8v/hnX75pnLU2jMW/MVctycOoCXo8s7tBQrHGnK7hSSXmy\nYLsQHF+lqRC4oH06JGqWMZC0C4DYTLhC5k7FYHDxP+2vmz8Z1EhBOOCYFeaEADWz\ncQ0sMNFs7DtIziZzh1rf/ZvDkB7IWWT/vzcF1MzHVH5cgZ6+/ZdKHMN+vCLESfDW\ncUvH4Oq34luhft+FiEeBl5KLns8GOrDkBkDApU6pXUGpNZsXxH7O/r0g9Df6nPZw\n9ZTcUhWWCwJ3p9jvzPEb99tSCwWUU/826Zc=\n=suI0\n-----END PGP SIGNATURE-----", "payload": "tree 7118074f6458d80682d6e5c4a64f41ef6fc46fec\nparent dfa780e0ef24984f7be1c00828ddde4e6ac1eb92\nauthor xphoniex <dj.2dixx@gmail.com> 1660494566 +0000\ncommitter xphoniex <dj.2dixx@gmail.com> 1660494566 +0000\n\nSkip `unnecessary_to_owned` when `t != t.to_string()`\n\nSigned-off-by: xphoniex <dj.2dixx@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a2aaf68de4989eaacf5b669da00b50dca8b41e0", "html_url": "https://github.com/rust-lang/rust/commit/1a2aaf68de4989eaacf5b669da00b50dca8b41e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a2aaf68de4989eaacf5b669da00b50dca8b41e0/comments", "author": {"login": "xphoniex", "id": 14107758, "node_id": "MDQ6VXNlcjE0MTA3NzU4", "avatar_url": "https://avatars.githubusercontent.com/u/14107758?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xphoniex", "html_url": "https://github.com/xphoniex", "followers_url": "https://api.github.com/users/xphoniex/followers", "following_url": "https://api.github.com/users/xphoniex/following{/other_user}", "gists_url": "https://api.github.com/users/xphoniex/gists{/gist_id}", "starred_url": "https://api.github.com/users/xphoniex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xphoniex/subscriptions", "organizations_url": "https://api.github.com/users/xphoniex/orgs", "repos_url": "https://api.github.com/users/xphoniex/repos", "events_url": "https://api.github.com/users/xphoniex/events{/privacy}", "received_events_url": "https://api.github.com/users/xphoniex/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xphoniex", "id": 14107758, "node_id": "MDQ6VXNlcjE0MTA3NzU4", "avatar_url": "https://avatars.githubusercontent.com/u/14107758?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xphoniex", "html_url": "https://github.com/xphoniex", "followers_url": "https://api.github.com/users/xphoniex/followers", "following_url": "https://api.github.com/users/xphoniex/following{/other_user}", "gists_url": "https://api.github.com/users/xphoniex/gists{/gist_id}", "starred_url": "https://api.github.com/users/xphoniex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xphoniex/subscriptions", "organizations_url": "https://api.github.com/users/xphoniex/orgs", "repos_url": "https://api.github.com/users/xphoniex/repos", "events_url": "https://api.github.com/users/xphoniex/events{/privacy}", "received_events_url": "https://api.github.com/users/xphoniex/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfa780e0ef24984f7be1c00828ddde4e6ac1eb92", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfa780e0ef24984f7be1c00828ddde4e6ac1eb92", "html_url": "https://github.com/rust-lang/rust/commit/dfa780e0ef24984f7be1c00828ddde4e6ac1eb92"}], "stats": {"total": 73, "additions": 71, "deletions": 2}, "files": [{"sha": "99b56da7a50c9786d0cfcde6729d3cb5e5040d39", "filename": "clippy_lints/src/methods/unnecessary_to_owned.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1a2aaf68de4989eaacf5b669da00b50dca8b41e0/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2aaf68de4989eaacf5b669da00b50dca8b41e0/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs?ref=1a2aaf68de4989eaacf5b669da00b50dca8b41e0", "patch": "@@ -3,7 +3,8 @@ use super::unnecessary_iter_cloned::{self, is_into_iter};\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::snippet_opt;\n use clippy_utils::ty::{\n-    contains_ty, get_associated_type, get_iterator_item_ty, implements_trait, is_copy, peel_mid_ty_refs,\n+    contains_ty, get_associated_type, get_iterator_item_ty, implements_trait, is_copy, is_type_diagnostic_item,\n+    peel_mid_ty_refs,\n };\n use clippy_utils::{meets_msrv, msrvs};\n \n@@ -279,7 +280,19 @@ fn check_other_call_arg<'tcx>(\n                 &trait_predicate.trait_ref.substs.iter().skip(1).collect::<Vec<_>>()[..],\n                 call_substs,\n             );\n-            implements_trait(cx, receiver_ty, as_ref_trait_id, &composed_substs)\n+            // if `expr` is a `String` and generic target is [u8], skip\n+            // (https://github.com/rust-lang/rust-clippy/issues/9317).\n+            if let [subst] = composed_substs[..]\n+                && let GenericArgKind::Type(arg_ty) = subst.unpack()\n+                && arg_ty.is_slice()\n+                && let inner_ty = arg_ty.builtin_index().unwrap()\n+                && let ty::Uint(ty::UintTy::U8) = inner_ty.kind()\n+                && let self_ty = cx.typeck_results().expr_ty(expr).peel_refs()\n+                && is_type_diagnostic_item(cx, self_ty, sym::String) {\n+                false\n+            } else {\n+                implements_trait(cx, receiver_ty, as_ref_trait_id, &composed_substs)\n+            }\n         } else {\n             false\n         };"}, {"sha": "9cd5bc73b1ec51852af3c2bbeae84cb5ddf05594", "filename": "tests/ui/unnecessary_to_owned.fixed", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1a2aaf68de4989eaacf5b669da00b50dca8b41e0/tests%2Fui%2Funnecessary_to_owned.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1a2aaf68de4989eaacf5b669da00b50dca8b41e0/tests%2Fui%2Funnecessary_to_owned.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_to_owned.fixed?ref=1a2aaf68de4989eaacf5b669da00b50dca8b41e0", "patch": "@@ -329,3 +329,31 @@ mod issue_8759_variant {\n         rw.set_view(&rw.default_view().to_owned());\n     }\n }\n+\n+mod issue_9317 {\n+    #![allow(dead_code)]\n+\n+    struct Bytes {}\n+\n+    impl ToString for Bytes {\n+        fn to_string(&self) -> String {\n+            \"123\".to_string()\n+        }\n+    }\n+\n+    impl AsRef<[u8]> for Bytes {\n+        fn as_ref(&self) -> &[u8] {\n+            &[1, 2, 3]\n+        }\n+    }\n+\n+    fn consume<C: AsRef<[u8]>>(c: C) {\n+        let _ = c;\n+    }\n+\n+    pub fn main() {\n+        let b = Bytes {};\n+        // Should not lint.\n+        consume(b.to_string());\n+    }\n+}"}, {"sha": "7f62ba3ab5d559ea0d8a60da23f977389044f054", "filename": "tests/ui/unnecessary_to_owned.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1a2aaf68de4989eaacf5b669da00b50dca8b41e0/tests%2Fui%2Funnecessary_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2aaf68de4989eaacf5b669da00b50dca8b41e0/tests%2Fui%2Funnecessary_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_to_owned.rs?ref=1a2aaf68de4989eaacf5b669da00b50dca8b41e0", "patch": "@@ -329,3 +329,31 @@ mod issue_8759_variant {\n         rw.set_view(&rw.default_view().to_owned());\n     }\n }\n+\n+mod issue_9317 {\n+    #![allow(dead_code)]\n+\n+    struct Bytes {}\n+\n+    impl ToString for Bytes {\n+        fn to_string(&self) -> String {\n+            \"123\".to_string()\n+        }\n+    }\n+\n+    impl AsRef<[u8]> for Bytes {\n+        fn as_ref(&self) -> &[u8] {\n+            &[1, 2, 3]\n+        }\n+    }\n+\n+    fn consume<C: AsRef<[u8]>>(c: C) {\n+        let _ = c;\n+    }\n+\n+    pub fn main() {\n+        let b = Bytes {};\n+        // Should not lint.\n+        consume(b.to_string());\n+    }\n+}"}]}