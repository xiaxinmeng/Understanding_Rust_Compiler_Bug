{"sha": "1f4c5a624fd7db58b32d6d9cfa063fbfe0a340a7", "node_id": "C_kwDOAAsO6NoAKDFmNGM1YTYyNGZkN2RiNThiMzJkNmQ5Y2ZhMDYzZmJmZTBhMzQwYTc", "commit": {"author": {"name": "Jhonny Bill Mena", "email": "jhonnybillm@gmail.com", "date": "2022-10-31T05:36:32Z"}, "committer": {"name": "Jhonny Bill Mena", "email": "jhonnybillm@gmail.com", "date": "2022-11-04T05:17:02Z"}, "message": "ADD - ExtractBundledLibsError. Migrated extract_bundled_libs to translatable diagnostics", "tree": {"sha": "11b27532061a5df556f75ee23ac01c529ada6db2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11b27532061a5df556f75ee23ac01c529ada6db2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f4c5a624fd7db58b32d6d9cfa063fbfe0a340a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f4c5a624fd7db58b32d6d9cfa063fbfe0a340a7", "html_url": "https://github.com/rust-lang/rust/commit/1f4c5a624fd7db58b32d6d9cfa063fbfe0a340a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f4c5a624fd7db58b32d6d9cfa063fbfe0a340a7/comments", "author": {"login": "JhonnyBillM", "id": 18747072, "node_id": "MDQ6VXNlcjE4NzQ3MDcy", "avatar_url": "https://avatars.githubusercontent.com/u/18747072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JhonnyBillM", "html_url": "https://github.com/JhonnyBillM", "followers_url": "https://api.github.com/users/JhonnyBillM/followers", "following_url": "https://api.github.com/users/JhonnyBillM/following{/other_user}", "gists_url": "https://api.github.com/users/JhonnyBillM/gists{/gist_id}", "starred_url": "https://api.github.com/users/JhonnyBillM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JhonnyBillM/subscriptions", "organizations_url": "https://api.github.com/users/JhonnyBillM/orgs", "repos_url": "https://api.github.com/users/JhonnyBillM/repos", "events_url": "https://api.github.com/users/JhonnyBillM/events{/privacy}", "received_events_url": "https://api.github.com/users/JhonnyBillM/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JhonnyBillM", "id": 18747072, "node_id": "MDQ6VXNlcjE4NzQ3MDcy", "avatar_url": "https://avatars.githubusercontent.com/u/18747072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JhonnyBillM", "html_url": "https://github.com/JhonnyBillM", "followers_url": "https://api.github.com/users/JhonnyBillM/followers", "following_url": "https://api.github.com/users/JhonnyBillM/following{/other_user}", "gists_url": "https://api.github.com/users/JhonnyBillM/gists{/gist_id}", "starred_url": "https://api.github.com/users/JhonnyBillM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JhonnyBillM/subscriptions", "organizations_url": "https://api.github.com/users/JhonnyBillM/orgs", "repos_url": "https://api.github.com/users/JhonnyBillM/repos", "events_url": "https://api.github.com/users/JhonnyBillM/events{/privacy}", "received_events_url": "https://api.github.com/users/JhonnyBillM/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c80f50fc6dce4e35eebe1beaadd5fc3ecfe6f52", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c80f50fc6dce4e35eebe1beaadd5fc3ecfe6f52", "html_url": "https://github.com/rust-lang/rust/commit/4c80f50fc6dce4e35eebe1beaadd5fc3ecfe6f52"}], "stats": {"total": 117, "additions": 98, "deletions": 19}, "files": [{"sha": "b45fa2476875b7a8648a7f0277a997e771e62847", "filename": "compiler/rustc_codegen_ssa/src/back/archive.rs", "status": "modified", "additions": 41, "deletions": 18, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/1f4c5a624fd7db58b32d6d9cfa063fbfe0a340a7/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4c5a624fd7db58b32d6d9cfa063fbfe0a340a7/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Farchive.rs?ref=1f4c5a624fd7db58b32d6d9cfa063fbfe0a340a7", "patch": "@@ -6,11 +6,12 @@ use rustc_span::symbol::Symbol;\n \n use object::read::archive::ArchiveFile;\n \n-use std::fmt::Display;\n use std::fs::File;\n use std::io;\n use std::path::{Path, PathBuf};\n \n+use crate::errors::{ExtractBundledLibsError, ExtractBundledLibsErrorKind::*};\n+\n pub trait ArchiveBuilderBuilder {\n     fn new_archive_builder<'a>(&self, sess: &'a Session) -> Box<dyn ArchiveBuilder<'a> + 'a>;\n \n@@ -28,32 +29,54 @@ pub trait ArchiveBuilderBuilder {\n         is_direct_dependency: bool,\n     ) -> PathBuf;\n \n-    fn extract_bundled_libs(\n-        &self,\n-        rlib: &Path,\n+    fn extract_bundled_libs<'a>(\n+        &'a self,\n+        rlib: &'a Path,\n         outdir: &Path,\n         bundled_lib_file_names: &FxHashSet<Symbol>,\n-    ) -> Result<(), String> {\n-        let message = |msg: &str, e: &dyn Display| format!(\"{} '{}': {}\", msg, &rlib.display(), e);\n+    ) -> Result<(), ExtractBundledLibsError<'_>> {\n         let archive_map = unsafe {\n-            Mmap::map(File::open(rlib).map_err(|e| message(\"failed to open file\", &e))?)\n-                .map_err(|e| message(\"failed to mmap file\", &e))?\n+            Mmap::map(File::open(rlib).map_err(|e| ExtractBundledLibsError {\n+                kind: OpenFile,\n+                rlib,\n+                error: e.to_string(),\n+            })?)\n+            .map_err(|e| ExtractBundledLibsError {\n+                kind: MmapFile,\n+                rlib,\n+                error: e.to_string(),\n+            })?\n         };\n-        let archive = ArchiveFile::parse(&*archive_map)\n-            .map_err(|e| message(\"failed to parse archive\", &e))?;\n+        let archive = ArchiveFile::parse(&*archive_map).map_err(|e| ExtractBundledLibsError {\n+            kind: ParseArchive,\n+            rlib,\n+            error: e.to_string(),\n+        })?;\n \n         for entry in archive.members() {\n-            let entry = entry.map_err(|e| message(\"failed to read entry\", &e))?;\n-            let data = entry\n-                .data(&*archive_map)\n-                .map_err(|e| message(\"failed to get data from archive member\", &e))?;\n-            let name = std::str::from_utf8(entry.name())\n-                .map_err(|e| message(\"failed to convert name\", &e))?;\n+            let entry = entry.map_err(|e| ExtractBundledLibsError {\n+                kind: ReadEntry,\n+                rlib,\n+                error: e.to_string(),\n+            })?;\n+            let data = entry.data(&*archive_map).map_err(|e| ExtractBundledLibsError {\n+                kind: ArchiveMember,\n+                rlib,\n+                error: e.to_string(),\n+            })?;\n+            let name = std::str::from_utf8(entry.name()).map_err(|e| ExtractBundledLibsError {\n+                kind: ConvertName,\n+                rlib,\n+                error: e.to_string(),\n+            })?;\n             if !bundled_lib_file_names.contains(&Symbol::intern(name)) {\n                 continue; // We need to extract only native libraries.\n             }\n-            std::fs::write(&outdir.join(&name), data)\n-                .map_err(|e| message(\"failed to write file\", &e))?;\n+            std::fs::write(&outdir.join(&name), data).map_err(|e| ExtractBundledLibsError {\n+                kind: WriteFile,\n+                rlib,\n+                error: e.to_string(),\n+            })?;\n         }\n         Ok(())\n     }"}, {"sha": "1277294b6341969b609cd5f21050e275a64865c0", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f4c5a624fd7db58b32d6d9cfa063fbfe0a340a7/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4c5a624fd7db58b32d6d9cfa063fbfe0a340a7/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=1f4c5a624fd7db58b32d6d9cfa063fbfe0a340a7", "patch": "@@ -2447,7 +2447,7 @@ fn add_upstream_rust_crates<'a>(\n                         let rlib = &src.rlib.as_ref().unwrap().0;\n                         archive_builder_builder\n                             .extract_bundled_libs(rlib, tmpdir, &bundled_libs)\n-                            .unwrap_or_else(|e| sess.fatal(e));\n+                            .unwrap_or_else(|e| sess.emit_fatal(e));\n                     }\n \n                     let mut last = (None, NativeLibKind::Unspecified, None);"}, {"sha": "0a2532ccc470e9d9f0d15bd76cf68a225e213c7f", "filename": "compiler/rustc_codegen_ssa/src/errors.rs", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/1f4c5a624fd7db58b32d6d9cfa063fbfe0a340a7/compiler%2Frustc_codegen_ssa%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4c5a624fd7db58b32d6d9cfa063fbfe0a340a7/compiler%2Frustc_codegen_ssa%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ferrors.rs?ref=1f4c5a624fd7db58b32d6d9cfa063fbfe0a340a7", "patch": "@@ -484,3 +484,51 @@ pub struct RlibArchiveBuildFailure {\n #[derive(Diagnostic)]\n #[diag(codegen_ssa_option_gcc_only)]\n pub struct OptionGccOnly;\n+\n+pub struct ExtractBundledLibsError<'a> {\n+    pub kind: ExtractBundledLibsErrorKind,\n+    pub rlib: &'a Path,\n+    pub error: String,\n+}\n+\n+pub enum ExtractBundledLibsErrorKind {\n+    OpenFile,\n+    MmapFile,\n+    ParseArchive,\n+    ReadEntry,\n+    ArchiveMember,\n+    ConvertName,\n+    WriteFile,\n+}\n+\n+impl IntoDiagnostic<'_, !> for ExtractBundledLibsError<'_> {\n+    fn into_diagnostic(self, handler: &'_ Handler) -> DiagnosticBuilder<'_, !> {\n+        let mut diag = match self.kind {\n+            ExtractBundledLibsErrorKind::OpenFile => {\n+                handler.struct_fatal(fluent::codegen_ssa_extract_bundled_libs_open_file)\n+            }\n+            ExtractBundledLibsErrorKind::MmapFile => {\n+                handler.struct_fatal(fluent::codegen_ssa_extract_bundled_libs_mmap_file)\n+            }\n+            ExtractBundledLibsErrorKind::ParseArchive => {\n+                handler.struct_fatal(fluent::codegen_ssa_extract_bundled_libs_parse_archive)\n+            }\n+            ExtractBundledLibsErrorKind::ReadEntry => {\n+                handler.struct_fatal(fluent::codegen_ssa_extract_bundled_libs_read_entry)\n+            }\n+            ExtractBundledLibsErrorKind::ArchiveMember => {\n+                handler.struct_fatal(fluent::codegen_ssa_extract_bundled_libs_archive_member)\n+            }\n+            ExtractBundledLibsErrorKind::ConvertName => {\n+                handler.struct_fatal(fluent::codegen_ssa_extract_bundled_libs_convert_name)\n+            }\n+            ExtractBundledLibsErrorKind::WriteFile => {\n+                handler.struct_fatal(fluent::codegen_ssa_extract_bundled_libs_write_file)\n+            }\n+        };\n+\n+        diag.set_arg(\"rlib\", self.rlib);\n+        diag.set_arg(\"error\", self.error);\n+        diag\n+    }\n+}"}, {"sha": "a31e1658f5f00c24e246503cb8c829b6c8f0ac0c", "filename": "compiler/rustc_error_messages/locales/en-US/codegen_ssa.ftl", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f4c5a624fd7db58b32d6d9cfa063fbfe0a340a7/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_ssa.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/1f4c5a624fd7db58b32d6d9cfa063fbfe0a340a7/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_ssa.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_ssa.ftl?ref=1f4c5a624fd7db58b32d6d9cfa063fbfe0a340a7", "patch": "@@ -170,3 +170,11 @@ codegen_ssa_unable_to_write_debugger_visualizer = Unable to write debugger visua\n codegen_ssa_rlib_archive_build_failure = failed to build archive from rlib: {$error}\n \n codegen_ssa_option_gcc_only = option `-Z gcc-ld` is used even though linker flavor is not gcc\n+\n+codegen_ssa_extract_bundled_libs_open_file = failed to open file '{$rlib}': {$error}\n+codegen_ssa_extract_bundled_libs_mmap_file = failed to mmap file '{$rlib}': {$error}\n+codegen_ssa_extract_bundled_libs_parse_archive = failed to parse archive '{$rlib}': {$error}\n+codegen_ssa_extract_bundled_libs_read_entry = failed to read entry '{$rlib}': {$error}\n+codegen_ssa_extract_bundled_libs_archive_member = failed to get data from archive member '{$rlib}': {$error}\n+codegen_ssa_extract_bundled_libs_convert_name = failed to convert name '{$rlib}': {$error}\n+codegen_ssa_extract_bundled_libs_write_file = failed to write file '{$rlib}': {$error}"}]}