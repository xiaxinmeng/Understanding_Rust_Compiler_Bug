{"sha": "a8feaee5b6b54c03f49481fe04a9ad9e8f659f7c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4ZmVhZWU1YjZiNTRjMDNmNDk0ODFmZTA0YTlhZDllOGY2NTlmN2M=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-06T12:51:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-06T12:51:11Z"}, "message": "Auto merge of #44734 - mchlrhw:wip/hashmap-entry-and-then, r=BurntSushi\n\nImplement `and_modify` on `Entry`\n\n## Motivation\n\n`Entry`s are useful for allowing access to existing values in a map while also allowing default values to be inserted for absent keys. The existing API is similar to that of `Option`, where `or` and `or_with` can be used if the option variant is `None`.\n\nThe `Entry` API is, however, missing an equivalent of `Option`'s `and_then` method. If it were present it would be possible to modify an existing entry before calling `or_insert` without resorting to matching on the entry variant.\n\nTracking issue: https://github.com/rust-lang/rust/issues/44733.", "tree": {"sha": "4918f2dbd5a71e6157e0e50c1fd71278e5161225", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4918f2dbd5a71e6157e0e50c1fd71278e5161225"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8feaee5b6b54c03f49481fe04a9ad9e8f659f7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8feaee5b6b54c03f49481fe04a9ad9e8f659f7c", "html_url": "https://github.com/rust-lang/rust/commit/a8feaee5b6b54c03f49481fe04a9ad9e8f659f7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8feaee5b6b54c03f49481fe04a9ad9e8f659f7c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ed8b698421291f5057059da885cd670d76a47e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ed8b698421291f5057059da885cd670d76a47e9", "html_url": "https://github.com/rust-lang/rust/commit/3ed8b698421291f5057059da885cd670d76a47e9"}, {"sha": "9e36111fc60ff448bb8c2977dc51ccf0d3e3a3e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e36111fc60ff448bb8c2977dc51ccf0d3e3a3e9", "html_url": "https://github.com/rust-lang/rust/commit/9e36111fc60ff448bb8c2977dc51ccf0d3e3a3e9"}], "stats": {"total": 146, "additions": 146, "deletions": 0}, "files": [{"sha": "1280c71e83c922fa2b5e3befe3419f6014aa1dd2", "filename": "src/doc/unstable-book/src/library-features/entry-and-modify.md", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/a8feaee5b6b54c03f49481fe04a9ad9e8f659f7c/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fentry-and-modify.md", "raw_url": "https://github.com/rust-lang/rust/raw/a8feaee5b6b54c03f49481fe04a9ad9e8f659f7c/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fentry-and-modify.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fentry-and-modify.md?ref=a8feaee5b6b54c03f49481fe04a9ad9e8f659f7c", "patch": "@@ -0,0 +1,77 @@\n+# `entry_and_modify`\n+\n+The tracking issue for this feature is: [#44733]\n+\n+[#44733]: https://github.com/rust-lang/rust/issues/44733\n+\n+------------------------\n+\n+This introduces a new method for the Entry API of maps\n+(`std::collections::HashMap` and `std::collections::BTreeMap`), so that\n+occupied entries can be modified before any potential inserts into the\n+map.\n+\n+For example:\n+\n+```rust\n+#![feature(entry_and_modify)]\n+# fn main() {\n+use std::collections::HashMap;\n+\n+struct Foo {\n+    new: bool,\n+}\n+\n+let mut map: HashMap<&str, Foo> = HashMap::new();\n+\n+map.entry(\"quux\")\n+   .and_modify(|e| e.new = false)\n+   .or_insert(Foo { new: true });\n+# }\n+```\n+\n+This is not possible with the stable API alone since inserting a default\n+_before_ modifying the `new` field would mean we would lose the default state:\n+\n+```rust\n+# fn main() {\n+use std::collections::HashMap;\n+\n+struct Foo {\n+    new: bool,\n+}\n+\n+let mut map: HashMap<&str, Foo> = HashMap::new();\n+\n+map.entry(\"quux\").or_insert(Foo { new: true }).new = false;\n+# }\n+```\n+\n+In the above code the `new` field will never be `true`, even though we only\n+intended to update that field to `false` for previously extant entries.\n+\n+To achieve the same effect as `and_modify` we would have to manually match\n+against the `Occupied` and `Vacant` variants of the `Entry` enum, which is\n+a little less user-friendly, and much more verbose:\n+\n+```rust\n+# fn main() {\n+use std::collections::HashMap;\n+use std::collections::hash_map::Entry;\n+\n+struct Foo {\n+    new: bool,\n+}\n+\n+let mut map: HashMap<&str, Foo> = HashMap::new();\n+\n+match map.entry(\"quux\") {\n+    Entry::Occupied(entry) => {\n+        entry.into_mut().new = false;\n+    },\n+    Entry::Vacant(entry) => {\n+        entry.insert(Foo { new: true });\n+    },\n+};\n+# }\n+```"}, {"sha": "b114dc640fbafb1f97ba4f432b9836592e180fc8", "filename": "src/liballoc/btree/map.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a8feaee5b6b54c03f49481fe04a9ad9e8f659f7c/src%2Fliballoc%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8feaee5b6b54c03f49481fe04a9ad9e8f659f7c/src%2Fliballoc%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbtree%2Fmap.rs?ref=a8feaee5b6b54c03f49481fe04a9ad9e8f659f7c", "patch": "@@ -2102,6 +2102,40 @@ impl<'a, K: Ord, V> Entry<'a, K, V> {\n             Vacant(ref entry) => entry.key(),\n         }\n     }\n+\n+    /// Provides in-place mutable access to an occupied entry before any\n+    /// potential inserts into the map.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(entry_and_modify)]\n+    /// use std::collections::BTreeMap;\n+    ///\n+    /// let mut map: BTreeMap<&str, usize> = BTreeMap::new();\n+    ///\n+    /// map.entry(\"poneyland\")\n+    ///    .and_modify(|e| { *e += 1 })\n+    ///    .or_insert(42);\n+    /// assert_eq!(map[\"poneyland\"], 42);\n+    ///\n+    /// map.entry(\"poneyland\")\n+    ///    .and_modify(|e| { *e += 1 })\n+    ///    .or_insert(42);\n+    /// assert_eq!(map[\"poneyland\"], 43);\n+    /// ```\n+    #[unstable(feature = \"entry_and_modify\", issue = \"44733\")]\n+    pub fn and_modify<F>(self, mut f: F) -> Self\n+        where F: FnMut(&mut V)\n+    {\n+        match self {\n+            Occupied(mut entry) => {\n+                f(entry.get_mut());\n+                Occupied(entry)\n+            },\n+            Vacant(entry) => Vacant(entry),\n+        }\n+    }\n }\n \n impl<'a, K: Ord, V: Default> Entry<'a, K, V> {"}, {"sha": "3c0fa0860d394125b7b4eefeb8a188f1d3851e91", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/a8feaee5b6b54c03f49481fe04a9ad9e8f659f7c/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8feaee5b6b54c03f49481fe04a9ad9e8f659f7c/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=a8feaee5b6b54c03f49481fe04a9ad9e8f659f7c", "patch": "@@ -2013,6 +2013,41 @@ impl<'a, K, V> Entry<'a, K, V> {\n             Vacant(ref entry) => entry.key(),\n         }\n     }\n+\n+    /// Provides in-place mutable access to an occupied entry before any\n+    /// potential inserts into the map.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(entry_and_modify)]\n+    /// use std::collections::HashMap;\n+    ///\n+    /// let mut map: HashMap<&str, u32> = HashMap::new();\n+    ///\n+    /// map.entry(\"poneyland\")\n+    ///    .and_modify(|e| { *e += 1 })\n+    ///    .or_insert(42);\n+    /// assert_eq!(map[\"poneyland\"], 42);\n+    ///\n+    /// map.entry(\"poneyland\")\n+    ///    .and_modify(|e| { *e += 1 })\n+    ///    .or_insert(42);\n+    /// assert_eq!(map[\"poneyland\"], 43);\n+    /// ```\n+    #[unstable(feature = \"entry_and_modify\", issue = \"44733\")]\n+    pub fn and_modify<F>(self, mut f: F) -> Self\n+        where F: FnMut(&mut V)\n+    {\n+        match self {\n+            Occupied(mut entry) => {\n+                f(entry.get_mut());\n+                Occupied(entry)\n+            },\n+            Vacant(entry) => Vacant(entry),\n+        }\n+    }\n+\n }\n \n impl<'a, K, V: Default> Entry<'a, K, V> {"}]}