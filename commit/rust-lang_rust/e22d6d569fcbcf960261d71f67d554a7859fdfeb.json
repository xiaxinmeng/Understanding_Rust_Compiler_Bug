{"sha": "e22d6d569fcbcf960261d71f67d554a7859fdfeb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyMmQ2ZDU2OWZjYmNmOTYwMjYxZDcxZjY3ZDU1NGE3ODU5ZmRmZWI=", "commit": {"author": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2016-03-19T21:02:33Z"}, "committer": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2016-03-19T21:35:28Z"}, "message": "Fix LLVMRustSetHasUnsafeAlgebra to only have effect on instructions", "tree": {"sha": "45b4911e756311e066cd9d45ccfc9700b7e58470", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45b4911e756311e066cd9d45ccfc9700b7e58470"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e22d6d569fcbcf960261d71f67d554a7859fdfeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e22d6d569fcbcf960261d71f67d554a7859fdfeb", "html_url": "https://github.com/rust-lang/rust/commit/e22d6d569fcbcf960261d71f67d554a7859fdfeb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e22d6d569fcbcf960261d71f67d554a7859fdfeb/comments", "author": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2dbac1fb8ed43cbcd160855803d50a51c38b8cee", "url": "https://api.github.com/repos/rust-lang/rust/commits/2dbac1fb8ed43cbcd160855803d50a51c38b8cee", "html_url": "https://github.com/rust-lang/rust/commit/2dbac1fb8ed43cbcd160855803d50a51c38b8cee"}], "stats": {"total": 6, "additions": 4, "deletions": 2}, "files": [{"sha": "33174c1e9dfe36abdb0c91aa82000320b8e7c6a6", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e22d6d569fcbcf960261d71f67d554a7859fdfeb/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/e22d6d569fcbcf960261d71f67d554a7859fdfeb/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=e22d6d569fcbcf960261d71f67d554a7859fdfeb", "patch": "@@ -165,8 +165,10 @@ extern \"C\" void LLVMRemoveFunctionAttrString(LLVMValueRef fn, unsigned index, co\n }\n \n // enable fpmath flag UnsafeAlgebra\n-extern \"C\" void LLVMRustSetHasUnsafeAlgebra(LLVMValueRef Instr) {\n-    unwrap<Instruction>(Instr)->setHasUnsafeAlgebra(true);\n+extern \"C\" void LLVMRustSetHasUnsafeAlgebra(LLVMValueRef V) {\n+    if (auto I = dyn_cast<Instruction>(unwrap<Value>(V))) {\n+        I->setHasUnsafeAlgebra(true);\n+    }\n }\n \n extern \"C\" LLVMValueRef LLVMBuildAtomicLoad(LLVMBuilderRef B,"}]}