{"sha": "23bc6508bb81579c851b64321de060224964f387", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzYmM2NTA4YmI4MTU3OWM4NTFiNjQzMjFkZTA2MDIyNDk2NGYzODc=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-08-28T12:34:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-08-28T12:34:30Z"}, "message": "Merge pull request #1861 from CBenoit/master\n\nAdd example for needless borrowed ref lint and register it", "tree": {"sha": "e0c86a4831e6f8c95cb0daa0991214e3a6f82092", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0c86a4831e6f8c95cb0daa0991214e3a6f82092"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23bc6508bb81579c851b64321de060224964f387", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23bc6508bb81579c851b64321de060224964f387", "html_url": "https://github.com/rust-lang/rust/commit/23bc6508bb81579c851b64321de060224964f387", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23bc6508bb81579c851b64321de060224964f387/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f3b3b70901df4d1f91e25d49c1b00a305c4f5ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f3b3b70901df4d1f91e25d49c1b00a305c4f5ea", "html_url": "https://github.com/rust-lang/rust/commit/9f3b3b70901df4d1f91e25d49c1b00a305c4f5ea"}, {"sha": "c3ef220bba7521427016f7422994cb8dfa24e1f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3ef220bba7521427016f7422994cb8dfa24e1f2", "html_url": "https://github.com/rust-lang/rust/commit/c3ef220bba7521427016f7422994cb8dfa24e1f2"}], "stats": {"total": 148, "additions": 134, "deletions": 14}, "files": [{"sha": "c99df8acdfca61c0a9783e02ab97a0d1978413bb", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23bc6508bb81579c851b64321de060224964f387/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23bc6508bb81579c851b64321de060224964f387/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=23bc6508bb81579c851b64321de060224964f387", "patch": "@@ -264,6 +264,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_late_lint_pass(box mutex_atomic::MutexAtomic);\n     reg.register_late_lint_pass(box needless_update::Pass);\n     reg.register_late_lint_pass(box needless_borrow::NeedlessBorrow);\n+    reg.register_late_lint_pass(box needless_borrowed_ref::NeedlessBorrowedRef);\n     reg.register_late_lint_pass(box no_effect::Pass);\n     reg.register_late_lint_pass(box map_clone::Pass);\n     reg.register_late_lint_pass(box temporary_assignment::Pass);"}, {"sha": "3f7ccca23b4267f197ca48fdacc7c8b084163d09", "filename": "clippy_lints/src/needless_borrowed_ref.rs", "status": "modified", "additions": 32, "deletions": 13, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/23bc6508bb81579c851b64321de060224964f387/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23bc6508bb81579c851b64321de060224964f387/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs?ref=23bc6508bb81579c851b64321de060224964f387", "patch": "@@ -4,16 +4,31 @@\n \n use rustc::lint::*;\n use rustc::hir::{MutImmutable, Pat, PatKind, BindingAnnotation};\n-use rustc::ty;\n-use utils::{span_lint, in_macro};\n+use utils::{span_lint_and_then, in_macro, snippet};\n \n /// **What it does:** Checks for useless borrowed references.\n ///\n-/// **Why is this bad?** It is completely useless and make the code look more\n-/// complex than it\n+/// **Why is this bad?** It is mostly useless and make the code look more complex than it\n /// actually is.\n ///\n-/// **Known problems:** None.\n+/// **Known problems:** It seems that the `&ref` pattern is sometimes useful.\n+/// For instance in the following snippet:\n+/// ```rust\n+/// enum Animal {\n+///     Cat(u64),\n+///     Dog(u64),\n+/// }\n+///\n+/// fn foo(a: &Animal, b: &Animal) {\n+///     match (a, b) {\n+///         (&Animal::Cat(v), k) | (k, &Animal::Cat(v)) => (), // lifetime mismatch error\n+///         (&Animal::Dog(ref c), &Animal::Dog(_)) => ()\n+///     }\n+/// }\n+/// ```\n+/// There is a lifetime mismatch error for `k` (indeed a and b have distinct lifetime).\n+/// This can be fixed by using the `&ref` pattern.\n+/// However, the code can also be fixed by much cleaner ways\n ///\n /// **Example:**\n /// ```rust\n@@ -47,15 +62,19 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBorrowedRef {\n         }\n \n         if_let_chain! {[\n-            // Pat is a pattern whose node\n-            // is a binding which \"involves\" a immutable reference...\n-            let PatKind::Binding(BindingAnnotation::Ref, ..) = pat.node,\n-            // Pattern's type is a reference. Get the type and mutability of referenced value (tam: TypeAndMut).\n-            let ty::TyRef(_, ref tam) = cx.tables.pat_ty(pat).sty,\n-            // This is an immutable reference.\n-            tam.mutbl == MutImmutable,\n+            // Only lint immutable refs, because `&mut ref T` may be useful.\n+            let PatKind::Ref(ref sub_pat, MutImmutable) = pat.node,\n+\n+            // Check sub_pat got a `ref` keyword (excluding `ref mut`).\n+            let PatKind::Binding(BindingAnnotation::Ref, _, spanned_name, ..) = sub_pat.node,\n         ], {\n-            span_lint(cx, NEEDLESS_BORROWED_REFERENCE, pat.span, \"this pattern takes a reference on something that is being de-referenced\")\n+            span_lint_and_then(cx, NEEDLESS_BORROWED_REFERENCE, pat.span,\n+                               \"this pattern takes a reference on something that is being de-referenced\",\n+                               |db| {\n+                                   let hint = snippet(cx, spanned_name.span, \"..\").into_owned();\n+                                   db.span_suggestion(pat.span, \"try removing the `&ref` part and just keep\", hint);\n+                               });\n         }}\n     }\n }\n+"}, {"sha": "4e9986561bc1b0ccf4cdf2d62b01516fdf35e2ff", "filename": "clippy_tests/examples/needless_borrowed_ref.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/23bc6508bb81579c851b64321de060224964f387/clippy_tests%2Fexamples%2Fneedless_borrowed_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23bc6508bb81579c851b64321de060224964f387/clippy_tests%2Fexamples%2Fneedless_borrowed_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_tests%2Fexamples%2Fneedless_borrowed_ref.rs?ref=23bc6508bb81579c851b64321de060224964f387", "patch": "@@ -0,0 +1,48 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#[warn(needless_borrowed_reference)]\n+#[allow(unused_variables)]\n+fn main() {\n+    let mut v = Vec::<String>::new();\n+    let _ = v.iter_mut().filter(|&ref a| a.is_empty());\n+    //                            ^ should be linted\n+\n+    let var = 3;\n+    let thingy = Some(&var);\n+    if let Some(&ref v) = thingy {\n+        //          ^ should be linted\n+    }\n+\n+    let mut var2 = 5;\n+    let thingy2 = Some(&mut var2);\n+    if let Some(&mut ref mut v) = thingy2 {\n+        //          ^ should *not* be linted\n+        // v is borrowed as mutable.\n+        *v = 10;\n+    }\n+    if let Some(&mut ref v) = thingy2 {\n+        //          ^ should *not* be linted\n+        // here, v is borrowed as immutable.\n+        // can't do that:\n+        //*v = 15;\n+    }\n+}\n+\n+#[allow(dead_code)]\n+enum Animal {\n+    Cat(u64),\n+    Dog(u64),\n+}\n+\n+#[allow(unused_variables)]\n+#[allow(dead_code)]\n+fn foo(a: &Animal, b: &Animal) {\n+    match (a, b) {\n+        (&Animal::Cat(v), &ref k) | (&ref k, &Animal::Cat(v)) => (), // lifetime mismatch error if there is no '&ref'\n+        //                  ^    and   ^ should *not* be linted\n+        (&Animal::Dog(ref a), &Animal::Dog(_)) => ()\n+        //              ^ should *not* be linted\n+    }\n+}\n+"}, {"sha": "2b506af88f5a8ca16388952d594b070d5d259261", "filename": "clippy_tests/examples/needless_borrowed_ref.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/23bc6508bb81579c851b64321de060224964f387/clippy_tests%2Fexamples%2Fneedless_borrowed_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23bc6508bb81579c851b64321de060224964f387/clippy_tests%2Fexamples%2Fneedless_borrowed_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_tests%2Fexamples%2Fneedless_borrowed_ref.stderr?ref=23bc6508bb81579c851b64321de060224964f387", "patch": "@@ -0,0 +1,38 @@\n+error: this pattern takes a reference on something that is being de-referenced\n+ --> needless_borrowed_ref.rs:8:34\n+  |\n+8 |     let _ = v.iter_mut().filter(|&ref a| a.is_empty());\n+  |                                  ^^^^^^ help: try removing the `&ref` part and just keep `a`\n+  |\n+  = note: `-D needless-borrowed-reference` implied by `-D warnings`\n+  = help: for further information visit https://github.com/Manishearth/rust-clippy/wiki#needless_borrowed_reference\n+\n+error: this pattern takes a reference on something that is being de-referenced\n+  --> needless_borrowed_ref.rs:13:17\n+   |\n+13 |     if let Some(&ref v) = thingy {\n+   |                 ^^^^^^ help: try removing the `&ref` part and just keep `v`\n+   |\n+   = help: for further information visit https://github.com/Manishearth/rust-clippy/wiki#needless_borrowed_reference\n+\n+error: this pattern takes a reference on something that is being de-referenced\n+  --> needless_borrowed_ref.rs:42:27\n+   |\n+42 |         (&Animal::Cat(v), &ref k) | (&ref k, &Animal::Cat(v)) => (), // lifetime mismatch error if there is no '&ref'\n+   |                           ^^^^^^ help: try removing the `&ref` part and just keep `k`\n+   |\n+   = help: for further information visit https://github.com/Manishearth/rust-clippy/wiki#needless_borrowed_reference\n+\n+error: this pattern takes a reference on something that is being de-referenced\n+  --> needless_borrowed_ref.rs:42:38\n+   |\n+42 |         (&Animal::Cat(v), &ref k) | (&ref k, &Animal::Cat(v)) => (), // lifetime mismatch error if there is no '&ref'\n+   |                                      ^^^^^^ help: try removing the `&ref` part and just keep `k`\n+   |\n+   = help: for further information visit https://github.com/Manishearth/rust-clippy/wiki#needless_borrowed_reference\n+\n+error: aborting due to previous error(s)\n+\n+error: Could not compile `clippy_tests`.\n+\n+To learn more, run the command again with --verbose."}, {"sha": "d90c396645e9cd4f5f1e3d0dc372159f659eb0fe", "filename": "tests/ui/needless_borrow.stderr", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/23bc6508bb81579c851b64321de060224964f387/tests%2Fui%2Fneedless_borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23bc6508bb81579c851b64321de060224964f387/tests%2Fui%2Fneedless_borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_borrow.stderr?ref=23bc6508bb81579c851b64321de060224964f387", "patch": "@@ -18,11 +18,25 @@ error: this expression borrows a reference that is immediately dereferenced by t\n 27 |         46 => &&a,\n    |               ^^^\n \n+error: this pattern takes a reference on something that is being de-referenced\n+  --> $DIR/needless_borrow.rs:49:34\n+   |\n+49 |     let _ = v.iter_mut().filter(|&ref a| a.is_empty());\n+   |                                  ^^^^^^ help: try removing the `&ref` part and just keep: `a`\n+   |\n+   = note: `-D needless-borrowed-reference` implied by `-D warnings`\n+\n+error: this pattern takes a reference on something that is being de-referenced\n+  --> $DIR/needless_borrow.rs:50:30\n+   |\n+50 |     let _ = v.iter().filter(|&ref a| a.is_empty());\n+   |                              ^^^^^^ help: try removing the `&ref` part and just keep: `a`\n+\n error: this pattern creates a reference to a reference\n   --> $DIR/needless_borrow.rs:50:31\n    |\n 50 |     let _ = v.iter().filter(|&ref a| a.is_empty());\n    |                               ^^^^^\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 6 previous errors\n "}]}