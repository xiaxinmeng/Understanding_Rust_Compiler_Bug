{"sha": "70a79a9e0527fab74d8c2d2b49886b41bdd878f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwYTc5YTllMDUyN2ZhYjc0ZDhjMmQyYjQ5ODg2YjQxYmRkODc4ZjU=", "commit": {"author": {"name": "Valerii Hiora", "email": "valerii.hiora@gmail.com", "date": "2014-06-11T07:48:17Z"}, "committer": {"name": "Valerii Hiora", "email": "valerii.hiora@gmail.com", "date": "2014-06-12T18:15:14Z"}, "message": "Better dylib skipping based on Alex Crichton code", "tree": {"sha": "7495e510fd780ea8dfa26bdf1cafb45f878132d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7495e510fd780ea8dfa26bdf1cafb45f878132d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70a79a9e0527fab74d8c2d2b49886b41bdd878f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70a79a9e0527fab74d8c2d2b49886b41bdd878f5", "html_url": "https://github.com/rust-lang/rust/commit/70a79a9e0527fab74d8c2d2b49886b41bdd878f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70a79a9e0527fab74d8c2d2b49886b41bdd878f5/comments", "author": {"login": "vhbit", "id": 140199, "node_id": "MDQ6VXNlcjE0MDE5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/140199?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vhbit", "html_url": "https://github.com/vhbit", "followers_url": "https://api.github.com/users/vhbit/followers", "following_url": "https://api.github.com/users/vhbit/following{/other_user}", "gists_url": "https://api.github.com/users/vhbit/gists{/gist_id}", "starred_url": "https://api.github.com/users/vhbit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vhbit/subscriptions", "organizations_url": "https://api.github.com/users/vhbit/orgs", "repos_url": "https://api.github.com/users/vhbit/repos", "events_url": "https://api.github.com/users/vhbit/events{/privacy}", "received_events_url": "https://api.github.com/users/vhbit/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vhbit", "id": 140199, "node_id": "MDQ6VXNlcjE0MDE5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/140199?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vhbit", "html_url": "https://github.com/vhbit", "followers_url": "https://api.github.com/users/vhbit/followers", "following_url": "https://api.github.com/users/vhbit/following{/other_user}", "gists_url": "https://api.github.com/users/vhbit/gists{/gist_id}", "starred_url": "https://api.github.com/users/vhbit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vhbit/subscriptions", "organizations_url": "https://api.github.com/users/vhbit/orgs", "repos_url": "https://api.github.com/users/vhbit/repos", "events_url": "https://api.github.com/users/vhbit/events{/privacy}", "received_events_url": "https://api.github.com/users/vhbit/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a49b765f9a5b5926e338da30fcaae59ff1ae5c02", "url": "https://api.github.com/repos/rust-lang/rust/commits/a49b765f9a5b5926e338da30fcaae59ff1ae5c02", "html_url": "https://github.com/rust-lang/rust/commit/a49b765f9a5b5926e338da30fcaae59ff1ae5c02"}], "stats": {"total": 246, "additions": 125, "deletions": 121}, "files": [{"sha": "7a7d248a4cbf55db065ee1f1e0aa7ec331af5365", "filename": "src/librustc/back/arm.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/70a79a9e0527fab74d8c2d2b49886b41bdd878f5/src%2Flibrustc%2Fback%2Farm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70a79a9e0527fab74d8c2d2b49886b41bdd878f5/src%2Flibrustc%2Fback%2Farm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Farm.rs?ref=70a79a9e0527fab74d8c2d2b49886b41bdd878f5", "patch": "@@ -9,8 +9,6 @@\n // except according to those terms.\n \n use back::target_strs;\n-use driver::config::cfg_os_to_meta_os;\n-use metadata::loader::meta_section_name;\n use syntax::abi;\n \n pub fn get_target_strs(target_triple: String, target_os: abi::Os) -> target_strs::t {\n@@ -22,9 +20,6 @@ pub fn get_target_strs(target_triple: String, target_os: abi::Os) -> target_strs\n     return target_strs::t {\n         module_asm: \"\".to_string(),\n \n-        meta_sect_name:\n-            meta_section_name(cfg_os_to_meta_os(target_os)).to_string(),\n-\n         data_layout: match target_os {\n           abi::OsMacos => {\n             \"e-p:32:32:32\\"}, {"sha": "d644a0cc353304f9d407c2c38dc221a306dd0ae5", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 43, "deletions": 25, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/70a79a9e0527fab74d8c2d2b49886b41bdd878f5/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70a79a9e0527fab74d8c2d2b49886b41bdd878f5/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=70a79a9e0527fab74d8c2d2b49886b41bdd878f5", "patch": "@@ -806,6 +806,10 @@ pub fn link_binary(sess: &Session,\n                    id: &CrateId) -> Vec<Path> {\n     let mut out_filenames = Vec::new();\n     for &crate_type in sess.crate_types.borrow().iter() {\n+        if invalid_output_for_target(sess, crate_type) {\n+            sess.bug(format!(\"invalid output type `{}` for target os `{}`\",\n+                             crate_type, sess.targ_cfg.os).as_slice());\n+        }\n         let out_file = link_binary_output(sess, trans, crate_type, outputs, id);\n         out_filenames.push(out_file);\n     }\n@@ -822,6 +826,32 @@ pub fn link_binary(sess: &Session,\n     out_filenames\n }\n \n+\n+/// Returns default crate type for target\n+///\n+/// Default crate type is used when crate type isn't provided neither\n+/// through cmd line arguments nor through crate attributes\n+///\n+/// It is CrateTypeExecutable for all platforms but iOS as there is no\n+/// way to run iOS binaries anyway without jailbreaking and\n+/// interaction with Rust code through static library is the only\n+/// option for now\n+pub fn default_output_for_target(sess: &Session) -> config::CrateType {\n+    match sess.targ_cfg.os {\n+        abi::OsiOS => config::CrateTypeStaticlib,\n+        _ => config::CrateTypeExecutable\n+    }\n+}\n+\n+/// Checks if target supports crate_type as output\n+pub fn invalid_output_for_target(sess: &Session,\n+                                 crate_type: config::CrateType) -> bool {\n+    match (sess.targ_cfg.os, crate_type) {\n+        (abi::OsiOS, config::CrateTypeDylib) => true,\n+        _ => false\n+    }\n+}\n+\n fn is_writeable(p: &Path) -> bool {\n     match p.stat() {\n         Err(..) => true,\n@@ -837,23 +867,18 @@ pub fn filename_for_input(sess: &Session, crate_type: config::CrateType,\n             out_filename.with_filename(format!(\"lib{}.rlib\", libname))\n         }\n         config::CrateTypeDylib => {\n-            // There is no support of DyLibs on iOS\n-            if sess.targ_cfg.os == abi::OsiOS {\n-                out_filename.with_filename(format!(\"lib{}.a\", libname))\n-            } else {\n-                let (prefix, suffix) = match sess.targ_cfg.os {\n-                    abi::OsWin32 => (loader::WIN32_DLL_PREFIX, loader::WIN32_DLL_SUFFIX),\n-                    abi::OsMacos => (loader::MACOS_DLL_PREFIX, loader::MACOS_DLL_SUFFIX),\n-                    abi::OsLinux => (loader::LINUX_DLL_PREFIX, loader::LINUX_DLL_SUFFIX),\n-                    abi::OsAndroid => (loader::ANDROID_DLL_PREFIX, loader::ANDROID_DLL_SUFFIX),\n-                    abi::OsFreebsd => (loader::FREEBSD_DLL_PREFIX, loader::FREEBSD_DLL_SUFFIX),\n-                    abi::OsiOS => unreachable!(),\n-                };\n-                out_filename.with_filename(format!(\"{}{}{}\",\n-                                                   prefix,\n-                                                   libname,\n-                                                   suffix))\n-            }\n+            let (prefix, suffix) = match sess.targ_cfg.os {\n+                abi::OsWin32 => (loader::WIN32_DLL_PREFIX, loader::WIN32_DLL_SUFFIX),\n+                abi::OsMacos => (loader::MACOS_DLL_PREFIX, loader::MACOS_DLL_SUFFIX),\n+                abi::OsLinux => (loader::LINUX_DLL_PREFIX, loader::LINUX_DLL_SUFFIX),\n+                abi::OsAndroid => (loader::ANDROID_DLL_PREFIX, loader::ANDROID_DLL_SUFFIX),\n+                abi::OsFreebsd => (loader::FREEBSD_DLL_PREFIX, loader::FREEBSD_DLL_SUFFIX),\n+                abi::OsiOS => unreachable!(),\n+            };\n+            out_filename.with_filename(format!(\"{}{}{}\",\n+                                               prefix,\n+                                               libname,\n+                                               suffix))\n         }\n         config::CrateTypeStaticlib => {\n             out_filename.with_filename(format!(\"lib{}.a\", libname))\n@@ -904,14 +929,7 @@ fn link_binary_output(sess: &Session,\n             link_natively(sess, trans, false, &obj_filename, &out_filename);\n         }\n         config::CrateTypeDylib => {\n-            if sess.targ_cfg.os == abi::OsiOS {\n-                sess.warn(format!(\"No dylib for iOS -> saving static library {} to {}\",\n-                                  obj_filename.display(), out_filename.display()).as_slice());\n-                link_staticlib(sess, &obj_filename, &out_filename);\n-            }\n-            else {\n-                link_natively(sess, trans, true, &obj_filename, &out_filename);\n-            }\n+            link_natively(sess, trans, true, &obj_filename, &out_filename);\n         }\n     }\n "}, {"sha": "8f3da03e825eaa9235d519dd2d5c22f21faedf9d", "filename": "src/librustc/back/mips.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/70a79a9e0527fab74d8c2d2b49886b41bdd878f5/src%2Flibrustc%2Fback%2Fmips.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70a79a9e0527fab74d8c2d2b49886b41bdd878f5/src%2Flibrustc%2Fback%2Fmips.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Fmips.rs?ref=70a79a9e0527fab74d8c2d2b49886b41bdd878f5", "patch": "@@ -9,17 +9,12 @@\n // except according to those terms.\n \n use back::target_strs;\n-use driver::config::cfg_os_to_meta_os;\n-use metadata::loader::meta_section_name;\n use syntax::abi;\n \n pub fn get_target_strs(target_triple: String, target_os: abi::Os) -> target_strs::t {\n     return target_strs::t {\n         module_asm: \"\".to_string(),\n \n-        meta_sect_name:\n-            meta_section_name(cfg_os_to_meta_os(target_os)).to_string(),\n-\n         data_layout: match target_os {\n           abi::OsMacos => {\n             \"E-p:32:32:32\\"}, {"sha": "7928f3d8db098167d7571824ea1b7d5666835a21", "filename": "src/librustc/back/target_strs.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/70a79a9e0527fab74d8c2d2b49886b41bdd878f5/src%2Flibrustc%2Fback%2Ftarget_strs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70a79a9e0527fab74d8c2d2b49886b41bdd878f5/src%2Flibrustc%2Fback%2Ftarget_strs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Ftarget_strs.rs?ref=70a79a9e0527fab74d8c2d2b49886b41bdd878f5", "patch": "@@ -12,7 +12,6 @@\n \n pub struct t {\n     pub module_asm: String,\n-    pub meta_sect_name: String,\n     pub data_layout: String,\n     pub target_triple: String,\n     pub cc_args: Vec<String> ,"}, {"sha": "d2dac03267d5fc7e4b18cee9a779b7d64ac2afdf", "filename": "src/librustc/back/x86.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/70a79a9e0527fab74d8c2d2b49886b41bdd878f5/src%2Flibrustc%2Fback%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70a79a9e0527fab74d8c2d2b49886b41bdd878f5/src%2Flibrustc%2Fback%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Fx86.rs?ref=70a79a9e0527fab74d8c2d2b49886b41bdd878f5", "patch": "@@ -10,18 +10,13 @@\n \n \n use back::target_strs;\n-use driver::config::cfg_os_to_meta_os;\n-use metadata::loader::meta_section_name;\n use syntax::abi;\n \n pub fn get_target_strs(target_triple: String, target_os: abi::Os)\n                        -> target_strs::t {\n     return target_strs::t {\n         module_asm: \"\".to_string(),\n \n-        meta_sect_name:\n-            meta_section_name(cfg_os_to_meta_os(target_os)).to_string(),\n-\n         data_layout: match target_os {\n           abi::OsMacos => {\n             \"e-p:32:32:32-i1:8:8-i8:8:8-i16:16:16\\"}, {"sha": "c2eae18737bfad2e37feba7335c20639bfbb08cc", "filename": "src/librustc/back/x86_64.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/70a79a9e0527fab74d8c2d2b49886b41bdd878f5/src%2Flibrustc%2Fback%2Fx86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70a79a9e0527fab74d8c2d2b49886b41bdd878f5/src%2Flibrustc%2Fback%2Fx86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Fx86_64.rs?ref=70a79a9e0527fab74d8c2d2b49886b41bdd878f5", "patch": "@@ -10,17 +10,12 @@\n \n \n use back::target_strs;\n-use driver::config::cfg_os_to_meta_os;\n-use metadata::loader::meta_section_name;\n use syntax::abi;\n \n pub fn get_target_strs(target_triple: String, target_os: abi::Os) -> target_strs::t {\n     return target_strs::t {\n         module_asm: \"\".to_string(),\n \n-        meta_sect_name:\n-            meta_section_name(cfg_os_to_meta_os(target_os)).to_string(),\n-\n         data_layout: match target_os {\n           abi::OsMacos => {\n             \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\\"}, {"sha": "fd21951f2875a7fc0d29858070d810dafc4f30fc", "filename": "src/librustc/driver/config.rs", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/70a79a9e0527fab74d8c2d2b49886b41bdd878f5/src%2Flibrustc%2Fdriver%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70a79a9e0527fab74d8c2d2b49886b41bdd878f5/src%2Flibrustc%2Fdriver%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fconfig.rs?ref=70a79a9e0527fab74d8c2d2b49886b41bdd878f5", "patch": "@@ -19,7 +19,6 @@ use back;\n use back::link;\n use back::target_strs;\n use back::{arm, x86, x86_64, mips};\n-use metadata;\n use middle::lint;\n \n use syntax::abi;\n@@ -36,6 +35,7 @@ use getopts::{optopt, optmulti, optflag, optflagopt};\n use getopts;\n use lib::llvm::llvm;\n use std::cell::{RefCell};\n+use std::fmt;\n \n \n pub struct Config {\n@@ -354,19 +354,6 @@ pub fn default_lib_output() -> CrateType {\n     CrateTypeRlib\n }\n \n-pub fn cfg_os_to_meta_os(os: abi::Os) -> metadata::loader::Os {\n-    use metadata::loader;\n-\n-    match os {\n-        abi::OsWin32 => loader::OsWin32,\n-        abi::OsLinux => loader::OsLinux,\n-        abi::OsAndroid => loader::OsAndroid,\n-        abi::OsMacos => loader::OsMacos,\n-        abi::OsFreebsd => loader::OsFreebsd,\n-        abi::OsiOS => loader::OsiOS,\n-    }\n-}\n-\n pub fn default_configuration(sess: &Session) -> ast::CrateConfig {\n     let tos = match sess.targ_cfg.os {\n         abi::OsWin32 =>   InternedString::new(\"win32\"),\n@@ -775,6 +762,16 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n     }\n }\n \n+impl fmt::Show for CrateType {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        match *self {\n+            CrateTypeExecutable => \"bin\".fmt(f),\n+            CrateTypeDylib => \"dylib\".fmt(f),\n+            CrateTypeRlib => \"rlib\".fmt(f),\n+            CrateTypeStaticlib => \"staticlib\".fmt(f)\n+        }\n+    }\n+}\n \n #[cfg(test)]\n mod test {"}, {"sha": "7bc698bfbd342c78b9efb682ec74bf9d26d35337", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/70a79a9e0527fab74d8c2d2b49886b41bdd878f5/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70a79a9e0527fab74d8c2d2b49886b41bdd878f5/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=70a79a9e0527fab74d8c2d2b49886b41bdd878f5", "patch": "@@ -779,17 +779,26 @@ pub fn collect_crate_types(session: &Session,\n     // command line, then reuse the empty `base` Vec to hold the types that\n     // will be found in crate attributes.\n     let mut base = session.opts.crate_types.clone();\n-    if base.len() > 0 {\n-        return base\n-    } else {\n+    if base.len() == 0 {\n         base.extend(attr_types.move_iter());\n         if base.len() == 0 {\n-            base.push(config::CrateTypeExecutable);\n+            base.push(link::default_output_for_target(session));\n         }\n         base.as_mut_slice().sort();\n         base.dedup();\n-        return base;\n     }\n+\n+    base.move_iter().filter(|crate_type| {\n+        let res = !link::invalid_output_for_target(session, *crate_type);\n+\n+        if !res {\n+            session.warn(format!(\"dropping unsupported crate type `{}` \\\n+                                   for target os `{}`\",\n+                                 *crate_type, session.targ_cfg.os).as_slice());\n+        }\n+\n+        res\n+    }).collect()\n }\n \n pub struct OutputFilenames {"}, {"sha": "952e8afcbecec7a0abf371a4366e2492c9f81fac", "filename": "src/librustc/driver/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/70a79a9e0527fab74d8c2d2b49886b41bdd878f5/src%2Flibrustc%2Fdriver%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70a79a9e0527fab74d8c2d2b49886b41bdd878f5/src%2Flibrustc%2Fdriver%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fmod.rs?ref=70a79a9e0527fab74d8c2d2b49886b41bdd878f5", "patch": "@@ -349,8 +349,7 @@ pub fn early_error(msg: &str) -> ! {\n \n pub fn list_metadata(sess: &Session, path: &Path,\n                      out: &mut io::Writer) -> io::IoResult<()> {\n-    metadata::loader::list_file_metadata(\n-        config::cfg_os_to_meta_os(sess.targ_cfg.os), path, out)\n+    metadata::loader::list_file_metadata(sess.targ_cfg.os, path, out)\n }\n \n /// Run a procedure which will detect failures in the compiler and print nicer"}, {"sha": "efe28614b8f4da26e586f817de751145d48f4ce2", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70a79a9e0527fab74d8c2d2b49886b41bdd878f5/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70a79a9e0527fab74d8c2d2b49886b41bdd878f5/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=70a79a9e0527fab74d8c2d2b49886b41bdd878f5", "patch": "@@ -346,7 +346,7 @@ fn resolve_crate<'a>(e: &mut Env,\n                 id_hash: id_hash.as_slice(),\n                 hash: hash.map(|a| &*a),\n                 filesearch: e.sess.target_filesearch(),\n-                os: config::cfg_os_to_meta_os(e.sess.targ_cfg.os),\n+                os: e.sess.targ_cfg.os,\n                 triple: e.sess.targ_cfg.target_strs.target_triple.as_slice(),\n                 root: root,\n                 rejected_via_hash: vec!(),\n@@ -410,7 +410,7 @@ impl<'a> PluginMetadataReader<'a> {\n             hash: None,\n             filesearch: self.env.sess.host_filesearch(),\n             triple: driver::host_triple(),\n-            os: config::cfg_os_to_meta_os(os),\n+            os: os,\n             root: &None,\n             rejected_via_hash: vec!(),\n             rejected_via_triple: vec!(),\n@@ -421,7 +421,7 @@ impl<'a> PluginMetadataReader<'a> {\n                 // try loading from target crates (only valid if there are\n                 // no syntax extensions)\n                 load_ctxt.triple = target_triple;\n-                load_ctxt.os = config::cfg_os_to_meta_os(self.env.sess.targ_cfg.os);\n+                load_ctxt.os = self.env.sess.targ_cfg.os;\n                 load_ctxt.filesearch = self.env.sess.target_filesearch();\n                 let lib = load_ctxt.load_library_crate();\n                 if decoder::get_plugin_registrar_fn(lib.metadata.as_slice()).is_some() {"}, {"sha": "c1f29d7596bacd9d93607370fb1614dbbc61b3df", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 37, "deletions": 44, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/70a79a9e0527fab74d8c2d2b49886b41bdd878f5/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70a79a9e0527fab74d8c2d2b49886b41bdd878f5/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=70a79a9e0527fab74d8c2d2b49886b41bdd878f5", "patch": "@@ -18,6 +18,7 @@ use metadata::cstore::{MetadataBlob, MetadataVec, MetadataArchive};\n use metadata::decoder;\n use metadata::encoder;\n use metadata::filesearch::{FileSearch, FileMatches, FileDoesntMatch};\n+use syntax::abi;\n use syntax::codemap::Span;\n use syntax::diagnostic::SpanHandler;\n use syntax::crateid::CrateId;\n@@ -39,9 +40,6 @@ use time;\n pub static MACOS_DLL_PREFIX: &'static str = \"lib\";\n pub static MACOS_DLL_SUFFIX: &'static str = \".dylib\";\n \n-pub static IOS_DLL_PREFIX: &'static str = \"lib\";\n-pub static IOS_DLL_SUFFIX: &'static str = \".dylib\";\n-\n pub static WIN32_DLL_PREFIX: &'static str = \"\";\n pub static WIN32_DLL_SUFFIX: &'static str = \".dll\";\n \n@@ -54,15 +52,6 @@ pub static FREEBSD_DLL_SUFFIX: &'static str = \".so\";\n pub static ANDROID_DLL_PREFIX: &'static str = \"lib\";\n pub static ANDROID_DLL_SUFFIX: &'static str = \".so\";\n \n-pub enum Os {\n-    OsMacos,\n-    OsWin32,\n-    OsLinux,\n-    OsAndroid,\n-    OsFreebsd,\n-    OsiOS\n-}\n-\n pub struct CrateMismatch {\n     path: Path,\n     got: String,\n@@ -76,7 +65,7 @@ pub struct Context<'a> {\n     pub id_hash: &'a str,\n     pub hash: Option<&'a Svh>,\n     pub triple: &'a str,\n-    pub os: Os,\n+    pub os: abi::Os,\n     pub filesearch: FileSearch<'a>,\n     pub root: &'a Option<CratePaths>,\n     pub rejected_via_hash: Vec<CrateMismatch>,\n@@ -178,10 +167,12 @@ impl<'a> Context<'a> {\n     }\n \n     fn find_library_crate(&mut self) -> Option<Library> {\n-        let (dyprefix, dysuffix) = self.dylibname();\n+        let dypair = self.dylibname();\n \n         // want: crate_name.dir_part() + prefix + crate_name.file_part + \"-\"\n-        let dylib_prefix = format!(\"{}{}-\", dyprefix, self.crate_id.name);\n+        let dylib_prefix = dypair.map(|(prefix, _)| {\n+            format!(\"{}{}-\", prefix, self.crate_id.name)\n+        });\n         let rlib_prefix = format!(\"lib{}-\", self.crate_id.name);\n \n         let mut candidates = HashMap::new();\n@@ -222,12 +213,14 @@ impl<'a> Context<'a> {\n                         FileDoesntMatch\n                     }\n                 }\n-            } else if file.starts_with(dylib_prefix.as_slice()) &&\n-                    file.ends_with(dysuffix){\n+            } else if dypair.map_or(false, |(_, suffix)| {\n+                file.starts_with(dylib_prefix.get_ref().as_slice()) &&\n+                file.ends_with(suffix)\n+            }) {\n+                let (_, suffix) = dypair.unwrap();\n+                let dylib_prefix = dylib_prefix.get_ref().as_slice();\n                 info!(\"dylib candidate: {}\", path.display());\n-                match self.try_match(file,\n-                                     dylib_prefix.as_slice(),\n-                                     dysuffix) {\n+                match self.try_match(file, dylib_prefix, suffix) {\n                     Some(hash) => {\n                         info!(\"dylib accepted, hash: {}\", hash);\n                         let slot = candidates.find_or_insert_with(hash, |_| {\n@@ -452,14 +445,14 @@ impl<'a> Context<'a> {\n \n     // Returns the corresponding (prefix, suffix) that files need to have for\n     // dynamic libraries\n-    fn dylibname(&self) -> (&'static str, &'static str) {\n+    fn dylibname(&self) -> Option<(&'static str, &'static str)> {\n         match self.os {\n-            OsWin32 => (WIN32_DLL_PREFIX, WIN32_DLL_SUFFIX),\n-            OsMacos => (MACOS_DLL_PREFIX, MACOS_DLL_SUFFIX),\n-            OsLinux => (LINUX_DLL_PREFIX, LINUX_DLL_SUFFIX),\n-            OsAndroid => (ANDROID_DLL_PREFIX, ANDROID_DLL_SUFFIX),\n-            OsFreebsd => (FREEBSD_DLL_PREFIX, FREEBSD_DLL_SUFFIX),\n-            OsiOS => (IOS_DLL_PREFIX, IOS_DLL_SUFFIX),\n+            abi::OsWin32 => Some((WIN32_DLL_PREFIX, WIN32_DLL_SUFFIX)),\n+            abi::OsMacos => Some((MACOS_DLL_PREFIX, MACOS_DLL_SUFFIX)),\n+            abi::OsLinux => Some((LINUX_DLL_PREFIX, LINUX_DLL_SUFFIX)),\n+            abi::OsAndroid => Some((ANDROID_DLL_PREFIX, ANDROID_DLL_SUFFIX)),\n+            abi::OsFreebsd => Some((FREEBSD_DLL_PREFIX, FREEBSD_DLL_SUFFIX)),\n+            abi::OsiOS => None,\n         }\n     }\n \n@@ -501,15 +494,15 @@ impl ArchiveMetadata {\n }\n \n // Just a small wrapper to time how long reading metadata takes.\n-fn get_metadata_section(os: Os, filename: &Path) -> Result<MetadataBlob, String> {\n+fn get_metadata_section(os: abi::Os, filename: &Path) -> Result<MetadataBlob, String> {\n     let start = time::precise_time_ns();\n     let ret = get_metadata_section_imp(os, filename);\n     info!(\"reading {} => {}ms\", filename.filename_display(),\n            (time::precise_time_ns() - start) / 1000000);\n     return ret;\n }\n \n-fn get_metadata_section_imp(os: Os, filename: &Path) -> Result<MetadataBlob, String> {\n+fn get_metadata_section_imp(os: abi::Os, filename: &Path) -> Result<MetadataBlob, String> {\n     if !filename.exists() {\n         return Err(format!(\"no such file: '{}'\", filename.display()));\n     }\n@@ -595,30 +588,30 @@ fn get_metadata_section_imp(os: Os, filename: &Path) -> Result<MetadataBlob, Str\n     }\n }\n \n-pub fn meta_section_name(os: Os) -> &'static str {\n+pub fn meta_section_name(os: abi::Os) -> Option<&'static str> {\n     match os {\n-        OsMacos => \"__DATA,__note.rustc\",\n-        OsiOS => \"__DATA,__note.rustc\",\n-        OsWin32 => \".note.rustc\",\n-        OsLinux => \".note.rustc\",\n-        OsAndroid => \".note.rustc\",\n-        OsFreebsd => \".note.rustc\"\n+        abi::OsMacos => Some(\"__DATA,__note.rustc\"),\n+        abi::OsiOS => Some(\"__DATA,__note.rustc\"),\n+        abi::OsWin32 => Some(\".note.rustc\"),\n+        abi::OsLinux => Some(\".note.rustc\"),\n+        abi::OsAndroid => Some(\".note.rustc\"),\n+        abi::OsFreebsd => Some(\".note.rustc\")\n     }\n }\n \n-pub fn read_meta_section_name(os: Os) -> &'static str {\n+pub fn read_meta_section_name(os: abi::Os) -> &'static str {\n     match os {\n-        OsMacos => \"__note.rustc\",\n-        OsiOS => \"__note.rustc\",\n-        OsWin32 => \".note.rustc\",\n-        OsLinux => \".note.rustc\",\n-        OsAndroid => \".note.rustc\",\n-        OsFreebsd => \".note.rustc\"\n+        abi::OsMacos => \"__note.rustc\",\n+        abi::OsiOS => \"__note.rustc\",\n+        abi::OsWin32 => \".note.rustc\",\n+        abi::OsLinux => \".note.rustc\",\n+        abi::OsAndroid => \".note.rustc\",\n+        abi::OsFreebsd => \".note.rustc\"\n     }\n }\n \n // A diagnostic function for dumping crate metadata to an output stream\n-pub fn list_file_metadata(os: Os, path: &Path,\n+pub fn list_file_metadata(os: abi::Os, path: &Path,\n                           out: &mut io::Writer) -> io::IoResult<()> {\n     match get_metadata_section(os, path) {\n         Ok(bytes) => decoder::list_crate_metadata(bytes.as_slice(), out),"}, {"sha": "3fec3cbd1bbc2f585e9fb968415245403dd98589", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/70a79a9e0527fab74d8c2d2b49886b41bdd878f5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70a79a9e0527fab74d8c2d2b49886b41bdd878f5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=70a79a9e0527fab74d8c2d2b49886b41bdd878f5", "patch": "@@ -35,7 +35,7 @@ use driver::driver::{CrateAnalysis, CrateTranslation};\n use lib::llvm::{ModuleRef, ValueRef, BasicBlockRef};\n use lib::llvm::{llvm, Vector};\n use lib;\n-use metadata::{csearch, encoder};\n+use metadata::{csearch, encoder, loader};\n use middle::lint;\n use middle::astencode;\n use middle::lang_items::{LangItem, ExchangeMallocFnLangItem, StartFnLangItem};\n@@ -2281,12 +2281,8 @@ pub fn write_metadata(cx: &CrateContext, krate: &ast::Crate) -> Vec<u8> {\n     });\n     unsafe {\n         llvm::LLVMSetInitializer(llglobal, llconst);\n-        cx.sess()\n-          .targ_cfg\n-          .target_strs\n-          .meta_sect_name\n-          .as_slice()\n-          .with_c_str(|buf| {\n+        let name = loader::meta_section_name(cx.sess().targ_cfg.os);\n+        name.unwrap_or(\"rust_metadata\").with_c_str(|buf| {\n             llvm::LLVMSetSection(llglobal, buf)\n         });\n     }"}, {"sha": "7ff020d6818e19a18faef99041bc6761ffea3aa7", "filename": "src/libsyntax/abi.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/70a79a9e0527fab74d8c2d2b49886b41bdd878f5/src%2Flibsyntax%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70a79a9e0527fab74d8c2d2b49886b41bdd878f5/src%2Flibsyntax%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fabi.rs?ref=70a79a9e0527fab74d8c2d2b49886b41bdd878f5", "patch": "@@ -159,6 +159,19 @@ impl fmt::Show for Abi {\n     }\n }\n \n+impl fmt::Show for Os {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        match *self {\n+            OsLinux => \"linux\".fmt(f),\n+            OsWin32 => \"win32\".fmt(f),\n+            OsMacos => \"macos\".fmt(f),\n+            OsiOS => \"ios\".fmt(f),\n+            OsAndroid => \"android\".fmt(f),\n+            OsFreebsd => \"freebsd\".fmt(f)\n+        }\n+    }\n+}\n+\n #[allow(non_snake_case_functions)]\n #[test]\n fn lookup_Rust() {"}]}