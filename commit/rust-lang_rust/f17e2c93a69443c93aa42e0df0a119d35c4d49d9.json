{"sha": "f17e2c93a69443c93aa42e0df0a119d35c4d49d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxN2UyYzkzYTY5NDQzYzkzYWE0MmUwZGYwYTExOWQzNWM0ZDQ5ZDk=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-05-16T04:56:33Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-05-22T20:31:02Z"}, "message": "Use `OnceCell` for predecessor cache", "tree": {"sha": "83fdbe0c4cd8c634e1af65c97874367d3cdc61a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83fdbe0c4cd8c634e1af65c97874367d3cdc61a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f17e2c93a69443c93aa42e0df0a119d35c4d49d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f17e2c93a69443c93aa42e0df0a119d35c4d49d9", "html_url": "https://github.com/rust-lang/rust/commit/f17e2c93a69443c93aa42e0df0a119d35c4d49d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f17e2c93a69443c93aa42e0df0a119d35c4d49d9/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c282c1c654901bd523774dd7ce2e8d4272d24911", "url": "https://api.github.com/repos/rust-lang/rust/commits/c282c1c654901bd523774dd7ce2e8d4272d24911", "html_url": "https://github.com/rust-lang/rust/commit/c282c1c654901bd523774dd7ce2e8d4272d24911"}], "stats": {"total": 24, "additions": 10, "deletions": 14}, "files": [{"sha": "36e92c71c07f4e3655fdfb723eac015f687460a2", "filename": "src/librustc_middle/mir/predecessors.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f17e2c93a69443c93aa42e0df0a119d35c4d49d9/src%2Flibrustc_middle%2Fmir%2Fpredecessors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f17e2c93a69443c93aa42e0df0a119d35c4d49d9/src%2Flibrustc_middle%2Fmir%2Fpredecessors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fpredecessors.rs?ref=f17e2c93a69443c93aa42e0df0a119d35c4d49d9", "patch": "@@ -1,7 +1,7 @@\n //! Lazily compute the reverse control-flow graph for the MIR.\n \n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n-use rustc_data_structures::sync::{Lock, Lrc};\n+use rustc_data_structures::sync::OnceCell;\n use rustc_index::vec::IndexVec;\n use rustc_serialize as serialize;\n use smallvec::SmallVec;\n@@ -13,37 +13,33 @@ pub type Predecessors = IndexVec<BasicBlock, SmallVec<[BasicBlock; 4]>>;\n \n #[derive(Clone, Debug)]\n pub(super) struct PredecessorCache {\n-    cache: Lock<Option<Lrc<Predecessors>>>,\n+    cache: OnceCell<Predecessors>,\n }\n \n impl PredecessorCache {\n     #[inline]\n     pub(super) fn new() -> Self {\n-        PredecessorCache { cache: Lock::new(None) }\n+        PredecessorCache { cache: OnceCell::new() }\n     }\n \n     /// Invalidates the predecessor cache.\n     ///\n     /// Invalidating the predecessor cache requires mutating the MIR, which in turn requires a\n     /// unique reference (`&mut`) to the `mir::Body`. Because of this, we can assume that all\n     /// callers of `invalidate` have a unique reference to the MIR and thus to the predecessor\n-    /// cache. This means we don't actually need to take a lock when `invalidate` is called.\n+    /// cache. This means we never need to do synchronization when `invalidate` is called.\n     #[inline]\n     pub(super) fn invalidate(&mut self) {\n-        *self.cache.get_mut() = None;\n+        self.cache = OnceCell::new();\n     }\n \n-    /// Returns a ref-counted smart pointer containing the predecessor graph for this MIR.\n-    ///\n-    /// We use ref-counting instead of a mapped `LockGuard` here to ensure that the lock for\n-    /// `cache` is only held inside this function. As long as no other locks are taken while\n-    /// computing the predecessor graph, deadlock is impossible.\n+    /// Returns the the predecessor graph for this MIR.\n     #[inline]\n     pub(super) fn compute(\n         &self,\n         basic_blocks: &IndexVec<BasicBlock, BasicBlockData<'_>>,\n-    ) -> Lrc<Predecessors> {\n-        Lrc::clone(self.cache.lock().get_or_insert_with(|| {\n+    ) -> &Predecessors {\n+        self.cache.get_or_init(|| {\n             let mut preds = IndexVec::from_elem(SmallVec::new(), basic_blocks);\n             for (bb, data) in basic_blocks.iter_enumerated() {\n                 if let Some(term) = &data.terminator {\n@@ -53,8 +49,8 @@ impl PredecessorCache {\n                 }\n             }\n \n-            Lrc::new(preds)\n-        }))\n+            preds\n+        })\n     }\n }\n "}]}