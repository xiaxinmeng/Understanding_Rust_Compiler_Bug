{"sha": "6f239a581a0acf8d1c3f26da68146c5c1ea7d4f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmMjM5YTU4MWEwYWNmOGQxYzNmMjZkYTY4MTQ2YzVjMWVhN2Q0ZjI=", "commit": {"author": {"name": "Matt Hooper", "email": "matthewjhooper94@gmail.com", "date": "2020-03-23T22:32:50Z"}, "committer": {"name": "Matt Hooper", "email": "matthewjhooper94@gmail.com", "date": "2020-03-24T22:22:41Z"}, "message": "Extension types and rendering", "tree": {"sha": "e055af89b00259f06192265ad1bc95662ef90041", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e055af89b00259f06192265ad1bc95662ef90041"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f239a581a0acf8d1c3f26da68146c5c1ea7d4f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f239a581a0acf8d1c3f26da68146c5c1ea7d4f2", "html_url": "https://github.com/rust-lang/rust/commit/6f239a581a0acf8d1c3f26da68146c5c1ea7d4f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f239a581a0acf8d1c3f26da68146c5c1ea7d4f2/comments", "author": {"login": "M-J-Hooper", "id": 13765376, "node_id": "MDQ6VXNlcjEzNzY1Mzc2", "avatar_url": "https://avatars.githubusercontent.com/u/13765376?v=4", "gravatar_id": "", "url": "https://api.github.com/users/M-J-Hooper", "html_url": "https://github.com/M-J-Hooper", "followers_url": "https://api.github.com/users/M-J-Hooper/followers", "following_url": "https://api.github.com/users/M-J-Hooper/following{/other_user}", "gists_url": "https://api.github.com/users/M-J-Hooper/gists{/gist_id}", "starred_url": "https://api.github.com/users/M-J-Hooper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/M-J-Hooper/subscriptions", "organizations_url": "https://api.github.com/users/M-J-Hooper/orgs", "repos_url": "https://api.github.com/users/M-J-Hooper/repos", "events_url": "https://api.github.com/users/M-J-Hooper/events{/privacy}", "received_events_url": "https://api.github.com/users/M-J-Hooper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "M-J-Hooper", "id": 13765376, "node_id": "MDQ6VXNlcjEzNzY1Mzc2", "avatar_url": "https://avatars.githubusercontent.com/u/13765376?v=4", "gravatar_id": "", "url": "https://api.github.com/users/M-J-Hooper", "html_url": "https://github.com/M-J-Hooper", "followers_url": "https://api.github.com/users/M-J-Hooper/followers", "following_url": "https://api.github.com/users/M-J-Hooper/following{/other_user}", "gists_url": "https://api.github.com/users/M-J-Hooper/gists{/gist_id}", "starred_url": "https://api.github.com/users/M-J-Hooper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/M-J-Hooper/subscriptions", "organizations_url": "https://api.github.com/users/M-J-Hooper/orgs", "repos_url": "https://api.github.com/users/M-J-Hooper/repos", "events_url": "https://api.github.com/users/M-J-Hooper/events{/privacy}", "received_events_url": "https://api.github.com/users/M-J-Hooper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a197abbc7aed53c42cac7e9e86787e44a5026291", "url": "https://api.github.com/repos/rust-lang/rust/commits/a197abbc7aed53c42cac7e9e86787e44a5026291", "html_url": "https://github.com/rust-lang/rust/commit/a197abbc7aed53c42cac7e9e86787e44a5026291"}], "stats": {"total": 43, "additions": 39, "deletions": 4}, "files": [{"sha": "37e0832208f4c46dc643553a1bebce2912f29263", "filename": "editors/code/package.json", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6f239a581a0acf8d1c3f26da68146c5c1ea7d4f2/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/6f239a581a0acf8d1c3f26da68146c5c1ea7d4f2/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=6f239a581a0acf8d1c3f26da68146c5c1ea7d4f2", "patch": "@@ -333,6 +333,11 @@\n                     \"default\": true,\n                     \"description\": \"Whether to show inlay type hints\"\n                 },\n+                \"rust-analyzer.inlayHints.chainingHints\": {\n+                    \"type\": \"boolean\",\n+                    \"default\": true,\n+                    \"description\": \"Whether to show inlay type hints for method chains\"\n+                },\n                 \"rust-analyzer.inlayHints.parameterHints\": {\n                     \"type\": \"boolean\",\n                     \"default\": true,"}, {"sha": "98f2f232f4613f5e82624eedbea103e80a20aa5a", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f239a581a0acf8d1c3f26da68146c5c1ea7d4f2/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/6f239a581a0acf8d1c3f26da68146c5c1ea7d4f2/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=6f239a581a0acf8d1c3f26da68146c5c1ea7d4f2", "patch": "@@ -32,6 +32,7 @@ export async function createClient(config: Config, serverPath: string): Promise<\n \n             inlayHintsType: config.inlayHints.typeHints,\n             inlayHintsParameter: config.inlayHints.parameterHints,\n+            inlayHintsChaining: config.inlayHints.chainingHints,\n             inlayHintsMaxLength: config.inlayHints.maxLength,\n \n             cargoWatchEnable: cargoWatchOpts.enable,"}, {"sha": "637aea27dae7c0bf33f57b45c2cdd26bf495f45c", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f239a581a0acf8d1c3f26da68146c5c1ea7d4f2/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/6f239a581a0acf8d1c3f26da68146c5c1ea7d4f2/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=6f239a581a0acf8d1c3f26da68146c5c1ea7d4f2", "patch": "@@ -88,6 +88,7 @@ export class Config {\n         return {\n             typeHints: this.cfg.get<boolean>(\"inlayHints.typeHints\")!,\n             parameterHints: this.cfg.get<boolean>(\"inlayHints.parameterHints\")!,\n+            chainingHints: this.cfg.get<boolean>(\"inlayHints.chainingHints\")!,\n             maxLength: this.cfg.get<null | number>(\"inlayHints.maxLength\")!,\n         };\n     }"}, {"sha": "542d1f3672bde767efc71fd6f73f18bf70ca127a", "filename": "editors/code/src/inlay_hints.ts", "status": "modified", "additions": 29, "deletions": 3, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6f239a581a0acf8d1c3f26da68146c5c1ea7d4f2/editors%2Fcode%2Fsrc%2Finlay_hints.ts", "raw_url": "https://github.com/rust-lang/rust/raw/6f239a581a0acf8d1c3f26da68146c5c1ea7d4f2/editors%2Fcode%2Fsrc%2Finlay_hints.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Finlay_hints.ts?ref=6f239a581a0acf8d1c3f26da68146c5c1ea7d4f2", "patch": "@@ -10,7 +10,11 @@ export function activateInlayHints(ctx: Ctx) {\n     const maybeUpdater = {\n         updater: null as null | HintsUpdater,\n         onConfigChange() {\n-            if (!ctx.config.inlayHints.typeHints && !ctx.config.inlayHints.parameterHints) {\n+            if (\n+                !ctx.config.inlayHints.typeHints &&\n+                !ctx.config.inlayHints.parameterHints &&\n+                !ctx.config.inlayHints.chainingHints\n+            ) {\n                 return this.dispose();\n             }\n             if (!this.updater) this.updater = new HintsUpdater(ctx);\n@@ -63,6 +67,22 @@ const paramHints = {\n     }\n };\n \n+const chainingHints = {\n+    decorationType: vscode.window.createTextEditorDecorationType({\n+        after: {\n+            color: new vscode.ThemeColor('rust_analyzer.inlayHint'),\n+            fontStyle: \"normal\",\n+        }\n+    }),\n+\n+    toDecoration(hint: ra.InlayHint.ChainingHint, conv: lc.Protocol2CodeConverter): vscode.DecorationOptions {\n+        return {\n+            range: conv.asRange(hint.range),\n+            renderOptions: { after: { contentText: ` ${hint.label}` } }\n+        };\n+    }\n+};\n+\n class HintsUpdater implements Disposable {\n     private sourceFiles = new Map<string, RustSourceFile>(); // map Uri -> RustSourceFile\n     private readonly disposables: Disposable[] = [];\n@@ -95,7 +115,7 @@ class HintsUpdater implements Disposable {\n \n     dispose() {\n         this.sourceFiles.forEach(file => file.inlaysRequest?.cancel());\n-        this.ctx.visibleRustEditors.forEach(editor => this.renderDecorations(editor, { param: [], type: [] }));\n+        this.ctx.visibleRustEditors.forEach(editor => this.renderDecorations(editor, { param: [], type: [], chaining: [] }));\n         this.disposables.forEach(d => d.dispose());\n     }\n \n@@ -154,10 +174,11 @@ class HintsUpdater implements Disposable {\n     private renderDecorations(editor: RustEditor, decorations: InlaysDecorations) {\n         editor.setDecorations(typeHints.decorationType, decorations.type);\n         editor.setDecorations(paramHints.decorationType, decorations.param);\n+        editor.setDecorations(chainingHints.decorationType, decorations.chaining);\n     }\n \n     private hintsToDecorations(hints: ra.InlayHint[]): InlaysDecorations {\n-        const decorations: InlaysDecorations = { type: [], param: [] };\n+        const decorations: InlaysDecorations = { type: [], param: [], chaining: [] };\n         const conv = this.ctx.client.protocol2CodeConverter;\n \n         for (const hint of hints) {\n@@ -170,6 +191,10 @@ class HintsUpdater implements Disposable {\n                     decorations.param.push(paramHints.toDecoration(hint, conv));\n                     continue;\n                 }\n+                case ra.InlayHint.Kind.ChainingHint: {\n+                    decorations.chaining.push(chainingHints.toDecoration(hint, conv));\n+                    continue;\n+                }\n             }\n         }\n         return decorations;\n@@ -196,6 +221,7 @@ class HintsUpdater implements Disposable {\n interface InlaysDecorations {\n     type: vscode.DecorationOptions[];\n     param: vscode.DecorationOptions[];\n+    chaining: vscode.DecorationOptions[];\n }\n \n interface RustSourceFile {"}, {"sha": "400ac3714544332384a4a684d580ca06ec2f782a", "filename": "editors/code/src/rust-analyzer-api.ts", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f239a581a0acf8d1c3f26da68146c5c1ea7d4f2/editors%2Fcode%2Fsrc%2Frust-analyzer-api.ts", "raw_url": "https://github.com/rust-lang/rust/raw/6f239a581a0acf8d1c3f26da68146c5c1ea7d4f2/editors%2Fcode%2Fsrc%2Frust-analyzer-api.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Frust-analyzer-api.ts?ref=6f239a581a0acf8d1c3f26da68146c5c1ea7d4f2", "patch": "@@ -86,19 +86,21 @@ export interface Runnable {\n }\n export const runnables = request<RunnablesParams, Vec<Runnable>>(\"runnables\");\n \n-export type InlayHint = InlayHint.TypeHint | InlayHint.ParamHint;\n+export type InlayHint = InlayHint.TypeHint | InlayHint.ParamHint | InlayHint.ChainingHint;\n \n export namespace InlayHint {\n     export const enum Kind {\n         TypeHint = \"TypeHint\",\n         ParamHint = \"ParameterHint\",\n+        ChainingHint = \"ChainingHint\",\n     }\n     interface Common {\n         range: lc.Range;\n         label: string;\n     }\n     export type TypeHint = Common & { kind: Kind.TypeHint };\n     export type ParamHint = Common & { kind: Kind.ParamHint };\n+    export type ChainingHint = Common & { kind: Kind.ChainingHint };\n }\n export interface InlayHintsParams {\n     textDocument: lc.TextDocumentIdentifier;"}]}