{"sha": "ef87e58993ace9e607a43b5581d40b4c0a2e71f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmODdlNTg5OTNhY2U5ZTYwN2E0M2I1NTgxZDQwYjRjMGEyZTcxZjY=", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2021-02-26T16:50:12Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2021-02-26T21:24:25Z"}, "message": "Fix `manual_map`: don't lint when partially moved values are used.\nFix `manual_map`: don't lint when `return`, `break`, and `continue` are used.", "tree": {"sha": "1bbb7fa7b7c3237d8ba140eaaef78aa8437ac2f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1bbb7fa7b7c3237d8ba140eaaef78aa8437ac2f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef87e58993ace9e607a43b5581d40b4c0a2e71f6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nComment: Created with Krypton\n\niF4EABYKAAYFAmA5Zw0ACgkQ2lnoZDo37QarXgEA+fM/e3/cSJVhAaKJQj5biU9x\nIrfiWMrclS4fwi98xb4BAILcyvhumN4Rywu25oaCHUQYh11tM2gT8Mz0HOD0+qEC\n=pq4D\n-----END PGP SIGNATURE-----", "payload": "tree 1bbb7fa7b7c3237d8ba140eaaef78aa8437ac2f6\nparent 6343446b892a04601e8c248726c4c22dfea64d63\nauthor Jason Newcomb <jsnewcomb@pm.me> 1614358212 -0500\ncommitter Jason Newcomb <jsnewcomb@pm.me> 1614374665 -0500\n\nFix `manual_map`: don't lint when partially moved values are used.\nFix `manual_map`: don't lint when `return`, `break`, and `continue` are used.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef87e58993ace9e607a43b5581d40b4c0a2e71f6", "html_url": "https://github.com/rust-lang/rust/commit/ef87e58993ace9e607a43b5581d40b4c0a2e71f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef87e58993ace9e607a43b5581d40b4c0a2e71f6/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6343446b892a04601e8c248726c4c22dfea64d63", "url": "https://api.github.com/repos/rust-lang/rust/commits/6343446b892a04601e8c248726c4c22dfea64d63", "html_url": "https://github.com/rust-lang/rust/commit/6343446b892a04601e8c248726c4c22dfea64d63"}], "stats": {"total": 190, "additions": 168, "deletions": 22}, "files": [{"sha": "bc6544ee79eaea028df91c95a4b066ea2ea505b2", "filename": "clippy_lints/src/manual_map.rs", "status": "modified", "additions": 51, "deletions": 3, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/ef87e58993ace9e607a43b5581d40b4c0a2e71f6/clippy_lints%2Fsrc%2Fmanual_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef87e58993ace9e607a43b5581d40b4c0a2e71f6/clippy_lints%2Fsrc%2Fmanual_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_map.rs?ref=ef87e58993ace9e607a43b5581d40b4c0a2e71f6", "patch": "@@ -2,13 +2,17 @@ use crate::{\n     map_unit_fn::OPTION_MAP_UNIT_FN,\n     matches::MATCH_AS_REF,\n     utils::{\n-        is_allowed, is_type_diagnostic_item, match_def_path, match_var, paths, peel_hir_expr_refs,\n-        peel_mid_ty_refs_is_mutable, snippet_with_applicability, span_lint_and_sugg,\n+        can_partially_move_ty, is_allowed, is_type_diagnostic_item, match_def_path, match_var, paths,\n+        peel_hir_expr_refs, peel_mid_ty_refs_is_mutable, snippet_with_applicability, span_lint_and_sugg,\n     },\n };\n use rustc_ast::util::parser::PREC_POSTFIX;\n use rustc_errors::Applicability;\n-use rustc_hir::{Arm, BindingAnnotation, Block, Expr, ExprKind, Mutability, Pat, PatKind, QPath};\n+use rustc_hir::{\n+    def::Res,\n+    intravisit::{walk_expr, ErasedMap, NestedVisitorMap, Visitor},\n+    Arm, BindingAnnotation, Block, Expr, ExprKind, Mutability, Pat, PatKind, Path, QPath,\n+};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -99,6 +103,10 @@ impl LateLintPass<'_> for ManualMap {\n                 return;\n             }\n \n+            if !can_move_expr_to_closure(cx, some_expr) {\n+                return;\n+            }\n+\n             // Determine which binding mode to use.\n             let explicit_ref = some_pat.contains_explicit_ref_binding();\n             let binding_ref = explicit_ref.or_else(|| (ty_ref_count != pat_ref_count).then(|| ty_mutability));\n@@ -171,6 +179,46 @@ impl LateLintPass<'_> for ManualMap {\n     }\n }\n \n+// Checks if the expression can be moved into a closure as is.\n+fn can_move_expr_to_closure(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) -> bool {\n+    struct V<'cx, 'tcx> {\n+        cx: &'cx LateContext<'tcx>,\n+        make_closure: bool,\n+    }\n+    impl Visitor<'tcx> for V<'_, 'tcx> {\n+        type Map = ErasedMap<'tcx>;\n+        fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+            NestedVisitorMap::None\n+        }\n+\n+        fn visit_expr(&mut self, e: &'tcx Expr<'_>) {\n+            match e.kind {\n+                ExprKind::Break(..) | ExprKind::Continue(_) | ExprKind::Ret(_) => {\n+                    self.make_closure = false;\n+                },\n+                // Accessing a field of a local value can only be done if the type isn't\n+                // partially moved.\n+                ExprKind::Field(base_expr, _)\n+                    if matches!(\n+                        base_expr.kind,\n+                        ExprKind::Path(QPath::Resolved(_, Path { res: Res::Local(_), .. }))\n+                    ) && can_partially_move_ty(self.cx, self.cx.typeck_results().expr_ty(base_expr)) =>\n+                {\n+                    // TODO: check if the local has been partially moved. Assume it has for now.\n+                    self.make_closure = false;\n+                    return;\n+                }\n+                _ => (),\n+            };\n+            walk_expr(self, e);\n+        }\n+    }\n+\n+    let mut v = V { cx, make_closure: true };\n+    v.visit_expr(expr);\n+    v.make_closure\n+}\n+\n // Checks whether the expression could be passed as a function, or whether a closure is needed.\n // Returns the function to be passed to `map` if it exists.\n fn can_pass_as_func(cx: &LateContext<'tcx>, binding: Ident, expr: &'tcx Expr<'_>) -> Option<&'tcx Expr<'tcx>> {"}, {"sha": "055239435119818d383229a1892cc6ec15da927b", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ef87e58993ace9e607a43b5581d40b4c0a2e71f6/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef87e58993ace9e607a43b5581d40b4c0a2e71f6/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=ef87e58993ace9e607a43b5581d40b4c0a2e71f6", "patch": "@@ -456,6 +456,18 @@ pub fn has_drop<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n     }\n }\n \n+/// Checks whether a type can be partially moved.\n+pub fn can_partially_move_ty(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n+    if has_drop(cx, ty) || is_copy(cx, ty) {\n+        return false;\n+    }\n+    match ty.kind() {\n+        ty::Param(_) => false,\n+        ty::Adt(def, subs) => def.all_fields().any(|f| !is_copy(cx, f.ty(cx.tcx, subs))),\n+        _ => true,\n+    }\n+}\n+\n /// Returns the method names and argument list of nested method call expressions that make up\n /// `expr`. method/span lists are sorted with the most recent call first.\n pub fn method_calls<'tcx>("}, {"sha": "428aac4394079c28ef14e9d1996c0bab8caff60d", "filename": "tests/ui/manual_map_option.fixed", "status": "modified", "additions": 44, "deletions": 1, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/ef87e58993ace9e607a43b5581d40b4c0a2e71f6/tests%2Fui%2Fmanual_map_option.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ef87e58993ace9e607a43b5581d40b4c0a2e71f6/tests%2Fui%2Fmanual_map_option.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_map_option.fixed?ref=ef87e58993ace9e607a43b5581d40b4c0a2e71f6", "patch": "@@ -1,7 +1,13 @@\n // run-rustfix\n \n #![warn(clippy::manual_map)]\n-#![allow(clippy::no_effect, clippy::map_identity, clippy::unit_arg, clippy::match_ref_pats)]\n+#![allow(\n+    clippy::no_effect,\n+    clippy::map_identity,\n+    clippy::unit_arg,\n+    clippy::match_ref_pats,\n+    dead_code\n+)]\n \n fn main() {\n     Some(0).map(|_| 2);\n@@ -67,4 +73,41 @@ fn main() {\n         Some(Some((x, 1))) => Some(x),\n         _ => None,\n     };\n+\n+    // #6795\n+    fn f1() -> Result<(), ()> {\n+        let _ = match Some(Ok(())) {\n+            Some(x) => Some(x?),\n+            None => None,\n+        };\n+        Ok(())\n+    }\n+\n+    for &x in Some(Some(true)).iter() {\n+        let _ = match x {\n+            Some(x) => Some(if x { continue } else { x }),\n+            None => None,\n+        };\n+    }\n+\n+    // #6797\n+    let x1 = (Some(String::new()), 0);\n+    let x2 = x1.0;\n+    match x2 {\n+        Some(x) => Some((x, x1.1)),\n+        None => None,\n+    };\n+\n+    struct S1 {\n+        x: Option<String>,\n+        y: u32,\n+    }\n+    impl S1 {\n+        fn f(self) -> Option<(String, u32)> {\n+            match self.x {\n+                Some(x) => Some((x, self.y)),\n+                None => None,\n+            }\n+        }\n+    }\n }"}, {"sha": "0f4a5bb2eb76d675a70ef4ffa54ddedeb3de03e2", "filename": "tests/ui/manual_map_option.rs", "status": "modified", "additions": 44, "deletions": 1, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/ef87e58993ace9e607a43b5581d40b4c0a2e71f6/tests%2Fui%2Fmanual_map_option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef87e58993ace9e607a43b5581d40b4c0a2e71f6/tests%2Fui%2Fmanual_map_option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_map_option.rs?ref=ef87e58993ace9e607a43b5581d40b4c0a2e71f6", "patch": "@@ -1,7 +1,13 @@\n // run-rustfix\n \n #![warn(clippy::manual_map)]\n-#![allow(clippy::no_effect, clippy::map_identity, clippy::unit_arg, clippy::match_ref_pats)]\n+#![allow(\n+    clippy::no_effect,\n+    clippy::map_identity,\n+    clippy::unit_arg,\n+    clippy::match_ref_pats,\n+    dead_code\n+)]\n \n fn main() {\n     match Some(0) {\n@@ -119,4 +125,41 @@ fn main() {\n         Some(Some((x, 1))) => Some(x),\n         _ => None,\n     };\n+\n+    // #6795\n+    fn f1() -> Result<(), ()> {\n+        let _ = match Some(Ok(())) {\n+            Some(x) => Some(x?),\n+            None => None,\n+        };\n+        Ok(())\n+    }\n+\n+    for &x in Some(Some(true)).iter() {\n+        let _ = match x {\n+            Some(x) => Some(if x { continue } else { x }),\n+            None => None,\n+        };\n+    }\n+\n+    // #6797\n+    let x1 = (Some(String::new()), 0);\n+    let x2 = x1.0;\n+    match x2 {\n+        Some(x) => Some((x, x1.1)),\n+        None => None,\n+    };\n+\n+    struct S1 {\n+        x: Option<String>,\n+        y: u32,\n+    }\n+    impl S1 {\n+        fn f(self) -> Option<(String, u32)> {\n+            match self.x {\n+                Some(x) => Some((x, self.y)),\n+                None => None,\n+            }\n+        }\n+    }\n }"}, {"sha": "49a51737784333b882eb3db91a851de80792b5fb", "filename": "tests/ui/manual_map_option.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ef87e58993ace9e607a43b5581d40b4c0a2e71f6/tests%2Fui%2Fmanual_map_option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef87e58993ace9e607a43b5581d40b4c0a2e71f6/tests%2Fui%2Fmanual_map_option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_map_option.stderr?ref=ef87e58993ace9e607a43b5581d40b4c0a2e71f6", "patch": "@@ -1,5 +1,5 @@\n error: manual implementation of `Option::map`\n-  --> $DIR/manual_map_option.rs:7:5\n+  --> $DIR/manual_map_option.rs:13:5\n    |\n LL | /     match Some(0) {\n LL | |         Some(_) => Some(2),\n@@ -10,7 +10,7 @@ LL | |     };\n    = note: `-D clippy::manual-map` implied by `-D warnings`\n \n error: manual implementation of `Option::map`\n-  --> $DIR/manual_map_option.rs:12:5\n+  --> $DIR/manual_map_option.rs:18:5\n    |\n LL | /     match Some(0) {\n LL | |         Some(x) => Some(x + 1),\n@@ -19,7 +19,7 @@ LL | |     };\n    | |_____^ help: try this: `Some(0).map(|x| x + 1)`\n \n error: manual implementation of `Option::map`\n-  --> $DIR/manual_map_option.rs:17:5\n+  --> $DIR/manual_map_option.rs:23:5\n    |\n LL | /     match Some(\"\") {\n LL | |         Some(x) => Some(x.is_empty()),\n@@ -28,7 +28,7 @@ LL | |     };\n    | |_____^ help: try this: `Some(\"\").map(|x| x.is_empty())`\n \n error: manual implementation of `Option::map`\n-  --> $DIR/manual_map_option.rs:22:5\n+  --> $DIR/manual_map_option.rs:28:5\n    |\n LL | /     if let Some(x) = Some(0) {\n LL | |         Some(!x)\n@@ -38,7 +38,7 @@ LL | |     };\n    | |_____^ help: try this: `Some(0).map(|x| !x)`\n \n error: manual implementation of `Option::map`\n-  --> $DIR/manual_map_option.rs:29:5\n+  --> $DIR/manual_map_option.rs:35:5\n    |\n LL | /     match Some(0) {\n LL | |         Some(x) => { Some(std::convert::identity(x)) }\n@@ -47,7 +47,7 @@ LL | |     };\n    | |_____^ help: try this: `Some(0).map(std::convert::identity)`\n \n error: manual implementation of `Option::map`\n-  --> $DIR/manual_map_option.rs:34:5\n+  --> $DIR/manual_map_option.rs:40:5\n    |\n LL | /     match Some(&String::new()) {\n LL | |         Some(x) => Some(str::len(x)),\n@@ -56,7 +56,7 @@ LL | |     };\n    | |_____^ help: try this: `Some(&String::new()).map(|x| str::len(x))`\n \n error: manual implementation of `Option::map`\n-  --> $DIR/manual_map_option.rs:44:5\n+  --> $DIR/manual_map_option.rs:50:5\n    |\n LL | /     match &Some([0, 1]) {\n LL | |         Some(x) => Some(x[0]),\n@@ -65,7 +65,7 @@ LL | |     };\n    | |_____^ help: try this: `Some([0, 1]).as_ref().map(|x| x[0])`\n \n error: manual implementation of `Option::map`\n-  --> $DIR/manual_map_option.rs:49:5\n+  --> $DIR/manual_map_option.rs:55:5\n    |\n LL | /     match &Some(0) {\n LL | |         &Some(x) => Some(x * 2),\n@@ -74,7 +74,7 @@ LL | |     };\n    | |_____^ help: try this: `Some(0).map(|x| x * 2)`\n \n error: manual implementation of `Option::map`\n-  --> $DIR/manual_map_option.rs:54:5\n+  --> $DIR/manual_map_option.rs:60:5\n    |\n LL | /     match Some(String::new()) {\n LL | |         Some(ref x) => Some(x.is_empty()),\n@@ -83,7 +83,7 @@ LL | |     };\n    | |_____^ help: try this: `Some(String::new()).as_ref().map(|x| x.is_empty())`\n \n error: manual implementation of `Option::map`\n-  --> $DIR/manual_map_option.rs:59:5\n+  --> $DIR/manual_map_option.rs:65:5\n    |\n LL | /     match &&Some(String::new()) {\n LL | |         Some(x) => Some(x.len()),\n@@ -92,7 +92,7 @@ LL | |     };\n    | |_____^ help: try this: `Some(String::new()).as_ref().map(|x| x.len())`\n \n error: manual implementation of `Option::map`\n-  --> $DIR/manual_map_option.rs:64:5\n+  --> $DIR/manual_map_option.rs:70:5\n    |\n LL | /     match &&Some(0) {\n LL | |         &&Some(x) => Some(x + x),\n@@ -101,7 +101,7 @@ LL | |     };\n    | |_____^ help: try this: `Some(0).map(|x| x + x)`\n \n error: manual implementation of `Option::map`\n-  --> $DIR/manual_map_option.rs:77:9\n+  --> $DIR/manual_map_option.rs:83:9\n    |\n LL | /         match &mut Some(String::new()) {\n LL | |             Some(x) => Some(x.push_str(\"\")),\n@@ -110,7 +110,7 @@ LL | |         };\n    | |_________^ help: try this: `Some(String::new()).as_mut().map(|x| x.push_str(\"\"))`\n \n error: manual implementation of `Option::map`\n-  --> $DIR/manual_map_option.rs:83:5\n+  --> $DIR/manual_map_option.rs:89:5\n    |\n LL | /     match &mut Some(String::new()) {\n LL | |         Some(ref x) => Some(x.len()),\n@@ -119,7 +119,7 @@ LL | |     };\n    | |_____^ help: try this: `Some(String::new()).as_ref().map(|x| x.len())`\n \n error: manual implementation of `Option::map`\n-  --> $DIR/manual_map_option.rs:88:5\n+  --> $DIR/manual_map_option.rs:94:5\n    |\n LL | /     match &mut &Some(String::new()) {\n LL | |         Some(x) => Some(x.is_empty()),\n@@ -128,7 +128,7 @@ LL | |     };\n    | |_____^ help: try this: `Some(String::new()).as_ref().map(|x| x.is_empty())`\n \n error: manual implementation of `Option::map`\n-  --> $DIR/manual_map_option.rs:93:5\n+  --> $DIR/manual_map_option.rs:99:5\n    |\n LL | /     match Some((0, 1, 2)) {\n LL | |         Some((x, y, z)) => Some(x + y + z),\n@@ -137,7 +137,7 @@ LL | |     };\n    | |_____^ help: try this: `Some((0, 1, 2)).map(|(x, y, z)| x + y + z)`\n \n error: manual implementation of `Option::map`\n-  --> $DIR/manual_map_option.rs:98:5\n+  --> $DIR/manual_map_option.rs:104:5\n    |\n LL | /     match Some([1, 2, 3]) {\n LL | |         Some([first, ..]) => Some(first),\n@@ -146,7 +146,7 @@ LL | |     };\n    | |_____^ help: try this: `Some([1, 2, 3]).map(|[first, ..]| first)`\n \n error: manual implementation of `Option::map`\n-  --> $DIR/manual_map_option.rs:103:5\n+  --> $DIR/manual_map_option.rs:109:5\n    |\n LL | /     match &Some((String::new(), \"test\")) {\n LL | |         Some((x, y)) => Some((y, x)),"}]}