{"sha": "af6298d590785088aad92f817ce07dfd6cdebdd0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmNjI5OGQ1OTA3ODUwODhhYWQ5MmY4MTdjZTA3ZGZkNmNkZWJkZDA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-24T12:43:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-24T12:43:13Z"}, "message": "Auto merge of #44011 - TobiasSchaffner:improved_target_spec_clean, r=alexcrichton\n\nL4Re Target: Add the needed Libraries and locate them\n\nAdd the libraries and objects that have to be linked to a get working L4Re Binary using pre- and post-link-args. Additionaly some ld commands had to be passed.\n\n* L4Re libraries and objects will be located by an environment variable.\n* gcc libraries and objects will be located using a gcc call.\n\nGCC is mandatory for this target, that might need documentation somewhere. As soon as something mandatory cannot be found, the compiler will panic. This is intended, because the functions involved don't allow the usage of a Result type. libgcc_eh is now passed using `-l` and crtbeginT.o and crtend.o are now located using `gcc -print-filename`.", "tree": {"sha": "9fbb2c1a994beb192d5ccdb6d6c260fc69911543", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9fbb2c1a994beb192d5ccdb6d6c260fc69911543"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af6298d590785088aad92f817ce07dfd6cdebdd0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af6298d590785088aad92f817ce07dfd6cdebdd0", "html_url": "https://github.com/rust-lang/rust/commit/af6298d590785088aad92f817ce07dfd6cdebdd0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af6298d590785088aad92f817ce07dfd6cdebdd0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a125ec918fc228fc20da4642d17bc178a99a5d72", "url": "https://api.github.com/repos/rust-lang/rust/commits/a125ec918fc228fc20da4642d17bc178a99a5d72", "html_url": "https://github.com/rust-lang/rust/commit/a125ec918fc228fc20da4642d17bc178a99a5d72"}, {"sha": "c60fc4bd581b955287c2f9e97e1d092fbdab58f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/c60fc4bd581b955287c2f9e97e1d092fbdab58f1", "html_url": "https://github.com/rust-lang/rust/commit/c60fc4bd581b955287c2f9e97e1d092fbdab58f1"}], "stats": {"total": 62, "additions": 56, "deletions": 6}, "files": [{"sha": "31d428d2668395e4830ae934ec12495617abd241", "filename": "src/librustc_back/target/l4re_base.rs", "status": "modified", "additions": 55, "deletions": 5, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/af6298d590785088aad92f817ce07dfd6cdebdd0/src%2Flibrustc_back%2Ftarget%2Fl4re_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6298d590785088aad92f817ce07dfd6cdebdd0/src%2Flibrustc_back%2Ftarget%2Fl4re_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fl4re_base.rs?ref=af6298d590785088aad92f817ce07dfd6cdebdd0", "patch": "@@ -12,21 +12,71 @@ use PanicStrategy;\n use LinkerFlavor;\n use target::{LinkArgs, TargetOptions};\n use std::default::Default;\n+use std::env;\n+use std::process::Command;\n \n-pub fn opts() -> TargetOptions {\n+// Use GCC to locate code for crt* libraries from the host, not from L4Re. Note\n+// that a few files also come from L4Re, for these, the function shouldn't be\n+// used. This uses GCC for the location of the file, but GCC is required for L4Re anyway.\n+fn get_path_or(filename: &str) -> String {\n+    let child = Command::new(\"gcc\")\n+        .arg(format!(\"-print-file-name={}\", filename)).output()\n+        .expect(\"Failed to execute GCC\");\n+    String::from_utf8(child.stdout)\n+        .expect(\"Couldn't read path from GCC\").trim().into()\n+}\n+\n+pub fn opts() -> Result<TargetOptions, String> {\n+    let l4re_lib_path = env::var_os(\"L4RE_LIBDIR\").ok_or(\"Unable to find L4Re \\\n+        library directory: L4RE_LIBDIR not set.\")?.into_string().unwrap();\n     let mut pre_link_args = LinkArgs::new();\n     pre_link_args.insert(LinkerFlavor::Ld, vec![\n-            \"-nostdlib\".to_string(),\n+        format!(\"-T{}/main_stat.ld\", l4re_lib_path),\n+        \"--defsym=__executable_start=0x01000000\".to_string(),\n+        \"--defsym=__L4_KIP_ADDR__=0x6ffff000\".to_string(),\n+        format!(\"{}/crt1.o\", l4re_lib_path),\n+        format!(\"{}/crti.o\", l4re_lib_path),\n+        get_path_or(\"crtbeginT.o\"),\n+    ]);\n+    let mut post_link_args = LinkArgs::new();\n+    post_link_args.insert(LinkerFlavor::Ld, vec![\n+        format!(\"{}/l4f/libpthread.a\", l4re_lib_path),\n+        format!(\"{}/l4f/libc_be_sig.a\", l4re_lib_path),\n+        format!(\"{}/l4f/libc_be_sig_noop.a\", l4re_lib_path),\n+        format!(\"{}/l4f/libc_be_socket_noop.a\", l4re_lib_path),\n+        format!(\"{}/l4f/libc_be_fs_noop.a\", l4re_lib_path),\n+        format!(\"{}/l4f/libc_be_sem_noop.a\", l4re_lib_path),\n+        format!(\"{}/l4f/libl4re-vfs.o.a\", l4re_lib_path),\n+        format!(\"{}/l4f/lib4re.a\", l4re_lib_path),\n+        format!(\"{}/l4f/lib4re-util.a\", l4re_lib_path),\n+        format!(\"{}/l4f/libc_support_misc.a\", l4re_lib_path),\n+        format!(\"{}/l4f/libsupc++.a\", l4re_lib_path),\n+        format!(\"{}/l4f/lib4shmc.a\", l4re_lib_path),\n+        format!(\"{}/l4f/lib4re-c.a\", l4re_lib_path),\n+        format!(\"{}/l4f/lib4re-c-util.a\", l4re_lib_path),\n+        get_path_or(\"libgcc_eh.a\"),\n+        format!(\"{}/l4f/libdl.a\", l4re_lib_path),\n+        \"--start-group\".to_string(),\n+        format!(\"{}/l4f/libl4util.a\", l4re_lib_path),\n+        format!(\"{}/l4f/libc_be_l4re.a\", l4re_lib_path),\n+        format!(\"{}/l4f/libuc_c.a\", l4re_lib_path),\n+        format!(\"{}/l4f/libc_be_l4refile.a\", l4re_lib_path),\n+        \"--end-group\".to_string(),\n+        format!(\"{}/l4f/libl4sys.a\", l4re_lib_path),\n+        \"-gc-sections\".to_string(),\n+        get_path_or(\"crtend.o\"),\n+        format!(\"{}/crtn.o\", l4re_lib_path),\n     ]);\n \n-    TargetOptions {\n+    Ok(TargetOptions {\n         executables: true,\n         has_elf_tls: false,\n-        exe_allocation_crate: Some(\"alloc_system\".to_string()),\n+        exe_allocation_crate: None,\n         panic_strategy: PanicStrategy::Abort,\n         linker: \"ld\".to_string(),\n         pre_link_args,\n+        post_link_args,\n         target_family: Some(\"unix\".to_string()),\n         .. Default::default()\n-    }\n+    })\n }"}, {"sha": "99d3171e1c0e0f9dc1eef6f7d616dc9e5c28f77c", "filename": "src/librustc_back/target/x86_64_unknown_l4re_uclibc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af6298d590785088aad92f817ce07dfd6cdebdd0/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_l4re_uclibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6298d590785088aad92f817ce07dfd6cdebdd0/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_l4re_uclibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_l4re_uclibc.rs?ref=af6298d590785088aad92f817ce07dfd6cdebdd0", "patch": "@@ -12,7 +12,7 @@ use LinkerFlavor;\n use target::{Target, TargetResult};\n \n pub fn target() -> TargetResult {\n-    let mut base = super::l4re_base::opts();\n+    let mut base = super::l4re_base::opts()?;\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n "}]}