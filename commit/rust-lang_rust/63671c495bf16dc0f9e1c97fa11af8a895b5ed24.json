{"sha": "63671c495bf16dc0f9e1c97fa11af8a895b5ed24", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzNjcxYzQ5NWJmMTZkYzBmOWUxYzk3ZmExMWFmOGE4OTViNWVkMjQ=", "commit": {"author": {"name": "Andrea Corradi", "email": "andreac@unstable.it", "date": "2016-08-28T10:57:38Z"}, "committer": {"name": "Andrea Corradi", "email": "andreac@unstable.it", "date": "2016-09-02T20:28:26Z"}, "message": "Update E0496 to new format", "tree": {"sha": "f6e76a4a79080ef8621e8f286357515802d27296", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6e76a4a79080ef8621e8f286357515802d27296"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63671c495bf16dc0f9e1c97fa11af8a895b5ed24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63671c495bf16dc0f9e1c97fa11af8a895b5ed24", "html_url": "https://github.com/rust-lang/rust/commit/63671c495bf16dc0f9e1c97fa11af8a895b5ed24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63671c495bf16dc0f9e1c97fa11af8a895b5ed24/comments", "author": {"login": "acrrd", "id": 1222231, "node_id": "MDQ6VXNlcjEyMjIyMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1222231?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acrrd", "html_url": "https://github.com/acrrd", "followers_url": "https://api.github.com/users/acrrd/followers", "following_url": "https://api.github.com/users/acrrd/following{/other_user}", "gists_url": "https://api.github.com/users/acrrd/gists{/gist_id}", "starred_url": "https://api.github.com/users/acrrd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acrrd/subscriptions", "organizations_url": "https://api.github.com/users/acrrd/orgs", "repos_url": "https://api.github.com/users/acrrd/repos", "events_url": "https://api.github.com/users/acrrd/events{/privacy}", "received_events_url": "https://api.github.com/users/acrrd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "acrrd", "id": 1222231, "node_id": "MDQ6VXNlcjEyMjIyMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1222231?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acrrd", "html_url": "https://github.com/acrrd", "followers_url": "https://api.github.com/users/acrrd/followers", "following_url": "https://api.github.com/users/acrrd/following{/other_user}", "gists_url": "https://api.github.com/users/acrrd/gists{/gist_id}", "starred_url": "https://api.github.com/users/acrrd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acrrd/subscriptions", "organizations_url": "https://api.github.com/users/acrrd/orgs", "repos_url": "https://api.github.com/users/acrrd/repos", "events_url": "https://api.github.com/users/acrrd/events{/privacy}", "received_events_url": "https://api.github.com/users/acrrd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "689c6c48ecd3d89d120c6aecf8b69222920e4520", "url": "https://api.github.com/repos/rust-lang/rust/commits/689c6c48ecd3d89d120c6aecf8b69222920e4520", "html_url": "https://github.com/rust-lang/rust/commit/689c6c48ecd3d89d120c6aecf8b69222920e4520"}], "stats": {"total": 118, "additions": 69, "deletions": 49}, "files": [{"sha": "747f6982ad79dafc5d6a175f3077f067678ebea1", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/63671c495bf16dc0f9e1c97fa11af8a895b5ed24/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63671c495bf16dc0f9e1c97fa11af8a895b5ed24/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=63671c495bf16dc0f9e1c97fa11af8a895b5ed24", "patch": "@@ -395,9 +395,9 @@ fn signal_shadowing_problem(sess: &Session, name: ast::Name, orig: Original, sha\n                                         {} name that is already in scope\",\n                                        shadower.kind.desc(), name, orig.kind.desc()))\n     };\n-    err.span_note(orig.span,\n-                  &format!(\"shadowed {} `{}` declared here\",\n-                           orig.kind.desc(), name));\n+    err.span_label(orig.span, &\"first declared here\");\n+    err.span_label(shadower.span,\n+                   &format!(\"lifetime {} already in scope\", name));\n     err.emit();\n }\n "}, {"sha": "8aeeeebcb56768a03dbb53a4a4afa59173c1eaf3", "filename": "src/test/compile-fail/E0496.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63671c495bf16dc0f9e1c97fa11af8a895b5ed24/src%2Ftest%2Fcompile-fail%2FE0496.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63671c495bf16dc0f9e1c97fa11af8a895b5ed24/src%2Ftest%2Fcompile-fail%2FE0496.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0496.rs?ref=63671c495bf16dc0f9e1c97fa11af8a895b5ed24", "patch": "@@ -13,7 +13,9 @@ struct Foo<'a> {\n }\n \n impl<'a> Foo<'a> {\n+   //~^  NOTE first declared here\n     fn f<'a>(x: &'a i32) { //~ ERROR E0496\n+       //~^ NOTE lifetime 'a already in scope\n     }\n }\n "}, {"sha": "ca18ca3796a10923dd7e303ac6044fc426aaa2e7", "filename": "src/test/compile-fail/loops-reject-duplicate-labels-2.rs", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/63671c495bf16dc0f9e1c97fa11af8a895b5ed24/src%2Ftest%2Fcompile-fail%2Floops-reject-duplicate-labels-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63671c495bf16dc0f9e1c97fa11af8a895b5ed24/src%2Ftest%2Fcompile-fail%2Floops-reject-duplicate-labels-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Floops-reject-duplicate-labels-2.rs?ref=63671c495bf16dc0f9e1c97fa11af8a895b5ed24", "patch": "@@ -19,30 +19,31 @@\n // https://internals.rust-lang.org/t/psa-rejecting-duplicate-loop-labels/1833\n \n pub fn foo() {\n-    { 'fl: for _ in 0..10 { break; } }   //~ NOTE shadowed label `'fl` declared here\n+    { 'fl: for _ in 0..10 { break; } }   //~ NOTE first declared here\n     { 'fl: loop { break; } }             //~ WARN label name `'fl` shadows a label name that is already in scope\n-\n-    { 'lf: loop { break; } }             //~ NOTE shadowed label `'lf` declared here\n+    //~^ NOTE lifetime 'fl already in scope\n+    { 'lf: loop { break; } }             //~ NOTE first declared here\n     { 'lf: for _ in 0..10 { break; } }   //~ WARN label name `'lf` shadows a label name that is already in scope\n-\n-    { 'wl: while 2 > 1 { break; } }      //~ NOTE shadowed label `'wl` declared here\n+    //~^ NOTE lifetime 'lf already in scope\n+    { 'wl: while 2 > 1 { break; } }      //~ NOTE first declared here\n     { 'wl: loop { break; } }             //~ WARN label name `'wl` shadows a label name that is already in scope\n-\n-    { 'lw: loop { break; } }             //~ NOTE shadowed label `'lw` declared here\n+    //~^ NOTE lifetime 'wl already in scope\n+    { 'lw: loop { break; } }             //~ NOTE first declared here\n     { 'lw: while 2 > 1 { break; } }      //~ WARN label name `'lw` shadows a label name that is already in scope\n-\n-    { 'fw: for _ in 0..10 { break; } }   //~ NOTE shadowed label `'fw` declared here\n+    //~^ NOTE lifetime 'lw already in scope\n+    { 'fw: for _ in 0..10 { break; } }   //~ NOTE first declared here\n     { 'fw: while 2 > 1 { break; } }      //~ WARN label name `'fw` shadows a label name that is already in scope\n-\n-    { 'wf: while 2 > 1 { break; } }      //~ NOTE shadowed label `'wf` declared here\n+    //~^ NOTE lifetime 'fw already in scope\n+    { 'wf: while 2 > 1 { break; } }      //~ NOTE first declared here\n     { 'wf: for _ in 0..10 { break; } }   //~ WARN label name `'wf` shadows a label name that is already in scope\n-\n-    { 'tl: while let Some(_) = None::<i32> { break; } } //~ NOTE shadowed label `'tl` declared here\n+    //~^ NOTE lifetime 'wf already in scope\n+    { 'tl: while let Some(_) = None::<i32> { break; } } //~ NOTE first declared here\n     { 'tl: loop { break; } }             //~ WARN label name `'tl` shadows a label name that is already in scope\n-\n-    { 'lt: loop { break; } }             //~ NOTE shadowed label `'lt` declared here\n+    //~^ NOTE lifetime 'tl already in scope\n+    { 'lt: loop { break; } }             //~ NOTE first declared here\n     { 'lt: while let Some(_) = None::<i32> { break; } }\n-                                        //~^ WARN label name `'lt` shadows a label name that is already in scope\n+                                         //~^ WARN label name `'lt` shadows a label name that is already in scope\n+                                         //~| NOTE lifetime 'lt already in scope\n }\n \n #[rustc_error]"}, {"sha": "31f89493896d89cd986e527a64823debaf8b3f80", "filename": "src/test/compile-fail/loops-reject-duplicate-labels.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/63671c495bf16dc0f9e1c97fa11af8a895b5ed24/src%2Ftest%2Fcompile-fail%2Floops-reject-duplicate-labels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63671c495bf16dc0f9e1c97fa11af8a895b5ed24/src%2Ftest%2Fcompile-fail%2Floops-reject-duplicate-labels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Floops-reject-duplicate-labels.rs?ref=63671c495bf16dc0f9e1c97fa11af8a895b5ed24", "patch": "@@ -16,30 +16,32 @@\n // This is testing the exact cases that are in the issue description.\n \n fn foo() {\n-    'fl: for _ in 0..10 { break; } //~ NOTE shadowed label `'fl` declared here\n+    'fl: for _ in 0..10 { break; } //~ NOTE first declared here\n     'fl: loop { break; }           //~ WARN label name `'fl` shadows a label name that is already in scope\n+                                   //~^ NOTE lifetime 'fl already in scope\n \n-    'lf: loop { break; }           //~ NOTE shadowed label `'lf` declared here\n+    'lf: loop { break; }           //~ NOTE first declared here\n     'lf: for _ in 0..10 { break; } //~ WARN label name `'lf` shadows a label name that is already in scope\n-\n-    'wl: while 2 > 1 { break; }    //~ NOTE shadowed label `'wl` declared here\n+                                   //~^ NOTE lifetime 'lf already in scope\n+    'wl: while 2 > 1 { break; }    //~ NOTE first declared here\n     'wl: loop { break; }           //~ WARN label name `'wl` shadows a label name that is already in scope\n-\n-    'lw: loop { break; }           //~ NOTE shadowed label `'lw` declared here\n+                                   //~^ NOTE lifetime 'wl already in scope\n+    'lw: loop { break; }           //~ NOTE first declared here\n     'lw: while 2 > 1 { break; }    //~ WARN label name `'lw` shadows a label name that is already in scope\n-\n-    'fw: for _ in 0..10 { break; } //~ NOTE shadowed label `'fw` declared here\n+                                   //~^ NOTE lifetime 'lw already in scope\n+    'fw: for _ in 0..10 { break; } //~ NOTE first declared here\n     'fw: while 2 > 1 { break; }    //~ WARN label name `'fw` shadows a label name that is already in scope\n-\n-    'wf: while 2 > 1 { break; }    //~ NOTE shadowed label `'wf` declared here\n+                                   //~^ NOTE lifetime 'fw already in scope\n+    'wf: while 2 > 1 { break; }    //~ NOTE first declared here\n     'wf: for _ in 0..10 { break; } //~ WARN label name `'wf` shadows a label name that is already in scope\n-\n-    'tl: while let Some(_) = None::<i32> { break; } //~ NOTE shadowed label `'tl` declared here\n+                                   //~^ NOTE lifetime 'wf already in scope\n+    'tl: while let Some(_) = None::<i32> { break; } //~ NOTE first declared here\n     'tl: loop { break; }           //~ WARN label name `'tl` shadows a label name that is already in scope\n-\n-    'lt: loop { break; }           //~ NOTE shadowed label `'lt` declared here\n+                                   //~^ NOTE lifetime 'tl already in scope\n+    'lt: loop { break; }           //~ NOTE first declared here\n     'lt: while let Some(_) = None::<i32> { break; }\n-                                  //~^ WARN label name `'lt` shadows a label name that is already in scope\n+                                   //~^ WARN label name `'lt` shadows a label name that is already in scope\n+                                   //~| NOTE lifetime 'lt already in scope\n }\n \n // Note however that it is okay for the same label to be reused in"}, {"sha": "9a735f9c97c96884327bf003bffec8e1566a73c3", "filename": "src/test/compile-fail/loops-reject-labels-shadowing-lifetimes.rs", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/63671c495bf16dc0f9e1c97fa11af8a895b5ed24/src%2Ftest%2Fcompile-fail%2Floops-reject-labels-shadowing-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63671c495bf16dc0f9e1c97fa11af8a895b5ed24/src%2Ftest%2Fcompile-fail%2Floops-reject-labels-shadowing-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Floops-reject-labels-shadowing-lifetimes.rs?ref=63671c495bf16dc0f9e1c97fa11af8a895b5ed24", "patch": "@@ -16,9 +16,10 @@\n #![allow(dead_code, unused_variables)]\n \n fn foo() {\n-    fn foo<'a>() { //~ NOTE shadowed lifetime `'a` declared here\n+    fn foo<'a>() { //~ NOTE first declared here\n         'a: loop { break 'a; }\n         //~^ WARN label name `'a` shadows a lifetime name that is already in scope\n+        //~| NOTE lifetime 'a already in scope\n     }\n \n     struct Struct<'b, 'c> { _f: &'b i8, _g: &'c i8 }\n@@ -40,76 +41,87 @@ fn foo() {\n         }\n     }\n \n-    impl<'bad, 'c> Struct<'bad, 'c> { //~ NOTE shadowed lifetime `'bad` declared here\n+    impl<'bad, 'c> Struct<'bad, 'c> { //~ NOTE first declared here\n         fn meth_bad(&self) {\n             'bad: loop { break 'bad; }\n             //~^ WARN label name `'bad` shadows a lifetime name that is already in scope\n+            //~| NOTE lifetime 'bad already in scope\n         }\n     }\n \n-    impl<'b, 'bad> Struct<'b, 'bad> { //~ NOTE shadowed lifetime `'bad` declared here\n+    impl<'b, 'bad> Struct<'b, 'bad> { //~ NOTE first declared here\n         fn meth_bad2(&self) {\n             'bad: loop { break 'bad; }\n             //~^ WARN label name `'bad` shadows a lifetime name that is already in scope\n+            //~| NOTE lifetime 'bad already in scope\n         }\n     }\n \n     impl<'b, 'c> Struct<'b, 'c> {\n-        fn meth_bad3<'bad>(x: &'bad i8) { //~ NOTE shadowed lifetime `'bad` declared here\n+        fn meth_bad3<'bad>(x: &'bad i8) { //~ NOTE first declared here\n             'bad: loop { break 'bad; }\n             //~^ WARN label name `'bad` shadows a lifetime name that is already in scope\n+            //~| NOTE lifetime 'bad already in scope\n         }\n \n         fn meth_bad4<'a,'bad>(x: &'a i8, y: &'bad i8) {\n-            //~^ NOTE shadowed lifetime `'bad` declared here\n+            //~^ NOTE first declared here\n             'bad: loop { break 'bad; }\n             //~^ WARN label name `'bad` shadows a lifetime name that is already in scope\n+            //~| NOTE lifetime 'bad already in scope\n         }\n     }\n \n-    impl <'bad, 'e> Enum<'bad, 'e> { //~ NOTE shadowed lifetime `'bad` declared here\n+    impl <'bad, 'e> Enum<'bad, 'e> { //~ NOTE first declared here\n         fn meth_bad(&self) {\n             'bad: loop { break 'bad; }\n             //~^ WARN label name `'bad` shadows a lifetime name that is already in scope\n+            //~| NOTE lifetime 'bad already in scope\n         }\n     }\n-    impl <'d, 'bad> Enum<'d, 'bad> { //~ NOTE shadowed lifetime `'bad` declared here\n+    impl <'d, 'bad> Enum<'d, 'bad> { //~ NOTE first declared here\n         fn meth_bad2(&self) {\n             'bad: loop { break 'bad; }\n             //~^ WARN label name `'bad` shadows a lifetime name that is already in scope\n+            //~| NOTE lifetime 'bad already in scope\n         }\n     }\n     impl <'d, 'e> Enum<'d, 'e> {\n-        fn meth_bad3<'bad>(x: &'bad i8) { //~ NOTE shadowed lifetime `'bad` declared here\n+        fn meth_bad3<'bad>(x: &'bad i8) { //~ NOTE first declared here\n             'bad: loop { break 'bad; }\n             //~^ WARN label name `'bad` shadows a lifetime name that is already in scope\n+            //~| NOTE lifetime 'bad already in scope\n         }\n \n-        fn meth_bad4<'a,'bad>(x: &'bad i8) { //~ NOTE shadowed lifetime `'bad` declared here\n+        fn meth_bad4<'a,'bad>(x: &'bad i8) { //~ NOTE first declared here\n             'bad: loop { break 'bad; }\n             //~^ WARN label name `'bad` shadows a lifetime name that is already in scope\n+            //~| NOTE lifetime 'bad already in scope\n         }\n     }\n \n-    trait HasDefaultMethod1<'bad> { //~ NOTE shadowed lifetime `'bad` declared here\n+    trait HasDefaultMethod1<'bad> { //~ NOTE first declared here\n         fn meth_okay() {\n             'c: loop { break 'c; }\n         }\n         fn meth_bad(&self) {\n             'bad: loop { break 'bad; }\n             //~^ WARN label name `'bad` shadows a lifetime name that is already in scope\n+            //~| NOTE lifetime 'bad already in scope\n         }\n     }\n-    trait HasDefaultMethod2<'a,'bad> { //~ NOTE shadowed lifetime `'bad` declared here\n+    trait HasDefaultMethod2<'a,'bad> { //~ NOTE first declared here\n         fn meth_bad(&self) {\n             'bad: loop { break 'bad; }\n             //~^ WARN label name `'bad` shadows a lifetime name that is already in scope\n+            //~| NOTE lifetime 'bad already in scope\n         }\n     }\n     trait HasDefaultMethod3<'a,'b> {\n-        fn meth_bad<'bad>(&self) { //~ NOTE shadowed lifetime `'bad` declared here\n+        fn meth_bad<'bad>(&self) { //~ NOTE first declared here\n             'bad: loop { break 'bad; }\n             //~^ WARN label name `'bad` shadows a lifetime name that is already in scope\n+            //~| NOTE lifetime 'bad already in scope\n         }\n     }\n }"}, {"sha": "0a90917d975e5544516efe1bc931acda96c556bb", "filename": "src/test/compile-fail/loops-reject-lifetime-shadowing-label.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/63671c495bf16dc0f9e1c97fa11af8a895b5ed24/src%2Ftest%2Fcompile-fail%2Floops-reject-lifetime-shadowing-label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63671c495bf16dc0f9e1c97fa11af8a895b5ed24/src%2Ftest%2Fcompile-fail%2Floops-reject-lifetime-shadowing-label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Floops-reject-lifetime-shadowing-label.rs?ref=63671c495bf16dc0f9e1c97fa11af8a895b5ed24", "patch": "@@ -27,9 +27,10 @@ fn foo() {\n \n     let z = 3_i8;\n \n-    'a: loop { //~ NOTE shadowed label `'a` declared here\n+    'a: loop { //~ NOTE first declared here\n         let b = Box::new(|x: &i8| *x) as Box<for <'a> Fn(&'a i8) -> i8>;\n         //~^ WARN lifetime name `'a` shadows a label name that is already in scope\n+        //~| NOTE lifetime 'a already in scope\n         assert_eq!((*b)(&z), z);\n         break 'a;\n     }"}, {"sha": "31283623a3ce6af33d21ef226da64fb2724cff60", "filename": "src/test/compile-fail/shadowed-lifetime.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/63671c495bf16dc0f9e1c97fa11af8a895b5ed24/src%2Ftest%2Fcompile-fail%2Fshadowed-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63671c495bf16dc0f9e1c97fa11af8a895b5ed24/src%2Ftest%2Fcompile-fail%2Fshadowed-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fshadowed-lifetime.rs?ref=63671c495bf16dc0f9e1c97fa11af8a895b5ed24", "patch": "@@ -13,16 +13,18 @@\n struct Foo<'a>(&'a isize);\n \n impl<'a> Foo<'a> {\n-    //~^ NOTE shadowed lifetime `'a` declared here\n+    //~^ NOTE  first declared here\n     fn shadow_in_method<'a>(&'a self) -> &'a isize {\n         //~^ ERROR lifetime name `'a` shadows a lifetime name that is already in scope\n+        //~| NOTE lifetime 'a already in scope\n         self.0\n     }\n \n     fn shadow_in_type<'b>(&'b self) -> &'b isize {\n-        //~^ NOTE shadowed lifetime `'b` declared here\n+        //~^ NOTE  first declared here\n         let x: for<'b> fn(&'b isize) = panic!();\n         //~^ ERROR lifetime name `'b` shadows a lifetime name that is already in scope\n+        //~| NOTE lifetime 'b already in scope\n         self.0\n     }\n "}]}