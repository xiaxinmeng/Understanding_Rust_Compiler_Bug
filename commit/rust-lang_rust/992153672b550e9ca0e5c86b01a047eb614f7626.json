{"sha": "992153672b550e9ca0e5c86b01a047eb614f7626", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5MjE1MzY3MmI1NTBlOWNhMGU1Yzg2YjAxYTA0N2ViNjE0Zjc2MjY=", "commit": {"author": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-06-20T18:59:05Z"}, "committer": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-06-20T19:04:33Z"}, "message": "Removed duplicated ret_ty_of_fn. This also means the native function branch is working now, so this commit closes #506.", "tree": {"sha": "9338046fe44d68e20cb54dbb720bee4c39110fdd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9338046fe44d68e20cb54dbb720bee4c39110fdd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/992153672b550e9ca0e5c86b01a047eb614f7626", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/992153672b550e9ca0e5c86b01a047eb614f7626", "html_url": "https://github.com/rust-lang/rust/commit/992153672b550e9ca0e5c86b01a047eb614f7626", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/992153672b550e9ca0e5c86b01a047eb614f7626/comments", "author": null, "committer": null, "parents": [{"sha": "ce50ae3212df7141a0008dc0e49ea4ff121d1c89", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce50ae3212df7141a0008dc0e49ea4ff121d1c89", "html_url": "https://github.com/rust-lang/rust/commit/ce50ae3212df7141a0008dc0e49ea4ff121d1c89"}], "stats": {"total": 35, "additions": 14, "deletions": 21}, "files": [{"sha": "483d6f7a5b0050f3ea2eb8b831bf153deec4bd09", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 7, "deletions": 20, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/992153672b550e9ca0e5c86b01a047eb614f7626/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/992153672b550e9ca0e5c86b01a047eb614f7626/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=992153672b550e9ca0e5c86b01a047eb614f7626", "patch": "@@ -7055,21 +7055,6 @@ fn arg_tys_of_fn(&@crate_ctxt ccx, ast::ann ann) -> vec[ty::arg] {\n     }\n }\n \n-fn ret_ty_of_fn_ty(&@crate_ctxt ccx, ty::t t) -> ty::t {\n-    alt (ty::struct(ccx.tcx, t)) {\n-        case (ty::ty_fn(_, _, ?ret_ty, _, _)) { ret ret_ty; }\n-        case (ty::ty_native_fn(_, _, ?ret_ty)) { ret ret_ty; }\n-        case (_) {\n-            ccx.sess.bug(\"ret_ty_of_fn_ty() called on non-function type: \" +\n-                             ty_to_str(ccx.tcx, t));\n-        }\n-    }\n-}\n-\n-fn ret_ty_of_fn(&@crate_ctxt ccx, ast::ann ann) -> ty::t {\n-    ret ret_ty_of_fn_ty(ccx, ty::ann_to_type(ccx.tcx, ann));\n-}\n-\n fn populate_fn_ctxt_from_llself(@fn_ctxt fcx, val_self_pair llself) {\n     auto bcx = llstaticallocas_block_ctxt(fcx);\n     let vec[ty::t] field_tys = [];\n@@ -7143,8 +7128,8 @@ fn trans_fn(@local_ctxt cx, &span sp, &ast::_fn f, ValueRef llfndecl,\n \n     auto fcx = new_fn_ctxt(cx, sp, llfndecl);\n     create_llargs_for_fn_args(fcx, f.proto, ty_self,\n-                              ret_ty_of_fn(cx.ccx, ann), f.decl.inputs,\n-                              ty_params);\n+                              ty::ret_ty_of_fn(cx.ccx.tcx, ann), \n+                              f.decl.inputs, ty_params);\n     copy_any_self_to_alloca(fcx, ty_self);\n     alt ({ fcx.llself }) {\n         case (some(?llself)) { populate_fn_ctxt_from_llself(fcx, llself); }\n@@ -7275,7 +7260,8 @@ fn trans_obj(@local_ctxt cx, &span sp, &ast::_obj ob, ast::def_id oid,\n     // Both regular arguments and type parameters are handled here.\n \n     create_llargs_for_fn_args(fcx, ast::proto_fn, none[ty_self_pair],\n-                              ret_ty_of_fn(ccx, ann), fn_args, ty_params);\n+                              ty::ret_ty_of_fn(ccx.tcx, ann),\n+                              fn_args, ty_params);\n     let vec[ty::arg] arg_tys = arg_tys_of_fn(ccx, ann);\n     copy_args_to_allocas(fcx, fn_args, arg_tys);\n     //  Create the first block context in the function and keep a handle on it\n@@ -7286,7 +7272,7 @@ fn trans_obj(@local_ctxt cx, &span sp, &ast::_obj ob, ast::def_id oid,\n     // Pick up the type of this object by looking at our own output type, that\n     // is, the output type of the object constructor we're building.\n \n-    auto self_ty = ret_ty_of_fn(ccx, ann);\n+    auto self_ty = ty::ret_ty_of_fn(ccx.tcx, ann);\n     auto llself_ty = type_of(ccx, sp, self_ty);\n     // Set up the two-word pair that we're going to return from the object\n     // constructor we're building.  The two elements of this pair will be a\n@@ -7461,7 +7447,8 @@ fn trans_tag_variant(@local_ctxt cx, ast::def_id tag_id,\n     let ValueRef llfndecl = cx.ccx.item_ids.get(variant.node.id);\n     auto fcx = new_fn_ctxt(cx, variant.span, llfndecl);\n     create_llargs_for_fn_args(fcx, ast::proto_fn, none[ty_self_pair],\n-                              ret_ty_of_fn(cx.ccx, variant.node.ann), fn_args,\n+                              ty::ret_ty_of_fn(cx.ccx.tcx, variant.node.ann),\n+                              fn_args,\n                               ty_params);\n     let vec[ty::t] ty_param_substs = [];\n     i = 0u;"}, {"sha": "df33890ea7f8d0c1c0ac0e274d1c003da2ae263d", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/992153672b550e9ca0e5c86b01a047eb614f7626/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/992153672b550e9ca0e5c86b01a047eb614f7626/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=992153672b550e9ca0e5c86b01a047eb614f7626", "patch": "@@ -21,6 +21,8 @@ import front::creader;\n import middle::metadata;\n import util::common::*;\n import util::data::interner;\n+import pretty::ppaux::ty_to_str;\n+\n \n export ann_to_monotype;\n export ann_to_type;\n@@ -2741,8 +2743,10 @@ fn lookup_item_type(ctxt cx, ast::def_id did) -> ty_param_count_and_ty {\n fn ret_ty_of_fn_ty(ctxt cx, t a_ty) -> t {\n     alt (ty::struct(cx, a_ty)) {\n         case (ty::ty_fn(_, _, ?ret_ty, _, _)) { ret ret_ty; }\n+        case (ty::ty_native_fn(_, _, ?ret_ty)) { ret ret_ty; }\n         case (_) {\n-            cx.sess.bug(\"ret_ty_of_fn_ty() called on non-function type\");\n+            cx.sess.bug(\"ret_ty_of_fn_ty() called on non-function type: \" +\n+                        ty_to_str(cx, a_ty));\n         }\n     }\n }"}, {"sha": "14611627542bb7df06cb4bbaec890645df1455b7", "filename": "src/test/run-pass/issue-506.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/992153672b550e9ca0e5c86b01a047eb614f7626/src%2Ftest%2Frun-pass%2Fissue-506.rs", "raw_url": "https://github.com/rust-lang/rust/raw/992153672b550e9ca0e5c86b01a047eb614f7626/src%2Ftest%2Frun-pass%2Fissue-506.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-506.rs?ref=992153672b550e9ca0e5c86b01a047eb614f7626", "patch": "@@ -2,6 +2,8 @@\n   A reduced test case for Issue #506, provided by Rob Arnold.\n */\n \n+// xfail-stage0\n+\n native \"rust\" mod rustrt {\n   fn task_yield();\n }"}]}