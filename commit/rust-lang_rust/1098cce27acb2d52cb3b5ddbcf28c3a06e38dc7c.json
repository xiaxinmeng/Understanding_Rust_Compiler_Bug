{"sha": "1098cce27acb2d52cb3b5ddbcf28c3a06e38dc7c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwOThjY2UyN2FjYjJkNTJjYjNiNWRkYmNmMjhjM2EwNmUzOGRjN2M=", "commit": {"author": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2020-11-29T16:16:25Z"}, "committer": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2020-12-01T18:34:39Z"}, "message": "Add tests for rustdoc json\n\nMove rustdoc/rustdoc-json to rustdoc-json\n\nScaffold rustdoc-json test mode\n\nImplement run_rustdoc_json_test\n\nFix up python\n\nMake tidy happy", "tree": {"sha": "672e12f1004ced7aa2858d6f829c48d06e78cb84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/672e12f1004ced7aa2858d6f829c48d06e78cb84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1098cce27acb2d52cb3b5ddbcf28c3a06e38dc7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1098cce27acb2d52cb3b5ddbcf28c3a06e38dc7c", "html_url": "https://github.com/rust-lang/rust/commit/1098cce27acb2d52cb3b5ddbcf28c3a06e38dc7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1098cce27acb2d52cb3b5ddbcf28c3a06e38dc7c/comments", "author": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66884e318f2edfb0dd66d76a7d3b080d0dd9e4c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/66884e318f2edfb0dd66d76a7d3b080d0dd9e4c5", "html_url": "https://github.com/rust-lang/rust/commit/66884e318f2edfb0dd66d76a7d3b080d0dd9e4c5"}], "stats": {"total": 140, "additions": 115, "deletions": 25}, "files": [{"sha": "6d97943548d5a24d6496c9869966bbe2a90a4e1f", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1098cce27acb2d52cb3b5ddbcf28c3a06e38dc7c/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1098cce27acb2d52cb3b5ddbcf28c3a06e38dc7c/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=1098cce27acb2d52cb3b5ddbcf28c3a06e38dc7c", "patch": "@@ -425,6 +425,7 @@ impl<'a> Builder<'a> {\n                 test::RustdocJSNotStd,\n                 test::RustdocTheme,\n                 test::RustdocUi,\n+                test::RustdocJson,\n                 // Run bootstrap close to the end as it's unlikely to fail\n                 test::Bootstrap,\n                 // Run run-make last, since these won't pass without make on Windows"}, {"sha": "78b5de7897d1f4dd2be8dbfaf32c7c8d9ba37b19", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1098cce27acb2d52cb3b5ddbcf28c3a06e38dc7c/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1098cce27acb2d52cb3b5ddbcf28c3a06e38dc7c/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=1098cce27acb2d52cb3b5ddbcf28c3a06e38dc7c", "patch": "@@ -904,6 +904,12 @@ host_test!(UiFullDeps { path: \"src/test/ui-fulldeps\", mode: \"ui\", suite: \"ui-ful\n host_test!(Rustdoc { path: \"src/test/rustdoc\", mode: \"rustdoc\", suite: \"rustdoc\" });\n host_test!(RustdocUi { path: \"src/test/rustdoc-ui\", mode: \"ui\", suite: \"rustdoc-ui\" });\n \n+host_test!(RustdocJson {\n+    path: \"src/test/rustdoc-json\",\n+    mode: \"rustdoc-json\",\n+    suite: \"rustdoc-json\"\n+});\n+\n host_test!(Pretty { path: \"src/test/pretty\", mode: \"pretty\", suite: \"pretty\" });\n \n default_test!(RunMake { path: \"src/test/run-make\", mode: \"run-make\", suite: \"run-make\" });\n@@ -1001,6 +1007,7 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n             || (mode == \"run-make\" && suite.ends_with(\"fulldeps\"))\n             || (mode == \"ui\" && is_rustdoc)\n             || mode == \"js-doc-test\"\n+            || mode == \"rustdoc-json\"\n         {\n             cmd.arg(\"--rustdoc-path\").arg(builder.rustdoc(compiler));\n         }"}, {"sha": "ad517ae95ebb6429e23c77f663b1bd87651343a4", "filename": "src/test/rustdoc-json/Makefile", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1098cce27acb2d52cb3b5ddbcf28c3a06e38dc7c/src%2Ftest%2Frustdoc-json%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/1098cce27acb2d52cb3b5ddbcf28c3a06e38dc7c/src%2Ftest%2Frustdoc-json%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2FMakefile?ref=1098cce27acb2d52cb3b5ddbcf28c3a06e38dc7c", "previous_filename": "src/test/rustdoc/rustdoc-json/Makefile"}, {"sha": "3a3bf7fa3ed58da538e503dbf6263377f7aaaa18", "filename": "src/test/rustdoc-json/check_missing_items.py", "status": "renamed", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1098cce27acb2d52cb3b5ddbcf28c3a06e38dc7c/src%2Ftest%2Frustdoc-json%2Fcheck_missing_items.py", "raw_url": "https://github.com/rust-lang/rust/raw/1098cce27acb2d52cb3b5ddbcf28c3a06e38dc7c/src%2Ftest%2Frustdoc-json%2Fcheck_missing_items.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fcheck_missing_items.py?ref=1098cce27acb2d52cb3b5ddbcf28c3a06e38dc7c", "patch": "@@ -130,12 +130,16 @@ def check_type(ty):\n         work_list |= set(item[\"inner\"][\"items\"]) - visited\n     elif item[\"kind\"] == \"struct\":\n         check_generics(item[\"inner\"][\"generics\"])\n-        work_list |= (set(item[\"inner\"][\"fields\"]) | set(item[\"inner\"][\"impls\"])) - visited\n+        work_list |= (\n+            set(item[\"inner\"][\"fields\"]) | set(item[\"inner\"][\"impls\"])\n+        ) - visited\n     elif item[\"kind\"] == \"struct_field\":\n         check_type(item[\"inner\"])\n     elif item[\"kind\"] == \"enum\":\n         check_generics(item[\"inner\"][\"generics\"])\n-        work_list |= (set(item[\"inner\"][\"variants\"]) | set(item[\"inner\"][\"impls\"])) - visited\n+        work_list |= (\n+            set(item[\"inner\"][\"variants\"]) | set(item[\"inner\"][\"impls\"])\n+        ) - visited\n     elif item[\"kind\"] == \"variant\":\n         if item[\"inner\"][\"variant_kind\"] == \"tuple\":\n             for ty in item[\"inner\"][\"variant_inner\"]:\n@@ -162,7 +166,9 @@ def check_type(ty):\n         check_generics(item[\"inner\"][\"generics\"])\n         for bound in item[\"inner\"][\"bounds\"]:\n             check_generic_bound(bound)\n-        work_list |= (set(item[\"inner\"][\"items\"]) | set(item[\"inner\"][\"implementors\"])) - visited\n+        work_list |= (\n+            set(item[\"inner\"][\"items\"]) | set(item[\"inner\"][\"implementors\"])\n+        ) - visited\n     elif item[\"kind\"] == \"impl\":\n         check_generics(item[\"inner\"][\"generics\"])\n         if item[\"inner\"][\"trait\"]:", "previous_filename": "src/test/rustdoc/rustdoc-json/check_missing_items.py"}, {"sha": "afc8066685c46d6a29804d9d5e89069866077d85", "filename": "src/test/rustdoc-json/compare.py", "status": "renamed", "additions": 36, "deletions": 12, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/1098cce27acb2d52cb3b5ddbcf28c3a06e38dc7c/src%2Ftest%2Frustdoc-json%2Fcompare.py", "raw_url": "https://github.com/rust-lang/rust/raw/1098cce27acb2d52cb3b5ddbcf28c3a06e38dc7c/src%2Ftest%2Frustdoc-json%2Fcompare.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fcompare.py?ref=1098cce27acb2d52cb3b5ddbcf28c3a06e38dc7c", "patch": "@@ -24,7 +24,7 @@ def __init__(self, msg, trace):\n         super().__init__(\"{}: {}\".format(trace, msg))\n \n \n-def check_subset(expected_main, actual_main):\n+def check_subset(expected_main, actual_main, base_dir):\n     expected_index = expected_main[\"index\"]\n     expected_paths = expected_main[\"paths\"]\n     actual_index = actual_main[\"index\"]\n@@ -39,11 +39,24 @@ def _check_subset(expected, actual, trace):\n                 \"expected type `{}`, got `{}`\".format(expected_type, actual_type), trace\n             )\n         if expected_type in (str, int, bool) and expected != actual:\n-            raise SubsetException(\"expected `{}`, got: `{}`\".format(expected, actual), trace)\n+            if expected_type == str and actual.startswith(base_dir):\n+                if actual.replace(base_dir + \"/\", \"\") != expected:\n+                    raise SubsetException(\n+                        \"expected `{}`, got: `{}`\".format(\n+                            expected, actual.replace(base_dir + \"/\", \"\")\n+                        ),\n+                        trace,\n+                    )\n+            else:\n+                raise SubsetException(\n+                    \"expected `{}`, got: `{}`\".format(expected, actual), trace\n+                )\n         if expected_type is dict:\n             for key in expected:\n                 if key not in actual:\n-                    raise SubsetException(\"Key `{}` not found in output\".format(key), trace)\n+                    raise SubsetException(\n+                        \"Key `{}` not found in output\".format(key), trace\n+                    )\n                 new_trace = copy.deepcopy(trace)\n                 new_trace.append(key)\n                 _check_subset(expected[key], actual[key], new_trace)\n@@ -52,16 +65,23 @@ def _check_subset(expected, actual, trace):\n             actual_elements = len(actual)\n             if expected_elements != actual_elements:\n                 raise SubsetException(\n-                    \"Found {} items, expected {}\".format(expected_elements, actual_elements), trace\n+                    \"Found {} items, expected {}\".format(\n+                        expected_elements, actual_elements\n+                    ),\n+                    trace,\n                 )\n             for expected, actual in zip(expected, actual):\n                 new_trace = copy.deepcopy(trace)\n                 new_trace.append(expected)\n                 _check_subset(expected, actual, new_trace)\n         elif expected_type is ID and expected not in already_checked:\n             already_checked.add(expected)\n-            _check_subset(expected_index.get(expected, {}), actual_index.get(actual, {}), trace)\n-            _check_subset(expected_paths.get(expected, {}), actual_paths.get(actual, {}), trace)\n+            _check_subset(\n+                expected_index.get(expected, {}), actual_index.get(actual, {}), trace\n+            )\n+            _check_subset(\n+                expected_paths.get(expected, {}), actual_paths.get(actual, {}), trace\n+            )\n \n     _check_subset(expected_main[\"root\"], actual_main[\"root\"], [])\n \n@@ -90,18 +110,22 @@ def rustdoc_object_hook(obj):\n     return obj\n \n \n-def main(expected_fpath, actual_fpath):\n-    print(\"checking that {} is a logical subset of {}\".format(expected_fpath, actual_fpath))\n+def main(expected_fpath, actual_fpath, base_dir):\n+    print(\n+        \"checking that {} is a logical subset of {}\".format(\n+            expected_fpath, actual_fpath\n+        )\n+    )\n     with open(expected_fpath) as expected_file:\n         expected_main = json.load(expected_file, object_hook=rustdoc_object_hook)\n     with open(actual_fpath) as actual_file:\n         actual_main = json.load(actual_file, object_hook=rustdoc_object_hook)\n-    check_subset(expected_main, actual_main)\n+    check_subset(expected_main, actual_main, base_dir)\n     print(\"all checks passed\")\n \n \n if __name__ == \"__main__\":\n-    if len(sys.argv) < 3:\n-        print(\"Usage: `compare.py expected.json actual.json`\")\n+    if len(sys.argv) < 4:\n+        print(\"Usage: `compare.py expected.json actual.json test-dir`\")\n     else:\n-        main(sys.argv[1], sys.argv[2])\n+        main(sys.argv[1], sys.argv[2], sys.argv[3])", "previous_filename": "src/test/rustdoc/rustdoc-json/compare.py"}, {"sha": "45b23534bc77b5eb0e7346f69843edddf89dc377", "filename": "src/test/rustdoc-json/structs.expected", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1098cce27acb2d52cb3b5ddbcf28c3a06e38dc7c/src%2Ftest%2Frustdoc-json%2Fstructs.expected", "raw_url": "https://github.com/rust-lang/rust/raw/1098cce27acb2d52cb3b5ddbcf28c3a06e38dc7c/src%2Ftest%2Frustdoc-json%2Fstructs.expected", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fstructs.expected?ref=1098cce27acb2d52cb3b5ddbcf28c3a06e38dc7c", "previous_filename": "src/test/rustdoc/rustdoc-json/structs.expected"}, {"sha": "43fc4743503aa5348f02b06a042ae7de7fc91200", "filename": "src/test/rustdoc-json/structs.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1098cce27acb2d52cb3b5ddbcf28c3a06e38dc7c/src%2Ftest%2Frustdoc-json%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1098cce27acb2d52cb3b5ddbcf28c3a06e38dc7c/src%2Ftest%2Frustdoc-json%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fstructs.rs?ref=1098cce27acb2d52cb3b5ddbcf28c3a06e38dc7c", "previous_filename": "src/test/rustdoc/rustdoc-json/structs.rs"}, {"sha": "eba02333c8cb2e9cffdc7a177d85a4b9214a986f", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1098cce27acb2d52cb3b5ddbcf28c3a06e38dc7c/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1098cce27acb2d52cb3b5ddbcf28c3a06e38dc7c/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=1098cce27acb2d52cb3b5ddbcf28c3a06e38dc7c", "patch": "@@ -17,6 +17,7 @@ pub enum Mode {\n     DebugInfo,\n     Codegen,\n     Rustdoc,\n+    RustdocJson,\n     CodegenUnits,\n     Incremental,\n     RunMake,\n@@ -48,6 +49,7 @@ impl FromStr for Mode {\n             \"debuginfo\" => Ok(DebugInfo),\n             \"codegen\" => Ok(Codegen),\n             \"rustdoc\" => Ok(Rustdoc),\n+            \"rustdoc-json\" => Ok(RustdocJson),\n             \"codegen-units\" => Ok(CodegenUnits),\n             \"incremental\" => Ok(Incremental),\n             \"run-make\" => Ok(RunMake),\n@@ -70,6 +72,7 @@ impl fmt::Display for Mode {\n             DebugInfo => \"debuginfo\",\n             Codegen => \"codegen\",\n             Rustdoc => \"rustdoc\",\n+            RustdocJson => \"rustdoc-json\",\n             CodegenUnits => \"codegen-units\",\n             Incremental => \"incremental\",\n             RunMake => \"run-make\","}, {"sha": "0541548aefd6de041a723a68bdb4c520c2fbaf54", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1098cce27acb2d52cb3b5ddbcf28c3a06e38dc7c/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1098cce27acb2d52cb3b5ddbcf28c3a06e38dc7c/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=1098cce27acb2d52cb3b5ddbcf28c3a06e38dc7c", "patch": "@@ -68,7 +68,7 @@ pub fn parse_config(args: Vec<String>) -> Config {\n             \"mode\",\n             \"which sort of compile tests to run\",\n             \"compile-fail | run-fail | run-pass-valgrind | pretty | debug-info | codegen | rustdoc \\\n-             codegen-units | incremental | run-make | ui | js-doc-test | mir-opt | assembly\",\n+            | rustdoc-json | codegen-units | incremental | run-make | ui | js-doc-test | mir-opt | assembly\",\n         )\n         .reqopt(\n             \"\","}, {"sha": "88cb8544e47ccdd1c3320b0c2b4567a23c7177cb", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 58, "deletions": 9, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/1098cce27acb2d52cb3b5ddbcf28c3a06e38dc7c/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1098cce27acb2d52cb3b5ddbcf28c3a06e38dc7c/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=1098cce27acb2d52cb3b5ddbcf28c3a06e38dc7c", "patch": "@@ -2,7 +2,7 @@\n \n use crate::common::{expected_output_path, UI_EXTENSIONS, UI_FIXED, UI_STDERR, UI_STDOUT};\n use crate::common::{output_base_dir, output_base_name, output_testname_unique};\n-use crate::common::{Assembly, Incremental, JsDocTest, MirOpt, RunMake, Ui};\n+use crate::common::{Assembly, Incremental, JsDocTest, MirOpt, RunMake, RustdocJson, Ui};\n use crate::common::{Codegen, CodegenUnits, DebugInfo, Debugger, Rustdoc};\n use crate::common::{CompareMode, FailMode, PassMode};\n use crate::common::{CompileFail, Pretty, RunFail, RunPassValgrind};\n@@ -342,6 +342,7 @@ impl<'test> TestCx<'test> {\n             DebugInfo => self.run_debuginfo_test(),\n             Codegen => self.run_codegen_test(),\n             Rustdoc => self.run_rustdoc_test(),\n+            RustdocJson => self.run_rustdoc_json_test(),\n             CodegenUnits => self.run_codegen_units_test(),\n             Incremental => self.run_incremental_test(),\n             RunMake => self.run_rmake_test(),\n@@ -1564,7 +1565,7 @@ impl<'test> TestCx<'test> {\n         self.compose_and_run_compiler(rustc, None)\n     }\n \n-    fn document(&self, out_dir: &Path) -> ProcRes {\n+    fn document(&self, out_dir: &Path, json: bool) -> ProcRes {\n         if self.props.build_aux_docs {\n             for rel_ab in &self.props.aux_builds {\n                 let aux_testpaths = self.compute_aux_test_paths(rel_ab);\n@@ -1578,7 +1579,7 @@ impl<'test> TestCx<'test> {\n                 };\n                 // Create the directory for the stdout/stderr files.\n                 create_dir_all(aux_cx.output_base_dir()).unwrap();\n-                let auxres = aux_cx.document(out_dir);\n+                let auxres = aux_cx.document(out_dir, json);\n                 if !auxres.status.success() {\n                     return auxres;\n                 }\n@@ -1600,6 +1601,10 @@ impl<'test> TestCx<'test> {\n             .arg(&self.testpaths.file)\n             .args(&self.props.compile_flags);\n \n+        if json {\n+            rustdoc.arg(\"--output-format\").arg(\"json\");\n+        }\n+\n         if let Some(ref linker) = self.config.linker {\n             rustdoc.arg(format!(\"-Clinker={}\", linker));\n         }\n@@ -1887,7 +1892,9 @@ impl<'test> TestCx<'test> {\n     }\n \n     fn is_rustdoc(&self) -> bool {\n-        self.config.src_base.ends_with(\"rustdoc-ui\") || self.config.src_base.ends_with(\"rustdoc-js\")\n+        self.config.src_base.ends_with(\"rustdoc-ui\")\n+            || self.config.src_base.ends_with(\"rustdoc-js\")\n+            || self.config.src_base.ends_with(\"rustdoc-json\")\n     }\n \n     fn make_compile_args(\n@@ -1968,8 +1975,8 @@ impl<'test> TestCx<'test> {\n \n                 rustc.arg(dir_opt);\n             }\n-            RunFail | RunPassValgrind | Pretty | DebugInfo | Codegen | Rustdoc | RunMake\n-            | CodegenUnits | JsDocTest | Assembly => {\n+            RunFail | RunPassValgrind | Pretty | DebugInfo | Codegen | Rustdoc | RustdocJson\n+            | RunMake | CodegenUnits | JsDocTest | Assembly => {\n                 // do not use JSON output\n             }\n         }\n@@ -2329,7 +2336,7 @@ impl<'test> TestCx<'test> {\n         let _ = fs::remove_dir_all(&out_dir);\n         create_dir_all(&out_dir).unwrap();\n \n-        let proc_res = self.document(&out_dir);\n+        let proc_res = self.document(&out_dir, false);\n         if !proc_res.status.success() {\n             self.fatal_proc_rec(\"rustdoc failed!\", &proc_res);\n         }\n@@ -2385,7 +2392,7 @@ impl<'test> TestCx<'test> {\n         rustc.arg(\"-L\").arg(&new_rustdoc.aux_output_dir_name());\n         new_rustdoc.build_all_auxiliary(&mut rustc);\n \n-        let proc_res = new_rustdoc.document(&compare_dir);\n+        let proc_res = new_rustdoc.document(&compare_dir, false);\n         if !proc_res.status.success() {\n             proc_res.fatal(Some(\"failed to run nightly rustdoc\"), || ());\n         }\n@@ -2466,6 +2473,48 @@ impl<'test> TestCx<'test> {\n         eprintln!(\"{}\", String::from_utf8_lossy(&output.stderr));\n     }\n \n+    fn run_rustdoc_json_test(&self) {\n+        //FIXME: Add bless option.\n+\n+        assert!(self.revision.is_none(), \"revisions not relevant here\");\n+\n+        let out_dir = self.output_base_dir();\n+        let _ = fs::remove_dir_all(&out_dir);\n+        create_dir_all(&out_dir).unwrap();\n+\n+        let proc_res = self.document(&out_dir, true);\n+        if !proc_res.status.success() {\n+            self.fatal_proc_rec(\"rustdoc failed!\", &proc_res);\n+        }\n+\n+        let root = self.config.find_rust_src_root().unwrap();\n+        let mut json_out = out_dir.join(self.testpaths.file.file_stem().unwrap());\n+        json_out.set_extension(\"json\");\n+        let res = self.cmd2procres(\n+            Command::new(&self.config.docck_python)\n+                .arg(root.join(\"src/test/rustdoc-json/check_missing_items.py\"))\n+                .arg(&json_out),\n+        );\n+\n+        if !res.status.success() {\n+            self.fatal_proc_rec(\"check_missing_items failed!\", &res);\n+        }\n+\n+        let mut expected = self.testpaths.file.clone();\n+        expected.set_extension(\"expected\");\n+        let res = self.cmd2procres(\n+            Command::new(&self.config.docck_python)\n+                .arg(root.join(\"src/test/rustdoc-json/compare.py\"))\n+                .arg(&expected)\n+                .arg(&json_out)\n+                .arg(&expected.parent().unwrap()),\n+        );\n+\n+        if !res.status.success() {\n+            self.fatal_proc_rec(\"compare failed!\", &res);\n+        }\n+    }\n+\n     fn get_lines<P: AsRef<Path>>(\n         &self,\n         path: &P,\n@@ -3003,7 +3052,7 @@ impl<'test> TestCx<'test> {\n         if let Some(nodejs) = &self.config.nodejs {\n             let out_dir = self.output_base_dir();\n \n-            self.document(&out_dir);\n+            self.document(&out_dir, false);\n \n             let root = self.config.find_rust_src_root().unwrap();\n             let file_stem ="}]}