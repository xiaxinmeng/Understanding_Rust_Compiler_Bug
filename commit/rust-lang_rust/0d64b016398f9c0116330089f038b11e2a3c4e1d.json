{"sha": "0d64b016398f9c0116330089f038b11e2a3c4e1d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkNjRiMDE2Mzk4ZjljMDExNjMzMDA4OWYwMzhiMTFlMmEzYzRlMWQ=", "commit": {"author": {"name": "Lukas Kalbertodt", "email": "lukas.kalbertodt@gmail.com", "date": "2020-07-19T14:12:50Z"}, "committer": {"name": "Lukas Kalbertodt", "email": "lukas.kalbertodt@gmail.com", "date": "2020-07-19T22:40:42Z"}, "message": "Slightly improve panic messages when range indices are out of bounds", "tree": {"sha": "dda8385ae029d59a43c1788f41bf046b06141787", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dda8385ae029d59a43c1788f41bf046b06141787"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d64b016398f9c0116330089f038b11e2a3c4e1d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYIAB0WIQSOpdglyeINwt5bMtWqUCXPHMhXVAUCXxTL6gAKCRCqUCXPHMhX\nVNurAP460nvE8mNCGLT2Rij2YJre0XrLBCjuTa6xSyF0AGi5MgD9EzFu17zZzmVu\nIZj2lD3xWdPXeLjRZs4v6ipxFv37MQo=\n=69gN\n-----END PGP SIGNATURE-----", "payload": "tree dda8385ae029d59a43c1788f41bf046b06141787\nparent ce338046c8b40e3284707d2ab725e9f076592959\nauthor Lukas Kalbertodt <lukas.kalbertodt@gmail.com> 1595167970 +0200\ncommitter Lukas Kalbertodt <lukas.kalbertodt@gmail.com> 1595198442 +0200\n\nSlightly improve panic messages when range indices are out of bounds\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d64b016398f9c0116330089f038b11e2a3c4e1d", "html_url": "https://github.com/rust-lang/rust/commit/0d64b016398f9c0116330089f038b11e2a3c4e1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d64b016398f9c0116330089f038b11e2a3c4e1d/comments", "author": {"login": "LukasKalbertodt", "id": 7419664, "node_id": "MDQ6VXNlcjc0MTk2NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7419664?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LukasKalbertodt", "html_url": "https://github.com/LukasKalbertodt", "followers_url": "https://api.github.com/users/LukasKalbertodt/followers", "following_url": "https://api.github.com/users/LukasKalbertodt/following{/other_user}", "gists_url": "https://api.github.com/users/LukasKalbertodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/LukasKalbertodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LukasKalbertodt/subscriptions", "organizations_url": "https://api.github.com/users/LukasKalbertodt/orgs", "repos_url": "https://api.github.com/users/LukasKalbertodt/repos", "events_url": "https://api.github.com/users/LukasKalbertodt/events{/privacy}", "received_events_url": "https://api.github.com/users/LukasKalbertodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LukasKalbertodt", "id": 7419664, "node_id": "MDQ6VXNlcjc0MTk2NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7419664?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LukasKalbertodt", "html_url": "https://github.com/LukasKalbertodt", "followers_url": "https://api.github.com/users/LukasKalbertodt/followers", "following_url": "https://api.github.com/users/LukasKalbertodt/following{/other_user}", "gists_url": "https://api.github.com/users/LukasKalbertodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/LukasKalbertodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LukasKalbertodt/subscriptions", "organizations_url": "https://api.github.com/users/LukasKalbertodt/orgs", "repos_url": "https://api.github.com/users/LukasKalbertodt/repos", "events_url": "https://api.github.com/users/LukasKalbertodt/events{/privacy}", "received_events_url": "https://api.github.com/users/LukasKalbertodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce338046c8b40e3284707d2ab725e9f076592959", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce338046c8b40e3284707d2ab725e9f076592959", "html_url": "https://github.com/rust-lang/rust/commit/ce338046c8b40e3284707d2ab725e9f076592959"}], "stats": {"total": 25, "additions": 16, "deletions": 9}, "files": [{"sha": "64d218c3650ac3a02777bd358cbe29083a42753d", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0d64b016398f9c0116330089f038b11e2a3c4e1d/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d64b016398f9c0116330089f038b11e2a3c4e1d/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=0d64b016398f9c0116330089f038b11e2a3c4e1d", "patch": "@@ -2974,8 +2974,15 @@ where\n #[inline(never)]\n #[cold]\n #[track_caller]\n-fn slice_index_len_fail(index: usize, len: usize) -> ! {\n-    panic!(\"index {} out of range for slice of length {}\", index, len);\n+fn slice_start_index_len_fail(index: usize, len: usize) -> ! {\n+    panic!(\"range start index {} out of range for slice of length {}\", index, len);\n+}\n+\n+#[inline(never)]\n+#[cold]\n+#[track_caller]\n+fn slice_end_index_len_fail(index: usize, len: usize) -> ! {\n+    panic!(\"range end index {} out of range for slice of length {}\", index, len);\n }\n \n #[inline(never)]\n@@ -3160,7 +3167,7 @@ unsafe impl<T> SliceIndex<[T]> for ops::Range<usize> {\n         if self.start > self.end {\n             slice_index_order_fail(self.start, self.end);\n         } else if self.end > slice.len() {\n-            slice_index_len_fail(self.end, slice.len());\n+            slice_end_index_len_fail(self.end, slice.len());\n         }\n         unsafe { &*self.get_unchecked(slice) }\n     }\n@@ -3170,7 +3177,7 @@ unsafe impl<T> SliceIndex<[T]> for ops::Range<usize> {\n         if self.start > self.end {\n             slice_index_order_fail(self.start, self.end);\n         } else if self.end > slice.len() {\n-            slice_index_len_fail(self.end, slice.len());\n+            slice_end_index_len_fail(self.end, slice.len());\n         }\n         unsafe { &mut *self.get_unchecked_mut(slice) }\n     }\n@@ -3242,15 +3249,15 @@ unsafe impl<T> SliceIndex<[T]> for ops::RangeFrom<usize> {\n     #[inline]\n     fn index(self, slice: &[T]) -> &[T] {\n         if self.start > slice.len() {\n-            slice_index_len_fail(self.start, slice.len());\n+            slice_start_index_len_fail(self.start, slice.len());\n         }\n         unsafe { &*self.get_unchecked(slice) }\n     }\n \n     #[inline]\n     fn index_mut(self, slice: &mut [T]) -> &mut [T] {\n         if self.start > slice.len() {\n-            slice_index_len_fail(self.start, slice.len());\n+            slice_start_index_len_fail(self.start, slice.len());\n         }\n         unsafe { &mut *self.get_unchecked_mut(slice) }\n     }"}, {"sha": "a3aca3a2912a6c2cc31b0bc0829200dae96f817e", "filename": "src/test/codegen/issue-69101-bounds-check.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d64b016398f9c0116330089f038b11e2a3c4e1d/src%2Ftest%2Fcodegen%2Fissue-69101-bounds-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d64b016398f9c0116330089f038b11e2a3c4e1d/src%2Ftest%2Fcodegen%2Fissue-69101-bounds-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fissue-69101-bounds-check.rs?ref=0d64b016398f9c0116330089f038b11e2a3c4e1d", "patch": "@@ -12,7 +12,7 @@\n // CHECK-LABEL: @already_sliced_no_bounds_check\n #[no_mangle]\n pub fn already_sliced_no_bounds_check(a: &[u8], b: &[u8], c: &mut [u8]) {\n-    // CHECK: slice_index_len_fail\n+    // CHECK: slice_end_index_len_fail\n     // CHECK-NOT: panic_bounds_check\n     let _ = (&a[..2048], &b[..2048], &mut c[..2048]);\n     for i in 0..1024 {\n@@ -23,7 +23,7 @@ pub fn already_sliced_no_bounds_check(a: &[u8], b: &[u8], c: &mut [u8]) {\n // CHECK-LABEL: @already_sliced_no_bounds_check_exact\n #[no_mangle]\n pub fn already_sliced_no_bounds_check_exact(a: &[u8], b: &[u8], c: &mut [u8]) {\n-    // CHECK: slice_index_len_fail\n+    // CHECK: slice_end_index_len_fail\n     // CHECK-NOT: panic_bounds_check\n     let _ = (&a[..1024], &b[..1024], &mut c[..1024]);\n     for i in 0..1024 {\n@@ -35,7 +35,7 @@ pub fn already_sliced_no_bounds_check_exact(a: &[u8], b: &[u8], c: &mut [u8]) {\n // CHECK-LABEL: @already_sliced_bounds_check\n #[no_mangle]\n pub fn already_sliced_bounds_check(a: &[u8], b: &[u8], c: &mut [u8]) {\n-    // CHECK: slice_index_len_fail\n+    // CHECK: slice_end_index_len_fail\n     // CHECK: panic_bounds_check\n     let _ = (&a[..1023], &b[..2048], &mut c[..2048]);\n     for i in 0..1024 {"}]}