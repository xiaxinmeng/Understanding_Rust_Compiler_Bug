{"sha": "5bd8edc1121a5736994d69b2dc9cf3efb6fbc116", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViZDhlZGMxMTIxYTU3MzY5OTRkNjliMmRjOWNmM2VmYjZmYmMxMTY=", "commit": {"author": {"name": "Andrew Poelstra", "email": "apoelstra@wpsoftware.net", "date": "2014-07-31T02:35:32Z"}, "committer": {"name": "Andrew Poelstra", "email": "apoelstra@wpsoftware.net", "date": "2014-08-01T04:41:19Z"}, "message": "libserialize: add `error()` to `Decoder`\n\nA quick and dirty fix for #15036 until we get serious decoder reform.\n\nRight now it is impossible for a Decodable to signal a decode error,\nfor example if it has only finitely many allowed values, is a string\nwhich must be encoded a certain way, needs a valid checksum, etc. For\nexample in the libuuid implementation of Decodable an Option is\nunwrapped, meaning that a decode of a malformed UUID will cause the\ntask to fail.\n\nSince this adds a method to the `Decoder` trait, all users will need\nto update their implementations to add it. The strategy used for the\ncurrent implementations for JSON and EBML is to add a new entry to\nthe error enum `ApplicationError(String)` which stores the string\nprovided to `.error()`.\n\n[breaking-change]", "tree": {"sha": "6f465585ab0d0ef8bc4555f912d280df2e5245b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f465585ab0d0ef8bc4555f912d280df2e5245b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5bd8edc1121a5736994d69b2dc9cf3efb6fbc116", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5bd8edc1121a5736994d69b2dc9cf3efb6fbc116", "html_url": "https://github.com/rust-lang/rust/commit/5bd8edc1121a5736994d69b2dc9cf3efb6fbc116", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5bd8edc1121a5736994d69b2dc9cf3efb6fbc116/comments", "author": {"login": "apoelstra", "id": 1351933, "node_id": "MDQ6VXNlcjEzNTE5MzM=", "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apoelstra", "html_url": "https://github.com/apoelstra", "followers_url": "https://api.github.com/users/apoelstra/followers", "following_url": "https://api.github.com/users/apoelstra/following{/other_user}", "gists_url": "https://api.github.com/users/apoelstra/gists{/gist_id}", "starred_url": "https://api.github.com/users/apoelstra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions", "organizations_url": "https://api.github.com/users/apoelstra/orgs", "repos_url": "https://api.github.com/users/apoelstra/repos", "events_url": "https://api.github.com/users/apoelstra/events{/privacy}", "received_events_url": "https://api.github.com/users/apoelstra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apoelstra", "id": 1351933, "node_id": "MDQ6VXNlcjEzNTE5MzM=", "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apoelstra", "html_url": "https://github.com/apoelstra", "followers_url": "https://api.github.com/users/apoelstra/followers", "following_url": "https://api.github.com/users/apoelstra/following{/other_user}", "gists_url": "https://api.github.com/users/apoelstra/gists{/gist_id}", "starred_url": "https://api.github.com/users/apoelstra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions", "organizations_url": "https://api.github.com/users/apoelstra/orgs", "repos_url": "https://api.github.com/users/apoelstra/repos", "events_url": "https://api.github.com/users/apoelstra/events{/privacy}", "received_events_url": "https://api.github.com/users/apoelstra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b495933a7fdc5e7b28ddbb058d1e2dab330ace7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b495933a7fdc5e7b28ddbb058d1e2dab330ace7b", "html_url": "https://github.com/rust-lang/rust/commit/b495933a7fdc5e7b28ddbb058d1e2dab330ace7b"}], "stats": {"total": 25, "additions": 19, "deletions": 6}, "files": [{"sha": "4927a8293a4da327c47b279c27bae98beafb13da", "filename": "src/librbml/lib.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5bd8edc1121a5736994d69b2dc9cf3efb6fbc116/src%2Flibrbml%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bd8edc1121a5736994d69b2dc9cf3efb6fbc116/src%2Flibrbml%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Flib.rs?ref=5bd8edc1121a5736994d69b2dc9cf3efb6fbc116", "patch": "@@ -105,7 +105,8 @@ pub enum EbmlEncoderTag {\n pub enum Error {\n     IntTooBig(uint),\n     Expected(String),\n-    IoError(std::io::IoError)\n+    IoError(std::io::IoError),\n+    ApplicationError(String)\n }\n // --------------------------------------\n \n@@ -119,11 +120,11 @@ pub mod reader {\n \n     use serialize;\n \n-    use super::{ EsVec, EsMap, EsEnum, EsVecLen, EsVecElt, EsMapLen, EsMapKey,\n-        EsEnumVid, EsU64, EsU32, EsU16, EsU8, EsInt, EsI64, EsI32, EsI16, EsI8,\n-        EsBool, EsF64, EsF32, EsChar, EsStr, EsMapVal, EsEnumBody, EsUint,\n-        EsOpaque, EsLabel, EbmlEncoderTag, Doc, TaggedDoc, Error, IntTooBig,\n-        Expected };\n+    use super::{ ApplicationError, EsVec, EsMap, EsEnum, EsVecLen, EsVecElt,\n+        EsMapLen, EsMapKey, EsEnumVid, EsU64, EsU32, EsU16, EsU8, EsInt, EsI64,\n+        EsI32, EsI16, EsI8, EsBool, EsF64, EsF32, EsChar, EsStr, EsMapVal,\n+        EsEnumBody, EsUint, EsOpaque, EsLabel, EbmlEncoderTag, Doc, TaggedDoc,\n+        Error, IntTooBig, Expected };\n \n     pub type DecodeResult<T> = Result<T, Error>;\n     // rbml reading\n@@ -636,6 +637,10 @@ pub mod reader {\n             debug!(\"read_map_elt_val(idx={})\", idx);\n             self.push_doc(EsMapVal, f)\n         }\n+\n+        fn error(&mut self, err: &str) -> Error {\n+            ApplicationError(err.to_string())\n+        }\n     }\n }\n "}, {"sha": "58d69e38cc6e0fd5d4a96d241a87f21f0627ea7d", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5bd8edc1121a5736994d69b2dc9cf3efb6fbc116/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bd8edc1121a5736994d69b2dc9cf3efb6fbc116/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=5bd8edc1121a5736994d69b2dc9cf3efb6fbc116", "patch": "@@ -257,6 +257,7 @@ pub enum DecoderError {\n     ExpectedError(String, String),\n     MissingFieldError(String),\n     UnknownVariantError(String),\n+    ApplicationError(String)\n }\n \n /// Returns a readable error string for a given error code.\n@@ -2071,6 +2072,10 @@ impl ::Decoder<DecoderError> for Decoder {\n         debug!(\"read_map_elt_val(idx={})\", idx);\n         f(self)\n     }\n+\n+    fn error(&mut self, err: &str) -> DecoderError {\n+        ApplicationError(err.to_string())\n+    }\n }\n \n /// A trait for converting values to JSON"}, {"sha": "95c677bcbd727976ad46e697bfe8f09d4d8d9ce3", "filename": "src/libserialize/serialize.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5bd8edc1121a5736994d69b2dc9cf3efb6fbc116/src%2Flibserialize%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bd8edc1121a5736994d69b2dc9cf3efb6fbc116/src%2Flibserialize%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fserialize.rs?ref=5bd8edc1121a5736994d69b2dc9cf3efb6fbc116", "patch": "@@ -163,6 +163,9 @@ pub trait Decoder<E> {\n     fn read_map<T>(&mut self, f: |&mut Self, uint| -> Result<T, E>) -> Result<T, E>;\n     fn read_map_elt_key<T>(&mut self, idx: uint, f: |&mut Self| -> Result<T, E>) -> Result<T, E>;\n     fn read_map_elt_val<T>(&mut self, idx: uint, f: |&mut Self| -> Result<T, E>) -> Result<T, E>;\n+\n+    // Failure\n+    fn error(&mut self, err: &str) -> E;\n }\n \n pub trait Encodable<S:Encoder<E>, E> {"}]}