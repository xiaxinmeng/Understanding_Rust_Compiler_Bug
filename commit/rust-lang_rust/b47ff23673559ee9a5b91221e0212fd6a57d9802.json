{"sha": "b47ff23673559ee9a5b91221e0212fd6a57d9802", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0N2ZmMjM2NzM1NTllZTlhNWI5MTIyMWUwMjEyZmQ2YTU3ZDk4MDI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-12-18T22:42:58Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-12-25T03:59:55Z"}, "message": "green: Move a scheduler test inside libgreen\n\nThis test also had a race condition in using the cvar/lock, so I fixed that up\nas well. The race originated from one half trying to destroy the lock when\nanother half was using it.", "tree": {"sha": "2f9f3e7ea6791f3dcf7a6bea8c165f06a4565e20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f9f3e7ea6791f3dcf7a6bea8c165f06a4565e20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b47ff23673559ee9a5b91221e0212fd6a57d9802", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b47ff23673559ee9a5b91221e0212fd6a57d9802", "html_url": "https://github.com/rust-lang/rust/commit/b47ff23673559ee9a5b91221e0212fd6a57d9802", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b47ff23673559ee9a5b91221e0212fd6a57d9802/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f483459045789d6bb44671269fd9aec73dbeb63", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f483459045789d6bb44671269fd9aec73dbeb63", "html_url": "https://github.com/rust-lang/rust/commit/7f483459045789d6bb44671269fd9aec73dbeb63"}], "stats": {"total": 133, "additions": 72, "deletions": 61}, "files": [{"sha": "95c4d8347d5b08a2e9c0b075a17f5fa282cb52ef", "filename": "src/libgreen/sched.rs", "status": "modified", "additions": 72, "deletions": 1, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/b47ff23673559ee9a5b91221e0212fd6a57d9802/src%2Flibgreen%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b47ff23673559ee9a5b91221e0212fd6a57d9802/src%2Flibgreen%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fsched.rs?ref=b47ff23673559ee9a5b91221e0212fd6a57d9802", "patch": "@@ -957,7 +957,7 @@ mod test {\n     use std::rt::local::Local;\n \n     use basic;\n-    use sched::TaskFromFriend;\n+    use sched::{TaskFromFriend, PinnedTask};\n     use task::{GreenTask, HomeSched};\n     use PoolConfig;\n     use SchedPool;\n@@ -1406,4 +1406,75 @@ mod test {\n             5.times(deschedule);\n         }\n     }\n+\n+    #[test]\n+    fn test_spawn_sched_blocking() {\n+        use std::unstable::mutex::Mutex;\n+\n+        // Testing that a task in one scheduler can block in foreign code\n+        // without affecting other schedulers\n+        for _ in range(0, 20) {\n+            let mut pool = pool();\n+            let (start_po, start_ch) = Chan::new();\n+            let (fin_po, fin_ch) = Chan::new();\n+\n+            let lock = unsafe { Mutex::new() };\n+            let lock2 = unsafe { lock.clone() };\n+\n+            let mut handle = pool.spawn_sched();\n+            handle.send(PinnedTask(pool.task(TaskOpts::new(), proc() {\n+                let mut lock = lock2;\n+                unsafe {\n+                    lock.lock();\n+\n+                    start_ch.send(());\n+                    lock.wait();   // block the scheduler thread\n+                    lock.signal(); // let them know we have the lock\n+                    lock.unlock();\n+                }\n+\n+                fin_ch.send(());\n+            })));\n+            drop(handle);\n+\n+            let mut handle = pool.spawn_sched();\n+            handle.send(TaskFromFriend(pool.task(TaskOpts::new(), proc() {\n+                // Wait until the other task has its lock\n+                start_po.recv();\n+\n+                fn pingpong(po: &Port<int>, ch: &Chan<int>) {\n+                    let mut val = 20;\n+                    while val > 0 {\n+                        val = po.recv();\n+                        ch.try_send(val - 1);\n+                    }\n+                }\n+\n+                let (setup_po, setup_ch) = Chan::new();\n+                let (parent_po, parent_ch) = Chan::new();\n+                do spawn {\n+                    let (child_po, child_ch) = Chan::new();\n+                    setup_ch.send(child_ch);\n+                    pingpong(&child_po, &parent_ch);\n+                };\n+\n+                let child_ch = setup_po.recv();\n+                child_ch.send(20);\n+                pingpong(&parent_po, &child_ch);\n+                unsafe {\n+                    let mut lock = lock;\n+                    lock.lock();\n+                    lock.signal();   // wakeup waiting scheduler\n+                    lock.wait();     // wait for them to grab the lock\n+                    lock.unlock();\n+                    lock.destroy();  // now we're guaranteed they have no locks\n+                }\n+            })));\n+            drop(handle);\n+\n+            fin_po.recv();\n+            pool.shutdown();\n+        }\n+\n+    }\n }"}, {"sha": "2f0f9bf64af4c5506df468398289f04cec4bfea2", "filename": "src/libstd/task.rs", "status": "modified", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/b47ff23673559ee9a5b91221e0212fd6a57d9802/src%2Flibstd%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b47ff23673559ee9a5b91221e0212fd6a57d9802/src%2Flibstd%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask.rs?ref=b47ff23673559ee9a5b91221e0212fd6a57d9802", "patch": "@@ -529,66 +529,6 @@ fn test_spawn_sched_childs_on_default_sched() {\n     po.recv();\n }\n \n-#[test]\n-fn test_spawn_sched_blocking() {\n-    use unstable::mutex::Mutex;\n-    use num::Times;\n-\n-    unsafe {\n-\n-        // Testing that a task in one scheduler can block in foreign code\n-        // without affecting other schedulers\n-        20u.times(|| {\n-            let (start_po, start_ch) = Chan::new();\n-            let (fin_po, fin_ch) = Chan::new();\n-\n-            let mut lock = Mutex::new();\n-            let lock2 = lock.clone();\n-\n-            do spawn {\n-                let mut lock = lock2;\n-                lock.lock();\n-\n-                start_ch.send(());\n-\n-                // Block the scheduler thread\n-                lock.wait();\n-                lock.unlock();\n-\n-                fin_ch.send(());\n-            };\n-\n-            // Wait until the other task has its lock\n-            start_po.recv();\n-\n-            fn pingpong(po: &Port<int>, ch: &Chan<int>) {\n-                let mut val = 20;\n-                while val > 0 {\n-                    val = po.recv();\n-                    ch.try_send(val - 1);\n-                }\n-            }\n-\n-            let (setup_po, setup_ch) = Chan::new();\n-            let (parent_po, parent_ch) = Chan::new();\n-            do spawn {\n-                let (child_po, child_ch) = Chan::new();\n-                setup_ch.send(child_ch);\n-                pingpong(&child_po, &parent_ch);\n-            };\n-\n-            let child_ch = setup_po.recv();\n-            child_ch.send(20);\n-            pingpong(&parent_po, &child_ch);\n-            lock.lock();\n-            lock.signal();\n-            lock.unlock();\n-            fin_po.recv();\n-            lock.destroy();\n-        })\n-    }\n-}\n-\n #[cfg(test)]\n fn avoid_copying_the_body(spawnfn: |v: proc()|) {\n     let (p, ch) = Chan::<uint>::new();"}]}