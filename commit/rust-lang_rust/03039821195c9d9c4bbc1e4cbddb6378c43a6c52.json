{"sha": "03039821195c9d9c4bbc1e4cbddb6378c43a6c52", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzMDM5ODIxMTk1YzlkOWM0YmJjMWU0Y2JkZGI2Mzc4YzQzYTZjNTI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-02T15:22:23Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-02T15:22:42Z"}, "message": "New runnables API", "tree": {"sha": "2fb425ca0ed235ae051d9ea0547ebf8664c3295d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2fb425ca0ed235ae051d9ea0547ebf8664c3295d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03039821195c9d9c4bbc1e4cbddb6378c43a6c52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03039821195c9d9c4bbc1e4cbddb6378c43a6c52", "html_url": "https://github.com/rust-lang/rust/commit/03039821195c9d9c4bbc1e4cbddb6378c43a6c52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03039821195c9d9c4bbc1e4cbddb6378c43a6c52/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f137b3a4e626bdef165e0ad7c61c88c44797798e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f137b3a4e626bdef165e0ad7c61c88c44797798e", "html_url": "https://github.com/rust-lang/rust/commit/f137b3a4e626bdef165e0ad7c61c88c44797798e"}], "stats": {"total": 226, "additions": 108, "deletions": 118}, "files": [{"sha": "c7bb1e69f8a575765da2aeb9b82d7dbb25904577", "filename": "crates/ra_ide/src/display/navigation_target.rs", "status": "modified", "additions": 23, "deletions": 43, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/03039821195c9d9c4bbc1e4cbddb6378c43a6c52/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03039821195c9d9c4bbc1e4cbddb6378c43a6c52/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=03039821195c9d9c4bbc1e4cbddb6378c43a6c52", "patch": "@@ -92,15 +92,16 @@ impl NavigationTarget {\n         let name = module.name(db).map(|it| it.to_string().into()).unwrap_or_default();\n         if let Some(src) = module.declaration_source(db) {\n             let frange = original_range(db, src.as_ref().map(|it| it.syntax()));\n-            return NavigationTarget::from_syntax(\n+            let mut res = NavigationTarget::from_syntax(\n                 frange.file_id,\n                 name,\n                 None,\n                 frange.range,\n                 src.value.syntax().kind(),\n-                src.value.doc_comment_text(),\n-                src.value.short_label(),\n             );\n+            res.docs = src.value.doc_comment_text();\n+            res.description = src.value.short_label();\n+            return res;\n         }\n         module.to_nav(db)\n     }\n@@ -130,11 +131,9 @@ impl NavigationTarget {\n     }\n \n     /// Allows `NavigationTarget` to be created from a `NameOwner`\n-    fn from_named(\n+    pub(crate) fn from_named(\n         db: &RootDatabase,\n         node: InFile<&dyn ast::NameOwner>,\n-        docs: Option<String>,\n-        description: Option<String>,\n     ) -> NavigationTarget {\n         //FIXME: use `_` instead of empty string\n         let name = node.value.name().map(|it| it.text().clone()).unwrap_or_default();\n@@ -148,8 +147,6 @@ impl NavigationTarget {\n             focus_range,\n             frange.range,\n             node.value.syntax().kind(),\n-            docs,\n-            description,\n         )\n     }\n \n@@ -159,8 +156,6 @@ impl NavigationTarget {\n         focus_range: Option<TextRange>,\n         full_range: TextRange,\n         kind: SyntaxKind,\n-        docs: Option<String>,\n-        description: Option<String>,\n     ) -> NavigationTarget {\n         NavigationTarget {\n             file_id,\n@@ -169,8 +164,8 @@ impl NavigationTarget {\n             full_range,\n             focus_range,\n             container_name: None,\n-            description,\n-            docs,\n+            description: None,\n+            docs: None,\n         }\n     }\n }\n@@ -238,12 +233,11 @@ where\n {\n     fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n         let src = self.source(db);\n-        NavigationTarget::from_named(\n-            db,\n-            src.as_ref().map(|it| it as &dyn ast::NameOwner),\n-            src.value.doc_comment_text(),\n-            src.value.short_label(),\n-        )\n+        let mut res =\n+            NavigationTarget::from_named(db, src.as_ref().map(|it| it as &dyn ast::NameOwner));\n+        res.docs = src.value.doc_comment_text();\n+        res.description = src.value.short_label();\n+        res\n     }\n }\n \n@@ -258,15 +252,7 @@ impl ToNav for hir::Module {\n             }\n         };\n         let frange = original_range(db, src.with_value(syntax));\n-        NavigationTarget::from_syntax(\n-            frange.file_id,\n-            name,\n-            focus,\n-            frange.range,\n-            syntax.kind(),\n-            None,\n-            None,\n-        )\n+        NavigationTarget::from_syntax(frange.file_id, name, focus, frange.range, syntax.kind())\n     }\n }\n \n@@ -285,8 +271,6 @@ impl ToNav for hir::ImplDef {\n             None,\n             frange.range,\n             src.value.syntax().kind(),\n-            None,\n-            None,\n         )\n     }\n }\n@@ -296,12 +280,12 @@ impl ToNav for hir::Field {\n         let src = self.source(db);\n \n         match &src.value {\n-            FieldSource::Named(it) => NavigationTarget::from_named(\n-                db,\n-                src.with_value(it),\n-                it.doc_comment_text(),\n-                it.short_label(),\n-            ),\n+            FieldSource::Named(it) => {\n+                let mut res = NavigationTarget::from_named(db, src.with_value(it));\n+                res.docs = it.doc_comment_text();\n+                res.description = it.short_label();\n+                res\n+            }\n             FieldSource::Pos(it) => {\n                 let frange = original_range(db, src.with_value(it.syntax()));\n                 NavigationTarget::from_syntax(\n@@ -310,8 +294,6 @@ impl ToNav for hir::Field {\n                     None,\n                     frange.range,\n                     it.syntax().kind(),\n-                    None,\n-                    None,\n                 )\n             }\n         }\n@@ -322,12 +304,10 @@ impl ToNav for hir::MacroDef {\n     fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n         let src = self.source(db);\n         log::debug!(\"nav target {:#?}\", src.value.syntax());\n-        NavigationTarget::from_named(\n-            db,\n-            src.as_ref().map(|it| it as &dyn ast::NameOwner),\n-            src.value.doc_comment_text(),\n-            None,\n-        )\n+        let mut res =\n+            NavigationTarget::from_named(db, src.as_ref().map(|it| it as &dyn ast::NameOwner));\n+        res.docs = src.value.doc_comment_text();\n+        res\n     }\n }\n "}, {"sha": "9239ca61bd92d05d76ff26bd58342a68e87a8c87", "filename": "crates/ra_ide/src/runnables.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/03039821195c9d9c4bbc1e4cbddb6378c43a6c52/crates%2Fra_ide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03039821195c9d9c4bbc1e4cbddb6378c43a6c52/crates%2Fra_ide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Frunnables.rs?ref=03039821195c9d9c4bbc1e4cbddb6378c43a6c52", "patch": "@@ -1,19 +1,19 @@\n+use std::fmt;\n+\n use hir::{AsAssocItem, Attrs, HirFileId, InFile, Semantics};\n use itertools::Itertools;\n+use ra_cfg::CfgExpr;\n use ra_ide_db::RootDatabase;\n use ra_syntax::{\n-    ast::{self, AstNode, AttrsOwner, ModuleItemOwner, NameOwner},\n-    match_ast, SyntaxNode, TextRange,\n+    ast::{self, AstNode, AttrsOwner, DocCommentsOwner, ModuleItemOwner, NameOwner},\n+    match_ast, SyntaxNode,\n };\n \n-use crate::FileId;\n-use ast::DocCommentsOwner;\n-use ra_cfg::CfgExpr;\n-use std::fmt::Display;\n+use crate::{display::ToNav, FileId, NavigationTarget};\n \n #[derive(Debug)]\n pub struct Runnable {\n-    pub range: TextRange,\n+    pub nav: NavigationTarget,\n     pub kind: RunnableKind,\n     pub cfg_exprs: Vec<CfgExpr>,\n }\n@@ -24,8 +24,8 @@ pub enum TestId {\n     Path(String),\n }\n \n-impl Display for TestId {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+impl fmt::Display for TestId {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match self {\n             TestId::Name(name) => write!(f, \"{}\", name),\n             TestId::Path(path) => write!(f, \"{}\", path),\n@@ -131,7 +131,8 @@ fn runnable_fn(\n     let cfg_exprs =\n         attrs.by_key(\"cfg\").tt_values().map(|subtree| ra_cfg::parse_cfg(subtree)).collect();\n \n-    Some(Runnable { range: fn_def.syntax().text_range(), kind, cfg_exprs })\n+    let nav = NavigationTarget::from_named(sema.db, InFile::new(file_id.into(), &fn_def));\n+    Some(Runnable { nav, kind, cfg_exprs })\n }\n \n #[derive(Debug)]\n@@ -183,7 +184,6 @@ fn runnable_mod(\n     if !has_test_function {\n         return None;\n     }\n-    let range = module.syntax().text_range();\n     let module_def = sema.to_def(&module)?;\n \n     let path = module_def\n@@ -197,7 +197,8 @@ fn runnable_mod(\n     let cfg_exprs =\n         attrs.by_key(\"cfg\").tt_values().map(|subtree| ra_cfg::parse_cfg(subtree)).collect();\n \n-    Some(Runnable { range, kind: RunnableKind::TestMod { path }, cfg_exprs })\n+    let nav = module_def.to_nav(sema.db);\n+    Some(Runnable { nav, kind: RunnableKind::TestMod { path }, cfg_exprs })\n }\n \n #[cfg(test)]"}, {"sha": "9381f75d390c8945f471df3a4aa47c62d3d71e17", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/03039821195c9d9c4bbc1e4cbddb6378c43a6c52/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03039821195c9d9c4bbc1e4cbddb6378c43a6c52/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=03039821195c9d9c4bbc1e4cbddb6378c43a6c52", "patch": "@@ -4,7 +4,6 @@ use std::{collections::HashMap, path::PathBuf};\n \n use lsp_types::request::Request;\n use lsp_types::{Position, Range, TextDocumentIdentifier};\n-use rustc_hash::FxHashMap;\n use serde::{Deserialize, Serialize};\n \n pub enum AnalyzerStatus {}\n@@ -121,25 +120,30 @@ pub struct RunnablesParams {\n     pub position: Option<Position>,\n }\n \n-// Must strictly correspond to the executable name\n+#[derive(Deserialize, Serialize, Debug)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct Runnable {\n+    pub label: String,\n+    #[serde(skip_serializing_if = \"Option::is_none\")]\n+    pub location: Option<lsp_types::LocationLink>,\n+    pub kind: RunnableKind,\n+    pub args: CargoRunnable,\n+}\n+\n #[derive(Serialize, Deserialize, Debug)]\n #[serde(rename_all = \"lowercase\")]\n pub enum RunnableKind {\n     Cargo,\n-    Rustc,\n-    Rustup,\n }\n \n #[derive(Deserialize, Serialize, Debug)]\n #[serde(rename_all = \"camelCase\")]\n-pub struct Runnable {\n-    pub range: Range,\n-    pub label: String,\n-    pub kind: RunnableKind,\n-    pub args: Vec<String>,\n-    pub extra_args: Vec<String>,\n-    pub env: FxHashMap<String, String>,\n-    pub cwd: Option<PathBuf>,\n+pub struct CargoRunnable {\n+    pub workspace_root: Option<PathBuf>,\n+    // command, --package and --lib stuff\n+    pub cargo_args: Vec<String>,\n+    // stuff after --\n+    pub executable_args: Vec<String>,\n }\n \n pub enum InlayHints {}"}, {"sha": "7fd6917649a3eeeb5a069dc3f0f83a61bc9cd5be", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/03039821195c9d9c4bbc1e4cbddb6378c43a6c52/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03039821195c9d9c4bbc1e4cbddb6378c43a6c52/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=03039821195c9d9c4bbc1e4cbddb6378c43a6c52", "patch": "@@ -23,7 +23,6 @@ use ra_ide::{\n use ra_prof::profile;\n use ra_project_model::TargetKind;\n use ra_syntax::{AstNode, SyntaxKind, TextRange, TextSize};\n-use rustc_hash::FxHashMap;\n use serde::{Deserialize, Serialize};\n use serde_json::to_value;\n use stdx::format_to;\n@@ -401,7 +400,7 @@ pub fn handle_runnables(\n     let cargo_spec = CargoTargetSpec::for_file(&world, file_id)?;\n     for runnable in world.analysis().runnables(file_id)? {\n         if let Some(offset) = offset {\n-            if !runnable.range.contains_inclusive(offset) {\n+            if !runnable.nav.full_range().contains_inclusive(offset) {\n                 continue;\n             }\n         }\n@@ -422,25 +421,31 @@ pub fn handle_runnables(\n         Some(spec) => {\n             for &cmd in [\"check\", \"test\"].iter() {\n                 res.push(lsp_ext::Runnable {\n-                    range: Default::default(),\n                     label: format!(\"cargo {} -p {}\", cmd, spec.package),\n+                    location: None,\n                     kind: lsp_ext::RunnableKind::Cargo,\n-                    args: vec![cmd.to_string(), \"--package\".to_string(), spec.package.clone()],\n-                    extra_args: Vec::new(),\n-                    env: FxHashMap::default(),\n-                    cwd: workspace_root.map(|root| root.to_owned()),\n+                    args: lsp_ext::CargoRunnable {\n+                        workspace_root: workspace_root.map(|root| root.to_owned()),\n+                        cargo_args: vec![\n+                            cmd.to_string(),\n+                            \"--package\".to_string(),\n+                            spec.package.clone(),\n+                        ],\n+                        executable_args: Vec::new(),\n+                    },\n                 })\n             }\n         }\n         None => {\n             res.push(lsp_ext::Runnable {\n-                range: Default::default(),\n                 label: \"cargo check --workspace\".to_string(),\n+                location: None,\n                 kind: lsp_ext::RunnableKind::Cargo,\n-                args: vec![\"check\".to_string(), \"--workspace\".to_string()],\n-                extra_args: Vec::new(),\n-                env: FxHashMap::default(),\n-                cwd: workspace_root.map(|root| root.to_owned()),\n+                args: lsp_ext::CargoRunnable {\n+                    workspace_root: workspace_root.map(|root| root.to_owned()),\n+                    cargo_args: vec![\"check\".to_string(), \"--workspace\".to_string()],\n+                    executable_args: Vec::new(),\n+                },\n             });\n         }\n     }\n@@ -782,10 +787,11 @@ pub fn handle_code_lens(\n                 }\n             };\n \n-            let mut r = to_proto::runnable(&world, file_id, runnable)?;\n+            let range = to_proto::range(&line_index, runnable.nav.range());\n+            let r = to_proto::runnable(&world, file_id, runnable)?;\n             if world.config.lens.run {\n                 let lens = CodeLens {\n-                    range: r.range,\n+                    range,\n                     command: Some(Command {\n                         title: run_title.to_string(),\n                         command: \"rust-analyzer.runSingle\".into(),\n@@ -797,13 +803,8 @@ pub fn handle_code_lens(\n             }\n \n             if debugee && world.config.lens.debug {\n-                if r.args[0] == \"run\" {\n-                    r.args[0] = \"build\".into();\n-                } else {\n-                    r.args.push(\"--no-run\".into());\n-                }\n                 let debug_lens = CodeLens {\n-                    range: r.range,\n+                    range,\n                     command: Some(Command {\n                         title: \"Debug\".into(),\n                         command: \"rust-analyzer.debugSingle\".into(),"}, {"sha": "85304aa8778e11c0b54f09abf56bf0f02859b9ab", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/03039821195c9d9c4bbc1e4cbddb6378c43a6c52/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03039821195c9d9c4bbc1e4cbddb6378c43a6c52/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=03039821195c9d9c4bbc1e4cbddb6378c43a6c52", "patch": "@@ -8,7 +8,6 @@ use ra_ide::{\n };\n use ra_syntax::{SyntaxKind, TextRange, TextSize};\n use ra_vfs::LineEndings;\n-use rustc_hash::FxHashMap;\n \n use crate::{\n     cargo_target_spec::CargoTargetSpec, lsp_ext, semantic_tokens, world::WorldSnapshot, Result,\n@@ -638,9 +637,8 @@ pub(crate) fn runnable(\n ) -> Result<lsp_ext::Runnable> {\n     let spec = CargoTargetSpec::for_file(world, file_id)?;\n     let target = spec.as_ref().map(|s| s.target.clone());\n-    let (args, extra_args) =\n+    let (cargo_args, executable_args) =\n         CargoTargetSpec::runnable_args(spec, &runnable.kind, &runnable.cfg_exprs)?;\n-    let line_index = world.analysis().file_line_index(file_id)?;\n     let label = match &runnable.kind {\n         RunnableKind::Test { test_id, .. } => format!(\"test {}\", test_id),\n         RunnableKind::TestMod { path } => format!(\"test-mod {}\", path),\n@@ -650,18 +648,16 @@ pub(crate) fn runnable(\n             target.map_or_else(|| \"run binary\".to_string(), |t| format!(\"run {}\", t))\n         }\n     };\n+    let location = location_link(world, None, runnable.nav)?;\n \n     Ok(lsp_ext::Runnable {\n-        range: range(&line_index, runnable.range),\n         label,\n+        location: Some(location),\n         kind: lsp_ext::RunnableKind::Cargo,\n-        args,\n-        extra_args,\n-        env: {\n-            let mut m = FxHashMap::default();\n-            m.insert(\"RUST_BACKTRACE\".to_string(), \"short\".to_string());\n-            m\n+        args: lsp_ext::CargoRunnable {\n+            workspace_root: world.workspace_root_for(file_id).map(|root| root.to_owned()),\n+            cargo_args,\n+            executable_args,\n         },\n-        cwd: world.workspace_root_for(file_id).map(|root| root.to_owned()),\n     })\n }"}, {"sha": "a0c9b3ab2e64a04414e6641b14e7fc74bbae44c5", "filename": "editors/code/src/debug.ts", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/03039821195c9d9c4bbc1e4cbddb6378c43a6c52/editors%2Fcode%2Fsrc%2Fdebug.ts", "raw_url": "https://github.com/rust-lang/rust/raw/03039821195c9d9c4bbc1e4cbddb6378c43a6c52/editors%2Fcode%2Fsrc%2Fdebug.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fdebug.ts?ref=03039821195c9d9c4bbc1e4cbddb6378c43a6c52", "patch": "@@ -114,8 +114,8 @@ async function getDebugConfiguration(ctx: Ctx, runnable: ra.Runnable): Promise<v\n }\n \n async function getDebugExecutable(runnable: ra.Runnable): Promise<string> {\n-    const cargo = new Cargo(runnable.cwd || '.', debugOutput);\n-    const executable = await cargo.executableFromArgs(runnable.args);\n+    const cargo = new Cargo(runnable.args.workspaceRoot || '.', debugOutput);\n+    const executable = await cargo.executableFromArgs(runnable.args.cargoArgs);\n \n     // if we are here, there were no compilation errors.\n     return executable;\n@@ -127,8 +127,8 @@ function getLldbDebugConfig(runnable: ra.Runnable, executable: string, sourceFil\n         request: \"launch\",\n         name: runnable.label,\n         program: executable,\n-        args: runnable.extraArgs,\n-        cwd: runnable.cwd,\n+        args: runnable.args.executableArgs,\n+        cwd: runnable.args.workspaceRoot,\n         sourceMap: sourceFileMap,\n         sourceLanguages: [\"rust\"]\n     };\n@@ -140,8 +140,8 @@ function getCppvsDebugConfig(runnable: ra.Runnable, executable: string, sourceFi\n         request: \"launch\",\n         name: runnable.label,\n         program: executable,\n-        args: runnable.extraArgs,\n-        cwd: runnable.cwd,\n+        args: runnable.args.executableArgs,\n+        cwd: runnable.args.workspaceRoot,\n         sourceFileMap: sourceFileMap,\n     };\n }"}, {"sha": "73d5736787d73da4054653afbee987fd067fcd5b", "filename": "editors/code/src/lsp_ext.ts", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/03039821195c9d9c4bbc1e4cbddb6378c43a6c52/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "raw_url": "https://github.com/rust-lang/rust/raw/03039821195c9d9c4bbc1e4cbddb6378c43a6c52/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Flsp_ext.ts?ref=03039821195c9d9c4bbc1e4cbddb6378c43a6c52", "patch": "@@ -46,16 +46,15 @@ export interface RunnablesParams {\n     position: lc.Position | null;\n }\n \n-export type RunnableKind = \"cargo\" | \"rustc\" | \"rustup\";\n-\n export interface Runnable {\n-    range: lc.Range;\n     label: string;\n-    kind: RunnableKind;\n-    args: string[];\n-    extraArgs: string[];\n-    env: { [key: string]: string };\n-    cwd: string | null;\n+    location?: lc.LocationLink;\n+    kind: \"cargo\";\n+    args: {\n+        workspaceRoot?: string;\n+        cargoArgs: string[];\n+        executableArgs: string[];\n+    };\n }\n export const runnables = new lc.RequestType<RunnablesParams, Runnable[], void>(\"rust-analyzer/runnables\");\n "}, {"sha": "5c790741f3874b7017741e9f68f65b63359f301d", "filename": "editors/code/src/run.ts", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/03039821195c9d9c4bbc1e4cbddb6378c43a6c52/editors%2Fcode%2Fsrc%2Frun.ts", "raw_url": "https://github.com/rust-lang/rust/raw/03039821195c9d9c4bbc1e4cbddb6378c43a6c52/editors%2Fcode%2Fsrc%2Frun.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Frun.ts?ref=03039821195c9d9c4bbc1e4cbddb6378c43a6c52", "patch": "@@ -103,18 +103,27 @@ interface CargoTaskDefinition extends vscode.TaskDefinition {\n     env?: { [key: string]: string };\n }\n \n-export function createTask(spec: ra.Runnable): vscode.Task {\n+export function createTask(runnable: ra.Runnable): vscode.Task {\n     const TASK_SOURCE = 'Rust';\n+\n+    let command;\n+    switch (runnable.kind) {\n+        case \"cargo\": command = toolchain.getPathForExecutable(\"cargo\");\n+    }\n+    const args = runnable.args.cargoArgs;\n+    if (runnable.args.executableArgs.length > 0) {\n+        args.push('--', ...runnable.args.executableArgs);\n+    }\n     const definition: CargoTaskDefinition = {\n         type: 'cargo',\n-        label: spec.label,\n-        command: toolchain.getPathForExecutable(spec.kind),\n-        args: spec.extraArgs ? [...spec.args, '--', ...spec.extraArgs] : spec.args,\n-        env: Object.assign({}, process.env, spec.env),\n+        label: runnable.label,\n+        command,\n+        args,\n+        env: Object.assign({}, process.env as { [key: string]: string }, { \"RUST_BACKTRACE\": \"short\" }),\n     };\n \n     const execOption: vscode.ShellExecutionOptions = {\n-        cwd: spec.cwd || '.',\n+        cwd: runnable.args.workspaceRoot || '.',\n         env: definition.env,\n     };\n     const exec = new vscode.ShellExecution("}]}