{"sha": "f54bfac074657271b03f78b8847e2fbcdd1d76ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1NGJmYWMwNzQ2NTcyNzFiMDNmNzhiODg0N2UyZmJjZGQxZDc2YWQ=", "commit": {"author": {"name": "Antoine Martin", "email": "antoine97.martin@gmail.com", "date": "2020-10-01T08:06:37Z"}, "committer": {"name": "Antoine Martin", "email": "antoine97.martin@gmail.com", "date": "2020-10-01T08:06:37Z"}, "message": "Implement multiple return terminators optimization", "tree": {"sha": "d8a6a7af3ce1c05392774277a8938ab869e14393", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8a6a7af3ce1c05392774277a8938ab869e14393"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f54bfac074657271b03f78b8847e2fbcdd1d76ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f54bfac074657271b03f78b8847e2fbcdd1d76ad", "html_url": "https://github.com/rust-lang/rust/commit/f54bfac074657271b03f78b8847e2fbcdd1d76ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f54bfac074657271b03f78b8847e2fbcdd1d76ad/comments", "author": {"login": "alarsyo", "id": 15170378, "node_id": "MDQ6VXNlcjE1MTcwMzc4", "avatar_url": "https://avatars.githubusercontent.com/u/15170378?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alarsyo", "html_url": "https://github.com/alarsyo", "followers_url": "https://api.github.com/users/alarsyo/followers", "following_url": "https://api.github.com/users/alarsyo/following{/other_user}", "gists_url": "https://api.github.com/users/alarsyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/alarsyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alarsyo/subscriptions", "organizations_url": "https://api.github.com/users/alarsyo/orgs", "repos_url": "https://api.github.com/users/alarsyo/repos", "events_url": "https://api.github.com/users/alarsyo/events{/privacy}", "received_events_url": "https://api.github.com/users/alarsyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alarsyo", "id": 15170378, "node_id": "MDQ6VXNlcjE1MTcwMzc4", "avatar_url": "https://avatars.githubusercontent.com/u/15170378?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alarsyo", "html_url": "https://github.com/alarsyo", "followers_url": "https://api.github.com/users/alarsyo/followers", "following_url": "https://api.github.com/users/alarsyo/following{/other_user}", "gists_url": "https://api.github.com/users/alarsyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/alarsyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alarsyo/subscriptions", "organizations_url": "https://api.github.com/users/alarsyo/orgs", "repos_url": "https://api.github.com/users/alarsyo/repos", "events_url": "https://api.github.com/users/alarsyo/events{/privacy}", "received_events_url": "https://api.github.com/users/alarsyo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bbc443cc6657b5df623101f74688ec92e35f35d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bbc443cc6657b5df623101f74688ec92e35f35d", "html_url": "https://github.com/rust-lang/rust/commit/3bbc443cc6657b5df623101f74688ec92e35f35d"}], "stats": {"total": 41, "additions": 41, "deletions": 0}, "files": [{"sha": "67193814a40cb7e1323a7836b3c68016a876db1c", "filename": "compiler/rustc_mir/src/transform/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f54bfac074657271b03f78b8847e2fbcdd1d76ad/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54bfac074657271b03f78b8847e2fbcdd1d76ad/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs?ref=f54bfac074657271b03f78b8847e2fbcdd1d76ad", "patch": "@@ -33,6 +33,7 @@ pub mod inline;\n pub mod instcombine;\n pub mod instrument_coverage;\n pub mod match_branches;\n+pub mod multiple_return_terminators;\n pub mod no_landing_pads;\n pub mod nrvo;\n pub mod promote_consts;\n@@ -464,6 +465,7 @@ fn run_optimization_passes<'tcx>(\n         &remove_unneeded_drops::RemoveUnneededDrops,\n         &match_branches::MatchBranchSimplification,\n         // inst combine is after MatchBranchSimplification to clean up Ne(_1, false)\n+        &multiple_return_terminators::MultipleReturnTerminators,\n         &instcombine::InstCombine,\n         &const_prop::ConstProp,\n         &simplify_branches::SimplifyBranches::new(\"after-const-prop\"),\n@@ -478,6 +480,7 @@ fn run_optimization_passes<'tcx>(\n         &simplify::SimplifyCfg::new(\"final\"),\n         &nrvo::RenameReturnPlace,\n         &simplify::SimplifyLocals,\n+        &multiple_return_terminators::MultipleReturnTerminators,\n     ];\n \n     // Optimizations to run even if mir optimizations have been disabled."}, {"sha": "3c9c8454f7470396f668aa7a6997ac2fc2a8b815", "filename": "compiler/rustc_mir/src/transform/multiple_return_terminators.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f54bfac074657271b03f78b8847e2fbcdd1d76ad/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmultiple_return_terminators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54bfac074657271b03f78b8847e2fbcdd1d76ad/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmultiple_return_terminators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmultiple_return_terminators.rs?ref=f54bfac074657271b03f78b8847e2fbcdd1d76ad", "patch": "@@ -0,0 +1,38 @@\n+//! This pass removes jumps to basic blocks containing only a return, and replaces them with a\n+//! return instead.\n+\n+use crate::transform::{simplify, MirPass, MirSource};\n+use rustc_index::bit_set::BitSet;\n+use rustc_middle::mir::*;\n+use rustc_middle::ty::TyCtxt;\n+\n+pub struct MultipleReturnTerminators;\n+\n+impl<'tcx> MirPass<'tcx> for MultipleReturnTerminators {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, _: MirSource<'tcx>, body: &mut Body<'tcx>) {\n+        if tcx.sess.opts.debugging_opts.mir_opt_level < 3 {\n+            return;\n+        }\n+\n+        // find basic blocks with no statement and a return terminator\n+        let mut bbs_simple_returns = BitSet::new_empty(body.basic_blocks().len());\n+        let bbs = body.basic_blocks_mut();\n+        for idx in bbs.indices() {\n+            if bbs[idx].statements.is_empty()\n+                && bbs[idx].terminator().kind == TerminatorKind::Return\n+            {\n+                bbs_simple_returns.insert(idx);\n+            }\n+        }\n+\n+        for bb in bbs {\n+            if let TerminatorKind::Goto { target } = bb.terminator().kind {\n+                if bbs_simple_returns.contains(target) {\n+                    bb.terminator_mut().kind = TerminatorKind::Return;\n+                }\n+            }\n+        }\n+\n+        simplify::remove_dead_blocks(body)\n+    }\n+}"}]}