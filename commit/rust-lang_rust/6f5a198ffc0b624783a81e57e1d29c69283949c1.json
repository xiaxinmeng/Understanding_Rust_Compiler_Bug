{"sha": "6f5a198ffc0b624783a81e57e1d29c69283949c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmNWExOThmZmMwYjYyNDc4M2E4MWU1N2UxZDI5YzY5MjgzOTQ5YzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-21T02:39:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-21T02:39:39Z"}, "message": "Auto merge of #85382 - Aaron1011:project-eval, r=nikomatsakis\n\nAlways produce sub-obligations when using cached projection result\n\nSee https://github.com/rust-lang/rust/issues/85360\n\nWhen we skip adding the sub-obligations to the `obligation` list, we can affect whether or not the final result is `EvaluatedToOk` or `EvaluatedToOkModuloObligations`. This creates problems for incremental compilation, since the projection cache is untracked shared state.\n\nTo solve this issue, we unconditionally process the sub-obligations. Surprisingly, this is a slight performance *win* in many cases.", "tree": {"sha": "8246ced7254c97eb97f338dfeadb681fdd676d3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8246ced7254c97eb97f338dfeadb681fdd676d3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f5a198ffc0b624783a81e57e1d29c69283949c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f5a198ffc0b624783a81e57e1d29c69283949c1", "html_url": "https://github.com/rust-lang/rust/commit/6f5a198ffc0b624783a81e57e1d29c69283949c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f5a198ffc0b624783a81e57e1d29c69283949c1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "746ac21e48728c1207b8649cb4159d3de24ae957", "url": "https://api.github.com/repos/rust-lang/rust/commits/746ac21e48728c1207b8649cb4159d3de24ae957", "html_url": "https://github.com/rust-lang/rust/commit/746ac21e48728c1207b8649cb4159d3de24ae957"}, {"sha": "8657bb251cc11d37cf5600350d1c2351728b4e4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8657bb251cc11d37cf5600350d1c2351728b4e4e", "html_url": "https://github.com/rust-lang/rust/commit/8657bb251cc11d37cf5600350d1c2351728b4e4e"}], "stats": {"total": 10, "additions": 1, "deletions": 9}, "files": [{"sha": "388413ae06b5550834919ee46c914f010a45814c", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6f5a198ffc0b624783a81e57e1d29c69283949c1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f5a198ffc0b624783a81e57e1d29c69283949c1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=6f5a198ffc0b624783a81e57e1d29c69283949c1", "patch": "@@ -529,15 +529,7 @@ fn opt_normalize_projection_type<'a, 'b, 'tcx>(\n             // evaluation this is not the case, and dropping the trait\n             // evaluations can causes ICEs (e.g., #43132).\n             debug!(?ty, \"found normalized ty\");\n-\n-            // Once we have inferred everything we need to know, we\n-            // can ignore the `obligations` from that point on.\n-            if infcx.unresolved_type_vars(&ty.value).is_none() {\n-                infcx.inner.borrow_mut().projection_cache().complete_normalized(cache_key, &ty);\n-            // No need to extend `obligations`.\n-            } else {\n-                obligations.extend(ty.obligations);\n-            }\n+            obligations.extend(ty.obligations);\n             return Ok(Some(ty.value));\n         }\n         Err(ProjectionCacheEntry::Error) => {"}]}