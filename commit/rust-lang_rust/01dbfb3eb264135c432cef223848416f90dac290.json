{"sha": "01dbfb3eb264135c432cef223848416f90dac290", "node_id": "C_kwDOAAsO6NoAKDAxZGJmYjNlYjI2NDEzNWM0MzJjZWYyMjM4NDg0MTZmOTBkYWMyOTA", "commit": {"author": {"name": "codehorseman", "email": "cricis@yeah.net", "date": "2022-03-16T12:12:30Z"}, "committer": {"name": "codehorseman", "email": "cricis@yeah.net", "date": "2022-03-16T12:12:30Z"}, "message": "resolve the conflict in compiler/rustc_session/src/parse.rs\n\nSigned-off-by: codehorseman <cricis@yeah.net>", "tree": {"sha": "67e0a6d5e9a26aa88fe06b38651fe030d994f508", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67e0a6d5e9a26aa88fe06b38651fe030d994f508"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01dbfb3eb264135c432cef223848416f90dac290", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01dbfb3eb264135c432cef223848416f90dac290", "html_url": "https://github.com/rust-lang/rust/commit/01dbfb3eb264135c432cef223848416f90dac290", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01dbfb3eb264135c432cef223848416f90dac290/comments", "author": {"login": "codehorseman", "id": 45927691, "node_id": "MDQ6VXNlcjQ1OTI3Njkx", "avatar_url": "https://avatars.githubusercontent.com/u/45927691?v=4", "gravatar_id": "", "url": "https://api.github.com/users/codehorseman", "html_url": "https://github.com/codehorseman", "followers_url": "https://api.github.com/users/codehorseman/followers", "following_url": "https://api.github.com/users/codehorseman/following{/other_user}", "gists_url": "https://api.github.com/users/codehorseman/gists{/gist_id}", "starred_url": "https://api.github.com/users/codehorseman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/codehorseman/subscriptions", "organizations_url": "https://api.github.com/users/codehorseman/orgs", "repos_url": "https://api.github.com/users/codehorseman/repos", "events_url": "https://api.github.com/users/codehorseman/events{/privacy}", "received_events_url": "https://api.github.com/users/codehorseman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "codehorseman", "id": 45927691, "node_id": "MDQ6VXNlcjQ1OTI3Njkx", "avatar_url": "https://avatars.githubusercontent.com/u/45927691?v=4", "gravatar_id": "", "url": "https://api.github.com/users/codehorseman", "html_url": "https://github.com/codehorseman", "followers_url": "https://api.github.com/users/codehorseman/followers", "following_url": "https://api.github.com/users/codehorseman/following{/other_user}", "gists_url": "https://api.github.com/users/codehorseman/gists{/gist_id}", "starred_url": "https://api.github.com/users/codehorseman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/codehorseman/subscriptions", "organizations_url": "https://api.github.com/users/codehorseman/orgs", "repos_url": "https://api.github.com/users/codehorseman/repos", "events_url": "https://api.github.com/users/codehorseman/events{/privacy}", "received_events_url": "https://api.github.com/users/codehorseman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8e564715e0eb17130e99e8fcc92a36fce7feaf5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8e564715e0eb17130e99e8fcc92a36fce7feaf5", "html_url": "https://github.com/rust-lang/rust/commit/d8e564715e0eb17130e99e8fcc92a36fce7feaf5"}], "stats": {"total": 172, "additions": 86, "deletions": 86}, "files": [{"sha": "1784e4a6c63a8cb0d9e2ff3731e96af2bf259f9b", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01dbfb3eb264135c432cef223848416f90dac290/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01dbfb3eb264135c432cef223848416f90dac290/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=01dbfb3eb264135c432cef223848416f90dac290", "patch": "@@ -26,7 +26,7 @@ pub(super) struct ItemLowerer<'a, 'lowering, 'hir> {\n }\n \n /// When we have a ty alias we *may* have two where clauses. To give the best diagnostics, we set the span\n-/// to the where clause that is prefered, if it exists. Otherwise, it sets the span to the other where\n+/// to the where clause that is preferred, if it exists. Otherwise, it sets the span to the other where\n /// clause if it exists.\n fn add_ty_alias_where_clause(\n     generics: &mut ast::Generics,"}, {"sha": "88e049410790dd40afe59f2e0ef7be0ea1a76e57", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01dbfb3eb264135c432cef223848416f90dac290/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01dbfb3eb264135c432cef223848416f90dac290/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=01dbfb3eb264135c432cef223848416f90dac290", "patch": "@@ -3695,7 +3695,7 @@ declare_lint! {\n     /// ### Explanation\n     ///\n     /// A duplicated attribute may erroneously originate from a copy-paste and the effect of it\n-    /// being duplicated may not be obvious or desireable.\n+    /// being duplicated may not be obvious or desirable.\n     ///\n     /// For instance, doubling the `#[test]` attributes registers the test to be run twice with no\n     /// change to its environment."}, {"sha": "7d101046a96b48b67f2fdd65e7f8c434bb15a497", "filename": "compiler/rustc_middle/src/mir/interpret/pointer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01dbfb3eb264135c432cef223848416f90dac290/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01dbfb3eb264135c432cef223848416f90dac290/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs?ref=01dbfb3eb264135c432cef223848416f90dac290", "patch": "@@ -99,7 +99,7 @@ impl<T: HasDataLayout> PointerArithmetic for T {}\n /// mostly opaque; the `Machine` trait extends it with some more operations that also have access to\n /// some global state.\n /// We don't actually care about this `Debug` bound (we use `Provenance::fmt` to format the entire\n-/// pointer), but `derive` adds some unecessary bounds.\n+/// pointer), but `derive` adds some unnecessary bounds.\n pub trait Provenance: Copy + fmt::Debug {\n     /// Says whether the `offset` field of `Pointer`s with this provenance is the actual physical address.\n     /// If `true, ptr-to-int casts work by simply discarding the provenance."}, {"sha": "fe036f4f2275afa62c37065764906794d5768758", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01dbfb3eb264135c432cef223848416f90dac290/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01dbfb3eb264135c432cef223848416f90dac290/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=01dbfb3eb264135c432cef223848416f90dac290", "patch": "@@ -337,7 +337,7 @@ rustc_query_append! { [define_callbacks!][<'tcx>] }\n mod sealed {\n     use super::{DefId, LocalDefId};\n \n-    /// An analogue of the `Into` trait that's intended only for query paramaters.\n+    /// An analogue of the `Into` trait that's intended only for query parameters.\n     ///\n     /// This exists to allow queries to accept either `DefId` or `LocalDefId` while requiring that the\n     /// user call `to_def_id` to convert between them everywhere else."}, {"sha": "0a6cb276f75785ae223e55bcf4e4c79db3695a97", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01dbfb3eb264135c432cef223848416f90dac290/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01dbfb3eb264135c432cef223848416f90dac290/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=01dbfb3eb264135c432cef223848416f90dac290", "patch": "@@ -61,7 +61,7 @@ pub fn ty_slice_as_generic_args<'a, 'tcx>(ts: &'a [Ty<'tcx>]) -> &'a [GenericArg\n }\n \n impl<'tcx> List<Ty<'tcx>> {\n-    /// Allows to freely switch betwen `List<Ty<'tcx>>` and `List<GenericArg<'tcx>>`.\n+    /// Allows to freely switch between `List<Ty<'tcx>>` and `List<GenericArg<'tcx>>`.\n     ///\n     /// As lists are interned, `List<Ty<'tcx>>` and `List<GenericArg<'tcx>>` have\n     /// be interned together, see `intern_type_list` for more details."}, {"sha": "1b07dc6eb37acb8c9c9d2fa70ae87e9b7e534c97", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01dbfb3eb264135c432cef223848416f90dac290/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01dbfb3eb264135c432cef223848416f90dac290/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=01dbfb3eb264135c432cef223848416f90dac290", "patch": "@@ -486,7 +486,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     /// Given the `DefId`, returns the `DefId` of the innermost item that\n-    /// has its own type-checking context or \"inference enviornment\".\n+    /// has its own type-checking context or \"inference environment\".\n     ///\n     /// For example, a closure has its own `DefId`, but it is type-checked\n     /// with the containing item. Similarly, an inline const block has its"}, {"sha": "b4de32a3bd98ee3c9e2566abc867da0a977a88f2", "filename": "compiler/rustc_mir_build/src/thir/pattern/const_to_pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01dbfb3eb264135c432cef223848416f90dac290/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01dbfb3eb264135c432cef223848416f90dac290/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs?ref=01dbfb3eb264135c432cef223848416f90dac290", "patch": "@@ -523,7 +523,7 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n             ty::RawPtr(pointee) if pointee.ty.is_sized(tcx.at(span), param_env) => {\n                 PatKind::Constant { value: cv }\n             }\n-            // FIXME: these can have very suprising behaviour where optimization levels or other\n+            // FIXME: these can have very surprising behaviour where optimization levels or other\n             // compilation choices change the runtime behaviour of the match.\n             // See https://github.com/rust-lang/rust/issues/70861 for examples.\n             ty::FnPtr(..) | ty::RawPtr(..) => {"}, {"sha": "f8d0e448ce7d5a84ba70a9a9a7aeeb3b6a1085e9", "filename": "compiler/rustc_mir_transform/src/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01dbfb3eb264135c432cef223848416f90dac290/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01dbfb3eb264135c432cef223848416f90dac290/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs?ref=01dbfb3eb264135c432cef223848416f90dac290", "patch": "@@ -156,7 +156,7 @@ impl<'tcx> Visitor<'tcx> for UnsafetyChecker<'_, 'tcx> {\n         // temporary holding the static pointer to avoid duplicate errors\n         // <https://github.com/rust-lang/rust/pull/78068#issuecomment-731753506>.\n         if decl.internal && place.projection.first() == Some(&ProjectionElem::Deref) {\n-            // If the projection root is an artifical local that we introduced when\n+            // If the projection root is an artificial local that we introduced when\n             // desugaring `static`, give a more specific error message\n             // (avoid the general \"raw pointer\" clause below, that would only be confusing).\n             if let Some(box LocalInfo::StaticRef { def_id, .. }) = decl.local_info {"}, {"sha": "3577b3d2d80c690ef07d5e6fb34247bea409ca60", "filename": "compiler/rustc_mir_transform/src/const_debuginfo.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/01dbfb3eb264135c432cef223848416f90dac290/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01dbfb3eb264135c432cef223848416f90dac290/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_debuginfo.rs?ref=01dbfb3eb264135c432cef223848416f90dac290", "patch": "@@ -60,7 +60,7 @@ fn find_optimization_oportunities<'tcx>(body: &Body<'tcx>) -> Vec<(Local, Consta\n         }\n     }\n \n-    let mut eligable_locals = Vec::new();\n+    let mut eligible_locals = Vec::new();\n     for (local, mutating_uses) in visitor.local_mutating_uses.drain_enumerated(..) {\n         if mutating_uses != 1 || !locals_to_debuginfo.contains(local) {\n             continue;\n@@ -78,13 +78,13 @@ fn find_optimization_oportunities<'tcx>(body: &Body<'tcx>) -> Vec<(Local, Consta\n                 &bb.statements[location.statement_index].kind\n             {\n                 if let Some(local) = p.as_local() {\n-                    eligable_locals.push((local, *c));\n+                    eligible_locals.push((local, *c));\n                 }\n             }\n         }\n     }\n \n-    eligable_locals\n+    eligible_locals\n }\n \n impl Visitor<'_> for LocalUseVisitor {"}, {"sha": "2bf97e5d43c768e490f4ada5bcf1ff12251c79b8", "filename": "compiler/rustc_mir_transform/src/early_otherwise_branch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01dbfb3eb264135c432cef223848416f90dac290/compiler%2Frustc_mir_transform%2Fsrc%2Fearly_otherwise_branch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01dbfb3eb264135c432cef223848416f90dac290/compiler%2Frustc_mir_transform%2Fsrc%2Fearly_otherwise_branch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fearly_otherwise_branch.rs?ref=01dbfb3eb264135c432cef223848416f90dac290", "patch": "@@ -359,7 +359,7 @@ fn verify_candidate_branch<'tcx>(\n     if branch.statements.len() != 1 {\n         return false;\n     }\n-    // ...assign the descriminant of `place` in that statement\n+    // ...assign the discriminant of `place` in that statement\n     let StatementKind::Assign(boxed) = &branch.statements[0].kind else {\n         return false\n     };"}, {"sha": "ce4b45062e8de7d0ca9ab61351245ea7cb7c07b4", "filename": "compiler/rustc_mir_transform/src/simplify_try.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01dbfb3eb264135c432cef223848416f90dac290/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_try.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01dbfb3eb264135c432cef223848416f90dac290/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_try.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_try.rs?ref=01dbfb3eb264135c432cef223848416f90dac290", "patch": "@@ -362,7 +362,7 @@ fn optimization_applies<'tcx>(\n         return false;\n     } else if last_assigned_to != opt_info.local_tmp_s1 {\n         trace!(\n-            \"NO: end of assignemnt chain does not match written enum temp: {:?} != {:?}\",\n+            \"NO: end of assignment chain does not match written enum temp: {:?} != {:?}\",\n             last_assigned_to,\n             opt_info.local_tmp_s1\n         );"}, {"sha": "028630b17c4d5e96434378b958e9de58e55b9669", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01dbfb3eb264135c432cef223848416f90dac290/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01dbfb3eb264135c432cef223848416f90dac290/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=01dbfb3eb264135c432cef223848416f90dac290", "patch": "@@ -1948,7 +1948,7 @@ impl<'a> Parser<'a> {\n         // We use an over-approximation here.\n         // `const const`, `fn const` won't parse, but we're not stepping over other syntax either.\n         // `pub` is added in case users got confused with the ordering like `async pub fn`,\n-        // only if it wasn't preceeded by `default` as `default pub` is invalid.\n+        // only if it wasn't preceded by `default` as `default pub` is invalid.\n         let quals: &[Symbol] = if check_pub {\n             &[kw::Pub, kw::Const, kw::Async, kw::Unsafe, kw::Extern]\n         } else {"}, {"sha": "892000889dbe2d2539bd446b16d0c28afc167db7", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01dbfb3eb264135c432cef223848416f90dac290/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01dbfb3eb264135c432cef223848416f90dac290/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=01dbfb3eb264135c432cef223848416f90dac290", "patch": "@@ -2002,7 +2002,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                                     if !matches!(opaque.origin, hir::OpaqueTyOrigin::AsyncFn(..)) {\n                                         continue 'lifetimes;\n                                     }\n-                                    // We want to do this only if the liftime identifier is already defined\n+                                    // We want to do this only if the lifetime identifier is already defined\n                                     // in the async function that generated this. Otherwise it could be\n                                     // an opaque type defined by the developer and we still want this\n                                     // lint to fail compilation"}, {"sha": "14420909f502ac31e327323166a0e6ebda323216", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01dbfb3eb264135c432cef223848416f90dac290/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01dbfb3eb264135c432cef223848416f90dac290/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=01dbfb3eb264135c432cef223848416f90dac290", "patch": "@@ -223,7 +223,7 @@ top_level_options!(\n         /// `true` if we're emitting a JSON blob containing the unused externs\n         json_unused_externs: bool [UNTRACKED],\n \n-        /// `true` if we're emitting a JSON job containg a future-incompat report for lints\n+        /// `true` if we're emitting a JSON job containing a future-incompat report for lints\n         json_future_incompat: bool [TRACKED],\n \n         pretty: Option<PpMode> [UNTRACKED],"}, {"sha": "36bbccf1b9028c5d01388c55b5f4c8b2bfadd562", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01dbfb3eb264135c432cef223848416f90dac290/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01dbfb3eb264135c432cef223848416f90dac290/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=01dbfb3eb264135c432cef223848416f90dac290", "patch": "@@ -69,7 +69,7 @@ pub struct SymbolGallery {\n \n impl SymbolGallery {\n     /// Insert a symbol and its span into symbol gallery.\n-    /// If the symbol has occurred before, ignore the new occurrance.\n+    /// If the symbol has occurred before, ignore the new occurrence.\n     pub fn insert(&self, symbol: Symbol, span: Span) {\n         self.symbols.lock().entry(symbol).or_insert(span);\n     }"}, {"sha": "a33f94013d24c6f33ac5004c0201826d96ea0797", "filename": "compiler/rustc_session/src/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01dbfb3eb264135c432cef223848416f90dac290/compiler%2Frustc_session%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01dbfb3eb264135c432cef223848416f90dac290/compiler%2Frustc_session%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Futils.rs?ref=01dbfb3eb264135c432cef223848416f90dac290", "patch": "@@ -29,14 +29,14 @@ pub enum NativeLibKind {\n     /// Dynamic library (e.g. `libfoo.so` on Linux)\n     /// or an import library corresponding to a dynamic library (e.g. `foo.lib` on Windows/MSVC).\n     Dylib {\n-        /// Whether the dynamic library will be linked only if it satifies some undefined symbols\n+        /// Whether the dynamic library will be linked only if it satisfies some undefined symbols\n         as_needed: Option<bool>,\n     },\n     /// Dynamic library (e.g. `foo.dll` on Windows) without a corresponding import library.\n     RawDylib,\n     /// A macOS-specific kind of dynamic libraries.\n     Framework {\n-        /// Whether the framework will be linked only if it satifies some undefined symbols\n+        /// Whether the framework will be linked only if it satisfies some undefined symbols\n         as_needed: Option<bool>,\n     },\n     /// The library kind wasn't specified, `Dylib` is currently used as a default."}, {"sha": "a5503b04ff629f8681514e9b84608d1f4188a6c3", "filename": "compiler/rustc_symbol_mangling/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01dbfb3eb264135c432cef223848416f90dac290/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01dbfb3eb264135c432cef223848416f90dac290/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs?ref=01dbfb3eb264135c432cef223848416f90dac290", "patch": "@@ -226,7 +226,7 @@ fn compute_symbol_name<'tcx>(\n \n         // If we're dealing with an instance of a function that's inlined from\n         // another crate but we're marking it as globally shared to our\n-        // compliation (aka we're not making an internal copy in each of our\n+        // compilation (aka we're not making an internal copy in each of our\n         // codegen units) then this symbol may become an exported (but hidden\n         // visibility) symbol. This means that multiple crates may do the same\n         // and we want to be sure to avoid any symbol conflicts here."}, {"sha": "6082cdb78e478eae8a97ffce5d28f7f58d5cd778", "filename": "compiler/rustc_target/src/abi/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01dbfb3eb264135c432cef223848416f90dac290/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01dbfb3eb264135c432cef223848416f90dac290/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs?ref=01dbfb3eb264135c432cef223848416f90dac290", "patch": "@@ -1105,7 +1105,7 @@ impl Niche {\n \n         // Extend the range of valid values being reserved by moving either `v.start` or `v.end` bound.\n         // Given an eventual `Option<T>`, we try to maximize the chance for `None` to occupy the niche of zero.\n-        // This is accomplished by prefering enums with 2 variants(`count==1`) and always taking the shortest path to niche zero.\n+        // This is accomplished by preferring enums with 2 variants(`count==1`) and always taking the shortest path to niche zero.\n         // Having `None` in niche zero can enable some special optimizations.\n         //\n         // Bound selection criteria:"}, {"sha": "db1efdc265a1789645706e8bab0bcb597badff8d", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/01dbfb3eb264135c432cef223848416f90dac290/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01dbfb3eb264135c432cef223848416f90dac290/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=01dbfb3eb264135c432cef223848416f90dac290", "patch": "@@ -536,7 +536,7 @@ fn prepare_vtable_segments<'tcx, T>(\n \n     // the main traversal loop:\n     // basically we want to cut the inheritance directed graph into a few non-overlapping slices of nodes\n-    // that each node is emited after all its descendents have been emitted.\n+    // that each node is emitted after all its descendents have been emitted.\n     // so we convert the directed graph into a tree by skipping all previously visted nodes using a visited set.\n     // this is done on the fly.\n     // Each loop run emits a slice - it starts by find a \"childless\" unvisited node, backtracking upwards, and it\n@@ -551,10 +551,10 @@ fn prepare_vtable_segments<'tcx, T>(\n     // Starting point 0 stack [D]\n     // Loop run #0: Stack after diving in is [D B A], A is \"childless\"\n     // after this point, all newly visited nodes won't have a vtable that equals to a prefix of this one.\n-    // Loop run #0: Emiting the slice [B A] (in reverse order), B has a next-sibling node, so this slice stops here.\n+    // Loop run #0: Emitting the slice [B A] (in reverse order), B has a next-sibling node, so this slice stops here.\n     // Loop run #0: Stack after exiting out is [D C], C is the next starting point.\n     // Loop run #1: Stack after diving in is [D C], C is \"childless\", since its child A is skipped(already emitted).\n-    // Loop run #1: Emiting the slice [D C] (in reverse order). No one has a next-sibling node.\n+    // Loop run #1: Emitting the slice [D C] (in reverse order). No one has a next-sibling node.\n     // Loop run #1: Stack after exiting out is []. Now the function exits.\n \n     loop {"}, {"sha": "05479899f3a1b7ee98580be89ba02e9795822f09", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/01dbfb3eb264135c432cef223848416f90dac290/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01dbfb3eb264135c432cef223848416f90dac290/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=01dbfb3eb264135c432cef223848416f90dac290", "patch": "@@ -719,7 +719,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             // TraitA+Kx+'a -> TraitB+Ky+'b (trait upcasting coercion).\n             (&ty::Dynamic(ref data_a, r_a), &ty::Dynamic(ref data_b, r_b)) => {\n                 // See `assemble_candidates_for_unsizing` for more info.\n-                // We already checked the compatiblity of auto traits within `assemble_candidates_for_unsizing`.\n+                // We already checked the compatibility of auto traits within `assemble_candidates_for_unsizing`.\n                 let principal_a = data_a.principal().unwrap();\n                 source_trait_ref = principal_a.with_self_ty(tcx, source);\n                 upcast_trait_ref = util::supertraits(tcx, source_trait_ref).nth(idx).unwrap();\n@@ -823,7 +823,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             // Trait+Kx+'a -> Trait+Ky+'b (auto traits and lifetime subtyping).\n             (&ty::Dynamic(ref data_a, r_a), &ty::Dynamic(ref data_b, r_b)) => {\n                 // See `assemble_candidates_for_unsizing` for more info.\n-                // We already checked the compatiblity of auto traits within `assemble_candidates_for_unsizing`.\n+                // We already checked the compatibility of auto traits within `assemble_candidates_for_unsizing`.\n                 let iter = data_a\n                     .principal()\n                     .map(|b| b.map_bound(ty::ExistentialPredicate::Trait))\n@@ -1084,7 +1084,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 | ty::Foreign(_) => {}\n \n                 // These types are built-in, so we can fast-track by registering\n-                // nested predicates for their constituient type(s)\n+                // nested predicates for their constituent type(s)\n                 ty::Array(ty, _) | ty::Slice(ty) => {\n                     stack.push(ty);\n                 }"}, {"sha": "7d1abb662506f15f3c7aad3ea94e04510123ed11", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01dbfb3eb264135c432cef223848416f90dac290/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01dbfb3eb264135c432cef223848416f90dac290/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=01dbfb3eb264135c432cef223848416f90dac290", "patch": "@@ -553,7 +553,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     match project::poly_project_and_unify_type(self, &project_obligation) {\n                         Ok(Ok(Some(mut subobligations))) => {\n                             'compute_res: {\n-                                // If we've previously marked this projection as 'complete', thne\n+                                // If we've previously marked this projection as 'complete', then\n                                 // use the final cached result (either `EvaluatedToOk` or\n                                 // `EvaluatedToOkModuloRegions`), and skip re-evaluating the\n                                 // sub-obligations."}, {"sha": "c5fc4e4c6610562865eb132b3cf3114eb35ad49a", "filename": "compiler/rustc_ty_utils/src/needs_drop.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/01dbfb3eb264135c432cef223848416f90dac290/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01dbfb3eb264135c432cef223848416f90dac290/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs?ref=01dbfb3eb264135c432cef223848416f90dac290", "patch": "@@ -181,12 +181,12 @@ enum DtorType {\n     /// \"significant\" / \"insignificant\".\n     Insignificant,\n \n-    /// Type has a `Drop` implentation.\n+    /// Type has a `Drop` implantation.\n     Significant,\n }\n \n // This is a helper function for `adt_drop_tys` and `adt_significant_drop_tys`.\n-// Depending on the implentation of `adt_has_dtor`, it is used to check if the\n+// Depending on the implantation of `adt_has_dtor`, it is used to check if the\n // ADT has a destructor or if the ADT only has a significant destructor. For\n // understanding significant destructor look at `adt_significant_drop_tys`.\n fn drop_tys_helper<'tcx>(\n@@ -295,7 +295,7 @@ fn adt_drop_tys<'tcx>(\n         .map(|components| tcx.intern_type_list(&components))\n }\n // If `def_id` refers to a generic ADT, the queries above and below act as if they had been handed\n-// a `tcx.make_ty(def, identity_substs)` and as such it is legal to substitue the generic parameters\n+// a `tcx.make_ty(def, identity_substs)` and as such it is legal to substitute the generic parameters\n // of the ADT into the outputted `ty`s.\n fn adt_significant_drop_tys(\n     tcx: TyCtxt<'_>,"}, {"sha": "4cd6b32525d0828cff83283ff9c8b8b597563d9c", "filename": "compiler/rustc_typeck/src/astconv/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01dbfb3eb264135c432cef223848416f90dac290/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01dbfb3eb264135c432cef223848416f90dac290/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs?ref=01dbfb3eb264135c432cef223848416f90dac290", "patch": "@@ -126,7 +126,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 \"the precise format of `Fn`-family traits' type parameters is subject to change\",\n             );\n             // Do not suggest the other syntax if we are in trait impl:\n-            // the desugaring would contain an associated type constrait.\n+            // the desugaring would contain an associated type constraint.\n             if !is_impl {\n                 let args = trait_segment\n                     .args"}, {"sha": "974af3d9eba2bb3e521736c6598915d5a79370ca", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01dbfb3eb264135c432cef223848416f90dac290/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01dbfb3eb264135c432cef223848416f90dac290/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=01dbfb3eb264135c432cef223848416f90dac290", "patch": "@@ -429,7 +429,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let param_counts = gen_params.own_counts();\n \n         // Subtracting from param count to ensure type params synthesized from `impl Trait`\n-        // cannot be explictly specified even with `explicit_generic_args_with_impl_trait`\n+        // cannot be explicitly specified even with `explicit_generic_args_with_impl_trait`\n         // feature enabled.\n         let synth_type_param_count = if tcx.features().explicit_generic_args_with_impl_trait {\n             gen_params"}, {"sha": "8ce6b668b4dcaf2ac9fa855fee50255238dbb8a2", "filename": "compiler/rustc_typeck/src/check/generator_interior.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01dbfb3eb264135c432cef223848416f90dac290/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01dbfb3eb264135c432cef223848416f90dac290/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs?ref=01dbfb3eb264135c432cef223848416f90dac290", "patch": "@@ -468,11 +468,11 @@ pub struct SuspendCheckData<'a, 'tcx> {\n }\n \n // Returns whether it emitted a diagnostic or not\n-// Note that this fn and the proceding one are based on the code\n+// Note that this fn and the proceeding one are based on the code\n // for creating must_use diagnostics\n //\n // Note that this technique was chosen over things like a `Suspend` marker trait\n-// as it is simpler and has precendent in the compiler\n+// as it is simpler and has precedent in the compiler\n pub fn check_must_not_suspend_ty<'tcx>(\n     fcx: &FnCtxt<'_, 'tcx>,\n     ty: Ty<'tcx>,"}, {"sha": "a2f1f5692c731b3cea2548e7c58c3fc18106a70c", "filename": "compiler/rustc_typeck/src/check/method/prelude2021.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01dbfb3eb264135c432cef223848416f90dac290/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01dbfb3eb264135c432cef223848416f90dac290/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs?ref=01dbfb3eb264135c432cef223848416f90dac290", "patch": "@@ -379,7 +379,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n \n     /// Creates a string version of the `expr` that includes explicit adjustments.\n-    /// Returns the string and also a bool indicating whther this is a *precise*\n+    /// Returns the string and also a bool indicating whether this is a *precise*\n     /// suggestion.\n     fn adjust_expr(\n         &self,"}, {"sha": "7106f8f9d7a829c2738f3b09647688722b850ce0", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/01dbfb3eb264135c432cef223848416f90dac290/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01dbfb3eb264135c432cef223848416f90dac290/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=01dbfb3eb264135c432cef223848416f90dac290", "patch": "@@ -1371,7 +1371,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // represents the case of the path being completely captured by the variable.\n         //\n         // eg. If `a.b` is captured and we are processing `a.b`, then we can't have the closure also\n-        //     capture `a.b.c`, because that voilates min capture.\n+        //     capture `a.b.c`, because that violates min capture.\n         let is_completely_captured = captured_by_move_projs.iter().any(|projs| projs.is_empty());\n \n         assert!(!is_completely_captured || (captured_by_move_projs.len() == 1));\n@@ -1411,7 +1411,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ty::RawPtr(..) => unreachable!(),\n \n             ty::Adt(def, substs) => {\n-                // Multi-varaint enums are captured in entirety,\n+                // Multi-variant enums are captured in entirety,\n                 // which would've been handled in the case of single empty slice in `captured_by_move_projs`.\n                 assert_eq!(def.variants().len(), 1);\n \n@@ -2208,8 +2208,8 @@ fn determine_place_ancestry_relation<'tcx>(\n     }\n }\n \n-/// Reduces the precision of the captured place when the precision doesn't yeild any benefit from\n-/// borrow checking prespective, allowing us to save us on the size of the capture.\n+/// Reduces the precision of the captured place when the precision doesn't yield any benefit from\n+/// borrow checking perspective, allowing us to save us on the size of the capture.\n ///\n ///\n /// Fields that are read through a shared reference will always be read via a shared ref or a copy,"}, {"sha": "d6eeef3323cad0262e629880630d8672300f67ba", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01dbfb3eb264135c432cef223848416f90dac290/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01dbfb3eb264135c432cef223848416f90dac290/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=01dbfb3eb264135c432cef223848416f90dac290", "patch": "@@ -1469,7 +1469,7 @@ fn check_fn_or_method<'fcx, 'tcx>(\n                 },\n             )\n         }));\n-    // Manually call `normalize_assocaited_types_in` on the other types\n+    // Manually call `normalize_associated_types_in` on the other types\n     // in `FnSig`. This ensures that if the types of these fields\n     // ever change to include projections, we will start normalizing\n     // them automatically."}, {"sha": "d0f1db67c6e50aec605c507adc168002a8a5e958", "filename": "compiler/rustc_typeck/src/structured_errors/wrong_number_of_generic_args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01dbfb3eb264135c432cef223848416f90dac290/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01dbfb3eb264135c432cef223848416f90dac290/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs?ref=01dbfb3eb264135c432cef223848416f90dac290", "patch": "@@ -323,7 +323,7 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n             .skip(self.params_offset + self.num_provided_type_or_const_args())\n             .take(num_params_to_take)\n             .map(|param| match param.kind {\n-                // This is being infered from the item's inputs, no need to set it.\n+                // This is being inferred from the item's inputs, no need to set it.\n                 ty::GenericParamDefKind::Type { .. } if is_used_in_input(param.def_id) => {\n                     \"_\".to_string()\n                 }"}, {"sha": "00b63dfbd069376c1acfb680992bdf31cdbc90e8", "filename": "library/core/src/panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01dbfb3eb264135c432cef223848416f90dac290/library%2Fcore%2Fsrc%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01dbfb3eb264135c432cef223848416f90dac290/library%2Fcore%2Fsrc%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanic.rs?ref=01dbfb3eb264135c432cef223848416f90dac290", "patch": "@@ -68,7 +68,7 @@ pub macro unreachable_2015 {\n         $crate::panicking::panic(\"internal error: entered unreachable code\")\n     ),\n     // Use of `unreachable_display` for non_fmt_panic lint.\n-    // NOTE: the message (\"internal error ...\") is embeded directly in unreachable_display\n+    // NOTE: the message (\"internal error ...\") is embedded directly in unreachable_display\n     ($msg:expr $(,)?) => (\n         $crate::panicking::unreachable_display(&$msg)\n     ),"}, {"sha": "e8e7c51cb9ba6be69a3761135767290e10a70600", "filename": "library/std/src/sys/common/alloc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01dbfb3eb264135c432cef223848416f90dac290/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01dbfb3eb264135c432cef223848416f90dac290/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Falloc.rs?ref=01dbfb3eb264135c432cef223848416f90dac290", "patch": "@@ -28,7 +28,7 @@ pub const MIN_ALIGN: usize = 8;\n     target_arch = \"wasm64\",\n )))]\n pub const MIN_ALIGN: usize = 16;\n-// The allocator on the esp-idf platform guarentees 4 byte alignment.\n+// The allocator on the esp-idf platform guarantees 4 byte alignment.\n #[cfg(all(any(\n     all(target_arch = \"riscv32\", target_os = \"espidf\"),\n     all(target_arch = \"xtensa\", target_os = \"espidf\"),"}, {"sha": "32ccca8bcdd2c5a69bd48e53a699d0881e313db1", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01dbfb3eb264135c432cef223848416f90dac290/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01dbfb3eb264135c432cef223848416f90dac290/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=01dbfb3eb264135c432cef223848416f90dac290", "patch": "@@ -1005,7 +1005,7 @@ impl<'a> Builder<'a> {\n             // the rustc_llvm cache. That will always work, even though it\n             // may mean that on the next non-check build we'll need to rebuild\n             // rustc_llvm. But if LLVM is stale, that'll be a tiny amount\n-            // of work comparitively, and we'd likely need to rebuild it anyway,\n+            // of work comparatively, and we'd likely need to rebuild it anyway,\n             // so that's okay.\n             if crate::native::prebuilt_llvm_config(self, target).is_err() {\n                 cargo.env(\"RUST_CHECK\", \"1\");"}, {"sha": "e030e0bc1cf809c96e669aa57f0cdf6677ef3e4c", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01dbfb3eb264135c432cef223848416f90dac290/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01dbfb3eb264135c432cef223848416f90dac290/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=01dbfb3eb264135c432cef223848416f90dac290", "patch": "@@ -1185,7 +1185,7 @@ impl Step for Assemble {\n                 for tool in LLVM_TOOLS {\n                     let tool_exe = exe(tool, target_compiler.host);\n                     let src_path = llvm_bin_dir.join(&tool_exe);\n-                    // When using `donwload-ci-llvm`, some of the tools\n+                    // When using `download-ci-llvm`, some of the tools\n                     // may not exist, so skip trying to copy them.\n                     if src_path.exists() {\n                         builder.copy(&src_path, &libdir_bin.join(&tool_exe));"}, {"sha": "be965971dbb6f80a2e8176a1993aca5af72793d0", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01dbfb3eb264135c432cef223848416f90dac290/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01dbfb3eb264135c432cef223848416f90dac290/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=01dbfb3eb264135c432cef223848416f90dac290", "patch": "@@ -2082,7 +2082,7 @@ impl Step for RustDev {\n     }\n }\n \n-/// Tarball containing a prebuilt version of the build-manifest tool, intented to be used by the\n+/// Tarball containing a prebuilt version of the build-manifest tool, intended to be used by the\n /// release process to avoid cloning the monorepo and building stuff.\n ///\n /// Should not be considered stable by end users."}, {"sha": "09e03e4dc6f989fd391ccb181e6fc7e53eacd509", "filename": "src/doc/rustc/src/platform-support/armv7-unknown-linux-uclibceabi.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01dbfb3eb264135c432cef223848416f90dac290/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmv7-unknown-linux-uclibceabi.md", "raw_url": "https://github.com/rust-lang/rust/raw/01dbfb3eb264135c432cef223848416f90dac290/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmv7-unknown-linux-uclibceabi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmv7-unknown-linux-uclibceabi.md?ref=01dbfb3eb264135c432cef223848416f90dac290", "patch": "@@ -89,7 +89,7 @@ To cross compile, you'll need to:\n     ```\n * Copy the binary to your target device and run.\n \n-We specify `CC`, `CXX`, `AR`, `CFLAGS`, and `CXXFLAGS` environment variables because somtimes a project or a subproject requires the use of your `'C'` cross toolchain. Since Tomatoware has a modified sysroot we also pass via RUSTFLAGS the location of the dynamic-linker and rpath.\n+We specify `CC`, `CXX`, `AR`, `CFLAGS`, and `CXXFLAGS` environment variables because sometimes a project or a subproject requires the use of your `'C'` cross toolchain. Since Tomatoware has a modified sysroot we also pass via RUSTFLAGS the location of the dynamic-linker and rpath.\n \n ### Test with QEMU\n "}, {"sha": "3f60caffef5b703a73bdcfba17db3989e483edf1", "filename": "src/doc/unstable-book/src/compiler-flags/sanitizer.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01dbfb3eb264135c432cef223848416f90dac290/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md", "raw_url": "https://github.com/rust-lang/rust/raw/01dbfb3eb264135c432cef223848416f90dac290/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md?ref=01dbfb3eb264135c432cef223848416f90dac290", "patch": "@@ -212,7 +212,7 @@ fn add_one(x: i32) -> i32 {\n \n #[naked]\n pub extern \"C\" fn add_two(x: i32) {\n-    // x + 2 preceeded by a landing pad/nop block\n+    // x + 2 preceded by a landing pad/nop block\n     unsafe {\n         asm!(\n             \""}, {"sha": "d55ba0a188f39d583407222392ce5885dd0fdc67", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01dbfb3eb264135c432cef223848416f90dac290/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01dbfb3eb264135c432cef223848416f90dac290/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=01dbfb3eb264135c432cef223848416f90dac290", "patch": "@@ -2050,7 +2050,7 @@ crate struct Typedef {\n     /// alias instead of the final type. This will always have the final type, regardless of whether\n     /// `type_` came from HIR or from metadata.\n     ///\n-    /// If `item_type.is_none()`, `type_` is guarenteed to come from metadata (and therefore hold the\n+    /// If `item_type.is_none()`, `type_` is guaranteed to come from metadata (and therefore hold the\n     /// final type).\n     crate item_type: Option<Type>,\n }"}, {"sha": "2403ff4ebaa7a91f42321b38ba475a450fed5afe", "filename": "src/librustdoc/formats/renderer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01dbfb3eb264135c432cef223848416f90dac290/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01dbfb3eb264135c432cef223848416f90dac290/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Frenderer.rs?ref=01dbfb3eb264135c432cef223848416f90dac290", "patch": "@@ -13,7 +13,7 @@ crate trait FormatRenderer<'tcx>: Sized {\n     /// Gives a description of the renderer. Used for performance profiling.\n     fn descr() -> &'static str;\n \n-    /// Whether to call `item` recursivly for modules\n+    /// Whether to call `item` recursively for modules\n     ///\n     /// This is true for html, and false for json. See #80664\n     const RUN_ON_MODULE: bool;"}, {"sha": "3666767a9d9cbc61508de734133533486f236f16", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01dbfb3eb264135c432cef223848416f90dac290/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01dbfb3eb264135c432cef223848416f90dac290/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=01dbfb3eb264135c432cef223848416f90dac290", "patch": "@@ -2821,7 +2821,7 @@ fn render_call_locations(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item) {\n     let mut it = ordered_locations.into_iter().peekable();\n \n     // An example may fail to write if its source can't be read for some reason, so this method\n-    // continues iterating until a write suceeds\n+    // continues iterating until a write succeeds\n     let write_and_skip_failure = |w: &mut Buffer, it: &mut Peekable<_>| {\n         while let Some(example) = it.next() {\n             if write_example(&mut *w, example) {"}, {"sha": "3ea3a24bfae11daf42e148a4ed0b061a0be51f97", "filename": "src/test/codegen/catch-unwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01dbfb3eb264135c432cef223848416f90dac290/src%2Ftest%2Fcodegen%2Fcatch-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01dbfb3eb264135c432cef223848416f90dac290/src%2Ftest%2Fcodegen%2Fcatch-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fcatch-unwind.rs?ref=01dbfb3eb264135c432cef223848416f90dac290", "patch": "@@ -1,6 +1,6 @@\n // compile-flags: -O\n \n-// On x86 the closure is inlined in foo() producting something like\n+// On x86 the closure is inlined in foo() producing something like\n // define i32 @foo() [...] {\n // tail call void @bar() [...]\n // ret i32 0"}, {"sha": "e61642b8e1be2ef2446e843a3f7039cb22d6534d", "filename": "src/test/codegen/debug-column.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01dbfb3eb264135c432cef223848416f90dac290/src%2Ftest%2Fcodegen%2Fdebug-column.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01dbfb3eb264135c432cef223848416f90dac290/src%2Ftest%2Fcodegen%2Fdebug-column.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fdebug-column.rs?ref=01dbfb3eb264135c432cef223848416f90dac290", "patch": "@@ -1,4 +1,4 @@\n-// Verify that debuginfo column nubmers are 1-based byte offsets.\n+// Verify that debuginfo column numbers are 1-based byte offsets.\n //\n // ignore-windows\n // compile-flags: -C debuginfo=2"}, {"sha": "a96ce0cf47e08252a0d3e6e27c987ab424c96195", "filename": "src/test/ui/extern/extern-static-size-overflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01dbfb3eb264135c432cef223848416f90dac290/src%2Ftest%2Fui%2Fextern%2Fextern-static-size-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01dbfb3eb264135c432cef223848416f90dac290/src%2Ftest%2Fui%2Fextern%2Fextern-static-size-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-static-size-overflow.rs?ref=01dbfb3eb264135c432cef223848416f90dac290", "patch": "@@ -4,7 +4,7 @@ struct ReallyBig {\n }\n \n // The limit for \"too big for the current architecture\" is dependent on the target pointer size\n-// however it's artifically limited on 64 bits\n+// however it's artificially limited on 64 bits\n // logic copied from rustc_target::abi::TargetDataLayout::obj_size_bound()\n const fn max_size() -> usize {\n     #[cfg(target_pointer_width = \"16\")]"}, {"sha": "5407fb6dd28040e099e56116c80fb4bd91b498a8", "filename": "src/test/ui/impl-trait/multiple-lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01dbfb3eb264135c432cef223848416f90dac290/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01dbfb3eb264135c432cef223848416f90dac290/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes.rs?ref=01dbfb3eb264135c432cef223848416f90dac290", "patch": "@@ -1,4 +1,4 @@\n-// Test that multiple liftimes are allowed in impl trait types.\n+// Test that multiple lifetimes are allowed in impl trait types.\n // build-pass (FIXME(62277): could be check-pass?)\n \n trait X<'x>: Sized {}"}, {"sha": "5c33925a9ec73ba06261dc14c8855e044f813af6", "filename": "src/tools/cargotest/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01dbfb3eb264135c432cef223848416f90dac290/src%2Ftools%2Fcargotest%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01dbfb3eb264135c432cef223848416f90dac290/src%2Ftools%2Fcargotest%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargotest%2Fmain.rs?ref=01dbfb3eb264135c432cef223848416f90dac290", "patch": "@@ -67,7 +67,7 @@ const TEST_REPOS: &[Test] = &[\n         sha: \"91493fe47175076f330ce5fc518f0196c0476f56\",\n         lock: None,\n         packages: &[],\n-        // Test the embeded sqlite variant of diesel\n+        // Test the embedded sqlite variant of diesel\n         // This does not require any dependency to be present,\n         // sqlite will be compiled as part of the build process\n         features: Some(&[\"sqlite\", \"libsqlite3-sys/bundled\"]),"}, {"sha": "e6a0162fd02728d5c205996b2a34c0500756dba6", "filename": "src/tools/clippy/clippy_lints/src/copies.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01dbfb3eb264135c432cef223848416f90dac290/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01dbfb3eb264135c432cef223848416f90dac290/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcopies.rs?ref=01dbfb3eb264135c432cef223848416f90dac290", "patch": "@@ -126,7 +126,7 @@ declare_clippy_lint! {\n     /// Duplicate code is less maintainable.\n     ///\n     /// ### Known problems\n-    /// * The lint doesn't check if the moved expressions modify values that are beeing used in\n+    /// * The lint doesn't check if the moved expressions modify values that are being used in\n     ///   the if condition. The suggestion can in that case modify the behavior of the program.\n     ///   See [rust-clippy#7452](https://github.com/rust-lang/rust-clippy/issues/7452)\n     ///"}, {"sha": "088d9996516e83683fdb9ffc160b6967be5da19f", "filename": "src/tools/clippy/clippy_lints/src/fallible_impl_from.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/01dbfb3eb264135c432cef223848416f90dac290/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01dbfb3eb264135c432cef223848416f90dac290/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffallible_impl_from.rs?ref=01dbfb3eb264135c432cef223848416f90dac290", "patch": "@@ -86,9 +86,9 @@ fn lint_impl_body<'tcx>(cx: &LateContext<'tcx>, impl_span: Span, impl_items: &[h\n \n             // check for `unwrap`\n             if let Some(arglists) = method_chain_args(expr, &[\"unwrap\"]) {\n-                let reciever_ty = self.typeck_results.expr_ty(&arglists[0][0]).peel_refs();\n-                if is_type_diagnostic_item(self.lcx, reciever_ty, sym::Option)\n-                    || is_type_diagnostic_item(self.lcx, reciever_ty, sym::Result)\n+                let receiver_ty = self.typeck_results.expr_ty(&arglists[0][0]).peel_refs();\n+                if is_type_diagnostic_item(self.lcx, receiver_ty, sym::Option)\n+                    || is_type_diagnostic_item(self.lcx, receiver_ty, sym::Result)\n                 {\n                     self.result.push(expr.span);\n                 }"}, {"sha": "98aee7592ae80a496bde4da3e3f47327a7a547b3", "filename": "src/tools/clippy/clippy_lints/src/float_equality_without_abs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/01dbfb3eb264135c432cef223848416f90dac290/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffloat_equality_without_abs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01dbfb3eb264135c432cef223848416f90dac290/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffloat_equality_without_abs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffloat_equality_without_abs.rs?ref=01dbfb3eb264135c432cef223848416f90dac290", "patch": "@@ -20,7 +20,7 @@ declare_clippy_lint! {\n     ///\n     /// ### Known problems\n     /// If the user can ensure that b is larger than a, the `.abs()` is\n-    /// technically unneccessary. However, it will make the code more robust and doesn't have any\n+    /// technically unnecessary. However, it will make the code more robust and doesn't have any\n     /// large performance implications. If the abs call was deliberately left out for performance\n     /// reasons, it is probably better to state this explicitly in the code, which then can be done\n     /// with an allow.\n@@ -69,7 +69,7 @@ impl<'tcx> LateLintPass<'tcx> for FloatEqualityWithoutAbs {\n \n         if_chain! {\n \n-            // left hand side is a substraction\n+            // left hand side is a subtraction\n             if let ExprKind::Binary(\n                 Spanned {\n                     node: BinOpKind::Sub,\n@@ -84,7 +84,7 @@ impl<'tcx> LateLintPass<'tcx> for FloatEqualityWithoutAbs {\n             if let Res::Def(DefKind::AssocConst, def_id) = cx.qpath_res(epsilon_path, rhs.hir_id);\n             if match_def_path(cx, def_id, &paths::F32_EPSILON) || match_def_path(cx, def_id, &paths::F64_EPSILON);\n \n-            // values of the substractions on the left hand side are of the type float\n+            // values of the subtractions on the left hand side are of the type float\n             let t_val_l = cx.typeck_results().expr_ty(val_l);\n             let t_val_r = cx.typeck_results().expr_ty(val_r);\n             if let ty::Float(_) = t_val_l.kind();"}, {"sha": "8e61f2347767dfa85bfaa47754b4002f69dec360", "filename": "src/tools/clippy/clippy_lints/src/only_used_in_recursion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01dbfb3eb264135c432cef223848416f90dac290/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fonly_used_in_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01dbfb3eb264135c432cef223848416f90dac290/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fonly_used_in_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fonly_used_in_recursion.rs?ref=01dbfb3eb264135c432cef223848416f90dac290", "patch": "@@ -224,7 +224,7 @@ pub fn is_array(ty: Ty<'_>) -> bool {\n /// This builds the graph of side effect.\n /// The edge `a -> b` means if `a` has side effect, `b` will have side effect.\n ///\n-/// There are some exmaple in following code:\n+/// There are some example in following code:\n /// ```rust, ignore\n /// let b = 1;\n /// let a = b; // a -> b"}, {"sha": "b5dd27ff80de4052ea5960c26d63cb64e6f76610", "filename": "src/tools/clippy/clippy_lints/src/suspicious_operation_groupings.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/01dbfb3eb264135c432cef223848416f90dac290/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01dbfb3eb264135c432cef223848416f90dac290/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs?ref=01dbfb3eb264135c432cef223848416f90dac290", "patch": "@@ -290,7 +290,7 @@ fn ident_swap_sugg(\n             // used instead, in these cases.\n             *applicability = Applicability::MaybeIncorrect;\n \n-            // We arbitraily choose one side to suggest changing,\n+            // We arbitrarily choose one side to suggest changing,\n             // since we don't have a better guess. If the user\n             // ends up duplicating a clause, the `logic_bug` lint\n             // should catch it.\n@@ -374,19 +374,19 @@ fn strip_non_ident_wrappers(expr: &Expr) -> &Expr {\n }\n \n fn extract_related_binops(kind: &ExprKind) -> Option<Vec<BinaryOp<'_>>> {\n-    append_opt_vecs(chained_binops(kind), if_statment_binops(kind))\n+    append_opt_vecs(chained_binops(kind), if_statement_binops(kind))\n }\n \n-fn if_statment_binops(kind: &ExprKind) -> Option<Vec<BinaryOp<'_>>> {\n+fn if_statement_binops(kind: &ExprKind) -> Option<Vec<BinaryOp<'_>>> {\n     match kind {\n         ExprKind::If(ref condition, _, _) => chained_binops(&condition.kind),\n-        ExprKind::Paren(ref e) => if_statment_binops(&e.kind),\n+        ExprKind::Paren(ref e) => if_statement_binops(&e.kind),\n         ExprKind::Block(ref block, _) => {\n             let mut output = None;\n             for stmt in &block.stmts {\n                 match stmt.kind {\n                     StmtKind::Expr(ref e) | StmtKind::Semi(ref e) => {\n-                        output = append_opt_vecs(output, if_statment_binops(&e.kind));\n+                        output = append_opt_vecs(output, if_statement_binops(&e.kind));\n                     },\n                     _ => {},\n                 }"}, {"sha": "58cc057a39ed94001c8417fc75ff09a48d39f8c3", "filename": "src/tools/clippy/clippy_lints/src/trailing_empty_array.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01dbfb3eb264135c432cef223848416f90dac290/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftrailing_empty_array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01dbfb3eb264135c432cef223848416f90dac290/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftrailing_empty_array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftrailing_empty_array.rs?ref=01dbfb3eb264135c432cef223848416f90dac290", "patch": "@@ -10,7 +10,7 @@ declare_clippy_lint! {\n     /// Displays a warning when a struct with a trailing zero-sized array is declared without a `repr` attribute.\n     ///\n     /// ### Why is this bad?\n-    /// Zero-sized arrays aren't very useful in Rust itself, so such a struct is likely being created to pass to C code or in some other situation where control over memory layout matters (for example, in conjuction with manual allocation to make it easy to compute the offset of the array). Either way, `#[repr(C)]` (or another `repr` attribute) is needed.\n+    /// Zero-sized arrays aren't very useful in Rust itself, so such a struct is likely being created to pass to C code or in some other situation where control over memory layout matters (for example, in conjunction with manual allocation to make it easy to compute the offset of the array). Either way, `#[repr(C)]` (or another `repr` attribute) is needed.\n     ///\n     /// ### Example\n     /// ```rust"}, {"sha": "43e0132a7ec7b1a5f48397d9760e367a1e7a7f93", "filename": "src/tools/clippy/clippy_lints/src/trait_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01dbfb3eb264135c432cef223848416f90dac290/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftrait_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01dbfb3eb264135c432cef223848416f90dac290/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftrait_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftrait_bounds.rs?ref=01dbfb3eb264135c432cef223848416f90dac290", "patch": "@@ -46,7 +46,7 @@ declare_clippy_lint! {\n     ///\n     /// ### Why is this bad?\n     /// Duplicate bounds makes the code\n-    /// less readable than specifing them only once.\n+    /// less readable than specifying them only once.\n     ///\n     /// ### Example\n     /// ```rust"}, {"sha": "b32be238cd55a178129cd428ba5015059d3c0b60", "filename": "src/tools/clippy/clippy_lints/src/unwrap_in_result.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/01dbfb3eb264135c432cef223848416f90dac290/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funwrap_in_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01dbfb3eb264135c432cef223848416f90dac290/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funwrap_in_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funwrap_in_result.rs?ref=01dbfb3eb264135c432cef223848416f90dac290", "patch": "@@ -83,19 +83,19 @@ impl<'a, 'tcx> Visitor<'tcx> for FindExpectUnwrap<'a, 'tcx> {\n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n         // check for `expect`\n         if let Some(arglists) = method_chain_args(expr, &[\"expect\"]) {\n-            let reciever_ty = self.typeck_results.expr_ty(&arglists[0][0]).peel_refs();\n-            if is_type_diagnostic_item(self.lcx, reciever_ty, sym::Option)\n-                || is_type_diagnostic_item(self.lcx, reciever_ty, sym::Result)\n+            let receiver_ty = self.typeck_results.expr_ty(&arglists[0][0]).peel_refs();\n+            if is_type_diagnostic_item(self.lcx, receiver_ty, sym::Option)\n+                || is_type_diagnostic_item(self.lcx, receiver_ty, sym::Result)\n             {\n                 self.result.push(expr.span);\n             }\n         }\n \n         // check for `unwrap`\n         if let Some(arglists) = method_chain_args(expr, &[\"unwrap\"]) {\n-            let reciever_ty = self.typeck_results.expr_ty(&arglists[0][0]).peel_refs();\n-            if is_type_diagnostic_item(self.lcx, reciever_ty, sym::Option)\n-                || is_type_diagnostic_item(self.lcx, reciever_ty, sym::Result)\n+            let receiver_ty = self.typeck_results.expr_ty(&arglists[0][0]).peel_refs();\n+            if is_type_diagnostic_item(self.lcx, receiver_ty, sym::Option)\n+                || is_type_diagnostic_item(self.lcx, receiver_ty, sym::Result)\n             {\n                 self.result.push(expr.span);\n             }"}, {"sha": "dc82ba891fb1f098d2c1b1099c5a0453ec67b311", "filename": "src/tools/clippy/tests/lint_message_convention.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01dbfb3eb264135c432cef223848416f90dac290/src%2Ftools%2Fclippy%2Ftests%2Flint_message_convention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01dbfb3eb264135c432cef223848416f90dac290/src%2Ftools%2Fclippy%2Ftests%2Flint_message_convention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Flint_message_convention.rs?ref=01dbfb3eb264135c432cef223848416f90dac290", "patch": "@@ -16,7 +16,7 @@ impl Message {\n     fn new(path: PathBuf) -> Self {\n         let content: String = std::fs::read_to_string(&path).unwrap();\n         // we don't want the first letter after \"error: \", \"help: \" ... to be capitalized\n-        // also no puncutation (except for \"?\" ?) at the end of a line\n+        // also no punctuation (except for \"?\" ?) at the end of a line\n         let regex_set: RegexSet = RegexSet::new(&[\n             r\"error: [A-Z]\",\n             r\"help: [A-Z]\","}, {"sha": "c826b082adff1312a0139571d87a85b74f02655b", "filename": "src/tools/clippy/tests/ui/manual_memcpy/with_loop_counters.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01dbfb3eb264135c432cef223848416f90dac290/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_memcpy%2Fwith_loop_counters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01dbfb3eb264135c432cef223848416f90dac290/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_memcpy%2Fwith_loop_counters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_memcpy%2Fwith_loop_counters.rs?ref=01dbfb3eb264135c432cef223848416f90dac290", "patch": "@@ -59,7 +59,7 @@ pub fn manual_copy_with_counters(src: &[i32], dst: &mut [i32], dst2: &mut [i32])\n     }\n \n     // make sure parentheses are added properly to bitwise operators, which have lower precedence than\n-    // arithmetric ones\n+    // arithmetic ones\n     let mut count = 0 << 1;\n     for i in 0..1 << 1 {\n         dst[count] = src[i + 2];"}, {"sha": "e13efb3e0164b638f96b05861b818fdc70b23ed0", "filename": "src/tools/clippy/tests/workspace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01dbfb3eb264135c432cef223848416f90dac290/src%2Ftools%2Fclippy%2Ftests%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01dbfb3eb264135c432cef223848416f90dac290/src%2Ftools%2Fclippy%2Ftests%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fworkspace.rs?ref=01dbfb3eb264135c432cef223848416f90dac290", "patch": "@@ -93,7 +93,7 @@ fn test_no_deps_ignores_path_deps_in_workspaces() {\n         output\n     };\n \n-    // Trigger a sucessful build, so Cargo would like to cache the build result.\n+    // Trigger a successful build, so Cargo would like to cache the build result.\n     successful_build();\n \n     // Make sure there's no spurious rebuild when nothing changes."}, {"sha": "29d75585eb7252355f4969f341fc25072ed383a7", "filename": "src/tools/rustfmt/src/lists.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01dbfb3eb264135c432cef223848416f90dac290/src%2Ftools%2Frustfmt%2Fsrc%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01dbfb3eb264135c432cef223848416f90dac290/src%2Ftools%2Frustfmt%2Fsrc%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Flists.rs?ref=01dbfb3eb264135c432cef223848416f90dac290", "patch": "@@ -575,7 +575,7 @@ where\n pub(crate) fn extract_pre_comment(pre_snippet: &str) -> (Option<String>, ListItemCommentStyle) {\n     let trimmed_pre_snippet = pre_snippet.trim();\n     // Both start and end are checked to support keeping a block comment inline with\n-    // the item, even if there are preceeding line comments, while still supporting\n+    // the item, even if there are preceding line comments, while still supporting\n     // a snippet that starts with a block comment but also contains one or more\n     // trailing single line comments.\n     // https://github.com/rust-lang/rustfmt/issues/3025"}, {"sha": "a49d473a13f3fbdc955656174cc1313b51ec6695", "filename": "src/tools/rustfmt/src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01dbfb3eb264135c432cef223848416f90dac290/src%2Ftools%2Frustfmt%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01dbfb3eb264135c432cef223848416f90dac290/src%2Ftools%2Frustfmt%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Ftypes.rs?ref=01dbfb3eb264135c432cef223848416f90dac290", "patch": "@@ -251,7 +251,7 @@ fn rewrite_segment(\n         match **args {\n             ast::GenericArgs::AngleBracketed(ref data) if !data.args.is_empty() => {\n                 // HACK: squeeze out the span between the identifier and the parameters.\n-                // The hack is requried so that we don't remove the separator inside macro calls.\n+                // The hack is required so that we don't remove the separator inside macro calls.\n                 // This does not work in the presence of comment, hoping that people are\n                 // sane about where to put their comment.\n                 let separator_snippet = context"}, {"sha": "c5414233f09b31268f5585eb3155781f115a6be5", "filename": "src/tools/tidy/src/pal.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01dbfb3eb264135c432cef223848416f90dac290/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01dbfb3eb264135c432cef223848416f90dac290/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs?ref=01dbfb3eb264135c432cef223848416f90dac290", "patch": "@@ -132,7 +132,7 @@ fn check_cfgs(\n             continue;\n         }\n \n-        let preceeded_by_doc_comment = {\n+        let preceded_by_doc_comment = {\n             let pre_contents = &contents[..idx];\n             let pre_newline = pre_contents.rfind('\\n');\n             let pre_doc_comment = pre_contents.rfind(\"///\");\n@@ -143,7 +143,7 @@ fn check_cfgs(\n             }\n         };\n \n-        if preceeded_by_doc_comment {\n+        if preceded_by_doc_comment {\n             continue;\n         }\n "}, {"sha": "5a061009b6b95eaedb22bab2d58f3a1ee26106e3", "filename": "src/tools/tidy/src/style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01dbfb3eb264135c432cef223848416f90dac290/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01dbfb3eb264135c432cef223848416f90dac290/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs?ref=01dbfb3eb264135c432cef223848416f90dac290", "patch": "@@ -396,7 +396,7 @@ pub fn check(path: &Path, bad: &mut bool) {\n             };\n             suppressible_tidy_err!(err, skip_file_length, \"\");\n         } else if lines > (LINES * 7) / 10 {\n-            // Just set it to something that doesn't trigger the \"unneccessarily ignored\" warning.\n+            // Just set it to something that doesn't trigger the \"unnecessarily ignored\" warning.\n             skip_file_length = Directive::Ignore(true);\n         }\n "}]}