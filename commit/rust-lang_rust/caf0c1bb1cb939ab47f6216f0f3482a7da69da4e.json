{"sha": "caf0c1bb1cb939ab47f6216f0f3482a7da69da4e", "node_id": "C_kwDOAAsO6NoAKGNhZjBjMWJiMWNiOTM5YWI0N2Y2MjE2ZjBmMzQ4MmE3ZGE2OWRhNGU", "commit": {"author": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-11-16T02:17:57Z"}, "committer": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-12-13T17:09:15Z"}, "message": "Reduce verbosity for `?` on non-`Try` expressions", "tree": {"sha": "4ee67dbc7fd528e561c06b1522d938f3e22d9019", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ee67dbc7fd528e561c06b1522d938f3e22d9019"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/caf0c1bb1cb939ab47f6216f0f3482a7da69da4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/caf0c1bb1cb939ab47f6216f0f3482a7da69da4e", "html_url": "https://github.com/rust-lang/rust/commit/caf0c1bb1cb939ab47f6216f0f3482a7da69da4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/caf0c1bb1cb939ab47f6216f0f3482a7da69da4e/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75b62757e460a1512a9860a32bd1c9138bcf101f", "url": "https://api.github.com/repos/rust-lang/rust/commits/75b62757e460a1512a9860a32bd1c9138bcf101f", "html_url": "https://github.com/rust-lang/rust/commit/75b62757e460a1512a9860a32bd1c9138bcf101f"}], "stats": {"total": 23, "additions": 8, "deletions": 15}, "files": [{"sha": "079899ac494bddd430621fdc0c2c5592354d7642", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caf0c1bb1cb939ab47f6216f0f3482a7da69da4e/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caf0c1bb1cb939ab47f6216f0f3482a7da69da4e/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=caf0c1bb1cb939ab47f6216f0f3482a7da69da4e", "patch": "@@ -352,6 +352,8 @@ pub enum ObligationCauseCode<'tcx> {\n \n     ForLoopIterator,\n \n+    QuestionMark,\n+\n     /// Well-formed checking. If a `WellFormedLoc` is provided,\n     /// then it will be used to eprform HIR-based wf checking\n     /// after an error occurs, in order to generate a more precise error span."}, {"sha": "9893e5143fca675c92cbf3f7367cefab708d2afb", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/caf0c1bb1cb939ab47f6216f0f3482a7da69da4e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caf0c1bb1cb939ab47f6216f0f3482a7da69da4e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=caf0c1bb1cb939ab47f6216f0f3482a7da69da4e", "patch": "@@ -1964,6 +1964,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             | ObligationCauseCode::BlockTailExpression(_)\n             | ObligationCauseCode::AwaitableExpr\n             | ObligationCauseCode::ForLoopIterator\n+            | ObligationCauseCode::QuestionMark\n             | ObligationCauseCode::LetElse => {}\n             ObligationCauseCode::SliceOrArrayElem => {\n                 err.note(\"slice and array elements must have `Sized` type\");"}, {"sha": "d45d76e75099d2cc56cbb9576db8fd6cd5fd1b48", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caf0c1bb1cb939ab47f6216f0f3482a7da69da4e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caf0c1bb1cb939ab47f6216f0f3482a7da69da4e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=caf0c1bb1cb939ab47f6216f0f3482a7da69da4e", "patch": "@@ -811,7 +811,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             match lang_item {\n                 hir::LangItem::FuturePoll => ObligationCauseCode::AwaitableExpr,\n                 hir::LangItem::IntoIterIntoIter => ObligationCauseCode::ForLoopIterator,\n-                // FIXME: This could also be used for `?`.  See if there are others.\n+                hir::LangItem::TryTraitBranch => ObligationCauseCode::QuestionMark,\n                 _ => traits::ItemObligation(def_id),\n             },\n         );"}, {"sha": "6a414ae8c4b800981533f7e44e297caa828f28e3", "filename": "library/core/src/ops/try_trait.rs", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/caf0c1bb1cb939ab47f6216f0f3482a7da69da4e/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caf0c1bb1cb939ab47f6216f0f3482a7da69da4e/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs?ref=caf0c1bb1cb939ab47f6216f0f3482a7da69da4e", "patch": "@@ -115,15 +115,14 @@ use crate::ops::ControlFlow;\n #[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\n #[rustc_on_unimplemented(\n     on(\n-        all(from_method = \"from_output\", from_desugaring = \"TryBlock\"),\n+        all(from_desugaring = \"TryBlock\"),\n         message = \"a `try` block must return `Result` or `Option` \\\n                     (or another type that implements `{Try}`)\",\n         label = \"could not wrap the final value of the block as `{Self}` doesn't implement `Try`\",\n     ),\n     on(\n-        all(from_method = \"branch\", from_desugaring = \"QuestionMark\"),\n-        message = \"the `?` operator can only be applied to values \\\n-                    that implement `{Try}`\",\n+        all(from_desugaring = \"QuestionMark\"),\n+        message = \"the `?` operator can only be applied to values that implement `{Try}`\",\n         label = \"the `?` operator cannot be applied to type `{Self}`\"\n     )\n )]\n@@ -226,7 +225,6 @@ pub trait Try: FromResidual {\n #[rustc_on_unimplemented(\n     on(\n         all(\n-            from_method = \"from_residual\",\n             from_desugaring = \"QuestionMark\",\n             _Self = \"std::result::Result<T, E>\",\n             R = \"std::option::Option<std::convert::Infallible>\"\n@@ -238,7 +236,6 @@ pub trait Try: FromResidual {\n     ),\n     on(\n         all(\n-            from_method = \"from_residual\",\n             from_desugaring = \"QuestionMark\",\n             _Self = \"std::result::Result<T, E>\",\n         ),\n@@ -252,7 +249,6 @@ pub trait Try: FromResidual {\n     ),\n     on(\n         all(\n-            from_method = \"from_residual\",\n             from_desugaring = \"QuestionMark\",\n             _Self = \"std::option::Option<T>\",\n             R = \"std::result::Result<T, E>\",\n@@ -264,7 +260,6 @@ pub trait Try: FromResidual {\n     ),\n     on(\n         all(\n-            from_method = \"from_residual\",\n             from_desugaring = \"QuestionMark\",\n             _Self = \"std::option::Option<T>\",\n         ),\n@@ -277,7 +272,6 @@ pub trait Try: FromResidual {\n     ),\n     on(\n         all(\n-            from_method = \"from_residual\",\n             from_desugaring = \"QuestionMark\",\n             _Self = \"std::ops::ControlFlow<B, C>\",\n             R = \"std::ops::ControlFlow<B, C>\",\n@@ -290,7 +284,6 @@ pub trait Try: FromResidual {\n     ),\n     on(\n         all(\n-            from_method = \"from_residual\",\n             from_desugaring = \"QuestionMark\",\n             _Self = \"std::ops::ControlFlow<B, C>\",\n             // `R` is not a `ControlFlow`, as that case was matched previously\n@@ -301,10 +294,7 @@ pub trait Try: FromResidual {\n         enclosing_scope = \"this function returns a `ControlFlow`\",\n     ),\n     on(\n-        all(\n-            from_method = \"from_residual\",\n-            from_desugaring = \"QuestionMark\"\n-        ),\n+        all(from_desugaring = \"QuestionMark\"),\n         message = \"the `?` operator can only be used in {ItemContext} \\\n                     that returns `Result` or `Option` \\\n                     (or another type that implements `{FromResidual}`)\","}]}