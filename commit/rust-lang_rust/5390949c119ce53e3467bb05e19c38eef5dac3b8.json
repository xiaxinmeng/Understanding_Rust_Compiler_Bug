{"sha": "5390949c119ce53e3467bb05e19c38eef5dac3b8", "node_id": "C_kwDOAAsO6NoAKDUzOTA5NDljMTE5Y2U1M2UzNDY3YmIwNWUxOWMzOGVlZjVkYWMzYjg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-30T12:49:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-30T12:49:23Z"}, "message": "Auto merge of #14448 - Veykril:infer-table, r=Veykril\n\ninternal: Don't expose InferenceTable outside of hir-ty", "tree": {"sha": "116d59fb1513ca82095254da452e02b51b70f804", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/116d59fb1513ca82095254da452e02b51b70f804"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5390949c119ce53e3467bb05e19c38eef5dac3b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5390949c119ce53e3467bb05e19c38eef5dac3b8", "html_url": "https://github.com/rust-lang/rust/commit/5390949c119ce53e3467bb05e19c38eef5dac3b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5390949c119ce53e3467bb05e19c38eef5dac3b8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02ea92fecbda16ce4bf4c8e295d46d5eb765ff0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/02ea92fecbda16ce4bf4c8e295d46d5eb765ff0a", "html_url": "https://github.com/rust-lang/rust/commit/02ea92fecbda16ce4bf4c8e295d46d5eb765ff0a"}, {"sha": "fc840dbb2de83f2fd41dffbef2896196f84f4259", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc840dbb2de83f2fd41dffbef2896196f84f4259", "html_url": "https://github.com/rust-lang/rust/commit/fc840dbb2de83f2fd41dffbef2896196f84f4259"}], "stats": {"total": 86, "additions": 49, "deletions": 37}, "files": [{"sha": "37ecdc23edc35e78a6094caa02f3eb97276171a2", "filename": "crates/hir-ty/src/autoderef.rs", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5390949c119ce53e3467bb05e19c38eef5dac3b8/crates%2Fhir-ty%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5390949c119ce53e3467bb05e19c38eef5dac3b8/crates%2Fhir-ty%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fautoderef.rs?ref=5390949c119ce53e3467bb05e19c38eef5dac3b8", "patch": "@@ -3,12 +3,17 @@\n //! reference to a type with the field `bar`. This is an approximation of the\n //! logic in rustc (which lives in rustc_hir_analysis/check/autoderef.rs).\n \n+use std::sync::Arc;\n+\n use chalk_ir::cast::Cast;\n use hir_def::lang_item::LangItem;\n use hir_expand::name::name;\n use limit::Limit;\n \n-use crate::{infer::unify::InferenceTable, Goal, Interner, ProjectionTyExt, Ty, TyBuilder, TyKind};\n+use crate::{\n+    db::HirDatabase, infer::unify::InferenceTable, Canonical, Goal, Interner, ProjectionTyExt,\n+    TraitEnvironment, Ty, TyBuilder, TyKind,\n+};\n \n static AUTODEREF_RECURSION_LIMIT: Limit = Limit::new(10);\n \n@@ -18,16 +23,31 @@ pub(crate) enum AutoderefKind {\n     Overloaded,\n }\n \n+pub fn autoderef(\n+    db: &dyn HirDatabase,\n+    env: Arc<TraitEnvironment>,\n+    ty: Canonical<Ty>,\n+) -> impl Iterator<Item = Canonical<Ty>> + '_ {\n+    let mut table = InferenceTable::new(db, env);\n+    let ty = table.instantiate_canonical(ty);\n+    let mut autoderef = Autoderef::new(&mut table, ty);\n+    let mut v = Vec::new();\n+    while let Some((ty, _steps)) = autoderef.next() {\n+        v.push(autoderef.table.canonicalize(ty).value);\n+    }\n+    v.into_iter()\n+}\n+\n #[derive(Debug)]\n-pub struct Autoderef<'a, 'db> {\n-    pub table: &'a mut InferenceTable<'db>,\n+pub(crate) struct Autoderef<'a, 'db> {\n+    pub(crate) table: &'a mut InferenceTable<'db>,\n     ty: Ty,\n     at_start: bool,\n     steps: Vec<(AutoderefKind, Ty)>,\n }\n \n impl<'a, 'db> Autoderef<'a, 'db> {\n-    pub fn new(table: &'a mut InferenceTable<'db>, ty: Ty) -> Self {\n+    pub(crate) fn new(table: &'a mut InferenceTable<'db>, ty: Ty) -> Self {\n         let ty = table.resolve_ty_shallow(&ty);\n         Autoderef { table, ty, at_start: true, steps: Vec::new() }\n     }"}, {"sha": "38a0995302712f13cafc546d5cea1f3ba6dc5049", "filename": "crates/hir-ty/src/infer/expr.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5390949c119ce53e3467bb05e19c38eef5dac3b8/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5390949c119ce53e3467bb05e19c38eef5dac3b8/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs?ref=5390949c119ce53e3467bb05e19c38eef5dac3b8", "patch": "@@ -23,7 +23,7 @@ use stdx::always;\n use syntax::ast::RangeOp;\n \n use crate::{\n-    autoderef::{self, Autoderef},\n+    autoderef::{builtin_deref, deref_by_trait, Autoderef},\n     consteval,\n     infer::{\n         coerce::CoerceMany, find_continuable, pat::contains_explicit_ref_binding, BreakableKind,\n@@ -675,12 +675,10 @@ impl<'a> InferenceContext<'a> {\n                                 );\n                             }\n                         }\n-                        if let Some(derefed) =\n-                            autoderef::builtin_deref(&mut self.table, &inner_ty, true)\n-                        {\n+                        if let Some(derefed) = builtin_deref(&mut self.table, &inner_ty, true) {\n                             self.resolve_ty_shallow(derefed)\n                         } else {\n-                            autoderef::deref_by_trait(&mut self.table, inner_ty)\n+                            deref_by_trait(&mut self.table, inner_ty)\n                                 .unwrap_or_else(|| self.err_ty())\n                         }\n                     }\n@@ -793,7 +791,7 @@ impl<'a> InferenceContext<'a> {\n                     let canonicalized = self.canonicalize(base_ty.clone());\n                     let receiver_adjustments = method_resolution::resolve_indexing_op(\n                         self.db,\n-                        &mut self.table,\n+                        self.table.trait_env.clone(),\n                         canonicalized.value,\n                         index_trait,\n                     );"}, {"sha": "f0e0714e1db203a0e99cced99aa92cefd2126076", "filename": "crates/hir-ty/src/infer/unify.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5390949c119ce53e3467bb05e19c38eef5dac3b8/crates%2Fhir-ty%2Fsrc%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5390949c119ce53e3467bb05e19c38eef5dac3b8/crates%2Fhir-ty%2Fsrc%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Funify.rs?ref=5390949c119ce53e3467bb05e19c38eef5dac3b8", "patch": "@@ -32,11 +32,11 @@ impl<'a> InferenceContext<'a> {\n }\n \n #[derive(Debug, Clone)]\n-pub struct Canonicalized<T>\n+pub(crate) struct Canonicalized<T>\n where\n     T: HasInterner<Interner = Interner>,\n {\n-    pub value: Canonical<T>,\n+    pub(crate) value: Canonical<T>,\n     free_vars: Vec<GenericArg>,\n }\n \n@@ -140,7 +140,7 @@ bitflags::bitflags! {\n type ChalkInferenceTable = chalk_solve::infer::InferenceTable<Interner>;\n \n #[derive(Clone)]\n-pub struct InferenceTable<'a> {\n+pub(crate) struct InferenceTable<'a> {\n     pub(crate) db: &'a dyn HirDatabase,\n     pub(crate) trait_env: Arc<TraitEnvironment>,\n     var_unification_table: ChalkInferenceTable,\n@@ -155,7 +155,7 @@ pub(crate) struct InferenceTableSnapshot {\n }\n \n impl<'a> InferenceTable<'a> {\n-    pub fn new(db: &'a dyn HirDatabase, trait_env: Arc<TraitEnvironment>) -> Self {\n+    pub(crate) fn new(db: &'a dyn HirDatabase, trait_env: Arc<TraitEnvironment>) -> Self {\n         InferenceTable {\n             db,\n             trait_env,\n@@ -204,7 +204,7 @@ impl<'a> InferenceTable<'a> {\n         .intern(Interner)\n     }\n \n-    pub fn canonicalize<T: TypeFoldable<Interner> + HasInterner<Interner = Interner>>(\n+    pub(crate) fn canonicalize<T: TypeFoldable<Interner> + HasInterner<Interner = Interner>>(\n         &mut self,\n         t: T,\n     ) -> Canonicalized<T>\n@@ -320,7 +320,7 @@ impl<'a> InferenceTable<'a> {\n         )\n     }\n \n-    pub fn instantiate_canonical<T>(&mut self, canonical: Canonical<T>) -> T\n+    pub(crate) fn instantiate_canonical<T>(&mut self, canonical: Canonical<T>) -> T\n     where\n         T: HasInterner<Interner = Interner> + TypeFoldable<Interner> + std::fmt::Debug,\n     {"}, {"sha": "c36fad614f8d38789339ed4c7b972acfb6bd1c07", "filename": "crates/hir-ty/src/lib.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5390949c119ce53e3467bb05e19c38eef5dac3b8/crates%2Fhir-ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5390949c119ce53e3467bb05e19c38eef5dac3b8/crates%2Fhir-ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flib.rs?ref=5390949c119ce53e3467bb05e19c38eef5dac3b8", "patch": "@@ -52,14 +52,16 @@ use rustc_hash::FxHashSet;\n use traits::FnTrait;\n use utils::Generics;\n \n-use crate::{consteval::unknown_const, db::HirDatabase, utils::generics};\n+use crate::{\n+    consteval::unknown_const, db::HirDatabase, infer::unify::InferenceTable, utils::generics,\n+};\n \n-pub use autoderef::Autoderef;\n+pub use autoderef::autoderef;\n pub use builder::{ParamKind, TyBuilder};\n pub use chalk_ext::*;\n pub use infer::{\n-    could_coerce, could_unify, unify::InferenceTable, Adjust, Adjustment, AutoBorrow, BindingMode,\n-    InferenceDiagnostic, InferenceResult, OverloadedDeref, PointerCast,\n+    could_coerce, could_unify, Adjust, Adjustment, AutoBorrow, BindingMode, InferenceDiagnostic,\n+    InferenceResult, OverloadedDeref, PointerCast,\n };\n pub use interner::Interner;\n pub use lower::{"}, {"sha": "5d06906aa3a94e4f5962620df5940681daa1206f", "filename": "crates/hir-ty/src/method_resolution.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5390949c119ce53e3467bb05e19c38eef5dac3b8/crates%2Fhir-ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5390949c119ce53e3467bb05e19c38eef5dac3b8/crates%2Fhir-ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fmethod_resolution.rs?ref=5390949c119ce53e3467bb05e19c38eef5dac3b8", "patch": "@@ -1263,14 +1263,15 @@ fn iterate_inherent_methods(\n }\n \n /// Returns the receiver type for the index trait call.\n-pub fn resolve_indexing_op(\n+pub(crate) fn resolve_indexing_op(\n     db: &dyn HirDatabase,\n-    table: &mut InferenceTable<'_>,\n+    env: Arc<TraitEnvironment>,\n     ty: Canonical<Ty>,\n     index_trait: TraitId,\n ) -> Option<ReceiverAdjustments> {\n+    let mut table = InferenceTable::new(db, env.clone());\n     let ty = table.instantiate_canonical(ty);\n-    let deref_chain = autoderef_method_receiver(table, ty);\n+    let deref_chain = autoderef_method_receiver(&mut table, ty);\n     for (ty, adj) in deref_chain {\n         let goal = generic_implements_goal(db, table.trait_env.clone(), index_trait, &ty);\n         if db"}, {"sha": "648ae00a5fa02dbc6457d7af33880321181c9fa6", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5390949c119ce53e3467bb05e19c38eef5dac3b8/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5390949c119ce53e3467bb05e19c38eef5dac3b8/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=5390949c119ce53e3467bb05e19c38eef5dac3b8", "patch": "@@ -57,7 +57,7 @@ use hir_def::{\n };\n use hir_expand::{name::name, MacroCallKind};\n use hir_ty::{\n-    all_super_traits,\n+    all_super_traits, autoderef,\n     consteval::{try_const_usize, unknown_const_as_generic, ConstEvalError, ConstExt},\n     diagnostics::BodyValidationDiagnostic,\n     display::HexifiedConst,\n@@ -66,10 +66,9 @@ use hir_ty::{\n     mir::{self, interpret_mir},\n     primitive::UintTy,\n     traits::FnTrait,\n-    AliasTy, Autoderef, CallableDefId, CallableSig, Canonical, CanonicalVarKinds, Cast, ClosureId,\n-    GenericArgData, InferenceTable, Interner, ParamKind, QuantifiedWhereClause, Scalar,\n-    Substitution, TraitEnvironment, TraitRefExt, Ty, TyBuilder, TyDefId, TyExt, TyKind,\n-    WhereClause,\n+    AliasTy, CallableDefId, CallableSig, Canonical, CanonicalVarKinds, Cast, ClosureId,\n+    GenericArgData, Interner, ParamKind, QuantifiedWhereClause, Scalar, Substitution,\n+    TraitEnvironment, TraitRefExt, Ty, TyBuilder, TyDefId, TyExt, TyKind, WhereClause,\n };\n use itertools::Itertools;\n use nameres::diagnostics::DefDiagnosticKind;\n@@ -3518,15 +3517,7 @@ impl Type {\n     fn autoderef_<'a>(&'a self, db: &'a dyn HirDatabase) -> impl Iterator<Item = Ty> + 'a {\n         // There should be no inference vars in types passed here\n         let canonical = hir_ty::replace_errors_with_variables(&self.ty);\n-\n-        let mut table = InferenceTable::new(db, self.env.clone());\n-        let ty = table.instantiate_canonical(canonical);\n-        let mut autoderef = Autoderef::new(&mut table, ty);\n-        let mut v = Vec::new();\n-        while let Some((ty, _steps)) = autoderef.next() {\n-            v.push(autoderef.table.canonicalize(ty).value);\n-        }\n-        v.into_iter().map(|canonical| canonical.value)\n+        autoderef(db, self.env.clone(), canonical).map(|canonical| canonical.value)\n     }\n \n     // This would be nicer if it just returned an iterator, but that runs into"}]}