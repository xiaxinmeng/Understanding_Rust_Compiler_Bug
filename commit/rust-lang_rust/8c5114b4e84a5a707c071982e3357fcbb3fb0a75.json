{"sha": "8c5114b4e84a5a707c071982e3357fcbb3fb0a75", "node_id": "C_kwDOAAsO6NoAKDhjNTExNGI0ZTg0YTVhNzA3YzA3MTk4MmUzMzU3ZmNiYjNmYjBhNzU", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-10-01T06:41:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-01T06:41:08Z"}, "message": "Rollup merge of #89327 - oli-obk:nll_diag_infer_vars, r=wesleywiser\n\nPick one possible lifetime in case there are multiple choices\n\nIn case a lifetime variable is created, but doesn't have an obvious lifetime in the list of named lifetimes that it should be inferred to, just pick the first one for the diagnostic.\n\nThis happens e.g. in\n\n```rust\nfn foo<'a, 'b>(a: Struct<'a>, b: Struct<'b>) -> impl Trait<'a, 'b> {\n    if bar() { a } else { b }\n}\n```\n\nwhere we get a lifetime variable that combines the lifetimes of `a` and `b` creating a lifetime that is the intersection of both. Right now the type system cannot express this and thus we get an error, but that error also can't express this.\n\nI can also create an entirely new diagnostic that mentions all involved lifetimes, so it would actually mention `'a` and `'b` instead of just `'b`.", "tree": {"sha": "421b457d0454d60efb399ea5df29b6676a692bd4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/421b457d0454d60efb399ea5df29b6676a692bd4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c5114b4e84a5a707c071982e3357fcbb3fb0a75", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhVq2ECRBK7hj4Ov3rIwAAXQ4IADsHz/MURcJOO6mtF9fcb9lm\nFsMlYitZ7EorwadhSUTb8zFFyjfjozLzttblPNbMunCmxm1+D62w4546Vq1GmuTo\nttWJgGmblo0tUSdmpVwHZOdBU7VwhpXegd+CmNon7HFWsAYjNR407wICRRXoLm02\nJmVqeFbXHs3T9lyMRTvR0EeoxrNVtBbnUuyc/vzY6KC3YFsjH63EU0TBIxoxUZu0\nbGWkH5flLvAYQjOJ2JR1oLqePvIbLGIhFtOenRjwQF+YJYc4erQd95SMW/67lNDx\nZ+L0i2r8zLqL6xRv8eRttEFuzqUOpRX0p+sLusZ6YhS6hcviGUZBSRA6nJat2C8=\n=BewX\n-----END PGP SIGNATURE-----\n", "payload": "tree 421b457d0454d60efb399ea5df29b6676a692bd4\nparent 27269554b85d9202f5cdbfa09c6350498adf9d31\nparent 87a4a79554b03e2002691b8734d23fb7a556fab1\nauthor Manish Goregaokar <manishsmail@gmail.com> 1633070468 -0700\ncommitter GitHub <noreply@github.com> 1633070468 -0700\n\nRollup merge of #89327 - oli-obk:nll_diag_infer_vars, r=wesleywiser\n\nPick one possible lifetime in case there are multiple choices\n\nIn case a lifetime variable is created, but doesn't have an obvious lifetime in the list of named lifetimes that it should be inferred to, just pick the first one for the diagnostic.\n\nThis happens e.g. in\n\n```rust\nfn foo<'a, 'b>(a: Struct<'a>, b: Struct<'b>) -> impl Trait<'a, 'b> {\n    if bar() { a } else { b }\n}\n```\n\nwhere we get a lifetime variable that combines the lifetimes of `a` and `b` creating a lifetime that is the intersection of both. Right now the type system cannot express this and thus we get an error, but that error also can't express this.\n\nI can also create an entirely new diagnostic that mentions all involved lifetimes, so it would actually mention `'a` and `'b` instead of just `'b`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c5114b4e84a5a707c071982e3357fcbb3fb0a75", "html_url": "https://github.com/rust-lang/rust/commit/8c5114b4e84a5a707c071982e3357fcbb3fb0a75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c5114b4e84a5a707c071982e3357fcbb3fb0a75/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27269554b85d9202f5cdbfa09c6350498adf9d31", "url": "https://api.github.com/repos/rust-lang/rust/commits/27269554b85d9202f5cdbfa09c6350498adf9d31", "html_url": "https://github.com/rust-lang/rust/commit/27269554b85d9202f5cdbfa09c6350498adf9d31"}, {"sha": "87a4a79554b03e2002691b8734d23fb7a556fab1", "url": "https://api.github.com/repos/rust-lang/rust/commits/87a4a79554b03e2002691b8734d23fb7a556fab1", "html_url": "https://github.com/rust-lang/rust/commit/87a4a79554b03e2002691b8734d23fb7a556fab1"}], "stats": {"total": 29, "additions": 26, "deletions": 3}, "files": [{"sha": "4eb7be542e7a1b924ee2c1ce07298037756d9a5f", "filename": "compiler/rustc_borrowck/src/region_infer/opaque_types.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8c5114b4e84a5a707c071982e3357fcbb3fb0a75/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c5114b4e84a5a707c071982e3357fcbb3fb0a75/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs?ref=8c5114b4e84a5a707c071982e3357fcbb3fb0a75", "patch": "@@ -124,7 +124,22 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             ty::ReVar(vid) => {\n                 // Find something that we can name\n                 let upper_bound = self.approx_universal_upper_bound(vid);\n-                self.definitions[upper_bound].external_name.unwrap_or(region)\n+                let upper_bound = &self.definitions[upper_bound];\n+                match upper_bound.external_name {\n+                    Some(reg) => reg,\n+                    None => {\n+                        // Nothing exact found, so we pick the first one that we find.\n+                        let scc = self.constraint_sccs.scc(vid);\n+                        for vid in self.rev_scc_graph.as_ref().unwrap().upper_bounds(scc) {\n+                            match self.definitions[vid].external_name {\n+                                None => {}\n+                                Some(&ty::ReStatic) => {}\n+                                Some(region) => return region,\n+                            }\n+                        }\n+                        region\n+                    }\n+                }\n             }\n             _ => region,\n         })"}, {"sha": "0fe9b06355f0b8446e60c1dd370a3c9562b86ecb", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-unrelated.nll.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8c5114b4e84a5a707c071982e3357fcbb3fb0a75/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8c5114b4e84a5a707c071982e3357fcbb3fb0a75/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.nll.stderr?ref=8c5114b4e84a5a707c071982e3357fcbb3fb0a75", "patch": "@@ -4,7 +4,11 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL | fn upper_bounds<'a, 'b, 'c, 'd, 'e>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'d, 'e>\n    |                                                                          ^^^^^^^^^^^^^^^^^^\n    |\n-   = note: hidden type `Ordinary<'_>` captures lifetime '_#9r\n+note: hidden type `Ordinary<'b>` captures the lifetime `'b` as defined on the function body at 16:21\n+  --> $DIR/ordinary-bounds-unrelated.rs:16:21\n+   |\n+LL | fn upper_bounds<'a, 'b, 'c, 'd, 'e>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'d, 'e>\n+   |                     ^^\n \n error: aborting due to previous error\n "}, {"sha": "6de77523db57710a77afa4ec3c461b57d8c34278", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-unsuited.nll.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8c5114b4e84a5a707c071982e3357fcbb3fb0a75/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8c5114b4e84a5a707c071982e3357fcbb3fb0a75/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.nll.stderr?ref=8c5114b4e84a5a707c071982e3357fcbb3fb0a75", "patch": "@@ -4,7 +4,11 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL | fn upper_bounds<'a, 'b>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'a, 'b>\n    |                                                              ^^^^^^^^^^^^^^^^^^\n    |\n-   = note: hidden type `Ordinary<'_>` captures lifetime '_#6r\n+note: hidden type `Ordinary<'b>` captures the lifetime `'b` as defined on the function body at 18:21\n+  --> $DIR/ordinary-bounds-unsuited.rs:18:21\n+   |\n+LL | fn upper_bounds<'a, 'b>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'a, 'b>\n+   |                     ^^\n \n error: aborting due to previous error\n "}]}