{"sha": "e39d61cbf3ae855801f7a2a494ce1033a00610d2", "node_id": "C_kwDOAAsO6NoAKGUzOWQ2MWNiZjNhZTg1NTgwMWY3YTJhNDk0Y2UxMDMzYTAwNjEwZDI", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-10T15:30:11Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-05-16T11:55:47Z"}, "message": "Remove `MetadataRef` type alias", "tree": {"sha": "9dee1e5ca2453c68f07aa6c2494c6b36cd64e923", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9dee1e5ca2453c68f07aa6c2494c6b36cd64e923"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e39d61cbf3ae855801f7a2a494ce1033a00610d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e39d61cbf3ae855801f7a2a494ce1033a00610d2", "html_url": "https://github.com/rust-lang/rust/commit/e39d61cbf3ae855801f7a2a494ce1033a00610d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e39d61cbf3ae855801f7a2a494ce1033a00610d2/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "086c08d86ac4d63f12961e37ef433a6128ad974b", "url": "https://api.github.com/repos/rust-lang/rust/commits/086c08d86ac4d63f12961e37ef433a6128ad974b", "html_url": "https://github.com/rust-lang/rust/commit/086c08d86ac4d63f12961e37ef433a6128ad974b"}], "stats": {"total": 30, "additions": 12, "deletions": 18}, "files": [{"sha": "8bf84772f0869024be1f34732579633e97d105ac", "filename": "compiler/rustc_codegen_ssa/src/back/metadata.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e39d61cbf3ae855801f7a2a494ce1033a00610d2/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e39d61cbf3ae855801f7a2a494ce1033a00610d2/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs?ref=e39d61cbf3ae855801f7a2a494ce1033a00610d2", "patch": "@@ -14,8 +14,7 @@ use snap::write::FrameEncoder;\n \n use object::elf::NT_GNU_PROPERTY_TYPE_0;\n use rustc_data_structures::memmap::Mmap;\n-use rustc_data_structures::owned_slice::try_slice_owned;\n-use rustc_data_structures::sync::MetadataRef;\n+use rustc_data_structures::owned_slice::{try_slice_owned, OwnedSlice};\n use rustc_metadata::fs::METADATA_FILENAME;\n use rustc_metadata::EncodedMetadata;\n use rustc_session::cstore::MetadataLoader;\n@@ -39,7 +38,7 @@ pub struct DefaultMetadataLoader;\n fn load_metadata_with(\n     path: &Path,\n     f: impl for<'a> FnOnce(&'a [u8]) -> Result<&'a [u8], String>,\n-) -> Result<MetadataRef, String> {\n+) -> Result<OwnedSlice, String> {\n     let file =\n         File::open(path).map_err(|e| format!(\"failed to open file '{}': {}\", path.display(), e))?;\n \n@@ -49,7 +48,7 @@ fn load_metadata_with(\n }\n \n impl MetadataLoader for DefaultMetadataLoader {\n-    fn get_rlib_metadata(&self, _target: &Target, path: &Path) -> Result<MetadataRef, String> {\n+    fn get_rlib_metadata(&self, _target: &Target, path: &Path) -> Result<OwnedSlice, String> {\n         load_metadata_with(path, |data| {\n             let archive = object::read::archive::ArchiveFile::parse(&*data)\n                 .map_err(|e| format!(\"failed to parse rlib '{}': {}\", path.display(), e))?;\n@@ -69,7 +68,7 @@ impl MetadataLoader for DefaultMetadataLoader {\n         })\n     }\n \n-    fn get_dylib_metadata(&self, _target: &Target, path: &Path) -> Result<MetadataRef, String> {\n+    fn get_dylib_metadata(&self, _target: &Target, path: &Path) -> Result<OwnedSlice, String> {\n         load_metadata_with(path, |data| search_for_section(path, data, \".rustc\"))\n     }\n }"}, {"sha": "d0efc171998027bf1d87032ef73975725bb03307", "filename": "compiler/rustc_codegen_ssa/src/traits/backend.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e39d61cbf3ae855801f7a2a494ce1033a00610d2/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e39d61cbf3ae855801f7a2a494ce1033a00610d2/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs?ref=e39d61cbf3ae855801f7a2a494ce1033a00610d2", "patch": "@@ -1,10 +1,13 @@\n+use std::any::Any;\n+\n use super::write::WriteBackendMethods;\n use super::CodegenObject;\n use crate::back::write::TargetMachineFactoryFn;\n use crate::{CodegenResults, ModuleCodegen};\n \n use rustc_ast::expand::allocator::AllocatorKind;\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::sync::{DynSend, DynSync};\n use rustc_errors::ErrorGuaranteed;\n use rustc_metadata::EncodedMetadata;\n use rustc_middle::dep_graph::{WorkProduct, WorkProductId};\n@@ -20,11 +23,6 @@ use rustc_span::symbol::Symbol;\n use rustc_target::abi::call::FnAbi;\n use rustc_target::spec::Target;\n \n-pub use rustc_data_structures::sync::MetadataRef;\n-\n-use rustc_data_structures::sync::{DynSend, DynSync};\n-use std::any::Any;\n-\n pub trait BackendTypes {\n     type Value: CodegenObject;\n     type Function: CodegenObject;"}, {"sha": "6c3197d8ec2c5dd70327493f145d18b0da1b502a", "filename": "compiler/rustc_data_structures/src/sync.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e39d61cbf3ae855801f7a2a494ce1033a00610d2/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e39d61cbf3ae855801f7a2a494ce1033a00610d2/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs?ref=e39d61cbf3ae855801f7a2a494ce1033a00610d2", "patch": "@@ -40,7 +40,6 @@\n //! [^2] `MTLockRef` is a typedef.\n \n pub use crate::marker::*;\n-use crate::owned_slice::OwnedSlice;\n use std::collections::HashMap;\n use std::hash::{BuildHasher, Hash};\n use std::ops::{Deref, DerefMut};\n@@ -93,8 +92,6 @@ mod mode {\n \n pub use mode::{is_dyn_thread_safe, set_dyn_thread_safe_mode};\n \n-pub type MetadataRef = OwnedSlice;\n-\n cfg_if! {\n     if #[cfg(not(parallel_compiler))] {\n         pub unsafe auto trait Send {}"}, {"sha": "6c4d121fd0145d52bff6d87c1eb949e15c1b6407", "filename": "compiler/rustc_metadata/src/locator.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e39d61cbf3ae855801f7a2a494ce1033a00610d2/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e39d61cbf3ae855801f7a2a494ce1033a00610d2/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs?ref=e39d61cbf3ae855801f7a2a494ce1033a00610d2", "patch": "@@ -220,7 +220,6 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::memmap::Mmap;\n use rustc_data_structures::owned_slice::slice_owned;\n use rustc_data_structures::svh::Svh;\n-use rustc_data_structures::sync::MetadataRef;\n use rustc_errors::{DiagnosticArgValue, FatalError, IntoDiagnosticArg};\n use rustc_fs_util::try_canonicalize;\n use rustc_session::config::{self, CrateType};\n@@ -782,7 +781,7 @@ fn get_metadata_section<'p>(\n     if !filename.exists() {\n         return Err(MetadataError::NotPresent(filename));\n     }\n-    let raw_bytes: MetadataRef = match flavor {\n+    let raw_bytes = match flavor {\n         CrateFlavor::Rlib => {\n             loader.get_rlib_metadata(target, filename).map_err(MetadataError::LoadFailure)?\n         }"}, {"sha": "dc475e8c6d57c9cab7f7e83280a706127e30f490", "filename": "compiler/rustc_session/src/cstore.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e39d61cbf3ae855801f7a2a494ce1033a00610d2/compiler%2Frustc_session%2Fsrc%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e39d61cbf3ae855801f7a2a494ce1033a00610d2/compiler%2Frustc_session%2Fsrc%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fcstore.rs?ref=e39d61cbf3ae855801f7a2a494ce1033a00610d2", "patch": "@@ -6,7 +6,8 @@ use crate::search_paths::PathKind;\n use crate::utils::NativeLibKind;\n use crate::Session;\n use rustc_ast as ast;\n-use rustc_data_structures::sync::{self, AppendOnlyIndexVec, MetadataRef, RwLock};\n+use rustc_data_structures::owned_slice::OwnedSlice;\n+use rustc_data_structures::sync::{self, AppendOnlyIndexVec, RwLock};\n use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, StableCrateId, LOCAL_CRATE};\n use rustc_hir::definitions::{DefKey, DefPath, DefPathHash, Definitions};\n use rustc_span::hygiene::{ExpnHash, ExpnId};\n@@ -203,8 +204,8 @@ pub enum ExternCrateSource {\n /// metadata in library -- this trait just serves to decouple rustc_metadata from\n /// the archive reader, which depends on LLVM.\n pub trait MetadataLoader: std::fmt::Debug {\n-    fn get_rlib_metadata(&self, target: &Target, filename: &Path) -> Result<MetadataRef, String>;\n-    fn get_dylib_metadata(&self, target: &Target, filename: &Path) -> Result<MetadataRef, String>;\n+    fn get_rlib_metadata(&self, target: &Target, filename: &Path) -> Result<OwnedSlice, String>;\n+    fn get_dylib_metadata(&self, target: &Target, filename: &Path) -> Result<OwnedSlice, String>;\n }\n \n pub type MetadataLoaderDyn = dyn MetadataLoader + Send + Sync + sync::DynSend + sync::DynSync;"}]}