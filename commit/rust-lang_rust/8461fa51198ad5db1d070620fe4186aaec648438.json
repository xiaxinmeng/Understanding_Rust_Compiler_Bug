{"sha": "8461fa51198ad5db1d070620fe4186aaec648438", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0NjFmYTUxMTk4YWQ1ZGIxZDA3MDYyMGZlNDE4NmFhZWM2NDg0Mzg=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2020-01-10T14:36:22Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2020-01-12T15:37:50Z"}, "message": "Diagnostics should not end with a full stop", "tree": {"sha": "14f2efd3dd85de86ef4ec9cf92128b7b2f7e316f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14f2efd3dd85de86ef4ec9cf92128b7b2f7e316f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8461fa51198ad5db1d070620fe4186aaec648438", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8461fa51198ad5db1d070620fe4186aaec648438", "html_url": "https://github.com/rust-lang/rust/commit/8461fa51198ad5db1d070620fe4186aaec648438", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8461fa51198ad5db1d070620fe4186aaec648438/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f", "html_url": "https://github.com/rust-lang/rust/commit/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f"}], "stats": {"total": 80, "additions": 40, "deletions": 40}, "files": [{"sha": "15720ddcfc677f19a5f358fb0d9f37576866be3f", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8461fa51198ad5db1d070620fe4186aaec648438/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8461fa51198ad5db1d070620fe4186aaec648438/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=8461fa51198ad5db1d070620fe4186aaec648438", "patch": "@@ -44,7 +44,7 @@\n // Here we explicitly #[cfg]-out this whole crate when testing. If we don't do\n // this, both the generated test artifact and the linked libtest (which\n // transitively includes libcore) will both define the same set of lang items,\n-// and this will cause the E0152 \"duplicate lang item found\" error. See\n+// and this will cause the E0152 \"found duplicate lang item\" error. See\n // discussion in #50466 for details.\n //\n // This cfg won't affect doc tests."}, {"sha": "643359f098b4d3c5424a615f457c5a126db0f564", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8461fa51198ad5db1d070620fe4186aaec648438/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8461fa51198ad5db1d070620fe4186aaec648438/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=8461fa51198ad5db1d070620fe4186aaec648438", "patch": "@@ -184,7 +184,7 @@ impl LanguageItemCollector<'tcx> {\n                         self.tcx.sess,\n                         span,\n                         E0152,\n-                        \"duplicate lang item found: `{}`.\",\n+                        \"found duplicate lang item `{}`\",\n                         name\n                     ),\n                     None => {\n@@ -206,12 +206,12 @@ impl LanguageItemCollector<'tcx> {\n                     },\n                 };\n                 if let Some(span) = self.tcx.hir().span_if_local(original_def_id) {\n-                    err.span_note(span, \"first defined here.\");\n+                    err.span_note(span, \"first defined here\");\n                 } else {\n                     match self.tcx.extern_crate(original_def_id) {\n                         Some(ExternCrate {dependency_of, ..}) => {\n                             err.note(&format!(\n-                            \"first defined in crate `{}` (which `{}` depends on).\",\n+                            \"first defined in crate `{}` (which `{}` depends on)\",\n                                       self.tcx.crate_name(original_def_id.krate),\n                                       self.tcx.crate_name(*dependency_of)));\n                         },"}, {"sha": "8d220a3f695f28df454b1730c77d39958de80dda", "filename": "src/librustc_passes/diagnostic_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8461fa51198ad5db1d070620fe4186aaec648438/src%2Flibrustc_passes%2Fdiagnostic_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8461fa51198ad5db1d070620fe4186aaec648438/src%2Flibrustc_passes%2Fdiagnostic_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdiagnostic_items.rs?ref=8461fa51198ad5db1d070620fe4186aaec648438", "patch": "@@ -73,7 +73,7 @@ fn collect_item(\n                 )),\n             };\n             if let Some(span) = tcx.hir().span_if_local(original_def_id) {\n-                err.span_note(span, \"first defined here.\");\n+                err.span_note(span, \"first defined here\");\n             } else {\n                 err.note(&format!(\n                     \"first defined in crate `{}`.\","}, {"sha": "8d5afb194a17500ce953e892931a06538dc388a9", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8461fa51198ad5db1d070620fe4186aaec648438/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8461fa51198ad5db1d070620fe4186aaec648438/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=8461fa51198ad5db1d070620fe4186aaec648438", "patch": "@@ -2006,7 +2006,7 @@ impl<'a> Resolver<'a> {\n                             continue;\n                         }\n                     }\n-                    let msg = \"there are too many initial `super`s.\".to_string();\n+                    let msg = \"there are too many leading `super` keywords\".to_string();\n                     return PathResult::Failed {\n                         span: ident.span,\n                         label: msg,"}, {"sha": "baf9ae1ac291151811f81bf4d9b992476cbb081b", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8461fa51198ad5db1d070620fe4186aaec648438/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8461fa51198ad5db1d070620fe4186aaec648438/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=8461fa51198ad5db1d070620fe4186aaec648438", "patch": "@@ -1664,7 +1664,7 @@ fn check_opaque_for_cycles<'tcx>(\n         if let hir::OpaqueTyOrigin::AsyncFn = origin {\n             struct_span_err!(tcx.sess, span, E0733, \"recursion in an `async fn` requires boxing\",)\n                 .span_label(span, \"recursive `async fn`\")\n-                .note(\"a recursive `async fn` must be rewritten to return a boxed `dyn Future`.\")\n+                .note(\"a recursive `async fn` must be rewritten to return a boxed `dyn Future`\")\n                 .emit();\n         } else {\n             let mut err ="}, {"sha": "f773a8276e3547640e8b5fb0c79119ae4920560b", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8461fa51198ad5db1d070620fe4186aaec648438/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8461fa51198ad5db1d070620fe4186aaec648438/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=8461fa51198ad5db1d070620fe4186aaec648438", "patch": "@@ -199,7 +199,7 @@ fn default_hook(info: &PanicInfo<'_>) {\n                     let _ = writeln!(\n                         err,\n                         \"note: run with `RUST_BACKTRACE=1` \\\n-                                           environment variable to display a backtrace.\"\n+                                           environment variable to display a backtrace\"\n                     );\n                 }\n             }"}, {"sha": "0c5359b9bd8c6ef05b749852be31ad8311710c04", "filename": "src/test/compile-fail/panic-handler-twice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8461fa51198ad5db1d070620fe4186aaec648438/src%2Ftest%2Fcompile-fail%2Fpanic-handler-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8461fa51198ad5db1d070620fe4186aaec648438/src%2Ftest%2Fcompile-fail%2Fpanic-handler-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpanic-handler-twice.rs?ref=8461fa51198ad5db1d070620fe4186aaec648438", "patch": "@@ -10,7 +10,7 @@ use core::panic::PanicInfo;\n \n #[panic_handler]\n fn panic(info: &PanicInfo) -> ! {\n-    //~^ error duplicate lang item found: `panic_impl`\n+    //~^ ERROR found duplicate lang item `panic_impl`\n     loop {}\n }\n "}, {"sha": "f6e4c8be29260a5f769c3290ca68bbbf25926e79", "filename": "src/test/ui/async-await/mutually-recursive-async-impl-trait-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8461fa51198ad5db1d070620fe4186aaec648438/src%2Ftest%2Fui%2Fasync-await%2Fmutually-recursive-async-impl-trait-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8461fa51198ad5db1d070620fe4186aaec648438/src%2Ftest%2Fui%2Fasync-await%2Fmutually-recursive-async-impl-trait-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmutually-recursive-async-impl-trait-type.stderr?ref=8461fa51198ad5db1d070620fe4186aaec648438", "patch": "@@ -4,15 +4,15 @@ error[E0733]: recursion in an `async fn` requires boxing\n LL | async fn rec_1() {\n    |                  ^ recursive `async fn`\n    |\n-   = note: a recursive `async fn` must be rewritten to return a boxed `dyn Future`.\n+   = note: a recursive `async fn` must be rewritten to return a boxed `dyn Future`\n \n error[E0733]: recursion in an `async fn` requires boxing\n   --> $DIR/mutually-recursive-async-impl-trait-type.rs:9:18\n    |\n LL | async fn rec_2() {\n    |                  ^ recursive `async fn`\n    |\n-   = note: a recursive `async fn` must be rewritten to return a boxed `dyn Future`.\n+   = note: a recursive `async fn` must be rewritten to return a boxed `dyn Future`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "892d91e3a4992706fdb93558374f7d5048829e4d", "filename": "src/test/ui/async-await/recursive-async-impl-trait-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8461fa51198ad5db1d070620fe4186aaec648438/src%2Ftest%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8461fa51198ad5db1d070620fe4186aaec648438/src%2Ftest%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.stderr?ref=8461fa51198ad5db1d070620fe4186aaec648438", "patch": "@@ -4,7 +4,7 @@ error[E0733]: recursion in an `async fn` requires boxing\n LL | async fn recursive_async_function() -> () {\n    |                                        ^^ recursive `async fn`\n    |\n-   = note: a recursive `async fn` must be rewritten to return a boxed `dyn Future`.\n+   = note: a recursive `async fn` must be rewritten to return a boxed `dyn Future`\n \n error: aborting due to previous error\n "}, {"sha": "655c31763ef44de23047c172d2e49c815d50dfbd", "filename": "src/test/ui/consts/miri_unleashed/mutable_const2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8461fa51198ad5db1d070620fe4186aaec648438/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8461fa51198ad5db1d070620fe4186aaec648438/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.stderr?ref=8461fa51198ad5db1d070620fe4186aaec648438", "patch": "@@ -11,7 +11,7 @@ LL | const MUTABLE_BEHIND_RAW: *mut i32 = &UnsafeCell::new(42) as *const _ as *m\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n thread 'rustc' panicked at 'no errors encountered even though `delay_span_bug` issued', src/librustc_errors/lib.rs:346:17\n-note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n+note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n \n error: internal compiler error: unexpected panic\n "}, {"sha": "c292fcef7f660b7ff0fe667c3d2db35633b9daaf", "filename": "src/test/ui/consts/miri_unleashed/mutable_references_ice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8461fa51198ad5db1d070620fe4186aaec648438/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8461fa51198ad5db1d070620fe4186aaec648438/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_ice.stderr?ref=8461fa51198ad5db1d070620fe4186aaec648438", "patch": "@@ -7,7 +7,7 @@ LL |     x: &UnsafeCell::new(42),\n thread 'rustc' panicked at 'assertion failed: `(left != right)`\n   left: `Const`,\n  right: `Const`: UnsafeCells are not allowed behind references in constants. This should have been prevented statically by const qualification. If this were allowed one would be able to change a constant at one use site and other use sites could observe that mutation.', src/librustc_mir/interpret/intern.rs:LL:CC\n-note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n+note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n \n error: internal compiler error: unexpected panic\n "}, {"sha": "b8d98a8999b9dea2dad4441ba0faa0609c2e0cc2", "filename": "src/test/ui/duplicate_entry_error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8461fa51198ad5db1d070620fe4186aaec648438/src%2Ftest%2Fui%2Fduplicate_entry_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8461fa51198ad5db1d070620fe4186aaec648438/src%2Ftest%2Fui%2Fduplicate_entry_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fduplicate_entry_error.rs?ref=8461fa51198ad5db1d070620fe4186aaec648438", "patch": "@@ -8,7 +8,7 @@ use std::panic::PanicInfo;\n \n #[lang = \"panic_impl\"]\n fn panic_impl(info: &PanicInfo) -> ! {\n-//~^ ERROR: duplicate lang item found: `panic_impl`.\n+//~^ ERROR: found duplicate lang item `panic_impl`\n     loop {}\n }\n "}, {"sha": "46b137b2cf9c028b26928f06060a3f91107b4888", "filename": "src/test/ui/duplicate_entry_error.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8461fa51198ad5db1d070620fe4186aaec648438/src%2Ftest%2Fui%2Fduplicate_entry_error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8461fa51198ad5db1d070620fe4186aaec648438/src%2Ftest%2Fui%2Fduplicate_entry_error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fduplicate_entry_error.stderr?ref=8461fa51198ad5db1d070620fe4186aaec648438", "patch": "@@ -1,4 +1,4 @@\n-error[E0152]: duplicate lang item found: `panic_impl`.\n+error[E0152]: found duplicate lang item `panic_impl`\n   --> $DIR/duplicate_entry_error.rs:10:1\n    |\n LL | / fn panic_impl(info: &PanicInfo) -> ! {\n@@ -7,7 +7,7 @@ LL | |     loop {}\n LL | | }\n    | |_^\n    |\n-   = note: first defined in crate `std` (which `duplicate_entry_error` depends on).\n+   = note: first defined in crate `std` (which `duplicate_entry_error` depends on)\n \n error: aborting due to previous error\n "}, {"sha": "c41a0430150a4010e10ea6aba27e77dd64402d42", "filename": "src/test/ui/error-codes/E0152.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8461fa51198ad5db1d070620fe4186aaec648438/src%2Ftest%2Fui%2Ferror-codes%2FE0152.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8461fa51198ad5db1d070620fe4186aaec648438/src%2Ftest%2Fui%2Ferror-codes%2FE0152.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0152.stderr?ref=8461fa51198ad5db1d070620fe4186aaec648438", "patch": "@@ -1,10 +1,10 @@\n-error[E0152]: duplicate lang item found: `arc`.\n+error[E0152]: found duplicate lang item `arc`\n   --> $DIR/E0152.rs:4:1\n    |\n LL | struct Foo;\n    | ^^^^^^^^^^^\n    |\n-   = note: first defined in crate `alloc` (which `std` depends on).\n+   = note: first defined in crate `alloc` (which `std` depends on)\n \n error: aborting due to previous error\n "}, {"sha": "02c1b27b08a966fc15e870b128d86e5ad8e4a1d5", "filename": "src/test/ui/keyword/keyword-super-as-identifier.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8461fa51198ad5db1d070620fe4186aaec648438/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-super-as-identifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8461fa51198ad5db1d070620fe4186aaec648438/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-super-as-identifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-super-as-identifier.rs?ref=8461fa51198ad5db1d070620fe4186aaec648438", "patch": "@@ -1,3 +1,3 @@\n fn main() {\n-    let super = 22; //~ ERROR failed to resolve: there are too many initial `super`s\n+    let super = 22; //~ ERROR failed to resolve: there are too many leading `super` keywords\n }"}, {"sha": "1f64f3b73d6cde0b7a00d2ff8243fb6f8089dd0e", "filename": "src/test/ui/keyword/keyword-super-as-identifier.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8461fa51198ad5db1d070620fe4186aaec648438/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-super-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8461fa51198ad5db1d070620fe4186aaec648438/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-super-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-super-as-identifier.stderr?ref=8461fa51198ad5db1d070620fe4186aaec648438", "patch": "@@ -1,8 +1,8 @@\n-error[E0433]: failed to resolve: there are too many initial `super`s.\n+error[E0433]: failed to resolve: there are too many leading `super` keywords\n   --> $DIR/keyword-super-as-identifier.rs:2:9\n    |\n LL |     let super = 22;\n-   |         ^^^^^ there are too many initial `super`s.\n+   |         ^^^^^ there are too many leading `super` keywords\n \n error: aborting due to previous error\n "}, {"sha": "c121a6c1050ea9a7be3d21258e82cda8873d94cc", "filename": "src/test/ui/keyword/keyword-super.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8461fa51198ad5db1d070620fe4186aaec648438/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-super.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8461fa51198ad5db1d070620fe4186aaec648438/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-super.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-super.rs?ref=8461fa51198ad5db1d070620fe4186aaec648438", "patch": "@@ -1,3 +1,3 @@\n fn main() {\n-    let super: isize; //~ ERROR failed to resolve: there are too many initial `super`s\n+    let super: isize; //~ ERROR failed to resolve: there are too many leading `super` keywords\n }"}, {"sha": "0e0d67cb97b1fdf292804381b8ec5c5f92eb7b38", "filename": "src/test/ui/keyword/keyword-super.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8461fa51198ad5db1d070620fe4186aaec648438/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-super.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8461fa51198ad5db1d070620fe4186aaec648438/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-super.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-super.stderr?ref=8461fa51198ad5db1d070620fe4186aaec648438", "patch": "@@ -1,8 +1,8 @@\n-error[E0433]: failed to resolve: there are too many initial `super`s.\n+error[E0433]: failed to resolve: there are too many leading `super` keywords\n   --> $DIR/keyword-super.rs:2:9\n    |\n LL |     let super: isize;\n-   |         ^^^^^ there are too many initial `super`s.\n+   |         ^^^^^ there are too many leading `super` keywords\n \n error: aborting due to previous error\n "}, {"sha": "0f8bddf27fe088e9f15f184730d5a804a8dc1eeb", "filename": "src/test/ui/multi-panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8461fa51198ad5db1d070620fe4186aaec648438/src%2Ftest%2Fui%2Fmulti-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8461fa51198ad5db1d070620fe4186aaec648438/src%2Ftest%2Fui%2Fmulti-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmulti-panic.rs?ref=8461fa51198ad5db1d070620fe4186aaec648438", "patch": "@@ -10,7 +10,7 @@ fn check_for_no_backtrace(test: std::process::Output) {\n \n     assert_eq!(it.next().map(|l| l.starts_with(\"thread '<unnamed>' panicked at\")), Some(true));\n     assert_eq!(it.next(), Some(\"note: run with `RUST_BACKTRACE=1` \\\n-                                environment variable to display a backtrace.\"));\n+                                environment variable to display a backtrace\"));\n     assert_eq!(it.next().map(|l| l.starts_with(\"thread 'main' panicked at\")), Some(true));\n     assert_eq!(it.next(), None);\n }"}, {"sha": "bd99af999c7978de8bb7e07007620a1420fe9e9e", "filename": "src/test/ui/panic-handler/panic-handler-duplicate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8461fa51198ad5db1d070620fe4186aaec648438/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-duplicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8461fa51198ad5db1d070620fe4186aaec648438/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-duplicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-duplicate.rs?ref=8461fa51198ad5db1d070620fe4186aaec648438", "patch": "@@ -12,6 +12,6 @@ fn panic(info: &PanicInfo) -> ! {\n }\n \n #[lang = \"panic_impl\"]\n-fn panic2(info: &PanicInfo) -> ! { //~ ERROR duplicate lang item found: `panic_impl`.\n+fn panic2(info: &PanicInfo) -> ! { //~ ERROR found duplicate lang item `panic_impl`\n     loop {}\n }"}, {"sha": "9999e3276469dbac9e272169f37278f403b56bd8", "filename": "src/test/ui/panic-handler/panic-handler-duplicate.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8461fa51198ad5db1d070620fe4186aaec648438/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-duplicate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8461fa51198ad5db1d070620fe4186aaec648438/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-duplicate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-duplicate.stderr?ref=8461fa51198ad5db1d070620fe4186aaec648438", "patch": "@@ -1,12 +1,12 @@\n-error[E0152]: duplicate lang item found: `panic_impl`.\n+error[E0152]: found duplicate lang item `panic_impl`\n   --> $DIR/panic-handler-duplicate.rs:15:1\n    |\n LL | / fn panic2(info: &PanicInfo) -> ! {\n LL | |     loop {}\n LL | | }\n    | |_^\n    |\n-note: first defined here.\n+note: first defined here\n   --> $DIR/panic-handler-duplicate.rs:10:1\n    |\n LL | / fn panic(info: &PanicInfo) -> ! {"}, {"sha": "0acc2722cb21f43073fc8d91f2a76053e07b01ef", "filename": "src/test/ui/panic-handler/panic-handler-std.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8461fa51198ad5db1d070620fe4186aaec648438/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8461fa51198ad5db1d070620fe4186aaec648438/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-std.rs?ref=8461fa51198ad5db1d070620fe4186aaec648438", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: duplicate lang item found: `panic_impl`.\n+// error-pattern: found duplicate lang item `panic_impl`\n \n \n use std::panic::PanicInfo;"}, {"sha": "ac56513fd47067c8ae0243a578c0dcf4ee71bae2", "filename": "src/test/ui/panic-handler/panic-handler-std.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8461fa51198ad5db1d070620fe4186aaec648438/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-std.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8461fa51198ad5db1d070620fe4186aaec648438/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-std.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-std.stderr?ref=8461fa51198ad5db1d070620fe4186aaec648438", "patch": "@@ -1,12 +1,12 @@\n-error[E0152]: duplicate lang item found: `panic_impl`.\n+error[E0152]: found duplicate lang item `panic_impl`\n   --> $DIR/panic-handler-std.rs:7:1\n    |\n LL | / fn panic(info: PanicInfo) -> ! {\n LL | |     loop {}\n LL | | }\n    | |_^\n    |\n-   = note: first defined in crate `std` (which `panic_handler_std` depends on).\n+   = note: first defined in crate `std` (which `panic_handler_std` depends on)\n \n error: argument should be `&PanicInfo`\n   --> $DIR/panic-handler-std.rs:7:16"}, {"sha": "d0018cef5f03396979509710ba4b5415d23ad6a4", "filename": "src/test/ui/pattern/const-pat-ice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8461fa51198ad5db1d070620fe4186aaec648438/src%2Ftest%2Fui%2Fpattern%2Fconst-pat-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8461fa51198ad5db1d070620fe4186aaec648438/src%2Ftest%2Fui%2Fpattern%2Fconst-pat-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fconst-pat-ice.stderr?ref=8461fa51198ad5db1d070620fe4186aaec648438", "patch": "@@ -1,5 +1,5 @@\n thread 'rustc' panicked at 'assertion failed: rows.iter().all(|r| r.len() == v.len())', src/librustc_mir_build/hair/pattern/_match.rs:LL:CC\n-note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n+note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n \n error: internal compiler error: unexpected panic\n "}, {"sha": "a124b4eff8f693ad2a32ca3e3b492a2ee38b5b61", "filename": "src/test/ui/resolve/impl-items-vis-unresolved.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8461fa51198ad5db1d070620fe4186aaec648438/src%2Ftest%2Fui%2Fresolve%2Fimpl-items-vis-unresolved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8461fa51198ad5db1d070620fe4186aaec648438/src%2Ftest%2Fui%2Fresolve%2Fimpl-items-vis-unresolved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fimpl-items-vis-unresolved.rs?ref=8461fa51198ad5db1d070620fe4186aaec648438", "patch": "@@ -18,7 +18,7 @@ mod state {\n pub struct RawFloatState;\n impl RawFloatState {\n     perftools_inline! {\n-        pub(super) fn new() {} //~ ERROR failed to resolve: there are too many initial `super`s\n+        pub(super) fn new() {} //~ ERROR failed to resolve: there are too many leading `super` keywords\n     }\n }\n "}, {"sha": "62cffe55f9fb613c869786e62c562296c4497c62", "filename": "src/test/ui/resolve/impl-items-vis-unresolved.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8461fa51198ad5db1d070620fe4186aaec648438/src%2Ftest%2Fui%2Fresolve%2Fimpl-items-vis-unresolved.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8461fa51198ad5db1d070620fe4186aaec648438/src%2Ftest%2Fui%2Fresolve%2Fimpl-items-vis-unresolved.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fimpl-items-vis-unresolved.stderr?ref=8461fa51198ad5db1d070620fe4186aaec648438", "patch": "@@ -1,8 +1,8 @@\n-error[E0433]: failed to resolve: there are too many initial `super`s.\n+error[E0433]: failed to resolve: there are too many leading `super` keywords\n   --> $DIR/impl-items-vis-unresolved.rs:21:13\n    |\n LL |         pub(super) fn new() {}\n-   |             ^^^^^ there are too many initial `super`s.\n+   |             ^^^^^ there are too many leading `super` keywords.\n \n error: aborting due to previous error\n "}, {"sha": "e4d587bc9effa4088a371dcc3f617ebe20a102d4", "filename": "src/test/ui/super-at-top-level.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8461fa51198ad5db1d070620fe4186aaec648438/src%2Ftest%2Fui%2Fsuper-at-top-level.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8461fa51198ad5db1d070620fe4186aaec648438/src%2Ftest%2Fui%2Fsuper-at-top-level.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuper-at-top-level.rs?ref=8461fa51198ad5db1d070620fe4186aaec648438", "patch": "@@ -1,4 +1,4 @@\n-use super::f; //~ ERROR there are too many initial `super`s\n+use super::f; //~ ERROR there are too many leading `super` keywords\n \n fn main() {\n }"}, {"sha": "23613df6752fb7e8e600a38735395759dd493a51", "filename": "src/test/ui/super-at-top-level.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8461fa51198ad5db1d070620fe4186aaec648438/src%2Ftest%2Fui%2Fsuper-at-top-level.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8461fa51198ad5db1d070620fe4186aaec648438/src%2Ftest%2Fui%2Fsuper-at-top-level.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuper-at-top-level.stderr?ref=8461fa51198ad5db1d070620fe4186aaec648438", "patch": "@@ -1,8 +1,8 @@\n-error[E0433]: failed to resolve: there are too many initial `super`s.\n+error[E0433]: failed to resolve: there are too many leading `super` keywords\n   --> $DIR/super-at-top-level.rs:1:5\n    |\n LL | use super::f;\n-   |     ^^^^^ there are too many initial `super`s.\n+   |     ^^^^^ there are too many leading `super` keywords\n \n error: aborting due to previous error\n "}, {"sha": "46adcfbc2eb4a387d7449247456c281855ffdabf", "filename": "src/test/ui/test-panic-abort.run.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8461fa51198ad5db1d070620fe4186aaec648438/src%2Ftest%2Fui%2Ftest-panic-abort.run.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/8461fa51198ad5db1d070620fe4186aaec648438/src%2Ftest%2Fui%2Ftest-panic-abort.run.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-panic-abort.run.stdout?ref=8461fa51198ad5db1d070620fe4186aaec648438", "patch": "@@ -18,7 +18,7 @@ testing321\n thread 'main' panicked at 'assertion failed: `(left == right)`\n   left: `2`,\n  right: `5`', $DIR/test-panic-abort.rs:31:5\n-note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n+note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n \n \n failures:"}]}