{"sha": "5f0856804292a6f4b73cb0f5771877657d8f6af8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmMDg1NjgwNDI5MmE2ZjRiNzNjYjBmNTc3MTg3NzY1N2Q4ZjZhZjg=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2020-11-16T22:08:21Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2020-11-16T22:08:21Z"}, "message": "x.py: allow a custom string appended to the version\n\nThis adds `rust.description` to the config as a descriptive string to be\nappended to `rustc --version` output, which is also used in places like\ndebuginfo `DW_AT_producer`. This may be useful for supplementary build\ninformation, like distro-specific package versions.\n\nFor example, in Fedora 33, `gcc --version` outputs:\n\n    gcc (GCC) 10.2.1 20201016 (Red Hat 10.2.1-6)\n\nWith this change, we can add similar vendor info to `rustc --version`.", "tree": {"sha": "c27f6d4f876e26273668d48a33b0202b3f2fc16d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c27f6d4f876e26273668d48a33b0202b3f2fc16d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f0856804292a6f4b73cb0f5771877657d8f6af8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f0856804292a6f4b73cb0f5771877657d8f6af8", "html_url": "https://github.com/rust-lang/rust/commit/5f0856804292a6f4b73cb0f5771877657d8f6af8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f0856804292a6f4b73cb0f5771877657d8f6af8/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5230fbf76bafd86ee4376a0e26e551df8d17fec", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5230fbf76bafd86ee4376a0e26e551df8d17fec", "html_url": "https://github.com/rust-lang/rust/commit/f5230fbf76bafd86ee4376a0e26e551df8d17fec"}], "stats": {"total": 17, "additions": 16, "deletions": 1}, "files": [{"sha": "5b045d4e32d8d739ebbab49580d20affbdcd1cda", "filename": "config.toml.example", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5f0856804292a6f4b73cb0f5771877657d8f6af8/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/5f0856804292a6f4b73cb0f5771877657d8f6af8/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=5f0856804292a6f4b73cb0f5771877657d8f6af8", "patch": "@@ -446,6 +446,11 @@ changelog-seen = 2\n # nightly features\n #channel = \"dev\"\n \n+# A descriptive string to be appended to `rustc --version` output, which is\n+# also used in places like debuginfo `DW_AT_producer`. This may be useful for\n+# supplementary build information, like distro-specific package versions.\n+#description = \"\"\n+\n # The root location of the musl installation directory.\n #musl-root = \"...\"\n "}, {"sha": "b8ec666ff95a55ee830444218af7530215eb89c0", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f0856804292a6f4b73cb0f5771877657d8f6af8/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f0856804292a6f4b73cb0f5771877657d8f6af8/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=5f0856804292a6f4b73cb0f5771877657d8f6af8", "patch": "@@ -152,6 +152,7 @@ pub struct Config {\n     // misc\n     pub low_priority: bool,\n     pub channel: String,\n+    pub description: Option<String>,\n     pub verbose_tests: bool,\n     pub save_toolstates: Option<PathBuf>,\n     pub print_step_timings: bool,\n@@ -470,6 +471,7 @@ struct Rust {\n     parallel_compiler: Option<bool>,\n     default_linker: Option<String>,\n     channel: Option<String>,\n+    description: Option<String>,\n     musl_root: Option<String>,\n     rpath: Option<bool>,\n     verbose_tests: Option<bool>,\n@@ -841,6 +843,7 @@ impl Config {\n                 .map(|v| v.parse().expect(\"failed to parse rust.llvm-libunwind\"));\n             set(&mut config.backtrace, rust.backtrace);\n             set(&mut config.channel, rust.channel);\n+            config.description = rust.description;\n             set(&mut config.rust_dist_src, rust.dist_src);\n             set(&mut config.verbose_tests, rust.verbose_tests);\n             // in the case \"false\" is set explicitly, do not overwrite the command line args"}, {"sha": "42f00ce9621743cb3a283355074b07a10b7f4e77", "filename": "src/bootstrap/configure.py", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f0856804292a6f4b73cb0f5771877657d8f6af8/src%2Fbootstrap%2Fconfigure.py", "raw_url": "https://github.com/rust-lang/rust/raw/5f0856804292a6f4b73cb0f5771877657d8f6af8/src%2Fbootstrap%2Fconfigure.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfigure.py?ref=5f0856804292a6f4b73cb0f5771877657d8f6af8", "patch": "@@ -146,6 +146,7 @@ def v(*args):\n v(\"experimental-targets\", \"llvm.experimental-targets\",\n   \"experimental LLVM targets to build\")\n v(\"release-channel\", \"rust.channel\", \"the name of the release channel to build\")\n+v(\"release-description\", \"rust.description\", \"optional descriptive string for version output\")\n \n # Used on systems where \"cc\" is unavailable\n v(\"default-linker\", \"rust.default-linker\", \"the default linker\")"}, {"sha": "06ccd72186dd1edf67f8139cb4883911710a9c65", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5f0856804292a6f4b73cb0f5771877657d8f6af8/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f0856804292a6f4b73cb0f5771877657d8f6af8/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=5f0856804292a6f4b73cb0f5771877657d8f6af8", "patch": "@@ -1082,7 +1082,13 @@ impl Build {\n     /// Note that this is a descriptive string which includes the commit date,\n     /// sha, version, etc.\n     fn rust_version(&self) -> String {\n-        self.rust_info.version(self, &self.version)\n+        let mut version = self.rust_info.version(self, &self.version);\n+        if let Some(ref s) = self.config.description {\n+            version.push_str(\" (\");\n+            version.push_str(s);\n+            version.push_str(\")\");\n+        }\n+        version\n     }\n \n     /// Returns the full commit hash."}]}