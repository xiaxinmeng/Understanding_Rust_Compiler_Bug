{"sha": "445fe52b7212d10fb6fb9df035ff0fe951c81af5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0NWZlNTJiNzIxMmQxMGZiNmZiOWRmMDM1ZmYwZmU5NTFjODFhZjU=", "commit": {"author": {"name": "Jonathan Turner", "email": "jonathandturner@users.noreply.github.com", "date": "2016-09-02T22:28:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-09-02T22:28:51Z"}, "message": "Rollup merge of #36099 - skade:better-try-documentation, r=steveklabnik\n\nDocument try!'s error conversion behaviour\n\ntry!'s documentation currently doesn't document the error conversion behaviour of the macro. This patch extends the documentation.\n\nOpen questions:\n* is it worthwhile to have seperate examples with and without wrapping behaviour? It's not immediately obvious that From<T> for T is always defined. Though this is necessary for the macro to work in any case, is this the place to expect that knowledge.", "tree": {"sha": "ea957ddaf54e4f1cc116311c4be00cda660c7539", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea957ddaf54e4f1cc116311c4be00cda660c7539"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/445fe52b7212d10fb6fb9df035ff0fe951c81af5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/445fe52b7212d10fb6fb9df035ff0fe951c81af5", "html_url": "https://github.com/rust-lang/rust/commit/445fe52b7212d10fb6fb9df035ff0fe951c81af5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/445fe52b7212d10fb6fb9df035ff0fe951c81af5/comments", "author": {"login": "jonathandturner", "id": 111457284, "node_id": "O_kgDOBqS0BA", "avatar_url": "https://avatars.githubusercontent.com/u/111457284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonathandturner", "html_url": "https://github.com/jonathandturner", "followers_url": "https://api.github.com/users/jonathandturner/followers", "following_url": "https://api.github.com/users/jonathandturner/following{/other_user}", "gists_url": "https://api.github.com/users/jonathandturner/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonathandturner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonathandturner/subscriptions", "organizations_url": "https://api.github.com/users/jonathandturner/orgs", "repos_url": "https://api.github.com/users/jonathandturner/repos", "events_url": "https://api.github.com/users/jonathandturner/events{/privacy}", "received_events_url": "https://api.github.com/users/jonathandturner/received_events", "type": "Organization", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c330376a4db21ad664dd4da43e05913c241d951d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c330376a4db21ad664dd4da43e05913c241d951d", "html_url": "https://github.com/rust-lang/rust/commit/c330376a4db21ad664dd4da43e05913c241d951d"}, {"sha": "0f8eb81011dcc2f235e74a4f0b7c2d80c1b0b4ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f8eb81011dcc2f235e74a4f0b7c2d80c1b0b4ab", "html_url": "https://github.com/rust-lang/rust/commit/0f8eb81011dcc2f235e74a4f0b7c2d80c1b0b4ab"}], "stats": {"total": 33, "additions": 26, "deletions": 7}, "files": [{"sha": "f29a49dd5fe1ac236209d833849ad88c12746e29", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 26, "deletions": 7, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/445fe52b7212d10fb6fb9df035ff0fe951c81af5/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/445fe52b7212d10fb6fb9df035ff0fe951c81af5/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=445fe52b7212d10fb6fb9df035ff0fe951c81af5", "patch": "@@ -189,10 +189,19 @@ macro_rules! debug_assert_eq {\n     ($($arg:tt)*) => (if cfg!(debug_assertions) { assert_eq!($($arg)*); })\n }\n \n-/// Helper macro for unwrapping `Result` values while returning early with an\n-/// error if the value of the expression is `Err`. Can only be used in\n-/// functions that return `Result` because of the early return of `Err` that\n-/// it provides.\n+/// Helper macro for reducing boilerplate code for matching `Result` together\n+/// with converting downstream errors.\n+///\n+/// `try!` matches the given `Result`. In case of the `Ok` variant, the\n+/// expression has the value of the wrapped value.\n+///\n+/// In case of the `Err` variant, it retrieves the inner error. `try!` then\n+/// performs conversion using `From`. This provides automatic conversion\n+/// between specialized errors and more general ones. The resulting\n+/// error is then immediately returned.\n+///\n+/// Because of the early return, `try!` can only be used in functions that\n+/// return `Result`.\n ///\n /// # Examples\n ///\n@@ -201,18 +210,28 @@ macro_rules! debug_assert_eq {\n /// use std::fs::File;\n /// use std::io::prelude::*;\n ///\n-/// fn write_to_file_using_try() -> Result<(), io::Error> {\n+/// enum MyError {\n+///     FileWriteError\n+/// }\n+///\n+/// impl From<io::Error> for MyError {\n+///     fn from(e: io::Error) -> MyError {\n+///         MyError::FileWriteError\n+///     }\n+/// }\n+///\n+/// fn write_to_file_using_try() -> Result<(), MyError> {\n ///     let mut file = try!(File::create(\"my_best_friends.txt\"));\n ///     try!(file.write_all(b\"This is a list of my best friends.\"));\n ///     println!(\"I wrote to the file\");\n ///     Ok(())\n /// }\n /// // This is equivalent to:\n-/// fn write_to_file_using_match() -> Result<(), io::Error> {\n+/// fn write_to_file_using_match() -> Result<(), MyError> {\n ///     let mut file = try!(File::create(\"my_best_friends.txt\"));\n ///     match file.write_all(b\"This is a list of my best friends.\") {\n ///         Ok(v) => v,\n-///         Err(e) => return Err(e),\n+///         Err(e) => return Err(From::from(e)),\n ///     }\n ///     println!(\"I wrote to the file\");\n ///     Ok(())"}]}