{"sha": "27748b09d8bb69d7f7a105aa8dd22de439c17c6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3NzQ4YjA5ZDhiYjY5ZDdmN2ExMDVhYThkZDIyZGU0MzljMTdjNmM=", "commit": {"author": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2014-07-10T17:59:52Z"}, "committer": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2014-07-18T18:58:45Z"}, "message": "librustc: Only emit constructor functions as necessary.", "tree": {"sha": "d38110ca06e8413feea0f6cb047140137ed24475", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d38110ca06e8413feea0f6cb047140137ed24475"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27748b09d8bb69d7f7a105aa8dd22de439c17c6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27748b09d8bb69d7f7a105aa8dd22de439c17c6c", "html_url": "https://github.com/rust-lang/rust/commit/27748b09d8bb69d7f7a105aa8dd22de439c17c6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27748b09d8bb69d7f7a105aa8dd22de439c17c6c/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06bf73a646e6604d16b927f191364177eacaf50d", "url": "https://api.github.com/repos/rust-lang/rust/commits/06bf73a646e6604d16b927f191364177eacaf50d", "html_url": "https://github.com/rust-lang/rust/commit/06bf73a646e6604d16b927f191364177eacaf50d"}], "stats": {"total": 89, "additions": 27, "deletions": 62}, "files": [{"sha": "439455ff3d15ce3291c07acd9955b1fd852266bd", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/27748b09d8bb69d7f7a105aa8dd22de439c17c6c/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27748b09d8bb69d7f7a105aa8dd22de439c17c6c/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=27748b09d8bb69d7f7a105aa8dd22de439c17c6c", "patch": "@@ -314,8 +314,7 @@ fn encode_enum_variant_info(ecx: &EncodeContext,\n                             ebml_w: &mut Encoder,\n                             id: NodeId,\n                             variants: &[P<Variant>],\n-                            index: &mut Vec<entry<i64>>,\n-                            generics: &ast::Generics) {\n+                            index: &mut Vec<entry<i64>>) {\n     debug!(\"encode_enum_variant_info(id={:?})\", id);\n \n     let mut disr_val = 0;\n@@ -343,10 +342,6 @@ fn encode_enum_variant_info(ecx: &EncodeContext,\n         encode_stability(ebml_w, stab);\n \n         match variant.node.kind {\n-            ast::TupleVariantKind(ref args)\n-                    if args.len() > 0 && generics.ty_params.len() == 0 => {\n-                encode_symbol(ecx, ebml_w, variant.node.id);\n-            }\n             ast::TupleVariantKind(_) => {},\n             ast::StructVariantKind(_) => {\n                 let fields = ty::lookup_struct_fields(ecx.tcx, def_id);\n@@ -1019,7 +1014,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n         encode_stability(ebml_w, stab);\n         ebml_w.end_tag();\n       }\n-      ItemEnum(ref enum_definition, ref generics) => {\n+      ItemEnum(ref enum_definition, _) => {\n         add_to_index(item, ebml_w, index);\n \n         ebml_w.start_tag(tag_items_data_item);\n@@ -1046,8 +1041,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n                                  ebml_w,\n                                  item.id,\n                                  (*enum_definition).variants.as_slice(),\n-                                 index,\n-                                 generics);\n+                                 index);\n       }\n       ItemStruct(struct_def, _) => {\n         let fields = ty::lookup_struct_fields(tcx, def_id);"}, {"sha": "bc0d5494350ef1684443b9471149995770c1640c", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 2, "deletions": 51, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/27748b09d8bb69d7f7a105aa8dd22de439c17c6c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27748b09d8bb69d7f7a105aa8dd22de439c17c6c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=27748b09d8bb69d7f7a105aa8dd22de439c17c6c", "patch": "@@ -80,7 +80,6 @@ use std::c_str::ToCStr;\n use std::cell::{Cell, RefCell};\n use std::rc::Rc;\n use std::{i8, i16, i32, i64};\n-use std::gc::Gc;\n use syntax::abi::{X86, X86_64, Arm, Mips, Mipsel, Rust, RustCall};\n use syntax::abi::{RustIntrinsic, Abi};\n use syntax::ast_util::{local_def, is_local};\n@@ -1815,31 +1814,6 @@ fn trans_enum_variant_or_tuple_like_struct(ccx: &CrateContext,\n     finish_fn(&fcx, bcx, result_ty);\n }\n \n-fn trans_enum_def(ccx: &CrateContext, enum_definition: &ast::EnumDef,\n-                  sp: Span, id: ast::NodeId, vi: &[Rc<ty::VariantInfo>],\n-                  i: &mut uint) {\n-    for variant in enum_definition.variants.iter() {\n-        let disr_val = vi[*i].disr_val;\n-        *i += 1;\n-\n-        match variant.node.kind {\n-            ast::TupleVariantKind(ref args) if args.len() > 0 => {\n-                let llfn = get_item_val(ccx, variant.node.id);\n-                trans_enum_variant(ccx, id, &**variant, args.as_slice(),\n-                                   disr_val, &param_substs::empty(), llfn);\n-            }\n-            ast::TupleVariantKind(_) => {\n-                // Nothing to do.\n-            }\n-            ast::StructVariantKind(struct_def) => {\n-                trans_struct_def(ccx, struct_def);\n-            }\n-        }\n-    }\n-\n-    enum_variant_size_lint(ccx, enum_definition, sp, id);\n-}\n-\n fn enum_variant_size_lint(ccx: &CrateContext, enum_def: &ast::EnumDef, sp: Span, id: ast::NodeId) {\n     let mut sizes = Vec::new(); // does no allocation if no pushes, thankfully\n \n@@ -1932,12 +1906,8 @@ pub fn trans_item(ccx: &CrateContext, item: &ast::Item) {\n       ast::ItemMod(ref m) => {\n         trans_mod(ccx, m);\n       }\n-      ast::ItemEnum(ref enum_definition, ref generics) => {\n-        if !generics.is_type_parameterized() {\n-            let vi = ty::enum_variants(ccx.tcx(), local_def(item.id));\n-            let mut i = 0;\n-            trans_enum_def(ccx, enum_definition, item.span, item.id, vi.as_slice(), &mut i);\n-        }\n+      ast::ItemEnum(ref enum_definition, _) => {\n+        enum_variant_size_lint(ccx, enum_definition, item.span, item.id);\n       }\n       ast::ItemStatic(_, m, ref expr) => {\n           // Recurse on the expression to catch items in blocks\n@@ -1964,11 +1934,6 @@ pub fn trans_item(ccx: &CrateContext, item: &ast::Item) {\n       ast::ItemForeignMod(ref foreign_mod) => {\n         foreign::trans_foreign_mod(ccx, foreign_mod);\n       }\n-      ast::ItemStruct(struct_def, ref generics) => {\n-        if !generics.is_type_parameterized() {\n-            trans_struct_def(ccx, struct_def);\n-        }\n-      }\n       ast::ItemTrait(..) => {\n         // Inside of this trait definition, we won't be actually translating any\n         // functions, but the trait still needs to be walked. Otherwise default\n@@ -1981,20 +1946,6 @@ pub fn trans_item(ccx: &CrateContext, item: &ast::Item) {\n     }\n }\n \n-pub fn trans_struct_def(ccx: &CrateContext, struct_def: Gc<ast::StructDef>) {\n-    // If this is a tuple-like struct, translate the constructor.\n-    match struct_def.ctor_id {\n-        // We only need to translate a constructor if there are fields;\n-        // otherwise this is a unit-like struct.\n-        Some(ctor_id) if struct_def.fields.len() > 0 => {\n-            let llfndecl = get_item_val(ccx, ctor_id);\n-            trans_tuple_struct(ccx, struct_def.fields.as_slice(),\n-                               ctor_id, &param_substs::empty(), llfndecl);\n-        }\n-        Some(_) | None => {}\n-    }\n-}\n-\n // Translate a module. Doing this amounts to translating the items in the\n // module; there ends up being no artifact (aside from linkage names) of\n // separate modules in the compiled program.  That's because modules exist"}, {"sha": "e2ad8b4fd4680a6891587f6b76d42b3a23181707", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/27748b09d8bb69d7f7a105aa8dd22de439c17c6c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27748b09d8bb69d7f7a105aa8dd22de439c17c6c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=27748b09d8bb69d7f7a105aa8dd22de439c17c6c", "patch": "@@ -19,6 +19,7 @@\n use arena::TypedArena;\n use back::abi;\n use back::link;\n+use driver::session;\n use llvm::{ValueRef, get_param};\n use llvm;\n use metadata::csearch;\n@@ -521,8 +522,27 @@ pub fn trans_fn_ref_with_vtables(\n         }\n     };\n \n-    // We must monomorphise if the fn has type parameters or is a default method.\n-    let must_monomorphise = !substs.types.is_empty() || is_default;\n+    // We must monomorphise if the fn has type parameters, is a default method,\n+    // or is a named tuple constructor.\n+    let must_monomorphise = if !substs.types.is_empty() || is_default {\n+        true\n+    } else if def_id.krate == ast::LOCAL_CRATE {\n+        let map_node = session::expect(\n+            ccx.sess(),\n+            tcx.map.find(def_id.node),\n+            || \"local item should be in ast map\".to_string());\n+\n+        match map_node {\n+            ast_map::NodeVariant(v) => match v.node.kind {\n+                ast::TupleVariantKind(ref args) => args.len() > 0,\n+                _ => false\n+            },\n+            ast_map::NodeStructCtor(_) => true,\n+            _ => false\n+        }\n+    } else {\n+        false\n+    };\n \n     // Create a monomorphic version of generic functions\n     if must_monomorphise {"}]}