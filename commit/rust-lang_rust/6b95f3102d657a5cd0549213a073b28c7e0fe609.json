{"sha": "6b95f3102d657a5cd0549213a073b28c7e0fe609", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiOTVmMzEwMmQ2NTdhNWNkMDU0OTIxM2EwNzNiMjhjN2UwZmU2MDk=", "commit": {"author": {"name": "David Hewitt", "email": "1939362+davidhewitt@users.noreply.github.com", "date": "2019-10-12T14:07:13Z"}, "committer": {"name": "David Hewitt", "email": "1939362+davidhewitt@users.noreply.github.com", "date": "2020-06-24T07:29:55Z"}, "message": "Add `format_args_capture` feature", "tree": {"sha": "b34c009d6fdb6b51b6e6d7bd5eb0b3261255be10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b34c009d6fdb6b51b6e6d7bd5eb0b3261255be10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b95f3102d657a5cd0549213a073b28c7e0fe609", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b95f3102d657a5cd0549213a073b28c7e0fe609", "html_url": "https://github.com/rust-lang/rust/commit/6b95f3102d657a5cd0549213a073b28c7e0fe609", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b95f3102d657a5cd0549213a073b28c7e0fe609/comments", "author": {"login": "davidhewitt", "id": 1939362, "node_id": "MDQ6VXNlcjE5MzkzNjI=", "avatar_url": "https://avatars.githubusercontent.com/u/1939362?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidhewitt", "html_url": "https://github.com/davidhewitt", "followers_url": "https://api.github.com/users/davidhewitt/followers", "following_url": "https://api.github.com/users/davidhewitt/following{/other_user}", "gists_url": "https://api.github.com/users/davidhewitt/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidhewitt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidhewitt/subscriptions", "organizations_url": "https://api.github.com/users/davidhewitt/orgs", "repos_url": "https://api.github.com/users/davidhewitt/repos", "events_url": "https://api.github.com/users/davidhewitt/events{/privacy}", "received_events_url": "https://api.github.com/users/davidhewitt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidhewitt", "id": 1939362, "node_id": "MDQ6VXNlcjE5MzkzNjI=", "avatar_url": "https://avatars.githubusercontent.com/u/1939362?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidhewitt", "html_url": "https://github.com/davidhewitt", "followers_url": "https://api.github.com/users/davidhewitt/followers", "following_url": "https://api.github.com/users/davidhewitt/following{/other_user}", "gists_url": "https://api.github.com/users/davidhewitt/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidhewitt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidhewitt/subscriptions", "organizations_url": "https://api.github.com/users/davidhewitt/orgs", "repos_url": "https://api.github.com/users/davidhewitt/repos", "events_url": "https://api.github.com/users/davidhewitt/events{/privacy}", "received_events_url": "https://api.github.com/users/davidhewitt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1557fb031b272b4c5bfcc7de5df7eddc7b36a584", "url": "https://api.github.com/repos/rust-lang/rust/commits/1557fb031b272b4c5bfcc7de5df7eddc7b36a584", "html_url": "https://github.com/rust-lang/rust/commit/1557fb031b272b4c5bfcc7de5df7eddc7b36a584"}], "stats": {"total": 272, "additions": 267, "deletions": 5}, "files": [{"sha": "538d513c5d6eaa42fe9565863f75728f9c923f7d", "filename": "src/librustc_builtin_macros/format.rs", "status": "modified", "additions": 57, "deletions": 4, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/6b95f3102d657a5cd0549213a073b28c7e0fe609/src%2Flibrustc_builtin_macros%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b95f3102d657a5cd0549213a073b28c7e0fe609/src%2Flibrustc_builtin_macros%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fformat.rs?ref=6b95f3102d657a5cd0549213a073b28c7e0fe609", "patch": "@@ -107,6 +107,9 @@ struct Context<'a, 'b> {\n     arg_spans: Vec<Span>,\n     /// All the formatting arguments that have formatting flags set, in order for diagnostics.\n     arg_with_formatting: Vec<parse::FormatSpec<'a>>,\n+\n+    /// Whether this format string came from a string literal, as opposed to a macro.\n+    is_literal: bool,\n }\n \n /// Parses the arguments from the given list of tokens, returning the diagnostic\n@@ -498,10 +501,59 @@ impl<'a, 'b> Context<'a, 'b> {\n                         self.verify_arg_type(Exact(idx), ty)\n                     }\n                     None => {\n-                        let msg = format!(\"there is no argument named `{}`\", name);\n-                        let sp = *self.arg_spans.get(self.curpiece).unwrap_or(&self.fmtsp);\n-                        let mut err = self.ecx.struct_span_err(sp, &msg[..]);\n-                        err.emit();\n+                        let capture_feature_enabled = self\n+                            .ecx\n+                            .ecfg\n+                            .features\n+                            .map_or(false, |features| features.format_args_capture);\n+\n+                        // For the moment capturing variables from format strings expanded from\n+                        // literals is disabled (see RFC #2795)\n+                        let can_capture = capture_feature_enabled && self.is_literal;\n+\n+                        if can_capture {\n+                            // Treat this name as a variable to capture from the surrounding scope\n+                            let idx = self.args.len();\n+                            self.arg_types.push(Vec::new());\n+                            self.arg_unique_types.push(Vec::new());\n+                            self.args.push(\n+                                self.ecx.expr_ident(self.fmtsp, Ident::new(name, self.fmtsp)),\n+                            );\n+                            self.names.insert(name, idx);\n+                            self.verify_arg_type(Exact(idx), ty)\n+                        } else {\n+                            let msg = format!(\"there is no argument named `{}`\", name);\n+                            let sp = if self.is_literal {\n+                                *self.arg_spans.get(self.curpiece).unwrap_or(&self.fmtsp)\n+                            } else {\n+                                self.fmtsp\n+                            };\n+                            let mut err = self.ecx.struct_span_err(sp, &msg[..]);\n+\n+                            if capture_feature_enabled && !self.is_literal {\n+                                err.note(&format!(\n+                                    \"did you intend to capture a variable `{}` from \\\n+                                     the surrounding scope?\",\n+                                    name\n+                                ));\n+                                err.note(\n+                                    \"for hygiene reasons format_args! cannot capture variables \\\n+                                     when the format string is expanded from a macro\",\n+                                );\n+                            } else if self.ecx.parse_sess().unstable_features.is_nightly_build() {\n+                                err.note(&format!(\n+                                    \"did you intend to capture a variable `{}` from \\\n+                                     the surrounding scope?\",\n+                                    name\n+                                ));\n+                                err.help(\n+                                    \"add `#![feature(format_args_capture)]` to the crate \\\n+                                     attributes to enable\",\n+                                );\n+                            }\n+\n+                            err.emit();\n+                        }\n                     }\n                 }\n             }\n@@ -951,6 +1003,7 @@ pub fn expand_preparsed_format_args(\n         invalid_refs: Vec::new(),\n         arg_spans,\n         arg_with_formatting: Vec::new(),\n+        is_literal: parser.is_literal,\n     };\n \n     // This needs to happen *after* the Parser has consumed all pieces to create all the spans"}, {"sha": "11c1908b57cac4f76fa5188b79e3d9902b945328", "filename": "src/librustc_feature/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6b95f3102d657a5cd0549213a073b28c7e0fe609/src%2Flibrustc_feature%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b95f3102d657a5cd0549213a073b28c7e0fe609/src%2Flibrustc_feature%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Factive.rs?ref=6b95f3102d657a5cd0549213a073b28c7e0fe609", "patch": "@@ -577,6 +577,9 @@ declare_features! (\n     /// Be more precise when looking for live drops in a const context.\n     (active, const_precise_live_drops, \"1.46.0\", Some(73255), None),\n \n+    /// Allows capturing variables in scope using format_args!\n+    (active, format_args_capture, \"1.46.0\", Some(67984), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "7db62f3493ede969d97fc00309ab5080076c7641", "filename": "src/librustc_parse_format/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b95f3102d657a5cd0549213a073b28c7e0fe609/src%2Flibrustc_parse_format%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b95f3102d657a5cd0549213a073b28c7e0fe609/src%2Flibrustc_parse_format%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse_format%2Flib.rs?ref=6b95f3102d657a5cd0549213a073b28c7e0fe609", "patch": "@@ -190,7 +190,7 @@ pub struct Parser<'a> {\n     /// Whether the source string is comes from `println!` as opposed to `format!` or `print!`\n     append_newline: bool,\n     /// Whether this formatting string is a literal or it comes from a macro.\n-    is_literal: bool,\n+    pub is_literal: bool,\n     /// Start position of the current line.\n     cur_line_start: usize,\n     /// Start and end byte offset of every line of the format string. Excludes"}, {"sha": "185ce1afde90e0d0e33b0eced01f530b4163033b", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6b95f3102d657a5cd0549213a073b28c7e0fe609/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b95f3102d657a5cd0549213a073b28c7e0fe609/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=6b95f3102d657a5cd0549213a073b28c7e0fe609", "patch": "@@ -338,6 +338,7 @@ symbols! {\n         forbid,\n         format_args,\n         format_args_nl,\n+        format_args_capture,\n         from,\n         From,\n         from_desugaring,"}, {"sha": "21af91610915fb59e5cf24e0cfbfa217534e3ccd", "filename": "src/test/ui/fmt/feature-gate-format-args-capture.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b95f3102d657a5cd0549213a073b28c7e0fe609/src%2Ftest%2Fui%2Ffmt%2Ffeature-gate-format-args-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b95f3102d657a5cd0549213a073b28c7e0fe609/src%2Ftest%2Fui%2Ffmt%2Ffeature-gate-format-args-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Ffeature-gate-format-args-capture.rs?ref=6b95f3102d657a5cd0549213a073b28c7e0fe609", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    format!(\"{foo}\");                //~ ERROR: there is no argument named `foo`\n+\n+    // panic! doesn't hit format_args! unless there are two or more arguments.\n+    panic!(\"{foo} {bar}\", bar=1);    //~ ERROR: there is no argument named `foo`\n+}"}, {"sha": "bbd4d759fb548ea83eaa7bdd28a00644d67777a8", "filename": "src/test/ui/fmt/feature-gate-format-args-capture.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6b95f3102d657a5cd0549213a073b28c7e0fe609/src%2Ftest%2Fui%2Ffmt%2Ffeature-gate-format-args-capture.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b95f3102d657a5cd0549213a073b28c7e0fe609/src%2Ftest%2Fui%2Ffmt%2Ffeature-gate-format-args-capture.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Ffeature-gate-format-args-capture.stderr?ref=6b95f3102d657a5cd0549213a073b28c7e0fe609", "patch": "@@ -0,0 +1,20 @@\n+error: there is no argument named `foo`\n+  --> $DIR/feature-gate-format-args-capture.rs:2:14\n+   |\n+LL |     format!(\"{foo}\");\n+   |              ^^^^^\n+   |\n+   = note: did you intend to capture a variable `foo` from the surrounding scope?\n+   = help: add `#![feature(format_args_capture)]` to the crate attributes to enable\n+\n+error: there is no argument named `foo`\n+  --> $DIR/feature-gate-format-args-capture.rs:5:13\n+   |\n+LL |     panic!(\"{foo} {bar}\", bar=1);\n+   |             ^^^^^\n+   |\n+   = note: did you intend to capture a variable `foo` from the surrounding scope?\n+   = help: add `#![feature(format_args_capture)]` to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "6ca7dcc216f3a9d7cd90cef900974b7bd88439e0", "filename": "src/test/ui/fmt/format-args-capture-macro-hygiene.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b95f3102d657a5cd0549213a073b28c7e0fe609/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-macro-hygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b95f3102d657a5cd0549213a073b28c7e0fe609/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-macro-hygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-macro-hygiene.rs?ref=6b95f3102d657a5cd0549213a073b28c7e0fe609", "patch": "@@ -0,0 +1,6 @@\n+#![feature(format_args_capture)]\n+\n+fn main() {\n+    format!(concat!(\"{foo}\"));         //~ ERROR: there is no argument named `foo`\n+    format!(concat!(\"{ba\", \"r} {}\"), 1);     //~ ERROR: there is no argument named `bar`\n+}"}, {"sha": "42039c33d2fec6d8def1b63eff14a1a20cd4bb85", "filename": "src/test/ui/fmt/format-args-capture-macro-hygiene.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6b95f3102d657a5cd0549213a073b28c7e0fe609/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-macro-hygiene.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b95f3102d657a5cd0549213a073b28c7e0fe609/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-macro-hygiene.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-macro-hygiene.stderr?ref=6b95f3102d657a5cd0549213a073b28c7e0fe609", "patch": "@@ -0,0 +1,22 @@\n+error: there is no argument named `foo`\n+  --> $DIR/format-args-capture-macro-hygiene.rs:4:13\n+   |\n+LL |     format!(concat!(\"{foo}\"));\n+   |             ^^^^^^^^^^^^^^^^\n+   |\n+   = note: did you intend to capture a variable `foo` from the surrounding scope?\n+   = note: for hygiene reasons format_args! cannot capture variables when the format string is expanded from a macro\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: there is no argument named `bar`\n+  --> $DIR/format-args-capture-macro-hygiene.rs:5:13\n+   |\n+LL |     format!(concat!(\"{ba\", \"r} {}\"), 1);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: did you intend to capture a variable `bar` from the surrounding scope?\n+   = note: for hygiene reasons format_args! cannot capture variables when the format string is expanded from a macro\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "3c596ae3bb899e5ea796cdc98e9e5104a3329b4d", "filename": "src/test/ui/fmt/format-args-capture-missing-variables.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6b95f3102d657a5cd0549213a073b28c7e0fe609/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-missing-variables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b95f3102d657a5cd0549213a073b28c7e0fe609/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-missing-variables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-missing-variables.rs?ref=6b95f3102d657a5cd0549213a073b28c7e0fe609", "patch": "@@ -0,0 +1,22 @@\n+#![feature(format_args_capture)]\n+\n+fn main() {\n+    format!(\"{} {foo} {} {bar} {}\", 1, 2, 3);\n+    //~^ ERROR: cannot find value `foo` in this scope\n+    //~^^ ERROR: cannot find value `bar` in this scope\n+\n+    format!(\"{foo}\");                //~ ERROR: cannot find value `foo` in this scope\n+\n+    format!(\"{valuea} {valueb}\", valuea=5, valuec=7);\n+    //~^ ERROR cannot find value `valueb` in this scope\n+    //~^^ ERROR named argument never used\n+\n+    format!(r##\"\n+\n+        {foo}\n+\n+    \"##);\n+    //~^^^^^ ERROR: cannot find value `foo` in this scope\n+\n+    panic!(\"{foo} {bar}\", bar=1);    //~ ERROR: cannot find value `foo` in this scope\n+}"}, {"sha": "c3d740eef9d3cd1684e54e35d55104ba2c5aca94", "filename": "src/test/ui/fmt/format-args-capture-missing-variables.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/6b95f3102d657a5cd0549213a073b28c7e0fe609/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-missing-variables.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b95f3102d657a5cd0549213a073b28c7e0fe609/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-missing-variables.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-missing-variables.stderr?ref=6b95f3102d657a5cd0549213a073b28c7e0fe609", "patch": "@@ -0,0 +1,52 @@\n+error: named argument never used\n+  --> $DIR/format-args-capture-missing-variables.rs:10:51\n+   |\n+LL |     format!(\"{valuea} {valueb}\", valuea=5, valuec=7);\n+   |             -------------------                   ^ named argument never used\n+   |             |\n+   |             formatting specifier missing\n+\n+error[E0425]: cannot find value `foo` in this scope\n+  --> $DIR/format-args-capture-missing-variables.rs:4:13\n+   |\n+LL |     format!(\"{} {foo} {} {bar} {}\", 1, 2, 3);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n+\n+error[E0425]: cannot find value `bar` in this scope\n+  --> $DIR/format-args-capture-missing-variables.rs:4:13\n+   |\n+LL |     format!(\"{} {foo} {} {bar} {}\", 1, 2, 3);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n+\n+error[E0425]: cannot find value `foo` in this scope\n+  --> $DIR/format-args-capture-missing-variables.rs:8:13\n+   |\n+LL |     format!(\"{foo}\");\n+   |             ^^^^^^^ not found in this scope\n+\n+error[E0425]: cannot find value `valueb` in this scope\n+  --> $DIR/format-args-capture-missing-variables.rs:10:13\n+   |\n+LL |     format!(\"{valuea} {valueb}\", valuea=5, valuec=7);\n+   |             ^^^^^^^^^^^^^^^^^^^ not found in this scope\n+\n+error[E0425]: cannot find value `foo` in this scope\n+  --> $DIR/format-args-capture-missing-variables.rs:14:13\n+   |\n+LL |       format!(r##\"\n+   |  _____________^\n+LL | |\n+LL | |         {foo}\n+LL | |\n+LL | |     \"##);\n+   | |_______^ not found in this scope\n+\n+error[E0425]: cannot find value `foo` in this scope\n+  --> $DIR/format-args-capture-missing-variables.rs:21:12\n+   |\n+LL |     panic!(\"{foo} {bar}\", bar=1);\n+   |            ^^^^^^^^^^^^^ not found in this scope\n+\n+error: aborting due to 7 previous errors\n+\n+For more information about this error, try `rustc --explain E0425`."}, {"sha": "89dcfd83004351704d1dc4c5f37d5684724c57cf", "filename": "src/test/ui/fmt/format-args-capture.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/6b95f3102d657a5cd0549213a073b28c7e0fe609/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b95f3102d657a5cd0549213a073b28c7e0fe609/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture.rs?ref=6b95f3102d657a5cd0549213a073b28c7e0fe609", "patch": "@@ -0,0 +1,62 @@\n+// run-pass\n+#![feature(format_args_capture)]\n+\n+fn main() {\n+    named_argument_takes_precedence_to_captured();\n+    panic_with_single_argument_does_not_get_formatted();\n+    panic_with_multiple_arguments_is_formatted();\n+    formatting_parameters_can_be_captured();\n+}\n+\n+fn named_argument_takes_precedence_to_captured() {\n+    let foo = \"captured\";\n+    let s = format!(\"{foo}\", foo=\"named\");\n+    assert_eq!(&s, \"named\");\n+\n+    let s = format!(\"{foo}-{foo}-{foo}\", foo=\"named\");\n+    assert_eq!(&s, \"named-named-named\");\n+\n+    let s = format!(\"{}-{bar}-{foo}\", \"positional\", bar=\"named\");\n+    assert_eq!(&s, \"positional-named-captured\");\n+}\n+\n+fn panic_with_single_argument_does_not_get_formatted() {\n+    // panic! with a single argument does not perform string formatting.\n+    // RFC #2795 suggests that this may need to change so that captured arguments are formatted.\n+    // For stability reasons this will need to part of an edition change.\n+\n+    let msg = std::panic::catch_unwind(|| {\n+        panic!(\"{foo}\");\n+    }).unwrap_err();\n+\n+    assert_eq!(msg.downcast_ref::<&str>(), Some(&\"{foo}\"))\n+}\n+\n+fn panic_with_multiple_arguments_is_formatted() {\n+    let foo = \"captured\";\n+\n+    let msg = std::panic::catch_unwind(|| {\n+        panic!(\"{}-{bar}-{foo}\", \"positional\", bar=\"named\");\n+    }).unwrap_err();\n+\n+    assert_eq!(msg.downcast_ref::<String>(), Some(&\"positional-named-captured\".to_string()))\n+}\n+\n+fn formatting_parameters_can_be_captured() {\n+    let width = 9;\n+    let precision = 3;\n+\n+    let x = 7.0;\n+\n+    let s = format!(\"{x:width$}\");\n+    assert_eq!(&s, \"        7\");\n+\n+    let s = format!(\"{x:<width$}\");\n+    assert_eq!(&s, \"7        \");\n+\n+    let s = format!(\"{x:-^width$}\");\n+    assert_eq!(&s, \"----7----\");\n+\n+    let s = format!(\"{x:-^width$.precision$}\");\n+    assert_eq!(&s, \"--7.000--\");\n+}"}, {"sha": "cbcb1df49851a930553a93687ad6743f5218a955", "filename": "src/test/ui/if/ifmt-bad-arg.stderr", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6b95f3102d657a5cd0549213a073b28c7e0fe609/src%2Ftest%2Fui%2Fif%2Fifmt-bad-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b95f3102d657a5cd0549213a073b28c7e0fe609/src%2Ftest%2Fui%2Fif%2Fifmt-bad-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fifmt-bad-arg.stderr?ref=6b95f3102d657a5cd0549213a073b28c7e0fe609", "patch": "@@ -63,18 +63,27 @@ error: there is no argument named `foo`\n    |\n LL |     format!(\"{} {foo} {} {bar} {}\", 1, 2, 3);\n    |                 ^^^^^\n+   |\n+   = note: did you intend to capture a variable `foo` from the surrounding scope?\n+   = help: add `#![feature(format_args_capture)]` to the crate attributes to enable\n \n error: there is no argument named `bar`\n   --> $DIR/ifmt-bad-arg.rs:27:26\n    |\n LL |     format!(\"{} {foo} {} {bar} {}\", 1, 2, 3);\n    |                          ^^^^^\n+   |\n+   = note: did you intend to capture a variable `bar` from the surrounding scope?\n+   = help: add `#![feature(format_args_capture)]` to the crate attributes to enable\n \n error: there is no argument named `foo`\n   --> $DIR/ifmt-bad-arg.rs:31:14\n    |\n LL |     format!(\"{foo}\");\n    |              ^^^^^\n+   |\n+   = note: did you intend to capture a variable `foo` from the surrounding scope?\n+   = help: add `#![feature(format_args_capture)]` to the crate attributes to enable\n \n error: multiple unused formatting arguments\n   --> $DIR/ifmt-bad-arg.rs:32:17\n@@ -155,6 +164,9 @@ error: there is no argument named `valueb`\n    |\n LL |     format!(\"{valuea} {valueb}\", valuea=5, valuec=7);\n    |                       ^^^^^^^^\n+   |\n+   = note: did you intend to capture a variable `valueb` from the surrounding scope?\n+   = help: add `#![feature(format_args_capture)]` to the crate attributes to enable\n \n error: named argument never used\n   --> $DIR/ifmt-bad-arg.rs:45:51\n@@ -205,6 +217,9 @@ error: there is no argument named `foo`\n    |\n LL |         {foo}\n    |         ^^^^^\n+   |\n+   = note: did you intend to capture a variable `foo` from the surrounding scope?\n+   = help: add `#![feature(format_args_capture)]` to the crate attributes to enable\n \n error: invalid format string: expected `'}'`, found `'t'`\n   --> $DIR/ifmt-bad-arg.rs:75:1"}]}