{"sha": "f8d8ffa2eba53928662dc57bc3a6c5608beb26f1", "node_id": "C_kwDOAAsO6NoAKGY4ZDhmZmEyZWJhNTM5Mjg2NjJkYzU3YmMzYTZjNTYwOGJlYjI2ZjE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-11T08:43:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-11T08:43:38Z"}, "message": "Auto merge of #111029 - Nilstrieb:when-the-errs-are-too-big, r=petrochenkov\n\nShrink `SelectionError` a lot\n\n`SelectionError` used to be 80 bytes (on 64 bit). That's quite big. Especially because the selection cache contained `Result<_, SelectionError>. The Ok type is only 32 bytes, so the 80 bytes significantly inflate the size of the cache.\n\nMost variants of the `SelectionError` seem to be hard errors, only `Unimplemented` shows up in practice (for cranelift-codegen, it occupies 23.4% of all cache entries). We can just box away the biggest variant, `OutputTypeParameterMismatch`, to get the size down to 16 bytes, well within the size of the Ok type inside the cache.", "tree": {"sha": "d2e0560b842c3eb735263ad6d797effa42614ec3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2e0560b842c3eb735263ad6d797effa42614ec3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8d8ffa2eba53928662dc57bc3a6c5608beb26f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8d8ffa2eba53928662dc57bc3a6c5608beb26f1", "html_url": "https://github.com/rust-lang/rust/commit/f8d8ffa2eba53928662dc57bc3a6c5608beb26f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8d8ffa2eba53928662dc57bc3a6c5608beb26f1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d941cd9812891af3b83dd4de64aa7d8ee99641a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d941cd9812891af3b83dd4de64aa7d8ee99641a", "html_url": "https://github.com/rust-lang/rust/commit/4d941cd9812891af3b83dd4de64aa7d8ee99641a"}, {"sha": "e8ab6489027098dbf4a407ddd0cedd0fbe40e3a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8ab6489027098dbf4a407ddd0cedd0fbe40e3a4", "html_url": "https://github.com/rust-lang/rust/commit/e8ab6489027098dbf4a407ddd0cedd0fbe40e3a4"}], "stats": {"total": 46, "additions": 32, "deletions": 14}, "files": [{"sha": "3efdab534384b8065d4b48dfee66526461213817", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/adjust_fulfillment_errors.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8d8ffa2eba53928662dc57bc3a6c5608beb26f1/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d8ffa2eba53928662dc57bc3a6c5608beb26f1/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs?ref=f8d8ffa2eba53928662dc57bc3a6c5608beb26f1", "patch": "@@ -278,9 +278,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         span: Span,\n     ) -> bool {\n         if let traits::FulfillmentErrorCode::CodeSelectionError(\n-            traits::SelectionError::OutputTypeParameterMismatch(_, expected, _),\n+            traits::SelectionError::OutputTypeParameterMismatch(box traits::SelectionOutputTypeParameterMismatch{\n+                expected_trait_ref, ..\n+            }),\n         ) = error.code\n-            && let ty::Closure(def_id, _) | ty::Generator(def_id, ..) = expected.skip_binder().self_ty().kind()\n+            && let ty::Closure(def_id, _) | ty::Generator(def_id, ..) = expected_trait_ref.skip_binder().self_ty().kind()\n             && span.overlaps(self.tcx.def_span(*def_id))\n         {\n             true"}, {"sha": "dcc323493f4795a2d13d6860bd32e2e441a814c7", "filename": "compiler/rustc_hir_typeck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8d8ffa2eba53928662dc57bc3a6c5608beb26f1/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d8ffa2eba53928662dc57bc3a6c5608beb26f1/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs?ref=f8d8ffa2eba53928662dc57bc3a6c5608beb26f1", "patch": "@@ -2,6 +2,7 @@\n #![feature(let_chains)]\n #![feature(try_blocks)]\n #![feature(never_type)]\n+#![feature(box_patterns)]\n #![feature(min_specialization)]\n #![feature(control_flow_enum)]\n #![feature(drain_filter)]"}, {"sha": "449c453555e9e4c978d94d0b7f7ceb9fb28f81ce", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f8d8ffa2eba53928662dc57bc3a6c5608beb26f1/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d8ffa2eba53928662dc57bc3a6c5608beb26f1/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=f8d8ffa2eba53928662dc57bc3a6c5608beb26f1", "patch": "@@ -580,11 +580,7 @@ pub enum SelectionError<'tcx> {\n     /// After a closure impl has selected, its \"outputs\" were evaluated\n     /// (which for closures includes the \"input\" type params) and they\n     /// didn't resolve. See `confirm_poly_trait_refs` for more.\n-    OutputTypeParameterMismatch(\n-        ty::PolyTraitRef<'tcx>,\n-        ty::PolyTraitRef<'tcx>,\n-        ty::error::TypeError<'tcx>,\n-    ),\n+    OutputTypeParameterMismatch(Box<SelectionOutputTypeParameterMismatch<'tcx>>),\n     /// The trait pointed by `DefId` is not object safe.\n     TraitNotObjectSafe(DefId),\n     /// A given constant couldn't be evaluated.\n@@ -596,6 +592,13 @@ pub enum SelectionError<'tcx> {\n     ErrorReporting,\n }\n \n+#[derive(Clone, Debug, TypeVisitable, Lift)]\n+pub struct SelectionOutputTypeParameterMismatch<'tcx> {\n+    pub found_trait_ref: ty::PolyTraitRef<'tcx>,\n+    pub expected_trait_ref: ty::PolyTraitRef<'tcx>,\n+    pub terr: ty::error::TypeError<'tcx>,\n+}\n+\n /// When performing resolution, it is typically the case that there\n /// can be one of three outcomes:\n ///"}, {"sha": "9836522392373772620296ecfde82aeb33523220", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f8d8ffa2eba53928662dc57bc3a6c5608beb26f1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d8ffa2eba53928662dc57bc3a6c5608beb26f1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=f8d8ffa2eba53928662dc57bc3a6c5608beb26f1", "patch": "@@ -28,6 +28,7 @@ use rustc_hir::{GenericParam, Item, Node};\n use rustc_infer::infer::error_reporting::TypeErrCtxt;\n use rustc_infer::infer::{InferOk, TypeTrace};\n use rustc_middle::traits::select::OverflowError;\n+use rustc_middle::traits::SelectionOutputTypeParameterMismatch;\n use rustc_middle::ty::abstract_const::NotConstEvaluatable;\n use rustc_middle::ty::error::{ExpectedFound, TypeError};\n use rustc_middle::ty::fold::{TypeFolder, TypeSuperFoldable};\n@@ -1087,17 +1088,21 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 }\n             }\n \n-            OutputTypeParameterMismatch(\n+            OutputTypeParameterMismatch(box SelectionOutputTypeParameterMismatch {\n                 found_trait_ref,\n                 expected_trait_ref,\n-                terr @ TypeError::CyclicTy(_),\n-            ) => self.report_type_parameter_mismatch_cyclic_type_error(\n+                terr: terr @ TypeError::CyclicTy(_),\n+            }) => self.report_type_parameter_mismatch_cyclic_type_error(\n                 &obligation,\n                 found_trait_ref,\n                 expected_trait_ref,\n                 terr,\n             ),\n-            OutputTypeParameterMismatch(found_trait_ref, expected_trait_ref, _) => {\n+            OutputTypeParameterMismatch(box SelectionOutputTypeParameterMismatch {\n+                found_trait_ref,\n+                expected_trait_ref,\n+                terr: _,\n+            }) => {\n                 match self.report_type_parameter_mismatch_error(\n                     &obligation,\n                     span,"}, {"sha": "4dc84e0ad10b1a3b7b9cd645781186088d7d3c1c", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f8d8ffa2eba53928662dc57bc3a6c5608beb26f1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d8ffa2eba53928662dc57bc3a6c5608beb26f1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=f8d8ffa2eba53928662dc57bc3a6c5608beb26f1", "patch": "@@ -10,6 +10,7 @@ use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_hir::lang_items::LangItem;\n use rustc_infer::infer::LateBoundRegionConversionTime::HigherRankedType;\n use rustc_infer::infer::{DefineOpaqueTypes, InferOk};\n+use rustc_middle::traits::SelectionOutputTypeParameterMismatch;\n use rustc_middle::ty::{\n     self, Binder, GenericParamDefKind, InternalSubsts, SubstsRef, ToPolyTraitRef, ToPredicate,\n     TraitRef, Ty, TyCtxt, TypeVisitableExt,\n@@ -811,7 +812,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     fn confirm_poly_trait_refs(\n         &mut self,\n         obligation: &TraitObligation<'tcx>,\n-        expected_trait_ref: ty::PolyTraitRef<'tcx>,\n+        self_ty_trait_ref: ty::PolyTraitRef<'tcx>,\n     ) -> Result<Vec<PredicateObligation<'tcx>>, SelectionError<'tcx>> {\n         let obligation_trait_ref = obligation.predicate.to_poly_trait_ref();\n         // Normalize the obligation and expected trait refs together, because why not\n@@ -822,7 +823,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     obligation.param_env,\n                     obligation.cause.clone(),\n                     obligation.recursion_depth + 1,\n-                    (obligation_trait_ref, expected_trait_ref),\n+                    (obligation_trait_ref, self_ty_trait_ref),\n                 )\n             });\n \n@@ -834,7 +835,13 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 obligations.extend(nested);\n                 obligations\n             })\n-            .map_err(|e| OutputTypeParameterMismatch(expected_trait_ref, obligation_trait_ref, e))\n+            .map_err(|terr| {\n+                OutputTypeParameterMismatch(Box::new(SelectionOutputTypeParameterMismatch {\n+                    expected_trait_ref: obligation_trait_ref,\n+                    found_trait_ref: expected_trait_ref,\n+                    terr,\n+                }))\n+            })\n     }\n \n     fn confirm_trait_upcasting_unsize_candidate("}]}