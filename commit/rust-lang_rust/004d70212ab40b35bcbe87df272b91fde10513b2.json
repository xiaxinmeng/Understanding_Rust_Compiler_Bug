{"sha": "004d70212ab40b35bcbe87df272b91fde10513b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwNGQ3MDIxMmFiNDBiMzViY2JlODdkZjI3MmI5MWZkZTEwNTEzYjI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-08-18T21:54:56Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-09-06T11:27:22Z"}, "message": "track, for each upvar, its index in list of upvars", "tree": {"sha": "dd7a3eb5a469b6523f7c9c7a9de7dd5292b40b3d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd7a3eb5a469b6523f7c9c7a9de7dd5292b40b3d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/004d70212ab40b35bcbe87df272b91fde10513b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/004d70212ab40b35bcbe87df272b91fde10513b2", "html_url": "https://github.com/rust-lang/rust/commit/004d70212ab40b35bcbe87df272b91fde10513b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/004d70212ab40b35bcbe87df272b91fde10513b2/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b52c5bfff16a5f95c04a01325c55881f652a802", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b52c5bfff16a5f95c04a01325c55881f652a802", "html_url": "https://github.com/rust-lang/rust/commit/9b52c5bfff16a5f95c04a01325c55881f652a802"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "abf2d5f3625dc2019e5930e64e4a4ce9744fd583", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/004d70212ab40b35bcbe87df272b91fde10513b2/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/004d70212ab40b35bcbe87df272b91fde10513b2/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=004d70212ab40b35bcbe87df272b91fde10513b2", "patch": "@@ -470,8 +470,8 @@ impl tr for def::Def {\n           def::DefPrimTy(p) => def::DefPrimTy(p),\n           def::DefTyParam(s, index, def_id, n) => def::DefTyParam(s, index, def_id.tr(dcx), n),\n           def::DefUse(did) => def::DefUse(did.tr(dcx)),\n-          def::DefUpvar(nid1, nid2) => {\n-            def::DefUpvar(dcx.tr_id(nid1), dcx.tr_id(nid2))\n+          def::DefUpvar(nid1, index, nid2) => {\n+            def::DefUpvar(dcx.tr_id(nid1), index, dcx.tr_id(nid2))\n           }\n           def::DefStruct(did) => def::DefStruct(did.tr(dcx)),\n           def::DefRegion(nid) => def::DefRegion(dcx.tr_id(nid)),"}, {"sha": "86133aad67216a0ee760e2918205e49319953998", "filename": "src/librustc/middle/def.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/004d70212ab40b35bcbe87df272b91fde10513b2/src%2Flibrustc%2Fmiddle%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/004d70212ab40b35bcbe87df272b91fde10513b2/src%2Flibrustc%2Fmiddle%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdef.rs?ref=004d70212ab40b35bcbe87df272b91fde10513b2", "patch": "@@ -38,6 +38,7 @@ pub enum Def {\n     DefTyParam(ParamSpace, u32, DefId, ast::Name),\n     DefUse(DefId),\n     DefUpvar(ast::NodeId,  // id of closed over local\n+             usize,        // index in the freevars list of the closure\n              ast::NodeId), // expr node that creates the closure\n \n     /// Note that if it's a tuple struct's definition, the node id of the DefId\n@@ -129,7 +130,7 @@ impl Def {\n                 id\n             }\n             DefLocal(id) |\n-            DefUpvar(id, _) |\n+            DefUpvar(id, _, _) |\n             DefRegion(id) |\n             DefLabel(id)  |\n             DefSelfTy(_, Some((_, id))) => {"}, {"sha": "51005ef8b97704c2c2b71846df9359cc52a38b18", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/004d70212ab40b35bcbe87df272b91fde10513b2/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/004d70212ab40b35bcbe87df272b91fde10513b2/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=004d70212ab40b35bcbe87df272b91fde10513b2", "patch": "@@ -578,7 +578,7 @@ impl<'t, 'a,'tcx> MemCategorizationContext<'t, 'a, 'tcx> {\n               }))\n           }\n \n-          def::DefUpvar(var_id, fn_node_id) => {\n+          def::DefUpvar(var_id, _, fn_node_id) => {\n               let ty = try!(self.node_ty(fn_node_id));\n               match ty.sty {\n                   ty::TyClosure(closure_id, _) => {"}, {"sha": "cd5f2a2e76477f1a65cfa945d83ca5ce02173972", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/004d70212ab40b35bcbe87df272b91fde10513b2/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/004d70212ab40b35bcbe87df272b91fde10513b2/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=004d70212ab40b35bcbe87df272b91fde10513b2", "patch": "@@ -62,7 +62,7 @@ use rustc::middle::pat_util::pat_bindings;\n use rustc::middle::privacy::*;\n use rustc::middle::subst::{ParamSpace, FnSpace, TypeSpace};\n use rustc::middle::ty::{Freevar, FreevarMap, TraitMap, GlobMap};\n-use rustc::util::nodemap::{NodeMap, NodeSet, DefIdSet, FnvHashMap};\n+use rustc::util::nodemap::{NodeMap, DefIdSet, FnvHashMap};\n use rustc::util::lev_distance::lev_distance;\n \n use syntax::ast;\n@@ -95,7 +95,6 @@ use rustc_front::hir::TypeImplItem;\n use rustc_front::util::walk_pat;\n \n use std::collections::{HashMap, HashSet};\n-use std::collections::hash_map::Entry::{Occupied, Vacant};\n use std::cell::{Cell, RefCell};\n use std::fmt;\n use std::mem::replace;\n@@ -1152,7 +1151,7 @@ pub struct Resolver<'a, 'tcx:'a> {\n \n     def_map: DefMap,\n     freevars: RefCell<FreevarMap>,\n-    freevars_seen: RefCell<NodeMap<NodeSet>>,\n+    freevars_seen: RefCell<NodeMap<NodeMap<usize>>>,\n     export_map: ExportMap,\n     trait_map: TraitMap,\n     external_exports: ExternalExports,\n@@ -1992,21 +1991,21 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                         }\n                         ClosureRibKind(function_id) => {\n                             let prev_def = def;\n-                            def = DefUpvar(node_id, function_id);\n \n                             let mut seen = self.freevars_seen.borrow_mut();\n-                            let seen = match seen.entry(function_id) {\n-                                Occupied(v) => v.into_mut(),\n-                                Vacant(v) => v.insert(NodeSet()),\n-                            };\n-                            if seen.contains(&node_id) {\n+                            let seen = seen.entry(function_id).or_insert_with(|| NodeMap());\n+                            if let Some(&index) = seen.get(&node_id) {\n+                                def = DefUpvar(node_id, index, function_id);\n                                 continue;\n                             }\n-                            match self.freevars.borrow_mut().entry(function_id) {\n-                                Occupied(v) => v.into_mut(),\n-                                Vacant(v) => v.insert(vec![]),\n-                            }.push(Freevar { def: prev_def, span: span });\n-                            seen.insert(node_id);\n+                            let mut freevars = self.freevars.borrow_mut();\n+                            let vec = freevars.entry(function_id)\n+                                              .or_insert_with(|| vec![]);\n+                            let depth = vec.len();\n+                            vec.push(Freevar { def: prev_def, span: span });\n+\n+                            def = DefUpvar(node_id, depth, function_id);\n+                            seen.insert(node_id, depth);\n                         }\n                         ItemRibKind | MethodRibKind => {\n                             // This was an attempt to access an upvar inside a"}, {"sha": "c6866004df949254f515bac2b5d81b2154c9e845", "filename": "src/librustc_trans/trans/_match.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/004d70212ab40b35bcbe87df272b91fde10513b2/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/004d70212ab40b35bcbe87df272b91fde10513b2/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2F_match.rs?ref=004d70212ab40b35bcbe87df272b91fde10513b2", "patch": "@@ -1428,19 +1428,19 @@ pub fn trans_match<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n fn is_discr_reassigned(bcx: Block, discr: &hir::Expr, body: &hir::Expr) -> bool {\n     let (vid, field) = match discr.node {\n         hir::ExprPath(..) => match bcx.def(discr.id) {\n-            def::DefLocal(vid) | def::DefUpvar(vid, _) => (vid, None),\n+            def::DefLocal(vid) | def::DefUpvar(vid, _, _) => (vid, None),\n             _ => return false\n         },\n         hir::ExprField(ref base, field) => {\n             let vid = match bcx.tcx().def_map.borrow().get(&base.id).map(|d| d.full_def()) {\n-                Some(def::DefLocal(vid)) | Some(def::DefUpvar(vid, _)) => vid,\n+                Some(def::DefLocal(vid)) | Some(def::DefUpvar(vid, _, _)) => vid,\n                 _ => return false\n             };\n             (vid, Some(mc::NamedField(field.node.name)))\n         },\n         hir::ExprTupField(ref base, field) => {\n             let vid = match bcx.tcx().def_map.borrow().get(&base.id).map(|d| d.full_def()) {\n-                Some(def::DefLocal(vid)) | Some(def::DefUpvar(vid, _)) => vid,\n+                Some(def::DefLocal(vid)) | Some(def::DefUpvar(vid, _, _)) => vid,\n                 _ => return false\n             };\n             (vid, Some(mc::PositionalField(field.node)))"}, {"sha": "7602956cb8e326bf1902116324fc9313857470d1", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/004d70212ab40b35bcbe87df272b91fde10513b2/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/004d70212ab40b35bcbe87df272b91fde10513b2/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=004d70212ab40b35bcbe87df272b91fde10513b2", "patch": "@@ -1319,7 +1319,7 @@ pub fn trans_local_var<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     let _icx = push_ctxt(\"trans_local_var\");\n \n     match def {\n-        def::DefUpvar(nid, _) => {\n+        def::DefUpvar(nid, _, _) => {\n             // Can't move upvars, so this is never a ZeroMemLastUse.\n             let local_ty = node_id_type(bcx, nid);\n             let lval = Lvalue::new_with_hint(\"expr::trans_local_var (upvar)\","}, {"sha": "b1fbf97d1a74b7d68e357e144c11a89271b9e36b", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/004d70212ab40b35bcbe87df272b91fde10513b2/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/004d70212ab40b35bcbe87df272b91fde10513b2/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=004d70212ab40b35bcbe87df272b91fde10513b2", "patch": "@@ -4318,7 +4318,7 @@ fn type_scheme_and_predicates_for_def<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                                                 defn: def::Def)\n                                                 -> (TypeScheme<'tcx>, GenericPredicates<'tcx>) {\n     match defn {\n-        def::DefLocal(nid) | def::DefUpvar(nid, _) => {\n+        def::DefLocal(nid) | def::DefUpvar(nid, _, _) => {\n             let typ = fcx.local_ty(sp, nid);\n             (ty::TypeScheme { generics: ty::Generics::empty(), ty: typ },\n              ty::GenericPredicates::empty())"}]}