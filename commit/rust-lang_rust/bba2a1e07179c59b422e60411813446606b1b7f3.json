{"sha": "bba2a1e07179c59b422e60411813446606b1b7f3", "node_id": "C_kwDOAAsO6NoAKGJiYTJhMWUwNzE3OWM1OWI0MjJlNjA0MTE4MTM0NDY2MDZiMWI3ZjM", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2023-04-29T11:01:13Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2023-05-06T08:31:57Z"}, "message": "Fix spans in LLVM-generated inline asm errors\n\nPreviously, incorrect spans were reported if inline assembly contained\nCRLF (Windows) line endings.\n\nFixes #110885", "tree": {"sha": "bcc2cdd990a326092a4452dd339d78ad4cdf20b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bcc2cdd990a326092a4452dd339d78ad4cdf20b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bba2a1e07179c59b422e60411813446606b1b7f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bba2a1e07179c59b422e60411813446606b1b7f3", "html_url": "https://github.com/rust-lang/rust/commit/bba2a1e07179c59b422e60411813446606b1b7f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bba2a1e07179c59b422e60411813446606b1b7f3/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af2c7e0f9b5730b9598ca70fc67360fa69b469c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/af2c7e0f9b5730b9598ca70fc67360fa69b469c8", "html_url": "https://github.com/rust-lang/rust/commit/af2c7e0f9b5730b9598ca70fc67360fa69b469c8"}], "stats": {"total": 34, "additions": 31, "deletions": 3}, "files": [{"sha": "d0bed71bd12a528c798fe1eb313dcb3ab4eeef3c", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bba2a1e07179c59b422e60411813446606b1b7f3/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba2a1e07179c59b422e60411813446606b1b7f3/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=bba2a1e07179c59b422e60411813446606b1b7f3", "patch": "@@ -1821,9 +1821,15 @@ impl SharedEmitterMain {\n                         let source = sess\n                             .source_map()\n                             .new_source_file(FileName::inline_asm_source_code(&buffer), buffer);\n-                        let source_span = Span::with_root_ctxt(source.start_pos, source.end_pos);\n-                        let spans: Vec<_> =\n-                            spans.iter().map(|sp| source_span.from_inner(*sp)).collect();\n+                        let spans: Vec<_> = spans\n+                            .iter()\n+                            .map(|sp| {\n+                                Span::with_root_ctxt(\n+                                    source.normalized_byte_pos(sp.start as u32),\n+                                    source.normalized_byte_pos(sp.end as u32),\n+                                )\n+                            })\n+                            .collect();\n                         err.span_note(spans, \"instantiated into assembly here\");\n                     }\n "}, {"sha": "fa89992f79a1f96d6134a9f79032d59922c8152b", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/bba2a1e07179c59b422e60411813446606b1b7f3/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba2a1e07179c59b422e60411813446606b1b7f3/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=bba2a1e07179c59b422e60411813446606b1b7f3", "patch": "@@ -1745,6 +1745,28 @@ impl SourceFile {\n         BytePos::from_u32(pos.0 - self.start_pos.0 + diff)\n     }\n \n+    /// Calculates a normalized byte position from a byte offset relative to the\n+    /// start of the file.\n+    ///\n+    /// When we get an inline assembler error from LLVM during codegen, we\n+    /// import the expanded assembly code as a new `SourceFile`, which can then\n+    /// be used for error reporting with spans. However the byte offsets given\n+    /// to us by LLVM are relative to the start of the original buffer, not the\n+    /// normalized one. Hence we need to convert those offsets to the normalized\n+    /// form when constructing spans.\n+    pub fn normalized_byte_pos(&self, offset: u32) -> BytePos {\n+        let diff = match self\n+            .normalized_pos\n+            .binary_search_by(|np| (np.pos.0 + np.diff).cmp(&(self.start_pos.0 + offset)))\n+        {\n+            Ok(i) => self.normalized_pos[i].diff,\n+            Err(i) if i == 0 => 0,\n+            Err(i) => self.normalized_pos[i - 1].diff,\n+        };\n+\n+        BytePos::from_u32(self.start_pos.0 + offset - diff)\n+    }\n+\n     /// Converts an absolute `BytePos` to a `CharPos` relative to the `SourceFile`.\n     pub fn bytepos_to_file_charpos(&self, bpos: BytePos) -> CharPos {\n         // The number of extra bytes due to multibyte chars in the `SourceFile`."}]}