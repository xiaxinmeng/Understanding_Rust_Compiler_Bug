{"sha": "c4e10c81b9d1ed5ab82f07ff467b175b0099a7e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0ZTEwYzgxYjlkMWVkNWFiODJmMDdmZjQ2N2IxNzViMDA5OWE3ZTg=", "commit": {"author": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-08-11T18:01:19Z"}, "committer": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-08-11T18:01:19Z"}, "message": "gen partialeq for tuple enums", "tree": {"sha": "5124013e40555d61344e3ace3556d04d4bf0d461", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5124013e40555d61344e3ace3556d04d4bf0d461"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4e10c81b9d1ed5ab82f07ff467b175b0099a7e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4e10c81b9d1ed5ab82f07ff467b175b0099a7e8", "html_url": "https://github.com/rust-lang/rust/commit/c4e10c81b9d1ed5ab82f07ff467b175b0099a7e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4e10c81b9d1ed5ab82f07ff467b175b0099a7e8/comments", "author": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "741e27b41408e42fc14c41f8001eeefb92fbf00b", "url": "https://api.github.com/repos/rust-lang/rust/commits/741e27b41408e42fc14c41f8001eeefb92fbf00b", "html_url": "https://github.com/rust-lang/rust/commit/741e27b41408e42fc14c41f8001eeefb92fbf00b"}], "stats": {"total": 39, "additions": 34, "deletions": 5}, "files": [{"sha": "3aa4afdce4a6e1d65b892a56d383ef64d0f03973", "filename": "crates/ide_assists/src/utils/gen_trait_fn_body.rs", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/c4e10c81b9d1ed5ab82f07ff467b175b0099a7e8/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e10c81b9d1ed5ab82f07ff467b175b0099a7e8/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs?ref=c4e10c81b9d1ed5ab82f07ff467b175b0099a7e8", "patch": "@@ -367,6 +367,10 @@ fn gen_partial_eq(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n         let record_name = make::path_concat(first, second);\n         Some(record_name)\n     }\n+\n+    fn gen_tuple_field(field_name: &String) -> ast::Pat {\n+        ast::Pat::IdentPat(make::ident_pat(false, false, make::name(field_name)))\n+    }\n     // FIXME: return `None` if the trait carries a generic type; we can only\n     // generate this code `Self` for the time being.\n \n@@ -399,7 +403,7 @@ fn gen_partial_eq(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n                             let l_name = &format!(\"l_{}\", field_name);\n                             l_fields.push(gen_record_pat_field(&field_name, &l_name));\n \n-                            let r_name = &format!(\"l_{}\", field_name);\n+                            let r_name = &format!(\"r_{}\", field_name);\n                             r_fields.push(gen_record_pat_field(&field_name, &r_name));\n \n                             let lhs = make::expr_path(make::ext::ident_path(l_name));\n@@ -408,9 +412,9 @@ fn gen_partial_eq(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n                             expr = gen_eq_chain(expr, cmp);\n                         }\n \n-                        let l_record = gen_record_pat(gen_variant_path(&variant)?, l_fields);\n-                        let r_record = gen_record_pat(gen_variant_path(&variant)?, r_fields);\n-                        let tuple = make::tuple_pat(vec![l_record.into(), r_record.into()]);\n+                        let left = gen_record_pat(gen_variant_path(&variant)?, l_fields);\n+                        let right = gen_record_pat(gen_variant_path(&variant)?, r_fields);\n+                        let tuple = make::tuple_pat(vec![left.into(), right.into()]);\n \n                         if let Some(expr) = expr {\n                             arms.push(make::match_arm(Some(tuple.into()), None, expr));\n@@ -419,7 +423,32 @@ fn gen_partial_eq(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n \n                     // todo!(\"implement tuple record iteration\")\n                     Some(ast::FieldList::TupleFieldList(list)) => {\n-                        todo!(\"implement tuple enum iteration\")\n+                        let mut expr = None;\n+                        let mut l_fields = vec![];\n+                        let mut r_fields = vec![];\n+\n+                        for (i, _) in list.fields().enumerate() {\n+                            let field_name = format!(\"{}\", i);\n+\n+                            let l_name = format!(\"l{}\", field_name);\n+                            l_fields.push(gen_tuple_field(&l_name));\n+\n+                            let r_name = format!(\"r{}\", field_name);\n+                            r_fields.push(gen_tuple_field(&r_name));\n+\n+                            let lhs = make::expr_path(make::ext::ident_path(&l_name));\n+                            let rhs = make::expr_path(make::ext::ident_path(&r_name));\n+                            let cmp = make::expr_op(ast::BinOp::EqualityTest, lhs, rhs);\n+                            expr = gen_eq_chain(expr, cmp);\n+                        }\n+\n+                        let left = make::tuple_struct_pat(gen_variant_path(&variant)?, l_fields);\n+                        let right = make::tuple_struct_pat(gen_variant_path(&variant)?, r_fields);\n+                        let tuple = make::tuple_pat(vec![left.into(), right.into()]);\n+\n+                        if let Some(expr) = expr {\n+                            arms.push(make::match_arm(Some(tuple.into()), None, expr));\n+                        }\n                     }\n                     None => continue,\n                 }"}]}