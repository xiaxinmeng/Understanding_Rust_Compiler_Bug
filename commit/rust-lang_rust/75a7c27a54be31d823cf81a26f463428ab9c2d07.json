{"sha": "75a7c27a54be31d823cf81a26f463428ab9c2d07", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1YTdjMjdhNTRiZTMxZDgyM2NmODFhMjZmNDYzNDI4YWI5YzJkMDc=", "commit": {"author": {"name": "AnthonyMikh", "email": "anthony.mikh@yandex.ru", "date": "2019-09-26T21:58:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-26T21:58:18Z"}, "message": "Revert \"Simplify Unicode-aware trimming\"\n\n`taken` is actually used afterwards", "tree": {"sha": "fad49d108e0a9a063ab7f1014309a5933638acd4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fad49d108e0a9a063ab7f1014309a5933638acd4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75a7c27a54be31d823cf81a26f463428ab9c2d07", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdjTR6CRBK7hj4Ov3rIwAAdHIIAA3aoJHOKhuJjI/41TZOYWLv\nVO1/6TgGqBLsMPt4yeEWo43IJSYXpj2d2XmkodPAYtTbvvB3ZajeZUZlfjCTr3FM\nHLmir6+X1to+MT+5WXbAZl9F7Ec3HP0XtbF320EsESKz/QSefLiyZ7UI8xroA6xO\nELzUe+oVXqoXhfMDkjn4tAaPexajDVMQhv2PxV21dmOgzmwkXk4U6nc9RUGdFSQi\ncuNzCqSBYCVuecctnb+QNx++Fdwtf6ytg/p/25wqIwq35gFAqCG2Fbl97amVxobL\nI2C28RfWZMVS2tViSwy1+lPdyn9jw4I54PvWNQ4AV0MYUs0zIyVScLmrgtsbm8w=\n=Z2eR\n-----END PGP SIGNATURE-----\n", "payload": "tree fad49d108e0a9a063ab7f1014309a5933638acd4\nparent 7a0725fdaf964fa1bf60eefb0cc5846b687426bf\nauthor AnthonyMikh <anthony.mikh@yandex.ru> 1569535098 +0300\ncommitter GitHub <noreply@github.com> 1569535098 +0300\n\nRevert \"Simplify Unicode-aware trimming\"\n\n`taken` is actually used afterwards"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75a7c27a54be31d823cf81a26f463428ab9c2d07", "html_url": "https://github.com/rust-lang/rust/commit/75a7c27a54be31d823cf81a26f463428ab9c2d07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75a7c27a54be31d823cf81a26f463428ab9c2d07/comments", "author": {"login": "AnthonyMikh", "id": 19252795, "node_id": "MDQ6VXNlcjE5MjUyNzk1", "avatar_url": "https://avatars.githubusercontent.com/u/19252795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AnthonyMikh", "html_url": "https://github.com/AnthonyMikh", "followers_url": "https://api.github.com/users/AnthonyMikh/followers", "following_url": "https://api.github.com/users/AnthonyMikh/following{/other_user}", "gists_url": "https://api.github.com/users/AnthonyMikh/gists{/gist_id}", "starred_url": "https://api.github.com/users/AnthonyMikh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AnthonyMikh/subscriptions", "organizations_url": "https://api.github.com/users/AnthonyMikh/orgs", "repos_url": "https://api.github.com/users/AnthonyMikh/repos", "events_url": "https://api.github.com/users/AnthonyMikh/events{/privacy}", "received_events_url": "https://api.github.com/users/AnthonyMikh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a0725fdaf964fa1bf60eefb0cc5846b687426bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a0725fdaf964fa1bf60eefb0cc5846b687426bf", "html_url": "https://github.com/rust-lang/rust/commit/7a0725fdaf964fa1bf60eefb0cc5846b687426bf"}], "stats": {"total": 27, "additions": 12, "deletions": 15}, "files": [{"sha": "1aa6b405c8fad17f136026d7a039052feddf554c", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/75a7c27a54be31d823cf81a26f463428ab9c2d07/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75a7c27a54be31d823cf81a26f463428ab9c2d07/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=75a7c27a54be31d823cf81a26f463428ab9c2d07", "patch": "@@ -530,21 +530,18 @@ impl EmitterWriter {\n         let left = margin.left(line_len);\n         let right = margin.right(line_len);\n         // On long lines, we strip the source line, accounting for unicode.\n-        // Make sure that the trimming on the right will fall within the terminal width.\n-        // FIXME: `unicode_width` sometimes disagrees with terminals on how wide a `char` is.\n-        // For now, just accept that sometimes the code line will be longer than desired.\n-        let code: String = source_string.chars().skip(left)\n-            .map(|ch| {\n-                let width = unicode_width::UnicodeWidthChar::width(*ch).unwrap_or(1);\n-                (width, ch)\n-            })\n-            .scan(0, |len, (width, ch)| {\n-                *len += width;\n-                Some(*len, ch)\n-            })\n-            .take_while(|&(prefix_len, _ch)| prefix_len <= right - left)\n-            .map(|(_prefix_len, ch)| ch)\n-            .collect();\n+        let mut taken = 0;\n+        let code: String = source_string.chars().skip(left).take_while(|ch| {\n+            // Make sure that the trimming on the right will fall within the terminal width.\n+            // FIXME: `unicode_width` sometimes disagrees with terminals on how wide a `char` is.\n+            // For now, just accept that sometimes the code line will be longer than desired.\n+            let next = unicode_width::UnicodeWidthChar::width(*ch).unwrap_or(1);\n+            if taken + next > right - left {\n+                return false;\n+            }\n+            taken += next;\n+            true\n+        }).collect();\n         buffer.puts(line_offset, code_offset, &code, Style::Quotation);\n         if margin.was_cut_left() {\n             // We have stripped some code/whitespace from the beginning, make it clear."}]}