{"sha": "b6998662900290db23974e8a7ba3c3864330c368", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2OTk4NjYyOTAwMjkwZGIyMzk3NGU4YTdiYTNjMzg2NDMzMGMzNjg=", "commit": {"author": {"name": "Denis Merigoux", "email": "denis.merigoux@gmail.com", "date": "2018-08-21T16:08:20Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-11-16T12:11:09Z"}, "message": "Generalized AtomicOrdering for BuilderMethods", "tree": {"sha": "106a14db5017479e2faee0d1ec98551c4b68f412", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/106a14db5017479e2faee0d1ec98551c4b68f412"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6998662900290db23974e8a7ba3c3864330c368", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6998662900290db23974e8a7ba3c3864330c368", "html_url": "https://github.com/rust-lang/rust/commit/b6998662900290db23974e8a7ba3c3864330c368", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6998662900290db23974e8a7ba3c3864330c368/comments", "author": {"login": "denismerigoux", "id": 1766128, "node_id": "MDQ6VXNlcjE3NjYxMjg=", "avatar_url": "https://avatars.githubusercontent.com/u/1766128?v=4", "gravatar_id": "", "url": "https://api.github.com/users/denismerigoux", "html_url": "https://github.com/denismerigoux", "followers_url": "https://api.github.com/users/denismerigoux/followers", "following_url": "https://api.github.com/users/denismerigoux/following{/other_user}", "gists_url": "https://api.github.com/users/denismerigoux/gists{/gist_id}", "starred_url": "https://api.github.com/users/denismerigoux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/denismerigoux/subscriptions", "organizations_url": "https://api.github.com/users/denismerigoux/orgs", "repos_url": "https://api.github.com/users/denismerigoux/repos", "events_url": "https://api.github.com/users/denismerigoux/events{/privacy}", "received_events_url": "https://api.github.com/users/denismerigoux/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "275589150b3ea0f077ccbfd4b6343aaa6e9683ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/275589150b3ea0f077ccbfd4b6343aaa6e9683ad", "html_url": "https://github.com/rust-lang/rust/commit/275589150b3ea0f077ccbfd4b6343aaa6e9683ad"}], "stats": {"total": 83, "additions": 69, "deletions": 14}, "files": [{"sha": "e09f22b4e6931cd85a6dd7a0e4e3cd80259aee76", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 38, "deletions": 12, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/b6998662900290db23974e8a7ba3c3864330c368/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6998662900290db23974e8a7ba3c3864330c368/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=b6998662900290db23974e8a7ba3c3864330c368", "patch": "@@ -488,10 +488,20 @@ impl BuilderMethods<'a, 'll, 'tcx, Value, BasicBlock>\n         }\n     }\n \n-    fn atomic_load(&self, ptr: &'ll Value, order: AtomicOrdering, size: Size) -> &'ll Value {\n+    fn atomic_load(\n+        &self,\n+        ptr: &'ll Value,\n+        order: traits::AtomicOrdering,\n+        size: Size,\n+    ) -> &'ll Value {\n         self.count_insn(\"load.atomic\");\n         unsafe {\n-            let load = llvm::LLVMRustBuildAtomicLoad(self.llbuilder, ptr, noname(), order);\n+            let load = llvm::LLVMRustBuildAtomicLoad(\n+                self.llbuilder,\n+                ptr,\n+                noname(),\n+                AtomicOrdering::from_generic(order),\n+            );\n             // LLVM requires the alignment of atomic loads to be at least the size of the type.\n             llvm::LLVMSetAlignment(load, size.bytes() as c_uint);\n             load\n@@ -568,12 +578,17 @@ impl BuilderMethods<'a, 'll, 'tcx, Value, BasicBlock>\n     }\n \n    fn atomic_store(&self, val: &'ll Value, ptr: &'ll Value,\n-                   order: AtomicOrdering, size: Size) {\n+                   order: traits::AtomicOrdering, size: Size) {\n         debug!(\"Store {:?} -> {:?}\", val, ptr);\n         self.count_insn(\"store.atomic\");\n         let ptr = self.check_store(val, ptr);\n         unsafe {\n-            let store = llvm::LLVMRustBuildAtomicStore(self.llbuilder, val, ptr, order);\n+            let store = llvm::LLVMRustBuildAtomicStore(\n+                self.llbuilder,\n+                val,\n+                ptr,\n+                AtomicOrdering::from_generic(order),\n+            );\n             // LLVM requires the alignment of atomic stores to be at least the size of the type.\n             llvm::LLVMSetAlignment(store, size.bytes() as c_uint);\n         }\n@@ -1047,37 +1062,48 @@ impl BuilderMethods<'a, 'll, 'tcx, Value, BasicBlock>\n         dst: &'ll Value,\n         cmp: &'ll Value,\n         src: &'ll Value,\n-        order: AtomicOrdering,\n-        failure_order: AtomicOrdering,\n+        order: traits::AtomicOrdering,\n+        failure_order: traits::AtomicOrdering,\n         weak: bool,\n     ) -> &'ll Value {\n         let weak = if weak { llvm::True } else { llvm::False };\n         unsafe {\n-            llvm::LLVMRustBuildAtomicCmpXchg(self.llbuilder, dst, cmp, src,\n-                                             order, failure_order, weak)\n+            llvm::LLVMRustBuildAtomicCmpXchg(\n+                self.llbuilder,\n+                dst,\n+                cmp,\n+                src,\n+                AtomicOrdering::from_generic(order),\n+                AtomicOrdering::from_generic(failure_order),\n+                weak\n+            )\n         }\n     }\n     fn atomic_rmw(\n         &self,\n         op: traits::AtomicRmwBinOp,\n         dst: &'ll Value,\n         src: &'ll Value,\n-        order: AtomicOrdering,\n+        order: traits::AtomicOrdering,\n     ) -> &'ll Value {\n         unsafe {\n             llvm::LLVMBuildAtomicRMW(\n                 self.llbuilder,\n                 AtomicRmwBinOp::from_generic(op),\n                 dst,\n                 src,\n-                order,\n+                AtomicOrdering::from_generic(order),\n                 False)\n         }\n     }\n \n-    fn atomic_fence(&self, order: AtomicOrdering, scope: SynchronizationScope) {\n+    fn atomic_fence(&self, order: traits::AtomicOrdering, scope: SynchronizationScope) {\n         unsafe {\n-            llvm::LLVMRustBuildAtomicFence(self.llbuilder, order, scope);\n+            llvm::LLVMRustBuildAtomicFence(\n+                self.llbuilder,\n+                AtomicOrdering::from_generic(order),\n+                scope\n+            );\n         }\n     }\n "}, {"sha": "7db8fa4bd2eec37c3f947ef14efac3d7a761cf30", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6998662900290db23974e8a7ba3c3864330c368/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6998662900290db23974e8a7ba3c3864330c368/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=b6998662900290db23974e8a7ba3c3864330c368", "patch": "@@ -439,7 +439,7 @@ pub fn codegen_intrinsic_call(\n         // This requires that atomic intrinsics follow a specific naming pattern:\n         // \"atomic_<operation>[_<ordering>]\", and no ordering means SeqCst\n         name if name.starts_with(\"atomic_\") => {\n-            use llvm::AtomicOrdering::*;\n+            use traits::AtomicOrdering::*;\n \n             let split: Vec<&str> = name.split('_').collect();\n "}, {"sha": "677c108edc371c89335010ef426271f45353f63b", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b6998662900290db23974e8a7ba3c3864330c368/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6998662900290db23974e8a7ba3c3864330c368/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=b6998662900290db23974e8a7ba3c3864330c368", "patch": "@@ -277,6 +277,22 @@ pub enum AtomicOrdering {\n     SequentiallyConsistent = 7,\n }\n \n+impl AtomicOrdering {\n+    pub fn from_generic(ao : traits::AtomicOrdering) -> Self {\n+        match ao {\n+            traits::AtomicOrdering::NotAtomic => AtomicOrdering::NotAtomic,\n+            traits::AtomicOrdering::Unordered => AtomicOrdering::Unordered,\n+            traits::AtomicOrdering::Monotonic => AtomicOrdering::Monotonic,\n+            traits::AtomicOrdering::Acquire => AtomicOrdering::Acquire,\n+            traits::AtomicOrdering::Release => AtomicOrdering::Release,\n+            traits::AtomicOrdering::AcquireRelease => AtomicOrdering::AcquireRelease,\n+            traits::AtomicOrdering::SequentiallyConsistent =>\n+                AtomicOrdering::SequentiallyConsistent\n+        }\n+    }\n+}\n+\n+\n /// LLVMRustSynchronizationScope\n #[derive(Copy, Clone)]\n #[repr(C)]"}, {"sha": "315c273dd2dc9ecb234e2a3dcbd720d800597f9a", "filename": "src/librustc_codegen_llvm/traits.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b6998662900290db23974e8a7ba3c3864330c368/src%2Flibrustc_codegen_llvm%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6998662900290db23974e8a7ba3c3864330c368/src%2Flibrustc_codegen_llvm%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Ftraits.rs?ref=b6998662900290db23974e8a7ba3c3864330c368", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use llvm::{AtomicOrdering, SynchronizationScope, AsmDialect};\n+use llvm::{SynchronizationScope, AsmDialect};\n use common::*;\n use type_::Type;\n use libc::c_char;\n@@ -82,6 +82,19 @@ pub enum AtomicRmwBinOp {\n     AtomicUMin\n }\n \n+pub enum AtomicOrdering {\n+    #[allow(dead_code)]\n+    NotAtomic,\n+    Unordered,\n+    Monotonic,\n+    // Consume,  // Not specified yet.\n+    Acquire,\n+    Release,\n+    AcquireRelease,\n+    SequentiallyConsistent,\n+}\n+\n+\n pub trait BuilderMethods<'a, 'll :'a, 'tcx: 'll,\n     Value : ?Sized,\n     BasicBlock: ?Sized"}]}