{"sha": "21867225a74d3b07c2b65e32c67f45197db36896", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxODY3MjI1YTc0ZDNiMDdjMmI2NWUzMmM2N2Y0NTE5N2RiMzY4OTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-30T12:52:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-30T12:52:41Z"}, "message": "Auto merge of #74930 - ecstatic-morse:const-size-align-of-val, r=oli-obk\n\nMake `mem::size_of_val` and `mem::align_of_val` unstably const\n\nImplements #46571 but does not stabilize it. I wanted this while working on something today.\n\nThe only reason not to immediately stabilize are concerns around [custom DSTs](https://github.com/rust-lang/rust/issues/46571#issuecomment-387669352). That proposal has made zero progress in the last two years and const eval is rich enough to support pretty much any user-defined `len` function as long as nightly features are allowed (`raw_ptr_deref`).\n\nCurrently, this raises a `const_err` lint when passed an `extern type`.\n\nr? @oli-obk\n\ncc @rust-lang/wg-const-eval", "tree": {"sha": "f903229ee97368d43dac57f42e536ba2a4d9b102", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f903229ee97368d43dac57f42e536ba2a4d9b102"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21867225a74d3b07c2b65e32c67f45197db36896", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21867225a74d3b07c2b65e32c67f45197db36896", "html_url": "https://github.com/rust-lang/rust/commit/21867225a74d3b07c2b65e32c67f45197db36896", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21867225a74d3b07c2b65e32c67f45197db36896/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ce0cf070e0f5c1157976fc1106eded67bac2050", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ce0cf070e0f5c1157976fc1106eded67bac2050", "html_url": "https://github.com/rust-lang/rust/commit/1ce0cf070e0f5c1157976fc1106eded67bac2050"}, {"sha": "88fd4943a65fe7b18c0468255c54f9dee591dd1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/88fd4943a65fe7b18c0468255c54f9dee591dd1b", "html_url": "https://github.com/rust-lang/rust/commit/88fd4943a65fe7b18c0468255c54f9dee591dd1b"}], "stats": {"total": 106, "additions": 103, "deletions": 3}, "files": [{"sha": "44b86438f2a89534932e1a40075e1100bb782065", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21867225a74d3b07c2b65e32c67f45197db36896/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21867225a74d3b07c2b65e32c67f45197db36896/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=21867225a74d3b07c2b65e32c67f45197db36896", "patch": "@@ -1004,11 +1004,13 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is\n     /// [`std::mem::size_of_val`](../../std/mem/fn.size_of_val.html).\n+    #[rustc_const_unstable(feature = \"const_size_of_val\", issue = \"46571\")]\n     pub fn size_of_val<T: ?Sized>(_: *const T) -> usize;\n     /// The required alignment of the referenced value.\n     ///\n     /// The stabilized version of this intrinsic is\n     /// [`std::mem::align_of_val`](../../std/mem/fn.align_of_val.html).\n+    #[rustc_const_unstable(feature = \"const_align_of_val\", issue = \"46571\")]\n     pub fn min_align_of_val<T: ?Sized>(_: *const T) -> usize;\n \n     /// Gets a static string slice containing the name of a type."}, {"sha": "550e07f9d571091b487574ab9cd03bd302d27f13", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21867225a74d3b07c2b65e32c67f45197db36896/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21867225a74d3b07c2b65e32c67f45197db36896/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=21867225a74d3b07c2b65e32c67f45197db36896", "patch": "@@ -88,6 +88,8 @@\n #![feature(const_result)]\n #![feature(const_slice_from_raw_parts)]\n #![feature(const_slice_ptr_len)]\n+#![feature(const_size_of_val)]\n+#![feature(const_align_of_val)]\n #![feature(const_type_name)]\n #![feature(const_likely)]\n #![feature(const_unreachable_unchecked)]"}, {"sha": "4e58e118562ef92a082299d74dba4ad92b4b4101", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/21867225a74d3b07c2b65e32c67f45197db36896/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21867225a74d3b07c2b65e32c67f45197db36896/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=21867225a74d3b07c2b65e32c67f45197db36896", "patch": "@@ -332,7 +332,8 @@ pub const fn size_of<T>() -> usize {\n /// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub fn size_of_val<T: ?Sized>(val: &T) -> usize {\n+#[rustc_const_unstable(feature = \"const_size_of_val\", issue = \"46571\")]\n+pub const fn size_of_val<T: ?Sized>(val: &T) -> usize {\n     intrinsics::size_of_val(val)\n }\n \n@@ -466,9 +467,10 @@ pub const fn align_of<T>() -> usize {\n /// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_const_unstable(feature = \"const_align_of_val\", issue = \"46571\")]\n #[allow(deprecated)]\n-pub fn align_of_val<T: ?Sized>(val: &T) -> usize {\n-    min_align_of_val(val)\n+pub const fn align_of_val<T: ?Sized>(val: &T) -> usize {\n+    intrinsics::min_align_of_val(val)\n }\n \n /// Returns the [ABI]-required minimum alignment of the type of the value that `val` points to."}, {"sha": "9a21fc427a3e399510d5fb91cd3de681985c241b", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/21867225a74d3b07c2b65e32c67f45197db36896/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21867225a74d3b07c2b65e32c67f45197db36896/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=21867225a74d3b07c2b65e32c67f45197db36896", "patch": "@@ -120,6 +120,21 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 self.write_scalar(location.ptr, dest)?;\n             }\n \n+            sym::min_align_of_val | sym::size_of_val => {\n+                let place = self.deref_operand(args[0])?;\n+                let (size, align) = self\n+                    .size_and_align_of(place.meta, place.layout)?\n+                    .ok_or_else(|| err_unsup_format!(\"`extern type` does not have known layout\"))?;\n+\n+                let result = match intrinsic_name {\n+                    sym::min_align_of_val => align.bytes(),\n+                    sym::size_of_val => size.bytes(),\n+                    _ => bug!(),\n+                };\n+\n+                self.write_scalar(Scalar::from_machine_usize(result, self), dest)?;\n+            }\n+\n             sym::min_align_of\n             | sym::pref_align_of\n             | sym::needs_drop"}, {"sha": "96a8a8452edb08fb6ccb62dcfdee02d86c3011f2", "filename": "src/test/ui/consts/const-size_of_val-align_of_val-extern-type.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/21867225a74d3b07c2b65e32c67f45197db36896/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of_val-align_of_val-extern-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21867225a74d3b07c2b65e32c67f45197db36896/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of_val-align_of_val-extern-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of_val-align_of_val-extern-type.rs?ref=21867225a74d3b07c2b65e32c67f45197db36896", "patch": "@@ -0,0 +1,14 @@\n+#![feature(extern_types)]\n+#![feature(core_intrinsics)]\n+#![feature(const_size_of_val, const_align_of_val)]\n+\n+use std::intrinsics::{size_of_val, min_align_of_val};\n+\n+extern {\n+    type Opaque;\n+}\n+\n+const _SIZE: usize = unsafe { size_of_val(&4 as *const i32 as *const Opaque) }; //~ ERROR\n+const _ALIGN: usize = unsafe { min_align_of_val(&4 as *const i32 as *const Opaque) }; //~ ERROR\n+\n+fn main() {}"}, {"sha": "d3f1b04d25154141bd863807556139b42d33dfdf", "filename": "src/test/ui/consts/const-size_of_val-align_of_val-extern-type.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/21867225a74d3b07c2b65e32c67f45197db36896/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of_val-align_of_val-extern-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21867225a74d3b07c2b65e32c67f45197db36896/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of_val-align_of_val-extern-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of_val-align_of_val-extern-type.stderr?ref=21867225a74d3b07c2b65e32c67f45197db36896", "patch": "@@ -0,0 +1,20 @@\n+error: any use of this value will cause an error\n+  --> $DIR/const-size_of_val-align_of_val-extern-type.rs:11:31\n+   |\n+LL | const _SIZE: usize = unsafe { size_of_val(&4 as *const i32 as *const Opaque) };\n+   | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                               |\n+   |                               `extern type` does not have known layout\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+\n+error: any use of this value will cause an error\n+  --> $DIR/const-size_of_val-align_of_val-extern-type.rs:12:32\n+   |\n+LL | const _ALIGN: usize = unsafe { min_align_of_val(&4 as *const i32 as *const Opaque) };\n+   | -------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                |\n+   |                                `extern type` does not have known layout\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "e8e6f1d390099a3974db7fd85f12aed64aeaef58", "filename": "src/test/ui/consts/const-size_of_val-align_of_val.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/21867225a74d3b07c2b65e32c67f45197db36896/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of_val-align_of_val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21867225a74d3b07c2b65e32c67f45197db36896/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of_val-align_of_val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of_val-align_of_val.rs?ref=21867225a74d3b07c2b65e32c67f45197db36896", "patch": "@@ -0,0 +1,45 @@\n+// run-pass\n+\n+#![feature(const_size_of_val, const_align_of_val)]\n+\n+use std::mem;\n+\n+struct Foo(u32);\n+\n+#[derive(Clone, Copy)]\n+struct Bar {\n+    _x: u8,\n+    _y: u16,\n+    _z: u8,\n+}\n+\n+union Ugh {\n+    _a: [u8; 3],\n+    _b: Bar,\n+}\n+\n+const FOO: Foo = Foo(4);\n+const BAR: Bar = Bar { _x: 4, _y: 1, _z: 2 };\n+const UGH: Ugh = Ugh { _a: [0; 3] };\n+\n+const SIZE_OF_FOO: usize = mem::size_of_val(&FOO);\n+const SIZE_OF_BAR: usize = mem::size_of_val(&BAR);\n+const SIZE_OF_UGH: usize = mem::size_of_val(&UGH);\n+\n+const ALIGN_OF_FOO: usize = mem::align_of_val(&FOO);\n+const ALIGN_OF_BAR: usize = mem::align_of_val(&BAR);\n+const ALIGN_OF_UGH: usize = mem::align_of_val(&UGH);\n+\n+const SIZE_OF_SLICE: usize = mem::size_of_val(\"foobar\".as_bytes());\n+\n+fn main() {\n+    assert_eq!(SIZE_OF_FOO, mem::size_of::<Foo>());\n+    assert_eq!(SIZE_OF_BAR, mem::size_of::<Bar>());\n+    assert_eq!(SIZE_OF_UGH, mem::size_of::<Ugh>());\n+\n+    assert_eq!(ALIGN_OF_FOO, mem::align_of::<Foo>());\n+    assert_eq!(ALIGN_OF_BAR, mem::align_of::<Bar>());\n+    assert_eq!(ALIGN_OF_UGH, mem::align_of::<Ugh>());\n+\n+    assert_eq!(SIZE_OF_SLICE, \"foobar\".len());\n+}"}]}