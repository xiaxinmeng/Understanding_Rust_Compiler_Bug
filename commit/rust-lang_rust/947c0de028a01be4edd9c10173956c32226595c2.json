{"sha": "947c0de028a01be4edd9c10173956c32226595c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0N2MwZGUwMjhhMDFiZTRlZGQ5YzEwMTczOTU2YzMyMjI2NTk1YzI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2020-11-21T12:06:16Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2021-08-19T21:28:24Z"}, "message": "introduce a Coerce predicate", "tree": {"sha": "5b3fdea05b3540609a2cc0778a819c67d05ab9a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b3fdea05b3540609a2cc0778a819c67d05ab9a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/947c0de028a01be4edd9c10173956c32226595c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/947c0de028a01be4edd9c10173956c32226595c2", "html_url": "https://github.com/rust-lang/rust/commit/947c0de028a01be4edd9c10173956c32226595c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/947c0de028a01be4edd9c10173956c32226595c2/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a8edc0b7607b997dd926b5d882cd39000386cdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a8edc0b7607b997dd926b5d882cd39000386cdc", "html_url": "https://github.com/rust-lang/rust/commit/5a8edc0b7607b997dd926b5d882cd39000386cdc"}], "stats": {"total": 155, "additions": 153, "deletions": 2}, "files": [{"sha": "172eb1f48d7c21688712b5e29032796648907a0a", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/947c0de028a01be4edd9c10173956c32226595c2/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/947c0de028a01be4edd9c10173956c32226595c2/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=947c0de028a01be4edd9c10173956c32226595c2", "patch": "@@ -969,6 +969,35 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         );\n     }\n \n+    /// Processes a `Coerce` predicate from the fulfillment context.\n+    /// This is NOT the preferred way to handle coercion, which is to\n+    /// invoke `FnCtxt::coerce` or a similar method (see `coercion.rs`).\n+    ///\n+    /// This method here is actually a fallback that winds up being\n+    /// invoked when `FnCtxt::coerce` encounters unresolved type variables\n+    /// and records a coercion predicate. Presently, this method is equivalent\n+    /// to `subtype_predicate` -- that is, \"coercing\" `a` to `b` winds up\n+    /// actually requiring `a <: b`. This is of course a valid coercion,\n+    /// but it's not as flexible as `FnCtxt::coerce` would be.\n+    ///\n+    /// (We may refactor this in the future, but there are a number of\n+    /// practical obstacles. Among other things, `FnCtxt::coerce` presently\n+    /// records adjustments that are required on the HIR in order to perform\n+    /// the coercion, and we don't currently have a way to manage that.)\n+    pub fn coerce_predicate(\n+        &self,\n+        cause: &ObligationCause<'tcx>,\n+        param_env: ty::ParamEnv<'tcx>,\n+        predicate: ty::PolyCoercePredicate<'tcx>,\n+    ) -> Option<InferResult<'tcx, ()>> {\n+        let subtype_predicate = predicate.map_bound(|p| ty::SubtypePredicate {\n+            a_is_expected: false, // when coercing from `a` to `b`, `b` is expected\n+            a: p.a,\n+            b: p.b,\n+        });\n+        self.subtype_predicate(cause, param_env, subtype_predicate)\n+    }\n+\n     pub fn subtype_predicate(\n         &self,\n         cause: &ObligationCause<'tcx>,"}, {"sha": "4dd5e8ba545005dfc21113d5f048622f990d1645", "filename": "compiler/rustc_infer/src/infer/outlives/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/947c0de028a01be4edd9c10173956c32226595c2/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/947c0de028a01be4edd9c10173956c32226595c2/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fmod.rs?ref=947c0de028a01be4edd9c10173956c32226595c2", "patch": "@@ -19,6 +19,7 @@ pub fn explicit_outlives_bounds<'tcx>(\n         .filter_map(move |kind| match kind {\n             ty::PredicateKind::Projection(..)\n             | ty::PredicateKind::Trait(..)\n+            | ty::PredicateKind::Coerce(..)\n             | ty::PredicateKind::Subtype(..)\n             | ty::PredicateKind::WellFormed(..)\n             | ty::PredicateKind::ObjectSafe(..)"}, {"sha": "3a25cb66896d510c751911d94efaba2d1ff6cb91", "filename": "compiler/rustc_infer/src/traits/util.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/947c0de028a01be4edd9c10173956c32226595c2/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/947c0de028a01be4edd9c10173956c32226595c2/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs?ref=947c0de028a01be4edd9c10173956c32226595c2", "patch": "@@ -158,6 +158,10 @@ impl Elaborator<'tcx> {\n                 // Currently, we do not \"elaborate\" predicates like `X <: Y`,\n                 // though conceivably we might.\n             }\n+            ty::PredicateKind::Coerce(..) => {\n+                // Currently, we do not \"elaborate\" predicates like `X -> Y`,\n+                // though conceivably we might.\n+            }\n             ty::PredicateKind::Projection(..) => {\n                 // Nothing to elaborate in a projection predicate.\n             }"}, {"sha": "5a72db7752d6338597d354efc687c84d69f1424a", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/947c0de028a01be4edd9c10173956c32226595c2/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/947c0de028a01be4edd9c10173956c32226595c2/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=947c0de028a01be4edd9c10173956c32226595c2", "patch": "@@ -1652,6 +1652,7 @@ impl<'tcx> LateLintPass<'tcx> for TrivialConstraints {\n                     ObjectSafe(..) |\n                     ClosureKind(..) |\n                     Subtype(..) |\n+                    Coerce(..) |\n                     ConstEvaluatable(..) |\n                     ConstEquate(..) |\n                     TypeWellFormedFromEnv(..) => continue,"}, {"sha": "04df706d908423256a82fef9f1d06343b2de35fa", "filename": "compiler/rustc_middle/src/ty/flags.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/947c0de028a01be4edd9c10173956c32226595c2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/947c0de028a01be4edd9c10173956c32226595c2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs?ref=947c0de028a01be4edd9c10173956c32226595c2", "patch": "@@ -231,6 +231,10 @@ impl FlagComputation {\n                 self.add_ty(a);\n                 self.add_ty(b);\n             }\n+            ty::PredicateKind::Coerce(ty::CoercePredicate { a, b }) => {\n+                self.add_ty(a);\n+                self.add_ty(b);\n+            }\n             ty::PredicateKind::Projection(ty::ProjectionPredicate { projection_ty, ty }) => {\n                 self.add_projection_ty(projection_ty);\n                 self.add_ty(ty);"}, {"sha": "9fcf35b7320778bcecdf39f7355ff94656355981", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/947c0de028a01be4edd9c10173956c32226595c2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/947c0de028a01be4edd9c10173956c32226595c2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=947c0de028a01be4edd9c10173956c32226595c2", "patch": "@@ -485,8 +485,22 @@ pub enum PredicateKind<'tcx> {\n     ClosureKind(DefId, SubstsRef<'tcx>, ClosureKind),\n \n     /// `T1 <: T2`\n+    ///\n+    /// This obligation is created most often when we have two\n+    /// unresolved type variables and hence don't have enough\n+    /// information to process the subtyping obligation yet.\n     Subtype(SubtypePredicate<'tcx>),\n \n+    /// `T1` coerced to `T2`\n+    ///\n+    /// Like a subtyping obligation, this is created most often\n+    /// when we have two unresolved type variables and hence\n+    /// don't have enough information to process the coercion\n+    /// obligation yet. At the moment, we actually process coercions\n+    /// very much like subtyping and don't handle the full coercion\n+    /// logic.\n+    Coerce(CoercePredicate<'tcx>),\n+\n     /// Constant initializer must evaluate successfully.\n     ConstEvaluatable(ty::WithOptConstParam<DefId>, SubstsRef<'tcx>),\n \n@@ -655,6 +669,9 @@ pub type TypeOutlivesPredicate<'tcx> = OutlivesPredicate<Ty<'tcx>, ty::Region<'t\n pub type PolyRegionOutlivesPredicate<'tcx> = ty::Binder<'tcx, RegionOutlivesPredicate<'tcx>>;\n pub type PolyTypeOutlivesPredicate<'tcx> = ty::Binder<'tcx, TypeOutlivesPredicate<'tcx>>;\n \n+/// Encodes that `a` must be a subtype of `b`. The `a_is_expected` flag indicates\n+/// whether the `a` type is the type that we should label as \"expected\" when\n+/// presenting user diagnostics.\n #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, TyEncodable, TyDecodable)]\n #[derive(HashStable, TypeFoldable)]\n pub struct SubtypePredicate<'tcx> {\n@@ -664,6 +681,15 @@ pub struct SubtypePredicate<'tcx> {\n }\n pub type PolySubtypePredicate<'tcx> = ty::Binder<'tcx, SubtypePredicate<'tcx>>;\n \n+/// Encodes that we have to coerce *from* the `a` type to the `b` type.\n+#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, TyEncodable, TyDecodable)]\n+#[derive(HashStable, TypeFoldable)]\n+pub struct CoercePredicate<'tcx> {\n+    pub a: Ty<'tcx>,\n+    pub b: Ty<'tcx>,\n+}\n+pub type PolyCoercePredicate<'tcx> = ty::Binder<'tcx, CoercePredicate<'tcx>>;\n+\n /// This kind of predicate has no *direct* correspondent in the\n /// syntax, but it roughly corresponds to the syntactic forms:\n ///\n@@ -806,6 +832,7 @@ impl<'tcx> Predicate<'tcx> {\n             }\n             PredicateKind::Projection(..)\n             | PredicateKind::Subtype(..)\n+            | PredicateKind::Coerce(..)\n             | PredicateKind::RegionOutlives(..)\n             | PredicateKind::WellFormed(..)\n             | PredicateKind::ObjectSafe(..)\n@@ -824,6 +851,7 @@ impl<'tcx> Predicate<'tcx> {\n             PredicateKind::Trait(..)\n             | PredicateKind::Projection(..)\n             | PredicateKind::Subtype(..)\n+            | PredicateKind::Coerce(..)\n             | PredicateKind::RegionOutlives(..)\n             | PredicateKind::WellFormed(..)\n             | PredicateKind::ObjectSafe(..)"}, {"sha": "8558d6bb00e724a79dbf9cde7985a7a3aac5e538", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/947c0de028a01be4edd9c10173956c32226595c2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/947c0de028a01be4edd9c10173956c32226595c2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=947c0de028a01be4edd9c10173956c32226595c2", "patch": "@@ -2236,6 +2236,10 @@ define_print_and_forward_display! {\n         p!(print(self.a), \" <: \", print(self.b))\n     }\n \n+    ty::CoercePredicate<'tcx> {\n+        p!(print(self.a), \" -> \", print(self.b))\n+    }\n+\n     ty::TraitPredicate<'tcx> {\n         p!(print(self.trait_ref.self_ty()), \": \",\n            print(self.trait_ref.print_only_trait_path()))\n@@ -2268,6 +2272,7 @@ define_print_and_forward_display! {\n                 p!(print(data))\n             }\n             ty::PredicateKind::Subtype(predicate) => p!(print(predicate)),\n+            ty::PredicateKind::Coerce(predicate) => p!(print(predicate)),\n             ty::PredicateKind::RegionOutlives(predicate) => p!(print(predicate)),\n             ty::PredicateKind::TypeOutlives(predicate) => p!(print(predicate)),\n             ty::PredicateKind::Projection(predicate) => p!(print(predicate)),"}, {"sha": "a46cac1e7f7f55e55348909df62e8c6716d64dab", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/947c0de028a01be4edd9c10173956c32226595c2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/947c0de028a01be4edd9c10173956c32226595c2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=947c0de028a01be4edd9c10173956c32226595c2", "patch": "@@ -179,6 +179,7 @@ impl fmt::Debug for ty::PredicateKind<'tcx> {\n         match *self {\n             ty::PredicateKind::Trait(ref a) => a.fmt(f),\n             ty::PredicateKind::Subtype(ref pair) => pair.fmt(f),\n+            ty::PredicateKind::Coerce(ref pair) => pair.fmt(f),\n             ty::PredicateKind::RegionOutlives(ref pair) => pair.fmt(f),\n             ty::PredicateKind::TypeOutlives(ref pair) => pair.fmt(f),\n             ty::PredicateKind::Projection(ref pair) => pair.fmt(f),\n@@ -380,6 +381,13 @@ impl<'a, 'tcx> Lift<'tcx> for ty::SubtypePredicate<'a> {\n     }\n }\n \n+impl<'a, 'tcx> Lift<'tcx> for ty::CoercePredicate<'a> {\n+    type Lifted = ty::CoercePredicate<'tcx>;\n+    fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<ty::CoercePredicate<'tcx>> {\n+        tcx.lift((self.a, self.b)).map(|(a, b)| ty::CoercePredicate { a, b })\n+    }\n+}\n+\n impl<'tcx, A: Copy + Lift<'tcx>, B: Copy + Lift<'tcx>> Lift<'tcx> for ty::OutlivesPredicate<A, B> {\n     type Lifted = ty::OutlivesPredicate<A::Lifted, B::Lifted>;\n     fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted> {\n@@ -420,6 +428,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::PredicateKind<'a> {\n         match self {\n             ty::PredicateKind::Trait(data) => tcx.lift(data).map(ty::PredicateKind::Trait),\n             ty::PredicateKind::Subtype(data) => tcx.lift(data).map(ty::PredicateKind::Subtype),\n+            ty::PredicateKind::Coerce(data) => tcx.lift(data).map(ty::PredicateKind::Coerce),\n             ty::PredicateKind::RegionOutlives(data) => {\n                 tcx.lift(data).map(ty::PredicateKind::RegionOutlives)\n             }"}, {"sha": "09e908e675731e5be10295be1dc02e1e36073e0c", "filename": "compiler/rustc_mir/src/transform/check_consts/check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/947c0de028a01be4edd9c10173956c32226595c2/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/947c0de028a01be4edd9c10173956c32226595c2/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=947c0de028a01be4edd9c10173956c32226595c2", "patch": "@@ -420,8 +420,8 @@ impl Checker<'mir, 'tcx> {\n                     ty::PredicateKind::ClosureKind(..) => {\n                         bug!(\"closure kind predicate on function: {:#?}\", predicate)\n                     }\n-                    ty::PredicateKind::Subtype(_) => {\n-                        bug!(\"subtype predicate on function: {:#?}\", predicate)\n+                    ty::PredicateKind::Subtype(_) | ty::PredicateKind::Coerce(_) => {\n+                        bug!(\"subtype/coerce predicate on function: {:#?}\", predicate)\n                     }\n                     ty::PredicateKind::Trait(pred) => {\n                         if Some(pred.def_id()) == tcx.lang_items().sized_trait() {"}, {"sha": "e6686b8cc7070666b89827db9135c443a8968101", "filename": "compiler/rustc_trait_selection/src/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/947c0de028a01be4edd9c10173956c32226595c2/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/947c0de028a01be4edd9c10173956c32226595c2/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs?ref=947c0de028a01be4edd9c10173956c32226595c2", "patch": "@@ -1119,6 +1119,7 @@ crate fn required_region_bounds(\n                 ty::PredicateKind::Projection(..)\n                 | ty::PredicateKind::Trait(..)\n                 | ty::PredicateKind::Subtype(..)\n+                | ty::PredicateKind::Coerce(..)\n                 | ty::PredicateKind::WellFormed(..)\n                 | ty::PredicateKind::ObjectSafe(..)\n                 | ty::PredicateKind::ClosureKind(..)"}, {"sha": "2c09c551b656fac19efc42007ee335fc5f152bb1", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/947c0de028a01be4edd9c10173956c32226595c2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/947c0de028a01be4edd9c10173956c32226595c2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=947c0de028a01be4edd9c10173956c32226595c2", "patch": "@@ -565,6 +565,13 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         span_bug!(span, \"subtype requirement gave wrong error: `{:?}`\", predicate)\n                     }\n \n+                    ty::PredicateKind::Coerce(predicate) => {\n+                        // Errors for Coerce predicates show up as\n+                        // `FulfillmentErrorCode::CodeSubtypeError`,\n+                        // not selection error.\n+                        span_bug!(span, \"coerce requirement gave wrong error: `{:?}`\", predicate)\n+                    }\n+\n                     ty::PredicateKind::RegionOutlives(predicate) => {\n                         let predicate = bound_predicate.rebind(predicate);\n                         let predicate = self.resolve_vars_if_possible(predicate);"}, {"sha": "a2095907c7a2d4399a07edeca6090d06cba48903", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/947c0de028a01be4edd9c10173956c32226595c2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/947c0de028a01be4edd9c10173956c32226595c2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=947c0de028a01be4edd9c10173956c32226595c2", "patch": "@@ -402,6 +402,7 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n                 | ty::PredicateKind::ObjectSafe(_)\n                 | ty::PredicateKind::ClosureKind(..)\n                 | ty::PredicateKind::Subtype(_)\n+                | ty::PredicateKind::Coerce(_)\n                 | ty::PredicateKind::ConstEvaluatable(..)\n                 | ty::PredicateKind::ConstEquate(..) => {\n                     let pred = infcx.replace_bound_vars_with_placeholders(binder);\n@@ -517,6 +518,31 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n                     }\n                 }\n \n+                ty::PredicateKind::Coerce(coerce) => {\n+                    match self.selcx.infcx().coerce_predicate(\n+                        &obligation.cause,\n+                        obligation.param_env,\n+                        Binder::dummy(coerce),\n+                    ) {\n+                        None => {\n+                            // None means that both are unresolved.\n+                            pending_obligation.stalled_on = vec![\n+                                TyOrConstInferVar::maybe_from_ty(coerce.a).unwrap(),\n+                                TyOrConstInferVar::maybe_from_ty(coerce.b).unwrap(),\n+                            ];\n+                            ProcessResult::Unchanged\n+                        }\n+                        Some(Ok(ok)) => ProcessResult::Changed(mk_pending(ok.obligations)),\n+                        Some(Err(err)) => {\n+                            let expected_found = ExpectedFound::new(false, coerce.a, coerce.b);\n+                            ProcessResult::Error(FulfillmentErrorCode::CodeSubtypeError(\n+                                expected_found,\n+                                err,\n+                            ))\n+                        }\n+                    }\n+                }\n+\n                 ty::PredicateKind::ConstEvaluatable(def_id, substs) => {\n                     match const_evaluatable::is_const_evaluatable(\n                         self.selcx.infcx(),"}, {"sha": "02b43de0d1606c0e425106fe1ff66d2294f51774", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/947c0de028a01be4edd9c10173956c32226595c2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/947c0de028a01be4edd9c10173956c32226595c2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=947c0de028a01be4edd9c10173956c32226595c2", "patch": "@@ -308,6 +308,7 @@ fn predicate_references_self(\n         | ty::PredicateKind::RegionOutlives(..)\n         | ty::PredicateKind::ClosureKind(..)\n         | ty::PredicateKind::Subtype(..)\n+        | ty::PredicateKind::Coerce(..)\n         | ty::PredicateKind::ConstEvaluatable(..)\n         | ty::PredicateKind::ConstEquate(..)\n         | ty::PredicateKind::TypeWellFormedFromEnv(..) => None,\n@@ -336,6 +337,7 @@ fn generics_require_sized_self(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n             }\n             ty::PredicateKind::Projection(..)\n             | ty::PredicateKind::Subtype(..)\n+            | ty::PredicateKind::Coerce(..)\n             | ty::PredicateKind::RegionOutlives(..)\n             | ty::PredicateKind::WellFormed(..)\n             | ty::PredicateKind::ObjectSafe(..)"}, {"sha": "c9bcc44fab6347bb80b2d623cb27cfd6364de2b0", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/947c0de028a01be4edd9c10173956c32226595c2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/947c0de028a01be4edd9c10173956c32226595c2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=947c0de028a01be4edd9c10173956c32226595c2", "patch": "@@ -512,6 +512,22 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     }\n                 }\n \n+                ty::PredicateKind::Coerce(p) => {\n+                    let p = bound_predicate.rebind(p);\n+                    // Does this code ever run?\n+                    match self.infcx.coerce_predicate(&obligation.cause, obligation.param_env, p) {\n+                        Some(Ok(InferOk { mut obligations, .. })) => {\n+                            self.add_depth(obligations.iter_mut(), obligation.recursion_depth);\n+                            self.evaluate_predicates_recursively(\n+                                previous_stack,\n+                                obligations.into_iter(),\n+                            )\n+                        }\n+                        Some(Err(_)) => Ok(EvaluatedToErr),\n+                        None => Ok(EvaluatedToAmbig),\n+                    }\n+                }\n+\n                 ty::PredicateKind::WellFormed(arg) => match wf::obligations(\n                     self.infcx,\n                     obligation.param_env,"}, {"sha": "afef784b4c6cce4986254954e84ec281b2e105ea", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/947c0de028a01be4edd9c10173956c32226595c2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/947c0de028a01be4edd9c10173956c32226595c2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=947c0de028a01be4edd9c10173956c32226595c2", "patch": "@@ -128,6 +128,10 @@ pub fn predicate_obligations<'a, 'tcx>(\n             wf.compute(a.into());\n             wf.compute(b.into());\n         }\n+        ty::PredicateKind::Coerce(ty::CoercePredicate { a, b }) => {\n+            wf.compute(a.into());\n+            wf.compute(b.into());\n+        }\n         ty::PredicateKind::ConstEvaluatable(def, substs) => {\n             let obligations = wf.nominal_obligations(def.did, substs);\n             wf.out.extend(obligations);"}, {"sha": "330fd497fa1f83eea5105c4cd705dea4ed38626c", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/947c0de028a01be4edd9c10173956c32226595c2/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/947c0de028a01be4edd9c10173956c32226595c2/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=947c0de028a01be4edd9c10173956c32226595c2", "patch": "@@ -109,6 +109,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::InEnvironment<chalk_ir::Goal<RustInterner<'\n                 | ty::PredicateKind::ObjectSafe(..)\n                 | ty::PredicateKind::ClosureKind(..)\n                 | ty::PredicateKind::Subtype(..)\n+                | ty::PredicateKind::Coerce(..)\n                 | ty::PredicateKind::ConstEvaluatable(..)\n                 | ty::PredicateKind::ConstEquate(..) => bug!(\"unexpected predicate {}\", predicate),\n             };\n@@ -193,6 +194,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::GoalData<RustInterner<'tcx>>> for ty::Predi\n             // some of these in terms of chalk operations.\n             ty::PredicateKind::ClosureKind(..)\n             | ty::PredicateKind::Subtype(..)\n+            | ty::PredicateKind::Coerce(..)\n             | ty::PredicateKind::ConstEvaluatable(..)\n             | ty::PredicateKind::ConstEquate(..) => {\n                 chalk_ir::GoalData::All(chalk_ir::Goals::empty(interner))\n@@ -592,6 +594,7 @@ impl<'tcx> LowerInto<'tcx, Option<chalk_ir::QuantifiedWhereClause<RustInterner<'\n             ty::PredicateKind::ObjectSafe(..)\n             | ty::PredicateKind::ClosureKind(..)\n             | ty::PredicateKind::Subtype(..)\n+            | ty::PredicateKind::Coerce(..)\n             | ty::PredicateKind::ConstEvaluatable(..)\n             | ty::PredicateKind::ConstEquate(..)\n             | ty::PredicateKind::TypeWellFormedFromEnv(..) => {\n@@ -719,6 +722,7 @@ impl<'tcx> LowerInto<'tcx, Option<chalk_solve::rust_ir::QuantifiedInlineBound<Ru\n             | ty::PredicateKind::ObjectSafe(..)\n             | ty::PredicateKind::ClosureKind(..)\n             | ty::PredicateKind::Subtype(..)\n+            | ty::PredicateKind::Coerce(..)\n             | ty::PredicateKind::ConstEvaluatable(..)\n             | ty::PredicateKind::ConstEquate(..)\n             | ty::PredicateKind::TypeWellFormedFromEnv(..) => {"}, {"sha": "1d10d06849062f4e307434c41a59d0a7c1eb0f83", "filename": "compiler/rustc_traits/src/implied_outlives_bounds.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/947c0de028a01be4edd9c10173956c32226595c2/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/947c0de028a01be4edd9c10173956c32226595c2/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs?ref=947c0de028a01be4edd9c10173956c32226595c2", "patch": "@@ -99,6 +99,7 @@ fn compute_implied_outlives_bounds<'tcx>(\n                 Some(pred) => match pred {\n                     ty::PredicateKind::Trait(..)\n                     | ty::PredicateKind::Subtype(..)\n+                    | ty::PredicateKind::Coerce(..)\n                     | ty::PredicateKind::Projection(..)\n                     | ty::PredicateKind::ClosureKind(..)\n                     | ty::PredicateKind::ObjectSafe(..)"}, {"sha": "61ab5e28b6796151eabdf015a72abfc247aa0a41", "filename": "compiler/rustc_traits/src/normalize_erasing_regions.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/947c0de028a01be4edd9c10173956c32226595c2/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/947c0de028a01be4edd9c10173956c32226595c2/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs?ref=947c0de028a01be4edd9c10173956c32226595c2", "patch": "@@ -65,6 +65,7 @@ fn not_outlives_predicate(p: &ty::Predicate<'tcx>) -> bool {\n         | ty::PredicateKind::ObjectSafe(..)\n         | ty::PredicateKind::ClosureKind(..)\n         | ty::PredicateKind::Subtype(..)\n+        | ty::PredicateKind::Coerce(..)\n         | ty::PredicateKind::ConstEvaluatable(..)\n         | ty::PredicateKind::ConstEquate(..)\n         | ty::PredicateKind::TypeWellFormedFromEnv(..) => true,"}, {"sha": "a9b1fb790edeef216ff421dc9753e4bbaec10a9d", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/947c0de028a01be4edd9c10173956c32226595c2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/947c0de028a01be4edd9c10173956c32226595c2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=947c0de028a01be4edd9c10173956c32226595c2", "patch": "@@ -812,6 +812,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         Some((bound_predicate.rebind(data).to_poly_trait_ref(), obligation))\n                     }\n                     ty::PredicateKind::Subtype(..) => None,\n+                    ty::PredicateKind::Coerce(..) => None,\n                     ty::PredicateKind::RegionOutlives(..) => None,\n                     ty::PredicateKind::TypeOutlives(..) => None,\n                     ty::PredicateKind::WellFormed(..) => None,"}, {"sha": "486e4d15d6580de4f251e985fe46496b16072965", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/947c0de028a01be4edd9c10173956c32226595c2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/947c0de028a01be4edd9c10173956c32226595c2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=947c0de028a01be4edd9c10173956c32226595c2", "patch": "@@ -841,6 +841,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                     }\n                 }\n                 ty::PredicateKind::Subtype(..)\n+                | ty::PredicateKind::Coerce(..)\n                 | ty::PredicateKind::Projection(..)\n                 | ty::PredicateKind::RegionOutlives(..)\n                 | ty::PredicateKind::WellFormed(..)"}, {"sha": "e148370a03610f3389e6716b7d7b67e5e32ea1a3", "filename": "compiler/rustc_typeck/src/impl_wf_check/min_specialization.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/947c0de028a01be4edd9c10173956c32226595c2/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/947c0de028a01be4edd9c10173956c32226595c2/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs?ref=947c0de028a01be4edd9c10173956c32226595c2", "patch": "@@ -407,6 +407,7 @@ fn trait_predicate_kind<'tcx>(\n         | ty::PredicateKind::Projection(_)\n         | ty::PredicateKind::WellFormed(_)\n         | ty::PredicateKind::Subtype(_)\n+        | ty::PredicateKind::Coerce(_)\n         | ty::PredicateKind::ObjectSafe(_)\n         | ty::PredicateKind::ClosureKind(..)\n         | ty::PredicateKind::ConstEvaluatable(..)"}, {"sha": "2ac1a18cffaf1caa6455fd2e45fbf2b4357ff4c2", "filename": "compiler/rustc_typeck/src/outlives/explicit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/947c0de028a01be4edd9c10173956c32226595c2/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fexplicit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/947c0de028a01be4edd9c10173956c32226595c2/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fexplicit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fexplicit.rs?ref=947c0de028a01be4edd9c10173956c32226595c2", "patch": "@@ -56,6 +56,7 @@ impl<'tcx> ExplicitPredicatesMap<'tcx> {\n                     | ty::PredicateKind::ObjectSafe(..)\n                     | ty::PredicateKind::ClosureKind(..)\n                     | ty::PredicateKind::Subtype(..)\n+                    | ty::PredicateKind::Coerce(..)\n                     | ty::PredicateKind::ConstEvaluatable(..)\n                     | ty::PredicateKind::ConstEquate(..)\n                     | ty::PredicateKind::TypeWellFormedFromEnv(..) => (),"}, {"sha": "b6ff3890c584edf4268078af879d13d6d75627d7", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/947c0de028a01be4edd9c10173956c32226595c2/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/947c0de028a01be4edd9c10173956c32226595c2/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=947c0de028a01be4edd9c10173956c32226595c2", "patch": "@@ -332,6 +332,7 @@ impl<'a> Clean<Option<WherePredicate>> for ty::Predicate<'a> {\n             ty::PredicateKind::ConstEvaluatable(..) => None,\n \n             ty::PredicateKind::Subtype(..)\n+            | ty::PredicateKind::Coerce(..)\n             | ty::PredicateKind::WellFormed(..)\n             | ty::PredicateKind::ObjectSafe(..)\n             | ty::PredicateKind::ClosureKind(..)"}, {"sha": "8e544f580665ee23d7e3d6a1322aa32b7f0f4026", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/947c0de028a01be4edd9c10173956c32226595c2/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/947c0de028a01be4edd9c10173956c32226595c2/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=947c0de028a01be4edd9c10173956c32226595c2", "patch": "@@ -36,6 +36,9 @@ pub fn is_min_const_fn(tcx: TyCtxt<'tcx>, body: &'a Body<'tcx>, msrv: Option<&Ru\n                 ty::PredicateKind::ObjectSafe(_) => panic!(\"object safe predicate on function: {:#?}\", predicate),\n                 ty::PredicateKind::ClosureKind(..) => panic!(\"closure kind predicate on function: {:#?}\", predicate),\n                 ty::PredicateKind::Subtype(_) => panic!(\"subtype predicate on function: {:#?}\", predicate),\n+                ty::PredicateKind::Coerce(_) => {\n+                    panic!(\"coerce predicate on function: {:#?}\", predicate)\n+                },\n                 ty::PredicateKind::Trait(pred) => {\n                     if Some(pred.def_id()) == tcx.lang_items().sized_trait() {\n                         continue;"}]}