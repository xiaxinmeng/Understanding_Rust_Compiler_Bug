{"sha": "66f38075aff7d168795544638893d87217defe64", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2ZjM4MDc1YWZmN2QxNjg3OTU1NDQ2Mzg4OTNkODcyMTdkZWZlNjQ=", "commit": {"author": {"name": "Ian Jackson", "email": "ijackson@chiark.greenend.org.uk", "date": "2021-06-01T15:47:26Z"}, "committer": {"name": "Ian Jackson", "email": "ijackson@chiark.greenend.org.uk", "date": "2021-07-29T14:23:32Z"}, "message": "BufWriter: rename `into_parts` from `into_raw_parts`\n\nI looked in stdlib and as @BurntSushi thought, `raw` is generally\nused for raw pointers, or other hazardous kinds of thing.  stdlib does\nnot have `into_parts` apart from the one I added to `IntoInnerError`.\n\nI did an ad-hoc search of the rustdocs for my current game project\nOtter, which includes quite a large number of dependencies.\n`into_parts` seems heavily used for things quite like this.\n\nSo change this name.\n\nSuggested-by: Andrew Gallant <jamslam@gmail.com>\nSigned-off-by: Ian Jackson <ijackson@chiark.greenend.org.uk>", "tree": {"sha": "09db5e6f321eb9a1564b9eb74bdf0aa29bd554e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09db5e6f321eb9a1564b9eb74bdf0aa29bd554e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66f38075aff7d168795544638893d87217defe64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66f38075aff7d168795544638893d87217defe64", "html_url": "https://github.com/rust-lang/rust/commit/66f38075aff7d168795544638893d87217defe64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66f38075aff7d168795544638893d87217defe64/comments", "author": {"login": "ijackson", "id": 2090772, "node_id": "MDQ6VXNlcjIwOTA3NzI=", "avatar_url": "https://avatars.githubusercontent.com/u/2090772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ijackson", "html_url": "https://github.com/ijackson", "followers_url": "https://api.github.com/users/ijackson/followers", "following_url": "https://api.github.com/users/ijackson/following{/other_user}", "gists_url": "https://api.github.com/users/ijackson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ijackson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ijackson/subscriptions", "organizations_url": "https://api.github.com/users/ijackson/orgs", "repos_url": "https://api.github.com/users/ijackson/repos", "events_url": "https://api.github.com/users/ijackson/events{/privacy}", "received_events_url": "https://api.github.com/users/ijackson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ijackson", "id": 2090772, "node_id": "MDQ6VXNlcjIwOTA3NzI=", "avatar_url": "https://avatars.githubusercontent.com/u/2090772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ijackson", "html_url": "https://github.com/ijackson", "followers_url": "https://api.github.com/users/ijackson/followers", "following_url": "https://api.github.com/users/ijackson/following{/other_user}", "gists_url": "https://api.github.com/users/ijackson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ijackson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ijackson/subscriptions", "organizations_url": "https://api.github.com/users/ijackson/orgs", "repos_url": "https://api.github.com/users/ijackson/repos", "events_url": "https://api.github.com/users/ijackson/events{/privacy}", "received_events_url": "https://api.github.com/users/ijackson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbba940daf73abf9dc26e1f270bd1095aea7b9a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbba940daf73abf9dc26e1f270bd1095aea7b9a3", "html_url": "https://github.com/rust-lang/rust/commit/cbba940daf73abf9dc26e1f270bd1095aea7b9a3"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "88eec8dff9ecc05bb96be9b136a3141ec188cf22", "filename": "library/std/src/io/buffered/bufwriter.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/66f38075aff7d168795544638893d87217defe64/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufwriter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66f38075aff7d168795544638893d87217defe64/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufwriter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufwriter.rs?ref=66f38075aff7d168795544638893d87217defe64", "patch": "@@ -307,7 +307,7 @@ impl<W: Write> BufWriter<W> {\n     pub fn into_inner(mut self) -> Result<W, IntoInnerError<BufWriter<W>>> {\n         match self.flush_buf() {\n             Err(e) => Err(IntoInnerError::new(self, e)),\n-            Ok(()) => Ok(self.into_raw_parts().0),\n+            Ok(()) => Ok(self.into_parts().0),\n         }\n     }\n \n@@ -318,7 +318,7 @@ impl<W: Write> BufWriter<W> {\n     /// In this case, we return `WriterPanicked` for the buffered data (from which the buffer\n     /// contents can still be recovered).\n     ///\n-    /// `into_raw_parts` makes no attempt to flush data and cannot fail.\n+    /// `into_parts` makes no attempt to flush data and cannot fail.\n     ///\n     /// # Examples\n     ///\n@@ -330,12 +330,12 @@ impl<W: Write> BufWriter<W> {\n     /// let mut stream = BufWriter::new(buffer.as_mut());\n     /// write!(stream, \"too much data\").unwrap();\n     /// stream.flush().expect_err(\"it doesn't fit\");\n-    /// let (recovered_writer, buffered_data) = stream.into_raw_parts();\n+    /// let (recovered_writer, buffered_data) = stream.into_parts();\n     /// assert_eq!(recovered_writer.len(), 0);\n     /// assert_eq!(&buffered_data.unwrap(), b\"ata\");\n     /// ```\n     #[unstable(feature = \"bufwriter_into_raw_parts\", issue = \"80690\")]\n-    pub fn into_raw_parts(mut self) -> (W, Result<Vec<u8>, WriterPanicked>) {\n+    pub fn into_parts(mut self) -> (W, Result<Vec<u8>, WriterPanicked>) {\n         let buf = mem::take(&mut self.buf);\n         let buf = if !self.panicked { Ok(buf) } else { Err(WriterPanicked { buf }) };\n \n@@ -445,7 +445,7 @@ impl<W: Write> BufWriter<W> {\n }\n \n #[unstable(feature = \"bufwriter_into_raw_parts\", issue = \"80690\")]\n-/// Error returned for the buffered data from `BufWriter::into_raw_parts`, when the underlying\n+/// Error returned for the buffered data from `BufWriter::into_parts`, when the underlying\n /// writer has previously panicked.  Contains the (possibly partly written) buffered data.\n ///\n /// # Example\n@@ -467,7 +467,7 @@ impl<W: Write> BufWriter<W> {\n ///     stream.flush().unwrap()\n /// }));\n /// assert!(result.is_err());\n-/// let (recovered_writer, buffered_data) = stream.into_raw_parts();\n+/// let (recovered_writer, buffered_data) = stream.into_parts();\n /// assert!(matches!(recovered_writer, PanickingWriter));\n /// assert_eq!(buffered_data.unwrap_err().into_inner(), b\"some data\");\n /// ```"}]}