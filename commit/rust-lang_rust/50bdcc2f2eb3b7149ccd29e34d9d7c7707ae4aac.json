{"sha": "50bdcc2f2eb3b7149ccd29e34d9d7c7707ae4aac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwYmRjYzJmMmViM2I3MTQ5Y2NkMjllMzRkOWQ3Yzc3MDdhZTRhYWM=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-08-24T02:48:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-24T02:48:41Z"}, "message": "Rollup merge of #75819 - LeSeulArtichaut:core-intra-docs-2, r=jyn514\n\nUse intra-doc-links in `core::{char, macros, fmt}`\n\nHelps with #75080.\nr? @jyn514", "tree": {"sha": "b7c53e04d6faccd4acf546ef39032a3919d4af7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7c53e04d6faccd4acf546ef39032a3919d4af7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50bdcc2f2eb3b7149ccd29e34d9d7c7707ae4aac", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfQyqJCRBK7hj4Ov3rIwAAdHIIAAAh/mM4aSQSHUKcSwRyB/Re\nhTu66mXoypUjrMauTbos2/q+FCAT5u4+zQTwD6i5H2uPaekabt9X2qUapz/ims11\nQM8AO0cLd4mQ2F9yc0mhVjDY3Sx+cUH/8yfyqIyLVfJaAH9Dfx2ruIta1KjsBcSB\nD5bOA4ORkYE8BYkQTewaGtSRP9D3/a9cDzTrm7KnXZ9mE7doXYi3DKbxU7sujy+S\n4380ZI27pnXivIYZnKi5XgofIwe+sGin3i+g1EIH+r/d1kYz6UCrFrxlpp2sWtxs\n51Y/7GCTcW3jtJPnqX4vNmOPsKe39H5crdx7H56ZVODlCbZmXNcB04nz4uHoELg=\n=weFY\n-----END PGP SIGNATURE-----\n", "payload": "tree b7c53e04d6faccd4acf546ef39032a3919d4af7f\nparent 8fdce9bbb9eb25defd9429cc5122fe6eb59f5ffd\nparent d36e3e23a80f039ee98117ebba0bb2ea6e34f0c1\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1598237321 +0900\ncommitter GitHub <noreply@github.com> 1598237321 +0900\n\nRollup merge of #75819 - LeSeulArtichaut:core-intra-docs-2, r=jyn514\n\nUse intra-doc-links in `core::{char, macros, fmt}`\n\nHelps with #75080.\nr? @jyn514\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50bdcc2f2eb3b7149ccd29e34d9d7c7707ae4aac", "html_url": "https://github.com/rust-lang/rust/commit/50bdcc2f2eb3b7149ccd29e34d9d7c7707ae4aac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50bdcc2f2eb3b7149ccd29e34d9d7c7707ae4aac/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fdce9bbb9eb25defd9429cc5122fe6eb59f5ffd", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fdce9bbb9eb25defd9429cc5122fe6eb59f5ffd", "html_url": "https://github.com/rust-lang/rust/commit/8fdce9bbb9eb25defd9429cc5122fe6eb59f5ffd"}, {"sha": "d36e3e23a80f039ee98117ebba0bb2ea6e34f0c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/d36e3e23a80f039ee98117ebba0bb2ea6e34f0c1", "html_url": "https://github.com/rust-lang/rust/commit/d36e3e23a80f039ee98117ebba0bb2ea6e34f0c1"}], "stats": {"total": 144, "additions": 30, "deletions": 114}, "files": [{"sha": "7a68de5e6afb8c8cc02476cbb0105ee93ef9afd2", "filename": "library/core/src/char/mod.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/50bdcc2f2eb3b7149ccd29e34d9d7c7707ae4aac/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50bdcc2f2eb3b7149ccd29e34d9d7c7707ae4aac/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs?ref=50bdcc2f2eb3b7149ccd29e34d9d7c7707ae4aac", "patch": "@@ -94,7 +94,6 @@ const MAX_THREE_B: u32 = 0x10000;\n /// Point], but only ones within a certain range. `MAX` is the highest valid\n /// code point that's a valid [Unicode Scalar Value].\n ///\n-/// [`char`]: ../../std/primitive.char.html\n /// [Unicode Scalar Value]: http://www.unicode.org/glossary/#unicode_scalar_value\n /// [Code Point]: http://www.unicode.org/glossary/#code_point\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -114,8 +113,7 @@ pub const REPLACEMENT_CHARACTER: char = char::REPLACEMENT_CHARACTER;\n /// This `struct` is created by the [`escape_unicode`] method on [`char`]. See\n /// its documentation for more.\n ///\n-/// [`escape_unicode`]: ../../std/primitive.char.html#method.escape_unicode\n-/// [`char`]: ../../std/primitive.char.html\n+/// [`escape_unicode`]: char::escape_unicode\n #[derive(Clone, Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct EscapeUnicode {\n@@ -236,8 +234,7 @@ impl fmt::Display for EscapeUnicode {\n /// This `struct` is created by the [`escape_default`] method on [`char`]. See\n /// its documentation for more.\n ///\n-/// [`escape_default`]: ../../std/primitive.char.html#method.escape_default\n-/// [`char`]: ../../std/primitive.char.html\n+/// [`escape_default`]: char::escape_default\n #[derive(Clone, Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct EscapeDefault {\n@@ -345,8 +342,7 @@ impl fmt::Display for EscapeDefault {\n /// This `struct` is created by the [`escape_debug`] method on [`char`]. See its\n /// documentation for more.\n ///\n-/// [`escape_debug`]: ../../std/primitive.char.html#method.escape_debug\n-/// [`char`]: ../../std/primitive.char.html\n+/// [`escape_debug`]: char::escape_debug\n #[stable(feature = \"char_escape_debug\", since = \"1.20.0\")]\n #[derive(Clone, Debug)]\n pub struct EscapeDebug(EscapeDefault);\n@@ -380,8 +376,7 @@ impl fmt::Display for EscapeDebug {\n /// This `struct` is created by the [`to_lowercase`] method on [`char`]. See\n /// its documentation for more.\n ///\n-/// [`to_lowercase`]: ../../std/primitive.char.html#method.to_lowercase\n-/// [`char`]: ../../std/primitive.char.html\n+/// [`to_lowercase`]: char::to_lowercase\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Debug, Clone)]\n pub struct ToLowercase(CaseMappingIter);\n@@ -408,8 +403,7 @@ impl ExactSizeIterator for ToLowercase {}\n /// This `struct` is created by the [`to_uppercase`] method on [`char`]. See\n /// its documentation for more.\n ///\n-/// [`to_uppercase`]: ../../std/primitive.char.html#method.to_uppercase\n-/// [`char`]: ../../std/primitive.char.html\n+/// [`to_uppercase`]: char::to_uppercase\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Debug, Clone)]\n pub struct ToUppercase(CaseMappingIter);"}, {"sha": "52f73c03e02d923c201141da94238f8d379156fa", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 14, "deletions": 50, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/50bdcc2f2eb3b7149ccd29e34d9d7c7707ae4aac/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50bdcc2f2eb3b7149ccd29e34d9d7c7707ae4aac/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=50bdcc2f2eb3b7149ccd29e34d9d7c7707ae4aac", "patch": "@@ -117,8 +117,6 @@ pub trait Write {\n     ///\n     /// This function will return an instance of [`Error`] on error.\n     ///\n-    /// [`Error`]: struct.Error.html\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -146,9 +144,6 @@ pub trait Write {\n     ///\n     /// This function will return an instance of [`Error`] on error.\n     ///\n-    /// [`char`]: ../../std/primitive.char.html\n-    /// [`Error`]: struct.Error.html\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -218,9 +213,6 @@ impl<W: Write + ?Sized> Write for &mut W {\n /// To interact with a `Formatter`, you'll call various methods to change the\n /// various options related to formatting. For examples, please see the\n /// documentation of the methods defined on `Formatter` below.\n-///\n-/// [`Debug`]: trait.Debug.html\n-/// [`Display`]: trait.Display.html\n #[allow(missing_debug_implementations)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Formatter<'a> {\n@@ -378,7 +370,7 @@ impl<'a> Arguments<'a> {\n ///\n /// The [`format_args!`] macro will safely create an instance of this structure.\n /// The macro validates the format string at compile-time so usage of the\n-/// [`write`] and [`format`] functions can be safely performed.\n+/// [`write()`] and [`format()`] functions can be safely performed.\n ///\n /// You can use the `Arguments<'a>` that [`format_args!`] returns in `Debug`\n /// and `Display` contexts as seen below. The example also shows that `Debug`\n@@ -392,9 +384,7 @@ impl<'a> Arguments<'a> {\n /// assert_eq!(display, debug);\n /// ```\n ///\n-/// [`format_args!`]: ../../std/macro.format_args.html\n-/// [`format`]: ../../std/fmt/fn.format.html\n-/// [`write`]: ../../std/fmt/fn.write.html\n+/// [`format()`]: ../../std/fmt/fn.format.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Copy, Clone)]\n pub struct Arguments<'a> {\n@@ -472,9 +462,7 @@ impl Display for Arguments<'_> {\n ///\n /// When used with the alternate format specifier `#?`, the output is pretty-printed.\n ///\n-/// For more information on formatters, see [the module-level documentation][module].\n-///\n-/// [module]: ../../std/fmt/index.html\n+/// For more information on formatters, see [the module-level documentation][self].\n ///\n /// This trait can be used with `#[derive]` if all fields implement `Debug`. When\n /// `derive`d for structs, it will use the name of the `struct`, then `{`, then a\n@@ -535,8 +523,7 @@ impl Display for Arguments<'_> {\n /// `Debug` implementations using either `derive` or the debug builder API\n /// on [`Formatter`] support pretty-printing using the alternate flag: `{:#?}`.\n ///\n-/// [`debug_struct`]: ../../std/fmt/struct.Formatter.html#method.debug_struct\n-/// [`Formatter`]: ../../std/fmt/struct.Formatter.html\n+/// [`debug_struct`]: Formatter::debug_struct\n ///\n /// Pretty-printing with `#?`:\n ///\n@@ -618,14 +605,10 @@ pub use macros::Debug;\n \n /// Format trait for an empty format, `{}`.\n ///\n-/// `Display` is similar to [`Debug`][debug], but `Display` is for user-facing\n+/// `Display` is similar to [`Debug`], but `Display` is for user-facing\n /// output, and so cannot be derived.\n ///\n-/// [debug]: trait.Debug.html\n-///\n-/// For more information on formatters, see [the module-level documentation][module].\n-///\n-/// [module]: ../../std/fmt/index.html\n+/// For more information on formatters, see [the module-level documentation][self].\n ///\n /// # Examples\n ///\n@@ -697,9 +680,7 @@ pub trait Display {\n ///\n /// The alternate flag, `#`, adds a `0o` in front of the output.\n ///\n-/// For more information on formatters, see [the module-level documentation][module].\n-///\n-/// [module]: ../../std/fmt/index.html\n+/// For more information on formatters, see [the module-level documentation][self].\n ///\n /// # Examples\n ///\n@@ -751,7 +732,7 @@ pub trait Octal {\n ///\n /// The alternate flag, `#`, adds a `0b` in front of the output.\n ///\n-/// For more information on formatters, see [the module-level documentation][module].\n+/// For more information on formatters, see [the module-level documentation][self].\n ///\n /// # Examples\n ///\n@@ -790,12 +771,6 @@ pub trait Octal {\n ///     \"l as binary is: 0b000000000000000000000001101011\"\n /// );\n /// ```\n-///\n-/// [module]: ../../std/fmt/index.html\n-/// [`i8`]: ../../std/primitive.i8.html\n-/// [`i128`]: ../../std/primitive.i128.html\n-/// [`isize`]: ../../std/primitive.isize.html\n-/// [`i32`]: ../../std/primitive.i32.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Binary {\n     /// Formats the value using the given formatter.\n@@ -813,9 +788,7 @@ pub trait Binary {\n ///\n /// The alternate flag, `#`, adds a `0x` in front of the output.\n ///\n-/// For more information on formatters, see [the module-level documentation][module].\n-///\n-/// [module]: ../../std/fmt/index.html\n+/// For more information on formatters, see [the module-level documentation][self].\n ///\n /// # Examples\n ///\n@@ -868,9 +841,7 @@ pub trait LowerHex {\n ///\n /// The alternate flag, `#`, adds a `0x` in front of the output.\n ///\n-/// For more information on formatters, see [the module-level documentation][module].\n-///\n-/// [module]: ../../std/fmt/index.html\n+/// For more information on formatters, see [the module-level documentation][self].\n ///\n /// # Examples\n ///\n@@ -918,9 +889,7 @@ pub trait UpperHex {\n /// The `Pointer` trait should format its output as a memory location. This is commonly presented\n /// as hexadecimal.\n ///\n-/// For more information on formatters, see [the module-level documentation][module].\n-///\n-/// [module]: ../../std/fmt/index.html\n+/// For more information on formatters, see [the module-level documentation][self].\n ///\n /// # Examples\n ///\n@@ -967,9 +936,7 @@ pub trait Pointer {\n ///\n /// The `LowerExp` trait should format its output in scientific notation with a lower-case `e`.\n ///\n-/// For more information on formatters, see [the module-level documentation][module].\n-///\n-/// [module]: ../../std/fmt/index.html\n+/// For more information on formatters, see [the module-level documentation][self].\n ///\n /// # Examples\n ///\n@@ -1018,9 +985,7 @@ pub trait LowerExp {\n ///\n /// The `UpperExp` trait should format its output in scientific notation with an upper-case `E`.\n ///\n-/// For more information on formatters, see [the module-level documentation][module].\n-///\n-/// [module]: ../../std/fmt/index.html\n+/// For more information on formatters, see [the module-level documentation][self].\n ///\n /// # Examples\n ///\n@@ -1812,8 +1777,7 @@ impl<'a> Formatter<'a> {\n     /// Creates a [`DebugStruct`] builder designed to assist with creation of\n     /// [`fmt::Debug`] implementations for structs.\n     ///\n-    /// [`DebugStruct`]: ../../std/fmt/struct.DebugStruct.html\n-    /// [`fmt::Debug`]: ../../std/fmt/trait.Debug.html\n+    /// [`fmt::Debug`]: self::Debug\n     ///\n     /// # Examples\n     ///"}, {"sha": "d26f2124f15fd46ccb83d054919f83e02d709bc8", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 11, "deletions": 53, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/50bdcc2f2eb3b7149ccd29e34d9d7c7707ae4aac/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50bdcc2f2eb3b7149ccd29e34d9d7c7707ae4aac/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=50bdcc2f2eb3b7149ccd29e34d9d7c7707ae4aac", "patch": "@@ -28,9 +28,6 @@ macro_rules! panic {\n /// Like [`assert!`], this macro has a second form, where a custom\n /// panic message can be provided.\n ///\n-/// [`PartialEq`]: cmp/trait.PartialEq.html\n-/// [`assert!`]: macro.assert.html\n-///\n /// # Examples\n ///\n /// ```\n@@ -85,9 +82,6 @@ macro_rules! assert_eq {\n /// Like [`assert!`], this macro has a second form, where a custom\n /// panic message can be provided.\n ///\n-/// [`PartialEq`]: cmp/trait.PartialEq.html\n-/// [`assert!`]: macro.assert.html\n-///\n /// # Examples\n ///\n /// ```\n@@ -158,9 +152,6 @@ macro_rules! assert_ne {\n /// with `debug_assert!` is thus only encouraged after thorough profiling, and\n /// more importantly, only in safe code!\n ///\n-/// [`panic!`]: macro.panic.html\n-/// [`assert!`]: macro.assert.html\n-///\n /// # Examples\n ///\n /// ```\n@@ -196,8 +187,6 @@ macro_rules! debug_assert {\n /// expensive to be present in a release build but may be helpful during\n /// development. The result of expanding `debug_assert_eq!` is always type checked.\n ///\n-/// [`assert_eq!`]: ../std/macro.assert_eq.html\n-///\n /// # Examples\n ///\n /// ```\n@@ -223,8 +212,6 @@ macro_rules! debug_assert_eq {\n /// expensive to be present in a release build but may be helpful during\n /// development. The result of expanding `debug_assert_ne!` is always type checked.\n ///\n-/// [`assert_ne!`]: ../std/macro.assert_ne.html\n-///\n /// # Examples\n ///\n /// ```\n@@ -282,8 +269,6 @@ macro_rules! matches {\n /// Because of the early return, `try!` can only be used in functions that\n /// return [`Result`].\n ///\n-/// [`Result`]: ../std/result/enum.Result.html\n-///\n /// # Examples\n ///\n /// ```\n@@ -354,10 +339,10 @@ macro_rules! r#try {\n ///\n /// See [`std::fmt`] for more information on the format string syntax.\n ///\n-/// [`std::fmt`]: ../std/fmt/index.html\n-/// [`std::fmt::Write`]: ../std/fmt/trait.Write.html\n+/// [`std::fmt`]: crate::fmt\n+/// [`std::fmt::Write`]: crate::fmt::Write\n /// [`std::io::Write`]: ../std/io/trait.Write.html\n-/// [`std::fmt::Result`]: ../std/fmt/type.Result.html\n+/// [`std::fmt::Result`]: crate::fmt::Result\n /// [`io::Result`]: ../std/io/type.Result.html\n ///\n /// # Examples\n@@ -426,9 +411,7 @@ macro_rules! write {\n /// For more information, see [`write!`]. For information on the format string syntax, see\n /// [`std::fmt`].\n ///\n-/// [`write!`]: macro.write.html\n-/// [`std::fmt`]: ../std/fmt/index.html\n-///\n+/// [`std::fmt`]: crate::fmt\n ///\n /// # Examples\n ///\n@@ -494,16 +477,12 @@ macro_rules! writeln {\n /// The unsafe counterpart of this macro is the [`unreachable_unchecked`] function, which\n /// will cause undefined behavior if the code is reached.\n ///\n-/// [`panic!`]: ../std/macro.panic.html\n-/// [`unreachable_unchecked`]: ../std/hint/fn.unreachable_unchecked.html\n-/// [`std::hint`]: ../std/hint/index.html\n+/// [`unreachable_unchecked`]: crate::hint::unreachable_unchecked\n ///\n /// # Panics\n ///\n /// This will always [`panic!`]\n ///\n-/// [`panic!`]: ../std/macro.panic.html\n-///\n /// # Examples\n ///\n /// Match arms:\n@@ -637,8 +616,6 @@ macro_rules! unimplemented {\n /// implemented\", `unimplemented!` makes no such claims. Its message is \"not implemented\".\n /// Also some IDEs will mark `todo!`s.\n ///\n-/// [`unimplemented!`]: macro.unimplemented.html\n-///\n /// # Panics\n ///\n /// This will always [panic!](macro.panic.html)\n@@ -730,8 +707,6 @@ pub(crate) mod builtin {\n     /// #[cfg(not(any(feature = \"foo\", feature = \"bar\")))]\n     /// compile_error!(\"Either feature \\\"foo\\\" or \\\"bar\\\" must be enabled for this crate.\");\n     /// ```\n-    ///\n-    /// [`panic!`]: ../std/macro.panic.html\n     #[stable(feature = \"compile_error_macro\", since = \"1.20.0\")]\n     #[rustc_builtin_macro]\n     #[macro_export]\n@@ -769,12 +744,11 @@ pub(crate) mod builtin {\n     ///\n     /// For more information, see the documentation in [`std::fmt`].\n     ///\n-    /// [`Display`]: ../std/fmt/trait.Display.html\n-    /// [`Debug`]: ../std/fmt/trait.Debug.html\n-    /// [`fmt::Arguments`]: ../std/fmt/struct.Arguments.html\n-    /// [`std::fmt`]: ../std/fmt/index.html\n+    /// [`Display`]: crate::fmt::Display\n+    /// [`Debug`]: crate::fmt::Debug\n+    /// [`fmt::Arguments`]: crate::fmt::Arguments\n+    /// [`std::fmt`]: crate::fmt\n     /// [`format!`]: ../std/macro.format.html\n-    /// [`write!`]: ../std/macro.write.html\n     /// [`println!`]: ../std/macro.println.html\n     ///\n     /// # Examples\n@@ -818,8 +792,6 @@ pub(crate) mod builtin {\n     /// will be emitted. To not emit a compile error, use the [`option_env!`]\n     /// macro instead.\n     ///\n-    /// [`option_env!`]: ../std/macro.option_env.html\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -854,13 +826,11 @@ pub(crate) mod builtin {\n     /// expand into an expression of type `Option<&'static str>` whose value is\n     /// `Some` of the value of the environment variable. If the environment\n     /// variable is not present, then this will expand to `None`. See\n-    /// [`Option<T>`][option] for more information on this type.\n+    /// [`Option<T>`][Option] for more information on this type.\n     ///\n     /// A compile time error is never emitted when using this macro regardless\n     /// of whether the environment variable is present or not.\n     ///\n-    /// [option]: ../std/option/enum.Option.html\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -946,9 +916,6 @@ pub(crate) mod builtin {\n     /// but rather the first macro invocation leading up to the invocation\n     /// of the `line!` macro.\n     ///\n-    /// [`column!`]: macro.column.html\n-    /// [`file!`]: macro.file.html\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -976,9 +943,6 @@ pub(crate) mod builtin {\n     /// but rather the first macro invocation leading up to the invocation\n     /// of the `column!` macro.\n     ///\n-    /// [`line!`]: macro.line.html\n-    /// [`file!`]: macro.file.html\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -999,15 +963,11 @@ pub(crate) mod builtin {\n     /// With [`line!`] and [`column!`], these macros provide debugging information for\n     /// developers about the location within the source.\n     ///\n-    ///\n     /// The expanded expression has type `&'static str`, and the returned file\n     /// is not the invocation of the `file!` macro itself, but rather the\n     /// first macro invocation leading up to the invocation of the `file!`\n     /// macro.\n     ///\n-    /// [`line!`]: macro.line.html\n-    /// [`column!`]: macro.column.html\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -1258,9 +1218,7 @@ pub(crate) mod builtin {\n     /// be provided with or without arguments for formatting. See [`std::fmt`]\n     /// for syntax for this form.\n     ///\n-    /// [`panic!`]: macro.panic.html\n-    /// [`debug_assert!`]: macro.debug_assert.html\n-    /// [`std::fmt`]: ../std/fmt/index.html\n+    /// [`std::fmt`]: crate::fmt\n     ///\n     /// # Examples\n     ///"}]}