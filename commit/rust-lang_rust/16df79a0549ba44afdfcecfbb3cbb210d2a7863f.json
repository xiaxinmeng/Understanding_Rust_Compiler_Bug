{"sha": "16df79a0549ba44afdfcecfbb3cbb210d2a7863f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2ZGY3OWEwNTQ5YmE0NGFmZGZjZWNmYmIzY2JiMjEwZDJhNzg2M2Y=", "commit": {"author": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2015-08-30T11:10:59Z"}, "committer": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2015-08-30T11:10:59Z"}, "message": "new lint: using collect() to just exhaust an iterator\n\nShould use a for loop instead.", "tree": {"sha": "470c1d393bdcaad8ec756a69947dc8d943b38d3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/470c1d393bdcaad8ec756a69947dc8d943b38d3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16df79a0549ba44afdfcecfbb3cbb210d2a7863f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16df79a0549ba44afdfcecfbb3cbb210d2a7863f", "html_url": "https://github.com/rust-lang/rust/commit/16df79a0549ba44afdfcecfbb3cbb210d2a7863f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16df79a0549ba44afdfcecfbb3cbb210d2a7863f/comments", "author": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b72ef5a1731490778cb8ad7fb42e170a4e46ae13", "url": "https://api.github.com/repos/rust-lang/rust/commits/b72ef5a1731490778cb8ad7fb42e170a4e46ae13", "html_url": "https://github.com/rust-lang/rust/commit/b72ef5a1731490778cb8ad7fb42e170a4e46ae13"}], "stats": {"total": 29, "additions": 27, "deletions": 2}, "files": [{"sha": "4d5c59f2aefd7ede2e56f49e5f26bffbdc2c3ad8", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/16df79a0549ba44afdfcecfbb3cbb210d2a7863f/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/16df79a0549ba44afdfcecfbb3cbb210d2a7863f/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=16df79a0549ba44afdfcecfbb3cbb210d2a7863f", "patch": "@@ -4,7 +4,7 @@\n A collection of lints that give helpful tips to newbies and catch oversights.\n \n ##Lints\n-There are 50 lints included in this crate:\n+There are 51 lints included in this crate:\n \n name                                                                                                 | default | meaning\n -----------------------------------------------------------------------------------------------------|---------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -56,6 +56,7 @@ name\n [toplevel_ref_arg](https://github.com/Manishearth/rust-clippy/wiki#toplevel_ref_arg)                 | warn    | a function argument is declared `ref` (i.e. `fn foo(ref x: u8)`, but not `fn foo((ref x, ref y): (u8, u8))`)\n [type_complexity](https://github.com/Manishearth/rust-clippy/wiki#type_complexity)                   | warn    | usage of very complex types; recommends factoring out parts into `type` definitions\n [unit_cmp](https://github.com/Manishearth/rust-clippy/wiki#unit_cmp)                                 | warn    | comparing unit values (which is always `true` or `false`, respectively)\n+[unused_collect](https://github.com/Manishearth/rust-clippy/wiki#unused_collect)                     | warn    | `collect()`ing an iterator without using the result; this is usually better written as a for loop\n [while_let_loop](https://github.com/Manishearth/rust-clippy/wiki#while_let_loop)                     | warn    | `loop { if let { ... } else break }` can be written as a `while let` loop\n [zero_width_space](https://github.com/Manishearth/rust-clippy/wiki#zero_width_space)                 | deny    | using a zero-width space in a string literal, which is confusing\n "}, {"sha": "5e9205e32f9cbce500d08383f2ecc9d67dd05cba", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/16df79a0549ba44afdfcecfbb3cbb210d2a7863f/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16df79a0549ba44afdfcecfbb3cbb210d2a7863f/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=16df79a0549ba44afdfcecfbb3cbb210d2a7863f", "patch": "@@ -96,6 +96,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         loops::EXPLICIT_ITER_LOOP,\n         loops::ITER_NEXT_LOOP,\n         loops::NEEDLESS_RANGE_LOOP,\n+        loops::UNUSED_COLLECT,\n         loops::WHILE_LET_LOOP,\n         matches::MATCH_REF_PATS,\n         matches::SINGLE_MATCH,"}, {"sha": "fe901794d6cf8a7021c7c38daa479935bebaba74", "filename": "src/loops.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/16df79a0549ba44afdfcecfbb3cbb210d2a7863f/src%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16df79a0549ba44afdfcecfbb3cbb210d2a7863f/src%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Floops.rs?ref=16df79a0549ba44afdfcecfbb3cbb210d2a7863f", "patch": "@@ -20,13 +20,17 @@ declare_lint!{ pub ITER_NEXT_LOOP, Warn,\n declare_lint!{ pub WHILE_LET_LOOP, Warn,\n                \"`loop { if let { ... } else break }` can be written as a `while let` loop\" }\n \n+declare_lint!{ pub UNUSED_COLLECT, Warn,\n+               \"`collect()`ing an iterator without using the result; this is usually better \\\n+                written as a for loop\" }\n+\n #[derive(Copy, Clone)]\n pub struct LoopsPass;\n \n impl LintPass for LoopsPass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(NEEDLESS_RANGE_LOOP, EXPLICIT_ITER_LOOP, ITER_NEXT_LOOP,\n-                    WHILE_LET_LOOP)\n+                    WHILE_LET_LOOP, UNUSED_COLLECT)\n     }\n \n     fn check_expr(&mut self, cx: &Context, expr: &Expr) {\n@@ -112,6 +116,20 @@ impl LintPass for LoopsPass {\n             }\n         }\n     }\n+\n+    fn check_stmt(&mut self, cx: &Context, stmt: &Stmt) {\n+        if let StmtSemi(ref expr, _) = stmt.node {\n+            if let ExprMethodCall(ref method, _, ref args) = expr.node {\n+                if args.len() == 1 && method.node.name == \"collect\" {\n+                    if match_trait_method(cx, expr, &[\"core\", \"iter\", \"Iterator\"]) {\n+                        span_lint(cx, UNUSED_COLLECT, expr.span, &format!(\n+                            \"you are collect()ing an iterator and throwing away the result. \\\n+                             Consider using an explicit for loop to exhaust the iterator\"));\n+                    }\n+                }\n+            }\n+        }\n+    }\n }\n \n /// Recover the essential nodes of a desugared for loop:"}, {"sha": "6683865135619cfb12543298668c122cc55df701", "filename": "tests/compile-fail/for_loop.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/16df79a0549ba44afdfcecfbb3cbb210d2a7863f/tests%2Fcompile-fail%2Ffor_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16df79a0549ba44afdfcecfbb3cbb210d2a7863f/tests%2Fcompile-fail%2Ffor_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffor_loop.rs?ref=16df79a0549ba44afdfcecfbb3cbb210d2a7863f", "patch": "@@ -15,6 +15,7 @@ impl Unrelated {\n }\n \n #[deny(needless_range_loop, explicit_iter_loop, iter_next_loop)]\n+#[deny(unused_collect)]\n #[allow(linkedlist)]\n fn main() {\n     let mut vec = vec![1, 2, 3, 4];\n@@ -56,4 +57,8 @@ fn main() {\n     let u = Unrelated(vec![]);\n     for _v in u.next() { } // no error\n     for _v in u.iter() { } // no error\n+\n+    let mut out = vec![];\n+    vec.iter().map(|x| out.push(x)).collect::<Vec<_>>(); //~ERROR you are collect()ing an iterator\n+    let _y = vec.iter().map(|x| out.push(x)).collect::<Vec<_>>(); // this is fine\n }"}]}