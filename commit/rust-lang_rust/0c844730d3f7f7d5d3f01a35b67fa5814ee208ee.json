{"sha": "0c844730d3f7f7d5d3f01a35b67fa5814ee208ee", "node_id": "C_kwDOAAsO6NoAKDBjODQ0NzMwZDNmN2Y3ZDVkM2YwMWEzNWI2N2ZhNTgxNGVlMjA4ZWU", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-12-07T02:27:04Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-12-07T08:29:26Z"}, "message": "Remove `$hir` argument from `late_lint_methods!`.\n\nBecause it's always `'tcx`.", "tree": {"sha": "518a8505437ab6d8a43e441254cedf29560356fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/518a8505437ab6d8a43e441254cedf29560356fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c844730d3f7f7d5d3f01a35b67fa5814ee208ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c844730d3f7f7d5d3f01a35b67fa5814ee208ee", "html_url": "https://github.com/rust-lang/rust/commit/0c844730d3f7f7d5d3f01a35b67fa5814ee208ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c844730d3f7f7d5d3f01a35b67fa5814ee208ee/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e491d2b24da8c11c902bb836d189590600f26caf", "url": "https://api.github.com/repos/rust-lang/rust/commits/e491d2b24da8c11c902bb836d189590600f26caf", "html_url": "https://github.com/rust-lang/rust/commit/e491d2b24da8c11c902bb836d189590600f26caf"}], "stats": {"total": 82, "additions": 40, "deletions": 42}, "files": [{"sha": "daf9dbe2abf640315fa34a5c05e28f39ca6e156d", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c844730d3f7f7d5d3f01a35b67fa5814ee208ee/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c844730d3f7f7d5d3f01a35b67fa5814ee208ee/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=0c844730d3f7f7d5d3f01a35b67fa5814ee208ee", "patch": "@@ -179,8 +179,7 @@ late_lint_methods!(\n             // Keeps a global list of foreign declarations.\n             ClashingExternDeclarations: ClashingExternDeclarations::new(),\n         ]\n-    ],\n-    ['tcx]\n+    ]\n );\n \n late_lint_methods!(\n@@ -229,8 +228,7 @@ late_lint_methods!(\n             NamedAsmLabels: NamedAsmLabels,\n             OpaqueHiddenInferredBound: OpaqueHiddenInferredBound,\n         ]\n-    ],\n-    ['tcx]\n+    ]\n );\n \n pub fn new_lint_store(internal_lints: bool) -> LintStore {"}, {"sha": "c423765b6447bc82b1d70b44c7661e4aa72c9141", "filename": "compiler/rustc_lint/src/passes.rs", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/0c844730d3f7f7d5d3f01a35b67fa5814ee208ee/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c844730d3f7f7d5d3f01a35b67fa5814ee208ee/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs?ref=0c844730d3f7f7d5d3f01a35b67fa5814ee208ee", "patch": "@@ -9,49 +9,49 @@ use rustc_span::Span;\n \n #[macro_export]\n macro_rules! late_lint_methods {\n-    ($macro:path, $args:tt, [$hir:tt]) => (\n-        $macro!($args, [$hir], [\n-            fn check_body(a: &$hir hir::Body<$hir>);\n-            fn check_body_post(a: &$hir hir::Body<$hir>);\n+    ($macro:path, $args:tt) => (\n+        $macro!($args, [\n+            fn check_body(a: &'tcx hir::Body<'tcx>);\n+            fn check_body_post(a: &'tcx hir::Body<'tcx>);\n             fn check_crate();\n             fn check_crate_post();\n-            fn check_mod(a: &$hir hir::Mod<$hir>, b: hir::HirId);\n-            fn check_foreign_item(a: &$hir hir::ForeignItem<$hir>);\n-            fn check_item(a: &$hir hir::Item<$hir>);\n-            fn check_item_post(a: &$hir hir::Item<$hir>);\n-            fn check_local(a: &$hir hir::Local<$hir>);\n-            fn check_block(a: &$hir hir::Block<$hir>);\n-            fn check_block_post(a: &$hir hir::Block<$hir>);\n-            fn check_stmt(a: &$hir hir::Stmt<$hir>);\n-            fn check_arm(a: &$hir hir::Arm<$hir>);\n-            fn check_pat(a: &$hir hir::Pat<$hir>);\n-            fn check_expr(a: &$hir hir::Expr<$hir>);\n-            fn check_expr_post(a: &$hir hir::Expr<$hir>);\n-            fn check_ty(a: &$hir hir::Ty<$hir>);\n-            fn check_generic_param(a: &$hir hir::GenericParam<$hir>);\n-            fn check_generics(a: &$hir hir::Generics<$hir>);\n-            fn check_poly_trait_ref(a: &$hir hir::PolyTraitRef<$hir>);\n+            fn check_mod(a: &'tcx hir::Mod<'tcx>, b: hir::HirId);\n+            fn check_foreign_item(a: &'tcx hir::ForeignItem<'tcx>);\n+            fn check_item(a: &'tcx hir::Item<'tcx>);\n+            fn check_item_post(a: &'tcx hir::Item<'tcx>);\n+            fn check_local(a: &'tcx hir::Local<'tcx>);\n+            fn check_block(a: &'tcx hir::Block<'tcx>);\n+            fn check_block_post(a: &'tcx hir::Block<'tcx>);\n+            fn check_stmt(a: &'tcx hir::Stmt<'tcx>);\n+            fn check_arm(a: &'tcx hir::Arm<'tcx>);\n+            fn check_pat(a: &'tcx hir::Pat<'tcx>);\n+            fn check_expr(a: &'tcx hir::Expr<'tcx>);\n+            fn check_expr_post(a: &'tcx hir::Expr<'tcx>);\n+            fn check_ty(a: &'tcx hir::Ty<'tcx>);\n+            fn check_generic_param(a: &'tcx hir::GenericParam<'tcx>);\n+            fn check_generics(a: &'tcx hir::Generics<'tcx>);\n+            fn check_poly_trait_ref(a: &'tcx hir::PolyTraitRef<'tcx>);\n             fn check_fn(\n-                a: rustc_hir::intravisit::FnKind<$hir>,\n-                b: &$hir hir::FnDecl<$hir>,\n-                c: &$hir hir::Body<$hir>,\n+                a: rustc_hir::intravisit::FnKind<'tcx>,\n+                b: &'tcx hir::FnDecl<'tcx>,\n+                c: &'tcx hir::Body<'tcx>,\n                 d: Span,\n                 e: hir::HirId);\n-            fn check_trait_item(a: &$hir hir::TraitItem<$hir>);\n-            fn check_impl_item(a: &$hir hir::ImplItem<$hir>);\n-            fn check_impl_item_post(a: &$hir hir::ImplItem<$hir>);\n-            fn check_struct_def(a: &$hir hir::VariantData<$hir>);\n-            fn check_field_def(a: &$hir hir::FieldDef<$hir>);\n-            fn check_variant(a: &$hir hir::Variant<$hir>);\n-            fn check_path(a: &hir::Path<$hir>, b: hir::HirId);\n-            fn check_attribute(a: &$hir ast::Attribute);\n+            fn check_trait_item(a: &'tcx hir::TraitItem<'tcx>);\n+            fn check_impl_item(a: &'tcx hir::ImplItem<'tcx>);\n+            fn check_impl_item_post(a: &'tcx hir::ImplItem<'tcx>);\n+            fn check_struct_def(a: &'tcx hir::VariantData<'tcx>);\n+            fn check_field_def(a: &'tcx hir::FieldDef<'tcx>);\n+            fn check_variant(a: &'tcx hir::Variant<'tcx>);\n+            fn check_path(a: &hir::Path<'tcx>, b: hir::HirId);\n+            fn check_attribute(a: &'tcx ast::Attribute);\n \n             /// Called when entering a syntax node that can have lint attributes such\n             /// as `#[allow(...)]`. Called with *all* the attributes of that node.\n-            fn enter_lint_attrs(a: &$hir [ast::Attribute]);\n+            fn enter_lint_attrs(a: &'tcx [ast::Attribute]);\n \n             /// Counterpart to `enter_lint_attrs`.\n-            fn exit_lint_attrs(a: &$hir [ast::Attribute]);\n+            fn exit_lint_attrs(a: &'tcx [ast::Attribute]);\n         ]);\n     )\n }\n@@ -66,14 +66,14 @@ macro_rules! late_lint_methods {\n // contains a few lint-specific methods with no equivalent in `Visitor`.\n \n macro_rules! declare_late_lint_pass {\n-    ([], [$hir:tt], [$($(#[$attr:meta])* fn $name:ident($($param:ident: $arg:ty),*);)*]) => (\n-        pub trait LateLintPass<$hir>: LintPass {\n-            $(#[inline(always)] fn $name(&mut self, _: &LateContext<$hir>, $(_: $arg),*) {})*\n+    ([], [$($(#[$attr:meta])* fn $name:ident($($param:ident: $arg:ty),*);)*]) => (\n+        pub trait LateLintPass<'tcx>: LintPass {\n+            $(#[inline(always)] fn $name(&mut self, _: &LateContext<'tcx>, $(_: $arg),*) {})*\n         }\n     )\n }\n \n-late_lint_methods!(declare_late_lint_pass, [], ['tcx]);\n+late_lint_methods!(declare_late_lint_pass, []);\n \n impl LateLintPass<'_> for HardwiredLints {}\n \n@@ -95,7 +95,7 @@ macro_rules! expand_combined_late_lint_pass_methods {\n \n #[macro_export]\n macro_rules! declare_combined_late_lint_pass {\n-    ([$v:vis $name:ident, [$($passes:ident: $constructor:expr,)*]], [$hir:tt], $methods:tt) => (\n+    ([$v:vis $name:ident, [$($passes:ident: $constructor:expr,)*]], $methods:tt) => (\n         #[allow(non_snake_case)]\n         $v struct $name {\n             $($passes: $passes,)*"}]}