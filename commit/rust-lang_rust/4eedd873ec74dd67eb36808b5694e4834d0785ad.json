{"sha": "4eedd873ec74dd67eb36808b5694e4834d0785ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlZWRkODczZWM3NGRkNjdlYjM2ODA4YjU2OTRlNDgzNGQwNzg1YWQ=", "commit": {"author": {"name": "Piotr Szotkowski", "email": "chastell@chastell.net", "date": "2014-10-26T08:50:16Z"}, "committer": {"name": "Piotr Szotkowski", "email": "chastell@chastell.net", "date": "2014-10-26T08:50:16Z"}, "message": "Guide: Closures: minor wording fixes", "tree": {"sha": "5ba8370be0dd56abba7150877aadce57ded87caa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ba8370be0dd56abba7150877aadce57ded87caa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4eedd873ec74dd67eb36808b5694e4834d0785ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4eedd873ec74dd67eb36808b5694e4834d0785ad", "html_url": "https://github.com/rust-lang/rust/commit/4eedd873ec74dd67eb36808b5694e4834d0785ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4eedd873ec74dd67eb36808b5694e4834d0785ad/comments", "author": {"login": "chastell", "id": 56633, "node_id": "MDQ6VXNlcjU2NjMz", "avatar_url": "https://avatars.githubusercontent.com/u/56633?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chastell", "html_url": "https://github.com/chastell", "followers_url": "https://api.github.com/users/chastell/followers", "following_url": "https://api.github.com/users/chastell/following{/other_user}", "gists_url": "https://api.github.com/users/chastell/gists{/gist_id}", "starred_url": "https://api.github.com/users/chastell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chastell/subscriptions", "organizations_url": "https://api.github.com/users/chastell/orgs", "repos_url": "https://api.github.com/users/chastell/repos", "events_url": "https://api.github.com/users/chastell/events{/privacy}", "received_events_url": "https://api.github.com/users/chastell/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chastell", "id": 56633, "node_id": "MDQ6VXNlcjU2NjMz", "avatar_url": "https://avatars.githubusercontent.com/u/56633?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chastell", "html_url": "https://github.com/chastell", "followers_url": "https://api.github.com/users/chastell/followers", "following_url": "https://api.github.com/users/chastell/following{/other_user}", "gists_url": "https://api.github.com/users/chastell/gists{/gist_id}", "starred_url": "https://api.github.com/users/chastell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chastell/subscriptions", "organizations_url": "https://api.github.com/users/chastell/orgs", "repos_url": "https://api.github.com/users/chastell/repos", "events_url": "https://api.github.com/users/chastell/events{/privacy}", "received_events_url": "https://api.github.com/users/chastell/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f168c12c5629afd45c9b3ed250350bf830b99642", "url": "https://api.github.com/repos/rust-lang/rust/commits/f168c12c5629afd45c9b3ed250350bf830b99642", "html_url": "https://github.com/rust-lang/rust/commit/f168c12c5629afd45c9b3ed250350bf830b99642"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "9f84541e2d1d5c39712de100477c669ae8402b60", "filename": "src/doc/guide.md", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4eedd873ec74dd67eb36808b5694e4834d0785ad/src%2Fdoc%2Fguide.md", "raw_url": "https://github.com/rust-lang/rust/raw/4eedd873ec74dd67eb36808b5694e4834d0785ad/src%2Fdoc%2Fguide.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide.md?ref=4eedd873ec74dd67eb36808b5694e4834d0785ad", "patch": "@@ -4010,8 +4010,8 @@ syntax.\n \n # Closures\n \n-So far, we've made lots of functions in Rust. But we've given them all names.\n-Rust also allows us to create anonymous functions too. Rust's anonymous\n+So far, we've made lots of functions in Rust, but we've given them all names.\n+Rust also allows us to create anonymous functions. Rust's anonymous\n functions are called **closure**s. By themselves, closures aren't all that\n interesting, but when you combine them with functions that take closures as\n arguments, really powerful things are possible.\n@@ -4040,7 +4040,7 @@ don't need to declare one. This is different from named functions, which\n default to returning unit (`()`).\n \n There's one big difference between a closure and named functions, and it's in\n-the name: a closure \"closes over its environment.\" What's that mean? It means\n+the name: a closure \"closes over its environment.\" What does that mean? It means\n this:\n \n ```{rust}\n@@ -4056,8 +4056,8 @@ fn main() {\n The `||` syntax means this is an anonymous closure that takes no arguments.\n Without it, we'd just have a block of code in `{}`s.\n \n-In other words, a closure has access to variables in the scope that it's\n-defined. The closure borrows any variables that it uses. This will error:\n+In other words, a closure has access to variables in the scope where it's\n+defined. The closure borrows any variables it uses, so this will error:\n \n ```{rust,ignore}\n fn main() {\n@@ -4081,7 +4081,7 @@ let p = proc() { x * x };\n println!(\"{}\", p()); // prints 25\n ```\n \n-Procs have a big difference from closures: they may only be called once. This\n+There is a big difference between procs and closures: procs may only be called once. This\n will error when we try to compile:\n \n ```{rust,ignore}\n@@ -4174,10 +4174,10 @@ before. And we pass in our `x` argument to each one. Hence 'twice.'\n If you do the math, `(5 * 5) + (5 * 5) == 50`, so that's the output we get.\n \n Play around with this concept until you're comfortable with it. Rust's standard\n-library uses lots of closures, where appropriate, so you'll be using\n+library uses lots of closures where appropriate, so you'll be using\n this technique a lot.\n \n-If we didn't want to give `square` a name, we could also just define it inline.\n+If we didn't want to give `square` a name, we could just define it inline.\n This example is the same as the previous one:\n \n ```{rust}\n@@ -4205,12 +4205,12 @@ fn main() {\n }\n ```\n \n-Doing this is not particularly common, but every once in a while, it's useful.\n+Doing this is not particularly common, but it's useful every once in a while.\n \n That's all you need to get the hang of closures! Closures are a little bit\n-strange at first, but once you're used to using them, you'll miss them in any\n-language that doesn't have them. Passing functions to other functions is\n-incredibly powerful. Next, let's look at one of those things: iterators.\n+strange at first, but once you're used to them, you'll miss them\n+in other languages. Passing functions to other functions is\n+incredibly powerful; let's look at one of such situations: iterators.\n \n # Iterators\n "}]}