{"sha": "3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "node_id": "C_kwDOAAsO6NoAKDNjZjBlOThkYzlhNjcwODZmNGU3MzhlZGI5ZDYxYjJmZWUxYTM4YjA", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-05-04T14:22:19Z"}, "committer": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-08-31T03:06:24Z"}, "message": "Stabilize GATs", "tree": {"sha": "f559e3e09fd50967611da6d00b166a142707dfd4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f559e3e09fd50967611da6d00b166a142707dfd4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "html_url": "https://github.com/rust-lang/rust/commit/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02654a0844f5c8d29bac318c3c6c666da3d8543d", "url": "https://api.github.com/repos/rust-lang/rust/commits/02654a0844f5c8d29bac318c3c6c666da3d8543d", "html_url": "https://github.com/rust-lang/rust/commit/02654a0844f5c8d29bac318c3c6c666da3d8543d"}], "stats": {"total": 1121, "additions": 313, "deletions": 808}, "files": [{"sha": "ec3d03861a0033321286a55e2c0697a142c47ce9", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -342,25 +342,6 @@ impl<'a> PostExpansionVisitor<'a> {\n         }\n     }\n \n-    fn check_gat(&self, generics: &ast::Generics, span: Span) {\n-        if !generics.params.is_empty() {\n-            gate_feature_post!(\n-                &self,\n-                generic_associated_types,\n-                span,\n-                \"generic associated types are unstable\"\n-            );\n-        }\n-        if !generics.where_clause.predicates.is_empty() {\n-            gate_feature_post!(\n-                &self,\n-                generic_associated_types,\n-                span,\n-                \"where clauses on associated types are unstable\"\n-            );\n-        }\n-    }\n-\n     /// Feature gate `impl Trait` inside `type Alias = $type_expr;`.\n     fn check_impl_trait(&self, ty: &ast::Ty) {\n         struct ImplTraitVisitor<'a> {\n@@ -719,7 +700,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n     fn visit_assoc_item(&mut self, i: &'a ast::AssocItem, ctxt: AssocCtxt) {\n         let is_fn = match i.kind {\n             ast::AssocItemKind::Fn(_) => true,\n-            ast::AssocItemKind::TyAlias(box ast::TyAlias { ref generics, ref ty, .. }) => {\n+            ast::AssocItemKind::TyAlias(box ast::TyAlias { ref ty, .. }) => {\n                 if let (Some(_), AssocCtxt::Trait) = (ty, ctxt) {\n                     gate_feature_post!(\n                         &self,\n@@ -731,7 +712,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                 if let Some(ty) = ty {\n                     self.check_impl_trait(ty);\n                 }\n-                self.check_gat(generics, i.span);\n                 false\n             }\n             _ => false,"}, {"sha": "100000f4cd6293e4446ec28fcd2ac7faa824fb8c", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -161,6 +161,8 @@ declare_features! (\n     (accepted, fn_must_use, \"1.27.0\", Some(43302), None),\n     /// Allows capturing variables in scope using format_args!\n     (accepted, format_args_capture, \"1.58.0\", Some(67984), None),\n+    /// Allows associated types to be generic, e.g., `type Foo<T>;` (RFC 1598).\n+    (accepted, generic_associated_types, \"CURRENT_RUSTC_VERSION\", Some(44265), None),\n     /// Allows attributes on lifetime/type formal parameters in generics (RFC 1327).\n     (accepted, generic_param_attrs, \"1.27.0\", Some(48848), None),\n     /// Allows the `#[global_allocator]` attribute."}, {"sha": "4f628cee6303d47fb08bf49c0b22aa01451dcb41", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -398,8 +398,6 @@ declare_features! (\n     (active, generators, \"1.21.0\", Some(43122), None),\n     /// Infer generic args for both consts and types.\n     (active, generic_arg_infer, \"1.55.0\", Some(85077), None),\n-    /// Allows associated types to be generic, e.g., `type Foo<T>;` (RFC 1598).\n-    (active, generic_associated_types, \"1.23.0\", Some(44265), None),\n     /// An extension to the `generic_associated_types` feature, allowing incomplete features.\n     (incomplete, generic_associated_types_extended, \"1.61.0\", Some(95451), None),\n     /// Allows non-trivial generic constants which have to have wfness manually propagated to callers"}, {"sha": "dec81c0d912ece5b552dedc1bbc111825477bbd9", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -3989,8 +3989,6 @@ declare_lint! {\n     /// ### Example\n     ///\n     /// ```rust\n-    /// #![feature(generic_associated_types)]\n-    ///\n     /// trait Trait {\n     ///   type Assoc<'a> where Self: 'a;\n     /// }"}, {"sha": "062d25da2e5bdb639d710ade89d2c30d3ac8b373", "filename": "compiler/rustc_metadata/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flib.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -2,7 +2,7 @@\n #![feature(decl_macro)]\n #![feature(drain_filter)]\n #![feature(generators)]\n-#![feature(generic_associated_types)]\n+#![cfg_attr(bootstrap, feature(generic_associated_types))]\n #![feature(iter_from_generator)]\n #![feature(let_chains)]\n #![feature(let_else)]"}, {"sha": "b8b3ff06fb2858b24fde0186d931cc263d380460", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -31,7 +31,7 @@\n #![feature(discriminant_kind)]\n #![feature(exhaustive_patterns)]\n #![feature(get_mut_unchecked)]\n-#![feature(generic_associated_types)]\n+#![cfg_attr(bootstrap, feature(generic_associated_types))]\n #![feature(if_let_guard)]\n #![feature(map_first_last)]\n #![feature(negative_impls)]"}, {"sha": "99efe51b107bdb9819a64ba219d924e47ca200f4", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -2064,8 +2064,6 @@ fn confirm_impl_candidate<'cx, 'tcx>(\n \n // Get obligations corresponding to the predicates from the where-clause of the\n // associated type itself.\n-// Note: `feature(generic_associated_types)` is required to write such\n-// predicates, even for non-generic associated types.\n fn assoc_ty_own_obligations<'cx, 'tcx>(\n     selcx: &mut SelectionContext<'cx, 'tcx>,\n     obligation: &ProjectionTyObligation<'tcx>,"}, {"sha": "f6c648140b856985b5adcaba966aabd8d5cf4105", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -16,7 +16,7 @@\n #![feature(type_ascription)]\n #![feature(iter_intersperse)]\n #![feature(type_alias_impl_trait)]\n-#![feature(generic_associated_types)]\n+#![cfg_attr(bootstrap, feature(generic_associated_types))]\n #![recursion_limit = \"256\"]\n #![warn(rustc::internal)]\n #![allow(clippy::collapsible_if, clippy::collapsible_else_if)]"}, {"sha": "0a361a3835f7f68349010baef610c9d84e6197c6", "filename": "src/test/pretty/gat-bounds.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fpretty%2Fgat-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fpretty%2Fgat-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fgat-bounds.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -3,8 +3,6 @@\n \n // pretty-compare-only\n \n-#![feature(generic_associated_types)]\n-\n trait X {\n     type Y<T>: Trait where Self: Sized;\n }"}, {"sha": "e5809783aecacc24810c579bdb6411a2eba99f1c", "filename": "src/test/rustdoc-json/generic-associated-types/gats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Frustdoc-json%2Fgeneric-associated-types%2Fgats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Frustdoc-json%2Fgeneric-associated-types%2Fgats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fgeneric-associated-types%2Fgats.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,7 +1,7 @@\n // ignore-tidy-linelength\n \n #![no_core]\n-#![feature(generic_associated_types, lang_items, no_core)]\n+#![feature(lang_items, no_core)]\n \n #[lang = \"sized\"]\n pub trait Sized {}"}, {"sha": "7ab82bb582965909480eee1defb38a96fe149ec6", "filename": "src/test/rustdoc/generic-associated-types/gats.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Frustdoc%2Fgeneric-associated-types%2Fgats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Frustdoc%2Fgeneric-associated-types%2Fgats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fgeneric-associated-types%2Fgats.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,4 @@\n #![crate_name = \"foo\"]\n-#![feature(generic_associated_types)]\n \n // @has foo/trait.LendingIterator.html\n pub trait LendingIterator {"}, {"sha": "985c7e983aa0ef71e1c5ac47729f388113b77578", "filename": "src/test/rustdoc/generic-associated-types/issue-94683.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Frustdoc%2Fgeneric-associated-types%2Fissue-94683.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Frustdoc%2Fgeneric-associated-types%2Fissue-94683.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fgeneric-associated-types%2Fissue-94683.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,4 @@\n #![crate_name = \"foo\"]\n-#![feature(generic_associated_types)]\n \n pub trait Trait {\n     type Gat<'a>;"}, {"sha": "33440b17cf9ddf448bf3d0469eec04092b82bf33", "filename": "src/test/rustdoc/where.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Frustdoc%2Fwhere.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Frustdoc%2Fwhere.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fwhere.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,4 +1,3 @@\n-#![feature(generic_associated_types)]\n #![crate_name = \"foo\"]\n \n pub trait MyTrait { fn dummy(&self) { } }"}, {"sha": "6cba45129e49b1951e1b6c195d5acbe17dd01269", "filename": "src/test/ui/associated-type-bounds/binder-on-bound.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbinder-on-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbinder-on-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbinder-on-bound.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,3 @@\n-#![feature(generic_associated_types)]\n-\n trait Trait {\n     type Bound<'a>;\n }"}, {"sha": "f71f72bfb94f3661107529c61d38f58b78342539", "filename": "src/test/ui/associated-type-bounds/binder-on-bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbinder-on-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbinder-on-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbinder-on-bound.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,5 @@\n error: `for<...>` is not allowed on associated type bounds\n-  --> $DIR/binder-on-bound.rs:7:22\n+  --> $DIR/binder-on-bound.rs:5:22\n    |\n LL | fn foo() where Trait<for<'a> Bound<'a> = &'a ()> {\n    |                      ^^^^^^^^^^^^^^^^^"}, {"sha": "9dd37f98150b6175e7ef1c06cc43125dd13d2ddf", "filename": "src/test/ui/associated-type-bounds/issue-79949.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fissue-79949.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fissue-79949.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fissue-79949.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -2,7 +2,6 @@\n \n #![allow(incomplete_features)]\n #![feature(associated_type_bounds)]\n-#![feature(generic_associated_types)]\n \n trait MP {\n     type T<'a>;"}, {"sha": "e8118f0c6e40e2381891ca027da41861f613d3d6", "filename": "src/test/ui/deriving/issue-89188-gat-hrtb.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fderiving%2Fissue-89188-gat-hrtb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fderiving%2Fissue-89188-gat-hrtb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderiving%2Fissue-89188-gat-hrtb.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,7 +1,5 @@\n // check-pass\n \n-#![feature(generic_associated_types)]\n-\n trait CallWithShim: Sized {\n     type Shim<'s>\n     where"}, {"sha": "c5c13451488915c496e44b210e5a5ab7388a4a01", "filename": "src/test/ui/feature-gates/feature-gate-generic_associated_types.rs", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/02654a0844f5c8d29bac318c3c6c666da3d8543d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02654a0844f5c8d29bac318c3c6c666da3d8543d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.rs?ref=02654a0844f5c8d29bac318c3c6c666da3d8543d", "patch": "@@ -1,31 +0,0 @@\n-use std::ops::Deref;\n-\n-trait PointerFamily<U> {\n-    type Pointer<T>: Deref<Target = T>;\n-    //~^ ERROR generic associated types are unstable\n-    type Pointer2<T>: Deref<Target = T> where T: Clone, U: Clone;\n-    //~^ ERROR generic associated types are unstable\n-    //~| ERROR where clauses on associated types are unstable\n-}\n-\n-struct Foo;\n-\n-impl PointerFamily<u32> for Foo {\n-    type Pointer<Usize> = Box<Usize>;\n-    //~^ ERROR generic associated types are unstable\n-    type Pointer2<U32> = Box<U32>;\n-    //~^ ERROR generic associated types are unstable\n-    //~| ERROR the trait bound `U32: Clone` is not satisfied\n-}\n-\n-trait Bar {\n-    type Assoc where Self: Sized;\n-    //~^ ERROR where clauses on associated types are unstable\n-}\n-\n-impl Bar for Foo {\n-    type Assoc = Foo where Self: Sized;\n-    //~^ ERROR where clauses on associated types are unstable\n-}\n-\n-fn main() {}"}, {"sha": "12a40ff0a12f5b9db1800ac6ddbaf343a09c355f", "filename": "src/test/ui/feature-gates/feature-gate-generic_associated_types.stderr", "status": "removed", "additions": 0, "deletions": 78, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/02654a0844f5c8d29bac318c3c6c666da3d8543d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02654a0844f5c8d29bac318c3c6c666da3d8543d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.stderr?ref=02654a0844f5c8d29bac318c3c6c666da3d8543d", "patch": "@@ -1,78 +0,0 @@\n-error[E0658]: generic associated types are unstable\n-  --> $DIR/feature-gate-generic_associated_types.rs:4:5\n-   |\n-LL |     type Pointer<T>: Deref<Target = T>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-   = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n-\n-error[E0658]: generic associated types are unstable\n-  --> $DIR/feature-gate-generic_associated_types.rs:6:5\n-   |\n-LL |     type Pointer2<T>: Deref<Target = T> where T: Clone, U: Clone;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-   = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n-\n-error[E0658]: where clauses on associated types are unstable\n-  --> $DIR/feature-gate-generic_associated_types.rs:6:5\n-   |\n-LL |     type Pointer2<T>: Deref<Target = T> where T: Clone, U: Clone;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-   = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n-\n-error[E0658]: generic associated types are unstable\n-  --> $DIR/feature-gate-generic_associated_types.rs:14:5\n-   |\n-LL |     type Pointer<Usize> = Box<Usize>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-   = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n-\n-error[E0658]: generic associated types are unstable\n-  --> $DIR/feature-gate-generic_associated_types.rs:16:5\n-   |\n-LL |     type Pointer2<U32> = Box<U32>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-   = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n-\n-error[E0658]: where clauses on associated types are unstable\n-  --> $DIR/feature-gate-generic_associated_types.rs:22:5\n-   |\n-LL |     type Assoc where Self: Sized;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-   = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n-\n-error[E0658]: where clauses on associated types are unstable\n-  --> $DIR/feature-gate-generic_associated_types.rs:27:5\n-   |\n-LL |     type Assoc = Foo where Self: Sized;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-   = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n-\n-error[E0277]: the trait bound `U32: Clone` is not satisfied\n-  --> $DIR/feature-gate-generic_associated_types.rs:16:26\n-   |\n-LL |     type Pointer2<U32> = Box<U32>;\n-   |                          ^^^^^^^^ the trait `Clone` is not implemented for `U32`\n-   |\n-help: consider restricting type parameter `U32`\n-   |\n-LL |     type Pointer2<U32: std::clone::Clone> = Box<U32>;\n-   |                      +++++++++++++++++++\n-\n-error: aborting due to 8 previous errors\n-\n-Some errors have detailed explanations: E0277, E0658.\n-For more information about an error, try `rustc --explain E0277`."}, {"sha": "7842d44ac4f0f3bc1a8dc7a2174df9631beb1981", "filename": "src/test/ui/feature-gates/feature-gate-generic_associated_types_extended.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types_extended.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types_extended.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types_extended.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,3 @@\n-#![feature(generic_associated_types)]\n-\n // This feature doesn't *currently* fire on any specific code; it's just a\n // behavior change. Future changes might.\n #[rustc_error] //~ the"}, {"sha": "bb1622628dc1f1339454adb6837043403798dec5", "filename": "src/test/ui/feature-gates/feature-gate-generic_associated_types_extended.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types_extended.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types_extended.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types_extended.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: the `#[rustc_error]` attribute is just used for rustc unit tests and will never be stable\n-  --> $DIR/feature-gate-generic_associated_types_extended.rs:5:1\n+  --> $DIR/feature-gate-generic_associated_types_extended.rs:3:1\n    |\n LL | #[rustc_error]\n    | ^^^^^^^^^^^^^^"}, {"sha": "eb7a12412c6ba2625f2d1bee6e98ac47ebefb65e", "filename": "src/test/ui/generic-associated-types/anonymize-bound-vars.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fanonymize-bound-vars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fanonymize-bound-vars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fanonymize-bound-vars.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,7 +1,6 @@\n // check-pass\n //\n // regression test for #98702\n-#![feature(generic_associated_types)]\n \n trait Foo {\n     type Assoc<T>;"}, {"sha": "21a9b3b89a8dc7a31ee11d570036280e45127ae5", "filename": "src/test/ui/generic-associated-types/auxiliary/foo_defn.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fauxiliary%2Ffoo_defn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fauxiliary%2Ffoo_defn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fauxiliary%2Ffoo_defn.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,3 @@\n-#![feature(generic_associated_types)]\n-\n use std::{future::Future, pin::Pin};\n \n pub trait Foo {"}, {"sha": "f6aa6b36e13dcfb7907f3320b04248b9fa393fda", "filename": "src/test/ui/generic-associated-types/bugs/issue-80626.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-80626.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-80626.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-80626.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -3,8 +3,6 @@\n \n // This should pass, but it requires `Sized` to be coinductive.\n \n-#![feature(generic_associated_types)]\n-\n trait Allocator {\n     type Allocated<T>;\n }"}, {"sha": "9a0f332ed47360141760f8f697d340417855dde6", "filename": "src/test/ui/generic-associated-types/bugs/issue-80626.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-80626.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-80626.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-80626.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,11 +1,11 @@\n error[E0275]: overflow evaluating the requirement `LinkedList<A>: Sized`\n-  --> $DIR/issue-80626.rs:14:10\n+  --> $DIR/issue-80626.rs:12:10\n    |\n LL |     Next(A::Allocated<Self>)\n    |          ^^^^^^^^^^^^^^^^^^\n    |\n note: required by a bound in `Allocator::Allocated`\n-  --> $DIR/issue-80626.rs:9:20\n+  --> $DIR/issue-80626.rs:7:20\n    |\n LL |     type Allocated<T>;\n    |                    ^ required by this bound in `Allocator::Allocated`"}, {"sha": "3a2d758e7d6feb104588c8cae43ec7918335de18", "filename": "src/test/ui/generic-associated-types/bugs/issue-86218.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-86218.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-86218.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-86218.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -3,7 +3,6 @@\n \n // This should pass, but seems to run into a TAIT issue.\n \n-#![feature(generic_associated_types)]\n #![feature(type_alias_impl_trait)]\n \n pub trait Stream {"}, {"sha": "de1b464a41dbe81ebe20d175f37ebbfc74eba1be", "filename": "src/test/ui/generic-associated-types/bugs/issue-86218.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-86218.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-86218.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-86218.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,17 +1,17 @@\n error[E0477]: the type `<() as Yay<&'a ()>>::InnerStream<'s>` does not fulfill the required lifetime\n-  --> $DIR/issue-86218.rs:23:28\n+  --> $DIR/issue-86218.rs:22:28\n    |\n LL |     type InnerStream<'s> = impl Stream<Item = i32> + 's;\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: type must outlive the lifetime `'s` as defined here as required by this binding\n-  --> $DIR/issue-86218.rs:23:22\n+  --> $DIR/issue-86218.rs:22:22\n    |\n LL |     type InnerStream<'s> = impl Stream<Item = i32> + 's;\n    |                      ^^\n \n error: unconstrained opaque type\n-  --> $DIR/issue-86218.rs:23:28\n+  --> $DIR/issue-86218.rs:22:28\n    |\n LL |     type InnerStream<'s> = impl Stream<Item = i32> + 's;\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "80737a79899b426112c10d105de507e41c63c446", "filename": "src/test/ui/generic-associated-types/bugs/issue-87735.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87735.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87735.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87735.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -3,8 +3,6 @@\n \n // This should pass, but we need an extension of implied bounds (probably).\n \n-#![feature(generic_associated_types)]\n-\n pub trait AsRef2 {\n   type Output<'a> where Self: 'a;\n "}, {"sha": "ebe2054ce5efc6aab21ba991646810e667bf2c90", "filename": "src/test/ui/generic-associated-types/bugs/issue-87735.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87735.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87735.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87735.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,5 @@\n error[E0207]: the type parameter `U` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/issue-87735.rs:27:13\n+  --> $DIR/issue-87735.rs:25:13\n    |\n LL | impl<'b, T, U> AsRef2 for Foo<T>\n    |             ^ unconstrained type parameter"}, {"sha": "cda722d2f0c72d276beda3ed413d5e83ec1d341b", "filename": "src/test/ui/generic-associated-types/bugs/issue-87755.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87755.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87755.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87755.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -3,8 +3,6 @@\n \n // This should pass.\n \n-#![feature(generic_associated_types)]\n-\n use std::fmt::Debug;\n \n trait Foo {"}, {"sha": "5e94db9b0c00f846508e9755ad215c2876579225", "filename": "src/test/ui/generic-associated-types/bugs/issue-87755.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87755.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87755.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87755.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,5 @@\n error[E0275]: overflow evaluating the requirement `<Bar as Foo>::Ass == _`\n-  --> $DIR/issue-87755.rs:18:16\n+  --> $DIR/issue-87755.rs:16:16\n    |\n LL |     type Ass = Bar;\n    |                ^^^"}, {"sha": "56237e387ef30409365e08603cd7739dfe9ef0c5", "filename": "src/test/ui/generic-associated-types/bugs/issue-87803.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87803.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87803.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87803.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -4,8 +4,6 @@\n // This should pass, but using a type alias vs a reference directly\n // changes late-bound -> early-bound.\n \n-#![feature(generic_associated_types)]\n-\n trait Scanner {\n     type Input<'a>;\n     type Token<'a>;"}, {"sha": "fe2abdedbf37c6a519fb0407ec7daa1f43111ed3", "filename": "src/test/ui/generic-associated-types/bugs/issue-87803.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87803.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87803.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87803.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,5 @@\n error[E0195]: lifetime parameters or bounds on method `scan` do not match the trait declaration\n-  --> $DIR/issue-87803.rs:22:12\n+  --> $DIR/issue-87803.rs:20:12\n    |\n LL |     fn scan<'a>(&mut self, i : Self::Input<'a>) -> Self::Token<'a>;\n    |            ---- lifetimes in impl do not match this method in trait"}, {"sha": "8f8cc4523a202b8ee48ea56ee28f2d419f7a38bd", "filename": "src/test/ui/generic-associated-types/bugs/issue-88382.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88382.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88382.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88382.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -3,8 +3,6 @@\n \n // This should pass, but has a missed normalization due to HRTB.\n \n-#![feature(generic_associated_types)]\n-\n trait Iterable {\n     type Iterator<'a> where Self: 'a;\n     fn iter(&self) -> Self::Iterator<'_>;"}, {"sha": "c5fd58096b7fd15b460ef8dd82544b707ce07b01", "filename": "src/test/ui/generic-associated-types/bugs/issue-88382.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88382.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88382.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88382.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,5 @@\n error[E0631]: type mismatch in function arguments\n-  --> $DIR/issue-88382.rs:28:40\n+  --> $DIR/issue-88382.rs:26:40\n    |\n LL |     do_something(SomeImplementation(), test);\n    |     ------------                       ^^^^ expected due to this\n@@ -12,7 +12,7 @@ LL | fn test<'a, I: Iterable>(_: &mut I::Iterator<'a>) {}\n    = note: expected function signature `for<'r> fn(&'r mut std::iter::Empty<usize>) -> _`\n               found function signature `for<'a, 'r> fn(&'r mut <_ as Iterable>::Iterator<'a>) -> _`\n note: required by a bound in `do_something`\n-  --> $DIR/issue-88382.rs:22:48\n+  --> $DIR/issue-88382.rs:20:48\n    |\n LL | fn do_something<I: Iterable>(i: I, mut f: impl for<'a> Fn(&mut I::Iterator<'a>)) {\n    |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `do_something`"}, {"sha": "224e696ad2c9cbcc3ed77905f20d2599692831ce", "filename": "src/test/ui/generic-associated-types/bugs/issue-88460.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88460.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88460.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88460.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -3,8 +3,6 @@\n \n // This should pass, but has a missed normalization due to HRTB.\n \n-#![feature(generic_associated_types)]\n-\n pub trait Marker {}\n \n pub trait Trait {"}, {"sha": "6612c4b49446fe371c4072817b019ac35459dca6", "filename": "src/test/ui/generic-associated-types/bugs/issue-88460.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88460.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88460.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88460.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `for<'a> <_ as Trait>::Assoc<'a>: Marker` is not satisfied\n-  --> $DIR/issue-88460.rs:30:10\n+  --> $DIR/issue-88460.rs:28:10\n    |\n LL |     test(Foo);\n    |     ---- ^^^ the trait `for<'a> Marker` is not implemented for `<_ as Trait>::Assoc<'a>`\n@@ -8,7 +8,7 @@ LL |     test(Foo);\n    |\n    = help: the trait `Marker` is implemented for `()`\n note: required by a bound in `test`\n-  --> $DIR/issue-88460.rs:17:27\n+  --> $DIR/issue-88460.rs:15:27\n    |\n LL | fn test<T>(value: T)\n    |    ---- required by a bound in this"}, {"sha": "99397744fa655ed699328b0b627a7e99a8123ea1", "filename": "src/test/ui/generic-associated-types/bugs/issue-88526.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88526.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88526.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88526.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -3,8 +3,6 @@\n \n // This should pass, but requires more logic.\n \n-#![feature(generic_associated_types)]\n-\n trait A {\n     type I<'a>;\n }"}, {"sha": "56857c6550bdcf1e4ef9890cd2e97a2239002cac", "filename": "src/test/ui/generic-associated-types/bugs/issue-88526.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88526.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88526.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88526.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,5 @@\n error[E0207]: the type parameter `I` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/issue-88526.rs:27:13\n+  --> $DIR/issue-88526.rs:25:13\n    |\n LL | impl<'q, Q, I, F> A for TestB<Q, F>\n    |             ^ unconstrained type parameter"}, {"sha": "012aa8df2fc3fcca58d5acfe34743e04cf9b924f", "filename": "src/test/ui/generic-associated-types/bugs/issue-89008.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-89008.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-89008.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-89008.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -5,7 +5,6 @@\n // This should pass, but seems to run into a TAIT bug.\n \n #![feature(type_alias_impl_trait)]\n-#![feature(generic_associated_types)]\n \n use std::future::Future;\n "}, {"sha": "3f72734efa1dce3535b610a4007e66b98a062b75", "filename": "src/test/ui/generic-associated-types/bugs/issue-89008.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-89008.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-89008.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-89008.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,13 +1,13 @@\n error[E0271]: type mismatch resolving `<Empty<_> as Stream>::Item == Repr`\n-  --> $DIR/issue-89008.rs:39:43\n+  --> $DIR/issue-89008.rs:38:43\n    |\n LL |     fn line_stream<'a, Repr>(&'a self) -> Self::LineStreamFut<'a, Repr> {\n    |                        ----               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type mismatch resolving `<Empty<_> as Stream>::Item == Repr`\n    |                        |\n    |                        this type parameter\n    |\n note: expected this to be `()`\n-  --> $DIR/issue-89008.rs:18:17\n+  --> $DIR/issue-89008.rs:17:17\n    |\n LL |     type Item = ();\n    |                 ^^"}, {"sha": "796935cc06f5b2d2de6b81164dc9d33c60332a92", "filename": "src/test/ui/generic-associated-types/bugs/issue-91762.rs", "status": "renamed", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-91762.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-91762.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-91762.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,13 +1,12 @@\n // check-fail\n+// known-bug\n \n-// FIXME(generic_associated_types): We almost certaintly want this to pass, but\n+// We almost certaintly want this to pass, but\n // it's particularly difficult currently, because we need a way of specifying\n // that `<Self::Base as Functor>::With<T> = Self` without using that when we have\n // a `U`. See `https://github.com/rust-lang/rust/pull/92728` for a (hacky)\n // solution. This might be better to just wait for Chalk.\n \n-#![feature(generic_associated_types)]\n-\n pub trait Functor {\n     type With<T>;\n ", "previous_filename": "src/test/ui/generic-associated-types/issue-91762.rs"}, {"sha": "1272c8b8ae27d92ff6a6ea1c5d1ea7ec2338bb82", "filename": "src/test/ui/generic-associated-types/bugs/issue-91762.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-91762.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-91762.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-91762.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,5 @@\n error[E0282]: type annotations needed\n-  --> $DIR/issue-91762.rs:25:15\n+  --> $DIR/issue-91762.rs:24:15\n    |\n LL |         ret = <Self::Base as Functor>::fmap(arg);\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type of the type parameter `T` declared on the associated function `fmap`", "previous_filename": "src/test/ui/generic-associated-types/issue-91762.stderr"}, {"sha": "e08aa18cf0f17dc49fe7eed260f4110658a7b51b", "filename": "src/test/ui/generic-associated-types/collections-project-default.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections-project-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections-project-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections-project-default.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,4 +1,3 @@\n-#![feature(generic_associated_types)]\n #![feature(associated_type_defaults)]\n \n // A Collection trait and collection families. Based on"}, {"sha": "5701017dc3471adad820c7ec5268b5725cc2f13a", "filename": "src/test/ui/generic-associated-types/collections-project-default.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections-project-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections-project-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections-project-default.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/collections-project-default.rs:59:5\n+  --> $DIR/collections-project-default.rs:58:5\n    |\n LL | fn floatify_sibling<C>(ints: &C) -> <C as Collection<i32>>::Sibling<f32>\n    |                                     ------------------------------------ expected `<C as Collection<i32>>::Sibling<f32>` because of return type"}, {"sha": "15f429afb0274c46a37e8fe6f760c3f1cc01f673", "filename": "src/test/ui/generic-associated-types/collections.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,4 +1,3 @@\n-#![feature(generic_associated_types)]\n #![feature(associated_type_defaults)]\n \n // A Collection trait and collection families. Based on"}, {"sha": "54154f9d1fc8d0b30405b3fab533f915f0ae88d5", "filename": "src/test/ui/generic-associated-types/collectivity-regression.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollectivity-regression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollectivity-regression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollectivity-regression.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,7 +1,5 @@\n // Regression test from https://github.com/rust-lang/rust/pull/98109\n \n-#![feature(generic_associated_types)]\n-\n pub trait Get {\n     type Value<'a>\n     where"}, {"sha": "1dbe1e2cb2245ba1bc4a9f6560dc13ad8394371d", "filename": "src/test/ui/generic-associated-types/collectivity-regression.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollectivity-regression.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollectivity-regression.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollectivity-regression.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,5 @@\n error: `T` does not live long enough\n-  --> $DIR/collectivity-regression.rs:15:5\n+  --> $DIR/collectivity-regression.rs:13:5\n    |\n LL | /     || {\n LL | |"}, {"sha": "c5f9a25a6ea9f3bc9e83fcccefe25458751d6273", "filename": "src/test/ui/generic-associated-types/const-generics-gat-in-trait-return-type-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst-generics-gat-in-trait-return-type-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst-generics-gat-in-trait-return-type-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst-generics-gat-in-trait-return-type-1.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(generic_associated_types)]\n \n // This test unsures that with_opt_const_param returns the\n // def_id of the N param in the Foo::Assoc GAT."}, {"sha": "cd7941ed9af7967d6f3cd1d0bef3f1ce1beb4add", "filename": "src/test/ui/generic-associated-types/const-generics-gat-in-trait-return-type-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst-generics-gat-in-trait-return-type-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst-generics-gat-in-trait-return-type-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst-generics-gat-in-trait-return-type-2.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(generic_associated_types)]\n \n // This test unsures that with_opt_const_param returns the\n // def_id of the N param in the Foo::Assoc GAT."}, {"sha": "db61fc08005bf32d1f3c9dc59888947766390fff", "filename": "src/test/ui/generic-associated-types/const-generics-gat-in-trait-return-type-3.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst-generics-gat-in-trait-return-type-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst-generics-gat-in-trait-return-type-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst-generics-gat-in-trait-return-type-3.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(generic_associated_types)]\n \n // This test unsures that with_opt_const_param returns the\n // def_id of the N param in the Bar::Assoc GAT."}, {"sha": "d2cb12697e4231e4cc987c47678c970dbcc36ad6", "filename": "src/test/ui/generic-associated-types/const_params_have_right_type.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst_params_have_right_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst_params_have_right_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst_params_have_right_type.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,3 @@\n-#![feature(generic_associated_types)]\n-\n trait Trait {\n     type Foo<const N: u8>;\n }"}, {"sha": "fdedd3bf5fbff65f8a1222dbe4a1fce8cc558825", "filename": "src/test/ui/generic-associated-types/const_params_have_right_type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst_params_have_right_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst_params_have_right_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst_params_have_right_type.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,5 @@\n error[E0053]: type `Foo` has an incompatible generic parameter for trait `Trait`\n-  --> $DIR/const_params_have_right_type.rs:8:14\n+  --> $DIR/const_params_have_right_type.rs:6:14\n    |\n LL | trait Trait {\n    |       -----"}, {"sha": "c78a549970d802477f2ae1f9be7c073d4180ae34", "filename": "src/test/ui/generic-associated-types/constraint-assoc-type-suggestion.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconstraint-assoc-type-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconstraint-assoc-type-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconstraint-assoc-type-suggestion.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,7 +1,5 @@\n // Test that correct syntax is used in suggestion to constrain associated type\n \n-#![feature(generic_associated_types)]\n-\n trait X {\n     type Y<T>;\n }"}, {"sha": "96c4330fec027f987a0ba181b41c6e23129d8ae2", "filename": "src/test/ui/generic-associated-types/constraint-assoc-type-suggestion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconstraint-assoc-type-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconstraint-assoc-type-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconstraint-assoc-type-suggestion.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/constraint-assoc-type-suggestion.rs:12:23\n+  --> $DIR/constraint-assoc-type-suggestion.rs:10:23\n    |\n LL |     let b: Vec<i32> = a;\n    |            --------   ^ expected struct `Vec`, found associated type"}, {"sha": "5cb07f55883437b63bbfaf604667930f633c9467", "filename": "src/test/ui/generic-associated-types/construct_with_other_type.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconstruct_with_other_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconstruct_with_other_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconstruct_with_other_type.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,3 @@\n-#![feature(generic_associated_types)]\n-\n // check-pass\n \n use std::ops::Deref;"}, {"sha": "c81cd7e7718ca86f85392142b68bbbde3f5698ae", "filename": "src/test/ui/generic-associated-types/cross-crate-bounds.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcross-crate-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcross-crate-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcross-crate-bounds.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -5,7 +5,7 @@ LL |     type Bar = ();\n    |                ^^ the trait `AsRef<()>` is not implemented for `()`\n    |\n note: required by a bound in `foo_defn::Foo::Bar`\n-  --> $DIR/auxiliary/foo_defn.rs:6:15\n+  --> $DIR/auxiliary/foo_defn.rs:4:15\n    |\n LL |     type Bar: AsRef<()>;\n    |               ^^^^^^^^^ required by this bound in `foo_defn::Foo::Bar`"}, {"sha": "e40093305c403ae9ba7f6f2be2d5f6d6b5dca89c", "filename": "src/test/ui/generic-associated-types/elided-in-expr-position.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Felided-in-expr-position.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Felided-in-expr-position.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Felided-in-expr-position.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,4 +1,3 @@\n-#![feature(generic_associated_types)]\n #![allow(unused)]\n \n pub trait Trait  {"}, {"sha": "20f35c3c13709a4f48fa4112e340c27933673970", "filename": "src/test/ui/generic-associated-types/elided-in-expr-position.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Felided-in-expr-position.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Felided-in-expr-position.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Felided-in-expr-position.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,11 +1,11 @@\n error[E0107]: missing generics for associated type `Trait::Assoc`\n-  --> $DIR/elided-in-expr-position.rs:10:26\n+  --> $DIR/elided-in-expr-position.rs:9:26\n    |\n LL |     fn g(&self) -> Self::Assoc;\n    |                          ^^^^^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/elided-in-expr-position.rs:5:10\n+  --> $DIR/elided-in-expr-position.rs:4:10\n    |\n LL |     type Assoc<'a> where Self: 'a;\n    |          ^^^^^ --\n@@ -15,13 +15,13 @@ LL |     fn g(&self) -> Self::Assoc<'a>;\n    |                          ~~~~~~~~~\n \n error[E0107]: missing generics for associated type `Trait::Assoc`\n-  --> $DIR/elided-in-expr-position.rs:32:26\n+  --> $DIR/elided-in-expr-position.rs:31:26\n    |\n LL |     fn g(&self) -> Self::Assoc {\n    |                          ^^^^^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/elided-in-expr-position.rs:5:10\n+  --> $DIR/elided-in-expr-position.rs:4:10\n    |\n LL |     type Assoc<'a> where Self: 'a;\n    |          ^^^^^ --"}, {"sha": "964c2972d4734014fd29e22769b78ebfa9f35526", "filename": "src/test/ui/generic-associated-types/empty_generics.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fempty_generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fempty_generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fempty_generics.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,3 @@\n-#![feature(generic_associated_types)]\n-\n trait Foo {\n     type Bar<,>;\n     //~^ ERROR expected one of `#`, `>`, `const`, identifier, or lifetime, found `,`"}, {"sha": "b753181cf48085c5e5bda9dec22c67c8a2158c9b", "filename": "src/test/ui/generic-associated-types/empty_generics.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fempty_generics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fempty_generics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fempty_generics.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,5 @@\n error: expected one of `#`, `>`, `const`, identifier, or lifetime, found `,`\n-  --> $DIR/empty_generics.rs:4:14\n+  --> $DIR/empty_generics.rs:2:14\n    |\n LL | trait Foo {\n    |           - while parsing this item list starting here"}, {"sha": "614c4a34c187dd9e5e8c2801603854289c534bc6", "filename": "src/test/ui/generic-associated-types/extended/lending_iterator.base.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fextended%2Flending_iterator.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fextended%2Flending_iterator.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fextended%2Flending_iterator.base.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,5 @@\n error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/lending_iterator.rs:14:45\n+  --> $DIR/lending_iterator.rs:13:45\n    |\n LL |     fn from_iter<T: for<'x> LendingIterator<Item<'x> = A>>(iter: T) -> Self;\n    |     ------------------------------------------------------------------------ definition of `from_iter` from trait"}, {"sha": "247761dd04bf45cc18656b7bd8344f6e9c6ea5f9", "filename": "src/test/ui/generic-associated-types/extended/lending_iterator.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fextended%2Flending_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fextended%2Flending_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fextended%2Flending_iterator.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -2,7 +2,6 @@\n //[base] check-fail\n //[extended] check-pass\n \n-#![feature(generic_associated_types)]\n #![cfg_attr(extended, feature(generic_associated_types_extended))]\n #![cfg_attr(extended, allow(incomplete_features))]\n "}, {"sha": "f6b0b644e4064526530d486d65196183b28559f0", "filename": "src/test/ui/generic-associated-types/extended/lending_iterator_2.base.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fextended%2Flending_iterator_2.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fextended%2Flending_iterator_2.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fextended%2Flending_iterator_2.base.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,5 @@\n error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/lending_iterator_2.rs:14:45\n+  --> $DIR/lending_iterator_2.rs:13:45\n    |\n LL |     fn from_iter<T: for<'x> LendingIterator<Item<'x> = A>>(iter: T) -> Self;\n    |     ------------------------------------------------------------------------ definition of `from_iter` from trait"}, {"sha": "eb9c0456a1eed19512b299164fe08a6ca25e52f1", "filename": "src/test/ui/generic-associated-types/extended/lending_iterator_2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fextended%2Flending_iterator_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fextended%2Flending_iterator_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fextended%2Flending_iterator_2.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -2,7 +2,6 @@\n //[base] check-fail\n //[extended] check-pass\n \n-#![feature(generic_associated_types)]\n #![cfg_attr(extended, feature(generic_associated_types_extended))]\n #![cfg_attr(extended, allow(incomplete_features))]\n "}, {"sha": "c1d68812e9356e269a24e2f06a1b16d790522d7b", "filename": "src/test/ui/generic-associated-types/gat-dont-ice-on-absent-feature-2.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/02654a0844f5c8d29bac318c3c6c666da3d8543d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-dont-ice-on-absent-feature-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02654a0844f5c8d29bac318c3c6c666da3d8543d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-dont-ice-on-absent-feature-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-dont-ice-on-absent-feature-2.rs?ref=02654a0844f5c8d29bac318c3c6c666da3d8543d", "patch": "@@ -1,16 +0,0 @@\n-// rust-lang/rust#60654: Do not ICE on an attempt to use GATs that is\n-// missing the feature gate.\n-\n-struct Foo;\n-\n-trait MyTrait {\n-    type Item<T>;\n-    //~^ ERROR generic associated types are unstable [E0658]\n-}\n-\n-impl MyTrait for Foo {\n-    type Item<T> = T;\n-    //~^ ERROR generic associated types are unstable [E0658]\n-}\n-\n-fn main() { }"}, {"sha": "34f536dbe8f647b3a96aa8fa9506e0d4325e5561", "filename": "src/test/ui/generic-associated-types/gat-dont-ice-on-absent-feature-2.stderr", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/02654a0844f5c8d29bac318c3c6c666da3d8543d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-dont-ice-on-absent-feature-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02654a0844f5c8d29bac318c3c6c666da3d8543d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-dont-ice-on-absent-feature-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-dont-ice-on-absent-feature-2.stderr?ref=02654a0844f5c8d29bac318c3c6c666da3d8543d", "patch": "@@ -1,21 +0,0 @@\n-error[E0658]: generic associated types are unstable\n-  --> $DIR/gat-dont-ice-on-absent-feature-2.rs:7:5\n-   |\n-LL |     type Item<T>;\n-   |     ^^^^^^^^^^^^^\n-   |\n-   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-   = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n-\n-error[E0658]: generic associated types are unstable\n-  --> $DIR/gat-dont-ice-on-absent-feature-2.rs:12:5\n-   |\n-LL |     type Item<T> = T;\n-   |     ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-   = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "e8fc47d2a59f9d01edacbac1f11235e600e5b5b9", "filename": "src/test/ui/generic-associated-types/gat-dont-ice-on-absent-feature.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/02654a0844f5c8d29bac318c3c6c666da3d8543d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-dont-ice-on-absent-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02654a0844f5c8d29bac318c3c6c666da3d8543d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-dont-ice-on-absent-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-dont-ice-on-absent-feature.rs?ref=02654a0844f5c8d29bac318c3c6c666da3d8543d", "patch": "@@ -1,16 +0,0 @@\n-// rust-lang/rust#60654: Do not ICE on an attempt to use GATs that is\n-// missing the feature gate.\n-\n-struct Foo;\n-\n-impl Iterator for Foo {\n-    type Item<'b> = &'b Foo;\n-    //~^ ERROR generic associated types are unstable [E0658]\n-    //~| ERROR lifetime parameters or bounds on type `Item` do not match the trait declaration\n-\n-    fn next(&mut self) -> Option<Self::Item> {\n-        None\n-    }\n-}\n-\n-fn main() { }"}, {"sha": "ec36886f7b51fc7825ef80d5a4a344cc65dbae4c", "filename": "src/test/ui/generic-associated-types/gat-dont-ice-on-absent-feature.stderr", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/02654a0844f5c8d29bac318c3c6c666da3d8543d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-dont-ice-on-absent-feature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02654a0844f5c8d29bac318c3c6c666da3d8543d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-dont-ice-on-absent-feature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-dont-ice-on-absent-feature.stderr?ref=02654a0844f5c8d29bac318c3c6c666da3d8543d", "patch": "@@ -1,19 +0,0 @@\n-error[E0658]: generic associated types are unstable\n-  --> $DIR/gat-dont-ice-on-absent-feature.rs:7:5\n-   |\n-LL |     type Item<'b> = &'b Foo;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-   = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n-\n-error[E0195]: lifetime parameters or bounds on type `Item` do not match the trait declaration\n-  --> $DIR/gat-dont-ice-on-absent-feature.rs:7:14\n-   |\n-LL |     type Item<'b> = &'b Foo;\n-   |              ^^^^ lifetimes do not match type in trait\n-\n-error: aborting due to 2 previous errors\n-\n-Some errors have detailed explanations: E0195, E0658.\n-For more information about an error, try `rustc --explain E0195`."}, {"sha": "86b164ba7d8a879cc91f5c40e45d428ec6690ff8", "filename": "src/test/ui/generic-associated-types/gat-in-trait-path-undeclared-lifetime.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path-undeclared-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path-undeclared-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path-undeclared-lifetime.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,3 @@\n-#![feature(generic_associated_types)]\n-\n trait X {\n   type Y<'x>;\n }"}, {"sha": "b77f10084c928ee654324d29568e9687f6030bd7", "filename": "src/test/ui/generic-associated-types/gat-in-trait-path-undeclared-lifetime.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path-undeclared-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path-undeclared-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path-undeclared-lifetime.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,5 @@\n error[E0261]: use of undeclared lifetime name `'x`\n-  --> $DIR/gat-in-trait-path-undeclared-lifetime.rs:8:35\n+  --> $DIR/gat-in-trait-path-undeclared-lifetime.rs:6:35\n    |\n LL |   fn _f(arg : Box<dyn for<'a> X<Y<'x> = &'a [u32]>>) {}\n    |                                   ^^ undeclared lifetime\n@@ -15,7 +15,7 @@ LL |   fn _f<'x>(arg : Box<dyn for<'a> X<Y<'x> = &'a [u32]>>) {}\n    |        ++++\n \n error[E0582]: binding for associated type `Y` references lifetime `'a`, which does not appear in the trait input types\n-  --> $DIR/gat-in-trait-path-undeclared-lifetime.rs:8:33\n+  --> $DIR/gat-in-trait-path-undeclared-lifetime.rs:6:33\n    |\n LL |   fn _f(arg : Box<dyn for<'a> X<Y<'x> = &'a [u32]>>) {}\n    |                                 ^^^^^^^^^^^^^^^^^"}, {"sha": "fd54faaf37cb765094031ff52fd6d57461feac00", "filename": "src/test/ui/generic-associated-types/gat-in-trait-path.base.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path.base.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,11 +1,11 @@\n error[E0038]: the trait `Foo` cannot be made into an object\n-  --> $DIR/gat-in-trait-path.rs:27:17\n+  --> $DIR/gat-in-trait-path.rs:26:17\n    |\n LL | fn f(_arg : Box<dyn for<'a> Foo<A<'a> = &'a ()>>) {}\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `Foo` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/gat-in-trait-path.rs:11:10\n+  --> $DIR/gat-in-trait-path.rs:10:10\n    |\n LL | trait Foo {\n    |       --- this trait cannot be made into an object..."}, {"sha": "c55f5a726bdcb11285f2c013bfb14e85e38bbf2c", "filename": "src/test/ui/generic-associated-types/gat-in-trait-path.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -2,7 +2,6 @@\n //[base] check-fail\n //[extended] check-pass\n \n-#![feature(generic_associated_types)]\n #![feature(associated_type_defaults)]\n #![cfg_attr(extended, feature(generic_associated_types_extended))]\n #![cfg_attr(extended, allow(incomplete_features))]"}, {"sha": "607ea1759888c6e857e4c3aa0dc69ef0bb95ac63", "filename": "src/test/ui/generic-associated-types/gat-incomplete-warning.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/02654a0844f5c8d29bac318c3c6c666da3d8543d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-incomplete-warning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02654a0844f5c8d29bac318c3c6c666da3d8543d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-incomplete-warning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-incomplete-warning.rs?ref=02654a0844f5c8d29bac318c3c6c666da3d8543d", "patch": "@@ -1,5 +0,0 @@\n-// run-pass\n-\n-#![feature(generic_associated_types)]\n-\n-fn main() {}"}, {"sha": "d00c036fbd5506b0cb187606feae5f2be0549abe", "filename": "src/test/ui/generic-associated-types/gat-trait-path-generic-type-arg.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-generic-type-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-generic-type-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-generic-type-arg.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,3 @@\n-#![feature(generic_associated_types)]\n-\n trait Foo {\n     type F<'a>;\n "}, {"sha": "cb2b9f32bfe7264216c4aaaea7b4c8499859de16", "filename": "src/test/ui/generic-associated-types/gat-trait-path-generic-type-arg.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-generic-type-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-generic-type-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-generic-type-arg.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,5 @@\n error[E0403]: the name `T1` is already used for a generic parameter in this item's generic parameters\n-  --> $DIR/gat-trait-path-generic-type-arg.rs:11:12\n+  --> $DIR/gat-trait-path-generic-type-arg.rs:9:12\n    |\n LL | impl <T, T1> Foo for T {\n    |          -- first use of `T1`\n@@ -8,13 +8,13 @@ LL |     type F<T1> = &[u8];\n    |            ^^ already used\n \n error[E0637]: `&` without an explicit lifetime name cannot be used here\n-  --> $DIR/gat-trait-path-generic-type-arg.rs:11:18\n+  --> $DIR/gat-trait-path-generic-type-arg.rs:9:18\n    |\n LL |     type F<T1> = &[u8];\n    |                  ^ explicit lifetime name needed here\n \n error[E0207]: the type parameter `T1` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/gat-trait-path-generic-type-arg.rs:9:10\n+  --> $DIR/gat-trait-path-generic-type-arg.rs:7:10\n    |\n LL | impl <T, T1> Foo for T {\n    |          ^^ unconstrained type parameter"}, {"sha": "83b86f04a957ff77728d4f74b7e2721f20229182", "filename": "src/test/ui/generic-associated-types/gat-trait-path-missing-lifetime.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-missing-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-missing-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-missing-lifetime.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,3 @@\n-#![feature(generic_associated_types)]\n-\n trait X {\n   type Y<'a>;\n "}, {"sha": "452dfefd1e3d5ac3b6d90d0cbce2e4e3a2b47e36", "filename": "src/test/ui/generic-associated-types/gat-trait-path-missing-lifetime.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-missing-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-missing-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-missing-lifetime.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,11 +1,11 @@\n error[E0107]: missing generics for associated type `X::Y`\n-  --> $DIR/gat-trait-path-missing-lifetime.rs:10:20\n+  --> $DIR/gat-trait-path-missing-lifetime.rs:8:20\n    |\n LL |   fn foo<'a, T1: X<Y = T1>>(t : T1) -> T1::Y<'a> {\n    |                    ^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/gat-trait-path-missing-lifetime.rs:4:8\n+  --> $DIR/gat-trait-path-missing-lifetime.rs:2:8\n    |\n LL |   type Y<'a>;\n    |        ^ --\n@@ -15,13 +15,13 @@ LL |   fn foo<'a, T1: X<Y<'a> = T1>>(t : T1) -> T1::Y<'a> {\n    |                    ~~~~~\n \n error[E0107]: missing generics for associated type `X::Y`\n-  --> $DIR/gat-trait-path-missing-lifetime.rs:10:20\n+  --> $DIR/gat-trait-path-missing-lifetime.rs:8:20\n    |\n LL |   fn foo<'a, T1: X<Y = T1>>(t : T1) -> T1::Y<'a> {\n    |                    ^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/gat-trait-path-missing-lifetime.rs:4:8\n+  --> $DIR/gat-trait-path-missing-lifetime.rs:2:8\n    |\n LL |   type Y<'a>;\n    |        ^ --"}, {"sha": "9eb069637c68518b97ff666dd0e7c3f5e4d603ed", "filename": "src/test/ui/generic-associated-types/gat-trait-path-parenthesised-args.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,3 @@\n-#![feature(generic_associated_types)]\n-\n trait X {\n   type Y<'a>;\n }"}, {"sha": "e55a21e19f044beabdb6153717fd9b6b0bad1dba", "filename": "src/test/ui/generic-associated-types/gat-trait-path-parenthesised-args.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,11 +1,11 @@\n error: lifetime in trait object type must be followed by `+`\n-  --> $DIR/gat-trait-path-parenthesised-args.rs:7:29\n+  --> $DIR/gat-trait-path-parenthesised-args.rs:5:29\n    |\n LL | fn foo<'a>(arg: Box<dyn X<Y('a) = &'a ()>>) {}\n    |                             ^^\n \n error: parenthesized generic arguments cannot be used in associated type constraints\n-  --> $DIR/gat-trait-path-parenthesised-args.rs:7:27\n+  --> $DIR/gat-trait-path-parenthesised-args.rs:5:27\n    |\n LL | fn foo<'a>(arg: Box<dyn X<Y('a) = &'a ()>>) {}\n    |                           ^^^^^\n@@ -16,21 +16,21 @@ LL | fn foo<'a>(arg: Box<dyn X<Y<'a> = &'a ()>>) {}\n    |                            ~  ~\n \n error: parenthesized generic arguments cannot be used in associated type constraints\n-  --> $DIR/gat-trait-path-parenthesised-args.rs:14:27\n+  --> $DIR/gat-trait-path-parenthesised-args.rs:12:27\n    |\n LL | fn bar<'a>(arg: Box<dyn X<Y() = ()>>) {}\n    |                           ^--\n    |                            |\n    |                            help: remove these parentheses\n \n error[E0107]: this associated type takes 1 lifetime argument but 0 lifetime arguments were supplied\n-  --> $DIR/gat-trait-path-parenthesised-args.rs:7:27\n+  --> $DIR/gat-trait-path-parenthesised-args.rs:5:27\n    |\n LL | fn foo<'a>(arg: Box<dyn X<Y('a) = &'a ()>>) {}\n    |                           ^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/gat-trait-path-parenthesised-args.rs:4:8\n+  --> $DIR/gat-trait-path-parenthesised-args.rs:2:8\n    |\n LL |   type Y<'a>;\n    |        ^ --\n@@ -40,27 +40,27 @@ LL | fn foo<'a>(arg: Box<dyn X<Y('a, 'a) = &'a ()>>) {}\n    |                             +++\n \n error[E0107]: this associated type takes 0 generic arguments but 1 generic argument was supplied\n-  --> $DIR/gat-trait-path-parenthesised-args.rs:7:27\n+  --> $DIR/gat-trait-path-parenthesised-args.rs:5:27\n    |\n LL | fn foo<'a>(arg: Box<dyn X<Y('a) = &'a ()>>) {}\n    |                           ^---- help: remove these generics\n    |                           |\n    |                           expected 0 generic arguments\n    |\n note: associated type defined here, with 0 generic parameters\n-  --> $DIR/gat-trait-path-parenthesised-args.rs:4:8\n+  --> $DIR/gat-trait-path-parenthesised-args.rs:2:8\n    |\n LL |   type Y<'a>;\n    |        ^\n \n error[E0107]: this associated type takes 1 lifetime argument but 0 lifetime arguments were supplied\n-  --> $DIR/gat-trait-path-parenthesised-args.rs:14:27\n+  --> $DIR/gat-trait-path-parenthesised-args.rs:12:27\n    |\n LL | fn bar<'a>(arg: Box<dyn X<Y() = ()>>) {}\n    |                           ^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/gat-trait-path-parenthesised-args.rs:4:8\n+  --> $DIR/gat-trait-path-parenthesised-args.rs:2:8\n    |\n LL |   type Y<'a>;\n    |        ^ --"}, {"sha": "fdc5a72671caabc060e0ca7bd7f266bf5910dfd5", "filename": "src/test/ui/generic-associated-types/generic-associated-type-bounds.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-type-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-type-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-type-bounds.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,7 +1,5 @@\n // run-pass\n \n-#![feature(generic_associated_types)]\n-\n pub trait X {\n     type Y<'a> where Self: 'a;\n     fn m(&self) -> Self::Y<'_>;"}, {"sha": "bbdfffafedb73add253e313a9a900c9480418edf", "filename": "src/test/ui/generic-associated-types/generic-associated-types-where.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-types-where.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-types-where.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-types-where.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,3 @@\n-#![feature(generic_associated_types)]\n-\n // Checking the interaction with this other feature\n #![feature(associated_type_defaults)]\n "}, {"sha": "9a745c099c0edfc114f335a6a8a3de5343f97d65", "filename": "src/test/ui/generic-associated-types/generic-associated-types-where.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-types-where.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-types-where.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-types-where.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: `T` doesn't implement `std::fmt::Display`\n-  --> $DIR/generic-associated-types-where.rs:20:22\n+  --> $DIR/generic-associated-types-where.rs:18:22\n    |\n LL |     type Assoc2<T> = Vec<T>;\n    |                      ^^^^^^ `T` cannot be formatted with the default formatter\n@@ -11,7 +11,7 @@ LL |     type Assoc2<T: std::fmt::Display> = Vec<T>;\n    |                  +++++++++++++++++++\n \n error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/generic-associated-types-where.rs:22:38\n+  --> $DIR/generic-associated-types-where.rs:20:38\n    |\n LL |     type Assoc3<T>;\n    |     -------------- definition of `Assoc3` from trait"}, {"sha": "2cb218bf8f251edd145e2883f87e5efe4cd2e34f", "filename": "src/test/ui/generic-associated-types/generic_associated_type_undeclared_lifetimes.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,3 @@\n-#![feature(generic_associated_types)]\n-\n use std::ops::Deref;\n \n trait Iterable {"}, {"sha": "396ff15ab1a45418f799172b5689aee895d95bd3", "filename": "src/test/ui/generic-associated-types/generic_associated_type_undeclared_lifetimes.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,5 @@\n error[E0261]: use of undeclared lifetime name `'b`\n-  --> $DIR/generic_associated_type_undeclared_lifetimes.rs:8:37\n+  --> $DIR/generic_associated_type_undeclared_lifetimes.rs:6:37\n    |\n LL |         + Deref<Target = Self::Item<'b>>;\n    |                                     ^^ undeclared lifetime\n@@ -19,7 +19,7 @@ LL | trait Iterable<'b> {\n    |               ++++\n \n error[E0261]: use of undeclared lifetime name `'undeclared`\n-  --> $DIR/generic_associated_type_undeclared_lifetimes.rs:11:41\n+  --> $DIR/generic_associated_type_undeclared_lifetimes.rs:9:41\n    |\n LL |     fn iter<'a>(&'a self) -> Self::Iter<'undeclared>;\n    |                                         ^^^^^^^^^^^ undeclared lifetime"}, {"sha": "01165fcebaf778c1b82813a6cda1f62eb130c07c", "filename": "src/test/ui/generic-associated-types/impl_bounds.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,4 +1,3 @@\n-#![feature(generic_associated_types)]\n #![feature(associated_type_defaults)]\n \n trait Foo {"}, {"sha": "442d4f33690ebd793e8b1aba86224b9a53dd1b08", "filename": "src/test/ui/generic-associated-types/impl_bounds.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,5 @@\n error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/impl_bounds.rs:15:39\n+  --> $DIR/impl_bounds.rs:14:39\n    |\n LL |     type A<'a> where Self: 'a;\n    |     ---------- definition of `A` from trait\n@@ -8,7 +8,7 @@ LL |     type A<'a> = (&'a ()) where Self: 'static;\n    |                                       ^^^^^^^ impl has extra requirement `T: 'static`\n \n error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/impl_bounds.rs:17:48\n+  --> $DIR/impl_bounds.rs:16:48\n    |\n LL |     type B<'a, 'b> where 'a: 'b;\n    |     -------------- definition of `B` from trait\n@@ -17,7 +17,7 @@ LL |     type B<'a, 'b> = (&'a(), &'b ()) where 'b: 'a;\n    |                                                ^^ impl has extra requirement `'b: 'a`\n \n error[E0478]: lifetime bound not satisfied\n-  --> $DIR/impl_bounds.rs:17:22\n+  --> $DIR/impl_bounds.rs:16:22\n    |\n LL |     type B<'a, 'b> where 'a: 'b;\n    |     -------------- definition of `B` from trait\n@@ -26,29 +26,29 @@ LL |     type B<'a, 'b> = (&'a(), &'b ()) where 'b: 'a;\n    |                      ^^^^^^^^^^^^^^^             - help: try copying this clause from the trait: `, 'a: 'b`\n    |\n note: lifetime parameter instantiated with the lifetime `'a` as defined here\n-  --> $DIR/impl_bounds.rs:17:12\n+  --> $DIR/impl_bounds.rs:16:12\n    |\n LL |     type B<'a, 'b> = (&'a(), &'b ()) where 'b: 'a;\n    |            ^^\n note: but lifetime parameter must outlive the lifetime `'b` as defined here\n-  --> $DIR/impl_bounds.rs:17:16\n+  --> $DIR/impl_bounds.rs:16:16\n    |\n LL |     type B<'a, 'b> = (&'a(), &'b ()) where 'b: 'a;\n    |                ^^\n \n error[E0277]: the trait bound `T: Copy` is not satisfied\n-  --> $DIR/impl_bounds.rs:20:33\n+  --> $DIR/impl_bounds.rs:19:33\n    |\n LL |     type C = String where Self: Copy;\n    |                                 ^^^^ the trait `Copy` is not implemented for `T`\n    |\n note: required for `Fooy<T>` to implement `Copy`\n-  --> $DIR/impl_bounds.rs:11:10\n+  --> $DIR/impl_bounds.rs:10:10\n    |\n LL | #[derive(Copy, Clone)]\n    |          ^^^^\n note: the requirement `Fooy<T>: Copy` appears on the `impl`'s associated type `C` but not on the corresponding trait's associated type\n-  --> $DIR/impl_bounds.rs:7:10\n+  --> $DIR/impl_bounds.rs:6:10\n    |\n LL | trait Foo {\n    |       --- in this trait\n@@ -62,18 +62,18 @@ LL | impl<T: std::marker::Copy> Foo for Fooy<T> {\n    |       +++++++++++++++++++\n \n error[E0277]: the trait bound `T: Copy` is not satisfied\n-  --> $DIR/impl_bounds.rs:22:24\n+  --> $DIR/impl_bounds.rs:21:24\n    |\n LL |     fn d() where Self: Copy {}\n    |                        ^^^^ the trait `Copy` is not implemented for `T`\n    |\n note: required for `Fooy<T>` to implement `Copy`\n-  --> $DIR/impl_bounds.rs:11:10\n+  --> $DIR/impl_bounds.rs:10:10\n    |\n LL | #[derive(Copy, Clone)]\n    |          ^^^^\n note: the requirement `Fooy<T>: Copy` appears on the `impl`'s method `d` but not on the corresponding trait's method\n-  --> $DIR/impl_bounds.rs:8:8\n+  --> $DIR/impl_bounds.rs:7:8\n    |\n LL | trait Foo {\n    |       --- in this trait"}, {"sha": "88f829ea25a5e9de3fcf359e78e4a40112e48dfd", "filename": "src/test/ui/generic-associated-types/impl_bounds_ok.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds_ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds_ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds_ok.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,6 +1,5 @@\n // check-pass\n \n-#![feature(generic_associated_types)]\n #![feature(associated_type_defaults)]\n \n trait Foo {"}, {"sha": "80d0fa5ad34bee2a2001490891ab153bcc25f0dc", "filename": "src/test/ui/generic-associated-types/issue-101020.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-101020.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-101020.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-101020.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,3 @@\n-#![feature(generic_associated_types)]\n-\n pub trait LendingIterator {\n     type Item<'a>\n     where"}, {"sha": "b4e94cb83f7388c2647df7aaaf46f5205da55069", "filename": "src/test/ui/generic-associated-types/issue-101020.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-101020.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-101020.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-101020.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,18 +1,18 @@\n error[E0277]: the trait bound `for<'a> &'a mut (): Foo<&'a mut ()>` is not satisfied\n-  --> $DIR/issue-101020.rs:33:5\n+  --> $DIR/issue-101020.rs:31:5\n    |\n LL |     (&mut EmptyIter).consume(());\n    |     ^^^^^^^^^^^^^^^^ ------- required by a bound introduced by this call\n    |     |\n    |     the trait `for<'a> Foo<&'a mut ()>` is not implemented for `&'a mut ()`\n    |\n note: required for `&'a mut ()` to implement `for<'a> FuncInput<'a, &'a mut ()>`\n-  --> $DIR/issue-101020.rs:29:20\n+  --> $DIR/issue-101020.rs:27:20\n    |\n LL | impl<'a, T, F: 'a> FuncInput<'a, F> for T where F: Foo<T> {}\n    |                    ^^^^^^^^^^^^^^^^     ^\n note: required by a bound in `LendingIterator::consume`\n-  --> $DIR/issue-101020.rs:11:33\n+  --> $DIR/issue-101020.rs:9:33\n    |\n LL |     fn consume<F>(self, _f: F)\n    |        ------- required by a bound in this"}, {"sha": "3d1b88ddf299d27799b5e8b5e8631f5adea86396", "filename": "src/test/ui/generic-associated-types/issue-47206-where-clause.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-47206-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-47206-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-47206-where-clause.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,7 +1,5 @@\n // Check that this program doesn't cause the compiler to error without output.\n \n-#![feature(generic_associated_types)]\n-\n trait Foo {\n     type Assoc3<T>;\n }"}, {"sha": "7006744df4987bef45a32c26c6564fef42c32714", "filename": "src/test/ui/generic-associated-types/issue-47206-where-clause.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-47206-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-47206-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-47206-where-clause.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,5 @@\n error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/issue-47206-where-clause.rs:12:38\n+  --> $DIR/issue-47206-where-clause.rs:10:38\n    |\n LL |     type Assoc3<T>;\n    |     -------------- definition of `Assoc3` from trait"}, {"sha": "625ccfe89e09f9565bc54c3ef3b2755adb1f3b41", "filename": "src/test/ui/generic-associated-types/issue-58694-parameter-out-of-range.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-58694-parameter-out-of-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-58694-parameter-out-of-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-58694-parameter-out-of-range.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,7 +1,5 @@\n // check-pass\n \n-#![feature(generic_associated_types)]\n-\n trait Cert {\n     type PublicKey<'a>: From<&'a [u8]>;\n }"}, {"sha": "c1140bff82bae1e8461ec698966cfdb75c1ae23b", "filename": "src/test/ui/generic-associated-types/issue-62326-parameter-out-of-range.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-62326-parameter-out-of-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-62326-parameter-out-of-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-62326-parameter-out-of-range.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,3 @@\n-#![feature(generic_associated_types)]\n-\n // check-pass\n \n trait Iterator {"}, {"sha": "b6c7c70cd83183d85b0085ec2598de2f2be9fb16", "filename": "src/test/ui/generic-associated-types/issue-67424.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67424.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67424.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67424.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,3 +1,4 @@\n+// check-pass\n // Fixed by #67160\n \n trait Trait1 {\n@@ -6,7 +7,6 @@ trait Trait1 {\n \n trait Trait2 {\n     type Type1<B>: Trait1<A=B>;\n-    //~^ ERROR: generic associated types are unstable\n }\n \n fn main() {}"}, {"sha": "bbb7d56f5928e071a8e82d8e628f7bb7e89424fc", "filename": "src/test/ui/generic-associated-types/issue-67424.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/02654a0844f5c8d29bac318c3c6c666da3d8543d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67424.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02654a0844f5c8d29bac318c3c6c666da3d8543d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67424.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67424.stderr?ref=02654a0844f5c8d29bac318c3c6c666da3d8543d", "patch": "@@ -1,12 +0,0 @@\n-error[E0658]: generic associated types are unstable\n-  --> $DIR/issue-67424.rs:8:5\n-   |\n-LL |     type Type1<B>: Trait1<A=B>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-   = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "4cc68530ee1a66307c7987f0762c191dff0f3a8a", "filename": "src/test/ui/generic-associated-types/issue-67510-pass.base.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510-pass.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510-pass.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510-pass.base.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,11 +1,11 @@\n error[E0038]: the trait `X` cannot be made into an object\n-  --> $DIR/issue-67510-pass.rs:13:23\n+  --> $DIR/issue-67510-pass.rs:12:23\n    |\n LL | fn _func1<'a>(_x: Box<dyn X<Y<'a>=&'a ()>>) {}\n    |                       ^^^^^^^^^^^^^^^^^^^ `X` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/issue-67510-pass.rs:10:10\n+  --> $DIR/issue-67510-pass.rs:9:10\n    |\n LL | trait X {\n    |       - this trait cannot be made into an object..."}, {"sha": "66ce3e807a15007397b4e74f6f1382934fb79f00", "filename": "src/test/ui/generic-associated-types/issue-67510-pass.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510-pass.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -2,7 +2,6 @@\n //[base] check-fail\n //[extended] check-pass\n \n-#![feature(generic_associated_types)]\n #![cfg_attr(extended, feature(generic_associated_types_extended))]\n #![cfg_attr(extended, allow(incomplete_features))]\n "}, {"sha": "ab5c25d74da7340bb25b7ceab71cf8916307d6a7", "filename": "src/test/ui/generic-associated-types/issue-67510.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,3 @@\n-#![feature(generic_associated_types)]\n-\n trait X {\n     type Y<'a>;\n }"}, {"sha": "d25c5b0f387caa476af9d90640701146a4435517", "filename": "src/test/ui/generic-associated-types/issue-67510.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,5 @@\n error[E0261]: use of undeclared lifetime name `'a`\n-  --> $DIR/issue-67510.rs:7:21\n+  --> $DIR/issue-67510.rs:5:21\n    |\n LL | fn f(x: Box<dyn X<Y<'a> = &'a ()>>) {}\n    |                     ^^ undeclared lifetime\n@@ -15,7 +15,7 @@ LL | fn f<'a>(x: Box<dyn X<Y<'a> = &'a ()>>) {}\n    |     ++++\n \n error[E0261]: use of undeclared lifetime name `'a`\n-  --> $DIR/issue-67510.rs:7:28\n+  --> $DIR/issue-67510.rs:5:28\n    |\n LL | fn f(x: Box<dyn X<Y<'a> = &'a ()>>) {}\n    |                            ^^ undeclared lifetime\n@@ -30,13 +30,13 @@ LL | fn f<'a>(x: Box<dyn X<Y<'a> = &'a ()>>) {}\n    |     ++++\n \n error[E0038]: the trait `X` cannot be made into an object\n-  --> $DIR/issue-67510.rs:7:13\n+  --> $DIR/issue-67510.rs:5:13\n    |\n LL | fn f(x: Box<dyn X<Y<'a> = &'a ()>>) {}\n    |             ^^^^^^^^^^^^^^^^^^^^^ `X` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/issue-67510.rs:4:10\n+  --> $DIR/issue-67510.rs:2:10\n    |\n LL | trait X {\n    |       - this trait cannot be made into an object..."}, {"sha": "f1e779fcb0063ecd1043fadbf4496d5969388fd6", "filename": "src/test/ui/generic-associated-types/issue-68641-check-gat-bounds.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68641-check-gat-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68641-check-gat-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68641-check-gat-bounds.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,7 +1,5 @@\n // Regression test for #68641\n \n-#![feature(generic_associated_types)]\n-\n trait UnsafeCopy {\n     type Item<'a>: Copy;\n "}, {"sha": "6bb7492af8114881f504474a990ec65586ca429a", "filename": "src/test/ui/generic-associated-types/issue-68641-check-gat-bounds.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68641-check-gat-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68641-check-gat-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68641-check-gat-bounds.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `T: Copy` is not satisfied\n-  --> $DIR/issue-68641-check-gat-bounds.rs:14:21\n+  --> $DIR/issue-68641-check-gat-bounds.rs:12:21\n    |\n LL |     type Item<'a> = T;\n    |                     ^ the trait `Copy` is not implemented for `T`\n    |\n note: required by a bound in `UnsafeCopy::Item`\n-  --> $DIR/issue-68641-check-gat-bounds.rs:6:20\n+  --> $DIR/issue-68641-check-gat-bounds.rs:4:20\n    |\n LL |     type Item<'a>: Copy;\n    |                    ^^^^ required by this bound in `UnsafeCopy::Item`"}, {"sha": "f5502adee42630b448df9e82eeca8731ba8cb1f1", "filename": "src/test/ui/generic-associated-types/issue-68642-broken-llvm-ir.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68642-broken-llvm-ir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68642-broken-llvm-ir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68642-broken-llvm-ir.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,7 +1,5 @@\n // Regression test for #68642\n \n-#![feature(generic_associated_types)]\n-\n trait Fun {\n     type F<'a>: Fn() -> u32;\n "}, {"sha": "07452137b5bd6ee587b0fcb2496fc3ff7cee68c1", "filename": "src/test/ui/generic-associated-types/issue-68642-broken-llvm-ir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68642-broken-llvm-ir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68642-broken-llvm-ir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68642-broken-llvm-ir.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,12 +1,12 @@\n error[E0277]: expected a `Fn<()>` closure, found `T`\n-  --> $DIR/issue-68642-broken-llvm-ir.rs:14:18\n+  --> $DIR/issue-68642-broken-llvm-ir.rs:12:18\n    |\n LL |     type F<'a> = Self;\n    |                  ^^^^ expected an `Fn<()>` closure, found `T`\n    |\n    = note: wrap the `T` in a closure with no arguments: `|| { /* code */ }`\n note: required by a bound in `Fun::F`\n-  --> $DIR/issue-68642-broken-llvm-ir.rs:6:17\n+  --> $DIR/issue-68642-broken-llvm-ir.rs:4:17\n    |\n LL |     type F<'a>: Fn() -> u32;\n    |                 ^^^^^^^^^^^ required by this bound in `Fun::F`"}, {"sha": "6050a8bf561817654b1af49c255a773edf063546", "filename": "src/test/ui/generic-associated-types/issue-68643-broken-mir.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68643-broken-mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68643-broken-mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68643-broken-mir.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,7 +1,5 @@\n // Regression test for #68643\n \n-#![feature(generic_associated_types)]\n-\n trait Fun {\n     type F<'a>: Fn() -> u32;\n "}, {"sha": "31ded5dab95b6cbe4b6db1bc543bed383a4832cf", "filename": "src/test/ui/generic-associated-types/issue-68643-broken-mir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68643-broken-mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68643-broken-mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68643-broken-mir.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,12 +1,12 @@\n error[E0277]: expected a `Fn<()>` closure, found `T`\n-  --> $DIR/issue-68643-broken-mir.rs:14:18\n+  --> $DIR/issue-68643-broken-mir.rs:12:18\n    |\n LL |     type F<'a> = Self;\n    |                  ^^^^ expected an `Fn<()>` closure, found `T`\n    |\n    = note: wrap the `T` in a closure with no arguments: `|| { /* code */ }`\n note: required by a bound in `Fun::F`\n-  --> $DIR/issue-68643-broken-mir.rs:6:17\n+  --> $DIR/issue-68643-broken-mir.rs:4:17\n    |\n LL |     type F<'a>: Fn() -> u32;\n    |                 ^^^^^^^^^^^ required by this bound in `Fun::F`"}, {"sha": "898cfa1e744cf44597ec7d05dbce473071243645", "filename": "src/test/ui/generic-associated-types/issue-68644-codegen-selection.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68644-codegen-selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68644-codegen-selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68644-codegen-selection.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,7 +1,5 @@\n // Regression test for #68644\n \n-#![feature(generic_associated_types)]\n-\n trait Fun {\n     type F<'a>: Fn() -> u32;\n "}, {"sha": "e2f9930cc67fd2a161bfc48db0a8da88dbd2aa68", "filename": "src/test/ui/generic-associated-types/issue-68644-codegen-selection.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68644-codegen-selection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68644-codegen-selection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68644-codegen-selection.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,12 +1,12 @@\n error[E0277]: expected a `Fn<()>` closure, found `T`\n-  --> $DIR/issue-68644-codegen-selection.rs:14:18\n+  --> $DIR/issue-68644-codegen-selection.rs:12:18\n    |\n LL |     type F<'a> = Self;\n    |                  ^^^^ expected an `Fn<()>` closure, found `T`\n    |\n    = note: wrap the `T` in a closure with no arguments: `|| { /* code */ }`\n note: required by a bound in `Fun::F`\n-  --> $DIR/issue-68644-codegen-selection.rs:6:17\n+  --> $DIR/issue-68644-codegen-selection.rs:4:17\n    |\n LL |     type F<'a>: Fn() -> u32;\n    |                 ^^^^^^^^^^^ required by this bound in `Fun::F`"}, {"sha": "60b065bfc31710873f3d3266b3f08c332672936c", "filename": "src/test/ui/generic-associated-types/issue-68645-codegen-fulfillment.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68645-codegen-fulfillment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68645-codegen-fulfillment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68645-codegen-fulfillment.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,7 +1,5 @@\n // Regression test for #68645\n \n-#![feature(generic_associated_types)]\n-\n trait Fun {\n     type F<'a>: Fn() -> u32;\n "}, {"sha": "0065368ad31d93764c01f3364bdfd02612ca432e", "filename": "src/test/ui/generic-associated-types/issue-68645-codegen-fulfillment.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68645-codegen-fulfillment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68645-codegen-fulfillment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68645-codegen-fulfillment.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,12 +1,12 @@\n error[E0277]: expected a `Fn<()>` closure, found `T`\n-  --> $DIR/issue-68645-codegen-fulfillment.rs:14:18\n+  --> $DIR/issue-68645-codegen-fulfillment.rs:12:18\n    |\n LL |     type F<'a> = Self;\n    |                  ^^^^ expected an `Fn<()>` closure, found `T`\n    |\n    = note: wrap the `T` in a closure with no arguments: `|| { /* code */ }`\n note: required by a bound in `Fun::F`\n-  --> $DIR/issue-68645-codegen-fulfillment.rs:6:17\n+  --> $DIR/issue-68645-codegen-fulfillment.rs:4:17\n    |\n LL |     type F<'a>: Fn() -> u32;\n    |                 ^^^^^^^^^^^ required by this bound in `Fun::F`"}, {"sha": "0df41bab32728f9f20cfba5858adfebdee5b00e7", "filename": "src/test/ui/generic-associated-types/issue-68648-1.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68648-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68648-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68648-1.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,8 +1,5 @@\n // check-pass\n \n-#![feature(generic_associated_types)]\n-\n-\n trait Fun {\n     type F<'a>;\n "}, {"sha": "0f963d58f5e82d2826b7ca9807eeaab7b4b9a828", "filename": "src/test/ui/generic-associated-types/issue-68648-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68648-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68648-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68648-2.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,3 @@\n-#![feature(generic_associated_types)]\n-\n trait Fun {\n     type F<'a>;\n "}, {"sha": "b2bef19eb5e9cf0c96cae1dec39f73a07289d5d5", "filename": "src/test/ui/generic-associated-types/issue-68648-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68648-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68648-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68648-2.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/issue-68648-2.rs:14:17\n+  --> $DIR/issue-68648-2.rs:12:17\n    |\n LL | fn bug<'a, T: Fun<F<'a> = T>>(t: T) -> T::F<'a> {\n    |            - this type parameter\n@@ -11,7 +11,7 @@ LL |     T::identity(())\n    = note: expected type parameter `T`\n                    found unit type `()`\n note: associated function defined here\n-  --> $DIR/issue-68648-2.rs:6:8\n+  --> $DIR/issue-68648-2.rs:4:8\n    |\n LL |     fn identity<'a>(t: Self::F<'a>) -> Self::F<'a> { t }\n    |        ^^^^^^^^     --------------"}, {"sha": "7727438779549b745fa685b0d74db885fcff099c", "filename": "src/test/ui/generic-associated-types/issue-68649-pass.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68649-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68649-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68649-pass.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,7 +1,5 @@\n // check-pass\n \n-#![feature(generic_associated_types)]\n-\n trait Fun {\n     type F<'a>;\n "}, {"sha": "170b87cf25281cfa47e04440e251fd92239f392c", "filename": "src/test/ui/generic-associated-types/issue-68653.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68653.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68653.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68653.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -2,8 +2,6 @@\n \n // check-pass\n \n-#![feature(generic_associated_types)]\n-\n trait Fun {\n     type F<'a: 'a>;\n }"}, {"sha": "607cfed0bc649a560bd7f2994194f7d0a646c2b8", "filename": "src/test/ui/generic-associated-types/issue-68656-unsized-values.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68656-unsized-values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68656-unsized-values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68656-unsized-values.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,7 +1,5 @@\n // Regression test for #68656\n \n-#![feature(generic_associated_types)]\n-\n trait UnsafeCopy<T: Copy> {\n     type Item<'a>: std::ops::Deref<Target = T>;\n "}, {"sha": "e8770aedfa1c7940318acbd9200731fa2a91b362", "filename": "src/test/ui/generic-associated-types/issue-68656-unsized-values.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68656-unsized-values.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68656-unsized-values.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68656-unsized-values.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,5 @@\n error[E0271]: type mismatch resolving `<T as Deref>::Target == T`\n-  --> $DIR/issue-68656-unsized-values.rs:15:21\n+  --> $DIR/issue-68656-unsized-values.rs:13:21\n    |\n LL | impl<T: Copy + std::ops::Deref> UnsafeCopy<T> for T {\n    |      - this type parameter\n@@ -9,7 +9,7 @@ LL |     type Item<'a> = T;\n    = note: expected type parameter `T`\n              found associated type `<T as Deref>::Target`\n note: required by a bound in `UnsafeCopy::Item`\n-  --> $DIR/issue-68656-unsized-values.rs:6:36\n+  --> $DIR/issue-68656-unsized-values.rs:4:36\n    |\n LL |     type Item<'a>: std::ops::Deref<Target = T>;\n    |                                    ^^^^^^^^^^ required by this bound in `UnsafeCopy::Item`"}, {"sha": "0edff5e4e3390d8591d9427f405fb7d7356d13a8", "filename": "src/test/ui/generic-associated-types/issue-70303.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-70303.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-70303.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-70303.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,7 +1,5 @@\n // check-pass\n \n-#![feature(generic_associated_types)]\n-\n trait Document {\n     type Cursor<'a>: DocCursor<'a> where Self: 'a;\n "}, {"sha": "8898d4c7d135222f184796eee45aa0dbb79d428a", "filename": "src/test/ui/generic-associated-types/issue-70304.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-70304.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-70304.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-70304.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,3 @@\n-#![feature(generic_associated_types)]\n-\n trait Document {\n     type Cursor<'a>: DocCursor<'a>;\n     //~^ ERROR: missing required bound on `Cursor`"}, {"sha": "99339e9685959b357aa6f46ff013ff8bbfaf5821", "filename": "src/test/ui/generic-associated-types/issue-70304.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-70304.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-70304.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-70304.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,11 +1,11 @@\n error[E0637]: `'_` cannot be used here\n-  --> $DIR/issue-70304.rs:48:41\n+  --> $DIR/issue-70304.rs:46:41\n    |\n LL | fn create_doc() -> impl Document<Cursor<'_> = DocCursorImpl<'_>> {\n    |                                         ^^ `'_` is a reserved lifetime name\n \n error[E0106]: missing lifetime specifier\n-  --> $DIR/issue-70304.rs:48:61\n+  --> $DIR/issue-70304.rs:46:61\n    |\n LL | fn create_doc() -> impl Document<Cursor<'_> = DocCursorImpl<'_>> {\n    |                                                             ^^ expected named lifetime parameter\n@@ -17,7 +17,7 @@ LL | fn create_doc() -> impl Document<Cursor<'_> = DocCursorImpl<'static>> {\n    |                                                             ~~~~~~~\n \n error: missing required bound on `Cursor`\n-  --> $DIR/issue-70304.rs:4:5\n+  --> $DIR/issue-70304.rs:2:5\n    |\n LL |     type Cursor<'a>: DocCursor<'a>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-"}, {"sha": "f0e162d825f9d9c37cf91b7c5aee2d63aec88548", "filename": "src/test/ui/generic-associated-types/issue-71176.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-71176.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-71176.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-71176.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,3 @@\n-#![feature(generic_associated_types)]\n-\n trait Provider {\n     type A<'a>;\n }"}, {"sha": "386c97161c8f1d01fc5ac40ec9f253036f699161", "filename": "src/test/ui/generic-associated-types/issue-71176.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-71176.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-71176.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-71176.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,11 +1,11 @@\n error[E0107]: missing generics for associated type `Provider::A`\n-  --> $DIR/issue-71176.rs:12:27\n+  --> $DIR/issue-71176.rs:10:27\n    |\n LL |   inner: Box<dyn Provider<A = B>>,\n    |                           ^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/issue-71176.rs:4:10\n+  --> $DIR/issue-71176.rs:2:10\n    |\n LL |     type A<'a>;\n    |          ^ --"}, {"sha": "e9ec80074f8966e0b00b515198480adb8a6d92b9", "filename": "src/test/ui/generic-associated-types/issue-74684-1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74684-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74684-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74684-1.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,3 @@\n-#![feature(generic_associated_types)]\n-\n trait Fun {\n     type F<'a>: ?Sized;\n "}, {"sha": "cacc973077ce72f9c918db182135d505b0a77aac", "filename": "src/test/ui/generic-associated-types/issue-74684-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74684-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74684-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74684-1.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `a` does not live long enough\n-  --> $DIR/issue-74684-1.rs:15:26\n+  --> $DIR/issue-74684-1.rs:13:26\n    |\n LL | fn bug<'a, T: ?Sized + Fun<F<'a> = [u8]>>(_ : Box<T>) -> &'static T::F<'a> {\n    |        -- lifetime `'a` defined here"}, {"sha": "ff243af2cb39042bd6da3bd05802423e8a5b8ba7", "filename": "src/test/ui/generic-associated-types/issue-74684-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74684-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74684-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74684-2.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,3 @@\n-#![feature(generic_associated_types)]\n-\n trait Fun {\n     type F<'a>: ?Sized;\n "}, {"sha": "59b85abf5c8cec047d5deedb5c17effce36d89a0", "filename": "src/test/ui/generic-associated-types/issue-74684-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74684-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74684-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74684-2.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,18 +1,18 @@\n error[E0271]: type mismatch resolving `<{integer} as Fun>::F<'_> == [u8]`\n-  --> $DIR/issue-74684-2.rs:23:9\n+  --> $DIR/issue-74684-2.rs:21:9\n    |\n LL |     bug(Box::new(x));\n    |     --- ^^^^^^^^^^^ type mismatch resolving `<{integer} as Fun>::F<'_> == [u8]`\n    |     |\n    |     required by a bound introduced by this call\n    |\n note: expected this to be `[u8]`\n-  --> $DIR/issue-74684-2.rs:10:18\n+  --> $DIR/issue-74684-2.rs:8:18\n    |\n LL |     type F<'a> = i32;\n    |                  ^^^\n note: required by a bound in `bug`\n-  --> $DIR/issue-74684-2.rs:13:28\n+  --> $DIR/issue-74684-2.rs:11:28\n    |\n LL | fn bug<'a, T: ?Sized + Fun<F<'a> = [u8]>>(t: Box<T>) -> &'static T::F<'a> {\n    |                            ^^^^^^^^^^^^ required by this bound in `bug`"}, {"sha": "344afb87f99cf76324b51e3481ec68220d968ccb", "filename": "src/test/ui/generic-associated-types/issue-74816.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74816.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74816.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74816.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,4 @@\n #![feature(associated_type_defaults)]\n-#![feature(generic_associated_types)]\n \n trait Trait1 {\n     fn foo();"}, {"sha": "45018e6976cfb24c66c3990a255e9176086406f0", "filename": "src/test/ui/generic-associated-types/issue-74816.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74816.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74816.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74816.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `Self: Trait1` is not satisfied\n-  --> $DIR/issue-74816.rs:9:31\n+  --> $DIR/issue-74816.rs:8:31\n    |\n LL |     type Associated: Trait1 = Self;\n    |                               ^^^^ the trait `Trait1` is not implemented for `Self`\n    |\n note: required by a bound in `Trait2::Associated`\n-  --> $DIR/issue-74816.rs:9:22\n+  --> $DIR/issue-74816.rs:8:22\n    |\n LL |     type Associated: Trait1 = Self;\n    |                      ^^^^^^ required by this bound in `Trait2::Associated`\n@@ -15,13 +15,13 @@ LL | trait Trait2: Trait1 {\n    |             ++++++++\n \n error[E0277]: the size for values of type `Self` cannot be known at compilation time\n-  --> $DIR/issue-74816.rs:9:31\n+  --> $DIR/issue-74816.rs:8:31\n    |\n LL |     type Associated: Trait1 = Self;\n    |                               ^^^^ doesn't have a size known at compile-time\n    |\n note: required by a bound in `Trait2::Associated`\n-  --> $DIR/issue-74816.rs:9:5\n+  --> $DIR/issue-74816.rs:8:5\n    |\n LL |     type Associated: Trait1 = Self;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Trait2::Associated`"}, {"sha": "10c45d133642001a4ae6945342adeb9a368cc1b6", "filename": "src/test/ui/generic-associated-types/issue-74824.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74824.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74824.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74824.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,4 +1,3 @@\n-#![feature(generic_associated_types)]\n #![feature(associated_type_defaults)]\n \n use std::ops::Deref;"}, {"sha": "623adb1c2ad1ecb832616ad35bd3a91a19bacfa9", "filename": "src/test/ui/generic-associated-types/issue-74824.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74824.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74824.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74824.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,24 +1,24 @@\n error[E0277]: the trait bound `Box<T>: Copy` is not satisfied\n-  --> $DIR/issue-74824.rs:7:26\n+  --> $DIR/issue-74824.rs:6:26\n    |\n LL |     type Copy<T>: Copy = Box<T>;\n    |                          ^^^^^^ the trait `Copy` is not implemented for `Box<T>`\n    |\n note: required by a bound in `UnsafeCopy::Copy`\n-  --> $DIR/issue-74824.rs:7:19\n+  --> $DIR/issue-74824.rs:6:19\n    |\n LL |     type Copy<T>: Copy = Box<T>;\n    |                   ^^^^ required by this bound in `UnsafeCopy::Copy`\n \n error[E0277]: the trait bound `T: Clone` is not satisfied\n-  --> $DIR/issue-74824.rs:7:26\n+  --> $DIR/issue-74824.rs:6:26\n    |\n LL |     type Copy<T>: Copy = Box<T>;\n    |                          ^^^^^^ the trait `Clone` is not implemented for `T`\n    |\n    = note: required for `Box<T>` to implement `Clone`\n note: required by a bound in `UnsafeCopy::Copy`\n-  --> $DIR/issue-74824.rs:7:19\n+  --> $DIR/issue-74824.rs:6:19\n    |\n LL |     type Copy<T>: Copy = Box<T>;\n    |                   ^^^^ required by this bound in `UnsafeCopy::Copy`"}, {"sha": "9556ec6da2537fdf1629d30021e688c5c32404e1", "filename": "src/test/ui/generic-associated-types/issue-76407.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76407.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76407.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76407.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,7 +1,5 @@\n // check-pass\n \n-#![feature(generic_associated_types)]\n-\n trait Marker {}\n \n impl Marker for u32 {}"}, {"sha": "088f69b09f704406a1574f8207a5f5fa8e89dcd0", "filename": "src/test/ui/generic-associated-types/issue-76535.base.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.base.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,11 +1,11 @@\n error[E0107]: missing generics for associated type `SuperTrait::SubType`\n-  --> $DIR/issue-76535.rs:40:33\n+  --> $DIR/issue-76535.rs:39:33\n    |\n LL |     let sub: Box<dyn SuperTrait<SubType = SubStruct>> = Box::new(SuperStruct::new(0));\n    |                                 ^^^^^^^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/issue-76535.rs:10:10\n+  --> $DIR/issue-76535.rs:9:10\n    |\n LL |     type SubType<'a>: SubTrait where Self: 'a;\n    |          ^^^^^^^ --\n@@ -15,13 +15,13 @@ LL |     let sub: Box<dyn SuperTrait<SubType<'a> = SubStruct>> = Box::new(SuperS\n    |                                 ~~~~~~~~~~~\n \n error[E0038]: the trait `SuperTrait` cannot be made into an object\n-  --> $DIR/issue-76535.rs:40:14\n+  --> $DIR/issue-76535.rs:39:14\n    |\n LL |     let sub: Box<dyn SuperTrait<SubType = SubStruct>> = Box::new(SuperStruct::new(0));\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `SuperTrait` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/issue-76535.rs:10:10\n+  --> $DIR/issue-76535.rs:9:10\n    |\n LL | pub trait SuperTrait {\n    |           ---------- this trait cannot be made into an object...\n@@ -30,13 +30,13 @@ LL |     type SubType<'a>: SubTrait where Self: 'a;\n    = help: consider moving `SubType` to another trait\n \n error[E0038]: the trait `SuperTrait` cannot be made into an object\n-  --> $DIR/issue-76535.rs:40:57\n+  --> $DIR/issue-76535.rs:39:57\n    |\n LL |     let sub: Box<dyn SuperTrait<SubType = SubStruct>> = Box::new(SuperStruct::new(0));\n    |                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `SuperTrait` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/issue-76535.rs:10:10\n+  --> $DIR/issue-76535.rs:9:10\n    |\n LL | pub trait SuperTrait {\n    |           ---------- this trait cannot be made into an object..."}, {"sha": "e79f0a73f5b5058dac8edab64c56801b1f1e0826", "filename": "src/test/ui/generic-associated-types/issue-76535.extended.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.extended.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.extended.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.extended.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,11 +1,11 @@\n error[E0107]: missing generics for associated type `SuperTrait::SubType`\n-  --> $DIR/issue-76535.rs:40:33\n+  --> $DIR/issue-76535.rs:39:33\n    |\n LL |     let sub: Box<dyn SuperTrait<SubType = SubStruct>> = Box::new(SuperStruct::new(0));\n    |                                 ^^^^^^^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/issue-76535.rs:10:10\n+  --> $DIR/issue-76535.rs:9:10\n    |\n LL |     type SubType<'a>: SubTrait where Self: 'a;\n    |          ^^^^^^^ --"}, {"sha": "2457a05a0672968f5c10165c5f0e8debc0f16b6f", "filename": "src/test/ui/generic-associated-types/issue-76535.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,6 +1,5 @@\n // revisions: base extended\n \n-#![feature(generic_associated_types)]\n #![cfg_attr(extended, feature(generic_associated_types_extended))]\n #![cfg_attr(extended, allow(incomplete_features))]\n "}, {"sha": "ead78453ecfe3a65af775895197b3e2db71894fb", "filename": "src/test/ui/generic-associated-types/issue-76826.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76826.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76826.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76826.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,7 +1,5 @@\n // run-pass\n \n-#![feature(generic_associated_types)]\n-\n pub trait Iter {\n     type Item<'a> where Self: 'a;\n "}, {"sha": "ebf50bf4ace1181ba57dd4960c177dd1eaca4d61", "filename": "src/test/ui/generic-associated-types/issue-78113-lifetime-mismatch-dyn-trait-box.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78113-lifetime-mismatch-dyn-trait-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78113-lifetime-mismatch-dyn-trait-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78113-lifetime-mismatch-dyn-trait-box.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -2,8 +2,6 @@\n \n // check-fail\n \n-#![feature(generic_associated_types)]\n-\n pub trait A {}\n impl A for &dyn A {}\n impl A for Box<dyn A> {}"}, {"sha": "86e0f574544041c5042c81a30db81999c5eeeeeb", "filename": "src/test/ui/generic-associated-types/issue-78113-lifetime-mismatch-dyn-trait-box.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78113-lifetime-mismatch-dyn-trait-box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78113-lifetime-mismatch-dyn-trait-box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78113-lifetime-mismatch-dyn-trait-box.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,22 +1,22 @@\n error: incompatible lifetime on type\n-  --> $DIR/issue-78113-lifetime-mismatch-dyn-trait-box.rs:17:18\n+  --> $DIR/issue-78113-lifetime-mismatch-dyn-trait-box.rs:15:18\n    |\n LL |     type T<'a> = Box<dyn A + 'a>;\n    |                  ^^^^^^^^^^^^^^^\n    |\n note: because this has an unmet lifetime requirement\n-  --> $DIR/issue-78113-lifetime-mismatch-dyn-trait-box.rs:12:17\n+  --> $DIR/issue-78113-lifetime-mismatch-dyn-trait-box.rs:10:17\n    |\n LL |     type T<'a>: A;\n    |                 ^ introduces a `'static` lifetime requirement\n note: the lifetime `'a` as defined here...\n-  --> $DIR/issue-78113-lifetime-mismatch-dyn-trait-box.rs:17:12\n+  --> $DIR/issue-78113-lifetime-mismatch-dyn-trait-box.rs:15:12\n    |\n LL |     type T<'a> = Box<dyn A + 'a>;\n    |            ^^\n    = note: ...does not necessarily outlive the static lifetime introduced by the compatible `impl`\n note: this has an implicit `'static` lifetime requirement\n-  --> $DIR/issue-78113-lifetime-mismatch-dyn-trait-box.rs:9:20\n+  --> $DIR/issue-78113-lifetime-mismatch-dyn-trait-box.rs:7:20\n    |\n LL | impl A for Box<dyn A> {}\n    |                    ^\n@@ -26,51 +26,51 @@ LL | impl A for Box<dyn A + '_> {}\n    |                      ++++\n \n error: incompatible lifetime on type\n-  --> $DIR/issue-78113-lifetime-mismatch-dyn-trait-box.rs:27:18\n+  --> $DIR/issue-78113-lifetime-mismatch-dyn-trait-box.rs:25:18\n    |\n LL |     type T<'a> = Box<dyn A + 'a>;\n    |                  ^^^^^^^^^^^^^^^\n    |\n note: because this has an unmet lifetime requirement\n-  --> $DIR/issue-78113-lifetime-mismatch-dyn-trait-box.rs:23:17\n+  --> $DIR/issue-78113-lifetime-mismatch-dyn-trait-box.rs:21:17\n    |\n LL |     type T<'a>: C;\n    |                 ^ introduces a `'static` lifetime requirement\n note: the lifetime `'a` as defined here...\n-  --> $DIR/issue-78113-lifetime-mismatch-dyn-trait-box.rs:27:12\n+  --> $DIR/issue-78113-lifetime-mismatch-dyn-trait-box.rs:25:12\n    |\n LL |     type T<'a> = Box<dyn A + 'a>;\n    |            ^^\n note: ...does not necessarily outlive the static lifetime introduced by the compatible `impl`\n-  --> $DIR/issue-78113-lifetime-mismatch-dyn-trait-box.rs:21:1\n+  --> $DIR/issue-78113-lifetime-mismatch-dyn-trait-box.rs:19:1\n    |\n LL | impl C for Box<dyn A + 'static> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: incompatible lifetime on type\n-  --> $DIR/issue-78113-lifetime-mismatch-dyn-trait-box.rs:37:18\n+  --> $DIR/issue-78113-lifetime-mismatch-dyn-trait-box.rs:35:18\n    |\n LL |     type T<'a> = (Box<dyn A + 'a>, Box<dyn A + 'a>);\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: because this has an unmet lifetime requirement\n-  --> $DIR/issue-78113-lifetime-mismatch-dyn-trait-box.rs:33:17\n+  --> $DIR/issue-78113-lifetime-mismatch-dyn-trait-box.rs:31:17\n    |\n LL |     type T<'a>: E;\n    |                 ^ introduces a `'static` lifetime requirement\n note: the lifetime `'a` as defined here...\n-  --> $DIR/issue-78113-lifetime-mismatch-dyn-trait-box.rs:37:12\n+  --> $DIR/issue-78113-lifetime-mismatch-dyn-trait-box.rs:35:12\n    |\n LL |     type T<'a> = (Box<dyn A + 'a>, Box<dyn A + 'a>);\n    |            ^^\n    = note: ...does not necessarily outlive the static lifetime introduced by the compatible `impl`\n note: this has an implicit `'static` lifetime requirement\n-  --> $DIR/issue-78113-lifetime-mismatch-dyn-trait-box.rs:31:21\n+  --> $DIR/issue-78113-lifetime-mismatch-dyn-trait-box.rs:29:21\n    |\n LL | impl E for (Box<dyn A>, Box<dyn A>) {}\n    |                     ^\n note: this has an implicit `'static` lifetime requirement\n-  --> $DIR/issue-78113-lifetime-mismatch-dyn-trait-box.rs:31:33\n+  --> $DIR/issue-78113-lifetime-mismatch-dyn-trait-box.rs:29:33\n    |\n LL | impl E for (Box<dyn A>, Box<dyn A>) {}\n    |                                 ^"}, {"sha": "514f8d45a15f4cfe8dbe86a1d553bb84eebf8367", "filename": "src/test/ui/generic-associated-types/issue-78671.base.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.base.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,11 +1,11 @@\n error[E0107]: missing generics for associated type `CollectionFamily::Member`\n-  --> $DIR/issue-78671.rs:11:47\n+  --> $DIR/issue-78671.rs:10:47\n    |\n LL |     Box::new(Family) as &dyn CollectionFamily<Member=usize>\n    |                                               ^^^^^^ expected 1 generic argument\n    |\n note: associated type defined here, with 1 generic parameter: `T`\n-  --> $DIR/issue-78671.rs:8:10\n+  --> $DIR/issue-78671.rs:7:10\n    |\n LL |     type Member<T>;\n    |          ^^^^^^ -\n@@ -15,13 +15,13 @@ LL |     Box::new(Family) as &dyn CollectionFamily<Member<T>=usize>\n    |                                               ~~~~~~~~~\n \n error[E0038]: the trait `CollectionFamily` cannot be made into an object\n-  --> $DIR/issue-78671.rs:11:25\n+  --> $DIR/issue-78671.rs:10:25\n    |\n LL |     Box::new(Family) as &dyn CollectionFamily<Member=usize>\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `CollectionFamily` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/issue-78671.rs:8:10\n+  --> $DIR/issue-78671.rs:7:10\n    |\n LL | trait CollectionFamily {\n    |       ---------------- this trait cannot be made into an object..."}, {"sha": "6fa09a4c7e596824004f5a3c787efdc49b90f4ea", "filename": "src/test/ui/generic-associated-types/issue-78671.extended.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.extended.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.extended.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.extended.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,11 +1,11 @@\n error[E0107]: missing generics for associated type `CollectionFamily::Member`\n-  --> $DIR/issue-78671.rs:11:47\n+  --> $DIR/issue-78671.rs:10:47\n    |\n LL |     Box::new(Family) as &dyn CollectionFamily<Member=usize>\n    |                                               ^^^^^^ expected 1 generic argument\n    |\n note: associated type defined here, with 1 generic parameter: `T`\n-  --> $DIR/issue-78671.rs:8:10\n+  --> $DIR/issue-78671.rs:7:10\n    |\n LL |     type Member<T>;\n    |          ^^^^^^ -"}, {"sha": "327b0c14ae864d963d7b61ad0b9a50fc8c24da87", "filename": "src/test/ui/generic-associated-types/issue-78671.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,6 +1,5 @@\n // revisions: base extended\n \n-#![feature(generic_associated_types)]\n #![cfg_attr(extended, feature(generic_associated_types_extended))]\n #![cfg_attr(extended, allow(incomplete_features))]\n "}, {"sha": "3c1a29d48b2fe85ac8216a1704c7051d7578f3ee", "filename": "src/test/ui/generic-associated-types/issue-79422.base.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.base.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,11 +1,11 @@\n error[E0107]: missing generics for associated type `MapLike::VRefCont`\n-  --> $DIR/issue-79422.rs:48:36\n+  --> $DIR/issue-79422.rs:47:36\n    |\n LL |         as Box<dyn MapLike<u8, u8, VRefCont = dyn RefCont<'_, u8>>>;\n    |                                    ^^^^^^^^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/issue-79422.rs:24:10\n+  --> $DIR/issue-79422.rs:23:10\n    |\n LL |     type VRefCont<'a>: RefCont<'a, V> where Self: 'a;\n    |          ^^^^^^^^ --\n@@ -15,13 +15,13 @@ LL |         as Box<dyn MapLike<u8, u8, VRefCont<'a> = dyn RefCont<'_, u8>>>;\n    |                                    ~~~~~~~~~~~~\n \n error[E0038]: the trait `MapLike` cannot be made into an object\n-  --> $DIR/issue-79422.rs:48:12\n+  --> $DIR/issue-79422.rs:47:12\n    |\n LL |         as Box<dyn MapLike<u8, u8, VRefCont = dyn RefCont<'_, u8>>>;\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `MapLike` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/issue-79422.rs:24:10\n+  --> $DIR/issue-79422.rs:23:10\n    |\n LL | trait MapLike<K, V> {\n    |       ------- this trait cannot be made into an object...\n@@ -30,13 +30,13 @@ LL |     type VRefCont<'a>: RefCont<'a, V> where Self: 'a;\n    = help: consider moving `VRefCont` to another trait\n \n error[E0038]: the trait `MapLike` cannot be made into an object\n-  --> $DIR/issue-79422.rs:45:13\n+  --> $DIR/issue-79422.rs:44:13\n    |\n LL |     let m = Box::new(std::collections::BTreeMap::<u8, u8>::new())\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `MapLike` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/issue-79422.rs:24:10\n+  --> $DIR/issue-79422.rs:23:10\n    |\n LL | trait MapLike<K, V> {\n    |       ------- this trait cannot be made into an object..."}, {"sha": "58c921bf09f6da563fa1736a6e0ce48d0338f51c", "filename": "src/test/ui/generic-associated-types/issue-79422.extended.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.extended.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.extended.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.extended.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,11 +1,11 @@\n error[E0107]: missing generics for associated type `MapLike::VRefCont`\n-  --> $DIR/issue-79422.rs:48:36\n+  --> $DIR/issue-79422.rs:47:36\n    |\n LL |         as Box<dyn MapLike<u8, u8, VRefCont = dyn RefCont<'_, u8>>>;\n    |                                    ^^^^^^^^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/issue-79422.rs:24:10\n+  --> $DIR/issue-79422.rs:23:10\n    |\n LL |     type VRefCont<'a>: RefCont<'a, V> where Self: 'a;\n    |          ^^^^^^^^ --\n@@ -15,13 +15,13 @@ LL |         as Box<dyn MapLike<u8, u8, VRefCont<'a> = dyn RefCont<'_, u8>>>;\n    |                                    ~~~~~~~~~~~~\n \n error[E0271]: type mismatch resolving `<BTreeMap<u8, u8> as MapLike<u8, u8>>::VRefCont<'_> == (dyn RefCont<'_, u8> + 'static)`\n-  --> $DIR/issue-79422.rs:45:13\n+  --> $DIR/issue-79422.rs:44:13\n    |\n LL |     let m = Box::new(std::collections::BTreeMap::<u8, u8>::new())\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type mismatch resolving `<BTreeMap<u8, u8> as MapLike<u8, u8>>::VRefCont<'_> == (dyn RefCont<'_, u8> + 'static)`\n    |\n note: expected this to be `(dyn RefCont<'_, u8> + 'static)`\n-  --> $DIR/issue-79422.rs:29:25\n+  --> $DIR/issue-79422.rs:28:25\n    |\n LL |     type VRefCont<'a> = &'a V where Self: 'a;\n    |                         ^^^^^"}, {"sha": "a52dd792dda2692e5736bc878567293acaf70b62", "filename": "src/test/ui/generic-associated-types/issue-79422.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,6 +1,5 @@\n // revisions: base extended\n \n-#![feature(generic_associated_types)]\n #![cfg_attr(extended, feature(generic_associated_types_extended))]\n #![cfg_attr(extended, allow(incomplete_features))]\n "}, {"sha": "a89039b5c7203f900ca101508668a0b09ab17c67", "filename": "src/test/ui/generic-associated-types/issue-79636-1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-1.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,3 @@\n-#![feature(generic_associated_types)]\n-\n trait Monad {\n     type Unwrapped;\n     type Wrapped<B>;"}, {"sha": "155477048cad9cc06e5ff8cb9e54770c74c977b6", "filename": "src/test/ui/generic-associated-types/issue-79636-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-1.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,11 +1,11 @@\n error[E0107]: missing generics for associated type `Monad::Wrapped`\n-  --> $DIR/issue-79636-1.rs:15:34\n+  --> $DIR/issue-79636-1.rs:13:34\n    |\n LL |     MInner: Monad<Unwrapped = A, Wrapped = MOuter::Wrapped<A>>,\n    |                                  ^^^^^^^ expected 1 generic argument\n    |\n note: associated type defined here, with 1 generic parameter: `B`\n-  --> $DIR/issue-79636-1.rs:5:10\n+  --> $DIR/issue-79636-1.rs:3:10\n    |\n LL |     type Wrapped<B>;\n    |          ^^^^^^^ -"}, {"sha": "ff5ff38c968d20cf2f1587c37e4ab8895a84078d", "filename": "src/test/ui/generic-associated-types/issue-79636-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-2.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,3 @@\n-#![feature(generic_associated_types)]\n-\n trait SomeTrait {\n     type Wrapped<A>: SomeTrait;\n "}, {"sha": "6a36bfc37f247287773f25cb207727ba2df21e7a", "filename": "src/test/ui/generic-associated-types/issue-79636-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-2.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,11 +1,11 @@\n error[E0107]: missing generics for associated type `SomeTrait::Wrapped`\n-  --> $DIR/issue-79636-2.rs:11:18\n+  --> $DIR/issue-79636-2.rs:9:18\n    |\n LL |     W: SomeTrait<Wrapped = W>,\n    |                  ^^^^^^^ expected 1 generic argument\n    |\n note: associated type defined here, with 1 generic parameter: `A`\n-  --> $DIR/issue-79636-2.rs:4:10\n+  --> $DIR/issue-79636-2.rs:2:10\n    |\n LL |     type Wrapped<A>: SomeTrait;\n    |          ^^^^^^^ -"}, {"sha": "44831a995c66ebc34f527a526fa7f223180b5f16", "filename": "src/test/ui/generic-associated-types/issue-80433-reduced.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-80433-reduced.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-80433-reduced.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-80433-reduced.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,7 +1,5 @@\n // check-pass\n \n-#![feature(generic_associated_types)]\n-\n struct E {}\n \n trait TestMut {"}, {"sha": "05ff82fa7d5de2468c09e8e16c7bc2b3004557e1", "filename": "src/test/ui/generic-associated-types/issue-80433.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-80433.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-80433.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-80433.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,3 @@\n-#![feature(generic_associated_types)]\n-\n #[derive(Default)]\n struct E<T> {\n     data: T,"}, {"sha": "20a407dd4125ec915b738c9e14d180f6146e0d2f", "filename": "src/test/ui/generic-associated-types/issue-80433.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-80433.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-80433.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-80433.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,11 +1,11 @@\n error[E0107]: missing generics for associated type `TestMut::Output`\n-  --> $DIR/issue-80433.rs:23:47\n+  --> $DIR/issue-80433.rs:21:47\n    |\n LL | fn test_simpler<'a>(dst: &'a mut impl TestMut<Output = &'a mut f32>)\n    |                                               ^^^^^^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/issue-80433.rs:9:10\n+  --> $DIR/issue-80433.rs:7:10\n    |\n LL |     type Output<'a>;\n    |          ^^^^^^ --"}, {"sha": "0d19a75bb7ff9eccaabb2d9f675f186b6268e0c3", "filename": "src/test/ui/generic-associated-types/issue-81487.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-81487.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-81487.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-81487.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,7 +1,5 @@\n // build-pass\n \n-#![feature(generic_associated_types)]\n-\n trait Trait {\n     type Ref<'a>;\n }"}, {"sha": "a7cc9a6053e49d6867e946a10cf02cb57e13ccba", "filename": "src/test/ui/generic-associated-types/issue-81712-cyclic-traits.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-81712-cyclic-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-81712-cyclic-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-81712-cyclic-traits.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,7 +1,5 @@\n // Regression test for #81712.\n \n-#![feature(generic_associated_types)]\n-\n trait A {\n     type BType: B<AType = Self>;\n }"}, {"sha": "c8961e28ede4537b6b5ef989fec9d5dac83d60e4", "filename": "src/test/ui/generic-associated-types/issue-81712-cyclic-traits.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-81712-cyclic-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-81712-cyclic-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-81712-cyclic-traits.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,11 +1,11 @@\n error[E0107]: missing generics for associated type `C::DType`\n-  --> $DIR/issue-81712-cyclic-traits.rs:16:19\n+  --> $DIR/issue-81712-cyclic-traits.rs:14:19\n    |\n LL |     type CType: C<DType = Self>;\n    |                   ^^^^^ expected 1 generic argument\n    |\n note: associated type defined here, with 1 generic parameter: `T`\n-  --> $DIR/issue-81712-cyclic-traits.rs:13:10\n+  --> $DIR/issue-81712-cyclic-traits.rs:11:10\n    |\n LL |     type DType<T>: D<T, CType = Self>;\n    |          ^^^^^ -"}, {"sha": "bde828b775b57017600673232ef16282e57390e7", "filename": "src/test/ui/generic-associated-types/issue-81862.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-81862.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-81862.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-81862.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,3 @@\n-#![feature(generic_associated_types)]\n-\n trait StreamingIterator {\n     type Item<'a>;\n     fn next(&mut self) -> Option<Self::Item>;"}, {"sha": "ba798084673cdca190ca9be60bf55f2adf196431", "filename": "src/test/ui/generic-associated-types/issue-81862.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-81862.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-81862.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-81862.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,11 +1,11 @@\n error[E0107]: missing generics for associated type `StreamingIterator::Item`\n-  --> $DIR/issue-81862.rs:5:40\n+  --> $DIR/issue-81862.rs:3:40\n    |\n LL |     fn next(&mut self) -> Option<Self::Item>;\n    |                                        ^^^^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/issue-81862.rs:4:10\n+  --> $DIR/issue-81862.rs:2:10\n    |\n LL |     type Item<'a>;\n    |          ^^^^ --"}, {"sha": "4123ce9d4d94c51d36a179a7f0192305102b937e", "filename": "src/test/ui/generic-associated-types/issue-84931.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-84931.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-84931.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-84931.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,4 +1,3 @@\n-#![feature(generic_associated_types)]\n // check-fail\n \n trait StreamingIter {"}, {"sha": "fffea98a449e2ba542b3d03fbbfacecea13aec46", "filename": "src/test/ui/generic-associated-types/issue-84931.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-84931.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-84931.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-84931.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,5 @@\n error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/issue-84931.rs:15:21\n+  --> $DIR/issue-84931.rs:14:21\n    |\n LL |     type Item<'a> = &'a mut T;\n    |                     ^^^^^^^^^- help: consider adding a where clause: `where T: 'a`"}, {"sha": "d281ed9eedbcb6450f03c4328f336ddf58c844ab", "filename": "src/test/ui/generic-associated-types/issue-85921.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-85921.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-85921.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-85921.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,7 +1,5 @@\n // check-pass\n \n-#![feature(generic_associated_types)]\n-\n trait Trait {\n     type Assoc<'a>;\n "}, {"sha": "70267637ae9d69bfe9bed76a6701d40562142734", "filename": "src/test/ui/generic-associated-types/issue-86483.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86483.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86483.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86483.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -4,8 +4,6 @@\n //\n // check-pass\n \n-#![feature(generic_associated_types)]\n-\n pub trait IceIce<T>\n where\n     for<'a> T: 'a,"}, {"sha": "96075ca503dab8fc6549f6362aa799f4c741e10d", "filename": "src/test/ui/generic-associated-types/issue-86787.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86787.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86787.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86787.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,4 +1,3 @@\n-#![feature(generic_associated_types)]\n // check-fail\n \n enum Either<L, R> {"}, {"sha": "f34c63cf72e18a2f9d358799645328faa42a0d76", "filename": "src/test/ui/generic-associated-types/issue-86787.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86787.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86787.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86787.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,5 @@\n error: missing required bound on `TRef`\n-  --> $DIR/issue-86787.rs:11:5\n+  --> $DIR/issue-86787.rs:10:5\n    |\n LL |     type TRef<'a>;\n    |     ^^^^^^^^^^^^^-"}, {"sha": "9ab683d3dc9e497e9b370b4c9dbc0dda66815453", "filename": "src/test/ui/generic-associated-types/issue-87258_a.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87258_a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87258_a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87258_a.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,4 @@\n #![feature(type_alias_impl_trait)]\n-#![feature(generic_associated_types)]\n \n // See https://github.com/rust-lang/rust/issues/87258#issuecomment-883293367\n "}, {"sha": "fa0748a280b60a3845485451eb084074414dd51a", "filename": "src/test/ui/generic-associated-types/issue-87258_a.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87258_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87258_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87258_a.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,5 @@\n error: unconstrained opaque type\n-  --> $DIR/issue-87258_a.rs:18:26\n+  --> $DIR/issue-87258_a.rs:17:26\n    |\n LL |     type FooFuture<'a> = impl Trait1;\n    |                          ^^^^^^^^^^^"}, {"sha": "7b7610b21c7dc3710ccaced0b70339150af35cb7", "filename": "src/test/ui/generic-associated-types/issue-87258_b.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87258_b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87258_b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87258_b.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,4 @@\n #![feature(type_alias_impl_trait)]\n-#![feature(generic_associated_types)]\n \n // See https://github.com/rust-lang/rust/issues/87258#issuecomment-883293367\n "}, {"sha": "0ee665f38ad080876d8ac55d71cf692fbf4736be", "filename": "src/test/ui/generic-associated-types/issue-87258_b.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87258_b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87258_b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87258_b.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,5 @@\n error: unconstrained opaque type\n-  --> $DIR/issue-87258_b.rs:17:49\n+  --> $DIR/issue-87258_b.rs:16:49\n    |\n LL | type Helper<'xenon, 'yttrium, KABOOM: Trait2> = impl Trait1;\n    |                                                 ^^^^^^^^^^^"}, {"sha": "feb43ee5aa4adc1c0809de6bb5fddb99b1c867e1", "filename": "src/test/ui/generic-associated-types/issue-87429-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-2.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -4,8 +4,6 @@\n \n // check-pass\n \n-#![feature(generic_associated_types)]\n-\n trait Family {\n     type Member<'a, C: Eq>: for<'b> MyBound<'b, C>;\n }"}, {"sha": "2006f9bc74dfebd1e90e44769ab80e8b5102ac38", "filename": "src/test/ui/generic-associated-types/issue-87429-associated-type-default.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-associated-type-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-associated-type-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-associated-type-default.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,7 +1,6 @@\n // check-fail\n \n #![feature(associated_type_defaults)]\n-#![feature(generic_associated_types)]\n \n trait Family {\n     // Fine, i32: PartialEq<i32>"}, {"sha": "b1abe012be23d3f8008e75eed685b9121f046067", "filename": "src/test/ui/generic-associated-types/issue-87429-associated-type-default.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-associated-type-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-associated-type-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-associated-type-default.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,12 +1,12 @@\n error[E0277]: can't compare `Foo` with `Foo`\n-  --> $DIR/issue-87429-associated-type-default.rs:14:60\n+  --> $DIR/issue-87429-associated-type-default.rs:13:60\n    |\n LL |     type Member<'a>: for<'b> PartialEq<Self::Member<'b>> = Foo;\n    |                                                            ^^^ no implementation for `Foo == Foo`\n    |\n    = help: the trait `PartialEq` is not implemented for `Foo`\n note: required by a bound in `Family2::Member`\n-  --> $DIR/issue-87429-associated-type-default.rs:14:22\n+  --> $DIR/issue-87429-associated-type-default.rs:13:22\n    |\n LL |     type Member<'a>: for<'b> PartialEq<Self::Member<'b>> = Foo;\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Family2::Member`"}, {"sha": "6e31f1b21e5c9a586bfc194359f7d053dbe568a2", "filename": "src/test/ui/generic-associated-types/issue-87429-specialization.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-specialization.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -2,7 +2,6 @@\n \n #![feature(specialization)]\n //~^ WARN incomplete\n-#![feature(generic_associated_types)]\n \n trait Family {\n     type Member<'a>: for<'b> PartialEq<Self::Member<'b>>;"}, {"sha": "d8e889aecef7148673dfdbfab2e99303837c9cca", "filename": "src/test/ui/generic-associated-types/issue-87429-specialization.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-specialization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-specialization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-specialization.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -9,14 +9,14 @@ LL | #![feature(specialization)]\n    = help: consider using `min_specialization` instead, which is more stable and complete\n \n error[E0277]: can't compare `Foo` with `Foo`\n-  --> $DIR/issue-87429-specialization.rs:21:31\n+  --> $DIR/issue-87429-specialization.rs:20:31\n    |\n LL |     default type Member<'a> = Foo;\n    |                               ^^^ no implementation for `Foo == Foo`\n    |\n    = help: the trait `PartialEq` is not implemented for `Foo`\n note: required by a bound in `Family::Member`\n-  --> $DIR/issue-87429-specialization.rs:8:22\n+  --> $DIR/issue-87429-specialization.rs:7:22\n    |\n LL |     type Member<'a>: for<'b> PartialEq<Self::Member<'b>>;\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Family::Member`"}, {"sha": "56394823cc519c3335b2d3063577faa8e614724c", "filename": "src/test/ui/generic-associated-types/issue-87429.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,7 +1,5 @@\n // check-pass\n \n-#![feature(generic_associated_types)]\n-\n trait Family {\n     type Member<'a>: for<'b> PartialEq<Self::Member<'b>>;\n }"}, {"sha": "6cbe3d9022330091f19a33330997c867463fafdc", "filename": "src/test/ui/generic-associated-types/issue-87748.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87748.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87748.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87748.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -3,8 +3,6 @@\n \n // check-pass\n \n-#![feature(generic_associated_types)]\n-\n trait MyTrait {\n     type Assoc<'a, 'b> where 'b: 'a;\n     fn do_sth(arg: Self::Assoc<'_, '_>);"}, {"sha": "0a11a0f3ae0e44cd06569651e9abf49f5443ecef", "filename": "src/test/ui/generic-associated-types/issue-87750.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87750.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87750.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87750.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,3 @@\n-#![feature(generic_associated_types)]\n-\n trait PointerFamily {\n     type Pointer<T>;\n }"}, {"sha": "b358ca273ca79c3854dc92bfbc3d02a22ea4737b", "filename": "src/test/ui/generic-associated-types/issue-87750.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87750.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87750.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87750.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,5 @@\n error[E0275]: overflow evaluating the requirement `Node<i32, RcFamily>: Sized`\n-  --> $DIR/issue-87750.rs:20:16\n+  --> $DIR/issue-87750.rs:18:16\n    |\n LL |     let _list: <RcFamily as PointerFamily>::Pointer<Node<i32, RcFamily>>;\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "82188493d52bd8f42b5848c24ef1404f618e0e1d", "filename": "src/test/ui/generic-associated-types/issue-88287.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88287.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88287.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88287.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,6 +1,5 @@\n // edition:2018\n \n-#![feature(generic_associated_types)]\n #![feature(type_alias_impl_trait)]\n \n use std::future::Future;"}, {"sha": "1b84cce622929de77c300d37c5b2c2adc7563766", "filename": "src/test/ui/generic-associated-types/issue-88287.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88287.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88287.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88287.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the size for values of type `A` cannot be known at compilation time\n-  --> $DIR/issue-88287.rs:35:9\n+  --> $DIR/issue-88287.rs:34:9\n    |\n LL | type SearchFutureTy<'f, A, B: 'f>\n    |                         - this type parameter needs to be `std::marker::Sized`\n@@ -8,7 +8,7 @@ LL |         async move { todo!() }\n    |         ^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n note: required by a bound in `<T as SearchableResourceExt<Criteria>>`\n-  --> $DIR/issue-88287.rs:25:6\n+  --> $DIR/issue-88287.rs:24:6\n    |\n LL | impl<T, Criteria> SearchableResourceExt<Criteria> for T\n    |      ^ required by this bound in `<T as SearchableResourceExt<Criteria>>`"}, {"sha": "c02690618d0ee9bf08ac4651394350436f852c54", "filename": "src/test/ui/generic-associated-types/issue-88360.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88360.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88360.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88360.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,3 @@\n-#![feature(generic_associated_types)]\n-\n trait GatTrait {\n     type Gat<'a> where Self: 'a;\n "}, {"sha": "cd3750344dda126094b8cb9f69aac27f10c3bdf4", "filename": "src/test/ui/generic-associated-types/issue-88360.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88360.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88360.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88360.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/issue-88360.rs:15:9\n+  --> $DIR/issue-88360.rs:13:9\n    |\n LL | trait SuperTrait<T>\n    |                  - this type parameter"}, {"sha": "8dad6a89fd05d1262984265d731d0c942b237e2f", "filename": "src/test/ui/generic-associated-types/issue-88405.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88405.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88405.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88405.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,7 +1,5 @@\n // check-pass\n \n-#![feature(generic_associated_types)]\n-\n trait SomeTrait {}\n trait OtherTrait {\n     type Item;"}, {"sha": "07d7bc06d08efe5e1c4b2909ce91626debe82f3a", "filename": "src/test/ui/generic-associated-types/issue-88459.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88459.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88459.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88459.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,7 +1,5 @@\n // check-pass\n \n-#![feature(generic_associated_types)]\n-\n trait Trait {\n     type Assoc<'a>;\n }"}, {"sha": "24641ee1f78125a75c051dcd96ee63917fcd4779", "filename": "src/test/ui/generic-associated-types/issue-88595.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88595.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88595.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88595.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,4 +1,3 @@\n-#![feature(generic_associated_types)]\n #![feature(type_alias_impl_trait)]\n \n fn main() {}"}, {"sha": "bcefc8066851486ccbcfe9fdba26dc96b7305d8a", "filename": "src/test/ui/generic-associated-types/issue-88595.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88595.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88595.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88595.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,11 +1,11 @@\n error: non-defining opaque type use in defining scope\n-  --> $DIR/issue-88595.rs:21:35\n+  --> $DIR/issue-88595.rs:20:35\n    |\n LL |     fn a(&'a self) -> Self::B<'a> {}\n    |                                   ^^\n    |\n note: lifetime used multiple times\n-  --> $DIR/issue-88595.rs:18:6\n+  --> $DIR/issue-88595.rs:17:6\n    |\n LL | impl<'a> A<'a> for C {\n    |      ^^"}, {"sha": "1896d0c87f4ce0602c02f00fa844b7ae8e88deac", "filename": "src/test/ui/generic-associated-types/issue-89352.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-89352.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-89352.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-89352.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,7 +1,5 @@\n // check-pass\n \n-#![feature(generic_associated_types)]\n-\n use std::marker::PhantomData;\n \n pub trait GenAssoc<T> {"}, {"sha": "55db95a6d819613dac750adbd2c242046934e0fc", "filename": "src/test/ui/generic-associated-types/issue-90014.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-90014.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-90014.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-90014.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,6 +1,5 @@\n // edition:2018\n \n-#![feature(generic_associated_types)]\n #![feature(type_alias_impl_trait)]\n \n use std::future::Future;"}, {"sha": "2d3f4a6af7e0b9a4e02590c7468002a3ebb9c6b8", "filename": "src/test/ui/generic-associated-types/issue-90014.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-90014.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-90014.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-90014.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,5 @@\n error[E0477]: the type `&mut ()` does not fulfill the required lifetime\n-  --> $DIR/issue-90014.rs:14:20\n+  --> $DIR/issue-90014.rs:13:20\n    |\n LL |     type Fut<'a> where Self: 'a;\n    |     ------------ definition of `Fut` from trait\n@@ -8,7 +8,7 @@ LL |     type Fut<'a> = impl Future<Output = ()>;\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^- help: try copying this clause from the trait: `where Self: 'a`\n    |\n note: type must outlive the lifetime `'a` as defined here\n-  --> $DIR/issue-90014.rs:14:14\n+  --> $DIR/issue-90014.rs:13:14\n    |\n LL |     type Fut<'a> = impl Future<Output = ()>;\n    |              ^^"}, {"sha": "bcec2e32121d1925c8492746d134b1b1aacedf3d", "filename": "src/test/ui/generic-associated-types/issue-90729.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-90729.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-90729.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-90729.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,7 +1,5 @@\n // check-pass\n \n-#![feature(generic_associated_types)]\n-\n use std::marker::PhantomData;\n \n pub trait Type {"}, {"sha": "690160577cd9c6254c34a4acb46b9019bc9d58fd", "filename": "src/test/ui/generic-associated-types/issue-91139.migrate.stderr", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91139.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91139.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91139.migrate.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,13 +1,8 @@\n-error[E0311]: the parameter type `T` may not live long enough\n-  --> $DIR/issue-91139.rs:27:12\n+error: expected identifier, found `<<`\n+  --> $DIR/issue-91139.rs:1:1\n    |\n-LL |     let _: for<'a> fn(<() as Foo<T>>::Type<'a>, &'a T) = |_, _| ();\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n-   |\n-help: consider adding an explicit lifetime bound...\n-   |\n-LL | fn foo<T: 'a>() {\n-   |         ++++\n+LL | <<<<<<< HEAD\n+   | ^^ expected identifier\n \n error: aborting due to previous error\n "}, {"sha": "5fc6071c939663aec13de5c5b35e47d890f957f2", "filename": "src/test/ui/generic-associated-types/issue-91139.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91139.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91139.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91139.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,3 @@\n-#![feature(generic_associated_types)]\n-\n trait Foo<T> {\n     type Type<'a>\n     where"}, {"sha": "8bbe98fa1e50184e63ea9a1635ad44ee7d33cc8b", "filename": "src/test/ui/generic-associated-types/issue-91139.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91139.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91139.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91139.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,41 +1,41 @@\n error: `T` does not live long enough\n-  --> $DIR/issue-91139.rs:16:12\n+  --> $DIR/issue-91139.rs:14:12\n    |\n LL |     let _: for<'a> fn(<() as Foo<T>>::Type<'a>, &'a T) = |_, _| ();\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `T` does not live long enough\n-  --> $DIR/issue-91139.rs:16:12\n+  --> $DIR/issue-91139.rs:14:12\n    |\n LL |     let _: for<'a> fn(<() as Foo<T>>::Type<'a>, &'a T) = |_, _| ();\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `T` does not live long enough\n-  --> $DIR/issue-91139.rs:16:12\n+  --> $DIR/issue-91139.rs:14:12\n    |\n LL |     let _: for<'a> fn(<() as Foo<T>>::Type<'a>, &'a T) = |_, _| ();\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `T` does not live long enough\n-  --> $DIR/issue-91139.rs:16:12\n+  --> $DIR/issue-91139.rs:14:12\n    |\n LL |     let _: for<'a> fn(<() as Foo<T>>::Type<'a>, &'a T) = |_, _| ();\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `T` does not live long enough\n-  --> $DIR/issue-91139.rs:16:58\n+  --> $DIR/issue-91139.rs:14:58\n    |\n LL |     let _: for<'a> fn(<() as Foo<T>>::Type<'a>, &'a T) = |_, _| ();\n    |                                                          ^^^^^^^^^\n \n error: `T` does not live long enough\n-  --> $DIR/issue-91139.rs:16:58\n+  --> $DIR/issue-91139.rs:14:58\n    |\n LL |     let _: for<'a> fn(<() as Foo<T>>::Type<'a>, &'a T) = |_, _| ();\n    |                                                          ^^^^^^^^^\n \n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/issue-91139.rs:16:58\n+  --> $DIR/issue-91139.rs:14:58\n    |\n LL |     let _: for<'a> fn(<() as Foo<T>>::Type<'a>, &'a T) = |_, _| ();\n    |                                                          ^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n@@ -46,13 +46,13 @@ LL | fn foo<T: 'static>() {\n    |         +++++++++\n \n error: `T` does not live long enough\n-  --> $DIR/issue-91139.rs:16:58\n+  --> $DIR/issue-91139.rs:14:58\n    |\n LL |     let _: for<'a> fn(<() as Foo<T>>::Type<'a>, &'a T) = |_, _| ();\n    |                                                          ^^^^^^^^^\n \n error: `T` does not live long enough\n-  --> $DIR/issue-91139.rs:16:58\n+  --> $DIR/issue-91139.rs:14:58\n    |\n LL |     let _: for<'a> fn(<() as Foo<T>>::Type<'a>, &'a T) = |_, _| ();\n    |                                                          ^^^^^^^^^"}, {"sha": "e870e08a3a2b0f35adb482f38b1f50e65f8b3eaf", "filename": "src/test/ui/generic-associated-types/issue-91883.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91883.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91883.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91883.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,3 @@\n-#![feature(generic_associated_types)]\n-\n use std::fmt::Debug;\n use std::marker::PhantomData;\n "}, {"sha": "1cfc2aaf1613ffabf414ec4ee93c5014658b13c6", "filename": "src/test/ui/generic-associated-types/issue-91883.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91883.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91883.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91883.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,5 @@\n error[E0478]: lifetime bound not satisfied\n-  --> $DIR/issue-91883.rs:32:24\n+  --> $DIR/issue-91883.rs:30:24\n    |\n LL |     type Cursor<'tx>: Cursor<'tx>\n    |     ----------------------------- definition of `Cursor` from trait\n@@ -8,12 +8,12 @@ LL |     type Cursor<'tx> = CursorImpl<'tx>;\n    |                        ^^^^^^^^^^^^^^^- help: try copying these clauses from the trait: `where 'db: 'tx, Self: 'tx`\n    |\n note: lifetime parameter instantiated with the lifetime `'db` as defined here\n-  --> $DIR/issue-91883.rs:31:6\n+  --> $DIR/issue-91883.rs:29:6\n    |\n LL | impl<'db> Transaction<'db> for TransactionImpl<'db> {\n    |      ^^^\n note: but lifetime parameter must outlive the lifetime `'tx` as defined here\n-  --> $DIR/issue-91883.rs:32:17\n+  --> $DIR/issue-91883.rs:30:17\n    |\n LL |     type Cursor<'tx> = CursorImpl<'tx>;\n    |                 ^^^"}, {"sha": "d111580b860aadaed27cd5b0d492142bf3f647c0", "filename": "src/test/ui/generic-associated-types/issue-92033.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92033.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92033.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92033.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,3 @@\n-#![feature(generic_associated_types)]\n-\n struct Texture;\n \n trait Surface {"}, {"sha": "cd7eed25421e8bab1a0caa03f0054ae3409c41b1", "filename": "src/test/ui/generic-associated-types/issue-92033.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92033.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92033.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92033.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,5 @@\n error[E0477]: the type `&'s Texture` does not fulfill the required lifetime\n-  --> $DIR/issue-92033.rs:22:28\n+  --> $DIR/issue-92033.rs:20:28\n    |\n LL |     type TextureIter<'a>: Iterator<Item = &'a Texture>\n    |     -------------------------------------------------- definition of `TextureIter` from trait\n@@ -8,7 +8,7 @@ LL |     type TextureIter<'a> = std::option::IntoIter<&'a Texture>;\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- help: try copying this clause from the trait: `where Self: 'a`\n    |\n note: type must outlive the lifetime `'a` as defined here\n-  --> $DIR/issue-92033.rs:22:22\n+  --> $DIR/issue-92033.rs:20:22\n    |\n LL |     type TextureIter<'a> = std::option::IntoIter<&'a Texture>;\n    |                      ^^"}, {"sha": "ce1fd6dd9831f9ac508e04dabe53a1cbe6d70836", "filename": "src/test/ui/generic-associated-types/issue-92096.migrate.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92096.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92096.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92096.migrate.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,5 @@\n error[E0311]: the parameter type `C` may not live long enough\n-  --> $DIR/issue-92096.rs:20:33\n+  --> $DIR/issue-92096.rs:19:33\n    |\n LL | fn call_connect<C>(c: &'_ C) -> impl '_ + Future + Send\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `C` will meet its required lifetime bounds\n@@ -10,7 +10,7 @@ LL |     C: Client + Send + Sync + 'a,\n    |                             ++++\n \n error[E0311]: the parameter type `C` may not live long enough\n-  --> $DIR/issue-92096.rs:20:33\n+  --> $DIR/issue-92096.rs:19:33\n    |\n LL | fn call_connect<C>(c: &'_ C) -> impl '_ + Future + Send\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `C` will meet its required lifetime bounds"}, {"sha": "e285af6660ec3d6eb83ddc58158d9e12edcc89ca", "filename": "src/test/ui/generic-associated-types/issue-92096.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92096.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92096.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92096.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,7 +1,5 @@\n // edition:2018\n \n-#![feature(generic_associated_types)]\n-\n use std::future::Future;\n \n trait Client {"}, {"sha": "91a06d5acde1a25c6abff9c1954a3b28206da455", "filename": "src/test/ui/generic-associated-types/issue-92096.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92096.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92096.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92096.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,5 @@\n error: `C` does not live long enough\n-  --> $DIR/issue-92096.rs:19:5\n+  --> $DIR/issue-92096.rs:17:5\n    |\n LL |     async move { c.connect().await }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "9284beea33e5da4e9fc820a04880010fed10138f", "filename": "src/test/ui/generic-associated-types/issue-92280.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92280.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92280.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92280.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,6 +1,5 @@\n // check-pass\n \n-#![feature(generic_associated_types)]\n #![allow(non_camel_case_types)]\n \n trait HasAssoc {"}, {"sha": "22ce8f9fe3b806b630b4f595029cc5493da50bf5", "filename": "src/test/ui/generic-associated-types/issue-92954.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92954.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92954.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92954.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,7 +1,5 @@\n // check-pass\n \n-#![feature(generic_associated_types)]\n-\n pub trait Foo {\n     type Assoc<'c>;\n     fn function() -> for<'x> fn(Self::Assoc<'x>);"}, {"sha": "48c78b9c06760b5246513d143595ebfc092ba545", "filename": "src/test/ui/generic-associated-types/issue-93141.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-93141.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-93141.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-93141.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,7 +1,5 @@\n // check-pass\n \n-#![feature(generic_associated_types)]\n-\n pub trait Fooey: Sized {\n     type Context<'c> where Self: 'c;\n }"}, {"sha": "a7bcd111dfff000f37c31993c470b527a4190b5a", "filename": "src/test/ui/generic-associated-types/issue-93262.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-93262.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-93262.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-93262.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,7 +1,5 @@\n // check-pass\n \n-#![feature(generic_associated_types)]\n-\n pub trait Trait {\n     type Assoc<'a> where Self: 'a;\n }"}, {"sha": "4662fda537b5f297d6b9edd403945ce1b3c61a75", "filename": "src/test/ui/generic-associated-types/issue-93340.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-93340.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-93340.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-93340.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,7 +1,5 @@\n // check-pass\n \n-#![feature(generic_associated_types)]\n-\n pub trait Scalar: 'static {\n     type RefType<'a>: ScalarRef<'a>;\n }"}, {"sha": "737b2bbdb245a09b3dbc04970f9dfe79d324af83", "filename": "src/test/ui/generic-associated-types/issue-93341.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-93341.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-93341.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-93341.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,6 +1,5 @@\n // check-pass\n \n-#![feature(generic_associated_types)]\n use std::marker::PhantomData;\n \n pub struct Id<'id>(PhantomData<fn(&'id ()) -> &'id ()>);"}, {"sha": "d4422d5d1d723fe31dbc56f741ce9c49cc02008e", "filename": "src/test/ui/generic-associated-types/issue-93342.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-93342.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-93342.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-93342.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,7 +1,5 @@\n // check-pass\n \n-#![feature(generic_associated_types)]\n-\n use std::marker::PhantomData;\n \n pub trait Scalar: 'static {"}, {"sha": "30956655ad4090a09566af2118195165835af4f2", "filename": "src/test/ui/generic-associated-types/issue-93874.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-93874.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-93874.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-93874.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,7 +1,5 @@\n // check-pass\n \n-#![feature(generic_associated_types)]\n-\n pub trait Build {\n     type Output<O>;\n     fn build<O>(self, input: O) -> Self::Output<O>;"}, {"sha": "6c3ec20e7a052d407990e9c22eda887a59f6f27a", "filename": "src/test/ui/generic-associated-types/issue-95305.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-95305.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-95305.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-95305.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -2,7 +2,6 @@\n // Forbid it for now but proper support might be added\n // at some point in the future.\n \n-#![feature(generic_associated_types)]\n #![feature(anonymous_lifetime_in_impl_trait)]\n trait Foo {\n     type Item<'a>;"}, {"sha": "eb15cbc620acb4167923175276e5ad6a904be44a", "filename": "src/test/ui/generic-associated-types/issue-95305.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-95305.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-95305.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-95305.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,5 @@\n error[E0637]: `'_` cannot be used here\n-  --> $DIR/issue-95305.rs:11:26\n+  --> $DIR/issue-95305.rs:10:26\n    |\n LL | fn foo(x: &impl Foo<Item<'_> = u32>) { }\n    |                          ^^ `'_` is a reserved lifetime name"}, {"sha": "8ad351bd343ccd0cedc18c3389553ed21fa487b2", "filename": "src/test/ui/generic-associated-types/iterable.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,3 @@\n-#![feature(generic_associated_types)]\n-\n // run-pass\n \n trait Iterable {"}, {"sha": "36974b3df5e6442e497dffe9d306a96f5868f4d2", "filename": "src/test/ui/generic-associated-types/method-unsatified-assoc-type-predicate.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmethod-unsatified-assoc-type-predicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmethod-unsatified-assoc-type-predicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmethod-unsatified-assoc-type-predicate.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,8 +1,6 @@\n // Test that the predicate printed in an unresolved method error prints the\n // generics for a generic associated type.\n \n-#![feature(generic_associated_types)]\n-\n trait X {\n     type Y<T>;\n }"}, {"sha": "baef38f6b804609aede727c6547301bd8e7cdfda", "filename": "src/test/ui/generic-associated-types/method-unsatified-assoc-type-predicate.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmethod-unsatified-assoc-type-predicate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmethod-unsatified-assoc-type-predicate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmethod-unsatified-assoc-type-predicate.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,5 @@\n error[E0599]: the method `f` exists for struct `S`, but its trait bounds were not satisfied\n-  --> $DIR/method-unsatified-assoc-type-predicate.rs:30:7\n+  --> $DIR/method-unsatified-assoc-type-predicate.rs:28:7\n    |\n LL | struct S;\n    | --------\n@@ -12,7 +12,7 @@ LL |     a.f();\n    |       ^ method cannot be called on `S` due to unsatisfied trait bounds\n    |\n note: trait bound `<S as X>::Y<i32> = i32` was not satisfied\n-  --> $DIR/method-unsatified-assoc-type-predicate.rs:14:11\n+  --> $DIR/method-unsatified-assoc-type-predicate.rs:12:11\n    |\n LL | impl<T: X<Y<i32> = i32>> M for T {}\n    |           ^^^^^^^^^^^^   -     -"}, {"sha": "de9cad308014d27921dfad562d22b476dc47bf29", "filename": "src/test/ui/generic-associated-types/missing-where-clause-on-trait.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-where-clause-on-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-where-clause-on-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-where-clause-on-trait.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,7 +1,5 @@\n // check-fail\n \n-#![feature(generic_associated_types)]\n-\n trait Foo {\n     type Assoc<'a, 'b>;\n }"}, {"sha": "ffdba6676bf8dd38f84cce2b39823fef51e5cfbb", "filename": "src/test/ui/generic-associated-types/missing-where-clause-on-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-where-clause-on-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-where-clause-on-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-where-clause-on-trait.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,5 @@\n error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/missing-where-clause-on-trait.rs:9:39\n+  --> $DIR/missing-where-clause-on-trait.rs:7:39\n    |\n LL |     type Assoc<'a, 'b>;\n    |     ------------------ definition of `Assoc` from trait"}, {"sha": "78def80925ad0eac90787373765855db03cf28a7", "filename": "src/test/ui/generic-associated-types/missing_lifetime_args.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing_lifetime_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing_lifetime_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing_lifetime_args.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,3 @@\n-#![feature(generic_associated_types)]\n-\n trait X {\n     type Y<'a, 'b>;\n }"}, {"sha": "0ad1f1f8c4d32139bc3257f6423ac40501ada5cb", "filename": "src/test/ui/generic-associated-types/missing_lifetime_args.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing_lifetime_args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing_lifetime_args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing_lifetime_args.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,11 +1,11 @@\n error[E0107]: missing generics for associated type `X::Y`\n-  --> $DIR/missing_lifetime_args.rs:13:32\n+  --> $DIR/missing_lifetime_args.rs:11:32\n    |\n LL | fn foo<'c, 'd>(_arg: Box<dyn X<Y = (&'c u32, &'d u32)>>) {}\n    |                                ^ expected 2 lifetime arguments\n    |\n note: associated type defined here, with 2 lifetime parameters: `'a`, `'b`\n-  --> $DIR/missing_lifetime_args.rs:4:10\n+  --> $DIR/missing_lifetime_args.rs:2:10\n    |\n LL |     type Y<'a, 'b>;\n    |          ^ --  --\n@@ -15,15 +15,15 @@ LL | fn foo<'c, 'd>(_arg: Box<dyn X<Y<'c, 'd> = (&'c u32, &'d u32)>>) {}\n    |                                ~~~~~~~~~\n \n error[E0107]: this struct takes 3 lifetime arguments but 2 lifetime arguments were supplied\n-  --> $DIR/missing_lifetime_args.rs:16:26\n+  --> $DIR/missing_lifetime_args.rs:14:26\n    |\n LL | fn bar<'a, 'b, 'c>(_arg: Foo<'a, 'b>) {}\n    |                          ^^^ --  -- supplied 2 lifetime arguments\n    |                          |\n    |                          expected 3 lifetime arguments\n    |\n note: struct defined here, with 3 lifetime parameters: `'a`, `'b`, `'c`\n-  --> $DIR/missing_lifetime_args.rs:7:8\n+  --> $DIR/missing_lifetime_args.rs:5:8\n    |\n LL | struct Foo<'a, 'b, 'c> {\n    |        ^^^ --  --  --\n@@ -33,15 +33,15 @@ LL | fn bar<'a, 'b, 'c>(_arg: Foo<'a, 'b, 'a>) {}\n    |                                    ++++\n \n error[E0107]: this struct takes 3 lifetime arguments but 1 lifetime argument was supplied\n-  --> $DIR/missing_lifetime_args.rs:19:16\n+  --> $DIR/missing_lifetime_args.rs:17:16\n    |\n LL | fn f<'a>(_arg: Foo<'a>) {}\n    |                ^^^ -- supplied 1 lifetime argument\n    |                |\n    |                expected 3 lifetime arguments\n    |\n note: struct defined here, with 3 lifetime parameters: `'a`, `'b`, `'c`\n-  --> $DIR/missing_lifetime_args.rs:7:8\n+  --> $DIR/missing_lifetime_args.rs:5:8\n    |\n LL | struct Foo<'a, 'b, 'c> {\n    |        ^^^ --  --  --"}, {"sha": "8b174b9e971e0a0f45f145e874d843ade3a12149", "filename": "src/test/ui/generic-associated-types/missing_lifetime_const.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing_lifetime_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing_lifetime_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing_lifetime_const.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,3 @@\n-#![feature(generic_associated_types)]\n-\n trait Foo {\n     type Assoc<'a, const N: usize>;\n }"}, {"sha": "62d2e9f49dde1b4ea21d32544cd45924df4e1b8b", "filename": "src/test/ui/generic-associated-types/missing_lifetime_const.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing_lifetime_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing_lifetime_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing_lifetime_const.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,11 +1,11 @@\n error[E0107]: this associated type takes 1 lifetime argument but 0 lifetime arguments were supplied\n-  --> $DIR/missing_lifetime_const.rs:8:24\n+  --> $DIR/missing_lifetime_const.rs:6:24\n    |\n LL |     let _: <T as Foo>::Assoc<3>;\n    |                        ^^^^^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/missing_lifetime_const.rs:4:10\n+  --> $DIR/missing_lifetime_const.rs:2:10\n    |\n LL |     type Assoc<'a, const N: usize>;\n    |          ^^^^^ --"}, {"sha": "8428e7763fb46315ef737ac8008180935aab181e", "filename": "src/test/ui/generic-associated-types/parameter_number_and_kind.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,4 +1,3 @@\n-#![feature(generic_associated_types)]\n #![feature(associated_type_defaults)]\n \n trait Foo {"}, {"sha": "c20b9669e8140fedee178cd6267da31e4d2a17af", "filename": "src/test/ui/generic-associated-types/parameter_number_and_kind.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,25 +1,25 @@\n error[E0107]: this associated type takes 1 lifetime argument but 2 lifetime arguments were supplied\n-  --> $DIR/parameter_number_and_kind.rs:12:24\n+  --> $DIR/parameter_number_and_kind.rs:11:24\n    |\n LL |     type FErr1 = Self::E<'static, 'static>;\n    |                        ^          ------- help: remove this lifetime argument\n    |                        |\n    |                        expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/parameter_number_and_kind.rs:9:10\n+  --> $DIR/parameter_number_and_kind.rs:8:10\n    |\n LL |     type E<'a, T>;\n    |          ^ --\n \n error[E0107]: this associated type takes 1 generic argument but 0 generic arguments were supplied\n-  --> $DIR/parameter_number_and_kind.rs:12:24\n+  --> $DIR/parameter_number_and_kind.rs:11:24\n    |\n LL |     type FErr1 = Self::E<'static, 'static>;\n    |                        ^ expected 1 generic argument\n    |\n note: associated type defined here, with 1 generic parameter: `T`\n-  --> $DIR/parameter_number_and_kind.rs:9:10\n+  --> $DIR/parameter_number_and_kind.rs:8:10\n    |\n LL |     type E<'a, T>;\n    |          ^     -\n@@ -29,15 +29,15 @@ LL |     type FErr1 = Self::E<'static, 'static, T>;\n    |                                          +++\n \n error[E0107]: this associated type takes 1 generic argument but 2 generic arguments were supplied\n-  --> $DIR/parameter_number_and_kind.rs:15:27\n+  --> $DIR/parameter_number_and_kind.rs:14:27\n    |\n LL |     type FErr2<T> = Self::E<'static, T, u32>;\n    |                           ^             --- help: remove this generic argument\n    |                           |\n    |                           expected 1 generic argument\n    |\n note: associated type defined here, with 1 generic parameter: `T`\n-  --> $DIR/parameter_number_and_kind.rs:9:10\n+  --> $DIR/parameter_number_and_kind.rs:8:10\n    |\n LL |     type E<'a, T>;\n    |          ^     -"}, {"sha": "c1381025ac2a832d1672e4eaf08d98ed6161984f", "filename": "src/test/ui/generic-associated-types/parameter_number_and_kind_impl.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind_impl.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,4 +1,3 @@\n-#![feature(generic_associated_types)]\n #![feature(associated_type_defaults)]\n \n // FIXME(#44265) add tests for type-generic and const-genertic associated types."}, {"sha": "fdd6d305ab27e4ce91d63d58bc630118e88736da", "filename": "src/test/ui/generic-associated-types/parameter_number_and_kind_impl.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind_impl.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,5 @@\n error[E0195]: lifetime parameters or bounds on type `A` do not match the trait declaration\n-  --> $DIR/parameter_number_and_kind_impl.rs:15:11\n+  --> $DIR/parameter_number_and_kind_impl.rs:14:11\n    |\n LL |     type A<'a>;\n    |           ---- lifetimes in impl do not match this type in trait\n@@ -8,7 +8,7 @@ LL |     type A = u32;\n    |           ^ lifetimes do not match type in trait\n \n error[E0049]: type `B` has 1 type parameter but its trait declaration has 0 type parameters\n-  --> $DIR/parameter_number_and_kind_impl.rs:17:12\n+  --> $DIR/parameter_number_and_kind_impl.rs:16:12\n    |\n LL |     type B<'a, 'b>;\n    |            --  --\n@@ -21,7 +21,7 @@ LL |     type B<'a, T> = Vec<T>;\n    |            found 1 type parameter\n \n error[E0195]: lifetime parameters or bounds on type `C` do not match the trait declaration\n-  --> $DIR/parameter_number_and_kind_impl.rs:19:11\n+  --> $DIR/parameter_number_and_kind_impl.rs:18:11\n    |\n LL |     type C;\n    |           - lifetimes in impl do not match this type in trait\n@@ -30,7 +30,7 @@ LL |     type C<'a> = u32;\n    |           ^^^^ lifetimes do not match type in trait\n \n error[E0049]: type `A` has 1 type parameter but its trait declaration has 0 type parameters\n-  --> $DIR/parameter_number_and_kind_impl.rs:26:12\n+  --> $DIR/parameter_number_and_kind_impl.rs:25:12\n    |\n LL |     type A<'a>;\n    |            -- expected 0 type parameters\n@@ -39,7 +39,7 @@ LL |     type A<T> = u32;\n    |            ^ found 1 type parameter\n \n error[E0195]: lifetime parameters or bounds on type `B` do not match the trait declaration\n-  --> $DIR/parameter_number_and_kind_impl.rs:28:11\n+  --> $DIR/parameter_number_and_kind_impl.rs:27:11\n    |\n LL |     type B<'a, 'b>;\n    |           -------- lifetimes in impl do not match this type in trait\n@@ -48,7 +48,7 @@ LL |     type B<'a> = u32;\n    |           ^^^^ lifetimes do not match type in trait\n \n error[E0049]: type `C` has 1 type parameter but its trait declaration has 0 type parameters\n-  --> $DIR/parameter_number_and_kind_impl.rs:30:12\n+  --> $DIR/parameter_number_and_kind_impl.rs:29:12\n    |\n LL |     type C;\n    |           - expected 0 type parameters"}, {"sha": "767098835c4848b10cbb3e91b8907dfb84649c3d", "filename": "src/test/ui/generic-associated-types/parse/in-trait-impl.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Fin-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Fin-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Fin-trait-impl.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,8 +1,6 @@\n // check-pass\n // compile-flags: -Z parse-only\n \n-#![feature(generic_associated_types)]\n-\n impl<T> Baz for T where T: Foo {\n     type Quux<'a> = <T as Foo>::Bar<'a, 'static>;\n }"}, {"sha": "6628aac374304da35dea3ac2b3fdc70af23b337f", "filename": "src/test/ui/generic-associated-types/parse/in-trait.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Fin-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Fin-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Fin-trait.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,8 +1,6 @@\n // check-pass\n // compile-flags: -Z parse-only\n \n-#![feature(generic_associated_types)]\n-\n use std::ops::Deref;\n use std::fmt::Debug;\n "}, {"sha": "cbb05189201dafceb6072a542bc14971ed197511", "filename": "src/test/ui/generic-associated-types/parse/trait-path-expected-token.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-expected-token.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-expected-token.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-expected-token.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,3 @@\n-#![feature(generic_associated_types)]\n-\n trait X {\n     type Y<'a>;\n }"}, {"sha": "53d5f9de65754dacff5260491c612aa2c547f571", "filename": "src/test/ui/generic-associated-types/parse/trait-path-expected-token.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-expected-token.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-expected-token.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-expected-token.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,5 @@\n error: expected one of `!`, `(`, `+`, `,`, `::`, `<`, or `>`, found `=`\n-  --> $DIR/trait-path-expected-token.rs:7:33\n+  --> $DIR/trait-path-expected-token.rs:5:33\n    |\n LL | fn f1<'a>(arg : Box<dyn X<Y = B = &'a ()>>) {}\n    |                               - ^ expected one of 7 possible tokens"}, {"sha": "9183ec4976b021f12467e699fd70257fa5686f17", "filename": "src/test/ui/generic-associated-types/parse/trait-path-expressions.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-expressions.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,3 @@\n-#![feature(generic_associated_types)]\n-\n mod error1 {\n   trait X {\n       type Y<'a>;"}, {"sha": "cf2b1763fc9da50e73955f0bad40e356fc175a00", "filename": "src/test/ui/generic-associated-types/parse/trait-path-expressions.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-expressions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-expressions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-expressions.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,13 +1,13 @@\n error: expected expression, found `)`\n-  --> $DIR/trait-path-expressions.rs:8:39\n+  --> $DIR/trait-path-expressions.rs:6:39\n    |\n LL |   fn f1<'a>(arg : Box<dyn X< 1 = 32 >>) {}\n    |                              -        ^ expected expression\n    |                              |\n    |                              while parsing a const generic argument starting here\n \n error: expected one of `,`, `:`, or `>`, found `=`\n-  --> $DIR/trait-path-expressions.rs:18:36\n+  --> $DIR/trait-path-expressions.rs:16:36\n    |\n LL |   fn f2<'a>(arg : Box<dyn X< { 1 } = 32 >>) {}\n    |                                  - ^ expected one of `,`, `:`, or `>`"}, {"sha": "ecabf8943ea3cd1f638f597160a4f29829896d37", "filename": "src/test/ui/generic-associated-types/parse/trait-path-missing-gen_arg.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-missing-gen_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-missing-gen_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-missing-gen_arg.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,3 @@\n-#![feature(generic_associated_types)]\n-\n trait X {\n     type Y<'a>;\n }"}, {"sha": "10ceccedcac1b26a372fbf3a48ac49bee38e3912", "filename": "src/test/ui/generic-associated-types/parse/trait-path-missing-gen_arg.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-missing-gen_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-missing-gen_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-missing-gen_arg.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,5 @@\n error: expected one of `>`, a const expression, lifetime, or type, found `:`\n-  --> $DIR/trait-path-missing-gen_arg.rs:8:30\n+  --> $DIR/trait-path-missing-gen_arg.rs:6:30\n    |\n LL |   fn f1<'a>(arg : Box<dyn X< : 32 >>) {}\n    |                              ^ expected one of `>`, a const expression, lifetime, or type\n@@ -10,13 +10,13 @@ LL |   fn f1<'a>(arg : Box<{ dyn X< : 32 } >>) {}\n    |                       +             +\n \n error: expected parameter name, found `>`\n-  --> $DIR/trait-path-missing-gen_arg.rs:8:36\n+  --> $DIR/trait-path-missing-gen_arg.rs:6:36\n    |\n LL |   fn f1<'a>(arg : Box<dyn X< : 32 >>) {}\n    |                                    ^ expected parameter name\n \n error: expected one of `!`, `)`, `+`, `,`, or `::`, found `>`\n-  --> $DIR/trait-path-missing-gen_arg.rs:8:36\n+  --> $DIR/trait-path-missing-gen_arg.rs:6:36\n    |\n LL |   fn f1<'a>(arg : Box<dyn X< : 32 >>) {}\n    |                                    ^\n@@ -25,15 +25,15 @@ LL |   fn f1<'a>(arg : Box<dyn X< : 32 >>) {}\n    |                                    help: missing `,`\n \n error: expected one of `>`, a const expression, lifetime, or type, found `=`\n-  --> $DIR/trait-path-missing-gen_arg.rs:16:30\n+  --> $DIR/trait-path-missing-gen_arg.rs:14:30\n    |\n LL |   fn f1<'a>(arg : Box<dyn X< = 32 >>) {}\n    |                            - ^ expected one of `>`, a const expression, lifetime, or type\n    |                            |\n    |                            maybe try to close unmatched angle bracket\n \n error[E0747]: constant provided when a type was expected\n-  --> $DIR/trait-path-missing-gen_arg.rs:8:23\n+  --> $DIR/trait-path-missing-gen_arg.rs:6:23\n    |\n LL |   fn f1<'a>(arg : Box<dyn X< : 32 >>) {}\n    |                       ^^^^^^^^^^^"}, {"sha": "458e203eb3ce414ca02b3bb9ed7e233b1dd2b1c8", "filename": "src/test/ui/generic-associated-types/parse/trait-path-segments.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-segments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-segments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-segments.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,3 @@\n-#![feature(generic_associated_types)]\n-\n const _: () = {\n     trait X {\n         type Y<'a>;"}, {"sha": "8bc737d6752044c987a5a431c013eb796005ed06", "filename": "src/test/ui/generic-associated-types/parse/trait-path-segments.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-segments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-segments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-segments.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,5 @@\n error: expected one of `!`, `(`, `+`, `,`, `::`, `:`, `<`, or `>`, found `=`\n-  --> $DIR/trait-path-segments.rs:8:36\n+  --> $DIR/trait-path-segments.rs:6:36\n    |\n LL |     fn f1<'a>(arg : Box<dyn X<X::Y = u32>>) {}\n    |                                  - ^ expected one of 8 possible tokens\n@@ -12,7 +12,7 @@ LL |     fn f1<'a>(arg : Box<dyn X<X::Y> = u32>>) {}\n    |                                   +\n \n error: expected one of `,`, `::`, `:`, or `>`, found `=`\n-  --> $DIR/trait-path-segments.rs:19:35\n+  --> $DIR/trait-path-segments.rs:17:35\n    |\n LL |     impl<T : X<<Self as X>::Y<'a> = &'a u32>> Z for T {}\n    |                                 - ^ expected one of `,`, `::`, `:`, or `>`\n@@ -25,7 +25,7 @@ LL |     impl<T : X<<Self as X>::Y<'a>> = &'a u32>> Z for T {}\n    |                                  +\n \n error: expected one of `!`, `+`, `,`, `::`, `:`, or `>`, found `=`\n-  --> $DIR/trait-path-segments.rs:30:25\n+  --> $DIR/trait-path-segments.rs:28:25\n    |\n LL |     impl<T : X<X::Y<'a> = &'a u32>> Z for T {}\n    |                       - ^ expected one of `!`, `+`, `,`, `::`, `:`, or `>`"}, {"sha": "1622b92aa0cc24696e7726caa206eaef0dc6cb3e", "filename": "src/test/ui/generic-associated-types/parse/trait-path-type-error-once-implemented.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-type-error-once-implemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-type-error-once-implemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-type-error-once-implemented.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,3 @@\n-#![feature(generic_associated_types)]\n-\n trait X {\n     type Y<'a>;\n }"}, {"sha": "e00a414efb9bf7c5232e4d93646268af596e9bfe", "filename": "src/test/ui/generic-associated-types/parse/trait-path-type-error-once-implemented.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-type-error-once-implemented.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-type-error-once-implemented.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-type-error-once-implemented.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,11 +1,11 @@\n error[E0107]: this associated type takes 1 lifetime argument but 0 lifetime arguments were supplied\n-  --> $DIR/trait-path-type-error-once-implemented.rs:8:29\n+  --> $DIR/trait-path-type-error-once-implemented.rs:6:29\n    |\n LL |   fn f2<'a>(arg : Box<dyn X<Y<1> = &'a ()>>) {}\n    |                             ^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/trait-path-type-error-once-implemented.rs:4:10\n+  --> $DIR/trait-path-type-error-once-implemented.rs:2:10\n    |\n LL |     type Y<'a>;\n    |          ^ --\n@@ -15,15 +15,15 @@ LL |   fn f2<'a>(arg : Box<dyn X<Y<'a, 1> = &'a ()>>) {}\n    |                               +++\n \n error[E0107]: this associated type takes 0 generic arguments but 1 generic argument was supplied\n-  --> $DIR/trait-path-type-error-once-implemented.rs:8:29\n+  --> $DIR/trait-path-type-error-once-implemented.rs:6:29\n    |\n LL |   fn f2<'a>(arg : Box<dyn X<Y<1> = &'a ()>>) {}\n    |                             ^--- help: remove these generics\n    |                             |\n    |                             expected 0 generic arguments\n    |\n note: associated type defined here, with 0 generic parameters\n-  --> $DIR/trait-path-type-error-once-implemented.rs:4:10\n+  --> $DIR/trait-path-type-error-once-implemented.rs:2:10\n    |\n LL |     type Y<'a>;\n    |          ^"}, {"sha": "74a00342ff4b526784c8490f75efe013bf3225be", "filename": "src/test/ui/generic-associated-types/parse/trait-path-types.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-types.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,3 @@\n-#![feature(generic_associated_types)]\n-\n trait X {\n     type Y<'a>;\n }"}, {"sha": "8f7a73c95b65f78f8f186c869c1cf5b8d12accf6", "filename": "src/test/ui/generic-associated-types/parse/trait-path-types.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-types.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,5 @@\n error: expected one of `,`, `:`, or `>`, found `=`\n-  --> $DIR/trait-path-types.rs:8:37\n+  --> $DIR/trait-path-types.rs:6:37\n    |\n LL |   fn f<'a>(arg : Box<dyn X< [u8; 1] = u32>>) {}\n    |                                   - ^ expected one of `,`, `:`, or `>`\n@@ -12,7 +12,7 @@ LL |   fn f<'a>(arg : Box<dyn X< [u8; 1]> = u32>>) {}\n    |                                    +\n \n error: expected one of `,`, `:`, or `>`, found `=`\n-  --> $DIR/trait-path-types.rs:13:37\n+  --> $DIR/trait-path-types.rs:11:37\n    |\n LL |   fn f1<'a>(arg : Box<dyn X<(Y<'a>) = &'a ()>>) {}\n    |                                   - ^ expected one of `,`, `:`, or `>`\n@@ -25,7 +25,7 @@ LL |   fn f1<'a>(arg : Box<dyn X<(Y<'a>)> = &'a ()>>) {}\n    |                                    +\n \n error: expected one of `,`, `:`, or `>`, found `=`\n-  --> $DIR/trait-path-types.rs:18:33\n+  --> $DIR/trait-path-types.rs:16:33\n    |\n LL |   fn f1<'a>(arg : Box<dyn X< 'a = u32 >>) {}\n    |                              -- ^ expected one of `,`, `:`, or `>`"}, {"sha": "80827cd567b4b62c68128ccdd8d0243a30a5e262", "filename": "src/test/ui/generic-associated-types/pointer_family.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fpointer_family.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fpointer_family.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fpointer_family.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,3 @@\n-#![feature(generic_associated_types)]\n-\n // check-pass\n \n use std::rc::Rc;"}, {"sha": "58d57df63c1bda37e10cfa48fc2d774d50679409", "filename": "src/test/ui/generic-associated-types/projection-bound-cycle-generic.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle-generic.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,8 +1,6 @@\n // Like `projection-bound-cycle.rs` but this avoids using\n // `feature(trivial_bounds)`.\n \n-#![feature(generic_associated_types)]\n-\n trait Print {\n     fn print();\n }"}, {"sha": "27c1a82994a53047ce20e885eed5ddb1ba2ec369", "filename": "src/test/ui/generic-associated-types/projection-bound-cycle-generic.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle-generic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle-generic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle-generic.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,11 +1,11 @@\n error[E0275]: overflow evaluating the requirement `<T as Foo>::Item: Sized`\n-  --> $DIR/projection-bound-cycle-generic.rs:44:18\n+  --> $DIR/projection-bound-cycle-generic.rs:42:18\n    |\n LL |     type Assoc = OnlySized<<T as Foo>::Item>;\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: required by a bound in `OnlySized`\n-  --> $DIR/projection-bound-cycle-generic.rs:28:18\n+  --> $DIR/projection-bound-cycle-generic.rs:26:18\n    |\n LL | struct OnlySized<T> where T: Sized { f: T }\n    |                  ^ required by this bound in `OnlySized`"}, {"sha": "4cad1f61319ef0ecd0304dfddd7d3027c73efd85", "filename": "src/test/ui/generic-associated-types/projection-bound-cycle.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -2,7 +2,6 @@\n // Make sure that we make sure that we don't allow arbitrary bounds to be\n // proven when a bound and a where clause of an associated type are the same.\n \n-#![feature(generic_associated_types)]\n #![feature(trivial_bounds)]\n \n trait Print {"}, {"sha": "a46518c80da76cf8e8ecf861ea288edbc882e707", "filename": "src/test/ui/generic-associated-types/projection-bound-cycle.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,11 +1,11 @@\n error[E0275]: overflow evaluating the requirement `<T as Foo>::Item: Sized`\n-  --> $DIR/projection-bound-cycle.rs:46:18\n+  --> $DIR/projection-bound-cycle.rs:45:18\n    |\n LL |     type Assoc = OnlySized<<T as Foo>::Item>;\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: required by a bound in `OnlySized`\n-  --> $DIR/projection-bound-cycle.rs:30:18\n+  --> $DIR/projection-bound-cycle.rs:29:18\n    |\n LL | struct OnlySized<T> where T: Sized { f: T }\n    |                  ^ required by this bound in `OnlySized`"}, {"sha": "8e4d5ca5e2679d2692094d86a959b52870214f21", "filename": "src/test/ui/generic-associated-types/projection-type-lifetime-mismatch.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,3 @@\n-#![feature(generic_associated_types)]\n-\n pub trait X {\n     type Y<'a> where Self: 'a;\n     fn m(&self) -> Self::Y<'_>;"}, {"sha": "753ead48bf540df34a8e57909c42f5e7f2f21c0d", "filename": "src/test/ui/generic-associated-types/projection-type-lifetime-mismatch.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,21 +1,21 @@\n error: lifetime may not live long enough\n-  --> $DIR/projection-type-lifetime-mismatch.rs:17:5\n+  --> $DIR/projection-type-lifetime-mismatch.rs:15:5\n    |\n LL | fn f(x: &impl for<'a> X<Y<'a> = &'a ()>) -> &'static () {\n    |         - let's call the lifetime of this reference `'1`\n LL |     x.m()\n    |     ^^^^^ returning this value requires that `'1` must outlive `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/projection-type-lifetime-mismatch.rs:22:5\n+  --> $DIR/projection-type-lifetime-mismatch.rs:20:5\n    |\n LL | fn g<T: for<'a> X<Y<'a> = &'a ()>>(x: &T) -> &'static () {\n    |                                       - let's call the lifetime of this reference `'1`\n LL |     x.m()\n    |     ^^^^^ returning this value requires that `'1` must outlive `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/projection-type-lifetime-mismatch.rs:27:5\n+  --> $DIR/projection-type-lifetime-mismatch.rs:25:5\n    |\n LL | fn h(x: &()) -> &'static () {\n    |         - let's call the lifetime of this reference `'1`"}, {"sha": "673891fc3d1b49e95bb2d3eeaf34590959ce58d9", "filename": "src/test/ui/generic-associated-types/self-outlives-lint.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fself-outlives-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fself-outlives-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fself-outlives-lint.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,3 @@\n-#![feature(generic_associated_types)]\n-\n // check-fail\n \n use std::fmt::Debug;"}, {"sha": "58172bf06b512e6ff1ff42ca4070443e992913ce", "filename": "src/test/ui/generic-associated-types/self-outlives-lint.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fself-outlives-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fself-outlives-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fself-outlives-lint.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,5 @@\n error: missing required bound on `Item`\n-  --> $DIR/self-outlives-lint.rs:9:5\n+  --> $DIR/self-outlives-lint.rs:7:5\n    |\n LL |     type Item<'x>;\n    |     ^^^^^^^^^^^^^-\n@@ -10,7 +10,7 @@ LL |     type Item<'x>;\n    = note: we are soliciting feedback, see issue #87479 <https://github.com/rust-lang/rust/issues/87479> for more information\n \n error: missing required bound on `Out`\n-  --> $DIR/self-outlives-lint.rs:25:5\n+  --> $DIR/self-outlives-lint.rs:23:5\n    |\n LL |     type Out<'x>;\n    |     ^^^^^^^^^^^^-\n@@ -21,7 +21,7 @@ LL |     type Out<'x>;\n    = note: we are soliciting feedback, see issue #87479 <https://github.com/rust-lang/rust/issues/87479> for more information\n \n error: missing required bound on `Out`\n-  --> $DIR/self-outlives-lint.rs:39:5\n+  --> $DIR/self-outlives-lint.rs:37:5\n    |\n LL |     type Out<'x>;\n    |     ^^^^^^^^^^^^-\n@@ -32,7 +32,7 @@ LL |     type Out<'x>;\n    = note: we are soliciting feedback, see issue #87479 <https://github.com/rust-lang/rust/issues/87479> for more information\n \n error: missing required bounds on `Out`\n-  --> $DIR/self-outlives-lint.rs:46:5\n+  --> $DIR/self-outlives-lint.rs:44:5\n    |\n LL |     type Out<'x, 'y>;\n    |     ^^^^^^^^^^^^^^^^-\n@@ -43,7 +43,7 @@ LL |     type Out<'x, 'y>;\n    = note: we are soliciting feedback, see issue #87479 <https://github.com/rust-lang/rust/issues/87479> for more information\n \n error: missing required bound on `Out`\n-  --> $DIR/self-outlives-lint.rs:61:5\n+  --> $DIR/self-outlives-lint.rs:59:5\n    |\n LL |     type Out<'x, D>;\n    |     ^^^^^^^^^^^^^^^-\n@@ -54,7 +54,7 @@ LL |     type Out<'x, D>;\n    = note: we are soliciting feedback, see issue #87479 <https://github.com/rust-lang/rust/issues/87479> for more information\n \n error: missing required bound on `Out`\n-  --> $DIR/self-outlives-lint.rs:77:5\n+  --> $DIR/self-outlives-lint.rs:75:5\n    |\n LL |     type Out<'x, D>;\n    |     ^^^^^^^^^^^^^^^-\n@@ -65,7 +65,7 @@ LL |     type Out<'x, D>;\n    = note: we are soliciting feedback, see issue #87479 <https://github.com/rust-lang/rust/issues/87479> for more information\n \n error: missing required bound on `Out`\n-  --> $DIR/self-outlives-lint.rs:92:5\n+  --> $DIR/self-outlives-lint.rs:90:5\n    |\n LL |     type Out<'x, D>;\n    |     ^^^^^^^^^^^^^^^-\n@@ -76,7 +76,7 @@ LL |     type Out<'x, D>;\n    = note: we are soliciting feedback, see issue #87479 <https://github.com/rust-lang/rust/issues/87479> for more information\n \n error: missing required bounds on `Bar`\n-  --> $DIR/self-outlives-lint.rs:114:5\n+  --> $DIR/self-outlives-lint.rs:112:5\n    |\n LL |     type Bar<'b>;\n    |     ^^^^^^^^^^^^-\n@@ -87,7 +87,7 @@ LL |     type Bar<'b>;\n    = note: we are soliciting feedback, see issue #87479 <https://github.com/rust-lang/rust/issues/87479> for more information\n \n error: missing required bound on `Bar`\n-  --> $DIR/self-outlives-lint.rs:122:5\n+  --> $DIR/self-outlives-lint.rs:120:5\n    |\n LL |     type Bar<'b>;\n    |     ^^^^^^^^^^^^-\n@@ -98,7 +98,7 @@ LL |     type Bar<'b>;\n    = note: we are soliciting feedback, see issue #87479 <https://github.com/rust-lang/rust/issues/87479> for more information\n \n error: missing required bound on `Bar`\n-  --> $DIR/self-outlives-lint.rs:129:5\n+  --> $DIR/self-outlives-lint.rs:127:5\n    |\n LL |     type Bar<'b>;\n    |     ^^^^^^^^^^^^-\n@@ -109,7 +109,7 @@ LL |     type Bar<'b>;\n    = note: we are soliciting feedback, see issue #87479 <https://github.com/rust-lang/rust/issues/87479> for more information\n \n error: missing required bound on `Item`\n-  --> $DIR/self-outlives-lint.rs:142:5\n+  --> $DIR/self-outlives-lint.rs:140:5\n    |\n LL |     type Item<'a>;\n    |     ^^^^^^^^^^^^^-\n@@ -120,7 +120,7 @@ LL |     type Item<'a>;\n    = note: we are soliciting feedback, see issue #87479 <https://github.com/rust-lang/rust/issues/87479> for more information\n \n error: missing required bound on `Iterator`\n-  --> $DIR/self-outlives-lint.rs:144:5\n+  --> $DIR/self-outlives-lint.rs:142:5\n    |\n LL |     type Iterator<'a>: Iterator<Item = Self::Item<'a>>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n@@ -131,7 +131,7 @@ LL |     type Iterator<'a>: Iterator<Item = Self::Item<'a>>;\n    = note: we are soliciting feedback, see issue #87479 <https://github.com/rust-lang/rust/issues/87479> for more information\n \n error: missing required bound on `Item`\n-  --> $DIR/self-outlives-lint.rs:150:5\n+  --> $DIR/self-outlives-lint.rs:148:5\n    |\n LL |     type Item<'a>;\n    |     ^^^^^^^^^^^^^-\n@@ -142,7 +142,7 @@ LL |     type Item<'a>;\n    = note: we are soliciting feedback, see issue #87479 <https://github.com/rust-lang/rust/issues/87479> for more information\n \n error: missing required bound on `Bar`\n-  --> $DIR/self-outlives-lint.rs:159:5\n+  --> $DIR/self-outlives-lint.rs:157:5\n    |\n LL |     type Bar<'a, 'b>;\n    |     ^^^^^^^^^^^^^^^^-\n@@ -153,7 +153,7 @@ LL |     type Bar<'a, 'b>;\n    = note: we are soliciting feedback, see issue #87479 <https://github.com/rust-lang/rust/issues/87479> for more information\n \n error: missing required bound on `Fut`\n-  --> $DIR/self-outlives-lint.rs:175:5\n+  --> $DIR/self-outlives-lint.rs:173:5\n    |\n LL |     type Fut<'out>;\n    |     ^^^^^^^^^^^^^^-\n@@ -164,7 +164,7 @@ LL |     type Fut<'out>;\n    = note: we are soliciting feedback, see issue #87479 <https://github.com/rust-lang/rust/issues/87479> for more information\n \n error: missing required bound on `Item`\n-  --> $DIR/self-outlives-lint.rs:215:5\n+  --> $DIR/self-outlives-lint.rs:213:5\n    |\n LL |     type Item<'a>;\n    |     ^^^^^^^^^^^^^-"}, {"sha": "a05d6e14352bb48120983c8fea49570975b73a06", "filename": "src/test/ui/generic-associated-types/shadowing.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fshadowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fshadowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fshadowing.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,3 @@\n-#![feature(generic_associated_types)]\n-\n trait Shadow<'a> {\n     type Bar<'a>;\n     //~^ ERROR lifetime name `'a` shadows a lifetime name that is already in scope"}, {"sha": "bb32684bc7b9eb0e2d819ec3610e44c70073212f", "filename": "src/test/ui/generic-associated-types/shadowing.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fshadowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fshadowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fshadowing.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,29 +1,29 @@\n error[E0496]: lifetime name `'a` shadows a lifetime name that is already in scope\n-  --> $DIR/shadowing.rs:4:14\n+  --> $DIR/shadowing.rs:2:14\n    |\n LL | trait Shadow<'a> {\n    |              -- first declared here\n LL |     type Bar<'a>;\n    |              ^^ lifetime `'a` already in scope\n \n error[E0496]: lifetime name `'a` shadows a lifetime name that is already in scope\n-  --> $DIR/shadowing.rs:13:14\n+  --> $DIR/shadowing.rs:11:14\n    |\n LL | impl<'a> NoShadow<'a> for &'a u32 {\n    |      -- first declared here\n LL |     type Bar<'a> = i32;\n    |              ^^ lifetime `'a` already in scope\n \n error[E0403]: the name `T` is already used for a generic parameter in this item's generic parameters\n-  --> $DIR/shadowing.rs:18:14\n+  --> $DIR/shadowing.rs:16:14\n    |\n LL | trait ShadowT<T> {\n    |               - first use of `T`\n LL |     type Bar<T>;\n    |              ^ already used\n \n error[E0403]: the name `T` is already used for a generic parameter in this item's generic parameters\n-  --> $DIR/shadowing.rs:27:14\n+  --> $DIR/shadowing.rs:25:14\n    |\n LL | impl<T> NoShadowT<T> for Option<T> {\n    |      - first use of `T`"}, {"sha": "408b8dc99eb4ebeb8ab2b0ce5a9267bb5c4d4a08", "filename": "src/test/ui/generic-associated-types/streaming_iterator.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fstreaming_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fstreaming_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fstreaming_iterator.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,7 +1,5 @@\n // run-pass\n \n-#![feature(generic_associated_types)]\n-\n use std::fmt::Display;\n \n trait StreamingIterator {"}, {"sha": "556422c272cf6ba57505b9882c3baeeab31ff163", "filename": "src/test/ui/generic-associated-types/trait-objects.base.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.base.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,11 +1,11 @@\n error[E0038]: the trait `StreamingIterator` cannot be made into an object\n-  --> $DIR/trait-objects.rs:14:21\n+  --> $DIR/trait-objects.rs:13:21\n    |\n LL | fn min_size(x: &mut dyn for<'a> StreamingIterator<Item<'a> = &'a i32>) -> usize {\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `StreamingIterator` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/trait-objects.rs:8:10\n+  --> $DIR/trait-objects.rs:7:10\n    |\n LL | trait StreamingIterator {\n    |       ----------------- this trait cannot be made into an object..."}, {"sha": "086177cc106dc224dfcdcd99dc42db122f22b250", "filename": "src/test/ui/generic-associated-types/trait-objects.extended.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.extended.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.extended.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.extended.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,5 @@\n error[E0521]: borrowed data escapes outside of function\n-  --> $DIR/trait-objects.rs:16:5\n+  --> $DIR/trait-objects.rs:15:5\n    |\n LL | fn min_size(x: &mut dyn for<'a> StreamingIterator<Item<'a> = &'a i32>) -> usize {\n    |             -  - let's call the lifetime of this reference `'1`"}, {"sha": "17fed11bac360e4e929eb17ffca625b38d8efdf5", "filename": "src/test/ui/generic-associated-types/trait-objects.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,6 +1,5 @@\n // revisions: base extended\n \n-#![feature(generic_associated_types)]\n #![cfg_attr(extended, feature(generic_associated_types_extended))]\n #![cfg_attr(extended, allow(incomplete_features))]\n "}, {"sha": "1cc09aa6dd4ca6d6713249bfadf4a9c9910b1d1b", "filename": "src/test/ui/generic-associated-types/unsatified-item-lifetime-bound.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatified-item-lifetime-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatified-item-lifetime-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatified-item-lifetime-bound.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,3 @@\n-#![feature(generic_associated_types)]\n-\n pub trait X {\n     type Y<'a: 'static>;\n     //~^ WARNING unnecessary lifetime parameter"}, {"sha": "fbd79879d0fb17b72178da96b3e8ff9890b2702e", "filename": "src/test/ui/generic-associated-types/unsatified-item-lifetime-bound.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatified-item-lifetime-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatified-item-lifetime-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatified-item-lifetime-bound.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,45 +1,45 @@\n warning: unnecessary lifetime parameter `'a`\n-  --> $DIR/unsatified-item-lifetime-bound.rs:4:12\n+  --> $DIR/unsatified-item-lifetime-bound.rs:2:12\n    |\n LL |     type Y<'a: 'static>;\n    |            ^^\n    |\n    = help: you can use the `'static` lifetime directly, in place of `'a`\n \n error[E0478]: lifetime bound not satisfied\n-  --> $DIR/unsatified-item-lifetime-bound.rs:13:8\n+  --> $DIR/unsatified-item-lifetime-bound.rs:11:8\n    |\n LL |     f: <T as X>::Y<'a>,\n    |        ^^^^^^^^^^^^^^^\n    |\n note: lifetime parameter instantiated with the lifetime `'a` as defined here\n-  --> $DIR/unsatified-item-lifetime-bound.rs:12:10\n+  --> $DIR/unsatified-item-lifetime-bound.rs:10:10\n    |\n LL | struct B<'a, T: for<'r> X<Y<'r> = &'r ()>> {\n    |          ^^\n    = note: but lifetime parameter must outlive the static lifetime\n \n error[E0478]: lifetime bound not satisfied\n-  --> $DIR/unsatified-item-lifetime-bound.rs:18:8\n+  --> $DIR/unsatified-item-lifetime-bound.rs:16:8\n    |\n LL |     f: <T as X>::Y<'a>,\n    |        ^^^^^^^^^^^^^^^\n    |\n note: lifetime parameter instantiated with the lifetime `'a` as defined here\n-  --> $DIR/unsatified-item-lifetime-bound.rs:17:10\n+  --> $DIR/unsatified-item-lifetime-bound.rs:15:10\n    |\n LL | struct C<'a, T: X> {\n    |          ^^\n    = note: but lifetime parameter must outlive the static lifetime\n \n error[E0478]: lifetime bound not satisfied\n-  --> $DIR/unsatified-item-lifetime-bound.rs:23:8\n+  --> $DIR/unsatified-item-lifetime-bound.rs:21:8\n    |\n LL |     f: <() as X>::Y<'a>,\n    |        ^^^^^^^^^^^^^^^^\n    |\n note: lifetime parameter instantiated with the lifetime `'a` as defined here\n-  --> $DIR/unsatified-item-lifetime-bound.rs:22:10\n+  --> $DIR/unsatified-item-lifetime-bound.rs:20:10\n    |\n LL | struct D<'a> {\n    |          ^^"}, {"sha": "7137d92379efb3d0871df5b2024803e0fa00ea02", "filename": "src/test/ui/generic-associated-types/unsatisfied-outlives-bound.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatisfied-outlives-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatisfied-outlives-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatisfied-outlives-bound.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,3 @@\n-#![feature(generic_associated_types)]\n-\n trait ATy {\n     type Item<'a>: 'a;\n }"}, {"sha": "1c9ac01ec0f3f62716bd98be7ad4cba027129d8f", "filename": "src/test/ui/generic-associated-types/unsatisfied-outlives-bound.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatisfied-outlives-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatisfied-outlives-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatisfied-outlives-bound.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,23 +1,23 @@\n error[E0477]: the type `&'b ()` does not fulfill the required lifetime\n-  --> $DIR/unsatisfied-outlives-bound.rs:8:21\n+  --> $DIR/unsatisfied-outlives-bound.rs:6:21\n    |\n LL |     type Item<'a> = &'b ();\n    |                     ^^^^^^\n    |\n note: type must outlive the lifetime `'a` as defined here as required by this binding\n-  --> $DIR/unsatisfied-outlives-bound.rs:8:15\n+  --> $DIR/unsatisfied-outlives-bound.rs:6:15\n    |\n LL |     type Item<'a> = &'b ();\n    |               ^^\n \n error[E0477]: the type `&'a ()` does not fulfill the required lifetime\n-  --> $DIR/unsatisfied-outlives-bound.rs:17:21\n+  --> $DIR/unsatisfied-outlives-bound.rs:15:21\n    |\n LL |     type Item<'a> = &'a ();\n    |                     ^^^^^^\n    |\n note: type must satisfy the static lifetime as required by this binding\n-  --> $DIR/unsatisfied-outlives-bound.rs:13:20\n+  --> $DIR/unsatisfied-outlives-bound.rs:11:20\n    |\n LL |     type Item<'a>: 'static;\n    |                    ^^^^^^^"}, {"sha": "0e9dbb8b1becb8c8767ea065b539f4a6d249b774", "filename": "src/test/ui/generic-associated-types/variance_constraints.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fvariance_constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fvariance_constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fvariance_constraints.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,6 +1,5 @@\n // check-pass\n // issue #69184\n-#![feature(generic_associated_types)]\n \n trait A {\n     type B<'a> where Self: 'a;"}, {"sha": "effc329456d46ebbefeeada95b13cfa190b3f011", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-90612.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-90612.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-90612.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-90612.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,7 +1,5 @@\n // check-pass\n \n-#![feature(generic_associated_types)]\n-\n use std::marker::PhantomData;\n \n trait Family: Sized {"}, {"sha": "628b5cba1042460f6f8208a80de462318eac8b16", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-90638.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-90638.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-90638.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-90638.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,7 +1,5 @@\n //check-pass\n \n-#![feature(generic_associated_types)]\n-\n trait Yokeable<'a>: 'static {\n     type Output: 'a;\n }"}, {"sha": "b0c0d33975c307fad27667bb14f42c5294d2cee0", "filename": "src/test/ui/inference/need_type_info/expr-struct-type-relative-gat.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fexpr-struct-type-relative-gat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fexpr-struct-type-relative-gat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fexpr-struct-type-relative-gat.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,3 @@\n-#![feature(generic_associated_types)]\n-\n trait Foo {\n     type Output<T>;\n "}, {"sha": "cbc2477deb39a36334c2b483c8e010a938c6f0db", "filename": "src/test/ui/inference/need_type_info/expr-struct-type-relative-gat.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fexpr-struct-type-relative-gat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fexpr-struct-type-relative-gat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fexpr-struct-type-relative-gat.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,5 @@\n error[E0282]: type annotations needed\n-  --> $DIR/expr-struct-type-relative-gat.rs:17:9\n+  --> $DIR/expr-struct-type-relative-gat.rs:15:9\n    |\n LL |         Self::Output::Simple {};\n    |         ^^^^^^^^^^^^ cannot infer type for type parameter `T` declared on the associated type `Output`"}, {"sha": "51c564c011a863d925c1362def3003682397b69a", "filename": "src/test/ui/lifetimes/missing-lifetime-in-alias.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Flifetimes%2Fmissing-lifetime-in-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Flifetimes%2Fmissing-lifetime-in-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fmissing-lifetime-in-alias.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,3 @@\n-#![feature(generic_associated_types)]\n-\n trait Trait<'a> {\n     type Foo;\n "}, {"sha": "428b8f14b6fcd0e25f266889059cf744b532e9fe", "filename": "src/test/ui/lifetimes/missing-lifetime-in-alias.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Flifetimes%2Fmissing-lifetime-in-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Flifetimes%2Fmissing-lifetime-in-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fmissing-lifetime-in-alias.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,5 @@\n error[E0106]: missing lifetime specifier\n-  --> $DIR/missing-lifetime-in-alias.rs:22:24\n+  --> $DIR/missing-lifetime-in-alias.rs:20:24\n    |\n LL | type B<'a> = <A<'a> as Trait>::Foo;\n    |                        ^^^^^ expected named lifetime parameter\n@@ -10,13 +10,13 @@ LL | type B<'a> = <A<'a> as Trait<'a>>::Foo;\n    |                             ++++\n \n error[E0106]: missing lifetime specifier\n-  --> $DIR/missing-lifetime-in-alias.rs:26:28\n+  --> $DIR/missing-lifetime-in-alias.rs:24:28\n    |\n LL | type C<'a, 'b> = <A<'a> as Trait>::Bar;\n    |                            ^^^^^ expected named lifetime parameter\n    |\n note: these named lifetimes are available to use\n-  --> $DIR/missing-lifetime-in-alias.rs:26:8\n+  --> $DIR/missing-lifetime-in-alias.rs:24:8\n    |\n LL | type C<'a, 'b> = <A<'a> as Trait>::Bar;\n    |        ^^  ^^\n@@ -26,13 +26,13 @@ LL | type C<'a, 'b> = <A<'a> as Trait<'lifetime>>::Bar;\n    |                                 +++++++++++\n \n error[E0107]: missing generics for associated type `Trait::Bar`\n-  --> $DIR/missing-lifetime-in-alias.rs:26:36\n+  --> $DIR/missing-lifetime-in-alias.rs:24:36\n    |\n LL | type C<'a, 'b> = <A<'a> as Trait>::Bar;\n    |                                    ^^^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'b`\n-  --> $DIR/missing-lifetime-in-alias.rs:6:10\n+  --> $DIR/missing-lifetime-in-alias.rs:4:10\n    |\n LL |     type Bar<'b>\n    |          ^^^ --"}, {"sha": "1291a021bef5d9ad3a1beaaacd2be03dcf6d52d8", "filename": "src/test/ui/parser/impl-item-type-no-body-semantic-fail.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fparser%2Fimpl-item-type-no-body-semantic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fparser%2Fimpl-item-type-no-body-semantic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fimpl-item-type-no-body-semantic-fail.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,3 @@\n-#![feature(generic_associated_types)]\n-\n fn main() {}\n \n struct X;"}, {"sha": "3856754e080a2a56f7841281d86e3c041bee19f5", "filename": "src/test/ui/parser/impl-item-type-no-body-semantic-fail.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fparser%2Fimpl-item-type-no-body-semantic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fparser%2Fimpl-item-type-no-body-semantic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fimpl-item-type-no-body-semantic-fail.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,49 +1,49 @@\n error: associated type in `impl` without body\n-  --> $DIR/impl-item-type-no-body-semantic-fail.rs:8:5\n+  --> $DIR/impl-item-type-no-body-semantic-fail.rs:6:5\n    |\n LL |     type Y;\n    |     ^^^^^^-\n    |           |\n    |           help: provide a definition for the type: `= <type>;`\n \n error: associated type in `impl` without body\n-  --> $DIR/impl-item-type-no-body-semantic-fail.rs:11:5\n+  --> $DIR/impl-item-type-no-body-semantic-fail.rs:9:5\n    |\n LL |     type Z: Ord;\n    |     ^^^^^^^^^^^-\n    |                |\n    |                help: provide a definition for the type: `= <type>;`\n \n error: bounds on `type`s in `impl`s have no effect\n-  --> $DIR/impl-item-type-no-body-semantic-fail.rs:11:13\n+  --> $DIR/impl-item-type-no-body-semantic-fail.rs:9:13\n    |\n LL |     type Z: Ord;\n    |             ^^^\n \n error: associated type in `impl` without body\n-  --> $DIR/impl-item-type-no-body-semantic-fail.rs:15:5\n+  --> $DIR/impl-item-type-no-body-semantic-fail.rs:13:5\n    |\n LL |     type W: Ord where Self: Eq;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |                               |\n    |                               help: provide a definition for the type: `= <type>;`\n \n error: bounds on `type`s in `impl`s have no effect\n-  --> $DIR/impl-item-type-no-body-semantic-fail.rs:15:13\n+  --> $DIR/impl-item-type-no-body-semantic-fail.rs:13:13\n    |\n LL |     type W: Ord where Self: Eq;\n    |             ^^^\n \n error: associated type in `impl` without body\n-  --> $DIR/impl-item-type-no-body-semantic-fail.rs:19:5\n+  --> $DIR/impl-item-type-no-body-semantic-fail.rs:17:5\n    |\n LL |     type W where Self: Eq;\n    |     ^^^^^^^^^^^^^^^^^^^^^-\n    |                          |\n    |                          help: provide a definition for the type: `= <type>;`\n \n error[E0658]: inherent associated types are unstable\n-  --> $DIR/impl-item-type-no-body-semantic-fail.rs:8:5\n+  --> $DIR/impl-item-type-no-body-semantic-fail.rs:6:5\n    |\n LL |     type Y;\n    |     ^^^^^^^\n@@ -52,7 +52,7 @@ LL |     type Y;\n    = help: add `#![feature(inherent_associated_types)]` to the crate attributes to enable\n \n error[E0658]: inherent associated types are unstable\n-  --> $DIR/impl-item-type-no-body-semantic-fail.rs:11:5\n+  --> $DIR/impl-item-type-no-body-semantic-fail.rs:9:5\n    |\n LL |     type Z: Ord;\n    |     ^^^^^^^^^^^^\n@@ -61,7 +61,7 @@ LL |     type Z: Ord;\n    = help: add `#![feature(inherent_associated_types)]` to the crate attributes to enable\n \n error[E0658]: inherent associated types are unstable\n-  --> $DIR/impl-item-type-no-body-semantic-fail.rs:15:5\n+  --> $DIR/impl-item-type-no-body-semantic-fail.rs:13:5\n    |\n LL |     type W: Ord where Self: Eq;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -70,7 +70,7 @@ LL |     type W: Ord where Self: Eq;\n    = help: add `#![feature(inherent_associated_types)]` to the crate attributes to enable\n \n error[E0658]: inherent associated types are unstable\n-  --> $DIR/impl-item-type-no-body-semantic-fail.rs:19:5\n+  --> $DIR/impl-item-type-no-body-semantic-fail.rs:17:5\n    |\n LL |     type W where Self: Eq;\n    |     ^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "2f47c0d91fa96ab9e5ec44c417bec931ae788737", "filename": "src/test/ui/parser/type-alias-where-fixable.fixed", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fparser%2Ftype-alias-where-fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fparser%2Ftype-alias-where-fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftype-alias-where-fixable.fixed?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,8 +1,6 @@\n // check-pass\n // run-rustfix\n \n-#![feature(generic_associated_types)]\n-\n trait Trait {\n     // Fine.\n     type Assoc where u32: Copy;"}, {"sha": "b20aa9398b58f2ea87453f8228f3e831b001f706", "filename": "src/test/ui/parser/type-alias-where-fixable.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fparser%2Ftype-alias-where-fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fparser%2Ftype-alias-where-fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftype-alias-where-fixable.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,8 +1,6 @@\n // check-pass\n // run-rustfix\n \n-#![feature(generic_associated_types)]\n-\n trait Trait {\n     // Fine.\n     type Assoc where u32: Copy;"}, {"sha": "2e516d5c478775597f6c2e2d1a6f5d1b34428c95", "filename": "src/test/ui/parser/type-alias-where-fixable.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fparser%2Ftype-alias-where-fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fparser%2Ftype-alias-where-fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftype-alias-where-fixable.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,5 @@\n warning: where clause not allowed here\n-  --> $DIR/type-alias-where-fixable.rs:15:16\n+  --> $DIR/type-alias-where-fixable.rs:13:16\n    |\n LL |     type Assoc where u32: Copy = ();\n    |                ^^^^^^^^^^^^^^^\n@@ -13,7 +13,7 @@ LL +     type Assoc  = () where u32: Copy;\n    |\n \n warning: where clause not allowed here\n-  --> $DIR/type-alias-where-fixable.rs:18:17\n+  --> $DIR/type-alias-where-fixable.rs:16:17\n    |\n LL |     type Assoc2 where u32: Copy = () where i32: Copy;\n    |                 ^^^^^^^^^^^^^^^\n@@ -26,7 +26,7 @@ LL +     type Assoc2  = () where i32: Copy, u32: Copy;\n    |\n \n warning: where clause not allowed here\n-  --> $DIR/type-alias-where-fixable.rs:26:17\n+  --> $DIR/type-alias-where-fixable.rs:24:17\n    |\n LL |     type Assoc2 where u32: Copy, i32: Copy = ();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "62e301cb4086f745ac84ba7347e9ca0662a99a3c", "filename": "src/test/ui/parser/type-alias-where.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fparser%2Ftype-alias-where.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fparser%2Ftype-alias-where.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftype-alias-where.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,7 +1,5 @@\n // check-fail\n \n-#![feature(generic_associated_types)]\n-\n // Fine, but lints as unused\n type Foo where u32: Copy = ();\n // Not fine."}, {"sha": "fb83817926696f7215190aade2db1205dd6d9421", "filename": "src/test/ui/parser/type-alias-where.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fparser%2Ftype-alias-where.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fparser%2Ftype-alias-where.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftype-alias-where.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,13 +1,13 @@\n error: where clauses are not allowed after the type for type aliases\n-  --> $DIR/type-alias-where.rs:8:15\n+  --> $DIR/type-alias-where.rs:6:15\n    |\n LL | type Bar = () where u32: Copy;\n    |               ^^^^^^^^^^^^^^^\n    |\n    = note: see issue #89122 <https://github.com/rust-lang/rust/issues/89122> for more information\n \n error: where clauses are not allowed after the type for type aliases\n-  --> $DIR/type-alias-where.rs:10:15\n+  --> $DIR/type-alias-where.rs:8:15\n    |\n LL | type Baz = () where;\n    |               ^^^^^"}, {"sha": "31a0685d004bffe3fa8463aa94ecda8e85506576", "filename": "src/test/ui/specialization/default-generic-associated-type-bound.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fspecialization%2Fdefault-generic-associated-type-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fspecialization%2Fdefault-generic-associated-type-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefault-generic-associated-type-bound.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,8 +1,7 @@\n // Check that default generics associated types are validated.\n \n #![feature(specialization)]\n-#![feature(generic_associated_types)]\n-//~^^ WARNING `specialization` is incomplete\n+//~^ WARNING `specialization` is incomplete\n \n trait X {\n     type U<'a>: PartialEq<&'a Self> where Self: 'a;"}, {"sha": "44c24c1e578a11e75b296013b2cf3b87ca084da9", "filename": "src/test/ui/specialization/default-generic-associated-type-bound.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fspecialization%2Fdefault-generic-associated-type-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fspecialization%2Fdefault-generic-associated-type-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefault-generic-associated-type-bound.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -9,14 +9,14 @@ LL | #![feature(specialization)]\n    = help: consider using `min_specialization` instead, which is more stable and complete\n \n error[E0277]: can't compare `T` with `T`\n-  --> $DIR/default-generic-associated-type-bound.rs:18:26\n+  --> $DIR/default-generic-associated-type-bound.rs:17:26\n    |\n LL |     default type U<'a> = &'a T;\n    |                          ^^^^^ no implementation for `T == T`\n    |\n    = note: required for `&'a T` to implement `PartialEq`\n note: required by a bound in `X::U`\n-  --> $DIR/default-generic-associated-type-bound.rs:8:17\n+  --> $DIR/default-generic-associated-type-bound.rs:7:17\n    |\n LL |     type U<'a>: PartialEq<&'a Self> where Self: 'a;\n    |                 ^^^^^^^^^^^^^^^^^^^ required by this bound in `X::U`"}, {"sha": "dd52b3150551a5e2c13227954d98a67a6c56859d", "filename": "src/test/ui/suggestions/issue-85347.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fsuggestions%2Fissue-85347.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fsuggestions%2Fissue-85347.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-85347.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,3 @@\n-#![allow(incomplete_features)]\n-#![feature(generic_associated_types)]\n use std::ops::Deref;\n trait Foo {\n     type Bar<'a>: Deref<Target = <Self>::Bar<Target = Self>>;"}, {"sha": "de853de27e40e425f902d377f25deb2c5332d743", "filename": "src/test/ui/suggestions/issue-85347.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fsuggestions%2Fissue-85347.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Fsuggestions%2Fissue-85347.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-85347.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,11 +1,11 @@\n error[E0107]: this associated type takes 1 lifetime argument but 0 lifetime arguments were supplied\n-  --> $DIR/issue-85347.rs:5:42\n+  --> $DIR/issue-85347.rs:3:42\n    |\n LL |     type Bar<'a>: Deref<Target = <Self>::Bar<Target = Self>>;\n    |                                          ^^^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/issue-85347.rs:5:10\n+  --> $DIR/issue-85347.rs:3:10\n    |\n LL |     type Bar<'a>: Deref<Target = <Self>::Bar<Target = Self>>;\n    |          ^^^ --"}, {"sha": "15aead2f641171b40fdcca9c118a40302bd7918d", "filename": "src/test/ui/type-alias-impl-trait/issue-90400-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-90400-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-90400-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-90400-1.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,7 +1,6 @@\n // Regression test for #90400,\n // taken from https://github.com/rust-lang/rust/issues/90400#issuecomment-954927836\n \n-#![feature(generic_associated_types)]\n #![feature(type_alias_impl_trait)]\n \n trait Bar {"}, {"sha": "ead28769f0660fb9e43538b95c8ae217a9003f2b", "filename": "src/test/ui/type-alias-impl-trait/issue-90400-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-90400-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-90400-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-90400-1.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `B: Bar` is not satisfied\n-  --> $DIR/issue-90400-1.rs:23:9\n+  --> $DIR/issue-90400-1.rs:22:9\n    |\n LL |         move || bar.bar()\n    |         ^^^^^^^^^^^^^^^^^ the trait `Bar` is not implemented for `B`\n    |\n note: required by a bound in `<MyFoo as Foo>::foo`\n-  --> $DIR/issue-90400-1.rs:22:15\n+  --> $DIR/issue-90400-1.rs:21:15\n    |\n LL |     fn foo<B: Bar>(&self, bar: B) -> Self::FooFn<B> {\n    |               ^^^ required by this bound in `<MyFoo as Foo>::foo`"}, {"sha": "4c6e893c1729206930d6095793f4f32ddb725d2b", "filename": "src/test/ui/type-alias-impl-trait/issue-90400-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-90400-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-90400-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-90400-2.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,7 +1,6 @@\n // Regression test for #90400,\n // taken from https://github.com/rust-lang/rust/issues/90400#issuecomment-954927836\n \n-#![feature(generic_associated_types)]\n #![feature(type_alias_impl_trait)]\n \n trait Bar {"}, {"sha": "50b2dc0495d7f2835c8d4196d3f982ed0b7e46ee", "filename": "src/test/ui/type-alias-impl-trait/issue-90400-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-90400-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-90400-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-90400-2.stderr?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `B: Bar` is not satisfied\n-  --> $DIR/issue-90400-2.rs:26:9\n+  --> $DIR/issue-90400-2.rs:25:9\n    |\n LL |         MyBaz(bar)\n    |         ^^^^^^^^^^ the trait `Bar` is not implemented for `B`\n    |\n note: required for `MyBaz<B>` to implement `Baz`\n-  --> $DIR/issue-90400-2.rs:31:14\n+  --> $DIR/issue-90400-2.rs:30:14\n    |\n LL | impl<B: Bar> Baz for MyBaz<B> {\n    |              ^^^     ^^^^^^^^"}, {"sha": "9482512efca0a4dd94062b992478ddc6a95e1795", "filename": "src/tools/rustfmt/tests/source/issue_4257.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fissue_4257.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fissue_4257.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fissue_4257.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,6 +1,3 @@\n-#![feature(generic_associated_types)]\n-#![allow(incomplete_features)]\n-\n trait Trait<T> {\n     type Type<'a> where T: 'a;\n     fn foo(x: &T) -> Self::Type<'_>;"}, {"sha": "c254db7b509cc765189cacc188f56a28490dae3f", "filename": "src/tools/rustfmt/tests/source/issue_4911.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fissue_4911.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fissue_4911.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fissue_4911.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,4 +1,3 @@\n-#![feature(generic_associated_types)]\n #![feature(min_type_alias_impl_trait)]\n \n impl SomeTrait for SomeType {"}, {"sha": "307d9a4a1aba195c5a342d9e2ae7bcf8e20c28ba", "filename": "src/tools/rustfmt/tests/source/issue_4943.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fissue_4943.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fissue_4943.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fissue_4943.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,3 @@\n-#![feature(generic_associated_types)]\n-\n impl SomeStruct {\n     fn process<T>(v: T) -> <Self as GAT>::R<T>\n     where Self: GAT<R<T> = T>"}, {"sha": "309a66c8dc3ccfb6e7782a36bb483a213926203d", "filename": "src/tools/rustfmt/tests/target/issue_4257.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue_4257.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue_4257.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue_4257.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,6 +1,3 @@\n-#![feature(generic_associated_types)]\n-#![allow(incomplete_features)]\n-\n trait Trait<T> {\n     type Type<'a>\n     where"}, {"sha": "0f64aa7f766fd649518262618f634d9e12f43d6e", "filename": "src/tools/rustfmt/tests/target/issue_4911.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue_4911.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue_4911.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue_4911.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,4 +1,3 @@\n-#![feature(generic_associated_types)]\n #![feature(min_type_alias_impl_trait)]\n \n impl SomeTrait for SomeType {"}, {"sha": "bc8f1a366da29d75c30ab1ee13af05d1d2ff30ee", "filename": "src/tools/rustfmt/tests/target/issue_4943.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue_4943.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue_4943.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue_4943.rs?ref=3cf0e98dc9a67086f4e738edb9d61b2fee1a38b0", "patch": "@@ -1,5 +1,3 @@\n-#![feature(generic_associated_types)]\n-\n impl SomeStruct {\n     fn process<T>(v: T) -> <Self as GAT>::R<T>\n     where"}]}