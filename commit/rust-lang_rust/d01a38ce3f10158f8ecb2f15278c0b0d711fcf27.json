{"sha": "d01a38ce3f10158f8ecb2f15278c0b0d711fcf27", "node_id": "C_kwDOAAsO6NoAKGQwMWEzOGNlM2YxMDE1OGY4ZWNiMmYxNTI3OGMwYjBkNzExZmNmMjc", "commit": {"author": {"name": "Jonas Platte", "email": "jplatte@matrix.org", "date": "2023-03-31T11:53:57Z"}, "committer": {"name": "Jonas Platte", "email": "jplatte@matrix.org", "date": "2023-03-31T11:53:57Z"}, "message": "Address second round of review comments", "tree": {"sha": "6cc3888cc7bc8e6e39d8b368e95aede856eaf80c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6cc3888cc7bc8e6e39d8b368e95aede856eaf80c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d01a38ce3f10158f8ecb2f15278c0b0d711fcf27", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niIkEABYIADEWIQSXh9PzuU+wqFLlTaCqp6YfaWw+DAUCZCbJ1RMcanBsYXR0ZUBt\nYXRyaXgub3JnAAoJEKqnph9pbD4MxWwBAIWRVbi16Rni14RjYQciDcJB8k35Gbl0\nptEcwNYAU0ZkAQDIi8WpaoHPm8hXEb5/DX1q7JQnLu9o4a8jU8i5qmsPAw==\n=OAOn\n-----END PGP SIGNATURE-----", "payload": "tree 6cc3888cc7bc8e6e39d8b368e95aede856eaf80c\nparent 0e11d507e10f64b1575cb2b65e0b0632eb1c3c8b\nauthor Jonas Platte <jplatte@matrix.org> 1680263637 +0200\ncommitter Jonas Platte <jplatte@matrix.org> 1680263637 +0200\n\nAddress second round of review comments\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d01a38ce3f10158f8ecb2f15278c0b0d711fcf27", "html_url": "https://github.com/rust-lang/rust/commit/d01a38ce3f10158f8ecb2f15278c0b0d711fcf27", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d01a38ce3f10158f8ecb2f15278c0b0d711fcf27/comments", "author": {"login": "jplatte", "id": 951129, "node_id": "MDQ6VXNlcjk1MTEyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/951129?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jplatte", "html_url": "https://github.com/jplatte", "followers_url": "https://api.github.com/users/jplatte/followers", "following_url": "https://api.github.com/users/jplatte/following{/other_user}", "gists_url": "https://api.github.com/users/jplatte/gists{/gist_id}", "starred_url": "https://api.github.com/users/jplatte/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jplatte/subscriptions", "organizations_url": "https://api.github.com/users/jplatte/orgs", "repos_url": "https://api.github.com/users/jplatte/repos", "events_url": "https://api.github.com/users/jplatte/events{/privacy}", "received_events_url": "https://api.github.com/users/jplatte/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jplatte", "id": 951129, "node_id": "MDQ6VXNlcjk1MTEyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/951129?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jplatte", "html_url": "https://github.com/jplatte", "followers_url": "https://api.github.com/users/jplatte/followers", "following_url": "https://api.github.com/users/jplatte/following{/other_user}", "gists_url": "https://api.github.com/users/jplatte/gists{/gist_id}", "starred_url": "https://api.github.com/users/jplatte/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jplatte/subscriptions", "organizations_url": "https://api.github.com/users/jplatte/orgs", "repos_url": "https://api.github.com/users/jplatte/repos", "events_url": "https://api.github.com/users/jplatte/events{/privacy}", "received_events_url": "https://api.github.com/users/jplatte/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e11d507e10f64b1575cb2b65e0b0632eb1c3c8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e11d507e10f64b1575cb2b65e0b0632eb1c3c8b", "html_url": "https://github.com/rust-lang/rust/commit/0e11d507e10f64b1575cb2b65e0b0632eb1c3c8b"}], "stats": {"total": 55, "additions": 41, "deletions": 14}, "files": [{"sha": "fb79ec3e50bd1e5e51c62d39404df91d5c411ead", "filename": "crates/ide-assists/src/handlers/convert_nested_function_to_closure.rs", "status": "modified", "additions": 41, "deletions": 14, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/d01a38ce3f10158f8ecb2f15278c0b0d711fcf27/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fconvert_nested_function_to_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d01a38ce3f10158f8ecb2f15278c0b0d711fcf27/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fconvert_nested_function_to_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fconvert_nested_function_to_closure.rs?ref=d01a38ce3f10158f8ecb2f15278c0b0d711fcf27", "patch": "@@ -34,7 +34,7 @@ pub(crate) fn convert_nested_function_to_closure(\n     let name = ctx.find_node_at_offset::<ast::Name>()?;\n     let function = name.syntax().parent().and_then(ast::Fn::cast)?;\n \n-    if !is_nested_function(&function) || is_generic(&function) {\n+    if !is_nested_function(&function) || is_generic(&function) || has_modifiers(&function) {\n         return None;\n     }\n \n@@ -43,21 +43,21 @@ pub(crate) fn convert_nested_function_to_closure(\n     let name = function.name()?;\n     let params = function.param_list()?;\n \n+    let params_text = params.syntax().text().to_string();\n+    let closure_params = params_text.strip_prefix(\"(\").and_then(|p| p.strip_suffix(\")\"))?;\n+\n     acc.add(\n         AssistId(\"convert_nested_function_to_closure\", AssistKind::RefactorRewrite),\n         \"Convert nested function to closure\",\n         target,\n         |edit| {\n             let has_semicolon = has_semicolon(&function);\n-            let params_text = params.syntax().text().to_string();\n-            let params_text_trimmed =\n-                params_text.strip_prefix(\"(\").and_then(|p| p.strip_suffix(\")\"));\n-\n-            if let Some(closure_params) = params_text_trimmed {\n-                let body = body.to_string();\n-                let body = if has_semicolon { body } else { format!(\"{};\", body) };\n-                edit.replace(target, format!(\"let {} = |{}| {}\", name, closure_params, body));\n+\n+            let mut body = body.to_string();\n+            if !has_semicolon {\n+                body.push(';');\n             }\n+            edit.replace(target, format!(\"let {} = |{}| {}\", name, closure_params, body));\n         },\n     )\n }\n@@ -77,6 +77,17 @@ fn is_generic(function: &ast::Fn) -> bool {\n     function.generic_param_list().is_some()\n }\n \n+/// Returns whether the given nested function has any modifiers:\n+///\n+/// - `async`,\n+/// - `const` or\n+/// - `unsafe`\n+fn has_modifiers(function: &ast::Fn) -> bool {\n+    function.async_token().is_some()\n+        || function.const_token().is_some()\n+        || function.unsafe_token().is_some()\n+}\n+\n /// Returns whether the given nested function has a trailing semicolon.\n fn has_semicolon(function: &ast::Fn) -> bool {\n     function\n@@ -143,7 +154,7 @@ fn main() {\n     }\n \n     #[test]\n-    fn convert_nested_function_to_closure_does_not_work_on_top_level_function() {\n+    fn convert_nested_function_to_closure_is_not_suggested_on_top_level_function() {\n         check_assist_not_applicable(\n             convert_nested_function_to_closure,\n             r#\"\n@@ -153,14 +164,14 @@ fn ma$0in() {}\n     }\n \n     #[test]\n-    fn convert_nested_function_to_closure_does_not_work_when_cursor_off_name() {\n+    fn convert_nested_function_to_closure_is_not_suggested_when_cursor_off_name() {\n         check_assist_not_applicable(\n             convert_nested_function_to_closure,\n             r#\"\n fn main() {\n     fn foo(a: u64, $0b: u64) -> u64 {\n         2 * (a + b)\n-    };\n+    }\n \n     _ = foo(3, 4);\n }\n@@ -169,14 +180,30 @@ fn main() {\n     }\n \n     #[test]\n-    fn convert_nested_function_to_closure_does_not_work_if_function_has_generic_params() {\n+    fn convert_nested_function_to_closure_is_not_suggested_if_function_has_generic_params() {\n         check_assist_not_applicable(\n             convert_nested_function_to_closure,\n             r#\"\n fn main() {\n     fn fo$0o<S: Into<String>>(s: S) -> String {\n         s.into()\n-    };\n+    }\n+\n+    _ = foo(\"hello\");\n+}\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn convert_nested_function_to_closure_is_not_suggested_if_function_has_modifier() {\n+        check_assist_not_applicable(\n+            convert_nested_function_to_closure,\n+            r#\"\n+fn main() {\n+    const fn fo$0o(s: String) -> String {\n+        s\n+    }\n \n     _ = foo(\"hello\");\n }"}]}