{"sha": "8b57cb90e50b600824c967470483462aeb663e50", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiNTdjYjkwZTUwYjYwMDgyNGM5Njc0NzA0ODM0NjJhZWI2NjNlNTA=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-11-01T08:42:24Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-11-01T08:42:24Z"}, "message": "Clarify tutorial based on feedback, fix some Markdown errors", "tree": {"sha": "72e8d47a28b2afcc6393fb9f214ffddba4ca48ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72e8d47a28b2afcc6393fb9f214ffddba4ca48ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b57cb90e50b600824c967470483462aeb663e50", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b57cb90e50b600824c967470483462aeb663e50", "html_url": "https://github.com/rust-lang/rust/commit/8b57cb90e50b600824c967470483462aeb663e50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b57cb90e50b600824c967470483462aeb663e50/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca7d750eb897a7b9a3f386254f12e2b2b746eb0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca7d750eb897a7b9a3f386254f12e2b2b746eb0f", "html_url": "https://github.com/rust-lang/rust/commit/ca7d750eb897a7b9a3f386254f12e2b2b746eb0f"}], "stats": {"total": 52, "additions": 41, "deletions": 11}, "files": [{"sha": "9d6dd358fc485dc8d68e33b5e6e85069fb267728", "filename": "doc/tutorial/control.md", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8b57cb90e50b600824c967470483462aeb663e50/doc%2Ftutorial%2Fcontrol.md", "raw_url": "https://github.com/rust-lang/rust/raw/8b57cb90e50b600824c967470483462aeb663e50/doc%2Ftutorial%2Fcontrol.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial%2Fcontrol.md?ref=8b57cb90e50b600824c967470483462aeb663e50", "patch": "@@ -94,8 +94,9 @@ extract the fields from a tuple:\n This will introduce two new variables, `a` and `b`, bound to the\n content of the tuple.\n \n-You may only use irrevocable patterns in let bindings, though. Things\n-like literals, which only match a specific value, are not allowed.\n+You may only use irrevocable patterns\u2014patterns that can never fail to\n+match\u2014in let bindings, though. Things like literals, which only match\n+a specific value, are not allowed.\n \n ## Loops\n \n@@ -114,6 +115,13 @@ to abort the current iteration and continue with the next.\n This code prints out a weird sequence of numbers and stops as soon as\n it finds one that can be divided by five.\n \n+There's also `while`'s ugly cousin, `do`/`while`, which does not check\n+its condition on the first iteration, using traditional syntax:\n+\n+    do {\n+        eat_cake();\n+    } while any_cake_left();\n+\n When iterating over a vector, use `for` instead.\n \n     for elt in [\"red\", \"green\", \"blue\"] {\n@@ -167,3 +175,14 @@ leave them in.\n \n For interactive debugging, you often want unconditional logging. For\n this, use `log_err` instead of `log` [FIXME better name].\n+\n+## Assertions\n+\n+The keyword `assert`, followed by an expression with boolean type,\n+will check that the given expression results in `true`, and cause a\n+failure otherwise. It is typically used to double-check things that\n+*should* hold at a certain point in a program.\n+\n+    let x = 100;\n+    while (x > 10) { x -= 10; }\n+    assert x == 10;"}, {"sha": "d09359f198dd76a6a495c908d75fe8172533ab2f", "filename": "doc/tutorial/data.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b57cb90e50b600824c967470483462aeb663e50/doc%2Ftutorial%2Fdata.md", "raw_url": "https://github.com/rust-lang/rust/raw/8b57cb90e50b600824c967470483462aeb663e50/doc%2Ftutorial%2Fdata.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial%2Fdata.md?ref=8b57cb90e50b600824c967470483462aeb663e50", "patch": "@@ -33,7 +33,9 @@ error.\n To 'update' an immutable record, you use functional record update\n syntax, by ending a record literal with the keyword `with`:\n \n+    let oldpoint = {x: 10f, y: 20f};\n     let newpoint = {x: 0f with oldpoint};\n+    assert newpoint == {x: 0f, y: 20f};\n \n This will create a new struct, copying all the fields from `oldpoint`\n into it, except for the ones that are explicitly set in the literal."}, {"sha": "ec1e27a0af9d6f6c97aa2393029d4dca3efb5bd1", "filename": "doc/tutorial/setup.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b57cb90e50b600824c967470483462aeb663e50/doc%2Ftutorial%2Fsetup.md", "raw_url": "https://github.com/rust-lang/rust/raw/8b57cb90e50b600824c967470483462aeb663e50/doc%2Ftutorial%2Fsetup.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial%2Fsetup.md?ref=8b57cb90e50b600824c967470483462aeb663e50", "patch": "@@ -36,7 +36,9 @@ FIXME say something about libs, main, modules, use\n \n There are Vim highlighting and indentation scrips in the Rust source\n distribution under `src/etc/vim/`. An Emacs mode can be found at\n-`[https://github.com/marijnh/rust-mode](https://github.com/marijnh/rust-mode)`.\n+[https://github.com/marijnh/rust-mode][rust-mode].\n+\n+[rust-mode]: https://github.com/marijnh/rust-mode\n \n Other editors are not provided for yet. If you end up writing a Rust\n mode for your favorite editor, let us know so that we can link to it."}, {"sha": "2b284ecafa46bb68b8f6fcd486843bf7271de01d", "filename": "doc/tutorial/syntax.md", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8b57cb90e50b600824c967470483462aeb663e50/doc%2Ftutorial%2Fsyntax.md", "raw_url": "https://github.com/rust-lang/rust/raw/8b57cb90e50b600824c967470483462aeb663e50/doc%2Ftutorial%2Fsyntax.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial%2Fsyntax.md?ref=8b57cb90e50b600824c967470483462aeb663e50", "patch": "@@ -37,9 +37,9 @@ like `if` and `while` are available:\n \n Though it isn't apparent in most everyday code, there is a fundamental\n difference between Rust's syntax and the predecessors in this family\n-of languages. Almost everything in rust is an expression, even things\n-that are statements in other languages. This allows for useless things\n-like this (which passes nil\u2014the void type\u2014to a function):\n+of languages. A lot of thing that are statements in C are expressions\n+in Rust. This allows for useless things like this (which passes\n+nil\u2014the void type\u2014to a function):\n \n     a_function(while false {});\n \n@@ -62,11 +62,14 @@ This also works for function bodies. This function returns a boolean:\n \n     fn is_four(x: int) -> bool { x == 4 }\n \n-If everything is an expression, you might conclude that you have to\n-add a terminating semicolon after *every* statement, even ones that\n+In short, everything that's not a declaration (`let` for variables,\n+`fn` for functions, etcetera) is an expression.\n+\n+If all those things are expressions, you might conclude that you have\n+to add a terminating semicolon after *every* statement, even ones that\n are not traditionally terminated with a semicolon in C (like `while`).\n-That is not the case, though. Statements that end in a block only need\n-a semicolon if that block contains a trailing expression. `while`\n+That is not the case, though. Expressions that end in a block only\n+need a semicolon if that block contains a trailing expression. `while`\n loops do not allow trailing expressions, and `if` statements tend to\n only have a trailing expression when you want to use their value for\n something\u2014in which case you'll have embedded it in a bigger statement,\n@@ -166,7 +169,7 @@ Integers can be written in decimal (`144`), hexadecimal (`0x90`), and\n binary (`0b10010000`) base. Without suffix, an integer literal is\n considered to be of type `int`. Add a `u` (`144u`) to make it a `uint`\n instead. Literals of the fixed-size integer types can be created by\n-the literal with the type name (`i8`, `u64`, etc).\n+the literal with the type name (`255u8`, `50i64`, etc).\n \n Note that, in Rust, no implicit conversion between integer types\n happens. If you are adding one to a variable of type `uint`, you must\n@@ -188,12 +191,16 @@ character escapes, using the backslash character:\n \n `\\n`\n : A newline (unicode character 32).\n+\n `\\r`\n : A carriage return (13).\n+\n `\\t`\n : A tab character (9).\n+\n `\\\\`, `\\'`, `\\\"`\n : Simply escapes the following character.\n+\n `\\xHH`, `\\uHHHH`, `\\UHHHHHHHH`\n : Unicode escapes, where the `H` characters are the hexadecimal digits that form the character code.\n "}]}