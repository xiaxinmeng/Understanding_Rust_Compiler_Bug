{"sha": "f780145c4a66af76bde7b07f24fb8f0bf81e1118", "node_id": "C_kwDOAAsO6NoAKGY3ODAxNDVjNGE2NmFmNzZiZGU3YjA3ZjI0ZmI4ZjBiZjgxZTExMTg", "commit": {"author": {"name": "soruh", "email": "mail@soruh.de", "date": "2022-06-22T14:29:59Z"}, "committer": {"name": "soruh", "email": "mail@soruh.de", "date": "2022-06-22T14:29:59Z"}, "message": "apply suggestions", "tree": {"sha": "81672bbf90c8d4341dcbd0ab1dd156ade6a8f543", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81672bbf90c8d4341dcbd0ab1dd156ade6a8f543"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f780145c4a66af76bde7b07f24fb8f0bf81e1118", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f780145c4a66af76bde7b07f24fb8f0bf81e1118", "html_url": "https://github.com/rust-lang/rust/commit/f780145c4a66af76bde7b07f24fb8f0bf81e1118", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f780145c4a66af76bde7b07f24fb8f0bf81e1118/comments", "author": {"login": "soruh", "id": 33131839, "node_id": "MDQ6VXNlcjMzMTMxODM5", "avatar_url": "https://avatars.githubusercontent.com/u/33131839?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soruh", "html_url": "https://github.com/soruh", "followers_url": "https://api.github.com/users/soruh/followers", "following_url": "https://api.github.com/users/soruh/following{/other_user}", "gists_url": "https://api.github.com/users/soruh/gists{/gist_id}", "starred_url": "https://api.github.com/users/soruh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soruh/subscriptions", "organizations_url": "https://api.github.com/users/soruh/orgs", "repos_url": "https://api.github.com/users/soruh/repos", "events_url": "https://api.github.com/users/soruh/events{/privacy}", "received_events_url": "https://api.github.com/users/soruh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "soruh", "id": 33131839, "node_id": "MDQ6VXNlcjMzMTMxODM5", "avatar_url": "https://avatars.githubusercontent.com/u/33131839?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soruh", "html_url": "https://github.com/soruh", "followers_url": "https://api.github.com/users/soruh/followers", "following_url": "https://api.github.com/users/soruh/following{/other_user}", "gists_url": "https://api.github.com/users/soruh/gists{/gist_id}", "starred_url": "https://api.github.com/users/soruh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soruh/subscriptions", "organizations_url": "https://api.github.com/users/soruh/orgs", "repos_url": "https://api.github.com/users/soruh/repos", "events_url": "https://api.github.com/users/soruh/events{/privacy}", "received_events_url": "https://api.github.com/users/soruh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f52f5fed1149d5655224d3f23e45d90e2957da44", "url": "https://api.github.com/repos/rust-lang/rust/commits/f52f5fed1149d5655224d3f23e45d90e2957da44", "html_url": "https://github.com/rust-lang/rust/commit/f52f5fed1149d5655224d3f23e45d90e2957da44"}], "stats": {"total": 107, "additions": 10, "deletions": 97}, "files": [{"sha": "4ed241f1af5a46874fad8cf437bb58fedffacf44", "filename": "crates/ide-assists/src/handlers/generate_new.rs", "status": "modified", "additions": 5, "deletions": 48, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/f780145c4a66af76bde7b07f24fb8f0bf81e1118/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f780145c4a66af76bde7b07f24fb8f0bf81e1118/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_new.rs?ref=f780145c4a66af76bde7b07f24fb8f0bf81e1118", "patch": "@@ -1,4 +1,6 @@\n-use ide_db::imports::import_assets::item_for_path_search;\n+use ide_db::{\n+    imports::import_assets::item_for_path_search, use_trivial_contructor::use_trivial_constructor,\n+};\n use itertools::Itertools;\n use stdx::format_to;\n use syntax::ast::{self, AstNode, HasName, HasVisibility, StructKind};\n@@ -8,51 +10,6 @@ use crate::{\n     AssistContext, AssistId, AssistKind, Assists,\n };\n \n-// FIXME: how to depupicate with `ide-diagnostics/mssing_fields`\n-fn use_trivial_constructor(\n-    db: &ide_db::RootDatabase,\n-    path: ast::Path,\n-    ty: &hir::Type,\n-) -> Option<ast::Expr> {\n-    match ty.as_adt() {\n-        Some(hir::Adt::Enum(x)) => {\n-            let variants = x.variants(db);\n-\n-            if variants.len() == 1 {\n-                let variant = variants[0];\n-\n-                if variant.fields(db).is_empty() {\n-                    let path = ast::make::path_qualified(\n-                        path,\n-                        syntax::ast::make::path_segment(ast::make::name_ref(\n-                            &variant.name(db).to_smol_str(),\n-                        )),\n-                    );\n-\n-                    let is_record = variant.kind(db) == hir::StructKind::Record;\n-\n-                    return Some(if is_record {\n-                        ast::Expr::RecordExpr(syntax::ast::make::record_expr(\n-                            path,\n-                            ast::make::record_expr_field_list(std::iter::empty()),\n-                        ))\n-                    } else {\n-                        syntax::ast::make::expr_path(path)\n-                    });\n-                }\n-            }\n-        }\n-        Some(hir::Adt::Struct(x)) => {\n-            if x.fields(db).is_empty() {\n-                return Some(syntax::ast::make::expr_path(path));\n-            }\n-        }\n-        _ => {}\n-    }\n-\n-    None\n-}\n-\n // Assist: generate_new\n //\n // Adds a new inherent impl for a type.\n@@ -84,6 +41,8 @@ pub(crate) fn generate_new(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n     // Return early if we've found an existing new fn\n     let impl_def = find_struct_impl(ctx, &ast::Adt::Struct(strukt.clone()), \"new\")?;\n \n+    let current_module = ctx.sema.scope(strukt.syntax())?.module();\n+\n     let target = strukt.syntax().text_range();\n     acc.add(AssistId(\"generate_new\", AssistKind::Generate), \"Generate `new`\", target, |builder| {\n         let mut buf = String::with_capacity(512);\n@@ -94,8 +53,6 @@ pub(crate) fn generate_new(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n \n         let vis = strukt.visibility().map_or(String::new(), |v| format!(\"{} \", v));\n \n-        let current_module = ctx.sema.scope(strukt.syntax()).unwrap().module();\n-\n         let trivial_constructors = field_list\n             .fields()\n             .map(|f| {"}, {"sha": "165b98d72ed672f2f75ef40e6b670b47e7151df2", "filename": "crates/ide-db/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f780145c4a66af76bde7b07f24fb8f0bf81e1118/crates%2Fide-db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f780145c4a66af76bde7b07f24fb8f0bf81e1118/crates%2Fide-db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Flib.rs?ref=f780145c4a66af76bde7b07f24fb8f0bf81e1118", "patch": "@@ -20,6 +20,7 @@ pub mod source_change;\n pub mod symbol_index;\n pub mod traits;\n pub mod ty_filter;\n+pub mod use_trivial_contructor;\n \n pub mod imports {\n     pub mod import_assets;"}, {"sha": "828d9229821bfd49b331078ccc4371d2958daf66", "filename": "crates/ide-diagnostics/src/handlers/missing_fields.rs", "status": "modified", "additions": 4, "deletions": 49, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/f780145c4a66af76bde7b07f24fb8f0bf81e1118/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmissing_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f780145c4a66af76bde7b07f24fb8f0bf81e1118/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmissing_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmissing_fields.rs?ref=f780145c4a66af76bde7b07f24fb8f0bf81e1118", "patch": "@@ -5,7 +5,7 @@ use hir::{\n };\n use ide_db::{\n     assists::Assist, famous_defs::FamousDefs, imports::import_assets::item_for_path_search,\n-    source_change::SourceChange, FxHashMap,\n+    source_change::SourceChange, use_trivial_contructor::use_trivial_constructor, FxHashMap,\n };\n use stdx::format_to;\n use syntax::{\n@@ -17,51 +17,6 @@ use text_edit::TextEdit;\n \n use crate::{fix, Diagnostic, DiagnosticsContext};\n \n-// FIXME: how to depupicate with `ide-assists/generate_new`\n-fn use_trivial_constructor(\n-    db: &ide_db::RootDatabase,\n-    path: ast::Path,\n-    ty: &hir::Type,\n-) -> Option<ast::Expr> {\n-    match ty.as_adt() {\n-        Some(hir::Adt::Enum(x)) => {\n-            let variants = x.variants(db);\n-\n-            if variants.len() == 1 {\n-                let variant = variants[0];\n-\n-                if variant.fields(db).is_empty() {\n-                    let path = ast::make::path_qualified(\n-                        path,\n-                        syntax::ast::make::path_segment(ast::make::name_ref(\n-                            &variant.name(db).to_smol_str(),\n-                        )),\n-                    );\n-\n-                    let is_record = variant.kind(db) == hir::StructKind::Record;\n-\n-                    return Some(if is_record {\n-                        ast::Expr::RecordExpr(syntax::ast::make::record_expr(\n-                            path,\n-                            ast::make::record_expr_field_list(std::iter::empty()),\n-                        ))\n-                    } else {\n-                        syntax::ast::make::expr_path(path)\n-                    });\n-                }\n-            }\n-        }\n-        Some(hir::Adt::Struct(x)) => {\n-            if x.fields(db).is_empty() {\n-                return Some(syntax::ast::make::expr_path(path));\n-            }\n-        }\n-        _ => {}\n-    }\n-\n-    None\n-}\n-\n // Diagnostic: missing-fields\n //\n // This diagnostic is triggered if record lacks some fields that exist in the corresponding structure.\n@@ -104,8 +59,8 @@ fn fixes(ctx: &DiagnosticsContext<'_>, d: &hir::MissingFields) -> Option<Vec<Ass\n     let root = ctx.sema.db.parse_or_expand(d.file)?;\n \n     let current_module = match &d.field_list_parent {\n-        Either::Left(ptr) => ctx.sema.scope(ptr.to_node(&root).syntax()).unwrap().module(),\n-        Either::Right(ptr) => ctx.sema.scope(ptr.to_node(&root).syntax()).unwrap().module(),\n+        Either::Left(ptr) => ctx.sema.scope(ptr.to_node(&root).syntax()).map(|it| it.module()),\n+        Either::Right(ptr) => ctx.sema.scope(ptr.to_node(&root).syntax()).map(|it| it.module()),\n     };\n \n     let build_text_edit = |parent_syntax, new_syntax: &SyntaxNode, old_syntax| {\n@@ -166,7 +121,7 @@ fn fixes(ctx: &DiagnosticsContext<'_>, d: &hir::MissingFields) -> Option<Vec<Ass\n                     let expr = (|| -> Option<ast::Expr> {\n                         let item_in_ns = hir::ItemInNs::from(hir::ModuleDef::from(ty.as_adt()?));\n \n-                        let type_path = current_module.find_use_path(\n+                        let type_path = current_module?.find_use_path(\n                             ctx.sema.db,\n                             item_for_path_search(ctx.sema.db, item_in_ns)?,\n                         )?;"}]}