{"sha": "f0f8aa9e05726bfbc065fa2504daf3232f29bc03", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwZjhhYTllMDU3MjZiZmJjMDY1ZmEyNTA0ZGFmMzIzMmYyOWJjMDM=", "commit": {"author": {"name": "Matthew Russo", "email": "matthew@edapp.com", "date": "2018-12-04T20:18:03Z"}, "committer": {"name": "Matthew Russo", "email": "matthew@edapp.com", "date": "2018-12-05T00:52:42Z"}, "message": "adds DocTest filename variant, refactors doctest_offset out of source_map, fixes remaining test failures", "tree": {"sha": "5027e1682248fb6e535546046f43dff45d6e2b50", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5027e1682248fb6e535546046f43dff45d6e2b50"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0f8aa9e05726bfbc065fa2504daf3232f29bc03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0f8aa9e05726bfbc065fa2504daf3232f29bc03", "html_url": "https://github.com/rust-lang/rust/commit/f0f8aa9e05726bfbc065fa2504daf3232f29bc03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0f8aa9e05726bfbc065fa2504daf3232f29bc03/comments", "author": null, "committer": null, "parents": [{"sha": "88130f1796e98837dc6f58aea9b9a0f49b85f426", "url": "https://api.github.com/repos/rust-lang/rust/commits/88130f1796e98837dc6f58aea9b9a0f49b85f426", "html_url": "https://github.com/rust-lang/rust/commit/88130f1796e98837dc6f58aea9b9a0f49b85f426"}], "stats": {"total": 106, "additions": 52, "deletions": 54}, "files": [{"sha": "439c6e42e1a3f105120f2193c914ab7d92cd5a31", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f0f8aa9e05726bfbc065fa2504daf3232f29bc03/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0f8aa9e05726bfbc065fa2504daf3232f29bc03/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=f0f8aa9e05726bfbc065fa2504daf3232f29bc03", "patch": "@@ -423,7 +423,8 @@ impl_stable_hash_for!(enum ::syntax_pos::FileName {\n     ProcMacroSourceCode(s),\n     CliCrateAttr(s),\n     CfgSpec(s),\n-    Custom(s)\n+    Custom(s),\n+    DocTest(pb, line),\n });\n \n impl<'a> HashStable<StableHashingContext<'a>> for SourceFile {"}, {"sha": "ab2ab25c91aa541321bf4e23d0c33dfe25efd746", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f0f8aa9e05726bfbc065fa2504daf3232f29bc03/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0f8aa9e05726bfbc065fa2504daf3232f29bc03/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=f0f8aa9e05726bfbc065fa2504daf3232f29bc03", "patch": "@@ -1044,7 +1044,7 @@ impl EmitterWriter {\n                     buffer.append(buffer_msg_line_offset,\n                                   &format!(\"{}:{}:{}\",\n                                            loc.file.name,\n-                                           sm.doctest_offset_line(loc.line),\n+                                           sm.doctest_offset_line(&loc.file.name, loc.line),\n                                            loc.col.0 + 1),\n                                   Style::LineAndColumn);\n                     for _ in 0..max_line_num_len {\n@@ -1054,7 +1054,7 @@ impl EmitterWriter {\n                     buffer.prepend(0,\n                                    &format!(\"{}:{}:{}: \",\n                                             loc.file.name,\n-                                            sm.doctest_offset_line(loc.line),\n+                                            sm.doctest_offset_line(&loc.file.name, loc.line),\n                                             loc.col.0 + 1),\n                                    Style::LineAndColumn);\n                 }\n@@ -1075,7 +1075,8 @@ impl EmitterWriter {\n                     };\n                     format!(\"{}:{}{}\",\n                             annotated_file.file.name,\n-                            sm.doctest_offset_line(first_line.line_index),\n+                            sm.doctest_offset_line(\n+                                &annotated_file.file.name, first_line.line_index),\n                             col)\n                 } else {\n                     annotated_file.file.name.to_string()"}, {"sha": "b6528cbe2c810cd91b8d496941252ce1f7e5afc4", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0f8aa9e05726bfbc065fa2504daf3232f29bc03/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0f8aa9e05726bfbc065fa2504daf3232f29bc03/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=f0f8aa9e05726bfbc065fa2504daf3232f29bc03", "patch": "@@ -130,7 +130,7 @@ pub trait SourceMapper {\n     fn merge_spans(&self, sp_lhs: Span, sp_rhs: Span) -> Option<Span>;\n     fn call_span_if_macro(&self, sp: Span) -> Span;\n     fn ensure_source_file_source_present(&self, source_file: Lrc<SourceFile>) -> bool;\n-    fn doctest_offset_line(&self, line: usize) -> usize;\n+    fn doctest_offset_line(&self, file: &FileName, line: usize) -> usize;\n }\n \n impl CodeSuggestion {"}, {"sha": "74583196818b84e4e7ddf80c6712948bc0f58070", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f0f8aa9e05726bfbc065fa2504daf3232f29bc03/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0f8aa9e05726bfbc065fa2504daf3232f29bc03/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=f0f8aa9e05726bfbc065fa2504daf3232f29bc03", "patch": "@@ -197,8 +197,14 @@ fn run_test(test: &str, cratename: &str, filename: &FileName, line: usize,\n     let (test, line_offset) = make_test(test, Some(cratename), as_test_harness, opts);\n     // FIXME(#44940): if doctests ever support path remapping, then this filename\n     // needs to be the result of SourceMap::span_to_unmapped_path\n+\n+    let path = match filename {\n+        FileName::Real(path) => path.clone(),\n+        _ => PathBuf::from(r\"doctest.rs\"),\n+    };\n+\n     let input = config::Input::Str {\n-        name: filename.to_owned(),\n+        name: FileName::DocTest(path, line as isize - line_offset as isize),\n         input: test,\n     };\n     let outputs = OutputTypes::new(&[(OutputType::Exe, None)]);\n@@ -252,9 +258,7 @@ fn run_test(test: &str, cratename: &str, filename: &FileName, line: usize,\n     let _bomb = Bomb(data.clone(), old.unwrap_or(box io::stdout()));\n \n     let (libdir, outdir, compile_result) = driver::spawn_thread_pool(sessopts, |sessopts| {\n-        let source_map = Lrc::new(SourceMap::new_doctest(\n-            sessopts.file_path_mapping(), filename.clone(), line as isize - line_offset as isize\n-        ));\n+        let source_map = Lrc::new(SourceMap::new(sessopts.file_path_mapping()));\n         let emitter = errors::emitter::EmitterWriter::new(box Sink(data.clone()),\n                                                         Some(source_map.clone()),\n                                                         false,\n@@ -401,7 +405,7 @@ pub fn make_test(s: &str,\n         use errors::emitter::EmitterWriter;\n         use errors::Handler;\n \n-        let filename = FileName::Anon;\n+        let filename = FileName::anon_source_code(s);\n         let source = crates + &everything_else;\n \n         // any errors in parsing should also appear when the doctest is compiled for real, so just\n@@ -411,8 +415,6 @@ pub fn make_test(s: &str,\n         let handler = Handler::with_emitter(false, false, box emitter);\n         let sess = ParseSess::with_span_handler(handler, cm);\n \n-        debug!(\"about to parse: \\n{}\", source);\n-\n         let mut found_main = false;\n         let mut found_extern_crate = cratename.is_none();\n \n@@ -487,8 +489,6 @@ pub fn make_test(s: &str,\n         prog.push_str(\"\\n}\");\n     }\n \n-    info!(\"final test program: {}\", prog);\n-\n     (prog, line_offset)\n }\n "}, {"sha": "75e25083d03be70288128dabeece8ca6f5c26cda", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f0f8aa9e05726bfbc065fa2504daf3232f29bc03/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0f8aa9e05726bfbc065fa2504daf3232f29bc03/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=f0f8aa9e05726bfbc065fa2504daf3232f29bc03", "patch": "@@ -204,6 +204,7 @@ fn res_rel_file(cx: &mut ExtCtxt, sp: syntax_pos::Span, arg: String) -> PathBuf\n         let callsite = sp.source_callsite();\n         let mut path = match cx.source_map().span_to_unmapped_path(callsite) {\n             FileName::Real(path) => path,\n+            FileName::DocTest(path, _) => path,\n             other => panic!(\"cannot resolve relative path in non-file source `{}`\", other),\n         };\n         path.pop();"}, {"sha": "5c3e11c8c19af9bea443b45df201324c12756853", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0f8aa9e05726bfbc065fa2504daf3232f29bc03/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0f8aa9e05726bfbc065fa2504daf3232f29bc03/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=f0f8aa9e05726bfbc065fa2504daf3232f29bc03", "patch": "@@ -1898,7 +1898,7 @@ mod tests {\n                  sess: &'a ParseSess,\n                  teststr: String)\n                  -> StringReader<'a> {\n-        let sf = sm.new_source_file(PathBuf::from(\"zebra.rs\").into(), teststr);\n+        let sf = sm.new_source_file(PathBuf::from(teststr.clone()).into(), teststr);\n         StringReader::new(sess, sf, None)\n     }\n "}, {"sha": "a229ccfa2656df284d91b795cc91b9fa661cb46d", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f0f8aa9e05726bfbc065fa2504daf3232f29bc03/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0f8aa9e05726bfbc065fa2504daf3232f29bc03/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=f0f8aa9e05726bfbc065fa2504daf3232f29bc03", "patch": "@@ -977,23 +977,25 @@ mod tests {\n         with_globals(|| {\n             let sess = ParseSess::new(FilePathMapping::empty());\n \n-            let name = FileName::Custom(\"source\".to_string());\n+            let name_1 = FileName::Custom(\"crlf_source_1\".to_string());\n             let source = \"/// doc comment\\r\\nfn foo() {}\".to_string();\n-            let item = parse_item_from_source_str(name.clone(), source, &sess)\n+            let item = parse_item_from_source_str(name_1, source, &sess)\n                 .unwrap().unwrap();\n             let doc = first_attr_value_str_by_name(&item.attrs, \"doc\").unwrap();\n             assert_eq!(doc, \"/// doc comment\");\n \n+            let name_2 = FileName::Custom(\"crlf_source_2\".to_string());\n             let source = \"/// doc comment\\r\\n/// line 2\\r\\nfn foo() {}\".to_string();\n-            let item = parse_item_from_source_str(name.clone(), source, &sess)\n+            let item = parse_item_from_source_str(name_2, source, &sess)\n                 .unwrap().unwrap();\n             let docs = item.attrs.iter().filter(|a| a.path == \"doc\")\n                         .map(|a| a.value_str().unwrap().to_string()).collect::<Vec<_>>();\n             let b: &[_] = &[\"/// doc comment\".to_string(), \"/// line 2\".to_string()];\n             assert_eq!(&docs[..], b);\n \n+            let name_3 = FileName::Custom(\"clrf_source_3\".to_string());\n             let source = \"/** doc comment\\r\\n *  with CRLF */\\r\\nfn foo() {}\".to_string();\n-            let item = parse_item_from_source_str(name, source, &sess).unwrap().unwrap();\n+            let item = parse_item_from_source_str(name_3, source, &sess).unwrap().unwrap();\n             let doc = first_attr_value_str_by_name(&item.attrs, \"doc\").unwrap();\n             assert_eq!(doc, \"/** doc comment\\n *  with CRLF */\");\n         });"}, {"sha": "ee60d2dd6156f8accbef46c954d8df71f8cc661f", "filename": "src/libsyntax/source_map.rs", "status": "modified", "additions": 13, "deletions": 29, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/f0f8aa9e05726bfbc065fa2504daf3232f29bc03/src%2Flibsyntax%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0f8aa9e05726bfbc065fa2504daf3232f29bc03/src%2Flibsyntax%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsource_map.rs?ref=f0f8aa9e05726bfbc065fa2504daf3232f29bc03", "patch": "@@ -144,9 +144,6 @@ pub struct SourceMap {\n     // This is used to apply the file path remapping as specified via\n     // --remap-path-prefix to all SourceFiles allocated within this SourceMap.\n     path_mapping: FilePathMapping,\n-    /// In case we are in a doctest, replace all file names with the PathBuf,\n-    /// and add the given offsets to the line info\n-    doctest_offset: Option<(FileName, isize)>,\n }\n \n impl SourceMap {\n@@ -155,27 +152,16 @@ impl SourceMap {\n             files: Default::default(),\n             file_loader: Box::new(RealFileLoader),\n             path_mapping,\n-            doctest_offset: None,\n         }\n     }\n \n-    pub fn new_doctest(path_mapping: FilePathMapping,\n-                       file: FileName, line: isize) -> SourceMap {\n-        SourceMap {\n-            doctest_offset: Some((file, line)),\n-            ..SourceMap::new(path_mapping)\n-        }\n-\n-    }\n-\n     pub fn with_file_loader(file_loader: Box<dyn FileLoader + Sync + Send>,\n                             path_mapping: FilePathMapping)\n                             -> SourceMap {\n         SourceMap {\n             files: Default::default(),\n             file_loader: file_loader,\n             path_mapping,\n-            doctest_offset: None,\n         }\n     }\n \n@@ -189,11 +175,7 @@ impl SourceMap {\n \n     pub fn load_file(&self, path: &Path) -> io::Result<Lrc<SourceFile>> {\n         let src = self.file_loader.read_file(path)?;\n-        let filename = if let Some((ref name, _)) = self.doctest_offset {\n-            name.clone()\n-        } else {\n-            path.to_owned().into()\n-        };\n+        let filename = path.to_owned().into();\n         Ok(self.new_source_file(filename, src))\n     }\n \n@@ -328,15 +310,17 @@ impl SourceMap {\n     }\n \n     // If there is a doctest_offset, apply it to the line\n-    pub fn doctest_offset_line(&self, mut orig: usize) -> usize {\n-        if let Some((_, line)) = self.doctest_offset {\n-            if line >= 0 {\n-                orig = orig + line as usize;\n-            } else {\n-                orig = orig - (-line) as usize;\n-            }\n+    pub fn doctest_offset_line(&self, file: &FileName, orig: usize) -> usize {\n+        return match file {\n+            FileName::DocTest(_, offset) => {\n+                return if *offset >= 0 {\n+                    orig + *offset as usize\n+                } else {\n+                    orig - (-(*offset)) as usize\n+                }\n+            },\n+            _ => orig\n         }\n-        orig\n     }\n \n     /// Lookup source information about a BytePos\n@@ -1001,8 +985,8 @@ impl SourceMapper for SourceMap {\n             }\n         )\n     }\n-    fn doctest_offset_line(&self, line: usize) -> usize {\n-        self.doctest_offset_line(line)\n+    fn doctest_offset_line(&self, file: &FileName, line: usize) -> usize {\n+        self.doctest_offset_line(file, line)\n     }\n }\n "}, {"sha": "6c7da589a425710dc42d9e344cf73707eaf6d08d", "filename": "src/libsyntax_ext/proc_macro_server.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0f8aa9e05726bfbc065fa2504daf3232f29bc03/src%2Flibsyntax_ext%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0f8aa9e05726bfbc065fa2504daf3232f29bc03/src%2Flibsyntax_ext%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_server.rs?ref=f0f8aa9e05726bfbc065fa2504daf3232f29bc03", "patch": "@@ -402,7 +402,7 @@ impl server::TokenStream for Rustc<'_> {\n     }\n     fn from_str(&mut self, src: &str) -> Self::TokenStream {\n         parse::parse_stream_from_source_str(\n-            FileName::ProcMacroSourceCode,\n+            FileName::proc_macro_source_code(src.clone()),\n             src.to_string(),\n             self.sess,\n             Some(self.call_site),"}, {"sha": "4d42b85ea75488d393c6452983064082b9162a55", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f0f8aa9e05726bfbc065fa2504daf3232f29bc03/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0f8aa9e05726bfbc065fa2504daf3232f29bc03/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=f0f8aa9e05726bfbc065fa2504daf3232f29bc03", "patch": "@@ -103,6 +103,7 @@ pub enum FileName {\n     CliCrateAttr(u64),\n     /// Custom sources for explicit parser calls from plugins and drivers\n     Custom(String),\n+    DocTest(PathBuf, isize),\n }\n \n impl std::fmt::Display for FileName {\n@@ -119,6 +120,7 @@ impl std::fmt::Display for FileName {\n             CfgSpec(_) => write!(fmt, \"<cfgspec>\"),\n             CliCrateAttr(_) => write!(fmt, \"<crate attribute>\"),\n             Custom(ref s) => write!(fmt, \"<{}>\", s),\n+            DocTest(ref path, _) => write!(fmt, \"{}\", path.display()),\n         }\n     }\n }\n@@ -142,7 +144,8 @@ impl FileName {\n             CfgSpec(_) |\n             CliCrateAttr(_) |\n             Custom(_) |\n-            QuoteExpansion(_) => false,\n+            QuoteExpansion(_) |\n+            DocTest(_, _) => false,\n         }\n     }\n \n@@ -156,7 +159,8 @@ impl FileName {\n             CfgSpec(_) |\n             CliCrateAttr(_) |\n             Custom(_) |\n-            QuoteExpansion(_) => false,\n+            QuoteExpansion(_) |\n+            DocTest(_, _) => false,\n             Macros(_) => true,\n         }\n     }\n@@ -196,6 +200,10 @@ impl FileName {\n         src.hash(&mut hasher);\n         FileName::CliCrateAttr(hasher.finish())\n     }\n+\n+    pub fn doc_test_source_code(path: PathBuf, line: isize) -> FileName{\n+        FileName::DocTest(path, line)\n+    }\n }\n \n /// Spans represent a region of code, used for error reporting. Positions in spans"}, {"sha": "c342e1c48359e98923664b36a2bd1f5bf533dc03", "filename": "src/test/run-make-fulldeps/issue-19371/foo.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f0f8aa9e05726bfbc065fa2504daf3232f29bc03/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0f8aa9e05726bfbc065fa2504daf3232f29bc03/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs?ref=f0f8aa9e05726bfbc065fa2504daf3232f29bc03", "patch": "@@ -72,7 +72,8 @@ fn compile(code: String, output: PathBuf, sysroot: PathBuf) {\n         driver::spawn_thread_pool(opts, |opts| {\n             let (sess, cstore, codegen_backend) = basic_sess(opts);\n             let control = CompileController::basic();\n-            let input = Input::Str { name: FileName::Anon, input: code };\n+            let name = FileName::anon_source_code(&code);\n+            let input = Input::Str { name, input: code };\n             let _ = compile_input(\n                 codegen_backend,\n                 &sess,"}, {"sha": "52e0cdca9509fda01882a29ab7b559e4da693205", "filename": "src/test/rustdoc-ui/failed-doctest-output.stdout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0f8aa9e05726bfbc065fa2504daf3232f29bc03/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-output.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/f0f8aa9e05726bfbc065fa2504daf3232f29bc03/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-output.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-output.stdout?ref=f0f8aa9e05726bfbc065fa2504daf3232f29bc03", "patch": "@@ -12,7 +12,7 @@ error[E0425]: cannot find value `no` in this scope\n 3 | no\n   | ^^ not found in this scope\n \n-thread '$DIR/failed-doctest-output.rs - OtherStruct (line 27)' panicked at 'couldn't compile the test', src/librustdoc/test.rs:323:13\n+thread '$DIR/failed-doctest-output.rs - OtherStruct (line 27)' panicked at 'couldn't compile the test', src/librustdoc/test.rs:327:13\n note: Run with `RUST_BACKTRACE=1` for a backtrace.\n \n ---- $DIR/failed-doctest-output.rs - SomeStruct (line 21) stdout ----\n@@ -21,7 +21,7 @@ thread '$DIR/failed-doctest-output.rs - SomeStruct (line 21)' panicked at 'test\n thread 'main' panicked at 'oh no', $DIR/failed-doctest-output.rs:3:1\n note: Run with `RUST_BACKTRACE=1` for a backtrace.\n \n-', src/librustdoc/test.rs:358:17\n+', src/librustdoc/test.rs:362:17\n \n \n failures:"}]}