{"sha": "25d070f228a101a806165a434b150a59a54f08ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1ZDA3MGYyMjhhMTAxYTgwNjE2NWE0MzRiMTUwYTU5YTU0ZjA4YmE=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-03-08T11:01:01Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-03-08T11:01:01Z"}, "message": "Remove unneeded `Send`/`Sync` bounds from `Mutex`/`RwLock`.\n\nThe requirements `T: Send` and `T: Send + Sync` for `Mutex` and `RwLock`\nrespectively only matter if those types are shared/sent across thread\nboundaries, and that is adequately controlled by the impls of\n`Send`/`Sync` for them. If `T` doesn't satisfy the bounds, then\nthe types cannot cross thread boundaries and so everything is still\nsafe (the two types just act like an expensive `RefCell`).", "tree": {"sha": "3f6b4510213965d22c41f8787ff74dbbbfebdf08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f6b4510213965d22c41f8787ff74dbbbfebdf08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25d070f228a101a806165a434b150a59a54f08ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25d070f228a101a806165a434b150a59a54f08ba", "html_url": "https://github.com/rust-lang/rust/commit/25d070f228a101a806165a434b150a59a54f08ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25d070f228a101a806165a434b150a59a54f08ba/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35275076f52d53c3dcd9dee85d92a2059a663225", "url": "https://api.github.com/repos/rust-lang/rust/commits/35275076f52d53c3dcd9dee85d92a2059a663225", "html_url": "https://github.com/rust-lang/rust/commit/35275076f52d53c3dcd9dee85d92a2059a663225"}], "stats": {"total": 12, "additions": 7, "deletions": 5}, "files": [{"sha": "7b5076acbca0e6b7ef14f2480159422809260e35", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/25d070f228a101a806165a434b150a59a54f08ba/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25d070f228a101a806165a434b150a59a54f08ba/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=25d070f228a101a806165a434b150a59a54f08ba", "patch": "@@ -121,6 +121,8 @@ pub struct Mutex<T> {\n     data: UnsafeCell<T>,\n }\n \n+// these are the only places where `T: Send` matters; all other\n+// functionality works fine on a single thread.\n unsafe impl<T: Send> Send for Mutex<T> { }\n \n unsafe impl<T: Send> Sync for Mutex<T> { }\n@@ -179,7 +181,7 @@ pub const MUTEX_INIT: StaticMutex = StaticMutex {\n     poison: poison::FLAG_INIT,\n };\n \n-impl<T: Send> Mutex<T> {\n+impl<T> Mutex<T> {\n     /// Creates a new mutex in an unlocked state ready for use.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new(t: T) -> Mutex<T> {\n@@ -242,7 +244,7 @@ impl<T: Send> Mutex<T> {\n \n #[unsafe_destructor]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: Send> Drop for Mutex<T> {\n+impl<T> Drop for Mutex<T> {\n     fn drop(&mut self) {\n         // This is actually safe b/c we know that there is no further usage of\n         // this mutex (it's up to the user to arrange for a mutex to get\n@@ -252,7 +254,7 @@ impl<T: Send> Drop for Mutex<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: fmt::Debug + Send + 'static> fmt::Debug for Mutex<T> {\n+impl<T: fmt::Debug + 'static> fmt::Debug for Mutex<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match self.try_lock() {\n             Ok(guard) => write!(f, \"Mutex {{ data: {:?} }}\", *guard),"}, {"sha": "d32eae15a1bca82bd7683f5243e61c44032758f9", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25d070f228a101a806165a434b150a59a54f08ba/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25d070f228a101a806165a434b150a59a54f08ba/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=25d070f228a101a806165a434b150a59a54f08ba", "patch": "@@ -129,7 +129,7 @@ pub struct RwLockWriteGuard<'a, T: 'a> {\n \n impl<'a, T> !marker::Send for RwLockWriteGuard<'a, T> {}\n \n-impl<T: Send + Sync> RwLock<T> {\n+impl<T> RwLock<T> {\n     /// Creates a new instance of an `RwLock<T>` which is unlocked.\n     ///\n     /// # Examples\n@@ -257,7 +257,7 @@ impl<T> Drop for RwLock<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: fmt::Debug + Send + Sync> fmt::Debug for RwLock<T> {\n+impl<T: fmt::Debug> fmt::Debug for RwLock<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match self.try_read() {\n             Ok(guard) => write!(f, \"RwLock {{ data: {:?} }}\", *guard),"}]}