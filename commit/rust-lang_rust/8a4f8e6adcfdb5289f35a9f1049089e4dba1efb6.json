{"sha": "8a4f8e6adcfdb5289f35a9f1049089e4dba1efb6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhNGY4ZTZhZGNmZGI1Mjg5ZjM1YTlmMTA0OTA4OWU0ZGJhMWVmYjY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-02-13T17:12:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-02-13T17:12:35Z"}, "message": "Rollup merge of #58381 - davidtwco:issue-42944, r=estebank\n\nOnly suggest imports if not imported.\n\nFixes #42944 and fixes #53430.\n\nThis commit modifies name resolution error reporting so that if a name\nis in scope and has been imported then we do not suggest importing it.\n\nThis can occur when we add a label about constructors not being visible\ndue to private fields. In these cases, we know that the struct/variant\nhas been imported and we should silence any suggestions to import the\nstruct/variant.\n\nr? @estebank", "tree": {"sha": "991bf85b10b5babfbc22b79656d24f1b6d275578", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/991bf85b10b5babfbc22b79656d24f1b6d275578"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a4f8e6adcfdb5289f35a9f1049089e4dba1efb6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcZFADCRBK7hj4Ov3rIwAAdHIIABtkk4uX5MAZmLY9eSguFkSh\nlMVe9C2Nf6d8sl285oD/B7IF1P1ijnBIl3NW3AJP4oZN51En5JqSVz773Ya0tIUV\n8hHsHXSf/RsOF6E0dzzjS92PTv74rb5OOjEgKHDsmH0UPGGJWJyfgABDoZCJMpCy\npMVSJaQjtB7rvE+5i6t8Zu4+W0U6NdFDs5VW2BdvdLGy+ydfexna+hZmZxOq7H5E\nbERnAQ6i0cPDUnVVYRgLgsDxKjwNoC0JM4kJ+BfrlmO4DrrfYDti7zYsZyesyy3Z\n74JXG2szw08rOlXl2b7GV5DvrayCdcz1fjIHhmqCZUyUeef0NHv+Yzj9WYOz7vM=\n=f+Cy\n-----END PGP SIGNATURE-----\n", "payload": "tree 991bf85b10b5babfbc22b79656d24f1b6d275578\nparent b39b62534d4d7a569926dab23d958458278f9d69\nparent 48b0c9da69965cd40d037cee42cf3093ed09c6ee\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1550077955 +0100\ncommitter GitHub <noreply@github.com> 1550077955 +0100\n\nRollup merge of #58381 - davidtwco:issue-42944, r=estebank\n\nOnly suggest imports if not imported.\n\nFixes #42944 and fixes #53430.\n\nThis commit modifies name resolution error reporting so that if a name\nis in scope and has been imported then we do not suggest importing it.\n\nThis can occur when we add a label about constructors not being visible\ndue to private fields. In these cases, we know that the struct/variant\nhas been imported and we should silence any suggestions to import the\nstruct/variant.\n\nr? @estebank\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a4f8e6adcfdb5289f35a9f1049089e4dba1efb6", "html_url": "https://github.com/rust-lang/rust/commit/8a4f8e6adcfdb5289f35a9f1049089e4dba1efb6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a4f8e6adcfdb5289f35a9f1049089e4dba1efb6/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b39b62534d4d7a569926dab23d958458278f9d69", "url": "https://api.github.com/repos/rust-lang/rust/commits/b39b62534d4d7a569926dab23d958458278f9d69", "html_url": "https://github.com/rust-lang/rust/commit/b39b62534d4d7a569926dab23d958458278f9d69"}, {"sha": "48b0c9da69965cd40d037cee42cf3093ed09c6ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/48b0c9da69965cd40d037cee42cf3093ed09c6ee", "html_url": "https://github.com/rust-lang/rust/commit/48b0c9da69965cd40d037cee42cf3093ed09c6ee"}], "stats": {"total": 80, "additions": 63, "deletions": 17}, "files": [{"sha": "c8b3e2f4e4cf4684ff3bc1efb42efa525db5e5b1", "filename": "src/librustc_resolve/error_reporting.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a4f8e6adcfdb5289f35a9f1049089e4dba1efb6/src%2Flibrustc_resolve%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a4f8e6adcfdb5289f35a9f1049089e4dba1efb6/src%2Flibrustc_resolve%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Ferror_reporting.rs?ref=8a4f8e6adcfdb5289f35a9f1049089e4dba1efb6", "patch": "@@ -106,7 +106,15 @@ impl<'a> Resolver<'a> {\n \n         // Try to lookup name in more relaxed fashion for better error reporting.\n         let ident = path.last().unwrap().ident;\n-        let candidates = self.lookup_import_candidates(ident, ns, is_expected);\n+        let candidates = self.lookup_import_candidates(ident, ns, is_expected)\n+            .drain(..)\n+            .filter(|ImportSuggestion { did, .. }| {\n+                match (did, def.and_then(|def| def.opt_def_id())) {\n+                    (Some(suggestion_did), Some(actual_did)) => *suggestion_did != actual_did,\n+                    _ => true,\n+                }\n+            })\n+            .collect::<Vec<_>>();\n         if candidates.is_empty() && is_expected(Def::Enum(DefId::local(CRATE_DEF_INDEX))) {\n             let enum_candidates =\n                 self.lookup_import_candidates(ident, ns, is_enum_variant);"}, {"sha": "fbed1145cd156089da8e95330e8a3023297cb9cc", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8a4f8e6adcfdb5289f35a9f1049089e4dba1efb6/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a4f8e6adcfdb5289f35a9f1049089e4dba1efb6/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=8a4f8e6adcfdb5289f35a9f1049089e4dba1efb6", "patch": "@@ -24,7 +24,7 @@ use rustc::hir::def::*;\n use rustc::hir::def::Namespace::*;\n use rustc::hir::def_id::{CRATE_DEF_INDEX, LOCAL_CRATE, DefId};\n use rustc::hir::{Freevar, FreevarMap, TraitCandidate, TraitMap, GlobMap};\n-use rustc::ty;\n+use rustc::ty::{self, DefIdTree};\n use rustc::util::nodemap::{NodeMap, NodeSet, FxHashMap, FxHashSet, DefIdMap};\n use rustc::{bug, span_bug};\n \n@@ -92,6 +92,7 @@ enum ScopeSet {\n \n /// A free importable items suggested in case of resolution failure.\n struct ImportSuggestion {\n+    did: Option<DefId>,\n     path: Path,\n }\n \n@@ -4391,7 +4392,8 @@ impl<'a> Resolver<'a> {\n \n                 // collect results based on the filter function\n                 if ident.name == lookup_ident.name && ns == namespace {\n-                    if filter_fn(name_binding.def()) {\n+                    let def = name_binding.def();\n+                    if filter_fn(def) {\n                         // create the path\n                         let mut segms = path_segments.clone();\n                         if lookup_ident.span.rust_2018() {\n@@ -4415,7 +4417,12 @@ impl<'a> Resolver<'a> {\n                         // declared as public (due to pruning, we don't explore\n                         // outside crate private modules => no need to check this)\n                         if !in_module_is_extern || name_binding.vis == ty::Visibility::Public {\n-                            candidates.push(ImportSuggestion { path });\n+                            let did = match def {\n+                                Def::StructCtor(did, _) | Def::VariantCtor(did, _) =>\n+                                    self.parent(did),\n+                                _ => def.opt_def_id(),\n+                            };\n+                            candidates.push(ImportSuggestion { did, path });\n                         }\n                     }\n                 }\n@@ -4512,7 +4519,8 @@ impl<'a> Resolver<'a> {\n                             span: name_binding.span,\n                             segments: path_segments,\n                         };\n-                        result = Some((module, ImportSuggestion { path }));\n+                        let did = module.def().and_then(|def| def.opt_def_id());\n+                        result = Some((module, ImportSuggestion { did, path }));\n                     } else {\n                         // add the module to the lookup\n                         if seen_modules.insert(module.def_id().unwrap()) {"}, {"sha": "9d746673f4dae41791c7bae84c1b23e386ed2817", "filename": "src/test/ui/issue-42944.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8a4f8e6adcfdb5289f35a9f1049089e4dba1efb6/src%2Ftest%2Fui%2Fissue-42944.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a4f8e6adcfdb5289f35a9f1049089e4dba1efb6/src%2Ftest%2Fui%2Fissue-42944.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-42944.rs?ref=8a4f8e6adcfdb5289f35a9f1049089e4dba1efb6", "patch": "@@ -0,0 +1,19 @@\n+mod foo {\n+    pub struct B(());\n+}\n+\n+mod bar {\n+    use foo::B;\n+\n+    fn foo() {\n+        B(()); //~ ERROR expected function, found struct `B` [E0423]\n+    }\n+}\n+\n+mod baz {\n+    fn foo() {\n+        B(()); //~ ERROR cannot find function `B` in this scope [E0425]\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "43fd0ffb72439d3c17426ff114cb4631de02be0f", "filename": "src/test/ui/issue-42944.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8a4f8e6adcfdb5289f35a9f1049089e4dba1efb6/src%2Ftest%2Fui%2Fissue-42944.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a4f8e6adcfdb5289f35a9f1049089e4dba1efb6/src%2Ftest%2Fui%2Fissue-42944.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-42944.stderr?ref=8a4f8e6adcfdb5289f35a9f1049089e4dba1efb6", "patch": "@@ -0,0 +1,20 @@\n+error[E0423]: expected function, found struct `B`\n+  --> $DIR/issue-42944.rs:9:9\n+   |\n+LL |         B(()); //~ ERROR expected function, found struct `B` [E0423]\n+   |         ^ constructor is not visible here due to private fields\n+\n+error[E0425]: cannot find function `B` in this scope\n+  --> $DIR/issue-42944.rs:15:9\n+   |\n+LL |         B(()); //~ ERROR cannot find function `B` in this scope [E0425]\n+   |         ^ not found in this scope\n+help: possible candidate is found in another module, you can import it into scope\n+   |\n+LL |     use foo::B;\n+   |\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors occurred: E0423, E0425.\n+For more information about an error, try `rustc --explain E0423`."}, {"sha": "519e74d9f631583dd55586e43a830183ac254168", "filename": "src/test/ui/resolve/privacy-struct-ctor.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8a4f8e6adcfdb5289f35a9f1049089e4dba1efb6/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a4f8e6adcfdb5289f35a9f1049089e4dba1efb6/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr?ref=8a4f8e6adcfdb5289f35a9f1049089e4dba1efb6", "patch": "@@ -2,25 +2,16 @@ error[E0423]: expected value, found struct `Z`\n   --> $DIR/privacy-struct-ctor.rs:20:9\n    |\n LL |         Z;\n-   |         ^ constructor is not visible here due to private fields\n-help: a tuple struct with a similar name exists\n-   |\n-LL |         S;\n    |         ^\n-help: possible better candidate is found in another module, you can import it into scope\n-   |\n-LL |     use m::n::Z;\n-   |\n+   |         |\n+   |         constructor is not visible here due to private fields\n+   |         help: a tuple struct with a similar name exists: `S`\n \n error[E0423]: expected value, found struct `S`\n   --> $DIR/privacy-struct-ctor.rs:33:5\n    |\n LL |     S;\n    |     ^ constructor is not visible here due to private fields\n-help: possible better candidate is found in another module, you can import it into scope\n-   |\n-LL | use m::S;\n-   |\n \n error[E0423]: expected value, found struct `S2`\n   --> $DIR/privacy-struct-ctor.rs:38:5"}]}