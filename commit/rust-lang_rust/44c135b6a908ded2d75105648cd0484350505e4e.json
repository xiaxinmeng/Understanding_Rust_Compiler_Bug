{"sha": "44c135b6a908ded2d75105648cd0484350505e4e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0YzEzNWI2YTkwOGRlZDJkNzUxMDU2NDhjZDA0ODQzNTA1MDVlNGU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-10T09:48:13Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-23T21:50:20Z"}, "message": "use MaybeUninit in core::fmt\n\nCode by @japaric, I just split it into individual commits", "tree": {"sha": "b6c8b952ffe98411f390108359321cabf32f9327", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6c8b952ffe98411f390108359321cabf32f9327"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44c135b6a908ded2d75105648cd0484350505e4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44c135b6a908ded2d75105648cd0484350505e4e", "html_url": "https://github.com/rust-lang/rust/commit/44c135b6a908ded2d75105648cd0484350505e4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44c135b6a908ded2d75105648cd0484350505e4e/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f57e4841157d5cbd4c4e22018f93bd1801c98c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f57e4841157d5cbd4c4e22018f93bd1801c98c2", "html_url": "https://github.com/rust-lang/rust/commit/1f57e4841157d5cbd4c4e22018f93bd1801c98c2"}], "stats": {"total": 27, "additions": 14, "deletions": 13}, "files": [{"sha": "d01cd012031db45cbb99f4d51c008d8eba174fc1", "filename": "src/libcore/fmt/float.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/44c135b6a908ded2d75105648cd0484350505e4e/src%2Flibcore%2Ffmt%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44c135b6a908ded2d75105648cd0484350505e4e/src%2Flibcore%2Ffmt%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Ffloat.rs?ref=44c135b6a908ded2d75105648cd0484350505e4e", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use fmt::{Formatter, Result, LowerExp, UpperExp, Display, Debug};\n-use mem;\n+use mem::MaybeUninit;\n use num::flt2dec;\n \n // Don't inline this so callers don't use the stack space this function\n@@ -20,11 +20,11 @@ fn float_to_decimal_common_exact<T>(fmt: &mut Formatter, num: &T,\n     where T: flt2dec::DecodableFloat\n {\n     unsafe {\n-        let mut buf: [u8; 1024] = mem::uninitialized(); // enough for f32 and f64\n-        let mut parts: [flt2dec::Part; 4] = mem::uninitialized();\n+        let mut buf = MaybeUninit::<[u8; 1024]>::uninitialized(); // enough for f32 and f64\n+        let mut parts = MaybeUninit::<[flt2dec::Part; 4]>::uninitialized();\n         let formatted = flt2dec::to_exact_fixed_str(flt2dec::strategy::grisu::format_exact,\n                                                     *num, sign, precision,\n-                                                    false, &mut buf, &mut parts);\n+                                                    false, buf.get_mut(), parts.get_mut());\n         fmt.pad_formatted_parts(&formatted)\n     }\n }\n@@ -38,10 +38,11 @@ fn float_to_decimal_common_shortest<T>(fmt: &mut Formatter, num: &T,\n {\n     unsafe {\n         // enough for f32 and f64\n-        let mut buf: [u8; flt2dec::MAX_SIG_DIGITS] = mem::uninitialized();\n-        let mut parts: [flt2dec::Part; 4] = mem::uninitialized();\n+        let mut buf = MaybeUninit::<[u8; flt2dec::MAX_SIG_DIGITS]>::uninitialized();\n+        let mut parts = MaybeUninit::<[flt2dec::Part; 4]>::uninitialized();\n         let formatted = flt2dec::to_shortest_str(flt2dec::strategy::grisu::format_shortest, *num,\n-                                                 sign, precision, false, &mut buf, &mut parts);\n+                                                 sign, precision, false, buf.get_mut(),\n+                                                 parts.get_mut());\n         fmt.pad_formatted_parts(&formatted)\n     }\n }\n@@ -75,11 +76,11 @@ fn float_to_exponential_common_exact<T>(fmt: &mut Formatter, num: &T,\n     where T: flt2dec::DecodableFloat\n {\n     unsafe {\n-        let mut buf: [u8; 1024] = mem::uninitialized(); // enough for f32 and f64\n-        let mut parts: [flt2dec::Part; 6] = mem::uninitialized();\n+        let mut buf = MaybeUninit::<[u8; 1024]>::uninitialized(); // enough for f32 and f64\n+        let mut parts = MaybeUninit::<[flt2dec::Part; 6]>::uninitialized();\n         let formatted = flt2dec::to_exact_exp_str(flt2dec::strategy::grisu::format_exact,\n                                                   *num, sign, precision,\n-                                                  upper, &mut buf, &mut parts);\n+                                                  upper, buf.get_mut(), parts.get_mut());\n         fmt.pad_formatted_parts(&formatted)\n     }\n }\n@@ -94,11 +95,11 @@ fn float_to_exponential_common_shortest<T>(fmt: &mut Formatter,\n {\n     unsafe {\n         // enough for f32 and f64\n-        let mut buf: [u8; flt2dec::MAX_SIG_DIGITS] = mem::uninitialized();\n-        let mut parts: [flt2dec::Part; 6] = mem::uninitialized();\n+        let mut buf = MaybeUninit::<[u8; flt2dec::MAX_SIG_DIGITS]>::uninitialized();\n+        let mut parts = MaybeUninit::<[flt2dec::Part; 6]>::uninitialized();\n         let formatted = flt2dec::to_shortest_exp_str(flt2dec::strategy::grisu::format_shortest,\n                                                      *num, sign, (0, 0), upper,\n-                                                     &mut buf, &mut parts);\n+                                                     buf.get_mut(), parts.get_mut());\n         fmt.pad_formatted_parts(&formatted)\n     }\n }"}]}