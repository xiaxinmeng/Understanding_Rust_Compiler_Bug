{"sha": "dbb73f8f79ab176a897d5a95e696adb71b957cbe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiYjczZjhmNzlhYjE3NmE4OTdkNWE5NWU2OTZhZGI3MWI5NTdjYmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-12T22:04:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-12T22:04:37Z"}, "message": "Auto merge of #73461 - calebzulawski:validate-attribute-placement, r=matthewjasper\n\nValidate built-in attribute placement\n\nCloses #54584, closes #47725, closes #54044.\n\nI've changed silently ignoring some incorrectly placed attributes to errors.  I'm not sure what the policy is since this can theoretically break code (should they be warnings instead? does it warrant a crater run?).", "tree": {"sha": "4c73e2b5da6f978072701bb4563c21ba67ad17bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c73e2b5da6f978072701bb4563c21ba67ad17bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbb73f8f79ab176a897d5a95e696adb71b957cbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbb73f8f79ab176a897d5a95e696adb71b957cbe", "html_url": "https://github.com/rust-lang/rust/commit/dbb73f8f79ab176a897d5a95e696adb71b957cbe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbb73f8f79ab176a897d5a95e696adb71b957cbe/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "989190874fe2a0e9877ce4f02a6c60641e3d42a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/989190874fe2a0e9877ce4f02a6c60641e3d42a3", "html_url": "https://github.com/rust-lang/rust/commit/989190874fe2a0e9877ce4f02a6c60641e3d42a3"}, {"sha": "82cb37911124a608986961f819b60291965ead3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/82cb37911124a608986961f819b60291965ead3f", "html_url": "https://github.com/rust-lang/rust/commit/82cb37911124a608986961f819b60291965ead3f"}], "stats": {"total": 1618, "additions": 1156, "deletions": 462}, "files": [{"sha": "efe947daa28662cc1312e6f0af2bbf54534cafdf", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 183, "deletions": 14, "changes": 197, "blob_url": "https://github.com/rust-lang/rust/blob/dbb73f8f79ab176a897d5a95e696adb71b957cbe/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbb73f8f79ab176a897d5a95e696adb71b957cbe/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=dbb73f8f79ab176a897d5a95e696adb71b957cbe", "patch": "@@ -66,12 +66,26 @@ impl CheckAttrVisitor<'tcx> {\n             } else if self.tcx.sess.check_name(attr, sym::marker) {\n                 self.check_marker(attr, span, target)\n             } else if self.tcx.sess.check_name(attr, sym::target_feature) {\n-                self.check_target_feature(attr, span, target)\n+                self.check_target_feature(hir_id, attr, span, target)\n             } else if self.tcx.sess.check_name(attr, sym::track_caller) {\n                 self.check_track_caller(&attr.span, attrs, span, target)\n             } else if self.tcx.sess.check_name(attr, sym::doc) {\n                 self.check_doc_alias(attr, hir_id, target)\n+            } else if self.tcx.sess.check_name(attr, sym::no_link) {\n+                self.check_no_link(&attr, span, target)\n+            } else if self.tcx.sess.check_name(attr, sym::export_name) {\n+                self.check_export_name(&attr, span, target)\n             } else {\n+                // lint-only checks\n+                if self.tcx.sess.check_name(attr, sym::cold) {\n+                    self.check_cold(hir_id, attr, span, target);\n+                } else if self.tcx.sess.check_name(attr, sym::link_name) {\n+                    self.check_link_name(hir_id, attr, span, target);\n+                } else if self.tcx.sess.check_name(attr, sym::link_section) {\n+                    self.check_link_section(hir_id, attr, span, target);\n+                } else if self.tcx.sess.check_name(attr, sym::no_mangle) {\n+                    self.check_no_mangle(hir_id, attr, span, target);\n+                }\n                 true\n             };\n         }\n@@ -109,12 +123,12 @@ impl CheckAttrVisitor<'tcx> {\n                     lint.build(\"`#[inline]` is ignored on constants\")\n                         .warn(\n                             \"this was previously accepted by the compiler but is \\\n-                               being phased out; it will become a hard error in \\\n-                               a future release!\",\n+                             being phased out; it will become a hard error in \\\n+                             a future release!\",\n                         )\n                         .note(\n                             \"see issue #65833 <https://github.com/rust-lang/rust/issues/65833> \\\n-                                 for more information\",\n+                             for more information\",\n                         )\n                         .emit();\n                 });\n@@ -153,7 +167,7 @@ impl CheckAttrVisitor<'tcx> {\n                 .emit();\n                 false\n             }\n-            Target::Fn | Target::Method(..) | Target::ForeignFn => true,\n+            Target::Fn | Target::Method(..) | Target::ForeignFn | Target::Closure => true,\n             _ => {\n                 struct_span_err!(\n                     self.tcx.sess,\n@@ -202,10 +216,31 @@ impl CheckAttrVisitor<'tcx> {\n     }\n \n     /// Checks if the `#[target_feature]` attribute on `item` is valid. Returns `true` if valid.\n-    fn check_target_feature(&self, attr: &Attribute, span: &Span, target: Target) -> bool {\n+    fn check_target_feature(\n+        &self,\n+        hir_id: HirId,\n+        attr: &Attribute,\n+        span: &Span,\n+        target: Target,\n+    ) -> bool {\n         match target {\n             Target::Fn\n             | Target::Method(MethodKind::Trait { body: true } | MethodKind::Inherent) => true,\n+            // FIXME: #[target_feature] was previously erroneously allowed on statements and some\n+            // crates used this, so only emit a warning.\n+            Target::Statement => {\n+                self.tcx.struct_span_lint_hir(UNUSED_ATTRIBUTES, hir_id, attr.span, |lint| {\n+                    lint.build(\"attribute should be applied to a function\")\n+                        .warn(\n+                            \"this was previously accepted by the compiler but is \\\n+                             being phased out; it will become a hard error in \\\n+                             a future release!\",\n+                        )\n+                        .span_label(*span, \"not a function\")\n+                        .emit();\n+                });\n+                true\n+            }\n             _ => {\n                 self.tcx\n                     .sess\n@@ -277,6 +312,136 @@ impl CheckAttrVisitor<'tcx> {\n         true\n     }\n \n+    /// Checks if `#[cold]` is applied to a non-function. Returns `true` if valid.\n+    fn check_cold(&self, hir_id: HirId, attr: &Attribute, span: &Span, target: Target) {\n+        match target {\n+            Target::Fn | Target::Method(..) | Target::ForeignFn | Target::Closure => {}\n+            _ => {\n+                // FIXME: #[cold] was previously allowed on non-functions and some crates used\n+                // this, so only emit a warning.\n+                self.tcx.struct_span_lint_hir(UNUSED_ATTRIBUTES, hir_id, attr.span, |lint| {\n+                    lint.build(\"attribute should be applied to a function\")\n+                        .warn(\n+                            \"this was previously accepted by the compiler but is \\\n+                             being phased out; it will become a hard error in \\\n+                             a future release!\",\n+                        )\n+                        .span_label(*span, \"not a function\")\n+                        .emit();\n+                });\n+            }\n+        }\n+    }\n+\n+    /// Checks if `#[link_name]` is applied to an item other than a foreign function or static.\n+    fn check_link_name(&self, hir_id: HirId, attr: &Attribute, span: &Span, target: Target) {\n+        match target {\n+            Target::ForeignFn | Target::ForeignStatic => {}\n+            _ => {\n+                // FIXME: #[cold] was previously allowed on non-functions/statics and some crates\n+                // used this, so only emit a warning.\n+                self.tcx.struct_span_lint_hir(UNUSED_ATTRIBUTES, hir_id, attr.span, |lint| {\n+                    let mut diag =\n+                        lint.build(\"attribute should be applied to a foreign function or static\");\n+                    diag.warn(\n+                        \"this was previously accepted by the compiler but is \\\n+                         being phased out; it will become a hard error in \\\n+                         a future release!\",\n+                    );\n+\n+                    // See issue #47725\n+                    if let Target::ForeignMod = target {\n+                        if let Some(value) = attr.value_str() {\n+                            diag.span_help(\n+                                attr.span,\n+                                &format!(r#\"try `#[link(name = \"{}\")]` instead\"#, value),\n+                            );\n+                        } else {\n+                            diag.span_help(attr.span, r#\"try `#[link(name = \"...\")]` instead\"#);\n+                        }\n+                    }\n+\n+                    diag.span_label(*span, \"not a foreign function or static\");\n+                    diag.emit();\n+                });\n+            }\n+        }\n+    }\n+\n+    /// Checks if `#[no_link]` is applied to an `extern crate`. Returns `true` if valid.\n+    fn check_no_link(&self, attr: &Attribute, span: &Span, target: Target) -> bool {\n+        if target == Target::ExternCrate {\n+            true\n+        } else {\n+            self.tcx\n+                .sess\n+                .struct_span_err(attr.span, \"attribute should be applied to an `extern crate` item\")\n+                .span_label(*span, \"not an `extern crate` item\")\n+                .emit();\n+            false\n+        }\n+    }\n+\n+    /// Checks if `#[export_name]` is applied to a function or static. Returns `true` if valid.\n+    fn check_export_name(&self, attr: &Attribute, span: &Span, target: Target) -> bool {\n+        match target {\n+            Target::Static | Target::Fn | Target::Method(..) => true,\n+            _ => {\n+                self.tcx\n+                    .sess\n+                    .struct_span_err(\n+                        attr.span,\n+                        \"attribute should be applied to a function or static\",\n+                    )\n+                    .span_label(*span, \"not a function or static\")\n+                    .emit();\n+                false\n+            }\n+        }\n+    }\n+\n+    /// Checks if `#[link_section]` is applied to a function or static.\n+    fn check_link_section(&self, hir_id: HirId, attr: &Attribute, span: &Span, target: Target) {\n+        match target {\n+            Target::Static | Target::Fn | Target::Method(..) => {}\n+            _ => {\n+                // FIXME: #[link_section] was previously allowed on non-functions/statics and some\n+                // crates used this, so only emit a warning.\n+                self.tcx.struct_span_lint_hir(UNUSED_ATTRIBUTES, hir_id, attr.span, |lint| {\n+                    lint.build(\"attribute should be applied to a function or static\")\n+                        .warn(\n+                            \"this was previously accepted by the compiler but is \\\n+                             being phased out; it will become a hard error in \\\n+                             a future release!\",\n+                        )\n+                        .span_label(*span, \"not a function or static\")\n+                        .emit();\n+                });\n+            }\n+        }\n+    }\n+\n+    /// Checks if `#[no_mangle]` is applied to a function or static.\n+    fn check_no_mangle(&self, hir_id: HirId, attr: &Attribute, span: &Span, target: Target) {\n+        match target {\n+            Target::Static | Target::Fn | Target::Method(..) => {}\n+            _ => {\n+                // FIXME: #[no_mangle] was previously allowed on non-functions/statics and some\n+                // crates used this, so only emit a warning.\n+                self.tcx.struct_span_lint_hir(UNUSED_ATTRIBUTES, hir_id, attr.span, |lint| {\n+                    lint.build(\"attribute should be applied to a function or static\")\n+                        .warn(\n+                            \"this was previously accepted by the compiler but is \\\n+                             being phased out; it will become a hard error in \\\n+                             a future release!\",\n+                        )\n+                        .span_label(*span, \"not a function or static\")\n+                        .emit();\n+                });\n+            }\n+        }\n+    }\n+\n     /// Checks if the `#[repr]` attributes on `item` are valid.\n     fn check_repr(\n         &self,\n@@ -321,7 +486,11 @@ impl CheckAttrVisitor<'tcx> {\n                 }\n                 sym::simd => {\n                     is_simd = true;\n-                    if target != Target::Struct { (\"a\", \"struct\") } else { continue }\n+                    if target != Target::Struct {\n+                        (\"a\", \"struct\")\n+                    } else {\n+                        continue;\n+                    }\n                 }\n                 sym::transparent => {\n                     is_transparent = true;\n@@ -358,7 +527,11 @@ impl CheckAttrVisitor<'tcx> {\n                 | sym::isize\n                 | sym::usize => {\n                     int_reprs += 1;\n-                    if target != Target::Enum { (\"an\", \"enum\") } else { continue }\n+                    if target != Target::Enum {\n+                        (\"an\", \"enum\")\n+                    } else {\n+                        continue;\n+                    }\n                 }\n                 _ => continue,\n             };\n@@ -421,10 +594,8 @@ impl CheckAttrVisitor<'tcx> {\n     fn check_stmt_attributes(&self, stmt: &hir::Stmt<'_>) {\n         // When checking statements ignore expressions, they will be checked later\n         if let hir::StmtKind::Local(ref l) = stmt.kind {\n+            self.check_attributes(l.hir_id, &l.attrs, &stmt.span, Target::Statement, None);\n             for attr in l.attrs.iter() {\n-                if self.tcx.sess.check_name(attr, sym::inline) {\n-                    self.check_inline(l.hir_id, attr, &stmt.span, Target::Statement);\n-                }\n                 if self.tcx.sess.check_name(attr, sym::repr) {\n                     self.emit_repr_error(\n                         attr.span,\n@@ -442,10 +613,8 @@ impl CheckAttrVisitor<'tcx> {\n             hir::ExprKind::Closure(..) => Target::Closure,\n             _ => Target::Expression,\n         };\n+        self.check_attributes(expr.hir_id, &expr.attrs, &expr.span, target, None);\n         for attr in expr.attrs.iter() {\n-            if self.tcx.sess.check_name(attr, sym::inline) {\n-                self.check_inline(expr.hir_id, attr, &expr.span, target);\n-            }\n             if self.tcx.sess.check_name(attr, sym::repr) {\n                 self.emit_repr_error(\n                     attr.span,"}, {"sha": "9b8427a46955cc9ebf0192b16e8597ba4c9ae4a2", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 11, "deletions": 19, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/dbb73f8f79ab176a897d5a95e696adb71b957cbe/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbb73f8f79ab176a897d5a95e696adb71b957cbe/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=dbb73f8f79ab176a897d5a95e696adb71b957cbe", "patch": "@@ -2525,10 +2525,17 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n                 codegen_fn_attrs.export_name = Some(s);\n             }\n         } else if tcx.sess.check_name(attr, sym::target_feature) {\n-            if !tcx.features().target_feature_11 {\n-                check_target_feature_safe_fn(tcx, id, attr.span);\n-            } else if let Some(local_id) = id.as_local() {\n-                if tcx.fn_sig(id).unsafety() == hir::Unsafety::Normal {\n+            if !tcx.is_closure(id) && tcx.fn_sig(id).unsafety() == hir::Unsafety::Normal {\n+                if !tcx.features().target_feature_11 {\n+                    let mut err = feature_err(\n+                        &tcx.sess.parse_sess,\n+                        sym::target_feature_11,\n+                        attr.span,\n+                        \"`#[target_feature(..)]` can only be applied to `unsafe` functions\",\n+                    );\n+                    err.span_label(tcx.def_span(id), \"not an `unsafe` function\");\n+                    err.emit();\n+                } else if let Some(local_id) = id.as_local() {\n                     check_target_feature_trait_unsafe(tcx, local_id, attr.span);\n                 }\n             }\n@@ -2785,21 +2792,6 @@ fn check_link_name_xor_ordinal(\n     }\n }\n \n-/// Checks the function annotated with `#[target_feature]` is unsafe,\n-/// reporting an error if it isn't.\n-fn check_target_feature_safe_fn(tcx: TyCtxt<'_>, id: DefId, attr_span: Span) {\n-    if tcx.is_closure(id) || tcx.fn_sig(id).unsafety() == hir::Unsafety::Normal {\n-        let mut err = feature_err(\n-            &tcx.sess.parse_sess,\n-            sym::target_feature_11,\n-            attr_span,\n-            \"`#[target_feature(..)]` can only be applied to `unsafe` functions\",\n-        );\n-        err.span_label(tcx.def_span(id), \"not an `unsafe` function\");\n-        err.emit();\n-    }\n-}\n-\n /// Checks the function annotated with `#[target_feature]` is not a safe\n /// trait method implementation, reporting an error if it is.\n fn check_target_feature_trait_unsafe(tcx: TyCtxt<'_>, id: LocalDefId, attr_span: Span) {"}, {"sha": "3072deb6c5a3de985966ce2969cad69495dea67d", "filename": "src/test/ui/check-static-recursion-foreign.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dbb73f8f79ab176a897d5a95e696adb71b957cbe/src%2Ftest%2Fui%2Fcheck-static-recursion-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbb73f8f79ab176a897d5a95e696adb71b957cbe/src%2Ftest%2Fui%2Fcheck-static-recursion-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-static-recursion-foreign.rs?ref=dbb73f8f79ab176a897d5a95e696adb71b957cbe", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n \n-#![allow(dead_code)]\n // Static recursion check shouldn't fail when given a foreign item (#18279)\n \n // aux-build:check_static_recursion_foreign_helper.rs\n@@ -15,12 +14,10 @@ extern crate libc;\n \n use libc::c_int;\n \n-#[link_name = \"check_static_recursion_foreign_helper\"]\n extern \"C\" {\n-    #[allow(dead_code)]\n     static test_static: c_int;\n }\n \n-static B: &'static c_int = unsafe { &test_static };\n+pub static B: &'static c_int = unsafe { &test_static };\n \n pub fn main() {}"}, {"sha": "3ac8ba5232de7253989106a31028842d53663890", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-builtin-attrs-error.rs", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/dbb73f8f79ab176a897d5a95e696adb71b957cbe/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbb73f8f79ab176a897d5a95e696adb71b957cbe/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs-error.rs?ref=dbb73f8f79ab176a897d5a95e696adb71b957cbe", "patch": "@@ -0,0 +1,91 @@\n+// This is testing whether various builtin attributes signals an\n+// error or warning when put in \"weird\" places.\n+//\n+// (This file sits on its own because it actually signals an error,\n+// which would mess up the treatment of other cases in\n+// issue-43106-gating-of-builtin-attrs.rs)\n+\n+// ignore-tidy-linelength\n+\n+// Crate-level is accepted, though it is almost certainly unused?\n+#![inline]\n+\n+#[inline]\n+//~^ ERROR attribute should be applied to function or closure\n+mod inline {\n+    //~^ NOTE not a function or closure\n+\n+    mod inner { #![inline] }\n+    //~^ ERROR attribute should be applied to function or closure\n+    //~| NOTE not a function or closure\n+\n+    #[inline = \"2100\"] fn f() { }\n+    //~^ ERROR attribute must be of the form\n+    //~| WARN this was previously accepted\n+    //~| NOTE #[deny(ill_formed_attribute_input)]` on by default\n+    //~| NOTE for more information, see issue #57571 <https://github.com/rust-lang/rust/issues/57571>\n+\n+    #[inline] struct S;\n+    //~^ ERROR attribute should be applied to function or closure\n+    //~| NOTE not a function or closure\n+\n+    #[inline] type T = S;\n+    //~^ ERROR attribute should be applied to function or closure\n+    //~| NOTE not a function or closure\n+\n+    #[inline] impl S { }\n+    //~^ ERROR attribute should be applied to function or closure\n+    //~| NOTE not a function or closure\n+}\n+\n+#[no_link]\n+//~^ ERROR attribute should be applied to an `extern crate` item\n+mod no_link {\n+    //~^ NOTE not an `extern crate` item\n+\n+    mod inner { #![no_link] }\n+    //~^ ERROR attribute should be applied to an `extern crate` item\n+    //~| NOTE not an `extern crate` item\n+\n+    #[no_link] fn f() { }\n+    //~^ ERROR attribute should be applied to an `extern crate` item\n+    //~| NOTE not an `extern crate` item\n+\n+    #[no_link] struct S;\n+    //~^ ERROR attribute should be applied to an `extern crate` item\n+    //~| NOTE not an `extern crate` item\n+\n+    #[no_link]type T = S;\n+    //~^ ERROR attribute should be applied to an `extern crate` item\n+    //~| NOTE not an `extern crate` item\n+\n+    #[no_link] impl S { }\n+    //~^ ERROR attribute should be applied to an `extern crate` item\n+    //~| NOTE not an `extern crate` item\n+}\n+\n+#[export_name = \"2200\"]\n+//~^ ERROR attribute should be applied to a function or static\n+mod export_name {\n+    //~^ NOTE not a function or static\n+\n+    mod inner { #![export_name=\"2200\"] }\n+    //~^ ERROR attribute should be applied to a function or static\n+    //~| NOTE not a function or static\n+\n+    #[export_name = \"2200\"] fn f() { }\n+\n+    #[export_name = \"2200\"] struct S;\n+    //~^ ERROR attribute should be applied to a function or static\n+    //~| NOTE not a function or static\n+\n+    #[export_name = \"2200\"] type T = S;\n+    //~^ ERROR attribute should be applied to a function or static\n+    //~| NOTE not a function or static\n+\n+    #[export_name = \"2200\"] impl S { }\n+    //~^ ERROR attribute should be applied to a function or static\n+    //~| NOTE not a function or static\n+}\n+\n+fn main() {}"}, {"sha": "c9255d2be129bdede17aa5e3f3fa0014ef9de77c", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-builtin-attrs-error.stderr", "status": "added", "additions": 136, "deletions": 0, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/dbb73f8f79ab176a897d5a95e696adb71b957cbe/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbb73f8f79ab176a897d5a95e696adb71b957cbe/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs-error.stderr?ref=dbb73f8f79ab176a897d5a95e696adb71b957cbe", "patch": "@@ -0,0 +1,136 @@\n+error: attribute must be of the form `#[inline]` or `#[inline(always|never)]`\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:22:5\n+   |\n+LL |     #[inline = \"2100\"] fn f() { }\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[deny(ill_formed_attribute_input)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #57571 <https://github.com/rust-lang/rust/issues/57571>\n+\n+error[E0518]: attribute should be applied to function or closure\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:13:1\n+   |\n+LL |   #[inline]\n+   |   ^^^^^^^^^\n+LL |\n+LL | / mod inline {\n+LL | |\n+LL | |\n+LL | |     mod inner { #![inline] }\n+...  |\n+LL | |\n+LL | | }\n+   | |_- not a function or closure\n+\n+error: attribute should be applied to an `extern crate` item\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:41:1\n+   |\n+LL |   #[no_link]\n+   |   ^^^^^^^^^^\n+LL |\n+LL | / mod no_link {\n+LL | |\n+LL | |\n+LL | |     mod inner { #![no_link] }\n+...  |\n+LL | |\n+LL | | }\n+   | |_- not an `extern crate` item\n+\n+error: attribute should be applied to a function or static\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:67:1\n+   |\n+LL |   #[export_name = \"2200\"]\n+   |   ^^^^^^^^^^^^^^^^^^^^^^^\n+LL |\n+LL | / mod export_name {\n+LL | |\n+LL | |\n+LL | |     mod inner { #![export_name=\"2200\"] }\n+...  |\n+LL | |\n+LL | | }\n+   | |_- not a function or static\n+\n+error[E0518]: attribute should be applied to function or closure\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:18:17\n+   |\n+LL |     mod inner { #![inline] }\n+   |     ------------^^^^^^^^^^-- not a function or closure\n+\n+error[E0518]: attribute should be applied to function or closure\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:28:5\n+   |\n+LL |     #[inline] struct S;\n+   |     ^^^^^^^^^ --------- not a function or closure\n+\n+error[E0518]: attribute should be applied to function or closure\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:32:5\n+   |\n+LL |     #[inline] type T = S;\n+   |     ^^^^^^^^^ ----------- not a function or closure\n+\n+error[E0518]: attribute should be applied to function or closure\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:36:5\n+   |\n+LL |     #[inline] impl S { }\n+   |     ^^^^^^^^^ ---------- not a function or closure\n+\n+error: attribute should be applied to an `extern crate` item\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:46:17\n+   |\n+LL |     mod inner { #![no_link] }\n+   |     ------------^^^^^^^^^^^-- not an `extern crate` item\n+\n+error: attribute should be applied to an `extern crate` item\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:50:5\n+   |\n+LL |     #[no_link] fn f() { }\n+   |     ^^^^^^^^^^ ---------- not an `extern crate` item\n+\n+error: attribute should be applied to an `extern crate` item\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:54:5\n+   |\n+LL |     #[no_link] struct S;\n+   |     ^^^^^^^^^^ --------- not an `extern crate` item\n+\n+error: attribute should be applied to an `extern crate` item\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:58:5\n+   |\n+LL |     #[no_link]type T = S;\n+   |     ^^^^^^^^^^----------- not an `extern crate` item\n+\n+error: attribute should be applied to an `extern crate` item\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:62:5\n+   |\n+LL |     #[no_link] impl S { }\n+   |     ^^^^^^^^^^ ---------- not an `extern crate` item\n+\n+error: attribute should be applied to a function or static\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:72:17\n+   |\n+LL |     mod inner { #![export_name=\"2200\"] }\n+   |     ------------^^^^^^^^^^^^^^^^^^^^^^-- not a function or static\n+\n+error: attribute should be applied to a function or static\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:78:5\n+   |\n+LL |     #[export_name = \"2200\"] struct S;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ --------- not a function or static\n+\n+error: attribute should be applied to a function or static\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:82:5\n+   |\n+LL |     #[export_name = \"2200\"] type T = S;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ ----------- not a function or static\n+\n+error: attribute should be applied to a function or static\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:86:5\n+   |\n+LL |     #[export_name = \"2200\"] impl S { }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ ---------- not a function or static\n+\n+error: aborting due to 17 previous errors\n+\n+For more information about this error, try `rustc --explain E0518`."}, {"sha": "f94434f459df9abeb84c6967471fd2d4076844a4", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-builtin-attrs.rs", "status": "modified", "additions": 115, "deletions": 55, "changes": 170, "blob_url": "https://github.com/rust-lang/rust/blob/dbb73f8f79ab176a897d5a95e696adb71b957cbe/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbb73f8f79ab176a897d5a95e696adb71b957cbe/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs?ref=dbb73f8f79ab176a897d5a95e696adb71b957cbe", "patch": "@@ -31,14 +31,19 @@\n // occurrences in the source text.\n \n // check-pass\n+// ignore-tidy-linelength\n \n #![feature(test, plugin_registrar)]\n #![warn(unused_attributes, unknown_lints)]\n+//~^ NOTE the lint level is defined here\n+//~| NOTE the lint level is defined here\n \n // Exception, a gated and deprecated attribute.\n \n-#![plugin_registrar] //~ WARN unused attribute\n+#![plugin_registrar]\n+//~^ WARN unused attribute\n //~| WARN use of deprecated attribute\n+//~| HELP may be removed in a future compiler version\n \n // UNGATED WHITE-LISTED BUILT-IN ATTRIBUTES\n \n@@ -72,7 +77,7 @@\n #![doc = \"2400\"]\n #![cold]\n #![export_name = \"2200\"]\n-// see issue-43106-gating-of-inline.rs\n+// see issue-43106-gating-of-builtin-attrs-error.rs\n #![link()]\n #![link_name = \"1900\"]\n #![link_section = \"1800\"]\n@@ -88,12 +93,18 @@\n #![crate_name = \"0900\"]\n #![crate_type = \"bin\"] // cannot pass \"0800\" here\n \n-#![crate_id = \"10\"] //~ WARN use of deprecated attribute\n+#![crate_id = \"10\"]\n+//~^ WARN use of deprecated attribute\n+//~| HELP remove this attribute\n \n // FIXME(#44232) we should warn that this isn't used.\n-#![feature(rust1)] //~ WARN no longer requires an attribute to enable\n+#![feature(rust1)]\n+//~^ WARN no longer requires an attribute to enable\n+//~| NOTE `#[warn(stable_features)]` on by default\n \n-#![no_start] //~ WARN use of deprecated attribute\n+#![no_start]\n+//~^ WARN use of deprecated attribute\n+//~| HELP remove this attribute\n \n // (cannot easily gating state of crate-level #[no_main]; but non crate-level is below at \"0400\")\n #![no_builtins]\n@@ -217,24 +228,30 @@ mod macro_export {\n #[plugin_registrar]\n //~^ WARN unused attribute\n //~| WARN use of deprecated attribute\n+//~| HELP may be removed in a future compiler version\n mod plugin_registrar {\n     mod inner { #![plugin_registrar] }\n     //~^ WARN unused attribute\n     //~| WARN use of deprecated attribute\n+    //~| HELP may be removed in a future compiler version\n+    //~| NOTE `#[warn(deprecated)]` on by default\n \n     // for `fn f()` case, see gated-plugin_registrar.rs\n \n     #[plugin_registrar] struct S;\n     //~^ WARN unused attribute\n     //~| WARN use of deprecated attribute\n+    //~| HELP may be removed in a future compiler version\n \n     #[plugin_registrar] type T = S;\n     //~^ WARN unused attribute\n     //~| WARN use of deprecated attribute\n+    //~| HELP may be removed in a future compiler version\n \n     #[plugin_registrar] impl S { }\n     //~^ WARN unused attribute\n     //~| WARN use of deprecated attribute\n+    //~| HELP may be removed in a future compiler version\n }\n \n #[main]\n@@ -355,35 +372,31 @@ mod automatically_derived {\n }\n \n #[no_mangle]\n+//~^ WARN attribute should be applied to a function or static [unused_attributes]\n+//~| WARN this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n mod no_mangle {\n+    //~^ NOTE not a function or static\n     mod inner { #![no_mangle] }\n+    //~^ WARN attribute should be applied to a function or static [unused_attributes]\n+    //~| WARN this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+    //~| NOTE not a function or static\n \n     #[no_mangle] fn f() { }\n \n     #[no_mangle] struct S;\n+    //~^ WARN attribute should be applied to a function or static [unused_attributes]\n+    //~| WARN this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+    //~| NOTE not a function or static\n \n     #[no_mangle] type T = S;\n+    //~^ WARN attribute should be applied to a function or static [unused_attributes]\n+    //~| WARN this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+    //~| NOTE not a function or static\n \n     #[no_mangle] impl S { }\n-}\n-\n-#[no_link]\n-//~^ WARN unused attribute\n-mod no_link {\n-    mod inner { #![no_link] }\n-    //~^ WARN unused attribute\n-\n-    #[no_link] fn f() { }\n-    //~^ WARN unused attribute\n-\n-    #[no_link] struct S;\n-    //~^ WARN unused attribute\n-\n-    #[no_link]type T = S;\n-    //~^ WARN unused attribute\n-\n-    #[no_link] impl S { }\n-    //~^ WARN unused attribute\n+    //~^ WARN attribute should be applied to a function or static [unused_attributes]\n+    //~| WARN this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+    //~| NOTE not a function or static\n }\n \n #[should_panic]\n@@ -468,6 +481,7 @@ mod reexport_test_harness_main {\n mod macro_escape {\n     mod inner { #![macro_escape] }\n     //~^ WARN `#[macro_escape]` is a deprecated synonym for `#[macro_use]`\n+    //~| HELP try an outer attribute: `#[macro_use]`\n \n     #[macro_escape] fn f() { }\n     //~^ WARN unused attribute\n@@ -525,73 +539,119 @@ mod doc {\n }\n \n #[cold]\n+//~^ WARN attribute should be applied to a function\n+//~| WARN this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n mod cold {\n+    //~^ NOTE not a function\n+\n     mod inner { #![cold] }\n+    //~^ WARN attribute should be applied to a function\n+    //~| WARN this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+    //~| NOTE not a function\n \n     #[cold] fn f() { }\n \n     #[cold] struct S;\n+    //~^ WARN attribute should be applied to a function\n+    //~| WARN this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+    //~| NOTE not a function\n \n     #[cold] type T = S;\n+    //~^ WARN attribute should be applied to a function\n+    //~| WARN this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+    //~| NOTE not a function\n \n     #[cold] impl S { }\n-}\n-\n-#[export_name = \"2200\"]\n-mod export_name {\n-    mod inner { #![export_name=\"2200\"] }\n-\n-    #[export_name = \"2200\"] fn f() { }\n-\n-    #[export_name = \"2200\"] struct S;\n-\n-    #[export_name = \"2200\"] type T = S;\n-\n-    #[export_name = \"2200\"] impl S { }\n-}\n-\n-// Note that this is a `check-pass` test, so it\n-// will never invoke the linker. These are here nonetheless to point\n-// out that we allow them at non-crate-level (though I do not know\n-// whether they have the same effect here as at crate-level).\n-\n-#[link()]\n-mod link {\n-    mod inner { #![link()] }\n-\n-    #[link()] fn f() { }\n-\n-    #[link()] struct S;\n-\n-    #[link()] type T = S;\n-\n-    #[link()] impl S { }\n+    //~^ WARN attribute should be applied to a function\n+    //~| WARN this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+    //~| NOTE not a function\n }\n \n #[link_name = \"1900\"]\n+//~^ WARN attribute should be applied to a foreign function or static [unused_attributes]\n+//~| WARN this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n mod link_name {\n+    //~^ NOTE not a foreign function or static\n+\n+    #[link_name = \"1900\"]\n+    //~^ WARN attribute should be applied to a foreign function or static [unused_attributes]\n+    //~| WARN this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+    //~| HELP try `#[link(name = \"1900\")]` instead\n+    extern { }\n+    //~^ NOTE not a foreign function or static\n+\n     mod inner { #![link_name=\"1900\"] }\n+    //~^ WARN attribute should be applied to a foreign function or static [unused_attributes]\n+    //~| WARN this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+    //~| NOTE not a foreign function or static\n \n     #[link_name = \"1900\"] fn f() { }\n+    //~^ WARN attribute should be applied to a foreign function or static [unused_attributes]\n+    //~| WARN this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+    //~| NOTE not a foreign function or static\n \n     #[link_name = \"1900\"] struct S;\n+    //~^ WARN attribute should be applied to a foreign function or static [unused_attributes]\n+    //~| WARN this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+    //~| NOTE not a foreign function or static\n \n     #[link_name = \"1900\"] type T = S;\n+    //~^ WARN attribute should be applied to a foreign function or static [unused_attributes]\n+    //~| WARN this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+    //~| NOTE not a foreign function or static\n \n     #[link_name = \"1900\"] impl S { }\n+    //~^ WARN attribute should be applied to a foreign function or static [unused_attributes]\n+    //~| WARN this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+    //~| NOTE not a foreign function or static\n }\n \n #[link_section = \"1800\"]\n+//~^ WARN attribute should be applied to a function or static [unused_attributes]\n+//~| WARN this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n mod link_section {\n+    //~^ NOTE not a function or static\n+\n     mod inner { #![link_section=\"1800\"] }\n+    //~^ WARN attribute should be applied to a function or static [unused_attributes]\n+    //~| WARN this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+    //~| NOTE not a function or static\n \n     #[link_section = \"1800\"] fn f() { }\n \n     #[link_section = \"1800\"] struct S;\n+    //~^ WARN attribute should be applied to a function or static [unused_attributes]\n+    //~| WARN this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+    //~| NOTE not a function or static\n \n     #[link_section = \"1800\"] type T = S;\n+    //~^ WARN attribute should be applied to a function or static [unused_attributes]\n+    //~| WARN this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+    //~| NOTE not a function or static\n \n     #[link_section = \"1800\"] impl S { }\n+    //~^ WARN attribute should be applied to a function or static [unused_attributes]\n+    //~| WARN this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+    //~| NOTE not a function or static\n+}\n+\n+\n+// Note that this is a `check-pass` test, so it\n+// will never invoke the linker. These are here nonetheless to point\n+// out that we allow them at non-crate-level (though I do not know\n+// whether they have the same effect here as at crate-level).\n+\n+#[link()]\n+mod link {\n+    mod inner { #![link()] }\n+\n+    #[link()] fn f() { }\n+\n+    #[link()] struct S;\n+\n+    #[link()] type T = S;\n+\n+    #[link()] impl S { }\n }\n \n struct StructForDeprecated;"}, {"sha": "461c1bd610794a4f57486cdc53b813e818c0074c", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-builtin-attrs.stderr", "status": "modified", "additions": 424, "deletions": 241, "changes": 665, "blob_url": "https://github.com/rust-lang/rust/blob/dbb73f8f79ab176a897d5a95e696adb71b957cbe/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbb73f8f79ab176a897d5a95e696adb71b957cbe/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr?ref=dbb73f8f79ab176a897d5a95e696adb71b957cbe", "patch": "@@ -1,1238 +1,1421 @@\n warning: unknown lint: `x5400`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:45:9\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:50:9\n    |\n LL | #![warn(x5400)]\n    |         ^^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:36:28\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:37:28\n    |\n LL | #![warn(unused_attributes, unknown_lints)]\n    |                            ^^^^^^^^^^^^^\n \n warning: unknown lint: `x5300`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:46:10\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:51:10\n    |\n LL | #![allow(x5300)]\n    |          ^^^^^\n \n warning: unknown lint: `x5200`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:47:11\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:52:11\n    |\n LL | #![forbid(x5200)]\n    |           ^^^^^\n \n warning: unknown lint: `x5100`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:48:9\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:53:9\n    |\n LL | #![deny(x5100)]\n    |         ^^^^^\n \n warning: unknown lint: `x5400`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:105:8\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:116:8\n    |\n LL | #[warn(x5400)]\n    |        ^^^^^\n \n warning: unknown lint: `x5400`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:108:25\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:119:25\n    |\n LL |     mod inner { #![warn(x5400)] }\n    |                         ^^^^^\n \n warning: unknown lint: `x5400`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:111:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:122:12\n    |\n LL |     #[warn(x5400)] fn f() { }\n    |            ^^^^^\n \n warning: unknown lint: `x5400`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:114:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:125:12\n    |\n LL |     #[warn(x5400)] struct S;\n    |            ^^^^^\n \n warning: unknown lint: `x5400`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:117:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:128:12\n    |\n LL |     #[warn(x5400)] type T = S;\n    |            ^^^^^\n \n warning: unknown lint: `x5400`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:120:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:131:12\n    |\n LL |     #[warn(x5400)] impl S { }\n    |            ^^^^^\n \n warning: unknown lint: `x5300`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:124:9\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:135:9\n    |\n LL | #[allow(x5300)]\n    |         ^^^^^\n \n warning: unknown lint: `x5300`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:127:26\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:138:26\n    |\n LL |     mod inner { #![allow(x5300)] }\n    |                          ^^^^^\n \n warning: unknown lint: `x5300`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:130:13\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:141:13\n    |\n LL |     #[allow(x5300)] fn f() { }\n    |             ^^^^^\n \n warning: unknown lint: `x5300`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:133:13\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:144:13\n    |\n LL |     #[allow(x5300)] struct S;\n    |             ^^^^^\n \n warning: unknown lint: `x5300`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:136:13\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:147:13\n    |\n LL |     #[allow(x5300)] type T = S;\n    |             ^^^^^\n \n warning: unknown lint: `x5300`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:139:13\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:150:13\n    |\n LL |     #[allow(x5300)] impl S { }\n    |             ^^^^^\n \n warning: unknown lint: `x5200`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:143:10\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:154:10\n    |\n LL | #[forbid(x5200)]\n    |          ^^^^^\n \n warning: unknown lint: `x5200`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:146:27\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:157:27\n    |\n LL |     mod inner { #![forbid(x5200)] }\n    |                           ^^^^^\n \n warning: unknown lint: `x5200`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:149:14\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:160:14\n    |\n LL |     #[forbid(x5200)] fn f() { }\n    |              ^^^^^\n \n warning: unknown lint: `x5200`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:152:14\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:163:14\n    |\n LL |     #[forbid(x5200)] struct S;\n    |              ^^^^^\n \n warning: unknown lint: `x5200`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:155:14\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:166:14\n    |\n LL |     #[forbid(x5200)] type T = S;\n    |              ^^^^^\n \n warning: unknown lint: `x5200`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:158:14\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:169:14\n    |\n LL |     #[forbid(x5200)] impl S { }\n    |              ^^^^^\n \n warning: unknown lint: `x5100`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:162:8\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:173:8\n    |\n LL | #[deny(x5100)]\n    |        ^^^^^\n \n warning: unknown lint: `x5100`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:165:25\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:176:25\n    |\n LL |     mod inner { #![deny(x5100)] }\n    |                         ^^^^^\n \n warning: unknown lint: `x5100`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:168:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:179:12\n    |\n LL |     #[deny(x5100)] fn f() { }\n    |            ^^^^^\n \n warning: unknown lint: `x5100`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:171:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:182:12\n    |\n LL |     #[deny(x5100)] struct S;\n    |            ^^^^^\n \n warning: unknown lint: `x5100`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:174:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:185:12\n    |\n LL |     #[deny(x5100)] type T = S;\n    |            ^^^^^\n \n warning: unknown lint: `x5100`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:177:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:188:12\n    |\n LL |     #[deny(x5100)] impl S { }\n    |            ^^^^^\n \n warning: `#[macro_escape]` is a deprecated synonym for `#[macro_use]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:466:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:479:1\n    |\n LL | #[macro_escape]\n    | ^^^^^^^^^^^^^^^\n \n warning: `#[macro_escape]` is a deprecated synonym for `#[macro_use]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:469:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:482:17\n    |\n LL |     mod inner { #![macro_escape] }\n    |                 ^^^^^^^^^^^^^^^^\n    |\n    = help: try an outer attribute: `#[macro_use]`\n \n warning: use of deprecated attribute `plugin_registrar`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:221:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:233:17\n    |\n LL |     mod inner { #![plugin_registrar] }\n    |                 ^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n    |\n    = note: `#[warn(deprecated)]` on by default\n \n warning: use of deprecated attribute `plugin_registrar`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:227:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:241:5\n    |\n LL |     #[plugin_registrar] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n \n warning: use of deprecated attribute `plugin_registrar`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:231:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:246:5\n    |\n LL |     #[plugin_registrar] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n \n warning: use of deprecated attribute `plugin_registrar`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:235:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:251:5\n    |\n LL |     #[plugin_registrar] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n \n warning: use of deprecated attribute `plugin_registrar`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:217:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:228:1\n    |\n LL | #[plugin_registrar]\n    | ^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n \n warning: use of deprecated attribute `plugin_registrar`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:40:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:43:1\n    |\n LL | #![plugin_registrar]\n    | ^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n \n warning: use of deprecated attribute `crate_id`: no longer used.\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:91:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:96:1\n    |\n LL | #![crate_id = \"10\"]\n    | ^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n \n warning: use of deprecated attribute `no_start`: no longer used.\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:96:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:105:1\n    |\n LL | #![no_start]\n    | ^^^^^^^^^^^^ help: remove this attribute\n \n+warning: attribute should be applied to a function or static\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:374:1\n+   |\n+LL |   #[no_mangle]\n+   |   ^^^^^^^^^^^^\n+...\n+LL | / mod no_mangle {\n+LL | |\n+LL | |     mod inner { #![no_mangle] }\n+LL | |\n+...  |\n+LL | |\n+LL | | }\n+   | |_- not a function or static\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:37:9\n+   |\n+LL | #![warn(unused_attributes, unknown_lints)]\n+   |         ^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+\n+warning: attribute should be applied to a function\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:541:1\n+   |\n+LL |   #[cold]\n+   |   ^^^^^^^\n+...\n+LL | / mod cold {\n+LL | |\n+LL | |\n+LL | |     mod inner { #![cold] }\n+...  |\n+LL | |\n+LL | | }\n+   | |_- not a function\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+\n+warning: attribute should be applied to a foreign function or static\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:570:1\n+   |\n+LL |   #[link_name = \"1900\"]\n+   |   ^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL | / mod link_name {\n+LL | |\n+LL | |\n+LL | |     #[link_name = \"1900\"]\n+...  |\n+LL | |\n+LL | | }\n+   | |_- not a foreign function or static\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+\n+warning: attribute should be applied to a function or static\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:609:1\n+   |\n+LL |   #[link_section = \"1800\"]\n+   |   ^^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL | / mod link_section {\n+LL | |\n+LL | |\n+LL | |     mod inner { #![link_section=\"1800\"] }\n+...  |\n+LL | |\n+LL | | }\n+   | |_- not a function or static\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+\n+warning: attribute should be applied to a function or static\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:379:17\n+   |\n+LL |     mod inner { #![no_mangle] }\n+   |     ------------^^^^^^^^^^^^^-- not a function or static\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+\n+warning: attribute should be applied to a function or static\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:386:5\n+   |\n+LL |     #[no_mangle] struct S;\n+   |     ^^^^^^^^^^^^ --------- not a function or static\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+\n+warning: attribute should be applied to a function or static\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:391:5\n+   |\n+LL |     #[no_mangle] type T = S;\n+   |     ^^^^^^^^^^^^ ----------- not a function or static\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+\n+warning: attribute should be applied to a function or static\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:396:5\n+   |\n+LL |     #[no_mangle] impl S { }\n+   |     ^^^^^^^^^^^^ ---------- not a function or static\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+\n+warning: attribute should be applied to a function\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:547:17\n+   |\n+LL |     mod inner { #![cold] }\n+   |     ------------^^^^^^^^-- not a function\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+\n+warning: attribute should be applied to a function\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:554:5\n+   |\n+LL |     #[cold] struct S;\n+   |     ^^^^^^^ --------- not a function\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+\n+warning: attribute should be applied to a function\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:559:5\n+   |\n+LL |     #[cold] type T = S;\n+   |     ^^^^^^^ ----------- not a function\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+\n+warning: attribute should be applied to a function\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:564:5\n+   |\n+LL |     #[cold] impl S { }\n+   |     ^^^^^^^ ---------- not a function\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+\n+warning: attribute should be applied to a foreign function or static\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:576:5\n+   |\n+LL |     #[link_name = \"1900\"]\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL |     extern { }\n+   |     ---------- not a foreign function or static\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+help: try `#[link(name = \"1900\")]` instead\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:576:5\n+   |\n+LL |     #[link_name = \"1900\"]\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: attribute should be applied to a foreign function or static\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:583:17\n+   |\n+LL |     mod inner { #![link_name=\"1900\"] }\n+   |     ------------^^^^^^^^^^^^^^^^^^^^-- not a foreign function or static\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+\n+warning: attribute should be applied to a foreign function or static\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:588:5\n+   |\n+LL |     #[link_name = \"1900\"] fn f() { }\n+   |     ^^^^^^^^^^^^^^^^^^^^^ ---------- not a foreign function or static\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+\n+warning: attribute should be applied to a foreign function or static\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:593:5\n+   |\n+LL |     #[link_name = \"1900\"] struct S;\n+   |     ^^^^^^^^^^^^^^^^^^^^^ --------- not a foreign function or static\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+\n+warning: attribute should be applied to a foreign function or static\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:598:5\n+   |\n+LL |     #[link_name = \"1900\"] type T = S;\n+   |     ^^^^^^^^^^^^^^^^^^^^^ ----------- not a foreign function or static\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+\n+warning: attribute should be applied to a foreign function or static\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:603:5\n+   |\n+LL |     #[link_name = \"1900\"] impl S { }\n+   |     ^^^^^^^^^^^^^^^^^^^^^ ---------- not a foreign function or static\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+\n+warning: attribute should be applied to a function or static\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:615:17\n+   |\n+LL |     mod inner { #![link_section=\"1800\"] }\n+   |     ------------^^^^^^^^^^^^^^^^^^^^^^^-- not a function or static\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+\n+warning: attribute should be applied to a function or static\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:622:5\n+   |\n+LL |     #[link_section = \"1800\"] struct S;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ --------- not a function or static\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+\n+warning: attribute should be applied to a function or static\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:627:5\n+   |\n+LL |     #[link_section = \"1800\"] type T = S;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ ----------- not a function or static\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+\n+warning: attribute should be applied to a function or static\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:632:5\n+   |\n+LL |     #[link_section = \"1800\"] impl S { }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ ---------- not a function or static\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+\n warning: the feature `rust1` has been stable since 1.0.0 and no longer requires an attribute to enable\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:94:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:101:12\n    |\n LL | #![feature(rust1)]\n    |            ^^^^^\n    |\n    = note: `#[warn(stable_features)]` on by default\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:185:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:196:5\n    |\n LL |     #[macro_use] fn f() { }\n    |     ^^^^^^^^^^^^\n-   |\n-note: the lint level is defined here\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:36:9\n-   |\n-LL | #![warn(unused_attributes, unknown_lints)]\n-   |         ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:188:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:199:5\n    |\n LL |     #[macro_use] struct S;\n    |     ^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:191:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:202:5\n    |\n LL |     #[macro_use] type T = S;\n    |     ^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:194:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:205:5\n    |\n LL |     #[macro_use] impl S { }\n    |     ^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:201:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:212:17\n    |\n LL |     mod inner { #![macro_export] }\n    |                 ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:204:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:215:5\n    |\n LL |     #[macro_export] fn f() { }\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:207:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:218:5\n    |\n LL |     #[macro_export] struct S;\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:210:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:221:5\n    |\n LL |     #[macro_export] type T = S;\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:213:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:224:5\n    |\n LL |     #[macro_export] impl S { }\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:198:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:209:1\n    |\n LL | #[macro_export]\n    | ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:221:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:233:17\n    |\n LL |     mod inner { #![plugin_registrar] }\n    |                 ^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:227:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:241:5\n    |\n LL |     #[plugin_registrar] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:231:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:246:5\n    |\n LL |     #[plugin_registrar] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:235:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:251:5\n    |\n LL |     #[plugin_registrar] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:217:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:228:1\n    |\n LL | #[plugin_registrar]\n    | ^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:243:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:260:17\n    |\n LL |     mod inner { #![main] }\n    |                 ^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:248:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:265:5\n    |\n LL |     #[main] struct S;\n    |     ^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:251:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:268:5\n    |\n LL |     #[main] type T = S;\n    |     ^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:254:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:271:5\n    |\n LL |     #[main] impl S { }\n    |     ^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:240:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:257:1\n    |\n LL | #[main]\n    | ^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:261:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:278:17\n    |\n LL |     mod inner { #![start] }\n    |                 ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:266:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:283:5\n    |\n LL |     #[start] struct S;\n    |     ^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:269:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:286:5\n    |\n LL |     #[start] type T = S;\n    |     ^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:272:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:289:5\n    |\n LL |     #[start] impl S { }\n    |     ^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:258:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:275:1\n    |\n LL | #[start]\n    | ^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:325:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:342:5\n    |\n LL |     #[path = \"3800\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:328:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:345:5\n    |\n LL |     #[path = \"3800\"]  struct S;\n    |     ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:331:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:348:5\n    |\n LL |     #[path = \"3800\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:334:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:351:5\n    |\n LL |     #[path = \"3800\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:341:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:358:17\n    |\n LL |     mod inner { #![automatically_derived] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:344:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:361:5\n    |\n LL |     #[automatically_derived] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:347:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:364:5\n    |\n LL |     #[automatically_derived] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:350:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:367:5\n    |\n LL |     #[automatically_derived] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:353:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:370:5\n    |\n LL |     #[automatically_derived] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:338:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:355:1\n    |\n LL | #[automatically_derived]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:373:17\n-   |\n-LL |     mod inner { #![no_link] }\n-   |                 ^^^^^^^^^^^\n-\n-warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:376:5\n-   |\n-LL |     #[no_link] fn f() { }\n-   |     ^^^^^^^^^^\n-\n-warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:379:5\n-   |\n-LL |     #[no_link] struct S;\n-   |     ^^^^^^^^^^\n-\n-warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:382:5\n-   |\n-LL |     #[no_link]type T = S;\n-   |     ^^^^^^^^^^\n-\n-warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:385:5\n-   |\n-LL |     #[no_link] impl S { }\n-   |     ^^^^^^^^^^\n-\n-warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:370:1\n-   |\n-LL | #[no_link]\n-   | ^^^^^^^^^^\n-\n-warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:392:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:405:17\n    |\n LL |     mod inner { #![should_panic] }\n    |                 ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:395:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:408:5\n    |\n LL |     #[should_panic] fn f() { }\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:398:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:411:5\n    |\n LL |     #[should_panic] struct S;\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:401:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:414:5\n    |\n LL |     #[should_panic] type T = S;\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:404:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:417:5\n    |\n LL |     #[should_panic] impl S { }\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:389:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:402:1\n    |\n LL | #[should_panic]\n    | ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:411:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:424:17\n    |\n LL |     mod inner { #![ignore] }\n    |                 ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:414:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:427:5\n    |\n LL |     #[ignore] fn f() { }\n    |     ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:417:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:430:5\n    |\n LL |     #[ignore] struct S;\n    |     ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:420:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:433:5\n    |\n LL |     #[ignore] type T = S;\n    |     ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:423:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:436:5\n    |\n LL |     #[ignore] impl S { }\n    |     ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:408:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:421:1\n    |\n LL | #[ignore]\n    | ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:430:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:443:17\n    |\n LL |     mod inner { #![no_implicit_prelude] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:433:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:446:5\n    |\n LL |     #[no_implicit_prelude] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:436:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:449:5\n    |\n LL |     #[no_implicit_prelude] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:439:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:452:5\n    |\n LL |     #[no_implicit_prelude] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:442:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:455:5\n    |\n LL |     #[no_implicit_prelude] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:427:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:440:1\n    |\n LL | #[no_implicit_prelude]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:449:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:462:17\n    |\n LL |     mod inner { #![reexport_test_harness_main=\"2900\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:452:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:465:5\n    |\n LL |     #[reexport_test_harness_main = \"2900\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:455:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:468:5\n    |\n LL |     #[reexport_test_harness_main = \"2900\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:458:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:471:5\n    |\n LL |     #[reexport_test_harness_main = \"2900\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:461:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:474:5\n    |\n LL |     #[reexport_test_harness_main = \"2900\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:446:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:459:1\n    |\n LL | #[reexport_test_harness_main = \"2900\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:472:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:486:5\n    |\n LL |     #[macro_escape] fn f() { }\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:475:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:489:5\n    |\n LL |     #[macro_escape] struct S;\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:478:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:492:5\n    |\n LL |     #[macro_escape] type T = S;\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:481:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:495:5\n    |\n LL |     #[macro_escape] impl S { }\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:489:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:503:17\n    |\n LL |     mod inner { #![no_std] }\n    |                 ^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:489:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:503:17\n    |\n LL |     mod inner { #![no_std] }\n    |                 ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:493:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:507:5\n    |\n LL |     #[no_std] fn f() { }\n    |     ^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:493:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:507:5\n    |\n LL |     #[no_std] fn f() { }\n    |     ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:497:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:511:5\n    |\n LL |     #[no_std] struct S;\n    |     ^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:497:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:511:5\n    |\n LL |     #[no_std] struct S;\n    |     ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:501:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:515:5\n    |\n LL |     #[no_std] type T = S;\n    |     ^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:501:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:515:5\n    |\n LL |     #[no_std] type T = S;\n    |     ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:505:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:519:5\n    |\n LL |     #[no_std] impl S { }\n    |     ^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:505:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:519:5\n    |\n LL |     #[no_std] impl S { }\n    |     ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:485:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:499:1\n    |\n LL | #[no_std]\n    | ^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:485:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:499:1\n    |\n LL | #[no_std]\n    | ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:644:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:704:17\n    |\n LL |     mod inner { #![crate_name=\"0900\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:644:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:704:17\n    |\n LL |     mod inner { #![crate_name=\"0900\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:648:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:708:5\n    |\n LL |     #[crate_name = \"0900\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:648:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:708:5\n    |\n LL |     #[crate_name = \"0900\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:652:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:712:5\n    |\n LL |     #[crate_name = \"0900\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:652:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:712:5\n    |\n LL |     #[crate_name = \"0900\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:656:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:716:5\n    |\n LL |     #[crate_name = \"0900\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:656:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:716:5\n    |\n LL |     #[crate_name = \"0900\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:660:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:720:5\n    |\n LL |     #[crate_name = \"0900\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:660:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:720:5\n    |\n LL |     #[crate_name = \"0900\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:640:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:700:1\n    |\n LL | #[crate_name = \"0900\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:640:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:700:1\n    |\n LL | #[crate_name = \"0900\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:669:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:729:17\n    |\n LL |     mod inner { #![crate_type=\"0800\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:669:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:729:17\n    |\n LL |     mod inner { #![crate_type=\"0800\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:673:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:733:5\n    |\n LL |     #[crate_type = \"0800\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:673:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:733:5\n    |\n LL |     #[crate_type = \"0800\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:677:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:737:5\n    |\n LL |     #[crate_type = \"0800\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:677:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:737:5\n    |\n LL |     #[crate_type = \"0800\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:681:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:741:5\n    |\n LL |     #[crate_type = \"0800\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:681:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:741:5\n    |\n LL |     #[crate_type = \"0800\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:685:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:745:5\n    |\n LL |     #[crate_type = \"0800\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:685:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:745:5\n    |\n LL |     #[crate_type = \"0800\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:665:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:725:1\n    |\n LL | #[crate_type = \"0800\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:665:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:725:1\n    |\n LL | #[crate_type = \"0800\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:694:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:754:17\n    |\n LL |     mod inner { #![feature(x0600)] }\n    |                 ^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:694:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:754:17\n    |\n LL |     mod inner { #![feature(x0600)] }\n    |                 ^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:698:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:758:5\n    |\n LL |     #[feature(x0600)] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:698:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:758:5\n    |\n LL |     #[feature(x0600)] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:702:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:762:5\n    |\n LL |     #[feature(x0600)] struct S;\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:702:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:762:5\n    |\n LL |     #[feature(x0600)] struct S;\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:706:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:766:5\n    |\n LL |     #[feature(x0600)] type T = S;\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:706:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:766:5\n    |\n LL |     #[feature(x0600)] type T = S;\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:710:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:770:5\n    |\n LL |     #[feature(x0600)] impl S { }\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:710:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:770:5\n    |\n LL |     #[feature(x0600)] impl S { }\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:690:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:750:1\n    |\n LL | #[feature(x0600)]\n    | ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:690:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:750:1\n    |\n LL | #[feature(x0600)]\n    | ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:720:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:780:17\n    |\n LL |     mod inner { #![no_main] }\n    |                 ^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:720:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:780:17\n    |\n LL |     mod inner { #![no_main] }\n    |                 ^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:724:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:784:5\n    |\n LL |     #[no_main] fn f() { }\n    |     ^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:724:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:784:5\n    |\n LL |     #[no_main] fn f() { }\n    |     ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:728:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:788:5\n    |\n LL |     #[no_main] struct S;\n    |     ^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:728:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:788:5\n    |\n LL |     #[no_main] struct S;\n    |     ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:732:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:792:5\n    |\n LL |     #[no_main] type T = S;\n    |     ^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:732:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:792:5\n    |\n LL |     #[no_main] type T = S;\n    |     ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:736:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:796:5\n    |\n LL |     #[no_main] impl S { }\n    |     ^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:736:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:796:5\n    |\n LL |     #[no_main] impl S { }\n    |     ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:716:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:776:1\n    |\n LL | #[no_main]\n    | ^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:716:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:776:1\n    |\n LL | #[no_main]\n    | ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:758:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:818:17\n    |\n LL |     mod inner { #![recursion_limit=\"0200\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:758:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:818:17\n    |\n LL |     mod inner { #![recursion_limit=\"0200\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:762:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:822:5\n    |\n LL |     #[recursion_limit=\"0200\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:762:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:822:5\n    |\n LL |     #[recursion_limit=\"0200\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:766:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:826:5\n    |\n LL |     #[recursion_limit=\"0200\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:766:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:826:5\n    |\n LL |     #[recursion_limit=\"0200\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:770:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:830:5\n    |\n LL |     #[recursion_limit=\"0200\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:770:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:830:5\n    |\n LL |     #[recursion_limit=\"0200\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:774:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:834:5\n    |\n LL |     #[recursion_limit=\"0200\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:774:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:834:5\n    |\n LL |     #[recursion_limit=\"0200\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:754:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:814:1\n    |\n LL | #[recursion_limit=\"0200\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:754:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:814:1\n    |\n LL | #[recursion_limit=\"0200\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:783:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:843:17\n    |\n LL |     mod inner { #![type_length_limit=\"0100\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:783:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:843:17\n    |\n LL |     mod inner { #![type_length_limit=\"0100\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:787:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:847:5\n    |\n LL |     #[type_length_limit=\"0100\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:787:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:847:5\n    |\n LL |     #[type_length_limit=\"0100\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:791:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:851:5\n    |\n LL |     #[type_length_limit=\"0100\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:791:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:851:5\n    |\n LL |     #[type_length_limit=\"0100\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:795:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:855:5\n    |\n LL |     #[type_length_limit=\"0100\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:795:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:855:5\n    |\n LL |     #[type_length_limit=\"0100\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:799:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:859:5\n    |\n LL |     #[type_length_limit=\"0100\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:799:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:859:5\n    |\n LL |     #[type_length_limit=\"0100\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:779:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:839:1\n    |\n LL | #[type_length_limit=\"0100\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:779:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:839:1\n    |\n LL | #[type_length_limit=\"0100\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:40:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:43:1\n    |\n LL | #![plugin_registrar]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:50:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:55:1\n    |\n LL | #![macro_export]\n    | ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:53:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:58:1\n    |\n LL | #![main]\n    | ^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:54:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:59:1\n    |\n LL | #![start]\n    | ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:57:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:62:1\n    |\n LL | #![repr()]\n    | ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:59:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:64:1\n    |\n LL | #![path = \"3800\"]\n    | ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:60:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:65:1\n    |\n LL | #![automatically_derived]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:62:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:67:1\n    |\n LL | #![no_link]\n    | ^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:64:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:69:1\n    |\n LL | #![should_panic]\n    | ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:65:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:70:1\n    |\n LL | #![ignore]\n    | ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:71:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:76:1\n    |\n LL | #![proc_macro_derive()]\n    | ^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: 203 warnings emitted\n+warning: 219 warnings emitted\n "}, {"sha": "80c602eb00afb61503e7dca2a5ef9408cd0d41bf", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-inline.rs", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/989190874fe2a0e9877ce4f02a6c60641e3d42a3/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989190874fe2a0e9877ce4f02a6c60641e3d42a3/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-inline.rs?ref=989190874fe2a0e9877ce4f02a6c60641e3d42a3", "patch": "@@ -1,31 +0,0 @@\n-// This is testing whether `#[inline]` signals an error or warning\n-// when put in \"weird\" places.\n-//\n-// (This file sits on its own because it actually signals an error,\n-// which would mess up the treatment of other cases in\n-// issue-43106-gating-of-builtin-attrs.rs)\n-\n-// Crate-level is accepted, though it is almost certainly unused?\n-#![inline]\n-\n-#[inline]\n-//~^ ERROR attribute should be applied to function or closure\n-mod inline {\n-    mod inner { #![inline] }\n-    //~^ ERROR attribute should be applied to function or closure\n-\n-    #[inline = \"2100\"] fn f() { }\n-    //~^ ERROR attribute must be of the form\n-    //~| WARN this was previously accepted\n-\n-    #[inline] struct S;\n-    //~^ ERROR attribute should be applied to function or closure\n-\n-    #[inline] type T = S;\n-    //~^ ERROR attribute should be applied to function or closure\n-\n-    #[inline] impl S { }\n-    //~^ ERROR attribute should be applied to function or closure\n-}\n-\n-fn main() {}"}, {"sha": "0987937192fe21f9ea681bfb12770f69ff9deedf", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-inline.stderr", "status": "removed", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/989190874fe2a0e9877ce4f02a6c60641e3d42a3/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-inline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989190874fe2a0e9877ce4f02a6c60641e3d42a3/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-inline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-inline.stderr?ref=989190874fe2a0e9877ce4f02a6c60641e3d42a3", "patch": "@@ -1,52 +0,0 @@\n-error: attribute must be of the form `#[inline]` or `#[inline(always|never)]`\n-  --> $DIR/issue-43106-gating-of-inline.rs:17:5\n-   |\n-LL |     #[inline = \"2100\"] fn f() { }\n-   |     ^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[deny(ill_formed_attribute_input)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #57571 <https://github.com/rust-lang/rust/issues/57571>\n-\n-error[E0518]: attribute should be applied to function or closure\n-  --> $DIR/issue-43106-gating-of-inline.rs:11:1\n-   |\n-LL |   #[inline]\n-   |   ^^^^^^^^^\n-LL |\n-LL | / mod inline {\n-LL | |     mod inner { #![inline] }\n-LL | |\n-LL | |\n-...  |\n-LL | |\n-LL | | }\n-   | |_- not a function or closure\n-\n-error[E0518]: attribute should be applied to function or closure\n-  --> $DIR/issue-43106-gating-of-inline.rs:14:17\n-   |\n-LL |     mod inner { #![inline] }\n-   |     ------------^^^^^^^^^^-- not a function or closure\n-\n-error[E0518]: attribute should be applied to function or closure\n-  --> $DIR/issue-43106-gating-of-inline.rs:21:5\n-   |\n-LL |     #[inline] struct S;\n-   |     ^^^^^^^^^ --------- not a function or closure\n-\n-error[E0518]: attribute should be applied to function or closure\n-  --> $DIR/issue-43106-gating-of-inline.rs:24:5\n-   |\n-LL |     #[inline] type T = S;\n-   |     ^^^^^^^^^ ----------- not a function or closure\n-\n-error[E0518]: attribute should be applied to function or closure\n-  --> $DIR/issue-43106-gating-of-inline.rs:27:5\n-   |\n-LL |     #[inline] impl S { }\n-   |     ^^^^^^^^^ ---------- not a function or closure\n-\n-error: aborting due to 6 previous errors\n-\n-For more information about this error, try `rustc --explain E0518`."}, {"sha": "9b7c4485418537d5b3492d53975838d8da3bbfab", "filename": "src/test/ui/issues/issue-2214.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbb73f8f79ab176a897d5a95e696adb71b957cbe/src%2Ftest%2Fui%2Fissues%2Fissue-2214.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbb73f8f79ab176a897d5a95e696adb71b957cbe/src%2Ftest%2Fui%2Fissues%2Fissue-2214.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2214.rs?ref=dbb73f8f79ab176a897d5a95e696adb71b957cbe", "patch": "@@ -23,7 +23,6 @@ fn lgamma(n: c_double, value: &mut isize) -> c_double {\n mod m {\n     use libc::{c_double, c_int};\n \n-    #[link_name = \"m\"]\n     extern {\n         #[cfg(any(all(unix, not(target_os = \"vxworks\")), target_os = \"cloudabi\"))]\n         #[link_name=\"lgamma_r\"]"}, {"sha": "21108da5006141eabb4df574743c230f03f009dd", "filename": "src/test/ui/issues/issue-47725.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/dbb73f8f79ab176a897d5a95e696adb71b957cbe/src%2Ftest%2Fui%2Fissues%2Fissue-47725.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbb73f8f79ab176a897d5a95e696adb71b957cbe/src%2Ftest%2Fui%2Fissues%2Fissue-47725.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47725.rs?ref=dbb73f8f79ab176a897d5a95e696adb71b957cbe", "patch": "@@ -0,0 +1,29 @@\n+// ignore-tidy-linelength\n+#![warn(unused_attributes)] //~ NOTE lint level is defined here\n+\n+#[link_name = \"foo\"]\n+//~^ WARN attribute should be applied to a foreign function or static [unused_attributes]\n+//~| WARN this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+struct Foo; //~ NOTE not a foreign function or static\n+\n+#[link_name = \"foobar\"]\n+//~^ WARN attribute should be applied to a foreign function or static [unused_attributes]\n+//~| WARN this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+//~| HELP try `#[link(name = \"foobar\")]` instead\n+extern \"C\" {\n+    fn foo() -> u32;\n+}\n+//~^^^ NOTE not a foreign function or static\n+\n+#[link_name]\n+//~^ ERROR malformed `link_name` attribute input\n+//~| HELP must be of the form\n+//~| WARN attribute should be applied to a foreign function or static [unused_attributes]\n+//~| WARN this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+//~| HELP try `#[link(name = \"...\")]` instead\n+extern \"C\" {\n+    fn bar() -> u32;\n+}\n+//~^^^ NOTE not a foreign function or static\n+\n+fn main() {}"}, {"sha": "b1e8d3292eb93480477c375dec1cdec6388be0d6", "filename": "src/test/ui/issues/issue-47725.stderr", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/dbb73f8f79ab176a897d5a95e696adb71b957cbe/src%2Ftest%2Fui%2Fissues%2Fissue-47725.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbb73f8f79ab176a897d5a95e696adb71b957cbe/src%2Ftest%2Fui%2Fissues%2Fissue-47725.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47725.stderr?ref=dbb73f8f79ab176a897d5a95e696adb71b957cbe", "patch": "@@ -0,0 +1,60 @@\n+error: malformed `link_name` attribute input\n+  --> $DIR/issue-47725.rs:18:1\n+   |\n+LL | #[link_name]\n+   | ^^^^^^^^^^^^ help: must be of the form: `#[link_name = \"name\"]`\n+\n+warning: attribute should be applied to a foreign function or static\n+  --> $DIR/issue-47725.rs:4:1\n+   |\n+LL | #[link_name = \"foo\"]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+...\n+LL | struct Foo;\n+   | ----------- not a foreign function or static\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-47725.rs:2:9\n+   |\n+LL | #![warn(unused_attributes)]\n+   |         ^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+\n+warning: attribute should be applied to a foreign function or static\n+  --> $DIR/issue-47725.rs:9:1\n+   |\n+LL |   #[link_name = \"foobar\"]\n+   |   ^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL | / extern \"C\" {\n+LL | |     fn foo() -> u32;\n+LL | | }\n+   | |_- not a foreign function or static\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+help: try `#[link(name = \"foobar\")]` instead\n+  --> $DIR/issue-47725.rs:9:1\n+   |\n+LL | #[link_name = \"foobar\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: attribute should be applied to a foreign function or static\n+  --> $DIR/issue-47725.rs:18:1\n+   |\n+LL |   #[link_name]\n+   |   ^^^^^^^^^^^^\n+...\n+LL | / extern \"C\" {\n+LL | |     fn bar() -> u32;\n+LL | | }\n+   | |_- not a foreign function or static\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+help: try `#[link(name = \"...\")]` instead\n+  --> $DIR/issue-47725.rs:18:1\n+   |\n+LL | #[link_name]\n+   | ^^^^^^^^^^^^\n+\n+error: aborting due to previous error; 3 warnings emitted\n+"}, {"sha": "3f0b8bc5e384eee5490f8c018245e5c2f5409cb7", "filename": "src/test/ui/issues/issue-54044.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dbb73f8f79ab176a897d5a95e696adb71b957cbe/src%2Ftest%2Fui%2Fissues%2Fissue-54044.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbb73f8f79ab176a897d5a95e696adb71b957cbe/src%2Ftest%2Fui%2Fissues%2Fissue-54044.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54044.rs?ref=dbb73f8f79ab176a897d5a95e696adb71b957cbe", "patch": "@@ -0,0 +1,14 @@\n+// ignore-tidy-linelength\n+#![deny(unused_attributes)] //~ NOTE lint level is defined here\n+\n+#[cold]\n+//~^ ERROR attribute should be applied to a function\n+//~| WARN this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+struct Foo; //~ NOTE not a function\n+\n+fn main() {\n+    #[cold]\n+    //~^ ERROR attribute should be applied to a function\n+    //~| WARN this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+    5; //~ NOTE not a function\n+}"}, {"sha": "a13e84bbee1a631a2f84565afb5f58eddfa9ae7e", "filename": "src/test/ui/issues/issue-54044.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/dbb73f8f79ab176a897d5a95e696adb71b957cbe/src%2Ftest%2Fui%2Fissues%2Fissue-54044.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbb73f8f79ab176a897d5a95e696adb71b957cbe/src%2Ftest%2Fui%2Fissues%2Fissue-54044.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54044.stderr?ref=dbb73f8f79ab176a897d5a95e696adb71b957cbe", "patch": "@@ -0,0 +1,29 @@\n+error: attribute should be applied to a function\n+  --> $DIR/issue-54044.rs:4:1\n+   |\n+LL | #[cold]\n+   | ^^^^^^^\n+...\n+LL | struct Foo;\n+   | ----------- not a function\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-54044.rs:2:9\n+   |\n+LL | #![deny(unused_attributes)]\n+   |         ^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+\n+error: attribute should be applied to a function\n+  --> $DIR/issue-54044.rs:10:5\n+   |\n+LL |     #[cold]\n+   |     ^^^^^^^\n+...\n+LL |     5;\n+   |     - not a function\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "f82eb338f4c68835a94f21697e469ae62ffd22c3", "filename": "src/test/ui/macros/issue-68060.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dbb73f8f79ab176a897d5a95e696adb71b957cbe/src%2Ftest%2Fui%2Fmacros%2Fissue-68060.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbb73f8f79ab176a897d5a95e696adb71b957cbe/src%2Ftest%2Fui%2Fmacros%2Fissue-68060.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-68060.rs?ref=dbb73f8f79ab176a897d5a95e696adb71b957cbe", "patch": "@@ -2,11 +2,13 @@ fn main() {\n     (0..)\n         .map(\n             #[target_feature(enable = \"\")]\n-            //~^ ERROR: the feature named `` is not valid for this target\n-            //~| ERROR: `#[target_feature(..)]` can only be applied to `unsafe` functions\n+            //~^ ERROR: attribute should be applied to a function\n+            //~| ERROR: the feature named `` is not valid for this target\n+            //~| NOTE: `` is not valid for this target\n             #[track_caller]\n-            //~^ ERROR: `#[track_caller]` requires Rust ABI\n+            //~^ ERROR: `#[track_caller]` requires Rust ABI [E0737]\n             |_| (),\n+            //~^ NOTE: not a function\n         )\n         .next();\n }"}, {"sha": "a01c3827bb5a553bd6959331daa3e18b2db4d1cf", "filename": "src/test/ui/macros/issue-68060.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dbb73f8f79ab176a897d5a95e696adb71b957cbe/src%2Ftest%2Fui%2Fmacros%2Fissue-68060.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbb73f8f79ab176a897d5a95e696adb71b957cbe/src%2Ftest%2Fui%2Fmacros%2Fissue-68060.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-68060.stderr?ref=dbb73f8f79ab176a897d5a95e696adb71b957cbe", "patch": "@@ -1,14 +1,11 @@\n-error[E0658]: `#[target_feature(..)]` can only be applied to `unsafe` functions\n+error: attribute should be applied to a function\n   --> $DIR/issue-68060.rs:4:13\n    |\n LL |             #[target_feature(enable = \"\")]\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n ...\n LL |             |_| (),\n-   |             ------ not an `unsafe` function\n-   |\n-   = note: see issue #69098 <https://github.com/rust-lang/rust/issues/69098> for more information\n-   = help: add `#![feature(target_feature_11)]` to the crate attributes to enable\n+   |             ------ not a function\n \n error: the feature named `` is not valid for this target\n   --> $DIR/issue-68060.rs:4:30\n@@ -17,12 +14,11 @@ LL |             #[target_feature(enable = \"\")]\n    |                              ^^^^^^^^^^^ `` is not valid for this target\n \n error[E0737]: `#[track_caller]` requires Rust ABI\n-  --> $DIR/issue-68060.rs:7:13\n+  --> $DIR/issue-68060.rs:8:13\n    |\n LL |             #[track_caller]\n    |             ^^^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0658, E0737.\n-For more information about an error, try `rustc --explain E0658`.\n+For more information about this error, try `rustc --explain E0737`."}, {"sha": "5ea7821554300958907045ee83c100290c447930", "filename": "src/test/ui/target-feature/invalid-attribute.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/dbb73f8f79ab176a897d5a95e696adb71b957cbe/src%2Ftest%2Fui%2Ftarget-feature%2Finvalid-attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbb73f8f79ab176a897d5a95e696adb71b957cbe/src%2Ftest%2Fui%2Ftarget-feature%2Finvalid-attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Finvalid-attribute.rs?ref=dbb73f8f79ab176a897d5a95e696adb71b957cbe", "patch": "@@ -13,6 +13,7 @@\n // ignore-sparc64\n \n #![feature(target_feature)]\n+#![warn(unused_attributes)]\n \n #[target_feature = \"+sse2\"]\n //~^ ERROR malformed `target_feature` attribute\n@@ -48,17 +49,20 @@ struct Foo;\n \n #[target_feature(enable = \"sse2\")]\n //~^ ERROR attribute should be applied to a function\n-enum Bar { }\n+enum Bar {}\n //~^ NOTE not a function\n \n #[target_feature(enable = \"sse2\")]\n //~^ ERROR attribute should be applied to a function\n-union Qux { f1: u16, f2: u16 }\n+union Qux {\n //~^ NOTE not a function\n+    f1: u16,\n+    f2: u16,\n+}\n \n #[target_feature(enable = \"sse2\")]\n //~^ ERROR attribute should be applied to a function\n-trait Baz { }\n+trait Baz {}\n //~^ NOTE not a function\n \n #[inline(always)]\n@@ -79,13 +83,16 @@ impl Quux for Foo {\n }\n \n fn main() {\n+    #[target_feature(enable = \"sse2\")]\n+    //~^ ERROR attribute should be applied to a function\n     unsafe {\n         foo();\n         bar();\n     }\n+    //~^^^^ NOTE not a function\n+\n     #[target_feature(enable = \"sse2\")]\n-    //~^ ERROR `#[target_feature(..)]` can only be applied to `unsafe` functions\n-    //~| NOTE see issue #69098\n+    //~^ ERROR attribute should be applied to a function\n     || {};\n-    //~^ NOTE not an `unsafe` function\n+    //~^ NOTE not a function\n }"}, {"sha": "8c8e24ccc55ccc7b19d7a98cdf15f2caf72efe01", "filename": "src/test/ui/target-feature/invalid-attribute.stderr", "status": "modified", "additions": 41, "deletions": 28, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/dbb73f8f79ab176a897d5a95e696adb71b957cbe/src%2Ftest%2Fui%2Ftarget-feature%2Finvalid-attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbb73f8f79ab176a897d5a95e696adb71b957cbe/src%2Ftest%2Fui%2Ftarget-feature%2Finvalid-attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Finvalid-attribute.stderr?ref=dbb73f8f79ab176a897d5a95e696adb71b957cbe", "patch": "@@ -1,29 +1,29 @@\n error: malformed `target_feature` attribute input\n-  --> $DIR/invalid-attribute.rs:17:1\n+  --> $DIR/invalid-attribute.rs:18:1\n    |\n LL | #[target_feature = \"+sse2\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#[target_feature(enable = \"name\")]`\n \n error: the feature named `foo` is not valid for this target\n-  --> $DIR/invalid-attribute.rs:19:18\n+  --> $DIR/invalid-attribute.rs:20:18\n    |\n LL | #[target_feature(enable = \"foo\")]\n    |                  ^^^^^^^^^^^^^^ `foo` is not valid for this target\n \n error: malformed `target_feature` attribute input\n-  --> $DIR/invalid-attribute.rs:22:18\n+  --> $DIR/invalid-attribute.rs:23:18\n    |\n LL | #[target_feature(bar)]\n    |                  ^^^ help: must be of the form: `enable = \"..\"`\n \n error: malformed `target_feature` attribute input\n-  --> $DIR/invalid-attribute.rs:24:18\n+  --> $DIR/invalid-attribute.rs:25:18\n    |\n LL | #[target_feature(disable = \"baz\")]\n    |                  ^^^^^^^^^^^^^^^ help: must be of the form: `enable = \"..\"`\n \n error[E0658]: `#[target_feature(..)]` can only be applied to `unsafe` functions\n-  --> $DIR/invalid-attribute.rs:28:1\n+  --> $DIR/invalid-attribute.rs:29:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -35,7 +35,7 @@ LL | fn bar() {}\n    = help: add `#![feature(target_feature_11)]` to the crate attributes to enable\n \n error: attribute should be applied to a function\n-  --> $DIR/invalid-attribute.rs:34:1\n+  --> $DIR/invalid-attribute.rs:35:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -44,7 +44,7 @@ LL | mod another {}\n    | -------------- not a function\n \n error: attribute should be applied to a function\n-  --> $DIR/invalid-attribute.rs:39:1\n+  --> $DIR/invalid-attribute.rs:40:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -53,7 +53,7 @@ LL | const FOO: usize = 7;\n    | --------------------- not a function\n \n error: attribute should be applied to a function\n-  --> $DIR/invalid-attribute.rs:44:1\n+  --> $DIR/invalid-attribute.rs:45:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -62,52 +62,65 @@ LL | struct Foo;\n    | ----------- not a function\n \n error: attribute should be applied to a function\n-  --> $DIR/invalid-attribute.rs:49:1\n+  --> $DIR/invalid-attribute.rs:50:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n LL |\n-LL | enum Bar { }\n-   | ------------ not a function\n+LL | enum Bar {}\n+   | ----------- not a function\n \n error: attribute should be applied to a function\n-  --> $DIR/invalid-attribute.rs:54:1\n+  --> $DIR/invalid-attribute.rs:55:1\n    |\n-LL | #[target_feature(enable = \"sse2\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |   #[target_feature(enable = \"sse2\")]\n+   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n LL |\n-LL | union Qux { f1: u16, f2: u16 }\n-   | ------------------------------ not a function\n+LL | / union Qux {\n+LL | |\n+LL | |     f1: u16,\n+LL | |     f2: u16,\n+LL | | }\n+   | |_- not a function\n \n error: attribute should be applied to a function\n-  --> $DIR/invalid-attribute.rs:59:1\n+  --> $DIR/invalid-attribute.rs:63:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n LL |\n-LL | trait Baz { }\n-   | ------------- not a function\n+LL | trait Baz {}\n+   | ------------ not a function\n \n error: cannot use `#[inline(always)]` with `#[target_feature]`\n-  --> $DIR/invalid-attribute.rs:64:1\n+  --> $DIR/invalid-attribute.rs:68:1\n    |\n LL | #[inline(always)]\n    | ^^^^^^^^^^^^^^^^^\n \n-error[E0658]: `#[target_feature(..)]` can only be applied to `unsafe` functions\n+error: attribute should be applied to a function\n   --> $DIR/invalid-attribute.rs:86:5\n    |\n+LL |       #[target_feature(enable = \"sse2\")]\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |\n+LL | /     unsafe {\n+LL | |         foo();\n+LL | |         bar();\n+LL | |     }\n+   | |_____- not a function\n+\n+error: attribute should be applied to a function\n+  --> $DIR/invalid-attribute.rs:94:5\n+   |\n LL |     #[target_feature(enable = \"sse2\")]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-...\n+LL |\n LL |     || {};\n-   |     ----- not an `unsafe` function\n-   |\n-   = note: see issue #69098 <https://github.com/rust-lang/rust/issues/69098> for more information\n-   = help: add `#![feature(target_feature_11)]` to the crate attributes to enable\n+   |     ----- not a function\n \n error[E0658]: `#[target_feature(..)]` can only be applied to `unsafe` functions\n-  --> $DIR/invalid-attribute.rs:74:5\n+  --> $DIR/invalid-attribute.rs:78:5\n    |\n LL |     #[target_feature(enable = \"sse2\")]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -118,6 +131,6 @@ LL |     fn foo() {}\n    = note: see issue #69098 <https://github.com/rust-lang/rust/issues/69098> for more information\n    = help: add `#![feature(target_feature_11)]` to the crate attributes to enable\n \n-error: aborting due to 14 previous errors\n+error: aborting due to 15 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}]}