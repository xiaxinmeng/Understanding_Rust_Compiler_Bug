{"sha": "a39ab7445c248548fe5c9fb2d1cc600eee311f24", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzOWFiNzQ0NWMyNDg1NDhmZTVjOWZiMmQxY2M2MDBlZWUzMTFmMjQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-21T00:17:48Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T21:01:29Z"}, "message": "librustc: De-`@mut` `RegionVarBindings::var_origins`", "tree": {"sha": "2385c180d599f6e6686529aca2a7fe1d118acc94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2385c180d599f6e6686529aca2a7fe1d118acc94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a39ab7445c248548fe5c9fb2d1cc600eee311f24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a39ab7445c248548fe5c9fb2d1cc600eee311f24", "html_url": "https://github.com/rust-lang/rust/commit/a39ab7445c248548fe5c9fb2d1cc600eee311f24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a39ab7445c248548fe5c9fb2d1cc600eee311f24/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1095e635340fa2e305a15bec3058c2dad62eb490", "url": "https://api.github.com/repos/rust-lang/rust/commits/1095e635340fa2e305a15bec3058c2dad62eb490", "html_url": "https://github.com/rust-lang/rust/commit/1095e635340fa2e305a15bec3058c2dad62eb490"}], "stats": {"total": 58, "additions": 36, "deletions": 22}, "files": [{"sha": "3985bb8b9be529004194b37ec626725527fcf716", "filename": "src/librustc/middle/typeck/infer/region_inference/mod.rs", "status": "modified", "additions": 36, "deletions": 22, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/a39ab7445c248548fe5c9fb2d1cc600eee311f24/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a39ab7445c248548fe5c9fb2d1cc600eee311f24/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs?ref=a39ab7445c248548fe5c9fb2d1cc600eee311f24", "patch": "@@ -88,7 +88,7 @@ type CombineMap = HashMap<TwoRegions, RegionVid>;\n \n pub struct RegionVarBindings {\n     tcx: ty::ctxt,\n-    var_origins: ~[RegionVariableOrigin],\n+    var_origins: RefCell<~[RegionVariableOrigin]>,\n     constraints: RefCell<HashMap<Constraint, SubregionOrigin>>,\n     lubs: RefCell<CombineMap>,\n     glbs: RefCell<CombineMap>,\n@@ -113,7 +113,7 @@ pub struct RegionVarBindings {\n pub fn RegionVarBindings(tcx: ty::ctxt) -> RegionVarBindings {\n     RegionVarBindings {\n         tcx: tcx,\n-        var_origins: ~[],\n+        var_origins: RefCell::new(~[]),\n         values: RefCell::new(None),\n         constraints: RefCell::new(HashMap::new()),\n         lubs: RefCell::new(HashMap::new()),\n@@ -163,8 +163,9 @@ impl RegionVarBindings {\n             match undo_item {\n               Snapshot => {}\n               AddVar(vid) => {\n-                assert_eq!(self.var_origins.len(), vid.to_uint() + 1);\n-                self.var_origins.pop();\n+                let mut var_origins = self.var_origins.borrow_mut();\n+                assert_eq!(var_origins.get().len(), vid.to_uint() + 1);\n+                var_origins.get().pop();\n               }\n               AddConstraint(ref constraint) => {\n                 let mut constraints = self.constraints.borrow_mut();\n@@ -183,12 +184,14 @@ impl RegionVarBindings {\n     }\n \n     pub fn num_vars(&self) -> uint {\n-        self.var_origins.len()\n+        let var_origins = self.var_origins.borrow();\n+        var_origins.get().len()\n     }\n \n     pub fn new_region_var(&mut self, origin: RegionVariableOrigin) -> RegionVid {\n         let id = self.num_vars();\n-        self.var_origins.push(origin);\n+        let mut var_origins = self.var_origins.borrow_mut();\n+        var_origins.get().push(origin);\n         let vid = RegionVid { id: id };\n         if self.in_snapshot() {\n             {\n@@ -344,10 +347,13 @@ impl RegionVarBindings {\n     pub fn resolve_var(&mut self, rid: RegionVid) -> ty::Region {\n         let values = self.values.borrow();\n         let v = match *values.get() {\n-            None => self.tcx.sess.span_bug(\n-                self.var_origins[rid.to_uint()].span(),\n-                format!(\"Attempt to resolve region variable before values have \\\n-                      been computed!\")),\n+            None => {\n+                let var_origins = self.var_origins.borrow();\n+                self.tcx.sess.span_bug(\n+                    var_origins.get()[rid.to_uint()].span(),\n+                    format!(\"Attempt to resolve region variable before \\\n+                             values have been computed!\"))\n+            }\n             Some(ref values) => values[rid.to_uint()]\n         };\n \n@@ -553,8 +559,9 @@ impl RegionVarBindings {\n           }\n \n           (ReInfer(ReVar(v_id)), _) | (_, ReInfer(ReVar(v_id))) => {\n+            let var_origins = self.var_origins.borrow();\n             self.tcx.sess.span_bug(\n-                self.var_origins[v_id.to_uint()].span(),\n+                var_origins.get()[v_id.to_uint()].span(),\n                 format!(\"lub_concrete_regions invoked with \\\n                       non-concrete regions: {:?}, {:?}\", a, b));\n           }\n@@ -660,8 +667,9 @@ impl RegionVarBindings {\n \n             (ReInfer(ReVar(v_id)), _) |\n             (_, ReInfer(ReVar(v_id))) => {\n+                let var_origins = self.var_origins.borrow();\n                 self.tcx.sess.span_bug(\n-                    self.var_origins[v_id.to_uint()].span(),\n+                    var_origins.get()[v_id.to_uint()].span(),\n                     format!(\"glb_concrete_regions invoked with \\\n                           non-concrete regions: {:?}, {:?}\", a, b));\n             }\n@@ -1137,19 +1145,23 @@ impl RegionVarBindings {\n             for upper_bound in upper_bounds.iter() {\n                 if !self.is_subregion_of(lower_bound.region,\n                                          upper_bound.region) {\n-                    errors.push(SubSupConflict(\n-                        self.var_origins[node_idx.to_uint()],\n-                        lower_bound.origin,\n-                        lower_bound.region,\n-                        upper_bound.origin,\n-                        upper_bound.region));\n-                    return;\n+                    {\n+                        let var_origins = self.var_origins.borrow();\n+                        errors.push(SubSupConflict(\n+                            var_origins.get()[node_idx.to_uint()],\n+                            lower_bound.origin,\n+                            lower_bound.region,\n+                            upper_bound.origin,\n+                            upper_bound.region));\n+                        return;\n+                    }\n                 }\n             }\n         }\n \n+        let var_origins = self.var_origins.borrow();\n         self.tcx.sess.span_bug(\n-            self.var_origins[node_idx.to_uint()].span(),\n+            var_origins.get()[node_idx.to_uint()].span(),\n             format!(\"collect_error_for_expanding_node() could not find error \\\n                   for var {:?}, lower_bounds={}, upper_bounds={}\",\n                  node_idx,\n@@ -1181,8 +1193,9 @@ impl RegionVarBindings {\n                                                 upper_bound_2.region) {\n                   Ok(_) => {}\n                   Err(_) => {\n+                    let var_origins = self.var_origins.borrow();\n                     errors.push(SupSupConflict(\n-                        self.var_origins[node_idx.to_uint()],\n+                        var_origins.get()[node_idx.to_uint()],\n                         upper_bound_1.origin,\n                         upper_bound_1.region,\n                         upper_bound_2.origin,\n@@ -1193,8 +1206,9 @@ impl RegionVarBindings {\n             }\n         }\n \n+        let var_origins = self.var_origins.borrow();\n         self.tcx.sess.span_bug(\n-            self.var_origins[node_idx.to_uint()].span(),\n+            var_origins.get()[node_idx.to_uint()].span(),\n             format!(\"collect_error_for_contracting_node() could not find error \\\n                   for var {:?}, upper_bounds={}\",\n                  node_idx,"}]}