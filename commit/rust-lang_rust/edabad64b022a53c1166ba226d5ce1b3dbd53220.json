{"sha": "edabad64b022a53c1166ba226d5ce1b3dbd53220", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkYWJhZDY0YjAyMmE1M2MxMTY2YmEyMjZkNWNlMWIzZGJkNTMyMjA=", "commit": {"author": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2018-12-07T02:12:49Z"}, "committer": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2018-12-26T21:40:21Z"}, "message": "Work-around for shadowing of variant names with assoc const names in `libproc_macro/bridge/rpc.rs`.", "tree": {"sha": "b4e9ec551b73c63e1b4d71a104fb6ec44ac1a2f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4e9ec551b73c63e1b4d71a104fb6ec44ac1a2f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/edabad64b022a53c1166ba226d5ce1b3dbd53220", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/edabad64b022a53c1166ba226d5ce1b3dbd53220", "html_url": "https://github.com/rust-lang/rust/commit/edabad64b022a53c1166ba226d5ce1b3dbd53220", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/edabad64b022a53c1166ba226d5ce1b3dbd53220/comments", "author": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a2a7edc0b3f3e296531a6b70a4d89a261bcfeb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a2a7edc0b3f3e296531a6b70a4d89a261bcfeb5", "html_url": "https://github.com/rust-lang/rust/commit/6a2a7edc0b3f3e296531a6b70a4d89a261bcfeb5"}], "stats": {"total": 22, "additions": 14, "deletions": 8}, "files": [{"sha": "74ae711a47372afcc2d5819b2e7ec8afa62ab97c", "filename": "src/libproc_macro/bridge/rpc.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/edabad64b022a53c1166ba226d5ce1b3dbd53220/src%2Flibproc_macro%2Fbridge%2Frpc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edabad64b022a53c1166ba226d5ce1b3dbd53220/src%2Flibproc_macro%2Fbridge%2Frpc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fbridge%2Frpc.rs?ref=edabad64b022a53c1166ba226d5ce1b3dbd53220", "patch": "@@ -71,15 +71,18 @@ macro_rules! rpc_encode_decode {\n     (enum $name:ident $(<$($T:ident),+>)* { $($variant:ident $(($field:ident))*),* $(,)* }) => {\n         impl<S, $($($T: Encode<S>),+)*> Encode<S> for $name $(<$($T),+>)* {\n             fn encode(self, w: &mut Writer, s: &mut S) {\n-                // HACK(eddyb) `Tag` enum duplicated between the\n+                // HACK(eddyb): `Tag` enum duplicated between the\n                 // two impls as there's no other place to stash it.\n-                #[repr(u8)] enum Tag { $($variant),* }\n                 #[allow(non_upper_case_globals)]\n-                impl Tag { $(const $variant: u8 = Tag::$variant as u8;)* }\n+                mod tag {\n+                    #[repr(u8)] enum Tag { $($variant),* }\n+\n+                    $(pub const $variant: u8 = Tag::$variant as u8;)*\n+                }\n \n                 match self {\n                     $($name::$variant $(($field))* => {\n-                        <Tag>::$variant.encode(w, s);\n+                        tag::$variant.encode(w, s);\n                         $($field.encode(w, s);)*\n                     })*\n                 }\n@@ -90,14 +93,17 @@ macro_rules! rpc_encode_decode {\n             for $name $(<$($T),+>)*\n         {\n             fn decode(r: &mut Reader<'a>, s: &mut S) -> Self {\n-                // HACK(eddyb) `Tag` enum duplicated between the\n+                // HACK(eddyb): `Tag` enum duplicated between the\n                 // two impls as there's no other place to stash it.\n-                #[repr(u8)] enum Tag { $($variant),* }\n                 #[allow(non_upper_case_globals)]\n-                impl Tag { $(const $variant: u8 = Tag::$variant as u8;)* }\n+                mod tag {\n+                    #[repr(u8)] enum Tag { $($variant),* }\n+\n+                    $(pub const $variant: u8 = Tag::$variant as u8;)*\n+                }\n \n                 match u8::decode(r, s) {\n-                    $(<Tag>::$variant => {\n+                    $(tag::$variant => {\n                         $(let $field = DecodeMut::decode(r, s);)*\n                         $name::$variant $(($field))*\n                     })*"}]}