{"sha": "f705c69bf641b271828f37adb525cafc618237d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3MDVjNjliZjY0MWIyNzE4MjhmMzdhZGI1MjVjYWZjNjE4MjM3ZDg=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-12-15T11:13:24Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-12-19T20:57:03Z"}, "message": "Simplify `TyCtxt::create_and_enter`.", "tree": {"sha": "ebbedb555ecdbd71c84ad1253f923abf6d1a09d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebbedb555ecdbd71c84ad1253f923abf6d1a09d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f705c69bf641b271828f37adb525cafc618237d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f705c69bf641b271828f37adb525cafc618237d8", "html_url": "https://github.com/rust-lang/rust/commit/f705c69bf641b271828f37adb525cafc618237d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f705c69bf641b271828f37adb525cafc618237d8/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39e6ae2dccdea270ef70aa7eecdd87252a5c36f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/39e6ae2dccdea270ef70aa7eecdd87252a5c36f2", "html_url": "https://github.com/rust-lang/rust/commit/39e6ae2dccdea270ef70aa7eecdd87252a5c36f2"}], "stats": {"total": 44, "additions": 18, "deletions": 26}, "files": [{"sha": "20405398effd78946b9f4c9b2d3701602932b9af", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f705c69bf641b271828f37adb525cafc618237d8/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f705c69bf641b271828f37adb525cafc618237d8/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=f705c69bf641b271828f37adb525cafc618237d8", "patch": "@@ -762,11 +762,9 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     /// reference to the context, to allow formatting values that need it.\n     pub fn create_and_enter<F, R>(s: &'tcx Session,\n                                   arenas: &'tcx CtxtArenas<'tcx>,\n-                                  trait_map: TraitMap,\n+                                  resolutions: ty::Resolutions,\n                                   named_region_map: resolve_lifetime::NamedRegionMap,\n                                   map: ast_map::Map<'tcx>,\n-                                  freevars: FreevarMap,\n-                                 maybe_unused_trait_imports: NodeSet,\n                                   region_maps: RegionMaps,\n                                   lang_items: middle::lang_items::LanguageItems,\n                                   stability: stability::Index<'tcx>,\n@@ -790,7 +788,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             item_variance_map: RefCell::new(DepTrackingMap::new(dep_graph.clone())),\n             variance_computed: Cell::new(false),\n             sess: s,\n-            trait_map: trait_map,\n+            trait_map: resolutions.trait_map,\n             tables: RefCell::new(Tables::empty()),\n             impl_trait_refs: RefCell::new(DepTrackingMap::new(dep_graph.clone())),\n             trait_defs: RefCell::new(DepTrackingMap::new(dep_graph.clone())),\n@@ -802,8 +800,8 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             fulfilled_predicates: RefCell::new(fulfilled_predicates),\n             map: map,\n             mir_map: RefCell::new(DepTrackingMap::new(dep_graph.clone())),\n-            freevars: RefCell::new(freevars),\n-            maybe_unused_trait_imports: maybe_unused_trait_imports,\n+            freevars: RefCell::new(resolutions.freevars),\n+            maybe_unused_trait_imports: resolutions.maybe_unused_trait_imports,\n             item_types: RefCell::new(DepTrackingMap::new(dep_graph.clone())),\n             rcache: RefCell::new(FxHashMap()),\n             tc_cache: RefCell::new(FxHashMap()),"}, {"sha": "8f478435efd90d15b6fc5d0e2d33475670242f88", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f705c69bf641b271828f37adb525cafc618237d8/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f705c69bf641b271828f37adb525cafc618237d8/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=f705c69bf641b271828f37adb525cafc618237d8", "patch": "@@ -17,7 +17,7 @@ pub use self::LvaluePreference::*;\n pub use self::fold::TypeFoldable;\n \n use dep_graph::{self, DepNode};\n-use hir::map as ast_map;\n+use hir::{map as ast_map, FreevarMap, TraitMap};\n use middle;\n use hir::def::{Def, CtorKind, ExportMap};\n use hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n@@ -112,6 +112,13 @@ pub struct CrateAnalysis<'tcx> {\n     pub hir_ty_to_ty: NodeMap<Ty<'tcx>>,\n }\n \n+#[derive(Clone)]\n+pub struct Resolutions {\n+    pub freevars: FreevarMap,\n+    pub trait_map: TraitMap,\n+    pub maybe_unused_trait_imports: NodeSet,\n+}\n+\n #[derive(Copy, Clone)]\n pub enum DtorKind {\n     NoDtor,"}, {"sha": "360933c6b669532457f61cf647dccf7a96813bee", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f705c69bf641b271828f37adb525cafc618237d8/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f705c69bf641b271828f37adb525cafc618237d8/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=f705c69bf641b271828f37adb525cafc618237d8", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use rustc::hir;\n-use rustc::hir::{map as hir_map, FreevarMap, TraitMap};\n+use rustc::hir::{self, map as hir_map};\n use rustc::hir::lowering::lower_crate;\n use rustc_data_structures::stable_hasher::StableHasher;\n use rustc_mir as mir;\n@@ -20,7 +19,7 @@ use rustc::session::search_paths::PathKind;\n use rustc::lint;\n use rustc::middle::{self, dependency_format, stability, reachable};\n use rustc::middle::privacy::AccessLevels;\n-use rustc::ty::{self, TyCtxt};\n+use rustc::ty::{self, TyCtxt, Resolutions};\n use rustc::util::common::time;\n use rustc::util::nodemap::{NodeSet, NodeMap};\n use rustc_borrowck as borrowck;\n@@ -59,13 +58,6 @@ use syntax_ext;\n \n use derive_registrar;\n \n-#[derive(Clone)]\n-pub struct Resolutions {\n-    pub freevars: FreevarMap,\n-    pub trait_map: TraitMap,\n-    pub maybe_unused_trait_imports: NodeSet,\n-}\n-\n pub fn compile_input(sess: &Session,\n                      cstore: &CStore,\n                      input: &Input,\n@@ -864,11 +856,9 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n \n     TyCtxt::create_and_enter(sess,\n                              arenas,\n-                             resolutions.trait_map,\n+                             resolutions,\n                              named_region_map,\n                              hir_map,\n-                             resolutions.freevars,\n-                             resolutions.maybe_unused_trait_imports,\n                              region_map,\n                              lang_items,\n                              index,"}, {"sha": "74df1e52bde43143a7dab39a42aee28611022fc9", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f705c69bf641b271828f37adb525cafc618237d8/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f705c69bf641b271828f37adb525cafc618237d8/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=f705c69bf641b271828f37adb525cafc618237d8", "patch": "@@ -15,10 +15,9 @@ pub use self::PpSourceMode::*;\n pub use self::PpMode::*;\n use self::NodesMatchingUII::*;\n \n-use abort_on_err;\n-use driver::{self, Resolutions};\n+use {abort_on_err, driver};\n \n-use rustc::ty::{self, TyCtxt};\n+use rustc::ty::{self, TyCtxt, Resolutions};\n use rustc::cfg;\n use rustc::cfg::graphviz::LabelledCFG;\n use rustc::dep_graph::DepGraph;"}, {"sha": "cbab39c390829422419cbacd3e6bd51320dee7fc", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f705c69bf641b271828f37adb525cafc618237d8/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f705c69bf641b271828f37adb525cafc618237d8/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=f705c69bf641b271828f37adb525cafc618237d8", "patch": "@@ -138,11 +138,9 @@ fn test_env<F>(source_string: &str,\n     let index = stability::Index::new(&ast_map);\n     TyCtxt::create_and_enter(&sess,\n                              &arenas,\n-                             resolutions.trait_map,\n+                             resolutions,\n                              named_region_map.unwrap(),\n                              ast_map,\n-                             resolutions.freevars,\n-                             resolutions.maybe_unused_trait_imports,\n                              region_map,\n                              lang_items,\n                              index,"}]}