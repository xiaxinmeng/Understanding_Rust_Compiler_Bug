{"sha": "da6880427ac6bf2735019e34448c43900a5fc6df", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhNjg4MDQyN2FjNmJmMjczNTAxOWUzNDQ0OGM0MzkwMGE1ZmM2ZGY=", "commit": {"author": {"name": "Smit Soni", "email": "atsmtat@gmail.com", "date": "2021-07-18T21:40:59Z"}, "committer": {"name": "Smit Soni", "email": "atsmtat@gmail.com", "date": "2021-07-20T15:23:51Z"}, "message": "Update error code for fs ops in isolation\n\nChange the code to either `EACCES` (if the op is performed on the\npath), or `EBADF` (if the op is performed the fd)\n\nUpdated ops: `stat`, `opendir`, `ftruncate64`, and `readlink`\n\nAdd a new test for fs ops in isolation.", "tree": {"sha": "bea97705262e44ff422a8598bcfebdabdb702d9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bea97705262e44ff422a8598bcfebdabdb702d9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da6880427ac6bf2735019e34448c43900a5fc6df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da6880427ac6bf2735019e34448c43900a5fc6df", "html_url": "https://github.com/rust-lang/rust/commit/da6880427ac6bf2735019e34448c43900a5fc6df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da6880427ac6bf2735019e34448c43900a5fc6df/comments", "author": {"login": "atsmtat", "id": 25519955, "node_id": "MDQ6VXNlcjI1NTE5OTU1", "avatar_url": "https://avatars.githubusercontent.com/u/25519955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/atsmtat", "html_url": "https://github.com/atsmtat", "followers_url": "https://api.github.com/users/atsmtat/followers", "following_url": "https://api.github.com/users/atsmtat/following{/other_user}", "gists_url": "https://api.github.com/users/atsmtat/gists{/gist_id}", "starred_url": "https://api.github.com/users/atsmtat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/atsmtat/subscriptions", "organizations_url": "https://api.github.com/users/atsmtat/orgs", "repos_url": "https://api.github.com/users/atsmtat/repos", "events_url": "https://api.github.com/users/atsmtat/events{/privacy}", "received_events_url": "https://api.github.com/users/atsmtat/received_events", "type": "User", "site_admin": false}, "committer": {"login": "atsmtat", "id": 25519955, "node_id": "MDQ6VXNlcjI1NTE5OTU1", "avatar_url": "https://avatars.githubusercontent.com/u/25519955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/atsmtat", "html_url": "https://github.com/atsmtat", "followers_url": "https://api.github.com/users/atsmtat/followers", "following_url": "https://api.github.com/users/atsmtat/following{/other_user}", "gists_url": "https://api.github.com/users/atsmtat/gists{/gist_id}", "starred_url": "https://api.github.com/users/atsmtat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/atsmtat/subscriptions", "organizations_url": "https://api.github.com/users/atsmtat/orgs", "repos_url": "https://api.github.com/users/atsmtat/repos", "events_url": "https://api.github.com/users/atsmtat/events{/privacy}", "received_events_url": "https://api.github.com/users/atsmtat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1cabac72707020e30a787f44740b855583fc341", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1cabac72707020e30a787f44740b855583fc341", "html_url": "https://github.com/rust-lang/rust/commit/a1cabac72707020e30a787f44740b855583fc341"}], "stats": {"total": 118, "additions": 100, "deletions": 18}, "files": [{"sha": "2693dc096286089667976b71f8bf113c4e3aaa82", "filename": "src/shims/posix/fs.rs", "status": "modified", "additions": 26, "deletions": 18, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/da6880427ac6bf2735019e34448c43900a5fc6df/src%2Fshims%2Fposix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da6880427ac6bf2735019e34448c43900a5fc6df/src%2Fshims%2Fposix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Ffs.rs?ref=da6880427ac6bf2735019e34448c43900a5fc6df", "patch": "@@ -851,8 +851,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // Reject if isolation is enabled.\n         if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n             this.reject_in_isolation(\"`stat`\", reject_with)?;\n-            // macos stat never sets \"EPERM\". Set error code \"ENOENT\".\n-            this.set_last_error_from_io_error(ErrorKind::NotFound)?;\n+            let eacc = this.eval_libc(\"EACCES\")?;\n+            this.set_last_error(eacc)?;\n             return Ok(-1);\n         }\n \n@@ -872,8 +872,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // Reject if isolation is enabled.\n         if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n             this.reject_in_isolation(\"`lstat`\", reject_with)?;\n-            // macos lstat never sets \"EPERM\". Set error code \"ENOENT\".\n-            this.set_last_error_from_io_error(ErrorKind::NotFound)?;\n+            let eacc = this.eval_libc(\"EACCES\")?;\n+            this.set_last_error(eacc)?;\n             return Ok(-1);\n         }\n \n@@ -917,14 +917,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         this.assert_target_os(\"linux\", \"statx\");\n \n-        // Reject if isolation is enabled.\n-        if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n-            this.reject_in_isolation(\"`statx`\", reject_with)?;\n-            // statx never sets \"EPERM\". Set error code \"ENOENT\".\n-            this.set_last_error_from_io_error(ErrorKind::NotFound)?;\n-            return Ok(-1);\n-        }\n-\n         let statxbuf_ptr = this.read_pointer(statxbuf_op)?;\n         let pathname_ptr = this.read_pointer(pathname_op)?;\n \n@@ -973,6 +965,22 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             )\n         }\n \n+        // Reject if isolation is enabled.\n+        if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n+            this.reject_in_isolation(\"`statx`\", reject_with)?;\n+            let ecode = if path.is_absolute() || dirfd == this.eval_libc_i32(\"AT_FDCWD\")? {\n+                // since `path` is provided, either absolute or\n+                // relative to CWD, `EACCES` is the most relevant.\n+                this.eval_libc(\"EACCES\")?\n+            } else {\n+                // `dirfd` is set to target file, and `path` is\n+                // empty. `EACCES` would violate the spec.\n+                this.eval_libc(\"EBADF\")?\n+            };\n+            this.set_last_error(ecode)?;\n+            return Ok(-1);\n+        }\n+\n         // the `_mask_op` paramter specifies the file information that the caller requested.\n         // However `statx` is allowed to return information that was not requested or to not\n         // return information that was requested. This `mask` represents the information we can\n@@ -1167,8 +1175,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // Reject if isolation is enabled.\n         if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n             this.reject_in_isolation(\"`opendir`\", reject_with)?;\n-            // opendir function never sets \"EPERM\". Set \"ENOENT\".\n-            this.set_last_error_from_io_error(ErrorKind::NotFound)?;\n+            let eacc = this.eval_libc(\"EACCES\")?;\n+            this.set_last_error(eacc)?;\n             return Ok(Scalar::null_ptr(this));\n         }\n \n@@ -1422,8 +1430,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // Reject if isolation is enabled.\n         if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n             this.reject_in_isolation(\"`ftruncate64`\", reject_with)?;\n-            this.set_last_error_from_io_error(ErrorKind::PermissionDenied)?;\n-            return Ok(-1);\n+            // Set error code as \"EBADF\" (bad fd)\n+            return this.handle_not_found();\n         }\n \n         let fd = this.read_scalar(fd_op)?.to_i32()?;\n@@ -1554,8 +1562,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // Reject if isolation is enabled.\n         if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n             this.reject_in_isolation(\"`readlink`\", reject_with)?;\n-            // readlink never sets \"EPERM\". Set \"ENOENT\".\n-            this.set_last_error_from_io_error(ErrorKind::NotFound)?;\n+            let eacc = this.eval_libc(\"EACCES\")?;\n+            this.set_last_error(eacc)?;\n             return Ok(-1);\n         }\n "}, {"sha": "a9e1e5094fa525a242ccb4df4eb03f6c2113053b", "filename": "tests/run-pass/fs_with_isolation.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/da6880427ac6bf2735019e34448c43900a5fc6df/tests%2Frun-pass%2Ffs_with_isolation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da6880427ac6bf2735019e34448c43900a5fc6df/tests%2Frun-pass%2Ffs_with_isolation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffs_with_isolation.rs?ref=da6880427ac6bf2735019e34448c43900a5fc6df", "patch": "@@ -0,0 +1,54 @@\n+// ignore-windows: File handling is not implemented yet\n+// compile-flags: -Zmiri-isolation-error=warn-nobacktrace\n+// normalize-stderr-test \"(stat(x)?)\" -> \"$$STAT\"\n+\n+#![feature(rustc_private)]\n+\n+extern crate libc;\n+\n+use std::ffi::CString;\n+use std::os::unix;\n+use std::fs::{self, File};\n+use std::io::{Error, ErrorKind};\n+\n+fn main() {\n+    // test `open`\n+    assert_eq!(File::create(\"foo.txt\").unwrap_err().kind(), ErrorKind::PermissionDenied);\n+\n+    // test `fcntl`\n+    unsafe {\n+        assert_eq!(libc::fcntl(1, libc::F_DUPFD, 0), -1);\n+        assert_eq!(Error::last_os_error().raw_os_error(), Some(libc::EPERM));\n+    }\n+\n+    // test `unlink`\n+    assert_eq!(fs::remove_file(\"foo.txt\").unwrap_err().kind(), ErrorKind::PermissionDenied);\n+\n+    // test `symlink`\n+    assert_eq!(unix::fs::symlink(\"foo.txt\", \"foo_link.txt\").unwrap_err().kind(), ErrorKind::PermissionDenied);\n+\n+    // test `readlink`\n+    let symlink_c_str = CString::new(\"foo.txt\").unwrap();\n+    let mut buf = vec![0; \"foo_link.txt\".len() + 1];\n+    unsafe {\n+        assert_eq!(libc::readlink(symlink_c_str.as_ptr(), buf.as_mut_ptr(), buf.len()), -1);\n+        assert_eq!(Error::last_os_error().raw_os_error(), Some(libc::EACCES));\n+    }\n+\n+    // test `stat`\n+    assert_eq!(fs::metadata(\"foo.txt\").unwrap_err().kind(), ErrorKind::PermissionDenied);\n+    assert_eq!(Error::last_os_error().raw_os_error(), Some(libc::EACCES));\n+\n+    // test `rename`\n+    assert_eq!(fs::rename(\"a.txt\", \"b.txt\").unwrap_err().kind(), ErrorKind::PermissionDenied);\n+\n+    // test `mkdir`\n+    assert_eq!(fs::create_dir(\"foo/bar\").unwrap_err().kind(), ErrorKind::PermissionDenied);\n+\n+    // test `rmdir`\n+    assert_eq!(fs::remove_dir(\"foo/bar\").unwrap_err().kind(), ErrorKind::PermissionDenied);\n+\n+    // test `opendir`\n+    assert_eq!(fs::read_dir(\"foo/bar\").unwrap_err().kind(), ErrorKind::PermissionDenied);\n+    assert_eq!(Error::last_os_error().raw_os_error(), Some(libc::EACCES));\n+}"}, {"sha": "ad75e42831b0ac7b71caaeb9e53d1f8769f276be", "filename": "tests/run-pass/fs_with_isolation.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/da6880427ac6bf2735019e34448c43900a5fc6df/tests%2Frun-pass%2Ffs_with_isolation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da6880427ac6bf2735019e34448c43900a5fc6df/tests%2Frun-pass%2Ffs_with_isolation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffs_with_isolation.stderr?ref=da6880427ac6bf2735019e34448c43900a5fc6df", "patch": "@@ -0,0 +1,20 @@\n+warning: `open` was made to return an error due to isolation\n+\n+warning: `fcntl` was made to return an error due to isolation\n+\n+warning: `unlink` was made to return an error due to isolation\n+\n+warning: `symlink` was made to return an error due to isolation\n+\n+warning: `readlink` was made to return an error due to isolation\n+\n+warning: `$STAT` was made to return an error due to isolation\n+\n+warning: `rename` was made to return an error due to isolation\n+\n+warning: `mkdir` was made to return an error due to isolation\n+\n+warning: `rmdir` was made to return an error due to isolation\n+\n+warning: `opendir` was made to return an error due to isolation\n+"}]}