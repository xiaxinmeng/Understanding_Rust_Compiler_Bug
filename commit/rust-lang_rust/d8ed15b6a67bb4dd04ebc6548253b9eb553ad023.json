{"sha": "d8ed15b6a67bb4dd04ebc6548253b9eb553ad023", "node_id": "C_kwDOAAsO6NoAKGQ4ZWQxNWI2YTY3YmI0ZGQwNGViYzY1NDgyNTNiOWViNTUzYWQwMjM", "commit": {"author": {"name": "Anatol Ulrich", "email": "anatol.ulrich@ferrous-systems.com", "date": "2021-10-26T17:31:49Z"}, "committer": {"name": "Anatol Ulrich", "email": "anatol.ulrich@ferrous-systems.com", "date": "2021-10-26T17:31:49Z"}, "message": "fix: make `goto_declaration` multi-token mapping aware", "tree": {"sha": "8795a66683c819989b802823ef5eff388b736a89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8795a66683c819989b802823ef5eff388b736a89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8ed15b6a67bb4dd04ebc6548253b9eb553ad023", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8ed15b6a67bb4dd04ebc6548253b9eb553ad023", "html_url": "https://github.com/rust-lang/rust/commit/d8ed15b6a67bb4dd04ebc6548253b9eb553ad023", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8ed15b6a67bb4dd04ebc6548253b9eb553ad023/comments", "author": null, "committer": null, "parents": [{"sha": "ee1d6cffbfbecc99a70be77fe697af817ed6cfac", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee1d6cffbfbecc99a70be77fe697af817ed6cfac", "html_url": "https://github.com/rust-lang/rust/commit/ee1d6cffbfbecc99a70be77fe697af817ed6cfac"}], "stats": {"total": 51, "additions": 29, "deletions": 22}, "files": [{"sha": "c79015c71604dc42454f94c18947a94afdefa081", "filename": "crates/ide/src/goto_declaration.rs", "status": "modified", "additions": 29, "deletions": 22, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/d8ed15b6a67bb4dd04ebc6548253b9eb553ad023/crates%2Fide%2Fsrc%2Fgoto_declaration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8ed15b6a67bb4dd04ebc6548253b9eb553ad023/crates%2Fide%2Fsrc%2Fgoto_declaration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_declaration.rs?ref=d8ed15b6a67bb4dd04ebc6548253b9eb553ad023", "patch": "@@ -19,28 +19,35 @@ pub(crate) fn goto_declaration(\n     let original_token = file\n         .token_at_offset(position.offset)\n         .find(|it| matches!(it.kind(), IDENT | T![self] | T![super] | T![crate]))?;\n-    let token = sema.descend_into_macros_single(original_token.clone());\n-    let parent = token.parent()?;\n-    let def = match_ast! {\n-        match parent {\n-            ast::NameRef(name_ref) => match NameRefClass::classify(&sema, &name_ref)? {\n-                NameRefClass::Definition(it) => Some(it),\n-                _ => None\n-            },\n-            ast::Name(name) => match NameClass::classify(&sema, &name)? {\n-                NameClass::Definition(it) => Some(it),\n-                _ => None\n-            },\n-            _ => None,\n-        }\n-    };\n-    match def? {\n-        Definition::ModuleDef(hir::ModuleDef::Module(module)) => Some(RangeInfo::new(\n-            original_token.text_range(),\n-            vec![NavigationTarget::from_module_to_decl(db, module)],\n-        )),\n-        _ => None,\n-    }\n+    let range = original_token.text_range();\n+    let info: Vec<NavigationTarget> = sema\n+        .descend_into_macros(original_token)\n+        .iter()\n+        .filter_map(|token| {\n+            let parent = token.parent()?;\n+            let def = match_ast! {\n+                match parent {\n+                    ast::NameRef(name_ref) => match NameRefClass::classify(&sema, &name_ref)? {\n+                        NameRefClass::Definition(it) => Some(it),\n+                        _ => None\n+                    },\n+                    ast::Name(name) => match NameClass::classify(&sema, &name)? {\n+                        NameClass::Definition(it) => Some(it),\n+                        _ => None\n+                    },\n+                    _ => None\n+                }\n+            };\n+            match def? {\n+                Definition::ModuleDef(hir::ModuleDef::Module(module)) => {\n+                    Some(NavigationTarget::from_module_to_decl(db, module))\n+                }\n+                _ => None,\n+            }\n+        })\n+        .collect();\n+\n+    Some(RangeInfo::new(range, info))\n }\n \n #[cfg(test)]"}]}