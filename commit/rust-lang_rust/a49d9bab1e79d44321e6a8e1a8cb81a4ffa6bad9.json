{"sha": "a49d9bab1e79d44321e6a8e1a8cb81a4ffa6bad9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0OWQ5YmFiMWU3OWQ0NDMyMWU2YThlMWE4Y2I4MWE0ZmZhNmJhZDk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-16T12:14:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-16T12:14:29Z"}, "message": "Auto merge of #27643 - mitaa:get_item_, r=arielb1\n\n(this incidentally fixes an error message where the paths separator is \" \" instead of \"::\")", "tree": {"sha": "91059be7517f60601af57767f4fca43ae015997e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91059be7517f60601af57767f4fca43ae015997e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a49d9bab1e79d44321e6a8e1a8cb81a4ffa6bad9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a49d9bab1e79d44321e6a8e1a8cb81a4ffa6bad9", "html_url": "https://github.com/rust-lang/rust/commit/a49d9bab1e79d44321e6a8e1a8cb81a4ffa6bad9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a49d9bab1e79d44321e6a8e1a8cb81a4ffa6bad9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bef7d90a3b96a6379c70ee28d48664ecb881bcdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/bef7d90a3b96a6379c70ee28d48664ecb881bcdc", "html_url": "https://github.com/rust-lang/rust/commit/bef7d90a3b96a6379c70ee28d48664ecb881bcdc"}, {"sha": "d81feb85f7b575b04a7249ccbf3a6b3fcc8c0e9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d81feb85f7b575b04a7249ccbf3a6b3fcc8c0e9d", "html_url": "https://github.com/rust-lang/rust/commit/d81feb85f7b575b04a7249ccbf3a6b3fcc8c0e9d"}], "stats": {"total": 74, "additions": 26, "deletions": 48}, "files": [{"sha": "b591f51eefef32ad41465cbcc13ee2dfc70c1c34", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a49d9bab1e79d44321e6a8e1a8cb81a4ffa6bad9/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a49d9bab1e79d44321e6a8e1a8cb81a4ffa6bad9/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=a49d9bab1e79d44321e6a8e1a8cb81a4ffa6bad9", "patch": "@@ -96,6 +96,12 @@ pub fn get_item_path(tcx: &ty::ctxt, def: ast::DefId) -> Vec<ast_map::PathElem>\n     })\n }\n \n+pub fn get_item_name(tcx: &ty::ctxt, def: ast::DefId) -> ast::Name {\n+    let cstore = &tcx.sess.cstore;\n+    let cdata = cstore.get_crate_data(def.krate);\n+    decoder::get_item_name(&cstore.intr, &cdata, def.node)\n+}\n+\n pub enum FoundAst<'ast> {\n     Found(&'ast InlinedItem),\n     FoundParent(ast::DefId, &'ast InlinedItem),"}, {"sha": "25c948fbba61dee56df50ddb913640e71877210d", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a49d9bab1e79d44321e6a8e1a8cb81a4ffa6bad9/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a49d9bab1e79d44321e6a8e1a8cb81a4ffa6bad9/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=a49d9bab1e79d44321e6a8e1a8cb81a4ffa6bad9", "patch": "@@ -774,6 +774,10 @@ pub fn get_item_path(cdata: Cmd, id: ast::NodeId) -> Vec<ast_map::PathElem> {\n     item_path(lookup_item(id, cdata.data()))\n }\n \n+pub fn get_item_name(intr: &IdentInterner, cdata: Cmd, id: ast::NodeId) -> ast::Name {\n+    item_name(intr, lookup_item(id, cdata.data()))\n+}\n+\n pub type DecodeInlinedItem<'a> =\n     Box<for<'tcx> FnMut(Cmd,\n                         &ty::ctxt<'tcx>,"}, {"sha": "dc45f9a91cd26b052d678d692e61fc92f7c9e4c2", "filename": "src/librustc/middle/intrinsicck.rs", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a49d9bab1e79d44321e6a8e1a8cb81a4ffa6bad9/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a49d9bab1e79d44321e6a8e1a8cb81a4ffa6bad9/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs?ref=a49d9bab1e79d44321e6a8e1a8cb81a4ffa6bad9", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use ast_map::NodeForeignItem;\n-use metadata::csearch;\n use middle::def::DefFn;\n use middle::subst::{Subst, Substs, EnumeratedItems};\n use middle::ty::{TransmuteRestriction, ctxt, TyBareFn};\n@@ -57,21 +55,7 @@ impl<'a, 'tcx> IntrinsicCheckingVisitor<'a, 'tcx> {\n             ty::TyBareFn(_, ref bfty) => bfty.abi == RustIntrinsic,\n             _ => return false\n         };\n-        if def_id.krate == ast::LOCAL_CRATE {\n-            match self.tcx.map.get(def_id.node) {\n-                NodeForeignItem(ref item) if intrinsic => {\n-                    item.ident.name == \"transmute\"\n-                }\n-                _ => false,\n-            }\n-        } else {\n-            match csearch::get_item_path(self.tcx, def_id).last() {\n-                Some(ref last) if intrinsic => {\n-                    last.name() == \"transmute\"\n-                }\n-                _ => false,\n-            }\n-        }\n+        intrinsic && self.tcx.item_name(def_id) == \"transmute\"\n     }\n \n     fn check_transmute(&self, span: Span, from: Ty<'tcx>, to: Ty<'tcx>, id: ast::NodeId) {"}, {"sha": "967eb3ff74f49f20b0a2adc64d1e2948deae973e", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a49d9bab1e79d44321e6a8e1a8cb81a4ffa6bad9/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a49d9bab1e79d44321e6a8e1a8cb81a4ffa6bad9/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=a49d9bab1e79d44321e6a8e1a8cb81a4ffa6bad9", "patch": "@@ -5770,13 +5770,9 @@ impl<'tcx> ctxt<'tcx> {\n                                             &format!(\"a default was defined here...\"));\n                     }\n                     (_, _) => {\n-                        let elems = csearch::get_item_path(self, expected.def_id)\n-                                        .into_iter()\n-                                        .map(|p| p.to_string())\n-                                        .collect::<Vec<_>>();\n                         self.sess.note(\n                             &format!(\"a default is defined on `{}`\",\n-                                     elems.join(\"::\")));\n+                                     self.item_path_str(expected.def_id)));\n                     }\n                 }\n \n@@ -5791,13 +5787,9 @@ impl<'tcx> ctxt<'tcx> {\n                                             &format!(\"a second default was defined here...\"));\n                     }\n                     (_, _) => {\n-                        let elems = csearch::get_item_path(self, found.def_id)\n-                                        .into_iter()\n-                                        .map(|p| p.to_string())\n-                                        .collect::<Vec<_>>();\n-\n                         self.sess.note(\n-                            &format!(\"a second default is defined on `{}`\", elems.join(\" \")));\n+                            &format!(\"a second default is defined on `{}`\",\n+                                     self.item_path_str(found.def_id)));\n                     }\n                 }\n \n@@ -6014,6 +6006,14 @@ impl<'tcx> ctxt<'tcx> {\n         }\n     }\n \n+    pub fn item_name(&self, id: ast::DefId) -> ast::Name {\n+        if id.krate == ast::LOCAL_CRATE {\n+            self.map.get_path_elem(id.node).name()\n+        } else {\n+            csearch::get_item_name(self, id)\n+        }\n+    }\n+\n     /// Returns `(normalized_type, ty)`, where `normalized_type` is the\n     /// IntType representation of one of {i64,i32,i16,i8,u64,u32,u16,u8},\n     /// and `ty` is the original type (i.e. may include `isize` or"}, {"sha": "1110a4679345bb6e37e68e88690d8fa0f36f16a1", "filename": "src/librustc_trans/trans/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a49d9bab1e79d44321e6a8e1a8cb81a4ffa6bad9/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a49d9bab1e79d44321e6a8e1a8cb81a4ffa6bad9/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs?ref=a49d9bab1e79d44321e6a8e1a8cb81a4ffa6bad9", "patch": "@@ -23,7 +23,6 @@ use super::{declare_local, VariableKind, VariableAccess};\n use llvm::{self, ValueRef};\n use llvm::debuginfo::{DIType, DIFile, DIScope, DIDescriptor, DICompositeType};\n \n-use metadata::csearch;\n use middle::pat_util;\n use middle::subst::{self, Substs};\n use rustc::ast_map;\n@@ -1686,13 +1685,7 @@ fn prepare_enum_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n     fn get_enum_discriminant_name(cx: &CrateContext,\n                                   def_id: ast::DefId)\n                                   -> token::InternedString {\n-        let name = if def_id.krate == ast::LOCAL_CRATE {\n-            cx.tcx().map.get_path_elem(def_id.node).name()\n-        } else {\n-            csearch::get_item_path(cx.tcx(), def_id).last().unwrap().name()\n-        };\n-\n-        name.as_str()\n+        cx.tcx().item_name(def_id).as_str()\n     }\n }\n "}, {"sha": "3fafd6e7d01d2461f796ced73305140bcfef878e", "filename": "src/librustc_trans/trans/meth.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a49d9bab1e79d44321e6a8e1a8cb81a4ffa6bad9/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a49d9bab1e79d44321e6a8e1a8cb81a4ffa6bad9/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs?ref=a49d9bab1e79d44321e6a8e1a8cb81a4ffa6bad9", "patch": "@@ -12,12 +12,10 @@ use arena::TypedArena;\n use back::abi;\n use back::link;\n use llvm::{ValueRef, get_params};\n-use metadata::csearch;\n use middle::subst::{Subst, Substs};\n use middle::subst::VecPerParamSpace;\n use middle::subst;\n use middle::traits;\n-use rustc::ast_map;\n use trans::base::*;\n use trans::build::*;\n use trans::callee::*;\n@@ -165,14 +163,8 @@ pub fn trans_static_method_callee<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n            tcx.item_path_str(trait_id),\n            expr_id);\n \n-    let mname = if method_id.krate == ast::LOCAL_CRATE {\n-        match tcx.map.get(method_id.node) {\n-            ast_map::NodeTraitItem(trait_item) => trait_item.ident.name,\n-            _ => panic!(\"callee is not a trait method\")\n-        }\n-    } else {\n-        csearch::get_item_path(tcx, method_id).last().unwrap().name()\n-    };\n+    let mname = tcx.item_name(method_id);\n+\n     debug!(\"trans_static_method_callee: method_id={:?}, expr_id={}, \\\n             name={}\", method_id, expr_id, mname);\n "}, {"sha": "6f51e70b0a0f18969a138a0924b09d8c5ceeee46", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a49d9bab1e79d44321e6a8e1a8cb81a4ffa6bad9/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a49d9bab1e79d44321e6a8e1a8cb81a4ffa6bad9/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=a49d9bab1e79d44321e6a8e1a8cb81a4ffa6bad9", "patch": "@@ -113,11 +113,10 @@ fn try_inline_def(cx: &DocContext, tcx: &ty::ctxt,\n         }\n         _ => return None,\n     };\n-    let fqn = csearch::get_item_path(tcx, did);\n     cx.inlined.borrow_mut().as_mut().unwrap().insert(did);\n     ret.push(clean::Item {\n         source: clean::Span::empty(),\n-        name: Some(fqn.last().unwrap().to_string()),\n+        name: Some(tcx.item_name(did).to_string()),\n         attrs: load_attrs(cx, tcx, did),\n         inner: inner,\n         visibility: Some(ast::Public),"}]}