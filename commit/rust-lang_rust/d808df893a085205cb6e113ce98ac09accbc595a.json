{"sha": "d808df893a085205cb6e113ce98ac09accbc595a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4MDhkZjg5M2EwODUyMDVjYjZlMTEzY2U5OGFjMDlhY2NiYzU5NWE=", "commit": {"author": {"name": "Kevin Atkinson", "email": "kevina@cs.utah.edu", "date": "2012-02-10T19:23:40Z"}, "committer": {"name": "Kevin Atkinson", "email": "kevina@cs.utah.edu", "date": "2012-02-10T19:32:51Z"}, "message": "Use file_substr rather than <anon> when re-parsing quasi-quotes\nfor better error messages.", "tree": {"sha": "37c564cda6bbeda7473db2e22da535e4e123a197", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37c564cda6bbeda7473db2e22da535e4e123a197"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d808df893a085205cb6e113ce98ac09accbc595a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d808df893a085205cb6e113ce98ac09accbc595a", "html_url": "https://github.com/rust-lang/rust/commit/d808df893a085205cb6e113ce98ac09accbc595a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d808df893a085205cb6e113ce98ac09accbc595a/comments", "author": {"login": "kevina", "id": 1271492, "node_id": "MDQ6VXNlcjEyNzE0OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1271492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kevina", "html_url": "https://github.com/kevina", "followers_url": "https://api.github.com/users/kevina/followers", "following_url": "https://api.github.com/users/kevina/following{/other_user}", "gists_url": "https://api.github.com/users/kevina/gists{/gist_id}", "starred_url": "https://api.github.com/users/kevina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kevina/subscriptions", "organizations_url": "https://api.github.com/users/kevina/orgs", "repos_url": "https://api.github.com/users/kevina/repos", "events_url": "https://api.github.com/users/kevina/events{/privacy}", "received_events_url": "https://api.github.com/users/kevina/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kevina", "id": 1271492, "node_id": "MDQ6VXNlcjEyNzE0OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1271492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kevina", "html_url": "https://github.com/kevina", "followers_url": "https://api.github.com/users/kevina/followers", "following_url": "https://api.github.com/users/kevina/following{/other_user}", "gists_url": "https://api.github.com/users/kevina/gists{/gist_id}", "starred_url": "https://api.github.com/users/kevina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kevina/subscriptions", "organizations_url": "https://api.github.com/users/kevina/orgs", "repos_url": "https://api.github.com/users/kevina/repos", "events_url": "https://api.github.com/users/kevina/events{/privacy}", "received_events_url": "https://api.github.com/users/kevina/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4026053e99b6554bd7d996839e04dfeb9d40aa4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4026053e99b6554bd7d996839e04dfeb9d40aa4d", "html_url": "https://github.com/rust-lang/rust/commit/4026053e99b6554bd7d996839e04dfeb9d40aa4d"}], "stats": {"total": 49, "additions": 25, "deletions": 24}, "files": [{"sha": "d96ed50225889b25e8b361180eb3d9785cb67633", "filename": "src/comp/syntax/codemap.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d808df893a085205cb6e113ce98ac09accbc595a/src%2Fcomp%2Fsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d808df893a085205cb6e113ce98ac09accbc595a/src%2Fcomp%2Fsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fcodemap.rs?ref=d808df893a085205cb6e113ce98ac09accbc595a", "patch": "@@ -40,14 +40,10 @@ fn new_filemap(filename: filename, src: @str,\n                              start_pos_ch, start_pos_byte);\n }\n \n-fn get_substr_info(cm: codemap, sp: span)\n-    -> (filename, file_substr)\n+fn mk_substr_filename(cm: codemap, sp: span) -> str\n {\n     let pos = lookup_char_pos(cm, sp.lo);\n-    let name = #fmt(\"<%s:%u:%u>\", pos.file.name, pos.line, pos.col);\n-    ret (name, fss_internal(sp));\n-    //ret (name, fss_external({filename: pos.file.name,\n-    //                         line: pos.line, col: pos.col}));\n+    ret #fmt(\"<%s:%u:%u>\", pos.file.name, pos.line, pos.col);\n }\n \n fn next_line(file: filemap, chpos: uint, byte_pos: uint) {"}, {"sha": "104f49aebac6b1cc306f82ef4554e96567b942c6", "filename": "src/comp/syntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d808df893a085205cb6e113ce98ac09accbc595a/src%2Fcomp%2Fsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d808df893a085205cb6e113ce98ac09accbc595a/src%2Fcomp%2Fsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fexpand.rs?ref=d808df893a085205cb6e113ce98ac09accbc595a", "patch": "@@ -5,7 +5,7 @@ import std::map::hashmap;\n import syntax::ast::{crate, expr_, expr_mac, mac_invoc};\n import syntax::fold::*;\n import syntax::ext::base::*;\n-import syntax::ext::qquote::{expand_qquote,qq_helper};\n+import syntax::ext::qquote::{qq_helper};\n import syntax::parse::parser::parse_expr_from_source_str;\n \n import codemap::{span, expanded_from};"}, {"sha": "8899ff64f575970ea5fcce0c1cefdf195b5cc9ee", "filename": "src/comp/syntax/ext/qquote.rs", "status": "modified", "additions": 22, "deletions": 17, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d808df893a085205cb6e113ce98ac09accbc595a/src%2Fcomp%2Fsyntax%2Fext%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d808df893a085205cb6e113ce98ac09accbc595a/src%2Fcomp%2Fsyntax%2Fext%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fqquote.rs?ref=d808df893a085205cb6e113ce98ac09accbc595a", "patch": "@@ -143,18 +143,6 @@ fn expand_ast(ecx: ext_ctxt, _sp: span,\n         }\n     }\n     let body = get_mac_body(ecx,_sp,body);\n-    fn finish<T: qq_helper>(ecx: ext_ctxt, body: ast::mac_body_,\n-                            f: fn (p: parser) -> T)\n-        -> @ast::expr\n-    {\n-        let cm = ecx.session().parse_sess.cm;\n-        let str = @codemap::span_to_snippet(body.span, cm);\n-        let (fname, ss) = codemap::get_substr_info(cm, body.span);\n-        let node = parse_from_source_str\n-            (f, fname, ss, str,\n-             ecx.session().opts.cfg, ecx.session().parse_sess);\n-        ret expand_qquote(ecx, node.span(), *str, node);\n-    }\n \n     ret alt what {\n       \"expr\" {finish(ecx, body, parser::parse_expr)}\n@@ -181,10 +169,19 @@ fn parse_item(p: parser) -> @ast::item {\n     }\n }\n \n-fn expand_qquote<N: qq_helper>\n-    (ecx: ext_ctxt, sp: span, str: str, node: N)\n+fn finish<T: qq_helper>\n+    (ecx: ext_ctxt, body: ast::mac_body_, f: fn (p: parser) -> T)\n     -> @ast::expr\n {\n+    let cm = ecx.session().parse_sess.cm;\n+    let str = @codemap::span_to_snippet(body.span, cm);\n+    let fname = codemap::mk_substr_filename(cm, body.span);\n+    let node = parse_from_source_str\n+        (f, fname, codemap::fss_internal(body.span), str,\n+         ecx.session().opts.cfg, ecx.session().parse_sess);\n+    let loc = codemap::lookup_char_pos(cm, body.span.lo);\n+\n+    let sp = node.span();\n     let qcx = gather_anti_quotes(sp.lo, node);\n     let cx = qcx;\n     let prev = 0u;\n@@ -197,7 +194,7 @@ fn expand_qquote<N: qq_helper>\n     let state = active;\n     let i = 0u, j = 0u;\n     let g_len = vec::len(cx.gather);\n-    str::chars_iter(str) {|ch|\n+    str::chars_iter(*str) {|ch|\n         if (j < g_len && i == cx.gather[j].lo) {\n             assert ch == '$';\n             let repl = #fmt(\"$%u \", j);\n@@ -227,8 +224,12 @@ fn expand_qquote<N: qq_helper>\n                        [\"syntax\", \"parse\", \"parser\",\n                         \"parse_from_source_str\"],\n                        [node.mk_parse_fn(cx,sp),\n-                        mk_str(cx,sp, \"<anon>\"),\n-                        mk_path(cx,sp, [\"syntax\", \"codemap\", \"fss_none\"]),\n+                        mk_str(cx,sp, fname),\n+                        mk_call(cx,sp,\n+                                [\"syntax\",\"ext\",\"qquote\", \"mk_file_substr\"],\n+                                [mk_str(cx,sp, loc.file.name),\n+                                 mk_uint(cx,sp, loc.line),\n+                                 mk_uint(cx,sp, loc.col)]),\n                         mk_unary(cx,sp, ast::box(ast::imm),\n                                  mk_str(cx,sp, str2)),\n                         mk_access_(cx,sp,\n@@ -305,6 +306,10 @@ fn print_expr(expr: @ast::expr) {\n     stdout.write_str(\"\\n\");\n }\n \n+fn mk_file_substr(fname: str, line: uint, col: uint) -> codemap::file_substr {\n+    codemap::fss_external({filename: fname, line: line, col: col})\n+}\n+\n // Local Variables:\n // mode: rust\n // fill-column: 78;"}]}