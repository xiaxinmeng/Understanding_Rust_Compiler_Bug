{"sha": "976850b69b6a76930c59c3a5a228b623abe9210b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3Njg1MGI2OWI2YTc2OTMwYzU5YzNhNWEyMjhiNjIzYWJlOTIxMGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-04T20:42:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-04T20:42:18Z"}, "message": "Auto merge of #6538 - Jarcho:vec_init_then_push, r=llogiq\n\nNew lint: vec_init_then_push\n\nfixes: #1483\n\nThis will trigger on `new`, `default`, and `with_capacity` when the given capacity is less than or equal to the number of push calls. Is there anything else this should trigger on?\n\nchangelog: Added lint: `vec_init_then_push`", "tree": {"sha": "351bcf94fb2aadd5fcb581c6c1f4378c74a97bb7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/351bcf94fb2aadd5fcb581c6c1f4378c74a97bb7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/976850b69b6a76930c59c3a5a228b623abe9210b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/976850b69b6a76930c59c3a5a228b623abe9210b", "html_url": "https://github.com/rust-lang/rust/commit/976850b69b6a76930c59c3a5a228b623abe9210b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/976850b69b6a76930c59c3a5a228b623abe9210b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "445eb99f55a7fceaae60dc484d49484fa19f4f55", "url": "https://api.github.com/repos/rust-lang/rust/commits/445eb99f55a7fceaae60dc484d49484fa19f4f55", "html_url": "https://github.com/rust-lang/rust/commit/445eb99f55a7fceaae60dc484d49484fa19f4f55"}, {"sha": "7b5f54954aa18991edd6e22edfd9af6bc9bae24b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b5f54954aa18991edd6e22edfd9af6bc9bae24b", "html_url": "https://github.com/rust-lang/rust/commit/7b5f54954aa18991edd6e22edfd9af6bc9bae24b"}], "stats": {"total": 264, "additions": 257, "deletions": 7}, "files": [{"sha": "38c943fec000dafe044215a8b5aead8d93e327e0", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/976850b69b6a76930c59c3a5a228b623abe9210b/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/976850b69b6a76930c59c3a5a228b623abe9210b/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=976850b69b6a76930c59c3a5a228b623abe9210b", "patch": "@@ -2281,6 +2281,7 @@ Released 2018-09-13\n [`useless_transmute`]: https://rust-lang.github.io/rust-clippy/master/index.html#useless_transmute\n [`useless_vec`]: https://rust-lang.github.io/rust-clippy/master/index.html#useless_vec\n [`vec_box`]: https://rust-lang.github.io/rust-clippy/master/index.html#vec_box\n+[`vec_init_then_push`]: https://rust-lang.github.io/rust-clippy/master/index.html#vec_init_then_push\n [`vec_resize_to_zero`]: https://rust-lang.github.io/rust-clippy/master/index.html#vec_resize_to_zero\n [`verbose_bit_mask`]: https://rust-lang.github.io/rust-clippy/master/index.html#verbose_bit_mask\n [`verbose_file_reads`]: https://rust-lang.github.io/rust-clippy/master/index.html#verbose_file_reads"}, {"sha": "f57c6bd6324f52db0e247a87321e7bc09246baa2", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/976850b69b6a76930c59c3a5a228b623abe9210b/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976850b69b6a76930c59c3a5a228b623abe9210b/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=976850b69b6a76930c59c3a5a228b623abe9210b", "patch": "@@ -342,6 +342,7 @@ mod unwrap_in_result;\n mod use_self;\n mod useless_conversion;\n mod vec;\n+mod vec_init_then_push;\n mod vec_resize_to_zero;\n mod verbose_file_reads;\n mod wildcard_dependencies;\n@@ -938,6 +939,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &use_self::USE_SELF,\n         &useless_conversion::USELESS_CONVERSION,\n         &vec::USELESS_VEC,\n+        &vec_init_then_push::VEC_INIT_THEN_PUSH,\n         &vec_resize_to_zero::VEC_RESIZE_TO_ZERO,\n         &verbose_file_reads::VERBOSE_FILE_READS,\n         &wildcard_dependencies::WILDCARD_DEPENDENCIES,\n@@ -1219,6 +1221,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box strings::StrToString);\n     store.register_late_pass(|| box strings::StringToString);\n     store.register_late_pass(|| box zero_sized_map_values::ZeroSizedMapValues);\n+    store.register_late_pass(|| box vec_init_then_push::VecInitThenPush::default());\n \n     store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         LintId::of(&arithmetic::FLOAT_ARITHMETIC),\n@@ -1642,6 +1645,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&unwrap::UNNECESSARY_UNWRAP),\n         LintId::of(&useless_conversion::USELESS_CONVERSION),\n         LintId::of(&vec::USELESS_VEC),\n+        LintId::of(&vec_init_then_push::VEC_INIT_THEN_PUSH),\n         LintId::of(&vec_resize_to_zero::VEC_RESIZE_TO_ZERO),\n         LintId::of(&write::PRINTLN_EMPTY_STRING),\n         LintId::of(&write::PRINT_LITERAL),\n@@ -1943,6 +1947,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&types::BOX_VEC),\n         LintId::of(&types::REDUNDANT_ALLOCATION),\n         LintId::of(&vec::USELESS_VEC),\n+        LintId::of(&vec_init_then_push::VEC_INIT_THEN_PUSH),\n     ]);\n \n     store.register_group(true, \"clippy::cargo\", Some(\"clippy_cargo\"), vec!["}, {"sha": "6249d7e867b3c879cf6fd98fbc95d91d71c828c1", "filename": "clippy_lints/src/vec_init_then_push.rs", "status": "added", "additions": 187, "deletions": 0, "changes": 187, "blob_url": "https://github.com/rust-lang/rust/blob/976850b69b6a76930c59c3a5a228b623abe9210b/clippy_lints%2Fsrc%2Fvec_init_then_push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976850b69b6a76930c59c3a5a228b623abe9210b/clippy_lints%2Fsrc%2Fvec_init_then_push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec_init_then_push.rs?ref=976850b69b6a76930c59c3a5a228b623abe9210b", "patch": "@@ -0,0 +1,187 @@\n+use crate::utils::{is_type_diagnostic_item, match_def_path, paths, snippet, span_lint_and_sugg};\n+use if_chain::if_chain;\n+use rustc_ast::ast::LitKind;\n+use rustc_errors::Applicability;\n+use rustc_hir::{BindingAnnotation, Block, Expr, ExprKind, Local, PatKind, QPath, Stmt, StmtKind};\n+use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_middle::lint::in_external_macro;\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::{symbol::sym, Span, Symbol};\n+use std::convert::TryInto;\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for calls to `push` immediately after creating a new `Vec`.\n+    ///\n+    /// **Why is this bad?** The `vec![]` macro is both more performant and easier to read than\n+    /// multiple `push` calls.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// let mut v = Vec::new();\n+    /// v.push(0);\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// let v = vec![0];\n+    /// ```\n+    pub VEC_INIT_THEN_PUSH,\n+    perf,\n+    \"`push` immediately after `Vec` creation\"\n+}\n+\n+impl_lint_pass!(VecInitThenPush => [VEC_INIT_THEN_PUSH]);\n+\n+#[derive(Default)]\n+pub struct VecInitThenPush {\n+    searcher: Option<VecPushSearcher>,\n+}\n+\n+#[derive(Clone, Copy)]\n+enum VecInitKind {\n+    New,\n+    WithCapacity(u64),\n+}\n+struct VecPushSearcher {\n+    init: VecInitKind,\n+    name: Symbol,\n+    lhs_is_local: bool,\n+    lhs_span: Span,\n+    err_span: Span,\n+    found: u64,\n+}\n+impl VecPushSearcher {\n+    fn display_err(&self, cx: &LateContext<'_>) {\n+        match self.init {\n+            _ if self.found == 0 => return,\n+            VecInitKind::WithCapacity(x) if x > self.found => return,\n+            _ => (),\n+        };\n+\n+        let mut s = if self.lhs_is_local {\n+            String::from(\"let \")\n+        } else {\n+            String::new()\n+        };\n+        s.push_str(&snippet(cx, self.lhs_span, \"..\"));\n+        s.push_str(\" = vec![..];\");\n+\n+        span_lint_and_sugg(\n+            cx,\n+            VEC_INIT_THEN_PUSH,\n+            self.err_span,\n+            \"calls to `push` immediately after creation\",\n+            \"consider using the `vec![]` macro\",\n+            s,\n+            Applicability::HasPlaceholders,\n+        );\n+    }\n+}\n+\n+impl LateLintPass<'_> for VecInitThenPush {\n+    fn check_local(&mut self, cx: &LateContext<'tcx>, local: &'tcx Local<'tcx>) {\n+        self.searcher = None;\n+        if_chain! {\n+            if !in_external_macro(cx.sess(), local.span);\n+            if let Some(init) = local.init;\n+            if let PatKind::Binding(BindingAnnotation::Mutable, _, ident, None) = local.pat.kind;\n+            if let Some(init_kind) = get_vec_init_kind(cx, init);\n+            then {\n+                self.searcher = Some(VecPushSearcher {\n+                        init: init_kind,\n+                        name: ident.name,\n+                        lhs_is_local: true,\n+                        lhs_span: local.ty.map_or(local.pat.span, |t| local.pat.span.to(t.span)),\n+                        err_span: local.span,\n+                        found: 0,\n+                    });\n+            }\n+        }\n+    }\n+\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n+        if self.searcher.is_none() {\n+            if_chain! {\n+                if !in_external_macro(cx.sess(), expr.span);\n+                if let ExprKind::Assign(left, right, _) = expr.kind;\n+                if let ExprKind::Path(QPath::Resolved(_, path)) = left.kind;\n+                if let Some(name) = path.segments.get(0);\n+                if let Some(init_kind) = get_vec_init_kind(cx, right);\n+                then {\n+                    self.searcher = Some(VecPushSearcher {\n+                        init: init_kind,\n+                        name: name.ident.name,\n+                        lhs_is_local: false,\n+                        lhs_span: left.span,\n+                        err_span: expr.span,\n+                        found: 0,\n+                    });\n+                }\n+            }\n+        }\n+    }\n+\n+    fn check_stmt(&mut self, cx: &LateContext<'tcx>, stmt: &'tcx Stmt<'_>) {\n+        if let Some(searcher) = self.searcher.take() {\n+            if_chain! {\n+                if let StmtKind::Expr(expr) | StmtKind::Semi(expr) = stmt.kind;\n+                if let ExprKind::MethodCall(path, _, [self_arg, _], _) = expr.kind;\n+                if path.ident.name.as_str() == \"push\";\n+                if let ExprKind::Path(QPath::Resolved(_, self_path)) = self_arg.kind;\n+                if let [self_name] = self_path.segments;\n+                if self_name.ident.name == searcher.name;\n+                then {\n+                    self.searcher = Some(VecPushSearcher {\n+                        found: searcher.found + 1,\n+                        err_span: searcher.err_span.to(stmt.span),\n+                        .. searcher\n+                    });\n+                } else {\n+                    searcher.display_err(cx);\n+                }\n+            }\n+        }\n+    }\n+\n+    fn check_block_post(&mut self, cx: &LateContext<'tcx>, _: &'tcx Block<'tcx>) {\n+        if let Some(searcher) = self.searcher.take() {\n+            searcher.display_err(cx);\n+        }\n+    }\n+}\n+\n+fn get_vec_init_kind<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) -> Option<VecInitKind> {\n+    if let ExprKind::Call(func, args) = expr.kind {\n+        match func.kind {\n+            ExprKind::Path(QPath::TypeRelative(ty, name))\n+                if is_type_diagnostic_item(cx, cx.typeck_results().node_type(ty.hir_id), sym::vec_type) =>\n+            {\n+                if name.ident.name.as_str() == \"new\" {\n+                    return Some(VecInitKind::New);\n+                } else if name.ident.name.as_str() == \"with_capacity\" {\n+                    return args.get(0).and_then(|arg| {\n+                        if_chain! {\n+                            if let ExprKind::Lit(lit) = &arg.kind;\n+                            if let LitKind::Int(num, _) = lit.node;\n+                            then {\n+                                Some(VecInitKind::WithCapacity(num.try_into().ok()?))\n+                            } else {\n+                                None\n+                            }\n+                        }\n+                    });\n+                }\n+            }\n+            ExprKind::Path(QPath::Resolved(_, path))\n+                if match_def_path(cx, path.res.opt_def_id()?, &paths::DEFAULT_TRAIT_METHOD)\n+                    && is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(expr), sym::vec_type) =>\n+            {\n+                return Some(VecInitKind::New);\n+            }\n+            _ => (),\n+        }\n+    }\n+    None\n+}"}, {"sha": "d924625132eb0ccc48844f6cfce21e54302c5615", "filename": "tests/ui/clone_on_copy.fixed", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/976850b69b6a76930c59c3a5a228b623abe9210b/tests%2Fui%2Fclone_on_copy.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/976850b69b6a76930c59c3a5a228b623abe9210b/tests%2Fui%2Fclone_on_copy.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclone_on_copy.fixed?ref=976850b69b6a76930c59c3a5a228b623abe9210b", "patch": "@@ -5,7 +5,8 @@\n     clippy::redundant_clone,\n     clippy::deref_addrof,\n     clippy::no_effect,\n-    clippy::unnecessary_operation\n+    clippy::unnecessary_operation,\n+    clippy::vec_init_then_push\n )]\n \n use std::cell::RefCell;"}, {"sha": "97f4946724458d5955f1d82b7ade9345f0a750b8", "filename": "tests/ui/clone_on_copy.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/976850b69b6a76930c59c3a5a228b623abe9210b/tests%2Fui%2Fclone_on_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976850b69b6a76930c59c3a5a228b623abe9210b/tests%2Fui%2Fclone_on_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclone_on_copy.rs?ref=976850b69b6a76930c59c3a5a228b623abe9210b", "patch": "@@ -5,7 +5,8 @@\n     clippy::redundant_clone,\n     clippy::deref_addrof,\n     clippy::no_effect,\n-    clippy::unnecessary_operation\n+    clippy::unnecessary_operation,\n+    clippy::vec_init_then_push\n )]\n \n use std::cell::RefCell;"}, {"sha": "7a706884fb0e7d74e71bba20d1b1ae331e4ca4f4", "filename": "tests/ui/clone_on_copy.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/976850b69b6a76930c59c3a5a228b623abe9210b/tests%2Fui%2Fclone_on_copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/976850b69b6a76930c59c3a5a228b623abe9210b/tests%2Fui%2Fclone_on_copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclone_on_copy.stderr?ref=976850b69b6a76930c59c3a5a228b623abe9210b", "patch": "@@ -1,31 +1,31 @@\n error: using `clone` on type `i32` which implements the `Copy` trait\n-  --> $DIR/clone_on_copy.rs:22:5\n+  --> $DIR/clone_on_copy.rs:23:5\n    |\n LL |     42.clone();\n    |     ^^^^^^^^^^ help: try removing the `clone` call: `42`\n    |\n    = note: `-D clippy::clone-on-copy` implied by `-D warnings`\n \n error: using `clone` on type `i32` which implements the `Copy` trait\n-  --> $DIR/clone_on_copy.rs:26:5\n+  --> $DIR/clone_on_copy.rs:27:5\n    |\n LL |     (&42).clone();\n    |     ^^^^^^^^^^^^^ help: try dereferencing it: `*(&42)`\n \n error: using `clone` on type `i32` which implements the `Copy` trait\n-  --> $DIR/clone_on_copy.rs:29:5\n+  --> $DIR/clone_on_copy.rs:30:5\n    |\n LL |     rc.borrow().clone();\n    |     ^^^^^^^^^^^^^^^^^^^ help: try dereferencing it: `*rc.borrow()`\n \n error: using `clone` on type `char` which implements the `Copy` trait\n-  --> $DIR/clone_on_copy.rs:35:14\n+  --> $DIR/clone_on_copy.rs:36:14\n    |\n LL |     is_ascii('z'.clone());\n    |              ^^^^^^^^^^^ help: try removing the `clone` call: `'z'`\n \n error: using `clone` on type `i32` which implements the `Copy` trait\n-  --> $DIR/clone_on_copy.rs:39:14\n+  --> $DIR/clone_on_copy.rs:40:14\n    |\n LL |     vec.push(42.clone());\n    |              ^^^^^^^^^^ help: try removing the `clone` call: `42`"}, {"sha": "642ce5040096eeab6356700737ebc203d30fe35d", "filename": "tests/ui/vec_init_then_push.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/976850b69b6a76930c59c3a5a228b623abe9210b/tests%2Fui%2Fvec_init_then_push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976850b69b6a76930c59c3a5a228b623abe9210b/tests%2Fui%2Fvec_init_then_push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvec_init_then_push.rs?ref=976850b69b6a76930c59c3a5a228b623abe9210b", "patch": "@@ -0,0 +1,21 @@\n+#![allow(unused_variables)]\n+#![warn(clippy::vec_init_then_push)]\n+\n+fn main() {\n+    let mut def_err: Vec<u32> = Default::default();\n+    def_err.push(0);\n+\n+    let mut new_err = Vec::<u32>::new();\n+    new_err.push(1);\n+\n+    let mut cap_err = Vec::with_capacity(2);\n+    cap_err.push(0);\n+    cap_err.push(1);\n+    cap_err.push(2);\n+\n+    let mut cap_ok = Vec::with_capacity(10);\n+    cap_ok.push(0);\n+\n+    new_err = Vec::new();\n+    new_err.push(0);\n+}"}, {"sha": "819ed47d0991989966686299a5455308042fb587", "filename": "tests/ui/vec_init_then_push.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/976850b69b6a76930c59c3a5a228b623abe9210b/tests%2Fui%2Fvec_init_then_push.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/976850b69b6a76930c59c3a5a228b623abe9210b/tests%2Fui%2Fvec_init_then_push.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvec_init_then_push.stderr?ref=976850b69b6a76930c59c3a5a228b623abe9210b", "patch": "@@ -0,0 +1,34 @@\n+error: calls to `push` immediately after creation\n+  --> $DIR/vec_init_then_push.rs:5:5\n+   |\n+LL | /     let mut def_err: Vec<u32> = Default::default();\n+LL | |     def_err.push(0);\n+   | |____________________^ help: consider using the `vec![]` macro: `let mut def_err: Vec<u32> = vec![..];`\n+   |\n+   = note: `-D clippy::vec-init-then-push` implied by `-D warnings`\n+\n+error: calls to `push` immediately after creation\n+  --> $DIR/vec_init_then_push.rs:8:5\n+   |\n+LL | /     let mut new_err = Vec::<u32>::new();\n+LL | |     new_err.push(1);\n+   | |____________________^ help: consider using the `vec![]` macro: `let mut new_err = vec![..];`\n+\n+error: calls to `push` immediately after creation\n+  --> $DIR/vec_init_then_push.rs:11:5\n+   |\n+LL | /     let mut cap_err = Vec::with_capacity(2);\n+LL | |     cap_err.push(0);\n+LL | |     cap_err.push(1);\n+LL | |     cap_err.push(2);\n+   | |____________________^ help: consider using the `vec![]` macro: `let mut cap_err = vec![..];`\n+\n+error: calls to `push` immediately after creation\n+  --> $DIR/vec_init_then_push.rs:19:5\n+   |\n+LL | /     new_err = Vec::new();\n+LL | |     new_err.push(0);\n+   | |____________________^ help: consider using the `vec![]` macro: `new_err = vec![..];`\n+\n+error: aborting due to 4 previous errors\n+"}]}