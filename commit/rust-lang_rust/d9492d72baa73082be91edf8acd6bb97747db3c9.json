{"sha": "d9492d72baa73082be91edf8acd6bb97747db3c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5NDkyZDcyYmFhNzMwODJiZTkxZWRmOGFjZDZiYjk3NzQ3ZGIzYzk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-13T00:59:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-13T00:59:19Z"}, "message": "auto merge of #8450 : alexcrichton/rust/nopt-changes, r=graydon\n\nSince the new runtime landed, the *-nopt builders have increased cycle time by roughly an hour. I have a feeling that this is because the entire runtime is in rust and it's not being optimized at all. In that past with an optimized C++ runtime it looks like things ran faster.\r\n\r\nThis adds the ability to disable optimizations in tests only, not for the entire compiler. This means that the entire compiler and associated libraries will be built with optimizations, but the tests themselves would be built and run without optimizations.\r\n\r\nThis isn't quite as good of a guarantee as disabling optimizations everywhere, but hopefully it'll improve cycle time for the *-nopt builds to move the queue along faster.", "tree": {"sha": "800800024633731da8320d0db2863c58961de764", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/800800024633731da8320d0db2863c58961de764"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9492d72baa73082be91edf8acd6bb97747db3c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9492d72baa73082be91edf8acd6bb97747db3c9", "html_url": "https://github.com/rust-lang/rust/commit/d9492d72baa73082be91edf8acd6bb97747db3c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9492d72baa73082be91edf8acd6bb97747db3c9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59da4e0bc971f3435f6e8b29ed9447a02f21487d", "url": "https://api.github.com/repos/rust-lang/rust/commits/59da4e0bc971f3435f6e8b29ed9447a02f21487d", "html_url": "https://github.com/rust-lang/rust/commit/59da4e0bc971f3435f6e8b29ed9447a02f21487d"}, {"sha": "88b89f84766930b1d6d7be1c558290c40e55d4ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/88b89f84766930b1d6d7be1c558290c40e55d4ff", "html_url": "https://github.com/rust-lang/rust/commit/88b89f84766930b1d6d7be1c558290c40e55d4ff"}], "stats": {"total": 11, "additions": 10, "deletions": 1}, "files": [{"sha": "9129fc0e19e5e5ffec8d1f85a1e6f87974d3774b", "filename": "configure", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d9492d72baa73082be91edf8acd6bb97747db3c9/configure", "raw_url": "https://github.com/rust-lang/rust/raw/d9492d72baa73082be91edf8acd6bb97747db3c9/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=d9492d72baa73082be91edf8acd6bb97747db3c9", "patch": "@@ -371,6 +371,7 @@ opt docs     1 \"build documentation\"\n opt optimize 1 \"build optimized rust code\"\n opt optimize-cxx 1 \"build optimized C++ code\"\n opt optimize-llvm 1 \"build optimized LLVM\"\n+opt optimize-tests 1 \"build tests with optimizations\"\n opt llvm-assertions 1 \"build LLVM with assertions\"\n opt debug 0 \"build with extra debug fun\"\n opt ratchet-bench 0 \"ratchet benchmarks\""}, {"sha": "e644248c370d29b5954f73cd1e1305f892229e68", "filename": "mk/tests.mk", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d9492d72baa73082be91edf8acd6bb97747db3c9/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/d9492d72baa73082be91edf8acd6bb97747db3c9/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=d9492d72baa73082be91edf8acd6bb97747db3c9", "patch": "@@ -552,7 +552,15 @@ TEST_SREQ$(1)_T_$(2)_H_$(3) = \\\n \n # The tests select when to use debug configuration on their own;\n # remove directive, if present, from CFG_RUSTC_FLAGS (issue #7898).\n-CTEST_RUSTC_FLAGS = $$(subst --cfg debug,,$$(CFG_RUSTC_FLAGS))\n+CTEST_RUSTC_FLAGS := $$(subst --cfg debug,,$$(CFG_RUSTC_FLAGS))\n+\n+# The tests can not be optimized while the rest of the compiler is optimized, so\n+# filter out the optimization (if any) from rustc and then figure out if we need\n+# to be optimized\n+CTEST_RUSTC_FLAGS := $$(subst -O,,$$(CTEST_RUSTC_FLAGS))\n+ifndef CFG_DISABLE_OPTIMIZE_TESTS\n+CTEST_RUSTC_FLAGS += -O\n+endif\n \n CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3) :=\t\t\t\t\t\t\\\n \t\t--compile-lib-path $$(HLIB$(1)_H_$(3))\t\t\t\t\\"}]}