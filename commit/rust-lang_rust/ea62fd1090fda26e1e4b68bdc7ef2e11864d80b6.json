{"sha": "ea62fd1090fda26e1e4b68bdc7ef2e11864d80b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhNjJmZDEwOTBmZGEyNmUxZTRiNjhiZGM3ZWYyZTExODY0ZDgwYjY=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-06-26T02:49:01Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-06-28T04:41:03Z"}, "message": "rustpkg: Implement RUST_PATH\n\nUnfortunately, the main test for this is ignored due to #7071.\n\nCloses #5682", "tree": {"sha": "f96628b6e5f499e6c55a27da069634cb8fbd8cea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f96628b6e5f499e6c55a27da069634cb8fbd8cea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea62fd1090fda26e1e4b68bdc7ef2e11864d80b6", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea62fd1090fda26e1e4b68bdc7ef2e11864d80b6", "html_url": "https://github.com/rust-lang/rust/commit/ea62fd1090fda26e1e4b68bdc7ef2e11864d80b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea62fd1090fda26e1e4b68bdc7ef2e11864d80b6/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b6dfb85782a6ec50c39292626acf2c74b0ae754", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b6dfb85782a6ec50c39292626acf2c74b0ae754", "html_url": "https://github.com/rust-lang/rust/commit/9b6dfb85782a6ec50c39292626acf2c74b0ae754"}], "stats": {"total": 105, "additions": 94, "deletions": 11}, "files": [{"sha": "c0425b4d2606443241f089e044981b709cf3da88", "filename": "src/librustpkg/path_util.rs", "status": "modified", "additions": 32, "deletions": 3, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ea62fd1090fda26e1e4b68bdc7ef2e11864d80b6/src%2Flibrustpkg%2Fpath_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea62fd1090fda26e1e4b68bdc7ef2e11864d80b6/src%2Flibrustpkg%2Fpath_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fpath_util.rs?ref=ea62fd1090fda26e1e4b68bdc7ef2e11864d80b6", "patch": "@@ -22,11 +22,40 @@ use core::iterator::IteratorUtil;\n use messages::*;\n use package_id::*;\n \n+fn push_if_exists(vec: &mut ~[Path], p: &Path) {\n+    let maybe_dir = p.push(\".rust\");\n+    if os::path_exists(&maybe_dir) {\n+        vec.push(maybe_dir);\n+    }\n+}\n+\n+#[cfg(windows)]\n+static path_entry_separator: &'static str = \";\";\n+#[cfg(not(windows))]\n+static path_entry_separator: &'static str = \":\";\n+\n /// Returns the value of RUST_PATH, as a list\n-/// of Paths. In general this should be read from the\n-/// environment; for now, it's hard-wired to just be \".\"\n+/// of Paths. Includes default entries for, if they exist:\n+/// $HOME/.rust\n+/// DIR/.rust for any DIR that's the current working directory\n+/// or an ancestor of it\n pub fn rust_path() -> ~[Path] {\n-    ~[Path(\".\")]\n+    let env_path: ~str = os::getenv(\"RUST_PATH\").get_or_default(~\"\");\n+    let mut env_rust_path: ~[Path] = match os::getenv(\"RUST_PATH\") {\n+        Some(env_path) => {\n+            let env_path_components: ~[&str] =\n+                env_path.split_str_iter(path_entry_separator).collect();\n+            env_path_components.map(|&s| Path(s))\n+        }\n+        None => ~[]\n+    };\n+    let cwd = os::getcwd();\n+    // now add in default entries\n+    env_rust_path.push(copy cwd);\n+    do cwd.each_parent() |p| { push_if_exists(&mut env_rust_path, p) };\n+    let h = os::homedir();\n+    for h.iter().advance |h| { push_if_exists(&mut env_rust_path, h); }\n+    env_rust_path\n }\n \n pub static u_rwx: i32 = (S_IRUSR | S_IWUSR | S_IXUSR) as i32;"}, {"sha": "8d8628c77181df40d8f55d36fc4c05b21e624cd9", "filename": "src/librustpkg/tests.rs", "status": "modified", "additions": 53, "deletions": 8, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/ea62fd1090fda26e1e4b68bdc7ef2e11864d80b6/src%2Flibrustpkg%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea62fd1090fda26e1e4b68bdc7ef2e11864d80b6/src%2Flibrustpkg%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Ftests.rs?ref=ea62fd1090fda26e1e4b68bdc7ef2e11864d80b6", "patch": "@@ -12,7 +12,7 @@\n \n use context::Ctx;\n use core::hashmap::HashMap;\n-use core::{io, libc, os, result, run, str};\n+use core::{io, libc, os, result, run, str, vec};\n use core::prelude::*;\n use extra::tempfile::mkdtemp;\n use core::run::ProcessOutput;\n@@ -25,7 +25,7 @@ use path_util::{target_executable_in_workspace, target_library_in_workspace,\n                make_dir_rwx, u_rwx, library_in_workspace,\n                built_bench_in_workspace, built_test_in_workspace,\n                built_library_in_workspace, built_executable_in_workspace,\n-                installed_library_in_workspace};\n+                installed_library_in_workspace, rust_path};\n use target::*;\n \n /// Returns the last-modified date as an Option\n@@ -562,13 +562,58 @@ fn package_script_with_default_build() {\n }\n \n #[test]\n-#[ignore (reason = \"RUST_PATH not yet implemented -- #5682\")]\n+#[ignore (reason = \"Un-ignore when #7071 is fixed\")]\n fn rust_path_test() {\n-    let dir = mk_workspace(&Path(\"/home/more_rust\"),\n-                           &normalize(RemotePath(Path(\"foo\"))),\n-                           &NoVersion);\n-  //  command_line_test(\"RUST_PATH=/home/rust:/home/more_rust rustpkg install foo\");\n-    command_line_test([~\"install\", ~\"foo\"], &dir);\n+    let dir_for_path = mkdtemp(&os::tmpdir(), \"more_rust\").expect(\"rust_path_test failed\");\n+    let dir = mk_workspace(&dir_for_path, &normalize(RemotePath(Path(\"foo\"))), &NoVersion);\n+    debug!(\"dir = %s\", dir.to_str());\n+    writeFile(&Path(\"/Users/tjc/more_rust/src/foo-0.1/main.rs\"),\n+              \"fn main() { let _x = (); }\");\n+\n+    let cwd = os::getcwd();\n+    debug!(\"cwd = %s\", cwd.to_str());\n+    let mut prog = run::Process::new(\"rustpkg\",\n+                                     [~\"install\", ~\"foo\"],\n+                                     run::ProcessOptions { env: Some(&[(~\"RUST_PATH\",\n+                                                                       dir_for_path.to_str())]),\n+                                                          dir: Some(&cwd),\n+                                                          in_fd: None,\n+                                                          out_fd: None,\n+                                                          err_fd: None\n+                                                         });\n+    prog.finish_with_output();\n+    assert_executable_exists(&dir_for_path, \"foo\");\n+}\n+\n+#[test]\n+fn rust_path_contents() {\n+    let dir = mkdtemp(&os::tmpdir(), \"rust_path\").expect(\"rust_path_contents failed\");\n+    let abc = &dir.push(\"A\").push(\"B\").push(\"C\");\n+    assert!(os::mkdir_recursive(&abc.push(\".rust\"), u_rwx));\n+    assert!(os::mkdir_recursive(&abc.pop().push(\".rust\"), u_rwx));\n+    assert!(os::mkdir_recursive(&abc.pop().pop().push(\".rust\"), u_rwx));\n+    assert!(do os::change_dir_locked(&dir.push(\"A\").push(\"B\").push(\"C\")) {\n+        let p = rust_path();\n+        let cwd = os::getcwd().push(\".rust\");\n+        let parent = cwd.pop().pop().push(\".rust\");\n+        let grandparent = cwd.pop().pop().pop().push(\".rust\");\n+        assert!(vec::contains(p, &cwd));\n+        assert!(vec::contains(p, &parent));\n+        assert!(vec::contains(p, &grandparent));\n+        for p.iter().advance() |a_path| {\n+            assert!(!a_path.components.is_empty());\n+        }\n+    });\n+}\n+\n+#[test]\n+fn rust_path_parse() {\n+    os::setenv(\"RUST_PATH\", \"/a/b/c:/d/e/f:/g/h/i\");\n+    let paths = rust_path();\n+    assert!(vec::contains(paths, &Path(\"/g/h/i\")));\n+    assert!(vec::contains(paths, &Path(\"/d/e/f\")));\n+    assert!(vec::contains(paths, &Path(\"/a/b/c\")));\n+    os::unsetenv(\"RUST_PATH\");\n }\n \n #[test]"}, {"sha": "897926940116f33dbe76c032f9884740f45df093", "filename": "src/libstd/path.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ea62fd1090fda26e1e4b68bdc7ef2e11864d80b6/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea62fd1090fda26e1e4b68bdc7ef2e11864d80b6/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=ea62fd1090fda26e1e4b68bdc7ef2e11864d80b6", "patch": "@@ -382,6 +382,15 @@ impl Path {\n             Some(ref st) => Some(st.st_mode as uint),\n         }\n     }\n+\n+    /// Execute a function on p as well as all of its ancestors\n+    pub fn each_parent(&self, f: &fn(&Path)) {\n+        if !self.components.is_empty() {\n+            f(self);\n+            self.pop().each_parent(f);\n+        }\n+    }\n+\n }\n \n #[cfg(target_os = \"freebsd\")]"}]}