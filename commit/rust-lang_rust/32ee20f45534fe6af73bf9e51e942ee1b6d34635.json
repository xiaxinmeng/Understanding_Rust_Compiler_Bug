{"sha": "32ee20f45534fe6af73bf9e51e942ee1b6d34635", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyZWUyMGY0NTUzNGZlNmFmNzNiZjllNTFlOTQyZWUxYjZkMzQ2MzU=", "commit": {"author": {"name": "Levente Kurusa", "email": "lkurusa@acm.org", "date": "2018-10-28T22:57:45Z"}, "committer": {"name": "Levente Kurusa", "email": "lkurusa@acm.org", "date": "2018-10-28T22:57:45Z"}, "message": "inline-asm: emit as many E0669 errors as we can\n\nSigned-off-by: Levente Kurusa <lkurusa@acm.org>", "tree": {"sha": "fa281fdce85eec3940d9bcec61d16e869d0d3f51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa281fdce85eec3940d9bcec61d16e869d0d3f51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32ee20f45534fe6af73bf9e51e942ee1b6d34635", "comment_count": 0, "verification": {"verified": false, "reason": "unverified_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEE9aWNXk3bBSVLHV6MKNaxXmtJEmkFAlvWPv4ACgkQKNaxXmtJ\nEmkxcAgAgW8FJMXoR881QwuQNHAHo8uU4r6f8aYWc2NiyqllNI2V7++dzYP+lD5V\n8eDJ1ZrOsZKoEBH5PsfcW9pwa2U1Vo7FHPmKdJvCiVOx57DFsmKXP5MrQDzy/52m\nGLCvmnE5nLqQHuLDD8peHW3wqmEZi+hd//MpUp4SGqHOP8FEHE4thh0nj/Q9boGu\nXnxZPtJcPkPg5CNXp3OG3fj31LEoUJikvTZWuxpUjdmImJFPEBtItzo98JtXS2X4\nyynxvvavIxpCPwxwTiauYJYEBNBwHC2KOyxT7Heu2HsHQa8j8i6GN+LXR7puAVDY\nScaTZrYTnvb1UVF7sQL+OyylsGUtnQ==\n=sLtd\n-----END PGP SIGNATURE-----", "payload": "tree fa281fdce85eec3940d9bcec61d16e869d0d3f51\nparent 4d7f08b1702840a4d8ade9cd9e9f83743e3241fd\nauthor Levente Kurusa <lkurusa@acm.org> 1540767465 +0100\ncommitter Levente Kurusa <lkurusa@acm.org> 1540767465 +0100\n\ninline-asm: emit as many E0669 errors as we can\n\nSigned-off-by: Levente Kurusa <lkurusa@acm.org>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32ee20f45534fe6af73bf9e51e942ee1b6d34635", "html_url": "https://github.com/rust-lang/rust/commit/32ee20f45534fe6af73bf9e51e942ee1b6d34635", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32ee20f45534fe6af73bf9e51e942ee1b6d34635/comments", "author": {"login": "levex", "id": 849140, "node_id": "MDQ6VXNlcjg0OTE0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/849140?v=4", "gravatar_id": "", "url": "https://api.github.com/users/levex", "html_url": "https://github.com/levex", "followers_url": "https://api.github.com/users/levex/followers", "following_url": "https://api.github.com/users/levex/following{/other_user}", "gists_url": "https://api.github.com/users/levex/gists{/gist_id}", "starred_url": "https://api.github.com/users/levex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/levex/subscriptions", "organizations_url": "https://api.github.com/users/levex/orgs", "repos_url": "https://api.github.com/users/levex/repos", "events_url": "https://api.github.com/users/levex/events{/privacy}", "received_events_url": "https://api.github.com/users/levex/received_events", "type": "User", "site_admin": false}, "committer": {"login": "levex", "id": 849140, "node_id": "MDQ6VXNlcjg0OTE0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/849140?v=4", "gravatar_id": "", "url": "https://api.github.com/users/levex", "html_url": "https://github.com/levex", "followers_url": "https://api.github.com/users/levex/followers", "following_url": "https://api.github.com/users/levex/following{/other_user}", "gists_url": "https://api.github.com/users/levex/gists{/gist_id}", "starred_url": "https://api.github.com/users/levex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/levex/subscriptions", "organizations_url": "https://api.github.com/users/levex/orgs", "repos_url": "https://api.github.com/users/levex/repos", "events_url": "https://api.github.com/users/levex/events{/privacy}", "received_events_url": "https://api.github.com/users/levex/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d7f08b1702840a4d8ade9cd9e9f83743e3241fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d7f08b1702840a4d8ade9cd9e9f83743e3241fd", "html_url": "https://github.com/rust-lang/rust/commit/4d7f08b1702840a4d8ade9cd9e9f83743e3241fd"}], "stats": {"total": 13, "additions": 5, "deletions": 8}, "files": [{"sha": "50e3dc9d53f5ca303865263a2635113748508fa1", "filename": "src/librustc_codegen_llvm/mir/statement.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/32ee20f45534fe6af73bf9e51e942ee1b6d34635/src%2Flibrustc_codegen_llvm%2Fmir%2Fstatement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32ee20f45534fe6af73bf9e51e942ee1b6d34635/src%2Flibrustc_codegen_llvm%2Fmir%2Fstatement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fstatement.rs?ref=32ee20f45534fe6af73bf9e51e942ee1b6d34635", "patch": "@@ -84,21 +84,18 @@ impl FunctionCx<'a, 'll, 'tcx> {\n                 }).collect();\n \n                 let input_vals = inputs.iter()\n-                    .try_fold(Vec::with_capacity(inputs.len()), |mut acc, (span, input)| {\n+                    .fold(Vec::with_capacity(inputs.len()), |mut acc, (span, input)| {\n                         let op = self.codegen_operand(&bx, input);\n                         if let OperandValue::Immediate(_) = op.val {\n                             acc.push(op.immediate());\n-                            Ok(acc)\n                         } else {\n-                            Err(span)\n+                            span_err!(bx.sess(), span.to_owned(), E0669,\n+                                     \"invalid value for constraint in inline assembly\");\n                         }\n+                        acc\n                 });\n \n-                if let Err(span) = input_vals {\n-                    span_err!(bx.sess(), span.to_owned(), E0669,\n-                             \"invalid value for constraint in inline assembly\");\n-                } else {\n-                    let input_vals = input_vals.unwrap();\n+                if input_vals.len() == inputs.len() {\n                     let res = asm::codegen_inline_asm(&bx, asm, outputs, input_vals);\n                     if !res {\n                         span_err!(bx.sess(), statement.source_info.span, E0668,"}]}