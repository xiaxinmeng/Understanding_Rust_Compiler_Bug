{"sha": "8dcb4d5ef745dcbe62c77f25415c21fcbe9f165c", "node_id": "C_kwDOAAsO6NoAKDhkY2I0ZDVlZjc0NWRjYmU2MmM3N2YyNTQxNWMyMWZjYmU5ZjE2NWM", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2023-03-11T17:02:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-11T17:02:15Z"}, "message": "Merge pull request #331 from rust-lang/to_slice\n\nAdd copy_to_slice", "tree": {"sha": "777cb092c4f115ac7b6c7da32825037919d6637d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/777cb092c4f115ac7b6c7da32825037919d6637d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8dcb4d5ef745dcbe62c77f25415c21fcbe9f165c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkDLQXCRBK7hj4Ov3rIwAALJUIAJzdmS5Qd2gG6ZOYFZYC9IgT\nWXA4m7GonkJw/N+dVge07YX043OarpH2a3IXIGWIHw1vp3a0+iIR8hjWXR5BLiCv\nyki/EDsd0cygS7PKBIbFLY8eMSVuCZacJylA1fmftnzdZDhKf9q2khUM816qM46G\nyLYKqQqNPdm/xyb4/O4gQImKyF6lAsaMjpR94lMU0v1cGc/aF9y5UOzgIVLCOAG8\n9zkqJ2xVfMixOdKJasIkodTTskXnDikJXice1OzM9nE5LSLvjJematAxWwTOvko5\nwiwY4GQXvzb+lam7xFm8pmkq1Qf6/jtZIUi4DcPU+eoJQ9E+NrzgLRfkFVgdiSU=\n=4m4d\n-----END PGP SIGNATURE-----\n", "payload": "tree 777cb092c4f115ac7b6c7da32825037919d6637d\nparent 9bd30e77b3a3c699af102ebb3df0f6110f8aa02e\nparent 36829ddca7de02b4d8bad31bdfb0fbc83664017b\nauthor Caleb Zulawski <caleb.zulawski@gmail.com> 1678554135 -0500\ncommitter GitHub <noreply@github.com> 1678554135 -0500\n\nMerge pull request #331 from rust-lang/to_slice\n\nAdd copy_to_slice"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8dcb4d5ef745dcbe62c77f25415c21fcbe9f165c", "html_url": "https://github.com/rust-lang/rust/commit/8dcb4d5ef745dcbe62c77f25415c21fcbe9f165c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8dcb4d5ef745dcbe62c77f25415c21fcbe9f165c/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9bd30e77b3a3c699af102ebb3df0f6110f8aa02e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9bd30e77b3a3c699af102ebb3df0f6110f8aa02e", "html_url": "https://github.com/rust-lang/rust/commit/9bd30e77b3a3c699af102ebb3df0f6110f8aa02e"}, {"sha": "36829ddca7de02b4d8bad31bdfb0fbc83664017b", "url": "https://api.github.com/repos/rust-lang/rust/commits/36829ddca7de02b4d8bad31bdfb0fbc83664017b", "html_url": "https://github.com/rust-lang/rust/commit/36829ddca7de02b4d8bad31bdfb0fbc83664017b"}], "stats": {"total": 33, "additions": 32, "deletions": 1}, "files": [{"sha": "3e39f1d623ce4f0dd35a5d880ac9e172f5dffd79", "filename": "crates/core_simd/src/vector.rs", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/8dcb4d5ef745dcbe62c77f25415c21fcbe9f165c/crates%2Fcore_simd%2Fsrc%2Fvector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dcb4d5ef745dcbe62c77f25415c21fcbe9f165c/crates%2Fcore_simd%2Fsrc%2Fvector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector.rs?ref=8dcb4d5ef745dcbe62c77f25415c21fcbe9f165c", "patch": "@@ -159,7 +159,7 @@ where\n     ///\n     /// Panics if the slice's length is less than the vector's `Simd::LANES`.\n     ///\n-    /// # Examples\n+    /// # Example\n     ///\n     /// ```\n     /// # #![feature(portable_simd)]\n@@ -174,12 +174,43 @@ where\n             slice.len() >= LANES,\n             \"slice length must be at least the number of lanes\"\n         );\n+        assert!(core::mem::size_of::<Self>() == LANES * core::mem::size_of::<T>());\n         // Safety:\n         // - We've checked the length is sufficient.\n         // - `T` and `Simd<T, N>` are Copy types.\n         unsafe { slice.as_ptr().cast::<Self>().read_unaligned() }\n     }\n \n+    /// Writes a SIMD vector to the first `LANES` elements of a slice.\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if the slice's length is less than the vector's `Simd::LANES`.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// # #![feature(portable_simd)]\n+    /// # #[cfg(feature = \"as_crate\")] use core_simd::simd;\n+    /// # #[cfg(not(feature = \"as_crate\"))] use core::simd;\n+    /// # use simd::u32x4;\n+    /// let mut dest = vec![0; 6];\n+    /// let v = u32x4::from_array([1, 2, 3, 4]);\n+    /// v.copy_to_slice(&mut dest);\n+    /// assert_eq!(&dest, &[1, 2, 3, 4, 0, 0]);\n+    /// ```\n+    pub fn copy_to_slice(self, slice: &mut [T]) {\n+        assert!(\n+            slice.len() >= LANES,\n+            \"slice length must be at least the number of lanes\"\n+        );\n+        assert!(core::mem::size_of::<Self>() == LANES * core::mem::size_of::<T>());\n+        // Safety:\n+        // - We've checked the length is sufficient\n+        // - `T` and `Simd<T, N>` are Copy types.\n+        unsafe { slice.as_mut_ptr().cast::<Self>().write_unaligned(self) }\n+    }\n+\n     /// Performs lanewise conversion of a SIMD vector's elements to another SIMD-valid type.\n     ///\n     /// This follows the semantics of Rust's `as` conversion for casting"}]}