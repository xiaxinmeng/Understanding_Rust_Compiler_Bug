{"sha": "e0f44730e8dc75c17dc86fcb48769d62a4dbcaae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwZjQ0NzMwZThkYzc1YzE3ZGM4NmZjYjQ4NzY5ZDYyYTRkYmNhYWU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-29T08:21:43Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-29T08:40:20Z"}, "message": "rustc: Support 'companion mod's for crates and directory mods\n\nUnder this scheme when parsing foo.rc the parser will also look for\nfoo.rs to fill in the crate-level module, and when evaluating a\ndirectory module directive it will look for a .rs file with the\nsame name as the directory.", "tree": {"sha": "f11e4626c0fad600fe133c0a2551c1d23ff17d8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f11e4626c0fad600fe133c0a2551c1d23ff17d8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0f44730e8dc75c17dc86fcb48769d62a4dbcaae", "comment_count": 2, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0f44730e8dc75c17dc86fcb48769d62a4dbcaae", "html_url": "https://github.com/rust-lang/rust/commit/e0f44730e8dc75c17dc86fcb48769d62a4dbcaae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0f44730e8dc75c17dc86fcb48769d62a4dbcaae/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2cebef095e61608a3d35710cb5fd3d7de18b68ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/2cebef095e61608a3d35710cb5fd3d7de18b68ac", "html_url": "https://github.com/rust-lang/rust/commit/2cebef095e61608a3d35710cb5fd3d7de18b68ac"}], "stats": {"total": 102, "additions": 88, "deletions": 14}, "files": [{"sha": "e4b60c4c21e340bacb6e1ceb9e6e0404a575c6e3", "filename": "src/comp/syntax/parse/eval.rs", "status": "modified", "additions": 60, "deletions": 5, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/e0f44730e8dc75c17dc86fcb48769d62a4dbcaae/src%2Fcomp%2Fsyntax%2Fparse%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0f44730e8dc75c17dc86fcb48769d62a4dbcaae/src%2Fcomp%2Fsyntax%2Fparse%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Feval.rs?ref=e0f44730e8dc75c17dc86fcb48769d62a4dbcaae", "patch": "@@ -1,5 +1,5 @@\n \n-import std::{str, option};\n+import std::{str, option, result, io, fs};\n import std::option::{some, none};\n import syntax::ast;\n import syntax::parse::token;\n@@ -25,11 +25,65 @@ fn eval_crate_directives(cx: ctx, cdirs: [@ast::crate_directive], prefix: str,\n }\n \n fn eval_crate_directives_to_mod(cx: ctx, cdirs: [@ast::crate_directive],\n-                                prefix: str) -> ast::_mod {\n+                                prefix: str, suffix: option::t<str>)\n+    -> (ast::_mod, [ast::attribute]) {\n+    log #fmt(\"eval crate prefix: %s\", prefix);\n+    log #fmt(\"eval crate suffix: %s\",\n+             option::from_maybe(\"none\", suffix));\n+    let (cview_items, citems, cattrs)\n+        = parse_companion_mod(cx, prefix, suffix);\n     let view_items: [@ast::view_item] = [];\n     let items: [@ast::item] = [];\n     eval_crate_directives(cx, cdirs, prefix, view_items, items);\n-    ret {view_items: view_items, items: items};\n+    ret ({view_items: view_items + cview_items,\n+          items: items + citems},\n+         cattrs);\n+}\n+\n+/*\n+The 'companion mod'. So .rc crates and directory mod crate directives define\n+modules but not a .rs file to fill those mods with stuff. The companion mod is\n+a convention for location a .rs file to go with them.  For .rc files the\n+companion mod is a .rs file with the same name; for directory mods the\n+companion mod is a .rs file with the same name as the directory.\n+\n+We build the path to the companion mod by combining the prefix and the\n+optional suffix then adding the .rs extension.\n+*/\n+fn parse_companion_mod(cx: ctx, prefix: str, suffix: option::t<str>)\n+    -> ([@ast::view_item], [@ast::item], [ast::attribute]) {\n+\n+    fn companion_file(prefix: str, suffix: option::t<str>) -> str {\n+        alt suffix {\n+          option::some(s) { fs::connect(prefix, s) }\n+          option::none. { prefix }\n+        } + \".rs\"\n+    }\n+\n+    fn file_exists(path: str) -> bool {\n+        // Crude, but there's no lib function for this and I'm not\n+        // up to writing it just now\n+        alt io::file_reader(path) {\n+          result::ok(_) { true }\n+          result::err(_) { false }\n+        }\n+    }\n+\n+    let modpath = companion_file(prefix, suffix);\n+    log #fmt(\"looking for companion mod %s\", modpath);\n+    if file_exists(modpath) {\n+        log \"found companion mod\";\n+        let p0 = new_parser_from_file(cx.sess, cx.cfg, modpath,\n+                                     cx.chpos, cx.byte_pos, SOURCE_FILE);\n+        let inner_attrs = parse_inner_attrs_and_next(p0);\n+        let first_item_outer_attrs = inner_attrs.next;\n+        let m0 = parse_mod_items(p0, token::EOF, first_item_outer_attrs);\n+        cx.chpos = p0.get_chpos();\n+        cx.byte_pos = p0.get_byte_pos();\n+        ret (m0.view_items, m0.items, inner_attrs.inner);\n+    } else {\n+        ret ([], [], []);\n+    }\n }\n \n fn eval_crate_directive(cx: ctx, cdir: @ast::crate_directive, prefix: str,\n@@ -66,10 +120,11 @@ fn eval_crate_directive(cx: ctx, cdir: @ast::crate_directive, prefix: str,\n             if std::fs::path_is_absolute(path) {\n                 path\n             } else { prefix + std::fs::path_sep() + path };\n-        let m0 = eval_crate_directives_to_mod(cx, cdirs, full_path);\n+        let (m0, a0) = eval_crate_directives_to_mod(\n+            cx, cdirs, full_path, none);\n         let i =\n             @{ident: id,\n-              attrs: attrs,\n+              attrs: attrs + a0,\n               id: cx.sess.next_id,\n               node: ast::item_mod(m0),\n               span: cdir.span};"}, {"sha": "98dcb1411924f12c2c4fba7e5b9ca0a5b28294d3", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e0f44730e8dc75c17dc86fcb48769d62a4dbcaae/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0f44730e8dc75c17dc86fcb48769d62a4dbcaae/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=e0f44730e8dc75c17dc86fcb48769d62a4dbcaae", "patch": "@@ -1,5 +1,5 @@\n \n-import std::{io, vec, str, option, either, result};\n+import std::{io, vec, str, option, either, result, fs};\n import std::option::{some, none};\n import std::either::{left, right};\n import std::map::{hashmap, new_str_hash};\n@@ -2599,13 +2599,15 @@ fn parse_crate_from_crate_file(input: str, cfg: ast::crate_cfg,\n           mutable chpos: p.get_chpos(),\n           mutable byte_pos: p.get_byte_pos(),\n           cfg: p.get_cfg()};\n-    let m = eval::eval_crate_directives_to_mod(cx, cdirs, prefix);\n+    let (companionmod, _) = fs::splitext(fs::basename(input));\n+    let (m, attrs) = eval::eval_crate_directives_to_mod(\n+        cx, cdirs, prefix, option::some(companionmod));\n     let hi = p.get_hi_pos();\n     expect(p, token::EOF);\n     ret @spanned(lo, hi,\n                  {directives: cdirs,\n                   module: m,\n-                  attrs: crate_attrs,\n+                  attrs: crate_attrs + attrs,\n                   config: p.get_cfg()});\n }\n "}, {"sha": "703862076a5fc2f1f6e9d052e5ed77f4037fd49c", "filename": "src/compiletest/compiletest.rc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e0f44730e8dc75c17dc86fcb48769d62a4dbcaae/src%2Fcompiletest%2Fcompiletest.rc", "raw_url": "https://github.com/rust-lang/rust/raw/e0f44730e8dc75c17dc86fcb48769d62a4dbcaae/src%2Fcompiletest%2Fcompiletest.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rc?ref=e0f44730e8dc75c17dc86fcb48769d62a4dbcaae", "patch": "@@ -1,6 +1,5 @@\n use std;\n \n-mod compiletest;\n mod procsrv;\n mod util;\n mod header;"}, {"sha": "9793b9d21c718ab090f0ed03385d1a9012704494", "filename": "src/fuzzer/fuzzer.rc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0f44730e8dc75c17dc86fcb48769d62a4dbcaae/src%2Ffuzzer%2Ffuzzer.rc", "raw_url": "https://github.com/rust-lang/rust/raw/e0f44730e8dc75c17dc86fcb48769d62a4dbcaae/src%2Ffuzzer%2Ffuzzer.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rc?ref=e0f44730e8dc75c17dc86fcb48769d62a4dbcaae", "patch": "@@ -3,8 +3,6 @@\n use std;\n use rustc;\n \n-mod fuzzer;\n-\n // Local Variables:\n // fill-column: 78;\n // indent-tabs-mode: nil"}, {"sha": "480b45ae6b4b1344734597c3d2f60f37ca2350cd", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e0f44730e8dc75c17dc86fcb48769d62a4dbcaae/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0f44730e8dc75c17dc86fcb48769d62a4dbcaae/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=e0f44730e8dc75c17dc86fcb48769d62a4dbcaae", "patch": "@@ -1,6 +1,3 @@\n-use std;\n-use rustc;\n-\n import std::{fs, io, getopts, math, vec, str, int, uint, option, result};\n import std::getopts::{optopt, opt_present, opt_str};\n import std::io::stdout;"}, {"sha": "e867ff713cd4479b92016923f2a2d2b71e3c47b0", "filename": "src/test/run-pass/companionmod-src/b.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0f44730e8dc75c17dc86fcb48769d62a4dbcaae/src%2Ftest%2Frun-pass%2Fcompanionmod-src%2Fb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0f44730e8dc75c17dc86fcb48769d62a4dbcaae/src%2Ftest%2Frun-pass%2Fcompanionmod-src%2Fb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcompanionmod-src%2Fb.rs?ref=e0f44730e8dc75c17dc86fcb48769d62a4dbcaae", "patch": "@@ -0,0 +1,2 @@\n+import g = x::f;\n+export g;\n\\ No newline at end of file"}, {"sha": "413b834fb11044c6a6090349498a0e3c630a4c57", "filename": "src/test/run-pass/companionmod-src/b/x.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e0f44730e8dc75c17dc86fcb48769d62a4dbcaae/src%2Ftest%2Frun-pass%2Fcompanionmod-src%2Fb%2Fx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0f44730e8dc75c17dc86fcb48769d62a4dbcaae/src%2Ftest%2Frun-pass%2Fcompanionmod-src%2Fb%2Fx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcompanionmod-src%2Fb%2Fx.rs?ref=e0f44730e8dc75c17dc86fcb48769d62a4dbcaae", "patch": "@@ -0,0 +1 @@\n+fn f() -> str { \"ralph\" }\n\\ No newline at end of file"}, {"sha": "e867ff713cd4479b92016923f2a2d2b71e3c47b0", "filename": "src/test/run-pass/companionmod-src/d.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0f44730e8dc75c17dc86fcb48769d62a4dbcaae/src%2Ftest%2Frun-pass%2Fcompanionmod-src%2Fd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0f44730e8dc75c17dc86fcb48769d62a4dbcaae/src%2Ftest%2Frun-pass%2Fcompanionmod-src%2Fd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcompanionmod-src%2Fd.rs?ref=e0f44730e8dc75c17dc86fcb48769d62a4dbcaae", "patch": "@@ -0,0 +1,2 @@\n+import g = x::f;\n+export g;\n\\ No newline at end of file"}, {"sha": "94f006f9a1f74da3004f9993a6cf34a6a8296e34", "filename": "src/test/run-pass/companionmod-src/d/x.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e0f44730e8dc75c17dc86fcb48769d62a4dbcaae/src%2Ftest%2Frun-pass%2Fcompanionmod-src%2Fd%2Fx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0f44730e8dc75c17dc86fcb48769d62a4dbcaae/src%2Ftest%2Frun-pass%2Fcompanionmod-src%2Fd%2Fx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcompanionmod-src%2Fd%2Fx.rs?ref=e0f44730e8dc75c17dc86fcb48769d62a4dbcaae", "patch": "@@ -0,0 +1 @@\n+fn f() -> str { \"nelson\" }\n\\ No newline at end of file"}, {"sha": "405e5efc846ed1dc8ae7a2ee91f6f9755cd8fdcf", "filename": "src/test/run-pass/companionmod.rc", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e0f44730e8dc75c17dc86fcb48769d62a4dbcaae/src%2Ftest%2Frun-pass%2Fcompanionmod.rc", "raw_url": "https://github.com/rust-lang/rust/raw/e0f44730e8dc75c17dc86fcb48769d62a4dbcaae/src%2Ftest%2Frun-pass%2Fcompanionmod.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcompanionmod.rc?ref=e0f44730e8dc75c17dc86fcb48769d62a4dbcaae", "patch": "@@ -0,0 +1,10 @@\n+// Test that crates and directory modules can contain code\n+\n+mod a = \"companionmod-src\" {\n+    mod b {\n+        mod x;\n+    }\n+    mod c = \"d\" {\n+        mod x;\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "9b9d1a00f0f6bb78b59fbcbb8290f6f55c09a41a", "filename": "src/test/run-pass/companionmod.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e0f44730e8dc75c17dc86fcb48769d62a4dbcaae/src%2Ftest%2Frun-pass%2Fcompanionmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0f44730e8dc75c17dc86fcb48769d62a4dbcaae/src%2Ftest%2Frun-pass%2Fcompanionmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcompanionmod.rs?ref=e0f44730e8dc75c17dc86fcb48769d62a4dbcaae", "patch": "@@ -0,0 +1,7 @@\n+// This isn't really xfailed; it's used by the companionmod.rc test\n+// xfail-test\n+\n+fn main() {\n+    assert a::b::g() == \"ralph\";\n+    assert a::c::g() == \"nelson\";\n+}\n\\ No newline at end of file"}]}