{"sha": "bccdba02960b3cd428addbc2c856065ebb81eb04", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjY2RiYTAyOTYwYjNjZDQyOGFkZGJjMmM4NTYwNjVlYmI4MWViMDQ=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2014-06-06T15:04:04Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2014-06-17T21:41:03Z"}, "message": "Add a b'x' byte literal of type u8.", "tree": {"sha": "09c67823ea70b74b18af5ba2470b337968d758aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09c67823ea70b74b18af5ba2470b337968d758aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bccdba02960b3cd428addbc2c856065ebb81eb04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bccdba02960b3cd428addbc2c856065ebb81eb04", "html_url": "https://github.com/rust-lang/rust/commit/bccdba02960b3cd428addbc2c856065ebb81eb04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bccdba02960b3cd428addbc2c856065ebb81eb04/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fd618e77accd37426819952ad443e50bb3c9015", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fd618e77accd37426819952ad443e50bb3c9015", "html_url": "https://github.com/rust-lang/rust/commit/2fd618e77accd37426819952ad443e50bb3c9015"}], "stats": {"total": 174, "additions": 169, "deletions": 5}, "files": [{"sha": "3c5b0664f03ec49e97dd5b74ffe16132718559dc", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bccdba02960b3cd428addbc2c856065ebb81eb04/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bccdba02960b3cd428addbc2c856065ebb81eb04/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=bccdba02960b3cd428addbc2c856065ebb81eb04", "patch": "@@ -506,6 +506,7 @@ pub fn lit_to_const(lit: &Lit) -> const_val {\n         LitBinary(ref data) => {\n             const_binary(Rc::new(data.iter().map(|x| *x).collect()))\n         }\n+        LitByte(n) => const_uint(n as u64),\n         LitChar(n) => const_uint(n as u64),\n         LitInt(n, _) => const_int(n),\n         LitUint(n, _) => const_uint(n),"}, {"sha": "4c11693e7a673b70df22c378280c2d39c8f69f03", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bccdba02960b3cd428addbc2c856065ebb81eb04/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bccdba02960b3cd428addbc2c856065ebb81eb04/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=bccdba02960b3cd428addbc2c856065ebb81eb04", "patch": "@@ -805,6 +805,7 @@ fn check_type_limits(cx: &Context, e: &ast::Expr) {\n                     } else { t };\n                     let (min, max) = uint_ty_range(uint_type);\n                     let lit_val: u64 = match lit.node {\n+                        ast::LitByte(_v) => return,  // _v is u8, within range by definition\n                         ast::LitInt(v, _) => v as u64,\n                         ast::LitUint(v, _) => v,\n                         ast::LitIntUnsuffixed(v) => v as u64,"}, {"sha": "f5e66a527e7fbcf4c89d6388a640e3fde98f70e4", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bccdba02960b3cd428addbc2c856065ebb81eb04/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bccdba02960b3cd428addbc2c856065ebb81eb04/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=bccdba02960b3cd428addbc2c856065ebb81eb04", "patch": "@@ -43,6 +43,7 @@ pub fn const_lit(cx: &CrateContext, e: &ast::Expr, lit: ast::Lit)\n     -> ValueRef {\n     let _icx = push_ctxt(\"trans_lit\");\n     match lit.node {\n+        ast::LitByte(b) => C_integral(Type::uint_from_ty(cx, ast::TyU8), b as u64, false),\n         ast::LitChar(i) => C_integral(Type::char(cx), i as u64, false),\n         ast::LitInt(i, t) => C_integral(Type::int_from_ty(cx, t), i as u64, true),\n         ast::LitUint(u, t) => C_integral(Type::uint_from_ty(cx, t), u, false),"}, {"sha": "2516a00ff7655359d7269c6798c7d06fac7c0a60", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bccdba02960b3cd428addbc2c856065ebb81eb04/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bccdba02960b3cd428addbc2c856065ebb81eb04/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=bccdba02960b3cd428addbc2c856065ebb81eb04", "patch": "@@ -1715,6 +1715,7 @@ pub fn check_lit(fcx: &FnCtxt, lit: &ast::Lit) -> ty::t {\n         ast::LitBinary(..) => {\n             ty::mk_slice(tcx, ty::ReStatic, ty::mt{ ty: ty::mk_u8(), mutbl: ast::MutImmutable })\n         }\n+        ast::LitByte(_) => ty::mk_u8(),\n         ast::LitChar(_) => ty::mk_char(),\n         ast::LitInt(_, t) => ty::mk_mach_int(t),\n         ast::LitUint(_, t) => ty::mk_mach_uint(t),"}, {"sha": "5e84a90121f26a903bdc7195f527dda43cfa8d4c", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bccdba02960b3cd428addbc2c856065ebb81eb04/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bccdba02960b3cd428addbc2c856065ebb81eb04/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=bccdba02960b3cd428addbc2c856065ebb81eb04", "patch": "@@ -1924,6 +1924,14 @@ fn lit_to_str(lit: &ast::Lit) -> String {\n     match lit.node {\n         ast::LitStr(ref st, _) => st.get().to_string(),\n         ast::LitBinary(ref data) => format!(\"{:?}\", data.as_slice()),\n+        ast::LitByte(b) => {\n+            let mut res = String::from_str(\"b'\");\n+            (b as char).escape_default(|c| {\n+                res.push_char(c);\n+            });\n+            res.push_char('\\'');\n+            res\n+        },\n         ast::LitChar(c) => format!(\"'{}'\", c),\n         ast::LitInt(i, _t) => i.to_str(),\n         ast::LitUint(u, _t) => u.to_str(),"}, {"sha": "8a63b55afed772f68b6dfd0595ad911fb68c3e10", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bccdba02960b3cd428addbc2c856065ebb81eb04/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bccdba02960b3cd428addbc2c856065ebb81eb04/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=bccdba02960b3cd428addbc2c856065ebb81eb04", "patch": "@@ -140,7 +140,7 @@ fn doit(sess: &parse::ParseSess, mut lexer: lexer::StringReader,\n             }\n \n             // text literals\n-            t::LIT_CHAR(..) | t::LIT_STR(..) | t::LIT_STR_RAW(..) => \"string\",\n+            t::LIT_BYTE(..) | t::LIT_CHAR(..) | t::LIT_STR(..) | t::LIT_STR_RAW(..) => \"string\",\n \n             // number literals\n             t::LIT_INT(..) | t::LIT_UINT(..) | t::LIT_INT_UNSUFFIXED(..) |"}, {"sha": "aeafc0e306c21e0e270c5ea8b0f626b888b80f08", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bccdba02960b3cd428addbc2c856065ebb81eb04/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bccdba02960b3cd428addbc2c856065ebb81eb04/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=bccdba02960b3cd428addbc2c856065ebb81eb04", "patch": "@@ -616,6 +616,7 @@ pub type Lit = Spanned<Lit_>;\n pub enum Lit_ {\n     LitStr(InternedString, StrStyle),\n     LitBinary(Rc<Vec<u8> >),\n+    LitByte(u8),\n     LitChar(char),\n     LitInt(i64, IntTy),\n     LitUint(u64, UintTy),"}, {"sha": "670e38327d6c421bebc5181f0abe1fffa7e1c066", "filename": "src/libsyntax/ext/concat.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bccdba02960b3cd428addbc2c856065ebb81eb04/src%2Flibsyntax%2Fext%2Fconcat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bccdba02960b3cd428addbc2c856065ebb81eb04/src%2Flibsyntax%2Fext%2Fconcat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fconcat.rs?ref=bccdba02960b3cd428addbc2c856065ebb81eb04", "patch": "@@ -47,6 +47,7 @@ pub fn expand_syntax_ext(cx: &mut base::ExtCtxt,\n                     ast::LitBool(b) => {\n                         accumulator.push_str(format!(\"{}\", b).as_slice());\n                     }\n+                    ast::LitByte(..) |\n                     ast::LitBinary(..) => {\n                         cx.span_err(e.span, \"cannot concatenate a binary literal\");\n                     }"}, {"sha": "407715ab4dae096e681d7a104f6aba9adf98da12", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bccdba02960b3cd428addbc2c856065ebb81eb04/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bccdba02960b3cd428addbc2c856065ebb81eb04/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=bccdba02960b3cd428addbc2c856065ebb81eb04", "patch": "@@ -436,6 +436,12 @@ fn mk_token(cx: &ExtCtxt, sp: Span, tok: &token::Token) -> Gc<ast::Expr> {\n                                 vec!(mk_binop(cx, sp, binop)));\n         }\n \n+        LIT_BYTE(i) => {\n+            let e_byte = cx.expr_lit(sp, ast::LitByte(i));\n+\n+            return cx.expr_call(sp, mk_token_path(cx, sp, \"LIT_BYTE\"), vec!(e_byte));\n+        }\n+\n         LIT_CHAR(i) => {\n             let e_char = cx.expr_lit(sp, ast::LitChar(i));\n "}, {"sha": "7e4cb195ceab68919fa0d6d28452b2e9b6ae8db0", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 65, "deletions": 3, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/bccdba02960b3cd428addbc2c856065ebb81eb04/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bccdba02960b3cd428addbc2c856065ebb81eb04/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=bccdba02960b3cd428addbc2c856065ebb81eb04", "patch": "@@ -650,10 +650,13 @@ impl<'a> StringReader<'a> {\n     /// token, and updates the interner\n     fn next_token_inner(&mut self) -> token::Token {\n         let c = self.curr;\n-        if ident_start(c) && !self.nextch_is('\"') && !self.nextch_is('#') {\n+        if ident_start(c) && match (c.unwrap(), self.nextch()) {\n             // Note: r as in r\" or r#\" is part of a raw string literal,\n-            // not an identifier, and is handled further down.\n-\n+            // b as in b' is part of a byte literal.\n+            // They are not identifiers, and are handled further down.\n+           ('r', Some('\"')) | ('r', Some('#')) | ('b', Some('\\'')) => false,\n+           _ => true\n+        } {\n             let start = self.last_pos;\n             while ident_continue(self.curr) {\n                 self.bump();\n@@ -854,6 +857,65 @@ impl<'a> StringReader<'a> {\n             self.bump(); // advance curr past token\n             return token::LIT_CHAR(c2);\n           }\n+          'b' => {\n+            self.bump();\n+            assert!(self.curr_is('\\''), \"Should have been a token::IDENT\");\n+            self.bump();\n+            let start = self.last_pos;\n+\n+            // the eof will be picked up by the final `'` check below\n+            let mut c2 = self.curr.unwrap_or('\\x00');\n+            self.bump();\n+\n+            match c2 {\n+                '\\\\' => {\n+                    // '\\X' for some X must be a character constant:\n+                    let escaped = self.curr;\n+                    let escaped_pos = self.last_pos;\n+                    self.bump();\n+                    match escaped {\n+                        None => {}\n+                        Some(e) => {\n+                            c2 = match e {\n+                                'n' => '\\n',\n+                                'r' => '\\r',\n+                                't' => '\\t',\n+                                '\\\\' => '\\\\',\n+                                '\\'' => '\\'',\n+                                '\"' => '\"',\n+                                '0' => '\\x00',\n+                                'x' => self.scan_numeric_escape(2u, '\\''),\n+                                c2 => {\n+                                    self.err_span_char(escaped_pos, self.last_pos,\n+                                                       \"unknown byte escape\", c2);\n+                                    c2\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+                '\\t' | '\\n' | '\\r' | '\\'' => {\n+                    self.err_span_char( start, self.last_pos,\n+                        \"byte constant must be escaped\", c2);\n+                }\n+                _ if c2 > '\\x7F' => {\n+                    self.err_span_char( start, self.last_pos,\n+                        \"byte constant must be ASCII. \\\n+                         Use a \\\\xHH escape for a non-ASCII byte\", c2);\n+                }\n+                _ => {}\n+            }\n+            if !self.curr_is('\\'') {\n+                self.fatal_span_verbose(\n+                                   // Byte offsetting here is okay because the\n+                                   // character before position `start` are an\n+                                   // ascii single quote and ascii 'b'.\n+                                   start - BytePos(2), self.last_pos,\n+                                   \"unterminated byte constant\".to_string());\n+            }\n+            self.bump(); // advance curr past token\n+            return token::LIT_BYTE(c2 as u8);\n+          }\n           '\"' => {\n             let mut accum_str = String::new();\n             let start_bpos = self.last_pos;"}, {"sha": "0bd47ede214d3718effa60093754f2a8b1e81aac", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bccdba02960b3cd428addbc2c856065ebb81eb04/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bccdba02960b3cd428addbc2c856065ebb81eb04/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=bccdba02960b3cd428addbc2c856065ebb81eb04", "patch": "@@ -33,7 +33,7 @@ use ast::{ForeignItem, ForeignItemStatic, ForeignItemFn, ForeignMod};\n use ast::{Ident, NormalFn, Inherited, Item, Item_, ItemStatic};\n use ast::{ItemEnum, ItemFn, ItemForeignMod, ItemImpl};\n use ast::{ItemMac, ItemMod, ItemStruct, ItemTrait, ItemTy, Lit, Lit_};\n-use ast::{LitBool, LitFloat, LitFloatUnsuffixed, LitInt, LitChar};\n+use ast::{LitBool, LitFloat, LitFloatUnsuffixed, LitInt, LitChar, LitByte};\n use ast::{LitIntUnsuffixed, LitNil, LitStr, LitUint, Local, LocalLet};\n use ast::{MutImmutable, MutMutable, Mac_, MacInvocTT, Matcher, MatchNonterminal};\n use ast::{MatchSeq, MatchTok, Method, MutTy, BiMul, Mutability};\n@@ -1512,6 +1512,7 @@ impl<'a> Parser<'a> {\n     // matches token_lit = LIT_INT | ...\n     pub fn lit_from_token(&mut self, tok: &token::Token) -> Lit_ {\n         match *tok {\n+            token::LIT_BYTE(i) => LitByte(i),\n             token::LIT_CHAR(i) => LitChar(i),\n             token::LIT_INT(i, it) => LitInt(i, it),\n             token::LIT_UINT(u, ut) => LitUint(u, ut),"}, {"sha": "b8f13624a32d10881b71d29ff4e862685deb4af4", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bccdba02960b3cd428addbc2c856065ebb81eb04/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bccdba02960b3cd428addbc2c856065ebb81eb04/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=bccdba02960b3cd428addbc2c856065ebb81eb04", "patch": "@@ -78,6 +78,7 @@ pub enum Token {\n     DOLLAR,\n \n     /* Literals */\n+    LIT_BYTE(u8),\n     LIT_CHAR(char),\n     LIT_INT(i64, ast::IntTy),\n     LIT_UINT(u64, ast::UintTy),\n@@ -193,6 +194,14 @@ pub fn to_str(t: &Token) -> String {\n       DOLLAR => \"$\".to_string(),\n \n       /* Literals */\n+      LIT_BYTE(b) => {\n+          let mut res = String::from_str(\"b'\");\n+          (b as char).escape_default(|c| {\n+              res.push_char(c);\n+          });\n+          res.push_char('\\'');\n+          res\n+      }\n       LIT_CHAR(c) => {\n           let mut res = String::from_str(\"'\");\n           c.escape_default(|c| {\n@@ -273,6 +282,7 @@ pub fn can_begin_expr(t: &Token) -> bool {\n       IDENT(_, _) => true,\n       UNDERSCORE => true,\n       TILDE => true,\n+      LIT_BYTE(_) => true,\n       LIT_CHAR(_) => true,\n       LIT_INT(_, _) => true,\n       LIT_UINT(_, _) => true,\n@@ -311,6 +321,7 @@ pub fn close_delimiter_for(t: &Token) -> Option<Token> {\n \n pub fn is_lit(t: &Token) -> bool {\n     match *t {\n+      LIT_BYTE(_) => true,\n       LIT_CHAR(_) => true,\n       LIT_INT(_, _) => true,\n       LIT_UINT(_, _) => true,"}, {"sha": "6ea2eed293e75de192d6bbfe299bae31bb210208", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bccdba02960b3cd428addbc2c856065ebb81eb04/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bccdba02960b3cd428addbc2c856065ebb81eb04/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=bccdba02960b3cd428addbc2c856065ebb81eb04", "patch": "@@ -2305,6 +2305,12 @@ impl<'a> State<'a> {\n         }\n         match lit.node {\n             ast::LitStr(ref st, style) => self.print_string(st.get(), style),\n+            ast::LitByte(byte) => {\n+                let mut res = String::from_str(\"b'\");\n+                (byte as char).escape_default(|c| res.push_char(c));\n+                res.push_char('\\'');\n+                word(&mut self.s, res.as_slice())\n+            }\n             ast::LitChar(ch) => {\n                 let mut res = String::from_str(\"'\");\n                 ch.escape_default(|c| res.push_char(c));"}, {"sha": "436078fa762e57d1d99baa8e45618f8f4e8447f7", "filename": "src/test/compile-fail/byte-literals.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/bccdba02960b3cd428addbc2c856065ebb81eb04/src%2Ftest%2Fcompile-fail%2Fbyte-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bccdba02960b3cd428addbc2c856065ebb81eb04/src%2Ftest%2Fcompile-fail%2Fbyte-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbyte-literals.rs?ref=bccdba02960b3cd428addbc2c856065ebb81eb04", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+// ignore-tidy-tab\n+\n+static FOO: u8 = b'\\f';  //~ ERROR unknown byte escape\n+\n+pub fn main() {\n+    b'\\f';  //~ ERROR unknown byte escape\n+    b'\\x0Z';  //~ ERROR illegal character in numeric character escape: Z\n+    b'\t';  //~ ERROR byte constant must be escaped\n+    b''';  //~ ERROR byte constant must be escaped\n+    b'\u00e9';  //~ ERROR byte constant must be ASCII\n+    b'a  //~ ERROR unterminated byte constant\n+}\n+\n+"}, {"sha": "a3dc1174424bf49fe51ac6e6a08e15f2dda17329", "filename": "src/test/compile-fail/concat.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bccdba02960b3cd428addbc2c856065ebb81eb04/src%2Ftest%2Fcompile-fail%2Fconcat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bccdba02960b3cd428addbc2c856065ebb81eb04/src%2Ftest%2Fcompile-fail%2Fconcat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconcat.rs?ref=bccdba02960b3cd428addbc2c856065ebb81eb04", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n fn main() {\n+    concat!(b'f');  //~ ERROR: cannot concatenate a binary literal\n     concat!(foo);   //~ ERROR: expected a literal\n     concat!(foo()); //~ ERROR: expected a literal\n }"}, {"sha": "560b2f0337afd25a8f22421305f4e1ca601bd2f9", "filename": "src/test/run-pass/byte-literals.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/bccdba02960b3cd428addbc2c856065ebb81eb04/src%2Ftest%2Frun-pass%2Fbyte-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bccdba02960b3cd428addbc2c856065ebb81eb04/src%2Ftest%2Frun-pass%2Fbyte-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbyte-literals.rs?ref=bccdba02960b3cd428addbc2c856065ebb81eb04", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+static FOO: u8 = b'\\xF0';\n+\n+pub fn main() {\n+    assert_eq!(b'a', 97u8);\n+    assert_eq!(b'\\n', 10u8);\n+    assert_eq!(b'\\r', 13u8);\n+    assert_eq!(b'\\t', 9u8);\n+    assert_eq!(b'\\\\', 92u8);\n+    assert_eq!(b'\\'', 39u8);\n+    assert_eq!(b'\\\"', 34u8);\n+    assert_eq!(b'\\0', 0u8);\n+    assert_eq!(b'\\xF0', 240u8);\n+    assert_eq!(FOO, 240u8);\n+\n+    // FIXME: Do we want this to be valid?\n+    assert_eq!([42, ..b'\\t'].as_slice(), &[42, 42, 42, 42, 42, 42, 42, 42, 42]);\n+\n+    match 42 {\n+        b'*' => {},\n+        _ => fail!()\n+    }\n+\n+    match 100 {\n+        b'a' .. b'z' => {},\n+        _ => fail!()\n+    }\n+}"}]}