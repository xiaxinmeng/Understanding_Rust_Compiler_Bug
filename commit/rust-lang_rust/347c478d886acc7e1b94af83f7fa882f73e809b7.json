{"sha": "347c478d886acc7e1b94af83f7fa882f73e809b7", "node_id": "C_kwDOAAsO6NoAKDM0N2M0NzhkODg2YWNjN2UxYjk0YWY4M2Y3ZmE4ODJmNzNlODA5Yjc", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-11-04T17:52:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-04T17:52:29Z"}, "message": "Rollup merge of #103964 - clubby789:lint-enclosing-unsafe, r=compiler-errors\n\nGive a specific lint for unsafety not being inherited\n\nIn cases like\n```rs\nstatic mut FOO: u64 = 0;\nfn main() {\n    unsafe {static BAR: u64 = FOO;}\n}\n```\nand\n```rs\nfn foo() {\n  unsafe {\n    fn bar() {\n      unsafe_call();\n    }\n  }\n}\n```\nSpecifically inform the user that the unsafety is not inherited for the seperate enclosing items\nFixes #94077\nr? compiler-errors\n`@rustbot` label +A-diagnostics", "tree": {"sha": "9d036093f1f5c3db60c9c3c10ed2c20fe210b895", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d036093f1f5c3db60c9c3c10ed2c20fe210b895"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/347c478d886acc7e1b94af83f7fa882f73e809b7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjZVFdCRBK7hj4Ov3rIwAAtKkIAJjqGVPrUpCiuK7cS+89abuA\ntSYE43PGPjvCXs5To0zHeVeVE2249BLRS/ESJu5QlSk30C2ygmMf7qsK3Wl2m/pe\nl4o0yEkDPXKVUtn/2ksrUW2NBrhiRzl2TIcC017gOWH+QKkvrht6pV0lCxdhOK5W\nzkwe33+Wr8QGATJIt3AvqXpCJ+YlZu0Cdl2bBIVH3BB84+R3ZjJL1vMkOXAU70LO\nR0TF8u1++R27gNnKctJ8QqRvVezZ5VFnai+4KuTGw3Y7zgoSrw3kvkVlI4D1WWno\nS3QaKwZ0e6soqooE0B/B7xLluuD7uwJkheQg+RYJoDY2tI0TPOL4B0FiROF6iHg=\n=7Z+A\n-----END PGP SIGNATURE-----\n", "payload": "tree 9d036093f1f5c3db60c9c3c10ed2c20fe210b895\nparent 82d7de837c83063af323c6c3c003bf562f5a004e\nparent 28819cbb7e7ae05dc83e285ca936ac16876fd701\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1667584349 +0100\ncommitter GitHub <noreply@github.com> 1667584349 +0100\n\nRollup merge of #103964 - clubby789:lint-enclosing-unsafe, r=compiler-errors\n\nGive a specific lint for unsafety not being inherited\n\nIn cases like\n```rs\nstatic mut FOO: u64 = 0;\nfn main() {\n    unsafe {static BAR: u64 = FOO;}\n}\n```\nand\n```rs\nfn foo() {\n  unsafe {\n    fn bar() {\n      unsafe_call();\n    }\n  }\n}\n```\nSpecifically inform the user that the unsafety is not inherited for the seperate enclosing items\nFixes #94077\nr? compiler-errors\n`@rustbot` label +A-diagnostics\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/347c478d886acc7e1b94af83f7fa882f73e809b7", "html_url": "https://github.com/rust-lang/rust/commit/347c478d886acc7e1b94af83f7fa882f73e809b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/347c478d886acc7e1b94af83f7fa882f73e809b7/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82d7de837c83063af323c6c3c003bf562f5a004e", "url": "https://api.github.com/repos/rust-lang/rust/commits/82d7de837c83063af323c6c3c003bf562f5a004e", "html_url": "https://github.com/rust-lang/rust/commit/82d7de837c83063af323c6c3c003bf562f5a004e"}, {"sha": "28819cbb7e7ae05dc83e285ca936ac16876fd701", "url": "https://api.github.com/repos/rust-lang/rust/commits/28819cbb7e7ae05dc83e285ca936ac16876fd701", "html_url": "https://github.com/rust-lang/rust/commit/28819cbb7e7ae05dc83e285ca936ac16876fd701"}], "stats": {"total": 93, "additions": 84, "deletions": 9}, "files": [{"sha": "269d9f3b102c196d0c4279eee54ace23c52edc55", "filename": "compiler/rustc_mir_transform/src/check_unsafety.rs", "status": "modified", "additions": 34, "deletions": 9, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/347c478d886acc7e1b94af83f7fa882f73e809b7/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/347c478d886acc7e1b94af83f7fa882f73e809b7/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs?ref=347c478d886acc7e1b94af83f7fa882f73e809b7", "patch": "@@ -4,6 +4,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::hir_id::HirId;\n use rustc_hir::intravisit;\n+use rustc_hir::{BlockCheckMode, ExprKind, Node};\n use rustc_middle::mir::visit::{MutatingUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::*;\n use rustc_middle::ty::query::Providers;\n@@ -517,24 +518,48 @@ pub fn check_unsafety(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n     for &UnsafetyViolation { source_info, lint_root, kind, details } in violations.iter() {\n         let (description, note) = details.description_and_note();\n \n-        // Report an error.\n-        let unsafe_fn_msg =\n-            if unsafe_op_in_unsafe_fn_allowed(tcx, lint_root) { \" function or\" } else { \"\" };\n-\n         match kind {\n             UnsafetyViolationKind::General => {\n                 // once\n-                struct_span_err!(\n+                let unsafe_fn_msg = if unsafe_op_in_unsafe_fn_allowed(tcx, lint_root) {\n+                    \" function or\"\n+                } else {\n+                    \"\"\n+                };\n+\n+                let mut err = struct_span_err!(\n                     tcx.sess,\n                     source_info.span,\n                     E0133,\n                     \"{} is unsafe and requires unsafe{} block\",\n                     description,\n                     unsafe_fn_msg,\n-                )\n-                .span_label(source_info.span, description)\n-                .note(note)\n-                .emit();\n+                );\n+                err.span_label(source_info.span, description).note(note);\n+                let note_non_inherited = tcx.hir().parent_iter(lint_root).find(|(id, node)| {\n+                    if let Node::Expr(block) = node\n+                        && let ExprKind::Block(block, _) = block.kind\n+                        && let BlockCheckMode::UnsafeBlock(_) = block.rules\n+                    {\n+                        true\n+                    }\n+                    else if let Some(sig) = tcx.hir().fn_sig_by_hir_id(*id)\n+                        && sig.header.is_unsafe()\n+                    {\n+                        true\n+                    } else {\n+                        false\n+                    }\n+                });\n+                if let Some((id, _)) = note_non_inherited {\n+                    let span = tcx.hir().span(id);\n+                    err.span_label(\n+                        tcx.sess.source_map().guess_head_span(span),\n+                        \"items do not inherit unsafety from separate enclosing items\",\n+                    );\n+                }\n+\n+                err.emit();\n             }\n             UnsafetyViolationKind::UnsafeFn => tcx.struct_span_lint_hir(\n                 UNSAFE_OP_IN_UNSAFE_FN,"}, {"sha": "6d797caa0f94d174d27185e3b3b4ea12b0a026f1", "filename": "src/test/ui/unsafe/unsafe-not-inherited.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/347c478d886acc7e1b94af83f7fa882f73e809b7/src%2Ftest%2Fui%2Funsafe%2Funsafe-not-inherited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/347c478d886acc7e1b94af83f7fa882f73e809b7/src%2Ftest%2Fui%2Funsafe%2Funsafe-not-inherited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-not-inherited.rs?ref=347c478d886acc7e1b94af83f7fa882f73e809b7", "patch": "@@ -0,0 +1,26 @@\n+#![allow(unused, dead_code)]\n+\n+static mut FOO: u64 = 0;\n+\n+fn static_mod() {\n+    unsafe {static BAR: u64 = FOO;}\n+    //~^ ERROR: use of mutable static is unsafe\n+    //~| NOTE: use of mutable static\n+    //~| NOTE: mutable statics can be mutated by multiple threads\n+    //~| NOTE: items do not inherit unsafety\n+}\n+\n+unsafe fn unsafe_call() {}\n+fn foo() {\n+    unsafe {\n+    //~^ NOTE: items do not inherit unsafety\n+        fn bar() {\n+            unsafe_call();\n+            //~^ ERROR: call to unsafe function\n+            //~| NOTE: call to unsafe function\n+            //~| NOTE: consult the function's documentation\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "3bc5ca5c9d151b6280f529612f7f9c333d22674a", "filename": "src/test/ui/unsafe/unsafe-not-inherited.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/347c478d886acc7e1b94af83f7fa882f73e809b7/src%2Ftest%2Fui%2Funsafe%2Funsafe-not-inherited.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/347c478d886acc7e1b94af83f7fa882f73e809b7/src%2Ftest%2Fui%2Funsafe%2Funsafe-not-inherited.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-not-inherited.stderr?ref=347c478d886acc7e1b94af83f7fa882f73e809b7", "patch": "@@ -0,0 +1,24 @@\n+error[E0133]: use of mutable static is unsafe and requires unsafe function or block\n+  --> $DIR/unsafe-not-inherited.rs:6:31\n+   |\n+LL |     unsafe {static BAR: u64 = FOO;}\n+   |     ------                    ^^^ use of mutable static\n+   |     |\n+   |     items do not inherit unsafety from separate enclosing items\n+   |\n+   = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior\n+\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/unsafe-not-inherited.rs:18:13\n+   |\n+LL |     unsafe {\n+   |     ------ items do not inherit unsafety from separate enclosing items\n+...\n+LL |             unsafe_call();\n+   |             ^^^^^^^^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0133`."}]}