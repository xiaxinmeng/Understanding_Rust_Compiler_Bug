{"sha": "3022afe3d144ca6acd34da9846ab74fa51328fda", "node_id": "C_kwDOAAsO6NoAKDMwMjJhZmUzZDE0NGNhNmFjZDM0ZGE5ODQ2YWI3NGZhNTEzMjhmZGE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-22T05:08:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-22T05:08:51Z"}, "message": "Auto merge of #103196 - Nilstrieb:no-meta-query, r=cjgillot\n\nGet rid of native_library projection queries\n\nThey don't seem particularly useful as I don't expect native libraries to change frequently.\n\nMaybe they do provide significant value of keeping incremental compilation green though, I'm not sure.", "tree": {"sha": "dfeb7f0905d61872c6b5fb08685671fbc225010a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfeb7f0905d61872c6b5fb08685671fbc225010a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3022afe3d144ca6acd34da9846ab74fa51328fda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3022afe3d144ca6acd34da9846ab74fa51328fda", "html_url": "https://github.com/rust-lang/rust/commit/3022afe3d144ca6acd34da9846ab74fa51328fda", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3022afe3d144ca6acd34da9846ab74fa51328fda/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eecde5850cade0c058dc12330081329b31a826c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/eecde5850cade0c058dc12330081329b31a826c7", "html_url": "https://github.com/rust-lang/rust/commit/eecde5850cade0c058dc12330081329b31a826c7"}, {"sha": "ccc54613c33208520ae030090a90d59c310c5624", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccc54613c33208520ae030090a90d59c310c5624", "html_url": "https://github.com/rust-lang/rust/commit/ccc54613c33208520ae030090a90d59c310c5624"}], "stats": {"total": 43, "additions": 18, "deletions": 25}, "files": [{"sha": "6f0d1b7ce8454ccdd73f7cdecc3aa7f0a6817b6b", "filename": "compiler/rustc_codegen_llvm/src/callee.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3022afe3d144ca6acd34da9846ab74fa51328fda/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3022afe3d144ca6acd34da9846ab74fa51328fda/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcallee.rs?ref=3022afe3d144ca6acd34da9846ab74fa51328fda", "patch": "@@ -179,7 +179,8 @@ pub fn get_fn<'ll, 'tcx>(cx: &CodegenCx<'ll, 'tcx>, instance: Instance<'tcx>) ->\n             // MinGW: For backward compatibility we rely on the linker to decide whether it\n             // should use dllimport for functions.\n             if cx.use_dll_storage_attrs\n-                && tcx.is_dllimport_foreign_item(instance_def_id)\n+                && let Some(library) = tcx.native_library(instance_def_id)\n+                && library.kind.is_dllimport()\n                 && !matches!(tcx.sess.target.env.as_ref(), \"gnu\" | \"uclibc\")\n             {\n                 llvm::LLVMSetDLLStorageClass(llfn, llvm::DLLStorageClass::DllImport);"}, {"sha": "dd3c43ba5ca7ccb4cf7aef75058b629630757246", "filename": "compiler/rustc_codegen_llvm/src/consts.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3022afe3d144ca6acd34da9846ab74fa51328fda/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3022afe3d144ca6acd34da9846ab74fa51328fda/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs?ref=3022afe3d144ca6acd34da9846ab74fa51328fda", "patch": "@@ -332,7 +332,10 @@ impl<'ll> CodegenCx<'ll, '_> {\n             }\n         }\n \n-        if self.use_dll_storage_attrs && self.tcx.is_dllimport_foreign_item(def_id) {\n+        if self.use_dll_storage_attrs\n+            && let Some(library) = self.tcx.native_library(def_id)\n+            && library.kind.is_dllimport()\n+        {\n             // For foreign (native) libs we know the exact storage type to use.\n             unsafe {\n                 llvm::LLVMSetDLLStorageClass(g, llvm::DLLStorageClass::DllImport);"}, {"sha": "13777507d71dd885e7f57139551fbdf2004c255f", "filename": "compiler/rustc_codegen_ssa/src/back/symbol_export.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3022afe3d144ca6acd34da9846ab74fa51328fda/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3022afe3d144ca6acd34da9846ab74fa51328fda/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs?ref=3022afe3d144ca6acd34da9846ab74fa51328fda", "patch": "@@ -76,7 +76,7 @@ fn reachable_non_generics_provider(tcx: TyCtxt<'_>, cnum: CrateNum) -> DefIdMap<\n             // let it through if it's included statically.\n             match tcx.hir().get_by_def_id(def_id) {\n                 Node::ForeignItem(..) => {\n-                    tcx.is_statically_included_foreign_item(def_id).then_some(def_id)\n+                    tcx.native_library(def_id).map_or(false, |library| library.kind.is_statically_included()).then_some(def_id)\n                 }\n \n                 // Only consider nodes that actually have exported symbols."}, {"sha": "41542c3283de9e3fa619ef1bbd6bf22753404822", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3022afe3d144ca6acd34da9846ab74fa51328fda/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3022afe3d144ca6acd34da9846ab74fa51328fda/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=3022afe3d144ca6acd34da9846ab74fa51328fda", "patch": "@@ -15,7 +15,6 @@ use rustc_middle::ty::fast_reject::SimplifiedType;\n use rustc_middle::ty::query::{ExternProviders, Providers};\n use rustc_middle::ty::{self, TyCtxt, Visibility};\n use rustc_session::cstore::{CrateSource, CrateStore};\n-use rustc_session::utils::NativeLibKind;\n use rustc_session::{Session, StableCrateId};\n use rustc_span::hygiene::{ExpnHash, ExpnId};\n use rustc_span::source_map::{Span, Spanned};\n@@ -340,20 +339,10 @@ pub(in crate::rmeta) fn provide(providers: &mut Providers) {\n     // resolve! Does this work? Unsure! That's what the issue is about\n     *providers = Providers {\n         allocator_kind: |tcx, ()| CStore::from_tcx(tcx).allocator_kind(),\n-        is_dllimport_foreign_item: |tcx, id| match tcx.native_library_kind(id) {\n-            Some(\n-                NativeLibKind::Dylib { .. } | NativeLibKind::RawDylib | NativeLibKind::Unspecified,\n-            ) => true,\n-            _ => false,\n-        },\n-        is_statically_included_foreign_item: |tcx, id| {\n-            matches!(tcx.native_library_kind(id), Some(NativeLibKind::Static { .. }))\n-        },\n         is_private_dep: |_tcx, cnum| {\n             assert_eq!(cnum, LOCAL_CRATE);\n             false\n         },\n-        native_library_kind: |tcx, id| tcx.native_library(id).map(|l| l.kind),\n         native_library: |tcx, id| {\n             tcx.native_libraries(id.krate)\n                 .iter()"}, {"sha": "80185f73eb8fdfed9c7abab308c23eb2c38aa950", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3022afe3d144ca6acd34da9846ab74fa51328fda/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3022afe3d144ca6acd34da9846ab74fa51328fda/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=3022afe3d144ca6acd34da9846ab74fa51328fda", "patch": "@@ -1587,16 +1587,6 @@ rustc_queries! {\n         separate_provide_extern\n     }\n \n-    query is_dllimport_foreign_item(def_id: DefId) -> bool {\n-        desc { |tcx| \"checking if `{}` is a a dylib\", tcx.def_path_str(def_id) }\n-    }\n-    query is_statically_included_foreign_item(def_id: DefId) -> bool {\n-        desc { |tcx| \"checking if `{}` is a staticlib\", tcx.def_path_str(def_id) }\n-    }\n-    query native_library_kind(def_id: DefId)\n-        -> Option<NativeLibKind> {\n-        desc { |tcx| \"getting the native library kind of `{}`\", tcx.def_path_str(def_id) }\n-    }\n     query native_library(def_id: DefId) -> Option<&'tcx NativeLib> {\n         desc { |tcx| \"getting the native library for `{}`\", tcx.def_path_str(def_id) }\n     }"}, {"sha": "9c97ce34f29e4011a5a63b7c6b125309897c6190", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3022afe3d144ca6acd34da9846ab74fa51328fda/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3022afe3d144ca6acd34da9846ab74fa51328fda/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=3022afe3d144ca6acd34da9846ab74fa51328fda", "patch": "@@ -52,7 +52,6 @@ use rustc_session::config::{EntryFnType, OptLevel, OutputFilenames, SymbolMangli\n use rustc_session::cstore::{CrateDepKind, CrateSource};\n use rustc_session::cstore::{ExternCrate, ForeignModule, LinkagePreference, NativeLib};\n use rustc_session::lint::LintExpectationId;\n-use rustc_session::utils::NativeLibKind;\n use rustc_session::Limits;\n use rustc_span::symbol::Symbol;\n use rustc_span::{Span, DUMMY_SP};"}, {"sha": "e65b6891e3221077fe6a50de79c7a37a91b90ee9", "filename": "compiler/rustc_session/src/utils.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3022afe3d144ca6acd34da9846ab74fa51328fda/compiler%2Frustc_session%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3022afe3d144ca6acd34da9846ab74fa51328fda/compiler%2Frustc_session%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Futils.rs?ref=3022afe3d144ca6acd34da9846ab74fa51328fda", "patch": "@@ -53,6 +53,17 @@ impl NativeLibKind {\n             NativeLibKind::RawDylib | NativeLibKind::Unspecified | NativeLibKind::LinkArg => false,\n         }\n     }\n+\n+    pub fn is_statically_included(&self) -> bool {\n+        matches!(self, NativeLibKind::Static { .. })\n+    }\n+\n+    pub fn is_dllimport(&self) -> bool {\n+        matches!(\n+            self,\n+            NativeLibKind::Dylib { .. } | NativeLibKind::RawDylib | NativeLibKind::Unspecified\n+        )\n+    }\n }\n \n #[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]"}]}