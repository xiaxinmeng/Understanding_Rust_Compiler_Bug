{"sha": "0ef16feb72a53694ce4d5bfa25894e51425eb35d", "node_id": "C_kwDOAAsO6NoAKDBlZjE2ZmViNzJhNTM2OTRjZTRkNWJmYTI1ODk0ZTUxNDI1ZWIzNWQ", "commit": {"author": {"name": "Miguel Guarniz", "email": "mi9uel9@gmail.com", "date": "2022-05-04T17:16:33Z"}, "committer": {"name": "Miguel Guarniz", "email": "mi9uel9@gmail.com", "date": "2022-05-13T15:46:05Z"}, "message": "remove OuterVisitor\n\nSigned-off-by: Miguel Guarniz <mi9uel9@gmail.com>", "tree": {"sha": "d596047befb8656eb53ce570bdd285a2dc47b312", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d596047befb8656eb53ce570bdd285a2dc47b312"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ef16feb72a53694ce4d5bfa25894e51425eb35d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ef16feb72a53694ce4d5bfa25894e51425eb35d", "html_url": "https://github.com/rust-lang/rust/commit/0ef16feb72a53694ce4d5bfa25894e51425eb35d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ef16feb72a53694ce4d5bfa25894e51425eb35d/comments", "author": {"login": "kckeiks", "id": 24687641, "node_id": "MDQ6VXNlcjI0Njg3NjQx", "avatar_url": "https://avatars.githubusercontent.com/u/24687641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kckeiks", "html_url": "https://github.com/kckeiks", "followers_url": "https://api.github.com/users/kckeiks/followers", "following_url": "https://api.github.com/users/kckeiks/following{/other_user}", "gists_url": "https://api.github.com/users/kckeiks/gists{/gist_id}", "starred_url": "https://api.github.com/users/kckeiks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kckeiks/subscriptions", "organizations_url": "https://api.github.com/users/kckeiks/orgs", "repos_url": "https://api.github.com/users/kckeiks/repos", "events_url": "https://api.github.com/users/kckeiks/events{/privacy}", "received_events_url": "https://api.github.com/users/kckeiks/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kckeiks", "id": 24687641, "node_id": "MDQ6VXNlcjI0Njg3NjQx", "avatar_url": "https://avatars.githubusercontent.com/u/24687641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kckeiks", "html_url": "https://github.com/kckeiks", "followers_url": "https://api.github.com/users/kckeiks/followers", "following_url": "https://api.github.com/users/kckeiks/following{/other_user}", "gists_url": "https://api.github.com/users/kckeiks/gists{/gist_id}", "starred_url": "https://api.github.com/users/kckeiks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kckeiks/subscriptions", "organizations_url": "https://api.github.com/users/kckeiks/orgs", "repos_url": "https://api.github.com/users/kckeiks/repos", "events_url": "https://api.github.com/users/kckeiks/events{/privacy}", "received_events_url": "https://api.github.com/users/kckeiks/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1f0209cd147e7b3d45059f6fcef050a29e03f6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1f0209cd147e7b3d45059f6fcef050a29e03f6d", "html_url": "https://github.com/rust-lang/rust/commit/b1f0209cd147e7b3d45059f6fcef050a29e03f6d"}], "stats": {"total": 91, "additions": 52, "deletions": 39}, "files": [{"sha": "b91249badd4e473e4b5ac72fea46342149cc9126", "filename": "compiler/rustc_passes/src/hir_id_validator.rs", "status": "modified", "additions": 52, "deletions": 39, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/0ef16feb72a53694ce4d5bfa25894e51425eb35d/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ef16feb72a53694ce4d5bfa25894e51425eb35d/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs?ref=0ef16feb72a53694ce4d5bfa25894e51425eb35d", "patch": "@@ -3,7 +3,7 @@ use rustc_data_structures::sync::Lock;\n use rustc_hir as hir;\n use rustc_hir::def_id::{LocalDefId, CRATE_DEF_ID};\n use rustc_hir::intravisit;\n-use rustc_hir::itemlikevisit::ItemLikeVisitor;\n+use rustc_hir::intravisit::Visitor;\n use rustc_hir::{HirId, ItemLocalId};\n use rustc_middle::hir::map::Map;\n use rustc_middle::hir::nested_filter;\n@@ -20,8 +20,30 @@ pub fn check_crate(tcx: TyCtxt<'_>) {\n     let hir_map = tcx.hir();\n \n     hir_map.par_for_each_module(|module_id| {\n-        hir_map\n-            .visit_item_likes_in_module(module_id, &mut OuterVisitor { hir_map, errors: &errors })\n+        let mut v = HirIdValidator {\n+            hir_map,\n+            owner: None,\n+            hir_ids_seen: Default::default(),\n+            errors: &errors,\n+        };\n+\n+        let module = tcx.hir_module_items(module_id);\n+\n+        for id in module.items() {\n+            v.visit_item(tcx.hir().item(id))\n+        }\n+\n+        for id in module.trait_items() {\n+            v.visit_trait_item(tcx.hir().trait_item(id))\n+        }\n+\n+        for id in module.impl_items() {\n+            v.visit_impl_item(tcx.hir().impl_item(id))\n+        }\n+\n+        for id in module.foreign_items() {\n+            v.visit_foreign_item(tcx.hir().foreign_item(id))\n+        }\n     });\n \n     let errors = errors.into_inner();\n@@ -39,45 +61,16 @@ struct HirIdValidator<'a, 'hir> {\n     errors: &'a Lock<Vec<String>>,\n }\n \n-struct OuterVisitor<'a, 'hir> {\n-    hir_map: Map<'hir>,\n-    errors: &'a Lock<Vec<String>>,\n-}\n-\n-impl<'a, 'hir> OuterVisitor<'a, 'hir> {\n-    fn new_inner_visitor(&self, hir_map: Map<'hir>) -> HirIdValidator<'a, 'hir> {\n+impl<'a, 'hir> HirIdValidator<'a, 'hir> {\n+    fn new_visitor(&self, hir_map: Map<'hir>) -> HirIdValidator<'a, 'hir> {\n         HirIdValidator {\n             hir_map,\n             owner: None,\n             hir_ids_seen: Default::default(),\n             errors: self.errors,\n         }\n     }\n-}\n-\n-impl<'a, 'hir> ItemLikeVisitor<'hir> for OuterVisitor<'a, 'hir> {\n-    fn visit_item(&mut self, i: &'hir hir::Item<'hir>) {\n-        let mut inner_visitor = self.new_inner_visitor(self.hir_map);\n-        inner_visitor.check(i.def_id, |this| intravisit::walk_item(this, i));\n-    }\n-\n-    fn visit_trait_item(&mut self, i: &'hir hir::TraitItem<'hir>) {\n-        let mut inner_visitor = self.new_inner_visitor(self.hir_map);\n-        inner_visitor.check(i.def_id, |this| intravisit::walk_trait_item(this, i));\n-    }\n-\n-    fn visit_impl_item(&mut self, i: &'hir hir::ImplItem<'hir>) {\n-        let mut inner_visitor = self.new_inner_visitor(self.hir_map);\n-        inner_visitor.check(i.def_id, |this| intravisit::walk_impl_item(this, i));\n-    }\n-\n-    fn visit_foreign_item(&mut self, i: &'hir hir::ForeignItem<'hir>) {\n-        let mut inner_visitor = self.new_inner_visitor(self.hir_map);\n-        inner_visitor.check(i.def_id, |this| intravisit::walk_foreign_item(this, i));\n-    }\n-}\n \n-impl<'a, 'hir> HirIdValidator<'a, 'hir> {\n     #[cold]\n     #[inline(never)]\n     fn error(&self, f: impl FnOnce() -> String) {\n@@ -146,6 +139,11 @@ impl<'a, 'hir> intravisit::Visitor<'hir> for HirIdValidator<'a, 'hir> {\n         self.hir_map\n     }\n \n+    fn visit_item(&mut self, i: &'hir hir::Item<'hir>) {\n+        let mut inner_visitor = self.new_visitor(self.hir_map);\n+        inner_visitor.check(i.def_id, |this| intravisit::walk_item(this, i));\n+    }\n+\n     fn visit_id(&mut self, hir_id: HirId) {\n         let owner = self.owner.expect(\"no owner\");\n \n@@ -163,11 +161,19 @@ impl<'a, 'hir> intravisit::Visitor<'hir> for HirIdValidator<'a, 'hir> {\n         self.hir_ids_seen.insert(hir_id.local_id);\n     }\n \n-    fn visit_impl_item_ref(&mut self, _: &'hir hir::ImplItemRef) {\n-        // Explicitly do nothing here. ImplItemRefs contain hir::Visibility\n-        // values that actually belong to an ImplItem instead of the ItemKind::Impl\n-        // we are currently in. So for those it's correct that they have a\n-        // different owner.\n+    fn visit_foreign_item(&mut self, i: &'hir hir::ForeignItem<'hir>) {\n+        let mut inner_visitor = self.new_visitor(self.hir_map);\n+        inner_visitor.check(i.def_id, |this| intravisit::walk_foreign_item(this, i));\n+    }\n+\n+    fn visit_trait_item(&mut self, i: &'hir hir::TraitItem<'hir>) {\n+        let mut inner_visitor = self.new_visitor(self.hir_map);\n+        inner_visitor.check(i.def_id, |this| intravisit::walk_trait_item(this, i));\n+    }\n+\n+    fn visit_impl_item(&mut self, i: &'hir hir::ImplItem<'hir>) {\n+        let mut inner_visitor = self.new_visitor(self.hir_map);\n+        inner_visitor.check(i.def_id, |this| intravisit::walk_impl_item(this, i));\n     }\n \n     fn visit_foreign_item_ref(&mut self, _: &'hir hir::ForeignItemRef) {\n@@ -176,4 +182,11 @@ impl<'a, 'hir> intravisit::Visitor<'hir> for HirIdValidator<'a, 'hir> {\n         // we are currently in. So for those it's correct that they have a\n         // different owner.\n     }\n+\n+    fn visit_impl_item_ref(&mut self, _: &'hir hir::ImplItemRef) {\n+        // Explicitly do nothing here. ImplItemRefs contain hir::Visibility\n+        // values that actually belong to an ImplItem instead of the ItemKind::Impl\n+        // we are currently in. So for those it's correct that they have a\n+        // different owner.\n+    }\n }"}]}