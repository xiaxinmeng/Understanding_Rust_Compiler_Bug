{"sha": "d9e86e574ad936f03a64c38dc7b7f39ddcc4eebd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5ZTg2ZTU3NGFkOTM2ZjAzYTY0YzM4ZGM3YjdmMzlkZGNjNGVlYmQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-13T16:28:34Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-13T16:28:34Z"}, "message": "Use rayon for parallel indexing", "tree": {"sha": "5c262f3209cacc1c67491a0f13d2efd8e4eea311", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c262f3209cacc1c67491a0f13d2efd8e4eea311"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9e86e574ad936f03a64c38dc7b7f39ddcc4eebd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9e86e574ad936f03a64c38dc7b7f39ddcc4eebd", "html_url": "https://github.com/rust-lang/rust/commit/d9e86e574ad936f03a64c38dc7b7f39ddcc4eebd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9e86e574ad936f03a64c38dc7b7f39ddcc4eebd/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "439e0fd32eb943ad7a0be37baf9a19791840ae1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/439e0fd32eb943ad7a0be37baf9a19791840ae1e", "html_url": "https://github.com/rust-lang/rust/commit/439e0fd32eb943ad7a0be37baf9a19791840ae1e"}], "stats": {"total": 37, "additions": 35, "deletions": 2}, "files": [{"sha": "42a5aca14899607c20893d44a0d33eafdc0e0294", "filename": "crates/libanalysis/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d9e86e574ad936f03a64c38dc7b7f39ddcc4eebd/crates%2Flibanalysis%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d9e86e574ad936f03a64c38dc7b7f39ddcc4eebd/crates%2Flibanalysis%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2FCargo.toml?ref=d9e86e574ad936f03a64c38dc7b7f39ddcc4eebd", "patch": "@@ -8,6 +8,7 @@ log = \"0.4.2\"\n failure = \"0.1.2\"\n parking_lot = \"0.6.3\"\n once_cell = \"0.1.4\"\n+rayon = \"1.0.2\"\n fst = { git = \"https://github.com/matklad/fst\", branch = \"subsequence\"}\n libsyntax2 = { path = \"../libsyntax2\" }\n libeditor = { path = \"../libeditor\" }"}, {"sha": "ffd81bef87241483de8142e02dfd5eb472b04053", "filename": "crates/libanalysis/src/lib.rs", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d9e86e574ad936f03a64c38dc7b7f39ddcc4eebd/crates%2Flibanalysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9e86e574ad936f03a64c38dc7b7f39ddcc4eebd/crates%2Flibanalysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fsrc%2Flib.rs?ref=d9e86e574ad936f03a64c38dc7b7f39ddcc4eebd", "patch": "@@ -7,15 +7,21 @@ extern crate once_cell;\n extern crate libsyntax2;\n extern crate libeditor;\n extern crate fst;\n+extern crate rayon;\n \n mod symbol_index;\n \n use once_cell::sync::OnceCell;\n+use rayon::prelude::*;\n \n use std::{\n-    sync::Arc,\n+    sync::{\n+        Arc,\n+        atomic::{AtomicUsize, Ordering::SeqCst},\n+    },\n     collections::hash_map::HashMap,\n     path::{PathBuf, Path},\n+    time::Instant,\n };\n \n use libsyntax2::{\n@@ -29,6 +35,7 @@ use self::symbol_index::FileSymbols;\n pub use self::symbol_index::Query;\n \n pub type Result<T> = ::std::result::Result<T, ::failure::Error>;\n+const INDEXING_THRESHOLD: usize = 128;\n \n pub struct WorldState {\n     data: Arc<WorldData>\n@@ -56,7 +63,9 @@ impl WorldState {\n \n     pub fn change_files(&mut self, changes: impl Iterator<Item=(PathBuf, Option<String>)>) {\n         let data = self.data_mut();\n+        let mut cnt = 0;\n         for (path, text) in changes {\n+            cnt += 1;\n             data.file_map.remove(&path);\n             if let Some(text) = text {\n                 let file_data = FileData::new(text);\n@@ -65,11 +74,15 @@ impl WorldState {\n                 data.file_map.remove(&path);\n             }\n         }\n+        *data.unindexed.get_mut() += cnt;\n     }\n \n     fn data_mut(&mut self) -> &mut WorldData {\n         if Arc::get_mut(&mut self.data).is_none() {\n             self.data = Arc::new(WorldData {\n+                unindexed: AtomicUsize::new(\n+                    self.data.unindexed.load(SeqCst)\n+                ),\n                 file_map: self.data.file_map.clone(),\n             });\n         }\n@@ -95,10 +108,11 @@ impl World {\n     }\n \n     pub fn world_symbols<'a>(&'a self, mut query: Query) -> impl Iterator<Item=(&'a Path, &'a FileSymbol)> + 'a {\n+        self.reindex();\n         self.data.file_map.iter()\n             .flat_map(move |(path, data)| {\n-                let path: &'a Path = path.as_path();\n                 let symbols = data.symbols();\n+                let path: &'a Path = path.as_path();\n                 query.process(symbols).into_iter().map(move |s| (path, s))\n             })\n     }\n@@ -129,6 +143,23 @@ impl World {\n         Ok(self.world_symbols(query).collect())\n     }\n \n+    fn reindex(&self) {\n+        let data = &*self.data;\n+        let unindexed = data.unindexed.load(SeqCst);\n+        if unindexed < INDEXING_THRESHOLD {\n+            return;\n+        }\n+        if unindexed == data.unindexed.compare_and_swap(unindexed, 0, SeqCst) {\n+            let now = Instant::now();\n+            data.file_map\n+                .par_iter()\n+                .for_each(|(_, data)| {\n+                    data.symbols();\n+                });\n+            info!(\"parallel indexing took {:?}\", now.elapsed());\n+        }\n+    }\n+\n     fn file_data(&self, path: &Path) -> Result<Arc<FileData>> {\n         match self.data.file_map.get(path) {\n             Some(data) => Ok(data.clone()),\n@@ -150,6 +181,7 @@ pub const BREAK: SearchResult = Err(Break);\n \n #[derive(Default, Debug)]\n struct WorldData {\n+    unindexed: AtomicUsize,\n     file_map: HashMap<PathBuf, Arc<FileData>>,\n }\n "}]}