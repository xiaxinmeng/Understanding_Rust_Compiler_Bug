{"sha": "d66ac392feb7b7a26ae98823e7bf9d47cef533fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2NmFjMzkyZmViN2I3YTI2YWU5ODgyM2U3YmY5ZDQ3Y2VmNTMzZmU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-24T07:27:26Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-24T08:38:35Z"}, "message": "rustdoc: Prune unexported consts", "tree": {"sha": "1e8b2326f27f0194021e2452b011ac7e7723087e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e8b2326f27f0194021e2452b011ac7e7723087e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d66ac392feb7b7a26ae98823e7bf9d47cef533fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d66ac392feb7b7a26ae98823e7bf9d47cef533fe", "html_url": "https://github.com/rust-lang/rust/commit/d66ac392feb7b7a26ae98823e7bf9d47cef533fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d66ac392feb7b7a26ae98823e7bf9d47cef533fe/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab86bade97470fa35b0a5f9c6ec5bc3a65d595a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab86bade97470fa35b0a5f9c6ec5bc3a65d595a8", "html_url": "https://github.com/rust-lang/rust/commit/ab86bade97470fa35b0a5f9c6ec5bc3a65d595a8"}], "stats": {"total": 71, "additions": 64, "deletions": 7}, "files": [{"sha": "31fc986d2402b994013cbed1d645b0b8e060fbe3", "filename": "src/rustdoc/prune_unexported_pass.rs", "status": "modified", "additions": 64, "deletions": 7, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/d66ac392feb7b7a26ae98823e7bf9d47cef533fe/src%2Frustdoc%2Fprune_unexported_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d66ac392feb7b7a26ae98823e7bf9d47cef533fe/src%2Frustdoc%2Fprune_unexported_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fprune_unexported_pass.rs?ref=d66ac392feb7b7a26ae98823e7bf9d47cef533fe", "patch": "@@ -22,7 +22,8 @@ fn fold_mod(fold: fold::fold<astsrv::srv>, doc: doc::moddoc) -> doc::moddoc {\n     let doc = fold::default_seq_fold_mod(fold, doc);\n     ~{\n         mods: doc::modlist(exported_mods(fold.ctxt, doc)),\n-        fns: doc::fnlist(exported_fns(fold.ctxt, doc))\n+        fns: doc::fnlist(exported_fns(fold.ctxt, doc)),\n+        consts: doc::constlist(exported_consts(fold.ctxt, doc))\n         with *doc\n     }\n }\n@@ -43,6 +44,14 @@ fn exported_fns(srv: astsrv::srv, doc: doc::moddoc) -> [doc::fndoc] {\n     )\n }\n \n+fn exported_consts(srv: astsrv::srv, doc: doc::moddoc) -> [doc::constdoc] {\n+    exported_things(\n+        srv, doc,\n+        exported_consts_from_crate,\n+        exported_consts_from_mod\n+    )\n+}\n+\n fn exported_things<T>(\n     srv: astsrv::srv,\n     doc: doc::moddoc,\n@@ -84,6 +93,20 @@ fn exported_fns_from_mod(\n     exported_fns_from(srv, doc, bind is_exported_from_mod(_, doc.id, _))\n }\n \n+fn exported_consts_from_crate(\n+    srv: astsrv::srv,\n+    doc: doc::moddoc\n+) -> [doc::constdoc] {\n+    exported_consts_from(srv, doc, is_exported_from_crate)\n+}\n+\n+fn exported_consts_from_mod(\n+    srv: astsrv::srv,\n+    doc: doc::moddoc\n+) -> [doc::constdoc] {\n+    exported_consts_from(srv, doc, bind is_exported_from_mod(_, doc.id, _))\n+}\n+\n fn exported_fns_from(\n     srv: astsrv::srv,\n     doc: doc::moddoc,\n@@ -112,6 +135,20 @@ fn exported_mods_from(\n     }\n }\n \n+fn exported_consts_from(\n+    srv: astsrv::srv,\n+    doc: doc::moddoc,\n+    is_exported: fn(astsrv::srv, str) -> bool\n+) -> [doc::constdoc] {\n+    vec::filter_map(*doc.consts) { |doc|\n+        if is_exported(srv, doc.name) {\n+            some(doc)\n+        } else {\n+            none\n+        }\n+    }\n+}\n+\n fn is_exported_from_mod(\n     srv: astsrv::srv,\n     mod_id: doc::ast_id,\n@@ -149,21 +186,21 @@ fn should_prune_unexported_fns() {\n }\n \n #[test]\n-fn should_prune_unexported_modules() {\n-    let source = \"mod a { export a; mod a { } mod b { } }\";\n+fn should_prune_unexported_fns_from_top_mod() {\n+    let source = \"export a; fn a() { } fn b() { }\";\n     let srv = astsrv::mk_srv_from_str(source);\n     let doc = extract::from_srv(srv, \"\");\n     let doc = run(srv, doc);\n-    assert vec::len(*doc.topmod.mods[0].mods) == 1u;\n+    assert vec::len(*doc.topmod.fns) == 1u;\n }\n \n #[test]\n-fn should_prune_unexported_fns_from_top_mod() {\n-    let source = \"export a; fn a() { } fn b() { }\";\n+fn should_prune_unexported_modules() {\n+    let source = \"mod a { export a; mod a { } mod b { } }\";\n     let srv = astsrv::mk_srv_from_str(source);\n     let doc = extract::from_srv(srv, \"\");\n     let doc = run(srv, doc);\n-    assert vec::len(*doc.topmod.fns) == 1u;\n+    assert vec::len(*doc.topmod.mods[0].mods) == 1u;\n }\n \n #[test]\n@@ -174,3 +211,23 @@ fn should_prune_unexported_modules_from_top_mod() {\n     let doc = run(srv, doc);\n     assert vec::len(*doc.topmod.mods) == 1u;\n }\n+\n+#[test]\n+fn should_prune_unexported_consts() {\n+    let source = \"mod a { export a; \\\n+                  const a: bool = true; \\\n+                  const b: bool = true; }\";\n+    let srv = astsrv::mk_srv_from_str(source);\n+    let doc = extract::from_srv(srv, \"\");\n+    let doc = run(srv, doc);\n+    assert vec::len(*doc.topmod.mods[0].consts) == 1u;\n+}\n+\n+#[test]\n+fn should_prune_unexported_consts_from_top_mod() {\n+    let source = \"export a; const a: bool = true; const b: bool = true;\";\n+    let srv = astsrv::mk_srv_from_str(source);\n+    let doc = extract::from_srv(srv, \"\");\n+    let doc = run(srv, doc);\n+    assert vec::len(*doc.topmod.consts) == 1u;\n+}"}]}