{"sha": "aa3580baa6f5ef69aba41a63297fb659bcd4b793", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhMzU4MGJhYTZmNWVmNjlhYmE0MWE2MzI5N2ZiNjU5YmNkNGI3OTM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2021-06-21T18:36:25Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2021-06-21T18:36:25Z"}, "message": "introduce helper function", "tree": {"sha": "fe9aabc99b4d48f2d853988205a11944d1b619c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe9aabc99b4d48f2d853988205a11944d1b619c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa3580baa6f5ef69aba41a63297fb659bcd4b793", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa3580baa6f5ef69aba41a63297fb659bcd4b793", "html_url": "https://github.com/rust-lang/rust/commit/aa3580baa6f5ef69aba41a63297fb659bcd4b793", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa3580baa6f5ef69aba41a63297fb659bcd4b793/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "186c09ae8381e0c8fb43c1d47341649d214362ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/186c09ae8381e0c8fb43c1d47341649d214362ad", "html_url": "https://github.com/rust-lang/rust/commit/186c09ae8381e0c8fb43c1d47341649d214362ad"}], "stats": {"total": 54, "additions": 32, "deletions": 22}, "files": [{"sha": "4c925a6f2370775a7c31ae85c0b3617c9f46cba7", "filename": "compiler/rustc_typeck/src/check/method/prelude2021.rs", "status": "modified", "additions": 32, "deletions": 22, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/aa3580baa6f5ef69aba41a63297fb659bcd4b793/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa3580baa6f5ef69aba41a63297fb659bcd4b793/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs?ref=aa3580baa6f5ef69aba41a63297fb659bcd4b793", "patch": "@@ -137,28 +137,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         segment.ident.name\n                     ));\n \n-                    if let Ok(self_expr) = self.sess().source_map().span_to_snippet(self_expr.span)\n-                    {\n-                        let derefs = \"*\".repeat(pick.autoderefs);\n-\n-                        let autoref = match pick.autoref_or_ptr_adjustment {\n-                            Some(probe::AutorefOrPtrAdjustment::Autoref {\n-                                mutbl: Mutability::Mut,\n-                                ..\n-                            }) => \"&mut \",\n-                            Some(probe::AutorefOrPtrAdjustment::Autoref {\n-                                mutbl: Mutability::Not,\n-                                ..\n-                            }) => \"&\",\n-                            Some(probe::AutorefOrPtrAdjustment::ToConstPtr) | None => \"\",\n-                        };\n-                        let self_adjusted = if let Some(probe::AutorefOrPtrAdjustment::ToConstPtr) =\n-                            pick.autoref_or_ptr_adjustment\n-                        {\n-                            format!(\"{}{} as *const _\", derefs, self_expr)\n-                        } else {\n-                            format!(\"{}{}{}\", autoref, derefs, self_expr)\n-                        };\n+                    let (self_adjusted, precise) = self.adjust_expr(pick, self_expr);\n+                    if precise {\n                         let args = args\n                             .iter()\n                             .skip(1)\n@@ -317,4 +297,34 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n         }\n     }\n+\n+    /// Creates a string version of the `expr` that includes explicit adjustments.\n+    /// Returns the string and also a bool indicating whther this is a *precise*\n+    /// suggestion.\n+    fn adjust_expr(&self, pick: &Pick<'tcx>, expr: &hir::Expr<'tcx>) -> (String, bool) {\n+        let derefs = \"*\".repeat(pick.autoderefs);\n+\n+        let autoref = match pick.autoref_or_ptr_adjustment {\n+            Some(probe::AutorefOrPtrAdjustment::Autoref { mutbl: Mutability::Mut, .. }) => \"&mut \",\n+            Some(probe::AutorefOrPtrAdjustment::Autoref { mutbl: Mutability::Not, .. }) => \"&\",\n+            Some(probe::AutorefOrPtrAdjustment::ToConstPtr) | None => \"\",\n+        };\n+\n+        let (expr_text, precise) =\n+            if let Ok(expr_text) = self.sess().source_map().span_to_snippet(expr.span) {\n+                (expr_text, true)\n+            } else {\n+                (format!(\"(..)\"), false)\n+            };\n+\n+        let adjusted_text = if let Some(probe::AutorefOrPtrAdjustment::ToConstPtr) =\n+            pick.autoref_or_ptr_adjustment\n+        {\n+            format!(\"{}{} as *const _\", derefs, expr_text)\n+        } else {\n+            format!(\"{}{}{}\", autoref, derefs, expr_text)\n+        };\n+\n+        (adjusted_text, precise)\n+    }\n }"}]}