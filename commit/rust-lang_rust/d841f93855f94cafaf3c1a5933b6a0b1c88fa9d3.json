{"sha": "d841f93855f94cafaf3c1a5933b6a0b1c88fa9d3", "node_id": "C_kwDOAAsO6NoAKGQ4NDFmOTM4NTVmOTRjYWZhZjNjMWE1OTMzYjZhMGIxYzg4ZmE5ZDM", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-12-15T13:57:13Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-12-15T13:57:13Z"}, "message": "Add .comment section with producer name\n\nFixes #1211", "tree": {"sha": "aba2de2dc6113bf750de05e6303b766adb48124e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aba2de2dc6113bf750de05e6303b766adb48124e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d841f93855f94cafaf3c1a5933b6a0b1c88fa9d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d841f93855f94cafaf3c1a5933b6a0b1c88fa9d3", "html_url": "https://github.com/rust-lang/rust/commit/d841f93855f94cafaf3c1a5933b6a0b1c88fa9d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d841f93855f94cafaf3c1a5933b6a0b1c88fa9d3/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d74e5b6cc7d7b015362e68ae2be88cfc3415ce3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d74e5b6cc7d7b015362e68ae2be88cfc3415ce3a", "html_url": "https://github.com/rust-lang/rust/commit/d74e5b6cc7d7b015362e68ae2be88cfc3415ce3a"}], "stats": {"total": 28, "additions": 22, "deletions": 6}, "files": [{"sha": "4cb556844b7e812dc797c0d98e640173b72210f0", "filename": "src/debuginfo/mod.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d841f93855f94cafaf3c1a5933b6a0b1c88fa9d3/src%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d841f93855f94cafaf3c1a5933b6a0b1c88fa9d3/src%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fmod.rs?ref=d841f93855f94cafaf3c1a5933b6a0b1c88fa9d3", "patch": "@@ -20,6 +20,14 @@ use indexmap::IndexSet;\n pub(crate) use emit::{DebugReloc, DebugRelocName};\n pub(crate) use unwind::UnwindContext;\n \n+pub(crate) fn producer() -> String {\n+    format!(\n+        \"cg_clif (rustc {}, cranelift {})\",\n+        rustc_interface::util::rustc_version_str().unwrap_or(\"unknown version\"),\n+        cranelift_codegen::VERSION,\n+    )\n+}\n+\n pub(crate) struct DebugContext {\n     endian: RunTimeEndian,\n \n@@ -57,11 +65,7 @@ impl DebugContext {\n \n         let mut dwarf = DwarfUnit::new(encoding);\n \n-        let producer = format!(\n-            \"cg_clif (rustc {}, cranelift {})\",\n-            rustc_interface::util::rustc_version_str().unwrap_or(\"unknown version\"),\n-            cranelift_codegen::VERSION,\n-        );\n+        let producer = producer();\n         let comp_dir = tcx\n             .sess\n             .opts"}, {"sha": "27cce7c15e1f7c3ed0d22aac2bf1dd7d730f7e74", "filename": "src/driver/aot.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d841f93855f94cafaf3c1a5933b6a0b1c88fa9d3/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d841f93855f94cafaf3c1a5933b6a0b1c88fa9d3/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=d841f93855f94cafaf3c1a5933b6a0b1c88fa9d3", "patch": "@@ -169,10 +169,22 @@ fn emit_cgu(\n fn emit_module(\n     output_filenames: &OutputFilenames,\n     prof: &SelfProfilerRef,\n-    object: cranelift_object::object::write::Object<'_>,\n+    mut object: cranelift_object::object::write::Object<'_>,\n     kind: ModuleKind,\n     name: String,\n ) -> Result<CompiledModule, String> {\n+    if object.format() == cranelift_object::object::BinaryFormat::Elf {\n+        let comment_section = object.add_section(\n+            Vec::new(),\n+            b\".comment\".to_vec(),\n+            cranelift_object::object::SectionKind::OtherString,\n+        );\n+        let mut producer = vec![0];\n+        producer.extend(crate::debuginfo::producer().as_bytes());\n+        producer.push(0);\n+        object.set_section_data(comment_section, producer, 1);\n+    }\n+\n     let tmp_file = output_filenames.temp_path(OutputType::Object, Some(&name));\n     let mut file = match File::create(&tmp_file) {\n         Ok(file) => file,"}]}