{"sha": "41110b0039aca086216f675e148effc68b15bf1d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxMTEwYjAwMzlhY2EwODYyMTZmNjc1ZTE0OGVmZmM2OGIxNWJmMWQ=", "commit": {"author": {"name": "Jakub Wieczorek", "email": "jakub.adam.wieczorek@gmail.com", "date": "2019-07-31T00:24:28Z"}, "committer": {"name": "Jakub Wieczorek", "email": "jakub.adam.wieczorek@gmail.com", "date": "2019-07-31T08:50:43Z"}, "message": "Extend the `use_self` lint to suggest uses of `Self::Variant`.", "tree": {"sha": "3cc2f1ee97c28dab2728e08fac496a73080480c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3cc2f1ee97c28dab2728e08fac496a73080480c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41110b0039aca086216f675e148effc68b15bf1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41110b0039aca086216f675e148effc68b15bf1d", "html_url": "https://github.com/rust-lang/rust/commit/41110b0039aca086216f675e148effc68b15bf1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41110b0039aca086216f675e148effc68b15bf1d/comments", "author": {"login": "jakubadamw", "id": 14150873, "node_id": "MDQ6VXNlcjE0MTUwODcz", "avatar_url": "https://avatars.githubusercontent.com/u/14150873?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubadamw", "html_url": "https://github.com/jakubadamw", "followers_url": "https://api.github.com/users/jakubadamw/followers", "following_url": "https://api.github.com/users/jakubadamw/following{/other_user}", "gists_url": "https://api.github.com/users/jakubadamw/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubadamw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubadamw/subscriptions", "organizations_url": "https://api.github.com/users/jakubadamw/orgs", "repos_url": "https://api.github.com/users/jakubadamw/repos", "events_url": "https://api.github.com/users/jakubadamw/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubadamw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubadamw", "id": 14150873, "node_id": "MDQ6VXNlcjE0MTUwODcz", "avatar_url": "https://avatars.githubusercontent.com/u/14150873?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubadamw", "html_url": "https://github.com/jakubadamw", "followers_url": "https://api.github.com/users/jakubadamw/followers", "following_url": "https://api.github.com/users/jakubadamw/following{/other_user}", "gists_url": "https://api.github.com/users/jakubadamw/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubadamw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubadamw/subscriptions", "organizations_url": "https://api.github.com/users/jakubadamw/orgs", "repos_url": "https://api.github.com/users/jakubadamw/repos", "events_url": "https://api.github.com/users/jakubadamw/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubadamw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3e913650e9850ccbb605ddc0d1a612fa70947d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3e913650e9850ccbb605ddc0d1a612fa70947d2", "html_url": "https://github.com/rust-lang/rust/commit/c3e913650e9850ccbb605ddc0d1a612fa70947d2"}], "stats": {"total": 100, "additions": 76, "deletions": 24}, "files": [{"sha": "3f93e019c66755398e4f70e63a339ee63b527e70", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 38, "deletions": 20, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/41110b0039aca086216f675e148effc68b15bf1d/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41110b0039aca086216f675e148effc68b15bf1d/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=41110b0039aca086216f675e148effc68b15bf1d", "patch": "@@ -51,9 +51,11 @@ declare_lint_pass!(UseSelf => [USE_SELF]);\n \n const SEGMENTS_MSG: &str = \"segments should be composed of at least 1 element\";\n \n-fn span_use_self_lint(cx: &LateContext<'_, '_>, path: &Path) {\n+fn span_use_self_lint(cx: &LateContext<'_, '_>, path: &Path, last_segment: Option<&PathSegment>) {\n+    let last_segment = last_segment.unwrap_or_else(|| path.segments.last().expect(SEGMENTS_MSG));\n+\n     // Path segments only include actual path, no methods or fields.\n-    let last_path_span = path.segments.last().expect(SEGMENTS_MSG).ident.span;\n+    let last_path_span = last_segment.ident.span;\n     // Only take path up to the end of last_path_span.\n     let span = path.span.with_hi(last_path_span.hi());\n \n@@ -80,22 +82,18 @@ impl<'a, 'tcx> Visitor<'tcx> for TraitImplTyVisitor<'a, 'tcx> {\n         let trait_ty = self.trait_type_walker.next();\n         let impl_ty = self.impl_type_walker.next();\n \n-        if let TyKind::Path(QPath::Resolved(_, path)) = &t.node {\n+        if_chain! {\n+            if let TyKind::Path(QPath::Resolved(_, path)) = &t.node;\n+\n             // The implementation and trait types don't match which means that\n             // the concrete type was specified by the implementation\n-            if impl_ty != trait_ty {\n-                if let Some(impl_ty) = impl_ty {\n-                    if self.item_type == impl_ty {\n-                        let is_self_ty = if let def::Res::SelfTy(..) = path.res {\n-                            true\n-                        } else {\n-                            false\n-                        };\n-\n-                        if !is_self_ty {\n-                            span_use_self_lint(self.cx, path);\n-                        }\n-                    }\n+            if impl_ty != trait_ty;\n+            if let Some(impl_ty) = impl_ty;\n+            if self.item_type == impl_ty;\n+            then {\n+                match path.res {\n+                    def::Res::SelfTy(..) => {},\n+                    _ => span_use_self_lint(self.cx, path, None)\n                 }\n             }\n         }\n@@ -220,15 +218,35 @@ struct UseSelfVisitor<'a, 'tcx> {\n \n impl<'a, 'tcx> Visitor<'tcx> for UseSelfVisitor<'a, 'tcx> {\n     fn visit_path(&mut self, path: &'tcx Path, _id: HirId) {\n+        if path.segments.len() >= 2 {\n+            let last_but_one = &path.segments[path.segments.len() - 2];\n+            if last_but_one.ident.name != kw::SelfUpper {\n+                let enum_def_id = match path.res {\n+                    Res::Def(DefKind::Variant, variant_def_id) =>\n+                        self.cx.tcx.parent(variant_def_id),\n+                    Res::Def(DefKind::Ctor(def::CtorOf::Variant, _), ctor_def_id) => {\n+                        let variant_def_id = self.cx.tcx.parent(ctor_def_id);\n+                        variant_def_id.and_then(|def_id| self.cx.tcx.parent(def_id))\n+                    }\n+                    _ => None\n+                };\n+\n+                if self.item_path.res.opt_def_id() == enum_def_id {\n+                    span_use_self_lint(self.cx, path, Some(last_but_one));\n+                }\n+            }\n+        }\n+\n         if path.segments.last().expect(SEGMENTS_MSG).ident.name != kw::SelfUpper {\n             if self.item_path.res == path.res {\n-                span_use_self_lint(self.cx, path);\n-            } else if let Res::Def(DefKind::Ctor(def::CtorOf::Struct, CtorKind::Fn), ctor_did) = path.res {\n-                if self.item_path.res.opt_def_id() == self.cx.tcx.parent(ctor_did) {\n-                    span_use_self_lint(self.cx, path);\n+                span_use_self_lint(self.cx, path, None);\n+            } else if let Res::Def(DefKind::Ctor(def::CtorOf::Struct, CtorKind::Fn), ctor_def_id) = path.res {\n+                if self.item_path.res.opt_def_id() == self.cx.tcx.parent(ctor_def_id) {\n+                    span_use_self_lint(self.cx, path, None);\n                 }\n             }\n         }\n+\n         walk_path(self, path);\n     }\n "}, {"sha": "ac2a1708b65e6e3c409467fd754fe38e82fb59e9", "filename": "tests/ui/use_self.fixed", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/41110b0039aca086216f675e148effc68b15bf1d/tests%2Fui%2Fuse_self.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/41110b0039aca086216f675e148effc68b15bf1d/tests%2Fui%2Fuse_self.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.fixed?ref=41110b0039aca086216f675e148effc68b15bf1d", "patch": "@@ -265,13 +265,21 @@ mod nesting {\n \n     enum Enum {\n         A,\n+        B(u64),\n+        C { field: bool }\n     }\n     impl Enum {\n         fn method() {\n             #[allow(unused_imports)]\n             use self::Enum::*; // Issue 3425\n             static STATIC: Enum = Enum::A; // Can't use Self as type\n         }\n+\n+        fn method2() {\n+            let _ = Self::B(42);\n+            let _ = Self::C { field: true };\n+            let _ = Self::A;\n+        }\n     }\n }\n "}, {"sha": "21b5833e56ee27189f69057bd9b5b4df478482ae", "filename": "tests/ui/use_self.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/41110b0039aca086216f675e148effc68b15bf1d/tests%2Fui%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41110b0039aca086216f675e148effc68b15bf1d/tests%2Fui%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.rs?ref=41110b0039aca086216f675e148effc68b15bf1d", "patch": "@@ -265,13 +265,21 @@ mod nesting {\n \n     enum Enum {\n         A,\n+        B(u64),\n+        C { field: bool }\n     }\n     impl Enum {\n         fn method() {\n             #[allow(unused_imports)]\n             use self::Enum::*; // Issue 3425\n             static STATIC: Enum = Enum::A; // Can't use Self as type\n         }\n+\n+        fn method2() {\n+            let _ = Enum::B(42);\n+            let _ = Enum::C { field: true };\n+            let _ = Enum::A;\n+        }\n     }\n }\n "}, {"sha": "12dd672e3f4b50456d4b2461f87ad3b86a23b7c8", "filename": "tests/ui/use_self.stderr", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/41110b0039aca086216f675e148effc68b15bf1d/tests%2Fui%2Fuse_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41110b0039aca086216f675e148effc68b15bf1d/tests%2Fui%2Fuse_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.stderr?ref=41110b0039aca086216f675e148effc68b15bf1d", "patch": "@@ -175,22 +175,40 @@ LL |                     Bar { foo: Foo {} }\n    |                     ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:304:13\n+  --> $DIR/use_self.rs:279:21\n+   |\n+LL |             let _ = Enum::B(42);\n+   |                     ^^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:280:21\n+   |\n+LL |             let _ = Enum::C { field: true };\n+   |                     ^^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:281:21\n+   |\n+LL |             let _ = Enum::A;\n+   |                     ^^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:312:13\n    |\n LL |             nested::A::fun_1();\n    |             ^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:305:13\n+  --> $DIR/use_self.rs:313:13\n    |\n LL |             nested::A::A;\n    |             ^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:307:13\n+  --> $DIR/use_self.rs:315:13\n    |\n LL |             nested::A {};\n    |             ^^^^^^^^^ help: use the applicable keyword: `Self`\n \n-error: aborting due to 31 previous errors\n+error: aborting due to 34 previous errors\n "}]}