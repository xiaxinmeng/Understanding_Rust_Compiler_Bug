{"sha": "25e0be736c3fefd39a8f3c691b40a0c8c75a94f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1ZTBiZTczNmMzZmVmZDM5YThmM2M2OTFiNDBhMGM4Yzc1YTk0ZjA=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-04-17T21:31:21Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-04-23T19:50:18Z"}, "message": "Clean up fragile checks of optimized away constants", "tree": {"sha": "e519b3a3fee83b881a10768754a5e1183050881f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e519b3a3fee83b881a10768754a5e1183050881f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25e0be736c3fefd39a8f3c691b40a0c8c75a94f0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAl6h8XoACgkQgTGiTgx5\n768JvQ/9HTJuZPrHznj5PbTwEk/mFuDeWR6k5z6Qc5uevbb63mymKo4skKQvJIvA\n1r314Xwka/sy8wcFVg0TPlg8k09xwElhz2KQFAz75NQao1KFLOssRSCzdHG73cmV\nNejokUQSM3/Ab5rIk9bG05GRxepbwJjXEj1B5PtxEOx8hKNzVayIN1TLxqwXGRD8\nYkxOpo9SDI3RE1lK8OpdR2K5oMUSP3EXDeVtQgeWOatlHfnxz7TWu5U9aeFbepZm\nxkGKwT93WEPevHzdKgar8Rdv5DEeVZ68iTuNyrs3pVXd1kS34TONRpJPNUioHBje\nTSnSAJyqGtxp5q2Oi9JQv6CD+BW+GY8HeptCsPgFu6ZN4zWL3iq3LNyHowxMLHjq\niXvOonKQIHD8AU/RqBfwpJomsz29pvlEKZppeccu57M4qnNRIWf4ShfEnnQKiJMi\nVJVnCk4PZsfrlVHTiMwCVRuaOPARmcvbQtzzFktgHW1AyZwW61ymz11ILWOjOcTY\nY8Nkvcgf7lti1WWnb3VSpaG09s6PYYT+mGiZHeJgXwh11bM5vDQqywuTHYhAHtVA\n/JRgMh+ozzdoN6Fc+rTWOpInz00+yWpqNoV6UDeCCaR/q729vvdP3fJ22TJ7KUOY\n1cbh7yPMnbetmWy5FIhAieCmVTEH5qQ14+X/c1S2YX9KcC2ahow=\n=/Cn7\n-----END PGP SIGNATURE-----", "payload": "tree e519b3a3fee83b881a10768754a5e1183050881f\nparent f925a03eadf5e875b36efaa1c5cc56aa0be78548\nauthor Santiago Pastorino <spastorino@gmail.com> 1587159081 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1587671418 -0300\n\nClean up fragile checks of optimized away constants\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25e0be736c3fefd39a8f3c691b40a0c8c75a94f0", "html_url": "https://github.com/rust-lang/rust/commit/25e0be736c3fefd39a8f3c691b40a0c8c75a94f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25e0be736c3fefd39a8f3c691b40a0c8c75a94f0/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f925a03eadf5e875b36efaa1c5cc56aa0be78548", "url": "https://api.github.com/repos/rust-lang/rust/commits/f925a03eadf5e875b36efaa1c5cc56aa0be78548", "html_url": "https://github.com/rust-lang/rust/commit/f925a03eadf5e875b36efaa1c5cc56aa0be78548"}], "stats": {"total": 35, "additions": 10, "deletions": 25}, "files": [{"sha": "491c37cbe06e85320f3d9c459334342753e3ceb2", "filename": "src/librustc_mir/transform/simplify.rs", "status": "modified", "additions": 10, "deletions": 25, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/25e0be736c3fefd39a8f3c691b40a0c8c75a94f0/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e0be736c3fefd39a8f3c691b40a0c8c75a94f0/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs?ref=25e0be736c3fefd39a8f3c691b40a0c8c75a94f0", "patch": "@@ -32,7 +32,7 @@ use rustc_index::bit_set::BitSet;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_middle::mir::visit::{MutVisitor, MutatingUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::*;\n-use rustc_middle::ty::{self, TyCtxt};\n+use rustc_middle::ty::TyCtxt;\n use std::borrow::Cow;\n \n pub struct SimplifyCfg {\n@@ -400,33 +400,18 @@ impl<'a, 'tcx> Visitor<'tcx> for DeclMarker<'a, 'tcx> {\n             if location.statement_index != block.statements.len() {\n                 let stmt = &block.statements[location.statement_index];\n \n-                fn can_skip_constant(c: &ty::Const<'tcx>) -> bool {\n-                    // Keep assignments from unevaluated constants around, since the\n-                    // evaluation may report errors, even if the use of the constant\n-                    // is dead code.\n-                    !matches!(c.val, ty::ConstKind::Unevaluated(..))\n-                }\n-\n-                fn can_skip_operand(o: &Operand<'_>) -> bool {\n-                    match o {\n-                        Operand::Copy(_) | Operand::Move(_) => true,\n-                        Operand::Constant(c) => can_skip_constant(c.literal),\n-                    }\n-                }\n-\n                 if let StatementKind::Assign(box (dest, rvalue)) = &stmt.kind {\n                     if !dest.is_indirect() && dest.local == *local {\n                         let can_skip = match rvalue {\n-                            Rvalue::Use(op) => can_skip_operand(op),\n-                            Rvalue::Discriminant(_) => true,\n-                            Rvalue::BinaryOp(_, l, r) | Rvalue::CheckedBinaryOp(_, l, r) => {\n-                                can_skip_operand(l) && can_skip_operand(r)\n-                            }\n-                            Rvalue::Repeat(op, c) => can_skip_operand(op) && can_skip_constant(c),\n-                            Rvalue::AddressOf(_, _) => true,\n-                            Rvalue::Len(_) => true,\n-                            Rvalue::UnaryOp(_, op) => can_skip_operand(op),\n-                            Rvalue::Aggregate(_, operands) => operands.iter().all(can_skip_operand),\n+                            Rvalue::Use(_)\n+                            | Rvalue::Discriminant(_)\n+                            | Rvalue::BinaryOp(_, _, _)\n+                            | Rvalue::CheckedBinaryOp(_, _, _)\n+                            | Rvalue::Repeat(_, _)\n+                            | Rvalue::AddressOf(_, _)\n+                            | Rvalue::Len(_)\n+                            | Rvalue::UnaryOp(_, _)\n+                            | Rvalue::Aggregate(_, _) => true,\n \n                             _ => false,\n                         };"}]}