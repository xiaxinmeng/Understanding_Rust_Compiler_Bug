{"sha": "bdaa9010493d26611079a9de1c8722532e140a24", "node_id": "C_kwDOAAsO6NoAKGJkYWE5MDEwNDkzZDI2NjExMDc5YTlkZTFjODcyMjUzMmUxNDBhMjQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-05T03:41:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-05T03:41:18Z"}, "message": "Auto merge of #91475 - ecstatic-morse:mir-pass-manager3, r=oli-obk\n\nAdd a MIR pass manager (Taylor's Version)\n\nThe final draft of #91386 and #77665.\n\nWhile the compile-time constraints in #91386 are cool, I decided on a more minimal approach for now. I want to explore phase constraints and maybe relative-ordering constraints in the future, though. This should preserve existing behavior **exactly** (please let me know if it doesn't) while making the following changes to the way we organize things today:\n\n- Each `MirPhase` now corresponds to a single MIR pass. `run_passes` is not responsible for listing the correct MIR phase.\n- `run_passes` no longer silently skips passes if the declared MIR phase is greater than or equal to the body's. This has bitten me multiple times. If you want this behavior, you can always branch on `body.phase` yourself.\n- If your pass is solely to emit errors, you can use the `MirLint` interface instead, which gets a shared reference to `Body` instead of a mutable one. By differentiating the two, I hope to make it clearer in the short term where lints belong in the pipeline. In the long term perhaps we could enforce this at compile-time?\n- MIR is no longer dumped for passes that aren't enabled, or for lints.\n\nI tried to check that `-Zvalidate` still works correctly, since the MIR phase is now updated as soon as the associated pass is done, instead of at the end of all the passes in `run_passes`. However, it looks like `-Zvalidate` is broken with current nightlies anyways :cry: (it spits out a bunch of errors).\n\ncc `@oli-obk` `@wesleywiser`\n\nr? rust-lang/wg-mir-opt", "tree": {"sha": "045308428d51ea1d63b746325f314116dbeb05a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/045308428d51ea1d63b746325f314116dbeb05a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bdaa9010493d26611079a9de1c8722532e140a24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bdaa9010493d26611079a9de1c8722532e140a24", "html_url": "https://github.com/rust-lang/rust/commit/bdaa9010493d26611079a9de1c8722532e140a24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bdaa9010493d26611079a9de1c8722532e140a24/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e93f6e318e687c05c8c44517de4586ed75ce3f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e93f6e318e687c05c8c44517de4586ed75ce3f4", "html_url": "https://github.com/rust-lang/rust/commit/5e93f6e318e687c05c8c44517de4586ed75ce3f4"}, {"sha": "7bc5eca93a585651607d58b3034071c8e9cd6166", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bc5eca93a585651607d58b3034071c8e9cd6166", "html_url": "https://github.com/rust-lang/rust/commit/7bc5eca93a585651607d58b3034071c8e9cd6166"}], "stats": {"total": 728, "additions": 447, "deletions": 281}, "files": [{"sha": "3c06074a1b33f3444135479ead69243299b626cc", "filename": "compiler/rustc_const_eval/src/transform/promote_consts.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=bdaa9010493d26611079a9de1c8722532e140a24", "patch": "@@ -41,6 +41,10 @@ pub struct PromoteTemps<'tcx> {\n }\n \n impl<'tcx> MirPass<'tcx> for PromoteTemps<'tcx> {\n+    fn phase_change(&self) -> Option<MirPhase> {\n+        Some(MirPhase::ConstPromotion)\n+    }\n+\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         // There's not really any point in promoting errorful MIR.\n         //"}, {"sha": "75edcaadfdff26adf39425a16d88f3531ca2f496", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=bdaa9010493d26611079a9de1c8722532e140a24", "patch": "@@ -16,6 +16,7 @@ use rustc_hir::def::{CtorKind, Namespace};\n use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX};\n use rustc_hir::{self, GeneratorKind};\n use rustc_hir::{self as hir, HirId};\n+use rustc_session::Session;\n use rustc_target::abi::{Size, VariantIdx};\n \n use polonius_engine::Atom;\n@@ -99,7 +100,21 @@ pub trait MirPass<'tcx> {\n         }\n     }\n \n+    /// Returns `true` if this pass is enabled with the current combination of compiler flags.\n+    fn is_enabled(&self, _sess: &Session) -> bool {\n+        true\n+    }\n+\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>);\n+\n+    /// If this pass causes the MIR to enter a new phase, return that phase.\n+    fn phase_change(&self) -> Option<MirPhase> {\n+        None\n+    }\n+\n+    fn is_mir_dump_enabled(&self) -> bool {\n+        true\n+    }\n }\n \n /// The various \"big phases\" that MIR goes through."}, {"sha": "1746d5ee38b926808fa9b04fb2c1bff079c2fb10", "filename": "compiler/rustc_mir_dataflow/src/rustc_peek.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_dataflow%2Fsrc%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_dataflow%2Fsrc%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Frustc_peek.rs?ref=bdaa9010493d26611079a9de1c8722532e140a24", "patch": "@@ -20,6 +20,7 @@ use crate::{Analysis, JoinSemiLattice, Results, ResultsCursor};\n \n pub struct SanityCheck;\n \n+// FIXME: This should be a `MirLint`, but it needs to be moved back to `rustc_mir_transform` first.\n impl<'tcx> MirPass<'tcx> for SanityCheck {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         use crate::has_rustc_mir_with;"}, {"sha": "84ae2a2fbd094efcfdc0053bfebee2344e672fbf", "filename": "compiler/rustc_mir_transform/src/add_retag.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_retag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_retag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_retag.rs?ref=bdaa9010493d26611079a9de1c8722532e140a24", "patch": "@@ -58,11 +58,11 @@ fn may_be_reference(ty: Ty<'tcx>) -> bool {\n }\n \n impl<'tcx> MirPass<'tcx> for AddRetag {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        if !tcx.sess.opts.debugging_opts.mir_emit_retag {\n-            return;\n-        }\n+    fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n+        sess.opts.debugging_opts.mir_emit_retag\n+    }\n \n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         // We need an `AllCallEdges` pass before we can do any work.\n         super::add_call_guards::AllCallEdges.run_pass(tcx, body);\n "}, {"sha": "6f0d03068f566aa4b4b742bef3ba0fb4bea089ce", "filename": "compiler/rustc_mir_transform/src/check_const_item_mutation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_const_item_mutation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_const_item_mutation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_const_item_mutation.rs?ref=bdaa9010493d26611079a9de1c8722532e140a24", "patch": "@@ -6,12 +6,12 @@ use rustc_middle::ty::TyCtxt;\n use rustc_session::lint::builtin::CONST_ITEM_MUTATION;\n use rustc_span::def_id::DefId;\n \n-use crate::MirPass;\n+use crate::MirLint;\n \n pub struct CheckConstItemMutation;\n \n-impl<'tcx> MirPass<'tcx> for CheckConstItemMutation {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+impl<'tcx> MirLint<'tcx> for CheckConstItemMutation {\n+    fn run_lint(&self, tcx: TyCtxt<'tcx>, body: &Body<'tcx>) {\n         let mut checker = ConstMutationChecker { body, tcx, target_local: None };\n         checker.visit_body(&body);\n     }"}, {"sha": "31d547103095f7f6e9fe2e2b73cbf70facbeee5b", "filename": "compiler/rustc_mir_transform/src/check_packed_ref.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_packed_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_packed_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_packed_ref.rs?ref=bdaa9010493d26611079a9de1c8722532e140a24", "patch": "@@ -7,16 +7,16 @@ use rustc_session::lint::builtin::UNALIGNED_REFERENCES;\n use rustc_span::symbol::sym;\n \n use crate::util;\n-use crate::MirPass;\n+use crate::MirLint;\n \n pub(crate) fn provide(providers: &mut Providers) {\n     *providers = Providers { unsafe_derive_on_repr_packed, ..*providers };\n }\n \n pub struct CheckPackedRef;\n \n-impl<'tcx> MirPass<'tcx> for CheckPackedRef {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+impl<'tcx> MirLint<'tcx> for CheckPackedRef {\n+    fn run_lint(&self, tcx: TyCtxt<'tcx>, body: &Body<'tcx>) {\n         let param_env = tcx.param_env(body.source.def_id());\n         let source_info = SourceInfo::outermost(body.span);\n         let mut checker = PackedRefChecker { body, tcx, param_env, source_info };"}, {"sha": "3613fa4560d6c1ebbe9a947858977c317cce259f", "filename": "compiler/rustc_mir_transform/src/const_debuginfo.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_debuginfo.rs?ref=bdaa9010493d26611079a9de1c8722532e140a24", "patch": "@@ -15,11 +15,11 @@ use rustc_index::{bit_set::BitSet, vec::IndexVec};\n pub struct ConstDebugInfo;\n \n impl<'tcx> MirPass<'tcx> for ConstDebugInfo {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        if !tcx.sess.opts.debugging_opts.unsound_mir_opts {\n-            return;\n-        }\n+    fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n+        sess.opts.debugging_opts.unsound_mir_opts && sess.mir_opt_level() > 0\n+    }\n \n+    fn run_pass(&self, _: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         trace!(\"running ConstDebugInfo on {:?}\", body.source);\n \n         for (local, constant) in find_optimization_oportunities(body) {"}, {"sha": "beb158dd25828da7aa54f748d6ac1786f13a69ac", "filename": "compiler/rustc_mir_transform/src/const_goto.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_goto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_goto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_goto.rs?ref=bdaa9010493d26611079a9de1c8722532e140a24", "patch": "@@ -27,10 +27,11 @@ use super::simplify::{simplify_cfg, simplify_locals};\n pub struct ConstGoto;\n \n impl<'tcx> MirPass<'tcx> for ConstGoto {\n+    fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n+        sess.mir_opt_level() >= 4\n+    }\n+\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        if tcx.sess.mir_opt_level() < 4 {\n-            return;\n-        }\n         trace!(\"Running ConstGoto on {:?}\", body.source);\n         let param_env = tcx.param_env_reveal_all_normalized(body.source.def_id());\n         let mut opt_finder ="}, {"sha": "e3377f5953aadace7d689525e01769274a384dcd", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=bdaa9010493d26611079a9de1c8722532e140a24", "patch": "@@ -62,6 +62,13 @@ macro_rules! throw_machine_stop_str {\n pub struct ConstProp;\n \n impl<'tcx> MirPass<'tcx> for ConstProp {\n+    fn is_enabled(&self, _sess: &rustc_session::Session) -> bool {\n+        // FIXME(#70073): Unlike the other passes in \"optimizations\", this one emits errors, so it\n+        // runs even when MIR optimizations are disabled. We should separate the lint out from the\n+        // transform and move the lint as early in the pipeline as possible.\n+        true\n+    }\n+\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         // will be evaluated by miri and produce its errors there\n         if body.source.promoted.is_some() {"}, {"sha": "bba188bd3935075a77b6788c25f0c69c39119fec", "filename": "compiler/rustc_mir_transform/src/coverage/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fmod.rs?ref=bdaa9010493d26611079a9de1c8722532e140a24", "patch": "@@ -49,6 +49,10 @@ impl Error {\n pub struct InstrumentCoverage;\n \n impl<'tcx> MirPass<'tcx> for InstrumentCoverage {\n+    fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n+        sess.instrument_coverage()\n+    }\n+\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, mir_body: &mut mir::Body<'tcx>) {\n         let mir_source = mir_body.source;\n "}, {"sha": "993c8eef711ce66224308c807c259abb2a5930c9", "filename": "compiler/rustc_mir_transform/src/deduplicate_blocks.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_transform%2Fsrc%2Fdeduplicate_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_transform%2Fsrc%2Fdeduplicate_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdeduplicate_blocks.rs?ref=bdaa9010493d26611079a9de1c8722532e140a24", "patch": "@@ -15,10 +15,11 @@ use super::simplify::simplify_cfg;\n pub struct DeduplicateBlocks;\n \n impl<'tcx> MirPass<'tcx> for DeduplicateBlocks {\n+    fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n+        sess.mir_opt_level() >= 4\n+    }\n+\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        if tcx.sess.mir_opt_level() < 4 {\n-            return;\n-        }\n         debug!(\"Running DeduplicateBlocks on `{:?}`\", body.source);\n         let duplicates = find_duplicates(body);\n         let has_opts_to_apply = !duplicates.is_empty();"}, {"sha": "256f7fbd7592351b15777e411eed4ec2273ff7ec", "filename": "compiler/rustc_mir_transform/src/dest_prop.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs?ref=bdaa9010493d26611079a9de1c8722532e140a24", "patch": "@@ -124,18 +124,15 @@ const MAX_BLOCKS: usize = 250;\n pub struct DestinationPropagation;\n \n impl<'tcx> MirPass<'tcx> for DestinationPropagation {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        //  FIXME(#79191, #82678)\n-        if !tcx.sess.opts.debugging_opts.unsound_mir_opts {\n-            return;\n-        }\n-\n+    fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n+        //  FIXME(#79191, #82678): This is unsound.\n+        //\n         // Only run at mir-opt-level=3 or higher for now (we don't fix up debuginfo and remove\n         // storage statements at the moment).\n-        if tcx.sess.mir_opt_level() < 3 {\n-            return;\n-        }\n+        sess.opts.debugging_opts.unsound_mir_opts && sess.mir_opt_level() >= 3\n+    }\n \n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         let def_id = body.source.def_id();\n \n         let candidates = find_candidates(tcx, body);"}, {"sha": "62e82aca262073cb99b17bda75865d42569d6ab7", "filename": "compiler/rustc_mir_transform/src/early_otherwise_branch.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_transform%2Fsrc%2Fearly_otherwise_branch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_transform%2Fsrc%2Fearly_otherwise_branch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fearly_otherwise_branch.rs?ref=bdaa9010493d26611079a9de1c8722532e140a24", "patch": "@@ -25,16 +25,14 @@ use super::simplify::simplify_cfg;\n pub struct EarlyOtherwiseBranch;\n \n impl<'tcx> MirPass<'tcx> for EarlyOtherwiseBranch {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+    fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n         //  FIXME(#78496)\n-        if !tcx.sess.opts.debugging_opts.unsound_mir_opts {\n-            return;\n-        }\n+        sess.opts.debugging_opts.unsound_mir_opts && sess.mir_opt_level() >= 3\n+    }\n \n-        if tcx.sess.mir_opt_level() < 3 {\n-            return;\n-        }\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         trace!(\"running EarlyOtherwiseBranch on {:?}\", body.source);\n+\n         // we are only interested in this bb if the terminator is a switchInt\n         let bbs_with_switch =\n             body.basic_blocks().iter_enumerated().filter(|(_, bb)| is_switch(bb.terminator()));"}, {"sha": "af13c734e5b9a399720552ffd3fcc4e88f675403", "filename": "compiler/rustc_mir_transform/src/elaborate_drops.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs?ref=bdaa9010493d26611079a9de1c8722532e140a24", "patch": "@@ -19,6 +19,10 @@ use std::fmt;\n pub struct ElaborateDrops;\n \n impl<'tcx> MirPass<'tcx> for ElaborateDrops {\n+    fn phase_change(&self) -> Option<MirPhase> {\n+        Some(MirPhase::DropLowering)\n+    }\n+\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         debug!(\"elaborate_drops({:?} @ {:?})\", body.source, body.span);\n "}, {"sha": "c05dc39afc47e329cae2c583bd19baadba8d8eaa", "filename": "compiler/rustc_mir_transform/src/function_item_references.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs?ref=bdaa9010493d26611079a9de1c8722532e140a24", "patch": "@@ -11,12 +11,12 @@ use rustc_session::lint::builtin::FUNCTION_ITEM_REFERENCES;\n use rustc_span::{symbol::sym, Span};\n use rustc_target::spec::abi::Abi;\n \n-use crate::MirPass;\n+use crate::MirLint;\n \n pub struct FunctionItemReferences;\n \n-impl<'tcx> MirPass<'tcx> for FunctionItemReferences {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+impl<'tcx> MirLint<'tcx> for FunctionItemReferences {\n+    fn run_lint(&self, tcx: TyCtxt<'tcx>, body: &Body<'tcx>) {\n         let mut checker = FunctionItemRefChecker { tcx, body };\n         checker.visit_body(&body);\n     }"}, {"sha": "5376855035e71d3f1f35bd78ba0dfd2edac39e1a", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=bdaa9010493d26611079a9de1c8722532e140a24", "patch": "@@ -1232,6 +1232,10 @@ fn create_cases<'tcx>(\n }\n \n impl<'tcx> MirPass<'tcx> for StateTransform {\n+    fn phase_change(&self) -> Option<MirPhase> {\n+        Some(MirPhase::GeneratorLowering)\n+    }\n+\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         let yield_ty = if let Some(yield_ty) = body.yield_ty() {\n             yield_ty"}, {"sha": "81454cc4070bdf3649d321042ca9bf267a8d5b2c", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=bdaa9010493d26611079a9de1c8722532e140a24", "patch": "@@ -37,21 +37,16 @@ struct CallSite<'tcx> {\n     source_info: SourceInfo,\n }\n \n-/// Returns true if MIR inlining is enabled in the current compilation session.\n-crate fn is_enabled(tcx: TyCtxt<'_>) -> bool {\n-    if let Some(enabled) = tcx.sess.opts.debugging_opts.inline_mir {\n-        return enabled;\n-    }\n-\n-    tcx.sess.mir_opt_level() >= 3\n-}\n-\n impl<'tcx> MirPass<'tcx> for Inline {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        if !is_enabled(tcx) {\n-            return;\n+    fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n+        if let Some(enabled) = sess.opts.debugging_opts.inline_mir {\n+            return enabled;\n         }\n \n+        sess.opts.mir_opt_level() >= 3\n+    }\n+\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         let span = trace_span!(\"inline\", body = %tcx.def_path_str(body.source.def_id()));\n         let _guard = span.enter();\n         if inline(tcx, body) {"}, {"sha": "c5adc241664d246ff17831f073bd8e7432927bee", "filename": "compiler/rustc_mir_transform/src/instcombine.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs?ref=bdaa9010493d26611079a9de1c8722532e140a24", "patch": "@@ -11,6 +11,10 @@ use rustc_middle::ty::{self, TyCtxt};\n pub struct InstCombine;\n \n impl<'tcx> MirPass<'tcx> for InstCombine {\n+    fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n+        sess.mir_opt_level() > 0\n+    }\n+\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         let (basic_blocks, local_decls) = body.basic_blocks_and_local_decls_mut();\n         let ctx = InstCombineContext { tcx, local_decls };"}, {"sha": "a7e003a55b4007e3fe4f901aa1be8dc9b57fd878", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 90, "deletions": 171, "changes": 261, "blob_url": "https://github.com/rust-lang/rust/blob/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=bdaa9010493d26611079a9de1c8722532e140a24", "patch": "@@ -27,11 +27,16 @@ use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_index::vec::IndexVec;\n use rustc_middle::mir::visit::Visitor as _;\n-use rustc_middle::mir::{dump_mir, traversal, Body, ConstQualifs, MirPass, MirPhase, Promoted};\n+use rustc_middle::mir::{traversal, Body, ConstQualifs, MirPass, MirPhase, Promoted};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, TyCtxt, TypeFoldable};\n use rustc_span::{Span, Symbol};\n \n+#[macro_use]\n+mod pass_manager;\n+\n+use pass_manager::{self as pm, Lint, MirLint, WithMinOptLevel};\n+\n mod abort_unwinding_calls;\n mod add_call_guards;\n mod add_moves_for_packed_drops;\n@@ -56,6 +61,7 @@ mod inline;\n mod instcombine;\n mod lower_intrinsics;\n mod lower_slice_len;\n+mod marker;\n mod match_branches;\n mod multiple_return_terminators;\n mod normalize_array_len;\n@@ -168,66 +174,6 @@ fn mir_keys(tcx: TyCtxt<'_>, (): ()) -> FxHashSet<LocalDefId> {\n     set\n }\n \n-fn run_passes(\n-    tcx: TyCtxt<'tcx>,\n-    body: &mut Body<'tcx>,\n-    mir_phase: MirPhase,\n-    passes: &[&[&dyn MirPass<'tcx>]],\n-) {\n-    let phase_index = mir_phase.phase_index();\n-    let validate = tcx.sess.opts.debugging_opts.validate_mir;\n-\n-    if body.phase >= mir_phase {\n-        return;\n-    }\n-\n-    if validate {\n-        validate::Validator { when: format!(\"input to phase {:?}\", mir_phase), mir_phase }\n-            .run_pass(tcx, body);\n-    }\n-\n-    let mut index = 0;\n-    let mut run_pass = |pass: &dyn MirPass<'tcx>| {\n-        let run_hooks = |body: &_, index, is_after| {\n-            let disambiguator = if is_after { \"after\" } else { \"before\" };\n-            dump_mir(\n-                tcx,\n-                Some(&format_args!(\"{:03}-{:03}\", phase_index, index)),\n-                &pass.name(),\n-                &disambiguator,\n-                body,\n-                |_, _| Ok(()),\n-            );\n-        };\n-        run_hooks(body, index, false);\n-        pass.run_pass(tcx, body);\n-        run_hooks(body, index, true);\n-\n-        if validate {\n-            validate::Validator {\n-                when: format!(\"after {} in phase {:?}\", pass.name(), mir_phase),\n-                mir_phase,\n-            }\n-            .run_pass(tcx, body);\n-        }\n-\n-        index += 1;\n-    };\n-\n-    for pass_group in passes {\n-        for pass in *pass_group {\n-            run_pass(*pass);\n-        }\n-    }\n-\n-    body.phase = mir_phase;\n-\n-    if mir_phase == MirPhase::Optimization {\n-        validate::Validator { when: format!(\"end of phase {:?}\", mir_phase), mir_phase }\n-            .run_pass(tcx, body);\n-    }\n-}\n-\n fn mir_const_qualif(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -> ConstQualifs {\n     let const_kind = tcx.hir().body_const_context(def.did);\n \n@@ -279,19 +225,19 @@ fn mir_const<'tcx>(\n \n     rustc_middle::mir::dump_mir(tcx, None, \"mir_map\", &0, &body, |_, _| Ok(()));\n \n-    run_passes(\n+    pm::run_passes(\n         tcx,\n         &mut body,\n-        MirPhase::Const,\n-        &[&[\n+        &[\n             // MIR-level lints.\n-            &check_packed_ref::CheckPackedRef,\n-            &check_const_item_mutation::CheckConstItemMutation,\n-            &function_item_references::FunctionItemReferences,\n+            &Lint(check_packed_ref::CheckPackedRef),\n+            &Lint(check_const_item_mutation::CheckConstItemMutation),\n+            &Lint(function_item_references::FunctionItemReferences),\n             // What we need to do constant evaluation.\n             &simplify::SimplifyCfg::new(\"initial\"),\n-            &rustc_peek::SanityCheck,\n-        ]],\n+            &rustc_peek::SanityCheck, // Just a lint\n+            &marker::PhaseChange(MirPhase::Const),\n+        ],\n     );\n     tcx.alloc_steal_mir(body)\n }\n@@ -318,17 +264,17 @@ fn mir_promoted(\n     }\n     body.required_consts = required_consts;\n \n+    // What we need to run borrowck etc.\n     let promote_pass = promote_consts::PromoteTemps::default();\n-    let promote: &[&dyn MirPass<'tcx>] = &[\n-        // What we need to run borrowck etc.\n-        &promote_pass,\n-        &simplify::SimplifyCfg::new(\"promote-consts\"),\n-    ];\n-\n-    let opt_coverage: &[&dyn MirPass<'tcx>] =\n-        if tcx.sess.instrument_coverage() { &[&coverage::InstrumentCoverage] } else { &[] };\n-\n-    run_passes(tcx, &mut body, MirPhase::ConstPromotion, &[promote, opt_coverage]);\n+    pm::run_passes(\n+        tcx,\n+        &mut body,\n+        &[\n+            &promote_pass,\n+            &simplify::SimplifyCfg::new(\"promote-consts\"),\n+            &coverage::InstrumentCoverage,\n+        ],\n+    );\n \n     let promoted = promote_pass.promoted_fragments.into_inner();\n     (tcx.alloc_steal_mir(body), tcx.alloc_steal_promoted(promoted))\n@@ -390,19 +336,10 @@ fn inner_mir_for_ctfe(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -\n         // Technically we want to not run on regular const items, but oli-obk doesn't know how to\n         // conveniently detect that at this point without looking at the HIR.\n         hir::ConstContext::Const => {\n-            #[rustfmt::skip]\n-            let optimizations: &[&dyn MirPass<'_>] = &[\n-                &const_prop::ConstProp,\n-            ];\n-\n-            #[rustfmt::skip]\n-            run_passes(\n+            pm::run_passes(\n                 tcx,\n                 &mut body,\n-                MirPhase::Optimization,\n-                &[\n-                    optimizations,\n-                ],\n+                &[&const_prop::ConstProp, &marker::PhaseChange(MirPhase::Optimization)],\n             );\n         }\n     }\n@@ -438,7 +375,7 @@ fn mir_drops_elaborated_and_const_checked<'tcx>(\n         let def = ty::WithOptConstParam::unknown(did);\n \n         // Do not compute the mir call graph without said call graph actually being used.\n-        if inline::is_enabled(tcx) {\n+        if inline::Inline.is_enabled(&tcx.sess) {\n             let _ = tcx.mir_inliner_callees(ty::InstanceDef::Item(def));\n         }\n     }\n@@ -447,19 +384,23 @@ fn mir_drops_elaborated_and_const_checked<'tcx>(\n     let mut body = body.steal();\n \n     // IMPORTANT\n-    remove_false_edges::RemoveFalseEdges.run_pass(tcx, &mut body);\n+    pm::run_passes(tcx, &mut body, &[&remove_false_edges::RemoveFalseEdges]);\n \n     // Do a little drop elaboration before const-checking if `const_precise_live_drops` is enabled.\n-    //\n-    // FIXME: Can't use `run_passes` for these, since `run_passes` SILENTLY DOES NOTHING IF THE MIR\n-    // PHASE DOESN'T CHANGE.\n     if check_consts::post_drop_elaboration::checking_enabled(&ConstCx::new(tcx, &body)) {\n-        simplify::SimplifyCfg::new(\"remove-false-edges\").run_pass(tcx, &mut body);\n-        remove_uninit_drops::RemoveUninitDrops.run_pass(tcx, &mut body);\n-        check_consts::post_drop_elaboration::check_live_drops(tcx, &body);\n+        pm::run_passes(\n+            tcx,\n+            &mut body,\n+            &[\n+                &simplify::SimplifyCfg::new(\"remove-false-edges\"),\n+                &remove_uninit_drops::RemoveUninitDrops,\n+            ],\n+        );\n+        check_consts::post_drop_elaboration::check_live_drops(tcx, &body); // FIXME: make this a MIR lint\n     }\n \n     run_post_borrowck_cleanup_passes(tcx, &mut body);\n+    assert!(body.phase == MirPhase::DropLowering);\n     tcx.alloc_steal_mir(body)\n }\n \n@@ -493,95 +434,73 @@ fn run_post_borrowck_cleanup_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tc\n         &deaggregator::Deaggregator,\n     ];\n \n-    run_passes(tcx, body, MirPhase::DropLowering, &[post_borrowck_cleanup]);\n+    pm::run_passes(tcx, body, post_borrowck_cleanup);\n }\n \n fn run_optimization_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-    let mir_opt_level = tcx.sess.mir_opt_level();\n+    fn o1<T>(x: T) -> WithMinOptLevel<T> {\n+        WithMinOptLevel(1, x)\n+    }\n \n     // Lowering generator control-flow and variables has to happen before we do anything else\n     // to them. We run some optimizations before that, because they may be harder to do on the state\n     // machine than on MIR with async primitives.\n-    let optimizations_with_generators: &[&dyn MirPass<'tcx>] = &[\n-        &reveal_all::RevealAll, // has to be done before inlining, since inlined code is in RevealAll mode.\n-        &lower_slice_len::LowerSliceLenCalls, // has to be done before inlining, otherwise actual call will be almost always inlined. Also simple, so can just do first\n-        &normalize_array_len::NormalizeArrayLen, // has to run after `slice::len` lowering\n-        &unreachable_prop::UnreachablePropagation,\n-        &uninhabited_enum_branching::UninhabitedEnumBranching,\n-        &simplify::SimplifyCfg::new(\"after-uninhabited-enum-branching\"),\n-        &inline::Inline,\n-        &generator::StateTransform,\n-    ];\n-\n-    // Even if we don't do optimizations, we still have to lower generators for codegen.\n-    let no_optimizations_with_generators: &[&dyn MirPass<'tcx>] = &[&generator::StateTransform];\n-\n-    // The main optimizations that we do on MIR.\n-    let optimizations: &[&dyn MirPass<'tcx>] = &[\n-        &remove_storage_markers::RemoveStorageMarkers,\n-        &remove_zsts::RemoveZsts,\n-        &const_goto::ConstGoto,\n-        &remove_unneeded_drops::RemoveUnneededDrops,\n-        &match_branches::MatchBranchSimplification,\n-        // inst combine is after MatchBranchSimplification to clean up Ne(_1, false)\n-        &multiple_return_terminators::MultipleReturnTerminators,\n-        &instcombine::InstCombine,\n-        &separate_const_switch::SeparateConstSwitch,\n-        &const_prop::ConstProp,\n-        &simplify_branches::SimplifyConstCondition::new(\"after-const-prop\"),\n-        &early_otherwise_branch::EarlyOtherwiseBranch,\n-        &simplify_comparison_integral::SimplifyComparisonIntegral,\n-        &simplify_try::SimplifyArmIdentity,\n-        &simplify_try::SimplifyBranchSame,\n-        &dest_prop::DestinationPropagation,\n-        &simplify_branches::SimplifyConstCondition::new(\"final\"),\n-        &remove_noop_landing_pads::RemoveNoopLandingPads,\n-        &simplify::SimplifyCfg::new(\"final\"),\n-        &nrvo::RenameReturnPlace,\n-        &const_debuginfo::ConstDebugInfo,\n-        &simplify::SimplifyLocals,\n-        &multiple_return_terminators::MultipleReturnTerminators,\n-        &deduplicate_blocks::DeduplicateBlocks,\n-    ];\n-\n-    // Optimizations to run even if mir optimizations have been disabled.\n-    let no_optimizations: &[&dyn MirPass<'tcx>] = &[\n-        // FIXME(#70073): This pass is responsible for both optimization as well as some lints.\n-        &const_prop::ConstProp,\n-    ];\n-\n-    // Some cleanup necessary at least for LLVM and potentially other codegen backends.\n-    let pre_codegen_cleanup: &[&dyn MirPass<'tcx>] = &[\n-        &add_call_guards::CriticalCallEdges,\n-        // Dump the end result for testing and debugging purposes.\n-        &dump_mir::Marker(\"PreCodegen\"),\n-    ];\n-\n-    // End of pass declarations, now actually run the passes.\n-    // Generator Lowering\n-    #[rustfmt::skip]\n-    run_passes(\n+    pm::run_passes(\n         tcx,\n         body,\n-        MirPhase::GeneratorLowering,\n         &[\n-            if mir_opt_level > 0 {\n-                optimizations_with_generators\n-            } else {\n-                no_optimizations_with_generators\n-            }\n+            &reveal_all::RevealAll, // has to be done before inlining, since inlined code is in RevealAll mode.\n+            &lower_slice_len::LowerSliceLenCalls, // has to be done before inlining, otherwise actual call will be almost always inlined. Also simple, so can just do first\n+            &normalize_array_len::NormalizeArrayLen, // has to run after `slice::len` lowering\n+            &unreachable_prop::UnreachablePropagation,\n+            &uninhabited_enum_branching::UninhabitedEnumBranching,\n+            &o1(simplify::SimplifyCfg::new(\"after-uninhabited-enum-branching\")),\n+            &inline::Inline,\n+            &generator::StateTransform,\n         ],\n     );\n \n-    // Main optimization passes\n-    #[rustfmt::skip]\n-    run_passes(\n+    assert!(body.phase == MirPhase::GeneratorLowering);\n+\n+    // The main optimizations that we do on MIR.\n+    pm::run_passes(\n         tcx,\n         body,\n-        MirPhase::Optimization,\n         &[\n-            if mir_opt_level > 0 { optimizations } else { no_optimizations },\n-            pre_codegen_cleanup,\n+            &remove_storage_markers::RemoveStorageMarkers,\n+            &remove_zsts::RemoveZsts,\n+            &const_goto::ConstGoto,\n+            &remove_unneeded_drops::RemoveUnneededDrops,\n+            &match_branches::MatchBranchSimplification,\n+            // inst combine is after MatchBranchSimplification to clean up Ne(_1, false)\n+            &multiple_return_terminators::MultipleReturnTerminators,\n+            &instcombine::InstCombine,\n+            &separate_const_switch::SeparateConstSwitch,\n+            //\n+            // FIXME(#70073): This pass is responsible for both optimization as well as some lints.\n+            &const_prop::ConstProp,\n+            //\n+            // FIXME: The old pass manager ran this only at mir-opt-level >= 1, but\n+            // const-prop runs unconditionally. Should this run unconditionally as well?\n+            &o1(simplify_branches::SimplifyConstCondition::new(\"after-const-prop\")),\n+            &early_otherwise_branch::EarlyOtherwiseBranch,\n+            &simplify_comparison_integral::SimplifyComparisonIntegral,\n+            &simplify_try::SimplifyArmIdentity,\n+            &simplify_try::SimplifyBranchSame,\n+            &dest_prop::DestinationPropagation,\n+            &o1(simplify_branches::SimplifyConstCondition::new(\"final\")),\n+            &o1(remove_noop_landing_pads::RemoveNoopLandingPads),\n+            &o1(simplify::SimplifyCfg::new(\"final\")),\n+            &nrvo::RenameReturnPlace,\n+            &const_debuginfo::ConstDebugInfo,\n+            &simplify::SimplifyLocals,\n+            &multiple_return_terminators::MultipleReturnTerminators,\n+            &deduplicate_blocks::DeduplicateBlocks,\n+            // Some cleanup necessary at least for LLVM and potentially other codegen backends.\n+            &add_call_guards::CriticalCallEdges,\n+            &marker::PhaseChange(MirPhase::Optimization),\n+            // Dump the end result for testing and debugging purposes.\n+            &dump_mir::Marker(\"PreCodegen\"),\n         ],\n     );\n }"}, {"sha": "c8297744873087256dc9c4e2eb66582303b37af5", "filename": "compiler/rustc_mir_transform/src/lower_slice_len.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_transform%2Fsrc%2Flower_slice_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_transform%2Fsrc%2Flower_slice_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flower_slice_len.rs?ref=bdaa9010493d26611079a9de1c8722532e140a24", "patch": "@@ -10,6 +10,10 @@ use rustc_middle::ty::{self, TyCtxt};\n pub struct LowerSliceLenCalls;\n \n impl<'tcx> MirPass<'tcx> for LowerSliceLenCalls {\n+    fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n+        sess.opts.mir_opt_level() > 0\n+    }\n+\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         lower_slice_len_calls(tcx, body)\n     }"}, {"sha": "06819fc1d37d483da63f99204788b29035ce45ba", "filename": "compiler/rustc_mir_transform/src/marker.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_transform%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_transform%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fmarker.rs?ref=bdaa9010493d26611079a9de1c8722532e140a24", "patch": "@@ -0,0 +1,20 @@\n+use std::borrow::Cow;\n+\n+use crate::MirPass;\n+use rustc_middle::mir::{Body, MirPhase};\n+use rustc_middle::ty::TyCtxt;\n+\n+/// Changes the MIR phase without changing the MIR itself.\n+pub struct PhaseChange(pub MirPhase);\n+\n+impl<'tcx> MirPass<'tcx> for PhaseChange {\n+    fn phase_change(&self) -> Option<MirPhase> {\n+        Some(self.0)\n+    }\n+\n+    fn name(&self) -> Cow<'_, str> {\n+        Cow::from(format!(\"PhaseChange-{:?}\", self.0))\n+    }\n+\n+    fn run_pass(&self, _: TyCtxt<'tcx>, _body: &mut Body<'tcx>) {}\n+}"}, {"sha": "3c14a324c36ff2bacac3a60ee3e41efa393429da", "filename": "compiler/rustc_mir_transform/src/match_branches.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_transform%2Fsrc%2Fmatch_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_transform%2Fsrc%2Fmatch_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fmatch_branches.rs?ref=bdaa9010493d26611079a9de1c8722532e140a24", "patch": "@@ -40,11 +40,11 @@ pub struct MatchBranchSimplification;\n /// ```\n \n impl<'tcx> MirPass<'tcx> for MatchBranchSimplification {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        if tcx.sess.mir_opt_level() < 3 {\n-            return;\n-        }\n+    fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n+        sess.mir_opt_level() >= 3\n+    }\n \n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         let def_id = body.source.def_id();\n         let param_env = tcx.param_env(def_id);\n "}, {"sha": "22b6dead99c501972358f35be9f8df0d9f42a1d8", "filename": "compiler/rustc_mir_transform/src/multiple_return_terminators.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_transform%2Fsrc%2Fmultiple_return_terminators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_transform%2Fsrc%2Fmultiple_return_terminators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fmultiple_return_terminators.rs?ref=bdaa9010493d26611079a9de1c8722532e140a24", "patch": "@@ -9,11 +9,11 @@ use rustc_middle::ty::TyCtxt;\n pub struct MultipleReturnTerminators;\n \n impl<'tcx> MirPass<'tcx> for MultipleReturnTerminators {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        if tcx.sess.mir_opt_level() < 4 {\n-            return;\n-        }\n+    fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n+        sess.mir_opt_level() >= 4\n+    }\n \n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         // find basic blocks with no statement and a return terminator\n         let mut bbs_simple_returns = BitSet::new_empty(body.basic_blocks().len());\n         let def_id = body.source.def_id();"}, {"sha": "0fd9e0352a24978a6a39d9abb3c1dedb62a00d35", "filename": "compiler/rustc_mir_transform/src/normalize_array_len.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_transform%2Fsrc%2Fnormalize_array_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_transform%2Fsrc%2Fnormalize_array_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fnormalize_array_len.rs?ref=bdaa9010493d26611079a9de1c8722532e140a24", "patch": "@@ -14,11 +14,11 @@ const MAX_NUM_LOCALS: usize = 3000;\n pub struct NormalizeArrayLen;\n \n impl<'tcx> MirPass<'tcx> for NormalizeArrayLen {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        if tcx.sess.mir_opt_level() < 4 {\n-            return;\n-        }\n+    fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n+        sess.mir_opt_level() >= 4\n+    }\n \n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         // early returns for edge cases of highly unrolled functions\n         if body.basic_blocks().len() > MAX_NUM_BLOCKS {\n             return;"}, {"sha": "88ec34b73ec401a833e4bb5a9777492731130c8f", "filename": "compiler/rustc_mir_transform/src/nrvo.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_transform%2Fsrc%2Fnrvo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_transform%2Fsrc%2Fnrvo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fnrvo.rs?ref=bdaa9010493d26611079a9de1c8722532e140a24", "patch": "@@ -33,11 +33,11 @@ use crate::MirPass;\n pub struct RenameReturnPlace;\n \n impl<'tcx> MirPass<'tcx> for RenameReturnPlace {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut mir::Body<'tcx>) {\n-        if tcx.sess.mir_opt_level() == 0 {\n-            return;\n-        }\n+    fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n+        sess.mir_opt_level() > 0\n+    }\n \n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut mir::Body<'tcx>) {\n         let def_id = body.source.def_id();\n         let returned_local = match local_eligible_for_nrvo(body) {\n             Some(l) => l,"}, {"sha": "729b8cae5e47acad54078a4e9b303577960c44ad", "filename": "compiler/rustc_mir_transform/src/pass_manager.rs", "status": "added", "additions": 144, "deletions": 0, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_transform%2Fsrc%2Fpass_manager.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_transform%2Fsrc%2Fpass_manager.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fpass_manager.rs?ref=bdaa9010493d26611079a9de1c8722532e140a24", "patch": "@@ -0,0 +1,144 @@\n+use std::borrow::Cow;\n+\n+use rustc_middle::mir::{self, Body, MirPhase};\n+use rustc_middle::ty::TyCtxt;\n+use rustc_session::Session;\n+\n+use crate::{validate, MirPass};\n+\n+/// Just like `MirPass`, except it cannot mutate `Body`.\n+pub trait MirLint<'tcx> {\n+    fn name(&self) -> Cow<'_, str> {\n+        let name = std::any::type_name::<Self>();\n+        if let Some(tail) = name.rfind(':') {\n+            Cow::from(&name[tail + 1..])\n+        } else {\n+            Cow::from(name)\n+        }\n+    }\n+\n+    fn is_enabled(&self, _sess: &Session) -> bool {\n+        true\n+    }\n+\n+    fn run_lint(&self, tcx: TyCtxt<'tcx>, body: &Body<'tcx>);\n+}\n+\n+/// An adapter for `MirLint`s that implements `MirPass`.\n+#[derive(Debug, Clone)]\n+pub struct Lint<T>(pub T);\n+\n+impl<T> MirPass<'tcx> for Lint<T>\n+where\n+    T: MirLint<'tcx>,\n+{\n+    fn name(&self) -> Cow<'_, str> {\n+        self.0.name()\n+    }\n+\n+    fn is_enabled(&self, sess: &Session) -> bool {\n+        self.0.is_enabled(sess)\n+    }\n+\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+        self.0.run_lint(tcx, body)\n+    }\n+\n+    fn is_mir_dump_enabled(&self) -> bool {\n+        false\n+    }\n+}\n+\n+pub struct WithMinOptLevel<T>(pub u32, pub T);\n+\n+impl<T> MirPass<'tcx> for WithMinOptLevel<T>\n+where\n+    T: MirPass<'tcx>,\n+{\n+    fn name(&self) -> Cow<'_, str> {\n+        self.1.name()\n+    }\n+\n+    fn is_enabled(&self, sess: &Session) -> bool {\n+        sess.mir_opt_level() >= self.0 as usize\n+    }\n+\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+        self.1.run_pass(tcx, body)\n+    }\n+\n+    fn phase_change(&self) -> Option<MirPhase> {\n+        self.1.phase_change()\n+    }\n+}\n+\n+pub fn run_passes(tcx: TyCtxt<'tcx>, body: &'mir mut Body<'tcx>, passes: &[&dyn MirPass<'tcx>]) {\n+    let start_phase = body.phase;\n+    let mut cnt = 0;\n+\n+    let validate = tcx.sess.opts.debugging_opts.validate_mir;\n+\n+    if validate {\n+        validate_body(tcx, body, format!(\"start of phase transition from {:?}\", start_phase));\n+    }\n+\n+    for pass in passes {\n+        if !pass.is_enabled(&tcx.sess) {\n+            continue;\n+        }\n+\n+        let name = pass.name();\n+        let dump_enabled = pass.is_mir_dump_enabled();\n+\n+        if dump_enabled {\n+            dump_mir(tcx, body, start_phase, &name, cnt, false);\n+        }\n+\n+        pass.run_pass(tcx, body);\n+\n+        if dump_enabled {\n+            dump_mir(tcx, body, start_phase, &name, cnt, true);\n+            cnt += 1;\n+        }\n+\n+        if let Some(new_phase) = pass.phase_change() {\n+            if body.phase >= new_phase {\n+                panic!(\"Invalid MIR phase transition from {:?} to {:?}\", body.phase, new_phase);\n+            }\n+\n+            body.phase = new_phase;\n+        }\n+\n+        if validate {\n+            validate_body(tcx, body, format!(\"after pass {}\", pass.name()));\n+        }\n+    }\n+\n+    if validate || body.phase == MirPhase::Optimization {\n+        validate_body(tcx, body, format!(\"end of phase transition to {:?}\", body.phase));\n+    }\n+}\n+\n+pub fn validate_body(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>, when: String) {\n+    validate::Validator { when, mir_phase: body.phase }.run_pass(tcx, body);\n+}\n+\n+pub fn dump_mir(\n+    tcx: TyCtxt<'tcx>,\n+    body: &Body<'tcx>,\n+    phase: MirPhase,\n+    pass_name: &str,\n+    cnt: usize,\n+    is_after: bool,\n+) {\n+    let phase_index = phase as u32;\n+\n+    mir::dump_mir(\n+        tcx,\n+        Some(&format_args!(\"{:03}-{:03}\", phase_index, cnt)),\n+        pass_name,\n+        if is_after { &\"after\" } else { &\"before\" },\n+        body,\n+        |_, _| Ok(()),\n+    );\n+}"}, {"sha": "2a73e341f1653f77984b618e1d6e05501a1b7ee5", "filename": "compiler/rustc_mir_transform/src/remove_noop_landing_pads.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_noop_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_noop_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_noop_landing_pads.rs?ref=bdaa9010493d26611079a9de1c8722532e140a24", "patch": "@@ -10,18 +10,14 @@ use rustc_target::spec::PanicStrategy;\n /// code for these.\n pub struct RemoveNoopLandingPads;\n \n-pub fn remove_noop_landing_pads<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-    if tcx.sess.panic_strategy() == PanicStrategy::Abort {\n-        return;\n+impl<'tcx> MirPass<'tcx> for RemoveNoopLandingPads {\n+    fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n+        sess.panic_strategy() != PanicStrategy::Abort\n     }\n-    debug!(\"remove_noop_landing_pads({:?})\", body);\n-\n-    RemoveNoopLandingPads.remove_nop_landing_pads(body)\n-}\n \n-impl<'tcx> MirPass<'tcx> for RemoveNoopLandingPads {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        remove_noop_landing_pads(tcx, body);\n+    fn run_pass(&self, _: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+        debug!(\"remove_noop_landing_pads({:?})\", body);\n+        self.remove_nop_landing_pads(body)\n     }\n }\n "}, {"sha": "c9b6e1459d3233e2017ad35a336893b117a01688", "filename": "compiler/rustc_mir_transform/src/remove_storage_markers.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_storage_markers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_storage_markers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_storage_markers.rs?ref=bdaa9010493d26611079a9de1c8722532e140a24", "patch": "@@ -7,6 +7,10 @@ use rustc_middle::ty::TyCtxt;\n pub struct RemoveStorageMarkers;\n \n impl<'tcx> MirPass<'tcx> for RemoveStorageMarkers {\n+    fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n+        sess.mir_opt_level() > 0\n+    }\n+\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         if tcx.sess.emit_lifetime_markers() {\n             return;"}, {"sha": "1d912e6140989b7205866dc5433d587d8aac821e", "filename": "compiler/rustc_mir_transform/src/remove_zsts.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_zsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_zsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_zsts.rs?ref=bdaa9010493d26611079a9de1c8722532e140a24", "patch": "@@ -8,6 +8,10 @@ use rustc_middle::ty::{self, Ty, TyCtxt};\n pub struct RemoveZsts;\n \n impl<'tcx> MirPass<'tcx> for RemoveZsts {\n+    fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n+        sess.mir_opt_level() > 0\n+    }\n+\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         // Avoid query cycles (generators require optimized MIR for layout).\n         if tcx.type_of(body.source.def_id()).is_generator() {"}, {"sha": "a717dd3e0cd8a6686de92de311770ff0c179d7ec", "filename": "compiler/rustc_mir_transform/src/reveal_all.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_transform%2Fsrc%2Freveal_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_transform%2Fsrc%2Freveal_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Freveal_all.rs?ref=bdaa9010493d26611079a9de1c8722532e140a24", "patch": "@@ -8,15 +8,18 @@ use rustc_middle::ty::{self, Ty, TyCtxt};\n pub struct RevealAll;\n \n impl<'tcx> MirPass<'tcx> for RevealAll {\n+    fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n+        sess.opts.mir_opt_level() >= 3 || super::inline::Inline.is_enabled(sess)\n+    }\n+\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        // This pass must run before inlining, since we insert callee bodies in RevealAll mode.\n         // Do not apply this transformation to generators.\n-        if (tcx.sess.mir_opt_level() >= 3 || super::inline::is_enabled(tcx))\n-            && body.generator.is_none()\n-        {\n-            let param_env = tcx.param_env_reveal_all_normalized(body.source.def_id());\n-            RevealAllVisitor { tcx, param_env }.visit_body(body);\n+        if body.generator.is_some() {\n+            return;\n         }\n+\n+        let param_env = tcx.param_env_reveal_all_normalized(body.source.def_id());\n+        RevealAllVisitor { tcx, param_env }.visit_body(body);\n     }\n }\n "}, {"sha": "7450d53ba717ee3ee3cb6d025b51e88cc51d374a", "filename": "compiler/rustc_mir_transform/src/separate_const_switch.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs?ref=bdaa9010493d26611079a9de1c8722532e140a24", "patch": "@@ -45,11 +45,11 @@ use smallvec::SmallVec;\n pub struct SeparateConstSwitch;\n \n impl<'tcx> MirPass<'tcx> for SeparateConstSwitch {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        if tcx.sess.mir_opt_level() < 4 {\n-            return;\n-        }\n+    fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n+        sess.mir_opt_level() >= 4\n+    }\n \n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         // If execution did something, applying a simplification layer\n         // helps later passes optimize the copy away.\n         if separate_const_switch(body) > 0 {"}, {"sha": "193a9e6ad291fe98adb4785d26fd7e5cb8488811", "filename": "compiler/rustc_mir_transform/src/shim.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs?ref=bdaa9010493d26611079a9de1c8722532e140a24", "patch": "@@ -17,8 +17,8 @@ use std::iter;\n \n use crate::util::expand_aggregate;\n use crate::{\n-    abort_unwinding_calls, add_call_guards, add_moves_for_packed_drops, remove_noop_landing_pads,\n-    run_passes, simplify,\n+    abort_unwinding_calls, add_call_guards, add_moves_for_packed_drops, marker, pass_manager as pm,\n+    remove_noop_landing_pads, simplify,\n };\n use rustc_middle::mir::patch::MirPatch;\n use rustc_mir_dataflow::elaborate_drops::{self, DropElaborator, DropFlagMode, DropStyle};\n@@ -75,17 +75,25 @@ fn make_shim<'tcx>(tcx: TyCtxt<'tcx>, instance: ty::InstanceDef<'tcx>) -> Body<'\n     };\n     debug!(\"make_shim({:?}) = untransformed {:?}\", instance, result);\n \n-    run_passes(\n+    // In some of the above cases, we seem to be invoking the passes for non-shim MIR bodies.\n+    // If that happens, there's no need to run them again.\n+    //\n+    // FIXME: Is this intentional?\n+    if result.phase >= MirPhase::Const {\n+        return result;\n+    }\n+\n+    pm::run_passes(\n         tcx,\n         &mut result,\n-        MirPhase::Const,\n-        &[&[\n+        &[\n             &add_moves_for_packed_drops::AddMovesForPackedDrops,\n             &remove_noop_landing_pads::RemoveNoopLandingPads,\n             &simplify::SimplifyCfg::new(\"make_shim\"),\n             &add_call_guards::CriticalCallEdges,\n             &abort_unwinding_calls::AbortUnwindingCalls,\n-        ]],\n+            &marker::PhaseChange(MirPhase::Const),\n+        ],\n     );\n \n     debug!(\"make_shim({:?}) = {:?}\", instance, result);"}, {"sha": "677869a0bdb6ad4add198e258b318c12d1026cc1", "filename": "compiler/rustc_mir_transform/src/simplify.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs?ref=bdaa9010493d26611079a9de1c8722532e140a24", "patch": "@@ -368,6 +368,10 @@ fn save_unreachable_coverage(\n pub struct SimplifyLocals;\n \n impl<'tcx> MirPass<'tcx> for SimplifyLocals {\n+    fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n+        sess.mir_opt_level() > 0\n+    }\n+\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         trace!(\"running SimplifyLocals on {:?}\", body.source);\n         simplify_locals(body, tcx);"}, {"sha": "3bd68e8210d5b1663f925c24d70cd17208a2777a", "filename": "compiler/rustc_mir_transform/src/simplify_comparison_integral.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_comparison_integral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_comparison_integral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_comparison_integral.rs?ref=bdaa9010493d26611079a9de1c8722532e140a24", "patch": "@@ -26,6 +26,10 @@ use rustc_middle::{\n pub struct SimplifyComparisonIntegral;\n \n impl<'tcx> MirPass<'tcx> for SimplifyComparisonIntegral {\n+    fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n+        sess.mir_opt_level() > 0\n+    }\n+\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         trace!(\"Running SimplifyComparisonIntegral on {:?}\", body.source);\n "}, {"sha": "77bc209539b34133a3aaff29739ae22dce4bc276", "filename": "compiler/rustc_mir_transform/src/uninhabited_enum_branching.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_transform%2Fsrc%2Funinhabited_enum_branching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_transform%2Fsrc%2Funinhabited_enum_branching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Funinhabited_enum_branching.rs?ref=bdaa9010493d26611079a9de1c8722532e140a24", "patch": "@@ -70,6 +70,10 @@ fn variant_discriminants<'tcx>(\n }\n \n impl<'tcx> MirPass<'tcx> for UninhabitedEnumBranching {\n+    fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n+        sess.mir_opt_level() > 0\n+    }\n+\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         if body.source.promoted.is_some() {\n             return;"}, {"sha": "37071ba611708dda99ccd2d9b09ed72ebeb5abe0", "filename": "compiler/rustc_mir_transform/src/unreachable_prop.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_transform%2Fsrc%2Funreachable_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_mir_transform%2Fsrc%2Funreachable_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Funreachable_prop.rs?ref=bdaa9010493d26611079a9de1c8722532e140a24", "patch": "@@ -11,13 +11,13 @@ use rustc_middle::ty::TyCtxt;\n pub struct UnreachablePropagation;\n \n impl MirPass<'_> for UnreachablePropagation {\n-    fn run_pass<'tcx>(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        if tcx.sess.mir_opt_level() < 4 {\n-            // Enable only under -Zmir-opt-level=4 as in some cases (check the deeply-nested-opt\n-            // perf benchmark) LLVM may spend quite a lot of time optimizing the generated code.\n-            return;\n-        }\n+    fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n+        // Enable only under -Zmir-opt-level=4 as in some cases (check the deeply-nested-opt\n+        // perf benchmark) LLVM may spend quite a lot of time optimizing the generated code.\n+        sess.mir_opt_level() >= 4\n+    }\n \n+    fn run_pass<'tcx>(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         let mut unreachable_blocks = FxHashSet::default();\n         let mut replacements = FxHashMap::default();\n "}, {"sha": "20ef1afaab2be093a54218333adc03e62f21bc2a", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=bdaa9010493d26611079a9de1c8722532e140a24", "patch": "@@ -101,6 +101,29 @@ macro_rules! top_level_options {\n     );\n }\n \n+impl Options {\n+    pub fn mir_opt_level(&self) -> usize {\n+        self.debugging_opts\n+            .mir_opt_level\n+            .unwrap_or_else(|| if self.optimize != OptLevel::No { 2 } else { 1 })\n+    }\n+\n+    pub fn instrument_coverage(&self) -> bool {\n+        self.debugging_opts.instrument_coverage.unwrap_or(InstrumentCoverage::Off)\n+            != InstrumentCoverage::Off\n+    }\n+\n+    pub fn instrument_coverage_except_unused_generics(&self) -> bool {\n+        self.debugging_opts.instrument_coverage.unwrap_or(InstrumentCoverage::Off)\n+            == InstrumentCoverage::ExceptUnusedGenerics\n+    }\n+\n+    pub fn instrument_coverage_except_unused_functions(&self) -> bool {\n+        self.debugging_opts.instrument_coverage.unwrap_or(InstrumentCoverage::Off)\n+            == InstrumentCoverage::ExceptUnusedFunctions\n+    }\n+}\n+\n top_level_options!(\n     /// The top-level command-line options struct.\n     ///"}, {"sha": "52a92de842f279523594414ef0d413aae34d4bf0", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdaa9010493d26611079a9de1c8722532e140a24/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=bdaa9010493d26611079a9de1c8722532e140a24", "patch": "@@ -562,10 +562,7 @@ impl Session {\n         self.opts.debugging_opts.binary_dep_depinfo\n     }\n     pub fn mir_opt_level(&self) -> usize {\n-        self.opts\n-            .debugging_opts\n-            .mir_opt_level\n-            .unwrap_or_else(|| if self.opts.optimize != config::OptLevel::No { 2 } else { 1 })\n+        self.opts.mir_opt_level()\n     }\n \n     /// Gets the features enabled for the current compilation session.\n@@ -1047,18 +1044,15 @@ impl Session {\n     }\n \n     pub fn instrument_coverage(&self) -> bool {\n-        self.opts.debugging_opts.instrument_coverage.unwrap_or(config::InstrumentCoverage::Off)\n-            != config::InstrumentCoverage::Off\n+        self.opts.instrument_coverage()\n     }\n \n     pub fn instrument_coverage_except_unused_generics(&self) -> bool {\n-        self.opts.debugging_opts.instrument_coverage.unwrap_or(config::InstrumentCoverage::Off)\n-            == config::InstrumentCoverage::ExceptUnusedGenerics\n+        self.opts.instrument_coverage_except_unused_generics()\n     }\n \n     pub fn instrument_coverage_except_unused_functions(&self) -> bool {\n-        self.opts.debugging_opts.instrument_coverage.unwrap_or(config::InstrumentCoverage::Off)\n-            == config::InstrumentCoverage::ExceptUnusedFunctions\n+        self.opts.instrument_coverage_except_unused_functions()\n     }\n \n     pub fn is_proc_macro_attr(&self, attr: &Attribute) -> bool {"}, {"sha": "d04e2a0429d5c3c42be3202eb878751b51d53a5a", "filename": "src/test/mir-opt/early_otherwise_branch_noopt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdaa9010493d26611079a9de1c8722532e140a24/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_noopt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdaa9010493d26611079a9de1c8722532e140a24/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_noopt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_noopt.rs?ref=bdaa9010493d26611079a9de1c8722532e140a24", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Z mir-opt-level=4\n+// compile-flags: -Z mir-opt-level=4 -Zunsound-mir-opts\n \n // must not optimize as it does not follow the pattern of\n // left and right hand side being the same variant"}]}