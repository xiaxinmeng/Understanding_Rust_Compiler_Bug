{"sha": "53ffe39b42af3f9a519866dc5428b552a1977e56", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzZmZlMzliNDJhZjNmOWE1MTk4NjZkYzU0MjhiNTUyYTE5NzdlNTY=", "commit": {"author": {"name": "Andy Wang", "email": "cbeuw.andy@gmail.com", "date": "2021-04-19T22:27:02Z"}, "committer": {"name": "Andy Wang", "email": "cbeuw.andy@gmail.com", "date": "2021-05-05T14:31:28Z"}, "message": "Use local and remapped paths where appropriate", "tree": {"sha": "8db62c5f10ca8c9b2d11d8ab17eb1fc2032fda9c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8db62c5f10ca8c9b2d11d8ab17eb1fc2032fda9c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53ffe39b42af3f9a519866dc5428b552a1977e56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53ffe39b42af3f9a519866dc5428b552a1977e56", "html_url": "https://github.com/rust-lang/rust/commit/53ffe39b42af3f9a519866dc5428b552a1977e56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53ffe39b42af3f9a519866dc5428b552a1977e56/comments", "author": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5491c802c2f6b71070268310644577dd00726fa9", "url": "https://api.github.com/repos/rust-lang/rust/commits/5491c802c2f6b71070268310644577dd00726fa9", "html_url": "https://github.com/rust-lang/rust/commit/5491c802c2f6b71070268310644577dd00726fa9"}], "stats": {"total": 9, "additions": 4, "deletions": 5}, "files": [{"sha": "314bf11e2d66616edc9f9636310fb5f483e221a8", "filename": "clippy_lints/src/macro_use.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/53ffe39b42af3f9a519866dc5428b552a1977e56/clippy_lints%2Fsrc%2Fmacro_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53ffe39b42af3f9a519866dc5428b552a1977e56/clippy_lints%2Fsrc%2Fmacro_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmacro_use.rs?ref=53ffe39b42af3f9a519866dc5428b552a1977e56", "patch": "@@ -47,7 +47,7 @@ pub struct MacroRefData {\n \n impl MacroRefData {\n     pub fn new(name: String, callee: Span, cx: &LateContext<'_>) -> Self {\n-        let mut path = cx.sess().source_map().span_to_filename(callee).to_string();\n+        let mut path = cx.sess().source_map().span_to_filename(callee).prefer_local().to_string();\n \n         // std lib paths are <::std::module::file type>\n         // so remove brackets, space and type.\n@@ -96,8 +96,7 @@ impl MacroUseImports {\n         let name = snippet(cx, cx.sess().source_map().span_until_char(call_site, '!'), \"_\");\n         if let Some(callee) = span.source_callee() {\n             if !self.collected.contains(&call_site) {\n-                self.mac_refs\n-                    .push(MacroRefData::new(name.to_string(), callee.def_site, cx));\n+                self.mac_refs.push(MacroRefData::new(name.to_string(), callee.def_site, cx));\n                 self.collected.insert(call_site);\n             }\n         }\n@@ -175,7 +174,7 @@ impl<'tcx> LateLintPass<'tcx> for MacroUseImports {\n                                 .push((*item).to_string());\n                             check_dup.push((*item).to_string());\n                         }\n-                    },\n+                    }\n                     [root, rest @ ..] => {\n                         if rest.iter().all(|item| !check_dup.contains(&(*item).to_string())) {\n                             let filtered = rest\n@@ -199,7 +198,7 @@ impl<'tcx> LateLintPass<'tcx> for MacroUseImports {\n                                 .push(rest.join(\"::\"));\n                             check_dup.extend(rest.iter().map(ToString::to_string));\n                         }\n-                    },\n+                    }\n                 }\n             }\n         }"}]}