{"sha": "46e6194ee138b09d7376fa3dcdb539cf41dc68dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2ZTYxOTRlZTEzOGIwOWQ3Mzc2ZmEzZGNkYjUzOWNmNDFkYzY4ZGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-04T14:26:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-04T14:26:51Z"}, "message": "auto merge of #13298 : ckendell/rust/remove_managed_pointers_from_tutorial, r=cmr\n\nWork on #13287 \r\n\r\nThis is not ready for a merge yet, but I wanted to get some eyes on what I have done so far.\r\n\r\nAs of right now, all references in the text to managed boxes or pointers are removed. Code associated with those specific sections of text have likewise been altered. I also removed all references to managed closures.\r\n\r\nThere is a small change I would like to add to the work done in 3137cd5, on the new lines 1495 and 1496, I would like to change those values to 10 and 20. I did the same in a later change on lines 1596 and 1508.\r\n\r\nThere are still bits of sample code that use managed pointers and the sigil @. Those are next on my list to remove, but I wanted to have the outstanding changes reviewed first. The uses of @ in the code samples are a bit more embedded, and I will need to be more careful changing them as to not change the purpose of the code examples.\r\n\r\nI ensured that make check still passes, although I'm not sure if that actually tests the code in tutorial.md.\r\n\r\nOne issues I ran into, and tried to avoid, was that `tutorial.md` is formatted with a nice column limit. I was unsure how this was enforced, so wherever I edited a line, I did my best to keep edits on the line they previously existed on. As such, the plain text of `tutorial.md` looks a bit strange as I've left it, and I will clean that up as suggested. The rendered markdown output should not be affected.", "tree": {"sha": "cbcd2b45d3c38f21de8227167a772a1306480483", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbcd2b45d3c38f21de8227167a772a1306480483"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46e6194ee138b09d7376fa3dcdb539cf41dc68dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46e6194ee138b09d7376fa3dcdb539cf41dc68dd", "html_url": "https://github.com/rust-lang/rust/commit/46e6194ee138b09d7376fa3dcdb539cf41dc68dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46e6194ee138b09d7376fa3dcdb539cf41dc68dd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "286b62e0da509888fb6cc05b5b174cb4353e6fd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/286b62e0da509888fb6cc05b5b174cb4353e6fd5", "html_url": "https://github.com/rust-lang/rust/commit/286b62e0da509888fb6cc05b5b174cb4353e6fd5"}, {"sha": "be07cab2cfa224e13f48e9f5c4c5d8e9db75e1f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/be07cab2cfa224e13f48e9f5c4c5d8e9db75e1f3", "html_url": "https://github.com/rust-lang/rust/commit/be07cab2cfa224e13f48e9f5c4c5d8e9db75e1f3"}], "stats": {"total": 35, "additions": 14, "deletions": 21}, "files": [{"sha": "1da3077fa72e865835360e8f76b5e0ac7f1c6814", "filename": "src/doc/tutorial.md", "status": "modified", "additions": 14, "deletions": 21, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/46e6194ee138b09d7376fa3dcdb539cf41dc68dd/src%2Fdoc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/46e6194ee138b09d7376fa3dcdb539cf41dc68dd/src%2Fdoc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftutorial.md?ref=46e6194ee138b09d7376fa3dcdb539cf41dc68dd", "patch": "@@ -1408,20 +1408,17 @@ struct Point {\n ~~~~\n \n We can use this simple definition to allocate points in many different\n-ways. For example, in this code, each of these three local variables\n+ways. For example, in this code, each of these local variables\n contains a point, but allocated in a different location:\n \n ~~~\n # struct Point { x: f64, y: f64 }\n let on_the_stack : Point  =  Point { x: 3.0, y: 4.0 };\n-let managed_box  : @Point = @Point { x: 5.0, y: 1.0 };\n let owned_box    : ~Point = ~Point { x: 7.0, y: 9.0 };\n ~~~\n \n Suppose we want to write a procedure that computes the distance\n-between any two points, no matter where they are stored. For example,\n-we might like to compute the distance between `on_the_stack` and\n-`managed_box`, or between `managed_box` and `owned_box`. One option is\n+between any two points, no matter where they are stored. One option is\n to define a function that takes two arguments of type point\u2014that is,\n it takes the points by value. But this will cause the points to be\n copied when we call the function. For points, this is probably not so\n@@ -1442,11 +1439,9 @@ Now we can call `compute_distance()` in various ways:\n ~~~\n # struct Point{ x: f64, y: f64 };\n # let on_the_stack : Point  =  Point { x: 3.0, y: 4.0 };\n-# let managed_box  : @Point = @Point { x: 5.0, y: 1.0 };\n # let owned_box    : ~Point = ~Point { x: 7.0, y: 9.0 };\n # fn compute_distance(p1: &Point, p2: &Point) -> f64 { 0.0 }\n-compute_distance(&on_the_stack, managed_box);\n-compute_distance(managed_box, owned_box);\n+compute_distance(&on_the_stack, owned_box);\n ~~~\n \n Here the `&` operator is used to take the address of the variable\n@@ -1456,11 +1451,11 @@ reference. We also call this _borrowing_ the local variable\n `on_the_stack`, because we are creating an alias: that is, another\n route to the same data.\n \n-In the case of the boxes `managed_box` and `owned_box`, however, no\n+In the case of `owned_box`, however, no\n explicit action is necessary. The compiler will automatically convert\n-a box like `@point` or `~point` to a reference like\n+a box `~point` to a reference like\n `&point`. This is another form of borrowing; in this case, the\n-contents of the managed/owned box are being lent out.\n+contents of the owned box are being lent out.\n \n Whenever a value is borrowed, there are some limitations on what you\n can do with the original. For example, if the contents of a variable\n@@ -1497,26 +1492,24 @@ Rust uses the unary star operator (`*`) to access the contents of a\n box or pointer, similarly to C.\n \n ~~~\n-let managed = @10;\n let owned = ~20;\n let borrowed = &30;\n \n-let sum = *managed + *owned + *borrowed;\n+let sum = *owned + *borrowed;\n ~~~\n \n Dereferenced mutable pointers may appear on the left hand side of\n assignments. Such an assignment modifies the value that the pointer\n points to.\n \n ~~~\n-let managed = @10;\n-let mut owned = ~20;\n+let mut owned = ~10;\n \n-let mut value = 30;\n+let mut value = 20;\n let borrowed = &mut value;\n \n *owned = *borrowed + 100;\n-*borrowed = *managed + 1000;\n+*borrowed = *owned + 1000;\n ~~~\n \n Pointers have high operator precedence, but lower precedence than the\n@@ -1781,8 +1774,8 @@ pervasively in Rust code.\n \n Owned closures, written `proc`,\n hold on to things that can safely be sent between\n-processes. They copy the values they close over, much like managed\n-closures, but they also own them: that is, no other code can access\n+processes. They copy the values they close over,\n+but they also own them: that is, no other code can access\n them. Owned closures are used in concurrent code, particularly\n for spawning [tasks][tasks].\n \n@@ -1911,7 +1904,7 @@ to a reference.\n #    fn draw_value(self) { /* ... */ }\n # }\n # let s = Circle(Point { x: 1.0, y: 2.0 }, 3.0);\n-// As with typical function arguments, managed and owned pointers\n+// As with typical function arguments, owned pointers\n // are automatically converted to references\n \n (@s).draw_reference();\n@@ -2094,7 +2087,7 @@ and may not be overridden:\n \n * `Send` - Sendable types.\n Types are sendable\n-unless they contain managed boxes, managed closures, or references.\n+unless they contain references.\n \n * `Share` - Types that are *threadsafe*\n These are types that are safe to be used across several threads with access to"}]}