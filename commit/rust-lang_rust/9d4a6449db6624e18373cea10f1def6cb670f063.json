{"sha": "9d4a6449db6624e18373cea10f1def6cb670f063", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkNGE2NDQ5ZGI2NjI0ZTE4MzczY2VhMTBmMWRlZjZjYjY3MGYwNjM=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-05-27T01:02:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-27T01:02:08Z"}, "message": "Rollup merge of #85564 - pnkfelix:issue-85435-readd-capture-disjoint-fields-gate, r=nikomatsakis\n\n readd capture disjoint fields gate\n\nThis readds a feature gate guard that was added in PR #83521. (Basically, there were unintended consequences to the code exposed by removing the feature gate guard.)\n\nThe root bug still remains to be resolved, as discussed in issue #85561. This is just a band-aid suitable for a beta backport.\n\nCc issue #85435\n\nNote that the latter issue is unfixed until we backport this (or another fix) to 1.53 beta", "tree": {"sha": "dda3cadd5f8914b9e6d65c2ae04abba8c63a18e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dda3cadd5f8914b9e6d65c2ae04abba8c63a18e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d4a6449db6624e18373cea10f1def6cb670f063", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgru+QCRBK7hj4Ov3rIwAARUoIAKC1fk+9Ig2JmvCRG6E+673i\nHgLiVOBD+NQ202oU0Mzd7miWtvyueuxhSjuqQn4GOLy6V8rcR0JGfuMepRoUNiob\nE3C0bA0k5N4txmkLHtOEZ0rrCFqTbBwhqG6bOEBgrF1FDcntfZkP6m22w51SPe0s\nmGmraOuOT7iXuCrdAp0fnkiRaXA99Y4+VElE9zEZ9nKQabulmqG+fTbOk3rKp2lX\nyjXp985tDw3u3eXFwXRpRm/GUix2c5IYE8RNqEWIsS/vssLEzmPOf/PAbtG6iZOD\na5KTFmXm8PuqyBasrMfFeaAPdRaXp+hBOLiYdZicf1GbZJWJZfH4ZcR6G8vKODE=\n=NvcT\n-----END PGP SIGNATURE-----\n", "payload": "tree dda3cadd5f8914b9e6d65c2ae04abba8c63a18e0\nparent 3530a7895acd495983a9cd6d7c5b2a9773337366\nparent 1c1d4f907d1aa903a5fecae3fa75298042f5d8d9\nauthor Dylan DPC <dylan.dpc@gmail.com> 1622077328 +0200\ncommitter GitHub <noreply@github.com> 1622077328 +0200\n\nRollup merge of #85564 - pnkfelix:issue-85435-readd-capture-disjoint-fields-gate, r=nikomatsakis\n\n readd capture disjoint fields gate\n\nThis readds a feature gate guard that was added in PR #83521. (Basically, there were unintended consequences to the code exposed by removing the feature gate guard.)\n\nThe root bug still remains to be resolved, as discussed in issue #85561. This is just a band-aid suitable for a beta backport.\n\nCc issue #85435\n\nNote that the latter issue is unfixed until we backport this (or another fix) to 1.53 beta\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d4a6449db6624e18373cea10f1def6cb670f063", "html_url": "https://github.com/rust-lang/rust/commit/9d4a6449db6624e18373cea10f1def6cb670f063", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d4a6449db6624e18373cea10f1def6cb670f063/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3530a7895acd495983a9cd6d7c5b2a9773337366", "url": "https://api.github.com/repos/rust-lang/rust/commits/3530a7895acd495983a9cd6d7c5b2a9773337366", "html_url": "https://github.com/rust-lang/rust/commit/3530a7895acd495983a9cd6d7c5b2a9773337366"}, {"sha": "1c1d4f907d1aa903a5fecae3fa75298042f5d8d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c1d4f907d1aa903a5fecae3fa75298042f5d8d9", "html_url": "https://github.com/rust-lang/rust/commit/1c1d4f907d1aa903a5fecae3fa75298042f5d8d9"}], "stats": {"total": 62, "additions": 47, "deletions": 15}, "files": [{"sha": "2185bd3a5c6126ed0eb14824e6ada8a635c30873", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/9d4a6449db6624e18373cea10f1def6cb670f063/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d4a6449db6624e18373cea10f1def6cb670f063/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=9d4a6449db6624e18373cea10f1def6cb670f063", "patch": "@@ -185,21 +185,26 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 //     match x { _ => () } // fake read of `x`\n                 // };\n                 // ```\n-                for (thir_place, cause, hir_id) in fake_reads.into_iter() {\n-                    let place_builder =\n-                        unpack!(block = this.as_place_builder(block, &this.thir[*thir_place]));\n-\n-                    if let Ok(place_builder_resolved) =\n-                        place_builder.try_upvars_resolved(this.tcx, this.typeck_results)\n-                    {\n-                        let mir_place =\n-                            place_builder_resolved.into_place(this.tcx, this.typeck_results);\n-                        this.cfg.push_fake_read(\n-                            block,\n-                            this.source_info(this.tcx.hir().span(*hir_id)),\n-                            *cause,\n-                            mir_place,\n-                        );\n+                //\n+                // FIXME(RFC2229, rust#85435): Remove feature gate once diagnostics are\n+                // improved and unsafe checking works properly in closure bodies again.\n+                if this.tcx.features().capture_disjoint_fields {\n+                    for (thir_place, cause, hir_id) in fake_reads.into_iter() {\n+                        let place_builder =\n+                            unpack!(block = this.as_place_builder(block, &this.thir[*thir_place]));\n+\n+                        if let Ok(place_builder_resolved) =\n+                            place_builder.try_upvars_resolved(this.tcx, this.typeck_results)\n+                        {\n+                            let mir_place =\n+                                place_builder_resolved.into_place(this.tcx, this.typeck_results);\n+                            this.cfg.push_fake_read(\n+                                block,\n+                                this.source_info(this.tcx.hir().span(*hir_id)),\n+                                *cause,\n+                                mir_place,\n+                            );\n+                        }\n                     }\n                 }\n "}, {"sha": "72f7b67477712cbcba005208cf04cfa1b40eada5", "filename": "src/test/ui/unsafe/issue-85435-unsafe-op-in-let-under-unsafe-under-closure.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9d4a6449db6624e18373cea10f1def6cb670f063/src%2Ftest%2Fui%2Funsafe%2Fissue-85435-unsafe-op-in-let-under-unsafe-under-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d4a6449db6624e18373cea10f1def6cb670f063/src%2Ftest%2Fui%2Funsafe%2Fissue-85435-unsafe-op-in-let-under-unsafe-under-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Fissue-85435-unsafe-op-in-let-under-unsafe-under-closure.rs?ref=9d4a6449db6624e18373cea10f1def6cb670f063", "patch": "@@ -0,0 +1,27 @@\n+// check-pass\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n+\n+// This is issue #85435. But the real story is reflected in issue #85561, where\n+// a bug in the implementation of feature(capture_disjoint_fields) () was\n+// exposed to non-feature-gated code by a diagnostic changing PR that removed\n+// the gating in one case.\n+\n+// This test is double-checking that the case of interest continues to work as\n+// expected in the *absence* of that feature gate. At the time of this writing,\n+// enabling the feature gate will cause this test to fail. We obviously cannot\n+// stabilize that feature until it can correctly handle this test.\n+\n+fn main() {\n+    let val: u8 = 5;\n+    let u8_ptr: *const u8 = &val;\n+    let _closure = || {\n+        unsafe {\n+            let tmp = *u8_ptr;\n+            tmp\n+\n+            // Just dereferencing and returning directly compiles fine:\n+            // *u8_ptr\n+        }\n+    };\n+}"}]}