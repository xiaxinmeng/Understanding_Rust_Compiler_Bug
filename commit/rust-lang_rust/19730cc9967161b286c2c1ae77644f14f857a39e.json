{"sha": "19730cc9967161b286c2c1ae77644f14f857a39e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5NzMwY2M5OTY3MTYxYjI4NmMyYzFhZTc3NjQ0ZjE0Zjg1N2EzOWU=", "commit": {"author": {"name": "csmoe", "email": "35686186+csmoe@users.noreply.github.com", "date": "2018-07-12T00:20:31Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-07-16T13:09:17Z"}, "message": "Fix tidy", "tree": {"sha": "2f04af5a47d489572d7bd3bed51ba76c406a890d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f04af5a47d489572d7bd3bed51ba76c406a890d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19730cc9967161b286c2c1ae77644f14f857a39e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19730cc9967161b286c2c1ae77644f14f857a39e", "html_url": "https://github.com/rust-lang/rust/commit/19730cc9967161b286c2c1ae77644f14f857a39e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19730cc9967161b286c2c1ae77644f14f857a39e/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b0cf56f3212d0ec5f6daa083b6738e39209b07c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b0cf56f3212d0ec5f6daa083b6738e39209b07c", "html_url": "https://github.com/rust-lang/rust/commit/5b0cf56f3212d0ec5f6daa083b6738e39209b07c"}], "stats": {"total": 173, "additions": 131, "deletions": 42}, "files": [{"sha": "2fefd2b33189c9e3d289a5286a4fb2ad7542d1c4", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/19730cc9967161b286c2c1ae77644f14f857a39e/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19730cc9967161b286c2c1ae77644f14f857a39e/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=19730cc9967161b286c2c1ae77644f14f857a39e", "patch": "@@ -519,7 +519,13 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n             // visit_enum_def() takes care of visiting the Item's NodeId\n             visitor.visit_enum_def(enum_definition, type_parameters, item.id, item.span)\n         }\n-        ItemKind::Impl(.., ref type_parameters, ref opt_trait_reference, ref typ, ref impl_item_refs) => {\n+        ItemKind::Impl(\n+            ..,\n+            ref type_parameters,\n+            ref opt_trait_reference,\n+            ref typ,\n+            ref impl_item_refs\n+        ) => {\n             visitor.visit_id(item.id);\n             visitor.visit_generics(type_parameters);\n             walk_list!(visitor, visit_trait_ref, opt_trait_reference);"}, {"sha": "722934ac39a530f8767cb7427fbe8d22dafa12bc", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/19730cc9967161b286c2c1ae77644f14f857a39e/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19730cc9967161b286c2c1ae77644f14f857a39e/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=19730cc9967161b286c2c1ae77644f14f857a39e", "patch": "@@ -3877,7 +3877,9 @@ impl<'a> LoweringContext<'a> {\n                 let expr = opt_expr\n                     .as_ref()\n                     .map(|x| self.lower_expr(x))\n-                    .unwrap_or_else(|| self.expr(e.span, hir::ExprKind::Tup(hir_vec![]), ThinVec::new()));\n+                    .unwrap_or_else(||\n+                    self.expr(e.span, hir::ExprKind::Tup(hir_vec![]), ThinVec::new())\n+                );\n                 hir::ExprKind::Yield(P(expr))\n             }\n \n@@ -4053,11 +4055,18 @@ impl<'a> LoweringContext<'a> {\n \n                     P(self.expr(\n                         head_sp,\n-                        hir::ExprKind::Match(next_expr, arms, hir::MatchSource::ForLoopDesugar),\n+                        hir::ExprKind::Match(\n+                            next_expr,\n+                            arms,\n+                            hir::MatchSource::ForLoopDesugar\n+                        ),\n                         ThinVec::new(),\n                     ))\n                 };\n-                let match_stmt = respan(head_sp, hir::StmtKind::Expr(match_expr, self.next_id().node_id));\n+                let match_stmt = respan(\n+                    head_sp,\n+                    hir::StmtKind::Expr(match_expr, self.next_id().node_id)\n+                );\n \n                 let next_expr = P(self.expr_ident(head_sp, next_ident, next_pat.id));\n \n@@ -4076,7 +4085,10 @@ impl<'a> LoweringContext<'a> {\n \n                 let body_block = self.with_loop_scope(e.id, |this| this.lower_block(body, false));\n                 let body_expr = P(self.expr_block(body_block, ThinVec::new()));\n-                let body_stmt = respan(body.span, hir::StmtKind::Expr(body_expr, self.next_id().node_id));\n+                let body_stmt = respan(\n+                    body.span,\n+                    hir::StmtKind::Expr(body_expr, self.next_id().node_id)\n+                );\n \n                 let loop_block = P(self.block_all(\n                     e.span,"}, {"sha": "b828b1bd30a94be2a587b49a75ea546f4d222238", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 28, "deletions": 10, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/19730cc9967161b286c2c1ae77644f14f857a39e/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19730cc9967161b286c2c1ae77644f14f857a39e/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=19730cc9967161b286c2c1ae77644f14f857a39e", "patch": "@@ -486,7 +486,10 @@ fn visit_expr<'a, 'tcx>(ir: &mut IrMaps<'a, 'tcx>, expr: &'tcx Expr) {\n       }\n \n       // live nodes required for interesting control flow:\n-      hir::ExprKind::If(..) | hir::ExprKind::Match(..) | hir::ExprKind::While(..) | hir::ExprKind::Loop(..) => {\n+      hir::ExprKind::If(..) |\n+      hir::ExprKind::Match(..) |\n+      hir::ExprKind::While(..) |\n+      hir::ExprKind::Loop(..) => {\n         ir.add_live_node_for_node(expr.hir_id, ExprNode(expr.span));\n         intravisit::walk_expr(ir, expr);\n       }\n@@ -496,15 +499,30 @@ fn visit_expr<'a, 'tcx>(ir: &mut IrMaps<'a, 'tcx>, expr: &'tcx Expr) {\n       }\n \n       // otherwise, live nodes are not required:\n-      hir::ExprKind::Index(..) | hir::ExprKind::Field(..) |\n-      hir::ExprKind::Array(..) | hir::ExprKind::Call(..) | hir::ExprKind::MethodCall(..) |\n-      hir::ExprKind::Tup(..) | hir::ExprKind::Binary(..) | hir::ExprKind::AddrOf(..) |\n-      hir::ExprKind::Cast(..) | hir::ExprKind::Unary(..) | hir::ExprKind::Break(..) |\n-      hir::ExprKind::Continue(_) | hir::ExprKind::Lit(_) | hir::ExprKind::Ret(..) |\n-      hir::ExprKind::Block(..) | hir::ExprKind::Assign(..) | hir::ExprKind::AssignOp(..) |\n-      hir::ExprKind::Struct(..) | hir::ExprKind::Repeat(..) |\n-      hir::ExprKind::InlineAsm(..) | hir::ExprKind::Box(..) | hir::ExprKind::Yield(..) |\n-      hir::ExprKind::Type(..) | hir::ExprKind::Path(hir::QPath::TypeRelative(..)) => {\n+      hir::ExprKind::Index(..) |\n+      hir::ExprKind::Field(..) |\n+      hir::ExprKind::Array(..) |\n+      hir::ExprKind::Call(..) |\n+      hir::ExprKind::MethodCall(..) |\n+      hir::ExprKind::Tup(..) |\n+      hir::ExprKind::Binary(..) |\n+      hir::ExprKind::AddrOf(..) |\n+      hir::ExprKind::Cast(..) |\n+      hir::ExprKind::Unary(..) |\n+      hir::ExprKind::Break(..) |\n+      hir::ExprKind::Continue(_) |\n+      hir::ExprKind::Lit(_) |\n+      hir::ExprKind::Ret(..) |\n+      hir::ExprKind::Block(..) |\n+      hir::ExprKind::Assign(..) |\n+      hir::ExprKind::AssignOp(..) |\n+      hir::ExprKind::Struct(..) |\n+      hir::ExprKind::Repeat(..) |\n+      hir::ExprKind::InlineAsm(..) |\n+      hir::ExprKind::Box(..) |\n+      hir::ExprKind::Yield(..) |\n+      hir::ExprKind::Type(..) |\n+      hir::ExprKind::Path(hir::QPath::TypeRelative(..)) => {\n           intravisit::walk_expr(ir, expr);\n       }\n     }"}, {"sha": "a504697008ef4b93de0fa81fca11b6f7088ef870", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/19730cc9967161b286c2c1ae77644f14f857a39e/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19730cc9967161b286c2c1ae77644f14f857a39e/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=19730cc9967161b286c2c1ae77644f14f857a39e", "patch": "@@ -279,13 +279,20 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n                     // These are normal, nothing reachable about these\n                     // inherently and their children are already in the\n                     // worklist, as determined by the privacy pass\n-                    hir::ItemKind::ExternCrate(_) | hir::ItemKind::Use(..) |\n+                    hir::ItemKind::ExternCrate(_) |\n+                    hir::ItemKind::Use(..) |\n                     hir::ItemKind::Existential(..) |\n-                    hir::ItemKind::Ty(..) | hir::ItemKind::Static(..) |\n-                    hir::ItemKind::Mod(..) | hir::ItemKind::ForeignMod(..) |\n-                    hir::ItemKind::Impl(..) | hir::ItemKind::Trait(..) | hir::ItemKind::TraitAlias(..) |\n-                    hir::ItemKind::Struct(..) | hir::ItemKind::Enum(..) |\n-                    hir::ItemKind::Union(..) |  hir::ItemKind::GlobalAsm(..) => {}\n+                    hir::ItemKind::Ty(..) |\n+                    hir::ItemKind::Static(..) |\n+                    hir::ItemKind::Mod(..) |\n+                    hir::ItemKind::ForeignMod(..) |\n+                    hir::ItemKind::Impl(..) |\n+                    hir::ItemKind::Trait(..) |\n+                    hir::ItemKind::TraitAlias(..) |\n+                    hir::ItemKind::Struct(..) |\n+                    hir::ItemKind::Enum(..) |\n+                    hir::ItemKind::Union(..) |\n+                    hir::ItemKind::GlobalAsm(..) => {}\n                 }\n             }\n             hir_map::NodeTraitItem(trait_method) => {"}, {"sha": "05a6cd9c243d25c1e5d69a40c4ea5f4927a34820", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/19730cc9967161b286c2c1ae77644f14f857a39e/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19730cc9967161b286c2c1ae77644f14f857a39e/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=19730cc9967161b286c2c1ae77644f14f857a39e", "patch": "@@ -675,7 +675,9 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     //                          ^            ^ this gets resolved in the scope of\n                     //                                         the exist_ty generics\n                     let (generics, bounds) = match self.tcx.hir.expect_item(id).node {\n-                        hir::ItemKind::Existential(hir::ExistTy{ ref generics, ref bounds, .. }) => (\n+                        hir::ItemKind::Existential(\n+                            hir::ExistTy { ref generics, ref bounds, .. }\n+                        ) => (\n                             generics,\n                             bounds,\n                         ),"}, {"sha": "ad4a4fbff649ca5cdd6ea6590ed743e066ba0b82", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/19730cc9967161b286c2c1ae77644f14f857a39e/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19730cc9967161b286c2c1ae77644f14f857a39e/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=19730cc9967161b286c2c1ae77644f14f857a39e", "patch": "@@ -285,7 +285,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n \n         fn is_comparison(binop: hir::BinOp) -> bool {\n             match binop.node {\n-                hir::BinOpKind::Eq | hir::BinOpKind::Lt | hir::BinOpKind::Le | hir::BinOpKind::Ne | hir::BinOpKind::Ge | hir::BinOpKind::Gt => true,\n+                hir::BinOpKind::Eq |\n+                hir::BinOpKind::Lt |\n+                hir::BinOpKind::Le |\n+                hir::BinOpKind::Ne |\n+                hir::BinOpKind::Ge |\n+                hir::BinOpKind::Gt => true,\n                 _ => false,\n             }\n         }"}, {"sha": "3d64fa572d1e703adffa76939a3cf4cbdd6de4a0", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/19730cc9967161b286c2c1ae77644f14f857a39e/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19730cc9967161b286c2c1ae77644f14f857a39e/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=19730cc9967161b286c2c1ae77644f14f857a39e", "patch": "@@ -102,16 +102,29 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n             // attribute which does exist on the comparison trait methods\n             hir::ExprKind::Binary(bin_op, ..)  => {\n                 match bin_op.node {\n-                    hir::BinOpKind::Eq | hir::BinOpKind::Lt | hir::BinOpKind::Le | hir::BinOpKind::Ne | hir::BinOpKind::Ge | hir::BinOpKind::Gt => {\n+                    hir::BinOpKind::Eq |\n+                    hir::BinOpKind::Lt |\n+                    hir::BinOpKind::Le |\n+                    hir::BinOpKind::Ne |\n+                    hir::BinOpKind::Ge |\n+                    hir::BinOpKind::Gt => {\n                         Some(\"comparison\")\n                     },\n-                    hir::BinOpKind::Add | hir::BinOpKind::Sub | hir::BinOpKind::Div | hir::BinOpKind::Mul | hir::BinOpKind::Rem => {\n+                    hir::BinOpKind::Add |\n+                    hir::BinOpKind::Sub |\n+                    hir::BinOpKind::Div |\n+                    hir::BinOpKind::Mul |\n+                    hir::BinOpKind::Rem => {\n                         Some(\"arithmetic operation\")\n                     },\n                     hir::BinOpKind::And | hir::BinOpKind::Or => {\n                         Some(\"logical operation\")\n                     },\n-                    hir::BinOpKind::BitXor | hir::BinOpKind::BitAnd | hir::BinOpKind::BitOr | hir::BinOpKind::Shl | hir::BinOpKind::Shr => {\n+                    hir::BinOpKind::BitXor |\n+                    hir::BinOpKind::BitAnd |\n+                    hir::BinOpKind::BitOr |\n+                    hir::BinOpKind::Shl |\n+                    hir::BinOpKind::Shr => {\n                         Some(\"bitwise operation\")\n                     },\n                 }"}, {"sha": "fc0e64d0a8a66aa3e4f54d8859e3181b6b01cf26", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/19730cc9967161b286c2c1ae77644f14f857a39e/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19730cc9967161b286c2c1ae77644f14f857a39e/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs?ref=19730cc9967161b286c2c1ae77644f14f857a39e", "patch": "@@ -263,7 +263,10 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                 //\n                 //     &\n                 //     - let's call the lifetime of this reference `'1`\n-                (ty::TyRef(region, referent_ty, _), hir::TyKind::Rptr(_lifetime, referent_hir_ty)) => {\n+                (\n+                    ty::TyRef(region, referent_ty, _),\n+                    hir::TyKind::Rptr(_lifetime, referent_hir_ty),\n+                ) => {\n                     if region.to_region_vid() == needle_fr {\n                         let region_name = self.synthesize_region_name(counter);\n \n@@ -287,7 +290,10 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                 }\n \n                 // Match up something like `Foo<'1>`\n-                (ty::TyAdt(_adt_def, substs), hir::TyKind::Path(hir::QPath::Resolved(None, path))) => {\n+                (\n+                    ty::TyAdt(_adt_def, substs),\n+                    hir::TyKind::Path(hir::QPath::Resolved(None, path)),\n+                ) => {\n                     if let Some(last_segment) = path.segments.last() {\n                         if let Some(name) = self.match_adt_and_segment(\n                             substs,"}, {"sha": "13b2a0ab874191febe9820dfc9f12a2a202af9fd", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/19730cc9967161b286c2c1ae77644f14f857a39e/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19730cc9967161b286c2c1ae77644f14f857a39e/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=19730cc9967161b286c2c1ae77644f14f857a39e", "patch": "@@ -238,7 +238,9 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                     args: vec![fun.to_ref(), tupled_args.to_ref()],\n                 }\n             } else {\n-                let adt_data = if let hir::ExprKind::Path(hir::QPath::Resolved(_, ref path)) = fun.node {\n+                let adt_data = if let hir::ExprKind::Path(hir::QPath::Resolved(_, ref path)) =\n+                    fun.node\n+                {\n                     // Tuple-like ADTs are represented as ExprKind::Call. We convert them here.\n                     expr_ty.ty_adt_def().and_then(|adt_def| {\n                         match path.def {"}, {"sha": "ab383287773a1e14e835ae559f168d18cd9175f4", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/19730cc9967161b286c2c1ae77644f14f857a39e/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19730cc9967161b286c2c1ae77644f14f857a39e/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=19730cc9967161b286c2c1ae77644f14f857a39e", "patch": "@@ -216,9 +216,15 @@ impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n                 }\n             }\n             hir::ItemKind::Existential(..) |\n-            hir::ItemKind::Use(..) | hir::ItemKind::Static(..) | hir::ItemKind::Const(..) |\n-            hir::ItemKind::GlobalAsm(..) | hir::ItemKind::Ty(..) | hir::ItemKind::Mod(..) | hir::ItemKind::TraitAlias(..) |\n-            hir::ItemKind::Fn(..) | hir::ItemKind::ExternCrate(..) => {}\n+            hir::ItemKind::Use(..) |\n+            hir::ItemKind::Static(..) |\n+            hir::ItemKind::Const(..) |\n+            hir::ItemKind::GlobalAsm(..) |\n+            hir::ItemKind::Ty(..) |\n+            hir::ItemKind::Mod(..) |\n+            hir::ItemKind::TraitAlias(..) |\n+            hir::ItemKind::Fn(..) |\n+            hir::ItemKind::ExternCrate(..) => {}\n         }\n \n         // Mark all items in interfaces of reachable items as reachable\n@@ -373,7 +379,8 @@ impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n         loop {\n             let module = if module_id == ast::CRATE_NODE_ID {\n                 &self.tcx.hir.krate().module\n-            } else if let hir::ItemKind::Mod(ref module) = self.tcx.hir.expect_item(module_id).node {\n+            } else if let hir::ItemKind::Mod(ref module) = self.tcx.hir.expect_item(module_id).node\n+            {\n                 module\n             } else {\n                 unreachable!()"}, {"sha": "92b35bd50f3c37b2fb57865a641e536ec8f6fc56", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/19730cc9967161b286c2c1ae77644f14f857a39e/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19730cc9967161b286c2c1ae77644f14f857a39e/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=19730cc9967161b286c2c1ae77644f14f857a39e", "patch": "@@ -306,7 +306,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 if self.can_coerce(ref_ty, expected) {\n                     if let Ok(src) = cm.span_to_snippet(sp) {\n                         let sugg_expr = match expr.node { // parenthesize if needed (Issue #46756)\n-                            hir::ExprKind::Cast(_, _) | hir::ExprKind::Binary(_, _, _) => format!(\"({})\", src),\n+                            hir::ExprKind::Cast(_, _) |\n+                            hir::ExprKind::Binary(_, _, _) => format!(\"({})\", src),\n                             _ => src,\n                         };\n                         if let Some(sugg) = self.can_use_as_ref(expr) {"}, {"sha": "026a9de5052cb8e14b6bd89d43a6ea4804d72aca", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/19730cc9967161b286c2c1ae77644f14f857a39e/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19730cc9967161b286c2c1ae77644f14f857a39e/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=19730cc9967161b286c2c1ae77644f14f857a39e", "patch": "@@ -389,7 +389,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     if let Some(expr) = rcvr_expr {\n                         if let Ok(expr_string) = tcx.sess.codemap().span_to_snippet(expr.span) {\n                             report_function!(expr.span, expr_string);\n-                        } else if let hir::ExprKind::Path(hir::QPath::Resolved(_, ref path)) = expr.node {\n+                        } else if let hir::ExprKind::Path(hir::QPath::Resolved(_, ref path)) =\n+                            expr.node\n+                        {\n                             if let Some(segment) = path.segments.last() {\n                                 report_function!(expr.span, segment.ident);\n                             }"}, {"sha": "46746d4bd298aad5ee0e050400f811e87b4880e1", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/19730cc9967161b286c2c1ae77644f14f857a39e/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19730cc9967161b286c2c1ae77644f14f857a39e/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=19730cc9967161b286c2c1ae77644f14f857a39e", "patch": "@@ -363,10 +363,13 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                 hir::BinOpKind::BitOr  => Some(\"std::ops::BitOr\"),\n                                 hir::BinOpKind::Shl    => Some(\"std::ops::Shl\"),\n                                 hir::BinOpKind::Shr    => Some(\"std::ops::Shr\"),\n-                                hir::BinOpKind::Eq | hir::BinOpKind::Ne => Some(\"std::cmp::PartialEq\"),\n-                                hir::BinOpKind::Lt | hir::BinOpKind::Le | hir::BinOpKind::Gt | hir::BinOpKind::Ge =>\n-                                    Some(\"std::cmp::PartialOrd\"),\n-                                _             => None\n+                                hir::BinOpKind::Eq |\n+                                hir::BinOpKind::Ne => Some(\"std::cmp::PartialEq\"),\n+                                hir::BinOpKind::Lt |\n+                                hir::BinOpKind::Le |\n+                                hir::BinOpKind::Gt |\n+                                hir::BinOpKind::Ge => Some(\"std::cmp::PartialOrd\"),\n+                                _ => None\n                             };\n                             if let Some(missing_trait) = missing_trait {\n                                 if op.node == hir::BinOpKind::Add &&"}, {"sha": "3207ac44948f471885937034d32a4d5716010b10", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/19730cc9967161b286c2c1ae77644f14f857a39e/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19730cc9967161b286c2c1ae77644f14f857a39e/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=19730cc9967161b286c2c1ae77644f14f857a39e", "patch": "@@ -117,7 +117,8 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n     // operating on scalars, we clear the overload.\n     fn fix_scalar_builtin_expr(&mut self, e: &hir::Expr) {\n         match e.node {\n-            hir::ExprKind::Unary(hir::UnNeg, ref inner) | hir::ExprKind::Unary(hir::UnNot, ref inner) => {\n+            hir::ExprKind::Unary(hir::UnNeg, ref inner) |\n+            hir::ExprKind::Unary(hir::UnNot, ref inner) => {\n                 let inner_ty = self.fcx.node_ty(inner.hir_id);\n                 let inner_ty = self.fcx.resolve_type_vars_if_possible(&inner_ty);\n "}, {"sha": "4b628d6ffad75aa0aca69cdb7d8f9f7828e3c364", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/19730cc9967161b286c2c1ae77644f14f857a39e/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19730cc9967161b286c2c1ae77644f14f857a39e/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=19730cc9967161b286c2c1ae77644f14f857a39e", "patch": "@@ -420,7 +420,10 @@ fn convert_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, item_id: ast::NodeId) {\n             }\n         },\n         hir::ItemKind::Existential(..) => {}\n-        hir::ItemKind::Ty(..) | hir::ItemKind::Static(..) | hir::ItemKind::Const(..) | hir::ItemKind::Fn(..) => {\n+        hir::ItemKind::Ty(..) |\n+        hir::ItemKind::Static(..) |\n+        hir::ItemKind::Const(..) |\n+        hir::ItemKind::Fn(..) => {\n             tcx.generics_of(def_id);\n             tcx.type_of(def_id);\n             tcx.predicates_of(def_id);\n@@ -840,7 +843,8 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                     generics\n                 }\n \n-                ItemKind::Trait(_, _, ref generics, ..) | ItemKind::TraitAlias(ref generics, ..) => {\n+                ItemKind::Trait(_, _, ref generics, ..) |\n+                ItemKind::TraitAlias(ref generics, ..) => {\n                     // Add in the self type parameter.\n                     //\n                     // Something of a hack: use the node id for the trait, also as"}]}