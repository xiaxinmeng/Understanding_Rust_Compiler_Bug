{"sha": "c7788ad3bed256d5e7e9698a52c3e2bfaeb0bb75", "node_id": "C_kwDOAAsO6NoAKGM3Nzg4YWQzYmVkMjU2ZDVlN2U5Njk4YTUyYzNlMmJmYWViMGJiNzU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-25T10:15:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-25T10:15:08Z"}, "message": "Auto merge of #12868 - lowr:follow-up-on-12832, r=lnicola\n\nReplace `debug_assert!` with `stdx::always!`\n\nAddresses https://github.com/rust-lang/rust-analyzer/pull/12832#issuecomment-1193713473", "tree": {"sha": "6e714bd62550996b903abb446b689f3eaa865609", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e714bd62550996b903abb446b689f3eaa865609"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7788ad3bed256d5e7e9698a52c3e2bfaeb0bb75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7788ad3bed256d5e7e9698a52c3e2bfaeb0bb75", "html_url": "https://github.com/rust-lang/rust/commit/c7788ad3bed256d5e7e9698a52c3e2bfaeb0bb75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7788ad3bed256d5e7e9698a52c3e2bfaeb0bb75/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e2b983fd459977e11026683ee4afb9598960a4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e2b983fd459977e11026683ee4afb9598960a4c", "html_url": "https://github.com/rust-lang/rust/commit/7e2b983fd459977e11026683ee4afb9598960a4c"}, {"sha": "71225c35bf86e639e3a3cfaf229a9c29f6815751", "url": "https://api.github.com/repos/rust-lang/rust/commits/71225c35bf86e639e3a3cfaf229a9c29f6815751", "html_url": "https://github.com/rust-lang/rust/commit/71225c35bf86e639e3a3cfaf229a9c29f6815751"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "7a0c912959a12c53b9b909225accc56e866d3ca5", "filename": "crates/ide-assists/src/utils/gen_trait_fn_body.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c7788ad3bed256d5e7e9698a52c3e2bfaeb0bb75/crates%2Fide-assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7788ad3bed256d5e7e9698a52c3e2bfaeb0bb75/crates%2Fide-assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs?ref=c7788ad3bed256d5e7e9698a52c3e2bfaeb0bb75", "patch": "@@ -28,7 +28,7 @@ pub(crate) fn gen_trait_fn_body(\n \n /// Generate a `Clone` impl based on the fields and members of the target type.\n fn gen_clone_impl(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n-    debug_assert!(func.name().map_or(false, |name| name.text() == \"clone\"));\n+    stdx::always!(func.name().map_or(false, |name| name.text() == \"clone\"));\n     fn gen_clone_call(target: ast::Expr) -> ast::Expr {\n         let method = make::name_ref(\"clone\");\n         make::expr_method_call(target, method, make::arg_list(None))\n@@ -340,7 +340,7 @@ fn gen_default_impl(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n \n /// Generate a `Hash` impl based on the fields and members of the target type.\n fn gen_hash_impl(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n-    debug_assert!(func.name().map_or(false, |name| name.text() == \"hash\"));\n+    stdx::always!(func.name().map_or(false, |name| name.text() == \"hash\"));\n     fn gen_hash_call(target: ast::Expr) -> ast::Stmt {\n         let method = make::name_ref(\"hash\");\n         let arg = make::expr_path(make::ext::ident_path(\"state\"));\n@@ -396,7 +396,7 @@ fn gen_hash_impl(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n \n /// Generate a `PartialEq` impl based on the fields and members of the target type.\n fn gen_partial_eq(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n-    debug_assert!(func.name().map_or(false, |name| name.text() == \"eq\"));\n+    stdx::always!(func.name().map_or(false, |name| name.text() == \"eq\"));\n     fn gen_eq_chain(expr: Option<ast::Expr>, cmp: ast::Expr) -> Option<ast::Expr> {\n         match expr {\n             Some(expr) => Some(make::expr_bin_op(expr, BinaryOp::LogicOp(LogicOp::And), cmp)),\n@@ -573,7 +573,7 @@ fn gen_partial_eq(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n }\n \n fn gen_partial_ord(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n-    debug_assert!(func.name().map_or(false, |name| name.text() == \"partial_cmp\"));\n+    stdx::always!(func.name().map_or(false, |name| name.text() == \"partial_cmp\"));\n     fn gen_partial_eq_match(match_target: ast::Expr) -> Option<ast::Stmt> {\n         let mut arms = vec![];\n "}]}