{"sha": "190589f8a732393047bd0dc10b27a9aae4410944", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5MDU4OWY4YTczMjM5MzA0N2JkMGRjMTBiMjdhOWFhZTQ0MTA5NDQ=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-07T21:23:56Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-15T20:55:43Z"}, "message": "Use structured suggestion for restricting bounds\n\nWhen a trait bound is not met and restricting a type parameter would\nmake the restriction hold, use a structured suggestion pointing at an\nappropriate place (type param in param list or `where` clause).\n\nAccount for opaque parameters where instead of suggesting extending\nthe `where` clause, we suggest appending the new restriction:\n`fn foo(impl Trait + UnmetTrait)`.", "tree": {"sha": "b22eab92f84259e3bea7c3f7bdbecec7f339ccb2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b22eab92f84259e3bea7c3f7bdbecec7f339ccb2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/190589f8a732393047bd0dc10b27a9aae4410944", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/190589f8a732393047bd0dc10b27a9aae4410944", "html_url": "https://github.com/rust-lang/rust/commit/190589f8a732393047bd0dc10b27a9aae4410944", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/190589f8a732393047bd0dc10b27a9aae4410944/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "237d54ff6c4fb3577e02d4c5af02813c11b63d01", "url": "https://api.github.com/repos/rust-lang/rust/commits/237d54ff6c4fb3577e02d4c5af02813c11b63d01", "html_url": "https://github.com/rust-lang/rust/commit/237d54ff6c4fb3577e02d4c5af02813c11b63d01"}], "stats": {"total": 403, "additions": 335, "deletions": 68}, "files": [{"sha": "b7c7fd4729f0a56af4f68dc29820474f35f4af17", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 95, "deletions": 2, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/190589f8a732393047bd0dc10b27a9aae4410944/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/190589f8a732393047bd0dc10b27a9aae4410944/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=190589f8a732393047bd0dc10b27a9aae4410944", "patch": "@@ -715,8 +715,11 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                             // these notes will often be of the form\n                             //     \"the type `T` can't be frobnicated\"\n                             // which is somewhat confusing.\n-                            err.help(&format!(\"consider adding a `where {}` bound\",\n-                                              trait_ref.to_predicate()));\n+                            self.suggest_restricting_param_bound(\n+                                &mut err,\n+                                &trait_ref,\n+                                obligation.cause.body_id,\n+                            );\n                         } else {\n                             if !have_alt_message {\n                                 // Can't show anything else useful, try to find similar impls.\n@@ -960,6 +963,96 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         err.emit();\n     }\n \n+    fn suggest_restricting_param_bound(\n+        &self,\n+        err: &mut DiagnosticBuilder<'_>,\n+        trait_ref: &ty::PolyTraitRef<'_>,\n+        body_id: hir::HirId,\n+    ) {\n+        let node = self.tcx.hir().find(self.tcx.hir().get_parent_item(body_id));\n+        if let ty::Param(param_ty) = &trait_ref.self_ty().kind {\n+            let restrict_msg = \"consider further restricting this bound\";\n+            let param_name = param_ty.name.as_str();\n+\n+            if let Some(hir::Node::Item(hir::Item {\n+                kind: hir::ItemKind::Struct(_, generics), span, ..\n+            })) |\n+            Some(hir::Node::Item(hir::Item {\n+                kind: hir::ItemKind::Enum(_, generics), span, ..\n+            })) |\n+            Some(hir::Node::Item(hir::Item {\n+                kind: hir::ItemKind::Union(_, generics), span, ..\n+            })) |\n+            Some(hir::Node::Item(hir::Item {\n+                kind: hir::ItemKind::Trait(_, _, generics, ..), span, ..\n+            })) |\n+            Some(hir::Node::Item(hir::Item {\n+                kind: hir::ItemKind::Impl(_, _, _, generics, ..), span, ..\n+            })) |\n+            Some(hir::Node::Item(hir::Item {\n+                kind: hir::ItemKind::Fn(_, _, generics, _), span, ..\n+            })) = &node {\n+                for param in &generics.params {\n+                    if param_name == param.name.ident().as_str() {\n+                        if param_name.starts_with(\"impl \") {\n+                            err.span_suggestion(\n+                                param.span,\n+                                restrict_msg,\n+                                // `impl CurrentTrait + MissingTrait`\n+                                format!(\"{} + {}\", param.name.ident(), trait_ref),\n+                                Applicability::MachineApplicable,\n+                            );\n+                        } else {\n+                            if generics.where_clause.predicates.is_empty() &&\n+                                param.bounds.is_empty()\n+                            {\n+                                err.span_suggestion(\n+                                    param.span,\n+                                    \"consider restricting this bound\",\n+                                    format!(\"{}\", trait_ref.to_predicate()),\n+                                    Applicability::MachineApplicable,\n+                                );\n+                            } else if !generics.where_clause.predicates.is_empty() {\n+                                err.span_suggestion(\n+                                    generics.where_clause.span().unwrap().shrink_to_hi(),\n+                                    &format!(\n+                                        \"consider further restricting type parameter `{}`\",\n+                                        param_ty,\n+                                    ),\n+                                    format!(\", {}\", trait_ref.to_predicate()),\n+                                    Applicability::MachineApplicable,\n+                                );\n+                            } else {\n+                                let sp = param.span.with_hi(span.hi());\n+                                let span = self.tcx.sess.source_map().span_through_char(sp, ':');\n+                                if sp != param.span && sp != span {\n+                                    // Only suggest if we have high certainty that the span covers\n+                                    // the colon in `foo<T: Trait>`.\n+                                    err.span_suggestion(span, restrict_msg, format!(\n+                                        \"{} + \",\n+                                        trait_ref.to_predicate(),\n+                                    ), Applicability::MachineApplicable);\n+                                } else {\n+                                    err.span_label(param.span, &format!(\n+                                        \"consider adding a `where {}` bound\",\n+                                        trait_ref.to_predicate(),\n+                                    ));\n+                                }\n+                            }\n+                        }\n+                        return;\n+                    }\n+                }\n+            }\n+        }\n+        // FIXME: Add special check for `?Sized` so we don't suggest `T: Sized + ?Sized`.\n+\n+        // Fallback in case we didn't find the type argument. Can happen on associated types\n+        // bounds and when `Self` needs to be restricted, like in the ui test\n+        // `associated-types-projection-to-unrelated-trait-in-method-without-default.rs`.\n+        err.help(&format!(\"consider adding a `where {}` bound\", trait_ref.to_predicate()));\n+    }\n+\n     /// When encountering an assignment of an unsized trait, like `let x = \"\"[..];`, provide a\n     /// suggestion to borrow the initializer in order to use have a slice instead.\n     fn suggest_borrow_on_unsized_slice("}, {"sha": "c258892057bf26be1598d0445d5f34feedc209cc", "filename": "src/test/ui/associated-const/associated-const-type-parameter-arrays-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/190589f8a732393047bd0dc10b27a9aae4410944/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-type-parameter-arrays-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/190589f8a732393047bd0dc10b27a9aae4410944/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-type-parameter-arrays-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-type-parameter-arrays-2.stderr?ref=190589f8a732393047bd0dc10b27a9aae4410944", "patch": "@@ -4,10 +4,10 @@ error[E0277]: the trait bound `A: Foo` is not satisfied\n LL |     const Y: usize;\n    |     --------------- required by `Foo::Y`\n ...\n+LL | pub fn test<A: Foo, B: Foo>() {\n+   |             -- help: consider further restricting this bound: `A: Foo +`\n LL |     let _array = [4; <A as Foo>::Y];\n    |                      ^^^^^^^^^^^^^ the trait `Foo` is not implemented for `A`\n-   |\n-   = help: consider adding a `where A: Foo` bound\n \n error: aborting due to previous error\n "}, {"sha": "f6c8e99e27a8158cfd0276f0d789350a498a9a50", "filename": "src/test/ui/associated-const/associated-const-type-parameter-arrays.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/190589f8a732393047bd0dc10b27a9aae4410944/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-type-parameter-arrays.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/190589f8a732393047bd0dc10b27a9aae4410944/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-type-parameter-arrays.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-type-parameter-arrays.stderr?ref=190589f8a732393047bd0dc10b27a9aae4410944", "patch": "@@ -4,10 +4,10 @@ error[E0277]: the trait bound `A: Foo` is not satisfied\n LL |     const Y: usize;\n    |     --------------- required by `Foo::Y`\n ...\n+LL | pub fn test<A: Foo, B: Foo>() {\n+   |             -- help: consider further restricting this bound: `A: Foo +`\n LL |     let _array: [u32; <A as Foo>::Y];\n    |                       ^^^^^^^^^^^^^ the trait `Foo` is not implemented for `A`\n-   |\n-   = help: consider adding a `where A: Foo` bound\n \n error: aborting due to previous error\n "}, {"sha": "0b8b7fab1359ffcaafd27b7d0c530f364fb98ab4", "filename": "src/test/ui/associated-types/associated-types-invalid-trait-ref-issue-18865.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/190589f8a732393047bd0dc10b27a9aae4410944/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-invalid-trait-ref-issue-18865.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/190589f8a732393047bd0dc10b27a9aae4410944/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-invalid-trait-ref-issue-18865.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-invalid-trait-ref-issue-18865.stderr?ref=190589f8a732393047bd0dc10b27a9aae4410944", "patch": "@@ -1,10 +1,10 @@\n error[E0277]: the trait bound `T: Foo<usize>` is not satisfied\n   --> $DIR/associated-types-invalid-trait-ref-issue-18865.rs:10:12\n    |\n+LL | fn f<T:Foo<isize>>(t: &T) {\n+   |      -- help: consider further restricting this bound: `T: Foo<usize> +`\n LL |     let u: <T as Foo<usize>>::Bar = t.get_bar();\n    |            ^^^^^^^^^^^^^^^^^^^^^^ the trait `Foo<usize>` is not implemented for `T`\n-   |\n-   = help: consider adding a `where T: Foo<usize>` bound\n \n error: aborting due to previous error\n "}, {"sha": "740667f1466801c4605a3ddf6ce2967021c9de91", "filename": "src/test/ui/bad/bad-method-typaram-kind.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/190589f8a732393047bd0dc10b27a9aae4410944/src%2Ftest%2Fui%2Fbad%2Fbad-method-typaram-kind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/190589f8a732393047bd0dc10b27a9aae4410944/src%2Ftest%2Fui%2Fbad%2Fbad-method-typaram-kind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-method-typaram-kind.stderr?ref=190589f8a732393047bd0dc10b27a9aae4410944", "patch": "@@ -1,11 +1,12 @@\n error[E0277]: `T` cannot be sent between threads safely\n   --> $DIR/bad-method-typaram-kind.rs:2:7\n    |\n+LL | fn foo<T:'static>() {\n+   |        -- help: consider further restricting this bound: `T: std::marker::Send +`\n LL |     1.bar::<T>();\n    |       ^^^ `T` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `T`\n-   = help: consider adding a `where T: std::marker::Send` bound\n \n error: aborting due to previous error\n "}, {"sha": "05d5bb1e8d5a8d35fdada3b1859c57d02022f3cb", "filename": "src/test/ui/closures/closure-bounds-subtype.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/190589f8a732393047bd0dc10b27a9aae4410944/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-subtype.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/190589f8a732393047bd0dc10b27a9aae4410944/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-subtype.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-subtype.stderr?ref=190589f8a732393047bd0dc10b27a9aae4410944", "patch": "@@ -4,11 +4,13 @@ error[E0277]: `F` cannot be shared between threads safely\n LL | fn take_const_owned<F>(_: F) where F: FnOnce() + Sync + Send {\n    |    ----------------                              ---- required by this bound in `take_const_owned`\n ...\n+LL | fn give_owned<F>(f: F) where F: FnOnce() + Send {\n+   |                                                - help: consider further restricting type parameter `F`: `, F: std::marker::Sync`\n+LL |     take_any(f);\n LL |     take_const_owned(f);\n    |                      ^ `F` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `F`\n-   = help: consider adding a `where F: std::marker::Sync` bound\n \n error: aborting due to previous error\n "}, {"sha": "40db575eabd38c5c278385ddb7877e446521e0c9", "filename": "src/test/ui/dst/dst-object-from-unsized-type.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/190589f8a732393047bd0dc10b27a9aae4410944/src%2Ftest%2Fui%2Fdst%2Fdst-object-from-unsized-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/190589f8a732393047bd0dc10b27a9aae4410944/src%2Ftest%2Fui%2Fdst%2Fdst-object-from-unsized-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-object-from-unsized-type.stderr?ref=190589f8a732393047bd0dc10b27a9aae4410944", "patch": "@@ -1,23 +1,25 @@\n error[E0277]: the size for values of type `T` cannot be known at compilation time\n   --> $DIR/dst-object-from-unsized-type.rs:8:23\n    |\n+LL | fn test1<T: ?Sized + Foo>(t: &T) {\n+   |          -- help: consider further restricting this bound: `T: std::marker::Sized +`\n LL |     let u: &dyn Foo = t;\n    |                       ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where T: std::marker::Sized` bound\n    = note: required for the cast to the object type `dyn Foo`\n \n error[E0277]: the size for values of type `T` cannot be known at compilation time\n   --> $DIR/dst-object-from-unsized-type.rs:13:23\n    |\n+LL | fn test2<T: ?Sized + Foo>(t: &T) {\n+   |          -- help: consider further restricting this bound: `T: std::marker::Sized +`\n LL |     let v: &dyn Foo = t as &dyn Foo;\n    |                       ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where T: std::marker::Sized` bound\n    = note: required for the cast to the object type `dyn Foo`\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time"}, {"sha": "afcb467ad471170a2e9503b2edf7404dc1218182", "filename": "src/test/ui/hrtb/hrtb-higher-ranker-supertraits-transitive.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/190589f8a732393047bd0dc10b27a9aae4410944/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits-transitive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/190589f8a732393047bd0dc10b27a9aae4410944/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits-transitive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits-transitive.stderr?ref=190589f8a732393047bd0dc10b27a9aae4410944", "patch": "@@ -6,10 +6,11 @@ LL | fn want_bar_for_any_ccx<B>(b: &B)\n LL |     where B : for<'ccx> Bar<'ccx>\n    |               ------------------- required by this bound in `want_bar_for_any_ccx`\n ...\n+LL |     where B : Qux\n+   |                  - help: consider further restricting type parameter `B`: `, for<'ccx> B: Bar<'ccx>`\n+...\n LL |     want_bar_for_any_ccx(b);\n    |                          ^ the trait `for<'ccx> Bar<'ccx>` is not implemented for `B`\n-   |\n-   = help: consider adding a `where for<'ccx> B: Bar<'ccx>` bound\n \n error: aborting due to previous error\n "}, {"sha": "20913b4f28c8e7a3da9aa9ed4d874e126a1f5ff1", "filename": "src/test/ui/hrtb/hrtb-higher-ranker-supertraits.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/190589f8a732393047bd0dc10b27a9aae4410944/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/190589f8a732393047bd0dc10b27a9aae4410944/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits.stderr?ref=190589f8a732393047bd0dc10b27a9aae4410944", "patch": "@@ -1,28 +1,30 @@\n error[E0277]: the trait bound `for<'tcx> F: Foo<'tcx>` is not satisfied\n   --> $DIR/hrtb-higher-ranker-supertraits.rs:18:26\n    |\n+LL |     where F : Foo<'x>\n+   |                      - help: consider further restricting type parameter `F`: `, for<'tcx> F: Foo<'tcx>`\n+...\n LL |     want_foo_for_any_tcx(f);\n    |                          ^ the trait `for<'tcx> Foo<'tcx>` is not implemented for `F`\n ...\n LL | fn want_foo_for_any_tcx<F>(f: &F)\n    |    --------------------\n LL |     where F : for<'tcx> Foo<'tcx>\n    |               ------------------- required by this bound in `want_foo_for_any_tcx`\n-   |\n-   = help: consider adding a `where for<'tcx> F: Foo<'tcx>` bound\n \n error[E0277]: the trait bound `for<'ccx> B: Bar<'ccx>` is not satisfied\n   --> $DIR/hrtb-higher-ranker-supertraits.rs:35:26\n    |\n+LL |     where B : Bar<'x>\n+   |                      - help: consider further restricting type parameter `B`: `, for<'ccx> B: Bar<'ccx>`\n+...\n LL |     want_bar_for_any_ccx(b);\n    |                          ^ the trait `for<'ccx> Bar<'ccx>` is not implemented for `B`\n ...\n LL | fn want_bar_for_any_ccx<B>(b: &B)\n    |    --------------------\n LL |     where B : for<'ccx> Bar<'ccx>\n    |               ------------------- required by this bound in `want_bar_for_any_ccx`\n-   |\n-   = help: consider adding a `where for<'ccx> B: Bar<'ccx>` bound\n \n error: aborting due to 2 previous errors\n "}, {"sha": "777a553c2a58a7900cdaf40da1ec43fafc7e7b4c", "filename": "src/test/ui/kindck/kindck-impl-type-params.stderr", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/190589f8a732393047bd0dc10b27a9aae4410944/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/190589f8a732393047bd0dc10b27a9aae4410944/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.stderr?ref=190589f8a732393047bd0dc10b27a9aae4410944", "patch": "@@ -1,42 +1,50 @@\n error[E0277]: `T` cannot be sent between threads safely\n   --> $DIR/kindck-impl-type-params.rs:18:13\n    |\n+LL | fn f<T>(val: T) {\n+   |      - help: consider restricting this bound: `T: std::marker::Send`\n+LL |     let t: S<T> = S(marker::PhantomData);\n LL |     let a = &t as &dyn Gettable<T>;\n    |             ^^ `T` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `T`\n-   = help: consider adding a `where T: std::marker::Send` bound\n    = note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n    = note: required for the cast to the object type `dyn Gettable<T>`\n \n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/kindck-impl-type-params.rs:18:13\n    |\n+LL | fn f<T>(val: T) {\n+   |      - help: consider restricting this bound: `T: std::marker::Copy`\n+LL |     let t: S<T> = S(marker::PhantomData);\n LL |     let a = &t as &dyn Gettable<T>;\n    |             ^^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n-   = help: consider adding a `where T: std::marker::Copy` bound\n    = note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n    = note: required for the cast to the object type `dyn Gettable<T>`\n \n error[E0277]: `T` cannot be sent between threads safely\n   --> $DIR/kindck-impl-type-params.rs:25:31\n    |\n+LL | fn g<T>(val: T) {\n+   |      - help: consider restricting this bound: `T: std::marker::Send`\n+LL |     let t: S<T> = S(marker::PhantomData);\n LL |     let a: &dyn Gettable<T> = &t;\n    |                               ^^ `T` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `T`\n-   = help: consider adding a `where T: std::marker::Send` bound\n    = note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n    = note: required for the cast to the object type `dyn Gettable<T>`\n \n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/kindck-impl-type-params.rs:25:31\n    |\n+LL | fn g<T>(val: T) {\n+   |      - help: consider restricting this bound: `T: std::marker::Copy`\n+LL |     let t: S<T> = S(marker::PhantomData);\n LL |     let a: &dyn Gettable<T> = &t;\n    |                               ^^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n-   = help: consider adding a `where T: std::marker::Copy` bound\n    = note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n    = note: required for the cast to the object type `dyn Gettable<T>`\n "}, {"sha": "4d9d06b8986d5c6b15c94cb52cd12a184b149776", "filename": "src/test/ui/phantom-oibit.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/190589f8a732393047bd0dc10b27a9aae4410944/src%2Ftest%2Fui%2Fphantom-oibit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/190589f8a732393047bd0dc10b27a9aae4410944/src%2Ftest%2Fui%2Fphantom-oibit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fphantom-oibit.stderr?ref=190589f8a732393047bd0dc10b27a9aae4410944", "patch": "@@ -3,12 +3,13 @@ error[E0277]: `T` cannot be shared between threads safely\n    |\n LL | fn is_zen<T: Zen>(_: T) {}\n    |    ------    --- required by this bound in `is_zen`\n-...\n+LL | \n+LL | fn not_sync<T>(x: Guard<T>) {\n+   |             - help: consider restricting this bound: `T: std::marker::Sync`\n LL |     is_zen(x)\n    |            ^ `T` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `T`\n-   = help: consider adding a `where T: std::marker::Sync` bound\n    = note: required because of the requirements on the impl of `Zen` for `&T`\n    = note: required because it appears within the type `std::marker::PhantomData<&T>`\n    = note: required because it appears within the type `Guard<'_, T>`\n@@ -19,11 +20,12 @@ error[E0277]: `T` cannot be shared between threads safely\n LL | fn is_zen<T: Zen>(_: T) {}\n    |    ------    --- required by this bound in `is_zen`\n ...\n+LL | fn nested_not_sync<T>(x: Nested<Guard<T>>) {\n+   |                    - help: consider restricting this bound: `T: std::marker::Sync`\n LL |     is_zen(x)\n    |            ^ `T` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `T`\n-   = help: consider adding a `where T: std::marker::Sync` bound\n    = note: required because of the requirements on the impl of `Zen` for `&T`\n    = note: required because it appears within the type `std::marker::PhantomData<&T>`\n    = note: required because it appears within the type `Guard<'_, T>`"}, {"sha": "c4ebfbe922c094182ecbe9d5a65302421bf5f154", "filename": "src/test/ui/suggestions/restrict-type-argument.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/190589f8a732393047bd0dc10b27a9aae4410944/src%2Ftest%2Fui%2Fsuggestions%2Frestrict-type-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/190589f8a732393047bd0dc10b27a9aae4410944/src%2Ftest%2Fui%2Fsuggestions%2Frestrict-type-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Frestrict-type-argument.rs?ref=190589f8a732393047bd0dc10b27a9aae4410944", "patch": "@@ -0,0 +1,31 @@\n+fn is_send<T: Send>(val: T) {}\n+\n+fn use_impl_sync(val: impl Sync) {\n+    is_send(val); //~ ERROR `impl Sync` cannot be sent between threads safely\n+}\n+\n+fn use_where<S>(val: S) where S: Sync {\n+    is_send(val); //~ ERROR `S` cannot be sent between threads safely\n+}\n+\n+fn use_bound<S: Sync>(val: S) {\n+    is_send(val); //~ ERROR `S` cannot be sent between threads safely\n+}\n+\n+fn use_bound_2<\n+    S // Make sure we can synthezise a correct suggestion span for this case\n+    :\n+    Sync\n+>(val: S) {\n+    is_send(val); //~ ERROR `S` cannot be sent between threads safely\n+}\n+\n+fn use_bound_and_where<S: Sync>(val: S) where S: std::fmt::Debug {\n+    is_send(val); //~ ERROR `S` cannot be sent between threads safely\n+}\n+\n+fn use_unbound<S>(val: S) {\n+    is_send(val); //~ ERROR `S` cannot be sent between threads safely\n+}\n+\n+fn main() {}"}, {"sha": "d6840ca4d7265d3c5ec1b1f9456b8ac8a1adf309", "filename": "src/test/ui/suggestions/restrict-type-argument.stderr", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/190589f8a732393047bd0dc10b27a9aae4410944/src%2Ftest%2Fui%2Fsuggestions%2Frestrict-type-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/190589f8a732393047bd0dc10b27a9aae4410944/src%2Ftest%2Fui%2Fsuggestions%2Frestrict-type-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Frestrict-type-argument.stderr?ref=190589f8a732393047bd0dc10b27a9aae4410944", "patch": "@@ -0,0 +1,83 @@\n+error[E0277]: `impl Sync` cannot be sent between threads safely\n+  --> $DIR/restrict-type-argument.rs:4:13\n+   |\n+LL | fn is_send<T: Send>(val: T) {}\n+   |    -------    ---- required by this bound in `is_send`\n+LL | \n+LL | fn use_impl_sync(val: impl Sync) {\n+   |                       --------- help: consider further restricting this bound: `impl Sync + std::marker::Send`\n+LL |     is_send(val);\n+   |             ^^^ `impl Sync` cannot be sent between threads safely\n+   |\n+   = help: the trait `std::marker::Send` is not implemented for `impl Sync`\n+\n+error[E0277]: `S` cannot be sent between threads safely\n+  --> $DIR/restrict-type-argument.rs:8:13\n+   |\n+LL | fn is_send<T: Send>(val: T) {}\n+   |    -------    ---- required by this bound in `is_send`\n+...\n+LL | fn use_where<S>(val: S) where S: Sync {\n+   |                                      - help: consider further restricting type parameter `S`: `, S: std::marker::Send`\n+LL |     is_send(val);\n+   |             ^^^ `S` cannot be sent between threads safely\n+   |\n+   = help: the trait `std::marker::Send` is not implemented for `S`\n+\n+error[E0277]: `S` cannot be sent between threads safely\n+  --> $DIR/restrict-type-argument.rs:12:13\n+   |\n+LL | fn is_send<T: Send>(val: T) {}\n+   |    -------    ---- required by this bound in `is_send`\n+...\n+LL | fn use_bound<S: Sync>(val: S) {\n+   |              -- help: consider further restricting this bound: `S: std::marker::Send +`\n+LL |     is_send(val);\n+   |             ^^^ `S` cannot be sent between threads safely\n+   |\n+   = help: the trait `std::marker::Send` is not implemented for `S`\n+\n+error[E0277]: `S` cannot be sent between threads safely\n+  --> $DIR/restrict-type-argument.rs:20:13\n+   |\n+LL |   fn is_send<T: Send>(val: T) {}\n+   |      -------    ---- required by this bound in `is_send`\n+...\n+LL | /     S // Make sure we can synthezise a correct suggestion span for this case\n+LL | |     :\n+   | |_____- help: consider further restricting this bound: `S: std::marker::Send +`\n+...\n+LL |       is_send(val);\n+   |               ^^^ `S` cannot be sent between threads safely\n+   |\n+   = help: the trait `std::marker::Send` is not implemented for `S`\n+\n+error[E0277]: `S` cannot be sent between threads safely\n+  --> $DIR/restrict-type-argument.rs:24:13\n+   |\n+LL | fn is_send<T: Send>(val: T) {}\n+   |    -------    ---- required by this bound in `is_send`\n+...\n+LL | fn use_bound_and_where<S: Sync>(val: S) where S: std::fmt::Debug {\n+   |                                                                 - help: consider further restricting type parameter `S`: `, S: std::marker::Send`\n+LL |     is_send(val);\n+   |             ^^^ `S` cannot be sent between threads safely\n+   |\n+   = help: the trait `std::marker::Send` is not implemented for `S`\n+\n+error[E0277]: `S` cannot be sent between threads safely\n+  --> $DIR/restrict-type-argument.rs:28:13\n+   |\n+LL | fn is_send<T: Send>(val: T) {}\n+   |    -------    ---- required by this bound in `is_send`\n+...\n+LL | fn use_unbound<S>(val: S) {\n+   |                - help: consider restricting this bound: `S: std::marker::Send`\n+LL |     is_send(val);\n+   |             ^^^ `S` cannot be sent between threads safely\n+   |\n+   = help: the trait `std::marker::Send` is not implemented for `S`\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "bc9948064a30cac3ddcd7d5c9784f680f47b4cc3", "filename": "src/test/ui/traits/trait-suggest-where-clause.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/190589f8a732393047bd0dc10b27a9aae4410944/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/190589f8a732393047bd0dc10b27a9aae4410944/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-where-clause.stderr?ref=190589f8a732393047bd0dc10b27a9aae4410944", "patch": "@@ -1,6 +1,9 @@\n error[E0277]: the size for values of type `U` cannot be known at compilation time\n   --> $DIR/trait-suggest-where-clause.rs:9:20\n    |\n+LL | fn check<T: Iterator, U: ?Sized>() {\n+   |                       -- help: consider further restricting this bound: `U: std::marker::Sized +`\n+LL |     // suggest a where-clause, if needed\n LL |     mem::size_of::<U>();\n    |                    ^ doesn't have a size known at compile-time\n    | \n@@ -11,11 +14,13 @@ LL | pub const fn size_of<T>() -> usize {\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `U`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where U: std::marker::Sized` bound\n \n error[E0277]: the size for values of type `U` cannot be known at compilation time\n   --> $DIR/trait-suggest-where-clause.rs:12:5\n    |\n+LL | fn check<T: Iterator, U: ?Sized>() {\n+   |                       -- help: consider further restricting this bound: `U: std::marker::Sized +`\n+...\n LL |     mem::size_of::<Misc<U>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    | \n@@ -26,7 +31,6 @@ LL | pub const fn size_of<T>() -> usize {\n    |\n    = help: within `Misc<U>`, the trait `std::marker::Sized` is not implemented for `U`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where U: std::marker::Sized` bound\n    = note: required because it appears within the type `Misc<U>`\n \n error[E0277]: the trait bound `u64: std::convert::From<T>` is not satisfied"}, {"sha": "85c7a55c31379c14bf696804401ed5890d9fbe5a", "filename": "src/test/ui/traits/traits-repeated-supertrait-ambig.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/190589f8a732393047bd0dc10b27a9aae4410944/src%2Ftest%2Fui%2Ftraits%2Ftraits-repeated-supertrait-ambig.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/190589f8a732393047bd0dc10b27a9aae4410944/src%2Ftest%2Fui%2Ftraits%2Ftraits-repeated-supertrait-ambig.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-repeated-supertrait-ambig.stderr?ref=190589f8a732393047bd0dc10b27a9aae4410944", "patch": "@@ -7,10 +7,10 @@ LL |     c.same_as(22)\n error[E0277]: the trait bound `C: CompareTo<i32>` is not satisfied\n   --> $DIR/traits-repeated-supertrait-ambig.rs:30:7\n    |\n+LL | fn with_trait<C:CompareToInts>(c: &C) -> bool {\n+   |               -- help: consider further restricting this bound: `C: CompareTo<i32> +`\n LL |     c.same_as(22)\n    |       ^^^^^^^ the trait `CompareTo<i32>` is not implemented for `C`\n-   |\n-   = help: consider adding a `where C: CompareTo<i32>` bound\n \n error[E0277]: the trait bound `dyn CompareToInts: CompareTo<i32>` is not satisfied\n   --> $DIR/traits-repeated-supertrait-ambig.rs:34:5\n@@ -27,10 +27,10 @@ error[E0277]: the trait bound `C: CompareTo<i32>` is not satisfied\n LL |     fn same_as(&self, t: T) -> bool;\n    |     -------------------------------- required by `CompareTo::same_as`\n ...\n+LL | fn with_ufcs2<C:CompareToInts>(c: &C) -> bool {\n+   |               -- help: consider further restricting this bound: `C: CompareTo<i32> +`\n LL |     CompareTo::same_as(c, 22)\n    |     ^^^^^^^^^^^^^^^^^^ the trait `CompareTo<i32>` is not implemented for `C`\n-   |\n-   = help: consider adding a `where C: CompareTo<i32>` bound\n \n error[E0277]: the trait bound `i64: CompareTo<i32>` is not satisfied\n   --> $DIR/traits-repeated-supertrait-ambig.rs:42:23"}, {"sha": "63c07224353e2e018343760e098e2b0834a031bc", "filename": "src/test/ui/type-alias-impl-trait/generic_underconstrained.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/190589f8a732393047bd0dc10b27a9aae4410944/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/190589f8a732393047bd0dc10b27a9aae4410944/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.stderr?ref=190589f8a732393047bd0dc10b27a9aae4410944", "patch": "@@ -9,8 +9,10 @@ error[E0277]: the trait bound `T: Trait` is not satisfied\n    |\n LL | type Underconstrained<T: Trait> = impl 'static;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait` is not implemented for `T`\n+...\n+LL | fn underconstrain<T>(_: T) -> Underconstrained<T> {\n+   |                   - help: consider restricting this bound: `T: Trait`\n    |\n-   = help: consider adding a `where T: Trait` bound\n    = note: the return type of a function must have a statically known size\n \n error: aborting due to 2 previous errors"}, {"sha": "ba892f6ed7c7b7918811f34d0816e7fd1d92973a", "filename": "src/test/ui/type-alias-impl-trait/generic_underconstrained2.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/190589f8a732393047bd0dc10b27a9aae4410944/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/190589f8a732393047bd0dc10b27a9aae4410944/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.stderr?ref=190589f8a732393047bd0dc10b27a9aae4410944", "patch": "@@ -15,19 +15,23 @@ error[E0277]: `U` doesn't implement `std::fmt::Debug`\n    |\n LL | type Underconstrained<T: std::fmt::Debug> = impl 'static;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `U` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n+...\n+LL | fn underconstrained<U>(_: U) -> Underconstrained<U> {\n+   |                     - help: consider restricting this bound: `U: std::fmt::Debug`\n    |\n    = help: the trait `std::fmt::Debug` is not implemented for `U`\n-   = help: consider adding a `where U: std::fmt::Debug` bound\n    = note: the return type of a function must have a statically known size\n \n error[E0277]: `V` doesn't implement `std::fmt::Debug`\n   --> $DIR/generic_underconstrained2.rs:14:1\n    |\n LL | type Underconstrained2<T: std::fmt::Debug> = impl 'static;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `V` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n+...\n+LL | fn underconstrained2<U, V>(_: U, _: V) -> Underconstrained2<V> {\n+   |                         - help: consider restricting this bound: `V: std::fmt::Debug`\n    |\n    = help: the trait `std::fmt::Debug` is not implemented for `V`\n-   = help: consider adding a `where V: std::fmt::Debug` bound\n    = note: the return type of a function must have a statically known size\n \n error: aborting due to 4 previous errors"}, {"sha": "a84aef5fdbdb66d5090c008114f82b442f21b079", "filename": "src/test/ui/typeck/typeck-default-trait-impl-send-param.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/190589f8a732393047bd0dc10b27a9aae4410944/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-send-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/190589f8a732393047bd0dc10b27a9aae4410944/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-send-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-send-param.stderr?ref=190589f8a732393047bd0dc10b27a9aae4410944", "patch": "@@ -1,14 +1,15 @@\n error[E0277]: `T` cannot be sent between threads safely\n   --> $DIR/typeck-default-trait-impl-send-param.rs:5:15\n    |\n+LL | fn foo<T>() {\n+   |        - help: consider restricting this bound: `T: std::marker::Send`\n LL |     is_send::<T>()\n    |               ^ `T` cannot be sent between threads safely\n ...\n LL | fn is_send<T:Send>() {\n    |    -------   ---- required by this bound in `is_send`\n    |\n    = help: the trait `std::marker::Send` is not implemented for `T`\n-   = help: consider adding a `where T: std::marker::Send` bound\n \n error: aborting due to previous error\n "}, {"sha": "bd97b0203b5104fcde519a193e7bef21440efd9e", "filename": "src/test/ui/unsized/unsized-bare-typaram.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/190589f8a732393047bd0dc10b27a9aae4410944/src%2Ftest%2Fui%2Funsized%2Funsized-bare-typaram.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/190589f8a732393047bd0dc10b27a9aae4410944/src%2Ftest%2Fui%2Funsized%2Funsized-bare-typaram.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-bare-typaram.stderr?ref=190589f8a732393047bd0dc10b27a9aae4410944", "patch": "@@ -4,11 +4,12 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n LL | fn bar<T: Sized>() { }\n    |    --- - required by this bound in `bar`\n LL | fn foo<T: ?Sized>() { bar::<T>() }\n-   |                             ^ doesn't have a size known at compile-time\n+   |        --                   ^ doesn't have a size known at compile-time\n+   |        |\n+   |        help: consider further restricting this bound: `T: std::marker::Sized +`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where T: std::marker::Sized` bound\n \n error: aborting due to previous error\n "}, {"sha": "341d3e4cc2df2926248e5ea81459b4b122e9c6a8", "filename": "src/test/ui/unsized/unsized-enum.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/190589f8a732393047bd0dc10b27a9aae4410944/src%2Ftest%2Fui%2Funsized%2Funsized-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/190589f8a732393047bd0dc10b27a9aae4410944/src%2Ftest%2Fui%2Funsized%2Funsized-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-enum.stderr?ref=190589f8a732393047bd0dc10b27a9aae4410944", "patch": "@@ -5,11 +5,12 @@ LL | enum Foo<U> { FooSome(U), FooNone }\n    | ----------- required by `Foo`\n LL | fn foo1<T>() { not_sized::<Foo<T>>() } // Hunky dory.\n LL | fn foo2<T: ?Sized>() { not_sized::<Foo<T>>() }\n-   |                                    ^^^^^^ doesn't have a size known at compile-time\n+   |         --                         ^^^^^^ doesn't have a size known at compile-time\n+   |         |\n+   |         help: consider further restricting this bound: `T: std::marker::Sized +`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where T: std::marker::Sized` bound\n \n error: aborting due to previous error\n "}, {"sha": "2894d5d56710dd3384ad1b7ad6732863dc3e5590", "filename": "src/test/ui/unsized/unsized-struct.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/190589f8a732393047bd0dc10b27a9aae4410944/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/190589f8a732393047bd0dc10b27a9aae4410944/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr?ref=190589f8a732393047bd0dc10b27a9aae4410944", "patch": "@@ -5,11 +5,12 @@ LL | struct Foo<T> { data: T }\n    | ------------- required by `Foo`\n LL | fn foo1<T>() { not_sized::<Foo<T>>() } // Hunky dory.\n LL | fn foo2<T: ?Sized>() { not_sized::<Foo<T>>() }\n-   |                                    ^^^^^^ doesn't have a size known at compile-time\n+   |         --                         ^^^^^^ doesn't have a size known at compile-time\n+   |         |\n+   |         help: consider further restricting this bound: `T: std::marker::Sized +`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where T: std::marker::Sized` bound\n \n error[E0277]: the size for values of type `T` cannot be known at compilation time\n   --> $DIR/unsized-struct.rs:13:24\n@@ -18,11 +19,12 @@ LL | fn is_sized<T:Sized>() { }\n    |    -------- - required by this bound in `is_sized`\n ...\n LL | fn bar2<T: ?Sized>() { is_sized::<Bar<T>>() }\n-   |                        ^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |         --             ^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |         |\n+   |         help: consider further restricting this bound: `T: std::marker::Sized +`\n    |\n    = help: within `Bar<T>`, the trait `std::marker::Sized` is not implemented for `T`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where T: std::marker::Sized` bound\n    = note: required because it appears within the type `Bar<T>`\n \n error: aborting due to 2 previous errors"}, {"sha": "232296ad09126b3e7194f6d848e8c01a56fbae4b", "filename": "src/test/ui/unsized3.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/190589f8a732393047bd0dc10b27a9aae4410944/src%2Ftest%2Fui%2Funsized3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/190589f8a732393047bd0dc10b27a9aae4410944/src%2Ftest%2Fui%2Funsized3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized3.stderr?ref=190589f8a732393047bd0dc10b27a9aae4410944", "patch": "@@ -1,6 +1,8 @@\n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized3.rs:7:13\n    |\n+LL | fn f1<X: ?Sized>(x: &X) {\n+   |       -- help: consider further restricting this bound: `X: std::marker::Sized +`\n LL |     f2::<X>(x);\n    |             ^ doesn't have a size known at compile-time\n ...\n@@ -9,11 +11,12 @@ LL | fn f2<X>(x: &X) {\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where X: std::marker::Sized` bound\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized3.rs:18:13\n    |\n+LL | fn f3<X: ?Sized + T>(x: &X) {\n+   |       -- help: consider further restricting this bound: `X: std::marker::Sized +`\n LL |     f4::<X>(x);\n    |             ^ doesn't have a size known at compile-time\n ...\n@@ -22,43 +25,45 @@ LL | fn f4<X: T>(x: &X) {\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where X: std::marker::Sized` bound\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized3.rs:33:8\n    |\n LL | fn f5<Y>(x: &Y) {}\n    |    -- - required by this bound in `f5`\n ...\n+LL | fn f8<X: ?Sized>(x1: &S<X>, x2: &S<X>) {\n+   |       -- help: consider further restricting this bound: `X: std::marker::Sized +`\n LL |     f5(x1);\n    |        ^^ doesn't have a size known at compile-time\n    |\n    = help: within `S<X>`, the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where X: std::marker::Sized` bound\n    = note: required because it appears within the type `S<X>`\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized3.rs:40:8\n    |\n+LL | fn f9<X: ?Sized>(x1: Box<S<X>>) {\n+   |       -- help: consider further restricting this bound: `X: std::marker::Sized +`\n LL |     f5(&(*x1, 34));\n    |        ^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `S<X>`, the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where X: std::marker::Sized` bound\n    = note: required because it appears within the type `S<X>`\n    = note: only the last element of a tuple may have a dynamically sized type\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized3.rs:45:9\n    |\n+LL | fn f10<X: ?Sized>(x1: Box<S<X>>) {\n+   |        -- help: consider further restricting this bound: `X: std::marker::Sized +`\n LL |     f5(&(32, *x1));\n    |         ^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `({integer}, S<X>)`, the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where X: std::marker::Sized` bound\n    = note: required because it appears within the type `S<X>`\n    = note: required because it appears within the type `({integer}, S<X>)`\n    = note: tuples must have a statically known size to be initialized\n@@ -69,12 +74,13 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n LL | fn f5<Y>(x: &Y) {}\n    |    -- - required by this bound in `f5`\n ...\n+LL | fn f10<X: ?Sized>(x1: Box<S<X>>) {\n+   |        -- help: consider further restricting this bound: `X: std::marker::Sized +`\n LL |     f5(&(32, *x1));\n    |        ^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `({integer}, S<X>)`, the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where X: std::marker::Sized` bound\n    = note: required because it appears within the type `S<X>`\n    = note: required because it appears within the type `({integer}, S<X>)`\n "}, {"sha": "95acd987a5a272f11f9d92f1a8a449a8e861f06a", "filename": "src/test/ui/unsized6.stderr", "status": "modified", "additions": 36, "deletions": 15, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/190589f8a732393047bd0dc10b27a9aae4410944/src%2Ftest%2Fui%2Funsized6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/190589f8a732393047bd0dc10b27a9aae4410944/src%2Ftest%2Fui%2Funsized6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized6.stderr?ref=190589f8a732393047bd0dc10b27a9aae4410944", "patch": "@@ -1,153 +1,174 @@\n error[E0277]: the size for values of type `Y` cannot be known at compilation time\n   --> $DIR/unsized6.rs:9:9\n    |\n+LL | fn f1<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized>(x: &X) {\n+   |                             -- help: consider further restricting this bound: `Y: std::marker::Sized +`\n+...\n LL |     let y: Y;\n    |         ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `Y`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where Y: std::marker::Sized` bound\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized6.rs:7:12\n    |\n+LL | fn f1<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized>(x: &X) {\n+   |                  -- help: consider further restricting this bound: `X: std::marker::Sized +`\n+LL |     let _: W; // <-- this is OK, no bindings created, no initializer.\n LL |     let _: (isize, (X, isize));\n    |            ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where X: std::marker::Sized` bound\n    = note: only the last element of a tuple may have a dynamically sized type\n \n error[E0277]: the size for values of type `Z` cannot be known at compilation time\n   --> $DIR/unsized6.rs:11:12\n    |\n+LL | fn f1<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized>(x: &X) {\n+   |                                        -- help: consider further restricting this bound: `Z: std::marker::Sized +`\n+...\n LL |     let y: (isize, (Z, usize));\n    |            ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `Z`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where Z: std::marker::Sized` bound\n    = note: only the last element of a tuple may have a dynamically sized type\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized6.rs:15:9\n    |\n+LL | fn f2<X: ?Sized, Y: ?Sized>(x: &X) {\n+   |       -- help: consider further restricting this bound: `X: std::marker::Sized +`\n LL |     let y: X;\n    |         ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where X: std::marker::Sized` bound\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n \n error[E0277]: the size for values of type `Y` cannot be known at compilation time\n   --> $DIR/unsized6.rs:17:12\n    |\n+LL | fn f2<X: ?Sized, Y: ?Sized>(x: &X) {\n+   |                  -- help: consider further restricting this bound: `Y: std::marker::Sized +`\n+...\n LL |     let y: (isize, (Y, isize));\n    |            ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `Y`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where Y: std::marker::Sized` bound\n    = note: only the last element of a tuple may have a dynamically sized type\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized6.rs:22:9\n    |\n+LL | fn f3<X: ?Sized>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n+   |       -- help: consider further restricting this bound: `X: std::marker::Sized +`\n LL |     let y: X = *x1;\n    |         ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where X: std::marker::Sized` bound\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized6.rs:24:9\n    |\n+LL | fn f3<X: ?Sized>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n+   |       -- help: consider further restricting this bound: `X: std::marker::Sized +`\n+...\n LL |     let y = *x2;\n    |         ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where X: std::marker::Sized` bound\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized6.rs:26:10\n    |\n+LL | fn f3<X: ?Sized>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n+   |       -- help: consider further restricting this bound: `X: std::marker::Sized +`\n+...\n LL |     let (y, z) = (*x3, 4);\n    |          ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where X: std::marker::Sized` bound\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized6.rs:30:9\n    |\n+LL | fn f4<X: ?Sized + T>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n+   |       -- help: consider further restricting this bound: `X: std::marker::Sized +`\n LL |     let y: X = *x1;\n    |         ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where X: std::marker::Sized` bound\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized6.rs:32:9\n    |\n+LL | fn f4<X: ?Sized + T>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n+   |       -- help: consider further restricting this bound: `X: std::marker::Sized +`\n+...\n LL |     let y = *x2;\n    |         ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where X: std::marker::Sized` bound\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized6.rs:34:10\n    |\n+LL | fn f4<X: ?Sized + T>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n+   |       -- help: consider further restricting this bound: `X: std::marker::Sized +`\n+...\n LL |     let (y, z) = (*x3, 4);\n    |          ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where X: std::marker::Sized` bound\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized6.rs:38:18\n    |\n LL | fn g1<X: ?Sized>(x: X) {}\n-   |                  ^ doesn't have a size known at compile-time\n+   |       --         ^ doesn't have a size known at compile-time\n+   |       |\n+   |       help: consider further restricting this bound: `X: std::marker::Sized +`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where X: std::marker::Sized` bound\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized6.rs:40:22\n    |\n LL | fn g2<X: ?Sized + T>(x: X) {}\n-   |                      ^ doesn't have a size known at compile-time\n+   |       --             ^ doesn't have a size known at compile-time\n+   |       |\n+   |       help: consider further restricting this bound: `X: std::marker::Sized +`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where X: std::marker::Sized` bound\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n "}, {"sha": "6d71670e6a84c0e8b091891cd5cce241e27b207b", "filename": "src/test/ui/wf/wf-impl-associated-type-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/190589f8a732393047bd0dc10b27a9aae4410944/src%2Ftest%2Fui%2Fwf%2Fwf-impl-associated-type-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/190589f8a732393047bd0dc10b27a9aae4410944/src%2Ftest%2Fui%2Fwf%2Fwf-impl-associated-type-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-impl-associated-type-trait.stderr?ref=190589f8a732393047bd0dc10b27a9aae4410944", "patch": "@@ -4,10 +4,10 @@ error[E0277]: the trait bound `T: MyHash` is not satisfied\n LL | pub struct MySet<T:MyHash> {\n    | -------------------------- required by `MySet`\n ...\n+LL | impl<T> Foo for T {\n+   |      - help: consider restricting this bound: `T: MyHash`\n LL |     type Bar = MySet<T>;\n    |     ^^^^^^^^^^^^^^^^^^^^ the trait `MyHash` is not implemented for `T`\n-   |\n-   = help: consider adding a `where T: MyHash` bound\n \n error: aborting due to previous error\n "}, {"sha": "21f825ac9ef9af71085207a9ea7a00e766df68e0", "filename": "src/test/ui/wf/wf-inherent-impl-method-where-clause.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/190589f8a732393047bd0dc10b27a9aae4410944/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-method-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/190589f8a732393047bd0dc10b27a9aae4410944/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-method-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-method-where-clause.stderr?ref=190589f8a732393047bd0dc10b27a9aae4410944", "patch": "@@ -4,11 +4,11 @@ error[E0277]: the trait bound `U: std::marker::Copy` is not satisfied\n LL |   trait ExtraCopy<T:Copy> { }\n    |   ----------------------- required by `ExtraCopy`\n ...\n+LL |   impl<T,U> Foo<T,U> {\n+   |          - help: consider restricting this bound: `U: std::marker::Copy`\n LL | /     fn foo(self) where T: ExtraCopy<U>\n LL | |     {}\n    | |______^ the trait `std::marker::Copy` is not implemented for `U`\n-   |\n-   = help: consider adding a `where U: std::marker::Copy` bound\n \n error: aborting due to previous error\n "}]}