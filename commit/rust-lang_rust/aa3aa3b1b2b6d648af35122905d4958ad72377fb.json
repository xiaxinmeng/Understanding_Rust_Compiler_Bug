{"sha": "aa3aa3b1b2b6d648af35122905d4958ad72377fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhM2FhM2IxYjJiNmQ2NDhhZjM1MTIyOTA1ZDQ5NThhZDcyMzc3ZmI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-12-06T04:21:29Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-12-06T04:23:14Z"}, "message": "librustc: Fix type_use to not treat i1* arguments as interchangeable with i8* arguments. Closes #3917. rs=bugfix", "tree": {"sha": "507eb9c7cfc874e05ded23ee3997f189e15f91ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/507eb9c7cfc874e05ded23ee3997f189e15f91ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa3aa3b1b2b6d648af35122905d4958ad72377fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa3aa3b1b2b6d648af35122905d4958ad72377fb", "html_url": "https://github.com/rust-lang/rust/commit/aa3aa3b1b2b6d648af35122905d4958ad72377fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa3aa3b1b2b6d648af35122905d4958ad72377fb/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32ce61f947ebb1076c1fa2cd49e5d017b6ea1a0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/32ce61f947ebb1076c1fa2cd49e5d017b6ea1a0a", "html_url": "https://github.com/rust-lang/rust/commit/32ce61f947ebb1076c1fa2cd49e5d017b6ea1a0a"}], "stats": {"total": 36, "additions": 28, "deletions": 8}, "files": [{"sha": "e2cb652a537fea3ea86016f1595610679471e6a2", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa3aa3b1b2b6d648af35122905d4958ad72377fb/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa3aa3b1b2b6d648af35122905d4958ad72377fb/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=aa3aa3b1b2b6d648af35122905d4958ad72377fb", "patch": "@@ -1003,8 +1003,8 @@ fn trans_index(bcx: block,\n     // Translate index expression and cast to a suitable LLVM integer.\n     // Rust is less strict than LLVM in this regard.\n     let Result {bcx, val: ix_val} = trans_to_datum(bcx, idx).to_result();\n-    let ix_size = shape::llsize_of_real(bcx.ccx(), val_ty(ix_val));\n-    let int_size = shape::llsize_of_real(bcx.ccx(), ccx.int_type);\n+    let ix_size = machine::llbitsize_of_real(bcx.ccx(), val_ty(ix_val));\n+    let int_size = machine::llbitsize_of_real(bcx.ccx(), ccx.int_type);\n     let ix_val = {\n         if ix_size < int_size {\n             if ty::type_is_signed(expr_ty(bcx, idx)) {"}, {"sha": "bef7d01e8194761f91cad723c3b9e1854041b5fd", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aa3aa3b1b2b6d648af35122905d4958ad72377fb/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa3aa3b1b2b6d648af35122905d4958ad72377fb/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=aa3aa3b1b2b6d648af35122905d4958ad72377fb", "patch": "@@ -961,16 +961,17 @@ fn trans_intrinsic(ccx: @crate_ctxt, decl: ValueRef, item: @ast::foreign_item,\n             let tp_ty = substs.tys[0];\n             let lltp_ty = type_of::type_of(ccx, tp_ty);\n             let llout_ty = type_of::type_of(ccx, substs.tys[1]);\n-            let tp_sz = shape::llsize_of_real(ccx, lltp_ty),\n-            out_sz = shape::llsize_of_real(ccx, llout_ty);\n+            let tp_sz = machine::llbitsize_of_real(ccx, lltp_ty),\n+            out_sz = machine::llbitsize_of_real(ccx, llout_ty);\n           if tp_sz != out_sz {\n               let sp = match ccx.tcx.items.get(ref_id.get()) {\n                   ast_map::node_expr(e) => e.span,\n                   _ => fail ~\"reinterpret_cast or forget has non-expr arg\"\n               };\n               ccx.sess.span_fatal(\n                   sp, fmt!(\"reinterpret_cast called on types \\\n-                            with different size: %s (%u) to %s (%u)\",\n+                            with different size: %s (%u bit(s)) to %s \\\n+                            (%u bit(s))\",\n                            ty_to_str(ccx.tcx, tp_ty), tp_sz,\n                            ty_to_str(ccx.tcx, substs.tys[1]), out_sz));\n           }"}, {"sha": "47a51fe228dcc2f2b30f94d584d6b7868e72b761", "filename": "src/librustc/middle/trans/machine.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aa3aa3b1b2b6d648af35122905d4958ad72377fb/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa3aa3b1b2b6d648af35122905d4958ad72377fb/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmachine.rs?ref=aa3aa3b1b2b6d648af35122905d4958ad72377fb", "patch": "@@ -87,7 +87,10 @@ pub fn llsize_of_alloc(cx: @crate_ctxt, t: TypeRef) -> uint {\n // bits in this number of bytes actually carry data related to the datum\n // with the type. Not junk, padding, accidentally-damaged words, or\n // whatever. Rounds up to the nearest byte though, so if you have a 1-bit\n-// value, we return 1 here, not 0. Most of rustc works in bytes.\n+// value, we return 1 here, not 0. Most of rustc works in bytes. Be warned\n+// that LLVM *does* distinguish between e.g. a 1-bit value and an 8-bit value\n+// at the codegen level! In general you should prefer `llbitsize_of_real`\n+// below.\n pub fn llsize_of_real(cx: @crate_ctxt, t: TypeRef) -> uint {\n     let nbits = llvm::LLVMSizeOfTypeInBits(cx.td.lltd, t) as uint;\n     if nbits & 7u != 0u {\n@@ -98,6 +101,11 @@ pub fn llsize_of_real(cx: @crate_ctxt, t: TypeRef) -> uint {\n     }\n }\n \n+/// Returns the \"real\" size of the type in bits.\n+pub fn llbitsize_of_real(cx: @crate_ctxt, t: TypeRef) -> uint {\n+    llvm::LLVMSizeOfTypeInBits(cx.td.lltd, t) as uint\n+}\n+\n // Returns the \"default\" size of t, which is calculated by casting null to a\n // *T and then doing gep(1) on it and measuring the result. Really, look in\n // the LLVM sources. It does that. So this is likely similar to the ABI size"}, {"sha": "accc683eb27064fb619eaee29590ddcc59dd929a", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa3aa3b1b2b6d648af35122905d4958ad72377fb/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa3aa3b1b2b6d648af35122905d4958ad72377fb/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=aa3aa3b1b2b6d648af35122905d4958ad72377fb", "patch": "@@ -329,7 +329,7 @@ fn make_mono_id(ccx: @crate_ctxt, item: ast::def_id, substs: ~[ty::t],\n                         !ty::type_needs_drop(ccx.tcx, subst)\n                     {\n                         let llty = type_of::type_of(ccx, subst);\n-                        let size = shape::llsize_of_real(ccx, llty);\n+                        let size = machine::llbitsize_of_real(ccx, llty);\n                         let align = shape::llalign_of_pref(ccx, llty);\n                         let mode = datum::appropriate_mode(subst);\n \n@@ -344,7 +344,7 @@ fn make_mono_id(ccx: @crate_ctxt, item: ast::def_id, substs: ~[ty::t],\n \n                         // Special value for nil to prevent problems\n                         // with undef return pointers.\n-                        if size == 1u && ty::type_is_nil(subst) {\n+                        if size <= 8u && ty::type_is_nil(subst) {\n                             mono_repr(0u, 0u, is_float, mode)\n                         } else {\n                             mono_repr(size, align, is_float, mode)"}, {"sha": "1bb8fef02d864df240793fa88d4be8fd9dd8d44d", "filename": "src/test/run-pass/type-use-i1-versus-i8.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/aa3aa3b1b2b6d648af35122905d4958ad72377fb/src%2Ftest%2Frun-pass%2Ftype-use-i1-versus-i8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa3aa3b1b2b6d648af35122905d4958ad72377fb/src%2Ftest%2Frun-pass%2Ftype-use-i1-versus-i8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-use-i1-versus-i8.rs?ref=aa3aa3b1b2b6d648af35122905d4958ad72377fb", "patch": "@@ -0,0 +1,11 @@\n+use io::ReaderUtil;\n+fn main() {\n+    let mut x: bool = false;\n+    // this line breaks it\n+    vec::rusti::move_val_init(&mut x, false);\n+\n+    let input = io::stdin();\n+    let line = input.read_line(); // use core's io again\n+\n+    io::println(fmt!(\"got %?\", line));\n+}"}]}