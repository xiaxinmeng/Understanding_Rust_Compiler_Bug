{"sha": "e10414e0553742aba31fa6bcef054531955b4dd7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxMDQxNGUwNTUzNzQyYWJhMzFmYTZiY2VmMDU0NTMxOTU1YjRkZDc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-27T15:46:48Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-27T15:47:58Z"}, "message": "avoid use of vectors etc", "tree": {"sha": "f8208cc66abed000ae8f2e5584531d598029df93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8208cc66abed000ae8f2e5584531d598029df93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e10414e0553742aba31fa6bcef054531955b4dd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e10414e0553742aba31fa6bcef054531955b4dd7", "html_url": "https://github.com/rust-lang/rust/commit/e10414e0553742aba31fa6bcef054531955b4dd7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e10414e0553742aba31fa6bcef054531955b4dd7/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edf14d18845414f807b29bcb76c41de71f07dc26", "url": "https://api.github.com/repos/rust-lang/rust/commits/edf14d18845414f807b29bcb76c41de71f07dc26", "html_url": "https://github.com/rust-lang/rust/commit/edf14d18845414f807b29bcb76c41de71f07dc26"}], "stats": {"total": 229, "additions": 150, "deletions": 79}, "files": [{"sha": "87126bc453a0425ec5e3ea7b9c4df05237ea78c0", "filename": "src/librustc_mir/borrow_check/places_conflict.rs", "status": "modified", "additions": 150, "deletions": 79, "changes": 229, "blob_url": "https://github.com/rust-lang/rust/blob/e10414e0553742aba31fa6bcef054531955b4dd7/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e10414e0553742aba31fa6bcef054531955b4dd7/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs?ref=e10414e0553742aba31fa6bcef054531955b4dd7", "patch": "@@ -15,11 +15,9 @@ use rustc::hir;\n use rustc::mir::{Mir, Place};\n use rustc::mir::{Projection, ProjectionElem};\n use rustc::ty::{self, TyCtxt};\n-use rustc_data_structures::small_vec::SmallVec;\n-use std::iter;\n \n-pub(super) fn places_conflict<'a, 'gcx: 'tcx, 'tcx>(\n-    tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+pub(super) fn places_conflict<'gcx, 'tcx>(\n+    tcx: TyCtxt<'_, 'gcx, 'tcx>,\n     mir: &Mir<'tcx>,\n     borrow_place: &Place<'tcx>,\n     access_place: &Place<'tcx>,\n@@ -30,21 +28,20 @@ pub(super) fn places_conflict<'a, 'gcx: 'tcx, 'tcx>(\n         borrow_place, access_place, access\n     );\n \n-    let borrow_components = place_elements(borrow_place);\n-    let access_components = place_elements(access_place);\n-    debug!(\n-        \"places_conflict: components {:?} / {:?}\",\n-        borrow_components, access_components\n-    );\n+    unroll_place(borrow_place, None, |borrow_components| {\n+        unroll_place(access_place, None, |access_components| {\n+            place_components_conflict(tcx, mir, borrow_components, access_components, access)\n+        })\n+    })\n+}\n \n-    let borrow_components = borrow_components\n-        .into_iter()\n-        .map(Some)\n-        .chain(iter::repeat(None));\n-    let access_components = access_components\n-        .into_iter()\n-        .map(Some)\n-        .chain(iter::repeat(None));\n+fn place_components_conflict<'gcx, 'tcx>(\n+    tcx: TyCtxt<'_, 'gcx, 'tcx>,\n+    mir: &Mir<'tcx>,\n+    borrow_components: PlaceComponentsIter<'_, 'tcx>,\n+    access_components: PlaceComponentsIter<'_, 'tcx>,\n+    access: ShallowOrDeep,\n+) -> bool {\n     // The borrowck rules for proving disjointness are applied from the \"root\" of the\n     // borrow forwards, iterating over \"similar\" projections in lockstep until\n     // we can prove overlap one way or another. Essentially, we treat `Overlap` as\n@@ -89,24 +86,56 @@ pub(super) fn places_conflict<'a, 'gcx: 'tcx, 'tcx>(\n     for (borrow_c, access_c) in borrow_components.zip(access_components) {\n         // loop invariant: borrow_c is always either equal to access_c or disjoint from it.\n         debug!(\"places_conflict: {:?} vs. {:?}\", borrow_c, access_c);\n-        match (borrow_c, access_c) {\n-            (None, _) => {\n-                // If we didn't run out of access, the borrow can access all of our\n-                // place (e.g. a borrow of `a.b` with an access to `a.b.c`),\n-                // so we have a conflict.\n+        if let Some(borrow_c) = borrow_c {\n+            if let Some(access_c) = access_c {\n+                // Borrow and access path both have more components.\n                 //\n-                // If we did, then we still know that the borrow can access a *part*\n-                // of our place that our access cares about (a borrow of `a.b.c`\n-                // with an access to `a.b`), so we still have a conflict.\n+                // Examples:\n                 //\n-                // FIXME: Differs from AST-borrowck; includes drive-by fix\n-                // to #38899. Will probably need back-compat mode flag.\n-                debug!(\"places_conflict: full borrow, CONFLICT\");\n-                return true;\n-            }\n-            (Some(borrow_c), None) => {\n-                // We know that the borrow can access a part of our place. This\n-                // is a conflict if that is a part our access cares about.\n+                // - borrow of `a.(...)`, access to `a.(...)`\n+                // - borrow of `a.(...)`, access to `b.(...)`\n+                //\n+                // Here we only see the components we have checked so\n+                // far (in our examples, just the first component). We\n+                // check whether the components being borrowed vs\n+                // accessed are disjoint (as in the second example,\n+                // but not the first).\n+                match place_element_conflict(tcx, mir, borrow_c, access_c) {\n+                    Overlap::Arbitrary => {\n+                        // We have encountered different fields of potentially\n+                        // the same union - the borrow now partially overlaps.\n+                        //\n+                        // There is no *easy* way of comparing the fields\n+                        // further on, because they might have different types\n+                        // (e.g. borrows of `u.a.0` and `u.b.y` where `.0` and\n+                        // `.y` come from different structs).\n+                        //\n+                        // We could try to do some things here - e.g. count\n+                        // dereferences - but that's probably not a good\n+                        // idea, at least for now, so just give up and\n+                        // report a conflict. This is unsafe code anyway so\n+                        // the user could always use raw pointers.\n+                        debug!(\"places_conflict: arbitrary -> conflict\");\n+                        return true;\n+                    }\n+                    Overlap::EqualOrDisjoint => {\n+                        // This is the recursive case - proceed to the next element.\n+                    }\n+                    Overlap::Disjoint => {\n+                        // We have proven the borrow disjoint - further\n+                        // projections will remain disjoint.\n+                        debug!(\"places_conflict: disjoint\");\n+                        return false;\n+                    }\n+                }\n+            } else {\n+                // Borrow path is longer than the access path. Examples:\n+                //\n+                // - borrow of `a.b.c`, access to `a.b`\n+                //\n+                // Here, we know that the borrow can access a part of\n+                // our place. This is a conflict if that is a part our\n+                // access cares about.\n \n                 let (base, elem) = match borrow_c {\n                     Place::Projection(box Projection { base, elem }) => (base, elem),\n@@ -164,56 +193,98 @@ pub(super) fn places_conflict<'a, 'gcx: 'tcx, 'tcx>(\n                         }\n                 }\n             }\n-            (Some(borrow_c), Some(access_c)) => {\n-                match place_element_conflict(tcx, mir, &borrow_c, access_c) {\n-                    Overlap::Arbitrary => {\n-                        // We have encountered different fields of potentially\n-                        // the same union - the borrow now partially overlaps.\n-                        //\n-                        // There is no *easy* way of comparing the fields\n-                        // further on, because they might have different types\n-                        // (e.g. borrows of `u.a.0` and `u.b.y` where `.0` and\n-                        // `.y` come from different structs).\n-                        //\n-                        // We could try to do some things here - e.g. count\n-                        // dereferences - but that's probably not a good\n-                        // idea, at least for now, so just give up and\n-                        // report a conflict. This is unsafe code anyway so\n-                        // the user could always use raw pointers.\n-                        debug!(\"places_conflict: arbitrary -> conflict\");\n-                        return true;\n-                    }\n-                    Overlap::EqualOrDisjoint => {\n-                        // This is the recursive case - proceed to the next element.\n-                    }\n-                    Overlap::Disjoint => {\n-                        // We have proven the borrow disjoint - further\n-                        // projections will remain disjoint.\n-                        debug!(\"places_conflict: disjoint\");\n-                        return false;\n-                    }\n-                }\n-            }\n+        } else {\n+            // Borrow path ran out but access path may not\n+            // have. Examples:\n+            //\n+            // - borrow of `a.b`, access to `a.b.c`\n+            // - borrow of `a.b`, access to `a.b`\n+            //\n+            // In the first example, where we didn't run out of\n+            // access, the borrow can access all of our place, so we\n+            // have a conflict.\n+            //\n+            // If the second example, where we did, then we still know\n+            // that the borrow can access a *part* of our place that\n+            // our access cares about, so we still have a conflict.\n+            //\n+            // FIXME: Differs from AST-borrowck; includes drive-by fix\n+            // to #38899. Will probably need back-compat mode flag.\n+            debug!(\"places_conflict: full borrow, CONFLICT\");\n+            return true;\n         }\n     }\n     unreachable!(\"iter::repeat returned None\")\n }\n \n-/// Return all the prefixes of `place` in reverse order, including\n-/// downcasts.\n-fn place_elements<'a, 'tcx>(place: &'a Place<'tcx>) -> SmallVec<[&'a Place<'tcx>; 8]> {\n-    let mut result = SmallVec::new();\n-    let mut place = place;\n-    loop {\n-        result.push(place);\n-        match place {\n-            Place::Projection(interior) => {\n-                place = &interior.base;\n-            }\n-            Place::Local(_) | Place::Static(_) => {\n-                result.reverse();\n-                return result;\n-            }\n+/// A linked list of places running up the stack; begins with the\n+/// innermost place and extends to projections (e.g., `a.b` would have\n+/// the place `a` with a \"next\" pointer to `a.b`).  Created by\n+/// `unroll_place`.\n+struct PlaceComponents<'p, 'tcx: 'p> {\n+    component: &'p Place<'tcx>,\n+    next: Option<&'p PlaceComponents<'p, 'tcx>>,\n+}\n+\n+impl<'p, 'tcx> PlaceComponents<'p, 'tcx> {\n+    /// Converts a list of `Place` components into an iterator; this\n+    /// iterator yields up a never-ending stream of `Option<&Place>`.\n+    /// These begin with the \"innermst\" place and then with each\n+    /// projection therefrom. So given a place like `a.b.c` it would\n+    /// yield up:\n+    ///\n+    /// ```notrust\n+    /// Some(`a`), Some(`a.b`), Some(`a.b.c`), None, None, ...\n+    /// ```\n+    fn iter(&self) -> PlaceComponentsIter<'_, 'tcx> {\n+        PlaceComponentsIter { value: Some(self) }\n+    }\n+}\n+\n+/// Iterator over components; see `PlaceComponents::iter` for more\n+/// information.\n+struct PlaceComponentsIter<'p, 'tcx: 'p> {\n+    value: Option<&'p PlaceComponents<'p, 'tcx>>\n+}\n+\n+impl<'p, 'tcx> Iterator for PlaceComponentsIter<'p, 'tcx> {\n+    type Item = Option<&'p Place<'tcx>>;\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        if let Some(&PlaceComponents { component, next }) = self.value {\n+            self.value = next;\n+            Some(Some(component))\n+        } else {\n+            Some(None)\n+        }\n+    }\n+}\n+\n+/// Recursively \"unroll\" a place into a `PlaceComponents` list,\n+/// invoking `op` with a `PlaceComponentsIter`.\n+fn unroll_place<'tcx, R>(\n+    place: &Place<'tcx>,\n+    next: Option<&PlaceComponents<'_, 'tcx>>,\n+    op: impl FnOnce(PlaceComponentsIter<'_, 'tcx>) -> R\n+) -> R {\n+    match place {\n+        Place::Projection(interior) => {\n+            unroll_place(\n+                &interior.base,\n+                Some(&PlaceComponents {\n+                    component: place,\n+                    next,\n+                }),\n+                op,\n+            )\n+        }\n+\n+        Place::Local(_) | Place::Static(_) => {\n+            let list = PlaceComponents {\n+                component: place,\n+                next,\n+            };\n+            op(list.iter())\n         }\n     }\n }"}]}