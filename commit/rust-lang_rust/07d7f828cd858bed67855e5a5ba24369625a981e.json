{"sha": "07d7f828cd858bed67855e5a5ba24369625a981e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3ZDdmODI4Y2Q4NThiZWQ2Nzg1NWU1YTViYTI0MzY5NjI1YTk4MWU=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-12-22T15:23:49Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-12-22T15:23:49Z"}, "message": "Fix tag_var_cache to cache crate-external tags\n\nAnd to not return a bogus mutable box.", "tree": {"sha": "2097a56c484463663b447a32d134e0b0a719c97c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2097a56c484463663b447a32d134e0b0a719c97c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07d7f828cd858bed67855e5a5ba24369625a981e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07d7f828cd858bed67855e5a5ba24369625a981e", "html_url": "https://github.com/rust-lang/rust/commit/07d7f828cd858bed67855e5a5ba24369625a981e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07d7f828cd858bed67855e5a5ba24369625a981e/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44f921c8a9573df6bc13df4beb175762a2575f5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/44f921c8a9573df6bc13df4beb175762a2575f5f", "html_url": "https://github.com/rust-lang/rust/commit/44f921c8a9573df6bc13df4beb175762a2575f5f"}], "stats": {"total": 67, "additions": 26, "deletions": 41}, "files": [{"sha": "25c8d948a40b6d8bafc2f1286e054ae52472d27d", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 26, "deletions": 41, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/07d7f828cd858bed67855e5a5ba24369625a981e/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07d7f828cd858bed67855e5a5ba24369625a981e/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=07d7f828cd858bed67855e5a5ba24369625a981e", "patch": "@@ -207,9 +207,6 @@ type mt = {ty: t, mut: ast::mutability};\n // the types of AST nodes.\n type creader_cache = hashmap<{cnum: int, pos: uint, len: uint}, ty::t>;\n \n-type tag_var_cache =\n-    @smallintmap::smallintmap<@mutable [variant_info]>;\n-\n type ctxt =\n     @{ts: @type_store,\n       sess: session::session,\n@@ -223,7 +220,7 @@ type ctxt =\n       needs_drop_cache: hashmap<t, bool>,\n       kind_cache: hashmap<t, ast::kind>,\n       ast_ty_to_ty_cache: hashmap<@ast::ty, option::t<t>>,\n-      tag_var_cache: tag_var_cache};\n+      tag_var_cache: hashmap<ast::def_id, @[variant_info]>};\n \n type ty_ctxt = ctxt;\n \n@@ -404,7 +401,6 @@ fn mk_ctxt(s: session::session, dm: resolve::def_map, amap: ast_map::map,\n            freevars: freevars::freevar_map) -> ctxt {\n     let ntt: node_type_table =\n         @smallintmap::mk::<ty::ty_param_substs_opt_and_ty>();\n-    let tcache = new_def_hash::<ty::ty_param_kinds_and_ty>();\n     fn eq_raw_ty(&&a: @raw_t, &&b: @raw_t) -> bool {\n         ret a.hash == b.hash && a.struct == b.struct;\n     }\n@@ -416,14 +412,14 @@ fn mk_ctxt(s: session::session, dm: resolve::def_map, amap: ast_map::map,\n           node_types: ntt,\n           items: amap,\n           freevars: freevars,\n-          tcache: tcache,\n+          tcache: new_def_hash(),\n           rcache: mk_rcache(),\n           short_names_cache: new_ty_hash(),\n           needs_drop_cache: new_ty_hash(),\n           kind_cache: new_ty_hash(),\n           ast_ty_to_ty_cache:\n               map::mk_hashmap(ast_util::hash_ty, ast_util::eq_ty),\n-          tag_var_cache: @smallintmap::mk()};\n+          tag_var_cache: new_def_hash()};\n     populate_type_store(cx);\n     ret cx;\n }\n@@ -2627,45 +2623,34 @@ fn def_has_ty_params(def: ast::def) -> bool {\n // Tag information\n type variant_info = @{args: [ty::t], ctor_ty: ty::t, id: ast::def_id};\n \n-fn tag_variants(cx: ctxt, id: ast::def_id) -> @mutable [variant_info] {\n-    if ast::local_crate != id.crate {\n-        ret @mutable csearch::get_tag_variants(cx, id);\n-    }\n-    assert (id.node >= 0);\n-    alt smallintmap::find(*cx.tag_var_cache, id.node as uint) {\n-      option::some(variants) { ret variants; }\n+fn tag_variants(cx: ctxt, id: ast::def_id) -> @[variant_info] {\n+    alt cx.tag_var_cache.find(id) {\n+      some(variants) { ret variants; }\n       _ { /* fallthrough */ }\n     }\n-    let item =\n-        alt cx.items.find(id.node) {\n-          some(i) { i }\n-          none. { cx.sess.bug(\"expected to find cached node_item\") }\n-        };\n-    alt item {\n-      ast_map::node_item(item) {\n-        alt item.node {\n-          ast::item_tag(variants, _) {\n-            let result: @mutable [variant_info] = @mutable [];\n-            for variant: ast::variant in variants {\n-                let ctor_ty = node_id_to_monotype(cx, variant.node.id);\n-                let arg_tys: [t] = [];\n-                if vec::len(variant.node.args) > 0u {\n-                    for a: arg in ty_fn_args(cx, ctor_ty) {\n-                        arg_tys += [a.ty];\n-                    }\n-                }\n-                let did = variant.node.id;\n-                *result +=\n-                    [@{args: arg_tys,\n-                       ctor_ty: ctor_ty,\n-                       id: ast_util::local_def(did)}];\n+    let result = if ast::local_crate != id.crate {\n+        @csearch::get_tag_variants(cx, id)\n+    } else {\n+        alt cx.items.get(id.node) {\n+          ast_map::node_item(item) {\n+            alt item.node {\n+              ast::item_tag(variants, _) {\n+                @vec::map(variants, {|variant|\n+                    let ctor_ty = node_id_to_monotype(cx, variant.node.id);\n+                    let arg_tys = if vec::len(variant.node.args) > 0u {\n+                        vec::map(ty_fn_args(cx, ctor_ty), {|a| a.ty})\n+                    } else { [] };\n+                    @{args: arg_tys,\n+                      ctor_ty: ctor_ty,\n+                      id: ast_util::local_def(variant.node.id)}\n+                })\n+              }\n             }\n-            smallintmap::insert(*cx.tag_var_cache, id.node as uint, result);\n-            ret result;\n           }\n         }\n-      }\n-    }\n+    };\n+    cx.tag_var_cache.insert(id, result);\n+    result\n }\n \n "}]}