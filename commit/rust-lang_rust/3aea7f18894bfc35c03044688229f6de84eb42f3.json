{"sha": "3aea7f18894bfc35c03044688229f6de84eb42f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhZWE3ZjE4ODk0YmZjMzVjMDMwNDQ2ODgyMjlmNmRlODRlYjQyZjM=", "commit": {"author": {"name": "Till Hoeppner", "email": "till@hoeppner.ws", "date": "2014-10-03T12:59:47Z"}, "committer": {"name": "Till Hoeppner", "email": "till@hoeppner.ws", "date": "2014-10-03T14:46:30Z"}, "message": "Fix lev_distance", "tree": {"sha": "982ae9b5bfc769109a63c239229e308caf259f27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/982ae9b5bfc769109a63c239229e308caf259f27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3aea7f18894bfc35c03044688229f6de84eb42f3", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3aea7f18894bfc35c03044688229f6de84eb42f3", "html_url": "https://github.com/rust-lang/rust/commit/3aea7f18894bfc35c03044688229f6de84eb42f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3aea7f18894bfc35c03044688229f6de84eb42f3/comments", "author": {"login": "tilpner", "id": 4322055, "node_id": "MDQ6VXNlcjQzMjIwNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/4322055?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tilpner", "html_url": "https://github.com/tilpner", "followers_url": "https://api.github.com/users/tilpner/followers", "following_url": "https://api.github.com/users/tilpner/following{/other_user}", "gists_url": "https://api.github.com/users/tilpner/gists{/gist_id}", "starred_url": "https://api.github.com/users/tilpner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tilpner/subscriptions", "organizations_url": "https://api.github.com/users/tilpner/orgs", "repos_url": "https://api.github.com/users/tilpner/repos", "events_url": "https://api.github.com/users/tilpner/events{/privacy}", "received_events_url": "https://api.github.com/users/tilpner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tilpner", "id": 4322055, "node_id": "MDQ6VXNlcjQzMjIwNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/4322055?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tilpner", "html_url": "https://github.com/tilpner", "followers_url": "https://api.github.com/users/tilpner/followers", "following_url": "https://api.github.com/users/tilpner/following{/other_user}", "gists_url": "https://api.github.com/users/tilpner/gists{/gist_id}", "starred_url": "https://api.github.com/users/tilpner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tilpner/subscriptions", "organizations_url": "https://api.github.com/users/tilpner/orgs", "repos_url": "https://api.github.com/users/tilpner/repos", "events_url": "https://api.github.com/users/tilpner/events{/privacy}", "received_events_url": "https://api.github.com/users/tilpner/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a2286d3a13c4a97340c99c86c718654f6cb2ed6", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a2286d3a13c4a97340c99c86c718654f6cb2ed6", "html_url": "https://github.com/rust-lang/rust/commit/9a2286d3a13c4a97340c99c86c718654f6cb2ed6"}], "stats": {"total": 37, "additions": 28, "deletions": 9}, "files": [{"sha": "553b34a55c31743295ee01402cf6a311cd0700cd", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 28, "deletions": 9, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/3aea7f18894bfc35c03044688229f6de84eb42f3/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aea7f18894bfc35c03044688229f6de84eb42f3/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=3aea7f18894bfc35c03044688229f6de84eb42f3", "patch": "@@ -778,13 +778,11 @@ pub trait StrAllocating: Str {\n     /// Returns the Levenshtein Distance between two strings.\n     fn lev_distance(&self, t: &str) -> uint {\n         let me = self.as_slice();\n-        let slen = me.len();\n-        let tlen = t.len();\n+        if me.is_empty() { return t.char_len(); }\n+        if t.is_empty() { return me.char_len(); }\n \n-        if slen == 0 { return tlen; }\n-        if tlen == 0 { return slen; }\n-\n-        let mut dcol = Vec::from_fn(tlen + 1, |x| x);\n+        let mut dcol = Vec::from_fn(t.len() + 1, |x| x);\n+        let mut t_last = 0;\n \n         for (i, sc) in me.chars().enumerate() {\n \n@@ -799,15 +797,15 @@ pub trait StrAllocating: Str {\n                     *dcol.get_mut(j + 1) = current;\n                 } else {\n                     *dcol.get_mut(j + 1) = cmp::min(current, next);\n-                    *dcol.get_mut(j + 1) = cmp::min(dcol[j + 1],\n-                                                    dcol[j]) + 1;\n+                    *dcol.get_mut(j + 1) = cmp::min(dcol[j + 1], dcol[j]) + 1;\n                 }\n \n                 current = next;\n+                t_last = j;\n             }\n         }\n \n-        return dcol[tlen];\n+        dcol[t_last + 1]\n     }\n \n     /// Returns an iterator over the string in Unicode Normalization Form D\n@@ -1878,6 +1876,27 @@ mod tests {\n         assert_eq!(words, vec![\"M\u00e4ry\", \"h\u00e4d\", \"\u00e4\", \"little\", \"l\u00e4mb\", \"Little\", \"l\u00e4mb\"])\n     }\n \n+    #[test]\n+    fn test_lev_distance() {\n+        use std::char::{ from_u32, MAX };\n+        // Test bytelength agnosticity\n+        for c in range(0u32, MAX as u32)\n+                 .filter_map(|i| from_u32(i))\n+                 .map(|i| String::from_char(1, i)) {\n+            assert_eq!(c[].lev_distance(c[]), 0);\n+        }\n+\n+        let a = \"\\nM\u00e4ry h\u00e4d \u00e4 little l\u00e4mb\\n\\nLittle l\u00e4mb\\n\";\n+        let b = \"\\nMary h\u00e4d \u00e4 little l\u00e4mb\\n\\nLittle l\u00e4mb\\n\";\n+        let c = \"Mary h\u00e4d \u00e4 little l\u00e4mb\\n\\nLittle l\u00e4mb\\n\";\n+        assert_eq!(a.lev_distance(b), 1);\n+        assert_eq!(b.lev_distance(a), 1);\n+        assert_eq!(a.lev_distance(c), 2);\n+        assert_eq!(c.lev_distance(a), 2);\n+        assert_eq!(b.lev_distance(c), 1);\n+        assert_eq!(c.lev_distance(b), 1);\n+    }\n+\n     #[test]\n     fn test_nfd_chars() {\n         macro_rules! t {"}]}