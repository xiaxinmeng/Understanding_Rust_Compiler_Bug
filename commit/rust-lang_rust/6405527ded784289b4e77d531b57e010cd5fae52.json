{"sha": "6405527ded784289b4e77d531b57e010cd5fae52", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0MDU1MjdkZWQ3ODQyODliNGU3N2Q1MzFiNTdlMDEwY2Q1ZmFlNTI=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-06-07T19:02:08Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2016-06-09T12:01:45Z"}, "message": "add a cache for MIR predecessors", "tree": {"sha": "8f10a6ed5cf73041204d6acb1466fef42258efad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f10a6ed5cf73041204d6acb1466fef42258efad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6405527ded784289b4e77d531b57e010cd5fae52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6405527ded784289b4e77d531b57e010cd5fae52", "html_url": "https://github.com/rust-lang/rust/commit/6405527ded784289b4e77d531b57e010cd5fae52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6405527ded784289b4e77d531b57e010cd5fae52/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e3af9fa4906594ba22015e549cf8bfc3201dec1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3af9fa4906594ba22015e549cf8bfc3201dec1b", "html_url": "https://github.com/rust-lang/rust/commit/e3af9fa4906594ba22015e549cf8bfc3201dec1b"}], "stats": {"total": 114, "additions": 93, "deletions": 21}, "files": [{"sha": "bc24b54a5c7ac83855e642648cd3fe540ed6d442", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6405527ded784289b4e77d531b57e010cd5fae52/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6405527ded784289b4e77d531b57e010cd5fae52/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=6405527ded784289b4e77d531b57e010cd5fae52", "patch": "@@ -102,6 +102,7 @@ pub mod middle {\n }\n \n pub mod mir {\n+    mod cache;\n     pub mod repr;\n     pub mod tcx;\n     pub mod visit;"}, {"sha": "138fed2d64e23cb7375060b62dc9d043f6821869", "filename": "src/librustc/mir/cache.rs", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/6405527ded784289b4e77d531b57e010cd5fae52/src%2Flibrustc%2Fmir%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6405527ded784289b4e77d531b57e010cd5fae52/src%2Flibrustc%2Fmir%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fcache.rs?ref=6405527ded784289b4e77d531b57e010cd5fae52", "patch": "@@ -0,0 +1,69 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::cell::{Ref, RefCell};\n+use rustc_data_structures::indexed_vec::IndexVec;\n+\n+use mir::repr::{Mir, BasicBlock};\n+\n+use rustc_serialize as serialize;\n+\n+#[derive(Clone)]\n+pub struct Cache {\n+    predecessors: RefCell<Option<IndexVec<BasicBlock, Vec<BasicBlock>>>>\n+}\n+\n+\n+impl serialize::Encodable for Cache {\n+    fn encode<S: serialize::Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n+        serialize::Encodable::encode(&(), s)\n+    }\n+}\n+\n+impl serialize::Decodable for Cache {\n+    fn decode<D: serialize::Decoder>(d: &mut D) -> Result<Self, D::Error> {\n+        serialize::Decodable::decode(d).map(|_v: ()| Self::new())\n+    }\n+}\n+\n+\n+impl Cache {\n+    pub fn new() -> Self {\n+        Cache {\n+            predecessors: RefCell::new(None)\n+        }\n+    }\n+\n+    pub fn invalidate(&self) {\n+        // FIXME: consider being more fine-grained\n+        *self.predecessors.borrow_mut() = None;\n+    }\n+\n+    pub fn predecessors(&self, mir: &Mir) -> Ref<IndexVec<BasicBlock, Vec<BasicBlock>>> {\n+        if self.predecessors.borrow().is_none() {\n+            *self.predecessors.borrow_mut() = Some(calculate_predecessors(mir));\n+        }\n+\n+        Ref::map(self.predecessors.borrow(), |p| p.as_ref().unwrap())\n+    }\n+}\n+\n+fn calculate_predecessors(mir: &Mir) -> IndexVec<BasicBlock, Vec<BasicBlock>> {\n+    let mut result = IndexVec::from_elem(vec![], mir.basic_blocks());\n+    for (bb, data) in mir.basic_blocks().iter_enumerated() {\n+        if let Some(ref term) = data.terminator {\n+            for &tgt in term.successors().iter() {\n+                result[tgt].push(bb);\n+            }\n+        }\n+    }\n+\n+    result\n+}"}, {"sha": "dad330aa59ead34e662492277e42d18ce61375b0", "filename": "src/librustc/mir/repr.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6405527ded784289b4e77d531b57e010cd5fae52/src%2Flibrustc%2Fmir%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6405527ded784289b4e77d531b57e010cd5fae52/src%2Flibrustc%2Fmir%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Frepr.rs?ref=6405527ded784289b4e77d531b57e010cd5fae52", "patch": "@@ -20,12 +20,15 @@ use rustc_back::slice;\n use hir::InlineAsm;\n use std::ascii;\n use std::borrow::{Cow};\n+use std::cell::Ref;\n use std::fmt::{self, Debug, Formatter, Write};\n use std::{iter, u32};\n use std::ops::{Index, IndexMut};\n use syntax::ast::{self, Name};\n use syntax::codemap::Span;\n \n+use super::cache::Cache;\n+\n macro_rules! newtype_index {\n     ($name:ident, $debug_name:expr) => (\n         #[derive(Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord,\n@@ -88,6 +91,9 @@ pub struct Mir<'tcx> {\n \n     /// A span representing this MIR, for error reporting\n     pub span: Span,\n+\n+    /// A cache for various calculations\n+    cache: Cache\n }\n \n /// where execution begins\n@@ -113,7 +119,8 @@ impl<'tcx> Mir<'tcx> {\n             arg_decls: arg_decls,\n             temp_decls: temp_decls,\n             upvar_decls: upvar_decls,\n-            span: span\n+            span: span,\n+            cache: Cache::new()\n         }\n     }\n \n@@ -124,8 +131,19 @@ impl<'tcx> Mir<'tcx> {\n \n     #[inline]\n     pub fn basic_blocks_mut(&mut self) -> &mut IndexVec<BasicBlock, BasicBlockData<'tcx>> {\n+        self.cache.invalidate();\n         &mut self.basic_blocks\n     }\n+\n+    #[inline]\n+    pub fn predecessors(&self) -> Ref<IndexVec<BasicBlock, Vec<BasicBlock>>> {\n+        self.cache.predecessors(self)\n+    }\n+\n+    #[inline]\n+    pub fn predecessors_for(&self, bb: BasicBlock) -> Ref<Vec<BasicBlock>> {\n+        Ref::map(self.predecessors(), |p| &p[bb])\n+    }\n }\n \n impl<'tcx> Index<BasicBlock> for Mir<'tcx> {"}, {"sha": "63e975128c79240e2de29f889df5ebee7e9f7986", "filename": "src/librustc_mir/transform/add_call_guards.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6405527ded784289b4e77d531b57e010cd5fae52/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6405527ded784289b4e77d531b57e010cd5fae52/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs?ref=6405527ded784289b4e77d531b57e010cd5fae52", "patch": "@@ -11,7 +11,6 @@\n use rustc::ty::TyCtxt;\n use rustc::mir::repr::*;\n use rustc::mir::transform::{MirPass, MirSource, Pass};\n-use rustc::mir::traversal;\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n \n use pretty;\n@@ -40,16 +39,8 @@ pub struct AddCallGuards;\n \n impl<'tcx> MirPass<'tcx> for AddCallGuards {\n     fn run_pass<'a>(&mut self, tcx: TyCtxt<'a, 'tcx, 'tcx>, src: MirSource, mir: &mut Mir<'tcx>) {\n-        let mut pred_count = IndexVec::from_elem(0u32, mir.basic_blocks());\n-\n-        // Build the precedecessor map for the MIR\n-        for (_, data) in traversal::preorder(mir) {\n-            if let Some(ref term) = data.terminator {\n-                for &tgt in term.successors().iter() {\n-                    pred_count[tgt] += 1;\n-                }\n-            }\n-        }\n+        let pred_count: IndexVec<_, _> =\n+            mir.predecessors().iter().map(|ps| ps.len()).collect();\n \n         // We need a place to store the new blocks generated\n         let mut new_blocks = Vec::new();"}, {"sha": "9cee6b11c07c33428214cd6aef973e5805357154", "filename": "src/librustc_mir/transform/simplify_cfg.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6405527ded784289b4e77d531b57e010cd5fae52/src%2Flibrustc_mir%2Ftransform%2Fsimplify_cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6405527ded784289b4e77d531b57e010cd5fae52/src%2Flibrustc_mir%2Ftransform%2Fsimplify_cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify_cfg.rs?ref=6405527ded784289b4e77d531b57e010cd5fae52", "patch": "@@ -67,15 +67,8 @@ impl<'l, 'tcx> MirPass<'tcx> for SimplifyCfg<'l> {\n impl<'l> Pass for SimplifyCfg<'l> {}\n \n fn merge_consecutive_blocks(mir: &mut Mir) {\n-    // Build the precedecessor map for the MIR\n-    let mut pred_count = IndexVec::from_elem(0u32, mir.basic_blocks());\n-    for (_, data) in traversal::preorder(mir) {\n-        if let Some(ref term) = data.terminator {\n-            for &tgt in term.successors().iter() {\n-                pred_count[tgt] += 1;\n-            }\n-        }\n-    }\n+    let mut pred_count: IndexVec<_, _> =\n+        mir.predecessors().iter().map(|ps| ps.len()).collect();\n \n     loop {\n         let mut changed = false;"}]}