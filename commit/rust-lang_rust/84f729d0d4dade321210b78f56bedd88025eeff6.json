{"sha": "84f729d0d4dade321210b78f56bedd88025eeff6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0ZjcyOWQwZDRkYWRlMzIxMjEwYjc4ZjU2YmVkZDg4MDI1ZWVmZjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-01T00:57:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-01T00:57:37Z"}, "message": "Auto merge of #61394 - pietroalbini:rollup-lzugnb4, r=pietroalbini\n\nRollup of 11 pull requests\n\nSuccessful merges:\n\n - #60897 (error: remove StringError from Debug output)\n - #61304 (Speed up Azure CI installing Windows dependencies)\n - #61319 (Swap order of `unsafe async fn` to `async unsafe fn`)\n - #61342 (Set ellipsis_inclusive_range_patterns lint to warn)\n - #61344 (Add regression test for const generics ICE)\n - #61359 (Fix links in Deref documentation)\n - #61363 (Stabilize iter_nth_back feature)\n - #61369 (Fixed lifetime misspelling)\n - #61372 (Migrate some books to mdbook version 0.2)\n - #61374 (Explicitly suggest 'type_ascription' feature)\n - #61382 (Fixed a typo in core::convert::AsMut)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "deff171b0bc9505fde5f9c29debd548643c8e28d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/deff171b0bc9505fde5f9c29debd548643c8e28d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84f729d0d4dade321210b78f56bedd88025eeff6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84f729d0d4dade321210b78f56bedd88025eeff6", "html_url": "https://github.com/rust-lang/rust/commit/84f729d0d4dade321210b78f56bedd88025eeff6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84f729d0d4dade321210b78f56bedd88025eeff6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "041bec87c022128556640b7091f479f3040c3c37", "url": "https://api.github.com/repos/rust-lang/rust/commits/041bec87c022128556640b7091f479f3040c3c37", "html_url": "https://github.com/rust-lang/rust/commit/041bec87c022128556640b7091f479f3040c3c37"}, {"sha": "e32386d70ed2e5ba103b490c2aac56385bc88405", "url": "https://api.github.com/repos/rust-lang/rust/commits/e32386d70ed2e5ba103b490c2aac56385bc88405", "html_url": "https://github.com/rust-lang/rust/commit/e32386d70ed2e5ba103b490c2aac56385bc88405"}], "stats": {"total": 351, "additions": 227, "deletions": 124}, "files": [{"sha": "0cd6f24e32c7cf186416366fa415724f1306100e", "filename": ".azure-pipelines/steps/install-clang.yml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f729d0d4dade321210b78f56bedd88025eeff6/.azure-pipelines%2Fsteps%2Finstall-clang.yml", "raw_url": "https://github.com/rust-lang/rust/raw/84f729d0d4dade321210b78f56bedd88025eeff6/.azure-pipelines%2Fsteps%2Finstall-clang.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.azure-pipelines%2Fsteps%2Finstall-clang.yml?ref=84f729d0d4dade321210b78f56bedd88025eeff6", "patch": "@@ -27,7 +27,7 @@ steps:\n # Original downloaded here came from\n # http://releases.llvm.org/7.0.0/LLVM-7.0.0-win64.exe\n - script: |\n-    powershell -Command \"iwr -outf %TEMP%\\LLVM-7.0.0-win64.exe https://rust-lang-ci2.s3.amazonaws.com/rust-ci-mirror/LLVM-7.0.0-win64.exe\"\n+    powershell -Command \"$ProgressPreference = 'SilentlyContinue'; iwr -outf %TEMP%\\LLVM-7.0.0-win64.exe https://rust-lang-ci2.s3.amazonaws.com/rust-ci-mirror/LLVM-7.0.0-win64.exe\"\n     set CLANG_DIR=%CD%\\citools\\clang-rust\n     %TEMP%\\LLVM-7.0.0-win64.exe /S /NCRC /D=%CLANG_DIR%\n     set RUST_CONFIGURE_ARGS=%RUST_CONFIGURE_ARGS% --set llvm.clang-cl=%CLANG_DIR%\\bin\\clang-cl.exe"}, {"sha": "427e50f571f764197cfca484c0e93fd6da670808", "filename": ".azure-pipelines/steps/install-sccache.yml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f729d0d4dade321210b78f56bedd88025eeff6/.azure-pipelines%2Fsteps%2Finstall-sccache.yml", "raw_url": "https://github.com/rust-lang/rust/raw/84f729d0d4dade321210b78f56bedd88025eeff6/.azure-pipelines%2Fsteps%2Finstall-sccache.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.azure-pipelines%2Fsteps%2Finstall-sccache.yml?ref=84f729d0d4dade321210b78f56bedd88025eeff6", "patch": "@@ -9,7 +9,7 @@ steps:\n \n - script: |\n     md sccache\n-    powershell -Command \"iwr -outf sccache\\sccache.exe https://rust-lang-ci2.s3.amazonaws.com/rust-ci-mirror/2018-04-26-sccache-x86_64-pc-windows-msvc\"\n+    powershell -Command \"$ProgressPreference = 'SilentlyContinue'; iwr -outf sccache\\sccache.exe https://rust-lang-ci2.s3.amazonaws.com/rust-ci-mirror/2018-04-26-sccache-x86_64-pc-windows-msvc\"\n     echo ##vso[task.prependpath]%CD%\\sccache\n   displayName: Install sccache (Windows)\n   condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))"}, {"sha": "04662a69c87477a16d807449512e62d3daba6ab0", "filename": ".azure-pipelines/steps/install-windows-build-deps.yml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/84f729d0d4dade321210b78f56bedd88025eeff6/.azure-pipelines%2Fsteps%2Finstall-windows-build-deps.yml", "raw_url": "https://github.com/rust-lang/rust/raw/84f729d0d4dade321210b78f56bedd88025eeff6/.azure-pipelines%2Fsteps%2Finstall-windows-build-deps.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.azure-pipelines%2Fsteps%2Finstall-windows-build-deps.yml?ref=84f729d0d4dade321210b78f56bedd88025eeff6", "patch": "@@ -54,9 +54,9 @@ steps:\n # Note that we don't literally overwrite the gdb.exe binary because it appears\n # to just use gdborig.exe, so that's the binary we deal with instead.\n - script: |\n-    powershell -Command \"iwr -outf %MINGW_ARCHIVE% %MINGW_URL%/%MINGW_ARCHIVE%\"\n+    powershell -Command \"$ProgressPreference = 'SilentlyContinue'; iwr -outf %MINGW_ARCHIVE% %MINGW_URL%/%MINGW_ARCHIVE%\"\n     7z x -y %MINGW_ARCHIVE% > nul\n-    powershell -Command \"iwr -outf 2017-04-20-%MSYS_BITS%bit-gdborig.exe %MINGW_URL%/2017-04-20-%MSYS_BITS%bit-gdborig.exe\"\n+    powershell -Command \"$ProgressPreference = 'SilentlyContinue'; iwr -outf 2017-04-20-%MSYS_BITS%bit-gdborig.exe %MINGW_URL%/2017-04-20-%MSYS_BITS%bit-gdborig.exe\"\n     mv 2017-04-20-%MSYS_BITS%bit-gdborig.exe %MINGW_DIR%\\bin\\gdborig.exe\n     echo ##vso[task.prependpath]%CD%\\%MINGW_DIR%\\bin\n   condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'), ne(variables['MINGW_URL'],''))\n@@ -81,7 +81,7 @@ steps:\n # Note that this is originally from the github releases patch of Ninja\n - script: |\n     md ninja\n-    powershell -Command \"iwr -outf 2017-03-15-ninja-win.zip https://rust-lang-ci2.s3.amazonaws.com/rust-ci-mirror/2017-03-15-ninja-win.zip\"\n+    powershell -Command \"$ProgressPreference = 'SilentlyContinue'; iwr -outf 2017-03-15-ninja-win.zip https://rust-lang-ci2.s3.amazonaws.com/rust-ci-mirror/2017-03-15-ninja-win.zip\"\n     7z x -oninja 2017-03-15-ninja-win.zip\n     del 2017-03-15-ninja-win.zip\n     set RUST_CONFIGURE_ARGS=%RUST_CONFIGURE_ARGS% --enable-ninja"}, {"sha": "2a3577a3d20446b0593ec1ba1f916125cdbea3ca", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=84f729d0d4dade321210b78f56bedd88025eeff6", "patch": "@@ -62,11 +62,11 @@ macro_rules! book {\n book!(\n     EditionGuide, \"src/doc/edition-guide\", \"edition-guide\", RustbookVersion::MdBook2;\n     EmbeddedBook, \"src/doc/embedded-book\", \"embedded-book\", RustbookVersion::MdBook2;\n-    Nomicon, \"src/doc/nomicon\", \"nomicon\", RustbookVersion::MdBook1;\n+    Nomicon, \"src/doc/nomicon\", \"nomicon\", RustbookVersion::MdBook2;\n     Reference, \"src/doc/reference\", \"reference\", RustbookVersion::MdBook1;\n     RustByExample, \"src/doc/rust-by-example\", \"rust-by-example\", RustbookVersion::MdBook1;\n     RustcBook, \"src/doc/rustc\", \"rustc\", RustbookVersion::MdBook1;\n-    RustdocBook, \"src/doc/rustdoc\", \"rustdoc\", RustbookVersion::MdBook1;\n+    RustdocBook, \"src/doc/rustdoc\", \"rustdoc\", RustbookVersion::MdBook2;\n );\n \n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n@@ -134,7 +134,7 @@ impl Step for UnstableBook {\n             target: self.target,\n             name: INTERNER.intern_str(\"unstable-book\"),\n             src: builder.md_doc_out(self.target),\n-            version: RustbookVersion::MdBook1,\n+            version: RustbookVersion::MdBook2,\n         })\n     }\n }"}, {"sha": "b21defaedc31312147423bd3c051d9a34b472973", "filename": "src/doc/rustdoc/src/command-line-arguments.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Fdoc%2Frustdoc%2Fsrc%2Fcommand-line-arguments.md", "raw_url": "https://github.com/rust-lang/rust/raw/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Fdoc%2Frustdoc%2Fsrc%2Fcommand-line-arguments.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fcommand-line-arguments.md?ref=84f729d0d4dade321210b78f56bedd88025eeff6", "patch": "@@ -178,7 +178,7 @@ $ rustdoc src/lib.rs --passes strip-priv-imports\n An argument of \"list\" will print a list of possible \"rustdoc passes\", and other\n arguments will be the name of which passes to run in addition to the defaults.\n \n-For more details on passes, see [the chapter on them](passes.html).\n+For more details on passes, see [the chapter on them](passes.md).\n \n See also `--no-defaults`.\n \n@@ -194,7 +194,7 @@ By default, `rustdoc` will run several passes over your code. This\n removes those defaults, allowing you to use `--passes` to specify\n exactly which passes you want.\n \n-For more details on passes, see [the chapter on them](passes.html).\n+For more details on passes, see [the chapter on them](passes.md).\n \n See also `--passes`.\n \n@@ -207,7 +207,7 @@ $ rustdoc src/lib.rs --test\n ```\n \n This flag will run your code examples as tests. For more, see [the chapter\n-on documentation tests](documentation-tests.html).\n+on documentation tests](documentation-tests.md).\n \n See also `--test-args`.\n \n@@ -220,7 +220,7 @@ $ rustdoc src/lib.rs --test --test-args ignored\n ```\n \n This flag will pass options to the test runner when running documentation tests.\n-For more, see [the chapter on documentation tests](documentation-tests.html).\n+For more, see [the chapter on documentation tests](documentation-tests.md).\n \n See also `--test`.\n "}, {"sha": "12d4ea205b31e64308106741522b85a910300d99", "filename": "src/doc/rustdoc/src/passes.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Fdoc%2Frustdoc%2Fsrc%2Fpasses.md", "raw_url": "https://github.com/rust-lang/rust/raw/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Fdoc%2Frustdoc%2Fsrc%2Fpasses.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fpasses.md?ref=84f729d0d4dade321210b78f56bedd88025eeff6", "patch": "@@ -5,8 +5,8 @@ Rustdoc has a concept called \"passes\". These are transformations that\n \n In addition to the passes below, check out the docs for these flags:\n \n-* [`--passes`](command-line-arguments.html#a--passes-add-more-rustdoc-passes)\n-* [`--no-defaults`](command-line-arguments.html#a--no-defaults-dont-run-default-passes)\n+* [`--passes`](command-line-arguments.md#--passes-add-more-rustdoc-passes)\n+* [`--no-defaults`](command-line-arguments.md#--no-defaults-dont-run-default-passes)\n \n ## Default passes\n "}, {"sha": "2a1b6397781f95fc9a98fbb620c6e5b2dd29aae8", "filename": "src/doc/unstable-book/src/language-features/asm.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fasm.md", "raw_url": "https://github.com/rust-lang/rust/raw/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fasm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fasm.md?ref=84f729d0d4dade321210b78f56bedd88025eeff6", "patch": "@@ -190,4 +190,4 @@ constraints, etc.\n [llvm-docs]: http://llvm.org/docs/LangRef.html#inline-assembler-expressions\n \n If you need more power and don't mind losing some of the niceties of\n-`asm!`, check out [global_asm](language-features/global-asm.html).\n+`asm!`, check out [global_asm](global-asm.md)."}, {"sha": "bf0819ec920b7f0462ad912fa87ad80124e1c34c", "filename": "src/doc/unstable-book/src/language-features/box-patterns.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fbox-patterns.md", "raw_url": "https://github.com/rust-lang/rust/raw/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fbox-patterns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fbox-patterns.md?ref=84f729d0d4dade321210b78f56bedd88025eeff6", "patch": "@@ -4,7 +4,7 @@ The tracking issue for this feature is: [#29641]\n \n [#29641]: https://github.com/rust-lang/rust/issues/29641\n \n-See also [`box_syntax`](language-features/box-syntax.html)\n+See also [`box_syntax`](box-syntax.md)\n \n ------------------------\n "}, {"sha": "9569974d22ca28124cd888e78c56a9a81d15aedf", "filename": "src/doc/unstable-book/src/language-features/box-syntax.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fbox-syntax.md", "raw_url": "https://github.com/rust-lang/rust/raw/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fbox-syntax.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fbox-syntax.md?ref=84f729d0d4dade321210b78f56bedd88025eeff6", "patch": "@@ -4,7 +4,7 @@ The tracking issue for this feature is: [#49733]\n \n [#49733]: https://github.com/rust-lang/rust/issues/49733\n \n-See also [`box_patterns`](language-features/box-patterns.html)\n+See also [`box_patterns`](box-patterns.md)\n \n ------------------------\n "}, {"sha": "bc55fe80fa64c599f954ebdedd613ebba60465e1", "filename": "src/doc/unstable-book/src/language-features/global-asm.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fglobal-asm.md", "raw_url": "https://github.com/rust-lang/rust/raw/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fglobal-asm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fglobal-asm.md?ref=84f729d0d4dade321210b78f56bedd88025eeff6", "patch": "@@ -75,4 +75,4 @@ usages and placed the larger, single usage in the crate root.\n If you don't need quite as much power and flexibility as\n `global_asm!` provides, and you don't mind restricting your inline\n assembly to `fn` bodies only, you might try the\n-[asm](language-features/asm.html) feature instead.\n+[asm](asm.md) feature instead."}, {"sha": "3ee024c6b588361e8f10a3f593aebf1f60b6333d", "filename": "src/doc/unstable-book/src/language-features/lang-items.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flang-items.md", "raw_url": "https://github.com/rust-lang/rust/raw/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flang-items.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flang-items.md?ref=84f729d0d4dade321210b78f56bedd88025eeff6", "patch": "@@ -192,7 +192,7 @@ such as \"```undefined reference to `__rust_probestack'```\". Using this crate\n also requires enabling the library feature `compiler_builtins_lib`. You can read\n more about this [here][compiler-builtins-lib].\n \n-[compiler-builtins-lib]: library-features/compiler-builtins-lib.html\n+[compiler-builtins-lib]: ../library-features/compiler-builtins-lib.md\n \n ## More about the language items\n "}, {"sha": "22dae0c89a6ff5a460ef4c04679f2b29c24ca0c6", "filename": "src/doc/unstable-book/src/language-features/non-ascii-idents.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnon-ascii-idents.md", "raw_url": "https://github.com/rust-lang/rust/raw/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnon-ascii-idents.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnon-ascii-idents.md?ref=84f729d0d4dade321210b78f56bedd88025eeff6", "patch": "@@ -45,4 +45,4 @@ that does _not_ occur in the set of [strict keywords].\n \n [`XID_start`]:  http://unicode.org/cldr/utility/list-unicodeset.jsp?a=%5B%3AXID_Start%3A%5D&abb=on&g=&i=\n [`XID_continue`]: http://unicode.org/cldr/utility/list-unicodeset.jsp?a=%5B%3AXID_Continue%3A%5D&abb=on&g=&i=\n-[strict keywords]: ../reference/keywords.html#strict-keywords\n+[strict keywords]: ../../reference/keywords.md#strict-keywords"}, {"sha": "bf5dd81d735af768be0994f50fa6fb6193be9569", "filename": "src/doc/unstable-book/src/language-features/plugin-registrar.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin-registrar.md", "raw_url": "https://github.com/rust-lang/rust/raw/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin-registrar.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin-registrar.md?ref=84f729d0d4dade321210b78f56bedd88025eeff6", "patch": "@@ -8,6 +8,6 @@ This feature is part of \"compiler plugins.\" It will often be used with the\n [`plugin`] and `rustc_private` features as well. For more details, see\n their docs.\n \n-[`plugin`]: language-features/plugin.html\n+[`plugin`]: plugin.md\n \n ------------------------"}, {"sha": "43fffd680372fb1330454972561e42abd40a434d", "filename": "src/doc/unstable-book/src/language-features/plugin.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md", "raw_url": "https://github.com/rust-lang/rust/raw/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md?ref=84f729d0d4dade321210b78f56bedd88025eeff6", "patch": "@@ -8,7 +8,7 @@ The tracking issue for this feature is: [#29597]\n This feature is part of \"compiler plugins.\" It will often be used with the\n [`plugin_registrar`] and `rustc_private` features.\n \n-[`plugin_registrar`]: language-features/plugin-registrar.html\n+[`plugin_registrar`]: plugin-registrar.md\n \n ------------------------\n \n@@ -39,7 +39,7 @@ of a library.\n \n Plugins can extend Rust's syntax in various ways. One kind of syntax extension\n is the procedural macro. These are invoked the same way as [ordinary\n-macros](../book/macros.html), but the expansion is performed by arbitrary Rust\n+macros](../../book/macros.md), but the expansion is performed by arbitrary Rust\n code that manipulates syntax trees at\n compile time.\n \n@@ -130,7 +130,7 @@ The advantages over a simple `fn(&str) -> u32` are:\n   a way to define new literal syntax for any data type.\n \n In addition to procedural macros, you can define new\n-[`derive`](../reference/attributes/derive.html)-like attributes and other kinds\n+[`derive`](../../reference/attributes/derive.md)-like attributes and other kinds\n of extensions.  See `Registry::register_syntax_extension` and the\n `SyntaxExtension` enum.  For a more involved macro example, see\n [`regex_macros`](https://github.com/rust-lang/regex/blob/master/regex_macros/src/lib.rs).\n@@ -174,7 +174,7 @@ quasiquote as an ordinary plugin library.\n # Lint plugins\n \n Plugins can extend [Rust's lint\n-infrastructure](../reference/attributes/diagnostics.html#lint-check-attributes) with\n+infrastructure](../../reference/attributes/diagnostics.md#lint-check-attributes) with\n additional checks for code style, safety, etc. Now let's write a plugin\n [`lint_plugin_test.rs`](https://github.com/rust-lang/rust/blob/master/src/test/ui-fulldeps/auxiliary/lint_plugin_test.rs)\n that warns about any item named `lintme`.\n@@ -253,7 +253,7 @@ mostly use the same infrastructure as lint plugins, and provide examples of how\n to access type information.\n \n Lints defined by plugins are controlled by the usual [attributes and compiler\n-flags](../reference/attributes/diagnostics.html#lint-check-attributes), e.g.\n+flags](../../reference/attributes/diagnostics.md#lint-check-attributes), e.g.\n `#[allow(test_lint)]` or `-A test-lint`. These identifiers are derived from the\n first argument to `declare_lint!`, with appropriate case and punctuation\n conversion."}, {"sha": "71003fba00ba237e9fed3601258d7aa18c502165", "filename": "src/doc/unstable-book/src/language-features/unboxed-closures.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Funboxed-closures.md", "raw_url": "https://github.com/rust-lang/rust/raw/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Funboxed-closures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Funboxed-closures.md?ref=84f729d0d4dade321210b78f56bedd88025eeff6", "patch": "@@ -2,7 +2,7 @@\n \n The tracking issue for this feature is [#29625]\n \n-See Also: [`fn_traits`](library-features/fn-traits.html)\n+See Also: [`fn_traits`](../library-features/fn-traits.md)\n \n [#29625]: https://github.com/rust-lang/rust/issues/29625\n "}, {"sha": "29a8aecee6c2fd26e5420a2c06640823e01b99fa", "filename": "src/doc/unstable-book/src/library-features/fn-traits.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ffn-traits.md", "raw_url": "https://github.com/rust-lang/rust/raw/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ffn-traits.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ffn-traits.md?ref=84f729d0d4dade321210b78f56bedd88025eeff6", "patch": "@@ -2,7 +2,7 @@\n \n The tracking issue for this feature is [#29625]\n \n-See Also: [`unboxed_closures`](language-features/unboxed-closures.html)\n+See Also: [`unboxed_closures`](../language-features/unboxed-closures.md)\n \n [#29625]: https://github.com/rust-lang/rust/issues/29625\n "}, {"sha": "97e32cc0acb121ef319d51fa79275dbd5e2073ba", "filename": "src/doc/unstable-book/src/library-features/fnbox.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ffnbox.md", "raw_url": "https://github.com/rust-lang/rust/raw/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ffnbox.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ffnbox.md?ref=84f729d0d4dade321210b78f56bedd88025eeff6", "patch": "@@ -27,6 +27,6 @@ impl<A, F> Fn for &F where F: Fn<A> + ?Sized {}\n \n Before the introduction of [`unsized_locals`][unsized_locals], we had been unable to provide the former impls. That means, unlike `&dyn Fn()` or `&mut dyn FnMut()` we could not use `Box<dyn FnOnce()>` at that time.\n \n-[unsized_locals]: language-features/unsized-locals.html\n+[unsized_locals]: ../language-features/unsized-locals.md\n \n `FnBox()` is an alternative approach to `Box<dyn FnBox()>` is delegated to `FnBox::call_box` which doesn't need unsized locals. As we now have `Box<dyn FnOnce()>` working, the `fnbox` feature is going to be removed."}, {"sha": "554c52c3c9c2761c7f6768a51923c7b36fdbf2c5", "filename": "src/doc/unstable-book/src/the-unstable-book.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Fdoc%2Funstable-book%2Fsrc%2Fthe-unstable-book.md", "raw_url": "https://github.com/rust-lang/rust/raw/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Fdoc%2Funstable-book%2Fsrc%2Fthe-unstable-book.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fthe-unstable-book.md?ref=84f729d0d4dade321210b78f56bedd88025eeff6", "patch": "@@ -14,7 +14,7 @@ fn main() {\n \n The `box_syntax` feature [has a chapter][box] describing how to use it.\n \n-[box]: language-features/box-syntax.html\n+[box]: language-features/box-syntax.md\n \n Because this documentation relates to unstable features, we make no guarantees\n that what is contained here is accurate or up to date. It's developed on a"}, {"sha": "bfc008e14a486f870edffde929bdaca1f939d989", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=84f729d0d4dade321210b78f56bedd88025eeff6", "patch": "@@ -112,7 +112,6 @@\n #![feature(maybe_uninit_extra, maybe_uninit_slice, maybe_uninit_array)]\n #![feature(alloc_layout_extra)]\n #![feature(try_trait)]\n-#![feature(iter_nth_back)]\n \n // Allow testing this library\n "}, {"sha": "a2796ad0cf0b0e898adac7b06a1952d7ef617172", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=84f729d0d4dade321210b78f56bedd88025eeff6", "patch": "@@ -177,8 +177,8 @@ pub trait AsRef<T: ?Sized> {\n ///\n /// Using `AsMut` as trait bound for a generic function we can accept all mutable references\n /// that can be converted to type `&mut T`. Because [`Box<T>`] implements `AsMut<T>` we can\n-/// write a function `add_one`that takes all arguments that can be converted to `&mut u64`.\n-/// Because [`Box<T>`] implements `AsMut<T>` `add_one` accepts arguments of type\n+/// write a function `add_one` that takes all arguments that can be converted to `&mut u64`.\n+/// Because [`Box<T>`] implements `AsMut<T>`, `add_one` accepts arguments of type\n /// `&mut Box<u64>` as well:\n ///\n /// ```"}, {"sha": "2c1aeb5690a585d0e254bc4b274b9828597a5b8d", "filename": "src/libcore/iter/traits/double_ended.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Flibcore%2Fiter%2Ftraits%2Fdouble_ended.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Flibcore%2Fiter%2Ftraits%2Fdouble_ended.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Fdouble_ended.rs?ref=84f729d0d4dade321210b78f56bedd88025eeff6", "patch": "@@ -88,15 +88,13 @@ pub trait DoubleEndedIterator: Iterator {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// #![feature(iter_nth_back)]\n     /// let a = [1, 2, 3];\n     /// assert_eq!(a.iter().nth_back(2), Some(&1));\n     /// ```\n     ///\n     /// Calling `nth_back()` multiple times doesn't rewind the iterator:\n     ///\n     /// ```\n-    /// #![feature(iter_nth_back)]\n     /// let a = [1, 2, 3];\n     ///\n     /// let mut iter = a.iter();\n@@ -108,12 +106,11 @@ pub trait DoubleEndedIterator: Iterator {\n     /// Returning `None` if there are less than `n + 1` elements:\n     ///\n     /// ```\n-    /// #![feature(iter_nth_back)]\n     /// let a = [1, 2, 3];\n     /// assert_eq!(a.iter().nth_back(10), None);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"iter_nth_back\", issue = \"56995\")]\n+    #[stable(feature = \"iter_nth_back\", since = \"1.37.0\")]\n     fn nth_back(&mut self, mut n: usize) -> Option<Self::Item> {\n         for x in self.rev() {\n             if n == 0 { return Some(x) }"}, {"sha": "ce0d3fd01f78fefc030dbe2d2a3b67afbfc7561c", "filename": "src/libcore/ops/deref.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Flibcore%2Fops%2Fderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Flibcore%2Fops%2Fderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fderef.rs?ref=84f729d0d4dade321210b78f56bedd88025eeff6", "patch": "@@ -23,9 +23,9 @@\n /// * Values of type `&T` are coerced to values of type `&U`\n /// * `T` implicitly implements all the (immutable) methods of the type `U`.\n ///\n-/// For more details, visit [the chapter in *The Rust Programming Language*]\n-/// [book] as well as the reference sections on [the dereference operator]\n-/// [ref-deref-op], [method resolution] and [type coercions].\n+/// For more details, visit [the chapter in *The Rust Programming Language*][book]\n+/// as well as the reference sections on [the dereference operator][ref-deref-op],\n+/// [method resolution] and [type coercions].\n ///\n /// [book]: ../../book/ch15-02-deref.html\n /// [`DerefMut`]: trait.DerefMut.html\n@@ -113,9 +113,9 @@ impl<T: ?Sized> Deref for &mut T {\n /// * Values of type `&mut T` are coerced to values of type `&mut U`\n /// * `T` implicitly implements all the (mutable) methods of the type `U`.\n ///\n-/// For more details, visit [the chapter in *The Rust Programming Language*]\n-/// [book] as well as the reference sections on [the dereference operator]\n-/// [ref-deref-op], [method resolution] and [type coercions].\n+/// For more details, visit [the chapter in *The Rust Programming Language*][book]\n+/// as well as the reference sections on [the dereference operator][ref-deref-op],\n+/// [method resolution] and [type coercions].\n ///\n /// [book]: ../../book/ch15-02-deref.html\n /// [`Deref`]: trait.Deref.html"}, {"sha": "0dba2bed62c93c30526be8e91429d5763bce5223", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=84f729d0d4dade321210b78f56bedd88025eeff6", "patch": "@@ -10,7 +10,6 @@\n #![feature(fmt_internals)]\n #![feature(hashmap_internals)]\n #![feature(is_sorted)]\n-#![feature(iter_nth_back)]\n #![feature(iter_once_with)]\n #![feature(pattern)]\n #![feature(range_is_empty)]"}, {"sha": "11fac239edf124d8bce7dd17cb86f7ad5d5735f5", "filename": "src/librustc_codegen_ssa/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Flibrustc_codegen_ssa%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Flibrustc_codegen_ssa%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2FREADME.md?ref=84f729d0d4dade321210b78f56bedd88025eeff6", "patch": "@@ -26,7 +26,7 @@ While the LLVM-specific code will be left in `rustc_codegen_llvm`, all the new t\n \n @irinagpopa started to parametrize the types of `rustc_codegen_llvm` by a generic `Value` type, implemented in LLVM by a reference `&'ll Value`. This work has been extended to all structures inside the `mir` folder and elsewhere, as well as for LLVM's `BasicBlock` and `Type` types.\n \n-The two most important structures for the LLVM codegen are `CodegenCx` and `Builder`. They are parametrized by multiple liftime parameters and the type for `Value`.\n+The two most important structures for the LLVM codegen are `CodegenCx` and `Builder`. They are parametrized by multiple lifetime parameters and the type for `Value`.\n \n ```rust\n struct CodegenCx<'ll, 'tcx: 'll> {"}, {"sha": "f9a12c19e427606dfc7d685bfe9a6a739a747dc9", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=84f729d0d4dade321210b78f56bedd88025eeff6", "patch": "@@ -1275,7 +1275,7 @@ declare_lint_pass!(\n \n declare_lint! {\n     pub ELLIPSIS_INCLUSIVE_RANGE_PATTERNS,\n-    Allow,\n+    Warn,\n     \"`...` range patterns are deprecated\"\n }\n "}, {"sha": "5cc7dcdae1fcd5917db45d4210891758b3041df4", "filename": "src/libstd/error.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=84f729d0d4dade321210b78f56bedd88025eeff6", "patch": "@@ -314,7 +314,6 @@ impl From<String> for Box<dyn Error + Send + Sync> {\n     ///     mem::size_of::<Box<dyn Error + Send + Sync>>() == mem::size_of_val(&a_boxed_error))\n     /// ```\n     fn from(err: String) -> Box<dyn Error + Send + Sync> {\n-        #[derive(Debug)]\n         struct StringError(String);\n \n         impl Error for StringError {\n@@ -327,6 +326,13 @@ impl From<String> for Box<dyn Error + Send + Sync> {\n             }\n         }\n \n+        // Purposefully skip printing \"StringError(..)\"\n+        impl Debug for StringError {\n+            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+                Debug::fmt(&self.0, f)\n+            }\n+        }\n+\n         Box::new(StringError(err))\n     }\n }"}, {"sha": "2e4d4c091398ea5770080490b260312ca6c8c186", "filename": "src/libsyntax/parse/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs?ref=84f729d0d4dade321210b78f56bedd88025eeff6", "patch": "@@ -858,8 +858,8 @@ impl<'a> Parser<'a> {\n                     Applicability::MaybeIncorrect,\n                 );\n             } else {\n-                err.note(\"type ascription is a nightly-only feature that lets \\\n-                          you annotate an expression with a type: `<expr>: <type>`\")\n+                err.note(\"#![feature(type_ascription)] lets you annotate an \\\n+                          expression with a type: `<expr>: <type>`\")\n                     .span_note(\n                         lhs_span,\n                         \"this expression expects an ascribed type after the colon\","}, {"sha": "92c27f883d1a9ec882d3a12fd36ca009148d916a", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 34, "deletions": 37, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=84f729d0d4dade321210b78f56bedd88025eeff6", "patch": "@@ -7205,44 +7205,41 @@ impl<'a> Parser<'a> {\n             return Ok(Some(item));\n         }\n \n-        // `unsafe async fn` or `async fn`\n-        if (\n-            self.check_keyword(kw::Unsafe) &&\n-            self.is_keyword_ahead(1, &[kw::Async])\n-        ) || (\n-            self.check_keyword(kw::Async) &&\n-            self.is_keyword_ahead(1, &[kw::Fn])\n-        )\n-        {\n-            // ASYNC FUNCTION ITEM\n-            let unsafety = self.parse_unsafety();\n-            self.expect_keyword(kw::Async)?;\n-            let async_span = self.prev_span;\n-            self.expect_keyword(kw::Fn)?;\n-            let fn_span = self.prev_span;\n-            let (ident, item_, extra_attrs) =\n-                self.parse_item_fn(unsafety,\n-                                   respan(async_span, IsAsync::Async {\n-                                       closure_id: ast::DUMMY_NODE_ID,\n-                                       return_impl_trait_id: ast::DUMMY_NODE_ID,\n-                                       arguments: Vec::new(),\n-                                   }),\n-                                   respan(fn_span, Constness::NotConst),\n-                                   Abi::Rust)?;\n-            let prev_span = self.prev_span;\n-            let item = self.mk_item(lo.to(prev_span),\n-                                    ident,\n-                                    item_,\n-                                    visibility,\n-                                    maybe_append(attrs, extra_attrs));\n-            if self.span.rust_2015() {\n-                self.diagnostic().struct_span_err_with_code(\n-                    async_span,\n-                    \"`async fn` is not permitted in the 2015 edition\",\n-                    DiagnosticId::Error(\"E0670\".into())\n-                ).emit();\n+        // Parse `async unsafe? fn`.\n+        if self.check_keyword(kw::Async) {\n+            let async_span = self.span;\n+            if self.is_keyword_ahead(1, &[kw::Fn])\n+                || self.is_keyword_ahead(2, &[kw::Fn])\n+            {\n+                // ASYNC FUNCTION ITEM\n+                self.bump(); // `async`\n+                let unsafety = self.parse_unsafety(); // `unsafe`?\n+                self.expect_keyword(kw::Fn)?; // `fn`\n+                let fn_span = self.prev_span;\n+                let (ident, item_, extra_attrs) =\n+                    self.parse_item_fn(unsafety,\n+                                    respan(async_span, IsAsync::Async {\n+                                        closure_id: ast::DUMMY_NODE_ID,\n+                                        return_impl_trait_id: ast::DUMMY_NODE_ID,\n+                                        arguments: Vec::new(),\n+                                    }),\n+                                    respan(fn_span, Constness::NotConst),\n+                                    Abi::Rust)?;\n+                let prev_span = self.prev_span;\n+                let item = self.mk_item(lo.to(prev_span),\n+                                        ident,\n+                                        item_,\n+                                        visibility,\n+                                        maybe_append(attrs, extra_attrs));\n+                if self.span.rust_2015() {\n+                    self.diagnostic().struct_span_err_with_code(\n+                        async_span,\n+                        \"`async fn` is not permitted in the 2015 edition\",\n+                        DiagnosticId::Error(\"E0670\".into())\n+                    ).emit();\n+                }\n+                return Ok(Some(item));\n             }\n-            return Ok(Some(item));\n         }\n         if self.check_keyword(kw::Unsafe) &&\n             self.is_keyword_ahead(1, &[kw::Trait, kw::Auto])"}, {"sha": "5276869a702eeb0c83e2c597d46cc5d4b7cf54fc", "filename": "src/test/run-pass/associated-consts/associated-const-range-match-patterns.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Ftest%2Frun-pass%2Fassociated-consts%2Fassociated-const-range-match-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Ftest%2Frun-pass%2Fassociated-consts%2Fassociated-const-range-match-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-consts%2Fassociated-const-range-match-patterns.rs?ref=84f729d0d4dade321210b78f56bedd88025eeff6", "patch": "@@ -1,5 +1,6 @@\n // run-pass\n #![allow(dead_code, unreachable_patterns)]\n+#![allow(ellipsis_inclusive_range_patterns)]\n \n struct Foo;\n \n@@ -23,4 +24,17 @@ fn main() {\n         <Foo as HasNum>::NUM ... <Foo>::NUM => true,\n         _ => false,\n     });\n+\n+    assert!(match 2 {\n+        Foo::NUM ..= 3 => true,\n+        _ => false,\n+    });\n+    assert!(match 0 {\n+        -1 ..= <Foo as HasNum>::NUM => true,\n+        _ => false,\n+    });\n+    assert!(match 1 {\n+        <Foo as HasNum>::NUM ..= <Foo>::NUM => true,\n+        _ => false,\n+    });\n }"}, {"sha": "19b3045784f86aab3b465914a8798e7f423b4e08", "filename": "src/test/run-pass/binding/pat-ranges.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Ftest%2Frun-pass%2Fbinding%2Fpat-ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Ftest%2Frun-pass%2Fbinding%2Fpat-ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinding%2Fpat-ranges.rs?ref=84f729d0d4dade321210b78f56bedd88025eeff6", "patch": "@@ -1,6 +1,8 @@\n // run-pass\n // Parsing of range patterns\n \n+#![allow(ellipsis_inclusive_range_patterns)]\n+\n const NUM1: i32 = 10;\n \n mod m {\n@@ -11,4 +13,8 @@ fn main() {\n     if let NUM1 ... m::NUM2 = 10 {} else { panic!() }\n     if let ::NUM1 ... ::m::NUM2 = 11 {} else { panic!() }\n     if let -13 ... -10 = 12 { panic!() } else {}\n+\n+    if let NUM1 ..= m::NUM2 = 10 {} else { panic!() }\n+    if let ::NUM1 ..= ::m::NUM2 = 11 {} else { panic!() }\n+    if let -13 ..= -10 = 12 { panic!() } else {}\n }"}, {"sha": "a648ff17492eedd11ee2fe56bcd961b5756f2267", "filename": "src/test/run-pass/inc-range-pat.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Ftest%2Frun-pass%2Finc-range-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Ftest%2Frun-pass%2Finc-range-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finc-range-pat.rs?ref=84f729d0d4dade321210b78f56bedd88025eeff6", "patch": "@@ -1,5 +1,7 @@\n // Test old and new syntax for inclusive range patterns.\n \n+#![allow(ellipsis_inclusive_range_patterns)]\n+\n fn main() {\n     assert!(match 42 { 0 ... 100 => true, _ => false });\n     assert!(match 42 { 0 ..= 100 => true, _ => false });"}, {"sha": "dee7f25d7bb3a8a36491e7a760683a5b93f3dd31", "filename": "src/test/run-pass/issues/issue-15881-model-lexer-dotdotdot.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Ftest%2Frun-pass%2Fissues%2Fissue-15881-model-lexer-dotdotdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Ftest%2Frun-pass%2Fissues%2Fissue-15881-model-lexer-dotdotdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-15881-model-lexer-dotdotdot.rs?ref=84f729d0d4dade321210b78f56bedd88025eeff6", "patch": "@@ -1,5 +1,6 @@\n // run-pass\n #![allow(illegal_floating_point_literal_pattern)] // FIXME #41620\n+#![allow(ellipsis_inclusive_range_patterns)]\n \n // regression test for the model lexer handling the DOTDOTDOT syntax (#15877)\n "}, {"sha": "04570055763a96b0dfdde00cc9b4dd68b1703da8", "filename": "src/test/run-pass/mir/mir_build_match_comparisons.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Ftest%2Frun-pass%2Fmir%2Fmir_build_match_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Ftest%2Frun-pass%2Fmir%2Fmir_build_match_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir%2Fmir_build_match_comparisons.rs?ref=84f729d0d4dade321210b78f56bedd88025eeff6", "patch": "@@ -2,7 +2,7 @@\n #![allow(dead_code)]\n fn test1(x: i8) -> i32 {\n   match x {\n-    1...10 => 0,\n+    1..=10 => 0,\n     _ => 1,\n   }\n }"}, {"sha": "38261ca4570eb96d0475010c1fe7fc238064e1b1", "filename": "src/test/ui/async-await/async-await.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Ftest%2Fui%2Fasync-await%2Fasync-await.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Ftest%2Fui%2Fasync-await%2Fasync-await.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-await.rs?ref=84f729d0d4dade321210b78f56bedd88025eeff6", "patch": "@@ -122,7 +122,7 @@ fn async_fn_with_internal_borrow(y: u8) -> impl Future<Output = u8> {\n     }\n }\n \n-unsafe async fn unsafe_async_fn(x: u8) -> u8 {\n+async unsafe fn unsafe_async_fn(x: u8) -> u8 {\n     wake_and_yield_once().await;\n     x\n }"}, {"sha": "7d8b7a257dad973c92fcfd5580f4be9551d85995", "filename": "src/test/ui/async-await/await-macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Ftest%2Fui%2Fasync-await%2Fawait-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Ftest%2Fui%2Fasync-await%2Fawait-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-macro.rs?ref=84f729d0d4dade321210b78f56bedd88025eeff6", "patch": "@@ -122,7 +122,7 @@ fn async_fn_with_internal_borrow(y: u8) -> impl Future<Output = u8> {\n     }\n }\n \n-unsafe async fn unsafe_async_fn(x: u8) -> u8 {\n+async unsafe fn unsafe_async_fn(x: u8) -> u8 {\n     await!(wake_and_yield_once());\n     x\n }"}, {"sha": "adffe32d67a30036488aea0de16bb0d874186d45", "filename": "src/test/ui/const-generics/const-generic-array-wrapper.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-array-wrapper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-array-wrapper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-array-wrapper.rs?ref=84f729d0d4dade321210b78f56bedd88025eeff6", "patch": "@@ -0,0 +1,18 @@\n+// run-pass\n+\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+struct Foo<T, const N: usize>([T; {N}]);\n+\n+impl<T, const N: usize> Foo<T, {N}> {\n+    fn foo(&self) -> usize {\n+        {N}\n+    }\n+}\n+\n+fn main() {\n+    let foo = Foo([0u32; 21]);\n+    assert_eq!(foo.0, [0u32; 21]);\n+    assert_eq!(foo.foo(), 21);\n+}"}, {"sha": "f92e11d47ed378775975ae7a1c2182b12a5decff", "filename": "src/test/ui/const-generics/const-generic-array-wrapper.stderr", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-array-wrapper.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-array-wrapper.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-array-wrapper.stderr?ref=84f729d0d4dade321210b78f56bedd88025eeff6", "patch": "@@ -0,0 +1,6 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/const-generic-array-wrapper.rs:3:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+"}, {"sha": "cf36953546549c10e1d64d3f7c91d16c84062986", "filename": "src/test/ui/issues/issue-22644.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Ftest%2Fui%2Fissues%2Fissue-22644.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Ftest%2Fui%2Fissues%2Fissue-22644.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22644.stderr?ref=84f729d0d4dade321210b78f56bedd88025eeff6", "patch": "@@ -89,7 +89,7 @@ error: expected type, found `4`\n LL |     println!(\"{}\", a: &mut 4);\n    |                            ^ expecting a type here because of type ascription\n    |\n-   = note: type ascription is a nightly-only feature that lets you annotate an expression with a type: `<expr>: <type>`\n+   = note: #![feature(type_ascription)] lets you annotate an expression with a type: `<expr>: <type>`\n note: this expression expects an ascribed type after the colon\n   --> $DIR/issue-22644.rs:34:20\n    |"}, {"sha": "01f395377701751b7d82e155c205c5154d52954f", "filename": "src/test/ui/issues/issue-34255-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Ftest%2Fui%2Fissues%2Fissue-34255-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Ftest%2Fui%2Fissues%2Fissue-34255-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34255-1.stderr?ref=84f729d0d4dade321210b78f56bedd88025eeff6", "patch": "@@ -4,7 +4,7 @@ error: expected type, found `42`\n LL |     Test::Drill(field: 42);\n    |                        ^^ expecting a type here because of type ascription\n    |\n-   = note: type ascription is a nightly-only feature that lets you annotate an expression with a type: `<expr>: <type>`\n+   = note: #![feature(type_ascription)] lets you annotate an expression with a type: `<expr>: <type>`\n note: this expression expects an ascribed type after the colon\n   --> $DIR/issue-34255-1.rs:8:17\n    |"}, {"sha": "8ae8018c2ff25f41d8018b21593eb9b1c35440b3", "filename": "src/test/ui/lifetime_starts_expressions.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Ftest%2Fui%2Flifetime_starts_expressions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Ftest%2Fui%2Flifetime_starts_expressions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime_starts_expressions.stderr?ref=84f729d0d4dade321210b78f56bedd88025eeff6", "patch": "@@ -14,7 +14,7 @@ error: expected type, found keyword `loop`\n LL |     loop { break 'label: loop { break 'label 42; }; }\n    |                          ^^^^ expecting a type here because of type ascription\n    |\n-   = note: type ascription is a nightly-only feature that lets you annotate an expression with a type: `<expr>: <type>`\n+   = note: #![feature(type_ascription)] lets you annotate an expression with a type: `<expr>: <type>`\n note: this expression expects an ascribed type after the colon\n   --> $DIR/lifetime_starts_expressions.rs:6:12\n    |"}, {"sha": "3a52996195c0d6e9b1b11ba59c2fe9deb452d55a", "filename": "src/test/ui/lint/issue-54538-unused-parens-lint.rs", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.rs?ref=84f729d0d4dade321210b78f56bedd88025eeff6", "patch": "@@ -1,10 +1,32 @@\n // compile-pass\n \n+#![allow(ellipsis_inclusive_range_patterns)]\n #![allow(unreachable_patterns)]\n #![allow(unused_variables)]\n #![warn(unused_parens)]\n \n fn main() {\n+    match 1 {\n+        (_) => {}         //~ WARNING: unnecessary parentheses around pattern\n+        (y) => {}         //~ WARNING: unnecessary parentheses around pattern\n+        (ref r) => {}     //~ WARNING: unnecessary parentheses around pattern\n+        (e @ 1...2) => {} //~ WARNING: unnecessary parentheses around outer pattern\n+        (1...2) => {}     // Non ambiguous range pattern should not warn\n+        e @ (3...4) => {} // Non ambiguous range pattern should not warn\n+    }\n+\n+    match &1 {\n+        (e @ &(1...2)) => {} //~ WARNING: unnecessary parentheses around outer pattern\n+        &(_) => {}           //~ WARNING: unnecessary parentheses around pattern\n+        e @ &(1...2) => {}   // Ambiguous range pattern should not warn\n+        &(1...2) => {}       // Ambiguous range pattern should not warn\n+    }\n+\n+    match &1 {\n+        e @ &(1...2) | e @ &(3...4) => {} // Complex ambiguous pattern should not warn\n+        &_ => {}\n+    }\n+\n     match 1 {\n         (_) => {}         //~ WARNING: unnecessary parentheses around pattern\n         (y) => {}         //~ WARNING: unnecessary parentheses around pattern\n@@ -15,14 +37,14 @@ fn main() {\n     }\n \n     match &1 {\n-        (e @ &(1...2)) => {} //~ WARNING: unnecessary parentheses around outer pattern\n+        (e @ &(1..=2)) => {} //~ WARNING: unnecessary parentheses around outer pattern\n         &(_) => {}           //~ WARNING: unnecessary parentheses around pattern\n-        e @ &(1...2) => {}   // Ambiguous range pattern should not warn\n+        e @ &(1..=2) => {}   // Ambiguous range pattern should not warn\n         &(1..=2) => {}       // Ambiguous range pattern should not warn\n     }\n \n     match &1 {\n-        e @ &(1...2) | e @ &(3..=4) => {} // Complex ambiguous pattern should not warn\n+        e @ &(1..=2) | e @ &(3..=4) => {} // Complex ambiguous pattern should not warn\n         &_ => {}\n     }\n }"}, {"sha": "3b312198952a5b66cb51073302e3c2f8bf4283c9", "filename": "src/test/ui/lint/issue-54538-unused-parens-lint.stderr", "status": "modified", "additions": 44, "deletions": 8, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.stderr?ref=84f729d0d4dade321210b78f56bedd88025eeff6", "patch": "@@ -1,41 +1,77 @@\n warning: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:9:9\n+  --> $DIR/issue-54538-unused-parens-lint.rs:10:9\n    |\n LL |         (_) => {}\n    |         ^^^ help: remove these parentheses\n    |\n note: lint level defined here\n-  --> $DIR/issue-54538-unused-parens-lint.rs:5:9\n+  --> $DIR/issue-54538-unused-parens-lint.rs:6:9\n    |\n LL | #![warn(unused_parens)]\n    |         ^^^^^^^^^^^^^\n \n warning: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:10:9\n+  --> $DIR/issue-54538-unused-parens-lint.rs:11:9\n    |\n LL |         (y) => {}\n    |         ^^^ help: remove these parentheses\n \n warning: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:11:9\n+  --> $DIR/issue-54538-unused-parens-lint.rs:12:9\n    |\n LL |         (ref r) => {}\n    |         ^^^^^^^ help: remove these parentheses\n \n warning: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:12:9\n+  --> $DIR/issue-54538-unused-parens-lint.rs:13:9\n    |\n-LL |         (e @ 1..=2) => {}\n+LL |         (e @ 1...2) => {}\n    |         ^^^^^^^^^^^ help: remove these parentheses\n \n warning: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:18:9\n+  --> $DIR/issue-54538-unused-parens-lint.rs:19:9\n    |\n LL |         (e @ &(1...2)) => {}\n    |         ^^^^^^^^^^^^^^ help: remove these parentheses\n \n warning: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:19:10\n+  --> $DIR/issue-54538-unused-parens-lint.rs:20:10\n+   |\n+LL |         &(_) => {}\n+   |          ^^^ help: remove these parentheses\n+\n+warning: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:31:9\n+   |\n+LL |         (_) => {}\n+   |         ^^^ help: remove these parentheses\n+\n+warning: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:32:9\n+   |\n+LL |         (y) => {}\n+   |         ^^^ help: remove these parentheses\n+\n+warning: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:33:9\n+   |\n+LL |         (ref r) => {}\n+   |         ^^^^^^^ help: remove these parentheses\n+\n+warning: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:34:9\n+   |\n+LL |         (e @ 1..=2) => {}\n+   |         ^^^^^^^^^^^ help: remove these parentheses\n+\n+warning: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:40:9\n+   |\n+LL |         (e @ &(1..=2)) => {}\n+   |         ^^^^^^^^^^^^^^ help: remove these parentheses\n+\n+warning: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:41:10\n    |\n LL |         &(_) => {}\n    |          ^^^ help: remove these parentheses"}, {"sha": "a0cc773d20edd3cd184a5598f3b616b92454b25b", "filename": "src/test/ui/match/match-range-fail-dominate.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail-dominate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail-dominate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail-dominate.rs?ref=84f729d0d4dade321210b78f56bedd88025eeff6", "patch": "@@ -8,31 +8,31 @@\n \n fn main() {\n     match 5 {\n-      1 ... 10 => { }\n-      5 ... 6 => { }\n+      1 ..= 10 => { }\n+      5 ..= 6 => { }\n       _ => {}\n     };\n \n     match 5 {\n-      3 ... 6 => { }\n-      4 ... 6 => { }\n+      3 ..= 6 => { }\n+      4 ..= 6 => { }\n       _ => {}\n     };\n \n     match 5 {\n-      4 ... 6 => { }\n-      4 ... 6 => { }\n+      4 ..= 6 => { }\n+      4 ..= 6 => { }\n       _ => {}\n     };\n \n     match 'c' {\n-      'A' ... 'z' => {}\n-      'a' ... 'z' => {}\n+      'A' ..= 'z' => {}\n+      'a' ..= 'z' => {}\n       _ => {}\n     };\n \n     match 1.0f64 {\n-      0.01f64 ... 6.5f64 => {}\n+      0.01f64 ..= 6.5f64 => {}\n       0.02f64 => {}\n       _ => {}\n     };"}, {"sha": "f481e56c85e56bef00f4bd87f86c6e0752b6f865", "filename": "src/test/ui/match/match-range-fail-dominate.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail-dominate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail-dominate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail-dominate.stderr?ref=84f729d0d4dade321210b78f56bedd88025eeff6", "patch": "@@ -1,7 +1,7 @@\n error: unreachable pattern\n   --> $DIR/match-range-fail-dominate.rs:12:7\n    |\n-LL |       5 ... 6 => { }\n+LL |       5 ..= 6 => { }\n    |       ^^^^^^^\n    |\n note: lint level defined here\n@@ -13,25 +13,25 @@ LL | #![deny(unreachable_patterns)]\n error: unreachable pattern\n   --> $DIR/match-range-fail-dominate.rs:18:7\n    |\n-LL |       4 ... 6 => { }\n+LL |       4 ..= 6 => { }\n    |       ^^^^^^^\n \n error: unreachable pattern\n   --> $DIR/match-range-fail-dominate.rs:24:7\n    |\n-LL |       4 ... 6 => { }\n+LL |       4 ..= 6 => { }\n    |       ^^^^^^^\n \n error: unreachable pattern\n   --> $DIR/match-range-fail-dominate.rs:30:7\n    |\n-LL |       'a' ... 'z' => {}\n+LL |       'a' ..= 'z' => {}\n    |       ^^^^^^^^^^^\n \n warning: floating-point types cannot be used in patterns\n   --> $DIR/match-range-fail-dominate.rs:35:7\n    |\n-LL |       0.01f64 ... 6.5f64 => {}\n+LL |       0.01f64 ..= 6.5f64 => {}\n    |       ^^^^^^^\n    |\n    = note: #[warn(illegal_floating_point_literal_pattern)] on by default\n@@ -41,7 +41,7 @@ LL |       0.01f64 ... 6.5f64 => {}\n warning: floating-point types cannot be used in patterns\n   --> $DIR/match-range-fail-dominate.rs:35:19\n    |\n-LL |       0.01f64 ... 6.5f64 => {}\n+LL |       0.01f64 ..= 6.5f64 => {}\n    |                   ^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -65,7 +65,7 @@ LL |       0.02f64 => {}\n warning: floating-point types cannot be used in patterns\n   --> $DIR/match-range-fail-dominate.rs:35:7\n    |\n-LL |       0.01f64 ... 6.5f64 => {}\n+LL |       0.01f64 ..= 6.5f64 => {}\n    |       ^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!"}, {"sha": "1399694a79b6ab4d03da60a7051d18442e328c58", "filename": "src/test/ui/nll/issue-57960.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Ftest%2Fui%2Fnll%2Fissue-57960.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Ftest%2Fui%2Fnll%2Fissue-57960.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-57960.rs?ref=84f729d0d4dade321210b78f56bedd88025eeff6", "patch": "@@ -27,9 +27,9 @@ impl Range for ThreeDigits {\n \n fn digits(x: u8) -> u32 {\n     match x {\n-        OneDigit::FIRST...OneDigit::LAST => 1,\n-        TwoDigits::FIRST...TwoDigits::LAST => 2,\n-        ThreeDigits::FIRST...ThreeDigits::LAST => 3,\n+        OneDigit::FIRST..=OneDigit::LAST => 1,\n+        TwoDigits::FIRST..=TwoDigits::LAST => 2,\n+        ThreeDigits::FIRST..=ThreeDigits::LAST => 3,\n         _ => unreachable!(),\n     }\n }"}, {"sha": "150d74f07428d97cf519db0d0457604c84e89713", "filename": "src/test/ui/parser/recover-from-bad-variant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.stderr?ref=84f729d0d4dade321210b78f56bedd88025eeff6", "patch": "@@ -4,7 +4,7 @@ error: expected type, found `3`\n LL |     let x = Enum::Foo(a: 3, b: 4);\n    |                          ^ expecting a type here because of type ascription\n    |\n-   = note: type ascription is a nightly-only feature that lets you annotate an expression with a type: `<expr>: <type>`\n+   = note: #![feature(type_ascription)] lets you annotate an expression with a type: `<expr>: <type>`\n note: this expression expects an ascribed type after the colon\n   --> $DIR/recover-from-bad-variant.rs:7:23\n    |"}, {"sha": "4929922c83fe6c0338d333e31f76149e547e3ad0", "filename": "src/test/ui/type/type-ascription-instead-of-statement-end.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-instead-of-statement-end.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84f729d0d4dade321210b78f56bedd88025eeff6/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-instead-of-statement-end.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-instead-of-statement-end.stderr?ref=84f729d0d4dade321210b78f56bedd88025eeff6", "patch": "@@ -12,7 +12,7 @@ error: expected type, found `0`\n LL |     println!(\"test\"): 0;\n    |                       ^ expecting a type here because of type ascription\n    |\n-   = note: type ascription is a nightly-only feature that lets you annotate an expression with a type: `<expr>: <type>`\n+   = note: #![feature(type_ascription)] lets you annotate an expression with a type: `<expr>: <type>`\n note: this expression expects an ascribed type after the colon\n   --> $DIR/type-ascription-instead-of-statement-end.rs:9:5\n    |"}]}