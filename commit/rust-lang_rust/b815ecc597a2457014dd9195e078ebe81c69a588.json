{"sha": "b815ecc597a2457014dd9195e078ebe81c69a588", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4MTVlY2M1OTdhMjQ1NzAxNGRkOTE5NWUwNzhlYmU4MWM2OWE1ODg=", "commit": {"author": {"name": "cjkenn", "email": "cam.j.kennedy@gmail.com", "date": "2017-10-17T06:41:51Z"}, "committer": {"name": "cjkenn", "email": "cam.j.kennedy@gmail.com", "date": "2017-10-20T06:22:04Z"}, "message": "Add used_trait_imports query", "tree": {"sha": "20a23966669c83b7d8a4f28258ad9d1c6353c719", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20a23966669c83b7d8a4f28258ad9d1c6353c719"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b815ecc597a2457014dd9195e078ebe81c69a588", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b815ecc597a2457014dd9195e078ebe81c69a588", "html_url": "https://github.com/rust-lang/rust/commit/b815ecc597a2457014dd9195e078ebe81c69a588", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b815ecc597a2457014dd9195e078ebe81c69a588/comments", "author": {"login": "cjkenn", "id": 6255842, "node_id": "MDQ6VXNlcjYyNTU4NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/6255842?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjkenn", "html_url": "https://github.com/cjkenn", "followers_url": "https://api.github.com/users/cjkenn/followers", "following_url": "https://api.github.com/users/cjkenn/following{/other_user}", "gists_url": "https://api.github.com/users/cjkenn/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjkenn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjkenn/subscriptions", "organizations_url": "https://api.github.com/users/cjkenn/orgs", "repos_url": "https://api.github.com/users/cjkenn/repos", "events_url": "https://api.github.com/users/cjkenn/events{/privacy}", "received_events_url": "https://api.github.com/users/cjkenn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjkenn", "id": 6255842, "node_id": "MDQ6VXNlcjYyNTU4NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/6255842?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjkenn", "html_url": "https://github.com/cjkenn", "followers_url": "https://api.github.com/users/cjkenn/followers", "following_url": "https://api.github.com/users/cjkenn/following{/other_user}", "gists_url": "https://api.github.com/users/cjkenn/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjkenn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjkenn/subscriptions", "organizations_url": "https://api.github.com/users/cjkenn/orgs", "repos_url": "https://api.github.com/users/cjkenn/repos", "events_url": "https://api.github.com/users/cjkenn/events{/privacy}", "received_events_url": "https://api.github.com/users/cjkenn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ada809917dc4b6f7a48fb60df06c3753bc8a74f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ada809917dc4b6f7a48fb60df06c3753bc8a74f3", "html_url": "https://github.com/rust-lang/rust/commit/ada809917dc4b6f7a48fb60df06c3753bc8a74f3"}], "stats": {"total": 49, "additions": 26, "deletions": 23}, "files": [{"sha": "7de557ad0ed0da45b99e8c4b9c0a5d2a4ef25805", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b815ecc597a2457014dd9195e078ebe81c69a588/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b815ecc597a2457014dd9195e078ebe81c69a588/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=b815ecc597a2457014dd9195e078ebe81c69a588", "patch": "@@ -500,6 +500,7 @@ define_dep_nodes!( <'tcx>\n     [] InherentImpls(DefId),\n     [] TypeckBodiesKrate,\n     [] TypeckTables(DefId),\n+    [] UsedTraitImports(DefId),\n     [] HasTypeckTables(DefId),\n     [] ConstEval { param_env: ParamEnvAnd<'tcx, (DefId, &'tcx Substs<'tcx>)> },\n     [] SymbolName(DefId),"}, {"sha": "8232c0ed46096997e961edc0050724347822a684", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b815ecc597a2457014dd9195e078ebe81c69a588/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b815ecc597a2457014dd9195e078ebe81c69a588/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=b815ecc597a2457014dd9195e078ebe81c69a588", "patch": "@@ -387,8 +387,9 @@ pub struct TypeckTables<'tcx> {\n     cast_kinds: ItemLocalMap<ty::cast::CastKind>,\n \n     /// Set of trait imports actually used in the method resolution.\n-    /// This is used for warning unused imports.\n-    pub used_trait_imports: Rc<RefCell<DefIdSet>>,\n+    /// This is used for warning unused imports. During type\n+    /// checking, this field should not be cloned.\n+    pub used_trait_imports: Rc<DefIdSet>,\n \n     /// If any errors occurred while type-checking this body,\n     /// this field will be set to `true`.\n@@ -418,7 +419,7 @@ impl<'tcx> TypeckTables<'tcx> {\n             liberated_fn_sigs: ItemLocalMap(),\n             fru_field_types: ItemLocalMap(),\n             cast_kinds: ItemLocalMap(),\n-            used_trait_imports: Rc::new(RefCell::new(DefIdSet())),\n+            used_trait_imports: Rc::new(DefIdSet()),\n             tainted_by_errors: false,\n             free_region_map: FreeRegionMap::new(),\n         }\n@@ -782,7 +783,7 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for TypeckTables<'gcx> {\n             cast_kinds.hash_stable(hcx, hasher);\n             generator_sigs.hash_stable(hcx, hasher);\n             generator_interiors.hash_stable(hcx, hasher);\n-            used_trait_imports.borrow_mut().hash_stable(hcx, hasher);\n+            used_trait_imports.hash_stable(hcx, hasher);\n             tainted_by_errors.hash_stable(hcx, hasher);\n             free_region_map.hash_stable(hcx, hasher);\n         })"}, {"sha": "f6a0194913046953bee4ad4e90a9f2839f2820d3", "filename": "src/librustc/ty/maps/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b815ecc597a2457014dd9195e078ebe81c69a588/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b815ecc597a2457014dd9195e078ebe81c69a588/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs?ref=b815ecc597a2457014dd9195e078ebe81c69a588", "patch": "@@ -183,6 +183,8 @@ define_maps! { <'tcx>\n \n     [] fn typeck_tables_of: TypeckTables(DefId) -> &'tcx ty::TypeckTables<'tcx>,\n \n+    [] fn used_trait_imports: UsedTraitImports(DefId) -> Rc<DefIdSet>,\n+\n     [] fn has_typeck_tables: HasTypeckTables(DefId) -> bool,\n \n     [] fn coherent_trait: coherent_trait_dep_node((CrateNum, DefId)) -> (),"}, {"sha": "767e9a8436c2ec304ab130fb3758a10e85552c7a", "filename": "src/librustc/ty/maps/plumbing.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b815ecc597a2457014dd9195e078ebe81c69a588/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b815ecc597a2457014dd9195e078ebe81c69a588/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs?ref=b815ecc597a2457014dd9195e078ebe81c69a588", "patch": "@@ -757,6 +757,7 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::InherentImpls => { force!(inherent_impls, def_id!()); }\n         DepKind::TypeckBodiesKrate => { force!(typeck_item_bodies, LOCAL_CRATE); }\n         DepKind::TypeckTables => { force!(typeck_tables_of, def_id!()); }\n+        DepKind::UsedTraitImports => { force!(used_trait_imports, def_id!()); }\n         DepKind::HasTypeckTables => { force!(has_typeck_tables, def_id!()); }\n         DepKind::SymbolName => { force!(def_symbol_name, def_id!()); }\n         DepKind::SpecializationGraph => { force!(specialization_graph_of, def_id!()); }"}, {"sha": "58d72e37d51cfb1c0b48b11cdb8a190ad01c932d", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b815ecc597a2457014dd9195e078ebe81c69a588/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b815ecc597a2457014dd9195e078ebe81c69a588/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=b815ecc597a2457014dd9195e078ebe81c69a588", "patch": "@@ -25,6 +25,8 @@ use syntax_pos::Span;\n \n use rustc::hir;\n \n+use std::rc::Rc;\n+\n pub use self::MethodError::*;\n pub use self::CandidateSource::*;\n \n@@ -163,10 +165,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         if let Some(import_id) = pick.import_id {\n             let import_def_id = self.tcx.hir.local_def_id(import_id);\n             debug!(\"used_trait_import: {:?}\", import_def_id);\n-\n-            let tables = self.tables.borrow_mut();\n-            let mut ut = tables.used_trait_imports.borrow_mut();\n-            ut.insert(import_def_id);\n+            Rc::get_mut(&mut self.tables.borrow_mut().used_trait_imports)\n+                                        .unwrap().insert(import_def_id);\n         }\n \n         self.tcx.check_stability(pick.item.def_id, call_expr.id, span);\n@@ -364,9 +364,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         if let Some(import_id) = pick.import_id {\n             let import_def_id = self.tcx.hir.local_def_id(import_id);\n             debug!(\"used_trait_import: {:?}\", import_def_id);\n-            let tables = self.tables.borrow_mut();\n-            let mut ut = tables.used_trait_imports.borrow_mut();\n-            ut.insert(import_def_id);\n+            Rc::get_mut(&mut self.tables.borrow_mut().used_trait_imports)\n+                                        .unwrap().insert(import_def_id);\n         }\n \n         let def = pick.item.def();"}, {"sha": "c4c8f65a994a8918242780a80ccda0a401f0be4b", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b815ecc597a2457014dd9195e078ebe81c69a588/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b815ecc597a2457014dd9195e078ebe81c69a588/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=b815ecc597a2457014dd9195e078ebe81c69a588", "patch": "@@ -743,6 +743,7 @@ pub fn provide(providers: &mut Providers) {\n         closure_kind,\n         generator_sig,\n         adt_destructor,\n+        used_trait_imports,\n         ..*providers\n     };\n }\n@@ -846,6 +847,12 @@ fn has_typeck_tables<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     primary_body_of(tcx, id).is_some()\n }\n \n+fn used_trait_imports<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                              def_id: DefId)\n+                              -> Rc<DefIdSet> {\n+    Rc::clone(&tcx.typeck_tables_of(def_id).used_trait_imports)\n+}\n+\n fn typeck_tables_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                               def_id: DefId)\n                               -> &'tcx ty::TypeckTables<'tcx> {\n@@ -922,12 +929,6 @@ fn typeck_tables_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     tables\n }\n \n-pub fn get_used_trait_imports<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                        def_id: DefId)\n-                                        -> Rc<RefCell<DefIdSet>> {\n-    Rc::clone(&tcx.typeck_tables_of(def_id).used_trait_imports)\n-}\n-\n fn check_abi<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, span: Span, abi: Abi) {\n     if !tcx.sess.target.target.is_abi_supported(abi) {\n         struct_span_err!(tcx.sess, span, E0570,"}, {"sha": "ce2ac73a27e0cb8b6f25fd031483c26e12bb8b51", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b815ecc597a2457014dd9195e078ebe81c69a588/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b815ecc597a2457014dd9195e078ebe81c69a588/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=b815ecc597a2457014dd9195e078ebe81c69a588", "patch": "@@ -24,7 +24,6 @@ use syntax::ast;\n use syntax_pos::Span;\n use std::mem;\n use std::rc::Rc;\n-use std::cell::RefCell;\n \n ///////////////////////////////////////////////////////////////////////////\n // Entry point\n@@ -51,7 +50,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         wbcx.visit_generator_interiors();\n \n         let used_trait_imports = mem::replace(&mut self.tables.borrow_mut().used_trait_imports,\n-                                              Rc::new(RefCell::new(DefIdSet())));\n+                                              Rc::new(DefIdSet()));\n         debug!(\"used_trait_imports({:?}) = {:?}\", item_def_id, used_trait_imports);\n         wbcx.tables.used_trait_imports = used_trait_imports;\n "}, {"sha": "29df70a4679c064597e887117b6a40dfef2a125d", "filename": "src/librustc_typeck/check_unused.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b815ecc597a2457014dd9195e078ebe81c69a588/src%2Flibrustc_typeck%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b815ecc597a2457014dd9195e078ebe81c69a588/src%2Flibrustc_typeck%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck_unused.rs?ref=b815ecc597a2457014dd9195e078ebe81c69a588", "patch": "@@ -19,8 +19,6 @@ use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir;\n use rustc::util::nodemap::DefIdSet;\n \n-use check::get_used_trait_imports;\n-\n struct CheckVisitor<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     used_trait_imports: DefIdSet,\n@@ -68,9 +66,10 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     let mut used_trait_imports = DefIdSet();\n     for &body_id in tcx.hir.krate().bodies.keys() {\n         let item_def_id = tcx.hir.body_owner_def_id(body_id);\n-        let imports = get_used_trait_imports(tcx, item_def_id);\n+        // let tables = tcx.typeck_tables_of(item_def_id);\n+        let imports = tcx.used_trait_imports(item_def_id);\n         debug!(\"GatherVisitor: item_def_id={:?} with imports {:#?}\", item_def_id, imports);\n-        used_trait_imports.extend(imports.borrow().iter());\n+        used_trait_imports.extend(imports.iter());\n     }\n \n     let mut visitor = CheckVisitor { tcx, used_trait_imports };"}]}