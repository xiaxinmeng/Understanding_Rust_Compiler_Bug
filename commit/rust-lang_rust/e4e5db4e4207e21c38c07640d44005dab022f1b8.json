{"sha": "e4e5db4e4207e21c38c07640d44005dab022f1b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0ZTVkYjRlNDIwN2UyMWMzOGMwNzY0MGQ0NDAwNWRhYjAyMmYxYjg=", "commit": {"author": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2020-08-11T00:02:45Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2021-03-23T17:16:20Z"}, "message": "Add has_default to GenericParamDefKind::Const\n\nThis currently creates a field which is always false on GenericParamDefKind for future use when\nconsts are permitted to have defaults\n\nUpdate const_generics:default locations\n\nPreviously just ignored them, now actually do something about them.\n\nFix using type check instead of value\n\nAdd parsing\n\nThis adds all the necessary changes to lower const-generics defaults from parsing.\n\nChange P<Expr> to AnonConst\n\nThis matches the arguments passed to instantiations of const generics, and makes it specific to\njust anonymous constants.\n\nAttempt to fix lowering bugs", "tree": {"sha": "32856def2da071e067f79505960bf18debd407e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32856def2da071e067f79505960bf18debd407e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4e5db4e4207e21c38c07640d44005dab022f1b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4e5db4e4207e21c38c07640d44005dab022f1b8", "html_url": "https://github.com/rust-lang/rust/commit/e4e5db4e4207e21c38c07640d44005dab022f1b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4e5db4e4207e21c38c07640d44005dab022f1b8/comments", "author": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79e5814f4520f2c51b5307421db45cd82d134e76", "url": "https://api.github.com/repos/rust-lang/rust/commits/79e5814f4520f2c51b5307421db45cd82d134e76", "html_url": "https://github.com/rust-lang/rust/commit/79e5814f4520f2c51b5307421db45cd82d134e76"}], "stats": {"total": 235, "additions": 158, "deletions": 77}, "files": [{"sha": "4b9bf273c70f799808c29531b65ad85756130291", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e4e5db4e4207e21c38c07640d44005dab022f1b8/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4e5db4e4207e21c38c07640d44005dab022f1b8/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=e4e5db4e4207e21c38c07640d44005dab022f1b8", "patch": "@@ -385,6 +385,7 @@ pub enum GenericParamKind {\n         ty: P<Ty>,\n         /// Span of the `const` keyword.\n         kw_span: Span,\n+\n         /// Optional default value for the const generic param\n         default: Option<AnonConst>,\n     },"}, {"sha": "c5378fb47bc2a69cbf50e309871385243e0e3109", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4e5db4e4207e21c38c07640d44005dab022f1b8/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4e5db4e4207e21c38c07640d44005dab022f1b8/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=e4e5db4e4207e21c38c07640d44005dab022f1b8", "patch": "@@ -785,8 +785,8 @@ pub fn noop_flat_map_generic_param<T: MutVisitor>(\n             visit_opt(default, |default| vis.visit_ty(default));\n         }\n         GenericParamKind::Const { ty, kw_span: _, default } => {\n-            vis.visit_ty(ty);\n             visit_opt(default, |default| vis.visit_anon_const(default));\n+            vis.visit_ty(ty);\n         }\n     }\n     smallvec![param]"}, {"sha": "5385c4d72e4ba6ed470d9228b1d0224a0da435e5", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e4e5db4e4207e21c38c07640d44005dab022f1b8/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4e5db4e4207e21c38c07640d44005dab022f1b8/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=e4e5db4e4207e21c38c07640d44005dab022f1b8", "patch": "@@ -2290,7 +2290,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         this.lower_ty(&ty, ImplTraitContext::disallowed())\n                     });\n                 let default = default.as_ref().map(|def| self.lower_anon_const(def));\n-\n                 (hir::ParamName::Plain(param.ident), hir::GenericParamKind::Const { ty, default })\n             }\n         };"}, {"sha": "235528d6b02bfed1f13a28643b870823ae9e3e50", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e4e5db4e4207e21c38c07640d44005dab022f1b8/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4e5db4e4207e21c38c07640d44005dab022f1b8/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=e4e5db4e4207e21c38c07640d44005dab022f1b8", "patch": "@@ -1174,6 +1174,17 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     }\n                 }\n             }\n+            if !self.session.features_untracked().const_generics_defaults {\n+                if let GenericParamKind::Const { default: Some(ref default), .. } = param.kind {\n+                    let mut err = self.err_handler().struct_span_err(\n+                        default.value.span,\n+                        \"default values for const generic parameters are unstable\",\n+                    );\n+                    err.note(\"to enable them use #![feature(const_generic_defaults)]\");\n+                    err.emit();\n+                    break;\n+                }\n+            }\n         }\n \n         validate_generic_param_order("}, {"sha": "3a7ec3a8df1dd162d4f72809dd0c934e5fc61be3", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e4e5db4e4207e21c38c07640d44005dab022f1b8/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4e5db4e4207e21c38c07640d44005dab022f1b8/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=e4e5db4e4207e21c38c07640d44005dab022f1b8", "patch": "@@ -2661,6 +2661,9 @@ impl<'a> State<'a> {\n                     s.print_type_bounds(\":\", &param.bounds);\n                     if let Some(ref _default) = default {\n                         // FIXME(const_generics_defaults): print the `default` value here\n+                        s.s.space();\n+                        s.word_space(\"=\");\n+                        // s.print_anon_const(&default);\n                     }\n                 }\n             }"}, {"sha": "7eeda6013ed752387ff41049ac0ae05a2db02b00", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e4e5db4e4207e21c38c07640d44005dab022f1b8/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4e5db4e4207e21c38c07640d44005dab022f1b8/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=e4e5db4e4207e21c38c07640d44005dab022f1b8", "patch": "@@ -2266,8 +2266,10 @@ impl<'a> State<'a> {\n             GenericParamKind::Const { ref ty, ref default } => {\n                 self.word_space(\":\");\n                 self.print_type(ty);\n-                if let Some(ref _default) = default {\n-                    // FIXME(const_generics_defaults): print the `default` value here\n+                if let Some(ref default) = default {\n+                    self.s.space();\n+                    self.word_space(\"=\");\n+                    self.print_anon_const(&default)\n                 }\n             }\n         }"}, {"sha": "d614f18610683c581da64c164211452b8a7fa322", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e4e5db4e4207e21c38c07640d44005dab022f1b8/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4e5db4e4207e21c38c07640d44005dab022f1b8/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=e4e5db4e4207e21c38c07640d44005dab022f1b8", "patch": "@@ -963,10 +963,11 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             .rev()\n             .filter_map(|param| match param.kind {\n                 ty::GenericParamDefKind::Lifetime => None,\n-                ty::GenericParamDefKind::Type { has_default, .. } => {\n+\n+                ty::GenericParamDefKind::Type { has_default, .. }\n+                | ty::GenericParamDefKind::Const { has_default } => {\n                     Some((param.def_id, has_default))\n                 }\n-                ty::GenericParamDefKind::Const => None, // FIXME(const_generics_defaults)\n             })\n             .peekable();\n         let has_default = {"}, {"sha": "56c38baa2df81656325e0b121ac99c3e74536937", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4e5db4e4207e21c38c07640d44005dab022f1b8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4e5db4e4207e21c38c07640d44005dab022f1b8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=e4e5db4e4207e21c38c07640d44005dab022f1b8", "patch": "@@ -2221,7 +2221,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         let adt_def = self.adt_def(wrapper_def_id);\n         let substs =\n             InternalSubsts::for_item(self, wrapper_def_id, |param, substs| match param.kind {\n-                GenericParamDefKind::Lifetime | GenericParamDefKind::Const => bug!(),\n+                GenericParamDefKind::Lifetime | GenericParamDefKind::Const { .. } => bug!(),\n                 GenericParamDefKind::Type { has_default, .. } => {\n                     if param.index == 0 {\n                         ty_param.into()\n@@ -2416,7 +2416,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                 self.mk_region(ty::ReEarlyBound(param.to_early_bound_region_data())).into()\n             }\n             GenericParamDefKind::Type { .. } => self.mk_ty_param(param.index, param.name).into(),\n-            GenericParamDefKind::Const => {\n+            GenericParamDefKind::Const { .. } => {\n                 self.mk_const_param(param.index, param.name, self.type_of(param.def_id)).into()\n             }\n         }"}, {"sha": "ef46a41996488e4bdb3f0b282762f85e348d8005", "filename": "compiler/rustc_middle/src/ty/generics.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e4e5db4e4207e21c38c07640d44005dab022f1b8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4e5db4e4207e21c38c07640d44005dab022f1b8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs?ref=e4e5db4e4207e21c38c07640d44005dab022f1b8", "patch": "@@ -18,22 +18,24 @@ pub enum GenericParamDefKind {\n         object_lifetime_default: ObjectLifetimeDefault,\n         synthetic: Option<hir::SyntheticTyParamKind>,\n     },\n-    Const,\n+    Const {\n+        has_default: bool,\n+    },\n }\n \n impl GenericParamDefKind {\n     pub fn descr(&self) -> &'static str {\n         match self {\n             GenericParamDefKind::Lifetime => \"lifetime\",\n             GenericParamDefKind::Type { .. } => \"type\",\n-            GenericParamDefKind::Const => \"constant\",\n+            GenericParamDefKind::Const { .. } => \"constant\",\n         }\n     }\n     pub fn to_ord(&self, tcx: TyCtxt<'_>) -> ast::ParamKindOrd {\n         match self {\n             GenericParamDefKind::Lifetime => ast::ParamKindOrd::Lifetime,\n             GenericParamDefKind::Type { .. } => ast::ParamKindOrd::Type,\n-            GenericParamDefKind::Const => {\n+            GenericParamDefKind::Const { .. } => {\n                 ast::ParamKindOrd::Const { unordered: tcx.features().const_generics }\n             }\n         }\n@@ -105,7 +107,7 @@ impl<'tcx> Generics {\n             match param.kind {\n                 GenericParamDefKind::Lifetime => own_counts.lifetimes += 1,\n                 GenericParamDefKind::Type { .. } => own_counts.types += 1,\n-                GenericParamDefKind::Const => own_counts.consts += 1,\n+                GenericParamDefKind::Const { .. } => own_counts.consts += 1,\n             }\n         }\n \n@@ -118,12 +120,10 @@ impl<'tcx> Generics {\n         for param in &self.params {\n             match param.kind {\n                 GenericParamDefKind::Lifetime => (),\n-                GenericParamDefKind::Type { has_default, .. } => {\n+                GenericParamDefKind::Type { has_default, .. } |\n+                GenericParamDefKind::Const { has_default } => {\n                     own_defaults.types += has_default as usize;\n                 }\n-                GenericParamDefKind::Const => {\n-                    // FIXME(const_generics:defaults)\n-                }\n             }\n         }\n \n@@ -146,7 +146,7 @@ impl<'tcx> Generics {\n     pub fn own_requires_monomorphization(&self) -> bool {\n         for param in &self.params {\n             match param.kind {\n-                GenericParamDefKind::Type { .. } | GenericParamDefKind::Const => return true,\n+                GenericParamDefKind::Type { .. } | GenericParamDefKind::Const { .. } => return true,\n                 GenericParamDefKind::Lifetime => {}\n             }\n         }\n@@ -189,7 +189,7 @@ impl<'tcx> Generics {\n     pub fn const_param(&'tcx self, param: &ParamConst, tcx: TyCtxt<'tcx>) -> &GenericParamDef {\n         let param = self.param_at(param.index as usize, tcx);\n         match param.kind {\n-            GenericParamDefKind::Const => param,\n+            GenericParamDefKind::Const { .. } => param,\n             _ => bug!(\"expected const parameter, but found another generic parameter\"),\n         }\n     }"}, {"sha": "f61b6946985e5831f230a28bb273da7fd20e0e0c", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4e5db4e4207e21c38c07640d44005dab022f1b8/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4e5db4e4207e21c38c07640d44005dab022f1b8/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=e4e5db4e4207e21c38c07640d44005dab022f1b8", "patch": "@@ -593,7 +593,7 @@ fn polymorphize<'tcx>(\n                 },\n \n             // Simple case: If parameter is a const or type parameter..\n-            ty::GenericParamDefKind::Const | ty::GenericParamDefKind::Type { .. } if\n+            ty::GenericParamDefKind::Const { .. } | ty::GenericParamDefKind::Type { .. } if\n                 // ..and is within range and unused..\n                 unused.contains(param.index).unwrap_or(false) =>\n                     // ..then use the identity for this parameter."}, {"sha": "ad323df8a69c13a7abc9b790b97f7ec5e17f8ab8", "filename": "compiler/rustc_middle/src/ty/print/mod.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e4e5db4e4207e21c38c07640d44005dab022f1b8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4e5db4e4207e21c38c07640d44005dab022f1b8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs?ref=e4e5db4e4207e21c38c07640d44005dab022f1b8", "patch": "@@ -193,17 +193,22 @@ pub trait Printer<'tcx>: Sized {\n             .params\n             .iter()\n             .rev()\n-            .take_while(|param| {\n-                match param.kind {\n-                    ty::GenericParamDefKind::Lifetime => false,\n-                    ty::GenericParamDefKind::Type { has_default, .. } => {\n-                        has_default\n-                            && substs[param.index as usize]\n-                                == GenericArg::from(\n-                                    self.tcx().type_of(param.def_id).subst(self.tcx(), substs),\n-                                )\n-                    }\n-                    ty::GenericParamDefKind::Const => false, // FIXME(const_generics_defaults)\n+            .take_while(|param| match param.kind {\n+                ty::GenericParamDefKind::Lifetime => false,\n+                ty::GenericParamDefKind::Type { has_default, .. } => {\n+                    has_default\n+                        && substs[param.index as usize]\n+                            == GenericArg::from(\n+                                self.tcx().type_of(param.def_id).subst(self.tcx(), substs),\n+                            )\n+                }\n+                ty::GenericParamDefKind::Const { has_default } => {\n+                    has_default\n+                        && substs[param.index as usize]\n+                            == GenericArg::from(crate::ty::Const::from_anon_const(\n+                                self.tcx(),\n+                                param.def_id.expect_local(),\n+                            ))\n                 }\n             })\n             .count();"}, {"sha": "c5c701082e66c89665d91e422f7b647b307687fd", "filename": "compiler/rustc_mir/src/monomorphize/collector.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e4e5db4e4207e21c38c07640d44005dab022f1b8/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4e5db4e4207e21c38c07640d44005dab022f1b8/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs?ref=e4e5db4e4207e21c38c07640d44005dab022f1b8", "patch": "@@ -1175,7 +1175,8 @@ fn create_mono_items_for_default_impls<'tcx>(\n                     let substs =\n                         InternalSubsts::for_item(tcx, method.def_id, |param, _| match param.kind {\n                             GenericParamDefKind::Lifetime => tcx.lifetimes.re_erased.into(),\n-                            GenericParamDefKind::Type { .. } | GenericParamDefKind::Const => {\n+                            GenericParamDefKind::Type { .. }\n+                            | GenericParamDefKind::Const { .. } => {\n                                 trait_ref.substs[param.index as usize]\n                             }\n                         });"}, {"sha": "9ba9524ee1a08f8b7b7624cda84cb4f0b2888496", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e4e5db4e4207e21c38c07640d44005dab022f1b8/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4e5db4e4207e21c38c07640d44005dab022f1b8/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=e4e5db4e4207e21c38c07640d44005dab022f1b8", "patch": "@@ -928,8 +928,13 @@ impl ReachEverythingInTheInterfaceVisitor<'_, 'tcx> {\n                         self.visit(self.ev.tcx.type_of(param.def_id));\n                     }\n                 }\n-                GenericParamDefKind::Const => {\n+                GenericParamDefKind::Const { has_default, .. } => {\n                     self.visit(self.ev.tcx.type_of(param.def_id));\n+                    if has_default {\n+                        // how should the error case be handled here?\n+                        // let default_const = self.ev.tcx.const_eval_poly(param.def_id).unwrap();\n+                        // self.visit(default_const);\n+                    }\n                 }\n             }\n         }\n@@ -1741,7 +1746,7 @@ impl SearchInterfaceForPrivateItemsVisitor<'tcx> {\n                         self.visit(self.tcx.type_of(param.def_id));\n                     }\n                 }\n-                GenericParamDefKind::Const => {\n+                GenericParamDefKind::Const { .. } => {\n                     self.visit(self.tcx.type_of(param.def_id));\n                 }\n             }"}, {"sha": "85faa961b149273db2ecca0fa503c6068384ff46", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e4e5db4e4207e21c38c07640d44005dab022f1b8/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4e5db4e4207e21c38c07640d44005dab022f1b8/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=e4e5db4e4207e21c38c07640d44005dab022f1b8", "patch": "@@ -616,6 +616,7 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                     self.visit_ty(ty);\n                     self.ribs[TypeNS].pop().unwrap();\n                     self.ribs[ValueNS].pop().unwrap();\n+                    // FIXME(const_generics:default) do something with default here?\n                 }\n             }\n         }"}, {"sha": "744945c5b0ffb220aaa98fc4de1efb8a4540d4cd", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4e5db4e4207e21c38c07640d44005dab022f1b8/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4e5db4e4207e21c38c07640d44005dab022f1b8/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=e4e5db4e4207e21c38c07640d44005dab022f1b8", "patch": "@@ -2004,7 +2004,9 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                             GenericParamDefKind::Type { object_lifetime_default, .. } => {\n                                 Some(object_lifetime_default)\n                             }\n-                            GenericParamDefKind::Lifetime | GenericParamDefKind::Const => None,\n+                            GenericParamDefKind::Lifetime | GenericParamDefKind::Const { .. } => {\n+                                None\n+                            }\n                         })\n                         .collect()\n                 })"}, {"sha": "c3bc1c191ff09bdcdd6a4912560427153bd68959", "filename": "compiler/rustc_save_analysis/src/sig.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e4e5db4e4207e21c38c07640d44005dab022f1b8/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4e5db4e4207e21c38c07640d44005dab022f1b8/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs?ref=e4e5db4e4207e21c38c07640d44005dab022f1b8", "patch": "@@ -614,11 +614,12 @@ impl<'hir> Sig for hir::Generics<'hir> {\n                 start: offset + text.len(),\n                 end: offset + text.len() + param_text.as_str().len(),\n             });\n-            if let hir::GenericParamKind::Const { ref ty, ref default } = param.kind {\n+            if let hir::GenericParamKind::Const { ref ty, default } = param.kind {\n                 param_text.push_str(\": \");\n                 param_text.push_str(&ty_to_string(&ty));\n-                if let Some(ref _default) = default {\n-                    // FIXME(const_generics_defaults): push the `default` value here\n+                if let Some(default) = default {\n+                    param_text.push_str(\" = \");\n+                    param_text.push_str(&id_to_string(&scx.tcx.hir(), default.hir_id));\n                 }\n             }\n             if !param.bounds.is_empty() {"}, {"sha": "116519855d77664ab30ad6566dd3f17e31244c5d", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e4e5db4e4207e21c38c07640d44005dab022f1b8/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4e5db4e4207e21c38c07640d44005dab022f1b8/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=e4e5db4e4207e21c38c07640d44005dab022f1b8", "patch": "@@ -384,6 +384,7 @@ symbols! {\n         const_fn_fn_ptr_basics,\n         const_fn_transmute,\n         const_fn_union,\n+        const_generic_defaults,\n         const_generics,\n         const_generics_defaults,\n         const_if_match,"}, {"sha": "cecdcc978960983ceb833825db45fb1a948140a4", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4e5db4e4207e21c38c07640d44005dab022f1b8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4e5db4e4207e21c38c07640d44005dab022f1b8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=e4e5db4e4207e21c38c07640d44005dab022f1b8", "patch": "@@ -176,7 +176,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n         for param in generics.params.iter() {\n             let value = match param.kind {\n-                GenericParamDefKind::Type { .. } | GenericParamDefKind::Const => {\n+                GenericParamDefKind::Type { .. } | GenericParamDefKind::Const { .. } => {\n                     trait_ref.substs[param.index as usize].to_string()\n                 }\n                 GenericParamDefKind::Lifetime => continue,"}, {"sha": "f26eb159105d710ee34976062a9efba1462e6607", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4e5db4e4207e21c38c07640d44005dab022f1b8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4e5db4e4207e21c38c07640d44005dab022f1b8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=e4e5db4e4207e21c38c07640d44005dab022f1b8", "patch": "@@ -483,7 +483,7 @@ fn vtable_methods<'tcx>(\n             let substs = trait_ref.map_bound(|trait_ref| {\n                 InternalSubsts::for_item(tcx, def_id, |param, _| match param.kind {\n                     GenericParamDefKind::Lifetime => tcx.lifetimes.re_erased.into(),\n-                    GenericParamDefKind::Type { .. } | GenericParamDefKind::Const => {\n+                    GenericParamDefKind::Type { .. } | GenericParamDefKind::Const { .. } => {\n                         trait_ref.substs[param.index as usize]\n                     }\n                 })"}, {"sha": "209fd83b3ab3467caf30665072f510088acf139d", "filename": "compiler/rustc_trait_selection/src/traits/on_unimplemented.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4e5db4e4207e21c38c07640d44005dab022f1b8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4e5db4e4207e21c38c07640d44005dab022f1b8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs?ref=e4e5db4e4207e21c38c07640d44005dab022f1b8", "patch": "@@ -337,7 +337,7 @@ impl<'tcx> OnUnimplementedFormatString {\n             .iter()\n             .filter_map(|param| {\n                 let value = match param.kind {\n-                    GenericParamDefKind::Type { .. } | GenericParamDefKind::Const => {\n+                    GenericParamDefKind::Type { .. } | GenericParamDefKind::Const { .. } => {\n                         trait_ref.substs[param.index as usize].to_string()\n                     }\n                     GenericParamDefKind::Lifetime => return None,"}, {"sha": "5c0cb2fb8357896309984c74d36913274f2c5bc0", "filename": "compiler/rustc_traits/src/chalk/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4e5db4e4207e21c38c07640d44005dab022f1b8/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4e5db4e4207e21c38c07640d44005dab022f1b8/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs?ref=e4e5db4e4207e21c38c07640d44005dab022f1b8", "patch": "@@ -739,7 +739,7 @@ fn bound_vars_for_item(tcx: TyCtxt<'tcx>, def_id: DefId) -> SubstsRef<'tcx> {\n             tcx.mk_region(ty::RegionKind::ReLateBound(ty::INNERMOST, br)).into()\n         }\n \n-        ty::GenericParamDefKind::Const => tcx\n+        ty::GenericParamDefKind::Const { .. } => tcx\n             .mk_const(ty::Const {\n                 val: ty::ConstKind::Bound(ty::INNERMOST, ty::BoundVar::from(param.index)),\n                 ty: tcx.type_of(param.def_id),"}, {"sha": "604611406afe630dd5195bd20470266d6ecfa7c2", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e4e5db4e4207e21c38c07640d44005dab022f1b8/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4e5db4e4207e21c38c07640d44005dab022f1b8/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=e4e5db4e4207e21c38c07640d44005dab022f1b8", "patch": "@@ -64,7 +64,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     kind: hir::TyKind::Path(rustc_hir::QPath::Resolved(_, path)),\n                     ..\n                 }),\n-                GenericParamDefKind::Const,\n+                GenericParamDefKind::Const { .. },\n             ) => match path.res {\n                 Res::Err => {\n                     add_braces_suggestion(arg, &mut err);\n@@ -93,7 +93,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             },\n             (\n                 GenericArg::Type(hir::Ty { kind: hir::TyKind::Path(_), .. }),\n-                GenericParamDefKind::Const,\n+                GenericParamDefKind::Const { .. },\n             ) => add_braces_suggestion(arg, &mut err),\n             (\n                 GenericArg::Type(hir::Ty { kind: hir::TyKind::Array(_, len), .. }),\n@@ -236,7 +236,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         match (arg, &param.kind, arg_count.explicit_late_bound) {\n                             (GenericArg::Lifetime(_), GenericParamDefKind::Lifetime, _)\n                             | (GenericArg::Type(_), GenericParamDefKind::Type { .. }, _)\n-                            | (GenericArg::Const(_), GenericParamDefKind::Const, _) => {\n+                            | (GenericArg::Const(_), GenericParamDefKind::Const { .. }, _) => {\n                                 substs.push(ctx.provided_kind(param, arg));\n                                 args.next();\n                                 params.next();\n@@ -282,7 +282,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                                                     GenericParamDefKind::Type { .. } => {\n                                                         ParamKindOrd::Type\n                                                     }\n-                                                    GenericParamDefKind::Const => {\n+                                                    GenericParamDefKind::Const { .. } => {\n                                                         ParamKindOrd::Const {\n                                                             unordered: tcx\n                                                                 .features()"}, {"sha": "34e5ab90733712f02c1c1fadf8fba489e15adf17", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e4e5db4e4207e21c38c07640d44005dab022f1b8/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4e5db4e4207e21c38c07640d44005dab022f1b8/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=e4e5db4e4207e21c38c07640d44005dab022f1b8", "patch": "@@ -443,7 +443,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                             self.astconv.ast_ty_to_ty(&ty).into()\n                         }\n                     }\n-                    (GenericParamDefKind::Const, GenericArg::Const(ct)) => {\n+                    (GenericParamDefKind::Const { .. }, GenericArg::Const(ct)) => {\n                         ty::Const::from_opt_const_arg_anon_const(\n                             tcx,\n                             ty::WithOptConstParam {\n@@ -504,16 +504,34 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                             tcx.ty_error().into()\n                         }\n                     }\n-                    GenericParamDefKind::Const => {\n+                    GenericParamDefKind::Const { has_default } => {\n                         let ty = tcx.at(self.span).type_of(param.def_id);\n-                        // FIXME(const_generics_defaults)\n-                        if infer_args {\n+                        if !infer_args && has_default {\n+                            let c = ty::Const::from_anon_const(tcx, param.def_id.expect_local());\n+                            ty::subst::GenericArg::from(c)\n+                        } else if infer_args {\n+                            self.astconv.ct_infer(ty, Some(param), self.span).into()\n+                        } else {\n+                            // We've already errored above about the mismatch.\n+                            tcx.const_error(ty).into()\n+                        }\n+                        /*\n+                        if !infer_args && has_default {\n+                            /*\n+                            if default_needs_object_self(param) {\n+                                missing_type_params.push(param.name.to_string());\n+                                tcx.const_error(ty).into()\n+                            } else {\n+                            }\n+                            */\n+                        } else if infer_args {\n                             // No const parameters were provided, we can infer all.\n                             self.astconv.ct_infer(ty, Some(param), self.span).into()\n                         } else {\n                             // We've already errored above about the mismatch.\n                             tcx.const_error(ty).into()\n                         }\n+                        */\n                     }\n                 }\n             }"}, {"sha": "ddb11b9f3b16bf426a6581cfc3edc0cd47c152eb", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4e5db4e4207e21c38c07640d44005dab022f1b8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4e5db4e4207e21c38c07640d44005dab022f1b8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=e4e5db4e4207e21c38c07640d44005dab022f1b8", "patch": "@@ -792,11 +792,11 @@ fn compare_synthetic_generics<'tcx>(\n     let trait_m_generics = tcx.generics_of(trait_m.def_id);\n     let impl_m_type_params = impl_m_generics.params.iter().filter_map(|param| match param.kind {\n         GenericParamDefKind::Type { synthetic, .. } => Some((param.def_id, synthetic)),\n-        GenericParamDefKind::Lifetime | GenericParamDefKind::Const => None,\n+        GenericParamDefKind::Lifetime | GenericParamDefKind::Const { .. } => None,\n     });\n     let trait_m_type_params = trait_m_generics.params.iter().filter_map(|param| match param.kind {\n         GenericParamDefKind::Type { synthetic, .. } => Some((param.def_id, synthetic)),\n-        GenericParamDefKind::Lifetime | GenericParamDefKind::Const => None,\n+        GenericParamDefKind::Lifetime | GenericParamDefKind::Const { .. } => None,\n     });\n     for ((impl_def_id, impl_synthetic), (trait_def_id, trait_synthetic)) in\n         impl_m_type_params.zip(trait_m_type_params)"}, {"sha": "a5733c9637d4f122f6a7fbf81c8dc391e27dace7", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e4e5db4e4207e21c38c07640d44005dab022f1b8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4e5db4e4207e21c38c07640d44005dab022f1b8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=e4e5db4e4207e21c38c07640d44005dab022f1b8", "patch": "@@ -1405,7 +1405,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     (GenericParamDefKind::Type { .. }, GenericArg::Type(ty)) => {\n                         self.fcx.to_ty(ty).into()\n                     }\n-                    (GenericParamDefKind::Const, GenericArg::Const(ct)) => {\n+                    (GenericParamDefKind::Const { .. }, GenericArg::Const(ct)) => {\n                         self.fcx.const_arg_to_const(&ct.value, param.def_id).into()\n                     }\n                     _ => unreachable!(),\n@@ -1443,10 +1443,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             self.fcx.var_for_def(self.span, param)\n                         }\n                     }\n-                    GenericParamDefKind::Const => {\n-                        // FIXME(const_generics_defaults)\n+                    GenericParamDefKind::Const { has_default, .. } => {\n+                        if infer_args || !has_default {\n+                            return self.fcx.var_for_def(self.span, param);\n+                        }\n+                        // FIXME(const_generics:defaults)\n                         // No const parameters were provided, we have to infer them.\n-                        self.fcx.var_for_def(self.span, param)\n+                        todo!()\n                     }\n                 }\n             }"}, {"sha": "731a72ff024dcbfa56a9ae9404f48ef888628ce4", "filename": "compiler/rustc_typeck/src/check/method/confirm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4e5db4e4207e21c38c07640d44005dab022f1b8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4e5db4e4207e21c38c07640d44005dab022f1b8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs?ref=e4e5db4e4207e21c38c07640d44005dab022f1b8", "patch": "@@ -358,7 +358,7 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n                     (GenericParamDefKind::Type { .. }, GenericArg::Type(ty)) => {\n                         self.cfcx.to_ty(ty).into()\n                     }\n-                    (GenericParamDefKind::Const, GenericArg::Const(ct)) => {\n+                    (GenericParamDefKind::Const { .. }, GenericArg::Const(ct)) => {\n                         self.cfcx.const_arg_to_const(&ct.value, param.def_id).into()\n                     }\n                     _ => unreachable!(),"}, {"sha": "d6fa6bf0067f94b5f6707dba0af95a7cdda5218e", "filename": "compiler/rustc_typeck/src/check/method/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4e5db4e4207e21c38c07640d44005dab022f1b8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4e5db4e4207e21c38c07640d44005dab022f1b8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs?ref=e4e5db4e4207e21c38c07640d44005dab022f1b8", "patch": "@@ -308,7 +308,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // Construct a trait-reference `self_ty : Trait<input_tys>`\n         let substs = InternalSubsts::for_item(self.tcx, trait_def_id, |param, _| {\n             match param.kind {\n-                GenericParamDefKind::Lifetime | GenericParamDefKind::Const => {}\n+                GenericParamDefKind::Lifetime | GenericParamDefKind::Const { .. } => {}\n                 GenericParamDefKind::Type { .. } => {\n                     if param.index == 0 {\n                         return self_ty.into();"}, {"sha": "0742549f8904ea40b4b1f3ecd1999620a6deb970", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4e5db4e4207e21c38c07640d44005dab022f1b8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4e5db4e4207e21c38c07640d44005dab022f1b8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=e4e5db4e4207e21c38c07640d44005dab022f1b8", "patch": "@@ -1700,7 +1700,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                             // In general, during probe we erase regions.\n                             self.tcx.lifetimes.re_erased.into()\n                         }\n-                        GenericParamDefKind::Type { .. } | GenericParamDefKind::Const => {\n+                        GenericParamDefKind::Type { .. } | GenericParamDefKind::Const { .. } => {\n                             self.var_for_def(self.span, param)\n                         }\n                     }"}, {"sha": "d257ea22dc1c915771cf109d27f71e1dc70e5e3b", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e4e5db4e4207e21c38c07640d44005dab022f1b8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4e5db4e4207e21c38c07640d44005dab022f1b8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=e4e5db4e4207e21c38c07640d44005dab022f1b8", "patch": "@@ -758,7 +758,7 @@ fn check_where_clauses<'tcx, 'fcx>(\n                 fcx.tcx.mk_param_from_def(param)\n             }\n \n-            GenericParamDefKind::Type { .. } => {\n+            GenericParamDefKind::Const { .. } | GenericParamDefKind::Type { .. } => {\n                 // If the param has a default, ...\n                 if is_our_default(param) {\n                     let default_ty = fcx.tcx.type_of(param.def_id);\n@@ -771,11 +771,6 @@ fn check_where_clauses<'tcx, 'fcx>(\n \n                 fcx.tcx.mk_param_from_def(param)\n             }\n-\n-            GenericParamDefKind::Const => {\n-                // FIXME(const_generics_defaults)\n-                fcx.tcx.mk_param_from_def(param)\n-            }\n         }\n     });\n "}, {"sha": "424e5ab900dbc1cdc4788db8777c07a1f4d1cd07", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4e5db4e4207e21c38c07640d44005dab022f1b8/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4e5db4e4207e21c38c07640d44005dab022f1b8/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=e4e5db4e4207e21c38c07640d44005dab022f1b8", "patch": "@@ -1549,13 +1549,13 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n             i += 1;\n             Some(param_def)\n         }\n-        GenericParamKind::Const { .. } => {\n+        GenericParamKind::Const { default, .. } => {\n             let param_def = ty::GenericParamDef {\n                 index: type_start + i as u32,\n                 name: param.name.ident().name,\n                 def_id: tcx.hir().local_def_id(param.hir_id).to_def_id(),\n                 pure_wrt_drop: param.pure_wrt_drop,\n-                kind: ty::GenericParamDefKind::Const,\n+                kind: ty::GenericParamDefKind::Const { has_default: default.is_some() },\n             };\n             i += 1;\n             Some(param_def)"}, {"sha": "b7f7b8355ff2b1c76c838d35e672966e4940e0df", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e4e5db4e4207e21c38c07640d44005dab022f1b8/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4e5db4e4207e21c38c07640d44005dab022f1b8/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=e4e5db4e4207e21c38c07640d44005dab022f1b8", "patch": "@@ -83,7 +83,8 @@ pub(super) fn opt_const_param_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<\n                     return generics\n                         .params\n                         .iter()\n-                        .filter(|param| matches!(param.kind, ty::GenericParamDefKind::Const))\n+                        .filter(|param| matches!(param.kind, ty::GenericParamDefKind::Const { ..\n+                        }))\n                         .nth(arg_index)\n                         .map(|param| param.def_id);\n                 }\n@@ -121,7 +122,7 @@ pub(super) fn opt_const_param_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<\n                 tcx.generics_of(type_dependent_def)\n                     .params\n                     .iter()\n-                    .filter(|param| matches!(param.kind, ty::GenericParamDefKind::Const))\n+                    .filter(|param| matches!(param.kind, ty::GenericParamDefKind::Const { .. }))\n                     .nth(idx)\n                     .map(|param| param.def_id)\n             }\n@@ -211,7 +212,7 @@ pub(super) fn opt_const_param_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<\n                 generics\n                     .params\n                     .iter()\n-                    .filter(|param| matches!(param.kind, ty::GenericParamDefKind::Const))\n+                    .filter(|param| matches!(param.kind, ty::GenericParamDefKind::Const { .. }))\n                     .nth(arg_index)\n                     .map(|param| param.def_id)\n             }"}, {"sha": "1240946860573bf88e96ad26651ae0fd156a399e", "filename": "compiler/rustc_typeck/src/impl_wf_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4e5db4e4207e21c38c07640d44005dab022f1b8/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4e5db4e4207e21c38c07640d44005dab022f1b8/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check.rs?ref=e4e5db4e4207e21c38c07640d44005dab022f1b8", "patch": "@@ -173,7 +173,7 @@ fn enforce_impl_params_are_constrained(\n                     );\n                 }\n             }\n-            ty::GenericParamDefKind::Const => {\n+            ty::GenericParamDefKind::Const { .. } => {\n                 let param_ct = ty::ParamConst::for_def(param);\n                 if !input_parameters.contains(&cgp::Parameter::from(param_ct)) {\n                     report_unused_parameter("}, {"sha": "1a4d88ced0e4599db0a310b7ba06d596522ca98a", "filename": "compiler/rustc_typeck/src/variance/solve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4e5db4e4207e21c38c07640d44005dab022f1b8/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fsolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4e5db4e4207e21c38c07640d44005dab022f1b8/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fsolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fsolve.rs?ref=e4e5db4e4207e21c38c07640d44005dab022f1b8", "patch": "@@ -78,7 +78,7 @@ impl<'a, 'tcx> SolveContext<'a, 'tcx> {\n \n         // Make all const parameters invariant.\n         for param in generics.params.iter() {\n-            if let ty::GenericParamDefKind::Const = param.kind {\n+            if let ty::GenericParamDefKind::Const { .. } = param.kind {\n                 variances[param.index as usize] = ty::Invariant;\n             }\n         }"}, {"sha": "b2286e7d5bd98e60da664a73a4451e7d3c5b2507", "filename": "src/test/ui/const-generics/defaults/const-default.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e4e5db4e4207e21c38c07640d44005dab022f1b8/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fconst-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4e5db4e4207e21c38c07640d44005dab022f1b8/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fconst-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fconst-default.rs?ref=e4e5db4e4207e21c38c07640d44005dab022f1b8", "patch": "@@ -0,0 +1,15 @@\n+// check-pass\n+\n+#![feature(const_generics)]\n+#![feature(const_generic_defaults)]\n+#![allow(incomplete_features)]\n+\n+\n+#[derive(Default)]\n+pub struct ConstDefault<const N: usize = 3> {\n+  items: [u32; N]\n+}\n+\n+pub fn main() {\n+  let s = ConstDefault::default();\n+}"}, {"sha": "e4044eaaa7cf37d0ca2181d83b1d554915af29d7", "filename": "src/test/ui/const-generics/min_const_generics/default_function_param.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e4e5db4e4207e21c38c07640d44005dab022f1b8/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_function_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4e5db4e4207e21c38c07640d44005dab022f1b8/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_function_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_function_param.rs?ref=e4e5db4e4207e21c38c07640d44005dab022f1b8", "patch": "@@ -1,3 +1,6 @@\n+#![feature(const_generic_defaults)]\n+#![feature(min_const_generics)]\n+\n fn foo<const SIZE: usize = 5>() {}\n //~^ ERROR default values for const generic parameters are experimental\n "}, {"sha": "c3581aca1cf4271c004063cd80fc3a05da710b34", "filename": "src/test/ui/const-generics/min_const_generics/default_trait_param.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4e5db4e4207e21c38c07640d44005dab022f1b8/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_trait_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4e5db4e4207e21c38c07640d44005dab022f1b8/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_trait_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_trait_param.rs?ref=e4e5db4e4207e21c38c07640d44005dab022f1b8", "patch": "@@ -1,4 +1,2 @@\n trait Foo<const KIND: bool = true> {}\n //~^ ERROR default values for const generic parameters are experimental\n-\n-fn main() {}"}, {"sha": "6ba314666e2e5bc37e774145448054065007f200", "filename": "src/test/ui/feature-gate/feature-gate-const_generic_defaults.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e4e5db4e4207e21c38c07640d44005dab022f1b8/src%2Ftest%2Fui%2Ffeature-gate%2Ffeature-gate-const_generic_defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4e5db4e4207e21c38c07640d44005dab022f1b8/src%2Ftest%2Fui%2Ffeature-gate%2Ffeature-gate-const_generic_defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Ffeature-gate-const_generic_defaults.rs?ref=e4e5db4e4207e21c38c07640d44005dab022f1b8", "patch": "@@ -0,0 +1,5 @@\n+#![feature(min_const_generics)]\n+#![crate_type=\"lib\"]\n+\n+struct A<const N: usize = 3>;\n+//~^ ERROR default values for"}, {"sha": "0b7140c0c0f80c7875ba37806d3492a42d998cec", "filename": "src/test/ui/feature-gate/feature-gate-const_generic_defaults.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e4e5db4e4207e21c38c07640d44005dab022f1b8/src%2Ftest%2Fui%2Ffeature-gate%2Ffeature-gate-const_generic_defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4e5db4e4207e21c38c07640d44005dab022f1b8/src%2Ftest%2Fui%2Ffeature-gate%2Ffeature-gate-const_generic_defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Ffeature-gate-const_generic_defaults.stderr?ref=e4e5db4e4207e21c38c07640d44005dab022f1b8", "patch": "@@ -0,0 +1,10 @@\n+error: default values for const generic parameters are unstable\n+  --> $DIR/feature-gate-const_generic_defaults.rs:4:27\n+   |\n+LL | struct A<const N: usize = 3>;\n+   |                           ^\n+   |\n+   = note: to enable them use #![feature(const_generic_defaults)]\n+\n+error: aborting due to previous error\n+"}, {"sha": "e202b5061a678dfc8cd418e8023ed25c620de753", "filename": "src/tools/clippy/clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e4e5db4e4207e21c38c07640d44005dab022f1b8/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4e5db4e4207e21c38c07640d44005dab022f1b8/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs?ref=e4e5db4e4207e21c38c07640d44005dab022f1b8", "patch": "@@ -408,6 +408,10 @@ pub fn eq_use_tree(l: &UseTree, r: &UseTree) -> bool {\n     eq_path(&l.prefix, &r.prefix) && eq_use_tree_kind(&l.kind, &r.kind)\n }\n \n+pub fn eq_anon_const(l: &AnonConst, r: &AnonConst) -> bool {\n+  eq_expr(&l.value, &r.value)\n+}\n+\n pub fn eq_use_tree_kind(l: &UseTreeKind, r: &UseTreeKind) -> bool {\n     use UseTreeKind::*;\n     match (l, r) {\n@@ -418,10 +422,6 @@ pub fn eq_use_tree_kind(l: &UseTreeKind, r: &UseTreeKind) -> bool {\n     }\n }\n \n-pub fn eq_anon_const(l: &AnonConst, r: &AnonConst) -> bool {\n-    eq_expr(&l.value, &r.value)\n-}\n-\n pub fn eq_defaultness(l: Defaultness, r: Defaultness) -> bool {\n     matches!(\n         (l, r),"}]}