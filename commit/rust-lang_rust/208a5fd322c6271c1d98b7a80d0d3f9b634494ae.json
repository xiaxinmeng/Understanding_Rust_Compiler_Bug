{"sha": "208a5fd322c6271c1d98b7a80d0d3f9b634494ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwOGE1ZmQzMjJjNjI3MWMxZDk4YjdhODBkMGQzZjliNjM0NDk0YWU=", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-09-04T00:10:52Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-09-04T00:10:52Z"}, "message": "Use `summary_opts()` for Markdown summaries\n\nIt was accidentally changed to use `opts()` in #86451.\n\nI also renamed `opts()` to `main_body_opts()` to make this kind of\naccidental change less likely.", "tree": {"sha": "3d50873bf3165bc688e36fd56cb6121ae5cdfffb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d50873bf3165bc688e36fd56cb6121ae5cdfffb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/208a5fd322c6271c1d98b7a80d0d3f9b634494ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/208a5fd322c6271c1d98b7a80d0d3f9b634494ae", "html_url": "https://github.com/rust-lang/rust/commit/208a5fd322c6271c1d98b7a80d0d3f9b634494ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/208a5fd322c6271c1d98b7a80d0d3f9b634494ae/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fcce644119cf4e8e36001368e514bb5ed67cb855", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcce644119cf4e8e36001368e514bb5ed67cb855", "html_url": "https://github.com/rust-lang/rust/commit/fcce644119cf4e8e36001368e514bb5ed67cb855"}], "stats": {"total": 25, "additions": 13, "deletions": 12}, "files": [{"sha": "ae2a5ac440357573d3c7574bd5eeec07058ec3b5", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/208a5fd322c6271c1d98b7a80d0d3f9b634494ae/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/208a5fd322c6271c1d98b7a80d0d3f9b634494ae/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=208a5fd322c6271c1d98b7a80d0d3f9b634494ae", "patch": "@@ -48,15 +48,15 @@ use pulldown_cmark::{\n mod tests;\n \n /// Options for rendering Markdown in the main body of documentation.\n-pub(crate) fn opts() -> Options {\n+pub(crate) fn main_body_opts() -> Options {\n     Options::ENABLE_TABLES\n         | Options::ENABLE_FOOTNOTES\n         | Options::ENABLE_STRIKETHROUGH\n         | Options::ENABLE_TASKLISTS\n         | Options::ENABLE_SMART_PUNCTUATION\n }\n \n-/// A subset of [`opts()`] used for rendering summaries.\n+/// A subset of [`main_body_opts()`] used for rendering summaries.\n pub(crate) fn summary_opts() -> Options {\n     Options::ENABLE_STRIKETHROUGH | Options::ENABLE_SMART_PUNCTUATION | Options::ENABLE_TABLES\n }\n@@ -975,7 +975,7 @@ impl Markdown<'_> {\n             }\n         };\n \n-        let p = Parser::new_with_broken_link_callback(md, opts(), Some(&mut replacer));\n+        let p = Parser::new_with_broken_link_callback(md, main_body_opts(), Some(&mut replacer));\n         let p = p.into_offset_iter();\n \n         let mut s = String::with_capacity(md.len() * 3 / 2);\n@@ -994,7 +994,7 @@ impl MarkdownWithToc<'_> {\n     crate fn into_string(self) -> String {\n         let MarkdownWithToc(md, mut ids, codes, edition, playground) = self;\n \n-        let p = Parser::new_ext(md, opts()).into_offset_iter();\n+        let p = Parser::new_ext(md, main_body_opts()).into_offset_iter();\n \n         let mut s = String::with_capacity(md.len() * 3 / 2);\n \n@@ -1019,7 +1019,7 @@ impl MarkdownHtml<'_> {\n         if md.is_empty() {\n             return String::new();\n         }\n-        let p = Parser::new_ext(md, opts()).into_offset_iter();\n+        let p = Parser::new_ext(md, main_body_opts()).into_offset_iter();\n \n         // Treat inline HTML as plain text.\n         let p = p.map(|event| match event.0 {\n@@ -1093,7 +1093,7 @@ fn markdown_summary_with_limit(\n         }\n     };\n \n-    let p = Parser::new_with_broken_link_callback(md, opts(), Some(&mut replacer));\n+    let p = Parser::new_with_broken_link_callback(md, summary_opts(), Some(&mut replacer));\n     let mut p = LinkReplacer::new(p, link_names);\n \n     let mut buf = HtmlWithLimit::new(length_limit);\n@@ -1240,7 +1240,8 @@ crate fn markdown_links(md: &str) -> Vec<MarkdownLink> {\n         });\n         None\n     };\n-    let p = Parser::new_with_broken_link_callback(md, opts(), Some(&mut push)).into_offset_iter();\n+    let p = Parser::new_with_broken_link_callback(md, main_body_opts(), Some(&mut push))\n+        .into_offset_iter();\n \n     // There's no need to thread an IdMap through to here because\n     // the IDs generated aren't going to be emitted anywhere.\n@@ -1279,7 +1280,7 @@ crate fn rust_code_blocks(md: &str, extra_info: &ExtraInfo<'_>) -> Vec<RustCodeB\n         return code_blocks;\n     }\n \n-    let mut p = Parser::new_ext(md, opts()).into_offset_iter();\n+    let mut p = Parser::new_ext(md, main_body_opts()).into_offset_iter();\n \n     while let Some((event, offset)) = p.next() {\n         if let Event::Start(Tag::CodeBlock(syntax)) = event {"}, {"sha": "37faa6742927a2860a543ab97f36f5a42dd92ce7", "filename": "src/librustdoc/passes/bare_urls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/208a5fd322c6271c1d98b7a80d0d3f9b634494ae/src%2Flibrustdoc%2Fpasses%2Fbare_urls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/208a5fd322c6271c1d98b7a80d0d3f9b634494ae/src%2Flibrustdoc%2Fpasses%2Fbare_urls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fbare_urls.rs?ref=208a5fd322c6271c1d98b7a80d0d3f9b634494ae", "patch": "@@ -2,7 +2,7 @@ use super::Pass;\n use crate::clean::*;\n use crate::core::DocContext;\n use crate::fold::DocFolder;\n-use crate::html::markdown::opts;\n+use crate::html::markdown::main_body_opts;\n use core::ops::Range;\n use pulldown_cmark::{Event, Parser, Tag};\n use regex::Regex;\n@@ -83,7 +83,7 @@ impl<'a, 'tcx> DocFolder for BareUrlsLinter<'a, 'tcx> {\n                 });\n             };\n \n-            let mut p = Parser::new_ext(&dox, opts()).into_offset_iter();\n+            let mut p = Parser::new_ext(&dox, main_body_opts()).into_offset_iter();\n \n             while let Some((event, range)) = p.next() {\n                 match event {"}, {"sha": "a0144a5298eba24b3d2cc94f0e6d562473c00d08", "filename": "src/librustdoc/passes/html_tags.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/208a5fd322c6271c1d98b7a80d0d3f9b634494ae/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/208a5fd322c6271c1d98b7a80d0d3f9b634494ae/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs?ref=208a5fd322c6271c1d98b7a80d0d3f9b634494ae", "patch": "@@ -2,7 +2,7 @@ use super::Pass;\n use crate::clean::*;\n use crate::core::DocContext;\n use crate::fold::DocFolder;\n-use crate::html::markdown::opts;\n+use crate::html::markdown::main_body_opts;\n use core::ops::Range;\n use pulldown_cmark::{Event, Parser, Tag};\n use std::iter::Peekable;\n@@ -192,7 +192,7 @@ impl<'a, 'tcx> DocFolder for InvalidHtmlTagsLinter<'a, 'tcx> {\n             let mut is_in_comment = None;\n             let mut in_code_block = false;\n \n-            let p = Parser::new_ext(&dox, opts()).into_offset_iter();\n+            let p = Parser::new_ext(&dox, main_body_opts()).into_offset_iter();\n \n             for (event, range) in p {\n                 match event {"}]}