{"sha": "464cce99f1fe09db35d56ca07ae4c05f591eb651", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2NGNjZTk5ZjFmZTA5ZGIzNWQ1NmNhMDdhZTRjMDVmNTkxZWI2NTE=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-11-23T11:18:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-11-23T11:18:09Z"}, "message": "Rollup merge of #37442 - estebank:cast-deref-hint, r=jonathandturner\n\nProvide hint when cast needs a dereference\n\nFor a given code:\n\n``` rust\nvec![0.0].iter().map(|s| s as i16).collect::<Vec<i16>>();\n```\n\ndisplay:\n\n``` nocode\nerror: casting `&f64` as `i16` is invalid\n --> file3.rs:2:35\n  |\n2 |     vec![0.0].iter().map(|s| s as i16).collect::<Vec<i16>>();\n  |                              -    ^^^\n  |                              |\n  |                              did you mean `*s`?\n```\n\ninstead of:\n\n``` nocode\nerror: casting `&f64` as `i16` is invalid\n --> <anon>:2:30\n  |\n2 |     vec![0.0].iter().map(|s| s as i16).collect();\n  |                              ^^^^^^^^\n  |\n  = help: cast through a raw pointer first\n```\n\nFixes #37338.", "tree": {"sha": "f4e030f5660d678509d4ba5c44d8824c8e1ca259", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4e030f5660d678509d4ba5c44d8824c8e1ca259"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/464cce99f1fe09db35d56ca07ae4c05f591eb651", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/464cce99f1fe09db35d56ca07ae4c05f591eb651", "html_url": "https://github.com/rust-lang/rust/commit/464cce99f1fe09db35d56ca07ae4c05f591eb651", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/464cce99f1fe09db35d56ca07ae4c05f591eb651/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ccdc26fd42dfccc5832114baa275f0936738095a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccdc26fd42dfccc5832114baa275f0936738095a", "html_url": "https://github.com/rust-lang/rust/commit/ccdc26fd42dfccc5832114baa275f0936738095a"}, {"sha": "ec24442e60bce2605a64ac3aef5784510e4a5fd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec24442e60bce2605a64ac3aef5784510e4a5fd5", "html_url": "https://github.com/rust-lang/rust/commit/ec24442e60bce2605a64ac3aef5784510e4a5fd5"}], "stats": {"total": 49, "additions": 47, "deletions": 2}, "files": [{"sha": "5839c606566c31c73ea834d54d3615d7f840a755", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 42, "deletions": 2, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/464cce99f1fe09db35d56ca07ae4c05f591eb651/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cce99f1fe09db35d56ca07ae4c05f591eb651/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=464cce99f1fe09db35d56ca07ae4c05f591eb651", "patch": "@@ -102,6 +102,7 @@ enum CastError {\n     /// Cast of thin to fat raw ptr (eg. `*const () as *const [u8]`)\n     SizedUnsizedCast,\n     IllegalCast,\n+    NeedDeref,\n     NeedViaPtr,\n     NeedViaThinPtr,\n     NeedViaInt,\n@@ -138,6 +139,25 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n \n     fn report_cast_error(&self, fcx: &FnCtxt<'a, 'gcx, 'tcx>, e: CastError) {\n         match e {\n+            CastError::NeedDeref => {\n+                let cast_ty = fcx.ty_to_string(self.cast_ty);\n+                let mut err = fcx.type_error_struct(self.cast_span,\n+                                       |actual| {\n+                                           format!(\"casting `{}` as `{}` is invalid\",\n+                                                   actual,\n+                                                   cast_ty)\n+                                       },\n+                                       self.expr_ty);\n+                err.span_label(self.expr.span,\n+                               &format!(\"cannot cast `{}` as `{}`\",\n+                                        fcx.ty_to_string(self.expr_ty),\n+                                        cast_ty));\n+                if let Ok(snippet) = fcx.sess().codemap().span_to_snippet(self.expr.span) {\n+                    err.span_label(self.expr.span,\n+                                   &format!(\"did you mean `*{}`?\", snippet));\n+                }\n+                err.emit();\n+            }\n             CastError::NeedViaThinPtr |\n             CastError::NeedViaPtr => {\n                 let mut err = fcx.type_error_struct(self.span,\n@@ -390,8 +410,28 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n             (Ptr(m_e), Ptr(m_c)) => self.check_ptr_ptr_cast(fcx, m_e, m_c), // ptr-ptr-cast\n             (Ptr(m_expr), Int(_)) => self.check_ptr_addr_cast(fcx, m_expr), // ptr-addr-cast\n             (FnPtr, Int(_)) => Ok(CastKind::FnPtrAddrCast),\n-            (RPtr(_), Int(_)) |\n-            (RPtr(_), Float) => Err(CastError::NeedViaPtr),\n+            (RPtr(p), Int(_)) |\n+            (RPtr(p), Float) => {\n+                match p.ty.sty {\n+                    ty::TypeVariants::TyInt(_) |\n+                    ty::TypeVariants::TyUint(_) |\n+                    ty::TypeVariants::TyFloat(_) => {\n+                        Err(CastError::NeedDeref)\n+                    }\n+                    ty::TypeVariants::TyInfer(t) => {\n+                        match t {\n+                            ty::InferTy::IntVar(_) |\n+                            ty::InferTy::FloatVar(_) |\n+                            ty::InferTy::FreshIntTy(_) |\n+                            ty::InferTy::FreshFloatTy(_) => {\n+                                Err(CastError::NeedDeref)\n+                            }\n+                            _ => Err(CastError::NeedViaPtr),\n+                        }\n+                    }\n+                    _ => Err(CastError::NeedViaPtr),\n+                }\n+            }\n             // * -> ptr\n             (Int(_), Ptr(mt)) => self.check_addr_ptr_cast(fcx, mt), // addr-ptr-cast\n             (FnPtr, Ptr(mt)) => self.check_fptr_ptr_cast(fcx, mt),"}, {"sha": "b98f464c902278443f7ecec8231ea4efc6c6508b", "filename": "src/test/compile-fail/cast-rfc0401.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/464cce99f1fe09db35d56ca07ae4c05f591eb651/src%2Ftest%2Fcompile-fail%2Fcast-rfc0401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cce99f1fe09db35d56ca07ae4c05f591eb651/src%2Ftest%2Fcompile-fail%2Fcast-rfc0401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcast-rfc0401.rs?ref=464cce99f1fe09db35d56ca07ae4c05f591eb651", "patch": "@@ -115,4 +115,9 @@ fn main()\n     let _ = cf as *const Bar;\n     //~^ ERROR casting\n     //~^^ NOTE vtable kinds\n+\n+    vec![0.0].iter().map(|s| s as f32).collect::<Vec<f32>>();\n+    //~^ ERROR casting `&{float}` as `f32` is invalid\n+    //~| NOTE cannot cast `&{float}` as `f32`\n+    //~| NOTE did you mean `*s`?\n }"}]}