{"sha": "2794cc7b00658e96e2fab405f1bb5aaf1d18c2ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3OTRjYzdiMDA2NThlOTZlMmZhYjQwNWYxYmI1YWFmMWQxOGMyZWY=", "commit": {"author": {"name": "ivan770", "email": "leshenko.ivan770@gmail.com", "date": "2021-03-19T14:43:47Z"}, "committer": {"name": "ivan770", "email": "leshenko.ivan770@gmail.com", "date": "2021-03-19T14:43:47Z"}, "message": "Added more movable lists", "tree": {"sha": "c22d2b71ab7907a28239636d18a9cd51b455dfc0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c22d2b71ab7907a28239636d18a9cd51b455dfc0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2794cc7b00658e96e2fab405f1bb5aaf1d18c2ef", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEcPkYW+t8+2SKgl5T2MS9WuTZzE0FAmBUuKMACgkQ2MS9WuTZ\nzE1UIgf+I1MPQCUiwHIJVkpOqVAKZgTgphqm0tpNZkRJku2UQ9kEVTA7r2xWHKB4\nfkv1No8k/o7a52YR6xI8P4ld2lKK8pEK9Qq8AIeyKLjWhwxG05kUmcQTG7dwfc2p\nEmuWp4jrFqSEXUz1wIStAOwweh/WcUt7MDnA7RIhFgiP9UPhCFbwG8VKtsX0kfIj\nSeKktwpx6s6xYI8g2kmho2vZuefXGpKiYrdwfqxBmUUkpXpjvHUMxI0pGQNLaIJG\nN8eZHJuf9bCsys5f2ZOJwAqxOcac5ZsVcLPky0pCq6pxaqTxn81w8d11XgREq7rz\nrJuJJmDYwwe7i0MELWafl9/B69RlLw==\n=Ffwr\n-----END PGP SIGNATURE-----", "payload": "tree c22d2b71ab7907a28239636d18a9cd51b455dfc0\nparent 0a2d221d47e1113d8d73bb11d225c347bd83570b\nauthor ivan770 <leshenko.ivan770@gmail.com> 1616165027 +0200\ncommitter ivan770 <leshenko.ivan770@gmail.com> 1616165027 +0200\n\nAdded more movable lists\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2794cc7b00658e96e2fab405f1bb5aaf1d18c2ef", "html_url": "https://github.com/rust-lang/rust/commit/2794cc7b00658e96e2fab405f1bb5aaf1d18c2ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2794cc7b00658e96e2fab405f1bb5aaf1d18c2ef/comments", "author": {"login": "ivan770", "id": 14003886, "node_id": "MDQ6VXNlcjE0MDAzODg2", "avatar_url": "https://avatars.githubusercontent.com/u/14003886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ivan770", "html_url": "https://github.com/ivan770", "followers_url": "https://api.github.com/users/ivan770/followers", "following_url": "https://api.github.com/users/ivan770/following{/other_user}", "gists_url": "https://api.github.com/users/ivan770/gists{/gist_id}", "starred_url": "https://api.github.com/users/ivan770/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ivan770/subscriptions", "organizations_url": "https://api.github.com/users/ivan770/orgs", "repos_url": "https://api.github.com/users/ivan770/repos", "events_url": "https://api.github.com/users/ivan770/events{/privacy}", "received_events_url": "https://api.github.com/users/ivan770/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ivan770", "id": 14003886, "node_id": "MDQ6VXNlcjE0MDAzODg2", "avatar_url": "https://avatars.githubusercontent.com/u/14003886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ivan770", "html_url": "https://github.com/ivan770", "followers_url": "https://api.github.com/users/ivan770/followers", "following_url": "https://api.github.com/users/ivan770/following{/other_user}", "gists_url": "https://api.github.com/users/ivan770/gists{/gist_id}", "starred_url": "https://api.github.com/users/ivan770/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ivan770/subscriptions", "organizations_url": "https://api.github.com/users/ivan770/orgs", "repos_url": "https://api.github.com/users/ivan770/repos", "events_url": "https://api.github.com/users/ivan770/events{/privacy}", "received_events_url": "https://api.github.com/users/ivan770/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a2d221d47e1113d8d73bb11d225c347bd83570b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a2d221d47e1113d8d73bb11d225c347bd83570b", "html_url": "https://github.com/rust-lang/rust/commit/0a2d221d47e1113d8d73bb11d225c347bd83570b"}], "stats": {"total": 96, "additions": 95, "deletions": 1}, "files": [{"sha": "806fd58da6234f86a01c62717f68415fc29b60fc", "filename": "crates/ide/src/move_item.rs", "status": "modified", "additions": 95, "deletions": 1, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/2794cc7b00658e96e2fab405f1bb5aaf1d18c2ef/crates%2Fide%2Fsrc%2Fmove_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2794cc7b00658e96e2fab405f1bb5aaf1d18c2ef/crates%2Fide%2Fsrc%2Fmove_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fmove_item.rs?ref=2794cc7b00658e96e2fab405f1bb5aaf1d18c2ef", "patch": "@@ -43,6 +43,10 @@ fn find_ancestors(item: SyntaxElement, direction: Direction, range: TextRange) -\n \n     let movable = [\n         SyntaxKind::ARG_LIST,\n+        SyntaxKind::GENERIC_PARAM_LIST,\n+        SyntaxKind::GENERIC_ARG_LIST,\n+        SyntaxKind::VARIANT_LIST,\n+        SyntaxKind::TYPE_BOUND_LIST,\n         SyntaxKind::MATCH_ARM,\n         SyntaxKind::PARAM,\n         SyntaxKind::LET_STMT,\n@@ -79,6 +83,10 @@ fn move_in_direction(\n     match_ast! {\n         match node {\n             ast::ArgList(it) => swap_sibling_in_list(it.args(), range, direction),\n+            ast::GenericParamList(it) => swap_sibling_in_list(it.generic_params(), range, direction),\n+            ast::GenericArgList(it) => swap_sibling_in_list(it.generic_args(), range, direction),\n+            ast::VariantList(it) => swap_sibling_in_list(it.variants(), range, direction),\n+            ast::TypeBoundList(it) => swap_sibling_in_list(it.bounds(), range, direction),\n             _ => Some(replace_nodes(node, &match direction {\n                 Direction::Up => node.prev_sibling(),\n                 Direction::Down => node.next_sibling(),\n@@ -302,7 +310,7 @@ struct Yay;\n \n trait Wow {}\n \n-impl Wow for Yay {}$0$0\n+impl Wow for Yay $0$0{}\n             \"#,\n             expect![[r#\"\n struct Yay;\n@@ -441,6 +449,92 @@ fn main() {\n         );\n     }\n \n+    #[test]\n+    fn test_moves_generic_param_up() {\n+        check(\n+            r#\"\n+struct Test<A, B$0$0>(A, B);\n+\n+fn main() {}\n+            \"#,\n+            expect![[r#\"\n+struct Test<B, A>(A, B);\n+\n+fn main() {}\n+            \"#]],\n+            Direction::Up,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_moves_generic_arg_up() {\n+        check(\n+            r#\"\n+struct Test<A, B>(A, B);\n+\n+fn main() {\n+    let t = Test::<i32, &str$0$0>(123, \"yay\");\n+}\n+            \"#,\n+            expect![[r#\"\n+struct Test<A, B>(A, B);\n+\n+fn main() {\n+    let t = Test::<&str, i32>(123, \"yay\");\n+}\n+            \"#]],\n+            Direction::Up,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_moves_variant_up() {\n+        check(\n+            r#\"\n+enum Hello {\n+    One,\n+    Two$0$0\n+}\n+\n+fn main() {}\n+            \"#,\n+            expect![[r#\"\n+enum Hello {\n+    Two,\n+    One\n+}\n+\n+fn main() {}\n+            \"#]],\n+            Direction::Up,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_moves_type_bound_up() {\n+        check(\n+            r#\"\n+trait One {}\n+\n+trait Two {}\n+\n+fn test<T: One + Two$0$0>(t: T) {}\n+\n+fn main() {}\n+            \"#,\n+            expect![[r#\"\n+trait One {}\n+\n+trait Two {}\n+\n+fn test<T: Two + One>(t: T) {}\n+\n+fn main() {}\n+            \"#]],\n+            Direction::Up,\n+        );\n+    }\n+\n     #[test]\n     fn test_prioritizes_trait_items() {\n         check("}]}