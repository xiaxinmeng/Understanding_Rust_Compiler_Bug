{"sha": "6296dc0d73527301f18ef55b5f2d07c3241b8a00", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyOTZkYzBkNzM1MjczMDFmMThlZjU1YjVmMmQwN2MzMjQxYjhhMDA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-31T10:58:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-31T10:58:21Z"}, "message": "auto merge of #8141 : graydon/rust/foreach-in-sketch, r=brson\n\nThis is a preliminary implementation of `for ... in ... { ...}` using a transitionary keyword `foreach`. Codesize seems to be a little bit down (10% or less non-opt) and otherwise it seems quite trivial to rewrite lambda-based loops to use it. Once we've rewritten the codebase away from lambda-based `for` we can retarget that word at the same production, snapshot, rewrite the keywords in one go, and expire `foreach`.\r\n\r\nFeedback welcome. It's a desugaring-based approach which is arguably something we should have been doing for other constructs before. I apologize both for the laziness associated with doing it this way and with any sense that I'm bending rules I put in place previously concerning \"never doing desugarings\". I put the expansion in `expand.rs` and would be amenable to the argument that the code there needs better factoring / more helpers / to move to a submodule or helper function. It does seem to work at this point, though, and I gather we'd like to get the shift done relatively quickly.", "tree": {"sha": "9ca1c483e62e852fb33db8aee766ba4c7e798eb9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ca1c483e62e852fb33db8aee766ba4c7e798eb9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6296dc0d73527301f18ef55b5f2d07c3241b8a00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6296dc0d73527301f18ef55b5f2d07c3241b8a00", "html_url": "https://github.com/rust-lang/rust/commit/6296dc0d73527301f18ef55b5f2d07c3241b8a00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6296dc0d73527301f18ef55b5f2d07c3241b8a00/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b7e241e02bb9f82d7b931033afde477d03ff4f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b7e241e02bb9f82d7b931033afde477d03ff4f2", "html_url": "https://github.com/rust-lang/rust/commit/8b7e241e02bb9f82d7b931033afde477d03ff4f2"}, {"sha": "a696f0fecb9d11204f64d310eb66e095f64bd04a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a696f0fecb9d11204f64d310eb66e095f64bd04a", "html_url": "https://github.com/rust-lang/rust/commit/a696f0fecb9d11204f64d310eb66e095f64bd04a"}], "stats": {"total": 378, "additions": 374, "deletions": 4}, "files": [{"sha": "a262aa5445e74f6f2c8263657531b7d7bcfe388c", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6296dc0d73527301f18ef55b5f2d07c3241b8a00/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6296dc0d73527301f18ef55b5f2d07c3241b8a00/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=6296dc0d73527301f18ef55b5f2d07c3241b8a00", "patch": "@@ -239,6 +239,8 @@ impl CFGBuilder {\n                 expr_exit\n             }\n \n+            ast::expr_for_loop(*) => fail!(\"non-desugared expr_for_loop\"),\n+\n             ast::expr_loop(ref body, _) => {\n                 //\n                 //     [pred]"}, {"sha": "8bc2c145eb36b6ccba5db25a6d3ac1b5285525a2", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6296dc0d73527301f18ef55b5f2d07c3241b8a00/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6296dc0d73527301f18ef55b5f2d07c3241b8a00/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=6296dc0d73527301f18ef55b5f2d07c3241b8a00", "patch": "@@ -583,6 +583,8 @@ impl<'self, O:DataFlowOperator> PropagationContext<'self, O> {\n                 copy_bits(new_loop_scope.break_bits, in_out);\n             }\n \n+            ast::expr_for_loop(*) => fail!(\"non-desugared expr_for_loop\"),\n+\n             ast::expr_loop(ref blk, _) => {\n                 //\n                 //     (expr) <--+"}, {"sha": "e595e7c0694ccb9ba350e5baf00208c20b5390b7", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6296dc0d73527301f18ef55b5f2d07c3241b8a00/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6296dc0d73527301f18ef55b5f2d07c3241b8a00/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=6296dc0d73527301f18ef55b5f2d07c3241b8a00", "patch": "@@ -503,6 +503,7 @@ fn visit_expr(expr: @expr, (this, vt): (@mut IrMaps, vt<@mut IrMaps>)) {\n         this.add_live_node_for_node(expr.id, ExprNode(expr.span));\n         visit::visit_expr(expr, (this, vt));\n       }\n+      expr_for_loop(*) => fail!(\"non-desugared expr_for_loop\"),\n       expr_binary(_, op, _, _) if ast_util::lazy_binop(op) => {\n         this.add_live_node_for_node(expr.id, ExprNode(expr.span));\n         visit::visit_expr(expr, (this, vt));\n@@ -1057,6 +1058,8 @@ impl Liveness {\n             self.propagate_through_loop(expr, Some(cond), blk, succ)\n           }\n \n+          expr_for_loop(*) => fail!(\"non-desugared expr_for_loop\"),\n+\n           // Note that labels have been resolved, so we don't need to look\n           // at the label ident\n           expr_loop(ref blk, _) => {\n@@ -1487,6 +1490,7 @@ fn check_expr(expr: @expr, (this, vt): (@Liveness, vt<@Liveness>)) {\n       expr_paren(*) | expr_fn_block(*) | expr_path(*) | expr_self(*) => {\n         visit::visit_expr(expr, (this, vt));\n       }\n+      expr_for_loop(*) => fail!(\"non-desugared expr_for_loop\")\n     }\n }\n "}, {"sha": "a875381cc433a41ecde5d3cc134b698e0b9ecdca", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6296dc0d73527301f18ef55b5f2d07c3241b8a00/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6296dc0d73527301f18ef55b5f2d07c3241b8a00/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=6296dc0d73527301f18ef55b5f2d07c3241b8a00", "patch": "@@ -435,6 +435,8 @@ impl mem_categorization_ctxt {\n           ast::expr_inline_asm(*) => {\n             return self.cat_rvalue_node(expr, expr_ty);\n           }\n+\n+          ast::expr_for_loop(*) => fail!(\"non-desugared expr_for_loop\")\n         }\n     }\n "}, {"sha": "eaa7970cfe42eebec3780d17c4fa883d44f56185", "filename": "src/librustc/middle/moves.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6296dc0d73527301f18ef55b5f2d07c3241b8a00/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6296dc0d73527301f18ef55b5f2d07c3241b8a00/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmoves.rs?ref=6296dc0d73527301f18ef55b5f2d07c3241b8a00", "patch": "@@ -487,6 +487,8 @@ impl VisitContext {\n                 self.consume_block(blk, visitor);\n             }\n \n+            expr_for_loop(*) => fail!(\"non-desugared expr_for_loop\"),\n+\n             expr_unary(_, _, lhs) => {\n                 if !self.use_overloaded_operator(\n                     expr, lhs, [], visitor)"}, {"sha": "ba11476204a8a157aba03e0e2425c89f408e8632", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6296dc0d73527301f18ef55b5f2d07c3241b8a00/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6296dc0d73527301f18ef55b5f2d07c3241b8a00/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=6296dc0d73527301f18ef55b5f2d07c3241b8a00", "patch": "@@ -5016,6 +5016,8 @@ impl Resolver {\n                 }\n             }\n \n+            expr_for_loop(*) => fail!(\"non-desugared expr_for_loop\"),\n+\n             expr_break(Some(label)) | expr_again(Some(label)) => {\n                 match self.search_ribs(self.label_ribs, label, expr.span,\n                                        DontAllowCapturingSelf) {"}, {"sha": "42221cb08b6a8528b55b81c806ea5bd0d0954bcf", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6296dc0d73527301f18ef55b5f2d07c3241b8a00/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6296dc0d73527301f18ef55b5f2d07c3241b8a00/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=6296dc0d73527301f18ef55b5f2d07c3241b8a00", "patch": "@@ -2266,7 +2266,7 @@ pub fn register_fn_fuller(ccx: @mut CrateContext,\n                           sp: span,\n                           sym: ~str,\n                           node_id: ast::NodeId,\n-                          node_type: ty::t,\n+                          _node_type: ty::t,\n                           cc: lib::llvm::CallConv,\n                           fn_ty: Type)\n                           -> ValueRef {"}, {"sha": "a599c7c798eadae1748675ba9704aa3a364b8a01", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6296dc0d73527301f18ef55b5f2d07c3241b8a00/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6296dc0d73527301f18ef55b5f2d07c3241b8a00/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=6296dc0d73527301f18ef55b5f2d07c3241b8a00", "patch": "@@ -401,7 +401,9 @@ pub fn mark_for_expr(cx: &Context, e: &expr) {\n       expr_match(*) | expr_block(_) | expr_if(*) | expr_while(*) |\n       expr_break(_) | expr_again(_) | expr_unary(*) | expr_lit(_) |\n       expr_mac(_) | expr_addr_of(*) | expr_ret(_) | expr_loop(*) |\n-      expr_loop_body(_) | expr_do_body(_) => ()\n+      expr_loop_body(_) | expr_do_body(_) => (),\n+\n+      expr_for_loop(*) => fail!(\"non-desugared expr_for_loop\")\n     }\n }\n "}, {"sha": "3ec66aff1760cdab8078f8621fba698a80e1803d", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6296dc0d73527301f18ef55b5f2d07c3241b8a00/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6296dc0d73527301f18ef55b5f2d07c3241b8a00/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=6296dc0d73527301f18ef55b5f2d07c3241b8a00", "patch": "@@ -3240,6 +3240,8 @@ pub fn expr_kind(tcx: ctxt,\n             RvalueStmtExpr\n         }\n \n+        ast::expr_for_loop(*) => fail!(\"non-desugared expr_for_loop\"),\n+\n         ast::expr_lit(_) | // Note: lit_str is carved out above\n         ast::expr_unary(*) |\n         ast::expr_addr_of(*) |"}, {"sha": "4a3f72a2276c2ef0934ecdf9806c7fc4aa6d3ff3", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6296dc0d73527301f18ef55b5f2d07c3241b8a00/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6296dc0d73527301f18ef55b5f2d07c3241b8a00/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=6296dc0d73527301f18ef55b5f2d07c3241b8a00", "patch": "@@ -2559,6 +2559,8 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n             fcx.write_nil(id);\n         }\n       }\n+      ast::expr_for_loop(*) =>\n+          fail!(\"non-desugared expr_for_loop\"),\n       ast::expr_loop(ref body, _) => {\n         check_block_no_value(fcx, (body));\n         if !may_break(tcx, expr.id, body) {"}, {"sha": "422f59c14eac16940514bc98b0665bd4f72321e3", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6296dc0d73527301f18ef55b5f2d07c3241b8a00/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6296dc0d73527301f18ef55b5f2d07c3241b8a00/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=6296dc0d73527301f18ef55b5f2d07c3241b8a00", "patch": "@@ -1041,6 +1041,7 @@ pub mod guarantor {\n                     rcx.fcx.tcx(), rcx.fcx.inh.method_map, expr));\n                 None\n             }\n+            ast::expr_for_loop(*) => fail!(\"non-desugared expr_for_loop\"),\n         }\n     }\n "}, {"sha": "d6bee4fe19fbdccc3771bbcdf0cd8040b9bee5f0", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6296dc0d73527301f18ef55b5f2d07c3241b8a00/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6296dc0d73527301f18ef55b5f2d07c3241b8a00/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=6296dc0d73527301f18ef55b5f2d07c3241b8a00", "patch": "@@ -465,6 +465,7 @@ pub enum expr_ {\n     expr_cast(@expr, Ty),\n     expr_if(@expr, Block, Option<@expr>),\n     expr_while(@expr, Block),\n+    expr_for_loop(@pat, @expr, Block),\n     /* Conditionless loop (can be exited with break, cont, or ret)\n        Same semantics as while(true) { body }, but typestate knows that the\n        (implicit) condition is always true. */"}, {"sha": "72bbc4a96c5f738a879e24c61a6eabe057768a2b", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 155, "deletions": 1, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/6296dc0d73527301f18ef55b5f2d07c3241b8a00/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6296dc0d73527301f18ef55b5f2d07c3241b8a00/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=6296dc0d73527301f18ef55b5f2d07c3241b8a00", "patch": "@@ -16,11 +16,12 @@ use ast_util::{new_rename, new_mark, resolve};\n use attr;\n use attr::AttrMetaMethods;\n use codemap;\n-use codemap::{span, ExpnInfo, NameAndSpan};\n+use codemap::{span, spanned, ExpnInfo, NameAndSpan};\n use ext::base::*;\n use fold::*;\n use parse;\n use parse::{parse_item_from_source_str};\n+use parse::token;\n use parse::token::{ident_to_str, intern};\n use visit;\n use visit::Visitor;\n@@ -99,6 +100,159 @@ pub fn expand_expr(extsbox: @mut SyntaxEnv,\n                 }\n             }\n         }\n+\n+        // Desugar expr_for_loop\n+        // From: `foreach <src_pat> in <src_expr> <src_loop_block>`\n+        ast::expr_for_loop(src_pat, src_expr, ref src_loop_block) => {\n+            let src_pat = src_pat.clone();\n+            let src_expr = src_expr.clone();\n+\n+            // Expand any interior macros etc.\n+            // NB: we don't fold pats yet. Curious.\n+            let src_expr = fld.fold_expr(src_expr).clone();\n+            let src_loop_block = fld.fold_block(src_loop_block).clone();\n+\n+            let span = s;\n+            let lo = s.lo;\n+            let hi = s.hi;\n+\n+            pub fn mk_expr(cx: @ExtCtxt, span: span,\n+                           node: expr_) -> @ast::expr {\n+                @ast::expr {\n+                    id: cx.next_id(),\n+                    node: node,\n+                    span: span,\n+                }\n+            }\n+\n+            fn mk_block(cx: @ExtCtxt,\n+                        stmts: &[@ast::stmt],\n+                        expr: Option<@ast::expr>,\n+                        span: span) -> ast::Block {\n+                ast::Block {\n+                    view_items: ~[],\n+                    stmts: stmts.to_owned(),\n+                    expr: expr,\n+                    id: cx.next_id(),\n+                    rules: ast::DefaultBlock,\n+                    span: span,\n+                }\n+            }\n+\n+            fn mk_simple_path(ident: ast::ident, span: span) -> ast::Path {\n+                ast::Path {\n+                    span: span,\n+                    global: false,\n+                    idents: ~[ident],\n+                    rp: None,\n+                    types: ~[]\n+                }\n+            }\n+\n+            // to:\n+            //\n+            // {\n+            //   let _i = &mut <src_expr>;\n+            //   loop {\n+            //       match i.next() {\n+            //           None => break,\n+            //           Some(<src_pat>) => <src_loop_block>\n+            //       }\n+            //   }\n+            // }\n+\n+            let local_ident = token::gensym_ident(\"i\");\n+            let some_ident = token::str_to_ident(\"Some\");\n+            let none_ident = token::str_to_ident(\"None\");\n+            let next_ident = token::str_to_ident(\"next\");\n+\n+            let local_path_1 = mk_simple_path(local_ident, span);\n+            let local_path_2 = mk_simple_path(local_ident, span);\n+            let some_path = mk_simple_path(some_ident, span);\n+            let none_path = mk_simple_path(none_ident, span);\n+\n+            // `let i = &mut <src_expr>`\n+            let iter_decl_stmt = {\n+                let ty = ast::Ty {\n+                    id: cx.next_id(),\n+                    node: ast::ty_infer,\n+                    span: span\n+                };\n+                let local = @ast::Local {\n+                    is_mutbl: false,\n+                    ty: ty,\n+                    pat: @ast::pat {\n+                        id: cx.next_id(),\n+                        node: ast::pat_ident(ast::bind_infer, local_path_1, None),\n+                        span: src_expr.span\n+                    },\n+                    init: Some(mk_expr(cx, src_expr.span,\n+                                       ast::expr_addr_of(ast::m_mutbl, src_expr))),\n+                    id: cx.next_id(),\n+                    span: src_expr.span,\n+                };\n+                let e = @spanned(src_expr.span.lo,\n+                                 src_expr.span.hi,\n+                                 ast::decl_local(local));\n+                @spanned(lo, hi, ast::stmt_decl(e, cx.next_id()))\n+            };\n+\n+            // `None => break;`\n+            let none_arm = {\n+                let break_expr = mk_expr(cx, span, ast::expr_break(None));\n+                let break_stmt = @spanned(lo, hi, ast::stmt_expr(break_expr, cx.next_id()));\n+                let none_block = mk_block(cx, [break_stmt], None, span);\n+                let none_pat = @ast::pat {\n+                    id: cx.next_id(),\n+                    node: ast::pat_ident(ast::bind_infer, none_path, None),\n+                    span: span\n+                };\n+                ast::arm {\n+                    pats: ~[none_pat],\n+                    guard: None,\n+                    body: none_block\n+                }\n+            };\n+\n+            // `Some(<src_pat>) => <src_loop_block>`\n+            let some_arm = {\n+                let pat = @ast::pat {\n+                    id: cx.next_id(),\n+                    node: ast::pat_enum(some_path, Some(~[src_pat])),\n+                    span: src_pat.span\n+                };\n+                ast::arm {\n+                    pats: ~[pat],\n+                    guard: None,\n+                    body: src_loop_block\n+                }\n+            };\n+\n+            // `match i.next() { ... }`\n+            let match_stmt = {\n+                let local_expr = mk_expr(cx, span, ast::expr_path(local_path_2));\n+                let next_call_expr = mk_expr(cx, span,\n+                                             ast::expr_method_call(cx.next_id(),\n+                                                                   local_expr, next_ident,\n+                                                                   ~[], ~[], ast::NoSugar));\n+                let match_expr = mk_expr(cx, span, ast::expr_match(next_call_expr,\n+                                                                   ~[none_arm, some_arm]));\n+                @spanned(lo, hi, ast::stmt_expr(match_expr, cx.next_id()))\n+            };\n+\n+            // `loop { ... }`\n+            let loop_block = {\n+                let loop_body_block = mk_block(cx, [match_stmt], None, span);\n+                let loop_body_expr = mk_expr(cx, span, ast::expr_loop(loop_body_block, None));\n+                let loop_body_stmt = @spanned(lo, hi, ast::stmt_expr(loop_body_expr, cx.next_id()));\n+                mk_block(cx, [iter_decl_stmt,\n+                              loop_body_stmt],\n+                         None, span)\n+            };\n+\n+            (ast::expr_block(loop_block), span)\n+        }\n+\n         _ => orig(e, s, fld)\n     }\n }"}, {"sha": "3016ee660dc62c4a5bc8402f355f325fe39e6b90", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6296dc0d73527301f18ef55b5f2d07c3241b8a00/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6296dc0d73527301f18ef55b5f2d07c3241b8a00/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=6296dc0d73527301f18ef55b5f2d07c3241b8a00", "patch": "@@ -559,6 +559,11 @@ pub fn noop_fold_expr(e: &expr_, fld: @ast_fold) -> expr_ {\n         expr_while(cond, ref body) => {\n             expr_while(fld.fold_expr(cond), fld.fold_block(body))\n         }\n+        expr_for_loop(pat, iter, ref body) => {\n+            expr_for_loop(fld.fold_pat(pat),\n+                          fld.fold_expr(iter),\n+                          fld.fold_block(body))\n+        }\n         expr_loop(ref body, opt_ident) => {\n             expr_loop(\n                 fld.fold_block(body),"}, {"sha": "0bf87f10597ba29412dcfbb58779953a515af7c9", "filename": "src/libsyntax/parse/classify.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6296dc0d73527301f18ef55b5f2d07c3241b8a00/src%2Flibsyntax%2Fparse%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6296dc0d73527301f18ef55b5f2d07c3241b8a00/src%2Flibsyntax%2Fparse%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fclassify.rs?ref=6296dc0d73527301f18ef55b5f2d07c3241b8a00", "patch": "@@ -28,6 +28,7 @@ pub fn expr_requires_semi_to_be_stmt(e: @ast::expr) -> bool {\n       | ast::expr_block(_)\n       | ast::expr_while(*)\n       | ast::expr_loop(*)\n+      | ast::expr_for_loop(*)\n       | ast::expr_call(_, _, ast::DoSugar)\n       | ast::expr_call(_, _, ast::ForSugar)\n       | ast::expr_method_call(_, _, _, _, _, ast::DoSugar)"}, {"sha": "6ff4b91ec97c8cf2fd894459dad99b53b65d5512", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6296dc0d73527301f18ef55b5f2d07c3241b8a00/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6296dc0d73527301f18ef55b5f2d07c3241b8a00/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=6296dc0d73527301f18ef55b5f2d07c3241b8a00", "patch": "@@ -29,7 +29,7 @@ use ast::{expr_method_call, expr_paren, expr_path, expr_repeat};\n use ast::{expr_ret, expr_self, expr_struct, expr_tup, expr_unary};\n use ast::{expr_vec, expr_vstore, expr_vstore_mut_box};\n use ast::{expr_vstore_slice, expr_vstore_box};\n-use ast::{expr_vstore_mut_slice, expr_while, extern_fn, Field, fn_decl};\n+use ast::{expr_vstore_mut_slice, expr_while, expr_for_loop, extern_fn, Field, fn_decl};\n use ast::{expr_vstore_uniq, Onceness, Once, Many};\n use ast::{foreign_item, foreign_item_static, foreign_item_fn, foreign_mod};\n use ast::{ident, impure_fn, inherited, item, item_, item_static};\n@@ -1622,6 +1622,8 @@ impl Parser {\n             hi = self.span.hi;\n         } else if self.eat_keyword(keywords::If) {\n             return self.parse_if_expr();\n+        } else if self.eat_keyword(keywords::ForEach) {\n+            return self.parse_for_expr();\n         } else if self.eat_keyword(keywords::For) {\n             return self.parse_sugary_call_expr(lo, ~\"for\", ForSugar,\n                                                expr_loop_body);\n@@ -2323,6 +2325,21 @@ impl Parser {\n         }\n     }\n \n+    // parse a 'foreach' .. 'in' expression ('foreach' token already eaten)\n+    pub fn parse_for_expr(&self) -> @expr {\n+        // Parse: `foreach <src_pat> in <src_expr> <src_loop_block>`\n+\n+        let lo = self.last_span.lo;\n+        let pat = self.parse_pat();\n+        self.expect_keyword(keywords::In);\n+        let expr = self.parse_expr();\n+        let loop_block = self.parse_block();\n+        let hi = self.span.hi;\n+\n+        self.mk_expr(lo, hi, expr_for_loop(pat, expr, loop_block))\n+    }\n+\n+\n     // parse a 'for' or 'do'.\n     // the 'for' and 'do' expressions parse as calls, but look like\n     // function calls followed by a closure expression."}, {"sha": "a9f0db32d3e1cab8698777adb5f9f0b8d97dda7d", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6296dc0d73527301f18ef55b5f2d07c3241b8a00/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6296dc0d73527301f18ef55b5f2d07c3241b8a00/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=6296dc0d73527301f18ef55b5f2d07c3241b8a00", "patch": "@@ -474,6 +474,8 @@ fn mk_fresh_ident_interner() -> @ident_interner {\n         \"while\",              // 64\n \n         \"be\",                 // 65\n+        \"in\",                 // 66\n+        \"foreach\",            // 67\n     ];\n \n     @ident_interner {\n@@ -570,8 +572,10 @@ pub mod keywords {\n         False,\n         Fn,\n         For,\n+        ForEach,\n         If,\n         Impl,\n+        In,\n         Let,\n         __Log,\n         Loop,\n@@ -612,8 +616,10 @@ pub mod keywords {\n                 False => ident { name: 40, ctxt: 0 },\n                 Fn => ident { name: 41, ctxt: 0 },\n                 For => ident { name: 42, ctxt: 0 },\n+                ForEach => ident { name: 67, ctxt: 0 },\n                 If => ident { name: 43, ctxt: 0 },\n                 Impl => ident { name: 44, ctxt: 0 },\n+                In => ident { name: 66, ctxt: 0 },\n                 Let => ident { name: 45, ctxt: 0 },\n                 __Log => ident { name: 46, ctxt: 0 },\n                 Loop => ident { name: 47, ctxt: 0 },"}, {"sha": "4fab3c5779ecd9d47d4d5354a9bbf02a57e3231a", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6296dc0d73527301f18ef55b5f2d07c3241b8a00/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6296dc0d73527301f18ef55b5f2d07c3241b8a00/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=6296dc0d73527301f18ef55b5f2d07c3241b8a00", "patch": "@@ -1228,6 +1228,15 @@ pub fn print_expr(s: @ps, expr: &ast::expr) {\n         space(s.s);\n         print_block(s, blk);\n       }\n+      ast::expr_for_loop(pat, iter, ref blk) => {\n+        head(s, \"foreach\");\n+        print_pat(s, pat);\n+        space(s.s);\n+        word_space(s, \"in\");\n+        print_expr(s, iter);\n+        space(s.s);\n+        print_block(s, blk);\n+      }\n       ast::expr_loop(ref blk, opt_ident) => {\n         for opt_ident.iter().advance |ident| {\n             word(s.s, \"'\");"}, {"sha": "990aaa99b7862b916877c89d20a5a1df387aaee8", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6296dc0d73527301f18ef55b5f2d07c3241b8a00/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6296dc0d73527301f18ef55b5f2d07c3241b8a00/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=6296dc0d73527301f18ef55b5f2d07c3241b8a00", "patch": "@@ -512,6 +512,11 @@ pub fn visit_expr<E:Clone>(ex: @expr, (e, v): (E, vt<E>)) {\n             (v.visit_expr)(x, (e.clone(), v));\n             (v.visit_block)(b, (e.clone(), v));\n         }\n+        expr_for_loop(pat, iter, ref b) => {\n+            (v.visit_pat)(pat, (e.clone(), v));\n+            (v.visit_expr)(iter, (e.clone(), v));\n+            (v.visit_block)(b, (e.clone(), v));\n+        }\n         expr_loop(ref b, _) => (v.visit_block)(b, (e.clone(), v)),\n         expr_match(x, ref arms) => {\n             (v.visit_expr)(x, (e.clone(), v));"}, {"sha": "74ff344b73510eeeb1b37be239dcabb59b4e4ce1", "filename": "src/test/run-pass/foreach-external-iterators-break.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6296dc0d73527301f18ef55b5f2d07c3241b8a00/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-break.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6296dc0d73527301f18ef55b5f2d07c3241b8a00/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-break.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-break.rs?ref=6296dc0d73527301f18ef55b5f2d07c3241b8a00", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let x = [1,..100];\n+    let mut y = 0;\n+    foreach i in x.iter() {\n+        if y > 10 {\n+            break;\n+        }\n+        y += *i;\n+    }\n+    assert!(y == 11);\n+}"}, {"sha": "4b6421cb0d3ce354b1c2a675c281d3652fa84f4e", "filename": "src/test/run-pass/foreach-external-iterators-hashmap-break-restart.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/6296dc0d73527301f18ef55b5f2d07c3241b8a00/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-hashmap-break-restart.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6296dc0d73527301f18ef55b5f2d07c3241b8a00/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-hashmap-break-restart.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-hashmap-break-restart.rs?ref=6296dc0d73527301f18ef55b5f2d07c3241b8a00", "patch": "@@ -0,0 +1,41 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::hashmap::HashMap;\n+\n+// This is a fancy one: it uses an external iterator established\n+// outside the loop, breaks, then _picks back up_ and continues\n+// iterating with it.\n+\n+fn main() {\n+    let mut h = HashMap::new();\n+    let kvs = [(1, 10), (2, 20), (3, 30)];\n+    foreach &(k,v) in kvs.iter() {\n+        h.insert(k,v);\n+    }\n+    let mut x = 0;\n+    let mut y = 0;\n+\n+    let mut i = h.iter();\n+\n+    foreach (&k,&v) in i {\n+        x += k;\n+        y += v;\n+        break;\n+    }\n+\n+    foreach (&k,&v) in i {\n+        x += k;\n+        y += v;\n+    }\n+\n+    assert_eq!(x, 6);\n+    assert_eq!(y, 60);\n+}\n\\ No newline at end of file"}, {"sha": "bc6508c4a5ff335a8c49f201dece500bcc573aa8", "filename": "src/test/run-pass/foreach-external-iterators-hashmap.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6296dc0d73527301f18ef55b5f2d07c3241b8a00/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-hashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6296dc0d73527301f18ef55b5f2d07c3241b8a00/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-hashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-hashmap.rs?ref=6296dc0d73527301f18ef55b5f2d07c3241b8a00", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::hashmap::HashMap;\n+\n+fn main() {\n+    let mut h = HashMap::new();\n+    let kvs = [(1, 10), (2, 20), (3, 30)];\n+    foreach &(k,v) in kvs.iter() {\n+        h.insert(k,v);\n+    }\n+    let mut x = 0;\n+    let mut y = 0;\n+    foreach (&k,&v) in h.iter() {\n+        x += k;\n+        y += v;\n+    }\n+    assert_eq!(x, 6);\n+    assert_eq!(y, 60);\n+}\n\\ No newline at end of file"}, {"sha": "8db6b50f8cd9e06fb6e63ffb7e5b77534da513ed", "filename": "src/test/run-pass/foreach-external-iterators-loop.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6296dc0d73527301f18ef55b5f2d07c3241b8a00/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6296dc0d73527301f18ef55b5f2d07c3241b8a00/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-loop.rs?ref=6296dc0d73527301f18ef55b5f2d07c3241b8a00", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let x = [1,..100];\n+    let mut y = 0;\n+    foreach (n,i) in x.iter().enumerate() {\n+        if n < 10 {\n+            loop;\n+        }\n+        y += *i;\n+    }\n+    assert_eq!(y, 90);\n+}"}, {"sha": "ffc01ebff19ea52d5d6e7c42d1cbf7a460ec749c", "filename": "src/test/run-pass/foreach-external-iterators-nested.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6296dc0d73527301f18ef55b5f2d07c3241b8a00/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6296dc0d73527301f18ef55b5f2d07c3241b8a00/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-nested.rs?ref=6296dc0d73527301f18ef55b5f2d07c3241b8a00", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let x = [1,..100];\n+    let y = [2,..100];\n+    let mut p = 0;\n+    let mut q = 0;\n+    foreach i in x.iter() {\n+        foreach j in y.iter() {\n+            p += *j;\n+        }\n+        q += *i + p;\n+    }\n+    assert!(q == 1010100);\n+}"}, {"sha": "55884cee4ecb66f91168faf30b9552f1f2a5f2cd", "filename": "src/test/run-pass/foreach-external-iterators.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6296dc0d73527301f18ef55b5f2d07c3241b8a00/src%2Ftest%2Frun-pass%2Fforeach-external-iterators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6296dc0d73527301f18ef55b5f2d07c3241b8a00/src%2Ftest%2Frun-pass%2Fforeach-external-iterators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-external-iterators.rs?ref=6296dc0d73527301f18ef55b5f2d07c3241b8a00", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let x = [1,..100];\n+    let mut y = 0;\n+    foreach i in x.iter() {\n+        y += *i\n+    }\n+    assert!(y == 100);\n+}\n\\ No newline at end of file"}]}