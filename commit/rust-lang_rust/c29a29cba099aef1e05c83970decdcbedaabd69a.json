{"sha": "c29a29cba099aef1e05c83970decdcbedaabd69a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyOWEyOWNiYTA5OWFlZjFlMDVjODM5NzBkZWNkY2JlZGFhYmQ2OWE=", "commit": {"author": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2020-09-25T19:07:46Z"}, "committer": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2020-09-25T19:07:46Z"}, "message": "Defer Apple SDKROOT detection to link time.", "tree": {"sha": "f15b9707330f1e7afc6c18ce6be7e23c4ed20501", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f15b9707330f1e7afc6c18ce6be7e23c4ed20501"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c29a29cba099aef1e05c83970decdcbedaabd69a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c29a29cba099aef1e05c83970decdcbedaabd69a", "html_url": "https://github.com/rust-lang/rust/commit/c29a29cba099aef1e05c83970decdcbedaabd69a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c29a29cba099aef1e05c83970decdcbedaabd69a/comments", "author": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b984ef6797ff17faa2b1e0ebb54b78de1491e5fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/b984ef6797ff17faa2b1e0ebb54b78de1491e5fd", "html_url": "https://github.com/rust-lang/rust/commit/b984ef6797ff17faa2b1e0ebb54b78de1491e5fd"}], "stats": {"total": 232, "additions": 104, "deletions": 128}, "files": [{"sha": "408a4a0cfed920d66309bf221b8b3408992ac028", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/c29a29cba099aef1e05c83970decdcbedaabd69a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c29a29cba099aef1e05c83970decdcbedaabd69a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=c29a29cba099aef1e05c83970decdcbedaabd69a", "patch": "@@ -1289,6 +1289,7 @@ fn add_pre_link_args(cmd: &mut dyn Linker, sess: &Session, flavor: LinkerFlavor)\n         cmd.args(args);\n     }\n     cmd.args(&sess.opts.debugging_opts.pre_link_args);\n+    add_apple_sdk(cmd, sess, flavor);\n }\n \n /// Add a link script embedded in the target, if applicable.\n@@ -2083,3 +2084,86 @@ fn are_upstream_rust_objects_already_included(sess: &Session) -> bool {\n         config::Lto::No | config::Lto::ThinLocal => false,\n     }\n }\n+\n+fn add_apple_sdk(cmd: &mut dyn Linker, sess: &Session, flavor: LinkerFlavor) {\n+    let arch = &sess.target.target.arch;\n+    let os = &sess.target.target.target_os;\n+    let llvm_target = &sess.target.target.llvm_target;\n+    if sess.target.target.target_vendor != \"apple\"\n+        || !matches!(os.as_str(), \"ios\" | \"tvos\")\n+        || flavor != LinkerFlavor::Gcc\n+    {\n+        return;\n+    }\n+    let sdk_name = match (arch.as_str(), os.as_str()) {\n+        (\"aarch64\", \"tvos\") => \"appletvos\",\n+        (\"x86_64\", \"tvos\") => \"appletvsimulator\",\n+        (\"arm\", \"ios\") => \"iphoneos\",\n+        (\"aarch64\", \"ios\") => \"iphoneos\",\n+        (\"x86\", \"ios\") => \"iphonesimulator\",\n+        (\"x86_64\", \"ios\") if llvm_target.contains(\"macabi\") => \"macosx10.15\",\n+        (\"x86_64\", \"ios\") => \"iphonesimulator\",\n+        _ => {\n+            sess.err(&format!(\"unsupported arch `{}` for os `{}`\", arch, os));\n+            return;\n+        }\n+    };\n+    let sdk_root = match get_apple_sdk_root(sdk_name) {\n+        Ok(s) => s,\n+        Err(e) => {\n+            sess.err(&e);\n+            return;\n+        }\n+    };\n+    let arch_name = llvm_target.split('-').next().expect(\"LLVM target must have a hyphen\");\n+    cmd.args(&[\"-arch\", arch_name, \"-isysroot\", &sdk_root, \"-Wl,-syslibroot\", &sdk_root]);\n+}\n+\n+fn get_apple_sdk_root(sdk_name: &str) -> Result<String, String> {\n+    // Following what clang does\n+    // (https://github.com/llvm/llvm-project/blob/\n+    // 296a80102a9b72c3eda80558fb78a3ed8849b341/clang/lib/Driver/ToolChains/Darwin.cpp#L1661-L1678)\n+    // to allow the SDK path to be set. (For clang, xcrun sets\n+    // SDKROOT; for rustc, the user or build system can set it, or we\n+    // can fall back to checking for xcrun on PATH.)\n+    if let Ok(sdkroot) = env::var(\"SDKROOT\") {\n+        let p = Path::new(&sdkroot);\n+        match sdk_name {\n+            // Ignore `SDKROOT` if it's clearly set for the wrong platform.\n+            \"appletvos\"\n+                if sdkroot.contains(\"TVSimulator.platform\")\n+                    || sdkroot.contains(\"MacOSX.platform\") => {}\n+            \"appletvsimulator\"\n+                if sdkroot.contains(\"TVOS.platform\") || sdkroot.contains(\"MacOSX.platform\") => {}\n+            \"iphoneos\"\n+                if sdkroot.contains(\"iPhoneSimulator.platform\")\n+                    || sdkroot.contains(\"MacOSX.platform\") => {}\n+            \"iphonesimulator\"\n+                if sdkroot.contains(\"iPhoneOS.platform\") || sdkroot.contains(\"MacOSX.platform\") => {\n+            }\n+            \"macosx10.15\"\n+                if sdkroot.contains(\"iPhoneOS.platform\")\n+                    || sdkroot.contains(\"iPhoneSimulator.platform\") => {}\n+            // Ignore `SDKROOT` if it's not a valid path.\n+            _ if !p.is_absolute() || p == Path::new(\"/\") || !p.exists() => {}\n+            _ => return Ok(sdkroot),\n+        }\n+    }\n+    let res =\n+        Command::new(\"xcrun\").arg(\"--show-sdk-path\").arg(\"-sdk\").arg(sdk_name).output().and_then(\n+            |output| {\n+                if output.status.success() {\n+                    Ok(String::from_utf8(output.stdout).unwrap())\n+                } else {\n+                    let error = String::from_utf8(output.stderr);\n+                    let error = format!(\"process exit with error: {}\", error.unwrap());\n+                    Err(io::Error::new(io::ErrorKind::Other, &error[..]))\n+                }\n+            },\n+        );\n+\n+    match res {\n+        Ok(output) => Ok(output.trim().to_string()),\n+        Err(e) => Err(format!(\"failed to get {} SDK path: {}\", sdk_name, e)),\n+    }\n+}"}, {"sha": "168cd01878e52082d347e0e738f8b9f5591d4192", "filename": "compiler/rustc_target/src/spec/aarch64_apple_ios.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c29a29cba099aef1e05c83970decdcbedaabd69a/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c29a29cba099aef1e05c83970decdcbedaabd69a/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios.rs?ref=c29a29cba099aef1e05c83970decdcbedaabd69a", "patch": "@@ -1,8 +1,8 @@\n-use super::apple_sdk_base::{opts, AppleOS, Arch};\n+use super::apple_sdk_base::{opts, Arch};\n use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n-    let base = opts(Arch::Arm64, AppleOS::iOS)?;\n+    let base = opts(Arch::Arm64);\n     Ok(Target {\n         llvm_target: \"arm64-apple-ios\".to_string(),\n         target_endian: \"little\".to_string(),"}, {"sha": "5e2cab0df1e550ef13650a2a637fa29fcefaf085", "filename": "compiler/rustc_target/src/spec/aarch64_apple_tvos.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c29a29cba099aef1e05c83970decdcbedaabd69a/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_tvos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c29a29cba099aef1e05c83970decdcbedaabd69a/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_tvos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_tvos.rs?ref=c29a29cba099aef1e05c83970decdcbedaabd69a", "patch": "@@ -1,8 +1,8 @@\n-use super::apple_sdk_base::{opts, AppleOS, Arch};\n+use super::apple_sdk_base::{opts, Arch};\n use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n-    let base = opts(Arch::Arm64, AppleOS::tvOS)?;\n+    let base = opts(Arch::Arm64);\n     Ok(Target {\n         llvm_target: \"arm64-apple-tvos\".to_string(),\n         target_endian: \"little\".to_string(),"}, {"sha": "e34277d5af04cc374f8c5972f31c5df9a3435d7b", "filename": "compiler/rustc_target/src/spec/apple_sdk_base.rs", "status": "modified", "additions": 4, "deletions": 112, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/c29a29cba099aef1e05c83970decdcbedaabd69a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_sdk_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c29a29cba099aef1e05c83970decdcbedaabd69a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_sdk_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_sdk_base.rs?ref=c29a29cba099aef1e05c83970decdcbedaabd69a", "patch": "@@ -1,8 +1,4 @@\n-use crate::spec::{LinkArgs, LinkerFlavor, TargetOptions};\n-use std::env;\n-use std::io;\n-use std::path::Path;\n-use std::process::Command;\n+use crate::spec::TargetOptions;\n \n use Arch::*;\n #[allow(non_camel_case_types)]\n@@ -16,108 +12,6 @@ pub enum Arch {\n     X86_64_macabi,\n }\n \n-#[allow(non_camel_case_types)]\n-#[derive(Copy, Clone)]\n-pub enum AppleOS {\n-    tvOS,\n-    iOS,\n-}\n-\n-impl Arch {\n-    pub fn to_string(self) -> &'static str {\n-        match self {\n-            Armv7 => \"armv7\",\n-            Armv7s => \"armv7s\",\n-            Arm64 => \"arm64\",\n-            I386 => \"i386\",\n-            X86_64 => \"x86_64\",\n-            X86_64_macabi => \"x86_64\",\n-        }\n-    }\n-}\n-\n-pub fn get_sdk_root(sdk_name: &str) -> Result<String, String> {\n-    // Following what clang does\n-    // (https://github.com/llvm/llvm-project/blob/\n-    // 296a80102a9b72c3eda80558fb78a3ed8849b341/clang/lib/Driver/ToolChains/Darwin.cpp#L1661-L1678)\n-    // to allow the SDK path to be set. (For clang, xcrun sets\n-    // SDKROOT; for rustc, the user or build system can set it, or we\n-    // can fall back to checking for xcrun on PATH.)\n-    if let Ok(sdkroot) = env::var(\"SDKROOT\") {\n-        let p = Path::new(&sdkroot);\n-        match sdk_name {\n-            // Ignore `SDKROOT` if it's clearly set for the wrong platform.\n-            \"appletvos\"\n-                if sdkroot.contains(\"TVSimulator.platform\")\n-                    || sdkroot.contains(\"MacOSX.platform\") => {}\n-            \"appletvsimulator\"\n-                if sdkroot.contains(\"TVOS.platform\") || sdkroot.contains(\"MacOSX.platform\") => {}\n-            \"iphoneos\"\n-                if sdkroot.contains(\"iPhoneSimulator.platform\")\n-                    || sdkroot.contains(\"MacOSX.platform\") => {}\n-            \"iphonesimulator\"\n-                if sdkroot.contains(\"iPhoneOS.platform\") || sdkroot.contains(\"MacOSX.platform\") => {\n-            }\n-            \"macosx10.15\"\n-                if sdkroot.contains(\"iPhoneOS.platform\")\n-                    || sdkroot.contains(\"iPhoneSimulator.platform\") => {}\n-            // Ignore `SDKROOT` if it's not a valid path.\n-            _ if !p.is_absolute() || p == Path::new(\"/\") || !p.exists() => {}\n-            _ => return Ok(sdkroot),\n-        }\n-    }\n-    let res =\n-        Command::new(\"xcrun\").arg(\"--show-sdk-path\").arg(\"-sdk\").arg(sdk_name).output().and_then(\n-            |output| {\n-                if output.status.success() {\n-                    Ok(String::from_utf8(output.stdout).unwrap())\n-                } else {\n-                    let error = String::from_utf8(output.stderr);\n-                    let error = format!(\"process exit with error: {}\", error.unwrap());\n-                    Err(io::Error::new(io::ErrorKind::Other, &error[..]))\n-                }\n-            },\n-        );\n-\n-    match res {\n-        Ok(output) => Ok(output.trim().to_string()),\n-        Err(e) => Err(format!(\"failed to get {} SDK path: {}\", sdk_name, e)),\n-    }\n-}\n-\n-fn build_pre_link_args(arch: Arch, os: AppleOS) -> Result<LinkArgs, String> {\n-    let sdk_name = match (arch, os) {\n-        (Arm64, AppleOS::tvOS) => \"appletvos\",\n-        (X86_64, AppleOS::tvOS) => \"appletvsimulator\",\n-        (Armv7, AppleOS::iOS) => \"iphoneos\",\n-        (Armv7s, AppleOS::iOS) => \"iphoneos\",\n-        (Arm64, AppleOS::iOS) => \"iphoneos\",\n-        (I386, AppleOS::iOS) => \"iphonesimulator\",\n-        (X86_64, AppleOS::iOS) => \"iphonesimulator\",\n-        (X86_64_macabi, AppleOS::iOS) => \"macosx10.15\",\n-        _ => unreachable!(),\n-    };\n-\n-    let arch_name = arch.to_string();\n-\n-    let sdk_root = get_sdk_root(sdk_name)?;\n-\n-    let mut args = LinkArgs::new();\n-    args.insert(\n-        LinkerFlavor::Gcc,\n-        vec![\n-            \"-arch\".to_string(),\n-            arch_name.to_string(),\n-            \"-isysroot\".to_string(),\n-            sdk_root.clone(),\n-            \"-Wl,-syslibroot\".to_string(),\n-            sdk_root,\n-        ],\n-    );\n-\n-    Ok(args)\n-}\n-\n fn target_cpu(arch: Arch) -> String {\n     match arch {\n         Armv7 => \"cortex-a8\", // iOS7 is supported on iPhone 4 and higher\n@@ -137,15 +31,13 @@ fn link_env_remove(arch: Arch) -> Vec<String> {\n     }\n }\n \n-pub fn opts(arch: Arch, os: AppleOS) -> Result<TargetOptions, String> {\n-    let pre_link_args = build_pre_link_args(arch, os)?;\n-    Ok(TargetOptions {\n+pub fn opts(arch: Arch) -> TargetOptions {\n+    TargetOptions {\n         cpu: target_cpu(arch),\n         executables: true,\n-        pre_link_args,\n         link_env_remove: link_env_remove(arch),\n         has_elf_tls: false,\n         eliminate_frame_pointer: false,\n         ..super::apple_base::opts()\n-    })\n+    }\n }"}, {"sha": "6dafcc2c3453a3f3d3c066f50a00ae105909bbf5", "filename": "compiler/rustc_target/src/spec/armv7_apple_ios.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c29a29cba099aef1e05c83970decdcbedaabd69a/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c29a29cba099aef1e05c83970decdcbedaabd69a/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_apple_ios.rs?ref=c29a29cba099aef1e05c83970decdcbedaabd69a", "patch": "@@ -1,8 +1,8 @@\n-use super::apple_sdk_base::{opts, AppleOS, Arch};\n+use super::apple_sdk_base::{opts, Arch};\n use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n-    let base = opts(Arch::Armv7, AppleOS::iOS)?;\n+    let base = opts(Arch::Armv7);\n     Ok(Target {\n         llvm_target: \"armv7-apple-ios\".to_string(),\n         target_endian: \"little\".to_string(),"}, {"sha": "d6c99c4ade6e807936138ed27cc517ef34a2a8a3", "filename": "compiler/rustc_target/src/spec/armv7s_apple_ios.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c29a29cba099aef1e05c83970decdcbedaabd69a/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7s_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c29a29cba099aef1e05c83970decdcbedaabd69a/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7s_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7s_apple_ios.rs?ref=c29a29cba099aef1e05c83970decdcbedaabd69a", "patch": "@@ -1,8 +1,8 @@\n-use super::apple_sdk_base::{opts, AppleOS, Arch};\n+use super::apple_sdk_base::{opts, Arch};\n use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n-    let base = opts(Arch::Armv7s, AppleOS::iOS)?;\n+    let base = opts(Arch::Armv7s);\n     Ok(Target {\n         llvm_target: \"armv7s-apple-ios\".to_string(),\n         target_endian: \"little\".to_string(),"}, {"sha": "6cb209ab1c0739ceb9c44a1587574c4241926e9f", "filename": "compiler/rustc_target/src/spec/i386_apple_ios.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c29a29cba099aef1e05c83970decdcbedaabd69a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi386_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c29a29cba099aef1e05c83970decdcbedaabd69a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi386_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi386_apple_ios.rs?ref=c29a29cba099aef1e05c83970decdcbedaabd69a", "patch": "@@ -1,8 +1,8 @@\n-use super::apple_sdk_base::{opts, AppleOS, Arch};\n+use super::apple_sdk_base::{opts, Arch};\n use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n-    let base = opts(Arch::I386, AppleOS::iOS)?;\n+    let base = opts(Arch::I386);\n     Ok(Target {\n         llvm_target: \"i386-apple-ios\".to_string(),\n         target_endian: \"little\".to_string(),"}, {"sha": "fd3e4e2f57b669079bc592d02c32d483665aa489", "filename": "compiler/rustc_target/src/spec/x86_64_apple_ios.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c29a29cba099aef1e05c83970decdcbedaabd69a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c29a29cba099aef1e05c83970decdcbedaabd69a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios.rs?ref=c29a29cba099aef1e05c83970decdcbedaabd69a", "patch": "@@ -1,8 +1,8 @@\n-use super::apple_sdk_base::{opts, AppleOS, Arch};\n+use super::apple_sdk_base::{opts, Arch};\n use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n-    let base = opts(Arch::X86_64, AppleOS::iOS)?;\n+    let base = opts(Arch::X86_64);\n     Ok(Target {\n         llvm_target: \"x86_64-apple-ios\".to_string(),\n         target_endian: \"little\".to_string(),"}, {"sha": "4cfbd9eba06c78957d41ed7134d7bd938c33850d", "filename": "compiler/rustc_target/src/spec/x86_64_apple_ios_macabi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c29a29cba099aef1e05c83970decdcbedaabd69a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios_macabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c29a29cba099aef1e05c83970decdcbedaabd69a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios_macabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios_macabi.rs?ref=c29a29cba099aef1e05c83970decdcbedaabd69a", "patch": "@@ -1,8 +1,8 @@\n-use super::apple_sdk_base::{opts, AppleOS, Arch};\n+use super::apple_sdk_base::{opts, Arch};\n use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n-    let base = opts(Arch::X86_64_macabi, AppleOS::iOS)?;\n+    let base = opts(Arch::X86_64_macabi);\n     Ok(Target {\n         llvm_target: \"x86_64-apple-ios13.0-macabi\".to_string(),\n         target_endian: \"little\".to_string(),"}, {"sha": "664a3ed8816c4c7fe67319f4ea8a3172fe44a27e", "filename": "compiler/rustc_target/src/spec/x86_64_apple_tvos.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c29a29cba099aef1e05c83970decdcbedaabd69a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_tvos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c29a29cba099aef1e05c83970decdcbedaabd69a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_tvos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_tvos.rs?ref=c29a29cba099aef1e05c83970decdcbedaabd69a", "patch": "@@ -1,8 +1,8 @@\n-use super::apple_sdk_base::{opts, AppleOS, Arch};\n+use super::apple_sdk_base::{opts, Arch};\n use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n-    let base = opts(Arch::X86_64, AppleOS::iOS)?;\n+    let base = opts(Arch::X86_64);\n     Ok(Target {\n         llvm_target: \"x86_64-apple-tvos\".to_string(),\n         target_endian: \"little\".to_string(),"}]}