{"sha": "3f7db370efffa24143e6a2415e6fda314f3de058", "node_id": "C_kwDOAAsO6NoAKDNmN2RiMzcwZWZmZmEyNDE0M2U2YTI0MTVlNmZkYTMxNGYzZGUwNTg", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-08-04T02:26:10Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-08-04T14:27:00Z"}, "message": "captures -> collected_lifetimes", "tree": {"sha": "2e5201a6219053fb583db21e47f7de60e4aedc20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e5201a6219053fb583db21e47f7de60e4aedc20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f7db370efffa24143e6a2415e6fda314f3de058", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmLr1zQACgkQgTGiTgx5\n76/l3w/+M8l8jf27/S+BWzErSxWGpSsLv8T0hnefKQvkvd4NN04JGrxXuvNS64xL\nl+Ym8HXsjmTODLBBRcSvwYU9pOdhAB6K3uOjvSWtcEYts04qrFEcQxguvSEiRKZz\njhc/1Fmbe1JHcxcbyFOaryBc7rqROOn7PJs6Zu8f1fVURlW45chYnX7McvXANLEQ\nMhxIMH5/YLkiHk4GWlKo69RTbZYHsBBl57BmEh+y8ICzg5JdriPlKegJ8ISCMpEV\n+gH4mC3+nZZvSFY02C/th2xzp5QJJjFPGSoC/uhAj/I+0VB1ZLw68Q4TChghTkiS\nLbyhjwOQ7v4/s5mAntDgt8z0m3mhM3zkd5oWx/fwI+WypBxezosGaMlDf3KPZZIo\nqqCXaurfw94Iw70Zc0ZKA/zxhAuLYRMR33kx0qOW7b17cuzl2cuGRbcAaONnfc8O\n7xzdzEN+0Xg1Jdka+d0udOSdUrw3FrroLqxRSWBHOJyLht2eN8l9+LqZKEVNCJ2Z\nLXUZN0lR76qc8MWjzYHbK7JHE2INfDz0E56ni2miVofupaXaeoDprx+lBZmiaEPY\nGcbVWclqjmNalLweNSzIY0WdT3uKBWzzboRIZVV663ViZnvL5zI23Kd+DlvPH9cf\nIj4LIoUgewNbzL3EkCetrMjdSph4x1Cj27fpfqVeXo7Y8N7Ob2Y=\n=t8X/\n-----END PGP SIGNATURE-----", "payload": "tree 2e5201a6219053fb583db21e47f7de60e4aedc20\nparent 12fa3393a587f17dcea70d62ca1ee66140fb3068\nauthor Santiago Pastorino <spastorino@gmail.com> 1659579970 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1659623220 -0300\n\ncaptures -> collected_lifetimes\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f7db370efffa24143e6a2415e6fda314f3de058", "html_url": "https://github.com/rust-lang/rust/commit/3f7db370efffa24143e6a2415e6fda314f3de058", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f7db370efffa24143e6a2415e6fda314f3de058/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12fa3393a587f17dcea70d62ca1ee66140fb3068", "url": "https://api.github.com/repos/rust-lang/rust/commits/12fa3393a587f17dcea70d62ca1ee66140fb3068", "html_url": "https://github.com/rust-lang/rust/commit/12fa3393a587f17dcea70d62ca1ee66140fb3068"}], "stats": {"total": 19, "additions": 10, "deletions": 9}, "files": [{"sha": "c245913a05b774e7f42829b2202332d82d0221e7", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3f7db370efffa24143e6a2415e6fda314f3de058/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7db370efffa24143e6a2415e6fda314f3de058/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=3f7db370efffa24143e6a2415e6fda314f3de058", "patch": "@@ -1768,7 +1768,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n         // Contains the new lifetime definitions created for the TAIT (if any) generated for the\n         // return type.\n-        let mut captures = Vec::new();\n+        let mut collected_lifetimes = Vec::new();\n         let mut new_remapping = FxHashMap::default();\n \n         let extra_lifetime_params = self.resolver.take_extra_lifetime_params(opaque_ty_node_id);\n@@ -1804,10 +1804,10 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             };\n \n             let lifetime = Lifetime { id: outer_node_id, ident };\n-            captures.push((inner_node_id, lifetime, Some(inner_res)));\n+            collected_lifetimes.push((inner_node_id, lifetime, Some(inner_res)));\n         }\n \n-        debug!(?captures);\n+        debug!(?collected_lifetimes);\n \n         // We only want to capture the lifetimes that appear in the bounds. So visit the bounds to\n         // find out exactly which ones those are.\n@@ -1820,7 +1820,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             // If this opaque type is only capturing a subset of the lifetimes (those that appear\n             // in bounds), then create the new lifetime parameters required and create a mapping\n             // from the old `'a` (on the function) to the new `'a` (on the opaque type).\n-            captures.extend(\n+            collected_lifetimes.extend(\n                 this.create_lifetime_defs(\n                     opaque_ty_def_id,\n                     &lifetimes_to_remap,\n@@ -1829,7 +1829,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 .into_iter()\n                 .map(|(new_node_id, lifetime)| (new_node_id, lifetime, None)),\n             );\n-            debug!(?captures);\n+            debug!(?collected_lifetimes);\n             debug!(?new_remapping);\n \n             // Install the remapping from old to new (if any):\n@@ -1845,7 +1845,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 let future_bound =\n                     this.lower_async_fn_output_type_to_future_bound(output, fn_def_id, span);\n \n-                let generic_params = this.arena.alloc_from_iter(captures.iter().map(\n+                let generic_params = this.arena.alloc_from_iter(collected_lifetimes.iter().map(\n                     |&(new_node_id, lifetime, _)| {\n                         let hir_id = this.lower_node_id(new_node_id);\n                         debug_assert_ne!(this.opt_local_def_id(new_node_id), None);\n@@ -1903,8 +1903,8 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         //\n         // For the \"output\" lifetime parameters, we just want to\n         // generate `'_`.\n-        let generic_args =\n-            self.arena.alloc_from_iter(captures.into_iter().map(|(_, lifetime, res)| {\n+        let generic_args = self.arena.alloc_from_iter(collected_lifetimes.into_iter().map(\n+            |(_, lifetime, res)| {\n                 let id = self.next_node_id();\n                 let span = lifetime.ident.span;\n \n@@ -1919,7 +1919,8 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 );\n                 let l = self.new_named_lifetime_with_res(id, span, ident, res);\n                 hir::GenericArg::Lifetime(l)\n-            }));\n+            },\n+        ));\n \n         // Create the `Foo<...>` reference itself. Note that the `type\n         // Foo = impl Trait` is, internally, created as a child of the"}]}