{"sha": "4d1e1daa31239cb71a81c6958c1b9137274fd189", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkMWUxZGFhMzEyMzljYjcxYTgxYzY5NThjMWI5MTM3Mjc0ZmQxODk=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-03-16T15:36:34Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-03-16T15:36:34Z"}, "message": "Implement HirDisplay for some more types", "tree": {"sha": "11ceca4b2d4f0aa866baa1b9ea42af40dab99866", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11ceca4b2d4f0aa866baa1b9ea42af40dab99866"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d1e1daa31239cb71a81c6958c1b9137274fd189", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d1e1daa31239cb71a81c6958c1b9137274fd189", "html_url": "https://github.com/rust-lang/rust/commit/4d1e1daa31239cb71a81c6958c1b9137274fd189", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d1e1daa31239cb71a81c6958c1b9137274fd189/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4ed3e1551f828d44dcd8e0caf08420438e5eb1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4ed3e1551f828d44dcd8e0caf08420438e5eb1a", "html_url": "https://github.com/rust-lang/rust/commit/b4ed3e1551f828d44dcd8e0caf08420438e5eb1a"}], "stats": {"total": 48, "additions": 32, "deletions": 16}, "files": [{"sha": "81f0e04e55c74cab274c24655792f16a51fcfa5d", "filename": "crates/hir/src/display.rs", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4d1e1daa31239cb71a81c6958c1b9137274fd189/crates%2Fhir%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d1e1daa31239cb71a81c6958c1b9137274fd189/crates%2Fhir%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdisplay.rs?ref=4d1e1daa31239cb71a81c6958c1b9137274fd189", "patch": "@@ -12,8 +12,8 @@ use hir_ty::display::{\n use syntax::ast::{self, NameOwner};\n \n use crate::{\n-    Const, ConstParam, Enum, Field, Function, HasVisibility, Module, Static, Struct, Substs, Trait,\n-    Type, TypeAlias, TypeParam, Union, Variant,\n+    Adt, Const, ConstParam, Enum, Field, Function, GenericParam, HasVisibility, LifetimeParam,\n+    Module, Static, Struct, Substs, Trait, Type, TypeAlias, TypeParam, Union, Variant,\n };\n \n impl HirDisplay for Function {\n@@ -120,6 +120,16 @@ impl HirDisplay for Function {\n     }\n }\n \n+impl HirDisplay for Adt {\n+    fn hir_fmt(&self, f: &mut HirFormatter) -> Result<(), HirDisplayError> {\n+        match self {\n+            Adt::Struct(it) => it.hir_fmt(f),\n+            Adt::Union(it) => it.hir_fmt(f),\n+            Adt::Enum(it) => it.hir_fmt(f),\n+        }\n+    }\n+}\n+\n impl HirDisplay for Struct {\n     fn hir_fmt(&self, f: &mut HirFormatter) -> Result<(), HirDisplayError> {\n         write_visibility(self.module(f.db).id, self.visibility(f.db), f)?;\n@@ -211,6 +221,16 @@ impl HirDisplay for Type {\n     }\n }\n \n+impl HirDisplay for GenericParam {\n+    fn hir_fmt(&self, f: &mut HirFormatter) -> Result<(), HirDisplayError> {\n+        match self {\n+            GenericParam::TypeParam(it) => it.hir_fmt(f),\n+            GenericParam::LifetimeParam(it) => it.hir_fmt(f),\n+            GenericParam::ConstParam(it) => it.hir_fmt(f),\n+        }\n+    }\n+}\n+\n impl HirDisplay for TypeParam {\n     fn hir_fmt(&self, f: &mut HirFormatter) -> Result<(), HirDisplayError> {\n         write!(f, \"{}\", self.name(f.db))?;\n@@ -224,6 +244,12 @@ impl HirDisplay for TypeParam {\n     }\n }\n \n+impl HirDisplay for LifetimeParam {\n+    fn hir_fmt(&self, f: &mut HirFormatter) -> Result<(), HirDisplayError> {\n+        write!(f, \"{}\", self.name(f.db))\n+    }\n+}\n+\n impl HirDisplay for ConstParam {\n     fn hir_fmt(&self, f: &mut HirFormatter) -> Result<(), HirDisplayError> {\n         write!(f, \"const {}: \", self.name(f.db))?;"}, {"sha": "32501462211bca553605776fc13d34482d127cf7", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4d1e1daa31239cb71a81c6958c1b9137274fd189/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d1e1daa31239cb71a81c6958c1b9137274fd189/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=4d1e1daa31239cb71a81c6958c1b9137274fd189", "patch": "@@ -1,6 +1,6 @@\n use either::Either;\n use hir::{\n-    Adt, AsAssocItem, AssocItemContainer, GenericParam, HasAttrs, HasSource, HirDisplay, Module,\n+    AsAssocItem, AssocItemContainer, GenericParam, HasAttrs, HasSource, HirDisplay, Module,\n     ModuleDef, Semantics,\n };\n use ide_db::{\n@@ -339,9 +339,7 @@ fn hover_for_definition(\n         Definition::ModuleDef(it) => match it {\n             ModuleDef::Module(it) => from_hir_fmt(db, it, mod_path),\n             ModuleDef::Function(it) => from_hir_fmt(db, it, mod_path),\n-            ModuleDef::Adt(Adt::Struct(it)) => from_hir_fmt(db, it, mod_path),\n-            ModuleDef::Adt(Adt::Union(it)) => from_hir_fmt(db, it, mod_path),\n-            ModuleDef::Adt(Adt::Enum(it)) => from_hir_fmt(db, it, mod_path),\n+            ModuleDef::Adt(it) => from_hir_fmt(db, it, mod_path),\n             ModuleDef::Variant(it) => from_hir_fmt(db, it, mod_path),\n             ModuleDef::Const(it) => from_hir_fmt(db, it, mod_path),\n             ModuleDef::Static(it) => from_hir_fmt(db, it, mod_path),\n@@ -353,18 +351,10 @@ fn hover_for_definition(\n         },\n         Definition::Local(it) => hover_for_local(it, db),\n         Definition::SelfType(impl_def) => {\n-            impl_def.target_ty(db).as_adt().and_then(|adt| match adt {\n-                Adt::Struct(it) => from_hir_fmt(db, it, mod_path),\n-                Adt::Union(it) => from_hir_fmt(db, it, mod_path),\n-                Adt::Enum(it) => from_hir_fmt(db, it, mod_path),\n-            })\n+            impl_def.target_ty(db).as_adt().and_then(|adt| from_hir_fmt(db, adt, mod_path))\n         }\n+        Definition::GenericParam(it) => from_hir_fmt(db, it, None),\n         Definition::Label(it) => Some(Markup::fenced_block(&it.name(db))),\n-        Definition::GenericParam(it) => match it {\n-            GenericParam::TypeParam(it) => Some(Markup::fenced_block(&it.display(db))),\n-            GenericParam::LifetimeParam(it) => Some(Markup::fenced_block(&it.name(db))),\n-            GenericParam::ConstParam(it) => Some(Markup::fenced_block(&it.display(db))),\n-        },\n     };\n \n     fn from_hir_fmt<D>(db: &RootDatabase, def: D, mod_path: Option<String>) -> Option<Markup>"}]}