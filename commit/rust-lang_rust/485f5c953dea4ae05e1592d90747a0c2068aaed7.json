{"sha": "485f5c953dea4ae05e1592d90747a0c2068aaed7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4NWY1Yzk1M2RlYTRhZTA1ZTE1OTJkOTA3NDdhMGMyMDY4YWFlZDc=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-10-06T04:55:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-06T04:55:11Z"}, "message": "Rollup merge of #65130 - davidtwco:rfc-2008-improper-ctypes, r=petrochenkov\n\nlint: extern non-exhaustive types are improper\n\nThis PR makes the `improper_ctype` lint trigger for non-exhaustive types when those types aren't defined in the current crate, as per [this comment](https://github.com/rust-lang/rust/issues/44109#issuecomment-537583344).\n\ncc @Centril", "tree": {"sha": "13aa35ce267d056480515208f24cc3abf39eb1f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13aa35ce267d056480515208f24cc3abf39eb1f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/485f5c953dea4ae05e1592d90747a0c2068aaed7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdmXOvCRBK7hj4Ov3rIwAAdHIIACCSgq3KCl20xrGZN9ncdxtU\n/n+g834psksO2sFDXe6aehTle2oNw2AHXB46EPv6NIIT9kuyD8d1kQNF3WUMg58D\n+Prg5wCITjdhoLxfM9wzei+Q0NWNqj2EIlR/sdpBwgaiRYj+eM1OBov1gBfu6Mdq\nI7LI1HVhoiZ3E11jO8PyQ0aQyCcTRE6GkmSisJ+hWumj34J5hiZaoFCpm/eBtXCk\n0om5k4LtuNo+4njK+xDreZ4LbLwRKuZbKN3QyoU62azMtFU6LVgrKS4Kn7xUEMEl\nF0AsNObNsDC7fKQSH92+28vOgr9wCEqMA9f6WADrVKx6VeE/RL6Hn1ifq/k2hH4=\n=lrAN\n-----END PGP SIGNATURE-----\n", "payload": "tree 13aa35ce267d056480515208f24cc3abf39eb1f2\nparent d54082e5adcdd002339421f8539519d0003755bd\nparent 080aa8663550c221221123a87f7c56bd1b7dc564\nauthor Tyler Mandry <tmandry@gmail.com> 1570337711 -0700\ncommitter GitHub <noreply@github.com> 1570337711 -0700\n\nRollup merge of #65130 - davidtwco:rfc-2008-improper-ctypes, r=petrochenkov\n\nlint: extern non-exhaustive types are improper\n\nThis PR makes the `improper_ctype` lint trigger for non-exhaustive types when those types aren't defined in the current crate, as per [this comment](https://github.com/rust-lang/rust/issues/44109#issuecomment-537583344).\n\ncc @Centril\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/485f5c953dea4ae05e1592d90747a0c2068aaed7", "html_url": "https://github.com/rust-lang/rust/commit/485f5c953dea4ae05e1592d90747a0c2068aaed7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/485f5c953dea4ae05e1592d90747a0c2068aaed7/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d54082e5adcdd002339421f8539519d0003755bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/d54082e5adcdd002339421f8539519d0003755bd", "html_url": "https://github.com/rust-lang/rust/commit/d54082e5adcdd002339421f8539519d0003755bd"}, {"sha": "080aa8663550c221221123a87f7c56bd1b7dc564", "url": "https://api.github.com/repos/rust-lang/rust/commits/080aa8663550c221221123a87f7c56bd1b7dc564", "html_url": "https://github.com/rust-lang/rust/commit/080aa8663550c221221123a87f7c56bd1b7dc564"}], "stats": {"total": 175, "additions": 175, "deletions": 0}, "files": [{"sha": "aa6dfa50dddf3030267ec8325078545196ae0296", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/485f5c953dea4ae05e1592d90747a0c2068aaed7/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485f5c953dea4ae05e1592d90747a0c2068aaed7/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=485f5c953dea4ae05e1592d90747a0c2068aaed7", "patch": "@@ -631,6 +631,16 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                             };\n                         }\n \n+                        let is_non_exhaustive =\n+                            def.non_enum_variant().is_field_list_non_exhaustive();\n+                        if is_non_exhaustive && !def.did.is_local() {\n+                            return FfiUnsafe {\n+                                ty,\n+                                reason: \"this struct is non-exhaustive\",\n+                                help: None,\n+                            };\n+                        }\n+\n                         if def.non_enum_variant().fields.is_empty() {\n                             return FfiUnsafe {\n                                 ty,\n@@ -730,8 +740,25 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                             }\n                         }\n \n+                        if def.is_variant_list_non_exhaustive() && !def.did.is_local() {\n+                            return FfiUnsafe {\n+                                ty,\n+                                reason: \"this enum is non-exhaustive\",\n+                                help: None,\n+                            };\n+                        }\n+\n                         // Check the contained variants.\n                         for variant in &def.variants {\n+                            let is_non_exhaustive = variant.is_field_list_non_exhaustive();\n+                            if is_non_exhaustive && !variant.def_id.is_local() {\n+                                return FfiUnsafe {\n+                                    ty,\n+                                    reason: \"this enum has non-exhaustive variants\",\n+                                    help: None,\n+                                };\n+                            }\n+\n                             for field in &variant.fields {\n                                 let field_ty = cx.normalize_erasing_regions(\n                                     ParamEnv::reveal_all(),"}, {"sha": "1a187d042517e170255a29a1f89f4587bbee8640", "filename": "src/test/ui/rfc-2008-non-exhaustive/improper_ctypes/auxiliary/types.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/485f5c953dea4ae05e1592d90747a0c2068aaed7/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fimproper_ctypes%2Fauxiliary%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485f5c953dea4ae05e1592d90747a0c2068aaed7/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fimproper_ctypes%2Fauxiliary%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fimproper_ctypes%2Fauxiliary%2Ftypes.rs?ref=485f5c953dea4ae05e1592d90747a0c2068aaed7", "patch": "@@ -0,0 +1,31 @@\n+#![feature(non_exhaustive)]\n+\n+#[non_exhaustive]\n+#[repr(C)]\n+pub enum NonExhaustiveEnum {\n+    Unit,\n+    Tuple(u32),\n+    Struct { field: u32 }\n+}\n+\n+#[non_exhaustive]\n+#[repr(C)]\n+pub struct NormalStruct {\n+    pub first_field: u16,\n+    pub second_field: u16,\n+}\n+\n+#[non_exhaustive]\n+#[repr(C)]\n+pub struct UnitStruct;\n+\n+#[non_exhaustive]\n+#[repr(C)]\n+pub struct TupleStruct (pub u16, pub u16);\n+\n+#[repr(C)]\n+pub enum NonExhaustiveVariants {\n+    #[non_exhaustive] Unit,\n+    #[non_exhaustive] Tuple(u32),\n+    #[non_exhaustive] Struct { field: u32 }\n+}"}, {"sha": "900b9333f76e8ffe9d7dd3dea9854f5da9d36468", "filename": "src/test/ui/rfc-2008-non-exhaustive/improper_ctypes/extern_crate_improper.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/485f5c953dea4ae05e1592d90747a0c2068aaed7/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fimproper_ctypes%2Fextern_crate_improper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485f5c953dea4ae05e1592d90747a0c2068aaed7/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fimproper_ctypes%2Fextern_crate_improper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fimproper_ctypes%2Fextern_crate_improper.rs?ref=485f5c953dea4ae05e1592d90747a0c2068aaed7", "patch": "@@ -0,0 +1,24 @@\n+// aux-build:types.rs\n+#![deny(improper_ctypes)]\n+\n+extern crate types;\n+\n+// This test checks that non-exhaustive types with `#[repr(C)]` from an extern crate are considered\n+// improper.\n+\n+use types::{NonExhaustiveEnum, NormalStruct, UnitStruct, TupleStruct, NonExhaustiveVariants};\n+\n+extern {\n+    pub fn non_exhaustive_enum(_: NonExhaustiveEnum);\n+    //~^ ERROR `extern` block uses type `types::NonExhaustiveEnum`, which is not FFI-safe\n+    pub fn non_exhaustive_normal_struct(_: NormalStruct);\n+    //~^ ERROR `extern` block uses type `types::NormalStruct`, which is not FFI-safe\n+    pub fn non_exhaustive_unit_struct(_: UnitStruct);\n+    //~^ ERROR `extern` block uses type `types::UnitStruct`, which is not FFI-safe\n+    pub fn non_exhaustive_tuple_struct(_: TupleStruct);\n+    //~^ ERROR `extern` block uses type `types::TupleStruct`, which is not FFI-safe\n+    pub fn non_exhaustive_variant(_: NonExhaustiveVariants);\n+    //~^ ERROR `extern` block uses type `types::NonExhaustiveVariants`, which is not FFI-safe\n+}\n+\n+fn main() { }"}, {"sha": "7fbf1157e56f8bcc6a3d00eeaa8edd83a8bc344a", "filename": "src/test/ui/rfc-2008-non-exhaustive/improper_ctypes/extern_crate_improper.stderr", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/485f5c953dea4ae05e1592d90747a0c2068aaed7/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fimproper_ctypes%2Fextern_crate_improper.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/485f5c953dea4ae05e1592d90747a0c2068aaed7/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fimproper_ctypes%2Fextern_crate_improper.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fimproper_ctypes%2Fextern_crate_improper.stderr?ref=485f5c953dea4ae05e1592d90747a0c2068aaed7", "patch": "@@ -0,0 +1,47 @@\n+error: `extern` block uses type `types::NonExhaustiveEnum`, which is not FFI-safe\n+  --> $DIR/extern_crate_improper.rs:12:35\n+   |\n+LL |     pub fn non_exhaustive_enum(_: NonExhaustiveEnum);\n+   |                                   ^^^^^^^^^^^^^^^^^ not FFI-safe\n+   |\n+note: lint level defined here\n+  --> $DIR/extern_crate_improper.rs:2:9\n+   |\n+LL | #![deny(improper_ctypes)]\n+   |         ^^^^^^^^^^^^^^^\n+   = note: this enum is non-exhaustive\n+\n+error: `extern` block uses type `types::NormalStruct`, which is not FFI-safe\n+  --> $DIR/extern_crate_improper.rs:14:44\n+   |\n+LL |     pub fn non_exhaustive_normal_struct(_: NormalStruct);\n+   |                                            ^^^^^^^^^^^^ not FFI-safe\n+   |\n+   = note: this struct is non-exhaustive\n+\n+error: `extern` block uses type `types::UnitStruct`, which is not FFI-safe\n+  --> $DIR/extern_crate_improper.rs:16:42\n+   |\n+LL |     pub fn non_exhaustive_unit_struct(_: UnitStruct);\n+   |                                          ^^^^^^^^^^ not FFI-safe\n+   |\n+   = note: this struct is non-exhaustive\n+\n+error: `extern` block uses type `types::TupleStruct`, which is not FFI-safe\n+  --> $DIR/extern_crate_improper.rs:18:43\n+   |\n+LL |     pub fn non_exhaustive_tuple_struct(_: TupleStruct);\n+   |                                           ^^^^^^^^^^^ not FFI-safe\n+   |\n+   = note: this struct is non-exhaustive\n+\n+error: `extern` block uses type `types::NonExhaustiveVariants`, which is not FFI-safe\n+  --> $DIR/extern_crate_improper.rs:20:38\n+   |\n+LL |     pub fn non_exhaustive_variant(_: NonExhaustiveVariants);\n+   |                                      ^^^^^^^^^^^^^^^^^^^^^ not FFI-safe\n+   |\n+   = note: this enum has non-exhaustive variants\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "3f38e3cd8e5a7904cf38f1bcef0db9812223d5ca", "filename": "src/test/ui/rfc-2008-non-exhaustive/improper_ctypes/same_crate_proper.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/485f5c953dea4ae05e1592d90747a0c2068aaed7/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fimproper_ctypes%2Fsame_crate_proper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485f5c953dea4ae05e1592d90747a0c2068aaed7/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fimproper_ctypes%2Fsame_crate_proper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fimproper_ctypes%2Fsame_crate_proper.rs?ref=485f5c953dea4ae05e1592d90747a0c2068aaed7", "patch": "@@ -0,0 +1,46 @@\n+// check-pass\n+#![feature(non_exhaustive)]\n+#![deny(improper_ctypes)]\n+\n+// This test checks that non-exhaustive types with `#[repr(C)]` are considered proper within\n+// the defining crate.\n+\n+#[non_exhaustive]\n+#[repr(C)]\n+pub enum NonExhaustiveEnum {\n+    Unit,\n+    Tuple(u32),\n+    Struct { field: u32 }\n+}\n+\n+#[non_exhaustive]\n+#[repr(C)]\n+pub struct NormalStruct {\n+    pub first_field: u16,\n+    pub second_field: u16,\n+}\n+\n+#[non_exhaustive]\n+#[repr(C)]\n+pub struct UnitStruct;\n+\n+#[non_exhaustive]\n+#[repr(C)]\n+pub struct TupleStruct (pub u16, pub u16);\n+\n+#[repr(C)]\n+pub enum NonExhaustiveVariants {\n+    #[non_exhaustive] Unit,\n+    #[non_exhaustive] Tuple(u32),\n+    #[non_exhaustive] Struct { field: u32 }\n+}\n+\n+extern {\n+    // Unit structs aren't tested here because they will trigger `improper_ctypes` anyway.\n+    pub fn non_exhaustive_enum(_: NonExhaustiveEnum);\n+    pub fn non_exhaustive_normal_struct(_: NormalStruct);\n+    pub fn non_exhaustive_tuple_struct(_: TupleStruct);\n+    pub fn non_exhaustive_variant(_: NonExhaustiveVariants);\n+}\n+\n+fn main() { }"}]}