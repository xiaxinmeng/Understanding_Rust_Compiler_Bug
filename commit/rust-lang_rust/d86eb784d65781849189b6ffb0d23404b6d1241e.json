{"sha": "d86eb784d65781849189b6ffb0d23404b6d1241e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4NmViNzg0ZDY1NzgxODQ5MTg5YjZmZmIwZDIzNDA0YjZkMTI0MWU=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-01-21T18:46:14Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-06-19T01:19:50Z"}, "message": "Parallelize trans item collection", "tree": {"sha": "6cb65829139437c33459926f15a1c216bc886765", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6cb65829139437c33459926f15a1c216bc886765"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d86eb784d65781849189b6ffb0d23404b6d1241e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d86eb784d65781849189b6ffb0d23404b6d1241e", "html_url": "https://github.com/rust-lang/rust/commit/d86eb784d65781849189b6ffb0d23404b6d1241e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d86eb784d65781849189b6ffb0d23404b6d1241e/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71c26b3171a62a0ba70bfe0f074653d236e6e20d", "url": "https://api.github.com/repos/rust-lang/rust/commits/71c26b3171a62a0ba70bfe0f074653d236e6e20d", "html_url": "https://github.com/rust-lang/rust/commit/71c26b3171a62a0ba70bfe0f074653d236e6e20d"}], "stats": {"total": 45, "additions": 27, "deletions": 18}, "files": [{"sha": "dc0d0b244633f28de71e578dbd136b23c9a3d5f5", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d86eb784d65781849189b6ffb0d23404b6d1241e/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d86eb784d65781849189b6ffb0d23404b6d1241e/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=d86eb784d65781849189b6ffb0d23404b6d1241e", "patch": "@@ -34,7 +34,10 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![feature(specialization)]\n #![feature(try_trait)]\n \n+#![recursion_limit=\"256\"]\n+\n extern crate arena;\n+\n #[macro_use]\n extern crate bitflags;\n #[macro_use] extern crate log;"}, {"sha": "9e1223fe29cd68d8a5f571cd3b11cd6c2361c4ac", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 24, "deletions": 18, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/d86eb784d65781849189b6ffb0d23404b6d1241e/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d86eb784d65781849189b6ffb0d23404b6d1241e/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=d86eb784d65781849189b6ffb0d23404b6d1241e", "patch": "@@ -207,10 +207,12 @@ use rustc::mir::interpret::{Scalar, GlobalId, AllocType};\n \n use monomorphize::{self, Instance};\n use rustc::util::nodemap::{FxHashSet, FxHashMap, DefIdMap};\n+use rustc::util::common::time;\n \n use monomorphize::item::{MonoItemExt, DefPathBasedNames, InstantiationMode};\n \n use rustc_data_structures::bitvec::BitVector;\n+use rustc_data_structures::sync::{ParallelIterator, par_iter, Lock};\n \n #[derive(PartialEq, Eq, Hash, Clone, Copy, Debug)]\n pub enum MonoItemCollectionMode {\n@@ -298,22 +300,26 @@ pub fn collect_crate_mono_items<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                           mode: MonoItemCollectionMode)\n                                           -> (FxHashSet<MonoItem<'tcx>>,\n                                                      InliningMap<'tcx>) {\n-    let roots = collect_roots(tcx, mode);\n+    let roots = time(tcx.sess, \"collecting roots\", || {\n+        collect_roots(tcx, mode)\n+    });\n \n     debug!(\"Building mono item graph, beginning at roots\");\n-    let mut visited = FxHashSet();\n-    let mut recursion_depths = DefIdMap();\n-    let mut inlining_map = InliningMap::new();\n-\n-    for root in roots {\n-        collect_items_rec(tcx,\n-                          root,\n-                          &mut visited,\n-                          &mut recursion_depths,\n-                          &mut inlining_map);\n-    }\n+    let visited = Lock::new(FxHashSet());\n+    let inlining_map = Lock::new(InliningMap::new());\n+\n+    time(tcx.sess, \"collecting mono items\", || {\n+        par_iter(roots).for_each(|root| {\n+            let mut recursion_depths = DefIdMap();\n+            collect_items_rec(tcx,\n+                              root,\n+                              &visited,\n+                              &mut recursion_depths,\n+                              &inlining_map);\n+        });\n+    });\n \n-    (visited, inlining_map)\n+    (visited.into_inner(), inlining_map.into_inner())\n }\n \n // Find all non-generic items by walking the HIR. These items serve as roots to\n@@ -354,10 +360,10 @@ fn collect_roots<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n // Collect all monomorphized items reachable from `starting_point`\n fn collect_items_rec<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                    starting_point: MonoItem<'tcx>,\n-                                   visited: &mut FxHashSet<MonoItem<'tcx>>,\n+                                   visited: &Lock<FxHashSet<MonoItem<'tcx>>>,\n                                    recursion_depths: &mut DefIdMap<usize>,\n-                                   inlining_map: &mut InliningMap<'tcx>) {\n-    if !visited.insert(starting_point.clone()) {\n+                                   inlining_map: &Lock<InliningMap<'tcx>>) {\n+    if !visited.lock().insert(starting_point.clone()) {\n         // We've been here already, no need to search again.\n         return;\n     }\n@@ -428,7 +434,7 @@ fn collect_items_rec<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n fn record_accesses<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                              caller: MonoItem<'tcx>,\n                              callees: &[MonoItem<'tcx>],\n-                             inlining_map: &mut InliningMap<'tcx>) {\n+                             inlining_map: &Lock<InliningMap<'tcx>>) {\n     let is_inlining_candidate = |mono_item: &MonoItem<'tcx>| {\n         mono_item.instantiation_mode(tcx) == InstantiationMode::LocalCopy\n     };\n@@ -438,7 +444,7 @@ fn record_accesses<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                              (*mono_item, is_inlining_candidate(mono_item))\n                           });\n \n-    inlining_map.record_accesses(caller, accesses);\n+    inlining_map.lock().record_accesses(caller, accesses);\n }\n \n fn check_recursion_limit<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,"}]}