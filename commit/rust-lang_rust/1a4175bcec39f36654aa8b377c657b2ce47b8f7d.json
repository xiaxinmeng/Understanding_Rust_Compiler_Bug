{"sha": "1a4175bcec39f36654aa8b377c657b2ce47b8f7d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhNDE3NWJjZWMzOWYzNjY1NGFhOGIzNzdjNjU3YjJjZTQ3YjhmN2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-06T21:34:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-06T21:34:50Z"}, "message": "Auto merge of #6126 - flip1995:rustup, r=flip1995\n\nRustup\n\nSupersedes #6121. There was another breakage.\n\nr? `@ghost`\n\nchangelog: none", "tree": {"sha": "a7127b0bf2627d6117f7af7f9e96c7ec1eef1e1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7127b0bf2627d6117f7af7f9e96c7ec1eef1e1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a4175bcec39f36654aa8b377c657b2ce47b8f7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a4175bcec39f36654aa8b377c657b2ce47b8f7d", "html_url": "https://github.com/rust-lang/rust/commit/1a4175bcec39f36654aa8b377c657b2ce47b8f7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a4175bcec39f36654aa8b377c657b2ce47b8f7d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9fdeef643329266cedb67369328795c4abb7740", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9fdeef643329266cedb67369328795c4abb7740", "html_url": "https://github.com/rust-lang/rust/commit/c9fdeef643329266cedb67369328795c4abb7740"}, {"sha": "b05aeaa9bce36d69d9ee13d1b5f6a271b6e8c1e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/b05aeaa9bce36d69d9ee13d1b5f6a271b6e8c1e5", "html_url": "https://github.com/rust-lang/rust/commit/b05aeaa9bce36d69d9ee13d1b5f6a271b6e8c1e5"}], "stats": {"total": 29, "additions": 11, "deletions": 18}, "files": [{"sha": "062c9bd2d9e6c9eb83770ec5c342a4d48bd1da46", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a4175bcec39f36654aa8b377c657b2ce47b8f7d/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a4175bcec39f36654aa8b377c657b2ce47b8f7d/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=1a4175bcec39f36654aa8b377c657b2ce47b8f7d", "patch": "@@ -155,7 +155,7 @@ pub fn lit_to_constant(lit: &LitKind, ty: Option<Ty<'_>>) -> Constant {\n     match *lit {\n         LitKind::Str(ref is, _) => Constant::Str(is.to_string()),\n         LitKind::Byte(b) => Constant::Int(u128::from(b)),\n-        LitKind::ByteStr(ref s) => Constant::Binary(Lrc::from(s.as_slice())),\n+        LitKind::ByteStr(ref s) => Constant::Binary(Lrc::clone(s)),\n         LitKind::Char(c) => Constant::Char(c),\n         LitKind::Int(n, _) => Constant::Int(n),\n         LitKind::Float(ref is, LitFloatType::Suffixed(fty)) => match fty {"}, {"sha": "71a30d1c33d4f385bfd918058ede1a3df2fd4049", "filename": "clippy_lints/src/future_not_send.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a4175bcec39f36654aa8b377c657b2ce47b8f7d/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a4175bcec39f36654aa8b377c657b2ce47b8f7d/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffuture_not_send.rs?ref=1a4175bcec39f36654aa8b377c657b2ce47b8f7d", "patch": "@@ -3,6 +3,7 @@ use rustc_hir::intravisit::FnKind;\n use rustc_hir::{Body, FnDecl, HirId};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::{Opaque, PredicateAtom::Trait};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{sym, Span};\n@@ -62,9 +63,10 @@ impl<'tcx> LateLintPass<'tcx> for FutureNotSend {\n         }\n         let ret_ty = utils::return_ty(cx, hir_id);\n         if let Opaque(id, subst) = *ret_ty.kind() {\n-            let preds = cx.tcx.predicates_of(id).instantiate(cx.tcx, subst);\n+            let preds = cx.tcx.explicit_item_bounds(id);\n             let mut is_future = false;\n-            for p in preds.predicates {\n+            for &(p, _span) in preds {\n+                let p = p.subst(cx.tcx, subst);\n                 if let Some(trait_ref) = p.to_opt_poly_trait_ref() {\n                     if Some(trait_ref.def_id()) == cx.tcx.lang_items().future_trait() {\n                         is_future = true;"}, {"sha": "ec70b2f1e2039fe92912755991e20fedbbff9a43", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a4175bcec39f36654aa8b377c657b2ce47b8f7d/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a4175bcec39f36654aa8b377c657b2ce47b8f7d/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=1a4175bcec39f36654aa8b377c657b2ce47b8f7d", "patch": "@@ -1667,7 +1667,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             // if return type is impl trait, check the associated types\n             if let ty::Opaque(def_id, _) = *ret_ty.kind() {\n                 // one of the associated types must be Self\n-                for &(predicate, _span) in cx.tcx.predicates_of(def_id).predicates {\n+                for &(predicate, _span) in cx.tcx.explicit_item_bounds(def_id) {\n                     if let ty::PredicateAtom::Projection(projection_predicate) = predicate.skip_binders() {\n                         // walk the associated type and check for Self\n                         if contains_ty(projection_predicate.ty, self_ty) {"}, {"sha": "790ac4f7dd8aa25f6fc0cef183ee27c302bc0bbf", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a4175bcec39f36654aa8b377c657b2ce47b8f7d/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a4175bcec39f36654aa8b377c657b2ce47b8f7d/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=1a4175bcec39f36654aa8b377c657b2ce47b8f7d", "patch": "@@ -1276,7 +1276,7 @@ pub fn is_must_use_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n         },\n         ty::Tuple(ref substs) => substs.types().any(|ty| is_must_use_ty(cx, ty)),\n         ty::Opaque(ref def_id, _) => {\n-            for (predicate, _) in cx.tcx.predicates_of(*def_id).predicates {\n+            for (predicate, _) in cx.tcx.explicit_item_bounds(*def_id) {\n                 if let ty::PredicateAtom::Trait(trait_predicate, _) = predicate.skip_binders() {\n                     if must_use_attr(&cx.tcx.get_attrs(trait_predicate.trait_ref.def_id)).is_some() {\n                         return true;"}, {"sha": "32685038067d6e257f4d9a61f16c2c7bcbe47627", "filename": "tests/ui/attrs.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1a4175bcec39f36654aa8b377c657b2ce47b8f7d/tests%2Fui%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a4175bcec39f36654aa8b377c657b2ce47b8f7d/tests%2Fui%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fattrs.rs?ref=1a4175bcec39f36654aa8b377c657b2ce47b8f7d", "patch": "@@ -3,7 +3,6 @@\n // Test that the whole restriction group is not enabled\n #![warn(clippy::restriction)]\n #![deny(clippy::restriction)]\n-#![forbid(clippy::restriction)]\n #![allow(clippy::missing_docs_in_private_items, clippy::panic, clippy::unreachable)]\n \n #[inline(always)]"}, {"sha": "4324984dd60eb854d431d593729b7b5807938c39", "filename": "tests/ui/attrs.stderr", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1a4175bcec39f36654aa8b377c657b2ce47b8f7d/tests%2Fui%2Fattrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a4175bcec39f36654aa8b377c657b2ce47b8f7d/tests%2Fui%2Fattrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fattrs.stderr?ref=1a4175bcec39f36654aa8b377c657b2ce47b8f7d", "patch": "@@ -1,21 +1,21 @@\n error: you have declared `#[inline(always)]` on `test_attr_lint`. This is usually a bad idea\n-  --> $DIR/attrs.rs:9:1\n+  --> $DIR/attrs.rs:8:1\n    |\n LL | #[inline(always)]\n    | ^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::inline-always` implied by `-D warnings`\n \n error: the since field must contain a semver-compliant version\n-  --> $DIR/attrs.rs:29:14\n+  --> $DIR/attrs.rs:28:14\n    |\n LL | #[deprecated(since = \"forever\")]\n    |              ^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::deprecated-semver` implied by `-D warnings`\n \n error: the since field must contain a semver-compliant version\n-  --> $DIR/attrs.rs:32:14\n+  --> $DIR/attrs.rs:31:14\n    |\n LL | #[deprecated(since = \"1\")]\n    |              ^^^^^^^^^^^\n@@ -37,13 +37,5 @@ LL | #![deny(clippy::restriction)]\n    |\n    = help: try enabling only the lints you really need\n \n-error: restriction lints are not meant to be all enabled\n-  --> $DIR/attrs.rs:6:11\n-   |\n-LL | #![forbid(clippy::restriction)]\n-   |           ^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: try enabling only the lints you really need\n-\n-error: aborting due to 6 previous errors\n+error: aborting due to 5 previous errors\n "}]}