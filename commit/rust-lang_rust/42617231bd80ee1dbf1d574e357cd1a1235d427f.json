{"sha": "42617231bd80ee1dbf1d574e357cd1a1235d427f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyNjE3MjMxYmQ4MGVlMWRiZjFkNTc0ZTM1N2NkMWExMjM1ZDQyN2Y=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-09-13T23:24:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-13T23:24:33Z"}, "message": "Merge #10230\n\n10230: fix: fix expansion order for fn-like macros and attributes in token descending r=Veykril a=Veykril\n\nSecond attempt(now with a test \ud83c\udf89).\r\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/10115\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "e4c82c7cdff66b999d44c1afd39c2304b6afc080", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4c82c7cdff66b999d44c1afd39c2304b6afc080"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42617231bd80ee1dbf1d574e357cd1a1235d427f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhP92yCRBK7hj4Ov3rIwAA2TwIAIRAL/BonUTI3vpO+uM41P9v\nNq/bHEsDsqcKW5RyBV/lPaxXiIdLDsjxNAMMgotqAZ7W/9rvqj3IaoE70LADXnjh\ndiaN2j+j5zWDSv39gFIcBVUr4oLklzeMFCCFoKIySSwimiv+qwzefxZoRzuWCfhc\n23FtKcrurLRDSyF2CjZJJau5U/c0TNhxTDNtpsbXnMksISFDe+YZlODgqRAC/eLO\niawnGDc4z8pXd/FqDUGdiE3xACj71r/DXvqXyRyrrMPYvfkUMbf/K6stTtWkxsc7\nSA6bumVc4ZQJWio8PtVlOhwoScCMSx9lmNKY53Gm/BLt7FLBEH9jzG46uB7W6Lg=\n=iYsE\n-----END PGP SIGNATURE-----\n", "payload": "tree e4c82c7cdff66b999d44c1afd39c2304b6afc080\nparent 249ebdd07604caf5515ec30a08dedd2130e49950\nparent 8f76e41e185027e4851b0a0fee1bc1e0ffbe2ca0\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1631575473 +0000\ncommitter GitHub <noreply@github.com> 1631575473 +0000\n\nMerge #10230\n\n10230: fix: fix expansion order for fn-like macros and attributes in token descending r=Veykril a=Veykril\n\nSecond attempt(now with a test \ud83c\udf89).\r\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/10115\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42617231bd80ee1dbf1d574e357cd1a1235d427f", "html_url": "https://github.com/rust-lang/rust/commit/42617231bd80ee1dbf1d574e357cd1a1235d427f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42617231bd80ee1dbf1d574e357cd1a1235d427f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "249ebdd07604caf5515ec30a08dedd2130e49950", "url": "https://api.github.com/repos/rust-lang/rust/commits/249ebdd07604caf5515ec30a08dedd2130e49950", "html_url": "https://github.com/rust-lang/rust/commit/249ebdd07604caf5515ec30a08dedd2130e49950"}, {"sha": "8f76e41e185027e4851b0a0fee1bc1e0ffbe2ca0", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f76e41e185027e4851b0a0fee1bc1e0ffbe2ca0", "html_url": "https://github.com/rust-lang/rust/commit/8f76e41e185027e4851b0a0fee1bc1e0ffbe2ca0"}], "stats": {"total": 136, "additions": 81, "deletions": 55}, "files": [{"sha": "aaa9e308f14714dc498e6502d0ea53185f9c9c0a", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 52, "deletions": 55, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/42617231bd80ee1dbf1d574e357cd1a1235d427f/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42617231bd80ee1dbf1d574e357cd1a1235d427f/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=42617231bd80ee1dbf1d574e357cd1a1235d427f", "patch": "@@ -498,68 +498,65 @@ impl<'db> SemanticsImpl<'db> {\n         // otherwise push the remapped tokens back into the queue as they can potentially be remapped again.\n         while let Some(token) = queue.pop() {\n             self.db.unwind_if_cancelled();\n-\n             let was_not_remapped = (|| {\n-                for node in token.value.ancestors() {\n-                    if let Some(macro_call) = ast::MacroCall::cast(node.clone()) {\n-                        let tt = match macro_call.token_tree() {\n-                            Some(tt) => tt,\n-                            None => continue,\n-                        };\n-                        let l_delim = match tt.left_delimiter_token() {\n-                            Some(it) => it.text_range().end(),\n-                            None => tt.syntax().text_range().start(),\n-                        };\n-                        let r_delim = match tt.right_delimiter_token() {\n-                            Some(it) => it.text_range().start(),\n-                            None => tt.syntax().text_range().end(),\n-                        };\n-                        if !TextRange::new(l_delim, r_delim)\n-                            .contains_range(token.value.text_range())\n-                        {\n-                            continue;\n-                        }\n-                        let file_id = match sa.expand(self.db, token.with_value(&macro_call)) {\n-                            Some(file_id) => file_id,\n-                            None => continue,\n-                        };\n-                        let tokens = cache\n-                            .entry(file_id)\n-                            .or_insert_with(|| file_id.expansion_info(self.db.upcast()))\n-                            .as_ref()?\n-                            .map_token_down(self.db.upcast(), None, token.as_ref())?;\n-\n-                        let len = queue.len();\n-                        queue.extend(tokens.inspect(|token| {\n-                            if let Some(parent) = token.value.parent() {\n-                                self.cache(find_root(&parent), token.file_id);\n-                            }\n-                        }));\n-                        return (queue.len() != len).then(|| ());\n-                    } else if let Some(item) = ast::Item::cast(node.clone()) {\n-                        if let Some(call_id) = self\n-                            .with_ctx(|ctx| ctx.item_to_macro_call(token.with_value(item.clone())))\n-                        {\n-                            let file_id = call_id.as_file();\n-                            let tokens = cache\n-                                .entry(file_id)\n-                                .or_insert_with(|| file_id.expansion_info(self.db.upcast()))\n-                                .as_ref()?\n-                                .map_token_down(self.db.upcast(), Some(item), token.as_ref())?;\n-\n-                            let len = queue.len();\n-                            queue.extend(tokens.inspect(|token| {\n-                                if let Some(parent) = token.value.parent() {\n-                                    self.cache(find_root(&parent), token.file_id);\n-                                }\n-                            }));\n-                            return (queue.len() != len).then(|| ());\n+                if let Some((call_id, item)) = token\n+                    .value\n+                    .ancestors()\n+                    .filter_map(ast::Item::cast)\n+                    .filter_map(|item| {\n+                        self.with_ctx(|ctx| ctx.item_to_macro_call(token.with_value(item.clone())))\n+                            .zip(Some(item))\n+                    })\n+                    .last()\n+                {\n+                    let file_id = call_id.as_file();\n+                    let tokens = cache\n+                        .entry(file_id)\n+                        .or_insert_with(|| file_id.expansion_info(self.db.upcast()))\n+                        .as_ref()?\n+                        .map_token_down(self.db.upcast(), Some(item), token.as_ref())?;\n+\n+                    let len = queue.len();\n+                    queue.extend(tokens.inspect(|token| {\n+                        if let Some(parent) = token.value.parent() {\n+                            self.cache(find_root(&parent), token.file_id);\n                         }\n+                    }));\n+                    return (queue.len() != len).then(|| ());\n+                }\n+\n+                if let Some(macro_call) = token.value.ancestors().find_map(ast::MacroCall::cast) {\n+                    let tt = macro_call.token_tree()?;\n+                    let l_delim = match tt.left_delimiter_token() {\n+                        Some(it) => it.text_range().end(),\n+                        None => tt.syntax().text_range().start(),\n+                    };\n+                    let r_delim = match tt.right_delimiter_token() {\n+                        Some(it) => it.text_range().start(),\n+                        None => tt.syntax().text_range().end(),\n+                    };\n+                    if !TextRange::new(l_delim, r_delim).contains_range(token.value.text_range()) {\n+                        return None;\n                     }\n+                    let file_id = sa.expand(self.db, token.with_value(&macro_call))?;\n+                    let tokens = cache\n+                        .entry(file_id)\n+                        .or_insert_with(|| file_id.expansion_info(self.db.upcast()))\n+                        .as_ref()?\n+                        .map_token_down(self.db.upcast(), None, token.as_ref())?;\n+\n+                    let len = queue.len();\n+                    queue.extend(tokens.inspect(|token| {\n+                        if let Some(parent) = token.value.parent() {\n+                            self.cache(find_root(&parent), token.file_id);\n+                        }\n+                    }));\n+                    return (queue.len() != len).then(|| ());\n                 }\n                 None\n             })()\n             .is_none();\n+\n             if was_not_remapped {\n                 res.push(token.value)\n             }"}, {"sha": "700f4dc95500a06dc6d8b438fd837f6a6e833a35", "filename": "crates/ide/src/fixture.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/42617231bd80ee1dbf1d574e357cd1a1235d427f/crates%2Fide%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42617231bd80ee1dbf1d574e357cd1a1235d427f/crates%2Fide%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ffixture.rs?ref=42617231bd80ee1dbf1d574e357cd1a1235d427f", "patch": "@@ -1,4 +1,5 @@\n //! Utilities for creating `Analysis` instances for tests.\n+use hir::db::DefDatabase;\n use ide_db::base_db::fixture::ChangeFixture;\n use test_utils::{extract_annotations, RangeOrOffset};\n \n@@ -8,6 +9,7 @@ use crate::{Analysis, AnalysisHost, FileId, FilePosition, FileRange};\n pub(crate) fn file(ra_fixture: &str) -> (Analysis, FileId) {\n     let mut host = AnalysisHost::default();\n     let change_fixture = ChangeFixture::parse(ra_fixture);\n+    host.db.set_enable_proc_attr_macros(true);\n     host.db.apply_change(change_fixture.change);\n     (host.analysis(), change_fixture.files[0])\n }\n@@ -16,6 +18,7 @@ pub(crate) fn file(ra_fixture: &str) -> (Analysis, FileId) {\n pub(crate) fn position(ra_fixture: &str) -> (Analysis, FilePosition) {\n     let mut host = AnalysisHost::default();\n     let change_fixture = ChangeFixture::parse(ra_fixture);\n+    host.db.set_enable_proc_attr_macros(true);\n     host.db.apply_change(change_fixture.change);\n     let (file_id, range_or_offset) = change_fixture.file_position.expect(\"expected a marker ($0)\");\n     let offset = range_or_offset.expect_offset();\n@@ -26,6 +29,7 @@ pub(crate) fn position(ra_fixture: &str) -> (Analysis, FilePosition) {\n pub(crate) fn range(ra_fixture: &str) -> (Analysis, FileRange) {\n     let mut host = AnalysisHost::default();\n     let change_fixture = ChangeFixture::parse(ra_fixture);\n+    host.db.set_enable_proc_attr_macros(true);\n     host.db.apply_change(change_fixture.change);\n     let (file_id, range_or_offset) = change_fixture.file_position.expect(\"expected a marker ($0)\");\n     let range = range_or_offset.expect_range();\n@@ -36,6 +40,7 @@ pub(crate) fn range(ra_fixture: &str) -> (Analysis, FileRange) {\n pub(crate) fn range_or_position(ra_fixture: &str) -> (Analysis, FileId, RangeOrOffset) {\n     let mut host = AnalysisHost::default();\n     let change_fixture = ChangeFixture::parse(ra_fixture);\n+    host.db.set_enable_proc_attr_macros(true);\n     host.db.apply_change(change_fixture.change);\n     let (file_id, range_or_offset) = change_fixture.file_position.expect(\"expected a marker ($0)\");\n     (host.analysis(), file_id, range_or_offset)\n@@ -45,6 +50,7 @@ pub(crate) fn range_or_position(ra_fixture: &str) -> (Analysis, FileId, RangeOrO\n pub(crate) fn annotations(ra_fixture: &str) -> (Analysis, FilePosition, Vec<(FileRange, String)>) {\n     let mut host = AnalysisHost::default();\n     let change_fixture = ChangeFixture::parse(ra_fixture);\n+    host.db.set_enable_proc_attr_macros(true);\n     host.db.apply_change(change_fixture.change);\n     let (file_id, range_or_offset) = change_fixture.file_position.expect(\"expected a marker ($0)\");\n     let offset = range_or_offset.expect_offset();"}, {"sha": "645b405e5e851836a59540064ebca93054bf6a48", "filename": "crates/ide/src/goto_definition.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/42617231bd80ee1dbf1d574e357cd1a1235d427f/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42617231bd80ee1dbf1d574e357cd1a1235d427f/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_definition.rs?ref=42617231bd80ee1dbf1d574e357cd1a1235d427f", "patch": "@@ -220,6 +220,29 @@ mod tests {\n         assert!(navs.is_empty(), \"didn't expect this to resolve anywhere: {:?}\", navs)\n     }\n \n+    #[test]\n+    fn goto_def_in_mac_call_in_attr_invoc() {\n+        check(\n+            r#\"\n+//- proc_macros: identity\n+pub struct Struct {\n+        // ^^^^^^\n+    field: i32,\n+}\n+\n+macro_rules! identity {\n+    ($($tt:tt)*) => {$($tt)*};\n+}\n+\n+#[proc_macros::identity]\n+fn function() {\n+    identity!(Struct$0 { field: 0 });\n+}\n+\n+\"#,\n+        )\n+    }\n+\n     #[test]\n     fn goto_def_for_extern_crate() {\n         check("}]}