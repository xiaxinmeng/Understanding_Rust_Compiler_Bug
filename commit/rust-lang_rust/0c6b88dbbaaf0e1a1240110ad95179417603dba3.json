{"sha": "0c6b88dbbaaf0e1a1240110ad95179417603dba3", "node_id": "C_kwDOAAsO6NoAKDBjNmI4OGRiYmFhZjBlMWExMjQwMTEwYWQ5NTE3OTQxNzYwM2RiYTM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-29T07:04:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-29T07:04:01Z"}, "message": "Auto merge of #105041 - matthiaskrgr:rollup-7ffry90, r=matthiaskrgr\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #104465 (Document more settings for building rustc for Fuchsia)\n - #104951 (Simplify checking for `GeneratorKind::Async`)\n - #104959 (Revert #104269 (to avoid spurious hang/test failure in CI))\n - #104978 (notify the rust-analyzer team on changes to the rust-analyzer subtree)\n - #105010 (Fix documentation of asymptotic complexity for rustc_data_structures::SortedMap)\n - #105016 (Add sentence when rustdoc search is running)\n - #105020 (rustdoc: merge background-image rules in rustdoc-toggle CSS)\n - #105024 (rustdoc: remove `fnname` CSS class that's styled exactly like `fn`)\n - #105027 (Rustdoc-Json: Add tests for linking to foreign variants.)\n - #105038 (Clean up pr 104954)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "88a6a8ccd94aeca9b3619b99a574d1db9338ecb9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88a6a8ccd94aeca9b3619b99a574d1db9338ecb9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c6b88dbbaaf0e1a1240110ad95179417603dba3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c6b88dbbaaf0e1a1240110ad95179417603dba3", "html_url": "https://github.com/rust-lang/rust/commit/0c6b88dbbaaf0e1a1240110ad95179417603dba3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c6b88dbbaaf0e1a1240110ad95179417603dba3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ef685ea39280cc4a4a32f7c3c586d2ce946e8f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ef685ea39280cc4a4a32f7c3c586d2ce946e8f0", "html_url": "https://github.com/rust-lang/rust/commit/1ef685ea39280cc4a4a32f7c3c586d2ce946e8f0"}, {"sha": "789b70dc2ae0c3b30fa8a34b22d027eca7f000c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/789b70dc2ae0c3b30fa8a34b22d027eca7f000c4", "html_url": "https://github.com/rust-lang/rust/commit/789b70dc2ae0c3b30fa8a34b22d027eca7f000c4"}], "stats": {"total": 330, "additions": 154, "deletions": 176}, "files": [{"sha": "7aa099433a76d902145decf600c3fac97be5ded7", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0c6b88dbbaaf0e1a1240110ad95179417603dba3/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c6b88dbbaaf0e1a1240110ad95179417603dba3/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=0c6b88dbbaaf0e1a1240110ad95179417603dba3", "patch": "@@ -514,12 +514,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             span: *span,\n             ty_err: match output_ty.kind() {\n                 ty::Closure(_, _) => FnMutReturnTypeErr::ReturnClosure { span: *span },\n-                ty::Generator(def, ..)\n-                    if matches!(\n-                        self.infcx.tcx.generator_kind(def),\n-                        Some(hir::GeneratorKind::Async(_))\n-                    ) =>\n-                {\n+                ty::Generator(def, ..) if self.infcx.tcx.generator_is_async(*def) => {\n                     FnMutReturnTypeErr::ReturnAsyncBlock { span: *span }\n                 }\n                 _ => FnMutReturnTypeErr::ReturnRef { span: *span },"}, {"sha": "d607a5c8314e15d3d5cf091b9464c2c38dc47b21", "filename": "compiler/rustc_data_structures/src/sorted_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c6b88dbbaaf0e1a1240110ad95179417603dba3/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c6b88dbbaaf0e1a1240110ad95179417603dba3/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map.rs?ref=0c6b88dbbaaf0e1a1240110ad95179417603dba3", "patch": "@@ -10,8 +10,8 @@ mod index_map;\n pub use index_map::SortedIndexMultiMap;\n \n /// `SortedMap` is a data structure with similar characteristics as BTreeMap but\n-/// slightly different trade-offs: lookup, insertion, and removal are *O*(log(*n*))\n-/// and elements can be iterated in order cheaply.\n+/// slightly different trade-offs: lookup is *O*(log(*n*)), insertion and removal\n+/// are *O*(*n*) but elements can be iterated in order cheaply.\n ///\n /// `SortedMap` can be faster than a `BTreeMap` for small sizes (<50) since it\n /// stores data in a more compact way. It also supports accessing contiguous"}, {"sha": "88ad4c67d93e4e80119ddf417c2204f38f6c01cd", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0c6b88dbbaaf0e1a1240110ad95179417603dba3/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c6b88dbbaaf0e1a1240110ad95179417603dba3/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=0c6b88dbbaaf0e1a1240110ad95179417603dba3", "patch": "@@ -322,10 +322,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n                 ty::Closure(..) => Some(MustUsePath::Closure(span)),\n                 ty::Generator(def_id, ..) => {\n                     // async fn should be treated as \"implementor of `Future`\"\n-                    let must_use = if matches!(\n-                        cx.tcx.generator_kind(def_id),\n-                        Some(hir::GeneratorKind::Async(..))\n-                    ) {\n+                    let must_use = if cx.tcx.generator_is_async(def_id) {\n                         let def_id = cx.tcx.lang_items().future_trait().unwrap();\n                         is_def_must_use(cx, def_id, span)\n                             .map(|inner| MustUsePath::Opaque(Box::new(inner)))"}, {"sha": "e802c71c64b8cb2521a5bc1fb8d441ad4fb9edb3", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0c6b88dbbaaf0e1a1240110ad95179417603dba3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c6b88dbbaaf0e1a1240110ad95179417603dba3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=0c6b88dbbaaf0e1a1240110ad95179417603dba3", "patch": "@@ -1361,6 +1361,11 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.diagnostic_items(did.krate).name_to_id.get(&name) == Some(&did)\n     }\n \n+    /// Returns `true` if the node pointed to by `def_id` is a generator for an async construct.\n+    pub fn generator_is_async(self, def_id: DefId) -> bool {\n+        matches!(self.generator_kind(def_id), Some(hir::GeneratorKind::Async(_)))\n+    }\n+\n     pub fn stability(self) -> &'tcx stability::Index {\n         self.stability_index(())\n     }"}, {"sha": "df59a350ea7c9cfbd19dc89d3ab8556717e21d7e", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c6b88dbbaaf0e1a1240110ad95179417603dba3/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c6b88dbbaaf0e1a1240110ad95179417603dba3/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=0c6b88dbbaaf0e1a1240110ad95179417603dba3", "patch": "@@ -282,7 +282,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                             \"you may want to use a bool value instead\",\n                             format!(\"{}\", item_typo),\n                         ))\n-                    // FIXME(vicnenzopalazzo): make the check smarter,\n+                    // FIXME(vincenzopalazzo): make the check smarter,\n                     // and maybe expand with levenshtein distance checks\n                     } else if item_str.as_str() == \"printf\" {\n                         Some(("}, {"sha": "b364609d986ed42b6259519ad233071e8959c927", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0c6b88dbbaaf0e1a1240110ad95179417603dba3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c6b88dbbaaf0e1a1240110ad95179417603dba3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=0c6b88dbbaaf0e1a1240110ad95179417603dba3", "patch": "@@ -2544,10 +2544,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             let obligation =\n                 Obligation::new(self.tcx, ObligationCause::dummy(), param_env, cleaned_pred);\n \n-            // We don't use `InferCtxt::predicate_may_hold` because that\n-            // will re-run predicates that overflow locally, which ends up\n-            // taking a really long time to compute.\n-            self.evaluate_obligation(&obligation).map_or(false, |eval| eval.may_apply())\n+            self.predicate_may_hold(&obligation)\n         })\n     }\n "}, {"sha": "09f30f976de914182519d7de9e5dffac3f1894bc", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0c6b88dbbaaf0e1a1240110ad95179417603dba3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c6b88dbbaaf0e1a1240110ad95179417603dba3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=0c6b88dbbaaf0e1a1240110ad95179417603dba3", "patch": "@@ -1336,8 +1336,9 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     obligation.param_env,\n                     trait_pred_and_suggested_ty,\n                 );\n-                let suggested_ty_would_satisfy_obligation =\n-                    self.predicate_must_hold_modulo_regions(&new_obligation);\n+                let suggested_ty_would_satisfy_obligation = self\n+                    .evaluate_obligation_no_overflow(&new_obligation)\n+                    .must_apply_modulo_regions();\n                 if suggested_ty_would_satisfy_obligation {\n                     let sp = self\n                         .tcx\n@@ -1988,11 +1989,6 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             .as_local()\n             .and_then(|def_id| hir.maybe_body_owned_by(def_id))\n             .map(|body_id| hir.body(body_id));\n-        let is_async = self\n-            .tcx\n-            .generator_kind(generator_did)\n-            .map(|generator_kind| matches!(generator_kind, hir::GeneratorKind::Async(..)))\n-            .unwrap_or(false);\n         let mut visitor = AwaitsVisitor::default();\n         if let Some(body) = generator_body {\n             visitor.visit_body(body);\n@@ -2069,6 +2065,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n \n         debug!(?interior_or_upvar_span);\n         if let Some(interior_or_upvar_span) = interior_or_upvar_span {\n+            let is_async = self.tcx.generator_is_async(generator_did);\n             let typeck_results = match generator_data {\n                 GeneratorData::Local(typeck_results) => Some(typeck_results),\n                 GeneratorData::Foreign(_) => None,\n@@ -2641,10 +2638,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                                 if is_future\n                                     && obligated_types.last().map_or(false, |ty| match ty.kind() {\n                                         ty::Generator(last_def_id, ..) => {\n-                                            matches!(\n-                                                tcx.generator_kind(last_def_id),\n-                                                Some(GeneratorKind::Async(..))\n-                                            )\n+                                            tcx.generator_is_async(*last_def_id)\n                                         }\n                                         _ => false,\n                                     })"}, {"sha": "627ed4674b0e9e41344ee60de0bb925f9a72f7f1", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c6b88dbbaaf0e1a1240110ad95179417603dba3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c6b88dbbaaf0e1a1240110ad95179417603dba3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=0c6b88dbbaaf0e1a1240110ad95179417603dba3", "patch": "@@ -430,9 +430,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     ) {\n         let self_ty = obligation.self_ty().skip_binder();\n         if let ty::Generator(did, ..) = self_ty.kind() {\n-            if let Some(rustc_hir::GeneratorKind::Async(_generator_kind)) =\n-                self.tcx().generator_kind(did)\n-            {\n+            if self.tcx().generator_is_async(*did) {\n                 debug!(?self_ty, ?obligation, \"assemble_future_candidates\",);\n \n                 candidates.vec.push(FutureCandidate);"}, {"sha": null, "filename": "src/ci/docker/scripts/fuchsia-test-runner.py", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c6b88dbbaaf0e1a1240110ad95179417603dba3/src%2Fci%2Fdocker%2Fscripts%2Ffuchsia-test-runner.py", "raw_url": "https://github.com/rust-lang/rust/raw/0c6b88dbbaaf0e1a1240110ad95179417603dba3/src%2Fci%2Fdocker%2Fscripts%2Ffuchsia-test-runner.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Ffuchsia-test-runner.py?ref=0c6b88dbbaaf0e1a1240110ad95179417603dba3"}, {"sha": "fbf999f97151b3e8169a90a5ed476159c6fd601d", "filename": "src/doc/rustc/src/platform-support/fuchsia.md", "status": "modified", "additions": 60, "deletions": 23, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/0c6b88dbbaaf0e1a1240110ad95179417603dba3/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Ffuchsia.md", "raw_url": "https://github.com/rust-lang/rust/raw/0c6b88dbbaaf0e1a1240110ad95179417603dba3/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Ffuchsia.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Ffuchsia.md?ref=0c6b88dbbaaf0e1a1240110ad95179417603dba3", "patch": "@@ -189,17 +189,45 @@ Fuchsia as well. A recent version (14+) of clang should be sufficient to compile\n Rust for Fuchsia.\n \n x86-64 and AArch64 Fuchsia targets can be enabled using the following\n-configuration.\n-\n-In `config.toml`, add:\n+configuration in `config.toml`:\n \n ```toml\n [build]\n target = [\"<host_platform>\", \"aarch64-fuchsia\", \"x86_64-fuchsia\"]\n+\n+[rust]\n+lld = true\n+\n+[target.x86_64-fuchsia]\n+cc = \"clang\"\n+cxx = \"clang++\"\n+\n+[target.aarch64-fuchsia]\n+cc = \"clang\"\n+cxx = \"clang++\"\n+```\n+\n+Though not strictly required, you may also want to use `clang` for your host\n+target as well:\n+\n+```toml\n+[target.<host_platform>]\n+cc = \"clang\"\n+cxx = \"clang++\"\n+```\n+\n+By default, the Rust compiler installs itself to `/usr/local` on most UNIX\n+systems. You may want to install it to another location (e.g. a local `install`\n+directory) by setting a custom prefix in `config.toml`:\n+\n+```toml\n+[install]\n+# Make sure to use the absolute path to your install directory\n+prefix = \"<RUST_SRC_PATH>/install\"\n ```\n \n-Additionally, the following environment variables must be configured (for\n-example, using a script like `config-env.sh`):\n+Next, the following environment variables must be configured. For example, using\n+a script we name `config-env.sh`:\n \n ```sh\n # Configure this environment variable to be the path to the downloaded SDK\n@@ -215,8 +243,11 @@ export LDFLAGS_x86_64_fuchsia=\"--target=x86_64-fuchsia --sysroot=${SDK_PATH}/arc\n export CARGO_TARGET_X86_64_FUCHSIA_RUSTFLAGS=\"-C link-arg=--sysroot=${SDK_PATH}/arch/x64/sysroot -Lnative=${SDK_PATH}/arch/x64/sysroot/lib -Lnative=${SDK_PATH}/arch/x64/lib\"\n ```\n \n-These can be run together in a shell environment by executing\n-`(source config-env.sh && ./x.py install)`.\n+Finally, the Rust compiler can be built and installed:\n+\n+```sh\n+(source config-env.sh && ./x.py install)\n+```\n \n Once `rustc` is installed, we can create a new working directory to work from,\n `hello_fuchsia` along with `hello_fuchsia/src`:\n@@ -641,31 +672,38 @@ available on the [Fuchsia devsite].\n \n ### Running the compiler test suite\n \n-Pre-requisites for running the Rust test suite on Fuchsia are:\n-1. Checkout of Rust source.\n-1. Setup of `config-env.sh` and `config.toml` from \"[Targeting Fuchsia with a compiler built from source](#targeting-fuchsia-with-a-compiler-built-from-source)\".\n-1. Download of the Fuchsia SDK. Minimum supported SDK version is [9.20220726.1.1](https://chrome-infra-packages.appspot.com/p/fuchsia/sdk/core/linux-amd64/+/version:9.20220726.1.1)\n+The commands in this section assume that they are being run from inside your\n+local Rust source checkout:\n+\n+```sh\n+cd ${RUST_SRC_PATH}\n+```\n+\n+To run the Rust test suite on an emulated Fuchsia device, you must install the\n+Rust compiler locally. See \"[Targeting Fuchsia with a compiler built from source](#targeting-fuchsia-with-a-compiler-built-from-source)\"\n+for the steps to build locally.\n \n-Interfacing with the Fuchsia emulator is handled by our test runner script located\n-at `${RUST_SRC_PATH}/src/ci/docker/scripts/fuchsia-test-runner.py`.\n+You'll also need to download a copy of the Fuchsia SDK. The current minimum\n+supported SDK version is [9.20220726.1.1](https://chrome-infra-packages.appspot.com/p/fuchsia/sdk/core/linux-amd64/+/version:9.20220726.1.1).\n \n-We start by activating our Fuchsia test environment. From a terminal:\n+Fuchsia's test runner interacts with the Fuchsia emulator and is located at\n+`src/ci/docker/scripts/fuchsia-test-runner.py`. We can use it to start our\n+test environment with:\n \n-**Issue command from ${RUST_SRC_PATH}**\n ```sh\n src/ci/docker/scripts/fuchsia-test-runner.py start\n-    --rust .\n+    --rust ${RUST_SRC_PATH}/install\n     --sdk ${SDK_PATH}\n     --target-arch {x64,arm64}\n ```\n \n-Next, for ease of commands, we copy `config-env.sh` and `config.toml` into our Rust source\n-code path, `${RUST_SRC_PATH}`.\n+Where `${RUST_SRC_PATH}/install` is the `prefix` set in `config.toml` and\n+`${SDK_PATH}` is the path to the downloaded and unzipped SDK.\n \n-From there, we utilize `x.py` to run our tests, using the test runner script to\n-run the tests on our emulator. To run the full `src/test/ui` test suite:\n+Once our environment is started, we can run our tests using `x.py` as usual. The\n+test runner script will run the compiled tests on an emulated Fuchsia device. To\n+run the full `src/test/ui` test suite:\n \n-**Run from ${RUST_SRC_PATH}**\n ```sh\n ( \\\n     source config-env.sh &&                                                   \\\n@@ -695,9 +733,8 @@ run the tests on our emulator. To run the full `src/test/ui` test suite:\n *Note: The test suite cannot be run in parallel at the moment, so `x.py`\n must be run with `--jobs 1` to ensure only one test runs at a time.*\n \n-When finished, stop the test environment:\n+When finished, the test runner can be used to stop the test environment:\n \n-**Issue command from ${RUST_SRC_PATH}**\n ```sh\n src/ci/docker/scripts/fuchsia-test-runner.py stop\n ```"}, {"sha": "08f8096b07bd66399ac9bda4b17f6f19d8fa56c7", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c6b88dbbaaf0e1a1240110ad95179417603dba3/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c6b88dbbaaf0e1a1240110ad95179417603dba3/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=0c6b88dbbaaf0e1a1240110ad95179417603dba3", "patch": "@@ -847,10 +847,10 @@ fn assoc_method(\n         render_attributes_in_code(w, meth);\n         (0, \"\", Ending::Newline)\n     };\n-    w.reserve(header_len + \"<a href=\\\"\\\" class=\\\"fnname\\\">{\".len() + \"</a>\".len());\n+    w.reserve(header_len + \"<a href=\\\"\\\" class=\\\"fn\\\">{\".len() + \"</a>\".len());\n     write!(\n         w,\n-        \"{indent}{vis}{constness}{asyncness}{unsafety}{defaultness}{abi}fn <a{href} class=\\\"fnname\\\">{name}</a>\\\n+        \"{indent}{vis}{constness}{asyncness}{unsafety}{defaultness}{abi}fn <a{href} class=\\\"fn\\\">{name}</a>\\\n          {generics}{decl}{notable_traits}{where_clause}\",\n         indent = indent_str,\n         vis = vis,"}, {"sha": "cf5592da43205d81a9b61907be8ccf7e935192df", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0c6b88dbbaaf0e1a1240110ad95179417603dba3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/0c6b88dbbaaf0e1a1240110ad95179417603dba3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=0c6b88dbbaaf0e1a1240110ad95179417603dba3", "patch": "@@ -242,7 +242,6 @@ h1 a,\n }\n \n .content span.fn, .content a.fn,\n-.content .fnname,\n .content span.method, .content a.method,\n .content span.tymethod, .content a.tymethod {\n \tcolor: var(--function-link-color);\n@@ -1512,6 +1511,7 @@ details.rustdoc-toggle > summary.hideme > span {\n }\n \n details.rustdoc-toggle > summary::before {\n+\tbackground-image: url(\"toggle-plus-1092eb4930d581b0.svg\");\n \tcontent: \"\";\n \tcursor: pointer;\n \twidth: 16px;\n@@ -1599,14 +1599,6 @@ details.rustdoc-toggle[open] > summary.hideme > span {\n details.rustdoc-toggle[open] > summary::before,\n details.rustdoc-toggle[open] > summary.hideme::before {\n \tbackground-image: url(\"toggle-minus-31bbd6e4c77f5c96.svg\");\n-}\n-\n-details.rustdoc-toggle > summary::before {\n-\tbackground-image: url(\"toggle-plus-1092eb4930d581b0.svg\");\n-}\n-\n-details.rustdoc-toggle[open] > summary::before,\n-details.rustdoc-toggle[open] > summary.hideme::before {\n \twidth: 16px;\n \theight: 16px;\n \tbackground-repeat: no-repeat;"}, {"sha": "623f46b109666facbd7a2a2d9400ae88620c95a8", "filename": "src/librustdoc/html/static/js/main.js", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0c6b88dbbaaf0e1a1240110ad95179417603dba3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/0c6b88dbbaaf0e1a1240110ad95179417603dba3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js?ref=0c6b88dbbaaf0e1a1240110ad95179417603dba3", "patch": "@@ -302,13 +302,15 @@ function loadCss(cssUrl) {\n \n             const params = searchState.getQueryStringParams();\n             if (params.search !== undefined) {\n-                const search = searchState.outputElement();\n-                search.innerHTML = \"<h3 class=\\\"search-loading\\\">\" +\n-                    searchState.loadingText + \"</h3>\";\n-                searchState.showResults(search);\n+                searchState.setLoadingSearch();\n                 loadSearch();\n             }\n         },\n+        setLoadingSearch: () => {\n+            const search = searchState.outputElement();\n+            search.innerHTML = \"<h3 class=\\\"search-loading\\\">\" + searchState.loadingText + \"</h3>\";\n+            searchState.showResults(search);\n+        },\n     };\n \n     function getPageId() {"}, {"sha": "23ae4e97082e3b98d593504f3d23f0d4b62fce92", "filename": "src/librustdoc/html/static/js/search.js", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0c6b88dbbaaf0e1a1240110ad95179417603dba3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/0c6b88dbbaaf0e1a1240110ad95179417603dba3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js?ref=0c6b88dbbaaf0e1a1240110ad95179417603dba3", "patch": "@@ -1766,21 +1766,23 @@ function initSearch(rawSearchIndex) {\n      * @param {boolean} [forced]\n      */\n     function search(e, forced) {\n-        const params = searchState.getQueryStringParams();\n-        const query = parseQuery(searchState.input.value.trim());\n-\n         if (e) {\n             e.preventDefault();\n         }\n \n+        const query = parseQuery(searchState.input.value.trim());\n+        let filterCrates = getFilterCrates();\n+\n         if (!forced && query.userQuery === currentResults) {\n             if (query.userQuery.length > 0) {\n                 putBackSearch();\n             }\n             return;\n         }\n \n-        let filterCrates = getFilterCrates();\n+        searchState.setLoadingSearch();\n+\n+        const params = searchState.getQueryStringParams();\n \n         // In case we have no information about the saved crate and there is a URL query parameter,\n         // we override it with the URL query parameter."}, {"sha": "2e07f19b13d649fb4fdb0b62f016dd44d146e8e1", "filename": "src/test/rustdoc-gui/item-decl-colors.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c6b88dbbaaf0e1a1240110ad95179417603dba3/src%2Ftest%2Frustdoc-gui%2Fitem-decl-colors.goml", "raw_url": "https://github.com/rust-lang/rust/raw/0c6b88dbbaaf0e1a1240110ad95179417603dba3/src%2Ftest%2Frustdoc-gui%2Fitem-decl-colors.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fitem-decl-colors.goml?ref=0c6b88dbbaaf0e1a1240110ad95179417603dba3", "patch": "@@ -30,7 +30,7 @@ define-function: (\n         (\"assert-css\", (\".item-decl .primitive\", {\"color\": |primitive_color|}, ALL)),\n         (\"goto\", \"file://\" + |DOC_PATH| + \"/test_docs/trait.TraitWithoutGenerics.html\"),\n         (\"assert-css\", (\".item-decl .constant\", {\"color\": |constant_color|}, ALL)),\n-        (\"assert-css\", (\".item-decl .fnname\", {\"color\": |fn_color|}, ALL)),\n+        (\"assert-css\", (\".item-decl .fn\", {\"color\": |fn_color|}, ALL)),\n         (\"assert-css\", (\".item-decl .associatedtype\", {\"color\": |assoc_type_color|}, ALL)),\n     ],\n )"}, {"sha": "7d4bd27d42d4d20feacb7823d98142c007c8aff3", "filename": "src/test/rustdoc-gui/notable-trait.goml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c6b88dbbaaf0e1a1240110ad95179417603dba3/src%2Ftest%2Frustdoc-gui%2Fnotable-trait.goml", "raw_url": "https://github.com/rust-lang/rust/raw/0c6b88dbbaaf0e1a1240110ad95179417603dba3/src%2Ftest%2Frustdoc-gui%2Fnotable-trait.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fnotable-trait.goml?ref=0c6b88dbbaaf0e1a1240110ad95179417603dba3", "patch": "@@ -226,7 +226,7 @@ assert: \"#method\\.create_an_iterator_from_read .notable-traits:focus\"\n // Now we check that the focus isn't given back to the wrong item when opening\n // another popover.\n store-window-property: (scroll, \"scrollY\")\n-click: \"#method\\.create_an_iterator_from_read .fnname\"\n+click: \"#method\\.create_an_iterator_from_read .fn\"\n // We ensure that the scroll position changed.\n assert-window-property-false: {\"scrollY\": |scroll|}\n // Store the new position.\n@@ -240,7 +240,7 @@ assert-window-property-false: {\"scrollY\": |scroll|}\n \n // Same but with Escape handling.\n store-window-property: (scroll, \"scrollY\")\n-click: \"#method\\.create_an_iterator_from_read .fnname\"\n+click: \"#method\\.create_an_iterator_from_read .fn\"\n // We ensure that the scroll position changed.\n assert-window-property-false: {\"scrollY\": |scroll|}\n // Store the new position."}, {"sha": "41596a9bcccf28170ba5cdb2ad2f04d4d9e9783c", "filename": "src/test/rustdoc-gui/where-whitespace.goml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c6b88dbbaaf0e1a1240110ad95179417603dba3/src%2Ftest%2Frustdoc-gui%2Fwhere-whitespace.goml", "raw_url": "https://github.com/rust-lang/rust/raw/0c6b88dbbaaf0e1a1240110ad95179417603dba3/src%2Ftest%2Frustdoc-gui%2Fwhere-whitespace.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fwhere-whitespace.goml?ref=0c6b88dbbaaf0e1a1240110ad95179417603dba3", "patch": "@@ -5,13 +5,13 @@ show-text: true\n // line than \"pub trait Whitespace<Idx>\").\n compare-elements-position-false: (\".item-decl code\", \".where.fmt-newline\", (\"y\"))\n // And that the code following it isn't on the same line either.\n-compare-elements-position-false: (\".item-decl .fnname\", \".where.fmt-newline\", (\"y\"))\n+compare-elements-position-false: (\".item-decl .fn\", \".where.fmt-newline\", (\"y\"))\n \n goto: \"file://\" + |DOC_PATH| + \"/lib2/struct.WhereWhitespace.html\"\n // We make the screen a bit wider to ensure that the trait impl is on one line.\n size: (915, 915)\n \n-compare-elements-position-false: (\"#method\\.new .fnname\", \"#method\\.new .where.fmt-newline\", (\"y\"))\n+compare-elements-position-false: (\"#method\\.new .fn\", \"#method\\.new .where.fmt-newline\", (\"y\"))\n // We ensure that both the trait name and the struct name are on the same line in\n // \"impl<K, T> Whitespace<&K> for WhereWhitespace<T>\".\n compare-elements-position: ("}, {"sha": "7188f79383259a992e673fd76f8cb2efbbb8e6b5", "filename": "src/test/rustdoc-json/enums/auxiliary/color.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0c6b88dbbaaf0e1a1240110ad95179417603dba3/src%2Ftest%2Frustdoc-json%2Fenums%2Fauxiliary%2Fcolor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c6b88dbbaaf0e1a1240110ad95179417603dba3/src%2Ftest%2Frustdoc-json%2Fenums%2Fauxiliary%2Fcolor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fenums%2Fauxiliary%2Fcolor.rs?ref=0c6b88dbbaaf0e1a1240110ad95179417603dba3", "patch": "@@ -0,0 +1,5 @@\n+pub enum Color {\n+    Red,\n+    Green,\n+    Blue,\n+}"}, {"sha": "470b195a2924782f56db1cd6bc2772fed8acba20", "filename": "src/test/rustdoc-json/enums/doc_link_to_foreign_variant.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0c6b88dbbaaf0e1a1240110ad95179417603dba3/src%2Ftest%2Frustdoc-json%2Fenums%2Fdoc_link_to_foreign_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c6b88dbbaaf0e1a1240110ad95179417603dba3/src%2Ftest%2Frustdoc-json%2Fenums%2Fdoc_link_to_foreign_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fenums%2Fdoc_link_to_foreign_variant.rs?ref=0c6b88dbbaaf0e1a1240110ad95179417603dba3", "patch": "@@ -0,0 +1,11 @@\n+// aux-build: color.rs\n+\n+//! The purpose of this test it to have a link to [a foreign variant](Red).\n+\n+extern crate color;\n+use color::Color::Red;\n+\n+// @set red = \"$.index[*][?(@.inner.is_crate == true)].links.Red\"\n+\n+// @!has \"$.index[*][?(@.name == 'Red')]\"\n+// @!has \"$.index[*][?(@.name == 'Color')]\""}, {"sha": "11bb6ce1f3a0c7073b385b35e7ea3cc3352b7f28", "filename": "src/test/rustdoc-json/enums/use_variant_foreign.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0c6b88dbbaaf0e1a1240110ad95179417603dba3/src%2Ftest%2Frustdoc-json%2Fenums%2Fuse_variant_foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c6b88dbbaaf0e1a1240110ad95179417603dba3/src%2Ftest%2Frustdoc-json%2Fenums%2Fuse_variant_foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fenums%2Fuse_variant_foreign.rs?ref=0c6b88dbbaaf0e1a1240110ad95179417603dba3", "patch": "@@ -0,0 +1,9 @@\n+// aux-build: color.rs\n+\n+extern crate color;\n+\n+// @is \"$.index[*][?(@.inner.name == 'Red')].kind\" '\"import\"'\n+pub use color::Color::Red;\n+\n+// @!has \"$.index[*][?(@.name == 'Red')]\"\n+// @!has \"$.index[*][?(@.name == 'Color')]\""}, {"sha": "b9ec8bf4c09a023c0142f3d3b5fa88cbcf511aa7", "filename": "src/test/rustdoc/anchors.no_method_anchor.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c6b88dbbaaf0e1a1240110ad95179417603dba3/src%2Ftest%2Frustdoc%2Fanchors.no_method_anchor.html", "raw_url": "https://github.com/rust-lang/rust/raw/0c6b88dbbaaf0e1a1240110ad95179417603dba3/src%2Ftest%2Frustdoc%2Fanchors.no_method_anchor.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fanchors.no_method_anchor.html?ref=0c6b88dbbaaf0e1a1240110ad95179417603dba3", "patch": "@@ -1 +1 @@\n-<section id=\"method.new\" class=\"method has-srclink\"><a class=\"srclink rightside\" href=\"../src/foo/anchors.rs.html#48\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.new\" class=\"fnname\">new</a>() -&gt; Self</h4></section>\n\\ No newline at end of file\n+<section id=\"method.new\" class=\"method has-srclink\"><a class=\"srclink rightside\" href=\"../src/foo/anchors.rs.html#48\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.new\" class=\"fn\">new</a>() -&gt; Self</h4></section>\n\\ No newline at end of file"}, {"sha": "4308ddad412069e86acea1890b91f62032668536", "filename": "src/test/rustdoc/anchors.no_trait_method_anchor.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c6b88dbbaaf0e1a1240110ad95179417603dba3/src%2Ftest%2Frustdoc%2Fanchors.no_trait_method_anchor.html", "raw_url": "https://github.com/rust-lang/rust/raw/0c6b88dbbaaf0e1a1240110ad95179417603dba3/src%2Ftest%2Frustdoc%2Fanchors.no_trait_method_anchor.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fanchors.no_trait_method_anchor.html?ref=0c6b88dbbaaf0e1a1240110ad95179417603dba3", "patch": "@@ -1 +1 @@\n-<section id=\"method.bar\" class=\"method has-srclink\"><a class=\"srclink rightside\" href=\"../src/foo/anchors.rs.html#23\">source</a><h4 class=\"code-header\">fn <a href=\"#method.bar\" class=\"fnname\">bar</a>()</h4></section>\n\\ No newline at end of file\n+<section id=\"method.bar\" class=\"method has-srclink\"><a class=\"srclink rightside\" href=\"../src/foo/anchors.rs.html#23\">source</a><h4 class=\"code-header\">fn <a href=\"#method.bar\" class=\"fn\">bar</a>()</h4></section>\n\\ No newline at end of file"}, {"sha": "91eed8a3742926f223e38ebefac3af3160712e9c", "filename": "src/test/rustdoc/anchors.no_tymethod_anchor.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c6b88dbbaaf0e1a1240110ad95179417603dba3/src%2Ftest%2Frustdoc%2Fanchors.no_tymethod_anchor.html", "raw_url": "https://github.com/rust-lang/rust/raw/0c6b88dbbaaf0e1a1240110ad95179417603dba3/src%2Ftest%2Frustdoc%2Fanchors.no_tymethod_anchor.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fanchors.no_tymethod_anchor.html?ref=0c6b88dbbaaf0e1a1240110ad95179417603dba3", "patch": "@@ -1 +1 @@\n-<section id=\"tymethod.foo\" class=\"method has-srclink\"><a class=\"srclink rightside\" href=\"../src/foo/anchors.rs.html#20\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.foo\" class=\"fnname\">foo</a>()</h4></section>\n\\ No newline at end of file\n+<section id=\"tymethod.foo\" class=\"method has-srclink\"><a class=\"srclink rightside\" href=\"../src/foo/anchors.rs.html#20\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.foo\" class=\"fn\">foo</a>()</h4></section>\n\\ No newline at end of file"}, {"sha": "02b51b3446195711319d83369a393c2d7d5ac452", "filename": "src/test/rustdoc/decl-trailing-whitespace.declaration.html", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0c6b88dbbaaf0e1a1240110ad95179417603dba3/src%2Ftest%2Frustdoc%2Fdecl-trailing-whitespace.declaration.html", "raw_url": "https://github.com/rust-lang/rust/raw/0c6b88dbbaaf0e1a1240110ad95179417603dba3/src%2Ftest%2Frustdoc%2Fdecl-trailing-whitespace.declaration.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdecl-trailing-whitespace.declaration.html?ref=0c6b88dbbaaf0e1a1240110ad95179417603dba3", "patch": "@@ -1,7 +1,7 @@\n <code>pub trait Write {\n-    fn <a href=\"#tymethod.poll_write\" class=\"fnname\">poll_write</a>(<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self: <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"{{channel}}/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;,<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cx: &amp;mut <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"{{channel}}/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;,<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;buf: &amp;mut [<a class=\"primitive\" href=\"{{channel}}/std/primitive.usize.html\">usize</a>]<br />&#160;&#160;&#160;&#160;) -&gt; <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"{{channel}}/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"{{channel}}/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"struct.Error.html\" title=\"struct foo::Error\">Error</a>&gt;&gt;;\n-<span class=\"item-spacer\" />    fn <a href=\"#tymethod.poll_flush\" class=\"fnname\">poll_flush</a>(<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self: <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"{{channel}}/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;,<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cx: &amp;mut <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"{{channel}}/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;<br />&#160;&#160;&#160;&#160;) -&gt; <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"{{channel}}/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"{{channel}}/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"struct.Error.html\" title=\"struct foo::Error\">Error</a>&gt;&gt;;\n-<span class=\"item-spacer\" />    fn <a href=\"#tymethod.poll_close\" class=\"fnname\">poll_close</a>(<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self: <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"{{channel}}/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;,<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cx: &amp;mut <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"{{channel}}/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;<br />&#160;&#160;&#160;&#160;) -&gt; <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"{{channel}}/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"{{channel}}/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"struct.Error.html\" title=\"struct foo::Error\">Error</a>&gt;&gt;;\n+    fn <a href=\"#tymethod.poll_write\" class=\"fn\">poll_write</a>(<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self: <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"{{channel}}/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;,<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cx: &amp;mut <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"{{channel}}/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;,<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;buf: &amp;mut [<a class=\"primitive\" href=\"{{channel}}/std/primitive.usize.html\">usize</a>]<br />&#160;&#160;&#160;&#160;) -&gt; <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"{{channel}}/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"{{channel}}/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"struct.Error.html\" title=\"struct foo::Error\">Error</a>&gt;&gt;;\n+<span class=\"item-spacer\" />    fn <a href=\"#tymethod.poll_flush\" class=\"fn\">poll_flush</a>(<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self: <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"{{channel}}/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;,<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cx: &amp;mut <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"{{channel}}/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;<br />&#160;&#160;&#160;&#160;) -&gt; <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"{{channel}}/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"{{channel}}/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"struct.Error.html\" title=\"struct foo::Error\">Error</a>&gt;&gt;;\n+<span class=\"item-spacer\" />    fn <a href=\"#tymethod.poll_close\" class=\"fn\">poll_close</a>(<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self: <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"{{channel}}/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;,<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cx: &amp;mut <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"{{channel}}/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;<br />&#160;&#160;&#160;&#160;) -&gt; <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"{{channel}}/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"{{channel}}/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"struct.Error.html\" title=\"struct foo::Error\">Error</a>&gt;&gt;;\n \n-    fn <a href=\"#method.poll_write_vectored\" class=\"fnname\">poll_write_vectored</a>(<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self: <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"{{channel}}/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;,<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cx: &amp;mut <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"{{channel}}/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;,<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bufs: &amp;[<a class=\"primitive\" href=\"{{channel}}/std/primitive.usize.html\">usize</a>]<br />&#160;&#160;&#160;&#160;) -&gt; <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"{{channel}}/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"{{channel}}/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"struct.Error.html\" title=\"struct foo::Error\">Error</a>&gt;&gt; { ... }\n-}</code>\n+    fn <a href=\"#method.poll_write_vectored\" class=\"fn\">poll_write_vectored</a>(<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self: <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"{{channel}}/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;,<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cx: &amp;mut <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"{{channel}}/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;,<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bufs: &amp;[<a class=\"primitive\" href=\"{{channel}}/std/primitive.usize.html\">usize</a>]<br />&#160;&#160;&#160;&#160;) -&gt; <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"{{channel}}/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"{{channel}}/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"struct.Error.html\" title=\"struct foo::Error\">Error</a>&gt;&gt; { ... }\n+}</code>\n\\ No newline at end of file"}, {"sha": "ef14836ccb8c6179552fc7e09b62f169a5a13152", "filename": "src/test/rustdoc/extern-default-method.no_href_on_anchor.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c6b88dbbaaf0e1a1240110ad95179417603dba3/src%2Ftest%2Frustdoc%2Fextern-default-method.no_href_on_anchor.html", "raw_url": "https://github.com/rust-lang/rust/raw/0c6b88dbbaaf0e1a1240110ad95179417603dba3/src%2Ftest%2Frustdoc%2Fextern-default-method.no_href_on_anchor.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fextern-default-method.no_href_on_anchor.html?ref=0c6b88dbbaaf0e1a1240110ad95179417603dba3", "patch": "@@ -1 +1 @@\n-<a class=\"fnname\">provided</a>(&amp;self)\n\\ No newline at end of file\n+<a class=\"fn\">provided</a>(&amp;self)\n\\ No newline at end of file"}, {"sha": "fc28b230a5f7ed8ad30e476b011d2abf37cbbf4b", "filename": "src/test/rustdoc/extern-default-method.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c6b88dbbaaf0e1a1240110ad95179417603dba3/src%2Ftest%2Frustdoc%2Fextern-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c6b88dbbaaf0e1a1240110ad95179417603dba3/src%2Ftest%2Frustdoc%2Fextern-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fextern-default-method.rs?ref=0c6b88dbbaaf0e1a1240110ad95179417603dba3", "patch": "@@ -11,13 +11,13 @@ extern crate rustdoc_extern_default_method as ext;\n // However, the method in the trait impl should *not* have a link (an `href` attribute) to\n // its corresponding item in the trait declaration since it would otherwise be broken.\n //\n-// In older versions of rustdoc, the impl item (`a[@class=\"fnname\"]`) used to link to\n+// In older versions of rustdoc, the impl item (`a[@class=\"fn\"]`) used to link to\n // `#method.provided` \u2013 i.e. \"to itself\". Put in quotes since that was actually incorrect in\n // general: If the type `Struct` also had an inherent method called `provided`, the impl item\n // would link to that one even though those two methods are distinct items!\n \n // @count extern_default_method/struct.Struct.html '//*[@id=\"method.provided\"]' 1\n-// @count extern_default_method/struct.Struct.html '//*[@id=\"method.provided\"]//a[@class=\"fnname\"]' 1\n-// @snapshot no_href_on_anchor - '//*[@id=\"method.provided\"]//a[@class=\"fnname\"]'\n+// @count extern_default_method/struct.Struct.html '//*[@id=\"method.provided\"]//a[@class=\"fn\"]' 1\n+// @snapshot no_href_on_anchor - '//*[@id=\"method.provided\"]//a[@class=\"fn\"]'\n // @has extern_default_method/struct.Struct.html '//*[@id=\"method.provided\"]//a[@class=\"anchor\"]/@href' #method.provided\n pub use ext::Struct;"}, {"sha": "29f9c2926e9ec0c42f10d3eb5e70d5ad3bddf2c0", "filename": "src/test/rustdoc/foreigntype.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c6b88dbbaaf0e1a1240110ad95179417603dba3/src%2Ftest%2Frustdoc%2Fforeigntype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c6b88dbbaaf0e1a1240110ad95179417603dba3/src%2Ftest%2Frustdoc%2Fforeigntype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fforeigntype.rs?ref=0c6b88dbbaaf0e1a1240110ad95179417603dba3", "patch": "@@ -6,7 +6,7 @@ extern \"C\" {\n }\n \n impl ExtType {\n-    // @has - '//a[@class=\"fnname\"]' 'do_something'\n+    // @has - '//a[@class=\"fn\"]' 'do_something'\n     pub fn do_something(&self) {}\n }\n "}, {"sha": "f3c1c045202b0487c67306740b4eab50452e063f", "filename": "src/test/rustdoc/inline_cross/issue-24183.method_no_where_self_sized.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c6b88dbbaaf0e1a1240110ad95179417603dba3/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-24183.method_no_where_self_sized.html", "raw_url": "https://github.com/rust-lang/rust/raw/0c6b88dbbaaf0e1a1240110ad95179417603dba3/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-24183.method_no_where_self_sized.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-24183.method_no_where_self_sized.html?ref=0c6b88dbbaaf0e1a1240110ad95179417603dba3", "patch": "@@ -1 +1 @@\n-<h4 class=\"code-header\">fn <a href=\"#method.touch\" class=\"fnname\">touch</a>(&amp;self)</h4>\n\\ No newline at end of file\n+<h4 class=\"code-header\">fn <a href=\"#method.touch\" class=\"fn\">touch</a>(&amp;self)</h4>\n\\ No newline at end of file"}, {"sha": "a125fa036790b6c36cc88adf0d46806d56ce8624", "filename": "src/test/rustdoc/trait-impl-items-links-and-anchors.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0c6b88dbbaaf0e1a1240110ad95179417603dba3/src%2Ftest%2Frustdoc%2Ftrait-impl-items-links-and-anchors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c6b88dbbaaf0e1a1240110ad95179417603dba3/src%2Ftest%2Frustdoc%2Ftrait-impl-items-links-and-anchors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftrait-impl-items-links-and-anchors.rs?ref=0c6b88dbbaaf0e1a1240110ad95179417603dba3", "patch": "@@ -13,10 +13,10 @@ impl MyTrait for String {\n     // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//*[@id=\"associatedconstant.VALUE-1\"]//a[@class=\"constant\"]/@href' #associatedconstant.VALUE\n     // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//*[@id=\"associatedconstant.VALUE-1\"]//a[@class=\"anchor\"]/@href' #associatedconstant.VALUE-1\n     const VALUE: u32 = 5;\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//*[@id=\"method.trait_function\"]//a[@class=\"fnname\"]/@href' #tymethod.trait_function\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//*[@id=\"method.trait_function\"]//a[@class=\"fn\"]/@href' #tymethod.trait_function\n     // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//*[@id=\"method.trait_function\"]//a[@class=\"anchor\"]/@href' #method.trait_function\n     fn trait_function(&self) {}\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//*[@id=\"method.defaulted_override-1\"]//a[@class=\"fnname\"]/@href' #method.defaulted_override\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//*[@id=\"method.defaulted_override-1\"]//a[@class=\"fn\"]/@href' #method.defaulted_override\n     // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//*[@id=\"method.defaulted_override-1\"]//a[@class=\"anchor\"]/@href' #method.defaulted_override-1\n     fn defaulted_override(&self) {}\n }\n@@ -28,10 +28,10 @@ impl MyTrait for Vec<u8> {\n     // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//*[@id=\"associatedconstant.VALUE-2\"]//a[@class=\"constant\"]/@href' #associatedconstant.VALUE\n     // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//*[@id=\"associatedconstant.VALUE-2\"]//a[@class=\"anchor\"]/@href' #associatedconstant.VALUE-2\n     const VALUE: u32 = 5;\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//*[@id=\"method.trait_function\"]//a[@class=\"fnname\"]/@href' #tymethod.trait_function\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//*[@id=\"method.trait_function\"]//a[@class=\"fn\"]/@href' #tymethod.trait_function\n     // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//*[@id=\"method.trait_function-1\"]//a[@class=\"anchor\"]/@href' #method.trait_function-1\n     fn trait_function(&self) {}\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//*[@id=\"method.defaulted_override-2\"]//a[@class=\"fnname\"]/@href' #method.defaulted_override\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//*[@id=\"method.defaulted_override-2\"]//a[@class=\"fn\"]/@href' #method.defaulted_override\n     // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//*[@id=\"method.defaulted_override-2\"]//a[@class=\"anchor\"]/@href' #method.defaulted_override-2\n     fn defaulted_override(&self) {}\n }\n@@ -45,13 +45,13 @@ impl MyTrait for MyStruct {\n     // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//*[@id=\"associatedconstant.VALUE\"]//a[@class=\"constant\"]/@href' trait.MyTrait.html#associatedconstant.VALUE\n     // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//*[@id=\"associatedconstant.VALUE\"]//a[@class=\"anchor\"]/@href' #associatedconstant.VALUE\n     const VALUE: u32 = 20;\n-    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//*[@id=\"method.trait_function\"]//a[@class=\"fnname\"]/@href' trait.MyTrait.html#tymethod.trait_function\n+    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//*[@id=\"method.trait_function\"]//a[@class=\"fn\"]/@href' trait.MyTrait.html#tymethod.trait_function\n     // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//*[@id=\"method.trait_function\"]//a[@class=\"anchor\"]/@href' #method.trait_function\n     fn trait_function(&self) {}\n-    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//*[@id=\"method.defaulted_override\"]//a[@class=\"fnname\"]/@href' trait.MyTrait.html#method.defaulted_override\n+    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//*[@id=\"method.defaulted_override\"]//a[@class=\"fn\"]/@href' trait.MyTrait.html#method.defaulted_override\n     // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//*[@id=\"method.defaulted_override\"]//a[@class=\"anchor\"]/@href' #method.defaulted_override\n     fn defaulted_override(&self) {}\n-    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//*[@id=\"method.defaulted\"]//a[@class=\"fnname\"]/@href' trait.MyTrait.html#method.defaulted\n+    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//*[@id=\"method.defaulted\"]//a[@class=\"fn\"]/@href' trait.MyTrait.html#method.defaulted\n     // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//*[@id=\"method.defaulted\"]//a[@class=\"anchor\"]/@href' #method.defaulted\n }\n "}, {"sha": "d5d6c556d8001464d0576c0cab4461f75ebbaaa7", "filename": "src/test/rustdoc/where.SWhere_TraitWhere_item-decl.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c6b88dbbaaf0e1a1240110ad95179417603dba3/src%2Ftest%2Frustdoc%2Fwhere.SWhere_TraitWhere_item-decl.html", "raw_url": "https://github.com/rust-lang/rust/raw/0c6b88dbbaaf0e1a1240110ad95179417603dba3/src%2Ftest%2Frustdoc%2Fwhere.SWhere_TraitWhere_item-decl.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fwhere.SWhere_TraitWhere_item-decl.html?ref=0c6b88dbbaaf0e1a1240110ad95179417603dba3", "patch": "@@ -1,8 +1,8 @@\n <div class=\"item-decl\"><pre class=\"rust trait\"><code>pub trait TraitWhere {\n     type <a href=\"#associatedtype.Item\" class=\"associatedtype\">Item</a>&lt;'a&gt;<br />&#160;&#160;&#160;&#160;<span class=\"where\">where<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self: 'a</span>;\n \n-    fn <a href=\"#method.func\" class=\"fnname\">func</a>(self)<br />&#160;&#160;&#160;&#160;<span class=\"where\">where<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self: <a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a></span>,\n+    fn <a href=\"#method.func\" class=\"fn\">func</a>(self)<br />&#160;&#160;&#160;&#160;<span class=\"where\">where<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self: <a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a></span>,\n     { ... }\n-<span class=\"item-spacer\" />    fn <a href=\"#method.lines\" class=\"fnname\">lines</a>(self) -&gt; <a class=\"struct\" href=\"{{channel}}/std/io/struct.Lines.html\" title=\"struct std::io::Lines\">Lines</a>&lt;Self&gt;<br />&#160;&#160;&#160;&#160;<span class=\"where\">where<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self: <a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a></span>,\n+<span class=\"item-spacer\" />    fn <a href=\"#method.lines\" class=\"fn\">lines</a>(self) -&gt; <a class=\"struct\" href=\"{{channel}}/std/io/struct.Lines.html\" title=\"struct std::io::Lines\">Lines</a>&lt;Self&gt;<br />&#160;&#160;&#160;&#160;<span class=\"where\">where<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self: <a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a></span>,\n     { ... }\n }</code></pre></div>\n\\ No newline at end of file"}, {"sha": "50cfe362328b681749613d4e81a1e01a4c2a1bb8", "filename": "src/test/rustdoc/whitespace-after-where-clause.trait.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c6b88dbbaaf0e1a1240110ad95179417603dba3/src%2Ftest%2Frustdoc%2Fwhitespace-after-where-clause.trait.html", "raw_url": "https://github.com/rust-lang/rust/raw/0c6b88dbbaaf0e1a1240110ad95179417603dba3/src%2Ftest%2Frustdoc%2Fwhitespace-after-where-clause.trait.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fwhitespace-after-where-clause.trait.html?ref=0c6b88dbbaaf0e1a1240110ad95179417603dba3", "patch": "@@ -1,6 +1,6 @@\n <div class=\"item-decl\"><pre class=\"rust trait\"><code>pub trait ToOwned&lt;T&gt;<span class=\"where fmt-newline\">where<br />&#160;&#160;&#160;&#160;T: <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</span>{\n     type <a href=\"#associatedtype.Owned\" class=\"associatedtype\">Owned</a>;\n \n-    fn <a href=\"#tymethod.to_owned\" class=\"fnname\">to_owned</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"trait.ToOwned.html#associatedtype.Owned\" title=\"type foo::ToOwned::Owned\">Owned</a>;\n-<span class=\"item-spacer\" />    fn <a href=\"#tymethod.whatever\" class=\"fnname\">whatever</a>(&amp;self) -&gt; T;\n+    fn <a href=\"#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"trait.ToOwned.html#associatedtype.Owned\" title=\"type foo::ToOwned::Owned\">Owned</a>;\n+<span class=\"item-spacer\" />    fn <a href=\"#tymethod.whatever\" class=\"fn\">whatever</a>(&amp;self) -&gt; T;\n }</code></pre></div>\n\\ No newline at end of file"}, {"sha": "21eb89b75011b633667482e5547a34933bfab95e", "filename": "src/test/rustdoc/whitespace-after-where-clause.trait2.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c6b88dbbaaf0e1a1240110ad95179417603dba3/src%2Ftest%2Frustdoc%2Fwhitespace-after-where-clause.trait2.html", "raw_url": "https://github.com/rust-lang/rust/raw/0c6b88dbbaaf0e1a1240110ad95179417603dba3/src%2Ftest%2Frustdoc%2Fwhitespace-after-where-clause.trait2.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fwhitespace-after-where-clause.trait2.html?ref=0c6b88dbbaaf0e1a1240110ad95179417603dba3", "patch": "@@ -1,6 +1,6 @@\n <div class=\"item-decl\"><pre class=\"rust trait\"><code>pub trait ToOwned2&lt;T:&#160;<a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; {\n     type <a href=\"#associatedtype.Owned\" class=\"associatedtype\">Owned</a>;\n \n-    fn <a href=\"#tymethod.to_owned\" class=\"fnname\">to_owned</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"trait.ToOwned2.html#associatedtype.Owned\" title=\"type foo::ToOwned2::Owned\">Owned</a>;\n-<span class=\"item-spacer\" />    fn <a href=\"#tymethod.whatever\" class=\"fnname\">whatever</a>(&amp;self) -&gt; T;\n+    fn <a href=\"#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"trait.ToOwned2.html#associatedtype.Owned\" title=\"type foo::ToOwned2::Owned\">Owned</a>;\n+<span class=\"item-spacer\" />    fn <a href=\"#tymethod.whatever\" class=\"fn\">whatever</a>(&amp;self) -&gt; T;\n }</code></pre></div>\n\\ No newline at end of file"}, {"sha": "124ddec50cbbefd45085aef500ea20cc0c82f36c", "filename": "src/test/ui/suggestions/suggest_print_over_printf.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c6b88dbbaaf0e1a1240110ad95179417603dba3/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest_print_over_printf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c6b88dbbaaf0e1a1240110ad95179417603dba3/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest_print_over_printf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest_print_over_printf.rs?ref=0c6b88dbbaaf0e1a1240110ad95179417603dba3", "patch": "@@ -1,5 +1,4 @@\n-// Suggest to a user to use the print macros\n-// instead to use the printf.\n+// Suggest print macro when user erroneously uses printf\n \n fn main() {\n     let x = 4;", "previous_filename": "src/test/ui/suggestions/seggest_print_over_printf.rs"}, {"sha": "1214bec16ce03f6b42b5800aa89a76699fb06dbb", "filename": "src/test/ui/suggestions/suggest_print_over_printf.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c6b88dbbaaf0e1a1240110ad95179417603dba3/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest_print_over_printf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c6b88dbbaaf0e1a1240110ad95179417603dba3/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest_print_over_printf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest_print_over_printf.stderr?ref=0c6b88dbbaaf0e1a1240110ad95179417603dba3", "patch": "@@ -1,5 +1,5 @@\n error[E0425]: cannot find function `printf` in this scope\n-  --> $DIR/seggest_print_over_printf.rs:6:5\n+  --> $DIR/suggest_print_over_printf.rs:5:5\n    |\n LL |     printf(\"%d\", x);\n    |     ^^^^^^ not found in this scope", "previous_filename": "src/test/ui/suggestions/seggest_print_over_printf.stderr"}, {"sha": "5f01645da5242c5fd26b4ba510fe93bdb60fcf63", "filename": "src/test/ui/traits/predicate_can_apply-hang.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ef685ea39280cc4a4a32f7c3c586d2ce946e8f0/src%2Ftest%2Fui%2Ftraits%2Fpredicate_can_apply-hang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ef685ea39280cc4a4a32f7c3c586d2ce946e8f0/src%2Ftest%2Fui%2Ftraits%2Fpredicate_can_apply-hang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fpredicate_can_apply-hang.rs?ref=1ef685ea39280cc4a4a32f7c3c586d2ce946e8f0", "patch": "@@ -1,6 +0,0 @@\n-fn f<B>(x: Vec<[[[B; 1]; 1]; 1]>) -> impl PartialEq<B> {\n-    //~^ ERROR can't compare `Vec<[[[B; 1]; 1]; 1]>` with `B`\n-    x\n-}\n-\n-fn main() {}"}, {"sha": "49fe63b412ac91b3ec165282a82e421abe8c30cb", "filename": "src/test/ui/traits/predicate_can_apply-hang.stderr", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1ef685ea39280cc4a4a32f7c3c586d2ce946e8f0/src%2Ftest%2Fui%2Ftraits%2Fpredicate_can_apply-hang.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ef685ea39280cc4a4a32f7c3c586d2ce946e8f0/src%2Ftest%2Fui%2Ftraits%2Fpredicate_can_apply-hang.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fpredicate_can_apply-hang.stderr?ref=1ef685ea39280cc4a4a32f7c3c586d2ce946e8f0", "patch": "@@ -1,21 +0,0 @@\n-error[E0277]: can't compare `Vec<[[[B; 1]; 1]; 1]>` with `B`\n-  --> $DIR/predicate_can_apply-hang.rs:1:38\n-   |\n-LL | fn f<B>(x: Vec<[[[B; 1]; 1]; 1]>) -> impl PartialEq<B> {\n-   |                                      ^^^^^^^^^^^^^^^^^ no implementation for `Vec<[[[B; 1]; 1]; 1]> == B`\n-LL |\n-LL |     x\n-   |     - return type was inferred to be `Vec<[[[B; 1]; 1]; 1]>` here\n-   |\n-   = help: the trait `PartialEq<B>` is not implemented for `Vec<[[[B; 1]; 1]; 1]>`\n-   = help: the following other types implement trait `PartialEq<Rhs>`:\n-             <Vec<T, A1> as PartialEq<Vec<U, A2>>>\n-             <Vec<T, A> as PartialEq<&[U; N]>>\n-             <Vec<T, A> as PartialEq<&[U]>>\n-             <Vec<T, A> as PartialEq<&mut [U]>>\n-             <Vec<T, A> as PartialEq<[U; N]>>\n-             <Vec<T, A> as PartialEq<[U]>>\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "a8330c9b65c312d232b09b08a2a6c0c5f29073fd", "filename": "src/test/ui/typeck/hang-in-overflow.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1ef685ea39280cc4a4a32f7c3c586d2ce946e8f0/src%2Ftest%2Fui%2Ftypeck%2Fhang-in-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ef685ea39280cc4a4a32f7c3c586d2ce946e8f0/src%2Ftest%2Fui%2Ftypeck%2Fhang-in-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fhang-in-overflow.rs?ref=1ef685ea39280cc4a4a32f7c3c586d2ce946e8f0", "patch": "@@ -1,19 +0,0 @@\n-// normalize-stderr-test \"the requirement `.*`\" -> \"the requirement `...`\"\n-// normalize-stderr-test \"required for `.*` to implement `.*`\" -> \"required for `...` to implement `...`\"\n-// normalize-stderr-test: \".*the full type name has been written to.*\\n\" -> \"\"\n-\n-// Currently this fatally aborts instead of hanging.\n-// Make sure at least that this doesn't turn into a hang.\n-\n-fn f() {\n-    foo::<_>();\n-    //~^ ERROR overflow evaluating the requirement\n-}\n-\n-fn foo<B>()\n-where\n-    Vec<[[[B; 1]; 1]; 1]>: PartialEq<B>,\n-{\n-}\n-\n-fn main() {}"}, {"sha": "7a7b85b19b4eee4acec356b30f56f7025dd6ba4c", "filename": "src/test/ui/typeck/hang-in-overflow.stderr", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1ef685ea39280cc4a4a32f7c3c586d2ce946e8f0/src%2Ftest%2Fui%2Ftypeck%2Fhang-in-overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ef685ea39280cc4a4a32f7c3c586d2ce946e8f0/src%2Ftest%2Fui%2Ftypeck%2Fhang-in-overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fhang-in-overflow.stderr?ref=1ef685ea39280cc4a4a32f7c3c586d2ce946e8f0", "patch": "@@ -1,22 +0,0 @@\n-error[E0275]: overflow evaluating the requirement `...`\n-  --> $DIR/hang-in-overflow.rs:9:5\n-   |\n-LL |     foo::<_>();\n-   |     ^^^^^^^^\n-   |\n-   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`hang_in_overflow`)\n-   = note: required for `...` to implement `...`\n-   = note: 127 redundant requirements hidden\n-   = note: required for `...` to implement `...`\n-note: required by a bound in `foo`\n-  --> $DIR/hang-in-overflow.rs:15:28\n-   |\n-LL | fn foo<B>()\n-   |    --- required by a bound in this\n-LL | where\n-LL |     Vec<[[[B; 1]; 1]; 1]>: PartialEq<B>,\n-   |                            ^^^^^^^^^^^^ required by this bound in `foo`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0275`."}, {"sha": "bc0b88b2babd23256cad271bdf096d082f3eb284", "filename": "triagebot.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c6b88dbbaaf0e1a1240110ad95179417603dba3/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0c6b88dbbaaf0e1a1240110ad95179417603dba3/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=0c6b88dbbaaf0e1a1240110ad95179417603dba3", "patch": "@@ -412,6 +412,9 @@ cc = [\"@rust-lang/clippy\"]\n message = \"The Miri subtree was changed\"\n cc = [\"@rust-lang/miri\"]\n \n+[mentions.\"src/tools/rust-analyzer\"]\n+cc = [\"@rust-lang/wg-rls-2\"]\n+\n [mentions.\"src/tools/rustfmt\"]\n cc = [\"@rust-lang/rustfmt\"]\n "}]}