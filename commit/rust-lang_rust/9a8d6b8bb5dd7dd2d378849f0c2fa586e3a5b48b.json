{"sha": "9a8d6b8bb5dd7dd2d378849f0c2fa586e3a5b48b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhOGQ2YjhiYjVkZDdkZDJkMzc4ODQ5ZjBjMmZhNTg2ZTNhNWI0OGI=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-01-21T11:47:58Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-01-26T03:52:30Z"}, "message": "Do not capture stderr in the compiler. Instead just panic silently for fatal errors", "tree": {"sha": "ee04624362f08eb705597831fbc197b68c8d20a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee04624362f08eb705597831fbc197b68c8d20a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a8d6b8bb5dd7dd2d378849f0c2fa586e3a5b48b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a8d6b8bb5dd7dd2d378849f0c2fa586e3a5b48b", "html_url": "https://github.com/rust-lang/rust/commit/9a8d6b8bb5dd7dd2d378849f0c2fa586e3a5b48b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a8d6b8bb5dd7dd2d378849f0c2fa586e3a5b48b/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6", "html_url": "https://github.com/rust-lang/rust/commit/9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6"}], "stats": {"total": 187, "additions": 90, "deletions": 97}, "files": [{"sha": "bc7a1137d84a9816957af75823049acef3d1042d", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a8d6b8bb5dd7dd2d378849f0c2fa586e3a5b48b/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a8d6b8bb5dd7dd2d378849f0c2fa586e3a5b48b/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=9a8d6b8bb5dd7dd2d378849f0c2fa586e3a5b48b", "patch": "@@ -2837,8 +2837,8 @@ impl<'a> LoweringContext<'a> {\n                     (&None, &Some(..), Closed) => \"RangeToInclusive\",\n                     (&Some(..), &Some(..), Closed) => \"RangeInclusive\",\n                     (_, &None, Closed) =>\n-                        panic!(self.diagnostic().span_fatal(\n-                            e.span, \"inclusive range with no end\")),\n+                        self.diagnostic().span_fatal(\n+                            e.span, \"inclusive range with no end\").raise(),\n                 };\n \n                 let fields ="}, {"sha": "466bfa3e4e4cfbcb8b2afe2982b521902b2d5deb", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9a8d6b8bb5dd7dd2d378849f0c2fa586e3a5b48b/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a8d6b8bb5dd7dd2d378849f0c2fa586e3a5b48b/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=9a8d6b8bb5dd7dd2d378849f0c2fa586e3a5b48b", "patch": "@@ -1333,16 +1333,16 @@ pub fn build_target_config(opts: &Options, sp: &Handler) -> Config {\n             sp.struct_fatal(&format!(\"Error loading target specification: {}\", e))\n                 .help(\"Use `--print target-list` for a list of built-in targets\")\n                 .emit();\n-            panic!(FatalError);\n+            FatalError.raise();\n         }\n     };\n \n     let (isize_ty, usize_ty) = match &target.target_pointer_width[..] {\n         \"16\" => (ast::IntTy::I16, ast::UintTy::U16),\n         \"32\" => (ast::IntTy::I32, ast::UintTy::U32),\n         \"64\" => (ast::IntTy::I64, ast::UintTy::U64),\n-        w    => panic!(sp.fatal(&format!(\"target specification was invalid: \\\n-                                          unrecognized target-pointer-width {}\", w))),\n+        w    => sp.fatal(&format!(\"target specification was invalid: \\\n+                                          unrecognized target-pointer-width {}\", w)).raise(),\n     };\n \n     Config {"}, {"sha": "be796129ed49e62880c6ceca2e384d849a5254e1", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9a8d6b8bb5dd7dd2d378849f0c2fa586e3a5b48b/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a8d6b8bb5dd7dd2d378849f0c2fa586e3a5b48b/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=9a8d6b8bb5dd7dd2d378849f0c2fa586e3a5b48b", "patch": "@@ -250,18 +250,18 @@ impl Session {\n     }\n \n     pub fn span_fatal<S: Into<MultiSpan>>(&self, sp: S, msg: &str) -> ! {\n-        panic!(self.diagnostic().span_fatal(sp, msg))\n+        self.diagnostic().span_fatal(sp, msg).raise()\n     }\n     pub fn span_fatal_with_code<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n         msg: &str,\n         code: DiagnosticId,\n     ) -> ! {\n-        panic!(self.diagnostic().span_fatal_with_code(sp, msg, code))\n+        self.diagnostic().span_fatal_with_code(sp, msg, code).raise()\n     }\n     pub fn fatal(&self, msg: &str) -> ! {\n-        panic!(self.diagnostic().fatal(msg))\n+        self.diagnostic().fatal(msg).raise()\n     }\n     pub fn span_err_or_warn<S: Into<MultiSpan>>(&self, is_warning: bool, sp: S, msg: &str) {\n         if is_warning {\n@@ -919,7 +919,7 @@ pub fn build_session_(sopts: config::Options,\n     let host = match Target::search(config::host_triple()) {\n         Ok(t) => t,\n         Err(e) => {\n-            panic!(span_diagnostic.fatal(&format!(\"Error loading host specification: {}\", e)));\n+            span_diagnostic.fatal(&format!(\"Error loading host specification: {}\", e)).raise();\n         }\n     };\n     let target_cfg = config::build_target_config(&sopts, &span_diagnostic);\n@@ -945,7 +945,7 @@ pub fn build_session_(sopts: config::Options,\n     let working_dir = match env::current_dir() {\n         Ok(dir) => dir,\n         Err(e) => {\n-            panic!(p_s.span_diagnostic.fatal(&format!(\"Current directory is invalid: {}\", e)))\n+            p_s.span_diagnostic.fatal(&format!(\"Current directory is invalid: {}\", e)).raise()\n         }\n     };\n     let working_dir = file_path_mapping.map_prefix(working_dir);\n@@ -1076,7 +1076,7 @@ pub fn early_error(output: config::ErrorOutputType, msg: &str) -> ! {\n     };\n     let handler = errors::Handler::with_emitter(true, false, emitter);\n     handler.emit(&MultiSpan::new(), msg, errors::Level::Fatal);\n-    panic!(errors::FatalError);\n+    errors::FatalError.raise();\n }\n \n pub fn early_warn(output: config::ErrorOutputType, msg: &str) {"}, {"sha": "cdb50a0ae48507a90d180fb1b9e32aaaa4f9a4c5", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 7, "deletions": 28, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/9a8d6b8bb5dd7dd2d378849f0c2fa586e3a5b48b/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a8d6b8bb5dd7dd2d378849f0c2fa586e3a5b48b/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=9a8d6b8bb5dd7dd2d378849f0c2fa586e3a5b48b", "patch": "@@ -87,11 +87,11 @@ use std::env;\n use std::ffi::OsString;\n use std::io::{self, Read, Write};\n use std::iter::repeat;\n+use std::panic;\n use std::path::PathBuf;\n use std::process::{self, Command, Stdio};\n use std::rc::Rc;\n use std::str;\n-use std::sync::{Arc, Mutex};\n use std::thread;\n \n use syntax::ast;\n@@ -168,7 +168,7 @@ pub fn run<F>(run_compiler: F) -> isize\n                     handler.emit(&MultiSpan::new(),\n                                  \"aborting due to previous error(s)\",\n                                  errors::Level::Fatal);\n-                    exit_on_err();\n+                    panic::resume_unwind(Box::new(errors::FatalErrorMarker));\n                 }\n             }\n         }\n@@ -1228,27 +1228,16 @@ pub fn in_rustc_thread<F, R>(f: F) -> Result<R, Box<Any + Send>>\n /// The diagnostic emitter yielded to the procedure should be used for reporting\n /// errors of the compiler.\n pub fn monitor<F: FnOnce() + Send + 'static>(f: F) {\n-    struct Sink(Arc<Mutex<Vec<u8>>>);\n-    impl Write for Sink {\n-        fn write(&mut self, data: &[u8]) -> io::Result<usize> {\n-            Write::write(&mut *self.0.lock().unwrap(), data)\n-        }\n-        fn flush(&mut self) -> io::Result<()> {\n-            Ok(())\n-        }\n-    }\n-\n-    let data = Arc::new(Mutex::new(Vec::new()));\n-    let err = Sink(data.clone());\n-\n     let result = in_rustc_thread(move || {\n-        io::set_panic(Some(box err));\n         f()\n     });\n \n     if let Err(value) = result {\n         // Thread panicked without emitting a fatal diagnostic\n-        if !value.is::<errors::FatalError>() {\n+        if !value.is::<errors::FatalErrorMarker>() {\n+            // Emit a newline\n+            eprintln!(\"\");\n+\n             let emitter =\n                 Box::new(errors::emitter::EmitterWriter::stderr(errors::ColorConfig::Auto,\n                                                                 None,\n@@ -1273,22 +1262,12 @@ pub fn monitor<F: FnOnce() + Send + 'static>(f: F) {\n                              &note,\n                              errors::Level::Note);\n             }\n-\n-            eprintln!(\"{}\", str::from_utf8(&data.lock().unwrap()).unwrap());\n         }\n \n-        exit_on_err();\n+        panic::resume_unwind(Box::new(errors::FatalErrorMarker));\n     }\n }\n \n-fn exit_on_err() -> ! {\n-    // Panic so the process returns a failure code, but don't pollute the\n-    // output with some unnecessary panic messages, we've already\n-    // printed everything that we needed to.\n-    io::set_panic(Some(box io::sink()));\n-    panic!();\n-}\n-\n #[cfg(stage0)]\n pub fn diagnostics_registry() -> errors::registry::Registry {\n     use errors::registry::Registry;"}, {"sha": "33948ea92b98ea83de57266a3a9403274c2765bf", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9a8d6b8bb5dd7dd2d378849f0c2fa586e3a5b48b/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a8d6b8bb5dd7dd2d378849f0c2fa586e3a5b48b/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=9a8d6b8bb5dd7dd2d378849f0c2fa586e3a5b48b", "patch": "@@ -19,6 +19,7 @@\n #![cfg_attr(unix, feature(libc))]\n #![feature(conservative_impl_trait)]\n #![feature(i128_type)]\n+#![feature(optin_builtin_traits)]\n \n extern crate term;\n #[cfg(unix)]\n@@ -44,6 +45,7 @@ use std::rc::Rc;\n use std::{error, fmt};\n use std::sync::atomic::AtomicUsize;\n use std::sync::atomic::Ordering::SeqCst;\n+use std::panic;\n \n mod diagnostic;\n mod diagnostic_builder;\n@@ -201,6 +203,18 @@ impl CodeSuggestion {\n #[must_use]\n pub struct FatalError;\n \n+pub struct FatalErrorMarker;\n+\n+// Don't implement Send on FatalError. This makes it impossible to panic!(FatalError).\n+// We don't want to invoke the panic handler and print a backtrace for fatal errors.\n+impl !Send for FatalError {}\n+\n+impl FatalError {\n+    pub fn raise(self) -> ! {\n+        panic::resume_unwind(Box::new(FatalErrorMarker))\n+    }\n+}\n+\n impl fmt::Display for FatalError {\n     fn fmt(&self, f: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n         write!(f, \"parser fatal error\")\n@@ -539,7 +553,7 @@ impl Handler {\n             }\n         }\n \n-        panic!(self.fatal(&s));\n+        self.fatal(&s).raise();\n     }\n     pub fn emit(&self, msp: &MultiSpan, msg: &str, lvl: Level) {\n         if lvl == Warning && !self.flags.can_emit_warnings {"}, {"sha": "884d4c7d14b588b3f95375afaf13788c4cc279ac", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a8d6b8bb5dd7dd2d378849f0c2fa586e3a5b48b/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a8d6b8bb5dd7dd2d378849f0c2fa586e3a5b48b/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=9a8d6b8bb5dd7dd2d378849f0c2fa586e3a5b48b", "patch": "@@ -155,7 +155,7 @@ fn get_llvm_opt_size(optimize: config::OptLevel) -> llvm::CodeGenOptSize {\n \n pub fn create_target_machine(sess: &Session) -> TargetMachineRef {\n     target_machine_factory(sess)().unwrap_or_else(|err| {\n-        panic!(llvm_err(sess.diagnostic(), err))\n+        llvm_err(sess.diagnostic(), err).raise()\n     })\n }\n \n@@ -582,7 +582,7 @@ fn generate_lto_work(cgcx: &CodegenContext,\n         lto::LTOMode::JustThisCrate\n     };\n     let lto_modules = lto::run(cgcx, modules, mode, &mut timeline)\n-        .unwrap_or_else(|e| panic!(e));\n+        .unwrap_or_else(|e| e.raise());\n \n     lto_modules.into_iter().map(|module| {\n         let cost = module.cost();"}, {"sha": "025aa94ce06f5afae48a09ed0c0b1a05f0340f01", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a8d6b8bb5dd7dd2d378849f0c2fa586e3a5b48b/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a8d6b8bb5dd7dd2d378849f0c2fa586e3a5b48b/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=9a8d6b8bb5dd7dd2d378849f0c2fa586e3a5b48b", "patch": "@@ -786,7 +786,7 @@ impl<'a> ExtCtxt<'a> {\n     ///   substitute; we never hit resolve/type-checking so the dummy\n     ///   value doesn't have to match anything)\n     pub fn span_fatal<S: Into<MultiSpan>>(&self, sp: S, msg: &str) -> ! {\n-        panic!(self.parse_sess.span_diagnostic.span_fatal(sp, msg));\n+        self.parse_sess.span_diagnostic.span_fatal(sp, msg).raise();\n     }\n \n     /// Emit `msg` attached to `sp`, without immediately stopping"}, {"sha": "44a073545a7302acbe2ce9210af27263850016ab", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a8d6b8bb5dd7dd2d378849f0c2fa586e3a5b48b/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a8d6b8bb5dd7dd2d378849f0c2fa586e3a5b48b/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=9a8d6b8bb5dd7dd2d378849f0c2fa586e3a5b48b", "patch": "@@ -455,7 +455,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 suggested_limit));\n             err.emit();\n             self.cx.trace_macros_diag();\n-            panic!(FatalError);\n+            FatalError.raise();\n         }\n \n         Some(result)"}, {"sha": "ec4e6ced1b273a9b69e96c689c655436bd316eae", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9a8d6b8bb5dd7dd2d378849f0c2fa586e3a5b48b/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a8d6b8bb5dd7dd2d378849f0c2fa586e3a5b48b/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=9a8d6b8bb5dd7dd2d378849f0c2fa586e3a5b48b", "patch": "@@ -116,9 +116,10 @@ pub fn expand_include<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[tokenstream::T\n             while self.p.token != token::Eof {\n                 match panictry!(self.p.parse_item()) {\n                     Some(item) => ret.push(item),\n-                    None => panic!(self.p.diagnostic().span_fatal(self.p.span,\n+                    None => self.p.diagnostic().span_fatal(self.p.span,\n                                                            &format!(\"expected item, found `{}`\",\n-                                                                    self.p.this_token_to_string())))\n+                                                                    self.p.this_token_to_string()))\n+                                               .raise()\n                 }\n             }\n             Some(ret)"}, {"sha": "3e3c1618fffb2de30119d58246fffb69aad263c3", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9a8d6b8bb5dd7dd2d378849f0c2fa586e3a5b48b/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a8d6b8bb5dd7dd2d378849f0c2fa586e3a5b48b/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=9a8d6b8bb5dd7dd2d378849f0c2fa586e3a5b48b", "patch": "@@ -573,15 +573,15 @@ fn parse_nt<'a>(p: &mut Parser<'a>, sp: Span, name: &str) -> Nonterminal {\n             Some(i) => token::NtItem(i),\n             None => {\n                 p.fatal(\"expected an item keyword\").emit();\n-                panic!(FatalError);\n+                FatalError.raise();\n             }\n         },\n         \"block\" => token::NtBlock(panictry!(p.parse_block())),\n         \"stmt\" => match panictry!(p.parse_stmt()) {\n             Some(s) => token::NtStmt(s),\n             None => {\n                 p.fatal(\"expected a statement\").emit();\n-                panic!(FatalError);\n+                FatalError.raise();\n             }\n         },\n         \"pat\" => token::NtPat(panictry!(p.parse_pat())),\n@@ -597,7 +597,7 @@ fn parse_nt<'a>(p: &mut Parser<'a>, sp: Span, name: &str) -> Nonterminal {\n                 let token_str = pprust::token_to_string(&p.token);\n                 p.fatal(&format!(\"expected ident, found {}\",\n                                  &token_str[..])).emit();\n-                panic!(FatalError)\n+                FatalError.raise()\n             }\n         },\n         \"path\" => token::NtPath(panictry!(p.parse_path_common(PathStyle::Type, false))),"}, {"sha": "9efb4faa63535725bc198d261465afe694120063", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a8d6b8bb5dd7dd2d378849f0c2fa586e3a5b48b/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a8d6b8bb5dd7dd2d378849f0c2fa586e3a5b48b/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=9a8d6b8bb5dd7dd2d378849f0c2fa586e3a5b48b", "patch": "@@ -222,10 +222,10 @@ pub fn compile(sess: &ParseSess, features: &RefCell<Features>, def: &ast::Item)\n         Success(m) => m,\n         Failure(sp, tok) => {\n             let s = parse_failure_msg(tok);\n-            panic!(sess.span_diagnostic.span_fatal(sp.substitute_dummy(def.span), &s));\n+            sess.span_diagnostic.span_fatal(sp.substitute_dummy(def.span), &s).raise();\n         }\n         Error(sp, s) => {\n-            panic!(sess.span_diagnostic.span_fatal(sp.substitute_dummy(def.span), &s));\n+            sess.span_diagnostic.span_fatal(sp.substitute_dummy(def.span), &s).raise();\n         }\n     };\n "}, {"sha": "8512e215ca7655cad4d5bf4cac965867b1e908a9", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a8d6b8bb5dd7dd2d378849f0c2fa586e3a5b48b/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a8d6b8bb5dd7dd2d378849f0c2fa586e3a5b48b/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=9a8d6b8bb5dd7dd2d378849f0c2fa586e3a5b48b", "patch": "@@ -1954,7 +1954,7 @@ impl FeatureChecker {\n                 .span_note(ca_span, \"`#![feature(custom_attribute)]` declared here\")\n                 .emit();\n \n-            panic!(FatalError);\n+            FatalError.raise();\n         }\n \n         if let (Some(span), None) = (self.copy_closures, self.clone_closures) {\n@@ -1963,7 +1963,7 @@ impl FeatureChecker {\n                   .span_note(span, \"`#![feature(copy_closures)]` declared here\")\n                   .emit();\n \n-            panic!(FatalError);\n+            FatalError.raise();\n         }\n     }\n }"}, {"sha": "3b4c5da10f20b35b5f0014a956419e00b4125d11", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a8d6b8bb5dd7dd2d378849f0c2fa586e3a5b48b/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a8d6b8bb5dd7dd2d378849f0c2fa586e3a5b48b/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=9a8d6b8bb5dd7dd2d378849f0c2fa586e3a5b48b", "patch": "@@ -54,7 +54,7 @@ macro_rules! panictry {\n             Ok(e) => e,\n             Err(mut e) => {\n                 e.emit();\n-                panic!(FatalError);\n+                FatalError.raise()\n             }\n         }\n     })"}, {"sha": "63aa5d28ce8dc9a6df04454c397886d85f9262da", "filename": "src/libsyntax/parse/lexer/comments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a8d6b8bb5dd7dd2d378849f0c2fa586e3a5b48b/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a8d6b8bb5dd7dd2d378849f0c2fa586e3a5b48b/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs?ref=9a8d6b8bb5dd7dd2d378849f0c2fa586e3a5b48b", "patch": "@@ -265,7 +265,7 @@ fn read_block_comment(rdr: &mut StringReader,\n         while level > 0 {\n             debug!(\"=== block comment level {}\", level);\n             if rdr.is_eof() {\n-                panic!(rdr.fatal(\"unterminated block comment\"));\n+                rdr.fatal(\"unterminated block comment\").raise();\n             }\n             if rdr.ch_is('\\n') {\n                 trim_whitespace_prefix_and_push_line(&mut lines, curr_line, col);"}, {"sha": "b95c91548d00b99954ed70701f9e1cc87eed12ed", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 33, "deletions": 34, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/9a8d6b8bb5dd7dd2d378849f0c2fa586e3a5b48b/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a8d6b8bb5dd7dd2d378849f0c2fa586e3a5b48b/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=9a8d6b8bb5dd7dd2d378849f0c2fa586e3a5b48b", "patch": "@@ -90,7 +90,7 @@ impl<'a> StringReader<'a> {\n             Ok(tok) => tok,\n             Err(_) => {\n                 self.emit_fatal_errors();\n-                panic!(FatalError);\n+                FatalError.raise();\n             }\n         }\n     }\n@@ -191,7 +191,7 @@ impl<'a> StringReader<'a> {\n         let mut sr = StringReader::new_raw(sess, filemap);\n         if sr.advance_token().is_err() {\n             sr.emit_fatal_errors();\n-            panic!(FatalError);\n+            FatalError.raise();\n         }\n         sr\n     }\n@@ -216,7 +216,7 @@ impl<'a> StringReader<'a> {\n \n         if sr.advance_token().is_err() {\n             sr.emit_fatal_errors();\n-            panic!(FatalError);\n+            FatalError.raise();\n         }\n         sr\n     }\n@@ -647,7 +647,7 @@ impl<'a> StringReader<'a> {\n                     \"unterminated block comment\"\n                 };\n                 let last_bpos = self.pos;\n-                panic!(self.fatal_span_(start_bpos, last_bpos, msg));\n+                self.fatal_span_(start_bpos, last_bpos, msg).raise();\n             }\n             let n = self.ch.unwrap();\n             match n {\n@@ -808,9 +808,9 @@ impl<'a> StringReader<'a> {\n         for _ in 0..n_digits {\n             if self.is_eof() {\n                 let last_bpos = self.pos;\n-                panic!(self.fatal_span_(start_bpos,\n-                                        last_bpos,\n-                                        \"unterminated numeric character escape\"));\n+                self.fatal_span_(start_bpos,\n+                                 last_bpos,\n+                                 \"unterminated numeric character escape\").raise();\n             }\n             if self.ch_is(delim) {\n                 let last_bpos = self.pos;\n@@ -1025,9 +1025,9 @@ impl<'a> StringReader<'a> {\n                     }\n                 },\n                 None => {\n-                    panic!(self.fatal_span_(start_bpos,\n-                                            self.pos,\n-                                            \"unterminated unicode escape (found EOF)\"));\n+                    self.fatal_span_(start_bpos,\n+                                     self.pos,\n+                                     \"unterminated unicode escape (found EOF)\").raise();\n                 }\n             }\n             self.bump();\n@@ -1283,9 +1283,9 @@ impl<'a> StringReader<'a> {\n                     // lifetimes shouldn't end with a single quote\n                     // if we find one, then this is an invalid character literal\n                     if self.ch_is('\\'') {\n-                        panic!(self.fatal_span_verbose(\n-                               start_with_quote, self.next_pos,\n-                               String::from(\"character literal may only contain one codepoint\")));\n+                        self.fatal_span_verbose(start_with_quote, self.next_pos,\n+                                String::from(\"character literal may only contain one codepoint\"))\n+                            .raise();\n \n                     }\n \n@@ -1332,9 +1332,8 @@ impl<'a> StringReader<'a> {\n                             break;\n                         }\n                     }\n-                    panic!(self.fatal_span_verbose(\n-                           start_with_quote, pos,\n-                           String::from(\"character literal may only contain one codepoint\")));\n+                    self.fatal_span_verbose(start_with_quote, pos,\n+                        String::from(\"character literal may only contain one codepoint\")).raise();\n                 }\n \n                 let id = if valid {\n@@ -1364,9 +1363,9 @@ impl<'a> StringReader<'a> {\n                 while !self.ch_is('\"') {\n                     if self.is_eof() {\n                         let last_bpos = self.pos;\n-                        panic!(self.fatal_span_(start_bpos,\n-                                                last_bpos,\n-                                                \"unterminated double quote string\"));\n+                        self.fatal_span_(start_bpos,\n+                                         last_bpos,\n+                                         \"unterminated double quote string\").raise();\n                     }\n \n                     let ch_start = self.pos;\n@@ -1399,15 +1398,15 @@ impl<'a> StringReader<'a> {\n \n                 if self.is_eof() {\n                     let last_bpos = self.pos;\n-                    panic!(self.fatal_span_(start_bpos, last_bpos, \"unterminated raw string\"));\n+                    self.fatal_span_(start_bpos, last_bpos, \"unterminated raw string\").raise();\n                 } else if !self.ch_is('\"') {\n                     let last_bpos = self.pos;\n                     let curr_char = self.ch.unwrap();\n-                    panic!(self.fatal_span_char(start_bpos,\n-                                                last_bpos,\n-                                                \"found invalid character; only `#` is allowed \\\n-                                                 in raw string delimitation\",\n-                                                curr_char));\n+                    self.fatal_span_char(start_bpos,\n+                                         last_bpos,\n+                                         \"found invalid character; only `#` is allowed \\\n+                                         in raw string delimitation\",\n+                                         curr_char).raise();\n                 }\n                 self.bump();\n                 let content_start_bpos = self.pos;\n@@ -1416,7 +1415,7 @@ impl<'a> StringReader<'a> {\n                 'outer: loop {\n                     if self.is_eof() {\n                         let last_bpos = self.pos;\n-                        panic!(self.fatal_span_(start_bpos, last_bpos, \"unterminated raw string\"));\n+                        self.fatal_span_(start_bpos, last_bpos, \"unterminated raw string\").raise();\n                     }\n                     // if self.ch_is('\"') {\n                     // content_end_bpos = self.pos;\n@@ -1573,9 +1572,9 @@ impl<'a> StringReader<'a> {\n             // character before position `start` are an\n             // ascii single quote and ascii 'b'.\n             let pos = self.pos;\n-            panic!(self.fatal_span_verbose(start - BytePos(2),\n-                                           pos,\n-                                           \"unterminated byte constant\".to_string()));\n+            self.fatal_span_verbose(start - BytePos(2),\n+                                    pos,\n+                                    \"unterminated byte constant\".to_string()).raise();\n         }\n \n         let id = if valid {\n@@ -1599,7 +1598,7 @@ impl<'a> StringReader<'a> {\n         while !self.ch_is('\"') {\n             if self.is_eof() {\n                 let pos = self.pos;\n-                panic!(self.fatal_span_(start, pos, \"unterminated double quote byte string\"));\n+                self.fatal_span_(start, pos, \"unterminated double quote byte string\").raise();\n             }\n \n             let ch_start = self.pos;\n@@ -1631,15 +1630,15 @@ impl<'a> StringReader<'a> {\n \n         if self.is_eof() {\n             let pos = self.pos;\n-            panic!(self.fatal_span_(start_bpos, pos, \"unterminated raw string\"));\n+            self.fatal_span_(start_bpos, pos, \"unterminated raw string\").raise();\n         } else if !self.ch_is('\"') {\n             let pos = self.pos;\n             let ch = self.ch.unwrap();\n-            panic!(self.fatal_span_char(start_bpos,\n+            self.fatal_span_char(start_bpos,\n                                         pos,\n                                         \"found invalid character; only `#` is allowed in raw \\\n                                          string delimitation\",\n-                                        ch));\n+                                        ch).raise();\n         }\n         self.bump();\n         let content_start_bpos = self.pos;\n@@ -1648,7 +1647,7 @@ impl<'a> StringReader<'a> {\n             match self.ch {\n                 None => {\n                     let pos = self.pos;\n-                    panic!(self.fatal_span_(start_bpos, pos, \"unterminated raw string\"))\n+                    self.fatal_span_(start_bpos, pos, \"unterminated raw string\").raise()\n                 }\n                 Some('\"') => {\n                     content_end_bpos = self.pos;"}, {"sha": "b671f81c2a84b681c3301d488380a5a0c4e7723f", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a8d6b8bb5dd7dd2d378849f0c2fa586e3a5b48b/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a8d6b8bb5dd7dd2d378849f0c2fa586e3a5b48b/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=9a8d6b8bb5dd7dd2d378849f0c2fa586e3a5b48b", "patch": "@@ -212,8 +212,8 @@ fn file_to_filemap(sess: &ParseSess, path: &Path, spanopt: Option<Span>)\n         Err(e) => {\n             let msg = format!(\"couldn't read {:?}: {}\", path.display(), e);\n             match spanopt {\n-                Some(sp) => panic!(sess.span_diagnostic.span_fatal(sp, &msg)),\n-                None => panic!(sess.span_diagnostic.fatal(&msg))\n+                Some(sp) => sess.span_diagnostic.span_fatal(sp, &msg).raise(),\n+                None => sess.span_diagnostic.fatal(&msg).raise()\n             }\n         }\n     }"}, {"sha": "e73550d0719a41cbfe1fe547475b9bbc07f410b7", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a8d6b8bb5dd7dd2d378849f0c2fa586e3a5b48b/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a8d6b8bb5dd7dd2d378849f0c2fa586e3a5b48b/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=9a8d6b8bb5dd7dd2d378849f0c2fa586e3a5b48b", "patch": "@@ -123,7 +123,7 @@ impl<'a> fold::Folder for TestHarnessGenerator<'a> {\n             match i.node {\n                 ast::ItemKind::Fn(_, ast::Unsafety::Unsafe, _, _, _, _) => {\n                     let diag = self.cx.span_diagnostic;\n-                    panic!(diag.span_fatal(i.span, \"unsafe functions cannot be used for tests\"));\n+                    diag.span_fatal(i.span, \"unsafe functions cannot be used for tests\").raise();\n                 }\n                 _ => {\n                     debug!(\"this is a test function\");"}, {"sha": "22e78e9b426b2e7a26544dc7adfc33f5efd42279", "filename": "src/libsyntax_ext/deriving/custom.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9a8d6b8bb5dd7dd2d378849f0c2fa586e3a5b48b/src%2Flibsyntax_ext%2Fderiving%2Fcustom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a8d6b8bb5dd7dd2d378849f0c2fa586e3a5b48b/src%2Flibsyntax_ext%2Fderiving%2Fcustom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcustom.rs?ref=9a8d6b8bb5dd7dd2d378849f0c2fa586e3a5b48b", "patch": "@@ -92,7 +92,7 @@ impl MultiItemModifier for ProcMacroDerive {\n                 }\n \n                 err.emit();\n-                panic!(FatalError);\n+                FatalError.raise();\n             }\n         };\n \n@@ -103,13 +103,13 @@ impl MultiItemModifier for ProcMacroDerive {\n                 // fail if there have been errors emitted\n                 Ok(_) if ecx.parse_sess.span_diagnostic.err_count() > error_count_before => {\n                     ecx.struct_span_fatal(span, msg).emit();\n-                    panic!(FatalError);\n+                    FatalError.raise();\n                 }\n                 Ok(new_items) => new_items.into_iter().map(Annotatable::Item).collect(),\n                 Err(_) => {\n                     // FIXME: handle this better\n                     ecx.struct_span_fatal(span, msg).emit();\n-                    panic!(FatalError);\n+                    FatalError.raise();\n                 }\n             }\n         })"}, {"sha": "12400e363f4b0ba477e4bc2596c7b54db132f809", "filename": "src/libsyntax_ext/proc_macro_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a8d6b8bb5dd7dd2d378849f0c2fa586e3a5b48b/src%2Flibsyntax_ext%2Fproc_macro_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a8d6b8bb5dd7dd2d378849f0c2fa586e3a5b48b/src%2Flibsyntax_ext%2Fproc_macro_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_impl.rs?ref=9a8d6b8bb5dd7dd2d378849f0c2fa586e3a5b48b", "patch": "@@ -51,7 +51,7 @@ impl base::AttrProcMacro for AttrProcMacro {\n                 }\n \n                 err.emit();\n-                panic!(FatalError);\n+                FatalError.raise();\n             }\n         }\n     }\n@@ -86,7 +86,7 @@ impl base::ProcMacro for BangProcMacro {\n                 }\n \n                 err.emit();\n-                panic!(FatalError);\n+                FatalError.raise();\n             }\n         }\n     }"}]}