{"sha": "2b60338ee92fbae7e9414dd1bd6661ccd8a7b9da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiNjAzMzhlZTkyZmJhZTdlOTQxNGRkMWJkNjY2MWNjZDhhN2I5ZGE=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2021-07-20T12:18:37Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2021-09-14T11:56:33Z"}, "message": "Make DefPathHash->DefId panic for if the mapping fails.\n\nWe only use this mapping for cases where we know that it must succeed.\nLetting it panic otherwise makes it harder to use the API in unsupported\nways.", "tree": {"sha": "216ec1bf1acf3a44da1cff6f545c0c903cedfc4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/216ec1bf1acf3a44da1cff6f545c0c903cedfc4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b60338ee92fbae7e9414dd1bd6661ccd8a7b9da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b60338ee92fbae7e9414dd1bd6661ccd8a7b9da", "html_url": "https://github.com/rust-lang/rust/commit/2b60338ee92fbae7e9414dd1bd6661ccd8a7b9da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b60338ee92fbae7e9414dd1bd6661ccd8a7b9da/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5445715c20dbedbe9b14d185937ab1ebcd81118e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5445715c20dbedbe9b14d185937ab1ebcd81118e", "html_url": "https://github.com/rust-lang/rust/commit/5445715c20dbedbe9b14d185937ab1ebcd81118e"}], "stats": {"total": 43, "additions": 18, "deletions": 25}, "files": [{"sha": "ca29351455e628654ae48fed1851e475f321b6cd", "filename": "compiler/rustc_hir/src/definitions.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2b60338ee92fbae7e9414dd1bd6661ccd8a7b9da/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b60338ee92fbae7e9414dd1bd6661ccd8a7b9da/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs?ref=2b60338ee92fbae7e9414dd1bd6661ccd8a7b9da", "patch": "@@ -443,12 +443,13 @@ impl Definitions {\n     }\n \n     #[inline(always)]\n-    pub fn local_def_path_hash_to_def_id(&self, hash: DefPathHash) -> Option<LocalDefId> {\n+    pub fn local_def_path_hash_to_def_id(&self, hash: DefPathHash) -> LocalDefId {\n         debug_assert!(hash.stable_crate_id() == self.stable_crate_id);\n         self.table\n             .def_path_hash_to_index\n             .get(&hash)\n             .map(|local_def_index| LocalDefId { local_def_index })\n+            .unwrap()\n     }\n \n     pub fn def_path_hash_to_def_index_map(&self) -> &DefPathHashMap {"}, {"sha": "51a8dcc9db4ad3c6270665c97b25ff9ce9449e8d", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b60338ee92fbae7e9414dd1bd6661ccd8a7b9da/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b60338ee92fbae7e9414dd1bd6661ccd8a7b9da/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=2b60338ee92fbae7e9414dd1bd6661ccd8a7b9da", "patch": "@@ -1622,7 +1622,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n     }\n \n     #[inline]\n-    fn def_path_hash_to_def_index(&self, hash: DefPathHash) -> Option<DefIndex> {\n+    fn def_path_hash_to_def_index(&self, hash: DefPathHash) -> DefIndex {\n         self.def_path_hash_map.def_path_hash_to_def_index(&hash)\n     }\n "}, {"sha": "70952d388d52d9fba6aed7960422085428600f43", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2b60338ee92fbae7e9414dd1bd6661ccd8a7b9da/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b60338ee92fbae7e9414dd1bd6661ccd8a7b9da/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=2b60338ee92fbae7e9414dd1bd6661ccd8a7b9da", "patch": "@@ -517,10 +517,9 @@ impl CrateStore for CStore {\n         self.get_crate_data(def.krate).def_path_hash(def.index)\n     }\n \n-    fn def_path_hash_to_def_id(&self, cnum: CrateNum, hash: DefPathHash) -> Option<DefId> {\n-        self.get_crate_data(cnum)\n-            .def_path_hash_to_def_index(hash)\n-            .map(|index| DefId { krate: cnum, index })\n+    fn def_path_hash_to_def_id(&self, cnum: CrateNum, hash: DefPathHash) -> DefId {\n+        let def_index = self.get_crate_data(cnum).def_path_hash_to_def_index(hash);\n+        DefId { krate: cnum, index: def_index }\n     }\n \n     fn expn_hash_to_expn_id(&self, cnum: CrateNum, index_guess: u32, hash: ExpnHash) -> ExpnId {"}, {"sha": "e2095d553f5356ec6436dd27d60a95da290986c4", "filename": "compiler/rustc_metadata/src/rmeta/def_path_hash_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b60338ee92fbae7e9414dd1bd6661ccd8a7b9da/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdef_path_hash_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b60338ee92fbae7e9414dd1bd6661ccd8a7b9da/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdef_path_hash_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdef_path_hash_map.rs?ref=2b60338ee92fbae7e9414dd1bd6661ccd8a7b9da", "patch": "@@ -15,9 +15,9 @@ crate enum DefPathHashMap<'tcx> {\n \n impl DefPathHashMap<'tcx> {\n     #[inline]\n-    pub fn def_path_hash_to_def_index(&self, def_path_hash: &DefPathHash) -> Option<DefIndex> {\n+    pub fn def_path_hash_to_def_index(&self, def_path_hash: &DefPathHash) -> DefIndex {\n         match *self {\n-            DefPathHashMap::OwnedFromMetadata(ref map) => map.get(def_path_hash),\n+            DefPathHashMap::OwnedFromMetadata(ref map) => map.get(def_path_hash).unwrap(),\n             DefPathHashMap::BorrowedFromTcx(_) => {\n                 panic!(\"DefPathHashMap::BorrowedFromTcx variant only exists for serialization\")\n             }"}, {"sha": "e788dd4be85d715a55bb5c4da496117123861fe6", "filename": "compiler/rustc_middle/src/dep_graph/dep_node.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2b60338ee92fbae7e9414dd1bd6661ccd8a7b9da/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b60338ee92fbae7e9414dd1bd6661ccd8a7b9da/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=2b60338ee92fbae7e9414dd1bd6661ccd8a7b9da", "patch": "@@ -336,7 +336,11 @@ impl DepNodeExt for DepNode {\n     /// has been removed.\n     fn extract_def_id(&self, tcx: TyCtxt<'tcx>) -> Option<DefId> {\n         if self.kind.can_reconstruct_query_key() {\n-            tcx.on_disk_cache.as_ref()?.def_path_hash_to_def_id(tcx, DefPathHash(self.hash.into()))\n+            Some(\n+                tcx.on_disk_cache\n+                    .as_ref()?\n+                    .def_path_hash_to_def_id(tcx, DefPathHash(self.hash.into())),\n+            )\n         } else {\n             None\n         }"}, {"sha": "81c44b27033ec07252961490db2a035e2af1b218", "filename": "compiler/rustc_middle/src/middle/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b60338ee92fbae7e9414dd1bd6661ccd8a7b9da/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b60338ee92fbae7e9414dd1bd6661ccd8a7b9da/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs?ref=2b60338ee92fbae7e9414dd1bd6661ccd8a7b9da", "patch": "@@ -202,7 +202,7 @@ pub trait CrateStore: std::fmt::Debug {\n     fn stable_crate_id_to_crate_num(&self, stable_crate_id: StableCrateId) -> CrateNum;\n \n     /// Fetch a DefId from a DefPathHash for a foreign crate.\n-    fn def_path_hash_to_def_id(&self, cnum: CrateNum, hash: DefPathHash) -> Option<DefId>;\n+    fn def_path_hash_to_def_id(&self, cnum: CrateNum, hash: DefPathHash) -> DefId;\n     fn expn_hash_to_expn_id(&self, cnum: CrateNum, index_guess: u32, hash: ExpnHash) -> ExpnId;\n \n     // utility functions"}, {"sha": "706c395943335a9030acae1f910f3827939de3d9", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2b60338ee92fbae7e9414dd1bd6661ccd8a7b9da/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b60338ee92fbae7e9414dd1bd6661ccd8a7b9da/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=2b60338ee92fbae7e9414dd1bd6661ccd8a7b9da", "patch": "@@ -83,11 +83,7 @@ pub trait OnDiskCache<'tcx>: rustc_data_structures::sync::Sync {\n     /// Converts a `DefPathHash` to its corresponding `DefId` in the current compilation\n     /// session, if it still exists. This is used during incremental compilation to\n     /// turn a deserialized `DefPathHash` into its current `DefId`.\n-    fn def_path_hash_to_def_id(\n-        &self,\n-        tcx: TyCtxt<'tcx>,\n-        def_path_hash: DefPathHash,\n-    ) -> Option<DefId>;\n+    fn def_path_hash_to_def_id(&self, tcx: TyCtxt<'tcx>, def_path_hash: DefPathHash) -> DefId;\n \n     fn drop_serialized_data(&self, tcx: TyCtxt<'tcx>);\n "}, {"sha": "f9456a6f2cdb8575a78f1c2c839635e9a9cc0ed3", "filename": "compiler/rustc_query_impl/src/on_disk_cache.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2b60338ee92fbae7e9414dd1bd6661ccd8a7b9da/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b60338ee92fbae7e9414dd1bd6661ccd8a7b9da/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs?ref=2b60338ee92fbae7e9414dd1bd6661ccd8a7b9da", "patch": "@@ -361,17 +361,15 @@ impl<'sess> rustc_middle::ty::OnDiskCache<'sess> for OnDiskCache<'sess> {\n         })\n     }\n \n-    fn def_path_hash_to_def_id(&self, tcx: TyCtxt<'tcx>, hash: DefPathHash) -> Option<DefId> {\n+    fn def_path_hash_to_def_id(&self, tcx: TyCtxt<'tcx>, hash: DefPathHash) -> DefId {\n         debug!(\"def_path_hash_to_def_id({:?})\", hash);\n \n         let stable_crate_id = hash.stable_crate_id();\n \n         // If this is a DefPathHash from the local crate, we can look up the\n         // DefId in the tcx's `Definitions`.\n         if stable_crate_id == tcx.sess.local_stable_crate_id() {\n-            tcx.definitions_untracked()\n-                .local_def_path_hash_to_def_id(hash)\n-                .map(LocalDefId::to_def_id)\n+            tcx.definitions_untracked().local_def_path_hash_to_def_id(hash).to_def_id()\n         } else {\n             // If this is a DefPathHash from an upstream crate, let the CrateStore map\n             // it to a DefId.\n@@ -779,12 +777,7 @@ impl<'a, 'tcx> Decodable<CacheDecoder<'a, 'tcx>> for DefId {\n         // If we get to this point, then all of the query inputs were green,\n         // which means that the definition with this hash is guaranteed to\n         // still exist in the current compilation session.\n-        Ok(d.tcx()\n-            .on_disk_cache\n-            .as_ref()\n-            .unwrap()\n-            .def_path_hash_to_def_id(d.tcx(), def_path_hash)\n-            .unwrap())\n+        Ok(d.tcx().on_disk_cache.as_ref().unwrap().def_path_hash_to_def_id(d.tcx(), def_path_hash))\n     }\n }\n "}]}