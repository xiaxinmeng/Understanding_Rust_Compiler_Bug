{"sha": "f847261478de5fa72d7e1d2ec3341e31a794fcaf", "node_id": "C_kwDOAAsO6NoAKGY4NDcyNjE0NzhkZTVmYTcyZDdlMWQyZWMzMzQxZTMxYTc5NGZjYWY", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-06-22T03:01:41Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-06-22T03:01:41Z"}, "message": "stop pointing at definitions of missing fields", "tree": {"sha": "b5aa8e70cd5f4f045cbfd5b29bc50bc2f6c7d233", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5aa8e70cd5f4f045cbfd5b29bc50bc2f6c7d233"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f847261478de5fa72d7e1d2ec3341e31a794fcaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f847261478de5fa72d7e1d2ec3341e31a794fcaf", "html_url": "https://github.com/rust-lang/rust/commit/f847261478de5fa72d7e1d2ec3341e31a794fcaf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f847261478de5fa72d7e1d2ec3341e31a794fcaf/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e7ab0bbd772d4dab2a66a72af20f8b207c252ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e7ab0bbd772d4dab2a66a72af20f8b207c252ab", "html_url": "https://github.com/rust-lang/rust/commit/1e7ab0bbd772d4dab2a66a72af20f8b207c252ab"}], "stats": {"total": 99, "additions": 33, "deletions": 66}, "files": [{"sha": "df6f46f26cf0d3dd2a1eee1ee85a0233ad439b88", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f847261478de5fa72d7e1d2ec3341e31a794fcaf/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/f847261478de5fa72d7e1d2ec3341e31a794fcaf/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=f847261478de5fa72d7e1d2ec3341e31a794fcaf", "patch": "@@ -4590,7 +4590,6 @@ dependencies = [\n name = \"rustc_typeck\"\n version = \"0.0.0\"\n dependencies = [\n- \"itertools\",\n  \"rustc_arena\",\n  \"rustc_ast\",\n  \"rustc_attr\","}, {"sha": "c08023ee6a70a50187c9c8bbf4b19f17c5d96c8b", "filename": "compiler/rustc_typeck/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f847261478de5fa72d7e1d2ec3341e31a794fcaf/compiler%2Frustc_typeck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f847261478de5fa72d7e1d2ec3341e31a794fcaf/compiler%2Frustc_typeck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2FCargo.toml?ref=f847261478de5fa72d7e1d2ec3341e31a794fcaf", "patch": "@@ -10,7 +10,6 @@ doctest = false\n [dependencies]\n rustc_arena = { path = \"../rustc_arena\" }\n tracing = \"0.1\"\n-itertools = \"0.10.1\"\n rustc_macros = { path = \"../rustc_macros\" }\n rustc_middle = { path = \"../rustc_middle\" }\n rustc_attr = { path = \"../rustc_attr\" }"}, {"sha": "e5048fc5132171c61a0fd3e05a9f2ea0330560a2", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 29, "deletions": 40, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/f847261478de5fa72d7e1d2ec3341e31a794fcaf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f847261478de5fa72d7e1d2ec3341e31a794fcaf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=f847261478de5fa72d7e1d2ec3341e31a794fcaf", "patch": "@@ -23,13 +23,12 @@ use crate::type_error_struct;\n \n use super::suggest_call_constructor;\n use crate::errors::{AddressOfTemporaryTaken, ReturnStmtOutsideOfFnBody, StructExprNonExhaustive};\n-use itertools::{Either, Itertools};\n use rustc_ast as ast;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_errors::{\n     pluralize, struct_span_err, Applicability, Diagnostic, DiagnosticBuilder, DiagnosticId,\n-    EmissionGuarantee, ErrorGuaranteed, MultiSpan,\n+    EmissionGuarantee, ErrorGuaranteed,\n };\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n@@ -1682,11 +1681,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 })\n                 .collect();\n \n-            if !private_fields.is_empty()\n-                && tcx\n-                    .visibility(variant.def_id)\n-                    .is_accessible_from(tcx.parent_module(expr_id).to_def_id(), tcx)\n-            {\n+            if !private_fields.is_empty() {\n                 self.report_private_fields(adt_ty, span, private_fields, ast_fields);\n             } else {\n                 self.report_missing_fields(\n@@ -1826,49 +1821,43 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         private_fields: Vec<&ty::FieldDef>,\n         used_fields: &'tcx [hir::ExprField<'tcx>],\n     ) {\n-        let field_names = |fields: Vec<Symbol>, len: usize| match &fields\n+        let mut err = self.tcx.sess.struct_span_err(\n+            span,\n+            &format!(\n+                \"cannot construct `{adt_ty}` with struct literal syntax due to private fields\",\n+            ),\n+        );\n+        let (used_private_fields, remaining_private_fields): (\n+            Vec<(Symbol, Span, bool)>,\n+            Vec<(Symbol, Span, bool)>,\n+        ) = private_fields\n+            .iter()\n+            .map(|field| {\n+                match used_fields.iter().find(|used_field| field.name == used_field.ident.name) {\n+                    Some(used_field) => (field.name, used_field.span, true),\n+                    None => (field.name, self.tcx.def_span(field.did), false),\n+                }\n+            })\n+            .partition(|field| field.2);\n+        let remaining_private_fields_len = remaining_private_fields.len();\n+        let names = match &remaining_private_fields\n             .iter()\n-            .map(|field| field.to_string())\n+            .map(|(name, _, _)| name.to_string())\n             .collect::<Vec<_>>()[..]\n         {\n-            _ if len > 6 => String::new(),\n+            _ if remaining_private_fields_len > 6 => String::new(),\n             [name] => format!(\"`{name}` \"),\n             [names @ .., last] => {\n                 let names = names.iter().map(|name| format!(\"`{name}`\")).collect::<Vec<_>>();\n                 format!(\"{} and `{last}` \", names.join(\", \"))\n             }\n             [] => unreachable!(),\n         };\n-\n-        let mut err = self.tcx.sess.struct_span_err(\n-            span,\n-            &format!(\n-                \"cannot construct `{adt_ty}` with struct literal syntax due to private fields\",\n-            ),\n-        );\n-        let (used_private_fields, remaining_private_fields): (\n-            Vec<(Symbol, Span)>,\n-            Vec<(Symbol, Span)>,\n-        ) = private_fields.iter().partition_map(|field| {\n-            match used_fields.iter().find(|used_field| field.name == used_field.ident.name) {\n-                Some(used_field) => Either::Left((field.name, used_field.span)),\n-                None => Either::Right((field.name, self.tcx.def_span(field.did))),\n-            }\n-        });\n-        let remaining_private_fields_len = remaining_private_fields.len();\n-        err.span_labels(used_private_fields.iter().map(|(_, span)| *span), \"private field\");\n-        err.span_note(\n-            MultiSpan::from_spans(remaining_private_fields.iter().map(|(_, span)| *span).collect()),\n-            format!(\n-                \"missing field{s} {names}{are} private\",\n-                s = pluralize!(remaining_private_fields_len),\n-                are = pluralize!(\"is\", remaining_private_fields_len),\n-                names = field_names(\n-                    remaining_private_fields.iter().map(|(name, _)| *name).collect(),\n-                    remaining_private_fields_len\n-                )\n-            ),\n-        );\n+        err.span_labels(used_private_fields.iter().map(|(_, span, _)| *span), \"private field\");\n+        err.note(format!(\n+            \"... and other private field{s} {names}that were not provided\",\n+            s = pluralize!(remaining_private_fields_len),\n+        ));\n         err.emit();\n     }\n "}, {"sha": "57f7abe3931a483fc3c791f9695d131df542f012", "filename": "src/test/ui/issues/issue-76077.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f847261478de5fa72d7e1d2ec3341e31a794fcaf/src%2Ftest%2Fui%2Fissues%2Fissue-76077.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f847261478de5fa72d7e1d2ec3341e31a794fcaf/src%2Ftest%2Fui%2Fissues%2Fissue-76077.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-76077.stderr?ref=f847261478de5fa72d7e1d2ec3341e31a794fcaf", "patch": "@@ -4,11 +4,7 @@ error: cannot construct `Foo` with struct literal syntax due to private fields\n LL |     foo::Foo {};\n    |     ^^^^^^^^\n    |\n-note: missing field `you_cant_use_this_field` is private\n-  --> $DIR/issue-76077.rs:3:9\n-   |\n-LL |         you_cant_use_this_field: bool,\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: ... and other private field `you_cant_use_this_field` that were not provided\n \n error: aborting due to previous error\n "}, {"sha": "d878e1c023ff1304a82381368bb9360258282036", "filename": "src/test/ui/privacy/issue-79593.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f847261478de5fa72d7e1d2ec3341e31a794fcaf/src%2Ftest%2Fui%2Fprivacy%2Fissue-79593.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f847261478de5fa72d7e1d2ec3341e31a794fcaf/src%2Ftest%2Fui%2Fprivacy%2Fissue-79593.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fissue-79593.stderr?ref=f847261478de5fa72d7e1d2ec3341e31a794fcaf", "patch": "@@ -16,11 +16,7 @@ error: cannot construct `Pub` with struct literal syntax due to private fields\n LL |     foo::Pub {};\n    |     ^^^^^^^^\n    |\n-note: missing field `private` is private\n-  --> $DIR/issue-79593.rs:2:22\n-   |\n-LL |     pub struct Pub { private: () }\n-   |                      ^^^^^^^^^^^\n+   = note: ... and other private field `private` that were not provided\n \n error[E0063]: missing field `y` in initializer of `Enum`\n   --> $DIR/issue-79593.rs:23:5"}, {"sha": "fa1c661ef244e6fd3ac3ce15d12b470923ce1edf", "filename": "src/test/ui/typeck/issue-87872-missing-inaccessible-field-literal.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f847261478de5fa72d7e1d2ec3341e31a794fcaf/src%2Ftest%2Fui%2Ftypeck%2Fissue-87872-missing-inaccessible-field-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f847261478de5fa72d7e1d2ec3341e31a794fcaf/src%2Ftest%2Fui%2Ftypeck%2Fissue-87872-missing-inaccessible-field-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-87872-missing-inaccessible-field-literal.stderr?ref=f847261478de5fa72d7e1d2ec3341e31a794fcaf", "patch": "@@ -4,11 +4,7 @@ error: cannot construct `Foo` with struct literal syntax due to private fields\n LL |     foo::Foo {};\n    |     ^^^^^^^^\n    |\n-note: missing field `you_cant_use_this_field` is private\n-  --> $DIR/issue-87872-missing-inaccessible-field-literal.rs:4:9\n-   |\n-LL |         you_cant_use_this_field: bool,\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: ... and other private field `you_cant_use_this_field` that were not provided\n \n error: aborting due to previous error\n "}, {"sha": "234110f31f79c5a41e4e311615f39bd7e4923a63", "filename": "src/test/ui/typeck/missing-private-fields-in-struct-literal.stderr", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f847261478de5fa72d7e1d2ec3341e31a794fcaf/src%2Ftest%2Fui%2Ftypeck%2Fmissing-private-fields-in-struct-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f847261478de5fa72d7e1d2ec3341e31a794fcaf/src%2Ftest%2Fui%2Ftypeck%2Fmissing-private-fields-in-struct-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fmissing-private-fields-in-struct-literal.stderr?ref=f847261478de5fa72d7e1d2ec3341e31a794fcaf", "patch": "@@ -9,15 +9,7 @@ LL |         a: (),\n LL |         b: (),\n    |         ----- private field\n    |\n-note: missing fields `c`, `d` and `e` are private\n-  --> $DIR/missing-private-fields-in-struct-literal.rs:6:9\n-   |\n-LL |         c: (),\n-   |         ^^^^^\n-LL |         d: (),\n-   |         ^^^^^\n-LL |         e: (),\n-   |         ^^^^^\n+   = note: ... and other private fields `c`, `d` and `e` that were not provided\n \n error: aborting due to previous error\n "}]}