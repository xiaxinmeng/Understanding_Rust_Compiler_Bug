{"sha": "0a97eee8df1f4a3182cd92786258ee5cf2baa43f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhOTdlZWU4ZGYxZjRhMzE4MmNkOTI3ODYyNThlZTVjZjJiYWE0M2Y=", "commit": {"author": {"name": "Roxane", "email": "roxane.fruytier@hotmail.com", "date": "2021-03-30T02:48:44Z"}, "committer": {"name": "Roxane", "email": "roxane.fruytier@hotmail.com", "date": "2021-04-02T23:11:50Z"}, "message": "Reduce size of statements", "tree": {"sha": "ff57df5c2cb332e3f2036c1112c9cdb72e21d9c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff57df5c2cb332e3f2036c1112c9cdb72e21d9c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a97eee8df1f4a3182cd92786258ee5cf2baa43f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a97eee8df1f4a3182cd92786258ee5cf2baa43f", "html_url": "https://github.com/rust-lang/rust/commit/0a97eee8df1f4a3182cd92786258ee5cf2baa43f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a97eee8df1f4a3182cd92786258ee5cf2baa43f/comments", "author": {"login": "roxelo", "id": 12419401, "node_id": "MDQ6VXNlcjEyNDE5NDAx", "avatar_url": "https://avatars.githubusercontent.com/u/12419401?v=4", "gravatar_id": "", "url": "https://api.github.com/users/roxelo", "html_url": "https://github.com/roxelo", "followers_url": "https://api.github.com/users/roxelo/followers", "following_url": "https://api.github.com/users/roxelo/following{/other_user}", "gists_url": "https://api.github.com/users/roxelo/gists{/gist_id}", "starred_url": "https://api.github.com/users/roxelo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/roxelo/subscriptions", "organizations_url": "https://api.github.com/users/roxelo/orgs", "repos_url": "https://api.github.com/users/roxelo/repos", "events_url": "https://api.github.com/users/roxelo/events{/privacy}", "received_events_url": "https://api.github.com/users/roxelo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "roxelo", "id": 12419401, "node_id": "MDQ6VXNlcjEyNDE5NDAx", "avatar_url": "https://avatars.githubusercontent.com/u/12419401?v=4", "gravatar_id": "", "url": "https://api.github.com/users/roxelo", "html_url": "https://github.com/roxelo", "followers_url": "https://api.github.com/users/roxelo/followers", "following_url": "https://api.github.com/users/roxelo/following{/other_user}", "gists_url": "https://api.github.com/users/roxelo/gists{/gist_id}", "starred_url": "https://api.github.com/users/roxelo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/roxelo/subscriptions", "organizations_url": "https://api.github.com/users/roxelo/orgs", "repos_url": "https://api.github.com/users/roxelo/repos", "events_url": "https://api.github.com/users/roxelo/events{/privacy}", "received_events_url": "https://api.github.com/users/roxelo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fb1fb7634b79d93d48749ee1f84d4ba552b186f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fb1fb7634b79d93d48749ee1f84d4ba552b186f", "html_url": "https://github.com/rust-lang/rust/commit/2fb1fb7634b79d93d48749ee1f84d4ba552b186f"}], "stats": {"total": 30, "additions": 16, "deletions": 14}, "files": [{"sha": "a7e9fc468b4fdfc0bfb50aee29205cb397dfd87e", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a97eee8df1f4a3182cd92786258ee5cf2baa43f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a97eee8df1f4a3182cd92786258ee5cf2baa43f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=0a97eee8df1f4a3182cd92786258ee5cf2baa43f", "patch": "@@ -1452,7 +1452,7 @@ pub struct Statement<'tcx> {\n \n // `Statement` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-static_assert_size!(Statement<'_>, 40);\n+static_assert_size!(Statement<'_>, 32);\n \n impl Statement<'_> {\n     /// Changes a statement to a nop. This is both faster than deleting instructions and avoids\n@@ -1482,7 +1482,7 @@ pub enum StatementKind<'tcx> {\n     ///\n     /// Note that this also is emitted for regular `let` bindings to ensure that locals that are\n     /// never accessed still get some sanity checks for, e.g., `let x: ! = ..;`\n-    FakeRead(FakeReadCause, Box<Place<'tcx>>),\n+    FakeRead(Box<(FakeReadCause, Place<'tcx>)>),\n \n     /// Write the discriminant for a variant to the enum Place.\n     SetDiscriminant { place: Box<Place<'tcx>>, variant_index: VariantIdx },\n@@ -1628,7 +1628,9 @@ impl Debug for Statement<'_> {\n         use self::StatementKind::*;\n         match self.kind {\n             Assign(box (ref place, ref rv)) => write!(fmt, \"{:?} = {:?}\", place, rv),\n-            FakeRead(ref cause, ref place) => write!(fmt, \"FakeRead({:?}, {:?})\", cause, place),\n+            FakeRead(box (ref cause, ref place)) => {\n+                write!(fmt, \"FakeRead({:?}, {:?})\", cause, place)\n+            }\n             Retag(ref kind, ref place) => write!(\n                 fmt,\n                 \"Retag({}{:?})\","}, {"sha": "fd504f8c5d5acae6a65770544419e4ed96e8b3c6", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a97eee8df1f4a3182cd92786258ee5cf2baa43f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a97eee8df1f4a3182cd92786258ee5cf2baa43f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=0a97eee8df1f4a3182cd92786258ee5cf2baa43f", "patch": "@@ -380,7 +380,7 @@ macro_rules! make_mir_visitor {\n                     ) => {\n                         self.visit_assign(place, rvalue, location);\n                     }\n-                    StatementKind::FakeRead(_, place) => {\n+                    StatementKind::FakeRead(box (_, place)) => {\n                         self.visit_place(\n                             place,\n                             PlaceContext::NonMutatingUse(NonMutatingUseContext::Inspect),"}, {"sha": "d5deec820889ac05595d459789de888bf53970de", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a97eee8df1f4a3182cd92786258ee5cf2baa43f/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a97eee8df1f4a3182cd92786258ee5cf2baa43f/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=0a97eee8df1f4a3182cd92786258ee5cf2baa43f", "patch": "@@ -1728,7 +1728,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         impl<'tcx> Visitor<'tcx> for FakeReadCauseFinder<'tcx> {\n             fn visit_statement(&mut self, statement: &Statement<'tcx>, _: Location) {\n                 match statement {\n-                    Statement { kind: StatementKind::FakeRead(cause, box place), .. }\n+                    Statement { kind: StatementKind::FakeRead(box (cause, place)), .. }\n                         if *place == self.place =>\n                     {\n                         self.cause = Some(*cause);"}, {"sha": "2a388b8a72bb05b4aa3ff9a7099ccfcae3850e85", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/explain_borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a97eee8df1f4a3182cd92786258ee5cf2baa43f/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fexplain_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a97eee8df1f4a3182cd92786258ee5cf2baa43f/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fexplain_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fexplain_borrow.rs?ref=0a97eee8df1f4a3182cd92786258ee5cf2baa43f", "patch": "@@ -515,7 +515,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 let block = &self.body.basic_blocks()[location.block];\n \n                 let kind = if let Some(&Statement {\n-                    kind: StatementKind::FakeRead(FakeReadCause::ForLet(_), _),\n+                    kind: StatementKind::FakeRead(box (FakeReadCause::ForLet(_), _)),\n                     ..\n                 }) = block.statements.get(location.statement_index)\n                 {"}, {"sha": "577d7d53814ee1d362a084d421919f8ce5c5ff06", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a97eee8df1f4a3182cd92786258ee5cf2baa43f/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a97eee8df1f4a3182cd92786258ee5cf2baa43f/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmod.rs?ref=0a97eee8df1f4a3182cd92786258ee5cf2baa43f", "patch": "@@ -797,7 +797,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n         // StatementKind::FakeRead only contains a def_id if they are introduced as a result\n         // of pattern matching within a closure.\n-        if let StatementKind::FakeRead(cause, box ref place) = stmt.kind {\n+        if let StatementKind::FakeRead(box (cause, ref place)) = stmt.kind {\n             match cause {\n                 FakeReadCause::ForMatchedPlace(Some(closure_def_id))\n                 | FakeReadCause::ForLet(Some(closure_def_id)) => {"}, {"sha": "9374741f83749ec8507ebf8842c617e1628c1060", "filename": "compiler/rustc_mir/src/borrow_check/invalidation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a97eee8df1f4a3182cd92786258ee5cf2baa43f/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a97eee8df1f4a3182cd92786258ee5cf2baa43f/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Finvalidation.rs?ref=0a97eee8df1f4a3182cd92786258ee5cf2baa43f", "patch": "@@ -63,7 +63,7 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n \n                 self.mutate_place(location, *lhs, Shallow(None), JustWrite);\n             }\n-            StatementKind::FakeRead(_, _) => {\n+            StatementKind::FakeRead(box (_, _)) => {\n                 // Only relevant for initialized/liveness/safety checks.\n             }\n             StatementKind::SetDiscriminant { place, variant_index: _ } => {"}, {"sha": "71db6abde43512abd716ca9817815b0af1026cbd", "filename": "compiler/rustc_mir/src/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a97eee8df1f4a3182cd92786258ee5cf2baa43f/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a97eee8df1f4a3182cd92786258ee5cf2baa43f/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs?ref=0a97eee8df1f4a3182cd92786258ee5cf2baa43f", "patch": "@@ -574,7 +574,7 @@ impl<'cx, 'tcx> dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tc\n \n                 self.mutate_place(location, (*lhs, span), Shallow(None), JustWrite, flow_state);\n             }\n-            StatementKind::FakeRead(_, box ref place) => {\n+            StatementKind::FakeRead(box (_, ref place)) => {\n                 // Read for match doesn't access any memory and is used to\n                 // assert that a place is safe and live. So we don't have to\n                 // do any checks here."}, {"sha": "538d8921869c3e7267fe0f53ad2c40f12e426cb9", "filename": "compiler/rustc_mir/src/dataflow/move_paths/builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a97eee8df1f4a3182cd92786258ee5cf2baa43f/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a97eee8df1f4a3182cd92786258ee5cf2baa43f/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=0a97eee8df1f4a3182cd92786258ee5cf2baa43f", "patch": "@@ -293,8 +293,8 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n                 }\n                 self.gather_rvalue(rval);\n             }\n-            StatementKind::FakeRead(_, place) => {\n-                self.create_move_path(**place);\n+            StatementKind::FakeRead(box (_, place)) => {\n+                self.create_move_path(*place);\n             }\n             StatementKind::LlvmInlineAsm(ref asm) => {\n                 for (output, kind) in iter::zip(&*asm.outputs, &asm.asm.outputs) {"}, {"sha": "324d826b375c1976d9a23b3a8e1e1a2e16a42272", "filename": "compiler/rustc_mir/src/transform/coverage/spans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a97eee8df1f4a3182cd92786258ee5cf2baa43f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fspans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a97eee8df1f4a3182cd92786258ee5cf2baa43f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fspans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fspans.rs?ref=0a97eee8df1f4a3182cd92786258ee5cf2baa43f", "patch": "@@ -683,10 +683,10 @@ pub(super) fn filtered_statement_span(\n         // and `_1` is the `Place` for `somenum`.\n         //\n         // If and when the Issue is resolved, remove this special case match pattern:\n-        StatementKind::FakeRead(cause, _) if cause == FakeReadCause::ForGuardBinding => None,\n+        StatementKind::FakeRead(box (cause, _)) if cause == FakeReadCause::ForGuardBinding => None,\n \n         // Retain spans from all other statements\n-        StatementKind::FakeRead(_, _) // Not including `ForGuardBinding`\n+        StatementKind::FakeRead(box (_, _)) // Not including `ForGuardBinding`\n         | StatementKind::CopyNonOverlapping(..)\n         | StatementKind::Assign(_)\n         | StatementKind::SetDiscriminant { .. }"}, {"sha": "fd4a783d12a003bb6f843f09892c6300eb525c62", "filename": "compiler/rustc_mir_build/src/build/cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a97eee8df1f4a3182cd92786258ee5cf2baa43f/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a97eee8df1f4a3182cd92786258ee5cf2baa43f/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcfg.rs?ref=0a97eee8df1f4a3182cd92786258ee5cf2baa43f", "patch": "@@ -80,7 +80,7 @@ impl<'tcx> CFG<'tcx> {\n         cause: FakeReadCause,\n         place: Place<'tcx>,\n     ) {\n-        let kind = StatementKind::FakeRead(cause, box place);\n+        let kind = StatementKind::FakeRead(box (cause, place));\n         let stmt = Statement { source_info, kind };\n         self.push(block, stmt);\n     }"}]}