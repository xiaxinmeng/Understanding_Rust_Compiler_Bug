{"sha": "7613c9dd59aa771bf02a00c77af0ba4266392373", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2MTNjOWRkNTlhYTc3MWJmMDJhMDBjNzdhZjBiYTQyNjYzOTIzNzM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-06-14T06:22:58Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-06-17T01:15:48Z"}, "message": "alloc: Format heap.rs to 80-char max", "tree": {"sha": "082b4eaf8dcce45dd539f51384b8d8ade92016e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/082b4eaf8dcce45dd539f51384b8d8ade92016e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7613c9dd59aa771bf02a00c77af0ba4266392373", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7613c9dd59aa771bf02a00c77af0ba4266392373", "html_url": "https://github.com/rust-lang/rust/commit/7613c9dd59aa771bf02a00c77af0ba4266392373", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7613c9dd59aa771bf02a00c77af0ba4266392373/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad7508e39c43fa5b333ce4c2a704cc77358d81b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad7508e39c43fa5b333ce4c2a704cc77358d81b9", "html_url": "https://github.com/rust-lang/rust/commit/ad7508e39c43fa5b333ce4c2a704cc77358d81b9"}], "stats": {"total": 63, "additions": 39, "deletions": 24}, "files": [{"sha": "34a6dfca69b8332927751c4b4a150690bf78e509", "filename": "src/liballoc/heap.rs", "status": "modified", "additions": 39, "deletions": 24, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/7613c9dd59aa771bf02a00c77af0ba4266392373/src%2Fliballoc%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7613c9dd59aa771bf02a00c77af0ba4266392373/src%2Fliballoc%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fheap.rs?ref=7613c9dd59aa771bf02a00c77af0ba4266392373", "patch": "@@ -9,7 +9,8 @@\n // except according to those terms.\n \n // FIXME: #13994: port to the sized deallocation API when available\n-// FIXME: #13996: mark the `allocate` and `reallocate` return value as `noalias` and `nonnull`\n+// FIXME: #13996: mark the `allocate` and `reallocate` return value as `noalias`\n+//                and `nonnull`\n \n use core::intrinsics::{abort, cttz32};\n use core::option::{None, Option};\n@@ -23,7 +24,8 @@ use libc::{c_char, c_int, c_void, size_t};\n extern {\n     fn je_mallocx(size: size_t, flags: c_int) -> *mut c_void;\n     fn je_rallocx(ptr: *mut c_void, size: size_t, flags: c_int) -> *mut c_void;\n-    fn je_xallocx(ptr: *mut c_void, size: size_t, extra: size_t, flags: c_int) -> size_t;\n+    fn je_xallocx(ptr: *mut c_void, size: size_t, extra: size_t,\n+                  flags: c_int) -> size_t;\n     fn je_dallocx(ptr: *mut c_void, flags: c_int);\n     fn je_nallocx(size: size_t, flags: c_int) -> size_t;\n     fn je_malloc_stats_print(write_cb: Option<extern \"C\" fn(cbopaque: *mut c_void, *c_char)>,\n@@ -42,8 +44,9 @@ fn mallocx_align(a: uint) -> c_int { unsafe { cttz32(a as u32) as c_int } }\n \n /// Return a pointer to `size` bytes of memory.\n ///\n-/// Behavior is undefined if the requested size is 0 or the alignment is not a power of 2. The\n-/// alignment must be no larger than the largest supported page size on the platform.\n+/// Behavior is undefined if the requested size is 0 or the alignment is not a\n+/// power of 2. The alignment must be no larger than the largest supported page\n+/// size on the platform.\n #[inline]\n pub unsafe fn allocate(size: uint, align: uint) -> *mut u8 {\n     let ptr = je_mallocx(size as size_t, mallocx_align(align)) as *mut u8;\n@@ -53,62 +56,73 @@ pub unsafe fn allocate(size: uint, align: uint) -> *mut u8 {\n     ptr\n }\n \n-/// Extend or shrink the allocation referenced by `ptr` to `size` bytes of memory.\n+/// Extend or shrink the allocation referenced by `ptr` to `size` bytes of\n+/// memory.\n ///\n-/// Behavior is undefined if the requested size is 0 or the alignment is not a power of 2. The\n-/// alignment must be no larger than the largest supported page size on the platform.\n+/// Behavior is undefined if the requested size is 0 or the alignment is not a\n+/// power of 2. The alignment must be no larger than the largest supported page\n+/// size on the platform.\n ///\n-/// The `old_size` and `align` parameters are the parameters that were used to create the\n-/// allocation referenced by `ptr`. The `old_size` parameter may also be the value returned by\n-/// `usable_size` for the requested size.\n+/// The `old_size` and `align` parameters are the parameters that were used to\n+/// create the allocation referenced by `ptr`. The `old_size` parameter may also\n+/// be the value returned by `usable_size` for the requested size.\n #[inline]\n #[allow(unused_variable)] // for the parameter names in the documentation\n-pub unsafe fn reallocate(ptr: *mut u8, size: uint, align: uint, old_size: uint) -> *mut u8 {\n-    let ptr = je_rallocx(ptr as *mut c_void, size as size_t, mallocx_align(align)) as *mut u8;\n+pub unsafe fn reallocate(ptr: *mut u8, size: uint, align: uint,\n+                         old_size: uint) -> *mut u8 {\n+    let ptr = je_rallocx(ptr as *mut c_void, size as size_t,\n+                         mallocx_align(align)) as *mut u8;\n     if ptr.is_null() {\n         abort()\n     }\n     ptr\n }\n \n-/// Extend or shrink the allocation referenced by `ptr` to `size` bytes of memory in-place.\n+/// Extend or shrink the allocation referenced by `ptr` to `size` bytes of\n+/// memory in-place.\n ///\n-/// Return true if successful, otherwise false if the allocation was not altered.\n+/// Return true if successful, otherwise false if the allocation was not\n+/// altered.\n ///\n-/// Behavior is undefined if the requested size is 0 or the alignment is not a power of 2. The\n-/// alignment must be no larger than the largest supported page size on the platform.\n+/// Behavior is undefined if the requested size is 0 or the alignment is not a\n+/// power of 2. The alignment must be no larger than the largest supported page\n+/// size on the platform.\n ///\n /// The `old_size` and `align` parameters are the parameters that were used to\n /// create the allocation referenced by `ptr`. The `old_size` parameter may be\n /// any value in range_inclusive(requested_size, usable_size).\n #[inline]\n #[allow(unused_variable)] // for the parameter names in the documentation\n-pub unsafe fn reallocate_inplace(ptr: *mut u8, size: uint, align: uint, old_size: uint) -> bool {\n-    je_xallocx(ptr as *mut c_void, size as size_t, 0, mallocx_align(align)) == size as size_t\n+pub unsafe fn reallocate_inplace(ptr: *mut u8, size: uint, align: uint,\n+                                 old_size: uint) -> bool {\n+    je_xallocx(ptr as *mut c_void, size as size_t, 0,\n+               mallocx_align(align)) == size as size_t\n }\n \n /// Deallocate the memory referenced by `ptr`.\n ///\n /// The `ptr` parameter must not be null.\n ///\n-/// The `size` and `align` parameters are the parameters that were used to create the\n-/// allocation referenced by `ptr`. The `size` parameter may also be the value returned by\n-/// `usable_size` for the requested size.\n+/// The `size` and `align` parameters are the parameters that were used to\n+/// create the allocation referenced by `ptr`. The `size` parameter may also be\n+/// the value returned by `usable_size` for the requested size.\n #[inline]\n #[allow(unused_variable)] // for the parameter names in the documentation\n pub unsafe fn deallocate(ptr: *mut u8, size: uint, align: uint) {\n     je_dallocx(ptr as *mut c_void, mallocx_align(align))\n }\n \n-/// Return the usable size of an allocation created with the specified the `size` and `align`.\n+/// Return the usable size of an allocation created with the specified the\n+/// `size` and `align`.\n #[inline]\n pub fn usable_size(size: uint, align: uint) -> uint {\n     unsafe { je_nallocx(size as size_t, mallocx_align(align)) as uint }\n }\n \n /// Print implementation-defined allocator statistics.\n ///\n-/// These statistics may be inconsistent if other threads use the allocator during the call.\n+/// These statistics may be inconsistent if other threads use the allocator\n+/// during the call.\n #[unstable]\n pub fn stats_print() {\n     unsafe {\n@@ -145,7 +159,8 @@ unsafe fn exchange_free(ptr: *mut u8, size: uint, align: uint) {\n #[lang=\"closure_exchange_malloc\"]\n #[inline]\n #[allow(deprecated)]\n-unsafe fn closure_exchange_malloc(drop_glue: fn(*mut u8), size: uint, align: uint) -> *mut u8 {\n+unsafe fn closure_exchange_malloc(drop_glue: fn(*mut u8), size: uint,\n+                                  align: uint) -> *mut u8 {\n     let total_size = util::get_box_size(size, align);\n     let p = allocate(total_size, 8);\n "}]}