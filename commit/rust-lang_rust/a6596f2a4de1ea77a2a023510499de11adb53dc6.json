{"sha": "a6596f2a4de1ea77a2a023510499de11adb53dc6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2NTk2ZjJhNGRlMWVhNzdhMmEwMjM1MTA0OTlkZTExYWRiNTNkYzY=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-03-21T12:06:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-21T12:06:33Z"}, "message": "Rollup merge of #69497 - Zoxc:ast-fragment-error, r=petrochenkov\n\nDon't unwind when hitting the macro expansion recursion limit\n\nThis removes one use of `FatalError.raise()`.\n\nr? @petrochenkov", "tree": {"sha": "a858295f3f7d064dadabc15a388f1ee7fb07dda3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a858295f3f7d064dadabc15a388f1ee7fb07dda3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6596f2a4de1ea77a2a023510499de11adb53dc6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJedgNJCRBK7hj4Ov3rIwAAdHIIAIF5Ll5XYQRQ8cuy3o5LGO2O\n27sSao2S3BIYcckJaAj2lh/l/cjBAPBqWFOIMDYnX7Dpdr4w3lP+BnRlaJ8h7hDv\nFht3KRVCJ3CXQ9VFwl4eogTH2ylchV4KZDSWyxASl33pCRT1wZWjEaxxRCCJSLO6\nZPw1Fr32KacJVHDkeqeuvCOmpyMhCvTdclabED55aJfSwsXij23u4oceMI+PznN3\n9CX3OhHpQtQB5MxL+UNe6UpFBts2u+MyldYya0ro37pyGyjFz/OofmzqbEirfcgX\nC9RxH4iTeAUqt/ZxmP++MbCD98YwNiSO0Gadjn0xlUo4x47JTLOr1FBWX7Cy3aA=\n=CBpt\n-----END PGP SIGNATURE-----\n", "payload": "tree a858295f3f7d064dadabc15a388f1ee7fb07dda3\nparent 98803c182b2ba6ef5dccb6bf501958249295eac0\nparent d641ad044eb535741cd2160e7cbf96d91c2c54c1\nauthor Dylan DPC <dylan.dpc@gmail.com> 1584792393 +0100\ncommitter GitHub <noreply@github.com> 1584792393 +0100\n\nRollup merge of #69497 - Zoxc:ast-fragment-error, r=petrochenkov\n\nDon't unwind when hitting the macro expansion recursion limit\n\nThis removes one use of `FatalError.raise()`.\n\nr? @petrochenkov\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6596f2a4de1ea77a2a023510499de11adb53dc6", "html_url": "https://github.com/rust-lang/rust/commit/a6596f2a4de1ea77a2a023510499de11adb53dc6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6596f2a4de1ea77a2a023510499de11adb53dc6/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98803c182b2ba6ef5dccb6bf501958249295eac0", "url": "https://api.github.com/repos/rust-lang/rust/commits/98803c182b2ba6ef5dccb6bf501958249295eac0", "html_url": "https://github.com/rust-lang/rust/commit/98803c182b2ba6ef5dccb6bf501958249295eac0"}, {"sha": "d641ad044eb535741cd2160e7cbf96d91c2c54c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/d641ad044eb535741cd2160e7cbf96d91c2c54c1", "html_url": "https://github.com/rust-lang/rust/commit/d641ad044eb535741cd2160e7cbf96d91c2c54c1"}], "stats": {"total": 46, "additions": 38, "deletions": 8}, "files": [{"sha": "0fc477bbd0b4c95507287785357dc4b451584d71", "filename": "src/librustc_expand/base.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6596f2a4de1ea77a2a023510499de11adb53dc6/src%2Flibrustc_expand%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6596f2a4de1ea77a2a023510499de11adb53dc6/src%2Flibrustc_expand%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fbase.rs?ref=a6596f2a4de1ea77a2a023510499de11adb53dc6", "patch": "@@ -922,6 +922,7 @@ pub struct ExpansionData {\n pub struct ExtCtxt<'a> {\n     pub parse_sess: &'a ParseSess,\n     pub ecfg: expand::ExpansionConfig<'a>,\n+    pub reduced_recursion_limit: Option<usize>,\n     pub root_path: PathBuf,\n     pub resolver: &'a mut dyn Resolver,\n     pub current_expansion: ExpansionData,\n@@ -940,6 +941,7 @@ impl<'a> ExtCtxt<'a> {\n         ExtCtxt {\n             parse_sess,\n             ecfg,\n+            reduced_recursion_limit: None,\n             resolver,\n             extern_mod_loaded,\n             root_path: PathBuf::new(),"}, {"sha": "4f568e5456c725b3bed8d19ef0d1c3f469a71bdb", "filename": "src/librustc_expand/expand.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a6596f2a4de1ea77a2a023510499de11adb53dc6/src%2Flibrustc_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6596f2a4de1ea77a2a023510499de11adb53dc6/src%2Flibrustc_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fexpand.rs?ref=a6596f2a4de1ea77a2a023510499de11adb53dc6", "patch": "@@ -17,7 +17,7 @@ use rustc_ast::util::map_in_place::MapInPlace;\n use rustc_ast::visit::{self, AssocCtxt, Visitor};\n use rustc_ast_pretty::pprust;\n use rustc_attr::{self as attr, is_builtin_attr, HasAttrs};\n-use rustc_errors::{Applicability, FatalError, PResult};\n+use rustc_errors::{Applicability, PResult};\n use rustc_feature::Features;\n use rustc_parse::parser::Parser;\n use rustc_parse::validate_attr;\n@@ -645,7 +645,6 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             ))\n             .emit();\n         self.cx.trace_macros_diag();\n-        FatalError.raise();\n     }\n \n     /// A macro's expansion does not fit in this fragment kind.\n@@ -665,8 +664,17 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         invoc: Invocation,\n         ext: &SyntaxExtensionKind,\n     ) -> ExpandResult<AstFragment, Invocation> {\n-        if self.cx.current_expansion.depth > self.cx.ecfg.recursion_limit {\n-            self.error_recursion_limit_reached();\n+        let recursion_limit =\n+            self.cx.reduced_recursion_limit.unwrap_or(self.cx.ecfg.recursion_limit);\n+        if self.cx.current_expansion.depth > recursion_limit {\n+            if self.cx.reduced_recursion_limit.is_none() {\n+                self.error_recursion_limit_reached();\n+            }\n+\n+            // Reduce the recursion limit by half each time it triggers.\n+            self.cx.reduced_recursion_limit = Some(recursion_limit / 2);\n+\n+            return ExpandResult::Ready(invoc.fragment_kind.dummy(invoc.span()));\n         }\n \n         let (fragment_kind, span) = (invoc.fragment_kind, invoc.span());"}, {"sha": "8d9e287cdc9d69329166e5a6865fb0e0b26d728b", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a6596f2a4de1ea77a2a023510499de11adb53dc6/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6596f2a4de1ea77a2a023510499de11adb53dc6/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=a6596f2a4de1ea77a2a023510499de11adb53dc6", "patch": "@@ -312,6 +312,8 @@ fn configure_and_expand_inner<'a>(\n             ecx.parse_sess.missing_fragment_specifiers.borrow().iter().cloned().collect();\n         missing_fragment_specifiers.sort();\n \n+        let recursion_limit_hit = ecx.reduced_recursion_limit.is_some();\n+\n         for span in missing_fragment_specifiers {\n             let lint = lint::builtin::MISSING_FRAGMENT_SPECIFIER;\n             let msg = \"missing fragment specifier\";\n@@ -320,8 +322,15 @@ fn configure_and_expand_inner<'a>(\n         if cfg!(windows) {\n             env::set_var(\"PATH\", &old_path);\n         }\n-        krate\n-    });\n+\n+        if recursion_limit_hit {\n+            // If we hit a recursion limit, exit early to avoid later passes getting overwhelmed\n+            // with a large AST\n+            Err(ErrorReported)\n+        } else {\n+            Ok(krate)\n+        }\n+    })?;\n \n     sess.time(\"maybe_building_test_harness\", || {\n         rustc_builtin_macros::test_harness::inject("}, {"sha": "a55f05414b206c98f1a002859bdb0e444b152e2f", "filename": "src/test/ui/macros/trace_faulty_macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6596f2a4de1ea77a2a023510499de11adb53dc6/src%2Ftest%2Fui%2Fmacros%2Ftrace_faulty_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6596f2a4de1ea77a2a023510499de11adb53dc6/src%2Ftest%2Fui%2Fmacros%2Ftrace_faulty_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Ftrace_faulty_macros.rs?ref=a6596f2a4de1ea77a2a023510499de11adb53dc6", "patch": "@@ -13,7 +13,7 @@ macro_rules! pat_macro {\n         pat_macro!(A{a:a, b:0, c:_, ..});\n     };\n     ($a:pat) => {\n-        $a\n+        $a //~ ERROR expected expression\n     };\n }\n "}, {"sha": "109b493b43717e970268c315bf4e1afc07da8535", "filename": "src/test/ui/macros/trace_faulty_macros.stderr", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a6596f2a4de1ea77a2a023510499de11adb53dc6/src%2Ftest%2Fui%2Fmacros%2Ftrace_faulty_macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6596f2a4de1ea77a2a023510499de11adb53dc6/src%2Ftest%2Fui%2Fmacros%2Ftrace_faulty_macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Ftrace_faulty_macros.stderr?ref=a6596f2a4de1ea77a2a023510499de11adb53dc6", "patch": "@@ -49,5 +49,16 @@ LL |     my_recursive_macro!();\n    = note: expanding `my_recursive_macro! {  }`\n    = note: to `my_recursive_macro ! () ;`\n \n-error: aborting due to 2 previous errors\n+error: expected expression, found `A { a: a, b: 0, c: _, .. }`\n+  --> $DIR/trace_faulty_macros.rs:16:9\n+   |\n+LL |         $a\n+   |         ^^ expected expression\n+...\n+LL |     let a = pat_macro!();\n+   |             ------------ in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 3 previous errors\n "}]}