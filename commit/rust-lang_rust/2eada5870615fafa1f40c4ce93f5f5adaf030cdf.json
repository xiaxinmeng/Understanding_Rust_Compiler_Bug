{"sha": "2eada5870615fafa1f40c4ce93f5f5adaf030cdf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlYWRhNTg3MDYxNWZhZmExZjQwYzRjZTkzZjVmNWFkYWYwMzBjZGY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-09-13T22:24:13Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-09-17T16:41:43Z"}, "message": "rustc: Remove another global map from trans\n\nThis commit removes the `crate_trans_items` field from the `CrateContext` of\ntrans. This field, a big map, was calculated during partioning and was a set of\nall translation items. This isn't quite incremental-friendly because the map may\nchange a lot but not have much effect on downstream consumers.\n\nInstead a new query was added for the one location this map was needed, along\nwith a new comment explaining what the location is doing!", "tree": {"sha": "24edf779b943bd9d6625103b1d85258cdf245881", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24edf779b943bd9d6625103b1d85258cdf245881"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2eada5870615fafa1f40c4ce93f5f5adaf030cdf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2eada5870615fafa1f40c4ce93f5f5adaf030cdf", "html_url": "https://github.com/rust-lang/rust/commit/2eada5870615fafa1f40c4ce93f5f5adaf030cdf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2eada5870615fafa1f40c4ce93f5f5adaf030cdf/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19727c84dde781abf3a534be0308b1cd55a88cf7", "url": "https://api.github.com/repos/rust-lang/rust/commits/19727c84dde781abf3a534be0308b1cd55a88cf7", "html_url": "https://github.com/rust-lang/rust/commit/19727c84dde781abf3a534be0308b1cd55a88cf7"}], "stats": {"total": 107, "additions": 76, "deletions": 31}, "files": [{"sha": "e3a9e9698643223a19fcd68cc76b30d6eb9cf034", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2eada5870615fafa1f40c4ce93f5f5adaf030cdf/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eada5870615fafa1f40c4ce93f5f5adaf030cdf/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=2eada5870615fafa1f40c4ce93f5f5adaf030cdf", "patch": "@@ -579,6 +579,7 @@ define_dep_nodes!( <'tcx>\n     [] CollectAndPartitionTranslationItems,\n     [] ExportName(DefId),\n     [] ContainsExternIndicator(DefId),\n+    [] IsTranslatedFunction(DefId),\n );\n \n trait DepNodeParams<'a, 'gcx: 'tcx + 'a, 'tcx: 'a> : fmt::Debug {"}, {"sha": "307921a33350784bccbe87def3f7ebad1a89f15c", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2eada5870615fafa1f40c4ce93f5f5adaf030cdf/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eada5870615fafa1f40c4ce93f5f5adaf030cdf/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=2eada5870615fafa1f40c4ce93f5f5adaf030cdf", "patch": "@@ -24,7 +24,7 @@ use middle::resolve_lifetime::{Region, ObjectLifetimeDefault};\n use middle::stability::{self, DeprecationEntry};\n use middle::lang_items::{LanguageItems, LangItem};\n use middle::exported_symbols::SymbolExportLevel;\n-use middle::trans::{TransItem, CodegenUnit};\n+use middle::trans::CodegenUnit;\n use mir;\n use mir::transform::{MirSuite, MirPassIndex};\n use session::CompileResult;\n@@ -1391,9 +1391,10 @@ define_maps! { <'tcx>\n         -> Arc<Vec<(String, DefId, SymbolExportLevel)>>,\n     [] fn collect_and_partition_translation_items:\n         collect_and_partition_translation_items_node(CrateNum)\n-        -> (Arc<FxHashSet<TransItem<'tcx>>>, Vec<Arc<CodegenUnit<'tcx>>>),\n+        -> (Arc<DefIdSet>, Arc<Vec<Arc<CodegenUnit<'tcx>>>>),\n     [] fn export_name: ExportName(DefId) -> Option<Symbol>,\n     [] fn contains_extern_indicator: ContainsExternIndicator(DefId) -> bool,\n+    [] fn is_translated_function: IsTranslatedFunction(DefId) -> bool,\n }\n \n fn type_param_predicates<'tcx>((item_id, param_id): (DefId, DefId)) -> DepConstructor<'tcx> {"}, {"sha": "f60f069f4eaef7a6cfd47b4c2deb4ed2b78c0273", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 34, "deletions": 14, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/2eada5870615fafa1f40c4ce93f5f5adaf030cdf/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eada5870615fafa1f40c4ce93f5f5adaf030cdf/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=2eada5870615fafa1f40c4ce93f5f5adaf030cdf", "patch": "@@ -35,7 +35,7 @@ use back::write::{self, OngoingCrateTranslation};\n use llvm::{ContextRef, ModuleRef, ValueRef, Vector, get_param};\n use llvm;\n use metadata;\n-use rustc::hir::def_id::{CrateNum, LOCAL_CRATE};\n+use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc::middle::lang_items::StartFnLangItem;\n use rustc::middle::trans::{Linkage, Visibility};\n use rustc::middle::cstore::{EncodedMetadata, EncodedMetadataHashes};\n@@ -75,7 +75,7 @@ use trans_item::{TransItem, TransItemExt, DefPathBasedNames};\n use type_::Type;\n use type_of;\n use value::Value;\n-use rustc::util::nodemap::{NodeSet, FxHashMap, FxHashSet};\n+use rustc::util::nodemap::{NodeSet, FxHashMap, FxHashSet, DefIdSet};\n use CrateInfo;\n \n use libc::c_uint;\n@@ -990,8 +990,9 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     // Run the translation item collector and partition the collected items into\n     // codegen units.\n-    let (translation_items, codegen_units) =\n-        shared_ccx.tcx().collect_and_partition_translation_items(LOCAL_CRATE);\n+    let codegen_units =\n+        shared_ccx.tcx().collect_and_partition_translation_items(LOCAL_CRATE).1;\n+    let codegen_units = (*codegen_units).clone();\n \n     assert!(codegen_units.len() <= 1 || !tcx.sess.lto());\n \n@@ -1076,8 +1077,7 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             let ((stats, module), _) =\n                 tcx.dep_graph.with_task(dep_node,\n                                         AssertDepGraphSafe(&shared_ccx),\n-                                        AssertDepGraphSafe((cgu,\n-                                                            translation_items.clone())),\n+                                        AssertDepGraphSafe(cgu),\n                                         module_translation);\n             all_stats.extend(stats);\n \n@@ -1118,13 +1118,12 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     fn module_translation<'a, 'tcx>(\n         scx: AssertDepGraphSafe<&SharedCrateContext<'a, 'tcx>>,\n-        args: AssertDepGraphSafe<(Arc<CodegenUnit<'tcx>>,\n-                                  Arc<FxHashSet<TransItem<'tcx>>>)>)\n+        args: AssertDepGraphSafe<Arc<CodegenUnit<'tcx>>>)\n         -> (Stats, ModuleTranslation)\n     {\n         // FIXME(#40304): We ought to be using the id as a key and some queries, I think.\n         let AssertDepGraphSafe(scx) = scx;\n-        let AssertDepGraphSafe((cgu, crate_trans_items)) = args;\n+        let AssertDepGraphSafe(cgu) = args;\n \n         let cgu_name = cgu.name().to_string();\n         let cgu_id = cgu.work_product_id();\n@@ -1164,7 +1163,7 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         }\n \n         // Instantiate translation items without filling out definitions yet...\n-        let lcx = LocalCrateContext::new(scx, cgu, crate_trans_items);\n+        let lcx = LocalCrateContext::new(scx, cgu);\n         let module = {\n             let ccx = CrateContext::new(scx, &lcx);\n             let trans_items = ccx.codegen_unit()\n@@ -1353,7 +1352,7 @@ fn assert_symbols_are_distinct<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>, trans_i\n fn collect_and_partition_translation_items<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     cnum: CrateNum,\n-) -> (Arc<FxHashSet<TransItem<'tcx>>>, Vec<Arc<CodegenUnit<'tcx>>>)\n+) -> (Arc<DefIdSet>, Arc<Vec<Arc<CodegenUnit<'tcx>>>>)\n {\n     assert_eq!(cnum, LOCAL_CRATE);\n     let time_passes = tcx.sess.time_passes();\n@@ -1404,7 +1403,12 @@ fn collect_and_partition_translation_items<'a, 'tcx>(\n     assert!(tcx.sess.opts.cg.codegen_units == codegen_units.len() ||\n             tcx.sess.opts.debugging_opts.incremental.is_some());\n \n-    let translation_items: FxHashSet<TransItem<'tcx>> = items.iter().cloned().collect();\n+    let translation_items: DefIdSet = items.iter().filter_map(|trans_item| {\n+        match *trans_item {\n+            TransItem::Fn(ref instance) => Some(instance.def_id()),\n+            _ => None,\n+        }\n+    }).collect();\n \n     if tcx.sess.opts.debugging_opts.print_trans_items.is_some() {\n         let mut item_to_cgus = FxHashMap();\n@@ -1459,7 +1463,7 @@ fn collect_and_partition_translation_items<'a, 'tcx>(\n         }\n     }\n \n-    (Arc::new(translation_items), codegen_units)\n+    (Arc::new(translation_items), Arc::new(codegen_units))\n }\n \n impl CrateInfo {\n@@ -1505,9 +1509,25 @@ impl CrateInfo {\n     }\n }\n \n-pub fn provide(providers: &mut Providers) {\n+fn is_translated_function(tcx: TyCtxt, id: DefId) -> bool {\n+    // FIXME(#42293) needs red/green tracking to avoid failing a bunch of\n+    // existing tests\n+    tcx.dep_graph.with_ignore(|| {\n+        let (all_trans_items, _) =\n+            tcx.collect_and_partition_translation_items(LOCAL_CRATE);\n+        all_trans_items.contains(&id)\n+    })\n+}\n+\n+pub fn provide_local(providers: &mut Providers) {\n     providers.collect_and_partition_translation_items =\n         collect_and_partition_translation_items;\n+\n+    providers.is_translated_function = is_translated_function;\n+}\n+\n+pub fn provide_extern(providers: &mut Providers) {\n+    providers.is_translated_function = is_translated_function;\n }\n \n pub fn linkage_to_llvm(linkage: Linkage) -> llvm::Linkage {"}, {"sha": "52e6dce24ed929337af2a1308c37d5b0fd081e1f", "filename": "src/librustc_trans/callee.rs", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/2eada5870615fafa1f40c4ce93f5f5adaf030cdf/src%2Flibrustc_trans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eada5870615fafa1f40c4ce93f5f5adaf030cdf/src%2Flibrustc_trans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcallee.rs?ref=2eada5870615fafa1f40c4ce93f5f5adaf030cdf", "patch": "@@ -23,7 +23,6 @@ use monomorphize::{self, Instance};\n use rustc::hir::def_id::DefId;\n use rustc::ty::TypeFoldable;\n use rustc::ty::subst::Substs;\n-use trans_item::TransItem;\n use type_of;\n \n /// Translates a reference to a fn/method item, monomorphizing and\n@@ -109,10 +108,43 @@ pub fn get_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n             attributes::unwind(llfn, true);\n         }\n \n+        // Apply an appropriate linkage/visibility value to our item that we\n+        // just declared.\n+        //\n+        // This is sort of subtle. Inside our codegen unit we started off\n+        // compilation by predefining all our own `TransItem` instances. That\n+        // is, everything we're translating ourselves is already defined. That\n+        // means that anything we're actually translating ourselves will have\n+        // hit the above branch in `get_declared_value`. As a result, we're\n+        // guaranteed here that we're declaring a symbol that won't get defined,\n+        // or in other words we're referencing a foreign value.\n+        //\n+        // So because this is a foreign value we blanket apply an external\n+        // linkage directive because it's coming from a different object file.\n+        // The visibility here is where it gets tricky. This symbol could be\n+        // referencing some foreign crate or foreign library (an `extern`\n+        // block) in which case we want to leave the default visibility. We may\n+        // also, though, have multiple codegen units.\n+        //\n+        // In the situation of multiple codegen units this function may be\n+        // referencing a function from another codegen unit. If we're\n+        // indeed referencing a symbol in another codegen unit then we're in one\n+        // of two cases:\n+        //\n+        //  * This is a symbol defined in a foreign crate and we're just\n+        //    monomorphizing in another codegen unit. In this case this symbols\n+        //    is for sure not exported, so both codegen units will be using\n+        //    hidden visibility. Hence, we apply a hidden visibility here.\n+        //\n+        //  * This is a symbol defined in our local crate. If the symbol in the\n+        //    other codegen unit is also not exported then like with the foreign\n+        //    case we apply a hidden visibility. If the symbol is exported from\n+        //    the foreign object file, however, then we leave this at the\n+        //    default visibility as we'll just import it naturally.\n         unsafe {\n             llvm::LLVMRustSetLinkage(llfn, llvm::Linkage::ExternalLinkage);\n \n-            if ccx.crate_trans_items().contains(&TransItem::Fn(instance)) {\n+            if ccx.tcx().is_translated_function(instance_def_id) {\n                 if instance_def_id.is_local() {\n                     if !ccx.tcx().is_exported_symbol(instance_def_id) {\n                         llvm::LLVMRustSetVisibility(llfn, llvm::Visibility::Hidden);"}, {"sha": "a1666fa523195e1248172bfb22f2967dfbeb16bc", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2eada5870615fafa1f40c4ce93f5f5adaf030cdf/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eada5870615fafa1f40c4ce93f5f5adaf030cdf/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=2eada5870615fafa1f40c4ce93f5f5adaf030cdf", "patch": "@@ -22,14 +22,13 @@ use declare;\n use monomorphize::Instance;\n \n use partitioning::CodegenUnit;\n-use trans_item::TransItem;\n use type_::Type;\n use rustc_data_structures::base_n;\n use rustc::session::config::{self, NoDebugInfo, OutputFilenames};\n use rustc::session::Session;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::layout::{LayoutCx, LayoutError, LayoutTyper, TyLayout};\n-use rustc::util::nodemap::{FxHashMap, FxHashSet};\n+use rustc::util::nodemap::FxHashMap;\n \n use std::ffi::{CStr, CString};\n use std::cell::{Cell, RefCell};\n@@ -94,9 +93,6 @@ pub struct LocalCrateContext<'a, 'tcx: 'a> {\n     stats: Stats,\n     codegen_unit: Arc<CodegenUnit<'tcx>>,\n \n-    /// The translation items of the whole crate.\n-    crate_trans_items: Arc<FxHashSet<TransItem<'tcx>>>,\n-\n     /// Cache instances of monomorphic and polymorphic items\n     instances: RefCell<FxHashMap<Instance<'tcx>, ValueRef>>,\n     /// Cache generated vtables\n@@ -349,8 +345,7 @@ impl<'b, 'tcx> SharedCrateContext<'b, 'tcx> {\n \n impl<'a, 'tcx> LocalCrateContext<'a, 'tcx> {\n     pub fn new(shared: &SharedCrateContext<'a, 'tcx>,\n-               codegen_unit: Arc<CodegenUnit<'tcx>>,\n-               crate_trans_items: Arc<FxHashSet<TransItem<'tcx>>>)\n+               codegen_unit: Arc<CodegenUnit<'tcx>>)\n                -> LocalCrateContext<'a, 'tcx> {\n         unsafe {\n             // Append \".rs\" to LLVM module identifier.\n@@ -382,7 +377,6 @@ impl<'a, 'tcx> LocalCrateContext<'a, 'tcx> {\n                 llcx,\n                 stats: Stats::default(),\n                 codegen_unit,\n-                crate_trans_items,\n                 instances: RefCell::new(FxHashMap()),\n                 vtables: RefCell::new(FxHashMap()),\n                 const_cstr_cache: RefCell::new(FxHashMap()),\n@@ -489,10 +483,6 @@ impl<'b, 'tcx> CrateContext<'b, 'tcx> {\n         &self.local().codegen_unit\n     }\n \n-    pub fn crate_trans_items(&self) -> &FxHashSet<TransItem<'tcx>> {\n-        &self.local().crate_trans_items\n-    }\n-\n     pub fn td(&self) -> llvm::TargetDataRef {\n         unsafe { llvm::LLVMRustGetModuleDataLayout(self.llmod()) }\n     }"}, {"sha": "4cbc98d26ded602bdaacf7472d41189b85f355f8", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2eada5870615fafa1f40c4ce93f5f5adaf030cdf/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eada5870615fafa1f40c4ce93f5f5adaf030cdf/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=2eada5870615fafa1f40c4ce93f5f5adaf030cdf", "patch": "@@ -251,10 +251,11 @@ __build_diagnostic_array! { librustc_trans, DIAGNOSTICS }\n pub fn provide_local(providers: &mut Providers) {\n     back::symbol_names::provide(providers);\n     back::symbol_export::provide_local(providers);\n-    base::provide(providers);\n+    base::provide_local(providers);\n }\n \n pub fn provide_extern(providers: &mut Providers) {\n     back::symbol_names::provide(providers);\n     back::symbol_export::provide_extern(providers);\n+    base::provide_extern(providers);\n }"}]}