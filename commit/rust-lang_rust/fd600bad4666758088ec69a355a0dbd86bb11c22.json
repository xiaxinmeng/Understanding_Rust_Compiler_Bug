{"sha": "fd600bad4666758088ec69a355a0dbd86bb11c22", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkNjAwYmFkNDY2Njc1ODA4OGVjNjlhMzU1YTBkYmQ4NmJiMTFjMjI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-12-01T23:27:38Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-12-01T23:27:38Z"}, "message": "rustc: Annotate variants with their types. This may be useful for trans!", "tree": {"sha": "5d5d69c08aa4635575da7b825a19c13298167640", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d5d69c08aa4635575da7b825a19c13298167640"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd600bad4666758088ec69a355a0dbd86bb11c22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd600bad4666758088ec69a355a0dbd86bb11c22", "html_url": "https://github.com/rust-lang/rust/commit/fd600bad4666758088ec69a355a0dbd86bb11c22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd600bad4666758088ec69a355a0dbd86bb11c22/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd97b9d965ada49ed07af7ee651b2b2266df4cec", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd97b9d965ada49ed07af7ee651b2b2266df4cec", "html_url": "https://github.com/rust-lang/rust/commit/cd97b9d965ada49ed07af7ee651b2b2266df4cec"}], "stats": {"total": 29, "additions": 20, "deletions": 9}, "files": [{"sha": "4fbc4f0189c35afb16523a84cb357729b1175868", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd600bad4666758088ec69a355a0dbd86bb11c22/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd600bad4666758088ec69a355a0dbd86bb11c22/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=fd600bad4666758088ec69a355a0dbd86bb11c22", "patch": "@@ -183,7 +183,7 @@ tag mod_index_entry {\n type _mod = rec(vec[@item] items,\n                 hashmap[ident,mod_index_entry] index);\n \n-type variant = rec(str name, vec[@ty] args, def_id id);\n+type variant = rec(str name, vec[@ty] args, def_id id, ann ann);\n \n type item = spanned[item_];\n tag item_ {"}, {"sha": "ede8c63705d9c7d66ce105b7c873b584202ec681", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fd600bad4666758088ec69a355a0dbd86bb11c22/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd600bad4666758088ec69a355a0dbd86bb11c22/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=fd600bad4666758088ec69a355a0dbd86bb11c22", "patch": "@@ -1283,7 +1283,8 @@ impure fn parse_item_tag(parser p) -> @ast.item {\n                 expect(p, token.SEMI);\n \n                 auto id = p.next_def_id();\n-                variants += vec(rec(name=name, args=args, id=id));\n+                variants += vec(rec(name=name, args=args, id=id,\n+                                    ann=ast.ann_none));\n             }\n             case (token.RBRACE) { /* empty */ }\n             case (_) {"}, {"sha": "48cb1e01674206f5301b127d699a0cd5f2c676ad", "filename": "src/comp/middle/fold.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fd600bad4666758088ec69a355a0dbd86bb11c22/src%2Fcomp%2Fmiddle%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd600bad4666758088ec69a355a0dbd86bb11c22/src%2Fcomp%2Fmiddle%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffold.rs?ref=fd600bad4666758088ec69a355a0dbd86bb11c22", "patch": "@@ -591,7 +591,8 @@ fn fold_item[ENV](&ENV env, ast_fold[ENV] fld, @item i) -> @item {\n                 for (@ast.ty t in v.args) {\n                     new_args += vec(fold_ty[ENV](env_, fld, t));\n                 }\n-                new_variants += rec(name=v.name, args=new_args, id=v.id);\n+                new_variants += rec(name=v.name, args=new_args, id=v.id,\n+                                    ann=v.ann);\n             }\n             ret fld.fold_item_tag(env_, i.span, ident, new_variants,\n                                   ty_params, id);"}, {"sha": "80bafb29938fa4dc05e042791ebed03918d1a4d6", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/fd600bad4666758088ec69a355a0dbd86bb11c22/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd600bad4666758088ec69a355a0dbd86bb11c22/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=fd600bad4666758088ec69a355a0dbd86bb11c22", "patch": "@@ -402,10 +402,12 @@ fn collect_item_types(@ast.crate crate) -> tup(@ast.crate, @ty_table) {\n         }\n     }\n \n-    fn add_tag_variant_types(@hashmap[ast.def_id,@ast.item] id_to_ty_item,\n+    fn get_tag_variant_types(@hashmap[ast.def_id,@ast.item] id_to_ty_item,\n                              @ty_table item_to_ty,\n                              &ast.def_id tag_id,\n-                             &vec[ast.variant] variants) {\n+                             &vec[ast.variant] variants) -> vec[ast.variant] {\n+        let vec[ast.variant] result = vec();\n+\n         for (ast.variant variant in variants) {\n             // Nullary tag constructors get turned into constants; n-ary tag\n             // constructors get turned into functions.\n@@ -427,7 +429,12 @@ fn collect_item_types(@ast.crate crate) -> tup(@ast.crate, @ty_table) {\n             }\n \n             item_to_ty.insert(variant.id, result_ty);\n+            \n+            auto variant_t = rec(ann=ast.ann_type(result_ty) with variant);\n+            result += vec(variant_t);\n         }\n+\n+        ret result;\n     }\n \n     // First pass: collect all type item IDs.\n@@ -463,10 +470,12 @@ fn collect_item_types(@ast.crate crate) -> tup(@ast.crate, @ty_table) {\n             case (ast.item_mod(_, _, _)) {\n                 result = it.node;\n             }\n-            case (ast.item_tag(_, ?variants, _, ?tag_id)) {\n-                add_tag_variant_types(id_to_ty_item, item_to_ty, tag_id,\n-                                      variants);\n-                result = it.node;\n+            case (ast.item_tag(?ident, ?variants, ?tps, ?tag_id)) {\n+                auto variants_t = get_tag_variant_types(id_to_ty_item,\n+                                                        item_to_ty,\n+                                                        tag_id,\n+                                                        variants);\n+                result = ast.item_tag(ident, variants_t, tps, tag_id);\n             }\n         }\n         items_t += vec(@fold.respan[ast.item_](it.span, result));"}]}