{"sha": "5312f0c3296bcc20db41010203188813247690f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzMTJmMGMzMjk2YmNjMjBkYjQxMDEwMjAzMTg4ODEzMjQ3NjkwZjQ=", "commit": {"author": {"name": "alexey zabelin", "email": "zabelin.alex@gmail.com", "date": "2017-04-26T02:22:42Z"}, "committer": {"name": "alexey zabelin", "email": "zabelin.alex@gmail.com", "date": "2017-04-26T02:22:42Z"}, "message": "Fix tidy check errors\n\nThis adjusts several lines to be shorter than 100 characters.", "tree": {"sha": "fc46a215fd77f0fdde33465653cf376f3ec085b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc46a215fd77f0fdde33465653cf376f3ec085b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5312f0c3296bcc20db41010203188813247690f4", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEEyGBf8fbcGdY6ClTCOhaZhUeDJOkFAlkABM4ACgkQOhaZhUeD\nJOncQwf/dgeUpKI+yxZ9tj2Z3d82Xt2FOFPvoPjPQ6nq3aZzr1b2ZNa4GXPk797q\nxKEvRhamscOXW0cS+LuobZJr8W7Rw9OVRA1ayoYVFQutH8GI+62dKZhtqvpc1Vup\nue8d5Z+3OAvbhagh9WOtGmiMamiHMxKnBCw+VOmGIIocuy5LSvv4XP4r3IT6QzBB\nTThw3/aluNmjjH088L+HWyxLRAWtqfmk2SaadWCZh8qa54HsPgGk2R74R0BkBMN8\nLh8ZH9WwwcVzqxNz4mYaZV9kG400nus2EH6GCpl6UcDt5ep1mb3T/Us7zZOnXL+Q\nqz3kF6SBXzWyny3Mbi4eGwvx26psMg==\n=aIW9\n-----END PGP SIGNATURE-----", "payload": "tree fc46a215fd77f0fdde33465653cf376f3ec085b8\nparent dd906ef7ec33240af1a17dee4ac933f363c987b0\nauthor alexey zabelin <zabelin.alex@gmail.com> 1493173362 -0400\ncommitter alexey zabelin <zabelin.alex@gmail.com> 1493173362 -0400\n\nFix tidy check errors\n\nThis adjusts several lines to be shorter than 100 characters.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5312f0c3296bcc20db41010203188813247690f4", "html_url": "https://github.com/rust-lang/rust/commit/5312f0c3296bcc20db41010203188813247690f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5312f0c3296bcc20db41010203188813247690f4/comments", "author": {"login": "alexeyzab", "id": 5606260, "node_id": "MDQ6VXNlcjU2MDYyNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/5606260?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexeyzab", "html_url": "https://github.com/alexeyzab", "followers_url": "https://api.github.com/users/alexeyzab/followers", "following_url": "https://api.github.com/users/alexeyzab/following{/other_user}", "gists_url": "https://api.github.com/users/alexeyzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexeyzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexeyzab/subscriptions", "organizations_url": "https://api.github.com/users/alexeyzab/orgs", "repos_url": "https://api.github.com/users/alexeyzab/repos", "events_url": "https://api.github.com/users/alexeyzab/events{/privacy}", "received_events_url": "https://api.github.com/users/alexeyzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexeyzab", "id": 5606260, "node_id": "MDQ6VXNlcjU2MDYyNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/5606260?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexeyzab", "html_url": "https://github.com/alexeyzab", "followers_url": "https://api.github.com/users/alexeyzab/followers", "following_url": "https://api.github.com/users/alexeyzab/following{/other_user}", "gists_url": "https://api.github.com/users/alexeyzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexeyzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexeyzab/subscriptions", "organizations_url": "https://api.github.com/users/alexeyzab/orgs", "repos_url": "https://api.github.com/users/alexeyzab/repos", "events_url": "https://api.github.com/users/alexeyzab/events{/privacy}", "received_events_url": "https://api.github.com/users/alexeyzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd906ef7ec33240af1a17dee4ac933f363c987b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd906ef7ec33240af1a17dee4ac933f363c987b0", "html_url": "https://github.com/rust-lang/rust/commit/dd906ef7ec33240af1a17dee4ac933f363c987b0"}], "stats": {"total": 10, "additions": 8, "deletions": 2}, "files": [{"sha": "1e08d6378a94cad50be77a1279e50fd71ec1817e", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5312f0c3296bcc20db41010203188813247690f4/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5312f0c3296bcc20db41010203188813247690f4/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=5312f0c3296bcc20db41010203188813247690f4", "patch": "@@ -1001,7 +1001,12 @@ impl<'gcx, 'tcx, 'exprs, E> CoerceMany<'gcx, 'tcx, 'exprs, E>\n                       expression_ty: Ty<'tcx>,\n                       expression_diverges: Diverges)\n     {\n-        self.coerce_inner(fcx, cause, Some(expression), expression_ty, expression_diverges, None, false)\n+        self.coerce_inner(fcx,\n+                          cause,\n+                          Some(expression),\n+                          expression_ty,\n+                          expression_diverges,\n+                          None, false)\n     }\n \n     /// Indicates that one of the inputs is a \"forced unit\". This"}, {"sha": "940678c06e2a000cfd92cfd40cde9f9a6a93dc0c", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5312f0c3296bcc20db41010203188813247690f4/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5312f0c3296bcc20db41010203188813247690f4/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=5312f0c3296bcc20db41010203188813247690f4", "patch": "@@ -4078,7 +4078,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 // this implies that the type of the block will be\n                 // `!`).\n                 //\n-                // #41425 -- label the implicit `()` as being the \"found type\" here, rather than the \"expected type\".\n+                // #41425 -- label the implicit `()` as being the\n+                // \"found type\" here, rather than the \"expected type\".\n                 if !self.diverges.get().always() {\n                     coerce.coerce_forced_unit(self, &self.misc(blk.span), &mut |err| {\n                         if let Some(expected_ty) = expected.only_has_type(self) {"}]}