{"sha": "d8bf974df56618f75ecd38d7e61fe0d720a9c8c4", "node_id": "C_kwDOAAsO6NoAKGQ4YmY5NzRkZjU2NjE4Zjc1ZWNkMzhkN2U2MWZlMGQ3MjBhOWM4YzQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-22T23:28:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-22T23:28:51Z"}, "message": "Rollup merge of #91544 - rukai:91492, r=wesleywiser\n\nFix duplicate derive clone suggestion\n\ncloses https://github.com/rust-lang/rust/issues/91492\n\nThe addition of:\n```rust\nderives.sort();\nderives.dedup();\n```\nis what actually solves the problem.\nThe rest is just cleanup.\n\nI want to improve the diagnostic message to provide the suggestion as a proper diff but ran into some problems, so I'll attempt that again in a follow up PR.", "tree": {"sha": "40d4887860b696d494c84ff87e014ba8d6806a36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40d4887860b696d494c84ff87e014ba8d6806a36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8bf974df56618f75ecd38d7e61fe0d720a9c8c4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhw7S0CRBK7hj4Ov3rIwAAjFkIAAer3Ir4SzFknpGIjw3VnPHF\ndmBNkE9r+0Hii9DJLG2diicU/54jbdD3Ol285G30PkZmwAjmoKD1Vg5UQ5KCuDH+\nUwd9xuGr50xR0eXz7vnZCTDr3Db1yx7Ww6eGD3Lm42I2GcjDGfNw8NUtYZmUVIfv\nCFXEH4MWkBtQuBpeWlK4jokfy/eS27/BDuma5tvmKjRCiZjh8TZuik1hVqabhYQE\ngYCOKqvEju8KP4Lj6gBQFT3xXQ4rC+B0g3A3xvewMPJCt6EiK4bYWVYnZ0tcBvTq\n2NBjcrqlWWRrPF5BdYyIqzZFg/vAfA8nu1QrfbvvEmO0OBNxY/Ht0PwFbXwQtY4=\n=so1R\n-----END PGP SIGNATURE-----\n", "payload": "tree 40d4887860b696d494c84ff87e014ba8d6806a36\nparent 60625a6ef0ef57a2934918430be0121431ba96c9\nparent 0198ea47d8f0a9d99820f9a3c168ab3d26fd4f2a\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1640215731 +0100\ncommitter GitHub <noreply@github.com> 1640215731 +0100\n\nRollup merge of #91544 - rukai:91492, r=wesleywiser\n\nFix duplicate derive clone suggestion\n\ncloses https://github.com/rust-lang/rust/issues/91492\n\nThe addition of:\n```rust\nderives.sort();\nderives.dedup();\n```\nis what actually solves the problem.\nThe rest is just cleanup.\n\nI want to improve the diagnostic message to provide the suggestion as a proper diff but ran into some problems, so I'll attempt that again in a follow up PR.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8bf974df56618f75ecd38d7e61fe0d720a9c8c4", "html_url": "https://github.com/rust-lang/rust/commit/d8bf974df56618f75ecd38d7e61fe0d720a9c8c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8bf974df56618f75ecd38d7e61fe0d720a9c8c4/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60625a6ef0ef57a2934918430be0121431ba96c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/60625a6ef0ef57a2934918430be0121431ba96c9", "html_url": "https://github.com/rust-lang/rust/commit/60625a6ef0ef57a2934918430be0121431ba96c9"}, {"sha": "0198ea47d8f0a9d99820f9a3c168ab3d26fd4f2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0198ea47d8f0a9d99820f9a3c168ab3d26fd4f2a", "html_url": "https://github.com/rust-lang/rust/commit/0198ea47d8f0a9d99820f9a3c168ab3d26fd4f2a"}], "stats": {"total": 112, "additions": 96, "deletions": 16}, "files": [{"sha": "f3a5fbbb44467b96244bccdfe96255347225fc3a", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d8bf974df56618f75ecd38d7e61fe0d720a9c8c4/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8bf974df56618f75ecd38d7e61fe0d720a9c8c4/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=d8bf974df56618f75ecd38d7e61fe0d720a9c8c4", "patch": "@@ -1195,11 +1195,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     fn suggest_derive(\n         &self,\n         err: &mut DiagnosticBuilder<'_>,\n-        unsatisfied_predicates: &Vec<(\n+        unsatisfied_predicates: &[(\n             ty::Predicate<'tcx>,\n             Option<ty::Predicate<'tcx>>,\n             Option<ObligationCause<'tcx>>,\n-        )>,\n+        )],\n     ) {\n         let mut derives = Vec::<(String, Span, String)>::new();\n         let mut traits = Vec::<Span>::new();\n@@ -1236,23 +1236,24 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 traits.push(self.tcx.def_span(trait_pred.def_id()));\n             }\n         }\n-        derives.sort();\n-        let derives_grouped = derives.into_iter().fold(\n-            Vec::<(String, Span, String)>::new(),\n-            |mut acc, (self_name, self_span, trait_name)| {\n-                if let Some((acc_self_name, _, ref mut traits)) = acc.last_mut() {\n-                    if acc_self_name == &self_name {\n-                        traits.push_str(format!(\", {}\", trait_name).as_str());\n-                        return acc;\n-                    }\n-                }\n-                acc.push((self_name, self_span, trait_name));\n-                acc\n-            },\n-        );\n         traits.sort();\n         traits.dedup();\n \n+        derives.sort();\n+        derives.dedup();\n+\n+        let mut derives_grouped = Vec::<(String, Span, String)>::new();\n+        for (self_name, self_span, trait_name) in derives.into_iter() {\n+            if let Some((last_self_name, _, ref mut last_trait_names)) = derives_grouped.last_mut()\n+            {\n+                if last_self_name == &self_name {\n+                    last_trait_names.push_str(format!(\", {}\", trait_name).as_str());\n+                    continue;\n+                }\n+            }\n+            derives_grouped.push((self_name, self_span, trait_name));\n+        }\n+\n         let len = traits.len();\n         if len > 0 {\n             let span: MultiSpan = traits.into();"}, {"sha": "df792f118ab7652a135ab2ed8543eb1ae1d25843", "filename": "src/test/ui/derives/issue-91492.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d8bf974df56618f75ecd38d7e61fe0d720a9c8c4/src%2Ftest%2Fui%2Fderives%2Fissue-91492.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8bf974df56618f75ecd38d7e61fe0d720a9c8c4/src%2Ftest%2Fui%2Fderives%2Fissue-91492.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fissue-91492.rs?ref=d8bf974df56618f75ecd38d7e61fe0d720a9c8c4", "patch": "@@ -0,0 +1,25 @@\n+// Reproduce the issue with vec\n+pub struct NoDerives;\n+fn fun1(foo: &mut Vec<NoDerives>, bar: &[NoDerives]) {\n+    foo.extend_from_slice(bar); //~ ERROR\n+}\n+\n+// Reproduce the issue with vec\n+// and demonstrate that other derives are ignored in the suggested output\n+#[derive(Default, PartialEq)]\n+pub struct SomeDerives;\n+fn fun2(foo: &mut Vec<SomeDerives>, bar: &[SomeDerives]) {\n+    foo.extend_from_slice(bar); //~ ERROR\n+}\n+\n+// Try and fail to reproduce the issue without vec.\n+// No idea why it doesnt reproduce the issue but its still a useful test case.\n+struct Object<T, A>(T, A);\n+impl<T: Clone, A: Default> Object<T, A> {\n+    fn use_clone(&self) {}\n+}\n+fn fun3(foo: Object<NoDerives, SomeDerives>) {\n+    foo.use_clone(); //~ ERROR\n+}\n+\n+fn main() {}"}, {"sha": "73c91154a7bda8c84b26427116a184061ddaac1e", "filename": "src/test/ui/derives/issue-91492.stderr", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/d8bf974df56618f75ecd38d7e61fe0d720a9c8c4/src%2Ftest%2Fui%2Fderives%2Fissue-91492.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d8bf974df56618f75ecd38d7e61fe0d720a9c8c4/src%2Ftest%2Fui%2Fderives%2Fissue-91492.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fissue-91492.stderr?ref=d8bf974df56618f75ecd38d7e61fe0d720a9c8c4", "patch": "@@ -0,0 +1,54 @@\n+error[E0599]: the method `extend_from_slice` exists for mutable reference `&mut Vec<NoDerives>`, but its trait bounds were not satisfied\n+  --> $DIR/issue-91492.rs:4:9\n+   |\n+LL | pub struct NoDerives;\n+   | --------------------- doesn't satisfy `NoDerives: Clone`\n+LL | fn fun1(foo: &mut Vec<NoDerives>, bar: &[NoDerives]) {\n+LL |     foo.extend_from_slice(bar);\n+   |         ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the following trait bounds were not satisfied:\n+           `NoDerives: Clone`\n+help: consider annotating `NoDerives` with `#[derive(Clone)]`\n+   |\n+LL | #[derive(Clone)]\n+   |\n+\n+error[E0599]: the method `extend_from_slice` exists for mutable reference `&mut Vec<SomeDerives>`, but its trait bounds were not satisfied\n+  --> $DIR/issue-91492.rs:12:9\n+   |\n+LL | pub struct SomeDerives;\n+   | ----------------------- doesn't satisfy `SomeDerives: Clone`\n+LL | fn fun2(foo: &mut Vec<SomeDerives>, bar: &[SomeDerives]) {\n+LL |     foo.extend_from_slice(bar);\n+   |         ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the following trait bounds were not satisfied:\n+           `SomeDerives: Clone`\n+help: consider annotating `SomeDerives` with `#[derive(Clone)]`\n+   |\n+LL | #[derive(Clone)]\n+   |\n+\n+error[E0599]: the method `use_clone` exists for struct `Object<NoDerives, SomeDerives>`, but its trait bounds were not satisfied\n+  --> $DIR/issue-91492.rs:22:9\n+   |\n+LL | pub struct NoDerives;\n+   | --------------------- doesn't satisfy `NoDerives: Clone`\n+...\n+LL | struct Object<T, A>(T, A);\n+   | -------------------------- method `use_clone` not found for this\n+...\n+LL |     foo.use_clone();\n+   |         ^^^^^^^^^ method cannot be called on `Object<NoDerives, SomeDerives>` due to unsatisfied trait bounds\n+   |\n+   = note: the following trait bounds were not satisfied:\n+           `NoDerives: Clone`\n+help: consider annotating `NoDerives` with `#[derive(Clone)]`\n+   |\n+LL | #[derive(Clone)]\n+   |\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0599`."}]}