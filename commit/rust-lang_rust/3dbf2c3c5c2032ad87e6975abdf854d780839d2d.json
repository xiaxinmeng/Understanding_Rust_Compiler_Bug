{"sha": "3dbf2c3c5c2032ad87e6975abdf854d780839d2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkYmYyYzNjNWMyMDMyYWQ4N2U2OTc1YWJkZjg1NGQ3ODA4MzlkMmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-28T10:51:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-28T10:51:51Z"}, "message": "auto merge of #5592 : pcwalton/rust/xc-extern-statics, r=pcwalton", "tree": {"sha": "7592710262ef9dab403d3af0c957d299d1177f94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7592710262ef9dab403d3af0c957d299d1177f94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3dbf2c3c5c2032ad87e6975abdf854d780839d2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3dbf2c3c5c2032ad87e6975abdf854d780839d2d", "html_url": "https://github.com/rust-lang/rust/commit/3dbf2c3c5c2032ad87e6975abdf854d780839d2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3dbf2c3c5c2032ad87e6975abdf854d780839d2d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e549b80e3c214f93fc6ab9d7ead3f49b585faa23", "url": "https://api.github.com/repos/rust-lang/rust/commits/e549b80e3c214f93fc6ab9d7ead3f49b585faa23", "html_url": "https://github.com/rust-lang/rust/commit/e549b80e3c214f93fc6ab9d7ead3f49b585faa23"}, {"sha": "58338dd3d00075301ef2d43aeb0998f53776eebe", "url": "https://api.github.com/repos/rust-lang/rust/commits/58338dd3d00075301ef2d43aeb0998f53776eebe", "html_url": "https://github.com/rust-lang/rust/commit/58338dd3d00075301ef2d43aeb0998f53776eebe"}], "stats": {"total": 46, "additions": 39, "deletions": 7}, "files": [{"sha": "cfbd59073fefc925cdfcfcccf545297f48c328b7", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3dbf2c3c5c2032ad87e6975abdf854d780839d2d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbf2c3c5c2032ad87e6975abdf854d780839d2d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=3dbf2c3c5c2032ad87e6975abdf854d780839d2d", "patch": "@@ -2540,8 +2540,9 @@ pub fn get_item_val(ccx: @CrateContext, id: ast::node_id) -> ValueRef {\n             }\n           }\n \n-          _ => {\n-            ccx.sess.bug(~\"get_item_val(): unexpected variant\")\n+          ref variant => {\n+            ccx.sess.bug(fmt!(\"get_item_val(): unexpected variant: %?\",\n+                              variant))\n           }\n         };\n         if !(exprt || ccx.reachable.contains(&id)) {\n@@ -3085,6 +3086,7 @@ pub fn trans_crate(sess: session::Session,\n               const_cstr_cache: @mut LinearMap::new(),\n               const_globals: @mut LinearMap::new(),\n               const_values: @mut LinearMap::new(),\n+              extern_const_values: @mut LinearMap::new(),\n               module_data: @mut LinearMap::new(),\n               lltypes: @mut LinearMap::new(),\n               llsizingtypes: @mut LinearMap::new(),"}, {"sha": "541a950fb55fcfe24788c3c26cf1e05c150ab325", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dbf2c3c5c2032ad87e6975abdf854d780839d2d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbf2c3c5c2032ad87e6975abdf854d780839d2d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=3dbf2c3c5c2032ad87e6975abdf854d780839d2d", "patch": "@@ -201,6 +201,10 @@ pub struct CrateContext {\n \n      // Cache of emitted const values\n      const_values: @mut LinearMap<ast::node_id, ValueRef>,\n+\n+     // Cache of external const values\n+     extern_const_values: @mut LinearMap<ast::def_id, ValueRef>,\n+\n      module_data: @mut LinearMap<~str, ValueRef>,\n      lltypes: @mut LinearMap<ty::t, TypeRef>,\n      llsizingtypes: @mut LinearMap<ty::t, TypeRef>,"}, {"sha": "c6eec22ef2c1f5cbdde442e401564cfb13e4487b", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 31, "deletions": 5, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3dbf2c3c5c2032ad87e6975abdf854d780839d2d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbf2c3c5c2032ad87e6975abdf854d780839d2d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=3dbf2c3c5c2032ad87e6975abdf854d780839d2d", "patch": "@@ -124,6 +124,7 @@ use core::prelude::*;\n use back::abi;\n use lib;\n use lib::llvm::{ValueRef, TypeRef, llvm, True};\n+use metadata::csearch;\n use middle::borrowck::root_map_key;\n use middle::trans::_match;\n use middle::trans::adt;\n@@ -150,6 +151,7 @@ use middle::ty::{AutoPtr, AutoBorrowVec, AutoBorrowVecRef, AutoBorrowFn,\n use util::common::indenter;\n use util::ppaux::ty_to_str;\n \n+use core::cast::transmute;\n use core::hashmap::linear::LinearMap;\n use syntax::print::pprust::{expr_to_str};\n use syntax::ast;\n@@ -1079,11 +1081,35 @@ fn trans_lvalue_unadjusted(bcx: block, expr: @ast::expr) -> DatumBlock {\n \n                 fn get_val(bcx: block, did: ast::def_id, const_ty: ty::t)\n                     -> ValueRef {\n-                    // The LLVM global has the type of its initializer,\n-                    // which may not be equal to the enum's type for\n-                    // non-C-like enums.\n-                    PointerCast(bcx, base::get_item_val(bcx.ccx(), did.node),\n-                                T_ptr(type_of(bcx.ccx(), const_ty)))\n+                    if did.crate == ast::local_crate {\n+                        // The LLVM global has the type of its initializer,\n+                        // which may not be equal to the enum's type for\n+                        // non-C-like enums.\n+                        PointerCast(bcx,\n+                                    base::get_item_val(bcx.ccx(), did.node),\n+                                    T_ptr(type_of(bcx.ccx(), const_ty)))\n+                    } else {\n+                        // For external constants, we don't inline.\n+                        match bcx.ccx().extern_const_values.find(&did) {\n+                            None => {\n+                                unsafe {\n+                                    let llty = type_of(bcx.ccx(), const_ty);\n+                                    let symbol = csearch::get_symbol(\n+                                        bcx.ccx().sess.cstore,\n+                                        did);\n+                                    let llval = llvm::LLVMAddGlobal(\n+                                        bcx.ccx().llmod,\n+                                        llty,\n+                                        transmute::<&u8,*i8>(&symbol[0]));\n+                                    bcx.ccx().extern_const_values.insert(\n+                                        did,\n+                                        llval);\n+                                    llval\n+                                }\n+                            }\n+                            Some(llval) => *llval\n+                        }\n+                    }\n                 }\n \n                 let did = get_did(ccx, did);"}]}