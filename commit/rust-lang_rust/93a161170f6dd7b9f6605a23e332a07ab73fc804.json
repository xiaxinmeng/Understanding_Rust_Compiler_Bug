{"sha": "93a161170f6dd7b9f6605a23e332a07ab73fc804", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzYTE2MTE3MGY2ZGQ3YjlmNjYwNWEyM2UzMzJhMDdhYjczZmM4MDQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-20T01:39:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-20T01:39:43Z"}, "message": "Auto merge of #51617 - nnethercote:nll-allocs, r=pnkfelix\n\nReduce number of allocations done by NLL\n\nA couple of easy wins. Here are the NLL speedups that exceed 1%:\n```\nsentry-cli-check\n        avg: -3.5%      min: -3.5%      max: -3.5%\ninflate-check\n        avg: -1.9%      min: -1.9%      max: -1.9%\ninflate\n        avg: -1.7%      min: -1.7%      max: -1.7%\nclap-rs-check\n        avg: -1.6%      min: -1.6%      max: -1.6%\ncargo-check\n        avg: -1.6%      min: -1.6%      max: -1.6%\nripgrep-check\n        avg: -1.4%      min: -1.4%      max: -1.4%\nserde-check\n        avg: -1.2%      min: -1.2%      max: -1.2%\nregex-check\n        avg: -1.0%      min: -1.0%      max: -1.0%\nsentry-cli\n        avg: -1.0%      min: -1.0%      max: -1.0%\n```\nr? @nikomatsakis", "tree": {"sha": "cbe210ff67a7a45e2849a6e381ec73d688b178c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbe210ff67a7a45e2849a6e381ec73d688b178c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93a161170f6dd7b9f6605a23e332a07ab73fc804", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93a161170f6dd7b9f6605a23e332a07ab73fc804", "html_url": "https://github.com/rust-lang/rust/commit/93a161170f6dd7b9f6605a23e332a07ab73fc804", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93a161170f6dd7b9f6605a23e332a07ab73fc804/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac8d1f7623f55746ff8f59d6b26f03c39cee5844", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac8d1f7623f55746ff8f59d6b26f03c39cee5844", "html_url": "https://github.com/rust-lang/rust/commit/ac8d1f7623f55746ff8f59d6b26f03c39cee5844"}, {"sha": "ba0bb02f6ff241297281784d2aed7dd8c2c78c4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba0bb02f6ff241297281784d2aed7dd8c2c78c4d", "html_url": "https://github.com/rust-lang/rust/commit/ba0bb02f6ff241297281784d2aed7dd8c2c78c4d"}], "stats": {"total": 34, "additions": 21, "deletions": 13}, "files": [{"sha": "b692ffbb250c70b0586c017e3cc73bff5dced6c7", "filename": "src/librustc_mir/borrow_check/path_utils.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/93a161170f6dd7b9f6605a23e332a07ab73fc804/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93a161170f6dd7b9f6605a23e332a07ab73fc804/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs?ref=93a161170f6dd7b9f6605a23e332a07ab73fc804", "patch": "@@ -21,6 +21,7 @@ use rustc::mir::{BasicBlock, Location, Mir, Place};\n use rustc::mir::{Projection, ProjectionElem, BorrowKind};\n use rustc::ty::{self, TyCtxt};\n use rustc_data_structures::control_flow_graph::dominators::Dominators;\n+use rustc_data_structures::small_vec::SmallVec;\n use std::iter;\n \n pub(super) fn allow_two_phase_borrow<'a, 'tcx, 'gcx: 'tcx>(\n@@ -259,8 +260,8 @@ pub(super) fn places_conflict<'a, 'gcx: 'tcx, 'tcx>(\n \n /// Return all the prefixes of `place` in reverse order, including\n /// downcasts.\n-fn place_elements<'a, 'tcx>(place: &'a Place<'tcx>) -> Vec<&'a Place<'tcx>> {\n-    let mut result = vec![];\n+fn place_elements<'a, 'tcx>(place: &'a Place<'tcx>) -> SmallVec<[&'a Place<'tcx>; 8]> {\n+    let mut result = SmallVec::new();\n     let mut place = place;\n     loop {\n         result.push(place);"}, {"sha": "a89d1afae8637bc25e89d876c03365f2b45dfccc", "filename": "src/librustc_mir/dataflow/at_location.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/93a161170f6dd7b9f6605a23e332a07ab73fc804/src%2Flibrustc_mir%2Fdataflow%2Fat_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93a161170f6dd7b9f6605a23e332a07ab73fc804/src%2Flibrustc_mir%2Fdataflow%2Fat_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fat_location.rs?ref=93a161170f6dd7b9f6605a23e332a07ab73fc804", "patch": "@@ -204,10 +204,22 @@ where\n     T: HasMoveData<'tcx> + BitDenotation<Idx = MovePathIndex>,\n {\n     pub fn has_any_child_of(&self, mpi: T::Idx) -> Option<T::Idx> {\n+        // We process `mpi` before the loop below, for two reasons:\n+        // - it's a little different from the loop case (we don't traverse its\n+        //   siblings);\n+        // - ~99% of the time the loop isn't reached, and this code is hot, so\n+        //   we don't want to allocate `todo` unnecessarily.\n+        if self.contains(&mpi) {\n+            return Some(mpi);\n+        }\n         let move_data = self.operator().move_data();\n+        let move_path = &move_data.move_paths[mpi];\n+        let mut todo = if let Some(child) = move_path.first_child {\n+            vec![child]\n+        } else {\n+            return None;\n+        };\n \n-        let mut todo = vec![mpi];\n-        let mut push_siblings = false; // don't look at siblings of original `mpi`.\n         while let Some(mpi) = todo.pop() {\n             if self.contains(&mpi) {\n                 return Some(mpi);\n@@ -216,15 +228,10 @@ where\n             if let Some(child) = move_path.first_child {\n                 todo.push(child);\n             }\n-            if push_siblings {\n-                if let Some(sibling) = move_path.next_sibling {\n-                    todo.push(sibling);\n-                }\n-            } else {\n-                // after we've processed the original `mpi`, we should\n-                // always traverse the siblings of any of its\n-                // children.\n-                push_siblings = true;\n+            // After we've processed the original `mpi`, we should always\n+            // traverse the siblings of any of its children.\n+            if let Some(sibling) = move_path.next_sibling {\n+                todo.push(sibling);\n             }\n         }\n         return None;"}]}