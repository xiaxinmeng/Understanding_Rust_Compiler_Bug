{"sha": "d9d84dca8eaf463a0d878bbd4916665500a071d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5ZDg0ZGNhOGVhZjQ2M2EwZDg3OGJiZDQ5MTY2NjU1MDBhMDcxZDE=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-08-18T11:31:23Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-08-18T11:31:23Z"}, "message": "Add doc examples count for --show-coverage", "tree": {"sha": "8dca8420f10f2f10abc01e9c0a27475eb12973a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8dca8420f10f2f10abc01e9c0a27475eb12973a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9d84dca8eaf463a0d878bbd4916665500a071d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9d84dca8eaf463a0d878bbd4916665500a071d1", "html_url": "https://github.com/rust-lang/rust/commit/d9d84dca8eaf463a0d878bbd4916665500a071d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9d84dca8eaf463a0d878bbd4916665500a071d1/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "441fd2255763c2aeea616aeac61b2c795a4c5330", "url": "https://api.github.com/repos/rust-lang/rust/commits/441fd2255763c2aeea616aeac61b2c795a4c5330", "html_url": "https://github.com/rust-lang/rust/commit/441fd2255763c2aeea616aeac61b2c795a4c5330"}], "stats": {"total": 114, "additions": 88, "deletions": 26}, "files": [{"sha": "ccc07645620a9c8ffe536a071e3c3958e48a2140", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d9d84dca8eaf463a0d878bbd4916665500a071d1/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9d84dca8eaf463a0d878bbd4916665500a071d1/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=d9d84dca8eaf463a0d878bbd4916665500a071d1", "patch": "@@ -200,10 +200,12 @@ fn get_index_type_name(clean_type: &clean::Type, accept_generic: bool) -> Option\n     match *clean_type {\n         clean::ResolvedPath { ref path, .. } => {\n             let segments = &path.segments;\n-            let path_segment = segments.iter().last().unwrap_or_else(|| panic!(\n+            let path_segment = segments.iter().last().unwrap_or_else(|| {\n+                panic!(\n                 \"get_index_type_name(clean_type: {:?}, accept_generic: {:?}) had length zero path\",\n                 clean_type, accept_generic\n-            ));\n+            )\n+            });\n             Some(path_segment.name.clone())\n         }\n         clean::Generic(ref s) if accept_generic => Some(s.clone()),"}, {"sha": "0a836f46c0eb85bc96bc861e94f3af109e58eb1c", "filename": "src/librustdoc/passes/calculate_doc_coverage.rs", "status": "modified", "additions": 67, "deletions": 13, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/d9d84dca8eaf463a0d878bbd4916665500a071d1/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9d84dca8eaf463a0d878bbd4916665500a071d1/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs?ref=d9d84dca8eaf463a0d878bbd4916665500a071d1", "patch": "@@ -2,8 +2,9 @@ use crate::clean;\n use crate::config::OutputFormat;\n use crate::core::DocContext;\n use crate::fold::{self, DocFolder};\n+use crate::html::markdown::{find_testable_code, ErrorCodes};\n+use crate::passes::doc_test_lints::Tests;\n use crate::passes::Pass;\n-\n use rustc_span::symbol::sym;\n use rustc_span::FileName;\n use serde::Serialize;\n@@ -30,15 +31,19 @@ fn calculate_doc_coverage(krate: clean::Crate, ctx: &DocContext<'_>) -> clean::C\n struct ItemCount {\n     total: u64,\n     with_docs: u64,\n+    with_examples: u64,\n }\n \n impl ItemCount {\n-    fn count_item(&mut self, has_docs: bool) {\n+    fn count_item(&mut self, has_docs: bool, has_doc_example: bool) {\n         self.total += 1;\n \n         if has_docs {\n             self.with_docs += 1;\n         }\n+        if has_doc_example {\n+            self.with_examples += 1;\n+        }\n     }\n \n     fn percentage(&self) -> Option<f64> {\n@@ -48,20 +53,33 @@ impl ItemCount {\n             None\n         }\n     }\n+\n+    fn examples_percentage(&self) -> Option<f64> {\n+        if self.total > 0 {\n+            Some((self.with_examples as f64 * 100.0) / self.total as f64)\n+        } else {\n+            None\n+        }\n+    }\n }\n \n impl ops::Sub for ItemCount {\n     type Output = Self;\n \n     fn sub(self, rhs: Self) -> Self {\n-        ItemCount { total: self.total - rhs.total, with_docs: self.with_docs - rhs.with_docs }\n+        ItemCount {\n+            total: self.total - rhs.total,\n+            with_docs: self.with_docs - rhs.with_docs,\n+            with_examples: self.with_examples - rhs.with_examples,\n+        }\n     }\n }\n \n impl ops::AddAssign for ItemCount {\n     fn add_assign(&mut self, rhs: Self) {\n         self.total += rhs.total;\n         self.with_docs += rhs.with_docs;\n+        self.with_examples += rhs.with_examples;\n     }\n }\n \n@@ -103,40 +121,73 @@ impl CoverageCalculator {\n         let mut total = ItemCount::default();\n \n         fn print_table_line() {\n-            println!(\"+-{0:->35}-+-{0:->10}-+-{0:->10}-+-{0:->10}-+\", \"\");\n+            println!(\"+-{0:->35}-+-{0:->10}-+-{0:->10}-+-{0:->10}-+-{0:->10}-+-{0:->10}-+\", \"\");\n         }\n \n-        fn print_table_record(name: &str, count: ItemCount, percentage: f64) {\n+        fn print_table_record(\n+            name: &str,\n+            count: ItemCount,\n+            percentage: f64,\n+            examples_percentage: f64,\n+        ) {\n             println!(\n-                \"| {:<35} | {:>10} | {:>10} | {:>9.1}% |\",\n-                name, count.with_docs, count.total, percentage\n+                \"| {:<35} | {:>10} | {:>10} | {:>9.1}% | {:>10} | {:>9.1}% |\",\n+                name,\n+                count.with_docs,\n+                count.total,\n+                percentage,\n+                count.with_examples,\n+                examples_percentage,\n             );\n         }\n \n         print_table_line();\n         println!(\n-            \"| {:<35} | {:>10} | {:>10} | {:>10} |\",\n-            \"File\", \"Documented\", \"Total\", \"Percentage\"\n+            \"| {:<35} | {:>10} | {:>10} | {:>10} | {:>10} | {:>10} |\",\n+            \"File\", \"Documented\", \"Total\", \"Percentage\", \"Examples\", \"Percentage\",\n         );\n         print_table_line();\n \n         for (file, &count) in &self.items {\n-            if let Some(percentage) = count.percentage() {\n-                print_table_record(&limit_filename_len(file.to_string()), count, percentage);\n+            if let (Some(percentage), Some(examples_percentage)) =\n+                (count.percentage(), count.examples_percentage())\n+            {\n+                print_table_record(\n+                    &limit_filename_len(file.to_string()),\n+                    count,\n+                    percentage,\n+                    examples_percentage,\n+                );\n \n                 total += count;\n             }\n         }\n \n         print_table_line();\n-        print_table_record(\"Total\", total, total.percentage().unwrap_or(0.0));\n+        print_table_record(\n+            \"Total\",\n+            total,\n+            total.percentage().unwrap_or(0.0),\n+            total.examples_percentage().unwrap_or(0.0),\n+        );\n         print_table_line();\n     }\n }\n \n impl fold::DocFolder for CoverageCalculator {\n     fn fold_item(&mut self, i: clean::Item) -> Option<clean::Item> {\n         let has_docs = !i.attrs.doc_strings.is_empty();\n+        let mut tests = Tests { found_tests: 0 };\n+\n+        find_testable_code(\n+            &i.attrs.doc_strings.iter().map(|d| d.as_str()).collect::<Vec<_>>().join(\"\\n\"),\n+            &mut tests,\n+            ErrorCodes::No,\n+            false,\n+            None,\n+        );\n+\n+        let has_doc_example = tests.found_tests != 0;\n \n         match i.inner {\n             _ if !i.def_id.is_local() => {\n@@ -187,7 +238,10 @@ impl fold::DocFolder for CoverageCalculator {\n             }\n             _ => {\n                 debug!(\"counting {:?} {:?} in {}\", i.type_(), i.name, i.source.filename);\n-                self.items.entry(i.source.filename.clone()).or_default().count_item(has_docs);\n+                self.items\n+                    .entry(i.source.filename.clone())\n+                    .or_default()\n+                    .count_item(has_docs, has_doc_example);\n             }\n         }\n "}, {"sha": "1fdc4ee247adfc6a34b39c0f14051d59b9fae37d", "filename": "src/librustdoc/passes/doc_test_lints.rs", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d9d84dca8eaf463a0d878bbd4916665500a071d1/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9d84dca8eaf463a0d878bbd4916665500a071d1/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs?ref=d9d84dca8eaf463a0d878bbd4916665500a071d1", "patch": "@@ -43,6 +43,22 @@ impl<'a, 'tcx> DocFolder for PrivateItemDocTestLinter<'a, 'tcx> {\n     }\n }\n \n+pub(crate) struct Tests {\n+    pub(crate) found_tests: usize,\n+}\n+\n+impl Tests {\n+    pub(crate) fn new() -> Tests {\n+        Tests { found_tests: 0 }\n+    }\n+}\n+\n+impl crate::test::Tester for Tests {\n+    fn add_test(&mut self, _: String, _: LangString, _: usize) {\n+        self.found_tests += 1;\n+    }\n+}\n+\n pub fn look_for_tests<'tcx>(cx: &DocContext<'tcx>, dox: &str, item: &Item) {\n     let hir_id = match cx.as_local_hir_id(item.def_id) {\n         Some(hir_id) => hir_id,\n@@ -52,17 +68,7 @@ pub fn look_for_tests<'tcx>(cx: &DocContext<'tcx>, dox: &str, item: &Item) {\n         }\n     };\n \n-    struct Tests {\n-        found_tests: usize,\n-    }\n-\n-    impl crate::test::Tester for Tests {\n-        fn add_test(&mut self, _: String, _: LangString, _: usize) {\n-            self.found_tests += 1;\n-        }\n-    }\n-\n-    let mut tests = Tests { found_tests: 0 };\n+    let mut tests = Tests::new();\n \n     find_testable_code(&dox, &mut tests, ErrorCodes::No, false, None);\n "}]}