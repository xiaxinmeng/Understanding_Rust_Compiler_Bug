{"sha": "99de57ae135420d52af00df9080c0ffe6786e83c", "node_id": "C_kwDOAAsO6NoAKDk5ZGU1N2FlMTM1NDIwZDUyYWYwMGRmOTA4MGMwZmZlNjc4NmU4M2M", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2022-10-26T21:17:59Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2022-10-29T21:04:04Z"}, "message": "Improve LanguageItems api", "tree": {"sha": "699f8b8cb4d93cde9ab811d9c4fbf8931b6afaf6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/699f8b8cb4d93cde9ab811d9c4fbf8931b6afaf6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99de57ae135420d52af00df9080c0ffe6786e83c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99de57ae135420d52af00df9080c0ffe6786e83c", "html_url": "https://github.com/rust-lang/rust/commit/99de57ae135420d52af00df9080c0ffe6786e83c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99de57ae135420d52af00df9080c0ffe6786e83c/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e9772042948002f9c6f60c4c81603170035fffa", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e9772042948002f9c6f60c4c81603170035fffa", "html_url": "https://github.com/rust-lang/rust/commit/5e9772042948002f9c6f60c4c81603170035fffa"}], "stats": {"total": 71, "additions": 43, "deletions": 28}, "files": [{"sha": "eaa34aeccfda15a055b51ad5314ee19e1b96ab74", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 38, "deletions": 21, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/99de57ae135420d52af00df9080c0ffe6786e83c/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99de57ae135420d52af00df9080c0ffe6786e83c/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=99de57ae135420d52af00df9080c0ffe6786e83c", "patch": "@@ -36,6 +36,44 @@ macro_rules! expand_group {\n     };\n }\n \n+/// All of the language items, defined or not.\n+/// Defined lang items can come from the current crate or its dependencies.\n+#[derive(HashStable_Generic, Debug)]\n+pub struct LanguageItems {\n+    /// Mappings from lang items to their possibly found [`DefId`]s.\n+    /// The index corresponds to the order in [`LangItem`].\n+    pub items: Vec<Option<DefId>>,\n+    /// Lang items that were not found during collection.\n+    pub missing: Vec<LangItem>,\n+    /// Mapping from [`LangItemGroup`] discriminants to all\n+    /// [`DefId`]s of lang items in that group.\n+    pub groups: [Vec<DefId>; NUM_GROUPS],\n+}\n+\n+impl LanguageItems {\n+    pub fn get(&self, item: LangItem) -> Option<DefId> {\n+        self.items[item as usize]\n+    }\n+\n+    pub fn set(&mut self, item: LangItem, def_id: DefId) {\n+        self.items[item as usize] = Some(def_id);\n+    }\n+\n+    /// Requires that a given `LangItem` was bound and returns the corresponding `DefId`.\n+    /// If it wasn't bound, e.g. due to a missing `#[lang = \"<it.name()>\"]`,\n+    /// returns an error encapsulating the `LangItem`.\n+    pub fn require(&self, it: LangItem) -> Result<DefId, LangItemError> {\n+        self.get(it).ok_or_else(|| LangItemError(it))\n+    }\n+\n+    pub fn iter<'a>(&'a self) -> impl Iterator<Item = (LangItem, DefId)> + 'a {\n+        self.items\n+            .iter()\n+            .enumerate()\n+            .filter_map(|(i, id)| id.map(|id| (LangItem::from_u32(i as u32).unwrap(), id)))\n+    }\n+}\n+\n // The actual lang items defined come at the end of this file in one handy table.\n // So you probably just want to nip down to the end.\n macro_rules! language_item_table {\n@@ -82,20 +120,6 @@ macro_rules! language_item_table {\n             }\n         }\n \n-        /// All of the language items, defined or not.\n-        /// Defined lang items can come from the current crate or its dependencies.\n-        #[derive(HashStable_Generic, Debug)]\n-        pub struct LanguageItems {\n-            /// Mappings from lang items to their possibly found [`DefId`]s.\n-            /// The index corresponds to the order in [`LangItem`].\n-            pub items: Vec<Option<DefId>>,\n-            /// Lang items that were not found during collection.\n-            pub missing: Vec<LangItem>,\n-            /// Mapping from [`LangItemGroup`] discriminants to all\n-            /// [`DefId`]s of lang items in that group.\n-            pub groups: [Vec<DefId>; NUM_GROUPS],\n-        }\n-\n         impl LanguageItems {\n             /// Construct an empty collection of lang items and no missing ones.\n             pub fn new() -> Self {\n@@ -114,13 +138,6 @@ macro_rules! language_item_table {\n                 &*self.items\n             }\n \n-            /// Requires that a given `LangItem` was bound and returns the corresponding `DefId`.\n-            /// If it wasn't bound, e.g. due to a missing `#[lang = \"<it.name()>\"]`,\n-            /// returns an error encapsulating the `LangItem`.\n-            pub fn require(&self, it: LangItem) -> Result<DefId, LangItemError> {\n-                self.items[it as usize].ok_or_else(|| LangItemError(it))\n-            }\n-\n             /// Returns the [`DefId`]s of all lang items in a group.\n             pub fn group(&self, group: LangItemGroup) -> &[DefId] {\n                 self.groups[group as usize].as_ref()"}, {"sha": "73ea06a6370d420a9d9eeef5b79ffcdc744ce75b", "filename": "compiler/rustc_passes/src/reachable.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/99de57ae135420d52af00df9080c0ffe6786e83c/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99de57ae135420d52af00df9080c0ffe6786e83c/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Freachable.rs?ref=99de57ae135420d52af00df9080c0ffe6786e83c", "patch": "@@ -380,11 +380,9 @@ fn reachable_set<'tcx>(tcx: TyCtxt<'tcx>, (): ()) -> FxHashSet<LocalDefId> {\n         })\n         .collect::<Vec<_>>();\n \n-    for item in tcx.lang_items().items().iter() {\n-        if let Some(def_id) = *item {\n-            if let Some(def_id) = def_id.as_local() {\n-                reachable_context.worklist.push(def_id);\n-            }\n+    for (_, def_id) in tcx.lang_items().iter() {\n+        if let Some(def_id) = def_id.as_local() {\n+            reachable_context.worklist.push(def_id);\n         }\n     }\n     {"}, {"sha": "dacce5cd2f6059bd33588e3af6a3bbdb273d557e", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99de57ae135420d52af00df9080c0ffe6786e83c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99de57ae135420d52af00df9080c0ffe6786e83c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=99de57ae135420d52af00df9080c0ffe6786e83c", "patch": "@@ -974,7 +974,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                                 // useful for less general traits.\n                                 if peeled\n                                     && !self.tcx.trait_is_auto(def_id)\n-                                    && !self.tcx.lang_items().items().contains(&Some(def_id))\n+                                    && !self.tcx.lang_items().iter().any(|(_, id)| id == def_id)\n                                 {\n                                     let trait_ref = trait_pred.to_poly_trait_ref();\n                                     let impl_candidates =\n@@ -1898,7 +1898,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         let def_id = trait_ref.def_id();\n         if impl_candidates.is_empty() {\n             if self.tcx.trait_is_auto(def_id)\n-                || self.tcx.lang_items().items().contains(&Some(def_id))\n+                || self.tcx.lang_items().iter().any(|(_, id)| id == def_id)\n                 || self.tcx.get_diagnostic_name(def_id).is_some()\n             {\n                 // Mentioning implementers of `Copy`, `Debug` and friends is not useful."}]}