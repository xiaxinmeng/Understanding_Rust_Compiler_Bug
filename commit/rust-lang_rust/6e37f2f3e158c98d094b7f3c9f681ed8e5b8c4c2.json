{"sha": "6e37f2f3e158c98d094b7f3c9f681ed8e5b8c4c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlMzdmMmYzZTE1OGM5OGQwOTRiN2YzYzlmNjgxZWQ4ZTViOGM0YzI=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-11-09T14:15:52Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-11-09T14:15:52Z"}, "message": "Cap `count`", "tree": {"sha": "1e0d5d03e5d1d5ac981666ba98c152c3246ffcd8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e0d5d03e5d1d5ac981666ba98c152c3246ffcd8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e37f2f3e158c98d094b7f3c9f681ed8e5b8c4c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e37f2f3e158c98d094b7f3c9f681ed8e5b8c4c2", "html_url": "https://github.com/rust-lang/rust/commit/6e37f2f3e158c98d094b7f3c9f681ed8e5b8c4c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e37f2f3e158c98d094b7f3c9f681ed8e5b8c4c2/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10b93730d3b766ad4e003cd21b7a5441c6f01e1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/10b93730d3b766ad4e003cd21b7a5441c6f01e1e", "html_url": "https://github.com/rust-lang/rust/commit/10b93730d3b766ad4e003cd21b7a5441c6f01e1e"}], "stats": {"total": 42, "additions": 22, "deletions": 20}, "files": [{"sha": "5e84cdee5cc4b0b1ac8819d9f45e0256f2adca55", "filename": "src/shims/fs.rs", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/6e37f2f3e158c98d094b7f3c9f681ed8e5b8c4c2/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e37f2f3e158c98d094b7f3c9f681ed8e5b8c4c2/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=6e37f2f3e158c98d094b7f3c9f681ed8e5b8c4c2", "patch": "@@ -1,7 +1,7 @@\n use std::collections::HashMap;\n+use std::convert::TryFrom;\n use std::fs::{remove_file, File, OpenOptions};\n use std::io::{Read, Write};\n-use std::convert::TryFrom;\n \n use rustc::ty::layout::Size;\n \n@@ -166,7 +166,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         this.check_no_isolation(\"read\")?;\n \n-        let count = this.read_scalar(count_op)?.to_machine_usize(&*this.tcx)?;\n+        let ptr_size = this.pointer_size().bits();\n+\n+        let count = this\n+            .read_scalar(count_op)?\n+            .to_machine_usize(&*this.tcx)?\n+            .min(1 << (ptr_size - 1));\n         // Reading zero bytes should not change `buf`.\n         if count == 0 {\n             return Ok(0);\n@@ -175,22 +180,22 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let buf = this.read_scalar(buf_op)?.not_undef()?;\n \n         if let Some(handle) = this.machine.file_handler.handles.get_mut(&fd) {\n-            let count = isize::try_from(count)\n-                .map_err(|_| err_unsup_format!(\"Program tries to read into buffer too big for this host platform\"))?;\n+            let count = isize::try_from(count).unwrap();\n             // We want to read at most `count` bytes. We are sure that `count` is not negative\n             // because it was a target's `usize`. Also we are sure that its smaller than\n             // `usize::max_value()` because it is a host's `isize`.\n             let mut bytes = vec![0; count as usize];\n-            let result = handle.file.read(&mut bytes);\n+            let result = handle\n+                .file\n+                .read(&mut bytes)\n+                .map(|c| i64::try_from(c).unwrap());\n \n             match result {\n-                Ok(c) => {\n-                    let read_bytes = i64::try_from(c)\n-                        .map_err(|_| err_unsup_format!(\"Number of read bytes {} cannot be transformed to i64\", c))?;\n+                Ok(read_bytes) => {\n                     // If reading to `bytes` did not fail, we write those bytes to the buffer.\n                     this.memory.write_bytes(buf, bytes)?;\n                     Ok(read_bytes)\n-                },\n+                }\n                 Err(e) => {\n                     this.set_last_error_from_io_error(e)?;\n                     Ok(-1)\n@@ -211,7 +216,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         this.check_no_isolation(\"write\")?;\n \n-        let count = this.read_scalar(count_op)?.to_machine_usize(&*this.tcx)?;\n+        let ptr_size = this.pointer_size().bits();\n+\n+        let count = this\n+            .read_scalar(count_op)?\n+            .to_machine_usize(&*this.tcx)?\n+            .min(1 << (ptr_size - 1));\n         // Writing zero bytes should not change `buf`.\n         if count == 0 {\n             return Ok(0);\n@@ -221,16 +231,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         if let Some(handle) = this.machine.file_handler.handles.get_mut(&fd) {\n             let bytes = this.memory.read_bytes(buf, Size::from_bytes(count))?;\n-            let result = handle.file.write(&bytes);\n-\n-            match result {\n-                Ok(c) => i64::try_from(c)\n-                    .map_err(|_| err_unsup_format!(\"Number of written bytes {} cannot be transformed to i64\", c).into()),\n-                Err(e) => {\n-                    this.set_last_error_from_io_error(e)?;\n-                    Ok(-1)\n-                }\n-            }\n+            let result = handle.file.write(&bytes).map(|c| i64::try_from(c).unwrap());\n+            this.try_unwrap_io_result(result)\n         } else {\n             this.handle_not_found()\n         }"}]}