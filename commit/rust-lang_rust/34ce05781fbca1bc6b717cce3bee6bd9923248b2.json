{"sha": "34ce05781fbca1bc6b717cce3bee6bd9923248b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0Y2UwNTc4MWZiY2ExYmM2YjcxN2NjZTNiZWU2YmQ5OTIzMjQ4YjI=", "commit": {"author": {"name": "Jade", "email": "software@lfcode.ca", "date": "2021-06-07T04:48:06Z"}, "committer": {"name": "Jade", "email": "software@lfcode.ca", "date": "2021-06-07T04:52:00Z"}, "message": "feat: goto def on impl items also goes to the defn in the trait\n\nIt was trivial to extend this to associated consts/associated types and\nI just didn't think of it.", "tree": {"sha": "062f9e4fdb3e675c5a361e3f14a5659a6f4bb810", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/062f9e4fdb3e675c5a361e3f14a5659a6f4bb810"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34ce05781fbca1bc6b717cce3bee6bd9923248b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34ce05781fbca1bc6b717cce3bee6bd9923248b2", "html_url": "https://github.com/rust-lang/rust/commit/34ce05781fbca1bc6b717cce3bee6bd9923248b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34ce05781fbca1bc6b717cce3bee6bd9923248b2/comments", "author": {"login": "lf-", "id": 6652840, "node_id": "MDQ6VXNlcjY2NTI4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6652840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lf-", "html_url": "https://github.com/lf-", "followers_url": "https://api.github.com/users/lf-/followers", "following_url": "https://api.github.com/users/lf-/following{/other_user}", "gists_url": "https://api.github.com/users/lf-/gists{/gist_id}", "starred_url": "https://api.github.com/users/lf-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lf-/subscriptions", "organizations_url": "https://api.github.com/users/lf-/orgs", "repos_url": "https://api.github.com/users/lf-/repos", "events_url": "https://api.github.com/users/lf-/events{/privacy}", "received_events_url": "https://api.github.com/users/lf-/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lf-", "id": 6652840, "node_id": "MDQ6VXNlcjY2NTI4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6652840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lf-", "html_url": "https://github.com/lf-", "followers_url": "https://api.github.com/users/lf-/followers", "following_url": "https://api.github.com/users/lf-/following{/other_user}", "gists_url": "https://api.github.com/users/lf-/gists{/gist_id}", "starred_url": "https://api.github.com/users/lf-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lf-/subscriptions", "organizations_url": "https://api.github.com/users/lf-/orgs", "repos_url": "https://api.github.com/users/lf-/repos", "events_url": "https://api.github.com/users/lf-/events{/privacy}", "received_events_url": "https://api.github.com/users/lf-/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a57c736404abac81a6de20b0e90c19021e040b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a57c736404abac81a6de20b0e90c19021e040b9", "html_url": "https://github.com/rust-lang/rust/commit/8a57c736404abac81a6de20b0e90c19021e040b9"}], "stats": {"total": 74, "additions": 56, "deletions": 18}, "files": [{"sha": "2d36c34e99d3f1da1de2222fb9990703006795fa", "filename": "crates/ide/src/goto_definition.rs", "status": "modified", "additions": 56, "deletions": 18, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/34ce05781fbca1bc6b717cce3bee6bd9923248b2/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ce05781fbca1bc6b717cce3bee6bd9923248b2/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_definition.rs?ref=34ce05781fbca1bc6b717cce3bee6bd9923248b2", "patch": "@@ -57,7 +57,7 @@ pub(crate) fn goto_definition(\n             },\n             ast::Name(name) => {\n                 let def = NameClass::classify(&sema, &name)?.referenced_or_defined(sema.db);\n-                try_find_trait_fn_definition(&sema.db, &def)\n+                try_find_trait_item_definition(&sema.db, &def)\n                     .or_else(|| def.try_to_nav(sema.db))\n             },\n             ast::Lifetime(lt) => if let Some(name_class) = NameClass::classify_lifetime(&sema, &lt) {\n@@ -100,30 +100,32 @@ fn try_lookup_include_path(\n     })\n }\n \n-/// finds the trait definition of an impl'd function\n+/// finds the trait definition of an impl'd item\n /// e.g.\n /// ```rust\n /// trait A { fn a(); }\n /// struct S;\n /// impl A for S { fn a(); } // <-- on this function, will get the location of a() in the trait\n /// ```\n-fn try_find_trait_fn_definition(db: &RootDatabase, def: &Definition) -> Option<NavigationTarget> {\n-    match def {\n-        Definition::ModuleDef(ModuleDef::Function(f)) => {\n-            let name = def.name(db)?;\n-            let assoc = f.as_assoc_item(db)?;\n-            let imp = match assoc.container(db) {\n-                hir::AssocItemContainer::Impl(imp) => imp,\n-                _ => return None,\n-            };\n-            let trait_ = imp.trait_(db)?;\n-            trait_\n-                .items(db)\n-                .iter()\n-                .find_map(|itm| (itm.name(db)? == name).then(|| itm.try_to_nav(db)).flatten())\n-        }\n+fn try_find_trait_item_definition(db: &RootDatabase, def: &Definition) -> Option<NavigationTarget> {\n+    let name = def.name(db)?;\n+    let assoc = match def {\n+        Definition::ModuleDef(ModuleDef::Function(f)) => f.as_assoc_item(db),\n+        Definition::ModuleDef(ModuleDef::Const(c)) => c.as_assoc_item(db),\n+        Definition::ModuleDef(ModuleDef::TypeAlias(ty)) => ty.as_assoc_item(db),\n         _ => None,\n-    }\n+    }?;\n+\n+    let imp = match assoc.container(db) {\n+        hir::AssocItemContainer::Impl(imp) => imp,\n+        _ => return None,\n+    };\n+\n+    let trait_ = imp.trait_(db)?;\n+    trait_\n+        .items(db)\n+        .iter()\n+        .find_map(|itm| (itm.name(db)? == name).then(|| itm.try_to_nav(db)).flatten())\n }\n \n fn pick_best(tokens: TokenAtOffset<SyntaxToken>) -> Option<SyntaxToken> {\n@@ -1304,6 +1306,42 @@ struct Stwuct;\n impl Twait for Stwuct {\n     fn a$0();\n }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn goto_def_of_trait_impl_const() {\n+        check(\n+            r#\"\n+trait Twait {\n+    const NOMS: bool;\n+       // ^^^^\n+}\n+\n+struct Stwuct;\n+\n+impl Twait for Stwuct {\n+    const NOMS$0: bool = true;\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn goto_def_of_trait_impl_type_alias() {\n+        check(\n+            r#\"\n+trait Twait {\n+    type IsBad;\n+      // ^^^^^\n+}\n+\n+struct Stwuct;\n+\n+impl Twait for Stwuct {\n+    type IsBad$0 = !;\n+}\n \"#,\n         );\n     }"}]}