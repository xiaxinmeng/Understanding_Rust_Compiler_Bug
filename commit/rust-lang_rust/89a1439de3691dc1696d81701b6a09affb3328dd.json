{"sha": "89a1439de3691dc1696d81701b6a09affb3328dd", "node_id": "C_kwDOAAsO6NoAKDg5YTE0MzlkZTM2OTFkYzE2OTZkODE3MDFiNmEwOWFmZmIzMzI4ZGQ", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-04-15T16:53:51Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-04-15T19:28:29Z"}, "message": "Parse exclusive range pattern", "tree": {"sha": "014f8dfeda9fdef8ffde24d0f02de9aadea320bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/014f8dfeda9fdef8ffde24d0f02de9aadea320bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89a1439de3691dc1696d81701b6a09affb3328dd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmQ6+t0ACgkQ4laYqTBY\nYXHChw//fMnkRod14vu9oTTdamRM8gKpXHFAYEPHM+EXxsY/qU5Ptt1QOmkDSJfX\nZrHjrRCjNEKS8u3Mt6l275WXBbXQHpqJRgPI+rmrYg3fQBIHqehopHBzA3mmlBKB\n2iT1/qG0XL+Kavquq48HsnbRXiv2F1Aqa8dCzbMjeMjv4o1PhWuzKkdLJHqNjLnB\nbzZ1nGOl260eOKHHI+CeIUnOr9iohQF0tuvj+vplpxCXlz/QnOjJ18SiKK8UDwqs\npzRlUHgHCE381EntoNeLEgSjyMoxth0Kh8RwCKmmbr1PdcvJs1DPWHW+1m48CNLC\nr5E6IF2rKAFLX9Ga3o486SVJ2yVWuCvMGdCDb1CnyfDMnOHMNnk+C+0/DGdEmR4K\noyLDWCwJ0fd7/UgE6NpmybICul0hLjw0ARlVXgLmxcu8zIOxCy2HuYu4aHCBxIju\nPFysC4ao7FHVyMBtOKdHWU4sPaO7xDjBdq2z1njuWouFRkt9uOtOZbO4+7liOni2\nVMAoZJp31vP7k/I7LS2kEim4eNobk94osI+fG7/TR1wynuPo8MKr4/KOCTNjNXZN\n+1rCRldov60RvMNEe/pl7OMjf3J0RgVdZDfUqf/cjgkys8CkqByL3SnDFxDFeBXu\n+oaV2CAObOynKQQ3sC2KXjbGsv59DAGs0R4ZYUMJ/YBas8SB4xg=\n=aFrW\n-----END PGP SIGNATURE-----", "payload": "tree 014f8dfeda9fdef8ffde24d0f02de9aadea320bc\nparent b218009f46dd012abcd2d9c2656c3dc498075368\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1681577631 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1681586909 +0900\n\nParse exclusive range pattern\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89a1439de3691dc1696d81701b6a09affb3328dd", "html_url": "https://github.com/rust-lang/rust/commit/89a1439de3691dc1696d81701b6a09affb3328dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89a1439de3691dc1696d81701b6a09affb3328dd/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b218009f46dd012abcd2d9c2656c3dc498075368", "url": "https://api.github.com/repos/rust-lang/rust/commits/b218009f46dd012abcd2d9c2656c3dc498075368", "html_url": "https://github.com/rust-lang/rust/commit/b218009f46dd012abcd2d9c2656c3dc498075368"}], "stats": {"total": 154, "additions": 116, "deletions": 38}, "files": [{"sha": "e5cb9b95676d70bfce64f332aec58d7c2276bc02", "filename": "crates/hir-def/src/macro_expansion_tests/mbe/matching.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/89a1439de3691dc1696d81701b6a09affb3328dd/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fmatching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a1439de3691dc1696d81701b6a09affb3328dd/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fmatching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fmatching.rs?ref=89a1439de3691dc1696d81701b6a09affb3328dd", "patch": "@@ -106,7 +106,6 @@ stringify!(;\n \n #[test]\n fn range_patterns() {\n-    // FIXME: rustc thinks there are three patterns here, not one.\n     check(\n         r#\"\n macro_rules! m {\n@@ -118,7 +117,7 @@ m!(.. .. ..);\n macro_rules! m {\n     ($($p:pat)*) => (stringify!($($p |)*);)\n }\n-stringify!(.. .. .. |);\n+stringify!(.. | .. | .. |);\n \"#]],\n     );\n }"}, {"sha": "baa93aa083f507f5c9fea90eb780b4775e708292", "filename": "crates/parser/src/grammar/patterns.rs", "status": "modified", "additions": 50, "deletions": 34, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/89a1439de3691dc1696d81701b6a09affb3328dd/crates%2Fparser%2Fsrc%2Fgrammar%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a1439de3691dc1696d81701b6a09affb3328dd/crates%2Fparser%2Fsrc%2Fgrammar%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fpatterns.rs?ref=89a1439de3691dc1696d81701b6a09affb3328dd", "patch": "@@ -15,6 +15,10 @@ pub(super) const PATTERN_FIRST: TokenSet =\n \n const PAT_TOP_FIRST: TokenSet = PATTERN_FIRST.union(TokenSet::new(&[T![|]]));\n \n+/// Set of possible tokens at the start of a range pattern's end bound.\n+const RANGE_PAT_END_FIRST: TokenSet =\n+    expressions::LITERAL_FIRST.union(paths::PATH_FIRST).union(TokenSet::new(&[T![-]]));\n+\n pub(crate) fn pattern(p: &mut Parser<'_>) {\n     pattern_r(p, PAT_RECOVERY_SET);\n }\n@@ -105,6 +109,52 @@ fn pattern_single_r(p: &mut Parser<'_>, recovery_set: TokenSet) {\n         return;\n     }\n \n+    // test exclusive_range_pat\n+    // fn main() {\n+    //     match 42 {\n+    //         ..0 => {}\n+    //         1..2 => {}\n+    //     }\n+    // }\n+\n+    // test dot_dot_pat\n+    // fn main() {\n+    //     let .. = ();\n+    //     //\n+    //     // Tuples\n+    //     //\n+    //     let (a, ..) = ();\n+    //     let (a, ..,) = ();\n+    //     let Tuple(a, ..) = ();\n+    //     let Tuple(a, ..,) = ();\n+    //     let (.., ..) = ();\n+    //     let Tuple(.., ..) = ();\n+    //     let (.., a, ..) = ();\n+    //     let Tuple(.., a, ..) = ();\n+    //     //\n+    //     // Slices\n+    //     //\n+    //     let [..] = ();\n+    //     let [head, ..] = ();\n+    //     let [head, tail @ ..] = ();\n+    //     let [head, .., cons] = ();\n+    //     let [head, mid @ .., cons] = ();\n+    //     let [head, .., .., cons] = ();\n+    //     let [head, .., mid, tail @ ..] = ();\n+    //     let [head, .., mid, .., cons] = ();\n+    // }\n+    if p.at(T![..]) {\n+        let m = p.start();\n+        p.bump(T![..]);\n+        if p.at_ts(RANGE_PAT_END_FIRST) {\n+            atom_pat(p, recovery_set);\n+            m.complete(p, RANGE_PAT);\n+        } else {\n+            m.complete(p, REST_PAT);\n+        }\n+        return;\n+    }\n+\n     if let Some(lhs) = atom_pat(p, recovery_set) {\n         for range_op in [T![...], T![..=], T![..]] {\n             if p.at(range_op) {\n@@ -173,7 +223,6 @@ fn atom_pat(p: &mut Parser<'_>, recovery_set: TokenSet) -> Option<CompletedMarke\n         _ if paths::is_path_start(p) => path_or_macro_pat(p),\n         _ if is_literal_pat_start(p) => literal_pat(p),\n \n-        T![.] if p.at(T![..]) => rest_pat(p),\n         T![_] => wildcard_pat(p),\n         T![&] => ref_pat(p),\n         T!['('] => tuple_pat(p),\n@@ -334,39 +383,6 @@ fn wildcard_pat(p: &mut Parser<'_>) -> CompletedMarker {\n     m.complete(p, WILDCARD_PAT)\n }\n \n-// test dot_dot_pat\n-// fn main() {\n-//     let .. = ();\n-//     //\n-//     // Tuples\n-//     //\n-//     let (a, ..) = ();\n-//     let (a, ..,) = ();\n-//     let Tuple(a, ..) = ();\n-//     let Tuple(a, ..,) = ();\n-//     let (.., ..) = ();\n-//     let Tuple(.., ..) = ();\n-//     let (.., a, ..) = ();\n-//     let Tuple(.., a, ..) = ();\n-//     //\n-//     // Slices\n-//     //\n-//     let [..] = ();\n-//     let [head, ..] = ();\n-//     let [head, tail @ ..] = ();\n-//     let [head, .., cons] = ();\n-//     let [head, mid @ .., cons] = ();\n-//     let [head, .., .., cons] = ();\n-//     let [head, .., mid, tail @ ..] = ();\n-//     let [head, .., mid, .., cons] = ();\n-// }\n-fn rest_pat(p: &mut Parser<'_>) -> CompletedMarker {\n-    assert!(p.at(T![..]));\n-    let m = p.start();\n-    p.bump(T![..]);\n-    m.complete(p, REST_PAT)\n-}\n-\n // test ref_pat\n // fn main() {\n //     let &a = ();"}, {"sha": "11f9c34abdf1e67b8e94466dcf2e99c82662ac69", "filename": "crates/parser/src/tests/prefix_entries.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/89a1439de3691dc1696d81701b6a09affb3328dd/crates%2Fparser%2Fsrc%2Ftests%2Fprefix_entries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a1439de3691dc1696d81701b6a09affb3328dd/crates%2Fparser%2Fsrc%2Ftests%2Fprefix_entries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Ftests%2Fprefix_entries.rs?ref=89a1439de3691dc1696d81701b6a09affb3328dd", "patch": "@@ -33,8 +33,7 @@ fn stmt() {\n fn pat() {\n     check(PrefixEntryPoint::Pat, \"x y\", \"x\");\n     check(PrefixEntryPoint::Pat, \"fn f() {}\", \"fn\");\n-    // FIXME: This one is wrong, we should consume only one pattern.\n-    check(PrefixEntryPoint::Pat, \".. ..\", \".. ..\");\n+    check(PrefixEntryPoint::Pat, \".. ..\", \"..\");\n }\n \n #[test]"}, {"sha": "fd2c422d0d1915c889e336bae22983393da66917", "filename": "crates/parser/test_data/parser/inline/ok/0207_exclusive_range_pat.rast", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/89a1439de3691dc1696d81701b6a09affb3328dd/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0207_exclusive_range_pat.rast", "raw_url": "https://github.com/rust-lang/rust/raw/89a1439de3691dc1696d81701b6a09affb3328dd/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0207_exclusive_range_pat.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0207_exclusive_range_pat.rast?ref=89a1439de3691dc1696d81701b6a09affb3328dd", "patch": "@@ -0,0 +1,58 @@\n+SOURCE_FILE\n+  FN\n+    FN_KW \"fn\"\n+    WHITESPACE \" \"\n+    NAME\n+      IDENT \"main\"\n+    PARAM_LIST\n+      L_PAREN \"(\"\n+      R_PAREN \")\"\n+    WHITESPACE \" \"\n+    BLOCK_EXPR\n+      STMT_LIST\n+        L_CURLY \"{\"\n+        WHITESPACE \"\\n    \"\n+        MATCH_EXPR\n+          MATCH_KW \"match\"\n+          WHITESPACE \" \"\n+          LITERAL\n+            INT_NUMBER \"42\"\n+          WHITESPACE \" \"\n+          MATCH_ARM_LIST\n+            L_CURLY \"{\"\n+            WHITESPACE \"\\n        \"\n+            MATCH_ARM\n+              RANGE_PAT\n+                DOT2 \"..\"\n+                LITERAL_PAT\n+                  LITERAL\n+                    INT_NUMBER \"0\"\n+              WHITESPACE \" \"\n+              FAT_ARROW \"=>\"\n+              WHITESPACE \" \"\n+              BLOCK_EXPR\n+                STMT_LIST\n+                  L_CURLY \"{\"\n+                  R_CURLY \"}\"\n+            WHITESPACE \"\\n        \"\n+            MATCH_ARM\n+              RANGE_PAT\n+                LITERAL_PAT\n+                  LITERAL\n+                    INT_NUMBER \"1\"\n+                DOT2 \"..\"\n+                LITERAL_PAT\n+                  LITERAL\n+                    INT_NUMBER \"2\"\n+              WHITESPACE \" \"\n+              FAT_ARROW \"=>\"\n+              WHITESPACE \" \"\n+              BLOCK_EXPR\n+                STMT_LIST\n+                  L_CURLY \"{\"\n+                  R_CURLY \"}\"\n+            WHITESPACE \"\\n    \"\n+            R_CURLY \"}\"\n+        WHITESPACE \"\\n\"\n+        R_CURLY \"}\"\n+  WHITESPACE \"\\n\""}, {"sha": "e80505d8bd4ba4b242650c3e89c51f8914f3ad90", "filename": "crates/parser/test_data/parser/inline/ok/0207_exclusive_range_pat.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/89a1439de3691dc1696d81701b6a09affb3328dd/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0207_exclusive_range_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a1439de3691dc1696d81701b6a09affb3328dd/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0207_exclusive_range_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0207_exclusive_range_pat.rs?ref=89a1439de3691dc1696d81701b6a09affb3328dd", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    match 42 {\n+        ..0 => {}\n+        1..2 => {}\n+    }\n+}"}]}