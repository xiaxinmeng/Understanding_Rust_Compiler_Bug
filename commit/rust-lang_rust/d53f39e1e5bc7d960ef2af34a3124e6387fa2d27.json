{"sha": "d53f39e1e5bc7d960ef2af34a3124e6387fa2d27", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1M2YzOWUxZTViYzdkOTYwZWYyYWYzNGEzMTI0ZTYzODdmYTJkMjc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-10T03:49:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-10T03:49:38Z"}, "message": "Auto merge of #38217 - oli-obk:mir-for-all-and-all-for-mir, r=eddyb\n\nadd a -Z flag to guarantee that MIR is generated for all functions\n\nr? @eddyb\n\ncc @solson", "tree": {"sha": "72f9a43a7ba5a6cfe6b3d9c88bcd65532bfb7af1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72f9a43a7ba5a6cfe6b3d9c88bcd65532bfb7af1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d53f39e1e5bc7d960ef2af34a3124e6387fa2d27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d53f39e1e5bc7d960ef2af34a3124e6387fa2d27", "html_url": "https://github.com/rust-lang/rust/commit/d53f39e1e5bc7d960ef2af34a3124e6387fa2d27", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d53f39e1e5bc7d960ef2af34a3124e6387fa2d27/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebf2e7da5b7ec70c28bd5535829a13203585f854", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebf2e7da5b7ec70c28bd5535829a13203585f854", "html_url": "https://github.com/rust-lang/rust/commit/ebf2e7da5b7ec70c28bd5535829a13203585f854"}, {"sha": "d74d15345cab54860a6e8cf19021372665ce0577", "url": "https://api.github.com/repos/rust-lang/rust/commits/d74d15345cab54860a6e8cf19021372665ce0577", "html_url": "https://github.com/rust-lang/rust/commit/d74d15345cab54860a6e8cf19021372665ce0577"}], "stats": {"total": 65, "additions": 53, "deletions": 12}, "files": [{"sha": "f2be97c832370b2e5d5be2c0510d6ee9b9326dc2", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d53f39e1e5bc7d960ef2af34a3124e6387fa2d27/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d53f39e1e5bc7d960ef2af34a3124e6387fa2d27/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=d53f39e1e5bc7d960ef2af34a3124e6387fa2d27", "patch": "@@ -355,6 +355,11 @@ pub trait CrateStore<'tcx> {\n     fn get_item_mir<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId) -> Mir<'tcx>;\n     fn is_item_mir_available(&self, def: DefId) -> bool;\n \n+    /// Take a look if we need to inline or monomorphize this. If so, we\n+    /// will emit code for this item in the local crate, and thus\n+    /// create a translation item for it.\n+    fn can_have_local_instance<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId) -> bool;\n+\n     // This is basically a 1-based range of ints, which is a little\n     // silly - I may fix that.\n     fn crates(&self) -> Vec<CrateNum>;\n@@ -528,6 +533,9 @@ impl<'tcx> CrateStore<'tcx> for DummyCrateStore {\n     fn is_item_mir_available(&self, def: DefId) -> bool {\n         bug!(\"is_item_mir_available\")\n     }\n+    fn can_have_local_instance<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId) -> bool {\n+        bug!(\"can_have_local_instance\")\n+    }\n \n     // This is basically a 1-based range of ints, which is a little\n     // silly - I may fix that."}, {"sha": "17b572e7f9e432270e0046903927bcc48fcce3b2", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d53f39e1e5bc7d960ef2af34a3124e6387fa2d27/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d53f39e1e5bc7d960ef2af34a3124e6387fa2d27/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=d53f39e1e5bc7d960ef2af34a3124e6387fa2d27", "patch": "@@ -928,6 +928,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n           \"print some statistics about AST and HIR\"),\n     mir_stats: bool = (false, parse_bool, [UNTRACKED],\n           \"print some statistics about MIR\"),\n+    always_encode_mir: bool = (false, parse_bool, [TRACKED],\n+          \"encode MIR of all functions into the crate metadata\"),\n }\n \n pub fn default_lib_output() -> CrateType {"}, {"sha": "1a1bb1432eec1fc2b625178df786104cdda97ee0", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d53f39e1e5bc7d960ef2af34a3124e6387fa2d27/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d53f39e1e5bc7d960ef2af34a3124e6387fa2d27/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=d53f39e1e5bc7d960ef2af34a3124e6387fa2d27", "patch": "@@ -527,6 +527,11 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n         self.get_crate_data(def.krate).is_item_mir_available(def.index)\n     }\n \n+    fn can_have_local_instance<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId) -> bool {\n+        self.dep_graph.read(DepNode::MetaData(def));\n+        def.is_local() || self.get_crate_data(def.krate).can_have_local_instance(tcx, def.index)\n+    }\n+\n     fn crates(&self) -> Vec<CrateNum>\n     {\n         let mut result = vec![];"}, {"sha": "54c195b1881622a2038e9d4563078934806ae133", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 32, "deletions": 6, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d53f39e1e5bc7d960ef2af34a3124e6387fa2d27/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d53f39e1e5bc7d960ef2af34a3124e6387fa2d27/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=d53f39e1e5bc7d960ef2af34a3124e6387fa2d27", "patch": "@@ -504,6 +504,14 @@ impl<'tcx> EntryKind<'tcx> {\n             EntryKind::Closure(_) => return None,\n         })\n     }\n+    fn is_const_fn(&self, meta: &CrateMetadata) -> bool {\n+        let constness = match *self {\n+            EntryKind::Method(data) => data.decode(meta).fn_data.constness,\n+            EntryKind::Fn(data) => data.decode(meta).constness,\n+            _ => hir::Constness::NotConst,\n+        };\n+        constness == hir::Constness::Const\n+    }\n }\n \n impl<'a, 'tcx> CrateMetadata {\n@@ -839,6 +847,29 @@ impl<'a, 'tcx> CrateMetadata {\n         self.maybe_entry(id).and_then(|item| item.decode(self).mir).is_some()\n     }\n \n+    pub fn can_have_local_instance(&self,\n+                                   tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                   id: DefIndex) -> bool {\n+        self.maybe_entry(id).map_or(false, |item| {\n+            let item = item.decode(self);\n+            // if we don't have a MIR, then this item was never meant to be locally instantiated\n+            // or we have a bug in the metadata serialization\n+            item.mir.is_some() && (\n+                // items with generics always can have local instances if monomorphized\n+                item.generics.map_or(false, |generics| {\n+                    let generics = generics.decode((self, tcx));\n+                    generics.parent_types != 0 || !generics.types.is_empty()\n+                }) ||\n+                match item.kind {\n+                    EntryKind::Closure(_) => true,\n+                    _ => false,\n+                } ||\n+                item.kind.is_const_fn(self) ||\n+                attr::requests_inline(&self.get_attributes(&item))\n+            )\n+        })\n+    }\n+\n     pub fn maybe_get_item_mir(&self,\n                               tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                               id: DefIndex)\n@@ -1051,12 +1082,7 @@ impl<'a, 'tcx> CrateMetadata {\n     }\n \n     pub fn is_const_fn(&self, id: DefIndex) -> bool {\n-        let constness = match self.entry(id).kind {\n-            EntryKind::Method(data) => data.decode(self).fn_data.constness,\n-            EntryKind::Fn(data) => data.decode(self).constness,\n-            _ => hir::Constness::NotConst,\n-        };\n-        constness == hir::Constness::Const\n+        self.entry(id).kind.is_const_fn(self)\n     }\n \n     pub fn is_foreign_item(&self, id: DefIndex) -> bool {"}, {"sha": "443f3fbaa6e41df93d4ef12f7e03da34fb208621", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d53f39e1e5bc7d960ef2af34a3124e6387fa2d27/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d53f39e1e5bc7d960ef2af34a3124e6387fa2d27/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=d53f39e1e5bc7d960ef2af34a3124e6387fa2d27", "patch": "@@ -577,7 +577,8 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             let types = generics.parent_types as usize + generics.types.len();\n             let needs_inline = types > 0 || attr::requests_inline(&ast_item.attrs);\n             let is_const_fn = sig.constness == hir::Constness::Const;\n-            (is_const_fn, needs_inline || is_const_fn)\n+            let always_encode_mir = self.tcx.sess.opts.debugging_opts.always_encode_mir;\n+            (is_const_fn, needs_inline || is_const_fn || always_encode_mir)\n         } else {\n             (false, false)\n         };\n@@ -838,11 +839,13 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 _ => None,\n             },\n             mir: match item.node {\n+                hir::ItemStatic(..) |\n                 hir::ItemConst(..) => self.encode_mir(def_id),\n                 hir::ItemFn(_, _, constness, _, ref generics, _) => {\n                     let tps_len = generics.ty_params.len();\n                     let needs_inline = tps_len > 0 || attr::requests_inline(&item.attrs);\n-                    if needs_inline || constness == hir::Constness::Const {\n+                    let always_encode_mir = self.tcx.sess.opts.debugging_opts.always_encode_mir;\n+                    if needs_inline || constness == hir::Constness::Const || always_encode_mir {\n                         self.encode_mir(def_id)\n                     } else {\n                         None"}, {"sha": "3af3ada66b3e9c2ba3c8709f4c4438ae3de58f35", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d53f39e1e5bc7d960ef2af34a3124e6387fa2d27/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d53f39e1e5bc7d960ef2af34a3124e6387fa2d27/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=d53f39e1e5bc7d960ef2af34a3124e6387fa2d27", "patch": "@@ -706,10 +706,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n fn can_have_local_instance<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                      def_id: DefId)\n                                      -> bool {\n-    // Take a look if we have the definition available. If not, we\n-    // will not emit code for this item in the local crate, and thus\n-    // don't create a translation item for it.\n-    def_id.is_local() || tcx.sess.cstore.is_item_mir_available(def_id)\n+    tcx.sess.cstore.can_have_local_instance(tcx, def_id)\n }\n \n fn find_drop_glue_neighbors<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,"}]}