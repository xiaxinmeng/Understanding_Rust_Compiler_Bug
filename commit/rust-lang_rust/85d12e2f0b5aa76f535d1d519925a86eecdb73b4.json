{"sha": "85d12e2f0b5aa76f535d1d519925a86eecdb73b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1ZDEyZTJmMGI1YWE3NmY1MzVkMWQ1MTk5MjVhODZlZWNkYjczYjQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-19T16:44:38Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-26T13:38:26Z"}, "message": "remove handling of verify from taintset\n\nThis lets us remove `for_each_region` and makes things simpler.", "tree": {"sha": "a5527c1455b45565ff69f6a8dc2c3f65120ea6f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5527c1455b45565ff69f6a8dc2c3f65120ea6f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85d12e2f0b5aa76f535d1d519925a86eecdb73b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85d12e2f0b5aa76f535d1d519925a86eecdb73b4", "html_url": "https://github.com/rust-lang/rust/commit/85d12e2f0b5aa76f535d1d519925a86eecdb73b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85d12e2f0b5aa76f535d1d519925a86eecdb73b4/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5469c5fd75cec185dc2c79a4986decaa1f9be40", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5469c5fd75cec185dc2c79a4986decaa1f9be40", "html_url": "https://github.com/rust-lang/rust/commit/b5469c5fd75cec185dc2c79a4986decaa1f9be40"}], "stats": {"total": 62, "additions": 25, "deletions": 37}, "files": [{"sha": "0297340e402fcc52da13d51c00ca47fbc62497b3", "filename": "src/librustc/infer/region_constraints/mod.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/85d12e2f0b5aa76f535d1d519925a86eecdb73b4/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85d12e2f0b5aa76f535d1d519925a86eecdb73b4/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=85d12e2f0b5aa76f535d1d519925a86eecdb73b4", "patch": "@@ -882,18 +882,6 @@ impl<'a, 'gcx, 'tcx> GenericKind<'tcx> {\n }\n \n impl<'a, 'gcx, 'tcx> VerifyBound<'tcx> {\n-    fn for_each_region(&self, f: &mut dyn FnMut(ty::Region<'tcx>)) {\n-        match self {\n-            &VerifyBound::AnyRegion(ref rs) | &VerifyBound::AllRegions(ref rs) => for &r in rs {\n-                f(r);\n-            },\n-\n-            &VerifyBound::AnyBound(ref bs) | &VerifyBound::AllBounds(ref bs) => for b in bs {\n-                b.for_each_region(f);\n-            },\n-        }\n-    }\n-\n     pub fn must_hold(&self) -> bool {\n         match self {\n             &VerifyBound::AnyRegion(ref bs) => bs.contains(&&ty::ReStatic),"}, {"sha": "4f513cd5d484d99ec1fd6f222f86996754c2fea8", "filename": "src/librustc/infer/region_constraints/taint.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/85d12e2f0b5aa76f535d1d519925a86eecdb73b4/src%2Flibrustc%2Finfer%2Fregion_constraints%2Ftaint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85d12e2f0b5aa76f535d1d519925a86eecdb73b4/src%2Flibrustc%2Finfer%2Fregion_constraints%2Ftaint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_constraints%2Ftaint.rs?ref=85d12e2f0b5aa76f535d1d519925a86eecdb73b4", "patch": "@@ -13,34 +13,39 @@ use super::*;\n #[derive(Debug)]\n pub(super) struct TaintSet<'tcx> {\n     directions: TaintDirections,\n-    regions: FxHashSet<ty::Region<'tcx>>\n+    regions: FxHashSet<ty::Region<'tcx>>,\n }\n \n impl<'tcx> TaintSet<'tcx> {\n-    pub(super) fn new(directions: TaintDirections,\n-                      initial_region: ty::Region<'tcx>)\n-                      -> Self {\n+    pub(super) fn new(directions: TaintDirections, initial_region: ty::Region<'tcx>) -> Self {\n         let mut regions = FxHashSet();\n         regions.insert(initial_region);\n-        TaintSet { directions: directions, regions: regions }\n+        TaintSet {\n+            directions: directions,\n+            regions: regions,\n+        }\n     }\n \n-    pub(super) fn fixed_point(&mut self,\n-                              tcx: TyCtxt<'_, '_, 'tcx>,\n-                              undo_log: &[UndoLogEntry<'tcx>],\n-                              verifys: &[Verify<'tcx>]) {\n+    pub(super) fn fixed_point(\n+        &mut self,\n+        tcx: TyCtxt<'_, '_, 'tcx>,\n+        undo_log: &[UndoLogEntry<'tcx>],\n+        verifys: &[Verify<'tcx>],\n+    ) {\n         let mut prev_len = 0;\n         while prev_len < self.len() {\n-            debug!(\"tainted: prev_len = {:?} new_len = {:?}\",\n-                   prev_len, self.len());\n+            debug!(\n+                \"tainted: prev_len = {:?} new_len = {:?}\",\n+                prev_len,\n+                self.len()\n+            );\n \n             prev_len = self.len();\n \n             for undo_entry in undo_log {\n                 match undo_entry {\n                     &AddConstraint(Constraint::VarSubVar(a, b)) => {\n-                        self.add_edge(tcx.mk_region(ReVar(a)),\n-                                      tcx.mk_region(ReVar(b)));\n+                        self.add_edge(tcx.mk_region(ReVar(a)), tcx.mk_region(ReVar(b)));\n                     }\n                     &AddConstraint(Constraint::RegSubVar(a, b)) => {\n                         self.add_edge(a, tcx.mk_region(ReVar(b)));\n@@ -55,15 +60,13 @@ impl<'tcx> TaintSet<'tcx> {\n                         self.add_edge(a, tcx.mk_region(ReVar(b)));\n                     }\n                     &AddVerify(i) => {\n-                        verifys[i].bound.for_each_region(&mut |b| {\n-                            self.add_edge(verifys[i].region, b);\n-                        });\n+                        span_bug!(\n+                            verifys[i].origin.span(),\n+                            \"we never add verifications while doing higher-ranked things\",\n+                        )\n                     }\n-                    &Purged |\n-                    &AddCombination(..) |\n-                    &AddVar(..) |\n-                    &OpenSnapshot |\n-                    &CommitedSnapshot => {}\n+                    &Purged | &AddCombination(..) | &AddVar(..) | &OpenSnapshot\n+                    | &CommitedSnapshot => {}\n                 }\n             }\n         }\n@@ -77,9 +80,7 @@ impl<'tcx> TaintSet<'tcx> {\n         self.regions.len()\n     }\n \n-    fn add_edge(&mut self,\n-                source: ty::Region<'tcx>,\n-                target: ty::Region<'tcx>) {\n+    fn add_edge(&mut self, source: ty::Region<'tcx>, target: ty::Region<'tcx>) {\n         if self.directions.incoming {\n             if self.regions.contains(&target) {\n                 self.regions.insert(source);\n@@ -93,4 +94,3 @@ impl<'tcx> TaintSet<'tcx> {\n         }\n     }\n }\n-"}]}