{"sha": "f9b54541ee2bbab1d81b14252f4d4172e10fd748", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5YjU0NTQxZWUyYmJhYjFkODFiMTQyNTJmNGQ0MTcyZTEwZmQ3NDg=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-06-07T01:54:14Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-06-28T14:44:15Z"}, "message": "librustc: Disallow \"mut\" from distributing over bindings.\n\nThis is the backwards-incompatible part of per-binding-site \"mut\".", "tree": {"sha": "05d98a9a5d6bb84f8c48fc646d898ec6ec6eb8d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05d98a9a5d6bb84f8c48fc646d898ec6ec6eb8d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9b54541ee2bbab1d81b14252f4d4172e10fd748", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9b54541ee2bbab1d81b14252f4d4172e10fd748", "html_url": "https://github.com/rust-lang/rust/commit/f9b54541ee2bbab1d81b14252f4d4172e10fd748", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9b54541ee2bbab1d81b14252f4d4172e10fd748/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c0aa7848103b5018473df851bc115d3e5585185", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c0aa7848103b5018473df851bc115d3e5585185", "html_url": "https://github.com/rust-lang/rust/commit/1c0aa7848103b5018473df851bc115d3e5585185"}], "stats": {"total": 240, "additions": 190, "deletions": 50}, "files": [{"sha": "cc53d7d17a25a5019b7f9fe01922bbe38a48e3e5", "filename": "doc/rust.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f9b54541ee2bbab1d81b14252f4d4172e10fd748/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/f9b54541ee2bbab1d81b14252f4d4172e10fd748/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=f9b54541ee2bbab1d81b14252f4d4172e10fd748", "patch": "@@ -2862,13 +2862,13 @@ call to the method `make_string`.\n Types in Rust are categorized into kinds, based on various properties of the components of the type.\n The kinds are:\n \n-`Const`\n+`Freeze`\n   : Types of this kind are deeply immutable;\n     they contain no mutable memory locations directly or indirectly via pointers.\n-`Owned`\n+`Send`\n   : Types of this kind can be safely sent between tasks.\n     This kind includes scalars, owning pointers, owned closures, and\n-    structural types containing only other owned types. All `Owned` types are `Static`.\n+    structural types containing only other owned types. All `Send` types are `Static`.\n `Static`\n   : Types of this kind do not contain any borrowed pointers;\n     this can be a useful guarantee for code that breaks borrowing assumptions using [`unsafe` operations](#unsafe-functions).\n@@ -2882,7 +2882,7 @@ The kinds are:\n     trait provides a single method `finalize` that takes no parameters, and is run\n     when values of the type are dropped. Such a method is called a \"destructor\",\n     and are always executed in \"top-down\" order: a value is completely destroyed\n-    before any of the values it owns run their destructors. Only `Owned` types\n+    before any of the values it owns run their destructors. Only `Send` types\n     that do not implement `Copy` can implement `Drop`.\n \n > **Note:** The `finalize` method may be renamed in future versions of Rust.\n@@ -2968,10 +2968,10 @@ frame they are allocated within.\n A task owns all memory it can *safely* reach through local variables,\n as well as managed, owning and borrowed pointers.\n \n-When a task sends a value that has the `Owned` trait to another task,\n+When a task sends a value that has the `Send` trait to another task,\n it loses ownership of the value sent and can no longer refer to it.\n This is statically guaranteed by the combined use of \"move semantics\",\n-and the compiler-checked _meaning_ of the `Owned` trait:\n+and the compiler-checked _meaning_ of the `Send` trait:\n it is only instantiated for (transitively) sendable kinds of data constructor and pointers,\n never including managed or borrowed pointers.\n \n@@ -3116,7 +3116,7 @@ These include:\n   - read-only and read-write shared variables with various safe mutual exclusion patterns\n   - simple locks and semaphores\n \n-When such facilities carry values, the values are restricted to the [`Owned` type-kind](#type-kinds).\n+When such facilities carry values, the values are restricted to the [`Send` type-kind](#type-kinds).\n Restricting communication interfaces to this kind ensures that no borrowed or managed pointers move between tasks.\n Thus access to an entire data structure can be mediated through its owning \"root\" value;\n no further locking or copying is required to avoid data races within the substructure of such a value."}, {"sha": "047b57e56a61aa950e1e93228a217c72a9608c6d", "filename": "doc/tutorial-ffi.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9b54541ee2bbab1d81b14252f4d4172e10fd748/doc%2Ftutorial-ffi.md", "raw_url": "https://github.com/rust-lang/rust/raw/f9b54541ee2bbab1d81b14252f4d4172e10fd748/doc%2Ftutorial-ffi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-ffi.md?ref=f9b54541ee2bbab1d81b14252f4d4172e10fd748", "patch": "@@ -159,7 +159,7 @@ pub struct Unique<T> {\n     priv ptr: *mut T\n }\n \n-impl<T: Owned> Unique<T> {\n+impl<T: Send> Unique<T> {\n     pub fn new(value: T) -> Unique<T> {\n         unsafe {\n             let ptr = malloc(std::sys::size_of::<T>() as size_t) as *mut T;\n@@ -182,7 +182,7 @@ impl<T: Owned> Unique<T> {\n }\n \n #[unsafe_destructor]\n-impl<T: Owned> Drop for Unique<T> {\n+impl<T: Send> Drop for Unique<T> {\n     fn drop(&self) {\n         unsafe {\n             let x = intrinsics::init(); // dummy value to swap in"}, {"sha": "2534fedd9611fb099243dcd02e90f39466f4199b", "filename": "src/libextra/md4.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f9b54541ee2bbab1d81b14252f4d4172e10fd748/src%2Flibextra%2Fmd4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b54541ee2bbab1d81b14252f4d4172e10fd748/src%2Flibextra%2Fmd4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fmd4.rs?ref=f9b54541ee2bbab1d81b14252f4d4172e10fd748", "patch": "@@ -59,7 +59,8 @@ pub fn md4(msg: &[u8]) -> Quad {\n     while i < e {\n         let (aa, bb, cc, dd) = (a, b, c, d);\n \n-        let mut (j, base) = (0u, i);\n+        let mut j = 0u;\n+        let mut base = i;\n         while j < 16u {\n             x[j] = (msg[base] as u32) + (msg[base + 1u] as u32 << 8u32) +\n                 (msg[base + 2u] as u32 << 16u32) +"}, {"sha": "f9eaa2bf02ddff8534a28513fe83a0af9e87837e", "filename": "src/libextra/net_url.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9b54541ee2bbab1d81b14252f4d4172e10fd748/src%2Flibextra%2Fnet_url.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b54541ee2bbab1d81b14252f4d4172e10fd748/src%2Flibextra%2Fnet_url.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnet_url.rs?ref=f9b54541ee2bbab1d81b14252f4d4172e10fd748", "patch": "@@ -415,7 +415,9 @@ fn get_authority(rawurl: &str) ->\n     let mut port = None;\n \n     let mut colon_count = 0;\n-    let mut (pos, begin, end) = (0, 2, len);\n+    let mut pos = 0;\n+    let mut begin = 2;\n+    let mut end = len;\n \n     for rawurl.iter().enumerate().advance |(i,c)| {\n         if i < 2 { loop; } // ignore the leading //"}, {"sha": "c2702ac70b133c9c5236c823cb71a9a059251632", "filename": "src/libextra/num/bigint.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f9b54541ee2bbab1d81b14252f4d4172e10fd748/src%2Flibextra%2Fnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b54541ee2bbab1d81b14252f4d4172e10fd748/src%2Flibextra%2Fnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Fbigint.rs?ref=f9b54541ee2bbab1d81b14252f4d4172e10fd748", "patch": "@@ -380,7 +380,10 @@ impl Integer for BigUint {\n             let mut d = Zero::zero::<BigUint>();\n             let mut n = 1;\n             while m >= b {\n-                let mut (d0, d_unit, b_unit) = div_estimate(&m, &b, n);\n+                let (d0, d_unit, b_unit) = div_estimate(&m, &b, n);\n+                let mut d0 = d0;\n+                let mut d_unit = d_unit;\n+                let mut b_unit = b_unit;\n                 let mut prod = b * d0;\n                 while prod > m {\n                     // FIXME(#6050): overloaded operators force moves with generic types\n@@ -442,7 +445,8 @@ impl Integer for BigUint {\n \n     fn gcd(&self, other: &BigUint) -> BigUint {\n         // Use Euclid's algorithm\n-        let mut (m, n) = (copy *self, copy *other);\n+        let mut m = copy *self;\n+        let mut n = copy *other;\n         while !m.is_zero() {\n             let temp = m;\n             m = n % temp;"}, {"sha": "79451db8b17159652185e1cec1cd37a127661635", "filename": "src/libextra/timer.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9b54541ee2bbab1d81b14252f4d4172e10fd748/src%2Flibextra%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b54541ee2bbab1d81b14252f4d4172e10fd748/src%2Flibextra%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftimer.rs?ref=f9b54541ee2bbab1d81b14252f4d4172e10fd748", "patch": "@@ -123,7 +123,9 @@ pub fn recv_timeout<T:Copy + Send>(iotask: &IoTask,\n                                    msecs: uint,\n                                    wait_po: &Port<T>)\n                                    -> Option<T> {\n-    let mut (timeout_po, timeout_ch) = stream::<()>();\n+    let (timeout_po, timeout_ch) = stream::<()>();\n+    let mut timeout_po = timeout_po;\n+    let mut timeout_ch = timeout_ch;\n     delayed_send(iotask, msecs, &timeout_ch, ());\n \n     // XXX: Workaround due to ports and channels not being &mut. They should"}, {"sha": "45fdda1990cc8ff51b1bb6fa43521d9f49d8e87f", "filename": "src/librustc/middle/trans/cabi_arm.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9b54541ee2bbab1d81b14252f4d4172e10fd748/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b54541ee2bbab1d81b14252f4d4172e10fd748/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_arm.rs?ref=f9b54541ee2bbab1d81b14252f4d4172e10fd748", "patch": "@@ -139,12 +139,14 @@ impl ABIInfo for ARM_ABIInfo {\n             attrs.push(attr);\n         }\n \n-        let mut (ret_ty, ret_attr) = if ret_def {\n+        let (ret_ty, ret_attr) = if ret_def {\n             classify_ret_ty(rty)\n         } else {\n             (LLVMType { cast: false, ty: Type::void() }, None)\n         };\n \n+        let mut ret_ty = ret_ty;\n+\n         let sret = ret_attr.is_some();\n         if sret {\n             arg_tys.unshift(ret_ty);"}, {"sha": "47f2fb8634c16cc3955053d6dbf4ed84b5d033f9", "filename": "src/librustc/middle/trans/cabi_mips.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9b54541ee2bbab1d81b14252f4d4172e10fd748/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_mips.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b54541ee2bbab1d81b14252f4d4172e10fd748/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_mips.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_mips.rs?ref=f9b54541ee2bbab1d81b14252f4d4172e10fd748", "patch": "@@ -178,12 +178,14 @@ impl ABIInfo for MIPS_ABIInfo {\n                     atys: &[Type],\n                     rty: Type,\n                     ret_def: bool) -> FnType {\n-        let mut (ret_ty, ret_attr) = if ret_def {\n+        let (ret_ty, ret_attr) = if ret_def {\n             classify_ret_ty(rty)\n         } else {\n             (LLVMType { cast: false, ty: Type::void() }, None)\n         };\n \n+        let mut ret_ty = ret_ty;\n+\n         let sret = ret_attr.is_some();\n         let mut arg_tys = ~[];\n         let mut attrs = ~[];"}, {"sha": "755075c17e9c17084742864cfe1e717f315c6616", "filename": "src/librustc/middle/trans/cabi_x86_64.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f9b54541ee2bbab1d81b14252f4d4172e10fd748/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b54541ee2bbab1d81b14252f4d4172e10fd748/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs?ref=f9b54541ee2bbab1d81b14252f4d4172e10fd748", "patch": "@@ -360,8 +360,9 @@ fn x86_64_tys(atys: &[Type],\n         arg_tys.push(ty);\n         attrs.push(attr);\n     }\n-    let mut (ret_ty, ret_attr) = x86_64_ty(rty, |cls| cls.is_ret_bysret(),\n+    let (ret_ty, ret_attr) = x86_64_ty(rty, |cls| cls.is_ret_bysret(),\n                                        StructRetAttribute);\n+    let mut ret_ty = ret_ty;\n     let sret = ret_attr.is_some();\n     if sret {\n         arg_tys = vec::append(~[ret_ty], arg_tys);"}, {"sha": "045c8ec01aa1d111f3b4494f345e7b495b647faf", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f9b54541ee2bbab1d81b14252f4d4172e10fd748/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b54541ee2bbab1d81b14252f4d4172e10fd748/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=f9b54541ee2bbab1d81b14252f4d4172e10fd748", "patch": "@@ -319,9 +319,10 @@ pub fn trans_fn_ref_with_vtables(\n         // Should be either intra-crate or inlined.\n         assert_eq!(def_id.crate, ast::local_crate);\n \n-        let mut (val, must_cast) =\n+        let (val, must_cast) =\n             monomorphize::monomorphic_fn(ccx, def_id, &substs,\n                                          vtables, opt_impl_did, Some(ref_id));\n+        let mut val = val;\n         if must_cast && ref_id != 0 {\n             // Monotype of the REFERENCE to the function (type params\n             // are subst'd)"}, {"sha": "35322730756026562e4442e545b38d6bd878e557", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f9b54541ee2bbab1d81b14252f4d4172e10fd748/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b54541ee2bbab1d81b14252f4d4172e10fd748/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=f9b54541ee2bbab1d81b14252f4d4172e10fd748", "patch": "@@ -907,9 +907,12 @@ fn trans_lvalue_unadjusted(bcx: block, expr: @ast::expr) -> DatumBlock {\n         let scaled_ix = Mul(bcx, ix_val, vt.llunit_size);\n         base::maybe_name_value(bcx.ccx(), scaled_ix, \"scaled_ix\");\n \n-        let mut (bcx, base, len) =\n+        let (bcx, base, len) =\n             base_datum.get_vec_base_and_len(bcx, index_expr.span,\n                                             index_expr.id, 0);\n+        let mut bcx = bcx;\n+        let mut base = base;\n+        let mut len = len;\n \n         if ty::type_is_str(base_ty) {\n             // acccount for null terminator in the case of string"}, {"sha": "59ac58a514f3d4a107d96658cf5babe57ad233f3", "filename": "src/libstd/io.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f9b54541ee2bbab1d81b14252f4d4172e10fd748/src%2Flibstd%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b54541ee2bbab1d81b14252f4d4172e10fd748/src%2Flibstd%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio.rs?ref=f9b54541ee2bbab1d81b14252f4d4172e10fd748", "patch": "@@ -771,7 +771,9 @@ impl<T:Reader> ReaderUtil for T {\n     fn read_le_uint_n(&self, nbytes: uint) -> u64 {\n         assert!(nbytes > 0 && nbytes <= 8);\n \n-        let mut (val, pos, i) = (0u64, 0, nbytes);\n+        let mut val = 0u64;\n+        let mut pos = 0;\n+        let mut i = nbytes;\n         while i > 0 {\n             val += (self.read_u8() as u64) << pos;\n             pos += 8;\n@@ -787,7 +789,8 @@ impl<T:Reader> ReaderUtil for T {\n     fn read_be_uint_n(&self, nbytes: uint) -> u64 {\n         assert!(nbytes > 0 && nbytes <= 8);\n \n-        let mut (val, i) = (0u64, nbytes);\n+        let mut val = 0u64;\n+        let mut i = nbytes;\n         while i > 0 {\n             i -= 1;\n             val += (self.read_u8() as u64) << i * 8;"}, {"sha": "845152f85525183753ffc53ebbedb351aa9b313b", "filename": "src/libstd/num/int_macros.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f9b54541ee2bbab1d81b14252f4d4172e10fd748/src%2Flibstd%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b54541ee2bbab1d81b14252f4d4172e10fd748/src%2Flibstd%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fint_macros.rs?ref=f9b54541ee2bbab1d81b14252f4d4172e10fd748", "patch": "@@ -400,7 +400,8 @@ impl Integer for $T {\n     #[inline]\n     fn gcd(&self, other: &$T) -> $T {\n         // Use Euclid's algorithm\n-        let mut (m, n) = (*self, *other);\n+        let mut m = *self;\n+        let mut n = *other;\n         while m != 0 {\n             let temp = m;\n             m = n % temp;"}, {"sha": "0dabe7fafa834e67fffb48b9bc77f6e892c8833c", "filename": "src/libstd/num/uint_macros.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f9b54541ee2bbab1d81b14252f4d4172e10fd748/src%2Flibstd%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b54541ee2bbab1d81b14252f4d4172e10fd748/src%2Flibstd%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint_macros.rs?ref=f9b54541ee2bbab1d81b14252f4d4172e10fd748", "patch": "@@ -237,7 +237,8 @@ impl Integer for $T {\n     #[inline]\n     fn gcd(&self, other: &$T) -> $T {\n         // Use Euclid's algorithm\n-        let mut (m, n) = (*self, *other);\n+        let mut m = *self;\n+        let mut n = *other;\n         while m != 0 {\n             let temp = m;\n             m = n % temp;"}, {"sha": "8a6c05ce6e2ae66fb4e6b71f10bffe4c178ae9c1", "filename": "src/libstd/rand.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f9b54541ee2bbab1d81b14252f4d4172e10fd748/src%2Flibstd%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b54541ee2bbab1d81b14252f4d4172e10fd748/src%2Flibstd%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand.rs?ref=f9b54541ee2bbab1d81b14252f4d4172e10fd748", "patch": "@@ -720,7 +720,8 @@ impl IsaacRng {\n     fn isaac(&mut self) {\n         self.c += 1;\n         // abbreviations\n-        let mut (a, b) = (self.a, self.b + self.c);\n+        let mut a = self.a;\n+        let mut b = self.b + self.c;\n \n         static midpoint: uint = RAND_SIZE as uint / 2;\n "}, {"sha": "e8dad2fc5e862202bf92a2f03f17b0d3f5c8c682", "filename": "src/libstd/rand/distributions.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f9b54541ee2bbab1d81b14252f4d4172e10fd748/src%2Flibstd%2Frand%2Fdistributions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b54541ee2bbab1d81b14252f4d4172e10fd748/src%2Flibstd%2Frand%2Fdistributions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fdistributions.rs?ref=f9b54541ee2bbab1d81b14252f4d4172e10fd748", "patch": "@@ -89,7 +89,8 @@ impl Rand for StandardNormal {\n             // do-while, so the condition should be true on the first\n             // run, they get overwritten anyway (0 < 1, so these are\n             // good).\n-            let mut (x, y) = (1.0, 0.0);\n+            let mut x = 1.0;\n+            let mut y = 0.0;\n \n             // XXX infinities?\n             while -2.0*y < x * x {"}, {"sha": "c6654e9dabed0b72a35b1fdd71f3166f7164e2ad", "filename": "src/libstd/rt/io/extensions.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f9b54541ee2bbab1d81b14252f4d4172e10fd748/src%2Flibstd%2Frt%2Fio%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b54541ee2bbab1d81b14252f4d4172e10fd748/src%2Flibstd%2Frt%2Fio%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fextensions.rs?ref=f9b54541ee2bbab1d81b14252f4d4172e10fd748", "patch": "@@ -343,7 +343,9 @@ impl<T: Reader> ReaderByteConversions for T {\n     fn read_le_uint_n(&mut self, nbytes: uint) -> u64 {\n         assert!(nbytes > 0 && nbytes <= 8);\n \n-        let mut (val, pos, i) = (0u64, 0, nbytes);\n+        let mut val = 0u64;\n+        let mut pos = 0;\n+        let mut i = nbytes;\n         while i > 0 {\n             val += (self.read_u8() as u64) << pos;\n             pos += 8;\n@@ -359,7 +361,8 @@ impl<T: Reader> ReaderByteConversions for T {\n     fn read_be_uint_n(&mut self, nbytes: uint) -> u64 {\n         assert!(nbytes > 0 && nbytes <= 8);\n \n-        let mut (val, i) = (0u64, nbytes);\n+        let mut val = 0u64;\n+        let mut i = nbytes;\n         while i > 0 {\n             i -= 1;\n             val += (self.read_u8() as u64) << i * 8;"}, {"sha": "78538d099386ff8db615e0a2a79fc82f4fc1065e", "filename": "src/libstd/str.rs", "status": "modified", "additions": 69, "deletions": 1, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/f9b54541ee2bbab1d81b14252f4d4172e10fd748/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b54541ee2bbab1d81b14252f4d4172e10fd748/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=f9b54541ee2bbab1d81b14252f4d4172e10fd748", "patch": "@@ -473,6 +473,31 @@ pub fn each_split_within<'a>(ss: &'a str,\n     return cont;\n }\n \n+/**\n+ * Replace all occurrences of one string with another\n+ *\n+ * # Arguments\n+ *\n+ * * s - The string containing substrings to replace\n+ * * from - The string to replace\n+ * * to - The replacement string\n+ *\n+ * # Return value\n+ *\n+ * The original string with all occurances of `from` replaced with `to`\n+ */\n+pub fn replace(s: &str, from: &str, to: &str) -> ~str {\n+    let mut result = ~\"\";\n+    let mut last_end = 0;\n+    for s.matches_index_iter(from).advance |(start, end)| {\n+        result.push_str(unsafe{raw::slice_bytes(s, last_end, start)});\n+        result.push_str(to);\n+        last_end = end;\n+    }\n+    result.push_str(unsafe{raw::slice_bytes(s, last_end, s.len())});\n+    result\n+}\n+\n /*\n Section: Comparing strings\n */\n@@ -631,6 +656,48 @@ pub fn with_capacity(capacity: uint) -> ~str {\n     buf\n }\n \n+/**\n+ * As char_len but for a slice of a string\n+ *\n+ * # Arguments\n+ *\n+ * * s - A valid string\n+ * * start - The position inside `s` where to start counting in bytes\n+ * * end - The position where to stop counting\n+ *\n+ * # Return value\n+ *\n+ * The number of Unicode characters in `s` between the given indices.\n+ */\n+pub fn count_chars(s: &str, start: uint, end: uint) -> uint {\n+    assert!(s.is_char_boundary(start));\n+    assert!(s.is_char_boundary(end));\n+    let mut i = start;\n+    let mut len = 0u;\n+    while i < end {\n+        let next = s.char_range_at(i).next;\n+        len += 1u;\n+        i = next;\n+    }\n+    return len;\n+}\n+\n+/// Counts the number of bytes taken by the first `n` chars in `s`\n+/// starting from `start`.\n+pub fn count_bytes<'b>(s: &'b str, start: uint, n: uint) -> uint {\n+    assert!(is_char_boundary(s, start));\n+    let mut end = start;\n+    let mut cnt = n;\n+    let l = s.len();\n+    while cnt > 0u {\n+        assert!(end < l);\n+        let next = s.char_range_at(end).next;\n+        cnt -= 1u;\n+        end = next;\n+    }\n+    end - start\n+}\n+\n /// Given a first byte, determine how many bytes are in this UTF-8 character\n pub fn utf8_char_width(b: u8) -> uint {\n     let byte: uint = b as uint;\n@@ -737,7 +804,8 @@ pub mod raw {\n \n     /// Create a Rust string from a null-terminated *u8 buffer\n     pub unsafe fn from_buf(buf: *u8) -> ~str {\n-        let mut (curr, i) = (buf, 0u);\n+        let mut curr = buf;\n+        let mut i = 0u;\n         while *curr != 0u8 {\n             i += 1u;\n             curr = ptr::offset(buf, i);"}, {"sha": "da3dc6b2a2e5acea176857941feb857ed7494dfd", "filename": "src/libstd/task/spawn.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9b54541ee2bbab1d81b14252f4d4172e10fd748/src%2Flibstd%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b54541ee2bbab1d81b14252f4d4172e10fd748/src%2Flibstd%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fspawn.rs?ref=f9b54541ee2bbab1d81b14252f4d4172e10fd748", "patch": "@@ -636,7 +636,9 @@ fn spawn_raw_oldsched(mut opts: TaskOpts, f: ~fn()) {\n         let child_data = Cell::new((notify_chan, child_arc, ancestors));\n         let result: ~fn() = || {\n             // Agh. Get move-mode items into the closure. FIXME (#2829)\n-            let mut (notify_chan, child_arc, ancestors) = child_data.take();\n+            let (notify_chan, child_arc, ancestors) = child_data.take();\n+            let mut child_arc = child_arc;\n+            let mut ancestors = ancestors;\n             // Child task runs this code.\n \n             // Even if the below code fails to kick the child off, we must"}, {"sha": "dcd02744cf9028de69963188d0a63726777a71a5", "filename": "src/libstd/to_str.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f9b54541ee2bbab1d81b14252f4d4172e10fd748/src%2Flibstd%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b54541ee2bbab1d81b14252f4d4172e10fd748/src%2Flibstd%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fto_str.rs?ref=f9b54541ee2bbab1d81b14252f4d4172e10fd748", "patch": "@@ -53,8 +53,9 @@ impl<A:ToStr> ToStr for (A,) {\n impl<A:ToStr+Hash+Eq, B:ToStr+Hash+Eq> ToStr for HashMap<A, B> {\n     #[inline]\n     fn to_str(&self) -> ~str {\n-        let mut (acc, first) = (~\"{\", true);\n-        for self.iter().advance |(key, value)| {\n+        let mut acc = ~\"{\";\n+        let mut first = true;\n+        for self.iter().advance |key, value| {\n             if first {\n                 first = false;\n             }\n@@ -73,7 +74,8 @@ impl<A:ToStr+Hash+Eq, B:ToStr+Hash+Eq> ToStr for HashMap<A, B> {\n impl<A:ToStr+Hash+Eq> ToStr for HashSet<A> {\n     #[inline]\n     fn to_str(&self) -> ~str {\n-        let mut (acc, first) = (~\"{\", true);\n+        let mut acc = ~\"{\";\n+        let mut first = true;\n         for self.iter().advance |element| {\n             if first {\n                 first = false;\n@@ -121,7 +123,8 @@ impl<A:ToStr,B:ToStr,C:ToStr> ToStr for (A, B, C) {\n impl<'self,A:ToStr> ToStr for &'self [A] {\n     #[inline]\n     fn to_str(&self) -> ~str {\n-        let mut (acc, first) = (~\"[\", true);\n+        let mut acc = ~\"[\";\n+        let mut first = true;\n         for self.iter().advance |elt| {\n             if first {\n                 first = false;\n@@ -139,7 +142,8 @@ impl<'self,A:ToStr> ToStr for &'self [A] {\n impl<A:ToStr> ToStr for ~[A] {\n     #[inline]\n     fn to_str(&self) -> ~str {\n-        let mut (acc, first) = (~\"[\", true);\n+        let mut acc = ~\"[\";\n+        let mut first = true;\n         for self.iter().advance |elt| {\n             if first {\n                 first = false;\n@@ -157,7 +161,8 @@ impl<A:ToStr> ToStr for ~[A] {\n impl<A:ToStr> ToStr for @[A] {\n     #[inline]\n     fn to_str(&self) -> ~str {\n-        let mut (acc, first) = (~\"[\", true);\n+        let mut acc = ~\"[\";\n+        let mut first = true;\n         for self.iter().advance |elt| {\n             if first {\n                 first = false;"}, {"sha": "aa4d632a48273c7d04492c83800241131b04a21b", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f9b54541ee2bbab1d81b14252f4d4172e10fd748/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b54541ee2bbab1d81b14252f4d4172e10fd748/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=f9b54541ee2bbab1d81b14252f4d4172e10fd748", "patch": "@@ -348,7 +348,8 @@ pub fn consume_reverse<T>(mut v: ~[T], f: &fn(uint, v: T)) {\n pub fn dedup<T:Eq>(v: &mut ~[T]) {\n     unsafe {\n         if v.len() < 1 { return; }\n-        let mut (last_written, next_to_read) = (0, 1);\n+        let mut last_written = 0;\n+        let mut next_to_read = 1;\n         do as_const_buf(*v) |p, ln| {\n             // We have a mutable reference to v, so we can make arbitrary\n             // changes. (cf. push and pop)\n@@ -798,7 +799,8 @@ pub fn bsearch_elem<T:TotalOrd>(v: &[T], x: &T) -> Option<uint> {\n  * Convert a vector of pairs into a pair of vectors, by reference. As unzip().\n  */\n pub fn unzip_slice<T:Copy,U:Copy>(v: &[(T, U)]) -> (~[T], ~[U]) {\n-    let mut (ts, us) = (~[], ~[]);\n+    let mut ts = ~[];\n+    let mut us = ~[];\n     for v.iter().advance |p| {\n         let (t, u) = copy *p;\n         ts.push(t);\n@@ -816,7 +818,8 @@ pub fn unzip_slice<T:Copy,U:Copy>(v: &[(T, U)]) -> (~[T], ~[U]) {\n  * of the i-th tuple of the input vector.\n  */\n pub fn unzip<T,U>(v: ~[(T, U)]) -> (~[T], ~[U]) {\n-    let mut (ts, us) = (~[], ~[]);\n+    let mut ts = ~[];\n+    let mut us = ~[];\n     do consume(v) |_i, p| {\n         let (t, u) = p;\n         ts.push(t);"}, {"sha": "4ffaba0906102ab0a8452a02d5279aea9085a493", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f9b54541ee2bbab1d81b14252f4d4172e10fd748/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b54541ee2bbab1d81b14252f4d4172e10fd748/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=f9b54541ee2bbab1d81b14252f4d4172e10fd748", "patch": "@@ -619,6 +619,15 @@ pub enum Privacy {\n     Public\n }\n \n+/// Returns true if the given pattern consists solely of an identifier\n+/// and false otherwise.\n+pub fn pat_is_ident(pat: @ast::pat) -> bool {\n+    match pat.node {\n+        ast::pat_ident(*) => true,\n+        _ => false,\n+    }\n+}\n+\n // HYGIENE FUNCTIONS\n \n /// Construct an identifier with the given name and an empty context:"}, {"sha": "383faf22037d748840b889932bc30f1495ee6e6f", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f9b54541ee2bbab1d81b14252f4d4172e10fd748/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b54541ee2bbab1d81b14252f4d4172e10fd748/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=f9b54541ee2bbab1d81b14252f4d4172e10fd748", "patch": "@@ -62,6 +62,7 @@ pub enum ObsoleteSyntax {\n     ObsoleteFixedLengthVectorType,\n     ObsoleteNamedExternModule,\n     ObsoleteMultipleLocalDecl,\n+    ObsoleteMutWithMultipleBindings,\n }\n \n impl to_bytes::IterBytes for ObsoleteSyntax {\n@@ -223,6 +224,11 @@ impl Parser {\n                 \"instead of e.g. `let a = 1, b = 2`, write \\\n                  `let (a, b) = (1, 2)`.\"\n             ),\n+            ObsoleteMutWithMultipleBindings => (\n+                \"`mut` with multiple bindings\",\n+                \"use multiple local declarations instead of e.g. `let mut \\\n+                 (x, y) = ...`.\"\n+            ),\n         };\n \n         self.report(sp, kind, kind_str, desc);"}, {"sha": "11c73fe57111e7ce64a8c3a5f2de3e0cbfbabd51", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f9b54541ee2bbab1d81b14252f4d4172e10fd748/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b54541ee2bbab1d81b14252f4d4172e10fd748/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=f9b54541ee2bbab1d81b14252f4d4172e10fd748", "patch": "@@ -83,7 +83,8 @@ use parse::obsolete::{ObsoleteLifetimeNotation, ObsoleteConstManagedPointer};\n use parse::obsolete::{ObsoletePurity, ObsoleteStaticMethod};\n use parse::obsolete::{ObsoleteConstItem, ObsoleteFixedLengthVectorType};\n use parse::obsolete::{ObsoleteNamedExternModule, ObsoleteMultipleLocalDecl};\n-use parse::token::{can_begin_expr, get_ident_interner, ident_to_str, is_ident, is_ident_or_path};\n+use parse::obsolete::{ObsoleteMutWithMultipleBindings};\n+use parse::token::{can_begin_expr, get_ident_interner, is_ident, is_ident_or_path};\n use parse::token::{is_plain_ident, INTERPOLATED, keywords, special_idents, token_to_binop};\n use parse::token;\n use parse::{new_sub_parser_from_file, next_node_id, ParseSess};\n@@ -821,6 +822,11 @@ impl Parser {\n             self.parse_arg_mode();\n             is_mutbl = self.eat_keyword(keywords::Mut);\n             let pat = self.parse_pat();\n+\n+            if is_mutbl && !ast_util::pat_is_ident(pat) {\n+                self.obsolete(*self.span, ObsoleteMutWithMultipleBindings)\n+            }\n+\n             self.expect(&token::COLON);\n             pat\n         } else {\n@@ -2560,6 +2566,11 @@ impl Parser {\n     fn parse_local(&self, is_mutbl: bool) -> @local {\n         let lo = self.span.lo;\n         let pat = self.parse_pat();\n+\n+        if is_mutbl && !ast_util::pat_is_ident(pat) {\n+            self.obsolete(*self.span, ObsoleteMutWithMultipleBindings)\n+        }\n+\n         let mut ty = @Ty {\n             id: self.get_id(),\n             node: ty_infer,\n@@ -4420,7 +4431,8 @@ impl Parser {\n         let mut attrs = vec::append(first_item_attrs,\n                                     self.parse_outer_attributes());\n         // First, parse view items.\n-        let mut (view_items, items) = (~[], ~[]);\n+        let mut view_items = ~[];\n+        let mut items = ~[];\n         let mut done = false;\n         // I think this code would probably read better as a single\n         // loop with a mutable three-state-variable (for extern mods,"}, {"sha": "b79ecd03c0c68b685021dc62fc44b535658880fc", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f9b54541ee2bbab1d81b14252f4d4172e10fd748/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b54541ee2bbab1d81b14252f4d4172e10fd748/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=f9b54541ee2bbab1d81b14252f4d4172e10fd748", "patch": "@@ -23,7 +23,10 @@ fn main() {\n         for range(0, h) |y| {\n             let y = y as f64;\n             for range(0, w) |x| {\n-                let mut (Zr, Zi, Tr, Ti) = (0f64, 0f64, 0f64, 0f64);\n+                let mut Zr = 0f64;\n+                let mut Zi = 0f64;\n+                let mut Tr = 0f64;\n+                let mut Ti = 0f64;\n                 let Cr = 2.0 * (x as f64) / (w as f64) - 1.5;\n                 let Ci = 2.0 * (y as f64) / (h as f64) - 1.0;\n "}, {"sha": "07adc3d81e5f3a8a8324bf9d36d0814ef6c139c7", "filename": "src/test/compile-fail/kindck-destructor-owned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9b54541ee2bbab1d81b14252f4d4172e10fd748/src%2Ftest%2Fcompile-fail%2Fkindck-destructor-owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b54541ee2bbab1d81b14252f4d4172e10fd748/src%2Ftest%2Fcompile-fail%2Fkindck-destructor-owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-destructor-owned.rs?ref=f9b54541ee2bbab1d81b14252f4d4172e10fd748", "patch": "@@ -2,7 +2,7 @@ struct Foo {\n     f: @mut int,\n }\n \n-impl Drop for Foo { //~ ERROR cannot implement a destructor on a struct that is not Send\n+impl Drop for Foo { //~ ERROR cannot implement a destructor on a structure that does not satisfy Send\n     fn drop(&self) {\n         *self.f = 10;\n     }"}, {"sha": "99057ba940c56dfea151a600533c9647f49e7c3a", "filename": "src/test/compile-fail/kindck-nonsendable-1.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f9b54541ee2bbab1d81b14252f4d4172e10fd748/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b54541ee2bbab1d81b14252f4d4172e10fd748/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs?ref=f9b54541ee2bbab1d81b14252f4d4172e10fd748", "patch": "@@ -12,7 +12,7 @@ fn foo(_x: @uint) {}\n \n fn main() {\n     let x = @3u;\n-    let _: ~fn() = || foo(x); //~ ERROR does not fulfill `Owned`\n-    let _: ~fn() = || foo(x); //~ ERROR does not fulfill `Owned`\n-    let _: ~fn() = || foo(x); //~ ERROR does not fulfill `Owned`\n+    let _: ~fn() = || foo(x); //~ ERROR does not fulfill `Send`\n+    let _: ~fn() = || foo(x); //~ ERROR does not fulfill `Send`\n+    let _: ~fn() = || foo(x); //~ ERROR does not fulfill `Send`\n }"}, {"sha": "5f0d4bc60ac01b41db7bb5e7fafa29965ba588d8", "filename": "src/test/compile-fail/no-send-res-ports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9b54541ee2bbab1d81b14252f4d4172e10fd748/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b54541ee2bbab1d81b14252f4d4172e10fd748/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs?ref=f9b54541ee2bbab1d81b14252f4d4172e10fd748", "patch": "@@ -32,7 +32,7 @@ fn main() {\n     let x = Cell::new(foo(Port(@())));\n \n     do task::spawn {\n-        let y = x.take();   //~ ERROR does not fulfill `Owned`\n+        let y = x.take();   //~ ERROR does not fulfill `Send`\n         error!(y);\n     }\n }"}, {"sha": "20b571ad614103dedf9cf927f1ec0bd2caedd667", "filename": "src/test/compile-fail/non_owned-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9b54541ee2bbab1d81b14252f4d4172e10fd748/src%2Ftest%2Fcompile-fail%2Fnon_owned-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b54541ee2bbab1d81b14252f4d4172e10fd748/src%2Ftest%2Fcompile-fail%2Fnon_owned-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon_owned-enum.rs?ref=f9b54541ee2bbab1d81b14252f4d4172e10fd748", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[non_owned]\n+#[non_sendable]\n enum Foo { A }\n \n fn bar<T: Send>(_: T) {}"}, {"sha": "d4b8e6755a1265ebabb693ef57e613c6d467392e", "filename": "src/test/compile-fail/non_owned-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9b54541ee2bbab1d81b14252f4d4172e10fd748/src%2Ftest%2Fcompile-fail%2Fnon_owned-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b54541ee2bbab1d81b14252f4d4172e10fd748/src%2Ftest%2Fcompile-fail%2Fnon_owned-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon_owned-struct.rs?ref=f9b54541ee2bbab1d81b14252f4d4172e10fd748", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[non_owned]\n+#[non_sendable]\n struct Foo { a: int }\n \n fn bar<T: Send>(_: T) {}"}, {"sha": "2615396653d3a7f29e27fc91641d85ba10b916d4", "filename": "src/test/run-pass/let-destruct-fresh-mem.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9b54541ee2bbab1d81b14252f4d4172e10fd748/src%2Ftest%2Frun-pass%2Flet-destruct-fresh-mem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b54541ee2bbab1d81b14252f4d4172e10fd748/src%2Ftest%2Frun-pass%2Flet-destruct-fresh-mem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flet-destruct-fresh-mem.rs?ref=f9b54541ee2bbab1d81b14252f4d4172e10fd748", "patch": "@@ -13,7 +13,9 @@ struct A { a: int }\n \n pub fn main() {\n     let u = X {x: 10, y: @A {a: 20}};\n-    let mut X {x: x, y: @A {a: a}} = u;\n+    let X {x: x, y: @A {a: a}} = u;\n+    let mut x = x;\n+    let mut a = a;\n     x = 100;\n     a = 100;\n     assert_eq!(x, 100);"}, {"sha": "cbc822060cec2b327c9f9ccb0455b274ed3073f0", "filename": "src/test/run-pass/pipe-peek.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9b54541ee2bbab1d81b14252f4d4172e10fd748/src%2Ftest%2Frun-pass%2Fpipe-peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b54541ee2bbab1d81b14252f4d4172e10fd748/src%2Ftest%2Frun-pass%2Fpipe-peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-peek.rs?ref=f9b54541ee2bbab1d81b14252f4d4172e10fd748", "patch": "@@ -22,7 +22,9 @@ proto! oneshot (\n )\n \n pub fn main() {\n-    let mut (p, c) = oneshot::init();\n+    let (p, c) = oneshot::init();\n+    let mut p = p;\n+    let mut c = c;\n \n     assert!(!pipes::peek(&mut p));\n "}]}