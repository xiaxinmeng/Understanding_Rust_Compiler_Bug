{"sha": "e5bf60fee2de60a85076aaffd71df249a8ac41cb", "node_id": "C_kwDOAAsO6NoAKGU1YmY2MGZlZTJkZTYwYTg1MDc2YWFmZmQ3MWRmMjQ5YThhYzQxY2I", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-04-15T19:44:47Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-04-15T19:44:47Z"}, "message": "minor: Remove frequent `Arc<Body>` clones in type checking", "tree": {"sha": "c770b78583763ba64d11d7baf1d30ee3e97e1b62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c770b78583763ba64d11d7baf1d30ee3e97e1b62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5bf60fee2de60a85076aaffd71df249a8ac41cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5bf60fee2de60a85076aaffd71df249a8ac41cb", "html_url": "https://github.com/rust-lang/rust/commit/e5bf60fee2de60a85076aaffd71df249a8ac41cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5bf60fee2de60a85076aaffd71df249a8ac41cb/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f82d230081e256865c1f93162efc64bbcd4f8582", "url": "https://api.github.com/repos/rust-lang/rust/commits/f82d230081e256865c1f93162efc64bbcd4f8582", "html_url": "https://github.com/rust-lang/rust/commit/f82d230081e256865c1f93162efc64bbcd4f8582"}], "stats": {"total": 54, "additions": 29, "deletions": 25}, "files": [{"sha": "1892e30a425bec677dbd92168a6fb9dc5f77d703", "filename": "crates/hir_ty/src/infer.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e5bf60fee2de60a85076aaffd71df249a8ac41cb/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5bf60fee2de60a85076aaffd71df249a8ac41cb/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer.rs?ref=e5bf60fee2de60a85076aaffd71df249a8ac41cb", "patch": "@@ -59,7 +59,8 @@ mod closure;\n pub(crate) fn infer_query(db: &dyn HirDatabase, def: DefWithBodyId) -> Arc<InferenceResult> {\n     let _p = profile::span(\"infer_query\");\n     let resolver = def.resolver(db.upcast());\n-    let mut ctx = InferenceContext::new(db, def, resolver);\n+    let body = db.body(def);\n+    let mut ctx = InferenceContext::new(db, def, &body, resolver);\n \n     match def {\n         DefWithBodyId::ConstId(c) => ctx.collect_const(&db.const_data(c)),\n@@ -360,7 +361,7 @@ impl Index<PatId> for InferenceResult {\n pub(crate) struct InferenceContext<'a> {\n     pub(crate) db: &'a dyn HirDatabase,\n     pub(crate) owner: DefWithBodyId,\n-    pub(crate) body: Arc<Body>,\n+    pub(crate) body: &'a Body,\n     pub(crate) resolver: Resolver,\n     table: unify::InferenceTable<'a>,\n     trait_env: Arc<TraitEnvironment>,\n@@ -394,7 +395,12 @@ fn find_breakable<'c>(\n }\n \n impl<'a> InferenceContext<'a> {\n-    fn new(db: &'a dyn HirDatabase, owner: DefWithBodyId, resolver: Resolver) -> Self {\n+    fn new(\n+        db: &'a dyn HirDatabase,\n+        owner: DefWithBodyId,\n+        body: &'a Body,\n+        resolver: Resolver,\n+    ) -> Self {\n         let krate = owner.module(db.upcast()).krate();\n         let trait_env = owner\n             .as_generic_def_id()\n@@ -406,7 +412,7 @@ impl<'a> InferenceContext<'a> {\n             return_ty: TyKind::Error.intern(Interner), // set in collect_fn_signature\n             db,\n             owner,\n-            body: db.body(owner),\n+            body,\n             resolver,\n             diverges: Diverges::Maybe,\n             breakables: Vec::new(),\n@@ -452,12 +458,11 @@ impl<'a> InferenceContext<'a> {\n     }\n \n     fn collect_fn(&mut self, data: &FunctionData) {\n-        let body = Arc::clone(&self.body); // avoid borrow checker problem\n         let ctx = crate::lower::TyLoweringContext::new(self.db, &self.resolver)\n             .with_impl_trait_mode(ImplTraitLoweringMode::Param);\n         let param_tys =\n             data.params.iter().map(|(_, type_ref)| ctx.lower_ty(type_ref)).collect::<Vec<_>>();\n-        for (ty, pat) in param_tys.into_iter().zip(body.params.iter()) {\n+        for (ty, pat) in param_tys.into_iter().zip(self.body.params.iter()) {\n             let ty = self.insert_type_vars(ty);\n             let ty = self.normalize_associated_types_in(ty);\n "}, {"sha": "fef02e63b70bb4bf9716530f838b45204830b919", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e5bf60fee2de60a85076aaffd71df249a8ac41cb/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5bf60fee2de60a85076aaffd71df249a8ac41cb/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=e5bf60fee2de60a85076aaffd71df249a8ac41cb", "patch": "@@ -4,7 +4,6 @@ use std::{\n     collections::hash_map::Entry,\n     iter::{repeat, repeat_with},\n     mem,\n-    sync::Arc,\n };\n \n use chalk_ir::{\n@@ -80,8 +79,7 @@ impl<'a> InferenceContext<'a> {\n     fn infer_expr_inner(&mut self, tgt_expr: ExprId, expected: &Expectation) -> Ty {\n         self.db.unwind_if_cancelled();\n \n-        let body = Arc::clone(&self.body); // avoid borrow checker problem\n-        let ty = match &body[tgt_expr] {\n+        let ty = match &self.body[tgt_expr] {\n             Expr::Missing => self.err_ty(),\n             &Expr::If { condition, then_branch, else_branch } => {\n                 self.infer_expr(\n@@ -560,17 +558,7 @@ impl<'a> InferenceContext<'a> {\n                 }\n                 .intern(Interner)\n             }\n-            Expr::Box { expr } => {\n-                let inner_ty = self.infer_expr_inner(*expr, &Expectation::none());\n-                if let Some(box_) = self.resolve_boxed_box() {\n-                    TyBuilder::adt(self.db, box_)\n-                        .push(inner_ty)\n-                        .fill_with_defaults(self.db, || self.table.new_type_var())\n-                        .build()\n-                } else {\n-                    self.err_ty()\n-                }\n-            }\n+            &Expr::Box { expr } => self.infer_expr_box(expr),\n             Expr::UnaryOp { expr, op } => {\n                 let inner_ty = self.infer_expr_inner(*expr, &Expectation::none());\n                 let inner_ty = self.resolve_ty_shallow(&inner_ty);\n@@ -798,6 +786,18 @@ impl<'a> InferenceContext<'a> {\n         ty\n     }\n \n+    fn infer_expr_box(&mut self, inner_expr: ExprId) -> chalk_ir::Ty<Interner> {\n+        let inner_ty = self.infer_expr_inner(inner_expr, &Expectation::none());\n+        if let Some(box_) = self.resolve_boxed_box() {\n+            TyBuilder::adt(self.db, box_)\n+                .push(inner_ty)\n+                .fill_with_defaults(self.db, || self.table.new_type_var())\n+                .build()\n+        } else {\n+            self.err_ty()\n+        }\n+    }\n+\n     fn infer_overloadable_binop(\n         &mut self,\n         lhs: ExprId,"}, {"sha": "600b82ca41406e3cfa055b2bcb662133d09d39d0", "filename": "crates/hir_ty/src/infer/pat.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e5bf60fee2de60a85076aaffd71df249a8ac41cb/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5bf60fee2de60a85076aaffd71df249a8ac41cb/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs?ref=e5bf60fee2de60a85076aaffd71df249a8ac41cb", "patch": "@@ -1,6 +1,6 @@\n //! Type inference for patterns.\n \n-use std::{iter::repeat, sync::Arc};\n+use std::iter::repeat;\n \n use chalk_ir::Mutability;\n use hir_def::{\n@@ -100,10 +100,9 @@ impl<'a> InferenceContext<'a> {\n         expected: &Ty,\n         mut default_bm: BindingMode,\n     ) -> Ty {\n-        let body = Arc::clone(&self.body); // avoid borrow checker problem\n         let mut expected = self.resolve_ty_shallow(expected);\n \n-        if is_non_ref_pat(&body, pat) {\n+        if is_non_ref_pat(&self.body, pat) {\n             let mut pat_adjustments = Vec::new();\n             while let Some((inner, _lifetime, mutability)) = expected.as_reference() {\n                 pat_adjustments.push(Adjustment {\n@@ -122,7 +121,7 @@ impl<'a> InferenceContext<'a> {\n                 pat_adjustments.shrink_to_fit();\n                 self.result.pat_adjustments.insert(pat, pat_adjustments);\n             }\n-        } else if let Pat::Ref { .. } = &body[pat] {\n+        } else if let Pat::Ref { .. } = &self.body[pat] {\n             cov_mark::hit!(match_ergonomics_ref);\n             // When you encounter a `&pat` pattern, reset to Move.\n             // This is so that `w` is by value: `let (_, &w) = &(1, &2);`\n@@ -133,7 +132,7 @@ impl<'a> InferenceContext<'a> {\n         let default_bm = default_bm;\n         let expected = expected;\n \n-        let ty = match &body[pat] {\n+        let ty = match &self.body[pat] {\n             Pat::Tuple { args, ellipsis } => {\n                 let expectations = match expected.as_tuple() {\n                     Some(parameters) => &*parameters.as_slice(Interner),"}]}