{"sha": "d93b6a4598946a6a97e8f1b073b1cfc08d332a86", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5M2I2YTQ1OTg5NDZhNmE5N2U4ZjFiMDczYjFjZmMwOGQzMzJhODY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-30T07:25:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-30T07:25:38Z"}, "message": "Auto merge of #85786 - GuillaumeGomez:error-code-checker-improvement, r=Mark-Simulacrum\n\nError code checker improvement\n\nJust realized that some error codes shouldn't be ignored anymore. So I updated the script to ensure that if an error code is tested and ignored, it will trigger an error.", "tree": {"sha": "e61fe4e90eeaddf4947f5fa945663519637fcfb3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e61fe4e90eeaddf4947f5fa945663519637fcfb3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d93b6a4598946a6a97e8f1b073b1cfc08d332a86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d93b6a4598946a6a97e8f1b073b1cfc08d332a86", "html_url": "https://github.com/rust-lang/rust/commit/d93b6a4598946a6a97e8f1b073b1cfc08d332a86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d93b6a4598946a6a97e8f1b073b1cfc08d332a86/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bff138dbd95cec763f4def6b91bb465a26aaad9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/bff138dbd95cec763f4def6b91bb465a26aaad9f", "html_url": "https://github.com/rust-lang/rust/commit/bff138dbd95cec763f4def6b91bb465a26aaad9f"}, {"sha": "7602818a6eb25a151a446750b07d5bc4521a62f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/7602818a6eb25a151a446750b07d5bc4521a62f4", "html_url": "https://github.com/rust-lang/rust/commit/7602818a6eb25a151a446750b07d5bc4521a62f4"}], "stats": {"total": 27, "additions": 18, "deletions": 9}, "files": [{"sha": "d6e0ebaa5410cf0d1317b55062b060adae5104c6", "filename": "src/tools/tidy/src/error_codes_check.rs", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d93b6a4598946a6a97e8f1b073b1cfc08d332a86/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d93b6a4598946a6a97e8f1b073b1cfc08d332a86/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs?ref=d93b6a4598946a6a97e8f1b073b1cfc08d332a86", "patch": "@@ -8,15 +8,14 @@ use std::path::Path;\n \n // A few of those error codes can't be tested but all the others can and *should* be tested!\n const EXEMPTED_FROM_TEST: &[&str] = &[\n-    \"E0183\", \"E0227\", \"E0279\", \"E0280\", \"E0311\", \"E0313\", \"E0314\", \"E0315\", \"E0377\", \"E0461\",\n-    \"E0462\", \"E0464\", \"E0465\", \"E0472\", \"E0473\", \"E0474\", \"E0475\", \"E0476\", \"E0479\", \"E0480\",\n-    \"E0481\", \"E0482\", \"E0483\", \"E0484\", \"E0485\", \"E0486\", \"E0487\", \"E0488\", \"E0489\", \"E0514\",\n-    \"E0519\", \"E0523\", \"E0553\", \"E0554\", \"E0570\", \"E0629\", \"E0630\", \"E0640\", \"E0717\", \"E0727\",\n-    \"E0729\",\n+    \"E0227\", \"E0279\", \"E0280\", \"E0313\", \"E0314\", \"E0315\", \"E0377\", \"E0461\", \"E0462\", \"E0464\",\n+    \"E0465\", \"E0473\", \"E0474\", \"E0475\", \"E0476\", \"E0479\", \"E0480\", \"E0481\", \"E0482\", \"E0483\",\n+    \"E0484\", \"E0485\", \"E0486\", \"E0487\", \"E0488\", \"E0489\", \"E0514\", \"E0519\", \"E0523\", \"E0553\",\n+    \"E0554\", \"E0570\", \"E0629\", \"E0630\", \"E0640\", \"E0717\", \"E0729\",\n ];\n \n // Some error codes don't have any tests apparently...\n-const IGNORE_EXPLANATION_CHECK: &[&str] = &[\"E0570\", \"E0601\", \"E0602\", \"E0639\", \"E0729\"];\n+const IGNORE_EXPLANATION_CHECK: &[&str] = &[\"E0570\", \"E0601\", \"E0602\", \"E0729\"];\n \n fn check_error_code_explanation(\n     f: &str,\n@@ -114,13 +113,18 @@ fn extract_error_codes(\n                 .expect(\"failed to canonicalize error explanation file path\");\n             match read_to_string(&path) {\n                 Ok(content) => {\n-                    if !IGNORE_EXPLANATION_CHECK.contains(&err_code.as_str())\n-                        && !check_if_error_code_is_test_in_explanation(&content, &err_code)\n-                    {\n+                    let has_test = check_if_error_code_is_test_in_explanation(&content, &err_code);\n+                    if !has_test && !IGNORE_EXPLANATION_CHECK.contains(&err_code.as_str()) {\n                         errors.push(format!(\n                             \"`{}` doesn't use its own error code in compile_fail example\",\n                             path.display(),\n                         ));\n+                    } else if has_test && IGNORE_EXPLANATION_CHECK.contains(&err_code.as_str()) {\n+                        errors.push(format!(\n+                            \"`{}` has a compile_fail example with its own error code, it shouldn't \\\n+                             be listed in IGNORE_EXPLANATION_CHECK!\",\n+                            path.display(),\n+                        ));\n                     }\n                     if check_error_code_explanation(&content, error_codes, err_code) {\n                         errors.push(format!(\n@@ -198,6 +202,11 @@ pub fn check(paths: &[&Path], bad: &mut bool) {\n         for (err_code, nb) in &error_codes {\n             if !*nb && !EXEMPTED_FROM_TEST.contains(&err_code.as_str()) {\n                 errors.push(format!(\"Error code {} needs to have at least one UI test!\", err_code));\n+            } else if *nb && EXEMPTED_FROM_TEST.contains(&err_code.as_str()) {\n+                errors.push(format!(\n+                    \"Error code {} has a UI test, it shouldn't be listed into EXEMPTED_FROM_TEST!\",\n+                    err_code\n+                ));\n             }\n         }\n     }"}]}