{"sha": "18bf2e5af5875f036b321bcf9e07e9904c02510e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4YmYyZTVhZjU4NzVmMDM2YjMyMWJjZjllMDdlOTkwNGMwMjUxMGU=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-01-01T09:07:01Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-01-01T13:43:16Z"}, "message": "Add ConstParams to the ide layer", "tree": {"sha": "1a82bc1dddc9a0d77515f7e7036c4b5583d359ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a82bc1dddc9a0d77515f7e7036c4b5583d359ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18bf2e5af5875f036b321bcf9e07e9904c02510e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18bf2e5af5875f036b321bcf9e07e9904c02510e", "html_url": "https://github.com/rust-lang/rust/commit/18bf2e5af5875f036b321bcf9e07e9904c02510e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18bf2e5af5875f036b321bcf9e07e9904c02510e/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0acdb730769cfb040ffc5e2c87f83b19fd3ce291", "url": "https://api.github.com/repos/rust-lang/rust/commits/0acdb730769cfb040ffc5e2c87f83b19fd3ce291", "html_url": "https://github.com/rust-lang/rust/commit/0acdb730769cfb040ffc5e2c87f83b19fd3ce291"}], "stats": {"total": 71, "additions": 66, "deletions": 5}, "files": [{"sha": "4a3ed7783efcc6c1e2069cd3531678cf6136f0bf", "filename": "crates/assists/src/ast_transform.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/18bf2e5af5875f036b321bcf9e07e9904c02510e/crates%2Fassists%2Fsrc%2Fast_transform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18bf2e5af5875f036b321bcf9e07e9904c02510e/crates%2Fassists%2Fsrc%2Fast_transform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fast_transform.rs?ref=18bf2e5af5875f036b321bcf9e07e9904c02510e", "patch": "@@ -204,7 +204,8 @@ impl<'a> AstTransform<'a> for QualifyPaths<'a> {\n             }\n             PathResolution::Local(_)\n             | PathResolution::TypeParam(_)\n-            | PathResolution::SelfType(_) => None,\n+            | PathResolution::SelfType(_)\n+            | PathResolution::ConstParam(_) => None,\n             PathResolution::Macro(_) => None,\n             PathResolution::AssocItem(_) => None,\n         }"}, {"sha": "8d431b9201aa273424cba2799cf4b92627c42bf4", "filename": "crates/hir_ty/src/tests/simple.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/18bf2e5af5875f036b321bcf9e07e9904c02510e/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18bf2e5af5875f036b321bcf9e07e9904c02510e/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs?ref=18bf2e5af5875f036b321bcf9e07e9904c02510e", "patch": "@@ -2376,7 +2376,6 @@ fn infer_operator_overload() {\n     );\n }\n \n-\n #[test]\n fn infer_const_params() {\n     check_infer("}, {"sha": "bcde2b6f125a188544aefe6815fbd43144b85007", "filename": "crates/ide/src/display/navigation_target.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/18bf2e5af5875f036b321bcf9e07e9904c02510e/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18bf2e5af5875f036b321bcf9e07e9904c02510e/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=18bf2e5af5875f036b321bcf9e07e9904c02510e", "patch": "@@ -24,6 +24,7 @@ pub enum SymbolKind {\n     Impl,\n     Field,\n     TypeParam,\n+    ConstParam,\n     LifetimeParam,\n     ValueParam,\n     SelfParam,\n@@ -225,6 +226,7 @@ impl TryToNav for Definition {\n             Definition::TypeParam(it) => Some(it.to_nav(db)),\n             Definition::LifetimeParam(it) => Some(it.to_nav(db)),\n             Definition::Label(it) => Some(it.to_nav(db)),\n+            Definition::ConstParam(it) => Some(it.to_nav(db)),\n         }\n     }\n }\n@@ -485,6 +487,23 @@ impl ToNav for hir::LifetimeParam {\n     }\n }\n \n+impl ToNav for hir::ConstParam {\n+    fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n+        let src = self.source(db);\n+        let full_range = src.value.syntax().text_range();\n+        NavigationTarget {\n+            file_id: src.file_id.original_file(db),\n+            name: self.name(db).to_string().into(),\n+            kind: Some(SymbolKind::ConstParam),\n+            full_range,\n+            focus_range: src.value.name().map(|n| n.syntax().text_range()),\n+            container_name: None,\n+            description: None,\n+            docs: None,\n+        }\n+    }\n+}\n+\n /// Get a description of a symbol.\n ///\n /// e.g. `struct Name`, `enum Name`, `fn Name`"}, {"sha": "367fac05e9de3441d24953d3e13a38b7572bf501", "filename": "crates/ide/src/doc_links.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/18bf2e5af5875f036b321bcf9e07e9904c02510e/crates%2Fide%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18bf2e5af5875f036b321bcf9e07e9904c02510e/crates%2Fide%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links.rs?ref=18bf2e5af5875f036b321bcf9e07e9904c02510e", "patch": "@@ -193,6 +193,7 @@ fn rewrite_intra_doc_link(\n         Definition::SelfType(_)\n         | Definition::Local(_)\n         | Definition::TypeParam(_)\n+        | Definition::ConstParam(_)\n         | Definition::LifetimeParam(_)\n         | Definition::Label(_) => return None,\n     }?;"}, {"sha": "49eb8caae61766035b160bf24aa2d077afa9c99b", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/18bf2e5af5875f036b321bcf9e07e9904c02510e/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18bf2e5af5875f036b321bcf9e07e9904c02510e/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=18bf2e5af5875f036b321bcf9e07e9904c02510e", "patch": "@@ -370,7 +370,10 @@ fn hover_for_definition(db: &RootDatabase, def: Definition) -> Option<Markup> {\n                 Adt::Enum(it) => from_def_source(db, it, mod_path),\n             })\n         }\n-        Definition::TypeParam(_) | Definition::LifetimeParam(_) | Definition::Label(_) => {\n+        Definition::TypeParam(_)\n+        | Definition::LifetimeParam(_)\n+        | Definition::ConstParam(_)\n+        | Definition::Label(_) => {\n             // FIXME: Hover for generic param\n             None\n         }"}, {"sha": "fa58fc3196553362c4a450831e8b9712098cdb84", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/18bf2e5af5875f036b321bcf9e07e9904c02510e/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18bf2e5af5875f036b321bcf9e07e9904c02510e/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=18bf2e5af5875f036b321bcf9e07e9904c02510e", "patch": "@@ -1144,4 +1144,20 @@ fn foo<'a>() -> &'a () {\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn test_find_const_param() {\n+        check(\n+            r#\"\n+fn foo<const FOO<|>: usize>() -> usize {\n+    FOO\n+}\n+\"#,\n+            expect![[r#\"\n+                FOO ConstParam FileId(0) 7..23 13..16 Other\n+\n+                FileId(0) 42..45 Other\n+            \"#]],\n+        );\n+    }\n }"}, {"sha": "ba00852445d520c452a00f8ea9aab804f61b0491", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/18bf2e5af5875f036b321bcf9e07e9904c02510e/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18bf2e5af5875f036b321bcf9e07e9904c02510e/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=18bf2e5af5875f036b321bcf9e07e9904c02510e", "patch": "@@ -819,6 +819,7 @@ fn highlight_def(db: &RootDatabase, def: Definition) -> Highlight {\n         },\n         Definition::SelfType(_) => HighlightTag::Symbol(SymbolKind::Impl),\n         Definition::TypeParam(_) => HighlightTag::Symbol(SymbolKind::TypeParam),\n+        Definition::ConstParam(_) => HighlightTag::Symbol(SymbolKind::ConstParam),\n         Definition::Local(local) => {\n             let tag = if local.is_param(db) {\n                 HighlightTag::Symbol(SymbolKind::ValueParam)"}, {"sha": "8b88670798c21cbed8d46afb3186427d4434658c", "filename": "crates/ide/src/syntax_highlighting/tags.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/18bf2e5af5875f036b321bcf9e07e9904c02510e/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18bf2e5af5875f036b321bcf9e07e9904c02510e/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs?ref=18bf2e5af5875f036b321bcf9e07e9904c02510e", "patch": "@@ -77,6 +77,7 @@ impl HighlightTag {\n                 SymbolKind::Function => \"function\",\n                 SymbolKind::TypeAlias => \"type_alias\",\n                 SymbolKind::TypeParam => \"type_param\",\n+                SymbolKind::ConstParam => \"const_param\",\n                 SymbolKind::LifetimeParam => \"lifetime\",\n                 SymbolKind::Macro => \"macro\",\n                 SymbolKind::Local => \"variable\","}, {"sha": "02270b0770a0b85c3e4c672366e734dcceae80a3", "filename": "crates/ide/src/syntax_highlighting/test_data/highlighting.html", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/18bf2e5af5875f036b321bcf9e07e9904c02510e/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/18bf2e5af5875f036b321bcf9e07e9904c02510e/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html?ref=18bf2e5af5875f036b321bcf9e07e9904c02510e", "patch": "@@ -118,6 +118,10 @@\n     <span class=\"keyword control\">loop</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n <span class=\"punctuation\">}</span>\n \n+<span class=\"keyword\">fn</span> <span class=\"function declaration\">const_param</span><span class=\"punctuation\">&lt;</span><span class=\"keyword\">const</span> <span class=\"const_param declaration\">FOO</span><span class=\"punctuation\">:</span> <span class=\"builtin_type\">usize</span><span class=\"punctuation\">&gt;</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">usize</span> <span class=\"punctuation\">{</span>\n+    <span class=\"const_param\">FOO</span>\n+<span class=\"punctuation\">}</span>\n+\n <span class=\"keyword\">use</span> <span class=\"module\">ops</span><span class=\"operator\">::</span><span class=\"trait\">Fn</span><span class=\"punctuation\">;</span>\n <span class=\"keyword\">fn</span> <span class=\"function declaration\">baz</span><span class=\"punctuation\">&lt;</span><span class=\"type_param declaration\">F</span><span class=\"punctuation\">:</span> <span class=\"trait\">Fn</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">&gt;</span><span class=\"punctuation\">(</span><span class=\"value_param declaration callable\">f</span><span class=\"punctuation\">:</span> <span class=\"type_param\">F</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span>\n     <span class=\"value_param callable\">f</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span>"}, {"sha": "30b5b648e9c69ae3655dded3923ff91c25e90672", "filename": "crates/ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/18bf2e5af5875f036b321bcf9e07e9904c02510e/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18bf2e5af5875f036b321bcf9e07e9904c02510e/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=18bf2e5af5875f036b321bcf9e07e9904c02510e", "patch": "@@ -91,6 +91,10 @@ fn never() -> ! {\n     loop {}\n }\n \n+fn const_param<const FOO: usize>() -> usize {\n+    FOO\n+}\n+\n use ops::Fn;\n fn baz<F: Fn() -> ()>(f: F) {\n     f()"}, {"sha": "cc5078bf0fe7eaa1a00230dc22da9835ae2966fc", "filename": "crates/ide_db/src/defs.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/18bf2e5af5875f036b321bcf9e07e9904c02510e/crates%2Fide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18bf2e5af5875f036b321bcf9e07e9904c02510e/crates%2Fide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fdefs.rs?ref=18bf2e5af5875f036b321bcf9e07e9904c02510e", "patch": "@@ -6,8 +6,8 @@\n // FIXME: this badly needs rename/rewrite (matklad, 2020-02-06).\n \n use hir::{\n-    db::HirDatabase, Crate, Field, HasVisibility, Impl, Label, LifetimeParam, Local, MacroDef,\n-    Module, ModuleDef, Name, PathResolution, Semantics, TypeParam, Visibility,\n+    db::HirDatabase, ConstParam, Crate, Field, HasVisibility, Impl, Label, LifetimeParam, Local,\n+    MacroDef, Module, ModuleDef, Name, PathResolution, Semantics, TypeParam, Visibility,\n };\n use syntax::{\n     ast::{self, AstNode},\n@@ -26,6 +26,7 @@ pub enum Definition {\n     Local(Local),\n     TypeParam(TypeParam),\n     LifetimeParam(LifetimeParam),\n+    ConstParam(ConstParam),\n     Label(Label),\n }\n \n@@ -39,6 +40,7 @@ impl Definition {\n             Definition::Local(it) => Some(it.module(db)),\n             Definition::TypeParam(it) => Some(it.module(db)),\n             Definition::LifetimeParam(it) => Some(it.module(db)),\n+            Definition::ConstParam(it) => Some(it.module(db)),\n             Definition::Label(it) => Some(it.module(db)),\n         }\n     }\n@@ -52,6 +54,7 @@ impl Definition {\n             Definition::Local(_) => None,\n             Definition::TypeParam(_) => None,\n             Definition::LifetimeParam(_) => None,\n+            Definition::ConstParam(_) => None,\n             Definition::Label(_) => None,\n         }\n     }\n@@ -79,6 +82,7 @@ impl Definition {\n             Definition::Local(it) => it.name(db)?,\n             Definition::TypeParam(it) => it.name(db),\n             Definition::LifetimeParam(it) => it.name(db),\n+            Definition::ConstParam(it) => it.name(db),\n             Definition::Label(it) => it.name(db),\n         };\n         Some(name)\n@@ -233,6 +237,10 @@ impl NameClass {\n                     let def = sema.to_def(&it)?;\n                     Some(NameClass::Definition(Definition::TypeParam(def)))\n                 },\n+                ast::ConstParam(it) => {\n+                    let def = sema.to_def(&it)?;\n+                    Some(NameClass::Definition(Definition::ConstParam(def)))\n+                },\n                 _ => None,\n             }\n         }\n@@ -417,6 +425,7 @@ impl From<PathResolution> for Definition {\n             PathResolution::TypeParam(par) => Definition::TypeParam(par),\n             PathResolution::Macro(def) => Definition::Macro(def),\n             PathResolution::SelfType(impl_def) => Definition::SelfType(impl_def),\n+            PathResolution::ConstParam(par) => Definition::ConstParam(par),\n         }\n     }\n }"}, {"sha": "5c4366f16e3109dc77b9579a238da877bc680d62", "filename": "crates/rust-analyzer/src/semantic_tokens.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/18bf2e5af5875f036b321bcf9e07e9904c02510e/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18bf2e5af5875f036b321bcf9e07e9904c02510e/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs?ref=18bf2e5af5875f036b321bcf9e07e9904c02510e", "patch": "@@ -44,6 +44,7 @@ define_semantic_token_types![\n     (ESCAPE_SEQUENCE, \"escapeSequence\"),\n     (FORMAT_SPECIFIER, \"formatSpecifier\"),\n     (GENERIC, \"generic\"),\n+    (CONST_PARAMETER, \"constParameter\"),\n     (LIFETIME, \"lifetime\"),\n     (LABEL, \"label\"),\n     (PUNCTUATION, \"punctuation\"),"}, {"sha": "999b18351558d5c8884e4d3ca96d4ce13fb25c3d", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18bf2e5af5875f036b321bcf9e07e9904c02510e/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18bf2e5af5875f036b321bcf9e07e9904c02510e/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=18bf2e5af5875f036b321bcf9e07e9904c02510e", "patch": "@@ -42,6 +42,7 @@ pub(crate) fn symbol_kind(symbol_kind: SymbolKind) -> lsp_types::SymbolKind {\n         SymbolKind::Field => lsp_types::SymbolKind::Field,\n         SymbolKind::Static => lsp_types::SymbolKind::Constant,\n         SymbolKind::Const => lsp_types::SymbolKind::Constant,\n+        SymbolKind::ConstParam => lsp_types::SymbolKind::Constant,\n         SymbolKind::Impl => lsp_types::SymbolKind::Object,\n         SymbolKind::Local\n         | SymbolKind::SelfParam\n@@ -378,6 +379,7 @@ fn semantic_token_type_and_modifiers(\n             SymbolKind::Impl => lsp_types::SemanticTokenType::TYPE,\n             SymbolKind::Field => lsp_types::SemanticTokenType::PROPERTY,\n             SymbolKind::TypeParam => lsp_types::SemanticTokenType::TYPE_PARAMETER,\n+            SymbolKind::ConstParam => semantic_tokens::CONST_PARAMETER,\n             SymbolKind::LifetimeParam => semantic_tokens::LIFETIME,\n             SymbolKind::Label => semantic_tokens::LABEL,\n             SymbolKind::ValueParam => lsp_types::SemanticTokenType::PARAMETER,"}]}