{"sha": "01198792a608b05e624b0127e76dd0753057016c", "node_id": "C_kwDOAAsO6NoAKDAxMTk4NzkyYTYwOGIwNWU2MjRiMDEyN2U3NmRkMDc1MzA1NzAxNmM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-22T17:32:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-22T17:32:20Z"}, "message": "Auto merge of #89893 - camsteffen:redundant-dump-enabled, r=matthewjasper\n\nRemove redundant dump_enabled check", "tree": {"sha": "c123af0d7cdd61617da815deb6827812a58bc2c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c123af0d7cdd61617da815deb6827812a58bc2c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01198792a608b05e624b0127e76dd0753057016c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01198792a608b05e624b0127e76dd0753057016c", "html_url": "https://github.com/rust-lang/rust/commit/01198792a608b05e624b0127e76dd0753057016c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01198792a608b05e624b0127e76dd0753057016c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45b600c83326fa3c653cf8cdb379d87a37a5920f", "url": "https://api.github.com/repos/rust-lang/rust/commits/45b600c83326fa3c653cf8cdb379d87a37a5920f", "html_url": "https://github.com/rust-lang/rust/commit/45b600c83326fa3c653cf8cdb379d87a37a5920f"}, {"sha": "7166df4b595c9d275b2bf07af2b0623a5a39f80f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7166df4b595c9d275b2bf07af2b0623a5a39f80f", "html_url": "https://github.com/rust-lang/rust/commit/7166df4b595c9d275b2bf07af2b0623a5a39f80f"}], "stats": {"total": 37, "additions": 8, "deletions": 29}, "files": [{"sha": "8e363cfbff562d594d9850dfa52c0a6ed2ed553e", "filename": "compiler/rustc_middle/src/mir/pretty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/01198792a608b05e624b0127e76dd0753057016c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01198792a608b05e624b0127e76dd0753057016c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs?ref=01198792a608b05e624b0127e76dd0753057016c", "patch": "@@ -71,6 +71,7 @@ pub enum PassWhere {\n ///   or `typeck` appears in the name.\n /// - `foo & nll | bar & typeck` == match if `foo` and `nll` both appear in the name\n ///   or `typeck` and `bar` both appear in the name.\n+#[inline]\n pub fn dump_mir<'tcx, F>(\n     tcx: TyCtxt<'tcx>,\n     pass_num: Option<&dyn Display>,"}, {"sha": "6b995141a2bef7602ea8cfb6b7c9038bdad1cd21", "filename": "compiler/rustc_mir_transform/src/dump_mir.rs", "status": "modified", "additions": 1, "deletions": 25, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/01198792a608b05e624b0127e76dd0753057016c/compiler%2Frustc_mir_transform%2Fsrc%2Fdump_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01198792a608b05e624b0127e76dd0753057016c/compiler%2Frustc_mir_transform%2Fsrc%2Fdump_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdump_mir.rs?ref=01198792a608b05e624b0127e76dd0753057016c", "patch": "@@ -1,13 +1,12 @@\n //! This pass just dumps MIR at a specified point.\n \n use std::borrow::Cow;\n-use std::fmt;\n use std::fs::File;\n use std::io;\n \n use crate::MirPass;\n+use rustc_middle::mir::write_mir_pretty;\n use rustc_middle::mir::Body;\n-use rustc_middle::mir::{dump_enabled, dump_mir, write_mir_pretty};\n use rustc_middle::ty::TyCtxt;\n use rustc_session::config::{OutputFilenames, OutputType};\n \n@@ -21,29 +20,6 @@ impl<'tcx> MirPass<'tcx> for Marker {\n     fn run_pass(&self, _tcx: TyCtxt<'tcx>, _body: &mut Body<'tcx>) {}\n }\n \n-pub struct Disambiguator {\n-    is_after: bool,\n-}\n-\n-impl fmt::Display for Disambiguator {\n-    fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        let title = if self.is_after { \"after\" } else { \"before\" };\n-        write!(formatter, \"{}\", title)\n-    }\n-}\n-\n-pub fn on_mir_pass<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    pass_num: &dyn fmt::Display,\n-    pass_name: &str,\n-    body: &Body<'tcx>,\n-    is_after: bool,\n-) {\n-    if dump_enabled(tcx, pass_name, body.source.def_id()) {\n-        dump_mir(tcx, Some(pass_num), pass_name, &Disambiguator { is_after }, body, |_, _| Ok(()));\n-    }\n-}\n-\n pub fn emit_mir(tcx: TyCtxt<'_>, outputs: &OutputFilenames) -> io::Result<()> {\n     let path = outputs.path(OutputType::Mir);\n     let mut f = io::BufWriter::new(File::create(&path)?);"}, {"sha": "8638cbac049b92088fcaac09c8cc8ce30981f6ed", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/01198792a608b05e624b0127e76dd0753057016c/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01198792a608b05e624b0127e76dd0753057016c/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=01198792a608b05e624b0127e76dd0753057016c", "patch": "@@ -28,7 +28,7 @@ use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_index::vec::IndexVec;\n use rustc_middle::mir::visit::Visitor as _;\n-use rustc_middle::mir::{traversal, Body, ConstQualifs, MirPhase, Promoted};\n+use rustc_middle::mir::{dump_mir, traversal, Body, ConstQualifs, MirPhase, Promoted};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, TyCtxt, TypeFoldable};\n use rustc_span::{Span, Symbol};\n@@ -188,12 +188,14 @@ fn run_passes(\n     let mut index = 0;\n     let mut run_pass = |pass: &dyn MirPass<'tcx>| {\n         let run_hooks = |body: &_, index, is_after| {\n-            dump_mir::on_mir_pass(\n+            let disambiguator = if is_after { \"after\" } else { \"before\" };\n+            dump_mir(\n                 tcx,\n-                &format_args!(\"{:03}-{:03}\", phase_index, index),\n+                Some(&format_args!(\"{:03}-{:03}\", phase_index, index)),\n                 &pass.name(),\n+                &disambiguator,\n                 body,\n-                is_after,\n+                |_, _| Ok(()),\n             );\n         };\n         run_hooks(body, index, false);"}]}