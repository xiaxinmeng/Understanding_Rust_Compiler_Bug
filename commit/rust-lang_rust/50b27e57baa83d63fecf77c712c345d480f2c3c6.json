{"sha": "50b27e57baa83d63fecf77c712c345d480f2c3c6", "node_id": "C_kwDOAAsO6NoAKDUwYjI3ZTU3YmFhODNkNjNmZWNmNzdjNzEyYzM0NWQ0ODBmMmMzYzY", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-07-23T18:24:01Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-07-23T18:24:01Z"}, "message": "Better error messages when the proc-macro-server fails to start", "tree": {"sha": "52116bd25f76615220d8768033e031cecab52ae4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52116bd25f76615220d8768033e031cecab52ae4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50b27e57baa83d63fecf77c712c345d480f2c3c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50b27e57baa83d63fecf77c712c345d480f2c3c6", "html_url": "https://github.com/rust-lang/rust/commit/50b27e57baa83d63fecf77c712c345d480f2c3c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50b27e57baa83d63fecf77c712c345d480f2c3c6/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aeb07745d53a90cc8447c45328eed51e941d9307", "url": "https://api.github.com/repos/rust-lang/rust/commits/aeb07745d53a90cc8447c45328eed51e941d9307", "html_url": "https://github.com/rust-lang/rust/commit/aeb07745d53a90cc8447c45328eed51e941d9307"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "0ada4b73e842d9d7f814bf71f74c9dc4441158c3", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/50b27e57baa83d63fecf77c712c345d480f2c3c6/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b27e57baa83d63fecf77c712c345d480f2c3c6/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=50b27e57baa83d63fecf77c712c345d480f2c3c6", "patch": "@@ -60,9 +60,9 @@ pub fn load_workspace(\n \n     let proc_macro_client = if load_config.with_proc_macro {\n         let path = AbsPathBuf::assert(std::env::current_exe()?);\n-        Some(ProcMacroServer::spawn(path, &[\"proc-macro\"]).unwrap())\n+        Ok(ProcMacroServer::spawn(path, &[\"proc-macro\"]).unwrap())\n     } else {\n-        None\n+        Err(\"proc macro server not started\".to_owned())\n     };\n \n     let crate_graph = ws.to_crate_graph(\n@@ -89,7 +89,7 @@ pub fn load_workspace(\n     if load_config.prefill_caches {\n         host.analysis().parallel_prime_caches(1, |_| {})?;\n     }\n-    Ok((host, vfs, proc_macro_client))\n+    Ok((host, vfs, proc_macro_client.ok()))\n }\n \n fn load_crate_graph("}, {"sha": "8f881cba4dbd7b113534e3cfdf1d6aa85bf95d27", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50b27e57baa83d63fecf77c712c345d480f2c3c6/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b27e57baa83d63fecf77c712c345d480f2c3c6/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=50b27e57baa83d63fecf77c712c345d480f2c3c6", "patch": "@@ -61,7 +61,7 @@ pub(crate) struct GlobalState {\n     pub(crate) proc_macro_changed: bool,\n     pub(crate) last_reported_status: Option<lsp_ext::ServerStatusParams>,\n     pub(crate) source_root_config: SourceRootConfig,\n-    pub(crate) proc_macro_clients: Vec<Option<ProcMacroServer>>,\n+    pub(crate) proc_macro_clients: Vec<Result<ProcMacroServer, String>>,\n \n     pub(crate) flycheck: Vec<FlycheckHandle>,\n     pub(crate) flycheck_sender: Sender<flycheck::Message>,"}, {"sha": "e5802773e74739168bc7b68e94a0d6cd2ba9daa6", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/50b27e57baa83d63fecf77c712c345d480f2c3c6/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b27e57baa83d63fecf77c712c345d480f2c3c6/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=50b27e57baa83d63fecf77c712c345d480f2c3c6", "patch": "@@ -306,16 +306,16 @@ impl GlobalState {\n         if self.proc_macro_clients.is_empty() {\n             if let Some((path, args)) = self.config.proc_macro_srv() {\n                 self.proc_macro_clients = (0..self.workspaces.len())\n-                    .map(|_| match ProcMacroServer::spawn(path.clone(), args.clone()) {\n-                        Ok(it) => Some(it),\n-                        Err(err) => {\n-                            tracing::error!(\n+                    .map(|_| {\n+                        ProcMacroServer::spawn(path.clone(), args.clone()).map_err(|err| {\n+                            let error = format!(\n                                 \"Failed to run proc_macro_srv from path {}, error: {:?}\",\n                                 path.display(),\n                                 err\n                             );\n-                            None\n-                        }\n+                            tracing::error!(error);\n+                            error\n+                        })\n                     })\n                     .collect();\n             }\n@@ -539,14 +539,14 @@ impl SourceRootConfig {\n /// Load the proc-macros for the given lib path, replacing all expanders whose names are in `dummy_replace`\n /// with an identity dummy expander.\n pub(crate) fn load_proc_macro(\n-    server: Option<&ProcMacroServer>,\n+    server: Result<&ProcMacroServer, &String>,\n     path: &AbsPath,\n     dummy_replace: &[Box<str>],\n ) -> ProcMacroLoadResult {\n     let res: Result<Vec<_>, String> = (|| {\n         let dylib = MacroDylib::new(path.to_path_buf())\n             .map_err(|io| format!(\"Proc-macro dylib loading failed: {io}\"))?;\n-        let server = server.ok_or_else(|| format!(\"Proc-macro server not started\"))?;\n+        let server = server.map_err(ToOwned::to_owned)?;\n         let vec = server.load_dylib(dylib).map_err(|e| format!(\"{e}\"))?;\n         if vec.is_empty() {\n             return Err(\"proc macro library returned no proc macros\".to_string());"}]}