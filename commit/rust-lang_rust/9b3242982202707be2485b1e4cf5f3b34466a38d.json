{"sha": "9b3242982202707be2485b1e4cf5f3b34466a38d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliMzI0Mjk4MjIwMjcwN2JlMjQ4NWIxZTRjZjVmM2IzNDQ2NmEzOGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-31T07:03:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-31T07:03:09Z"}, "message": "Auto merge of #81327 - RalfJung:codegen-no-const-fail, r=oli-obk\n\ncodegen: assume constants cannot fail to evaluate\n\nhttps://github.com/rust-lang/rust/pull/80579 landed, so we can finally remove this old hack from codegen and instead assume that consts never fail to evaluate. :)\n\nr? `@oli-obk`", "tree": {"sha": "38bd9cfd5eb70a926769da907d19edf1eb0fc370", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38bd9cfd5eb70a926769da907d19edf1eb0fc370"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b3242982202707be2485b1e4cf5f3b34466a38d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b3242982202707be2485b1e4cf5f3b34466a38d", "html_url": "https://github.com/rust-lang/rust/commit/9b3242982202707be2485b1e4cf5f3b34466a38d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b3242982202707be2485b1e4cf5f3b34466a38d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7850c28a5ff0c21f658b869138d3b8658b21a554", "url": "https://api.github.com/repos/rust-lang/rust/commits/7850c28a5ff0c21f658b869138d3b8658b21a554", "html_url": "https://github.com/rust-lang/rust/commit/7850c28a5ff0c21f658b869138d3b8658b21a554"}, {"sha": "944237f6cd2b7e732b6875bf0956bf323cc3316b", "url": "https://api.github.com/repos/rust-lang/rust/commits/944237f6cd2b7e732b6875bf0956bf323cc3316b", "html_url": "https://github.com/rust-lang/rust/commit/944237f6cd2b7e732b6875bf0956bf323cc3316b"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "0ce85c5715f17d86cf029f93ced5a1fade2034e2", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9b3242982202707be2485b1e4cf5f3b34466a38d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b3242982202707be2485b1e4cf5f3b34466a38d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=9b3242982202707be2485b1e4cf5f3b34466a38d", "patch": "@@ -626,6 +626,11 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n                         total_codegen_time += start_time.elapsed();\n                         module\n                     };\n+                // This will unwind if there are errors, which triggers our `AbortCodegenOnDrop`\n+                // guard. Unfortunately, just skipping the `submit_codegened_module_to_llvm` makes\n+                // compilation hang on post-monomorphization errors.\n+                tcx.sess.abort_if_errors();\n+\n                 submit_codegened_module_to_llvm(\n                     &backend,\n                     &ongoing_codegen.coordinator_send,"}, {"sha": "d31ececf13062a2208fa7e27ff7191f5dd3e487b", "filename": "compiler/rustc_codegen_ssa/src/mir/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9b3242982202707be2485b1e4cf5f3b34466a38d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b3242982202707be2485b1e4cf5f3b34466a38d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs?ref=9b3242982202707be2485b1e4cf5f3b34466a38d", "patch": "@@ -188,8 +188,11 @@ pub fn codegen_mir<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n \n     fx.per_local_var_debug_info = fx.compute_per_local_var_debug_info(&mut bx);\n \n+    // Evaluate all required consts; codegen later assumes that CTFE will never fail.\n+    let mut all_consts_ok = true;\n     for const_ in &mir.required_consts {\n         if let Err(err) = fx.eval_mir_constant(const_) {\n+            all_consts_ok = false;\n             match err {\n                 // errored or at least linted\n                 ErrorHandled::Reported(ErrorReported) | ErrorHandled::Linted => {}\n@@ -199,6 +202,11 @@ pub fn codegen_mir<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n             }\n         }\n     }\n+    if !all_consts_ok {\n+        // We leave the IR in some half-built state here, and rely on this code not even being\n+        // submitted to LLVM once an error was raised.\n+        return;\n+    }\n \n     let memory_locals = analyze::non_ssa_locals(&fx);\n "}, {"sha": "25e84c38ed31518574360442649507db56e3ab6b", "filename": "compiler/rustc_codegen_ssa/src/mir/operand.rs", "status": "modified", "additions": 4, "deletions": 21, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9b3242982202707be2485b1e4cf5f3b34466a38d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b3242982202707be2485b1e4cf5f3b34466a38d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Foperand.rs?ref=9b3242982202707be2485b1e4cf5f3b34466a38d", "patch": "@@ -6,9 +6,8 @@ use crate::glue;\n use crate::traits::*;\n use crate::MemFlags;\n \n-use rustc_errors::ErrorReported;\n use rustc_middle::mir;\n-use rustc_middle::mir::interpret::{ConstValue, ErrorHandled, Pointer, Scalar};\n+use rustc_middle::mir::interpret::{ConstValue, Pointer, Scalar};\n use rustc_middle::ty::layout::TyAndLayout;\n use rustc_middle::ty::Ty;\n use rustc_target::abi::{Abi, Align, LayoutOf, Size};\n@@ -439,25 +438,9 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             }\n \n             mir::Operand::Constant(ref constant) => {\n-                self.eval_mir_constant_to_operand(bx, constant).unwrap_or_else(|err| {\n-                    match err {\n-                        // errored or at least linted\n-                        ErrorHandled::Reported(ErrorReported) | ErrorHandled::Linted => {}\n-                        ErrorHandled::TooGeneric => {\n-                            bug!(\"codegen encountered polymorphic constant\")\n-                        }\n-                    }\n-                    // Allow RalfJ to sleep soundly knowing that even refactorings that remove\n-                    // the above error (or silence it under some conditions) will not cause UB.\n-                    bx.abort();\n-                    // We still have to return an operand but it doesn't matter,\n-                    // this code is unreachable.\n-                    let ty = self.monomorphize(constant.literal.ty);\n-                    let layout = bx.cx().layout_of(ty);\n-                    bx.load_operand(PlaceRef::new_sized(\n-                        bx.cx().const_undef(bx.cx().type_ptr_to(bx.cx().backend_type(layout))),\n-                        layout,\n-                    ))\n+                // This cannot fail because we checked all required_consts in advance.\n+                self.eval_mir_constant_to_operand(bx, constant).unwrap_or_else(|_err| {\n+                    span_bug!(constant.span, \"erroneous constant not captured by required_consts\")\n                 })\n             }\n         }"}, {"sha": "88236458a213a134843ffa9c7aeca7adfe3cc930", "filename": "compiler/rustc_mir/src/interpret/operand.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b3242982202707be2485b1e4cf5f3b34466a38d/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b3242982202707be2485b1e4cf5f3b34466a38d/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs?ref=9b3242982202707be2485b1e4cf5f3b34466a38d", "patch": "@@ -511,6 +511,10 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             Constant(ref constant) => {\n                 let val =\n                     self.subst_from_current_frame_and_normalize_erasing_regions(constant.literal);\n+                // This can still fail:\n+                // * During ConstProp, with `TooGeneric` or since the `requried_consts` were not all\n+                //   checked yet.\n+                // * During CTFE, since promoteds in `const`/`static` initializer bodies can fail.\n                 self.const_to_op(val, layout)?\n             }\n         };"}]}