{"sha": "9718d73ac86a428b7e11de8ef0215ff6ac85d9fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3MThkNzNhYzg2YTQyOGI3ZTExZGU4ZWYwMjE1ZmY2YWM4NWQ5ZmI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-07-12T09:26:09Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-07-12T09:26:09Z"}, "message": "colored test output!", "tree": {"sha": "0d3fb84284285eb8c8f018d272191438a30fc306", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d3fb84284285eb8c8f018d272191438a30fc306"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9718d73ac86a428b7e11de8ef0215ff6ac85d9fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9718d73ac86a428b7e11de8ef0215ff6ac85d9fb", "html_url": "https://github.com/rust-lang/rust/commit/9718d73ac86a428b7e11de8ef0215ff6ac85d9fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9718d73ac86a428b7e11de8ef0215ff6ac85d9fb/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ce16a7c30b551cf36314af183fd5c49308d60cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ce16a7c30b551cf36314af183fd5c49308d60cc", "html_url": "https://github.com/rust-lang/rust/commit/8ce16a7c30b551cf36314af183fd5c49308d60cc"}], "stats": {"total": 22, "additions": 13, "deletions": 9}, "files": [{"sha": "d01ce4f5baf8cf524f35992a1ad8142ba48bb9f0", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9718d73ac86a428b7e11de8ef0215ff6ac85d9fb/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9718d73ac86a428b7e11de8ef0215ff6ac85d9fb/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=9718d73ac86a428b7e11de8ef0215ff6ac85d9fb", "patch": "@@ -31,3 +31,4 @@ cargo_miri = [\"cargo_metadata\"]\n \n [dev-dependencies]\n compiletest_rs = { version = \"0.3.4\", features = [\"tmp\"] }\n+colored = \"1.6\""}, {"sha": "cfbfa70d42eea9c4e94a90e4a249b708bf339630", "filename": "tests/compiletest.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9718d73ac86a428b7e11de8ef0215ff6ac85d9fb/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9718d73ac86a428b7e11de8ef0215ff6ac85d9fb/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=9718d73ac86a428b7e11de8ef0215ff6ac85d9fb", "patch": "@@ -1,6 +1,9 @@\n #![feature(slice_concat_ext)]\n \n extern crate compiletest_rs as compiletest;\n+extern crate colored;\n+\n+use colored::*;\n \n use std::slice::SliceConcatExt;\n use std::path::{PathBuf, Path};\n@@ -37,19 +40,19 @@ fn have_fullmir() -> bool {\n \n fn compile_fail(sysroot: &Path, path: &str, target: &str, host: &str, need_fullmir: bool) {\n     if need_fullmir && !have_fullmir() {\n-        eprintln!(\n+        eprintln!(\"{}\", format!(\n             \"## Skipping compile-fail tests in {} against miri for target {} due to missing mir\",\n             path,\n             target\n-        );\n+        ).yellow().bold());\n         return;\n     }\n \n-    eprintln!(\n+    eprintln!(\"{}\", format!(\n         \"## Running compile-fail tests in {} against miri for target {}\",\n         path,\n         target\n-    );\n+    ).green().bold());\n     let mut config = compiletest::Config::default().tempdir();\n     config.mode = \"compile-fail\".parse().expect(\"Invalid mode\");\n     config.rustc_path = miri_path();\n@@ -68,7 +71,7 @@ fn compile_fail(sysroot: &Path, path: &str, target: &str, host: &str, need_fullm\n }\n \n fn rustc_pass(sysroot: &Path, path: &str) {\n-    eprintln!(\"## Running run-pass tests in {} against rustc\", path);\n+    eprintln!(\"{}\", format!(\"## Running run-pass tests in {} against rustc\", path).green().bold());\n     let mut config = compiletest::Config::default().tempdir();\n     config.mode = \"run-pass\".parse().expect(\"Invalid mode\");\n     config.src_base = PathBuf::from(path);\n@@ -86,21 +89,21 @@ fn rustc_pass(sysroot: &Path, path: &str) {\n \n fn miri_pass(sysroot: &Path, path: &str, target: &str, host: &str, need_fullmir: bool, opt: bool) {\n     if need_fullmir && !have_fullmir() {\n-        eprintln!(\n+        eprintln!(\"{}\", format!(\n             \"## Skipping run-pass tests in {} against miri for target {} due to missing mir\",\n             path,\n             target\n-        );\n+        ).yellow().bold());\n         return;\n     }\n \n     let opt_str = if opt { \" with optimizations\" } else { \"\" };\n-    eprintln!(\n+    eprintln!(\"{}\", format!(\n         \"## Running run-pass tests in {} against miri for target {}{}\",\n         path,\n         target,\n         opt_str\n-    );\n+    ).green().bold());\n     let mut config = compiletest::Config::default().tempdir();\n     config.mode = \"ui\".parse().expect(\"Invalid mode\");\n     config.src_base = PathBuf::from(path);"}]}