{"sha": "a458cf3fe619764abd938eb6d5b27dd261bd8127", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0NThjZjNmZTYxOTc2NGFiZDkzOGViNmQ1YjI3ZGQyNjFiZDgxMjc=", "commit": {"author": {"name": "JOE1994", "email": "joseph942010@gmail.com", "date": "2020-03-29T18:19:59Z"}, "committer": {"name": "JOE1994", "email": "joseph942010@gmail.com", "date": "2020-03-29T18:19:59Z"}, "message": "make 'fn convert_path_separator' to take Cow<> (to remove unnecessary allocation)", "tree": {"sha": "62563923e874e55c4bfcf28d3fd1cd8d1831c2f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62563923e874e55c4bfcf28d3fd1cd8d1831c2f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a458cf3fe619764abd938eb6d5b27dd261bd8127", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a458cf3fe619764abd938eb6d5b27dd261bd8127", "html_url": "https://github.com/rust-lang/rust/commit/a458cf3fe619764abd938eb6d5b27dd261bd8127", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a458cf3fe619764abd938eb6d5b27dd261bd8127/comments", "author": {"login": "JOE1994", "id": 10286488, "node_id": "MDQ6VXNlcjEwMjg2NDg4", "avatar_url": "https://avatars.githubusercontent.com/u/10286488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JOE1994", "html_url": "https://github.com/JOE1994", "followers_url": "https://api.github.com/users/JOE1994/followers", "following_url": "https://api.github.com/users/JOE1994/following{/other_user}", "gists_url": "https://api.github.com/users/JOE1994/gists{/gist_id}", "starred_url": "https://api.github.com/users/JOE1994/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JOE1994/subscriptions", "organizations_url": "https://api.github.com/users/JOE1994/orgs", "repos_url": "https://api.github.com/users/JOE1994/repos", "events_url": "https://api.github.com/users/JOE1994/events{/privacy}", "received_events_url": "https://api.github.com/users/JOE1994/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JOE1994", "id": 10286488, "node_id": "MDQ6VXNlcjEwMjg2NDg4", "avatar_url": "https://avatars.githubusercontent.com/u/10286488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JOE1994", "html_url": "https://github.com/JOE1994", "followers_url": "https://api.github.com/users/JOE1994/followers", "following_url": "https://api.github.com/users/JOE1994/following{/other_user}", "gists_url": "https://api.github.com/users/JOE1994/gists{/gist_id}", "starred_url": "https://api.github.com/users/JOE1994/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JOE1994/subscriptions", "organizations_url": "https://api.github.com/users/JOE1994/orgs", "repos_url": "https://api.github.com/users/JOE1994/repos", "events_url": "https://api.github.com/users/JOE1994/events{/privacy}", "received_events_url": "https://api.github.com/users/JOE1994/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3504d5266830e99f7cd2b978e91250bf1c35ee45", "url": "https://api.github.com/repos/rust-lang/rust/commits/3504d5266830e99f7cd2b978e91250bf1c35ee45", "html_url": "https://github.com/rust-lang/rust/commit/3504d5266830e99f7cd2b978e91250bf1c35ee45"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "0f81c24c252f59510c0c3eca5bdcae4ddeaf927b", "filename": "src/shims/os_str.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a458cf3fe619764abd938eb6d5b27dd261bd8127/src%2Fshims%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a458cf3fe619764abd938eb6d5b27dd261bd8127/src%2Fshims%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fos_str.rs?ref=a458cf3fe619764abd938eb6d5b27dd261bd8127", "patch": "@@ -21,14 +21,14 @@ enum Pathconversion {\n \n /// Perform path separator conversion if needed.\n fn convert_path_separator<'a>(\n-    os_str: &'a OsStr,\n+    os_str: Cow<'a, OsStr>,\n     target_os: &str,\n     direction: Pathconversion,\n ) -> Cow<'a, OsStr> {\n     #[cfg(windows)]\n     return if target_os == \"windows\" {\n         // Windows-on-Windows, all fine.\n-        Cow::Borrowed(os_str)\n+        os_str\n     } else {\n         // Unix target, Windows host.\n         let (from, to) = match direction {\n@@ -56,7 +56,7 @@ fn convert_path_separator<'a>(\n         Cow::Owned(OsString::from_vec(converted))\n     } else {\n         // Unix-on-Unix, all is fine.\n-        Cow::Borrowed(os_str)\n+        os_str\n     };\n }\n \n@@ -226,7 +226,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_ref();\n         let os_str = this.read_os_str_from_c_str(scalar)?;\n \n-        Ok(match convert_path_separator(os_str, &this.tcx.sess.target.target.target_os, Pathconversion::TargetToHost) {\n+        Ok(match convert_path_separator(Cow::Borrowed(os_str), &this.tcx.sess.target.target.target_os, Pathconversion::TargetToHost) {\n             Cow::Borrowed(x) => Cow::Borrowed(Path::new(x)),\n             Cow::Owned(y) => Cow::Owned(PathBuf::from(y)),\n         })\n@@ -237,7 +237,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_ref();\n         let os_str = this.read_os_str_from_wide_str(scalar)?;\n \n-        Ok(PathBuf::from(&convert_path_separator(&os_str, &this.tcx.sess.target.target.target_os, Pathconversion::TargetToHost)))\n+        Ok(PathBuf::from(&convert_path_separator(Cow::Borrowed(&os_str), &this.tcx.sess.target.target.target_os, Pathconversion::TargetToHost)))\n     }\n \n     /// Write a Path to the machine memory (as a null-terminated sequence of bytes),\n@@ -249,7 +249,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         size: u64,\n     ) -> InterpResult<'tcx, (bool, u64)> {\n         let this = self.eval_context_mut();\n-        let os_str = convert_path_separator(path.as_os_str(), &this.tcx.sess.target.target.target_os, Pathconversion::HostToTarget);\n+        let os_str = convert_path_separator(Cow::Borrowed(path.as_os_str()), &this.tcx.sess.target.target.target_os, Pathconversion::HostToTarget);\n         this.write_os_str_to_c_str(&os_str, scalar, size)\n     }\n \n@@ -262,7 +262,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         size: u64,\n     ) -> InterpResult<'tcx, (bool, u64)> {\n         let this = self.eval_context_mut();\n-        let os_str = convert_path_separator(path.as_os_str(), &this.tcx.sess.target.target.target_os, Pathconversion::HostToTarget);\n+        let os_str = convert_path_separator(Cow::Borrowed(path.as_os_str()), &this.tcx.sess.target.target.target_os, Pathconversion::HostToTarget);\n         this.write_os_str_to_wide_str(&os_str, scalar, size)\n     }\n }"}]}