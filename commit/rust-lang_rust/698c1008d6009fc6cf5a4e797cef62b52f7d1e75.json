{"sha": "698c1008d6009fc6cf5a4e797cef62b52f7d1e75", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5OGMxMDA4ZDYwMDlmYzZjZjVhNGU3OTdjZWY2MmI1MmY3ZDFlNzU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-10T14:50:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-10T14:50:40Z"}, "message": "Auto merge of #23028 - Munksgaard:get_attrs_opt, r=eddyb\n\nThis is more flexible and less error-prone. `get_attrs` and\r\n`get_attrs_opt` can be used on many more items than the old `get_attrs`\r\ncould.\r\n\r\nThis is all courtesy of @huonw, and directly taken from here:\r\nhttps://github.com/rust-lang/rust/pull/22348/files#diff-0f85fcb07fb739876892e633fa0e2be6R5575\r\n\r\nAlso thanks to @Manishearth for pointing it out to me.", "tree": {"sha": "46519566e57b792398f02b9a2f130e296471e704", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46519566e57b792398f02b9a2f130e296471e704"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/698c1008d6009fc6cf5a4e797cef62b52f7d1e75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/698c1008d6009fc6cf5a4e797cef62b52f7d1e75", "html_url": "https://github.com/rust-lang/rust/commit/698c1008d6009fc6cf5a4e797cef62b52f7d1e75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/698c1008d6009fc6cf5a4e797cef62b52f7d1e75/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f47c0613ed4eb46fca3633c1297364c09e5e451", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f47c0613ed4eb46fca3633c1297364c09e5e451", "html_url": "https://github.com/rust-lang/rust/commit/5f47c0613ed4eb46fca3633c1297364c09e5e451"}, {"sha": "caf6f17c0f89b3384a25b6d74bb2332c7ec2d2ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/caf6f17c0f89b3384a25b6d74bb2332c7ec2d2ac", "html_url": "https://github.com/rust-lang/rust/commit/caf6f17c0f89b3384a25b6d74bb2332c7ec2d2ac"}], "stats": {"total": 30, "additions": 13, "deletions": 17}, "files": [{"sha": "4cb4d343de758f3e9cb4b31d40586aa3d57cdbf1", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/698c1008d6009fc6cf5a4e797cef62b52f7d1e75/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698c1008d6009fc6cf5a4e797cef62b52f7d1e75/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=698c1008d6009fc6cf5a4e797cef62b52f7d1e75", "patch": "@@ -5606,8 +5606,7 @@ pub fn predicates<'tcx>(\n pub fn get_attrs<'tcx>(tcx: &'tcx ctxt, did: DefId)\n                        -> Cow<'tcx, [ast::Attribute]> {\n     if is_local(did) {\n-        let item = tcx.map.expect_item(did.node);\n-        Cow::Borrowed(&item.attrs)\n+        Cow::Borrowed(tcx.map.attrs(did.node))\n     } else {\n         Cow::Owned(csearch::get_item_attrs(&tcx.sess.cstore, did))\n     }"}, {"sha": "b96d735d92dbdd1e6ed59d3681f92bb6ecae9bcd", "filename": "src/libsyntax/ast_map/mod.rs", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/698c1008d6009fc6cf5a4e797cef62b52f7d1e75/src%2Flibsyntax%2Fast_map%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698c1008d6009fc6cf5a4e797cef62b52f7d1e75/src%2Flibsyntax%2Fast_map%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map%2Fmod.rs?ref=698c1008d6009fc6cf5a4e797cef62b52f7d1e75", "patch": "@@ -457,35 +457,32 @@ impl<'ast> Map<'ast> {\n         }\n     }\n \n-    /// Given a node ID and a closure, apply the closure to the array\n-    /// of attributes associated with the AST corresponding to the Node ID\n-    pub fn with_attrs<T, F>(&self, id: NodeId, f: F) -> T where\n-        F: FnOnce(Option<&[Attribute]>) -> T,\n-    {\n-        let attrs = match self.get(id) {\n-            NodeItem(i) => Some(&i.attrs[..]),\n-            NodeForeignItem(fi) => Some(&fi.attrs[..]),\n-            NodeTraitItem(ref tm) => match **tm {\n+    /// Given a node ID, get a list of of attributes associated with the AST\n+    /// corresponding to the Node ID\n+    pub fn attrs(&self, id: NodeId) -> &[Attribute] {\n+        let attrs = match self.find(id) {\n+            Some(NodeItem(i)) => Some(&i.attrs[..]),\n+            Some(NodeForeignItem(fi)) => Some(&fi.attrs[..]),\n+            Some(NodeTraitItem(ref tm)) => match **tm {\n                 RequiredMethod(ref type_m) => Some(&type_m.attrs[..]),\n                 ProvidedMethod(ref m) => Some(&m.attrs[..]),\n                 TypeTraitItem(ref typ) => Some(&typ.attrs[..]),\n             },\n-            NodeImplItem(ref ii) => {\n+            Some(NodeImplItem(ref ii)) => {\n                 match **ii {\n                     MethodImplItem(ref m) => Some(&m.attrs[..]),\n                     TypeImplItem(ref t) => Some(&t.attrs[..]),\n                 }\n             }\n-            NodeVariant(ref v) => Some(&v.node.attrs[..]),\n+            Some(NodeVariant(ref v)) => Some(&v.node.attrs[..]),\n             // unit/tuple structs take the attributes straight from\n             // the struct definition.\n-            // FIXME(eddyb) make this work again (requires access to the map).\n-            NodeStructCtor(_) => {\n-                return self.with_attrs(self.get_parent(id), f);\n+            Some(NodeStructCtor(_)) => {\n+                return self.attrs(self.get_parent(id));\n             }\n             _ => None\n         };\n-        f(attrs)\n+        attrs.unwrap_or(&[])\n     }\n \n     /// Returns an iterator that yields the node id's with paths that"}]}