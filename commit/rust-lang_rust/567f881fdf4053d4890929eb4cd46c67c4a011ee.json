{"sha": "567f881fdf4053d4890929eb4cd46c67c4a011ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2N2Y4ODFmZGY0MDUzZDQ4OTA5MjllYjRjZDQ2YzY3YzRhMDExZWU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-07-31T20:43:20Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-07-31T22:41:26Z"}, "message": "syntax: More tweaks to make alt arrows parse and print correctly", "tree": {"sha": "13b8a25c897d79ade50e7973d6258c2aa5c47223", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13b8a25c897d79ade50e7973d6258c2aa5c47223"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/567f881fdf4053d4890929eb4cd46c67c4a011ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/567f881fdf4053d4890929eb4cd46c67c4a011ee", "html_url": "https://github.com/rust-lang/rust/commit/567f881fdf4053d4890929eb4cd46c67c4a011ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/567f881fdf4053d4890929eb4cd46c67c4a011ee/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c206d024eb31124a5d6536ce1f355c4ac0698cab", "url": "https://api.github.com/repos/rust-lang/rust/commits/c206d024eb31124a5d6536ce1f355c4ac0698cab", "html_url": "https://github.com/rust-lang/rust/commit/c206d024eb31124a5d6536ce1f355c4ac0698cab"}], "stats": {"total": 116, "additions": 67, "deletions": 49}, "files": [{"sha": "80cfd50ea3b8bc02a0fdb617c1e65a1ba9200b3d", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 46, "deletions": 41, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/567f881fdf4053d4890929eb4cd46c67c4a011ee/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/567f881fdf4053d4890929eb4cd46c67c4a011ee/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=567f881fdf4053d4890929eb4cd46c67c4a011ee", "patch": "@@ -761,33 +761,11 @@ class parser {\n             // which affects expr_is_complete().\n             ret self.mk_pexpr(lo, hi, expr_tup(es));\n         } else if self.token == token::LBRACE {\n-            self.bump();\n-            if self.is_keyword(~\"mut\") ||\n-                is_plain_ident(self.token)\n-                && self.look_ahead(1u) == token::COLON {\n-                let mut fields = ~[self.parse_field(token::COLON)];\n-                let mut base = none;\n-                while self.token != token::RBRACE {\n-                    // optional comma before \"with\"\n-                    if self.token == token::COMMA\n-                        && self.token_is_keyword(~\"with\",\n-                                                 self.look_ahead(1u)) {\n-                        self.bump();\n-                    }\n-                    if self.eat_keyword(~\"with\") {\n-                        base = some(self.parse_expr()); break;\n-                    }\n-                    self.expect(token::COMMA);\n-                    if self.token == token::RBRACE {\n-                        // record ends by an optional trailing comma\n-                        break;\n-                    }\n-                    vec::push(fields, self.parse_field(token::COLON));\n-                }\n+            if self.looking_at_record_literal() {\n+                ex = self.parse_record_literal();\n                 hi = self.span.hi;\n-                self.expect(token::RBRACE);\n-                ex = expr_rec(fields, base);\n             } else {\n+                self.bump();\n                 let blk = self.parse_block_tail(lo, default_blk);\n                 ret self.mk_pexpr(blk.span.lo, blk.span.hi, expr_block(blk));\n             }\n@@ -897,25 +875,18 @@ class parser {\n                 ret pexpr(self.mk_mac_expr(lo, hi, mac_invoc_tt(pth, tts)));\n             } else if self.token == token::LBRACE {\n                 // This might be a struct literal.\n-                let lookahead = self.look_ahead(1);\n-                if self.token_is_keyword(~\"mut\", lookahead) ||\n-                        (is_plain_ident(lookahead) &&\n-                         self.look_ahead(2) == token::COLON) {\n-\n+                if self.looking_at_record_literal() {\n                     // It's a struct literal.\n                     self.bump();\n                     let mut fields = ~[];\n-                    if self.is_keyword(~\"mut\") || is_plain_ident(self.token)\n-                            && self.look_ahead(1) == token::COLON {\n-                        vec::push(fields, self.parse_field(token::COLON));\n-                        while self.token != token::RBRACE {\n-                            self.expect(token::COMMA);\n-                            if self.token == token::RBRACE {\n-                                // Accept an optional trailing comma.\n-                                break;\n-                            }\n-                            vec::push(fields, self.parse_field(token::COLON));\n+                    vec::push(fields, self.parse_field(token::COLON));\n+                    while self.token != token::RBRACE {\n+                        self.expect(token::COMMA);\n+                        if self.token == token::RBRACE {\n+                            // Accept an optional trailing comma.\n+                            break;\n                         }\n+                        vec::push(fields, self.parse_field(token::COLON));\n                     }\n \n                     hi = pth.span.hi;\n@@ -1500,6 +1471,39 @@ class parser {\n         ret self.mk_expr(lo, hi, expr_loop(body));\n     }\n \n+    // For distingishing between record literals and blocks\n+    fn looking_at_record_literal() -> bool {\n+        let lookahead = self.look_ahead(1);\n+        self.token_is_keyword(~\"mut\", lookahead) ||\n+            (is_plain_ident(lookahead) &&\n+             self.look_ahead(2) == token::COLON)\n+    }\n+\n+    fn parse_record_literal() -> expr_ {\n+        self.expect(token::LBRACE);\n+        let mut fields = ~[self.parse_field(token::COLON)];\n+        let mut base = none;\n+        while self.token != token::RBRACE {\n+            // optional comma before \"with\"\n+            if self.token == token::COMMA\n+                && self.token_is_keyword(~\"with\",\n+                                         self.look_ahead(1u)) {\n+                self.bump();\n+            }\n+            if self.eat_keyword(~\"with\") {\n+                base = some(self.parse_expr()); break;\n+            }\n+            self.expect(token::COMMA);\n+            if self.token == token::RBRACE {\n+                // record ends by an optional trailing comma\n+                break;\n+            }\n+            vec::push(fields, self.parse_field(token::COLON));\n+        }\n+        self.expect(token::RBRACE);\n+        ret expr_rec(fields, base);\n+    }\n+\n     fn parse_alt_expr() -> @expr {\n         let lo = self.last_span.lo;\n         let mode = if self.eat_keyword(~\"check\") { alt_check }\n@@ -1515,7 +1519,8 @@ class parser {\n                 self.parse_block()\n             } else {\n                 self.bump();\n-                if self.token == token::LBRACE {\n+                if self.token == token::LBRACE\n+                    && !self.looking_at_record_literal() {\n                     self.parse_block()\n                 } else {\n                     let expr = self.parse_expr();"}, {"sha": "3292831c32f2f03605e556b611df7960836432e0", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/567f881fdf4053d4890929eb4cd46c67c4a011ee/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/567f881fdf4053d4890929eb4cd46c67c4a011ee/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=567f881fdf4053d4890929eb4cd46c67c4a011ee", "patch": "@@ -1056,7 +1056,7 @@ fn print_expr(s: ps, &&expr: @ast::expr) {\n               some(expr) => {\n                 end(s); // close the ibox for the pattern\n                 print_expr(s, expr);\n-                if i < len - 1 { word_space(s, ~\",\"); }\n+                if i < len - 1 { word(s.s, ~\",\"); }\n                 end(s); // close enclosing cbox\n               }\n               none => {"}, {"sha": "817a4056f10c5caa4d4737a960673803a6d17baf", "filename": "src/test/pretty/alt-naked-expr-long.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/567f881fdf4053d4890929eb4cd46c67c4a011ee/src%2Ftest%2Fpretty%2Falt-naked-expr-long.rs", "raw_url": "https://github.com/rust-lang/rust/raw/567f881fdf4053d4890929eb4cd46c67c4a011ee/src%2Ftest%2Fpretty%2Falt-naked-expr-long.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Falt-naked-expr-long.rs?ref=567f881fdf4053d4890929eb4cd46c67c4a011ee", "patch": "@@ -8,10 +8,9 @@ fn main() {\n     let y =\n         alt x {\n           some(_) =>\n-          \"some\" + \"very\" + \"very\" + \"very\" + \"very\" + \"very\" + \"very\" +\n-              \"very\" + \"very\" + \"long\" + \"string\",\n-\n-          none => \"none\"\n+          ~\"some\" + ~\"very\" + ~\"very\" + ~\"very\" + ~\"very\" + ~\"very\" +\n+              ~\"very\" + ~\"very\" + ~\"very\" + ~\"long\" + ~\"string\",\n+          none => ~\"none\"\n         };\n-    assert y == \"some(_)\";\n+    assert y == ~\"some(_)\";\n }"}, {"sha": "2df236718576c8f09761db849d1f774f9f283bc0", "filename": "src/test/pretty/alt-naked-expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/567f881fdf4053d4890929eb4cd46c67c4a011ee/src%2Ftest%2Fpretty%2Falt-naked-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/567f881fdf4053d4890929eb4cd46c67c4a011ee/src%2Ftest%2Fpretty%2Falt-naked-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Falt-naked-expr.rs?ref=567f881fdf4053d4890929eb4cd46c67c4a011ee", "patch": "@@ -2,6 +2,6 @@\n \n fn main() {\n     let x = some(3);\n-    let y = alt x { some(_) => \"some(_)\",  none => \"none\" };\n-    assert y == \"some(_)\";\n+    let y = alt x { some(_) => ~\"some(_)\", none => ~\"none\" };\n+    assert y == ~\"some(_)\";\n }"}, {"sha": "2fe2bfefa98a59e89fdef3ed9beb1f5a0010337e", "filename": "src/test/run-pass/alt-naked-record-expr.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/567f881fdf4053d4890929eb4cd46c67c4a011ee/src%2Ftest%2Frun-pass%2Falt-naked-record-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/567f881fdf4053d4890929eb4cd46c67c4a011ee/src%2Ftest%2Frun-pass%2Falt-naked-record-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-naked-record-expr.rs?ref=567f881fdf4053d4890929eb4cd46c67c4a011ee", "patch": "@@ -0,0 +1,7 @@\n+fn main() {\n+    let x = alt 0 {\n+      _ => {\n+        x: 0\n+      }.x\n+    };\n+}"}, {"sha": "76cfb4cd11b46d05439521e4361a1cb83221c649", "filename": "src/test/run-pass/alt-naked-record.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/567f881fdf4053d4890929eb4cd46c67c4a011ee/src%2Ftest%2Frun-pass%2Falt-naked-record.rs", "raw_url": "https://github.com/rust-lang/rust/raw/567f881fdf4053d4890929eb4cd46c67c4a011ee/src%2Ftest%2Frun-pass%2Falt-naked-record.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-naked-record.rs?ref=567f881fdf4053d4890929eb4cd46c67c4a011ee", "patch": "@@ -0,0 +1,7 @@\n+fn main() {\n+    let x = alt 0 {\n+      _ => {\n+        x: 0\n+      }\n+    };\n+}"}]}