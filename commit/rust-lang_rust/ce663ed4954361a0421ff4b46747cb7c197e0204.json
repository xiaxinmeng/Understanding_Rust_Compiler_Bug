{"sha": "ce663ed4954361a0421ff4b46747cb7c197e0204", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlNjYzZWQ0OTU0MzYxYTA0MjFmZjRiNDY3NDdjYjdjMTk3ZTAyMDQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-04T17:59:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-04T17:59:06Z"}, "message": "Merge pull request #3461 from matklad/dist\n\nUse xtask dist for releases", "tree": {"sha": "54ec341a5651c9c808515c2c58881e96c382a811", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54ec341a5651c9c808515c2c58881e96c382a811"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce663ed4954361a0421ff4b46747cb7c197e0204", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeX+xqCRBK7hj4Ov3rIwAAdHIIAEq5julpADaHs29Am3iWGKhb\nQ9CksJ1NqxMQjgUA+eCaCxrJarmFXdqseYhBHs6d2ceCNFAWD4iOFPshs3RnYIuD\n2DxS9nGcR2j+0uQBJ1rKmrOArx0S72x+d0o2kE3UgiU71dPPW57R5mES3K8zZ2rc\nFdwlJh6Iw5TbOEExlROSULZHx5q6ruakBw6DZgeBwJSPA8FRxauBC+u9jFIDD/n6\nWmQno00k++IkkcInFDi+WZVUv+mh05FEDksrfS03jGoJFhKKgOQtp68ntV4M8uKW\nKvINDb1VAmaHgIhYwZVb1Di8ilPKbuCj9C53NNbhkPFpsfQQ+/6K/o5VMDKVrLg=\n=3UI6\n-----END PGP SIGNATURE-----\n", "payload": "tree 54ec341a5651c9c808515c2c58881e96c382a811\nparent cbd34d1bdfa663c185f4b600f983fab7792a6f5a\nparent 6647e817e2f004133d7393171da5033c671ca0f9\nauthor Aleksey Kladov <aleksey.kladov@gmail.com> 1583344746 +0100\ncommitter GitHub <noreply@github.com> 1583344746 +0100\n\nMerge pull request #3461 from matklad/dist\n\nUse xtask dist for releases"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce663ed4954361a0421ff4b46747cb7c197e0204", "html_url": "https://github.com/rust-lang/rust/commit/ce663ed4954361a0421ff4b46747cb7c197e0204", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce663ed4954361a0421ff4b46747cb7c197e0204/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbd34d1bdfa663c185f4b600f983fab7792a6f5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbd34d1bdfa663c185f4b600f983fab7792a6f5a", "html_url": "https://github.com/rust-lang/rust/commit/cbd34d1bdfa663c185f4b600f983fab7792a6f5a"}, {"sha": "6647e817e2f004133d7393171da5033c671ca0f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/6647e817e2f004133d7393171da5033c671ca0f9", "html_url": "https://github.com/rust-lang/rust/commit/6647e817e2f004133d7393171da5033c671ca0f9"}], "stats": {"total": 171, "additions": 92, "deletions": 79}, "files": [{"sha": "4031981a834720a6e7288c73bf82da1691387df0", "filename": ".github/workflows/release.yaml", "status": "modified", "additions": 8, "deletions": 37, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/ce663ed4954361a0421ff4b46747cb7c197e0204/.github%2Fworkflows%2Frelease.yaml", "raw_url": "https://github.com/rust-lang/rust/raw/ce663ed4954361a0421ff4b46747cb7c197e0204/.github%2Fworkflows%2Frelease.yaml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Frelease.yaml?ref=ce663ed4954361a0421ff4b46747cb7c197e0204", "patch": "@@ -41,43 +41,18 @@ jobs:\n         target: x86_64-unknown-linux-musl\n         override: true\n \n-    - name: Create distribution dir\n-      run: mkdir ./dist\n-\n-    - name: Build\n-      if: matrix.os == 'ubuntu-latest'\n-      run: cargo build --package rust-analyzer --bin rust-analyzer --release --target x86_64-unknown-linux-musl\n-      env:\n-        CC: clang\n-\n-    - name: Build VS Code extension\n-      if: matrix.os == 'ubuntu-latest' && github.event_name == 'push'\n+    - name: Dist\n+      if: github.event_name == 'push'\n       run: cargo xtask dist\n \n-    - name: Build VS Code extension\n-      if: matrix.os == 'ubuntu-latest' && github.event_name != 'push'\n+    - name: Dist\n+      if: github.event_name != 'push'\n       run: cargo xtask dist --nightly\n \n-    - name: Build\n-      if: matrix.os != 'ubuntu-latest'\n-      run: cargo build --package rust-analyzer --bin rust-analyzer --release\n-\n-    - name: Copy binary\n-      if: matrix.os == 'ubuntu-latest'\n-      run: cp ./target/x86_64-unknown-linux-musl/release/rust-analyzer ./dist/rust-analyzer-linux && strip ./dist/rust-analyzer-linux\n-\n-    - name: Copy binary\n-      if: matrix.os == 'macos-latest'\n-      run: cp ./target/release/rust-analyzer ./dist/rust-analyzer-mac\n-\n-    - name: Copy binary\n-      if: matrix.os == 'windows-latest'\n-      run: copy ./target/release/rust-analyzer.exe ./dist/rust-analyzer-windows.exe\n-\n     - name: Upload artifacts\n       uses: actions/upload-artifact@v1\n       with:\n-        name: server-${{ matrix.os }}\n+        name: dist-${{ matrix.os }}\n         path: ./dist\n \n   make-release:\n@@ -101,19 +76,15 @@ jobs:\n \n     - uses: actions/download-artifact@v1\n       with:\n-        name: editor-plugins\n-        path: dist\n-    - uses: actions/download-artifact@v1\n-      with:\n-        name: server-macos-latest\n+        name: dist-macos-latest\n         path: dist\n     - uses: actions/download-artifact@v1\n       with:\n-        name: server-ubuntu-latest\n+        name: dist-ubuntu-latest\n         path: dist\n     - uses: actions/download-artifact@v1\n       with:\n-        name: server-windows-latest\n+        name: dist-windows-latest\n         path: dist\n     - run: ls -all ./dist\n "}, {"sha": "cdd3db21cc9367f8a3b95dcb862e0fc61a280119", "filename": "xtask/src/dist.rs", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/ce663ed4954361a0421ff4b46747cb7c197e0204/xtask%2Fsrc%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce663ed4954361a0421ff4b46747cb7c197e0204/xtask%2Fsrc%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fdist.rs?ref=ce663ed4954361a0421ff4b46747cb7c197e0204", "patch": "@@ -0,0 +1,79 @@\n+use std::path::PathBuf;\n+\n+use anyhow::Result;\n+\n+use crate::{\n+    not_bash::{fs2, pushd, pwd, rm_rf, run},\n+    project_root,\n+};\n+\n+pub fn run_dist(nightly: bool) -> Result<()> {\n+    let dist = project_root().join(\"dist\");\n+    rm_rf(&dist)?;\n+    fs2::create_dir_all(&dist)?;\n+\n+    if cfg!(target_os = \"linux\") {\n+        dist_client(nightly)?;\n+    }\n+    dist_server()?;\n+    Ok(())\n+}\n+\n+fn dist_client(nightly: bool) -> Result<()> {\n+    let _d = pushd(\"./editors/code\");\n+\n+    let package_json_path = pwd().join(\"package.json\");\n+    let original_package_json = fs2::read_to_string(&package_json_path)?;\n+    let _restore =\n+        Restore { path: package_json_path.clone(), contents: original_package_json.clone() };\n+\n+    let mut package_json = original_package_json.replace(r#\"\"enableProposedApi\": true,\"#, r#\"\"#);\n+\n+    if nightly {\n+        package_json = package_json\n+            .replace(r#\"\"name\": \"rust-analyzer\"\"#, r#\"\"name\": \"rust-analyzer-nightly\"\"#)\n+            .replace(\n+                r#\"\"displayName\": \"rust-analyzer\"\"#,\n+                r#\"\"displayName\": \"rust-analyzer nightly\"\"#,\n+            );\n+    }\n+    fs2::write(package_json_path, package_json)?;\n+\n+    run!(\"npx vsce package -o ../../dist/rust-analyzer.vsix\")?;\n+    Ok(())\n+}\n+\n+fn dist_server() -> Result<()> {\n+    if cfg!(target_os = \"linux\") {\n+        std::env::set_var(\"CC\", \"clang\");\n+        run!(\"cargo build --package rust-analyzer --bin rust-analyzer --release --target x86_64-unknown-linux-musl\")?;\n+        run!(\"strip ./target/x86_64-unknown-linux-musl/release/rust-analyzer\")?;\n+    } else {\n+        run!(\"cargo build --package rust-analyzer --bin rust-analyzer --release\")?;\n+    }\n+\n+    let (src, dst) = if cfg!(target_os = \"linux\") {\n+        (\"./target/x86_64-unknown-linux-musl/release/rust-analyzer\", \"./dist/rust-analyzer-linux\")\n+    } else if cfg!(target_os = \"windows\") {\n+        (\"/target/release/rust-analyzer.exe\", \"./dist/rust-analyzer-windows.exe\")\n+    } else if cfg!(target_os = \"macos\") {\n+        (\"/target/release/rust-analyzer\", \"./dist/rust-analyzer-mac\")\n+    } else {\n+        panic!(\"Unsupported OS\")\n+    };\n+\n+    fs2::copy(src, dst)?;\n+\n+    Ok(())\n+}\n+\n+struct Restore {\n+    path: PathBuf,\n+    contents: String,\n+}\n+\n+impl Drop for Restore {\n+    fn drop(&mut self) {\n+        fs2::write(&self.path, &self.contents).unwrap();\n+    }\n+}"}, {"sha": "014b61b371e5a2a7f06f9d7bd0ed6a51ac063aa1", "filename": "xtask/src/lib.rs", "status": "modified", "additions": 2, "deletions": 40, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/ce663ed4954361a0421ff4b46747cb7c197e0204/xtask%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce663ed4954361a0421ff4b46747cb7c197e0204/xtask%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Flib.rs?ref=ce663ed4954361a0421ff4b46747cb7c197e0204", "patch": "@@ -4,6 +4,7 @@\n \n pub mod not_bash;\n pub mod install;\n+pub mod dist;\n pub mod pre_commit;\n \n pub mod codegen;\n@@ -19,7 +20,7 @@ use std::{\n \n use crate::{\n     codegen::Mode,\n-    not_bash::{fs2, pushd, pwd, rm_rf, run},\n+    not_bash::{fs2, pushd, rm_rf, run},\n };\n \n pub use anyhow::Result;\n@@ -205,42 +206,3 @@ Release: release:{}[]\n fn is_release_tag(tag: &str) -> bool {\n     tag.len() == \"2020-02-24\".len() && tag.starts_with(|c: char| c.is_ascii_digit())\n }\n-\n-pub fn run_dist(nightly: bool) -> Result<()> {\n-    let dist = project_root().join(\"dist\");\n-    rm_rf(&dist)?;\n-    fs2::create_dir_all(&dist)?;\n-\n-    let _d = pushd(\"./editors/code\");\n-\n-    let package_json_path = pwd().join(\"package.json\");\n-    let original_package_json = fs2::read_to_string(&package_json_path)?;\n-    let _restore =\n-        Restore { path: package_json_path.clone(), contents: original_package_json.clone() };\n-\n-    let mut package_json = original_package_json.replace(r#\"\"enableProposedApi\": true,\"#, r#\"\"#);\n-\n-    if nightly {\n-        package_json = package_json\n-            .replace(r#\"\"name\": \"rust-analyzer\"\"#, r#\"\"name\": \"rust-analyzer-nightly\"\"#)\n-            .replace(\n-                r#\"\"displayName\": \"rust-analyzer\"\"#,\n-                r#\"\"displayName\": \"rust-analyzer nightly\"\"#,\n-            );\n-    }\n-    fs2::write(package_json_path, package_json)?;\n-\n-    run!(\"npx vsce package -o {}/rust-analyzer.vsix\", dist.display())?;\n-    Ok(())\n-}\n-\n-struct Restore {\n-    path: PathBuf,\n-    contents: String,\n-}\n-\n-impl Drop for Restore {\n-    fn drop(&mut self) {\n-        fs2::write(&self.path, &self.contents).unwrap();\n-    }\n-}"}, {"sha": "7c8ea9001888f786a48dca3833f4c75081b12016", "filename": "xtask/src/main.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ce663ed4954361a0421ff4b46747cb7c197e0204/xtask%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce663ed4954361a0421ff4b46747cb7c197e0204/xtask%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fmain.rs?ref=ce663ed4954361a0421ff4b46747cb7c197e0204", "patch": "@@ -13,10 +13,11 @@ use std::env;\n use pico_args::Arguments;\n use xtask::{\n     codegen::{self, Mode},\n+    dist::run_dist,\n     install::{ClientOpt, InstallCmd, ServerOpt},\n     not_bash::pushd,\n-    pre_commit, project_root, run_clippy, run_dist, run_fuzzer, run_pre_cache, run_release,\n-    run_rustfmt, Result,\n+    pre_commit, project_root, run_clippy, run_fuzzer, run_pre_cache, run_release, run_rustfmt,\n+    Result,\n };\n \n fn main() -> Result<()> {"}]}