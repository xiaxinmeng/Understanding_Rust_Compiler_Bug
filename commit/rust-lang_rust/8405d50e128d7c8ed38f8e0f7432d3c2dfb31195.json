{"sha": "8405d50e128d7c8ed38f8e0f7432d3c2dfb31195", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0MDVkNTBlMTI4ZDdjOGVkMzhmOGUwZjc0MzJkM2MyZGZiMzExOTU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-20T13:52:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-20T13:52:01Z"}, "message": "Rollup merge of #76890 - matthiaskrgr:matches_simpl, r=lcnr\n\nuse matches!() macro for simple if let conditions", "tree": {"sha": "d8f86be28992ce8ac5d0789a3bd121d5cb29ad55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8f86be28992ce8ac5d0789a3bd121d5cb29ad55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8405d50e128d7c8ed38f8e0f7432d3c2dfb31195", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfZ16BCRBK7hj4Ov3rIwAAdHIIAKUEc8ZpEDAAOkAxeCnW7e/x\nGipLnBHYovQ5InOrwdb679q7gsZLjmubnlI5cE+bWRTnPIru39vX7vAzmIIs6xTf\ngauu1friGqZbhWAB971GPhhp6vzLt/hKqeOXLTeTlNfDXOhXgUmvXtRKLIYCEk3r\nMFSQfREu2aWR592PGJMAI1Y+E9RJwfMq+nZwgxBmXH01JjPVa0ereEnsRAWwnm3E\nFszgsUMBgESocM1FvLIh3wIRaVKXtNs7nOdhW70gTkadCE2ePi20rkJpZYxWwuPO\nqEhnVQP2btGoeHEA+T380z9R47JnD9izFM9Xv3rGniEUAb+RDVCXSFcCXWECB/c=\n=tdAw\n-----END PGP SIGNATURE-----\n", "payload": "tree d8f86be28992ce8ac5d0789a3bd121d5cb29ad55\nparent f24d279084efa0467369b3578b0d1f4dcae8a687\nparent 40dddd33059344b546a11f150c0ec63e797f021c\nauthor Ralf Jung <post@ralfj.de> 1600609921 +0200\ncommitter GitHub <noreply@github.com> 1600609921 +0200\n\nRollup merge of #76890 - matthiaskrgr:matches_simpl, r=lcnr\n\nuse matches!() macro for simple if let conditions\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8405d50e128d7c8ed38f8e0f7432d3c2dfb31195", "html_url": "https://github.com/rust-lang/rust/commit/8405d50e128d7c8ed38f8e0f7432d3c2dfb31195", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8405d50e128d7c8ed38f8e0f7432d3c2dfb31195/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f24d279084efa0467369b3578b0d1f4dcae8a687", "url": "https://api.github.com/repos/rust-lang/rust/commits/f24d279084efa0467369b3578b0d1f4dcae8a687", "html_url": "https://github.com/rust-lang/rust/commit/f24d279084efa0467369b3578b0d1f4dcae8a687"}, {"sha": "40dddd33059344b546a11f150c0ec63e797f021c", "url": "https://api.github.com/repos/rust-lang/rust/commits/40dddd33059344b546a11f150c0ec63e797f021c", "html_url": "https://github.com/rust-lang/rust/commit/40dddd33059344b546a11f150c0ec63e797f021c"}], "stats": {"total": 69, "additions": 33, "deletions": 36}, "files": [{"sha": "95abf552915063abeece8f75ca747e6cd5460a1c", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8405d50e128d7c8ed38f8e0f7432d3c2dfb31195/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8405d50e128d7c8ed38f8e0f7432d3c2dfb31195/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=8405d50e128d7c8ed38f8e0f7432d3c2dfb31195", "patch": "@@ -1931,7 +1931,7 @@ pub enum TyKind {\n \n impl TyKind {\n     pub fn is_implicit_self(&self) -> bool {\n-        if let TyKind::ImplicitSelf = *self { true } else { false }\n+        matches!(self, TyKind::ImplicitSelf)\n     }\n \n     pub fn is_unit(&self) -> bool {\n@@ -2227,7 +2227,7 @@ pub enum Async {\n \n impl Async {\n     pub fn is_async(self) -> bool {\n-        if let Async::Yes { .. } = self { true } else { false }\n+        matches!(self, Async::Yes { .. })\n     }\n \n     /// In this case this is an `async` return, the `NodeId` for the generated `impl Trait` item.\n@@ -2508,7 +2508,7 @@ pub enum VisibilityKind {\n \n impl VisibilityKind {\n     pub fn is_pub(&self) -> bool {\n-        if let VisibilityKind::Public = *self { true } else { false }\n+        matches!(self, VisibilityKind::Public)\n     }\n }\n "}, {"sha": "232ee35c4f7df82d9d780346c21ed379ce03d70a", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8405d50e128d7c8ed38f8e0f7432d3c2dfb31195/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8405d50e128d7c8ed38f8e0f7432d3c2dfb31195/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=8405d50e128d7c8ed38f8e0f7432d3c2dfb31195", "patch": "@@ -868,10 +868,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     .emit();\n                 }\n \n-                if !bounds\n-                    .iter()\n-                    .any(|b| if let GenericBound::Trait(..) = *b { true } else { false })\n-                {\n+                if !bounds.iter().any(|b| matches!(b, GenericBound::Trait(..))) {\n                     self.err_handler().span_err(ty.span, \"at least one trait must be specified\");\n                 }\n "}, {"sha": "9951c25200129da648036609adeed89640a1a85a", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8405d50e128d7c8ed38f8e0f7432d3c2dfb31195/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8405d50e128d7c8ed38f8e0f7432d3c2dfb31195/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=8405d50e128d7c8ed38f8e0f7432d3c2dfb31195", "patch": "@@ -160,10 +160,10 @@ pub enum StabilityLevel {\n \n impl StabilityLevel {\n     pub fn is_unstable(&self) -> bool {\n-        if let StabilityLevel::Unstable { .. } = *self { true } else { false }\n+        matches!(self, StabilityLevel::Unstable { .. })\n     }\n     pub fn is_stable(&self) -> bool {\n-        if let StabilityLevel::Stable { .. } = *self { true } else { false }\n+        matches!(self, StabilityLevel::Stable { .. })\n     }\n }\n "}, {"sha": "f4924997d1af960ababae9bed61987be0d4e89a5", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8405d50e128d7c8ed38f8e0f7432d3c2dfb31195/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8405d50e128d7c8ed38f8e0f7432d3c2dfb31195/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=8405d50e128d7c8ed38f8e0f7432d3c2dfb31195", "patch": "@@ -1529,7 +1529,7 @@ impl<'a> TraitDef<'a> {\n             }\n         }\n \n-        let is_tuple = if let ast::VariantData::Tuple(..) = struct_def { true } else { false };\n+        let is_tuple = matches!(struct_def, ast::VariantData::Tuple(..));\n         match (just_spans.is_empty(), named_idents.is_empty()) {\n             (false, false) => cx.span_bug(\n                 self.span,"}, {"sha": "fae5b94b3a81edc650fd124051888f4b919e47c7", "filename": "compiler/rustc_errors/src/snippet.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8405d50e128d7c8ed38f8e0f7432d3c2dfb31195/compiler%2Frustc_errors%2Fsrc%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8405d50e128d7c8ed38f8e0f7432d3c2dfb31195/compiler%2Frustc_errors%2Fsrc%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fsnippet.rs?ref=8405d50e128d7c8ed38f8e0f7432d3c2dfb31195", "patch": "@@ -118,17 +118,15 @@ pub struct Annotation {\n impl Annotation {\n     /// Whether this annotation is a vertical line placeholder.\n     pub fn is_line(&self) -> bool {\n-        if let AnnotationType::MultilineLine(_) = self.annotation_type { true } else { false }\n+        matches!(self.annotation_type, AnnotationType::MultilineLine(_))\n     }\n \n     pub fn is_multiline(&self) -> bool {\n-        match self.annotation_type {\n+        matches!(self.annotation_type,\n             AnnotationType::Multiline(_)\n             | AnnotationType::MultilineStart(_)\n             | AnnotationType::MultilineLine(_)\n-            | AnnotationType::MultilineEnd(_) => true,\n-            _ => false,\n-        }\n+            | AnnotationType::MultilineEnd(_))\n     }\n \n     pub fn len(&self) -> usize {"}, {"sha": "32107d621dd6d050f089ea850ef5894aa90e5bca", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8405d50e128d7c8ed38f8e0f7432d3c2dfb31195/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8405d50e128d7c8ed38f8e0f7432d3c2dfb31195/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=8405d50e128d7c8ed38f8e0f7432d3c2dfb31195", "patch": "@@ -1984,9 +1984,9 @@ impl ExplicitOutlivesRequirements {\n             .filter_map(|(i, bound)| {\n                 if let hir::GenericBound::Outlives(lifetime) = bound {\n                     let is_inferred = match tcx.named_region(lifetime.hir_id) {\n-                        Some(Region::Static) if infer_static => inferred_outlives\n-                            .iter()\n-                            .any(|r| if let ty::ReStatic = r { true } else { false }),\n+                        Some(Region::Static) if infer_static => {\n+                            inferred_outlives.iter().any(|r| matches!(r, ty::ReStatic))\n+                        }\n                         Some(Region::EarlyBound(index, ..)) => inferred_outlives.iter().any(|r| {\n                             if let ty::ReEarlyBound(ebr) = r { ebr.index == index } else { false }\n                         }),\n@@ -2078,9 +2078,10 @@ impl<'tcx> LateLintPass<'tcx> for ExplicitOutlivesRequirements {\n             let mut lint_spans = Vec::new();\n \n             for param in hir_generics.params {\n-                let has_lifetime_bounds = param.bounds.iter().any(|bound| {\n-                    if let hir::GenericBound::Outlives(_) = bound { true } else { false }\n-                });\n+                let has_lifetime_bounds = param\n+                    .bounds\n+                    .iter()\n+                    .any(|bound| matches!(bound, hir::GenericBound::Outlives(_)));\n                 if !has_lifetime_bounds {\n                     continue;\n                 }"}, {"sha": "f3d7c8506ab6ff3338ae7cebfb4b6859d4648f3b", "filename": "compiler/rustc_middle/src/middle/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8405d50e128d7c8ed38f8e0f7432d3c2dfb31195/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8405d50e128d7c8ed38f8e0f7432d3c2dfb31195/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs?ref=8405d50e128d7c8ed38f8e0f7432d3c2dfb31195", "patch": "@@ -69,7 +69,7 @@ pub enum LibSource {\n \n impl LibSource {\n     pub fn is_some(&self) -> bool {\n-        if let LibSource::Some(_) = *self { true } else { false }\n+        matches!(self, LibSource::Some(_))\n     }\n \n     pub fn option(&self) -> Option<PathBuf> {"}, {"sha": "7505e6e2dd11e224db3f97f0c0b91372335ac407", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/outlives_suggestion.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8405d50e128d7c8ed38f8e0f7432d3c2dfb31195/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Foutlives_suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8405d50e128d7c8ed38f8e0f7432d3c2dfb31195/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Foutlives_suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Foutlives_suggestion.rs?ref=8405d50e128d7c8ed38f8e0f7432d3c2dfb31195", "patch": "@@ -115,9 +115,10 @@ impl OutlivesSuggestionBuilder {\n             //    should just replace 'a with 'static.\n             // 3) Suggest unifying 'a with 'b if we have both 'a: 'b and 'b: 'a\n \n-            if outlived.iter().any(|(_, outlived_name)| {\n-                if let RegionNameSource::Static = outlived_name.source { true } else { false }\n-            }) {\n+            if outlived\n+                .iter()\n+                .any(|(_, outlived_name)| matches!(outlived_name.source, RegionNameSource::Static))\n+            {\n                 suggested.push(SuggestedConstraint::Static(fr_name));\n             } else {\n                 // We want to isolate out all lifetimes that should be unified and print out"}, {"sha": "01d518386fc4ec589534b87aa0427d4d8fff3eac", "filename": "compiler/rustc_mir/src/transform/promote_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8405d50e128d7c8ed38f8e0f7432d3c2dfb31195/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8405d50e128d7c8ed38f8e0f7432d3c2dfb31195/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=8405d50e128d7c8ed38f8e0f7432d3c2dfb31195", "patch": "@@ -92,7 +92,7 @@ pub enum TempState {\n impl TempState {\n     pub fn is_promotable(&self) -> bool {\n         debug!(\"is_promotable: self={:?}\", self);\n-        if let TempState::Defined { .. } = *self { true } else { false }\n+        matches!(self, TempState::Defined { .. } )\n     }\n }\n "}, {"sha": "3fc8e6d4b04b85e046422e29909ecea88ad60791", "filename": "compiler/rustc_mir/src/transform/simplify.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8405d50e128d7c8ed38f8e0f7432d3c2dfb31195/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8405d50e128d7c8ed38f8e0f7432d3c2dfb31195/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify.rs?ref=8405d50e128d7c8ed38f8e0f7432d3c2dfb31195", "patch": "@@ -281,8 +281,7 @@ impl<'a, 'tcx> CfgSimplifier<'a, 'tcx> {\n \n     fn strip_nops(&mut self) {\n         for blk in self.basic_blocks.iter_mut() {\n-            blk.statements\n-                .retain(|stmt| if let StatementKind::Nop = stmt.kind { false } else { true })\n+            blk.statements.retain(|stmt| !matches!(stmt.kind, StatementKind::Nop))\n         }\n     }\n }"}, {"sha": "beaf12b1db04255bb05e936216c0cb35a9fffd8e", "filename": "compiler/rustc_mir_build/src/build/block.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8405d50e128d7c8ed38f8e0f7432d3c2dfb31195/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8405d50e128d7c8ed38f8e0f7432d3c2dfb31195/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs?ref=8405d50e128d7c8ed38f8e0f7432d3c2dfb31195", "patch": "@@ -96,8 +96,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     );\n                 }\n                 StmtKind::Let { remainder_scope, init_scope, pattern, initializer, lint_level } => {\n-                    let ignores_expr_result =\n-                        if let PatKind::Wild = *pattern.kind { true } else { false };\n+                    let ignores_expr_result = matches!(*pattern.kind, PatKind::Wild);\n                     this.block_context.push(BlockFrame::Statement { ignores_expr_result });\n \n                     // Enter the remainder scope, i.e., the bindings' destruction scope."}, {"sha": "6e9d5eedf051f231c732b2bfd0f8c3686093e90f", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8405d50e128d7c8ed38f8e0f7432d3c2dfb31195/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8405d50e128d7c8ed38f8e0f7432d3c2dfb31195/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=8405d50e128d7c8ed38f8e0f7432d3c2dfb31195", "patch": "@@ -1793,7 +1793,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     .flat_map(|(bindings, _)| bindings)\n                     .chain(&candidate.bindings)\n                     .filter(|binding| {\n-                        if let BindingMode::ByValue = binding.binding_mode { true } else { false }\n+                        matches!(binding.binding_mode, BindingMode::ByValue )\n                     });\n             // Read all of the by reference bindings to ensure that the\n             // place they refer to can't be modified by the guard."}, {"sha": "a48d002b2a35bb772c5e21202a91e743c334bb7d", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8405d50e128d7c8ed38f8e0f7432d3c2dfb31195/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8405d50e128d7c8ed38f8e0f7432d3c2dfb31195/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=8405d50e128d7c8ed38f8e0f7432d3c2dfb31195", "patch": "@@ -395,7 +395,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n         // so prefixes are prepended with crate root segment if necessary.\n         // The root is prepended lazily, when the first non-empty prefix or terminating glob\n         // appears, so imports in braced groups can have roots prepended independently.\n-        let is_glob = if let ast::UseTreeKind::Glob = use_tree.kind { true } else { false };\n+        let is_glob = matches!(use_tree.kind, ast::UseTreeKind::Glob);\n         let crate_root = match prefix_iter.peek() {\n             Some(seg) if !seg.ident.is_path_segment_keyword() && seg.ident.span.rust_2015() => {\n                 Some(seg.ident.span.ctxt())"}, {"sha": "2c01934b490dcc429f8a2b73c98ee59f01b5ada2", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8405d50e128d7c8ed38f8e0f7432d3c2dfb31195/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8405d50e128d7c8ed38f8e0f7432d3c2dfb31195/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=8405d50e128d7c8ed38f8e0f7432d3c2dfb31195", "patch": "@@ -1034,7 +1034,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             let mut add_bindings_for_ns = |ns| {\n                 let parent_rib = self.ribs[ns]\n                     .iter()\n-                    .rfind(|r| if let ItemRibKind(_) = r.kind { true } else { false })\n+                    .rfind(|r| matches!(r.kind, ItemRibKind(_)))\n                     .expect(\"associated item outside of an item\");\n                 seen_bindings\n                     .extend(parent_rib.bindings.iter().map(|(ident, _)| (*ident, ident.span)));"}, {"sha": "af800eab67a5e36386d0ddccc96a4e8a0ac8e03c", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8405d50e128d7c8ed38f8e0f7432d3c2dfb31195/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8405d50e128d7c8ed38f8e0f7432d3c2dfb31195/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=8405d50e128d7c8ed38f8e0f7432d3c2dfb31195", "patch": "@@ -439,9 +439,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // This is maybe too permissive, since it allows\n             // `let u = &raw const Box::new((1,)).0`, which creates an\n             // immediately dangling raw pointer.\n-            self.typeck_results.borrow().adjustments().get(base.hir_id).map_or(false, |x| {\n-                x.iter().any(|adj| if let Adjust::Deref(_) = adj.kind { true } else { false })\n-            })\n+            self.typeck_results\n+                .borrow()\n+                .adjustments()\n+                .get(base.hir_id)\n+                .map_or(false, |x| x.iter().any(|adj| matches!(adj.kind, Adjust::Deref(_))))\n         });\n         if !is_named {\n             self.tcx.sess.emit_err(AddressOfTemporaryTaken { span: oprnd.span })"}]}