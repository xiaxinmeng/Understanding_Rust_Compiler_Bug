{"sha": "81b8db2675330c5d7c0af2db2b90311bd1aec976", "node_id": "C_kwDOAAsO6NoAKDgxYjhkYjI2NzUzMzBjNWQ3YzBhZjJkYjJiOTAzMTFiZDFhZWM5NzY", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-11-07T13:05:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-07T13:05:26Z"}, "message": "Rollup merge of #104090 - wanghaha-dev:master, r=Dylan-DPC\n\nModify comment syntax error\n\nModify comment syntax error", "tree": {"sha": "4ce8bf55322bb25a4e774b14b8a359c764891dd2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ce8bf55322bb25a4e774b14b8a359c764891dd2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81b8db2675330c5d7c0af2db2b90311bd1aec976", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjaQKWCRBK7hj4Ov3rIwAAnAoIAKK/DWDgyomaf/1hIVBZjFXI\nB+8Ym1i7qLMtuFbzU4xP5sPCADfT9Xm00NcGGS05X7OGeupAotG9ZUZXfjb95dN1\nAIU2QEYInSvjz1JQuVAG6wtiFkzQyXxx8OuabMFhe/QJzv5n/2U4OxWERwNgxlAa\nERo/RL2IkBh34OGbSZaAASeOMtfH3LcM748uY+HZWiMOZFRw6RspFV63AW3Iq5eF\nMtMIBGsgZ5BpCLzf5jZMDNAA7TRttdSx7mkb52enZT3n75Q2KcGb3ga5OsKZIf7K\nN7Qz1DYueTznH6Hjy7gWSxvNV5T1P5I6PVz+TBBmisoEhOB6+j03byvyf31K7WI=\n=5p2n\n-----END PGP SIGNATURE-----\n", "payload": "tree 4ce8bf55322bb25a4e774b14b8a359c764891dd2\nparent 498efa62736b7143a3c5e2104e23e317c75f54cf\nparent 009f80b987214aaae42c94d2fc8a33aaf689ab69\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1667826326 +0530\ncommitter GitHub <noreply@github.com> 1667826326 +0530\n\nRollup merge of #104090 - wanghaha-dev:master, r=Dylan-DPC\n\nModify comment syntax error\n\nModify comment syntax error\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81b8db2675330c5d7c0af2db2b90311bd1aec976", "html_url": "https://github.com/rust-lang/rust/commit/81b8db2675330c5d7c0af2db2b90311bd1aec976", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81b8db2675330c5d7c0af2db2b90311bd1aec976/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "498efa62736b7143a3c5e2104e23e317c75f54cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/498efa62736b7143a3c5e2104e23e317c75f54cf", "html_url": "https://github.com/rust-lang/rust/commit/498efa62736b7143a3c5e2104e23e317c75f54cf"}, {"sha": "009f80b987214aaae42c94d2fc8a33aaf689ab69", "url": "https://api.github.com/repos/rust-lang/rust/commits/009f80b987214aaae42c94d2fc8a33aaf689ab69", "html_url": "https://github.com/rust-lang/rust/commit/009f80b987214aaae42c94d2fc8a33aaf689ab69"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "4612f54e4b17639292af0024191668a74d41f922", "filename": "compiler/rustc_macros/src/diagnostics/error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81b8db2675330c5d7c0af2db2b90311bd1aec976/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81b8db2675330c5d7c0af2db2b90311bd1aec976/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Ferror.rs?ref=81b8db2675330c5d7c0af2db2b90311bd1aec976", "patch": "@@ -84,7 +84,7 @@ pub(crate) fn invalid_attr(attr: &Attribute, meta: &Meta) -> Diagnostic {\n     }\n }\n \n-/// Emit a error diagnostic for an invalid attribute (optionally performing additional decoration\n+/// Emit an error diagnostic for an invalid attribute (optionally performing additional decoration\n /// using the `FnOnce` passed in `diag`) and return `Err(ErrorHandled)`.\n ///\n /// For methods that return a `Result<_, DiagnosticDeriveError>`:\n@@ -126,7 +126,7 @@ pub(crate) fn invalid_nested_attr(attr: &Attribute, nested: &NestedMeta) -> Diag\n     }\n }\n \n-/// Emit a error diagnostic for an invalid nested attribute (optionally performing additional\n+/// Emit an error diagnostic for an invalid nested attribute (optionally performing additional\n /// decoration using the `FnOnce` passed in `diag`) and return `Err(ErrorHandled)`.\n ///\n /// For methods that return a `Result<_, DiagnosticDeriveError>`:"}, {"sha": "3e0b0f735508e5859c382937b2bced3e8597eb95", "filename": "library/alloc/src/collections/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81b8db2675330c5d7c0af2db2b90311bd1aec976/library%2Falloc%2Fsrc%2Fcollections%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81b8db2675330c5d7c0af2db2b90311bd1aec976/library%2Falloc%2Fsrc%2Fcollections%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fmod.rs?ref=81b8db2675330c5d7c0af2db2b90311bd1aec976", "patch": "@@ -139,7 +139,7 @@ impl Display for TryReserveError {\n                 \" because the computed capacity exceeded the collection's maximum\"\n             }\n             TryReserveErrorKind::AllocError { .. } => {\n-                \" because the memory allocator returned a error\"\n+                \" because the memory allocator returned an error\"\n             }\n         };\n         fmt.write_str(reason)"}, {"sha": "99a7949db173c862b45287a1794b5ff42a5be85b", "filename": "src/test/ui/conditional-compilation/cfg_accessible-not_sure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81b8db2675330c5d7c0af2db2b90311bd1aec976/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible-not_sure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81b8db2675330c5d7c0af2db2b90311bd1aec976/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible-not_sure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible-not_sure.rs?ref=81b8db2675330c5d7c0af2db2b90311bd1aec976", "patch": "@@ -46,7 +46,7 @@ const C: bool = true;\n trait Trait {}\n impl dyn Trait { fn existing() {} }\n \n-// FIXME: Should be a error for edition > 2015\n+// FIXME: Should be an error for edition > 2015\n #[cfg_accessible(Trait::existing)] //~ ERROR not sure\n const A: bool = true;\n #[cfg_accessible(Trait::unresolved)] //~ ERROR not sure"}]}