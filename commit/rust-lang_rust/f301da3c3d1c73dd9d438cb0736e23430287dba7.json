{"sha": "f301da3c3d1c73dd9d438cb0736e23430287dba7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzMDFkYTNjM2QxYzczZGQ5ZDQzOGNiMDczNmUyMzQzMDI4N2RiYTc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-01-22T17:11:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-22T17:11:48Z"}, "message": "Merge #7399\n\n7399: Make `ModuleId`'s `krate` field private and audit uses r=jonas-schievink a=jonas-schievink\n\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "586329f5641c520ef61d626736e492e33b227e25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/586329f5641c520ef61d626736e492e33b227e25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f301da3c3d1c73dd9d438cb0736e23430287dba7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgCwdUCRBK7hj4Ov3rIwAAdHIIAJaQ0cWCvCPzr9YuEIQojZvg\nqO0zKG//88bK8qEi5S8FKLx4L+9bVj4hwi3ZLBrFI8gTj8kS75NPrMiQXJsU4F94\nMGX0+Am8ikYKdP3J7UPqNeMVnNfFqf7Y6VRTzl2PjCVwyL8A52oWnX/7YPQP06jq\nfb4VpT1JhyONAhaUH032pd1RAB1lxypPimlHIh0cF2XVipGNcwGQS/qBJQZstMcW\nmBvba7eA0TTWZRmev/zWw3CrhqSNDyDHs9S/0wAvk2Dh3VEwdXyc3tEwwm6TYnRl\nGhAE2rWmgVgWB+ASm1/5hTyKlXm/0UQu7X8lamrN6tPHHsmQv45IUQP0HY45jLo=\n=VtdF\n-----END PGP SIGNATURE-----\n", "payload": "tree 586329f5641c520ef61d626736e492e33b227e25\nparent b982db88bed5e94913460dce7cd2b728ba925475\nparent 3de8f57c51192fa8e57713a3580c2bcc6907a194\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1611335508 +0000\ncommitter GitHub <noreply@github.com> 1611335508 +0000\n\nMerge #7399\n\n7399: Make `ModuleId`'s `krate` field private and audit uses r=jonas-schievink a=jonas-schievink\n\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f301da3c3d1c73dd9d438cb0736e23430287dba7", "html_url": "https://github.com/rust-lang/rust/commit/f301da3c3d1c73dd9d438cb0736e23430287dba7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f301da3c3d1c73dd9d438cb0736e23430287dba7/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b982db88bed5e94913460dce7cd2b728ba925475", "url": "https://api.github.com/repos/rust-lang/rust/commits/b982db88bed5e94913460dce7cd2b728ba925475", "html_url": "https://github.com/rust-lang/rust/commit/b982db88bed5e94913460dce7cd2b728ba925475"}, {"sha": "3de8f57c51192fa8e57713a3580c2bcc6907a194", "url": "https://api.github.com/repos/rust-lang/rust/commits/3de8f57c51192fa8e57713a3580c2bcc6907a194", "html_url": "https://github.com/rust-lang/rust/commit/3de8f57c51192fa8e57713a3580c2bcc6907a194"}], "stats": {"total": 100, "additions": 62, "deletions": 38}, "files": [{"sha": "d9b4cdfcef9ef827507c7eb29afb0e2c849853ab", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 32, "deletions": 19, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/f301da3c3d1c73dd9d438cb0736e23430287dba7/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f301da3c3d1c73dd9d438cb0736e23430287dba7/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=f301da3c3d1c73dd9d438cb0736e23430287dba7", "patch": "@@ -270,13 +270,13 @@ impl ModuleDef {\n             None => return,\n         };\n \n-        hir_ty::diagnostics::validate_module_item(db, module.id.krate, id, sink)\n+        hir_ty::diagnostics::validate_module_item(db, module.id.krate(), id, sink)\n     }\n }\n \n impl Module {\n     pub(crate) fn new(krate: Crate, crate_module_id: LocalModuleId) -> Module {\n-        Module { id: ModuleId { krate: krate.id, local_id: crate_module_id } }\n+        Module { id: ModuleId::top_level(krate.id, crate_module_id) }\n     }\n \n     /// Name of this module.\n@@ -294,14 +294,14 @@ impl Module {\n \n     /// Returns the crate this module is part of.\n     pub fn krate(self) -> Crate {\n-        Crate { id: self.id.krate }\n+        Crate { id: self.id.krate() }\n     }\n \n     /// Topmost parent of this module. Every module has a `crate_root`, but some\n     /// might be missing `krate`. This can happen if a module's file is not included\n     /// in the module tree of any target in `Cargo.toml`.\n     pub fn crate_root(self, db: &dyn HirDatabase) -> Module {\n-        let def_map = db.crate_def_map(self.id.krate);\n+        let def_map = db.crate_def_map(self.id.krate());\n         self.with_module_id(def_map.root())\n     }\n \n@@ -318,6 +318,7 @@ impl Module {\n \n     /// Finds a parent module.\n     pub fn parent(self, db: &dyn HirDatabase) -> Option<Module> {\n+        // FIXME: handle block expressions as modules (their parent is in a different DefMap)\n         let def_map = self.id.def_map(db.upcast());\n         let parent_id = def_map[self.id.local_id].parent?;\n         Some(self.with_module_id(parent_id))\n@@ -457,7 +458,7 @@ impl Field {\n         };\n         let substs = Substs::type_params(db, generic_def_id);\n         let ty = db.field_types(var_id)[self.id].clone().subst(&substs);\n-        Type::new(db, self.parent.module(db).id.krate, var_id, ty)\n+        Type::new(db, self.parent.module(db).id.krate(), var_id, ty)\n     }\n \n     pub fn parent_def(&self, _db: &dyn HirDatabase) -> VariantDef {\n@@ -502,7 +503,11 @@ impl Struct {\n     }\n \n     pub fn ty(self, db: &dyn HirDatabase) -> Type {\n-        Type::from_def(db, self.id.lookup(db.upcast()).container.module(db.upcast()).krate, self.id)\n+        Type::from_def(\n+            db,\n+            self.id.lookup(db.upcast()).container.module(db.upcast()).krate(),\n+            self.id,\n+        )\n     }\n \n     pub fn repr(self, db: &dyn HirDatabase) -> Option<ReprKind> {\n@@ -533,7 +538,11 @@ impl Union {\n     }\n \n     pub fn ty(self, db: &dyn HirDatabase) -> Type {\n-        Type::from_def(db, self.id.lookup(db.upcast()).container.module(db.upcast()).krate, self.id)\n+        Type::from_def(\n+            db,\n+            self.id.lookup(db.upcast()).container.module(db.upcast()).krate(),\n+            self.id,\n+        )\n     }\n \n     pub fn fields(self, db: &dyn HirDatabase) -> Vec<Field> {\n@@ -573,7 +582,11 @@ impl Enum {\n     }\n \n     pub fn ty(self, db: &dyn HirDatabase) -> Type {\n-        Type::from_def(db, self.id.lookup(db.upcast()).container.module(db.upcast()).krate, self.id)\n+        Type::from_def(\n+            db,\n+            self.id.lookup(db.upcast()).container.module(db.upcast()).krate(),\n+            self.id,\n+        )\n     }\n }\n \n@@ -632,7 +645,7 @@ impl Adt {\n     /// general set of completions, but will not look very nice when printed.\n     pub fn ty(self, db: &dyn HirDatabase) -> Type {\n         let id = AdtId::from(self);\n-        Type::from_def(db, id.module(db.upcast()).krate, id)\n+        Type::from_def(db, id.module(db.upcast()).krate(), id)\n     }\n \n     pub fn module(self, db: &dyn HirDatabase) -> Module {\n@@ -750,7 +763,7 @@ impl Function {\n         let ctx = hir_ty::TyLoweringContext::new(db, &resolver);\n         let environment = TraitEnvironment::lower(db, &resolver);\n         Type {\n-            krate: self.id.lookup(db.upcast()).container.module(db.upcast()).krate,\n+            krate: self.id.lookup(db.upcast()).container.module(db.upcast()).krate(),\n             ty: InEnvironment { value: Ty::from_hir_ext(&ctx, ret_type).0, environment },\n         }\n     }\n@@ -771,7 +784,7 @@ impl Function {\n             .iter()\n             .map(|type_ref| {\n                 let ty = Type {\n-                    krate: self.id.lookup(db.upcast()).container.module(db.upcast()).krate,\n+                    krate: self.id.lookup(db.upcast()).container.module(db.upcast()).krate(),\n                     ty: InEnvironment {\n                         value: Ty::from_hir_ext(&ctx, type_ref).0,\n                         environment: environment.clone(),\n@@ -795,7 +808,7 @@ impl Function {\n     }\n \n     pub fn diagnostics(self, db: &dyn HirDatabase, sink: &mut DiagnosticSink) {\n-        let krate = self.module(db).id.krate;\n+        let krate = self.module(db).id.krate();\n         hir_def::diagnostics::validate_body(db.upcast(), self.id.into(), sink);\n         hir_ty::diagnostics::validate_module_item(db, krate, self.id.into(), sink);\n         hir_ty::diagnostics::validate_body(db, self.id.into(), sink);\n@@ -973,7 +986,7 @@ impl TypeAlias {\n     }\n \n     pub fn ty(self, db: &dyn HirDatabase) -> Type {\n-        Type::from_def(db, self.id.lookup(db.upcast()).module(db.upcast()).krate, self.id)\n+        Type::from_def(db, self.id.lookup(db.upcast()).module(db.upcast()).krate(), self.id)\n     }\n \n     pub fn name(self, db: &dyn HirDatabase) -> Name {\n@@ -1230,7 +1243,7 @@ impl Local {\n         let def = DefWithBodyId::from(self.parent);\n         let infer = db.infer(def);\n         let ty = infer[self.pat_id].clone();\n-        let krate = def.module(db.upcast()).krate;\n+        let krate = def.module(db.upcast()).krate();\n         Type::new(db, krate, def, ty)\n     }\n \n@@ -1318,7 +1331,7 @@ impl TypeParam {\n         let environment = TraitEnvironment::lower(db, &resolver);\n         let ty = Ty::Placeholder(self.id);\n         Type {\n-            krate: self.id.parent.module(db.upcast()).krate,\n+            krate: self.id.parent.module(db.upcast()).krate(),\n             ty: InEnvironment { value: ty, environment },\n         }\n     }\n@@ -1344,7 +1357,7 @@ impl TypeParam {\n         let subst = Substs::type_params(db, self.id.parent);\n         let ty = ty.subst(&subst.prefix(local_idx));\n         Some(Type {\n-            krate: self.id.parent.module(db.upcast()).krate,\n+            krate: self.id.parent.module(db.upcast()).krate(),\n             ty: InEnvironment { value: ty, environment },\n         })\n     }\n@@ -1405,7 +1418,7 @@ impl ConstParam {\n \n     pub fn ty(self, db: &dyn HirDatabase) -> Type {\n         let def = self.id.parent;\n-        let krate = def.module(db.upcast()).krate;\n+        let krate = def.module(db.upcast()).krate();\n         Type::new(db, krate, def, db.const_param_ty(self.id))\n     }\n }\n@@ -1440,7 +1453,7 @@ impl Impl {\n         let environment = TraitEnvironment::lower(db, &resolver);\n         let ty = Ty::from_hir(&ctx, &impl_data.target_type);\n         Type {\n-            krate: self.id.lookup(db.upcast()).container.module(db.upcast()).krate,\n+            krate: self.id.lookup(db.upcast()).container.module(db.upcast()).krate(),\n             ty: InEnvironment { value: ty, environment },\n         }\n     }\n@@ -1458,7 +1471,7 @@ impl Impl {\n     }\n \n     pub fn krate(self, db: &dyn HirDatabase) -> Crate {\n-        Crate { id: self.module(db).id.krate }\n+        Crate { id: self.module(db).id.krate() }\n     }\n \n     pub fn is_builtin_derive(self, db: &dyn HirDatabase) -> Option<InFile<ast::Attr>> {"}, {"sha": "faede326994fe470e834c619f517fe9408ef7e57", "filename": "crates/hir/src/semantics/source_to_def.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f301da3c3d1c73dd9d438cb0736e23430287dba7/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f301da3c3d1c73dd9d438cb0736e23430287dba7/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs?ref=f301da3c3d1c73dd9d438cb0736e23430287dba7", "patch": "@@ -36,7 +36,7 @@ impl SourceToDefCtx<'_, '_> {\n             let local_id = crate_def_map.modules_for_file(file).next()?;\n             Some((crate_id, local_id))\n         })?;\n-        Some(ModuleId { krate, local_id })\n+        Some(ModuleId::top_level(krate, local_id))\n     }\n \n     pub(super) fn module_to_def(&mut self, src: InFile<ast::Module>) -> Option<ModuleId> {\n@@ -63,7 +63,8 @@ impl SourceToDefCtx<'_, '_> {\n         let child_name = src.value.name()?.as_name();\n         let def_map = parent_module.def_map(self.db.upcast());\n         let child_id = *def_map[parent_module.local_id].children.get(&child_name)?;\n-        Some(ModuleId { krate: parent_module.krate, local_id: child_id })\n+        // FIXME: handle block expression modules\n+        Some(ModuleId::top_level(parent_module.krate(), child_id))\n     }\n \n     pub(super) fn trait_to_def(&mut self, src: InFile<ast::Trait>) -> Option<TraitId> {\n@@ -186,7 +187,7 @@ impl SourceToDefCtx<'_, '_> {\n     ) -> Option<MacroDefId> {\n         let kind = MacroDefKind::Declarative;\n         let file_id = src.file_id.original_file(self.db.upcast());\n-        let krate = self.file_to_def(file_id)?.krate;\n+        let krate = self.file_to_def(file_id)?.krate();\n         let file_ast_id = self.db.ast_id_map(src.file_id).ast_id(&src.value);\n         let ast_id = Some(AstId::new(src.file_id, file_ast_id.upcast()));\n         Some(MacroDefId { krate, ast_id, kind, local_inner: false })"}, {"sha": "c8dbb2aeb3b8ea4fa4e47215484d51aa5d82e2af", "filename": "crates/hir_def/src/lib.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f301da3c3d1c73dd9d438cb0736e23430287dba7/crates%2Fhir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f301da3c3d1c73dd9d438cb0736e23430287dba7/crates%2Fhir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Flib.rs?ref=f301da3c3d1c73dd9d438cb0736e23430287dba7", "patch": "@@ -73,14 +73,22 @@ use stdx::impl_from;\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct ModuleId {\n-    pub krate: CrateId,\n+    krate: CrateId,\n     pub local_id: LocalModuleId,\n }\n \n impl ModuleId {\n+    pub fn top_level(krate: CrateId, local_id: LocalModuleId) -> Self {\n+        Self { krate, local_id }\n+    }\n+\n     pub fn def_map(&self, db: &dyn db::DefDatabase) -> Arc<DefMap> {\n         db.crate_def_map(self.krate)\n     }\n+\n+    pub fn krate(&self) -> CrateId {\n+        self.krate\n+    }\n }\n \n /// An ID of a module, **local** to a specific crate"}, {"sha": "38a043c4807a558162c0e51d6dfcab2c0b079544", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f301da3c3d1c73dd9d438cb0736e23430287dba7/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f301da3c3d1c73dd9d438cb0736e23430287dba7/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=f301da3c3d1c73dd9d438cb0736e23430287dba7", "patch": "@@ -617,7 +617,7 @@ impl HirDisplay for FnSig {\n }\n \n fn fn_traits(db: &dyn DefDatabase, trait_: TraitId) -> impl Iterator<Item = TraitId> {\n-    let krate = trait_.lookup(db).container.module(db).krate;\n+    let krate = trait_.lookup(db).container.module(db).krate();\n     let fn_traits = [\n         db.lang_item(krate, \"fn\".into()),\n         db.lang_item(krate, \"fn_mut\".into()),"}, {"sha": "d47f975d29fe7f9802ab8b718440d51a2e2c251a", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f301da3c3d1c73dd9d438cb0736e23430287dba7/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f301da3c3d1c73dd9d438cb0736e23430287dba7/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=f301da3c3d1c73dd9d438cb0736e23430287dba7", "patch": "@@ -211,19 +211,21 @@ impl TypeCtor {\n             | TypeCtor::Tuple { .. } => None,\n             // Closure's krate is irrelevant for coherence I would think?\n             TypeCtor::Closure { .. } => None,\n-            TypeCtor::Adt(adt) => Some(adt.module(db.upcast()).krate),\n+            TypeCtor::Adt(adt) => Some(adt.module(db.upcast()).krate()),\n             TypeCtor::FnDef(callable) => Some(callable.krate(db)),\n             TypeCtor::AssociatedType(type_alias) => {\n-                Some(type_alias.lookup(db.upcast()).module(db.upcast()).krate)\n+                Some(type_alias.lookup(db.upcast()).module(db.upcast()).krate())\n             }\n             TypeCtor::ForeignType(type_alias) => {\n-                Some(type_alias.lookup(db.upcast()).module(db.upcast()).krate)\n+                Some(type_alias.lookup(db.upcast()).module(db.upcast()).krate())\n             }\n             TypeCtor::OpaqueType(opaque_ty_id) => match opaque_ty_id {\n                 OpaqueTyId::ReturnTypeImplTrait(func, _) => {\n-                    Some(func.lookup(db.upcast()).module(db.upcast()).krate)\n+                    Some(func.lookup(db.upcast()).module(db.upcast()).krate())\n+                }\n+                OpaqueTyId::AsyncBlockTypeImplTrait(def, _) => {\n+                    Some(def.module(db.upcast()).krate())\n                 }\n-                OpaqueTyId::AsyncBlockTypeImplTrait(def, _) => Some(def.module(db.upcast()).krate),\n             },\n         }\n     }\n@@ -870,7 +872,7 @@ impl Ty {\n             Ty::Apply(ApplicationTy { ctor: TypeCtor::OpaqueType(opaque_ty_id), .. }) => {\n                 match opaque_ty_id {\n                     OpaqueTyId::AsyncBlockTypeImplTrait(def, _expr) => {\n-                        let krate = def.module(db.upcast()).krate;\n+                        let krate = def.module(db.upcast()).krate();\n                         if let Some(future_trait) = db\n                             .lang_item(krate, \"future_trait\".into())\n                             .and_then(|item| item.as_trait())"}, {"sha": "dfb573ff37b0e71bdd9935b017347d1fe57c8546", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f301da3c3d1c73dd9d438cb0736e23430287dba7/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f301da3c3d1c73dd9d438cb0736e23430287dba7/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=f301da3c3d1c73dd9d438cb0736e23430287dba7", "patch": "@@ -1147,7 +1147,7 @@ impl CallableDefId {\n             CallableDefId::StructId(s) => s.lookup(db).container.module(db),\n             CallableDefId::EnumVariantId(e) => e.parent.lookup(db).container.module(db),\n         }\n-        .krate\n+        .krate()\n     }\n }\n "}, {"sha": "a302456b0906edb31a81f753a0f08a471ce3685f", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f301da3c3d1c73dd9d438cb0736e23430287dba7/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f301da3c3d1c73dd9d438cb0736e23430287dba7/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=f301da3c3d1c73dd9d438cb0736e23430287dba7", "patch": "@@ -248,12 +248,12 @@ impl Ty {\n         let lang_item_targets = match self {\n             Ty::Apply(a_ty) => match a_ty.ctor {\n                 TypeCtor::Adt(def_id) => {\n-                    return Some(std::iter::once(def_id.module(db.upcast()).krate).collect())\n+                    return Some(std::iter::once(def_id.module(db.upcast()).krate()).collect())\n                 }\n                 TypeCtor::ForeignType(type_alias_id) => {\n                     return Some(\n                         std::iter::once(\n-                            type_alias_id.lookup(db.upcast()).module(db.upcast()).krate,\n+                            type_alias_id.lookup(db.upcast()).module(db.upcast()).krate(),\n                         )\n                         .collect(),\n                     )\n@@ -280,7 +280,7 @@ impl Ty {\n                 LangItemTarget::ImplDefId(it) => Some(it),\n                 _ => None,\n             })\n-            .map(|it| it.lookup(db.upcast()).container.module(db.upcast()).krate)\n+            .map(|it| it.lookup(db.upcast()).container.module(db.upcast()).krate())\n             .collect();\n         Some(res)\n     }"}, {"sha": "09696fcf46451399cc8325aeb29719c068edd68d", "filename": "crates/hir_ty/src/test_db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f301da3c3d1c73dd9d438cb0736e23430287dba7/crates%2Fhir_ty%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f301da3c3d1c73dd9d438cb0736e23430287dba7/crates%2Fhir_ty%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftest_db.rs?ref=f301da3c3d1c73dd9d438cb0736e23430287dba7", "patch": "@@ -83,7 +83,7 @@ impl TestDB {\n             let crate_def_map = self.crate_def_map(krate);\n             for (local_id, data) in crate_def_map.modules() {\n                 if data.origin.file_id() == Some(file_id) {\n-                    return ModuleId { krate, local_id };\n+                    return ModuleId::top_level(krate, local_id);\n                 }\n             }\n         }"}, {"sha": "7386a4e7ba0f16ea62bb7df99fe683d98978bc00", "filename": "crates/hir_ty/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f301da3c3d1c73dd9d438cb0736e23430287dba7/crates%2Fhir_ty%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f301da3c3d1c73dd9d438cb0736e23430287dba7/crates%2Fhir_ty%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests.rs?ref=f301da3c3d1c73dd9d438cb0736e23430287dba7", "patch": "@@ -343,7 +343,7 @@ fn typing_whitespace_inside_a_function_should_not_invalidate_types() {\n     {\n         let events = db.log_executed(|| {\n             let module = db.module_for_file(pos.file_id);\n-            let crate_def_map = db.crate_def_map(module.krate);\n+            let crate_def_map = module.def_map(&db);\n             visit_module(&db, &crate_def_map, module.local_id, &mut |def| {\n                 db.infer(def);\n             });"}, {"sha": "cfb756158c0be973c486b80ed6bbc78408e1ac29", "filename": "crates/hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f301da3c3d1c73dd9d438cb0736e23430287dba7/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f301da3c3d1c73dd9d438cb0736e23430287dba7/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=f301da3c3d1c73dd9d438cb0736e23430287dba7", "patch": "@@ -426,7 +426,7 @@ pub(crate) fn trait_datum_query(\n     let bound_vars = Substs::bound_vars(&generic_params, DebruijnIndex::INNERMOST);\n     let flags = rust_ir::TraitFlags {\n         auto: trait_data.auto,\n-        upstream: trait_.lookup(db.upcast()).container.module(db.upcast()).krate != krate,\n+        upstream: trait_.lookup(db.upcast()).container.module(db.upcast()).krate() != krate,\n         non_enumerable: true,\n         coinductive: false, // only relevant for Chalk testing\n         // FIXME: set these flags correctly\n@@ -549,7 +549,7 @@ fn impl_def_datum(\n     let generic_params = generics(db.upcast(), impl_id.into());\n     let bound_vars = Substs::bound_vars(&generic_params, DebruijnIndex::INNERMOST);\n     let trait_ = trait_ref.trait_;\n-    let impl_type = if impl_id.lookup(db.upcast()).container.module(db.upcast()).krate == krate {\n+    let impl_type = if impl_id.lookup(db.upcast()).container.module(db.upcast()).krate() == krate {\n         rust_ir::ImplType::Local\n     } else {\n         rust_ir::ImplType::External"}]}