{"sha": "ed6c7b751dd427d6b10825c9d6bbcca08e769fa9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkNmM3Yjc1MWRkNDI3ZDZiMTA4MjVjOWQ2YmJjY2EwOGU3NjlmYTk=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-11-25T16:05:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-25T16:05:04Z"}, "message": "Rollup merge of #56144 - tromey:Bug-55771-btreemap, r=alexcrichton\n\nFix BTreeSet and BTreeMap gdb pretty-printers\n\nThe BTreeSet and BTreeMap gdb pretty-printers did not take the node\nstructure into account, and consequently only worked for shallow sets.\nThis fixes the problem by iterating over child nodes when needed.\n\nThis patch avoids the current approach of implementing some of the\nvalue manipulations in debugger-indepdendent code.  This was done for\nconvenience: a type lookup was needed for the first time, and there\ncurrently are no lldb formatters for these types.\n\nCloses #55771", "tree": {"sha": "edb071d761f94eaa2f7f95942b978cd99e7d362b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/edb071d761f94eaa2f7f95942b978cd99e7d362b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed6c7b751dd427d6b10825c9d6bbcca08e769fa9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb+sgwCRBK7hj4Ov3rIwAAdHIIAKqbbl+HnE66XBkiLMMvPyvM\nbvnhk8dyGDhOrwWQZsQ++dGZzeGuKzZNCePU89yyRrtYW1NnExYQ+7ZlZDG75te3\nfO5cWZSB59InoTg7YctIlvnvx1MCaxFSJaDqvHQWOykpPBLGC9PiDeW34vSUHlyj\nSCZVznI4Xen+r3ZpMfYxe4fF1Viieuhw7X3+AZG47Mk+2CZGBWY1n8F5XaVtQwwB\no+RqQ4kUn9UKPgYC0BctwQCjTiYE/gXH3JFCBdh0LOcjA6awT8AUZBh4CK9FVYiY\n8FGoydUTs6k7re7u7fInOlGd8Z9BgwP3skn7Fa/RZHqjdoPPCpGJm7unKBROtX8=\n=rCIu\n-----END PGP SIGNATURE-----\n", "payload": "tree edb071d761f94eaa2f7f95942b978cd99e7d362b\nparent 6398df1520638c68bb75daa33d64c75387c26b1f\nparent d4ee1c93ff25a7fa6f5e35dc774a648a7e6d578e\nauthor Pietro Albini <pietro@pietroalbini.org> 1543161904 +0100\ncommitter GitHub <noreply@github.com> 1543161904 +0100\n\nRollup merge of #56144 - tromey:Bug-55771-btreemap, r=alexcrichton\n\nFix BTreeSet and BTreeMap gdb pretty-printers\n\nThe BTreeSet and BTreeMap gdb pretty-printers did not take the node\nstructure into account, and consequently only worked for shallow sets.\nThis fixes the problem by iterating over child nodes when needed.\n\nThis patch avoids the current approach of implementing some of the\nvalue manipulations in debugger-indepdendent code.  This was done for\nconvenience: a type lookup was needed for the first time, and there\ncurrently are no lldb formatters for these types.\n\nCloses #55771\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed6c7b751dd427d6b10825c9d6bbcca08e769fa9", "html_url": "https://github.com/rust-lang/rust/commit/ed6c7b751dd427d6b10825c9d6bbcca08e769fa9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed6c7b751dd427d6b10825c9d6bbcca08e769fa9/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6398df1520638c68bb75daa33d64c75387c26b1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6398df1520638c68bb75daa33d64c75387c26b1f", "html_url": "https://github.com/rust-lang/rust/commit/6398df1520638c68bb75daa33d64c75387c26b1f"}, {"sha": "d4ee1c93ff25a7fa6f5e35dc774a648a7e6d578e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4ee1c93ff25a7fa6f5e35dc774a648a7e6d578e", "html_url": "https://github.com/rust-lang/rust/commit/d4ee1c93ff25a7fa6f5e35dc774a648a7e6d578e"}], "stats": {"total": 113, "additions": 50, "deletions": 63}, "files": [{"sha": "b99e401929e62f643ea33b281af2dc5253ccb4d3", "filename": "src/etc/debugger_pretty_printers_common.py", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ed6c7b751dd427d6b10825c9d6bbcca08e769fa9/src%2Fetc%2Fdebugger_pretty_printers_common.py", "raw_url": "https://github.com/rust-lang/rust/raw/ed6c7b751dd427d6b10825c9d6bbcca08e769fa9/src%2Fetc%2Fdebugger_pretty_printers_common.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fdebugger_pretty_printers_common.py?ref=ed6c7b751dd427d6b10825c9d6bbcca08e769fa9", "patch": "@@ -375,32 +375,6 @@ def extract_tail_head_ptr_and_cap_from_std_vecdeque(vec_val):\n     assert data_ptr.type.get_dwarf_type_kind() == DWARF_TYPE_CODE_PTR\n     return (tail, head, data_ptr, capacity)\n \n-\n-def extract_length_and_ptr_from_std_btreeset(vec_val):\n-    assert vec_val.type.get_type_kind() == TYPE_KIND_STD_BTREESET\n-    map = vec_val.get_child_at_index(0)\n-    root = map.get_child_at_index(0)\n-    length = map.get_child_at_index(1).as_integer()\n-    node = root.get_child_at_index(0)\n-    ptr = node.get_child_at_index(0)\n-    unique_ptr_val = ptr.get_child_at_index(0)\n-    data_ptr = unique_ptr_val.get_child_at_index(0)\n-    assert data_ptr.type.get_dwarf_type_kind() == DWARF_TYPE_CODE_PTR\n-    return (length, data_ptr)\n-\n-\n-def extract_length_and_ptr_from_std_btreemap(vec_val):\n-    assert vec_val.type.get_type_kind() == TYPE_KIND_STD_BTREEMAP\n-    root = vec_val.get_child_at_index(0)\n-    length = vec_val.get_child_at_index(1).as_integer()\n-    node = root.get_child_at_index(0)\n-    ptr = node.get_child_at_index(0)\n-    unique_ptr_val = ptr.get_child_at_index(0)\n-    data_ptr = unique_ptr_val.get_child_at_index(0)\n-    assert data_ptr.type.get_dwarf_type_kind() == DWARF_TYPE_CODE_PTR\n-    return (length, data_ptr)\n-\n-\n def extract_length_and_ptr_from_slice(slice_val):\n     assert (slice_val.type.get_type_kind() == TYPE_KIND_SLICE or\n             slice_val.type.get_type_kind() == TYPE_KIND_STR_SLICE)"}, {"sha": "a376c8593f4c066cbf7b326e17f44f9838ea075f", "filename": "src/etc/gdb_rust_pretty_printing.py", "status": "modified", "additions": 41, "deletions": 29, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/ed6c7b751dd427d6b10825c9d6bbcca08e769fa9/src%2Fetc%2Fgdb_rust_pretty_printing.py", "raw_url": "https://github.com/rust-lang/rust/raw/ed6c7b751dd427d6b10825c9d6bbcca08e769fa9/src%2Fetc%2Fgdb_rust_pretty_printing.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgdb_rust_pretty_printing.py?ref=ed6c7b751dd427d6b10825c9d6bbcca08e769fa9", "patch": "@@ -319,6 +319,32 @@ def children(self):\n             yield (str(index), (gdb_ptr + ((tail + index) % cap)).dereference())\n \n \n+# Yield each key (and optionally value) from a BoxedNode.\n+def children_of_node(boxed_node, height, want_values):\n+    ptr = boxed_node['ptr']['pointer']\n+    # This is written oddly because we don't want to rely on the field name being `__0`.\n+    node_ptr = ptr[ptr.type.fields()[0]]\n+    if height > 0:\n+        type_name = str(node_ptr.type.target()).replace('LeafNode', 'InternalNode')\n+        node_type = gdb.lookup_type(type_name)\n+        node_ptr = node_ptr.cast(node_type.pointer())\n+        leaf = node_ptr['data']\n+    else:\n+        leaf = node_ptr.dereference()\n+    keys = leaf['keys']['value']['value']\n+    if want_values:\n+        values = leaf['vals']['value']['value']\n+    length = int(leaf['len'])\n+    for i in xrange(0, length + 1):\n+        if height > 0:\n+            for child in children_of_node(node_ptr['edges'][i], height - 1, want_values):\n+                yield child\n+        if i < length:\n+            if want_values:\n+                yield (keys[i], values[i])\n+            else:\n+                yield keys[i]\n+\n class RustStdBTreeSetPrinter(object):\n     def __init__(self, val):\n         self.__val = val\n@@ -328,21 +354,16 @@ def display_hint():\n         return \"array\"\n \n     def to_string(self):\n-        (length, data_ptr) = \\\n-            rustpp.extract_length_and_ptr_from_std_btreeset(self.__val)\n         return (self.__val.type.get_unqualified_type_name() +\n-                (\"(len: %i)\" % length))\n+                (\"(len: %i)\" % self.__val.get_wrapped_value()['map']['length']))\n \n     def children(self):\n-        (length, data_ptr) = \\\n-            rustpp.extract_length_and_ptr_from_std_btreeset(self.__val)\n-        leaf_node = GdbValue(data_ptr.get_wrapped_value().dereference())\n-        maybe_uninit_keys = leaf_node.get_child_at_index(3)\n-        manually_drop_keys = maybe_uninit_keys.get_child_at_index(1)\n-        keys = manually_drop_keys.get_child_at_index(0)\n-        gdb_ptr = keys.get_wrapped_value()\n-        for index in xrange(length):\n-            yield (str(index), gdb_ptr[index])\n+        root = self.__val.get_wrapped_value()['map']['root']\n+        node_ptr = root['node']\n+        i = 0\n+        for child in children_of_node(node_ptr, root['height'], False):\n+            yield (str(i), child)\n+            i = i + 1\n \n \n class RustStdBTreeMapPrinter(object):\n@@ -354,26 +375,17 @@ def display_hint():\n         return \"map\"\n \n     def to_string(self):\n-        (length, data_ptr) = \\\n-            rustpp.extract_length_and_ptr_from_std_btreemap(self.__val)\n         return (self.__val.type.get_unqualified_type_name() +\n-                (\"(len: %i)\" % length))\n+                (\"(len: %i)\" % self.__val.get_wrapped_value()['length']))\n \n     def children(self):\n-        (length, data_ptr) = \\\n-            rustpp.extract_length_and_ptr_from_std_btreemap(self.__val)\n-        leaf_node = GdbValue(data_ptr.get_wrapped_value().dereference())\n-        maybe_uninit_keys = leaf_node.get_child_at_index(3)\n-        manually_drop_keys = maybe_uninit_keys.get_child_at_index(1)\n-        keys = manually_drop_keys.get_child_at_index(0)\n-        keys_ptr = keys.get_wrapped_value()\n-        maybe_uninit_vals = leaf_node.get_child_at_index(4)\n-        manually_drop_vals = maybe_uninit_vals.get_child_at_index(1)\n-        vals = manually_drop_vals.get_child_at_index(0)\n-        vals_ptr = vals.get_wrapped_value()\n-        for index in xrange(length):\n-            yield (str(index), keys_ptr[index])\n-            yield (str(index), vals_ptr[index])\n+        root = self.__val.get_wrapped_value()['root']\n+        node_ptr = root['node']\n+        i = 0\n+        for child in children_of_node(node_ptr, root['height'], True):\n+            yield (str(i), child[0])\n+            yield (str(i), child[1])\n+            i = i + 1\n \n \n class RustStdStringPrinter(object):"}, {"sha": "a51be370aa44bc1641af4f4c118747fc27ef0d2a", "filename": "src/test/debuginfo/pretty-std-collections.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ed6c7b751dd427d6b10825c9d6bbcca08e769fa9/src%2Ftest%2Fdebuginfo%2Fpretty-std-collections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6c7b751dd427d6b10825c9d6bbcca08e769fa9/src%2Ftest%2Fdebuginfo%2Fpretty-std-collections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fpretty-std-collections.rs?ref=ed6c7b751dd427d6b10825c9d6bbcca08e769fa9", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-tidy-linelength\n // ignore-windows failing on win32 bot\n // ignore-freebsd: gdb package too new\n // ignore-android: FIXME(#10381)\n@@ -20,10 +21,10 @@\n // gdb-command: run\n \n // gdb-command: print btree_set\n-// gdb-check:$1 = BTreeSet<i32>(len: 3) = {3, 5, 7}\n+// gdb-check:$1 = BTreeSet<i32>(len: 15) = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}\n \n // gdb-command: print btree_map\n-// gdb-check:$2 = BTreeMap<i32, i32>(len: 3) = {[3] = 3, [5] = 7, [7] = 4}\n+// gdb-check:$2 = BTreeMap<i32, i32>(len: 15) = {[0] = 0, [1] = 1, [2] = 2, [3] = 3, [4] = 4, [5] = 5, [6] = 6, [7] = 7, [8] = 8, [9] = 9, [10] = 10, [11] = 11, [12] = 12, [13] = 13, [14] = 14}\n \n // gdb-command: print vec_deque\n // gdb-check:$3 = VecDeque<i32>(len: 3, cap: 8) = {5, 3, 7}\n@@ -41,15 +42,15 @@ fn main() {\n \n     // BTreeSet\n     let mut btree_set = BTreeSet::new();\n-    btree_set.insert(5);\n-    btree_set.insert(3);\n-    btree_set.insert(7);\n+    for i in 0..15 {\n+        btree_set.insert(i);\n+    }\n \n     // BTreeMap\n     let mut btree_map = BTreeMap::new();\n-    btree_map.insert(5, 7);\n-    btree_map.insert(3, 3);\n-    btree_map.insert(7, 4);\n+    for i in 0..15 {\n+        btree_map.insert(i, i);\n+    }\n \n     // VecDeque\n     let mut vec_deque = VecDeque::new();"}]}