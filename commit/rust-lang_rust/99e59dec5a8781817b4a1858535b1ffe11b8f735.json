{"sha": "99e59dec5a8781817b4a1858535b1ffe11b8f735", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5ZTU5ZGVjNWE4NzgxODE3YjRhMTg1ODUzNWIxZmZlMTFiOGY3MzU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-04T00:27:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-04T00:27:40Z"}, "message": "Auto merge of #29732 - nathansizemore:master, r=steveklabnik", "tree": {"sha": "dc3c6d13fbf0101243ece816e20db7873dd6045f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc3c6d13fbf0101243ece816e20db7873dd6045f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99e59dec5a8781817b4a1858535b1ffe11b8f735", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99e59dec5a8781817b4a1858535b1ffe11b8f735", "html_url": "https://github.com/rust-lang/rust/commit/99e59dec5a8781817b4a1858535b1ffe11b8f735", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99e59dec5a8781817b4a1858535b1ffe11b8f735/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f11a9ef4e23db189676c57c91c2675e97a74fea", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f11a9ef4e23db189676c57c91c2675e97a74fea", "html_url": "https://github.com/rust-lang/rust/commit/8f11a9ef4e23db189676c57c91c2675e97a74fea"}, {"sha": "3e9d5fea48f616c1052d38e67b18e98624210867", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e9d5fea48f616c1052d38e67b18e98624210867", "html_url": "https://github.com/rust-lang/rust/commit/3e9d5fea48f616c1052d38e67b18e98624210867"}], "stats": {"total": 233, "additions": 193, "deletions": 40}, "files": [{"sha": "635ed91f35da41c5335c36d4c5cd57e569de3d53", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 184, "deletions": 40, "changes": 224, "blob_url": "https://github.com/rust-lang/rust/blob/99e59dec5a8781817b4a1858535b1ffe11b8f735/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99e59dec5a8781817b4a1858535b1ffe11b8f735/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=99e59dec5a8781817b4a1858535b1ffe11b8f735", "patch": "@@ -715,7 +715,7 @@ impl DirEntry {\n     /// This function will not traverse symlinks if this entry points at a\n     /// symlink.\n     ///\n-    /// # Platform behavior\n+    /// # Platform-specific behavior\n     ///\n     /// On Windows this function is cheap to call (no extra system calls\n     /// needed), but on Unix platforms this function is the equivalent of\n@@ -730,7 +730,7 @@ impl DirEntry {\n     /// This function will not traverse symlinks if this entry points at a\n     /// symlink.\n     ///\n-    /// # Platform behavior\n+    /// # Platform-specific behavior\n     ///\n     /// On Windows and most Unix platforms this function is free (no extra\n     /// system calls needed), but some Unix platforms may require the equivalent\n@@ -758,11 +758,20 @@ impl AsInner<fs_imp::DirEntry> for DirEntry {\n /// guarantee that the file is immediately deleted (e.g. depending on\n /// platform, other open file descriptors may prevent immediate removal).\n ///\n+/// # Platform-specific behavior\n+///\n+/// This function currently corresponds to the `unlink` function on Unix\n+/// and the `DeleteFile` function on Windows.\n+/// Note that, this [may change in the future][changes].\n+/// [changes]: ../io/index.html#platform-specific-behavior\n+///\n /// # Errors\n ///\n-/// This function will return an error if `path` points to a directory, if the\n-/// user lacks permissions to remove the file, or if some other filesystem-level\n-/// error occurs.\n+/// This function will return an error in the following situations, but is not\n+/// limited to just these cases:\n+///\n+/// * `path` points to a directory.\n+/// * The user lacks permissions to remove the file.\n ///\n /// # Examples\n ///\n@@ -785,6 +794,21 @@ pub fn remove_file<P: AsRef<Path>>(path: P) -> io::Result<()> {\n /// This function will traverse symbolic links to query information about the\n /// destination file.\n ///\n+/// # Platform-specific behavior\n+///\n+/// This function currently corresponds to the `stat` function on Unix\n+/// and the `GetFileAttributesEx` function on Windows.\n+/// Note that, this [may change in the future][changes].\n+/// [changes]: ../io/index.html#platform-specific-behavior\n+///\n+/// # Errors\n+///\n+/// This function will return an error in the following situations, but is not\n+/// limited to just these cases:\n+///\n+/// * The user lacks permissions to perform `metadata` call on `path`.\n+/// * `path` does not exist.\n+///\n /// # Examples\n ///\n /// ```rust\n@@ -796,19 +820,28 @@ pub fn remove_file<P: AsRef<Path>>(path: P) -> io::Result<()> {\n /// # Ok(())\n /// # }\n /// ```\n-///\n-/// # Errors\n-///\n-/// This function will return an error if the user lacks the requisite\n-/// permissions to perform a `metadata` call on the given `path` or if there\n-/// is no entry in the filesystem at the provided path.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn metadata<P: AsRef<Path>>(path: P) -> io::Result<Metadata> {\n     fs_imp::stat(path.as_ref()).map(Metadata)\n }\n \n /// Query the metadata about a file without following symlinks.\n ///\n+/// # Platform-specific behavior\n+///\n+/// This function currently corresponds to the `lstat` function on Unix\n+/// and the `GetFileAttributesEx` function on Windows.\n+/// Note that, this [may change in the future][changes].\n+/// [changes]: ../io/index.html#platform-specific-behavior\n+///\n+/// # Errors\n+///\n+/// This function will return an error in the following situations, but is not\n+/// limited to just these cases:\n+///\n+/// * The user lacks permissions to perform `metadata` call on `path`.\n+/// * `path` does not exist.\n+///\n /// # Examples\n ///\n /// ```rust\n@@ -829,12 +862,21 @@ pub fn symlink_metadata<P: AsRef<Path>>(path: P) -> io::Result<Metadata> {\n ///\n /// This will not work if the new name is on a different mount point.\n ///\n+/// # Platform-specific behavior\n+///\n+/// This function currently corresponds to the `rename` function on Unix\n+/// and the `MoveFileEx` function with the `MOVEFILE_REPLACE_EXISTING` flag on Windows.\n+/// Note that, this [may change in the future][changes].\n+/// [changes]: ../io/index.html#platform-specific-behavior\n+///\n /// # Errors\n ///\n-/// This function will return an error if the provided `from` doesn't exist, if\n-/// the process lacks permissions to view the contents, if `from` and `to`\n-/// reside on separate filesystems, or if some other intermittent I/O error\n-/// occurs.\n+/// This function will return an error in the following situations, but is not\n+/// limited to just these cases:\n+///\n+/// * `from` does not exist.\n+/// * The user lacks permissions to view contents.\n+/// * `from` and `to` are on separate filesystems.\n ///\n /// # Examples\n ///\n@@ -861,15 +903,24 @@ pub fn rename<P: AsRef<Path>, Q: AsRef<Path>>(from: P, to: Q) -> io::Result<()>\n ///\n /// On success, the total number of bytes copied is returned.\n ///\n+/// # Platform-specific behavior\n+///\n+/// This function currently corresponds to the `open` function in Unix\n+/// with `O_RDONLY` for `from` and `O_WRONLY`, `O_CREAT`, and `O_TRUNC` for `to`.\n+/// `O_CLOEXEC` is set for returned file descriptors.\n+/// On Windows, this function currently corresponds to `CopyFileEx`.\n+/// Note that, this [may change in the future][changes].\n+/// [changes]: ../io/index.html#platform-specific-behavior\n+///\n /// # Errors\n ///\n /// This function will return an error in the following situations, but is not\n /// limited to just these cases:\n ///\n-/// * The `from` path is not a file\n-/// * The `from` file does not exist\n+/// * The `from` path is not a file.\n+/// * The `from` file does not exist.\n /// * The current process does not have the permission rights to access\n-///   `from` or write `to`\n+///   `from` or write `to`.\n ///\n /// # Examples\n ///\n@@ -890,6 +941,20 @@ pub fn copy<P: AsRef<Path>, Q: AsRef<Path>>(from: P, to: Q) -> io::Result<u64> {\n /// The `dst` path will be a link pointing to the `src` path. Note that systems\n /// often require these two paths to both be located on the same filesystem.\n ///\n+/// # Platform-specific behavior\n+///\n+/// This function currently corresponds to the `link` function on Unix\n+/// and the `CreateHardLink` function on Windows.\n+/// Note that, this [may change in the future][changes].\n+/// [changes]: ../io/index.html#platform-specific-behavior\n+///\n+/// # Errors\n+///\n+/// This function will return an error in the following situations, but is not\n+/// limited to just these cases:\n+///\n+/// * The `src` path is not a file or doesn't exist.\n+///\n /// # Examples\n ///\n /// ```\n@@ -933,11 +998,21 @@ pub fn soft_link<P: AsRef<Path>, Q: AsRef<Path>>(src: P, dst: Q) -> io::Result<(\n \n /// Reads a symbolic link, returning the file that the link points to.\n ///\n+/// # Platform-specific behavior\n+///\n+/// This function currently corresponds to the `readlink` function on Unix\n+/// and the `CreateFile` function with `FILE_FLAG_OPEN_REPARSE_POINT` and\n+/// `FILE_FLAG_BACKUP_SEMANTICS` flags on Windows.\n+/// Note that, this [may change in the future][changes].\n+/// [changes]: ../io/index.html#platform-specific-behavior\n+///\n /// # Errors\n ///\n-/// This function will return an error on failure. Failure conditions include\n-/// reading a file that does not exist or reading a file that is not a symbolic\n-/// link.\n+/// This function will return an error in the following situations, but is not\n+/// limited to just these cases:\n+///\n+/// * `path` is not a symbolic link.\n+/// * `path` does not exist.\n ///\n /// # Examples\n ///\n@@ -957,8 +1032,20 @@ pub fn read_link<P: AsRef<Path>>(path: P) -> io::Result<PathBuf> {\n /// Returns the canonical form of a path with all intermediate components\n /// normalized and symbolic links resolved.\n ///\n-/// This function may return an error in situations like where the path does not\n-/// exist, a component in the path is not a directory, or an I/O error happens.\n+/// # Platform-specific behavior\n+///\n+/// This function currently corresponds to the `realpath` function on Unix\n+/// and the `CreateFile` and `GetFinalPathNameByHandle` functions on Windows.\n+/// Note that, this [may change in the future][changes].\n+/// [changes]: ../io/index.html#platform-specific-behavior\n+///\n+/// # Errors\n+///\n+/// This function will return an error in the following situations, but is not\n+/// limited to just these cases:\n+///\n+/// * `path` does not exist.\n+/// * A component in path is not a directory.\n ///\n /// # Examples\n ///\n@@ -977,10 +1064,20 @@ pub fn canonicalize<P: AsRef<Path>>(path: P) -> io::Result<PathBuf> {\n \n /// Creates a new, empty directory at the provided path\n ///\n+/// # Platform-specific behavior\n+///\n+/// This function currently corresponds to the `mkdir` function on Unix\n+/// and the `CreateDirectory` function on Windows.\n+/// Note that, this [may change in the future][changes].\n+/// [changes]: ../io/index.html#platform-specific-behavior\n+///\n /// # Errors\n ///\n-/// This function will return an error if the user lacks permissions to make a\n-/// new directory at the provided `path`, or if the directory already exists.\n+/// This function will return an error in the following situations, but is not\n+/// limited to just these cases:\n+///\n+/// * User lacks permissions to create directory at `path`.\n+/// * `path` already exists.\n ///\n /// # Examples\n ///\n@@ -1000,9 +1097,19 @@ pub fn create_dir<P: AsRef<Path>>(path: P) -> io::Result<()> {\n /// Recursively create a directory and all of its parent components if they\n /// are missing.\n ///\n+/// # Platform-specific behavior\n+///\n+/// This function currently corresponds to the `mkdir` function on Unix\n+/// and the `CreateDirectory` function on Windows.\n+/// Note that, this [may change in the future][changes].\n+/// [changes]: ../io/index.html#platform-specific-behavior\n+///\n /// # Errors\n ///\n-/// This function will fail if any directory in the path specified by `path`\n+/// This function will return an error in the following situations, but is not\n+/// limited to just these cases:\n+///\n+/// * If any directory in the path specified by `path`\n /// does not already exist and it could not be created otherwise. The specific\n /// error conditions for when a directory is being created (after it is\n /// determined to not exist) are outlined by `fs::create_dir`.\n@@ -1024,10 +1131,20 @@ pub fn create_dir_all<P: AsRef<Path>>(path: P) -> io::Result<()> {\n \n /// Removes an existing, empty directory.\n ///\n+/// # Platform-specific behavior\n+///\n+/// This function currently corresponds to the `rmdir` function on Unix\n+/// and the `RemoveDirectory` function on Windows.\n+/// Note that, this [may change in the future][changes].\n+/// [changes]: ../io/index.html#platform-specific-behavior\n+///\n /// # Errors\n ///\n-/// This function will return an error if the user lacks permissions to remove\n-/// the directory at the provided `path`, or if the directory isn't empty.\n+/// This function will return an error in the following situations, but is not\n+/// limited to just these cases:\n+///\n+/// * The user lacks permissions to remove the directory at the provided `path`.\n+/// * The directory isn't empty.\n ///\n /// # Examples\n ///\n@@ -1050,6 +1167,14 @@ pub fn remove_dir<P: AsRef<Path>>(path: P) -> io::Result<()> {\n /// This function does **not** follow symbolic links and it will simply remove the\n /// symbolic link itself.\n ///\n+/// # Platform-specific behavior\n+///\n+/// This function currently corresponds to `opendir`, `lstat`, `rm` and `rmdir` functions on Unix\n+/// and the `FindFirstFile`, `GetFileAttributesEx`, `DeleteFile`, and `RemoveDirectory` functions\n+/// on Windows.\n+/// Note that, this [may change in the future][changes].\n+/// [changes]: ../io/index.html#platform-specific-behavior\n+///\n /// # Errors\n ///\n /// See `file::remove_file` and `fs::remove_dir`.\n@@ -1087,6 +1212,22 @@ fn _remove_dir_all(path: &Path) -> io::Result<()> {\n /// The iterator will yield instances of `io::Result<DirEntry>`. New errors may\n /// be encountered after an iterator is initially constructed.\n ///\n+/// # Platform-specific behavior\n+///\n+/// This function currently corresponds to the `opendir` function on Unix\n+/// and the `FindFirstFile` function on Windows.\n+/// Note that, this [may change in the future][changes].\n+/// [changes]: ../io/index.html#platform-specific-behavior\n+///\n+/// # Errors\n+///\n+/// This function will return an error in the following situations, but is not\n+/// limited to just these cases:\n+///\n+/// * The provided `path` doesn't exist.\n+/// * The process lacks permissions to view the contents.\n+/// * The `path` points at a non-directory file.\n+///\n /// # Examples\n ///\n /// ```\n@@ -1109,12 +1250,6 @@ fn _remove_dir_all(path: &Path) -> io::Result<()> {\n ///     Ok(())\n /// }\n /// ```\n-///\n-/// # Errors\n-///\n-/// This function will return an error if the provided `path` doesn't exist, if\n-/// the process lacks permissions to view the contents or if the `path` points\n-/// at a non-directory file\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn read_dir<P: AsRef<Path>>(path: P) -> io::Result<ReadDir> {\n     fs_imp::readdir(path.as_ref()).map(ReadDir)\n@@ -1180,6 +1315,21 @@ impl Iterator for WalkDir {\n \n /// Changes the permissions found on a file or a directory.\n ///\n+/// # Platform-specific behavior\n+///\n+/// This function currently corresponds to the `chmod` function on Unix\n+/// and the `SetFileAttributes` function on Windows.\n+/// Note that, this [may change in the future][changes].\n+/// [changes]: ../io/index.html#platform-specific-behavior\n+///\n+/// # Errors\n+///\n+/// This function will return an error in the following situations, but is not\n+/// limited to just these cases:\n+///\n+/// * `path` does not exist.\n+/// * The user lacks the permission to change attributes of the file.\n+///\n /// # Examples\n ///\n /// ```\n@@ -1192,12 +1342,6 @@ impl Iterator for WalkDir {\n /// # Ok(())\n /// # }\n /// ```\n-///\n-/// # Errors\n-///\n-/// This function will return an error if the provided `path` doesn't exist, if\n-/// the process lacks permissions to change the attributes of the file, or if\n-/// some other I/O error is encountered.\n #[stable(feature = \"set_permissions\", since = \"1.1.0\")]\n pub fn set_permissions<P: AsRef<Path>>(path: P, perm: Permissions)\n                                        -> io::Result<()> {"}, {"sha": "b5ba6ff54c0e3b7d32b5fcb9ed1b450aae48562d", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/99e59dec5a8781817b4a1858535b1ffe11b8f735/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99e59dec5a8781817b4a1858535b1ffe11b8f735/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=99e59dec5a8781817b4a1858535b1ffe11b8f735", "patch": "@@ -238,6 +238,15 @@\n //!\n //! [result]: type.Result.html\n //! [try]: ../macro.try!.html\n+//!\n+//! ## Platform-specific behavior\n+//!\n+//! Many I/O functions throughout the standard library are documented to indicate\n+//! what various library or syscalls they are delegated to. This is done to help\n+//! applications both understand what's happening under the hood as well as investigate\n+//! any possibly unclear semantics. Note, however, that this is informative, not a binding\n+//! contract. The implementation of many of these functions are subject to change over\n+//! time and may call fewer or more syscalls/library functions.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}]}