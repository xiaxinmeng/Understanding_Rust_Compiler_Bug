{"sha": "b8c3a6cfb94f352e62b8b1eecf196d5013cbbd6e", "node_id": "C_kwDOAAsO6NoAKGI4YzNhNmNmYjk0ZjM1MmU2MmI4YjFlZWNmMTk2ZDUwMTNjYmJkNmU", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-09-26T01:22:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-26T01:22:19Z"}, "message": "Rollup merge of #89010 - est31:intra_doc_links, r=m-ou-se\n\nAdd some intra doc links", "tree": {"sha": "aa9c1224d85a9b6200b0178d878d2fb36ff502ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa9c1224d85a9b6200b0178d878d2fb36ff502ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8c3a6cfb94f352e62b8b1eecf196d5013cbbd6e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhT8tLCRBK7hj4Ov3rIwAATkIIAFwUSCxXPkeIfmaVH7etccz+\n9FbBBr6jpOonalpliHJ2GTIvOjTsFuWY5WaC0/LE0dT/YnUCQUnDNlDiTiw16daC\nqwFBEuL7K8Qosv8tCZGwn0We7/u2fqU6+UD3QG+VvfkFapMwreyjjs4OTYSLhiN/\nOifdbxONzuXvEZZ4BS1315bQ9OOKCfe4bHciy2B+R+K7fnPJqchRbCF6SKYBpRiQ\nsa74MDuqufN0ViwoQ/L/pMJBGSE2Rzm37b9E1oyQsE2lqHUeS4Q3qf20cS+ay7Ic\nCNOBfMFgt4qPeoiOkv0cRFOwBDn0uInvFVzVV2p6ac8jbvSo9/W5a1IRSLGtXw4=\n=1u6W\n-----END PGP SIGNATURE-----\n", "payload": "tree aa9c1224d85a9b6200b0178d878d2fb36ff502ad\nparent f9d4eb0ae3014d5f949c2e088536f8571a967a15\nparent 372711906b95f3008bca52869a5bd923767062d0\nauthor Manish Goregaokar <manishsmail@gmail.com> 1632619339 -0700\ncommitter GitHub <noreply@github.com> 1632619339 -0700\n\nRollup merge of #89010 - est31:intra_doc_links, r=m-ou-se\n\nAdd some intra doc links\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8c3a6cfb94f352e62b8b1eecf196d5013cbbd6e", "html_url": "https://github.com/rust-lang/rust/commit/b8c3a6cfb94f352e62b8b1eecf196d5013cbbd6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8c3a6cfb94f352e62b8b1eecf196d5013cbbd6e/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9d4eb0ae3014d5f949c2e088536f8571a967a15", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9d4eb0ae3014d5f949c2e088536f8571a967a15", "html_url": "https://github.com/rust-lang/rust/commit/f9d4eb0ae3014d5f949c2e088536f8571a967a15"}, {"sha": "372711906b95f3008bca52869a5bd923767062d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/372711906b95f3008bca52869a5bd923767062d0", "html_url": "https://github.com/rust-lang/rust/commit/372711906b95f3008bca52869a5bd923767062d0"}], "stats": {"total": 36, "additions": 25, "deletions": 11}, "files": [{"sha": "313553872249c73baff6203f066dab8a20352e9c", "filename": "library/alloc/src/collections/binary_heap.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b8c3a6cfb94f352e62b8b1eecf196d5013cbbd6e/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8c3a6cfb94f352e62b8b1eecf196d5013cbbd6e/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs?ref=b8c3a6cfb94f352e62b8b1eecf196d5013cbbd6e", "patch": "@@ -159,9 +159,9 @@ use super::SpecExtend;\n /// This will be a max-heap.\n ///\n /// It is a logic error for an item to be modified in such a way that the\n-/// item's ordering relative to any other item, as determined by the `Ord`\n+/// item's ordering relative to any other item, as determined by the [`Ord`]\n /// trait, changes while it is in the heap. This is normally only possible\n-/// through `Cell`, `RefCell`, global state, I/O, or unsafe code. The\n+/// through [`Cell`], [`RefCell`], global state, I/O, or unsafe code. The\n /// behavior resulting from such a logic error is not specified, but will\n /// not result in undefined behavior. This could include panics, incorrect\n /// results, aborts, memory leaks, and non-termination.\n@@ -219,7 +219,7 @@ use super::SpecExtend;\n ///\n /// ## Min-heap\n ///\n-/// Either `std::cmp::Reverse` or a custom `Ord` implementation can be used to\n+/// Either [`core::cmp::Reverse`] or a custom [`Ord`] implementation can be used to\n /// make `BinaryHeap` a min-heap. This makes `heap.pop()` return the smallest\n /// value instead of the greatest one.\n ///\n@@ -250,6 +250,10 @@ use super::SpecExtend;\n /// The value for `push` is an expected cost; the method documentation gives a\n /// more detailed analysis.\n ///\n+/// [`core::cmp::Reverse`]: core::cmp::Reverse\n+/// [`Ord`]: core::cmp::Ord\n+/// [`Cell`]: core::cell::Cell\n+/// [`RefCell`]: core::cell::RefCell\n /// [push]: BinaryHeap::push\n /// [pop]: BinaryHeap::pop\n /// [peek]: BinaryHeap::peek\n@@ -1255,9 +1259,10 @@ impl<T> FusedIterator for Iter<'_, T> {}\n /// An owning iterator over the elements of a `BinaryHeap`.\n ///\n /// This `struct` is created by [`BinaryHeap::into_iter()`]\n-/// (provided by the `IntoIterator` trait). See its documentation for more.\n+/// (provided by the [`IntoIterator`] trait). See its documentation for more.\n ///\n /// [`into_iter`]: BinaryHeap::into_iter\n+/// [`IntoIterator`]: core::iter::IntoIterator\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n pub struct IntoIter<T> {"}, {"sha": "2a7e1ef351bc6d6887567b9e056942696809c198", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b8c3a6cfb94f352e62b8b1eecf196d5013cbbd6e/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8c3a6cfb94f352e62b8b1eecf196d5013cbbd6e/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=b8c3a6cfb94f352e62b8b1eecf196d5013cbbd6e", "patch": "@@ -326,9 +326,10 @@ impl<K: fmt::Debug, V: fmt::Debug> fmt::Debug for IterMut<'_, K, V> {\n /// An owning iterator over the entries of a `BTreeMap`.\n ///\n /// This `struct` is created by the [`into_iter`] method on [`BTreeMap`]\n-/// (provided by the `IntoIterator` trait). See its documentation for more.\n+/// (provided by the [`IntoIterator`] trait). See its documentation for more.\n ///\n /// [`into_iter`]: IntoIterator::into_iter\n+/// [`IntoIterator`]: core::iter::IntoIterator\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IntoIter<K, V> {\n     range: LazyLeafRange<marker::Dying, K, V>,"}, {"sha": "16150ceeb62c116a3a6e701ef74f0338785fe259", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b8c3a6cfb94f352e62b8b1eecf196d5013cbbd6e/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8c3a6cfb94f352e62b8b1eecf196d5013cbbd6e/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=b8c3a6cfb94f352e62b8b1eecf196d5013cbbd6e", "patch": "@@ -107,9 +107,10 @@ impl<T: fmt::Debug> fmt::Debug for Iter<'_, T> {\n /// An owning iterator over the items of a `BTreeSet`.\n ///\n /// This `struct` is created by the [`into_iter`] method on [`BTreeSet`]\n-/// (provided by the `IntoIterator` trait). See its documentation for more.\n+/// (provided by the [`IntoIterator`] trait). See its documentation for more.\n ///\n /// [`into_iter`]: BTreeSet#method.into_iter\n+/// [`IntoIterator`]: core::iter::IntoIterator\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Debug)]\n pub struct IntoIter<T> {"}, {"sha": "0b60c2aa9f66a6e53fe48e98fd300988f32c6cbb", "filename": "library/alloc/src/collections/linked_list.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b8c3a6cfb94f352e62b8b1eecf196d5013cbbd6e/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8c3a6cfb94f352e62b8b1eecf196d5013cbbd6e/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs?ref=b8c3a6cfb94f352e62b8b1eecf196d5013cbbd6e", "patch": "@@ -38,9 +38,12 @@ mod tests;\n /// let list = LinkedList::from([1, 2, 3]);\n /// ```\n ///\n-/// NOTE: It is almost always better to use `Vec` or `VecDeque` because\n+/// NOTE: It is almost always better to use [`Vec`] or [`VecDeque`] because\n /// array-based containers are generally faster,\n /// more memory efficient, and make better use of CPU cache.\n+///\n+/// [`Vec`]: crate::vec::Vec\n+/// [`VecDeque`]: super::vec_deque::VecDeque\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"LinkedList\")]\n pub struct LinkedList<T> {\n@@ -121,9 +124,10 @@ impl<T: fmt::Debug> fmt::Debug for IterMut<'_, T> {\n /// An owning iterator over the elements of a `LinkedList`.\n ///\n /// This `struct` is created by the [`into_iter`] method on [`LinkedList`]\n-/// (provided by the `IntoIterator` trait). See its documentation for more.\n+/// (provided by the [`IntoIterator`] trait). See its documentation for more.\n ///\n /// [`into_iter`]: LinkedList::into_iter\n+/// [`IntoIterator`]: core::iter::IntoIterator\n #[derive(Clone)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IntoIter<T> {"}, {"sha": "55f6138cd0f31407217fd4ef17fb391a5f55c80d", "filename": "library/alloc/src/collections/vec_deque/into_iter.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b8c3a6cfb94f352e62b8b1eecf196d5013cbbd6e/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Finto_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8c3a6cfb94f352e62b8b1eecf196d5013cbbd6e/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Finto_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Finto_iter.rs?ref=b8c3a6cfb94f352e62b8b1eecf196d5013cbbd6e", "patch": "@@ -8,9 +8,10 @@ use super::VecDeque;\n /// An owning iterator over the elements of a `VecDeque`.\n ///\n /// This `struct` is created by the [`into_iter`] method on [`VecDeque`]\n-/// (provided by the `IntoIterator` trait). See its documentation for more.\n+/// (provided by the [`IntoIterator`] trait). See its documentation for more.\n ///\n /// [`into_iter`]: VecDeque::into_iter\n+/// [`IntoIterator`]: core::iter::IntoIterator\n #[derive(Clone)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IntoIter<"}, {"sha": "862f411ebe058e8e42ae2b0bf88db34cdaea3a14", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b8c3a6cfb94f352e62b8b1eecf196d5013cbbd6e/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8c3a6cfb94f352e62b8b1eecf196d5013cbbd6e/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=b8c3a6cfb94f352e62b8b1eecf196d5013cbbd6e", "patch": "@@ -1257,9 +1257,10 @@ impl<'a, K, V> IterMut<'a, K, V> {\n /// An owning iterator over the entries of a `HashMap`.\n ///\n /// This `struct` is created by the [`into_iter`] method on [`HashMap`]\n-/// (provided by the `IntoIterator` trait). See its documentation for more.\n+/// (provided by the [`IntoIterator`] trait). See its documentation for more.\n ///\n /// [`into_iter`]: IntoIterator::into_iter\n+/// [`IntoIterator`]: crate::iter::IntoIterator\n ///\n /// # Example\n ///"}, {"sha": "941981e3b00f12d55a5450517f5a3197162b67df", "filename": "library/std/src/collections/hash/set.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b8c3a6cfb94f352e62b8b1eecf196d5013cbbd6e/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8c3a6cfb94f352e62b8b1eecf196d5013cbbd6e/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs?ref=b8c3a6cfb94f352e62b8b1eecf196d5013cbbd6e", "patch": "@@ -1237,9 +1237,10 @@ pub struct Iter<'a, K: 'a> {\n /// An owning iterator over the items of a `HashSet`.\n ///\n /// This `struct` is created by the [`into_iter`] method on [`HashSet`]\n-/// (provided by the `IntoIterator` trait). See its documentation for more.\n+/// (provided by the [`IntoIterator`] trait). See its documentation for more.\n ///\n /// [`into_iter`]: IntoIterator::into_iter\n+/// [`IntoIterator`]: crate::iter::IntoIterator\n ///\n /// # Examples\n ///"}]}