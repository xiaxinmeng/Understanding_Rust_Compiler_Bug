{"sha": "57465d9c1bb979a64c6e7c5220b4ab20291547aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3NDY1ZDljMWJiOTc5YTY0YzZlN2M1MjIwYjRhYjIwMjkxNTQ3YWE=", "commit": {"author": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-09-17T16:42:16Z"}, "committer": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-09-17T16:54:24Z"}, "message": "use AtomicU64::fetch_update instead of handrolled RMW-loop", "tree": {"sha": "407293f7f3b24af9f04bd35855eb65f39cc624ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/407293f7f3b24af9f04bd35855eb65f39cc624ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57465d9c1bb979a64c6e7c5220b4ab20291547aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57465d9c1bb979a64c6e7c5220b4ab20291547aa", "html_url": "https://github.com/rust-lang/rust/commit/57465d9c1bb979a64c6e7c5220b4ab20291547aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57465d9c1bb979a64c6e7c5220b4ab20291547aa/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b512cc329a87202003d41828fe8f6f2fbeaf720", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b512cc329a87202003d41828fe8f6f2fbeaf720", "html_url": "https://github.com/rust-lang/rust/commit/2b512cc329a87202003d41828fe8f6f2fbeaf720"}], "stats": {"total": 24, "additions": 10, "deletions": 14}, "files": [{"sha": "f1640ab8b1e2304dc2140e6bb23efeca52ac2cc6", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/57465d9c1bb979a64c6e7c5220b4ab20291547aa/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57465d9c1bb979a64c6e7c5220b4ab20291547aa/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=57465d9c1bb979a64c6e7c5220b4ab20291547aa", "patch": "@@ -234,6 +234,7 @@\n #![feature(atomic_mut_ptr)]\n #![feature(auto_traits)]\n #![feature(bench_black_box)]\n+#![feature(bool_to_option)]\n #![feature(box_syntax)]\n #![feature(c_unwind)]\n #![feature(c_variadic)]"}, {"sha": "198ae739b55674d990396cfe6128a45c807dc3a9", "filename": "library/std/src/time/monotonic.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/57465d9c1bb979a64c6e7c5220b4ab20291547aa/library%2Fstd%2Fsrc%2Ftime%2Fmonotonic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57465d9c1bb979a64c6e7c5220b4ab20291547aa/library%2Fstd%2Fsrc%2Ftime%2Fmonotonic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ftime%2Fmonotonic.rs?ref=57465d9c1bb979a64c6e7c5220b4ab20291547aa", "patch": "@@ -37,20 +37,15 @@ pub mod inner {\n         // This could be a problem for programs that call instants at intervals greater\n         // than 68 years. Interstellar probes may want to ensure that actually_monotonic() is true.\n         let packed = (secs << 32) | nanos;\n-        let mut old = mono.load(Relaxed);\n-        loop {\n-            if old == UNINITIALIZED || packed.wrapping_sub(old) < u64::MAX / 2 {\n-                match mono.compare_exchange_weak(old, packed, Relaxed, Relaxed) {\n-                    Ok(_) => return raw,\n-                    Err(x) => {\n-                        old = x;\n-                        continue;\n-                    }\n-                }\n-            } else {\n+        let updated = mono.fetch_update(Relaxed, Relaxed, |old| {\n+            (old == UNINITIALIZED || packed.wrapping_sub(old) < u64::MAX / 2).then_some(packed)\n+        });\n+        match updated {\n+            Ok(_) => raw,\n+            Err(newer) => {\n                 // Backslide occurred. We reconstruct monotonized time from the upper 32 bit of the\n                 // passed in value and the 64bits loaded from the atomic\n-                let seconds_lower = old >> 32;\n+                let seconds_lower = newer >> 32;\n                 let mut seconds_upper = secs & 0xffff_ffff_0000_0000;\n                 if secs & 0xffff_ffff > seconds_lower {\n                     // Backslide caused the lower 32bit of the seconds part to wrap.\n@@ -69,8 +64,8 @@ pub mod inner {\n                     seconds_upper = seconds_upper.wrapping_add(0x1_0000_0000);\n                 }\n                 let secs = seconds_upper | seconds_lower;\n-                let nanos = old as u32;\n-                return ZERO.checked_add_duration(&Duration::new(secs, nanos)).unwrap();\n+                let nanos = newer as u32;\n+                ZERO.checked_add_duration(&Duration::new(secs, nanos)).unwrap()\n             }\n         }\n     }"}]}