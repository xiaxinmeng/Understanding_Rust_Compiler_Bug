{"sha": "e77582008888fdc7a6dc60263eddbcb8d4f74ad0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3NzU4MjAwODg4OGZkYzdhNmRjNjAyNjNlZGRiY2I4ZDRmNzRhZDA=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-12-09T22:33:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-09T22:33:06Z"}, "message": "Rollup merge of #67119 - RalfJung:miri-test-libstd, r=alexcrichton\n\nlibstd miri tests: avoid warnings\n\nIgnore tests in a way that all the code still gets compiled, to get rid of all the \"unused\" warnings that otherwise show up when running the test suite in Miri.", "tree": {"sha": "d0bd248a9d637751925c6a3cc186557d39b711e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0bd248a9d637751925c6a3cc186557d39b711e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e77582008888fdc7a6dc60263eddbcb8d4f74ad0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd7suiCRBK7hj4Ov3rIwAAdHIIAKjY035WUpP2eRjxGTusk1uA\n4PxKZE1tcUEUHEdF6UA6cbRVnDuT+a+NwgOKhZT15XX4KQC0zuDLcnz7zSsNIBLD\ndZ4jAzI7PljoQ3wxesFXlhkoRtKczMXFfG0MBLjxfOgoI3S7ify8m5rDcgwB9IGP\nVqQvfExPHEXbXcIFdRc2IvNh96/YCouz8OQd98kiy8epqso4bFbL5kHcdm6WQ5vy\n6ou0FrXEovmOasgWySZV5iFBi2QK2jqYGPnuyra+n11gPzkitKZD7hWI9HMC96zd\n9WCUpGkmF0o0xmReDgmGIjJuPTtWUbTv0t2IYdCtHOHhhE+lzpihNuACl3qFdJQ=\n=/Lrj\n-----END PGP SIGNATURE-----\n", "payload": "tree d0bd248a9d637751925c6a3cc186557d39b711e8\nparent a0e00f824a9cda3ee144a9f9f72f79a93b9cda39\nparent ab73d10a6ea034892d38fa8203954764c7e9df55\nauthor Tyler Mandry <tmandry@gmail.com> 1575930786 -0800\ncommitter GitHub <noreply@github.com> 1575930786 -0800\n\nRollup merge of #67119 - RalfJung:miri-test-libstd, r=alexcrichton\n\nlibstd miri tests: avoid warnings\n\nIgnore tests in a way that all the code still gets compiled, to get rid of all the \"unused\" warnings that otherwise show up when running the test suite in Miri.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e77582008888fdc7a6dc60263eddbcb8d4f74ad0", "html_url": "https://github.com/rust-lang/rust/commit/e77582008888fdc7a6dc60263eddbcb8d4f74ad0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e77582008888fdc7a6dc60263eddbcb8d4f74ad0/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0e00f824a9cda3ee144a9f9f72f79a93b9cda39", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0e00f824a9cda3ee144a9f9f72f79a93b9cda39", "html_url": "https://github.com/rust-lang/rust/commit/a0e00f824a9cda3ee144a9f9f72f79a93b9cda39"}, {"sha": "ab73d10a6ea034892d38fa8203954764c7e9df55", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab73d10a6ea034892d38fa8203954764c7e9df55", "html_url": "https://github.com/rust-lang/rust/commit/ab73d10a6ea034892d38fa8203954764c7e9df55"}], "stats": {"total": 90, "additions": 48, "deletions": 42}, "files": [{"sha": "c902971638b8e02615420f38341ab663e2b87077", "filename": "src/liballoc/alloc/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e77582008888fdc7a6dc60263eddbcb8d4f74ad0/src%2Fliballoc%2Falloc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e77582008888fdc7a6dc60263eddbcb8d4f74ad0/src%2Fliballoc%2Falloc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Falloc%2Ftests.rs?ref=e77582008888fdc7a6dc60263eddbcb8d4f74ad0", "patch": "@@ -22,7 +22,7 @@ fn allocate_zeroed() {\n }\n \n #[bench]\n-#[cfg(not(miri))] // Miri does not support benchmarks\n+#[cfg_attr(miri, ignore)] // Miri does not support benchmarks\n fn alloc_owned_small(b: &mut Bencher) {\n     b.iter(|| {\n         let _: Box<_> = box 10;"}, {"sha": "1b1d8eab39bfc84f97686c629e5e1ef938fee124", "filename": "src/liballoc/collections/linked_list/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e77582008888fdc7a6dc60263eddbcb8d4f74ad0/src%2Fliballoc%2Fcollections%2Flinked_list%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e77582008888fdc7a6dc60263eddbcb8d4f74ad0/src%2Fliballoc%2Fcollections%2Flinked_list%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Flinked_list%2Ftests.rs?ref=e77582008888fdc7a6dc60263eddbcb8d4f74ad0", "patch": "@@ -182,7 +182,7 @@ fn test_insert_prev() {\n \n #[test]\n #[cfg_attr(target_os = \"emscripten\", ignore)]\n-#[cfg(not(miri))] // Miri does not support threads\n+#[cfg_attr(miri, ignore)] // Miri does not support threads\n fn test_send() {\n     let n = list_from(&[1, 2, 3]);\n     thread::spawn(move || {"}, {"sha": "f2ce5b1d15dde13c94f03c9ef880fe0b7042f31a", "filename": "src/liballoc/collections/vec_deque/tests.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e77582008888fdc7a6dc60263eddbcb8d4f74ad0/src%2Fliballoc%2Fcollections%2Fvec_deque%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e77582008888fdc7a6dc60263eddbcb8d4f74ad0/src%2Fliballoc%2Fcollections%2Fvec_deque%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fvec_deque%2Ftests.rs?ref=e77582008888fdc7a6dc60263eddbcb8d4f74ad0", "patch": "@@ -3,7 +3,7 @@ use super::*;\n use ::test;\n \n #[bench]\n-#[cfg(not(miri))] // Miri does not support benchmarks\n+#[cfg_attr(miri, ignore)] // Miri does not support benchmarks\n fn bench_push_back_100(b: &mut test::Bencher) {\n     let mut deq = VecDeque::with_capacity(101);\n     b.iter(|| {\n@@ -16,7 +16,7 @@ fn bench_push_back_100(b: &mut test::Bencher) {\n }\n \n #[bench]\n-#[cfg(not(miri))] // Miri does not support benchmarks\n+#[cfg_attr(miri, ignore)] // Miri does not support benchmarks\n fn bench_push_front_100(b: &mut test::Bencher) {\n     let mut deq = VecDeque::with_capacity(101);\n     b.iter(|| {\n@@ -29,7 +29,7 @@ fn bench_push_front_100(b: &mut test::Bencher) {\n }\n \n #[bench]\n-#[cfg(not(miri))] // Miri does not support benchmarks\n+#[cfg_attr(miri, ignore)] // Miri does not support benchmarks\n fn bench_pop_back_100(b: &mut test::Bencher) {\n     let mut deq = VecDeque::<i32>::with_capacity(101);\n \n@@ -43,7 +43,7 @@ fn bench_pop_back_100(b: &mut test::Bencher) {\n }\n \n #[bench]\n-#[cfg(not(miri))] // Miri does not support benchmarks\n+#[cfg_attr(miri, ignore)] // Miri does not support benchmarks\n fn bench_pop_front_100(b: &mut test::Bencher) {\n     let mut deq = VecDeque::<i32>::with_capacity(101);\n "}, {"sha": "9ddba495b7e786682b11ae446129a118fbcb8e17", "filename": "src/liballoc/sync/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e77582008888fdc7a6dc60263eddbcb8d4f74ad0/src%2Fliballoc%2Fsync%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e77582008888fdc7a6dc60263eddbcb8d4f74ad0/src%2Fliballoc%2Fsync%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync%2Ftests.rs?ref=e77582008888fdc7a6dc60263eddbcb8d4f74ad0", "patch": "@@ -29,7 +29,7 @@ impl Drop for Canary {\n \n #[test]\n #[cfg_attr(target_os = \"emscripten\", ignore)]\n-#[cfg(not(miri))] // Miri does not support threads\n+#[cfg_attr(miri, ignore)] // Miri does not support threads\n fn manually_share_arc() {\n     let v = vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n     let arc_v = Arc::new(v);\n@@ -334,7 +334,7 @@ fn test_ptr_eq() {\n \n #[test]\n #[cfg_attr(target_os = \"emscripten\", ignore)]\n-#[cfg(not(miri))] // Miri does not support threads\n+#[cfg_attr(miri, ignore)] // Miri does not support threads\n fn test_weak_count_locked() {\n     let mut a = Arc::new(atomic::AtomicBool::new(false));\n     let a2 = a.clone();"}, {"sha": "ec45de7c79e28e86bc735cb341e2dd22ac98d628", "filename": "src/liballoc/tests/slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e77582008888fdc7a6dc60263eddbcb8d4f74ad0/src%2Fliballoc%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e77582008888fdc7a6dc60263eddbcb8d4f74ad0/src%2Fliballoc%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fslice.rs?ref=e77582008888fdc7a6dc60263eddbcb8d4f74ad0", "patch": "@@ -388,7 +388,7 @@ fn test_reverse() {\n }\n \n #[test]\n-#[cfg(not(miri))] // Miri is too slow\n+#[cfg_attr(miri, ignore)] // Miri is too slow\n fn test_sort() {\n     let mut rng = thread_rng();\n \n@@ -1610,7 +1610,7 @@ fn panic_safe() {\n     let moduli = &[5, 20, 50];\n \n     #[cfg(miri)]\n-    let lens = (1..13);\n+    let lens = 1..13;\n     #[cfg(miri)]\n     let moduli = &[10];\n "}, {"sha": "1b011242d0137fac3790323fe4088ba19d35db48", "filename": "src/liballoc/tests/str.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e77582008888fdc7a6dc60263eddbcb8d4f74ad0/src%2Fliballoc%2Ftests%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e77582008888fdc7a6dc60263eddbcb8d4f74ad0/src%2Fliballoc%2Ftests%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fstr.rs?ref=e77582008888fdc7a6dc60263eddbcb8d4f74ad0", "patch": "@@ -166,7 +166,7 @@ fn test_join_for_different_lengths_with_long_separator() {\n }\n \n #[test]\n-#[cfg(not(miri))] // Miri is too slow\n+#[cfg_attr(miri, ignore)] // Miri is too slow\n fn test_unsafe_slice() {\n     assert_eq!(\"ab\", unsafe {\"abc\".get_unchecked(0..2)});\n     assert_eq!(\"bc\", unsafe {\"abc\".get_unchecked(1..3)});\n@@ -483,8 +483,8 @@ mod slice_index {\n     }\n \n     #[test]\n-    #[cfg(not(target_os = \"emscripten\"))] // hits an OOM\n-    #[cfg(not(miri))] // Miri is too slow\n+    #[cfg_attr(target_os = \"emscripten\", ignore)] // hits an OOM\n+    #[cfg_attr(miri, ignore)] // Miri is too slow\n     fn simple_big() {\n         fn a_million_letter_x() -> String {\n             let mut i = 0;\n@@ -1069,7 +1069,7 @@ fn test_rev_iterator() {\n }\n \n #[test]\n-#[cfg(not(miri))] // Miri is too slow\n+#[cfg_attr(miri, ignore)] // Miri is too slow\n fn test_chars_decoding() {\n     let mut bytes = [0; 4];\n     for c in (0..0x110000).filter_map(std::char::from_u32) {\n@@ -1081,7 +1081,7 @@ fn test_chars_decoding() {\n }\n \n #[test]\n-#[cfg(not(miri))] // Miri is too slow\n+#[cfg_attr(miri, ignore)] // Miri is too slow\n fn test_chars_rev_decoding() {\n     let mut bytes = [0; 4];\n     for c in (0..0x110000).filter_map(std::char::from_u32) {\n@@ -1380,7 +1380,6 @@ fn test_bool_from_str() {\n     assert_eq!(\"not even a boolean\".parse::<bool>().ok(), None);\n }\n \n-#[cfg(not(miri))] // Miri is too slow\n fn check_contains_all_substrings(s: &str) {\n     assert!(s.contains(\"\"));\n     for i in 0..s.len() {\n@@ -1391,7 +1390,7 @@ fn check_contains_all_substrings(s: &str) {\n }\n \n #[test]\n-#[cfg(not(miri))] // Miri is too slow\n+#[cfg_attr(miri, ignore)] // Miri is too slow\n fn strslice_issue_16589() {\n     assert!(\"bananas\".contains(\"nana\"));\n \n@@ -1408,7 +1407,7 @@ fn strslice_issue_16878() {\n \n \n #[test]\n-#[cfg(not(miri))] // Miri is too slow\n+#[cfg_attr(miri, ignore)] // Miri is too slow\n fn test_strslice_contains() {\n     let x = \"There are moments, Jeeves, when one asks oneself, 'Do trousers matter?'\";\n     check_contains_all_substrings(x);"}, {"sha": "fe7b4ff24b8c9d2d2476a870375570b44ec2b336", "filename": "src/liballoc/tests/string.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e77582008888fdc7a6dc60263eddbcb8d4f74ad0/src%2Fliballoc%2Ftests%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e77582008888fdc7a6dc60263eddbcb8d4f74ad0/src%2Fliballoc%2Ftests%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fstring.rs?ref=e77582008888fdc7a6dc60263eddbcb8d4f74ad0", "patch": "@@ -523,7 +523,7 @@ fn test_reserve_exact() {\n }\n \n #[test]\n-#[cfg(not(miri))] // Miri does not support signalling OOM\n+#[cfg_attr(miri, ignore)] // Miri does not support signalling OOM\n fn test_try_reserve() {\n \n     // These are the interesting cases:\n@@ -601,7 +601,7 @@ fn test_try_reserve() {\n }\n \n #[test]\n-#[cfg(not(miri))] // Miri does not support signalling OOM\n+#[cfg_attr(miri, ignore)] // Miri does not support signalling OOM\n fn test_try_reserve_exact() {\n \n     // This is exactly the same as test_try_reserve with the method changed."}, {"sha": "5e788d61f84fded8521b6e75e356d031d237f06d", "filename": "src/liballoc/tests/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e77582008888fdc7a6dc60263eddbcb8d4f74ad0/src%2Fliballoc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e77582008888fdc7a6dc60263eddbcb8d4f74ad0/src%2Fliballoc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fvec.rs?ref=e77582008888fdc7a6dc60263eddbcb8d4f74ad0", "patch": "@@ -1080,7 +1080,7 @@ fn test_reserve_exact() {\n }\n \n #[test]\n-#[cfg(not(miri))] // Miri does not support signalling OOM\n+#[cfg_attr(miri, ignore)] // Miri does not support signalling OOM\n fn test_try_reserve() {\n \n     // These are the interesting cases:\n@@ -1183,7 +1183,7 @@ fn test_try_reserve() {\n }\n \n #[test]\n-#[cfg(not(miri))] // Miri does not support signalling OOM\n+#[cfg_attr(miri, ignore)] // Miri does not support signalling OOM\n fn test_try_reserve_exact() {\n \n     // This is exactly the same as test_try_reserve with the method changed."}, {"sha": "ebcc832017172ed333c6c490b31a7e8b58396e1e", "filename": "src/liballoc/tests/vec_deque.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e77582008888fdc7a6dc60263eddbcb8d4f74ad0/src%2Fliballoc%2Ftests%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e77582008888fdc7a6dc60263eddbcb8d4f74ad0/src%2Fliballoc%2Ftests%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fvec_deque.rs?ref=e77582008888fdc7a6dc60263eddbcb8d4f74ad0", "patch": "@@ -1100,7 +1100,7 @@ fn test_reserve_exact_2() {\n }\n \n #[test]\n-#[cfg(not(miri))] // Miri does not support signalling OOM\n+#[cfg_attr(miri, ignore)] // Miri does not support signalling OOM\n fn test_try_reserve() {\n     // These are the interesting cases:\n     // * exactly isize::MAX should never trigger a CapacityOverflow (can be OOM)\n@@ -1214,7 +1214,7 @@ fn test_try_reserve() {\n }\n \n #[test]\n-#[cfg(not(miri))] // Miri does not support signalling OOM\n+#[cfg_attr(miri, ignore)] // Miri does not support signalling OOM\n fn test_try_reserve_exact() {\n     // This is exactly the same as test_try_reserve with the method changed.\n     // See that test for comments."}, {"sha": "ba0220f0d92df86eda4aba30f5b979ab6664fcfd", "filename": "src/libcore/tests/hash/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e77582008888fdc7a6dc60263eddbcb8d4f74ad0/src%2Flibcore%2Ftests%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e77582008888fdc7a6dc60263eddbcb8d4f74ad0/src%2Flibcore%2Ftests%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fhash%2Fmod.rs?ref=e77582008888fdc7a6dc60263eddbcb8d4f74ad0", "patch": "@@ -71,14 +71,16 @@ fn test_writer_hasher() {\n     let ptr = 5_usize as *mut i32;\n     assert_eq!(hash(&ptr), 5);\n \n+    if cfg!(miri) { // Miri cannot hash pointers\n+        return;\n+    }\n+\n     let cs: &mut [u8] = &mut [1, 2, 3];\n     let ptr = cs.as_ptr();\n     let slice_ptr = cs as *const [u8];\n-    #[cfg(not(miri))] // Miri cannot hash pointers\n     assert_eq!(hash(&slice_ptr), hash(&ptr) + cs.len() as u64);\n \n     let slice_ptr = cs as *mut [u8];\n-    #[cfg(not(miri))] // Miri cannot hash pointers\n     assert_eq!(hash(&slice_ptr), hash(&ptr) + cs.len() as u64);\n }\n "}, {"sha": "6bb348fd752e637aab68d60680a690f9d780bfe9", "filename": "src/libcore/tests/num/dec2flt/mod.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e77582008888fdc7a6dc60263eddbcb8d4f74ad0/src%2Flibcore%2Ftests%2Fnum%2Fdec2flt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e77582008888fdc7a6dc60263eddbcb8d4f74ad0/src%2Flibcore%2Ftests%2Fnum%2Fdec2flt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fdec2flt%2Fmod.rs?ref=e77582008888fdc7a6dc60263eddbcb8d4f74ad0", "patch": "@@ -31,7 +31,11 @@ fn ordinary() {\n     test_literal!(0.1);\n     test_literal!(12345.);\n     test_literal!(0.9999999);\n-    #[cfg(not(miri))] // Miri is too slow\n+\n+    if cfg!(miri) { // Miri is too slow\n+        return;\n+    }\n+\n     test_literal!(2.2250738585072014e-308);\n }\n \n@@ -53,7 +57,7 @@ fn large() {\n }\n \n #[test]\n-#[cfg(not(miri))] // Miri is too slow\n+#[cfg_attr(miri, ignore)] // Miri is too slow\n fn subnormals() {\n     test_literal!(5e-324);\n     test_literal!(91e-324);\n@@ -65,7 +69,7 @@ fn subnormals() {\n }\n \n #[test]\n-#[cfg(not(miri))] // Miri is too slow\n+#[cfg_attr(miri, ignore)] // Miri is too slow\n fn infinity() {\n     test_literal!(1e400);\n     test_literal!(1e309);\n@@ -77,9 +81,12 @@ fn infinity() {\n fn zero() {\n     test_literal!(0.0);\n     test_literal!(1e-325);\n-    #[cfg(not(miri))] // Miri is too slow\n+\n+    if cfg!(miri) { // Miri is too slow\n+        return;\n+    }\n+\n     test_literal!(1e-326);\n-    #[cfg(not(miri))] // Miri is too slow\n     test_literal!(1e-500);\n }\n "}, {"sha": "2f94ea2fc4b70494737f01f8e5eb123fc94805ba", "filename": "src/libcore/tests/num/flt2dec/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e77582008888fdc7a6dc60263eddbcb8d4f74ad0/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e77582008888fdc7a6dc60263eddbcb8d4f74ad0/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Fmod.rs?ref=e77582008888fdc7a6dc60263eddbcb8d4f74ad0", "patch": "@@ -256,7 +256,6 @@ pub fn f32_shortest_sanity_test<F>(mut f: F) where F: FnMut(&Decoded, &mut [u8])\n     check_shortest!(f(minf32) => b\"1\", -44);\n }\n \n-#[cfg(not(miri))] // Miri is too slow\n pub fn f32_exact_sanity_test<F>(mut f: F)\n         where F: FnMut(&Decoded, &mut [u8], i16) -> (usize, i16) {\n     let minf32 = ldexp_f32(1.0, -149);\n@@ -362,7 +361,6 @@ pub fn f64_shortest_sanity_test<F>(mut f: F) where F: FnMut(&Decoded, &mut [u8])\n     check_shortest!(f(minf64) => b\"5\", -323);\n }\n \n-#[cfg(not(miri))] // Miri is too slow\n pub fn f64_exact_sanity_test<F>(mut f: F)\n         where F: FnMut(&Decoded, &mut [u8], i16) -> (usize, i16) {\n     let minf64 = ldexp_f64(1.0, -1074);"}, {"sha": "3d985c6796b16908e96c71ba32f9523f9d622282", "filename": "src/libcore/tests/num/flt2dec/strategy/dragon.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e77582008888fdc7a6dc60263eddbcb8d4f74ad0/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e77582008888fdc7a6dc60263eddbcb8d4f74ad0/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs?ref=e77582008888fdc7a6dc60263eddbcb8d4f74ad0", "patch": "@@ -22,7 +22,7 @@ fn shortest_sanity_test() {\n }\n \n #[test]\n-#[cfg(not(miri))] // Miri is too slow\n+#[cfg_attr(miri, ignore)] // Miri is too slow\n fn exact_sanity_test() {\n     // This test ends up running what I can only assume is some corner-ish case\n     // of the `exp2` library function, defined in whatever C runtime we're"}, {"sha": "ff8373c64551b3596e1ba58b80db322e623d3270", "filename": "src/libcore/tests/num/flt2dec/strategy/grisu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e77582008888fdc7a6dc60263eddbcb8d4f74ad0/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e77582008888fdc7a6dc60263eddbcb8d4f74ad0/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs?ref=e77582008888fdc7a6dc60263eddbcb8d4f74ad0", "patch": "@@ -41,7 +41,7 @@ fn shortest_sanity_test() {\n }\n \n #[test]\n-#[cfg(not(miri))] // Miri is too slow\n+#[cfg_attr(miri, ignore)] // Miri is too slow\n fn exact_sanity_test() {\n     // See comments in dragon.rs's exact_sanity_test for why this test is\n     // ignored on MSVC"}, {"sha": "eea736bc88f013c9214956487180c86798fa77e0", "filename": "src/libcore/tests/ptr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e77582008888fdc7a6dc60263eddbcb8d4f74ad0/src%2Flibcore%2Ftests%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e77582008888fdc7a6dc60263eddbcb8d4f74ad0/src%2Flibcore%2Ftests%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fptr.rs?ref=e77582008888fdc7a6dc60263eddbcb8d4f74ad0", "patch": "@@ -289,7 +289,7 @@ fn write_unaligned_drop() {\n }\n \n #[test]\n-#[cfg(not(miri))] // Miri does not compute a maximal `mid` for `align_offset`\n+#[cfg_attr(miri, ignore)] // Miri does not compute a maximal `mid` for `align_offset`\n fn align_offset_zst() {\n     // For pointers of stride = 0, the pointer is already aligned or it cannot be aligned at\n     // all, because no amount of elements will align the pointer.\n@@ -304,7 +304,7 @@ fn align_offset_zst() {\n }\n \n #[test]\n-#[cfg(not(miri))] // Miri does not compute a maximal `mid` for `align_offset`\n+#[cfg_attr(miri, ignore)] // Miri does not compute a maximal `mid` for `align_offset`\n fn align_offset_stride1() {\n     // For pointers of stride = 1, the pointer can always be aligned. The offset is equal to\n     // number of bytes.\n@@ -326,7 +326,7 @@ fn align_offset_stride1() {\n }\n \n #[test]\n-#[cfg(not(miri))] // Miri is too slow\n+#[cfg_attr(miri, ignore)] // Miri is too slow\n fn align_offset_weird_strides() {\n     #[repr(packed)]\n     struct A3(u16, u8);"}, {"sha": "cc274b4aecf54e24e50b447560cdfb97558f550b", "filename": "src/libcore/tests/slice.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e77582008888fdc7a6dc60263eddbcb8d4f74ad0/src%2Flibcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e77582008888fdc7a6dc60263eddbcb8d4f74ad0/src%2Flibcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fslice.rs?ref=e77582008888fdc7a6dc60263eddbcb8d4f74ad0", "patch": "@@ -1183,7 +1183,7 @@ fn test_rotate_right() {\n }\n \n #[test]\n-#[cfg(not(miri))] // Miri is too slow\n+#[cfg_attr(miri, ignore)] // Miri is too slow\n fn brute_force_rotate_test_0() {\n     // In case of edge cases involving multiple algorithms\n     let n = 300;\n@@ -1302,7 +1302,7 @@ fn sort_unstable() {\n \n #[test]\n #[cfg(not(target_arch = \"wasm32\"))]\n-#[cfg(not(miri))] // Miri is too slow\n+#[cfg_attr(miri, ignore)] // Miri is too slow\n fn partition_at_index() {\n     use core::cmp::Ordering::{Equal, Greater, Less};\n     use rand::rngs::StdRng;\n@@ -1505,7 +1505,7 @@ pub mod memchr {\n }\n \n #[test]\n-#[cfg(not(miri))] // Miri does not compute a maximal `mid` for `align_offset`\n+#[cfg_attr(miri, ignore)] // Miri does not compute a maximal `mid` for `align_offset`\n fn test_align_to_simple() {\n     let bytes = [1u8, 2, 3, 4, 5, 6, 7];\n     let (prefix, aligned, suffix) = unsafe { bytes.align_to::<u16>() };\n@@ -1535,7 +1535,7 @@ fn test_align_to_zst() {\n }\n \n #[test]\n-#[cfg(not(miri))] // Miri does not compute a maximal `mid` for `align_offset`\n+#[cfg_attr(miri, ignore)] // Miri does not compute a maximal `mid` for `align_offset`\n fn test_align_to_non_trivial() {\n     #[repr(align(8))]\n     struct U64(u64, u64);"}]}