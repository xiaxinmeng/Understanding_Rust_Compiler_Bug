{"sha": "a3d79b517273e333127cb6edb7ea001153df800c", "node_id": "C_kwDOAAsO6NoAKGEzZDc5YjUxNzI3M2UzMzMxMjdjYjZlZGI3ZWEwMDExNTNkZjgwMGM", "commit": {"author": {"name": "Jonas Platte", "email": "jplatte+git@posteo.de", "date": "2022-09-27T18:40:51Z"}, "committer": {"name": "Jonas Platte", "email": "jplatte+git@posteo.de", "date": "2022-09-27T18:40:51Z"}, "message": "Update outside test and generated code", "tree": {"sha": "0fa1adfcf2be9460088b0ea878e266ab541adf04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fa1adfcf2be9460088b0ea878e266ab541adf04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3d79b517273e333127cb6edb7ea001153df800c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niIwEABYIADQWIQSDGkJBzFPeoiYaT9p9Jh13HZFTeAUCYzNDsxYcanBsYXR0ZStn\naXRAcG9zdGVvLmRlAAoJEH0mHXcdkVN4DNMA/R99ABnl63+k1RxSNOW8cpUKADHM\nXYxTcbY2G/uIxTKDAP4+zAy7wShUdE9GiAe3eodvf5+IUF4+jxzq98XwkI4bDA==\n=YurJ\n-----END PGP SIGNATURE-----", "payload": "tree 0fa1adfcf2be9460088b0ea878e266ab541adf04\nparent 2c666a08b03a16b4ecf28e87e6deae81b4bac590\nauthor Jonas Platte <jplatte+git@posteo.de> 1664304051 +0200\ncommitter Jonas Platte <jplatte+git@posteo.de> 1664304051 +0200\n\nUpdate outside test and generated code\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3d79b517273e333127cb6edb7ea001153df800c", "html_url": "https://github.com/rust-lang/rust/commit/a3d79b517273e333127cb6edb7ea001153df800c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3d79b517273e333127cb6edb7ea001153df800c/comments", "author": {"login": "jplatte", "id": 951129, "node_id": "MDQ6VXNlcjk1MTEyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/951129?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jplatte", "html_url": "https://github.com/jplatte", "followers_url": "https://api.github.com/users/jplatte/followers", "following_url": "https://api.github.com/users/jplatte/following{/other_user}", "gists_url": "https://api.github.com/users/jplatte/gists{/gist_id}", "starred_url": "https://api.github.com/users/jplatte/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jplatte/subscriptions", "organizations_url": "https://api.github.com/users/jplatte/orgs", "repos_url": "https://api.github.com/users/jplatte/repos", "events_url": "https://api.github.com/users/jplatte/events{/privacy}", "received_events_url": "https://api.github.com/users/jplatte/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jplatte", "id": 951129, "node_id": "MDQ6VXNlcjk1MTEyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/951129?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jplatte", "html_url": "https://github.com/jplatte", "followers_url": "https://api.github.com/users/jplatte/followers", "following_url": "https://api.github.com/users/jplatte/following{/other_user}", "gists_url": "https://api.github.com/users/jplatte/gists{/gist_id}", "starred_url": "https://api.github.com/users/jplatte/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jplatte/subscriptions", "organizations_url": "https://api.github.com/users/jplatte/orgs", "repos_url": "https://api.github.com/users/jplatte/repos", "events_url": "https://api.github.com/users/jplatte/events{/privacy}", "received_events_url": "https://api.github.com/users/jplatte/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c666a08b03a16b4ecf28e87e6deae81b4bac590", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c666a08b03a16b4ecf28e87e6deae81b4bac590", "html_url": "https://github.com/rust-lang/rust/commit/2c666a08b03a16b4ecf28e87e6deae81b4bac590"}], "stats": {"total": 42, "additions": 42, "deletions": 0}, "files": [{"sha": "f7f2417d0745d7a4088ed75a11f7241875bb5663", "filename": "crates/ide-assists/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a3d79b517273e333127cb6edb7ea001153df800c/crates%2Fide-assists%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3d79b517273e333127cb6edb7ea001153df800c/crates%2Fide-assists%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Ftests.rs?ref=a3d79b517273e333127cb6edb7ea001153df800c", "patch": "@@ -232,6 +232,7 @@ fn assist_order_field_struct() {\n     assert_eq!(assists.next().expect(\"expected assist\").label, \"Generate a getter method\");\n     assert_eq!(assists.next().expect(\"expected assist\").label, \"Generate a mut getter method\");\n     assert_eq!(assists.next().expect(\"expected assist\").label, \"Generate a setter method\");\n+    assert_eq!(assists.next().expect(\"expected assist\").label, \"Convert to tuple struct\");\n     assert_eq!(assists.next().expect(\"expected assist\").label, \"Add `#[derive]`\");\n }\n "}, {"sha": "2c4000efe0fa25a9f0c159d0c5f2f046ab04c9b5", "filename": "crates/ide-assists/src/tests/generated.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/a3d79b517273e333127cb6edb7ea001153df800c/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3d79b517273e333127cb6edb7ea001153df800c/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=a3d79b517273e333127cb6edb7ea001153df800c", "patch": "@@ -407,6 +407,47 @@ fn main() {\n     )\n }\n \n+#[test]\n+fn doctest_convert_named_struct_to_tuple_struct() {\n+    check_doc_test(\n+        \"convert_named_struct_to_tuple_struct\",\n+        r#####\"\n+struct Point$0 { x: f32, y: f32 }\n+\n+impl Point {\n+    pub fn new(x: f32, y: f32) -> Self {\n+        Point { x, y }\n+    }\n+\n+    pub fn x(&self) -> f32 {\n+        self.x\n+    }\n+\n+    pub fn y(&self) -> f32 {\n+        self.y\n+    }\n+}\n+\"#####,\n+        r#####\"\n+struct Point(f32, f32);\n+\n+impl Point {\n+    pub fn new(x: f32, y: f32) -> Self {\n+        Point(x, y)\n+    }\n+\n+    pub fn x(&self) -> f32 {\n+        self.0\n+    }\n+\n+    pub fn y(&self) -> f32 {\n+        self.1\n+    }\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_convert_to_guarded_return() {\n     check_doc_test("}]}