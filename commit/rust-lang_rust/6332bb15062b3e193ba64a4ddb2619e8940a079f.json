{"sha": "6332bb15062b3e193ba64a4ddb2619e8940a079f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzMzJiYjE1MDYyYjNlMTkzYmE2NGE0ZGRiMjYxOWU4OTQwYTA3OWY=", "commit": {"author": {"name": "Richard Diamond", "email": "wichard@vitalitystudios.com", "date": "2018-07-02T03:42:00Z"}, "committer": {"name": "Richard Diamond", "email": "wichard@vitalitystudios.com", "date": "2018-07-13T22:22:23Z"}, "message": "Add the `amdgpu-kernel` ABI.\n\nTechnically, there are requirements imposed by the LLVM\n`AMDGPUTargetMachine` on functions with this ABI (eg, the return type\nmust be void), but I'm unsure exactly where this should be enforced.", "tree": {"sha": "c068e7c0f403156254845624d27142ddd1abb8d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c068e7c0f403156254845624d27142ddd1abb8d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6332bb15062b3e193ba64a4ddb2619e8940a079f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6332bb15062b3e193ba64a4ddb2619e8940a079f", "html_url": "https://github.com/rust-lang/rust/commit/6332bb15062b3e193ba64a4ddb2619e8940a079f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6332bb15062b3e193ba64a4ddb2619e8940a079f/comments", "author": {"login": "DiamondLovesYou", "id": 650357, "node_id": "MDQ6VXNlcjY1MDM1Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/650357?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DiamondLovesYou", "html_url": "https://github.com/DiamondLovesYou", "followers_url": "https://api.github.com/users/DiamondLovesYou/followers", "following_url": "https://api.github.com/users/DiamondLovesYou/following{/other_user}", "gists_url": "https://api.github.com/users/DiamondLovesYou/gists{/gist_id}", "starred_url": "https://api.github.com/users/DiamondLovesYou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DiamondLovesYou/subscriptions", "organizations_url": "https://api.github.com/users/DiamondLovesYou/orgs", "repos_url": "https://api.github.com/users/DiamondLovesYou/repos", "events_url": "https://api.github.com/users/DiamondLovesYou/events{/privacy}", "received_events_url": "https://api.github.com/users/DiamondLovesYou/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DiamondLovesYou", "id": 650357, "node_id": "MDQ6VXNlcjY1MDM1Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/650357?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DiamondLovesYou", "html_url": "https://github.com/DiamondLovesYou", "followers_url": "https://api.github.com/users/DiamondLovesYou/followers", "following_url": "https://api.github.com/users/DiamondLovesYou/following{/other_user}", "gists_url": "https://api.github.com/users/DiamondLovesYou/gists{/gist_id}", "starred_url": "https://api.github.com/users/DiamondLovesYou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DiamondLovesYou/subscriptions", "organizations_url": "https://api.github.com/users/DiamondLovesYou/orgs", "repos_url": "https://api.github.com/users/DiamondLovesYou/repos", "events_url": "https://api.github.com/users/DiamondLovesYou/events{/privacy}", "received_events_url": "https://api.github.com/users/DiamondLovesYou/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0955a34bcb17f0b31d7b86522a520ebe7fa93ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0955a34bcb17f0b31d7b86522a520ebe7fa93ac", "html_url": "https://github.com/rust-lang/rust/commit/c0955a34bcb17f0b31d7b86522a520ebe7fa93ac"}], "stats": {"total": 196, "additions": 137, "deletions": 59}, "files": [{"sha": "713e8b561f1064a97d4ffc9a88108bf019fd5f06", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6332bb15062b3e193ba64a4ddb2619e8940a079f/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6332bb15062b3e193ba64a4ddb2619e8940a079f/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=6332bb15062b3e193ba64a4ddb2619e8940a079f", "patch": "@@ -114,6 +114,7 @@ impl_stable_hash_for!(enum ::rustc_target::spec::abi::Abi {\n     PtxKernel,\n     Msp430Interrupt,\n     X86Interrupt,\n+    AmdGpuKernel,\n     Rust,\n     C,\n     System,"}, {"sha": "b1502902079b9f2c81d4f6280384ba375540f7db", "filename": "src/librustc_codegen_llvm/abi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6332bb15062b3e193ba64a4ddb2619e8940a079f/src%2Flibrustc_codegen_llvm%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6332bb15062b3e193ba64a4ddb2619e8940a079f/src%2Flibrustc_codegen_llvm%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fabi.rs?ref=6332bb15062b3e193ba64a4ddb2619e8940a079f", "patch": "@@ -343,6 +343,7 @@ impl<'a, 'tcx> FnTypeExt<'a, 'tcx> for FnType<'tcx, Ty<'tcx>> {\n             PtxKernel => Conv::PtxKernel,\n             Msp430Interrupt => Conv::Msp430Intr,\n             X86Interrupt => Conv::X86Intr,\n+            AmdGpuKernel => Conv::AmdGpuKernel,\n \n             // These API constants ought to be more specific...\n             Cdecl => Conv::C,\n@@ -608,6 +609,7 @@ impl<'a, 'tcx> FnTypeExt<'a, 'tcx> for FnType<'tcx, Ty<'tcx>> {\n     fn llvm_cconv(&self) -> llvm::CallConv {\n         match self.conv {\n             Conv::C => llvm::CCallConv,\n+            Conv::AmdGpuKernel => llvm::AmdGpuKernel,\n             Conv::ArmAapcs => llvm::ArmAapcsCallConv,\n             Conv::Msp430Intr => llvm::Msp430Intr,\n             Conv::PtxKernel => llvm::PtxKernel,"}, {"sha": "b4483557dd33fe53816ae93598df910fa67b169f", "filename": "src/librustc_llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6332bb15062b3e193ba64a4ddb2619e8940a079f/src%2Flibrustc_llvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6332bb15062b3e193ba64a4ddb2619e8940a079f/src%2Flibrustc_llvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fffi.rs?ref=6332bb15062b3e193ba64a4ddb2619e8940a079f", "patch": "@@ -55,6 +55,7 @@ pub enum CallConv {\n     X86_64_Win64 = 79,\n     X86_VectorCall = 80,\n     X86_Intr = 83,\n+    AmdGpuKernel = 91,\n }\n \n /// LLVMRustLinkage"}, {"sha": "ca5aba5b6420a36bbfe1c1a18cbaf0248f3de947", "filename": "src/librustc_target/abi/call/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6332bb15062b3e193ba64a4ddb2619e8940a079f/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6332bb15062b3e193ba64a4ddb2619e8940a079f/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs?ref=6332bb15062b3e193ba64a4ddb2619e8940a079f", "patch": "@@ -436,6 +436,8 @@ pub enum Conv {\n \n     X86_64SysV,\n     X86_64Win64,\n+\n+    AmdGpuKernel,\n }\n \n /// Metadata describing how the arguments to a native function"}, {"sha": "317cdb400636c943ffeb6d9dd7c4bfb9d15803ac", "filename": "src/librustc_target/spec/abi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6332bb15062b3e193ba64a4ddb2619e8940a079f/src%2Flibrustc_target%2Fspec%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6332bb15062b3e193ba64a4ddb2619e8940a079f/src%2Flibrustc_target%2Fspec%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fabi.rs?ref=6332bb15062b3e193ba64a4ddb2619e8940a079f", "patch": "@@ -27,6 +27,7 @@ pub enum Abi {\n     PtxKernel,\n     Msp430Interrupt,\n     X86Interrupt,\n+    AmdGpuKernel,\n \n     // Multiplatform / generic ABIs\n     Rust,\n@@ -63,6 +64,7 @@ const AbiDatas: &'static [AbiData] = &[\n     AbiData {abi: Abi::PtxKernel, name: \"ptx-kernel\", generic: false },\n     AbiData {abi: Abi::Msp430Interrupt, name: \"msp430-interrupt\", generic: false },\n     AbiData {abi: Abi::X86Interrupt, name: \"x86-interrupt\", generic: false },\n+    AbiData {abi: Abi::AmdGpuKernel, name: \"amdgpu-kernel\", generic: false },\n \n     // Cross-platform ABIs\n     AbiData {abi: Abi::Rust, name: \"Rust\", generic: true },"}, {"sha": "50b2ac3369cc2c91e58b10a1135b180c8223ed52", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6332bb15062b3e193ba64a4ddb2619e8940a079f/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6332bb15062b3e193ba64a4ddb2619e8940a079f/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=6332bb15062b3e193ba64a4ddb2619e8940a079f", "patch": "@@ -484,6 +484,8 @@ declare_features! (\n \n     // #[alloc_error_handler]\n     (active, alloc_error_handler, \"1.29.0\", Some(51540), None),\n+\n+    (active, abi_amdgpu_kernel, \"1.29.0\", Some(51575), None),\n );\n \n declare_features! (\n@@ -1439,6 +1441,10 @@ impl<'a> PostExpansionVisitor<'a> {\n                 gate_feature_post!(&self, abi_x86_interrupt, span,\n                                    \"x86-interrupt ABI is experimental and subject to change\");\n             },\n+            Abi::AmdGpuKernel => {\n+                gate_feature_post!(&self, abi_amdgpu_kernel, span,\n+                                   \"amdgpu-kernel ABI is experimental and subject to change\");\n+            },\n             // Stable\n             Abi::Cdecl |\n             Abi::Stdcall |"}, {"sha": "ee11a6662c2c7b957f0c307083b66cbb94ba88b1", "filename": "src/test/ui/codemap_tests/unicode.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6332bb15062b3e193ba64a4ddb2619e8940a079f/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6332bb15062b3e193ba64a4ddb2619e8940a079f/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.stderr?ref=6332bb15062b3e193ba64a4ddb2619e8940a079f", "patch": "@@ -4,7 +4,7 @@ error[E0703]: invalid ABI: found `\u8def\u6feb\u72fc\u00e1\u0301\u0301`\n LL | extern \"\u8def\u6feb\u72fc\u00e1\u0301\u0301\" fn foo() {} //~ ERROR invalid ABI\n    |        ^^^^^^^^^ invalid ABI\n    |\n-   = help: valid ABIs: cdecl, stdcall, fastcall, vectorcall, thiscall, aapcs, win64, sysv64, ptx-kernel, msp430-interrupt, x86-interrupt, Rust, C, system, rust-intrinsic, rust-call, platform-intrinsic, unadjusted\n+   = help: valid ABIs: cdecl, stdcall, fastcall, vectorcall, thiscall, aapcs, win64, sysv64, ptx-kernel, msp430-interrupt, x86-interrupt, amdgpu-kernel, Rust, C, system, rust-intrinsic, rust-call, platform-intrinsic, unadjusted\n \n error: aborting due to previous error\n "}, {"sha": "db008b83797647394dc248a86aa5b4aff330a41a", "filename": "src/test/ui/feature-gate-abi.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6332bb15062b3e193ba64a4ddb2619e8940a079f/src%2Ftest%2Fui%2Ffeature-gate-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6332bb15062b3e193ba64a4ddb2619e8940a079f/src%2Ftest%2Fui%2Ffeature-gate-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-abi.rs?ref=6332bb15062b3e193ba64a4ddb2619e8940a079f", "patch": "@@ -7,13 +7,14 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-\n+// ignore-tidy-linelength\n // gate-test-intrinsics\n // gate-test-platform_intrinsics\n // gate-test-abi_vectorcall\n // gate-test-abi_thiscall\n // gate-test-abi_ptx\n // gate-test-abi_x86_interrupt\n+// gate-test-abi_amdgpu_kernel\n \n // Functions\n extern \"rust-intrinsic\" fn f1() {} //~ ERROR intrinsics are subject to change\n@@ -24,6 +25,7 @@ extern \"msp430-interrupt\" fn f5() {} //~ ERROR msp430-interrupt ABI is experimen\n extern \"ptx-kernel\" fn f6() {} //~ ERROR PTX ABIs are experimental and subject to change\n extern \"x86-interrupt\" fn f7() {} //~ ERROR x86-interrupt ABI is experimental\n extern \"thiscall\" fn f8() {} //~ ERROR thiscall is experimental and subject to change\n+extern \"amdgpu-kernel\" fn f9() {} //~ ERROR amdgpu-kernel ABI is experimental and subject to change\n \n // Methods in trait definition\n trait Tr {\n@@ -35,6 +37,7 @@ trait Tr {\n     extern \"ptx-kernel\" fn m6(); //~ ERROR PTX ABIs are experimental and subject to change\n     extern \"x86-interrupt\" fn m7(); //~ ERROR x86-interrupt ABI is experimental\n     extern \"thiscall\" fn m8(); //~ ERROR thiscall is experimental and subject to change\n+    extern \"amdgpu-kernel\" fn m9(); //~ ERROR amdgpu-kernel ABI is experimental and subject to change\n \n     extern \"rust-intrinsic\" fn dm1() {} //~ ERROR intrinsics are subject to change\n     extern \"platform-intrinsic\" fn dm2() {} //~ ERROR platform intrinsics are experimental\n@@ -44,6 +47,7 @@ trait Tr {\n     extern \"ptx-kernel\" fn dm6() {} //~ ERROR PTX ABIs are experimental and subject to change\n     extern \"x86-interrupt\" fn dm7() {} //~ ERROR x86-interrupt ABI is experimental\n     extern \"thiscall\" fn dm8() {} //~ ERROR thiscall is experimental and subject to change\n+    extern \"amdgpu-kernel\" fn dm9() {} //~ ERROR amdgpu-kernel ABI is experimental and subject to change\n }\n \n struct S;\n@@ -58,6 +62,7 @@ impl Tr for S {\n     extern \"ptx-kernel\" fn m6() {} //~ ERROR PTX ABIs are experimental and subject to change\n     extern \"x86-interrupt\" fn m7() {} //~ ERROR x86-interrupt ABI is experimental\n     extern \"thiscall\" fn m8() {} //~ ERROR thiscall is experimental and subject to change\n+    extern \"amdgpu-kernel\" fn m9() {} //~ ERROR amdgpu-kernel ABI is experimental and subject to change\n }\n \n // Methods in inherent impl\n@@ -70,6 +75,7 @@ impl S {\n     extern \"ptx-kernel\" fn im6() {} //~ ERROR PTX ABIs are experimental and subject to change\n     extern \"x86-interrupt\" fn im7() {} //~ ERROR x86-interrupt ABI is experimental\n     extern \"thiscall\" fn im8() {} //~ ERROR thiscall is experimental and subject to change\n+    extern \"amdgpu-kernel\" fn im9() {} //~ ERROR amdgpu-kernel ABI is experimental and subject to change\n }\n \n // Function pointer types\n@@ -81,6 +87,7 @@ type A5 = extern \"msp430-interrupt\" fn(); //~ ERROR msp430-interrupt ABI is expe\n type A6 = extern \"ptx-kernel\" fn (); //~ ERROR PTX ABIs are experimental and subject to change\n type A7 = extern \"x86-interrupt\" fn(); //~ ERROR x86-interrupt ABI is experimental\n type A8 = extern \"thiscall\" fn(); //~ ERROR thiscall is experimental and subject to change\n+type A9 = extern \"amdgpu-kernel\" fn(); //~ ERROR amdgpu-kernel ABI is experimental and subject to change\n \n // Foreign modules\n extern \"rust-intrinsic\" {} //~ ERROR intrinsics are subject to change\n@@ -91,5 +98,6 @@ extern \"msp430-interrupt\" {} //~ ERROR msp430-interrupt ABI is experimental\n extern \"ptx-kernel\" {} //~ ERROR PTX ABIs are experimental and subject to change\n extern \"x86-interrupt\" {} //~ ERROR x86-interrupt ABI is experimental\n extern \"thiscall\" {} //~ ERROR thiscall is experimental and subject to change\n+extern \"amdgpu-kernel\" {} //~ ERROR amdgpu-kernel ABI is experimental and subject to change\n \n fn main() {}"}, {"sha": "eb68391ba35466c6c865e4ff965c6bed8ec4830e", "filename": "src/test/ui/feature-gate-abi.stderr", "status": "modified", "additions": 113, "deletions": 57, "changes": 170, "blob_url": "https://github.com/rust-lang/rust/blob/6332bb15062b3e193ba64a4ddb2619e8940a079f/src%2Ftest%2Fui%2Ffeature-gate-abi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6332bb15062b3e193ba64a4ddb2619e8940a079f/src%2Ftest%2Fui%2Ffeature-gate-abi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-abi.stderr?ref=6332bb15062b3e193ba64a4ddb2619e8940a079f", "patch": "@@ -1,451 +1,507 @@\n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:19:1\n+  --> $DIR/feature-gate-abi.rs:20:1\n    |\n LL | extern \"rust-intrinsic\" fn f1() {} //~ ERROR intrinsics are subject to change\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(intrinsics)] to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy (see issue #27731)\n-  --> $DIR/feature-gate-abi.rs:20:1\n+  --> $DIR/feature-gate-abi.rs:21:1\n    |\n LL | extern \"platform-intrinsic\" fn f2() {} //~ ERROR platform intrinsics are experimental\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(platform_intrinsics)] to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:21:1\n+  --> $DIR/feature-gate-abi.rs:22:1\n    |\n LL | extern \"vectorcall\" fn f3() {} //~ ERROR vectorcall is experimental and subject to change\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_vectorcall)] to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change (see issue #29625)\n-  --> $DIR/feature-gate-abi.rs:22:1\n+  --> $DIR/feature-gate-abi.rs:23:1\n    |\n LL | extern \"rust-call\" fn f4() {} //~ ERROR rust-call ABI is subject to change\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(unboxed_closures)] to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change (see issue #38487)\n-  --> $DIR/feature-gate-abi.rs:23:1\n+  --> $DIR/feature-gate-abi.rs:24:1\n    |\n LL | extern \"msp430-interrupt\" fn f5() {} //~ ERROR msp430-interrupt ABI is experimental\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_msp430_interrupt)] to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change (see issue #38788)\n-  --> $DIR/feature-gate-abi.rs:24:1\n+  --> $DIR/feature-gate-abi.rs:25:1\n    |\n LL | extern \"ptx-kernel\" fn f6() {} //~ ERROR PTX ABIs are experimental and subject to change\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_ptx)] to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change (see issue #40180)\n-  --> $DIR/feature-gate-abi.rs:25:1\n+  --> $DIR/feature-gate-abi.rs:26:1\n    |\n LL | extern \"x86-interrupt\" fn f7() {} //~ ERROR x86-interrupt ABI is experimental\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_x86_interrupt)] to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:26:1\n+  --> $DIR/feature-gate-abi.rs:27:1\n    |\n LL | extern \"thiscall\" fn f8() {} //~ ERROR thiscall is experimental and subject to change\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_thiscall)] to the crate attributes to enable\n \n+error[E0658]: amdgpu-kernel ABI is experimental and subject to change (see issue #51575)\n+  --> $DIR/feature-gate-abi.rs:28:1\n+   |\n+LL | extern \"amdgpu-kernel\" fn f9() {} //~ ERROR amdgpu-kernel ABI is experimental and subject to change\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(abi_amdgpu_kernel)] to the crate attributes to enable\n+\n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:30:5\n+  --> $DIR/feature-gate-abi.rs:32:5\n    |\n LL |     extern \"rust-intrinsic\" fn m1(); //~ ERROR intrinsics are subject to change\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(intrinsics)] to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy (see issue #27731)\n-  --> $DIR/feature-gate-abi.rs:31:5\n+  --> $DIR/feature-gate-abi.rs:33:5\n    |\n LL |     extern \"platform-intrinsic\" fn m2(); //~ ERROR platform intrinsics are experimental\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(platform_intrinsics)] to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:32:5\n+  --> $DIR/feature-gate-abi.rs:34:5\n    |\n LL |     extern \"vectorcall\" fn m3(); //~ ERROR vectorcall is experimental and subject to change\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_vectorcall)] to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change (see issue #29625)\n-  --> $DIR/feature-gate-abi.rs:33:5\n+  --> $DIR/feature-gate-abi.rs:35:5\n    |\n LL |     extern \"rust-call\" fn m4(); //~ ERROR rust-call ABI is subject to change\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(unboxed_closures)] to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change (see issue #38487)\n-  --> $DIR/feature-gate-abi.rs:34:5\n+  --> $DIR/feature-gate-abi.rs:36:5\n    |\n LL |     extern \"msp430-interrupt\" fn m5(); //~ ERROR msp430-interrupt ABI is experimental\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_msp430_interrupt)] to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change (see issue #38788)\n-  --> $DIR/feature-gate-abi.rs:35:5\n+  --> $DIR/feature-gate-abi.rs:37:5\n    |\n LL |     extern \"ptx-kernel\" fn m6(); //~ ERROR PTX ABIs are experimental and subject to change\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_ptx)] to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change (see issue #40180)\n-  --> $DIR/feature-gate-abi.rs:36:5\n+  --> $DIR/feature-gate-abi.rs:38:5\n    |\n LL |     extern \"x86-interrupt\" fn m7(); //~ ERROR x86-interrupt ABI is experimental\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_x86_interrupt)] to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:37:5\n+  --> $DIR/feature-gate-abi.rs:39:5\n    |\n LL |     extern \"thiscall\" fn m8(); //~ ERROR thiscall is experimental and subject to change\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_thiscall)] to the crate attributes to enable\n \n+error[E0658]: amdgpu-kernel ABI is experimental and subject to change (see issue #51575)\n+  --> $DIR/feature-gate-abi.rs:40:5\n+   |\n+LL |     extern \"amdgpu-kernel\" fn m9(); //~ ERROR amdgpu-kernel ABI is experimental and subject to change\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(abi_amdgpu_kernel)] to the crate attributes to enable\n+\n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:39:5\n+  --> $DIR/feature-gate-abi.rs:42:5\n    |\n LL |     extern \"rust-intrinsic\" fn dm1() {} //~ ERROR intrinsics are subject to change\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(intrinsics)] to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy (see issue #27731)\n-  --> $DIR/feature-gate-abi.rs:40:5\n+  --> $DIR/feature-gate-abi.rs:43:5\n    |\n LL |     extern \"platform-intrinsic\" fn dm2() {} //~ ERROR platform intrinsics are experimental\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(platform_intrinsics)] to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:41:5\n+  --> $DIR/feature-gate-abi.rs:44:5\n    |\n LL |     extern \"vectorcall\" fn dm3() {} //~ ERROR vectorcall is experimental and subject to change\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_vectorcall)] to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change (see issue #29625)\n-  --> $DIR/feature-gate-abi.rs:42:5\n+  --> $DIR/feature-gate-abi.rs:45:5\n    |\n LL |     extern \"rust-call\" fn dm4() {} //~ ERROR rust-call ABI is subject to change\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(unboxed_closures)] to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change (see issue #38487)\n-  --> $DIR/feature-gate-abi.rs:43:5\n+  --> $DIR/feature-gate-abi.rs:46:5\n    |\n LL |     extern \"msp430-interrupt\" fn dm5() {} //~ ERROR msp430-interrupt ABI is experimental\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_msp430_interrupt)] to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change (see issue #38788)\n-  --> $DIR/feature-gate-abi.rs:44:5\n+  --> $DIR/feature-gate-abi.rs:47:5\n    |\n LL |     extern \"ptx-kernel\" fn dm6() {} //~ ERROR PTX ABIs are experimental and subject to change\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_ptx)] to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change (see issue #40180)\n-  --> $DIR/feature-gate-abi.rs:45:5\n+  --> $DIR/feature-gate-abi.rs:48:5\n    |\n LL |     extern \"x86-interrupt\" fn dm7() {} //~ ERROR x86-interrupt ABI is experimental\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_x86_interrupt)] to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:46:5\n+  --> $DIR/feature-gate-abi.rs:49:5\n    |\n LL |     extern \"thiscall\" fn dm8() {} //~ ERROR thiscall is experimental and subject to change\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_thiscall)] to the crate attributes to enable\n \n+error[E0658]: amdgpu-kernel ABI is experimental and subject to change (see issue #51575)\n+  --> $DIR/feature-gate-abi.rs:50:5\n+   |\n+LL |     extern \"amdgpu-kernel\" fn dm9() {} //~ ERROR amdgpu-kernel ABI is experimental and subject to change\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(abi_amdgpu_kernel)] to the crate attributes to enable\n+\n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:53:5\n+  --> $DIR/feature-gate-abi.rs:57:5\n    |\n LL |     extern \"rust-intrinsic\" fn m1() {} //~ ERROR intrinsics are subject to change\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(intrinsics)] to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy (see issue #27731)\n-  --> $DIR/feature-gate-abi.rs:54:5\n+  --> $DIR/feature-gate-abi.rs:58:5\n    |\n LL |     extern \"platform-intrinsic\" fn m2() {} //~ ERROR platform intrinsics are experimental\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(platform_intrinsics)] to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:55:5\n+  --> $DIR/feature-gate-abi.rs:59:5\n    |\n LL |     extern \"vectorcall\" fn m3() {} //~ ERROR vectorcall is experimental and subject to change\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_vectorcall)] to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change (see issue #29625)\n-  --> $DIR/feature-gate-abi.rs:56:5\n+  --> $DIR/feature-gate-abi.rs:60:5\n    |\n LL |     extern \"rust-call\" fn m4() {} //~ ERROR rust-call ABI is subject to change\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(unboxed_closures)] to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change (see issue #38487)\n-  --> $DIR/feature-gate-abi.rs:57:5\n+  --> $DIR/feature-gate-abi.rs:61:5\n    |\n LL |     extern \"msp430-interrupt\" fn m5() {} //~ ERROR msp430-interrupt ABI is experimental\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_msp430_interrupt)] to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change (see issue #38788)\n-  --> $DIR/feature-gate-abi.rs:58:5\n+  --> $DIR/feature-gate-abi.rs:62:5\n    |\n LL |     extern \"ptx-kernel\" fn m6() {} //~ ERROR PTX ABIs are experimental and subject to change\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_ptx)] to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change (see issue #40180)\n-  --> $DIR/feature-gate-abi.rs:59:5\n+  --> $DIR/feature-gate-abi.rs:63:5\n    |\n LL |     extern \"x86-interrupt\" fn m7() {} //~ ERROR x86-interrupt ABI is experimental\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_x86_interrupt)] to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:60:5\n+  --> $DIR/feature-gate-abi.rs:64:5\n    |\n LL |     extern \"thiscall\" fn m8() {} //~ ERROR thiscall is experimental and subject to change\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_thiscall)] to the crate attributes to enable\n \n-error[E0658]: intrinsics are subject to change\n+error[E0658]: amdgpu-kernel ABI is experimental and subject to change (see issue #51575)\n   --> $DIR/feature-gate-abi.rs:65:5\n    |\n+LL |     extern \"amdgpu-kernel\" fn m9() {} //~ ERROR amdgpu-kernel ABI is experimental and subject to change\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(abi_amdgpu_kernel)] to the crate attributes to enable\n+\n+error[E0658]: intrinsics are subject to change\n+  --> $DIR/feature-gate-abi.rs:70:5\n+   |\n LL |     extern \"rust-intrinsic\" fn im1() {} //~ ERROR intrinsics are subject to change\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(intrinsics)] to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy (see issue #27731)\n-  --> $DIR/feature-gate-abi.rs:66:5\n+  --> $DIR/feature-gate-abi.rs:71:5\n    |\n LL |     extern \"platform-intrinsic\" fn im2() {} //~ ERROR platform intrinsics are experimental\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(platform_intrinsics)] to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:67:5\n+  --> $DIR/feature-gate-abi.rs:72:5\n    |\n LL |     extern \"vectorcall\" fn im3() {} //~ ERROR vectorcall is experimental and subject to change\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_vectorcall)] to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change (see issue #29625)\n-  --> $DIR/feature-gate-abi.rs:68:5\n+  --> $DIR/feature-gate-abi.rs:73:5\n    |\n LL |     extern \"rust-call\" fn im4() {} //~ ERROR rust-call ABI is subject to change\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(unboxed_closures)] to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change (see issue #38487)\n-  --> $DIR/feature-gate-abi.rs:69:5\n+  --> $DIR/feature-gate-abi.rs:74:5\n    |\n LL |     extern \"msp430-interrupt\" fn im5() {} //~ ERROR msp430-interrupt ABI is experimental\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_msp430_interrupt)] to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change (see issue #38788)\n-  --> $DIR/feature-gate-abi.rs:70:5\n+  --> $DIR/feature-gate-abi.rs:75:5\n    |\n LL |     extern \"ptx-kernel\" fn im6() {} //~ ERROR PTX ABIs are experimental and subject to change\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_ptx)] to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change (see issue #40180)\n-  --> $DIR/feature-gate-abi.rs:71:5\n+  --> $DIR/feature-gate-abi.rs:76:5\n    |\n LL |     extern \"x86-interrupt\" fn im7() {} //~ ERROR x86-interrupt ABI is experimental\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_x86_interrupt)] to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:72:5\n+  --> $DIR/feature-gate-abi.rs:77:5\n    |\n LL |     extern \"thiscall\" fn im8() {} //~ ERROR thiscall is experimental and subject to change\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_thiscall)] to the crate attributes to enable\n \n+error[E0658]: amdgpu-kernel ABI is experimental and subject to change (see issue #51575)\n+  --> $DIR/feature-gate-abi.rs:78:5\n+   |\n+LL |     extern \"amdgpu-kernel\" fn im9() {} //~ ERROR amdgpu-kernel ABI is experimental and subject to change\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(abi_amdgpu_kernel)] to the crate attributes to enable\n+\n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:76:11\n+  --> $DIR/feature-gate-abi.rs:82:11\n    |\n LL | type A1 = extern \"rust-intrinsic\" fn(); //~ ERROR intrinsics are subject to change\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(intrinsics)] to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy (see issue #27731)\n-  --> $DIR/feature-gate-abi.rs:77:11\n+  --> $DIR/feature-gate-abi.rs:83:11\n    |\n LL | type A2 = extern \"platform-intrinsic\" fn(); //~ ERROR platform intrinsics are experimental\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(platform_intrinsics)] to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:78:11\n+  --> $DIR/feature-gate-abi.rs:84:11\n    |\n LL | type A3 = extern \"vectorcall\" fn(); //~ ERROR vectorcall is experimental and subject to change\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_vectorcall)] to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change (see issue #29625)\n-  --> $DIR/feature-gate-abi.rs:79:11\n+  --> $DIR/feature-gate-abi.rs:85:11\n    |\n LL | type A4 = extern \"rust-call\" fn(); //~ ERROR rust-call ABI is subject to change\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(unboxed_closures)] to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change (see issue #38487)\n-  --> $DIR/feature-gate-abi.rs:80:11\n+  --> $DIR/feature-gate-abi.rs:86:11\n    |\n LL | type A5 = extern \"msp430-interrupt\" fn(); //~ ERROR msp430-interrupt ABI is experimental\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_msp430_interrupt)] to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change (see issue #38788)\n-  --> $DIR/feature-gate-abi.rs:81:11\n+  --> $DIR/feature-gate-abi.rs:87:11\n    |\n LL | type A6 = extern \"ptx-kernel\" fn (); //~ ERROR PTX ABIs are experimental and subject to change\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_ptx)] to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change (see issue #40180)\n-  --> $DIR/feature-gate-abi.rs:82:11\n+  --> $DIR/feature-gate-abi.rs:88:11\n    |\n LL | type A7 = extern \"x86-interrupt\" fn(); //~ ERROR x86-interrupt ABI is experimental\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_x86_interrupt)] to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:83:11\n+  --> $DIR/feature-gate-abi.rs:89:11\n    |\n LL | type A8 = extern \"thiscall\" fn(); //~ ERROR thiscall is experimental and subject to change\n    |           ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_thiscall)] to the crate attributes to enable\n \n+error[E0658]: amdgpu-kernel ABI is experimental and subject to change (see issue #51575)\n+  --> $DIR/feature-gate-abi.rs:90:11\n+   |\n+LL | type A9 = extern \"amdgpu-kernel\" fn(); //~ ERROR amdgpu-kernel ABI is experimental and subject to change\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(abi_amdgpu_kernel)] to the crate attributes to enable\n+\n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:86:1\n+  --> $DIR/feature-gate-abi.rs:93:1\n    |\n LL | extern \"rust-intrinsic\" {} //~ ERROR intrinsics are subject to change\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(intrinsics)] to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy (see issue #27731)\n-  --> $DIR/feature-gate-abi.rs:87:1\n+  --> $DIR/feature-gate-abi.rs:94:1\n    |\n LL | extern \"platform-intrinsic\" {} //~ ERROR platform intrinsics are experimental\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(platform_intrinsics)] to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:88:1\n+  --> $DIR/feature-gate-abi.rs:95:1\n    |\n LL | extern \"vectorcall\" {} //~ ERROR vectorcall is experimental and subject to change\n    | ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_vectorcall)] to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change (see issue #29625)\n-  --> $DIR/feature-gate-abi.rs:89:1\n+  --> $DIR/feature-gate-abi.rs:96:1\n    |\n LL | extern \"rust-call\" {} //~ ERROR rust-call ABI is subject to change\n    | ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(unboxed_closures)] to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change (see issue #38487)\n-  --> $DIR/feature-gate-abi.rs:90:1\n+  --> $DIR/feature-gate-abi.rs:97:1\n    |\n LL | extern \"msp430-interrupt\" {} //~ ERROR msp430-interrupt ABI is experimental\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_msp430_interrupt)] to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change (see issue #38788)\n-  --> $DIR/feature-gate-abi.rs:91:1\n+  --> $DIR/feature-gate-abi.rs:98:1\n    |\n LL | extern \"ptx-kernel\" {} //~ ERROR PTX ABIs are experimental and subject to change\n    | ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_ptx)] to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change (see issue #40180)\n-  --> $DIR/feature-gate-abi.rs:92:1\n+  --> $DIR/feature-gate-abi.rs:99:1\n    |\n LL | extern \"x86-interrupt\" {} //~ ERROR x86-interrupt ABI is experimental\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_x86_interrupt)] to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:93:1\n+  --> $DIR/feature-gate-abi.rs:100:1\n    |\n LL | extern \"thiscall\" {} //~ ERROR thiscall is experimental and subject to change\n    | ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_thiscall)] to the crate attributes to enable\n \n-error: aborting due to 56 previous errors\n+error[E0658]: amdgpu-kernel ABI is experimental and subject to change (see issue #51575)\n+  --> $DIR/feature-gate-abi.rs:101:1\n+   |\n+LL | extern \"amdgpu-kernel\" {} //~ ERROR amdgpu-kernel ABI is experimental and subject to change\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(abi_amdgpu_kernel)] to the crate attributes to enable\n+\n+error: aborting due to 63 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}]}