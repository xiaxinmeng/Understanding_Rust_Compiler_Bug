{"sha": "cdc6afed389ecdcea0955eadae59ea6b008a58fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkYzZhZmVkMzg5ZWNkY2VhMDk1NWVhZGFlNTllYTZiMDA4YTU4ZmU=", "commit": {"author": {"name": "Jethro Beekman", "email": "jethro@jbeekman.nl", "date": "2016-07-26T23:31:39Z"}, "committer": {"name": "Jethro Beekman", "email": "jethro@jbeekman.nl", "date": "2016-07-28T16:05:43Z"}, "message": "Add non-panicking abs() functions to all signed integer types.\n\nCurrently, calling abs() on one of the signed integer types might panic (in\ndebug mode at least) because the absolute value of the largest negative value\ncan not be represented in that signed type. Unlike all other integer\noperations, there is currently not a non-panicking version on this function.\nThis seems to just be an oversight in the design, therefore just adding it now.", "tree": {"sha": "c5474f47c318d42501aa2c57c437d49a5675598d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5474f47c318d42501aa2c57c437d49a5675598d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cdc6afed389ecdcea0955eadae59ea6b008a58fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cdc6afed389ecdcea0955eadae59ea6b008a58fe", "html_url": "https://github.com/rust-lang/rust/commit/cdc6afed389ecdcea0955eadae59ea6b008a58fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cdc6afed389ecdcea0955eadae59ea6b008a58fe/comments", "author": null, "committer": null, "parents": [{"sha": "cec262e55a92ad15196c4ea6d490fb6ef6bccab4", "url": "https://api.github.com/repos/rust-lang/rust/commits/cec262e55a92ad15196c4ea6d490fb6ef6bccab4", "html_url": "https://github.com/rust-lang/rust/commit/cec262e55a92ad15196c4ea6d490fb6ef6bccab4"}], "stats": {"total": 84, "additions": 84, "deletions": 0}, "files": [{"sha": "4636811aa46da2c95f96d6c87bf9cdd3a06a09b6", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/cdc6afed389ecdcea0955eadae59ea6b008a58fe/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdc6afed389ecdcea0955eadae59ea6b008a58fe/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=cdc6afed389ecdcea0955eadae59ea6b008a58fe", "patch": "@@ -611,6 +611,31 @@ macro_rules! int_impl {\n             if b {None} else {Some(a)}\n         }\n \n+        /// Checked absolute value. Computes `self.abs()`, returning `None` if\n+        /// `self == MIN`.\n+        ///\n+        /// # Examples\n+        ///\n+        /// Basic usage:\n+        ///\n+        /// ```\n+        /// # #![feature(no_panic_abs)]\n+        ///\n+        /// use std::i32;\n+        ///\n+        /// assert_eq!((-5i32).checked_abs(), Some(5));\n+        /// assert_eq!(i32::MIN.checked_abs(), None);\n+        /// ```\n+        #[unstable(feature = \"no_panic_abs\", issue = \"35057\")]\n+        #[inline]\n+        pub fn checked_abs(self) -> Option<Self> {\n+            if self.is_negative() {\n+                self.checked_neg()\n+            } else {\n+                Some(self)\n+            }\n+        }\n+\n         /// Saturating integer addition. Computes `self + other`, saturating at\n         /// the numeric bounds instead of overflowing.\n         ///\n@@ -863,6 +888,36 @@ macro_rules! int_impl {\n             self.overflowing_shr(rhs).0\n         }\n \n+        /// Wrapping (modular) absolute value. Computes `self.abs()`,\n+        /// wrapping around at the boundary of the type.\n+        ///\n+        /// The only case where such wrapping can occur is when one takes\n+        /// the absolute value of the negative minimal value for the type\n+        /// this is a positive value that is too large to represent in the\n+        /// type. In such a case, this function returns `MIN` itself.\n+        ///\n+        /// # Examples\n+        ///\n+        /// Basic usage:\n+        ///\n+        /// ```\n+        /// # #![feature(no_panic_abs)]\n+        ///\n+        /// assert_eq!(100i8.wrapping_abs(), 100);\n+        /// assert_eq!((-100i8).wrapping_abs(), 100);\n+        /// assert_eq!((-128i8).wrapping_abs(), -128);\n+        /// assert_eq!((-128i8).wrapping_abs() as u8, 128);\n+        /// ```\n+        #[unstable(feature = \"no_panic_abs\", issue = \"35057\")]\n+        #[inline(always)]\n+        pub fn wrapping_abs(self) -> Self {\n+            if self.is_negative() {\n+                self.wrapping_neg()\n+            } else {\n+                self\n+            }\n+        }\n+\n         /// Calculates `self` + `rhs`\n         ///\n         /// Returns a tuple of the addition along with a boolean indicating\n@@ -1071,6 +1126,35 @@ macro_rules! int_impl {\n             (self >> (rhs & ($BITS - 1)), (rhs > ($BITS - 1)))\n         }\n \n+        /// Computes the absolute value of `self`.\n+        ///\n+        /// Returns a tuple of the absolute version of self along with a\n+        /// boolean indicating whether an overflow happened. If self is the\n+        /// minimum value (e.g. i32::MIN for values of type i32), then the\n+        /// minimum value will be returned again and true will be returned for\n+        /// an overflow happening.\n+        ///\n+        /// # Examples\n+        ///\n+        /// Basic usage:\n+        ///\n+        /// ```\n+        /// # #![feature(no_panic_abs)]\n+        ///\n+        /// assert_eq!(10i8.overflowing_abs(), (10,false));\n+        /// assert_eq!((-10i8).overflowing_abs(), (10,false));\n+        /// assert_eq!((-128i8).overflowing_abs(), (-128,true));\n+        /// ```\n+        #[unstable(feature = \"no_panic_abs\", issue = \"35057\")]\n+        #[inline]\n+        pub fn overflowing_abs(self) -> (Self, bool) {\n+            if self.is_negative() {\n+                self.overflowing_neg()\n+            } else {\n+                (self, false)\n+            }\n+        }\n+\n         /// Raises self to the power of `exp`, using exponentiation by squaring.\n         ///\n         /// # Examples"}]}