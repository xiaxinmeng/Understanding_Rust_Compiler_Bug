{"sha": "9d60de93e2c5af1b69201b5e3bcf8943ae5df664", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkNjBkZTkzZTJjNWFmMWI2OTIwMWI1ZTNiY2Y4OTQzYWU1ZGY2NjQ=", "commit": {"author": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2014-09-27T08:33:36Z"}, "committer": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2014-09-27T18:10:37Z"}, "message": "Translate inline assembly errors back to source locations\n\nFixes #17552.", "tree": {"sha": "b9e70d905c974cb3d6260867089ef1a13fd26df7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9e70d905c974cb3d6260867089ef1a13fd26df7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d60de93e2c5af1b69201b5e3bcf8943ae5df664", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d60de93e2c5af1b69201b5e3bcf8943ae5df664", "html_url": "https://github.com/rust-lang/rust/commit/9d60de93e2c5af1b69201b5e3bcf8943ae5df664", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d60de93e2c5af1b69201b5e3bcf8943ae5df664/comments", "author": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34dfa45718d9d40361dadf0abf9c3dc5cc0b0381", "url": "https://api.github.com/repos/rust-lang/rust/commits/34dfa45718d9d40361dadf0abf9c3dc5cc0b0381", "html_url": "https://github.com/rust-lang/rust/commit/34dfa45718d9d40361dadf0abf9c3dc5cc0b0381"}], "stats": {"total": 145, "additions": 133, "deletions": 12}, "files": [{"sha": "8e703d954f3009467ad51b829ec7a327e09a3f12", "filename": "src/librustc/back/write.rs", "status": "modified", "additions": 36, "deletions": 7, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/9d60de93e2c5af1b69201b5e3bcf8943ae5df664/src%2Flibrustc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d60de93e2c5af1b69201b5e3bcf8943ae5df664/src%2Flibrustc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Fwrite.rs?ref=9d60de93e2c5af1b69201b5e3bcf8943ae5df664", "patch": "@@ -16,6 +16,7 @@ use driver::session::Session;\n use driver::config;\n use llvm;\n use llvm::{ModuleRef, TargetMachineRef, PassManagerRef, DiagnosticInfoRef, ContextRef};\n+use llvm::SMDiagnosticRef;\n use util::common::time;\n use syntax::abi;\n use syntax::codemap;\n@@ -326,14 +327,40 @@ impl<'a> CodegenContext<'a> {\n     }\n }\n \n-struct DiagHandlerFreeVars<'a> {\n+struct HandlerFreeVars<'a> {\n     llcx: ContextRef,\n     cgcx: &'a CodegenContext<'a>,\n }\n \n+unsafe extern \"C\" fn inline_asm_handler(diag: SMDiagnosticRef,\n+                                        user: *const c_void,\n+                                        cookie: c_uint) {\n+    use syntax::codemap::ExpnId;\n+\n+    let HandlerFreeVars { cgcx, .. }\n+        = *mem::transmute::<_, *const HandlerFreeVars>(user);\n+\n+    let msg = llvm::build_string(|s| llvm::LLVMWriteSMDiagnosticToString(diag, s))\n+        .expect(\"non-UTF8 SMDiagnostic\");\n+\n+    match cgcx.lto_ctxt {\n+        Some((sess, _)) => {\n+            sess.codemap().with_expn_info(ExpnId(cookie as u32), |info| match info {\n+                Some(ei) => sess.span_err(ei.call_site, msg.as_slice()),\n+                None     => sess.err(msg.as_slice()),\n+            });\n+        }\n+\n+        None => {\n+            cgcx.handler.err(msg.as_slice());\n+            cgcx.handler.note(\"build without -C codegen-units for more exact errors\");\n+        }\n+    }\n+}\n+\n unsafe extern \"C\" fn diagnostic_handler(info: DiagnosticInfoRef, user: *mut c_void) {\n-    let DiagHandlerFreeVars { llcx, cgcx }\n-        = *mem::transmute::<_, *const DiagHandlerFreeVars>(user);\n+    let HandlerFreeVars { llcx, cgcx }\n+        = *mem::transmute::<_, *const HandlerFreeVars>(user);\n \n     match llvm::diagnostic::Diagnostic::unpack(info) {\n         llvm::diagnostic::Optimization(opt) => {\n@@ -368,14 +395,16 @@ unsafe fn optimize_and_codegen(cgcx: &CodegenContext,\n     let tm = config.tm;\n \n     // llcx doesn't outlive this function, so we can put this on the stack.\n-    let fv = DiagHandlerFreeVars {\n+    let fv = HandlerFreeVars {\n         llcx: llcx,\n         cgcx: cgcx,\n     };\n+    let fv = &fv as *const HandlerFreeVars as *mut c_void;\n+\n+    llvm::LLVMSetInlineAsmDiagnosticHandler(llcx, inline_asm_handler, fv);\n+\n     if !cgcx.remark.is_empty() {\n-        llvm::LLVMContextSetDiagnosticHandler(llcx, diagnostic_handler,\n-                                              &fv as *const DiagHandlerFreeVars\n-                                                  as *mut c_void);\n+        llvm::LLVMContextSetDiagnosticHandler(llcx, diagnostic_handler, fv);\n     }\n \n     if config.emit_no_opt_bc {"}, {"sha": "b0b445b590ca9569aa70401a01642df4f5b25f41", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d60de93e2c5af1b69201b5e3bcf8943ae5df664/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d60de93e2c5af1b69201b5e3bcf8943ae5df664/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=9d60de93e2c5af1b69201b5e3bcf8943ae5df664", "patch": "@@ -556,6 +556,8 @@ pub fn phase_5_run_llvm_passes(sess: &Session,\n                               sess.opts.output_types.as_slice(),\n                               outputs));\n     }\n+\n+    sess.abort_if_errors();\n }\n \n /// Run the linker on any artifacts that resulted from the LLVM run."}, {"sha": "b4c10c78db874ea21defad9e3ddc35fa82a7eae4", "filename": "src/librustc/middle/trans/asm.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9d60de93e2c5af1b69201b5e3bcf8943ae5df664/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d60de93e2c5af1b69201b5e3bcf8943ae5df664/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs?ref=9d60de93e2c5af1b69201b5e3bcf8943ae5df664", "patch": "@@ -25,6 +25,7 @@ use middle::trans::type_::Type;\n use std::c_str::ToCStr;\n use std::string::String;\n use syntax::ast;\n+use libc::{c_uint, c_char};\n \n // Take an inline assembly expression and splat it out via LLVM\n pub fn trans_inline_asm<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, ia: &ast::InlineAsm)\n@@ -141,6 +142,19 @@ pub fn trans_inline_asm<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, ia: &ast::InlineAsm)\n         }\n     }\n \n+    // Store expn_id in a metadata node so we can map LLVM errors\n+    // back to source locations.  See #17552.\n+    unsafe {\n+        let key = \"srcloc\";\n+        let kind = llvm::LLVMGetMDKindIDInContext(bcx.ccx().llcx(),\n+            key.as_ptr() as *const c_char, key.len() as c_uint);\n+\n+        let val: llvm::ValueRef = C_i32(bcx.ccx(), ia.expn_id as i32);\n+\n+        llvm::LLVMSetMetadata(r, kind,\n+            llvm::LLVMMDNodeInContext(bcx.ccx().llcx(), &val, 1));\n+    }\n+\n     return bcx;\n \n }"}, {"sha": "401933d7058493df7ec9a4404c9c0e4b6ed2436f", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9d60de93e2c5af1b69201b5e3bcf8943ae5df664/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d60de93e2c5af1b69201b5e3bcf8943ae5df664/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=9d60de93e2c5af1b69201b5e3bcf8943ae5df664", "patch": "@@ -424,8 +424,11 @@ pub enum DiagnosticInfo_opaque {}\n pub type DiagnosticInfoRef = *mut DiagnosticInfo_opaque;\n pub enum DebugLoc_opaque {}\n pub type DebugLocRef = *mut DebugLoc_opaque;\n+pub enum SMDiagnostic_opaque {}\n+pub type SMDiagnosticRef = *mut SMDiagnostic_opaque;\n \n pub type DiagnosticHandler = unsafe extern \"C\" fn(DiagnosticInfoRef, *mut c_void);\n+pub type InlineAsmDiagHandler = unsafe extern \"C\" fn(SMDiagnosticRef, *const c_void, c_uint);\n \n pub mod debuginfo {\n     use super::{ValueRef};\n@@ -1967,6 +1970,12 @@ extern {\n     pub fn LLVMGetDiagInfoKind(DI: DiagnosticInfoRef) -> DiagnosticKind;\n \n     pub fn LLVMWriteDebugLocToString(C: ContextRef, DL: DebugLocRef, s: RustStringRef);\n+\n+    pub fn LLVMSetInlineAsmDiagnosticHandler(C: ContextRef,\n+                                             H: InlineAsmDiagHandler,\n+                                             CX: *mut c_void);\n+\n+    pub fn LLVMWriteSMDiagnosticToString(d: SMDiagnosticRef, s: RustStringRef);\n }\n \n pub fn SetInstructionCallConv(instr: ValueRef, cc: CallConv) {"}, {"sha": "43d6b9b9e905af75376d259686842bd28a548394", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9d60de93e2c5af1b69201b5e3bcf8943ae5df664/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d60de93e2c5af1b69201b5e3bcf8943ae5df664/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=9d60de93e2c5af1b69201b5e3bcf8943ae5df664", "patch": "@@ -983,7 +983,8 @@ pub struct InlineAsm {\n     pub clobbers: InternedString,\n     pub volatile: bool,\n     pub alignstack: bool,\n-    pub dialect: AsmDialect\n+    pub dialect: AsmDialect,\n+    pub expn_id: u32,\n }\n \n /// represents an argument in a function header"}, {"sha": "d44de7862a33a564591a03ef9ac9012fd7bc539f", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d60de93e2c5af1b69201b5e3bcf8943ae5df664/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d60de93e2c5af1b69201b5e3bcf8943ae5df664/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=9d60de93e2c5af1b69201b5e3bcf8943ae5df664", "patch": "@@ -224,7 +224,7 @@ pub struct ExpnInfo {\n }\n \n #[deriving(PartialEq, Eq, Clone, Show, Hash)]\n-pub struct ExpnId(u32);\n+pub struct ExpnId(pub u32);\n \n pub static NO_EXPANSION: ExpnId = ExpnId(-1);\n "}, {"sha": "f82fe4b13a212d106af2335c1bc98bc01ddf4e3b", "filename": "src/libsyntax/ext/asm.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9d60de93e2c5af1b69201b5e3bcf8943ae5df664/src%2Flibsyntax%2Fext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d60de93e2c5af1b69201b5e3bcf8943ae5df664/src%2Flibsyntax%2Fext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fasm.rs?ref=9d60de93e2c5af1b69201b5e3bcf8943ae5df664", "patch": "@@ -13,6 +13,7 @@\n  */\n \n use ast;\n+use codemap;\n use codemap::Span;\n use ext::base;\n use ext::base::*;\n@@ -198,6 +199,15 @@ pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n         }\n     }\n \n+    let codemap::ExpnId(expn_id) = cx.codemap().record_expansion(codemap::ExpnInfo {\n+        call_site: sp,\n+        callee: codemap::NameAndSpan {\n+            name: \"asm\".to_string(),\n+            format: codemap::MacroBang,\n+            span: None,\n+        },\n+    });\n+\n     MacExpr::new(P(ast::Expr {\n         id: ast::DUMMY_NODE_ID,\n         node: ast::ExprInlineAsm(ast::InlineAsm {\n@@ -208,7 +218,8 @@ pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n             clobbers: token::intern_and_get_ident(cons.as_slice()),\n             volatile: volatile,\n             alignstack: alignstack,\n-            dialect: dialect\n+            dialect: dialect,\n+            expn_id: expn_id,\n         }),\n         span: sp\n     }))"}, {"sha": "53be7f2c20c4ea6a545adbc606d21466f33b62bc", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9d60de93e2c5af1b69201b5e3bcf8943ae5df664/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d60de93e2c5af1b69201b5e3bcf8943ae5df664/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=9d60de93e2c5af1b69201b5e3bcf8943ae5df664", "patch": "@@ -1279,7 +1279,8 @@ pub fn noop_fold_expr<T: Folder>(Expr {id, node, span}: Expr, folder: &mut T) ->\n                 clobbers,\n                 volatile,\n                 alignstack,\n-                dialect\n+                dialect,\n+                expn_id,\n             }) => ExprInlineAsm(InlineAsm {\n                 inputs: inputs.move_map(|(c, input)| {\n                     (c, folder.fold_expr(input))\n@@ -1292,7 +1293,8 @@ pub fn noop_fold_expr<T: Folder>(Expr {id, node, span}: Expr, folder: &mut T) ->\n                 clobbers: clobbers,\n                 volatile: volatile,\n                 alignstack: alignstack,\n-                dialect: dialect\n+                dialect: dialect,\n+                expn_id: expn_id,\n             }),\n             ExprMac(mac) => ExprMac(folder.fold_mac(mac)),\n             ExprStruct(path, fields, maybe_expr) => {"}, {"sha": "1fdaa548ebe6ec95c09f1caaf21bd41048d3b456", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9d60de93e2c5af1b69201b5e3bcf8943ae5df664/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/9d60de93e2c5af1b69201b5e3bcf8943ae5df664/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=9d60de93e2c5af1b69201b5e3bcf8943ae5df664", "patch": "@@ -871,3 +871,18 @@ extern \"C\" void LLVMWriteDebugLocToString(\n     raw_rust_string_ostream os(str);\n     unwrap(dl)->print(*unwrap(C), os);\n }\n+\n+DEFINE_SIMPLE_CONVERSION_FUNCTIONS(SMDiagnostic, LLVMSMDiagnosticRef)\n+\n+extern \"C\" void LLVMSetInlineAsmDiagnosticHandler(\n+    LLVMContextRef C,\n+    LLVMContext::InlineAsmDiagHandlerTy H,\n+    void *CX)\n+{\n+    unwrap(C)->setInlineAsmDiagnosticHandler(H, CX);\n+}\n+\n+extern \"C\" void LLVMWriteSMDiagnosticToString(LLVMSMDiagnosticRef d, RustStringRef str) {\n+    raw_rust_string_ostream os(str);\n+    unwrap(d)->print(\"\", os);\n+}"}, {"sha": "5469531c5418849a215d35eca40c839318bca718", "filename": "src/rustllvm/rustllvm.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d60de93e2c5af1b69201b5e3bcf8943ae5df664/src%2Frustllvm%2Frustllvm.h", "raw_url": "https://github.com/rust-lang/rust/raw/9d60de93e2c5af1b69201b5e3bcf8943ae5df664/src%2Frustllvm%2Frustllvm.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.h?ref=9d60de93e2c5af1b69201b5e3bcf8943ae5df664", "patch": "@@ -73,6 +73,7 @@ void LLVMRustSetLastError(const char*);\n typedef struct OpaqueRustString *RustStringRef;\n typedef struct LLVMOpaqueTwine *LLVMTwineRef;\n typedef struct LLVMOpaqueDebugLoc *LLVMDebugLocRef;\n+typedef struct LLVMOpaqueSMDiagnostic *LLVMSMDiagnosticRef;\n \n extern \"C\" void\n rust_llvm_string_write_impl(RustStringRef str, const char *ptr, size_t size);"}, {"sha": "1b8fb32a808dc7067b76b973ff56368daeedd2eb", "filename": "src/test/compile-fail/asm-src-loc-codegen-units.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9d60de93e2c5af1b69201b5e3bcf8943ae5df664/src%2Ftest%2Fcompile-fail%2Fasm-src-loc-codegen-units.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d60de93e2c5af1b69201b5e3bcf8943ae5df664/src%2Ftest%2Fcompile-fail%2Fasm-src-loc-codegen-units.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-src-loc-codegen-units.rs?ref=9d60de93e2c5af1b69201b5e3bcf8943ae5df664", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+//\n+// compile-flags: -C codegen-units=2\n+// error-pattern: build without -C codegen-units for more exact errors\n+\n+#![feature(asm)]\n+\n+fn main() {\n+    unsafe {\n+        asm!(\"nowayisthisavalidinstruction\");\n+    }\n+}"}, {"sha": "8da6cca77cc4cde4c29df93d98adb26588d9b95a", "filename": "src/test/compile-fail/asm-src-loc.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9d60de93e2c5af1b69201b5e3bcf8943ae5df664/src%2Ftest%2Fcompile-fail%2Fasm-src-loc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d60de93e2c5af1b69201b5e3bcf8943ae5df664/src%2Ftest%2Fcompile-fail%2Fasm-src-loc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-src-loc.rs?ref=9d60de93e2c5af1b69201b5e3bcf8943ae5df664", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(asm)]\n+\n+fn main() {\n+    unsafe {\n+        asm!(\"nowayisthisavalidinstruction\"); //~ ERROR invalid instruction mnemonic\n+    }\n+}"}]}