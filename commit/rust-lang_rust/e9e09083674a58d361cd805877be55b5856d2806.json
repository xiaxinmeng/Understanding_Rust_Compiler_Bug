{"sha": "e9e09083674a58d361cd805877be55b5856d2806", "node_id": "C_kwDOAAsO6NoAKGU5ZTA5MDgzNjc0YTU4ZDM2MWNkODA1ODc3YmU1NWI1ODU2ZDI4MDY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-14T03:04:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-14T03:04:40Z"}, "message": "Auto merge of #106520 - ehuss:update-mdbook, r=Mark-Simulacrum\n\nUpdate mdbook\n\nThis updates mdbook from 0.4.21 to 0.4.25. The list of changes is [here](https://github.com/rust-lang/mdBook/blob/master/CHANGELOG.md#mdbook-0425). The only user-visible changes are some changes around the theme picker, and change to the copy-to-clipboard ignoring hidden lines.\n\nInternally there were some dependency updates and small fixes.\n\nThis also updates `clap` from 4.0.15 to 4.0.32 whose changelog is [here](https://github.com/clap-rs/clap/blob/master/CHANGELOG.md#4032---2022-12-22). This impacts tools like cargo. I don't see anything particularly noteworthy there, though there are some small user-visible changes.\n\nUnfortunately this required adding a hack for building `rustix` with a bootstrap tool. The comment explains why. I am unable to think of some other workaround (or even a cleaner way to set the rustflag). Ideas are welcome if you can think of alternatives. I'm struggling to even think of a long-term solution, other than asking projects not to do auto-nightly feature detection.\n\nOne medium-term solution is to avoid the clap dependency for the mdbook library (which is how rustix gets pulled in). That is one of my goals for the 0.5 release of mdbook, but that probably won't happen until later this year. It would also require dropping clap from `rustbook` and using some other means to parse arguments (there's only two options, so it can probably be done manually).", "tree": {"sha": "27a106d3df3b5c1bf7c9105b71bedb869e5cef9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27a106d3df3b5c1bf7c9105b71bedb869e5cef9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9e09083674a58d361cd805877be55b5856d2806", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9e09083674a58d361cd805877be55b5856d2806", "html_url": "https://github.com/rust-lang/rust/commit/e9e09083674a58d361cd805877be55b5856d2806", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9e09083674a58d361cd805877be55b5856d2806/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca5d92d789c94060fc32bfc4a778fb16904756ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca5d92d789c94060fc32bfc4a778fb16904756ea", "html_url": "https://github.com/rust-lang/rust/commit/ca5d92d789c94060fc32bfc4a778fb16904756ea"}, {"sha": "2717f600935174aa3ee5e743a3d1901d6be149a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/2717f600935174aa3ee5e743a3d1901d6be149a9", "html_url": "https://github.com/rust-lang/rust/commit/2717f600935174aa3ee5e743a3d1901d6be149a9"}], "stats": {"total": 195, "additions": 146, "deletions": 49}, "files": [{"sha": "573fd30b8a56f81cfa4af45eab8dd6c1d9a47ef3", "filename": "Cargo.lock", "status": "modified", "additions": 30, "deletions": 19, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/e9e09083674a58d361cd805877be55b5856d2806/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/e9e09083674a58d361cd805877be55b5856d2806/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=e9e09083674a58d361cd805877be55b5856d2806", "patch": "@@ -340,7 +340,7 @@ dependencies = [\n  \"cargo-test-macro\",\n  \"cargo-test-support\",\n  \"cargo-util\",\n- \"clap 4.0.15\",\n+ \"clap 4.0.32\",\n  \"crates-io\",\n  \"curl\",\n  \"curl-sys\",\n@@ -644,26 +644,27 @@ dependencies = [\n \n [[package]]\n name = \"clap\"\n-version = \"4.0.15\"\n+version = \"4.0.32\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"6bf8832993da70a4c6d13c581f4463c2bdda27b9bf1c5498dc4365543abe6d6f\"\n+checksum = \"a7db700bc935f9e43e88d00b0850dae18a63773cfbec6d8e070fccf7fef89a39\"\n dependencies = [\n- \"atty\",\n  \"bitflags\",\n- \"clap_derive 4.0.13\",\n+ \"clap_derive 4.0.21\",\n  \"clap_lex 0.3.0\",\n+ \"is-terminal\",\n  \"once_cell\",\n  \"strsim\",\n  \"termcolor\",\n+ \"terminal_size\",\n ]\n \n [[package]]\n name = \"clap_complete\"\n-version = \"3.1.1\"\n+version = \"4.0.7\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"df6f3613c0a3cddfd78b41b10203eb322cb29b600cbdf808a7d3db95691b8e25\"\n+checksum = \"10861370d2ba66b0f5989f83ebf35db6421713fd92351790e7fdd6c36774c56b\"\n dependencies = [\n- \"clap 3.2.20\",\n+ \"clap 4.0.32\",\n ]\n \n [[package]]\n@@ -681,9 +682,9 @@ dependencies = [\n \n [[package]]\n name = \"clap_derive\"\n-version = \"4.0.13\"\n+version = \"4.0.21\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c42f169caba89a7d512b5418b09864543eeb4d497416c917d7137863bd2076ad\"\n+checksum = \"0177313f9f02afc995627906bbd8967e2be069f5261954222dac78290c2b9014\"\n dependencies = [\n  \"heck\",\n  \"proc-macro-error\",\n@@ -2273,7 +2274,7 @@ name = \"jsondoclint\"\n version = \"0.1.0\"\n dependencies = [\n  \"anyhow\",\n- \"clap 4.0.15\",\n+ \"clap 4.0.32\",\n  \"fs-err\",\n  \"rustdoc-json-types\",\n  \"serde\",\n@@ -2529,21 +2530,21 @@ dependencies = [\n \n [[package]]\n name = \"mdbook\"\n-version = \"0.4.21\"\n+version = \"0.4.25\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"23f3e133c6d515528745ffd3b9f0c7d975ae039f0b6abb099f2168daa2afb4f9\"\n+checksum = \"d1ed28d5903dde77bd5182645078a37ee57014cac6ccb2d54e1d6496386648e4\"\n dependencies = [\n  \"ammonia\",\n  \"anyhow\",\n  \"chrono\",\n- \"clap 3.2.20\",\n+ \"clap 4.0.32\",\n  \"clap_complete\",\n  \"elasticlunr-rs\",\n- \"env_logger 0.9.0\",\n+ \"env_logger 0.10.0\",\n  \"handlebars 4.3.3\",\n- \"lazy_static\",\n  \"log\",\n  \"memchr\",\n+ \"once_cell\",\n  \"opener\",\n  \"pulldown-cmark 0.9.2\",\n  \"regex\",\n@@ -3498,7 +3499,7 @@ dependencies = [\n name = \"rustbook\"\n version = \"0.1.0\"\n dependencies = [\n- \"clap 3.2.20\",\n+ \"clap 4.0.32\",\n  \"env_logger 0.7.1\",\n  \"mdbook\",\n ]\n@@ -5478,6 +5479,16 @@ dependencies = [\n  \"winapi-util\",\n ]\n \n+[[package]]\n+name = \"terminal_size\"\n+version = \"0.2.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"cb20089a8ba2b69debd491f8d2d023761cbf196e999218c591fa1e7e15a21907\"\n+dependencies = [\n+ \"rustix\",\n+ \"windows-sys\",\n+]\n+\n [[package]]\n name = \"termize\"\n version = \"0.1.1\"\n@@ -5693,9 +5704,9 @@ dependencies = [\n \n [[package]]\n name = \"topological-sort\"\n-version = \"0.1.0\"\n+version = \"0.2.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"aa7c7f42dea4b1b99439786f5633aeb9c14c1b53f75e282803c2ec2ad545873c\"\n+checksum = \"ea68304e134ecd095ac6c3574494fc62b909f416c4fca77e440530221e549d3d\"\n \n [[package]]\n name = \"tracing\""}, {"sha": "9611c866df5990c038640b5af106f7e0b79838e7", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e9e09083674a58d361cd805877be55b5856d2806/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9e09083674a58d361cd805877be55b5856d2806/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=e9e09083674a58d361cd805877be55b5856d2806", "patch": "@@ -154,6 +154,41 @@ fn main() {\n         cmd.arg(\"-Z\").arg(\"force-unstable-if-unmarked\");\n     }\n \n+    // allow-features is handled from within this rustc wrapper because of\n+    // issues with build scripts. Some packages use build scripts to\n+    // dynamically detect if certain nightly features are available.\n+    // There are different ways this causes problems:\n+    //\n+    // * rustix runs `rustc` on a small test program to see if the feature is\n+    //   available (and sets a `cfg` if it is). It does not honor\n+    //   CARGO_ENCODED_RUSTFLAGS.\n+    // * proc-macro2 detects if `rustc -vV` says \"nighty\" or \"dev\" and enables\n+    //   nightly features. It will scan CARGO_ENCODED_RUSTFLAGS for\n+    //   -Zallow-features. Unfortunately CARGO_ENCODED_RUSTFLAGS is not set\n+    //   for build-dependencies when --target is used.\n+    //\n+    // The issues above means we can't just use RUSTFLAGS, and we can't use\n+    // `cargo -Zallow-features=\u2026`. Passing it through here ensures that it\n+    // always gets set. Unfortunately that also means we need to enable more\n+    // features than we really want (like those for proc-macro2), but there\n+    // isn't much of a way around it.\n+    //\n+    // I think it is unfortunate that build scripts are doing this at all,\n+    // since changes to nightly features can cause crates to break even if the\n+    // user didn't want or care about the use of the nightly features. I think\n+    // nightly features should be opt-in only. Unfortunately the dynamic\n+    // checks are now too wide spread that we just need to deal with it.\n+    //\n+    // If you want to try to remove this, I suggest working with the crate\n+    // authors to remove the dynamic checking. Another option is to pursue\n+    // https://github.com/rust-lang/cargo/issues/11244 and\n+    // https://github.com/rust-lang/cargo/issues/4423, which will likely be\n+    // very difficult, but could help expose -Zallow-features into build\n+    // scripts so they could try to honor them.\n+    if let Ok(allow_features) = env::var(\"RUSTC_ALLOW_FEATURES\") {\n+        cmd.arg(format!(\"-Zallow-features={allow_features}\"));\n+    }\n+\n     if let Ok(flags) = env::var(\"MAGIC_EXTRA_RUSTFLAGS\") {\n         for flag in flags.split(' ') {\n             cmd.arg(flag);"}, {"sha": "b4fc1d4f28da75e7a9513d723cad17118763e3dc", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 40, "deletions": 12, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/e9e09083674a58d361cd805877be55b5856d2806/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9e09083674a58d361cd805877be55b5856d2806/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=e9e09083674a58d361cd805877be55b5856d2806", "patch": "@@ -1381,18 +1381,29 @@ impl<'a> Builder<'a> {\n         // this), as well as #63012 which is the tracking issue for this\n         // feature on the rustc side.\n         cargo.arg(\"-Zbinary-dep-depinfo\");\n-        match mode {\n-            Mode::ToolBootstrap => {\n-                // Restrict the allowed features to those passed by rustbuild, so we don't depend on nightly accidentally.\n-                rustflags.arg(\"-Zallow-features=binary-dep-depinfo\");\n-            }\n-            Mode::ToolStd => {\n-                // Right now this is just compiletest and a few other tools that build on stable.\n-                // Allow them to use `feature(test)`, but nothing else.\n-                rustflags.arg(\"-Zallow-features=binary-dep-depinfo,test,proc_macro_internals,proc_macro_diagnostic,proc_macro_span\");\n+        let allow_features = match mode {\n+            Mode::ToolBootstrap | Mode::ToolStd => {\n+                // Restrict the allowed features so we don't depend on nightly\n+                // accidentally.\n+                //\n+                // binary-dep-depinfo is used by rustbuild itself for all\n+                // compilations.\n+                //\n+                // Lots of tools depend on proc_macro2 and proc-macro-error.\n+                // Those have build scripts which assume nightly features are\n+                // available if the `rustc` version is \"nighty\" or \"dev\". See\n+                // bin/rustc.rs for why that is a problem. Instead of labeling\n+                // those features for each individual tool that needs them,\n+                // just blanket allow them here.\n+                //\n+                // If this is ever removed, be sure to add something else in\n+                // its place to keep the restrictions in place (or make a way\n+                // to unset RUSTC_BOOTSTRAP).\n+                \"binary-dep-depinfo,proc_macro_span,proc_macro_span_shrink,proc_macro_diagnostic\"\n+                    .to_string()\n             }\n-            Mode::Std | Mode::Rustc | Mode::Codegen | Mode::ToolRustc => {}\n-        }\n+            Mode::Std | Mode::Rustc | Mode::Codegen | Mode::ToolRustc => String::new(),\n+        };\n \n         cargo.arg(\"-j\").arg(self.jobs().to_string());\n \n@@ -1915,7 +1926,7 @@ impl<'a> Builder<'a> {\n             }\n         }\n \n-        Cargo { command: cargo, rustflags, rustdocflags }\n+        Cargo { command: cargo, rustflags, rustdocflags, allow_features }\n     }\n \n     /// Ensure that a given step is built, returning its output. This will\n@@ -2094,6 +2105,7 @@ pub struct Cargo {\n     command: Command,\n     rustflags: Rustflags,\n     rustdocflags: Rustflags,\n+    allow_features: String,\n }\n \n impl Cargo {\n@@ -2138,6 +2150,18 @@ impl Cargo {\n         self.command.current_dir(dir);\n         self\n     }\n+\n+    /// Adds nightly-only features that this invocation is allowed to use.\n+    ///\n+    /// By default, all nightly features are allowed. Once this is called, it\n+    /// will be restricted to the given set.\n+    pub fn allow_features(&mut self, features: &str) -> &mut Cargo {\n+        if !self.allow_features.is_empty() {\n+            self.allow_features.push(',');\n+        }\n+        self.allow_features.push_str(features);\n+        self\n+    }\n }\n \n impl From<Cargo> for Command {\n@@ -2152,6 +2176,10 @@ impl From<Cargo> for Command {\n             cargo.command.env(\"RUSTDOCFLAGS\", rustdocflags);\n         }\n \n+        if !cargo.allow_features.is_empty() {\n+            cargo.command.env(\"RUSTC_ALLOW_FEATURES\", cargo.allow_features);\n+        }\n+\n         cargo.command\n     }\n }"}, {"sha": "4b8a58e87b64eb893a87c090b233b8866ab4ae60", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9e09083674a58d361cd805877be55b5856d2806/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9e09083674a58d361cd805877be55b5856d2806/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=e9e09083674a58d361cd805877be55b5856d2806", "patch": "@@ -346,9 +346,7 @@ impl Step for RustAnalyzer {\n             &[\"rust-analyzer/in-rust-tree\".to_owned()],\n         );\n \n-        cargo.rustflag(\n-            \"-Zallow-features=proc_macro_internals,proc_macro_diagnostic,proc_macro_span\",\n-        );\n+        cargo.allow_features(crate::tool::RustAnalyzer::ALLOW_FEATURES);\n \n         // For ./x.py clippy, don't check those targets because\n         // linting tests and benchmarks can produce very noisy results"}, {"sha": "6078e39ac9d3b8af5a7214921d91edff4c238385", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9e09083674a58d361cd805877be55b5856d2806/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9e09083674a58d361cd805877be55b5856d2806/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=e9e09083674a58d361cd805877be55b5856d2806", "patch": "@@ -378,6 +378,7 @@ impl Step for RustAnalyzer {\n             SourceType::InTree,\n             &[\"sysroot-abi\".to_owned()],\n         );\n+        cargo.allow_features(tool::RustAnalyzer::ALLOW_FEATURES);\n \n         let dir = builder.src.join(workspace_path);\n         // needed by rust-analyzer to find its own text fixtures, cf.\n@@ -690,7 +691,7 @@ impl Step for CompiletestTest {\n         // We need `ToolStd` for the locally-built sysroot because\n         // compiletest uses unstable features of the `test` crate.\n         builder.ensure(compile::Std::new(compiler, host));\n-        let cargo = tool::prepare_tool_cargo(\n+        let mut cargo = tool::prepare_tool_cargo(\n             builder,\n             compiler,\n             Mode::ToolStd,\n@@ -700,6 +701,7 @@ impl Step for CompiletestTest {\n             SourceType::InTree,\n             &[],\n         );\n+        cargo.allow_features(\"test\");\n \n         try_run(builder, &mut cargo.into());\n     }"}, {"sha": "9a2100c2fb785e6b6b264ecdf6cf76778bcaf562", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e9e09083674a58d361cd805877be55b5856d2806/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9e09083674a58d361cd805877be55b5856d2806/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=e9e09083674a58d361cd805877be55b5856d2806", "patch": "@@ -29,6 +29,8 @@ struct ToolBuild {\n     is_optional_tool: bool,\n     source_type: SourceType,\n     extra_features: Vec<String>,\n+    /// Nightly-only features that are allowed (comma-separated list).\n+    allow_features: &'static str,\n }\n \n impl Step for ToolBuild {\n@@ -59,7 +61,7 @@ impl Step for ToolBuild {\n             _ => panic!(\"unexpected Mode for tool build\"),\n         }\n \n-        let cargo = prepare_tool_cargo(\n+        let mut cargo = prepare_tool_cargo(\n             builder,\n             compiler,\n             self.mode,\n@@ -69,6 +71,9 @@ impl Step for ToolBuild {\n             self.source_type,\n             &self.extra_features,\n         );\n+        if !self.allow_features.is_empty() {\n+            cargo.allow_features(self.allow_features);\n+        }\n \n         builder.info(&format!(\"Building stage{} tool {} ({})\", compiler.stage, tool, target));\n         let mut duplicates = Vec::new();\n@@ -292,6 +297,7 @@ macro_rules! bootstrap_tool {\n         $name:ident, $path:expr, $tool_name:expr\n         $(,is_external_tool = $external:expr)*\n         $(,is_unstable_tool = $unstable:expr)*\n+        $(,allow_features = $allow_features:expr)?\n         ;\n     )+) => {\n         #[derive(Copy, PartialEq, Eq, Clone)]\n@@ -355,6 +361,7 @@ macro_rules! bootstrap_tool {\n                         SourceType::InTree\n                     },\n                     extra_features: vec![],\n+                    allow_features: concat!($($allow_features)*),\n                 }).expect(\"expected to build -- essential tool\")\n             }\n         }\n@@ -368,7 +375,7 @@ bootstrap_tool!(\n     Tidy, \"src/tools/tidy\", \"tidy\";\n     Linkchecker, \"src/tools/linkchecker\", \"linkchecker\";\n     CargoTest, \"src/tools/cargotest\", \"cargotest\";\n-    Compiletest, \"src/tools/compiletest\", \"compiletest\", is_unstable_tool = true;\n+    Compiletest, \"src/tools/compiletest\", \"compiletest\", is_unstable_tool = true, allow_features = \"test\";\n     BuildManifest, \"src/tools/build-manifest\", \"build-manifest\";\n     RemoteTestClient, \"src/tools/remote-test-client\", \"remote-test-client\";\n     RustInstaller, \"src/tools/rust-installer\", \"rust-installer\", is_external_tool = true;\n@@ -435,6 +442,7 @@ impl Step for ErrorIndex {\n                 is_optional_tool: false,\n                 source_type: SourceType::InTree,\n                 extra_features: Vec::new(),\n+                allow_features: \"\",\n             })\n             .expect(\"expected to build -- essential tool\")\n     }\n@@ -471,6 +479,7 @@ impl Step for RemoteTestServer {\n                 is_optional_tool: false,\n                 source_type: SourceType::InTree,\n                 extra_features: Vec::new(),\n+                allow_features: \"\",\n             })\n             .expect(\"expected to build -- essential tool\")\n     }\n@@ -622,6 +631,7 @@ impl Step for Cargo {\n                 is_optional_tool: false,\n                 source_type: SourceType::Submodule,\n                 extra_features: Vec::new(),\n+                allow_features: \"\",\n             })\n             .expect(\"expected to build -- essential tool\");\n \n@@ -637,6 +647,7 @@ impl Step for Cargo {\n                 is_optional_tool: true,\n                 source_type: SourceType::Submodule,\n                 extra_features: Vec::new(),\n+                allow_features: \"\",\n             });\n         };\n \n@@ -684,6 +695,7 @@ impl Step for LldWrapper {\n                 is_optional_tool: false,\n                 source_type: SourceType::InTree,\n                 extra_features: Vec::new(),\n+                allow_features: \"\",\n             })\n             .expect(\"expected to build -- essential tool\");\n \n@@ -697,6 +709,11 @@ pub struct RustAnalyzer {\n     pub target: TargetSelection,\n }\n \n+impl RustAnalyzer {\n+    pub const ALLOW_FEATURES: &str =\n+        \"proc_macro_internals,proc_macro_diagnostic,proc_macro_span,proc_macro_span_shrink\";\n+}\n+\n impl Step for RustAnalyzer {\n     type Output = Option<PathBuf>;\n     const DEFAULT: bool = true;\n@@ -731,6 +748,7 @@ impl Step for RustAnalyzer {\n             extra_features: vec![\"rust-analyzer/in-rust-tree\".to_owned()],\n             is_optional_tool: false,\n             source_type: SourceType::InTree,\n+            allow_features: RustAnalyzer::ALLOW_FEATURES,\n         })\n     }\n }\n@@ -769,6 +787,7 @@ impl Step for RustAnalyzerProcMacroSrv {\n             extra_features: vec![\"proc-macro-srv/sysroot-abi\".to_owned()],\n             is_optional_tool: false,\n             source_type: SourceType::InTree,\n+            allow_features: RustAnalyzer::ALLOW_FEATURES,\n         })?;\n \n         // Copy `rust-analyzer-proc-macro-srv` to `<sysroot>/libexec/`\n@@ -788,6 +807,7 @@ macro_rules! tool_extended {\n        $tool_name:expr,\n        stable = $stable:expr\n        $(,tool_std = $tool_std:literal)?\n+       $(,allow_features = $allow_features:expr)?\n        ;)+) => {\n         $(\n             #[derive(Debug, Clone, Hash, PartialEq, Eq)]\n@@ -839,6 +859,7 @@ macro_rules! tool_extended {\n                     extra_features: $sel.extra_features,\n                     is_optional_tool: true,\n                     source_type: SourceType::InTree,\n+                    allow_features: concat!($($allow_features)*),\n                 })\n             }\n         }"}, {"sha": "b296aa2f4e6d619f1493d42df410f8daff7ab733", "filename": "src/tools/rustbook/Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9e09083674a58d361cd805877be55b5856d2806/src%2Ftools%2Frustbook%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e9e09083674a58d361cd805877be55b5856d2806/src%2Ftools%2Frustbook%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustbook%2FCargo.toml?ref=e9e09083674a58d361cd805877be55b5856d2806", "patch": "@@ -5,10 +5,10 @@ license = \"MIT OR Apache-2.0\"\n edition = \"2021\"\n \n [dependencies]\n-clap = \"3.1.1\"\n+clap = \"4.0.32\"\n env_logger = \"0.7.1\"\n \n [dependencies.mdbook]\n-version = \"0.4.21\"\n+version = \"0.4.25\"\n default-features = false\n features = [\"search\"]"}, {"sha": "1368ec653de115fc8a474ea8a04b42f88b922c72", "filename": "src/tools/rustbook/src/main.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e9e09083674a58d361cd805877be55b5856d2806/src%2Ftools%2Frustbook%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9e09083674a58d361cd805877be55b5856d2806/src%2Ftools%2Frustbook%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustbook%2Fsrc%2Fmain.rs?ref=e9e09083674a58d361cd805877be55b5856d2806", "patch": "@@ -9,18 +9,21 @@ use mdbook::errors::Result as Result3;\n use mdbook::MDBook;\n \n fn main() {\n-    let crate_version = format!(\"v{}\", crate_version!());\n+    let crate_version = concat!(\"v\", crate_version!());\n     env_logger::Builder::from_env(env_logger::Env::default().default_filter_or(\"warn\")).init();\n     let d_arg = arg!(-d --\"dest-dir\" <DEST_DIR>\n \"The output directory for your book\\n(Defaults to ./book when omitted)\")\n-    .required(false);\n-    let dir_arg = arg!([dir]\n-\"A directory for your book\\n(Defaults to Current Directory when omitted)\");\n+    .required(false)\n+    .value_parser(clap::value_parser!(PathBuf));\n+\n+    let dir_arg = arg!([dir] \"Root directory for the book\\n\\\n+                              (Defaults to the current directory when omitted)\")\n+    .value_parser(clap::value_parser!(PathBuf));\n \n     let matches = Command::new(\"rustbook\")\n         .about(\"Build a book with mdBook\")\n         .author(\"Steve Klabnik <steve@steveklabnik.com>\")\n-        .version(&*crate_version)\n+        .version(crate_version)\n         .subcommand_required(true)\n         .arg_required_else_help(true)\n         .subcommand(\n@@ -60,8 +63,8 @@ pub fn build(args: &ArgMatches) -> Result3<()> {\n     // Set this to allow us to catch bugs in advance.\n     book.config.build.create_missing = false;\n \n-    if let Some(dest_dir) = args.value_of(\"dest-dir\") {\n-        book.config.build.build_dir = PathBuf::from(dest_dir);\n+    if let Some(dest_dir) = args.get_one::<PathBuf>(\"dest-dir\") {\n+        book.config.build.build_dir = dest_dir.into();\n     }\n \n     book.build()?;\n@@ -76,10 +79,9 @@ fn test(args: &ArgMatches) -> Result3<()> {\n }\n \n fn get_book_dir(args: &ArgMatches) -> PathBuf {\n-    if let Some(dir) = args.value_of(\"dir\") {\n+    if let Some(p) = args.get_one::<PathBuf>(\"dir\") {\n         // Check if path is relative from current dir, or absolute...\n-        let p = Path::new(dir);\n-        if p.is_relative() { env::current_dir().unwrap().join(dir) } else { p.to_path_buf() }\n+        if p.is_relative() { env::current_dir().unwrap().join(p) } else { p.to_path_buf() }\n     } else {\n         env::current_dir().unwrap()\n     }"}]}