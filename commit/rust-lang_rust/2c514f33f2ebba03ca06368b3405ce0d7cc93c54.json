{"sha": "2c514f33f2ebba03ca06368b3405ce0d7cc93c54", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjNTE0ZjMzZjJlYmJhMDNjYTA2MzY4YjM0MDVjZTBkN2NjOTNjNTQ=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-09-23T20:15:51Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-09-23T20:15:51Z"}, "message": "More fleshing-out on rustc.me.trans. Emitting modules and fns corresponding to parsed input now.", "tree": {"sha": "3bee92c42cc3d3465e2814b0d157203c38befb97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3bee92c42cc3d3465e2814b0d157203c38befb97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c514f33f2ebba03ca06368b3405ce0d7cc93c54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c514f33f2ebba03ca06368b3405ce0d7cc93c54", "html_url": "https://github.com/rust-lang/rust/commit/2c514f33f2ebba03ca06368b3405ce0d7cc93c54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c514f33f2ebba03ca06368b3405ce0d7cc93c54/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04a55df54bb389abf95c0639bd6246f06cd6c38f", "url": "https://api.github.com/repos/rust-lang/rust/commits/04a55df54bb389abf95c0639bd6246f06cd6c38f", "html_url": "https://github.com/rust-lang/rust/commit/04a55df54bb389abf95c0639bd6246f06cd6c38f"}], "stats": {"total": 80, "additions": 64, "deletions": 16}, "files": [{"sha": "228e864faaf7d9978cc188cb24b104e37d033f83", "filename": "src/comp/driver/session.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2c514f33f2ebba03ca06368b3405ce0d7cc93c54/src%2Fcomp%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c514f33f2ebba03ca06368b3405ce0d7cc93c54/src%2Fcomp%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fsession.rs?ref=2c514f33f2ebba03ca06368b3405ce0d7cc93c54", "patch": "@@ -1,8 +1,8 @@\n import util.common.span;\n import std._uint;\n \n-io obj session() {\n-    io fn span_err(span sp, str msg) {\n+obj session() {\n+    fn span_err(span sp, str msg) {\n         let str s =  sp.filename;\n         s += ':' as u8;\n         // We really need #fmt soon!\n@@ -19,12 +19,19 @@ io obj session() {\n         fail;\n     }\n \n-    io fn err(str msg) {\n+    fn err(str msg) {\n         let str s = \"error: \";\n         s += msg;\n         log s;\n         fail;\n     }\n+\n+    fn unimpl(str msg) {\n+        let str s = \"error: unimplemented \";\n+        s += msg;\n+        log s;\n+        fail;\n+    }\n }\n \n "}, {"sha": "ab2e15e3b628d3ef4f0ffbb2954a76cb80fe74aa", "filename": "src/comp/fe/parser.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2c514f33f2ebba03ca06368b3405ce0d7cc93c54/src%2Fcomp%2Ffe%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c514f33f2ebba03ca06368b3405ce0d7cc93c54/src%2Fcomp%2Ffe%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffe%2Fparser.rs?ref=2c514f33f2ebba03ca06368b3405ce0d7cc93c54", "patch": "@@ -218,11 +218,27 @@ state fn parse_fn(parser p) -> tup(ast.ident, ast.item) {\n     ret tup(id, ast.item_fn(@f));\n }\n \n+state fn parse_mod(parser p) -> tup(ast.ident, ast.item) {\n+    expect(p, token.MOD);\n+    auto id = parse_ident(p);\n+    expect(p, token.LBRACE);\n+    let ast._mod m = new_str_hash[ast.item]();\n+    while (p.peek() != token.RBRACE) {\n+        auto i = parse_item(p);\n+        m.insert(i._0, i._1);\n+    }\n+    expect(p, token.RBRACE);\n+    ret tup(id, ast.item_mod(@m));\n+}\n+\n state fn parse_item(parser p) -> tup(ast.ident, ast.item) {\n     alt (p.peek()) {\n         case (token.FN) {\n             ret parse_fn(p);\n         }\n+        case (token.MOD) {\n+            ret parse_mod(p);\n+        }\n     }\n     p.err(\"expectied item\");\n     fail;"}, {"sha": "57213d9382b7d051bb18cdc8ff3ffdcec008f9a3", "filename": "src/comp/me/trans.rs", "status": "modified", "additions": 38, "deletions": 13, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/2c514f33f2ebba03ca06368b3405ce0d7cc93c54/src%2Fcomp%2Fme%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c514f33f2ebba03ca06368b3405ce0d7cc93c54/src%2Fcomp%2Fme%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fme%2Ftrans.rs?ref=2c514f33f2ebba03ca06368b3405ce0d7cc93c54", "patch": "@@ -17,6 +17,10 @@ import lib.llvm.llvm.BasicBlockRef;\n import lib.llvm.False;\n import lib.llvm.True;\n \n+type trans_ctxt = rec(session.session sess,\n+                      ModuleRef llmod,\n+                      str path);\n+\n fn T_nil() -> TypeRef {\n     ret llvm.LLVMVoidType();\n }\n@@ -32,35 +36,54 @@ fn T_fn(vec[TypeRef] inputs, TypeRef output) -> TypeRef {\n                               False());\n }\n \n-fn trans_fn(ModuleRef llmod, str name, &ast._fn f) {\n-    let vec[TypeRef] args = vec();\n-    let TypeRef llty = T_fn(args, T_nil());\n-    let ValueRef llfn =\n-        llvm.LLVMAddFunction(llmod, _str.buf(name), llty);\n+fn trans_log(&trans_ctxt cx, builder b, &ast.atom a) {\n }\n \n-fn trans_block(ast.block b, ValueRef llfn) {\n+fn trans_stmt(&trans_ctxt cx, builder b, &ast.stmt s) {\n+    alt (s) {\n+        case (ast.stmt_log(?a)) {\n+            trans_log(cx, b, *a);\n+        }\n+        case (_) {\n+            cx.sess.unimpl(\"stmt variant\");\n+        }\n+    }\n+}\n+\n+fn trans_block(&trans_ctxt cx, ValueRef llfn, &ast.block b) {\n     let BasicBlockRef llbb =\n-        llvm.LLVMAppendBasicBlock(llfn, 0 as sbuf);\n+        llvm.LLVMAppendBasicBlock(llfn, _str.buf(\"\"));\n     let BuilderRef llbuild = llvm.LLVMCreateBuilder();\n     llvm.LLVMPositionBuilderAtEnd(llbuild, llbb);\n-    auto b = builder(llbuild);\n+    auto bld = builder(llbuild);\n+    for (@ast.stmt s in b) {\n+        trans_stmt(cx, bld, *s);\n+    }\n+}\n+\n+fn trans_fn(&trans_ctxt cx, &ast._fn f) {\n+    let vec[TypeRef] args = vec();\n+    let TypeRef llty = T_fn(args, T_nil());\n+    let ValueRef llfn =\n+        llvm.LLVMAddFunction(cx.llmod, _str.buf(cx.path), llty);\n+    trans_block(cx, llfn, f.body);\n }\n \n-fn trans_mod_item(ModuleRef llmod, str name, &ast.item item) {\n+fn trans_item(&trans_ctxt cx, &str name, &ast.item item) {\n+    auto sub_cx = rec(path=cx.path + \".\" + name with cx);\n     alt (item) {\n         case (ast.item_fn(?f)) {\n-            trans_fn(llmod, name, *f);\n+            trans_fn(sub_cx, *f);\n         }\n         case (ast.item_mod(?m)) {\n-            trans_mod(llmod, name, *m);\n+            trans_mod(sub_cx, *m);\n         }\n     }\n }\n \n-fn trans_mod(ModuleRef llmod, str name, &ast._mod m) {\n+fn trans_mod(&trans_ctxt cx, &ast._mod m) {\n     for each (tup(str, ast.item) pair in m.items()) {\n-        trans_mod_item(llmod, name + \".\" + pair._0, pair._1);\n+        trans_item(cx, pair._0, pair._1);\n     }\n }\n \n@@ -69,6 +92,8 @@ fn trans_crate(session.session sess, ast.crate crate) {\n         llvm.LLVMModuleCreateWithNameInContext(_str.buf(\"rust_out\"),\n                                                llvm.LLVMGetGlobalContext());\n \n+    auto cx = rec(sess=sess, llmod=llmod, path=\"\");\n+    trans_mod(cx, crate.module);\n \n     llvm.LLVMWriteBitcodeToFile(llmod, _str.buf(\"rust_out.bc\"));\n     llvm.LLVMDisposeModule(llmod);"}]}