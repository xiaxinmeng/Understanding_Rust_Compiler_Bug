{"sha": "7a6d03c2699787644b44f7bc3e8252d1508880b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhNmQwM2MyNjk5Nzg3NjQ0YjQ0ZjdiYzNlODI1MmQxNTA4ODgwYjg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-30T12:21:56Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-30T12:37:15Z"}, "message": "miri errors: rename InvalidDiscriminant -> InvalidTag", "tree": {"sha": "dc3c9a28fabfc5fa33a866f2c677e495c5c763ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc3c9a28fabfc5fa33a866f2c677e495c5c763ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a6d03c2699787644b44f7bc3e8252d1508880b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a6d03c2699787644b44f7bc3e8252d1508880b8", "html_url": "https://github.com/rust-lang/rust/commit/7a6d03c2699787644b44f7bc3e8252d1508880b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a6d03c2699787644b44f7bc3e8252d1508880b8/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7d745f33d950c050e0a5a2ee2ee9f0e1269e956", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7d745f33d950c050e0a5a2ee2ee9f0e1269e956", "html_url": "https://github.com/rust-lang/rust/commit/f7d745f33d950c050e0a5a2ee2ee9f0e1269e956"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "6646aad6fc74055009a2e042bed310c7f7369992", "filename": "src/librustc_middle/mir/interpret/error.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a6d03c2699787644b44f7bc3e8252d1508880b8/src%2Flibrustc_middle%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6d03c2699787644b44f7bc3e8252d1508880b8/src%2Flibrustc_middle%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Finterpret%2Ferror.rs?ref=7a6d03c2699787644b44f7bc3e8252d1508880b8", "patch": "@@ -390,8 +390,8 @@ pub enum UndefinedBehaviorInfo<'tcx> {\n     InvalidBool(u8),\n     /// Using a non-character `u32` as character.\n     InvalidChar(u32),\n-    /// An enum discriminant was set to a value which was outside the range of valid values.\n-    InvalidDiscriminant(Scalar),\n+    /// The tag of an enum does not encode an actual discriminant.\n+    InvalidTag(Scalar),\n     /// Using a pointer-not-to-a-function as function pointer.\n     InvalidFunctionPointer(Pointer),\n     /// Using a string that is not valid UTF-8,\n@@ -463,7 +463,7 @@ impl fmt::Display for UndefinedBehaviorInfo<'_> {\n             InvalidChar(c) => {\n                 write!(f, \"interpreting an invalid 32-bit value as a char: 0x{:08x}\", c)\n             }\n-            InvalidDiscriminant(val) => write!(f, \"enum value has invalid discriminant: {}\", val),\n+            InvalidTag(val) => write!(f, \"enum value has invalid tag: {}\", val),\n             InvalidFunctionPointer(p) => {\n                 write!(f, \"using {} as function pointer but it does not point to a function\", p)\n             }"}, {"sha": "fb08e83b7694206ae4ef2acdc656496eb57b397c", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a6d03c2699787644b44f7bc3e8252d1508880b8/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6d03c2699787644b44f7bc3e8252d1508880b8/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=7a6d03c2699787644b44f7bc3e8252d1508880b8", "patch": "@@ -11,7 +11,7 @@ use rustc_middle::ty::layout::{PrimitiveExt, TyAndLayout};\n use rustc_middle::ty::print::{FmtPrinter, PrettyPrinter, Printer};\n use rustc_middle::ty::Ty;\n use rustc_middle::{mir, ty};\n-use rustc_target::abi::{Abi, TagEncoding, HasDataLayout, LayoutOf, Size};\n+use rustc_target::abi::{Abi, HasDataLayout, LayoutOf, Size, TagEncoding};\n use rustc_target::abi::{VariantIdx, Variants};\n \n use super::{\n@@ -641,7 +641,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             TagEncoding::Direct => {\n                 let tag_bits = self\n                     .force_bits(tag_val, tag_layout.size)\n-                    .map_err(|_| err_ub!(InvalidDiscriminant(tag_val.erase_tag())))?;\n+                    .map_err(|_| err_ub!(InvalidTag(tag_val.erase_tag())))?;\n                 // Cast bits from tag layout to discriminant layout.\n                 let discr_val = self.cast_from_scalar(tag_bits, tag_layout, discr_layout.ty);\n                 let discr_bits = discr_val.assert_bits(discr_layout.size);\n@@ -658,7 +658,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     }\n                     _ => bug!(\"tagged layout for non-adt non-generator\"),\n                 }\n-                .ok_or_else(|| err_ub!(InvalidDiscriminant(tag_val.erase_tag())))?;\n+                .ok_or_else(|| err_ub!(InvalidTag(tag_val.erase_tag())))?;\n                 // Return the cast value, and the index.\n                 (discr_val, index.0)\n             }\n@@ -674,7 +674,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                             && variants_start == variants_end\n                             && !self.memory.ptr_may_be_null(ptr);\n                         if !ptr_valid {\n-                            throw_ub!(InvalidDiscriminant(tag_val.erase_tag()))\n+                            throw_ub!(InvalidTag(tag_val.erase_tag()))\n                         }\n                         dataful_variant\n                     }"}, {"sha": "8dea811d8bcd49fb0fd00ca078f765465da4eb7a", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a6d03c2699787644b44f7bc3e8252d1508880b8/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6d03c2699787644b44f7bc3e8252d1508880b8/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=7a6d03c2699787644b44f7bc3e8252d1508880b8", "patch": "@@ -696,8 +696,8 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n         try_validation!(\n             self.walk_value(op),\n             self.path,\n-            err_ub!(InvalidDiscriminant(val)) =>\n-                { \"{}\", val } expected { \"a valid enum discriminant\" },\n+            err_ub!(InvalidTag(val)) =>\n+                { \"{}\", val } expected { \"a valid enum tag\" },\n             err_unsup!(ReadPointerAsBytes) =>\n                 { \"a pointer\" } expected { \"plain (non-pointer) bytes\" },\n         );"}, {"sha": "93dd9a53ec99f95c3595d875e208dc49bf181652", "filename": "src/test/ui/consts/const-eval/double_check2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6d03c2699787644b44f7bc3e8252d1508880b8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a6d03c2699787644b44f7bc3e8252d1508880b8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check2.stderr?ref=7a6d03c2699787644b44f7bc3e8252d1508880b8", "patch": "@@ -5,7 +5,7 @@ LL | / static FOO: (&Foo, &Bar) = unsafe {(\n LL | |     Union { u8: &BAR }.foo,\n LL | |     Union { u8: &BAR }.bar,\n LL | | )};\n-   | |___^ type validation failed: encountered 0x05 at .1.<deref>, but expected a valid enum discriminant\n+   | |___^ type validation failed: encountered 0x05 at .1.<deref>, but expected a valid enum tag\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n "}, {"sha": "d40073fb18fb004be984be92b9f3dbd05dcef827", "filename": "src/test/ui/consts/const-eval/ub-enum.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a6d03c2699787644b44f7bc3e8252d1508880b8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a6d03c2699787644b44f7bc3e8252d1508880b8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.stderr?ref=7a6d03c2699787644b44f7bc3e8252d1508880b8", "patch": "@@ -2,7 +2,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-enum.rs:24:1\n    |\n LL | const BAD_ENUM: Enum = unsafe { mem::transmute(1usize) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0x00000001, but expected a valid enum discriminant\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0x00000001, but expected a valid enum tag\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n@@ -26,7 +26,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-enum.rs:42:1\n    |\n LL | const BAD_ENUM2: Enum2 = unsafe { mem::transmute(0usize) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0x00000000, but expected a valid enum discriminant\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0x00000000, but expected a valid enum tag\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n "}]}