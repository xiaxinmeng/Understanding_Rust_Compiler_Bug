{"sha": "86e1860495403ee0154608e51fe4b4d81203e15f", "node_id": "C_kwDOAAsO6NoAKDg2ZTE4NjA0OTU0MDNlZTAxNTQ2MDhlNTFmZTRiNGQ4MTIwM2UxNWY", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-02-16T15:48:46Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-03-28T16:53:47Z"}, "message": "Revert to inference variable based hidden type computation for RPIT", "tree": {"sha": "12885084d27cbabcb24161ecc668b3da507f89e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12885084d27cbabcb24161ecc668b3da507f89e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86e1860495403ee0154608e51fe4b4d81203e15f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86e1860495403ee0154608e51fe4b4d81203e15f", "html_url": "https://github.com/rust-lang/rust/commit/86e1860495403ee0154608e51fe4b4d81203e15f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86e1860495403ee0154608e51fe4b4d81203e15f/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3136bfef9319a40c95efc38409ad3e57d40882dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/3136bfef9319a40c95efc38409ad3e57d40882dd", "html_url": "https://github.com/rust-lang/rust/commit/3136bfef9319a40c95efc38409ad3e57d40882dd"}], "stats": {"total": 907, "additions": 640, "deletions": 267}, "files": [{"sha": "ce922bca3565cf45a9c7ee675c4502bb4c49cc3e", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86e1860495403ee0154608e51fe4b4d81203e15f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86e1860495403ee0154608e51fe4b4d81203e15f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=86e1860495403ee0154608e51fe4b4d81203e15f", "patch": "@@ -510,7 +510,7 @@ impl UseKind {\n \n impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     #[instrument(skip(self), level = \"debug\")]\n-    fn register_hidden_type(\n+    pub fn register_hidden_type(\n         &self,\n         opaque_type_key: OpaqueTypeKey<'tcx>,\n         cause: ObligationCause<'tcx>,"}, {"sha": "ee93a8ce535924947615d73b5584da87b3559c6d", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 43, "deletions": 2, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/86e1860495403ee0154608e51fe4b4d81203e15f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86e1860495403ee0154608e51fe4b4d81203e15f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=86e1860495403ee0154608e51fe4b4d81203e15f", "patch": "@@ -3,6 +3,7 @@ use super::compare_method::check_type_bounds;\n use super::compare_method::{compare_const_impl, compare_impl_method, compare_ty_impl};\n use super::*;\n \n+use hir::OpaqueTyOrigin;\n use rustc_attr as attr;\n use rustc_errors::{Applicability, ErrorGuaranteed};\n use rustc_hir as hir;\n@@ -12,8 +13,9 @@ use rustc_hir::lang_items::LangItem;\n use rustc_hir::{def::Res, ItemKind, Node, PathSegment};\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::{RegionVariableOrigin, TyCtxtInferExt};\n+use rustc_infer::traits::ObligationCause;\n use rustc_middle::hir::nested_filter;\n-use rustc_middle::ty::fold::TypeFoldable;\n+use rustc_middle::ty::fold::{BottomUpFolder, TypeFoldable};\n use rustc_middle::ty::layout::{LayoutError, MAX_SIMD_LANES};\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::util::{Discr, IntTypeExt};\n@@ -95,7 +97,46 @@ pub(super) fn check_fn<'a, 'tcx>(\n \n     let declared_ret_ty = fn_sig.output();\n \n-    fcx.ret_coercion = Some(RefCell::new(CoerceMany::new(declared_ret_ty)));\n+    let ret_ty = declared_ret_ty.fold_with(&mut BottomUpFolder {\n+        tcx: fcx.tcx,\n+        ty_op: |ty| match *ty.kind() {\n+            ty::Opaque(def_id, substs) => {\n+                let span = tcx.def_span(def_id);\n+                if let Some(origin @ OpaqueTyOrigin::FnReturn(_)) =\n+                    fcx.infcx.opaque_type_origin(def_id, span)\n+                {\n+                    let hidden_ty = fcx.infcx.next_ty_var(TypeVariableOrigin {\n+                        kind: TypeVariableOriginKind::MiscVariable,\n+                        span: span,\n+                    });\n+\n+                    let cause = ObligationCause::misc(span, body.value.hir_id);\n+                    match fcx.infcx.register_hidden_type(\n+                        ty::OpaqueTypeKey { def_id, substs },\n+                        cause.clone(),\n+                        param_env,\n+                        hidden_ty,\n+                        origin,\n+                    ) {\n+                        Ok(infer_ok) => {\n+                            fcx.register_infer_ok_obligations(infer_ok);\n+                            hidden_ty\n+                        }\n+                        Err(err) => {\n+                            fcx.report_mismatched_types(&cause, ty, hidden_ty, err).emit();\n+                            tcx.ty_error()\n+                        }\n+                    }\n+                } else {\n+                    ty\n+                }\n+            }\n+            _ => ty,\n+        },\n+        lt_op: |lt| lt,\n+        ct_op: |ct| ct,\n+    });\n+    fcx.ret_coercion = Some(RefCell::new(CoerceMany::new(ret_ty)));\n     fcx.ret_type_span = Some(decl.output.span());\n \n     let span = body.value.span;"}, {"sha": "ecbd1e463491b9f960c3c0f97214ba63662707d4", "filename": "compiler/rustc_typeck/src/check/writeback.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/86e1860495403ee0154608e51fe4b4d81203e15f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86e1860495403ee0154608e51fe4b4d81203e15f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs?ref=86e1860495403ee0154608e51fe4b4d81203e15f", "patch": "@@ -20,6 +20,7 @@ use rustc_span::symbol::sym;\n use rustc_span::Span;\n \n use std::mem;\n+use std::ops::ControlFlow;\n \n ///////////////////////////////////////////////////////////////////////////\n // Entry point\n@@ -503,7 +504,28 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n         for (opaque_type_key, decl) in opaque_types {\n             let hidden_type = match decl.origin {\n                 hir::OpaqueTyOrigin::FnReturn(_) | hir::OpaqueTyOrigin::AsyncFn(_) => {\n-                    Some(self.resolve(decl.hidden_type.ty, &decl.hidden_type.span))\n+                    let ty = self.resolve(decl.hidden_type.ty, &decl.hidden_type.span);\n+                    struct RecursionChecker {\n+                        def_id: DefId,\n+                    }\n+                    impl<'tcx> ty::TypeVisitor<'tcx> for RecursionChecker {\n+                        type BreakTy = ();\n+                        fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n+                            if let ty::Opaque(def_id, _) = *t.kind() {\n+                                if def_id == self.def_id {\n+                                    return ControlFlow::Break(());\n+                                }\n+                            }\n+                            t.super_visit_with(self)\n+                        }\n+                    }\n+                    if ty\n+                        .visit_with(&mut RecursionChecker { def_id: opaque_type_key.def_id })\n+                        .is_break()\n+                    {\n+                        return;\n+                    }\n+                    Some(ty)\n                 }\n                 hir::OpaqueTyOrigin::TyAlias => None,\n             };"}, {"sha": "ef0443034ec43117eaa604d484381e19d61bad08", "filename": "src/test/ui/associated-types/impl-trait-return-missing-constraint.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-trait-return-missing-constraint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-trait-return-missing-constraint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-trait-return-missing-constraint.rs?ref=86e1860495403ee0154608e51fe4b4d81203e15f", "patch": "@@ -23,8 +23,9 @@ fn bar() -> impl Bar {\n }\n \n fn baz() -> impl Bar<Item = i32> {\n-    bar()\n     //~^ ERROR type mismatch resolving `<impl Bar as Foo>::Item == i32`\n+    //~| ERROR type mismatch resolving `<impl Bar as Foo>::Item == i32`\n+    bar()\n }\n \n fn main() {"}, {"sha": "b7c49570ca40c737ca316b979457bb7423b35444", "filename": "src/test/ui/associated-types/impl-trait-return-missing-constraint.stderr", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-trait-return-missing-constraint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-trait-return-missing-constraint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-trait-return-missing-constraint.stderr?ref=86e1860495403ee0154608e51fe4b4d81203e15f", "patch": "@@ -1,11 +1,11 @@\n error[E0271]: type mismatch resolving `<impl Bar as Foo>::Item == i32`\n-  --> $DIR/impl-trait-return-missing-constraint.rs:26:5\n+  --> $DIR/impl-trait-return-missing-constraint.rs:25:13\n    |\n LL | fn bar() -> impl Bar {\n    |             -------- the expected opaque type\n ...\n-LL |     bar()\n-   |     ^^^^^ expected associated type, found `i32`\n+LL | fn baz() -> impl Bar<Item = i32> {\n+   |             ^^^^^^^^^^^^^^^^^^^^ expected associated type, found `i32`\n    |\n    = note: expected associated type `<impl Bar as Foo>::Item`\n                          found type `i32`\n@@ -16,6 +16,29 @@ help: consider constraining the associated type `<impl Bar as Foo>::Item` to `i3\n LL | fn bar() -> impl Bar<Item = i32> {\n    |                     ++++++++++++\n \n-error: aborting due to previous error\n+error[E0271]: type mismatch resolving `<impl Bar as Foo>::Item == i32`\n+  --> $DIR/impl-trait-return-missing-constraint.rs:25:34\n+   |\n+LL |   fn bar() -> impl Bar {\n+   |               -------- the expected opaque type\n+...\n+LL |   fn baz() -> impl Bar<Item = i32> {\n+   |  __________________________________^\n+LL | |\n+LL | |\n+LL | |     bar()\n+LL | | }\n+   | |_^ expected associated type, found `i32`\n+   |\n+   = note: expected associated type `<impl Bar as Foo>::Item`\n+                         found type `i32`\n+   = help: consider constraining the associated type `<impl Bar as Foo>::Item` to `i32` or calling a method that returns `<impl Bar as Foo>::Item`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n+help: consider constraining the associated type `<impl Bar as Foo>::Item` to `i32`\n+   |\n+LL | fn bar() -> impl Bar<Item = i32> {\n+   |                     ++++++++++++\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0271`."}, {"sha": "2538f34351e5a51fab1fc4432a1445861b08202c", "filename": "src/test/ui/async-await/issue-64130-4-async-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-4-async-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-4-async-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-4-async-move.rs?ref=86e1860495403ee0154608e51fe4b4d81203e15f", "patch": "@@ -13,9 +13,9 @@ impl Client {\n async fn get() { }\n \n pub fn foo() -> impl Future + Send {\n+    //~^ ERROR future cannot be sent between threads safely\n     let client = Client(Box::new(true));\n     async move {\n-        //~^ ERROR future cannot be sent between threads safely\n         match client.status() {\n             200 => {\n                 let _x = get().await;"}, {"sha": "d631e6dc7f7e968aa80446b2791fbe7114d8a7fb", "filename": "src/test/ui/async-await/issue-64130-4-async-move.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-4-async-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-4-async-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-4-async-move.stderr?ref=86e1860495403ee0154608e51fe4b4d81203e15f", "patch": "@@ -1,8 +1,8 @@\n error: future cannot be sent between threads safely\n-  --> $DIR/issue-64130-4-async-move.rs:17:5\n+  --> $DIR/issue-64130-4-async-move.rs:15:17\n    |\n-LL |     async move {\n-   |     ^^^^^^^^^^ future created by async block is not `Send`\n+LL | pub fn foo() -> impl Future + Send {\n+   |                 ^^^^^^^^^^^^^^^^^^ future created by async block is not `Send`\n    |\n    = help: the trait `Sync` is not implemented for `(dyn Any + Send + 'static)`\n note: future is not `Send` as this value is used across an await"}, {"sha": "019c56eb2fa3efc2329396f1fc13f90e20722d25", "filename": "src/test/ui/async-await/issue-70818.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fasync-await%2Fissue-70818.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fasync-await%2Fissue-70818.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-70818.rs?ref=86e1860495403ee0154608e51fe4b4d81203e15f", "patch": "@@ -2,8 +2,8 @@\n \n use std::future::Future;\n fn foo<T: Send, U>(ty: T, ty1: U) -> impl Future<Output = (T, U)> + Send {\n-    async { (ty, ty1) }\n     //~^ Error future cannot be sent between threads safely\n+    async { (ty, ty1) }\n }\n \n fn main() {}"}, {"sha": "20109d4d1166a0e3331d4289ef60d2628ae1b1d9", "filename": "src/test/ui/async-await/issue-70818.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fasync-await%2Fissue-70818.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fasync-await%2Fissue-70818.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-70818.stderr?ref=86e1860495403ee0154608e51fe4b4d81203e15f", "patch": "@@ -1,11 +1,11 @@\n error: future cannot be sent between threads safely\n-  --> $DIR/issue-70818.rs:5:5\n+  --> $DIR/issue-70818.rs:4:38\n    |\n-LL |     async { (ty, ty1) }\n-   |     ^^^^^ future created by async block is not `Send`\n+LL | fn foo<T: Send, U>(ty: T, ty1: U) -> impl Future<Output = (T, U)> + Send {\n+   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ future created by async block is not `Send`\n    |\n note: captured value is not `Send`\n-  --> $DIR/issue-70818.rs:5:18\n+  --> $DIR/issue-70818.rs:6:18\n    |\n LL |     async { (ty, ty1) }\n    |                  ^^^ has type `U` which is not `Send`"}, {"sha": "2965a7e0654a4edb39d33d962c1c889116ee1d4c", "filename": "src/test/ui/async-await/issue-70935-complex-spans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.rs?ref=86e1860495403ee0154608e51fe4b4d81203e15f", "patch": "@@ -8,8 +8,8 @@ async fn baz<T>(_c: impl FnMut() -> T) where T: Future<Output=()> {\n }\n \n fn foo(tx: std::sync::mpsc::Sender<i32>) -> impl Future + Send {\n+    //~^ ERROR: future cannot be sent between threads safely\n     async move {\n-        //~^ ERROR: future cannot be sent between threads safely\n         baz(|| async{\n             foo(tx.clone());\n         }).await;"}, {"sha": "db3099381196b771692e3f1b29677d201c77aea1", "filename": "src/test/ui/async-await/issue-70935-complex-spans.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.stderr?ref=86e1860495403ee0154608e51fe4b4d81203e15f", "patch": "@@ -1,8 +1,8 @@\n error: future cannot be sent between threads safely\n-  --> $DIR/issue-70935-complex-spans.rs:11:5\n+  --> $DIR/issue-70935-complex-spans.rs:10:45\n    |\n-LL |     async move {\n-   |     ^^^^^^^^^^ future created by async block is not `Send`\n+LL | fn foo(tx: std::sync::mpsc::Sender<i32>) -> impl Future + Send {\n+   |                                             ^^^^^^^^^^^^^^^^^^ future created by async block is not `Send`\n    |\n    = help: the trait `Sync` is not implemented for `Sender<i32>`\n note: future is not `Send` as this value is used across an await"}, {"sha": "63a4df242f85f9897247a8b24d4101dd16eaeb35", "filename": "src/test/ui/conservative_impl_trait.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fconservative_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fconservative_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconservative_impl_trait.stderr?ref=86e1860495403ee0154608e51fe4b4d81203e15f", "patch": "@@ -1,11 +1,8 @@\n error[E0277]: `()` is not an iterator\n-  --> $DIR/conservative_impl_trait.rs:3:60\n+  --> $DIR/conservative_impl_trait.rs:3:33\n    |\n-LL |   fn will_ice(something: &u32) -> impl Iterator<Item = &u32> {\n-   |  ____________________________________________________________^\n-LL | |\n-LL | | }\n-   | |_^ `()` is not an iterator\n+LL | fn will_ice(something: &u32) -> impl Iterator<Item = &u32> {\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ `()` is not an iterator\n    |\n    = help: the trait `Iterator` is not implemented for `()`\n "}, {"sha": "24031aa1e61f365537dd7cfbaadb45492436797e", "filename": "src/test/ui/const-generics/defaults/rp_impl_trait_fail.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.rs?ref=86e1860495403ee0154608e51fe4b4d81203e15f", "patch": "@@ -4,8 +4,9 @@ trait Trait {}\n impl<const N: u32> Trait for Uwu<N> {}\n \n fn rawr() -> impl Trait {\n-    Uwu::<10, 12>\n     //~^ error: the trait bound `Uwu<10_u32, 12_u32>: Trait` is not satisfied\n+    //~| error: the trait bound `Uwu<10_u32, 12_u32>: Trait` is not satisfied\n+    Uwu::<10, 12>\n }\n \n trait Traitor<const N: u8 = 1, const M: u8 = N> { }\n@@ -15,13 +16,15 @@ impl Traitor<1, 2> for u64 {}\n \n \n fn uwu<const N: u8>() -> impl Traitor<N> {\n-    1_u32\n     //~^ error: the trait bound `u32: Traitor<N, N>` is not satisfied\n+    //~| error: the trait bound `u32: Traitor<N, N>` is not satisfied\n+    1_u32\n }\n \n fn owo() -> impl Traitor {\n-    1_u64\n     //~^ error: the trait bound `u64: Traitor<1_u8, 1_u8>` is not satisfied\n+    //~| error: the trait bound `u64: Traitor<1_u8, 1_u8>` is not satisfied\n+    1_u64\n }\n \n fn main() {"}, {"sha": "81cfcb35606617d6b04c134bfbbedc95b262e5da", "filename": "src/test/ui/const-generics/defaults/rp_impl_trait_fail.stderr", "status": "modified", "additions": 54, "deletions": 10, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.stderr?ref=86e1860495403ee0154608e51fe4b4d81203e15f", "patch": "@@ -1,32 +1,76 @@\n error[E0277]: the trait bound `Uwu<10_u32, 12_u32>: Trait` is not satisfied\n-  --> $DIR/rp_impl_trait_fail.rs:7:5\n+  --> $DIR/rp_impl_trait_fail.rs:6:14\n    |\n-LL |     Uwu::<10, 12>\n-   |     ^^^^^^^^^^^^^ the trait `Trait` is not implemented for `Uwu<10_u32, 12_u32>`\n+LL | fn rawr() -> impl Trait {\n+   |              ^^^^^^^^^^ the trait `Trait` is not implemented for `Uwu<10_u32, 12_u32>`\n    |\n    = help: the following implementations were found:\n              <Uwu<N> as Trait>\n \n+error[E0277]: the trait bound `Uwu<10_u32, 12_u32>: Trait` is not satisfied\n+  --> $DIR/rp_impl_trait_fail.rs:6:25\n+   |\n+LL |   fn rawr() -> impl Trait {\n+   |  _________________________^\n+LL | |\n+LL | |\n+LL | |     Uwu::<10, 12>\n+LL | | }\n+   | |_^ the trait `Trait` is not implemented for `Uwu<10_u32, 12_u32>`\n+   |\n+   = help: the following implementations were found:\n+             <Uwu<N> as Trait>\n+\n+error[E0277]: the trait bound `u32: Traitor<N, N>` is not satisfied\n+  --> $DIR/rp_impl_trait_fail.rs:18:26\n+   |\n+LL | fn uwu<const N: u8>() -> impl Traitor<N> {\n+   |                          ^^^^^^^^^^^^^^^ the trait `Traitor<N, N>` is not implemented for `u32`\n+   |\n+   = help: the following implementations were found:\n+             <u32 as Traitor<N, 2_u8>>\n+             <u64 as Traitor<1_u8, 2_u8>>\n+\n error[E0277]: the trait bound `u32: Traitor<N, N>` is not satisfied\n-  --> $DIR/rp_impl_trait_fail.rs:18:5\n+  --> $DIR/rp_impl_trait_fail.rs:18:42\n    |\n-LL |     1_u32\n-   |     ^^^^^ the trait `Traitor<N, N>` is not implemented for `u32`\n+LL |   fn uwu<const N: u8>() -> impl Traitor<N> {\n+   |  __________________________________________^\n+LL | |\n+LL | |\n+LL | |     1_u32\n+LL | | }\n+   | |_^ the trait `Traitor<N, N>` is not implemented for `u32`\n    |\n    = help: the following implementations were found:\n              <u32 as Traitor<N, 2_u8>>\n              <u64 as Traitor<1_u8, 2_u8>>\n \n error[E0277]: the trait bound `u64: Traitor<1_u8, 1_u8>` is not satisfied\n-  --> $DIR/rp_impl_trait_fail.rs:23:5\n+  --> $DIR/rp_impl_trait_fail.rs:24:13\n+   |\n+LL | fn owo() -> impl Traitor {\n+   |             ^^^^^^^^^^^^ the trait `Traitor<1_u8, 1_u8>` is not implemented for `u64`\n+   |\n+   = help: the following implementations were found:\n+             <u64 as Traitor<1_u8, 2_u8>>\n+             <u32 as Traitor<N, 2_u8>>\n+\n+error[E0277]: the trait bound `u64: Traitor<1_u8, 1_u8>` is not satisfied\n+  --> $DIR/rp_impl_trait_fail.rs:24:26\n    |\n-LL |     1_u64\n-   |     ^^^^^ the trait `Traitor<1_u8, 1_u8>` is not implemented for `u64`\n+LL |   fn owo() -> impl Traitor {\n+   |  __________________________^\n+LL | |\n+LL | |\n+LL | |     1_u64\n+LL | | }\n+   | |_^ the trait `Traitor<1_u8, 1_u8>` is not implemented for `u64`\n    |\n    = help: the following implementations were found:\n              <u64 as Traitor<1_u8, 2_u8>>\n              <u32 as Traitor<N, 2_u8>>\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "f27956e45950a04b6c919b207282a782a6175b25", "filename": "src/test/ui/generator/issue-88653.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fgenerator%2Fissue-88653.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fgenerator%2Fissue-88653.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-88653.rs?ref=86e1860495403ee0154608e51fe4b4d81203e15f", "patch": "@@ -6,10 +6,14 @@\n use std::ops::Generator;\n \n fn foo(bar: bool) -> impl Generator<(bool,)> {\n-    |bar| {\n-    //~^ NOTE: found signature of `fn(bool) -> _`\n+    //~^ ERROR: type mismatch in generator arguments [E0631]\n     //~| ERROR: type mismatch in generator arguments [E0631]\n     //~| NOTE: expected signature of `fn((bool,)) -> _`\n+    //~| NOTE: expected signature of `fn((bool,)) -> _`\n+    //~| NOTE: in this expansion of desugaring of `impl Trait`\n+    |bar| {\n+        //~^ NOTE: found signature of `fn(bool) -> _`\n+        //~| NOTE: found signature of `fn(bool) -> _`\n         if bar {\n             yield bar;\n         }"}, {"sha": "25357411ce1897cadea4a9333f1438aef4f91509", "filename": "src/test/ui/generator/issue-88653.stderr", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fgenerator%2Fissue-88653.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fgenerator%2Fissue-88653.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-88653.stderr?ref=86e1860495403ee0154608e51fe4b4d81203e15f", "patch": "@@ -1,12 +1,28 @@\n error[E0631]: type mismatch in generator arguments\n-  --> $DIR/issue-88653.rs:9:5\n+  --> $DIR/issue-88653.rs:8:22\n    |\n+LL | fn foo(bar: bool) -> impl Generator<(bool,)> {\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^ expected signature of `fn((bool,)) -> _`\n+...\n LL |     |bar| {\n-   |     ^^^^^\n-   |     |\n-   |     expected signature of `fn((bool,)) -> _`\n-   |     found signature of `fn(bool) -> _`\n+   |     ----- found signature of `fn(bool) -> _`\n \n-error: aborting due to previous error\n+error[E0631]: type mismatch in generator arguments\n+  --> $DIR/issue-88653.rs:8:46\n+   |\n+LL |   fn foo(bar: bool) -> impl Generator<(bool,)> {\n+   |  ______________________________________________^\n+LL | |\n+LL | |\n+LL | |\n+...  |\n+LL | |     |bar| {\n+   | |     ----- found signature of `fn(bool) -> _`\n+...  |\n+LL | |     }\n+LL | | }\n+   | |_^ expected signature of `fn((bool,)) -> _`\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0631`."}, {"sha": "77b830783c32a03242b7351ab24fcb20a74d197b", "filename": "src/test/ui/generator/type-mismatch-signature-deduction.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.rs?ref=86e1860495403ee0154608e51fe4b4d81203e15f", "patch": "@@ -3,7 +3,9 @@\n use std::ops::Generator;\n \n fn foo() -> impl Generator<Return = i32> {\n-    || { //~ ERROR type mismatch\n+    //~^ ERROR type mismatch\n+    //~| ERROR type mismatch\n+    || {\n         if false {\n             return Ok(6);\n         }"}, {"sha": "6369e7ec4c784fb3248b4e47e1524bfbebe5459f", "filename": "src/test/ui/generator/type-mismatch-signature-deduction.stderr", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.stderr?ref=86e1860495403ee0154608e51fe4b4d81203e15f", "patch": "@@ -1,33 +1,43 @@\n error[E0308]: mismatched types\n-  --> $DIR/type-mismatch-signature-deduction.rs:13:9\n+  --> $DIR/type-mismatch-signature-deduction.rs:15:9\n    |\n LL |         5\n    |         ^ expected enum `Result`, found integer\n    |\n    = note: expected type `Result<{integer}, _>`\n               found type `{integer}`\n note: return type inferred to be `Result<{integer}, _>` here\n-  --> $DIR/type-mismatch-signature-deduction.rs:8:20\n+  --> $DIR/type-mismatch-signature-deduction.rs:10:20\n    |\n LL |             return Ok(6);\n    |                    ^^^^^\n \n-error[E0271]: type mismatch resolving `<[generator@$DIR/type-mismatch-signature-deduction.rs:6:5: 14:6] as Generator>::Return == i32`\n-  --> $DIR/type-mismatch-signature-deduction.rs:6:5\n+error[E0271]: type mismatch resolving `<[generator@$DIR/type-mismatch-signature-deduction.rs:8:5: 16:6] as Generator>::Return == i32`\n+  --> $DIR/type-mismatch-signature-deduction.rs:5:13\n    |\n-LL | /     || {\n-LL | |         if false {\n-LL | |             return Ok(6);\n-LL | |         }\n+LL | fn foo() -> impl Generator<Return = i32> {\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Result`, found `i32`\n+   |\n+   = note: expected enum `Result<{integer}, _>`\n+              found type `i32`\n+\n+error[E0271]: type mismatch resolving `<[generator@$DIR/type-mismatch-signature-deduction.rs:8:5: 16:6] as Generator>::Return == i32`\n+  --> $DIR/type-mismatch-signature-deduction.rs:5:42\n+   |\n+LL |   fn foo() -> impl Generator<Return = i32> {\n+   |  __________________________________________^\n+LL | |\n+LL | |\n+LL | |     || {\n ...  |\n-LL | |         5\n LL | |     }\n-   | |_____^ expected enum `Result`, found `i32`\n+LL | | }\n+   | |_^ expected enum `Result`, found `i32`\n    |\n    = note: expected enum `Result<{integer}, _>`\n               found type `i32`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0271, E0308.\n For more information about an error, try `rustc --explain E0271`."}, {"sha": "72ade5774d749898fba7524c13e2a95cbcf6c42f", "filename": "src/test/ui/generic-associated-types/issue-92096.migrate.stderr", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92096.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92096.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92096.migrate.stderr?ref=86e1860495403ee0154608e51fe4b4d81203e15f", "patch": "@@ -1,20 +1,18 @@\n error[E0311]: the parameter type `C` may not live long enough\n-  --> $DIR/issue-92096.rs:24:5\n+  --> $DIR/issue-92096.rs:20:33\n    |\n LL | fn call_connect<C>(c: &'_ C) -> impl '_ + Future + Send\n-   |                 - help: consider adding an explicit lifetime bound...: `C: 'a`\n-...\n-LL |     async move { c.connect().await }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `C` will meet its required lifetime bounds\n+   |                 -               ^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `C` will meet its required lifetime bounds\n+   |                 |\n+   |                 help: consider adding an explicit lifetime bound...: `C: 'a`\n \n error[E0311]: the parameter type `C` may not live long enough\n-  --> $DIR/issue-92096.rs:24:5\n+  --> $DIR/issue-92096.rs:20:33\n    |\n LL | fn call_connect<C>(c: &'_ C) -> impl '_ + Future + Send\n-   |                 - help: consider adding an explicit lifetime bound...: `C: 'a`\n-...\n-LL |     async move { c.connect().await }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `C` will meet its required lifetime bounds\n+   |                 -               ^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `C` will meet its required lifetime bounds\n+   |                 |\n+   |                 help: consider adding an explicit lifetime bound...: `C: 'a`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "066132a5d98bb8bea0323094eb2f72dcf672b3e2", "filename": "src/test/ui/generic-associated-types/issue-92096.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92096.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92096.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92096.rs?ref=86e1860495403ee0154608e51fe4b4d81203e15f", "patch": "@@ -18,12 +18,12 @@ trait Client {\n }\n \n fn call_connect<C>(c: &'_ C) -> impl '_ + Future + Send\n+//[migrate]~^ ERROR the parameter\n+//[migrate]~| ERROR the parameter\n where\n     C: Client + Send + Sync,\n {\n     async move { c.connect().await }\n-    //[migrate]~^ ERROR the parameter\n-    //[migrate]~| ERROR the parameter\n }\n \n fn main() {}"}, {"sha": "9f962fa9bbaf51fc1a54f738dd4f076ac8e15834", "filename": "src/test/ui/impl-trait/bound-normalization-fail.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.rs?ref=86e1860495403ee0154608e51fe4b4d81203e15f", "patch": "@@ -23,8 +23,9 @@ mod impl_trait {\n \n     /// `T::Assoc` can't be normalized any further here.\n     fn foo_fail<T: Trait>() -> impl FooLike<Output = T::Assoc> {\n-        Foo(())\n         //~^ ERROR: type mismatch\n+        //~| ERROR: type mismatch\n+        Foo(())\n     }\n }\n \n@@ -40,8 +41,9 @@ mod lifetimes {\n     /// Missing bound constraining `Assoc`, `T::Assoc` can't be normalized further.\n     fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output = T::Assoc> {\n         //~^ ERROR `impl Trait` return type cannot contain a projection or `Self` that references lifetimes from a parent scope\n+        //~| ERROR: type mismatch\n+        //~| ERROR: type mismatch\n         Foo(())\n-        //~^ ERROR: type mismatch\n     }\n }\n "}, {"sha": "0344f416eb7ff6859445f995cef66631a39e6bce", "filename": "src/test/ui/impl-trait/bound-normalization-fail.stderr", "status": "modified", "additions": 55, "deletions": 8, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr?ref=86e1860495403ee0154608e51fe4b4d81203e15f", "patch": "@@ -1,8 +1,31 @@\n error[E0271]: type mismatch resolving `<Foo<()> as FooLike>::Output == <T as impl_trait::Trait>::Assoc`\n-  --> $DIR/bound-normalization-fail.rs:26:9\n+  --> $DIR/bound-normalization-fail.rs:25:32\n    |\n-LL |         Foo(())\n-   |         ^^^^^^^ type mismatch resolving `<Foo<()> as FooLike>::Output == <T as impl_trait::Trait>::Assoc`\n+LL |     fn foo_fail<T: Trait>() -> impl FooLike<Output = T::Assoc> {\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type mismatch resolving `<Foo<()> as FooLike>::Output == <T as impl_trait::Trait>::Assoc`\n+   |\n+note: expected this to be `()`\n+  --> $DIR/bound-normalization-fail.rs:14:19\n+   |\n+LL |     type Output = T;\n+   |                   ^\n+   = note:    expected unit type `()`\n+           found associated type `<T as impl_trait::Trait>::Assoc`\n+help: consider constraining the associated type `<T as impl_trait::Trait>::Assoc` to `()`\n+   |\n+LL |     fn foo_fail<T: Trait<Assoc = ()>>() -> impl FooLike<Output = T::Assoc> {\n+   |                         ++++++++++++\n+\n+error[E0271]: type mismatch resolving `<Foo<()> as FooLike>::Output == <T as impl_trait::Trait>::Assoc`\n+  --> $DIR/bound-normalization-fail.rs:25:64\n+   |\n+LL |       fn foo_fail<T: Trait>() -> impl FooLike<Output = T::Assoc> {\n+   |  ________________________________________________________________^\n+LL | |\n+LL | |\n+LL | |         Foo(())\n+LL | |     }\n+   | |_____^ type mismatch resolving `<Foo<()> as FooLike>::Output == <T as impl_trait::Trait>::Assoc`\n    |\n note: expected this to be `()`\n   --> $DIR/bound-normalization-fail.rs:14:19\n@@ -17,16 +40,40 @@ LL |     fn foo_fail<T: Trait<Assoc = ()>>() -> impl FooLike<Output = T::Assoc>\n    |                         ++++++++++++\n \n error[E0760]: `impl Trait` return type cannot contain a projection or `Self` that references lifetimes from a parent scope\n-  --> $DIR/bound-normalization-fail.rs:41:41\n+  --> $DIR/bound-normalization-fail.rs:42:41\n    |\n LL |     fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output = T::Assoc> {\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0271]: type mismatch resolving `<Foo<()> as FooLike>::Output == <T as lifetimes::Trait<'static>>::Assoc`\n-  --> $DIR/bound-normalization-fail.rs:43:9\n+  --> $DIR/bound-normalization-fail.rs:42:41\n+   |\n+LL |     fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output = T::Assoc> {\n+   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type mismatch resolving `<Foo<()> as FooLike>::Output == <T as lifetimes::Trait<'static>>::Assoc`\n+   |\n+note: expected this to be `()`\n+  --> $DIR/bound-normalization-fail.rs:14:19\n+   |\n+LL |     type Output = T;\n+   |                   ^\n+   = note:    expected unit type `()`\n+           found associated type `<T as lifetimes::Trait<'static>>::Assoc`\n+help: consider constraining the associated type `<T as lifetimes::Trait<'static>>::Assoc` to `()`\n+   |\n+LL |     fn foo2_fail<'a, T: Trait<'a, Assoc = ()>>() -> impl FooLike<Output = T::Assoc> {\n+   |                                 ++++++++++++\n+\n+error[E0271]: type mismatch resolving `<Foo<()> as FooLike>::Output == <T as lifetimes::Trait<'static>>::Assoc`\n+  --> $DIR/bound-normalization-fail.rs:42:73\n    |\n-LL |         Foo(())\n-   |         ^^^^^^^ type mismatch resolving `<Foo<()> as FooLike>::Output == <T as lifetimes::Trait<'static>>::Assoc`\n+LL |       fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output = T::Assoc> {\n+   |  _________________________________________________________________________^\n+LL | |\n+LL | |\n+LL | |\n+LL | |         Foo(())\n+LL | |     }\n+   | |_____^ type mismatch resolving `<Foo<()> as FooLike>::Output == <T as lifetimes::Trait<'static>>::Assoc`\n    |\n note: expected this to be `()`\n   --> $DIR/bound-normalization-fail.rs:14:19\n@@ -40,7 +87,7 @@ help: consider constraining the associated type `<T as lifetimes::Trait<'static>\n LL |     fn foo2_fail<'a, T: Trait<'a, Assoc = ()>>() -> impl FooLike<Output = T::Assoc> {\n    |                                 ++++++++++++\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 5 previous errors\n \n Some errors have detailed explanations: E0271, E0760.\n For more information about an error, try `rustc --explain E0271`."}, {"sha": "ceb8414650f1ec721437d6ca42de99488e258a4f", "filename": "src/test/ui/impl-trait/cross-return-site-inference.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fimpl-trait%2Fcross-return-site-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fimpl-trait%2Fcross-return-site-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fcross-return-site-inference.rs?ref=86e1860495403ee0154608e51fe4b4d81203e15f", "patch": "@@ -0,0 +1,45 @@\n+// edition:2021\n+\n+fn foo(b: bool) -> impl std::fmt::Debug {\n+    if b {\n+        return vec![42]\n+    }\n+    [].into_iter().collect()\n+}\n+\n+fn bar(b: bool) -> impl std::fmt::Debug {\n+    if b {\n+        return [].into_iter().collect()\n+    }\n+    vec![42]\n+}\n+\n+fn bak(b: bool) -> impl std::fmt::Debug {\n+    if b {\n+        return std::iter::empty().collect()\n+    }\n+    vec![42]\n+}\n+\n+fn baa(b: bool) -> impl std::fmt::Debug {\n+    if b {\n+        return [42].into_iter().collect()\n+    }\n+    vec![]\n+}\n+\n+fn muh() -> Result<(), impl std::fmt::Debug> {\n+    Err(\"whoops\")?; //~ ERROR `?` couldn't convert the error to `impl Debug`\n+    Ok(())\n+}\n+\n+fn muh2() -> Result<(), impl std::fmt::Debug> {\n+    return Err(From::from(\"foo\")); //~ ERROR the trait bound `impl Debug: From<&str>` is not satisfied\n+    Ok(())\n+}\n+\n+fn muh3() -> Result<(), impl std::fmt::Debug> {\n+    Err(From::from(\"foo\")) //~ ERROR the trait bound `impl Debug: From<&str>` is not satisfied\n+}\n+\n+fn main() {}\n\\ No newline at end of file"}, {"sha": "06afb938c5fad59d37a0cc9ec9b8be69e7b2d6c8", "filename": "src/test/ui/impl-trait/cross-return-site-inference.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fimpl-trait%2Fcross-return-site-inference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fimpl-trait%2Fcross-return-site-inference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fcross-return-site-inference.stderr?ref=86e1860495403ee0154608e51fe4b4d81203e15f", "patch": "@@ -0,0 +1,26 @@\n+error[E0277]: `?` couldn't convert the error to `impl Debug`\n+  --> $DIR/cross-return-site-inference.rs:32:18\n+   |\n+LL | fn muh() -> Result<(), impl std::fmt::Debug> {\n+   |             -------------------------------- expected `impl Debug` because of this\n+LL |     Err(\"whoops\")?;\n+   |                  ^ the trait `From<&str>` is not implemented for `impl Debug`\n+   |\n+   = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\n+   = note: required because of the requirements on the impl of `FromResidual<Result<Infallible, &str>>` for `Result<(), impl Debug>`\n+\n+error[E0277]: the trait bound `impl Debug: From<&str>` is not satisfied\n+  --> $DIR/cross-return-site-inference.rs:37:16\n+   |\n+LL |     return Err(From::from(\"foo\"));\n+   |                ^^^^^^^^^^ the trait `From<&str>` is not implemented for `impl Debug`\n+\n+error[E0277]: the trait bound `impl Debug: From<&str>` is not satisfied\n+  --> $DIR/cross-return-site-inference.rs:42:9\n+   |\n+LL |     Err(From::from(\"foo\"))\n+   |         ^^^^^^^^^^ the trait `From<&str>` is not implemented for `impl Debug`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "211f7972dbca890e17e5af268e44acce89defd36", "filename": "src/test/ui/impl-trait/divergence.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fimpl-trait%2Fdivergence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fimpl-trait%2Fdivergence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fdivergence.rs?ref=86e1860495403ee0154608e51fe4b4d81203e15f", "patch": "@@ -0,0 +1,13 @@\n+// check-pass\n+\n+fn foo() -> impl MyTrait {\n+    panic!();\n+    MyStruct\n+}\n+\n+struct MyStruct;\n+trait MyTrait {}\n+\n+impl MyTrait for MyStruct {}\n+\n+fn main() {}"}, {"sha": "804ccbcc6c0ab3ef35073d41826aa76dd16c9670", "filename": "src/test/ui/impl-trait/equality.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr?ref=86e1860495403ee0154608e51fe4b4d81203e15f", "patch": "@@ -12,13 +12,10 @@ error[E0308]: mismatched types\n   --> $DIR/equality.rs:15:5\n    |\n LL | fn two(x: bool) -> impl Foo {\n-   |                    -------- the expected opaque type\n+   |                    -------- expected `_` because of return type\n ...\n LL |     0_u32\n    |     ^^^^^ expected `i32`, found `u32`\n-   |\n-   = note: expected opaque type `impl Foo`\n-                     found type `u32`\n \n error[E0277]: cannot add `impl Foo` to `u32`\n   --> $DIR/equality.rs:24:11"}, {"sha": "9cbe33aef5bb943f2afc7776975d01a31b7f1edc", "filename": "src/test/ui/impl-trait/issues/issue-70877.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.rs?ref=86e1860495403ee0154608e51fe4b4d81203e15f", "patch": "@@ -28,7 +28,7 @@ fn ham() -> Foo {\n fn oof() -> impl std::fmt::Debug {\n     let mut bar = ham();\n     let func = bar.next().unwrap();\n-    return func(&\"oof\"); //~ ERROR opaque type's hidden type cannot be another opaque type\n+    return func(&\"oof\"); //~^^^ ERROR opaque type's hidden type cannot be another opaque type\n }\n \n fn main() {"}, {"sha": "2610a19818621ae121a3a2d9fff2e046784faa1f", "filename": "src/test/ui/impl-trait/issues/issue-70877.stderr", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.stderr?ref=86e1860495403ee0154608e51fe4b4d81203e15f", "patch": "@@ -13,10 +13,15 @@ LL |         Some(Box::new(quux))\n               found enum `Option<Box<for<'r> fn(&'r (dyn ToString + 'r)) -> FooRet {quux}>>`\n \n error: opaque type's hidden type cannot be another opaque type from the same scope\n-  --> $DIR/issue-70877.rs:31:12\n+  --> $DIR/issue-70877.rs:28:34\n    |\n-LL |     return func(&\"oof\");\n-   |            ^^^^^^^^^^^^ one of the two opaque types used here has to be outside its defining scope\n+LL |   fn oof() -> impl std::fmt::Debug {\n+   |  __________________________________^\n+LL | |     let mut bar = ham();\n+LL | |     let func = bar.next().unwrap();\n+LL | |     return func(&\"oof\");\n+LL | | }\n+   | |_^ one of the two opaque types used here has to be outside its defining scope\n    |\n note: opaque type whose hidden type is being assigned\n   --> $DIR/issue-70877.rs:28:13"}, {"sha": "af26a1f54c46d5e498a6786f4f05565acc754471", "filename": "src/test/ui/impl-trait/issues/issue-88236-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-88236-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-88236-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-88236-2.rs?ref=86e1860495403ee0154608e51fe4b4d81203e15f", "patch": "@@ -14,10 +14,10 @@ impl<'a> Hrtb<'a> for &'a () {\n \n fn make_impl() -> impl for<'a> Hrtb<'a, Assoc = impl Send + 'a> {}\n fn make_weird_impl<'b>(x: &'b ()) -> impl for<'a> Hrtb<'a, Assoc = impl Send + 'a> {\n-    &() //~ ERROR implementation of `Hrtb` is not general enough\n+    &() //~^ ERROR implementation of `Hrtb` is not general enough\n }\n fn make_bad_impl<'b>(x: &'b ()) -> impl for<'a> Hrtb<'a, Assoc = impl Send + 'a> {\n-    x //~ ERROR implementation of `Hrtb` is not general enough\n+    x //~^ ERROR implementation of `Hrtb` is not general enough\n }\n \n fn main() {}"}, {"sha": "45fadcab3f2e15ca61c5292446699bba9b793260", "filename": "src/test/ui/impl-trait/issues/issue-88236-2.stderr", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-88236-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-88236-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-88236-2.stderr?ref=86e1860495403ee0154608e51fe4b4d81203e15f", "patch": "@@ -1,17 +1,20 @@\n error: implementation of `Hrtb` is not general enough\n-  --> $DIR/issue-88236-2.rs:17:5\n+  --> $DIR/issue-88236-2.rs:16:38\n    |\n-LL |     &()\n-   |     ^^^ implementation of `Hrtb` is not general enough\n+LL | fn make_weird_impl<'b>(x: &'b ()) -> impl for<'a> Hrtb<'a, Assoc = impl Send + 'a> {\n+   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Hrtb` is not general enough\n    |\n    = note: `Hrtb<'0>` would have to be implemented for the type `&()`, for any lifetime `'0`...\n    = note: ...but `Hrtb<'1>` is actually implemented for the type `&'1 ()`, for some specific lifetime `'1`\n \n error: implementation of `Hrtb` is not general enough\n-  --> $DIR/issue-88236-2.rs:20:5\n+  --> $DIR/issue-88236-2.rs:19:82\n    |\n-LL |     x\n-   |     ^ implementation of `Hrtb` is not general enough\n+LL |   fn make_bad_impl<'b>(x: &'b ()) -> impl for<'a> Hrtb<'a, Assoc = impl Send + 'a> {\n+   |  __________________________________________________________________________________^\n+LL | |     x\n+LL | | }\n+   | |_^ implementation of `Hrtb` is not general enough\n    |\n    = note: `&()` must implement `Hrtb<'0>`, for any lifetime `'0`...\n    = note: ...but `Hrtb<'_>` is actually implemented for the type `&()`"}, {"sha": "9589b69491e251c19138f26223031e35b32eb66c", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr?ref=86e1860495403ee0154608e51fe4b4d81203e15f", "patch": "@@ -80,7 +80,7 @@ LL | fn move_lifetime_into_fn<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Fn(&'a u32\n    |                                                                              ++++\n \n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/must_outlive_least_region_or_bound.rs:39:5\n+  --> $DIR/must_outlive_least_region_or_bound.rs:41:5\n    |\n LL |     x\n    |     ^"}, {"sha": "baa42da64468d51e991df9dff9b649f339e35e17", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.rs?ref=86e1860495403ee0154608e51fe4b4d81203e15f", "patch": "@@ -36,8 +36,9 @@ fn move_lifetime_into_fn<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Fn(&'a u32) {\n }\n \n fn ty_param_wont_outlive_static<T:Debug>(x: T) -> impl Debug + 'static {\n-    x\n     //~^ ERROR the parameter type `T` may not live long enough\n+    //~| ERROR the parameter type `T` may not live long enough\n+    x\n }\n \n fn main() {}"}, {"sha": "1272adb35e98c3fb1e7d927a7166e29cdd6f15dc", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.stderr", "status": "modified", "additions": 38, "deletions": 10, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr?ref=86e1860495403ee0154608e51fe4b4d81203e15f", "patch": "@@ -28,10 +28,15 @@ error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'sta\n   --> $DIR/must_outlive_least_region_or_bound.rs:9:46\n    |\n LL | fn elided2(x: &i32) -> impl Copy + 'static { x }\n-   |               ----                           ^ ...is used and required to live as long as `'static` here\n+   |               ----                           ^ ...is used here...\n    |               |\n    |               this data with an anonymous lifetime `'_`...\n    |\n+note: ...and is required to live as long as `'static` here\n+  --> $DIR/must_outlive_least_region_or_bound.rs:9:24\n+   |\n+LL | fn elided2(x: &i32) -> impl Copy + 'static { x }\n+   |                        ^^^^^^^^^^^^^^^^^^^\n help: consider changing the `impl Trait`'s explicit `'static` bound to the lifetime of argument `x`\n    |\n LL | fn elided2(x: &i32) -> impl Copy + '_ { x }\n@@ -45,10 +50,15 @@ error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime\n   --> $DIR/must_outlive_least_region_or_bound.rs:11:55\n    |\n LL | fn explicit2<'a>(x: &'a i32) -> impl Copy + 'static { x }\n-   |                     -------                           ^ ...is used and required to live as long as `'static` here\n+   |                     -------                           ^ ...is used here...\n    |                     |\n    |                     this data with lifetime `'a`...\n    |\n+note: ...and is required to live as long as `'static` here\n+  --> $DIR/must_outlive_least_region_or_bound.rs:11:33\n+   |\n+LL | fn explicit2<'a>(x: &'a i32) -> impl Copy + 'static { x }\n+   |                                 ^^^^^^^^^^^^^^^^^^^\n help: consider changing the `impl Trait`'s explicit `'static` bound to the lifetime of argument `x`\n    |\n LL | fn explicit2<'a>(x: &'a i32) -> impl Copy + 'a { x }\n@@ -59,10 +69,10 @@ LL | fn explicit2<'a>(x: &'static i32) -> impl Copy + 'static { x }\n    |                     ~~~~~~~~~~~~\n \n error[E0621]: explicit lifetime required in the type of `x`\n-  --> $DIR/must_outlive_least_region_or_bound.rs:13:41\n+  --> $DIR/must_outlive_least_region_or_bound.rs:13:24\n    |\n LL | fn foo<'a>(x: &i32) -> impl Copy + 'a { x }\n-   |               ----                      ^ lifetime `'a` required\n+   |               ----     ^^^^^^^^^^^^^^ lifetime `'a` required\n    |               |\n    |               help: add explicit lifetime `'a` to the type of `x`: `&'a i32`\n \n@@ -85,8 +95,13 @@ error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime\n   --> $DIR/must_outlive_least_region_or_bound.rs:29:69\n    |\n LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x }\n-   |                      ------- this data with lifetime `'a`...        ^ ...is used and required to live as long as `'static` here\n+   |                      ------- this data with lifetime `'a`...        ^ ...is used here...\n    |\n+note: ...and is required to live as long as `'static` here\n+  --> $DIR/must_outlive_least_region_or_bound.rs:29:34\n+   |\n+LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x }\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: consider changing the `impl Trait`'s explicit `'static` bound to the lifetime of argument `x`\n    |\n LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'a { x }\n@@ -110,12 +125,25 @@ LL | fn move_lifetime_into_fn<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Fn(&'a u32\n    |                                                                              ++++\n \n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/must_outlive_least_region_or_bound.rs:39:5\n+  --> $DIR/must_outlive_least_region_or_bound.rs:38:51\n    |\n LL | fn ty_param_wont_outlive_static<T:Debug>(x: T) -> impl Debug + 'static {\n-   |                                 -- help: consider adding an explicit lifetime bound...: `T: 'static +`\n-LL |     x\n-   |     ^ ...so that the type `T` will meet its required lifetime bounds\n+   |                                 --                ^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n+   |                                 |\n+   |                                 help: consider adding an explicit lifetime bound...: `T: 'static +`\n+\n+error[E0310]: the parameter type `T` may not live long enough\n+  --> $DIR/must_outlive_least_region_or_bound.rs:38:72\n+   |\n+LL |   fn ty_param_wont_outlive_static<T:Debug>(x: T) -> impl Debug + 'static {\n+   |  _________________________________--_____________________________________^\n+   | |                                 |\n+   | |                                 help: consider adding an explicit lifetime bound...: `T: 'static +`\n+LL | |\n+LL | |\n+LL | |     x\n+LL | | }\n+   | |_^ ...so that the type `T` will meet its required lifetime bounds\n \n error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n   --> $DIR/must_outlive_least_region_or_bound.rs:16:50\n@@ -203,7 +231,7 @@ help: alternatively, add an explicit `'static` bound to this reference\n LL | fn explicit4<'a>(x: &'static i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n    |                     ~~~~~~~~~~~~\n \n-error: aborting due to 13 previous errors\n+error: aborting due to 14 previous errors\n \n Some errors have detailed explanations: E0310, E0621, E0700, E0759.\n For more information about an error, try `rustc --explain E0310`."}, {"sha": "26b48c7cdf7181615bb876899d3825ee3a016ce4", "filename": "src/test/ui/impl-trait/nested_impl_trait.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fimpl-trait%2Fnested_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fimpl-trait%2Fnested_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested_impl_trait.stderr?ref=86e1860495403ee0154608e51fe4b4d81203e15f", "patch": "@@ -47,18 +47,18 @@ LL | fn allowed_in_ret_type() -> impl Fn() -> impl Into<u32> {\n    |                                          ^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `impl Debug: From<impl Into<u32>>` is not satisfied\n-  --> $DIR/nested_impl_trait.rs:5:70\n+  --> $DIR/nested_impl_trait.rs:5:46\n    |\n LL | fn bad_in_ret_position(x: impl Into<u32>) -> impl Into<impl Debug> { x }\n-   |                                                                      ^ the trait `From<impl Into<u32>>` is not implemented for `impl Debug`\n+   |                                              ^^^^^^^^^^^^^^^^^^^^^ the trait `From<impl Into<u32>>` is not implemented for `impl Debug`\n    |\n    = note: required because of the requirements on the impl of `Into<impl Debug>` for `impl Into<u32>`\n \n error[E0277]: the trait bound `impl Debug: From<impl Into<u32>>` is not satisfied\n-  --> $DIR/nested_impl_trait.rs:18:58\n+  --> $DIR/nested_impl_trait.rs:18:34\n    |\n LL |     fn bad(x: impl Into<u32>) -> impl Into<impl Debug> { x }\n-   |                                                          ^ the trait `From<impl Into<u32>>` is not implemented for `impl Debug`\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^ the trait `From<impl Into<u32>>` is not implemented for `impl Debug`\n    |\n    = note: required because of the requirements on the impl of `Into<impl Debug>` for `impl Into<u32>`\n "}, {"sha": "5ca01a593761cd54eb835bfb7d3df6f87d0810b6", "filename": "src/test/ui/impl-trait/object-unsafe-trait-in-return-position-impl-trait.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fimpl-trait%2Fobject-unsafe-trait-in-return-position-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fimpl-trait%2Fobject-unsafe-trait-in-return-position-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fobject-unsafe-trait-in-return-position-impl-trait.stderr?ref=86e1860495403ee0154608e51fe4b4d81203e15f", "patch": "@@ -2,25 +2,19 @@ error[E0308]: mismatched types\n   --> $DIR/object-unsafe-trait-in-return-position-impl-trait.rs:36:5\n    |\n LL | fn can() -> impl NotObjectSafe {\n-   |             ------------------ the expected opaque type\n+   |             ------------------ expected `_` because of return type\n ...\n LL |     B\n    |     ^ expected struct `A`, found struct `B`\n-   |\n-   = note: expected opaque type `impl NotObjectSafe`\n-                   found struct `B`\n \n error[E0308]: mismatched types\n   --> $DIR/object-unsafe-trait-in-return-position-impl-trait.rs:43:5\n    |\n LL | fn cat() -> impl ObjectSafe {\n-   |             --------------- the expected opaque type\n+   |             --------------- expected `_` because of return type\n ...\n LL |     B\n    |     ^ expected struct `A`, found struct `B`\n-   |\n-   = note: expected opaque type `impl ObjectSafe`\n-                   found struct `B`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "fa7664a83eee073f7588794011a8f5f73f336117", "filename": "src/test/ui/impl-trait/point-to-type-err-cause-on-impl-trait-return.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fimpl-trait%2Fpoint-to-type-err-cause-on-impl-trait-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fimpl-trait%2Fpoint-to-type-err-cause-on-impl-trait-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fpoint-to-type-err-cause-on-impl-trait-return.rs?ref=86e1860495403ee0154608e51fe4b4d81203e15f", "patch": "@@ -14,10 +14,10 @@ fn bar() -> impl std::fmt::Display {\n }\n \n fn baz() -> impl std::fmt::Display {\n-    if false { //~ ERROR mismatched types\n+    if false {\n         return 0i32;\n     } else {\n-        1u32\n+        1u32 //~ ERROR mismatched types\n     }\n }\n \n@@ -30,9 +30,9 @@ fn qux() -> impl std::fmt::Display {\n }\n \n fn bat() -> impl std::fmt::Display {\n-    match 13 { //~ ERROR mismatched types\n+    match 13 {\n         0 => return 0i32,\n-        _ => 1u32,\n+        _ => 1u32, //~ ERROR mismatched types\n     }\n }\n \n@@ -45,12 +45,12 @@ fn can() -> impl std::fmt::Display {\n }\n \n fn cat() -> impl std::fmt::Display {\n-    match 13 { //~ ERROR mismatched types\n+    match 13 {\n         0 => {\n             return 0i32;\n         }\n         _ => {\n-            1u32\n+            1u32 //~ ERROR mismatched types\n         }\n     }\n }"}, {"sha": "0c595f441ba8e2d0d43cd2ddf47586ba49b72145", "filename": "src/test/ui/impl-trait/point-to-type-err-cause-on-impl-trait-return.stderr", "status": "modified", "additions": 21, "deletions": 60, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fimpl-trait%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fimpl-trait%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr?ref=86e1860495403ee0154608e51fe4b4d81203e15f", "patch": "@@ -2,40 +2,28 @@ error[E0308]: mismatched types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:5:5\n    |\n LL | fn foo() -> impl std::fmt::Display {\n-   |             ---------------------- the expected opaque type\n+   |             ---------------------- expected `_` because of return type\n ...\n LL |     1u32\n    |     ^^^^ expected `i32`, found `u32`\n-   |\n-   = note: expected opaque type `impl std::fmt::Display`\n-                     found type `u32`\n \n error[E0308]: mismatched types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:12:16\n    |\n LL | fn bar() -> impl std::fmt::Display {\n-   |             ---------------------- the expected opaque type\n+   |             ---------------------- expected `_` because of return type\n ...\n LL |         return 1u32;\n    |                ^^^^ expected `i32`, found `u32`\n-   |\n-   = note: expected opaque type `impl std::fmt::Display`\n-                     found type `u32`\n \n error[E0308]: mismatched types\n-  --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:17:5\n-   |\n-LL |   fn baz() -> impl std::fmt::Display {\n-   |               ---------------------- the expected opaque type\n-LL | /     if false {\n-LL | |         return 0i32;\n-LL | |     } else {\n-LL | |         1u32\n-LL | |     }\n-   | |_____^ expected `i32`, found `u32`\n+  --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:20:9\n    |\n-   = note: expected opaque type `impl std::fmt::Display`\n-                     found type `u32`\n+LL | fn baz() -> impl std::fmt::Display {\n+   |             ---------------------- expected `_` because of return type\n+...\n+LL |         1u32\n+   |         ^^^^ expected `i32`, found `u32`\n \n error[E0308]: `if` and `else` have incompatible types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:28:9\n@@ -48,63 +36,36 @@ LL | |         1u32\n    | |         ^^^^ expected `i32`, found `u32`\n LL | |     }\n    | |_____- `if` and `else` have incompatible types\n-   |\n-help: you could change the return type to be a boxed trait object\n-   |\n-LL | fn qux() -> Box<dyn std::fmt::Display> {\n-   |             ~~~~~~~                  +\n-help: if you change the return type to expect trait objects, box the returned expressions\n-   |\n-LL ~         Box::new(0i32)\n-LL |     } else {\n-LL ~         Box::new(1u32)\n-   |\n \n error[E0308]: mismatched types\n-  --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:33:5\n-   |\n-LL |   fn bat() -> impl std::fmt::Display {\n-   |               ---------------------- the expected opaque type\n-LL | /     match 13 {\n-LL | |         0 => return 0i32,\n-LL | |         _ => 1u32,\n-LL | |     }\n-   | |_____^ expected `i32`, found `u32`\n+  --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:35:14\n    |\n-   = note: expected opaque type `impl std::fmt::Display`\n-                     found type `u32`\n+LL | fn bat() -> impl std::fmt::Display {\n+   |             ---------------------- expected `_` because of return type\n+...\n+LL |         _ => 1u32,\n+   |              ^^^^ expected `i32`, found `u32`\n \n error[E0308]: mismatched types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:40:5\n    |\n LL |   fn can() -> impl std::fmt::Display {\n-   |               ---------------------- the expected opaque type\n+   |               ---------------------- expected `_` because of return type\n LL | /     match 13 {\n LL | |         0 => return 0i32,\n LL | |         1 => 1u32,\n LL | |         _ => 2u32,\n LL | |     }\n    | |_____^ expected `i32`, found `u32`\n-   |\n-   = note: expected opaque type `impl std::fmt::Display`\n-                     found type `u32`\n \n error[E0308]: mismatched types\n-  --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:48:5\n+  --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:53:13\n    |\n-LL |   fn cat() -> impl std::fmt::Display {\n-   |               ---------------------- the expected opaque type\n-LL | /     match 13 {\n-LL | |         0 => {\n-LL | |             return 0i32;\n-LL | |         }\n-...  |\n-LL | |         }\n-LL | |     }\n-   | |_____^ expected `i32`, found `u32`\n-   |\n-   = note: expected opaque type `impl std::fmt::Display`\n-                     found type `u32`\n+LL | fn cat() -> impl std::fmt::Display {\n+   |             ---------------------- expected `_` because of return type\n+...\n+LL |             1u32\n+   |             ^^^^ expected `i32`, found `u32`\n \n error[E0308]: `match` arms have incompatible types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:61:14"}, {"sha": "b4fd6b3e74364d45c81e926c63f4f09213202236", "filename": "src/test/ui/impl-trait/projection-mismatch-in-impl-where-clause.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fimpl-trait%2Fprojection-mismatch-in-impl-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fimpl-trait%2Fprojection-mismatch-in-impl-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fprojection-mismatch-in-impl-where-clause.rs?ref=86e1860495403ee0154608e51fe4b4d81203e15f", "patch": "@@ -11,8 +11,8 @@ pub trait Test {}\n impl<T> Test for T where T: Super<Assoc = ()> {}\n \n fn test() -> impl Test {\n-    ()\n     //~^ERROR type mismatch resolving `<() as Super>::Assoc == ()`\n+    ()\n }\n \n fn main() {"}, {"sha": "ade0dfa1bb3b3e347d0161aa271a8683586728b2", "filename": "src/test/ui/impl-trait/projection-mismatch-in-impl-where-clause.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fimpl-trait%2Fprojection-mismatch-in-impl-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fimpl-trait%2Fprojection-mismatch-in-impl-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fprojection-mismatch-in-impl-where-clause.stderr?ref=86e1860495403ee0154608e51fe4b4d81203e15f", "patch": "@@ -1,8 +1,8 @@\n error[E0271]: type mismatch resolving `<() as Super>::Assoc == ()`\n-  --> $DIR/projection-mismatch-in-impl-where-clause.rs:14:5\n+  --> $DIR/projection-mismatch-in-impl-where-clause.rs:13:14\n    |\n-LL |     ()\n-   |     ^^ type mismatch resolving `<() as Super>::Assoc == ()`\n+LL | fn test() -> impl Test {\n+   |              ^^^^^^^^^ type mismatch resolving `<() as Super>::Assoc == ()`\n    |\n note: expected this to be `u8`\n   --> $DIR/projection-mismatch-in-impl-where-clause.rs:6:18"}, {"sha": "495bf5c1d64f24413ee84f774234db04f2da2826", "filename": "src/test/ui/impl-trait/question_mark.rs", "status": "modified", "additions": 24, "deletions": 7, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fimpl-trait%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fimpl-trait%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fquestion_mark.rs?ref=86e1860495403ee0154608e51fe4b4d81203e15f", "patch": "@@ -1,13 +1,30 @@\n // check-pass\n \n-fn foo() -> impl MyTrait {\n-    panic!();\n-    MyStruct\n+use std::fmt::Debug;\n+\n+#[derive(Debug)]\n+pub struct Target;\n+\n+#[derive(Debug)]\n+pub struct Source;\n+impl From<Source> for Target {\n+    fn from(_: Source) -> Self {\n+        Self\n+    }\n+}\n+\n+fn maybe_source() -> Result<(), Source> {\n+    todo!()\n }\n \n-struct MyStruct;\n-trait MyTrait {}\n+pub fn typaram() -> Result<(), impl Debug> {\n+    maybe_source()?;\n+    Ok::<_, Target>(())\n+}\n \n-impl MyTrait for MyStruct {}\n+pub fn direct() -> Result<(), impl Debug> {\n+    maybe_source()?;\n+    Err(Target)\n+}\n \n-fn main() {}\n+fn main() {}\n\\ No newline at end of file"}, {"sha": "b1175a5952e592a7a575da8413050c2e18f3d29f", "filename": "src/test/ui/impl-trait/type_parameters_captured.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.nll.stderr?ref=86e1860495403ee0154608e51fe4b4d81203e15f", "patch": "@@ -1,5 +1,5 @@\n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/type_parameters_captured.rs:8:5\n+  --> $DIR/type_parameters_captured.rs:10:5\n    |\n LL |     x\n    |     ^"}, {"sha": "bb9cab742a58f81bac9e25365b9a17b1e9058749", "filename": "src/test/ui/impl-trait/type_parameters_captured.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.rs?ref=86e1860495403ee0154608e51fe4b4d81203e15f", "patch": "@@ -5,8 +5,9 @@ impl<T> Any for T {}\n \n // Check that type parameters are captured and not considered 'static\n fn foo<T>(x: T) -> impl Any + 'static {\n-    x\n     //~^ ERROR the parameter type `T` may not live long enough\n+    //~| ERROR the parameter type `T` may not live long enough\n+    x\n }\n \n fn main() {}"}, {"sha": "c4ca34a6ed39b132148980921ab41588227d0df8", "filename": "src/test/ui/impl-trait/type_parameters_captured.stderr", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.stderr?ref=86e1860495403ee0154608e51fe4b4d81203e15f", "patch": "@@ -1,11 +1,24 @@\n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/type_parameters_captured.rs:8:5\n+  --> $DIR/type_parameters_captured.rs:7:20\n    |\n LL | fn foo<T>(x: T) -> impl Any + 'static {\n-   |        - help: consider adding an explicit lifetime bound...: `T: 'static`\n-LL |     x\n-   |     ^ ...so that the type `T` will meet its required lifetime bounds\n+   |        -           ^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n+   |        |\n+   |        help: consider adding an explicit lifetime bound...: `T: 'static`\n \n-error: aborting due to previous error\n+error[E0310]: the parameter type `T` may not live long enough\n+  --> $DIR/type_parameters_captured.rs:7:39\n+   |\n+LL |   fn foo<T>(x: T) -> impl Any + 'static {\n+   |  ________-______________________________^\n+   | |        |\n+   | |        help: consider adding an explicit lifetime bound...: `T: 'static`\n+LL | |\n+LL | |\n+LL | |     x\n+LL | | }\n+   | |_^ ...so that the type `T` will meet its required lifetime bounds\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0310`."}, {"sha": "14b6c0f35812f8a3e0f67f85650ebccdaa866116", "filename": "src/test/ui/issues-71798.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fissues-71798.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fissues-71798.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues-71798.rs?ref=86e1860495403ee0154608e51fe4b4d81203e15f", "patch": "@@ -1,6 +1,6 @@\n fn test_ref(x: &u32) -> impl std::future::Future<Output = u32> + '_ {\n-    *x\n     //~^ ERROR `u32` is not a future\n+    *x\n }\n \n fn main() {"}, {"sha": "ab72c3e41af97b80c72488c6b7d253fc77847261", "filename": "src/test/ui/issues-71798.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fissues-71798.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fissues-71798.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues-71798.stderr?ref=86e1860495403ee0154608e51fe4b4d81203e15f", "patch": "@@ -5,10 +5,10 @@ LL |     let _ = test_ref & u;\n    |                        ^ not found in this scope\n \n error[E0277]: `u32` is not a future\n-  --> $DIR/issues-71798.rs:2:5\n+  --> $DIR/issues-71798.rs:1:25\n    |\n-LL |     *x\n-   |     ^^ `u32` is not a future\n+LL | fn test_ref(x: &u32) -> impl std::future::Future<Output = u32> + '_ {\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `u32` is not a future\n    |\n    = help: the trait `Future` is not implemented for `u32`\n    = note: u32 must be a future or must implement `IntoFuture` to be awaited"}, {"sha": "fa13bf0b12719050bb268f8014248e718bc62c1d", "filename": "src/test/ui/lang-items/lang-item-missing-generator.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Flang-items%2Flang-item-missing-generator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Flang-items%2Flang-item-missing-generator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flang-items%2Flang-item-missing-generator.stderr?ref=86e1860495403ee0154608e51fe4b4d81203e15f", "patch": "@@ -1,8 +1,8 @@\n error: requires `generator` lang_item\n-  --> $DIR/lang-item-missing-generator.rs:15:22\n+  --> $DIR/lang-item-missing-generator.rs:15:17\n    |\n LL | pub fn abc() -> impl FnOnce(f32) {\n-   |                      ^^^^^^^^^^^\n+   |                 ^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "133679f30f8fb4435a1177c8a1346f311191dc2f", "filename": "src/test/ui/lifetimes/lifetime-elision-return-type-trait.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-trait.rs?ref=86e1860495403ee0154608e51fe4b4d81203e15f", "patch": "@@ -6,8 +6,9 @@ trait Future {\n use std::error::Error;\n \n fn foo() -> impl Future<Item=(), Error=Box<dyn Error>> {\n-    Ok(())\n     //~^ ERROR not satisfied\n+    //~| ERROR not satisfied\n+    Ok(())\n }\n \n fn main() {}"}, {"sha": "a3badd7b25add4ab77032aa9862000749917d917", "filename": "src/test/ui/lifetimes/lifetime-elision-return-type-trait.stderr", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-trait.stderr?ref=86e1860495403ee0154608e51fe4b4d81203e15f", "patch": "@@ -1,9 +1,20 @@\n error[E0277]: the trait bound `Result<(), _>: Future` is not satisfied\n-  --> $DIR/lifetime-elision-return-type-trait.rs:9:5\n+  --> $DIR/lifetime-elision-return-type-trait.rs:8:13\n    |\n-LL |     Ok(())\n-   |     ^^^^^^ the trait `Future` is not implemented for `Result<(), _>`\n+LL | fn foo() -> impl Future<Item=(), Error=Box<dyn Error>> {\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Future` is not implemented for `Result<(), _>`\n \n-error: aborting due to previous error\n+error[E0277]: the trait bound `Result<(), _>: Future` is not satisfied\n+  --> $DIR/lifetime-elision-return-type-trait.rs:8:56\n+   |\n+LL |   fn foo() -> impl Future<Item=(), Error=Box<dyn Error>> {\n+   |  ________________________________________________________^\n+LL | |\n+LL | |\n+LL | |     Ok(())\n+LL | | }\n+   | |_^ the trait `Future` is not implemented for `Result<(), _>`\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "cad7d76c6ab5fd5a156ae81626ed2f86911a8842", "filename": "src/test/ui/suggestions/impl-trait-return-trailing-semicolon.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-return-trailing-semicolon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-return-trailing-semicolon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-return-trailing-semicolon.rs?ref=86e1860495403ee0154608e51fe4b4d81203e15f", "patch": "@@ -2,6 +2,7 @@ trait Bar {}\n impl Bar for u8 {}\n fn foo() -> impl Bar {\n     5; //~^ ERROR the trait bound `(): Bar` is not satisfied\n+    //~| ERROR the trait bound `(): Bar` is not satisfied\n }\n \n fn main() {}"}, {"sha": "ba6967e78e16347c09a9d02f0ed4e44d1789208d", "filename": "src/test/ui/suggestions/impl-trait-return-trailing-semicolon.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-return-trailing-semicolon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-return-trailing-semicolon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-return-trailing-semicolon.stderr?ref=86e1860495403ee0154608e51fe4b4d81203e15f", "patch": "@@ -1,12 +1,21 @@\n+error[E0277]: the trait bound `(): Bar` is not satisfied\n+  --> $DIR/impl-trait-return-trailing-semicolon.rs:3:13\n+   |\n+LL | fn foo() -> impl Bar {\n+   |             ^^^^^^^^ the trait `Bar` is not implemented for `()`\n+LL |     5;\n+   |      - consider removing this semicolon\n+\n error[E0277]: the trait bound `(): Bar` is not satisfied\n   --> $DIR/impl-trait-return-trailing-semicolon.rs:3:22\n    |\n LL |   fn foo() -> impl Bar {\n    |  ______________________^\n LL | |     5;\n+LL | |\n LL | | }\n    | |_^ the trait `Bar` is not implemented for `()`\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "7ca7380a7befdd7ed1d3928a81f0548a3de06365", "filename": "src/test/ui/suggestions/issue-81098.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fsuggestions%2Fissue-81098.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fsuggestions%2Fissue-81098.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-81098.rs?ref=86e1860495403ee0154608e51fe4b4d81203e15f", "patch": "@@ -1,12 +1,14 @@\n // Don't suggest removing a semicolon if the last statement isn't an expression with semicolon\n // (#81098)\n fn wat() -> impl core::fmt::Display { //~ ERROR: `()` doesn't implement `std::fmt::Display`\n+    //~^ ERROR: `()` doesn't implement `std::fmt::Display`\n     fn why() {}\n }\n \n // Do it if the last statement is an expression with semicolon\n // (#54771)\n fn ok() -> impl core::fmt::Display { //~ ERROR: `()` doesn't implement `std::fmt::Display`\n+    //~^ ERROR: `()` doesn't implement `std::fmt::Display`\n     1;\n }\n "}, {"sha": "d62526442e9af2ccd1ec177cacb48d64b4401219", "filename": "src/test/ui/suggestions/issue-81098.stderr", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fsuggestions%2Fissue-81098.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fsuggestions%2Fissue-81098.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-81098.stderr?ref=86e1860495403ee0154608e51fe4b4d81203e15f", "patch": "@@ -1,8 +1,18 @@\n+error[E0277]: `()` doesn't implement `std::fmt::Display`\n+  --> $DIR/issue-81098.rs:3:13\n+   |\n+LL | fn wat() -> impl core::fmt::Display {\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^ `()` cannot be formatted with the default formatter\n+   |\n+   = help: the trait `std::fmt::Display` is not implemented for `()`\n+   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n+\n error[E0277]: `()` doesn't implement `std::fmt::Display`\n   --> $DIR/issue-81098.rs:3:37\n    |\n LL |   fn wat() -> impl core::fmt::Display {\n    |  _____________________________________^\n+LL | |\n LL | |     fn why() {}\n LL | | }\n    | |_^ `()` cannot be formatted with the default formatter\n@@ -11,17 +21,30 @@ LL | | }\n    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n \n error[E0277]: `()` doesn't implement `std::fmt::Display`\n-  --> $DIR/issue-81098.rs:9:36\n+  --> $DIR/issue-81098.rs:10:12\n+   |\n+LL | fn ok() -> impl core::fmt::Display {\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^ `()` cannot be formatted with the default formatter\n+LL |\n+LL |     1;\n+   |      - consider removing this semicolon\n+   |\n+   = help: the trait `std::fmt::Display` is not implemented for `()`\n+   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n+\n+error[E0277]: `()` doesn't implement `std::fmt::Display`\n+  --> $DIR/issue-81098.rs:10:36\n    |\n LL |   fn ok() -> impl core::fmt::Display {\n    |  ____________________________________^\n+LL | |\n LL | |     1;\n LL | | }\n    | |_^ `()` cannot be formatted with the default formatter\n    |\n    = help: the trait `std::fmt::Display` is not implemented for `()`\n    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "a5b50634c71ea28103dbce76f4adef2b038b4a7f", "filename": "src/test/ui/suggestions/lifetimes/trait-object-nested-in-impl-trait.stderr", "status": "modified", "additions": 16, "deletions": 36, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Ftrait-object-nested-in-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Ftrait-object-nested-in-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Ftrait-object-nested-in-impl-trait.stderr?ref=86e1860495403ee0154608e51fe4b4d81203e15f", "patch": "@@ -7,18 +7,13 @@ LL |     fn iter(&self) -> impl Iterator<Item = Box<dyn Foo>> {\n LL |             remaining: self.0.iter(),\n    |                        ------ ^^^^\n    |                        |\n-   |                        ...is used and required to live as long as `'static` here\n+   |                        ...is used here...\n    |\n-note: `'static` lifetime requirement introduced by the return type\n+note: ...and is required to live as long as `'static` here\n   --> $DIR/trait-object-nested-in-impl-trait.rs:27:23\n    |\n-LL |       fn iter(&self) -> impl Iterator<Item = Box<dyn Foo>> {\n-   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ requirement introduced by this return type\n-LL | /         Iter {\n-LL | |             current: None,\n-LL | |             remaining: self.0.iter(),\n-LL | |         }\n-   | |_________- because of this returned expression\n+LL |     fn iter(&self) -> impl Iterator<Item = Box<dyn Foo>> {\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: to declare that the `impl Trait` captures data from argument `self`, you can add an explicit `'_` lifetime bound\n    |\n LL |     fn iter(&self) -> impl Iterator<Item = Box<dyn Foo>> + '_ {\n@@ -37,18 +32,13 @@ LL |     fn iter(&self) -> impl Iterator<Item = Box<dyn Foo>> + '_ {\n LL |             remaining: self.0.iter(),\n    |                        ------ ^^^^\n    |                        |\n-   |                        ...is used and required to live as long as `'static` here\n+   |                        ...is used here...\n    |\n-note: `'static` lifetime requirement introduced by the return type\n+note: ...and is required to live as long as `'static` here\n   --> $DIR/trait-object-nested-in-impl-trait.rs:38:23\n    |\n-LL |       fn iter(&self) -> impl Iterator<Item = Box<dyn Foo>> + '_ {\n-   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ requirement introduced by this return type\n-LL | /         Iter {\n-LL | |             current: None,\n-LL | |             remaining: self.0.iter(),\n-LL | |         }\n-   | |_________- because of this returned expression\n+LL |     fn iter(&self) -> impl Iterator<Item = Box<dyn Foo>> + '_ {\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: to declare that the trait object captures data from argument `self`, you can add an explicit `'_` lifetime bound\n    |\n LL |     fn iter(&self) -> impl Iterator<Item = Box<dyn Foo + '_>> + '_ {\n@@ -63,18 +53,13 @@ LL |     fn iter<'a>(&'a self) -> impl Iterator<Item = Box<dyn Foo>> + 'a {\n LL |             remaining: self.0.iter(),\n    |                        ------ ^^^^\n    |                        |\n-   |                        ...is used and required to live as long as `'static` here\n+   |                        ...is used here...\n    |\n-note: `'static` lifetime requirement introduced by the return type\n+note: ...and is required to live as long as `'static` here\n   --> $DIR/trait-object-nested-in-impl-trait.rs:49:30\n    |\n-LL |       fn iter<'a>(&'a self) -> impl Iterator<Item = Box<dyn Foo>> + 'a {\n-   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ requirement introduced by this return type\n-LL | /         Iter {\n-LL | |             current: None,\n-LL | |             remaining: self.0.iter(),\n-LL | |         }\n-   | |_________- because of this returned expression\n+LL |     fn iter<'a>(&'a self) -> impl Iterator<Item = Box<dyn Foo>> + 'a {\n+   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: to declare that the trait object captures data from argument `self`, you can add an explicit `'a` lifetime bound\n    |\n LL |     fn iter<'a>(&'a self) -> impl Iterator<Item = Box<dyn Foo + 'a>> + 'a {\n@@ -89,18 +74,13 @@ LL |     fn iter<'a>(&'a self) -> impl Iterator<Item = Box<dyn Foo>> {\n LL |             remaining: self.0.iter(),\n    |                        ------ ^^^^\n    |                        |\n-   |                        ...is used and required to live as long as `'static` here\n+   |                        ...is used here...\n    |\n-note: `'static` lifetime requirement introduced by the return type\n+note: ...and is required to live as long as `'static` here\n   --> $DIR/trait-object-nested-in-impl-trait.rs:60:30\n    |\n-LL |       fn iter<'a>(&'a self) -> impl Iterator<Item = Box<dyn Foo>> {\n-   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ requirement introduced by this return type\n-LL | /         Iter {\n-LL | |             current: None,\n-LL | |             remaining: self.0.iter(),\n-LL | |         }\n-   | |_________- because of this returned expression\n+LL |     fn iter<'a>(&'a self) -> impl Iterator<Item = Box<dyn Foo>> {\n+   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: to declare that the `impl Trait` captures data from argument `self`, you can add an explicit `'a` lifetime bound\n    |\n LL |     fn iter<'a>(&'a self) -> impl Iterator<Item = Box<dyn Foo>> + 'a {"}, {"sha": "314e5362a8f2c1182da25d4652fb7e17d7e38312", "filename": "src/test/ui/type-alias-impl-trait/nested-tait-inference.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference.rs?ref=86e1860495403ee0154608e51fe4b4d81203e15f", "patch": "@@ -10,9 +10,10 @@ trait Foo<A> { }\n impl Foo<()> for () { }\n \n fn foo() -> impl Foo<FooX> {\n+    //~^ ERROR: the trait bound `(): Foo<FooX>` is not satisfied\n+    //~| ERROR: the trait bound `(): Foo<FooX>` is not satisfied\n     // FIXME(type-alias-impl-trait): We could probably make this work.\n     ()\n-    //~^ ERROR: the trait bound `(): Foo<FooX>` is not satisfied\n }\n \n fn main() { }"}, {"sha": "eb72e88769100ef75b892826198699add7db34af", "filename": "src/test/ui/type-alias-impl-trait/nested-tait-inference.stderr", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference.stderr?ref=86e1860495403ee0154608e51fe4b4d81203e15f", "patch": "@@ -1,12 +1,27 @@\n error[E0277]: the trait bound `(): Foo<FooX>` is not satisfied\n-  --> $DIR/nested-tait-inference.rs:14:5\n+  --> $DIR/nested-tait-inference.rs:12:13\n    |\n-LL |     ()\n-   |     ^^ the trait `Foo<FooX>` is not implemented for `()`\n+LL | fn foo() -> impl Foo<FooX> {\n+   |             ^^^^^^^^^^^^^^ the trait `Foo<FooX>` is not implemented for `()`\n    |\n    = help: the following implementations were found:\n              <() as Foo<()>>\n \n-error: aborting due to previous error\n+error[E0277]: the trait bound `(): Foo<FooX>` is not satisfied\n+  --> $DIR/nested-tait-inference.rs:12:28\n+   |\n+LL |   fn foo() -> impl Foo<FooX> {\n+   |  ____________________________^\n+LL | |\n+LL | |\n+LL | |     // FIXME(type-alias-impl-trait): We could probably make this work.\n+LL | |     ()\n+LL | | }\n+   | |_^ the trait `Foo<FooX>` is not implemented for `()`\n+   |\n+   = help: the following implementations were found:\n+             <() as Foo<()>>\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "4dc30d9257bedcce07144604a146198d6fc49e78", "filename": "src/test/ui/type-alias-impl-trait/nested-tait-inference2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference2.rs?ref=86e1860495403ee0154608e51fe4b4d81203e15f", "patch": "@@ -11,8 +11,9 @@ impl Foo<()> for () {}\n impl Foo<u32> for () {}\n \n fn foo() -> impl Foo<FooX> {\n-    ()\n     //~^ ERROR: the trait bound `(): Foo<FooX>` is not satisfied\n+    //~| ERROR: the trait bound `(): Foo<FooX>` is not satisfied\n+    ()\n }\n \n fn main() {}"}, {"sha": "1372a018667c2b06d48698ca875e4610096199ce", "filename": "src/test/ui/type-alias-impl-trait/nested-tait-inference2.stderr", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86e1860495403ee0154608e51fe4b4d81203e15f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference2.stderr?ref=86e1860495403ee0154608e51fe4b4d81203e15f", "patch": "@@ -1,13 +1,28 @@\n error[E0277]: the trait bound `(): Foo<FooX>` is not satisfied\n-  --> $DIR/nested-tait-inference2.rs:14:5\n+  --> $DIR/nested-tait-inference2.rs:13:13\n    |\n-LL |     ()\n-   |     ^^ the trait `Foo<FooX>` is not implemented for `()`\n+LL | fn foo() -> impl Foo<FooX> {\n+   |             ^^^^^^^^^^^^^^ the trait `Foo<FooX>` is not implemented for `()`\n    |\n    = help: the following implementations were found:\n              <() as Foo<()>>\n              <() as Foo<u32>>\n \n-error: aborting due to previous error\n+error[E0277]: the trait bound `(): Foo<FooX>` is not satisfied\n+  --> $DIR/nested-tait-inference2.rs:13:28\n+   |\n+LL |   fn foo() -> impl Foo<FooX> {\n+   |  ____________________________^\n+LL | |\n+LL | |\n+LL | |     ()\n+LL | | }\n+   | |_^ the trait `Foo<FooX>` is not implemented for `()`\n+   |\n+   = help: the following implementations were found:\n+             <() as Foo<()>>\n+             <() as Foo<u32>>\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}]}