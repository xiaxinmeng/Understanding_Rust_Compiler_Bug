{"sha": "4593f40b291e34fa84011a6513e52b3a80863a50", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1OTNmNDBiMjkxZTM0ZmE4NDAxMWE2NTEzZTUyYjNhODA4NjNhNTA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-20T17:42:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-20T17:42:16Z"}, "message": "Rollup merge of #62497 - o01eg:fix-62496, r=alexcrichton\n\nFix double resolving custom libdir\n\nFixes #62496\n\nRelated issue is https://bugs.gentoo.org/672816", "tree": {"sha": "211c6bd9275a82a050ea729e59467b06e6530a62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/211c6bd9275a82a050ea729e59467b06e6530a62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4593f40b291e34fa84011a6513e52b3a80863a50", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdXDD5CRBK7hj4Ov3rIwAAdHIIAC6NY/CEN+CxXSaIVt4vu+IW\nJJWw66YD5tSKXBHbNbBYPGQTuBsb900BJ2dBSiwG84fsA6zbxK8dCR1uJziTP4ze\nVwSswJci9AntsolvDl2sQZ7I6do52id3vyspt5WvU2IZS8j0WtuobRgiA6z9+584\nEgiETcV/jIDEr3BV6nUkigooLB7nWH7i3JFzE7+fdDbm2pAX92WJelpri9WQLVeD\nkxxI4AFcXHB0BaAKCwHCX6JBsKUh5+s5q/FZjV6drMoaWSx+8wCNeAnZ/o6vqHt2\nAfOU0fu+gHIY/lx1nV4vrqoY59SkgJiiBat+ay/SJOpTEJZTi6ddrLvkRXFfT5I=\n=6xi6\n-----END PGP SIGNATURE-----\n", "payload": "tree 211c6bd9275a82a050ea729e59467b06e6530a62\nparent 51879c3abaedb926739095d19a2af638ee6a07d8\nparent 8553cc0681db7fb6b58b25bb3fbd520604a0cc3a\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1566322936 +0200\ncommitter GitHub <noreply@github.com> 1566322936 +0200\n\nRollup merge of #62497 - o01eg:fix-62496, r=alexcrichton\n\nFix double resolving custom libdir\n\nFixes #62496\n\nRelated issue is https://bugs.gentoo.org/672816\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4593f40b291e34fa84011a6513e52b3a80863a50", "html_url": "https://github.com/rust-lang/rust/commit/4593f40b291e34fa84011a6513e52b3a80863a50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4593f40b291e34fa84011a6513e52b3a80863a50/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51879c3abaedb926739095d19a2af638ee6a07d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/51879c3abaedb926739095d19a2af638ee6a07d8", "html_url": "https://github.com/rust-lang/rust/commit/51879c3abaedb926739095d19a2af638ee6a07d8"}, {"sha": "8553cc0681db7fb6b58b25bb3fbd520604a0cc3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8553cc0681db7fb6b58b25bb3fbd520604a0cc3a", "html_url": "https://github.com/rust-lang/rust/commit/8553cc0681db7fb6b58b25bb3fbd520604a0cc3a"}], "stats": {"total": 33, "additions": 22, "deletions": 11}, "files": [{"sha": "7448138c5d6699a646035a20aaa5e3fe953ed0d6", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4593f40b291e34fa84011a6513e52b3a80863a50/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4593f40b291e34fa84011a6513e52b3a80863a50/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=4593f40b291e34fa84011a6513e52b3a80863a50", "patch": "@@ -618,13 +618,7 @@ impl<'a> Builder<'a> {\n             }\n \n             fn run(self, builder: &Builder<'_>) -> Interned<PathBuf> {\n-                let compiler = self.compiler;\n-                let config = &builder.build.config;\n-                let lib = if compiler.stage >= 1 && config.libdir_relative().is_some() {\n-                    builder.build.config.libdir_relative().unwrap()\n-                } else {\n-                    Path::new(\"lib\")\n-                };\n+                let lib = builder.sysroot_libdir_relative(self.compiler);\n                 let sysroot = builder\n                     .sysroot(self.compiler)\n                     .join(lib)\n@@ -678,6 +672,18 @@ impl<'a> Builder<'a> {\n         }\n     }\n \n+    /// Returns the compiler's relative libdir where the standard library and other artifacts are\n+    /// found for a compiler's sysroot.\n+    ///\n+    /// For example this returns `lib` on Unix and Windows.\n+    pub fn sysroot_libdir_relative(&self, compiler: Compiler) -> &Path {\n+        match self.config.libdir_relative() {\n+            Some(relative_libdir) if compiler.stage >= 1\n+                => relative_libdir,\n+            _ => Path::new(\"lib\")\n+        }\n+    }\n+\n     /// Adds the compiler's directory of dynamic libraries to `cmd`'s dynamic\n     /// library lookup path.\n     pub fn add_rustc_lib_path(&self, compiler: Compiler, cmd: &mut Command) {"}, {"sha": "213ceb194a8142f3e2ad6b8c6a6f2158efe2b2c4", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4593f40b291e34fa84011a6513e52b3a80863a50/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4593f40b291e34fa84011a6513e52b3a80863a50/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=4593f40b291e34fa84011a6513e52b3a80863a50", "patch": "@@ -469,7 +469,6 @@ impl Step for Rustc {\n         fn prepare_image(builder: &Builder<'_>, compiler: Compiler, image: &Path) {\n             let host = compiler.host;\n             let src = builder.sysroot(compiler);\n-            let libdir = builder.rustc_libdir(compiler);\n \n             // Copy rustc/rustdoc binaries\n             t!(fs::create_dir_all(image.join(\"bin\")));\n@@ -481,20 +480,26 @@ impl Step for Rustc {\n \n             // Copy runtime DLLs needed by the compiler\n             if libdir_relative.to_str() != Some(\"bin\") {\n+                let libdir = builder.rustc_libdir(compiler);\n                 for entry in builder.read_dir(&libdir) {\n                     let name = entry.file_name();\n                     if let Some(s) = name.to_str() {\n                         if is_dylib(s) {\n-                            builder.install(&entry.path(), &image.join(&libdir_relative), 0o644);\n+                            // Don't use custom libdir here because ^lib/ will be resolved again\n+                            // with installer\n+                            builder.install(&entry.path(), &image.join(\"lib\"), 0o644);\n                         }\n                     }\n                 }\n             }\n \n             // Copy over the codegen backends\n             let backends_src = builder.sysroot_codegen_backends(compiler);\n-            let backends_rel = backends_src.strip_prefix(&src).unwrap();\n-            let backends_dst = image.join(&backends_rel);\n+            let backends_rel = backends_src.strip_prefix(&src).unwrap()\n+                .strip_prefix(builder.sysroot_libdir_relative(compiler)).unwrap();\n+            // Don't use custom libdir here because ^lib/ will be resolved again with installer\n+            let backends_dst = image.join(\"lib\").join(&backends_rel);\n+\n             t!(fs::create_dir_all(&backends_dst));\n             builder.cp_r(&backends_src, &backends_dst);\n "}]}