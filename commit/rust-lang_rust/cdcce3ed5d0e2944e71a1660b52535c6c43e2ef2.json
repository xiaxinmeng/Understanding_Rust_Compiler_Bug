{"sha": "cdcce3ed5d0e2944e71a1660b52535c6c43e2ef2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkY2NlM2VkNWQwZTI5NDRlNzFhMTY2MGI1MjUzNWM2YzQzZTJlZjI=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-05-18T05:15:07Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-05-18T05:15:07Z"}, "message": "Refactoring, annotating FIXMEs in remainder of metadata code", "tree": {"sha": "78f11bd0ebbc0da9dc6348396c0dd768fbe39680", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78f11bd0ebbc0da9dc6348396c0dd768fbe39680"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cdcce3ed5d0e2944e71a1660b52535c6c43e2ef2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cdcce3ed5d0e2944e71a1660b52535c6c43e2ef2", "html_url": "https://github.com/rust-lang/rust/commit/cdcce3ed5d0e2944e71a1660b52535c6c43e2ef2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cdcce3ed5d0e2944e71a1660b52535c6c43e2ef2/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c97b29afd1de3370cd895d6e4fe7d7ef1b5c286f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c97b29afd1de3370cd895d6e4fe7d7ef1b5c286f", "html_url": "https://github.com/rust-lang/rust/commit/c97b29afd1de3370cd895d6e4fe7d7ef1b5c286f"}], "stats": {"total": 88, "additions": 41, "deletions": 47}, "files": [{"sha": "72c8a2c6b07539dc5b80395335cfef1892754f73", "filename": "src/librustsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cdcce3ed5d0e2944e71a1660b52535c6c43e2ef2/src%2Flibrustsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdcce3ed5d0e2944e71a1660b52535c6c43e2ef2/src%2Flibrustsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fast.rs?ref=cdcce3ed5d0e2944e71a1660b52535c6c43e2ef2", "patch": "@@ -503,7 +503,7 @@ type constr_arg = spanned<fn_constr_arg>;\n \n #[auto_serialize]\n type constr_general_<ARG, ID> =\n-    {path: @path, args: [@spanned<constr_arg_general_<ARG>>], id: ID};\n+    {path: @path, args: [@sp_constr_arg<ARG>], id: ID};\n \n // In the front end, constraints have a node ID attached.\n // Typeck turns this to a def_id, using the output of resolve."}, {"sha": "8d0294efcc8baaf0c2bd415f647667f8f57b5d5a", "filename": "src/rustc/metadata/loader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cdcce3ed5d0e2944e71a1660b52535c6c43e2ef2/src%2Frustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdcce3ed5d0e2944e71a1660b52535c6c43e2ef2/src%2Frustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Floader.rs?ref=cdcce3ed5d0e2944e71a1660b52535c6c43e2ef2", "patch": "@@ -125,7 +125,7 @@ fn crate_name_from_metas(metas: [@ast::meta_item]) -> str {\n         alt attr::get_meta_item_value_str(i) {\n           some(n) { n }\n           // FIXME: Probably want a warning here since the user\n-          // is using the wrong type of meta item\n+          // is using the wrong type of meta item (#2406)\n           _ { fail }\n         }\n       }"}, {"sha": "d5b149d4e3631faeaaded2a0e16e259975237af1", "filename": "src/rustc/metadata/tydecode.rs", "status": "modified", "additions": 18, "deletions": 24, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/cdcce3ed5d0e2944e71a1660b52535c6c43e2ef2/src%2Frustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdcce3ed5d0e2944e71a1660b52535c6c43e2ef2/src%2Frustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Ftydecode.rs?ref=cdcce3ed5d0e2944e71a1660b52535c6c43e2ef2", "patch": "@@ -63,35 +63,29 @@ fn parse_ret_ty(st: @pstate, conv: conv_did) -> (ast::ret_style, ty::t) {\n     }\n }\n \n-fn parse_constrs(st: @pstate, conv: conv_did) -> [@ty::constr] {\n-    let mut rslt: [@ty::constr] = [];\n+fn parse_constrs_gen<T: copy>(st: @pstate, conv: conv_did,\n+                                       pser: fn(@pstate)\n+  -> ast::constr_arg_general_<T>) -> [@ty::constr_general<T>] {\n+    let mut rslt: [@ty::constr_general<T>] = [];\n     alt peek(st) {\n       ':' {\n         loop {\n-            next(st);\n-            rslt += [parse_constr(st, conv, parse_constr_arg)];\n-            if peek(st) != ';' { break; }\n+          next(st);\n+          rslt += [parse_constr(st, conv, pser)];\n+          if peek(st) != ';' { break; }\n         }\n       }\n-      _ { }\n+      _ {}\n     }\n-    ret rslt;\n+    rslt\n+}\n+\n+fn parse_constrs(st: @pstate, conv: conv_did) -> [@ty::constr] {\n+    parse_constrs_gen(st, conv, parse_constr_arg)\n }\n \n-// FIXME less copy-and-paste\n fn parse_ty_constrs(st: @pstate, conv: conv_did) -> [@ty::type_constr] {\n-    let mut rslt: [@ty::type_constr] = [];\n-    alt peek(st) {\n-      ':' {\n-        loop {\n-            next(st);\n-            rslt += [parse_constr(st, conv, parse_ty_constr_arg)];\n-            if peek(st) != ';' { break; }\n-        }\n-      }\n-      _ { }\n-    }\n-    ret rslt;\n+    parse_constrs_gen(st, conv, parse_ty_constr_arg)\n }\n \n fn parse_path(st: @pstate) -> @ast::path {\n@@ -121,11 +115,11 @@ fn parse_constr_arg(st: @pstate) -> ast::fn_constr_arg {\n            an arg index and a lit argument? */\n         if c >= '0' && c <= '9' {\n             next(st);\n-            // FIXME\n+            // FIXME #877\n             ret ast::carg_ident((c as uint) - 48u);\n         } else {\n             #error(\"Lit args are unimplemented\");\n-            fail; // FIXME\n+            fail; // FIXME #877\n         }\n         /*\n           else {\n@@ -147,7 +141,8 @@ fn parse_ty_constr_arg(st: @pstate) -> ast::constr_arg_general_<@path> {\n fn parse_constr<T: copy>(st: @pstate, conv: conv_did,\n                          pser: fn(@pstate) -> ast::constr_arg_general_<T>)\n     -> @ty::constr_general<T> {\n-    let sp = ast_util::dummy_sp(); // FIXME: use a real span\n+    // FIXME: use real spans and not a bogus one (#2407)\n+    let sp = ast_util::dummy_sp();\n     let mut args: [@sp_constr_arg<T>] = [];\n     let pth = parse_path(st);\n     let mut ignore: char = next(st);\n@@ -156,7 +151,6 @@ fn parse_constr<T: copy>(st: @pstate, conv: conv_did,\n     let mut an_arg: constr_arg_general_<T>;\n     loop {\n         an_arg = pser(st);\n-        // FIXME use a real span\n         args += [@respan(sp, an_arg)];\n         ignore = next(st);\n         if ignore != ';' { break; }"}, {"sha": "67f9e5bc0af8f2696209d84889c9e63597e76dae", "filename": "src/rustc/metadata/tyencode.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/cdcce3ed5d0e2944e71a1660b52535c6c43e2ef2/src%2Frustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdcce3ed5d0e2944e71a1660b52535c6c43e2ef2/src%2Frustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Ftyencode.rs?ref=cdcce3ed5d0e2944e71a1660b52535c6c43e2ef2", "patch": "@@ -352,39 +352,39 @@ fn enc_ty_fn(w: io::writer, cx: @ctxt, ft: ty::fn_ty) {\n     }\n }\n \n-// FIXME less copy-and-paste\n-fn enc_constr(w: io::writer, cx: @ctxt, c: @ty::constr) {\n+fn enc_constr_gen<T>(w: io::writer, cx: @ctxt,\n+                  c: @ty::constr_general<T>,\n+                  write_arg: fn(@sp_constr_arg<T>)) {\n     w.write_str(path_to_str(c.node.path));\n     w.write_char('(');\n     w.write_str(cx.ds(c.node.id));\n     w.write_char('|');\n     let mut semi = false;\n     for c.node.args.each {|a|\n         if semi { w.write_char(';'); } else { semi = true; }\n-        alt a.node {\n-          carg_base { w.write_char('*'); }\n-          carg_ident(i) { w.write_uint(i); }\n-          carg_lit(l) { w.write_str(lit_to_str(l)); }\n-        }\n+        write_arg(a);\n     }\n     w.write_char(')');\n }\n \n+fn enc_constr(w: io::writer, cx: @ctxt, c: @ty::constr) {\n+    enc_constr_gen(w, cx, c, {|a|\n+      alt a.node {\n+        carg_base     { w.write_char('*'); }\n+        carg_ident(i) { w.write_uint(i); }\n+        carg_lit(l)   { w.write_str(lit_to_str(l)); }\n+      }\n+    });\n+}\n+\n fn enc_ty_constr(w: io::writer, cx: @ctxt, c: @ty::type_constr) {\n-    w.write_str(path_to_str(c.node.path));\n-    w.write_char('(');\n-    w.write_str(cx.ds(c.node.id));\n-    w.write_char('|');\n-    let mut semi = false;\n-    for c.node.args.each {|a|\n-        if semi { w.write_char(';'); } else { semi = true; }\n-        alt a.node {\n-          carg_base { w.write_char('*'); }\n-          carg_ident(p) { w.write_str(path_to_str(p)); }\n-          carg_lit(l) { w.write_str(lit_to_str(l)); }\n-        }\n-    }\n-    w.write_char(')');\n+    enc_constr_gen(w, cx, c, {|a|\n+      alt a.node {\n+        carg_base     { w.write_char('*'); }\n+        carg_ident(p) { w.write_str(path_to_str(p)); }\n+        carg_lit(l)  { w.write_str(lit_to_str(l)); }\n+      }\n+    });\n }\n \n fn enc_bounds(w: io::writer, cx: @ctxt, bs: @[ty::param_bound]) {"}]}