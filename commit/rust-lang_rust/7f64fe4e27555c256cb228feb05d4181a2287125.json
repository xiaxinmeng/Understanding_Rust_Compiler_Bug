{"sha": "7f64fe4e27555c256cb228feb05d4181a2287125", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmNjRmZTRlMjc1NTVjMjU2Y2IyMjhmZWIwNWQ0MTgxYTIyODcxMjU=", "commit": {"author": {"name": "Tobias Bucher", "email": "tobiasbucher5991@gmail.com", "date": "2015-01-25T21:05:03Z"}, "committer": {"name": "Tobias Bucher", "email": "tobiasbucher5991@gmail.com", "date": "2015-01-30T03:38:54Z"}, "message": "Remove all `i` suffixes", "tree": {"sha": "c1fd374d345905c7c4c9b1e7df160d3394edbec5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1fd374d345905c7c4c9b1e7df160d3394edbec5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f64fe4e27555c256cb228feb05d4181a2287125", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f64fe4e27555c256cb228feb05d4181a2287125", "html_url": "https://github.com/rust-lang/rust/commit/7f64fe4e27555c256cb228feb05d4181a2287125", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f64fe4e27555c256cb228feb05d4181a2287125/comments", "author": {"login": "tbu-", "id": 6666593, "node_id": "MDQ6VXNlcjY2NjY1OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6666593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbu-", "html_url": "https://github.com/tbu-", "followers_url": "https://api.github.com/users/tbu-/followers", "following_url": "https://api.github.com/users/tbu-/following{/other_user}", "gists_url": "https://api.github.com/users/tbu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbu-/subscriptions", "organizations_url": "https://api.github.com/users/tbu-/orgs", "repos_url": "https://api.github.com/users/tbu-/repos", "events_url": "https://api.github.com/users/tbu-/events{/privacy}", "received_events_url": "https://api.github.com/users/tbu-/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tbu-", "id": 6666593, "node_id": "MDQ6VXNlcjY2NjY1OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6666593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbu-", "html_url": "https://github.com/tbu-", "followers_url": "https://api.github.com/users/tbu-/followers", "following_url": "https://api.github.com/users/tbu-/following{/other_user}", "gists_url": "https://api.github.com/users/tbu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbu-/subscriptions", "organizations_url": "https://api.github.com/users/tbu-/orgs", "repos_url": "https://api.github.com/users/tbu-/repos", "events_url": "https://api.github.com/users/tbu-/events{/privacy}", "received_events_url": "https://api.github.com/users/tbu-/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52c74e63dacd49017b19330e0cbecbac0a3fe62e", "url": "https://api.github.com/repos/rust-lang/rust/commits/52c74e63dacd49017b19330e0cbecbac0a3fe62e", "html_url": "https://github.com/rust-lang/rust/commit/52c74e63dacd49017b19330e0cbecbac0a3fe62e"}], "stats": {"total": 3982, "additions": 1991, "deletions": 1991}, "files": [{"sha": "71f33feb8e172b748b8d55221f3e89398b1e0924", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -35,7 +35,7 @@\n //! use std::sync::Arc;\n //! use std::thread::Thread;\n //!\n-//! let five = Arc::new(5i);\n+//! let five = Arc::new(5);\n //!\n //! for _ in 0u..10 {\n //!     let five = five.clone();\n@@ -52,7 +52,7 @@\n //! use std::sync::{Arc, Mutex};\n //! use std::thread::Thread;\n //!\n-//! let five = Arc::new(Mutex::new(5i));\n+//! let five = Arc::new(Mutex::new(5));\n //!\n //! for _ in 0u..10 {\n //!     let five = five.clone();\n@@ -154,7 +154,7 @@ impl<T> Arc<T> {\n     /// ```\n     /// use std::sync::Arc;\n     ///\n-    /// let five = Arc::new(5i);\n+    /// let five = Arc::new(5);\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -176,7 +176,7 @@ impl<T> Arc<T> {\n     /// ```\n     /// use std::sync::Arc;\n     ///\n-    /// let five = Arc::new(5i);\n+    /// let five = Arc::new(5);\n     ///\n     /// let weak_five = five.downgrade();\n     /// ```\n@@ -221,7 +221,7 @@ impl<T> Clone for Arc<T> {\n     /// ```\n     /// use std::sync::Arc;\n     ///\n-    /// let five = Arc::new(5i);\n+    /// let five = Arc::new(5);\n     ///\n     /// five.clone();\n     /// ```\n@@ -268,7 +268,7 @@ impl<T: Send + Sync + Clone> Arc<T> {\n     /// ```\n     /// use std::sync::Arc;\n     ///\n-    /// let mut five = Arc::new(5i);\n+    /// let mut five = Arc::new(5);\n     ///\n     /// let mut_five = five.make_unique();\n     /// ```\n@@ -304,14 +304,14 @@ impl<T: Sync + Send> Drop for Arc<T> {\n     /// use std::sync::Arc;\n     ///\n     /// {\n-    ///     let five = Arc::new(5i);\n+    ///     let five = Arc::new(5);\n     ///\n     ///     // stuff\n     ///\n     ///     drop(five); // explict drop\n     /// }\n     /// {\n-    ///     let five = Arc::new(5i);\n+    ///     let five = Arc::new(5);\n     ///\n     ///     // stuff\n     ///\n@@ -371,7 +371,7 @@ impl<T: Sync + Send> Weak<T> {\n     /// ```\n     /// use std::sync::Arc;\n     ///\n-    /// let five = Arc::new(5i);\n+    /// let five = Arc::new(5);\n     ///\n     /// let weak_five = five.downgrade();\n     ///\n@@ -408,7 +408,7 @@ impl<T: Sync + Send> Clone for Weak<T> {\n     /// ```\n     /// use std::sync::Arc;\n     ///\n-    /// let weak_five = Arc::new(5i).downgrade();\n+    /// let weak_five = Arc::new(5).downgrade();\n     ///\n     /// weak_five.clone();\n     /// ```\n@@ -433,15 +433,15 @@ impl<T: Sync + Send> Drop for Weak<T> {\n     /// use std::sync::Arc;\n     ///\n     /// {\n-    ///     let five = Arc::new(5i);\n+    ///     let five = Arc::new(5);\n     ///     let weak_five = five.downgrade();\n     ///\n     ///     // stuff\n     ///\n     ///     drop(weak_five); // explict drop\n     /// }\n     /// {\n-    ///     let five = Arc::new(5i);\n+    ///     let five = Arc::new(5);\n     ///     let weak_five = five.downgrade();\n     ///\n     ///     // stuff\n@@ -475,9 +475,9 @@ impl<T: PartialEq> PartialEq for Arc<T> {\n     /// ```\n     /// use std::sync::Arc;\n     ///\n-    /// let five = Arc::new(5i);\n+    /// let five = Arc::new(5);\n     ///\n-    /// five == Arc::new(5i);\n+    /// five == Arc::new(5);\n     /// ```\n     fn eq(&self, other: &Arc<T>) -> bool { *(*self) == *(*other) }\n \n@@ -490,9 +490,9 @@ impl<T: PartialEq> PartialEq for Arc<T> {\n     /// ```\n     /// use std::sync::Arc;\n     ///\n-    /// let five = Arc::new(5i);\n+    /// let five = Arc::new(5);\n     ///\n-    /// five != Arc::new(5i);\n+    /// five != Arc::new(5);\n     /// ```\n     fn ne(&self, other: &Arc<T>) -> bool { *(*self) != *(*other) }\n }\n@@ -507,9 +507,9 @@ impl<T: PartialOrd> PartialOrd for Arc<T> {\n     /// ```\n     /// use std::sync::Arc;\n     ///\n-    /// let five = Arc::new(5i);\n+    /// let five = Arc::new(5);\n     ///\n-    /// five.partial_cmp(&Arc::new(5i));\n+    /// five.partial_cmp(&Arc::new(5));\n     /// ```\n     fn partial_cmp(&self, other: &Arc<T>) -> Option<Ordering> {\n         (**self).partial_cmp(&**other)\n@@ -524,9 +524,9 @@ impl<T: PartialOrd> PartialOrd for Arc<T> {\n     /// ```\n     /// use std::sync::Arc;\n     ///\n-    /// let five = Arc::new(5i);\n+    /// let five = Arc::new(5);\n     ///\n-    /// five < Arc::new(5i);\n+    /// five < Arc::new(5);\n     /// ```\n     fn lt(&self, other: &Arc<T>) -> bool { *(*self) < *(*other) }\n \n@@ -539,9 +539,9 @@ impl<T: PartialOrd> PartialOrd for Arc<T> {\n     /// ```\n     /// use std::sync::Arc;\n     ///\n-    /// let five = Arc::new(5i);\n+    /// let five = Arc::new(5);\n     ///\n-    /// five <= Arc::new(5i);\n+    /// five <= Arc::new(5);\n     /// ```\n     fn le(&self, other: &Arc<T>) -> bool { *(*self) <= *(*other) }\n \n@@ -554,9 +554,9 @@ impl<T: PartialOrd> PartialOrd for Arc<T> {\n     /// ```\n     /// use std::sync::Arc;\n     ///\n-    /// let five = Arc::new(5i);\n+    /// let five = Arc::new(5);\n     ///\n-    /// five > Arc::new(5i);\n+    /// five > Arc::new(5);\n     /// ```\n     fn gt(&self, other: &Arc<T>) -> bool { *(*self) > *(*other) }\n \n@@ -569,9 +569,9 @@ impl<T: PartialOrd> PartialOrd for Arc<T> {\n     /// ```\n     /// use std::sync::Arc;\n     ///\n-    /// let five = Arc::new(5i);\n+    /// let five = Arc::new(5);\n     ///\n-    /// five >= Arc::new(5i);\n+    /// five >= Arc::new(5);\n     /// ```\n     fn ge(&self, other: &Arc<T>) -> bool { *(*self) >= *(*other) }\n }\n@@ -719,14 +719,14 @@ mod tests {\n \n     #[test]\n     fn test_live() {\n-        let x = Arc::new(5i);\n+        let x = Arc::new(5);\n         let y = x.downgrade();\n         assert!(y.upgrade().is_some());\n     }\n \n     #[test]\n     fn test_dead() {\n-        let x = Arc::new(5i);\n+        let x = Arc::new(5);\n         let y = x.downgrade();\n         drop(x);\n         assert!(y.upgrade().is_none());"}, {"sha": "4ffb94e7a6106b60d111299a613891b86d0fd3ad", "filename": "src/liballoc/boxed_test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Fliballoc%2Fboxed_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Fliballoc%2Fboxed_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed_test.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -20,7 +20,7 @@ use std::boxed::BoxAny;\n \n #[test]\n fn test_owned_clone() {\n-    let a = Box::new(5i);\n+    let a = Box::new(5);\n     let b: Box<int> = a.clone();\n     assert!(a == b);\n }"}, {"sha": "1d5637a6ad6b34c351e9e7e1874d7d92f557f261", "filename": "src/liballoc/heap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Fliballoc%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Fliballoc%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fheap.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -403,7 +403,7 @@ mod test {\n     #[bench]\n     fn alloc_owned_small(b: &mut Bencher) {\n         b.iter(|| {\n-            box 10i\n+            box 10\n         })\n     }\n }"}, {"sha": "8a542e1b8cbdb5716c73fbfdf713b02aee0b65f2", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -192,7 +192,7 @@ impl<T> Rc<T> {\n     /// ```\n     /// use std::rc::Rc;\n     ///\n-    /// let five = Rc::new(5i);\n+    /// let five = Rc::new(5);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new(value: T) -> Rc<T> {\n@@ -217,7 +217,7 @@ impl<T> Rc<T> {\n     /// ```\n     /// use std::rc::Rc;\n     ///\n-    /// let five = Rc::new(5i);\n+    /// let five = Rc::new(5);\n     ///\n     /// let weak_five = five.downgrade();\n     /// ```\n@@ -247,7 +247,7 @@ pub fn strong_count<T>(this: &Rc<T>) -> uint { this.strong() }\n /// use std::rc;\n /// use std::rc::Rc;\n ///\n-/// let five = Rc::new(5i);\n+/// let five = Rc::new(5);\n ///\n /// rc::is_unique(&five);\n /// ```\n@@ -329,7 +329,7 @@ impl<T: Clone> Rc<T> {\n     /// ```\n     /// use std::rc::Rc;\n     ///\n-    /// let mut five = Rc::new(5i);\n+    /// let mut five = Rc::new(5);\n     ///\n     /// let mut_five = five.make_unique();\n     /// ```\n@@ -378,14 +378,14 @@ impl<T> Drop for Rc<T> {\n     /// use std::rc::Rc;\n     ///\n     /// {\n-    ///     let five = Rc::new(5i);\n+    ///     let five = Rc::new(5);\n     ///\n     ///     // stuff\n     ///\n     ///     drop(five); // explict drop\n     /// }\n     /// {\n-    ///     let five = Rc::new(5i);\n+    ///     let five = Rc::new(5);\n     ///\n     ///     // stuff\n     ///\n@@ -425,7 +425,7 @@ impl<T> Clone for Rc<T> {\n     /// ```\n     /// use std::rc::Rc;\n     ///\n-    /// let five = Rc::new(5i);\n+    /// let five = Rc::new(5);\n     ///\n     /// five.clone();\n     /// ```\n@@ -466,9 +466,9 @@ impl<T: PartialEq> PartialEq for Rc<T> {\n     /// ```\n     /// use std::rc::Rc;\n     ///\n-    /// let five = Rc::new(5i);\n+    /// let five = Rc::new(5);\n     ///\n-    /// five == Rc::new(5i);\n+    /// five == Rc::new(5);\n     /// ```\n     #[inline(always)]\n     fn eq(&self, other: &Rc<T>) -> bool { **self == **other }\n@@ -482,9 +482,9 @@ impl<T: PartialEq> PartialEq for Rc<T> {\n     /// ```\n     /// use std::rc::Rc;\n     ///\n-    /// let five = Rc::new(5i);\n+    /// let five = Rc::new(5);\n     ///\n-    /// five != Rc::new(5i);\n+    /// five != Rc::new(5);\n     /// ```\n     #[inline(always)]\n     fn ne(&self, other: &Rc<T>) -> bool { **self != **other }\n@@ -504,9 +504,9 @@ impl<T: PartialOrd> PartialOrd for Rc<T> {\n     /// ```\n     /// use std::rc::Rc;\n     ///\n-    /// let five = Rc::new(5i);\n+    /// let five = Rc::new(5);\n     ///\n-    /// five.partial_cmp(&Rc::new(5i));\n+    /// five.partial_cmp(&Rc::new(5));\n     /// ```\n     #[inline(always)]\n     fn partial_cmp(&self, other: &Rc<T>) -> Option<Ordering> {\n@@ -522,9 +522,9 @@ impl<T: PartialOrd> PartialOrd for Rc<T> {\n     /// ```\n     /// use std::rc::Rc;\n     ///\n-    /// let five = Rc::new(5i);\n+    /// let five = Rc::new(5);\n     ///\n-    /// five < Rc::new(5i);\n+    /// five < Rc::new(5);\n     /// ```\n     #[inline(always)]\n     fn lt(&self, other: &Rc<T>) -> bool { **self < **other }\n@@ -538,9 +538,9 @@ impl<T: PartialOrd> PartialOrd for Rc<T> {\n     /// ```\n     /// use std::rc::Rc;\n     ///\n-    /// let five = Rc::new(5i);\n+    /// let five = Rc::new(5);\n     ///\n-    /// five <= Rc::new(5i);\n+    /// five <= Rc::new(5);\n     /// ```\n     #[inline(always)]\n     fn le(&self, other: &Rc<T>) -> bool { **self <= **other }\n@@ -554,9 +554,9 @@ impl<T: PartialOrd> PartialOrd for Rc<T> {\n     /// ```\n     /// use std::rc::Rc;\n     ///\n-    /// let five = Rc::new(5i);\n+    /// let five = Rc::new(5);\n     ///\n-    /// five > Rc::new(5i);\n+    /// five > Rc::new(5);\n     /// ```\n     #[inline(always)]\n     fn gt(&self, other: &Rc<T>) -> bool { **self > **other }\n@@ -570,9 +570,9 @@ impl<T: PartialOrd> PartialOrd for Rc<T> {\n     /// ```\n     /// use std::rc::Rc;\n     ///\n-    /// let five = Rc::new(5i);\n+    /// let five = Rc::new(5);\n     ///\n-    /// five >= Rc::new(5i);\n+    /// five >= Rc::new(5);\n     /// ```\n     #[inline(always)]\n     fn ge(&self, other: &Rc<T>) -> bool { **self >= **other }\n@@ -589,9 +589,9 @@ impl<T: Ord> Ord for Rc<T> {\n     /// ```\n     /// use std::rc::Rc;\n     ///\n-    /// let five = Rc::new(5i);\n+    /// let five = Rc::new(5);\n     ///\n-    /// five.partial_cmp(&Rc::new(5i));\n+    /// five.partial_cmp(&Rc::new(5));\n     /// ```\n     #[inline]\n     fn cmp(&self, other: &Rc<T>) -> Ordering { (**self).cmp(&**other) }\n@@ -653,7 +653,7 @@ impl<T> Weak<T> {\n     /// ```\n     /// use std::rc::Rc;\n     ///\n-    /// let five = Rc::new(5i);\n+    /// let five = Rc::new(5);\n     ///\n     /// let weak_five = five.downgrade();\n     ///\n@@ -682,15 +682,15 @@ impl<T> Drop for Weak<T> {\n     /// use std::rc::Rc;\n     ///\n     /// {\n-    ///     let five = Rc::new(5i);\n+    ///     let five = Rc::new(5);\n     ///     let weak_five = five.downgrade();\n     ///\n     ///     // stuff\n     ///\n     ///     drop(weak_five); // explict drop\n     /// }\n     /// {\n-    ///     let five = Rc::new(5i);\n+    ///     let five = Rc::new(5);\n     ///     let weak_five = five.downgrade();\n     ///\n     ///     // stuff\n@@ -726,7 +726,7 @@ impl<T> Clone for Weak<T> {\n     /// ```\n     /// use std::rc::Rc;\n     ///\n-    /// let weak_five = Rc::new(5i).downgrade();\n+    /// let weak_five = Rc::new(5).downgrade();\n     ///\n     /// weak_five.clone();\n     /// ```\n@@ -789,42 +789,42 @@ mod tests {\n \n     #[test]\n     fn test_clone() {\n-        let x = Rc::new(RefCell::new(5i));\n+        let x = Rc::new(RefCell::new(5));\n         let y = x.clone();\n         *x.borrow_mut() = 20;\n         assert_eq!(*y.borrow(), 20);\n     }\n \n     #[test]\n     fn test_simple() {\n-        let x = Rc::new(5i);\n+        let x = Rc::new(5);\n         assert_eq!(*x, 5);\n     }\n \n     #[test]\n     fn test_simple_clone() {\n-        let x = Rc::new(5i);\n+        let x = Rc::new(5);\n         let y = x.clone();\n         assert_eq!(*x, 5);\n         assert_eq!(*y, 5);\n     }\n \n     #[test]\n     fn test_destructor() {\n-        let x = Rc::new(box 5i);\n+        let x = Rc::new(box 5);\n         assert_eq!(**x, 5);\n     }\n \n     #[test]\n     fn test_live() {\n-        let x = Rc::new(5i);\n+        let x = Rc::new(5);\n         let y = x.downgrade();\n         assert!(y.upgrade().is_some());\n     }\n \n     #[test]\n     fn test_dead() {\n-        let x = Rc::new(5i);\n+        let x = Rc::new(5);\n         let y = x.downgrade();\n         drop(x);\n         assert!(y.upgrade().is_none());"}, {"sha": "91ef2d17baac30846d0d92e830c561fde895e0ee", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -212,7 +212,7 @@ impl<T: Ord> BinaryHeap<T> {\n     ///\n     /// ```\n     /// use std::collections::BinaryHeap;\n-    /// let heap = BinaryHeap::from_vec(vec![9i, 1, 2, 7, 3, 2]);\n+    /// let heap = BinaryHeap::from_vec(vec![9, 1, 2, 7, 3, 2]);\n     /// ```\n     pub fn from_vec(vec: Vec<T>) -> BinaryHeap<T> {\n         let mut heap = BinaryHeap { data: vec };\n@@ -231,7 +231,7 @@ impl<T: Ord> BinaryHeap<T> {\n     ///\n     /// ```\n     /// use std::collections::BinaryHeap;\n-    /// let heap = BinaryHeap::from_vec(vec![1i, 2, 3, 4]);\n+    /// let heap = BinaryHeap::from_vec(vec![1, 2, 3, 4]);\n     ///\n     /// // Print 1, 2, 3, 4 in arbitrary order\n     /// for x in heap.iter() {\n@@ -251,7 +251,7 @@ impl<T: Ord> BinaryHeap<T> {\n     ///\n     /// ```\n     /// use std::collections::BinaryHeap;\n-    /// let heap = BinaryHeap::from_vec(vec![1i, 2, 3, 4]);\n+    /// let heap = BinaryHeap::from_vec(vec![1, 2, 3, 4]);\n     ///\n     /// // Print 1, 2, 3, 4 in arbitrary order\n     /// for x in heap.into_iter() {\n@@ -273,7 +273,7 @@ impl<T: Ord> BinaryHeap<T> {\n     /// let mut heap = BinaryHeap::new();\n     /// assert_eq!(heap.peek(), None);\n     ///\n-    /// heap.push(1i);\n+    /// heap.push(1);\n     /// heap.push(5);\n     /// heap.push(2);\n     /// assert_eq!(heap.peek(), Some(&5));\n@@ -356,7 +356,7 @@ impl<T: Ord> BinaryHeap<T> {\n     ///\n     /// ```\n     /// use std::collections::BinaryHeap;\n-    /// let mut heap = BinaryHeap::from_vec(vec![1i, 3]);\n+    /// let mut heap = BinaryHeap::from_vec(vec![1, 3]);\n     ///\n     /// assert_eq!(heap.pop(), Some(3));\n     /// assert_eq!(heap.pop(), Some(1));\n@@ -380,7 +380,7 @@ impl<T: Ord> BinaryHeap<T> {\n     /// ```\n     /// use std::collections::BinaryHeap;\n     /// let mut heap = BinaryHeap::new();\n-    /// heap.push(3i);\n+    /// heap.push(3);\n     /// heap.push(5);\n     /// heap.push(1);\n     ///\n@@ -402,7 +402,7 @@ impl<T: Ord> BinaryHeap<T> {\n     /// ```\n     /// use std::collections::BinaryHeap;\n     /// let mut heap = BinaryHeap::new();\n-    /// heap.push(1i);\n+    /// heap.push(1);\n     /// heap.push(5);\n     ///\n     /// assert_eq!(heap.push_pop(3), 5);\n@@ -434,7 +434,7 @@ impl<T: Ord> BinaryHeap<T> {\n     /// use std::collections::BinaryHeap;\n     /// let mut heap = BinaryHeap::new();\n     ///\n-    /// assert_eq!(heap.replace(1i), None);\n+    /// assert_eq!(heap.replace(1), None);\n     /// assert_eq!(heap.replace(3), Some(1));\n     /// assert_eq!(heap.len(), 1);\n     /// assert_eq!(heap.peek(), Some(&3));\n@@ -457,7 +457,7 @@ impl<T: Ord> BinaryHeap<T> {\n     ///\n     /// ```\n     /// use std::collections::BinaryHeap;\n-    /// let heap = BinaryHeap::from_vec(vec![1i, 2, 3, 4, 5, 6, 7]);\n+    /// let heap = BinaryHeap::from_vec(vec![1, 2, 3, 4, 5, 6, 7]);\n     /// let vec = heap.into_vec();\n     ///\n     /// // Will print in some order\n@@ -475,12 +475,12 @@ impl<T: Ord> BinaryHeap<T> {\n     /// ```\n     /// use std::collections::BinaryHeap;\n     ///\n-    /// let mut heap = BinaryHeap::from_vec(vec![1i, 2, 4, 5, 7]);\n+    /// let mut heap = BinaryHeap::from_vec(vec![1, 2, 4, 5, 7]);\n     /// heap.push(6);\n     /// heap.push(3);\n     ///\n     /// let vec = heap.into_sorted_vec();\n-    /// assert_eq!(vec, vec![1i, 2, 3, 4, 5, 6, 7]);\n+    /// assert_eq!(vec, vec![1, 2, 3, 4, 5, 6, 7]);\n     /// ```\n     pub fn into_sorted_vec(mut self) -> Vec<T> {\n         let mut end = self.len();\n@@ -676,8 +676,8 @@ mod tests {\n \n     #[test]\n     fn test_iterator() {\n-        let data = vec!(5i, 9, 3);\n-        let iterout = [9i, 5, 3];\n+        let data = vec!(5, 9, 3);\n+        let iterout = [9, 5, 3];\n         let heap = BinaryHeap::from_vec(data);\n         let mut i = 0;\n         for el in heap.iter() {\n@@ -688,8 +688,8 @@ mod tests {\n \n     #[test]\n     fn test_iterator_reverse() {\n-        let data = vec!(5i, 9, 3);\n-        let iterout = vec!(3i, 5, 9);\n+        let data = vec!(5, 9, 3);\n+        let iterout = vec!(3, 5, 9);\n         let pq = BinaryHeap::from_vec(data);\n \n         let v: Vec<int> = pq.iter().rev().map(|&x| x).collect();\n@@ -698,8 +698,8 @@ mod tests {\n \n     #[test]\n     fn test_move_iter() {\n-        let data = vec!(5i, 9, 3);\n-        let iterout = vec!(9i, 5, 3);\n+        let data = vec!(5, 9, 3);\n+        let iterout = vec!(9, 5, 3);\n         let pq = BinaryHeap::from_vec(data);\n \n         let v: Vec<int> = pq.into_iter().collect();\n@@ -708,25 +708,25 @@ mod tests {\n \n     #[test]\n     fn test_move_iter_size_hint() {\n-        let data = vec!(5i, 9);\n+        let data = vec!(5, 9);\n         let pq = BinaryHeap::from_vec(data);\n \n         let mut it = pq.into_iter();\n \n         assert_eq!(it.size_hint(), (2, Some(2)));\n-        assert_eq!(it.next(), Some(9i));\n+        assert_eq!(it.next(), Some(9));\n \n         assert_eq!(it.size_hint(), (1, Some(1)));\n-        assert_eq!(it.next(), Some(5i));\n+        assert_eq!(it.next(), Some(5));\n \n         assert_eq!(it.size_hint(), (0, Some(0)));\n         assert_eq!(it.next(), None);\n     }\n \n     #[test]\n     fn test_move_iter_reverse() {\n-        let data = vec!(5i, 9, 3);\n-        let iterout = vec!(3i, 5, 9);\n+        let data = vec!(5, 9, 3);\n+        let iterout = vec!(3, 5, 9);\n         let pq = BinaryHeap::from_vec(data);\n \n         let v: Vec<int> = pq.into_iter().rev().collect();\n@@ -747,7 +747,7 @@ mod tests {\n \n     #[test]\n     fn test_push() {\n-        let mut heap = BinaryHeap::from_vec(vec!(2i, 4, 9));\n+        let mut heap = BinaryHeap::from_vec(vec!(2, 4, 9));\n         assert_eq!(heap.len(), 3);\n         assert!(*heap.peek().unwrap() == 9);\n         heap.push(11);\n@@ -769,7 +769,7 @@ mod tests {\n \n     #[test]\n     fn test_push_unique() {\n-        let mut heap = BinaryHeap::from_vec(vec!(box 2i, box 4, box 9));\n+        let mut heap = BinaryHeap::from_vec(vec!(box 2, box 4, box 9));\n         assert_eq!(heap.len(), 3);\n         assert!(*heap.peek().unwrap() == box 9);\n         heap.push(box 11);\n@@ -791,7 +791,7 @@ mod tests {\n \n     #[test]\n     fn test_push_pop() {\n-        let mut heap = BinaryHeap::from_vec(vec!(5i, 5, 2, 1, 3));\n+        let mut heap = BinaryHeap::from_vec(vec!(5, 5, 2, 1, 3));\n         assert_eq!(heap.len(), 5);\n         assert_eq!(heap.push_pop(6), 6);\n         assert_eq!(heap.len(), 5);\n@@ -805,7 +805,7 @@ mod tests {\n \n     #[test]\n     fn test_replace() {\n-        let mut heap = BinaryHeap::from_vec(vec!(5i, 5, 2, 1, 3));\n+        let mut heap = BinaryHeap::from_vec(vec!(5, 5, 2, 1, 3));\n         assert_eq!(heap.len(), 5);\n         assert_eq!(heap.replace(6).unwrap(), 5);\n         assert_eq!(heap.len(), 5);\n@@ -830,18 +830,18 @@ mod tests {\n     #[test]\n     fn test_to_vec() {\n         check_to_vec(vec!());\n-        check_to_vec(vec!(5i));\n-        check_to_vec(vec!(3i, 2));\n-        check_to_vec(vec!(2i, 3));\n-        check_to_vec(vec!(5i, 1, 2));\n-        check_to_vec(vec!(1i, 100, 2, 3));\n-        check_to_vec(vec!(1i, 3, 5, 7, 9, 2, 4, 6, 8, 0));\n-        check_to_vec(vec!(2i, 4, 6, 2, 1, 8, 10, 3, 5, 7, 0, 9, 1));\n-        check_to_vec(vec!(9i, 11, 9, 9, 9, 9, 11, 2, 3, 4, 11, 9, 0, 0, 0, 0));\n-        check_to_vec(vec!(0i, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10));\n-        check_to_vec(vec!(10i, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0));\n-        check_to_vec(vec!(0i, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0, 0, 1, 2));\n-        check_to_vec(vec!(5i, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5, 4, 3, 2, 1));\n+        check_to_vec(vec!(5));\n+        check_to_vec(vec!(3, 2));\n+        check_to_vec(vec!(2, 3));\n+        check_to_vec(vec!(5, 1, 2));\n+        check_to_vec(vec!(1, 100, 2, 3));\n+        check_to_vec(vec!(1, 3, 5, 7, 9, 2, 4, 6, 8, 0));\n+        check_to_vec(vec!(2, 4, 6, 2, 1, 8, 10, 3, 5, 7, 0, 9, 1));\n+        check_to_vec(vec!(9, 11, 9, 9, 9, 9, 11, 2, 3, 4, 11, 9, 0, 0, 0, 0));\n+        check_to_vec(vec!(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10));\n+        check_to_vec(vec!(10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0));\n+        check_to_vec(vec!(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0, 0, 1, 2));\n+        check_to_vec(vec!(5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5, 4, 3, 2, 1));\n     }\n \n     #[test]"}, {"sha": "2ab2a499e731189994d04bc3c9d72a21bbbecb10", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -1782,7 +1782,7 @@ mod test {\n \n     #[test]\n     fn test_entry(){\n-        let xs = [(1i, 10i), (2, 20), (3, 30), (4, 40), (5, 50), (6, 60)];\n+        let xs = [(1, 10), (2, 20), (3, 30), (4, 40), (5, 50), (6, 60)];\n \n         let mut map: BTreeMap<int, int> = xs.iter().map(|&x| x).collect();\n "}, {"sha": "a99af5a549d0e97a67c734f70ea2bb29ca837e11", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -282,7 +282,7 @@ impl<T: Ord> BTreeSet<T> {\n     ///\n     /// let mut v = BTreeSet::new();\n     /// assert_eq!(v.len(), 0);\n-    /// v.insert(1i);\n+    /// v.insert(1);\n     /// assert_eq!(v.len(), 1);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -297,7 +297,7 @@ impl<T: Ord> BTreeSet<T> {\n     ///\n     /// let mut v = BTreeSet::new();\n     /// assert!(v.is_empty());\n-    /// v.insert(1i);\n+    /// v.insert(1);\n     /// assert!(!v.is_empty());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -311,7 +311,7 @@ impl<T: Ord> BTreeSet<T> {\n     /// use std::collections::BTreeSet;\n     ///\n     /// let mut v = BTreeSet::new();\n-    /// v.insert(1i);\n+    /// v.insert(1);\n     /// v.clear();\n     /// assert!(v.is_empty());\n     /// ```\n@@ -331,7 +331,7 @@ impl<T: Ord> BTreeSet<T> {\n     /// ```\n     /// use std::collections::BTreeSet;\n     ///\n-    /// let set: BTreeSet<int> = [1i, 2, 3].iter().map(|&x| x).collect();\n+    /// let set: BTreeSet<int> = [1, 2, 3].iter().map(|&x| x).collect();\n     /// assert_eq!(set.contains(&1), true);\n     /// assert_eq!(set.contains(&4), false);\n     /// ```\n@@ -348,7 +348,7 @@ impl<T: Ord> BTreeSet<T> {\n     /// ```\n     /// use std::collections::BTreeSet;\n     ///\n-    /// let a: BTreeSet<int> = [1i, 2, 3].iter().map(|&x| x).collect();\n+    /// let a: BTreeSet<int> = [1, 2, 3].iter().map(|&x| x).collect();\n     /// let mut b: BTreeSet<int> = BTreeSet::new();\n     ///\n     /// assert_eq!(a.is_disjoint(&b), true);\n@@ -369,7 +369,7 @@ impl<T: Ord> BTreeSet<T> {\n     /// ```\n     /// use std::collections::BTreeSet;\n     ///\n-    /// let sup: BTreeSet<int> = [1i, 2, 3].iter().map(|&x| x).collect();\n+    /// let sup: BTreeSet<int> = [1, 2, 3].iter().map(|&x| x).collect();\n     /// let mut set: BTreeSet<int> = BTreeSet::new();\n     ///\n     /// assert_eq!(set.is_subset(&sup), true);\n@@ -411,7 +411,7 @@ impl<T: Ord> BTreeSet<T> {\n     /// ```\n     /// use std::collections::BTreeSet;\n     ///\n-    /// let sub: BTreeSet<int> = [1i, 2].iter().map(|&x| x).collect();\n+    /// let sub: BTreeSet<int> = [1, 2].iter().map(|&x| x).collect();\n     /// let mut set: BTreeSet<int> = BTreeSet::new();\n     ///\n     /// assert_eq!(set.is_superset(&sub), false);\n@@ -438,8 +438,8 @@ impl<T: Ord> BTreeSet<T> {\n     ///\n     /// let mut set = BTreeSet::new();\n     ///\n-    /// assert_eq!(set.insert(2i), true);\n-    /// assert_eq!(set.insert(2i), false);\n+    /// assert_eq!(set.insert(2), true);\n+    /// assert_eq!(set.insert(2), false);\n     /// assert_eq!(set.len(), 1);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -461,7 +461,7 @@ impl<T: Ord> BTreeSet<T> {\n     ///\n     /// let mut set = BTreeSet::new();\n     ///\n-    /// set.insert(2i);\n+    /// set.insert(2);\n     /// assert_eq!(set.remove(&2), true);\n     /// assert_eq!(set.remove(&2), false);\n     /// ```\n@@ -731,7 +731,7 @@ mod test {\n     fn test_clone_eq() {\n       let mut m = BTreeSet::new();\n \n-      m.insert(1i);\n+      m.insert(1);\n       m.insert(2);\n \n       assert!(m.clone() == m);\n@@ -742,11 +742,11 @@ mod test {\n       let mut x = BTreeSet::new();\n       let mut y = BTreeSet::new();\n \n-      x.insert(1i);\n+      x.insert(1);\n       x.insert(2);\n       x.insert(3);\n \n-      y.insert(3i);\n+      y.insert(3);\n       y.insert(2);\n       y.insert(1);\n \n@@ -874,7 +874,7 @@ mod test {\n \n     #[test]\n     fn test_from_iter() {\n-        let xs = [1i, 2, 3, 4, 5, 6, 7, 8, 9];\n+        let xs = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n \n         let set: BTreeSet<int> = xs.iter().map(|&x| x).collect();\n "}, {"sha": "57867b44893f2b6ec14f915c1a7d0beefbd553a8", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -235,9 +235,9 @@ impl<T> DList<T> {\n     ///\n     /// let mut a = DList::new();\n     /// let mut b = DList::new();\n-    /// a.push_back(1i);\n+    /// a.push_back(1);\n     /// a.push_back(2);\n-    /// b.push_back(3i);\n+    /// b.push_back(3);\n     /// b.push_back(4);\n     ///\n     /// a.append(&mut b);\n@@ -529,7 +529,7 @@ impl<T> DList<T> {\n     /// use std::collections::DList;\n     ///\n     /// let mut d = DList::new();\n-    /// d.push_back(1i);\n+    /// d.push_back(1);\n     /// d.push_back(3);\n     /// assert_eq!(3, *d.back().unwrap());\n     /// ```\n@@ -548,7 +548,7 @@ impl<T> DList<T> {\n     ///\n     /// let mut d = DList::new();\n     /// assert_eq!(d.pop_back(), None);\n-    /// d.push_back(1i);\n+    /// d.push_back(1);\n     /// d.push_back(3);\n     /// assert_eq!(d.pop_back(), Some(3));\n     /// ```\n@@ -766,7 +766,7 @@ impl<'a, A> IterMut<'a, A> {\n     /// }\n     /// {\n     ///     let vec: Vec<int> = list.into_iter().collect();\n-    ///     assert_eq!(vec, vec![1i, 2, 3, 4]);\n+    ///     assert_eq!(vec, vec![1, 2, 3, 4]);\n     /// }\n     /// ```\n     #[inline]\n@@ -964,7 +964,7 @@ mod tests {\n         assert_eq!(m.pop_front(), Some(box 1));\n \n         let mut n = DList::new();\n-        n.push_front(2i);\n+        n.push_front(2);\n         n.push_front(3);\n         {\n             assert_eq!(n.front().unwrap(), &3);\n@@ -984,7 +984,7 @@ mod tests {\n \n     #[cfg(test)]\n     fn generate_test() -> DList<int> {\n-        list_from(&[0i,1,2,3,4,5,6])\n+        list_from(&[0,1,2,3,4,5,6])\n     }\n \n     #[cfg(test)]\n@@ -1007,7 +1007,7 @@ mod tests {\n         {\n             let mut m = DList::new();\n             let mut n = DList::new();\n-            n.push_back(2i);\n+            n.push_back(2);\n             m.append(&mut n);\n             check_links(&m);\n             assert_eq!(m.len(), 1);\n@@ -1019,7 +1019,7 @@ mod tests {\n         {\n             let mut m = DList::new();\n             let mut n = DList::new();\n-            m.push_back(2i);\n+            m.push_back(2);\n             m.append(&mut n);\n             check_links(&m);\n             assert_eq!(m.len(), 1);\n@@ -1028,8 +1028,8 @@ mod tests {\n         }\n \n         // Non-empty to non-empty\n-        let v = vec![1i,2,3,4,5];\n-        let u = vec![9i,8,1,2,3,4,5];\n+        let v = vec![1,2,3,4,5];\n+        let u = vec![9,8,1,2,3,4,5];\n         let mut m = list_from(v.as_slice());\n         let mut n = list_from(u.as_slice());\n         m.append(&mut n);\n@@ -1054,7 +1054,7 @@ mod tests {\n         // singleton\n         {\n             let mut m = DList::new();\n-            m.push_back(1i);\n+            m.push_back(1);\n \n             let p = m.split_off(0);\n             assert_eq!(m.len(), 0);\n@@ -1065,29 +1065,29 @@ mod tests {\n \n         // not singleton, forwards\n         {\n-            let u = vec![1i,2,3,4,5];\n+            let u = vec![1,2,3,4,5];\n             let mut m = list_from(u.as_slice());\n             let mut n = m.split_off(2);\n             assert_eq!(m.len(), 2);\n             assert_eq!(n.len(), 3);\n-            for elt in 1i..3 {\n+            for elt in 1..3 {\n                 assert_eq!(m.pop_front(), Some(elt));\n             }\n-            for elt in 3i..6 {\n+            for elt in 3..6 {\n                 assert_eq!(n.pop_front(), Some(elt));\n             }\n         }\n         // not singleton, backwards\n         {\n-            let u = vec![1i,2,3,4,5];\n+            let u = vec![1,2,3,4,5];\n             let mut m = list_from(u.as_slice());\n             let mut n = m.split_off(4);\n             assert_eq!(m.len(), 4);\n             assert_eq!(n.len(), 1);\n-            for elt in 1i..5 {\n+            for elt in 1..5 {\n                 assert_eq!(m.pop_front(), Some(elt));\n             }\n-            for elt in 5i..6 {\n+            for elt in 5..6 {\n                 assert_eq!(n.pop_front(), Some(elt));\n             }\n         }\n@@ -1102,7 +1102,7 @@ mod tests {\n         }\n         let mut n = DList::new();\n         assert_eq!(n.iter().next(), None);\n-        n.push_front(4i);\n+        n.push_front(4);\n         let mut it = n.iter();\n         assert_eq!(it.size_hint(), (1, Some(1)));\n         assert_eq!(it.next().unwrap(), &4);\n@@ -1113,7 +1113,7 @@ mod tests {\n     #[test]\n     fn test_iterator_clone() {\n         let mut n = DList::new();\n-        n.push_back(2i);\n+        n.push_back(2);\n         n.push_back(3);\n         n.push_back(4);\n         let mut it = n.iter();\n@@ -1128,7 +1128,7 @@ mod tests {\n     fn test_iterator_double_end() {\n         let mut n = DList::new();\n         assert_eq!(n.iter().next(), None);\n-        n.push_front(4i);\n+        n.push_front(4);\n         n.push_front(5);\n         n.push_front(6);\n         let mut it = n.iter();\n@@ -1150,7 +1150,7 @@ mod tests {\n         }\n         let mut n = DList::new();\n         assert_eq!(n.iter().rev().next(), None);\n-        n.push_front(4i);\n+        n.push_front(4);\n         let mut it = n.iter().rev();\n         assert_eq!(it.size_hint(), (1, Some(1)));\n         assert_eq!(it.next().unwrap(), &4);\n@@ -1169,7 +1169,7 @@ mod tests {\n         assert_eq!(len, 0);\n         let mut n = DList::new();\n         assert!(n.iter_mut().next().is_none());\n-        n.push_front(4i);\n+        n.push_front(4);\n         n.push_back(5);\n         let mut it = n.iter_mut();\n         assert_eq!(it.size_hint(), (2, Some(2)));\n@@ -1183,7 +1183,7 @@ mod tests {\n     fn test_iterator_mut_double_end() {\n         let mut n = DList::new();\n         assert!(n.iter_mut().next_back().is_none());\n-        n.push_front(4i);\n+        n.push_front(4);\n         n.push_front(5);\n         n.push_front(6);\n         let mut it = n.iter_mut();\n@@ -1199,7 +1199,7 @@ mod tests {\n \n     #[test]\n     fn test_insert_prev() {\n-        let mut m = list_from(&[0i,2,4,6,8]);\n+        let mut m = list_from(&[0,2,4,6,8]);\n         let len = m.len();\n         {\n             let mut it = m.iter_mut();\n@@ -1232,15 +1232,15 @@ mod tests {\n         }\n         let mut n = DList::new();\n         assert!(n.iter_mut().rev().next().is_none());\n-        n.push_front(4i);\n+        n.push_front(4);\n         let mut it = n.iter_mut().rev();\n         assert!(it.next().is_some());\n         assert!(it.next().is_none());\n     }\n \n     #[test]\n     fn test_send() {\n-        let n = list_from(&[1i,2,3]);\n+        let n = list_from(&[1,2,3]);\n         Thread::scoped(move || {\n             check_links(&n);\n             let a: &[_] = &[&1,&2,&3];\n@@ -1258,8 +1258,8 @@ mod tests {\n         m.push_back(1);\n         assert!(n == m);\n \n-        let n = list_from(&[2i,3,4]);\n-        let m = list_from(&[1i,2,3]);\n+        let n = list_from(&[2,3,4]);\n+        let m = list_from(&[1,2,3]);\n         assert!(n != m);\n     }\n \n@@ -1270,11 +1270,11 @@ mod tests {\n \n       assert!(hash::hash::<_, SipHasher>(&x) == hash::hash::<_, SipHasher>(&y));\n \n-      x.push_back(1i);\n+      x.push_back(1);\n       x.push_back(2);\n       x.push_back(3);\n \n-      y.push_front(3i);\n+      y.push_front(3);\n       y.push_front(2);\n       y.push_front(1);\n \n@@ -1284,7 +1284,7 @@ mod tests {\n     #[test]\n     fn test_ord() {\n         let n: DList<int> = list_from(&[]);\n-        let m = list_from(&[1i,2,3]);\n+        let m = list_from(&[1,2,3]);\n         assert!(n < m);\n         assert!(m > n);\n         assert!(n <= n);\n@@ -1334,7 +1334,7 @@ mod tests {\n \n     #[test]\n     fn test_show() {\n-        let list: DList<int> = (0i..10).collect();\n+        let list: DList<i32> = (0..10).collect();\n         assert_eq!(format!(\"{:?}\", list), \"DList [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\");\n \n         let list: DList<&str> = vec![\"just\", \"one\", \"test\", \"more\"].iter()\n@@ -1384,7 +1384,7 @@ mod tests {\n \n     #[bench]\n     fn bench_collect_into(b: &mut test::Bencher) {\n-        let v = &[0i; 64];\n+        let v = &[0; 64];\n         b.iter(|| {\n             let _: DList<int> = v.iter().map(|x| *x).collect();\n         })\n@@ -1426,31 +1426,31 @@ mod tests {\n \n     #[bench]\n     fn bench_iter(b: &mut test::Bencher) {\n-        let v = &[0i; 128];\n+        let v = &[0; 128];\n         let m: DList<int> = v.iter().map(|&x|x).collect();\n         b.iter(|| {\n             assert!(m.iter().count() == 128);\n         })\n     }\n     #[bench]\n     fn bench_iter_mut(b: &mut test::Bencher) {\n-        let v = &[0i; 128];\n+        let v = &[0; 128];\n         let mut m: DList<int> = v.iter().map(|&x|x).collect();\n         b.iter(|| {\n             assert!(m.iter_mut().count() == 128);\n         })\n     }\n     #[bench]\n     fn bench_iter_rev(b: &mut test::Bencher) {\n-        let v = &[0i; 128];\n+        let v = &[0; 128];\n         let m: DList<int> = v.iter().map(|&x|x).collect();\n         b.iter(|| {\n             assert!(m.iter().rev().count() == 128);\n         })\n     }\n     #[bench]\n     fn bench_iter_mut_rev(b: &mut test::Bencher) {\n-        let v = &[0i; 128];\n+        let v = &[0; 128];\n         let mut m: DList<int> = v.iter().map(|&x|x).collect();\n         b.iter(|| {\n             assert!(m.iter_mut().rev().count() == 128);"}, {"sha": "c1855a469c118b895e602a23976d88feeda519f7", "filename": "src/libcollections/ring_buf.rs", "status": "modified", "additions": 123, "deletions": 123, "changes": 246, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibcollections%2Fring_buf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibcollections%2Fring_buf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fring_buf.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -186,7 +186,7 @@ impl<T> RingBuf<T> {\n     /// use std::collections::RingBuf;\n     ///\n     /// let mut buf = RingBuf::new();\n-    /// buf.push_back(3i);\n+    /// buf.push_back(3);\n     /// buf.push_back(4);\n     /// buf.push_back(5);\n     /// assert_eq!(buf.get(1).unwrap(), &4);\n@@ -209,7 +209,7 @@ impl<T> RingBuf<T> {\n     /// use std::collections::RingBuf;\n     ///\n     /// let mut buf = RingBuf::new();\n-    /// buf.push_back(3i);\n+    /// buf.push_back(3);\n     /// buf.push_back(4);\n     /// buf.push_back(5);\n     /// match buf.get_mut(1) {\n@@ -243,7 +243,7 @@ impl<T> RingBuf<T> {\n     /// use std::collections::RingBuf;\n     ///\n     /// let mut buf = RingBuf::new();\n-    /// buf.push_back(3i);\n+    /// buf.push_back(3);\n     /// buf.push_back(4);\n     /// buf.push_back(5);\n     /// buf.swap(0, 2);\n@@ -269,7 +269,7 @@ impl<T> RingBuf<T> {\n     /// ```\n     /// use std::collections::RingBuf;\n     ///\n-    /// let buf: RingBuf<int> = RingBuf::with_capacity(10);\n+    /// let buf: RingBuf<i32> = RingBuf::with_capacity(10);\n     /// assert!(buf.capacity() >= 10);\n     /// ```\n     #[inline]\n@@ -292,7 +292,7 @@ impl<T> RingBuf<T> {\n     /// ```\n     /// use std::collections::RingBuf;\n     ///\n-    /// let mut buf: RingBuf<int> = vec![1].into_iter().collect();\n+    /// let mut buf: RingBuf<i32> = vec![1].into_iter().collect();\n     /// buf.reserve_exact(10);\n     /// assert!(buf.capacity() >= 11);\n     /// ```\n@@ -313,7 +313,7 @@ impl<T> RingBuf<T> {\n     /// ```\n     /// use std::collections::RingBuf;\n     ///\n-    /// let mut buf: RingBuf<int> = vec![1].into_iter().collect();\n+    /// let mut buf: RingBuf<i32> = vec![1].into_iter().collect();\n     /// buf.reserve(10);\n     /// assert!(buf.capacity() >= 11);\n     /// ```\n@@ -473,8 +473,8 @@ impl<T> RingBuf<T> {\n     /// use std::collections::RingBuf;\n     ///\n     /// let mut buf = RingBuf::new();\n-    /// buf.push_back(5i);\n-    /// buf.push_back(10i);\n+    /// buf.push_back(5);\n+    /// buf.push_back(10);\n     /// buf.push_back(15);\n     /// buf.truncate(1);\n     /// assert_eq!(buf.len(), 1);\n@@ -496,11 +496,11 @@ impl<T> RingBuf<T> {\n     /// use std::collections::RingBuf;\n     ///\n     /// let mut buf = RingBuf::new();\n-    /// buf.push_back(5i);\n+    /// buf.push_back(5);\n     /// buf.push_back(3);\n     /// buf.push_back(4);\n     /// let b: &[_] = &[&5, &3, &4];\n-    /// assert_eq!(buf.iter().collect::<Vec<&int>>().as_slice(), b);\n+    /// assert_eq!(buf.iter().collect::<Vec<&i32>>().as_slice(), b);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn iter(&self) -> Iter<T> {\n@@ -519,14 +519,14 @@ impl<T> RingBuf<T> {\n     /// use std::collections::RingBuf;\n     ///\n     /// let mut buf = RingBuf::new();\n-    /// buf.push_back(5i);\n+    /// buf.push_back(5);\n     /// buf.push_back(3);\n     /// buf.push_back(4);\n     /// for num in buf.iter_mut() {\n     ///     *num = *num - 2;\n     /// }\n     /// let b: &[_] = &[&mut 3, &mut 1, &mut 2];\n-    /// assert_eq!(&buf.iter_mut().collect::<Vec<&mut int>>()[], b);\n+    /// assert_eq!(&buf.iter_mut().collect::<Vec<&mut i32>>()[], b);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn iter_mut<'a>(&'a mut self) -> IterMut<'a, T> {\n@@ -600,7 +600,7 @@ impl<T> RingBuf<T> {\n     ///\n     /// let mut v = RingBuf::new();\n     /// assert_eq!(v.len(), 0);\n-    /// v.push_back(1i);\n+    /// v.push_back(1);\n     /// assert_eq!(v.len(), 1);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -615,7 +615,7 @@ impl<T> RingBuf<T> {\n     ///\n     /// let mut v = RingBuf::new();\n     /// assert!(v.is_empty());\n-    /// v.push_front(1i);\n+    /// v.push_front(1);\n     /// assert!(!v.is_empty());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -630,7 +630,7 @@ impl<T> RingBuf<T> {\n     /// use std::collections::RingBuf;\n     ///\n     /// let mut v = RingBuf::new();\n-    /// v.push_back(1i);\n+    /// v.push_back(1);\n     /// assert_eq!(v.drain().next(), Some(1));\n     /// assert!(v.is_empty());\n     /// ```\n@@ -651,7 +651,7 @@ impl<T> RingBuf<T> {\n     /// use std::collections::RingBuf;\n     ///\n     /// let mut v = RingBuf::new();\n-    /// v.push_back(1i);\n+    /// v.push_back(1);\n     /// v.clear();\n     /// assert!(v.is_empty());\n     /// ```\n@@ -672,9 +672,9 @@ impl<T> RingBuf<T> {\n     /// let mut d = RingBuf::new();\n     /// assert_eq!(d.front(), None);\n     ///\n-    /// d.push_back(1i);\n-    /// d.push_back(2i);\n-    /// assert_eq!(d.front(), Some(&1i));\n+    /// d.push_back(1);\n+    /// d.push_back(2);\n+    /// assert_eq!(d.front(), Some(&1));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn front(&self) -> Option<&T> {\n@@ -692,13 +692,13 @@ impl<T> RingBuf<T> {\n     /// let mut d = RingBuf::new();\n     /// assert_eq!(d.front_mut(), None);\n     ///\n-    /// d.push_back(1i);\n-    /// d.push_back(2i);\n+    /// d.push_back(1);\n+    /// d.push_back(2);\n     /// match d.front_mut() {\n-    ///     Some(x) => *x = 9i,\n+    ///     Some(x) => *x = 9,\n     ///     None => (),\n     /// }\n-    /// assert_eq!(d.front(), Some(&9i));\n+    /// assert_eq!(d.front(), Some(&9));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn front_mut(&mut self) -> Option<&mut T> {\n@@ -716,9 +716,9 @@ impl<T> RingBuf<T> {\n     /// let mut d = RingBuf::new();\n     /// assert_eq!(d.back(), None);\n     ///\n-    /// d.push_back(1i);\n-    /// d.push_back(2i);\n-    /// assert_eq!(d.back(), Some(&2i));\n+    /// d.push_back(1);\n+    /// d.push_back(2);\n+    /// assert_eq!(d.back(), Some(&2));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn back(&self) -> Option<&T> {\n@@ -736,13 +736,13 @@ impl<T> RingBuf<T> {\n     /// let mut d = RingBuf::new();\n     /// assert_eq!(d.back(), None);\n     ///\n-    /// d.push_back(1i);\n-    /// d.push_back(2i);\n+    /// d.push_back(1);\n+    /// d.push_back(2);\n     /// match d.back_mut() {\n-    ///     Some(x) => *x = 9i,\n+    ///     Some(x) => *x = 9,\n     ///     None => (),\n     /// }\n-    /// assert_eq!(d.back(), Some(&9i));\n+    /// assert_eq!(d.back(), Some(&9));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn back_mut(&mut self) -> Option<&mut T> {\n@@ -759,11 +759,11 @@ impl<T> RingBuf<T> {\n     /// use std::collections::RingBuf;\n     ///\n     /// let mut d = RingBuf::new();\n-    /// d.push_back(1i);\n-    /// d.push_back(2i);\n+    /// d.push_back(1);\n+    /// d.push_back(2);\n     ///\n-    /// assert_eq!(d.pop_front(), Some(1i));\n-    /// assert_eq!(d.pop_front(), Some(2i));\n+    /// assert_eq!(d.pop_front(), Some(1));\n+    /// assert_eq!(d.pop_front(), Some(2));\n     /// assert_eq!(d.pop_front(), None);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -785,9 +785,9 @@ impl<T> RingBuf<T> {\n     /// use std::collections::RingBuf;\n     ///\n     /// let mut d = RingBuf::new();\n-    /// d.push_front(1i);\n-    /// d.push_front(2i);\n-    /// assert_eq!(d.front(), Some(&2i));\n+    /// d.push_front(1);\n+    /// d.push_front(2);\n+    /// assert_eq!(d.front(), Some(&2));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn push_front(&mut self, t: T) {\n@@ -809,7 +809,7 @@ impl<T> RingBuf<T> {\n     /// use std::collections::RingBuf;\n     ///\n     /// let mut buf = RingBuf::new();\n-    /// buf.push_back(1i);\n+    /// buf.push_back(1);\n     /// buf.push_back(3);\n     /// assert_eq!(3, *buf.back().unwrap());\n     /// ```\n@@ -835,7 +835,7 @@ impl<T> RingBuf<T> {\n     ///\n     /// let mut buf = RingBuf::new();\n     /// assert_eq!(buf.pop_back(), None);\n-    /// buf.push_back(1i);\n+    /// buf.push_back(1);\n     /// buf.push_back(3);\n     /// assert_eq!(buf.pop_back(), Some(3));\n     /// ```\n@@ -869,7 +869,7 @@ impl<T> RingBuf<T> {\n     ///\n     /// let mut buf = RingBuf::new();\n     /// assert_eq!(buf.swap_back_remove(0), None);\n-    /// buf.push_back(5i);\n+    /// buf.push_back(5);\n     /// buf.push_back(99);\n     /// buf.push_back(15);\n     /// buf.push_back(20);\n@@ -902,11 +902,11 @@ impl<T> RingBuf<T> {\n     ///\n     /// let mut buf = RingBuf::new();\n     /// assert_eq!(buf.swap_front_remove(0), None);\n-    /// buf.push_back(15i);\n+    /// buf.push_back(15);\n     /// buf.push_back(5);\n     /// buf.push_back(10);\n     /// buf.push_back(99);\n-    /// buf.push_back(20i);\n+    /// buf.push_back(20);\n     /// assert_eq!(buf.swap_front_remove(3), Some(99));\n     /// ```\n     #[unstable(feature = \"collections\",\n@@ -934,7 +934,7 @@ impl<T> RingBuf<T> {\n     /// use std::collections::RingBuf;\n     ///\n     /// let mut buf = RingBuf::new();\n-    /// buf.push_back(10i);\n+    /// buf.push_back(10);\n     /// buf.push_back(12);\n     /// buf.insert(1,11);\n     /// assert_eq!(Some(&11), buf.get(1));\n@@ -1136,9 +1136,9 @@ impl<T> RingBuf<T> {\n     /// use std::collections::RingBuf;\n     ///\n     /// let mut buf = RingBuf::new();\n-    /// buf.push_back(5i);\n-    /// buf.push_back(10i);\n-    /// buf.push_back(12i);\n+    /// buf.push_back(5);\n+    /// buf.push_back(10);\n+    /// buf.push_back(12);\n     /// buf.push_back(15);\n     /// buf.remove(2);\n     /// assert_eq!(Some(&15), buf.get(2));\n@@ -1301,8 +1301,8 @@ impl<T: Clone> RingBuf<T> {\n     /// use std::collections::RingBuf;\n     ///\n     /// let mut buf = RingBuf::new();\n-    /// buf.push_back(5i);\n-    /// buf.push_back(10i);\n+    /// buf.push_back(5);\n+    /// buf.push_back(10);\n     /// buf.push_back(15);\n     /// buf.resize(2, 0);\n     /// buf.resize(6, 20);\n@@ -1650,8 +1650,8 @@ mod tests {\n     fn test_simple() {\n         let mut d = RingBuf::new();\n         assert_eq!(d.len(), 0u);\n-        d.push_front(17i);\n-        d.push_front(42i);\n+        d.push_front(17);\n+        d.push_front(42);\n         d.push_back(137);\n         assert_eq!(d.len(), 3u);\n         d.push_back(137);\n@@ -1769,7 +1769,7 @@ mod tests {\n     fn bench_push_back_100(b: &mut test::Bencher) {\n         let mut deq = RingBuf::with_capacity(101);\n         b.iter(|| {\n-            for i in 0i..100 {\n+            for i in 0..100 {\n                 deq.push_back(i);\n             }\n             deq.head = 0;\n@@ -1781,7 +1781,7 @@ mod tests {\n     fn bench_push_front_100(b: &mut test::Bencher) {\n         let mut deq = RingBuf::with_capacity(101);\n         b.iter(|| {\n-            for i in 0i..100 {\n+            for i in 0..100 {\n                 deq.push_front(i);\n             }\n             deq.head = 0;\n@@ -1791,7 +1791,7 @@ mod tests {\n \n     #[bench]\n     fn bench_pop_back_100(b: &mut test::Bencher) {\n-        let mut deq: RingBuf<int> = RingBuf::with_capacity(101);\n+        let mut deq: RingBuf<i32> = RingBuf::with_capacity(101);\n \n         b.iter(|| {\n             deq.head = 100;\n@@ -1804,7 +1804,7 @@ mod tests {\n \n     #[bench]\n     fn bench_pop_front_100(b: &mut test::Bencher) {\n-        let mut deq: RingBuf<int> = RingBuf::with_capacity(101);\n+        let mut deq: RingBuf<i32> = RingBuf::with_capacity(101);\n \n         b.iter(|| {\n             deq.head = 100;\n@@ -1819,7 +1819,7 @@ mod tests {\n     fn bench_grow_1025(b: &mut test::Bencher) {\n         b.iter(|| {\n             let mut deq = RingBuf::new();\n-            for i in 0i..1025 {\n+            for i in 0..1025 {\n                 deq.push_front(i);\n             }\n             test::black_box(deq);\n@@ -1828,7 +1828,7 @@ mod tests {\n \n     #[bench]\n     fn bench_iter_1000(b: &mut test::Bencher) {\n-        let ring: RingBuf<int> = (0i..1000).collect();\n+        let ring: RingBuf<i32> = (0..1000).collect();\n \n         b.iter(|| {\n             let mut sum = 0;\n@@ -1841,7 +1841,7 @@ mod tests {\n \n     #[bench]\n     fn bench_mut_iter_1000(b: &mut test::Bencher) {\n-        let mut ring: RingBuf<int> = (0i..1000).collect();\n+        let mut ring: RingBuf<i32> = (0..1000).collect();\n \n         b.iter(|| {\n             let mut sum = 0;\n@@ -1854,28 +1854,28 @@ mod tests {\n \n     #[derive(Clone, PartialEq, Debug)]\n     enum Taggy {\n-        One(int),\n-        Two(int, int),\n-        Three(int, int, int),\n+        One(i32),\n+        Two(i32, i32),\n+        Three(i32, i32, i32),\n     }\n \n     #[derive(Clone, PartialEq, Debug)]\n     enum Taggypar<T> {\n-        Onepar(int),\n-        Twopar(int, int),\n-        Threepar(int, int, int),\n+        Onepar(i32),\n+        Twopar(i32, i32),\n+        Threepar(i32, i32, i32),\n     }\n \n     #[derive(Clone, PartialEq, Debug)]\n     struct RecCy {\n-        x: int,\n-        y: int,\n+        x: i32,\n+        y: i32,\n         t: Taggy\n     }\n \n     #[test]\n     fn test_param_int() {\n-        test_parameterized::<int>(5, 72, 64, 175);\n+        test_parameterized::<i32>(5, 72, 64, 175);\n     }\n \n     #[test]\n@@ -1885,10 +1885,10 @@ mod tests {\n \n     #[test]\n     fn test_param_taggypar() {\n-        test_parameterized::<Taggypar<int>>(Onepar::<int>(1),\n-                                            Twopar::<int>(1, 2),\n-                                            Threepar::<int>(1, 2, 3),\n-                                            Twopar::<int>(17, 42));\n+        test_parameterized::<Taggypar<i32>>(Onepar::<i32>(1),\n+                                            Twopar::<i32>(1, 2),\n+                                            Threepar::<i32>(1, 2, 3),\n+                                            Twopar::<i32>(17, 42));\n     }\n \n     #[test]\n@@ -1903,17 +1903,17 @@ mod tests {\n     #[test]\n     fn test_with_capacity() {\n         let mut d = RingBuf::with_capacity(0);\n-        d.push_back(1i);\n+        d.push_back(1);\n         assert_eq!(d.len(), 1);\n         let mut d = RingBuf::with_capacity(50);\n-        d.push_back(1i);\n+        d.push_back(1);\n         assert_eq!(d.len(), 1);\n     }\n \n     #[test]\n     fn test_with_capacity_non_power_two() {\n         let mut d3 = RingBuf::with_capacity(3);\n-        d3.push_back(1i);\n+        d3.push_back(1);\n \n         // X = None, | = lo\n         // [|1, X, X]\n@@ -1977,10 +1977,10 @@ mod tests {\n \n     #[test]\n     fn test_swap() {\n-        let mut d: RingBuf<int> = (0i..5).collect();\n+        let mut d: RingBuf<i32> = (0..5).collect();\n         d.pop_front();\n         d.swap(0, 3);\n-        assert_eq!(d.iter().map(|&x|x).collect::<Vec<int>>(), vec!(4, 2, 3, 1));\n+        assert_eq!(d.iter().map(|&x|x).collect::<Vec<i32>>(), vec!(4, 2, 3, 1));\n     }\n \n     #[test]\n@@ -1989,20 +1989,20 @@ mod tests {\n         assert_eq!(d.iter().next(), None);\n         assert_eq!(d.iter().size_hint(), (0, Some(0)));\n \n-        for i in 0i..5 {\n+        for i in 0..5 {\n             d.push_back(i);\n         }\n         {\n             let b: &[_] = &[&0,&1,&2,&3,&4];\n-            assert_eq!(d.iter().collect::<Vec<&int>>(), b);\n+            assert_eq!(d.iter().collect::<Vec<&i32>>(), b);\n         }\n \n-        for i in 6i..9 {\n+        for i in 6..9 {\n             d.push_front(i);\n         }\n         {\n             let b: &[_] = &[&8,&7,&6,&0,&1,&2,&3,&4];\n-            assert_eq!(d.iter().collect::<Vec<&int>>(), b);\n+            assert_eq!(d.iter().collect::<Vec<&i32>>(), b);\n         }\n \n         let mut it = d.iter();\n@@ -2020,33 +2020,33 @@ mod tests {\n         let mut d = RingBuf::new();\n         assert_eq!(d.iter().rev().next(), None);\n \n-        for i in 0i..5 {\n+        for i in 0..5 {\n             d.push_back(i);\n         }\n         {\n             let b: &[_] = &[&4,&3,&2,&1,&0];\n-            assert_eq!(d.iter().rev().collect::<Vec<&int>>(), b);\n+            assert_eq!(d.iter().rev().collect::<Vec<&i32>>(), b);\n         }\n \n-        for i in 6i..9 {\n+        for i in 6..9 {\n             d.push_front(i);\n         }\n         let b: &[_] = &[&4,&3,&2,&1,&0,&6,&7,&8];\n-        assert_eq!(d.iter().rev().collect::<Vec<&int>>(), b);\n+        assert_eq!(d.iter().rev().collect::<Vec<&i32>>(), b);\n     }\n \n     #[test]\n     fn test_mut_rev_iter_wrap() {\n         let mut d = RingBuf::with_capacity(3);\n         assert!(d.iter_mut().rev().next().is_none());\n \n-        d.push_back(1i);\n+        d.push_back(1);\n         d.push_back(2);\n         d.push_back(3);\n         assert_eq!(d.pop_front(), Some(1));\n         d.push_back(4);\n \n-        assert_eq!(d.iter_mut().rev().map(|x| *x).collect::<Vec<int>>(),\n+        assert_eq!(d.iter_mut().rev().map(|x| *x).collect::<Vec<i32>>(),\n                    vec!(4, 3, 2));\n     }\n \n@@ -2101,7 +2101,7 @@ mod tests {\n \n         // Empty iter\n         {\n-            let d: RingBuf<int> = RingBuf::new();\n+            let d: RingBuf<i32> = RingBuf::new();\n             let mut iter = d.into_iter();\n \n             assert_eq!(iter.size_hint(), (0, Some(0)));\n@@ -2112,35 +2112,35 @@ mod tests {\n         // simple iter\n         {\n             let mut d = RingBuf::new();\n-            for i in 0i..5 {\n+            for i in 0..5 {\n                 d.push_back(i);\n             }\n \n             let b = vec![0,1,2,3,4];\n-            assert_eq!(d.into_iter().collect::<Vec<int>>(), b);\n+            assert_eq!(d.into_iter().collect::<Vec<i32>>(), b);\n         }\n \n         // wrapped iter\n         {\n             let mut d = RingBuf::new();\n-            for i in 0i..5 {\n+            for i in 0..5 {\n                 d.push_back(i);\n             }\n-            for i in 6i..9 {\n+            for i in 6..9 {\n                 d.push_front(i);\n             }\n \n             let b = vec![8,7,6,0,1,2,3,4];\n-            assert_eq!(d.into_iter().collect::<Vec<int>>(), b);\n+            assert_eq!(d.into_iter().collect::<Vec<i32>>(), b);\n         }\n \n         // partially used\n         {\n             let mut d = RingBuf::new();\n-            for i in 0i..5 {\n+            for i in 0..5 {\n                 d.push_back(i);\n             }\n-            for i in 6i..9 {\n+            for i in 6..9 {\n                 d.push_front(i);\n             }\n \n@@ -2160,7 +2160,7 @@ mod tests {\n \n         // Empty iter\n         {\n-            let mut d: RingBuf<int> = RingBuf::new();\n+            let mut d: RingBuf<i32> = RingBuf::new();\n \n             {\n                 let mut iter = d.drain();\n@@ -2176,32 +2176,32 @@ mod tests {\n         // simple iter\n         {\n             let mut d = RingBuf::new();\n-            for i in 0i..5 {\n+            for i in 0..5 {\n                 d.push_back(i);\n             }\n \n-            assert_eq!(d.drain().collect::<Vec<int>>(), [0, 1, 2, 3, 4]);\n+            assert_eq!(d.drain().collect::<Vec<i32>>(), [0, 1, 2, 3, 4]);\n             assert!(d.is_empty());\n         }\n \n         // wrapped iter\n         {\n             let mut d = RingBuf::new();\n-            for i in 0i..5 {\n+            for i in 0..5 {\n                 d.push_back(i);\n             }\n             for i in 6i..9 {\n                 d.push_front(i);\n             }\n \n-            assert_eq!(d.drain().collect::<Vec<int>>(), [8,7,6,0,1,2,3,4]);\n+            assert_eq!(d.drain().collect::<Vec<i32>>(), [8,7,6,0,1,2,3,4]);\n             assert!(d.is_empty());\n         }\n \n         // partially used\n         {\n             let mut d = RingBuf::new();\n-            for i in 0i..5 {\n+            for i in 0..5 {\n                 d.push_back(i);\n             }\n             for i in 6i..9 {\n@@ -2225,9 +2225,9 @@ mod tests {\n     #[test]\n     fn test_from_iter() {\n         use core::iter;\n-        let v = vec!(1i,2,3,4,5,6,7);\n-        let deq: RingBuf<int> = v.iter().map(|&x| x).collect();\n-        let u: Vec<int> = deq.iter().map(|&x| x).collect();\n+        let v = vec!(1,2,3,4,5,6,7);\n+        let deq: RingBuf<i32> = v.iter().map(|&x| x).collect();\n+        let u: Vec<i32> = deq.iter().map(|&x| x).collect();\n         assert_eq!(u, v);\n \n         let seq = iter::count(0u, 2).take(256);\n@@ -2241,7 +2241,7 @@ mod tests {\n     #[test]\n     fn test_clone() {\n         let mut d = RingBuf::new();\n-        d.push_front(17i);\n+        d.push_front(17);\n         d.push_front(42);\n         d.push_back(137);\n         d.push_back(137);\n@@ -2259,7 +2259,7 @@ mod tests {\n     fn test_eq() {\n         let mut d = RingBuf::new();\n         assert!(d == RingBuf::with_capacity(0));\n-        d.push_front(137i);\n+        d.push_front(137);\n         d.push_front(17);\n         d.push_front(42);\n         d.push_back(137);\n@@ -2281,12 +2281,12 @@ mod tests {\n       let mut x = RingBuf::new();\n       let mut y = RingBuf::new();\n \n-      x.push_back(1i);\n+      x.push_back(1);\n       x.push_back(2);\n       x.push_back(3);\n \n-      y.push_back(0i);\n-      y.push_back(1i);\n+      y.push_back(0);\n+      y.push_back(1);\n       y.pop_front();\n       y.push_back(2);\n       y.push_back(3);\n@@ -2298,7 +2298,7 @@ mod tests {\n     fn test_ord() {\n         let x = RingBuf::new();\n         let mut y = RingBuf::new();\n-        y.push_back(1i);\n+        y.push_back(1);\n         y.push_back(2);\n         y.push_back(3);\n         assert!(x < y);\n@@ -2309,7 +2309,7 @@ mod tests {\n \n     #[test]\n     fn test_show() {\n-        let ringbuf: RingBuf<int> = (0i..10).collect();\n+        let ringbuf: RingBuf<i32> = (0..10).collect();\n         assert_eq!(format!(\"{:?}\", ringbuf), \"RingBuf [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\");\n \n         let ringbuf: RingBuf<&str> = vec![\"just\", \"one\", \"test\", \"more\"].iter()\n@@ -2389,49 +2389,49 @@ mod tests {\n         // test growth path A\n         // [T o o H] -> [T o o H . . . . ]\n         let mut ring = RingBuf::with_capacity(4);\n-        for i in 0i..3 {\n+        for i in 0..3 {\n             ring.push_back(i);\n         }\n         ring.reserve(7);\n-        for i in 0i..3 {\n+        for i in 0..3 {\n             assert_eq!(ring.pop_front(), Some(i));\n         }\n \n         // test growth path B\n         // [H T o o] -> [. T o o H . . . ]\n         let mut ring = RingBuf::with_capacity(4);\n-        for i in 0i..1 {\n+        for i in 0..1 {\n             ring.push_back(i);\n             assert_eq!(ring.pop_front(), Some(i));\n         }\n-        for i in 0i..3 {\n+        for i in 0..3 {\n             ring.push_back(i);\n         }\n         ring.reserve(7);\n-        for i in 0i..3 {\n+        for i in 0..3 {\n             assert_eq!(ring.pop_front(), Some(i));\n         }\n \n         // test growth path C\n         // [o o H T] -> [o o H . . . . T ]\n         let mut ring = RingBuf::with_capacity(4);\n-        for i in 0i..3 {\n+        for i in 0..3 {\n             ring.push_back(i);\n             assert_eq!(ring.pop_front(), Some(i));\n         }\n-        for i in 0i..3 {\n+        for i in 0..3 {\n             ring.push_back(i);\n         }\n         ring.reserve(7);\n-        for i in 0i..3 {\n+        for i in 0..3 {\n             assert_eq!(ring.pop_front(), Some(i));\n         }\n     }\n \n     #[test]\n     fn test_get() {\n         let mut ring = RingBuf::new();\n-        ring.push_back(0i);\n+        ring.push_back(0);\n         assert_eq!(ring.get(0), Some(&0));\n         assert_eq!(ring.get(1), None);\n \n@@ -2463,7 +2463,7 @@ mod tests {\n     #[test]\n     fn test_get_mut() {\n         let mut ring = RingBuf::new();\n-        for i in 0i..3 {\n+        for i in 0..3 {\n             ring.push_back(i);\n         }\n \n@@ -2633,8 +2633,8 @@ mod tests {\n     #[test]\n     fn test_front() {\n         let mut ring = RingBuf::new();\n-        ring.push_back(10i);\n-        ring.push_back(20i);\n+        ring.push_back(10);\n+        ring.push_back(20);\n         assert_eq!(ring.front(), Some(&10));\n         ring.pop_front();\n         assert_eq!(ring.front(), Some(&20));\n@@ -2644,7 +2644,7 @@ mod tests {\n \n     #[test]\n     fn test_as_slices() {\n-        let mut ring: RingBuf<int> = RingBuf::with_capacity(127);\n+        let mut ring: RingBuf<i32> = RingBuf::with_capacity(127);\n         let cap = ring.capacity() as int;\n         let first = cap/2;\n         let last  = cap - first;\n@@ -2672,7 +2672,7 @@ mod tests {\n \n     #[test]\n     fn test_as_mut_slices() {\n-        let mut ring: RingBuf<int> = RingBuf::with_capacity(127);\n+        let mut ring: RingBuf<i32> = RingBuf::with_capacity(127);\n         let cap = ring.capacity() as int;\n         let first = cap/2;\n         let last  = cap - first;"}, {"sha": "3813edf790b5ea24b5a4714165c01ae598cf3c84", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 190, "deletions": 190, "changes": 380, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -15,7 +15,7 @@\n //!\n //! ```rust\n //! // slicing a Vec\n-//! let vec = vec!(1i, 2, 3);\n+//! let vec = vec!(1, 2, 3);\n //! let int_slice = vec.as_slice();\n //! // coercing an array to a slice\n //! let str_slice: &[&str] = &[\"one\", \"two\", \"three\"];\n@@ -26,7 +26,7 @@\n //! block of memory that a mutable slice points to:\n //!\n //! ```rust\n-//! let x: &mut[int] = &mut [1i, 2, 3];\n+//! let x: &mut[int] = &mut [1, 2, 3];\n //! x[1] = 7;\n //! assert_eq!(x[0], 1);\n //! assert_eq!(x[1], 7);\n@@ -54,9 +54,9 @@\n //! ```rust\n //! #![feature(slicing_syntax)]\n //! fn main() {\n-//!     let numbers = [0i, 1i, 2i];\n+//!     let numbers = [0, 1, 2];\n //!     let last_numbers = &numbers[1..3];\n-//!     // last_numbers is now &[1i, 2i]\n+//!     // last_numbers is now &[1, 2]\n //! }\n //! ```\n //!\n@@ -76,7 +76,7 @@\n //! type of the slice is `int`, the element type of the iterator is `&int`.\n //!\n //! ```rust\n-//! let numbers = [0i, 1i, 2i];\n+//! let numbers = [0, 1, 2];\n //! for &x in numbers.iter() {\n //!     println!(\"{} is a number!\", x);\n //! }\n@@ -134,7 +134,7 @@ pub trait SliceExt {\n     /// # Examples\n     ///\n     /// ```rust\n-    /// let mut v = [5i, 4, 1, 3, 2];\n+    /// let mut v = [5, 4, 1, 3, 2];\n     /// v.sort_by(|a, b| a.cmp(b));\n     /// assert!(v == [1, 2, 3, 4, 5]);\n     ///\n@@ -160,11 +160,11 @@ pub trait SliceExt {\n     /// # Examples\n     ///\n     /// ```rust\n-    /// let mut a = [1i, 2, 3, 4, 5];\n-    /// let b = vec![6i, 7, 8];\n+    /// let mut a = [1, 2, 3, 4, 5];\n+    /// let b = vec![6, 7, 8];\n     /// let num_moved = a.move_from(b, 0, 3);\n     /// assert_eq!(num_moved, 3);\n-    /// assert!(a == [6i, 7, 8, 4, 5]);\n+    /// assert!(a == [6, 7, 8, 4, 5]);\n     /// ```\n     #[unstable(feature = \"collections\",\n                reason = \"uncertain about this API approach\")]\n@@ -282,7 +282,7 @@ pub trait SliceExt {\n     /// `[3,4]`):\n     ///\n     /// ```rust\n-    /// let v = &[1i, 2, 3, 4];\n+    /// let v = &[1, 2, 3, 4];\n     /// for win in v.windows(2) {\n     ///     println!(\"{:?}\", win);\n     /// }\n@@ -305,7 +305,7 @@ pub trait SliceExt {\n     /// `[3,4]`, `[5]`):\n     ///\n     /// ```rust\n-    /// let v = &[1i, 2, 3, 4, 5];\n+    /// let v = &[1, 2, 3, 4, 5];\n     /// for win in v.chunks(2) {\n     ///     println!(\"{:?}\", win);\n     /// }\n@@ -396,7 +396,7 @@ pub trait SliceExt {\n     /// found; the fourth could match any position in `[1,4]`.\n     ///\n     /// ```rust\n-    /// let s = [0i, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55];\n+    /// let s = [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55];\n     /// let s = s.as_slice();\n     ///\n     /// let seek = 13;\n@@ -418,7 +418,7 @@ pub trait SliceExt {\n     /// # Example\n     ///\n     /// ```\n-    /// let a = [1i, 2, 3];\n+    /// let a = [1, 2, 3];\n     /// assert_eq!(a.len(), 3);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -429,7 +429,7 @@ pub trait SliceExt {\n     /// # Example\n     ///\n     /// ```\n-    /// let a = [1i, 2, 3];\n+    /// let a = [1, 2, 3];\n     /// assert!(!a.is_empty());\n     /// ```\n     #[inline]\n@@ -551,24 +551,24 @@ pub trait SliceExt {\n     /// # Example\n     ///\n     /// ```rust\n-    /// let mut v = [1i, 2, 3, 4, 5, 6];\n+    /// let mut v = [1, 2, 3, 4, 5, 6];\n     ///\n     /// // scoped to restrict the lifetime of the borrows\n     /// {\n     ///    let (left, right) = v.split_at_mut(0);\n     ///    assert!(left == []);\n-    ///    assert!(right == [1i, 2, 3, 4, 5, 6]);\n+    ///    assert!(right == [1, 2, 3, 4, 5, 6]);\n     /// }\n     ///\n     /// {\n     ///     let (left, right) = v.split_at_mut(2);\n-    ///     assert!(left == [1i, 2]);\n-    ///     assert!(right == [3i, 4, 5, 6]);\n+    ///     assert!(left == [1, 2]);\n+    ///     assert!(right == [3, 4, 5, 6]);\n     /// }\n     ///\n     /// {\n     ///     let (left, right) = v.split_at_mut(6);\n-    ///     assert!(left == [1i, 2, 3, 4, 5, 6]);\n+    ///     assert!(left == [1, 2, 3, 4, 5, 6]);\n     ///     assert!(right == []);\n     /// }\n     /// ```\n@@ -580,9 +580,9 @@ pub trait SliceExt {\n     /// # Example\n     ///\n     /// ```rust\n-    /// let mut v = [1i, 2, 3];\n+    /// let mut v = [1, 2, 3];\n     /// v.reverse();\n-    /// assert!(v == [3i, 2, 1]);\n+    /// assert!(v == [3, 2, 1]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn reverse(&mut self);\n@@ -612,7 +612,7 @@ pub trait SliceExt {\n     /// # Examples\n     ///\n     /// ```rust\n-    /// let v = [1i, 2, 3];\n+    /// let v = [1, 2, 3];\n     /// let mut perms = v.permutations();\n     ///\n     /// for p in perms {\n@@ -623,12 +623,12 @@ pub trait SliceExt {\n     /// Iterating through permutations one by one.\n     ///\n     /// ```rust\n-    /// let v = [1i, 2, 3];\n+    /// let v = [1, 2, 3];\n     /// let mut perms = v.permutations();\n     ///\n-    /// assert_eq!(Some(vec![1i, 2, 3]), perms.next());\n-    /// assert_eq!(Some(vec![1i, 3, 2]), perms.next());\n-    /// assert_eq!(Some(vec![3i, 1, 2]), perms.next());\n+    /// assert_eq!(Some(vec![1, 2, 3]), perms.next());\n+    /// assert_eq!(Some(vec![1, 3, 2]), perms.next());\n+    /// assert_eq!(Some(vec![3, 1, 2]), perms.next());\n     /// ```\n     #[unstable(feature = \"collections\")]\n     fn permutations(&self) -> Permutations<Self::Item> where Self::Item: Clone;\n@@ -640,15 +640,15 @@ pub trait SliceExt {\n     /// # Example\n     ///\n     /// ```rust\n-    /// let mut dst = [0i, 0, 0];\n-    /// let src = [1i, 2];\n+    /// let mut dst = [0, 0, 0];\n+    /// let src = [1, 2];\n     ///\n     /// assert!(dst.clone_from_slice(&src) == 2);\n     /// assert!(dst == [1, 2, 0]);\n     ///\n-    /// let src2 = [3i, 4, 5, 6];\n+    /// let src2 = [3, 4, 5, 6];\n     /// assert!(dst.clone_from_slice(&src2) == 3);\n-    /// assert!(dst == [3i, 4, 5]);\n+    /// assert!(dst == [3, 4, 5]);\n     /// ```\n     #[unstable(feature = \"collections\")]\n     fn clone_from_slice(&mut self, &[Self::Item]) -> uint where Self::Item: Clone;\n@@ -660,10 +660,10 @@ pub trait SliceExt {\n     /// # Examples\n     ///\n     /// ```rust\n-    /// let mut v = [-5i, 4, 1, -3, 2];\n+    /// let mut v = [-5, 4, 1, -3, 2];\n     ///\n     /// v.sort();\n-    /// assert!(v == [-5i, -3, 1, 2, 4]);\n+    /// assert!(v == [-5, -3, 1, 2, 4]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn sort(&mut self) where Self::Item: Ord;\n@@ -682,7 +682,7 @@ pub trait SliceExt {\n     /// found; the fourth could match any position in `[1,4]`.\n     ///\n     /// ```rust\n-    /// let s = [0i, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55];\n+    /// let s = [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55];\n     /// let s = s.as_slice();\n     ///\n     /// assert_eq!(s.binary_search(&13),  Ok(9));\n@@ -709,12 +709,12 @@ pub trait SliceExt {\n     /// # Example\n     ///\n     /// ```rust\n-    /// let v: &mut [_] = &mut [0i, 1, 2];\n+    /// let v: &mut [_] = &mut [0, 1, 2];\n     /// v.next_permutation();\n-    /// let b: &mut [_] = &mut [0i, 2, 1];\n+    /// let b: &mut [_] = &mut [0, 2, 1];\n     /// assert!(v == b);\n     /// v.next_permutation();\n-    /// let b: &mut [_] = &mut [1i, 0, 2];\n+    /// let b: &mut [_] = &mut [1, 0, 2];\n     /// assert!(v == b);\n     /// ```\n     #[unstable(feature = \"collections\",\n@@ -729,12 +729,12 @@ pub trait SliceExt {\n     /// # Example\n     ///\n     /// ```rust\n-    /// let v: &mut [_] = &mut [1i, 0, 2];\n+    /// let v: &mut [_] = &mut [1, 0, 2];\n     /// v.prev_permutation();\n-    /// let b: &mut [_] = &mut [0i, 2, 1];\n+    /// let b: &mut [_] = &mut [0, 2, 1];\n     /// assert!(v == b);\n     /// v.prev_permutation();\n-    /// let b: &mut [_] = &mut [0i, 1, 2];\n+    /// let b: &mut [_] = &mut [0, 1, 2];\n     /// assert!(v == b);\n     /// ```\n     #[unstable(feature = \"collections\",\n@@ -1576,7 +1576,7 @@ mod tests {\n     fn test_is_empty() {\n         let xs: [int; 0] = [];\n         assert!(xs.is_empty());\n-        assert!(![0i].is_empty());\n+        assert!(![0].is_empty());\n     }\n \n     #[test]\n@@ -1593,50 +1593,50 @@ mod tests {\n \n     #[test]\n     fn test_get() {\n-        let mut a = vec![11i];\n+        let mut a = vec![11];\n         assert_eq!(a.get(1), None);\n-        a = vec![11i, 12];\n+        a = vec![11, 12];\n         assert_eq!(a.get(1).unwrap(), &12);\n-        a = vec![11i, 12, 13];\n+        a = vec![11, 12, 13];\n         assert_eq!(a.get(1).unwrap(), &12);\n     }\n \n     #[test]\n     fn test_first() {\n         let mut a = vec![];\n         assert_eq!(a.first(), None);\n-        a = vec![11i];\n+        a = vec![11];\n         assert_eq!(a.first().unwrap(), &11);\n-        a = vec![11i, 12];\n+        a = vec![11, 12];\n         assert_eq!(a.first().unwrap(), &11);\n     }\n \n     #[test]\n     fn test_first_mut() {\n         let mut a = vec![];\n         assert_eq!(a.first_mut(), None);\n-        a = vec![11i];\n+        a = vec![11];\n         assert_eq!(*a.first_mut().unwrap(), 11);\n-        a = vec![11i, 12];\n+        a = vec![11, 12];\n         assert_eq!(*a.first_mut().unwrap(), 11);\n     }\n \n     #[test]\n     fn test_tail() {\n-        let mut a = vec![11i];\n+        let mut a = vec![11];\n         let b: &[int] = &[];\n         assert_eq!(a.tail(), b);\n-        a = vec![11i, 12];\n+        a = vec![11, 12];\n         let b: &[int] = &[12];\n         assert_eq!(a.tail(), b);\n     }\n \n     #[test]\n     fn test_tail_mut() {\n-        let mut a = vec![11i];\n+        let mut a = vec![11];\n         let b: &mut [int] = &mut [];\n         assert!(a.tail_mut() == b);\n-        a = vec![11i, 12];\n+        a = vec![11, 12];\n         let b: &mut [int] = &mut [12];\n         assert!(a.tail_mut() == b);\n     }\n@@ -1657,20 +1657,20 @@ mod tests {\n \n     #[test]\n     fn test_init() {\n-        let mut a = vec![11i];\n+        let mut a = vec![11];\n         let b: &[int] = &[];\n         assert_eq!(a.init(), b);\n-        a = vec![11i, 12];\n+        a = vec![11, 12];\n         let b: &[int] = &[11];\n         assert_eq!(a.init(), b);\n     }\n \n     #[test]\n     fn test_init_mut() {\n-        let mut a = vec![11i];\n+        let mut a = vec![11];\n         let b: &mut [int] = &mut [];\n         assert!(a.init_mut() == b);\n-        a = vec![11i, 12];\n+        a = vec![11, 12];\n         let b: &mut [int] = &mut [11];\n         assert!(a.init_mut() == b);\n     }\n@@ -1693,26 +1693,26 @@ mod tests {\n     fn test_last() {\n         let mut a = vec![];\n         assert_eq!(a.last(), None);\n-        a = vec![11i];\n+        a = vec![11];\n         assert_eq!(a.last().unwrap(), &11);\n-        a = vec![11i, 12];\n+        a = vec![11, 12];\n         assert_eq!(a.last().unwrap(), &12);\n     }\n \n     #[test]\n     fn test_last_mut() {\n         let mut a = vec![];\n         assert_eq!(a.last_mut(), None);\n-        a = vec![11i];\n+        a = vec![11];\n         assert_eq!(*a.last_mut().unwrap(), 11);\n-        a = vec![11i, 12];\n+        a = vec![11, 12];\n         assert_eq!(*a.last_mut().unwrap(), 12);\n     }\n \n     #[test]\n     fn test_slice() {\n         // Test fixed length vector.\n-        let vec_fixed = [1i, 2, 3, 4];\n+        let vec_fixed = [1, 2, 3, 4];\n         let v_a = vec_fixed[1u..vec_fixed.len()].to_vec();\n         assert_eq!(v_a.len(), 3u);\n         let v_a = v_a.as_slice();\n@@ -1721,15 +1721,15 @@ mod tests {\n         assert_eq!(v_a[2], 4);\n \n         // Test on stack.\n-        let vec_stack: &[_] = &[1i, 2, 3];\n+        let vec_stack: &[_] = &[1, 2, 3];\n         let v_b = vec_stack[1u..3u].to_vec();\n         assert_eq!(v_b.len(), 2u);\n         let v_b = v_b.as_slice();\n         assert_eq!(v_b[0], 2);\n         assert_eq!(v_b[1], 3);\n \n         // Test `Box<[T]>`\n-        let vec_unique = vec![1i, 2, 3, 4, 5, 6];\n+        let vec_unique = vec![1, 2, 3, 4, 5, 6];\n         let v_d = vec_unique[1u..6u].to_vec();\n         assert_eq!(v_d.len(), 5u);\n         let v_d = v_d.as_slice();\n@@ -1763,7 +1763,7 @@ mod tests {\n \n     #[test]\n     fn test_pop() {\n-        let mut v = vec![5i];\n+        let mut v = vec![5];\n         let e = v.pop();\n         assert_eq!(v.len(), 0);\n         assert_eq!(e, Some(5));\n@@ -1775,19 +1775,19 @@ mod tests {\n \n     #[test]\n     fn test_swap_remove() {\n-        let mut v = vec![1i, 2, 3, 4, 5];\n+        let mut v = vec![1, 2, 3, 4, 5];\n         let mut e = v.swap_remove(0);\n         assert_eq!(e, 1);\n-        assert_eq!(v, vec![5i, 2, 3, 4]);\n+        assert_eq!(v, vec![5, 2, 3, 4]);\n         e = v.swap_remove(3);\n         assert_eq!(e, 4);\n-        assert_eq!(v, vec![5i, 2, 3]);\n+        assert_eq!(v, vec![5, 2, 3]);\n     }\n \n     #[test]\n     #[should_fail]\n     fn test_swap_remove_fail() {\n-        let mut v = vec![1i];\n+        let mut v = vec![1];\n         let _ = v.swap_remove(0);\n         let _ = v.swap_remove(0);\n     }\n@@ -1811,20 +1811,20 @@ mod tests {\n     fn test_push() {\n         // Test on-stack push().\n         let mut v = vec![];\n-        v.push(1i);\n+        v.push(1);\n         assert_eq!(v.len(), 1u);\n         assert_eq!(v.as_slice()[0], 1);\n \n         // Test on-heap push().\n-        v.push(2i);\n+        v.push(2);\n         assert_eq!(v.len(), 2u);\n         assert_eq!(v.as_slice()[0], 1);\n         assert_eq!(v.as_slice()[1], 2);\n     }\n \n     #[test]\n     fn test_truncate() {\n-        let mut v = vec![box 6i,box 5,box 4];\n+        let mut v = vec![box 6,box 5,box 4];\n         v.truncate(1);\n         let v = v.as_slice();\n         assert_eq!(v.len(), 1);\n@@ -1834,7 +1834,7 @@ mod tests {\n \n     #[test]\n     fn test_clear() {\n-        let mut v = vec![box 6i,box 5,box 4];\n+        let mut v = vec![box 6,box 5,box 4];\n         v.clear();\n         assert_eq!(v.len(), 0);\n         // If the unsafe block didn't drop things properly, we blow up here.\n@@ -1859,11 +1859,11 @@ mod tests {\n \n     #[test]\n     fn test_dedup_unique() {\n-        let mut v0 = vec![box 1i, box 1, box 2, box 3];\n+        let mut v0 = vec![box 1, box 1, box 2, box 3];\n         v0.dedup();\n-        let mut v1 = vec![box 1i, box 2, box 2, box 3];\n+        let mut v1 = vec![box 1, box 2, box 2, box 3];\n         v1.dedup();\n-        let mut v2 = vec![box 1i, box 2, box 3, box 3];\n+        let mut v2 = vec![box 1, box 2, box 3, box 3];\n         v2.dedup();\n         /*\n          * If the boxed pointers were leaked or otherwise misused, valgrind\n@@ -1873,11 +1873,11 @@ mod tests {\n \n     #[test]\n     fn test_dedup_shared() {\n-        let mut v0 = vec![box 1i, box 1, box 2, box 3];\n+        let mut v0 = vec![box 1, box 1, box 2, box 3];\n         v0.dedup();\n-        let mut v1 = vec![box 1i, box 2, box 2, box 3];\n+        let mut v1 = vec![box 1, box 2, box 2, box 3];\n         v1.dedup();\n-        let mut v2 = vec![box 1i, box 2, box 3, box 3];\n+        let mut v2 = vec![box 1, box 2, box 3, box 3];\n         v2.dedup();\n         /*\n          * If the pointers were leaked or otherwise misused, valgrind and/or\n@@ -1894,7 +1894,7 @@ mod tests {\n \n     #[test]\n     fn test_element_swaps() {\n-        let mut v = [1i, 2, 3];\n+        let mut v = [1, 2, 3];\n         for (i, (a, b)) in ElementSwaps::new(v.len()).enumerate() {\n             v.swap(a, b);\n             match i {\n@@ -1930,7 +1930,7 @@ mod tests {\n             assert_eq!(it.next(), None);\n         }\n         {\n-            let v = [1i, 2, 3];\n+            let v = [1, 2, 3];\n             let mut it = v.permutations();\n             let (min_size, max_opt) = it.size_hint();\n             assert_eq!(min_size, 3*2);\n@@ -1964,7 +1964,7 @@ mod tests {\n \n     #[test]\n     fn test_lexicographic_permutations() {\n-        let v : &mut[int] = &mut[1i, 2, 3, 4, 5];\n+        let v : &mut[int] = &mut[1, 2, 3, 4, 5];\n         assert!(v.prev_permutation() == false);\n         assert!(v.next_permutation());\n         let b: &mut[int] = &mut[1, 2, 3, 5, 4];\n@@ -1980,7 +1980,7 @@ mod tests {\n         let b: &mut[int] = &mut[1, 2, 4, 5, 3];\n         assert!(v == b);\n \n-        let v : &mut[int] = &mut[1i, 0, 0, 0];\n+        let v : &mut[int] = &mut[1, 0, 0, 0];\n         assert!(v.next_permutation() == false);\n         assert!(v.prev_permutation());\n         let b: &mut[int] = &mut[0, 1, 0, 0];\n@@ -2003,14 +2003,14 @@ mod tests {\n         assert!(empty.prev_permutation() == false);\n         assert!(empty == b);\n \n-        let one_elem : &mut[int] = &mut[4i];\n+        let one_elem : &mut[int] = &mut[4];\n         assert!(one_elem.prev_permutation() == false);\n         let b: &mut[int] = &mut[4];\n         assert!(one_elem == b);\n         assert!(one_elem.next_permutation() == false);\n         assert!(one_elem == b);\n \n-        let two_elem : &mut[int] = &mut[1i, 2];\n+        let two_elem : &mut[int] = &mut[1, 2];\n         assert!(two_elem.prev_permutation() == false);\n         let b : &mut[int] = &mut[1, 2];\n         let c : &mut[int] = &mut[2, 1];\n@@ -2027,9 +2027,9 @@ mod tests {\n \n     #[test]\n     fn test_position_elem() {\n-        assert!([].position_elem(&1i).is_none());\n+        assert!([].position_elem(&1).is_none());\n \n-        let v1 = vec![1i, 2, 3, 3, 2, 5];\n+        let v1 = vec![1, 2, 3, 3, 2, 5];\n         assert_eq!(v1.position_elem(&1), Some(0u));\n         assert_eq!(v1.position_elem(&2), Some(1u));\n         assert_eq!(v1.position_elem(&5), Some(5u));\n@@ -2038,52 +2038,52 @@ mod tests {\n \n     #[test]\n     fn test_binary_search() {\n-        assert_eq!([1i,2,3,4,5].binary_search(&5).ok(), Some(4));\n-        assert_eq!([1i,2,3,4,5].binary_search(&4).ok(), Some(3));\n-        assert_eq!([1i,2,3,4,5].binary_search(&3).ok(), Some(2));\n-        assert_eq!([1i,2,3,4,5].binary_search(&2).ok(), Some(1));\n-        assert_eq!([1i,2,3,4,5].binary_search(&1).ok(), Some(0));\n+        assert_eq!([1,2,3,4,5].binary_search(&5).ok(), Some(4));\n+        assert_eq!([1,2,3,4,5].binary_search(&4).ok(), Some(3));\n+        assert_eq!([1,2,3,4,5].binary_search(&3).ok(), Some(2));\n+        assert_eq!([1,2,3,4,5].binary_search(&2).ok(), Some(1));\n+        assert_eq!([1,2,3,4,5].binary_search(&1).ok(), Some(0));\n \n-        assert_eq!([2i,4,6,8,10].binary_search(&1).ok(), None);\n-        assert_eq!([2i,4,6,8,10].binary_search(&5).ok(), None);\n-        assert_eq!([2i,4,6,8,10].binary_search(&4).ok(), Some(1));\n-        assert_eq!([2i,4,6,8,10].binary_search(&10).ok(), Some(4));\n+        assert_eq!([2,4,6,8,10].binary_search(&1).ok(), None);\n+        assert_eq!([2,4,6,8,10].binary_search(&5).ok(), None);\n+        assert_eq!([2,4,6,8,10].binary_search(&4).ok(), Some(1));\n+        assert_eq!([2,4,6,8,10].binary_search(&10).ok(), Some(4));\n \n-        assert_eq!([2i,4,6,8].binary_search(&1).ok(), None);\n-        assert_eq!([2i,4,6,8].binary_search(&5).ok(), None);\n-        assert_eq!([2i,4,6,8].binary_search(&4).ok(), Some(1));\n-        assert_eq!([2i,4,6,8].binary_search(&8).ok(), Some(3));\n+        assert_eq!([2,4,6,8].binary_search(&1).ok(), None);\n+        assert_eq!([2,4,6,8].binary_search(&5).ok(), None);\n+        assert_eq!([2,4,6,8].binary_search(&4).ok(), Some(1));\n+        assert_eq!([2,4,6,8].binary_search(&8).ok(), Some(3));\n \n-        assert_eq!([2i,4,6].binary_search(&1).ok(), None);\n-        assert_eq!([2i,4,6].binary_search(&5).ok(), None);\n-        assert_eq!([2i,4,6].binary_search(&4).ok(), Some(1));\n-        assert_eq!([2i,4,6].binary_search(&6).ok(), Some(2));\n+        assert_eq!([2,4,6].binary_search(&1).ok(), None);\n+        assert_eq!([2,4,6].binary_search(&5).ok(), None);\n+        assert_eq!([2,4,6].binary_search(&4).ok(), Some(1));\n+        assert_eq!([2,4,6].binary_search(&6).ok(), Some(2));\n \n-        assert_eq!([2i,4].binary_search(&1).ok(), None);\n-        assert_eq!([2i,4].binary_search(&5).ok(), None);\n-        assert_eq!([2i,4].binary_search(&2).ok(), Some(0));\n-        assert_eq!([2i,4].binary_search(&4).ok(), Some(1));\n+        assert_eq!([2,4].binary_search(&1).ok(), None);\n+        assert_eq!([2,4].binary_search(&5).ok(), None);\n+        assert_eq!([2,4].binary_search(&2).ok(), Some(0));\n+        assert_eq!([2,4].binary_search(&4).ok(), Some(1));\n \n-        assert_eq!([2i].binary_search(&1).ok(), None);\n-        assert_eq!([2i].binary_search(&5).ok(), None);\n-        assert_eq!([2i].binary_search(&2).ok(), Some(0));\n+        assert_eq!([2].binary_search(&1).ok(), None);\n+        assert_eq!([2].binary_search(&5).ok(), None);\n+        assert_eq!([2].binary_search(&2).ok(), Some(0));\n \n-        assert_eq!([].binary_search(&1i).ok(), None);\n-        assert_eq!([].binary_search(&5i).ok(), None);\n+        assert_eq!([].binary_search(&1).ok(), None);\n+        assert_eq!([].binary_search(&5).ok(), None);\n \n-        assert!([1i,1,1,1,1].binary_search(&1).ok() != None);\n-        assert!([1i,1,1,1,2].binary_search(&1).ok() != None);\n-        assert!([1i,1,1,2,2].binary_search(&1).ok() != None);\n-        assert!([1i,1,2,2,2].binary_search(&1).ok() != None);\n-        assert_eq!([1i,2,2,2,2].binary_search(&1).ok(), Some(0));\n+        assert!([1,1,1,1,1].binary_search(&1).ok() != None);\n+        assert!([1,1,1,1,2].binary_search(&1).ok() != None);\n+        assert!([1,1,1,2,2].binary_search(&1).ok() != None);\n+        assert!([1,1,2,2,2].binary_search(&1).ok() != None);\n+        assert_eq!([1,2,2,2,2].binary_search(&1).ok(), Some(0));\n \n-        assert_eq!([1i,2,3,4,5].binary_search(&6).ok(), None);\n-        assert_eq!([1i,2,3,4,5].binary_search(&0).ok(), None);\n+        assert_eq!([1,2,3,4,5].binary_search(&6).ok(), None);\n+        assert_eq!([1,2,3,4,5].binary_search(&0).ok(), None);\n     }\n \n     #[test]\n     fn test_reverse() {\n-        let mut v: Vec<int> = vec![10i, 20];\n+        let mut v: Vec<int> = vec![10, 20];\n         assert_eq!(v[0], 10);\n         assert_eq!(v[1], 20);\n         v.reverse();\n@@ -2098,7 +2098,7 @@ mod tests {\n     #[test]\n     fn test_sort() {\n         for len in 4u..25 {\n-            for _ in 0i..100 {\n+            for _ in 0..100 {\n                 let mut v = thread_rng().gen_iter::<uint>().take(len)\n                                       .collect::<Vec<uint>>();\n                 let mut v1 = v.clone();\n@@ -2125,9 +2125,9 @@ mod tests {\n \n     #[test]\n     fn test_sort_stability() {\n-        for len in 4i..25 {\n+        for len in 4..25 {\n             for _ in 0u..10 {\n-                let mut counts = [0i; 10];\n+                let mut counts = [0; 10];\n \n                 // create a vector like [(6, 1), (5, 1), (6, 2), ...],\n                 // where the first item of each tuple is random, but\n@@ -2159,21 +2159,21 @@ mod tests {\n         let v: [Vec<int>; 0] = [];\n         let c: Vec<int> = v.concat();\n         assert_eq!(c, []);\n-        let d: Vec<int> = [vec![1i], vec![2i,3i]].concat();\n-        assert_eq!(d, vec![1i, 2, 3]);\n+        let d: Vec<int> = [vec![1], vec![2,3]].concat();\n+        assert_eq!(d, vec![1, 2, 3]);\n \n         let v: [&[int]; 2] = [&[1], &[2, 3]];\n-        assert_eq!(v.connect(&0), vec![1i, 0, 2, 3]);\n-        let v: [&[int]; 3] = [&[1i], &[2], &[3]];\n-        assert_eq!(v.connect(&0), vec![1i, 0, 2, 0, 3]);\n+        assert_eq!(v.connect(&0), vec![1, 0, 2, 3]);\n+        let v: [&[int]; 3] = [&[1], &[2], &[3]];\n+        assert_eq!(v.connect(&0), vec![1, 0, 2, 0, 3]);\n     }\n \n     #[test]\n     fn test_connect() {\n         let v: [Vec<int>; 0] = [];\n         assert_eq!(v.connect(&0), vec![]);\n-        assert_eq!([vec![1i], vec![2i, 3]].connect(&0), vec![1, 0, 2, 3]);\n-        assert_eq!([vec![1i], vec![2i], vec![3i]].connect(&0), vec![1, 0, 2, 0, 3]);\n+        assert_eq!([vec![1], vec![2, 3]].connect(&0), vec![1, 0, 2, 3]);\n+        assert_eq!([vec![1], vec![2], vec![3]].connect(&0), vec![1, 0, 2, 0, 3]);\n \n         let v: [&[int]; 2] = [&[1], &[2, 3]];\n         assert_eq!(v.connect(&0), vec![1, 0, 2, 3]);\n@@ -2183,42 +2183,42 @@ mod tests {\n \n     #[test]\n     fn test_insert() {\n-        let mut a = vec![1i, 2, 4];\n+        let mut a = vec![1, 2, 4];\n         a.insert(2, 3);\n         assert_eq!(a, vec![1, 2, 3, 4]);\n \n-        let mut a = vec![1i, 2, 3];\n+        let mut a = vec![1, 2, 3];\n         a.insert(0, 0);\n         assert_eq!(a, vec![0, 1, 2, 3]);\n \n-        let mut a = vec![1i, 2, 3];\n+        let mut a = vec![1, 2, 3];\n         a.insert(3, 4);\n         assert_eq!(a, vec![1, 2, 3, 4]);\n \n         let mut a = vec![];\n-        a.insert(0, 1i);\n+        a.insert(0, 1);\n         assert_eq!(a, vec![1]);\n     }\n \n     #[test]\n     #[should_fail]\n     fn test_insert_oob() {\n-        let mut a = vec![1i, 2, 3];\n+        let mut a = vec![1, 2, 3];\n         a.insert(4, 5);\n     }\n \n     #[test]\n     fn test_remove() {\n-        let mut a = vec![1i,2,3,4];\n+        let mut a = vec![1,2,3,4];\n \n         assert_eq!(a.remove(2), 3);\n-        assert_eq!(a, vec![1i,2,4]);\n+        assert_eq!(a, vec![1,2,4]);\n \n         assert_eq!(a.remove(2), 4);\n-        assert_eq!(a, vec![1i,2]);\n+        assert_eq!(a, vec![1,2]);\n \n         assert_eq!(a.remove(0), 1);\n-        assert_eq!(a, vec![2i]);\n+        assert_eq!(a, vec![2]);\n \n         assert_eq!(a.remove(0), 2);\n         assert_eq!(a, vec![]);\n@@ -2227,7 +2227,7 @@ mod tests {\n     #[test]\n     #[should_fail]\n     fn test_remove_fail() {\n-        let mut a = vec![1i];\n+        let mut a = vec![1];\n         let _ = a.remove(0);\n         let _ = a.remove(0);\n     }\n@@ -2244,7 +2244,7 @@ mod tests {\n \n     #[test]\n     fn test_slice_2() {\n-        let v = vec![1i, 2, 3, 4, 5];\n+        let v = vec![1, 2, 3, 4, 5];\n         let v = v.slice(1u, 3u);\n         assert_eq!(v.len(), 2u);\n         assert_eq!(v[0], 2);\n@@ -2254,8 +2254,8 @@ mod tests {\n     #[test]\n     #[should_fail]\n     fn test_permute_fail() {\n-        let v = [(box 0i, Rc::new(0i)), (box 0i, Rc::new(0i)),\n-                 (box 0i, Rc::new(0i)), (box 0i, Rc::new(0i))];\n+        let v = [(box 0, Rc::new(0)), (box 0, Rc::new(0)),\n+                 (box 0, Rc::new(0)), (box 0, Rc::new(0))];\n         let mut i = 0u;\n         for _ in v.permutations() {\n             if i == 2 {\n@@ -2281,7 +2281,7 @@ mod tests {\n \n     #[test]\n     fn test_iterator() {\n-        let xs = [1i, 2, 5, 10, 11];\n+        let xs = [1, 2, 5, 10, 11];\n         let mut it = xs.iter();\n         assert_eq!(it.size_hint(), (5, Some(5)));\n         assert_eq!(it.next().unwrap(), &1);\n@@ -2299,7 +2299,7 @@ mod tests {\n \n     #[test]\n     fn test_random_access_iterator() {\n-        let xs = [1i, 2, 5, 10, 11];\n+        let xs = [1, 2, 5, 10, 11];\n         let mut it = xs.iter();\n \n         assert_eq!(it.indexable(), 5);\n@@ -2337,14 +2337,14 @@ mod tests {\n \n     #[test]\n     fn test_iter_size_hints() {\n-        let mut xs = [1i, 2, 5, 10, 11];\n+        let mut xs = [1, 2, 5, 10, 11];\n         assert_eq!(xs.iter().size_hint(), (5, Some(5)));\n         assert_eq!(xs.iter_mut().size_hint(), (5, Some(5)));\n     }\n \n     #[test]\n     fn test_iter_clone() {\n-        let xs = [1i, 2, 5];\n+        let xs = [1, 2, 5];\n         let mut it = xs.iter();\n         it.next();\n         let mut jt = it.clone();\n@@ -2355,7 +2355,7 @@ mod tests {\n \n     #[test]\n     fn test_mut_iterator() {\n-        let mut xs = [1i, 2, 3, 4, 5];\n+        let mut xs = [1, 2, 3, 4, 5];\n         for x in xs.iter_mut() {\n             *x += 1;\n         }\n@@ -2365,7 +2365,7 @@ mod tests {\n     #[test]\n     fn test_rev_iterator() {\n \n-        let xs = [1i, 2, 5, 10, 11];\n+        let xs = [1, 2, 5, 10, 11];\n         let ys = [11, 10, 5, 2, 1];\n         let mut i = 0;\n         for &x in xs.iter().rev() {\n@@ -2398,7 +2398,7 @@ mod tests {\n \n     #[test]\n     fn test_splitator() {\n-        let xs = &[1i,2,3,4,5];\n+        let xs = &[1,2,3,4,5];\n \n         let splits: &[&[int]] = &[&[1], &[3], &[5]];\n         assert_eq!(xs.split(|x| *x % 2 == 0).collect::<Vec<&[int]>>(),\n@@ -2423,7 +2423,7 @@ mod tests {\n \n     #[test]\n     fn test_splitnator() {\n-        let xs = &[1i,2,3,4,5];\n+        let xs = &[1,2,3,4,5];\n \n         let splits: &[&[int]] = &[&[1,2,3,4,5]];\n         assert_eq!(xs.splitn(0, |x| *x % 2 == 0).collect::<Vec<&[int]>>(),\n@@ -2442,7 +2442,7 @@ mod tests {\n \n     #[test]\n     fn test_splitnator_mut() {\n-        let xs = &mut [1i,2,3,4,5];\n+        let xs = &mut [1,2,3,4,5];\n \n         let splits: &[&mut [int]] = &[&mut [1,2,3,4,5]];\n         assert_eq!(xs.splitn_mut(0, |x| *x % 2 == 0).collect::<Vec<&mut [int]>>(),\n@@ -2462,7 +2462,7 @@ mod tests {\n \n     #[test]\n     fn test_rsplitator() {\n-        let xs = &[1i,2,3,4,5];\n+        let xs = &[1,2,3,4,5];\n \n         let splits: &[&[int]] = &[&[5], &[3], &[1]];\n         assert_eq!(xs.split(|x| *x % 2 == 0).rev().collect::<Vec<&[int]>>(),\n@@ -2503,38 +2503,38 @@ mod tests {\n \n     #[test]\n     fn test_windowsator() {\n-        let v = &[1i,2,3,4];\n+        let v = &[1,2,3,4];\n \n         let wins: &[&[int]] = &[&[1,2], &[2,3], &[3,4]];\n         assert_eq!(v.windows(2).collect::<Vec<&[int]>>(), wins);\n-        let wins: &[&[int]] = &[&[1i,2,3], &[2,3,4]];\n+        let wins: &[&[int]] = &[&[1,2,3], &[2,3,4]];\n         assert_eq!(v.windows(3).collect::<Vec<&[int]>>(), wins);\n         assert!(v.windows(6).next().is_none());\n     }\n \n     #[test]\n     #[should_fail]\n     fn test_windowsator_0() {\n-        let v = &[1i,2,3,4];\n+        let v = &[1,2,3,4];\n         let _it = v.windows(0);\n     }\n \n     #[test]\n     fn test_chunksator() {\n         use core::iter::ExactSizeIterator;\n \n-        let v = &[1i,2,3,4,5];\n+        let v = &[1,2,3,4,5];\n \n         assert_eq!(v.chunks(2).len(), 3);\n \n-        let chunks: &[&[int]] = &[&[1i,2], &[3,4], &[5]];\n+        let chunks: &[&[int]] = &[&[1,2], &[3,4], &[5]];\n         assert_eq!(v.chunks(2).collect::<Vec<&[int]>>(), chunks);\n-        let chunks: &[&[int]] = &[&[1i,2,3], &[4,5]];\n+        let chunks: &[&[int]] = &[&[1,2,3], &[4,5]];\n         assert_eq!(v.chunks(3).collect::<Vec<&[int]>>(), chunks);\n-        let chunks: &[&[int]] = &[&[1i,2,3,4,5]];\n+        let chunks: &[&[int]] = &[&[1,2,3,4,5]];\n         assert_eq!(v.chunks(6).collect::<Vec<&[int]>>(), chunks);\n \n-        let chunks: &[&[int]] = &[&[5i], &[3,4], &[1,2]];\n+        let chunks: &[&[int]] = &[&[5], &[3,4], &[1,2]];\n         assert_eq!(v.chunks(2).rev().collect::<Vec<&[int]>>(), chunks);\n         let mut it = v.chunks(2);\n         assert_eq!(it.indexable(), 3);\n@@ -2550,33 +2550,33 @@ mod tests {\n     #[test]\n     #[should_fail]\n     fn test_chunksator_0() {\n-        let v = &[1i,2,3,4];\n+        let v = &[1,2,3,4];\n         let _it = v.chunks(0);\n     }\n \n     #[test]\n     fn test_move_from() {\n-        let mut a = [1i,2,3,4,5];\n-        let b = vec![6i,7,8];\n+        let mut a = [1,2,3,4,5];\n+        let b = vec![6,7,8];\n         assert_eq!(a.move_from(b, 0, 3), 3);\n-        assert!(a == [6i,7,8,4,5]);\n-        let mut a = [7i,2,8,1];\n-        let b = vec![3i,1,4,1,5,9];\n+        assert!(a == [6,7,8,4,5]);\n+        let mut a = [7,2,8,1];\n+        let b = vec![3,1,4,1,5,9];\n         assert_eq!(a.move_from(b, 0, 6), 4);\n-        assert!(a == [3i,1,4,1]);\n-        let mut a = [1i,2,3,4];\n-        let b = vec![5i,6,7,8,9,0];\n+        assert!(a == [3,1,4,1]);\n+        let mut a = [1,2,3,4];\n+        let b = vec![5,6,7,8,9,0];\n         assert_eq!(a.move_from(b, 2, 3), 1);\n-        assert!(a == [7i,2,3,4]);\n-        let mut a = [1i,2,3,4,5];\n-        let b = vec![5i,6,7,8,9,0];\n+        assert!(a == [7,2,3,4]);\n+        let mut a = [1,2,3,4,5];\n+        let b = vec![5,6,7,8,9,0];\n         assert_eq!(a[2..4].move_from(b,1,6), 2);\n-        assert!(a == [1i,2,6,7,5]);\n+        assert!(a == [1,2,6,7,5]);\n     }\n \n     #[test]\n     fn test_reverse_part() {\n-        let mut values = [1i,2,3,4,5];\n+        let mut values = [1,2,3,4,5];\n         values[1..4].reverse();\n         assert!(values == [1,4,3,2,5]);\n     }\n@@ -2592,8 +2592,8 @@ mod tests {\n         }\n         let empty: Vec<int> = vec![];\n         test_show_vec!(empty, \"[]\");\n-        test_show_vec!(vec![1i], \"[1]\");\n-        test_show_vec!(vec![1i, 2, 3], \"[1, 2, 3]\");\n+        test_show_vec!(vec![1], \"[1]\");\n+        test_show_vec!(vec![1, 2, 3], \"[1, 2, 3]\");\n         test_show_vec!(vec![vec![], vec![1u], vec![1u, 1u]],\n                        \"[[], [1], [1, 1]]\");\n \n@@ -2635,16 +2635,16 @@ mod tests {\n     fn test_overflow_does_not_cause_segfault() {\n         let mut v = vec![];\n         v.reserve_exact(-1);\n-        v.push(1i);\n+        v.push(1);\n         v.push(2);\n     }\n \n     #[test]\n     #[should_fail]\n     fn test_overflow_does_not_cause_segfault_managed() {\n-        let mut v = vec![Rc::new(1i)];\n+        let mut v = vec![Rc::new(1)];\n         v.reserve_exact(-1);\n-        v.push(Rc::new(2i));\n+        v.push(Rc::new(2));\n     }\n \n     #[test]\n@@ -2717,13 +2717,13 @@ mod tests {\n     #[test]\n     fn test_shrink_to_fit() {\n         let mut xs = vec![0, 1, 2, 3];\n-        for i in 4i..100 {\n+        for i in 4..100 {\n             xs.push(i)\n         }\n         assert_eq!(xs.capacity(), 128);\n         xs.shrink_to_fit();\n         assert_eq!(xs.capacity(), 100);\n-        assert_eq!(xs, (0i..100i).collect::<Vec<_>>());\n+        assert_eq!(xs, (0..100).collect::<Vec<_>>());\n     }\n \n     #[test]\n@@ -2756,14 +2756,14 @@ mod tests {\n \n     #[test]\n     fn test_mut_splitator() {\n-        let mut xs = [0i,1,0,2,3,0,0,4,5,0];\n+        let mut xs = [0,1,0,2,3,0,0,4,5,0];\n         assert_eq!(xs.split_mut(|x| *x == 0).count(), 6);\n         for slice in xs.split_mut(|x| *x == 0) {\n             slice.reverse();\n         }\n         assert!(xs == [0,1,0,3,2,0,0,5,4,0]);\n \n-        let mut xs = [0i,1,0,2,3,0,0,4,5,0,6,7];\n+        let mut xs = [0,1,0,2,3,0,0,4,5,0,6,7];\n         for slice in xs.split_mut(|x| *x == 0).take(5) {\n             slice.reverse();\n         }\n@@ -2772,7 +2772,7 @@ mod tests {\n \n     #[test]\n     fn test_mut_splitator_rev() {\n-        let mut xs = [1i,2,0,3,4,0,0,5,6,0];\n+        let mut xs = [1,2,0,3,4,0,0,5,6,0];\n         for slice in xs.split_mut(|x| *x == 0).rev().take(4) {\n             slice.reverse();\n         }\n@@ -2781,7 +2781,7 @@ mod tests {\n \n     #[test]\n     fn test_get_mut() {\n-        let mut v = [0i,1,2];\n+        let mut v = [0,1,2];\n         assert_eq!(v.get_mut(3), None);\n         v.get_mut(1).map(|e| *e = 7);\n         assert_eq!(v[1], 7);\n@@ -2819,13 +2819,13 @@ mod tests {\n     #[test]\n     #[should_fail]\n     fn test_mut_chunks_0() {\n-        let mut v = [1i, 2, 3, 4];\n+        let mut v = [1, 2, 3, 4];\n         let _it = v.chunks_mut(0);\n     }\n \n     #[test]\n     fn test_mut_last() {\n-        let mut x = [1i, 2, 3, 4, 5];\n+        let mut x = [1, 2, 3, 4, 5];\n         let h = x.last_mut();\n         assert_eq!(*h.unwrap(), 5);\n \n@@ -2868,10 +2868,10 @@ mod bench {\n \n     #[bench]\n     fn mut_iterator(b: &mut Bencher) {\n-        let mut v = repeat(0i).take(100).collect::<Vec<_>>();\n+        let mut v = repeat(0).take(100).collect::<Vec<_>>();\n \n         b.iter(|| {\n-            let mut i = 0i;\n+            let mut i = 0;\n             for x in v.iter_mut() {\n                 *x = i;\n                 i += 1;\n@@ -3007,7 +3007,7 @@ mod bench {\n                 v.set_len(1024);\n             }\n             for x in v.iter_mut() {\n-                *x = 0i;\n+                *x = 0;\n             }\n             v\n         });"}, {"sha": "56f266b7ca6da199c15bea7dc18b78135ae41f89", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -1291,8 +1291,8 @@ mod tests {\n \n     #[test]\n     fn test_simple_types() {\n-        assert_eq!(1i.to_string(), \"1\");\n-        assert_eq!((-1i).to_string(), \"-1\");\n+        assert_eq!(1.to_string(), \"1\");\n+        assert_eq!((-1).to_string(), \"-1\");\n         assert_eq!(200u.to_string(), \"200\");\n         assert_eq!(2u8.to_string(), \"2\");\n         assert_eq!(true.to_string(), \"true\");\n@@ -1304,9 +1304,9 @@ mod tests {\n     fn test_vectors() {\n         let x: Vec<int> = vec![];\n         assert_eq!(format!(\"{:?}\", x), \"[]\");\n-        assert_eq!(format!(\"{:?}\", vec![1i]), \"[1]\");\n-        assert_eq!(format!(\"{:?}\", vec![1i, 2, 3]), \"[1, 2, 3]\");\n-        assert!(format!(\"{:?}\", vec![vec![], vec![1i], vec![1i, 1]]) ==\n+        assert_eq!(format!(\"{:?}\", vec![1]), \"[1]\");\n+        assert_eq!(format!(\"{:?}\", vec![1, 2, 3]), \"[1, 2, 3]\");\n+        assert!(format!(\"{:?}\", vec![vec![], vec![1], vec![1, 1]]) ==\n                \"[[], [1], [1, 1]]\");\n     }\n "}, {"sha": "8be29c458513a2a6e2033a9aef1c92ba6447d161", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 44, "deletions": 44, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -73,30 +73,30 @@ use core::uint;\n ///\n /// ```\n /// let mut vec = Vec::new();\n-/// vec.push(1i);\n-/// vec.push(2i);\n+/// vec.push(1);\n+/// vec.push(2);\n ///\n /// assert_eq!(vec.len(), 2);\n /// assert_eq!(vec[0], 1);\n ///\n /// assert_eq!(vec.pop(), Some(2));\n /// assert_eq!(vec.len(), 1);\n ///\n-/// vec[0] = 7i;\n+/// vec[0] = 7;\n /// assert_eq!(vec[0], 7);\n ///\n /// vec.push_all(&[1, 2, 3]);\n ///\n /// for x in vec.iter() {\n ///     println!(\"{}\", x);\n /// }\n-/// assert_eq!(vec, vec![7i, 1, 2, 3]);\n+/// assert_eq!(vec, vec![7, 1, 2, 3]);\n /// ```\n ///\n /// The `vec!` macro is provided to make initialization more convenient:\n ///\n /// ```\n-/// let mut vec = vec![1i, 2i, 3i];\n+/// let mut vec = vec![1, 2, 3];\n /// vec.push(4);\n /// assert_eq!(vec, vec![1, 2, 3, 4]);\n /// ```\n@@ -106,9 +106,9 @@ use core::uint;\n /// ```\n /// let mut stack = Vec::new();\n ///\n-/// stack.push(1i);\n-/// stack.push(2i);\n-/// stack.push(3i);\n+/// stack.push(1);\n+/// stack.push(2);\n+/// stack.push(3);\n ///\n /// loop {\n ///     let top = match stack.pop() {\n@@ -186,7 +186,7 @@ impl<T> Vec<T> {\n     /// assert_eq!(vec.len(), 0);\n     ///\n     /// // These are all done without reallocating...\n-    /// for i in 0i..10 {\n+    /// for i in 0..10 {\n     ///     vec.push(i);\n     /// }\n     ///\n@@ -220,7 +220,7 @@ impl<T> Vec<T> {\n     /// use std::mem;\n     ///\n     /// fn main() {\n-    ///     let mut v = vec![1i, 2, 3];\n+    ///     let mut v = vec![1, 2, 3];\n     ///\n     ///     // Pull out the various important pieces of information about `v`\n     ///     let p = v.as_mut_ptr();\n@@ -239,7 +239,7 @@ impl<T> Vec<T> {\n     ///\n     ///         // Put everything back together into a Vec\n     ///         let rebuilt = Vec::from_raw_parts(p, len, cap);\n-    ///         assert_eq!(rebuilt, vec![4i, 5i, 6i]);\n+    ///         assert_eq!(rebuilt, vec![4, 5, 6]);\n     ///     }\n     /// }\n     /// ```\n@@ -395,7 +395,7 @@ impl<T> Vec<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// let mut vec = vec![1i, 2, 3, 4];\n+    /// let mut vec = vec![1, 2, 3, 4];\n     /// vec.truncate(2);\n     /// assert_eq!(vec, vec![1, 2]);\n     /// ```\n@@ -419,7 +419,7 @@ impl<T> Vec<T> {\n     /// ```\n     /// fn foo(slice: &mut [int]) {}\n     ///\n-    /// let mut vec = vec![1i, 2];\n+    /// let mut vec = vec![1, 2];\n     /// foo(vec.as_mut_slice());\n     /// ```\n     #[inline]\n@@ -522,7 +522,7 @@ impl<T> Vec<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// let mut vec = vec![1i, 2, 3];\n+    /// let mut vec = vec![1, 2, 3];\n     /// vec.insert(1, 4);\n     /// assert_eq!(vec, vec![1, 4, 2, 3]);\n     /// vec.insert(4, 5);\n@@ -560,7 +560,7 @@ impl<T> Vec<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// let mut v = vec![1i, 2, 3];\n+    /// let mut v = vec![1, 2, 3];\n     /// assert_eq!(v.remove(1), 2);\n     /// assert_eq!(v, vec![1, 3]);\n     /// ```\n@@ -594,7 +594,7 @@ impl<T> Vec<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// let mut vec = vec![1i, 2, 3, 4];\n+    /// let mut vec = vec![1, 2, 3, 4];\n     /// vec.retain(|&x| x%2 == 0);\n     /// assert_eq!(vec, vec![2, 4]);\n     /// ```\n@@ -627,7 +627,7 @@ impl<T> Vec<T> {\n     /// # Examples\n     ///\n     /// ```rust\n-    /// let mut vec = vec!(1i, 2);\n+    /// let mut vec = vec!(1, 2);\n     /// vec.push(3);\n     /// assert_eq!(vec, vec!(1, 2, 3));\n     /// ```\n@@ -665,7 +665,7 @@ impl<T> Vec<T> {\n     /// # Examples\n     ///\n     /// ```rust\n-    /// let mut vec = vec![1i, 2, 3];\n+    /// let mut vec = vec![1, 2, 3];\n     /// assert_eq!(vec.pop(), Some(3));\n     /// assert_eq!(vec, vec![1, 2]);\n     /// ```\n@@ -758,7 +758,7 @@ impl<T> Vec<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// let mut v = vec![1i, 2, 3];\n+    /// let mut v = vec![1, 2, 3];\n     ///\n     /// v.clear();\n     ///\n@@ -775,7 +775,7 @@ impl<T> Vec<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// let a = vec![1i, 2, 3];\n+    /// let a = vec![1, 2, 3];\n     /// assert_eq!(a.len(), 3);\n     /// ```\n     #[inline]\n@@ -790,7 +790,7 @@ impl<T> Vec<T> {\n     /// let mut v = Vec::new();\n     /// assert!(v.is_empty());\n     ///\n-    /// v.push(1i);\n+    /// v.push(1);\n     /// assert!(!v.is_empty());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1045,7 +1045,7 @@ impl<T: Clone> Vec<T> {\n     /// vec.resize(3, \"world\");\n     /// assert_eq!(vec, vec![\"hello\", \"world\", \"world\"]);\n     ///\n-    /// let mut vec = vec![1i, 2, 3, 4];\n+    /// let mut vec = vec![1, 2, 3, 4];\n     /// vec.resize(2, 0);\n     /// assert_eq!(vec, vec![1, 2]);\n     /// ```\n@@ -1069,8 +1069,8 @@ impl<T: Clone> Vec<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// let mut vec = vec![1i];\n-    /// vec.push_all(&[2i, 3, 4]);\n+    /// let mut vec = vec![1];\n+    /// vec.push_all(&[2, 3, 4]);\n     /// assert_eq!(vec, vec![1, 2, 3, 4]);\n     /// ```\n     #[inline]\n@@ -1103,11 +1103,11 @@ impl<T: PartialEq> Vec<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// let mut vec = vec![1i, 2, 2, 3, 2];\n+    /// let mut vec = vec![1, 2, 2, 3, 2];\n     ///\n     /// vec.dedup();\n     ///\n-    /// assert_eq!(vec, vec![1i, 2, 3, 2]);\n+    /// assert_eq!(vec, vec![1, 2, 3, 2]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn dedup(&mut self) {\n@@ -1487,7 +1487,7 @@ impl<T> AsSlice<T> for Vec<T> {\n     /// ```\n     /// fn foo(slice: &[int]) {}\n     ///\n-    /// let vec = vec![1i, 2];\n+    /// let vec = vec![1, 2];\n     /// foo(vec.as_slice());\n     /// ```\n     #[inline]\n@@ -1969,7 +1969,7 @@ mod tests {\n         v.reserve(2);\n         assert!(v.capacity() >= 2);\n \n-        for i in 0i..16 {\n+        for i in 0..16 {\n             v.push(i);\n         }\n \n@@ -1988,13 +1988,13 @@ mod tests {\n         let mut v = Vec::new();\n         let mut w = Vec::new();\n \n-        v.extend(0i..3);\n-        for i in 0i..3 { w.push(i) }\n+        v.extend(0..3);\n+        for i in 0..3 { w.push(i) }\n \n         assert_eq!(v, w);\n \n-        v.extend(3i..10);\n-        for i in 3i..10 { w.push(i) }\n+        v.extend(3..10);\n+        for i in 3..10 { w.push(i) }\n \n         assert_eq!(v, w);\n     }\n@@ -2055,7 +2055,7 @@ mod tests {\n     #[test]\n     fn test_clone() {\n         let v: Vec<int> = vec!();\n-        let w = vec!(1i, 2, 3);\n+        let w = vec!(1, 2, 3);\n \n         assert_eq!(v, v.clone());\n \n@@ -2068,8 +2068,8 @@ mod tests {\n     #[test]\n     fn test_clone_from() {\n         let mut v = vec!();\n-        let three = vec!(box 1i, box 2, box 3);\n-        let two = vec!(box 4i, box 5);\n+        let three = vec!(box 1, box 2, box 3);\n+        let two = vec!(box 4, box 5);\n         // zero, long\n         v.clone_from(&three);\n         assert_eq!(v, three);\n@@ -2128,14 +2128,14 @@ mod tests {\n     #[test]\n     fn test_partition() {\n         assert_eq!(vec![].into_iter().partition(|x: &int| *x < 3), (vec![], vec![]));\n-        assert_eq!(vec![1i, 2, 3].into_iter().partition(|x: &int| *x < 4), (vec![1, 2, 3], vec![]));\n-        assert_eq!(vec![1i, 2, 3].into_iter().partition(|x: &int| *x < 2), (vec![1], vec![2, 3]));\n-        assert_eq!(vec![1i, 2, 3].into_iter().partition(|x: &int| *x < 0), (vec![], vec![1, 2, 3]));\n+        assert_eq!(vec![1, 2, 3].into_iter().partition(|x: &int| *x < 4), (vec![1, 2, 3], vec![]));\n+        assert_eq!(vec![1, 2, 3].into_iter().partition(|x: &int| *x < 2), (vec![1], vec![2, 3]));\n+        assert_eq!(vec![1, 2, 3].into_iter().partition(|x: &int| *x < 0), (vec![], vec![1, 2, 3]));\n     }\n \n     #[test]\n     fn test_zip_unzip() {\n-        let z1 = vec![(1i, 4i), (2, 5), (3, 6)];\n+        let z1 = vec![(1, 4), (2, 5), (3, 6)];\n \n         let (left, right): (Vec<_>, Vec<_>) = z1.iter().map(|&x| x).unzip();\n \n@@ -2148,13 +2148,13 @@ mod tests {\n     fn test_unsafe_ptrs() {\n         unsafe {\n             // Test on-stack copy-from-buf.\n-            let a = [1i, 2, 3];\n+            let a = [1, 2, 3];\n             let ptr = a.as_ptr();\n             let b = Vec::from_raw_buf(ptr, 3u);\n             assert_eq!(b, vec![1, 2, 3]);\n \n             // Test on-heap copy-from-buf.\n-            let c = vec![1i, 2, 3, 4, 5];\n+            let c = vec![1, 2, 3, 4, 5];\n             let ptr = c.as_ptr();\n             let d = Vec::from_raw_buf(ptr, 5u);\n             assert_eq!(d, vec![1, 2, 3, 4, 5]);\n@@ -2198,14 +2198,14 @@ mod tests {\n \n     #[test]\n     fn test_index() {\n-        let vec = vec!(1i, 2, 3);\n+        let vec = vec!(1, 2, 3);\n         assert!(vec[1] == 2);\n     }\n \n     #[test]\n     #[should_fail]\n     fn test_index_out_of_bounds() {\n-        let vec = vec!(1i, 2, 3);\n+        let vec = vec!(1, 2, 3);\n         let _ = vec[3];\n     }\n \n@@ -2273,7 +2273,7 @@ mod tests {\n     #[test]\n     fn test_map_in_place() {\n         let v = vec![0u, 1, 2];\n-        assert_eq!(v.map_in_place(|i: uint| i as int - 1), [-1i, 0, 1]);\n+        assert_eq!(v.map_in_place(|i: uint| i as int - 1), [-1, 0, 1]);\n     }\n \n     #[test]"}, {"sha": "5022a96b9b07854bf10c733a332d5563a22352be", "filename": "src/libcollections/vec_map.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibcollections%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibcollections%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_map.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -768,7 +768,7 @@ mod test_map {\n     #[test]\n     fn test_get_mut() {\n         let mut m = VecMap::new();\n-        assert!(m.insert(1, 12i).is_none());\n+        assert!(m.insert(1, 12).is_none());\n         assert!(m.insert(2, 8).is_none());\n         assert!(m.insert(5, 14).is_none());\n         let new = 100;\n@@ -783,7 +783,7 @@ mod test_map {\n         let mut map = VecMap::new();\n         assert_eq!(map.len(), 0);\n         assert!(map.is_empty());\n-        assert!(map.insert(5, 20i).is_none());\n+        assert!(map.insert(5, 20).is_none());\n         assert_eq!(map.len(), 1);\n         assert!(!map.is_empty());\n         assert!(map.insert(11, 12).is_none());\n@@ -797,7 +797,7 @@ mod test_map {\n     #[test]\n     fn test_clear() {\n         let mut map = VecMap::new();\n-        assert!(map.insert(5, 20i).is_none());\n+        assert!(map.insert(5, 20).is_none());\n         assert!(map.insert(11, 12).is_none());\n         assert!(map.insert(14, 22).is_none());\n         map.clear();\n@@ -810,15 +810,15 @@ mod test_map {\n     #[test]\n     fn test_insert() {\n         let mut m = VecMap::new();\n-        assert_eq!(m.insert(1, 2i), None);\n-        assert_eq!(m.insert(1, 3i), Some(2));\n-        assert_eq!(m.insert(1, 4i), Some(3));\n+        assert_eq!(m.insert(1, 2), None);\n+        assert_eq!(m.insert(1, 3), Some(2));\n+        assert_eq!(m.insert(1, 4), Some(3));\n     }\n \n     #[test]\n     fn test_remove() {\n         let mut m = VecMap::new();\n-        m.insert(1, 2i);\n+        m.insert(1, 2);\n         assert_eq!(m.remove(&1), Some(2));\n         assert_eq!(m.remove(&1), None);\n     }\n@@ -853,7 +853,7 @@ mod test_map {\n     fn test_iterator() {\n         let mut m = VecMap::new();\n \n-        assert!(m.insert(0, 1i).is_none());\n+        assert!(m.insert(0, 1).is_none());\n         assert!(m.insert(1, 2).is_none());\n         assert!(m.insert(3, 5).is_none());\n         assert!(m.insert(6, 10).is_none());\n@@ -878,7 +878,7 @@ mod test_map {\n     fn test_iterator_size_hints() {\n         let mut m = VecMap::new();\n \n-        assert!(m.insert(0, 1i).is_none());\n+        assert!(m.insert(0, 1).is_none());\n         assert!(m.insert(1, 2).is_none());\n         assert!(m.insert(3, 5).is_none());\n         assert!(m.insert(6, 10).is_none());\n@@ -894,7 +894,7 @@ mod test_map {\n     fn test_mut_iterator() {\n         let mut m = VecMap::new();\n \n-        assert!(m.insert(0, 1i).is_none());\n+        assert!(m.insert(0, 1).is_none());\n         assert!(m.insert(1, 2).is_none());\n         assert!(m.insert(3, 5).is_none());\n         assert!(m.insert(6, 10).is_none());\n@@ -917,7 +917,7 @@ mod test_map {\n     fn test_rev_iterator() {\n         let mut m = VecMap::new();\n \n-        assert!(m.insert(0, 1i).is_none());\n+        assert!(m.insert(0, 1).is_none());\n         assert!(m.insert(1, 2).is_none());\n         assert!(m.insert(3, 5).is_none());\n         assert!(m.insert(6, 10).is_none());\n@@ -936,7 +936,7 @@ mod test_map {\n     fn test_mut_rev_iterator() {\n         let mut m = VecMap::new();\n \n-        assert!(m.insert(0, 1i).is_none());\n+        assert!(m.insert(0, 1).is_none());\n         assert!(m.insert(1, 2).is_none());\n         assert!(m.insert(3, 5).is_none());\n         assert!(m.insert(6, 10).is_none());\n@@ -958,13 +958,13 @@ mod test_map {\n     #[test]\n     fn test_move_iter() {\n         let mut m = VecMap::new();\n-        m.insert(1, box 2i);\n+        m.insert(1, box 2);\n         let mut called = false;\n         for (k, v) in m.into_iter() {\n             assert!(!called);\n             called = true;\n             assert_eq!(k, 1);\n-            assert_eq!(v, box 2i);\n+            assert_eq!(v, box 2);\n         }\n         assert!(called);\n     }\n@@ -987,8 +987,8 @@ mod test_map {\n         let mut map = VecMap::new();\n         let empty = VecMap::<int>::new();\n \n-        map.insert(1, 2i);\n-        map.insert(3, 4i);\n+        map.insert(1, 2);\n+        map.insert(3, 4);\n \n         let map_str = format!(\"{:?}\", map);\n         assert!(map_str == \"VecMap {1: 2, 3: 4}\" || map_str == \"{3: 4, 1: 2}\");\n@@ -1012,9 +1012,9 @@ mod test_map {\n         let mut b = VecMap::new();\n \n         assert!(a == b);\n-        assert!(a.insert(0, 5i).is_none());\n+        assert!(a.insert(0, 5).is_none());\n         assert!(a != b);\n-        assert!(b.insert(0, 4i).is_none());\n+        assert!(b.insert(0, 4).is_none());\n         assert!(a != b);\n         assert!(a.insert(5, 19).is_none());\n         assert!(a != b);\n@@ -1034,7 +1034,7 @@ mod test_map {\n         let mut b = VecMap::new();\n \n         assert!(!(a < b) && !(b < a));\n-        assert!(b.insert(2u, 5i).is_none());\n+        assert!(b.insert(2u, 5).is_none());\n         assert!(a < b);\n         assert!(a.insert(2, 7).is_none());\n         assert!(!(a < b) && b < a);\n@@ -1052,7 +1052,7 @@ mod test_map {\n         let mut b = VecMap::new();\n \n         assert!(a <= b && a >= b);\n-        assert!(a.insert(1u, 1i).is_none());\n+        assert!(a.insert(1u, 1).is_none());\n         assert!(a > b && a >= b);\n         assert!(b < a && b <= a);\n         assert!(b.insert(2, 2).is_none());"}, {"sha": "5ad3833a5ef2e3c49e694da871285ba61a73611e", "filename": "src/libcoretest/any.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibcoretest%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibcoretest%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fany.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -123,7 +123,7 @@ fn any_fixed_vec() {\n #[bench]\n fn bench_downcast_ref(b: &mut Bencher) {\n     b.iter(|| {\n-        let mut x = 0i;\n+        let mut x = 0;\n         let mut y = &mut x as &mut Any;\n         test::black_box(&mut y);\n         test::black_box(y.downcast_ref::<int>() == Some(&0));"}, {"sha": "5815dbc0accfd324801feeecae3660cc19e81b30", "filename": "src/libcoretest/cell.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibcoretest%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibcoretest%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fcell.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -14,14 +14,14 @@ use std::mem::drop;\n \n #[test]\n fn smoketest_cell() {\n-    let x = Cell::new(10i);\n+    let x = Cell::new(10);\n     assert!(x == Cell::new(10));\n     assert!(x.get() == 10);\n     x.set(20);\n     assert!(x == Cell::new(20));\n     assert!(x.get() == 20);\n \n-    let y = Cell::new((30i, 40i));\n+    let y = Cell::new((30, 40));\n     assert!(y == Cell::new((30, 40)));\n     assert!(y.get() == (30, 40));\n }\n@@ -50,35 +50,35 @@ fn ref_and_refmut_have_sensible_show() {\n \n #[test]\n fn double_imm_borrow() {\n-    let x = RefCell::new(0i);\n+    let x = RefCell::new(0);\n     let _b1 = x.borrow();\n     x.borrow();\n }\n \n #[test]\n fn no_mut_then_imm_borrow() {\n-    let x = RefCell::new(0i);\n+    let x = RefCell::new(0);\n     let _b1 = x.borrow_mut();\n     assert!(x.try_borrow().is_none());\n }\n \n #[test]\n fn no_imm_then_borrow_mut() {\n-    let x = RefCell::new(0i);\n+    let x = RefCell::new(0);\n     let _b1 = x.borrow();\n     assert!(x.try_borrow_mut().is_none());\n }\n \n #[test]\n fn no_double_borrow_mut() {\n-    let x = RefCell::new(0i);\n+    let x = RefCell::new(0);\n     let _b1 = x.borrow_mut();\n     assert!(x.try_borrow_mut().is_none());\n }\n \n #[test]\n fn imm_release_borrow_mut() {\n-    let x = RefCell::new(0i);\n+    let x = RefCell::new(0);\n     {\n         let _b1 = x.borrow();\n     }\n@@ -87,7 +87,7 @@ fn imm_release_borrow_mut() {\n \n #[test]\n fn mut_release_borrow_mut() {\n-    let x = RefCell::new(0i);\n+    let x = RefCell::new(0);\n     {\n         let _b1 = x.borrow_mut();\n     }\n@@ -96,7 +96,7 @@ fn mut_release_borrow_mut() {\n \n #[test]\n fn double_borrow_single_release_no_borrow_mut() {\n-    let x = RefCell::new(0i);\n+    let x = RefCell::new(0);\n     let _b1 = x.borrow();\n     {\n         let _b2 = x.borrow();\n@@ -107,15 +107,15 @@ fn double_borrow_single_release_no_borrow_mut() {\n #[test]\n #[should_fail]\n fn discard_doesnt_unborrow() {\n-    let x = RefCell::new(0i);\n+    let x = RefCell::new(0);\n     let _b = x.borrow();\n     let _ = _b;\n     let _b = x.borrow_mut();\n }\n \n #[test]\n fn clone_ref_updates_flag() {\n-    let x = RefCell::new(0i);\n+    let x = RefCell::new(0);\n     {\n         let b1 = x.borrow();\n         assert!(x.try_borrow_mut().is_none());"}, {"sha": "5ab6ab27ba1d0680170d2ae9fa33cd9a4787e9b2", "filename": "src/libcoretest/clone.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibcoretest%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibcoretest%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fclone.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -10,16 +10,16 @@\n \n #[test]\n fn test_borrowed_clone() {\n-    let x = 5i;\n+    let x = 5;\n     let y: &int = &x;\n     let z: &int = (&y).clone();\n     assert_eq!(*z, 5);\n }\n \n #[test]\n fn test_clone_from() {\n-    let a = box 5i;\n-    let mut b = box 10i;\n+    let a = box 5;\n+    let mut b = box 10;\n     b.clone_from(&a);\n     assert_eq!(*b, 5);\n }"}, {"sha": "6bc1f14cc5af4df47af59fa3674207669e30bee9", "filename": "src/libcoretest/cmp.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibcoretest%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibcoretest%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fcmp.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -13,20 +13,20 @@ use core::cmp::Ordering::{Less, Greater, Equal};\n \n #[test]\n fn test_int_totalord() {\n-    assert_eq!(5i.cmp(&10), Less);\n-    assert_eq!(10i.cmp(&5), Greater);\n-    assert_eq!(5i.cmp(&5), Equal);\n-    assert_eq!((-5i).cmp(&12), Less);\n-    assert_eq!(12i.cmp(&-5), Greater);\n+    assert_eq!(5.cmp(&10), Less);\n+    assert_eq!(10.cmp(&5), Greater);\n+    assert_eq!(5.cmp(&5), Equal);\n+    assert_eq!((-5).cmp(&12), Less);\n+    assert_eq!(12.cmp(&-5), Greater);\n }\n \n #[test]\n fn test_mut_int_totalord() {\n-    assert_eq!((&mut 5i).cmp(&&mut 10), Less);\n-    assert_eq!((&mut 10i).cmp(&&mut 5), Greater);\n-    assert_eq!((&mut 5i).cmp(&&mut 5), Equal);\n-    assert_eq!((&mut -5i).cmp(&&mut 12), Less);\n-    assert_eq!((&mut 12i).cmp(&&mut -5), Greater);\n+    assert_eq!((&mut 5).cmp(&&mut 10), Less);\n+    assert_eq!((&mut 10).cmp(&&mut 5), Greater);\n+    assert_eq!((&mut 5).cmp(&&mut 5), Equal);\n+    assert_eq!((&mut -5).cmp(&&mut 12), Less);\n+    assert_eq!((&mut 12).cmp(&&mut -5), Greater);\n }\n \n #[test]\n@@ -47,11 +47,11 @@ fn test_partial_min() {\n     use core::f64::NAN;\n     let data_integer = [\n         // a, b, result\n-        (0i, 0i, Some(0i)),\n-        (1i, 0i, Some(0i)),\n-        (0i, 1i, Some(0i)),\n-        (-1i, 0i, Some(-1i)),\n-        (0i, -1i, Some(-1i))\n+        (0, 0, Some(0)),\n+        (1, 0, Some(0)),\n+        (0, 1, Some(0)),\n+        (-1, 0, Some(-1)),\n+        (0, -1, Some(-1))\n     ];\n \n     let data_float = [\n@@ -80,11 +80,11 @@ fn test_partial_max() {\n     use core::f64::NAN;\n     let data_integer = [\n         // a, b, result\n-        (0i, 0i, Some(0i)),\n-        (1i, 0i, Some(1i)),\n-        (0i, 1i, Some(1i)),\n-        (-1i, 0i, Some(0i)),\n-        (0i, -1i, Some(0i))\n+        (0, 0, Some(0)),\n+        (1, 0, Some(1)),\n+        (0, 1, Some(1)),\n+        (-1, 0, Some(0)),\n+        (0, -1, Some(0))\n     ];\n \n     let data_float = ["}, {"sha": "22917b09ce9959856b3dcbb8c3451c380290d61f", "filename": "src/libcoretest/finally.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibcoretest%2Ffinally.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibcoretest%2Ffinally.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Ffinally.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -15,7 +15,7 @@ use std::thread::Thread;\n \n #[test]\n fn test_success() {\n-    let mut i = 0i;\n+    let mut i = 0;\n     try_finally(\n         &mut i, (),\n         |i, ()| {\n@@ -32,7 +32,7 @@ fn test_success() {\n #[test]\n #[should_fail]\n fn test_fail() {\n-    let mut i = 0i;\n+    let mut i = 0;\n     try_finally(\n         &mut i, (),\n         |i, ()| {\n@@ -47,7 +47,7 @@ fn test_fail() {\n \n #[test]\n fn test_retval() {\n-    let mut closure = |&mut:| 10i;\n+    let mut closure = |&mut:| 10;\n     let i = closure.finally(|| { });\n     assert_eq!(i, 10);\n }"}, {"sha": "f83b03d845b285ee7fe3c1cfa0f1f276cebdb444", "filename": "src/libcoretest/hash/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibcoretest%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibcoretest%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fhash%2Fmod.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -56,7 +56,7 @@ fn test_writer_hasher() {\n     assert_eq!(hash(&5i16), 5);\n     assert_eq!(hash(&5i32), 5);\n     assert_eq!(hash(&5i64), 5);\n-    assert_eq!(hash(&5i), 5);\n+    assert_eq!(hash(&5), 5);\n \n     assert_eq!(hash(&false), 0);\n     assert_eq!(hash(&true), 1);\n@@ -76,12 +76,12 @@ fn test_writer_hasher() {\n     // FIXME (#18248) Add tests for hashing Rc<str> and Rc<[T]>\n \n     unsafe {\n-        let ptr: *const int = mem::transmute(5i);\n+        let ptr: *const int = mem::transmute(5);\n         assert_eq!(hash(&ptr), 5);\n     }\n \n     unsafe {\n-        let ptr: *mut int = mem::transmute(5i);\n+        let ptr: *mut int = mem::transmute(5);\n         assert_eq!(hash(&ptr), 5);\n     }\n }"}, {"sha": "e6b0265576c4b6c2d91c183b7f02a4d657a4b600", "filename": "src/libcoretest/iter.rs", "status": "modified", "additions": 90, "deletions": 90, "changes": 180, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibcoretest%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibcoretest%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fiter.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -20,8 +20,8 @@ use test::Bencher;\n #[test]\n fn test_lt() {\n     let empty: [int; 0] = [];\n-    let xs = [1i,2,3];\n-    let ys = [1i,2,0];\n+    let xs = [1,2,3];\n+    let ys = [1,2,0];\n \n     assert!(!lt(xs.iter(), ys.iter()));\n     assert!(!le(xs.iter(), ys.iter()));\n@@ -64,15 +64,15 @@ fn test_lt() {\n \n #[test]\n fn test_multi_iter() {\n-    let xs = [1i,2,3,4];\n-    let ys = [4i,3,2,1];\n+    let xs = [1,2,3,4];\n+    let ys = [4,3,2,1];\n     assert!(eq(xs.iter(), ys.iter().rev()));\n     assert!(lt(xs.iter(), xs.iter().skip(2)));\n }\n \n #[test]\n fn test_counter_from_iter() {\n-    let it = count(0i, 5).take(10);\n+    let it = count(0, 5).take(10);\n     let xs: Vec<int> = FromIterator::from_iter(it);\n     assert!(xs == vec![0, 5, 10, 15, 20, 25, 30, 35, 40, 45]);\n }\n@@ -304,7 +304,7 @@ fn test_cycle() {\n \n #[test]\n fn test_iterator_nth() {\n-    let v: &[_] = &[0i, 1, 2, 3, 4];\n+    let v: &[_] = &[0, 1, 2, 3, 4];\n     for i in 0u..v.len() {\n         assert_eq!(v.iter().nth(i).unwrap(), &v[i]);\n     }\n@@ -313,56 +313,56 @@ fn test_iterator_nth() {\n \n #[test]\n fn test_iterator_last() {\n-    let v: &[_] = &[0i, 1, 2, 3, 4];\n+    let v: &[_] = &[0, 1, 2, 3, 4];\n     assert_eq!(v.iter().last().unwrap(), &4);\n     assert_eq!(v[..1].iter().last().unwrap(), &0);\n }\n \n #[test]\n fn test_iterator_len() {\n-    let v: &[_] = &[0i, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n+    let v: &[_] = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n     assert_eq!(v[..4].iter().count(), 4);\n     assert_eq!(v[..10].iter().count(), 10);\n     assert_eq!(v[..0].iter().count(), 0);\n }\n \n #[test]\n fn test_iterator_sum() {\n-    let v: &[_] = &[0i, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n+    let v: &[_] = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n     assert_eq!(v[..4].iter().map(|&x| x).sum(), 6);\n     assert_eq!(v.iter().map(|&x| x).sum(), 55);\n     assert_eq!(v[..0].iter().map(|&x| x).sum(), 0);\n }\n \n #[test]\n fn test_iterator_product() {\n-    let v: &[_] = &[0i, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n+    let v: &[_] = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n     assert_eq!(v[..4].iter().map(|&x| x).product(), 0);\n     assert_eq!(v[1..5].iter().map(|&x| x).product(), 24);\n     assert_eq!(v[..0].iter().map(|&x| x).product(), 1);\n }\n \n #[test]\n fn test_iterator_max() {\n-    let v: &[_] = &[0i, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n+    let v: &[_] = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n     assert_eq!(v[..4].iter().map(|&x| x).max(), Some(3));\n     assert_eq!(v.iter().map(|&x| x).max(), Some(10));\n     assert_eq!(v[..0].iter().map(|&x| x).max(), None);\n }\n \n #[test]\n fn test_iterator_min() {\n-    let v: &[_] = &[0i, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n+    let v: &[_] = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n     assert_eq!(v[..4].iter().map(|&x| x).min(), Some(0));\n     assert_eq!(v.iter().map(|&x| x).min(), Some(0));\n     assert_eq!(v[..0].iter().map(|&x| x).min(), None);\n }\n \n #[test]\n fn test_iterator_size_hint() {\n-    let c = count(0i, 1);\n-    let v: &[_] = &[0i, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n-    let v2 = &[10i, 11, 12];\n+    let c = count(0, 1);\n+    let v: &[_] = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n+    let v2 = &[10, 11, 12];\n     let vi = v.iter();\n \n     assert_eq!(c.size_hint(), (uint::MAX, None));\n@@ -375,10 +375,10 @@ fn test_iterator_size_hint() {\n     assert_eq!(c.enumerate().size_hint(), (uint::MAX, None));\n     assert_eq!(c.chain(vi.map(|&i| i)).size_hint(), (uint::MAX, None));\n     assert_eq!(c.zip(vi).size_hint(), (10, Some(10)));\n-    assert_eq!(c.scan(0i, |_,_| Some(0i)).size_hint(), (0, None));\n+    assert_eq!(c.scan(0, |_,_| Some(0)).size_hint(), (0, None));\n     assert_eq!(c.filter(|_| false).size_hint(), (0, None));\n-    assert_eq!(c.map(|_| 0i).size_hint(), (uint::MAX, None));\n-    assert_eq!(c.filter_map(|_| Some(0i)).size_hint(), (0, None));\n+    assert_eq!(c.map(|_| 0).size_hint(), (uint::MAX, None));\n+    assert_eq!(c.filter_map(|_| Some(0)).size_hint(), (0, None));\n \n     assert_eq!(vi.take(5).size_hint(), (5, Some(5)));\n     assert_eq!(vi.take(12).size_hint(), (10, Some(10)));\n@@ -389,22 +389,22 @@ fn test_iterator_size_hint() {\n     assert_eq!(vi.enumerate().size_hint(), (10, Some(10)));\n     assert_eq!(vi.chain(v2.iter()).size_hint(), (13, Some(13)));\n     assert_eq!(vi.zip(v2.iter()).size_hint(), (3, Some(3)));\n-    assert_eq!(vi.scan(0i, |_,_| Some(0i)).size_hint(), (0, Some(10)));\n+    assert_eq!(vi.scan(0, |_,_| Some(0)).size_hint(), (0, Some(10)));\n     assert_eq!(vi.filter(|_| false).size_hint(), (0, Some(10)));\n     assert_eq!(vi.map(|&i| i+1).size_hint(), (10, Some(10)));\n-    assert_eq!(vi.filter_map(|_| Some(0i)).size_hint(), (0, Some(10)));\n+    assert_eq!(vi.filter_map(|_| Some(0)).size_hint(), (0, Some(10)));\n }\n \n #[test]\n fn test_collect() {\n-    let a = vec![1i, 2, 3, 4, 5];\n+    let a = vec![1, 2, 3, 4, 5];\n     let b: Vec<int> = a.iter().map(|&x| x).collect();\n     assert!(a == b);\n }\n \n #[test]\n fn test_all() {\n-    let v: Box<[int]> = box [1i, 2, 3, 4, 5];\n+    let v: Box<[int]> = box [1, 2, 3, 4, 5];\n     assert!(v.iter().all(|&x| x < 10));\n     assert!(!v.iter().all(|&x| x % 2 == 0));\n     assert!(!v.iter().all(|&x| x > 100));\n@@ -413,7 +413,7 @@ fn test_all() {\n \n #[test]\n fn test_any() {\n-    let v: Box<[int]> = box [1i, 2, 3, 4, 5];\n+    let v: Box<[int]> = box [1, 2, 3, 4, 5];\n     assert!(v.iter().any(|&x| x < 10));\n     assert!(v.iter().any(|&x| x % 2 == 0));\n     assert!(!v.iter().any(|&x| x > 100));\n@@ -422,43 +422,43 @@ fn test_any() {\n \n #[test]\n fn test_find() {\n-    let v: &[int] = &[1i, 3, 9, 27, 103, 14, 11];\n+    let v: &[int] = &[1, 3, 9, 27, 103, 14, 11];\n     assert_eq!(*v.iter().find(|&&x| x & 1 == 0).unwrap(), 14);\n     assert_eq!(*v.iter().find(|&&x| x % 3 == 0).unwrap(), 3);\n     assert!(v.iter().find(|&&x| x % 12 == 0).is_none());\n }\n \n #[test]\n fn test_position() {\n-    let v = &[1i, 3, 9, 27, 103, 14, 11];\n+    let v = &[1, 3, 9, 27, 103, 14, 11];\n     assert_eq!(v.iter().position(|x| *x & 1 == 0).unwrap(), 5);\n     assert_eq!(v.iter().position(|x| *x % 3 == 0).unwrap(), 1);\n     assert!(v.iter().position(|x| *x % 12 == 0).is_none());\n }\n \n #[test]\n fn test_count() {\n-    let xs = &[1i, 2, 2, 1, 5, 9, 0, 2];\n+    let xs = &[1, 2, 2, 1, 5, 9, 0, 2];\n     assert_eq!(xs.iter().filter(|x| **x == 2).count(), 3);\n     assert_eq!(xs.iter().filter(|x| **x == 5).count(), 1);\n     assert_eq!(xs.iter().filter(|x| **x == 95).count(), 0);\n }\n \n #[test]\n fn test_max_by() {\n-    let xs: &[int] = &[-3i, 0, 1, 5, -10];\n+    let xs: &[int] = &[-3, 0, 1, 5, -10];\n     assert_eq!(*xs.iter().max_by(|x| x.abs()).unwrap(), -10);\n }\n \n #[test]\n fn test_min_by() {\n-    let xs: &[int] = &[-3i, 0, 1, 5, -10];\n+    let xs: &[int] = &[-3, 0, 1, 5, -10];\n     assert_eq!(*xs.iter().min_by(|x| x.abs()).unwrap(), 0);\n }\n \n #[test]\n fn test_by_ref() {\n-    let mut xs = 0i..10;\n+    let mut xs = 0..10;\n     // sum the first five values\n     let partial_sum = xs.by_ref().take(5).fold(0, |a, b| a + b);\n     assert_eq!(partial_sum, 10);\n@@ -467,7 +467,7 @@ fn test_by_ref() {\n \n #[test]\n fn test_rev() {\n-    let xs = [2i, 4, 6, 8, 10, 12, 14, 16];\n+    let xs = [2, 4, 6, 8, 10, 12, 14, 16];\n     let mut it = xs.iter();\n     it.next();\n     it.next();\n@@ -494,7 +494,7 @@ fn test_cloned() {\n \n #[test]\n fn test_double_ended_map() {\n-    let xs = [1i, 2, 3, 4, 5, 6];\n+    let xs = [1, 2, 3, 4, 5, 6];\n     let mut it = xs.iter().map(|&x| x * -1);\n     assert_eq!(it.next(), Some(-1));\n     assert_eq!(it.next(), Some(-2));\n@@ -507,7 +507,7 @@ fn test_double_ended_map() {\n \n #[test]\n fn test_double_ended_enumerate() {\n-    let xs = [1i, 2, 3, 4, 5, 6];\n+    let xs = [1, 2, 3, 4, 5, 6];\n     let mut it = xs.iter().map(|&x| x).enumerate();\n     assert_eq!(it.next(), Some((0, 1)));\n     assert_eq!(it.next(), Some((1, 2)));\n@@ -520,8 +520,8 @@ fn test_double_ended_enumerate() {\n \n #[test]\n fn test_double_ended_zip() {\n-    let xs = [1i, 2, 3, 4, 5, 6];\n-    let ys = [1i, 2, 3, 7];\n+    let xs = [1, 2, 3, 4, 5, 6];\n+    let ys = [1, 2, 3, 7];\n     let a = xs.iter().map(|&x| x);\n     let b = ys.iter().map(|&x| x);\n     let mut it = a.zip(b);\n@@ -534,7 +534,7 @@ fn test_double_ended_zip() {\n \n #[test]\n fn test_double_ended_filter() {\n-    let xs = [1i, 2, 3, 4, 5, 6];\n+    let xs = [1, 2, 3, 4, 5, 6];\n     let mut it = xs.iter().filter(|&x| *x & 1 == 0);\n     assert_eq!(it.next_back().unwrap(), &6);\n     assert_eq!(it.next_back().unwrap(), &4);\n@@ -544,7 +544,7 @@ fn test_double_ended_filter() {\n \n #[test]\n fn test_double_ended_filter_map() {\n-    let xs = [1i, 2, 3, 4, 5, 6];\n+    let xs = [1, 2, 3, 4, 5, 6];\n     let mut it = xs.iter().filter_map(|&x| if x & 1 == 0 { Some(x * 2) } else { None });\n     assert_eq!(it.next_back().unwrap(), 12);\n     assert_eq!(it.next_back().unwrap(), 8);\n@@ -554,8 +554,8 @@ fn test_double_ended_filter_map() {\n \n #[test]\n fn test_double_ended_chain() {\n-    let xs = [1i, 2, 3, 4, 5];\n-    let ys = [7i, 9, 11];\n+    let xs = [1, 2, 3, 4, 5];\n+    let ys = [7, 9, 11];\n     let mut it = xs.iter().chain(ys.iter()).rev();\n     assert_eq!(it.next().unwrap(), &11);\n     assert_eq!(it.next().unwrap(), &9);\n@@ -572,7 +572,7 @@ fn test_double_ended_chain() {\n fn test_rposition() {\n     fn f(xy: &(int, char)) -> bool { let (_x, y) = *xy; y == 'b' }\n     fn g(xy: &(int, char)) -> bool { let (_x, y) = *xy; y == 'd' }\n-    let v = [(0i, 'a'), (1, 'b'), (2, 'c'), (3, 'b')];\n+    let v = [(0, 'a'), (1, 'b'), (2, 'c'), (3, 'b')];\n \n     assert_eq!(v.iter().rposition(f), Some(3u));\n     assert!(v.iter().rposition(g).is_none());\n@@ -581,9 +581,9 @@ fn test_rposition() {\n #[test]\n #[should_fail]\n fn test_rposition_panic() {\n-    let v = [(box 0i, box 0i), (box 0i, box 0i),\n-             (box 0i, box 0i), (box 0i, box 0i)];\n-    let mut i = 0i;\n+    let v = [(box 0, box 0), (box 0, box 0),\n+             (box 0, box 0), (box 0, box 0)];\n+    let mut i = 0;\n     v.iter().rposition(|_elt| {\n         if i == 2 {\n             panic!()\n@@ -635,8 +635,8 @@ fn test_double_ended_flat_map() {\n \n #[test]\n fn test_random_access_chain() {\n-    let xs = [1i, 2, 3, 4, 5];\n-    let ys = [7i, 9, 11];\n+    let xs = [1, 2, 3, 4, 5];\n+    let ys = [7, 9, 11];\n     let mut it = xs.iter().chain(ys.iter());\n     assert_eq!(it.idx(0).unwrap(), &1);\n     assert_eq!(it.idx(5).unwrap(), &7);\n@@ -656,13 +656,13 @@ fn test_random_access_chain() {\n \n #[test]\n fn test_random_access_enumerate() {\n-    let xs = [1i, 2, 3, 4, 5];\n+    let xs = [1, 2, 3, 4, 5];\n     check_randacc_iter(xs.iter().enumerate(), xs.len());\n }\n \n #[test]\n fn test_random_access_rev() {\n-    let xs = [1i, 2, 3, 4, 5];\n+    let xs = [1, 2, 3, 4, 5];\n     check_randacc_iter(xs.iter().rev(), xs.len());\n     let mut it = xs.iter().rev();\n     it.next();\n@@ -673,14 +673,14 @@ fn test_random_access_rev() {\n \n #[test]\n fn test_random_access_zip() {\n-    let xs = [1i, 2, 3, 4, 5];\n-    let ys = [7i, 9, 11];\n+    let xs = [1, 2, 3, 4, 5];\n+    let ys = [7, 9, 11];\n     check_randacc_iter(xs.iter().zip(ys.iter()), cmp::min(xs.len(), ys.len()));\n }\n \n #[test]\n fn test_random_access_take() {\n-    let xs = [1i, 2, 3, 4, 5];\n+    let xs = [1, 2, 3, 4, 5];\n     let empty: &[int] = &[];\n     check_randacc_iter(xs.iter().take(3), 3);\n     check_randacc_iter(xs.iter().take(20), xs.len());\n@@ -690,15 +690,15 @@ fn test_random_access_take() {\n \n #[test]\n fn test_random_access_skip() {\n-    let xs = [1i, 2, 3, 4, 5];\n+    let xs = [1, 2, 3, 4, 5];\n     let empty: &[int] = &[];\n     check_randacc_iter(xs.iter().skip(2), xs.len() - 2);\n     check_randacc_iter(empty.iter().skip(2), 0);\n }\n \n #[test]\n fn test_random_access_inspect() {\n-    let xs = [1i, 2, 3, 4, 5];\n+    let xs = [1, 2, 3, 4, 5];\n \n     // test .map and .inspect that don't implement Clone\n     let mut it = xs.iter().inspect(|_| {});\n@@ -711,7 +711,7 @@ fn test_random_access_inspect() {\n \n #[test]\n fn test_random_access_map() {\n-    let xs = [1i, 2, 3, 4, 5];\n+    let xs = [1, 2, 3, 4, 5];\n \n     let mut it = xs.iter().map(|x| *x);\n     assert_eq!(xs.len(), it.indexable());\n@@ -722,16 +722,16 @@ fn test_random_access_map() {\n \n #[test]\n fn test_random_access_cycle() {\n-    let xs = [1i, 2, 3, 4, 5];\n+    let xs = [1, 2, 3, 4, 5];\n     let empty: &[int] = &[];\n     check_randacc_iter(xs.iter().cycle().take(27), 27);\n     check_randacc_iter(empty.iter().cycle(), 0);\n }\n \n #[test]\n fn test_double_ended_range() {\n-    assert!((11i..14).rev().collect::<Vec<int>>() == vec![13i, 12, 11]);\n-    for _ in (10i..0).rev() {\n+    assert!((11..14).rev().collect::<Vec<int>>() == vec![13, 12, 11]);\n+    for _ in (10..0).rev() {\n         panic!(\"unreachable\");\n     }\n \n@@ -743,73 +743,73 @@ fn test_double_ended_range() {\n \n #[test]\n fn test_range() {\n-    assert!((0i..5).collect::<Vec<int>>() == vec![0i, 1, 2, 3, 4]);\n-    assert!((-10i..-1).collect::<Vec<int>>() ==\n+    assert!((0..5).collect::<Vec<int>>() == vec![0, 1, 2, 3, 4]);\n+    assert!((-10..-1).collect::<Vec<int>>() ==\n                vec![-10, -9, -8, -7, -6, -5, -4, -3, -2]);\n-    assert!((0i..5).rev().collect::<Vec<int>>() == vec![4, 3, 2, 1, 0]);\n-    assert_eq!((200i..-5).count(), 0);\n-    assert_eq!((200i..-5).rev().count(), 0);\n-    assert_eq!((200i..200).count(), 0);\n-    assert_eq!((200i..200).rev().count(), 0);\n+    assert!((0..5).rev().collect::<Vec<int>>() == vec![4, 3, 2, 1, 0]);\n+    assert_eq!((200..-5).count(), 0);\n+    assert_eq!((200..-5).rev().count(), 0);\n+    assert_eq!((200..200).count(), 0);\n+    assert_eq!((200..200).rev().count(), 0);\n \n-    assert_eq!((0i..100).size_hint(), (100, Some(100)));\n+    assert_eq!((0..100).size_hint(), (100, Some(100)));\n     // this test is only meaningful when sizeof uint < sizeof u64\n     assert_eq!((uint::MAX - 1..uint::MAX).size_hint(), (1, Some(1)));\n-    assert_eq!((-10i..-1).size_hint(), (9, Some(9)));\n+    assert_eq!((-10..-1).size_hint(), (9, Some(9)));\n }\n \n #[test]\n fn test_range_inclusive() {\n-    assert!(range_inclusive(0i, 5).collect::<Vec<int>>() ==\n-            vec![0i, 1, 2, 3, 4, 5]);\n-    assert!(range_inclusive(0i, 5).rev().collect::<Vec<int>>() ==\n-            vec![5i, 4, 3, 2, 1, 0]);\n-    assert_eq!(range_inclusive(200i, -5).count(), 0);\n-    assert_eq!(range_inclusive(200i, -5).rev().count(), 0);\n-    assert!(range_inclusive(200i, 200).collect::<Vec<int>>() == vec![200]);\n-    assert!(range_inclusive(200i, 200).rev().collect::<Vec<int>>() == vec![200]);\n+    assert!(range_inclusive(0, 5).collect::<Vec<int>>() ==\n+            vec![0, 1, 2, 3, 4, 5]);\n+    assert!(range_inclusive(0, 5).rev().collect::<Vec<int>>() ==\n+            vec![5, 4, 3, 2, 1, 0]);\n+    assert_eq!(range_inclusive(200, -5).count(), 0);\n+    assert_eq!(range_inclusive(200, -5).rev().count(), 0);\n+    assert!(range_inclusive(200, 200).collect::<Vec<int>>() == vec![200]);\n+    assert!(range_inclusive(200, 200).rev().collect::<Vec<int>>() == vec![200]);\n }\n \n #[test]\n fn test_range_step() {\n-    assert!(range_step(0i, 20, 5).collect::<Vec<int>>() ==\n+    assert!(range_step(0, 20, 5).collect::<Vec<int>>() ==\n             vec![0, 5, 10, 15]);\n-    assert!(range_step(20i, 0, -5).collect::<Vec<int>>() ==\n+    assert!(range_step(20, 0, -5).collect::<Vec<int>>() ==\n             vec![20, 15, 10, 5]);\n-    assert!(range_step(20i, 0, -6).collect::<Vec<int>>() ==\n+    assert!(range_step(20, 0, -6).collect::<Vec<int>>() ==\n             vec![20, 14, 8, 2]);\n     assert!(range_step(200u8, 255, 50).collect::<Vec<u8>>() ==\n             vec![200u8, 250]);\n-    assert!(range_step(200i, -5, 1).collect::<Vec<int>>() == vec![]);\n-    assert!(range_step(200i, 200, 1).collect::<Vec<int>>() == vec![]);\n+    assert!(range_step(200, -5, 1).collect::<Vec<int>>() == vec![]);\n+    assert!(range_step(200, 200, 1).collect::<Vec<int>>() == vec![]);\n }\n \n #[test]\n fn test_range_step_inclusive() {\n-    assert!(range_step_inclusive(0i, 20, 5).collect::<Vec<int>>() ==\n+    assert!(range_step_inclusive(0, 20, 5).collect::<Vec<int>>() ==\n             vec![0, 5, 10, 15, 20]);\n-    assert!(range_step_inclusive(20i, 0, -5).collect::<Vec<int>>() ==\n+    assert!(range_step_inclusive(20, 0, -5).collect::<Vec<int>>() ==\n             vec![20, 15, 10, 5, 0]);\n-    assert!(range_step_inclusive(20i, 0, -6).collect::<Vec<int>>() ==\n+    assert!(range_step_inclusive(20, 0, -6).collect::<Vec<int>>() ==\n             vec![20, 14, 8, 2]);\n     assert!(range_step_inclusive(200u8, 255, 50).collect::<Vec<u8>>() ==\n             vec![200u8, 250]);\n-    assert!(range_step_inclusive(200i, -5, 1).collect::<Vec<int>>() ==\n+    assert!(range_step_inclusive(200, -5, 1).collect::<Vec<int>>() ==\n             vec![]);\n-    assert!(range_step_inclusive(200i, 200, 1).collect::<Vec<int>>() ==\n+    assert!(range_step_inclusive(200, 200, 1).collect::<Vec<int>>() ==\n             vec![200]);\n }\n \n #[test]\n fn test_reverse() {\n-    let mut ys = [1i, 2, 3, 4, 5];\n+    let mut ys = [1, 2, 3, 4, 5];\n     ys.iter_mut().reverse_in_place();\n     assert!(ys == [5, 4, 3, 2, 1]);\n }\n \n #[test]\n fn test_peekable_is_empty() {\n-    let a = [1i];\n+    let a = [1];\n     let mut it = a.iter().peekable();\n     assert!( !it.is_empty() );\n     it.next();\n@@ -821,16 +821,16 @@ fn test_min_max() {\n     let v: [int; 0] = [];\n     assert_eq!(v.iter().min_max(), NoElements);\n \n-    let v = [1i];\n+    let v = [1];\n     assert!(v.iter().min_max() == OneElement(&1));\n \n-    let v = [1i, 2, 3, 4, 5];\n+    let v = [1, 2, 3, 4, 5];\n     assert!(v.iter().min_max() == MinMax(&1, &5));\n \n-    let v = [1i, 2, 3, 4, 5, 6];\n+    let v = [1, 2, 3, 4, 5, 6];\n     assert!(v.iter().min_max() == MinMax(&1, &6));\n \n-    let v = [1i, 1, 1, 1];\n+    let v = [1, 1, 1, 1];\n     assert!(v.iter().min_max() == MinMax(&1, &1));\n }\n \n@@ -839,10 +839,10 @@ fn test_min_max_result() {\n     let r: MinMaxResult<int> = NoElements;\n     assert_eq!(r.into_option(), None);\n \n-    let r = OneElement(1i);\n+    let r = OneElement(1);\n     assert_eq!(r.into_option(), Some((1,1)));\n \n-    let r = MinMax(1i,2);\n+    let r = MinMax(1,2);\n     assert_eq!(r.into_option(), Some((1,2)));\n }\n "}, {"sha": "fd9dc696bdffe16fb549cd13a4b440f83e8afb8f", "filename": "src/libcoretest/mem.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibcoretest%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibcoretest%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fmem.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -70,8 +70,8 @@ fn align_of_val_basic() {\n \n #[test]\n fn test_swap() {\n-    let mut x = 31337i;\n-    let mut y = 42i;\n+    let mut x = 31337;\n+    let mut y = 42;\n     swap(&mut x, &mut y);\n     assert_eq!(x, 42);\n     assert_eq!(y, 31337);\n@@ -87,15 +87,15 @@ fn test_replace() {\n \n #[test]\n fn test_transmute_copy() {\n-    assert_eq!(1u, unsafe { transmute_copy(&1i) });\n+    assert_eq!(1u, unsafe { transmute_copy(&1) });\n }\n \n #[test]\n fn test_transmute() {\n     trait Foo {}\n     impl Foo for int {}\n \n-    let a = box 100i as Box<Foo>;\n+    let a = box 100 as Box<Foo>;\n     unsafe {\n         let x: ::core::raw::TraitObject = transmute(a);\n         assert!(*(x.data as *const int) == 100);\n@@ -146,7 +146,7 @@ fn trait_static_method_call(b: &mut Bencher) {\n \n #[bench]\n fn match_option_some(b: &mut Bencher) {\n-    let x = Some(10i);\n+    let x = Some(10);\n     b.iter(|| {\n         match x {\n             Some(y) => y,\n@@ -157,11 +157,11 @@ fn match_option_some(b: &mut Bencher) {\n \n #[bench]\n fn match_vec_pattern(b: &mut Bencher) {\n-    let x = [1i,2,3,4,5,6];\n+    let x = [1,2,3,4,5,6];\n     b.iter(|| {\n         match x {\n-            [1,2,3,..] => 10i,\n-            _ => 11i,\n+            [1,2,3,..] => 10,\n+            _ => 11,\n         }\n     });\n }"}, {"sha": "be4c83d23e8b33796600da56907aa81a3a7a5a11", "filename": "src/libcoretest/nonzero.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibcoretest%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibcoretest%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fnonzero.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -16,7 +16,7 @@ use std::mem::size_of;\n #[test]\n fn test_create_nonzero_instance() {\n     let _a = unsafe {\n-        NonZero::new(21i)\n+        NonZero::new(21)\n     };\n }\n \n@@ -28,14 +28,14 @@ fn test_size_nonzero_in_option() {\n #[test]\n fn test_match_on_nonzero_option() {\n     let a = Some(unsafe {\n-        NonZero::new(42i)\n+        NonZero::new(42)\n     });\n     match a {\n         Some(val) => assert_eq!(*val, 42),\n         None => panic!(\"unexpected None while matching on Some(NonZero(_))\")\n     }\n \n-    match unsafe { Some(NonZero::new(43i)) } {\n+    match unsafe { Some(NonZero::new(43)) } {\n         Some(val) => assert_eq!(*val, 43),\n         None => panic!(\"unexpected None while matching on Some(NonZero(_))\")\n     }\n@@ -52,9 +52,9 @@ fn test_match_option_empty_vec() {\n \n #[test]\n fn test_match_option_vec() {\n-    let a = Some(vec![1i, 2, 3, 4]);\n+    let a = Some(vec![1, 2, 3, 4]);\n     match a {\n-        Some(v) => assert_eq!(v, vec![1i, 2, 3, 4]),\n+        Some(v) => assert_eq!(v, vec![1, 2, 3, 4]),\n         None => panic!(\"unexpected None while matching on Some(vec![1, 2, 3, 4])\")\n     }\n }\n@@ -63,9 +63,9 @@ fn test_match_option_vec() {\n fn test_match_option_rc() {\n     use std::rc::Rc;\n \n-    let five = Rc::new(5i);\n+    let five = Rc::new(5);\n     match Some(five) {\n-        Some(r) => assert_eq!(*r, 5i),\n+        Some(r) => assert_eq!(*r, 5),\n         None => panic!(\"unexpected None while matching on Some(Rc::new(5))\")\n     }\n }\n@@ -74,9 +74,9 @@ fn test_match_option_rc() {\n fn test_match_option_arc() {\n     use std::sync::Arc;\n \n-    let five = Arc::new(5i);\n+    let five = Arc::new(5);\n     match Some(five) {\n-        Some(a) => assert_eq!(*a, 5i),\n+        Some(a) => assert_eq!(*a, 5),\n         None => panic!(\"unexpected None while matching on Some(Arc::new(5))\")\n     }\n }"}, {"sha": "f89733e766b1e478b54b1a4fa20e26992013bb7b", "filename": "src/libcoretest/num/int_macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibcoretest%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibcoretest%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fnum%2Fint_macros.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -151,8 +151,8 @@ mod tests {\n \n     #[test]\n     fn test_signed_checked_div() {\n-        assert!(10i.checked_div(2) == Some(5));\n-        assert!(5i.checked_div(0) == None);\n+        assert!(10.checked_div(2) == Some(5));\n+        assert!(5.checked_div(0) == None);\n         assert!(int::MIN.checked_div(-1) == None);\n     }\n "}, {"sha": "0b013359f7e6990d5a8043655a5026ffbf2eb8e2", "filename": "src/libcoretest/num/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibcoretest%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibcoretest%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fnum%2Fmod.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -40,11 +40,11 @@ pub fn test_num<T>(ten: T, two: T) where\n      + Rem<Output=T> + Debug\n      + Copy\n {\n-    assert_eq!(ten.add(two),  cast(12i).unwrap());\n-    assert_eq!(ten.sub(two),  cast(8i).unwrap());\n-    assert_eq!(ten.mul(two),  cast(20i).unwrap());\n-    assert_eq!(ten.div(two),  cast(5i).unwrap());\n-    assert_eq!(ten.rem(two),  cast(0i).unwrap());\n+    assert_eq!(ten.add(two),  cast(12).unwrap());\n+    assert_eq!(ten.sub(two),  cast(8).unwrap());\n+    assert_eq!(ten.mul(two),  cast(20).unwrap());\n+    assert_eq!(ten.div(two),  cast(5).unwrap());\n+    assert_eq!(ten.rem(two),  cast(0).unwrap());\n \n     assert_eq!(ten.add(two),  ten + two);\n     assert_eq!(ten.sub(two),  ten - two);"}, {"sha": "b32ae68b5d3923b54db83694be90f2363015f9ca", "filename": "src/libcoretest/option.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibcoretest%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibcoretest%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Foption.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -16,7 +16,7 @@ use core::clone::Clone;\n #[test]\n fn test_get_ptr() {\n     unsafe {\n-        let x = box 0i;\n+        let x = box 0;\n         let addr_x: *const int = mem::transmute(&*x);\n         let opt = Some(x);\n         let y = opt.unwrap();\n@@ -59,7 +59,7 @@ fn test_get_resource() {\n         }\n     }\n \n-    let i = Rc::new(RefCell::new(0i));\n+    let i = Rc::new(RefCell::new(0));\n     {\n         let x = r(i.clone());\n         let opt = Some(x);\n@@ -71,7 +71,7 @@ fn test_get_resource() {\n #[test]\n fn test_option_dance() {\n     let x = Some(());\n-    let mut y = Some(5i);\n+    let mut y = Some(5);\n     let mut y2 = 0;\n     for _x in x.iter() {\n         y2 = y.take().unwrap();\n@@ -89,12 +89,12 @@ fn test_option_too_much_dance() {\n \n #[test]\n fn test_and() {\n-    let x: Option<int> = Some(1i);\n-    assert_eq!(x.and(Some(2i)), Some(2));\n+    let x: Option<int> = Some(1);\n+    assert_eq!(x.and(Some(2)), Some(2));\n     assert_eq!(x.and(None::<int>), None);\n \n     let x: Option<int> = None;\n-    assert_eq!(x.and(Some(2i)), None);\n+    assert_eq!(x.and(Some(2)), None);\n     assert_eq!(x.and(None::<int>), None);\n }\n \n@@ -133,7 +133,7 @@ fn test_or_else() {\n \n #[test]\n fn test_unwrap() {\n-    assert_eq!(Some(1i).unwrap(), 1);\n+    assert_eq!(Some(1).unwrap(), 1);\n     let s = Some(\"hello\".to_string()).unwrap();\n     assert_eq!(s, \"hello\");\n }\n@@ -172,7 +172,7 @@ fn test_unwrap_or_else() {\n \n #[test]\n fn test_iter() {\n-    let val = 5i;\n+    let val = 5;\n \n     let x = Some(val);\n     let mut it = x.iter();\n@@ -185,8 +185,8 @@ fn test_iter() {\n \n #[test]\n fn test_mut_iter() {\n-    let val = 5i;\n-    let new_val = 11i;\n+    let val = 5;\n+    let new_val = 11;\n \n     let mut x = Some(val);\n     {\n@@ -223,13 +223,13 @@ fn test_ord() {\n /* FIXME(#20575)\n #[test]\n fn test_collect() {\n-    let v: Option<Vec<int>> = (0i..0).map(|_| Some(0i)).collect();\n+    let v: Option<Vec<int>> = (0..0).map(|_| Some(0i)).collect();\n     assert!(v == Some(vec![]));\n \n-    let v: Option<Vec<int>> = (0i..3).map(|x| Some(x)).collect();\n+    let v: Option<Vec<int>> = (0..3).map(|x| Some(x)).collect();\n     assert!(v == Some(vec![0, 1, 2]));\n \n-    let v: Option<Vec<int>> = (0i..3).map(|x| {\n+    let v: Option<Vec<int>> = (0..3).map(|x| {\n         if x > 1 { None } else { Some(x) }\n     }).collect();\n     assert!(v == None);"}, {"sha": "7f0b97c53d465b371f70331f9bee38d5cbbb9f15", "filename": "src/libcoretest/ptr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibcoretest%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibcoretest%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fptr.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -84,7 +84,7 @@ fn test_as_ref() {\n         assert_eq!(q.as_ref().unwrap(), &2);\n \n         // Lifetime inference\n-        let u = 2i;\n+        let u = 2;\n         {\n             let p: *const int = &u as *const _;\n             assert_eq!(p.as_ref().unwrap(), &2);\n@@ -102,7 +102,7 @@ fn test_as_mut() {\n         assert!(q.as_mut().unwrap() == &mut 2);\n \n         // Lifetime inference\n-        let mut u = 2i;\n+        let mut u = 2;\n         {\n             let p: *mut int = &mut u as *mut _;\n             assert!(p.as_mut().unwrap() == &mut 2);\n@@ -113,7 +113,7 @@ fn test_as_mut() {\n #[test]\n fn test_ptr_addition() {\n     unsafe {\n-        let xs = repeat(5i).take(16).collect::<Vec<_>>();\n+        let xs = repeat(5).take(16).collect::<Vec<_>>();\n         let mut ptr = xs.as_ptr();\n         let end = ptr.offset(16);\n \n@@ -131,7 +131,7 @@ fn test_ptr_addition() {\n             m_ptr = m_ptr.offset(1);\n         }\n \n-        assert!(xs_mut == repeat(10i).take(16).collect::<Vec<_>>());\n+        assert!(xs_mut == repeat(10).take(16).collect::<Vec<_>>());\n     }\n }\n "}, {"sha": "ab7b5101e726a59f652cad6367e09f8b6c151056", "filename": "src/libcoretest/result.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibcoretest%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibcoretest%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fresult.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -13,11 +13,11 @@ pub fn op2() -> Result<int, &'static str> { Err(\"sadface\") }\n \n #[test]\n pub fn test_and() {\n-    assert_eq!(op1().and(Ok(667i)).unwrap(), 667);\n+    assert_eq!(op1().and(Ok(667)).unwrap(), 667);\n     assert_eq!(op1().and(Err::<i32, &'static str>(\"bad\")).unwrap_err(),\n                \"bad\");\n \n-    assert_eq!(op2().and(Ok(667i)).unwrap_err(), \"sadface\");\n+    assert_eq!(op2().and(Ok(667)).unwrap_err(), \"sadface\");\n     assert_eq!(op2().and(Err::<i32,&'static str>(\"bad\")).unwrap_err(),\n                \"sadface\");\n }\n@@ -68,20 +68,20 @@ pub fn test_impl_map_err() {\n /* FIXME(#20575)\n #[test]\n fn test_collect() {\n-    let v: Result<Vec<int>, ()> = (0i..0).map(|_| Ok::<int, ()>(0)).collect();\n+    let v: Result<Vec<int>, ()> = (0..0).map(|_| Ok::<int, ()>(0)).collect();\n     assert!(v == Ok(vec![]));\n \n-    let v: Result<Vec<int>, ()> = (0i..3).map(|x| Ok::<int, ()>(x)).collect();\n+    let v: Result<Vec<int>, ()> = (0..3).map(|x| Ok::<int, ()>(x)).collect();\n     assert!(v == Ok(vec![0, 1, 2]));\n \n-    let v: Result<Vec<int>, int> = (0i..3).map(|x| {\n+    let v: Result<Vec<int>, int> = (0..3).map(|x| {\n         if x > 1 { Err(x) } else { Ok(x) }\n     }).collect();\n     assert!(v == Err(2));\n \n     // test that it does not take more elements than it needs\n     let mut functions: [Box<Fn() -> Result<(), int>>; 3] =\n-        [box || Ok(()), box || Err(1i), box || panic!()];\n+        [box || Ok(()), box || Err(1), box || panic!()];\n \n     let v: Result<Vec<()>, int> = functions.iter_mut().map(|f| (*f)()).collect();\n     assert!(v == Err(1));\n@@ -101,7 +101,7 @@ pub fn test_fmt_default() {\n \n #[test]\n pub fn test_unwrap_or() {\n-    let ok: Result<int, &'static str> = Ok(100i);\n+    let ok: Result<int, &'static str> = Ok(100);\n     let ok_err: Result<int, &'static str> = Err(\"Err\");\n \n     assert_eq!(ok.unwrap_or(50), 100);\n@@ -112,7 +112,7 @@ pub fn test_unwrap_or() {\n pub fn test_unwrap_or_else() {\n     fn handler(msg: &'static str) -> int {\n         if msg == \"I got this.\" {\n-            50i\n+            50\n         } else {\n             panic!(\"BadBad\")\n         }\n@@ -130,7 +130,7 @@ pub fn test_unwrap_or_else() {\n pub fn test_unwrap_or_else_panic() {\n     fn handler(msg: &'static str) -> int {\n         if msg == \"I got this.\" {\n-            50i\n+            50\n         } else {\n             panic!(\"BadBad\")\n         }"}, {"sha": "6d5cc38ef0a74f98c86d206a97f01fb5589240f2", "filename": "src/libcoretest/slice.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibcoretest%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibcoretest%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fslice.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -12,25 +12,25 @@ use core::result::Result::{Ok, Err};\n \n #[test]\n fn binary_search_not_found() {\n-    let b = [1i, 2, 4, 6, 8, 9];\n+    let b = [1, 2, 4, 6, 8, 9];\n     assert!(b.binary_search_by(|v| v.cmp(&6)) == Ok(3));\n-    let b = [1i, 2, 4, 6, 8, 9];\n+    let b = [1, 2, 4, 6, 8, 9];\n     assert!(b.binary_search_by(|v| v.cmp(&5)) == Err(3));\n-    let b = [1i, 2, 4, 6, 7, 8, 9];\n+    let b = [1, 2, 4, 6, 7, 8, 9];\n     assert!(b.binary_search_by(|v| v.cmp(&6)) == Ok(3));\n-    let b = [1i, 2, 4, 6, 7, 8, 9];\n+    let b = [1, 2, 4, 6, 7, 8, 9];\n     assert!(b.binary_search_by(|v| v.cmp(&5)) == Err(3));\n-    let b = [1i, 2, 4, 6, 8, 9];\n+    let b = [1, 2, 4, 6, 8, 9];\n     assert!(b.binary_search_by(|v| v.cmp(&8)) == Ok(4));\n-    let b = [1i, 2, 4, 6, 8, 9];\n+    let b = [1, 2, 4, 6, 8, 9];\n     assert!(b.binary_search_by(|v| v.cmp(&7)) == Err(4));\n-    let b = [1i, 2, 4, 6, 7, 8, 9];\n+    let b = [1, 2, 4, 6, 7, 8, 9];\n     assert!(b.binary_search_by(|v| v.cmp(&8)) == Ok(5));\n-    let b = [1i, 2, 4, 5, 6, 8, 9];\n+    let b = [1, 2, 4, 5, 6, 8, 9];\n     assert!(b.binary_search_by(|v| v.cmp(&7)) == Err(5));\n-    let b = [1i, 2, 4, 5, 6, 8, 9];\n+    let b = [1, 2, 4, 5, 6, 8, 9];\n     assert!(b.binary_search_by(|v| v.cmp(&0)) == Err(0));\n-    let b = [1i, 2, 4, 5, 6, 8];\n+    let b = [1, 2, 4, 5, 6, 8];\n     assert!(b.binary_search_by(|v| v.cmp(&9)) == Err(6));\n }\n "}, {"sha": "57844f5995f802601626e3eab2e7f3f72d86d59c", "filename": "src/libcoretest/tuple.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibcoretest%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibcoretest%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Ftuple.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -12,7 +12,7 @@ use std::cmp::Ordering::{Equal, Less, Greater};\n \n #[test]\n fn test_clone() {\n-    let a = (1i, \"2\");\n+    let a = (1, \"2\");\n     let b = a.clone();\n     assert_eq!(a, b);\n }\n@@ -59,10 +59,10 @@ fn test_tuple_cmp() {\n \n #[test]\n fn test_show() {\n-    let s = format!(\"{:?}\", (1i,));\n+    let s = format!(\"{:?}\", (1,));\n     assert_eq!(s, \"(1,)\");\n-    let s = format!(\"{:?}\", (1i, true));\n+    let s = format!(\"{:?}\", (1, true));\n     assert_eq!(s, \"(1, true)\");\n-    let s = format!(\"{:?}\", (1i, \"hi\", true));\n+    let s = format!(\"{:?}\", (1, \"hi\", true));\n     assert_eq!(s, \"(1, \\\"hi\\\", true)\");\n }"}, {"sha": "bf7fdaeadf45c863db0fcafee0cee7edb5346954", "filename": "src/liblog/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Fliblog%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Fliblog%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Flib.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -20,7 +20,7 @@\n //!     error!(\"this is printed by default\");\n //!\n //!     if log_enabled!(log::INFO) {\n-//!         let x = 3i * 4i; // expensive computation\n+//!         let x = 3 * 4; // expensive computation\n //!         info!(\"the answer was: {:?}\", x);\n //!     }\n //! }"}, {"sha": "5c7085b7b6c5f8909a451fcaf892ba473d66b6a7", "filename": "src/liblog/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Fliblog%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Fliblog%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Fmacros.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -119,7 +119,7 @@ macro_rules! warn {\n /// #[macro_use] extern crate log;\n ///\n /// fn main() {\n-///     let ret = 3i;\n+///     let ret = 3;\n ///     info!(\"this function is about to return: {}\", ret);\n /// }\n /// ```\n@@ -145,7 +145,7 @@ macro_rules! info {\n /// #[macro_use] extern crate log;\n ///\n /// fn main() {\n-///     debug!(\"x = {x}, y = {y}\", x=10i, y=20i);\n+///     debug!(\"x = {x}, y = {y}\", x=10, y=20);\n /// }\n /// ```\n ///"}, {"sha": "1b5e5ae8398e0ecf558e36321f039f74137cf0b2", "filename": "src/librand/distributions/mod.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibrand%2Fdistributions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibrand%2Fdistributions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fmod.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -311,36 +311,36 @@ mod tests {\n             }}\n         }\n \n-        t!(vec!(Weighted { weight: 1, item: 10i}), [10]);\n+        t!(vec!(Weighted { weight: 1, item: 10}), [10]);\n \n         // skip some\n-        t!(vec!(Weighted { weight: 0, item: 20i},\n-                Weighted { weight: 2, item: 21i},\n-                Weighted { weight: 0, item: 22i},\n-                Weighted { weight: 1, item: 23i}),\n+        t!(vec!(Weighted { weight: 0, item: 20},\n+                Weighted { weight: 2, item: 21},\n+                Weighted { weight: 0, item: 22},\n+                Weighted { weight: 1, item: 23}),\n            [21,21, 23]);\n \n         // different weights\n-        t!(vec!(Weighted { weight: 4, item: 30i},\n-                Weighted { weight: 3, item: 31i}),\n+        t!(vec!(Weighted { weight: 4, item: 30},\n+                Weighted { weight: 3, item: 31}),\n            [30,30,30,30, 31,31,31]);\n \n         // check that we're binary searching\n         // correctly with some vectors of odd\n         // length.\n-        t!(vec!(Weighted { weight: 1, item: 40i},\n-                Weighted { weight: 1, item: 41i},\n-                Weighted { weight: 1, item: 42i},\n-                Weighted { weight: 1, item: 43i},\n-                Weighted { weight: 1, item: 44i}),\n+        t!(vec!(Weighted { weight: 1, item: 40},\n+                Weighted { weight: 1, item: 41},\n+                Weighted { weight: 1, item: 42},\n+                Weighted { weight: 1, item: 43},\n+                Weighted { weight: 1, item: 44}),\n            [40, 41, 42, 43, 44]);\n-        t!(vec!(Weighted { weight: 1, item: 50i},\n-                Weighted { weight: 1, item: 51i},\n-                Weighted { weight: 1, item: 52i},\n-                Weighted { weight: 1, item: 53i},\n-                Weighted { weight: 1, item: 54i},\n-                Weighted { weight: 1, item: 55i},\n-                Weighted { weight: 1, item: 56i}),\n+        t!(vec!(Weighted { weight: 1, item: 50},\n+                Weighted { weight: 1, item: 51},\n+                Weighted { weight: 1, item: 52},\n+                Weighted { weight: 1, item: 53},\n+                Weighted { weight: 1, item: 54},\n+                Weighted { weight: 1, item: 55},\n+                Weighted { weight: 1, item: 56}),\n            [50, 51, 52, 53, 54, 55, 56]);\n     }\n \n@@ -350,15 +350,15 @@ mod tests {\n     }\n     #[test] #[should_fail]\n     fn test_weighted_choice_zero_weight() {\n-        WeightedChoice::new(&mut [Weighted { weight: 0, item: 0i},\n-                                  Weighted { weight: 0, item: 1i}]);\n+        WeightedChoice::new(&mut [Weighted { weight: 0, item: 0},\n+                                  Weighted { weight: 0, item: 1}]);\n     }\n     #[test] #[should_fail]\n     fn test_weighted_choice_weight_overflows() {\n         let x = (-1) as uint / 2; // x + x + 2 is the overflow\n-        WeightedChoice::new(&mut [Weighted { weight: x, item: 0i },\n-                                  Weighted { weight: 1, item: 1i },\n-                                  Weighted { weight: x, item: 2i },\n-                                  Weighted { weight: 1, item: 3i }]);\n+        WeightedChoice::new(&mut [Weighted { weight: x, item: 0 },\n+                                  Weighted { weight: 1, item: 1 },\n+                                  Weighted { weight: x, item: 2 },\n+                                  Weighted { weight: 1, item: 3 }]);\n     }\n }"}, {"sha": "16830c84c466cae173ceccccf43cd76d335f9995", "filename": "src/librand/distributions/range.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibrand%2Fdistributions%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibrand%2Fdistributions%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Frange.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -171,12 +171,12 @@ mod tests {\n     #[should_fail]\n     #[test]\n     fn test_range_bad_limits_equal() {\n-        Range::new(10i, 10i);\n+        Range::new(10, 10);\n     }\n     #[should_fail]\n     #[test]\n     fn test_range_bad_limits_flipped() {\n-        Range::new(10i, 5i);\n+        Range::new(10, 5);\n     }\n \n     #[test]"}, {"sha": "395fcd047d667bc13b0344cdb5949c4abf068465", "filename": "src/librand/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -152,7 +152,7 @@ pub trait Rng : Sized {\n         // (3) adds more `unsafe` that needs to be checked, (4)\n         // probably doesn't give much performance gain if\n         // optimisations are on.\n-        let mut count = 0i;\n+        let mut count = 0;\n         let mut num = 0;\n         for byte in dest.iter_mut() {\n             if count == 0 {\n@@ -269,7 +269,7 @@ pub trait Rng : Sized {\n     /// ```\n     /// use std::rand::{thread_rng, Rng};\n     ///\n-    /// let choices = [1i, 2, 4, 8, 16, 32];\n+    /// let choices = [1, 2, 4, 8, 16, 32];\n     /// let mut rng = thread_rng();\n     /// println!(\"{:?}\", rng.choose(&choices));\n     /// assert_eq!(rng.choose(&choices[..0]), None);\n@@ -290,7 +290,7 @@ pub trait Rng : Sized {\n     /// use std::rand::{thread_rng, Rng};\n     ///\n     /// let mut rng = thread_rng();\n-    /// let mut y = [1i, 2, 3];\n+    /// let mut y = [1, 2, 3];\n     /// rng.shuffle(&mut y);\n     /// println!(\"{:?}\", y.as_slice());\n     /// rng.shuffle(&mut y);"}, {"sha": "5d77cfe1061d59115040601afecca186f88b9958", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -493,7 +493,7 @@ pub struct BoxPointers;\n impl BoxPointers {\n     fn check_heap_type<'a, 'tcx>(&self, cx: &Context<'a, 'tcx>,\n                                  span: Span, ty: Ty<'tcx>) {\n-        let mut n_uniq = 0i;\n+        let mut n_uniq = 0u;\n         ty::fold_ty(cx.tcx, ty, |t| {\n             match t.sty {\n                 ty::ty_uniq(_) => {"}, {"sha": "2685f0cb5cef711ecb6ac9274e8d729bc2fd6284", "filename": "src/librustc_trans/save/span_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibrustc_trans%2Fsave%2Fspan_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibrustc_trans%2Fsave%2Fspan_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fspan_utils.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -236,7 +236,7 @@ impl<'a> SpanUtils<'a> {\n \n         let mut toks = self.retokenise_span(span);\n         // We keep track of how many brackets we're nested in\n-        let mut bracket_count = 0i;\n+        let mut bracket_count = 0;\n         loop {\n             let ts = toks.real_token();\n             if ts.tok == token::Eof {"}, {"sha": "bdb579d1ffa0f7ba960750843b1945a82b32c0c8", "filename": "src/librustc_trans/trans/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2F_match.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -1078,7 +1078,7 @@ fn compile_submatch_continue<'a, 'p, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n     let sw = if kind == Switch {\n         build::Switch(bcx, test_val, else_cx.llbb, opts.len())\n     } else {\n-        C_int(ccx, 0i) // Placeholder for when not using a switch\n+        C_int(ccx, 0) // Placeholder for when not using a switch\n     };\n \n     let defaults = enter_default(else_cx, dm, m, col, val);"}, {"sha": "6c017866ef07ceda4690fd97b8161132c609018f", "filename": "src/librustc_trans/trans/foreign.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -973,9 +973,9 @@ pub fn lltype_for_foreign_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n fn add_argument_attributes(tys: &ForeignTypes,\n                            llfn: ValueRef) {\n     let mut i = if tys.fn_ty.ret_ty.is_indirect() {\n-        1i\n+        1\n     } else {\n-        0i\n+        0\n     };\n \n     match tys.fn_ty.ret_ty.attr {"}, {"sha": "358e38a671d6d3aecc3f4f3305e5e45000291e82", "filename": "src/librustc_trans/trans/tvec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -499,7 +499,7 @@ pub fn iter_vec_raw<'blk, 'tcx, F>(bcx: Block<'blk, 'tcx>,\n         CondBr(header_bcx, not_yet_at_end, body_bcx.llbb, next_bcx.llbb, DebugLoc::None);\n         let body_bcx = f(body_bcx, data_ptr, vt.unit_ty);\n         AddIncomingToPhi(data_ptr, InBoundsGEP(body_bcx, data_ptr,\n-                                               &[C_int(bcx.ccx(), 1i)]),\n+                                               &[C_int(bcx.ccx(), 1)]),\n                          body_bcx.llbb);\n         Br(body_bcx, header_bcx.llbb, DebugLoc::None);\n         next_bcx"}, {"sha": "c9b6af26ce0c3b6ca26b8367d657d33016e68bb4", "filename": "src/libserialize/hex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibserialize%2Fhex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibserialize%2Fhex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fhex.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -116,7 +116,7 @@ impl FromHex for str {\n     fn from_hex(&self) -> Result<Vec<u8>, FromHexError> {\n         // This may be an overestimate if there is any whitespace\n         let mut b = Vec::with_capacity(self.len() / 2);\n-        let mut modulus = 0i;\n+        let mut modulus = 0;\n         let mut buf = 0u8;\n \n         for (idx, byte) in self.bytes().enumerate() {"}, {"sha": "c16a6978620b545278e609915f82dcb0b0aea533", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -3937,7 +3937,7 @@ mod tests {\n         hash_map.insert(\"a\".to_string(), 1u);\n         hash_map.insert(\"b\".to_string(), 2);\n         assert_eq!(hash_map.to_json(), object);\n-        assert_eq!(Some(15i).to_json(), I64(15));\n+        assert_eq!(Some(15).to_json(), I64(15));\n         assert_eq!(Some(15u).to_json(), U64(15));\n         assert_eq!(None::<int>.to_json(), Null);\n     }\n@@ -3997,7 +3997,7 @@ mod tests {\n \n     fn big_json() -> string::String {\n         let mut src = \"[\\n\".to_string();\n-        for _ in 0i..500 {\n+        for _ in 0..500 {\n             src.push_str(r#\"{ \"a\": true, \"b\": null, \"c\":3.1415, \"d\": \"Hello world\", \"e\": \\\n                             [1,2,3]},\"#);\n         }"}, {"sha": "ce02648b8f29d884a389185115f02e46302cc362", "filename": "src/libstd/collections/hash/bench.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibstd%2Fcollections%2Fhash%2Fbench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibstd%2Fcollections%2Fhash%2Fbench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fbench.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -32,7 +32,7 @@ fn new_insert_drop(b : &mut Bencher) {\n \n     b.iter(|| {\n         let mut m = HashMap::new();\n-        m.insert(0i, 0i);\n+        m.insert(0, 0);\n         assert_eq!(m.len(), 1);\n     })\n }\n@@ -43,7 +43,7 @@ fn grow_by_insertion(b: &mut Bencher) {\n \n     let mut m = HashMap::new();\n \n-    for i in range_inclusive(1i, 1000) {\n+    for i in range_inclusive(1, 1000) {\n         m.insert(i, i);\n     }\n \n@@ -61,12 +61,12 @@ fn find_existing(b: &mut Bencher) {\n \n     let mut m = HashMap::new();\n \n-    for i in range_inclusive(1i, 1000) {\n+    for i in range_inclusive(1, 1000) {\n         m.insert(i, i);\n     }\n \n     b.iter(|| {\n-        for i in range_inclusive(1i, 1000) {\n+        for i in range_inclusive(1, 1000) {\n             m.contains_key(&i);\n         }\n     });\n@@ -78,12 +78,12 @@ fn find_nonexisting(b: &mut Bencher) {\n \n     let mut m = HashMap::new();\n \n-    for i in range_inclusive(1i, 1000) {\n+    for i in range_inclusive(1, 1000) {\n         m.insert(i, i);\n     }\n \n     b.iter(|| {\n-        for i in range_inclusive(1001i, 2000) {\n+        for i in range_inclusive(1001, 2000) {\n             m.contains_key(&i);\n         }\n     });\n@@ -95,11 +95,11 @@ fn hashmap_as_queue(b: &mut Bencher) {\n \n     let mut m = HashMap::new();\n \n-    for i in range_inclusive(1i, 1000) {\n+    for i in range_inclusive(1, 1000) {\n         m.insert(i, i);\n     }\n \n-    let mut k = 1i;\n+    let mut k = 1;\n \n     b.iter(|| {\n         m.remove(&k);\n@@ -114,11 +114,11 @@ fn get_remove_insert(b: &mut Bencher) {\n \n     let mut m = HashMap::new();\n \n-    for i in range_inclusive(1i, 1000) {\n+    for i in range_inclusive(1, 1000) {\n         m.insert(i, i);\n     }\n \n-    let mut k = 1i;\n+    let mut k = 1;\n \n     b.iter(|| {\n         m.get(&(k + 400));"}, {"sha": "0b81e1198216542c2d4ed5ac1d89af5980a40ecb", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 47, "deletions": 47, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -536,7 +536,7 @@ impl<K, V, S, H> HashMap<K, V, S>\n     ///\n     /// let s = RandomState::new();\n     /// let mut map = HashMap::with_hash_state(s);\n-    /// map.insert(1i, 2u);\n+    /// map.insert(1, 2u);\n     /// ```\n     #[inline]\n     #[unstable(feature = \"std_misc\", reason = \"hasher stuff is unclear\")]\n@@ -564,7 +564,7 @@ impl<K, V, S, H> HashMap<K, V, S>\n     ///\n     /// let s = RandomState::new();\n     /// let mut map = HashMap::with_capacity_and_hash_state(10, s);\n-    /// map.insert(1i, 2u);\n+    /// map.insert(1, 2u);\n     /// ```\n     #[inline]\n     #[unstable(feature = \"std_misc\", reason = \"hasher stuff is unclear\")]\n@@ -809,7 +809,7 @@ impl<K, V, S, H> HashMap<K, V, S>\n     /// use std::collections::HashMap;\n     ///\n     /// let mut map = HashMap::new();\n-    /// map.insert(\"a\", 1i);\n+    /// map.insert(\"a\", 1);\n     /// map.insert(\"b\", 2);\n     /// map.insert(\"c\", 3);\n     ///\n@@ -834,7 +834,7 @@ impl<K, V, S, H> HashMap<K, V, S>\n     /// use std::collections::HashMap;\n     ///\n     /// let mut map = HashMap::new();\n-    /// map.insert(\"a\", 1i);\n+    /// map.insert(\"a\", 1);\n     /// map.insert(\"b\", 2);\n     /// map.insert(\"c\", 3);\n     ///\n@@ -859,7 +859,7 @@ impl<K, V, S, H> HashMap<K, V, S>\n     /// use std::collections::HashMap;\n     ///\n     /// let mut map = HashMap::new();\n-    /// map.insert(\"a\", 1i);\n+    /// map.insert(\"a\", 1);\n     /// map.insert(\"b\", 2);\n     /// map.insert(\"c\", 3);\n     ///\n@@ -882,7 +882,7 @@ impl<K, V, S, H> HashMap<K, V, S>\n     /// use std::collections::HashMap;\n     ///\n     /// let mut map = HashMap::new();\n-    /// map.insert(\"a\", 1i);\n+    /// map.insert(\"a\", 1);\n     /// map.insert(\"b\", 2);\n     /// map.insert(\"c\", 3);\n     ///\n@@ -910,7 +910,7 @@ impl<K, V, S, H> HashMap<K, V, S>\n     /// use std::collections::HashMap;\n     ///\n     /// let mut map = HashMap::new();\n-    /// map.insert(\"a\", 1i);\n+    /// map.insert(\"a\", 1);\n     /// map.insert(\"b\", 2);\n     /// map.insert(\"c\", 3);\n     ///\n@@ -1622,7 +1622,7 @@ mod test_map {\n     fn test_create_capacity_zero() {\n         let mut m = HashMap::with_capacity(0);\n \n-        assert!(m.insert(1i, 1i).is_none());\n+        assert!(m.insert(1, 1).is_none());\n \n         assert!(m.contains_key(&1));\n         assert!(!m.contains_key(&0));\n@@ -1632,9 +1632,9 @@ mod test_map {\n     fn test_insert() {\n         let mut m = HashMap::new();\n         assert_eq!(m.len(), 0);\n-        assert!(m.insert(1i, 2i).is_none());\n+        assert!(m.insert(1, 2).is_none());\n         assert_eq!(m.len(), 1);\n-        assert!(m.insert(2i, 4i).is_none());\n+        assert!(m.insert(2, 4).is_none());\n         assert_eq!(m.len(), 2);\n         assert_eq!(*m.get(&1).unwrap(), 2);\n         assert_eq!(*m.get(&2).unwrap(), 4);\n@@ -1674,7 +1674,7 @@ mod test_map {\n     #[test]\n     fn test_drops() {\n         DROP_VECTOR.with(|slot| {\n-            *slot.borrow_mut() = repeat(0i).take(200).collect();\n+            *slot.borrow_mut() = repeat(0).take(200).collect();\n         });\n \n         {\n@@ -1807,10 +1807,10 @@ mod test_map {\n \n         // Try this a few times to make sure we never screw up the hashmap's\n         // internal state.\n-        for _ in 0i..10 {\n+        for _ in 0..10 {\n             assert!(m.is_empty());\n \n-            for i in range_inclusive(1i, 1000) {\n+            for i in range_inclusive(1, 1000) {\n                 assert!(m.insert(i, i).is_none());\n \n                 for j in range_inclusive(1, i) {\n@@ -1824,12 +1824,12 @@ mod test_map {\n                 }\n             }\n \n-            for i in range_inclusive(1001i, 2000) {\n+            for i in range_inclusive(1001, 2000) {\n                 assert!(!m.contains_key(&i));\n             }\n \n             // remove forwards\n-            for i in range_inclusive(1i, 1000) {\n+            for i in range_inclusive(1, 1000) {\n                 assert!(m.remove(&i).is_some());\n \n                 for j in range_inclusive(1, i) {\n@@ -1841,16 +1841,16 @@ mod test_map {\n                 }\n             }\n \n-            for i in range_inclusive(1i, 1000) {\n+            for i in range_inclusive(1, 1000) {\n                 assert!(!m.contains_key(&i));\n             }\n \n-            for i in range_inclusive(1i, 1000) {\n+            for i in range_inclusive(1, 1000) {\n                 assert!(m.insert(i, i).is_none());\n             }\n \n             // remove backwards\n-            for i in range_step_inclusive(1000i, 1, -1) {\n+            for i in range_step_inclusive(1000, 1, -1) {\n                 assert!(m.remove(&i).is_some());\n \n                 for j in range_inclusive(i, 1000) {\n@@ -1867,9 +1867,9 @@ mod test_map {\n     #[test]\n     fn test_find_mut() {\n         let mut m = HashMap::new();\n-        assert!(m.insert(1i, 12i).is_none());\n-        assert!(m.insert(2i, 8i).is_none());\n-        assert!(m.insert(5i, 14i).is_none());\n+        assert!(m.insert(1, 12).is_none());\n+        assert!(m.insert(2, 8).is_none());\n+        assert!(m.insert(5, 14).is_none());\n         let new = 100;\n         match m.get_mut(&5) {\n             None => panic!(), Some(x) => *x = new\n@@ -1880,18 +1880,18 @@ mod test_map {\n     #[test]\n     fn test_insert_overwrite() {\n         let mut m = HashMap::new();\n-        assert!(m.insert(1i, 2i).is_none());\n+        assert!(m.insert(1, 2).is_none());\n         assert_eq!(*m.get(&1).unwrap(), 2);\n-        assert!(!m.insert(1i, 3i).is_none());\n+        assert!(!m.insert(1, 3).is_none());\n         assert_eq!(*m.get(&1).unwrap(), 3);\n     }\n \n     #[test]\n     fn test_insert_conflicts() {\n         let mut m = HashMap::with_capacity(4);\n-        assert!(m.insert(1i, 2i).is_none());\n-        assert!(m.insert(5i, 3i).is_none());\n-        assert!(m.insert(9i, 4i).is_none());\n+        assert!(m.insert(1, 2).is_none());\n+        assert!(m.insert(5, 3).is_none());\n+        assert!(m.insert(9, 4).is_none());\n         assert_eq!(*m.get(&9).unwrap(), 4);\n         assert_eq!(*m.get(&5).unwrap(), 3);\n         assert_eq!(*m.get(&1).unwrap(), 2);\n@@ -1900,7 +1900,7 @@ mod test_map {\n     #[test]\n     fn test_conflict_remove() {\n         let mut m = HashMap::with_capacity(4);\n-        assert!(m.insert(1i, 2i).is_none());\n+        assert!(m.insert(1, 2).is_none());\n         assert_eq!(*m.get(&1).unwrap(), 2);\n         assert!(m.insert(5, 3).is_none());\n         assert_eq!(*m.get(&1).unwrap(), 2);\n@@ -1917,7 +1917,7 @@ mod test_map {\n     #[test]\n     fn test_is_empty() {\n         let mut m = HashMap::with_capacity(4);\n-        assert!(m.insert(1i, 2i).is_none());\n+        assert!(m.insert(1, 2).is_none());\n         assert!(!m.is_empty());\n         assert!(m.remove(&1).is_some());\n         assert!(m.is_empty());\n@@ -1926,7 +1926,7 @@ mod test_map {\n     #[test]\n     fn test_pop() {\n         let mut m = HashMap::new();\n-        m.insert(1i, 2i);\n+        m.insert(1, 2);\n         assert_eq!(m.remove(&1), Some(2));\n         assert_eq!(m.remove(&1), None);\n     }\n@@ -1950,7 +1950,7 @@ mod test_map {\n \n     #[test]\n     fn test_keys() {\n-        let vec = vec![(1i, 'a'), (2i, 'b'), (3i, 'c')];\n+        let vec = vec![(1, 'a'), (2, 'b'), (3, 'c')];\n         let map = vec.into_iter().collect::<HashMap<int, char>>();\n         let keys = map.keys().map(|&k| k).collect::<Vec<int>>();\n         assert_eq!(keys.len(), 3);\n@@ -1961,7 +1961,7 @@ mod test_map {\n \n     #[test]\n     fn test_values() {\n-        let vec = vec![(1i, 'a'), (2i, 'b'), (3i, 'c')];\n+        let vec = vec![(1, 'a'), (2, 'b'), (3, 'c')];\n         let map = vec.into_iter().collect::<HashMap<int, char>>();\n         let values = map.values().map(|&v| v).collect::<Vec<char>>();\n         assert_eq!(values.len(), 3);\n@@ -1973,8 +1973,8 @@ mod test_map {\n     #[test]\n     fn test_find() {\n         let mut m = HashMap::new();\n-        assert!(m.get(&1i).is_none());\n-        m.insert(1i, 2i);\n+        assert!(m.get(&1).is_none());\n+        m.insert(1, 2);\n         match m.get(&1) {\n             None => panic!(),\n             Some(v) => assert_eq!(*v, 2)\n@@ -1984,17 +1984,17 @@ mod test_map {\n     #[test]\n     fn test_eq() {\n         let mut m1 = HashMap::new();\n-        m1.insert(1i, 2i);\n-        m1.insert(2i, 3i);\n-        m1.insert(3i, 4i);\n+        m1.insert(1, 2);\n+        m1.insert(2, 3);\n+        m1.insert(3, 4);\n \n         let mut m2 = HashMap::new();\n-        m2.insert(1i, 2i);\n-        m2.insert(2i, 3i);\n+        m2.insert(1, 2);\n+        m2.insert(2, 3);\n \n         assert!(m1 != m2);\n \n-        m2.insert(3i, 4i);\n+        m2.insert(3, 4);\n \n         assert_eq!(m1, m2);\n     }\n@@ -2004,8 +2004,8 @@ mod test_map {\n         let mut map: HashMap<int, int> = HashMap::new();\n         let empty: HashMap<int, int> = HashMap::new();\n \n-        map.insert(1i, 2i);\n-        map.insert(3i, 4i);\n+        map.insert(1, 2);\n+        map.insert(3, 4);\n \n         let map_str = format!(\"{:?}\", map);\n \n@@ -2127,7 +2127,7 @@ mod test_map {\n \n     #[test]\n     fn test_from_iter() {\n-        let xs = [(1i, 1i), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6)];\n+        let xs = [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6)];\n \n         let map: HashMap<int, int> = xs.iter().map(|&x| x).collect();\n \n@@ -2138,7 +2138,7 @@ mod test_map {\n \n     #[test]\n     fn test_size_hint() {\n-        let xs = [(1i, 1i), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6)];\n+        let xs = [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6)];\n \n         let map: HashMap<int, int> = xs.iter().map(|&x| x).collect();\n \n@@ -2151,7 +2151,7 @@ mod test_map {\n \n     #[test]\n     fn test_iter_len() {\n-        let xs = [(1i, 1i), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6)];\n+        let xs = [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6)];\n \n         let map: HashMap<int, int> = xs.iter().map(|&x| x).collect();\n \n@@ -2164,7 +2164,7 @@ mod test_map {\n \n     #[test]\n     fn test_mut_size_hint() {\n-        let xs = [(1i, 1i), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6)];\n+        let xs = [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6)];\n \n         let mut map: HashMap<int, int> = xs.iter().map(|&x| x).collect();\n \n@@ -2177,7 +2177,7 @@ mod test_map {\n \n     #[test]\n     fn test_iter_mut_len() {\n-        let xs = [(1i, 1i), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6)];\n+        let xs = [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6)];\n \n         let mut map: HashMap<int, int> = xs.iter().map(|&x| x).collect();\n \n@@ -2213,7 +2213,7 @@ mod test_map {\n \n     #[test]\n     fn test_entry(){\n-        let xs = [(1i, 10i), (2, 20), (3, 30), (4, 40), (5, 50), (6, 60)];\n+        let xs = [(1, 10), (2, 20), (3, 30), (4, 40), (5, 50), (6, 60)];\n \n         let mut map: HashMap<int, int> = xs.iter().map(|&x| x).collect();\n "}, {"sha": "3095c2c0e41ff5975055b930b03c9bbc73d4643d", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -168,7 +168,7 @@ impl<T, S, H> HashSet<T, S>\n     ///\n     /// let s = RandomState::new();\n     /// let mut set = HashSet::with_capacity_and_hash_state(10u, s);\n-    /// set.insert(1i);\n+    /// set.insert(1);\n     /// ```\n     #[inline]\n     #[unstable(feature = \"std_misc\", reason = \"hasher stuff is unclear\")]\n@@ -290,21 +290,21 @@ impl<T, S, H> HashSet<T, S>\n     ///\n     /// ```\n     /// use std::collections::HashSet;\n-    /// let a: HashSet<int> = [1i, 2, 3].iter().map(|&x| x).collect();\n-    /// let b: HashSet<int> = [4i, 2, 3, 4].iter().map(|&x| x).collect();\n+    /// let a: HashSet<int> = [1, 2, 3].iter().map(|&x| x).collect();\n+    /// let b: HashSet<int> = [4, 2, 3, 4].iter().map(|&x| x).collect();\n     ///\n     /// // Can be seen as `a - b`.\n     /// for x in a.difference(&b) {\n     ///     println!(\"{}\", x); // Print 1\n     /// }\n     ///\n     /// let diff: HashSet<int> = a.difference(&b).map(|&x| x).collect();\n-    /// assert_eq!(diff, [1i].iter().map(|&x| x).collect());\n+    /// assert_eq!(diff, [1].iter().map(|&x| x).collect());\n     ///\n     /// // Note that difference is not symmetric,\n     /// // and `b - a` means something else:\n     /// let diff: HashSet<int> = b.difference(&a).map(|&x| x).collect();\n-    /// assert_eq!(diff, [4i].iter().map(|&x| x).collect());\n+    /// assert_eq!(diff, [4].iter().map(|&x| x).collect());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn difference<'a>(&'a self, other: &'a HashSet<T, S>) -> Difference<'a, T, S> {\n@@ -320,8 +320,8 @@ impl<T, S, H> HashSet<T, S>\n     ///\n     /// ```\n     /// use std::collections::HashSet;\n-    /// let a: HashSet<int> = [1i, 2, 3].iter().map(|&x| x).collect();\n-    /// let b: HashSet<int> = [4i, 2, 3, 4].iter().map(|&x| x).collect();\n+    /// let a: HashSet<int> = [1, 2, 3].iter().map(|&x| x).collect();\n+    /// let b: HashSet<int> = [4, 2, 3, 4].iter().map(|&x| x).collect();\n     ///\n     /// // Print 1, 4 in arbitrary order.\n     /// for x in a.symmetric_difference(&b) {\n@@ -332,7 +332,7 @@ impl<T, S, H> HashSet<T, S>\n     /// let diff2: HashSet<int> = b.symmetric_difference(&a).map(|&x| x).collect();\n     ///\n     /// assert_eq!(diff1, diff2);\n-    /// assert_eq!(diff1, [1i, 4].iter().map(|&x| x).collect());\n+    /// assert_eq!(diff1, [1, 4].iter().map(|&x| x).collect());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn symmetric_difference<'a>(&'a self, other: &'a HashSet<T, S>)\n@@ -346,16 +346,16 @@ impl<T, S, H> HashSet<T, S>\n     ///\n     /// ```\n     /// use std::collections::HashSet;\n-    /// let a: HashSet<int> = [1i, 2, 3].iter().map(|&x| x).collect();\n-    /// let b: HashSet<int> = [4i, 2, 3, 4].iter().map(|&x| x).collect();\n+    /// let a: HashSet<int> = [1, 2, 3].iter().map(|&x| x).collect();\n+    /// let b: HashSet<int> = [4, 2, 3, 4].iter().map(|&x| x).collect();\n     ///\n     /// // Print 2, 3 in arbitrary order.\n     /// for x in a.intersection(&b) {\n     ///     println!(\"{}\", x);\n     /// }\n     ///\n     /// let diff: HashSet<int> = a.intersection(&b).map(|&x| x).collect();\n-    /// assert_eq!(diff, [2i, 3].iter().map(|&x| x).collect());\n+    /// assert_eq!(diff, [2, 3].iter().map(|&x| x).collect());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn intersection<'a>(&'a self, other: &'a HashSet<T, S>) -> Intersection<'a, T, S> {\n@@ -371,16 +371,16 @@ impl<T, S, H> HashSet<T, S>\n     ///\n     /// ```\n     /// use std::collections::HashSet;\n-    /// let a: HashSet<int> = [1i, 2, 3].iter().map(|&x| x).collect();\n-    /// let b: HashSet<int> = [4i, 2, 3, 4].iter().map(|&x| x).collect();\n+    /// let a: HashSet<int> = [1, 2, 3].iter().map(|&x| x).collect();\n+    /// let b: HashSet<int> = [4, 2, 3, 4].iter().map(|&x| x).collect();\n     ///\n     /// // Print 1, 2, 3, 4 in arbitrary order.\n     /// for x in a.union(&b) {\n     ///     println!(\"{}\", x);\n     /// }\n     ///\n     /// let diff: HashSet<int> = a.union(&b).map(|&x| x).collect();\n-    /// assert_eq!(diff, [1i, 2, 3, 4].iter().map(|&x| x).collect());\n+    /// assert_eq!(diff, [1, 2, 3, 4].iter().map(|&x| x).collect());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn union<'a>(&'a self, other: &'a HashSet<T, S>) -> Union<'a, T, S> {\n@@ -955,8 +955,8 @@ mod test_set {\n         let mut ys = HashSet::new();\n         assert!(xs.is_disjoint(&ys));\n         assert!(ys.is_disjoint(&xs));\n-        assert!(xs.insert(5i));\n-        assert!(ys.insert(11i));\n+        assert!(xs.insert(5));\n+        assert!(ys.insert(11));\n         assert!(xs.is_disjoint(&ys));\n         assert!(ys.is_disjoint(&xs));\n         assert!(xs.insert(7));\n@@ -974,13 +974,13 @@ mod test_set {\n     #[test]\n     fn test_subset_and_superset() {\n         let mut a = HashSet::new();\n-        assert!(a.insert(0i));\n+        assert!(a.insert(0));\n         assert!(a.insert(5));\n         assert!(a.insert(11));\n         assert!(a.insert(7));\n \n         let mut b = HashSet::new();\n-        assert!(b.insert(0i));\n+        assert!(b.insert(0));\n         assert!(b.insert(7));\n         assert!(b.insert(19));\n         assert!(b.insert(250));\n@@ -1018,15 +1018,15 @@ mod test_set {\n         let mut a = HashSet::new();\n         let mut b = HashSet::new();\n \n-        assert!(a.insert(11i));\n+        assert!(a.insert(11));\n         assert!(a.insert(1));\n         assert!(a.insert(3));\n         assert!(a.insert(77));\n         assert!(a.insert(103));\n         assert!(a.insert(5));\n         assert!(a.insert(-5));\n \n-        assert!(b.insert(2i));\n+        assert!(b.insert(2));\n         assert!(b.insert(11));\n         assert!(b.insert(77));\n         assert!(b.insert(-9));\n@@ -1048,13 +1048,13 @@ mod test_set {\n         let mut a = HashSet::new();\n         let mut b = HashSet::new();\n \n-        assert!(a.insert(1i));\n+        assert!(a.insert(1));\n         assert!(a.insert(3));\n         assert!(a.insert(5));\n         assert!(a.insert(9));\n         assert!(a.insert(11));\n \n-        assert!(b.insert(3i));\n+        assert!(b.insert(3));\n         assert!(b.insert(9));\n \n         let mut i = 0;\n@@ -1071,13 +1071,13 @@ mod test_set {\n         let mut a = HashSet::new();\n         let mut b = HashSet::new();\n \n-        assert!(a.insert(1i));\n+        assert!(a.insert(1));\n         assert!(a.insert(3));\n         assert!(a.insert(5));\n         assert!(a.insert(9));\n         assert!(a.insert(11));\n \n-        assert!(b.insert(-2i));\n+        assert!(b.insert(-2));\n         assert!(b.insert(3));\n         assert!(b.insert(9));\n         assert!(b.insert(14));\n@@ -1097,7 +1097,7 @@ mod test_set {\n         let mut a = HashSet::new();\n         let mut b = HashSet::new();\n \n-        assert!(a.insert(1i));\n+        assert!(a.insert(1));\n         assert!(a.insert(3));\n         assert!(a.insert(5));\n         assert!(a.insert(9));\n@@ -1106,7 +1106,7 @@ mod test_set {\n         assert!(a.insert(19));\n         assert!(a.insert(24));\n \n-        assert!(b.insert(-2i));\n+        assert!(b.insert(-2));\n         assert!(b.insert(1));\n         assert!(b.insert(5));\n         assert!(b.insert(9));\n@@ -1124,7 +1124,7 @@ mod test_set {\n \n     #[test]\n     fn test_from_iter() {\n-        let xs = [1i, 2, 3, 4, 5, 6, 7, 8, 9];\n+        let xs = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n \n         let set: HashSet<int> = xs.iter().map(|&x| x).collect();\n \n@@ -1154,13 +1154,13 @@ mod test_set {\n         // I'm keeping them around to prevent a regression.\n         let mut s1 = HashSet::new();\n \n-        s1.insert(1i);\n+        s1.insert(1);\n         s1.insert(2);\n         s1.insert(3);\n \n         let mut s2 = HashSet::new();\n \n-        s2.insert(1i);\n+        s2.insert(1);\n         s2.insert(2);\n \n         assert!(s1 != s2);\n@@ -1175,7 +1175,7 @@ mod test_set {\n         let mut set: HashSet<int> = HashSet::new();\n         let empty: HashSet<int> = HashSet::new();\n \n-        set.insert(1i);\n+        set.insert(1);\n         set.insert(2);\n \n         let set_str = format!(\"{:?}\", set);\n@@ -1201,7 +1201,7 @@ mod test_set {\n         let mut s: HashSet<int> = (1is..100).collect();\n \n         // try this a bunch of times to make sure we don't screw up internal state.\n-        for _ in 0i..20 {\n+        for _ in 0..20 {\n             assert_eq!(s.len(), 99);\n \n             {"}, {"sha": "429923890ef9648c3b270a1bed0d3afb3b09f8d5", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -274,7 +274,7 @@ impl<K, V, M: Deref<Target=RawTable<K, V>>> Bucket<K, V, M> {\n         // ... and it's zero at all other times.\n         let maybe_wraparound_dist = (self.idx ^ (self.idx + 1)) & self.table.capacity();\n         // Finally, we obtain the offset 1 or the offset -cap + 1.\n-        let dist = 1i - (maybe_wraparound_dist as int);\n+        let dist = 1 - (maybe_wraparound_dist as int);\n \n         self.idx += 1;\n "}, {"sha": "1b93dc7119d133f208df82695c4d1dc39596caa0", "filename": "src/libstd/fmt.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibstd%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibstd%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -29,10 +29,10 @@\n //! ```\n //! format!(\"Hello\");                  // => \"Hello\"\n //! format!(\"Hello, {}!\", \"world\");    // => \"Hello, world!\"\n-//! format!(\"The number is {}\", 1i);   // => \"The number is 1\"\n-//! format!(\"{:?}\", (3i, 4i));         // => \"(3i, 4i)\"\n-//! format!(\"{value}\", value=4i);      // => \"4\"\n-//! format!(\"{} {}\", 1i, 2u);          // => \"1 2\"\n+//! format!(\"The number is {}\", 1);   // => \"The number is 1\"\n+//! format!(\"{:?}\", (3, 4));         // => \"(3, 4)\"\n+//! format!(\"{value}\", value=4);      // => \"4\"\n+//! format!(\"{} {}\", 1, 2u);          // => \"1 2\"\n //! ```\n //!\n //! From these, you can see that the first argument is a format string. It is\n@@ -55,7 +55,7 @@\n //! the iterator advances. This leads to behavior like this:\n //!\n //! ```rust\n-//! format!(\"{1} {} {0} {}\", 1i, 2i); // => \"2 1 1 2\"\n+//! format!(\"{1} {} {0} {}\", 1, 2); // => \"2 1 1 2\"\n //! ```\n //!\n //! The internal iterator over the argument has not been advanced by the time\n@@ -83,8 +83,8 @@\n //!\n //! ```\n //! format!(\"{argument}\", argument = \"test\");   // => \"test\"\n-//! format!(\"{name} {}\", 1i, name = 2i);        // => \"2 1\"\n-//! format!(\"{a} {c} {b}\", a=\"a\", b='b', c=3i);  // => \"a 3 b\"\n+//! format!(\"{name} {}\", 1, name = 2);        // => \"2 1\"\n+//! format!(\"{a} {c} {b}\", a=\"a\", b='b', c=3);  // => \"a 3 b\"\n //! ```\n //!\n //! It is illegal to put positional parameters (those without names) after\n@@ -206,7 +206,7 @@\n //!     let myvector = Vector2D { x: 3, y: 4 };\n //!\n //!     println!(\"{}\", myvector);       // => \"(3, 4)\"\n-//!     println!(\"{:?}\", myvector);     // => \"Vector2D {x: 3i, y:4i}\"\n+//!     println!(\"{:?}\", myvector);     // => \"Vector2D {x: 3, y:4}\"\n //!     println!(\"{:10.3b}\", myvector); // => \"     5.000\"\n //! }\n //! ```"}, {"sha": "e91e8241a55beb0f2946eeb178cc952625060d35", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -32,7 +32,7 @@\n /// # #![allow(unreachable_code)]\n /// panic!();\n /// panic!(\"this is a terrible mistake!\");\n-/// panic!(4i); // panic with the value of 4 to be collected elsewhere\n+/// panic!(4); // panic with the value of 4 to be collected elsewhere\n /// panic!(\"this is a {} {message}\", \"fancy\", message = \"message\");\n /// ```\n #[macro_export]\n@@ -68,7 +68,7 @@ macro_rules! panic {\n /// ```\n /// format!(\"test\");\n /// format!(\"hello {}\", \"world!\");\n-/// format!(\"x = {}, y = {y}\", 10i, y = 30i);\n+/// format!(\"x = {}, y = {y}\", 10, y = 30);\n /// ```\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -282,7 +282,7 @@ pub mod builtin {\n     /// # Example\n     ///\n     /// ```\n-    /// let s = concat!(\"test\", 10i, 'b', true);\n+    /// let s = concat!(\"test\", 10, 'b', true);\n     /// assert_eq!(s, \"test10btrue\");\n     /// ```\n     #[macro_export]"}, {"sha": "a996ad1f5b35d30fbc2ef605363b9b51bf29e9c6", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -356,11 +356,11 @@ pub fn test_num<T>(ten: T, two: T) where\n      + Rem<Output=T> + Debug\n      + Copy\n {\n-    assert_eq!(ten.add(two),  cast(12i).unwrap());\n-    assert_eq!(ten.sub(two),  cast(8i).unwrap());\n-    assert_eq!(ten.mul(two),  cast(20i).unwrap());\n-    assert_eq!(ten.div(two),  cast(5i).unwrap());\n-    assert_eq!(ten.rem(two),  cast(0i).unwrap());\n+    assert_eq!(ten.add(two),  cast(12).unwrap());\n+    assert_eq!(ten.sub(two),  cast(8).unwrap());\n+    assert_eq!(ten.mul(two),  cast(20).unwrap());\n+    assert_eq!(ten.div(two),  cast(5).unwrap());\n+    assert_eq!(ten.rem(two),  cast(0).unwrap());\n \n     assert_eq!(ten.add(two),  ten + two);\n     assert_eq!(ten.sub(two),  ten - two);\n@@ -393,7 +393,7 @@ mod tests {\n             assert_eq!(20u16, _20.to_u16().unwrap());\n             assert_eq!(20u32, _20.to_u32().unwrap());\n             assert_eq!(20u64, _20.to_u64().unwrap());\n-            assert_eq!(20i,   _20.to_int().unwrap());\n+            assert_eq!(20,   _20.to_int().unwrap());\n             assert_eq!(20i8,  _20.to_i8().unwrap());\n             assert_eq!(20i16, _20.to_i16().unwrap());\n             assert_eq!(20i32, _20.to_i32().unwrap());\n@@ -406,7 +406,7 @@ mod tests {\n             assert_eq!(_20, NumCast::from(20u16).unwrap());\n             assert_eq!(_20, NumCast::from(20u32).unwrap());\n             assert_eq!(_20, NumCast::from(20u64).unwrap());\n-            assert_eq!(_20, NumCast::from(20i).unwrap());\n+            assert_eq!(_20, NumCast::from(20).unwrap());\n             assert_eq!(_20, NumCast::from(20i8).unwrap());\n             assert_eq!(_20, NumCast::from(20i16).unwrap());\n             assert_eq!(_20, NumCast::from(20i32).unwrap());\n@@ -419,7 +419,7 @@ mod tests {\n             assert_eq!(_20, cast(20u16).unwrap());\n             assert_eq!(_20, cast(20u32).unwrap());\n             assert_eq!(_20, cast(20u64).unwrap());\n-            assert_eq!(_20, cast(20i).unwrap());\n+            assert_eq!(_20, cast(20).unwrap());\n             assert_eq!(_20, cast(20i8).unwrap());\n             assert_eq!(_20, cast(20i16).unwrap());\n             assert_eq!(_20, cast(20i32).unwrap());\n@@ -438,7 +438,7 @@ mod tests {\n     #[test] fn test_i16_cast()   { test_cast_20!(20i16) }\n     #[test] fn test_i32_cast()   { test_cast_20!(20i32) }\n     #[test] fn test_i64_cast()   { test_cast_20!(20i64) }\n-    #[test] fn test_int_cast()   { test_cast_20!(20i)   }\n+    #[test] fn test_int_cast()   { test_cast_20!(20)   }\n     #[test] fn test_f32_cast()   { test_cast_20!(20f32) }\n     #[test] fn test_f64_cast()   { test_cast_20!(20f64) }\n \n@@ -831,23 +831,23 @@ mod tests {\n     #[test]\n     fn test_saturating_add_int() {\n         use int::{MIN,MAX};\n-        assert_eq!(3i.saturating_add(5i), 8i);\n-        assert_eq!(3i.saturating_add(MAX-1), MAX);\n+        assert_eq!(3.saturating_add(5), 8);\n+        assert_eq!(3.saturating_add(MAX-1), MAX);\n         assert_eq!(MAX.saturating_add(MAX), MAX);\n         assert_eq!((MAX-2).saturating_add(1), MAX-1);\n-        assert_eq!(3i.saturating_add(-5i), -2i);\n-        assert_eq!(MIN.saturating_add(-1i), MIN);\n-        assert_eq!((-2i).saturating_add(-MAX), MIN);\n+        assert_eq!(3.saturating_add(-5), -2);\n+        assert_eq!(MIN.saturating_add(-1), MIN);\n+        assert_eq!((-2).saturating_add(-MAX), MIN);\n     }\n \n     #[test]\n     fn test_saturating_sub_int() {\n         use int::{MIN,MAX};\n-        assert_eq!(3i.saturating_sub(5i), -2i);\n-        assert_eq!(MIN.saturating_sub(1i), MIN);\n-        assert_eq!((-2i).saturating_sub(MAX), MIN);\n-        assert_eq!(3i.saturating_sub(-5i), 8i);\n-        assert_eq!(3i.saturating_sub(-(MAX-1)), MAX);\n+        assert_eq!(3.saturating_sub(5), -2);\n+        assert_eq!(MIN.saturating_sub(1), MIN);\n+        assert_eq!((-2).saturating_sub(MAX), MIN);\n+        assert_eq!(3.saturating_sub(-5), 8);\n+        assert_eq!(3.saturating_sub(-(MAX-1)), MAX);\n         assert_eq!(MAX.saturating_sub(-MAX), MAX);\n         assert_eq!((MAX-2).saturating_sub(-1), MAX-1);\n     }\n@@ -1010,10 +1010,10 @@ mod tests {\n                 assert_eq!(result, naive_pow($num, $exp));\n             }}\n         }\n-        assert_pow!((3i,     0 ) => 1);\n-        assert_pow!((5i,     1 ) => 5);\n-        assert_pow!((-4i,    2 ) => 16);\n-        assert_pow!((8i,     3 ) => 512);\n+        assert_pow!((3,     0 ) => 1);\n+        assert_pow!((5,     1 ) => 5);\n+        assert_pow!((-4,    2 ) => 16);\n+        assert_pow!((8,     3 ) => 512);\n         assert_pow!((2u64,   50) => 1125899906842624);\n     }\n }"}, {"sha": "d048cde26132cdc6ceb8a851dce85ba26e14481c", "filename": "src/libstd/old_io/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibstd%2Fold_io%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibstd%2Fold_io%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Ffs.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -981,7 +981,7 @@ mod test {\n         let initial_msg =   \"food-is-yummy\";\n         let overwrite_msg =    \"-the-bar!!\";\n         let final_msg =     \"foo-the-bar!!\";\n-        let seek_idx = 3i;\n+        let seek_idx = 3;\n         let mut read_mem = [0; 13];\n         let tmpdir = tmpdir();\n         let filename = &tmpdir.join(\"file_rt_io_file_test_seek_and_write.txt\");\n@@ -1101,7 +1101,7 @@ mod test {\n         let dir = &tmpdir.join(\"di_readdir\");\n         check!(mkdir(dir, old_io::USER_RWX));\n         let prefix = \"foo\";\n-        for n in 0i..3 {\n+        for n in 0..3 {\n             let f = dir.join(format!(\"{}.txt\", n));\n             let mut w = check!(File::create(&f));\n             let msg_str = format!(\"{}{}\", prefix, n.to_string());"}, {"sha": "0f513dd89955ad2227e6c6afb46710b3e78c4be9", "filename": "src/libstd/old_io/net/tcp.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibstd%2Fold_io%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibstd%2Fold_io%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fnet%2Ftcp.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -1160,7 +1160,7 @@ mod test {\n                 tx.send(TcpStream::connect(addr).unwrap()).unwrap();\n             });\n             let _l = rx.recv().unwrap();\n-            for i in 0i..1001 {\n+            for i in 0..1001 {\n                 match a.accept() {\n                     Ok(..) => break,\n                     Err(ref e) if e.kind == TimedOut => {}\n@@ -1260,7 +1260,7 @@ mod test {\n         assert_eq!(s.read(&mut [0]).err().unwrap().kind, TimedOut);\n \n         s.set_timeout(Some(20));\n-        for i in 0i..1001 {\n+        for i in 0..1001 {\n             match s.write(&[0; 128 * 1024]) {\n                 Ok(()) | Err(IoError { kind: ShortWrite(..), .. }) => {},\n                 Err(IoError { kind: TimedOut, .. }) => break,\n@@ -1299,7 +1299,7 @@ mod test {\n         assert_eq!(s.read(&mut [0]).err().unwrap().kind, TimedOut);\n \n         tx.send(()).unwrap();\n-        for _ in 0i..100 {\n+        for _ in 0..100 {\n             assert!(s.write(&[0;128 * 1024]).is_ok());\n         }\n     }\n@@ -1318,7 +1318,7 @@ mod test {\n \n         let mut s = a.accept().unwrap();\n         s.set_write_timeout(Some(20));\n-        for i in 0i..1001 {\n+        for i in 0..1001 {\n             match s.write(&[0; 128 * 1024]) {\n                 Ok(()) | Err(IoError { kind: ShortWrite(..), .. }) => {},\n                 Err(IoError { kind: TimedOut, .. }) => break,\n@@ -1388,7 +1388,7 @@ mod test {\n         });\n \n         // Try to ensure that the reading clone is indeed reading\n-        for _ in 0i..50 {\n+        for _ in 0..50 {\n             ::thread::Thread::yield_now();\n         }\n "}, {"sha": "f3bf482ae25ed9d7fe671ee46c003cd897a9d3e3", "filename": "src/libstd/old_io/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibstd%2Fold_io%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibstd%2Fold_io%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fprocess.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -1142,7 +1142,7 @@ mod tests {\n     fn test_zero() {\n         let mut p = sleeper();\n         p.signal_kill().unwrap();\n-        for _ in 0i..20 {\n+        for _ in 0..20 {\n             if p.signal(0).is_err() {\n                 assert!(!p.wait().unwrap().success());\n                 return"}, {"sha": "600ca60349ae26ede5bee71d797a58d97b401f0d", "filename": "src/libstd/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -1484,7 +1484,7 @@ mod tests {\n     #[ignore]\n     fn test_getenv_big() {\n         let mut s = \"\".to_string();\n-        let mut i = 0i;\n+        let mut i = 0;\n         while i < 100 {\n             s.push_str(\"aaaaaaaaaa\");\n             i += 1;"}, {"sha": "211abc2fc83e70f3cf2aae31c24b423b8cdc0462", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -427,7 +427,7 @@ pub fn random<T: Rand>() -> T {\n /// use std::rand::{thread_rng, sample};\n ///\n /// let mut rng = thread_rng();\n-/// let sample = sample(&mut rng, 1i..100, 5);\n+/// let sample = sample(&mut rng, 1..100, 5);\n /// println!(\"{:?}\", sample);\n /// ```\n pub fn sample<T, I: Iterator<Item=T>, R: Rng>(rng: &mut R,\n@@ -481,16 +481,16 @@ mod test {\n     fn test_gen_range() {\n         let mut r = thread_rng();\n         for _ in 0u..1000 {\n-            let a = r.gen_range(-3i, 42);\n+            let a = r.gen_range(-3, 42);\n             assert!(a >= -3 && a < 42);\n-            assert_eq!(r.gen_range(0i, 1), 0);\n-            assert_eq!(r.gen_range(-12i, -11), -12);\n+            assert_eq!(r.gen_range(0, 1), 0);\n+            assert_eq!(r.gen_range(-12, -11), -12);\n         }\n \n         for _ in 0u..1000 {\n-            let a = r.gen_range(10i, 42);\n+            let a = r.gen_range(10, 42);\n             assert!(a >= 10 && a < 42);\n-            assert_eq!(r.gen_range(0i, 1), 0);\n+            assert_eq!(r.gen_range(0, 1), 0);\n             assert_eq!(r.gen_range(3_000_000, 3_000_001), 3_000_000);\n         }\n \n@@ -500,7 +500,7 @@ mod test {\n     #[should_fail]\n     fn test_gen_range_panic_int() {\n         let mut r = thread_rng();\n-        r.gen_range(5i, -2);\n+        r.gen_range(5, -2);\n     }\n \n     #[test]\n@@ -544,7 +544,7 @@ mod test {\n     #[test]\n     fn test_choose() {\n         let mut r = thread_rng();\n-        assert_eq!(r.choose(&[1i, 1, 1]).map(|&x|x), Some(1));\n+        assert_eq!(r.choose(&[1, 1, 1]).map(|&x|x), Some(1));\n \n         let v: &[int] = &[];\n         assert_eq!(r.choose(v), None);\n@@ -555,16 +555,16 @@ mod test {\n         let mut r = thread_rng();\n         let empty: &mut [int] = &mut [];\n         r.shuffle(empty);\n-        let mut one = [1i];\n+        let mut one = [1];\n         r.shuffle(&mut one);\n         let b: &[_] = &[1];\n         assert_eq!(one, b);\n \n-        let mut two = [1i, 2];\n+        let mut two = [1, 2];\n         r.shuffle(&mut two);\n         assert!(two == [1, 2] || two == [2, 1]);\n \n-        let mut x = [1i, 1, 1];\n+        let mut x = [1, 1, 1];\n         r.shuffle(&mut x);\n         let b: &[_] = &[1, 1, 1];\n         assert_eq!(x, b);\n@@ -574,7 +574,7 @@ mod test {\n     fn test_thread_rng() {\n         let mut r = thread_rng();\n         r.gen::<int>();\n-        let mut v = [1i, 1, 1];\n+        let mut v = [1, 1, 1];\n         r.shuffle(&mut v);\n         let b: &[_] = &[1, 1, 1];\n         assert_eq!(v, b);\n@@ -597,8 +597,8 @@ mod test {\n \n     #[test]\n     fn test_sample() {\n-        let min_val = 1i;\n-        let max_val = 100i;\n+        let min_val = 1;\n+        let max_val = 100;\n \n         let mut r = thread_rng();\n         let vals = (min_val..max_val).collect::<Vec<int>>();"}, {"sha": "8340652d19ae6d8f06e225c66537b5bf90e1bf55", "filename": "src/libstd/sync/future.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibstd%2Fsync%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibstd%2Fsync%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Ffuture.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -193,7 +193,7 @@ mod test {\n \n     #[test]\n     fn test_get_ref_method() {\n-        let mut f = Future::from_value(22i);\n+        let mut f = Future::from_value(22);\n         assert_eq!(*f.get_ref(), 22);\n     }\n "}, {"sha": "b77631935b9236b784f82f8b3e8c729310d178ab", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -59,9 +59,9 @@\n //! // Create a simple streaming channel\n //! let (tx, rx) = channel();\n //! Thread::spawn(move|| {\n-//!     tx.send(10i).unwrap();\n+//!     tx.send(10).unwrap();\n //! });\n-//! assert_eq!(rx.recv().unwrap(), 10i);\n+//! assert_eq!(rx.recv().unwrap(), 10);\n //! ```\n //!\n //! Shared usage:\n@@ -74,14 +74,14 @@\n //! // where tx is the sending half (tx for transmission), and rx is the receiving\n //! // half (rx for receiving).\n //! let (tx, rx) = channel();\n-//! for i in 0i..10i {\n+//! for i in 0..10 {\n //!     let tx = tx.clone();\n //!     Thread::spawn(move|| {\n //!         tx.send(i).unwrap();\n //!     });\n //! }\n //!\n-//! for _ in 0i..10i {\n+//! for _ in 0..10 {\n //!     let j = rx.recv().unwrap();\n //!     assert!(0 <= j && j < 10);\n //! }\n@@ -514,15 +514,15 @@ pub fn channel<T: Send>() -> (Sender<T>, Receiver<T>) {\n /// let (tx, rx) = sync_channel(1);\n ///\n /// // this returns immediately\n-/// tx.send(1i).unwrap();\n+/// tx.send(1).unwrap();\n ///\n /// Thread::spawn(move|| {\n ///     // this will block until the previous message has been received\n-///     tx.send(2i).unwrap();\n+///     tx.send(2).unwrap();\n /// });\n ///\n-/// assert_eq!(rx.recv().unwrap(), 1i);\n-/// assert_eq!(rx.recv().unwrap(), 2i);\n+/// assert_eq!(rx.recv().unwrap(), 1);\n+/// assert_eq!(rx.recv().unwrap(), 2);\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn sync_channel<T: Send>(bound: uint) -> (SyncSender<T>, Receiver<T>) {\n@@ -562,11 +562,11 @@ impl<T: Send> Sender<T> {\n     /// let (tx, rx) = channel();\n     ///\n     /// // This send is always successful\n-    /// tx.send(1i).unwrap();\n+    /// tx.send(1).unwrap();\n     ///\n     /// // This send will fail because the receiver is gone\n     /// drop(rx);\n-    /// assert_eq!(tx.send(1i).err().unwrap().0, 1);\n+    /// assert_eq!(tx.send(1).err().unwrap().0, 1);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn send(&self, t: T) -> Result<(), SendError<T>> {\n@@ -1045,15 +1045,15 @@ mod test {\n     #[test]\n     fn drop_full() {\n         let (tx, _rx) = channel();\n-        tx.send(box 1i).unwrap();\n+        tx.send(box 1).unwrap();\n     }\n \n     #[test]\n     fn drop_full_shared() {\n         let (tx, _rx) = channel();\n         drop(tx.clone());\n         drop(tx.clone());\n-        tx.send(box 1i).unwrap();\n+        tx.send(box 1).unwrap();\n     }\n \n     #[test]\n@@ -1147,7 +1147,7 @@ mod test {\n     fn stress() {\n         let (tx, rx) = channel::<int>();\n         let t = Thread::scoped(move|| {\n-            for _ in 0u..10000 { tx.send(1i).unwrap(); }\n+            for _ in 0u..10000 { tx.send(1).unwrap(); }\n         });\n         for _ in 0u..10000 {\n             assert_eq!(rx.recv().unwrap(), 1);\n@@ -1187,13 +1187,13 @@ mod test {\n         let (tx2, rx2) = channel::<int>();\n         let t1 = Thread::scoped(move|| {\n             tx1.send(()).unwrap();\n-            for _ in 0i..40 {\n+            for _ in 0..40 {\n                 assert_eq!(rx2.recv().unwrap(), 1);\n             }\n         });\n         rx1.recv().unwrap();\n         let t2 = Thread::scoped(move|| {\n-            for _ in 0i..40 {\n+            for _ in 0..40 {\n                 tx2.send(1).unwrap();\n             }\n         });\n@@ -1205,7 +1205,7 @@ mod test {\n     fn recv_from_outside_runtime() {\n         let (tx, rx) = channel::<int>();\n         let t = Thread::scoped(move|| {\n-            for _ in 0i..40 {\n+            for _ in 0..40 {\n                 assert_eq!(rx.recv().unwrap(), 1);\n             }\n         });\n@@ -1391,9 +1391,9 @@ mod test {\n         for _ in 0..stress_factor() {\n             let (tx, rx) = channel();\n             let _t = Thread::spawn(move|| {\n-                tx.send(box 10i).unwrap();\n+                tx.send(box 10).unwrap();\n             });\n-            assert!(rx.recv().unwrap() == box 10i);\n+            assert!(rx.recv().unwrap() == box 10);\n         }\n     }\n \n@@ -1429,8 +1429,8 @@ mod test {\n     fn recv_a_lot() {\n         // Regression test that we don't run out of stack in scheduler context\n         let (tx, rx) = channel();\n-        for _ in 0i..10000 { tx.send(()).unwrap(); }\n-        for _ in 0i..10000 { rx.recv().unwrap(); }\n+        for _ in 0..10000 { tx.send(()).unwrap(); }\n+        for _ in 0..10000 { rx.recv().unwrap(); }\n     }\n \n     #[test]\n@@ -1567,7 +1567,7 @@ mod sync_tests {\n     #[test]\n     fn drop_full() {\n         let (tx, _rx) = sync_channel(1);\n-        tx.send(box 1i).unwrap();\n+        tx.send(box 1).unwrap();\n     }\n \n     #[test]\n@@ -1855,9 +1855,9 @@ mod sync_tests {\n         for _ in 0..stress_factor() {\n             let (tx, rx) = sync_channel::<Box<int>>(0);\n             let _t = Thread::spawn(move|| {\n-                tx.send(box 10i).unwrap();\n+                tx.send(box 10).unwrap();\n             });\n-            assert!(rx.recv().unwrap() == box 10i);\n+            assert!(rx.recv().unwrap() == box 10);\n         }\n     }\n "}, {"sha": "3980d2a1fefb521820fbe1b45863f6d45d584633", "filename": "src/libstd/sync/mpsc/mpsc_queue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -165,8 +165,8 @@ mod tests {\n     #[test]\n     fn test_full() {\n         let q = Queue::new();\n-        q.push(box 1i);\n-        q.push(box 2i);\n+        q.push(box 1);\n+        q.push(box 2);\n     }\n \n     #[test]"}, {"sha": "85c7572404b9509117bed8e3c9695d280bd44099", "filename": "src/libstd/sync/mpsc/select.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -32,15 +32,15 @@\n //! let (tx1, rx1) = channel();\n //! let (tx2, rx2) = channel();\n //!\n-//! tx1.send(1i).unwrap();\n-//! tx2.send(2i).unwrap();\n+//! tx1.send(1).unwrap();\n+//! tx2.send(2).unwrap();\n //!\n //! select! {\n //!     val = rx1.recv() => {\n-//!         assert_eq!(val.unwrap(), 1i);\n+//!         assert_eq!(val.unwrap(), 1);\n //!     },\n //!     val = rx2.recv() => {\n-//!         assert_eq!(val.unwrap(), 2i);\n+//!         assert_eq!(val.unwrap(), 2);\n //!     }\n //! }\n //! ```"}, {"sha": "c80aa56717315d9f5cdb76b0d706ab6983989a72", "filename": "src/libstd/sync/mpsc/spsc_queue.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -253,9 +253,9 @@ mod test {\n     fn smoke() {\n         unsafe {\n             let queue = Queue::new(0);\n-            queue.push(1i);\n+            queue.push(1);\n             queue.push(2);\n-            assert_eq!(queue.pop(), Some(1i));\n+            assert_eq!(queue.pop(), Some(1));\n             assert_eq!(queue.pop(), Some(2));\n             assert_eq!(queue.pop(), None);\n             queue.push(3);\n@@ -270,7 +270,7 @@ mod test {\n     fn peek() {\n         unsafe {\n             let queue = Queue::new(0);\n-            queue.push(vec![1i]);\n+            queue.push(vec![1]);\n \n             // Ensure the borrowchecker works\n             match queue.peek() {\n@@ -290,16 +290,16 @@ mod test {\n     fn drop_full() {\n         unsafe {\n             let q = Queue::new(0);\n-            q.push(box 1i);\n-            q.push(box 2i);\n+            q.push(box 1);\n+            q.push(box 2);\n         }\n     }\n \n     #[test]\n     fn smoke_bound() {\n         unsafe {\n             let q = Queue::new(0);\n-            q.push(1i);\n+            q.push(1);\n             q.push(2);\n             assert_eq!(q.pop(), Some(1));\n             assert_eq!(q.pop(), Some(2));\n@@ -328,15 +328,15 @@ mod test {\n                 for _ in 0u..100000 {\n                     loop {\n                         match q2.pop() {\n-                            Some(1i) => break,\n+                            Some(1) => break,\n                             Some(_) => panic!(),\n                             None => {}\n                         }\n                     }\n                 }\n                 tx.send(()).unwrap();\n             });\n-            for _ in 0i..100000 {\n+            for _ in 0..100000 {\n                 q.push(1);\n             }\n             rx.recv().unwrap();"}, {"sha": "7531d5b058d79686c1e425435fd82cbbb32b569d", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -428,7 +428,7 @@ mod test {\n \n     #[test]\n     fn test_arc_condvar_poison() {\n-        let packet = Packet(Arc::new((Mutex::new(1i), Condvar::new())));\n+        let packet = Packet(Arc::new((Mutex::new(1), Condvar::new())));\n         let packet2 = Packet(packet.0.clone());\n         let (tx, rx) = channel();\n \n@@ -457,7 +457,7 @@ mod test {\n \n     #[test]\n     fn test_mutex_arc_poison() {\n-        let arc = Arc::new(Mutex::new(1i));\n+        let arc = Arc::new(Mutex::new(1));\n         let arc2 = arc.clone();\n         let _ = Thread::scoped(move|| {\n             let lock = arc2.lock().unwrap();\n@@ -470,7 +470,7 @@ mod test {\n     fn test_mutex_arc_nested() {\n         // Tests nested mutexes and access\n         // to underlying data.\n-        let arc = Arc::new(Mutex::new(1i));\n+        let arc = Arc::new(Mutex::new(1));\n         let arc2 = Arc::new(Mutex::new(arc));\n         let (tx, rx) = channel();\n         let _t = Thread::spawn(move|| {\n@@ -484,7 +484,7 @@ mod test {\n \n     #[test]\n     fn test_mutex_arc_access_in_unwind() {\n-        let arc = Arc::new(Mutex::new(1i));\n+        let arc = Arc::new(Mutex::new(1));\n         let arc2 = arc.clone();\n         let _ = Thread::scoped(move|| -> () {\n             struct Unwinder {"}, {"sha": "2df211f37687fa4f61129957de178cef0f15f09e", "filename": "src/libstd/sync/once.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibstd%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibstd%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fonce.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -134,7 +134,7 @@ mod test {\n     #[test]\n     fn smoke_once() {\n         static O: Once = ONCE_INIT;\n-        let mut a = 0i;\n+        let mut a = 0;\n         O.call_once(|| a += 1);\n         assert_eq!(a, 1);\n         O.call_once(|| a += 1);"}, {"sha": "95b570dd9c82a858bd7e5e46a3b2c5fd675c9548", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -41,7 +41,7 @@ use sys_common::rwlock as sys;\n /// ```\n /// use std::sync::RwLock;\n ///\n-/// let lock = RwLock::new(5i);\n+/// let lock = RwLock::new(5);\n ///\n /// // many reader locks can be held at once\n /// {\n@@ -437,7 +437,7 @@ mod tests {\n \n     #[test]\n     fn test_rw_arc_poison_wr() {\n-        let arc = Arc::new(RwLock::new(1i));\n+        let arc = Arc::new(RwLock::new(1));\n         let arc2 = arc.clone();\n         let _: Result<uint, _> = Thread::scoped(move|| {\n             let _lock = arc2.write().unwrap();\n@@ -448,7 +448,7 @@ mod tests {\n \n     #[test]\n     fn test_rw_arc_poison_ww() {\n-        let arc = Arc::new(RwLock::new(1i));\n+        let arc = Arc::new(RwLock::new(1));\n         let arc2 = arc.clone();\n         let _: Result<uint, _> = Thread::scoped(move|| {\n             let _lock = arc2.write().unwrap();\n@@ -459,7 +459,7 @@ mod tests {\n \n     #[test]\n     fn test_rw_arc_no_poison_rr() {\n-        let arc = Arc::new(RwLock::new(1i));\n+        let arc = Arc::new(RwLock::new(1));\n         let arc2 = arc.clone();\n         let _: Result<uint, _> = Thread::scoped(move|| {\n             let _lock = arc2.read().unwrap();\n@@ -470,7 +470,7 @@ mod tests {\n     }\n     #[test]\n     fn test_rw_arc_no_poison_rw() {\n-        let arc = Arc::new(RwLock::new(1i));\n+        let arc = Arc::new(RwLock::new(1));\n         let arc2 = arc.clone();\n         let _: Result<uint, _> = Thread::scoped(move|| {\n             let _lock = arc2.read().unwrap();\n@@ -482,7 +482,7 @@ mod tests {\n \n     #[test]\n     fn test_rw_arc() {\n-        let arc = Arc::new(RwLock::new(0i));\n+        let arc = Arc::new(RwLock::new(0));\n         let arc2 = arc.clone();\n         let (tx, rx) = channel();\n \n@@ -520,7 +520,7 @@ mod tests {\n \n     #[test]\n     fn test_rw_arc_access_in_unwind() {\n-        let arc = Arc::new(RwLock::new(1i));\n+        let arc = Arc::new(RwLock::new(1));\n         let arc2 = arc.clone();\n         let _ = Thread::scoped(move|| -> () {\n             struct Unwinder {"}, {"sha": "b004a47f8a349481b05fb65296c8345234f36223", "filename": "src/libstd/sys/unix/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -509,7 +509,7 @@ impl Process {\n         // which will wake up the other end at some point, so we just allow this\n         // signal to be coalesced with the pending signals on the pipe.\n         extern fn sigchld_handler(_signum: libc::c_int) {\n-            let msg = 1i;\n+            let msg = 1;\n             match unsafe {\n                 libc::write(WRITE_FD, &msg as *const _ as *const libc::c_void, 1)\n             } {"}, {"sha": "a526f3393f2d35e30cdd403d5bdc9cb85878b63f", "filename": "src/libstd/sys/unix/stack_overflow.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -162,7 +162,7 @@ mod imp {\n \n         pub static SIGSTKSZ: libc::size_t = 8192;\n \n-        pub const SIG_DFL: sighandler_t = 0i as sighandler_t;\n+        pub const SIG_DFL: sighandler_t = 0 as sighandler_t;\n \n         // This definition is not as accurate as it could be, {si_addr} is\n         // actually a giant union. Currently we're only interested in that field,\n@@ -214,7 +214,7 @@ mod imp {\n \n         pub const SIGSTKSZ: libc::size_t = 131072;\n \n-        pub const SIG_DFL: sighandler_t = 0i as sighandler_t;\n+        pub const SIG_DFL: sighandler_t = 0 as sighandler_t;\n \n         pub type sigset_t = u32;\n \n@@ -271,7 +271,7 @@ mod imp {\n     }\n \n     pub unsafe fn make_handler() -> super::Handler {\n-        super::Handler { _data: 0i as *mut libc::c_void }\n+        super::Handler { _data: 0 as *mut libc::c_void }\n     }\n \n     pub unsafe fn drop_handler(_handler: &mut super::Handler) {"}, {"sha": "1be1a412ffa9ff9c7dead7f4bf5537a4f4e1010c", "filename": "src/libstd/sys/windows/backtrace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -333,7 +333,7 @@ pub fn write(w: &mut Writer) -> IoResult<()> {\n     let _c = Cleanup { handle: process, SymCleanup: SymCleanup };\n \n     // And now that we're done with all the setup, do the stack walking!\n-    let mut i = 0i;\n+    let mut i = 0;\n     try!(write!(w, \"stack backtrace:\\n\"));\n     while StackWalk64(image, process, thread, &mut frame, &mut context,\n                       ptr::null_mut(),"}, {"sha": "0cb4c573ae3ef63d47c48d04bac02d545eb638cf", "filename": "src/libstd/sys/windows/stack_overflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibstd%2Fsys%2Fwindows%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibstd%2Fsys%2Fwindows%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fstack_overflow.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -81,7 +81,7 @@ pub unsafe fn make_handler() -> Handler {\n         panic!(\"failed to reserve stack space for exception handling\");\n     }\n \n-    Handler { _data: 0i as *mut libc::c_void }\n+    Handler { _data: 0 as *mut libc::c_void }\n }\n \n pub struct EXCEPTION_RECORD {"}, {"sha": "0f8ceed39a6ccbfbcbcf98790fa0c618896795df", "filename": "src/libstd/sys/windows/thread_local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -235,7 +235,7 @@ unsafe extern \"system\" fn on_tls_callback(h: LPVOID,\n \n unsafe fn run_dtors() {\n     let mut any_run = true;\n-    for _ in 0..5i {\n+    for _ in 0..5 {\n         if !any_run { break }\n         any_run = false;\n         let dtors = {"}, {"sha": "988b13cd160462b42fa62200dcc8fac8663d7005", "filename": "src/libstd/tuple.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibstd%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Flibstd%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftuple.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -35,18 +35,18 @@\n //! let x = (\"colorless\",  \"green\", \"ideas\", \"sleep\", \"furiously\");\n //! assert_eq!(x.3, \"sleep\");\n //!\n-//! let v = (3i, 3i);\n-//! let u = (1i, -5i);\n-//! assert_eq!(v.0 * u.0 + v.1 * u.1, -12i);\n+//! let v = (3, 3);\n+//! let u = (1, -5);\n+//! assert_eq!(v.0 * u.0 + v.1 * u.1, -12);\n //! ```\n //!\n //! Using traits implemented for tuples:\n //!\n //! ```\n //! use std::default::Default;\n //!\n-//! let a = (1i, 2i);\n-//! let b = (3i, 4i);\n+//! let a = (1, 2);\n+//! let b = (3, 4);\n //! assert!(a != b);\n //!\n //! let c = b.clone();"}, {"sha": "560844332a128d4718362b8a7debb61deb7436a0", "filename": "src/test/auxiliary/issue-11224.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fauxiliary%2Fissue-11224.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fauxiliary%2Fissue-11224.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-11224.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -21,6 +21,6 @@ mod inner {\n }\n \n pub fn foo() {\n-    let a = &1i as &inner::Trait;\n+    let a = &1 as &inner::Trait;\n     a.f();\n }"}, {"sha": "7bfd2e79641d038ccc86f2f9ec81aa32bd6832b5", "filename": "src/test/auxiliary/issue-8044.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fauxiliary%2Fissue-8044.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fauxiliary%2Fissue-8044.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-8044.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -21,5 +21,5 @@ pub fn leaf<V>(value: V) -> TreeItem<V> {\n }\n \n fn main() {\n-    BTree::<int> { node: leaf(1i) };\n+    BTree::<int> { node: leaf(1) };\n }"}, {"sha": "1e746bf39db6196074bca1ea181bde9d73e9ab3c", "filename": "src/test/auxiliary/issue-9906.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fauxiliary%2Fissue-9906.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fauxiliary%2Fissue-9906.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-9906.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -22,6 +22,6 @@ mod other {\n     }\n \n     pub fn foo(){\n-        1i+1;\n+        1+1;\n     }\n }"}, {"sha": "d545a42ae1927ec7c30fa5a312a3c7bd4baca0b8", "filename": "src/test/auxiliary/macro_crate_test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -25,9 +25,9 @@ use syntax::ptr::P;\n use rustc::plugin::Registry;\n \n #[macro_export]\n-macro_rules! exported_macro { () => (2i) }\n+macro_rules! exported_macro { () => (2) }\n \n-macro_rules! unexported_macro { () => (3i) }\n+macro_rules! unexported_macro { () => (3) }\n \n #[plugin_registrar]\n pub fn plugin_registrar(reg: &mut Registry) {\n@@ -47,7 +47,7 @@ fn expand_make_a_1(cx: &mut ExtCtxt, sp: Span, tts: &[TokenTree])\n     if !tts.is_empty() {\n         cx.span_fatal(sp, \"make_a_1 takes no arguments\");\n     }\n-    MacExpr::new(quote_expr!(cx, 1i))\n+    MacExpr::new(quote_expr!(cx, 1))\n }\n \n // See Issue #15750"}, {"sha": "388868eee708efd86c6bbbbf2c6a8238244d7d83", "filename": "src/test/bench/core-std.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fbench%2Fcore-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fbench%2Fcore-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-std.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -62,7 +62,7 @@ fn maybe_run_test<F>(argv: &[String], name: String, test: F) where F: FnOnce() {\n }\n \n fn shift_push() {\n-    let mut v1 = repeat(1i).take(30000).collect::<Vec<_>>();\n+    let mut v1 = repeat(1).take(30000).collect::<Vec<_>>();\n     let mut v2 = Vec::new();\n \n     while v1.len() > 0 {"}, {"sha": "11c471c40c511c2759cd50c7a157e57c18252b90", "filename": "src/test/bench/shootout-meteor.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-meteor.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -150,16 +150,16 @@ fn mask(dy: int, dx: int, id: uint, p: &Vec<(int, int)>) -> Option<u64> {\n // (i/5, i%5).\n fn make_masks() -> Vec<Vec<Vec<u64> > > {\n     let pieces = vec!(\n-        vec!((0i,0i),(0,1),(0,2),(0,3),(1,3)),\n-        vec!((0i,0i),(0,2),(0,3),(1,0),(1,1)),\n-        vec!((0i,0i),(0,1),(0,2),(1,2),(2,1)),\n-        vec!((0i,0i),(0,1),(0,2),(1,1),(2,1)),\n-        vec!((0i,0i),(0,2),(1,0),(1,1),(2,1)),\n-        vec!((0i,0i),(0,1),(0,2),(1,1),(1,2)),\n-        vec!((0i,0i),(0,1),(1,1),(1,2),(2,1)),\n-        vec!((0i,0i),(0,1),(0,2),(1,0),(1,2)),\n-        vec!((0i,0i),(0,1),(0,2),(1,2),(1,3)),\n-        vec!((0i,0i),(0,1),(0,2),(0,3),(1,2)));\n+        vec!((0,0),(0,1),(0,2),(0,3),(1,3)),\n+        vec!((0,0),(0,2),(0,3),(1,0),(1,1)),\n+        vec!((0,0),(0,1),(0,2),(1,2),(2,1)),\n+        vec!((0,0),(0,1),(0,2),(1,1),(2,1)),\n+        vec!((0,0),(0,2),(1,0),(1,1),(2,1)),\n+        vec!((0,0),(0,1),(0,2),(1,1),(1,2)),\n+        vec!((0,0),(0,1),(1,1),(1,2),(2,1)),\n+        vec!((0,0),(0,1),(0,2),(1,0),(1,2)),\n+        vec!((0,0),(0,1),(0,2),(1,2),(1,3)),\n+        vec!((0,0),(0,1),(0,2),(0,3),(1,2)));\n \n     // To break the central symmetry of the problem, every\n     // transformation must be taken except for one piece (piece 3\n@@ -169,7 +169,7 @@ fn make_masks() -> Vec<Vec<Vec<u64> > > {\n         .map(|(id, p)| transform(p, id != 3))\n         .collect();\n \n-    (0i..50).map(|yx| {\n+    (0..50).map(|yx| {\n         transforms.iter().enumerate().map(|(id, t)| {\n             t.iter().filter_map(|p| mask(yx / 5, yx % 5, id, p)).collect()\n         }).collect()"}, {"sha": "dd3ae1699a90230a41334cf28a084229467cb364", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -66,9 +66,9 @@ fn parse_opts(argv: Vec<String> ) -> Config {\n }\n \n fn stress_task(id: int) {\n-    let mut i = 0i;\n+    let mut i = 0;\n     loop {\n-        let n = 15i;\n+        let n = 15;\n         assert_eq!(fib(n), fib(n));\n         i += 1;\n         println!(\"{}: Completed {} iterations\", id, i);"}, {"sha": "3b016f287fbcfa56ff4aeea051fdb6375beb1fcf", "filename": "src/test/debuginfo/basic-types-metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fdebuginfo%2Fbasic-types-metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fdebuginfo%2Fbasic-types-metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fbasic-types-metadata.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -67,7 +67,7 @@ fn main() {\n     let f32: f32 = 2.5;\n     let f64: f64 = 3.5;\n     _zzz(); // #break\n-    if 1i == 1 { _yyy(); }\n+    if 1 == 1 { _yyy(); }\n }\n \n fn _zzz() {()}"}, {"sha": "6db3dce466880c965fde8be928583dfa3d1ab833", "filename": "src/test/debuginfo/box.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fdebuginfo%2Fbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fdebuginfo%2Fbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fbox.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -36,8 +36,8 @@\n #![omit_gdb_pretty_printer_section]\n \n fn main() {\n-    let a = box 1i;\n-    let b = box() (2i, 3.5f64);\n+    let a = box 1;\n+    let b = box() (2, 3.5f64);\n \n     zzz(); // #break\n }"}, {"sha": "59428a2c06f5218e819b255cd04e57e59485d3ab", "filename": "src/test/debuginfo/closure-in-generic-function.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fdebuginfo%2Fclosure-in-generic-function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fdebuginfo%2Fclosure-in-generic-function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fclosure-in-generic-function.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -60,8 +60,8 @@ fn some_generic_fun<T1, T2>(a: T1, b: T2) -> (T2, T1) {\n }\n \n fn main() {\n-    some_generic_fun(0.5f64, 10i);\n-    some_generic_fun(&29i, box 110i);\n+    some_generic_fun(0.5f64, 10);\n+    some_generic_fun(&29, box 110);\n }\n \n fn zzz() { () }"}, {"sha": "08062ce896631e3bb13b7f7c9b95e2cecf7543ad", "filename": "src/test/debuginfo/destructured-for-loop-variable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fdebuginfo%2Fdestructured-for-loop-variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fdebuginfo%2Fdestructured-for-loop-variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fdestructured-for-loop-variable.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -202,7 +202,7 @@ fn main() {\n         zzz(); // #break\n     }\n \n-    for i in 1234..1235i {\n+    for i in 1234..1235 {\n         zzz(); // #break\n     }\n "}, {"sha": "22cc779aeca7b456a4df442fd3d1c8c0af726337", "filename": "src/test/debuginfo/destructured-local.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fdebuginfo%2Fdestructured-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fdebuginfo%2Fdestructured-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fdestructured-local.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -278,7 +278,7 @@ fn main() {\n     let Struct { a: k, b: l } = Struct { a: 12, b: 13 };\n \n     // ignored tuple element\n-    let (m, _, n) = (14i, 15i, 16i);\n+    let (m, _, n) = (14, 15, 16);\n \n     // ignored struct field\n     let Struct { b: o, .. } = Struct { a: 17, b: 18 };\n@@ -291,25 +291,25 @@ fn main() {\n \n     // complex nesting\n     let ((u, v), ((w, (x, Struct { a: y, b: z})), Struct { a: ae, b: oe }), ue) =\n-        ((25i, 26i), ((27i, (28i, Struct { a: 29, b: 30})), Struct { a: 31, b: 32 }), 33i);\n+        ((25, 26), ((27, (28, Struct { a: 29, b: 30})), Struct { a: 31, b: 32 }), 33);\n \n     // reference\n-    let &aa = &(34i, 35i);\n+    let &aa = &(34, 35);\n \n     // reference\n-    let &bb = &(36i, 37i);\n+    let &bb = &(36, 37);\n \n     // contained reference\n-    let (&cc, _) = (&38i, 39i);\n+    let (&cc, _) = (&38, 39);\n \n     // unique pointer\n-    let box dd = box() (40i, 41i, 42i);\n+    let box dd = box() (40, 41, 42);\n \n     // ref binding\n-    let ref ee = (43i, 44i, 45i);\n+    let ref ee = (43, 44, 45);\n \n     // ref binding in tuple\n-    let (ref ff, gg) = (46i, (47i, 48i));\n+    let (ref ff, gg) = (46, (47, 48));\n \n     // ref binding in struct\n     let Struct { b: ref hh, .. } = Struct { a: 49, b: 50 };"}, {"sha": "f9a2b2fef343a282a237aa4f3d8a7d3a1f9770a6", "filename": "src/test/debuginfo/function-arg-initialization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fdebuginfo%2Ffunction-arg-initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fdebuginfo%2Ffunction-arg-initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ffunction-arg-initialization.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -245,7 +245,7 @@ fn non_immediate_args(a: BigStruct, b: BigStruct) {\n }\n \n fn binding(a: i64, b: u64, c: f64) {\n-    let x = 0i; // #break\n+    let x = 0; // #break\n     ::std::old_io::print(\"\")\n }\n "}, {"sha": "8d456f334323c5681157df3a29df3124687d3eff", "filename": "src/test/debuginfo/function-prologue-stepping-no-stack-check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fdebuginfo%2Ffunction-prologue-stepping-no-stack-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fdebuginfo%2Ffunction-prologue-stepping-no-stack-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ffunction-prologue-stepping-no-stack-check.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -270,7 +270,7 @@ fn non_immediate_args(a: BigStruct, b: BigStruct) {\n \n #[no_stack_check]\n fn binding(a: i64, b: u64, c: f64) {\n-    let x = 0i;\n+    let x = 0;\n     ::std::old_io::print(\"\");\n }\n "}, {"sha": "14433fbcd23b3500de51f516d881aaea705ea328", "filename": "src/test/debuginfo/function-prologue-stepping-regular.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fdebuginfo%2Ffunction-prologue-stepping-regular.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fdebuginfo%2Ffunction-prologue-stepping-regular.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ffunction-prologue-stepping-regular.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -148,7 +148,7 @@ fn non_immediate_args(a: BigStruct, b: BigStruct) {\n }\n \n fn binding(a: i64, b: u64, c: f64) {\n-    let x = 0i;\n+    let x = 0;\n }\n \n fn assignment(mut a: u64, b: u64, c: f64) {"}, {"sha": "b9a09867a0048ebd377b27445ef5dbd3fee00c7e", "filename": "src/test/debuginfo/generic-function.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fdebuginfo%2Fgeneric-function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fdebuginfo%2Fgeneric-function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-function.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -86,9 +86,9 @@ fn dup_tup<T0: Clone, T1: Clone>(t0: &T0, t1: &T1) -> ((T0, T1), (T1, T0)) {\n \n fn main() {\n \n-    let _ = dup_tup(&1i, &2.5f64);\n+    let _ = dup_tup(&1, &2.5f64);\n     let _ = dup_tup(&3.5f64, &4_u16);\n-    let _ = dup_tup(&5i, &Struct { a: 6, b: 7.5 });\n+    let _ = dup_tup(&5, &Struct { a: 6, b: 7.5 });\n }\n \n fn zzz() {()}"}, {"sha": "9f6d8a45a995642d88bf2a14c7e16b4138db242e", "filename": "src/test/debuginfo/generic-functions-nested.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fdebuginfo%2Fgeneric-functions-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fdebuginfo%2Fgeneric-functions-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-functions-nested.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -74,7 +74,7 @@\n #![omit_gdb_pretty_printer_section]\n \n fn outer<TA: Clone>(a: TA) {\n-    inner(a.clone(), 1i);\n+    inner(a.clone(), 1);\n     inner(a.clone(), 2.5f64);\n \n     fn inner<TX, TY>(x: TX, y: TY) {\n@@ -83,7 +83,7 @@ fn outer<TA: Clone>(a: TA) {\n }\n \n fn main() {\n-    outer(-1i);\n+    outer(-1);\n     outer(-2.5f64);\n }\n "}, {"sha": "61843a20d055f384aa0d93e340204a6471ff03f4", "filename": "src/test/debuginfo/generic-static-method-on-struct-and-enum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fdebuginfo%2Fgeneric-static-method-on-struct-and-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fdebuginfo%2Fgeneric-static-method-on-struct-and-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-static-method-on-struct-and-enum.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -61,8 +61,8 @@ impl Enum {\n }\n \n fn main() {\n-    Struct::static_method(1i, 2i);\n-    Enum::static_method(-3i, 4.5f64, 5i);\n+    Struct::static_method(1, 2);\n+    Enum::static_method(-3, 4.5f64, 5);\n }\n \n fn zzz() {()}"}, {"sha": "2faafbd76340c4d88db70423dab0206ad765b28c", "filename": "src/test/debuginfo/generic-struct-style-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fdebuginfo%2Fgeneric-struct-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fdebuginfo%2Fgeneric-struct-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-struct-style-enum.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -76,7 +76,7 @@ fn main() {\n     // 0b01011001 = 89\n     let case3: Regular<u16, i32, u64>  = Case3 { a: 0, b: 6438275382588823897 };\n \n-    let univariant = TheOnlyCase { a: -1i };\n+    let univariant = TheOnlyCase { a: -1 };\n \n     zzz(); // #break\n }"}, {"sha": "0eb65f2d80f3d5f18b688e2f90887c1d3cabb91c", "filename": "src/test/debuginfo/generic-struct.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fdebuginfo%2Fgeneric-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fdebuginfo%2Fgeneric-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-struct.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -51,12 +51,12 @@ struct AGenericStruct<TKey, TValue> {\n \n fn main() {\n \n-    let int_int = AGenericStruct { key: 0i, value: 1i };\n-    let int_float = AGenericStruct { key: 2i, value: 3.5f64 };\n-    let float_int = AGenericStruct { key: 4.5f64, value: 5i };\n+    let int_int = AGenericStruct { key: 0, value: 1 };\n+    let int_float = AGenericStruct { key: 2, value: 3.5f64 };\n+    let float_int = AGenericStruct { key: 4.5f64, value: 5 };\n     let float_int_float = AGenericStruct {\n         key: 6.5f64,\n-        value: AGenericStruct { key: 7i, value: 8.5f64 },\n+        value: AGenericStruct { key: 7, value: 8.5f64 },\n     };\n \n     zzz(); // #break"}, {"sha": "1fa54e47163341f2d67e94e2f552adac12e22cdc", "filename": "src/test/debuginfo/lexical-scope-in-for-loop.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-for-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-for-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-for-loop.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -90,15 +90,15 @@\n \n fn main() {\n \n-    let range = [1i, 2, 3];\n+    let range = [1, 2, 3];\n \n-    let x = 1000000i; // wan meeeljen doollaars!\n+    let x = 1000000; // wan meeeljen doollaars!\n \n     for &x in range.iter() {\n         zzz(); // #break\n         sentinel();\n \n-        let x = -1i * x;\n+        let x = -1 * x;\n \n         zzz(); // #break\n         sentinel();"}, {"sha": "c885bfce216d477e91879e1edf698d1d5b93ec8b", "filename": "src/test/debuginfo/lexical-scope-in-if.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-if.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -138,8 +138,8 @@\n \n fn main() {\n \n-    let x = 999i;\n-    let y = -1i;\n+    let x = 999;\n+    let y = -1;\n \n     zzz(); // #break\n     sentinel();\n@@ -148,13 +148,13 @@ fn main() {\n         zzz(); // #break\n         sentinel();\n \n-        let x = 1001i;\n+        let x = 1001;\n \n         zzz(); // #break\n         sentinel();\n \n-        let x = 1002i;\n-        let y = 1003i;\n+        let x = 1002;\n+        let y = 1003;\n         zzz(); // #break\n         sentinel();\n     } else {\n@@ -170,8 +170,8 @@ fn main() {\n         zzz(); // #break\n         sentinel();\n \n-        let x = 1004i;\n-        let y = 1005i;\n+        let x = 1004;\n+        let y = 1005;\n         zzz(); // #break\n         sentinel();\n     }"}, {"sha": "c596253560ef4745113103d0f147c37b9d51ee53", "filename": "src/test/debuginfo/lexical-scope-in-match.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-match.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -135,21 +135,21 @@ struct Struct {\n \n fn main() {\n \n-    let shadowed = 231i;\n-    let not_shadowed = 232i;\n+    let shadowed = 231;\n+    let not_shadowed = 232;\n \n     zzz(); // #break\n     sentinel();\n \n-    match (233i, 234i) {\n+    match (233, 234) {\n         (shadowed, local_to_arm) => {\n \n             zzz(); // #break\n             sentinel();\n         }\n     }\n \n-    match (235i, 236i) {\n+    match (235, 236) {\n         // with literal\n         (235, shadowed) => {\n \n@@ -186,7 +186,7 @@ fn main() {\n         _ => {}\n     }\n \n-    match (243i, 244i) {\n+    match (243, 244) {\n         (shadowed, ref local_to_arm) => {\n \n             zzz(); // #break"}, {"sha": "5e04c81cefd7657000eb81bbd0625f5e11d2659b", "filename": "src/test/debuginfo/lexical-scope-in-parameterless-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-parameterless-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-parameterless-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-parameterless-closure.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -19,6 +19,6 @@\n // Nothing to do here really, just make sure it compiles. See issue #8513.\n fn main() {\n     let _ = |&:|();\n-    let _ = (1u..3).map(|_| 5i);\n+    let _ = (1u..3).map(|_| 5);\n }\n "}, {"sha": "6826bca695b91d080b2f57ad9ac9dca8ab94f5f2", "filename": "src/test/debuginfo/lexical-scope-in-unconditional-loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-unconditional-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-unconditional-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-unconditional-loop.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -136,7 +136,7 @@\n \n fn main() {\n \n-    let mut x = 0i;\n+    let mut x = 0;\n \n     loop {\n         if x >= 2 {\n@@ -160,7 +160,7 @@ fn main() {\n             zzz(); // #break\n             sentinel();\n \n-            let x = -987i;\n+            let x = -987;\n \n             zzz(); // #break\n             sentinel();"}, {"sha": "40280b469f70799bab4e2f72adaeb41258b52f55", "filename": "src/test/debuginfo/lexical-scope-in-while.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-while.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -136,7 +136,7 @@\n \n fn main() {\n \n-    let mut x = 0i;\n+    let mut x = 0;\n \n     while x < 2 {\n         zzz(); // #break\n@@ -156,7 +156,7 @@ fn main() {\n             zzz(); // #break\n             sentinel();\n \n-            let x = -987i;\n+            let x = -987;\n \n             zzz(); // #break\n             sentinel();"}, {"sha": "da941979fb661d41ca052d8d8e1f075ab6c3af7b", "filename": "src/test/debuginfo/lexical-scope-with-macro.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fdebuginfo%2Flexical-scope-with-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fdebuginfo%2Flexical-scope-with-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Flexical-scope-with-macro.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -123,7 +123,7 @@ macro_rules! no_new_scope {\n \n macro_rules! new_scope {\n     () => ({\n-        let a = 890242i;\n+        let a = 890242;\n         zzz(); // #break\n         sentinel();\n     })\n@@ -151,8 +151,8 @@ macro_rules! dup_expr {\n \n fn main() {\n \n-    let a = trivial!(10i);\n-    let b = no_new_scope!(33i);\n+    let a = trivial!(10);\n+    let b = no_new_scope!(33);\n \n     zzz(); // #break\n     sentinel();\n@@ -162,12 +162,12 @@ fn main() {\n     zzz(); // #break\n     sentinel();\n \n-    shadow_within_macro!(100i);\n+    shadow_within_macro!(100);\n \n     zzz(); // #break\n     sentinel();\n \n-    let c = dup_expr!(10i * 20);\n+    let c = dup_expr!(10 * 20);\n \n     zzz(); // #break\n     sentinel();"}, {"sha": "118d096d31b05d377a6ad4c2fe2a100f10f24d16", "filename": "src/test/debuginfo/lexical-scopes-in-block-expression.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fdebuginfo%2Flexical-scopes-in-block-expression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fdebuginfo%2Flexical-scopes-in-block-expression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Flexical-scopes-in-block-expression.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -364,8 +364,8 @@ fn a_function(x: int) -> int {\n \n fn main() {\n \n-    let val = -1i;\n-    let ten = 10i;\n+    let val = -1;\n+    let ten = 10;\n \n     // surrounded by struct expression\n     let point = Point {\n@@ -417,7 +417,7 @@ fn main() {\n         sentinel();\n \n         val\n-    }, 0i);\n+    }, 0);\n \n     zzz(); // #break\n     sentinel();\n@@ -492,7 +492,7 @@ fn main() {\n     sentinel();\n \n     // index expression\n-    let a_vector = [10i; 20];\n+    let a_vector = [10; 20];\n     let _ = a_vector[{\n         zzz(); // #break\n         sentinel();"}, {"sha": "c8fe76fdbe56a1d2ae1ddb0472f51c0e75c247fd", "filename": "src/test/debuginfo/limited-debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fdebuginfo%2Flimited-debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fdebuginfo%2Flimited-debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Flimited-debuginfo.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -47,7 +47,7 @@ fn zzz() {()}\n \n fn some_function(a: int, b: int) {\n     let some_variable = Struct { a: 11, b: 22 };\n-    let some_other_variable = 23i;\n+    let some_other_variable = 23;\n \n     for x in 0..1 {\n         zzz(); // #break"}, {"sha": "0b2f8ef8181e109a2c9616ee4f4ed5f3dafe0823", "filename": "src/test/debuginfo/multiple-functions-equal-var-names.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fdebuginfo%2Fmultiple-functions-equal-var-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fdebuginfo%2Fmultiple-functions-equal-var-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmultiple-functions-equal-var-names.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -48,18 +48,18 @@\n #![omit_gdb_pretty_printer_section]\n \n fn function_one() {\n-    let abc = 10101i;\n+    let abc = 10101;\n     zzz(); // #break\n }\n \n fn function_two() {\n-    let abc = 20202i;\n+    let abc = 20202;\n     zzz(); // #break\n }\n \n \n fn function_three() {\n-    let abc = 30303i;\n+    let abc = 30303;\n     zzz(); // #break\n }\n "}, {"sha": "00698ae1dfb433ed361d923c12d3fd6aabfd8b5b", "filename": "src/test/debuginfo/multiple-functions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fdebuginfo%2Fmultiple-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fdebuginfo%2Fmultiple-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmultiple-functions.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -48,18 +48,18 @@\n #![omit_gdb_pretty_printer_section]\n \n fn function_one() {\n-    let a = 10101i;\n+    let a = 10101;\n     zzz(); // #break\n }\n \n fn function_two() {\n-    let b = 20202i;\n+    let b = 20202;\n     zzz(); // #break\n }\n \n \n fn function_three() {\n-    let c = 30303i;\n+    let c = 30303;\n     zzz(); // #break\n }\n "}, {"sha": "8c1a5376dba72af383d8f70628836ba5362356c8", "filename": "src/test/debuginfo/name-shadowing-and-scope-nesting.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fdebuginfo%2Fname-shadowing-and-scope-nesting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fdebuginfo%2Fname-shadowing-and-scope-nesting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fname-shadowing-and-scope-nesting.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -103,20 +103,20 @@ fn main() {\n     zzz(); // #break\n     sentinel();\n \n-    let x = 10i;\n+    let x = 10;\n \n     zzz(); // #break\n     sentinel();\n \n     let x = 10.5f64;\n-    let y = 20i;\n+    let y = 20;\n \n     zzz(); // #break\n     sentinel();\n \n     {\n         let x = true;\n-        let y = 2220i;\n+        let y = 2220;\n \n         zzz(); // #break\n         sentinel();"}, {"sha": "5b36d32e49fcf440b6cc2b6b8f0ce86f3ceeb228", "filename": "src/test/debuginfo/shadowed-argument.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fdebuginfo%2Fshadowed-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fdebuginfo%2Fshadowed-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fshadowed-argument.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -65,13 +65,13 @@ fn a_function(x: bool, y: bool) {\n     zzz(); // #break\n     sentinel();\n \n-    let x = 10i;\n+    let x = 10;\n \n     zzz(); // #break\n     sentinel();\n \n     let x = 10.5f64;\n-    let y = 20i;\n+    let y = 20;\n \n     zzz(); // #break\n     sentinel();"}, {"sha": "66fd656eaacaff40d031cfe1f95b14222d31f14b", "filename": "src/test/debuginfo/shadowed-variable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fdebuginfo%2Fshadowed-variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fdebuginfo%2Fshadowed-variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fshadowed-variable.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -67,13 +67,13 @@ fn main() {\n     zzz(); // #break\n     sentinel();\n \n-    let x = 10i;\n+    let x = 10;\n \n     zzz(); // #break\n     sentinel();\n \n     let x = 10.5f64;\n-    let y = 20i;\n+    let y = 20;\n \n     zzz(); // #break\n     sentinel();"}, {"sha": "31441db20f10028887140b600a1137fa14ef531c", "filename": "src/test/debuginfo/simple-lexical-scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fdebuginfo%2Fsimple-lexical-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fdebuginfo%2Fsimple-lexical-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fsimple-lexical-scope.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -91,7 +91,7 @@ fn main() {\n         zzz(); // #break\n         sentinel();\n \n-        let x = 10i;\n+        let x = 10;\n \n         zzz(); // #break\n         sentinel();"}, {"sha": "24b6df4e8f1425abbdad1f1ab17ff20e9838b0b1", "filename": "src/test/debuginfo/type-names.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fdebuginfo%2Ftype-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fdebuginfo%2Ftype-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ftype-names.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -288,15 +288,15 @@ fn main() {\n     let slice2 = vec2.as_slice();\n \n     // Trait Objects\n-    let box_trait = (box 0i) as Box<Trait1>;\n-    let ref_trait = &0i as &Trait1;\n-    let mut mut_int1 = 0i;\n+    let box_trait = (box 0) as Box<Trait1>;\n+    let ref_trait = &0 as &Trait1;\n+    let mut mut_int1 = 0;\n     let mut_ref_trait = (&mut mut_int1) as &mut Trait1;\n \n-    let generic_box_trait = (box 0i) as Box<Trait2<i32, Mod1::Struct2>>;\n-    let generic_ref_trait  = (&0i) as &Trait2<Struct1, Struct1>;\n+    let generic_box_trait = (box 0) as Box<Trait2<i32, Mod1::Struct2>>;\n+    let generic_ref_trait  = (&0) as &Trait2<Struct1, Struct1>;\n \n-    let mut generic_mut_ref_trait_impl = 0i;\n+    let mut generic_mut_ref_trait_impl = 0;\n     let generic_mut_ref_trait = (&mut generic_mut_ref_trait_impl) as\n         &mut Trait2<Mod1::Mod2::Struct3, GenericStruct<usize, isize>>;\n "}, {"sha": "9ee18c0d77b7f6df6f0aa1e81b2dc69e79843c6f", "filename": "src/test/debuginfo/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fdebuginfo%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fdebuginfo%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvec.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -34,7 +34,7 @@\n static mut VECT: [i32; 3] = [1, 2, 3];\n \n fn main() {\n-    let a = [1i, 2, 3];\n+    let a = [1, 2, 3];\n \n     unsafe {\n         VECT[0] = 4;"}, {"sha": "c9cb72d8af7193875fc37752a37c76a21cac2a60", "filename": "src/test/pretty/block-disambig.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fpretty%2Fblock-disambig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fpretty%2Fblock-disambig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fblock-disambig.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -15,9 +15,9 @@\n \n use std::cell::Cell;\n \n-fn test1() { let val = &0i; { } *val; }\n+fn test1() { let val = &0; { } *val; }\n \n-fn test2() -> int { let val = &0i; { } *val }\n+fn test2() -> int { let val = &0; { } *val }\n \n #[derive(Copy)]\n struct S { eax: int }\n@@ -35,13 +35,13 @@ fn test5() -> (int, int) { { } (0, 1) }\n fn test6() -> bool { { } (true || false) && true }\n \n fn test7() -> uint {\n-    let regs = &0i;\n+    let regs = &0;\n     match true { true => { } _ => { } }\n     (*regs < 2) as uint\n }\n \n fn test8() -> int {\n-    let val = &0i;\n+    let val = &0;\n     match true {\n         true => { }\n         _    => { }\n@@ -54,12 +54,12 @@ fn test8() -> int {\n }\n \n fn test9() {\n-    let regs = &Cell::new(0i);\n+    let regs = &Cell::new(0);\n     match true { true => { } _ => { } } regs.set(regs.get() + 1);\n }\n \n fn test10() -> int {\n-    let regs = vec!(0i);\n+    let regs = vec!(0);\n     match true { true => { } _ => { } }\n     regs[0]\n }"}, {"sha": "75a6b919342bf81b4f447bb6fba66eb3b1827610", "filename": "src/test/pretty/issue-929.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fpretty%2Fissue-929.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fpretty%2Fissue-929.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-929.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -8,6 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn f() { if (1i == panic!()) { } else { } }\n+fn f() { if (1 == panic!()) { } else { } }\n \n fn main() { }"}, {"sha": "7751f155da4874aee349160dc2d297c9c2b523ae", "filename": "src/test/pretty/match-block-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fpretty%2Fmatch-block-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fpretty%2Fmatch-block-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fmatch-block-expr.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -11,6 +11,6 @@\n // pp-exact\n \n fn main() {\n-    let x = match { 5i } { 1 => 5i, 2 => 6, _ => 7, };\n+    let x = match { 5 } { 1 => 5, 2 => 6, _ => 7, };\n     assert_eq!(x , 7);\n }"}, {"sha": "39af19dbf6f36788725902ae7a3227e1fa5389dd", "filename": "src/test/pretty/match-naked-expr-medium.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fpretty%2Fmatch-naked-expr-medium.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fpretty%2Fmatch-naked-expr-medium.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fmatch-naked-expr-medium.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -11,7 +11,7 @@\n // pp-exact\n \n fn main() {\n-    let x = Some(3i);\n+    let x = Some(3);\n     let _y =\n         match x {\n             Some(_) =>"}, {"sha": "02bbf667d96bc591ade3a74c22c307d71706506c", "filename": "src/test/pretty/match-naked-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fpretty%2Fmatch-naked-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fpretty%2Fmatch-naked-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fmatch-naked-expr.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -11,7 +11,7 @@\n // pp-exact\n \n fn main() {\n-    let x = Some(3i);\n+    let x = Some(3);\n     let _y =\n         match x {\n             Some(_) => \"some(_)\".to_string(),"}, {"sha": "e27a3365a4105d1d7025eb002f6be59a3d14612c", "filename": "src/test/pretty/path-type-bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fpretty%2Fpath-type-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fpretty%2Fpath-type-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fpath-type-bounds.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -19,6 +19,6 @@ fn foo<'a>(x: Box<Tr+ Sync + 'a>) -> Box<Tr+ Sync + 'a> { x }\n fn main() {\n     let x: Box<Tr+ Sync>;\n \n-    Box::new(1i) as Box<Tr+ Sync>;\n+    Box::new(1) as Box<Tr+ Sync>;\n }\n "}, {"sha": "1592e010aaff770537a7f36ee76eb80867ccb86a", "filename": "src/test/pretty/unary-op-disambig.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fpretty%2Funary-op-disambig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fpretty%2Funary-op-disambig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Funary-op-disambig.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -18,10 +18,10 @@ fn block_nosemi() -> int { ({ 0 }) - 1 }\n \n fn if_semi() -> int { if true { f() } else { f() }; -1 }\n \n-fn if_nosemi() -> int { (if true { 0i } else { 0i }) - 1 }\n+fn if_nosemi() -> int { (if true { 0 } else { 0 }) - 1 }\n \n fn alt_semi() -> int { match true { true => { f() } _ => { } }; -1 }\n \n fn alt_no_semi() -> int { (match true { true => { 0 } _ => { 1 } }) - 1 }\n \n-fn stmt() { { f() }; -1i; }\n+fn stmt() { { f() }; -1; }"}, {"sha": "dc2dae1044dac2354ef981979bce687c4384e4cd", "filename": "src/test/pretty/vec-comments.pp", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fpretty%2Fvec-comments.pp", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fpretty%2Fvec-comments.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fvec-comments.pp?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -15,25 +15,25 @@\n     let _v1 =\n         [\n          // Comment\n-         0i,\n+         0,\n          // Comment\n-         1i,\n+         1,\n          // Comment\n-         2i];\n+         2];\n     let _v2 =\n-        [0i, // Comment\n-         1i, // Comment\n-         2i]; // Comment\n+        [0, // Comment\n+         1, // Comment\n+         2]; // Comment\n     let _v3 =\n         [\n          /* Comment */\n-         0i,\n+         0,\n          /* Comment */\n-         1i,\n+         1,\n          /* Comment */\n-         2i];\n+         2];\n     let _v4 =\n-        [0i, /* Comment */\n-         1i, /* Comment */\n-         2i]; /* Comment */\n+        [0, /* Comment */\n+         1, /* Comment */\n+         2]; /* Comment */\n }"}, {"sha": "dc2dae1044dac2354ef981979bce687c4384e4cd", "filename": "src/test/pretty/vec-comments.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fpretty%2Fvec-comments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Fpretty%2Fvec-comments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fvec-comments.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -15,25 +15,25 @@ fn main() {\n     let _v1 =\n         [\n          // Comment\n-         0i,\n+         0,\n          // Comment\n-         1i,\n+         1,\n          // Comment\n-         2i];\n+         2];\n     let _v2 =\n-        [0i, // Comment\n-         1i, // Comment\n-         2i]; // Comment\n+        [0, // Comment\n+         1, // Comment\n+         2]; // Comment\n     let _v3 =\n         [\n          /* Comment */\n-         0i,\n+         0,\n          /* Comment */\n-         1i,\n+         1,\n          /* Comment */\n-         2i];\n+         2];\n     let _v4 =\n-        [0i, /* Comment */\n-         1i, /* Comment */\n-         2i]; /* Comment */\n+        [0, /* Comment */\n+         1, /* Comment */\n+         2]; /* Comment */\n }"}, {"sha": "fd6d69efb4f6e018664bdbe38fc43ff311e30c82", "filename": "src/test/run-fail/assert-eq-macro-panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-fail%2Fassert-eq-macro-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-fail%2Fassert-eq-macro-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fassert-eq-macro-panic.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -11,5 +11,5 @@\n // error-pattern:assertion failed: `(left == right) && (right == left)` (left: `14`, right: `15`)\n \n fn main() {\n-    assert_eq!(14i,15i);\n+    assert_eq!(14,15);\n }"}, {"sha": "78239a2217e6b1fd4912b20e39c2ecd59813ad96", "filename": "src/test/run-fail/assert-macro-fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-fail%2Fassert-macro-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-fail%2Fassert-macro-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fassert-macro-fmt.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -11,5 +11,5 @@\n // error-pattern:panicked at 'test-assert-fmt 42 rust'\n \n fn main() {\n-    assert!(false, \"test-assert-fmt {} {}\", 42i, \"rust\");\n+    assert!(false, \"test-assert-fmt {} {}\", 42, \"rust\");\n }"}, {"sha": "be4ad0781f272f9ee40110772d5b1b79000ca3e9", "filename": "src/test/run-fail/bounds-check-no-overflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-fail%2Fbounds-check-no-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-fail%2Fbounds-check-no-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fbounds-check-no-overflow.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -14,6 +14,6 @@ use std::uint;\n use std::mem::size_of;\n \n fn main() {\n-    let xs = [1i, 2, 3];\n+    let xs = [1, 2, 3];\n     xs[uint::MAX / size_of::<int>() + 1];\n }"}, {"sha": "de69b7b9fa6705ed03afd7c07abd96ef49415334", "filename": "src/test/run-fail/divide-by-zero.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-fail%2Fdivide-by-zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-fail%2Fdivide-by-zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fdivide-by-zero.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -10,6 +10,6 @@\n \n // error-pattern:attempted to divide by zero\n fn main() {\n-    let y = 0i;\n-    let _z = 1i / y;\n+    let y = 0;\n+    let _z = 1 / y;\n }"}, {"sha": "77cec8b632728bdd719cfd4895ad2666f34ae344", "filename": "src/test/run-fail/dst-raw-slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-fail%2Fdst-raw-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-fail%2Fdst-raw-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fdst-raw-slice.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -12,7 +12,7 @@\n // error-pattern:index out of bounds\n \n fn main() {\n-    let a: *const [_] = &[1i, 2, 3];\n+    let a: *const [_] = &[1, 2, 3];\n     unsafe {\n         let _b = (*a)[3];\n     }"}, {"sha": "c9c04e5f2daab8614e703fc17eb3d1839e5b1929", "filename": "src/test/run-fail/explicit-panic-msg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-fail%2Fexplicit-panic-msg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-fail%2Fexplicit-panic-msg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fexplicit-panic-msg.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -13,7 +13,7 @@\n \n // error-pattern:wooooo\n fn main() {\n-    let mut a = 1i;\n-    if 1i == 1 { a = 2; }\n+    let mut a = 1;\n+    if 1 == 1 { a = 2; }\n     panic!(format!(\"woooo{}\", \"o\"));\n }"}, {"sha": "b6791271a11ba98ba66024f69f5af625a22e32b2", "filename": "src/test/run-fail/expr-if-panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-fail%2Fexpr-if-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-fail%2Fexpr-if-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fexpr-if-panic.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -10,4 +10,4 @@\n \n // error-pattern:explicit panic\n \n-fn main() { let _x = if false { 0i } else if true { panic!() } else { 10i }; }\n+fn main() { let _x = if false { 0 } else if true { panic!() } else { 10 }; }"}, {"sha": "3a6bd59b3acaa44133f76487ecb5377b2872c097", "filename": "src/test/run-fail/expr-match-panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-fail%2Fexpr-match-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-fail%2Fexpr-match-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fexpr-match-panic.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -10,4 +10,4 @@\n \n // error-pattern:explicit panic\n \n-fn main() { let _x = match true { false => { 0i } true => { panic!() } }; }\n+fn main() { let _x = match true { false => { 0 } true => { panic!() } }; }"}, {"sha": "cbc92c640d2ca6816e311bfca1336a5b3bb03357", "filename": "src/test/run-fail/issue-12920.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-fail%2Fissue-12920.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-fail%2Fissue-12920.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-12920.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -11,5 +11,5 @@\n // error-pattern:explicit panic\n \n pub fn main() {\n-    panic!(); println!(\"{}\", 1i);\n+    panic!(); println!(\"{}\", 1);\n }"}, {"sha": "4d048fe0fcf4b2c8e3f1286e9f84275502fc0a84", "filename": "src/test/run-fail/issue-3029.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-fail%2Fissue-3029.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-fail%2Fissue-3029.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-3029.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -16,7 +16,7 @@\n // error-pattern:so long\n fn main() {\n     let mut x = Vec::new();\n-    let y = vec!(3i);\n+    let y = vec!(3);\n     panic!(\"so long\");\n     x.extend(y.into_iter());\n }"}, {"sha": "76d4de7ecb03ce907b987c4e16e705a4dc36373e", "filename": "src/test/run-fail/mod-zero.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-fail%2Fmod-zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-fail%2Fmod-zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmod-zero.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -10,6 +10,6 @@\n \n // error-pattern:attempted remainder with a divisor of zero\n fn main() {\n-    let y = 0i;\n-    let _z = 1i % y;\n+    let y = 0;\n+    let _z = 1 % y;\n }"}, {"sha": "ce6a5d46cc740b1ec75a3395fa7d0887a4ee7e85", "filename": "src/test/run-fail/panic-macro-any.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-fail%2Fpanic-macro-any.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-fail%2Fpanic-macro-any.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fpanic-macro-any.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -14,5 +14,5 @@\n #![feature(box_syntax)]\n \n fn main() {\n-    panic!(box 413i as Box<::std::any::Any+Send>);\n+    panic!(box 413 as Box<::std::any::Any+Send>);\n }"}, {"sha": "50ad99c6747b2becd9d05e689b92a93f4cfb8e5a", "filename": "src/test/run-fail/panic-macro-fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-fail%2Fpanic-macro-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-fail%2Fpanic-macro-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fpanic-macro-fmt.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -11,5 +11,5 @@\n // error-pattern:panicked at 'test-fail-fmt 42 rust'\n \n fn main() {\n-    panic!(\"test-fail-fmt {} {}\", 42i, \"rust\");\n+    panic!(\"test-fail-fmt {} {}\", 42, \"rust\");\n }"}, {"sha": "816ee84a8410a3b7aab073bb7c7badcc2ed1e911", "filename": "src/test/run-fail/panic-task-name-none.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-fail%2Fpanic-task-name-none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-fail%2Fpanic-task-name-none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fpanic-task-name-none.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -15,7 +15,7 @@ use std::thread::Thread;\n fn main() {\n     let r: Result<int,_> = Thread::scoped(move|| {\n         panic!(\"test\");\n-        1i\n+        1\n     }).join();\n     assert!(r.is_ok());\n }"}, {"sha": "d48d282c9eb3578d8244c7f11ce12d446c439062", "filename": "src/test/run-fail/panic-task-name-owned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-fail%2Fpanic-task-name-owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-fail%2Fpanic-task-name-owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fpanic-task-name-owned.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -15,7 +15,7 @@ use std::thread::Builder;\n fn main() {\n     let r: Result<int,_> = Builder::new().name(\"owned name\".to_string()).scoped(move|| {\n         panic!(\"test\");\n-        1i\n+        1\n     }).join();\n     assert!(r.is_ok());\n }"}, {"sha": "91a33329a4f8431c672e990bdf0c03346f5b9ecb", "filename": "src/test/run-fail/unwind-interleaved.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-fail%2Funwind-interleaved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-fail%2Funwind-interleaved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-interleaved.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -15,8 +15,8 @@ fn a() { }\n fn b() { panic!(); }\n \n fn main() {\n-    let _x = vec!(0i);\n+    let _x = vec!(0);\n     a();\n-    let _y = vec!(0i);\n+    let _y = vec!(0);\n     b();\n }"}, {"sha": "e1176b1bcdbc931f7ce1806cfad95c9cbb8a53b7", "filename": "src/test/run-fail/unwind-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-fail%2Funwind-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-fail%2Funwind-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-unique.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -18,6 +18,6 @@ fn failfn() {\n }\n \n fn main() {\n-    box 0i;\n+    box 0;\n     failfn();\n }"}, {"sha": "f7c581172e2fe7069c3a32083ea771703bb97870", "filename": "src/test/run-make/cannot-read-embedded-idents/create_and_compile.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-make%2Fcannot-read-embedded-idents%2Fcreate_and_compile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-make%2Fcannot-read-embedded-idents%2Fcreate_and_compile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fcannot-read-embedded-idents%2Fcreate_and_compile.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -23,7 +23,7 @@ fn main() {\n     let main_file = tmpdir.join(\"broken.rs\");\n     let _ = File::create(&main_file).unwrap()\n         .write_str(\"pub fn main() {\n-                   let \\x00name_0,ctxt_0\\x00 = 3i;\n+                   let \\x00name_0,ctxt_0\\x00 = 3;\n                    println!(\\\"{}\\\", \\x00name_0,ctxt_0\\x00);\n         }\");\n "}, {"sha": "6d10a247143faf9f5f0b121fd18afe13ea49a289", "filename": "src/test/run-make/static-unwinding/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-make%2Fstatic-unwinding%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-make%2Fstatic-unwinding%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fstatic-unwinding%2Fmain.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -25,7 +25,7 @@ fn main() {\n     Thread::scoped(move|| {\n         let _a = A;\n         lib::callback(|| panic!());\n-        1i\n+        1\n     }).join().err().unwrap();\n \n     unsafe {"}, {"sha": "9e3ad8ee283e8c6db318219d9ed1502b2eeca816", "filename": "src/test/run-pass-fulldeps/issue-16992.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass-fulldeps%2Fissue-16992.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass-fulldeps%2Fissue-16992.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fissue-16992.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -19,8 +19,8 @@ use syntax::ext::base::ExtCtxt;\n \n #[allow(dead_code)]\n fn foobar(cx: &mut ExtCtxt) {\n-    quote_expr!(cx, 1i);\n-    quote_expr!(cx, 2i);\n+    quote_expr!(cx, 1);\n+    quote_expr!(cx, 2);\n }\n \n fn main() { }"}, {"sha": "497afae6189986480bba9e340e1175e2c9d6d5eb", "filename": "src/test/run-pass-fulldeps/macro-crate-does-hygiene-work.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate-does-hygiene-work.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate-does-hygiene-work.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate-does-hygiene-work.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -20,9 +20,9 @@\n extern crate macro_crate_test;\n \n fn main() {\n-    let x = 3i;\n+    let x = 3;\n     assert_eq!(3, identity!(x));\n     assert_eq!(6, identity!(x+x));\n-    let x = 4i;\n+    let x = 4;\n     assert_eq!(4, identity!(x));\n }"}, {"sha": "848ea738ed7d54c7a3d78e8f591e9c25c16ad714", "filename": "src/test/run-pass-fulldeps/quote-unused-sp-no-warning.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass-fulldeps%2Fquote-unused-sp-no-warning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass-fulldeps%2Fquote-unused-sp-no-warning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fquote-unused-sp-no-warning.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -19,7 +19,7 @@ extern crate syntax;\n use syntax::ext::base::ExtCtxt;\n \n fn test(cx: &mut ExtCtxt) {\n-    let foo = 10i;\n+    let foo = 10;\n     let _e = quote_expr!(cx, $foo);\n }\n "}, {"sha": "e55a2d39cbf889af375405d39a020049a64eddfa", "filename": "src/test/run-pass/assert-eq-macro-success.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fassert-eq-macro-success.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fassert-eq-macro-success.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassert-eq-macro-success.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -15,7 +15,7 @@\n struct Point { x : int }\n \n pub fn main() {\n-    assert_eq!(14i,14i);\n+    assert_eq!(14,14);\n     assert_eq!(\"abc\".to_string(),\"abc\".to_string());\n     assert_eq!(box Point{x:34},box Point{x:34});\n     assert_eq!(&Point{x:34},&Point{x:34});"}, {"sha": "2f9a0b328b5d492146d76adb077dd3e8585d97db", "filename": "src/test/run-pass/associated-types-binding-in-where-clause.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fassociated-types-binding-in-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fassociated-types-binding-in-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-binding-in-where-clause.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -37,7 +37,7 @@ fn foo_uint<I: Foo<A=uint>>(x: I) -> uint {\n }\n \n pub fn main() {\n-    let a = 42i;\n+    let a = 42;\n     foo_uint(a);\n \n     let a = 'a';"}, {"sha": "9f97d69ce3f9b6b1b6a5b519ad977eb4f584b6ee", "filename": "src/test/run-pass/associated-types-bound.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fassociated-types-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fassociated-types-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-bound.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -8,44 +8,44 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Test equality constraints on associated types in a where clause.\n+// Test equality constrai32s on associated types in a where clause.\n \n-pub trait ToInt {\n-    fn to_int(&self) -> int;\n+pub trait ToI32 {\n+    fn to_i32(&self) -> i32;\n }\n \n-impl ToInt for int {\n-    fn to_int(&self) -> int { *self }\n+impl ToI32 for i32 {\n+    fn to_i32(&self) -> i32 { *self }\n }\n \n-impl ToInt for uint {\n-    fn to_int(&self) -> int { *self as int }\n+impl ToI32 for u32 {\n+    fn to_i32(&self) -> i32 { *self as i32 }\n }\n \n-pub trait GetToInt\n+pub trait GetToI32\n {\n-    type R : ToInt;\n+    type R : ToI32;\n \n-    fn get(&self) -> <Self as GetToInt>::R;\n+    fn get(&self) -> <Self as GetToI32>::R;\n }\n \n-impl GetToInt for int {\n-    type R = int;\n-    fn get(&self) -> int { *self }\n+impl GetToI32 for i32 {\n+    type R = i32;\n+    fn get(&self) -> i32 { *self }\n }\n \n-impl GetToInt for uint {\n-    type R = uint;\n-    fn get(&self) -> uint { *self }\n+impl GetToI32 for u32 {\n+    type R = u32;\n+    fn get(&self) -> u32 { *self }\n }\n \n-fn foo<G>(g: G) -> int\n-    where G : GetToInt\n+fn foo<G>(g: G) -> i32\n+    where G : GetToI32\n {\n-    ToInt::to_int(&g.get())\n+    ToI32::to_i32(&g.get())\n }\n \n pub fn main() {\n-    assert_eq!(foo(22i), 22i);\n-    assert_eq!(foo(22u), 22i);\n+    assert_eq!(foo(22i32), 22);\n+    assert_eq!(foo(22u32), 22);\n }"}, {"sha": "948192f4fc0754180bbe8215a3d2098041af29c0", "filename": "src/test/run-pass/associated-types-cc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fassociated-types-cc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fassociated-types-cc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-cc.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -22,5 +22,5 @@ fn foo<B:Bar>(b: B) -> <B as Bar>::T {\n }\n \n fn main() {\n-    println!(\"{}\", foo(3i));\n+    println!(\"{}\", foo(3));\n }"}, {"sha": "e3227613159d1a2202ae09784268d3009fd96ddb", "filename": "src/test/run-pass/associated-types-nested-projections.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fassociated-types-nested-projections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fassociated-types-nested-projections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-nested-projections.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -45,6 +45,6 @@ fn bar<T, I, X>(x: X) where\n }\n \n fn main() {\n-    foo(&[0i, 1, 2]);\n-    bar(&[0i, 1, 2]);\n+    foo(&[0, 1, 2]);\n+    bar(&[0, 1, 2]);\n }"}, {"sha": "022c8f4cd013079fa62d997a86a65a7e3f0bf7de", "filename": "src/test/run-pass/associated-types-ref-in-struct-literal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fassociated-types-ref-in-struct-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fassociated-types-ref-in-struct-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-ref-in-struct-literal.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -24,6 +24,6 @@ struct Thing<F: Foo> {\n }\n \n fn main() {\n-    let thing = Thing{a: 1i, b: 2i};\n+    let thing = Thing{a: 1, b: 2};\n     assert_eq!(thing.a + 1, thing.b);\n }"}, {"sha": "722909218548fc213a09b9bdff79d85051c9f427", "filename": "src/test/run-pass/associated-types-return.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fassociated-types-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fassociated-types-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-return.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -42,11 +42,11 @@ fn foo2<I: Foo>(x: I) -> <I as Foo>::A {\n }\n \n pub fn main() {\n-    let a = 42i;\n+    let a = 42;\n     assert!(foo2(a) == 42u);\n \n     let a = Bar;\n-    assert!(foo2(a) == 43i);\n+    assert!(foo2(a) == 43);\n \n     let a = 'a';\n     foo1(a);"}, {"sha": "ea1df6658fd05b40cb6850b24d34a06dc3890608", "filename": "src/test/run-pass/associated-types-sugar-path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fassociated-types-sugar-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fassociated-types-sugar-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-sugar-path.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -40,5 +40,5 @@ impl<T: Foo> C for B<T> {\n }\n \n pub fn main() {\n-    let z: uint = bar(2i, 4u);\n+    let z: uint = bar(2, 4u);\n }"}, {"sha": "cd4c66cb3218a65a3bb8acb89499b9fd9899dce7", "filename": "src/test/run-pass/auto-instantiate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fauto-instantiate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fauto-instantiate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-instantiate.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -15,6 +15,6 @@ struct Triple { x: int, y: int, z: int }\n fn f<T,U>(x: T, y: U) -> Pair<T, U> { return Pair {a: x, b: y}; }\n \n pub fn main() {\n-    println!(\"{}\", f(Triple {x: 3, y: 4, z: 5}, 4i).a.x);\n-    println!(\"{}\", f(5i, 6i).a);\n+    println!(\"{}\", f(Triple {x: 3, y: 4, z: 5}, 4).a.x);\n+    println!(\"{}\", f(5, 6).a);\n }"}, {"sha": "e5f4d078749989c111a9f53c73d0d2814acacfb7", "filename": "src/test/run-pass/auto-loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fauto-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fauto-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-loop.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub fn main() {\n-    let mut sum = 0i;\n+    let mut sum = 0;\n     let xs = vec!(1, 2, 3, 4, 5);\n     for x in xs.iter() {\n         sum += *x;"}, {"sha": "652f21c2ae3f829aeaff85b54ab1871492d9656c", "filename": "src/test/run-pass/auto-ref-sliceable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fauto-ref-sliceable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fauto-ref-sliceable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-ref-sliceable.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -20,7 +20,7 @@ impl<T> Pushable<T> for Vec<T> {\n }\n \n pub fn main() {\n-    let mut v = vec!(1i);\n+    let mut v = vec!(1);\n     v.push_val(2);\n     v.push_val(3);\n     assert_eq!(v, vec!(1, 2, 3));"}, {"sha": "e9a3ab6be35c385ef3889493ea80450c512aa42d", "filename": "src/test/run-pass/backtrace.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbacktrace.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -21,7 +21,7 @@ use std::ops::{Drop, FnMut, FnOnce};\n \n #[inline(never)]\n fn foo() {\n-    let _v = vec![1i, 2, 3];\n+    let _v = vec![1, 2, 3];\n     if os::getenv(\"IS_TEST\").is_some() {\n         panic!()\n     }\n@@ -77,7 +77,7 @@ fn runtest(me: &str) {\n     assert!(!out.status.success());\n     let s = str::from_utf8(out.error.as_slice()).unwrap();\n     let mut i = 0;\n-    for _ in 0i..2 {\n+    for _ in 0..2 {\n         i += s[i + 10..].find_str(\"stack backtrace\").unwrap() + 10;\n     }\n     assert!(s[i + 10..].find_str(\"stack backtrace\").is_none(),"}, {"sha": "dc3b142f233762d22a6973ae01195c2379ff517d", "filename": "src/test/run-pass/binary-minus-without-space.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fbinary-minus-without-space.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fbinary-minus-without-space.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinary-minus-without-space.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -11,6 +11,6 @@\n // Check that issue #954 stays fixed\n \n pub fn main() {\n-    match -1i { -1 => {}, _ => panic!(\"wat\") }\n-    assert_eq!(1i-1, 0i);\n+    match -1 { -1 => {}, _ => panic!(\"wat\") }\n+    assert_eq!(1-1, 0);\n }"}, {"sha": "b6d428924e3e966b3102aecd481406ba56b98832", "filename": "src/test/run-pass/bitv-perf-test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fbitv-perf-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fbitv-perf-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbitv-perf-test.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -22,5 +22,5 @@ fn bitv_test() {\n }\n \n pub fn main() {\n-    for _ in 0i..10000 { bitv_test(); }\n+    for _ in 0..10000 { bitv_test(); }\n }"}, {"sha": "8a57279e8669a02d331f74870f0e383e4d08095e", "filename": "src/test/run-pass/bitwise.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fbitwise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fbitwise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbitwise.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -33,7 +33,7 @@ fn general() {\n     assert_eq!(0xf0i | 0xf, 0xff);\n     assert_eq!(0xfi << 4, 0xf0);\n     assert_eq!(0xf0i >> 4, 0xf);\n-    assert_eq!(-16i >> 2, -4);\n+    assert_eq!(-16 >> 2, -4);\n     assert_eq!(0b1010_1010i | 0b0101_0101, 0xff);\n }\n "}, {"sha": "ace372dd2d3d9346d8db8a084044689c2ad44199", "filename": "src/test/run-pass/block-expr-precedence.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fblock-expr-precedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fblock-expr-precedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-expr-precedence.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -58,9 +58,9 @@ pub fn main() {\n \n   let num = 12;\n \n-  assert_eq!(if (true) { 12i } else { 12 } - num, 0);\n-  assert_eq!(12i - if (true) { 12i } else { 12 }, 0);\n-  if (true) { 12i; } {-num};\n-  if (true) { 12i; }; {-num};\n-  if (true) { 12i; };;; -num;\n+  assert_eq!(if (true) { 12 } else { 12 } - num, 0);\n+  assert_eq!(12 - if (true) { 12 } else { 12 }, 0);\n+  if (true) { 12; } {-num};\n+  if (true) { 12; }; {-num};\n+  if (true) { 12; };;; -num;\n }"}, {"sha": "b5bd4d90c2edc181c3667256cdf8f5aaa42492a6", "filename": "src/test/run-pass/block-iter-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fblock-iter-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fblock-iter-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-iter-1.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -11,8 +11,8 @@\n fn iter_vec<T, F>(v: Vec<T> , mut f: F) where F: FnMut(&T) { for x in v.iter() { f(x); } }\n \n pub fn main() {\n-    let v = vec!(1i, 2, 3, 4, 5, 6, 7);\n-    let mut odds = 0i;\n+    let v = vec![1i32, 2, 3, 4, 5, 6, 7];\n+    let mut odds = 0i32;\n     iter_vec(v, |i| {\n         if *i % 2 == 1 {\n             odds += 1;"}, {"sha": "348d9df6e7eafeb0f7015ec8d8be0429b350a0cc", "filename": "src/test/run-pass/block-iter-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -11,7 +11,7 @@\n fn iter_vec<T, F>(v: Vec<T>, mut f: F) where F: FnMut(&T) { for x in v.iter() { f(x); } }\n \n pub fn main() {\n-    let v = vec!(1i, 2, 3, 4, 5);\n+    let v = vec![1i32, 2, 3, 4, 5];\n     let mut sum = 0;\n     iter_vec(v.clone(), |i| {\n         iter_vec(v.clone(), |j| {"}, {"sha": "2e5688d8b7497f1f32538f3eb5650aebd55b2e09", "filename": "src/test/run-pass/borrow-tuple-fields.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fborrow-tuple-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fborrow-tuple-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrow-tuple-fields.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -11,13 +11,13 @@\n struct Foo(int, int);\n \n fn main() {\n-    let x = (1i, 2i);\n+    let x = (1, 2);\n     let a = &x.0;\n     let b = &x.0;\n     assert_eq!(*a, 1);\n     assert_eq!(*b, 1);\n \n-    let mut x = (1i, 2i);\n+    let mut x = (1, 2);\n     {\n         let a = &x.0;\n         let b = &mut x.1;\n@@ -28,13 +28,13 @@ fn main() {\n     assert_eq!(x.1, 5);\n \n \n-    let x = Foo(1i, 2i);\n+    let x = Foo(1, 2);\n     let a = &x.0;\n     let b = &x.0;\n     assert_eq!(*a, 1);\n     assert_eq!(*b, 1);\n \n-    let mut x = Foo(1i, 2i);\n+    let mut x = Foo(1, 2);\n     {\n         let a = &x.0;\n         let b = &mut x.1;"}, {"sha": "df8dbdd03c740c1fd96e6be488111f9ef84c57af", "filename": "src/test/run-pass/borrowck-closures-two-imm.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fborrowck-closures-two-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fborrowck-closures-two-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-closures-two-imm.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -14,28 +14,28 @@\n // that the main function can read the variable too while\n // the closures are in scope. Issue #6801.\n \n-fn a() -> int {\n-    let mut x = 3i;\n+fn a() -> i32 {\n+    let mut x = 3i32;\n     x += 1;\n     let c1 = |&:| x * 4;\n     let c2 = |&:| x * 5;\n     c1() * c2() * x\n }\n \n-fn get(x: &int) -> int {\n+fn get(x: &i32) -> i32 {\n     *x * 4\n }\n \n-fn b() -> int {\n-    let mut x = 3;\n+fn b() -> i32 {\n+    let mut x = 3i32;\n     x += 1;\n     let c1 = |&:| get(&x);\n     let c2 = |&:| get(&x);\n     c1() * c2() * x\n }\n \n-fn c() -> int {\n-    let mut x = 3;\n+fn c() -> i32 {\n+    let mut x = 3i32;\n     x += 1;\n     let c1 = |&:| x * 5;\n     let c2 = |&:| get(&x);"}, {"sha": "ee561fdb0be522857bcdc0cb86c92a46ede28fd6", "filename": "src/test/run-pass/borrowck-fixed-length-vecs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fborrowck-fixed-length-vecs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fborrowck-fixed-length-vecs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-fixed-length-vecs.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub fn main() {\n-    let x = [22i];\n+    let x = [22];\n     let y = &x[0];\n     assert_eq!(*y, 22);\n }"}, {"sha": "30a921c9bd24fcb4da5cc032970a8e14addffe09", "filename": "src/test/run-pass/borrowck-freeze-frozen-mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fborrowck-freeze-frozen-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fborrowck-freeze-frozen-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-freeze-frozen-mut.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -19,7 +19,7 @@ fn get<'a, T>(ms: &'a MutSlice<'a, T>, index: uint) -> &'a T {\n }\n \n pub fn main() {\n-    let mut data = [1i, 2, 3];\n+    let mut data = [1, 2, 3];\n     {\n         let slice = MutSlice { data: &mut data };\n         slice.data[0] += 4;"}, {"sha": "4ccbf6b5b0fedfb65a0a91ca3dc823a732917b90", "filename": "src/test/run-pass/borrowck-pat-reassign-no-binding.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fborrowck-pat-reassign-no-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fborrowck-pat-reassign-no-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-pat-reassign-no-binding.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -14,7 +14,7 @@ pub fn main() {\n       None => {\n         // It is ok to reassign x here, because there is in\n         // fact no outstanding loan of x!\n-        x = Some(0i);\n+        x = Some(0);\n       }\n       Some(_) => { }\n     }"}, {"sha": "e57c001ea05b4f99a7234399038ea4fc87a91f5f", "filename": "src/test/run-pass/borrowed-ptr-pattern-infallible.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-infallible.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-infallible.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-infallible.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -10,7 +10,7 @@\n \n \n pub fn main() {\n-    let (&x, &y) = (&3i, &'a');\n+    let (&x, &y) = (&3, &'a');\n     assert_eq!(x, 3);\n     assert_eq!(y, 'a');\n }"}, {"sha": "7ccb40c8e7b37b4475e735dce12ed6ae70cbee60", "filename": "src/test/run-pass/borrowed-ptr-pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -15,6 +15,6 @@ fn foo<T:Clone>(x: &T) -> T{\n }\n \n pub fn main() {\n-    assert_eq!(foo(&3i), 3i);\n+    assert_eq!(foo(&3), 3);\n     assert_eq!(foo(&'a'), 'a');\n }"}, {"sha": "bcfb8f6f9141a2d379a9b7bf2cce3aff3e9bab7c", "filename": "src/test/run-pass/break.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fbreak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fbreak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbreak.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -9,12 +9,12 @@\n // except according to those terms.\n \n pub fn main() {\n-    let mut i = 0i;\n+    let mut i = 0;\n     while i < 20 { i += 1; if i == 10 { break; } }\n     assert_eq!(i, 10);\n     loop { i += 1; if i == 20 { break; } }\n     assert_eq!(i, 20);\n-    let xs = [1i, 2, 3, 4, 5, 6];\n+    let xs = [1, 2, 3, 4, 5, 6];\n     for x in xs.iter() {\n         if *x == 3 { break; } assert!((*x <= 3));\n     }\n@@ -25,7 +25,7 @@ pub fn main() {\n         i += 1; if i % 2 == 0 { continue; } assert!((i % 2 != 0));\n         if i >= 10 { break; }\n     }\n-    let ys = vec!(1i, 2, 3, 4, 5, 6);\n+    let ys = vec!(1, 2, 3, 4, 5, 6);\n     for x in ys.iter() {\n         if *x % 2 == 0 { continue; }\n         assert!((*x % 2 != 0));"}, {"sha": "a3bb02d1d0037835f8cb96ed1d03c7047b74e810", "filename": "src/test/run-pass/bug-7183-generics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fbug-7183-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fbug-7183-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbug-7183-generics.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -34,11 +34,11 @@ impl<T: Speak> Speak for Option<T> {\n \n \n pub fn main() {\n-    assert_eq!(3i.hi(), \"hello: 3\".to_string());\n-    assert_eq!(Some(Some(3i)).hi(),\n+    assert_eq!(3.hi(), \"hello: 3\".to_string());\n+    assert_eq!(Some(Some(3)).hi(),\n                \"something!something!hello: 3\".to_string());\n     assert_eq!(None::<int>.hi(), \"hello - none\".to_string());\n \n     assert_eq!(Some(None::<int>).hi(), \"something!hello - none\".to_string());\n-    assert_eq!(Some(3i).hi(), \"something!hello: 3\".to_string());\n+    assert_eq!(Some(3).hi(), \"something!hello: 3\".to_string());\n }"}, {"sha": "3df9dd25d8681ae0ad27240c8ab1fe066ff8ed9d", "filename": "src/test/run-pass/builtin-superkinds-capabilities-transitive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-transitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-transitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-transitive.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -28,6 +28,6 @@ fn foo<T: Foo>(val: T, chan: Sender<T>) {\n \n pub fn main() {\n     let (tx, rx) = channel();\n-    foo(31337i, tx);\n-    assert!(rx.recv().unwrap() == 31337i);\n+    foo(31337, tx);\n+    assert!(rx.recv().unwrap() == 31337);\n }"}, {"sha": "52b826393e9e352cf26685946c4b242d3ec0e2c6", "filename": "src/test/run-pass/builtin-superkinds-capabilities-xc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-xc.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -31,6 +31,6 @@ fn foo<T: RequiresRequiresShareAndSend>(val: T, chan: Sender<T>) {\n \n pub fn main() {\n     let (tx, rx): (Sender<X<int>>, Receiver<X<int>>) = channel();\n-    foo(X(31337i), tx);\n-    assert!(rx.recv().unwrap() == X(31337i));\n+    foo(X(31337), tx);\n+    assert!(rx.recv().unwrap() == X(31337));\n }"}, {"sha": "034e5ff2d3a5c6c224c15c74b9370b2379b2d5f7", "filename": "src/test/run-pass/builtin-superkinds-capabilities.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -24,6 +24,6 @@ fn foo<T: Foo>(val: T, chan: Sender<T>) {\n \n pub fn main() {\n     let (tx, rx): (Sender<int>, Receiver<int>) = channel();\n-    foo(31337i, tx);\n-    assert!(rx.recv().unwrap() == 31337i);\n+    foo(31337, tx);\n+    assert!(rx.recv().unwrap() == 31337);\n }"}, {"sha": "1b3070ba3b04d89510556472cf41055040ba35d8", "filename": "src/test/run-pass/builtin-superkinds-self-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-self-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-self-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-self-type.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -23,6 +23,6 @@ impl <T: Send> Foo for T { }\n \n pub fn main() {\n     let (tx, rx) = channel();\n-    1193182i.foo(tx);\n-    assert!(rx.recv().unwrap() == 1193182i);\n+    1193182.foo(tx);\n+    assert!(rx.recv().unwrap() == 1193182);\n }"}, {"sha": "e4b26ba74be0215fc9e5d86a21f9e34daf3807ac", "filename": "src/test/run-pass/cci_iter_exe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fcci_iter_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fcci_iter_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_iter_exe.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -15,7 +15,7 @@ extern crate cci_iter_lib;\n pub fn main() {\n     //let bt0 = sys::rusti::frame_address(1u32);\n     //println!(\"%?\", bt0);\n-    cci_iter_lib::iter(&[1i, 2, 3], |i| {\n+    cci_iter_lib::iter(&[1, 2, 3], |i| {\n         println!(\"{}\", *i);\n         //assert!(bt0 == sys::rusti::frame_address(2u32));\n     })"}, {"sha": "4f94673a2c027ef7b647f15527afc8b7cb26babb", "filename": "src/test/run-pass/class-poly-methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -36,7 +36,7 @@ pub fn main() {\n   let mut kitty = cat(1000u, 2, vec!(\"tabby\".to_string()));\n   assert_eq!(nyan.how_hungry, 99);\n   assert_eq!(kitty.how_hungry, 2);\n-  nyan.speak(vec!(1i,2,3));\n+  nyan.speak(vec!(1,2,3));\n   assert_eq!(nyan.meow_count(), 55u);\n   kitty.speak(vec!(\"meow\".to_string(), \"mew\".to_string(), \"purr\".to_string(), \"chirp\".to_string()));\n   assert_eq!(kitty.meow_count(), 1004u);"}, {"sha": "b39a4d7f68530530c3fb3c59443a9255cbe5aaf8", "filename": "src/test/run-pass/cleanup-rvalue-scopes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-scopes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-scopes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-scopes.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -110,7 +110,7 @@ pub fn main() {\n     end_of_block!(ref _x, AddFlags(1));\n     end_of_block!(AddFlags { bits: ref _x }, AddFlags(1));\n     end_of_block!(&AddFlags { bits }, &AddFlags(1));\n-    end_of_block!((_, ref _y), (AddFlags(1), 22i));\n+    end_of_block!((_, ref _y), (AddFlags(1), 22));\n     end_of_block!(box ref _x, box AddFlags(1));\n     end_of_block!(box _x, box AddFlags(1));\n     end_of_block!(_, { { check_flags(0); &AddFlags(1) } });\n@@ -120,7 +120,7 @@ pub fn main() {\n     // LHS does not create a ref binding, so temporary lives as long\n     // as statement, and we do not move the AddFlags out:\n     end_of_stmt!(_, AddFlags(1));\n-    end_of_stmt!((_, _), (AddFlags(1), 22i));\n+    end_of_stmt!((_, _), (AddFlags(1), 22));\n \n     // `&` operator appears inside an arg to a function,\n     // so it is not prolonged:"}, {"sha": "c0877568b72aaca50a4a08d6e4e44bb972cae1c5", "filename": "src/test/run-pass/closure-inference2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fclosure-inference2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fclosure-inference2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclosure-inference2.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -12,6 +12,6 @@\n \n pub fn main() {\n     let f = {|&: i| i};\n-    assert_eq!(f(2i), 2i);\n-    assert_eq!(f(5i), 5i);\n+    assert_eq!(f(2), 2);\n+    assert_eq!(f(5), 5);\n }"}, {"sha": "34c9875f1de733543b32d53101fd3dc80bc2f10e", "filename": "src/test/run-pass/coerce-match-calls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fcoerce-match-calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fcoerce-match-calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-match-calls.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -13,9 +13,9 @@\n use std::boxed::Box;\n \n pub fn main() {\n-    let _: Box<[int]> = if true { Box::new([1i, 2, 3]) } else { Box::new([1i]) };\n+    let _: Box<[int]> = if true { Box::new([1, 2, 3]) } else { Box::new([1]) };\n \n-    let _: Box<[int]> = match true { true => Box::new([1i, 2, 3]), false => Box::new([1i]) };\n+    let _: Box<[int]> = match true { true => Box::new([1, 2, 3]), false => Box::new([1]) };\n \n     // Check we don't get over-keen at propagating coercions in the case of casts.\n     let x = if true { 42 } else { 42u8 } as u16;"}, {"sha": "098a08b07871d29a274736e4b0fb50ebba987e85", "filename": "src/test/run-pass/coerce-match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fcoerce-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fcoerce-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-match.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -14,9 +14,9 @@\n #![feature(box_syntax)]\n \n pub fn main() {\n-    let _: Box<[int]> = if true { box [1i, 2, 3] } else { box [1i] };\n+    let _: Box<[int]> = if true { box [1, 2, 3] } else { box [1] };\n \n-    let _: Box<[int]> = match true { true => box [1i, 2, 3], false => box [1i] };\n+    let _: Box<[int]> = match true { true => box [1, 2, 3], false => box [1] };\n \n     // Check we don't get over-keen at propagating coercions in the case of casts.\n     let x = if true { 42 } else { 42u8 } as u16;"}, {"sha": "f8c8ac20d72af92370db00d36e143a9dd6442d3f", "filename": "src/test/run-pass/complex.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fcomplex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fcomplex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcomplex.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -35,8 +35,8 @@ fn foo(x: int) -> int {\n }\n \n pub fn main() {\n-    let x: int = 2i + 2;\n+    let x: int = 2 + 2;\n     println!(\"{}\", x);\n     println!(\"hello, world\");\n-    println!(\"{}\", 10i);\n+    println!(\"{}\", 10);\n }"}, {"sha": "2a8443167d0555a26c32a18bd959b1c4365e3d9a", "filename": "src/test/run-pass/concat.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fconcat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fconcat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconcat.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -15,12 +15,12 @@ pub fn main() {\n     assert_eq!(concat!(\"qux\", \"quux\",).to_string(), \"quxquux\".to_string());\n \n     assert_eq!(\n-        concat!(1, 2i, 3u, 4f32, 4.0, 'a', true),\n+        concat!(1, 2, 3u, 4f32, 4.0, 'a', true),\n         \"12344.0atrue\"\n     );\n \n     assert!(match \"12344.0atrue\" {\n-        concat!(1, 2i, 3u, 4f32, 4.0, 'a', true) => true,\n+        concat!(1, 2, 3u, 4f32, 4.0, 'a', true) => true,\n         _ => false\n     })\n }"}, {"sha": "1268fc4e4350c3f3269f0f38682bdbd6d9a1c670", "filename": "src/test/run-pass/const-binops.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fconst-binops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fconst-binops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-binops.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -52,27 +52,27 @@ static V: int = 1 << 3;\n static W: int = 1024 >> 4;\n static X: uint = 1024 >> 4;\n \n-static Y: bool = 1i == 1;\n+static Y: bool = 1 == 1;\n static Z: bool = 1.0f64 == 1.0;\n \n-static AA: bool = 1i <= 2;\n-static AB: bool = -1i <= 2;\n+static AA: bool = 1 <= 2;\n+static AB: bool = -1 <= 2;\n static AC: bool = 1.0f64 <= 2.0;\n \n-static AD: bool = 1i < 2;\n-static AE: bool = -1i < 2;\n+static AD: bool = 1 < 2;\n+static AE: bool = -1 < 2;\n static AF: bool = 1.0f64 < 2.0;\n \n-static AG: bool = 1i != 2;\n-static AH: bool = -1i != 2;\n+static AG: bool = 1 != 2;\n+static AH: bool = -1 != 2;\n static AI: bool = 1.0f64 != 2.0;\n \n-static AJ: bool = 2i >= 1;\n-static AK: bool = 2i >= -2;\n+static AJ: bool = 2 >= 1;\n+static AK: bool = 2 >= -2;\n static AL: bool = 1.0f64 >= -2.0;\n \n-static AM: bool = 2i > 1;\n-static AN: bool = 2i > -2;\n+static AM: bool = 2 > 1;\n+static AN: bool = 2 > -2;\n static AO: bool = 1.0f64 > -2.0;\n \n pub fn main() {"}, {"sha": "e6a280a91d766946b5770d82dec163796660ee4d", "filename": "src/test/run-pass/const-bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fconst-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fconst-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-bound.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -25,5 +25,5 @@ pub fn main() {\n     foo(F{field: 42});\n     foo((1, 2u));\n     foo(@1);*/\n-    foo(box 1i);\n+    foo(box 1);\n }"}, {"sha": "0b097c0b060ce741380202c21ea1682843aaae54", "filename": "src/test/run-pass/const-expr-in-vec-repeat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fconst-expr-in-vec-repeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fconst-expr-in-vec-repeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-expr-in-vec-repeat.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -13,6 +13,6 @@\n pub fn main() {\n \n     const FOO: uint = 2;\n-    let _v = [0i; FOO*3*2/2];\n+    let _v = [0; FOO*3*2/2];\n \n }"}, {"sha": "e8f4948a16533b245003da4c82d2269d4408e21f", "filename": "src/test/run-pass/consts-in-patterns.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fconsts-in-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fconsts-in-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconsts-in-patterns.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -12,11 +12,11 @@ const FOO: int = 10;\n const BAR: int = 3;\n \n pub fn main() {\n-    let x: int = 3i;\n+    let x: int = 3;\n     let y = match x {\n-        FOO => 1i,\n-        BAR => 2i,\n-        _ => 3i\n+        FOO => 1,\n+        BAR => 2,\n+        _ => 3\n     };\n     assert_eq!(y, 2);\n }"}, {"sha": "41c74250b3b0ef0a7ebfecb6cd900f3ded848553", "filename": "src/test/run-pass/deref-lval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fderef-lval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fderef-lval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderef-lval.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -14,7 +14,7 @@\n use std::cell::Cell;\n \n pub fn main() {\n-    let x = box Cell::new(5i);\n-    x.set(1000i);\n+    let x = box Cell::new(5);\n+    x.set(1000);\n     println!(\"{}\", x.get());\n }"}, {"sha": "fbb8a3a1720f903ecc79b68c19fc9644e8ab9192", "filename": "src/test/run-pass/deref-rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fderef-rc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fderef-rc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderef-rc.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -11,6 +11,6 @@\n use std::rc::Rc;\n \n fn main() {\n-    let x = Rc::new([1i, 2, 3, 4]);\n+    let x = Rc::new([1, 2, 3, 4]);\n     assert!(*x == [1, 2, 3, 4]);\n }"}, {"sha": "e174ffae75de2e6371a4152434b953b6a42aad7c", "filename": "src/test/run-pass/deriving-clone-generic-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-enum.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -16,5 +16,5 @@ enum E<T,U> {\n }\n \n pub fn main() {\n-    let _ = E::A::<int, int>(1i).clone();\n+    let _ = E::A::<int, int>(1).clone();\n }"}, {"sha": "329c7dab3eb3af47a5e35bad49a3a4a88a98edd8", "filename": "src/test/run-pass/deriving-clone-generic-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-struct.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -16,5 +16,5 @@ struct S<T> {\n }\n \n pub fn main() {\n-    let _ = S { foo: (), bar: (), baz: 1i }.clone();\n+    let _ = S { foo: (), bar: (), baz: 1 }.clone();\n }"}, {"sha": "bb07b08859fdb95f72807fd1e11afb5ecacaae9d", "filename": "src/test/run-pass/deriving-clone-generic-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-tuple-struct.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -12,5 +12,5 @@\n struct S<T>(T, ());\n \n pub fn main() {\n-    let _ = S(1i, ()).clone();\n+    let _ = S(1, ()).clone();\n }"}, {"sha": "b3194d5820a4e90916c9b1b32e3f0d84d37b38ae", "filename": "src/test/run-pass/deriving-cmp-generic-enum.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-enum.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -19,10 +19,10 @@ enum E<T> {\n \n pub fn main() {\n     let e0 = E::E0;\n-    let e11 = E::E1(1i);\n-    let e12 = E::E1(2i);\n-    let e21 = E::E2(1i, 1i);\n-    let e22 = E::E2(1i, 2i);\n+    let e11 = E::E1(1);\n+    let e12 = E::E1(2);\n+    let e21 = E::E2(1, 1);\n+    let e22 = E::E2(1, 2);\n \n     // in order for both PartialOrd and Ord\n     let es = [e0, e11, e12, e21, e22];"}, {"sha": "8b54536f3abac8f4205e758b31590737c7fc4a16", "filename": "src/test/run-pass/deriving-cmp-generic-struct-enum.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-struct-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-struct-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-struct-enum.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -19,15 +19,15 @@ enum ES<T> {\n \n pub fn main() {\n     let (es11, es12, es21, es22) = (ES::ES1 {\n-        x: 1i\n+        x: 1\n     }, ES::ES1 {\n-        x: 2i\n+        x: 2\n     }, ES::ES2 {\n-        x: 1i,\n-        y: 1i\n+        x: 1,\n+        y: 1\n     }, ES::ES2 {\n-        x: 1i,\n-        y: 2i\n+        x: 1,\n+        y: 2\n     });\n \n     // in order for both PartialOrd and Ord"}, {"sha": "86887c3411f8fabb316422f08e1bc7834220f94f", "filename": "src/test/run-pass/deriving-cmp-generic-struct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-struct.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -17,8 +17,8 @@ struct S<T> {\n }\n \n pub fn main() {\n-    let s1 = S {x: 1i, y: 1i};\n-    let s2 = S {x: 1i, y: 2i};\n+    let s1 = S {x: 1, y: 1};\n+    let s2 = S {x: 1, y: 2};\n \n     // in order for both PartialOrd and Ord\n     let ss = [s1, s2];"}, {"sha": "c7d7f8ded83f4471d77e402f81de7ab2d0374307", "filename": "src/test/run-pass/deriving-cmp-generic-tuple-struct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-tuple-struct.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -15,8 +15,8 @@ struct TS<T>(T,T);\n \n \n pub fn main() {\n-    let ts1 = TS(1i, 1i);\n-    let ts2 = TS(1i, 2i);\n+    let ts1 = TS(1, 1);\n+    let ts2 = TS(1, 2);\n \n     // in order for both PartialOrd and Ord\n     let tss = [ts1, ts2];"}, {"sha": "d6e5fedf1824a0382d3543366f8dcd2a04eda2bb", "filename": "src/test/run-pass/deriving-rand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fderiving-rand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fderiving-rand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-rand.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -31,7 +31,7 @@ enum D {\n \n pub fn main() {\n     // check there's no segfaults\n-    for _ in 0i..20 {\n+    for _ in 0..20 {\n         rand::random::<A>();\n         rand::random::<B>();\n         rand::random::<C>();"}, {"sha": "4ba3aa70dfcdfbdf04521319e6c5d2edea109245", "filename": "src/test/run-pass/drop-trait-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fdrop-trait-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fdrop-trait-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-trait-generic.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -22,5 +22,5 @@ impl<T> ::std::ops::Drop for S<T> {\n }\n \n pub fn main() {\n-    let _x = S { x: 1i };\n+    let _x = S { x: 1 };\n }"}, {"sha": "226025cd80e8c900a99aac08603fc39168ab9dbb", "filename": "src/test/run-pass/dst-raw.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fdst-raw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fdst-raw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-raw.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -45,7 +45,7 @@ pub fn main() {\n     assert!(r == 42);\n \n     // raw slice\n-    let a: *const [_] = &[1i, 2, 3];\n+    let a: *const [_] = &[1, 2, 3];\n     unsafe {\n         let b = (*a)[2];\n         assert!(b == 3);\n@@ -54,7 +54,7 @@ pub fn main() {\n     }\n \n     // raw slice with explicit cast\n-    let a = &[1i, 2, 3] as *const [_];\n+    let a = &[1, 2, 3] as *const [_];\n     unsafe {\n         let b = (*a)[2];\n         assert!(b == 3);\n@@ -63,7 +63,7 @@ pub fn main() {\n     }\n \n     // raw DST struct with slice\n-    let c: *const Foo<[_]> = &Foo {f: [1i, 2, 3]};\n+    let c: *const Foo<[_]> = &Foo {f: [1, 2, 3]};\n     unsafe {\n         let b = (&*c).f[0];\n         assert!(b == 1);\n@@ -86,23 +86,23 @@ pub fn main() {\n     };\n     assert!(r == 42);\n \n-    let a: *mut [_] = &mut [1i, 2, 3];\n+    let a: *mut [_] = &mut [1, 2, 3];\n     unsafe {\n         let b = (*a)[2];\n         assert!(b == 3);\n         let len = (*a).len();\n         assert!(len == 3);\n     }\n \n-    let a = &mut [1i, 2, 3] as *mut [_];\n+    let a = &mut [1, 2, 3] as *mut [_];\n     unsafe {\n         let b = (*a)[2];\n         assert!(b == 3);\n         let len = (*a).len();\n         assert!(len == 3);\n     }\n \n-    let c: *mut Foo<[_]> = &mut Foo {f: [1i, 2, 3]};\n+    let c: *mut Foo<[_]> = &mut Foo {f: [1, 2, 3]};\n     unsafe {\n         let b = (&*c).f[0];\n         assert!(b == 1);"}, {"sha": "ee5193adbc6a4b1d93218a7d3ca0e6e4d3626e44", "filename": "src/test/run-pass/dst-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fdst-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fdst-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-struct.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -115,7 +115,7 @@ pub fn main() {\n     foo3(f5);\n \n     // Box.\n-    let f1 = box [1i, 2, 3];\n+    let f1 = box [1, 2, 3];\n     assert!((*f1)[1] == 2);\n     let f2: Box<[int]> = f1;\n     assert!((*f2)[1] == 2);"}, {"sha": "97e873e9aff953cb41b110a3ba9cafd236317c42", "filename": "src/test/run-pass/early-ret-binop-add.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fearly-ret-binop-add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fearly-ret-binop-add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fearly-ret-binop-add.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -8,5 +8,5 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn wsucc(n: int) -> int { 0i + { return n + 1 } }\n+fn wsucc(n: int) -> int { 0 + { return n + 1 } }\n pub fn main() { }"}, {"sha": "89fee7358a11194df025bddf729eb2d9bc923d5d", "filename": "src/test/run-pass/early-vtbl-resolution.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fearly-vtbl-resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fearly-vtbl-resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fearly-vtbl-resolution.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -19,5 +19,5 @@ fn foo_func<A, B: thing<A>>(x: B) -> Option<A> { x.foo() }\n struct A { a: int }\n \n pub fn main() {\n-    let _x: Option<f64> = foo_func(0i);\n+    let _x: Option<f64> = foo_func(0);\n }"}, {"sha": "476d3f42d6ee31375484ea1cbca68d3490a72ea8", "filename": "src/test/run-pass/else-if.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Felse-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Felse-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Felse-if.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -11,20 +11,20 @@\n \n \n pub fn main() {\n-    if 1i == 2 {\n+    if 1 == 2 {\n         assert!((false));\n-    } else if 2i == 3 {\n+    } else if 2 == 3 {\n         assert!((false));\n-    } else if 3i == 4 { assert!((false)); } else { assert!((true)); }\n-    if 1i == 2 { assert!((false)); } else if 2i == 2 { assert!((true)); }\n-    if 1i == 2 {\n+    } else if 3 == 4 { assert!((false)); } else { assert!((true)); }\n+    if 1 == 2 { assert!((false)); } else if 2 == 2 { assert!((true)); }\n+    if 1 == 2 {\n         assert!((false));\n-    } else if 2i == 2 {\n-        if 1i == 1 {\n+    } else if 2 == 2 {\n+        if 1 == 1 {\n             assert!((true));\n-        } else { if 2i == 1 { assert!((false)); } else { assert!((false)); } }\n+        } else { if 2 == 1 { assert!((false)); } else { assert!((false)); } }\n     }\n-    if 1i == 2 {\n+    if 1 == 2 {\n         assert!((false));\n-    } else { if 1i == 2 { assert!((false)); } else { assert!((true)); } }\n+    } else { if 1 == 2 { assert!((false)); } else { assert!((true)); } }\n }"}, {"sha": "468e5f5f4b315f5255c2b55b8f8748d3c1d69171", "filename": "src/test/run-pass/enum-nullable-simplifycfg-misopt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fenum-nullable-simplifycfg-misopt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fenum-nullable-simplifycfg-misopt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-nullable-simplifycfg-misopt.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -19,8 +19,8 @@\n \n enum List<X> { Nil, Cons(X, Box<List<X>>) }\n pub fn main() {\n-    match List::Cons(10i, box List::Nil) {\n-        List::Cons(10i, _) => {}\n+    match List::Cons(10, box List::Nil) {\n+        List::Cons(10, _) => {}\n         List::Nil => {}\n         _ => panic!()\n     }"}, {"sha": "86a998100b0e46d978f1ca7d1bb63ae4853879d0", "filename": "src/test/run-pass/enum-vec-initializer.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fenum-vec-initializer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fenum-vec-initializer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-vec-initializer.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -16,9 +16,9 @@ const BAR:uint = Flopsy::Bunny as uint;\n const BAR2:uint = BAR;\n \n pub fn main() {\n-    let _v = [0i;  Flopsy::Bunny as uint];\n-    let _v = [0i;  BAR];\n-    let _v = [0i;  BAR2];\n+    let _v = [0;  Flopsy::Bunny as uint];\n+    let _v = [0;  BAR];\n+    let _v = [0;  BAR2];\n     const BAR3:uint = BAR2;\n-    let _v = [0i;  BAR3];\n+    let _v = [0;  BAR3];\n }"}, {"sha": "96c58b106f3414ce89c984b75218a708f94bf957", "filename": "src/test/run-pass/explicit-i-suffix.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fexplicit-i-suffix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fexplicit-i-suffix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-i-suffix.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -9,11 +9,11 @@\n // except according to those terms.\n \n pub fn main() {\n-    let x: int = 8i;\n-    let y = 9i;\n+    let x: int = 8;\n+    let y = 9;\n     x + y;\n \n-    let q: int = -8i;\n-    let r = -9i;\n+    let q: int = -8;\n+    let r = -9;\n     q + r;\n }"}, {"sha": "d10b209965f1374dfed9eedb68f3d1bb71f50152", "filename": "src/test/run-pass/expr-block-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fexpr-block-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fexpr-block-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-unique.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -12,4 +12,4 @@\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n \n-pub fn main() { let x = { box 100i }; assert!((*x == 100)); }\n+pub fn main() { let x = { box 100 }; assert!((*x == 100)); }"}, {"sha": "ee1d955b0d361d9bdf54c5f7e4b182623c94c5aa", "filename": "src/test/run-pass/expr-block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fexpr-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fexpr-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -20,7 +20,7 @@ struct RS { v1: int, v2: int }\n fn test_rec() { let rs = { RS {v1: 10, v2: 20} }; assert!((rs.v2 == 20)); }\n \n fn test_filled_with_stuff() {\n-    let rs = { let mut a = 0i; while a < 10 { a += 1; } a };\n+    let rs = { let mut a = 0; while a < 10 { a += 1; } a };\n     assert_eq!(rs, 10);\n }\n "}, {"sha": "afc7dfaf9b441bcfd51a03a5cd0c4ec4fe3f5d14", "filename": "src/test/run-pass/expr-empty-ret.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fexpr-empty-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fexpr-empty-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-empty-ret.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -12,7 +12,7 @@\n \n fn f() {\n     let _x = match true {\n-        true => { 10i }\n+        true => { 10 }\n         false => { return }\n     };\n }"}, {"sha": "0ea1f3fcdaffcb7874a711d6100a731d8c60fbe5", "filename": "src/test/run-pass/expr-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fexpr-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fexpr-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-fn.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -22,7 +22,7 @@ fn test_vec() {\n \n fn test_generic() {\n     fn f<T>(t: T) -> T { t }\n-    assert_eq!(f(10i), 10);\n+    assert_eq!(f(10), 10);\n }\n \n fn test_alt() {"}, {"sha": "52ccee05817a0ccb9ae407ccb9a0f6d294cd2c79", "filename": "src/test/run-pass/expr-if-panic-all.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fexpr-if-panic-all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fexpr-if-panic-all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-panic-all.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -12,7 +12,7 @@\n // expression results in panic.\n pub fn main() {\n     let _x = if true {\n-        10i\n+        10\n     } else {\n         if true { panic!() } else { panic!() }\n     };"}, {"sha": "87c7954fa49aae9387a4e23f1928089d024c4924", "filename": "src/test/run-pass/expr-if-panic.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fexpr-if-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fexpr-if-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-panic.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -9,18 +9,18 @@\n // except according to those terms.\n \n fn test_if_panic() {\n-    let x = if false { panic!() } else { 10i };\n+    let x = if false { panic!() } else { 10 };\n     assert!((x == 10));\n }\n \n fn test_else_panic() {\n-    let x = if true { 10i } else { panic!() };\n-    assert_eq!(x, 10i);\n+    let x = if true { 10 } else { panic!() };\n+    assert_eq!(x, 10);\n }\n \n fn test_elseif_panic() {\n-    let x = if false { 0i } else if false { panic!() } else { 10i };\n-    assert_eq!(x, 10i);\n+    let x = if false { 0 } else if false { panic!() } else { 10 };\n+    assert_eq!(x, 10);\n }\n \n pub fn main() { test_if_panic(); test_else_panic(); test_elseif_panic(); }"}, {"sha": "317e54349301144d7f54355f48f810980e3c1572", "filename": "src/test/run-pass/expr-if-unique.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fexpr-if-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fexpr-if-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-unique.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -15,8 +15,8 @@\n \n // Tests for if as expressions returning boxed types\n fn test_box() {\n-    let rs = if true { box 100i } else { box 101i };\n-    assert_eq!(*rs, 100i);\n+    let rs = if true { box 100 } else { box 101 };\n+    assert_eq!(*rs, 100);\n }\n \n pub fn main() { test_box(); }"}, {"sha": "3a8955917d6496567237712b062df5c073f35752", "filename": "src/test/run-pass/expr-match-panic-all.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fexpr-match-panic-all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fexpr-match-panic-all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-panic-all.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -16,7 +16,7 @@\n pub fn main() {\n     let _x =\n         match true {\n-          true => { 10i }\n+          true => { 10 }\n           false => { match true { true => { panic!() } false => { panic!() } } }\n         };\n }"}, {"sha": "da24d4c57cc798e1a2366facceeddaee1163c385", "filename": "src/test/run-pass/expr-match-panic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fexpr-match-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fexpr-match-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-panic.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -15,8 +15,8 @@ fn test_simple() {\n }\n \n fn test_box() {\n-    let r = match true { true => { vec!(10i) } false => { panic!() } };\n-    assert_eq!(r[0], 10i);\n+    let r = match true { true => { vec!(10) } false => { panic!() } };\n+    assert_eq!(r[0], 10);\n }\n \n pub fn main() { test_simple(); test_box(); }"}, {"sha": "57ccfe1d5e09253a72c2904093282b842ea1a1dd", "filename": "src/test/run-pass/expr-match-unique.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fexpr-match-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fexpr-match-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-unique.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -13,8 +13,8 @@\n \n // Tests for match as expressions resulting in boxed types\n fn test_box() {\n-    let res = match true { true => { box 100i }, _ => panic!() };\n-    assert_eq!(*res, 100i);\n+    let res = match true { true => { box 100 }, _ => panic!() };\n+    assert_eq!(*res, 100);\n }\n \n pub fn main() { test_box(); }"}, {"sha": "004e6d48e3798cb63f7721522f8e50556c76f123", "filename": "src/test/run-pass/fat-arrow-match.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Ffat-arrow-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Ffat-arrow-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffat-arrow-match.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -17,8 +17,8 @@ enum color {\n \n pub fn main() {\n     println!(\"{}\", match color::red {\n-        color::red => { 1i }\n-        color::green => { 2i }\n-        color::blue => { 3i }\n+        color::red => { 1 }\n+        color::green => { 2 }\n+        color::blue => { 3 }\n     });\n }"}, {"sha": "bbd7b9130e7b94e1afe1290803d562019bd5de81", "filename": "src/test/run-pass/fixed_length_copy.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Ffixed_length_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Ffixed_length_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffixed_length_copy.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n pub fn main() {\n-    let arr = [1i,2i,3i];\n+    let arr = [1,2,3];\n     let arr2 = arr;\n-    assert_eq!(arr[1], 2i);\n-    assert_eq!(arr2[2], 3i);\n+    assert_eq!(arr[1], 2);\n+    assert_eq!(arr2[2], 3);\n }"}, {"sha": "785abbe449bb47057f61869bfe71151bcc42c734", "filename": "src/test/run-pass/fn-type-infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Ffn-type-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Ffn-type-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-type-infer.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -13,6 +13,6 @@\n pub fn main() {\n     // We should be able to type infer inside of ||s.\n     let _f = |&:| {\n-        let i = 10i;\n+        let i = 10;\n     };\n }"}, {"sha": "ae509dc0862d04cec813b20b017b6dba9b0b0c1f", "filename": "src/test/run-pass/for-loop-goofiness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Ffor-loop-goofiness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Ffor-loop-goofiness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffor-loop-goofiness.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -16,7 +16,7 @@ enum BogusOption<T> {\n type Iterator = int;\n \n pub fn main() {\n-    let x = [ 3i, 3, 3 ];\n+    let x = [ 3, 3, 3 ];\n     for i in x.iter() {\n         assert_eq!(*i, 3);\n     }"}, {"sha": "9cbb4f4107a9fecb8c43bc310f6ac62606d8cb66", "filename": "src/test/run-pass/foreach-external-iterators-break.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-break.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-break.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-break.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n pub fn main() {\n-    let x = [1i; 100];\n-    let mut y = 0i;\n+    let x = [1; 100];\n+    let mut y = 0;\n     for i in x.iter() {\n         if y > 10 {\n             break;"}, {"sha": "d16a964ea798cb2bbfae1a1ba9c58f7e67b38e9a", "filename": "src/test/run-pass/foreach-external-iterators-hashmap-break-restart.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-hashmap-break-restart.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-hashmap-break-restart.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-hashmap-break-restart.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -18,7 +18,7 @@ use std::collections::HashMap;\n \n pub fn main() {\n     let mut h = HashMap::new();\n-    let kvs = [(1i, 10i), (2i, 20i), (3i, 30i)];\n+    let kvs = [(1, 10), (2, 20), (3, 30)];\n     for &(k,v) in kvs.iter() {\n         h.insert(k,v);\n     }"}, {"sha": "1878997de5ab76d7c202640a92febb898bf39582", "filename": "src/test/run-pass/foreach-external-iterators-hashmap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-hashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-hashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-hashmap.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -14,12 +14,12 @@ use std::collections::HashMap;\n \n pub fn main() {\n     let mut h = HashMap::new();\n-    let kvs = [(1i, 10i), (2i, 20i), (3i, 30i)];\n+    let kvs = [(1, 10), (2, 20), (3, 30)];\n     for &(k,v) in kvs.iter() {\n         h.insert(k,v);\n     }\n-    let mut x = 0i;\n-    let mut y = 0i;\n+    let mut x = 0;\n+    let mut y = 0;\n     for (&k,&v) in h.iter() {\n         x += k;\n         y += v;"}, {"sha": "d9abed501237c15892c179958415a839468805b0", "filename": "src/test/run-pass/foreach-external-iterators-loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-loop.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n pub fn main() {\n-    let x = [1i; 100];\n-    let mut y = 0i;\n+    let x = [1; 100];\n+    let mut y = 0;\n     for (n,i) in x.iter().enumerate() {\n         if n < 10 {\n             continue;"}, {"sha": "754719916206e595c3307d17cd08c65d671b7f0e", "filename": "src/test/run-pass/foreach-external-iterators-nested.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-nested.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -9,10 +9,10 @@\n // except according to those terms.\n \n pub fn main() {\n-    let x = [1i; 100];\n-    let y = [2i; 100];\n-    let mut p = 0i;\n-    let mut q = 0i;\n+    let x = [1; 100];\n+    let y = [2; 100];\n+    let mut p = 0;\n+    let mut q = 0;\n     for i in x.iter() {\n         for j in y.iter() {\n             p += *j;"}, {"sha": "ef4692b2b517c8c82ff410bea2c6c4f7bc5fc394", "filename": "src/test/run-pass/foreach-external-iterators.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fforeach-external-iterators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fforeach-external-iterators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-external-iterators.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n pub fn main() {\n-    let x = [1i; 100];\n-    let mut y = 0i;\n+    let x = [1; 100];\n+    let mut y = 0;\n     for i in x.iter() {\n         y += *i\n     }"}, {"sha": "f99d3eb1c7d498b26800fe3ae6f01874ab3d24e7", "filename": "src/test/run-pass/foreign-call-no-runtime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fforeign-call-no-runtime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fforeign-call-no-runtime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-call-no-runtime.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -22,7 +22,7 @@ extern {\n pub fn main() {\n     unsafe {\n         Thread::scoped(move|| {\n-            let i = &100i;\n+            let i = &100;\n             rust_dbg_call(callback, mem::transmute(i));\n         }).join();\n     }\n@@ -31,6 +31,6 @@ pub fn main() {\n extern fn callback(data: libc::uintptr_t) {\n     unsafe {\n         let data: *const int = mem::transmute(data);\n-        assert_eq!(*data, 100i);\n+        assert_eq!(*data, 100);\n     }\n }"}, {"sha": "db468ba1802a662f374f32325f86be7e193cbb51", "filename": "src/test/run-pass/generic-alias-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fgeneric-alias-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fgeneric-alias-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-alias-unique.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -14,7 +14,7 @@\n fn id<T:Send>(t: T) -> T { return t; }\n \n pub fn main() {\n-    let expected = box 100i;\n+    let expected = box 100;\n     let actual = id::<Box<int>>(expected.clone());\n     println!(\"{}\", *actual);\n     assert_eq!(*expected, *actual);"}, {"sha": "6599aa7412467bb501b14e625267b9648b65d149", "filename": "src/test/run-pass/generic-fn-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fgeneric-fn-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fgeneric-fn-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-fn-unique.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -13,4 +13,4 @@\n \n fn f<T>(x: Box<T>) -> Box<T> { return x; }\n \n-pub fn main() { let x = f(box 3i); println!(\"{}\", *x); }\n+pub fn main() { let x = f(box 3); println!(\"{}\", *x); }"}, {"sha": "eb0546063f7154396245fd1a5735c19732f1e3d2", "filename": "src/test/run-pass/generic-ivec-leak.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fgeneric-ivec-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fgeneric-ivec-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-ivec-leak.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -10,4 +10,4 @@\n \n enum wrapper<T> { wrapped(T), }\n \n-pub fn main() { let _w = wrapper::wrapped(vec!(1i, 2, 3, 4, 5)); }\n+pub fn main() { let _w = wrapper::wrapped(vec!(1, 2, 3, 4, 5)); }"}, {"sha": "4e3c820405263952d4eb897b0a002abd55bd6f4d", "filename": "src/test/run-pass/generic-newtype-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fgeneric-newtype-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fgeneric-newtype-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-newtype-struct.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -11,5 +11,5 @@\n struct S<T>(T);\n \n pub fn main() {\n-    let _s = S(2i);\n+    let _s = S(2);\n }"}, {"sha": "90a6349385dce4d4761acba7b43b974cfeff5ada", "filename": "src/test/run-pass/generic-static-methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fgeneric-static-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fgeneric-static-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-static-methods.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -24,5 +24,5 @@ impl<T> vec_utils<T> for Vec<T> {\n }\n \n pub fn main() {\n-    assert_eq!(vec_utils::map_(&vec!(1i,2i,3i), |&x| x+1), vec!(2i,3i,4i));\n+    assert_eq!(vec_utils::map_(&vec!(1,2,3), |&x| x+1), vec!(2,3,4));\n }"}, {"sha": "24c31ab4ee66f7236f44e615279b6fe1f56ae342", "filename": "src/test/run-pass/generic-tag-local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fgeneric-tag-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fgeneric-tag-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tag-local.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -12,4 +12,4 @@\n \n enum clam<T> { a(T), }\n \n-pub fn main() { let _c = clam::a(3i); }\n+pub fn main() { let _c = clam::a(3); }"}, {"sha": "cd0e344b89c9217570e63563649e92239ed0088c", "filename": "src/test/run-pass/generic-tup.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fgeneric-tup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fgeneric-tup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tup.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -11,7 +11,7 @@\n fn get_third<T>(t: (T, T, T)) -> T { let (_, _, x) = t; return x; }\n \n pub fn main() {\n-    println!(\"{}\", get_third((1i, 2i, 3i)));\n-    assert_eq!(get_third((1i, 2i, 3i)), 3);\n+    println!(\"{}\", get_third((1, 2, 3)));\n+    assert_eq!(get_third((1, 2, 3)), 3);\n     assert_eq!(get_third((5u8, 6u8, 7u8)), 7u8);\n }"}, {"sha": "188106ec107887ad751be3574a317afc526a2556", "filename": "src/test/run-pass/guards.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fguards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fguards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fguards.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -13,14 +13,14 @@ struct Pair { x: int, y: int }\n \n pub fn main() {\n     let a: int =\n-        match 10i { x if x < 7 => { 1i } x if x < 11 => { 2i } 10 => { 3i } _ => { 4i } };\n+        match 10 { x if x < 7 => { 1 } x if x < 11 => { 2 } 10 => { 3 } _ => { 4 } };\n     assert_eq!(a, 2);\n \n     let b: int =\n         match (Pair {x: 10, y: 20}) {\n-          x if x.x < 5 && x.y < 5 => { 1i }\n-          Pair {x: x, y: y} if x == 10 && y == 20 => { 2i }\n-          Pair {x: _x, y: _y} => { 3i }\n+          x if x.x < 5 && x.y < 5 => { 1 }\n+          Pair {x: x, y: y} if x == 10 && y == 20 => { 2 }\n+          Pair {x: _x, y: _y} => { 3 }\n         };\n     assert_eq!(b, 2);\n }"}, {"sha": "3969394a26b93a9daaa6a7c75722b1b268aa7db3", "filename": "src/test/run-pass/hygiene-dodging-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fhygiene-dodging-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fhygiene-dodging-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhygiene-dodging-1.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -14,7 +14,7 @@ mod x {\n \n pub fn main(){\n     // should *not* shadow the module x:\n-    let x = 9i;\n+    let x = 9;\n     // use it to avoid warnings:\n     x+3;\n     assert_eq!(x::g(),14);"}, {"sha": "cca0e5b163c434b17402ed91e538a047f271d678", "filename": "src/test/run-pass/hygienic-labels-in-let.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fhygienic-labels-in-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fhygienic-labels-in-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhygienic-labels-in-let.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -20,19 +20,19 @@ macro_rules! loop_x {\n macro_rules! while_true {\n     ($e: expr) => {\n         // $e shouldn't be able to interact with this 'x\n-        'x: while 1i + 1 == 2 { $e }\n+        'x: while 1 + 1 == 2 { $e }\n     }\n }\n \n macro_rules! run_once {\n     ($e: expr) => {\n         // ditto\n-        'x: for _ in 0i..1 { $e }\n+        'x: for _ in 0..1 { $e }\n     }\n }\n \n pub fn main() {\n-    let mut i = 0i;\n+    let mut i = 0;\n \n     let j: int = {\n         'x: loop {\n@@ -42,35 +42,35 @@ pub fn main() {\n         }\n         i + 1\n     };\n-    assert_eq!(j, 1i);\n+    assert_eq!(j, 1);\n \n     let k: int = {\n-        'x: for _ in 0i..1 {\n+        'x: for _ in 0..1 {\n             // ditto\n             loop_x!(break 'x);\n             i += 1;\n         }\n         i + 1\n     };\n-    assert_eq!(k, 1i);\n+    assert_eq!(k, 1);\n \n     let l: int = {\n-        'x: for _ in 0i..1 {\n+        'x: for _ in 0..1 {\n             // ditto\n             while_true!(break 'x);\n             i += 1;\n         }\n         i + 1\n     };\n-    assert_eq!(l, 1i);\n+    assert_eq!(l, 1);\n \n     let n: int = {\n-        'x: for _ in 0i..1 {\n+        'x: for _ in 0..1 {\n             // ditto\n             run_once!(continue 'x);\n             i += 1;\n         }\n         i + 1\n     };\n-    assert_eq!(n, 1i);\n+    assert_eq!(n, 1);\n }"}, {"sha": "0d8da2a93482f4649bd1ec7c351bd88cf63fba3b", "filename": "src/test/run-pass/hygienic-labels.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fhygienic-labels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fhygienic-labels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhygienic-labels.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -18,19 +18,19 @@ macro_rules! loop_x {\n macro_rules! run_once {\n     ($e: expr) => {\n         // ditto\n-        'x: for _ in 0i..1 { $e }\n+        'x: for _ in 0..1 { $e }\n     }\n }\n \n macro_rules! while_x {\n     ($e: expr) => {\n         // ditto\n-        'x: while 1i + 1 == 2 { $e }\n+        'x: while 1 + 1 == 2 { $e }\n     }\n }\n \n pub fn main() {\n-    'x: for _ in 0i..1 {\n+    'x: for _ in 0..1 {\n         // this 'x should refer to the outer loop, lexically\n         loop_x!(break 'x);\n         panic!(\"break doesn't act hygienically inside for loop\");\n@@ -42,12 +42,12 @@ pub fn main() {\n         panic!(\"break doesn't act hygienically inside infinite loop\");\n     }\n \n-    'x: while 1i + 1 == 2 {\n+    'x: while 1 + 1 == 2 {\n         while_x!(break 'x);\n         panic!(\"break doesn't act hygienically inside infinite while loop\");\n     }\n \n-    'x: for _ in 0i..1 {\n+    'x: for _ in 0..1 {\n         // ditto\n         run_once!(continue 'x);\n         panic!(\"continue doesn't act hygienically inside for loop\");"}, {"sha": "5d97b886e8e5e4988546424ced05bb8569086d15", "filename": "src/test/run-pass/if-let.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fif-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fif-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fif-let.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -9,9 +9,9 @@\n // except according to those terms.\n \n pub fn main() {\n-    let x = Some(3i);\n+    let x = Some(3);\n     if let Some(y) = x {\n-        assert_eq!(y, 3i);\n+        assert_eq!(y, 3);\n     } else {\n         panic!(\"if-let panicked\");\n     }\n@@ -32,9 +32,9 @@ pub fn main() {\n     }\n     assert_eq!(clause, 4u);\n \n-    if 3i > 4 {\n+    if 3 > 4 {\n         panic!(\"bad math\");\n-    } else if let 1 = 2i {\n+    } else if let 1 = 2 {\n         panic!(\"bad pattern match\");\n     }\n \n@@ -44,7 +44,7 @@ pub fn main() {\n         Three(String, int)\n     }\n \n-    let foo = Foo::Three(\"three\".to_string(), 42i);\n+    let foo = Foo::Three(\"three\".to_string(), 42);\n     if let Foo::One = foo {\n         panic!(\"bad pattern match\");\n     } else if let Foo::Two(_x) = foo {"}, {"sha": "0acc70f6b5d8394e425cf920d5a03e6b07445df1", "filename": "src/test/run-pass/ifmt.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fifmt.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -59,10 +59,10 @@ pub fn main() {\n     // At least exercise all the formats\n     t!(format!(\"{}\", true), \"true\");\n     t!(format!(\"{}\", '\u2603'), \"\u2603\");\n-    t!(format!(\"{}\", 10i), \"10\");\n+    t!(format!(\"{}\", 10), \"10\");\n     t!(format!(\"{}\", 10u), \"10\");\n     t!(format!(\"{:?}\", '\u2603'), \"'\\\\u{2603}'\");\n-    t!(format!(\"{:?}\", 10i), \"10\");\n+    t!(format!(\"{:?}\", 10), \"10\");\n     t!(format!(\"{:?}\", 10u), \"10\");\n     t!(format!(\"{:?}\", \"true\"), \"\\\"true\\\"\");\n     t!(format!(\"{:?}\", \"foo\\nbar\"), \"\\\"foo\\\\nbar\\\"\");\n@@ -76,16 +76,16 @@ pub fn main() {\n     t!(format!(\"{:x}\", A), \"aloha\");\n     t!(format!(\"{:X}\", B), \"adios\");\n     t!(format!(\"foo {} \u2603\u2603\u2603\u2603\u2603\u2603\", \"bar\"), \"foo bar \u2603\u2603\u2603\u2603\u2603\u2603\");\n-    t!(format!(\"{1} {0}\", 0i, 1i), \"1 0\");\n-    t!(format!(\"{foo} {bar}\", foo=0i, bar=1is), \"0 1\");\n+    t!(format!(\"{1} {0}\", 0, 1), \"1 0\");\n+    t!(format!(\"{foo} {bar}\", foo=0, bar=1is), \"0 1\");\n     t!(format!(\"{foo} {1} {bar} {0}\", 0is, 1is, foo=2is, bar=3is), \"2 1 3 0\");\n     t!(format!(\"{} {0}\", \"a\"), \"a a\");\n-    t!(format!(\"{foo_bar}\", foo_bar=1i), \"1\");\n-    t!(format!(\"{}\", 5i + 5i), \"10\");\n+    t!(format!(\"{foo_bar}\", foo_bar=1), \"1\");\n+    t!(format!(\"{}\", 5 + 5), \"10\");\n     t!(format!(\"{:#4}\", C), \"\u2603123\");\n \n     // FIXME(#20676)\n-    // let a: &fmt::Debug = &1i;\n+    // let a: &fmt::Debug = &1;\n     // t!(format!(\"{:?}\", a), \"1\");\n \n \n@@ -146,7 +146,7 @@ pub fn main() {\n     test_order();\n \n     // make sure that format! doesn't move out of local variables\n-    let a = box 3i;\n+    let a = box 3;\n     format!(\"{}\", a);\n     format!(\"{}\", a);\n \n@@ -169,10 +169,10 @@ pub fn main() {\n fn test_write() {\n     use std::fmt::Writer;\n     let mut buf = String::new();\n-    write!(&mut buf, \"{}\", 3i);\n+    write!(&mut buf, \"{}\", 3);\n     {\n         let w = &mut buf;\n-        write!(w, \"{foo}\", foo=4i);\n+        write!(w, \"{foo}\", foo=4);\n         write!(w, \"{}\", \"hello\");\n         writeln!(w, \"{}\", \"line\");\n         writeln!(w, \"{foo}\", foo=\"bar\");\n@@ -198,9 +198,9 @@ fn test_format_args() {\n     let mut buf = String::new();\n     {\n         let w = &mut buf;\n-        write!(w, \"{}\", format_args!(\"{}\", 1i));\n+        write!(w, \"{}\", format_args!(\"{}\", 1));\n         write!(w, \"{}\", format_args!(\"test\"));\n-        write!(w, \"{}\", format_args!(\"{test}\", test=3i));\n+        write!(w, \"{}\", format_args!(\"{test}\", test=3));\n     }\n     let s = buf;\n     t!(s, \"1test3\");"}, {"sha": "65fc24ae74630d87def6c7cc88f3064b6d4c8c29", "filename": "src/test/run-pass/ignore-all-the-things.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fignore-all-the-things.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fignore-all-the-things.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fignore-all-the-things.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -23,28 +23,28 @@ pub fn main() {\n     //let (a, b, ..) = (5, 5, 5, 5);\n     //let (.., c, d) = (5, 5, 5, 5);\n     let Bar{b: b, ..} = Bar{a: 5, b: 5, c: 5, d: 5};\n-    match [5i, 5, 5, 5] {\n+    match [5, 5, 5, 5] {\n         [..] => { }\n     }\n-    match [5i, 5, 5, 5] {\n+    match [5, 5, 5, 5] {\n         [a, ..] => { }\n     }\n-    match [5i, 5, 5, 5] {\n+    match [5, 5, 5, 5] {\n         [.., b] => { }\n     }\n-    match [5i, 5, 5, 5] {\n+    match [5, 5, 5, 5] {\n         [a, .., b] => { }\n     }\n-    match [5i, 5, 5] {\n+    match [5, 5, 5] {\n         [..] => { }\n     }\n-    match [5i, 5, 5] {\n+    match [5, 5, 5] {\n         [a, ..] => { }\n     }\n-    match [5i, 5, 5] {\n+    match [5, 5, 5] {\n         [.., a] => { }\n     }\n-    match [5i, 5, 5] {\n+    match [5, 5, 5] {\n         [a, .., b] => { }\n     }\n }"}, {"sha": "f7874cc56fc77ecd81ccdb0b1a442d9f1c38f1c3", "filename": "src/test/run-pass/import-glob-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fimport-glob-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fimport-glob-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-glob-crate.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -14,7 +14,7 @@ use std::mem::*;\n \n pub fn main() {\n     assert_eq!(size_of::<u8>(), 1);\n-    let (mut x, mut y) = (1i, 2i);\n+    let (mut x, mut y) = (1, 2);\n     swap(&mut x, &mut y);\n     assert_eq!(x, 2);\n     assert_eq!(y, 1);"}, {"sha": "4567651e892f5c14cd9fbb532cf34806871e8165", "filename": "src/test/run-pass/import-in-block.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fimport-in-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fimport-in-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-in-block.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -10,11 +10,11 @@\n \n pub fn main() {\n     use std::mem::replace;\n-    let mut x = 5i;\n+    let mut x = 5;\n     replace(&mut x, 6);\n     {\n         use std::mem::*;\n-        let mut y = 6i;\n+        let mut y = 6;\n         swap(&mut x, &mut y);\n     }\n }"}, {"sha": "44f6b6140fbffaeca2bdd1617d32b65c84280c32", "filename": "src/test/run-pass/import4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fimport4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fimport4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport4.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -16,4 +16,4 @@ mod zed {\n     pub fn bar() { println!(\"bar\"); }\n }\n \n-pub fn main() { let _zed = 42i; bar(); }\n+pub fn main() { let _zed = 42; bar(); }"}, {"sha": "be561dfffa6f91a34bd539a29999c8024aabcaae", "filename": "src/test/run-pass/inferred-suffix-in-pattern-range.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Finferred-suffix-in-pattern-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Finferred-suffix-in-pattern-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finferred-suffix-in-pattern-range.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -9,14 +9,14 @@\n // except according to those terms.\n \n pub fn main() {\n-    let x = 2i;\n+    let x = 2;\n     let x_message = match x {\n       0 ... 1    => { \"not many\".to_string() }\n       _          => { \"lots\".to_string() }\n     };\n     assert_eq!(x_message, \"lots\".to_string());\n \n-    let y = 2i;\n+    let y = 2;\n     let y_message = match y {\n       0 ... 1    => { \"not many\".to_string() }\n       _          => { \"lots\".to_string() }"}, {"sha": "ee793359fbc89b522786b7c281d93987f0b35b24", "filename": "src/test/run-pass/init-res-into-things.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -37,7 +37,7 @@ fn r(i: &Cell<int>) -> r {\n }\n \n fn test_rec() {\n-    let i = &Cell::new(0i);\n+    let i = &Cell::new(0);\n     {\n         let _a = BoxR {x: r(i)};\n     }\n@@ -49,31 +49,31 @@ fn test_tag() {\n         t0(r<'a>),\n     }\n \n-    let i = &Cell::new(0i);\n+    let i = &Cell::new(0);\n     {\n         let _a = t::t0(r(i));\n     }\n     assert_eq!(i.get(), 1);\n }\n \n fn test_tup() {\n-    let i = &Cell::new(0i);\n+    let i = &Cell::new(0);\n     {\n-        let _a = (r(i), 0i);\n+        let _a = (r(i), 0);\n     }\n     assert_eq!(i.get(), 1);\n }\n \n fn test_unique() {\n-    let i = &Cell::new(0i);\n+    let i = &Cell::new(0);\n     {\n         let _a = box r(i);\n     }\n     assert_eq!(i.get(), 1);\n }\n \n fn test_unique_rec() {\n-    let i = &Cell::new(0i);\n+    let i = &Cell::new(0);\n     {\n         let _a = box BoxR {\n             x: r(i)"}, {"sha": "d3f62f9d04ad030555d7e393432d5c152cd3976c", "filename": "src/test/run-pass/intrinsic-atomics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fintrinsic-atomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fintrinsic-atomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-atomics.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -40,7 +40,7 @@ mod rusti {\n \n pub fn main() {\n     unsafe {\n-        let mut x = box 1i;\n+        let mut x = box 1;\n \n         assert_eq!(rusti::atomic_load(&*x), 1);\n         *x = 5;"}, {"sha": "0daf661c2f6c5bd04f882d018065e1774893f666", "filename": "src/test/run-pass/intrinsic-move-val.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fintrinsic-move-val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fintrinsic-move-val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-move-val.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -23,7 +23,7 @@ mod rusti {\n \n pub fn main() {\n     unsafe {\n-        let x = box 1i;\n+        let x = box 1;\n         let mut y = rusti::init();\n         let mut z: *const uint = transmute(&x);\n         rusti::move_val_init(&mut y, x);"}, {"sha": "79a0a54f834ad32de4400931221e008182608140", "filename": "src/test/run-pass/issue-10626.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-10626.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-10626.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-10626.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -19,10 +19,10 @@ pub fn main () {\n     let args = os::args();\n     let args = args.as_slice();\n     if args.len() > 1 && args[1].as_slice() == \"child\" {\n-        for _ in 0i..1000i {\n+        for _ in 0..1000 {\n             println!(\"hello?\");\n         }\n-        for _ in 0i..1000i {\n+        for _ in 0..1000 {\n             println!(\"hello?\");\n         }\n         return;"}, {"sha": "bc77b4c534311f0115a3fe3966238d206d4882d5", "filename": "src/test/run-pass/issue-10638.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-10638.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-10638.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-10638.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -13,6 +13,6 @@ pub fn main() {\n     ////////////////// still not a doc comment\n     /////**** nope, me neither */\n     /*** And neither am I! */\n-    5i;\n+    5;\n     /*****! certainly not I */\n }"}, {"sha": "d7c6c1b1bb2c2b65758865026a740e177059caee", "filename": "src/test/run-pass/issue-11205.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-11205.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-11205.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11205.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -22,45 +22,45 @@ fn bar(_: [Box<Foo>; 2]) {}\n fn bars(_: &[Box<Foo>]) {}\n \n fn main() {\n-    let x: [&Foo; 2] = [&1i, &2i];\n+    let x: [&Foo; 2] = [&1, &2];\n     foo(x);\n-    foo([&1i, &2i]);\n+    foo([&1, &2]);\n \n-    let r = &1i;\n+    let r = &1;\n     let x: [&Foo; 2] = [r; 2];\n     foo(x);\n-    foo([&1i; 2]);\n+    foo([&1; 2]);\n \n-    let x: &[&Foo] = &[&1i, &2i];\n+    let x: &[&Foo] = &[&1, &2];\n     foos(x);\n-    foos(&[&1i, &2i]);\n+    foos(&[&1, &2]);\n \n-    let x: &[&Foo] = &[&1i, &2i];\n-    let r = &1i;\n+    let x: &[&Foo] = &[&1, &2];\n+    let r = &1;\n     foog(x, &[r]);\n \n-    let x: [Box<Foo>; 2] = [box 1i, box 2i];\n+    let x: [Box<Foo>; 2] = [box 1, box 2];\n     bar(x);\n-    bar([box 1i, box 2i]);\n+    bar([box 1, box 2]);\n \n-    let x: &[Box<Foo>] = &[box 1i, box 2i];\n+    let x: &[Box<Foo>] = &[box 1, box 2];\n     bars(x);\n-    bars(&[box 1i, box 2i]);\n+    bars(&[box 1, box 2]);\n \n-    let x: &[Box<Foo>] = &[box 1i, box 2i];\n-    foog(x, &[box 1i]);\n+    let x: &[Box<Foo>] = &[box 1, box 2];\n+    foog(x, &[box 1]);\n \n     struct T<'a> {\n         t: [&'a (Foo+'a); 2]\n     }\n     let _n = T {\n-        t: [&1i, &2i]\n+        t: [&1, &2]\n     };\n-    let r = &1i;\n+    let r = &1;\n     let _n = T {\n         t: [r; 2]\n     };\n-    let x: [&Foo; 2] = [&1i, &2i];\n+    let x: [&Foo; 2] = [&1, &2];\n     let _n = T {\n         t: x\n     };\n@@ -69,14 +69,14 @@ fn main() {\n         t: &'b [&'b (Foo+'b)]\n     }\n     let _n = F {\n-        t: &[&1i, &2i]\n+        t: &[&1, &2]\n     };\n-    let r = &1i;\n+    let r = &1;\n     let r: [&Foo; 2] = [r; 2];\n     let _n = F {\n         t: &r\n     };\n-    let x: [&Foo; 2] = [&1i, &2i];\n+    let x: [&Foo; 2] = [&1, &2];\n     let _n = F {\n         t: &x\n     };\n@@ -85,9 +85,9 @@ fn main() {\n         t: &'a [Box<Foo+'static>]\n     }\n     let _n = M {\n-        t: &[box 1i, box 2i]\n+        t: &[box 1, box 2]\n     };\n-    let x: [Box<Foo>; 2] = [box 1i, box 2i];\n+    let x: [Box<Foo>; 2] = [box 1, box 2];\n     let _n = M {\n         t: &x\n     };"}, {"sha": "a45d129ade2f9fec24923885d2b237f77ce7a7ee", "filename": "src/test/run-pass/issue-11225-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-11225-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-11225-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11225-1.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -13,5 +13,5 @@\n extern crate \"issue-11225-1\" as foo;\n \n pub fn main() {\n-    foo::foo(1i);\n+    foo::foo(1);\n }"}, {"sha": "f07957b30ec9fe4afb9db680109df052bdbf9c62", "filename": "src/test/run-pass/issue-11225-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-11225-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-11225-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11225-2.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -13,5 +13,5 @@\n extern crate \"issue-11225-2\" as foo;\n \n pub fn main() {\n-    foo::foo(1i);\n+    foo::foo(1);\n }"}, {"sha": "00613f35f17bb71a1257021477671d01f7ba02cc", "filename": "src/test/run-pass/issue-11958.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-11958.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-11958.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11958.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -19,6 +19,6 @@\n use std::thunk::Thunk;\n \n pub fn main() {\n-    let mut x = 1i;\n+    let mut x = 1i32;\n     let _thunk = Thunk::new(move|| { x = 2; });\n }"}, {"sha": "7d5bd9d6a74db57c3614deece86a932dab8f0bbf", "filename": "src/test/run-pass/issue-1257.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-1257.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-1257.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1257.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -10,7 +10,7 @@\n \n pub fn main () {\n   let mut line = \"\".to_string();\n-  let mut i = 0i;\n+  let mut i = 0;\n   while line != \"exit\".to_string() {\n     line = if i == 9 { \"exit\".to_string() } else { \"notexit\".to_string() };\n     i += 1;"}, {"sha": "4009d17139ddacd128cc772c46b01a4dfe8b33e5", "filename": "src/test/run-pass/issue-12582.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-12582.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-12582.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-12582.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -11,18 +11,18 @@\n // ignore-lexer-test FIXME #15877\n \n pub fn main() {\n-    let x = 1i;\n-    let y = 2i;\n+    let x = 1;\n+    let y = 2;\n \n-    assert_eq!(3i, match (x, y) {\n+    assert_eq!(3, match (x, y) {\n         (1, 1) => 1,\n         (2, 2) => 2,\n         (1...2, 2) => 3,\n         _ => 4,\n     });\n \n     // nested tuple\n-    assert_eq!(3i, match ((x, y),) {\n+    assert_eq!(3, match ((x, y),) {\n         ((1, 1),) => 1,\n         ((2, 2),) => 2,\n         ((1...2, 2),) => 3,"}, {"sha": "2f7ba315aa1f6ae073f1e5d8f0c3f684070131e4", "filename": "src/test/run-pass/issue-12744.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-12744.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-12744.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-12744.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -12,6 +12,6 @@\n #![feature(box_syntax)]\n \n fn main() {\n-    fn test() -> Box<std::any::Any + 'static> { box 1i }\n+    fn test() -> Box<std::any::Any + 'static> { box 1 }\n     println!(\"{:?}\", test())\n }"}, {"sha": "3075bae44fe6f4c9de9ccb2191339c29b9a2d54c", "filename": "src/test/run-pass/issue-12909.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-12909.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-12909.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-12909.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -15,7 +15,7 @@ fn copy<T: Copy>(&x: &T) -> T {\n }\n \n fn main() {\n-    let arr = [(1i, 1u), (2, 2), (3, 3)];\n+    let arr = [(1, 1u), (2, 2), (3, 3)];\n \n     let v1: Vec<&_> = arr.iter().collect();\n     let v2: Vec<_> = arr.iter().map(copy).collect();"}, {"sha": "649cf63e84a08a4c3739e3e999c4382bae45cf69", "filename": "src/test/run-pass/issue-13027.rs", "status": "modified", "additions": 42, "deletions": 42, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-13027.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-13027.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13027.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -29,143 +29,143 @@ pub fn main() {\n }\n \n fn lit_shadow_range() {\n-    assert_eq!(2i, match 1i {\n-        1 if false => 1i,\n+    assert_eq!(2, match 1 {\n+        1 if false => 1,\n         1...2 => 2,\n         _ => 3\n     });\n \n-    let x = 0i;\n-    assert_eq!(2i, match x+1 {\n-        0 => 0i,\n+    let x = 0;\n+    assert_eq!(2, match x+1 {\n+        0 => 0,\n         1 if false => 1,\n         1...2 => 2,\n         _ => 3\n     });\n \n-    assert_eq!(2i, match val() {\n-        1 if false => 1i,\n+    assert_eq!(2, match val() {\n+        1 if false => 1,\n         1...2 => 2,\n         _ => 3\n     });\n \n-    assert_eq!(2i, match CONST {\n-        0 => 0i,\n+    assert_eq!(2, match CONST {\n+        0 => 0,\n         1 if false => 1,\n         1...2 => 2,\n         _ => 3\n     });\n \n     // value is out of the range of second arm, should match wildcard pattern\n-    assert_eq!(3i, match 3i {\n-        1 if false => 1i,\n+    assert_eq!(3, match 3 {\n+        1 if false => 1,\n         1...2 => 2,\n         _ => 3\n     });\n }\n \n fn range_shadow_lit() {\n-    assert_eq!(2i, match 1i {\n-        1...2 if false => 1i,\n+    assert_eq!(2, match 1 {\n+        1...2 if false => 1,\n         1 => 2,\n         _ => 3\n     });\n \n-    let x = 0i;\n-    assert_eq!(2i, match x+1 {\n-        0 => 0i,\n+    let x = 0;\n+    assert_eq!(2, match x+1 {\n+        0 => 0,\n         1...2 if false => 1,\n         1 => 2,\n         _ => 3\n     });\n \n-    assert_eq!(2i, match val() {\n-        1...2 if false => 1i,\n+    assert_eq!(2, match val() {\n+        1...2 if false => 1,\n         1 => 2,\n         _ => 3\n     });\n \n-    assert_eq!(2i, match CONST {\n-        0 => 0i,\n+    assert_eq!(2, match CONST {\n+        0 => 0,\n         1...2 if false => 1,\n         1 => 2,\n         _ => 3\n     });\n \n     // ditto\n-    assert_eq!(3i, match 3i {\n-        1...2 if false => 1i,\n+    assert_eq!(3, match 3 {\n+        1...2 if false => 1,\n         1 => 2,\n         _ => 3\n     });\n }\n \n fn range_shadow_range() {\n-    assert_eq!(2i, match 1i {\n-        0...2 if false => 1i,\n+    assert_eq!(2, match 1 {\n+        0...2 if false => 1,\n         1...3 => 2,\n         _ => 3,\n     });\n \n-    let x = 0i;\n-    assert_eq!(2i, match x+1 {\n+    let x = 0;\n+    assert_eq!(2, match x+1 {\n         100 => 0,\n         0...2 if false => 1,\n         1...3 => 2,\n         _ => 3,\n     });\n \n-    assert_eq!(2i, match val() {\n+    assert_eq!(2, match val() {\n         0...2 if false => 1,\n         1...3 => 2,\n         _ => 3,\n     });\n \n-    assert_eq!(2i, match CONST {\n+    assert_eq!(2, match CONST {\n         100 => 0,\n         0...2 if false => 1,\n         1...3 => 2,\n         _ => 3,\n     });\n \n     // ditto\n-    assert_eq!(3i, match 5i {\n-        0...2 if false => 1i,\n+    assert_eq!(3, match 5 {\n+        0...2 if false => 1,\n         1...3 => 2,\n         _ => 3,\n     });\n }\n \n fn multi_pats_shadow_lit() {\n-    assert_eq!(2i, match 1i {\n-        100 => 0i,\n+    assert_eq!(2, match 1 {\n+        100 => 0,\n         0 | 1...10 if false => 1,\n         1 => 2,\n         _ => 3,\n     });\n }\n \n fn multi_pats_shadow_range() {\n-    assert_eq!(2i, match 1i {\n-        100 => 0i,\n+    assert_eq!(2, match 1 {\n+        100 => 0,\n         0 | 1...10 if false => 1,\n         1...3 => 2,\n         _ => 3,\n     });\n }\n \n fn lit_shadow_multi_pats() {\n-    assert_eq!(2i, match 1i {\n-        100 => 0i,\n+    assert_eq!(2, match 1 {\n+        100 => 0,\n         1 if false => 1,\n         0 | 1...10 => 2,\n         _ => 3,\n     });\n }\n \n fn range_shadow_multi_pats() {\n-    assert_eq!(2i, match 1i {\n-        100 => 0i,\n+    assert_eq!(2, match 1 {\n+        100 => 0,\n         1...3 if false => 1,\n         0 | 1...10 => 2,\n         _ => 3,\n@@ -180,9 +180,9 @@ fn misc() {\n     // which is a rare combination of vector patterns, multiple wild-card\n     // patterns and guard functions.\n     let r = match [Foo::Bar(0, false)].as_slice() {\n-        [Foo::Bar(_, pred)] if pred => 1i,\n-        [Foo::Bar(_, pred)] if !pred => 2i,\n-        _ => 0i,\n+        [Foo::Bar(_, pred)] if pred => 1,\n+        [Foo::Bar(_, pred)] if !pred => 2,\n+        _ => 0,\n     };\n-    assert_eq!(2i, r);\n+    assert_eq!(2, r);\n }"}, {"sha": "5025d4034680eee9ff35dc6203a9f869534a1716", "filename": "src/test/run-pass/issue-13494.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-13494.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-13494.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13494.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -24,7 +24,7 @@ fn main() {\n     let (tx, rx) = channel();\n     let _t = Thread::spawn(move|| { helper(rx) });\n     let (snd, rcv) = channel::<int>();\n-    for _ in 1i..100000i {\n+    for _ in 1..100000 {\n         snd.send(1i).unwrap();\n         let (tx2, rx2) = channel();\n         tx.send(tx2).unwrap();"}, {"sha": "960884c4aa501711ef55d93ca7c127df50f23ee7", "filename": "src/test/run-pass/issue-13867.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-13867.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-13867.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13867.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -18,39 +18,39 @@ enum Foo {\n \n fn main() {\n     let r = match (Foo::FooNullary, 'a') {\n-        (Foo::FooUint(..), 'a'...'z') => 1i,\n-        (Foo::FooNullary, 'x') => 2i,\n+        (Foo::FooUint(..), 'a'...'z') => 1,\n+        (Foo::FooNullary, 'x') => 2,\n         _ => 0\n     };\n     assert_eq!(r, 0);\n \n     let r = match (Foo::FooUint(0), 'a') {\n-        (Foo::FooUint(1), 'a'...'z') => 1i,\n-        (Foo::FooUint(..), 'x') => 2i,\n-        (Foo::FooNullary, 'a') => 3i,\n+        (Foo::FooUint(1), 'a'...'z') => 1,\n+        (Foo::FooUint(..), 'x') => 2,\n+        (Foo::FooNullary, 'a') => 3,\n         _ => 0\n     };\n     assert_eq!(r, 0);\n \n     let r = match ('a', Foo::FooUint(0)) {\n-        ('a'...'z', Foo::FooUint(1)) => 1i,\n-        ('x', Foo::FooUint(..)) => 2i,\n-        ('a', Foo::FooNullary) => 3i,\n+        ('a'...'z', Foo::FooUint(1)) => 1,\n+        ('x', Foo::FooUint(..)) => 2,\n+        ('a', Foo::FooNullary) => 3,\n         _ => 0\n     };\n     assert_eq!(r, 0);\n \n     let r = match ('a', 'a') {\n-        ('a'...'z', 'b') => 1i,\n-        ('x', 'a'...'z') => 2i,\n+        ('a'...'z', 'b') => 1,\n+        ('x', 'a'...'z') => 2,\n         _ => 0\n     };\n     assert_eq!(r, 0);\n \n     let r = match ('a', 'a') {\n-        ('a'...'z', 'b') => 1i,\n-        ('x', 'a'...'z') => 2i,\n-        ('a', 'a') => 3i,\n+        ('a'...'z', 'b') => 1,\n+        ('x', 'a'...'z') => 2,\n+        ('a', 'a') => 3,\n         _ => 0\n     };\n     assert_eq!(r, 3);"}, {"sha": "0e4b4a2c9cf326ca260c26a6189bc7520c1cf06b", "filename": "src/test/run-pass/issue-14308.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-14308.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-14308.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14308.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -13,20 +13,20 @@ struct B;\n \n fn main() {\n     let x = match A(3) {\n-        A(..) => 1i\n+        A(..) => 1\n     };\n     assert_eq!(x, 1);\n     let x = match A(4) {\n-        A(1) => 1i,\n-        A(..) => 2i\n+        A(1) => 1,\n+        A(..) => 2\n     };\n     assert_eq!(x, 2);\n \n     // This next test uses a (..) wildcard match on a nullary struct.\n     // There's no particularly good reason to support this, but it's currently allowed,\n     // and this makes sure it doesn't ICE or break LLVM.\n     let x = match B {\n-        B(..) => 3i\n+        B(..) => 3\n     };\n     assert_eq!(x, 3);\n }"}, {"sha": "e7516639db0c39dd5dd1b3c3aabb22ccad59ec8d", "filename": "src/test/run-pass/issue-1460.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-1460.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-1460.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1460.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -10,5 +10,5 @@\n \n \n pub fn main() {\n-    {|&: i| if 1i == i { }};\n+    {|&: i| if 1 == i { }};\n }"}, {"sha": "c322346c2a605dc0430aa3f9280bc67fdff131e6", "filename": "src/test/run-pass/issue-14865.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-14865.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-14865.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14865.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -15,14 +15,14 @@ enum X {\n \n fn main() {\n     let x = match X::Foo(42) {\n-        X::Foo(..) => 1i,\n+        X::Foo(..) => 1,\n         _ if true => 0,\n         X::Bar(..) => panic!(\"Oh dear\")\n     };\n     assert_eq!(x, 1);\n \n     let x = match X::Foo(42) {\n-        _ if true => 0i,\n+        _ if true => 0,\n         X::Foo(..) => 1,\n         X::Bar(..) => panic!(\"Oh dear\")\n     };"}, {"sha": "9752b01e52bc1416ab0ea3cbfa23b626b834c7a3", "filename": "src/test/run-pass/issue-15080.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-15080.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-15080.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15080.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    let mut x: &[_] = &[1i, 2, 3, 4];\n+    let mut x: &[_] = &[1, 2, 3, 4];\n \n     let mut result = vec!();\n     loop {"}, {"sha": "49e5b14aff8058c5821e8268a29db5cb6720b9e9", "filename": "src/test/run-pass/issue-15221.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-15221.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-15221.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15221.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -17,7 +17,7 @@ macro_rules! outer {\n }\n \n fn main() {\n-    let outer!(g1) = 13i;\n+    let outer!(g1) = 13;\n     g1;\n }\n "}, {"sha": "7d53b6729516da2dbbcb08dfde8b9024b058cc76", "filename": "src/test/run-pass/issue-15571.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-15571.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-15571.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15571.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -12,7 +12,7 @@\n #![feature(box_syntax)]\n \n fn match_on_local() {\n-    let mut foo = Some(box 5i);\n+    let mut foo = Some(box 5);\n     match foo {\n         None => {},\n         Some(x) => {\n@@ -22,7 +22,7 @@ fn match_on_local() {\n     println!(\"'{}'\", foo.unwrap());\n }\n \n-fn match_on_arg(mut foo: Option<Box<int>>) {\n+fn match_on_arg(mut foo: Option<Box<i32>>) {\n     match foo {\n         None => {}\n         Some(x) => {\n@@ -33,7 +33,7 @@ fn match_on_arg(mut foo: Option<Box<int>>) {\n }\n \n fn match_on_binding() {\n-    match Some(box 7i) {\n+    match Some(box 7) {\n         mut foo => {\n             match foo {\n                 None => {},\n@@ -47,7 +47,7 @@ fn match_on_binding() {\n }\n \n fn match_on_upvar() {\n-    let mut foo = Some(box 8i);\n+    let mut foo = Some(box 8i32);\n     let f = move|:| {\n         match foo {\n             None => {},\n@@ -62,7 +62,7 @@ fn match_on_upvar() {\n \n fn main() {\n     match_on_local();\n-    match_on_arg(Some(box 6i));\n+    match_on_arg(Some(box 6));\n     match_on_binding();\n     match_on_upvar();\n }"}, {"sha": "7bfd8e0ab718942444aef42f8adf76889799e924", "filename": "src/test/run-pass/issue-15763.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-15763.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-15763.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15763.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -87,12 +87,12 @@ fn main() {\n     assert_eq!(cc().unwrap(), 3);\n     assert_eq!(dd().unwrap(), 3);\n \n-    let i = box 32i as Box<A>;\n+    let i = box 32 as Box<A>;\n     assert_eq!(i.aaa(), 3);\n-    let i = box 32i as Box<A>;\n+    let i = box 32 as Box<A>;\n     assert_eq!(i.bbb(), 3);\n-    let i = box 32i as Box<A>;\n+    let i = box 32 as Box<A>;\n     assert_eq!(i.ccc().unwrap(), 3);\n-    let i = box 32i as Box<A>;\n+    let i = box 32 as Box<A>;\n     assert_eq!(i.ddd().unwrap(), 3);\n }"}, {"sha": "88b250af1c09636a8a07ac1f2150de2bda0fb1c5", "filename": "src/test/run-pass/issue-15924.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-15924.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-15924.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15924.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -28,5 +28,5 @@ impl<T: Encodable> Drop for Foo<T> {\n }\n \n fn main() {\n-    let _ = Foo { v: 10i };\n+    let _ = Foo { v: 10 };\n }"}, {"sha": "0b58df56b6f767bc2a38201c14f15df47970365c", "filename": "src/test/run-pass/issue-16648.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-16648.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-16648.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16648.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -9,12 +9,12 @@\n // except according to those terms.\n \n fn main() {\n-    let x: (int, &[int]) = (2i, &[1i, 2i]);\n+    let x: (int, &[int]) = (2, &[1, 2]);\n     assert_eq!(match x {\n         (0, [_, _]) => 0,\n         (1, _) => 1,\n         (2, [_, _]) => 2,\n         (2, _) => 3,\n         _ => 4\n-    }, 2i);\n+    }, 2);\n }"}, {"sha": "d426f82f89fc96fdce9c20f6888520c23e251291", "filename": "src/test/run-pass/issue-16774.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-16774.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-16774.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16774.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -45,7 +45,7 @@ impl DerefMut for X {\n \n fn main() {\n     {\n-        let mut test = X(box 5i);\n+        let mut test = X(box 5);\n         {\n             let mut change = |&mut:| { *test = 10 };\n             change();"}, {"sha": "d367e0e908e32565ae186dc55d9ebefb69511e54", "filename": "src/test/run-pass/issue-17074.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-17074.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-17074.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17074.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -17,6 +17,6 @@ fn main() {\n     assert_eq!(match 1 {\n         X => unreachable!(),\n         Y => unreachable!(),\n-        _ => 1i\n+        _ => 1\n     }, 1);\n }"}, {"sha": "9af4d30c4f640739d62a48b834b7bf3aea7f5404", "filename": "src/test/run-pass/issue-19244.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-19244.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-19244.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19244.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -13,8 +13,8 @@ const STRUCT: MyStruct = MyStruct { field: 42 };\n const TUP: (uint,) = (43,);\n \n fn main() {\n-    let a = [0i; STRUCT.field];\n-    let b = [0i; TUP.0];\n+    let a = [0; STRUCT.field];\n+    let b = [0; TUP.0];\n \n     assert!(a.len() == 42);\n     assert!(b.len() == 43);"}, {"sha": "ff657376ecc1f848e51ee8b79f9ad3deacce6de0", "filename": "src/test/run-pass/issue-19358.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-19358.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-19358.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19358.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -23,7 +23,7 @@ struct Bar<T> where T: Trait {\n impl Trait for int {}\n \n fn main() {\n-    let a = Foo { foo: 12i };\n-    let b = Bar { bar: 12i };\n+    let a = Foo { foo: 12 };\n+    let b = Bar { bar: 12 };\n     println!(\"{:?} {:?}\", a, b);\n }"}, {"sha": "d5bb6ebb7de1fa6b13b1ec00379a087f00687362", "filename": "src/test/run-pass/issue-19367.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-19367.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-19367.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19367.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -16,7 +16,7 @@ struct S {\n // on field of struct or tuple which we reassign in the match body.\n \n fn main() {\n-    let mut a = (0i, Some(\"right\".to_string()));\n+    let mut a = (0, Some(\"right\".to_string()));\n     let b = match a.1 {\n         Some(v) => {\n             a.1 = Some(\"wrong\".to_string());"}, {"sha": "c2f74a9d65300e2a7d74bed3ba4b3dcba21d43cd", "filename": "src/test/run-pass/issue-2216.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-2216.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-2216.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2216.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -9,12 +9,12 @@\n // except according to those terms.\n \n pub fn main() {\n-    let mut x = 0i;\n+    let mut x = 0;\n \n     'foo: loop {\n         'bar: loop {\n             'quux: loop {\n-                if 1i == 2 {\n+                if 1 == 2 {\n                     break 'foo;\n                 }\n                 else {"}, {"sha": "b8136323df66400dc6a230f23a5dcb097b34c759", "filename": "src/test/run-pass/issue-2383.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-2383.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-2383.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2383.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -14,5 +14,5 @@ use std::collections::RingBuf;\n \n pub fn main() {\n     let mut q = RingBuf::new();\n-    q.push_front(10i);\n+    q.push_front(10);\n }"}, {"sha": "7ed26428be04e46898aadde8037572f612c2cb6d", "filename": "src/test/run-pass/issue-2428.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-2428.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-2428.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2428.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub fn main() {\n-    let _foo = 100i;\n+    let _foo = 100;\n     const quux: int = 5;\n \n     enum Stuff {"}, {"sha": "80e9ca470251775107a4ab4c03961df14ae64c86", "filename": "src/test/run-pass/issue-2633-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-2633-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-2633-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2633-2.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -17,6 +17,6 @@ fn a_val(x: Box<int>, y: Box<int>) -> int {\n }\n \n pub fn main() {\n-    let z = box 22i;\n+    let z = box 22;\n     a_val(z.clone(), z.clone());\n }"}, {"sha": "7ca439a1a19dfa5861d5a90334c41df77e42f824", "filename": "src/test/run-pass/issue-2734.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-2734.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-2734.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2734.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -23,5 +23,5 @@ fn deadcode() {\n }\n \n pub fn main() {\n-    let _ = perform_hax(box 42i);\n+    let _ = perform_hax(box 42);\n }"}, {"sha": "962359537bf2917e492053b9d9dcdf480f8be14a", "filename": "src/test/run-pass/issue-2735.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-2735.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-2735.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2735.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -23,5 +23,5 @@ fn deadcode() {\n }\n \n pub fn main() {\n-    perform_hax(box 42i);\n+    perform_hax(box 42);\n }"}, {"sha": "31599d0caadeeee981557c3a874df23db7a1db0f", "filename": "src/test/run-pass/issue-2935.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-2935.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-2935.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2935.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -24,9 +24,9 @@ impl it for t {\n }\n \n pub fn main() {\n-  //    let x = ({a: 4i} as it);\n-  //   let y = box ({a: 4i});\n-  //    let z = box ({a: 4i} as it);\n+  //    let x = ({a: 4} as it);\n+  //   let y = box ({a: 4});\n+  //    let z = box ({a: 4} as it);\n   //    let z = box ({a: true} as it);\n     let z = box() (box true as Box<it>);\n     //  x.f();"}, {"sha": "c4c2c2b7da8785a92d951e6e73a696150b504b0b", "filename": "src/test/run-pass/issue-3091.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-3091.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-3091.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3091.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub fn main() {\n-    let x = 1i;\n-    let y = 1i;\n+    let x = 1;\n+    let y = 1;\n     assert_eq!(&x, &y);\n }"}, {"sha": "28c9bf1e83a8dae47053af761d4cd3bd35710974", "filename": "src/test/run-pass/issue-3211.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-3211.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-3211.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3211.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n pub fn main() {\n-    let mut x = 0i;\n-    for _ in 0i..4096 { x += 1; }\n+    let mut x = 0;\n+    for _ in 0..4096 { x += 1; }\n     assert_eq!(x, 4096);\n     println!(\"x = {}\", x);\n }"}, {"sha": "c8d6e69801fa13094a05b57347bcf9ab35c8bd9a", "filename": "src/test/run-pass/issue-3290.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-3290.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-3290.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3290.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -12,7 +12,7 @@\n #![feature(box_syntax)]\n \n pub fn main() {\n-   let mut x = box 3i;\n+   let mut x = box 3;\n    x = x;\n    assert_eq!(*x, 3);\n }"}, {"sha": "1217f32826f6d3be179ba888f22374baeba3443a", "filename": "src/test/run-pass/issue-333.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-333.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-333.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-333.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -12,4 +12,4 @@ fn quux<T>(x: T) -> T { let f = id::<T>; return f(x); }\n \n fn id<T>(x: T) -> T { return x; }\n \n-pub fn main() { assert!((quux(10i) == 10i)); }\n+pub fn main() { assert!((quux(10) == 10)); }"}, {"sha": "99def5476f9a0bc563c83160df9e309334a7299f", "filename": "src/test/run-pass/issue-3500.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-3500.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-3500.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3500.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub fn main() {\n-    let x = &Some(1i);\n+    let x = &Some(1);\n     match x {\n         &Some(_) => (),\n         &None => (),"}, {"sha": "69a148d4108ea1c5c7e1adee6247ee6f83916627", "filename": "src/test/run-pass/issue-3559.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-3559.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-3559.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3559.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -22,8 +22,8 @@ fn check_strs(actual: &str, expected: &str) -> bool {\n \n pub fn main() {\n     let mut table = HashMap::new();\n-    table.insert(\"one\".to_string(), 1i);\n-    table.insert(\"two\".to_string(), 2i);\n+    table.insert(\"one\".to_string(), 1);\n+    table.insert(\"two\".to_string(), 2);\n     assert!(check_strs(format!(\"{:?}\", table).as_slice(), \"HashMap {\\\"one\\\": 1, \\\"two\\\": 2}\") ||\n             check_strs(format!(\"{:?}\", table).as_slice(), \"HashMap {\\\"two\\\": 2, \\\"one\\\": 1}\"));\n }"}, {"sha": "c1d19f228db617511960278bbb2f5dbfb016fe32", "filename": "src/test/run-pass/issue-3878.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-3878.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-3878.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3878.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -13,6 +13,6 @@\n #![feature(box_syntax)]\n \n pub fn main() {\n-    let y = box 1i;\n+    let y = box 1;\n     y;\n }"}, {"sha": "02601ba2f2a02780b878189c3d091a92159bfc76", "filename": "src/test/run-pass/issue-4387.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-4387.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-4387.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4387.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n pub fn main() {\n-    let _foo = [0i; 2*4];\n+    let _foo = [0; 2*4];\n }"}, {"sha": "e4fea724c798c0d95d250917f7825da85f41c5c1", "filename": "src/test/run-pass/issue-4401.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-4401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-4401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4401.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n pub fn main() {\n-    let mut count = 0i;\n-    for _ in 0i..999_999 { count += 1; }\n+    let mut count = 0;\n+    for _ in 0..999_999 { count += 1; }\n     assert_eq!(count, 999_999);\n     println!(\"{}\", count);\n }"}, {"sha": "fd39bcc6b61216fe4fc69d6acc3de8e73b92d263", "filename": "src/test/run-pass/issue-5708.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-5708.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-5708.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5708.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -41,7 +41,7 @@ impl<'a> Outer<'a> {\n }\n \n pub fn main() {\n-    let inner = 5i;\n+    let inner = 5;\n     let outer = Outer::new(&inner as &Inner);\n     outer.inner.print();\n }"}, {"sha": "93edffdcb477fc9c62a7801c3bf302a4f062875e", "filename": "src/test/run-pass/issue-6117.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-6117.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-6117.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6117.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -14,7 +14,7 @@\n enum Either<T, U> { Left(T), Right(U) }\n \n pub fn main() {\n-    match Either::Left(box 17i) {\n+    match Either::Left(box 17) {\n         Either::Right(()) => {}\n         _ => {}\n     }"}, {"sha": "1d8fe8bfce82c6a643952d6f182ab7f85190825c", "filename": "src/test/run-pass/issue-6318.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-6318.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-6318.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6318.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -23,7 +23,7 @@ impl Foo for Struct {}\n \n pub fn main() {\n     match Thing::A(box Struct as Box<Foo+'static>) {\n-        Thing::A(_a) => 0i,\n+        Thing::A(_a) => 0,\n     };\n }\n "}, {"sha": "6ef740b2a50513c63d9682b996e6b81d364b14b0", "filename": "src/test/run-pass/issue-7178.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-7178.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-7178.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-7178.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -13,5 +13,5 @@\n extern crate \"issue-7178\" as cross_crate_self;\n \n pub fn main() {\n-    let _ = cross_crate_self::Foo::new(&1i);\n+    let _ = cross_crate_self::Foo::new(&1);\n }"}, {"sha": "225213db6a4251f47c10281c5557e7d165341d07", "filename": "src/test/run-pass/issue-7575.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-7575.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-7575.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-7575.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -20,5 +20,5 @@ impl Bar for int {}\n impl Foo for int {}\n \n fn main() {\n-    assert!(1i.new());\n+    assert!(1.new());\n }"}, {"sha": "a61ee8c2a0bd1e22742d2ace0f28c716fd6d3c7e", "filename": "src/test/run-pass/issue-7784.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-7784.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-7784.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-7784.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -20,7 +20,7 @@ fn bar(a: &'static str, b: &'static str) -> [&'static str; 4] {\n }\n \n fn main() {\n-    assert_eq!(foo([1i, 2i, 3i]), (1i, 3i, 6i));\n+    assert_eq!(foo([1, 2, 3]), (1, 3, 6));\n \n     let [a, b, c, d] = bar(\"foo\", \"bar\");\n     assert_eq!(a, \"foo\");"}, {"sha": "504441e3ba96b4bab8eadbf7d3dd7083e6c72934", "filename": "src/test/run-pass/issue-8044.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-8044.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-8044.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8044.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -14,5 +14,5 @@ extern crate \"issue-8044\" as minimal;\n use minimal::{BTree, leaf};\n \n pub fn main() {\n-    BTree::<int> { node: leaf(1i) };\n+    BTree::<int> { node: leaf(1) };\n }"}, {"sha": "86c9b8c69646941d5f6809ed467018ae989f9661", "filename": "src/test/run-pass/issue-8391.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-8391.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-8391.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8391.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -9,9 +9,9 @@\n // except according to those terms.\n \n fn main() {\n-    let x = match Some(1i) {\n-        ref _y @ Some(_) => 1i,\n-        None => 2i,\n+    let x = match Some(1) {\n+        ref _y @ Some(_) => 1,\n+        None => 2,\n     };\n     assert_eq!(x, 1);\n }"}, {"sha": "3944895460fffdd70aefcd4a8917f61f0150f41f", "filename": "src/test/run-pass/issue-8460.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-8460.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-8460.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8460.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -17,7 +17,7 @@ fn main() {\n     assert!(Thread::scoped(move|| i16::MIN / -1).join().is_err());\n     assert!(Thread::scoped(move|| i32::MIN / -1).join().is_err());\n     assert!(Thread::scoped(move|| i64::MIN / -1).join().is_err());\n-    assert!(Thread::scoped(move|| 1i / 0).join().is_err());\n+    assert!(Thread::scoped(move|| 1 / 0).join().is_err());\n     assert!(Thread::scoped(move|| 1i8 / 0).join().is_err());\n     assert!(Thread::scoped(move|| 1i16 / 0).join().is_err());\n     assert!(Thread::scoped(move|| 1i32 / 0).join().is_err());\n@@ -27,7 +27,7 @@ fn main() {\n     assert!(Thread::scoped(move|| i16::MIN % -1).join().is_err());\n     assert!(Thread::scoped(move|| i32::MIN % -1).join().is_err());\n     assert!(Thread::scoped(move|| i64::MIN % -1).join().is_err());\n-    assert!(Thread::scoped(move|| 1i % 0).join().is_err());\n+    assert!(Thread::scoped(move|| 1 % 0).join().is_err());\n     assert!(Thread::scoped(move|| 1i8 % 0).join().is_err());\n     assert!(Thread::scoped(move|| 1i16 % 0).join().is_err());\n     assert!(Thread::scoped(move|| 1i32 % 0).join().is_err());"}, {"sha": "494b62178550349f2f545b5fee1c3c3d74690f90", "filename": "src/test/run-pass/issue-8498.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-8498.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-8498.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8498.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -12,22 +12,22 @@\n #![feature(box_syntax)]\n \n pub fn main() {\n-    match &[(box 5i,box 7i)] {\n+    match &[(box 5,box 7)] {\n         ps => {\n            let (ref y, _) = ps[0];\n            assert!(**y == 5);\n         }\n     }\n \n-    match Some(&[(box 5i,)]) {\n+    match Some(&[(box 5,)]) {\n         Some(ps) => {\n            let (ref y,) = ps[0];\n            assert!(**y == 5);\n         }\n         None => ()\n     }\n \n-    match Some(&[(box 5i,box 7i)]) {\n+    match Some(&[(box 5,box 7)]) {\n         Some(ps) => {\n            let (ref y, ref z) = ps[0];\n            assert!(**y == 5);"}, {"sha": "b2ccc092358e2ed96d270fffb2d89bfeedf334a3", "filename": "src/test/run-pass/issue-868.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-868.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-868.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-868.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -11,7 +11,7 @@\n fn f<T, F>(g: F) -> T where F: FnOnce() -> T { g() }\n \n pub fn main() {\n-  let _x = f( | | { 10i });\n+  let _x = f( | | { 10 });\n     // used to be: cannot determine a type for this expression\n     f(| | { });\n     // ditto"}, {"sha": "d7a8674954696b8a6291a645ab3719328572295d", "filename": "src/test/run-pass/issue-8827.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-8827.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-8827.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8827.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -49,7 +49,7 @@ fn main() {\n     let ints = integers();\n     let threes = periodical(3);\n     let fives = periodical(5);\n-    for _ in 1i..100i {\n+    for _ in 1..100 {\n         match (ints.recv().unwrap(), threes.recv().unwrap(), fives.recv().unwrap()) {\n             (_, true, true) => println!(\"FizzBuzz\"),\n             (_, true, false) => println!(\"Fizz\"),"}, {"sha": "72e2a33b43eac55dad06ec1e9778da78cacff4da", "filename": "src/test/run-pass/issue-8860.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-8860.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-8860.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8860.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-static mut DROP: int = 0i;\n-static mut DROP_S: int = 0i;\n-static mut DROP_T: int = 0i;\n+static mut DROP: int = 0;\n+static mut DROP_S: int = 0;\n+static mut DROP_T: int = 0;\n \n struct S;\n impl Drop for S {"}, {"sha": "8fc86eb49e769c061018198516df95ac47da65bd", "filename": "src/test/run-pass/issue-9719.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-9719.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-9719.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-9719.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -17,7 +17,7 @@ mod a {\n     impl X for int {}\n \n     pub struct Z<'a>(Enum<&'a (X+'a)>);\n-    fn foo() { let x = 42i; let z = Z(Enum::A(&x as &X)); let _ = z; }\n+    fn foo() { let x = 42; let z = Z(Enum::A(&x as &X)); let _ = z; }\n }\n \n mod b {\n@@ -28,7 +28,7 @@ mod b {\n     }\n \n     fn bar() {\n-        let x = 42i;\n+        let x = 42;\n         let _y = Y { x: Some(&x as &X) };\n     }\n }\n@@ -37,7 +37,7 @@ mod c {\n     pub trait X { fn f(&self); }\n     impl X for int { fn f(&self) {} }\n     pub struct Z<'a>(Option<&'a (X+'a)>);\n-    fn main() { let x = 42i; let z = Z(Some(&x as &X)); let _ = z; }\n+    fn main() { let x = 42; let z = Z(Some(&x as &X)); let _ = z; }\n }\n \n pub fn main() {}"}, {"sha": "921965b280b28b90bf4bce7596256d7a4eef5dc6", "filename": "src/test/run-pass/issue-9906.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-9906.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-9906.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-9906.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -14,5 +14,5 @@ extern crate \"issue-9906\" as testmod;\n \n pub fn main() {\n     testmod::foo();\n-    testmod::FooBar::new(1i);\n+    testmod::FooBar::new(1);\n }"}, {"sha": "c7dea71998646463b66b72a78680128f2df49787", "filename": "src/test/run-pass/issue-9942.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-9942.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fissue-9942.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-9942.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n pub fn main() {\n-    const S: uint = 23 as uint; [0i; S]; ()\n+    const S: uint = 23 as uint; [0; S]; ()\n }"}, {"sha": "ff568b77f08ac205fffb295f9579855d92868b76", "filename": "src/test/run-pass/keyword-changes-2012-07-31.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fkeyword-changes-2012-07-31.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fkeyword-changes-2012-07-31.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fkeyword-changes-2012-07-31.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -19,7 +19,7 @@ mod foo {\n }\n \n fn bar() -> int {\n-    match 0i {\n-      _ => { 0i }\n+    match 0 {\n+      _ => { 0 }\n     }\n }"}, {"sha": "f05ac11d4138031683a6ed26ce769bbd72311d53", "filename": "src/test/run-pass/kindck-owned-trait-contains-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fkindck-owned-trait-contains-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f64fe4e27555c256cb228feb05d4181a2287125/src%2Ftest%2Frun-pass%2Fkindck-owned-trait-contains-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fkindck-owned-trait-contains-1.rs?ref=7f64fe4e27555c256cb228feb05d4181a2287125", "patch": "@@ -24,7 +24,7 @@ fn repeater<A:Clone + 'static>(v: Box<A>) -> Box<repeat<A>+'static> {\n }\n \n pub fn main() {\n-    let x = 3i;\n+    let x = 3;\n     let y = repeater(box x);\n     assert_eq!(x, y.get());\n }"}]}