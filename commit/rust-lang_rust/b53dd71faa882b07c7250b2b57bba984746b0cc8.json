{"sha": "b53dd71faa882b07c7250b2b57bba984746b0cc8", "node_id": "C_kwDOAAsO6NoAKGI1M2RkNzFmYWE4ODJiMDdjNzI1MGIyYjU3YmJhOTg0NzQ2YjBjYzg", "commit": {"author": {"name": "Miguel Guarniz", "email": "mi9uel9@gmail.com", "date": "2022-06-16T02:29:59Z"}, "committer": {"name": "Miguel Guarniz", "email": "mi9uel9@gmail.com", "date": "2022-07-06T23:17:16Z"}, "message": "gather body owners\n\nSigned-off-by: Miguel Guarniz <mi9uel9@gmail.com>", "tree": {"sha": "c685959eccb117c616e129baec82057e4d14ee6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c685959eccb117c616e129baec82057e4d14ee6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b53dd71faa882b07c7250b2b57bba984746b0cc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b53dd71faa882b07c7250b2b57bba984746b0cc8", "html_url": "https://github.com/rust-lang/rust/commit/b53dd71faa882b07c7250b2b57bba984746b0cc8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b53dd71faa882b07c7250b2b57bba984746b0cc8/comments", "author": {"login": "kckeiks", "id": 24687641, "node_id": "MDQ6VXNlcjI0Njg3NjQx", "avatar_url": "https://avatars.githubusercontent.com/u/24687641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kckeiks", "html_url": "https://github.com/kckeiks", "followers_url": "https://api.github.com/users/kckeiks/followers", "following_url": "https://api.github.com/users/kckeiks/following{/other_user}", "gists_url": "https://api.github.com/users/kckeiks/gists{/gist_id}", "starred_url": "https://api.github.com/users/kckeiks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kckeiks/subscriptions", "organizations_url": "https://api.github.com/users/kckeiks/orgs", "repos_url": "https://api.github.com/users/kckeiks/repos", "events_url": "https://api.github.com/users/kckeiks/events{/privacy}", "received_events_url": "https://api.github.com/users/kckeiks/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kckeiks", "id": 24687641, "node_id": "MDQ6VXNlcjI0Njg3NjQx", "avatar_url": "https://avatars.githubusercontent.com/u/24687641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kckeiks", "html_url": "https://github.com/kckeiks", "followers_url": "https://api.github.com/users/kckeiks/followers", "following_url": "https://api.github.com/users/kckeiks/following{/other_user}", "gists_url": "https://api.github.com/users/kckeiks/gists{/gist_id}", "starred_url": "https://api.github.com/users/kckeiks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kckeiks/subscriptions", "organizations_url": "https://api.github.com/users/kckeiks/orgs", "repos_url": "https://api.github.com/users/kckeiks/repos", "events_url": "https://api.github.com/users/kckeiks/events{/privacy}", "received_events_url": "https://api.github.com/users/kckeiks/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdca237d5194bf8a1c9b437ebd2114d1c2ba6195", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdca237d5194bf8a1c9b437ebd2114d1c2ba6195", "html_url": "https://github.com/rust-lang/rust/commit/fdca237d5194bf8a1c9b437ebd2114d1c2ba6195"}], "stats": {"total": 111, "additions": 95, "deletions": 16}, "files": [{"sha": "9a6ca56bd693bded67869becc4508d964f006212", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 94, "deletions": 16, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/b53dd71faa882b07c7250b2b57bba984746b0cc8/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b53dd71faa882b07c7250b2b57bba984746b0cc8/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=b53dd71faa882b07c7250b2b57bba984746b0cc8", "patch": "@@ -493,18 +493,7 @@ impl<'hir> Map<'hir> {\n     /// crate. If you would prefer to iterate over the bodies\n     /// themselves, you can do `self.hir().krate().body_ids.iter()`.\n     pub fn body_owners(self) -> impl Iterator<Item = LocalDefId> + 'hir {\n-        self.krate()\n-            .owners\n-            .iter_enumerated()\n-            .flat_map(move |(owner, owner_info)| {\n-                let bodies = &owner_info.as_owner()?.nodes.bodies;\n-                Some(bodies.iter().map(move |&(local_id, _)| {\n-                    let hir_id = HirId { owner, local_id };\n-                    let body_id = BodyId { hir_id };\n-                    self.body_owner_def_id(body_id)\n-                }))\n-            })\n-            .flatten()\n+        self.tcx.hir_crate_items(()).body_owners.iter().copied()\n     }\n \n     pub fn par_body_owners<F: Fn(LocalDefId) + Sync + Send>(self, f: F) {\n@@ -1239,19 +1228,28 @@ pub(super) fn hir_module_items(tcx: TyCtxt<'_>, module_id: LocalDefId) -> Module\n         trait_items: Vec::default(),\n         impl_items: Vec::default(),\n         foreign_items: Vec::default(),\n+        body_owners: Vec::default(),\n     };\n \n     let (hir_mod, span, hir_id) = tcx.hir().get_module(module_id);\n     collector.visit_mod(hir_mod, span, hir_id);\n \n-    let ModuleCollector { submodules, items, trait_items, impl_items, foreign_items, .. } =\n-        collector;\n+    let ModuleCollector {\n+        submodules,\n+        items,\n+        trait_items,\n+        impl_items,\n+        foreign_items,\n+        body_owners,\n+        ..\n+    } = collector;\n     return ModuleItems {\n         submodules: submodules.into_boxed_slice(),\n         items: items.into_boxed_slice(),\n         trait_items: trait_items.into_boxed_slice(),\n         impl_items: impl_items.into_boxed_slice(),\n         foreign_items: foreign_items.into_boxed_slice(),\n+        body_owners: body_owners.into_boxed_slice(),\n     };\n \n     struct ModuleCollector<'tcx> {\n@@ -1261,6 +1259,7 @@ pub(super) fn hir_module_items(tcx: TyCtxt<'_>, module_id: LocalDefId) -> Module\n         trait_items: Vec<TraitItemId>,\n         impl_items: Vec<ImplItemId>,\n         foreign_items: Vec<ForeignItemId>,\n+        body_owners: Vec<LocalDefId>,\n     }\n \n     impl<'hir> Visitor<'hir> for ModuleCollector<'hir> {\n@@ -1271,7 +1270,16 @@ pub(super) fn hir_module_items(tcx: TyCtxt<'_>, module_id: LocalDefId) -> Module\n         }\n \n         fn visit_item(&mut self, item: &'hir Item<'hir>) {\n+            if associated_body(Node::Item(item)).is_some() {\n+                self.body_owners.push(item.def_id);\n+            }\n+\n             self.items.push(item.item_id());\n+\n+            if self.tcx.hir().is_body_owner(item.def_id) {\n+                self.body_owners.push(item.def_id);\n+            }\n+\n             if let ItemKind::Mod(..) = item.kind {\n                 // If this declares another module, do not recurse inside it.\n                 self.submodules.push(item.def_id);\n@@ -1281,19 +1289,47 @@ pub(super) fn hir_module_items(tcx: TyCtxt<'_>, module_id: LocalDefId) -> Module\n         }\n \n         fn visit_trait_item(&mut self, item: &'hir TraitItem<'hir>) {\n+            if associated_body(Node::TraitItem(item)).is_some() {\n+                self.body_owners.push(item.def_id);\n+            }\n+\n             self.trait_items.push(item.trait_item_id());\n             intravisit::walk_trait_item(self, item)\n         }\n \n         fn visit_impl_item(&mut self, item: &'hir ImplItem<'hir>) {\n+            if associated_body(Node::ImplItem(item)).is_some() {\n+                self.body_owners.push(item.def_id);\n+            }\n+\n             self.impl_items.push(item.impl_item_id());\n             intravisit::walk_impl_item(self, item)\n         }\n \n         fn visit_foreign_item(&mut self, item: &'hir ForeignItem<'hir>) {\n+            if associated_body(Node::ForeignItem(item)).is_some() {\n+                self.body_owners.push(item.def_id);\n+            }\n+\n             self.foreign_items.push(item.foreign_item_id());\n             intravisit::walk_foreign_item(self, item)\n         }\n+\n+        fn visit_expr(&mut self, ex: &'hir Expr<'hir>) {\n+            if matches!(ex.kind, ExprKind::Closure { .. })\n+                && associated_body(Node::Expr(ex)).is_some()\n+            {\n+                self.body_owners.push(ex.hir_id.owner);\n+            }\n+            intravisit::walk_expr(self, ex)\n+        }\n+\n+        fn visit_anon_const(&mut self, c: &'hir AnonConst) {\n+            if associated_body(Node::AnonConst(c)).is_some() {\n+                self.body_owners.push(c.hir_id.owner);\n+            }\n+            intravisit::walk_anon_const(self, c)\n+        }\n     }\n }\n \n@@ -1305,19 +1341,28 @@ pub(crate) fn hir_crate_items(tcx: TyCtxt<'_>, _: ()) -> ModuleItems {\n         trait_items: Vec::default(),\n         impl_items: Vec::default(),\n         foreign_items: Vec::default(),\n+        body_owners: Vec::default(),\n     };\n \n     tcx.hir().walk_toplevel_module(&mut collector);\n \n-    let CrateCollector { submodules, items, trait_items, impl_items, foreign_items, .. } =\n-        collector;\n+    let CrateCollector {\n+        submodules,\n+        items,\n+        trait_items,\n+        impl_items,\n+        foreign_items,\n+        body_owners,\n+        ..\n+    } = collector;\n \n     return ModuleItems {\n         submodules: submodules.into_boxed_slice(),\n         items: items.into_boxed_slice(),\n         trait_items: trait_items.into_boxed_slice(),\n         impl_items: impl_items.into_boxed_slice(),\n         foreign_items: foreign_items.into_boxed_slice(),\n+        body_owners: body_owners.into_boxed_slice(),\n     };\n \n     struct CrateCollector<'tcx> {\n@@ -1327,6 +1372,7 @@ pub(crate) fn hir_crate_items(tcx: TyCtxt<'_>, _: ()) -> ModuleItems {\n         trait_items: Vec<TraitItemId>,\n         impl_items: Vec<ImplItemId>,\n         foreign_items: Vec<ForeignItemId>,\n+        body_owners: Vec<LocalDefId>,\n     }\n \n     impl<'hir> Visitor<'hir> for CrateCollector<'hir> {\n@@ -1337,6 +1383,10 @@ pub(crate) fn hir_crate_items(tcx: TyCtxt<'_>, _: ()) -> ModuleItems {\n         }\n \n         fn visit_item(&mut self, item: &'hir Item<'hir>) {\n+            if associated_body(Node::Item(item)).is_some() {\n+                self.body_owners.push(item.def_id);\n+            }\n+\n             self.items.push(item.item_id());\n             intravisit::walk_item(self, item)\n         }\n@@ -1347,18 +1397,46 @@ pub(crate) fn hir_crate_items(tcx: TyCtxt<'_>, _: ()) -> ModuleItems {\n         }\n \n         fn visit_foreign_item(&mut self, item: &'hir ForeignItem<'hir>) {\n+            if associated_body(Node::ForeignItem(item)).is_some() {\n+                self.body_owners.push(item.def_id);\n+            }\n+\n             self.foreign_items.push(item.foreign_item_id());\n             intravisit::walk_foreign_item(self, item)\n         }\n \n         fn visit_trait_item(&mut self, item: &'hir TraitItem<'hir>) {\n+            if associated_body(Node::TraitItem(item)).is_some() {\n+                self.body_owners.push(item.def_id);\n+            }\n+\n             self.trait_items.push(item.trait_item_id());\n             intravisit::walk_trait_item(self, item)\n         }\n \n         fn visit_impl_item(&mut self, item: &'hir ImplItem<'hir>) {\n+            if associated_body(Node::ImplItem(item)).is_some() {\n+                self.body_owners.push(item.def_id);\n+            }\n+\n             self.impl_items.push(item.impl_item_id());\n             intravisit::walk_impl_item(self, item)\n         }\n+\n+        fn visit_expr(&mut self, ex: &'hir Expr<'hir>) {\n+            if matches!(ex.kind, ExprKind::Closure { .. })\n+                && associated_body(Node::Expr(ex)).is_some()\n+            {\n+                self.body_owners.push(ex.hir_id.owner);\n+            }\n+            intravisit::walk_expr(self, ex)\n+        }\n+\n+        fn visit_anon_const(&mut self, c: &'hir AnonConst) {\n+            if associated_body(Node::AnonConst(c)).is_some() {\n+                self.body_owners.push(c.hir_id.owner);\n+            }\n+            intravisit::walk_anon_const(self, c)\n+        }\n     }\n }"}, {"sha": "87c6f05414a794a0299e2360a505942de058e2a1", "filename": "compiler/rustc_middle/src/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b53dd71faa882b07c7250b2b57bba984746b0cc8/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b53dd71faa882b07c7250b2b57bba984746b0cc8/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs?ref=b53dd71faa882b07c7250b2b57bba984746b0cc8", "patch": "@@ -43,6 +43,7 @@ pub struct ModuleItems {\n     trait_items: Box<[TraitItemId]>,\n     impl_items: Box<[ImplItemId]>,\n     foreign_items: Box<[ForeignItemId]>,\n+    body_owners: Box<[LocalDefId]>,\n }\n \n impl ModuleItems {"}]}