{"sha": "ea2547b8c63ce4e410c53e7fa55b127c81721454", "node_id": "C_kwDOAAsO6NoAKGVhMjU0N2I4YzYzY2U0ZTQxMGM1M2U3ZmE1NWIxMjdjODE3MjE0NTQ", "commit": {"author": {"name": "Burak Varl\u0131", "email": "burakvar@amazon.co.uk", "date": "2023-02-16T14:50:51Z"}, "committer": {"name": "unexge", "email": "unexge@gmail.com", "date": "2023-03-08T08:50:21Z"}, "message": "Add `missing_assert_message` lint\n\nCo-authored-by: Weihang Lo <me@weihanglo.tw>", "tree": {"sha": "a65810bf757d1bf63c092f44f667bfe267259de7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a65810bf757d1bf63c092f44f667bfe267259de7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea2547b8c63ce4e410c53e7fa55b127c81721454", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea2547b8c63ce4e410c53e7fa55b127c81721454", "html_url": "https://github.com/rust-lang/rust/commit/ea2547b8c63ce4e410c53e7fa55b127c81721454", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea2547b8c63ce4e410c53e7fa55b127c81721454/comments", "author": {"login": "unexge", "id": 16212576, "node_id": "MDQ6VXNlcjE2MjEyNTc2", "avatar_url": "https://avatars.githubusercontent.com/u/16212576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unexge", "html_url": "https://github.com/unexge", "followers_url": "https://api.github.com/users/unexge/followers", "following_url": "https://api.github.com/users/unexge/following{/other_user}", "gists_url": "https://api.github.com/users/unexge/gists{/gist_id}", "starred_url": "https://api.github.com/users/unexge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unexge/subscriptions", "organizations_url": "https://api.github.com/users/unexge/orgs", "repos_url": "https://api.github.com/users/unexge/repos", "events_url": "https://api.github.com/users/unexge/events{/privacy}", "received_events_url": "https://api.github.com/users/unexge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "unexge", "id": 16212576, "node_id": "MDQ6VXNlcjE2MjEyNTc2", "avatar_url": "https://avatars.githubusercontent.com/u/16212576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unexge", "html_url": "https://github.com/unexge", "followers_url": "https://api.github.com/users/unexge/followers", "following_url": "https://api.github.com/users/unexge/following{/other_user}", "gists_url": "https://api.github.com/users/unexge/gists{/gist_id}", "starred_url": "https://api.github.com/users/unexge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unexge/subscriptions", "organizations_url": "https://api.github.com/users/unexge/orgs", "repos_url": "https://api.github.com/users/unexge/repos", "events_url": "https://api.github.com/users/unexge/events{/privacy}", "received_events_url": "https://api.github.com/users/unexge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41fa24cef89c71430040332b42036f4ec839c4e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/41fa24cef89c71430040332b42036f4ec839c4e0", "html_url": "https://github.com/rust-lang/rust/commit/41fa24cef89c71430040332b42036f4ec839c4e0"}], "stats": {"total": 315, "additions": 313, "deletions": 2}, "files": [{"sha": "62cc7437b824037eb2b563007daf2937619d0f0d", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ea2547b8c63ce4e410c53e7fa55b127c81721454/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/ea2547b8c63ce4e410c53e7fa55b127c81721454/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=ea2547b8c63ce4e410c53e7fa55b127c81721454", "patch": "@@ -4706,6 +4706,7 @@ Released 2018-09-13\n [`mismatching_type_param_order`]: https://rust-lang.github.io/rust-clippy/master/index.html#mismatching_type_param_order\n [`misnamed_getters`]: https://rust-lang.github.io/rust-clippy/master/index.html#misnamed_getters\n [`misrefactored_assign_op`]: https://rust-lang.github.io/rust-clippy/master/index.html#misrefactored_assign_op\n+[`missing_assert_message`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_assert_message\n [`missing_const_for_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn\n [`missing_docs_in_private_items`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items\n [`missing_enforced_import_renames`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_enforced_import_renames"}, {"sha": "462fcb6483de7e48df23df4620bba906199e5634", "filename": "clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ea2547b8c63ce4e410c53e7fa55b127c81721454/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea2547b8c63ce4e410c53e7fa55b127c81721454/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=ea2547b8c63ce4e410c53e7fa55b127c81721454", "patch": "@@ -417,6 +417,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::misc_early::UNSEPARATED_LITERAL_SUFFIX_INFO,\n     crate::misc_early::ZERO_PREFIXED_LITERAL_INFO,\n     crate::mismatching_type_param_order::MISMATCHING_TYPE_PARAM_ORDER_INFO,\n+    crate::missing_assert_message::MISSING_ASSERT_MESSAGE_INFO,\n     crate::missing_const_for_fn::MISSING_CONST_FOR_FN_INFO,\n     crate::missing_doc::MISSING_DOCS_IN_PRIVATE_ITEMS_INFO,\n     crate::missing_enforced_import_rename::MISSING_ENFORCED_IMPORT_RENAMES_INFO,"}, {"sha": "fe0229a814ff784c15580e135dcdb67fe4cf424f", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea2547b8c63ce4e410c53e7fa55b127c81721454/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea2547b8c63ce4e410c53e7fa55b127c81721454/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=ea2547b8c63ce4e410c53e7fa55b127c81721454", "patch": "@@ -193,6 +193,7 @@ mod minmax;\n mod misc;\n mod misc_early;\n mod mismatching_type_param_order;\n+mod missing_assert_message;\n mod missing_const_for_fn;\n mod missing_doc;\n mod missing_enforced_import_rename;\n@@ -926,6 +927,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     });\n     store.register_late_pass(|_| Box::new(no_mangle_with_rust_abi::NoMangleWithRustAbi));\n     store.register_late_pass(|_| Box::new(collection_is_never_read::CollectionIsNeverRead));\n+    store.register_pre_expansion_pass(|| Box::new(missing_assert_message::MissingAssertMessage));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "a884b22370d5793bea88b55147a8b3a2e624593f", "filename": "clippy_lints/src/missing_assert_message.rs", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/ea2547b8c63ce4e410c53e7fa55b127c81721454/clippy_lints%2Fsrc%2Fmissing_assert_message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea2547b8c63ce4e410c53e7fa55b127c81721454/clippy_lints%2Fsrc%2Fmissing_assert_message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_assert_message.rs?ref=ea2547b8c63ce4e410c53e7fa55b127c81721454", "patch": "@@ -0,0 +1,123 @@\n+use clippy_utils::diagnostics::span_lint;\n+use rustc_ast::ast;\n+use rustc_ast::{\n+    token::{Token, TokenKind},\n+    tokenstream::TokenTree,\n+};\n+use rustc_lint::{EarlyContext, EarlyLintPass};\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::sym;\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks assertions that doesn't have a custom panic message.\n+    ///\n+    /// ### Why is this bad?\n+    /// If the assertion fails, a custom message may make it easier to debug what went wrong.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// let threshold = 50;\n+    /// let num = 42;\n+    /// assert!(num < threshold);\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// let threshold = 50;\n+    /// let num = 42;\n+    /// assert!(num < threshold, \"{num} is lower than threshold ({threshold})\");\n+    /// ```\n+    #[clippy::version = \"1.69.0\"]\n+    pub MISSING_ASSERT_MESSAGE,\n+    pedantic,\n+    \"checks assertions that doesn't have a custom panic message\"\n+}\n+\n+#[derive(Default, Clone, Debug)]\n+pub struct MissingAssertMessage {\n+    // This field will be greater than zero if we are inside a `#[test]` or `#[cfg(test)]`\n+    test_deepnes: usize,\n+}\n+\n+impl_lint_pass!(MissingAssertMessage => [MISSING_ASSERT_MESSAGE]);\n+\n+impl EarlyLintPass for MissingAssertMessage {\n+    fn check_mac(&mut self, cx: &EarlyContext<'_>, mac_call: &ast::MacCall) {\n+        if self.test_deepnes != 0 {\n+            return;\n+        }\n+\n+        let Some(last_segment) = mac_call.path.segments.last() else { return; };\n+        let num_separators_needed = match last_segment.ident.as_str() {\n+            \"assert\" | \"debug_assert\" => 1,\n+            \"assert_eq\" | \"assert_ne\" | \"debug_assert_eq\" | \"debug_assert_ne\" => 2,\n+            _ => return,\n+        };\n+        let num_separators = num_commas_on_arguments(mac_call);\n+\n+        if num_separators < num_separators_needed {\n+            span_lint(\n+                cx,\n+                MISSING_ASSERT_MESSAGE,\n+                mac_call.span(),\n+                \"assert without any message\",\n+            );\n+        }\n+    }\n+\n+    fn check_item(&mut self, _: &EarlyContext<'_>, item: &ast::Item) {\n+        if item.attrs.iter().any(is_a_test_attribute) {\n+            self.test_deepnes += 1;\n+        }\n+    }\n+\n+    fn check_item_post(&mut self, _: &EarlyContext<'_>, item: &ast::Item) {\n+        if item.attrs.iter().any(is_a_test_attribute) {\n+            self.test_deepnes -= 1;\n+        }\n+    }\n+}\n+\n+// Returns number of commas (excluding trailing comma) from `MacCall`'s arguments.\n+fn num_commas_on_arguments(mac_call: &ast::MacCall) -> usize {\n+    let mut num_separators = 0;\n+    let mut is_trailing = false;\n+    for tt in mac_call.args.tokens.trees() {\n+        match tt {\n+            TokenTree::Token(\n+                Token {\n+                    kind: TokenKind::Comma,\n+                    span: _,\n+                },\n+                _,\n+            ) => {\n+                num_separators += 1;\n+                is_trailing = true;\n+            },\n+            _ => {\n+                is_trailing = false;\n+            },\n+        }\n+    }\n+    if is_trailing {\n+        num_separators -= 1;\n+    }\n+    num_separators\n+}\n+\n+// Returns true if the attribute is either a `#[test]` or a `#[cfg(test)]`.\n+fn is_a_test_attribute(attr: &ast::Attribute) -> bool {\n+    if attr.has_name(sym::test) {\n+        return true;\n+    }\n+\n+    if attr.has_name(sym::cfg)\n+        && let Some(items) = attr.meta_item_list()\n+        && let [item] = &*items\n+        && item.has_name(sym::test)\n+    {\n+        true\n+    } else {\n+        false\n+    }\n+}"}, {"sha": "0568eff41b526d52d15abdc944e300516a86b3ee", "filename": "tests/ui/filter_map_next_fixable.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea2547b8c63ce4e410c53e7fa55b127c81721454/tests%2Fui%2Ffilter_map_next_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ea2547b8c63ce4e410c53e7fa55b127c81721454/tests%2Fui%2Ffilter_map_next_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffilter_map_next_fixable.fixed?ref=ea2547b8c63ce4e410c53e7fa55b127c81721454", "patch": "@@ -1,7 +1,7 @@\n // run-rustfix\n \n #![warn(clippy::all, clippy::pedantic)]\n-#![allow(unused)]\n+#![allow(unused, clippy::missing_assert_message)]\n \n fn main() {\n     let a = [\"1\", \"lol\", \"3\", \"NaN\", \"5\"];"}, {"sha": "b0722ee8258fe4249b998fd7aa17d63250c9af17", "filename": "tests/ui/filter_map_next_fixable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea2547b8c63ce4e410c53e7fa55b127c81721454/tests%2Fui%2Ffilter_map_next_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea2547b8c63ce4e410c53e7fa55b127c81721454/tests%2Fui%2Ffilter_map_next_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffilter_map_next_fixable.rs?ref=ea2547b8c63ce4e410c53e7fa55b127c81721454", "patch": "@@ -1,7 +1,7 @@\n // run-rustfix\n \n #![warn(clippy::all, clippy::pedantic)]\n-#![allow(unused)]\n+#![allow(unused, clippy::missing_assert_message)]\n \n fn main() {\n     let a = [\"1\", \"lol\", \"3\", \"NaN\", \"5\"];"}, {"sha": "89404ca882718f05f37ac39c103cbbed533821bf", "filename": "tests/ui/missing_assert_message.rs", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/ea2547b8c63ce4e410c53e7fa55b127c81721454/tests%2Fui%2Fmissing_assert_message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea2547b8c63ce4e410c53e7fa55b127c81721454/tests%2Fui%2Fmissing_assert_message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_assert_message.rs?ref=ea2547b8c63ce4e410c53e7fa55b127c81721454", "patch": "@@ -0,0 +1,84 @@\n+#![allow(unused)]\n+#![warn(clippy::missing_assert_message)]\n+\n+macro_rules! bar {\n+    ($( $x:expr ),*) => {\n+        foo()\n+    };\n+}\n+\n+fn main() {}\n+\n+// Should trigger warning\n+fn asserts_without_message() {\n+    assert!(foo());\n+    assert_eq!(foo(), foo());\n+    assert_ne!(foo(), foo());\n+    debug_assert!(foo());\n+    debug_assert_eq!(foo(), foo());\n+    debug_assert_ne!(foo(), foo());\n+}\n+\n+// Should trigger warning\n+fn asserts_without_message_but_with_macro_calls() {\n+    assert!(bar!(true));\n+    assert!(bar!(true, false));\n+    assert_eq!(bar!(true), foo());\n+    assert_ne!(bar!(true, true), bar!(true));\n+}\n+\n+// Should trigger warning\n+fn asserts_with_trailing_commas() {\n+    assert!(foo(),);\n+    assert_eq!(foo(), foo(),);\n+    assert_ne!(foo(), foo(),);\n+    debug_assert!(foo(),);\n+    debug_assert_eq!(foo(), foo(),);\n+    debug_assert_ne!(foo(), foo(),);\n+}\n+\n+// Should not trigger warning\n+fn asserts_with_message_and_with_macro_calls() {\n+    assert!(bar!(true), \"msg\");\n+    assert!(bar!(true, false), \"msg\");\n+    assert_eq!(bar!(true), foo(), \"msg\");\n+    assert_ne!(bar!(true, true), bar!(true), \"msg\");\n+}\n+\n+// Should not trigger warning\n+fn asserts_with_message() {\n+    assert!(foo(), \"msg\");\n+    assert_eq!(foo(), foo(), \"msg\");\n+    assert_ne!(foo(), foo(), \"msg\");\n+    debug_assert!(foo(), \"msg\");\n+    debug_assert_eq!(foo(), foo(), \"msg\");\n+    debug_assert_ne!(foo(), foo(), \"msg\");\n+}\n+\n+// Should not trigger warning\n+#[test]\n+fn asserts_without_message_but_inside_a_test_function() {\n+    assert!(foo());\n+    assert_eq!(foo(), foo());\n+    assert_ne!(foo(), foo());\n+    debug_assert!(foo());\n+    debug_assert_eq!(foo(), foo());\n+    debug_assert_ne!(foo(), foo());\n+}\n+\n+// Should not trigger warning\n+#[cfg(test)]\n+mod tests {\n+    fn asserts_without_message_but_inside_a_test_module() {\n+        assert!(foo());\n+        assert_eq!(foo(), foo());\n+        assert_ne!(foo(), foo());\n+        debug_assert!(foo());\n+        debug_assert_eq!(foo(), foo());\n+        debug_assert_ne!(foo(), foo());\n+    }\n+}\n+\n+fn foo() -> bool {\n+    true\n+}"}, {"sha": "900966500c88fb68c6d8f1a580a63070df60310c", "filename": "tests/ui/missing_assert_message.stderr", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/ea2547b8c63ce4e410c53e7fa55b127c81721454/tests%2Fui%2Fmissing_assert_message.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea2547b8c63ce4e410c53e7fa55b127c81721454/tests%2Fui%2Fmissing_assert_message.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_assert_message.stderr?ref=ea2547b8c63ce4e410c53e7fa55b127c81721454", "patch": "@@ -0,0 +1,100 @@\n+error: assert without any message\n+  --> $DIR/missing_assert_message.rs:14:5\n+   |\n+LL |     assert!(foo());\n+   |     ^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::missing-assert-message` implied by `-D warnings`\n+\n+error: assert without any message\n+  --> $DIR/missing_assert_message.rs:15:5\n+   |\n+LL |     assert_eq!(foo(), foo());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: assert without any message\n+  --> $DIR/missing_assert_message.rs:16:5\n+   |\n+LL |     assert_ne!(foo(), foo());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: assert without any message\n+  --> $DIR/missing_assert_message.rs:17:5\n+   |\n+LL |     debug_assert!(foo());\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: assert without any message\n+  --> $DIR/missing_assert_message.rs:18:5\n+   |\n+LL |     debug_assert_eq!(foo(), foo());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: assert without any message\n+  --> $DIR/missing_assert_message.rs:19:5\n+   |\n+LL |     debug_assert_ne!(foo(), foo());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: assert without any message\n+  --> $DIR/missing_assert_message.rs:24:5\n+   |\n+LL |     assert!(bar!(true));\n+   |     ^^^^^^^^^^^^^^^^^^^\n+\n+error: assert without any message\n+  --> $DIR/missing_assert_message.rs:25:5\n+   |\n+LL |     assert!(bar!(true, false));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: assert without any message\n+  --> $DIR/missing_assert_message.rs:26:5\n+   |\n+LL |     assert_eq!(bar!(true), foo());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: assert without any message\n+  --> $DIR/missing_assert_message.rs:27:5\n+   |\n+LL |     assert_ne!(bar!(true, true), bar!(true));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: assert without any message\n+  --> $DIR/missing_assert_message.rs:32:5\n+   |\n+LL |     assert!(foo(),);\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: assert without any message\n+  --> $DIR/missing_assert_message.rs:33:5\n+   |\n+LL |     assert_eq!(foo(), foo(),);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: assert without any message\n+  --> $DIR/missing_assert_message.rs:34:5\n+   |\n+LL |     assert_ne!(foo(), foo(),);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: assert without any message\n+  --> $DIR/missing_assert_message.rs:35:5\n+   |\n+LL |     debug_assert!(foo(),);\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: assert without any message\n+  --> $DIR/missing_assert_message.rs:36:5\n+   |\n+LL |     debug_assert_eq!(foo(), foo(),);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: assert without any message\n+  --> $DIR/missing_assert_message.rs:37:5\n+   |\n+LL |     debug_assert_ne!(foo(), foo(),);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 16 previous errors\n+"}]}