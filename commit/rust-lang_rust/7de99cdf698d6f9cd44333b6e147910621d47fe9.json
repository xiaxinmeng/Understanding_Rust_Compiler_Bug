{"sha": "7de99cdf698d6f9cd44333b6e147910621d47fe9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkZTk5Y2RmNjk4ZDZmOWNkNDQzMzNiNmUxNDc5MTA2MjFkNDdmZTk=", "commit": {"author": {"name": "Tatsuyuki Ishi", "email": "ishitatsuyuki@gmail.com", "date": "2017-02-03T08:42:07Z"}, "committer": {"name": "Tatsuyuki Ishi", "email": "ishitatsuyuki@gmail.com", "date": "2017-02-03T08:42:07Z"}, "message": "Merge remote tracking branch 'upstream/master'", "tree": {"sha": "aef003a38ffa76457ea77e98184a9c0fe0e895a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aef003a38ffa76457ea77e98184a9c0fe0e895a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7de99cdf698d6f9cd44333b6e147910621d47fe9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7de99cdf698d6f9cd44333b6e147910621d47fe9", "html_url": "https://github.com/rust-lang/rust/commit/7de99cdf698d6f9cd44333b6e147910621d47fe9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7de99cdf698d6f9cd44333b6e147910621d47fe9/comments", "author": {"login": "ishitatsuyuki", "id": 12389383, "node_id": "MDQ6VXNlcjEyMzg5Mzgz", "avatar_url": "https://avatars.githubusercontent.com/u/12389383?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ishitatsuyuki", "html_url": "https://github.com/ishitatsuyuki", "followers_url": "https://api.github.com/users/ishitatsuyuki/followers", "following_url": "https://api.github.com/users/ishitatsuyuki/following{/other_user}", "gists_url": "https://api.github.com/users/ishitatsuyuki/gists{/gist_id}", "starred_url": "https://api.github.com/users/ishitatsuyuki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ishitatsuyuki/subscriptions", "organizations_url": "https://api.github.com/users/ishitatsuyuki/orgs", "repos_url": "https://api.github.com/users/ishitatsuyuki/repos", "events_url": "https://api.github.com/users/ishitatsuyuki/events{/privacy}", "received_events_url": "https://api.github.com/users/ishitatsuyuki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ishitatsuyuki", "id": 12389383, "node_id": "MDQ6VXNlcjEyMzg5Mzgz", "avatar_url": "https://avatars.githubusercontent.com/u/12389383?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ishitatsuyuki", "html_url": "https://github.com/ishitatsuyuki", "followers_url": "https://api.github.com/users/ishitatsuyuki/followers", "following_url": "https://api.github.com/users/ishitatsuyuki/following{/other_user}", "gists_url": "https://api.github.com/users/ishitatsuyuki/gists{/gist_id}", "starred_url": "https://api.github.com/users/ishitatsuyuki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ishitatsuyuki/subscriptions", "organizations_url": "https://api.github.com/users/ishitatsuyuki/orgs", "repos_url": "https://api.github.com/users/ishitatsuyuki/repos", "events_url": "https://api.github.com/users/ishitatsuyuki/events{/privacy}", "received_events_url": "https://api.github.com/users/ishitatsuyuki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ccb87a532159701486ae0ca33346c838791c699", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ccb87a532159701486ae0ca33346c838791c699", "html_url": "https://github.com/rust-lang/rust/commit/3ccb87a532159701486ae0ca33346c838791c699"}, {"sha": "57ecd7aa4bc8dfd07fb0888479b25e53daf46140", "url": "https://api.github.com/repos/rust-lang/rust/commits/57ecd7aa4bc8dfd07fb0888479b25e53daf46140", "html_url": "https://github.com/rust-lang/rust/commit/57ecd7aa4bc8dfd07fb0888479b25e53daf46140"}], "stats": {"total": 254, "additions": 142, "deletions": 112}, "files": [{"sha": "c058586410dac9d27a643dbdedef185fcd70a6d4", "filename": "src/Cargo.lock", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7de99cdf698d6f9cd44333b6e147910621d47fe9/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/7de99cdf698d6f9cd44333b6e147910621d47fe9/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=7de99cdf698d6f9cd44333b6e147910621d47fe9", "patch": "@@ -61,6 +61,9 @@ dependencies = [\n [[package]]\n name = \"build_helper\"\n version = \"0.1.0\"\n+dependencies = [\n+ \"filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n \n [[package]]\n name = \"cargotest\"\n@@ -594,7 +597,7 @@ dependencies = [\n \n [[package]]\n name = \"std_shim\"\n-version = \"0.1.0\"\n+version = \"0.0.0\"\n dependencies = [\n  \"core 0.0.0\",\n  \"std 0.0.0\",\n@@ -653,7 +656,7 @@ dependencies = [\n \n [[package]]\n name = \"test_shim\"\n-version = \"0.1.0\"\n+version = \"0.0.0\"\n dependencies = [\n  \"test 0.0.0\",\n ]"}, {"sha": "19aac0f36bb27e59c2a035d7ccca2d9453c48dc9", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7de99cdf698d6f9cd44333b6e147910621d47fe9/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7de99cdf698d6f9cd44333b6e147910621d47fe9/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=7de99cdf698d6f9cd44333b6e147910621d47fe9", "patch": "@@ -383,7 +383,7 @@ pub fn krate(build: &Build,\n                 // helper crate, not tested. If it leaks through then it ends up\n                 // messing with various mtime calculations and such.\n                 if !name.contains(\"jemalloc\") && name != \"build_helper\" {\n-                    cargo.arg(\"-p\").arg(name);\n+                    cargo.arg(\"-p\").arg(&format!(\"{}:0.0.0\", name));\n                 }\n                 for dep in build.crates[name].deps.iter() {\n                     if visited.insert(dep) {"}, {"sha": "776b91028a1a3a5ea0fb780ca9e041e19c111a10", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7de99cdf698d6f9cd44333b6e147910621d47fe9/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7de99cdf698d6f9cd44333b6e147910621d47fe9/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=7de99cdf698d6f9cd44333b6e147910621d47fe9", "patch": "@@ -21,10 +21,10 @@ use std::fs::{self, File};\n use std::path::{Path, PathBuf};\n use std::process::Command;\n \n-use build_helper::output;\n+use build_helper::{output, mtime};\n use filetime::FileTime;\n \n-use util::{exe, libdir, mtime, is_dylib, copy};\n+use util::{exe, libdir, is_dylib, copy};\n use {Build, Compiler, Mode};\n \n /// Build the standard library."}, {"sha": "3dc9b8375550c1b8021d4489183fea2109b8e9c6", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7de99cdf698d6f9cd44333b6e147910621d47fe9/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7de99cdf698d6f9cd44333b6e147910621d47fe9/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=7de99cdf698d6f9cd44333b6e147910621d47fe9", "patch": "@@ -22,7 +22,8 @@ use std::io::prelude::*;\n use std::process::Command;\n \n use {Build, Compiler, Mode};\n-use util::{up_to_date, cp_r};\n+use util::cp_r;\n+use build_helper::up_to_date;\n \n /// Invoke `rustbook` as compiled in `stage` for `target` for the doc book\n /// `name` into the `out` path."}, {"sha": "df1218752d1c9bb52a3263796b01fbd5878ef43e", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 11, "deletions": 19, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7de99cdf698d6f9cd44333b6e147910621d47fe9/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7de99cdf698d6f9cd44333b6e147910621d47fe9/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=7de99cdf698d6f9cd44333b6e147910621d47fe9", "patch": "@@ -66,6 +66,7 @@\n \n #![deny(warnings)]\n \n+#[macro_use]\n extern crate build_helper;\n extern crate cmake;\n extern crate filetime;\n@@ -83,24 +84,9 @@ use std::fs::{self, File};\n use std::path::{Component, PathBuf, Path};\n use std::process::Command;\n \n-use build_helper::{run_silent, output};\n+use build_helper::{run_silent, output, mtime};\n \n-use util::{exe, mtime, libdir, add_lib_path};\n-\n-/// A helper macro to `unwrap` a result except also print out details like:\n-///\n-/// * The file/line of the panic\n-/// * The expression that failed\n-/// * The error itself\n-///\n-/// This is currently used judiciously throughout the build system rather than\n-/// using a `Result` with `try!`, but this may change one day...\n-macro_rules! t {\n-    ($e:expr) => (match $e {\n-        Ok(e) => e,\n-        Err(e) => panic!(\"{} failed with {}\", stringify!($e), e),\n-    })\n-}\n+use util::{exe, libdir, add_lib_path};\n \n mod cc;\n mod channel;\n@@ -482,7 +468,8 @@ impl Build {\n         //\n         // These variables are primarily all read by\n         // src/bootstrap/bin/{rustc.rs,rustdoc.rs}\n-        cargo.env(\"RUSTC\", self.out.join(\"bootstrap/debug/rustc\"))\n+        cargo.env(\"RUSTBUILD_NATIVE_DIR\", self.native_dir(target))\n+             .env(\"RUSTC\", self.out.join(\"bootstrap/debug/rustc\"))\n              .env(\"RUSTC_REAL\", self.compiler_path(compiler))\n              .env(\"RUSTC_STAGE\", stage.to_string())\n              .env(\"RUSTC_DEBUGINFO\", self.config.rust_debuginfo.to_string())\n@@ -746,10 +733,15 @@ impl Build {\n         }\n     }\n \n+    /// Directory for libraries built from C/C++ code and shared between stages.\n+    fn native_dir(&self, target: &str) -> PathBuf {\n+        self.out.join(target).join(\"native\")\n+    }\n+\n     /// Root output directory for rust_test_helpers library compiled for\n     /// `target`\n     fn test_helpers_out(&self, target: &str) -> PathBuf {\n-        self.out.join(target).join(\"rust-test-helpers\")\n+        self.native_dir(target).join(\"rust-test-helpers\")\n     }\n \n     /// Adds the compiler's directory of dynamic libraries to `cmd`'s dynamic"}, {"sha": "21fc61cc81484da74ba0eafa9b76ed8ba2e14be8", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7de99cdf698d6f9cd44333b6e147910621d47fe9/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7de99cdf698d6f9cd44333b6e147910621d47fe9/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=7de99cdf698d6f9cd44333b6e147910621d47fe9", "patch": "@@ -28,7 +28,8 @@ use cmake;\n use gcc;\n \n use Build;\n-use util::{self, up_to_date};\n+use util;\n+use build_helper::up_to_date;\n \n /// Compile LLVM for `target`.\n pub fn llvm(build: &Build, target: &str) {"}, {"sha": "520514f5fc95a77871ad6db413d9b30e5ad56fd8", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/7de99cdf698d6f9cd44333b6e147910621d47fe9/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7de99cdf698d6f9cd44333b6e147910621d47fe9/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=7de99cdf698d6f9cd44333b6e147910621d47fe9", "patch": "@@ -20,8 +20,6 @@ use std::path::{Path, PathBuf};\n use std::process::Command;\n use std::time::Instant;\n \n-use filetime::FileTime;\n-\n /// Returns the `name` as the filename of a static library for `target`.\n pub fn staticlib(name: &str, target: &str) -> String {\n     if target.contains(\"windows\") {\n@@ -31,13 +29,6 @@ pub fn staticlib(name: &str, target: &str) -> String {\n     }\n }\n \n-/// Returns the last-modified time for `path`, or zero if it doesn't exist.\n-pub fn mtime(path: &Path) -> FileTime {\n-    fs::metadata(path).map(|f| {\n-        FileTime::from_last_modification_time(&f)\n-    }).unwrap_or(FileTime::zero())\n-}\n-\n /// Copies a file from `src` to `dst`, attempting to use hard links and then\n /// falling back to an actually filesystem copy if necessary.\n pub fn copy(src: &Path, dst: &Path) {\n@@ -132,34 +123,6 @@ pub fn add_lib_path(path: Vec<PathBuf>, cmd: &mut Command) {\n     cmd.env(dylib_path_var(), t!(env::join_paths(list)));\n }\n \n-/// Returns whether `dst` is up to date given that the file or files in `src`\n-/// are used to generate it.\n-///\n-/// Uses last-modified time checks to verify this.\n-pub fn up_to_date(src: &Path, dst: &Path) -> bool {\n-    let threshold = mtime(dst);\n-    let meta = match fs::metadata(src) {\n-        Ok(meta) => meta,\n-        Err(e) => panic!(\"source {:?} failed to get metadata: {}\", src, e),\n-    };\n-    if meta.is_dir() {\n-        dir_up_to_date(src, &threshold)\n-    } else {\n-        FileTime::from_last_modification_time(&meta) <= threshold\n-    }\n-}\n-\n-fn dir_up_to_date(src: &Path, threshold: &FileTime) -> bool {\n-    t!(fs::read_dir(src)).map(|e| t!(e)).all(|e| {\n-        let meta = t!(e.metadata());\n-        if meta.is_dir() {\n-            dir_up_to_date(&e.path(), threshold)\n-        } else {\n-            FileTime::from_last_modification_time(&meta) < *threshold\n-        }\n-    })\n-}\n-\n /// Returns the environment variable which the dynamic library lookup path\n /// resides in for this platform.\n pub fn dylib_path_var() -> &'static str {"}, {"sha": "f8ade0616a577a44f7bb0c970d855a99f3b58937", "filename": "src/build_helper/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7de99cdf698d6f9cd44333b6e147910621d47fe9/src%2Fbuild_helper%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7de99cdf698d6f9cd44333b6e147910621d47fe9/src%2Fbuild_helper%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuild_helper%2FCargo.toml?ref=7de99cdf698d6f9cd44333b6e147910621d47fe9", "patch": "@@ -6,3 +6,6 @@ authors = [\"The Rust Project Developers\"]\n [lib]\n name = \"build_helper\"\n path = \"lib.rs\"\n+\n+[dependencies]\n+filetime = \"0.1\""}, {"sha": "3dfd29380828669ec75eb22b563baf3b6c91f5e6", "filename": "src/build_helper/lib.rs", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/7de99cdf698d6f9cd44333b6e147910621d47fe9/src%2Fbuild_helper%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7de99cdf698d6f9cd44333b6e147910621d47fe9/src%2Fbuild_helper%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuild_helper%2Flib.rs?ref=7de99cdf698d6f9cd44333b6e147910621d47fe9", "patch": "@@ -10,9 +10,30 @@\n \n #![deny(warnings)]\n \n+extern crate filetime;\n+\n+use std::fs;\n use std::process::{Command, Stdio};\n use std::path::{Path, PathBuf};\n \n+use filetime::FileTime;\n+\n+/// A helper macro to `unwrap` a result except also print out details like:\n+///\n+/// * The file/line of the panic\n+/// * The expression that failed\n+/// * The error itself\n+///\n+/// This is currently used judiciously throughout the build system rather than\n+/// using a `Result` with `try!`, but this may change one day...\n+#[macro_export]\n+macro_rules! t {\n+    ($e:expr) => (match $e {\n+        Ok(e) => e,\n+        Err(e) => panic!(\"{} failed with {}\", stringify!($e), e),\n+    })\n+}\n+\n pub fn run(cmd: &mut Command) {\n     println!(\"running: {:?}\", cmd);\n     run_silent(cmd);\n@@ -88,6 +109,56 @@ pub fn output(cmd: &mut Command) -> String {\n     String::from_utf8(output.stdout).unwrap()\n }\n \n+pub fn rerun_if_changed_anything_in_dir(dir: &Path) {\n+    let mut stack = dir.read_dir().unwrap()\n+                       .map(|e| e.unwrap())\n+                       .filter(|e| &*e.file_name() != \".git\")\n+                       .collect::<Vec<_>>();\n+    while let Some(entry) = stack.pop() {\n+        let path = entry.path();\n+        if entry.file_type().unwrap().is_dir() {\n+            stack.extend(path.read_dir().unwrap().map(|e| e.unwrap()));\n+        } else {\n+            println!(\"cargo:rerun-if-changed={}\", path.display());\n+        }\n+    }\n+}\n+\n+/// Returns the last-modified time for `path`, or zero if it doesn't exist.\n+pub fn mtime(path: &Path) -> FileTime {\n+    fs::metadata(path).map(|f| {\n+        FileTime::from_last_modification_time(&f)\n+    }).unwrap_or(FileTime::zero())\n+}\n+\n+/// Returns whether `dst` is up to date given that the file or files in `src`\n+/// are used to generate it.\n+///\n+/// Uses last-modified time checks to verify this.\n+pub fn up_to_date(src: &Path, dst: &Path) -> bool {\n+    let threshold = mtime(dst);\n+    let meta = match fs::metadata(src) {\n+        Ok(meta) => meta,\n+        Err(e) => panic!(\"source {:?} failed to get metadata: {}\", src, e),\n+    };\n+    if meta.is_dir() {\n+        dir_up_to_date(src, &threshold)\n+    } else {\n+        FileTime::from_last_modification_time(&meta) <= threshold\n+    }\n+}\n+\n+fn dir_up_to_date(src: &Path, threshold: &FileTime) -> bool {\n+    t!(fs::read_dir(src)).map(|e| t!(e)).all(|e| {\n+        let meta = t!(e.metadata());\n+        if meta.is_dir() {\n+            dir_up_to_date(&e.path(), threshold)\n+        } else {\n+            FileTime::from_last_modification_time(&meta) < *threshold\n+        }\n+    })\n+}\n+\n fn fail(s: &str) -> ! {\n     println!(\"\\n\\n{}\\n\\n\", s);\n     std::process::exit(1);"}, {"sha": "cb7852995f3b19e9f2f4fb761f0b68d519edbed4", "filename": "src/liballoc_jemalloc/build.rs", "status": "modified", "additions": 27, "deletions": 30, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/7de99cdf698d6f9cd44333b6e147910621d47fe9/src%2Fliballoc_jemalloc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7de99cdf698d6f9cd44333b6e147910621d47fe9/src%2Fliballoc_jemalloc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Fbuild.rs?ref=7de99cdf698d6f9cd44333b6e147910621d47fe9", "patch": "@@ -10,23 +10,20 @@\n \n #![deny(warnings)]\n \n+#[macro_use]\n extern crate build_helper;\n extern crate gcc;\n \n use std::env;\n-use std::path::PathBuf;\n+use std::fs::{self, File};\n+use std::path::{Path, PathBuf};\n use std::process::Command;\n-use build_helper::run;\n+use build_helper::{run, rerun_if_changed_anything_in_dir, up_to_date};\n \n fn main() {\n     println!(\"cargo:rustc-cfg=cargobuild\");\n     println!(\"cargo:rerun-if-changed=build.rs\");\n \n-    let target = env::var(\"TARGET\").expect(\"TARGET was not set\");\n-    let host = env::var(\"HOST\").expect(\"HOST was not set\");\n-    let build_dir = PathBuf::from(env::var_os(\"OUT_DIR\").unwrap());\n-    let src_dir = env::current_dir().unwrap();\n-\n     // FIXME: This is a hack to support building targets that don't\n     // support jemalloc alongside hosts that do. The jemalloc build is\n     // controlled by a feature of the std crate, and if that feature\n@@ -35,6 +32,8 @@ fn main() {\n     // that the feature set used by std is the same across all\n     // targets, which means we have to build the alloc_jemalloc crate\n     // for targets like emscripten, even if we don't use it.\n+    let target = env::var(\"TARGET\").expect(\"TARGET was not set\");\n+    let host = env::var(\"HOST\").expect(\"HOST was not set\");\n     if target.contains(\"rumprun\") || target.contains(\"bitrig\") || target.contains(\"openbsd\") ||\n        target.contains(\"msvc\") || target.contains(\"emscripten\") || target.contains(\"fuchsia\") ||\n        target.contains(\"redox\") {\n@@ -63,6 +62,23 @@ fn main() {\n         return;\n     }\n \n+    let build_dir = env::var_os(\"RUSTBUILD_NATIVE_DIR\").unwrap_or(env::var_os(\"OUT_DIR\").unwrap());\n+    let build_dir = PathBuf::from(build_dir).join(\"jemalloc\");\n+    let _ = fs::create_dir_all(&build_dir);\n+\n+    if target.contains(\"windows\") {\n+        println!(\"cargo:rustc-link-lib=static=jemalloc\");\n+    } else {\n+        println!(\"cargo:rustc-link-lib=static=jemalloc_pic\");\n+    }\n+    println!(\"cargo:rustc-link-search=native={}/lib\", build_dir.display());\n+    let src_dir = env::current_dir().unwrap().join(\"../jemalloc\");\n+    rerun_if_changed_anything_in_dir(&src_dir);\n+    let timestamp = build_dir.join(\"rustbuild.timestamp\");\n+    if up_to_date(&Path::new(\"build.rs\"), &timestamp) && up_to_date(&src_dir, &timestamp) {\n+        return\n+    }\n+\n     let compiler = gcc::Config::new().get_compiler();\n     // only msvc returns None for ar so unwrap is okay\n     let ar = build_helper::cc2ar(compiler.path(), &target).unwrap();\n@@ -72,23 +88,8 @@ fn main() {\n         .collect::<Vec<_>>()\n         .join(\" \");\n \n-    let mut stack = src_dir.join(\"../jemalloc\")\n-        .read_dir()\n-        .unwrap()\n-        .map(|e| e.unwrap())\n-        .filter(|e| &*e.file_name() != \".git\")\n-        .collect::<Vec<_>>();\n-    while let Some(entry) = stack.pop() {\n-        let path = entry.path();\n-        if entry.file_type().unwrap().is_dir() {\n-            stack.extend(path.read_dir().unwrap().map(|e| e.unwrap()));\n-        } else {\n-            println!(\"cargo:rerun-if-changed={}\", path.display());\n-        }\n-    }\n-\n     let mut cmd = Command::new(\"sh\");\n-    cmd.arg(src_dir.join(\"../jemalloc/configure\")\n+    cmd.arg(src_dir.join(\"configure\")\n                    .to_str()\n                    .unwrap()\n                    .replace(\"C:\\\\\", \"/c/\")\n@@ -164,6 +165,7 @@ fn main() {\n     }\n \n     run(&mut cmd);\n+\n     let mut make = Command::new(build_helper::make(&host));\n     make.current_dir(&build_dir)\n         .arg(\"build_lib_static\");\n@@ -176,13 +178,6 @@ fn main() {\n \n     run(&mut make);\n \n-    if target.contains(\"windows\") {\n-        println!(\"cargo:rustc-link-lib=static=jemalloc\");\n-    } else {\n-        println!(\"cargo:rustc-link-lib=static=jemalloc_pic\");\n-    }\n-    println!(\"cargo:rustc-link-search=native={}/lib\", build_dir.display());\n-\n     // The pthread_atfork symbols is used by jemalloc on android but the really\n     // old android we're building on doesn't have them defined, so just make\n     // sure the symbols are available.\n@@ -193,4 +188,6 @@ fn main() {\n             .file(\"pthread_atfork_dummy.c\")\n             .compile(\"libpthread_atfork_dummy.a\");\n     }\n+\n+    t!(File::create(&timestamp));\n }"}, {"sha": "a0844821709378f4cefb96ac46936af458330867", "filename": "src/libstd/build.rs", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/7de99cdf698d6f9cd44333b6e147910621d47fe9/src%2Flibstd%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7de99cdf698d6f9cd44333b6e147910621d47fe9/src%2Flibstd%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbuild.rs?ref=7de99cdf698d6f9cd44333b6e147910621d47fe9", "patch": "@@ -10,14 +10,15 @@\n \n #![deny(warnings)]\n \n-extern crate gcc;\n+#[macro_use]\n extern crate build_helper;\n+extern crate gcc;\n \n use std::env;\n-use std::path::PathBuf;\n+use std::fs::{self, File};\n+use std::path::{Path, PathBuf};\n use std::process::Command;\n-\n-use build_helper::run;\n+use build_helper::{run, rerun_if_changed_anything_in_dir, up_to_date};\n \n fn main() {\n     println!(\"cargo:rustc-cfg=cargobuild\");\n@@ -66,22 +67,17 @@ fn main() {\n }\n \n fn build_libbacktrace(host: &str, target: &str) {\n-    let src_dir = env::current_dir().unwrap().join(\"../libbacktrace\");\n-    let build_dir = PathBuf::from(env::var_os(\"OUT_DIR\").unwrap());\n+    let build_dir = env::var_os(\"RUSTBUILD_NATIVE_DIR\").unwrap_or(env::var_os(\"OUT_DIR\").unwrap());\n+    let build_dir = PathBuf::from(build_dir).join(\"libbacktrace\");\n+    let _ = fs::create_dir_all(&build_dir);\n \n     println!(\"cargo:rustc-link-lib=static=backtrace\");\n     println!(\"cargo:rustc-link-search=native={}/.libs\", build_dir.display());\n-\n-    let mut stack = src_dir.read_dir().unwrap()\n-                           .map(|e| e.unwrap())\n-                           .collect::<Vec<_>>();\n-    while let Some(entry) = stack.pop() {\n-        let path = entry.path();\n-        if entry.file_type().unwrap().is_dir() {\n-            stack.extend(path.read_dir().unwrap().map(|e| e.unwrap()));\n-        } else {\n-            println!(\"cargo:rerun-if-changed={}\", path.display());\n-        }\n+    let src_dir = env::current_dir().unwrap().join(\"../libbacktrace\");\n+    rerun_if_changed_anything_in_dir(&src_dir);\n+    let timestamp = build_dir.join(\"rustbuild.timestamp\");\n+    if up_to_date(&Path::new(\"build.rs\"), &timestamp) && up_to_date(&src_dir, &timestamp) {\n+        return\n     }\n \n     let compiler = gcc::Config::new().get_compiler();\n@@ -105,8 +101,11 @@ fn build_libbacktrace(host: &str, target: &str) {\n                 .env(\"AR\", &ar)\n                 .env(\"RANLIB\", format!(\"{} s\", ar.display()))\n                 .env(\"CFLAGS\", cflags));\n+\n     run(Command::new(build_helper::make(host))\n                 .current_dir(&build_dir)\n                 .arg(format!(\"INCDIR={}\", src_dir.display()))\n                 .arg(\"-j\").arg(env::var(\"NUM_JOBS\").expect(\"NUM_JOBS was not set\")));\n+\n+    t!(File::create(&timestamp));\n }"}, {"sha": "14c9c5544b188561d41302d3a22ac5a6dcbc32ee", "filename": "src/rustc/std_shim/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7de99cdf698d6f9cd44333b6e147910621d47fe9/src%2Frustc%2Fstd_shim%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7de99cdf698d6f9cd44333b6e147910621d47fe9/src%2Frustc%2Fstd_shim%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fstd_shim%2FCargo.toml?ref=7de99cdf698d6f9cd44333b6e147910621d47fe9", "patch": "@@ -21,7 +21,7 @@\n \n [package]\n name = \"std_shim\"\n-version = \"0.1.0\"\n+version = \"0.0.0\"\n authors = [\"The Rust Project Developers\"]\n \n [lib]"}, {"sha": "6ef613eee06281060bed344fae9cbc7448a5c215", "filename": "src/rustc/test_shim/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7de99cdf698d6f9cd44333b6e147910621d47fe9/src%2Frustc%2Ftest_shim%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7de99cdf698d6f9cd44333b6e147910621d47fe9/src%2Frustc%2Ftest_shim%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Ftest_shim%2FCargo.toml?ref=7de99cdf698d6f9cd44333b6e147910621d47fe9", "patch": "@@ -5,7 +5,7 @@\n \n [package]\n name = \"test_shim\"\n-version = \"0.1.0\"\n+version = \"0.0.0\"\n authors = [\"The Rust Project Developers\"]\n \n [lib]"}]}