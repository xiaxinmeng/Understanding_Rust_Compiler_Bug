{"sha": "5c05b3c03da5d37e544589e42fe9738728b27b40", "node_id": "C_kwDOAAsO6NoAKDVjMDViM2MwM2RhNWQzN2U1NDQ1ODllNDJmZTk3Mzg3MjhiMjdiNDA", "commit": {"author": {"name": "Will Crichton", "email": "wcrichto@cs.stanford.edu", "date": "2021-09-20T21:08:33Z"}, "committer": {"name": "Will Crichton", "email": "wcrichto@cs.stanford.edu", "date": "2021-10-07T02:45:25Z"}, "message": "Add target crates as inputs to reduce size of intermediates\n\nAdd tests for module-path remapping and scrape example options\n\nFind all crates with a given name", "tree": {"sha": "039666bc921185401bbb5876d13ae8cecb8cc603", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/039666bc921185401bbb5876d13ae8cecb8cc603"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c05b3c03da5d37e544589e42fe9738728b27b40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c05b3c03da5d37e544589e42fe9738728b27b40", "html_url": "https://github.com/rust-lang/rust/commit/5c05b3c03da5d37e544589e42fe9738728b27b40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c05b3c03da5d37e544589e42fe9738728b27b40/comments", "author": {"login": "willcrichton", "id": 663326, "node_id": "MDQ6VXNlcjY2MzMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/663326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willcrichton", "html_url": "https://github.com/willcrichton", "followers_url": "https://api.github.com/users/willcrichton/followers", "following_url": "https://api.github.com/users/willcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/willcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/willcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willcrichton/subscriptions", "organizations_url": "https://api.github.com/users/willcrichton/orgs", "repos_url": "https://api.github.com/users/willcrichton/repos", "events_url": "https://api.github.com/users/willcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/willcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "willcrichton", "id": 663326, "node_id": "MDQ6VXNlcjY2MzMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/663326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willcrichton", "html_url": "https://github.com/willcrichton", "followers_url": "https://api.github.com/users/willcrichton/followers", "following_url": "https://api.github.com/users/willcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/willcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/willcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willcrichton/subscriptions", "organizations_url": "https://api.github.com/users/willcrichton/orgs", "repos_url": "https://api.github.com/users/willcrichton/repos", "events_url": "https://api.github.com/users/willcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/willcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "829b1a9dd99f9f08faec8b1774798b9025bdf13b", "url": "https://api.github.com/repos/rust-lang/rust/commits/829b1a9dd99f9f08faec8b1774798b9025bdf13b", "html_url": "https://github.com/rust-lang/rust/commit/829b1a9dd99f9f08faec8b1774798b9025bdf13b"}], "stats": {"total": 161, "additions": 130, "deletions": 31}, "files": [{"sha": "409dc914597f7feb16e8ce912a0d3b0dee31d170", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5c05b3c03da5d37e544589e42fe9738728b27b40/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c05b3c03da5d37e544589e42fe9738728b27b40/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=5c05b3c03da5d37e544589e42fe9738728b27b40", "patch": "@@ -1059,20 +1059,22 @@ impl Clean<Item> for ty::AssocItem {\n                         ty::ImplContainer(_) => Some(self.defaultness),\n                         ty::TraitContainer(_) => None,\n                     };\n-                    let function = Function {\n-                        generics,\n-                        decl,\n-                        header: hir::FnHeader {\n-                            unsafety: sig.unsafety(),\n-                            abi: sig.abi(),\n-                            constness,\n-                            asyncness,\n+                    MethodItem(\n+                        Function {\n+                            generics,\n+                            decl,\n+                            header: hir::FnHeader {\n+                                unsafety: sig.unsafety(),\n+                                abi: sig.abi(),\n+                                constness,\n+                                asyncness,\n+                            },\n+                            def_id: self.def_id,\n                         },\n-                        def_id: self.def_id,\n-                    };\n-                    MethodItem(function, defaultness)\n+                        defaultness,\n+                    )\n                 } else {\n-                    let function = Function {\n+                    TyMethodItem(Function {\n                         generics,\n                         decl,\n                         header: hir::FnHeader {\n@@ -1082,8 +1084,7 @@ impl Clean<Item> for ty::AssocItem {\n                             asyncness: hir::IsAsync::NotAsync,\n                         },\n                         def_id: self.def_id,\n-                    };\n-                    TyMethodItem(function)\n+                    })\n                 }\n             }\n             ty::AssocKind::Type => {"}, {"sha": "7342478c3ec0d257d83193cb19dfc638b6b2339c", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5c05b3c03da5d37e544589e42fe9738728b27b40/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c05b3c03da5d37e544589e42fe9738728b27b40/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=5c05b3c03da5d37e544589e42fe9738728b27b40", "patch": "@@ -25,7 +25,7 @@ use crate::html::render::StylePath;\n use crate::html::static_files;\n use crate::opts;\n use crate::passes::{self, Condition, DefaultPassOption};\n-use crate::scrape_examples::AllCallLocations;\n+use crate::scrape_examples::{AllCallLocations, ScrapeExamplesOptions};\n use crate::theme;\n \n #[derive(Clone, Copy, PartialEq, Eq, Debug)]\n@@ -160,9 +160,9 @@ crate struct Options {\n     /// Whether to skip capturing stdout and stderr of tests.\n     crate nocapture: bool,\n \n-    /// Path to output file to write JSON of call sites. If this option is Some(..) then\n+    /// Configuration for scraping examples from the current crate. If this option is Some(..) then\n     /// the compiler will scrape examples and not generate documentation.\n-    crate scrape_examples: Option<PathBuf>,\n+    crate scrape_examples_options: Option<ScrapeExamplesOptions>,\n }\n \n impl fmt::Debug for Options {\n@@ -207,7 +207,7 @@ impl fmt::Debug for Options {\n             .field(\"run_check\", &self.run_check)\n             .field(\"no_run\", &self.no_run)\n             .field(\"nocapture\", &self.nocapture)\n-            .field(\"scrape_examples\", &self.scrape_examples)\n+            .field(\"scrape_examples_options\", &self.scrape_examples_options)\n             .finish()\n     }\n }\n@@ -678,7 +678,7 @@ impl Options {\n             return Err(1);\n         }\n \n-        let scrape_examples = matches.opt_str(\"scrape-examples\").map(PathBuf::from);\n+        let scrape_examples_options = ScrapeExamplesOptions::new(&matches, &diag)?;\n         let with_examples = matches.opt_strs(\"with-examples\");\n         let call_locations = crate::scrape_examples::load_call_locations(with_examples, &diag)?;\n \n@@ -753,7 +753,7 @@ impl Options {\n             crate_name,\n             output_format,\n             json_unused_externs,\n-            scrape_examples,\n+            scrape_examples_options,\n         })\n     }\n "}, {"sha": "1efe0c7a54c5a544f9b6d24557423951d2e34c84", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5c05b3c03da5d37e544589e42fe9738728b27b40/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c05b3c03da5d37e544589e42fe9738728b27b40/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=5c05b3c03da5d37e544589e42fe9738728b27b40", "patch": "@@ -621,12 +621,20 @@ fn opts() -> Vec<RustcOptGroup> {\n                 \"Make the identifiers in the HTML source code pages navigable\",\n             )\n         }),\n-        unstable(\"scrape-examples\", |o| {\n+        unstable(\"scrape-examples-output-path\", |o| {\n             o.optopt(\n                 \"\",\n-                \"scrape-examples\",\n+                \"scrape-examples-output-path\",\n                 \"\",\n-                \"collect function call information (for use with `--with-examples`)\",\n+                \"collect function call information and output at the given path\",\n+            )\n+        }),\n+        unstable(\"scrape-examples-target-crate\", |o| {\n+            o.optmulti(\n+                \"\",\n+                \"scrape-examples-target-crate\",\n+                \"\",\n+                \"collect function call information for functions from the target crate\",\n             )\n         }),\n         unstable(\"with-examples\", |o| {\n@@ -750,7 +758,7 @@ fn main_options(options: config::Options) -> MainResult {\n     // FIXME: fix this clone (especially render_options)\n     let manual_passes = options.manual_passes.clone();\n     let render_options = options.render_options.clone();\n-    let scrape_examples = options.scrape_examples.clone();\n+    let scrape_examples_options = options.scrape_examples_options.clone();\n     let config = core::create_config(options);\n \n     interface::create_compiler_and_run(config, |compiler| {\n@@ -787,8 +795,8 @@ fn main_options(options: config::Options) -> MainResult {\n                 });\n                 info!(\"finished with rustc\");\n \n-                if let Some(example_path) = scrape_examples {\n-                    return scrape_examples::run(krate, render_opts, cache, tcx, example_path);\n+                if let Some(options) = scrape_examples_options {\n+                    return scrape_examples::run(krate, render_opts, cache, tcx, options);\n                 }\n \n                 cache.crate_version = crate_version;"}, {"sha": "62557fa5c7dca97a78c141e1dcccca6d75ac969e", "filename": "src/librustdoc/scrape_examples.rs", "status": "modified", "additions": 58, "deletions": 5, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/5c05b3c03da5d37e544589e42fe9738728b27b40/src%2Flibrustdoc%2Fscrape_examples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c05b3c03da5d37e544589e42fe9738728b27b40/src%2Flibrustdoc%2Fscrape_examples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fscrape_examples.rs?ref=5c05b3c03da5d37e544589e42fe9738728b27b40", "patch": "@@ -20,11 +20,43 @@ use rustc_serialize::{\n     opaque::{Decoder, FileEncoder},\n     Decodable, Encodable,\n };\n-use rustc_span::{def_id::DefId, edition::Edition, BytePos, FileName, SourceFile};\n+use rustc_session::getopts;\n+use rustc_span::{\n+    def_id::{CrateNum, DefId},\n+    edition::Edition,\n+    BytePos, FileName, SourceFile,\n+};\n \n use std::fs;\n use std::path::PathBuf;\n \n+#[derive(Debug, Clone)]\n+crate struct ScrapeExamplesOptions {\n+    output_path: PathBuf,\n+    target_crates: Vec<String>,\n+}\n+\n+impl ScrapeExamplesOptions {\n+    crate fn new(\n+        matches: &getopts::Matches,\n+        diag: &rustc_errors::Handler,\n+    ) -> Result<Option<Self>, i32> {\n+        let output_path = matches.opt_str(\"scrape-examples-output-path\");\n+        let target_crates = matches.opt_strs(\"scrape-examples-target-crate\");\n+        match (output_path, !target_crates.is_empty()) {\n+            (Some(output_path), true) => Ok(Some(ScrapeExamplesOptions {\n+                output_path: PathBuf::from(output_path),\n+                target_crates,\n+            })),\n+            (Some(_), false) | (None, true) => {\n+                diag.err(&format!(\"must use --scrape-examples-output-path and --scrape-examples-target-crate together\"));\n+                Err(1)\n+            }\n+            (None, false) => Ok(None),\n+        }\n+    }\n+}\n+\n #[derive(Encodable, Decodable, Debug, Clone)]\n crate struct SyntaxRange {\n     crate byte_span: (u32, u32),\n@@ -83,6 +115,7 @@ struct FindCalls<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     map: Map<'tcx>,\n     cx: Context<'tcx>,\n+    target_crates: Vec<CrateNum>,\n     calls: &'a mut AllCallLocations,\n }\n \n@@ -130,6 +163,11 @@ where\n \n         // Save call site if the function resolves to a concrete definition\n         if let ty::FnDef(def_id, _) = ty.kind() {\n+            // Ignore functions not from the crate being documented\n+            if self.target_crates.iter().all(|krate| *krate != def_id.krate) {\n+                return;\n+            }\n+\n             let file = tcx.sess.source_map().lookup_char_pos(span.lo()).file;\n             let file_path = match file.name.clone() {\n                 FileName::Real(real_filename) => real_filename.into_local_path(),\n@@ -143,7 +181,7 @@ where\n                     let clean_span = crate::clean::types::Span::new(span);\n                     let url = cx.href_from_span(clean_span).unwrap();\n                     let display_name = file_path.display().to_string();\n-                    let edition = tcx.sess.edition();\n+                    let edition = span.edition();\n                     CallData { locations: Vec::new(), url, display_name, edition }\n                 };\n \n@@ -162,19 +200,34 @@ crate fn run(\n     renderopts: config::RenderOptions,\n     cache: formats::cache::Cache,\n     tcx: TyCtxt<'_>,\n-    example_path: PathBuf,\n+    options: ScrapeExamplesOptions,\n ) -> interface::Result<()> {\n     let inner = move || -> Result<(), String> {\n         // Generates source files for examples\n         let (cx, _) = Context::init(krate, renderopts, cache, tcx).map_err(|e| e.to_string())?;\n \n+        // Collect CrateIds corresponding to provided target crates\n+        // If two different versions of the crate in the dependency tree, then examples will be collcted from both.\n+        let find_crates_with_name = |target_crate: String| {\n+            tcx.crates(())\n+                .iter()\n+                .filter(move |crate_num| tcx.crate_name(**crate_num).as_str() == target_crate)\n+                .copied()\n+        };\n+        let target_crates = options\n+            .target_crates\n+            .into_iter()\n+            .map(find_crates_with_name)\n+            .flatten()\n+            .collect::<Vec<_>>();\n+\n         // Run call-finder on all items\n         let mut calls = FxHashMap::default();\n-        let mut finder = FindCalls { calls: &mut calls, tcx, map: tcx.hir(), cx };\n+        let mut finder = FindCalls { calls: &mut calls, tcx, map: tcx.hir(), cx, target_crates };\n         tcx.hir().krate().visit_all_item_likes(&mut finder.as_deep_visitor());\n \n         // Save output to provided path\n-        let mut encoder = FileEncoder::new(example_path).map_err(|e| e.to_string())?;\n+        let mut encoder = FileEncoder::new(options.output_path).map_err(|e| e.to_string())?;\n         calls.encode(&mut encoder).map_err(|e| e.to_string())?;\n         encoder.flush().map_err(|e| e.to_string())?;\n "}, {"sha": "823ae37f6efe18b3d0bf05d31c6902cb0c022e4f", "filename": "src/test/run-make/rustdoc-scrape-examples-remap/Makefile", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5c05b3c03da5d37e544589e42fe9738728b27b40/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-remap%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/5c05b3c03da5d37e544589e42fe9738728b27b40/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-remap%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-remap%2FMakefile?ref=5c05b3c03da5d37e544589e42fe9738728b27b40", "patch": "@@ -0,0 +1,22 @@\n+-include ../../run-make-fulldeps/tools.mk\n+\n+OUTPUT_DIR := \"$(TMPDIR)/rustdoc\"\n+\n+all:\n+# 1. compile the library crate and emit an rmeta\n+\t$(RUSTC) src/lib.rs --crate-name foobar --crate-type lib --emit=metadata\n+\n+# 2. scrape examples from the reverse-dependency into an ex.calls file\n+\t$(RUSTDOC) examples/ex.rs --crate-name ex --crate-type bin \\\n+\t  --extern foobar=$(TMPDIR)/libfoobar.rmeta \\\n+\t\t-Z unstable-options \\\n+\t\t--scrape-examples-output-path $(TMPDIR)/ex.calls \\\n+\t\t--scrape-examples-target-crate foobar\n+\n+# 3. pass those examples to rustdoc when documenting the library crate\n+\t$(RUSTDOC) src/lib.rs --crate-name foobar --crate-type lib --output $(OUTPUT_DIR) \\\n+\t\t-Z unstable-options \\\n+\t\t--with-examples $(TMPDIR)/ex.calls\n+\n+# 4. check that the examples were scraped successfully\n+\t$(HTMLDOCCK) $(OUTPUT_DIR) src/lib.rs"}, {"sha": "1438fdba7072c3bab5fbb2b3370550e4679c0045", "filename": "src/test/run-make/rustdoc-scrape-examples-remap/examples/ex.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c05b3c03da5d37e544589e42fe9738728b27b40/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-remap%2Fexamples%2Fex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c05b3c03da5d37e544589e42fe9738728b27b40/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-remap%2Fexamples%2Fex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-remap%2Fexamples%2Fex.rs?ref=5c05b3c03da5d37e544589e42fe9738728b27b40", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    foobar::b::foo();\n+    foobar::c::foo();\n+}"}, {"sha": "b76b4321d62aa8e066b24d213c79ccc8230b8d7b", "filename": "src/test/run-make/rustdoc-scrape-examples-remap/src/a.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5c05b3c03da5d37e544589e42fe9738728b27b40/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-remap%2Fsrc%2Fa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c05b3c03da5d37e544589e42fe9738728b27b40/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-remap%2Fsrc%2Fa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-remap%2Fsrc%2Fa.rs?ref=5c05b3c03da5d37e544589e42fe9738728b27b40", "patch": "@@ -0,0 +1 @@\n+pub fn foo() {}"}, {"sha": "b021f27da56da2188691b23d576de0db6308a10c", "filename": "src/test/run-make/rustdoc-scrape-examples-remap/src/lib.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5c05b3c03da5d37e544589e42fe9738728b27b40/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-remap%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c05b3c03da5d37e544589e42fe9738728b27b40/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-remap%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-remap%2Fsrc%2Flib.rs?ref=5c05b3c03da5d37e544589e42fe9738728b27b40", "patch": "@@ -0,0 +1,8 @@\n+// @has foobar/b/fn.foo.html '//*[@class=\"scraped-example\"]' 'ex.rs'\n+// @has foobar/c/fn.foo.html '//*[@class=\"scraped-example\"]' 'ex.rs'\n+\n+#[path = \"a.rs\"]\n+pub mod b;\n+\n+#[path = \"a.rs\"]\n+pub mod c;"}, {"sha": "419234d21b162a1e20dc3c6fdde9ea36ad306333", "filename": "src/test/rustdoc/scrape-examples-wrong-options.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c05b3c03da5d37e544589e42fe9738728b27b40/src%2Ftest%2Frustdoc%2Fscrape-examples-wrong-options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c05b3c03da5d37e544589e42fe9738728b27b40/src%2Ftest%2Frustdoc%2Fscrape-examples-wrong-options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fscrape-examples-wrong-options.rs?ref=5c05b3c03da5d37e544589e42fe9738728b27b40", "patch": "@@ -0,0 +1,2 @@\n+// should-fail\n+// compile-flags: --scrape-examples-target-crate foobar"}]}