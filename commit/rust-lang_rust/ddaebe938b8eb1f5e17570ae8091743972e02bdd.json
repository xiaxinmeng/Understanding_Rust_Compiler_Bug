{"sha": "ddaebe938b8eb1f5e17570ae8091743972e02bdd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkYWViZTkzOGI4ZWIxZjVlMTc1NzBhZTgwOTE3NDM5NzJlMDJiZGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-02T00:15:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-02T00:15:19Z"}, "message": "Auto merge of #45904 - sunjay:gat-parser, r=nikomatsakis\n\nGeneric Associated Types Parsing & Name Resolution\n\nHi!\nThis PR adds parsing for generic associated types! :tada: :tada: :tada:\n\nTracking Issue: #44265\n\n## Notes For Reviewers\n* [x] I still need to add the stdout and stderr files to my ui tests. It takes me a *long* time to compile the compiler locally, so I'm going to add this as soon as possible in the next day or so.\n* [ ] My current ui tests aren't very good or very thorough. I'm reusing the `parse_generics` and `parse_where_clause` methods from elsewhere in the parser, so my changes work without being particularly complex. I'm not sure if I should duplicate all of the generics test cases for generic associated types. It might actually be appropriate to duplicate everything here, since we don't want to rely on an implementation detail in case it changes in the future. If you think so too, I'll adapt all of the generics test cases into the generic associated types test cases.\n* [ ] There is still more work required to make the run-pass tests pass here. In particular, we need to make the following errors disappear:\n```\nerror[E0110]: lifetime parameters are not allowed on this type\n  --> ./src/test/run-pass/rfc1598-generic-associated-types/streaming_iterator.rs:23:41\n   |\n23 |     bar: <T as StreamingIterator>::Item<'static>,\n   |                                         ^^^^^^^ lifetime parameter not allowed on this type\n```\n```\nerror[E0261]: use of undeclared lifetime name `'a`\n  --> ./src/test/run-pass/rfc1598-generic-associated-types/iterable.rs:15:47\n   |\n15 |     type Iter<'a>: Iterator<Item = Self::Item<'a>>;\n   |                                               ^^ undeclared lifetime\n```\nThere is a FIXME comment in streaming_iterator. If you uncomment that line, you get the following:\n```\nerror: expected one of `!`, `+`, `,`, `::`, or `>`, found `=`\n  --> ./src/test/run-pass/rfc1598-generic-associated-types/streaming_iterator.rs:29:45\n   |\n29 | fn foo<T: for<'a> StreamingIterator<Item<'a>=&'a [i32]>>(iter: T) { /* ... */ }\n   |                                             ^ expected one of `!`, `+`, `,`, `::`, or `>` here\n```\n\nr? @nikomatsakis", "tree": {"sha": "6431764518e2f42b47197539520ebd67ecc9ead1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6431764518e2f42b47197539520ebd67ecc9ead1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ddaebe938b8eb1f5e17570ae8091743972e02bdd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ddaebe938b8eb1f5e17570ae8091743972e02bdd", "html_url": "https://github.com/rust-lang/rust/commit/ddaebe938b8eb1f5e17570ae8091743972e02bdd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ddaebe938b8eb1f5e17570ae8091743972e02bdd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70517540dad71801a2ab903fb91d3e0c7406f115", "url": "https://api.github.com/repos/rust-lang/rust/commits/70517540dad71801a2ab903fb91d3e0c7406f115", "html_url": "https://github.com/rust-lang/rust/commit/70517540dad71801a2ab903fb91d3e0c7406f115"}, {"sha": "9d5592b4364a7492222583a85c2d5f10cac786ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d5592b4364a7492222583a85c2d5f10cac786ad", "html_url": "https://github.com/rust-lang/rust/commit/9d5592b4364a7492222583a85c2d5f10cac786ad"}], "stats": {"total": 566, "additions": 486, "deletions": 80}, "files": [{"sha": "ce6e6e828da00f0f5b4c8b3d05e355a63d6ff52c", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 70, "deletions": 73, "changes": 143, "blob_url": "https://github.com/rust-lang/rust/blob/ddaebe938b8eb1f5e17570ae8091743972e02bdd/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddaebe938b8eb1f5e17570ae8091743972e02bdd/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=ddaebe938b8eb1f5e17570ae8091743972e02bdd", "patch": "@@ -734,8 +734,8 @@ impl<'a, 'tcx> Visitor<'tcx> for Resolver<'a> {\n             FnKind::ItemFn(..) => {\n                 ItemRibKind\n             }\n-            FnKind::Method(_, sig, _, _) => {\n-                MethodRibKind(!sig.decl.has_self())\n+            FnKind::Method(_, _, _, _) => {\n+                TraitOrImplItemRibKind\n             }\n             FnKind::Closure(_) => ClosureRibKind(node_id),\n         };\n@@ -823,12 +823,10 @@ enum RibKind<'a> {\n     ClosureRibKind(NodeId /* func id */),\n \n     // We passed through an impl or trait and are now in one of its\n-    // methods. Allow references to ty params that impl or trait\n+    // methods or associated types. Allow references to ty params that impl or trait\n     // binds. Disallow any other upvars (including other ty params that are\n     // upvars).\n-    //\n-    // The boolean value represents the fact that this method is static or not.\n-    MethodRibKind(bool),\n+    TraitOrImplItemRibKind,\n \n     // We passed through an item scope. Disallow upvars.\n     ItemRibKind,\n@@ -1888,34 +1886,33 @@ impl<'a> Resolver<'a> {\n                         for trait_item in trait_items {\n                             this.check_proc_macro_attrs(&trait_item.attrs);\n \n-                            match trait_item.node {\n-                                TraitItemKind::Const(ref ty, ref default) => {\n-                                    this.visit_ty(ty);\n-\n-                                    // Only impose the restrictions of\n-                                    // ConstRibKind for an actual constant\n-                                    // expression in a provided default.\n-                                    if let Some(ref expr) = *default{\n-                                        this.with_constant_rib(|this| {\n-                                            this.visit_expr(expr);\n-                                        });\n+                            let type_parameters = HasTypeParameters(&trait_item.generics,\n+                                                                    TraitOrImplItemRibKind);\n+                            this.with_type_parameter_rib(type_parameters, |this| {\n+                                match trait_item.node {\n+                                    TraitItemKind::Const(ref ty, ref default) => {\n+                                        this.visit_ty(ty);\n+\n+                                        // Only impose the restrictions of\n+                                        // ConstRibKind for an actual constant\n+                                        // expression in a provided default.\n+                                        if let Some(ref expr) = *default{\n+                                            this.with_constant_rib(|this| {\n+                                                this.visit_expr(expr);\n+                                            });\n+                                        }\n                                     }\n-                                }\n-                                TraitItemKind::Method(ref sig, _) => {\n-                                    let type_parameters =\n-                                        HasTypeParameters(&trait_item.generics,\n-                                                          MethodRibKind(!sig.decl.has_self()));\n-                                    this.with_type_parameter_rib(type_parameters, |this| {\n+                                    TraitItemKind::Method(_, _) => {\n                                         visit::walk_trait_item(this, trait_item)\n-                                    });\n-                                }\n-                                TraitItemKind::Type(..) => {\n-                                    this.with_type_parameter_rib(NoTypeParameters, |this| {\n+                                    }\n+                                    TraitItemKind::Type(..) => {\n                                         visit::walk_trait_item(this, trait_item)\n-                                    });\n-                                }\n-                                TraitItemKind::Macro(_) => panic!(\"unexpanded macro in resolve!\"),\n-                            };\n+                                    }\n+                                    TraitItemKind::Macro(_) => {\n+                                        panic!(\"unexpanded macro in resolve!\")\n+                                    }\n+                                };\n+                            });\n                         }\n                     });\n                 });\n@@ -2123,48 +2120,48 @@ impl<'a> Resolver<'a> {\n                             for impl_item in impl_items {\n                                 this.check_proc_macro_attrs(&impl_item.attrs);\n                                 this.resolve_visibility(&impl_item.vis);\n-                                match impl_item.node {\n-                                    ImplItemKind::Const(..) => {\n-                                        // If this is a trait impl, ensure the const\n-                                        // exists in trait\n-                                        this.check_trait_item(impl_item.ident,\n-                                                            ValueNS,\n-                                                            impl_item.span,\n-                                            |n, s| ResolutionError::ConstNotMemberOfTrait(n, s));\n-                                        this.with_constant_rib(|this|\n-                                            visit::walk_impl_item(this, impl_item)\n-                                        );\n-                                    }\n-                                    ImplItemKind::Method(ref sig, _) => {\n-                                        // If this is a trait impl, ensure the method\n-                                        // exists in trait\n-                                        this.check_trait_item(impl_item.ident,\n-                                                            ValueNS,\n-                                                            impl_item.span,\n-                                            |n, s| ResolutionError::MethodNotMemberOfTrait(n, s));\n-\n-                                        // We also need a new scope for the method-\n-                                        // specific type parameters.\n-                                        let type_parameters =\n-                                            HasTypeParameters(&impl_item.generics,\n-                                                            MethodRibKind(!sig.decl.has_self()));\n-                                        this.with_type_parameter_rib(type_parameters, |this| {\n-                                            visit::walk_impl_item(this, impl_item);\n-                                        });\n-                                    }\n-                                    ImplItemKind::Type(ref ty) => {\n-                                        // If this is a trait impl, ensure the type\n-                                        // exists in trait\n-                                        this.check_trait_item(impl_item.ident,\n-                                                            TypeNS,\n-                                                            impl_item.span,\n-                                            |n, s| ResolutionError::TypeNotMemberOfTrait(n, s));\n \n-                                        this.visit_ty(ty);\n+                                // We also need a new scope for the impl item type parameters.\n+                                let type_parameters = HasTypeParameters(&impl_item.generics,\n+                                                                        TraitOrImplItemRibKind);\n+                                this.with_type_parameter_rib(type_parameters, |this| {\n+                                    use self::ResolutionError::*;\n+                                    match impl_item.node {\n+                                        ImplItemKind::Const(..) => {\n+                                            // If this is a trait impl, ensure the const\n+                                            // exists in trait\n+                                            this.check_trait_item(impl_item.ident,\n+                                                                ValueNS,\n+                                                                impl_item.span,\n+                                                |n, s| ConstNotMemberOfTrait(n, s));\n+                                            this.with_constant_rib(|this|\n+                                                visit::walk_impl_item(this, impl_item)\n+                                            );\n+                                        }\n+                                        ImplItemKind::Method(_, _) => {\n+                                            // If this is a trait impl, ensure the method\n+                                            // exists in trait\n+                                            this.check_trait_item(impl_item.ident,\n+                                                                ValueNS,\n+                                                                impl_item.span,\n+                                                |n, s| MethodNotMemberOfTrait(n, s));\n+\n+                                            visit::walk_impl_item(this, impl_item);\n+                                        }\n+                                        ImplItemKind::Type(ref ty) => {\n+                                            // If this is a trait impl, ensure the type\n+                                            // exists in trait\n+                                            this.check_trait_item(impl_item.ident,\n+                                                                TypeNS,\n+                                                                impl_item.span,\n+                                                |n, s| TypeNotMemberOfTrait(n, s));\n+\n+                                            this.visit_ty(ty);\n+                                        }\n+                                        ImplItemKind::Macro(_) =>\n+                                            panic!(\"unexpanded macro in resolve!\"),\n                                     }\n-                                    ImplItemKind::Macro(_) =>\n-                                        panic!(\"unexpanded macro in resolve!\"),\n-                                }\n+                                });\n                             }\n                         });\n                     });\n@@ -3100,7 +3097,7 @@ impl<'a> Resolver<'a> {\n                                 seen.insert(node_id, depth);\n                             }\n                         }\n-                        ItemRibKind | MethodRibKind(_) => {\n+                        ItemRibKind | TraitOrImplItemRibKind => {\n                             // This was an attempt to access an upvar inside a\n                             // named function item. This is not allowed, so we\n                             // report an error.\n@@ -3124,7 +3121,7 @@ impl<'a> Resolver<'a> {\n             Def::TyParam(..) | Def::SelfTy(..) => {\n                 for rib in ribs {\n                     match rib.kind {\n-                        NormalRibKind | MethodRibKind(_) | ClosureRibKind(..) |\n+                        NormalRibKind | TraitOrImplItemRibKind | ClosureRibKind(..) |\n                         ModuleRibKind(..) | MacroDefinition(..) | ForwardTyParamBanRibKind |\n                         ConstantItemRibKind => {\n                             // Nothing to do. Continue."}, {"sha": "d4b54e896abca182f34465b92cdb1caf4dd285b0", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ddaebe938b8eb1f5e17570ae8091743972e02bdd/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddaebe938b8eb1f5e17570ae8091743972e02bdd/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=ddaebe938b8eb1f5e17570ae8091743972e02bdd", "patch": "@@ -431,6 +431,9 @@ declare_features! (\n \n     // Nested groups in `use` (RFC 2128)\n     (active, use_nested_groups, \"1.23.0\", Some(44494)),\n+\n+    // generic associated types (RFC 1598)\n+    (active, generic_associated_types, \"1.23.0\", Some(44265)),\n );\n \n declare_features! (\n@@ -1614,9 +1617,17 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                     gate_feature_post!(&self, const_fn, ti.span, \"const fn is unstable\");\n                 }\n             }\n-            ast::TraitItemKind::Type(_, Some(_)) => {\n-                gate_feature_post!(&self, associated_type_defaults, ti.span,\n-                                  \"associated type defaults are unstable\");\n+            ast::TraitItemKind::Type(_, ref default) => {\n+                // We use two if statements instead of something like match guards so that both\n+                // of these errors can be emitted if both cases apply.\n+                if default.is_some() {\n+                    gate_feature_post!(&self, associated_type_defaults, ti.span,\n+                                       \"associated type defaults are unstable\");\n+                }\n+                if ti.generics.is_parameterized() {\n+                    gate_feature_post!(&self, generic_associated_types, ti.span,\n+                                       \"generic associated types are unstable\");\n+                }\n             }\n             _ => {}\n         }\n@@ -1636,6 +1647,10 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                     gate_feature_post!(&self, const_fn, ii.span, \"const fn is unstable\");\n                 }\n             }\n+            ast::ImplItemKind::Type(_) if ii.generics.is_parameterized() => {\n+                gate_feature_post!(&self, generic_associated_types, ii.span,\n+                                   \"generic associated types are unstable\");\n+            }\n             _ => {}\n         }\n         visit::walk_impl_item(self, ii);"}, {"sha": "a02c6b764b7c9f2850891c5517482a15f0999114", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 43, "deletions": 4, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/ddaebe938b8eb1f5e17570ae8091743972e02bdd/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddaebe938b8eb1f5e17570ae8091743972e02bdd/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=ddaebe938b8eb1f5e17570ae8091743972e02bdd", "patch": "@@ -1294,9 +1294,9 @@ impl<'a> Parser<'a> {\n         let lo = self.span;\n \n         let (name, node, generics) = if self.eat_keyword(keywords::Type) {\n-            let TyParam {ident, bounds, default, ..} = self.parse_ty_param(vec![])?;\n-            self.expect(&token::Semi)?;\n-            (ident, TraitItemKind::Type(bounds, default), ast::Generics::default())\n+            let (generics, TyParam {ident, bounds, default, ..}) =\n+                self.parse_trait_item_assoc_ty(vec![])?;\n+            (ident, TraitItemKind::Type(bounds, default), generics)\n         } else if self.is_const_item() {\n             self.expect_keyword(keywords::Const)?;\n             let ident = self.parse_ident()?;\n@@ -4451,6 +4451,39 @@ impl<'a> Parser<'a> {\n         })\n     }\n \n+    /// Parses the following grammar:\n+    ///     TraitItemAssocTy = Ident [\"<\"...\">\"] [\":\" [TyParamBounds]] [\"where\" ...] [\"=\" Ty]\n+    fn parse_trait_item_assoc_ty(&mut self, preceding_attrs: Vec<Attribute>)\n+        -> PResult<'a, (ast::Generics, TyParam)> {\n+        let span = self.span;\n+        let ident = self.parse_ident()?;\n+        let mut generics = self.parse_generics()?;\n+\n+        // Parse optional colon and param bounds.\n+        let bounds = if self.eat(&token::Colon) {\n+            self.parse_ty_param_bounds()?\n+        } else {\n+            Vec::new()\n+        };\n+        generics.where_clause = self.parse_where_clause()?;\n+\n+        let default = if self.eat(&token::Eq) {\n+            Some(self.parse_ty()?)\n+        } else {\n+            None\n+        };\n+        self.expect(&token::Semi)?;\n+\n+        Ok((generics, TyParam {\n+            attrs: preceding_attrs.into(),\n+            ident,\n+            id: ast::DUMMY_NODE_ID,\n+            bounds,\n+            default,\n+            span,\n+        }))\n+    }\n+\n     /// Parses (possibly empty) list of lifetime and type parameters, possibly including\n     /// trailing comma and erroneous trailing attributes.\n     pub fn parse_generic_params(&mut self) -> PResult<'a, (Vec<LifetimeDef>, Vec<TyParam>)> {\n@@ -4992,12 +5025,18 @@ impl<'a> Parser<'a> {\n         let vis = self.parse_visibility(false)?;\n         let defaultness = self.parse_defaultness()?;\n         let (name, node, generics) = if self.eat_keyword(keywords::Type) {\n+            // This parses the grammar:\n+            //     ImplItemAssocTy = Ident [\"<\"...\">\"] [\"where\" ...] \"=\" Ty \";\"\n             let name = self.parse_ident()?;\n+            let mut generics = self.parse_generics()?;\n+            generics.where_clause = self.parse_where_clause()?;\n             self.expect(&token::Eq)?;\n             let typ = self.parse_ty()?;\n             self.expect(&token::Semi)?;\n-            (name, ast::ImplItemKind::Type(typ), ast::Generics::default())\n+            (name, ast::ImplItemKind::Type(typ), generics)\n         } else if self.is_const_item() {\n+            // This parses the grammar:\n+            //     ImplItemConst = \"const\" Ident \":\" Ty \"=\" Expr \";\"\n             self.expect_keyword(keywords::Const)?;\n             let name = self.parse_ident()?;\n             self.expect(&token::Colon)?;"}, {"sha": "724ec2496f24cdc6a342f903b786e68caa392969", "filename": "src/test/compile-fail/feature-gate-generic_associated_types.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ddaebe938b8eb1f5e17570ae8091743972e02bdd/src%2Ftest%2Fcompile-fail%2Ffeature-gate-generic_associated_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddaebe938b8eb1f5e17570ae8091743972e02bdd/src%2Ftest%2Fcompile-fail%2Ffeature-gate-generic_associated_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-generic_associated_types.rs?ref=ddaebe938b8eb1f5e17570ae8091743972e02bdd", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::ops::Deref;\n+\n+trait PointerFamily<U> {\n+    type Pointer<T>: Deref<Target = T>;\n+    //~^ ERROR generic associated types are unstable\n+    type Pointer2<T>: Deref<Target = T> where T: Clone, U: Clone;\n+    //~^ ERROR generic associated types are unstable\n+}\n+\n+struct Foo;\n+impl PointerFamily<u32> for Foo {\n+    type Pointer<usize> = Box<usize>;\n+    //~^ ERROR generic associated types are unstable\n+    type Pointer2<u32> = Box<u32>;\n+    //~^ ERROR generic associated types are unstable\n+}\n+\n+fn main() {}"}, {"sha": "87a0b33e63b5ed99f6b090b1b963a61e803d5cb4", "filename": "src/test/ui/rfc1598-generic-associated-types/construct_with_other_type.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ddaebe938b8eb1f5e17570ae8091743972e02bdd/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddaebe938b8eb1f5e17570ae8091743972e02bdd/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.rs?ref=ddaebe938b8eb1f5e17570ae8091743972e02bdd", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(generic_associated_types)]\n+\n+//FIXME(#44265): \"undeclared lifetime\" errors will be addressed in a follow-up PR\n+\n+trait Foo {\n+    type Bar<'a, 'b>;\n+}\n+\n+trait Baz {\n+    type Quux<'a>;\n+}\n+\n+impl<T> Baz for T where T: Foo {\n+    type Quux<'a> = <T as Foo>::Bar<'a, 'static>;\n+    //~^ ERROR undeclared lifetime\n+}\n+\n+fn main() {}"}, {"sha": "3c3c5d12627818fd533ba5cbd8c6ac1d6fef4789", "filename": "src/test/ui/rfc1598-generic-associated-types/construct_with_other_type.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ddaebe938b8eb1f5e17570ae8091743972e02bdd/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ddaebe938b8eb1f5e17570ae8091743972e02bdd/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.stderr?ref=ddaebe938b8eb1f5e17570ae8091743972e02bdd", "patch": "@@ -0,0 +1,8 @@\n+error[E0261]: use of undeclared lifetime name `'a`\n+  --> $DIR/construct_with_other_type.rs:24:37\n+   |\n+24 |     type Quux<'a> = <T as Foo>::Bar<'a, 'static>;\n+   |                                     ^^ undeclared lifetime\n+\n+error: aborting due to previous error\n+"}, {"sha": "b12c075d1329178ca5f797339919262b8543ddc4", "filename": "src/test/ui/rfc1598-generic-associated-types/empty_generics.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ddaebe938b8eb1f5e17570ae8091743972e02bdd/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fempty_generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddaebe938b8eb1f5e17570ae8091743972e02bdd/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fempty_generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fempty_generics.rs?ref=ddaebe938b8eb1f5e17570ae8091743972e02bdd", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(generic_associated_types)]\n+\n+trait Foo {\n+    type Bar<,>;\n+    //~^ ERROR expected one of `>`, identifier, or lifetime, found `,`\n+}\n+\n+fn main() {}"}, {"sha": "de0c1e310bcb8f1ea6bfe308124dd04e479d57c1", "filename": "src/test/ui/rfc1598-generic-associated-types/empty_generics.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ddaebe938b8eb1f5e17570ae8091743972e02bdd/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fempty_generics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ddaebe938b8eb1f5e17570ae8091743972e02bdd/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fempty_generics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fempty_generics.stderr?ref=ddaebe938b8eb1f5e17570ae8091743972e02bdd", "patch": "@@ -0,0 +1,8 @@\n+error: expected one of `>`, identifier, or lifetime, found `,`\n+  --> $DIR/empty_generics.rs:14:14\n+   |\n+14 |     type Bar<,>;\n+   |              ^ expected one of `>`, identifier, or lifetime here\n+\n+error: aborting due to previous error\n+"}, {"sha": "eec061bc96ba42b4419ff146d3acc423fbe367c8", "filename": "src/test/ui/rfc1598-generic-associated-types/generic-associated-types-where.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/ddaebe938b8eb1f5e17570ae8091743972e02bdd/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric-associated-types-where.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddaebe938b8eb1f5e17570ae8091743972e02bdd/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric-associated-types-where.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric-associated-types-where.rs?ref=ddaebe938b8eb1f5e17570ae8091743972e02bdd", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(generic_associated_types)]\n+\n+// Checking the interaction with this other feature\n+#![feature(associated_type_defaults)]\n+\n+//FIXME(#44265): \"undeclared lifetime\" errors will be addressed in a follow-up PR\n+\n+use std::fmt::{Display, Debug};\n+\n+trait Foo {\n+    type Assoc where Self: Sized;\n+    type Assoc2<T> where T: Display;\n+    type Assoc3<T>;\n+    type WithDefault<T> where T: Debug = Iterator<Item=T>;\n+    type NoGenerics;\n+}\n+\n+struct Bar;\n+\n+impl Foo for Bar {\n+    type Assoc = usize;\n+    type Assoc2<T> = Vec<T>;\n+    type Assoc3<T> where T: Iterator = Vec<T>;\n+    type WithDefault<'a, T> = &'a Iterator<T>;\n+    //~^ ERROR undeclared lifetime\n+    type NoGenerics = ::std::cell::Cell<i32>;\n+}\n+\n+fn main() {}"}, {"sha": "e65da028b23b5e83f9a7fc375e5cc1a35f42b333", "filename": "src/test/ui/rfc1598-generic-associated-types/generic-associated-types-where.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ddaebe938b8eb1f5e17570ae8091743972e02bdd/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric-associated-types-where.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ddaebe938b8eb1f5e17570ae8091743972e02bdd/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric-associated-types-where.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric-associated-types-where.stderr?ref=ddaebe938b8eb1f5e17570ae8091743972e02bdd", "patch": "@@ -0,0 +1,8 @@\n+error[E0261]: use of undeclared lifetime name `'a`\n+  --> $DIR/generic-associated-types-where.rs:34:32\n+   |\n+34 |     type WithDefault<'a, T> = &'a Iterator<T>;\n+   |                                ^^ undeclared lifetime\n+\n+error: aborting due to previous error\n+"}, {"sha": "0019c4be5e8e0c9f4c6db1cb3271bdd7ba58a244", "filename": "src/test/ui/rfc1598-generic-associated-types/iterable.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ddaebe938b8eb1f5e17570ae8091743972e02bdd/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddaebe938b8eb1f5e17570ae8091743972e02bdd/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.rs?ref=ddaebe938b8eb1f5e17570ae8091743972e02bdd", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(generic_associated_types)]\n+\n+//FIXME(#44265): \"undeclared lifetime\" errors will be addressed in a follow-up PR\n+\n+trait Iterable {\n+    type Item<'a>;\n+    type Iter<'a>: Iterator<Item = Self::Item<'a>>;\n+    //~^ ERROR undeclared lifetime\n+\n+    fn iter<'a>(&'a self) -> Self::Iter<'a>;\n+}\n+\n+fn main() {}"}, {"sha": "0e565047afe63a84007baeba8308e245f4e79b78", "filename": "src/test/ui/rfc1598-generic-associated-types/iterable.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ddaebe938b8eb1f5e17570ae8091743972e02bdd/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ddaebe938b8eb1f5e17570ae8091743972e02bdd/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.stderr?ref=ddaebe938b8eb1f5e17570ae8091743972e02bdd", "patch": "@@ -0,0 +1,8 @@\n+error[E0261]: use of undeclared lifetime name `'a`\n+  --> $DIR/iterable.rs:17:47\n+   |\n+17 |     type Iter<'a>: Iterator<Item = Self::Item<'a>>;\n+   |                                               ^^ undeclared lifetime\n+\n+error: aborting due to previous error\n+"}, {"sha": "0e598fa14b19815087a0363312959f9a47057c1b", "filename": "src/test/ui/rfc1598-generic-associated-types/parse/in-trait-impl.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ddaebe938b8eb1f5e17570ae8091743972e02bdd/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fparse%2Fin-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddaebe938b8eb1f5e17570ae8091743972e02bdd/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fparse%2Fin-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fparse%2Fin-trait-impl.rs?ref=ddaebe938b8eb1f5e17570ae8091743972e02bdd", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z parse-only\n+// must-compile-successfully\n+\n+#![feature(generic_associated_types)]\n+\n+impl<T> Baz for T where T: Foo {\n+    type Quux<'a> = <T as Foo>::Bar<'a, 'static>;\n+}\n+\n+fn main() {}"}, {"sha": "8ab519be630d401073efff6a766779c206bf6acb", "filename": "src/test/ui/rfc1598-generic-associated-types/parse/in-trait.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/ddaebe938b8eb1f5e17570ae8091743972e02bdd/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fparse%2Fin-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddaebe938b8eb1f5e17570ae8091743972e02bdd/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fparse%2Fin-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fparse%2Fin-trait.rs?ref=ddaebe938b8eb1f5e17570ae8091743972e02bdd", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z parse-only\n+// must-compile-successfully\n+\n+#![feature(generic_associated_types)]\n+\n+use std::ops::Deref;\n+\n+trait Foo {\n+    type Bar<'a>;\n+    type Bar<'a, 'b>;\n+    type Bar<'a, 'b,>;\n+    type Bar<'a, 'b, T>;\n+    type Bar<'a, 'b, T, U>;\n+    type Bar<'a, 'b, T, U,>;\n+    type Bar<'a, 'b, T: Debug, U,>;\n+    type Bar<'a, 'b, T: Debug, U,>: Debug;\n+    type Bar<'a, 'b, T: Debug, U,>: Deref<Target = T> + Into<U>;\n+    type Bar<'a, 'b, T: Debug, U,> where T: Deref<Target = U>, U: Into<T>;\n+    type Bar<'a, 'b, T: Debug, U,>: Deref<Target = T> + Into<U>\n+        where T: Deref<Target = U>, U: Into<T>;\n+}\n+\n+fn main() {}"}, {"sha": "cbeeb1d6ca7b292686f21deaa02e27405e47ace6", "filename": "src/test/ui/rfc1598-generic-associated-types/pointer_family.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/ddaebe938b8eb1f5e17570ae8091743972e02bdd/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fpointer_family.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddaebe938b8eb1f5e17570ae8091743972e02bdd/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fpointer_family.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fpointer_family.rs?ref=ddaebe938b8eb1f5e17570ae8091743972e02bdd", "patch": "@@ -0,0 +1,50 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(generic_associated_types)]\n+\n+//FIXME(#44265): \"type parameter not allowed\" errors will be addressed in a follow-up PR\n+\n+use std::rc::Rc;\n+use std::sync::Arc;\n+use std::ops::Deref;\n+\n+trait PointerFamily {\n+    type Pointer<T>: Deref<Target = T>;\n+    fn new<T>(value: T) -> Self::Pointer<T>;\n+    //~^ ERROR type parameters are not allowed on this type [E0109]\n+}\n+\n+struct ArcFamily;\n+\n+impl PointerFamily for ArcFamily {\n+    type Pointer<T> = Arc<T>;\n+    fn new<T>(value: T) -> Self::Pointer<T> {\n+    //~^ ERROR type parameters are not allowed on this type [E0109]\n+        Arc::new(value)\n+    }\n+}\n+\n+struct RcFamily;\n+\n+impl PointerFamily for RcFamily {\n+    type Pointer<T> = Rc<T>;\n+    fn new<T>(value: T) -> Self::Pointer<T> {\n+    //~^ ERROR type parameters are not allowed on this type [E0109]\n+        Rc::new(value)\n+    }\n+}\n+\n+struct Foo<P: PointerFamily> {\n+    bar: P::Pointer<String>,\n+    //~^ ERROR type parameters are not allowed on this type [E0109]\n+}\n+\n+fn main() {}"}, {"sha": "cc7f06f3b86d5f113b1c950ef9793210e058ce0d", "filename": "src/test/ui/rfc1598-generic-associated-types/pointer_family.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ddaebe938b8eb1f5e17570ae8091743972e02bdd/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fpointer_family.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ddaebe938b8eb1f5e17570ae8091743972e02bdd/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fpointer_family.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fpointer_family.stderr?ref=ddaebe938b8eb1f5e17570ae8091743972e02bdd", "patch": "@@ -0,0 +1,26 @@\n+error[E0109]: type parameters are not allowed on this type\n+  --> $DIR/pointer_family.rs:46:21\n+   |\n+46 |     bar: P::Pointer<String>,\n+   |                     ^^^^^^ type parameter not allowed\n+\n+error[E0109]: type parameters are not allowed on this type\n+  --> $DIR/pointer_family.rs:21:42\n+   |\n+21 |     fn new<T>(value: T) -> Self::Pointer<T>;\n+   |                                          ^ type parameter not allowed\n+\n+error[E0109]: type parameters are not allowed on this type\n+  --> $DIR/pointer_family.rs:29:42\n+   |\n+29 |     fn new<T>(value: T) -> Self::Pointer<T> {\n+   |                                          ^ type parameter not allowed\n+\n+error[E0109]: type parameters are not allowed on this type\n+  --> $DIR/pointer_family.rs:39:42\n+   |\n+39 |     fn new<T>(value: T) -> Self::Pointer<T> {\n+   |                                          ^ type parameter not allowed\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "f9e270ee92e22999d832518d729288f9a66786d7", "filename": "src/test/ui/rfc1598-generic-associated-types/streaming_iterator.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/ddaebe938b8eb1f5e17570ae8091743972e02bdd/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fstreaming_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddaebe938b8eb1f5e17570ae8091743972e02bdd/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fstreaming_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fstreaming_iterator.rs?ref=ddaebe938b8eb1f5e17570ae8091743972e02bdd", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(generic_associated_types)]\n+\n+//FIXME(#44265): \"lifetime parameter not allowed on this type\" errors will be addressed in a\n+// follow-up PR\n+\n+use std::fmt::Display;\n+\n+trait StreamingIterator {\n+    type Item<'a>;\n+    // Applying the lifetime parameter `'a` to `Self::Item` inside the trait.\n+    fn next<'a>(&'a self) -> Option<Self::Item<'a>>;\n+    //~^ ERROR lifetime parameters are not allowed on this type [E0110]\n+}\n+\n+struct Foo<T: StreamingIterator> {\n+    // Applying a concrete lifetime to the constructor outside the trait.\n+    bar: <T as StreamingIterator>::Item<'static>,\n+    //~^ ERROR lifetime parameters are not allowed on this type [E0110]\n+}\n+\n+// Users can bound parameters by the type constructed by that trait's associated type constructor\n+// of a trait using HRTB. Both type equality bounds and trait bounds of this kind are valid:\n+//FIXME(sunjay): This next line should parse and be valid\n+//fn foo<T: for<'a> StreamingIterator<Item<'a>=&'a [i32]>>(iter: T) { /* ... */ }\n+fn foo<T>(iter: T) where T: StreamingIterator, for<'a> T::Item<'a>: Display { /* ... */ }\n+//~^ ERROR lifetime parameters are not allowed on this type [E0110]\n+\n+fn main() {}"}, {"sha": "b1908d022ed067cbd4e9c84789d206a0e34cad95", "filename": "src/test/ui/rfc1598-generic-associated-types/streaming_iterator.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ddaebe938b8eb1f5e17570ae8091743972e02bdd/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fstreaming_iterator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ddaebe938b8eb1f5e17570ae8091743972e02bdd/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fstreaming_iterator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fstreaming_iterator.stderr?ref=ddaebe938b8eb1f5e17570ae8091743972e02bdd", "patch": "@@ -0,0 +1,20 @@\n+error[E0110]: lifetime parameters are not allowed on this type\n+  --> $DIR/streaming_iterator.rs:27:41\n+   |\n+27 |     bar: <T as StreamingIterator>::Item<'static>,\n+   |                                         ^^^^^^^ lifetime parameter not allowed on this type\n+\n+error[E0110]: lifetime parameters are not allowed on this type\n+  --> $DIR/streaming_iterator.rs:35:64\n+   |\n+35 | fn foo<T>(iter: T) where T: StreamingIterator, for<'a> T::Item<'a>: Display { /* ... */ }\n+   |                                                                ^^ lifetime parameter not allowed on this type\n+\n+error[E0110]: lifetime parameters are not allowed on this type\n+  --> $DIR/streaming_iterator.rs:21:48\n+   |\n+21 |     fn next<'a>(&'a self) -> Option<Self::Item<'a>>;\n+   |                                                ^^ lifetime parameter not allowed on this type\n+\n+error: aborting due to 3 previous errors\n+"}]}