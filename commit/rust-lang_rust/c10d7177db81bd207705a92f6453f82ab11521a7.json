{"sha": "c10d7177db81bd207705a92f6453f82ab11521a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxMGQ3MTc3ZGI4MWJkMjA3NzA1YTkyZjY0NTNmODJhYjExNTIxYTc=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-22T01:45:02Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T23:54:33Z"}, "message": "librustc: De-`@mut` `ImportResolution::value_id`", "tree": {"sha": "224b1b8e514e34d64d6977fe9982f48ce0676700", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/224b1b8e514e34d64d6977fe9982f48ce0676700"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c10d7177db81bd207705a92f6453f82ab11521a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c10d7177db81bd207705a92f6453f82ab11521a7", "html_url": "https://github.com/rust-lang/rust/commit/c10d7177db81bd207705a92f6453f82ab11521a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c10d7177db81bd207705a92f6453f82ab11521a7/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fe84118a66c0f37bc8bcb3e3a0b8a235440a5ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fe84118a66c0f37bc8bcb3e3a0b8a235440a5ad", "html_url": "https://github.com/rust-lang/rust/commit/5fe84118a66c0f37bc8bcb3e3a0b8a235440a5ad"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "b7a44fd948dc8897dd6b157ac8cf61bbb570b3c2", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c10d7177db81bd207705a92f6453f82ab11521a7/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10d7177db81bd207705a92f6453f82ab11521a7/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=c10d7177db81bd207705a92f6453f82ab11521a7", "patch": "@@ -358,7 +358,7 @@ struct ImportResolution {\n     value_target: RefCell<Option<Target>>,\n     /// The source node of the `use` directive leading to the value target\n     /// being non-none\n-    value_id: NodeId,\n+    value_id: Cell<NodeId>,\n \n     /// The type that this `use` directive names, if there is one.\n     type_target: Option<Target>,\n@@ -371,7 +371,7 @@ impl ImportResolution {\n     fn new(id: NodeId, is_public: bool) -> ImportResolution {\n         ImportResolution {\n             type_id: id,\n-            value_id: id,\n+            value_id: Cell::new(id),\n             outstanding_references: Cell::new(0),\n             value_target: RefCell::new(None),\n             type_target: None,\n@@ -390,7 +390,7 @@ impl ImportResolution {\n     fn id(&self, namespace: Namespace) -> NodeId {\n         match namespace {\n             TypeNS  => self.type_id,\n-            ValueNS => self.value_id,\n+            ValueNS => self.value_id.get(),\n         }\n     }\n }\n@@ -1974,7 +1974,7 @@ impl Resolver {\n \n                         // the source of this name is different now\n                         resolution.type_id = id;\n-                        resolution.value_id = id;\n+                        resolution.value_id.set(id);\n                     }\n                     None => {\n                         debug!(\"(building import directive) creating new\");\n@@ -2421,7 +2421,7 @@ impl Resolver {\n                 debug!(\"(resolving single import) found value target\");\n                 import_resolution.value_target.set(\n                     Some(Target::new(target_module, name_bindings)));\n-                import_resolution.value_id = directive.id;\n+                import_resolution.value_id.set(directive.id);\n                 used_public = name_bindings.defined_in_public_namespace(ValueNS);\n             }\n             UnboundResult => { /* Continue. */ }\n@@ -2598,7 +2598,7 @@ impl Resolver {\n                 debug!(\"(resolving glob import) ... for value target\");\n                 dest_import_resolution.value_target.set(\n                     Some(Target::new(containing_module, name_bindings)));\n-                dest_import_resolution.value_id = id;\n+                dest_import_resolution.value_id.set(id);\n             }\n             if name_bindings.defined_in_public_namespace(TypeNS) {\n                 debug!(\"(resolving glob import) ... for type target\");"}]}