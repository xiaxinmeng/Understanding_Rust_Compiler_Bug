{"sha": "f2973665935161bb2b2eca3f41c33a4fd2fe82c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyOTczNjY1OTM1MTYxYmIyYjJlY2EzZjQxYzMzYTRmZDJmZTgyYzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-30T19:51:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-30T19:51:25Z"}, "message": "auto merge of #16859 : alexcrichton/rust/snapshots, r=huonw", "tree": {"sha": "285aa850b2763a426fdd2a874d100261de3d7024", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/285aa850b2763a426fdd2a874d100261de3d7024"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2973665935161bb2b2eca3f41c33a4fd2fe82c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2973665935161bb2b2eca3f41c33a4fd2fe82c4", "html_url": "https://github.com/rust-lang/rust/commit/f2973665935161bb2b2eca3f41c33a4fd2fe82c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbacdbc5f3bc4f401a96177df8efd2eb765e8799", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbacdbc5f3bc4f401a96177df8efd2eb765e8799", "html_url": "https://github.com/rust-lang/rust/commit/cbacdbc5f3bc4f401a96177df8efd2eb765e8799"}, {"sha": "d15d55973946f8f582ba69b1789b5b5d35da5b2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d15d55973946f8f582ba69b1789b5b5d35da5b2d", "html_url": "https://github.com/rust-lang/rust/commit/d15d55973946f8f582ba69b1789b5b5d35da5b2d"}], "stats": {"total": 735, "additions": 11, "deletions": 724}, "files": [{"sha": "643da9703648f5fbdc841b1369d85137aecd4df2", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=f2973665935161bb2b2eca3f41c33a4fd2fe82c4", "patch": "@@ -49,16 +49,7 @@ struct Node<T> {\n     value: T,\n }\n \n-/// Note: stage0-specific version that lacks bound on A.\n-#[cfg(stage0)]\n-pub struct Items<'a, T> {\n-    head: &'a Link<T>,\n-    tail: Rawlink<Node<T>>,\n-    nelem: uint,\n-}\n-\n /// An iterator over references to the items of a `DList`.\n-#[cfg(not(stage0))]\n pub struct Items<'a, T:'a> {\n     head: &'a Link<T>,\n     tail: Rawlink<Node<T>>,\n@@ -70,17 +61,7 @@ impl<'a, T> Clone for Items<'a, T> {\n     fn clone(&self) -> Items<'a, T> { *self }\n }\n \n-/// Note: stage0-specific version that lacks bound on A.\n-#[cfg(stage0)]\n-pub struct MutItems<'a, T> {\n-    list: &'a mut DList<T>,\n-    head: Rawlink<Node<T>>,\n-    tail: Rawlink<Node<T>>,\n-    nelem: uint,\n-}\n-\n /// An iterator over mutable references to the items of a `DList`.\n-#[cfg(not(stage0))]\n pub struct MutItems<'a, T:'a> {\n     list: &'a mut DList<T>,\n     head: Rawlink<Node<T>>,"}, {"sha": "175597c77f61ab52665f650a464adbb66cf4df73", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=f2973665935161bb2b2eca3f41c33a4fd2fe82c4", "patch": "@@ -23,9 +23,6 @@\n #![feature(unsafe_destructor, import_shadowing)]\n #![no_std]\n \n-// NOTE(stage0, pcwalton): Remove after snapshot.\n-#![allow(unknown_features)]\n-\n #[phase(plugin, link)] extern crate core;\n extern crate unicode;\n extern crate alloc;"}, {"sha": "da8cf085218f453bef6fd53f3303ed64825e8e86", "filename": "src/libcollections/priority_queue.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibcollections%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibcollections%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fpriority_queue.rs?ref=f2973665935161bb2b2eca3f41c33a4fd2fe82c4", "patch": "@@ -515,14 +515,7 @@ impl<T: Ord> PriorityQueue<T> {\n     }\n }\n \n-/// Note: stage0-specific version that lacks bound on A.\n-#[cfg(stage0)]\n-pub struct Items <'a, T> {\n-    iter: slice::Items<'a, T>,\n-}\n-\n /// `PriorityQueue` iterator.\n-#[cfg(not(stage0))]\n pub struct Items <'a, T:'a> {\n     iter: slice::Items<'a, T>,\n }"}, {"sha": "c71367265db02ec01de49acdcb2c578e4b7bf333", "filename": "src/libcollections/ringbuf.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibcollections%2Fringbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibcollections%2Fringbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fringbuf.rs?ref=f2973665935161bb2b2eca3f41c33a4fd2fe82c4", "patch": "@@ -293,17 +293,7 @@ impl<T> RingBuf<T> {\n     }\n }\n \n-/// Note: stage0-specific version that lacks bound on A.\n-#[cfg(stage0)]\n-pub struct Items<'a, T> {\n-    lo: uint,\n-    index: uint,\n-    rindex: uint,\n-    elts: &'a [Option<T>],\n-}\n-\n /// `RingBuf` iterator.\n-#[cfg(not(stage0))]\n pub struct Items<'a, T:'a> {\n     lo: uint,\n     index: uint,\n@@ -358,16 +348,7 @@ impl<'a, T> RandomAccessIterator<&'a T> for Items<'a, T> {\n     }\n }\n \n-/// Note: stage0-specific version that lacks bound on A.\n-#[cfg(stage0)]\n-pub struct MutItems<'a, T> {\n-    remaining1: &'a mut [Option<T>],\n-    remaining2: &'a mut [Option<T>],\n-    nelts: uint,\n-}\n-\n /// `RingBuf` mutable iterator.\n-#[cfg(not(stage0))]\n pub struct MutItems<'a, T:'a> {\n     remaining1: &'a mut [Option<T>],\n     remaining2: &'a mut [Option<T>],"}, {"sha": "b3b3bb1ea22434ba8086842742d621c30c20d906", "filename": "src/libcollections/smallintmap.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibcollections%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibcollections%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fsmallintmap.rs?ref=f2973665935161bb2b2eca3f41c33a4fd2fe82c4", "patch": "@@ -489,16 +489,7 @@ macro_rules! double_ended_iterator {\n     }\n }\n \n-/// Note: stage0-specific version that lacks bound on A.\n-#[cfg(stage0)]\n-pub struct Entries<'a, T> {\n-    front: uint,\n-    back: uint,\n-    iter: slice::Items<'a, Option<T>>\n-}\n-\n /// Forward iterator over a map.\n-#[cfg(not(stage0))]\n pub struct Entries<'a, T:'a> {\n     front: uint,\n     back: uint,\n@@ -508,17 +499,8 @@ pub struct Entries<'a, T:'a> {\n iterator!(impl Entries -> (uint, &'a T), get_ref)\n double_ended_iterator!(impl Entries -> (uint, &'a T), get_ref)\n \n-/// Note: stage0-specific version that lacks bound on A.\n-#[cfg(stage0)]\n-pub struct MutEntries<'a, T> {\n-    front: uint,\n-    back: uint,\n-    iter: slice::MutItems<'a, Option<T>>\n-}\n-\n /// Forward iterator over the key-value pairs of a map, with the\n /// values being mutable.\n-#[cfg(not(stage0))]\n pub struct MutEntries<'a, T:'a> {\n     front: uint,\n     back: uint,"}, {"sha": "80a7c6d4bad1dc5f90ae2f3342ffa46227512e8c", "filename": "src/libcollections/treemap.rs", "status": "modified", "additions": 0, "deletions": 102, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibcollections%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibcollections%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftreemap.rs?ref=f2973665935161bb2b2eca3f41c33a4fd2fe82c4", "patch": "@@ -668,20 +668,7 @@ impl<K: Ord, V> TreeMap<K, V> {\n     }\n }\n \n-/// Note: stage0-specific version that lacks bound on A.\n-#[cfg(stage0)]\n-pub struct Entries<'a, K, V> {\n-    stack: Vec<&'a TreeNode<K, V>>,\n-    // See the comment on MutEntries; this is just to allow\n-    // code-sharing (for this immutable-values iterator it *could* very\n-    // well be Option<&'a TreeNode<K,V>>).\n-    node: *const TreeNode<K, V>,\n-    remaining_min: uint,\n-    remaining_max: uint\n-}\n-\n /// Lazy forward iterator over a map\n-#[cfg(not(stage0))]\n pub struct Entries<'a, K:'a, V:'a> {\n     stack: Vec<&'a TreeNode<K, V>>,\n     // See the comment on MutEntries; this is just to allow\n@@ -692,49 +679,13 @@ pub struct Entries<'a, K:'a, V:'a> {\n     remaining_max: uint\n }\n \n-/// Note: stage0-specific version that lacks bound on A.\n-#[cfg(stage0)]\n-pub struct RevEntries<'a, K, V> {\n-    iter: Entries<'a, K, V>,\n-}\n-\n /// Lazy backward iterator over a map\n-#[cfg(not(stage0))]\n pub struct RevEntries<'a, K:'a, V:'a> {\n     iter: Entries<'a, K, V>,\n }\n \n-/// Note: stage0-specific version that lacks bound on A.\n-#[cfg(stage0)]\n-pub struct MutEntries<'a, K, V> {\n-    stack: Vec<&'a mut TreeNode<K, V>>,\n-    // Unfortunately, we require some unsafe-ness to get around the\n-    // fact that we would be storing a reference *into* one of the\n-    // nodes in the stack.\n-    //\n-    // As far as the compiler knows, this would let us invalidate the\n-    // reference by assigning a new value to this node's position in\n-    // its parent, which would cause this current one to be\n-    // deallocated so this reference would be invalid. (i.e. the\n-    // compilers complaints are 100% correct.)\n-    //\n-    // However, as far as you humans reading this code know (or are\n-    // about to know, if you haven't read far enough down yet), we are\n-    // only reading from the TreeNode.{left,right} fields. the only\n-    // thing that is ever mutated is the .value field (although any\n-    // actual mutation that happens is done externally, by the\n-    // iterator consumer). So, don't be so concerned, rustc, we've got\n-    // it under control.\n-    //\n-    // (This field can legitimately be null.)\n-    node: *mut TreeNode<K, V>,\n-    remaining_min: uint,\n-    remaining_max: uint\n-}\n-\n /// Lazy forward iterator over a map that allows for the mutation of\n /// the values.\n-#[cfg(not(stage0))]\n pub struct MutEntries<'a, K:'a, V:'a> {\n     stack: Vec<&'a mut TreeNode<K, V>>,\n     // Unfortunately, we require some unsafe-ness to get around the\n@@ -761,14 +712,7 @@ pub struct MutEntries<'a, K:'a, V:'a> {\n     remaining_max: uint\n }\n \n-/// Note: stage0-specific version that lacks bound on A.\n-#[cfg(stage0)]\n-pub struct RevMutEntries<'a, K, V> {\n-    iter: MutEntries<'a, K, V>,\n-}\n-\n /// Lazy backward iterator over a map\n-#[cfg(not(stage0))]\n pub struct RevMutEntries<'a, K:'a, V:'a> {\n     iter: MutEntries<'a, K, V>,\n }\n@@ -1375,84 +1319,38 @@ impl<T: Ord> TreeSet<T> {\n     }\n }\n \n-/// Note: stage0-specific version that lacks bound on A.\n-#[cfg(stage0)]\n-pub struct SetItems<'a, T> {\n-    iter: Entries<'a, T, ()>\n-}\n-\n /// A lazy forward iterator over a set.\n-#[cfg(not(stage0))]\n pub struct SetItems<'a, T:'a> {\n     iter: Entries<'a, T, ()>\n }\n \n-/// Note: stage0-specific version that lacks bound on A.\n-#[cfg(stage0)]\n-pub struct RevSetItems<'a, T> {\n-    iter: RevEntries<'a, T, ()>\n-}\n-\n /// A lazy backward iterator over a set.\n-#[cfg(not(stage0))]\n pub struct RevSetItems<'a, T:'a> {\n     iter: RevEntries<'a, T, ()>\n }\n \n /// A lazy forward iterator over a set that consumes the set while iterating.\n pub type MoveSetItems<T> = iter::Map<'static, (T, ()), T, MoveEntries<T, ()>>;\n \n-/// Note: stage0-specific version that lacks bound on A.\n-#[cfg(stage0)]\n-pub struct DifferenceItems<'a, T> {\n-    a: Peekable<&'a T, SetItems<'a, T>>,\n-    b: Peekable<&'a T, SetItems<'a, T>>,\n-}\n-\n /// A lazy iterator producing elements in the set difference (in-order).\n-#[cfg(not(stage0))]\n pub struct DifferenceItems<'a, T:'a> {\n     a: Peekable<&'a T, SetItems<'a, T>>,\n     b: Peekable<&'a T, SetItems<'a, T>>,\n }\n \n-/// Note: stage0-specific version that lacks bound on A.\n-#[cfg(stage0)]\n-pub struct SymDifferenceItems<'a, T> {\n-    a: Peekable<&'a T, SetItems<'a, T>>,\n-    b: Peekable<&'a T, SetItems<'a, T>>,\n-}\n-\n /// A lazy iterator producing elements in the set symmetric difference (in-order).\n-#[cfg(not(stage0))]\n pub struct SymDifferenceItems<'a, T:'a> {\n     a: Peekable<&'a T, SetItems<'a, T>>,\n     b: Peekable<&'a T, SetItems<'a, T>>,\n }\n \n-/// Note: stage0-specific version that lacks bound on A.\n-#[cfg(stage0)]\n-pub struct IntersectionItems<'a, T> {\n-    a: Peekable<&'a T, SetItems<'a, T>>,\n-    b: Peekable<&'a T, SetItems<'a, T>>,\n-}\n-\n /// A lazy iterator producing elements in the set intersection (in-order).\n-#[cfg(not(stage0))]\n pub struct IntersectionItems<'a, T:'a> {\n     a: Peekable<&'a T, SetItems<'a, T>>,\n     b: Peekable<&'a T, SetItems<'a, T>>,\n }\n \n-/// Note: stage0-specific version that lacks bound on A.\n-#[cfg(stage0)]\n-pub struct UnionItems<'a, T> {\n-    a: Peekable<&'a T, SetItems<'a, T>>,\n-    b: Peekable<&'a T, SetItems<'a, T>>,\n-}\n-\n /// A lazy iterator producing elements in the set union (in-order).\n-#[cfg(not(stage0))]\n pub struct UnionItems<'a, T:'a> {\n     a: Peekable<&'a T, SetItems<'a, T>>,\n     b: Peekable<&'a T, SetItems<'a, T>>,"}, {"sha": "fa8bcf94de1cd6fbfff2b2b06f6e32b1f817f39b", "filename": "src/libcollections/trie.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibcollections%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibcollections%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftrie.rs?ref=f2973665935161bb2b2eca3f41c33a4fd2fe82c4", "patch": "@@ -857,36 +857,16 @@ fn remove<T>(count: &mut uint, child: &mut Child<T>, key: uint,\n     return ret;\n }\n \n-/// Note: stage0-specific version that lacks bound on A.\n-#[cfg(stage0)]\n-pub struct Entries<'a, T> {\n-    stack: [slice::Items<'a, Child<T>>, .. NUM_CHUNKS],\n-    length: uint,\n-    remaining_min: uint,\n-    remaining_max: uint\n-}\n-\n /// A forward iterator over a map.\n-#[cfg(not(stage0))]\n pub struct Entries<'a, T:'a> {\n     stack: [slice::Items<'a, Child<T>>, .. NUM_CHUNKS],\n     length: uint,\n     remaining_min: uint,\n     remaining_max: uint\n }\n \n-/// Note: stage0-specific version that lacks bound on A.\n-#[cfg(stage0)]\n-pub struct MutEntries<'a, T> {\n-    stack: [slice::MutItems<'a, Child<T>>, .. NUM_CHUNKS],\n-    length: uint,\n-    remaining_min: uint,\n-    remaining_max: uint\n-}\n-\n /// A forward iterator over the key-value pairs of a map, with the\n /// values being mutable.\n-#[cfg(not(stage0))]\n pub struct MutEntries<'a, T:'a> {\n     stack: [slice::MutItems<'a, Child<T>>, .. NUM_CHUNKS],\n     length: uint,"}, {"sha": "1cad9a3f8ca22e6b7e1941f18a403a0755a1b613", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=f2973665935161bb2b2eca3f41c33a4fd2fe82c4", "patch": "@@ -324,22 +324,12 @@ impl<T: PartialEq> PartialEq for RefCell<T> {\n \n /// Wraps a borrowed reference to a value in a `RefCell` box.\n #[unstable]\n-#[cfg(not(stage0))]\n pub struct Ref<'b, T:'b> {\n     // FIXME #12808: strange name to try to avoid interfering with\n     // field accesses of the contained type via Deref\n     _parent: &'b RefCell<T>\n }\n \n-/// Dox.\n-#[unstable]\n-#[cfg(stage0)]\n-pub struct Ref<'b, T> {\n-    // FIXME #12808: strange name to try to avoid interfering with\n-    // field accesses of the contained type via Deref\n-    _parent: &'b RefCell<T>\n-}\n-\n #[unsafe_destructor]\n #[unstable]\n impl<'b, T> Drop for Ref<'b, T> {\n@@ -379,22 +369,12 @@ pub fn clone_ref<'b, T>(orig: &Ref<'b, T>) -> Ref<'b, T> {\n \n /// Wraps a mutable borrowed reference to a value in a `RefCell` box.\n #[unstable]\n-#[cfg(not(stage0))]\n pub struct RefMut<'b, T:'b> {\n     // FIXME #12808: strange name to try to avoid interfering with\n     // field accesses of the contained type via Deref\n     _parent: &'b RefCell<T>\n }\n \n-/// Dox.\n-#[unstable]\n-#[cfg(stage0)]\n-pub struct RefMut<'b, T> {\n-    // FIXME #12808: strange name to try to avoid interfering with\n-    // field accesses of the contained type via Deref\n-    _parent: &'b RefCell<T>\n-}\n-\n #[unsafe_destructor]\n #[unstable]\n impl<'b, T> Drop for RefMut<'b, T> {"}, {"sha": "9b59b410e7cc450022c10031e83dd50859068f96", "filename": "src/libcore/finally.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibcore%2Ffinally.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibcore%2Ffinally.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffinally.rs?ref=f2973665935161bb2b2eca3f41c33a4fd2fe82c4", "patch": "@@ -102,18 +102,11 @@ pub fn try_finally<T,U,R>(mutate: &mut T,\n     try_fn(&mut *f.mutate, drop)\n }\n \n-#[cfg(not(stage0))]\n struct Finallyalizer<'a,A:'a> {\n     mutate: &'a mut A,\n     dtor: |&mut A|: 'a\n }\n \n-#[cfg(stage0)]\n-struct Finallyalizer<'a,A> {\n-    mutate: &'a mut A,\n-    dtor: |&mut A|: 'a\n-}\n-\n #[unsafe_destructor]\n impl<'a,A> Drop for Finallyalizer<'a,A> {\n     #[inline]"}, {"sha": "9636ce6a736daa86cbbe42a9c8cc360b600c13dc", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=f2973665935161bb2b2eca3f41c33a4fd2fe82c4", "patch": "@@ -93,21 +93,13 @@ pub trait TyVisitor {\n     fn visit_char(&mut self) -> bool;\n \n     fn visit_estr_slice(&mut self) -> bool;\n-    // NOTE: remove after snapshot\n-    #[cfg(stage0)]\n-    fn visit_estr_fixed(&mut self, n: uint, sz: uint, align: uint) -> bool;\n \n     fn visit_box(&mut self, mtbl: uint, inner: *const TyDesc) -> bool;\n     fn visit_uniq(&mut self, mtbl: uint, inner: *const TyDesc) -> bool;\n     fn visit_ptr(&mut self, mtbl: uint, inner: *const TyDesc) -> bool;\n     fn visit_rptr(&mut self, mtbl: uint, inner: *const TyDesc) -> bool;\n \n     fn visit_evec_slice(&mut self, mtbl: uint, inner: *const TyDesc) -> bool;\n-    // NOTE: remove after snapshot\n-    #[cfg(stage0)]\n-    fn visit_evec_fixed(&mut self, n: uint, sz: uint, align: uint,\n-                        mtbl: uint, inner: *const TyDesc) -> bool;\n-    #[cfg(not(stage0))]\n     fn visit_evec_fixed(&mut self, n: uint, sz: uint, align: uint,\n                         inner: *const TyDesc) -> bool;\n "}, {"sha": "da7f026aed4f5fd33c4fd03dc76724efd66f3700", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=f2973665935161bb2b2eca3f41c33a4fd2fe82c4", "patch": "@@ -777,18 +777,10 @@ impl<A, T: DoubleEndedIterator<A> + RandomAccessIterator<A>> RandomAccessIterato\n \n /// A mutable reference to an iterator\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n-#[cfg(not(stage0))]\n pub struct ByRef<'a, T:'a> {\n     iter: &'a mut T\n }\n \n-/// Dox\n-#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n-#[cfg(stage0)]\n-pub struct ByRef<'a, T> {\n-    iter: &'a mut T\n-}\n-\n impl<'a, A, T: Iterator<A>+'a> Iterator<A> for ByRef<'a, T> {\n     #[inline]\n     fn next(&mut self) -> Option<A> { self.iter.next() }"}, {"sha": "7e2ea492d4ccfc77e1506374adae623b38809270", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=f2973665935161bb2b2eca3f41c33a4fd2fe82c4", "patch": "@@ -58,7 +58,7 @@\n \n #![no_std]\n #![feature(globs, intrinsics, lang_items, macro_rules, managed_boxes, phase)]\n-#![feature(simd, unsafe_destructor, issue_5723_bootstrap)]\n+#![feature(simd, unsafe_destructor)]\n #![deny(missing_doc)]\n \n mod macros;"}, {"sha": "188ef2a3b8879cccdba84198e7bde613ce38e9dc", "filename": "src/libcore/raw.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibcore%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibcore%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fraw.rs?ref=f2973665935161bb2b2eca3f41c33a4fd2fe82c4", "patch": "@@ -51,12 +51,6 @@ pub struct Procedure {\n ///\n /// This struct does not have a `Repr` implementation\n /// because there is no way to refer to all trait objects generically.\n-#[cfg(stage0)]\n-pub struct TraitObject {\n-    pub vtable: *mut (),\n-    pub data: *mut (),\n-}\n-#[cfg(not(stage0))]\n pub struct TraitObject {\n     pub data: *mut (),\n     pub vtable: *mut (),"}, {"sha": "5070a3973d140b977611d723160ddb0101bbe768", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 0, "deletions": 59, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=f2973665935161bb2b2eca3f41c33a4fd2fe82c4", "patch": "@@ -1125,22 +1125,13 @@ impl<'a, T> ExactSize<&'a mut T> for MutItems<'a, T> {}\n \n /// An iterator over the slices of a vector separated by elements that\n /// match a predicate function.\n-#[cfg(not(stage0))]\n #[experimental = \"needs review\"]\n pub struct Splits<'a, T:'a> {\n     v: &'a [T],\n     pred: |t: &T|: 'a -> bool,\n     finished: bool\n }\n \n-/// Dox.\n-#[cfg(stage0)]\n-pub struct Splits<'a, T> {\n-    v: &'a [T],\n-    pred: |t: &T|: 'a -> bool,\n-    finished: bool\n-}\n-\n #[experimental = \"needs review\"]\n impl<'a, T> Iterator<&'a [T]> for Splits<'a, T> {\n     #[inline]\n@@ -1192,22 +1183,13 @@ impl<'a, T> DoubleEndedIterator<&'a [T]> for Splits<'a, T> {\n \n /// An iterator over the subslices of the vector which are separated\n /// by elements that match `pred`.\n-#[cfg(not(stage0))]\n #[experimental = \"needs review\"]\n pub struct MutSplits<'a, T:'a> {\n     v: &'a mut [T],\n     pred: |t: &T|: 'a -> bool,\n     finished: bool\n }\n \n-/// Dox\n-#[cfg(stage0)]\n-pub struct MutSplits<'a, T> {\n-    v: &'a mut [T],\n-    pred: |t: &T|: 'a -> bool,\n-    finished: bool\n-}\n-\n #[experimental = \"needs review\"]\n impl<'a, T> Iterator<&'a mut [T]> for MutSplits<'a, T> {\n     #[inline]\n@@ -1270,22 +1252,13 @@ impl<'a, T> DoubleEndedIterator<&'a mut [T]> for MutSplits<'a, T> {\n \n /// An iterator over the slices of a vector separated by elements that\n /// match a predicate function, splitting at most a fixed number of times.\n-#[cfg(not(stage0))]\n #[experimental = \"needs review\"]\n pub struct SplitsN<'a, T:'a> {\n     iter: Splits<'a, T>,\n     count: uint,\n     invert: bool\n }\n \n-/// Dox.\n-#[cfg(stage0)]\n-pub struct SplitsN<'a, T> {\n-    iter: Splits<'a, T>,\n-    count: uint,\n-    invert: bool\n-}\n-\n #[experimental = \"needs review\"]\n impl<'a, T> Iterator<&'a [T]> for SplitsN<'a, T> {\n     #[inline]\n@@ -1315,17 +1288,6 @@ impl<'a, T> Iterator<&'a [T]> for SplitsN<'a, T> {\n \n /// An iterator over the (overlapping) slices of length `size` within\n /// a vector.\n-#[cfg(stage0)]\n-#[deriving(Clone)]\n-#[experimental = \"needs review\"]\n-pub struct Windows<'a, T> {\n-    v: &'a [T],\n-    size: uint\n-}\n-\n-/// An iterator over the (overlapping) slices of length `size` within\n-/// a vector.\n-#[cfg(not(stage0))]\n #[deriving(Clone)]\n #[experimental = \"needs review\"]\n pub struct Windows<'a, T:'a> {\n@@ -1361,21 +1323,8 @@ impl<'a, T> Iterator<&'a [T]> for Windows<'a, T> {\n ///\n /// When the vector len is not evenly divided by the chunk size,\n /// the last slice of the iteration will be the remainder.\n-#[cfg(stage0)]\n #[deriving(Clone)]\n #[experimental = \"needs review\"]\n-pub struct Chunks<'a, T> {\n-    v: &'a [T],\n-    size: uint\n-}\n-\n-/// An iterator over a vector in (non-overlapping) chunks (`size`\n-/// elements at a time).\n-///\n-/// When the vector len is not evenly divided by the chunk size,\n-/// the last slice of the iteration will be the remainder.\n-#[cfg(not(stage0))]\n-#[deriving(Clone)]\n pub struct Chunks<'a, T:'a> {\n     v: &'a [T],\n     size: uint\n@@ -1447,20 +1396,12 @@ impl<'a, T> RandomAccessIterator<&'a [T]> for Chunks<'a, T> {\n /// An iterator over a vector in (non-overlapping) mutable chunks (`size`  elements at a time). When\n /// the vector len is not evenly divided by the chunk size, the last slice of the iteration will be\n /// the remainder.\n-#[cfg(not(stage0))]\n #[experimental = \"needs review\"]\n pub struct MutChunks<'a, T:'a> {\n     v: &'a mut [T],\n     chunk_size: uint\n }\n \n-/// Dox.\n-#[cfg(stage0)]\n-pub struct MutChunks<'a, T> {\n-    v: &'a mut [T],\n-    chunk_size: uint\n-}\n-\n #[experimental = \"needs review\"]\n impl<'a, T> Iterator<&'a mut [T]> for MutChunks<'a, T> {\n     #[inline]"}, {"sha": "6341a38056359bf495d21bd1798c3f241643d23e", "filename": "src/libdebug/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibdebug%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibdebug%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibdebug%2Flib.rs?ref=f2973665935161bb2b2eca3f41c33a4fd2fe82c4", "patch": "@@ -25,7 +25,7 @@\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/master/\")]\n #![experimental]\n-#![feature(managed_boxes, macro_rules, issue_5723_bootstrap)]\n+#![feature(managed_boxes, macro_rules)]\n #![allow(experimental)]\n \n pub mod fmt;"}, {"sha": "80d0f8a879412630446f26b10d98598323010c43", "filename": "src/libdebug/reflect.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibdebug%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibdebug%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibdebug%2Freflect.rs?ref=f2973665935161bb2b2eca3f41c33a4fd2fe82c4", "patch": "@@ -193,17 +193,6 @@ impl<V:TyVisitor + MovePtr> TyVisitor for MovePtrAdaptor<V> {\n         true\n     }\n \n-    // NOTE: remove after snapshot\n-    #[cfg(stage0)]\n-    fn visit_estr_fixed(&mut self, n: uint,\n-                        sz: uint,\n-                        align: uint) -> bool {\n-        self.align(align);\n-        if ! self.inner.visit_estr_fixed(n, sz, align) { return false; }\n-        self.bump(sz);\n-        true\n-    }\n-\n     fn visit_box(&mut self, mtbl: uint, inner: *const TyDesc) -> bool {\n         self.align_to::<Gc<u8>>();\n         if ! self.inner.visit_box(mtbl, inner) { return false; }\n@@ -239,17 +228,6 @@ impl<V:TyVisitor + MovePtr> TyVisitor for MovePtrAdaptor<V> {\n         true\n     }\n \n-    #[cfg(stage0)]\n-    fn visit_evec_fixed(&mut self, n: uint, sz: uint, align: uint,\n-                        mtbl: uint, inner: *const TyDesc) -> bool {\n-        self.align(align);\n-        if ! self.inner.visit_evec_fixed(n, sz, align, mtbl, inner) {\n-            return false;\n-        }\n-        self.bump(sz);\n-        true\n-    }\n-    #[cfg(not(stage0))]\n     fn visit_evec_fixed(&mut self, n: uint, sz: uint, align: uint,\n                         inner: *const TyDesc) -> bool {\n         self.align(align);"}, {"sha": "1f66d0352da59d8c639287c1072baff0431fb95b", "filename": "src/libdebug/repr.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibdebug%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibdebug%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibdebug%2Frepr.rs?ref=f2973665935161bb2b2eca3f41c33a4fd2fe82c4", "patch": "@@ -274,12 +274,6 @@ impl<'a> TyVisitor for ReprVisitor<'a> {\n         self.get::<&str>(|this, s| this.write_escaped_slice(*s))\n     }\n \n-    // Type no longer exists, vestigial function.\n-    // NOTE: remove after snapshot\n-    #[cfg(stage0)]\n-    fn visit_estr_fixed(&mut self, _n: uint, _sz: uint,\n-                        _align: uint) -> bool { fail!(); }\n-\n     fn visit_box(&mut self, mtbl: uint, inner: *const TyDesc) -> bool {\n         try!(self, self.writer.write(\"box(GC) \".as_bytes()));\n         self.write_mut_qualifier(mtbl);\n@@ -330,17 +324,6 @@ impl<'a> TyVisitor for ReprVisitor<'a> {\n         })\n     }\n \n-    // NOTE: remove after snapshot\n-    #[cfg(stage0)]\n-    fn visit_evec_fixed(&mut self, n: uint, sz: uint, _align: uint,\n-                        _: uint, inner: *const TyDesc) -> bool {\n-        let assumed_size = if sz == 0 { n } else { sz };\n-        self.get::<()>(|this, b| {\n-            this.write_vec_range(b, assumed_size, inner)\n-        })\n-    }\n-\n-    #[cfg(not(stage0))]\n     fn visit_evec_fixed(&mut self, n: uint, sz: uint, _align: uint,\n                         inner: *const TyDesc) -> bool {\n         let assumed_size = if sz == 0 { n } else { sz };"}, {"sha": "560681765cd460838ecf104b4c7837927f72038a", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=f2973665935161bb2b2eca3f41c33a4fd2fe82c4", "patch": "@@ -21,9 +21,6 @@\n #![crate_type = \"dylib\"]\n #![feature(macro_rules, globs, import_shadowing)]\n \n-// NOTE(stage0, pcwalton): Remove after snapshot.\n-#![allow(unknown_features)]\n-\n use std::char;\n use std::str;\n "}, {"sha": "3ffd39a0065e4b8ef2cfac015d8576142a0b285d", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=f2973665935161bb2b2eca3f41c33a4fd2fe82c4", "patch": "@@ -91,9 +91,6 @@\n #![feature(import_shadowing)]\n #![deny(missing_doc)]\n \n-// NOTE(stage0, pcwalton): Remove after snapshot.\n-#![allow(unknown_features)]\n-\n #[cfg(test)] extern crate debug;\n #[cfg(test)] #[phase(plugin, link)] extern crate log;\n "}, {"sha": "d8325e05cdf4ccc03c6965493446b44d2ffbce2f", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=f2973665935161bb2b2eca3f41c33a4fd2fe82c4", "patch": "@@ -271,7 +271,6 @@ pub fn main() {\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![license = \"MIT/ASL2\"]\n-#![feature(issue_5723_bootstrap)]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/master/\")]"}, {"sha": "ab06f327592d44fa203e73a69ac8b5ab5f780b1d", "filename": "src/libgraphviz/maybe_owned_vec.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibgraphviz%2Fmaybe_owned_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibgraphviz%2Fmaybe_owned_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Fmaybe_owned_vec.rs?ref=f2973665935161bb2b2eca3f41c33a4fd2fe82c4", "patch": "@@ -34,19 +34,11 @@ use std::slice;\n /// Some clients will have a pre-allocated vector ready to hand off in\n /// a slice; others will want to create the set on the fly and hand\n /// off ownership, via `Growable`.\n-#[cfg(not(stage0))]\n pub enum MaybeOwnedVector<'a,T:'a> {\n     Growable(Vec<T>),\n     Borrowed(&'a [T]),\n }\n \n-/// Stage0 only.\n-#[cfg(stage0)]\n-pub enum MaybeOwnedVector<'a,T> {\n-    Growable(Vec<T>),\n-    Borrowed(&'a [T]),\n-}\n-\n /// Trait for moving into a `MaybeOwnedVector`\n pub trait IntoMaybeOwnedVector<'a,T> {\n     /// Moves self into a `MaybeOwnedVector`"}, {"sha": "d15c65799f42e1b1f40bb7e43bdf6a3866f10e60", "filename": "src/librand/distributions/mod.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibrand%2Fdistributions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibrand%2Fdistributions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fmod.rs?ref=f2973665935161bb2b2eca3f41c33a4fd2fe82c4", "patch": "@@ -79,13 +79,6 @@ pub struct Weighted<T> {\n     pub item: T,\n }\n \n-/// Note: stage0-specific version that lacks bound on A.\n-#[cfg(stage0)]\n-pub struct WeightedChoice<'a, T> {\n-    items: &'a mut [Weighted<T>],\n-    weight_range: Range<uint>\n-}\n-\n /// A distribution that selects from a finite collection of weighted items.\n ///\n /// Each item has an associated weight that influences how likely it\n@@ -112,7 +105,6 @@ pub struct WeightedChoice<'a, T> {\n ///      println!(\"{}\", wc.ind_sample(&mut rng));\n /// }\n /// ```\n-#[cfg(not(stage0))]\n pub struct WeightedChoice<'a, T:'a> {\n     items: &'a mut [Weighted<T>],\n     weight_range: Range<uint>"}, {"sha": "52112380c600a38f2a618af9c0064aeea3a7a8f6", "filename": "src/librand/lib.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=f2973665935161bb2b2eca3f41c33a4fd2fe82c4", "patch": "@@ -269,16 +269,9 @@ pub trait Rng {\n     }\n }\n \n-/// Note: stage0-specific version that lacks bound on A.\n-#[cfg(stage0)]\n-pub struct Generator<'a, T, R> {\n-    rng: &'a mut R,\n-}\n-\n /// Iterator which will generate a stream of random items.\n ///\n /// This iterator is created via the `gen_iter` method on `Rng`.\n-#[cfg(not(stage0))]\n pub struct Generator<'a, T, R:'a> {\n     rng: &'a mut R,\n }\n@@ -289,16 +282,9 @@ impl<'a, T: Rand, R: Rng> Iterator<T> for Generator<'a, T, R> {\n     }\n }\n \n-/// Note: stage0-specific version.\n-#[cfg(stage0)]\n-pub struct AsciiGenerator<'a, R> {\n-    rng: &'a mut R,\n-}\n-\n /// Iterator which will continuously generate random ascii characters.\n ///\n /// This iterator is created via the `gen_ascii_chars` method on `Rng`.\n-#[cfg(not(stage0))]\n pub struct AsciiGenerator<'a, R:'a> {\n     rng: &'a mut R,\n }"}, {"sha": "933f2b223e9ecb09faae9e9d3a24d38e3693f3e4", "filename": "src/librbml/lib.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibrbml%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibrbml%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Flib.rs?ref=f2973665935161bb2b2eca3f41c33a4fd2fe82c4", "patch": "@@ -24,7 +24,7 @@\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/master/\",\n        html_playground_url = \"http://play.rust-lang.org/\")]\n-#![feature(macro_rules, phase, issue_5723_bootstrap)]\n+#![feature(macro_rules, phase)]\n #![allow(missing_doc)]\n \n extern crate serialize;\n@@ -662,14 +662,6 @@ pub mod writer {\n     pub type EncodeResult = io::IoResult<()>;\n \n     // rbml writing\n-    #[cfg(stage0)]\n-    pub struct Encoder<'a, W> {\n-        pub writer: &'a mut W,\n-        size_positions: Vec<uint>,\n-    }\n-\n-    // rbml writing\n-    #[cfg(not(stage0))]\n     pub struct Encoder<'a, W:'a> {\n         pub writer: &'a mut W,\n         size_positions: Vec<uint>,"}, {"sha": "d51d5a0aef2e1694d01d664230ac462c3720d62a", "filename": "src/librlibc/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibrlibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibrlibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrlibc%2Flib.rs?ref=f2973665935161bb2b2eca3f41c33a4fd2fe82c4", "patch": "@@ -35,9 +35,6 @@\n // LLVM to optimize these function calls to themselves!\n #![no_builtins]\n \n-// NOTE(stage0, pcwalton): Remove after snapshot.\n-#![allow(unknown_features)]\n-\n #[cfg(test)] extern crate native;\n #[cfg(test)] extern crate test;\n #[cfg(test)] extern crate debug;"}, {"sha": "0d4f4f556e16c6ef172847791164ff104a82dfa8", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=f2973665935161bb2b2eca3f41c33a4fd2fe82c4", "patch": "@@ -31,7 +31,6 @@ This API is completely unstable and subject to change.\n #![allow(deprecated)]\n #![feature(macro_rules, globs, struct_variant, managed_boxes, quote)]\n #![feature(default_type_params, phase, unsafe_destructor)]\n-#![feature(issue_5723_bootstrap)]\n \n #![allow(unknown_features)] // NOTE: Remove after next snapshot\n #![feature(rustc_diagnostic_macros)]"}, {"sha": "097f49a1e6e55173dffc27103386a73d8e0c1a85", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=f2973665935161bb2b2eca3f41c33a4fd2fe82c4", "patch": "@@ -80,13 +80,6 @@ pub trait DataFlowOperator : BitwiseOperator {\n     fn initial_value(&self) -> bool;\n }\n \n-#[cfg(stage0)]\n-struct PropagationContext<'a, 'b, O> {\n-    dfcx: &'a mut DataFlowContext<'b, O>,\n-    changed: bool\n-}\n-\n-#[cfg(not(stage0))]\n struct PropagationContext<'a, 'b:'a, O:'a> {\n     dfcx: &'a mut DataFlowContext<'b, O>,\n     changed: bool"}, {"sha": "7177516e539298dd03466d5827ab07d0db1c4d85", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=f2973665935161bb2b2eca3f41c33a4fd2fe82c4", "patch": "@@ -192,14 +192,6 @@ impl OverloadedCallType {\n // supplies types from the tree. After type checking is complete, you\n // can just use the tcx as the typer.\n \n-#[cfg(stage0)]\n-pub struct ExprUseVisitor<'d,'t,TYPER> {\n-    typer: &'t TYPER,\n-    mc: mc::MemCategorizationContext<'t,TYPER>,\n-    delegate: &'d mut Delegate+'d,\n-}\n-\n-#[cfg(not(stage0))]\n pub struct ExprUseVisitor<'d,'t,TYPER:'t> {\n     typer: &'t TYPER,\n     mc: mc::MemCategorizationContext<'t,TYPER>,"}, {"sha": "23cab419aa2c78597b4c4d49d2f3dbc412ba8964", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=f2973665935161bb2b2eca3f41c33a4fd2fe82c4", "patch": "@@ -240,12 +240,6 @@ impl ast_node for ast::Pat {\n     fn span(&self) -> Span { self.span }\n }\n \n-#[cfg(stage0)]\n-pub struct MemCategorizationContext<'t,TYPER> {\n-    typer: &'t TYPER\n-}\n-\n-#[cfg(not(stage0))]\n pub struct MemCategorizationContext<'t,TYPER:'t> {\n     typer: &'t TYPER\n }"}, {"sha": "9531e824298dbd5c33396a644d95797ea3f2b939", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=f2973665935161bb2b2eca3f41c33a4fd2fe82c4", "patch": "@@ -340,21 +340,12 @@ struct ArmData<'a, 'b> {\n  * As we proceed `bound_ptrs` are filled with pointers to values to be bound,\n  * these pointers are stored in llmatch variables just before executing `data` arm.\n  */\n-#[cfg(not(stage0))]\n struct Match<'a, 'b:'a> {\n     pats: Vec<Gc<ast::Pat>>,\n     data: &'a ArmData<'a, 'b>,\n     bound_ptrs: Vec<(Ident, ValueRef)>\n }\n \n-///Dox\n-#[cfg(stage0)]\n-struct Match<'a, 'b> {\n-    pats: Vec<Gc<ast::Pat>>,\n-    data: &'a ArmData<'a, 'b>,\n-    bound_ptrs: Vec<(Ident, ValueRef)>\n-}\n-\n impl<'a, 'b> Repr for Match<'a, 'b> {\n     fn repr(&self, tcx: &ty::ctxt) -> String {\n         if tcx.sess.verbose() {"}, {"sha": "e5de2d195ebd67a2c7a2f2a480b9479ae431181a", "filename": "src/librustrt/exclusive.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibrustrt%2Fexclusive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibrustrt%2Fexclusive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Fexclusive.rs?ref=f2973665935161bb2b2eca3f41c33a4fd2fe82c4", "patch": "@@ -26,17 +26,7 @@ pub struct Exclusive<T> {\n     data: UnsafeCell<T>,\n }\n \n-/// stage0 only\n-#[cfg(stage0)]\n-pub struct ExclusiveGuard<'a, T> {\n-    // FIXME #12808: strange name to try to avoid interfering with\n-    // field accesses of the contained type via Deref\n-    _data: &'a mut T,\n-    _guard: mutex::LockGuard<'a>,\n-}\n-\n /// An RAII guard returned via `lock`\n-#[cfg(not(stage0))]\n pub struct ExclusiveGuard<'a, T:'a> {\n     // FIXME #12808: strange name to try to avoid interfering with\n     // field accesses of the contained type via Deref"}, {"sha": "594e50d9913cc45da163bfa71b899c9796b7a3b0", "filename": "src/librustrt/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibrustrt%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibrustrt%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Flib.rs?ref=f2973665935161bb2b2eca3f41c33a4fd2fe82c4", "patch": "@@ -19,13 +19,9 @@\n #![feature(macro_rules, phase, globs, thread_local, managed_boxes, asm)]\n #![feature(linkage, lang_items, unsafe_destructor, default_type_params)]\n #![feature(import_shadowing)]\n-#![feature(issue_5723_bootstrap)]\n #![no_std]\n #![experimental]\n \n-// NOTE(stage0, pcwalton): Remove after snapshot.\n-#![allow(unknown_features)]\n-\n #[phase(plugin, link)] extern crate core;\n extern crate alloc;\n extern crate libc;"}, {"sha": "c71f86bb063b6638499ebcce8d004cd260ea777f", "filename": "src/librustrt/local_data.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibrustrt%2Flocal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibrustrt%2Flocal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Flocal_data.rs?ref=f2973665935161bb2b2eca3f41c33a4fd2fe82c4", "patch": "@@ -144,23 +144,13 @@ unsafe fn get_local_map<'a>() -> Option<&'a mut Map> {\n ///\n /// The task-local data can be accessed through this value, and when this\n /// structure is dropped it will return the borrow on the data.\n-#[cfg(not(stage0))]\n pub struct Ref<T:'static> {\n     // FIXME #12808: strange names to try to avoid interfering with\n     // field accesses of the contained type via Deref\n     _inner: &'static TLDValueBox<T>,\n     _marker: marker::NoSend\n }\n \n-/// stage0 only\n-#[cfg(stage0)]\n-pub struct Ref<T> {\n-    // FIXME #12808: strange names to try to avoid interfering with\n-    // field accesses of the contained type via Deref\n-    _inner: &'static TLDValueBox<T>,\n-    _marker: marker::NoSend\n-}\n-\n fn key_to_key_value<T: 'static>(key: Key<T>) -> uint {\n     key as *const _ as uint\n }"}, {"sha": "664c94250073206610792bf489081a97a58adf44", "filename": "src/librustuv/access.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibrustuv%2Faccess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibrustuv%2Faccess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Faccess.rs?ref=f2973665935161bb2b2eca3f41c33a4fd2fe82c4", "patch": "@@ -26,13 +26,6 @@ pub struct Access<T> {\n     inner: Arc<UnsafeCell<Inner<T>>>,\n }\n \n-#[cfg(stage0)]\n-pub struct Guard<'a, T> {\n-    access: &'a mut Access<T>,\n-    missile: Option<HomingMissile>,\n-}\n-\n-#[cfg(not(stage0))]\n pub struct Guard<'a, T:'static> {\n     access: &'a mut Access<T>,\n     missile: Option<HomingMissile>,"}, {"sha": "88267c0ac45acc614bcb451b6486aa252ec74e62", "filename": "src/librustuv/timeout.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibrustuv%2Ftimeout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibrustuv%2Ftimeout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Ftimeout.rs?ref=f2973665935161bb2b2eca3f41c33a4fd2fe82c4", "patch": "@@ -28,14 +28,6 @@ pub struct AccessTimeout<T> {\n     pub access: access::Access<T>,\n }\n \n-#[cfg(stage0)]\n-pub struct Guard<'a, T> {\n-    state: &'a mut TimeoutState,\n-    pub access: access::Guard<'a, T>,\n-    pub can_timeout: bool,\n-}\n-\n-#[cfg(not(stage0))]\n pub struct Guard<'a, T:'static> {\n     state: &'a mut TimeoutState,\n     pub access: access::Guard<'a, T>,"}, {"sha": "5c35ad8523382cef363099662becabdac6c3a677", "filename": "src/libserialize/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibserialize%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibserialize%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Flib.rs?ref=f2973665935161bb2b2eca3f41c33a4fd2fe82c4", "patch": "@@ -24,7 +24,6 @@ Core encoding and decoding interfaces.\n        html_root_url = \"http://doc.rust-lang.org/master/\",\n        html_playground_url = \"http://play.rust-lang.org/\")]\n #![feature(macro_rules, managed_boxes, default_type_params, phase)]\n-#![feature(issue_5723_bootstrap)]\n \n // test harness access\n #[cfg(test)]"}, {"sha": "1985128c4e307c4017962ce06d88f8be29ce91b0", "filename": "src/libstd/collections/hashmap.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibstd%2Fcollections%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibstd%2Fcollections%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhashmap.rs?ref=f2973665935161bb2b2eca3f41c33a4fd2fe82c4", "patch": "@@ -409,32 +409,14 @@ mod table {\n         assert_eq!(size_of::<SafeHash>(), size_of::<u64>())\n     }\n \n-    /// Note: stage0-specific version that lacks bound.\n-    #[cfg(stage0)]\n-    pub struct Entries<'a, K, V> {\n-        table: &'a RawTable<K, V>,\n-        idx: uint,\n-        elems_seen: uint,\n-    }\n-\n     /// Iterator over shared references to entries in a table.\n-    #[cfg(not(stage0))]\n     pub struct Entries<'a, K:'a, V:'a> {\n         table: &'a RawTable<K, V>,\n         idx: uint,\n         elems_seen: uint,\n     }\n \n-    /// Note: stage0-specific version that lacks bound.\n-    #[cfg(stage0)]\n-    pub struct MutEntries<'a, K, V> {\n-        table: &'a mut RawTable<K, V>,\n-        idx: uint,\n-        elems_seen: uint,\n-    }\n-\n     /// Iterator over mutable references to entries in a table.\n-    #[cfg(not(stage0))]\n     pub struct MutEntries<'a, K:'a, V:'a> {\n         table: &'a mut RawTable<K, V>,\n         idx: uint,"}, {"sha": "b61e7c6b44191eaccc2ea668635397a9e998afa1", "filename": "src/libstd/io/extensions.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibstd%2Fio%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibstd%2Fio%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fextensions.rs?ref=f2973665935161bb2b2eca3f41c33a4fd2fe82c4", "patch": "@@ -37,25 +37,6 @@ use ptr::RawPtr;\n ///\n /// Any error other than `EndOfFile` that is produced by the underlying Reader\n /// is returned by the iterator and should be handled by the caller.\n-#[cfg(stage0)]\n-pub struct Bytes<'r, T> {\n-    reader: &'r mut T,\n-}\n-\n-/// An iterator that reads a single byte on each iteration,\n-/// until `.read_byte()` returns `EndOfFile`.\n-///\n-/// # Notes about the Iteration Protocol\n-///\n-/// The `Bytes` may yield `None` and thus terminate\n-/// an iteration, but continue to yield elements if iteration\n-/// is attempted again.\n-///\n-/// # Error\n-///\n-/// Any error other than `EndOfFile` that is produced by the underlying Reader\n-/// is returned by the iterator and should be handled by the caller.\n-#[cfg(not(stage0))]\n pub struct Bytes<'r, T:'r> {\n     reader: &'r mut T,\n }"}, {"sha": "905012b7bf33abf1ec4024bba353d81f0e83888f", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 0, "deletions": 92, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=f2973665935161bb2b2eca3f41c33a4fd2fe82c4", "patch": "@@ -976,13 +976,6 @@ unsafe fn slice_vec_capacity<'a, T>(v: &'a mut Vec<T>, start: uint, end: uint) -\n     })\n }\n \n-/// Note: stage0-specific version that lacks bound.\n-#[cfg(stage0)]\n-pub struct RefReader<'a, R> {\n-    /// The underlying reader which this is referencing\n-    inner: &'a mut R\n-}\n-\n /// A `RefReader` is a struct implementing `Reader` which contains a reference\n /// to another reader. This is often useful when composing streams.\n ///\n@@ -1007,7 +1000,6 @@ pub struct RefReader<'a, R> {\n ///\n /// # }\n /// ```\n-#[cfg(not(stage0))]\n pub struct RefReader<'a, R:'a> {\n     /// The underlying reader which this is referencing\n     inner: &'a mut R\n@@ -1066,16 +1058,8 @@ pub trait Writer {\n     ///\n     /// This function will return any I/O error reported while formatting.\n     fn write_fmt(&mut self, fmt: &fmt::Arguments) -> IoResult<()> {\n-        // Note: stage0-specific version that lacks bound.\n-        #[cfg(stage0)]\n-        struct Adaptor<'a, T> {\n-            inner: &'a mut T,\n-            error: IoResult<()>,\n-        }\n-\n         // Create a shim which translates a Writer to a FormatWriter and saves\n         // off I/O errors. instead of discarding them\n-        #[cfg(not(stage0))]\n         struct Adaptor<'a, T:'a> {\n             inner: &'a mut T,\n             error: IoResult<()>,\n@@ -1335,37 +1319,6 @@ impl<'a> Writer for &'a mut Writer+'a {\n /// println!(\"input processed: {}\", output.unwrap());\n /// # }\n /// ```\n-#[cfg(stage0)]\n-pub struct RefWriter<'a, W> {\n-    /// The underlying writer which this is referencing\n-    inner: &'a mut W\n-}\n-\n-/// A `RefWriter` is a struct implementing `Writer` which contains a reference\n-/// to another writer. This is often useful when composing streams.\n-///\n-/// # Example\n-///\n-/// ```\n-/// # fn main() {}\n-/// # fn process_input<R: Reader>(r: R) {}\n-/// # fn foo () {\n-/// use std::io::util::TeeReader;\n-/// use std::io::{stdin, MemWriter};\n-///\n-/// let mut output = MemWriter::new();\n-///\n-/// {\n-///     // Don't give ownership of 'output' to the 'tee'. Instead we keep a\n-///     // handle to it in the outer scope\n-///     let mut tee = TeeReader::new(stdin(), output.by_ref());\n-///     process_input(tee);\n-/// }\n-///\n-/// println!(\"input processed: {}\", output.unwrap());\n-/// # }\n-/// ```\n-#[cfg(not(stage0))]\n pub struct RefWriter<'a, W:'a> {\n     /// The underlying writer which this is referencing\n     inner: &'a mut W\n@@ -1399,25 +1352,6 @@ impl<T: Reader + Writer> Stream for T {}\n ///\n /// Any error other than `EndOfFile` that is produced by the underlying Reader\n /// is returned by the iterator and should be handled by the caller.\n-#[cfg(stage0)]\n-pub struct Lines<'r, T> {\n-    buffer: &'r mut T,\n-}\n-\n-/// An iterator that reads a line on each iteration,\n-/// until `.read_line()` encounters `EndOfFile`.\n-///\n-/// # Notes about the Iteration Protocol\n-///\n-/// The `Lines` may yield `None` and thus terminate\n-/// an iteration, but continue to yield elements if iteration\n-/// is attempted again.\n-///\n-/// # Error\n-///\n-/// Any error other than `EndOfFile` that is produced by the underlying Reader\n-/// is returned by the iterator and should be handled by the caller.\n-#[cfg(not(stage0))]\n pub struct Lines<'r, T:'r> {\n     buffer: &'r mut T,\n }\n@@ -1445,25 +1379,6 @@ impl<'r, T: Buffer> Iterator<IoResult<String>> for Lines<'r, T> {\n ///\n /// Any error other than `EndOfFile` that is produced by the underlying Reader\n /// is returned by the iterator and should be handled by the caller.\n-#[cfg(stage0)]\n-pub struct Chars<'r, T> {\n-    buffer: &'r mut T\n-}\n-\n-/// An iterator that reads a utf8-encoded character on each iteration,\n-/// until `.read_char()` encounters `EndOfFile`.\n-///\n-/// # Notes about the Iteration Protocol\n-///\n-/// The `Chars` may yield `None` and thus terminate\n-/// an iteration, but continue to yield elements if iteration\n-/// is attempted again.\n-///\n-/// # Error\n-///\n-/// Any error other than `EndOfFile` that is produced by the underlying Reader\n-/// is returned by the iterator and should be handled by the caller.\n-#[cfg(not(stage0))]\n pub struct Chars<'r, T:'r> {\n     buffer: &'r mut T\n }\n@@ -1697,20 +1612,13 @@ pub trait Acceptor<T> {\n     }\n }\n \n-/// Note: stage0-specific version that lacks bound on A.\n-#[cfg(stage0)]\n-pub struct IncomingConnections<'a, A> {\n-    inc: &'a mut A,\n-}\n-\n /// An infinite iterator over incoming connection attempts.\n /// Calling `next` will block the task until a connection is attempted.\n ///\n /// Since connection attempts can continue forever, this iterator always returns\n /// `Some`. The `Some` contains the `IoResult` representing whether the\n /// connection attempt was successful.  A successful connection will be wrapped\n /// in `Ok`. A failed connection is represented as an `Err`.\n-#[cfg(not(stage0))]\n pub struct IncomingConnections<'a, A:'a> {\n     inc: &'a mut A,\n }"}, {"sha": "7fed4c94164b6b75c07be6aa3f4c18093061955a", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=f2973665935161bb2b2eca3f41c33a4fd2fe82c4", "patch": "@@ -108,14 +108,10 @@\n #![feature(macro_rules, globs, managed_boxes, linkage)]\n #![feature(default_type_params, phase, lang_items, unsafe_destructor)]\n #![feature(import_shadowing)]\n-#![feature(issue_5723_bootstrap)]\n \n // Don't link to std. We are std.\n #![no_std]\n \n-// NOTE(stage0, pcwalton): Remove after snapshot.\n-#![allow(unknown_features)]\n-\n #![allow(deprecated)]\n #![deny(missing_doc)]\n "}, {"sha": "86036c2a2dcf2d1eb2807b0129532282d1656ebe", "filename": "src/libstd/path/mod.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibstd%2Fpath%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibstd%2Fpath%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fmod.rs?ref=f2973665935161bb2b2eca3f41c33a4fd2fe82c4", "patch": "@@ -825,15 +825,7 @@ pub trait GenericPathUnsafe {\n     unsafe fn push_unchecked<T: BytesContainer>(&mut self, path: T);\n }\n \n-/// Note: stage0-specific version that lacks bound.\n-#[cfg(stage0)]\n-pub struct Display<'a, P> {\n-    path: &'a P,\n-    filename: bool\n-}\n-\n /// Helper struct for printing paths with format!()\n-#[cfg(not(stage0))]\n pub struct Display<'a, P:'a> {\n     path: &'a P,\n     filename: bool"}, {"sha": "cf99efd24e62ad92a59fad8e87c5b0dc3f4b9a53", "filename": "src/libstd/rt/backtrace.rs", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibstd%2Frt%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibstd%2Frt%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fbacktrace.rs?ref=f2973665935161bb2b2eca3f41c33a4fd2fe82c4", "patch": "@@ -701,30 +701,6 @@ mod imp {\n     static IMAGE_FILE_MACHINE_IA64: libc::DWORD = 0x0200;\n     static IMAGE_FILE_MACHINE_AMD64: libc::DWORD = 0x8664;\n \n-    #[cfg(stage0)]\n-    #[packed]\n-    struct SYMBOL_INFO {\n-        SizeOfStruct: libc::c_ulong,\n-        TypeIndex: libc::c_ulong,\n-        Reserved: [u64, ..2],\n-        Index: libc::c_ulong,\n-        Size: libc::c_ulong,\n-        ModBase: u64,\n-        Flags: libc::c_ulong,\n-        Value: u64,\n-        Address: u64,\n-        Register: libc::c_ulong,\n-        Scope: libc::c_ulong,\n-        Tag: libc::c_ulong,\n-        NameLen: libc::c_ulong,\n-        MaxNameLen: libc::c_ulong,\n-        // note that windows has this as 1, but it basically just means that\n-        // the name is inline at the end of the struct. For us, we just bump\n-        // the struct size up to MAX_SYM_NAME.\n-        Name: [libc::c_char, ..MAX_SYM_NAME],\n-    }\n-\n-    #[cfg(not(stage0))]\n     #[repr(C, packed)]\n     struct SYMBOL_INFO {\n         SizeOfStruct: libc::c_ulong,"}, {"sha": "c8b86c47c90b5c43f09dd3ad0c86fb9e19aefba5", "filename": "src/libsync/comm/mod.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibsync%2Fcomm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibsync%2Fcomm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fcomm%2Fmod.rs?ref=f2973665935161bb2b2eca3f41c33a4fd2fe82c4", "patch": "@@ -386,18 +386,10 @@ pub struct Receiver<T> {\n /// whenever `next` is called, waiting for a new message, and `None` will be\n /// returned when the corresponding channel has hung up.\n #[unstable]\n-#[cfg(not(stage0))]\n pub struct Messages<'a, T:'a> {\n     rx: &'a Receiver<T>\n }\n \n-/// Stage0 only\n-#[cfg(stage0)]\n-#[unstable]\n-pub struct Messages<'a, T> {\n-    rx: &'a Receiver<T>\n-}\n-\n /// The sending-half of Rust's asynchronous channel type. This half can only be\n /// owned by one task, but it can be cloned to send to other tasks.\n #[unstable]"}, {"sha": "669c1c958b8842461f410a1337b9e2d13e9c888a", "filename": "src/libsync/comm/select.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibsync%2Fcomm%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibsync%2Fcomm%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fcomm%2Fselect.rs?ref=f2973665935161bb2b2eca3f41c33a4fd2fe82c4", "patch": "@@ -76,7 +76,6 @@ pub struct Select {\n /// A handle to a receiver which is currently a member of a `Select` set of\n /// receivers.  This handle is used to keep the receiver in the set as well as\n /// interact with the underlying receiver.\n-#[cfg(not(stage0))]\n pub struct Handle<'rx, T:'rx> {\n     /// The ID of this handle, used to compare against the return value of\n     /// `Select::wait()`\n@@ -92,23 +91,6 @@ pub struct Handle<'rx, T:'rx> {\n     rx: &'rx Receiver<T>,\n }\n \n-/// Stage0 only\n-#[cfg(stage0)]\n-pub struct Handle<'rx, T> {\n-    /// The ID of this handle, used to compare against the return value of\n-    /// `Select::wait()`\n-    id: uint,\n-    selector: &'rx Select,\n-    next: *mut Handle<'static, ()>,\n-    prev: *mut Handle<'static, ()>,\n-    added: bool,\n-    packet: &'rx Packet+'rx,\n-\n-    // due to our fun transmutes, we be sure to place this at the end. (nothing\n-    // previous relies on T)\n-    rx: &'rx Receiver<T>,\n-}\n-\n struct Packets { cur: *mut Handle<'static, ()> }\n \n #[doc(hidden)]"}, {"sha": "e0acce1cd945acebe9839cec9b46567cc0103014", "filename": "src/libsync/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibsync%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibsync%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Flib.rs?ref=f2973665935161bb2b2eca3f41c33a4fd2fe82c4", "patch": "@@ -29,13 +29,9 @@\n \n #![feature(phase, globs, macro_rules, unsafe_destructor)]\n #![feature(import_shadowing)]\n-#![feature(issue_5723_bootstrap)]\n #![deny(missing_doc)]\n #![no_std]\n \n-// NOTE(stage0, pcwalton): Remove after snapshot.\n-#![allow(unknown_features)]\n-\n #[phase(plugin, link)] extern crate core;\n extern crate alloc;\n extern crate collections;"}, {"sha": "08421d24fbbff7d2dcfd0498f37f9d781f034100", "filename": "src/libsync/lock.rs", "status": "modified", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibsync%2Flock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibsync%2Flock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Flock.rs?ref=f2973665935161bb2b2eca3f41c33a4fd2fe82c4", "patch": "@@ -180,7 +180,6 @@ pub struct Mutex<T> {\n \n /// An guard which is created by locking a mutex. Through this guard the\n /// underlying data can be accessed.\n-#[cfg(not(stage0))]\n pub struct MutexGuard<'a, T:'a> {\n     // FIXME #12808: strange name to try to avoid interfering with\n     // field accesses of the contained type via Deref\n@@ -190,17 +189,6 @@ pub struct MutexGuard<'a, T:'a> {\n     pub cond: Condvar<'a>,\n }\n \n-/// stage0 only\n-#[cfg(stage0)]\n-pub struct MutexGuard<'a, T> {\n-    // FIXME #12808: strange name to try to avoid interfering with\n-    // field accesses of the contained type via Deref\n-    _data: &'a mut T,\n-    /// Inner condition variable connected to the locked mutex that this guard\n-    /// was created from. This can be used for atomic-unlock-and-deschedule.\n-    pub cond: Condvar<'a>,\n-}\n-\n impl<T: Send> Mutex<T> {\n     /// Creates a new mutex to protect the user-supplied data.\n     pub fn new(user_data: T) -> Mutex<T> {\n@@ -292,7 +280,6 @@ pub struct RWLock<T> {\n \n /// A guard which is created by locking an rwlock in write mode. Through this\n /// guard the underlying data can be accessed.\n-#[cfg(not(stage0))]\n pub struct RWLockWriteGuard<'a, T:'a> {\n     // FIXME #12808: strange name to try to avoid interfering with\n     // field accesses of the contained type via Deref\n@@ -302,36 +289,15 @@ pub struct RWLockWriteGuard<'a, T:'a> {\n     pub cond: Condvar<'a>,\n }\n \n-/// stage0 only\n-#[cfg(stage0)]\n-pub struct RWLockWriteGuard<'a, T> {\n-    // FIXME #12808: strange name to try to avoid interfering with\n-    // field accesses of the contained type via Deref\n-    _data: &'a mut T,\n-    /// Inner condition variable that can be used to sleep on the write mode of\n-    /// this rwlock.\n-    pub cond: Condvar<'a>,\n-}\n-\n /// A guard which is created by locking an rwlock in read mode. Through this\n /// guard the underlying data can be accessed.\n-#[cfg(not(stage0))]\n pub struct RWLockReadGuard<'a, T:'a> {\n     // FIXME #12808: strange names to try to avoid interfering with\n     // field accesses of the contained type via Deref\n     _data: &'a T,\n     _guard: raw::RWLockReadGuard<'a>,\n }\n \n-/// Stage0 only\n-#[cfg(stage0)]\n-pub struct RWLockReadGuard<'a, T> {\n-    // FIXME #12808: strange names to try to avoid interfering with\n-    // field accesses of the contained type via Deref\n-    _data: &'a T,\n-    _guard: raw::RWLockReadGuard<'a>,\n-}\n-\n impl<T: Send + Sync> RWLock<T> {\n     /// Create a reader/writer lock with the supplied data.\n     pub fn new(user_data: T) -> RWLock<T> {"}, {"sha": "b259eb7e579ec0f382e263a25bc1ac1563e53706", "filename": "src/libsync/raw.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibsync%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibsync%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fraw.rs?ref=f2973665935161bb2b2eca3f41c33a4fd2fe82c4", "patch": "@@ -103,13 +103,6 @@ struct SemInner<Q> {\n }\n \n #[must_use]\n-#[cfg(stage0)]\n-struct SemGuard<'a, Q> {\n-    sem: &'a Sem<Q>,\n-}\n-\n-#[must_use]\n-#[cfg(not(stage0))]\n struct SemGuard<'a, Q:'a> {\n     sem: &'a Sem<Q>,\n }"}, {"sha": "d1f78c71e19df97ac9fab9536e3092a4f98ae888", "filename": "src/libsyntax/ast_map/mod.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibsyntax%2Fast_map%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibsyntax%2Fast_map%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map%2Fmod.rs?ref=f2973665935161bb2b2eca3f41c33a4fd2fe82c4", "patch": "@@ -68,12 +68,7 @@ impl<'a> Iterator<PathElem> for LinkedPath<'a> {\n     }\n }\n \n-#[cfg(stage0)]\n-#[deriving(Clone)]\n-pub struct Values<'a, T>(pub slice::Items<'a, T>);\n-\n // HACK(eddyb) move this into libstd (value wrapper for slice::Items).\n-#[cfg(not(stage0))]\n #[deriving(Clone)]\n pub struct Values<'a, T:'a>(pub slice::Items<'a, T>);\n \n@@ -483,15 +478,6 @@ impl Map {\n     }\n }\n \n-#[cfg(stage0)]\n-pub struct NodesMatchingSuffix<'a, S> {\n-    map: &'a Map,\n-    item_name: &'a S,\n-    in_which: &'a [S],\n-    idx: NodeId,\n-}\n-\n-#[cfg(not(stage0))]\n pub struct NodesMatchingSuffix<'a, S:'a> {\n     map: &'a Map,\n     item_name: &'a S,"}, {"sha": "8ef13ef2604241476872ac3748d668d399d07df7", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=f2973665935161bb2b2eca3f41c33a4fd2fe82c4", "patch": "@@ -349,14 +349,6 @@ pub trait IdVisitingOperation {\n /// A visitor that applies its operation to all of the node IDs\n /// in a visitable thing.\n \n-#[cfg(stage0)]\n-pub struct IdVisitor<'a, O> {\n-    pub operation: &'a O,\n-    pub pass_through_items: bool,\n-    pub visited_outermost: bool,\n-}\n-\n-#[cfg(not(stage0))]\n pub struct IdVisitor<'a, O:'a> {\n     pub operation: &'a O,\n     pub pass_through_items: bool,"}, {"sha": "254428486f8b4f7026a33ebd3280e969d75aa34f", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=f2973665935161bb2b2eca3f41c33a4fd2fe82c4", "patch": "@@ -25,12 +25,8 @@\n \n #![feature(macro_rules, globs, managed_boxes, default_type_params, phase)]\n #![feature(quote, struct_variant, unsafe_destructor, import_shadowing)]\n-#![feature(issue_5723_bootstrap)]\n #![allow(deprecated)]\n \n-// NOTE(stage0, pcwalton): Remove after snapshot.\n-#![allow(unknown_features)]\n-\n extern crate fmt_macros;\n extern crate debug;\n #[phase(plugin, link)] extern crate log;"}, {"sha": "9fcaa30cf5f762de96d76bb02ab99aa757ccd129", "filename": "src/snapshots.txt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Fsnapshots.txt", "raw_url": "https://github.com/rust-lang/rust/raw/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Fsnapshots.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsnapshots.txt?ref=f2973665935161bb2b2eca3f41c33a4fd2fe82c4", "patch": "@@ -1,3 +1,11 @@\n+S 2014-08-29 6025926\n+  freebsd-x86_64 285330b798eefcc929fc94c9d0604b6172ce3309\n+  linux-i386 5b57ab2dc32952dc78551a955f3c1746b2d915a3\n+  linux-x86_64 2624aeac3fe1b2359b61c1109e4708680e237ca5\n+  macos-i386 deffce32408b023bcda84f6ce338ca3de02f406b\n+  macos-x86_64 8ef7351e34fc1583570d752d223ddc6eb68ef27b\n+  winnt-i386 c2dfa9a358de8cc554007addbc09e3e43d49aec6\n+\n S 2014-08-17 a86d9ad\n   freebsd-x86_64 f49e0c8e64c8a60dc47df9965974d2a98ef70b34\n   linux-i386 8f2c5f6a1b6504ee63de73c7a53aee1e4b07bca5"}, {"sha": "e17f140994421a6d7e348d5dfd55f0d65f9d6998", "filename": "src/test/run-pass/reflect-visit-type.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2973665935161bb2b2eca3f41c33a4fd2fe82c4/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs?ref=f2973665935161bb2b2eca3f41c33a4fd2fe82c4", "patch": "@@ -61,11 +61,6 @@ impl TyVisitor for MyVisitor {\n     fn visit_char(&mut self) -> bool { true }\n \n     fn visit_estr_slice(&mut self) -> bool { true }\n-    // NOTE: remove after snapshot\n-    #[cfg(stage0)]\n-    fn visit_estr_fixed(&mut self,\n-                        _sz: uint, _sz2: uint,\n-                        _align: uint) -> bool { true }\n \n     fn visit_box(&mut self, _mtbl: uint, _inner: *const TyDesc) -> bool { true }\n     fn visit_uniq(&mut self, _mtbl: uint, _inner: *const TyDesc) -> bool { true }"}]}