{"sha": "eacc5d779fe4080dd2b45e035ca2af099b8b906d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhY2M1ZDc3OWZlNDA4MGRkMmI0NWUwMzVjYTJhZjA5OWI4YjkwNmQ=", "commit": {"author": {"name": "Adolfo Ochagav\u00eda", "email": "aochagavia92@gmail.com", "date": "2014-07-19T10:08:34Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-07-24T14:25:43Z"}, "message": "Deprecated `str::raw::from_c_str`\n\nUse `string::raw::from_buf` instead\n\n[breaking-change]", "tree": {"sha": "6b895ebcb49f2596add96c98eb10562ebe112e5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b895ebcb49f2596add96c98eb10562ebe112e5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eacc5d779fe4080dd2b45e035ca2af099b8b906d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eacc5d779fe4080dd2b45e035ca2af099b8b906d", "html_url": "https://github.com/rust-lang/rust/commit/eacc5d779fe4080dd2b45e035ca2af099b8b906d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eacc5d779fe4080dd2b45e035ca2af099b8b906d/comments", "author": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba707fb3a0735c0ca19baac426b88218c656a34b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba707fb3a0735c0ca19baac426b88218c656a34b", "html_url": "https://github.com/rust-lang/rust/commit/ba707fb3a0735c0ca19baac426b88218c656a34b"}], "stats": {"total": 52, "additions": 20, "deletions": 32}, "files": [{"sha": "69372b6d89cf73671f48164b8ecf0f7b4ea7bc91", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/eacc5d779fe4080dd2b45e035ca2af099b8b906d/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eacc5d779fe4080dd2b45e035ca2af099b8b906d/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=eacc5d779fe4080dd2b45e035ca2af099b8b906d", "patch": "@@ -555,9 +555,9 @@ impl<'a> fmt::Show for MaybeOwned<'a> {\n \n /// Unsafe operations\n pub mod raw {\n-    use core::prelude::*;\n     use core::mem;\n     use core::raw::Slice;\n+    use core::ptr::RawPtr;\n \n     use string::String;\n     use vec::Vec;\n@@ -577,7 +577,8 @@ pub mod raw {\n         result\n     }\n \n-    /// Create a Rust string from a null-terminated C string\n+    /// Deprecated. Use `CString::as_str().unwrap().to_string()`\n+    #[deprecated = \"Use CString::as_str().unwrap().to_string()\"]\n     pub unsafe fn from_c_str(c_string: *const i8) -> String {\n         let mut buf = String::new();\n         let mut len = 0;\n@@ -1348,16 +1349,6 @@ mod tests {\n              [0x50d7, 0xd824, 0x5010, 0xb369, 0x22ea]);\n     }\n \n-    #[test]\n-    fn test_raw_from_c_str() {\n-        unsafe {\n-            let a = vec![65, 65, 65, 65, 65, 65, 65, 0];\n-            let b = a.as_ptr();\n-            let c = raw::from_c_str(b);\n-            assert_eq!(c, String::from_str(\"AAAAAAA\"));\n-        }\n-    }\n-\n     #[test]\n     fn test_as_bytes() {\n         // no null"}, {"sha": "9058ae56c45e403e79f83caf56cd571a7e2d3d68", "filename": "src/libcoretest/ptr.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/eacc5d779fe4080dd2b45e035ca2af099b8b906d/src%2Flibcoretest%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eacc5d779fe4080dd2b45e035ca2af099b8b906d/src%2Flibcoretest%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fptr.rs?ref=eacc5d779fe4080dd2b45e035ca2af099b8b906d", "patch": "@@ -11,8 +11,8 @@\n use core::ptr::*;\n use libc::c_char;\n use core::mem;\n-use std::str;\n use libc;\n+use std::c_str::CString;\n \n #[test]\n fn test() {\n@@ -186,9 +186,8 @@ fn test_ptr_array_each_with_len() {\n         let mut ctr = 0;\n         let mut iteration_count = 0;\n         array_each_with_len(arr.as_ptr(), arr.len(), |e| {\n-                let actual = str::raw::from_c_str(e);\n-                let expected = str::raw::from_c_str(expected_arr[ctr].as_ptr());\n-                assert_eq!(actual.as_slice(), expected.as_slice());\n+                let actual = CString::new(e, false);\n+                assert_eq!(actual.as_str(), expected_arr[ctr].as_str());\n                 ctr += 1;\n                 iteration_count += 1;\n             });\n@@ -217,9 +216,8 @@ fn test_ptr_array_each() {\n         let mut ctr = 0u;\n         let mut iteration_count = 0u;\n         array_each(arr_ptr, |e| {\n-                let actual = str::raw::from_c_str(e);\n-                let expected = str::raw::from_c_str(expected_arr[ctr].as_ptr());\n-                assert_eq!(actual.as_slice(), expected.as_slice());\n+                let actual = CString::new(e, false);\n+                assert_eq!(actual.as_str(), expected_arr[ctr].as_str());\n                 ctr += 1;\n                 iteration_count += 1;\n             });\n@@ -232,7 +230,7 @@ fn test_ptr_array_each() {\n fn test_ptr_array_each_with_len_null_ptr() {\n     unsafe {\n         array_each_with_len(0 as *const *const libc::c_char, 1, |e| {\n-            str::raw::from_c_str(e);\n+            CString::new(e, false).as_str().unwrap();\n         });\n     }\n }\n@@ -241,7 +239,7 @@ fn test_ptr_array_each_with_len_null_ptr() {\n fn test_ptr_array_each_null_ptr() {\n     unsafe {\n         array_each(0 as *const *const libc::c_char, |e| {\n-            str::raw::from_c_str(e);\n+            CString::new(e, false).as_str().unwrap();\n         });\n     }\n }"}, {"sha": "3833d4cd0c854764488f0438ba109566fe910f48", "filename": "src/librustc/middle/trans/type_.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eacc5d779fe4080dd2b45e035ca2af099b8b906d/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eacc5d779fe4080dd2b45e035ca2af099b8b906d/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs?ref=eacc5d779fe4080dd2b45e035ca2af099b8b906d", "patch": "@@ -19,11 +19,10 @@ use middle::trans::context::CrateContext;\n use syntax::ast;\n use syntax::abi::{X86, X86_64, Arm, Mips, Mipsel};\n \n-use std::c_str::ToCStr;\n+use std::c_str::{CString, ToCStr};\n use std::mem;\n use std::cell::RefCell;\n use std::collections::HashMap;\n-use std::str::raw::from_c_str;\n \n use libc::{c_uint, c_void, free};\n \n@@ -334,9 +333,9 @@ impl TypeNames {\n     pub fn type_to_string(&self, ty: Type) -> String {\n         unsafe {\n             let s = llvm::LLVMTypeToString(ty.to_ref());\n-            let ret = from_c_str(s);\n+            let ret = CString::new(s, false).as_str().unwrap().to_string();\n             free(s as *mut c_void);\n-            ret.to_string()\n+            ret\n         }\n     }\n \n@@ -348,9 +347,9 @@ impl TypeNames {\n     pub fn val_to_string(&self, val: ValueRef) -> String {\n         unsafe {\n             let s = llvm::LLVMValueToString(val);\n-            let ret = from_c_str(s);\n+            let ret = CString::new(s, false).as_str().unwrap().to_string();\n             free(s as *mut c_void);\n-            ret.to_string()\n+            ret\n         }\n     }\n }"}, {"sha": "dc43a68e64d098b6b872ed46dd91a16cf3fc67f4", "filename": "src/librustuv/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eacc5d779fe4080dd2b45e035ca2af099b8b906d/src%2Flibrustuv%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eacc5d779fe4080dd2b45e035ca2af099b8b906d/src%2Flibrustuv%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Flib.rs?ref=eacc5d779fe4080dd2b45e035ca2af099b8b906d", "patch": "@@ -55,14 +55,14 @@ extern crate libc;\n extern crate alloc;\n \n use libc::{c_int, c_void};\n+use std::c_str::CString;\n use std::fmt;\n use std::mem;\n use std::ptr;\n use std::rt::local::Local;\n use std::rt::rtio;\n use std::rt::rtio::{IoResult, IoError};\n use std::rt::task::{BlockedTask, Task};\n-use std::str::raw::from_c_str;\n use std::task;\n \n pub use self::async::AsyncWatcher;\n@@ -363,7 +363,7 @@ impl UvError {\n             let inner = match self { &UvError(a) => a };\n             let name_str = uvll::uv_err_name(inner);\n             assert!(name_str.is_not_null());\n-            from_c_str(name_str).to_string()\n+            CString::new(name_str, false).as_str().unwrap().to_string()\n         }\n     }\n \n@@ -372,7 +372,7 @@ impl UvError {\n             let inner = match self { &UvError(a) => a };\n             let desc_str = uvll::uv_strerror(inner);\n             assert!(desc_str.is_not_null());\n-            from_c_str(desc_str).to_string()\n+            CString::new(desc_str, false).as_str().unwrap().to_string()\n         }\n     }\n "}, {"sha": "1b61dec99b4bab94de6aa878665e7cb6cea4931a", "filename": "src/libstd/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eacc5d779fe4080dd2b45e035ca2af099b8b906d/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eacc5d779fe4080dd2b45e035ca2af099b8b906d/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=eacc5d779fe4080dd2b45e035ca2af099b8b906d", "patch": "@@ -998,7 +998,7 @@ pub fn error_string(errnum: uint) -> String {\n                 fail!(\"strerror_r failure\");\n             }\n \n-            str::raw::from_c_str(p as *const c_char).into_string()\n+            ::c_str::CString::new(p as *const c_char, false).as_str().unwrap().to_string()\n         }\n     }\n "}, {"sha": "57d262d3268a16bd5a9558be82943988d6193bbf", "filename": "src/test/run-pass/const-str-ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eacc5d779fe4080dd2b45e035ca2af099b8b906d/src%2Ftest%2Frun-pass%2Fconst-str-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eacc5d779fe4080dd2b45e035ca2af099b8b906d/src%2Ftest%2Frun-pass%2Fconst-str-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-str-ptr.rs?ref=eacc5d779fe4080dd2b45e035ca2af099b8b906d", "patch": "@@ -24,6 +24,6 @@ pub fn main() {\n         assert!(*(&B[0] as *const u8) == A[0]);\n \n         let bar = str::raw::from_utf8(A).to_c_str();\n-        assert_eq!(str::raw::from_c_str(bar.as_ptr()), \"hi\".to_string());\n+        assert_eq!(bar.as_str(), \"hi\".to_c_str().as_str());\n     }\n }"}]}