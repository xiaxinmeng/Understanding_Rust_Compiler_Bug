{"sha": "644fc403dda0fb51facdc6b8c26a3165512f33ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0NGZjNDAzZGRhMGZiNTFmYWNkYzZiOGMyNmEzMTY1NTEyZjMzYWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-09T16:31:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-09T16:31:07Z"}, "message": "Auto merge of #41814 - gamazeps:thread-struct-doc, r=steveklabnik\n\n[Doc] improve `thread::Thread` and `thread::Builder` documentations\n\nPart of #29378\n\n- Adds information about the stack_size when using `Builder`. This might be considered too low level, but I assume that if someone wants to create their own builder instead of using `thread::spawn` they may be interested in that info.\n- Updates the `thread::Thread` structure doc, mostly by explaining how to get one, the previous example was removed because it was not related to `thread::Thread`, but rather to `thread::Builder::name`.\n  Not much is present there, mostly because this API is not often used (the only method that seems useful is `unpark`, which is documented in #41809).", "tree": {"sha": "fce3da654adadc678dacfd316b3191c0b7597113", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fce3da654adadc678dacfd316b3191c0b7597113"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/644fc403dda0fb51facdc6b8c26a3165512f33ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/644fc403dda0fb51facdc6b8c26a3165512f33ae", "html_url": "https://github.com/rust-lang/rust/commit/644fc403dda0fb51facdc6b8c26a3165512f33ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/644fc403dda0fb51facdc6b8c26a3165512f33ae/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3fc547194d22dc673274ac20e9a7b1e607cb862", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3fc547194d22dc673274ac20e9a7b1e607cb862", "html_url": "https://github.com/rust-lang/rust/commit/f3fc547194d22dc673274ac20e9a7b1e607cb862"}, {"sha": "323a774c2f64619623c45aec068cf6c1c905d314", "url": "https://api.github.com/repos/rust-lang/rust/commits/323a774c2f64619623c45aec068cf6c1c905d314", "html_url": "https://github.com/rust-lang/rust/commit/323a774c2f64619623c45aec068cf6c1c905d314"}], "stats": {"total": 43, "additions": 20, "deletions": 23}, "files": [{"sha": "1bb0d9f3babfd1dd1ca60f8987ea19ccadffcd47", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 20, "deletions": 23, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/644fc403dda0fb51facdc6b8c26a3165512f33ae/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/644fc403dda0fb51facdc6b8c26a3165512f33ae/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=644fc403dda0fb51facdc6b8c26a3165512f33ae", "patch": "@@ -244,6 +244,11 @@ impl Builder {\n     /// Generates the base configuration for spawning a thread, from which\n     /// configuration methods can be chained.\n     ///\n+    /// If the [`stack_size`] field is not specified, the stack size\n+    /// will be the `RUST_MIN_STACK` environment variable, if it is\n+    /// not specified either, a sensible default size will be set (2MB as\n+    /// of the writting of this doc).\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -259,6 +264,8 @@ impl Builder {\n     ///\n     /// handler.join().unwrap();\n     /// ```\n+    ///\n+    /// [`stack_size`]: ../../std/thread/struct.Builder.html#method.stack_size\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new() -> Builder {\n         Builder {\n@@ -728,31 +735,21 @@ struct Inner {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n /// A handle to a thread.\n ///\n-/// You can use it to identify a thread (by name, for example). Most of the\n-/// time, there is no need to directly create a `Thread` struct using the\n-/// constructor, instead you should use a function like `spawn` to create\n-/// new threads, see the docs of [`Builder`] and [`spawn`] for more.\n+/// Threads are represented via the `Thread` type, which you can get in one of\n+/// two ways:\n ///\n-/// # Examples\n+/// * By spawning a new thread, e.g. using the [`thread::spawn`][`spawn`]\n+///   function, and calling [`thread`][`JoinHandle::thread`] on the\n+///   [`JoinHandle`].\n+/// * By requesting the current thread, using the [`thread::current`] function.\n+///\n+/// The [`thread::current`] function is available even for threads not spawned\n+/// by the APIs of this module.\n+///\n+/// There is usualy no need to create a `Thread` struct yourself, one\n+/// should instead use a function like `spawn` to create new threads, see the\n+/// docs of [`Builder`] and [`spawn`] for more details.\n ///\n-/// ```no_run\n-/// # // Note that this example isn't executed by default because it causes\n-/// # // deadlocks on Windows unfortunately (see #25824)\n-/// use std::thread::Builder;\n-///\n-/// for i in 0..5 {\n-///     let thread_name = format!(\"thread_{}\", i);\n-///     Builder::new()\n-///         .name(thread_name) // Now you can identify which thread panicked\n-///                            // thanks to the handle's name\n-///         .spawn(move || {\n-///             if i == 3 {\n-///                  panic!(\"I'm scared!!!\");\n-///             }\n-///         })\n-///         .unwrap();\n-/// }\n-/// ```\n /// [`Builder`]: ../../std/thread/struct.Builder.html\n /// [`spawn`]: ../../std/thread/fn.spawn.html\n "}]}