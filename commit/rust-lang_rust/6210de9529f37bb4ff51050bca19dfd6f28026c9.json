{"sha": "6210de9529f37bb4ff51050bca19dfd6f28026c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyMTBkZTk1MjlmMzdiYjRmZjUxMDUwYmNhMTlkZmQ2ZjI4MDI2Yzk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-05-02T01:46:34Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-05-02T01:47:09Z"}, "message": "lang: fix code for maintaining borrow list", "tree": {"sha": "75d79271bc55df772ff6a7e1116a9b807bb38f31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75d79271bc55df772ff6a7e1116a9b807bb38f31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6210de9529f37bb4ff51050bca19dfd6f28026c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6210de9529f37bb4ff51050bca19dfd6f28026c9", "html_url": "https://github.com/rust-lang/rust/commit/6210de9529f37bb4ff51050bca19dfd6f28026c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6210de9529f37bb4ff51050bca19dfd6f28026c9/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d231c427e655b7164571a1a712563ba5fd2e4a3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d231c427e655b7164571a1a712563ba5fd2e4a3c", "html_url": "https://github.com/rust-lang/rust/commit/d231c427e655b7164571a1a712563ba5fd2e4a3c"}], "stats": {"total": 61, "additions": 48, "deletions": 13}, "files": [{"sha": "017fc4b7b63a0be0e99704e5694a6f7f8aedea27", "filename": "src/libcore/unstable/lang.rs", "status": "modified", "additions": 40, "deletions": 10, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/6210de9529f37bb4ff51050bca19dfd6f28026c9/src%2Flibcore%2Funstable%2Flang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6210de9529f37bb4ff51050bca19dfd6f28026c9/src%2Flibcore%2Funstable%2Flang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Flang.rs?ref=6210de9529f37bb4ff51050bca19dfd6f28026c9", "patch": "@@ -19,6 +19,7 @@ use sys;\n use unstable::exchange_alloc;\n use cast::transmute;\n use task::rt::rust_get_task;\n+use option::{Some, None};\n \n #[allow(non_camel_case_types)]\n pub type rust_task = c_void;\n@@ -71,6 +72,7 @@ pub fn fail_bounds_check(file: *c_char, line: size_t,\n     }\n }\n \n+#[deriving(Eq)]\n struct BorrowRecord {\n     box: *mut BoxRepr,\n     file: *c_char,\n@@ -108,7 +110,7 @@ pub fn fail_borrowed(box: *mut BoxRepr, file: *c_char, line: size_t) {\n                         str::raw::from_c_str(entry.file)\n                     };\n                     str::push_str(&mut msg, filename);\n-                    str::push_str(&mut msg, fmt!(\":%u\", line as uint));\n+                    str::push_str(&mut msg, fmt!(\":%u\", entry.line as uint));\n                     sep = \" and at \";\n                 }\n             }\n@@ -208,15 +210,36 @@ fn add_borrow_to_task_list(a: *mut BoxRepr, file: *c_char, line: size_t) {\n     }\n }\n \n+fn remove_borrow_from_task_list(a: *mut BoxRepr, file: *c_char, line: size_t) {\n+    do swap_task_borrow_list |borrow_list| {\n+        let mut borrow_list = borrow_list;\n+        let br = BorrowRecord {box: a, file: file, line: line};\n+        match borrow_list.rposition_elem(&br) {\n+            Some(idx) => {\n+                borrow_list.remove(idx);\n+                borrow_list\n+            }\n+            None => {\n+                let err = fmt!(\"no borrow found, br=%?, borrow_list=%?\",\n+                               br, borrow_list);\n+                do str::as_buf(err) |msg_p, _| {\n+                    fail_(msg_p as *c_char, file, line)\n+                }\n+            }\n+        }\n+    }\n+}\n+\n #[cfg(not(stage0))]\n #[lang=\"borrow_as_imm\"]\n #[inline(always)]\n pub unsafe fn borrow_as_imm(a: *u8, file: *c_char, line: size_t) -> uint {\n     let a: *mut BoxRepr = transmute(a);\n     let ref_count = (*a).header.ref_count;\n \n-    debug_ptr(\"borrow_as_imm (ptr): \", a);\n-    debug_ptr(\"borrow_as_imm (ref): \", ref_count as *());\n+    debug_ptr(\"borrow_as_imm (ptr) :\", a);\n+    debug_ptr(\"              (ref) :\", ref_count as *());\n+    debug_ptr(\"              (line): \", line as *());\n \n     if (ref_count & MUT_BIT) != 0 {\n         fail_borrowed(a, file, line);\n@@ -236,7 +259,7 @@ pub unsafe fn borrow_as_mut(a: *u8, file: *c_char, line: size_t) -> uint {\n     let a: *mut BoxRepr = transmute(a);\n \n     debug_ptr(\"borrow_as_mut (ptr): \", a);\n-    debug_ptr(\"borrow_as_mut (line): \", line as *());\n+    debug_ptr(\"              (line): \", line as *());\n \n     let ref_count = (*a).header.ref_count;\n     if (ref_count & (MUT_BIT|FROZEN_BIT)) != 0 {\n@@ -265,18 +288,25 @@ pub unsafe fn return_to_mut(a: *u8) {\n #[cfg(not(stage0))]\n #[lang=\"return_to_mut\"]\n #[inline(always)]\n-pub unsafe fn return_to_mut(a: *u8, old_ref_count: uint) {\n+pub unsafe fn return_to_mut(a: *u8, old_ref_count: uint,\n+                            file: *c_char, line: size_t) {\n     // Sometimes the box is null, if it is conditionally frozen.\n     // See e.g. #4904.\n     if !a.is_null() {\n         let a: *mut BoxRepr = transmute(a);\n+        let ref_count = (*a).header.ref_count;\n+        let combined = (ref_count & !ALL_BITS) | (old_ref_count & ALL_BITS);\n+        (*a).header.ref_count = combined;\n \n-        debug_ptr(\"return_to_mut (ptr): \", a);\n-        debug_ptr(\"return_to_mut (ref): \", old_ref_count as *());\n+        debug_ptr(\"return_to_mut (ptr) : \", a);\n+        debug_ptr(\"              (line): \", line as *());\n+        debug_ptr(\"              (old) : \", old_ref_count as *());\n+        debug_ptr(\"              (new) : \", ref_count as *());\n+        debug_ptr(\"              (comb): \", combined as *());\n \n-        let ref_count = (*a).header.ref_count & !ALL_BITS;\n-        let old_bits = old_ref_count & ALL_BITS;\n-        (*a).header.ref_count = ref_count | old_bits;\n+        if ::rt::env::get().debug_borrows {\n+            remove_borrow_from_task_list(a, file, line);\n+        }\n     }\n }\n "}, {"sha": "dba9ddd2b1d1ac8a38b45eb5017fbf794428000d", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6210de9529f37bb4ff51050bca19dfd6f28026c9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6210de9529f37bb4ff51050bca19dfd6f28026c9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=6210de9529f37bb4ff51050bca19dfd6f28026c9", "patch": "@@ -469,7 +469,9 @@ pub fn add_clean_temp_mem(bcx: block, val: ValueRef, t: ty::t) {\n }\n pub fn add_clean_return_to_mut(bcx: block,\n                                frozen_val_ref: ValueRef,\n-                               bits_val_ref: ValueRef) {\n+                               bits_val_ref: ValueRef,\n+                               filename_val: ValueRef,\n+                               line_val: ValueRef) {\n     //! When an `@mut` has been frozen, we have to\n     //! call the lang-item `return_to_mut` when the\n     //! freeze goes out of scope. We need to pass\n@@ -495,7 +497,9 @@ pub fn add_clean_return_to_mut(bcx: block,\n                                         build::PointerCast(bcx,\n                                                            frozen_val_ref,\n                                                            T_ptr(T_ptr(T_i8())))),\n-                            build::Load(bcx, bits_val_ref)\n+                            build::Load(bcx, bits_val_ref),\n+                            filename_val,\n+                            line_val\n                         ],\n                         expr::Ignore\n                     )"}, {"sha": "d6df6c87dec433e9f6dd406cdff554554e048278", "filename": "src/librustc/middle/trans/datum.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6210de9529f37bb4ff51050bca19dfd6f28026c9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6210de9529f37bb4ff51050bca19dfd6f28026c9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs?ref=6210de9529f37bb4ff51050bca19dfd6f28026c9", "patch": "@@ -578,7 +578,8 @@ pub impl Datum {\n                     expr::SaveIn(scratch_bits.val));\n \n                 add_clean_return_to_mut(\n-                    cleanup_bcx, scratch.val, scratch_bits.val);\n+                    cleanup_bcx, scratch.val, scratch_bits.val,\n+                    filename, line);\n             }\n         }\n "}]}