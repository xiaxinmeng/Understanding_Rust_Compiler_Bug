{"sha": "e45a250f8c26e94a2a3ff8b50305530f75718239", "node_id": "C_kwDOAAsO6NoAKGU0NWEyNTBmOGMyNmU5NGEyYTNmZjhiNTAzMDU1MzBmNzU3MTgyMzk", "commit": {"author": {"name": "Zachary S", "email": "zasample18+github@gmail.com", "date": "2022-07-25T20:43:25Z"}, "committer": {"name": "Zachary S", "email": "zasample18+github@gmail.com", "date": "2022-07-25T20:45:17Z"}, "message": "fix: Insert spaces when inlining a function defined in a macro.", "tree": {"sha": "484b7f4feb29cae0616780b8e3ee659c34923bc5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/484b7f4feb29cae0616780b8e3ee659c34923bc5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e45a250f8c26e94a2a3ff8b50305530f75718239", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e45a250f8c26e94a2a3ff8b50305530f75718239", "html_url": "https://github.com/rust-lang/rust/commit/e45a250f8c26e94a2a3ff8b50305530f75718239", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e45a250f8c26e94a2a3ff8b50305530f75718239/comments", "author": {"login": "zachs18", "id": 8355914, "node_id": "MDQ6VXNlcjgzNTU5MTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8355914?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zachs18", "html_url": "https://github.com/zachs18", "followers_url": "https://api.github.com/users/zachs18/followers", "following_url": "https://api.github.com/users/zachs18/following{/other_user}", "gists_url": "https://api.github.com/users/zachs18/gists{/gist_id}", "starred_url": "https://api.github.com/users/zachs18/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zachs18/subscriptions", "organizations_url": "https://api.github.com/users/zachs18/orgs", "repos_url": "https://api.github.com/users/zachs18/repos", "events_url": "https://api.github.com/users/zachs18/events{/privacy}", "received_events_url": "https://api.github.com/users/zachs18/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zachs18", "id": 8355914, "node_id": "MDQ6VXNlcjgzNTU5MTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8355914?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zachs18", "html_url": "https://github.com/zachs18", "followers_url": "https://api.github.com/users/zachs18/followers", "following_url": "https://api.github.com/users/zachs18/following{/other_user}", "gists_url": "https://api.github.com/users/zachs18/gists{/gist_id}", "starred_url": "https://api.github.com/users/zachs18/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zachs18/subscriptions", "organizations_url": "https://api.github.com/users/zachs18/orgs", "repos_url": "https://api.github.com/users/zachs18/repos", "events_url": "https://api.github.com/users/zachs18/events{/privacy}", "received_events_url": "https://api.github.com/users/zachs18/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b1ed70c121e1fefa9d32b87091fbac16a37c215", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b1ed70c121e1fefa9d32b87091fbac16a37c215", "html_url": "https://github.com/rust-lang/rust/commit/0b1ed70c121e1fefa9d32b87091fbac16a37c215"}], "stats": {"total": 50, "additions": 48, "deletions": 2}, "files": [{"sha": "8b2f6ac75a28eacaf812c3045e809b6496a212d7", "filename": "crates/ide-assists/src/handlers/inline_call.rs", "status": "modified", "additions": 48, "deletions": 2, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/e45a250f8c26e94a2a3ff8b50305530f75718239/crates%2Fide-assists%2Fsrc%2Fhandlers%2Finline_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e45a250f8c26e94a2a3ff8b50305530f75718239/crates%2Fide-assists%2Fsrc%2Fhandlers%2Finline_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Finline_call.rs?ref=e45a250f8c26e94a2a3ff8b50305530f75718239", "patch": "@@ -7,7 +7,7 @@ use ide_db::{\n     imports::insert_use::remove_path_if_in_use_stmt,\n     path_transform::PathTransform,\n     search::{FileReference, SearchScope},\n-    syntax_helpers::node_ext::expr_as_name_ref,\n+    syntax_helpers::{insert_whitespace_into_node::insert_ws_into, node_ext::expr_as_name_ref},\n     RootDatabase,\n };\n use itertools::{izip, Itertools};\n@@ -301,7 +301,18 @@ fn inline(\n     params: &[(ast::Pat, Option<ast::Type>, hir::Param)],\n     CallInfo { node, arguments, generic_arg_list }: &CallInfo,\n ) -> ast::Expr {\n-    let body = fn_body.clone_for_update();\n+    let body = if sema.hir_file_for(fn_body.syntax()).is_macro() {\n+        cov_mark::hit!(inline_call_defined_in_macro);\n+        if let Some(body) = ast::BlockExpr::cast(insert_ws_into(fn_body.syntax().clone())) {\n+            body\n+        } else {\n+            // FIXME(zachs18): I believe this should be unreachable,\n+            // since insert_ws_into shouldn't change the kind of the SyntaxNode.\n+            fn_body.clone_for_update()\n+        }\n+    } else {\n+        fn_body.clone_for_update()\n+    };\n     let usages_for_locals = |local| {\n         Definition::Local(local)\n             .usages(sema)\n@@ -1144,6 +1155,41 @@ fn bar() -> u32 {\n         x\n     }) + foo()\n }\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn inline_call_defined_in_macro() {\n+        cov_mark::check!(inline_call_defined_in_macro);\n+        check_assist(\n+            inline_call,\n+            r#\"\n+macro_rules! define_foo {\n+    () => { fn foo() -> u32 {\n+        let x = 0;\n+        x\n+    } };\n+}\n+define_foo!();\n+fn bar() -> u32 {\n+    foo$0()\n+}\n+\"#,\n+            r#\"\n+macro_rules! define_foo {\n+    () => { fn foo() -> u32 {\n+        let x = 0;\n+        x\n+    } };\n+}\n+define_foo!();\n+fn bar() -> u32 {\n+    {\n+      let x = 0;\n+      x\n+    }\n+}\n \"#,\n         )\n     }"}]}