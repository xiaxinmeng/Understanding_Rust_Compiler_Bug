{"sha": "bed6eae304a844d782eb3c387a8151ae5dd59dfb", "node_id": "C_kwDOAAsO6NoAKGJlZDZlYWUzMDRhODQ0ZDc4MmViM2MzODdhODE1MWFlNWRkNTlkZmI", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-10-20T12:03:41Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-10-20T12:03:41Z"}, "message": "Fix qualified lint completions ignoring the qualifier value", "tree": {"sha": "b1f746f26eebce057c3f24f71a7d79423b3add23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1f746f26eebce057c3f24f71a7d79423b3add23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bed6eae304a844d782eb3c387a8151ae5dd59dfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bed6eae304a844d782eb3c387a8151ae5dd59dfb", "html_url": "https://github.com/rust-lang/rust/commit/bed6eae304a844d782eb3c387a8151ae5dd59dfb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bed6eae304a844d782eb3c387a8151ae5dd59dfb/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c9b8d7ce5a43f0732165fb88bf294e49bad2b5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c9b8d7ce5a43f0732165fb88bf294e49bad2b5a", "html_url": "https://github.com/rust-lang/rust/commit/6c9b8d7ce5a43f0732165fb88bf294e49bad2b5a"}], "stats": {"total": 223, "additions": 119, "deletions": 104}, "files": [{"sha": "e139dcd40efeaf4918834b3bc1b50c223d0d3586", "filename": "crates/ide_completion/src/completions/attribute.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bed6eae304a844d782eb3c387a8151ae5dd59dfb/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bed6eae304a844d782eb3c387a8151ae5dd59dfb/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs?ref=bed6eae304a844d782eb3c387a8151ae5dd59dfb", "patch": "@@ -4,7 +4,7 @@\n //! for built-in attributes.\n \n use hir::HasAttrs;\n-use ide_db::helpers::generated_lints::{CLIPPY_LINTS, DEFAULT_LINTS, FEATURES};\n+use ide_db::helpers::generated_lints::{CLIPPY_LINTS, DEFAULT_LINTS, FEATURES, RUSTDOC_LINTS};\n use itertools::Itertools;\n use once_cell::sync::Lazy;\n use rustc_hash::FxHashMap;\n@@ -29,12 +29,16 @@ pub(crate) fn complete_attribute(acc: &mut Completions, ctx: &CompletionContext)\n     };\n     match (name_ref, attribute.token_tree()) {\n         (Some(path), Some(token_tree)) => match path.text().as_str() {\n-            \"derive\" => derive::complete_derive(acc, ctx, token_tree),\n             \"repr\" => repr::complete_repr(acc, ctx, token_tree),\n-            \"feature\" => lint::complete_lint(acc, ctx, token_tree, FEATURES),\n+            \"derive\" => derive::complete_derive(acc, ctx, &parse_comma_sep_paths(token_tree)?),\n+            \"feature\" => {\n+                lint::complete_lint(acc, ctx, &parse_comma_sep_paths(token_tree)?, FEATURES)\n+            }\n             \"allow\" | \"warn\" | \"deny\" | \"forbid\" => {\n-                lint::complete_lint(acc, ctx, token_tree.clone(), DEFAULT_LINTS);\n-                lint::complete_lint(acc, ctx, token_tree, CLIPPY_LINTS);\n+                let existing_lints = parse_comma_sep_paths(token_tree)?;\n+                lint::complete_lint(acc, ctx, &existing_lints, DEFAULT_LINTS);\n+                lint::complete_lint(acc, ctx, &existing_lints, CLIPPY_LINTS);\n+                lint::complete_lint(acc, ctx, &existing_lints, RUSTDOC_LINTS);\n             }\n             \"cfg\" => {\n                 cfg::complete_cfg(acc, ctx);"}, {"sha": "e460a91102ce37e5bc7366b269dde98a72d57a98", "filename": "crates/ide_completion/src/completions/attribute/derive.rs", "status": "modified", "additions": 45, "deletions": 48, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/bed6eae304a844d782eb3c387a8151ae5dd59dfb/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bed6eae304a844d782eb3c387a8151ae5dd59dfb/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs?ref=bed6eae304a844d782eb3c387a8151ae5dd59dfb", "patch": "@@ -14,60 +14,57 @@ use crate::{\n pub(super) fn complete_derive(\n     acc: &mut Completions,\n     ctx: &CompletionContext,\n-    derive_input: ast::TokenTree,\n+    existing_derives: &[ast::Path],\n ) {\n-    if let Some(existing_derives) = super::parse_comma_sep_paths(derive_input.clone()) {\n-        let core = FamousDefs(&ctx.sema, ctx.krate).core();\n-        let existing_derives: FxHashSet<_> = existing_derives\n-            .into_iter()\n-            .filter_map(|path| ctx.scope.speculative_resolve_as_mac(&path))\n-            .filter(|mac| mac.kind() == MacroKind::Derive)\n-            .collect();\n+    let core = FamousDefs(&ctx.sema, ctx.krate).core();\n+    let existing_derives: FxHashSet<_> = existing_derives\n+        .into_iter()\n+        .filter_map(|path| ctx.scope.speculative_resolve_as_mac(&path))\n+        .filter(|mac| mac.kind() == MacroKind::Derive)\n+        .collect();\n \n-        for (name, mac) in get_derives_in_scope(ctx) {\n-            if existing_derives.contains(&mac) {\n-                continue;\n-            }\n+    for (name, mac) in get_derives_in_scope(ctx) {\n+        if existing_derives.contains(&mac) {\n+            continue;\n+        }\n \n-            let name = name.to_smol_str();\n-            let label;\n-            let (label, lookup) = match core.zip(mac.module(ctx.db).map(|it| it.krate())) {\n-                // show derive dependencies for `core`/`std` derives\n-                Some((core, mac_krate)) if core == mac_krate => {\n-                    if let Some(derive_completion) = DEFAULT_DERIVE_DEPENDENCIES\n-                        .iter()\n-                        .find(|derive_completion| derive_completion.label == name)\n-                    {\n-                        let mut components = vec![derive_completion.label];\n-                        components.extend(derive_completion.dependencies.iter().filter(\n-                            |&&dependency| {\n-                                !existing_derives\n-                                    .iter()\n-                                    .filter_map(|it| it.name(ctx.db))\n-                                    .any(|it| it.to_smol_str() == dependency)\n-                            },\n-                        ));\n-                        let lookup = components.join(\", \");\n-                        label = components.iter().rev().join(\", \");\n-                        (label.as_str(), Some(lookup))\n-                    } else {\n-                        (&*name, None)\n-                    }\n+        let name = name.to_smol_str();\n+        let label;\n+        let (label, lookup) = match core.zip(mac.module(ctx.db).map(|it| it.krate())) {\n+            // show derive dependencies for `core`/`std` derives\n+            Some((core, mac_krate)) if core == mac_krate => {\n+                if let Some(derive_completion) = DEFAULT_DERIVE_DEPENDENCIES\n+                    .iter()\n+                    .find(|derive_completion| derive_completion.label == name)\n+                {\n+                    let mut components = vec![derive_completion.label];\n+                    components.extend(derive_completion.dependencies.iter().filter(\n+                        |&&dependency| {\n+                            !existing_derives\n+                                .iter()\n+                                .filter_map(|it| it.name(ctx.db))\n+                                .any(|it| it.to_smol_str() == dependency)\n+                        },\n+                    ));\n+                    let lookup = components.join(\", \");\n+                    label = components.iter().rev().join(\", \");\n+                    (label.as_str(), Some(lookup))\n+                } else {\n+                    (&*name, None)\n                 }\n-                _ => (&*name, None),\n-            };\n-\n-            let mut item =\n-                CompletionItem::new(CompletionKind::Attribute, ctx.source_range(), label);\n-            item.kind(CompletionItemKind::Attribute);\n-            if let Some(docs) = mac.docs(ctx.db) {\n-                item.documentation(docs);\n             }\n-            if let Some(lookup) = lookup {\n-                item.lookup_by(lookup);\n-            }\n-            item.add_to(acc);\n+            _ => (&*name, None),\n+        };\n+\n+        let mut item = CompletionItem::new(CompletionKind::Attribute, ctx.source_range(), label);\n+        item.kind(CompletionItemKind::Attribute);\n+        if let Some(docs) = mac.docs(ctx.db) {\n+            item.documentation(docs);\n+        }\n+        if let Some(lookup) = lookup {\n+            item.lookup_by(lookup);\n         }\n+        item.add_to(acc);\n     }\n }\n "}, {"sha": "18942f8beb34245337e115651e5b3a17a1b7cb30", "filename": "crates/ide_completion/src/completions/attribute/lint.rs", "status": "modified", "additions": 46, "deletions": 50, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/bed6eae304a844d782eb3c387a8151ae5dd59dfb/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bed6eae304a844d782eb3c387a8151ae5dd59dfb/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Flint.rs?ref=bed6eae304a844d782eb3c387a8151ae5dd59dfb", "patch": "@@ -11,60 +11,56 @@ use crate::{\n pub(super) fn complete_lint(\n     acc: &mut Completions,\n     ctx: &CompletionContext,\n-    derive_input: ast::TokenTree,\n+    existing_lints: &[ast::Path],\n     lints_completions: &[Lint],\n ) {\n-    if let Some(existing_lints) = super::parse_comma_sep_paths(derive_input) {\n-        for &Lint { label, description } in lints_completions {\n-            let (qual, name) = {\n-                // FIXME: change `Lint`'s label to not store a path in it but split the prefix off instead?\n-                let mut parts = label.split(\"::\");\n-                let ns_or_label = match parts.next() {\n-                    Some(it) => it,\n-                    None => continue,\n-                };\n-                let label = parts.next();\n-                match label {\n-                    Some(label) => (Some(ns_or_label), label),\n-                    None => (None, ns_or_label),\n-                }\n+    let is_qualified = ctx.previous_token_is(T![:]);\n+    for &Lint { label, description } in lints_completions {\n+        let (qual, name) = {\n+            // FIXME: change `Lint`'s label to not store a path in it but split the prefix off instead?\n+            let mut parts = label.split(\"::\");\n+            let ns_or_label = match parts.next() {\n+                Some(it) => it,\n+                None => continue,\n             };\n-            let lint_already_annotated = existing_lints\n-                .iter()\n-                .filter_map(|path| {\n-                    let q = path.qualifier();\n-                    if q.as_ref().and_then(|it| it.qualifier()).is_some() {\n-                        return None;\n-                    }\n-                    Some((q.and_then(|it| it.as_single_name_ref()), path.segment()?.name_ref()?))\n-                })\n-                .any(|(q, name_ref)| {\n-                    let qualifier_matches = match (q, qual) {\n-                        (None, None) => true,\n-                        (None, Some(_)) => false,\n-                        (Some(_), None) => false,\n-                        (Some(q), Some(ns)) => q.text() == ns,\n-                    };\n-                    qualifier_matches && name_ref.text() == name\n-                });\n-            if lint_already_annotated {\n-                continue;\n+            let label = parts.next();\n+            match label {\n+                Some(label) => (Some(ns_or_label), label),\n+                None => (None, ns_or_label),\n             }\n-            let insert = match (qual, ctx.previous_token_is(T![:])) {\n-                (Some(qual), false) => format!(\"{}::{}\", qual, name),\n-                // user is completing a qualified path but this completion has no qualifier\n-                // so discard this completion\n-                // FIXME: This is currently very hacky and will propose odd completions if\n-                // we add more qualified (tool) completions other than clippy\n-                (None, true) => continue,\n-                _ => name.to_owned(),\n-            };\n-            let mut item =\n-                CompletionItem::new(CompletionKind::Attribute, ctx.source_range(), label);\n-            item.kind(CompletionItemKind::Attribute)\n-                .insert_text(insert)\n-                .documentation(hir::Documentation::new(description.to_owned()));\n-            item.add_to(acc)\n+        };\n+        if qual.is_none() && is_qualified {\n+            // qualified completion requested, but this lint is unqualified\n+            continue;\n+        }\n+        let lint_already_annotated = existing_lints\n+            .iter()\n+            .filter_map(|path| {\n+                let q = path.qualifier();\n+                if q.as_ref().and_then(|it| it.qualifier()).is_some() {\n+                    return None;\n+                }\n+                Some((q.and_then(|it| it.as_single_name_ref()), path.segment()?.name_ref()?))\n+            })\n+            .any(|(q, name_ref)| {\n+                let qualifier_matches = match (q, qual) {\n+                    (None, None) => true,\n+                    (None, Some(_)) => false,\n+                    (Some(_), None) => false,\n+                    (Some(q), Some(ns)) => q.text() == ns,\n+                };\n+                qualifier_matches && name_ref.text() == name\n+            });\n+        if lint_already_annotated {\n+            continue;\n         }\n+        let label = match qual {\n+            Some(qual) if !is_qualified => format!(\"{}::{}\", qual, name),\n+            _ => name.to_owned(),\n+        };\n+        let mut item = CompletionItem::new(CompletionKind::Attribute, ctx.source_range(), label);\n+        item.kind(CompletionItemKind::Attribute)\n+            .documentation(hir::Documentation::new(description.to_owned()));\n+        item.add_to(acc)\n     }\n }"}, {"sha": "9f86fc50a22e4e8700869850810e64edef11d96c", "filename": "crates/ide_completion/src/tests/attribute.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bed6eae304a844d782eb3c387a8151ae5dd59dfb/crates%2Fide_completion%2Fsrc%2Ftests%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bed6eae304a844d782eb3c387a8151ae5dd59dfb/crates%2Fide_completion%2Fsrc%2Ftests%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fattribute.rs?ref=bed6eae304a844d782eb3c387a8151ae5dd59dfb", "patch": "@@ -693,11 +693,29 @@ mod lint {\n     #[test]\n     fn lint_clippy_qualified() {\n         check_edit(\n-            \"clippy::as_conversions\",\n+            \"as_conversions\",\n             r#\"#[allow(clippy::$0)] struct Test;\"#,\n             r#\"#[allow(clippy::as_conversions)] struct Test;\"#,\n         );\n     }\n+\n+    #[test]\n+    fn lint_rustdoc_unqualified() {\n+        check_edit(\n+            \"rustdoc::bare_urls\",\n+            r#\"#[allow($0)] struct Test;\"#,\n+            r#\"#[allow(rustdoc::bare_urls)] struct Test;\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn lint_rustdoc_qualified() {\n+        check_edit(\n+            \"bare_urls\",\n+            r#\"#[allow(rustdoc::$0)] struct Test;\"#,\n+            r#\"#[allow(rustdoc::bare_urls)] struct Test;\"#,\n+        );\n+    }\n }\n \n mod repr {"}]}