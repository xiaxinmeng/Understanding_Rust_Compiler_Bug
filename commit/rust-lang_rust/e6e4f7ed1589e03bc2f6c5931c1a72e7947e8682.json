{"sha": "e6e4f7ed1589e03bc2f6c5931c1a72e7947e8682", "node_id": "C_kwDOAAsO6NoAKGU2ZTRmN2VkMTU4OWUwM2JjMmY2YzU5MzFjMWE3MmU3OTQ3ZTg2ODI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-31T00:24:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-31T00:24:39Z"}, "message": "Auto merge of #112070 - lcnr:disjoint-closure-capture-ub, r=oli-obk\n\nchange `BorrowKind::Unique` to be a mutating `PlaceContext`\n\nfixes #112056\n\nI believe that `BorrowKind::Unique` is a footgun in general, so I added a FIXME and opened https://github.com/rust-lang/rust/issues/112072. This is a bit too involved for this PR though.", "tree": {"sha": "8c51f6b9e5491a3124d810e7e0a1128e5e5852d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c51f6b9e5491a3124d810e7e0a1128e5e5852d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6e4f7ed1589e03bc2f6c5931c1a72e7947e8682", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6e4f7ed1589e03bc2f6c5931c1a72e7947e8682", "html_url": "https://github.com/rust-lang/rust/commit/e6e4f7ed1589e03bc2f6c5931c1a72e7947e8682", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6e4f7ed1589e03bc2f6c5931c1a72e7947e8682/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9610dfe5a9a731ced1ea4923ecbd0c57fe367898", "url": "https://api.github.com/repos/rust-lang/rust/commits/9610dfe5a9a731ced1ea4923ecbd0c57fe367898", "html_url": "https://github.com/rust-lang/rust/commit/9610dfe5a9a731ced1ea4923ecbd0c57fe367898"}, {"sha": "25f8f4cf953975dba37051ac1565e4999418c996", "url": "https://api.github.com/repos/rust-lang/rust/commits/25f8f4cf953975dba37051ac1565e4999418c996", "html_url": "https://github.com/rust-lang/rust/commit/25f8f4cf953975dba37051ac1565e4999418c996"}], "stats": {"total": 109, "additions": 90, "deletions": 19}, "files": [{"sha": "b719a610e07c78f41e289dcc1bc435e871ce51c4", "filename": "compiler/rustc_borrowck/src/def_use.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e6e4f7ed1589e03bc2f6c5931c1a72e7947e8682/compiler%2Frustc_borrowck%2Fsrc%2Fdef_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6e4f7ed1589e03bc2f6c5931c1a72e7947e8682/compiler%2Frustc_borrowck%2Fsrc%2Fdef_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdef_use.rs?ref=e6e4f7ed1589e03bc2f6c5931c1a72e7947e8682", "patch": "@@ -50,7 +50,6 @@ pub fn categorize(context: PlaceContext) -> Option<DefUse> {\n         PlaceContext::MutatingUse(MutatingUseContext::Borrow) |\n         PlaceContext::NonMutatingUse(NonMutatingUseContext::SharedBorrow) |\n         PlaceContext::NonMutatingUse(NonMutatingUseContext::ShallowBorrow) |\n-        PlaceContext::NonMutatingUse(NonMutatingUseContext::UniqueBorrow) |\n \n         // `PlaceMention` and `AscribeUserType` both evaluate the place, which must not\n         // contain dangling references."}, {"sha": "3b896f6540c07282e50ab3acd334c4709b962630", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e6e4f7ed1589e03bc2f6c5931c1a72e7947e8682/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6e4f7ed1589e03bc2f6c5931c1a72e7947e8682/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=e6e4f7ed1589e03bc2f6c5931c1a72e7947e8682", "patch": "@@ -766,8 +766,8 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n             PlaceContext::MutatingUse(_) => ty::Invariant,\n             PlaceContext::NonUse(StorageDead | StorageLive | VarDebugInfo) => ty::Invariant,\n             PlaceContext::NonMutatingUse(\n-                Inspect | Copy | Move | PlaceMention | SharedBorrow | ShallowBorrow | UniqueBorrow\n-                | AddressOf | Projection,\n+                Inspect | Copy | Move | PlaceMention | SharedBorrow | ShallowBorrow | AddressOf\n+                | Projection,\n             ) => ty::Covariant,\n             PlaceContext::NonUse(AscribeUserTy(variance)) => variance,\n         }"}, {"sha": "22c1f05974ddde2fa0317b94d23d0c855bdc0e44", "filename": "compiler/rustc_codegen_ssa/src/mir/analyze.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e6e4f7ed1589e03bc2f6c5931c1a72e7947e8682/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6e4f7ed1589e03bc2f6c5931c1a72e7947e8682/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs?ref=e6e4f7ed1589e03bc2f6c5931c1a72e7947e8682", "patch": "@@ -234,7 +234,6 @@ impl<'mir, 'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> Visitor<'tcx>\n             | PlaceContext::NonMutatingUse(\n                 NonMutatingUseContext::Inspect\n                 | NonMutatingUseContext::SharedBorrow\n-                | NonMutatingUseContext::UniqueBorrow\n                 | NonMutatingUseContext::ShallowBorrow\n                 | NonMutatingUseContext::AddressOf\n                 | NonMutatingUseContext::Projection,"}, {"sha": "57d939747aab389195440e33c733cfa9005bac17", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e6e4f7ed1589e03bc2f6c5931c1a72e7947e8682/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6e4f7ed1589e03bc2f6c5931c1a72e7947e8682/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=e6e4f7ed1589e03bc2f6c5931c1a72e7947e8682", "patch": "@@ -412,9 +412,7 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n                         BorrowKind::Shallow => {\n                             PlaceContext::NonMutatingUse(NonMutatingUseContext::ShallowBorrow)\n                         }\n-                        BorrowKind::Unique => {\n-                            PlaceContext::NonMutatingUse(NonMutatingUseContext::UniqueBorrow)\n-                        }\n+                        BorrowKind::Unique => PlaceContext::MutatingUse(MutatingUseContext::Borrow),\n                         BorrowKind::Mut { .. } => {\n                             PlaceContext::MutatingUse(MutatingUseContext::Borrow)\n                         }"}, {"sha": "3e474c1d377e64001146ecd617624b1b672b2347", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e6e4f7ed1589e03bc2f6c5931c1a72e7947e8682/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6e4f7ed1589e03bc2f6c5931c1a72e7947e8682/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=e6e4f7ed1589e03bc2f6c5931c1a72e7947e8682", "patch": "@@ -220,6 +220,11 @@ pub enum BorrowKind {\n     /// immutable, but not aliasable. This solves the problem. For\n     /// simplicity, we don't give users the way to express this\n     /// borrow, it's just used when translating closures.\n+    ///\n+    // FIXME(#112072): This is wrong. Unique borrows are mutable borrows except\n+    // that they do not require their pointee to be marked as a mutable.\n+    // They should still be treated as mutable borrows in every other way,\n+    // e.g. for variance or overlap checking.\n     Unique,\n \n     /// Data is mutable and not aliasable."}, {"sha": "8d44e929afde3a432e8ea8aaf841f418e58fdd6a", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e6e4f7ed1589e03bc2f6c5931c1a72e7947e8682/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6e4f7ed1589e03bc2f6c5931c1a72e7947e8682/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=e6e4f7ed1589e03bc2f6c5931c1a72e7947e8682", "patch": "@@ -650,8 +650,8 @@ macro_rules! make_mir_visitor {\n                             BorrowKind::Shallow => PlaceContext::NonMutatingUse(\n                                 NonMutatingUseContext::ShallowBorrow\n                             ),\n-                            BorrowKind::Unique => PlaceContext::NonMutatingUse(\n-                                NonMutatingUseContext::UniqueBorrow\n+                            BorrowKind::Unique => PlaceContext::MutatingUse(\n+                                MutatingUseContext::Borrow\n                             ),\n                             BorrowKind::Mut { .. } =>\n                                 PlaceContext::MutatingUse(MutatingUseContext::Borrow),\n@@ -1265,8 +1265,6 @@ pub enum NonMutatingUseContext {\n     SharedBorrow,\n     /// Shallow borrow.\n     ShallowBorrow,\n-    /// Unique borrow.\n-    UniqueBorrow,\n     /// AddressOf for *const pointer.\n     AddressOf,\n     /// PlaceMention statement.\n@@ -1345,9 +1343,7 @@ impl PlaceContext {\n         matches!(\n             self,\n             PlaceContext::NonMutatingUse(\n-                NonMutatingUseContext::SharedBorrow\n-                    | NonMutatingUseContext::ShallowBorrow\n-                    | NonMutatingUseContext::UniqueBorrow\n+                NonMutatingUseContext::SharedBorrow | NonMutatingUseContext::ShallowBorrow\n             ) | PlaceContext::MutatingUse(MutatingUseContext::Borrow)\n         )\n     }"}, {"sha": "6ae6bdc17d5012e7773c307eed96975a30a618e8", "filename": "compiler/rustc_mir_dataflow/src/impls/liveness.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e6e4f7ed1589e03bc2f6c5931c1a72e7947e8682/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6e4f7ed1589e03bc2f6c5931c1a72e7947e8682/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs?ref=e6e4f7ed1589e03bc2f6c5931c1a72e7947e8682", "patch": "@@ -199,8 +199,7 @@ impl DefUse {\n                 | NonMutatingUseContext::Move\n                 | NonMutatingUseContext::PlaceMention\n                 | NonMutatingUseContext::ShallowBorrow\n-                | NonMutatingUseContext::SharedBorrow\n-                | NonMutatingUseContext::UniqueBorrow,\n+                | NonMutatingUseContext::SharedBorrow,\n             ) => Some(DefUse::Use),\n \n             PlaceContext::MutatingUse(MutatingUseContext::Projection)"}, {"sha": "1ba1951afdef559713089a83b2400987b56fcb5a", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e6e4f7ed1589e03bc2f6c5931c1a72e7947e8682/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6e4f7ed1589e03bc2f6c5931c1a72e7947e8682/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=e6e4f7ed1589e03bc2f6c5931c1a72e7947e8682", "patch": "@@ -772,7 +772,6 @@ impl<'tcx> Visitor<'tcx> for CanConstProp {\n             // mutation.\n             | NonMutatingUse(NonMutatingUseContext::SharedBorrow)\n             | NonMutatingUse(NonMutatingUseContext::ShallowBorrow)\n-            | NonMutatingUse(NonMutatingUseContext::UniqueBorrow)\n             | NonMutatingUse(NonMutatingUseContext::AddressOf)\n             | MutatingUse(MutatingUseContext::Borrow)\n             | MutatingUse(MutatingUseContext::AddressOf) => {"}, {"sha": "3df459dfa79bd4dcfad618b02d40d288ffcb48b4", "filename": "compiler/rustc_mir_transform/src/copy_prop.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e6e4f7ed1589e03bc2f6c5931c1a72e7947e8682/compiler%2Frustc_mir_transform%2Fsrc%2Fcopy_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6e4f7ed1589e03bc2f6c5931c1a72e7947e8682/compiler%2Frustc_mir_transform%2Fsrc%2Fcopy_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcopy_prop.rs?ref=e6e4f7ed1589e03bc2f6c5931c1a72e7947e8682", "patch": "@@ -130,7 +130,6 @@ impl<'tcx> MutVisitor<'tcx> for Replacer<'_, 'tcx> {\n             PlaceContext::NonMutatingUse(\n                 NonMutatingUseContext::SharedBorrow\n                 | NonMutatingUseContext::ShallowBorrow\n-                | NonMutatingUseContext::UniqueBorrow\n                 | NonMutatingUseContext::AddressOf,\n             ) => true,\n             // For debuginfo, merging locals is ok."}, {"sha": "7a0d3a025f3652c1608d5c997588e25b782ec6fc", "filename": "compiler/rustc_mir_transform/src/ssa.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e6e4f7ed1589e03bc2f6c5931c1a72e7947e8682/compiler%2Frustc_mir_transform%2Fsrc%2Fssa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6e4f7ed1589e03bc2f6c5931c1a72e7947e8682/compiler%2Frustc_mir_transform%2Fsrc%2Fssa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fssa.rs?ref=e6e4f7ed1589e03bc2f6c5931c1a72e7947e8682", "patch": "@@ -216,7 +216,6 @@ impl<'tcx> Visitor<'tcx> for SsaVisitor<'_> {\n             PlaceContext::NonMutatingUse(\n                 NonMutatingUseContext::SharedBorrow\n                 | NonMutatingUseContext::ShallowBorrow\n-                | NonMutatingUseContext::UniqueBorrow\n                 | NonMutatingUseContext::AddressOf,\n             )\n             | PlaceContext::MutatingUse(_) => {"}, {"sha": "f21ef43fb7ccb4c3ae2684d950e5bfa26e1ba9df", "filename": "tests/ui/closures/2229_closure_analysis/unique-borrows-are-invariant-1.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e6e4f7ed1589e03bc2f6c5931c1a72e7947e8682/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Funique-borrows-are-invariant-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6e4f7ed1589e03bc2f6c5931c1a72e7947e8682/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Funique-borrows-are-invariant-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Funique-borrows-are-invariant-1.rs?ref=e6e4f7ed1589e03bc2f6c5931c1a72e7947e8682", "patch": "@@ -0,0 +1,18 @@\n+// edition:2021\n+\n+// regression test for #112056\n+\n+fn extend_lifetime<'a, 'b>(x: &mut (&'a str,), y: &'b str) {\n+    let mut closure = |input| x.0 = input;\n+    //~^ ERROR: lifetime may not live long enough\n+    closure(y);\n+}\n+\n+fn main() {\n+    let mut tuple = (\"static\",);\n+    {\n+        let x = String::from(\"temporary\");\n+        extend_lifetime(&mut tuple, &x);\n+    }\n+    println!(\"{}\", tuple.0);\n+}"}, {"sha": "730823281abc950fcfc9dca20a05cc1692b83b1d", "filename": "tests/ui/closures/2229_closure_analysis/unique-borrows-are-invariant-1.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e6e4f7ed1589e03bc2f6c5931c1a72e7947e8682/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Funique-borrows-are-invariant-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e6e4f7ed1589e03bc2f6c5931c1a72e7947e8682/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Funique-borrows-are-invariant-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Funique-borrows-are-invariant-1.stderr?ref=e6e4f7ed1589e03bc2f6c5931c1a72e7947e8682", "patch": "@@ -0,0 +1,14 @@\n+error: lifetime may not live long enough\n+  --> $DIR/unique-borrows-are-invariant-1.rs:6:31\n+   |\n+LL | fn extend_lifetime<'a, 'b>(x: &mut (&'a str,), y: &'b str) {\n+   |                    --  -- lifetime `'b` defined here\n+   |                    |\n+   |                    lifetime `'a` defined here\n+LL |     let mut closure = |input| x.0 = input;\n+   |                               ^^^^^^^^^^^ assignment requires that `'b` must outlive `'a`\n+   |\n+   = help: consider adding the following bound: `'b: 'a`\n+\n+error: aborting due to previous error\n+"}, {"sha": "dd9d986c2089b28b688c187447ab40751269744a", "filename": "tests/ui/closures/2229_closure_analysis/unique-borrows-are-invariant-2.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e6e4f7ed1589e03bc2f6c5931c1a72e7947e8682/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Funique-borrows-are-invariant-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6e4f7ed1589e03bc2f6c5931c1a72e7947e8682/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Funique-borrows-are-invariant-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Funique-borrows-are-invariant-2.rs?ref=e6e4f7ed1589e03bc2f6c5931c1a72e7947e8682", "patch": "@@ -0,0 +1,31 @@\n+// edition:2021\n+\n+// regression test for #112056\n+\n+struct Spooky<'b> {\n+    owned: Option<&'static u32>,\n+    borrowed: &'b &'static u32,\n+}\n+\n+impl<'b> Spooky<'b> {\n+    fn create_self_reference<'a>(&'a mut self) {\n+        let mut closure = || {\n+            if let Some(owned) = &self.owned {\n+                let borrow: &'a &'static u32 = owned;\n+                self.borrowed = borrow;\n+                //~^ ERROR: lifetime may not live long enough\n+            }\n+        };\n+        closure();\n+    }\n+}\n+\n+fn main() {\n+    let mut spooky: Spooky<'static> = Spooky {\n+        owned: Some(&1),\n+        borrowed: &&1,\n+    };\n+    spooky.create_self_reference();\n+    spooky.owned = None;\n+    println!(\"{}\", **spooky.borrowed);\n+}"}, {"sha": "66ba0fe3547a684dafe726ef838de9217a49d945", "filename": "tests/ui/closures/2229_closure_analysis/unique-borrows-are-invariant-2.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e6e4f7ed1589e03bc2f6c5931c1a72e7947e8682/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Funique-borrows-are-invariant-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e6e4f7ed1589e03bc2f6c5931c1a72e7947e8682/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Funique-borrows-are-invariant-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Funique-borrows-are-invariant-2.stderr?ref=e6e4f7ed1589e03bc2f6c5931c1a72e7947e8682", "patch": "@@ -0,0 +1,15 @@\n+error: lifetime may not live long enough\n+  --> $DIR/unique-borrows-are-invariant-2.rs:15:17\n+   |\n+LL | impl<'b> Spooky<'b> {\n+   |      -- lifetime `'b` defined here\n+LL |     fn create_self_reference<'a>(&'a mut self) {\n+   |                              -- lifetime `'a` defined here\n+...\n+LL |                 self.borrowed = borrow;\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^ assignment requires that `'a` must outlive `'b`\n+   |\n+   = help: consider adding the following bound: `'a: 'b`\n+\n+error: aborting due to previous error\n+"}]}