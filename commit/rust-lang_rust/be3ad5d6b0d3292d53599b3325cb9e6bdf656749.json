{"sha": "be3ad5d6b0d3292d53599b3325cb9e6bdf656749", "node_id": "C_kwDOAAsO6NoAKGJlM2FkNWQ2YjBkMzI5MmQ1MzU5OWIzMzI1Y2I5ZTZiZGY2NTY3NDk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-06T12:27:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-06T12:27:41Z"}, "message": "Rollup merge of #105005 - estebank:where-clause-lts, r=compiler-errors\n\nOn E0195 point at where clause lifetime bounds\n\nFix #104733", "tree": {"sha": "0a77b4035b5f36e7e919bd1d3021460aedde63ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a77b4035b5f36e7e919bd1d3021460aedde63ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be3ad5d6b0d3292d53599b3325cb9e6bdf656749", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjjzU9CRBK7hj4Ov3rIwAAt2IIAIhk9wnUZrxjO93X2o2nQb+a\n3DgmIBxHTZr0AyEtM9BpFFtcB19D2159uTaABcPm3rZLYaMM5QhUOjuMBxbgA8fo\nnRsqpPzxAjC6PGX9KeNS9RokaXF/1F/4KMUuOxHCskR4y7wNyAxTH2OAFHXekL69\nMyEYNhAOP4Xv0hHpi8yTtl+OjKI77+I1TI/zq2veTBO7/WikRPPqEjL43tjGtA1P\nDM9BHCkvA0JexPSPPANjjy5tFMPBfN/xgBPs/TLZ5Jcs9iawL8i9bBpZ8ZM02Z/7\nb77j6CBmgn2BSpaW+usbGVF+0HiZIQEySydUY/uDYua9bxHR5us9ig+QYafQz04=\n=HDTd\n-----END PGP SIGNATURE-----\n", "payload": "tree 0a77b4035b5f36e7e919bd1d3021460aedde63ae\nparent e5a01b97ee9a3dc45d7f5055c8b0f4482b2ebad7\nparent 9ffd0868653ad5113962c6f2a42d5061afbcf493\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1670329661 +0100\ncommitter GitHub <noreply@github.com> 1670329661 +0100\n\nRollup merge of #105005 - estebank:where-clause-lts, r=compiler-errors\n\nOn E0195 point at where clause lifetime bounds\n\nFix #104733\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be3ad5d6b0d3292d53599b3325cb9e6bdf656749", "html_url": "https://github.com/rust-lang/rust/commit/be3ad5d6b0d3292d53599b3325cb9e6bdf656749", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be3ad5d6b0d3292d53599b3325cb9e6bdf656749/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5a01b97ee9a3dc45d7f5055c8b0f4482b2ebad7", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5a01b97ee9a3dc45d7f5055c8b0f4482b2ebad7", "html_url": "https://github.com/rust-lang/rust/commit/e5a01b97ee9a3dc45d7f5055c8b0f4482b2ebad7"}, {"sha": "9ffd0868653ad5113962c6f2a42d5061afbcf493", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ffd0868653ad5113962c6f2a42d5061afbcf493", "html_url": "https://github.com/rust-lang/rust/commit/9ffd0868653ad5113962c6f2a42d5061afbcf493"}], "stats": {"total": 131, "additions": 120, "deletions": 11}, "files": [{"sha": "a5cb8a88819df2d09a4ecd141748f5c5000de062", "filename": "compiler/rustc_error_messages/locales/en-US/hir_analysis.ftl", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be3ad5d6b0d3292d53599b3325cb9e6bdf656749/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/be3ad5d6b0d3292d53599b3325cb9e6bdf656749/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl?ref=be3ad5d6b0d3292d53599b3325cb9e6bdf656749", "patch": "@@ -17,6 +17,8 @@ hir_analysis_lifetimes_or_bounds_mismatch_on_trait =\n     lifetime parameters or bounds on {$item_kind} `{$ident}` do not match the trait declaration\n     .label = lifetimes do not match {$item_kind} in trait\n     .generics_label = lifetimes in impl do not match this {$item_kind} in trait\n+    .where_label = this `where` clause might not match the one in the trait\n+    .bounds_label = this bound might be missing in the impl\n \n hir_analysis_drop_impl_on_wrong_item =\n     the `Drop` trait may only be implemented for local structs, enums, and unions"}, {"sha": "1d6f9b29176518a30f487dca7eab58e0610b3ccf", "filename": "compiler/rustc_hir_analysis/src/check/compare_method.rs", "status": "modified", "additions": 40, "deletions": 11, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/be3ad5d6b0d3292d53599b3325cb9e6bdf656749/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be3ad5d6b0d3292d53599b3325cb9e6bdf656749/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=be3ad5d6b0d3292d53599b3325cb9e6bdf656749", "patch": "@@ -751,27 +751,56 @@ fn check_region_bounds_on_impl_item<'tcx>(\n             .get_generics(impl_m.def_id.expect_local())\n             .expect(\"expected impl item to have generics or else we can't compare them\")\n             .span;\n-        let generics_span = if let Some(local_def_id) = trait_m.def_id.as_local() {\n-            Some(\n-                tcx.hir()\n-                    .get_generics(local_def_id)\n-                    .expect(\"expected trait item to have generics or else we can't compare them\")\n-                    .span,\n-            )\n-        } else {\n-            None\n-        };\n \n+        let mut generics_span = None;\n+        let mut bounds_span = vec![];\n+        let mut where_span = None;\n+        if let Some(trait_node) = tcx.hir().get_if_local(trait_m.def_id)\n+            && let Some(trait_generics) = trait_node.generics()\n+        {\n+            generics_span = Some(trait_generics.span);\n+            // FIXME: we could potentially look at the impl's bounds to not point at bounds that\n+            // *are* present in the impl.\n+            for p in trait_generics.predicates {\n+                if let hir::WherePredicate::BoundPredicate(pred) = p {\n+                    for b in pred.bounds {\n+                        if let hir::GenericBound::Outlives(lt) = b {\n+                            bounds_span.push(lt.ident.span);\n+                        }\n+                    }\n+                }\n+            }\n+            if let Some(impl_node) = tcx.hir().get_if_local(impl_m.def_id)\n+                && let Some(impl_generics) = impl_node.generics()\n+            {\n+                let mut impl_bounds = 0;\n+                for p in impl_generics.predicates {\n+                    if let hir::WherePredicate::BoundPredicate(pred) = p {\n+                        for b in pred.bounds {\n+                            if let hir::GenericBound::Outlives(_) = b {\n+                                impl_bounds += 1;\n+                            }\n+                        }\n+                    }\n+                }\n+                if impl_bounds == bounds_span.len() {\n+                    bounds_span = vec![];\n+                } else if impl_generics.has_where_clause_predicates {\n+                    where_span = Some(impl_generics.where_clause_span);\n+                }\n+            }\n+        }\n         let reported = tcx\n             .sess\n             .create_err(LifetimesOrBoundsMismatchOnTrait {\n                 span,\n                 item_kind: assoc_item_kind_str(impl_m),\n                 ident: impl_m.ident(tcx),\n                 generics_span,\n+                bounds_span,\n+                where_span,\n             })\n             .emit_unless(delay);\n-\n         return Err(reported);\n     }\n "}, {"sha": "5156d432b5b3720cbdfc7acdd57fcfbbc0ca2007", "filename": "compiler/rustc_hir_analysis/src/errors.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be3ad5d6b0d3292d53599b3325cb9e6bdf656749/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be3ad5d6b0d3292d53599b3325cb9e6bdf656749/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs?ref=be3ad5d6b0d3292d53599b3325cb9e6bdf656749", "patch": "@@ -43,6 +43,10 @@ pub struct LifetimesOrBoundsMismatchOnTrait {\n     pub span: Span,\n     #[label(generics_label)]\n     pub generics_span: Option<Span>,\n+    #[label(where_label)]\n+    pub where_span: Option<Span>,\n+    #[label(bounds_label)]\n+    pub bounds_span: Vec<Span>,\n     pub item_kind: &'static str,\n     pub ident: Ident,\n }"}, {"sha": "dcdbd02287371ba6bff58500c7f4cf4a5fbb6986", "filename": "src/test/ui/trait-bounds/impl-missing-where-clause-lifetimes-from-trait.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/be3ad5d6b0d3292d53599b3325cb9e6bdf656749/src%2Ftest%2Fui%2Ftrait-bounds%2Fimpl-missing-where-clause-lifetimes-from-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be3ad5d6b0d3292d53599b3325cb9e6bdf656749/src%2Ftest%2Fui%2Ftrait-bounds%2Fimpl-missing-where-clause-lifetimes-from-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrait-bounds%2Fimpl-missing-where-clause-lifetimes-from-trait.rs?ref=be3ad5d6b0d3292d53599b3325cb9e6bdf656749", "patch": "@@ -0,0 +1,38 @@\n+trait Trait<T> {\n+    fn foo<'a, K>(self, _: T, _: K) where T: 'a, K: 'a;\n+}\n+\n+impl Trait<()> for () {\n+    fn foo<'a, K>(self, _: (), _: K) where { //~ ERROR E0195\n+        todo!();\n+    }\n+}\n+\n+struct State;\n+\n+trait Foo<T> {\n+    fn foo<'a>(&self, state: &'a State) -> &'a T\n+    where\n+        T: 'a;\n+}\n+\n+impl<F, T> Foo<T> for F\n+where\n+    F: Fn(&State) -> &T,\n+{\n+    fn foo<'a>(&self, state: &'a State) -> &'a T { //~ ERROR E0195\n+        self(state)\n+    }\n+}\n+\n+trait Bar {\n+    fn foo<'a>(&'a self) {}\n+}\n+\n+impl Bar for () {\n+    fn foo<'a: 'a>(&'a self) {} //~ ERROR E0195\n+}\n+\n+fn main() {\n+    ().foo((), ());\n+}"}, {"sha": "e26cb22163f1e78e61936d5ceee56af440f41bb2", "filename": "src/test/ui/trait-bounds/impl-missing-where-clause-lifetimes-from-trait.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/be3ad5d6b0d3292d53599b3325cb9e6bdf656749/src%2Ftest%2Fui%2Ftrait-bounds%2Fimpl-missing-where-clause-lifetimes-from-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be3ad5d6b0d3292d53599b3325cb9e6bdf656749/src%2Ftest%2Fui%2Ftrait-bounds%2Fimpl-missing-where-clause-lifetimes-from-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrait-bounds%2Fimpl-missing-where-clause-lifetimes-from-trait.stderr?ref=be3ad5d6b0d3292d53599b3325cb9e6bdf656749", "patch": "@@ -0,0 +1,36 @@\n+error[E0195]: lifetime parameters or bounds on method `foo` do not match the trait declaration\n+  --> $DIR/impl-missing-where-clause-lifetimes-from-trait.rs:6:11\n+   |\n+LL |     fn foo<'a, K>(self, _: T, _: K) where T: 'a, K: 'a;\n+   |           -------                            --     -- this bound might be missing in the impl\n+   |           |                                  |\n+   |           |                                  this bound might be missing in the impl\n+   |           lifetimes in impl do not match this method in trait\n+...\n+LL |     fn foo<'a, K>(self, _: (), _: K) where {\n+   |           ^^^^^^^ lifetimes do not match method in trait\n+\n+error[E0195]: lifetime parameters or bounds on method `foo` do not match the trait declaration\n+  --> $DIR/impl-missing-where-clause-lifetimes-from-trait.rs:23:11\n+   |\n+LL |     fn foo<'a>(&self, state: &'a State) -> &'a T\n+   |           ---- lifetimes in impl do not match this method in trait\n+LL |     where\n+LL |         T: 'a;\n+   |            -- this bound might be missing in the impl\n+...\n+LL |     fn foo<'a>(&self, state: &'a State) -> &'a T {\n+   |           ^^^^ lifetimes do not match method in trait\n+\n+error[E0195]: lifetime parameters or bounds on method `foo` do not match the trait declaration\n+  --> $DIR/impl-missing-where-clause-lifetimes-from-trait.rs:33:11\n+   |\n+LL |     fn foo<'a>(&'a self) {}\n+   |           ---- lifetimes in impl do not match this method in trait\n+...\n+LL |     fn foo<'a: 'a>(&'a self) {}\n+   |           ^^^^^^^^ lifetimes do not match method in trait\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0195`."}]}