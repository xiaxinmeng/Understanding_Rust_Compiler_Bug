{"sha": "54a49769fa106b0732dcc15f68e59f4a07ffa909", "node_id": "C_kwDOAAsO6NoAKDU0YTQ5NzY5ZmExMDZiMDczMmRjYzE1ZjY4ZTU5ZjRhMDdmZmE5MDk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-05-16T18:12:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-16T18:12:18Z"}, "message": "Rollup merge of #111642 - GuillaumeGomez:only-impl-from-bodies, r=notriddle\n\n[rustdoc] Only keep impl blocks from bodies\n\nFixes https://github.com/rust-lang/rust/issues/111415.\n\nThe problem was that we kept everything inside bodies whereas only impl blocks are actually accessible from outside bodies.\n\nr? `@notriddle`", "tree": {"sha": "d81d0b9f8453087104e288cfc4872b4ef9a8a665", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d81d0b9f8453087104e288cfc4872b4ef9a8a665"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54a49769fa106b0732dcc15f68e59f4a07ffa909", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkY8eCCRBK7hj4Ov3rIwAAJdMIAIgpkqaZvNpgGmJqLsviGoXd\nvYuvvzgt4QXZVSHH8TT+xIIhzul0P2mD3ooZfvvcVBhhvw33B1f60gTBSEGj2+WK\noBKXzPvm+gSoBNFSeDuH3F8F9p2Hvlerpw80259ZP9qw67YuTiu3RLEkr8VNdHq0\nRc5URp8FkCag95vaE+WqA/Ju0MfKAz+ySio7t4yJ5+HISsIR2DVKgaOD+mQhgntg\nkynYn4POHx01XVvgN7/jxhxjDu1Uf60qyfhAcCwfbw903YLxjLJC9cmAfP7TeyLK\nWKcCgri+lP2PXZxDdvj1DpkIlyu3Nb0dm0xM7R1gKOA/pCFjgbvLVNB4+PghPPE=\n=nH6P\n-----END PGP SIGNATURE-----\n", "payload": "tree d81d0b9f8453087104e288cfc4872b4ef9a8a665\nparent d2e52ea127fea8d3c8eef3815cb52935f85605a3\nparent 0f1d4b5d4d46687130cbd2766ab1d761bdac90c4\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1684260738 +0200\ncommitter GitHub <noreply@github.com> 1684260738 +0200\n\nRollup merge of #111642 - GuillaumeGomez:only-impl-from-bodies, r=notriddle\n\n[rustdoc] Only keep impl blocks from bodies\n\nFixes https://github.com/rust-lang/rust/issues/111415.\n\nThe problem was that we kept everything inside bodies whereas only impl blocks are actually accessible from outside bodies.\n\nr? `@notriddle`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54a49769fa106b0732dcc15f68e59f4a07ffa909", "html_url": "https://github.com/rust-lang/rust/commit/54a49769fa106b0732dcc15f68e59f4a07ffa909", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54a49769fa106b0732dcc15f68e59f4a07ffa909/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2e52ea127fea8d3c8eef3815cb52935f85605a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2e52ea127fea8d3c8eef3815cb52935f85605a3", "html_url": "https://github.com/rust-lang/rust/commit/d2e52ea127fea8d3c8eef3815cb52935f85605a3"}, {"sha": "0f1d4b5d4d46687130cbd2766ab1d761bdac90c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f1d4b5d4d46687130cbd2766ab1d761bdac90c4", "html_url": "https://github.com/rust-lang/rust/commit/0f1d4b5d4d46687130cbd2766ab1d761bdac90c4"}], "stats": {"total": 66, "additions": 65, "deletions": 1}, "files": [{"sha": "8f8dc6b709053a24eb9d670d7cffa10ccb3f757f", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/54a49769fa106b0732dcc15f68e59f4a07ffa909/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54a49769fa106b0732dcc15f68e59f4a07ffa909/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=54a49769fa106b0732dcc15f68e59f4a07ffa909", "patch": "@@ -5,7 +5,7 @@ use rustc_data_structures::fx::{FxHashSet, FxIndexMap};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefId, DefIdMap, LocalDefId, LocalDefIdSet};\n-use rustc_hir::intravisit::{walk_item, Visitor};\n+use rustc_hir::intravisit::{walk_body, walk_item, Visitor};\n use rustc_hir::{Node, CRATE_HIR_ID};\n use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::TyCtxt;\n@@ -106,6 +106,7 @@ pub(crate) struct RustdocVisitor<'a, 'tcx> {\n     exact_paths: DefIdMap<Vec<Symbol>>,\n     modules: Vec<Module<'tcx>>,\n     is_importable_from_parent: bool,\n+    inside_body: bool,\n }\n \n impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n@@ -129,6 +130,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             exact_paths: Default::default(),\n             modules: vec![om],\n             is_importable_from_parent: true,\n+            inside_body: false,\n         }\n     }\n \n@@ -368,6 +370,26 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         import_id: Option<LocalDefId>,\n     ) {\n         debug!(\"visiting item {:?}\", item);\n+        if self.inside_body {\n+            // Only impls can be \"seen\" outside a body. For example:\n+            //\n+            // ```\n+            // struct Bar;\n+            //\n+            // fn foo() {\n+            //     impl Bar { fn bar() {} }\n+            // }\n+            // Bar::bar();\n+            // ```\n+            if let hir::ItemKind::Impl(impl_) = item.kind &&\n+                // Don't duplicate impls when inlining or if it's implementing a trait, we'll pick\n+                // them up regardless of where they're located.\n+                impl_.of_trait.is_none()\n+            {\n+                self.add_to_current_mod(item, None, None);\n+            }\n+            return;\n+        }\n         let name = renamed.unwrap_or(item.ident.name);\n         let tcx = self.cx.tcx;\n \n@@ -564,4 +586,10 @@ impl<'a, 'tcx> Visitor<'tcx> for RustdocVisitor<'a, 'tcx> {\n     fn visit_lifetime(&mut self, _: &hir::Lifetime) {\n         // Unneeded.\n     }\n+\n+    fn visit_body(&mut self, b: &'tcx hir::Body<'tcx>) {\n+        let prev = mem::replace(&mut self.inside_body, true);\n+        walk_body(self, b);\n+        self.inside_body = prev;\n+    }\n }"}, {"sha": "9b7688c332c44e05691f6d38cff157e1635bff70", "filename": "tests/rustdoc/nested-items-issue-111415.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/54a49769fa106b0732dcc15f68e59f4a07ffa909/tests%2Frustdoc%2Fnested-items-issue-111415.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54a49769fa106b0732dcc15f68e59f4a07ffa909/tests%2Frustdoc%2Fnested-items-issue-111415.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fnested-items-issue-111415.rs?ref=54a49769fa106b0732dcc15f68e59f4a07ffa909", "patch": "@@ -0,0 +1,36 @@\n+// Regression test for <https://github.com/rust-lang/rust/issues/111415>.\n+// This test ensures that only impl blocks are documented in bodies.\n+\n+#![crate_name = \"foo\"]\n+\n+// @has 'foo/index.html'\n+// Checking there are only three sections.\n+// @count - '//*[@id=\"main-content\"]/*[@class=\"small-section-header\"]' 3\n+// @has - '//*[@id=\"main-content\"]/*[@class=\"small-section-header\"]' 'Structs'\n+// @has - '//*[@id=\"main-content\"]/*[@class=\"small-section-header\"]' 'Functions'\n+// @has - '//*[@id=\"main-content\"]/*[@class=\"small-section-header\"]' 'Traits'\n+// Checking that there are only three items.\n+// @count - '//*[@id=\"main-content\"]//*[@class=\"item-name\"]' 3\n+// @has - '//*[@id=\"main-content\"]//a[@href=\"struct.Bar.html\"]' 'Bar'\n+// @has - '//*[@id=\"main-content\"]//a[@href=\"fn.foo.html\"]' 'foo'\n+// @has - '//*[@id=\"main-content\"]//a[@href=\"trait.Foo.html\"]' 'Foo'\n+\n+// Now checking that the `foo` method is visible in `Bar` page.\n+// @has 'foo/struct.Bar.html'\n+// @has - '//*[@id=\"method.foo\"]/*[@class=\"code-header\"]' 'pub fn foo()'\n+// @has - '//*[@id=\"method.bar\"]/*[@class=\"code-header\"]' 'fn bar()'\n+pub struct Bar;\n+\n+pub trait Foo {\n+    fn bar() {}\n+}\n+\n+pub fn foo() {\n+    pub mod inaccessible {}\n+    pub fn inner() {}\n+    pub const BAR: u32 = 0;\n+    impl Bar {\n+        pub fn foo() {}\n+    }\n+    impl Foo for Bar {}\n+}"}]}