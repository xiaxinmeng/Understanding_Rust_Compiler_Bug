{"sha": "1d4c3146f5e35ce60db73849da8806d73c6ecee2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkNGMzMTQ2ZjVlMzVjZTYwZGI3Mzg0OWRhODgwNmQ3M2M2ZWNlZTI=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2013-07-11T07:56:26Z"}, "committer": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2013-07-14T22:01:50Z"}, "message": "Don't re-parse terminfo (twice!) on every compiler diagnostic\n\nStuff the term::Terminal into TLS to avoid re-parsing for every single\nmessage we want to color.\n\nFixes #6827.", "tree": {"sha": "ce10236b81d0859222b0fa9125ef6f3753e3d496", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce10236b81d0859222b0fa9125ef6f3753e3d496"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d4c3146f5e35ce60db73849da8806d73c6ecee2", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d4c3146f5e35ce60db73849da8806d73c6ecee2", "html_url": "https://github.com/rust-lang/rust/commit/1d4c3146f5e35ce60db73849da8806d73c6ecee2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d4c3146f5e35ce60db73849da8806d73c6ecee2/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69da3808444d71a39d3c05519a45d5186537cfcb", "url": "https://api.github.com/repos/rust-lang/rust/commits/69da3808444d71a39d3c05519a45d5186537cfcb", "html_url": "https://github.com/rust-lang/rust/commit/69da3808444d71a39d3c05519a45d5186537cfcb"}], "stats": {"total": 21, "additions": 19, "deletions": 2}, "files": [{"sha": "2971ad5cc29422f73e29ebde451561804b168b59", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1d4c3146f5e35ce60db73849da8806d73c6ecee2/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d4c3146f5e35ce60db73849da8806d73c6ecee2/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=1d4c3146f5e35ce60db73849da8806d73c6ecee2", "patch": "@@ -13,6 +13,7 @@ use codemap;\n \n use std::io;\n use std::uint;\n+use std::local_data;\n use extra::term;\n \n pub type Emitter = @fn(cmsp: Option<(@codemap::CodeMap, span)>,\n@@ -187,13 +188,29 @@ fn diagnosticcolor(lvl: level) -> term::color::Color {\n }\n \n fn print_maybe_styled(msg: &str, color: term::attr::Attr) {\n+    #[cfg(not(stage0))]\n+    static tls_terminal: local_data::Key<@Option<term::Terminal>> = &local_data::Key;\n+    #[cfg(stage0)]\n+    fn tls_terminal(_: @Option<term::Terminal>) {}\n+\n     let stderr = io::stderr();\n \n     if stderr.get_type() == io::Screen {\n-        let t = term::Terminal::new(stderr);\n+        let t = match local_data::get(tls_terminal, |v| v.map_consume(|&k|k)) {\n+            None => {\n+                let t = term::Terminal::new(stderr);\n+                let tls = @match t {\n+                    Ok(t) => Some(t),\n+                    Err(_) => None\n+                };\n+                local_data::set(tls_terminal, tls);\n+                &*tls\n+            }\n+            Some(tls) => &*tls\n+        };\n \n         match t {\n-            Ok(term) => {\n+            &Some(ref term) => {\n                 term.attr(color);\n                 stderr.write_str(msg);\n                 term.reset();"}]}