{"sha": "00c95b29bce5a6aa0acb10f78418760d5249394a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwYzk1YjI5YmNlNWE2YWEwYWNiMTBmNzg0MTg3NjBkNTI0OTM5NGE=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-01-29T07:50:47Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-03-08T07:34:13Z"}, "message": "Revert all changes to the instcombine pass", "tree": {"sha": "52016d6871f6aa5871da999441032c5d8d1ad561", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52016d6871f6aa5871da999441032c5d8d1ad561"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00c95b29bce5a6aa0acb10f78418760d5249394a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlqg53UACgkQpp+NIls6\n19lpqA//W+xfg01Sly58lUG8JXGGU3j/gq0ecKhRQRMmvb6MhrgQ7XX0ClGG1Q9J\nO9OoeBjKXyAh/TZ8rAMzyi+a8Cc5HiEL73Q4EZib0CbjHYuOt+Ew+yXrzbQu5pgv\nhqqSymdjZGjSSfTr8goGGFAMLoS2oABFBPCbPNIo9PKnBYCiB7QZxSuqtGibLcfm\nxg9jWmRwgLRE0iahMUOXQSzxq4w5YOvyii9DsQV4SGtT5eLKvy5Vj/umfNbNB+Oa\n2XzogThu77b4KQrTJUDrjYjrASnGomNE09CNypaASN7mJwanRZXQjukwbI0pieoo\nfvR12GodRqqcF1EIV4H5a/FjnGEEI8YNv/aUDieR54imWBV6TOnQTz+G9w2etrbf\nSRa8+JJgyVK0QddSmb3NZXFxV40dYF91i0KdgnXdsNj12EbZ55C/h69oZKd537Ti\nD/4MaLrJBtZ3OMYllPuKeW/Gk0rsayRLCbYPT0I0W1ARfFXcnOOhYMzy/XQBFPaC\nn4as9zwx31nOs2jyXNMUrjaMAyPH6HfaJAyCaO1ad1eTbzsTAP3ern1Hf+TPmLKo\npcFlcqhOXVhUG7bLX3pQRAn8vssCAiMGgIX9t24MsWSejIJZFfkce5UUkqrv2RFu\n4kpCiPO0veV2OYT4eMdWg5MuOzRffe/qGUT74ENsJ3EN41Ywaus=\n=wBKV\n-----END PGP SIGNATURE-----", "payload": "tree 52016d6871f6aa5871da999441032c5d8d1ad561\nparent 54615ec9894f4f101bb15d70b6dc9b0c61f1249c\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1517212247 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1520494453 +0100\n\nRevert all changes to the instcombine pass\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00c95b29bce5a6aa0acb10f78418760d5249394a", "html_url": "https://github.com/rust-lang/rust/commit/00c95b29bce5a6aa0acb10f78418760d5249394a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00c95b29bce5a6aa0acb10f78418760d5249394a/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54615ec9894f4f101bb15d70b6dc9b0c61f1249c", "url": "https://api.github.com/repos/rust-lang/rust/commits/54615ec9894f4f101bb15d70b6dc9b0c61f1249c", "html_url": "https://github.com/rust-lang/rust/commit/54615ec9894f4f101bb15d70b6dc9b0c61f1249c"}], "stats": {"total": 100, "additions": 77, "deletions": 23}, "files": [{"sha": "dcb70a8f86a8a38084223b4fbb6fa20461bb0299", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00c95b29bce5a6aa0acb10f78418760d5249394a/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00c95b29bce5a6aa0acb10f78418760d5249394a/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=00c95b29bce5a6aa0acb10f78418760d5249394a", "patch": "@@ -184,7 +184,7 @@ impl<'a, 'gcx, 'lcx, 'tcx> ty::TyS<'tcx> {\n             ty::TyArray(_, n) => {\n                 match n.val.to_raw_bits() {\n                     Some(n) => format!(\"array of {} elements\", n),\n-                    _ => \"array\".to_string(),\n+                    None => \"array\".to_string(),\n                 }\n             }\n             ty::TySlice(_) => \"slice\".to_string(),"}, {"sha": "8cbb2afae397abcfdd22b477532561ace6c2f62d", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 69, "deletions": 14, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/00c95b29bce5a6aa0acb10f78418760d5249394a/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00c95b29bce5a6aa0acb10f78418760d5249394a/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=00c95b29bce5a6aa0acb10f78418760d5249394a", "patch": "@@ -44,8 +44,11 @@ impl MirPass for ConstProp {\n             optimization_finder.optimizations\n         };\n \n-        // Then carry out those optimizations.\n-        MutVisitor::visit_mir(&mut ConstPropVisitor { optimizations, tcx }, mir);\n+        // We only actually run when optimizing MIR (at any level).\n+        if tcx.sess.opts.debugging_opts.mir_opt_level != 0 {\n+            // Then carry out those optimizations.\n+            MutVisitor::visit_mir(&mut ConstPropVisitor { optimizations, tcx }, mir);\n+        }\n         trace!(\"ConstProp done for {:?}\", source.def_id);\n     }\n }\n@@ -236,16 +239,6 @@ impl<'b, 'a, 'tcx:'b> OptimizationFinder<'b, 'a, 'tcx> {\n         }\n     }\n \n-    fn simplify_operand(&mut self, op: &Operand<'tcx>) -> Option<Const<'tcx>> {\n-        match *op {\n-            Operand::Constant(ref c) => match c.literal {\n-                Literal::Value { .. } => None,\n-                _ => self.eval_operand(op),\n-            },\n-            _ => self.eval_operand(op),\n-        }\n-    }\n-\n     fn const_prop(\n         &mut self,\n         rvalue: &Rvalue<'tcx>,\n@@ -487,14 +480,76 @@ impl<'b, 'a, 'tcx> Visitor<'tcx> for OptimizationFinder<'b, 'a, 'tcx> {\n         &mut self,\n         block: BasicBlock,\n         kind: &TerminatorKind<'tcx>,\n-        _location: Location,\n+        location: Location,\n     ) {\n         match kind {\n             TerminatorKind::SwitchInt { discr: value, .. } |\n             TerminatorKind::Yield { value, .. } |\n             TerminatorKind::Assert { cond: value, .. } => {\n-                if let Some(value) = self.simplify_operand(value) {\n+                match value {\n+                    Operand::Constant(box Constant {\n+                        literal: Literal::Value {\n+                            value: &ty::Const {\n+                                val: ConstVal::Value(_),\n+                                ..\n+                            },\n+                        },\n+                        ..\n+                    }) => return,\n+                    _ => {},\n+                }\n+                if let Some(value) = self.eval_operand(value) {\n                     self.optimizations.terminators.insert(block, value);\n+                    if let TerminatorKind::Assert { expected, msg, .. } = kind {\n+                        if Value::ByVal(PrimVal::from_bool(*expected)) != value.0 {\n+                            let span = self.mir[block]\n+                                .statements[location.statement_index]\n+                                .source_info\n+                                .span;\n+                            let node_id = self\n+                                .tcx\n+                                .hir\n+                                .as_local_node_id(self.source.def_id)\n+                                .expect(\"some part of a failing const eval must be local\");\n+                            let mut lint = self.tcx.struct_span_lint_node(\n+                                ::rustc::lint::builtin::CONST_ERR,\n+                                node_id,\n+                                span,\n+                                \"constant evaluation error\",\n+                            );\n+                            use rustc::mir::AssertMessage::*;\n+                            match msg {\n+                                GeneratorResumedAfterReturn =>\n+                                    lint.span_label(span, \"generator resumed after completion\"),\n+                                GeneratorResumedAfterPanic =>\n+                                    lint.span_label(span, \"generator resumed after panicking\"),\n+                                Math(ref err) => lint.span_label(span, err.description()),\n+                                BoundsCheck { ref len, ref index } => {\n+                                    let len = self.eval_operand(len).expect(\"len must be const\");\n+                                    let len = match len.0 {\n+                                        Value::ByVal(PrimVal::Bytes(n)) => n,\n+                                        _ => bug!(\"const len not primitive: {:?}\", len),\n+                                    };\n+                                    let index = self\n+                                        .eval_operand(index)\n+                                        .expect(\"index must be const\");\n+                                    let index = match index.0 {\n+                                        Value::ByVal(PrimVal::Bytes(n)) => n,\n+                                        _ => bug!(\"const index not primitive: {:?}\", index),\n+                                    };\n+                                    lint.span_label(\n+                                        span,\n+                                        format!(\n+                                            \"index out of bounds: \\\n+                                            the len is {} but the index is {}\",\n+                                            len,\n+                                            index,\n+                                        ),\n+                                    )\n+                                },\n+                            }.emit();\n+                        }\n+                    }\n                 }\n             }\n             // FIXME: do this optimization for function calls"}, {"sha": "8856d263864cd19380ea19cdeef0e2a189d8e7c1", "filename": "src/librustc_mir/transform/instcombine.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/00c95b29bce5a6aa0acb10f78418760d5249394a/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00c95b29bce5a6aa0acb10f78418760d5249394a/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs?ref=00c95b29bce5a6aa0acb10f78418760d5249394a", "patch": "@@ -23,9 +23,12 @@ pub struct InstCombine;\n impl MirPass for InstCombine {\n     fn run_pass<'a, 'tcx>(&self,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          source: MirSource,\n+                          _: MirSource,\n                           mir: &mut Mir<'tcx>) {\n-        trace!(\"InstCombine starting for {:?}\", source.def_id);\n+        // We only run when optimizing MIR (at any level).\n+        if tcx.sess.opts.debugging_opts.mir_opt_level == 0 {\n+            return\n+        }\n \n         // First, find optimization opportunities. This is done in a pre-pass to keep the MIR\n         // read-only so that we can do global analyses on the MIR in the process (e.g.\n@@ -38,7 +41,6 @@ impl MirPass for InstCombine {\n \n         // Then carry out those optimizations.\n         MutVisitor::visit_mir(&mut InstCombineVisitor { optimizations }, mir);\n-        trace!(\"InstCombine done for {:?}\", source.def_id);\n     }\n }\n \n@@ -61,7 +63,7 @@ impl<'tcx> MutVisitor<'tcx> for InstCombineVisitor<'tcx> {\n         }\n \n         if let Some(constant) = self.optimizations.arrays_lengths.remove(&location) {\n-            debug!(\"Replacing `Len([_; N])`: {:?} with {:?}\", rvalue, constant);\n+            debug!(\"Replacing `Len([_; N])`: {:?}\", rvalue);\n             *rvalue = Rvalue::Use(Operand::Constant(box constant));\n         }\n \n@@ -77,10 +79,7 @@ struct OptimizationFinder<'b, 'a, 'tcx:'a+'b> {\n }\n \n impl<'b, 'a, 'tcx:'b> OptimizationFinder<'b, 'a, 'tcx> {\n-    fn new(\n-        mir: &'b Mir<'tcx>,\n-        tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    ) -> OptimizationFinder<'b, 'a, 'tcx> {\n+    fn new(mir: &'b Mir<'tcx>, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> OptimizationFinder<'b, 'a, 'tcx> {\n         OptimizationFinder {\n             mir,\n             tcx,"}]}