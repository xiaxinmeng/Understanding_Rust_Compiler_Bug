{"sha": "41f5a30690884578f697727c38139728131217ea", "node_id": "C_kwDOAAsO6NoAKDQxZjVhMzA2OTA4ODQ1NzhmNjk3NzI3YzM4MTM5NzI4MTMxMjE3ZWE", "commit": {"author": {"name": "\u8bb8\u6770\u53cb Jieyou Xu (Joe)", "email": "jieyouxu@outlook.com", "date": "2023-05-28T01:18:51Z"}, "committer": {"name": "\u8bb8\u6770\u53cb Jieyou Xu (Joe)", "email": "jieyouxu@outlook.com", "date": "2023-05-28T08:55:21Z"}, "message": "Recover upon encountering mistyped `Const` in const param def", "tree": {"sha": "6dfad2224f55f6be2ef042593be65a201bd95410", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6dfad2224f55f6be2ef042593be65a201bd95410"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41f5a30690884578f697727c38139728131217ea", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEze4qXcfh0ileWqZTxf1dMgFP20cFAmRzFvoACgkQxf1dMgFP\n20d+Gw//Uq4+PcRujt3fYUkwSVULwW5tlKkM2fxdCAsbgYCg+LRwgB8Wyrf0/Wit\nvDNiMQHzyZIeNWOgtNXohQdnYGuXvAK0yssKiKHwL8/prC7ym4w7CJy/YwkfGOBN\neGNA7cJeI4i5/0LlTXchkpLIF9A+TQCW1ETppQGa7IC/9kAX/4aSF560LcncJsQk\nJHRPZdX9bo6UZy6kcCyDUxZtdFaQCqIbbAUpzQ27S79NsnhU3uEULXRpgLsgFq+m\nZwttjbFJJzV2ddnkJNah/weJuQWEf1jK2d4CKCILhDvoWf/x01knN4AiiHIxepoJ\nZsK10rYNPyuY4AAMOByxPgvCJCH5DnFB1AcxHDQP7nPfSkrNhPg+5VAU3LQQ9UVd\nUfuJkn8hG2QlTgH3Y6FY33yoVkiHAlJVYycjVP3EGGnYgYxBDdIODk5CFR5XhNBg\nTTgiT/HxBUxVnL2miUupxx5OChUxJRMo0ZW5fZwy6UWi1uTYjt7LSLM77RO57Am6\nznjlA1g+C+h1C4uRAbOfCcBobULbI1qTIOzefhXO0vOKI23fezh840NPfc7yCUZ4\nShrxHap/Uw92WBvJOfsZyZuid+2QdtXTfFQIwrMf2dpY+NmjA1EmxwvLGqXbMe1k\nBI+W2HQWY0feyHbt1V6c8+Y7n9sYIZSr2bs5IfeIoiLqobOxauY=\n=327q\n-----END PGP SIGNATURE-----", "payload": "tree 6dfad2224f55f6be2ef042593be65a201bd95410\nparent b9c5fdc888e05be88269a47d40fd0d911ec2be0b\nauthor \u8bb8\u6770\u53cb Jieyou Xu (Joe) <jieyouxu@outlook.com> 1685236731 +0000\ncommitter \u8bb8\u6770\u53cb Jieyou Xu (Joe) <jieyouxu@outlook.com> 1685264121 +0800\n\nRecover upon encountering mistyped `Const` in const param def\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41f5a30690884578f697727c38139728131217ea", "html_url": "https://github.com/rust-lang/rust/commit/41f5a30690884578f697727c38139728131217ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41f5a30690884578f697727c38139728131217ea/comments", "author": {"login": "jieyouxu", "id": 39484203, "node_id": "MDQ6VXNlcjM5NDg0MjAz", "avatar_url": "https://avatars.githubusercontent.com/u/39484203?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jieyouxu", "html_url": "https://github.com/jieyouxu", "followers_url": "https://api.github.com/users/jieyouxu/followers", "following_url": "https://api.github.com/users/jieyouxu/following{/other_user}", "gists_url": "https://api.github.com/users/jieyouxu/gists{/gist_id}", "starred_url": "https://api.github.com/users/jieyouxu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jieyouxu/subscriptions", "organizations_url": "https://api.github.com/users/jieyouxu/orgs", "repos_url": "https://api.github.com/users/jieyouxu/repos", "events_url": "https://api.github.com/users/jieyouxu/events{/privacy}", "received_events_url": "https://api.github.com/users/jieyouxu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jieyouxu", "id": 39484203, "node_id": "MDQ6VXNlcjM5NDg0MjAz", "avatar_url": "https://avatars.githubusercontent.com/u/39484203?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jieyouxu", "html_url": "https://github.com/jieyouxu", "followers_url": "https://api.github.com/users/jieyouxu/followers", "following_url": "https://api.github.com/users/jieyouxu/following{/other_user}", "gists_url": "https://api.github.com/users/jieyouxu/gists{/gist_id}", "starred_url": "https://api.github.com/users/jieyouxu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jieyouxu/subscriptions", "organizations_url": "https://api.github.com/users/jieyouxu/orgs", "repos_url": "https://api.github.com/users/jieyouxu/repos", "events_url": "https://api.github.com/users/jieyouxu/events{/privacy}", "received_events_url": "https://api.github.com/users/jieyouxu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9c5fdc888e05be88269a47d40fd0d911ec2be0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9c5fdc888e05be88269a47d40fd0d911ec2be0b", "html_url": "https://github.com/rust-lang/rust/commit/b9c5fdc888e05be88269a47d40fd0d911ec2be0b"}], "stats": {"total": 106, "additions": 106, "deletions": 0}, "files": [{"sha": "8ab38c4fb8bea8f3512a92053b234d01197bd6e8", "filename": "compiler/rustc_parse/src/parser/generics.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/41f5a30690884578f697727c38139728131217ea/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f5a30690884578f697727c38139728131217ea/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs?ref=41f5a30690884578f697727c38139728131217ea", "patch": "@@ -43,6 +43,15 @@ impl<'a> Parser<'a> {\n     fn parse_ty_param(&mut self, preceding_attrs: AttrVec) -> PResult<'a, GenericParam> {\n         let ident = self.parse_ident()?;\n \n+        // We might have a typo'd `Const` that was parsed as a type parameter.\n+        if self.may_recover()\n+            && ident.name.as_str().to_ascii_lowercase() == kw::Const.as_str()\n+            && self.check_ident()\n+        // `Const` followed by IDENT\n+        {\n+            return Ok(self.recover_const_param_with_mistyped_const(preceding_attrs, ident)?);\n+        }\n+\n         // Parse optional colon and param bounds.\n         let mut colon_span = None;\n         let bounds = if self.eat(&token::Colon) {\n@@ -120,6 +129,41 @@ impl<'a> Parser<'a> {\n         })\n     }\n \n+    pub(crate) fn recover_const_param_with_mistyped_const(\n+        &mut self,\n+        preceding_attrs: AttrVec,\n+        mistyped_const_ident: Ident,\n+    ) -> PResult<'a, GenericParam> {\n+        let ident = self.parse_ident()?;\n+        self.expect(&token::Colon)?;\n+        let ty = self.parse_ty()?;\n+\n+        // Parse optional const generics default value.\n+        let default = if self.eat(&token::Eq) { Some(self.parse_const_arg()?) } else { None };\n+\n+        let mut err = self.struct_span_err(\n+            mistyped_const_ident.span,\n+            format!(\"`const` keyword was mistyped as `{}`\", mistyped_const_ident.as_str()),\n+        );\n+        err.span_suggestion_verbose(\n+            mistyped_const_ident.span,\n+            \"use the `const` keyword\",\n+            kw::Const.as_str(),\n+            Applicability::MachineApplicable,\n+        );\n+        err.emit();\n+\n+        Ok(GenericParam {\n+            ident,\n+            id: ast::DUMMY_NODE_ID,\n+            attrs: preceding_attrs,\n+            bounds: Vec::new(),\n+            kind: GenericParamKind::Const { ty, kw_span: mistyped_const_ident.span, default },\n+            is_placeholder: false,\n+            colon_span: None,\n+        })\n+    }\n+\n     /// Parses a (possibly empty) list of lifetime and type parameters, possibly including\n     /// a trailing comma and erroneous trailing attributes.\n     pub(super) fn parse_generic_params(&mut self) -> PResult<'a, ThinVec<ast::GenericParam>> {"}, {"sha": "85d3ebba57a3b7af027dcd2ceef517dc7cebd167", "filename": "tests/ui/parser/typod-const-in-const-param-def.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/41f5a30690884578f697727c38139728131217ea/tests%2Fui%2Fparser%2Ftypod-const-in-const-param-def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f5a30690884578f697727c38139728131217ea/tests%2Fui%2Fparser%2Ftypod-const-in-const-param-def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Ftypod-const-in-const-param-def.rs?ref=41f5a30690884578f697727c38139728131217ea", "patch": "@@ -0,0 +1,16 @@\n+pub fn foo<Const N: u8>() {}\n+//~^ ERROR `const` keyword was mistyped as `Const`\n+\n+pub fn bar<Const>() {}\n+// OK\n+\n+pub fn baz<Const N: u8, T>() {}\n+//~^ ERROR `const` keyword was mistyped as `Const`\n+\n+pub fn qux<T, Const N: u8>() {}\n+//~^ ERROR `const` keyword was mistyped as `Const`\n+\n+pub fn quux<T, Const N: u8, U>() {}\n+//~^ ERROR `const` keyword was mistyped as `Const`\n+\n+fn main() {}"}, {"sha": "75d73c6ea878a59b90066e7e6335656ef4f0d30e", "filename": "tests/ui/parser/typod-const-in-const-param-def.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/41f5a30690884578f697727c38139728131217ea/tests%2Fui%2Fparser%2Ftypod-const-in-const-param-def.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41f5a30690884578f697727c38139728131217ea/tests%2Fui%2Fparser%2Ftypod-const-in-const-param-def.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Ftypod-const-in-const-param-def.stderr?ref=41f5a30690884578f697727c38139728131217ea", "patch": "@@ -0,0 +1,46 @@\n+error: `const` keyword was mistyped as `Const`\n+  --> $DIR/typod-const-in-const-param-def.rs:1:12\n+   |\n+LL | pub fn foo<Const N: u8>() {}\n+   |            ^^^^^\n+   |\n+help: use the `const` keyword\n+   |\n+LL | pub fn foo<const N: u8>() {}\n+   |            ~~~~~\n+\n+error: `const` keyword was mistyped as `Const`\n+  --> $DIR/typod-const-in-const-param-def.rs:7:12\n+   |\n+LL | pub fn baz<Const N: u8, T>() {}\n+   |            ^^^^^\n+   |\n+help: use the `const` keyword\n+   |\n+LL | pub fn baz<const N: u8, T>() {}\n+   |            ~~~~~\n+\n+error: `const` keyword was mistyped as `Const`\n+  --> $DIR/typod-const-in-const-param-def.rs:10:15\n+   |\n+LL | pub fn qux<T, Const N: u8>() {}\n+   |               ^^^^^\n+   |\n+help: use the `const` keyword\n+   |\n+LL | pub fn qux<T, const N: u8>() {}\n+   |               ~~~~~\n+\n+error: `const` keyword was mistyped as `Const`\n+  --> $DIR/typod-const-in-const-param-def.rs:13:16\n+   |\n+LL | pub fn quux<T, Const N: u8, U>() {}\n+   |                ^^^^^\n+   |\n+help: use the `const` keyword\n+   |\n+LL | pub fn quux<T, const N: u8, U>() {}\n+   |                ~~~~~\n+\n+error: aborting due to 4 previous errors\n+"}]}