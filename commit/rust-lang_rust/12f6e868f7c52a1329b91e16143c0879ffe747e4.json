{"sha": "12f6e868f7c52a1329b91e16143c0879ffe747e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyZjZlODY4ZjdjNTJhMTMyOWI5MWUxNjE0M2MwODc5ZmZlNzQ3ZTQ=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-11-21T10:56:31Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-11-21T11:07:41Z"}, "message": "Add explanation of kinds to tutorial", "tree": {"sha": "1ab76841e4b792851eada8790380e7dcf47c4cb7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ab76841e4b792851eada8790380e7dcf47c4cb7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12f6e868f7c52a1329b91e16143c0879ffe747e4", "comment_count": 2, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12f6e868f7c52a1329b91e16143c0879ffe747e4", "html_url": "https://github.com/rust-lang/rust/commit/12f6e868f7c52a1329b91e16143c0879ffe747e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12f6e868f7c52a1329b91e16143c0879ffe747e4/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02574a5bdb7900fd6b40bf4f3c93080eafa35d4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/02574a5bdb7900fd6b40bf4f3c93080eafa35d4e", "html_url": "https://github.com/rust-lang/rust/commit/02574a5bdb7900fd6b40bf4f3c93080eafa35d4e"}], "stats": {"total": 53, "additions": 42, "deletions": 11}, "files": [{"sha": "62372e56f257d8cbb2dcc7c5846cc5a43b63162a", "filename": "doc/tutorial/generic.md", "status": "modified", "additions": 41, "deletions": 10, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/12f6e868f7c52a1329b91e16143c0879ffe747e4/doc%2Ftutorial%2Fgeneric.md", "raw_url": "https://github.com/rust-lang/rust/raw/12f6e868f7c52a1329b91e16143c0879ffe747e4/doc%2Ftutorial%2Fgeneric.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial%2Fgeneric.md?ref=12f6e868f7c52a1329b91e16143c0879ffe747e4", "patch": "@@ -57,12 +57,14 @@ programs that just can't be typed.\n \n     let n = none;\n \n-If you never do anything else with none, the compiler will not be able\n+If you never do anything else with `n`, the compiler will not be able\n to assign a type to it. (The same goes for `[]`, in fact.) If you\n really want to have such a statement, you'll have to write it like\n this:\n \n     let n = none::<int>;\n+    // or\n+    let n2: option::t<int>: none;\n \n Note that, in a value expression, `<` already has a meaning as a\n comparison operator, so you'll have to write `::<T>` to explicitly\n@@ -75,12 +77,44 @@ There are two built-in operations that, perhaps surprisingly, act on\n values of any type. It was already mentioned earlier that `log` can\n take any type of value and output it as a string.\n \n-More interesting is that Rust also defines an ordering for all\n-datatypes, and allows you to meaningfully apply comparison operators\n-(`<`, `>`, `<=`, `>=`, `==`, `!=`) to them. For structural types, the\n-comparison happens left to right, so `\"abc\" < \"bac\"` (but note that\n-`\"bac\" < \"\u00e1c\"`, because the ordering acts on UTF-8 sequences without\n-any sophistication).\n+More interesting is that Rust also defines an ordering for values of\n+all datatypes, and allows you to meaningfully apply comparison\n+operators (`<`, `>`, `<=`, `>=`, `==`, `!=`) to them. For structural\n+types, the comparison happens left to right, so `\"abc\" < \"bac\"` (but\n+note that `\"bac\" < \"\u00e1c\"`, because the ordering acts on UTF-8 sequences\n+without any sophistication).\n+\n+## Kinds\n+\n+Perhaps surprisingly, the 'copy' (duplicate) operation is not defined\n+for all Rust types. Resource types (types with destructors) can not be\n+copied, and neither can any type whose copying would require copying a\n+resource (such as records or unique boxes containing a resource).\n+\n+This complicates handling of generic functions. If you have a type\n+parameter `T`, can you copy values of that type? In Rust, you can't,\n+unless you explicitly declare that type parameter to have copyable\n+'kind'. A kind is a type of type.\n+\n+    // This does not compile\n+    fn head_bad<T>(v: [T]) -> T { v[0] }\n+    // This does\n+    fn head<copy T>(v: [T]) -> T { v[0] }\n+\n+When instantiating a generic function, you can only instantiate it\n+with types that fit its kinds. So you could not apply `head` to a\n+resource type.\n+\n+Rust has three kinds: 'noncopyable', 'copyable', and 'sendable'. By\n+default, type parameters are considered to be noncopyable. You can\n+annotate them with the `copy` keyword to declare them copyable, and\n+with the `send` keyword to make them sendable.\n+\n+Sendable types are a subset of copyable types. They are types that do\n+not contain shared (reference counted) types, which are thus uniquely\n+owned by the function that owns them, and can be sent over channels to\n+other tasks. Most of the generic functions in the `std::comm` module\n+take sendable types.\n \n ## Generic functions and argument-passing\n \n@@ -102,6 +136,3 @@ pass to a generic higher-order function as being passed by pointer:\n \n NOTE: This is inconvenient, and we are hoping to get rid of this\n restriction in the future.\n-\n-FIXME discuss kinds, when they have settled\n-"}, {"sha": "37cbed49e8b3b01b3cf3e616e37ce886f175c7b1", "filename": "doc/tutorial/index.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12f6e868f7c52a1329b91e16143c0879ffe747e4/doc%2Ftutorial%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/12f6e868f7c52a1329b91e16143c0879ffe747e4/doc%2Ftutorial%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial%2Findex.md?ref=12f6e868f7c52a1329b91e16143c0879ffe747e4", "patch": "@@ -1,3 +1,3 @@\n # Rust language tutorial\n \n-<div style=\"font-weight: bold; color: #a00;\">Dev snapshot. Not yet suitable for public consumption.</div>\n+*(Not quite finished yet. Proceed with caution.)*"}]}