{"sha": "352e621368c31d7b4a6362e081586cdb931ba020", "node_id": "C_kwDOAAsO6NoAKDM1MmU2MjEzNjhjMzFkN2I0YTYzNjJlMDgxNTg2Y2RiOTMxYmEwMjA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-10T23:10:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-10T23:10:59Z"}, "message": "Auto merge of #94824 - Dylan-DPC:rollup-iamc09j, r=Dylan-DPC\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #93950 (Use modern formatting for format! macros)\n - #94274 (Treat unstable lints as unknown)\n - #94368 ([1/2] Implement macro meta-variable expressions)\n - #94719 (Statically compile libstdc++ everywhere if asked)\n - #94728 (Only emit pointer-like metadata for `Box<T, A>` when `A` is ZST)\n - #94790 (enable portable-simd doctests in Miri)\n - #94811 (Update browser-ui-test version)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "c39f926df5a4daee81ea294b9edcd46742e14e18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c39f926df5a4daee81ea294b9edcd46742e14e18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/352e621368c31d7b4a6362e081586cdb931ba020", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/352e621368c31d7b4a6362e081586cdb931ba020", "html_url": "https://github.com/rust-lang/rust/commit/352e621368c31d7b4a6362e081586cdb931ba020", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/352e621368c31d7b4a6362e081586cdb931ba020/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f4e0677190b82e61dc507e3e72caf89da8e5e28", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f4e0677190b82e61dc507e3e72caf89da8e5e28", "html_url": "https://github.com/rust-lang/rust/commit/5f4e0677190b82e61dc507e3e72caf89da8e5e28"}, {"sha": "456135c9c2ab17e3b6deff7c78284e8892d2495d", "url": "https://api.github.com/repos/rust-lang/rust/commits/456135c9c2ab17e3b6deff7c78284e8892d2495d", "html_url": "https://github.com/rust-lang/rust/commit/456135c9c2ab17e3b6deff7c78284e8892d2495d"}], "stats": {"total": 2963, "additions": 2048, "deletions": 915}, "files": [{"sha": "9c18f55c03b4d28c091bf6cc411f215e7fc05c91", "filename": "compiler/rustc_ast/src/util/literal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -23,7 +23,7 @@ pub enum LitError {\n \n impl LitKind {\n     /// Converts literal token into a semantic literal.\n-    fn from_lit_token(lit: token::Lit) -> Result<LitKind, LitError> {\n+    pub fn from_lit_token(lit: token::Lit) -> Result<LitKind, LitError> {\n         let token::Lit { kind, symbol, suffix } = lit;\n         if suffix.is_some() && !kind.may_have_suffix() {\n             return Err(LitError::InvalidSuffix);"}, {"sha": "a6e4878e5b3615abc7aaa897a46c0a07770d5632", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -617,7 +617,9 @@ pub fn type_metadata<'ll, 'tcx>(cx: &CodegenCx<'ll, 'tcx>, t: Ty<'tcx>) -> &'ll\n         ty::RawPtr(ty::TypeAndMut { ty: pointee_type, .. }) | ty::Ref(_, pointee_type, _) => {\n             pointer_or_reference_metadata(cx, t, pointee_type, unique_type_id)\n         }\n-        ty::Adt(def, _) if def.is_box() => {\n+        // Box<T, A> may have a non-ZST allocator A. In that case, we\n+        // cannot treat Box<T, A> as just an owned alias of `*mut T`.\n+        ty::Adt(def, substs) if def.is_box() && cx.layout_of(substs.type_at(1)).is_zst() => {\n             pointer_or_reference_metadata(cx, t, t.boxed_ty(), unique_type_id)\n         }\n         ty::FnDef(..) | ty::FnPtr(_) => subroutine_type_metadata(cx, unique_type_id),"}, {"sha": "3641c38f9dcd08bd71d15e543858dc56b18bb040", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -1087,12 +1087,12 @@ impl HandlerInner {\n         let warnings = match self.deduplicated_warn_count {\n             0 => String::new(),\n             1 => \"1 warning emitted\".to_string(),\n-            count => format!(\"{} warnings emitted\", count),\n+            count => format!(\"{count} warnings emitted\"),\n         };\n         let errors = match self.deduplicated_err_count {\n             0 => String::new(),\n             1 => \"aborting due to previous error\".to_string(),\n-            count => format!(\"aborting due to {} previous errors\", count),\n+            count => format!(\"aborting due to {count} previous errors\"),\n         };\n         if self.treat_err_as_bug() {\n             return;"}, {"sha": "8a9efe01368e39625efca240f973ad2f3e45d42b", "filename": "compiler/rustc_expand/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Flib.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -3,6 +3,7 @@\n #![feature(crate_visibility_modifier)]\n #![feature(decl_macro)]\n #![feature(if_let_guard)]\n+#![feature(let_chains)]\n #![feature(let_else)]\n #![feature(proc_macro_diagnostic)]\n #![feature(proc_macro_internals)]"}, {"sha": "3d4c77aba7339ebe37516c84a08f3634d5c0cc40", "filename": "compiler/rustc_expand/src/mbe.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/compiler%2Frustc_expand%2Fsrc%2Fmbe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/compiler%2Frustc_expand%2Fsrc%2Fmbe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -6,17 +6,17 @@\n crate mod macro_check;\n crate mod macro_parser;\n crate mod macro_rules;\n+crate mod metavar_expr;\n crate mod quoted;\n crate mod transcribe;\n \n+use metavar_expr::MetaVarExpr;\n use rustc_ast::token::{self, NonterminalKind, Token, TokenKind};\n use rustc_ast::tokenstream::DelimSpan;\n-\n+use rustc_data_structures::sync::Lrc;\n use rustc_span::symbol::Ident;\n use rustc_span::Span;\n \n-use rustc_data_structures::sync::Lrc;\n-\n /// Contains the sub-token-trees of a \"delimited\" token tree, such as the contents of `(`. Note\n /// that the delimiter itself might be `NoDelim`.\n #[derive(Clone, PartialEq, Encodable, Decodable, Debug)]\n@@ -73,8 +73,8 @@ enum KleeneOp {\n     ZeroOrOne,\n }\n \n-/// Similar to `tokenstream::TokenTree`, except that `$i`, `$i:ident`, and `$(...)`\n-/// are \"first-class\" token trees. Useful for parsing macros.\n+/// Similar to `tokenstream::TokenTree`, except that `$i`, `$i:ident`, `$(...)`,\n+/// and `${...}` are \"first-class\" token trees. Useful for parsing macros.\n #[derive(Debug, Clone, PartialEq, Encodable, Decodable)]\n enum TokenTree {\n     Token(Token),\n@@ -85,6 +85,8 @@ enum TokenTree {\n     MetaVar(Span, Ident),\n     /// e.g., `$var:expr`. This is only used in the left hand side of MBE macros.\n     MetaVarDecl(Span, Ident /* name to bind */, Option<NonterminalKind>),\n+    /// A meta-variable expression inside `${...}`\n+    MetaVarExpr(DelimSpan, MetaVarExpr),\n }\n \n impl TokenTree {\n@@ -139,7 +141,9 @@ impl TokenTree {\n             TokenTree::Token(Token { span, .. })\n             | TokenTree::MetaVar(span, _)\n             | TokenTree::MetaVarDecl(span, _, _) => span,\n-            TokenTree::Delimited(span, _) | TokenTree::Sequence(span, _) => span.entire(),\n+            TokenTree::Delimited(span, _)\n+            | TokenTree::MetaVarExpr(span, _)\n+            | TokenTree::Sequence(span, _) => span.entire(),\n         }\n     }\n "}, {"sha": "88e11693220937da33a66996e74d7ff48ac346cf", "filename": "compiler/rustc_expand/src/mbe/macro_check.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_check.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -278,6 +278,8 @@ fn check_binders(\n                 binders.insert(name, BinderInfo { span, ops: ops.into() });\n             }\n         }\n+        // `MetaVarExpr` can not appear in the LHS of a macro arm\n+        TokenTree::MetaVarExpr(..) => {}\n         TokenTree::Delimited(_, ref del) => {\n             for tt in &del.tts {\n                 check_binders(sess, node_id, tt, macros, binders, ops, valid);\n@@ -335,6 +337,8 @@ fn check_occurrences(\n             let name = MacroRulesNormalizedIdent::new(name);\n             check_ops_is_prefix(sess, node_id, macros, binders, ops, span, name);\n         }\n+        // FIXME(c410-f3r) Check token (https://github.com/rust-lang/rust/issues/93902)\n+        TokenTree::MetaVarExpr(..) => {}\n         TokenTree::Delimited(_, ref del) => {\n             check_nested_occurrences(sess, node_id, &del.tts, macros, binders, ops, valid);\n         }"}, {"sha": "04137086088ddef368c3844091ccebd9c90782c7", "filename": "compiler/rustc_expand/src/mbe/macro_parser.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -200,7 +200,7 @@ struct MatcherPos<'root, 'tt> {\n \n // This type is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(MatcherPos<'_, '_>, 192);\n+rustc_data_structures::static_assert_size!(MatcherPos<'_, '_>, 240);\n \n impl<'root, 'tt> MatcherPos<'root, 'tt> {\n     /// Generates the top-level matcher position in which the \"dot\" is before the first token of\n@@ -321,10 +321,13 @@ pub(super) fn count_names(ms: &[TokenTree]) -> usize {\n     ms.iter().fold(0, |count, elt| {\n         count\n             + match *elt {\n-                TokenTree::Sequence(_, ref seq) => seq.num_captures,\n                 TokenTree::Delimited(_, ref delim) => count_names(&delim.tts),\n                 TokenTree::MetaVar(..) => 0,\n                 TokenTree::MetaVarDecl(..) => 1,\n+                // FIXME(c410-f3r) MetaVarExpr should be handled instead of being ignored\n+                // https://github.com/rust-lang/rust/issues/9390\n+                TokenTree::MetaVarExpr(..) => 0,\n+                TokenTree::Sequence(_, ref seq) => seq.num_captures,\n                 TokenTree::Token(..) => 0,\n             }\n     })\n@@ -436,7 +439,9 @@ fn nameize<I: Iterator<Item = NamedMatch>>(\n                 }\n                 Occupied(..) => return Err((sp, format!(\"duplicated bind name: {}\", bind_name))),\n             },\n-            TokenTree::MetaVar(..) | TokenTree::Token(..) => (),\n+            // FIXME(c410-f3r) MetaVar and MetaVarExpr should be handled instead of being ignored\n+            // https://github.com/rust-lang/rust/issues/9390\n+            TokenTree::MetaVar(..) | TokenTree::MetaVarExpr(..) | TokenTree::Token(..) => {}\n         }\n \n         Ok(())\n@@ -650,7 +655,7 @@ fn inner_parse_loop<'root, 'tt>(\n                 // rules. NOTE that this is not necessarily an error unless _all_ items in\n                 // `cur_items` end up doing this. There may still be some other matchers that do\n                 // end up working out.\n-                TokenTree::Token(..) | TokenTree::MetaVar(..) => {}\n+                TokenTree::Token(..) | TokenTree::MetaVar(..) | TokenTree::MetaVarExpr(..) => {}\n             }\n         }\n     }"}, {"sha": "c3b1b34aa29b933ba6863d71afeaec3e15623a57", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -580,7 +580,10 @@ fn check_lhs_no_empty_seq(sess: &ParseSess, tts: &[mbe::TokenTree]) -> bool {\n     use mbe::TokenTree;\n     for tt in tts {\n         match *tt {\n-            TokenTree::Token(..) | TokenTree::MetaVar(..) | TokenTree::MetaVarDecl(..) => (),\n+            TokenTree::Token(..)\n+            | TokenTree::MetaVar(..)\n+            | TokenTree::MetaVarDecl(..)\n+            | TokenTree::MetaVarExpr(..) => (),\n             TokenTree::Delimited(_, ref del) => {\n                 if !check_lhs_no_empty_seq(sess, &del.tts) {\n                     return false;\n@@ -669,7 +672,10 @@ impl FirstSets {\n             let mut first = TokenSet::empty();\n             for tt in tts.iter().rev() {\n                 match *tt {\n-                    TokenTree::Token(..) | TokenTree::MetaVar(..) | TokenTree::MetaVarDecl(..) => {\n+                    TokenTree::Token(..)\n+                    | TokenTree::MetaVar(..)\n+                    | TokenTree::MetaVarDecl(..)\n+                    | TokenTree::MetaVarExpr(..) => {\n                         first.replace_with(tt.clone());\n                     }\n                     TokenTree::Delimited(span, ref delimited) => {\n@@ -731,7 +737,10 @@ impl FirstSets {\n         for tt in tts.iter() {\n             assert!(first.maybe_empty);\n             match *tt {\n-                TokenTree::Token(..) | TokenTree::MetaVar(..) | TokenTree::MetaVarDecl(..) => {\n+                TokenTree::Token(..)\n+                | TokenTree::MetaVar(..)\n+                | TokenTree::MetaVarDecl(..)\n+                | TokenTree::MetaVarExpr(..) => {\n                     first.add_one(tt.clone());\n                     return first;\n                 }\n@@ -907,7 +916,10 @@ fn check_matcher_core(\n         // First, update `last` so that it corresponds to the set\n         // of NT tokens that might end the sequence `... token`.\n         match *token {\n-            TokenTree::Token(..) | TokenTree::MetaVar(..) | TokenTree::MetaVarDecl(..) => {\n+            TokenTree::Token(..)\n+            | TokenTree::MetaVar(..)\n+            | TokenTree::MetaVarDecl(..)\n+            | TokenTree::MetaVarExpr(..) => {\n                 if token_can_be_followed_by_any(token) {\n                     // don't need to track tokens that work with any,\n                     last.replace_with_irrelevant();"}, {"sha": "6c5a755da6f4095d3291f4693ec42e98b8272e94", "filename": "compiler/rustc_expand/src/mbe/metavar_expr.rs", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmetavar_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmetavar_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmetavar_expr.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -0,0 +1,157 @@\n+use rustc_ast::token;\n+use rustc_ast::tokenstream::{Cursor, TokenStream, TokenTree};\n+use rustc_ast::{LitIntType, LitKind};\n+use rustc_ast_pretty::pprust;\n+use rustc_errors::{Applicability, PResult};\n+use rustc_session::parse::ParseSess;\n+use rustc_span::symbol::Ident;\n+use rustc_span::Span;\n+\n+/// A meta-variable expression, for expansions based on properties of meta-variables.\n+#[derive(Debug, Clone, PartialEq, Encodable, Decodable)]\n+crate enum MetaVarExpr {\n+    /// The number of repetitions of an identifier, optionally limited to a number\n+    /// of outer-most repetition depths. If the depth limit is `None` then the depth is unlimited.\n+    Count(Ident, Option<usize>),\n+\n+    /// Ignore a meta-variable for repetition without expansion.\n+    Ignore(Ident),\n+\n+    /// The index of the repetition at a particular depth, where 0 is the inner-most\n+    /// repetition. The `usize` is the depth.\n+    Index(usize),\n+\n+    /// The length of the repetition at a particular depth, where 0 is the inner-most\n+    /// repetition. The `usize` is the depth.\n+    Length(usize),\n+}\n+\n+impl MetaVarExpr {\n+    /// Attempt to parse a meta-variable expression from a token stream.\n+    crate fn parse<'sess>(\n+        input: &TokenStream,\n+        outer_span: Span,\n+        sess: &'sess ParseSess,\n+    ) -> PResult<'sess, MetaVarExpr> {\n+        let mut tts = input.trees();\n+        let ident = parse_ident(&mut tts, sess, outer_span)?;\n+        let Some(TokenTree::Delimited(_, token::Paren, args)) = tts.next() else {\n+            let msg = \"meta-variable expression parameter must be wrapped in parentheses\";\n+            return Err(sess.span_diagnostic.struct_span_err(ident.span, msg));\n+        };\n+        check_trailing_token(&mut tts, sess)?;\n+        let mut iter = args.trees();\n+        let rslt = match &*ident.as_str() {\n+            \"count\" => parse_count(&mut iter, sess, ident.span)?,\n+            \"ignore\" => MetaVarExpr::Ignore(parse_ident(&mut iter, sess, ident.span)?),\n+            \"index\" => MetaVarExpr::Index(parse_depth(&mut iter, sess, ident.span)?),\n+            \"length\" => MetaVarExpr::Length(parse_depth(&mut iter, sess, ident.span)?),\n+            _ => {\n+                let err_msg = \"unrecognized meta-variable expression\";\n+                let mut err = sess.span_diagnostic.struct_span_err(ident.span, err_msg);\n+                err.span_suggestion(\n+                    ident.span,\n+                    \"supported expressions are count, ignore, index and length\",\n+                    String::new(),\n+                    Applicability::MachineApplicable,\n+                );\n+                return Err(err);\n+            }\n+        };\n+        check_trailing_token(&mut iter, sess)?;\n+        Ok(rslt)\n+    }\n+\n+    crate fn ident(&self) -> Option<&Ident> {\n+        match self {\n+            MetaVarExpr::Count(ident, _) | MetaVarExpr::Ignore(ident) => Some(&ident),\n+            MetaVarExpr::Index(..) | MetaVarExpr::Length(..) => None,\n+        }\n+    }\n+}\n+\n+// Checks if there are any remaining tokens. For example, `${ignore(ident ... a b c ...)}`\n+fn check_trailing_token<'sess>(iter: &mut Cursor, sess: &'sess ParseSess) -> PResult<'sess, ()> {\n+    if let Some(tt) = iter.next() {\n+        let mut diag = sess.span_diagnostic.struct_span_err(\n+            tt.span(),\n+            &format!(\"unexpected token: {}\", pprust::tt_to_string(&tt)),\n+        );\n+        diag.span_note(tt.span(), \"meta-variable expression must not have trailing tokens\");\n+        Err(diag)\n+    } else {\n+        Ok(())\n+    }\n+}\n+\n+/// Parse a meta-variable `count` expression: `count(ident[, depth])`\n+fn parse_count<'sess>(\n+    iter: &mut Cursor,\n+    sess: &'sess ParseSess,\n+    span: Span,\n+) -> PResult<'sess, MetaVarExpr> {\n+    let ident = parse_ident(iter, sess, span)?;\n+    let depth = if try_eat_comma(iter) { Some(parse_depth(iter, sess, span)?) } else { None };\n+    Ok(MetaVarExpr::Count(ident, depth))\n+}\n+\n+/// Parses the depth used by index(depth) and length(depth).\n+fn parse_depth<'sess>(\n+    iter: &mut Cursor,\n+    sess: &'sess ParseSess,\n+    span: Span,\n+) -> PResult<'sess, usize> {\n+    let Some(tt) = iter.next() else { return Ok(0) };\n+    let TokenTree::Token(token::Token {\n+        kind: token::TokenKind::Literal(lit), ..\n+    }) = tt else {\n+        return Err(sess.span_diagnostic.struct_span_err(\n+            span,\n+            \"meta-variable expression depth must be a literal\"\n+        ));\n+    };\n+    if let Ok(lit_kind) = LitKind::from_lit_token(lit)\n+        && let LitKind::Int(n_u128, LitIntType::Unsuffixed) = lit_kind\n+        && let Ok(n_usize) = usize::try_from(n_u128)\n+    {\n+        Ok(n_usize)\n+    }\n+    else {\n+        let msg = \"only unsuffixes integer literals are supported in meta-variable expressions\";\n+        Err(sess.span_diagnostic.struct_span_err(span, msg))\n+    }\n+}\n+\n+/// Parses an generic ident\n+fn parse_ident<'sess>(\n+    iter: &mut Cursor,\n+    sess: &'sess ParseSess,\n+    span: Span,\n+) -> PResult<'sess, Ident> {\n+    let err_fn = |msg| sess.span_diagnostic.struct_span_err(span, msg);\n+    if let Some(tt) = iter.next() && let TokenTree::Token(token) = tt {\n+        if let Some((elem, false)) = token.ident() {\n+            return Ok(elem);\n+        }\n+        let token_str = pprust::token_to_string(&token);\n+        let mut err = err_fn(&format!(\"expected identifier, found `{}`\", &token_str));\n+        err.span_suggestion(\n+            token.span,\n+            &format!(\"try removing `{}`\", &token_str),\n+            String::new(),\n+            Applicability::MaybeIncorrect,\n+        );\n+        return Err(err);\n+    }\n+    Err(err_fn(\"expected identifier\"))\n+}\n+\n+/// Tries to move the iterator forward returning `true` if there is a comma. If not, then the\n+/// iterator is not modified and the result is `false`.\n+fn try_eat_comma(iter: &mut Cursor) -> bool {\n+    if let Some(TokenTree::Token(token::Token { kind: token::Comma, .. })) = iter.look_ahead(0) {\n+        let _ = iter.next();\n+        return true;\n+    }\n+    false\n+}"}, {"sha": "12c5dac9e0bf47c33366940ae60959f9a13dc4e0", "filename": "compiler/rustc_expand/src/mbe/quoted.rs", "status": "modified", "additions": 94, "deletions": 29, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fquoted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fquoted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fquoted.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -1,13 +1,13 @@\n use crate::mbe::macro_parser;\n-use crate::mbe::{Delimited, KleeneOp, KleeneToken, SequenceRepetition, TokenTree};\n+use crate::mbe::{Delimited, KleeneOp, KleeneToken, MetaVarExpr, SequenceRepetition, TokenTree};\n \n use rustc_ast::token::{self, Token};\n use rustc_ast::tokenstream;\n use rustc_ast::{NodeId, DUMMY_NODE_ID};\n use rustc_ast_pretty::pprust;\n use rustc_feature::Features;\n-use rustc_session::parse::ParseSess;\n-use rustc_span::symbol::{kw, Ident};\n+use rustc_session::parse::{feature_err, ParseSess};\n+use rustc_span::symbol::{kw, sym, Ident};\n \n use rustc_span::edition::Edition;\n use rustc_span::{Span, SyntaxContext};\n@@ -25,22 +25,22 @@ const VALID_FRAGMENT_NAMES_MSG: &str = \"valid fragment specifiers are \\\n /// # Parameters\n ///\n /// - `input`: a token stream to read from, the contents of which we are parsing.\n-/// - `expect_matchers`: `parse` can be used to parse either the \"patterns\" or the \"body\" of a\n-///   macro. Both take roughly the same form _except_ that in a pattern, metavars are declared with\n-///   their \"matcher\" type. For example `$var:expr` or `$id:ident`. In this example, `expr` and\n-///   `ident` are \"matchers\". They are not present in the body of a macro rule -- just in the\n-///   pattern, so we pass a parameter to indicate whether to expect them or not.\n+/// - `parsing_patterns`: `parse` can be used to parse either the \"patterns\" or the \"body\" of a\n+///   macro. Both take roughly the same form _except_ that:\n+///   - In a pattern, metavars are declared with their \"matcher\" type. For example `$var:expr` or\n+///     `$id:ident`. In this example, `expr` and `ident` are \"matchers\". They are not present in the\n+///     body of a macro rule -- just in the pattern.\n+///   - Metavariable expressions are only valid in the \"body\", not the \"pattern\".\n /// - `sess`: the parsing session. Any errors will be emitted to this session.\n /// - `node_id`: the NodeId of the macro we are parsing.\n /// - `features`: language features so we can do feature gating.\n-/// - `edition`: the edition of the crate defining the macro\n ///\n /// # Returns\n ///\n /// A collection of `self::TokenTree`. There may also be some errors emitted to `sess`.\n pub(super) fn parse(\n     input: tokenstream::TokenStream,\n-    expect_matchers: bool,\n+    parsing_patterns: bool,\n     sess: &ParseSess,\n     node_id: NodeId,\n     features: &Features,\n@@ -55,9 +55,9 @@ pub(super) fn parse(\n     while let Some(tree) = trees.next() {\n         // Given the parsed tree, if there is a metavar and we are expecting matchers, actually\n         // parse out the matcher (i.e., in `$id:ident` this would parse the `:` and `ident`).\n-        let tree = parse_tree(tree, &mut trees, expect_matchers, sess, node_id, features, edition);\n+        let tree = parse_tree(tree, &mut trees, parsing_patterns, sess, node_id, features, edition);\n         match tree {\n-            TokenTree::MetaVar(start_sp, ident) if expect_matchers => {\n+            TokenTree::MetaVar(start_sp, ident) if parsing_patterns => {\n                 let span = match trees.next() {\n                     Some(tokenstream::TokenTree::Token(Token { kind: token::Colon, span })) => {\n                         match trees.next() {\n@@ -118,6 +118,14 @@ pub(super) fn parse(\n     result\n }\n \n+/// Asks for the `macro_metavar_expr` feature if it is not already declared\n+fn maybe_emit_macro_metavar_expr_feature(features: &Features, sess: &ParseSess, span: Span) {\n+    if !features.macro_metavar_expr {\n+        let msg = \"meta-variable expressions are unstable\";\n+        feature_err(&sess, sym::macro_metavar_expr, span, msg).emit();\n+    }\n+}\n+\n /// Takes a `tokenstream::TokenTree` and returns a `self::TokenTree`. Specifically, this takes a\n /// generic `TokenTree`, such as is used in the rest of the compiler, and returns a `TokenTree`\n /// for use in parsing a macro.\n@@ -129,14 +137,13 @@ pub(super) fn parse(\n /// - `tree`: the tree we wish to convert.\n /// - `outer_trees`: an iterator over trees. We may need to read more tokens from it in order to finish\n ///   converting `tree`\n-/// - `expect_matchers`: same as for `parse` (see above).\n+/// - `parsing_patterns`: same as [parse].\n /// - `sess`: the parsing session. Any errors will be emitted to this session.\n /// - `features`: language features so we can do feature gating.\n-/// - `edition` - the edition of the crate defining the macro\n fn parse_tree(\n     tree: tokenstream::TokenTree,\n     outer_trees: &mut impl Iterator<Item = tokenstream::TokenTree>,\n-    expect_matchers: bool,\n+    parsing_patterns: bool,\n     sess: &ParseSess,\n     node_id: NodeId,\n     features: &Features,\n@@ -158,24 +165,57 @@ fn parse_tree(\n             }\n \n             match next {\n-                // `tree` is followed by a delimited set of token trees. This indicates the beginning\n-                // of a repetition sequence in the macro (e.g. `$(pat)*`).\n-                Some(tokenstream::TokenTree::Delimited(span, delim, tts)) => {\n-                    // Must have `(` not `{` or `[`\n-                    if delim != token::Paren {\n-                        let tok = pprust::token_kind_to_string(&token::OpenDelim(delim));\n-                        let msg = format!(\"expected `(`, found `{}`\", tok);\n-                        sess.span_diagnostic.span_err(span.entire(), &msg);\n+                // `tree` is followed by a delimited set of token trees.\n+                Some(tokenstream::TokenTree::Delimited(delim_span, delim, tts)) => {\n+                    if parsing_patterns {\n+                        if delim != token::Paren {\n+                            span_dollar_dollar_or_metavar_in_the_lhs_err(\n+                                sess,\n+                                &Token { kind: token::OpenDelim(delim), span: delim_span.entire() },\n+                            );\n+                        }\n+                    } else {\n+                        match delim {\n+                            token::Brace => {\n+                                // The delimiter is `{`.  This indicates the beginning\n+                                // of a meta-variable expression (e.g. `${count(ident)}`).\n+                                // Try to parse the meta-variable expression.\n+                                match MetaVarExpr::parse(&tts, delim_span.entire(), sess) {\n+                                    Err(mut err) => {\n+                                        err.emit();\n+                                        // Returns early the same read `$` to avoid spanning\n+                                        // unrelated diagnostics that could be performed afterwards\n+                                        return TokenTree::token(token::Dollar, span);\n+                                    }\n+                                    Ok(elem) => {\n+                                        maybe_emit_macro_metavar_expr_feature(\n+                                            features,\n+                                            sess,\n+                                            delim_span.entire(),\n+                                        );\n+                                        return TokenTree::MetaVarExpr(delim_span, elem);\n+                                    }\n+                                }\n+                            }\n+                            token::Paren => {}\n+                            _ => {\n+                                let tok = pprust::token_kind_to_string(&token::OpenDelim(delim));\n+                                let msg = format!(\"expected `(` or `{{`, found `{}`\", tok);\n+                                sess.span_diagnostic.span_err(delim_span.entire(), &msg);\n+                            }\n+                        }\n                     }\n-                    // Parse the contents of the sequence itself\n-                    let sequence = parse(tts, expect_matchers, sess, node_id, features, edition);\n+                    // If we didn't find a metavar expression above, then we must have a\n+                    // repetition sequence in the macro (e.g. `$(pat)*`).  Parse the\n+                    // contents of the sequence itself\n+                    let sequence = parse(tts, parsing_patterns, sess, node_id, features, edition);\n                     // Get the Kleene operator and optional separator\n                     let (separator, kleene) =\n-                        parse_sep_and_kleene_op(&mut trees, span.entire(), sess);\n+                        parse_sep_and_kleene_op(&mut trees, delim_span.entire(), sess);\n                     // Count the number of captured \"names\" (i.e., named metavars)\n                     let name_captures = macro_parser::count_names(&sequence);\n                     TokenTree::Sequence(\n-                        span,\n+                        delim_span,\n                         Lrc::new(SequenceRepetition {\n                             tts: sequence,\n                             separator,\n@@ -197,7 +237,20 @@ fn parse_tree(\n                     }\n                 }\n \n-                // `tree` is followed by a random token. This is an error.\n+                // `tree` is followed by another `$`. This is an escaped `$`.\n+                Some(tokenstream::TokenTree::Token(Token { kind: token::Dollar, span })) => {\n+                    if parsing_patterns {\n+                        span_dollar_dollar_or_metavar_in_the_lhs_err(\n+                            sess,\n+                            &Token { kind: token::Dollar, span },\n+                        );\n+                    } else {\n+                        maybe_emit_macro_metavar_expr_feature(features, sess, span);\n+                    }\n+                    TokenTree::token(token::Dollar, span)\n+                }\n+\n+                // `tree` is followed by some other token. This is an error.\n                 Some(tokenstream::TokenTree::Token(token)) => {\n                     let msg = format!(\n                         \"expected identifier, found `{}`\",\n@@ -221,7 +274,7 @@ fn parse_tree(\n             span,\n             Lrc::new(Delimited {\n                 delim,\n-                tts: parse(tts, expect_matchers, sess, node_id, features, edition),\n+                tts: parse(tts, parsing_patterns, sess, node_id, features, edition),\n             }),\n         ),\n     }\n@@ -309,3 +362,15 @@ fn parse_sep_and_kleene_op(\n     // Return a dummy\n     (None, KleeneToken::new(KleeneOp::ZeroOrMore, span))\n }\n+\n+// `$$` or a meta-variable is the lhs of a macro but shouldn't.\n+//\n+// For example, `macro_rules! foo { ( ${length()} ) => {} }`\n+fn span_dollar_dollar_or_metavar_in_the_lhs_err<'sess>(sess: &'sess ParseSess, token: &Token) {\n+    sess.span_diagnostic\n+        .span_err(token.span, &format!(\"unexpected token: {}\", pprust::token_to_string(token)));\n+    sess.span_diagnostic.span_note_without_error(\n+        token.span,\n+        \"`$$` and meta-variable expressions are not allowed inside macro parameter definitions\",\n+    );\n+}"}, {"sha": "b8d8394754134ca6f63417e0d35229ed039da1ff", "filename": "compiler/rustc_expand/src/mbe/transcribe.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -255,6 +255,11 @@ pub(super) fn transcribe<'a>(\n                 }\n             }\n \n+            // Replace meta-variable expressions with the result of their expansion.\n+            mbe::TokenTree::MetaVarExpr(sp, expr) => {\n+                transcribe_metavar_expr(cx, expr, interp, &repeats, &mut result, &sp)?;\n+            }\n+\n             // If we are entering a new delimiter, we push its contents to the `stack` to be\n             // processed, and we push all of the currently produced results to the `result_stack`.\n             // We will produce all of the results of the inside of the `Delimited` and then we will\n@@ -391,6 +396,28 @@ fn lockstep_iter_size(\n                 _ => LockstepIterSize::Unconstrained,\n             }\n         }\n+        TokenTree::MetaVarExpr(_, ref expr) => {\n+            let default_rslt = LockstepIterSize::Unconstrained;\n+            let Some(ident) = expr.ident() else { return default_rslt; };\n+            let name = MacroRulesNormalizedIdent::new(ident.clone());\n+            match lookup_cur_matched(name, interpolations, repeats) {\n+                Some(MatchedSeq(ref ads)) => {\n+                    default_rslt.with(LockstepIterSize::Constraint(ads.len(), name))\n+                }\n+                _ => default_rslt,\n+            }\n+        }\n         TokenTree::Token(..) => LockstepIterSize::Unconstrained,\n     }\n }\n+\n+fn transcribe_metavar_expr<'a>(\n+    _cx: &ExtCtxt<'a>,\n+    _expr: mbe::MetaVarExpr,\n+    _interp: &FxHashMap<MacroRulesNormalizedIdent, NamedMatch>,\n+    _repeats: &[(usize, usize)],\n+    _result: &mut Vec<TreeAndSpacing>,\n+    _sp: &DelimSpan,\n+) -> PResult<'a, ()> {\n+    Ok(())\n+}"}, {"sha": "ccd296c3da12777ddff835188e6eda5d9f9b5d1f", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -169,6 +169,8 @@ declare_features! (\n     (active, staged_api, \"1.0.0\", None, None),\n     /// Added for testing E0705; perma-unstable.\n     (active, test_2018_feature, \"1.31.0\", None, Some(Edition::Edition2018)),\n+    /// Added for testing unstable lints; perma-unstable.\n+    (active, test_unstable_lint, \"1.60.0\", None, None),\n     /// Allows non-`unsafe` \u2014and thus, unsound\u2014 access to `Pin` constructions.\n     /// Marked `incomplete` since perma-unstable and unsound.\n     (incomplete, unsafe_pin_internals, \"1.60.0\", None, None),\n@@ -428,6 +430,8 @@ declare_features! (\n     (active, link_cfg, \"1.14.0\", Some(37406), None),\n     /// Allows using `reason` in lint attributes and the `#[expect(lint)]` lint check.\n     (active, lint_reasons, \"1.31.0\", Some(54503), None),\n+    /// Give access to additional metadata about declarative macro meta-variables.\n+    (active, macro_metavar_expr, \"1.61.0\", Some(83527), None),\n     /// Allows `#[marker]` on certain traits allowing overlapping implementations.\n     (active, marker_trait_attr, \"1.30.0\", Some(29864), None),\n     /// A minimal, sound subset of specialization intended to be used by the"}, {"sha": "7b018e7f75fa7c3c947ad304983b95add0385891", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 72, "deletions": 44, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -17,7 +17,7 @@ use rustc_session::lint::{\n     builtin::{self, FORBIDDEN_LINT_GROUPS},\n     Level, Lint, LintExpectationId, LintId,\n };\n-use rustc_session::parse::feature_err;\n+use rustc_session::parse::{add_feature_diagnostics, feature_err};\n use rustc_session::Session;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{source_map::MultiSpan, Span, DUMMY_SP};\n@@ -93,10 +93,19 @@ impl<'s> LintLevelsBuilder<'s> {\n         self.store\n     }\n \n+    fn current_specs(&self) -> &FxHashMap<LintId, LevelAndSource> {\n+        &self.sets.list[self.cur].specs\n+    }\n+\n+    fn current_specs_mut(&mut self) -> &mut FxHashMap<LintId, LevelAndSource> {\n+        &mut self.sets.list[self.cur].specs\n+    }\n+\n     fn process_command_line(&mut self, sess: &Session, store: &LintStore) {\n-        let mut specs = FxHashMap::default();\n         self.sets.lint_cap = sess.opts.lint_cap.unwrap_or(Level::Forbid);\n \n+        self.cur =\n+            self.sets.list.push(LintSet { specs: FxHashMap::default(), parent: COMMAND_LINE });\n         for &(ref lint_name, level) in &sess.opts.lint_opts {\n             store.check_lint_name_cmdline(sess, &lint_name, level, self.registered_tools);\n             let orig_level = level;\n@@ -108,30 +117,24 @@ impl<'s> LintLevelsBuilder<'s> {\n             };\n             for id in ids {\n                 // ForceWarn and Forbid cannot be overriden\n-                if let Some((Level::ForceWarn | Level::Forbid, _)) = specs.get(&id) {\n+                if let Some((Level::ForceWarn | Level::Forbid, _)) = self.current_specs().get(&id) {\n                     continue;\n                 }\n \n-                self.check_gated_lint(id, DUMMY_SP);\n-                let src = LintLevelSource::CommandLine(lint_flag_val, orig_level);\n-                specs.insert(id, (level, src));\n+                if self.check_gated_lint(id, DUMMY_SP) {\n+                    let src = LintLevelSource::CommandLine(lint_flag_val, orig_level);\n+                    self.current_specs_mut().insert(id, (level, src));\n+                }\n             }\n         }\n-\n-        self.cur = self.sets.list.push(LintSet { specs, parent: COMMAND_LINE });\n     }\n \n     /// Attempts to insert the `id` to `level_src` map entry. If unsuccessful\n     /// (e.g. if a forbid was already inserted on the same scope), then emits a\n     /// diagnostic with no change to `specs`.\n-    fn insert_spec(\n-        &mut self,\n-        specs: &mut FxHashMap<LintId, LevelAndSource>,\n-        id: LintId,\n-        (level, src): LevelAndSource,\n-    ) {\n+    fn insert_spec(&mut self, id: LintId, (level, src): LevelAndSource) {\n         let (old_level, old_src) =\n-            self.sets.get_lint_level(id.lint, self.cur, Some(&specs), &self.sess);\n+            self.sets.get_lint_level(id.lint, self.cur, Some(self.current_specs()), &self.sess);\n         // Setting to a non-forbid level is an error if the lint previously had\n         // a forbid level. Note that this is not necessarily true even with a\n         // `#[forbid(..)]` attribute present, as that is overriden by `--cap-lints`.\n@@ -154,7 +157,10 @@ impl<'s> LintLevelsBuilder<'s> {\n                 };\n                 debug!(\n                     \"fcw_warning={:?}, specs.get(&id) = {:?}, old_src={:?}, id_name={:?}\",\n-                    fcw_warning, specs, old_src, id_name\n+                    fcw_warning,\n+                    self.current_specs(),\n+                    old_src,\n+                    id_name\n                 );\n \n                 let decorate_diag = |diag: &mut Diagnostic| {\n@@ -213,9 +219,9 @@ impl<'s> LintLevelsBuilder<'s> {\n             }\n         }\n         if let Level::ForceWarn = old_level {\n-            specs.insert(id, (old_level, old_src));\n+            self.current_specs_mut().insert(id, (old_level, old_src));\n         } else {\n-            specs.insert(id, (level, src));\n+            self.current_specs_mut().insert(id, (level, src));\n         }\n     }\n \n@@ -239,7 +245,9 @@ impl<'s> LintLevelsBuilder<'s> {\n         is_crate_node: bool,\n         source_hir_id: Option<HirId>,\n     ) -> BuilderPush {\n-        let mut specs = FxHashMap::default();\n+        let prev = self.cur;\n+        self.cur = self.sets.list.push(LintSet { specs: FxHashMap::default(), parent: prev });\n+\n         let sess = self.sess;\n         let bad_attr = |span| struct_span_err!(sess, span, E0452, \"malformed lint attribute input\");\n         for (attr_index, attr) in attrs.iter().enumerate() {\n@@ -348,8 +356,9 @@ impl<'s> LintLevelsBuilder<'s> {\n                             reason,\n                         );\n                         for &id in *ids {\n-                            self.check_gated_lint(id, attr.span);\n-                            self.insert_spec(&mut specs, id, (level, src));\n+                            if self.check_gated_lint(id, attr.span) {\n+                                self.insert_spec(id, (level, src));\n+                            }\n                         }\n                         if let Level::Expect(expect_id) = level {\n                             self.lint_expectations\n@@ -368,7 +377,7 @@ impl<'s> LintLevelsBuilder<'s> {\n                                     reason,\n                                 );\n                                 for id in ids {\n-                                    self.insert_spec(&mut specs, *id, (level, src));\n+                                    self.insert_spec(*id, (level, src));\n                                 }\n                                 if let Level::Expect(expect_id) = level {\n                                     self.lint_expectations\n@@ -377,8 +386,12 @@ impl<'s> LintLevelsBuilder<'s> {\n                             }\n                             Err((Some(ids), ref new_lint_name)) => {\n                                 let lint = builtin::RENAMED_AND_REMOVED_LINTS;\n-                                let (lvl, src) =\n-                                    self.sets.get_lint_level(lint, self.cur, Some(&specs), &sess);\n+                                let (lvl, src) = self.sets.get_lint_level(\n+                                    lint,\n+                                    self.cur,\n+                                    Some(self.current_specs()),\n+                                    &sess,\n+                                );\n                                 struct_lint_level(\n                                     self.sess,\n                                     lint,\n@@ -408,7 +421,7 @@ impl<'s> LintLevelsBuilder<'s> {\n                                     reason,\n                                 );\n                                 for id in ids {\n-                                    self.insert_spec(&mut specs, *id, (level, src));\n+                                    self.insert_spec(*id, (level, src));\n                                 }\n                                 if let Level::Expect(expect_id) = level {\n                                     self.lint_expectations\n@@ -448,8 +461,12 @@ impl<'s> LintLevelsBuilder<'s> {\n \n                     CheckLintNameResult::Warning(msg, renamed) => {\n                         let lint = builtin::RENAMED_AND_REMOVED_LINTS;\n-                        let (renamed_lint_level, src) =\n-                            self.sets.get_lint_level(lint, self.cur, Some(&specs), &sess);\n+                        let (renamed_lint_level, src) = self.sets.get_lint_level(\n+                            lint,\n+                            self.cur,\n+                            Some(self.current_specs()),\n+                            &sess,\n+                        );\n                         struct_lint_level(\n                             self.sess,\n                             lint,\n@@ -472,8 +489,12 @@ impl<'s> LintLevelsBuilder<'s> {\n                     }\n                     CheckLintNameResult::NoLint(suggestion) => {\n                         let lint = builtin::UNKNOWN_LINTS;\n-                        let (level, src) =\n-                            self.sets.get_lint_level(lint, self.cur, Some(&specs), self.sess);\n+                        let (level, src) = self.sets.get_lint_level(\n+                            lint,\n+                            self.cur,\n+                            Some(self.current_specs()),\n+                            self.sess,\n+                        );\n                         struct_lint_level(self.sess, lint, level, src, Some(sp.into()), |lint| {\n                             let name = if let Some(tool_ident) = tool_ident {\n                                 format!(\"{}::{}\", tool_ident.name, name)\n@@ -504,8 +525,9 @@ impl<'s> LintLevelsBuilder<'s> {\n                     {\n                         let src = LintLevelSource::Node(Symbol::intern(&new_name), sp, reason);\n                         for &id in ids {\n-                            self.check_gated_lint(id, attr.span);\n-                            self.insert_spec(&mut specs, id, (level, src));\n+                            if self.check_gated_lint(id, attr.span) {\n+                                self.insert_spec(id, (level, src));\n+                            }\n                         }\n                         if let Level::Expect(expect_id) = level {\n                             self.lint_expectations\n@@ -519,7 +541,7 @@ impl<'s> LintLevelsBuilder<'s> {\n         }\n \n         if !is_crate_node {\n-            for (id, &(level, ref src)) in specs.iter() {\n+            for (id, &(level, ref src)) in self.current_specs().iter() {\n                 if !id.lint.crate_level_only {\n                     continue;\n                 }\n@@ -530,7 +552,7 @@ impl<'s> LintLevelsBuilder<'s> {\n \n                 let lint = builtin::UNUSED_ATTRIBUTES;\n                 let (lint_level, lint_src) =\n-                    self.sets.get_lint_level(lint, self.cur, Some(&specs), self.sess);\n+                    self.sets.get_lint_level(lint, self.cur, Some(self.current_specs()), self.sess);\n                 struct_lint_level(\n                     self.sess,\n                     lint,\n@@ -551,9 +573,9 @@ impl<'s> LintLevelsBuilder<'s> {\n             }\n         }\n \n-        let prev = self.cur;\n-        if !specs.is_empty() {\n-            self.cur = self.sets.list.push(LintSet { specs, parent: prev });\n+        if self.current_specs().is_empty() {\n+            self.sets.list.pop();\n+            self.cur = prev;\n         }\n \n         BuilderPush { prev, changed: prev != self.cur }\n@@ -574,18 +596,24 @@ impl<'s> LintLevelsBuilder<'s> {\n     }\n \n     /// Checks if the lint is gated on a feature that is not enabled.\n-    fn check_gated_lint(&self, lint_id: LintId, span: Span) {\n+    ///\n+    /// Returns `true` if the lint's feature is enabled.\n+    fn check_gated_lint(&self, lint_id: LintId, span: Span) -> bool {\n         if let Some(feature) = lint_id.lint.feature_gate {\n             if !self.sess.features_untracked().enabled(feature) {\n-                feature_err(\n-                    &self.sess.parse_sess,\n-                    feature,\n-                    span,\n-                    &format!(\"the `{}` lint is unstable\", lint_id.lint.name_lower()),\n-                )\n-                .emit();\n+                let lint = builtin::UNKNOWN_LINTS;\n+                let (level, src) = self.lint_level(builtin::UNKNOWN_LINTS);\n+                struct_lint_level(self.sess, lint, level, src, Some(span.into()), |lint_db| {\n+                    let mut db =\n+                        lint_db.build(&format!(\"unknown lint: `{}`\", lint_id.lint.name_lower()));\n+                    db.note(&format!(\"the `{}` lint is unstable\", lint_id.lint.name_lower(),));\n+                    add_feature_diagnostics(&mut db, &self.sess.parse_sess, feature);\n+                    db.emit();\n+                });\n+                return false;\n             }\n         }\n+        true\n     }\n \n     /// Called after `push` when the scope of a set of attributes are exited."}, {"sha": "8539e8868e2c7aa0df9ab3388bfa6d230ab00c97", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -3128,6 +3128,7 @@ declare_lint_pass! {\n         SUSPICIOUS_AUTO_TRAIT_IMPLS,\n         UNEXPECTED_CFGS,\n         DEPRECATED_WHERE_CLAUSE_LOCATION,\n+        TEST_UNSTABLE_LINT,\n     ]\n }\n \n@@ -3399,7 +3400,7 @@ declare_lint! {\n     ///     //                  ^^^^^^^^\n     ///     // This call to try_into matches both Foo:try_into and TryInto::try_into as\n     ///     // `TryInto` has been added to the Rust prelude in 2021 edition.\n-    ///     println!(\"{}\", x);\n+    ///     println!(\"{x}\");\n     /// }\n     /// ```\n     ///\n@@ -3771,3 +3772,25 @@ declare_lint! {\n     Warn,\n     \"deprecated where clause location\"\n }\n+\n+declare_lint! {\n+    /// The `test_unstable_lint` lint tests unstable lints and is perma-unstable.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```\n+    /// #![allow(test_unstable_lint)]\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// In order to test the behavior of unstable lints, a permanently-unstable\n+    /// lint is required. This lint can be used to trigger warnings and errors\n+    /// from the compiler related to unstable lints.\n+    pub TEST_UNSTABLE_LINT,\n+    Deny,\n+    \"this unstable lint is only for testing\",\n+    @feature_gate = sym::test_unstable_lint;\n+}"}, {"sha": "65a60dd6b9d7b70ffdc8d36750f0c95fa30f65ef", "filename": "compiler/rustc_middle/src/ty/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -281,7 +281,7 @@ pub struct CaptureInfo {\n     /// let mut t = (0,1);\n     ///\n     /// let c = || {\n-    ///     println!(\"{}\",t); // L1\n+    ///     println!(\"{t}\"); // L1\n     ///     t.1 = 4; // L2\n     /// };\n     /// ```"}, {"sha": "d34a3360a83e215a0621fa36f49742fac19e6454", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -98,7 +98,26 @@ pub fn feature_err_issue<'a>(\n     explain: &str,\n ) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n     let mut err = sess.span_diagnostic.struct_span_err_with_code(span, explain, error_code!(E0658));\n+    add_feature_diagnostics_for_issue(&mut err, sess, feature, issue);\n+    err\n+}\n+\n+/// Adds the diagnostics for a feature to an existing error.\n+pub fn add_feature_diagnostics<'a>(err: &mut Diagnostic, sess: &'a ParseSess, feature: Symbol) {\n+    add_feature_diagnostics_for_issue(err, sess, feature, GateIssue::Language);\n+}\n \n+/// Adds the diagnostics for a feature to an existing error.\n+///\n+/// This variant allows you to control whether it is a library or language feature.\n+/// Almost always, you want to use this for a language feature. If so, prefer\n+/// `add_feature_diagnostics`.\n+pub fn add_feature_diagnostics_for_issue<'a>(\n+    err: &mut Diagnostic,\n+    sess: &'a ParseSess,\n+    feature: Symbol,\n+    issue: GateIssue,\n+) {\n     if let Some(n) = find_feature_issue(feature, issue) {\n         err.note(&format!(\n             \"see issue #{} <https://github.com/rust-lang/rust/issues/{}> for more information\",\n@@ -110,8 +129,6 @@ pub fn feature_err_issue<'a>(\n     if sess.unstable_features.is_nightly_build() {\n         err.help(&format!(\"add `#![feature({})]` to the crate attributes to enable\", feature));\n     }\n-\n-    err\n }\n \n /// Info about a parsing session."}, {"sha": "967eb3cc22a90e2360d0e123cc4f08594b715bb2", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -846,6 +846,7 @@ symbols! {\n         macro_export,\n         macro_lifetime_matcher,\n         macro_literal_matcher,\n+        macro_metavar_expr,\n         macro_reexport,\n         macro_use,\n         macro_vis_matcher,\n@@ -1385,6 +1386,7 @@ symbols! {\n         test_case,\n         test_removed_feature,\n         test_runner,\n+        test_unstable_lint,\n         then_with,\n         thread,\n         thread_local,"}, {"sha": "a2c79c6903218b1c473a200a4cc2621d9d45994f", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -458,10 +458,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// let s: String;  // hir_id_s\n     /// let mut p: Point; // his_id_p\n     /// let c = || {\n-    ///        println!(\"{}\", s);  // L1\n+    ///        println!(\"{s}\");  // L1\n     ///        p.x += 10;  // L2\n-    ///        println!(\"{}\" , p.y) // L3\n-    ///        println!(\"{}\", p) // L4\n+    ///        println!(\"{}\" , p.y); // L3\n+    ///        println!(\"{p}\"); // L4\n     ///        drop(s);   // L5\n     /// };\n     /// ```"}, {"sha": "bd7d721b5e17332a7560ba95d306939a86cd65b3", "filename": "library/alloc/src/alloc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Falloc%2Fsrc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Falloc%2Fsrc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Falloc.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -397,7 +397,7 @@ pub mod __alloc_error_handler {\n     // if there is no `#[alloc_error_handler]`\n     #[rustc_std_internal_symbol]\n     pub unsafe extern \"C-unwind\" fn __rdl_oom(size: usize, _align: usize) -> ! {\n-        panic!(\"memory allocation of {} bytes failed\", size)\n+        panic!(\"memory allocation of {size} bytes failed\")\n     }\n \n     // if there is an `#[alloc_error_handler]`"}, {"sha": "8b13e36c4b3c7e342a45d403b0ef901f3dd80c0c", "filename": "library/alloc/src/borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Falloc%2Fsrc%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Falloc%2Fsrc%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fborrow.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -161,7 +161,7 @@ where\n /// let readonly = [1, 2];\n /// let borrowed = Items::new((&readonly[..]).into());\n /// match borrowed {\n-///     Items { values: Cow::Borrowed(b) } => println!(\"borrowed {:?}\", b),\n+///     Items { values: Cow::Borrowed(b) } => println!(\"borrowed {b:?}\"),\n ///     _ => panic!(\"expect borrowed value\"),\n /// }\n ///"}, {"sha": "7dce3db0a4766a61751761150562ca77bda0023d", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -31,7 +31,7 @@\n //! }\n //!\n //! let list: List<i32> = List::Cons(1, Box::new(List::Cons(2, Box::new(List::Nil))));\n-//! println!(\"{:?}\", list);\n+//! println!(\"{list:?}\");\n //! ```\n //!\n //! This will print `Cons(1, Cons(2, Nil))`.\n@@ -1407,7 +1407,7 @@ impl<T: Copy> From<&[T]> for Box<[T]> {\n     /// let slice: &[u8] = &[104, 101, 108, 108, 111];\n     /// let boxed_slice: Box<[u8]> = Box::from(slice);\n     ///\n-    /// println!(\"{:?}\", boxed_slice);\n+    /// println!(\"{boxed_slice:?}\");\n     /// ```\n     fn from(slice: &[T]) -> Box<[T]> {\n         let len = slice.len();\n@@ -1449,7 +1449,7 @@ impl From<&str> for Box<str> {\n     ///\n     /// ```rust\n     /// let boxed: Box<str> = Box::from(\"hello\");\n-    /// println!(\"{}\", boxed);\n+    /// println!(\"{boxed}\");\n     /// ```\n     #[inline]\n     fn from(s: &str) -> Box<str> {\n@@ -1474,14 +1474,14 @@ impl From<Cow<'_, str>> for Box<str> {\n     ///\n     /// let unboxed = Cow::Borrowed(\"hello\");\n     /// let boxed: Box<str> = Box::from(unboxed);\n-    /// println!(\"{}\", boxed);\n+    /// println!(\"{boxed}\");\n     /// ```\n     ///\n     /// ```rust\n     /// # use std::borrow::Cow;\n     /// let unboxed = Cow::Owned(\"hello\".to_string());\n     /// let boxed: Box<str> = Box::from(unboxed);\n-    /// println!(\"{}\", boxed);\n+    /// println!(\"{boxed}\");\n     /// ```\n     #[inline]\n     fn from(cow: Cow<'_, str>) -> Box<str> {\n@@ -1528,7 +1528,7 @@ impl<T, const N: usize> From<[T; N]> for Box<[T]> {\n     ///\n     /// ```rust\n     /// let boxed: Box<[u8]> = Box::from([4, 2]);\n-    /// println!(\"{:?}\", boxed);\n+    /// println!(\"{boxed:?}\");\n     /// ```\n     fn from(array: [T; N]) -> Box<[T]> {\n         box array"}, {"sha": "43fa612de6c5031ed2d25ca0ac798863df75cdee", "filename": "library/alloc/src/collections/binary_heap.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -194,7 +194,7 @@ use super::SpecExtend;\n /// // We can iterate over the items in the heap, although they are returned in\n /// // a random order.\n /// for x in &heap {\n-///     println!(\"{}\", x);\n+///     println!(\"{x}\");\n /// }\n ///\n /// // If we instead pop these scores, they should come back in order.\n@@ -830,7 +830,7 @@ impl<T> BinaryHeap<T> {\n     ///\n     /// // Print 1, 2, 3, 4 in arbitrary order\n     /// for x in heap.iter() {\n-    ///     println!(\"{}\", x);\n+    ///     println!(\"{x}\");\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1110,7 +1110,7 @@ impl<T> BinaryHeap<T> {\n     ///\n     /// // Will print in some order\n     /// for x in vec {\n-    ///     println!(\"{}\", x);\n+    ///     println!(\"{x}\");\n     /// }\n     /// ```\n     #[must_use = \"`self` will be dropped if the result is not used\"]\n@@ -1179,7 +1179,7 @@ impl<T> BinaryHeap<T> {\n     /// assert!(!heap.is_empty());\n     ///\n     /// for x in heap.drain() {\n-    ///     println!(\"{}\", x);\n+    ///     println!(\"{x}\");\n     /// }\n     ///\n     /// assert!(heap.is_empty());\n@@ -1624,7 +1624,7 @@ impl<T> IntoIterator for BinaryHeap<T> {\n     /// // Print 1, 2, 3, 4 in arbitrary order\n     /// for x in heap.into_iter() {\n     ///     // x has type i32, not &i32\n-    ///     println!(\"{}\", x);\n+    ///     println!(\"{x}\");\n     /// }\n     /// ```\n     fn into_iter(self) -> IntoIter<T> {"}, {"sha": "6d00642e03b229033eb4bc463b1037095ceecabb", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -104,8 +104,8 @@ pub(super) const MIN_LEN: usize = node::MIN_LEN_AFTER_SPLIT;\n /// let to_find = [\"Up!\", \"Office Space\"];\n /// for movie in &to_find {\n ///     match movie_reviews.get(movie) {\n-///        Some(review) => println!(\"{}: {}\", movie, review),\n-///        None => println!(\"{} is unreviewed.\", movie)\n+///        Some(review) => println!(\"{movie}: {review}\"),\n+///        None => println!(\"{movie} is unreviewed.\")\n ///     }\n /// }\n ///\n@@ -114,7 +114,7 @@ pub(super) const MIN_LEN: usize = node::MIN_LEN_AFTER_SPLIT;\n ///\n /// // iterate over everything.\n /// for (movie, review) in &movie_reviews {\n-///     println!(\"{}: \\\"{}\\\"\", movie, review);\n+///     println!(\"{movie}: \\\"{review}\\\"\");\n /// }\n /// ```\n ///\n@@ -1061,7 +1061,7 @@ impl<K, V> BTreeMap<K, V> {\n     /// map.insert(5, \"b\");\n     /// map.insert(8, \"c\");\n     /// for (&key, &value) in map.range((Included(&4), Included(&8))) {\n-    ///     println!(\"{}: {}\", key, value);\n+    ///     println!(\"{key}: {value}\");\n     /// }\n     /// assert_eq!(Some((&5, &\"b\")), map.range(4..).next());\n     /// ```\n@@ -1104,7 +1104,7 @@ impl<K, V> BTreeMap<K, V> {\n     ///     *balance += 100;\n     /// }\n     /// for (name, balance) in &map {\n-    ///     println!(\"{} => {}\", name, balance);\n+    ///     println!(\"{name} => {balance}\");\n     /// }\n     /// ```\n     #[stable(feature = \"btree_range\", since = \"1.17.0\")]\n@@ -2088,7 +2088,7 @@ impl<K, V> BTreeMap<K, V> {\n     /// map.insert(1, \"a\");\n     ///\n     /// for (key, value) in map.iter() {\n-    ///     println!(\"{}: {}\", key, value);\n+    ///     println!(\"{key}: {value}\");\n     /// }\n     ///\n     /// let (first_key, first_value) = map.iter().next().unwrap();"}, {"sha": "4d21df32417248a81867d53a13712e3edb337680", "filename": "library/alloc/src/collections/btree/map/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -1758,7 +1758,7 @@ fn test_ord_absence() {\n     }\n \n     fn map_debug<K: Debug>(mut map: BTreeMap<K, ()>) {\n-        format!(\"{:?}\", map);\n+        format!(\"{map:?}\");\n         format!(\"{:?}\", map.iter());\n         format!(\"{:?}\", map.iter_mut());\n         format!(\"{:?}\", map.keys());"}, {"sha": "405833720b37cf9644a86a73bd083bf1d14b989e", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -60,7 +60,7 @@ use super::Recover;\n ///\n /// // Iterate over everything.\n /// for book in &books {\n-///     println!(\"{}\", book);\n+///     println!(\"{book}\");\n /// }\n /// ```\n ///\n@@ -284,7 +284,7 @@ impl<T> BTreeSet<T> {\n     /// set.insert(5);\n     /// set.insert(8);\n     /// for &elem in set.range((Included(&4), Included(&8))) {\n-    ///     println!(\"{}\", elem);\n+    ///     println!(\"{elem}\");\n     /// }\n     /// assert_eq!(Some(&5), set.range(4..).next());\n     /// ```"}, {"sha": "032563e4f09beb028258f8424e1011a34624f648", "filename": "library/alloc/src/collections/btree/set/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset%2Ftests.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -431,10 +431,10 @@ fn test_show() {\n     set.insert(1);\n     set.insert(2);\n \n-    let set_str = format!(\"{:?}\", set);\n+    let set_str = format!(\"{set:?}\");\n \n     assert_eq!(set_str, \"{1, 2}\");\n-    assert_eq!(format!(\"{:?}\", empty), \"{}\");\n+    assert_eq!(format!(\"{empty:?}\"), \"{}\");\n }\n \n #[test]\n@@ -649,7 +649,7 @@ fn test_ord_absence() {\n     }\n \n     fn set_debug<K: Debug>(set: BTreeSet<K>) {\n-        format!(\"{:?}\", set);\n+        format!(\"{set:?}\");\n         format!(\"{:?}\", set.iter());\n         format!(\"{:?}\", set.into_iter());\n     }"}, {"sha": "501a6353b2c97ae9797ce572e5997ffd0ba0b5d0", "filename": "library/alloc/src/fmt.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Falloc%2Fsrc%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Falloc%2Fsrc%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Ffmt.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -416,9 +416,9 @@\n //! fn main() {\n //!     let myvector = Vector2D { x: 3, y: 4 };\n //!\n-//!     println!(\"{}\", myvector);       // => \"(3, 4)\"\n-//!     println!(\"{:?}\", myvector);     // => \"Vector2D {x: 3, y:4}\"\n-//!     println!(\"{:10.3b}\", myvector); // => \"     5.000\"\n+//!     println!(\"{myvector}\");       // => \"(3, 4)\"\n+//!     println!(\"{myvector:?}\");     // => \"Vector2D {x: 3, y:4}\"\n+//!     println!(\"{myvector:10.3b}\"); // => \"     5.000\"\n //! }\n //! ```\n //!"}, {"sha": "d7c28f8063337f3d4ac78b67f2aa99050e32c3e0", "filename": "library/alloc/src/rc/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Falloc%2Fsrc%2Frc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Falloc%2Fsrc%2Frc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc%2Ftests.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -309,7 +309,7 @@ fn test_cowrc_clone_weak() {\n #[test]\n fn test_show() {\n     let foo = Rc::new(75);\n-    assert_eq!(format!(\"{:?}\", foo), \"75\");\n+    assert_eq!(format!(\"{foo:?}\"), \"75\");\n }\n \n #[test]\n@@ -324,7 +324,7 @@ fn test_maybe_thin_unsized() {\n     use std::ffi::{CStr, CString};\n \n     let x: Rc<CStr> = Rc::from(CString::new(\"swordfish\").unwrap().into_boxed_c_str());\n-    assert_eq!(format!(\"{:?}\", x), \"\\\"swordfish\\\"\");\n+    assert_eq!(format!(\"{x:?}\"), \"\\\"swordfish\\\"\");\n     let y: Weak<CStr> = Rc::downgrade(&x);\n     drop(x);\n \n@@ -451,7 +451,7 @@ fn test_from_box_trait_zero_sized() {\n     let b: Box<dyn Debug> = box ();\n     let r: Rc<dyn Debug> = Rc::from(b);\n \n-    assert_eq!(format!(\"{:?}\", r), \"()\");\n+    assert_eq!(format!(\"{r:?}\"), \"()\");\n }\n \n #[test]"}, {"sha": "f52871c73d9fcf6c4cf24a68ebee822417d47a0c", "filename": "library/alloc/src/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Falloc%2Fsrc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Falloc%2Fsrc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fslice.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -48,7 +48,7 @@\n //! ```\n //! let numbers = &[0, 1, 2];\n //! for n in numbers {\n-//!     println!(\"{} is a number!\", n);\n+//!     println!(\"{n} is a number!\");\n //! }\n //! ```\n //!"}, {"sha": "71419c151968d34b84026746fab18a130325ce42", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -2718,7 +2718,7 @@ impl From<String> for Vec<u8> {\n     /// let v1 = Vec::from(s1);\n     ///\n     /// for b in v1 {\n-    ///     println!(\"{}\", b);\n+    ///     println!(\"{b}\");\n     /// }\n     /// ```\n     fn from(string: String) -> Vec<u8> {"}, {"sha": "2140c3f168d1c3a75b2b413e6755d9fd1a9765f6", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -200,7 +200,7 @@ macro_rules! acquire {\n ///     let five = Arc::clone(&five);\n ///\n ///     thread::spawn(move || {\n-///         println!(\"{:?}\", five);\n+///         println!(\"{five:?}\");\n ///     });\n /// }\n /// ```\n@@ -221,7 +221,7 @@ macro_rules! acquire {\n ///\n ///     thread::spawn(move || {\n ///         let v = val.fetch_add(1, Ordering::SeqCst);\n-///         println!(\"{:?}\", v);\n+///         println!(\"{v:?}\");\n ///     });\n /// }\n /// ```"}, {"sha": "452a88773018c0455a18b88c19fb0181e919c705", "filename": "library/alloc/src/sync/tests.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Falloc%2Fsrc%2Fsync%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Falloc%2Fsrc%2Fsync%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync%2Ftests.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -335,7 +335,7 @@ fn test_weak_count() {\n #[test]\n fn show_arc() {\n     let a = Arc::new(5);\n-    assert_eq!(format!(\"{:?}\", a), \"5\");\n+    assert_eq!(format!(\"{a:?}\"), \"5\");\n }\n \n // Make sure deriving works with Arc<T>\n@@ -347,7 +347,7 @@ struct Foo {\n #[test]\n fn test_unsized() {\n     let x: Arc<[i32]> = Arc::new([1, 2, 3]);\n-    assert_eq!(format!(\"{:?}\", x), \"[1, 2, 3]\");\n+    assert_eq!(format!(\"{x:?}\"), \"[1, 2, 3]\");\n     let y = Arc::downgrade(&x.clone());\n     drop(x);\n     assert!(y.upgrade().is_none());\n@@ -359,7 +359,7 @@ fn test_maybe_thin_unsized() {\n     use std::ffi::{CStr, CString};\n \n     let x: Arc<CStr> = Arc::from(CString::new(\"swordfish\").unwrap().into_boxed_c_str());\n-    assert_eq!(format!(\"{:?}\", x), \"\\\"swordfish\\\"\");\n+    assert_eq!(format!(\"{x:?}\"), \"\\\"swordfish\\\"\");\n     let y: Weak<CStr> = Arc::downgrade(&x);\n     drop(x);\n \n@@ -509,7 +509,7 @@ fn test_from_box_trait_zero_sized() {\n     let b: Box<dyn Debug> = box ();\n     let r: Arc<dyn Debug> = Arc::from(b);\n \n-    assert_eq!(format!(\"{:?}\", r), \"()\");\n+    assert_eq!(format!(\"{r:?}\"), \"()\");\n }\n \n #[test]"}, {"sha": "299ed156a5d2706da9bbda653f2c2a49226e25f8", "filename": "library/alloc/src/tests.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Falloc%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Falloc%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Ftests.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -47,18 +47,18 @@ fn any_move() {\n fn test_show() {\n     let a = Box::new(8) as Box<dyn Any>;\n     let b = Box::new(Test) as Box<dyn Any>;\n-    let a_str = format!(\"{:?}\", a);\n-    let b_str = format!(\"{:?}\", b);\n+    let a_str = format!(\"{a:?}\");\n+    let b_str = format!(\"{b:?}\");\n     assert_eq!(a_str, \"Any { .. }\");\n     assert_eq!(b_str, \"Any { .. }\");\n \n     static EIGHT: usize = 8;\n     static TEST: Test = Test;\n     let a = &EIGHT as &dyn Any;\n     let b = &TEST as &dyn Any;\n-    let s = format!(\"{:?}\", a);\n+    let s = format!(\"{a:?}\");\n     assert_eq!(s, \"Any { .. }\");\n-    let s = format!(\"{:?}\", b);\n+    let s = format!(\"{b:?}\");\n     assert_eq!(s, \"Any { .. }\");\n }\n "}, {"sha": "32590a2996c0113e3934887dc3b6bfa5c289c741", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -169,7 +169,7 @@ mod spec_extend;\n /// vec.extend([1, 2, 3].iter().copied());\n ///\n /// for x in &vec {\n-///     println!(\"{}\", x);\n+///     println!(\"{x}\");\n /// }\n /// assert_eq!(vec, [7, 1, 2, 3]);\n /// ```\n@@ -211,7 +211,7 @@ mod spec_extend;\n ///\n /// while let Some(top) = stack.pop() {\n ///     // Prints 3, 2, 1\n-///     println!(\"{}\", top);\n+///     println!(\"{top}\");\n /// }\n /// ```\n ///\n@@ -1297,7 +1297,7 @@ impl<T, A: Allocator> Vec<T, A> {\n         #[cold]\n         #[inline(never)]\n         fn assert_failed(index: usize, len: usize) -> ! {\n-            panic!(\"swap_remove index (is {}) should be < len (is {})\", index, len);\n+            panic!(\"swap_remove index (is {index}) should be < len (is {len})\");\n         }\n \n         let len = self.len();\n@@ -1338,7 +1338,7 @@ impl<T, A: Allocator> Vec<T, A> {\n         #[cold]\n         #[inline(never)]\n         fn assert_failed(index: usize, len: usize) -> ! {\n-            panic!(\"insertion index (is {}) should be <= len (is {})\", index, len);\n+            panic!(\"insertion index (is {index}) should be <= len (is {len})\");\n         }\n \n         let len = self.len();\n@@ -1397,7 +1397,7 @@ impl<T, A: Allocator> Vec<T, A> {\n         #[inline(never)]\n         #[track_caller]\n         fn assert_failed(index: usize, len: usize) -> ! {\n-            panic!(\"removal index (is {}) should be < len (is {})\", index, len);\n+            panic!(\"removal index (is {index}) should be < len (is {len})\");\n         }\n \n         let len = self.len();\n@@ -1942,7 +1942,7 @@ impl<T, A: Allocator> Vec<T, A> {\n         #[cold]\n         #[inline(never)]\n         fn assert_failed(at: usize, len: usize) -> ! {\n-            panic!(\"`at` split index (is {}) should be <= len (is {})\", at, len);\n+            panic!(\"`at` split index (is {at}) should be <= len (is {len})\");\n         }\n \n         if at > self.len() {\n@@ -2568,7 +2568,7 @@ impl<T, A: Allocator> IntoIterator for Vec<T, A> {\n     /// let v = vec![\"a\".to_string(), \"b\".to_string()];\n     /// for s in v.into_iter() {\n     ///     // s has type String, not &String\n-    ///     println!(\"{}\", s);\n+    ///     println!(\"{s}\");\n     /// }\n     /// ```\n     #[inline]"}, {"sha": "1575a5999f932b688b91cfd24502b3a3e3dab5b3", "filename": "library/alloc/tests/fmt.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Falloc%2Ftests%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Falloc%2Ftests%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Ffmt.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -84,8 +84,8 @@ fn test_format_macro_interface() {\n     }\n     t!(format!(\"{:p}\", 0x1234 as *const isize), \"0x1234\");\n     t!(format!(\"{:p}\", 0x1234 as *mut isize), \"0x1234\");\n-    t!(format!(\"{:x}\", A), \"aloha\");\n-    t!(format!(\"{:X}\", B), \"adios\");\n+    t!(format!(\"{A:x}\"), \"aloha\");\n+    t!(format!(\"{B:X}\"), \"adios\");\n     t!(format!(\"foo {} \u2603\u2603\u2603\u2603\u2603\u2603\", \"bar\"), \"foo bar \u2603\u2603\u2603\u2603\u2603\u2603\");\n     t!(format!(\"{1} {0}\", 0, 1), \"1 0\");\n     t!(format!(\"{foo} {bar}\", foo = 0, bar = 1), \"0 1\");\n@@ -94,11 +94,11 @@ fn test_format_macro_interface() {\n     t!(format!(\"{_foo}\", _foo = 6usize), \"6\");\n     t!(format!(\"{foo_bar}\", foo_bar = 1), \"1\");\n     t!(format!(\"{}\", 5 + 5), \"10\");\n-    t!(format!(\"{:#4}\", C), \"\u2603123\");\n-    t!(format!(\"{:b}\", D), \"aa\u2603bb\");\n+    t!(format!(\"{C:#4}\"), \"\u2603123\");\n+    t!(format!(\"{D:b}\"), \"aa\u2603bb\");\n \n     let a: &dyn fmt::Debug = &1;\n-    t!(format!(\"{:?}\", a), \"1\");\n+    t!(format!(\"{a:?}\"), \"1\");\n \n     // Formatting strings and their arguments\n     t!(format!(\"{}\", \"a\"), \"a\");\n@@ -206,7 +206,7 @@ fn test_format_macro_interface() {\n     // Test that pointers don't get truncated.\n     {\n         let val = usize::MAX;\n-        let exp = format!(\"{:#x}\", val);\n+        let exp = format!(\"{val:#x}\");\n         t!(format!(\"{:p}\", val as *const isize), exp);\n     }\n \n@@ -216,14 +216,14 @@ fn test_format_macro_interface() {\n \n     // make sure that format! doesn't move out of local variables\n     let a = Box::new(3);\n-    format!(\"{}\", a);\n-    format!(\"{}\", a);\n+    format!(\"{a}\");\n+    format!(\"{a}\");\n \n     // make sure that format! doesn't cause spurious unused-unsafe warnings when\n     // it's inside of an outer unsafe block\n     unsafe {\n         let a: isize = ::std::mem::transmute(3_usize);\n-        format!(\"{}\", a);\n+        format!(\"{a}\");\n     }\n \n     // test that trailing commas are acceptable\n@@ -315,9 +315,9 @@ fn test_once() {\n #[test]\n fn test_refcell() {\n     let refcell = RefCell::new(5);\n-    assert_eq!(format!(\"{:?}\", refcell), \"RefCell { value: 5 }\");\n+    assert_eq!(format!(\"{refcell:?}\"), \"RefCell { value: 5 }\");\n     let borrow = refcell.borrow_mut();\n-    assert_eq!(format!(\"{:?}\", refcell), \"RefCell { value: <borrowed> }\");\n+    assert_eq!(format!(\"{refcell:?}\"), \"RefCell { value: <borrowed> }\");\n     drop(borrow);\n-    assert_eq!(format!(\"{:?}\", refcell), \"RefCell { value: 5 }\");\n+    assert_eq!(format!(\"{refcell:?}\"), \"RefCell { value: 5 }\");\n }"}, {"sha": "66a9cca6644c41481c65fb0521f5692e9baa0ca9", "filename": "library/alloc/tests/linked_list.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Falloc%2Ftests%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Falloc%2Ftests%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Flinked_list.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -302,10 +302,10 @@ fn test_ord_nan() {\n #[test]\n fn test_show() {\n     let list: LinkedList<_> = (0..10).collect();\n-    assert_eq!(format!(\"{:?}\", list), \"[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\");\n+    assert_eq!(format!(\"{list:?}\"), \"[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\");\n \n     let list: LinkedList<_> = [\"just\", \"one\", \"test\", \"more\"].into_iter().collect();\n-    assert_eq!(format!(\"{:?}\", list), \"[\\\"just\\\", \\\"one\\\", \\\"test\\\", \\\"more\\\"]\");\n+    assert_eq!(format!(\"{list:?}\"), \"[\\\"just\\\", \\\"one\\\", \\\"test\\\", \\\"more\\\"]\");\n }\n \n #[test]"}, {"sha": "b027a25a146bcf97b1dc61d3df2c4d96ebbab711", "filename": "library/alloc/tests/slice.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Falloc%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Falloc%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fslice.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -1045,10 +1045,10 @@ fn test_split_iterators_size_hint() {\n             a(v.rsplit_mut(p), b, \"rsplit_mut\");\n \n             for n in 0..=3 {\n-                a(v.splitn(n, p), b, f!(\"splitn, n = {}\", n));\n-                a(v.splitn_mut(n, p), b, f!(\"splitn_mut, n = {}\", n));\n-                a(v.rsplitn(n, p), b, f!(\"rsplitn, n = {}\", n));\n-                a(v.rsplitn_mut(n, p), b, f!(\"rsplitn_mut, n = {}\", n));\n+                a(v.splitn(n, p), b, f!(\"splitn, n = {n}\"));\n+                a(v.splitn_mut(n, p), b, f!(\"splitn_mut, n = {n}\"));\n+                a(v.rsplitn(n, p), b, f!(\"rsplitn, n = {n}\"));\n+                a(v.rsplitn_mut(n, p), b, f!(\"rsplitn_mut, n = {n}\"));\n             }\n         }\n     }\n@@ -1184,8 +1184,8 @@ fn test_show() {\n     macro_rules! test_show_vec {\n         ($x:expr, $x_str:expr) => {{\n             let (x, x_str) = ($x, $x_str);\n-            assert_eq!(format!(\"{:?}\", x), x_str);\n-            assert_eq!(format!(\"{:?}\", x), x_str);\n+            assert_eq!(format!(\"{x:?}\"), x_str);\n+            assert_eq!(format!(\"{x:?}\"), x_str);\n         }};\n     }\n     let empty = Vec::<i32>::new();"}, {"sha": "f3ed611acda5a6b69b7e822dba2f8cc21e6728d2", "filename": "library/alloc/tests/str.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Falloc%2Ftests%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Falloc%2Ftests%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fstr.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -1259,7 +1259,7 @@ fn test_chars_debug() {\n     let s = \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n     let c = s.chars();\n     assert_eq!(\n-        format!(\"{:?}\", c),\n+        format!(\"{c:?}\"),\n         r#\"Chars(['\u0e28', '\u0e44', '\u0e17', '\u0e22', '\u4e2d', '\u534e', 'V', 'i', '\u1ec7', 't', ' ', 'N', 'a', 'm'])\"#\n     );\n }\n@@ -1870,7 +1870,7 @@ mod pattern {\n         }\n \n         if let Some(err) = err {\n-            panic!(\"Input skipped range at {}\", err);\n+            panic!(\"Input skipped range at {err}\");\n         }\n \n         if first_index != haystack.len() {\n@@ -2187,10 +2187,10 @@ fn utf8() {\n     fn check_str_eq(a: String, b: String) {\n         let mut i: isize = 0;\n         for ab in a.bytes() {\n-            println!(\"{}\", i);\n-            println!(\"{}\", ab);\n+            println!(\"{i}\");\n+            println!(\"{ab}\");\n             let bb: u8 = b.as_bytes()[i as usize];\n-            println!(\"{}\", bb);\n+            println!(\"{bb}\");\n             assert_eq!(ab, bb);\n             i += 1;\n         }"}, {"sha": "b6836fdc88ee8e3f4586da3441b1167c35e31ece", "filename": "library/alloc/tests/string.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Falloc%2Ftests%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Falloc%2Ftests%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fstring.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -470,7 +470,7 @@ fn test_simple_types() {\n #[test]\n fn test_vectors() {\n     let x: Vec<i32> = vec![];\n-    assert_eq!(format!(\"{:?}\", x), \"[]\");\n+    assert_eq!(format!(\"{x:?}\"), \"[]\");\n     assert_eq!(format!(\"{:?}\", vec![1]), \"[1]\");\n     assert_eq!(format!(\"{:?}\", vec![1, 2, 3]), \"[1, 2, 3]\");\n     assert!(format!(\"{:?}\", vec![vec![], vec![1], vec![1, 1]]) == \"[[], [1], [1, 1]]\");\n@@ -871,6 +871,6 @@ fn test_from_char() {\n fn test_str_concat() {\n     let a: String = \"hello\".to_string();\n     let b: String = \"world\".to_string();\n-    let s: String = format!(\"{}{}\", a, b);\n+    let s: String = format!(\"{a}{b}\");\n     assert_eq!(s.as_bytes()[9], 'd' as u8);\n }"}, {"sha": "ca0fcc855c7b8d03e7ab110e10214cd7e3e5d20b", "filename": "library/alloc/tests/vec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Falloc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Falloc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fvec.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -100,7 +100,7 @@ fn test_debug_fmt() {\n     assert_eq!(\"[0, 1]\", format!(\"{:?}\", vec2));\n \n     let slice: &[isize] = &[4, 5];\n-    assert_eq!(\"[4, 5]\", format!(\"{:?}\", slice));\n+    assert_eq!(\"[4, 5]\", format!(\"{slice:?}\"));\n }\n \n #[test]\n@@ -918,7 +918,7 @@ fn test_into_iter_as_mut_slice() {\n fn test_into_iter_debug() {\n     let vec = vec!['a', 'b', 'c'];\n     let into_iter = vec.into_iter();\n-    let debug = format!(\"{:?}\", into_iter);\n+    let debug = format!(\"{into_iter:?}\");\n     assert_eq!(debug, \"IntoIter(['a', 'b', 'c'])\");\n }\n \n@@ -2336,7 +2336,7 @@ fn test_vec_dedup_panicking() {\n     let ok = vec.iter().zip(expected.iter()).all(|(x, y)| x.index == y.index);\n \n     if !ok {\n-        panic!(\"expected: {:?}\\ngot: {:?}\\n\", expected, vec);\n+        panic!(\"expected: {expected:?}\\ngot: {vec:?}\\n\");\n     }\n }\n "}, {"sha": "89cc7f905be2cb304ef72dbad88b8524a0ca6bcf", "filename": "library/alloc/tests/vec_deque.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Falloc%2Ftests%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Falloc%2Ftests%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fvec_deque.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -647,10 +647,10 @@ fn test_ord() {\n #[test]\n fn test_show() {\n     let ringbuf: VecDeque<_> = (0..10).collect();\n-    assert_eq!(format!(\"{:?}\", ringbuf), \"[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\");\n+    assert_eq!(format!(\"{ringbuf:?}\"), \"[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\");\n \n     let ringbuf: VecDeque<_> = vec![\"just\", \"one\", \"test\", \"more\"].iter().cloned().collect();\n-    assert_eq!(format!(\"{:?}\", ringbuf), \"[\\\"just\\\", \\\"one\\\", \\\"test\\\", \\\"more\\\"]\");\n+    assert_eq!(format!(\"{ringbuf:?}\"), \"[\\\"just\\\", \\\"one\\\", \\\"test\\\", \\\"more\\\"]\");\n }\n \n #[test]"}, {"sha": "32fd5e626bc1f1334e79728b50586fb538450daa", "filename": "library/core/benches/num/flt2dec/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fbenches%2Fnum%2Fflt2dec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fbenches%2Fnum%2Fflt2dec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fbenches%2Fnum%2Fflt2dec%2Fmod.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -12,7 +12,7 @@ use test::Bencher;\n pub fn decode_finite<T: DecodableFloat>(v: T) -> Decoded {\n     match decode(v).1 {\n         FullDecoded::Finite(decoded) => decoded,\n-        full_decoded => panic!(\"expected finite, got {:?} instead\", full_decoded),\n+        full_decoded => panic!(\"expected finite, got {full_decoded:?} instead\"),\n     }\n }\n "}, {"sha": "8e47a046cdea5fc330308a9f91160c4d57dd820b", "filename": "library/core/benches/num/flt2dec/strategy/grisu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fbenches%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fbenches%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fbenches%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -6,7 +6,7 @@ use test::Bencher;\n pub fn decode_finite<T: DecodableFloat>(v: T) -> Decoded {\n     match decode(v).1 {\n         FullDecoded::Finite(decoded) => decoded,\n-        full_decoded => panic!(\"expected finite, got {:?} instead\", full_decoded),\n+        full_decoded => panic!(\"expected finite, got {full_decoded:?} instead\"),\n     }\n }\n "}, {"sha": "3b15ab1e6895bfb84ff4e2fa10f65457e03d6282", "filename": "library/core/src/any.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fsrc%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fsrc%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fany.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -62,7 +62,7 @@\n //!             println!(\"String ({}): {}\", as_string.len(), as_string);\n //!         }\n //!         None => {\n-//!             println!(\"{:?}\", value);\n+//!             println!(\"{value:?}\");\n //!         }\n //!     }\n //! }"}, {"sha": "9dbb5eecd469bd64a659435009fe58f93bfb401e", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -85,7 +85,7 @@\n //!     // of scope then the subsequent borrow would cause a dynamic thread panic.\n //!     // This is the major hazard of using `RefCell`.\n //!     let total: i32 = shared_map.borrow().values().sum();\n-//!     println!(\"{}\", total);\n+//!     println!(\"{total}\");\n //! }\n //! ```\n //!"}, {"sha": "66de94d1b92dc220b4cbd317270bab06aac578f2", "filename": "library/core/src/char/methods.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -370,7 +370,7 @@ impl char {\n     ///\n     /// ```\n     /// for c in '\u2764'.escape_unicode() {\n-    ///     print!(\"{}\", c);\n+    ///     print!(\"{c}\");\n     /// }\n     /// println!();\n     /// ```\n@@ -448,7 +448,7 @@ impl char {\n     ///\n     /// ```\n     /// for c in '\\n'.escape_debug() {\n-    ///     print!(\"{}\", c);\n+    ///     print!(\"{c}\");\n     /// }\n     /// println!();\n     /// ```\n@@ -504,7 +504,7 @@ impl char {\n     ///\n     /// ```\n     /// for c in '\"'.escape_default() {\n-    ///     print!(\"{}\", c);\n+    ///     print!(\"{c}\");\n     /// }\n     /// println!();\n     /// ```\n@@ -949,7 +949,7 @@ impl char {\n     ///\n     /// ```\n     /// for c in '\u0130'.to_lowercase() {\n-    ///     print!(\"{}\", c);\n+    ///     print!(\"{c}\");\n     /// }\n     /// println!();\n     /// ```\n@@ -1016,7 +1016,7 @@ impl char {\n     ///\n     /// ```\n     /// for c in '\u00df'.to_uppercase() {\n-    ///     print!(\"{}\", c);\n+    ///     print!(\"{c}\");\n     /// }\n     /// println!();\n     /// ```"}, {"sha": "84cf1753f86ba90913dcf73bbee66b323722aa3a", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 46, "deletions": 46, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -64,7 +64,7 @@ pub mod rt {\n ///\n /// let pythagorean_triple = Triangle { a: 3.0, b: 4.0, c: 5.0 };\n ///\n-/// assert_eq!(format!(\"{}\", pythagorean_triple), \"(3, 4, 5)\");\n+/// assert_eq!(format!(\"{pythagorean_triple}\"), \"(3, 4, 5)\");\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub type Result = result::Result<(), Error>;\n@@ -174,7 +174,7 @@ pub trait Write {\n     /// use std::fmt::{Error, Write};\n     ///\n     /// fn writer<W: Write>(f: &mut W, s: &str) -> Result<(), Error> {\n-    ///     f.write_fmt(format_args!(\"{}\", s))\n+    ///     f.write_fmt(format_args!(\"{s}\"))\n     /// }\n     ///\n     /// let mut buf = String::new();\n@@ -562,7 +562,7 @@ impl Display for Arguments<'_> {\n ///\n /// let origin = Point { x: 0, y: 0 };\n ///\n-/// assert_eq!(format!(\"The origin is: {:?}\", origin), \"The origin is: Point { x: 0, y: 0 }\");\n+/// assert_eq!(format!(\"The origin is: {origin:?}\"), \"The origin is: Point { x: 0, y: 0 }\");\n /// ```\n ///\n /// Manually implementing:\n@@ -586,7 +586,7 @@ impl Display for Arguments<'_> {\n ///\n /// let origin = Point { x: 0, y: 0 };\n ///\n-/// assert_eq!(format!(\"The origin is: {:?}\", origin), \"The origin is: Point { x: 0, y: 0 }\");\n+/// assert_eq!(format!(\"The origin is: {origin:?}\"), \"The origin is: Point { x: 0, y: 0 }\");\n /// ```\n ///\n /// There are a number of helper methods on the [`Formatter`] struct to help you with manual\n@@ -627,7 +627,7 @@ impl Display for Arguments<'_> {\n ///\n /// let origin = Point { x: 0, y: 0 };\n ///\n-/// assert_eq!(format!(\"The origin is: {:#?}\", origin),\n+/// assert_eq!(format!(\"The origin is: {origin:#?}\"),\n /// \"The origin is: Point {\n ///     x: 0,\n ///     y: 0,\n@@ -670,9 +670,9 @@ pub trait Debug {\n     /// }\n     ///\n     /// let position = Position { longitude: 1.987, latitude: 2.983 };\n-    /// assert_eq!(format!(\"{:?}\", position), \"(1.987, 2.983)\");\n+    /// assert_eq!(format!(\"{position:?}\"), \"(1.987, 2.983)\");\n     ///\n-    /// assert_eq!(format!(\"{:#?}\", position), \"(\n+    /// assert_eq!(format!(\"{position:#?}\"), \"(\n     ///     1.987,\n     ///     2.983,\n     /// )\");\n@@ -724,7 +724,7 @@ pub use macros::Debug;\n ///\n /// let origin = Point { x: 0, y: 0 };\n ///\n-/// assert_eq!(format!(\"The origin is: {}\", origin), \"The origin is: (0, 0)\");\n+/// assert_eq!(format!(\"The origin is: {origin}\"), \"The origin is: (0, 0)\");\n /// ```\n #[rustc_on_unimplemented(\n     on(\n@@ -786,8 +786,8 @@ pub trait Display {\n /// ```\n /// let x = 42; // 42 is '52' in octal\n ///\n-/// assert_eq!(format!(\"{:o}\", x), \"52\");\n-/// assert_eq!(format!(\"{:#o}\", x), \"0o52\");\n+/// assert_eq!(format!(\"{x:o}\"), \"52\");\n+/// assert_eq!(format!(\"{x:#o}\"), \"0o52\");\n ///\n /// assert_eq!(format!(\"{:o}\", -16), \"37777777760\");\n /// ```\n@@ -809,9 +809,9 @@ pub trait Display {\n ///\n /// let l = Length(9);\n ///\n-/// assert_eq!(format!(\"l as octal is: {:o}\", l), \"l as octal is: 11\");\n+/// assert_eq!(format!(\"l as octal is: {l:o}\"), \"l as octal is: 11\");\n ///\n-/// assert_eq!(format!(\"l as octal is: {:#06o}\", l), \"l as octal is: 0o0011\");\n+/// assert_eq!(format!(\"l as octal is: {l:#06o}\"), \"l as octal is: 0o0011\");\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Octal {\n@@ -840,8 +840,8 @@ pub trait Octal {\n /// ```\n /// let x = 42; // 42 is '101010' in binary\n ///\n-/// assert_eq!(format!(\"{:b}\", x), \"101010\");\n-/// assert_eq!(format!(\"{:#b}\", x), \"0b101010\");\n+/// assert_eq!(format!(\"{x:b}\"), \"101010\");\n+/// assert_eq!(format!(\"{x:#b}\"), \"0b101010\");\n ///\n /// assert_eq!(format!(\"{:b}\", -16), \"11111111111111111111111111110000\");\n /// ```\n@@ -863,10 +863,10 @@ pub trait Octal {\n ///\n /// let l = Length(107);\n ///\n-/// assert_eq!(format!(\"l as binary is: {:b}\", l), \"l as binary is: 1101011\");\n+/// assert_eq!(format!(\"l as binary is: {l:b}\"), \"l as binary is: 1101011\");\n ///\n /// assert_eq!(\n-///     format!(\"l as binary is: {:#032b}\", l),\n+///     format!(\"l as binary is: {l:#032b}\"),\n ///     \"l as binary is: 0b000000000000000000000001101011\"\n /// );\n /// ```\n@@ -898,8 +898,8 @@ pub trait Binary {\n /// ```\n /// let x = 42; // 42 is '2a' in hex\n ///\n-/// assert_eq!(format!(\"{:x}\", x), \"2a\");\n-/// assert_eq!(format!(\"{:#x}\", x), \"0x2a\");\n+/// assert_eq!(format!(\"{x:x}\"), \"2a\");\n+/// assert_eq!(format!(\"{x:#x}\"), \"0x2a\");\n ///\n /// assert_eq!(format!(\"{:x}\", -16), \"fffffff0\");\n /// ```\n@@ -921,9 +921,9 @@ pub trait Binary {\n ///\n /// let l = Length(9);\n ///\n-/// assert_eq!(format!(\"l as hex is: {:x}\", l), \"l as hex is: 9\");\n+/// assert_eq!(format!(\"l as hex is: {l:x}\"), \"l as hex is: 9\");\n ///\n-/// assert_eq!(format!(\"l as hex is: {:#010x}\", l), \"l as hex is: 0x00000009\");\n+/// assert_eq!(format!(\"l as hex is: {l:#010x}\"), \"l as hex is: 0x00000009\");\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait LowerHex {\n@@ -953,8 +953,8 @@ pub trait LowerHex {\n /// ```\n /// let x = 42; // 42 is '2A' in hex\n ///\n-/// assert_eq!(format!(\"{:X}\", x), \"2A\");\n-/// assert_eq!(format!(\"{:#X}\", x), \"0x2A\");\n+/// assert_eq!(format!(\"{x:X}\"), \"2A\");\n+/// assert_eq!(format!(\"{x:#X}\"), \"0x2A\");\n ///\n /// assert_eq!(format!(\"{:X}\", -16), \"FFFFFFF0\");\n /// ```\n@@ -976,9 +976,9 @@ pub trait LowerHex {\n ///\n /// let l = Length(i32::MAX);\n ///\n-/// assert_eq!(format!(\"l as hex is: {:X}\", l), \"l as hex is: 7FFFFFFF\");\n+/// assert_eq!(format!(\"l as hex is: {l:X}\"), \"l as hex is: 7FFFFFFF\");\n ///\n-/// assert_eq!(format!(\"l as hex is: {:#010X}\", l), \"l as hex is: 0x7FFFFFFF\");\n+/// assert_eq!(format!(\"l as hex is: {l:#010X}\"), \"l as hex is: 0x7FFFFFFF\");\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait UpperHex {\n@@ -1003,7 +1003,7 @@ pub trait UpperHex {\n /// ```\n /// let x = &42;\n ///\n-/// let address = format!(\"{:p}\", x); // this produces something like '0x7f06092ac6d0'\n+/// let address = format!(\"{x:p}\"); // this produces something like '0x7f06092ac6d0'\n /// ```\n ///\n /// Implementing `Pointer` on a type:\n@@ -1024,9 +1024,9 @@ pub trait UpperHex {\n ///\n /// let l = Length(42);\n ///\n-/// println!(\"l is in memory here: {:p}\", l);\n+/// println!(\"l is in memory here: {l:p}\");\n ///\n-/// let l_ptr = format!(\"{:018p}\", l);\n+/// let l_ptr = format!(\"{l:018p}\");\n /// assert_eq!(l_ptr.len(), 18);\n /// assert_eq!(&l_ptr[..2], \"0x\");\n /// ```\n@@ -1054,7 +1054,7 @@ pub trait Pointer {\n /// ```\n /// let x = 42.0; // 42.0 is '4.2e1' in scientific notation\n ///\n-/// assert_eq!(format!(\"{:e}\", x), \"4.2e1\");\n+/// assert_eq!(format!(\"{x:e}\"), \"4.2e1\");\n /// ```\n ///\n /// Implementing `LowerExp` on a type:\n@@ -1074,12 +1074,12 @@ pub trait Pointer {\n /// let l = Length(100);\n ///\n /// assert_eq!(\n-///     format!(\"l in scientific notation is: {:e}\", l),\n+///     format!(\"l in scientific notation is: {l:e}\"),\n ///     \"l in scientific notation is: 1e2\"\n /// );\n ///\n /// assert_eq!(\n-///     format!(\"l in scientific notation is: {:05e}\", l),\n+///     format!(\"l in scientific notation is: {l:05e}\"),\n ///     \"l in scientific notation is: 001e2\"\n /// );\n /// ```\n@@ -1105,7 +1105,7 @@ pub trait LowerExp {\n /// ```\n /// let x = 42.0; // 42.0 is '4.2E1' in scientific notation\n ///\n-/// assert_eq!(format!(\"{:E}\", x), \"4.2E1\");\n+/// assert_eq!(format!(\"{x:E}\"), \"4.2E1\");\n /// ```\n ///\n /// Implementing `UpperExp` on a type:\n@@ -1125,12 +1125,12 @@ pub trait LowerExp {\n /// let l = Length(100);\n ///\n /// assert_eq!(\n-///     format!(\"l in scientific notation is: {:E}\", l),\n+///     format!(\"l in scientific notation is: {l:E}\"),\n ///     \"l in scientific notation is: 1E2\"\n /// );\n ///\n /// assert_eq!(\n-///     format!(\"l in scientific notation is: {:05E}\", l),\n+///     format!(\"l in scientific notation is: {l:05E}\"),\n ///     \"l in scientific notation is: 001E2\"\n /// );\n /// ```\n@@ -1429,8 +1429,8 @@ impl<'a> Formatter<'a> {\n     ///     }\n     /// }\n     ///\n-    /// assert_eq!(&format!(\"{:<4}\", Foo), \"Foo \");\n-    /// assert_eq!(&format!(\"{:0>4}\", Foo), \"0Foo\");\n+    /// assert_eq!(&format!(\"{Foo:<4}\"), \"Foo \");\n+    /// assert_eq!(&format!(\"{Foo:0>4}\"), \"0Foo\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn pad(&mut self, s: &str) -> Result {\n@@ -1613,8 +1613,8 @@ impl<'a> Formatter<'a> {\n     ///     }\n     /// }\n     ///\n-    /// assert_eq!(&format!(\"{}\", Foo), \"Foo\");\n-    /// assert_eq!(&format!(\"{:0>8}\", Foo), \"Foo\");\n+    /// assert_eq!(&format!(\"{Foo}\"), \"Foo\");\n+    /// assert_eq!(&format!(\"{Foo:0>8}\"), \"Foo\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn write_str(&mut self, data: &str) -> Result {\n@@ -1670,18 +1670,18 @@ impl<'a> Formatter<'a> {\n     ///         let c = formatter.fill();\n     ///         if let Some(width) = formatter.width() {\n     ///             for _ in 0..width {\n-    ///                 write!(formatter, \"{}\", c)?;\n+    ///                 write!(formatter, \"{c}\")?;\n     ///             }\n     ///             Ok(())\n     ///         } else {\n-    ///             write!(formatter, \"{}\", c)\n+    ///             write!(formatter, \"{c}\")\n     ///         }\n     ///     }\n     /// }\n     ///\n     /// // We set alignment to the right with \">\".\n-    /// assert_eq!(&format!(\"{:G>3}\", Foo), \"GGG\");\n-    /// assert_eq!(&format!(\"{:t>6}\", Foo), \"tttttt\");\n+    /// assert_eq!(&format!(\"{Foo:G>3}\"), \"GGG\");\n+    /// assert_eq!(&format!(\"{Foo:t>6}\"), \"tttttt\");\n     /// ```\n     #[must_use]\n     #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n@@ -1711,14 +1711,14 @@ impl<'a> Formatter<'a> {\n     ///         } else {\n     ///             \"into the void\"\n     ///         };\n-    ///         write!(formatter, \"{}\", s)\n+    ///         write!(formatter, \"{s}\")\n     ///     }\n     /// }\n     ///\n-    /// assert_eq!(&format!(\"{:<}\", Foo), \"left\");\n-    /// assert_eq!(&format!(\"{:>}\", Foo), \"right\");\n-    /// assert_eq!(&format!(\"{:^}\", Foo), \"center\");\n-    /// assert_eq!(&format!(\"{}\", Foo), \"into the void\");\n+    /// assert_eq!(&format!(\"{Foo:<}\"), \"left\");\n+    /// assert_eq!(&format!(\"{Foo:>}\"), \"right\");\n+    /// assert_eq!(&format!(\"{Foo:^}\"), \"center\");\n+    /// assert_eq!(&format!(\"{Foo}\"), \"into the void\");\n     /// ```\n     #[must_use]\n     #[stable(feature = \"fmt_flags_align\", since = \"1.28.0\")]"}, {"sha": "4b03449972c9a7273f078f6c01fed1da1882a742", "filename": "library/core/src/iter/adapters/map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -34,7 +34,7 @@ use crate::ops::Try;\n ///\n /// for pair in ['a', 'b', 'c'].into_iter()\n ///                                .map(|letter| { c += 1; (letter, c) }) {\n-///     println!(\"{:?}\", pair);\n+///     println!(\"{pair:?}\");\n /// }\n /// ```\n ///\n@@ -52,7 +52,7 @@ use crate::ops::Try;\n /// for pair in ['a', 'b', 'c'].into_iter()\n ///                                .map(|letter| { c += 1; (letter, c) })\n ///                                .rev() {\n-///     println!(\"{:?}\", pair);\n+///     println!(\"{pair:?}\");\n /// }\n /// ```\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]"}, {"sha": "5a987733134a466739b3f5fd3461d816035bf295", "filename": "library/core/src/iter/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -144,7 +144,7 @@\n //! let values = vec![1, 2, 3, 4, 5];\n //!\n //! for x in values {\n-//!     println!(\"{}\", x);\n+//!     println!(\"{x}\");\n //! }\n //! ```\n //!\n@@ -164,7 +164,7 @@\n //! let values = vec![1, 2, 3, 4, 5];\n //!\n //! for x in values {\n-//!     println!(\"{}\", x);\n+//!     println!(\"{x}\");\n //! }\n //! ```\n //!\n@@ -181,7 +181,7 @@\n //!                 None => break,\n //!             };\n //!             let x = next;\n-//!             let () = { println!(\"{}\", x); };\n+//!             let () = { println!(\"{x}\"); };\n //!         },\n //!     };\n //!     result\n@@ -280,7 +280,7 @@\n //! ```\n //! # #![allow(unused_must_use)]\n //! let v = vec![1, 2, 3, 4, 5];\n-//! v.iter().map(|x| println!(\"{}\", x));\n+//! v.iter().map(|x| println!(\"{x}\"));\n //! ```\n //!\n //! This will not print any values, as we only created an iterator, rather than\n@@ -297,10 +297,10 @@\n //! ```\n //! let v = vec![1, 2, 3, 4, 5];\n //!\n-//! v.iter().for_each(|x| println!(\"{}\", x));\n+//! v.iter().for_each(|x| println!(\"{x}\"));\n //! // or\n //! for x in &v {\n-//!     println!(\"{}\", x);\n+//!     println!(\"{x}\");\n //! }\n //! ```\n //!\n@@ -329,7 +329,7 @@\n //! let five_numbers = numbers.take(5);\n //!\n //! for number in five_numbers {\n-//!     println!(\"{}\", number);\n+//!     println!(\"{number}\");\n //! }\n //! ```\n //!\n@@ -345,7 +345,7 @@\n //! let ones = std::iter::repeat(1);\n //! let least = ones.min().unwrap(); // Oh no! An infinite loop!\n //! // `ones.min()` causes an infinite loop, so we won't reach this point!\n-//! println!(\"The smallest number one is {}.\", least);\n+//! println!(\"The smallest number one is {least}.\");\n //! ```\n //!\n //! [`take`]: Iterator::take"}, {"sha": "6e9ed0d3c527806ff1568ebbc810b694ab06b8b1", "filename": "library/core/src/iter/sources/once.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Fonce.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -48,7 +48,7 @@ use crate::iter::{FusedIterator, TrustedLen};\n ///\n /// // this will give us all of the files in .foo as well as .foorc\n /// for f in files {\n-///     println!(\"{:?}\", f);\n+///     println!(\"{f:?}\");\n /// }\n /// ```\n #[stable(feature = \"iter_once\", since = \"1.2.0\")]"}, {"sha": "d79f85c2559fedf5f3e2f0641f8ca69a71c57edd", "filename": "library/core/src/iter/sources/once_with.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Fonce_with.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Fonce_with.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Fonce_with.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -52,7 +52,7 @@ use crate::iter::{FusedIterator, TrustedLen};\n ///\n /// // this will give us all of the files in .foo as well as .foorc\n /// for f in files {\n-///     println!(\"{:?}\", f);\n+///     println!(\"{f:?}\");\n /// }\n /// ```\n #[inline]"}, {"sha": "7b75ab96ee7deea69f7f194b115490bc51702a64", "filename": "library/core/src/iter/traits/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fcollect.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -227,7 +227,7 @@ pub trait FromIterator<A>: Sized {\n /// {\n ///     collection\n ///         .into_iter()\n-///         .map(|item| format!(\"{:?}\", item))\n+///         .map(|item| format!(\"{item:?}\"))\n ///         .collect()\n /// }\n /// ```\n@@ -345,7 +345,7 @@ impl<I: Iterator> IntoIterator for I {\n /// c.extend(vec![1, 2, 3]);\n ///\n /// // we've added these elements onto the end\n-/// assert_eq!(\"MyCollection([5, 6, 7, 1, 2, 3])\", format!(\"{:?}\", c));\n+/// assert_eq!(\"MyCollection([5, 6, 7, 1, 2, 3])\", format!(\"{c:?}\"));\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Extend<A> {"}, {"sha": "bdf94c792c27c34a3742392440ea53cb7e4adeda", "filename": "library/core/src/iter/traits/double_ended.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -281,7 +281,7 @@ pub trait DoubleEndedIterator: Iterator {\n     /// let zero = \"0\".to_string();\n     ///\n     /// let result = numbers.iter().rfold(zero, |acc, &x| {\n-    ///     format!(\"({} + {})\", x, acc)\n+    ///     format!(\"({x} + {acc})\")\n     /// });\n     ///\n     /// assert_eq!(result, \"(1 + (2 + (3 + (4 + (5 + 0)))))\");"}, {"sha": "d980f5930810bc1cf7ca5fad70f9203a9e69dffa", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -709,13 +709,13 @@ pub trait Iterator {\n     /// ```\n     /// # #![allow(unused_must_use)]\n     /// // don't do this:\n-    /// (0..5).map(|x| println!(\"{}\", x));\n+    /// (0..5).map(|x| println!(\"{x}\"));\n     ///\n     /// // it won't even execute, as it is lazy. Rust will warn you about this.\n     ///\n     /// // Instead, use for:\n     /// for x in 0..5 {\n-    ///     println!(\"{}\", x);\n+    ///     println!(\"{x}\");\n     /// }\n     /// ```\n     #[inline]\n@@ -761,7 +761,7 @@ pub trait Iterator {\n     /// (0..5).flat_map(|x| x * 100 .. x * 110)\n     ///       .enumerate()\n     ///       .filter(|&(i, x)| (i + x) % 3 == 0)\n-    ///       .for_each(|(i, x)| println!(\"{}:{}\", i, x));\n+    ///       .for_each(|(i, x)| println!(\"{i}:{x}\"));\n     /// ```\n     #[inline]\n     #[stable(feature = \"iterator_for_each\", since = \"1.21.0\")]\n@@ -1575,17 +1575,17 @@ pub trait Iterator {\n     ///     .filter(|x| x % 2 == 0)\n     ///     .fold(0, |sum, i| sum + i);\n     ///\n-    /// println!(\"{}\", sum);\n+    /// println!(\"{sum}\");\n     ///\n     /// // let's add some inspect() calls to investigate what's happening\n     /// let sum = a.iter()\n     ///     .cloned()\n-    ///     .inspect(|x| println!(\"about to filter: {}\", x))\n+    ///     .inspect(|x| println!(\"about to filter: {x}\"))\n     ///     .filter(|x| x % 2 == 0)\n-    ///     .inspect(|x| println!(\"made it through filter: {}\", x))\n+    ///     .inspect(|x| println!(\"made it through filter: {x}\"))\n     ///     .fold(0, |sum, i| sum + i);\n     ///\n-    /// println!(\"{}\", sum);\n+    /// println!(\"{sum}\");\n     /// ```\n     ///\n     /// This will print:\n@@ -1611,13 +1611,13 @@ pub trait Iterator {\n     ///     .map(|line| line.parse::<i32>())\n     ///     .inspect(|num| {\n     ///         if let Err(ref e) = *num {\n-    ///             println!(\"Parsing error: {}\", e);\n+    ///             println!(\"Parsing error: {e}\");\n     ///         }\n     ///     })\n     ///     .filter_map(Result::ok)\n     ///     .sum();\n     ///\n-    /// println!(\"Sum: {}\", sum);\n+    /// println!(\"Sum: {sum}\");\n     /// ```\n     ///\n     /// This will print:\n@@ -2205,7 +2205,7 @@ pub trait Iterator {\n     ///\n     /// let data = [\"no_tea.txt\", \"stale_bread.json\", \"torrential_rain.png\"];\n     ///\n-    /// let res = data.iter().try_for_each(|x| writeln!(stdout(), \"{}\", x));\n+    /// let res = data.iter().try_for_each(|x| writeln!(stdout(), \"{x}\"));\n     /// assert!(res.is_ok());\n     ///\n     /// let mut it = data.iter().cloned();\n@@ -2319,7 +2319,7 @@ pub trait Iterator {\n     /// let zero = \"0\".to_string();\n     ///\n     /// let result = numbers.iter().fold(zero, |acc, &x| {\n-    ///     format!(\"({} + {})\", acc, x)\n+    ///     format!(\"({acc} + {x})\")\n     /// });\n     ///\n     /// assert_eq!(result, \"(((((0 + 1) + 2) + 3) + 4) + 5)\");"}, {"sha": "1ab7481b7baaec665f893cd12031ff92cc2f2377", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -412,12 +412,10 @@ pub mod arch {\n #[allow(missing_debug_implementations, dead_code, unsafe_op_in_unsafe_fn, unused_unsafe)]\n #[allow(rustdoc::bare_urls)]\n #[unstable(feature = \"portable_simd\", issue = \"86656\")]\n-#[cfg(not(all(miri, doctest)))] // Skip SIMD doctests in Miri\n mod core_simd;\n \n #[doc = include_str!(\"../../portable-simd/crates/core_simd/src/core_simd_docs.md\")]\n #[unstable(feature = \"portable_simd\", issue = \"86656\")]\n-#[cfg(not(all(miri, doctest)))] // Skip SIMD doctests in Miri\n pub mod simd {\n     #[unstable(feature = \"portable_simd\", issue = \"86656\")]\n     pub use crate::core_simd::simd::*;"}, {"sha": "ba7ae55ec6f4bbcd8d22a74a407fdd44bb447dfc", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -895,7 +895,7 @@ pub(crate) mod builtin {\n     ///\n     /// ```\n     /// let path: &'static str = env!(\"PATH\");\n-    /// println!(\"the $PATH variable at the time of compiling was: {}\", path);\n+    /// println!(\"the $PATH variable at the time of compiling was: {path}\");\n     /// ```\n     ///\n     /// You can customize the error message by passing a string as the second\n@@ -935,7 +935,7 @@ pub(crate) mod builtin {\n     ///\n     /// ```\n     /// let key: Option<&'static str> = option_env!(\"SECRET_KEY\");\n-    /// println!(\"the secret key might be: {:?}\", key);\n+    /// println!(\"the secret key might be: {key:?}\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_builtin_macro]\n@@ -1046,7 +1046,7 @@ pub(crate) mod builtin {\n     ///\n     /// ```\n     /// let current_line = line!();\n-    /// println!(\"defined on line: {}\", current_line);\n+    /// println!(\"defined on line: {current_line}\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_builtin_macro]\n@@ -1074,7 +1074,7 @@ pub(crate) mod builtin {\n     ///\n     /// ```\n     /// let current_col = column!();\n-    /// println!(\"defined on column: {}\", current_col);\n+    /// println!(\"defined on column: {current_col}\");\n     /// ```\n     ///\n     /// `column!` counts Unicode code points, not bytes or graphemes. As a result, the first two\n@@ -1112,7 +1112,7 @@ pub(crate) mod builtin {\n     ///\n     /// ```\n     /// let this_file = file!();\n-    /// println!(\"defined in file: {}\", this_file);\n+    /// println!(\"defined in file: {this_file}\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_builtin_macro]\n@@ -1176,7 +1176,7 @@ pub(crate) mod builtin {\n     /// fn main() {\n     ///     let my_str = include_str!(\"spanish.in\");\n     ///     assert_eq!(my_str, \"adi\u00f3s\\n\");\n-    ///     print!(\"{}\", my_str);\n+    ///     print!(\"{my_str}\");\n     /// }\n     /// ```\n     ///\n@@ -1325,7 +1325,7 @@ pub(crate) mod builtin {\n     /// fn main() {\n     ///     let my_string = include!(\"monkeys.in\");\n     ///     assert_eq!(\"\ud83d\ude48\ud83d\ude4a\ud83d\ude49\ud83d\ude48\ud83d\ude4a\ud83d\ude49\", my_string);\n-    ///     println!(\"{}\", my_string);\n+    ///     println!(\"{my_string}\");\n     /// }\n     /// ```\n     ///"}, {"sha": "82bac2640b40596bd6b97e7a9ac5beb35412f716", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -219,7 +219,7 @@ pub trait StructuralEq {\n ///\n /// // `x` has moved into `y`, and so cannot be used\n ///\n-/// // println!(\"{:?}\", x); // error: use of moved value\n+/// // println!(\"{x:?}\"); // error: use of moved value\n /// ```\n ///\n /// However, if a type implements `Copy`, it instead has 'copy semantics':\n@@ -236,7 +236,7 @@ pub trait StructuralEq {\n ///\n /// // `y` is a copy of `x`\n ///\n-/// println!(\"{:?}\", x); // A-OK!\n+/// println!(\"{x:?}\"); // A-OK!\n /// ```\n ///\n /// It's important to note that in these two examples, the only difference is whether you"}, {"sha": "d45ba595f1bae7c543f25942c7622928fa771e72", "filename": "library/core/src/num/dec2flt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fsrc%2Fnum%2Fdec2flt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fsrc%2Fnum%2Fdec2flt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fdec2flt%2Fmod.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -163,7 +163,7 @@ from_str_float_impl!(f64);\n /// use std::str::FromStr;\n ///\n /// if let Err(e) = f64::from_str(\"a.12\") {\n-///     println!(\"Failed conversion to f64: {}\", e);\n+///     println!(\"Failed conversion to f64: {e}\");\n /// }\n /// ```\n #[derive(Debug, Clone, PartialEq, Eq)]"}, {"sha": "1a223016dae0fa18850d17d981dd7e57613d17f3", "filename": "library/core/src/num/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fsrc%2Fnum%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fsrc%2Fnum%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ferror.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -61,7 +61,7 @@ impl const From<!> for TryFromIntError {\n ///\n /// ```\n /// if let Err(e) = i32::from_str_radix(\"a12\", 10) {\n-///     println!(\"Failed conversion to i32: {}\", e);\n+///     println!(\"Failed conversion to i32: {e}\");\n /// }\n /// ```\n #[derive(Debug, Clone, PartialEq, Eq)]"}, {"sha": "e2e569cb7ea81aa0ddc9a7e8da43ccc3c4711646", "filename": "library/core/src/ops/index.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fsrc%2Fops%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fsrc%2Fops%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Findex.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -106,7 +106,7 @@ pub trait Index<Idx: ?Sized> {\n ///     type Output = Weight;\n ///\n ///     fn index(&self, index: Side) -> &Self::Output {\n-///         println!(\"Accessing {:?}-side of balance immutably\", index);\n+///         println!(\"Accessing {index:?}-side of balance immutably\");\n ///         match index {\n ///             Side::Left => &self.left,\n ///             Side::Right => &self.right,\n@@ -116,7 +116,7 @@ pub trait Index<Idx: ?Sized> {\n ///\n /// impl IndexMut<Side> for Balance {\n ///     fn index_mut(&mut self, index: Side) -> &mut Self::Output {\n-///         println!(\"Accessing {:?}-side of balance mutably\", index);\n+///         println!(\"Accessing {index:?}-side of balance mutably\");\n ///         match index {\n ///             Side::Left => &mut self.left,\n ///             Side::Right => &mut self.right,"}, {"sha": "a3b14847342cbcdc4ad9f57e54165ac24b9fb327", "filename": "library/core/src/ops/range.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fsrc%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fsrc%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Frange.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -653,7 +653,7 @@ impl<Idx: PartialOrd<Idx>> RangeToInclusive<Idx> {\n /// map.insert(8, \"c\");\n ///\n /// for (key, value) in map.range((Excluded(3), Included(8))) {\n-///     println!(\"{}: {}\", key, value);\n+///     println!(\"{key}: {value}\");\n /// }\n ///\n /// assert_eq!(Some((&3, &\"a\")), map.range((Unbounded, Included(5))).next());"}, {"sha": "7d0c375cd4f5ffe3ce0500b771e26ac978e6e407", "filename": "library/core/src/option.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -34,7 +34,7 @@\n //! // Pattern match to retrieve the value\n //! match result {\n //!     // The division was valid\n-//!     Some(x) => println!(\"Result: {}\", x),\n+//!     Some(x) => println!(\"Result: {x}\"),\n //!     // The division was invalid\n //!     None    => println!(\"Cannot divide by 0\"),\n //! }\n@@ -66,7 +66,7 @@\n //!\n //! fn check_optional(optional: Option<Box<i32>>) {\n //!     match optional {\n-//!         Some(p) => println!(\"has value {}\", p),\n+//!         Some(p) => println!(\"has value {p}\"),\n //!         None => println!(\"has no value\"),\n //!     }\n //! }\n@@ -493,7 +493,7 @@\n //! }\n //!\n //! match name_of_biggest_animal {\n-//!     Some(name) => println!(\"the biggest animal is {}\", name),\n+//!     Some(name) => println!(\"the biggest animal is {name}\"),\n //!     None => println!(\"there are no animals :(\"),\n //! }\n //! ```\n@@ -615,7 +615,7 @@ impl<T> Option<T> {\n     /// // First, cast `Option<String>` to `Option<&String>` with `as_ref`,\n     /// // then consume *that* with `map`, leaving `text` on the stack.\n     /// let text_length: Option<usize> = text.as_ref().map(|s| s.len());\n-    /// println!(\"still can print text: {:?}\", text);\n+    /// println!(\"still can print text: {text:?}\");\n     /// ```\n     #[inline]\n     #[rustc_const_stable(feature = \"const_option\", since = \"1.48.0\")]\n@@ -918,10 +918,10 @@ impl<T> Option<T> {\n     /// let v = vec![1, 2, 3, 4, 5];\n     ///\n     /// // prints \"got: 4\"\n-    /// let x: Option<&usize> = v.get(3).inspect(|x| println!(\"got: {}\", x));\n+    /// let x: Option<&usize> = v.get(3).inspect(|x| println!(\"got: {x}\"));\n     ///\n     /// // prints nothing\n-    /// let x: Option<&usize> = v.get(5).inspect(|x| println!(\"got: {}\", x));\n+    /// let x: Option<&usize> = v.get(5).inspect(|x| println!(\"got: {x}\"));\n     /// ```\n     #[inline]\n     #[unstable(feature = \"result_option_inspect\", issue = \"91345\")]\n@@ -1976,7 +1976,7 @@ impl<'a, T> const From<&'a Option<T>> for Option<&'a T> {\n     /// let s: Option<String> = Some(String::from(\"Hello, Rustaceans!\"));\n     /// let o: Option<usize> = Option::from(&s).map(|ss: &String| ss.len());\n     ///\n-    /// println!(\"Can still print s: {:?}\", s);\n+    /// println!(\"Can still print s: {s:?}\");\n     ///\n     /// assert_eq!(o, Some(18));\n     /// ```"}, {"sha": "1923155ebc15f388aa484464b5534b70d7e09f3d", "filename": "library/core/src/panic/panic_info.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fsrc%2Fpanic%2Fpanic_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fsrc%2Fpanic%2Fpanic_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanic%2Fpanic_info.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -16,7 +16,7 @@ use crate::panic::Location;\n ///\n /// panic::set_hook(Box::new(|panic_info| {\n ///     if let Some(s) = panic_info.payload().downcast_ref::<&str>() {\n-///         println!(\"panic occurred: {:?}\", s);\n+///         println!(\"panic occurred: {s:?}\");\n ///     } else {\n ///         println!(\"panic occurred\");\n ///     }\n@@ -75,7 +75,7 @@ impl<'a> PanicInfo<'a> {\n     ///\n     /// panic::set_hook(Box::new(|panic_info| {\n     ///     if let Some(s) = panic_info.payload().downcast_ref::<&str>() {\n-    ///         println!(\"panic occurred: {:?}\", s);\n+    ///         println!(\"panic occurred: {s:?}\");\n     ///     } else {\n     ///         println!(\"panic occurred\");\n     ///     }"}, {"sha": "a908b1f3ba4ce7ed46911d8279e3c9f3a3e43818", "filename": "library/core/src/panicking.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanicking.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -39,7 +39,7 @@ use crate::panic::{Location, PanicInfo};\n #[rustc_const_unstable(feature = \"core_panic\", issue = \"none\")]\n #[lang = \"panic\"] // needed by codegen for panic on overflow and other `Assert` MIR terminators\n pub const fn panic(expr: &'static str) -> ! {\n-    // Use Arguments::new_v1 instead of format_args!(\"{}\", expr) to potentially\n+    // Use Arguments::new_v1 instead of format_args!(\"{expr}\") to potentially\n     // reduce size overhead. The format_args! macro uses str's Display trait to\n     // write expr, which calls Formatter::pad, which must accommodate string\n     // truncation and padding (even though none is used here). Using\n@@ -81,7 +81,7 @@ fn panic_bounds_check(index: usize, len: usize) -> ! {\n         super::intrinsics::abort()\n     }\n \n-    panic!(\"index out of bounds: the len is {} but the index is {}\", len, index)\n+    panic!(\"index out of bounds: the len is {len} but the index is {index}\")\n }\n \n // This function is called directly by the codegen backend, and must not have"}, {"sha": "225a679efd22132ced410bf29008fbd7e3212ee0", "filename": "library/core/src/primitive_docs.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fprimitive_docs.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -607,7 +607,7 @@ mod prim_pointer {}\n ///\n /// // This loop prints: 0 1 2\n /// for x in array {\n-///     print!(\"{} \", x);\n+///     print!(\"{x} \");\n /// }\n /// ```\n ///\n@@ -646,19 +646,19 @@ mod prim_pointer {}\n /// // This creates a slice iterator, producing references to each value.\n /// for item in array.into_iter().enumerate() {\n ///     let (i, x): (usize, &i32) = item;\n-///     println!(\"array[{}] = {}\", i, x);\n+///     println!(\"array[{i}] = {x}\");\n /// }\n ///\n /// // The `array_into_iter` lint suggests this change for future compatibility:\n /// for item in array.iter().enumerate() {\n ///     let (i, x): (usize, &i32) = item;\n-///     println!(\"array[{}] = {}\", i, x);\n+///     println!(\"array[{i}] = {x}\");\n /// }\n ///\n /// // You can explicitly iterate an array by value using `IntoIterator::into_iter`\n /// for item in IntoIterator::into_iter(array).enumerate() {\n ///     let (i, x): (usize, i32) = item;\n-///     println!(\"array[{}] = {}\", i, x);\n+///     println!(\"array[{i}] = {x}\");\n /// }\n /// ```\n ///\n@@ -673,13 +673,13 @@ mod prim_pointer {}\n /// // This iterates by reference:\n /// for item in array.iter().enumerate() {\n ///     let (i, x): (usize, &i32) = item;\n-///     println!(\"array[{}] = {}\", i, x);\n+///     println!(\"array[{i}] = {x}\");\n /// }\n ///\n /// // This iterates by value:\n /// for item in array.into_iter().enumerate() {\n ///     let (i, x): (usize, i32) = item;\n-///     println!(\"array[{}] = {}\", i, x);\n+///     println!(\"array[{i}] = {x}\");\n /// }\n /// ```\n ///\n@@ -702,26 +702,26 @@ mod prim_pointer {}\n /// // This iterates by reference:\n /// for item in array.iter() {\n ///     let x: &i32 = item;\n-///     println!(\"{}\", x);\n+///     println!(\"{x}\");\n /// }\n ///\n /// // This iterates by value:\n /// for item in IntoIterator::into_iter(array) {\n ///     let x: i32 = item;\n-///     println!(\"{}\", x);\n+///     println!(\"{x}\");\n /// }\n ///\n /// // This iterates by value:\n /// for item in array {\n ///     let x: i32 = item;\n-///     println!(\"{}\", x);\n+///     println!(\"{x}\");\n /// }\n ///\n /// // IntoIter can also start a chain.\n /// // This iterates by value:\n /// for item in IntoIterator::into_iter(array).enumerate() {\n ///     let (i, x): (usize, i32) = item;\n-///     println!(\"array[{}] = {}\", i, x);\n+///     println!(\"array[{i}] = {x}\");\n /// }\n /// ```\n ///"}, {"sha": "753220669831fee882e9c5bf2e8ed527ea8aa356", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -153,7 +153,7 @@ impl<T: ?Sized> *const T {\n     ///\n     /// unsafe {\n     ///     if let Some(val_back) = ptr.as_ref() {\n-    ///         println!(\"We got back the value: {}!\", val_back);\n+    ///         println!(\"We got back the value: {val_back}!\");\n     ///     }\n     /// }\n     /// ```\n@@ -169,7 +169,7 @@ impl<T: ?Sized> *const T {\n     ///\n     /// unsafe {\n     ///     let val_back = &*ptr;\n-    ///     println!(\"We got back the value: {}!\", val_back);\n+    ///     println!(\"We got back the value: {val_back}!\");\n     /// }\n     /// ```\n     #[stable(feature = \"ptr_as_ref\", since = \"1.9.0\")]"}, {"sha": "861412703d3c668acdfbe7f1041f25fcc2563248", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -160,7 +160,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// unsafe {\n     ///     if let Some(val_back) = ptr.as_ref() {\n-    ///         println!(\"We got back the value: {}!\", val_back);\n+    ///         println!(\"We got back the value: {val_back}!\");\n     ///     }\n     /// }\n     /// ```\n@@ -176,7 +176,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// unsafe {\n     ///     let val_back = &*ptr;\n-    ///     println!(\"We got back the value: {}!\", val_back);\n+    ///     println!(\"We got back the value: {val_back}!\");\n     /// }\n     /// ```\n     #[stable(feature = \"ptr_as_ref\", since = \"1.9.0\")]\n@@ -409,7 +409,7 @@ impl<T: ?Sized> *mut T {\n     /// let first_value = unsafe { ptr.as_mut().unwrap() };\n     /// *first_value = 4;\n     /// # assert_eq!(s, [4, 2, 3]);\n-    /// println!(\"{:?}\", s); // It'll print: \"[4, 2, 3]\".\n+    /// println!(\"{s:?}\"); // It'll print: \"[4, 2, 3]\".\n     /// ```\n     ///\n     /// # Null-unchecked version\n@@ -424,7 +424,7 @@ impl<T: ?Sized> *mut T {\n     /// let first_value = unsafe { &mut *ptr };\n     /// *first_value = 4;\n     /// # assert_eq!(s, [4, 2, 3]);\n-    /// println!(\"{:?}\", s); // It'll print: \"[4, 2, 3]\".\n+    /// println!(\"{s:?}\"); // It'll print: \"[4, 2, 3]\".\n     /// ```\n     #[stable(feature = \"ptr_as_ref\", since = \"1.9.0\")]\n     #[rustc_const_unstable(feature = \"const_ptr_as_ref\", issue = \"91822\")]"}, {"sha": "a698aec51ca71ef662b3c5dfc0b8f8a0893ec25a", "filename": "library/core/src/ptr/non_null.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -314,7 +314,7 @@ impl<T: ?Sized> NonNull<T> {\n     /// let ptr = NonNull::new(&mut x as *mut _).expect(\"ptr is null!\");\n     ///\n     /// let ref_x = unsafe { ptr.as_ref() };\n-    /// println!(\"{}\", ref_x);\n+    /// println!(\"{ref_x}\");\n     /// ```\n     ///\n     /// [the module documentation]: crate::ptr#safety"}, {"sha": "2d739bf295b928c24e8f5478a3d2f6981eb367c3", "filename": "library/core/src/result.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -35,8 +35,8 @@\n //!\n //! let version = parse_version(&[1, 2, 3, 4]);\n //! match version {\n-//!     Ok(v) => println!(\"working with version: {:?}\", v),\n-//!     Err(e) => println!(\"error parsing header: {:?}\", e),\n+//!     Ok(v) => println!(\"working with version: {v:?}\"),\n+//!     Err(e) => println!(\"error parsing header: {e:?}\"),\n //! }\n //! ```\n //!\n@@ -447,9 +447,9 @@\n //!    .collect();\n //! assert_eq!(errs.len(), 3);\n //! assert_eq!(nums, [17, 99]);\n-//! println!(\"results {:?}\", results);\n-//! println!(\"errs {:?}\", errs);\n-//! println!(\"nums {:?}\", nums);\n+//! println!(\"results {results:?}\");\n+//! println!(\"errs {errs:?}\");\n+//! println!(\"nums {nums:?}\");\n //! ```\n //!\n //! ## Collecting into `Result`\n@@ -756,7 +756,7 @@ impl<T, E> Result<T, E> {\n     ///\n     /// for num in line.lines() {\n     ///     match num.parse::<i32>().map(|i| i * 2) {\n-    ///         Ok(n) => println!(\"{}\", n),\n+    ///         Ok(n) => println!(\"{n}\"),\n     ///         Err(..) => {}\n     ///     }\n     /// }\n@@ -838,7 +838,7 @@ impl<T, E> Result<T, E> {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// fn stringify(x: u32) -> String { format!(\"error code: {}\", x) }\n+    /// fn stringify(x: u32) -> String { format!(\"error code: {x}\") }\n     ///\n     /// let x: Result<u32, u32> = Ok(2);\n     /// assert_eq!(x.map_err(stringify), Ok(2));\n@@ -864,7 +864,7 @@ impl<T, E> Result<T, E> {\n     ///\n     /// let x: u8 = \"4\"\n     ///     .parse::<u8>()\n-    ///     .inspect(|x| println!(\"original: {}\", x))\n+    ///     .inspect(|x| println!(\"original: {x}\"))\n     ///     .map(|x| x.pow(3))\n     ///     .expect(\"failed to parse number\");\n     /// ```\n@@ -889,7 +889,7 @@ impl<T, E> Result<T, E> {\n     ///\n     /// fn read() -> io::Result<String> {\n     ///     fs::read_to_string(\"address.txt\")\n-    ///         .inspect_err(|e| eprintln!(\"failed to read file: {}\", e))\n+    ///         .inspect_err(|e| eprintln!(\"failed to read file: {e}\"))\n     /// }\n     /// ```\n     #[inline]\n@@ -1198,7 +1198,7 @@ impl<T, E> Result<T, E> {\n     /// }\n     ///\n     /// let s: String = only_good_news().into_ok();\n-    /// println!(\"{}\", s);\n+    /// println!(\"{s}\");\n     /// ```\n     #[unstable(feature = \"unwrap_infallible\", reason = \"newly added\", issue = \"61695\")]\n     #[inline]\n@@ -1235,7 +1235,7 @@ impl<T, E> Result<T, E> {\n     /// }\n     ///\n     /// let error: String = only_bad_news().into_err();\n-    /// println!(\"{}\", error);\n+    /// println!(\"{error}\");\n     /// ```\n     #[unstable(feature = \"unwrap_infallible\", reason = \"newly added\", issue = \"61695\")]\n     #[inline]\n@@ -1781,7 +1781,7 @@ impl<T> Result<T, T> {\n #[cold]\n #[track_caller]\n fn unwrap_failed(msg: &str, error: &dyn fmt::Debug) -> ! {\n-    panic!(\"{}: {:?}\", msg, error)\n+    panic!(\"{msg}: {error:?}\")\n }\n \n // This is a separate function to avoid constructing a `dyn Debug`"}, {"sha": "3353c239866af4440020d16981acf3dd6890fe53", "filename": "library/core/src/slice/index.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fsrc%2Fslice%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fsrc%2Fslice%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Findex.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -48,7 +48,7 @@ const fn slice_start_index_len_fail(index: usize, len: usize) -> ! {\n \n // FIXME const-hack\n fn slice_start_index_len_fail_rt(index: usize, len: usize) -> ! {\n-    panic!(\"range start index {} out of range for slice of length {}\", index, len);\n+    panic!(\"range start index {index} out of range for slice of length {len}\");\n }\n \n const fn slice_start_index_len_fail_ct(_: usize, _: usize) -> ! {\n@@ -69,7 +69,7 @@ const fn slice_end_index_len_fail(index: usize, len: usize) -> ! {\n \n // FIXME const-hack\n fn slice_end_index_len_fail_rt(index: usize, len: usize) -> ! {\n-    panic!(\"range end index {} out of range for slice of length {}\", index, len);\n+    panic!(\"range end index {index} out of range for slice of length {len}\");\n }\n \n const fn slice_end_index_len_fail_ct(_: usize, _: usize) -> ! {\n@@ -88,7 +88,7 @@ const fn slice_index_order_fail(index: usize, end: usize) -> ! {\n \n // FIXME const-hack\n fn slice_index_order_fail_rt(index: usize, end: usize) -> ! {\n-    panic!(\"slice index starts at {} but ends at {}\", index, end);\n+    panic!(\"slice index starts at {index} but ends at {end}\");\n }\n \n const fn slice_index_order_fail_ct(_: usize, _: usize) -> ! {"}, {"sha": "82bd7dbcf6cd2e54ad6b13dea88538da0ca248db", "filename": "library/core/src/slice/iter.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -55,7 +55,7 @@ fn size_from_ptr<T>(_: *const T) -> usize {\n ///\n /// // Then, we iterate over it:\n /// for element in slice.iter() {\n-///     println!(\"{}\", element);\n+///     println!(\"{element}\");\n /// }\n /// ```\n ///\n@@ -176,7 +176,7 @@ impl<T> AsRef<[T]> for Iter<'_, T> {\n /// }\n ///\n /// // We now have \"[2, 3, 4]\":\n-/// println!(\"{:?}\", slice);\n+/// println!(\"{slice:?}\");\n /// ```\n ///\n /// [`iter_mut`]: slice::iter_mut\n@@ -266,7 +266,7 @@ impl<'a, T> IterMut<'a, T> {\n     ///     *iter.next().unwrap() += 1;\n     /// }\n     /// // Now slice is \"[2, 2, 3]\":\n-    /// println!(\"{:?}\", slice);\n+    /// println!(\"{slice:?}\");\n     /// ```\n     #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[stable(feature = \"iter_to_slice\", since = \"1.4.0\")]"}, {"sha": "32d8988f1492ef8807c927410674ad26a70a5689", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -16,7 +16,6 @@ use crate::option::Option::{None, Some};\n use crate::ptr;\n use crate::result::Result;\n use crate::result::Result::{Err, Ok};\n-#[cfg(not(all(miri, doctest)))] // Miri skips SIMD doctests\n use crate::simd::{self, Simd};\n use crate::slice;\n \n@@ -2012,7 +2011,7 @@ impl<T> [T] {\n     /// let v = [10, 40, 30, 20, 60, 50];\n     ///\n     /// for group in v.splitn(2, |num| *num % 3 == 0) {\n-    ///     println!(\"{:?}\", group);\n+    ///     println!(\"{group:?}\");\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -2067,7 +2066,7 @@ impl<T> [T] {\n     /// let v = [10, 40, 30, 20, 60, 50];\n     ///\n     /// for group in v.rsplitn(2, |num| *num % 3 == 0) {\n-    ///     println!(\"{:?}\", group);\n+    ///     println!(\"{group:?}\");\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -3544,7 +3543,6 @@ impl<T> [T] {\n     /// assert_eq!(basic_simd_sum(&numbers[1..99]), 4949.0);\n     /// ```\n     #[unstable(feature = \"portable_simd\", issue = \"86656\")]\n-    #[cfg(not(all(miri, doctest)))] // Miri skips SIMD doctests\n     pub fn as_simd<const LANES: usize>(&self) -> (&[T], &[Simd<T, LANES>], &[T])\n     where\n         Simd<T, LANES>: AsRef<[T; LANES]>,\n@@ -3588,7 +3586,6 @@ impl<T> [T] {\n     /// be lifted in a way that would make it possible to see panics from this\n     /// method for something like `LANES == 3`.\n     #[unstable(feature = \"portable_simd\", issue = \"86656\")]\n-    #[cfg(not(all(miri, doctest)))] // Miri skips SIMD doctests\n     pub fn as_simd_mut<const LANES: usize>(&mut self) -> (&mut [T], &mut [Simd<T, LANES>], &mut [T])\n     where\n         Simd<T, LANES>: AsMut<[T; LANES]>,"}, {"sha": "b1d36f2710737980efb8983f57be581005db892b", "filename": "library/core/src/str/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -104,7 +104,7 @@ fn slice_error_fail_rt(s: &str, begin: usize, end: usize) -> ! {\n     // 1. out of bounds\n     if begin > s.len() || end > s.len() {\n         let oob_index = if begin > s.len() { begin } else { end };\n-        panic!(\"byte index {} is out of bounds of `{}`{}\", oob_index, s_trunc, ellipsis);\n+        panic!(\"byte index {oob_index} is out of bounds of `{s_trunc}`{ellipsis}\");\n     }\n \n     // 2. begin <= end\n@@ -2446,7 +2446,7 @@ impl str {\n     ///\n     /// ```\n     /// for c in \"\u2764\\n!\".escape_debug() {\n-    ///     print!(\"{}\", c);\n+    ///     print!(\"{c}\");\n     /// }\n     /// println!();\n     /// ```\n@@ -2492,7 +2492,7 @@ impl str {\n     ///\n     /// ```\n     /// for c in \"\u2764\\n!\".escape_default() {\n-    ///     print!(\"{}\", c);\n+    ///     print!(\"{c}\");\n     /// }\n     /// println!();\n     /// ```\n@@ -2530,7 +2530,7 @@ impl str {\n     ///\n     /// ```\n     /// for c in \"\u2764\\n!\".escape_unicode() {\n-    ///     print!(\"{}\", c);\n+    ///     print!(\"{c}\");\n     /// }\n     /// println!();\n     /// ```"}, {"sha": "62103f5b075aea42aa022d35e5e4e33906976e22", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -94,7 +94,7 @@\n //!     }\n //!\n //!     if let Err(panic) = thread.join() {\n-//!         println!(\"Thread had an error: {:?}\", panic);\n+//!         println!(\"Thread had an error: {panic:?}\");\n //!     }\n //! }\n //! ```\n@@ -1345,7 +1345,7 @@ impl const From<bool> for AtomicBool {\n     /// ```\n     /// use std::sync::atomic::AtomicBool;\n     /// let atomic_bool = AtomicBool::from(true);\n-    /// assert_eq!(format!(\"{:?}\", atomic_bool), \"true\")\n+    /// assert_eq!(format!(\"{atomic_bool:?}\"), \"true\")\n     /// ```\n     #[inline]\n     fn from(b: bool) -> Self {"}, {"sha": "bd72d82b71c00a15d8ce79dc1aa8d0f03df374f3", "filename": "library/core/src/time.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftime.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -1214,7 +1214,7 @@ impl fmt::Debug for Duration {\n /// use std::time::Duration;\n ///\n /// if let Err(e) = Duration::try_from_secs_f32(-1.0) {\n-///     println!(\"Failed conversion to Duration: {}\", e);\n+///     println!(\"Failed conversion to Duration: {e}\");\n /// }\n /// ```\n #[derive(Debug, Clone, PartialEq, Eq)]"}, {"sha": "6656dd5c40bebdcf18aa0e49942e550049517fab", "filename": "library/core/src/unit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fsrc%2Funit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Fsrc%2Funit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Funit.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -9,7 +9,7 @@ use crate::iter::FromIterator;\n /// use std::io::*;\n /// let data = vec![1, 2, 3, 4, 5];\n /// let res: Result<()> = data.iter()\n-///     .map(|x| writeln!(stdout(), \"{}\", x))\n+///     .map(|x| writeln!(stdout(), \"{x}\"))\n ///     .collect();\n /// assert!(res.is_ok());\n /// ```"}, {"sha": "eccddcbbf59fe02c62b3ad871fd241e48395df34", "filename": "library/core/tests/any.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Ftests%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Ftests%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fany.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -46,12 +46,12 @@ fn any_downcast_ref() {\n \n     match a.downcast_ref::<usize>() {\n         Some(&5) => {}\n-        x => panic!(\"Unexpected value {:?}\", x),\n+        x => panic!(\"Unexpected value {x:?}\"),\n     }\n \n     match a.downcast_ref::<Test>() {\n         None => {}\n-        x => panic!(\"Unexpected value {:?}\", x),\n+        x => panic!(\"Unexpected value {x:?}\"),\n     }\n }\n \n@@ -69,35 +69,35 @@ fn any_downcast_mut() {\n             assert_eq!(*x, 5);\n             *x = 612;\n         }\n-        x => panic!(\"Unexpected value {:?}\", x),\n+        x => panic!(\"Unexpected value {x:?}\"),\n     }\n \n     match b_r.downcast_mut::<usize>() {\n         Some(x) => {\n             assert_eq!(*x, 7);\n             *x = 413;\n         }\n-        x => panic!(\"Unexpected value {:?}\", x),\n+        x => panic!(\"Unexpected value {x:?}\"),\n     }\n \n     match a_r.downcast_mut::<Test>() {\n         None => (),\n-        x => panic!(\"Unexpected value {:?}\", x),\n+        x => panic!(\"Unexpected value {x:?}\"),\n     }\n \n     match b_r.downcast_mut::<Test>() {\n         None => (),\n-        x => panic!(\"Unexpected value {:?}\", x),\n+        x => panic!(\"Unexpected value {x:?}\"),\n     }\n \n     match a_r.downcast_mut::<usize>() {\n         Some(&mut 612) => {}\n-        x => panic!(\"Unexpected value {:?}\", x),\n+        x => panic!(\"Unexpected value {x:?}\"),\n     }\n \n     match b_r.downcast_mut::<usize>() {\n         Some(&mut 413) => {}\n-        x => panic!(\"Unexpected value {:?}\", x),\n+        x => panic!(\"Unexpected value {x:?}\"),\n     }\n }\n "}, {"sha": "f15e03076caf7f0df9732ed09d20613803a65afd", "filename": "library/core/tests/cell.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Ftests%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Ftests%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fcell.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -62,22 +62,22 @@ fn cell_update() {\n #[test]\n fn cell_has_sensible_show() {\n     let x = Cell::new(\"foo bar\");\n-    assert!(format!(\"{:?}\", x).contains(x.get()));\n+    assert!(format!(\"{x:?}\").contains(x.get()));\n \n     x.set(\"baz qux\");\n-    assert!(format!(\"{:?}\", x).contains(x.get()));\n+    assert!(format!(\"{x:?}\").contains(x.get()));\n }\n \n #[test]\n fn ref_and_refmut_have_sensible_show() {\n     let refcell = RefCell::new(\"foo\");\n \n     let refcell_refmut = refcell.borrow_mut();\n-    assert!(format!(\"{:?}\", refcell_refmut).contains(\"foo\"));\n+    assert!(format!(\"{refcell_refmut:?}\").contains(\"foo\"));\n     drop(refcell_refmut);\n \n     let refcell_ref = refcell.borrow();\n-    assert!(format!(\"{:?}\", refcell_ref).contains(\"foo\"));\n+    assert!(format!(\"{refcell_ref:?}\").contains(\"foo\"));\n     drop(refcell_ref);\n }\n "}, {"sha": "487ce46be28d7a3f5ac2e3559ad77751c5753f4d", "filename": "library/core/tests/fmt/builders.rs", "status": "modified", "additions": 63, "deletions": 63, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Ftests%2Ffmt%2Fbuilders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Ftests%2Ffmt%2Fbuilders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Ffmt%2Fbuilders.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -11,8 +11,8 @@ mod debug_struct {\n             }\n         }\n \n-        assert_eq!(\"Foo\", format!(\"{:?}\", Foo));\n-        assert_eq!(\"Foo\", format!(\"{:#?}\", Foo));\n+        assert_eq!(\"Foo\", format!(\"{Foo:?}\"));\n+        assert_eq!(\"Foo\", format!(\"{Foo:#?}\"));\n     }\n \n     #[test]\n@@ -25,12 +25,12 @@ mod debug_struct {\n             }\n         }\n \n-        assert_eq!(\"Foo { bar: true }\", format!(\"{:?}\", Foo));\n+        assert_eq!(\"Foo { bar: true }\", format!(\"{Foo:?}\"));\n         assert_eq!(\n             \"Foo {\n     bar: true,\n }\",\n-            format!(\"{:#?}\", Foo)\n+            format!(\"{Foo:#?}\")\n         );\n     }\n \n@@ -47,13 +47,13 @@ mod debug_struct {\n             }\n         }\n \n-        assert_eq!(\"Foo { bar: true, baz: 10/20 }\", format!(\"{:?}\", Foo));\n+        assert_eq!(\"Foo { bar: true, baz: 10/20 }\", format!(\"{Foo:?}\"));\n         assert_eq!(\n             \"Foo {\n     bar: true,\n     baz: 10/20,\n }\",\n-            format!(\"{:#?}\", Foo)\n+            format!(\"{Foo:#?}\")\n         );\n     }\n \n@@ -80,7 +80,7 @@ mod debug_struct {\n \n         assert_eq!(\n             \"Bar { foo: Foo { bar: true, baz: 10/20 }, hello: \\\"world\\\" }\",\n-            format!(\"{:?}\", Bar)\n+            format!(\"{Bar:?}\")\n         );\n         assert_eq!(\n             \"Bar {\n@@ -90,7 +90,7 @@ mod debug_struct {\n     },\n     hello: \\\"world\\\",\n }\",\n-            format!(\"{:#?}\", Bar)\n+            format!(\"{Bar:#?}\")\n         );\n     }\n \n@@ -104,8 +104,8 @@ mod debug_struct {\n             }\n         }\n \n-        assert_eq!(\"Foo { .. }\", format!(\"{:?}\", Foo));\n-        assert_eq!(\"Foo { .. }\", format!(\"{:#?}\", Foo));\n+        assert_eq!(\"Foo { .. }\", format!(\"{Foo:?}\"));\n+        assert_eq!(\"Foo { .. }\", format!(\"{Foo:#?}\"));\n     }\n \n     #[test]\n@@ -121,14 +121,14 @@ mod debug_struct {\n             }\n         }\n \n-        assert_eq!(\"Foo { bar: true, baz: 10/20, .. }\", format!(\"{:?}\", Foo));\n+        assert_eq!(\"Foo { bar: true, baz: 10/20, .. }\", format!(\"{Foo:?}\"));\n         assert_eq!(\n             \"Foo {\n     bar: true,\n     baz: 10/20,\n     ..\n }\",\n-            format!(\"{:#?}\", Foo)\n+            format!(\"{Foo:#?}\")\n         );\n     }\n \n@@ -158,7 +158,7 @@ mod debug_struct {\n \n         assert_eq!(\n             \"Bar { foo: Foo { bar: true, baz: 10/20, .. }, hello: \\\"world\\\", .. }\",\n-            format!(\"{:?}\", Bar)\n+            format!(\"{Bar:?}\")\n         );\n         assert_eq!(\n             \"Bar {\n@@ -170,7 +170,7 @@ mod debug_struct {\n     hello: \\\"world\\\",\n     ..\n }\",\n-            format!(\"{:#?}\", Bar)\n+            format!(\"{Bar:#?}\")\n         );\n     }\n }\n@@ -188,8 +188,8 @@ mod debug_tuple {\n             }\n         }\n \n-        assert_eq!(\"Foo\", format!(\"{:?}\", Foo));\n-        assert_eq!(\"Foo\", format!(\"{:#?}\", Foo));\n+        assert_eq!(\"Foo\", format!(\"{Foo:?}\"));\n+        assert_eq!(\"Foo\", format!(\"{Foo:#?}\"));\n     }\n \n     #[test]\n@@ -202,12 +202,12 @@ mod debug_tuple {\n             }\n         }\n \n-        assert_eq!(\"Foo(true)\", format!(\"{:?}\", Foo));\n+        assert_eq!(\"Foo(true)\", format!(\"{Foo:?}\"));\n         assert_eq!(\n             \"Foo(\n     true,\n )\",\n-            format!(\"{:#?}\", Foo)\n+            format!(\"{Foo:#?}\")\n         );\n     }\n \n@@ -221,13 +221,13 @@ mod debug_tuple {\n             }\n         }\n \n-        assert_eq!(\"Foo(true, 10/20)\", format!(\"{:?}\", Foo));\n+        assert_eq!(\"Foo(true, 10/20)\", format!(\"{Foo:?}\"));\n         assert_eq!(\n             \"Foo(\n     true,\n     10/20,\n )\",\n-            format!(\"{:#?}\", Foo)\n+            format!(\"{Foo:#?}\")\n         );\n     }\n \n@@ -249,7 +249,7 @@ mod debug_tuple {\n             }\n         }\n \n-        assert_eq!(\"Bar(Foo(true, 10/20), \\\"world\\\")\", format!(\"{:?}\", Bar));\n+        assert_eq!(\"Bar(Foo(true, 10/20), \\\"world\\\")\", format!(\"{Bar:?}\"));\n         assert_eq!(\n             \"Bar(\n     Foo(\n@@ -258,7 +258,7 @@ mod debug_tuple {\n     ),\n     \\\"world\\\",\n )\",\n-            format!(\"{:#?}\", Bar)\n+            format!(\"{Bar:#?}\")\n         );\n     }\n }\n@@ -276,8 +276,8 @@ mod debug_map {\n             }\n         }\n \n-        assert_eq!(\"{}\", format!(\"{:?}\", Foo));\n-        assert_eq!(\"{}\", format!(\"{:#?}\", Foo));\n+        assert_eq!(\"{}\", format!(\"{Foo:?}\"));\n+        assert_eq!(\"{}\", format!(\"{Foo:#?}\"));\n     }\n \n     #[test]\n@@ -298,15 +298,15 @@ mod debug_map {\n             }\n         }\n \n-        assert_eq!(format!(\"{:?}\", Entry), format!(\"{:?}\", KeyValue));\n-        assert_eq!(format!(\"{:#?}\", Entry), format!(\"{:#?}\", KeyValue));\n+        assert_eq!(format!(\"{Entry:?}\"), format!(\"{KeyValue:?}\"));\n+        assert_eq!(format!(\"{Entry:#?}\"), format!(\"{KeyValue:#?}\"));\n \n-        assert_eq!(\"{\\\"bar\\\": true}\", format!(\"{:?}\", Entry));\n+        assert_eq!(\"{\\\"bar\\\": true}\", format!(\"{Entry:?}\"));\n         assert_eq!(\n             \"{\n     \\\"bar\\\": true,\n }\",\n-            format!(\"{:#?}\", Entry)\n+            format!(\"{Entry:#?}\")\n         );\n     }\n \n@@ -336,16 +336,16 @@ mod debug_map {\n             }\n         }\n \n-        assert_eq!(format!(\"{:?}\", Entry), format!(\"{:?}\", KeyValue));\n-        assert_eq!(format!(\"{:#?}\", Entry), format!(\"{:#?}\", KeyValue));\n+        assert_eq!(format!(\"{Entry:?}\"), format!(\"{KeyValue:?}\"));\n+        assert_eq!(format!(\"{Entry:#?}\"), format!(\"{KeyValue:#?}\"));\n \n-        assert_eq!(\"{\\\"bar\\\": true, 10: 10/20}\", format!(\"{:?}\", Entry));\n+        assert_eq!(\"{\\\"bar\\\": true, 10: 10/20}\", format!(\"{Entry:?}\"));\n         assert_eq!(\n             \"{\n     \\\"bar\\\": true,\n     10: 10/20,\n }\",\n-            format!(\"{:#?}\", Entry)\n+            format!(\"{Entry:#?}\")\n         );\n     }\n \n@@ -373,7 +373,7 @@ mod debug_map {\n         assert_eq!(\n             \"{\\\"foo\\\": {\\\"bar\\\": true, 10: 10/20}, \\\n                     {\\\"bar\\\": true, 10: 10/20}: \\\"world\\\"}\",\n-            format!(\"{:?}\", Bar)\n+            format!(\"{Bar:?}\")\n         );\n         assert_eq!(\n             \"{\n@@ -386,7 +386,7 @@ mod debug_map {\n         10: 10/20,\n     }: \\\"world\\\",\n }\",\n-            format!(\"{:#?}\", Bar)\n+            format!(\"{Bar:#?}\")\n         );\n     }\n \n@@ -441,7 +441,7 @@ mod debug_map {\n             }\n         }\n \n-        format!(\"{:?}\", Foo);\n+        format!(\"{Foo:?}\");\n     }\n \n     #[test]\n@@ -455,7 +455,7 @@ mod debug_map {\n             }\n         }\n \n-        format!(\"{:?}\", Foo);\n+        format!(\"{Foo:?}\");\n     }\n \n     #[test]\n@@ -469,7 +469,7 @@ mod debug_map {\n             }\n         }\n \n-        format!(\"{:?}\", Foo);\n+        format!(\"{Foo:?}\");\n     }\n }\n \n@@ -486,8 +486,8 @@ mod debug_set {\n             }\n         }\n \n-        assert_eq!(\"{}\", format!(\"{:?}\", Foo));\n-        assert_eq!(\"{}\", format!(\"{:#?}\", Foo));\n+        assert_eq!(\"{}\", format!(\"{Foo:?}\"));\n+        assert_eq!(\"{}\", format!(\"{Foo:#?}\"));\n     }\n \n     #[test]\n@@ -500,12 +500,12 @@ mod debug_set {\n             }\n         }\n \n-        assert_eq!(\"{true}\", format!(\"{:?}\", Foo));\n+        assert_eq!(\"{true}\", format!(\"{Foo:?}\"));\n         assert_eq!(\n             \"{\n     true,\n }\",\n-            format!(\"{:#?}\", Foo)\n+            format!(\"{Foo:#?}\")\n         );\n     }\n \n@@ -519,13 +519,13 @@ mod debug_set {\n             }\n         }\n \n-        assert_eq!(\"{true, 10/20}\", format!(\"{:?}\", Foo));\n+        assert_eq!(\"{true, 10/20}\", format!(\"{Foo:?}\"));\n         assert_eq!(\n             \"{\n     true,\n     10/20,\n }\",\n-            format!(\"{:#?}\", Foo)\n+            format!(\"{Foo:#?}\")\n         );\n     }\n \n@@ -547,7 +547,7 @@ mod debug_set {\n             }\n         }\n \n-        assert_eq!(\"{{true, 10/20}, \\\"world\\\"}\", format!(\"{:?}\", Bar));\n+        assert_eq!(\"{{true, 10/20}, \\\"world\\\"}\", format!(\"{Bar:?}\"));\n         assert_eq!(\n             \"{\n     {\n@@ -556,7 +556,7 @@ mod debug_set {\n     },\n     \\\"world\\\",\n }\",\n-            format!(\"{:#?}\", Bar)\n+            format!(\"{Bar:#?}\")\n         );\n     }\n }\n@@ -574,8 +574,8 @@ mod debug_list {\n             }\n         }\n \n-        assert_eq!(\"[]\", format!(\"{:?}\", Foo));\n-        assert_eq!(\"[]\", format!(\"{:#?}\", Foo));\n+        assert_eq!(\"[]\", format!(\"{Foo:?}\"));\n+        assert_eq!(\"[]\", format!(\"{Foo:#?}\"));\n     }\n \n     #[test]\n@@ -588,12 +588,12 @@ mod debug_list {\n             }\n         }\n \n-        assert_eq!(\"[true]\", format!(\"{:?}\", Foo));\n+        assert_eq!(\"[true]\", format!(\"{Foo:?}\"));\n         assert_eq!(\n             \"[\n     true,\n ]\",\n-            format!(\"{:#?}\", Foo)\n+            format!(\"{Foo:#?}\")\n         );\n     }\n \n@@ -607,13 +607,13 @@ mod debug_list {\n             }\n         }\n \n-        assert_eq!(\"[true, 10/20]\", format!(\"{:?}\", Foo));\n+        assert_eq!(\"[true, 10/20]\", format!(\"{Foo:?}\"));\n         assert_eq!(\n             \"[\n     true,\n     10/20,\n ]\",\n-            format!(\"{:#?}\", Foo)\n+            format!(\"{Foo:#?}\")\n         );\n     }\n \n@@ -635,7 +635,7 @@ mod debug_list {\n             }\n         }\n \n-        assert_eq!(\"[[true, 10/20], \\\"world\\\"]\", format!(\"{:?}\", Bar));\n+        assert_eq!(\"[[true, 10/20], \\\"world\\\"]\", format!(\"{Bar:?}\"));\n         assert_eq!(\n             \"[\n     [\n@@ -644,7 +644,7 @@ mod debug_list {\n     ],\n     \\\"world\\\",\n ]\",\n-            format!(\"{:#?}\", Bar)\n+            format!(\"{Bar:#?}\")\n         );\n     }\n }\n@@ -668,13 +668,13 @@ fn test_formatting_parameters_are_forwarded() {\n     set.insert(1024);\n     set.insert(7);\n \n-    assert_eq!(format!(\"{:03?}\", struct_), \"Foo { bar: 1024, baz: 007 }\");\n-    assert_eq!(format!(\"{:03?}\", tuple), \"(1024, 007)\");\n-    assert_eq!(format!(\"{:03?}\", list), \"[1024, 007]\");\n-    assert_eq!(format!(\"{:03?}\", map), r#\"{\"bar\": 1024, \"baz\": 007}\"#);\n-    assert_eq!(format!(\"{:03?}\", set), \"{007, 1024}\");\n+    assert_eq!(format!(\"{struct_:03?}\"), \"Foo { bar: 1024, baz: 007 }\");\n+    assert_eq!(format!(\"{tuple:03?}\"), \"(1024, 007)\");\n+    assert_eq!(format!(\"{list:03?}\"), \"[1024, 007]\");\n+    assert_eq!(format!(\"{map:03?}\"), r#\"{\"bar\": 1024, \"baz\": 007}\"#);\n+    assert_eq!(format!(\"{set:03?}\"), \"{007, 1024}\");\n     assert_eq!(\n-        format!(\"{:#03?}\", struct_),\n+        format!(\"{struct_:#03?}\"),\n         \"\n Foo {\n     bar: 1024,\n@@ -684,7 +684,7 @@ Foo {\n         .trim()\n     );\n     assert_eq!(\n-        format!(\"{:#03?}\", tuple),\n+        format!(\"{tuple:#03?}\"),\n         \"\n (\n     1024,\n@@ -694,7 +694,7 @@ Foo {\n         .trim()\n     );\n     assert_eq!(\n-        format!(\"{:#03?}\", list),\n+        format!(\"{list:#03?}\"),\n         \"\n [\n     1024,\n@@ -704,7 +704,7 @@ Foo {\n         .trim()\n     );\n     assert_eq!(\n-        format!(\"{:#03?}\", map),\n+        format!(\"{map:#03?}\"),\n         r#\"\n {\n     \"bar\": 1024,\n@@ -714,7 +714,7 @@ Foo {\n         .trim()\n     );\n     assert_eq!(\n-        format!(\"{:#03?}\", set),\n+        format!(\"{set:#03?}\"),\n         \"\n {\n     007,"}, {"sha": "61807635813c404b09a6a3873f3f9b4075c5d00b", "filename": "library/core/tests/fmt/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Ftests%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Ftests%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Ffmt%2Fmod.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -6,7 +6,7 @@ mod num;\n fn test_format_flags() {\n     // No residual flags left by pointer formatting\n     let p = \"\".as_ptr();\n-    assert_eq!(format!(\"{:p} {:x}\", p, 16), format!(\"{:p} 10\", p));\n+    assert_eq!(format!(\"{:p} {:x}\", p, 16), format!(\"{p:p} 10\"));\n \n     assert_eq!(format!(\"{: >3}\", 'a'), \"  a\");\n }\n@@ -15,8 +15,8 @@ fn test_format_flags() {\n fn test_pointer_formats_data_pointer() {\n     let b: &[u8] = b\"\";\n     let s: &str = \"\";\n-    assert_eq!(format!(\"{:p}\", s), format!(\"{:p}\", s.as_ptr()));\n-    assert_eq!(format!(\"{:p}\", b), format!(\"{:p}\", b.as_ptr()));\n+    assert_eq!(format!(\"{s:p}\"), format!(\"{:p}\", s.as_ptr()));\n+    assert_eq!(format!(\"{b:p}\"), format!(\"{:p}\", b.as_ptr()));\n }\n \n #[test]\n@@ -41,5 +41,5 @@ fn pad_integral_resets() {\n         }\n     }\n \n-    assert_eq!(format!(\"{:<03}\", Bar), \"1  0051  \");\n+    assert_eq!(format!(\"{Bar:<03}\"), \"1  0051  \");\n }"}, {"sha": "b9ede65c9ff0925a7147030e8fcf98255f50598c", "filename": "library/core/tests/fmt/num.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Ftests%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Ftests%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Ffmt%2Fnum.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -126,7 +126,7 @@ fn test_format_int_exp_limits() {\n fn test_format_int_exp_precision() {\n     //test that float and integer match\n     let big_int: u32 = 314_159_265;\n-    assert_eq!(format!(\"{:.1e}\", big_int), format!(\"{:.1e}\", f64::from(big_int)));\n+    assert_eq!(format!(\"{big_int:.1e}\"), format!(\"{:.1e}\", f64::from(big_int)));\n \n     //test adding precision\n     assert_eq!(format!(\"{:.10e}\", i8::MIN), \"-1.2800000000e2\");"}, {"sha": "416d2b2dae41f81f80602d6975cacaa59bdc949a", "filename": "library/core/tests/lazy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Ftests%2Flazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Ftests%2Flazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flazy.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -113,7 +113,7 @@ fn aliasing_in_get() {\n     x.set(42).unwrap();\n     let at_x = x.get().unwrap(); // --- (shared) borrow of inner `Option<T>` --+\n     let _ = x.set(27); // <-- temporary (unique) borrow of inner `Option<T>`   |\n-    println!(\"{}\", at_x); // <------- up until here ---------------------------+\n+    println!(\"{at_x}\"); // <------- up until here ---------------------------+\n }\n \n #[test]"}, {"sha": "c4e105cba600d008c76b3f8042ec91a0ee566c0f", "filename": "library/core/tests/num/dec2flt/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Ftests%2Fnum%2Fdec2flt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Ftests%2Fnum%2Fdec2flt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnum%2Fdec2flt%2Fmod.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -15,7 +15,7 @@ macro_rules! test_literal {\n         for input in inputs {\n             assert_eq!(input.parse(), Ok(x64));\n             assert_eq!(input.parse(), Ok(x32));\n-            let neg_input = &format!(\"-{}\", input);\n+            let neg_input = &format!(\"-{input}\");\n             assert_eq!(neg_input.parse(), Ok(-x64));\n             assert_eq!(neg_input.parse(), Ok(-x32));\n         }\n@@ -123,9 +123,9 @@ fn inf() {\n #[test]\n fn massive_exponent() {\n     let max = i64::MAX;\n-    assert_eq!(format!(\"1e{}000\", max).parse(), Ok(f64::INFINITY));\n-    assert_eq!(format!(\"1e-{}000\", max).parse(), Ok(0.0));\n-    assert_eq!(format!(\"1e{}000\", max).parse(), Ok(f64::INFINITY));\n+    assert_eq!(format!(\"1e{max}000\").parse(), Ok(f64::INFINITY));\n+    assert_eq!(format!(\"1e-{max}000\").parse(), Ok(0.0));\n+    assert_eq!(format!(\"1e{max}000\").parse(), Ok(f64::INFINITY));\n }\n \n #[test]"}, {"sha": "edc77377d58206224c89c9b6b7113237b4d6e221", "filename": "library/core/tests/num/dec2flt/parse.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Ftests%2Fnum%2Fdec2flt%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Ftests%2Fnum%2Fdec2flt%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnum%2Fdec2flt%2Fparse.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -46,7 +46,7 @@ fn valid() {\n     assert_eq!(parse_positive(b\".1e300\"), Some(new_number(299, 1)));\n     assert_eq!(parse_positive(b\"101e-33\"), Some(new_number(-33, 101)));\n     let zeros = \"0\".repeat(25);\n-    let s = format!(\"1.5e{}\", zeros);\n+    let s = format!(\"1.5e{zeros}\");\n     assert_eq!(parse_positive(s.as_bytes()), Some(new_number(-1, 15)));\n }\n "}, {"sha": "798473bbde377bd7aa48a90c69ec037c73395a24", "filename": "library/core/tests/num/flt2dec/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Ftests%2Fnum%2Fflt2dec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Ftests%2Fnum%2Fflt2dec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnum%2Fflt2dec%2Fmod.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -20,7 +20,7 @@ mod random;\n pub fn decode_finite<T: DecodableFloat>(v: T) -> Decoded {\n     match decode(v).1 {\n         FullDecoded::Finite(decoded) => decoded,\n-        full_decoded => panic!(\"expected finite, got {:?} instead\", full_decoded),\n+        full_decoded => panic!(\"expected finite, got {full_decoded:?} instead\"),\n     }\n }\n "}, {"sha": "d0950039314ac571befd78339ffe40b18ebf10cd", "filename": "library/core/tests/num/flt2dec/random.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Ftests%2Fnum%2Fflt2dec%2Frandom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Ftests%2Fnum%2Fflt2dec%2Frandom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnum%2Fflt2dec%2Frandom.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -15,7 +15,7 @@ use rand::SeedableRng;\n pub fn decode_finite<T: DecodableFloat>(v: T) -> Decoded {\n     match decode(v).1 {\n         FullDecoded::Finite(decoded) => decoded,\n-        full_decoded => panic!(\"expected finite, got {:?} instead\", full_decoded),\n+        full_decoded => panic!(\"expected finite, got {full_decoded:?} instead\"),\n     }\n }\n "}, {"sha": "af8e78f1f4e169edd1d8cdf5f0fc518d2ba6348f", "filename": "library/core/tests/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Ftests%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Ftests%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fptr.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -550,7 +550,7 @@ fn dyn_metadata() {\n     assert_eq!(meta.align_of(), std::mem::align_of::<Something>());\n     assert_eq!(meta.layout(), std::alloc::Layout::new::<Something>());\n \n-    assert!(format!(\"{:?}\", meta).starts_with(\"DynMetadata(0x\"));\n+    assert!(format!(\"{meta:?}\").starts_with(\"DynMetadata(0x\"));\n }\n \n #[test]"}, {"sha": "98b870512b046a0fe6675f923343476e58af2fbc", "filename": "library/core/tests/result.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Ftests%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fcore%2Ftests%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fresult.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -80,9 +80,9 @@ fn test_fmt_default() {\n     let ok: Result<isize, &'static str> = Ok(100);\n     let err: Result<isize, &'static str> = Err(\"Err\");\n \n-    let s = format!(\"{:?}\", ok);\n+    let s = format!(\"{ok:?}\");\n     assert_eq!(s, \"Ok(100)\");\n-    let s = format!(\"{:?}\", err);\n+    let s = format!(\"{err:?}\");\n     assert_eq!(s, \"Err(\\\"Err\\\")\");\n }\n "}, {"sha": "b16b952f71e862982162a8a8286854475ee49aab", "filename": "library/portable-simd/crates/core_simd/examples/nbody.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fexamples%2Fnbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fexamples%2Fnbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fexamples%2Fnbody.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -187,7 +187,7 @@ mod tests {\n fn main() {\n     {\n         let (energy_before, energy_after) = nbody::run(1000);\n-        println!(\"Energy before: {}\", energy_before);\n-        println!(\"Energy after:  {}\", energy_after);\n+        println!(\"Energy before: {energy_before}\");\n+        println!(\"Energy after:  {energy_after}\");\n     }\n }"}, {"sha": "5338cd077572ce58983e988439e13d189631e468", "filename": "library/proc_macro/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fproc_macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fproc_macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Flib.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -1106,7 +1106,7 @@ impl Literal {\n     #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     pub fn f32_unsuffixed(n: f32) -> Literal {\n         if !n.is_finite() {\n-            panic!(\"Invalid float literal {}\", n);\n+            panic!(\"Invalid float literal {n}\");\n         }\n         let mut repr = n.to_string();\n         if !repr.contains('.') {\n@@ -1131,7 +1131,7 @@ impl Literal {\n     #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     pub fn f32_suffixed(n: f32) -> Literal {\n         if !n.is_finite() {\n-            panic!(\"Invalid float literal {}\", n);\n+            panic!(\"Invalid float literal {n}\");\n         }\n         Literal(bridge::client::Literal::f32(&n.to_string()))\n     }\n@@ -1151,7 +1151,7 @@ impl Literal {\n     #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     pub fn f64_unsuffixed(n: f64) -> Literal {\n         if !n.is_finite() {\n-            panic!(\"Invalid float literal {}\", n);\n+            panic!(\"Invalid float literal {n}\");\n         }\n         let mut repr = n.to_string();\n         if !repr.contains('.') {\n@@ -1176,7 +1176,7 @@ impl Literal {\n     #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     pub fn f64_suffixed(n: f64) -> Literal {\n         if !n.is_finite() {\n-            panic!(\"Invalid float literal {}\", n);\n+            panic!(\"Invalid float literal {n}\");\n         }\n         Literal(bridge::client::Literal::f64(&n.to_string()))\n     }"}, {"sha": "a880439624690e423e495f3f380e255c128a4075", "filename": "library/std/src/alloc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Falloc.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -83,7 +83,7 @@ pub use alloc_crate::alloc::*;\n ///\n /// fn main() {\n ///     let a = Box::new(4); // Allocates from the system allocator.\n-///     println!(\"{}\", a);\n+///     println!(\"{a}\");\n /// }\n /// ```\n ///"}, {"sha": "4dfbf88e83ebc50a835fee30e127cd86e9e75abf", "filename": "library/std/src/backtrace/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fbacktrace%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fbacktrace%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fbacktrace%2Ftests.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -57,10 +57,10 @@ fn test_debug() {\n     \\n    { fn: \\\"std::rt::lang_start\\\", file: \\\"rust/rt.rs\\\", line: 400 },\\\n     \\n]\";\n \n-    assert_eq!(format!(\"{:#?}\", backtrace), expected);\n+    assert_eq!(format!(\"{backtrace:#?}\"), expected);\n \n     // Format the backtrace a second time, just to make sure lazily resolved state is stable\n-    assert_eq!(format!(\"{:#?}\", backtrace), expected);\n+    assert_eq!(format!(\"{backtrace:#?}\"), expected);\n }\n \n #[test]\n@@ -91,5 +91,5 @@ fn test_frames() {\n \n     let mut iter = frames.iter().zip(expected.iter());\n \n-    assert!(iter.all(|(f, e)| format!(\"{:#?}\", f) == *e));\n+    assert!(iter.all(|(f, e)| format!(\"{f:#?}\") == *e));\n }"}, {"sha": "b5dd17d99296be63d44d91fb43c6e1176391c0f7", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -109,8 +109,8 @@ use crate::sys;\n /// let to_find = [\"Pride and Prejudice\", \"Alice's Adventure in Wonderland\"];\n /// for &book in &to_find {\n ///     match book_reviews.get(book) {\n-///         Some(review) => println!(\"{}: {}\", book, review),\n-///         None => println!(\"{} is unreviewed.\", book)\n+///         Some(review) => println!(\"{book}: {review}\"),\n+///         None => println!(\"{book} is unreviewed.\")\n ///     }\n /// }\n ///\n@@ -119,7 +119,7 @@ use crate::sys;\n ///\n /// // Iterate over everything.\n /// for (book, review) in &book_reviews {\n-///     println!(\"{}: \\\"{}\\\"\", book, review);\n+///     println!(\"{book}: \\\"{review}\\\"\");\n /// }\n /// ```\n ///\n@@ -199,7 +199,7 @@ use crate::sys;\n ///\n /// // Use derived implementation to print the status of the vikings.\n /// for (viking, health) in &vikings {\n-///     println!(\"{:?} has {} hp\", viking, health);\n+///     println!(\"{viking:?} has {health} hp\");\n /// }\n /// ```\n \n@@ -341,7 +341,7 @@ impl<K, V, S> HashMap<K, V, S> {\n     /// ]);\n     ///\n     /// for key in map.keys() {\n-    ///     println!(\"{}\", key);\n+    ///     println!(\"{key}\");\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -392,7 +392,7 @@ impl<K, V, S> HashMap<K, V, S> {\n     /// ]);\n     ///\n     /// for val in map.values() {\n-    ///     println!(\"{}\", val);\n+    ///     println!(\"{val}\");\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -419,7 +419,7 @@ impl<K, V, S> HashMap<K, V, S> {\n     /// }\n     ///\n     /// for val in map.values() {\n-    ///     println!(\"{}\", val);\n+    ///     println!(\"{val}\");\n     /// }\n     /// ```\n     #[stable(feature = \"map_values_mut\", since = \"1.10.0\")]\n@@ -470,7 +470,7 @@ impl<K, V, S> HashMap<K, V, S> {\n     /// ]);\n     ///\n     /// for (key, val) in map.iter() {\n-    ///     println!(\"key: {} val: {}\", key, val);\n+    ///     println!(\"key: {key} val: {val}\");\n     /// }\n     /// ```\n     #[rustc_lint_query_instability]\n@@ -500,7 +500,7 @@ impl<K, V, S> HashMap<K, V, S> {\n     /// }\n     ///\n     /// for (key, val) in &map {\n-    ///     println!(\"key: {} val: {}\", key, val);\n+    ///     println!(\"key: {key} val: {val}\");\n     /// }\n     /// ```\n     #[rustc_lint_query_instability]"}, {"sha": "7ebc41588b3df2e9a250a5290bb92234ac493ab1", "filename": "library/std/src/collections/hash/map/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap%2Ftests.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -515,10 +515,10 @@ fn test_show() {\n     map.insert(1, 2);\n     map.insert(3, 4);\n \n-    let map_str = format!(\"{:?}\", map);\n+    let map_str = format!(\"{map:?}\");\n \n     assert!(map_str == \"{1: 2, 3: 4}\" || map_str == \"{3: 4, 1: 2}\");\n-    assert_eq!(format!(\"{:?}\", empty), \"{}\");\n+    assert_eq!(format!(\"{empty:?}\"), \"{}\");\n }\n \n #[test]\n@@ -702,7 +702,7 @@ fn test_entry_take_doesnt_corrupt() {\n     // Test for #19292\n     fn check(m: &HashMap<i32, ()>) {\n         for k in m.keys() {\n-            assert!(m.contains_key(k), \"{} is in keys() but not in the map?\", k);\n+            assert!(m.contains_key(k), \"{k} is in keys() but not in the map?\");\n         }\n     }\n "}, {"sha": "876d05b50fb80d60bc9e55fe945d431f18630930", "filename": "library/std/src/collections/hash/set.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -66,7 +66,7 @@ use super::map::{map_try_reserve_error, RandomState};\n ///\n /// // Iterate over everything.\n /// for book in &books {\n-///     println!(\"{}\", book);\n+///     println!(\"{book}\");\n /// }\n /// ```\n ///\n@@ -91,7 +91,7 @@ use super::map::{map_try_reserve_error, RandomState};\n ///\n /// // Use derived implementation to print the vikings.\n /// for x in &vikings {\n-///     println!(\"{:?}\", x);\n+///     println!(\"{x:?}\");\n /// }\n /// ```\n ///\n@@ -181,7 +181,7 @@ impl<T, S> HashSet<T, S> {\n     ///\n     /// // Will print in an arbitrary order.\n     /// for x in set.iter() {\n-    ///     println!(\"{}\", x);\n+    ///     println!(\"{x}\");\n     /// }\n     /// ```\n     #[inline]\n@@ -244,7 +244,7 @@ impl<T, S> HashSet<T, S> {\n     ///\n     /// // print 1, 2, 3 in an arbitrary order\n     /// for i in set.drain() {\n-    ///     println!(\"{}\", i);\n+    ///     println!(\"{i}\");\n     /// }\n     ///\n     /// assert!(set.is_empty());\n@@ -525,7 +525,7 @@ where\n     ///\n     /// // Can be seen as `a - b`.\n     /// for x in a.difference(&b) {\n-    ///     println!(\"{}\", x); // Print 1\n+    ///     println!(\"{x}\"); // Print 1\n     /// }\n     ///\n     /// let diff: HashSet<_> = a.difference(&b).collect();\n@@ -555,7 +555,7 @@ where\n     ///\n     /// // Print 1, 4 in arbitrary order.\n     /// for x in a.symmetric_difference(&b) {\n-    ///     println!(\"{}\", x);\n+    ///     println!(\"{x}\");\n     /// }\n     ///\n     /// let diff1: HashSet<_> = a.symmetric_difference(&b).collect();\n@@ -586,7 +586,7 @@ where\n     ///\n     /// // Print 2, 3 in arbitrary order.\n     /// for x in a.intersection(&b) {\n-    ///     println!(\"{}\", x);\n+    ///     println!(\"{x}\");\n     /// }\n     ///\n     /// let intersection: HashSet<_> = a.intersection(&b).collect();\n@@ -615,7 +615,7 @@ where\n     ///\n     /// // Print 1, 2, 3, 4 in arbitrary order.\n     /// for x in a.union(&b) {\n-    ///     println!(\"{}\", x);\n+    ///     println!(\"{x}\");\n     /// }\n     ///\n     /// let union: HashSet<_> = a.union(&b).collect();\n@@ -1451,7 +1451,7 @@ impl<T, S> IntoIterator for HashSet<T, S> {\n     ///\n     /// // Will print in an arbitrary order.\n     /// for x in &v {\n-    ///     println!(\"{}\", x);\n+    ///     println!(\"{x}\");\n     /// }\n     /// ```\n     #[inline]"}, {"sha": "233db276b9e618e61ce0a76ba357e863532eac82", "filename": "library/std/src/collections/hash/set/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset%2Ftests.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -301,10 +301,10 @@ fn test_show() {\n     set.insert(1);\n     set.insert(2);\n \n-    let set_str = format!(\"{:?}\", set);\n+    let set_str = format!(\"{set:?}\");\n \n     assert!(set_str == \"{1, 2}\" || set_str == \"{2, 1}\");\n-    assert_eq!(format!(\"{:?}\", empty), \"{}\");\n+    assert_eq!(format!(\"{empty:?}\"), \"{}\");\n }\n \n #[test]"}, {"sha": "0caec8fe05aa7ea6b67b46cb6d12f696c8831ab6", "filename": "library/std/src/collections/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fcollections%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fcollections%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fmod.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -199,7 +199,7 @@\n //! ```\n //! let vec = vec![1, 2, 3, 4];\n //! for x in vec.iter() {\n-//!    println!(\"vec contained {}\", x);\n+//!    println!(\"vec contained {x:?}\");\n //! }\n //! ```\n //!\n@@ -246,7 +246,7 @@\n //! ```\n //! let vec = vec![1, 2, 3, 4];\n //! for x in vec.iter().rev() {\n-//!    println!(\"vec contained {}\", x);\n+//!    println!(\"vec contained {x:?}\");\n //! }\n //! ```\n //!\n@@ -306,7 +306,7 @@\n //!\n //! println!(\"Number of occurrences of each character\");\n //! for (char, count) in &count {\n-//!     println!(\"{}: {}\", char, count);\n+//!     println!(\"{char}: {count}\");\n //! }\n //! ```\n //!\n@@ -339,7 +339,7 @@\n //!     // Check if they're sober enough to have another beer.\n //!     if person.blood_alcohol > 0.3 {\n //!         // Too drunk... for now.\n-//!         println!(\"Sorry {}, I have to cut you off\", id);\n+//!         println!(\"Sorry {id}, I have to cut you off\");\n //!     } else {\n //!         // Have another!\n //!         person.blood_alcohol += 0.1;"}, {"sha": "05f08c498e68387736edb0a8897f24d6f34bceed", "filename": "library/std/src/env.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fenv.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -118,7 +118,7 @@ pub struct VarsOs {\n /// // We will iterate through the references to the element returned by\n /// // env::vars();\n /// for (key, value) in env::vars() {\n-///     println!(\"{}: {}\", key, value);\n+///     println!(\"{key}: {value}\");\n /// }\n /// ```\n ///\n@@ -148,7 +148,7 @@ pub fn vars() -> Vars {\n /// // We will iterate through the references to the element returned by\n /// // env::vars_os();\n /// for (key, value) in env::vars_os() {\n-///     println!(\"{:?}: {:?}\", key, value);\n+///     println!(\"{key:?}: {value:?}\");\n /// }\n /// ```\n #[must_use]\n@@ -212,8 +212,8 @@ impl fmt::Debug for VarsOs {\n ///\n /// let key = \"HOME\";\n /// match env::var(key) {\n-///     Ok(val) => println!(\"{}: {:?}\", key, val),\n-///     Err(e) => println!(\"couldn't interpret {}: {}\", key, e),\n+///     Ok(val) => println!(\"{key}: {val:?}\"),\n+///     Err(e) => println!(\"couldn't interpret {key}: {e}\"),\n /// }\n /// ```\n #[stable(feature = \"env\", since = \"1.0.0\")]\n@@ -252,8 +252,8 @@ fn _var(key: &OsStr) -> Result<String, VarError> {\n ///\n /// let key = \"HOME\";\n /// match env::var_os(key) {\n-///     Some(val) => println!(\"{}: {:?}\", key, val),\n-///     None => println!(\"{} is not defined in the environment.\", key)\n+///     Some(val) => println!(\"{key}: {val:?}\"),\n+///     None => println!(\"{key} is not defined in the environment.\")\n /// }\n /// ```\n #[must_use]\n@@ -343,7 +343,7 @@ pub fn set_var<K: AsRef<OsStr>, V: AsRef<OsStr>>(key: K, value: V) {\n \n fn _set_var(key: &OsStr, value: &OsStr) {\n     os_imp::setenv(key, value).unwrap_or_else(|e| {\n-        panic!(\"failed to set environment variable `{:?}` to `{:?}`: {}\", key, value, e)\n+        panic!(\"failed to set environment variable `{key:?}` to `{value:?}`: {e}\")\n     })\n }\n \n@@ -385,7 +385,7 @@ pub fn remove_var<K: AsRef<OsStr>>(key: K) {\n \n fn _remove_var(key: &OsStr) {\n     os_imp::unsetenv(key)\n-        .unwrap_or_else(|e| panic!(\"failed to remove environment variable `{:?}`: {}\", key, e))\n+        .unwrap_or_else(|e| panic!(\"failed to remove environment variable `{key:?}`: {e}\"))\n }\n \n /// An iterator that splits an environment variable into paths according to\n@@ -421,7 +421,7 @@ pub struct SplitPaths<'a> {\n ///             println!(\"'{}'\", path.display());\n ///         }\n ///     }\n-///     None => println!(\"{} is not defined in the environment.\", key)\n+///     None => println!(\"{key} is not defined in the environment.\")\n /// }\n /// ```\n #[stable(feature = \"env\", since = \"1.0.0\")]\n@@ -684,7 +684,7 @@ pub fn temp_dir() -> PathBuf {\n /// match env::current_exe() {\n ///     Ok(exe_path) => println!(\"Path of this executable is: {}\",\n ///                              exe_path.display()),\n-///     Err(e) => println!(\"failed to get current exe path: {}\", e),\n+///     Err(e) => println!(\"failed to get current exe path: {e}\"),\n /// };\n /// ```\n #[stable(feature = \"env\", since = \"1.0.0\")]\n@@ -755,7 +755,7 @@ pub struct ArgsOs {\n ///\n /// // Prints each argument on a separate line\n /// for argument in env::args() {\n-///     println!(\"{}\", argument);\n+///     println!(\"{argument}\");\n /// }\n /// ```\n #[stable(feature = \"env\", since = \"1.0.0\")]\n@@ -790,7 +790,7 @@ pub fn args() -> Args {\n ///\n /// // Prints each argument on a separate line\n /// for argument in env::args_os() {\n-///     println!(\"{:?}\", argument);\n+///     println!(\"{argument:?}\");\n /// }\n /// ```\n #[stable(feature = \"env\", since = \"1.0.0\")]"}, {"sha": "c3cb71a5dee636c1d231a8707351bef4f6887070", "filename": "library/std/src/error.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ferror.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -96,7 +96,7 @@ pub trait Error: Debug + Display {\n     /// fn main() {\n     ///     match get_super_error() {\n     ///         Err(e) => {\n-    ///             println!(\"Error: {}\", e);\n+    ///             println!(\"Error: {e}\");\n     ///             println!(\"Caused by: {}\", e.source().unwrap());\n     ///         }\n     ///         _ => println!(\"No error\"),\n@@ -139,7 +139,7 @@ pub trait Error: Debug + Display {\n     /// ```\n     /// if let Err(e) = \"xc\".parse::<u32>() {\n     ///     // Print `e` itself, no need for description().\n-    ///     eprintln!(\"Error: {}\", e);\n+    ///     eprintln!(\"Error: {e}\");\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1074,7 +1074,7 @@ impl<E> Report<E> {\n     ///\n     /// let error = SuperError { source: SuperErrorSideKick };\n     /// let report = Report::new(error).pretty(true);\n-    /// eprintln!(\"Error: {:?}\", report);\n+    /// eprintln!(\"Error: {report:?}\");\n     /// ```\n     ///\n     /// This example produces the following output:\n@@ -1135,7 +1135,7 @@ impl<E> Report<E> {\n     /// let source = SuperErrorSideKick { source };\n     /// let error = SuperError { source };\n     /// let report = Report::new(error).pretty(true);\n-    /// eprintln!(\"Error: {:?}\", report);\n+    /// eprintln!(\"Error: {report:?}\");\n     /// ```\n     ///\n     /// This example produces the following output:\n@@ -1210,7 +1210,7 @@ impl<E> Report<E> {\n     /// let source = SuperErrorSideKick::new();\n     /// let error = SuperError { source };\n     /// let report = Report::new(error).pretty(true).show_backtrace(true);\n-    /// eprintln!(\"Error: {:?}\", report);\n+    /// eprintln!(\"Error: {report:?}\");\n     /// ```\n     ///\n     /// This example produces something similar to the following output:\n@@ -1267,7 +1267,7 @@ where\n         let sources = self.error.source().into_iter().flat_map(<dyn Error>::chain);\n \n         for cause in sources {\n-            write!(f, \": {}\", cause)?;\n+            write!(f, \": {cause}\")?;\n         }\n \n         Ok(())\n@@ -1278,7 +1278,7 @@ where\n     fn fmt_multiline(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let error = &self.error;\n \n-        write!(f, \"{}\", error)?;\n+        write!(f, \"{error}\")?;\n \n         if let Some(cause) = error.source() {\n             write!(f, \"\\n\\nCaused by:\")?;\n@@ -1289,9 +1289,9 @@ where\n                 writeln!(f)?;\n                 let mut indented = Indented { inner: f };\n                 if multiple {\n-                    write!(indented, \"{: >4}: {}\", ind, error)?;\n+                    write!(indented, \"{ind: >4}: {error}\")?;\n                 } else {\n-                    write!(indented, \"      {}\", error)?;\n+                    write!(indented, \"      {error}\")?;\n                 }\n             }\n         }\n@@ -1333,7 +1333,7 @@ impl Report<Box<dyn Error>> {\n         let sources = self.error.source().into_iter().flat_map(<dyn Error>::chain);\n \n         for cause in sources {\n-            write!(f, \": {}\", cause)?;\n+            write!(f, \": {cause}\")?;\n         }\n \n         Ok(())\n@@ -1344,7 +1344,7 @@ impl Report<Box<dyn Error>> {\n     fn fmt_multiline(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let error = &self.error;\n \n-        write!(f, \"{}\", error)?;\n+        write!(f, \"{error}\")?;\n \n         if let Some(cause) = error.source() {\n             write!(f, \"\\n\\nCaused by:\")?;\n@@ -1355,9 +1355,9 @@ impl Report<Box<dyn Error>> {\n                 writeln!(f)?;\n                 let mut indented = Indented { inner: f };\n                 if multiple {\n-                    write!(indented, \"{: >4}: {}\", ind, error)?;\n+                    write!(indented, \"{ind: >4}: {error}\")?;\n                 } else {\n-                    write!(indented, \"      {}\", error)?;\n+                    write!(indented, \"      {error}\")?;\n                 }\n             }\n         }"}, {"sha": "a2a35d96ec918a5b91ead9e51053df3524fb24fa", "filename": "library/std/src/error/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Ferror%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Ferror%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ferror%2Ftests.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -130,7 +130,7 @@ Stack backtrace:\n     error.backtrace = Some(trace);\n     let report = Report::new(error).pretty(true).show_backtrace(true);\n \n-    println!(\"Error: {}\", report);\n+    println!(\"Error: {report}\");\n     assert_eq!(expected.trim_end(), report.to_string());\n }\n \n@@ -155,7 +155,7 @@ Stack backtrace:\n     let error = GenericError::new_with_source(\"Error with two sources\", error);\n     let report = Report::new(error).pretty(true).show_backtrace(true);\n \n-    println!(\"Error: {}\", report);\n+    println!(\"Error: {report}\");\n     assert_eq!(expected.trim_end(), report.to_string());\n }\n \n@@ -355,7 +355,7 @@ Caused by:\n    1: The message goes on and on.\";\n \n     let actual = report.to_string();\n-    println!(\"{}\", actual);\n+    println!(\"{actual}\");\n     assert_eq!(expected, actual);\n }\n "}, {"sha": "b833d0e2ca5072bbf2a3ff0543a08789d159e9c3", "filename": "library/std/src/ffi/c_str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -1120,7 +1120,7 @@ impl fmt::Display for FromBytesWithNulError {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.write_str(self.description())?;\n         if let FromBytesWithNulErrorKind::InteriorNul(pos) = self.kind {\n-            write!(f, \" at byte pos {}\", pos)?;\n+            write!(f, \" at byte pos {pos}\")?;\n         }\n         Ok(())\n     }\n@@ -1134,7 +1134,7 @@ impl fmt::Display for FromVecWithNulError {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.error_kind {\n             FromBytesWithNulErrorKind::InteriorNul(pos) => {\n-                write!(f, \"data provided contains an interior nul byte at pos {}\", pos)\n+                write!(f, \"data provided contains an interior nul byte at pos {pos}\")\n             }\n             FromBytesWithNulErrorKind::NotNulTerminated => {\n                 write!(f, \"data provided is not nul terminated\")"}, {"sha": "8d603229315c08ff5b2d4d57410c81b428f54481", "filename": "library/std/src/ffi/c_str/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fffi%2Fc_str%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fffi%2Fc_str%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fc_str%2Ftests.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -35,7 +35,7 @@ fn build_with_zero2() {\n #[test]\n fn formatted() {\n     let s = CString::new(&b\"abc\\x01\\x02\\n\\xE2\\x80\\xA6\\xFF\"[..]).unwrap();\n-    assert_eq!(format!(\"{:?}\", s), r#\"\"abc\\x01\\x02\\n\\xe2\\x80\\xa6\\xff\"\"#);\n+    assert_eq!(format!(\"{s:?}\"), r#\"\"abc\\x01\\x02\\n\\xe2\\x80\\xa6\\xff\"\"#);\n }\n \n #[test]"}, {"sha": "c99d9b279a92881c0b05619b8fe3588b2d710519", "filename": "library/std/src/fs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -1123,7 +1123,7 @@ impl Metadata {\n     ///     let metadata = fs::metadata(\"foo.txt\")?;\n     ///\n     ///     if let Ok(time) = metadata.modified() {\n-    ///         println!(\"{:?}\", time);\n+    ///         println!(\"{time:?}\");\n     ///     } else {\n     ///         println!(\"Not supported on this platform\");\n     ///     }\n@@ -1158,7 +1158,7 @@ impl Metadata {\n     ///     let metadata = fs::metadata(\"foo.txt\")?;\n     ///\n     ///     if let Ok(time) = metadata.accessed() {\n-    ///         println!(\"{:?}\", time);\n+    ///         println!(\"{time:?}\");\n     ///     } else {\n     ///         println!(\"Not supported on this platform\");\n     ///     }\n@@ -1190,7 +1190,7 @@ impl Metadata {\n     ///     let metadata = fs::metadata(\"foo.txt\")?;\n     ///\n     ///     if let Ok(time) = metadata.created() {\n-    ///         println!(\"{:?}\", time);\n+    ///         println!(\"{time:?}\");\n     ///     } else {\n     ///         println!(\"Not supported on this platform or filesystem\");\n     ///     }"}, {"sha": "88d87fc532e3ce0175ebcd7c40ae4c0c02e66ef9", "filename": "library/std/src/fs/tests.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -30,7 +30,7 @@ macro_rules! check {\n     ($e:expr) => {\n         match $e {\n             Ok(t) => t,\n-            Err(e) => panic!(\"{} failed with: {}\", stringify!($e), e),\n+            Err(e) => panic!(\"{} failed with: {e}\", stringify!($e)),\n         }\n     };\n }\n@@ -470,7 +470,7 @@ fn file_test_directoryinfo_readdir() {\n     check!(fs::create_dir(dir));\n     let prefix = \"foo\";\n     for n in 0..3 {\n-        let f = dir.join(&format!(\"{}.txt\", n));\n+        let f = dir.join(&format!(\"{n}.txt\"));\n         let mut w = check!(File::create(&f));\n         let msg_str = format!(\"{}{}\", prefix, n.to_string());\n         let msg = msg_str.as_bytes();\n@@ -1329,7 +1329,7 @@ fn dir_entry_methods() {\n                 assert!(file.file_type().unwrap().is_file());\n                 assert!(file.metadata().unwrap().is_file());\n             }\n-            f => panic!(\"unknown file name: {:?}\", f),\n+            f => panic!(\"unknown file name: {f:?}\"),\n         }\n     }\n }\n@@ -1340,7 +1340,7 @@ fn dir_entry_debug() {\n     File::create(&tmpdir.join(\"b\")).unwrap();\n     let mut read_dir = tmpdir.path().read_dir().unwrap();\n     let dir_entry = read_dir.next().unwrap().unwrap();\n-    let actual = format!(\"{:?}\", dir_entry);\n+    let actual = format!(\"{dir_entry:?}\");\n     let expected = format!(\"DirEntry({:?})\", dir_entry.0.path());\n     assert_eq!(actual, expected);\n }\n@@ -1409,7 +1409,7 @@ fn metadata_access_times() {\n                     || e1.kind() == ErrorKind::Unsupported\n                         && e2.kind() == ErrorKind::Unsupported => {}\n             (a, b) => {\n-                panic!(\"creation time must be always supported or not supported: {:?} {:?}\", a, b,)\n+                panic!(\"creation time must be always supported or not supported: {a:?} {b:?}\")\n             }\n         }\n     }"}, {"sha": "989cec976b72fb58343247b9d51be3c0c5f27f7d", "filename": "library/std/src/io/buffered/bufreader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufreader.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -41,7 +41,7 @@ use crate::mem::MaybeUninit;\n ///\n ///     let mut line = String::new();\n ///     let len = reader.read_line(&mut line)?;\n-///     println!(\"First line is {} bytes long\", len);\n+///     println!(\"First line is {len} bytes long\");\n ///     Ok(())\n /// }\n /// ```"}, {"sha": "4a50e647c640ef5bc813abbbe67f73a8b7b2af82", "filename": "library/std/src/io/error.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -457,7 +457,7 @@ impl From<ErrorKind> for Error {\n     ///\n     /// let not_found = ErrorKind::NotFound;\n     /// let error = Error::from(not_found);\n-    /// assert_eq!(\"entity not found\", format!(\"{}\", error));\n+    /// assert_eq!(\"entity not found\", format!(\"{error}\"));\n     /// ```\n     #[inline]\n     fn from(kind: ErrorKind) -> Error {\n@@ -561,7 +561,7 @@ impl Error {\n     /// use std::io::Error;\n     ///\n     /// let os_error = Error::last_os_error();\n-    /// println!(\"last OS error: {:?}\", os_error);\n+    /// println!(\"last OS error: {os_error:?}\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[must_use]\n@@ -618,7 +618,7 @@ impl Error {\n     ///\n     /// fn print_os_error(err: &Error) {\n     ///     if let Some(raw_os_err) = err.raw_os_error() {\n-    ///         println!(\"raw OS error: {:?}\", raw_os_err);\n+    ///         println!(\"raw OS error: {raw_os_err:?}\");\n     ///     } else {\n     ///         println!(\"Not an OS error\");\n     ///     }\n@@ -657,7 +657,7 @@ impl Error {\n     ///\n     /// fn print_error(err: &Error) {\n     ///     if let Some(inner_err) = err.get_ref() {\n-    ///         println!(\"Inner error: {:?}\", inner_err);\n+    ///         println!(\"Inner error: {inner_err:?}\");\n     ///     } else {\n     ///         println!(\"No inner error\");\n     ///     }\n@@ -731,7 +731,7 @@ impl Error {\n     ///\n     /// fn print_error(err: &Error) {\n     ///     if let Some(inner_err) = err.get_ref() {\n-    ///         println!(\"Inner error: {}\", inner_err);\n+    ///         println!(\"Inner error: {inner_err}\");\n     ///     } else {\n     ///         println!(\"No inner error\");\n     ///     }\n@@ -770,7 +770,7 @@ impl Error {\n     ///\n     /// fn print_error(err: Error) {\n     ///     if let Some(inner_err) = err.into_inner() {\n-    ///         println!(\"Inner error: {}\", inner_err);\n+    ///         println!(\"Inner error: {inner_err}\");\n     ///     } else {\n     ///         println!(\"No inner error\");\n     ///     }\n@@ -852,7 +852,7 @@ impl fmt::Display for Error {\n         match self.repr.data() {\n             ErrorData::Os(code) => {\n                 let detail = sys::os::error_string(code);\n-                write!(fmt, \"{} (os error {})\", detail, code)\n+                write!(fmt, \"{detail} (os error {code})\")\n             }\n             ErrorData::Custom(ref c) => c.error.fmt(fmt),\n             ErrorData::Simple(kind) => write!(fmt, \"{}\", kind.as_str()),"}, {"sha": "1a0538f861a1e0b5f59b319acc6a641dc0b7e966", "filename": "library/std/src/io/error/repr_bitpacked.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_bitpacked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_bitpacked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_bitpacked.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -161,8 +161,7 @@ impl Repr {\n         // only run in libstd's tests, unless the user uses -Zbuild-std)\n         debug_assert!(\n             matches!(res.data(), ErrorData::Os(c) if c == code),\n-            \"repr(os) encoding failed for {}\",\n-            code,\n+            \"repr(os) encoding failed for {code}\"\n         );\n         res\n     }"}, {"sha": "6fd15fa80488b0eac8bedf3c1664ae4d72eaac08", "filename": "library/std/src/io/error/tests.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fio%2Ferror%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fio%2Ferror%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror%2Ftests.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -33,7 +33,7 @@ fn test_debug_error() {\n          }}\",\n         code, kind, msg\n     );\n-    assert_eq!(format!(\"{:?}\", err), expected);\n+    assert_eq!(format!(\"{err:?}\"), expected);\n }\n \n #[test]\n@@ -65,8 +65,8 @@ fn test_const() {\n \n     assert_eq!(E.kind(), ErrorKind::NotFound);\n     assert_eq!(E.to_string(), \"hello\");\n-    assert!(format!(\"{:?}\", E).contains(\"\\\"hello\\\"\"));\n-    assert!(format!(\"{:?}\", E).contains(\"NotFound\"));\n+    assert!(format!(\"{E:?}\").contains(\"\\\"hello\\\"\"));\n+    assert!(format!(\"{E:?}\").contains(\"NotFound\"));\n }\n \n #[test]\n@@ -101,7 +101,7 @@ fn test_simple_message_packing() {\n             let e = &$err;\n             // Check that the public api is right.\n             assert_eq!(e.kind(), $kind);\n-            assert!(format!(\"{:?}\", e).contains($msg));\n+            assert!(format!(\"{e:?}\").contains($msg));\n             // and we got what we expected\n             assert_matches!(\n                 e.repr.data(),"}, {"sha": "6005270a75fec1b9d231ef7a46f014cebdac0fdd", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -91,7 +91,7 @@\n //!     // read a line into buffer\n //!     reader.read_line(&mut buffer)?;\n //!\n-//!     println!(\"{}\", buffer);\n+//!     println!(\"{buffer}\");\n //!     Ok(())\n //! }\n //! ```\n@@ -1035,7 +1035,7 @@ pub trait Read {\n /// fn main() -> io::Result<()> {\n ///     let stdin = io::read_to_string(io::stdin())?;\n ///     println!(\"Stdin was:\");\n-///     println!(\"{}\", stdin);\n+///     println!(\"{stdin}\");\n ///     Ok(())\n /// }\n /// ```\n@@ -1761,7 +1761,7 @@ pub trait Seek {\n     ///     .open(\"foo.txt\").unwrap();\n     ///\n     /// let hello = \"Hello!\\n\";\n-    /// write!(f, \"{}\", hello).unwrap();\n+    /// write!(f, \"{hello}\").unwrap();\n     /// f.rewind().unwrap();\n     ///\n     /// let mut buf = String::new();\n@@ -1804,7 +1804,7 @@ pub trait Seek {\n     ///     let mut f = File::open(\"foo.txt\")?;\n     ///\n     ///     let len = f.stream_len()?;\n-    ///     println!(\"The file is currently {} bytes long\", len);\n+    ///     println!(\"The file is currently {len} bytes long\");\n     ///     Ok(())\n     /// }\n     /// ```\n@@ -1988,7 +1988,7 @@ pub trait BufRead: Read {\n     /// let buffer = stdin.fill_buf().unwrap();\n     ///\n     /// // work with buffer\n-    /// println!(\"{:?}\", buffer);\n+    /// println!(\"{buffer:?}\");\n     ///\n     /// // ensure the bytes we worked with aren't returned again later\n     /// let length = buffer.len();\n@@ -2042,7 +2042,7 @@ pub trait BufRead: Read {\n     ///     let mut line = String::new();\n     ///     stdin.read_line(&mut line).unwrap();\n     ///     // work with line\n-    ///     println!(\"{:?}\", line);\n+    ///     println!(\"{line:?}\");\n     /// }\n     /// ```\n     #[unstable(feature = \"buf_read_has_data_left\", reason = \"recently added\", issue = \"86423\")]"}, {"sha": "50344e602a958f5df8e72308f9a05d06573db11e", "filename": "library/std/src/io/stdio.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -349,10 +349,10 @@ impl Stdin {\n     /// let mut input = String::new();\n     /// match io::stdin().read_line(&mut input) {\n     ///     Ok(n) => {\n-    ///         println!(\"{} bytes read\", n);\n-    ///         println!(\"{}\", input);\n+    ///         println!(\"{n} bytes read\");\n+    ///         println!(\"{input}\");\n     ///     }\n-    ///     Err(error) => println!(\"error: {}\", error),\n+    ///     Err(error) => println!(\"error: {error}\"),\n     /// }\n     /// ```\n     ///\n@@ -953,7 +953,7 @@ where\n     }\n \n     if let Err(e) = global_s().write_fmt(args) {\n-        panic!(\"failed printing to {}: {}\", label, e);\n+        panic!(\"failed printing to {label}: {e}\");\n     }\n }\n "}, {"sha": "542b793f6da05a7a764c1f900c6855a3db30c196", "filename": "library/std/src/keyword_docs.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fkeyword_docs.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -64,18 +64,18 @@ mod as_keyword {}\n /// }\n ///\n /// assert_eq!(last, 12);\n-/// println!(\"{}\", last);\n+/// println!(\"{last}\");\n /// ```\n ///\n /// A break expression is normally associated with the innermost loop enclosing the\n /// `break` but a label can be used to specify which enclosing loop is affected.\n ///\n ///```rust\n /// 'outer: for i in 1..=5 {\n-///     println!(\"outer iteration (i): {}\", i);\n+///     println!(\"outer iteration (i): {i}\");\n ///\n ///     '_inner: for j in 1..=200 {\n-///         println!(\"    inner iteration (j): {}\", j);\n+///         println!(\"    inner iteration (j): {j}\");\n ///         if j >= 3 {\n ///             // breaks from inner loop, lets outer loop continue.\n ///             break;\n@@ -106,7 +106,7 @@ mod as_keyword {}\n /// };\n /// // first number in Fibonacci sequence over 10:\n /// assert_eq!(result, 13);\n-/// println!(\"{}\", result);\n+/// println!(\"{result}\");\n /// ```\n ///\n /// For more details consult the [Reference on \"break expression\"] and the [Reference on \"break and\n@@ -200,7 +200,7 @@ mod const_keyword {}\n ///     if number % 2 == 0 {\n ///         continue;\n ///     }\n-///     println!(\"{}\", number);\n+///     println!(\"{number}\");\n /// }\n ///```\n ///\n@@ -515,7 +515,7 @@ mod fn_keyword {}\n /// }\n ///\n /// for i in std::iter::repeat(5) {\n-///     println!(\"turns out {} never stops being 5\", i);\n+///     println!(\"turns out {i} never stops being 5\");\n ///     break; // would loop forever otherwise\n /// }\n ///\n@@ -776,7 +776,7 @@ mod in_keyword {}\n /// let shadowing_example = true;\n /// let shadowing_example = 123.4;\n /// let shadowing_example = shadowing_example as u32;\n-/// let mut shadowing_example = format!(\"cool! {}\", shadowing_example);\n+/// let mut shadowing_example = format!(\"cool! {shadowing_example}\");\n /// shadowing_example += \" something else!\"; // not shadowing\n /// ```\n ///\n@@ -805,7 +805,7 @@ mod let_keyword {}\n /// let mut counter = 0;\n ///\n /// while counter < 10 {\n-///     println!(\"{}\", counter);\n+///     println!(\"{counter}\");\n ///     counter += 1;\n /// }\n /// ```\n@@ -836,7 +836,7 @@ mod let_keyword {}\n ///     if i == 10 {\n ///         counter = None;\n ///     } else {\n-///         println!(\"{}\", i);\n+///         println!(\"{i}\");\n ///         counter = Some (i + 1);\n ///     }\n /// }\n@@ -866,7 +866,7 @@ mod while_keyword {}\n ///\n /// let mut i = 1;\n /// loop {\n-///     println!(\"i is {}\", i);\n+///     println!(\"i is {i}\");\n ///     if i > 100 {\n ///         break;\n ///     }\n@@ -920,8 +920,8 @@ mod loop_keyword {}\n ///\n /// let a_number = Option::Some(10);\n /// match a_number {\n-///     Some(x) if x <= 5 => println!(\"0 to 5 num = {}\", x),\n-///     Some(x @ 6..=10) => println!(\"6 to 10 num = {}\", x),\n+///     Some(x) if x <= 5 => println!(\"0 to 5 num = {x}\"),\n+///     Some(x @ 6..=10) => println!(\"6 to 10 num = {x}\"),\n ///     None => panic!(),\n ///     // all other numbers\n ///     _ => panic!(),\n@@ -940,8 +940,8 @@ mod loop_keyword {}\n ///\n /// let get_inner = Outer::Double(None, Some(String::new()));\n /// match get_inner {\n-///     Outer::Double(None, Some(st)) => println!(\"{}\", st),\n-///     Outer::Single(opt) => println!(\"{:?}\", opt),\n+///     Outer::Double(None, Some(st)) => println!(\"{st}\"),\n+///     Outer::Single(opt) => println!(\"{opt:?}\"),\n ///     _ => panic!(),\n /// }\n /// ```\n@@ -988,7 +988,7 @@ mod mod_keyword {}\n ///\n /// ```rust\n /// let data = vec![1, 2, 3];\n-/// let closure = move || println!(\"captured {:?} by value\", data);\n+/// let closure = move || println!(\"captured {data:?} by value\");\n ///\n /// // data is no longer available, it is owned by the closure\n /// ```\n@@ -1001,7 +1001,7 @@ mod mod_keyword {}\n /// ```rust\n /// fn create_fn() -> impl Fn() {\n ///     let text = \"Fn\".to_owned();\n-///     move || println!(\"This is a: {}\", text)\n+///     move || println!(\"This is a: {text}\")\n /// }\n ///\n /// let fn_plain = create_fn();\n@@ -1014,7 +1014,7 @@ mod mod_keyword {}\n /// let data = vec![1, 2, 3];\n ///\n /// std::thread::spawn(move || {\n-///     println!(\"captured {:?} by value\", data)\n+///     println!(\"captured {data:?} by value\")\n /// }).join().unwrap();\n ///\n /// // data was moved to the spawned thread, so we cannot use it here\n@@ -1025,7 +1025,7 @@ mod mod_keyword {}\n /// ```rust\n /// let capture = \"hello\".to_owned();\n /// let block = async move {\n-///     println!(\"rust says {} from async block\", capture);\n+///     println!(\"rust says {capture} from async block\");\n /// };\n /// ```\n ///\n@@ -1124,7 +1124,7 @@ mod pub_keyword {}\n /// let maybe_name = Some(String::from(\"Alice\"));\n /// // The variable 'maybe_name' is consumed here ...\n /// match maybe_name {\n-///     Some(n) => println!(\"Hello, {}\", n),\n+///     Some(n) => println!(\"Hello, {n}\"),\n ///     _ => println!(\"Hello, world\"),\n /// }\n /// // ... and is now unavailable.\n@@ -1138,7 +1138,7 @@ mod pub_keyword {}\n /// let maybe_name = Some(String::from(\"Alice\"));\n /// // Using `ref`, the value is borrowed, not moved ...\n /// match maybe_name {\n-///     Some(ref n) => println!(\"Hello, {}\", n),\n+///     Some(ref n) => println!(\"Hello, {n}\"),\n ///     _ => println!(\"Hello, world\"),\n /// }\n /// // ... so it's available here!\n@@ -1423,7 +1423,7 @@ mod self_upper_keyword {}\n /// // With a strictly read-only static, references will have the same address\n /// assert_eq!(r1, r2);\n /// // A static item can be used just like a variable in many cases\n-/// println!(\"{:?}\", FOO);\n+/// println!(\"{FOO:?}\");\n /// ```\n ///\n /// # Mutable `static`s\n@@ -1675,7 +1675,7 @@ mod super_keyword {}\n /// # #![allow(dead_code)]\n /// fn debug_iter<I: Iterator>(it: I) where I::Item: std::fmt::Debug {\n ///     for elem in it {\n-///         println!(\"{:#?}\", elem);\n+///         println!(\"{elem:#?}\");\n ///     }\n /// }\n ///\n@@ -2313,7 +2313,7 @@ mod dyn_keyword {}\n ///     match u {\n ///         IntOrFloat { i: 10 } => println!(\"Found exactly ten!\"),\n ///         // Matching the field `f` provides an `f32`.\n-///         IntOrFloat { f } => println!(\"Found f = {} !\", f),\n+///         IntOrFloat { f } => println!(\"Found f = {f} !\"),\n ///     }\n /// }\n /// ```\n@@ -2337,7 +2337,7 @@ mod dyn_keyword {}\n /// let i = unsafe { &mut u.i };\n ///\n /// *i = 10;\n-/// println!(\"f = {} and i = {}\", f, i);\n+/// println!(\"f = {f} and i = {i}\");\n /// ```\n ///\n /// See the [Reference][union] for more informations on `union`s."}, {"sha": "a464f2d4c7431f1102f87c42792912744f1af3c1", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -501,10 +501,8 @@ pub mod lazy;\n #[allow(missing_debug_implementations, dead_code, unsafe_op_in_unsafe_fn, unused_unsafe)]\n #[allow(rustdoc::bare_urls)]\n #[unstable(feature = \"portable_simd\", issue = \"86656\")]\n-#[cfg(not(all(miri, doctest)))] // Miri does not support all SIMD intrinsics\n mod std_float;\n \n-#[cfg(not(all(miri, doctest)))] // Miri does not support all SIMD intrinsics\n #[doc = include_str!(\"../../portable-simd/crates/core_simd/src/core_simd_docs.md\")]\n #[unstable(feature = \"portable_simd\", issue = \"86656\")]\n pub mod simd {"}, {"sha": "585a17451a0b7ca225d670ec1dbad031fd98fa5e", "filename": "library/std/src/net/addr/tests.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fnet%2Faddr%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fnet%2Faddr%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Faddr%2Ftests.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -169,30 +169,30 @@ fn is_v6() {\n fn socket_v4_to_str() {\n     let socket = SocketAddrV4::new(Ipv4Addr::new(192, 168, 0, 1), 8080);\n \n-    assert_eq!(format!(\"{}\", socket), \"192.168.0.1:8080\");\n-    assert_eq!(format!(\"{:<20}\", socket), \"192.168.0.1:8080    \");\n-    assert_eq!(format!(\"{:>20}\", socket), \"    192.168.0.1:8080\");\n-    assert_eq!(format!(\"{:^20}\", socket), \"  192.168.0.1:8080  \");\n-    assert_eq!(format!(\"{:.10}\", socket), \"192.168.0.\");\n+    assert_eq!(format!(\"{socket}\"), \"192.168.0.1:8080\");\n+    assert_eq!(format!(\"{socket:<20}\"), \"192.168.0.1:8080    \");\n+    assert_eq!(format!(\"{socket:>20}\"), \"    192.168.0.1:8080\");\n+    assert_eq!(format!(\"{socket:^20}\"), \"  192.168.0.1:8080  \");\n+    assert_eq!(format!(\"{socket:.10}\"), \"192.168.0.\");\n }\n \n #[test]\n fn socket_v6_to_str() {\n     let mut socket = SocketAddrV6::new(Ipv6Addr::new(0x2a02, 0x6b8, 0, 1, 0, 0, 0, 1), 53, 0, 0);\n \n-    assert_eq!(format!(\"{}\", socket), \"[2a02:6b8:0:1::1]:53\");\n-    assert_eq!(format!(\"{:<24}\", socket), \"[2a02:6b8:0:1::1]:53    \");\n-    assert_eq!(format!(\"{:>24}\", socket), \"    [2a02:6b8:0:1::1]:53\");\n-    assert_eq!(format!(\"{:^24}\", socket), \"  [2a02:6b8:0:1::1]:53  \");\n-    assert_eq!(format!(\"{:.15}\", socket), \"[2a02:6b8:0:1::\");\n+    assert_eq!(format!(\"{socket}\"), \"[2a02:6b8:0:1::1]:53\");\n+    assert_eq!(format!(\"{socket:<24}\"), \"[2a02:6b8:0:1::1]:53    \");\n+    assert_eq!(format!(\"{socket:>24}\"), \"    [2a02:6b8:0:1::1]:53\");\n+    assert_eq!(format!(\"{socket:^24}\"), \"  [2a02:6b8:0:1::1]:53  \");\n+    assert_eq!(format!(\"{socket:.15}\"), \"[2a02:6b8:0:1::\");\n \n     socket.set_scope_id(5);\n \n-    assert_eq!(format!(\"{}\", socket), \"[2a02:6b8:0:1::1%5]:53\");\n-    assert_eq!(format!(\"{:<24}\", socket), \"[2a02:6b8:0:1::1%5]:53  \");\n-    assert_eq!(format!(\"{:>24}\", socket), \"  [2a02:6b8:0:1::1%5]:53\");\n-    assert_eq!(format!(\"{:^24}\", socket), \" [2a02:6b8:0:1::1%5]:53 \");\n-    assert_eq!(format!(\"{:.18}\", socket), \"[2a02:6b8:0:1::1%5\");\n+    assert_eq!(format!(\"{socket}\"), \"[2a02:6b8:0:1::1%5]:53\");\n+    assert_eq!(format!(\"{socket:<24}\"), \"[2a02:6b8:0:1::1%5]:53  \");\n+    assert_eq!(format!(\"{socket:>24}\"), \"  [2a02:6b8:0:1::1%5]:53\");\n+    assert_eq!(format!(\"{socket:^24}\"), \" [2a02:6b8:0:1::1%5]:53 \");\n+    assert_eq!(format!(\"{socket:.18}\"), \"[2a02:6b8:0:1::1%5\");\n }\n \n #[test]"}, {"sha": "f5d3c4905e0813841f86c9c22badd0e0fb69fda9", "filename": "library/std/src/net/tcp.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Ftcp.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -595,10 +595,10 @@ impl TcpStream {\n     ///             // via platform-specific APIs such as epoll or IOCP\n     ///             wait_for_fd();\n     ///         }\n-    ///         Err(e) => panic!(\"encountered IO error: {}\", e),\n+    ///         Err(e) => panic!(\"encountered IO error: {e}\"),\n     ///     };\n     /// };\n-    /// println!(\"bytes: {:?}\", buf);\n+    /// println!(\"bytes: {buf:?}\");\n     /// ```\n     #[stable(feature = \"net2_mutators\", since = \"1.9.0\")]\n     pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {\n@@ -799,8 +799,8 @@ impl TcpListener {\n     ///\n     /// let listener = TcpListener::bind(\"127.0.0.1:8080\").unwrap();\n     /// match listener.accept() {\n-    ///     Ok((_socket, addr)) => println!(\"new client: {:?}\", addr),\n-    ///     Err(e) => println!(\"couldn't get client: {:?}\", e),\n+    ///     Ok((_socket, addr)) => println!(\"new client: {addr:?}\"),\n+    ///     Err(e) => println!(\"couldn't get client: {e:?}\"),\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -991,7 +991,7 @@ impl TcpListener {\n     ///             wait_for_fd();\n     ///             continue;\n     ///         }\n-    ///         Err(e) => panic!(\"encountered IO error: {}\", e),\n+    ///         Err(e) => panic!(\"encountered IO error: {e}\"),\n     ///     }\n     /// }\n     /// ```"}, {"sha": "8c0adcfb0ebbbaca3575a96b8d75bed3c4e47d81", "filename": "library/std/src/net/tcp/tests.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fnet%2Ftcp%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fnet%2Ftcp%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Ftcp%2Ftests.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -142,8 +142,7 @@ fn write_close() {\n                     e.kind() == ErrorKind::ConnectionReset\n                         || e.kind() == ErrorKind::BrokenPipe\n                         || e.kind() == ErrorKind::ConnectionAborted,\n-                    \"unknown error: {}\",\n-                    e\n+                    \"unknown error: {e}\"\n                 );\n             }\n         }\n@@ -655,7 +654,7 @@ fn debug() {\n         inner_name,\n         render_inner(&listener)\n     );\n-    assert_eq!(format!(\"{:?}\", listener), compare);\n+    assert_eq!(format!(\"{listener:?}\"), compare);\n \n     let stream = t!(TcpStream::connect(&(\"localhost\", socket_addr.port())));\n     let compare = format!(\n@@ -665,7 +664,7 @@ fn debug() {\n         inner_name,\n         render_inner(&stream)\n     );\n-    assert_eq!(format!(\"{:?}\", stream), compare);\n+    assert_eq!(format!(\"{stream:?}\"), compare);\n }\n \n // FIXME: re-enabled openbsd tests once their socket timeout code\n@@ -832,7 +831,7 @@ fn set_nonblocking() {\n     match stream.read(&mut buf) {\n         Ok(_) => panic!(\"expected error\"),\n         Err(ref e) if e.kind() == ErrorKind::WouldBlock => {}\n-        Err(e) => panic!(\"unexpected error {}\", e),\n+        Err(e) => panic!(\"unexpected error {e}\"),\n     }\n }\n \n@@ -862,7 +861,7 @@ fn peek() {\n         match c.peek(&mut b) {\n             Ok(_) => panic!(\"expected error\"),\n             Err(ref e) if e.kind() == ErrorKind::WouldBlock => {}\n-            Err(e) => panic!(\"unexpected error {}\", e),\n+            Err(e) => panic!(\"unexpected error {e}\"),\n         }\n         t!(txdone.send(()));\n     })"}, {"sha": "864e1b0f3450a6c992e3bef0fd200c6f4798cff9", "filename": "library/std/src/net/udp.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fudp.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -605,9 +605,9 @@ impl UdpSocket {\n     ///\n     /// let socket = UdpSocket::bind(\"127.0.0.1:34254\").expect(\"couldn't bind to address\");\n     /// match socket.take_error() {\n-    ///     Ok(Some(error)) => println!(\"UdpSocket error: {:?}\", error),\n+    ///     Ok(Some(error)) => println!(\"UdpSocket error: {error:?}\"),\n     ///     Ok(None) => println!(\"No error\"),\n-    ///     Err(error) => println!(\"UdpSocket.take_error failed: {:?}\", error),\n+    ///     Err(error) => println!(\"UdpSocket.take_error failed: {error:?}\"),\n     /// }\n     /// ```\n     #[stable(feature = \"net2_mutators\", since = \"1.9.0\")]\n@@ -686,8 +686,8 @@ impl UdpSocket {\n     /// socket.connect(\"127.0.0.1:8080\").expect(\"connect function failed\");\n     /// let mut buf = [0; 10];\n     /// match socket.recv(&mut buf) {\n-    ///     Ok(received) => println!(\"received {} bytes {:?}\", received, &buf[..received]),\n-    ///     Err(e) => println!(\"recv function failed: {:?}\", e),\n+    ///     Ok(received) => println!(\"received {received} bytes {:?}\", &buf[..received]),\n+    ///     Err(e) => println!(\"recv function failed: {e:?}\"),\n     /// }\n     /// ```\n     #[stable(feature = \"net2_mutators\", since = \"1.9.0\")]\n@@ -726,8 +726,8 @@ impl UdpSocket {\n     /// socket.connect(\"127.0.0.1:8080\").expect(\"connect function failed\");\n     /// let mut buf = [0; 10];\n     /// match socket.peek(&mut buf) {\n-    ///     Ok(received) => println!(\"received {} bytes\", received),\n-    ///     Err(e) => println!(\"peek function failed: {:?}\", e),\n+    ///     Ok(received) => println!(\"received {received} bytes\"),\n+    ///     Err(e) => println!(\"peek function failed: {e:?}\"),\n     /// }\n     /// ```\n     #[stable(feature = \"peek\", since = \"1.18.0\")]\n@@ -770,7 +770,7 @@ impl UdpSocket {\n     ///             // via platform-specific APIs such as epoll or IOCP\n     ///             wait_for_fd();\n     ///         }\n-    ///         Err(e) => panic!(\"encountered IO error: {}\", e),\n+    ///         Err(e) => panic!(\"encountered IO error: {e}\"),\n     ///     }\n     /// };\n     /// println!(\"bytes: {:?}\", &buf[..num_bytes_read]);"}, {"sha": "f82904ffbbf776cb5343f6371ea347b028ce8b96", "filename": "library/std/src/net/udp/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fnet%2Fudp%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fnet%2Fudp%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fudp%2Ftests.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -173,8 +173,8 @@ fn debug() {\n \n     let udpsock = t!(UdpSocket::bind(&socket_addr));\n     let udpsock_inner = udpsock.0.socket().as_raw();\n-    let compare = format!(\"UdpSocket {{ addr: {:?}, {}: {:?} }}\", socket_addr, name, udpsock_inner);\n-    assert_eq!(format!(\"{:?}\", udpsock), compare);\n+    let compare = format!(\"UdpSocket {{ addr: {socket_addr:?}, {name}: {udpsock_inner:?} }}\");\n+    assert_eq!(format!(\"{udpsock:?}\"), compare);\n }\n \n // FIXME: re-enabled openbsd/netbsd tests once their socket timeout code\n@@ -359,7 +359,7 @@ fn set_nonblocking() {\n         match socket.recv(&mut buf) {\n             Ok(_) => panic!(\"expected error\"),\n             Err(ref e) if e.kind() == ErrorKind::WouldBlock => {}\n-            Err(e) => panic!(\"unexpected error {}\", e),\n+            Err(e) => panic!(\"unexpected error {e}\"),\n         }\n     })\n }"}, {"sha": "3fc6cc44ce4c8291161deaee311a83a41050cac1", "filename": "library/std/src/os/unix/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fos%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fos%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Ffs.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -47,7 +47,7 @@ pub trait FileExt {\n     ///\n     ///     // We now read 8 bytes from the offset 10.\n     ///     let num_bytes_read = file.read_at(&mut buf, 10)?;\n-    ///     println!(\"read {} bytes: {:?}\", num_bytes_read, buf);\n+    ///     println!(\"read {num_bytes_read} bytes: {buf:?}\");\n     ///     Ok(())\n     /// }\n     /// ```\n@@ -861,7 +861,7 @@ pub trait DirEntryExt2: Sealed {\n     ///     entries.sort_unstable_by(|a, b| a.file_name_ref().cmp(b.file_name_ref()));\n     ///\n     ///     for p in entries {\n-    ///         println!(\"{:?}\", p);\n+    ///         println!(\"{p:?}\");\n     ///     }\n     ///\n     ///     Ok(())"}, {"sha": "ba65d8f285e4864b6a9f55fb4d58dc4055e901c0", "filename": "library/std/src/os/unix/net/addr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Faddr.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -86,7 +86,7 @@ impl<'a> fmt::Display for AsciiEscaped<'a> {\n /// let socket = match UnixListener::bind(\"/tmp/sock\") {\n ///     Ok(sock) => sock,\n ///     Err(e) => {\n-///         println!(\"Couldn't bind: {:?}\", e);\n+///         println!(\"Couldn't bind: {e:?}\");\n ///         return\n ///     }\n /// };\n@@ -307,7 +307,7 @@ impl SocketAddr {\n     ///     let listener = match UnixListener::bind_addr(&addr) {\n     ///         Ok(sock) => sock,\n     ///         Err(err) => {\n-    ///             println!(\"Couldn't bind: {:?}\", err);\n+    ///             println!(\"Couldn't bind: {err:?}\");\n     ///             return Err(err);\n     ///         }\n     ///     };\n@@ -346,7 +346,7 @@ impl fmt::Debug for SocketAddr {\n         match self.address() {\n             AddressKind::Unnamed => write!(fmt, \"(unnamed)\"),\n             AddressKind::Abstract(name) => write!(fmt, \"{} (abstract)\", AsciiEscaped(name)),\n-            AddressKind::Pathname(path) => write!(fmt, \"{:?} (pathname)\", path),\n+            AddressKind::Pathname(path) => write!(fmt, \"{path:?} (pathname)\"),\n         }\n     }\n }"}, {"sha": "fb1ff4b725ced26b90ae9c27e9b0625220a751c6", "filename": "library/std/src/os/unix/net/ancillary.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -396,7 +396,7 @@ impl<'a> Iterator for Messages<'a> {\n ///     for ancillary_result in ancillary.messages() {\n ///         if let AncillaryData::ScmRights(scm_rights) = ancillary_result.unwrap() {\n ///             for fd in scm_rights {\n-///                 println!(\"receive file descriptor: {}\", fd);\n+///                 println!(\"receive file descriptor: {fd}\");\n ///             }\n ///         }\n ///     }\n@@ -568,7 +568,7 @@ impl<'a> SocketAncillary<'a> {\n     ///     for ancillary_result in ancillary.messages() {\n     ///         if let AncillaryData::ScmRights(scm_rights) = ancillary_result.unwrap() {\n     ///             for fd in scm_rights {\n-    ///                 println!(\"receive file descriptor: {}\", fd);\n+    ///                 println!(\"receive file descriptor: {fd}\");\n     ///             }\n     ///         }\n     ///     }\n@@ -579,7 +579,7 @@ impl<'a> SocketAncillary<'a> {\n     ///     for ancillary_result in ancillary.messages() {\n     ///         if let AncillaryData::ScmRights(scm_rights) = ancillary_result.unwrap() {\n     ///             for fd in scm_rights {\n-    ///                 println!(\"receive file descriptor: {}\", fd);\n+    ///                 println!(\"receive file descriptor: {fd}\");\n     ///             }\n     ///         }\n     ///     }"}, {"sha": "59c91e9a82e1a55335034b227d4fb783d0b2e3ae", "filename": "library/std/src/os/unix/net/datagram.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fdatagram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fdatagram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fdatagram.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -95,7 +95,7 @@ impl UnixDatagram {\n     /// let sock = match UnixDatagram::bind(\"/path/to/the/socket\") {\n     ///     Ok(sock) => sock,\n     ///     Err(e) => {\n-    ///         println!(\"Couldn't bind: {:?}\", e);\n+    ///         println!(\"Couldn't bind: {e:?}\");\n     ///         return\n     ///     }\n     /// };\n@@ -127,7 +127,7 @@ impl UnixDatagram {\n     ///     let sock2 = match UnixDatagram::bind_addr(&addr) {\n     ///         Ok(sock) => sock,\n     ///         Err(err) => {\n-    ///             println!(\"Couldn't bind: {:?}\", err);\n+    ///             println!(\"Couldn't bind: {err:?}\");\n     ///             return Err(err);\n     ///         }\n     ///     };\n@@ -157,7 +157,7 @@ impl UnixDatagram {\n     /// let sock = match UnixDatagram::unbound() {\n     ///     Ok(sock) => sock,\n     ///     Err(e) => {\n-    ///         println!(\"Couldn't unbound: {:?}\", e);\n+    ///         println!(\"Couldn't unbound: {e:?}\");\n     ///         return\n     ///     }\n     /// };\n@@ -180,7 +180,7 @@ impl UnixDatagram {\n     /// let (sock1, sock2) = match UnixDatagram::pair() {\n     ///     Ok((sock1, sock2)) => (sock1, sock2),\n     ///     Err(e) => {\n-    ///         println!(\"Couldn't unbound: {:?}\", e);\n+    ///         println!(\"Couldn't unbound: {e:?}\");\n     ///         return\n     ///     }\n     /// };\n@@ -210,7 +210,7 @@ impl UnixDatagram {\n     ///     match sock.connect(\"/path/to/the/socket\") {\n     ///         Ok(sock) => sock,\n     ///         Err(e) => {\n-    ///             println!(\"Couldn't connect: {:?}\", e);\n+    ///             println!(\"Couldn't connect: {e:?}\");\n     ///             return Err(e)\n     ///         }\n     ///     };\n@@ -243,7 +243,7 @@ impl UnixDatagram {\n     ///     match sock.connect_addr(&addr) {\n     ///         Ok(sock) => sock,\n     ///         Err(e) => {\n-    ///             println!(\"Couldn't connect: {:?}\", e);\n+    ///             println!(\"Couldn't connect: {e:?}\");\n     ///             return Err(e)\n     ///         }\n     ///     };\n@@ -367,7 +367,7 @@ impl UnixDatagram {\n     ///     let sock = UnixDatagram::unbound()?;\n     ///     let mut buf = vec![0; 10];\n     ///     let (size, sender) = sock.recv_from(buf.as_mut_slice())?;\n-    ///     println!(\"received {} bytes from {:?}\", size, sender);\n+    ///     println!(\"received {size} bytes from {sender:?}\");\n     ///     Ok(())\n     /// }\n     /// ```\n@@ -422,11 +422,11 @@ impl UnixDatagram {\n     ///     let mut ancillary_buffer = [0; 128];\n     ///     let mut ancillary = SocketAncillary::new(&mut ancillary_buffer[..]);\n     ///     let (size, _truncated, sender) = sock.recv_vectored_with_ancillary_from(bufs, &mut ancillary)?;\n-    ///     println!(\"received {}\", size);\n+    ///     println!(\"received {size}\");\n     ///     for ancillary_result in ancillary.messages() {\n     ///         if let AncillaryData::ScmRights(scm_rights) = ancillary_result.unwrap() {\n     ///             for fd in scm_rights {\n-    ///                 println!(\"receive file descriptor: {}\", fd);\n+    ///                 println!(\"receive file descriptor: {fd}\");\n     ///             }\n     ///         }\n     ///     }\n@@ -479,11 +479,11 @@ impl UnixDatagram {\n     ///     let mut ancillary_buffer = [0; 128];\n     ///     let mut ancillary = SocketAncillary::new(&mut ancillary_buffer[..]);\n     ///     let (size, _truncated) = sock.recv_vectored_with_ancillary(bufs, &mut ancillary)?;\n-    ///     println!(\"received {}\", size);\n+    ///     println!(\"received {size}\");\n     ///     for ancillary_result in ancillary.messages() {\n     ///         if let AncillaryData::ScmRights(scm_rights) = ancillary_result.unwrap() {\n     ///             for fd in scm_rights {\n-    ///                 println!(\"receive file descriptor: {}\", fd);\n+    ///                 println!(\"receive file descriptor: {fd}\");\n     ///             }\n     ///         }\n     ///     }\n@@ -893,7 +893,7 @@ impl UnixDatagram {\n     /// fn main() -> std::io::Result<()> {\n     ///     let sock = UnixDatagram::unbound()?;\n     ///     if let Ok(Some(err)) = sock.take_error() {\n-    ///         println!(\"Got error: {:?}\", err);\n+    ///         println!(\"Got error: {err:?}\");\n     ///     }\n     ///     Ok(())\n     /// }"}, {"sha": "8e11d32f13071dfb58ef3d91f1a734c0851cf4fb", "filename": "library/std/src/os/unix/net/listener.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Flistener.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Flistener.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Flistener.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -63,7 +63,7 @@ impl UnixListener {\n     /// let listener = match UnixListener::bind(\"/path/to/the/socket\") {\n     ///     Ok(sock) => sock,\n     ///     Err(e) => {\n-    ///         println!(\"Couldn't connect: {:?}\", e);\n+    ///         println!(\"Couldn't connect: {e:?}\");\n     ///         return\n     ///     }\n     /// };\n@@ -98,7 +98,7 @@ impl UnixListener {\n     ///     let listener2 = match UnixListener::bind_addr(&addr) {\n     ///         Ok(sock) => sock,\n     ///         Err(err) => {\n-    ///             println!(\"Couldn't bind: {:?}\", err);\n+    ///             println!(\"Couldn't bind: {err:?}\");\n     ///             return Err(err);\n     ///         }\n     ///     };\n@@ -136,8 +136,8 @@ impl UnixListener {\n     ///     let listener = UnixListener::bind(\"/path/to/the/socket\")?;\n     ///\n     ///     match listener.accept() {\n-    ///         Ok((socket, addr)) => println!(\"Got a client: {:?}\", addr),\n-    ///         Err(e) => println!(\"accept function failed: {:?}\", e),\n+    ///         Ok((socket, addr)) => println!(\"Got a client: {addr:?}\"),\n+    ///         Err(e) => println!(\"accept function failed: {e:?}\"),\n     ///     }\n     ///     Ok(())\n     /// }\n@@ -226,7 +226,7 @@ impl UnixListener {\n     ///     let listener = UnixListener::bind(\"/tmp/sock\")?;\n     ///\n     ///     if let Ok(Some(err)) = listener.take_error() {\n-    ///         println!(\"Got error: {:?}\", err);\n+    ///         println!(\"Got error: {err:?}\");\n     ///     }\n     ///     Ok(())\n     /// }"}, {"sha": "3943b4fed0949c6803f8467678d37a68192dd62e", "filename": "library/std/src/os/unix/net/stream.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fstream.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -57,7 +57,7 @@ pub use ucred::UCred;\n ///     stream.write_all(b\"hello world\")?;\n ///     let mut response = String::new();\n ///     stream.read_to_string(&mut response)?;\n-///     println!(\"{}\", response);\n+///     println!(\"{response}\");\n ///     Ok(())\n /// }\n /// ```\n@@ -90,7 +90,7 @@ impl UnixStream {\n     /// let socket = match UnixStream::connect(\"/tmp/sock\") {\n     ///     Ok(sock) => sock,\n     ///     Err(e) => {\n-    ///         println!(\"Couldn't connect: {:?}\", e);\n+    ///         println!(\"Couldn't connect: {e:?}\");\n     ///         return\n     ///     }\n     /// };\n@@ -123,7 +123,7 @@ impl UnixStream {\n     ///     let sock = match UnixStream::connect_addr(&addr) {\n     ///         Ok(sock) => sock,\n     ///         Err(e) => {\n-    ///             println!(\"Couldn't connect: {:?}\", e);\n+    ///             println!(\"Couldn't connect: {e:?}\");\n     ///             return Err(e)\n     ///         }\n     ///     };\n@@ -155,7 +155,7 @@ impl UnixStream {\n     /// let (sock1, sock2) = match UnixStream::pair() {\n     ///     Ok((sock1, sock2)) => (sock1, sock2),\n     ///     Err(e) => {\n-    ///         println!(\"Couldn't create a pair of sockets: {:?}\", e);\n+    ///         println!(\"Couldn't create a pair of sockets: {e:?}\");\n     ///         return\n     ///     }\n     /// };\n@@ -443,7 +443,7 @@ impl UnixStream {\n     /// fn main() -> std::io::Result<()> {\n     ///     let socket = UnixStream::connect(\"/tmp/sock\")?;\n     ///     if let Ok(Some(err)) = socket.take_error() {\n-    ///         println!(\"Got error: {:?}\", err);\n+    ///         println!(\"Got error: {err:?}\");\n     ///     }\n     ///     Ok(())\n     /// }\n@@ -530,11 +530,11 @@ impl UnixStream {\n     ///     let mut ancillary_buffer = [0; 128];\n     ///     let mut ancillary = SocketAncillary::new(&mut ancillary_buffer[..]);\n     ///     let size = socket.recv_vectored_with_ancillary(bufs, &mut ancillary)?;\n-    ///     println!(\"received {}\", size);\n+    ///     println!(\"received {size}\");\n     ///     for ancillary_result in ancillary.messages() {\n     ///         if let AncillaryData::ScmRights(scm_rights) = ancillary_result.unwrap() {\n     ///             for fd in scm_rights {\n-    ///                 println!(\"receive file descriptor: {}\", fd);\n+    ///                 println!(\"receive file descriptor: {fd}\");\n     ///             }\n     ///         }\n     ///     }"}, {"sha": "aa0df61c1920d628c6e8f3963c936ef488fb0147", "filename": "library/std/src/os/unix/net/tests.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Ftests.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -29,7 +29,7 @@ macro_rules! or_panic {\n     ($e:expr) => {\n         match $e {\n             Ok(e) => e,\n-            Err(e) => panic!(\"{}\", e),\n+            Err(e) => panic!(\"{e}\"),\n         }\n     };\n }\n@@ -161,19 +161,19 @@ fn long_path() {\n     );\n     match UnixStream::connect(&socket_path) {\n         Err(ref e) if e.kind() == io::ErrorKind::InvalidInput => {}\n-        Err(e) => panic!(\"unexpected error {}\", e),\n+        Err(e) => panic!(\"unexpected error {e}\"),\n         Ok(_) => panic!(\"unexpected success\"),\n     }\n \n     match UnixListener::bind(&socket_path) {\n         Err(ref e) if e.kind() == io::ErrorKind::InvalidInput => {}\n-        Err(e) => panic!(\"unexpected error {}\", e),\n+        Err(e) => panic!(\"unexpected error {e}\"),\n         Ok(_) => panic!(\"unexpected success\"),\n     }\n \n     match UnixDatagram::bind(&socket_path) {\n         Err(ref e) if e.kind() == io::ErrorKind::InvalidInput => {}\n-        Err(e) => panic!(\"unexpected error {}\", e),\n+        Err(e) => panic!(\"unexpected error {e}\"),\n         Ok(_) => panic!(\"unexpected success\"),\n     }\n }\n@@ -524,7 +524,7 @@ fn test_abstract_namespace_too_long() {\n         jklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\",\n     ) {\n         Err(ref e) if e.kind() == io::ErrorKind::InvalidInput => {}\n-        Err(e) => panic!(\"unexpected error {}\", e),\n+        Err(e) => panic!(\"unexpected error {e}\"),\n         Ok(_) => panic!(\"unexpected success\"),\n     }\n }\n@@ -564,7 +564,7 @@ fn test_unix_stream_peek() {\n     match stream.peek(&mut buf) {\n         Ok(_) => panic!(\"expected error\"),\n         Err(ref e) if e.kind() == ErrorKind::WouldBlock => {}\n-        Err(e) => panic!(\"unexpected error: {}\", e),\n+        Err(e) => panic!(\"unexpected error: {e}\"),\n     }\n \n     or_panic!(txdone.send(()));"}, {"sha": "03de7eed6d4c8868b014ee87337a68a43a89d8a8", "filename": "library/std/src/panicking.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanicking.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -283,7 +283,7 @@ fn default_hook(info: &PanicInfo<'_>) {\n     let name = thread.as_ref().and_then(|t| t.name()).unwrap_or(\"<unnamed>\");\n \n     let write = |err: &mut dyn crate::io::Write| {\n-        let _ = writeln!(err, \"thread '{}' panicked at '{}', {}\", name, msg, location);\n+        let _ = writeln!(err, \"thread '{name}' panicked at '{msg}', {location}\");\n \n         static FIRST_PANIC: AtomicBool = AtomicBool::new(true);\n \n@@ -677,7 +677,7 @@ fn rust_panic_with_hook(\n             // Unfortunately, this does not print a backtrace, because creating\n             // a `Backtrace` will allocate, which we must to avoid here.\n             let panicinfo = PanicInfo::internal_constructor(message, location, can_unwind);\n-            rtprintpanic!(\"{}\\npanicked after panic::always_abort(), aborting.\\n\", panicinfo);\n+            rtprintpanic!(\"{panicinfo}\\npanicked after panic::always_abort(), aborting.\\n\");\n         }\n         crate::sys::abort_internal();\n     }\n@@ -745,5 +745,5 @@ fn rust_panic(mut msg: &mut dyn BoxMeUp) -> ! {\n         let obj = &mut msg as *mut &mut dyn BoxMeUp;\n         __rust_start_panic(obj)\n     };\n-    rtabort!(\"failed to initiate panic, error {}\", code)\n+    rtabort!(\"failed to initiate panic, error {code}\")\n }"}, {"sha": "bcf5c9328b79c6d73c951aa8959c06f1e870ca2b", "filename": "library/std/src/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -592,7 +592,7 @@ impl AsRef<Path> for Component<'_> {\n /// let path = Path::new(\"/tmp/foo/bar.txt\");\n ///\n /// for component in path.components() {\n-///     println!(\"{:?}\", component);\n+///     println!(\"{component:?}\");\n /// }\n /// ```\n ///"}, {"sha": "c8dc768d3fc8eca8bfcadc7ae9496d30ab0d25ee", "filename": "library/std/src/path/tests.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fpath%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fpath%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath%2Ftests.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -1586,17 +1586,17 @@ fn test_components_debug() {\n     let mut components = path.components();\n \n     let expected = \"Components([RootDir, Normal(\\\"tmp\\\")])\";\n-    let actual = format!(\"{:?}\", components);\n+    let actual = format!(\"{components:?}\");\n     assert_eq!(expected, actual);\n \n     let _ = components.next().unwrap();\n     let expected = \"Components([Normal(\\\"tmp\\\")])\";\n-    let actual = format!(\"{:?}\", components);\n+    let actual = format!(\"{components:?}\");\n     assert_eq!(expected, actual);\n \n     let _ = components.next().unwrap();\n     let expected = \"Components([])\";\n-    let actual = format!(\"{:?}\", components);\n+    let actual = format!(\"{components:?}\");\n     assert_eq!(expected, actual);\n }\n \n@@ -1608,17 +1608,17 @@ fn test_iter_debug() {\n     let mut iter = path.iter();\n \n     let expected = \"Iter([\\\"/\\\", \\\"tmp\\\"])\";\n-    let actual = format!(\"{:?}\", iter);\n+    let actual = format!(\"{iter:?}\");\n     assert_eq!(expected, actual);\n \n     let _ = iter.next().unwrap();\n     let expected = \"Iter([\\\"tmp\\\"])\";\n-    let actual = format!(\"{:?}\", iter);\n+    let actual = format!(\"{iter:?}\");\n     assert_eq!(expected, actual);\n \n     let _ = iter.next().unwrap();\n     let expected = \"Iter([])\";\n-    let actual = format!(\"{:?}\", iter);\n+    let actual = format!(\"{iter:?}\");\n     assert_eq!(expected, actual);\n }\n \n@@ -1770,7 +1770,7 @@ fn test_windows_absolute() {\n fn bench_path_cmp_fast_path_buf_sort(b: &mut test::Bencher) {\n     let prefix = \"my/home\";\n     let mut paths: Vec<_> =\n-        (0..1000).map(|num| PathBuf::from(prefix).join(format!(\"file {}.rs\", num))).collect();\n+        (0..1000).map(|num| PathBuf::from(prefix).join(format!(\"file {num}.rs\"))).collect();\n \n     paths.sort();\n \n@@ -1783,7 +1783,7 @@ fn bench_path_cmp_fast_path_buf_sort(b: &mut test::Bencher) {\n fn bench_path_cmp_fast_path_long(b: &mut test::Bencher) {\n     let prefix = \"/my/home/is/my/castle/and/my/castle/has/a/rusty/workbench/\";\n     let paths: Vec<_> =\n-        (0..1000).map(|num| PathBuf::from(prefix).join(format!(\"file {}.rs\", num))).collect();\n+        (0..1000).map(|num| PathBuf::from(prefix).join(format!(\"file {num}.rs\"))).collect();\n \n     let mut set = BTreeSet::new();\n \n@@ -1801,7 +1801,7 @@ fn bench_path_cmp_fast_path_long(b: &mut test::Bencher) {\n fn bench_path_cmp_fast_path_short(b: &mut test::Bencher) {\n     let prefix = \"my/home\";\n     let paths: Vec<_> =\n-        (0..1000).map(|num| PathBuf::from(prefix).join(format!(\"file {}.rs\", num))).collect();\n+        (0..1000).map(|num| PathBuf::from(prefix).join(format!(\"file {num}.rs\"))).collect();\n \n     let mut set = BTreeSet::new();\n \n@@ -1819,7 +1819,7 @@ fn bench_path_cmp_fast_path_short(b: &mut test::Bencher) {\n fn bench_path_hashset(b: &mut test::Bencher) {\n     let prefix = \"/my/home/is/my/castle/and/my/castle/has/a/rusty/workbench/\";\n     let paths: Vec<_> =\n-        (0..1000).map(|num| PathBuf::from(prefix).join(format!(\"file {}.rs\", num))).collect();\n+        (0..1000).map(|num| PathBuf::from(prefix).join(format!(\"file {num}.rs\"))).collect();\n \n     let mut set = HashSet::new();\n \n@@ -1837,7 +1837,7 @@ fn bench_path_hashset(b: &mut test::Bencher) {\n fn bench_path_hashset_miss(b: &mut test::Bencher) {\n     let prefix = \"/my/home/is/my/castle/and/my/castle/has/a/rusty/workbench/\";\n     let paths: Vec<_> =\n-        (0..1000).map(|num| PathBuf::from(prefix).join(format!(\"file {}.rs\", num))).collect();\n+        (0..1000).map(|num| PathBuf::from(prefix).join(format!(\"file {num}.rs\"))).collect();\n \n     let mut set = HashSet::new();\n "}, {"sha": "225a679efd22132ced410bf29008fbd7e3212ee0", "filename": "library/std/src/primitive_docs.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprimitive_docs.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -607,7 +607,7 @@ mod prim_pointer {}\n ///\n /// // This loop prints: 0 1 2\n /// for x in array {\n-///     print!(\"{} \", x);\n+///     print!(\"{x} \");\n /// }\n /// ```\n ///\n@@ -646,19 +646,19 @@ mod prim_pointer {}\n /// // This creates a slice iterator, producing references to each value.\n /// for item in array.into_iter().enumerate() {\n ///     let (i, x): (usize, &i32) = item;\n-///     println!(\"array[{}] = {}\", i, x);\n+///     println!(\"array[{i}] = {x}\");\n /// }\n ///\n /// // The `array_into_iter` lint suggests this change for future compatibility:\n /// for item in array.iter().enumerate() {\n ///     let (i, x): (usize, &i32) = item;\n-///     println!(\"array[{}] = {}\", i, x);\n+///     println!(\"array[{i}] = {x}\");\n /// }\n ///\n /// // You can explicitly iterate an array by value using `IntoIterator::into_iter`\n /// for item in IntoIterator::into_iter(array).enumerate() {\n ///     let (i, x): (usize, i32) = item;\n-///     println!(\"array[{}] = {}\", i, x);\n+///     println!(\"array[{i}] = {x}\");\n /// }\n /// ```\n ///\n@@ -673,13 +673,13 @@ mod prim_pointer {}\n /// // This iterates by reference:\n /// for item in array.iter().enumerate() {\n ///     let (i, x): (usize, &i32) = item;\n-///     println!(\"array[{}] = {}\", i, x);\n+///     println!(\"array[{i}] = {x}\");\n /// }\n ///\n /// // This iterates by value:\n /// for item in array.into_iter().enumerate() {\n ///     let (i, x): (usize, i32) = item;\n-///     println!(\"array[{}] = {}\", i, x);\n+///     println!(\"array[{i}] = {x}\");\n /// }\n /// ```\n ///\n@@ -702,26 +702,26 @@ mod prim_pointer {}\n /// // This iterates by reference:\n /// for item in array.iter() {\n ///     let x: &i32 = item;\n-///     println!(\"{}\", x);\n+///     println!(\"{x}\");\n /// }\n ///\n /// // This iterates by value:\n /// for item in IntoIterator::into_iter(array) {\n ///     let x: i32 = item;\n-///     println!(\"{}\", x);\n+///     println!(\"{x}\");\n /// }\n ///\n /// // This iterates by value:\n /// for item in array {\n ///     let x: i32 = item;\n-///     println!(\"{}\", x);\n+///     println!(\"{x}\");\n /// }\n ///\n /// // IntoIter can also start a chain.\n /// // This iterates by value:\n /// for item in IntoIterator::into_iter(array).enumerate() {\n ///     let (i, x): (usize, i32) = item;\n-///     println!(\"array[{}] = {}\", i, x);\n+///     println!(\"array[{i}] = {x}\");\n /// }\n /// ```\n ///"}, {"sha": "d88ab6253712abb2f13d74c50d38808268d4e374", "filename": "library/std/src/process.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -915,7 +915,7 @@ impl Command {\n     ///                      .status()\n     ///                      .expect(\"failed to execute process\");\n     ///\n-    /// println!(\"process finished with: {}\", status);\n+    /// println!(\"process finished with: {status}\");\n     ///\n     /// assert!(status.success());\n     /// ```\n@@ -1434,7 +1434,7 @@ impl ExitStatus {\n     ///                      .status()\n     ///                      .expect(\"ls could not be executed\");\n     ///\n-    /// println!(\"ls: {}\", status);\n+    /// println!(\"ls: {status}\");\n     /// status.exit_ok().expect_err(\"/dev/nonexistent could be listed!\");\n     /// # } // cfg!(unix)\n     /// ```\n@@ -1459,7 +1459,7 @@ impl ExitStatus {\n     /// if status.success() {\n     ///     println!(\"'projects/' directory created\");\n     /// } else {\n-    ///     println!(\"failed to create 'projects/' directory: {}\", status);\n+    ///     println!(\"failed to create 'projects/' directory: {status}\");\n     /// }\n     /// ```\n     #[must_use]\n@@ -1490,7 +1490,7 @@ impl ExitStatus {\n     ///                      .expect(\"failed to execute mkdir\");\n     ///\n     /// match status.code() {\n-    ///     Some(code) => println!(\"Exited with status code: {}\", code),\n+    ///     Some(code) => println!(\"Exited with status code: {code}\"),\n     ///     None       => println!(\"Process terminated by signal\")\n     /// }\n     /// ```\n@@ -1806,13 +1806,13 @@ impl Child {\n     /// let mut child = Command::new(\"ls\").spawn().unwrap();\n     ///\n     /// match child.try_wait() {\n-    ///     Ok(Some(status)) => println!(\"exited with: {}\", status),\n+    ///     Ok(Some(status)) => println!(\"exited with: {status}\"),\n     ///     Ok(None) => {\n     ///         println!(\"status not ready yet, let's really wait\");\n     ///         let res = child.wait();\n-    ///         println!(\"result: {:?}\", res);\n+    ///         println!(\"result: {res:?}\");\n     ///     }\n-    ///     Err(e) => println!(\"error attempting to wait: {}\", e),\n+    ///     Err(e) => println!(\"error attempting to wait: {e}\"),\n     /// }\n     /// ```\n     #[stable(feature = \"process_try_wait\", since = \"1.18.0\")]\n@@ -1912,7 +1912,7 @@ impl Child {\n ///     std::process::exit(match run_app() {\n ///         Ok(_) => 0,\n ///         Err(err) => {\n-///             eprintln!(\"error: {:?}\", err);\n+///             eprintln!(\"error: {err:?}\");\n ///             1\n ///         }\n ///     });\n@@ -2071,7 +2071,7 @@ impl Termination for ! {\n impl<E: fmt::Debug> Termination for Result<!, E> {\n     fn report(self) -> ExitCode {\n         let Err(err) = self;\n-        eprintln!(\"Error: {:?}\", err);\n+        eprintln!(\"Error: {err:?}\");\n         ExitCode::FAILURE.report()\n     }\n }"}, {"sha": "4f779ab4e786c65788a1e51e6c2f8a7c3ae67361", "filename": "library/std/src/process/tests.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fprocess%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fprocess%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess%2Ftests.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -64,7 +64,7 @@ fn signal_reported_right() {\n     p.kill().unwrap();\n     match p.wait().unwrap().signal() {\n         Some(9) => {}\n-        result => panic!(\"not terminated by signal 9 (instead, {:?})\", result),\n+        result => panic!(\"not terminated by signal 9 (instead, {result:?})\"),\n     }\n }\n \n@@ -252,8 +252,7 @@ fn test_override_env() {\n \n     assert!(\n         output.contains(\"RUN_TEST_NEW_ENV=123\"),\n-        \"didn't find RUN_TEST_NEW_ENV inside of:\\n\\n{}\",\n-        output\n+        \"didn't find RUN_TEST_NEW_ENV inside of:\\n\\n{output}\",\n     );\n }\n \n@@ -265,8 +264,7 @@ fn test_add_to_env() {\n \n     assert!(\n         output.contains(\"RUN_TEST_NEW_ENV=123\"),\n-        \"didn't find RUN_TEST_NEW_ENV inside of:\\n\\n{}\",\n-        output\n+        \"didn't find RUN_TEST_NEW_ENV inside of:\\n\\n{output}\"\n     );\n }\n \n@@ -288,13 +286,11 @@ fn test_capture_env_at_spawn() {\n \n     assert!(\n         output.contains(\"RUN_TEST_NEW_ENV1=123\"),\n-        \"didn't find RUN_TEST_NEW_ENV1 inside of:\\n\\n{}\",\n-        output\n+        \"didn't find RUN_TEST_NEW_ENV1 inside of:\\n\\n{output}\"\n     );\n     assert!(\n         output.contains(\"RUN_TEST_NEW_ENV2=456\"),\n-        \"didn't find RUN_TEST_NEW_ENV2 inside of:\\n\\n{}\",\n-        output\n+        \"didn't find RUN_TEST_NEW_ENV2 inside of:\\n\\n{output}\"\n     );\n }\n "}, {"sha": "87d01daeafc4cc18e5427a82d900c9261ae0e2d1", "filename": "library/std/src/sync/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fsync%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fsync%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmod.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -19,7 +19,7 @@\n //!         B = 4;\n //!         A = A + B;\n //!         C = B;\n-//!         println!(\"{} {} {}\", A, B, C);\n+//!         println!(\"{A} {B} {C}\");\n //!         C = A;\n //!     }\n //! }"}, {"sha": "e85a87239651884e56c3deac672876cef1f362be", "filename": "library/std/src/sync/mpsc/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fmod.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -129,7 +129,7 @@\n //!\n //! // Unbounded receiver waiting for all senders to complete.\n //! while let Ok(msg) = rx.recv() {\n-//!     println!(\"{}\", msg);\n+//!     println!(\"{msg}\");\n //! }\n //!\n //! println!(\"completed\");\n@@ -376,7 +376,7 @@ impl<T> !Sync for Receiver<T> {}\n /// });\n ///\n /// for x in recv.iter() {\n-///     println!(\"Got: {}\", x);\n+///     println!(\"Got: {x}\");\n /// }\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -419,7 +419,7 @@ pub struct Iter<'a, T: 'a> {\n /// thread::sleep(Duration::from_secs(2)); // block for two seconds\n ///\n /// for x in receiver.try_iter() {\n-///     println!(\"Got: {}\", x);\n+///     println!(\"Got: {x}\");\n /// }\n /// ```\n #[stable(feature = \"receiver_try_iter\", since = \"1.15.0\")]\n@@ -453,7 +453,7 @@ pub struct TryIter<'a, T: 'a> {\n /// });\n ///\n /// for x in recv.into_iter() {\n-///     println!(\"Got: {}\", x);\n+///     println!(\"Got: {x}\");\n /// }\n /// ```\n #[stable(feature = \"receiver_into_iter\", since = \"1.1.0\")]\n@@ -544,16 +544,16 @@ impl<T> !Sync for Sender<T> {}\n /// let mut msg;\n ///\n /// msg = receiver.recv().unwrap();\n-/// println!(\"message {} received\", msg);\n+/// println!(\"message {msg} received\");\n ///\n /// // \"Thread unblocked!\" will be printed now\n ///\n /// msg = receiver.recv().unwrap();\n-/// println!(\"message {} received\", msg);\n+/// println!(\"message {msg} received\");\n ///\n /// msg = receiver.recv().unwrap();\n ///\n-/// println!(\"message {} received\", msg);\n+/// println!(\"message {msg} received\");\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct SyncSender<T> {\n@@ -996,14 +996,14 @@ impl<T> SyncSender<T> {\n     ///\n     /// let mut msg;\n     /// msg = receiver.recv().unwrap();\n-    /// println!(\"message {} received\", msg);\n+    /// println!(\"message {msg} received\");\n     ///\n     /// msg = receiver.recv().unwrap();\n-    /// println!(\"message {} received\", msg);\n+    /// println!(\"message {msg} received\");\n     ///\n     /// // Third message may have never been sent\n     /// match receiver.try_recv() {\n-    ///     Ok(msg) => println!(\"message {} received\", msg),\n+    ///     Ok(msg) => println!(\"message {msg} received\"),\n     ///     Err(_) => println!(\"the third message was never sent\"),\n     /// }\n     /// ```"}, {"sha": "561626555441045ac7129266a43ce3c6e38b4cbb", "filename": "library/std/src/sync/mpsc/shared.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fshared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fshared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fshared.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -369,7 +369,7 @@ impl<T> Packet<T> {\n         match self.channels.fetch_sub(1, Ordering::SeqCst) {\n             1 => {}\n             n if n > 1 => return,\n-            n => panic!(\"bad number of channels left {}\", n),\n+            n => panic!(\"bad number of channels left {n}\"),\n         }\n \n         match self.cnt.swap(DISCONNECTED, Ordering::SeqCst) {"}, {"sha": "93900566f1194371e5ae34cbcc343389b42095b9", "filename": "library/std/src/sync/mutex/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fsync%2Fmutex%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fsync%2Fmutex%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmutex%2Ftests.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -94,7 +94,7 @@ fn test_into_inner_poison() {\n     assert!(m.is_poisoned());\n     match Arc::try_unwrap(m).unwrap().into_inner() {\n         Err(e) => assert_eq!(e.into_inner(), NonCopy(10)),\n-        Ok(x) => panic!(\"into_inner of poisoned Mutex is Ok: {:?}\", x),\n+        Ok(x) => panic!(\"into_inner of poisoned Mutex is Ok: {x:?}\"),\n     }\n }\n \n@@ -118,7 +118,7 @@ fn test_get_mut_poison() {\n     assert!(m.is_poisoned());\n     match Arc::try_unwrap(m).unwrap().get_mut() {\n         Err(e) => assert_eq!(*e.into_inner(), NonCopy(10)),\n-        Ok(x) => panic!(\"get_mut of poisoned Mutex is Ok: {:?}\", x),\n+        Ok(x) => panic!(\"get_mut of poisoned Mutex is Ok: {x:?}\"),\n     }\n }\n "}, {"sha": "07a90da449c9d17ff23763545aadbce02151e4aa", "filename": "library/std/src/sync/poison.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fsync%2Fpoison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fsync%2Fpoison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fpoison.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -73,7 +73,7 @@ pub struct Guard {\n ///     Ok(_) => unreachable!(),\n ///     Err(p_err) => {\n ///         let data = p_err.get_ref();\n-///         println!(\"recovered: {}\", data);\n+///         println!(\"recovered: {data}\");\n ///     }\n /// };\n /// ```"}, {"sha": "53aa2b1e38a91cbd8b8b93c891bcb1d04ab8e6a7", "filename": "library/std/src/sync/rwlock/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fsync%2Frwlock%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fsync%2Frwlock%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Frwlock%2Ftests.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -218,7 +218,7 @@ fn test_into_inner_poison() {\n     assert!(m.is_poisoned());\n     match Arc::try_unwrap(m).unwrap().into_inner() {\n         Err(e) => assert_eq!(e.into_inner(), NonCopy(10)),\n-        Ok(x) => panic!(\"into_inner of poisoned RwLock is Ok: {:?}\", x),\n+        Ok(x) => panic!(\"into_inner of poisoned RwLock is Ok: {x:?}\"),\n     }\n }\n \n@@ -242,6 +242,6 @@ fn test_get_mut_poison() {\n     assert!(m.is_poisoned());\n     match Arc::try_unwrap(m).unwrap().get_mut() {\n         Err(e) => assert_eq!(*e.into_inner(), NonCopy(10)),\n-        Ok(x) => panic!(\"get_mut of poisoned RwLock is Ok: {:?}\", x),\n+        Ok(x) => panic!(\"get_mut of poisoned RwLock is Ok: {x:?}\"),\n     }\n }"}, {"sha": "9508c38741551c8a975c89e87aea20eb0b5d1520", "filename": "library/std/src/sys/sgx/abi/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fmod.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -95,7 +95,7 @@ extern \"C\" fn entry(p1: u64, p2: u64, p3: u64, secondary: bool, p4: u64, p5: u64\n pub(super) fn exit_with_code(code: isize) -> ! {\n     if code != 0 {\n         if let Some(mut out) = panic::SgxPanicOutput::new() {\n-            let _ = write!(out, \"Exited with status code {}\", code);\n+            let _ = write!(out, \"Exited with status code {code}\");\n         }\n     }\n     usercalls::exit(code != 0);"}, {"sha": "4030355f13518fb7f56a33487f983f1d35138f31", "filename": "library/std/src/sys/sgx/abi/usercalls/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Fmod.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -83,7 +83,7 @@ pub fn close(fd: Fd) {\n \n fn string_from_bytebuffer(buf: &alloc::UserRef<ByteBuffer>, usercall: &str, arg: &str) -> String {\n     String::from_utf8(buf.copy_user_buffer())\n-        .unwrap_or_else(|_| rtabort!(\"Usercall {}: expected {} to be valid UTF-8\", usercall, arg))\n+        .unwrap_or_else(|_| rtabort!(\"Usercall {usercall}: expected {arg} to be valid UTF-8\"))\n }\n \n /// Usercall `bind_stream`. See the ABI documentation for more information.\n@@ -287,7 +287,7 @@ fn check_os_error(err: Result) -> i32 {\n     {\n         err\n     } else {\n-        rtabort!(\"Usercall: returned invalid error value {}\", err)\n+        rtabort!(\"Usercall: returned invalid error value {err}\")\n     }\n }\n "}, {"sha": "4267b96ccd504474fc049c73aa80aff9aa511211", "filename": "library/std/src/sys/sgx/abi/usercalls/raw.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Fraw.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -132,7 +132,7 @@ impl<T: RegisterArgument> RegisterArgument for Option<NonNull<T>> {\n \n impl ReturnValue for ! {\n     fn from_registers(call: &'static str, _regs: (Register, Register)) -> Self {\n-        rtabort!(\"Usercall {}: did not expect to be re-entered\", call);\n+        rtabort!(\"Usercall {call}: did not expect to be re-entered\");\n     }\n }\n "}, {"sha": "feb0b62dcd1f71ec1d3a56d3942df075b508d065", "filename": "library/std/src/sys/sgx/net.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fnet.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -501,7 +501,7 @@ impl<'a> TryFrom<(&'a str, u16)> for LookupHost {\n     type Error = io::Error;\n \n     fn try_from((host, port): (&'a str, u16)) -> io::Result<LookupHost> {\n-        LookupHost::new(format!(\"{}:{}\", host, port))\n+        LookupHost::new(format!(\"{host}:{port}\"))\n     }\n }\n "}, {"sha": "5da0257f35de5cfd46a656c1f6815bf1d48f2c14", "filename": "library/std/src/sys/sgx/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fos.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -22,7 +22,7 @@ pub fn error_string(errno: i32) -> String {\n     if errno == RESULT_SUCCESS {\n         \"operation successful\".into()\n     } else if ((Error::UserRangeStart as _)..=(Error::UserRangeEnd as _)).contains(&errno) {\n-        format!(\"user-specified error {:08x}\", errno)\n+        format!(\"user-specified error {errno:08x}\")\n     } else {\n         decode_error_kind(errno).as_str().into()\n     }"}, {"sha": "2e680e740fde3a48a632232e914f28985d50198b", "filename": "library/std/src/sys/sgx/stdio.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fstdio.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -83,6 +83,6 @@ pub unsafe extern \"C\" fn __rust_print_err(m: *mut u8, s: i32) {\n     }\n     let buf = unsafe { slice::from_raw_parts(m as *const u8, s as _) };\n     if let Ok(s) = str::from_utf8(&buf[..buf.iter().position(|&b| b == 0).unwrap_or(buf.len())]) {\n-        eprint!(\"{}\", s);\n+        eprint!(\"{s}\");\n     }\n }"}, {"sha": "049460755d65ad8fefaeccc7140f74968f78a738", "filename": "library/std/src/sys/solid/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fmod.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -87,7 +87,7 @@ pub fn hashmap_random_keys() -> (u64, u64) {\n     unsafe {\n         let mut out = crate::mem::MaybeUninit::<[u64; 2]>::uninit();\n         let result = abi::SOLID_RNG_SampleRandomBytes(out.as_mut_ptr() as *mut u8, 16);\n-        assert_eq!(result, 0, \"SOLID_RNG_SampleRandomBytes failed: {}\", result);\n+        assert_eq!(result, 0, \"SOLID_RNG_SampleRandomBytes failed: {result}\");\n         let [x1, x2] = out.assume_init();\n         (x1, x2)\n     }"}, {"sha": "faeda5a854d9f3981a0f1bd85272db8d89c10057", "filename": "library/std/src/sys/solid/net.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fnet.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -157,7 +157,7 @@ pub fn cvt_gai(err: c_int) -> io::Result<()> {\n         };\n         Err(io::Error::new(\n             io::ErrorKind::Uncategorized,\n-            &format!(\"failed to lookup address information: {}\", msg)[..],\n+            &format!(\"failed to lookup address information: {msg}\")[..],\n         ))\n     }\n }"}, {"sha": "127cca3accad9d341ca0518758e16b4f1d1bd466", "filename": "library/std/src/sys/solid/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fos.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -26,7 +26,7 @@ pub fn errno() -> i32 {\n }\n \n pub fn error_string(errno: i32) -> String {\n-    if let Some(name) = error::error_name(errno) { name.to_owned() } else { format!(\"{}\", errno) }\n+    if let Some(name) = error::error_name(errno) { name.to_owned() } else { format!(\"{errno}\") }\n }\n \n pub fn getcwd() -> io::Result<PathBuf> {"}, {"sha": "e6fd9a0c827e2302957837b5a3311634be1a4472", "filename": "library/std/src/sys/unix/net.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -54,7 +54,7 @@ pub fn cvt_gai(err: c_int) -> io::Result<()> {\n \n     Err(io::Error::new(\n         io::ErrorKind::Uncategorized,\n-        &format!(\"failed to lookup address information: {}\", detail)[..],\n+        &format!(\"failed to lookup address information: {detail}\")[..],\n     ))\n }\n "}, {"sha": "213277f01f2a6bec51d8302b965c7277e5675c8f", "filename": "library/std/src/sys/unix/os_str/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos_str%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos_str%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos_str%2Ftests.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -4,7 +4,7 @@ use super::*;\n fn slice_debug_output() {\n     let input = Slice::from_u8_slice(b\"\\xF0hello,\\tworld\");\n     let expected = r#\"\"\\xF0hello,\\tworld\"\"#;\n-    let output = format!(\"{:?}\", input);\n+    let output = format!(\"{input:?}\");\n \n     assert_eq!(output, expected);\n }"}, {"sha": "e3347ab12a7309e8bca82bd9a6b67a197cf5cda6", "filename": "library/std/src/sys/unix/process/process_fuchsia.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -211,7 +211,7 @@ impl Process {\n                     return Ok(None);\n                 }\n                 _ => {\n-                    panic!(\"Failed to wait on process handle: {}\", status);\n+                    panic!(\"Failed to wait on process handle: {status}\");\n                 }\n             }\n             zx_cvt(zx_object_get_info("}, {"sha": "9c477e5addc44a167e5ccbfcbd99865775f05cc8", "filename": "library/std/src/sys/unix/process/process_unix.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -120,7 +120,7 @@ impl Command {\n                 Err(ref e) if e.kind() == ErrorKind::Interrupted => {}\n                 Err(e) => {\n                     assert!(p.wait().is_ok(), \"wait() should either return Ok or panic\");\n-                    panic!(\"the CLOEXEC pipe failed: {:?}\", e)\n+                    panic!(\"the CLOEXEC pipe failed: {e:?}\")\n                 }\n                 Ok(..) => {\n                     // pipe I/O up to PIPE_BUF bytes should be atomic\n@@ -682,15 +682,15 @@ impl From<c_int> for ExitStatus {\n impl fmt::Display for ExitStatus {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         if let Some(code) = self.code() {\n-            write!(f, \"exit status: {}\", code)\n+            write!(f, \"exit status: {code}\")\n         } else if let Some(signal) = self.signal() {\n             if self.core_dumped() {\n-                write!(f, \"signal: {} (core dumped)\", signal)\n+                write!(f, \"signal: {signal} (core dumped)\")\n             } else {\n-                write!(f, \"signal: {}\", signal)\n+                write!(f, \"signal: {signal}\")\n             }\n         } else if let Some(signal) = self.stopped_signal() {\n-            write!(f, \"stopped (not terminated) by signal: {}\", signal)\n+            write!(f, \"stopped (not terminated) by signal: {signal}\")\n         } else if self.continued() {\n             write!(f, \"continued (WIFCONTINUED)\")\n         } else {"}, {"sha": "016bc20ec0a47dcbd13c8f30612bfef338dcc8ea", "filename": "library/std/src/sys/unix/process/process_vxworks.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_vxworks.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -239,10 +239,10 @@ impl From<c_int> for ExitStatus {\n impl fmt::Display for ExitStatus {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         if let Some(code) = self.code() {\n-            write!(f, \"exit code: {}\", code)\n+            write!(f, \"exit code: {code}\")\n         } else {\n             let signal = self.signal().unwrap();\n-            write!(f, \"signal: {}\", signal)\n+            write!(f, \"signal: {signal}\")\n         }\n     }\n }"}, {"sha": "17e8efbe097ce52c15a5296d108f4ef45b8b7dc1", "filename": "library/std/src/sys/unix/rand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fsys%2Funix%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fsys%2Funix%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Frand.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -82,7 +82,7 @@ mod imp {\n                 } else if err == libc::EAGAIN {\n                     return false;\n                 } else {\n-                    panic!(\"unexpected getrandom error: {}\", err);\n+                    panic!(\"unexpected getrandom error: {err}\");\n                 }\n             } else {\n                 read += result as usize;"}, {"sha": "450bceae0008125d5142a5e2ecfdca52e94ad26f", "filename": "library/std/src/sys/windows/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fos.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -64,7 +64,7 @@ pub fn error_string(mut errnum: i32) -> String {\n         if res == 0 {\n             // Sometimes FormatMessageW can fail e.g., system doesn't like langId,\n             let fm_err = errno();\n-            return format!(\"OS Error {} (FormatMessageW() returned error {})\", errnum, fm_err);\n+            return format!(\"OS Error {errnum} (FormatMessageW() returned error {fm_err})\");\n         }\n \n         match String::from_utf16(&buf[..res]) {"}, {"sha": "d8c9beb0c19750249d3c36c55b89798a7125bf68", "filename": "library/std/src/sys/windows/process/tests.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess%2Ftests.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -121,9 +121,7 @@ fn windows_env_unicode_case() {\n             assert_eq!(\n                 env::var(key).ok(),\n                 value.map(|s| s.to_string_lossy().into_owned()),\n-                \"command environment mismatch: {} {}\",\n-                a,\n-                b\n+                \"command environment mismatch: {a} {b}\",\n             );\n         }\n     }"}, {"sha": "5888ee8e34bfb386d076e37004d52eb3e3f9d9f9", "filename": "library/std/src/sys/windows/thread_parker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread_parker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread_parker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread_parker.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -230,7 +230,7 @@ fn keyed_event_handle() -> c::HANDLE {\n                     0,\n                 ) {\n                     c::STATUS_SUCCESS => {}\n-                    r => panic!(\"Unable to create keyed event handle: error {}\", r),\n+                    r => panic!(\"Unable to create keyed event handle: error {r}\"),\n                 }\n             }\n             match HANDLE.compare_exchange(INVALID, handle as usize, Relaxed, Relaxed) {"}, {"sha": "31164afdc7b54ace44c47f57f322cdb129c89d3b", "filename": "library/std/src/sys_common/backtrace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fsys_common%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fsys_common%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fbacktrace.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -174,7 +174,7 @@ pub fn output_filename(\n         if let Some(cwd) = cwd {\n             if let Ok(stripped) = file.strip_prefix(&cwd) {\n                 if let Some(s) = stripped.to_str() {\n-                    return write!(fmt, \".{}{}\", path::MAIN_SEPARATOR, s);\n+                    return write!(fmt, \".{}{s}\", path::MAIN_SEPARATOR);\n                 }\n             }\n         }"}, {"sha": "ac75d9ebfc85509f1a9b9894de8ec65a1c4c9021", "filename": "library/std/src/sys_common/net/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fsys_common%2Fnet%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fsys_common%2Fnet%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fnet%2Ftests.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -6,7 +6,7 @@ fn no_lookup_host_duplicates() {\n     let mut addrs = HashMap::new();\n     let lh = match LookupHost::try_from((\"localhost\", 0)) {\n         Ok(lh) => lh,\n-        Err(e) => panic!(\"couldn't resolve `localhost': {}\", e),\n+        Err(e) => panic!(\"couldn't resolve `localhost': {e}\"),\n     };\n     for sa in lh {\n         *addrs.entry(sa).or_insert(0) += 1;"}, {"sha": "ffb61200e15f9b523ffaa0710edef8837d424467", "filename": "library/std/src/sys_common/thread_parker/generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parker%2Fgeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parker%2Fgeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parker%2Fgeneric.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -84,7 +84,7 @@ impl Parker {\n         match self.state.swap(EMPTY, SeqCst) {\n             NOTIFIED => {} // got a notification, hurray!\n             PARKED => {}   // no notification, alas\n-            n => panic!(\"inconsistent park_timeout state: {}\", n),\n+            n => panic!(\"inconsistent park_timeout state: {n}\"),\n         }\n     }\n "}, {"sha": "10ef6662115c1f300297b308ab832ccccc6b9b6d", "filename": "library/std/src/sys_common/wtf8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -830,7 +830,7 @@ pub unsafe fn slice_unchecked(s: &Wtf8, begin: usize, end: usize) -> &Wtf8 {\n #[inline(never)]\n pub fn slice_error_fail(s: &Wtf8, begin: usize, end: usize) -> ! {\n     assert!(begin <= end);\n-    panic!(\"index {} and/or {} in `{:?}` do not lie on character boundary\", begin, end, s);\n+    panic!(\"index {begin} and/or {end} in `{s:?}` do not lie on character boundary\");\n }\n \n /// Iterator for the code points of a WTF-8 string."}, {"sha": "931996791fbe55b5d2131ae9b376c9b1be780c33", "filename": "library/std/src/sys_common/wtf8/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8%2Ftests.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -266,7 +266,7 @@ fn wtf8buf_extend() {\n fn wtf8buf_show() {\n     let mut string = Wtf8Buf::from_str(\"a\\t\u00e9 \\u{7f}\ud83d\udca9\\r\");\n     string.push(CodePoint::from_u32(0xD800).unwrap());\n-    assert_eq!(format!(\"{:?}\", string), \"\\\"a\\\\t\u00e9 \\\\u{7f}\\u{1f4a9}\\\\r\\\\u{d800}\\\"\");\n+    assert_eq!(format!(\"{string:?}\"), \"\\\"a\\\\t\u00e9 \\\\u{7f}\\u{1f4a9}\\\\r\\\\u{d800}\\\"\");\n }\n \n #[test]\n@@ -278,7 +278,7 @@ fn wtf8buf_as_slice() {\n fn wtf8buf_show_str() {\n     let text = \"a\\t\u00e9 \ud83d\udca9\\r\";\n     let string = Wtf8Buf::from_str(text);\n-    assert_eq!(format!(\"{:?}\", text), format!(\"{:?}\", string));\n+    assert_eq!(format!(\"{text:?}\"), format!(\"{string:?}\"));\n }\n \n #[test]"}, {"sha": "ae292caaed9945f844d5bccb77149e613c0d3aae", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -613,7 +613,7 @@ impl Builder {\n ///\n /// let receiver = thread::spawn(move || {\n ///     let value = rx.recv().expect(\"Unable to receive from channel\");\n-///     println!(\"{}\", value);\n+///     println!(\"{value}\");\n /// });\n ///\n /// sender.join().expect(\"The sender thread has panicked\");\n@@ -633,7 +633,7 @@ impl Builder {\n /// });\n ///\n /// let result = computation.join().unwrap();\n-/// println!(\"{}\", result);\n+/// println!(\"{result}\");\n /// ```\n ///\n /// [`channels`]: crate::sync::mpsc\n@@ -979,7 +979,7 @@ pub fn park_timeout_ms(ms: u32) {\n ///     if elapsed >= timeout {\n ///         break;\n ///     }\n-///     println!(\"restarting park_timeout after {:?}\", elapsed);\n+///     println!(\"restarting park_timeout after {elapsed:?}\");\n ///     timeout_remaining = timeout - elapsed;\n /// }\n /// ```"}, {"sha": "07e113f3b622299546a1912ffe7e7ba1f1580b9d", "filename": "library/std/src/thread/scoped.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fthread%2Fscoped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Fthread%2Fscoped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fscoped.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -22,7 +22,7 @@ pub struct Scope<'scope, 'env: 'scope> {\n     /// std::thread::scope(|s| {\n     ///     s.spawn(|| {\n     ///         let a = String::from(\"abcd\");\n-    ///         s.spawn(|| println!(\"{:?}\", a)); // might run after `a` is dropped\n+    ///         s.spawn(|| println!(\"{a:?}\")); // might run after `a` is dropped\n     ///     });\n     /// });\n     /// ```"}, {"sha": "2f8eb557b4f74718c98a2bba8d8504d1a608a277", "filename": "library/std/src/time.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ftime.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -191,7 +191,7 @@ pub struct Instant(time::Instant);\n ///        }\n ///        Err(e) => {\n ///            // an error occurred!\n-///            println!(\"Error: {:?}\", e);\n+///            println!(\"Error: {e:?}\");\n ///        }\n ///    }\n /// }\n@@ -513,7 +513,7 @@ impl SystemTime {\n     /// let new_sys_time = SystemTime::now();\n     /// let difference = new_sys_time.duration_since(sys_time)\n     ///     .expect(\"Clock may have gone backwards\");\n-    /// println!(\"{:?}\", difference);\n+    /// println!(\"{difference:?}\");\n     /// ```\n     #[stable(feature = \"time2\", since = \"1.8.0\")]\n     pub fn duration_since(&self, earlier: SystemTime) -> Result<Duration, SystemTimeError> {"}, {"sha": "d710a574465ce019ef9d0006453c987ed274be12", "filename": "library/std/src/time/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Ftime%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Fstd%2Fsrc%2Ftime%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ftime%2Ftests.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -55,10 +55,10 @@ fn instant_elapsed() {\n fn instant_math() {\n     let a = Instant::now();\n     let b = Instant::now();\n-    println!(\"a: {:?}\", a);\n-    println!(\"b: {:?}\", b);\n+    println!(\"a: {a:?}\");\n+    println!(\"b: {b:?}\");\n     let dur = b.duration_since(a);\n-    println!(\"dur: {:?}\", dur);\n+    println!(\"dur: {dur:?}\");\n     assert_almost_eq!(b - dur, a);\n     assert_almost_eq!(a + dur, b);\n "}, {"sha": "000f5fa3f5860842463b8ca38afa0630879c3696", "filename": "library/test/src/cli.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Ftest%2Fsrc%2Fcli.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Ftest%2Fsrc%2Fcli.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fcli.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -149,7 +149,7 @@ fn optgroups() -> getopts::Options {\n }\n \n fn usage(binary: &str, options: &getopts::Options) {\n-    let message = format!(\"Usage: {} [OPTIONS] [FILTERS...]\", binary);\n+    let message = format!(\"Usage: {binary} [OPTIONS] [FILTERS...]\");\n     println!(\n         r#\"{usage}\n \n@@ -360,7 +360,7 @@ fn get_shuffle_seed(matches: &getopts::Matches, allow_unstable: bool) -> OptPart\n         shuffle_seed = match env::var(\"RUST_TEST_SHUFFLE_SEED\") {\n             Ok(val) => match val.parse::<u64>() {\n                 Ok(n) => Some(n),\n-                Err(_) => panic!(\"RUST_TEST_SHUFFLE_SEED is `{}`, should be a number.\", val),\n+                Err(_) => panic!(\"RUST_TEST_SHUFFLE_SEED is `{val}`, should be a number.\"),\n             },\n             Err(_) => None,\n         };"}, {"sha": "c7e8507113e0c178bd9e418e74519a3bad0b1f6f", "filename": "library/test/src/console.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Ftest%2Fsrc%2Fconsole.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Ftest%2Fsrc%2Fconsole.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fconsole.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -114,11 +114,11 @@ impl ConsoleTestState {\n                 match *result {\n                     TestResult::TrOk => \"ok\".to_owned(),\n                     TestResult::TrFailed => \"failed\".to_owned(),\n-                    TestResult::TrFailedMsg(ref msg) => format!(\"failed: {}\", msg),\n+                    TestResult::TrFailedMsg(ref msg) => format!(\"failed: {msg}\"),\n                     TestResult::TrIgnored => {\n                         #[cfg(not(bootstrap))]\n                         if let Some(msg) = ignore_message {\n-                            format!(\"ignored, {}\", msg)\n+                            format!(\"ignored, {msg}\")\n                         } else {\n                             \"ignored\".to_owned()\n                         }\n@@ -132,7 +132,7 @@ impl ConsoleTestState {\n             )\n         })?;\n         if let Some(exec_time) = exec_time {\n-            self.write_log(|| format!(\" <{}>\", exec_time))?;\n+            self.write_log(|| format!(\" <{exec_time}>\"))?;\n         }\n         self.write_log(|| \"\\n\")\n     }\n@@ -171,14 +171,14 @@ pub fn list_tests_console(opts: &TestOpts, tests: Vec<TestDescAndFn>) -> io::Res\n             }\n         };\n \n-        writeln!(output, \"{}: {}\", name, fntype)?;\n-        st.write_log(|| format!(\"{} {}\\n\", fntype, name))?;\n+        writeln!(output, \"{name}: {fntype}\")?;\n+        st.write_log(|| format!(\"{fntype} {name}\\n\"))?;\n     }\n \n     fn plural(count: u32, s: &str) -> String {\n         match count {\n-            1 => format!(\"{} {}\", 1, s),\n-            n => format!(\"{} {}s\", n, s),\n+            1 => format!(\"1 {s}\"),\n+            n => format!(\"{n} {s}s\"),\n         }\n     }\n \n@@ -218,7 +218,7 @@ fn handle_test_result(st: &mut ConsoleTestState, completed_test: CompletedTest)\n         TestResult::TrFailedMsg(msg) => {\n             st.failed += 1;\n             let mut stdout = stdout;\n-            stdout.extend_from_slice(format!(\"note: {}\", msg).as_bytes());\n+            stdout.extend_from_slice(format!(\"note: {msg}\").as_bytes());\n             st.failures.push((test, stdout));\n         }\n         TestResult::TrTimedFail => {"}, {"sha": "e6fb4f5707b35b17ef0c913d9880b2bee839ee9a", "filename": "library/test/src/formatters/junit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Ftest%2Fsrc%2Fformatters%2Fjunit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Ftest%2Fsrc%2Fformatters%2Fjunit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fjunit.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -97,7 +97,7 @@ impl<T: Write> OutputFormatter for JunitFormatter<T> {\n                         test_name,\n                         duration.as_secs_f64()\n                     ))?;\n-                    self.write_message(&*format!(\"<failure message=\\\"{}\\\" type=\\\"assert\\\"/>\", m))?;\n+                    self.write_message(&*format!(\"<failure message=\\\"{m}\\\" type=\\\"assert\\\"/>\"))?;\n                     self.write_message(\"</testcase>\")?;\n                 }\n "}, {"sha": "f55d390aa562130d4da2eb674d4c32a6937f2cb6", "filename": "library/test/src/formatters/pretty.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Ftest%2Fsrc%2Fformatters%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Ftest%2Fsrc%2Fformatters%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fpretty.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -96,7 +96,7 @@ impl<T: Write> PrettyFormatter<T> {\n         exec_time: Option<&time::TestExecTime>,\n     ) -> io::Result<()> {\n         if let (Some(opts), Some(time)) = (self.time_options, exec_time) {\n-            let time_str = format!(\" <{}>\", time);\n+            let time_str = format!(\" <{time}>\");\n \n             let color = if self.use_color {\n                 if opts.is_critical(desc, time) {\n@@ -124,7 +124,7 @@ impl<T: Write> PrettyFormatter<T> {\n         inputs: &Vec<(TestDesc, Vec<u8>)>,\n         results_type: &str,\n     ) -> io::Result<()> {\n-        let results_out_str = format!(\"\\n{}:\\n\", results_type);\n+        let results_out_str = format!(\"\\n{results_type}:\\n\");\n \n         self.write_plain(&results_out_str)?;\n \n@@ -147,7 +147,7 @@ impl<T: Write> PrettyFormatter<T> {\n         self.write_plain(&results_out_str)?;\n         results.sort();\n         for name in &results {\n-            self.write_plain(&format!(\"    {}\\n\", name))?;\n+            self.write_plain(&format!(\"    {name}\\n\"))?;\n         }\n         Ok(())\n     }\n@@ -167,9 +167,9 @@ impl<T: Write> PrettyFormatter<T> {\n     fn write_test_name(&mut self, desc: &TestDesc) -> io::Result<()> {\n         let name = desc.padded_name(self.max_name_len, desc.name.padding());\n         if let Some(test_mode) = desc.test_mode() {\n-            self.write_plain(&format!(\"test {} - {} ... \", name, test_mode))?;\n+            self.write_plain(&format!(\"test {name} - {test_mode} ... \"))?;\n         } else {\n-            self.write_plain(&format!(\"test {} ... \", name))?;\n+            self.write_plain(&format!(\"test {name} ... \"))?;\n         }\n \n         Ok(())\n@@ -180,11 +180,11 @@ impl<T: Write> OutputFormatter for PrettyFormatter<T> {\n     fn write_run_start(&mut self, test_count: usize, shuffle_seed: Option<u64>) -> io::Result<()> {\n         let noun = if test_count != 1 { \"tests\" } else { \"test\" };\n         let shuffle_seed_msg = if let Some(shuffle_seed) = shuffle_seed {\n-            format!(\" (shuffle seed: {})\", shuffle_seed)\n+            format!(\" (shuffle seed: {shuffle_seed})\")\n         } else {\n             String::new()\n         };\n-        self.write_plain(&format!(\"\\nrunning {} {}{}\\n\", test_count, noun, shuffle_seed_msg))\n+        self.write_plain(&format!(\"\\nrunning {test_count} {noun}{shuffle_seed_msg}\\n\"))\n     }\n \n     fn write_test_start(&mut self, desc: &TestDesc) -> io::Result<()> {\n@@ -266,7 +266,7 @@ impl<T: Write> OutputFormatter for PrettyFormatter<T> {\n         self.write_plain(&s)?;\n \n         if let Some(ref exec_time) = state.exec_time {\n-            let time_str = format!(\"; finished in {}\", exec_time);\n+            let time_str = format!(\"; finished in {exec_time}\");\n             self.write_plain(&time_str)?;\n         }\n "}, {"sha": "fb40f86b42e19ebfdcec4c15e288c171be262f9f", "filename": "library/test/src/formatters/terse.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Ftest%2Fsrc%2Fformatters%2Fterse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Ftest%2Fsrc%2Fformatters%2Fterse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fterse.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -122,7 +122,7 @@ impl<T: Write> TerseFormatter<T> {\n         self.write_plain(\"\\nsuccesses:\\n\")?;\n         successes.sort();\n         for name in &successes {\n-            self.write_plain(&format!(\"    {}\\n\", name))?;\n+            self.write_plain(&format!(\"    {name}\\n\"))?;\n         }\n         Ok(())\n     }\n@@ -148,17 +148,17 @@ impl<T: Write> TerseFormatter<T> {\n         self.write_plain(\"\\nfailures:\\n\")?;\n         failures.sort();\n         for name in &failures {\n-            self.write_plain(&format!(\"    {}\\n\", name))?;\n+            self.write_plain(&format!(\"    {name}\\n\"))?;\n         }\n         Ok(())\n     }\n \n     fn write_test_name(&mut self, desc: &TestDesc) -> io::Result<()> {\n         let name = desc.padded_name(self.max_name_len, desc.name.padding());\n         if let Some(test_mode) = desc.test_mode() {\n-            self.write_plain(&format!(\"test {} - {} ... \", name, test_mode))?;\n+            self.write_plain(&format!(\"test {name} - {test_mode} ... \"))?;\n         } else {\n-            self.write_plain(&format!(\"test {} ... \", name))?;\n+            self.write_plain(&format!(\"test {name} ... \"))?;\n         }\n \n         Ok(())\n@@ -170,11 +170,11 @@ impl<T: Write> OutputFormatter for TerseFormatter<T> {\n         self.total_test_count = test_count;\n         let noun = if test_count != 1 { \"tests\" } else { \"test\" };\n         let shuffle_seed_msg = if let Some(shuffle_seed) = shuffle_seed {\n-            format!(\" (shuffle seed: {})\", shuffle_seed)\n+            format!(\" (shuffle seed: {shuffle_seed})\")\n         } else {\n             String::new()\n         };\n-        self.write_plain(&format!(\"\\nrunning {} {}{}\\n\", test_count, noun, shuffle_seed_msg))\n+        self.write_plain(&format!(\"\\nrunning {test_count} {noun}{shuffle_seed_msg}\\n\"))\n     }\n \n     fn write_test_start(&mut self, desc: &TestDesc) -> io::Result<()> {\n@@ -247,7 +247,7 @@ impl<T: Write> OutputFormatter for TerseFormatter<T> {\n         self.write_plain(&s)?;\n \n         if let Some(ref exec_time) = state.exec_time {\n-            let time_str = format!(\"; finished in {}\", exec_time);\n+            let time_str = format!(\"; finished in {exec_time}\");\n             self.write_plain(&time_str)?;\n         }\n "}, {"sha": "eb211157371b55b532c5888c9b93fc9856b1f9fb", "filename": "library/test/src/helpers/concurrency.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Ftest%2Fsrc%2Fhelpers%2Fconcurrency.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Ftest%2Fsrc%2Fhelpers%2Fconcurrency.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fhelpers%2Fconcurrency.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -6,7 +6,7 @@ pub fn get_concurrency() -> usize {\n     if let Ok(value) = env::var(\"RUST_TEST_THREADS\") {\n         match value.parse::<NonZeroUsize>().ok() {\n             Some(n) => n.get(),\n-            _ => panic!(\"RUST_TEST_THREADS is `{}`, should be a positive integer.\", value),\n+            _ => panic!(\"RUST_TEST_THREADS is `{value}`, should be a positive integer.\"),\n         }\n     } else {\n         thread::available_parallelism().map(|n| n.get()).unwrap_or(1)"}, {"sha": "f762f88819da530c8206c92736bb0bc7304c7bc8", "filename": "library/test/src/helpers/exit_code.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Ftest%2Fsrc%2Fhelpers%2Fexit_code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Ftest%2Fsrc%2Fhelpers%2Fexit_code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fhelpers%2Fexit_code.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -13,7 +13,7 @@ pub fn get_exit_code(status: ExitStatus) -> Result<i32, String> {\n     match status.code() {\n         Some(code) => Ok(code),\n         None => match status.signal() {\n-            Some(signal) => Err(format!(\"child process exited with signal {}\", signal)),\n+            Some(signal) => Err(format!(\"child process exited with signal {signal}\")),\n             None => Err(\"child process exited with unknown signal\".into()),\n         },\n     }"}, {"sha": "088e3a23ea4d9f5af235472b09164de7f920b814", "filename": "library/test/src/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Ftest%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Ftest%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Flib.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -99,7 +99,7 @@ pub fn test_main(args: &[String], tests: Vec<TestDescAndFn>, options: Option<Opt\n     let mut opts = match cli::parse_opts(args) {\n         Some(Ok(o)) => o,\n         Some(Err(msg)) => {\n-            eprintln!(\"error: {}\", msg);\n+            eprintln!(\"error: {msg}\");\n             process::exit(ERROR_EXIT_CODE);\n         }\n         None => return,\n@@ -109,15 +109,15 @@ pub fn test_main(args: &[String], tests: Vec<TestDescAndFn>, options: Option<Opt\n     }\n     if opts.list {\n         if let Err(e) = console::list_tests_console(&opts, tests) {\n-            eprintln!(\"error: io error when listing tests: {:?}\", e);\n+            eprintln!(\"error: io error when listing tests: {e:?}\");\n             process::exit(ERROR_EXIT_CODE);\n         }\n     } else {\n         match console::run_tests_console(&opts, tests) {\n             Ok(true) => {}\n             Ok(false) => process::exit(ERROR_EXIT_CODE),\n             Err(e) => {\n-                eprintln!(\"error: io error when listing tests: {:?}\", e);\n+                eprintln!(\"error: io error when listing tests: {e:?}\");\n                 process::exit(ERROR_EXIT_CODE);\n             }\n         }\n@@ -153,7 +153,7 @@ pub fn test_main_static_abort(tests: &[&TestDescAndFn]) {\n             .filter(|test| test.desc.name.as_slice() == name)\n             .map(make_owned_test)\n             .next()\n-            .unwrap_or_else(|| panic!(\"couldn't find a test with the provided name '{}'\", name));\n+            .unwrap_or_else(|| panic!(\"couldn't find a test with the provided name '{name}'\"));\n         let TestDescAndFn { desc, testfn } = test;\n         let testfn = match testfn {\n             StaticTestFn(f) => f,\n@@ -524,7 +524,7 @@ pub fn run_test(\n                     Arc::get_mut(&mut runtest).unwrap().get_mut().unwrap().take().unwrap()();\n                     None\n                 }\n-                Err(e) => panic!(\"failed to spawn thread to run test: {}\", e),\n+                Err(e) => panic!(\"failed to spawn thread to run test: {e}\"),\n             }\n         } else {\n             runtest();\n@@ -678,7 +678,7 @@ fn run_test_in_spawned_subprocess(desc: TestDesc, testfn: Box<dyn FnOnce() + Sen\n         // We don't support serializing TrFailedMsg, so just\n         // print the message out to stderr.\n         if let TrFailedMsg(msg) = &test_result {\n-            eprintln!(\"{}\", msg);\n+            eprintln!(\"{msg}\");\n         }\n \n         if let Some(info) = panic_info {"}, {"sha": "0756c8374aa670d614c1d0c9b632af403e1fb22d", "filename": "library/test/src/term/terminfo/parm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Ftest%2Fsrc%2Fterm%2Fterminfo%2Fparm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Ftest%2Fsrc%2Fterm%2Fterminfo%2Fparm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fterm%2Fterminfo%2Fparm.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -268,7 +268,7 @@ pub(crate) fn expand(\n                     },\n                     'e' => state = SeekIfEnd(0),\n                     ';' => (),\n-                    _ => return Err(format!(\"unrecognized format option {}\", cur)),\n+                    _ => return Err(format!(\"unrecognized format option {cur}\")),\n                 }\n             }\n             PushParam => {"}, {"sha": "c738f3ba04fce1108973c6beef4ddcd7838457a8", "filename": "library/test/src/term/terminfo/parm/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Ftest%2Fsrc%2Fterm%2Fterminfo%2Fparm%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Ftest%2Fsrc%2Fterm%2Fterminfo%2Fparm%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fterm%2Fterminfo%2Fparm%2Ftests.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -78,15 +78,15 @@ fn test_push_bad_param() {\n fn test_comparison_ops() {\n     let v = [('<', [1u8, 0u8, 0u8]), ('=', [0u8, 1u8, 0u8]), ('>', [0u8, 0u8, 1u8])];\n     for &(op, bs) in v.iter() {\n-        let s = format!(\"%{{1}}%{{2}}%{}%d\", op);\n+        let s = format!(\"%{{1}}%{{2}}%{op}%d\");\n         let res = expand(s.as_bytes(), &[], &mut Variables::new());\n         assert!(res.is_ok(), \"{}\", res.unwrap_err());\n         assert_eq!(res.unwrap(), vec![b'0' + bs[0]]);\n-        let s = format!(\"%{{1}}%{{1}}%{}%d\", op);\n+        let s = format!(\"%{{1}}%{{1}}%{op}%d\");\n         let res = expand(s.as_bytes(), &[], &mut Variables::new());\n         assert!(res.is_ok(), \"{}\", res.unwrap_err());\n         assert_eq!(res.unwrap(), vec![b'0' + bs[1]]);\n-        let s = format!(\"%{{2}}%{{1}}%{}%d\", op);\n+        let s = format!(\"%{{2}}%{{1}}%{op}%d\");\n         let res = expand(s.as_bytes(), &[], &mut Variables::new());\n         assert!(res.is_ok(), \"{}\", res.unwrap_err());\n         assert_eq!(res.unwrap(), vec![b'0' + bs[2]]);"}, {"sha": "5d40b7988b52dad0cecd70a227e62f1d8f971916", "filename": "library/test/src/term/terminfo/parser/compiled.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Ftest%2Fsrc%2Fterm%2Fterminfo%2Fparser%2Fcompiled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Ftest%2Fsrc%2Fterm%2Fterminfo%2Fparser%2Fcompiled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fterm%2Fterminfo%2Fparser%2Fcompiled.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -198,7 +198,7 @@ pub(crate) fn parse(file: &mut dyn io::Read, longnames: bool) -> Result<TermInfo\n     let extended = match magic {\n         0o0432 => false,\n         0o01036 => true,\n-        _ => return Err(format!(\"invalid magic number, found {:o}\", magic)),\n+        _ => return Err(format!(\"invalid magic number, found {magic:o}\")),\n     };\n \n     // According to the spec, these fields must be >= -1 where -1 means that the feature is not"}, {"sha": "7f44d6e3d0f122dff5157cd0d2914f2e2f097499", "filename": "library/test/src/test_result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/library%2Ftest%2Fsrc%2Ftest_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/library%2Ftest%2Fsrc%2Ftest_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Ftest_result.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -89,7 +89,7 @@ pub fn get_result_from_exit_code(\n     let result = match code {\n         TR_OK => TestResult::TrOk,\n         TR_FAILED => TestResult::TrFailed,\n-        _ => TestResult::TrFailedMsg(format!(\"got unexpected return code {}\", code)),\n+        _ => TestResult::TrFailedMsg(format!(\"got unexpected return code {code}\")),\n     };\n \n     // If test is already failed (or allowed to fail), do not change the result."}, {"sha": "0fe39defae85dee45bd886b7ef28fc602aa579ba", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -259,18 +259,6 @@ impl Step for Llvm {\n             cfg.define(\"LLVM_LINK_LLVM_DYLIB\", \"ON\");\n         }\n \n-        // For distribution we want the LLVM tools to be *statically* linked to libstdc++.\n-        // We also do this if the user explicitly requested static libstdc++.\n-        if builder.config.llvm_tools_enabled || builder.config.llvm_static_stdcpp {\n-            if !target.contains(\"msvc\") && !target.contains(\"netbsd\") {\n-                if target.contains(\"apple\") {\n-                    ldflags.push_all(\"-static-libstdc++\");\n-                } else {\n-                    ldflags.push_all(\"-Wl,-Bsymbolic -static-libstdc++\");\n-                }\n-            }\n-        }\n-\n         if target.starts_with(\"riscv\") && !target.contains(\"freebsd\") {\n             // RISC-V GCC erroneously requires linking against\n             // `libatomic` when using 1-byte and 2-byte C++\n@@ -576,6 +564,18 @@ fn configure_cmake(\n         ldflags.push_all(&flags);\n     }\n \n+    // For distribution we want the LLVM tools to be *statically* linked to libstdc++.\n+    // We also do this if the user explicitly requested static libstdc++.\n+    if builder.config.llvm_tools_enabled || builder.config.llvm_static_stdcpp {\n+        if !target.contains(\"msvc\") && !target.contains(\"netbsd\") {\n+            if target.contains(\"apple\") {\n+                ldflags.push_all(\"-static-libstdc++\");\n+            } else {\n+                ldflags.push_all(\"-Wl,-Bsymbolic -static-libstdc++\");\n+            }\n+        }\n+    }\n+\n     cfg.define(\"CMAKE_SHARED_LINKER_FLAGS\", &ldflags.shared);\n     cfg.define(\"CMAKE_MODULE_LINKER_FLAGS\", &ldflags.module);\n     cfg.define(\"CMAKE_EXE_LINKER_FLAGS\", &ldflags.exe);"}, {"sha": "9b92bed1f02b3f729b394293170ddaec87471c2d", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-tools/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2FDockerfile?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -72,7 +72,7 @@ ENV PATH=\"/node-v14.4.0-linux-x64/bin:${PATH}\"\n # https://github.com/puppeteer/puppeteer/issues/375\n #\n # We also specify the version in case we need to update it to go around cache limitations.\n-RUN npm install -g browser-ui-test@0.7.2 --unsafe-perm=true\n+RUN npm install -g browser-ui-test@0.8.0 --unsafe-perm=true\n \n ENV RUST_CONFIGURE_ARGS \\\n   --build=x86_64-unknown-linux-gnu \\"}, {"sha": "38fd1db5c21e8d5a19461967726e01482b0fec3e", "filename": "src/doc/rustdoc/src/how-to-write-documentation.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/src%2Fdoc%2Frustdoc%2Fsrc%2Fhow-to-write-documentation.md", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/src%2Fdoc%2Frustdoc%2Fsrc%2Fhow-to-write-documentation.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fhow-to-write-documentation.md?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -126,7 +126,7 @@ use std::env;\n \n // Prints each argument on a separate line\n for argument in env::args() {\n-    println!(\"{}\", argument);\n+    println!(\"{argument}\");\n }\n ```\n "}, {"sha": "735521e667c91e78980d37af9c0dc909fc5c97c9", "filename": "src/doc/unstable-book/src/compiler-flags/sanitizer.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -240,7 +240,7 @@ fn do_twice(f: fn(i32) -> i32, arg: i32) -> i32 {\n fn main() {\n     let answer = do_twice(add_one, 5);\n \n-    println!(\"The answer is: {}\", answer);\n+    println!(\"The answer is: {answer}\");\n \n     println!(\"With CFI enabled, you should not see the next answer\");\n     let f: fn(i32) -> i32 = unsafe {\n@@ -250,7 +250,7 @@ fn main() {\n     };\n     let next_answer = do_twice(f, 5);\n \n-    println!(\"The next answer is: {}\", next_answer);\n+    println!(\"The next answer is: {next_answer}\");\n }\n ```\n Fig. 1.\u2003Modified example from the [Advanced Functions and\n@@ -303,14 +303,14 @@ fn do_twice(f: fn(i32) -> i32, arg: i32) -> i32 {\n fn main() {\n     let answer = do_twice(add_one, 5);\n \n-    println!(\"The answer is: {}\", answer);\n+    println!(\"The answer is: {answer}\");\n \n     println!(\"With CFI enabled, you should not see the next answer\");\n     let f: fn(i32) -> i32 =\n         unsafe { mem::transmute::<*const u8, fn(i32) -> i32>(add_two as *const u8) };\n     let next_answer = do_twice(f, 5);\n \n-    println!(\"The next answer is: {}\", next_answer);\n+    println!(\"The next answer is: {next_answer}\");\n }\n ```\n Fig. 4.\u2003Another modified example from the [Advanced Functions and"}, {"sha": "584f4295cba0fa349332261d3e4dcfe56bafd6d9", "filename": "src/doc/unstable-book/src/language-features/box-patterns.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fbox-patterns.md", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fbox-patterns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fbox-patterns.md?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -18,10 +18,10 @@ fn main() {\n     let b = Some(Box::new(5));\n     match b {\n         Some(box n) if n < 0 => {\n-            println!(\"Box contains negative number {}\", n);\n+            println!(\"Box contains negative number {n}\");\n         },\n         Some(box n) if n >= 0 => {\n-            println!(\"Box contains non-negative number {}\", n);\n+            println!(\"Box contains non-negative number {n}\");\n         },\n         None => {\n             println!(\"No box\");"}, {"sha": "fa0030a936030f12bcf5ad482674795fb0ec483d", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -829,7 +829,7 @@ fn clean_fn_decl_legacy_const_generics(func: &mut Function, attrs: &[ast::Attrib\n                             .values\n                             .insert(a as _, Argument { name, type_: *ty, is_const: true });\n                     } else {\n-                        panic!(\"unexpected non const in position {}\", pos);\n+                        panic!(\"unexpected non const in position {pos}\");\n                     }\n                 }\n                 _ => panic!(\"invalid arg index\"),"}, {"sha": "e9efeba02997faf8898466a8fe0e6e7b3d97f3c3", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 19, "deletions": 20, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -197,7 +197,7 @@ crate fn run(options: RustdocOptions) -> Result<(), ErrorGuaranteed> {\n                 .to_string();\n             let uext = UnusedExterns { lint_level, unused_extern_names };\n             let unused_extern_json = serde_json::to_string(&uext).unwrap();\n-            eprintln!(\"{}\", unused_extern_json);\n+            eprintln!(\"{unused_extern_json}\");\n         }\n     }\n \n@@ -430,7 +430,7 @@ fn run_test(\n                 // We used to check if the output contained \"error[{}]: \" but since we added the\n                 // colored output, we can't anymore because of the color escape characters before\n                 // the \":\".\n-                lang_string.error_codes.retain(|err| !out.contains(&format!(\"error[{}]\", err)));\n+                lang_string.error_codes.retain(|err| !out.contains(&format!(\"error[{err}]\")));\n \n                 if !lang_string.error_codes.is_empty() {\n                     return Err(TestFailure::MissingErrorCodes(lang_string.error_codes));\n@@ -510,7 +510,7 @@ crate fn make_test(\n \n     // Next, any attributes that came from the crate root via #![doc(test(attr(...)))].\n     for attr in &opts.attrs {\n-        prog.push_str(&format!(\"#![{}]\\n\", attr));\n+        prog.push_str(&format!(\"#![{attr}]\\n\"));\n         line_offset += 1;\n     }\n \n@@ -647,7 +647,7 @@ crate fn make_test(\n             // parse the source, but only has false positives, not false\n             // negatives.\n             if s.contains(crate_name) {\n-                prog.push_str(&format!(\"extern crate r#{};\\n\", crate_name));\n+                prog.push_str(&format!(\"extern crate r#{crate_name};\\n\"));\n                 line_offset += 1;\n             }\n         }\n@@ -661,23 +661,22 @@ crate fn make_test(\n         // Give each doctest main function a unique name.\n         // This is for example needed for the tooling around `-C instrument-coverage`.\n         let inner_fn_name = if let Some(test_id) = test_id {\n-            format!(\"_doctest_main_{}\", test_id)\n+            format!(\"_doctest_main_{test_id}\")\n         } else {\n             \"_inner\".into()\n         };\n         let inner_attr = if test_id.is_some() { \"#[allow(non_snake_case)] \" } else { \"\" };\n         let (main_pre, main_post) = if returns_result {\n             (\n                 format!(\n-                    \"fn main() {{ {}fn {}() -> Result<(), impl core::fmt::Debug> {{\\n\",\n-                    inner_attr, inner_fn_name\n+                    \"fn main() {{ {inner_attr}fn {inner_fn_name}() -> Result<(), impl core::fmt::Debug> {{\\n\",\n                 ),\n-                format!(\"\\n}} {}().unwrap() }}\", inner_fn_name),\n+                format!(\"\\n}} {inner_fn_name}().unwrap() }}\"),\n             )\n         } else if test_id.is_some() {\n             (\n-                format!(\"fn main() {{ {}fn {}() {{\\n\", inner_attr, inner_fn_name),\n-                format!(\"\\n}} {}() }}\", inner_fn_name),\n+                format!(\"fn main() {{ {inner_attr}fn {inner_fn_name}() {{\\n\",),\n+                format!(\"\\n}} {inner_fn_name}() }}\"),\n             )\n         } else {\n             (\"fn main() {\\n\".into(), \"\\n}\".into())\n@@ -695,7 +694,7 @@ crate fn make_test(\n         prog.extend([&main_pre, everything_else, &main_post].iter().cloned());\n     }\n \n-    debug!(\"final doctest:\\n{}\", prog);\n+    debug!(\"final doctest:\\n{prog}\");\n \n     (prog, line_offset, supports_color)\n }\n@@ -763,9 +762,9 @@ fn partition_source(s: &str) -> (String, String, String) {\n         }\n     }\n \n-    debug!(\"before:\\n{}\", before);\n-    debug!(\"crates:\\n{}\", crates);\n-    debug!(\"after:\\n{}\", after);\n+    debug!(\"before:\\n{before}\");\n+    debug!(\"crates:\\n{crates}\");\n+    debug!(\"after:\\n{after}\");\n \n     (before, after, crates)\n }\n@@ -940,7 +939,7 @@ impl Tester for Collector {\n             )\n         };\n \n-        debug!(\"creating test {}: {}\", name, test);\n+        debug!(\"creating test {name}: {test}\");\n         self.tests.push(test::TestDescAndFn {\n             desc: test::TestDesc {\n                 name: test::DynTestName(name),\n@@ -994,19 +993,19 @@ impl Tester for Collector {\n                             eprint!(\"Some expected error codes were not found: {:?}\", codes);\n                         }\n                         TestFailure::ExecutionError(err) => {\n-                            eprint!(\"Couldn't run the test: {}\", err);\n+                            eprint!(\"Couldn't run the test: {err}\");\n                             if err.kind() == io::ErrorKind::PermissionDenied {\n                                 eprint!(\" - maybe your tempdir is mounted with noexec?\");\n                             }\n                         }\n                         TestFailure::ExecutionFailure(out) => {\n                             let reason = if let Some(code) = out.status.code() {\n-                                format!(\"exit code {}\", code)\n+                                format!(\"exit code {code}\")\n                             } else {\n                                 String::from(\"terminated by signal\")\n                             };\n \n-                            eprintln!(\"Test executable failed ({}).\", reason);\n+                            eprintln!(\"Test executable failed ({reason}).\");\n \n                             // FIXME(#12309): An unfortunate side-effect of capturing the test\n                             // executable's output is that the relative ordering between the test's\n@@ -1024,11 +1023,11 @@ impl Tester for Collector {\n                                 eprintln!();\n \n                                 if !stdout.is_empty() {\n-                                    eprintln!(\"stdout:\\n{}\", stdout);\n+                                    eprintln!(\"stdout:\\n{stdout}\");\n                                 }\n \n                                 if !stderr.is_empty() {\n-                                    eprintln!(\"stderr:\\n{}\", stderr);\n+                                    eprintln!(\"stderr:\\n{stderr}\");\n                                 }\n                             }\n                         }"}, {"sha": "3a3d61b1e67cca0122973b6eaeb6d224823847e4", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -1314,7 +1314,7 @@ crate fn markdown_links(md: &str) -> Vec<MarkdownLink> {\n \n     for ev in iter {\n         if let Event::Start(Tag::Link(kind, dest, _)) = ev.0 {\n-            debug!(\"found link: {}\", dest);\n+            debug!(\"found link: {dest}\");\n             let span = span_for_link(&dest, ev.1);\n             links.borrow_mut().push(MarkdownLink { kind, link: dest.into_string(), range: span });\n         }"}, {"sha": "a1f92afad46a659bf53b511e640555c901fa2f73", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -51,7 +51,7 @@ crate fn render<P: AsRef<Path>>(\n \n     let mut css = String::new();\n     for name in &options.markdown_css {\n-        let s = format!(\"<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"{}\\\">\\n\", name);\n+        let s = format!(\"<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"{name}\\\">\\n\");\n         css.push_str(&s)\n     }\n "}, {"sha": "761539227a79c8a1b23264afe5c83780e25edab8", "filename": "src/test/ui/debuginfo/debuginfo-box-with-large-allocator.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftest%2Fui%2Fdebuginfo%2Fdebuginfo-box-with-large-allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftest%2Fui%2Fdebuginfo%2Fdebuginfo-box-with-large-allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdebuginfo%2Fdebuginfo-box-with-large-allocator.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -0,0 +1,23 @@\n+// build-pass\n+// compile-flags: -Cdebuginfo=2\n+// fixes issue #94725\n+\n+#![feature(allocator_api)]\n+\n+use std::alloc::{AllocError, Allocator, Layout};\n+use std::ptr::NonNull;\n+\n+struct ZST;\n+\n+unsafe impl Allocator for &ZST {\n+    fn allocate(&self, layout: Layout) -> Result<NonNull<[u8]>, AllocError> {\n+        todo!()\n+    }\n+    unsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout) {\n+        todo!()\n+    }\n+}\n+\n+fn main() {\n+    let _ = Box::<i32, &ZST>::new_in(43, &ZST);\n+}"}, {"sha": "b3f22ecf5115ea4ff6e06973ae7067eca67036ee", "filename": "src/test/ui/debuginfo/debuginfo_with_uninhabitable_field_and_unsized.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftest%2Fui%2Fdebuginfo%2Fdebuginfo_with_uninhabitable_field_and_unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftest%2Fui%2Fdebuginfo%2Fdebuginfo_with_uninhabitable_field_and_unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdebuginfo%2Fdebuginfo_with_uninhabitable_field_and_unsized.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -1,4 +1,4 @@\n-// check-pass\n+// build-pass\n // compile-flags: -Cdebuginfo=2\n // fixes issue #94149\n "}, {"sha": "29a6e1f8a016dce09c0fc95ff37c9e1803075725", "filename": "src/test/ui/feature-gates/feature-gate-non_exhaustive_omitted_patterns_lint.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_exhaustive_omitted_patterns_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_exhaustive_omitted_patterns_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_exhaustive_omitted_patterns_lint.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -1,31 +1,34 @@\n+// check-fail\n+\n #![deny(non_exhaustive_omitted_patterns)]\n-//~^ ERROR the `non_exhaustive_omitted_patterns` lint is unstable\n-//~| ERROR the `non_exhaustive_omitted_patterns` lint is unstable\n+//~^ WARNING unknown lint: `non_exhaustive_omitted_patterns`\n+//~| WARNING unknown lint: `non_exhaustive_omitted_patterns`\n #![allow(non_exhaustive_omitted_patterns)]\n-//~^ ERROR the `non_exhaustive_omitted_patterns` lint is unstable\n-//~| ERROR the `non_exhaustive_omitted_patterns` lint is unstable\n+//~^ WARNING unknown lint: `non_exhaustive_omitted_patterns`\n+//~| WARNING unknown lint: `non_exhaustive_omitted_patterns`\n \n fn main() {\n     enum Foo {\n         A, B, C,\n     }\n \n     #[allow(non_exhaustive_omitted_patterns)]\n+    //~^ WARNING unknown lint: `non_exhaustive_omitted_patterns`\n+    //~| WARNING unknown lint: `non_exhaustive_omitted_patterns`\n+    //~| WARNING unknown lint: `non_exhaustive_omitted_patterns`\n+    //~| WARNING unknown lint: `non_exhaustive_omitted_patterns`\n     match Foo::A {\n         Foo::A => {}\n         Foo::B => {}\n     }\n-    //~^^^^^ ERROR the `non_exhaustive_omitted_patterns` lint is unstable\n-    //~| ERROR the `non_exhaustive_omitted_patterns` lint is unstable\n-    //~| ERROR the `non_exhaustive_omitted_patterns` lint is unstable\n-    //~| ERROR the `non_exhaustive_omitted_patterns` lint is unstable\n+    //~^^^^ ERROR non-exhaustive patterns: `C` not covered\n \n     match Foo::A {\n         Foo::A => {}\n         Foo::B => {}\n         #[warn(non_exhaustive_omitted_patterns)]\n         _ => {}\n     }\n-    //~^^^ ERROR the `non_exhaustive_omitted_patterns` lint is unstable\n-    //~| ERROR the `non_exhaustive_omitted_patterns` lint is unstable\n+    //~^^^ WARNING unknown lint: `non_exhaustive_omitted_patterns`\n+    //~| WARNING unknown lint: `non_exhaustive_omitted_patterns`\n }"}, {"sha": "dbeef6c2d2ae2533c03e17fea9190959c51d47d8", "filename": "src/test/ui/feature-gates/feature-gate-non_exhaustive_omitted_patterns_lint.stderr", "status": "modified", "additions": 53, "deletions": 22, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_exhaustive_omitted_patterns_lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_exhaustive_omitted_patterns_lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_exhaustive_omitted_patterns_lint.stderr?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -1,93 +1,124 @@\n-error[E0658]: the `non_exhaustive_omitted_patterns` lint is unstable\n-  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:1:1\n+warning: unknown lint: `non_exhaustive_omitted_patterns`\n+  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:3:1\n    |\n LL | #![deny(non_exhaustive_omitted_patterns)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: `#[warn(unknown_lints)]` on by default\n+   = note: the `non_exhaustive_omitted_patterns` lint is unstable\n    = note: see issue #89554 <https://github.com/rust-lang/rust/issues/89554> for more information\n    = help: add `#![feature(non_exhaustive_omitted_patterns_lint)]` to the crate attributes to enable\n \n-error[E0658]: the `non_exhaustive_omitted_patterns` lint is unstable\n-  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:4:1\n+warning: unknown lint: `non_exhaustive_omitted_patterns`\n+  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:6:1\n    |\n LL | #![allow(non_exhaustive_omitted_patterns)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: the `non_exhaustive_omitted_patterns` lint is unstable\n    = note: see issue #89554 <https://github.com/rust-lang/rust/issues/89554> for more information\n    = help: add `#![feature(non_exhaustive_omitted_patterns_lint)]` to the crate attributes to enable\n \n-error[E0658]: the `non_exhaustive_omitted_patterns` lint is unstable\n-  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:13:5\n+warning: unknown lint: `non_exhaustive_omitted_patterns`\n+  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:15:5\n    |\n LL |     #[allow(non_exhaustive_omitted_patterns)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: the `non_exhaustive_omitted_patterns` lint is unstable\n    = note: see issue #89554 <https://github.com/rust-lang/rust/issues/89554> for more information\n    = help: add `#![feature(non_exhaustive_omitted_patterns_lint)]` to the crate attributes to enable\n \n-error[E0658]: the `non_exhaustive_omitted_patterns` lint is unstable\n-  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:13:5\n+warning: unknown lint: `non_exhaustive_omitted_patterns`\n+  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:15:5\n    |\n LL |     #[allow(non_exhaustive_omitted_patterns)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: the `non_exhaustive_omitted_patterns` lint is unstable\n    = note: see issue #89554 <https://github.com/rust-lang/rust/issues/89554> for more information\n    = help: add `#![feature(non_exhaustive_omitted_patterns_lint)]` to the crate attributes to enable\n \n-error[E0658]: the `non_exhaustive_omitted_patterns` lint is unstable\n-  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:26:9\n+warning: unknown lint: `non_exhaustive_omitted_patterns`\n+  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:29:9\n    |\n LL |         #[warn(non_exhaustive_omitted_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: the `non_exhaustive_omitted_patterns` lint is unstable\n    = note: see issue #89554 <https://github.com/rust-lang/rust/issues/89554> for more information\n    = help: add `#![feature(non_exhaustive_omitted_patterns_lint)]` to the crate attributes to enable\n \n-error[E0658]: the `non_exhaustive_omitted_patterns` lint is unstable\n-  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:1:1\n+warning: unknown lint: `non_exhaustive_omitted_patterns`\n+  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:3:1\n    |\n LL | #![deny(non_exhaustive_omitted_patterns)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: the `non_exhaustive_omitted_patterns` lint is unstable\n    = note: see issue #89554 <https://github.com/rust-lang/rust/issues/89554> for more information\n    = help: add `#![feature(non_exhaustive_omitted_patterns_lint)]` to the crate attributes to enable\n \n-error[E0658]: the `non_exhaustive_omitted_patterns` lint is unstable\n-  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:4:1\n+warning: unknown lint: `non_exhaustive_omitted_patterns`\n+  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:6:1\n    |\n LL | #![allow(non_exhaustive_omitted_patterns)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: the `non_exhaustive_omitted_patterns` lint is unstable\n    = note: see issue #89554 <https://github.com/rust-lang/rust/issues/89554> for more information\n    = help: add `#![feature(non_exhaustive_omitted_patterns_lint)]` to the crate attributes to enable\n \n-error[E0658]: the `non_exhaustive_omitted_patterns` lint is unstable\n-  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:13:5\n+warning: unknown lint: `non_exhaustive_omitted_patterns`\n+  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:15:5\n    |\n LL |     #[allow(non_exhaustive_omitted_patterns)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: the `non_exhaustive_omitted_patterns` lint is unstable\n    = note: see issue #89554 <https://github.com/rust-lang/rust/issues/89554> for more information\n    = help: add `#![feature(non_exhaustive_omitted_patterns_lint)]` to the crate attributes to enable\n \n-error[E0658]: the `non_exhaustive_omitted_patterns` lint is unstable\n-  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:13:5\n+warning: unknown lint: `non_exhaustive_omitted_patterns`\n+  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:15:5\n    |\n LL |     #[allow(non_exhaustive_omitted_patterns)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: the `non_exhaustive_omitted_patterns` lint is unstable\n    = note: see issue #89554 <https://github.com/rust-lang/rust/issues/89554> for more information\n    = help: add `#![feature(non_exhaustive_omitted_patterns_lint)]` to the crate attributes to enable\n \n-error[E0658]: the `non_exhaustive_omitted_patterns` lint is unstable\n-  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:26:9\n+warning: unknown lint: `non_exhaustive_omitted_patterns`\n+  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:29:9\n    |\n LL |         #[warn(non_exhaustive_omitted_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: the `non_exhaustive_omitted_patterns` lint is unstable\n    = note: see issue #89554 <https://github.com/rust-lang/rust/issues/89554> for more information\n    = help: add `#![feature(non_exhaustive_omitted_patterns_lint)]` to the crate attributes to enable\n \n-error: aborting due to 10 previous errors\n+error[E0004]: non-exhaustive patterns: `C` not covered\n+  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:20:11\n+   |\n+LL |     match Foo::A {\n+   |           ^^^^^^ pattern `C` not covered\n+   |\n+note: `Foo` defined here\n+  --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:12:15\n+   |\n+LL |     enum Foo {\n+   |          ---\n+LL |         A, B, C,\n+   |               ^ not covered\n+   = note: the matched value is of type `Foo`\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n+   |\n+LL ~         Foo::B => {}\n+LL +         C => todo!()\n+   |\n+\n+error: aborting due to previous error; 10 warnings emitted\n \n-For more information about this error, try `rustc --explain E0658`.\n+For more information about this error, try `rustc --explain E0004`."}, {"sha": "c398394cbe1a6afa26dad4c797a5f65250955968", "filename": "src/test/ui/feature-gates/feature-gate-test_unstable_lint.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-test_unstable_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-test_unstable_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-test_unstable_lint.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -0,0 +1,9 @@\n+// check-pass\n+\n+// `test_unstable_lint` is for testing and should never be stabilized.\n+#![allow(test_unstable_lint)]\n+//~^ WARNING unknown lint: `test_unstable_lint`\n+//~| WARNING unknown lint: `test_unstable_lint`\n+//~| WARNING unknown lint: `test_unstable_lint`\n+\n+fn main() {}"}, {"sha": "a29322443ea983948cbfb8e51267735de5692ff1", "filename": "src/test/ui/feature-gates/feature-gate-test_unstable_lint.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-test_unstable_lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-test_unstable_lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-test_unstable_lint.stderr?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -0,0 +1,30 @@\n+warning: unknown lint: `test_unstable_lint`\n+  --> $DIR/feature-gate-test_unstable_lint.rs:4:1\n+   |\n+LL | #![allow(test_unstable_lint)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(unknown_lints)]` on by default\n+   = note: the `test_unstable_lint` lint is unstable\n+   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable\n+\n+warning: unknown lint: `test_unstable_lint`\n+  --> $DIR/feature-gate-test_unstable_lint.rs:4:1\n+   |\n+LL | #![allow(test_unstable_lint)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the `test_unstable_lint` lint is unstable\n+   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable\n+\n+warning: unknown lint: `test_unstable_lint`\n+  --> $DIR/feature-gate-test_unstable_lint.rs:4:1\n+   |\n+LL | #![allow(test_unstable_lint)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the `test_unstable_lint` lint is unstable\n+   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable\n+\n+warning: 3 warnings emitted\n+"}, {"sha": "b73a76555296fc5b5c7e1c2dae7cbc65d6b42d16", "filename": "src/test/ui/lint/must_not_suspend/gated.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fgated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fgated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fgated.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -1,12 +1,15 @@\n+// check-pass\n+\n // edition:2018\n-#![deny(must_not_suspend)]  //~ ERROR the `must_not_suspend`\n-//~| ERROR the `must_not_suspend`\n-//~| ERROR the `must_not_suspend`\n+#![deny(must_not_suspend)]\n+//~^ WARNING unknown lint: `must_not_suspend`\n+//~| WARNING unknown lint: `must_not_suspend`\n+//~| WARNING unknown lint: `must_not_suspend`\n \n async fn other() {}\n \n pub async fn uhoh(m: std::sync::Mutex<()>) {\n-    let _guard = m.lock().unwrap(); //~ ERROR `MutexGuard` held across\n+    let _guard = m.lock().unwrap();\n     other().await;\n }\n "}, {"sha": "b58ecb55596ab01f4ee49ba81428cc9fed8add0f", "filename": "src/test/ui/lint/must_not_suspend/gated.stderr", "status": "modified", "additions": 11, "deletions": 32, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fgated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fgated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fgated.stderr?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -1,54 +1,33 @@\n-error[E0658]: the `must_not_suspend` lint is unstable\n-  --> $DIR/gated.rs:2:1\n+warning: unknown lint: `must_not_suspend`\n+  --> $DIR/gated.rs:4:1\n    |\n LL | #![deny(must_not_suspend)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: `#[warn(unknown_lints)]` on by default\n+   = note: the `must_not_suspend` lint is unstable\n    = note: see issue #83310 <https://github.com/rust-lang/rust/issues/83310> for more information\n    = help: add `#![feature(must_not_suspend)]` to the crate attributes to enable\n \n-error[E0658]: the `must_not_suspend` lint is unstable\n-  --> $DIR/gated.rs:2:1\n+warning: unknown lint: `must_not_suspend`\n+  --> $DIR/gated.rs:4:1\n    |\n LL | #![deny(must_not_suspend)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: the `must_not_suspend` lint is unstable\n    = note: see issue #83310 <https://github.com/rust-lang/rust/issues/83310> for more information\n    = help: add `#![feature(must_not_suspend)]` to the crate attributes to enable\n \n-error[E0658]: the `must_not_suspend` lint is unstable\n-  --> $DIR/gated.rs:2:1\n+warning: unknown lint: `must_not_suspend`\n+  --> $DIR/gated.rs:4:1\n    |\n LL | #![deny(must_not_suspend)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: the `must_not_suspend` lint is unstable\n    = note: see issue #83310 <https://github.com/rust-lang/rust/issues/83310> for more information\n    = help: add `#![feature(must_not_suspend)]` to the crate attributes to enable\n \n-error: `MutexGuard` held across a suspend point, but should not be\n-  --> $DIR/gated.rs:9:9\n-   |\n-LL |     let _guard = m.lock().unwrap();\n-   |         ^^^^^^\n-LL |     other().await;\n-   |            ------ the value is held across this suspend point\n-   |\n-note: the lint level is defined here\n-  --> $DIR/gated.rs:2:9\n-   |\n-LL | #![deny(must_not_suspend)]\n-   |         ^^^^^^^^^^^^^^^^\n-note: holding a MutexGuard across suspend points can cause deadlocks, delays, and cause Futures to not implement `Send`\n-  --> $DIR/gated.rs:9:9\n-   |\n-LL |     let _guard = m.lock().unwrap();\n-   |         ^^^^^^\n-help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n-  --> $DIR/gated.rs:9:9\n-   |\n-LL |     let _guard = m.lock().unwrap();\n-   |         ^^^^^^\n-\n-error: aborting due to 4 previous errors\n+warning: 3 warnings emitted\n \n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "ed94c27cf05ca432a1b73a564435ac1e66dcbeb5", "filename": "src/test/ui/macros/rfc-3086-metavar-expr/dollar-dollar-has-correct-behavior.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftest%2Fui%2Fmacros%2Frfc-3086-metavar-expr%2Fdollar-dollar-has-correct-behavior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftest%2Fui%2Fmacros%2Frfc-3086-metavar-expr%2Fdollar-dollar-has-correct-behavior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Frfc-3086-metavar-expr%2Fdollar-dollar-has-correct-behavior.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -0,0 +1,28 @@\n+// run-pass\n+\n+#![feature(macro_metavar_expr)]\n+\n+macro_rules! nested {\n+    ( $a:ident ) => {\n+        macro_rules! $a {\n+            ( $$( $b:ident ),* ) => {\n+                $$(\n+                    macro_rules! $b {\n+                        ( $$$$( $c:ident ),* ) => {\n+                            $$$$(\n+                                fn $c() -> &'static str { stringify!($c) }\n+                            ),*\n+                        };\n+                    }\n+                )*\n+            };\n+        }\n+    };\n+}\n+\n+fn main() {\n+    nested!(a);\n+    a!(b);\n+    b!(c);\n+    assert_eq!(c(), \"c\");\n+}"}, {"sha": "6434ecc7e092df4ba67378218e209777aeea2b13", "filename": "src/test/ui/macros/rfc-3086-metavar-expr/feature-gate-macro_metavar_expr.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftest%2Fui%2Fmacros%2Frfc-3086-metavar-expr%2Ffeature-gate-macro_metavar_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftest%2Fui%2Fmacros%2Frfc-3086-metavar-expr%2Ffeature-gate-macro_metavar_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Frfc-3086-metavar-expr%2Ffeature-gate-macro_metavar_expr.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -0,0 +1,14 @@\n+// run-pass\n+\n+#![feature(macro_metavar_expr)]\n+\n+macro_rules! ignore {\n+    ( $( $i:ident ),* ) => {{\n+        let array: [i32; 0] = [$( ${ignore(i)} )*];\n+        array\n+    }};\n+}\n+\n+fn main() {\n+    assert_eq!(ignore!(a, b, c), []);\n+}"}, {"sha": "cff6f29a1538637e2f08755f2d324e6b5816156d", "filename": "src/test/ui/macros/rfc-3086-metavar-expr/required-feature.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftest%2Fui%2Fmacros%2Frfc-3086-metavar-expr%2Frequired-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftest%2Fui%2Fmacros%2Frfc-3086-metavar-expr%2Frequired-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Frfc-3086-metavar-expr%2Frequired-feature.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -0,0 +1,9 @@\n+macro_rules! count {\n+    ( $( $e:stmt ),* ) => {\n+        ${ count(e) }\n+        //~^ ERROR meta-variable expressions are unstable\n+    };\n+}\n+\n+fn main() {\n+}"}, {"sha": "f573194479314fb875b2bec3b0a5909f4a1ffbfe", "filename": "src/test/ui/macros/rfc-3086-metavar-expr/required-feature.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftest%2Fui%2Fmacros%2Frfc-3086-metavar-expr%2Frequired-feature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftest%2Fui%2Fmacros%2Frfc-3086-metavar-expr%2Frequired-feature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Frfc-3086-metavar-expr%2Frequired-feature.stderr?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: meta-variable expressions are unstable\n+  --> $DIR/required-feature.rs:3:10\n+   |\n+LL |         ${ count(e) }\n+   |          ^^^^^^^^^^^^\n+   |\n+   = note: see issue #83527 <https://github.com/rust-lang/rust/issues/83527> for more information\n+   = help: add `#![feature(macro_metavar_expr)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "ea73fd0813c5bd249cc1b5c14497b07c46d53b08", "filename": "src/test/ui/macros/rfc-3086-metavar-expr/syntax-errors.rs", "status": "added", "additions": 148, "deletions": 0, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftest%2Fui%2Fmacros%2Frfc-3086-metavar-expr%2Fsyntax-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftest%2Fui%2Fmacros%2Frfc-3086-metavar-expr%2Fsyntax-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Frfc-3086-metavar-expr%2Fsyntax-errors.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -0,0 +1,148 @@\n+#![feature(macro_metavar_expr)]\n+\n+// `curly` = Right hand side curly brackets\n+// `no_rhs_dollar` = No dollar sign at the right hand side meta variable \"function\"\n+// `round` = Left hand side round brackets\n+\n+macro_rules! curly__no_rhs_dollar__round {\n+    ( $( $i:ident ),* ) => { ${ count(i) } };\n+}\n+\n+macro_rules! curly__no_rhs_dollar__no_round {\n+    ( $i:ident ) => { ${ count(i) } };\n+}\n+\n+macro_rules! curly__rhs_dollar__round {\n+    ( $( $i:ident ),* ) => { ${ count($i) } };\n+    //~^ ERROR expected identifier, found `$`\n+    //~| ERROR expected expression, found `$`\n+}\n+\n+macro_rules! curly__rhs_dollar__no_round {\n+    ( $i:ident ) => { ${ count($i) } };\n+    //~^ ERROR expected identifier, found `$`\n+    //~| ERROR expected expression, found `$`\n+}\n+\n+macro_rules! no_curly__no_rhs_dollar__round {\n+    ( $( $i:ident ),* ) => { count(i) };\n+    //~^ ERROR cannot find function `count` in this scope\n+    //~| ERROR cannot find value `i` in this scope\n+}\n+\n+macro_rules! no_curly__no_rhs_dollar__no_round {\n+    ( $i:ident ) => { count(i) };\n+    //~^ ERROR cannot find function `count` in this scope\n+    //~| ERROR cannot find value `i` in this scope\n+}\n+\n+macro_rules! no_curly__rhs_dollar__round {\n+    ( $( $i:ident ),* ) => { count($i) };\n+    //~^ ERROR variable 'i' is still repeating at this depth\n+}\n+\n+macro_rules! no_curly__rhs_dollar__no_round {\n+    ( $i:ident ) => { count($i) };\n+    //~^ ERROR cannot find function `count` in this scope\n+}\n+\n+// Other scenarios\n+\n+macro_rules! dollar_dollar_in_the_lhs {\n+    ( $$ $a:ident ) => {\n+    //~^ ERROR unexpected token: $\n+    };\n+}\n+\n+macro_rules! extra_garbage_after_metavar {\n+    ( $( $i:ident ),* ) => {\n+        ${count() a b c}\n+        //~^ ERROR unexpected token: a\n+        //~| ERROR expected expression, found `$`\n+        ${count(i a b c)}\n+        //~^ ERROR unexpected token: a\n+        ${count(i, 1 a b c)}\n+        //~^ ERROR unexpected token: a\n+        ${count(i) a b c}\n+        //~^ ERROR unexpected token: a\n+\n+        ${ignore(i) a b c}\n+        //~^ ERROR unexpected token: a\n+        ${ignore(i a b c)}\n+        //~^ ERROR unexpected token: a\n+\n+        ${index() a b c}\n+        //~^ ERROR unexpected token: a\n+        ${index(1 a b c)}\n+        //~^ ERROR unexpected token: a\n+\n+        ${index() a b c}\n+        //~^ ERROR unexpected token: a\n+        ${index(1 a b c)}\n+        //~^ ERROR unexpected token: a\n+    };\n+}\n+\n+const IDX: usize = 1;\n+macro_rules! metavar_depth_is_not_literal {\n+    ( $( $i:ident ),* ) => { ${ index(IDX) } };\n+    //~^ ERROR meta-variable expression depth must be a literal\n+    //~| ERROR expected expression, found `$`\n+}\n+\n+macro_rules! metavar_in_the_lhs {\n+    ( ${ length() } ) => {\n+        //~^ ERROR unexpected token: {\n+        //~| ERROR expected one of: `*`, `+`, or `?`\n+    };\n+}\n+\n+macro_rules! metavar_token_without_ident {\n+    ( $( $i:ident ),* ) => { ${ ignore() } };\n+    //~^ ERROR expected identifier\n+    //~| ERROR expected expression, found `$`\n+}\n+\n+macro_rules! metavar_with_literal_suffix {\n+    ( $( $i:ident ),* ) => { ${ index(1u32) } };\n+    //~^ ERROR only unsuffixes integer literals are supported in meta-variable expressions\n+    //~| ERROR expected expression, found `$`\n+}\n+\n+macro_rules! metavar_without_parens {\n+    ( $( $i:ident ),* ) => { ${ count{i} } };\n+    //~^ ERROR meta-variable expression parameter must be wrapped in parentheses\n+    //~| ERROR expected expression, found `$`\n+}\n+\n+macro_rules! open_brackets_without_tokens {\n+    ( $( $i:ident ),* ) => { ${ {} } };\n+    //~^ ERROR expected expression, found `$`\n+    //~| ERROR expected identifier\n+}\n+\n+macro_rules! unknown_metavar {\n+    ( $( $i:ident ),* ) => { ${ aaaaaaaaaaaaaa(i) } };\n+    //~^ ERROR unrecognized meta-variable expression\n+    //~| ERROR expected expression\n+}\n+\n+fn main() {\n+    curly__no_rhs_dollar__round!(a, b, c);\n+    curly__no_rhs_dollar__no_round!(a);\n+    curly__rhs_dollar__round!(a, b, c);\n+    curly__rhs_dollar__no_round!(a);\n+    no_curly__no_rhs_dollar__round!(a, b, c);\n+    no_curly__no_rhs_dollar__no_round!(a);\n+    no_curly__rhs_dollar__round!(a, b, c);\n+    no_curly__rhs_dollar__no_round!(a);\n+    //~^ ERROR cannot find value `a` in this scope\n+\n+    extra_garbage_after_metavar!(a);\n+    unknown_metavar!(a);\n+    metavar_without_parens!(a);\n+    metavar_token_without_ident!(a);\n+    metavar_depth_is_not_literal!(a);\n+    metavar_with_literal_suffix!(a);\n+    open_brackets_without_tokens!(a)\n+}"}, {"sha": "dc8b7a668c4ee749abd8b61a28308187e55c6d72", "filename": "src/test/ui/macros/rfc-3086-metavar-expr/syntax-errors.stderr", "status": "added", "additions": 367, "deletions": 0, "changes": 367, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftest%2Fui%2Fmacros%2Frfc-3086-metavar-expr%2Fsyntax-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftest%2Fui%2Fmacros%2Frfc-3086-metavar-expr%2Fsyntax-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Frfc-3086-metavar-expr%2Fsyntax-errors.stderr?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -0,0 +1,367 @@\n+error: expected identifier, found `$`\n+  --> $DIR/syntax-errors.rs:16:33\n+   |\n+LL |     ( $( $i:ident ),* ) => { ${ count($i) } };\n+   |                                 ^^^^^ - help: try removing `$`\n+\n+error: expected identifier, found `$`\n+  --> $DIR/syntax-errors.rs:22:26\n+   |\n+LL |     ( $i:ident ) => { ${ count($i) } };\n+   |                          ^^^^^ - help: try removing `$`\n+\n+error: unexpected token: $\n+  --> $DIR/syntax-errors.rs:52:8\n+   |\n+LL |     ( $$ $a:ident ) => {\n+   |        ^\n+\n+note: `$$` and meta-variable expressions are not allowed inside macro parameter definitions\n+  --> $DIR/syntax-errors.rs:52:8\n+   |\n+LL |     ( $$ $a:ident ) => {\n+   |        ^\n+\n+error: unexpected token: a\n+  --> $DIR/syntax-errors.rs:59:19\n+   |\n+LL |         ${count() a b c}\n+   |                   ^\n+   |\n+note: meta-variable expression must not have trailing tokens\n+  --> $DIR/syntax-errors.rs:59:19\n+   |\n+LL |         ${count() a b c}\n+   |                   ^\n+\n+error: unexpected token: a\n+  --> $DIR/syntax-errors.rs:62:19\n+   |\n+LL |         ${count(i a b c)}\n+   |                   ^\n+   |\n+note: meta-variable expression must not have trailing tokens\n+  --> $DIR/syntax-errors.rs:62:19\n+   |\n+LL |         ${count(i a b c)}\n+   |                   ^\n+\n+error: unexpected token: a\n+  --> $DIR/syntax-errors.rs:64:22\n+   |\n+LL |         ${count(i, 1 a b c)}\n+   |                      ^\n+   |\n+note: meta-variable expression must not have trailing tokens\n+  --> $DIR/syntax-errors.rs:64:22\n+   |\n+LL |         ${count(i, 1 a b c)}\n+   |                      ^\n+\n+error: unexpected token: a\n+  --> $DIR/syntax-errors.rs:66:20\n+   |\n+LL |         ${count(i) a b c}\n+   |                    ^\n+   |\n+note: meta-variable expression must not have trailing tokens\n+  --> $DIR/syntax-errors.rs:66:20\n+   |\n+LL |         ${count(i) a b c}\n+   |                    ^\n+\n+error: unexpected token: a\n+  --> $DIR/syntax-errors.rs:69:21\n+   |\n+LL |         ${ignore(i) a b c}\n+   |                     ^\n+   |\n+note: meta-variable expression must not have trailing tokens\n+  --> $DIR/syntax-errors.rs:69:21\n+   |\n+LL |         ${ignore(i) a b c}\n+   |                     ^\n+\n+error: unexpected token: a\n+  --> $DIR/syntax-errors.rs:71:20\n+   |\n+LL |         ${ignore(i a b c)}\n+   |                    ^\n+   |\n+note: meta-variable expression must not have trailing tokens\n+  --> $DIR/syntax-errors.rs:71:20\n+   |\n+LL |         ${ignore(i a b c)}\n+   |                    ^\n+\n+error: unexpected token: a\n+  --> $DIR/syntax-errors.rs:74:19\n+   |\n+LL |         ${index() a b c}\n+   |                   ^\n+   |\n+note: meta-variable expression must not have trailing tokens\n+  --> $DIR/syntax-errors.rs:74:19\n+   |\n+LL |         ${index() a b c}\n+   |                   ^\n+\n+error: unexpected token: a\n+  --> $DIR/syntax-errors.rs:76:19\n+   |\n+LL |         ${index(1 a b c)}\n+   |                   ^\n+   |\n+note: meta-variable expression must not have trailing tokens\n+  --> $DIR/syntax-errors.rs:76:19\n+   |\n+LL |         ${index(1 a b c)}\n+   |                   ^\n+\n+error: unexpected token: a\n+  --> $DIR/syntax-errors.rs:79:19\n+   |\n+LL |         ${index() a b c}\n+   |                   ^\n+   |\n+note: meta-variable expression must not have trailing tokens\n+  --> $DIR/syntax-errors.rs:79:19\n+   |\n+LL |         ${index() a b c}\n+   |                   ^\n+\n+error: unexpected token: a\n+  --> $DIR/syntax-errors.rs:81:19\n+   |\n+LL |         ${index(1 a b c)}\n+   |                   ^\n+   |\n+note: meta-variable expression must not have trailing tokens\n+  --> $DIR/syntax-errors.rs:81:19\n+   |\n+LL |         ${index(1 a b c)}\n+   |                   ^\n+\n+error: meta-variable expression depth must be a literal\n+  --> $DIR/syntax-errors.rs:88:33\n+   |\n+LL |     ( $( $i:ident ),* ) => { ${ index(IDX) } };\n+   |                                 ^^^^^\n+\n+error: unexpected token: {\n+  --> $DIR/syntax-errors.rs:94:8\n+   |\n+LL |     ( ${ length() } ) => {\n+   |        ^^^^^^^^^^^^\n+\n+note: `$$` and meta-variable expressions are not allowed inside macro parameter definitions\n+  --> $DIR/syntax-errors.rs:94:8\n+   |\n+LL |     ( ${ length() } ) => {\n+   |        ^^^^^^^^^^^^\n+\n+error: expected one of: `*`, `+`, or `?`\n+  --> $DIR/syntax-errors.rs:94:8\n+   |\n+LL |     ( ${ length() } ) => {\n+   |        ^^^^^^^^^^^^\n+\n+error: expected identifier\n+  --> $DIR/syntax-errors.rs:101:33\n+   |\n+LL |     ( $( $i:ident ),* ) => { ${ ignore() } };\n+   |                                 ^^^^^^\n+\n+error: only unsuffixes integer literals are supported in meta-variable expressions\n+  --> $DIR/syntax-errors.rs:107:33\n+   |\n+LL |     ( $( $i:ident ),* ) => { ${ index(1u32) } };\n+   |                                 ^^^^^\n+\n+error: meta-variable expression parameter must be wrapped in parentheses\n+  --> $DIR/syntax-errors.rs:113:33\n+   |\n+LL |     ( $( $i:ident ),* ) => { ${ count{i} } };\n+   |                                 ^^^^^\n+\n+error: expected identifier\n+  --> $DIR/syntax-errors.rs:119:31\n+   |\n+LL |     ( $( $i:ident ),* ) => { ${ {} } };\n+   |                               ^^^^^^\n+\n+error: unrecognized meta-variable expression\n+  --> $DIR/syntax-errors.rs:125:33\n+   |\n+LL |     ( $( $i:ident ),* ) => { ${ aaaaaaaaaaaaaa(i) } };\n+   |                                 ^^^^^^^^^^^^^^ help: supported expressions are count, ignore, index and length\n+\n+error: expected expression, found `$`\n+  --> $DIR/syntax-errors.rs:16:30\n+   |\n+LL |     ( $( $i:ident ),* ) => { ${ count($i) } };\n+   |                              ^ expected expression\n+...\n+LL |     curly__rhs_dollar__round!(a, b, c);\n+   |     ---------------------------------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `curly__rhs_dollar__round` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: expected expression, found `$`\n+  --> $DIR/syntax-errors.rs:22:23\n+   |\n+LL |     ( $i:ident ) => { ${ count($i) } };\n+   |                       ^ expected expression\n+...\n+LL |     curly__rhs_dollar__no_round!(a);\n+   |     ------------------------------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `curly__rhs_dollar__no_round` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: variable 'i' is still repeating at this depth\n+  --> $DIR/syntax-errors.rs:40:36\n+   |\n+LL |     ( $( $i:ident ),* ) => { count($i) };\n+   |                                    ^^\n+\n+error: expected expression, found `$`\n+  --> $DIR/syntax-errors.rs:59:9\n+   |\n+LL |         ${count() a b c}\n+   |         ^ expected expression\n+...\n+LL |     extra_garbage_after_metavar!(a);\n+   |     ------------------------------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `extra_garbage_after_metavar` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: expected expression, found `$`\n+  --> $DIR/syntax-errors.rs:125:30\n+   |\n+LL |     ( $( $i:ident ),* ) => { ${ aaaaaaaaaaaaaa(i) } };\n+   |                              ^ expected expression\n+...\n+LL |     unknown_metavar!(a);\n+   |     ------------------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `unknown_metavar` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: expected expression, found `$`\n+  --> $DIR/syntax-errors.rs:113:30\n+   |\n+LL |     ( $( $i:ident ),* ) => { ${ count{i} } };\n+   |                              ^ expected expression\n+...\n+LL |     metavar_without_parens!(a);\n+   |     -------------------------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `metavar_without_parens` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: expected expression, found `$`\n+  --> $DIR/syntax-errors.rs:101:30\n+   |\n+LL |     ( $( $i:ident ),* ) => { ${ ignore() } };\n+   |                              ^ expected expression\n+...\n+LL |     metavar_token_without_ident!(a);\n+   |     ------------------------------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `metavar_token_without_ident` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: expected expression, found `$`\n+  --> $DIR/syntax-errors.rs:88:30\n+   |\n+LL |     ( $( $i:ident ),* ) => { ${ index(IDX) } };\n+   |                              ^ expected expression\n+...\n+LL |     metavar_depth_is_not_literal!(a);\n+   |     -------------------------------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `metavar_depth_is_not_literal` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: expected expression, found `$`\n+  --> $DIR/syntax-errors.rs:107:30\n+   |\n+LL |     ( $( $i:ident ),* ) => { ${ index(1u32) } };\n+   |                              ^ expected expression\n+...\n+LL |     metavar_with_literal_suffix!(a);\n+   |     ------------------------------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `metavar_with_literal_suffix` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: expected expression, found `$`\n+  --> $DIR/syntax-errors.rs:119:30\n+   |\n+LL |     ( $( $i:ident ),* ) => { ${ {} } };\n+   |                              ^ expected expression\n+...\n+LL |     open_brackets_without_tokens!(a)\n+   |     -------------------------------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `open_brackets_without_tokens` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0425]: cannot find function `count` in this scope\n+  --> $DIR/syntax-errors.rs:28:30\n+   |\n+LL |     ( $( $i:ident ),* ) => { count(i) };\n+   |                              ^^^^^ not found in this scope\n+...\n+LL |     no_curly__no_rhs_dollar__round!(a, b, c);\n+   |     ---------------------------------------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `no_curly__no_rhs_dollar__round` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0425]: cannot find value `i` in this scope\n+  --> $DIR/syntax-errors.rs:28:36\n+   |\n+LL |     ( $( $i:ident ),* ) => { count(i) };\n+   |                                    ^ not found in this scope\n+...\n+LL |     no_curly__no_rhs_dollar__round!(a, b, c);\n+   |     ---------------------------------------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `no_curly__no_rhs_dollar__round` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0425]: cannot find function `count` in this scope\n+  --> $DIR/syntax-errors.rs:34:23\n+   |\n+LL |     ( $i:ident ) => { count(i) };\n+   |                       ^^^^^ not found in this scope\n+...\n+LL |     no_curly__no_rhs_dollar__no_round!(a);\n+   |     ------------------------------------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `no_curly__no_rhs_dollar__no_round` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0425]: cannot find value `i` in this scope\n+  --> $DIR/syntax-errors.rs:34:29\n+   |\n+LL |     ( $i:ident ) => { count(i) };\n+   |                             ^ not found in this scope\n+...\n+LL |     no_curly__no_rhs_dollar__no_round!(a);\n+   |     ------------------------------------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `no_curly__no_rhs_dollar__no_round` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0425]: cannot find function `count` in this scope\n+  --> $DIR/syntax-errors.rs:45:23\n+   |\n+LL |     ( $i:ident ) => { count($i) };\n+   |                       ^^^^^ not found in this scope\n+...\n+LL |     no_curly__rhs_dollar__no_round!(a);\n+   |     ---------------------------------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `no_curly__rhs_dollar__no_round` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0425]: cannot find value `a` in this scope\n+  --> $DIR/syntax-errors.rs:138:37\n+   |\n+LL |     no_curly__rhs_dollar__no_round!(a);\n+   |                                     ^ not found in this scope\n+\n+error: aborting due to 37 previous errors\n+\n+For more information about this error, try `rustc --explain E0425`."}, {"sha": "80e30f23993e34242c4ee5b022abc6ede61f6386", "filename": "src/test/ui/unknown-unstable-lints/allow-unknown-unstable-lint-command-line.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fallow-unknown-unstable-lint-command-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fallow-unknown-unstable-lint-command-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fallow-unknown-unstable-lint-command-line.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -0,0 +1,4 @@\n+// check-pass\n+// compile-flags: -Aunknown_lints -Atest_unstable_lint\n+\n+fn main() {}"}, {"sha": "992472c894a8c2c461626b322863bdbcf9be6946", "filename": "src/test/ui/unknown-unstable-lints/allow-unknown-unstable-lint-inline.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fallow-unknown-unstable-lint-inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fallow-unknown-unstable-lint-inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fallow-unknown-unstable-lint-inline.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -0,0 +1,5 @@\n+// check-pass\n+\n+#![allow(unknown_lints, test_unstable_lint)]\n+\n+fn main() {}"}, {"sha": "dcc06850de174d15d56e732be7fc3343ab61170d", "filename": "src/test/ui/unknown-unstable-lints/deny-unstable-lint-command-line.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fdeny-unstable-lint-command-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fdeny-unstable-lint-command-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fdeny-unstable-lint-command-line.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -0,0 +1,6 @@\n+// check-fail\n+// compile-flags: -Dunknown_lints -Atest_unstable_lint\n+// error-pattern: unknown lint: `test_unstable_lint`\n+// error-pattern: the `test_unstable_lint` lint is unstable\n+\n+fn main() {}"}, {"sha": "7e6885bd70646dd27126d9670286e2146b5f2867", "filename": "src/test/ui/unknown-unstable-lints/deny-unstable-lint-command-line.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fdeny-unstable-lint-command-line.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fdeny-unstable-lint-command-line.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fdeny-unstable-lint-command-line.stderr?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -0,0 +1,18 @@\n+error: unknown lint: `test_unstable_lint`\n+   |\n+   = note: requested on the command line with `-D unknown-lints`\n+   = note: the `test_unstable_lint` lint is unstable\n+   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable\n+\n+error: unknown lint: `test_unstable_lint`\n+   |\n+   = note: the `test_unstable_lint` lint is unstable\n+   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable\n+\n+error: unknown lint: `test_unstable_lint`\n+   |\n+   = note: the `test_unstable_lint` lint is unstable\n+   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "c6c60b12d83e91615d814014381743cb3954d4cb", "filename": "src/test/ui/unknown-unstable-lints/deny-unstable-lint-inline.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fdeny-unstable-lint-inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fdeny-unstable-lint-inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fdeny-unstable-lint-inline.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -0,0 +1,9 @@\n+// check-fail\n+\n+#![deny(unknown_lints)]\n+#![allow(test_unstable_lint)]\n+//~^ ERROR unknown lint: `test_unstable_lint`\n+//~| ERROR unknown lint: `test_unstable_lint`\n+//~| ERROR unknown lint: `test_unstable_lint`\n+\n+fn main() {}"}, {"sha": "2d1027dd0e05f6d22531cbf3755ba39fd533ee18", "filename": "src/test/ui/unknown-unstable-lints/deny-unstable-lint-inline.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fdeny-unstable-lint-inline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fdeny-unstable-lint-inline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fdeny-unstable-lint-inline.stderr?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -0,0 +1,34 @@\n+error: unknown lint: `test_unstable_lint`\n+  --> $DIR/deny-unstable-lint-inline.rs:4:1\n+   |\n+LL | #![allow(test_unstable_lint)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/deny-unstable-lint-inline.rs:3:9\n+   |\n+LL | #![deny(unknown_lints)]\n+   |         ^^^^^^^^^^^^^\n+   = note: the `test_unstable_lint` lint is unstable\n+   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable\n+\n+error: unknown lint: `test_unstable_lint`\n+  --> $DIR/deny-unstable-lint-inline.rs:4:1\n+   |\n+LL | #![allow(test_unstable_lint)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the `test_unstable_lint` lint is unstable\n+   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable\n+\n+error: unknown lint: `test_unstable_lint`\n+  --> $DIR/deny-unstable-lint-inline.rs:4:1\n+   |\n+LL | #![allow(test_unstable_lint)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the `test_unstable_lint` lint is unstable\n+   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "3778291ebb44771c555548ba79c94c5bece4bf63", "filename": "src/test/ui/unknown-unstable-lints/warn-unknown-unstable-lint-command-line.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fwarn-unknown-unstable-lint-command-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fwarn-unknown-unstable-lint-command-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fwarn-unknown-unstable-lint-command-line.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -0,0 +1,6 @@\n+// check-pass\n+// compile-flags: -Wunknown_lints -Atest_unstable_lint\n+// error-pattern: unknown lint: `test_unstable_lint`\n+// error-pattern: the `test_unstable_lint` lint is unstable\n+\n+fn main() {}"}, {"sha": "799d740b00ef22c9ab8d2c45869a8350e214377b", "filename": "src/test/ui/unknown-unstable-lints/warn-unknown-unstable-lint-command-line.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fwarn-unknown-unstable-lint-command-line.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fwarn-unknown-unstable-lint-command-line.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fwarn-unknown-unstable-lint-command-line.stderr?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -0,0 +1,18 @@\n+warning: unknown lint: `test_unstable_lint`\n+   |\n+   = note: requested on the command line with `-W unknown-lints`\n+   = note: the `test_unstable_lint` lint is unstable\n+   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable\n+\n+warning: unknown lint: `test_unstable_lint`\n+   |\n+   = note: the `test_unstable_lint` lint is unstable\n+   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable\n+\n+warning: unknown lint: `test_unstable_lint`\n+   |\n+   = note: the `test_unstable_lint` lint is unstable\n+   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable\n+\n+warning: 3 warnings emitted\n+"}, {"sha": "f4247e4569eb7ed7be7439cf5cac23760d669173", "filename": "src/test/ui/unknown-unstable-lints/warn-unknown-unstable-lint-inline.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fwarn-unknown-unstable-lint-inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fwarn-unknown-unstable-lint-inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fwarn-unknown-unstable-lint-inline.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -0,0 +1,9 @@\n+// check-pass\n+\n+#![warn(unknown_lints)]\n+#![allow(test_unstable_lint)]\n+//~^ WARNING unknown lint: `test_unstable_lint`\n+//~| WARNING unknown lint: `test_unstable_lint`\n+//~| WARNING unknown lint: `test_unstable_lint`\n+\n+fn main() {}"}, {"sha": "142558b471b480785c294b94959b742d1cbeed12", "filename": "src/test/ui/unknown-unstable-lints/warn-unknown-unstable-lint-inline.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fwarn-unknown-unstable-lint-inline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fwarn-unknown-unstable-lint-inline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fwarn-unknown-unstable-lint-inline.stderr?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -0,0 +1,34 @@\n+warning: unknown lint: `test_unstable_lint`\n+  --> $DIR/warn-unknown-unstable-lint-inline.rs:4:1\n+   |\n+LL | #![allow(test_unstable_lint)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/warn-unknown-unstable-lint-inline.rs:3:9\n+   |\n+LL | #![warn(unknown_lints)]\n+   |         ^^^^^^^^^^^^^\n+   = note: the `test_unstable_lint` lint is unstable\n+   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable\n+\n+warning: unknown lint: `test_unstable_lint`\n+  --> $DIR/warn-unknown-unstable-lint-inline.rs:4:1\n+   |\n+LL | #![allow(test_unstable_lint)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the `test_unstable_lint` lint is unstable\n+   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable\n+\n+warning: unknown lint: `test_unstable_lint`\n+  --> $DIR/warn-unknown-unstable-lint-inline.rs:4:1\n+   |\n+LL | #![allow(test_unstable_lint)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the `test_unstable_lint` lint is unstable\n+   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable\n+\n+warning: 3 warnings emitted\n+"}, {"sha": "841c0f2b9395e1db1564020d74ac52f27b481eec", "filename": "src/tools/rustdoc-gui/tester.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftools%2Frustdoc-gui%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftools%2Frustdoc-gui%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-gui%2Ftester.js?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -138,7 +138,7 @@ async function main(argv) {\n     try {\n         // This is more convenient that setting fields one by one.\n         let args = [\n-            \"--no-screenshot\",\n+            \"--no-screenshot-comparison\",\n             \"--variable\", \"DOC_PATH\", opts[\"doc_folder\"],\n         ];\n         if (opts[\"debug\"]) {"}, {"sha": "503df53704793f3d212af4b36ca5929ed8670300", "filename": "src/tools/tidy/src/bins.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftools%2Ftidy%2Fsrc%2Fbins.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftools%2Ftidy%2Fsrc%2Fbins.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fbins.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -117,7 +117,7 @@ mod os_impl {\n                         .stderr(Stdio::null())\n                         .output()\n                         .unwrap_or_else(|e| {\n-                            panic!(\"could not run git ls-files: {}\", e);\n+                            panic!(\"could not run git ls-files: {e}\");\n                         });\n                     let path_bytes = rel_path.as_os_str().as_bytes();\n                     if output.status.success() && output.stdout.starts_with(path_bytes) {"}, {"sha": "d6e36c2e7db402d049d49d4225ff4130de83d084", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -340,8 +340,8 @@ fn check_exceptions(\n                 }\n                 Some(pkg_license) => {\n                     if pkg_license.as_str() != *license {\n-                        println!(\"dependency exception `{}` license has changed\", name);\n-                        println!(\"    previously `{}` now `{}`\", license, pkg_license);\n+                        println!(\"dependency exception `{name}` license has changed\");\n+                        println!(\"    previously `{license}` now `{pkg_license}`\");\n                         println!(\"    update EXCEPTIONS for the new license\");\n                         *bad = true;\n                     }\n@@ -418,7 +418,7 @@ fn check_dependencies(\n     if !unapproved.is_empty() {\n         tidy_error!(bad, \"Dependencies not explicitly permitted:\");\n         for dep in unapproved {\n-            println!(\"* {}\", dep);\n+            println!(\"* {dep}\");\n         }\n     }\n }\n@@ -501,7 +501,7 @@ fn deps_of<'a>(metadata: &'a Metadata, pkg_id: &'a PackageId) -> Vec<&'a Package\n         .nodes\n         .iter()\n         .find(|n| &n.id == pkg_id)\n-        .unwrap_or_else(|| panic!(\"could not find `{}` in resolve\", pkg_id));\n+        .unwrap_or_else(|| panic!(\"could not find `{pkg_id}` in resolve\"));\n     node.deps\n         .iter()\n         .map(|dep| {\n@@ -516,8 +516,8 @@ fn deps_of<'a>(metadata: &'a Metadata, pkg_id: &'a PackageId) -> Vec<&'a Package\n fn pkg_from_name<'a>(metadata: &'a Metadata, name: &'static str) -> &'a Package {\n     let mut i = metadata.packages.iter().filter(|p| p.name == name);\n     let result =\n-        i.next().unwrap_or_else(|| panic!(\"could not find package `{}` in package list\", name));\n-    assert!(i.next().is_none(), \"more than one package found for `{}`\", name);\n+        i.next().unwrap_or_else(|| panic!(\"could not find package `{name}` in package list\"));\n+    assert!(i.next().is_none(), \"more than one package found for `{name}`\");\n     result\n }\n \n@@ -545,7 +545,7 @@ fn normal_deps_of_r<'a>(\n         .nodes\n         .iter()\n         .find(|n| &n.id == pkg_id)\n-        .unwrap_or_else(|| panic!(\"could not find `{}` in resolve\", pkg_id));\n+        .unwrap_or_else(|| panic!(\"could not find `{pkg_id}` in resolve\"));\n     for dep in &node.deps {\n         normal_deps_of_r(resolve, &dep.pkg, result);\n     }"}, {"sha": "281773b0569c531315e43e95f58a6b03bdeec6cf", "filename": "src/tools/tidy/src/error_codes_check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -260,7 +260,7 @@ pub fn check(paths: &[&Path], bad: &mut bool) {\n \n         for (err_code, error_status) in &error_codes {\n             if !error_status.has_test && !EXEMPTED_FROM_TEST.contains(&err_code.as_str()) {\n-                errors.push(format!(\"Error code {} needs to have at least one UI test!\", err_code));\n+                errors.push(format!(\"Error code {err_code} needs to have at least one UI test!\"));\n             } else if error_status.has_test && EXEMPTED_FROM_TEST.contains(&err_code.as_str()) {\n                 errors.push(format!(\n                     \"Error code {} has a UI test, it shouldn't be listed into EXEMPTED_FROM_TEST!\",\n@@ -309,7 +309,7 @@ pub fn check(paths: &[&Path], bad: &mut bool) {\n     }\n     errors.sort();\n     for err in &errors {\n-        eprintln!(\"{}\", err);\n+        eprintln!(\"{err}\");\n     }\n     println!(\"Found {} error(s) in error codes\", errors.len());\n     if !errors.is_empty() {"}, {"sha": "2f22c081a54b5a784de2a502c4dd8affa01f626d", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -157,7 +157,7 @@ pub fn check(\n         .collect::<Vec<_>>();\n \n     for &(name, _) in gate_untested.iter() {\n-        println!(\"Expected a gate test for the feature '{}'.\", name);\n+        println!(\"Expected a gate test for the feature '{name}'.\");\n         println!(\n             \"Hint: create a failing test file named 'feature-gate-{}.rs'\\\n                 \\n      in the 'ui' test suite, with its failures due to\\\n@@ -186,7 +186,7 @@ pub fn check(\n \n         lines.sort();\n         for line in lines {\n-            println!(\"* {}\", line);\n+            println!(\"* {line}\");\n         }\n     } else {\n         println!(\"* {} features\", features.len());\n@@ -221,7 +221,7 @@ fn find_attr_val<'a>(line: &'a str, attr: &str) -> Option<&'a str> {\n         \"issue\" => &*ISSUE,\n         \"feature\" => &*FEATURE,\n         \"since\" => &*SINCE,\n-        _ => unimplemented!(\"{} not handled\", attr),\n+        _ => unimplemented!(\"{attr} not handled\"),\n     };\n \n     r.captures(line).and_then(|c| c.get(1)).map(|m| m.as_str())\n@@ -231,7 +231,7 @@ fn test_filen_gate(filen_underscore: &str, features: &mut Features) -> bool {\n     let prefix = \"feature_gate_\";\n     if filen_underscore.starts_with(prefix) {\n         for (n, f) in features.iter_mut() {\n-            // Equivalent to filen_underscore == format!(\"feature_gate_{}\", n)\n+            // Equivalent to filen_underscore == format!(\"feature_gate_{n}\")\n             if &filen_underscore[prefix.len()..] == n {\n                 f.has_gate_test = true;\n                 return true;"}, {"sha": "f3200e0afd71a88bd543fd8f9dd84b01dc0b313e", "filename": "src/tools/tidy/src/primitive_docs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftools%2Ftidy%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftools%2Ftidy%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fprimitive_docs.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -8,10 +8,10 @@ pub fn check(library_path: &Path, bad: &mut bool) {\n     let std_name = \"std/src/primitive_docs.rs\";\n     let core_name = \"core/src/primitive_docs.rs\";\n     let std_contents = std::fs::read_to_string(library_path.join(std_name))\n-        .unwrap_or_else(|e| panic!(\"failed to read library/{}: {}\", std_name, e));\n+        .unwrap_or_else(|e| panic!(\"failed to read library/{std_name}: {e}\"));\n     let core_contents = std::fs::read_to_string(library_path.join(core_name))\n-        .unwrap_or_else(|e| panic!(\"failed to read library/{}: {}\", core_name, e));\n+        .unwrap_or_else(|e| panic!(\"failed to read library/{core_name}: {e}\"));\n     if std_contents != core_contents {\n-        tidy_error!(bad, \"library/{} and library/{} have different contents\", core_name, std_name);\n+        tidy_error!(bad, \"library/{core_name} and library/{std_name} have different contents\");\n     }\n }"}, {"sha": "9861cba410df29cf4f01c1f4d1e2b6ae99aab2ce", "filename": "src/tools/tidy/src/style.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -153,9 +153,9 @@ fn contains_ignore_directive(can_contain: bool, contents: &str, check: &str) ->\n         return Directive::Deny;\n     }\n     // Update `can_contain` when changing this\n-    if contents.contains(&format!(\"// ignore-tidy-{}\", check))\n-        || contents.contains(&format!(\"# ignore-tidy-{}\", check))\n-        || contents.contains(&format!(\"/* ignore-tidy-{} */\", check))\n+    if contents.contains(&format!(\"// ignore-tidy-{check}\"))\n+        || contents.contains(&format!(\"# ignore-tidy-{check}\"))\n+        || contents.contains(&format!(\"/* ignore-tidy-{check} */\"))\n     {\n         Directive::Ignore(false)\n     } else {\n@@ -294,7 +294,7 @@ pub fn check(path: &Path, bad: &mut bool) {\n                 suppressible_tidy_err!(\n                     err,\n                     skip_line_length,\n-                    &format!(\"line longer than {} chars\", max_columns)\n+                    &format!(\"line longer than {max_columns} chars\")\n                 );\n             }\n             if !is_style_file && line.contains('\\t') {\n@@ -381,7 +381,7 @@ pub fn check(path: &Path, bad: &mut bool) {\n             n => suppressible_tidy_err!(\n                 err,\n                 skip_trailing_newlines,\n-                &format!(\"too many trailing newlines ({})\", n)\n+                &format!(\"too many trailing newlines ({n})\")\n             ),\n         };\n         if lines > LINES {"}, {"sha": "723684bfa4cdafc9b75d9455d5e4fbacc66dced3", "filename": "src/tools/tidy/src/target_specific_tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftools%2Ftidy%2Fsrc%2Ftarget_specific_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftools%2Ftidy%2Fsrc%2Ftarget_specific_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ftarget_specific_tests.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -20,7 +20,7 @@ fn iter_header<'a>(contents: &'a str, it: &mut dyn FnMut(Option<&'a str>, &'a st\n                 let lncfg = &ln[open_brace + 1..close_brace];\n                 it(Some(lncfg), ln[(close_brace + 1)..].trim_start());\n             } else {\n-                panic!(\"malformed condition directive: expected `//[foo]`, found `{}`\", ln)\n+                panic!(\"malformed condition directive: expected `//[foo]`, found `{ln}`\")\n             }\n         } else if ln.starts_with(COMMENT) {\n             it(None, ln[COMMENT.len()..].trim_start());\n@@ -61,7 +61,7 @@ pub fn check(path: &Path, bad: &mut bool) {\n                             let info = header_map.entry(cfg).or_insert(RevisionInfo::default());\n                             info.target_arch.replace(arch);\n                         } else {\n-                            eprintln!(\"{}: seems to have a malformed --target value\", file);\n+                            eprintln!(\"{file}: seems to have a malformed --target value\");\n                             *bad = true;\n                         }\n                     }"}, {"sha": "4720ee7020f89bf8a6b8f0c4bfb6dc9610442b68", "filename": "src/tools/unicode-table-generator/src/main.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fmain.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -277,7 +277,7 @@ fn main() {\n \n     for (name, contents) in modules {\n         table_file.push_str(\"#[rustfmt::skip]\\n\");\n-        table_file.push_str(&format!(\"pub mod {} {{\\n\", name));\n+        table_file.push_str(&format!(\"pub mod {name} {{\\n\"));\n         for line in contents.lines() {\n             if !line.trim().is_empty() {\n                 table_file.push_str(\"    \");\n@@ -290,7 +290,7 @@ fn main() {\n \n     std::fs::write(&write_location, format!(\"{}\\n\", table_file.trim_end())).unwrap();\n \n-    println!(\"Total table sizes: {} bytes\", total_bytes);\n+    println!(\"Total table sizes: {total_bytes} bytes\");\n }\n \n fn version() -> String {\n@@ -308,7 +308,7 @@ fn version() -> String {\n         readme[start..end].split('.').map(|v| v.parse::<u32>().expect(&v)).collect::<Vec<_>>();\n     let [major, minor, micro] = [version[0], version[1], version[2]];\n \n-    out.push_str(&format!(\"({}, {}, {});\\n\", major, minor, micro));\n+    out.push_str(&format!(\"({major}, {minor}, {micro});\\n\"));\n     out\n }\n \n@@ -322,7 +322,7 @@ fn fmt_list<V: std::fmt::Debug>(values: impl IntoIterator<Item = V>) -> String {\n         } else {\n             out.push_str(line.trim_end());\n             out.push('\\n');\n-            line = format!(\"    {}\", piece);\n+            line = format!(\"    {piece}\");\n         }\n     }\n     out.push_str(line.trim_end());\n@@ -335,7 +335,7 @@ fn generate_tests(data_path: &str, ranges: &[(&str, Vec<Range<u32>>)]) -> String\n     s.push_str(\"#![allow(incomplete_features, unused)]\\n\");\n     s.push_str(\"#![feature(const_generics)]\\n\\n\");\n     s.push_str(\"\\n#[allow(unused)]\\nuse std::hint;\\n\");\n-    s.push_str(&format!(\"#[path = \\\"{}\\\"]\\n\", data_path));\n+    s.push_str(&format!(\"#[path = \\\"{data_path}\\\"]\\n\"));\n     s.push_str(\"mod unicode_data;\\n\\n\");\n \n     s.push_str(\"\\nfn main() {\\n\");"}, {"sha": "9b2e0a25891c737480283ef1bd029b6f0129052e", "filename": "src/tools/unicode-table-generator/src/unicode_download.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftools%2Funicode-table-generator%2Fsrc%2Funicode_download.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftools%2Funicode-table-generator%2Fsrc%2Funicode_download.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Funicode-table-generator%2Fsrc%2Funicode_download.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -13,13 +13,12 @@ pub fn fetch_latest() {\n     let directory = Path::new(UNICODE_DIRECTORY);\n     if directory.exists() {\n         eprintln!(\n-            \"Not refetching unicode data, already exists, please delete {:?} to regenerate\",\n-            directory\n+            \"Not refetching unicode data, already exists, please delete {directory:?} to regenerate\",\n         );\n         return;\n     }\n     if let Err(e) = std::fs::create_dir_all(directory) {\n-        panic!(\"Failed to create {:?}: {}\", UNICODE_DIRECTORY, e);\n+        panic!(\"Failed to create {UNICODE_DIRECTORY:?}: {e}\");\n     }\n     let output = Command::new(\"curl\").arg(URL_PREFIX.to_owned() + README).output().unwrap();\n     if !output.status.success() {"}, {"sha": "5a0477b4b941e614c49dd3062703ae5a7a950bc1", "filename": "src/tools/unstable-book-gen/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftools%2Funstable-book-gen%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftools%2Funstable-book-gen%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Funstable-book-gen%2Fsrc%2Fmain.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -67,7 +67,7 @@ fn generate_unstable_book_files(src: &Path, out: &Path, features: &Features) {\n     t!(fs::create_dir_all(&out));\n     for feature_name in &unstable_features - &unstable_section_file_names {\n         let feature_name_underscore = feature_name.replace('-', \"_\");\n-        let file_name = format!(\"{}.md\", feature_name);\n+        let file_name = format!(\"{feature_name}.md\");\n         let out_file_path = out.join(&file_name);\n         let feature = &features[&feature_name_underscore];\n "}, {"sha": "8c47559b36939e3e438ac1a67a7c0ee97e38ed95", "filename": "src/tools/x/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftools%2Fx%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352e621368c31d7b4a6362e081586cdb931ba020/src%2Ftools%2Fx%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fx%2Fsrc%2Fmain.rs?ref=352e621368c31d7b4a6362e081586cdb931ba020", "patch": "@@ -58,7 +58,7 @@ fn main() {\n     let current = match env::current_dir() {\n         Ok(dir) => dir,\n         Err(err) => {\n-            eprintln!(\"Failed to get current directory: {}\", err);\n+            eprintln!(\"Failed to get current directory: {err}\");\n             process::exit(1);\n         }\n     };"}]}