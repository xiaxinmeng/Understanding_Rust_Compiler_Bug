{"sha": "69ef8fbe7084f40893252df9fa47298b0a5c5057", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5ZWY4ZmJlNzA4NGY0MDg5MzI1MmRmOWZhNDcyOThiMGE1YzUwNTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-13T08:13:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-13T08:13:01Z"}, "message": "Auto merge of #60765 - matthewjasper:fix-more-escaping-rescopes, r=oli-obk\n\nFix more escaping ReScopes\n\nCloses #58840", "tree": {"sha": "f7e70f28d334ea5bfd59e19571295c44e7f25abf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7e70f28d334ea5bfd59e19571295c44e7f25abf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69ef8fbe7084f40893252df9fa47298b0a5c5057", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69ef8fbe7084f40893252df9fa47298b0a5c5057", "html_url": "https://github.com/rust-lang/rust/commit/69ef8fbe7084f40893252df9fa47298b0a5c5057", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69ef8fbe7084f40893252df9fa47298b0a5c5057/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe5f42cdb88d8ce31f746130099321e7c95e1ef0", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe5f42cdb88d8ce31f746130099321e7c95e1ef0", "html_url": "https://github.com/rust-lang/rust/commit/fe5f42cdb88d8ce31f746130099321e7c95e1ef0"}, {"sha": "9a4f0abd7a385416acf9d93b9d77ea1fdf755f93", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a4f0abd7a385416acf9d93b9d77ea1fdf755f93", "html_url": "https://github.com/rust-lang/rust/commit/9a4f0abd7a385416acf9d93b9d77ea1fdf755f93"}], "stats": {"total": 73, "additions": 63, "deletions": 10}, "files": [{"sha": "4351f94df2f135db586d5b7f310eaac9bd3416b2", "filename": "src/librustc/infer/opaque_types/mod.rs", "status": "modified", "additions": 46, "deletions": 10, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/69ef8fbe7084f40893252df9fa47298b0a5c5057/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ef8fbe7084f40893252df9fa47298b0a5c5057/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs?ref=69ef8fbe7084f40893252df9fa47298b0a5c5057", "patch": "@@ -284,18 +284,40 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         debug!(\"constrain_opaque_type: def_id={:?}\", def_id);\n         debug!(\"constrain_opaque_type: opaque_defn={:#?}\", opaque_defn);\n \n+        let tcx = self.tcx;\n+\n         let concrete_ty = self.resolve_type_vars_if_possible(&opaque_defn.concrete_ty);\n \n         debug!(\"constrain_opaque_type: concrete_ty={:?}\", concrete_ty);\n \n-        let abstract_type_generics = self.tcx.generics_of(def_id);\n+        let abstract_type_generics = tcx.generics_of(def_id);\n \n-        let span = self.tcx.def_span(def_id);\n+        let span = tcx.def_span(def_id);\n \n-        // If there are required region bounds, we can just skip\n-        // ahead.  There will already be a registered region\n-        // obligation related `concrete_ty` to those regions.\n+        // If there are required region bounds, we can use them.\n         if opaque_defn.has_required_region_bounds {\n+            let predicates_of = tcx.predicates_of(def_id);\n+            debug!(\n+                \"constrain_opaque_type: predicates: {:#?}\",\n+                predicates_of,\n+            );\n+            let bounds = predicates_of.instantiate(tcx, opaque_defn.substs);\n+            debug!(\"constrain_opaque_type: bounds={:#?}\", bounds);\n+            let opaque_type = tcx.mk_opaque(def_id, opaque_defn.substs);\n+\n+            let required_region_bounds = tcx.required_region_bounds(\n+                opaque_type,\n+                bounds.predicates.clone(),\n+            );\n+            debug_assert!(!required_region_bounds.is_empty());\n+\n+            for region in required_region_bounds {\n+                concrete_ty.visit_with(&mut OpaqueTypeOutlivesVisitor {\n+                    infcx: self,\n+                    least_region: region,\n+                    span,\n+                });\n+            }\n             return;\n         }\n \n@@ -371,7 +393,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             }\n         }\n \n-        let least_region = least_region.unwrap_or(self.tcx.lifetimes.re_static);\n+        let least_region = least_region.unwrap_or(tcx.lifetimes.re_static);\n         debug!(\"constrain_opaque_types: least_region={:?}\", least_region);\n \n         concrete_ty.visit_with(&mut OpaqueTypeOutlivesVisitor {\n@@ -589,10 +611,7 @@ impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for ReverseMapper<'cx, 'gcx, 'tcx>\n             ty::ReLateBound(..) |\n \n             // ignore `'static`, as that can appear anywhere\n-            ty::ReStatic |\n-\n-            // ignore `ReScope`, which may appear in impl Trait in bindings.\n-            ty::ReScope(..) => return r,\n+            ty::ReStatic => return r,\n \n             _ => { }\n         }\n@@ -683,6 +702,23 @@ impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for ReverseMapper<'cx, 'gcx, 'tcx>\n                 self.tcx.mk_closure(def_id, ty::ClosureSubsts { substs })\n             }\n \n+            ty::Generator(def_id, substs, movability) => {\n+                let generics = self.tcx.generics_of(def_id);\n+                let substs = self.tcx.mk_substs(substs.substs.iter().enumerate().map(\n+                    |(index, &kind)| {\n+                        if index < generics.parent_count {\n+                            // Accommodate missing regions in the parent kinds...\n+                            self.fold_kind_mapping_missing_regions_to_empty(kind)\n+                        } else {\n+                            // ...but not elsewhere.\n+                            self.fold_kind_normally(kind)\n+                        }\n+                    },\n+                ));\n+\n+                self.tcx.mk_generator(def_id, ty::GeneratorSubsts { substs }, movability)\n+            }\n+\n             _ => ty.super_fold_with(self),\n         }\n     }"}, {"sha": "9a9843375e4c529b213da54454c1e90fc1e0a13e", "filename": "src/test/run-pass/impl-trait/lifetimes.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/69ef8fbe7084f40893252df9fa47298b0a5c5057/src%2Ftest%2Frun-pass%2Fimpl-trait%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ef8fbe7084f40893252df9fa47298b0a5c5057/src%2Ftest%2Frun-pass%2Fimpl-trait%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimpl-trait%2Flifetimes.rs?ref=69ef8fbe7084f40893252df9fa47298b0a5c5057", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n \n #![allow(warnings)]\n+#![feature(generators)]\n \n use std::fmt::Debug;\n \n@@ -112,6 +113,11 @@ impl<'unnecessary_lifetime> MyVec {\n     fn iter_doesnt_capture_unnecessary_lifetime<'s>(&'s self) -> impl Iterator<Item = &'s u8> {\n         self.0.iter().flat_map(|inner_vec| inner_vec.iter())\n     }\n+\n+    fn generator_doesnt_capture_unnecessary_lifetime<'s: 's>() -> impl Sized {\n+        || yield\n+    }\n }\n \n+\n fn main() {}"}, {"sha": "90a7519074b53bebbda8c04bc9f7d3197aa34af6", "filename": "src/test/ui/impl-trait/can-return-unconstrained-closure.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69ef8fbe7084f40893252df9fa47298b0a5c5057/src%2Ftest%2Fui%2Fimpl-trait%2Fcan-return-unconstrained-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ef8fbe7084f40893252df9fa47298b0a5c5057/src%2Ftest%2Fui%2Fimpl-trait%2Fcan-return-unconstrained-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fcan-return-unconstrained-closure.rs?ref=69ef8fbe7084f40893252df9fa47298b0a5c5057", "patch": "@@ -16,4 +16,8 @@ fn make_identity() -> impl Sized {\n     |x: &'static i32| x\n }\n \n+fn make_identity_static() -> impl Sized + 'static {\n+    |x: &'static i32| x\n+}\n+\n fn main() {}"}, {"sha": "11f1a392239dcdeb491afbe0b5615ad47e49398e", "filename": "src/test/ui/impl-trait/issue-57464-unexpected-regions.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/69ef8fbe7084f40893252df9fa47298b0a5c5057/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-57464-unexpected-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ef8fbe7084f40893252df9fa47298b0a5c5057/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-57464-unexpected-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-57464-unexpected-regions.rs?ref=69ef8fbe7084f40893252df9fa47298b0a5c5057", "patch": "@@ -17,6 +17,13 @@ fn wrapped_closure() -> impl Sized {\n     A(f)\n }\n \n+fn wrapped_closure_with_bound() -> impl Sized + 'static {\n+    let f = |x| x;\n+    f(&0);\n+    A(f)\n+}\n+\n fn main() {\n     let x: Box<dyn Send> = Box::new(wrapped_closure());\n+    let y: Box<dyn Send> = Box::new(wrapped_closure_with_bound());\n }"}]}