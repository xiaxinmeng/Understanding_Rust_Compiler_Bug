{"sha": "2eea642c3064e2de643cf155082f08dc141eafaa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlZWE2NDJjMzA2NGUyZGU2NDNjZjE1NTA4MmYwOGRjMTQxZWFmYWE=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-29T03:41:09Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-30T11:17:09Z"}, "message": "Convert vec::dedup to a method.", "tree": {"sha": "d2ccbc799b32e460cf7fee23e9f45cfe07af55aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2ccbc799b32e460cf7fee23e9f45cfe07af55aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2eea642c3064e2de643cf155082f08dc141eafaa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2eea642c3064e2de643cf155082f08dc141eafaa", "html_url": "https://github.com/rust-lang/rust/commit/2eea642c3064e2de643cf155082f08dc141eafaa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2eea642c3064e2de643cf155082f08dc141eafaa/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "faa8f8ff8b7e457f74d74533ebbc0d5a56cf5c72", "url": "https://api.github.com/repos/rust-lang/rust/commits/faa8f8ff8b7e457f74d74533ebbc0d5a56cf5c72", "html_url": "https://github.com/rust-lang/rust/commit/faa8f8ff8b7e457f74d74533ebbc0d5a56cf5c72"}], "stats": {"total": 77, "additions": 36, "deletions": 41}, "files": [{"sha": "8cb671a97f4095740fff6e82f31a4ebd698493c3", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2eea642c3064e2de643cf155082f08dc141eafaa/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eea642c3064e2de643cf155082f08dc141eafaa/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=2eea642c3064e2de643cf155082f08dc141eafaa", "patch": "@@ -417,7 +417,7 @@ pub fn missing_ctor(cx: &MatchCheckCtxt,\n                 }\n             }\n         );\n-        vec::dedup(&mut sorted_vec_lens);\n+        sorted_vec_lens.dedup();\n \n         let mut found_slice = false;\n         let mut next = 0;"}, {"sha": "d560ce621eac969d695a3aa09cb5d7c6e9cae3f0", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2eea642c3064e2de643cf155082f08dc141eafaa/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eea642c3064e2de643cf155082f08dc141eafaa/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=2eea642c3064e2de643cf155082f08dc141eafaa", "patch": "@@ -74,7 +74,7 @@ pub use tuple::{ImmutableTuple6, ImmutableTuple7, ImmutableTuple8, ImmutableTupl\n pub use tuple::{ImmutableTuple10, ImmutableTuple11, ImmutableTuple12};\n pub use vec::{VectorVector, CopyableVector, ImmutableVector};\n pub use vec::{ImmutableEqVector, ImmutableTotalOrdVector, ImmutableCopyableVector};\n-pub use vec::{OwnedVector, OwnedCopyableVector, MutableVector};\n+pub use vec::{OwnedVector, OwnedCopyableVector,OwnedEqVector, MutableVector};\n pub use io::{Reader, ReaderUtil, Writer, WriterUtil};\n \n // Reexported runtime types"}, {"sha": "dab379962a0c06fd377f009bdca349201a44cb01", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 34, "deletions": 39, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/2eea642c3064e2de643cf155082f08dc141eafaa/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eea642c3064e2de643cf155082f08dc141eafaa/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=2eea642c3064e2de643cf155082f08dc141eafaa", "patch": "@@ -343,41 +343,6 @@ pub fn consume_reverse<T>(mut v: ~[T], f: &fn(uint, v: T)) {\n     }\n }\n \n-/**\n- * Remove consecutive repeated elements from a vector; if the vector is\n- * sorted, this removes all duplicates.\n- */\n-pub fn dedup<T:Eq>(v: &mut ~[T]) {\n-    unsafe {\n-        if v.len() < 1 { return; }\n-        let mut last_written = 0;\n-        let mut next_to_read = 1;\n-        do as_mut_buf(*v) |p, ln| {\n-            // last_written < next_to_read <= ln\n-            while next_to_read < ln {\n-                // last_written < next_to_read < ln\n-                if *ptr::mut_offset(p, next_to_read) ==\n-                    *ptr::mut_offset(p, last_written) {\n-                    ptr::replace_ptr(ptr::mut_offset(p, next_to_read),\n-                                     intrinsics::uninit());\n-                } else {\n-                    last_written += 1;\n-                    // last_written <= next_to_read < ln\n-                    if next_to_read != last_written {\n-                        ptr::swap_ptr(ptr::mut_offset(p, last_written),\n-                                      ptr::mut_offset(p, next_to_read));\n-                    }\n-                }\n-                // last_written <= next_to_read < ln\n-                next_to_read += 1;\n-                // last_written < next_to_read <= ln\n-            }\n-        }\n-        // last_written < next_to_read == ln\n-        raw::set_len(v, last_written + 1);\n-    }\n-}\n-\n // Appending\n \n /// Iterates over the `rhs` vector, copying each element and appending it to the\n@@ -1734,14 +1699,44 @@ impl<T:Copy> OwnedCopyableVector<T> for ~[T] {\n }\n \n #[allow(missing_doc)]\n-trait OwnedEqVector<T:Eq> {\n+pub trait OwnedEqVector<T:Eq> {\n     fn dedup(&mut self);\n }\n \n impl<T:Eq> OwnedEqVector<T> for ~[T] {\n-    #[inline]\n-    fn dedup(&mut self) {\n-        dedup(self)\n+    /**\n+     * Remove consecutive repeated elements from a vector; if the vector is\n+     * sorted, this removes all duplicates.\n+     */\n+    pub fn dedup(&mut self) {\n+        unsafe {\n+            if self.len() == 0 { return; }\n+            let mut last_written = 0;\n+            let mut next_to_read = 1;\n+            do as_mut_buf(*self) |p, ln| {\n+                // last_written < next_to_read <= ln\n+                while next_to_read < ln {\n+                    // last_written < next_to_read < ln\n+                    if *ptr::mut_offset(p, next_to_read) ==\n+                        *ptr::mut_offset(p, last_written) {\n+                        ptr::replace_ptr(ptr::mut_offset(p, next_to_read),\n+                                         intrinsics::uninit());\n+                    } else {\n+                        last_written += 1;\n+                        // last_written <= next_to_read < ln\n+                        if next_to_read != last_written {\n+                            ptr::swap_ptr(ptr::mut_offset(p, last_written),\n+                                          ptr::mut_offset(p, next_to_read));\n+                        }\n+                    }\n+                    // last_written <= next_to_read < ln\n+                    next_to_read += 1;\n+                    // last_written < next_to_read <= ln\n+                }\n+            }\n+            // last_written < next_to_read == ln\n+            raw::set_len(self, last_written + 1);\n+        }\n     }\n }\n "}]}