{"sha": "dc1c1fe45602acc2ec93d09c0cfb1a34cf291ecf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjMWMxZmU0NTYwMmFjYzJlYzkzZDA5YzBjZmIxYTM0Y2YyOTFlY2Y=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-01T07:55:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-01T07:55:35Z"}, "message": "Rollup merge of #64928 - JohnTitor:add-some-tests, r=Centril\n\nAdd tests for some issues\n\nCloses #50571\nCloses #58022\nCloses #58344", "tree": {"sha": "2b7041ec71aa32770df30481fbf6f536b497dfbd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b7041ec71aa32770df30481fbf6f536b497dfbd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc1c1fe45602acc2ec93d09c0cfb1a34cf291ecf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdkwZ3CRBK7hj4Ov3rIwAAdHIIAKyNyp08g/EgPKBO8/+w66CK\nonXDVBsgGDjMRlzCaI65sslOKNMEvNiAC4gBfM/MNbffHKkf9L5k3gZuIQ5HUdVi\n9amnUaXyxU22nOD/wbgOAPAcGe5GszwlTZYkqJGaZzEWbja1uSTiXd/b/2jndbZi\nxFNbNciHFXGUuNEV13PMKyeexYrS6Hvq1QoWvwYAUeyRWq9bKQOZg45jHNswIZaD\nR+XqlsO2ej6DTvEqjouoG0UISufSEyRn2rBgHlGgIn60uN6WnXKCeFEcuFGBWncB\nO87iU9Osoij+q37Trv0O44QcK1FG20ku/ZLaN48DG98N0g1cEItWMEyixUdcF1k=\n=Cv/e\n-----END PGP SIGNATURE-----\n", "payload": "tree 2b7041ec71aa32770df30481fbf6f536b497dfbd\nparent 24a84fae34a3d4eff2dd631c65365d20a6e11b04\nparent 9c73131fd04bf5a60c53c752293f136fdaa016af\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1569916535 +0200\ncommitter GitHub <noreply@github.com> 1569916535 +0200\n\nRollup merge of #64928 - JohnTitor:add-some-tests, r=Centril\n\nAdd tests for some issues\n\nCloses #50571\nCloses #58022\nCloses #58344\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc1c1fe45602acc2ec93d09c0cfb1a34cf291ecf", "html_url": "https://github.com/rust-lang/rust/commit/dc1c1fe45602acc2ec93d09c0cfb1a34cf291ecf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc1c1fe45602acc2ec93d09c0cfb1a34cf291ecf/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24a84fae34a3d4eff2dd631c65365d20a6e11b04", "url": "https://api.github.com/repos/rust-lang/rust/commits/24a84fae34a3d4eff2dd631c65365d20a6e11b04", "html_url": "https://github.com/rust-lang/rust/commit/24a84fae34a3d4eff2dd631c65365d20a6e11b04"}, {"sha": "9c73131fd04bf5a60c53c752293f136fdaa016af", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c73131fd04bf5a60c53c752293f136fdaa016af", "html_url": "https://github.com/rust-lang/rust/commit/9c73131fd04bf5a60c53c752293f136fdaa016af"}], "stats": {"total": 125, "additions": 125, "deletions": 0}, "files": [{"sha": "728c113bdc32347849e68dbf7116862419136e60", "filename": "src/test/ui/issues/issue-50571.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc1c1fe45602acc2ec93d09c0cfb1a34cf291ecf/src%2Ftest%2Fui%2Fissues%2Fissue-50571.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc1c1fe45602acc2ec93d09c0cfb1a34cf291ecf/src%2Ftest%2Fui%2Fissues%2Fissue-50571.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50571.rs?ref=dc1c1fe45602acc2ec93d09c0cfb1a34cf291ecf", "patch": "@@ -0,0 +1,6 @@\n+trait Foo {\n+    fn foo([a, b]: [i32; 2]) {}\n+    //~^ ERROR: patterns aren't allowed in methods without bodies\n+}\n+\n+fn main() {}"}, {"sha": "834635388a0660a174ee842d658dc73d63eb10c0", "filename": "src/test/ui/issues/issue-50571.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/dc1c1fe45602acc2ec93d09c0cfb1a34cf291ecf/src%2Ftest%2Fui%2Fissues%2Fissue-50571.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc1c1fe45602acc2ec93d09c0cfb1a34cf291ecf/src%2Ftest%2Fui%2Fissues%2Fissue-50571.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50571.stderr?ref=dc1c1fe45602acc2ec93d09c0cfb1a34cf291ecf", "patch": "@@ -0,0 +1,13 @@\n+error[E0642]: patterns aren't allowed in methods without bodies\n+  --> $DIR/issue-50571.rs:2:12\n+   |\n+LL |     fn foo([a, b]: [i32; 2]) {}\n+   |            ^^^^^^\n+help: give this argument a name or use an underscore to ignore it\n+   |\n+LL |     fn foo(_: [i32; 2]) {}\n+   |            ^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0642`."}, {"sha": "c6dd45e6cf3e9a03cb815b2eb09cd83be0b06d1a", "filename": "src/test/ui/issues/issue-58022.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/dc1c1fe45602acc2ec93d09c0cfb1a34cf291ecf/src%2Ftest%2Fui%2Fissues%2Fissue-58022.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc1c1fe45602acc2ec93d09c0cfb1a34cf291ecf/src%2Ftest%2Fui%2Fissues%2Fissue-58022.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58022.rs?ref=dc1c1fe45602acc2ec93d09c0cfb1a34cf291ecf", "patch": "@@ -0,0 +1,18 @@\n+pub trait Foo: Sized {\n+    const SIZE: usize;\n+\n+    fn new(slice: &[u8; Foo::SIZE]) -> Self;\n+    //~^ ERROR: type annotations needed: cannot resolve `_: Foo`\n+}\n+\n+pub struct Bar<T: ?Sized>(T);\n+\n+impl Bar<[u8]> {\n+    const SIZE: usize = 32;\n+\n+    fn new(slice: &[u8; Self::SIZE]) -> Self {\n+        Foo(Box::new(*slice)) //~ ERROR: expected function, found trait `Foo`\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "71bad7b81fa87beb11e308b6a0b92b19eefbcf62", "filename": "src/test/ui/issues/issue-58022.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/dc1c1fe45602acc2ec93d09c0cfb1a34cf291ecf/src%2Ftest%2Fui%2Fissues%2Fissue-58022.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc1c1fe45602acc2ec93d09c0cfb1a34cf291ecf/src%2Ftest%2Fui%2Fissues%2Fissue-58022.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58022.stderr?ref=dc1c1fe45602acc2ec93d09c0cfb1a34cf291ecf", "patch": "@@ -0,0 +1,19 @@\n+error[E0423]: expected function, found trait `Foo`\n+  --> $DIR/issue-58022.rs:14:9\n+   |\n+LL |         Foo(Box::new(*slice))\n+   |         ^^^ not a function\n+\n+error[E0283]: type annotations needed: cannot resolve `_: Foo`\n+  --> $DIR/issue-58022.rs:4:25\n+   |\n+LL |     const SIZE: usize;\n+   |     ------------------ required by `Foo::SIZE`\n+LL | \n+LL |     fn new(slice: &[u8; Foo::SIZE]) -> Self;\n+   |                         ^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0283, E0423.\n+For more information about an error, try `rustc --explain E0283`."}, {"sha": "99b656d74f505cdbfc81401b053180571ece910f", "filename": "src/test/ui/issues/issue-58344.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/dc1c1fe45602acc2ec93d09c0cfb1a34cf291ecf/src%2Ftest%2Fui%2Fissues%2Fissue-58344.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc1c1fe45602acc2ec93d09c0cfb1a34cf291ecf/src%2Ftest%2Fui%2Fissues%2Fissue-58344.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58344.rs?ref=dc1c1fe45602acc2ec93d09c0cfb1a34cf291ecf", "patch": "@@ -0,0 +1,50 @@\n+use std::ops::Add;\n+\n+trait Trait<T> {\n+    fn get(self) -> T;\n+}\n+\n+struct Holder<T>(T);\n+\n+impl<T> Trait<T> for Holder<T> {\n+    fn get(self) -> T {\n+        self.0\n+    }\n+}\n+\n+enum Either<L, R> {\n+    Left(L),\n+    Right(R),\n+}\n+\n+impl<L, R> Either<L, R> {\n+    fn converge<T>(self) -> T where L: Trait<T>, R: Trait<T> {\n+        match self {\n+            Either::Left(val) => val.get(),\n+            Either::Right(val) => val.get(),\n+        }\n+    }\n+}\n+\n+fn add_generic<A: Add<B>, B>(lhs: A, rhs: B) -> Either<\n+    impl Trait<<A as Add<B>>::Output>,\n+    impl Trait<<A as Add<B>>::Output>\n+> {\n+    if true {\n+        Either::Left(Holder(lhs + rhs))\n+    } else {\n+        Either::Right(Holder(lhs + rhs))\n+    }\n+}\n+\n+fn add_one(\n+    value: u32,\n+) -> Either<impl Trait<<u32 as Add<u32>>::Output>, impl Trait<<u32 as Add<u32>>::Output>> {\n+    //~^ ERROR: the trait bound `impl Trait<<u32 as std::ops::Add>::Output>: Trait<u32>`\n+    //~| ERROR: the trait bound `impl Trait<<u32 as std::ops::Add>::Output>: Trait<u32>`\n+    add_generic(value, 1u32)\n+}\n+\n+pub fn main() {\n+    add_one(3).converge();\n+}"}, {"sha": "427d03b679d5f8daedcf05895e3c5b35408dd5c3", "filename": "src/test/ui/issues/issue-58344.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/dc1c1fe45602acc2ec93d09c0cfb1a34cf291ecf/src%2Ftest%2Fui%2Fissues%2Fissue-58344.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc1c1fe45602acc2ec93d09c0cfb1a34cf291ecf/src%2Ftest%2Fui%2Fissues%2Fissue-58344.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58344.stderr?ref=dc1c1fe45602acc2ec93d09c0cfb1a34cf291ecf", "patch": "@@ -0,0 +1,19 @@\n+error[E0277]: the trait bound `impl Trait<<u32 as std::ops::Add>::Output>: Trait<u32>` is not satisfied\n+  --> $DIR/issue-58344.rs:42:13\n+   |\n+LL | ) -> Either<impl Trait<<u32 as Add<u32>>::Output>, impl Trait<<u32 as Add<u32>>::Output>> {\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait<u32>` is not implemented for `impl Trait<<u32 as std::ops::Add>::Output>`\n+   |\n+   = note: the return type of a function must have a statically known size\n+\n+error[E0277]: the trait bound `impl Trait<<u32 as std::ops::Add>::Output>: Trait<u32>` is not satisfied\n+  --> $DIR/issue-58344.rs:42:52\n+   |\n+LL | ) -> Either<impl Trait<<u32 as Add<u32>>::Output>, impl Trait<<u32 as Add<u32>>::Output>> {\n+   |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait<u32>` is not implemented for `impl Trait<<u32 as std::ops::Add>::Output>`\n+   |\n+   = note: the return type of a function must have a statically known size\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}]}