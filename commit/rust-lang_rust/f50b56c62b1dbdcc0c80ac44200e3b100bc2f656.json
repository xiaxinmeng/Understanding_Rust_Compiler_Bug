{"sha": "f50b56c62b1dbdcc0c80ac44200e3b100bc2f656", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1MGI1NmM2MmIxZGJkY2MwYzgwYWM0NDIwMGUzYjEwMGJjMmY2NTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-06T02:52:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-06T02:52:22Z"}, "message": "auto merge of #17414 : jakub-/rust/issue-17405, r=alexcrichton\n\nFixes #17405.\r\nFixes #17518.\r\nFixes #17800.", "tree": {"sha": "09861af1b69e4396109a513dede6a87d59cea242", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09861af1b69e4396109a513dede6a87d59cea242"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f50b56c62b1dbdcc0c80ac44200e3b100bc2f656", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f50b56c62b1dbdcc0c80ac44200e3b100bc2f656", "html_url": "https://github.com/rust-lang/rust/commit/f50b56c62b1dbdcc0c80ac44200e3b100bc2f656", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f50b56c62b1dbdcc0c80ac44200e3b100bc2f656/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d15f28986e00e1a1b290b0f0fcf76c3f4e6e261", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d15f28986e00e1a1b290b0f0fcf76c3f4e6e261", "html_url": "https://github.com/rust-lang/rust/commit/6d15f28986e00e1a1b290b0f0fcf76c3f4e6e261"}, {"sha": "b9896cbf6efa6736730f4666957b94b7e29d7fdf", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9896cbf6efa6736730f4666957b94b7e29d7fdf", "html_url": "https://github.com/rust-lang/rust/commit/b9896cbf6efa6736730f4666957b94b7e29d7fdf"}], "stats": {"total": 100, "additions": 86, "deletions": 14}, "files": [{"sha": "b39c415216837b0883be64cba48c49b47959def8", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f50b56c62b1dbdcc0c80ac44200e3b100bc2f656/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f50b56c62b1dbdcc0c80ac44200e3b100bc2f656/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=f50b56c62b1dbdcc0c80ac44200e3b100bc2f656", "patch": "@@ -38,7 +38,6 @@ register_diagnostics!(\n     E0017,\n     E0019,\n     E0020,\n-    E0021,\n     E0022,\n     E0023,\n     E0024,\n@@ -62,7 +61,6 @@ register_diagnostics!(\n     E0045,\n     E0046,\n     E0047,\n-    E0048,\n     E0049,\n     E0050,\n     E0051,\n@@ -117,8 +115,6 @@ register_diagnostics!(\n     E0109,\n     E0110,\n     E0113,\n-    E0114,\n-    E0115,\n     E0116,\n     E0117,\n     E0118,\n@@ -152,5 +148,7 @@ register_diagnostics!(\n     E0158,\n     E0159,\n     E0161,\n-    E0162\n+    E0162,\n+    E0163,\n+    E0164\n )"}, {"sha": "18e2e6c4f09b536147d006bba5f8cea73d5b2587", "filename": "src/librustc/middle/typeck/check/_match.rs", "status": "modified", "additions": 24, "deletions": 7, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f50b56c62b1dbdcc0c80ac44200e3b100bc2f656/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f50b56c62b1dbdcc0c80ac44200e3b100bc2f656/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs?ref=f50b56c62b1dbdcc0c80ac44200e3b100bc2f656", "patch": "@@ -382,26 +382,43 @@ pub fn check_struct_like_enum_variant_pat(pcx: &pat_ctxt,\n \n     // Find the variant that was specified.\n     match tcx.def_map.borrow().find(&pat_id) {\n-        Some(&def::DefVariant(found_enum_id, variant_id, _))\n+        Some(&def::DefVariant(found_enum_id, variant_id, true))\n                 if found_enum_id == enum_id => {\n             // Get the struct fields from this struct-like enum variant.\n-            let class_fields = ty::lookup_struct_fields(tcx, variant_id);\n-\n-            check_struct_pat_fields(pcx, span, fields, class_fields,\n+            let struct_fields = ty::lookup_struct_fields(tcx, variant_id);\n+            check_struct_pat_fields(pcx, span, fields, struct_fields,\n                                     variant_id, substitutions, etc);\n+            fcx.write_ty(pat_id, expected);\n+        }\n+        Some(&def::DefVariant(_, _, false)) => {\n+            let name = pprust::path_to_string(path);\n+            span_err!(tcx.sess, span, E0163,\n+                \"`{}` does not name a struct variant\", name);\n+            fcx.write_error(pat_id);\n+        }\n+        Some(&def::DefVariant(_, _, true)) => {\n+            let name = pprust::path_to_string(path);\n+            span_err!(tcx.sess, span, E0164,\n+                \"`{}` does not name a variant of the type being matched against\", name);\n+            fcx.write_error(pat_id);\n         }\n         Some(&def::DefStruct(..)) |\n-        Some(&def::DefVariant(..)) |\n         Some(&def::DefTy(..)) => {\n             let name = pprust::path_to_string(path);\n             span_err!(tcx.sess, span, E0028,\n-                \"mismatched types: expected `{}`, found `{}`\",\n-                fcx.infcx().ty_to_string(expected), name);\n+                \"`{}` does not name a variant\", name);\n+            fcx.write_error(pat_id);\n         }\n         _ => {\n             tcx.sess.span_bug(span, \"resolve didn't write in variant\");\n         }\n     }\n+\n+    if ty::type_is_error(fcx.node_ty(pat_id)) {\n+        for field in fields.iter() {\n+            check_pat(pcx, &*field.pat, ty::mk_err());\n+        }\n+    }\n }\n \n // Pattern checking is top-down rather than bottom-up so that bindings get"}, {"sha": "75a412325be4182c7a5517b2af7b6f3727441adf", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f50b56c62b1dbdcc0c80ac44200e3b100bc2f656/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f50b56c62b1dbdcc0c80ac44200e3b100bc2f656/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=f50b56c62b1dbdcc0c80ac44200e3b100bc2f656", "patch": "@@ -4330,7 +4330,7 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n         // Resolve the path.\n         let def = tcx.def_map.borrow().find(&id).map(|i| *i);\n         let struct_id = match def {\n-            Some(def::DefVariant(enum_id, variant_id, _)) => {\n+            Some(def::DefVariant(enum_id, variant_id, true)) => {\n                 check_struct_enum_variant(fcx, id, expr.span, enum_id,\n                                           variant_id, fields.as_slice());\n                 enum_id"}, {"sha": "b7fa54e5c1883ff4dd55ec7a9e650cb385022a3d", "filename": "src/test/compile-fail/issue-15896.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f50b56c62b1dbdcc0c80ac44200e3b100bc2f656/src%2Ftest%2Fcompile-fail%2Fissue-15896.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f50b56c62b1dbdcc0c80ac44200e3b100bc2f656/src%2Ftest%2Fcompile-fail%2Fissue-15896.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-15896.rs?ref=f50b56c62b1dbdcc0c80ac44200e3b100bc2f656", "patch": "@@ -18,7 +18,7 @@ fn main() {\n     let e = B(REB(()), Tau { t: 3 });\n     let u = match e {\n         B(\n-          Tau{t: x},    //~ ERROR mismatched types\n+          Tau{t: x}, //~ ERROR `Tau` does not name a variant\n           _) => x,\n     };\n }"}, {"sha": "b80cfb521ef1d92f6dbcb193843622835e3fb5e3", "filename": "src/test/compile-fail/issue-17405.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f50b56c62b1dbdcc0c80ac44200e3b100bc2f656/src%2Ftest%2Fcompile-fail%2Fissue-17405.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f50b56c62b1dbdcc0c80ac44200e3b100bc2f656/src%2Ftest%2Fcompile-fail%2Fissue-17405.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17405.rs?ref=f50b56c62b1dbdcc0c80ac44200e3b100bc2f656", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+enum Foo {\n+    Bar(int)\n+}\n+\n+fn main() {\n+    match Bar(1i) {\n+        Foo { i } => () //~ ERROR `Foo` does not name a variant\n+    }\n+}"}, {"sha": "0410fadeb7892b3fddab9b8f031c365376c71914", "filename": "src/test/compile-fail/issue-17518.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f50b56c62b1dbdcc0c80ac44200e3b100bc2f656/src%2Ftest%2Fcompile-fail%2Fissue-17518.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f50b56c62b1dbdcc0c80ac44200e3b100bc2f656/src%2Ftest%2Fcompile-fail%2Fissue-17518.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17518.rs?ref=f50b56c62b1dbdcc0c80ac44200e3b100bc2f656", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+enum SomeEnum {\n+    E\n+}\n+\n+fn main() {\n+    E { name: \"foobar\" }; //~ ERROR `E` does not name a structure\n+}"}, {"sha": "8ef016e3fd5a7db014d896999dd79013b53195c3", "filename": "src/test/compile-fail/issue-17800.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f50b56c62b1dbdcc0c80ac44200e3b100bc2f656/src%2Ftest%2Fcompile-fail%2Fissue-17800.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f50b56c62b1dbdcc0c80ac44200e3b100bc2f656/src%2Ftest%2Fcompile-fail%2Fissue-17800.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17800.rs?ref=f50b56c62b1dbdcc0c80ac44200e3b100bc2f656", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+enum MyOption<T> {\n+    MySome(T),\n+    MyNone,\n+}\n+\n+fn main() {\n+    match MySome(42i) {\n+        MySome { x: 42i } => (), //~ ERROR `MySome` does not name a struct variant\n+        _ => (),\n+    }\n+}"}]}