{"sha": "b0f05d4bc5f6ee7d6f5e10f20675a7a7076520b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwZjA1ZDRiYzVmNmVlN2Q2ZjVlMTBmMjA2NzVhN2E3MDc2NTIwYjA=", "commit": {"author": {"name": "Taylor Cramer", "email": "cramertj@google.com", "date": "2017-06-12T07:11:24Z"}, "committer": {"name": "Taylor Cramer", "email": "cramertj@google.com", "date": "2017-06-14T07:13:35Z"}, "message": "On-demandify is_allocator and is_panic_runtime", "tree": {"sha": "9047b4dcf5bc302ef523b03dd2b8241f7ced410c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9047b4dcf5bc302ef523b03dd2b8241f7ced410c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0f05d4bc5f6ee7d6f5e10f20675a7a7076520b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0f05d4bc5f6ee7d6f5e10f20675a7a7076520b0", "html_url": "https://github.com/rust-lang/rust/commit/b0f05d4bc5f6ee7d6f5e10f20675a7a7076520b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0f05d4bc5f6ee7d6f5e10f20675a7a7076520b0/comments", "author": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "328c6c81bf7c1093b6bca34286d86f193a7d054e", "url": "https://api.github.com/repos/rust-lang/rust/commits/328c6c81bf7c1093b6bca34286d86f193a7d054e", "html_url": "https://github.com/rust-lang/rust/commit/328c6c81bf7c1093b6bca34286d86f193a7d054e"}], "stats": {"total": 61, "additions": 33, "deletions": 28}, "files": [{"sha": "6631e919e425fdd14009d5b41fb3dd1edb38c74b", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0f05d4bc5f6ee7d6f5e10f20675a7a7076520b0/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f05d4bc5f6ee7d6f5e10f20675a7a7076520b0/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=b0f05d4bc5f6ee7d6f5e10f20675a7a7076520b0", "patch": "@@ -251,8 +251,6 @@ pub trait CrateStore {\n     fn export_macros(&self, cnum: CrateNum);\n     fn lang_items(&self, cnum: CrateNum) -> Vec<(DefIndex, usize)>;\n     fn missing_lang_items(&self, cnum: CrateNum) -> Vec<lang_items::LangItem>;\n-    fn is_allocator(&self, cnum: CrateNum) -> bool;\n-    fn is_panic_runtime(&self, cnum: CrateNum) -> bool;\n     fn is_compiler_builtins(&self, cnum: CrateNum) -> bool;\n     fn is_sanitizer_runtime(&self, cnum: CrateNum) -> bool;\n     fn panic_strategy(&self, cnum: CrateNum) -> PanicStrategy;\n@@ -371,8 +369,6 @@ impl CrateStore for DummyCrateStore {\n         { bug!(\"missing_lang_items\") }\n     fn dep_kind(&self, cnum: CrateNum) -> DepKind { bug!(\"is_explicitly_linked\") }\n     fn export_macros(&self, cnum: CrateNum) { bug!(\"export_macros\") }\n-    fn is_allocator(&self, cnum: CrateNum) -> bool { bug!(\"is_allocator\") }\n-    fn is_panic_runtime(&self, cnum: CrateNum) -> bool { bug!(\"is_panic_runtime\") }\n     fn is_compiler_builtins(&self, cnum: CrateNum) -> bool { bug!(\"is_compiler_builtins\") }\n     fn is_sanitizer_runtime(&self, cnum: CrateNum) -> bool { bug!(\"is_sanitizer_runtime\") }\n     fn panic_strategy(&self, cnum: CrateNum) -> PanicStrategy {"}, {"sha": "da217d7a1733795bcf1592558ea885f8474d3f93", "filename": "src/librustc/middle/dependency_format.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b0f05d4bc5f6ee7d6f5e10f20675a7a7076520b0/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f05d4bc5f6ee7d6f5e10f20675a7a7076520b0/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs?ref=b0f05d4bc5f6ee7d6f5e10f20675a7a7076520b0", "patch": "@@ -97,7 +97,7 @@ pub fn calculate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     let mut fmts = sess.dependency_formats.borrow_mut();\n     for &ty in sess.crate_types.borrow().iter() {\n         let linkage = calculate_type(tcx, ty);\n-        verify_ok(sess, &linkage);\n+        verify_ok(tcx, &linkage);\n         fmts.insert(ty, linkage);\n     }\n     sess.abort_if_errors();\n@@ -116,7 +116,7 @@ fn calculate_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         // If the global prefer_dynamic switch is turned off, first attempt\n         // static linkage (this can fail).\n         config::CrateTypeExecutable if !sess.opts.cg.prefer_dynamic => {\n-            if let Some(v) = attempt_static(sess) {\n+            if let Some(v) = attempt_static(tcx) {\n                 return v;\n             }\n         }\n@@ -129,7 +129,7 @@ fn calculate_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         // to be found, we generate some nice pretty errors.\n         config::CrateTypeStaticlib |\n         config::CrateTypeCdylib => {\n-            if let Some(v) = attempt_static(sess) {\n+            if let Some(v) = attempt_static(tcx) {\n                 return v;\n             }\n             for cnum in sess.cstore.crates() {\n@@ -146,7 +146,7 @@ fn calculate_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         // to try to eagerly statically link all dependencies. This is normally\n         // done for end-product dylibs, not intermediate products.\n         config::CrateTypeDylib if !sess.opts.cg.prefer_dynamic => {\n-            if let Some(v) = attempt_static(sess) {\n+            if let Some(v) = attempt_static(tcx) {\n                 return v;\n             }\n         }\n@@ -215,9 +215,9 @@ fn calculate_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // Things like allocators and panic runtimes may not have been activated\n     // quite yet, so do so here.\n     activate_injected_dep(sess.injected_allocator.get(), &mut ret,\n-                          &|cnum| sess.cstore.is_allocator(cnum));\n+                          &|cnum| tcx.is_allocator(cnum));\n     activate_injected_dep(sess.injected_panic_runtime.get(), &mut ret,\n-                          &|cnum| sess.cstore.is_panic_runtime(cnum));\n+                          &|cnum| tcx.is_panic_runtime(cnum));\n \n     // When dylib B links to dylib A, then when using B we must also link to A.\n     // It could be the case, however, that the rlib for A is present (hence we\n@@ -274,7 +274,8 @@ fn add_library(sess: &session::Session,\n     }\n }\n \n-fn attempt_static(sess: &session::Session) -> Option<DependencyList> {\n+fn attempt_static<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Option<DependencyList> {\n+    let sess = &tcx.sess;\n     let crates = sess.cstore.used_crates(RequireStatic);\n     if !crates.iter().by_ref().all(|&(_, ref p)| p.is_some()) {\n         return None\n@@ -295,9 +296,9 @@ fn attempt_static(sess: &session::Session) -> Option<DependencyList> {\n     // explicitly linked, which is the case for any injected dependency. Handle\n     // that here and activate them.\n     activate_injected_dep(sess.injected_allocator.get(), &mut ret,\n-                          &|cnum| sess.cstore.is_allocator(cnum));\n+                          &|cnum| tcx.is_allocator(cnum));\n     activate_injected_dep(sess.injected_panic_runtime.get(), &mut ret,\n-                          &|cnum| sess.cstore.is_panic_runtime(cnum));\n+                          &|cnum| tcx.is_panic_runtime(cnum));\n \n     Some(ret)\n }\n@@ -332,7 +333,8 @@ fn activate_injected_dep(injected: Option<CrateNum>,\n \n // After the linkage for a crate has been determined we need to verify that\n // there's only going to be one allocator in the output.\n-fn verify_ok(sess: &session::Session, list: &[Linkage]) {\n+fn verify_ok<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, list: &[Linkage]) {\n+    let sess = &tcx.sess;\n     if list.len() == 0 {\n         return\n     }\n@@ -343,7 +345,7 @@ fn verify_ok(sess: &session::Session, list: &[Linkage]) {\n             continue\n         }\n         let cnum = CrateNum::new(i + 1);\n-        if sess.cstore.is_allocator(cnum) {\n+        if tcx.is_allocator(cnum) {\n             if let Some(prev) = allocator {\n                 let prev_name = sess.cstore.crate_name(prev);\n                 let cur_name = sess.cstore.crate_name(cnum);\n@@ -354,7 +356,7 @@ fn verify_ok(sess: &session::Session, list: &[Linkage]) {\n             allocator = Some(cnum);\n         }\n \n-        if sess.cstore.is_panic_runtime(cnum) {\n+        if tcx.is_panic_runtime(cnum) {\n             if let Some((prev, _)) = panic_runtime {\n                 let prev_name = sess.cstore.crate_name(prev);\n                 let cur_name = sess.cstore.crate_name(cnum);"}, {"sha": "abfd021e4f118dba4abf9cb112ec0cf13560fc96", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b0f05d4bc5f6ee7d6f5e10f20675a7a7076520b0/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f05d4bc5f6ee7d6f5e10f20675a7a7076520b0/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=b0f05d4bc5f6ee7d6f5e10f20675a7a7076520b0", "patch": "@@ -489,6 +489,18 @@ impl<'tcx> QueryDescription for queries::dylib_dependency_formats<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription for queries::is_allocator<'tcx> {\n+    fn describe(_: TyCtxt, _: CrateNum) -> String {\n+        \"checking if the crate is_allocator\".to_string()\n+    }\n+}\n+\n+impl<'tcx> QueryDescription for queries::is_panic_runtime<'tcx> {\n+    fn describe(_: TyCtxt, _: CrateNum) -> String {\n+        \"checking if the crate is_panic_runtime\".to_string()\n+    }\n+}\n+\n macro_rules! define_maps {\n     (<$tcx:tt>\n      $($(#[$attr:meta])*\n@@ -948,6 +960,9 @@ define_maps! { <'tcx>\n \n     [] dylib_dependency_formats: MetaDataByCrateNum(CrateNum)\n                                     -> Rc<Vec<(CrateNum, LinkagePreference)>>,\n+\n+    [] is_allocator: MetaDataByCrateNum(CrateNum) -> bool,\n+    [] is_panic_runtime: MetaDataByCrateNum(CrateNum) -> bool,\n }\n \n fn type_param_predicates((item_id, param_id): (DefId, DefId)) -> DepConstructor {"}, {"sha": "ca45696360e92c9f718e67c4e5ddec19fc7cdb3c", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b0f05d4bc5f6ee7d6f5e10f20675a7a7076520b0/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f05d4bc5f6ee7d6f5e10f20675a7a7076520b0/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=b0f05d4bc5f6ee7d6f5e10f20675a7a7076520b0", "patch": "@@ -154,6 +154,8 @@ provide! { <'tcx> tcx, def_id, cdata, cnum,\n \n     ByCrateNum {\n         dylib_dependency_formats => { Rc::new(cdata.get_dylib_dependency_formats(&tcx.dep_graph)) }\n+        is_allocator => { cdata.is_allocator(&tcx.dep_graph) }\n+        is_panic_runtime => { cdata.is_panic_runtime(&tcx.dep_graph) }\n     }\n }\n \n@@ -259,16 +261,6 @@ impl CrateStore for cstore::CStore {\n         self.get_crate_data(cnum).get_missing_lang_items(&self.dep_graph)\n     }\n \n-    fn is_allocator(&self, cnum: CrateNum) -> bool\n-    {\n-        self.get_crate_data(cnum).is_allocator(&self.dep_graph)\n-    }\n-\n-    fn is_panic_runtime(&self, cnum: CrateNum) -> bool\n-    {\n-        self.get_crate_data(cnum).is_panic_runtime(&self.dep_graph)\n-    }\n-\n     fn is_compiler_builtins(&self, cnum: CrateNum) -> bool {\n         self.get_crate_data(cnum).is_compiler_builtins(&self.dep_graph)\n     }"}, {"sha": "8eb7ccd48220fbe43ae95542e92ecf8b30e34e4b", "filename": "src/librustc_trans/back/symbol_export.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0f05d4bc5f6ee7d6f5e10f20675a7a7076520b0/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f05d4bc5f6ee7d6f5e10f20675a7a7076520b0/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs?ref=b0f05d4bc5f6ee7d6f5e10f20675a7a7076520b0", "patch": "@@ -92,8 +92,8 @@ impl ExportedSymbols {\n             // Down below we'll hardwire all of the symbols to the `Rust` export\n             // level instead.\n             let special_runtime_crate =\n-                scx.sess().cstore.is_allocator(cnum) ||\n-                scx.sess().cstore.is_panic_runtime(cnum) ||\n+                scx.tcx().is_allocator(cnum) ||\n+                scx.tcx().is_panic_runtime(cnum) ||\n                 scx.sess().cstore.is_compiler_builtins(cnum);\n \n             let crate_exports = scx"}]}