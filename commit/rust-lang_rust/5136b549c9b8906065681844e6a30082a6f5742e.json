{"sha": "5136b549c9b8906065681844e6a30082a6f5742e", "node_id": "C_kwDOAAsO6NoAKDUxMzZiNTQ5YzliODkwNjA2NTY4MTg0NGU2YTMwMDgyYTZmNTc0MmU", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-02-08T16:04:53Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-02-16T19:32:53Z"}, "message": "Unify sidebar a bit more by generating a list using <ul> instead of <div> elements", "tree": {"sha": "839aeb95f6287bd8b372ac8d7fe0511ec09f187b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/839aeb95f6287bd8b372ac8d7fe0511ec09f187b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5136b549c9b8906065681844e6a30082a6f5742e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5136b549c9b8906065681844e6a30082a6f5742e", "html_url": "https://github.com/rust-lang/rust/commit/5136b549c9b8906065681844e6a30082a6f5742e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5136b549c9b8906065681844e6a30082a6f5742e/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6421a499a50adbaa7b5d0234bdd4817d970f0933", "url": "https://api.github.com/repos/rust-lang/rust/commits/6421a499a50adbaa7b5d0234bdd4817d970f0933", "html_url": "https://github.com/rust-lang/rust/commit/6421a499a50adbaa7b5d0234bdd4817d970f0933"}], "stats": {"total": 236, "additions": 109, "deletions": 127}, "files": [{"sha": "3e3302f8f4db701594d95d1228106cc4b9b0a338", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 104, "deletions": 121, "changes": 225, "blob_url": "https://github.com/rust-lang/rust/blob/5136b549c9b8906065681844e6a30082a6f5742e/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5136b549c9b8906065681844e6a30082a6f5742e/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=5136b549c9b8906065681844e6a30082a6f5742e", "patch": "@@ -1963,16 +1963,12 @@ fn sidebar_assoc_items(cx: &Context<'_>, out: &mut Buffer, it: &clean::Item) {\n                 // We want links' order to be reproducible so we don't use unstable sort.\n                 assoc_consts.sort();\n \n-                out.push_str(\n-                    \"<h3 class=\\\"sidebar-title\\\">\\\n-                        <a href=\\\"#implementations\\\">Associated Constants</a>\\\n-                     </h3>\\\n-                     <div class=\\\"sidebar-links\\\">\",\n+                print_sidebar_block(\n+                    out,\n+                    \"implementations\",\n+                    \"Associated Constants\",\n+                    assoc_consts.iter(),\n                 );\n-                for line in assoc_consts {\n-                    write!(out, \"{}\", line);\n-                }\n-                out.push_str(\"</div>\");\n             }\n             let mut methods = v\n                 .iter()\n@@ -1983,14 +1979,7 @@ fn sidebar_assoc_items(cx: &Context<'_>, out: &mut Buffer, it: &clean::Item) {\n                 // We want links' order to be reproducible so we don't use unstable sort.\n                 methods.sort();\n \n-                out.push_str(\n-                    \"<h3 class=\\\"sidebar-title\\\"><a href=\\\"#implementations\\\">Methods</a></h3>\\\n-                     <div class=\\\"sidebar-links\\\">\",\n-                );\n-                for line in methods {\n-                    write!(out, \"{}\", line);\n-                }\n-                out.push_str(\"</div>\");\n+                print_sidebar_block(out, \"implementations\", \"Methods\", methods.iter());\n             }\n         }\n \n@@ -2029,14 +2018,6 @@ fn sidebar_assoc_items(cx: &Context<'_>, out: &mut Buffer, it: &clean::Item) {\n                 ret\n             };\n \n-            let write_sidebar_links = |out: &mut Buffer, links: Vec<String>| {\n-                out.push_str(\"<div class=\\\"sidebar-links\\\">\");\n-                for link in links {\n-                    out.push_str(&link);\n-                }\n-                out.push_str(\"</div>\");\n-            };\n-\n             let (synthetic, concrete): (Vec<&Impl>, Vec<&Impl>) =\n                 v.iter().partition::<Vec<_>, _>(|i| i.inner_impl().kind.is_auto());\n             let (blanket_impl, concrete): (Vec<&Impl>, Vec<&Impl>) =\n@@ -2047,27 +2028,30 @@ fn sidebar_assoc_items(cx: &Context<'_>, out: &mut Buffer, it: &clean::Item) {\n             let blanket_format = format_impls(blanket_impl);\n \n             if !concrete_format.is_empty() {\n-                out.push_str(\n-                    \"<h3 class=\\\"sidebar-title\\\"><a href=\\\"#trait-implementations\\\">\\\n-                        Trait Implementations</a></h3>\",\n+                print_sidebar_block(\n+                    out,\n+                    \"trait-implementations\",\n+                    \"Trait Implementations\",\n+                    concrete_format.iter(),\n                 );\n-                write_sidebar_links(out, concrete_format);\n             }\n \n             if !synthetic_format.is_empty() {\n-                out.push_str(\n-                    \"<h3 class=\\\"sidebar-title\\\"><a href=\\\"#synthetic-implementations\\\">\\\n-                        Auto Trait Implementations</a></h3>\",\n+                print_sidebar_block(\n+                    out,\n+                    \"synthetic-implementations\",\n+                    \"Auto Trait Implementations\",\n+                    synthetic_format.iter(),\n                 );\n-                write_sidebar_links(out, synthetic_format);\n             }\n \n             if !blanket_format.is_empty() {\n-                out.push_str(\n-                    \"<h3 class=\\\"sidebar-title\\\"><a href=\\\"#blanket-implementations\\\">\\\n-                        Blanket Implementations</a></h3>\",\n+                print_sidebar_block(\n+                    out,\n+                    \"blanket-implementations\",\n+                    \"Blanket Implementations\",\n+                    blanket_format.iter(),\n                 );\n-                write_sidebar_links(out, blanket_format);\n             }\n         }\n     }\n@@ -2127,20 +2111,14 @@ fn sidebar_deref_methods(\n                 } else {\n                     \"deref-methods\"\n                 };\n-                write!(\n-                    out,\n-                    \"<h3 class=\\\"sidebar-title\\\"><a href=\\\"#{}\\\">Methods from {}&lt;Target={}&gt;</a></h3>\",\n-                    id,\n+                let title = format!(\n+                    \"Methods from {}&lt;Target={}&gt;\",\n                     Escape(&format!(\"{:#}\", impl_.inner_impl().trait_.as_ref().unwrap().print(cx))),\n                     Escape(&format!(\"{:#}\", real_target.print(cx))),\n                 );\n                 // We want links' order to be reproducible so we don't use unstable sort.\n                 ret.sort();\n-                out.push_str(\"<div class=\\\"sidebar-links\\\">\");\n-                for link in ret {\n-                    write!(out, \"{}\", link);\n-                }\n-                out.push_str(\"</div>\");\n+                print_sidebar_block(out, id, &title, ret.iter());\n             }\n         }\n \n@@ -2166,27 +2144,19 @@ fn sidebar_struct(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item, s: &clea\n     let fields = get_struct_fields_name(&s.fields);\n \n     if !fields.is_empty() {\n-        if let CtorKind::Fictive = s.struct_type {\n-            sidebar.push_str(\n-                \"<h3 class=\\\"sidebar-title\\\"><a href=\\\"#fields\\\">Fields</a></h3>\\\n-                <div class=\\\"sidebar-links\\\">\",\n-            );\n-\n-            for field in fields {\n-                sidebar.push_str(&field);\n+        match s.struct_type {\n+            CtorKind::Fictive => {\n+                print_sidebar_block(&mut sidebar, \"fields\", \"Fields\", fields.iter());\n             }\n-\n-            sidebar.push_str(\"</div>\");\n-        } else if let CtorKind::Fn = s.struct_type {\n-            sidebar\n-                .push_str(\"<h3 class=\\\"sidebar-title\\\"><a href=\\\"#fields\\\">Tuple Fields</a></h3>\");\n+            CtorKind::Fn => print_sidebar_title(&mut sidebar, \"fields\", \"Tuple Fields\"),\n+            CtorKind::Const => {}\n         }\n     }\n \n     sidebar_assoc_items(cx, &mut sidebar, it);\n \n     if !sidebar.is_empty() {\n-        write!(buf, \"<div class=\\\"block items\\\">{}</div>\", sidebar.into_inner());\n+        write!(buf, \"<section>{}</section>\", sidebar.into_inner());\n     }\n }\n \n@@ -2214,18 +2184,50 @@ fn extract_for_impl_name(item: &clean::Item, cx: &Context<'_>) -> Option<(String\n     }\n }\n \n+/// Don't call this function directly!!! Use `print_sidebar_title` or `print_sidebar_block` instead!\n+fn print_sidebar_title_inner(buf: &mut Buffer, id: &str, title: &str) {\n+    write!(\n+        buf,\n+        \"<h3 class=\\\"sidebar-title\\\">\\\n+             <a href=\\\"#{}\\\">{}</a>\\\n+         </h3>\",\n+        id, title\n+    );\n+}\n+\n+fn print_sidebar_title(buf: &mut Buffer, id: &str, title: &str) {\n+    buf.push_str(\"<div class=\\\"block\\\">\");\n+    print_sidebar_title_inner(buf, id, title);\n+    buf.push_str(\"</div>\");\n+}\n+\n+fn print_sidebar_block(\n+    buf: &mut Buffer,\n+    id: &str,\n+    title: &str,\n+    items: impl Iterator<Item = impl fmt::Display>,\n+) {\n+    buf.push_str(\"<div class=\\\"block\\\">\");\n+    print_sidebar_title_inner(buf, id, title);\n+    buf.push_str(\"<ul>\");\n+    for item in items {\n+        write!(buf, \"<li>{}</li>\", item);\n+    }\n+    buf.push_str(\"</ul></div>\");\n+}\n+\n fn sidebar_trait(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item, t: &clean::Trait) {\n-    buf.write_str(\"<div class=\\\"block items\\\">\");\n+    buf.write_str(\"<section>\");\n \n     fn print_sidebar_section(\n         out: &mut Buffer,\n         items: &[clean::Item],\n-        before: &str,\n+        id: &str,\n+        title: &str,\n         filter: impl Fn(&clean::Item) -> bool,\n-        write: impl Fn(&mut Buffer, &str),\n-        after: &str,\n+        mapper: impl Fn(&str) -> String,\n     ) {\n-        let mut items = items\n+        let mut items: Vec<&str> = items\n             .iter()\n             .filter_map(|m| match m.name {\n                 Some(ref name) if filter(m) => Some(name.as_str()),\n@@ -2235,52 +2237,44 @@ fn sidebar_trait(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item, t: &clean\n \n         if !items.is_empty() {\n             items.sort_unstable();\n-            out.push_str(before);\n-            for item in items.into_iter() {\n-                write(out, &item);\n-            }\n-            out.push_str(after);\n+            print_sidebar_block(out, id, title, items.into_iter().map(mapper));\n         }\n     }\n \n     print_sidebar_section(\n         buf,\n         &t.items,\n-        \"<h3 class=\\\"sidebar-title\\\"><a href=\\\"#associated-types\\\">\\\n-            Associated Types</a></h3><div class=\\\"sidebar-links\\\">\",\n+        \"associated-types\",\n+        \"Associated Types\",\n         |m| m.is_associated_type(),\n-        |out, sym| write!(out, \"<a href=\\\"#associatedtype.{0}\\\">{0}</a>\", sym),\n-        \"</div>\",\n+        |sym| format!(\"<a href=\\\"#associatedtype.{0}\\\">{0}</a>\", sym),\n     );\n \n     print_sidebar_section(\n         buf,\n         &t.items,\n-        \"<h3 class=\\\"sidebar-title\\\"><a href=\\\"#associated-const\\\">\\\n-            Associated Constants</a></h3><div class=\\\"sidebar-links\\\">\",\n+        \"associated-const\",\n+        \"Associated Constants\",\n         |m| m.is_associated_const(),\n-        |out, sym| write!(out, \"<a href=\\\"#associatedconstant.{0}\\\">{0}</a>\", sym),\n-        \"</div>\",\n+        |sym| format!(\"<a href=\\\"#associatedconstant.{0}\\\">{0}</a>\", sym),\n     );\n \n     print_sidebar_section(\n         buf,\n         &t.items,\n-        \"<h3 class=\\\"sidebar-title\\\"><a href=\\\"#required-methods\\\">\\\n-            Required Methods</a></h3><div class=\\\"sidebar-links\\\">\",\n+        \"required-methods\",\n+        \"Required Methods\",\n         |m| m.is_ty_method(),\n-        |out, sym| write!(out, \"<a href=\\\"#tymethod.{0}\\\">{0}</a>\", sym),\n-        \"</div>\",\n+        |sym| format!(\"<a href=\\\"#tymethod.{0}\\\">{0}</a>\", sym),\n     );\n \n     print_sidebar_section(\n         buf,\n         &t.items,\n-        \"<h3 class=\\\"sidebar-title\\\"><a href=\\\"#provided-methods\\\">\\\n-            Provided Methods</a></h3><div class=\\\"sidebar-links\\\">\",\n+        \"provided-methods\",\n+        \"Provided Methods\",\n         |m| m.is_method(),\n-        |out, sym| write!(out, \"<a href=\\\"#method.{0}\\\">{0}</a>\", sym),\n-        \"</div>\",\n+        |sym| format!(\"<a href=\\\"#method.{0}\\\">{0}</a>\", sym),\n     );\n \n     let cache = cx.cache();\n@@ -2295,37 +2289,31 @@ fn sidebar_trait(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item, t: &clean\n \n         if !res.is_empty() {\n             res.sort();\n-            buf.push_str(\n-                \"<h3 class=\\\"sidebar-title\\\"><a href=\\\"#foreign-impls\\\">\\\n-                    Implementations on Foreign Types</a></h3>\\\n-                 <div class=\\\"sidebar-links\\\">\",\n+            print_sidebar_block(\n+                buf,\n+                \"foreign-impls\",\n+                \"Implementations on Foreign Types\",\n+                res.iter().map(|(name, id)| format!(\"<a href=\\\"#{}\\\">{}</a>\", id, Escape(&name))),\n             );\n-            for (name, id) in res.into_iter() {\n-                write!(buf, \"<a href=\\\"#{}\\\">{}</a>\", id, Escape(&name));\n-            }\n-            buf.push_str(\"</div>\");\n         }\n     }\n \n     sidebar_assoc_items(cx, buf, it);\n \n-    buf.push_str(\"<h3 class=\\\"sidebar-title\\\"><a href=\\\"#implementors\\\">Implementors</a></h3>\");\n+    print_sidebar_title(buf, \"implementors\", \"Implementors\");\n     if t.is_auto {\n-        buf.push_str(\n-            \"<h3 class=\\\"sidebar-title\\\"><a \\\n-                href=\\\"#synthetic-implementors\\\">Auto Implementors</a></h3>\",\n-        );\n+        print_sidebar_title(buf, \"synthetic-implementors\", \"Auto Implementors\");\n     }\n \n-    buf.push_str(\"</div>\")\n+    buf.push_str(\"</section>\")\n }\n \n fn sidebar_primitive(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item) {\n     let mut sidebar = Buffer::new();\n     sidebar_assoc_items(cx, &mut sidebar, it);\n \n     if !sidebar.is_empty() {\n-        write!(buf, \"<div class=\\\"block items\\\">{}</div>\", sidebar.into_inner());\n+        write!(buf, \"<section>{}</section>\", sidebar.into_inner());\n     }\n }\n \n@@ -2334,7 +2322,7 @@ fn sidebar_typedef(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item) {\n     sidebar_assoc_items(cx, &mut sidebar, it);\n \n     if !sidebar.is_empty() {\n-        write!(buf, \"<div class=\\\"block items\\\">{}</div>\", sidebar.into_inner());\n+        write!(buf, \"<section>{}</section>\", sidebar.into_inner());\n     }\n }\n \n@@ -2355,22 +2343,13 @@ fn sidebar_union(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item, u: &clean\n     let fields = get_struct_fields_name(&u.fields);\n \n     if !fields.is_empty() {\n-        sidebar.push_str(\n-            \"<h3 class=\\\"sidebar-title\\\"><a href=\\\"#fields\\\">Fields</a></h3>\\\n-            <div class=\\\"sidebar-links\\\">\",\n-        );\n-\n-        for field in fields {\n-            sidebar.push_str(&field);\n-        }\n-\n-        sidebar.push_str(\"</div>\");\n+        print_sidebar_block(&mut sidebar, \"fields\", \"Fields\", fields.iter());\n     }\n \n     sidebar_assoc_items(cx, &mut sidebar, it);\n \n     if !sidebar.is_empty() {\n-        write!(buf, \"<div class=\\\"block items\\\">{}</div>\", sidebar.into_inner());\n+        write!(buf, \"<section>{}</section>\", sidebar.into_inner());\n     }\n }\n \n@@ -2388,17 +2367,13 @@ fn sidebar_enum(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item, e: &clean:\n         .collect::<Vec<_>>();\n     if !variants.is_empty() {\n         variants.sort_unstable();\n-        sidebar.push_str(&format!(\n-            \"<h3 class=\\\"sidebar-title\\\"><a href=\\\"#variants\\\">Variants</a></h3>\\\n-             <div class=\\\"sidebar-links\\\">{}</div>\",\n-            variants.join(\"\"),\n-        ));\n+        print_sidebar_block(&mut sidebar, \"variants\", \"Variants\", variants.iter());\n     }\n \n     sidebar_assoc_items(cx, &mut sidebar, it);\n \n     if !sidebar.is_empty() {\n-        write!(buf, \"<div class=\\\"block items\\\">{}</div>\", sidebar.into_inner());\n+        write!(buf, \"<section>{}</section>\", sidebar.into_inner());\n     }\n }\n \n@@ -2569,7 +2544,15 @@ fn sidebar_module(buf: &mut Buffer, items: &[clean::Item]) {\n     }\n \n     if !sidebar.is_empty() {\n-        write!(buf, \"<div class=\\\"block items\\\"><ul>{}</ul></div>\", sidebar);\n+        write!(\n+            buf,\n+            \"<section>\\\n+                 <div class=\\\"block\\\">\\\n+                     <ul>{}</ul>\\\n+                 </div>\\\n+             </section>\",\n+            sidebar\n+        );\n     }\n }\n \n@@ -2578,7 +2561,7 @@ fn sidebar_foreign_type(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item) {\n     sidebar_assoc_items(cx, &mut sidebar, it);\n \n     if !sidebar.is_empty() {\n-        write!(buf, \"<div class=\\\"block items\\\">{}</div>\", sidebar.into_inner());\n+        write!(buf, \"<section>{}</section>\", sidebar.into_inner());\n     }\n }\n "}, {"sha": "4d976bac63d8e00e667f7cfd8be703b7733358b4", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5136b549c9b8906065681844e6a30082a6f5742e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/5136b549c9b8906065681844e6a30082a6f5742e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=5136b549c9b8906065681844e6a30082a6f5742e", "patch": "@@ -484,10 +484,6 @@ h2.location a {\n \toverflow: hidden;\n }\n \n-.sidebar-links a {\n-\twhite-space: nowrap;\n-}\n-\n .sidebar h2 {\n \tborder-bottom: none;\n \tfont-weight: 500;\n@@ -504,11 +500,14 @@ h2.location a {\n \tmargin: 0;\n }\n \n-.sidebar-links,\n-.block {\n+.sidebar-elems .block {\n \tmargin-bottom: 2em;\n }\n \n+.sidebar-elems .block li a {\n+\twhite-space: nowrap;\n+}\n+\n .mobile-topbar {\n \tdisplay: none;\n }"}]}