{"sha": "1092bbfff0cf932ef14e5b92cd54133571ca4727", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwOTJiYmZmZjBjZjkzMmVmMTRlNWI5MmNkNTQxMzM1NzFjYTQ3Mjc=", "commit": {"author": {"name": "Lindsey Kuper", "email": "lkuper@mozilla.com", "date": "2011-04-07T20:49:27Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-04-07T21:26:34Z"}, "message": "Support for self-calls that take arguments.\n\nNicer parsing of self-calls (expr_self_method nodes inside expr_call\nnodes, rather than a separate expr_call_self) makes typechecking\ntractable.  We can now write self-calls that take arguments and return\nvalues (see: test/run-pass/obj-self-*.rs).", "tree": {"sha": "a771667972fb8f75d393372032d5f05c03b3b68d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a771667972fb8f75d393372032d5f05c03b3b68d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1092bbfff0cf932ef14e5b92cd54133571ca4727", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1092bbfff0cf932ef14e5b92cd54133571ca4727", "html_url": "https://github.com/rust-lang/rust/commit/1092bbfff0cf932ef14e5b92cd54133571ca4727", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1092bbfff0cf932ef14e5b92cd54133571ca4727/comments", "author": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39774e88b42409c3a432a8426cfef253f67d7709", "url": "https://api.github.com/repos/rust-lang/rust/commits/39774e88b42409c3a432a8426cfef253f67d7709", "html_url": "https://github.com/rust-lang/rust/commit/39774e88b42409c3a432a8426cfef253f67d7709"}], "stats": {"total": 161, "additions": 120, "deletions": 41}, "files": [{"sha": "4f7a2538270229d45c536b75c346281c015bbd84", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1092bbfff0cf932ef14e5b92cd54133571ca4727/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1092bbfff0cf932ef14e5b92cd54133571ca4727/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=1092bbfff0cf932ef14e5b92cd54133571ca4727", "patch": "@@ -258,7 +258,7 @@ tag expr_ {\n     expr_tup(vec[elt], ann);\n     expr_rec(vec[field], option.t[@expr], ann);\n     expr_call(@expr, vec[@expr], ann);\n-    expr_call_self(ident, vec[@expr], ann);\n+    expr_self_method(ident, ann);\n     expr_bind(@expr, vec[option.t[@expr]], ann);\n     expr_spawn(spawn_dom, option.t[str], @expr, vec[@expr], ann);\n     expr_binary(binop, @expr, @expr, ann);"}, {"sha": "5ed7dd2722e11bd7a5eff75a1ad831bb8fbec129", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1092bbfff0cf932ef14e5b92cd54133571ca4727/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1092bbfff0cf932ef14e5b92cd54133571ca4727/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=1092bbfff0cf932ef14e5b92cd54133571ca4727", "patch": "@@ -893,14 +893,14 @@ impure fn parse_bottom_expr(parser p) -> @ast.expr {\n             p.bump();\n             expect(p, token.DOT);\n             // The rest is a call expression.\n-            auto e = parse_ident(p);\n+            let @ast.expr f = parse_self_method(p);\n             auto pf = parse_expr;\n             auto es = parse_seq[@ast.expr](token.LPAREN,\n                                            token.RPAREN,\n                                            some(token.COMMA),\n                                            pf, p);\n             hi = es.span;\n-            ex = ast.expr_call_self(e, es.node, ast.ann_none);\n+            ex = ast.expr_call(f, es.node, ast.ann_none);\n         }\n \n         case (_) {\n@@ -966,6 +966,13 @@ impure fn extend_expr_by_ident(parser p, span lo, span hi,\n     ret @spanned(lo, hi, e_);\n }\n \n+impure fn parse_self_method(parser p) -> @ast.expr {\n+    auto lo = p.get_span();\n+    let ast.ident f_name = parse_ident(p);\n+    auto hi = p.get_span();\n+    ret @spanned(lo, hi, ast.expr_self_method(f_name, ast.ann_none));\n+}\n+\n impure fn parse_dot_or_call_expr(parser p) -> @ast.expr {\n     auto lo = p.get_span();\n     auto e = parse_bottom_expr(p);\n@@ -1634,7 +1641,7 @@ fn stmt_ends_with_semi(@ast.stmt stmt) -> bool {\n                 case (ast.expr_tup(_,_))        { ret true; }\n                 case (ast.expr_rec(_,_,_))      { ret true; }\n                 case (ast.expr_call(_,_,_))     { ret true; }\n-                case (ast.expr_call_self(_,_,_)){ ret true; }\n+                case (ast.expr_self_method(_,_)){ ret false; }\n                 case (ast.expr_binary(_,_,_,_)) { ret true; }\n                 case (ast.expr_unary(_,_,_))    { ret true; }\n                 case (ast.expr_lit(_,_))        { ret true; }"}, {"sha": "d87c4d08248a11149f5238b2752c7c53f0612ea6", "filename": "src/comp/middle/fold.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1092bbfff0cf932ef14e5b92cd54133571ca4727/src%2Fcomp%2Fmiddle%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1092bbfff0cf932ef14e5b92cd54133571ca4727/src%2Fcomp%2Fmiddle%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffold.rs?ref=1092bbfff0cf932ef14e5b92cd54133571ca4727", "patch": "@@ -89,8 +89,7 @@ type ast_fold[ENV] =\n          ann a) -> @expr)                         fold_expr_call,\n \n      (fn(&ENV e, &span sp,\n-         ident id, vec[@expr] args,\n-         ann a) -> @expr)                         fold_expr_call_self,\n+         ident id, ann a) -> @expr)               fold_expr_self_method,\n \n      (fn(&ENV e, &span sp,\n          @expr f, vec[option.t[@expr]] args,\n@@ -569,9 +568,8 @@ fn fold_expr[ENV](&ENV env, ast_fold[ENV] fld, &@expr e) -> @expr {\n             ret fld.fold_expr_call(env_, e.span, ff, aargs, t);\n         }\n \n-        case (ast.expr_call_self(?ident, ?args, ?t)) {\n-            auto aargs = fold_exprs(env_, fld, args);\n-            ret fld.fold_expr_call_self(env_, e.span, ident, aargs, t);\n+        case (ast.expr_self_method(?ident, ?t)) {\n+            ret fld.fold_expr_self_method(env_, e.span, ident, t);\n         }\n \n         case (ast.expr_bind(?f, ?args_opt, ?t)) {\n@@ -1187,9 +1185,9 @@ fn identity_fold_expr_call[ENV](&ENV env, &span sp, @expr f,\n     ret @respan(sp, ast.expr_call(f, args, a));\n }\n \n-fn identity_fold_expr_call_self[ENV](&ENV env, &span sp, ident id,\n-                                vec[@expr] args, ann a) -> @expr {\n-    ret @respan(sp, ast.expr_call_self(id, args, a));\n+fn identity_fold_expr_self_method[ENV](&ENV env, &span sp, ident id,\n+                                       ann a) -> @expr {\n+    ret @respan(sp, ast.expr_self_method(id, a));\n }\n \n fn identity_fold_expr_bind[ENV](&ENV env, &span sp, @expr f,\n@@ -1601,8 +1599,8 @@ fn new_identity_fold[ENV]() -> ast_fold[ENV] {\n          fold_expr_tup    = bind identity_fold_expr_tup[ENV](_,_,_,_),\n          fold_expr_rec    = bind identity_fold_expr_rec[ENV](_,_,_,_,_),\n          fold_expr_call   = bind identity_fold_expr_call[ENV](_,_,_,_,_),\n-         fold_expr_call_self\n-                          = bind identity_fold_expr_call_self[ENV](_,_,_,_,_),\n+         fold_expr_self_method\n+                          = bind identity_fold_expr_self_method[ENV](_,_,_,_),\n          fold_expr_bind   = bind identity_fold_expr_bind[ENV](_,_,_,_,_),\n          fold_expr_spawn  = bind identity_fold_expr_spawn[ENV](_,_,_,_,_,_,_),\n          fold_expr_binary = bind identity_fold_expr_binary[ENV](_,_,_,_,_,_),"}, {"sha": "5a8ce98b936ad2539227345b53755772513e75e9", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1092bbfff0cf932ef14e5b92cd54133571ca4727/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1092bbfff0cf932ef14e5b92cd54133571ca4727/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=1092bbfff0cf932ef14e5b92cd54133571ca4727", "patch": "@@ -3911,10 +3911,7 @@ fn trans_lval(@block_ctxt cx, @ast.expr e) -> lval_result {\n                                              C_int(abi.box_rc_field_body)));\n             ret lval_mem(sub.bcx, val);\n         }\n-\n-        // Kind of bizarre to pass an *entire* self-call here...but let's try\n-        // it\n-        case (ast.expr_call_self(?ident, _, ?ann)) {\n+        case (ast.expr_self_method(?ident, ?ann)) {\n             alt (cx.fcx.llself) {\n                 case (some[self_vt](?s_vt)) {\n                     auto r =  s_vt.v;\n@@ -4765,11 +4762,6 @@ fn trans_expr(@block_ctxt cx, @ast.expr e) -> result {\n             ret trans_call(cx, f, none[ValueRef], args, ann);\n         }\n \n-        case (ast.expr_call_self(?ident, ?args, ?ann)) {\n-            // A weird hack to make self-calls work.\n-            ret trans_call(cx, e, none[ValueRef], args, ann);\n-        }\n-\n         case (ast.expr_cast(?e, _, ?ann)) {\n             ret trans_cast(cx, e, ann);\n         }"}, {"sha": "3a2fc91701c64801f2d7e4695002b62026168bc4", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1092bbfff0cf932ef14e5b92cd54133571ca4727/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1092bbfff0cf932ef14e5b92cd54133571ca4727/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=1092bbfff0cf932ef14e5b92cd54133571ca4727", "patch": "@@ -764,7 +764,7 @@ fn expr_ty(@ast.expr expr) -> @t {\n         case (ast.expr_rec(_, _, ?ann))       { ret ann_to_type(ann); }\n         case (ast.expr_bind(_, _, ?ann))      { ret ann_to_type(ann); }\n         case (ast.expr_call(_, _, ?ann))      { ret ann_to_type(ann); }\n-        case (ast.expr_call_self(_, _, ?ann)) { ret ann_to_type(ann); }\n+        case (ast.expr_self_method(_, ?ann))  { ret ann_to_type(ann); }\n         case (ast.expr_spawn(_, _, _, _, ?ann))\n                                               { ret ann_to_type(ann); }\n         case (ast.expr_binary(_, _, _, ?ann)) { ret ann_to_type(ann); }"}, {"sha": "b60c23e9328ab62c036eda7c36ab15b837d7e633", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 48, "deletions": 13, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/1092bbfff0cf932ef14e5b92cd54133571ca4727/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1092bbfff0cf932ef14e5b92cd54133571ca4727/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=1092bbfff0cf932ef14e5b92cd54133571ca4727", "patch": "@@ -34,6 +34,8 @@ import std.option;\n import std.option.none;\n import std.option.some;\n \n+import pretty.pprust;\n+\n import util.typestate_ann.ts_ann;\n \n type ty_table = hashmap[ast.def_id, @ty.t];\n@@ -49,6 +51,7 @@ type crate_ctxt = rec(session.session sess,\n                       ty.type_cache type_cache,\n                       @ty_item_table item_items,\n                       vec[ast.obj_field] obj_fields,\n+                      option.t[ast.def_id] this_obj,\n                       mutable int next_var_id);\n \n type fn_ctxt = rec(@ty.t ret_ty,\n@@ -1242,10 +1245,9 @@ fn demand_expr_full(&@fn_ctxt fcx, @ty.t expected, @ast.expr e,\n                                  ann_to_type(ann), adk);\n             e_1 = ast.expr_call(sube, es, triv_ann(t));\n         }\n-        case (ast.expr_call_self(?sube, ?es, ?ann)) {\n-            auto t = demand_full(fcx, e.span, expected,\n-                                 ann_to_type(ann), adk);\n-            e_1 = ast.expr_call_self(sube, es, triv_ann(t));\n+        case (ast.expr_self_method(?id, ?ann)) {\n+            auto t = demand(fcx, e.span, expected, ann_to_type(ann));\n+            e_1 = ast.expr_self_method(id, triv_ann(t));\n         }\n         case (ast.expr_binary(?bop, ?lhs, ?rhs, ?ann)) {\n             auto t = demand(fcx, e.span, expected, ann_to_type(ann));\n@@ -1572,6 +1574,8 @@ fn check_pat(&@fn_ctxt fcx, @ast.pat pat) -> @ast.pat {\n }\n \n fn check_expr(&@fn_ctxt fcx, @ast.expr expr) -> @ast.expr {\n+    // log \"typechecking expr \" + pretty.pprust.expr_to_str(expr);\n+\n     // A generic function to factor out common logic from call and bind\n     // expressions.\n     fn check_call_or_bind(&@fn_ctxt fcx, &@ast.expr f,\n@@ -2125,16 +2129,44 @@ fn check_expr(&@fn_ctxt fcx, @ast.expr expr) -> @ast.expr {\n                                         ast.expr_call(f_1, args_1, ann));\n         }\n \n-        case (ast.expr_call_self(?ident, ?args, _)) {\n-            // FIXME: What's to check here?\n+        case (ast.expr_self_method(?id, _)) {\n+            auto t = plain_ty(ty.ty_nil);\n+            let @ty.t this_obj_ty;\n+\n+            // Grab the type of the current object\n+            auto this_obj_id = fcx.ccx.this_obj;\n+            alt (this_obj_id) {\n+                case (some[ast.def_id](?def_id)) {\n+                    auto this_obj_tpt = fcx.ccx.type_cache.find(def_id);\n+                    alt (this_obj_tpt) {\n+                        case (some[ty_params_opt_and_ty](?tpt)) {\n+                            this_obj_ty = tpt._1;\n+                        }\n+                        case (_) { fail; }\n+                    }\n+                }\n+                case (_) { fail; }\n+            }\n+\n \n-            // FIXME: These two lines are ripped off from the expr_call case;\n-            // what should they be really?\n-            auto rt_1 = plain_ty(ty.ty_nil);\n-            auto ann = triv_ann(rt_1);\n+            // Grab this method's type out of the current object type\n+\n+            // this_obj_ty is an @ty.t\n+            alt (this_obj_ty.struct) {\n+                case (ty.ty_obj(?methods)) {\n+                    for (ty.method method in methods) {\n+                        if (method.ident == id) {\n+                            t = ty.method_ty_to_fn_ty(method);\n+                        }\n+                    }\n+                }\n+                case (_) { fail; }\n+            }\n+\n+            auto ann = triv_ann(t);\n \n             ret @fold.respan[ast.expr_](expr.span,\n-                                        ast.expr_call_self(ident, args, ann));\n+                                        ast.expr_self_method(id, ann));\n         }\n \n         case (ast.expr_spawn(?dom, ?name, ?f, ?args, _)) {\n@@ -2596,8 +2628,10 @@ fn check_item_fn(&@crate_ctxt ccx, &span sp, ast.ident ident, &ast._fn f,\n \n fn update_obj_fields(&@crate_ctxt ccx, @ast.item i) -> @crate_ctxt {\n     alt (i.node) {\n-        case (ast.item_obj(_, ?ob, _, _, _)) {\n-            ret @rec(obj_fields = ob.fields with *ccx);\n+        case (ast.item_obj(_, ?ob, _, ?obj_def_ids, _)) {\n+            let ast.def_id di = obj_def_ids.ty;\n+            ret @rec(obj_fields = ob.fields, \n+                     this_obj = some[ast.def_id](di) with *ccx);\n         }\n         case (_) {\n         }\n@@ -2617,6 +2651,7 @@ fn check_crate(session.session sess, @ast.crate crate) -> typecheck_result {\n                     type_cache=result._1,\n                     item_items=result._2,\n                     obj_fields=fields,\n+                    this_obj=none[ast.def_id],\n                     mutable next_var_id=0);\n \n     auto fld = fold.new_identity_fold[@crate_ctxt]();"}, {"sha": "d560fe5b22c3fe9cd766da5d99b7b348d07359d9", "filename": "src/comp/pretty/pprust.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1092bbfff0cf932ef14e5b92cd54133571ca4727/src%2Fcomp%2Fpretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1092bbfff0cf932ef14e5b92cd54133571ca4727/src%2Fcomp%2Fpretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fpretty%2Fpprust.rs?ref=1092bbfff0cf932ef14e5b92cd54133571ca4727", "patch": "@@ -454,12 +454,9 @@ impure fn print_expr(ps s, &@ast.expr expr) {\n             commasep_exprs(s, args);\n             pclose(s);\n         }\n-        case (ast.expr_call_self(?ident,?args,_)) {\n+        case (ast.expr_self_method(?ident,_)) {\n             wrd(s.s, \"self.\");\n             print_ident(s, ident);\n-            popen(s);\n-            commasep_exprs(s, args);\n-            pclose(s);\n         }\n         case (ast.expr_bind(?func,?args,_)) {\n             impure fn print_opt(ps s, &option.t[@ast.expr] expr) {"}, {"sha": "68e9ec55c674b8fb21f8facdcce87f08494e8665", "filename": "src/test/run-pass/obj-self-2.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1092bbfff0cf932ef14e5b92cd54133571ca4727/src%2Ftest%2Frun-pass%2Fobj-self-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1092bbfff0cf932ef14e5b92cd54133571ca4727/src%2Ftest%2Frun-pass%2Fobj-self-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobj-self-2.rs?ref=1092bbfff0cf932ef14e5b92cd54133571ca4727", "patch": "@@ -0,0 +1,19 @@\n+// xfail-boot\n+fn main() {\n+\n+  obj foo() {\n+      impure fn m1(mutable int i) {\n+          i += 1;\n+          log \"hi!\";\n+      }\n+      impure fn m2(mutable int i) {\n+          i += 1;\n+          self.m1(i);\n+      }\n+  }\n+  \n+  auto a = foo();\n+  let int i = 0;\n+  a.m1(i);\n+  a.m2(i);\n+}"}, {"sha": "183bb3c708ed9e39a6f9a23215283798ca63956f", "filename": "src/test/run-pass/obj-self-3.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/1092bbfff0cf932ef14e5b92cd54133571ca4727/src%2Ftest%2Frun-pass%2Fobj-self-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1092bbfff0cf932ef14e5b92cd54133571ca4727/src%2Ftest%2Frun-pass%2Fobj-self-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobj-self-3.rs?ref=1092bbfff0cf932ef14e5b92cd54133571ca4727", "patch": "@@ -0,0 +1,31 @@\n+// xfail-boot\n+fn main() {\n+\n+  obj foo() {\n+      impure fn m1(mutable int i) -> int {\n+          i += 1;\n+          ret i;\n+      }\n+      impure fn m2(mutable int i) -> int {\n+          ret self.m1(i);\n+      }\n+      impure fn m3(mutable int i) -> int {\n+          i += 1;\n+          ret self.m1(i);\n+      }\n+  }\n+  \n+  auto a = foo();\n+  let int i = 0;\n+\n+  // output should be: 0, 1, 2, 4\n+  log i;\n+  i = a.m1(i);\n+  log i;\n+  i = a.m2(i);\n+  log i;\n+  i = a.m3(i);\n+  log i;\n+}\n+\n+"}]}