{"sha": "039e9b6b9431f9af90f4fa13de8c155ce59be4d6", "node_id": "C_kwDOAAsO6NoAKDAzOWU5YjZiOTQzMWY5YWY5MGY0ZmExM2RlOGMxNTVjZTU5YmU0ZDY", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-10-23T21:48:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-23T21:48:17Z"}, "message": "Rollup merge of #103414 - compiler-errors:rpit-print-lt, r=cjgillot\n\nPretty print lifetimes captured by RPIT\n\nThis specifically makes the output in #103409 change from:\n\n```diff\n  error: `impl` item signature doesn't match `trait` item signature\n    --> $DIR/signature-mismatch.rs:15:5\n     |\n  LL |     fn async_fn(&self, buff: &[u8]) -> impl Future<Output = Vec<u8>>;\n     |     ----------------------------------------------------------------- expected `fn(&'1 Struct, &'2 [u8]) -> impl Future<Output = Vec<u8>>`\n  ...\n  LL |     fn async_fn<'a>(&self, buff: &'a [u8]) -> impl Future<Output = Vec<u8>> + 'a {\n-  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found `fn(&'1 Struct, &'2 [u8]) -> impl Future<Output = Vec<u8>>`\n+  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found `fn(&'1 Struct, &'2 [u8]) -> impl Future<Output = Vec<u8>> + '2`\n     |\n     = note: expected `fn(&'1 Struct, &'2 [u8]) -> impl Future<Output = Vec<u8>>`\n-               found `fn(&'1 Struct, &'2 [u8]) -> impl Future<Output = Vec<u8>>`\n+               found `fn(&'1 Struct, &'2 [u8]) -> impl Future<Output = Vec<u8>> + '2`\n     = help: the lifetime requirements from the `impl` do not correspond to the requirements in the `trait`\n     = help: verify the lifetime relationships in the `trait` and `impl` between the `self` argument, the other inputs and its output\n\n  error: aborting due to previous error\n```\n\nAlong with the UI tests in this PR, which I think are all improvements!\n\nr? `@oli-obk` though feel free to re-roll", "tree": {"sha": "2feec6d67e5028dbe055199e325bd11649c66639", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2feec6d67e5028dbe055199e325bd11649c66639"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/039e9b6b9431f9af90f4fa13de8c155ce59be4d6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjVbahCRBK7hj4Ov3rIwAArbcIAGo36yjN1Orxuj4eOQ1cdj1w\n0Ljb4zPWJO4q24K88M1n3BqWIE5lYhvYmFczy9pXvWOPJDdpQxX2ukZVxpTWAuoa\nNqzNqHNAdGZEr8LK6aEIGgeHtFyWOUu0p4IzFoEhjrGMsva7Bj18efnIWhEQI08M\nQ8XbnVksO1BvisC7gEgZGS9X2GdgyI6tR6rBbprOohGmlId5qnugtRIelz9sljy1\n2Vu3L6mosjwsppxldugLzzTGA2HAEL67nHMxeff7wut1D+sIHv0T6IL4LMwqoVze\nuzeEm1PEpojnghGuQmtZnhy7+WJEBorS//c3lnC1DXYf8ijWSc5h0h/2UquqoEo=\n=KIOZ\n-----END PGP SIGNATURE-----\n", "payload": "tree 2feec6d67e5028dbe055199e325bd11649c66639\nparent 9f06fbd1adde356f05c93cf0ea7a0bdebc0256bf\nparent c5df62041950b2279191804841a51077826df9a0\nauthor Michael Howell <michael@notriddle.com> 1666561697 -0700\ncommitter GitHub <noreply@github.com> 1666561697 -0700\n\nRollup merge of #103414 - compiler-errors:rpit-print-lt, r=cjgillot\n\nPretty print lifetimes captured by RPIT\n\nThis specifically makes the output in #103409 change from:\n\n```diff\n  error: `impl` item signature doesn't match `trait` item signature\n    --> $DIR/signature-mismatch.rs:15:5\n     |\n  LL |     fn async_fn(&self, buff: &[u8]) -> impl Future<Output = Vec<u8>>;\n     |     ----------------------------------------------------------------- expected `fn(&'1 Struct, &'2 [u8]) -> impl Future<Output = Vec<u8>>`\n  ...\n  LL |     fn async_fn<'a>(&self, buff: &'a [u8]) -> impl Future<Output = Vec<u8>> + 'a {\n-  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found `fn(&'1 Struct, &'2 [u8]) -> impl Future<Output = Vec<u8>>`\n+  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found `fn(&'1 Struct, &'2 [u8]) -> impl Future<Output = Vec<u8>> + '2`\n     |\n     = note: expected `fn(&'1 Struct, &'2 [u8]) -> impl Future<Output = Vec<u8>>`\n-               found `fn(&'1 Struct, &'2 [u8]) -> impl Future<Output = Vec<u8>>`\n+               found `fn(&'1 Struct, &'2 [u8]) -> impl Future<Output = Vec<u8>> + '2`\n     = help: the lifetime requirements from the `impl` do not correspond to the requirements in the `trait`\n     = help: verify the lifetime relationships in the `trait` and `impl` between the `self` argument, the other inputs and its output\n\n  error: aborting due to previous error\n```\n\nAlong with the UI tests in this PR, which I think are all improvements!\n\nr? `@oli-obk` though feel free to re-roll\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/039e9b6b9431f9af90f4fa13de8c155ce59be4d6", "html_url": "https://github.com/rust-lang/rust/commit/039e9b6b9431f9af90f4fa13de8c155ce59be4d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/039e9b6b9431f9af90f4fa13de8c155ce59be4d6/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f06fbd1adde356f05c93cf0ea7a0bdebc0256bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f06fbd1adde356f05c93cf0ea7a0bdebc0256bf", "html_url": "https://github.com/rust-lang/rust/commit/9f06fbd1adde356f05c93cf0ea7a0bdebc0256bf"}, {"sha": "c5df62041950b2279191804841a51077826df9a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5df62041950b2279191804841a51077826df9a0", "html_url": "https://github.com/rust-lang/rust/commit/c5df62041950b2279191804841a51077826df9a0"}], "stats": {"total": 52, "additions": 31, "deletions": 21}, "files": [{"sha": "b8ee2b994b1e472ab6d330215587c869c0780fa7", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/039e9b6b9431f9af90f4fa13de8c155ce59be4d6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/039e9b6b9431f9af90f4fa13de8c155ce59be4d6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=039e9b6b9431f9af90f4fa13de8c155ce59be4d6", "patch": "@@ -16,6 +16,7 @@ use rustc_session::cstore::{ExternCrate, ExternCrateSource};\n use rustc_span::symbol::{kw, Ident, Symbol};\n use rustc_target::abi::Size;\n use rustc_target::spec::abi::Abi;\n+use smallvec::SmallVec;\n \n use std::cell::Cell;\n use std::char;\n@@ -794,6 +795,7 @@ pub trait PrettyPrinter<'tcx>:\n         let mut traits = FxIndexMap::default();\n         let mut fn_traits = FxIndexMap::default();\n         let mut is_sized = false;\n+        let mut lifetimes = SmallVec::<[ty::Region<'tcx>; 1]>::new();\n \n         for (predicate, _) in bounds.subst_iter_copied(tcx, substs) {\n             let bound_predicate = predicate.kind();\n@@ -824,6 +826,9 @@ pub trait PrettyPrinter<'tcx>:\n                         &mut fn_traits,\n                     );\n                 }\n+                ty::PredicateKind::TypeOutlives(outlives) => {\n+                    lifetimes.push(outlives.1);\n+                }\n                 _ => {}\n             }\n         }\n@@ -977,6 +982,11 @@ pub trait PrettyPrinter<'tcx>:\n             write!(self, \"Sized\")?;\n         }\n \n+        for re in lifetimes {\n+            write!(self, \" + \")?;\n+            self = self.print_region(re)?;\n+        }\n+\n         Ok(self)\n     }\n "}, {"sha": "8eb8c44bb420e03df9eb378d469d3030f81bf196", "filename": "src/test/ui/associated-type-bounds/inside-adt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/039e9b6b9431f9af90f4fa13de8c155ce59be4d6/src%2Ftest%2Fui%2Fassociated-type-bounds%2Finside-adt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/039e9b6b9431f9af90f4fa13de8c155ce59be4d6/src%2Ftest%2Fui%2Fassociated-type-bounds%2Finside-adt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Finside-adt.rs?ref=039e9b6b9431f9af90f4fa13de8c155ce59be4d6", "patch": "@@ -16,7 +16,7 @@ enum E2 { V(Box<dyn Iterator<Item: Copy>>) }\n //~^ ERROR associated type bounds are not allowed within structs, enums, or unions\n enum E3 { V(dyn Iterator<Item: 'static>) }\n //~^ ERROR associated type bounds are not allowed within structs, enums, or unions\n-//~| ERROR the size for values of type `(dyn Iterator<Item = impl Sized> + 'static)`\n+//~| ERROR the size for values of type `(dyn Iterator<Item = impl Sized + 'static> + 'static)`\n \n union U1 { f: ManuallyDrop<dyn Iterator<Item: Copy>> }\n //~^ ERROR associated type bounds are not allowed within structs, enums, or unions\n@@ -25,6 +25,6 @@ union U2 { f: ManuallyDrop<Box<dyn Iterator<Item: Copy>>> }\n //~^ ERROR associated type bounds are not allowed within structs, enums, or unions\n union U3 { f: ManuallyDrop<dyn Iterator<Item: 'static>> }\n //~^ ERROR associated type bounds are not allowed within structs, enums, or unions\n-//~| ERROR the size for values of type `(dyn Iterator<Item = impl Sized> + 'static)`\n+//~| ERROR the size for values of type `(dyn Iterator<Item = impl Sized + 'static> + 'static)`\n \n fn main() {}"}, {"sha": "dbfcfa5806309c0be12cf5cf55b2c5e23b1f953a", "filename": "src/test/ui/associated-type-bounds/inside-adt.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/039e9b6b9431f9af90f4fa13de8c155ce59be4d6/src%2Ftest%2Fui%2Fassociated-type-bounds%2Finside-adt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/039e9b6b9431f9af90f4fa13de8c155ce59be4d6/src%2Ftest%2Fui%2Fassociated-type-bounds%2Finside-adt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Finside-adt.stderr?ref=039e9b6b9431f9af90f4fa13de8c155ce59be4d6", "patch": "@@ -70,13 +70,13 @@ help: the `Box` type always has a statically known size and allocates its conten\n LL | enum E1 { V(Box<dyn Iterator<Item: Copy>>) }\n    |             ++++                        +\n \n-error[E0277]: the size for values of type `(dyn Iterator<Item = impl Sized> + 'static)` cannot be known at compilation time\n+error[E0277]: the size for values of type `(dyn Iterator<Item = impl Sized + 'static> + 'static)` cannot be known at compilation time\n   --> $DIR/inside-adt.rs:17:13\n    |\n LL | enum E3 { V(dyn Iterator<Item: 'static>) }\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `Sized` is not implemented for `(dyn Iterator<Item = impl Sized> + 'static)`\n+   = help: the trait `Sized` is not implemented for `(dyn Iterator<Item = impl Sized + 'static> + 'static)`\n    = note: no field of an enum variant may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n help: borrowed types always have a statically known size\n@@ -107,14 +107,14 @@ help: the `Box` type always has a statically known size and allocates its conten\n LL | union U1 { f: Box<ManuallyDrop<dyn Iterator<Item: Copy>>> }\n    |               ++++                                      +\n \n-error[E0277]: the size for values of type `(dyn Iterator<Item = impl Sized> + 'static)` cannot be known at compilation time\n+error[E0277]: the size for values of type `(dyn Iterator<Item = impl Sized + 'static> + 'static)` cannot be known at compilation time\n   --> $DIR/inside-adt.rs:26:15\n    |\n LL | union U3 { f: ManuallyDrop<dyn Iterator<Item: 'static>> }\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n-   = help: within `ManuallyDrop<(dyn Iterator<Item = impl Sized> + 'static)>`, the trait `Sized` is not implemented for `(dyn Iterator<Item = impl Sized> + 'static)`\n-   = note: required because it appears within the type `ManuallyDrop<(dyn Iterator<Item = impl Sized> + 'static)>`\n+   = help: within `ManuallyDrop<(dyn Iterator<Item = impl Sized + 'static> + 'static)>`, the trait `Sized` is not implemented for `(dyn Iterator<Item = impl Sized + 'static> + 'static)`\n+   = note: required because it appears within the type `ManuallyDrop<(dyn Iterator<Item = impl Sized + 'static> + 'static)>`\n    = note: no field of a union may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n help: borrowed types always have a statically known size"}, {"sha": "e8548d402fae5b1a7b4a8ffa57609d6853005922", "filename": "src/test/ui/associated-types/issue-87261.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/039e9b6b9431f9af90f4fa13de8c155ce59be4d6/src%2Ftest%2Fui%2Fassociated-types%2Fissue-87261.rs", "raw_url": "https://github.com/rust-lang/rust/raw/039e9b6b9431f9af90f4fa13de8c155ce59be4d6/src%2Ftest%2Fui%2Fassociated-types%2Fissue-87261.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-87261.rs?ref=039e9b6b9431f9af90f4fa13de8c155ce59be4d6", "patch": "@@ -77,10 +77,10 @@ where\n \n fn main() {\n     accepts_trait(returns_opaque());\n-    //~^ ERROR type mismatch resolving `<impl Trait as Trait>::Associated == ()`\n+    //~^ ERROR type mismatch resolving `<impl Trait + 'static as Trait>::Associated == ()`\n \n     accepts_trait(returns_opaque_derived());\n-    //~^ ERROR type mismatch resolving `<impl DerivedTrait as Trait>::Associated == ()`\n+    //~^ ERROR type mismatch resolving `<impl DerivedTrait + 'static as Trait>::Associated == ()`\n \n     accepts_trait(returns_opaque_foo());\n     //~^ ERROR type mismatch resolving `<impl Trait + Foo as Trait>::Associated == ()`\n@@ -89,7 +89,7 @@ fn main() {\n     //~^ ERROR type mismatch resolving `<impl DerivedTrait + Foo as Trait>::Associated == ()`\n \n     accepts_generic_trait(returns_opaque_generic());\n-    //~^ ERROR type mismatch resolving `<impl GenericTrait<()> as GenericTrait<()>>::Associated == ()`\n+    //~^ ERROR type mismatch resolving `<impl GenericTrait<()> + 'static as GenericTrait<()>>::Associated == ()`\n \n     accepts_generic_trait(returns_opaque_generic_foo());\n     //~^ ERROR type mismatch resolving `<impl GenericTrait<()> + Foo as GenericTrait<()>>::Associated == ()`"}, {"sha": "2cce6b947025e5b41c1361a5d555c33661dc46f8", "filename": "src/test/ui/associated-types/issue-87261.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/039e9b6b9431f9af90f4fa13de8c155ce59be4d6/src%2Ftest%2Fui%2Fassociated-types%2Fissue-87261.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/039e9b6b9431f9af90f4fa13de8c155ce59be4d6/src%2Ftest%2Fui%2Fassociated-types%2Fissue-87261.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-87261.stderr?ref=039e9b6b9431f9af90f4fa13de8c155ce59be4d6", "patch": "@@ -132,7 +132,7 @@ note: required by a bound in `accepts_generic_trait`\n LL | fn accepts_generic_trait<T: GenericTrait<(), Associated = ()>>(_: T) {}\n    |                                              ^^^^^^^^^^^^^^^ required by this bound in `accepts_generic_trait`\n \n-error[E0271]: type mismatch resolving `<impl Trait as Trait>::Associated == ()`\n+error[E0271]: type mismatch resolving `<impl Trait + 'static as Trait>::Associated == ()`\n   --> $DIR/issue-87261.rs:79:19\n    |\n LL | fn returns_opaque() -> impl Trait + 'static {\n@@ -144,18 +144,18 @@ LL |     accepts_trait(returns_opaque());\n    |     required by a bound introduced by this call\n    |\n    = note:    expected unit type `()`\n-           found associated type `<impl Trait as Trait>::Associated`\n+           found associated type `<impl Trait + 'static as Trait>::Associated`\n note: required by a bound in `accepts_trait`\n   --> $DIR/issue-87261.rs:43:27\n    |\n LL | fn accepts_trait<T: Trait<Associated = ()>>(_: T) {}\n    |                           ^^^^^^^^^^^^^^^ required by this bound in `accepts_trait`\n-help: consider constraining the associated type `<impl Trait as Trait>::Associated` to `()`\n+help: consider constraining the associated type `<impl Trait + 'static as Trait>::Associated` to `()`\n    |\n LL | fn returns_opaque() -> impl Trait<Associated = ()> + 'static {\n    |                                  +++++++++++++++++\n \n-error[E0271]: type mismatch resolving `<impl DerivedTrait as Trait>::Associated == ()`\n+error[E0271]: type mismatch resolving `<impl DerivedTrait + 'static as Trait>::Associated == ()`\n   --> $DIR/issue-87261.rs:82:19\n    |\n LL | fn returns_opaque_derived() -> impl DerivedTrait + 'static {\n@@ -167,13 +167,13 @@ LL |     accepts_trait(returns_opaque_derived());\n    |     required by a bound introduced by this call\n    |\n    = note:    expected unit type `()`\n-           found associated type `<impl DerivedTrait as Trait>::Associated`\n+           found associated type `<impl DerivedTrait + 'static as Trait>::Associated`\n note: required by a bound in `accepts_trait`\n   --> $DIR/issue-87261.rs:43:27\n    |\n LL | fn accepts_trait<T: Trait<Associated = ()>>(_: T) {}\n    |                           ^^^^^^^^^^^^^^^ required by this bound in `accepts_trait`\n-help: consider constraining the associated type `<impl DerivedTrait as Trait>::Associated` to `()`\n+help: consider constraining the associated type `<impl DerivedTrait + 'static as Trait>::Associated` to `()`\n    |\n LL | fn returns_opaque_derived() -> impl DerivedTrait<Associated = ()> + 'static {\n    |                                                 +++++++++++++++++\n@@ -222,7 +222,7 @@ note: required by a bound in `accepts_trait`\n LL | fn accepts_trait<T: Trait<Associated = ()>>(_: T) {}\n    |                           ^^^^^^^^^^^^^^^ required by this bound in `accepts_trait`\n \n-error[E0271]: type mismatch resolving `<impl GenericTrait<()> as GenericTrait<()>>::Associated == ()`\n+error[E0271]: type mismatch resolving `<impl GenericTrait<()> + 'static as GenericTrait<()>>::Associated == ()`\n   --> $DIR/issue-87261.rs:91:27\n    |\n LL | fn returns_opaque_generic() -> impl GenericTrait<()> + 'static {\n@@ -234,13 +234,13 @@ LL |     accepts_generic_trait(returns_opaque_generic());\n    |     required by a bound introduced by this call\n    |\n    = note:    expected unit type `()`\n-           found associated type `<impl GenericTrait<()> as GenericTrait<()>>::Associated`\n+           found associated type `<impl GenericTrait<()> + 'static as GenericTrait<()>>::Associated`\n note: required by a bound in `accepts_generic_trait`\n   --> $DIR/issue-87261.rs:44:46\n    |\n LL | fn accepts_generic_trait<T: GenericTrait<(), Associated = ()>>(_: T) {}\n    |                                              ^^^^^^^^^^^^^^^ required by this bound in `accepts_generic_trait`\n-help: consider constraining the associated type `<impl GenericTrait<()> as GenericTrait<()>>::Associated` to `()`\n+help: consider constraining the associated type `<impl GenericTrait<()> + 'static as GenericTrait<()>>::Associated` to `()`\n    |\n LL | fn returns_opaque_generic() -> impl GenericTrait<(), Associated = ()> + 'static {\n    |                                                    +++++++++++++++++"}, {"sha": "de06ded7acdb6f7666bd4e81ef40a89f22612d0c", "filename": "src/test/ui/impl-trait/hidden-lifetimes.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/039e9b6b9431f9af90f4fa13de8c155ce59be4d6/src%2Ftest%2Fui%2Fimpl-trait%2Fhidden-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/039e9b6b9431f9af90f4fa13de8c155ce59be4d6/src%2Ftest%2Fui%2Fimpl-trait%2Fhidden-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fhidden-lifetimes.stderr?ref=039e9b6b9431f9af90f4fa13de8c155ce59be4d6", "patch": "@@ -1,4 +1,4 @@\n-error[E0700]: hidden type for `impl Swap` captures lifetime that does not appear in bounds\n+error[E0700]: hidden type for `impl Swap + 'a` captures lifetime that does not appear in bounds\n   --> $DIR/hidden-lifetimes.rs:29:5\n    |\n LL | fn hide_ref<'a, 'b, T: 'static>(x: &'a mut &'b T) -> impl Swap + 'a {\n@@ -11,7 +11,7 @@ help: to declare that the `impl Trait` captures `'b`, you can add an explicit `'\n LL | fn hide_ref<'a, 'b, T: 'static>(x: &'a mut &'b T) -> impl Swap + 'a + 'b {\n    |                                                                     ++++\n \n-error[E0700]: hidden type for `impl Swap` captures lifetime that does not appear in bounds\n+error[E0700]: hidden type for `impl Swap + 'a` captures lifetime that does not appear in bounds\n   --> $DIR/hidden-lifetimes.rs:46:5\n    |\n LL | fn hide_rc_refcell<'a, 'b: 'a, T: 'static>(x: Rc<RefCell<&'b T>>) -> impl Swap + 'a {"}]}