{"sha": "a67b6299b4b738e2f0482eba0549e64f8b5081a7", "node_id": "C_kwDOAAsO6NoAKGE2N2I2Mjk5YjRiNzM4ZTJmMDQ4MmViYTA1NDllNjRmOGI1MDgxYTc", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-03-08T21:44:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-08T21:44:00Z"}, "message": "Rollup merge of #94724 - cuviper:rmdirall-cstr, r=Dylan-DPC\n\nunix: Avoid name conversions in `remove_dir_all_recursive`\n\nEach recursive call was creating an `OsString` for a `&Path`, only for\nit to be turned into a `CString` right away. Instead we can directly\npass `.name_cstr()`, saving two allocations each time.", "tree": {"sha": "f914797a874d9b075421dc824f2c6186b15fbff2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f914797a874d9b075421dc824f2c6186b15fbff2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a67b6299b4b738e2f0482eba0549e64f8b5081a7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiJ84gCRBK7hj4Ov3rIwAAS5AIABprzRd4GcQOy6HFhnFyLYcf\nBTaFlpSPMPqNYBK61dE0zQEQVIIoHuRJ3Avyqf5uJsn830MFuMJHXj12lcwhNLcg\nSrYbEHdtCABxYR8h5/qiu1U9YaHEWJzLhDH6sho2L9fh5sDjKsuf8bUXo9U2caKR\n5/9C1dHOq/WUoIoEwSR1Fhjn22f0pNJ8NvSqCZCwuyrp7bJF8Q5u0r6cyPX91dIB\nDNH25Xq8WIboIlErA60Lqy71kyKivt0fKWHs6lTAxt5xOmvz9pyH0iK43r7YV6z3\nmTahdsDAYouKhyCpVNIfbp0yC/7tvwRjlUheI199tc/VdmImA/+Y2deQbP4wD0I=\n=+mxL\n-----END PGP SIGNATURE-----\n", "payload": "tree f914797a874d9b075421dc824f2c6186b15fbff2\nparent ff54e34463c1af0025e29d41ebfbc1dfb4083e15\nparent ef3e33bd16b1392f8f238c1224cd58d5fb95b555\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1646775840 +0100\ncommitter GitHub <noreply@github.com> 1646775840 +0100\n\nRollup merge of #94724 - cuviper:rmdirall-cstr, r=Dylan-DPC\n\nunix: Avoid name conversions in `remove_dir_all_recursive`\n\nEach recursive call was creating an `OsString` for a `&Path`, only for\nit to be turned into a `CString` right away. Instead we can directly\npass `.name_cstr()`, saving two allocations each time.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a67b6299b4b738e2f0482eba0549e64f8b5081a7", "html_url": "https://github.com/rust-lang/rust/commit/a67b6299b4b738e2f0482eba0549e64f8b5081a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a67b6299b4b738e2f0482eba0549e64f8b5081a7/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff54e34463c1af0025e29d41ebfbc1dfb4083e15", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff54e34463c1af0025e29d41ebfbc1dfb4083e15", "html_url": "https://github.com/rust-lang/rust/commit/ff54e34463c1af0025e29d41ebfbc1dfb4083e15"}, {"sha": "ef3e33bd16b1392f8f238c1224cd58d5fb95b555", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef3e33bd16b1392f8f238c1224cd58d5fb95b555", "html_url": "https://github.com/rust-lang/rust/commit/ef3e33bd16b1392f8f238c1224cd58d5fb95b555"}], "stats": {"total": 19, "additions": 9, "deletions": 10}, "files": [{"sha": "4a48be5cda69598725feecf7dbb769717cdc62a3", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a67b6299b4b738e2f0482eba0549e64f8b5081a7/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a67b6299b4b738e2f0482eba0549e64f8b5081a7/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=a67b6299b4b738e2f0482eba0549e64f8b5081a7", "patch": "@@ -1604,17 +1604,15 @@ mod remove_dir_impl {\n         }\n     }\n \n-    fn remove_dir_all_recursive(parent_fd: Option<RawFd>, p: &Path) -> io::Result<()> {\n-        let pcstr = cstr(p)?;\n-\n+    fn remove_dir_all_recursive(parent_fd: Option<RawFd>, path: &CStr) -> io::Result<()> {\n         // try opening as directory\n-        let fd = match openat_nofollow_dironly(parent_fd, &pcstr) {\n+        let fd = match openat_nofollow_dironly(parent_fd, &path) {\n             Err(err) if err.raw_os_error() == Some(libc::ENOTDIR) => {\n                 // not a directory - don't traverse further\n                 return match parent_fd {\n                     // unlink...\n                     Some(parent_fd) => {\n-                        cvt(unsafe { unlinkat(parent_fd, pcstr.as_ptr(), 0) }).map(drop)\n+                        cvt(unsafe { unlinkat(parent_fd, path.as_ptr(), 0) }).map(drop)\n                     }\n                     // ...unless this was supposed to be the deletion root directory\n                     None => Err(err),\n@@ -1627,26 +1625,27 @@ mod remove_dir_impl {\n         let (dir, fd) = fdreaddir(fd)?;\n         for child in dir {\n             let child = child?;\n+            let child_name = child.name_cstr();\n             match is_dir(&child) {\n                 Some(true) => {\n-                    remove_dir_all_recursive(Some(fd), Path::new(&child.file_name()))?;\n+                    remove_dir_all_recursive(Some(fd), child_name)?;\n                 }\n                 Some(false) => {\n-                    cvt(unsafe { unlinkat(fd, child.name_cstr().as_ptr(), 0) })?;\n+                    cvt(unsafe { unlinkat(fd, child_name.as_ptr(), 0) })?;\n                 }\n                 None => {\n                     // POSIX specifies that calling unlink()/unlinkat(..., 0) on a directory can succeed\n                     // if the process has the appropriate privileges. This however can causing orphaned\n                     // directories requiring an fsck e.g. on Solaris and Illumos. So we try recursing\n                     // into it first instead of trying to unlink() it.\n-                    remove_dir_all_recursive(Some(fd), Path::new(&child.file_name()))?;\n+                    remove_dir_all_recursive(Some(fd), child_name)?;\n                 }\n             }\n         }\n \n         // unlink the directory after removing its contents\n         cvt(unsafe {\n-            unlinkat(parent_fd.unwrap_or(libc::AT_FDCWD), pcstr.as_ptr(), libc::AT_REMOVEDIR)\n+            unlinkat(parent_fd.unwrap_or(libc::AT_FDCWD), path.as_ptr(), libc::AT_REMOVEDIR)\n         })?;\n         Ok(())\n     }\n@@ -1659,7 +1658,7 @@ mod remove_dir_impl {\n         if attr.file_type().is_symlink() {\n             crate::fs::remove_file(p)\n         } else {\n-            remove_dir_all_recursive(None, p)\n+            remove_dir_all_recursive(None, &cstr(p)?)\n         }\n     }\n "}]}