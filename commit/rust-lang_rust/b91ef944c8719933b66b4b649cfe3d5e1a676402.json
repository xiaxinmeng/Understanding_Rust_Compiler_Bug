{"sha": "b91ef944c8719933b66b4b649cfe3d5e1a676402", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5MWVmOTQ0Yzg3MTk5MzNiNjZiNGI2NDljZmUzZDVlMWE2NzY0MDI=", "commit": {"author": {"name": "Kelly Wilson", "email": "wilsonk@cpsc.ucalgary.ca", "date": "2011-05-16T18:14:24Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-05-16T21:07:43Z"}, "message": "Replace --bitcode with the canonical --emit-llvm", "tree": {"sha": "ca2121dc9988a461170f01ddf7f0b579c950093e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca2121dc9988a461170f01ddf7f0b579c950093e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b91ef944c8719933b66b4b649cfe3d5e1a676402", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b91ef944c8719933b66b4b649cfe3d5e1a676402", "html_url": "https://github.com/rust-lang/rust/commit/b91ef944c8719933b66b4b649cfe3d5e1a676402", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b91ef944c8719933b66b4b649cfe3d5e1a676402/comments", "author": {"login": "wilsonk", "id": 38802, "node_id": "MDQ6VXNlcjM4ODAy", "avatar_url": "https://avatars.githubusercontent.com/u/38802?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wilsonk", "html_url": "https://github.com/wilsonk", "followers_url": "https://api.github.com/users/wilsonk/followers", "following_url": "https://api.github.com/users/wilsonk/following{/other_user}", "gists_url": "https://api.github.com/users/wilsonk/gists{/gist_id}", "starred_url": "https://api.github.com/users/wilsonk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wilsonk/subscriptions", "organizations_url": "https://api.github.com/users/wilsonk/orgs", "repos_url": "https://api.github.com/users/wilsonk/repos", "events_url": "https://api.github.com/users/wilsonk/events{/privacy}", "received_events_url": "https://api.github.com/users/wilsonk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "196351aa44e920e032d54545ccb74443858f3055", "url": "https://api.github.com/repos/rust-lang/rust/commits/196351aa44e920e032d54545ccb74443858f3055", "html_url": "https://github.com/rust-lang/rust/commit/196351aa44e920e032d54545ccb74443858f3055"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "97bfb87e2e35b52c9af1f6778fa678a3b2fa90c2", "filename": "src/comp/back/link.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b91ef944c8719933b66b4b649cfe3d5e1a676402/src%2Fcomp%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91ef944c8719933b66b4b649cfe3d5e1a676402/src%2Fcomp%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Flink.rs?ref=b91ef944c8719933b66b4b649cfe3d5e1a676402", "patch": "@@ -171,8 +171,8 @@ mod write {\n                                _str::buf(output), LLVMAssemblyFile);\n                 }\n \n-                // Save the object file for -c or only --save-temps\n-                // is used and an exe is built\n+                // Save the object file for -c or --save-temps alone\n+                // This .o is needed when an exe is built\n                 if ((opts.output_type == output_type_object) ||\n                     (opts.output_type == output_type_exe)) {\n                         llvm::LLVMRustWriteOutputFile(pm.llpm, llmod,\n@@ -197,7 +197,7 @@ mod write {\n             ret;\n         }\n \n-        // If only a bitcode file is asked for by using the '--bitcode'\n+        // If only a bitcode file is asked for by using the '--emit-llvm'\n         // flag, then output it here\n         llvm::LLVMRunPassManager(pm.llpm, llmod);\n "}, {"sha": "d538e1711a634b691361d8df7657796cccc105fc", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b91ef944c8719933b66b4b649cfe3d5e1a676402/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91ef944c8719933b66b4b649cfe3d5e1a676402/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=b91ef944c8719933b66b4b649cfe3d5e1a676402", "patch": "@@ -155,7 +155,7 @@ options:\n     -O                 optimize\n     -S                 compile only; do not assemble or link\n     -c                 compile and assemble, but do not link\n-    --bitcode          produce an LLVM bitcode file\n+    --emit-llvm        produce an LLVM bitcode file\n     --save-temps       write intermediate files in addition to normal output\n     --stats            gather and report various compilation statistics\n     --time-passes      time the individual phases of the compiler\n@@ -207,7 +207,7 @@ fn main(vec[str] args) {\n \n     auto opts = vec(optflag(\"h\"), optflag(\"help\"),\n                     optflag(\"v\"), optflag(\"version\"),\n-                    optflag(\"glue\"), optflag(\"bitcode\"),\n+                    optflag(\"glue\"), optflag(\"emit-llvm\"),\n                     optflag(\"pretty\"), optflag(\"ls\"), optflag(\"parse-only\"),\n                     optflag(\"O\"), optflag(\"shared\"), optmulti(\"L\"),\n                     optflag(\"S\"), optflag(\"c\"), optopt(\"o\"), optflag(\"g\"),\n@@ -250,7 +250,7 @@ fn main(vec[str] args) {\n         output_type = link::output_type_assembly;\n     } else if (opt_present(match, \"c\")) {\n         output_type = link::output_type_object;\n-    } else if (opt_present(match, \"bitcode\")) {\n+    } else if (opt_present(match, \"emit-llvm\")) {\n         output_type = link::output_type_bitcode;\n     }\n "}]}