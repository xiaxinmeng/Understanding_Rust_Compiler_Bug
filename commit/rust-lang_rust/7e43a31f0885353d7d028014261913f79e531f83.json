{"sha": "7e43a31f0885353d7d028014261913f79e531f83", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlNDNhMzFmMDg4NTM1M2Q3ZDAyODAxNDI2MTkxM2Y3OWU1MzFmODM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-05-20T20:57:09Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-05-20T20:57:53Z"}, "message": "rustc: Move the interner to a new module intended to be used for general data structures", "tree": {"sha": "cba484e58d12408b88051c7dcdea734c6aa42c5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cba484e58d12408b88051c7dcdea734c6aa42c5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e43a31f0885353d7d028014261913f79e531f83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e43a31f0885353d7d028014261913f79e531f83", "html_url": "https://github.com/rust-lang/rust/commit/7e43a31f0885353d7d028014261913f79e531f83", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e43a31f0885353d7d028014261913f79e531f83/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02b995f428ffd66ab72e13f804cdd5ad80fefa7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/02b995f428ffd66ab72e13f804cdd5ad80fefa7a", "html_url": "https://github.com/rust-lang/rust/commit/02b995f428ffd66ab72e13f804cdd5ad80fefa7a"}], "stats": {"total": 102, "additions": 52, "deletions": 50}, "files": [{"sha": "069e9b3b83c42b9e96840b174f2ea2d1b80333ef", "filename": "src/comp/front/lexer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e43a31f0885353d7d028014261913f79e531f83/src%2Fcomp%2Ffront%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e43a31f0885353d7d028014261913f79e531f83/src%2Fcomp%2Ffront%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Flexer.rs?ref=7e43a31f0885353d7d028014261913f79e531f83", "patch": "@@ -10,7 +10,7 @@ import std::option::none;\n import driver::session::session;\n import util::common;\n import util::common::new_str_hash;\n-import util::interner;\n+import util::data::interner;\n \n state type reader = state obj {\n     fn is_eof() -> bool;\n@@ -800,7 +800,7 @@ fn read_block_comment(&reader rdr) -> cmnt {\n \n fn gather_comments(session sess, str path) -> vec[cmnt] {\n     auto srdr = io::file_reader(path);\n-    auto itr = @interner::mk_interner[str](str::hash, str::eq);\n+    auto itr = @interner::mk[str](str::hash, str::eq);\n     auto rdr = new_reader(sess, srdr, codemap::new_filemap(path, 0u), itr);\n     let vec[cmnt] comments = [];\n     while (!rdr.is_eof()) {"}, {"sha": "1774762dcf86f3a65844d124baa4806c45acf08a", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e43a31f0885353d7d028014261913f79e531f83/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e43a31f0885353d7d028014261913f79e531f83/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=7e43a31f0885353d7d028014261913f79e531f83", "patch": "@@ -11,7 +11,7 @@ import util::common;\n import util::common::filename;\n import util::common::span;\n import util::common::new_str_hash;\n-import util::interner;\n+import util::data::interner;\n \n tag restriction {\n     UNRESTRICTED;\n@@ -165,7 +165,7 @@ fn new_parser(session::session sess,\n     auto srdr = io::file_reader(path);\n     auto filemap = codemap::new_filemap(path, pos);\n     vec::push[codemap::filemap](sess.get_codemap().files, filemap);\n-    auto itr = @interner::mk_interner[str](str::hash, str::eq);\n+    auto itr = @interner::mk[str](str::hash, str::eq);\n     auto rdr = lexer::new_reader(sess, srdr, filemap, itr);\n     // Make sure npos points at first actual token:\n     lexer::consume_any_whitespace(rdr);"}, {"sha": "7c778ccaad385be7e13e487a7c978065d986442d", "filename": "src/comp/front/token.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e43a31f0885353d7d028014261913f79e531f83/src%2Fcomp%2Ffront%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e43a31f0885353d7d028014261913f79e531f83/src%2Fcomp%2Ffront%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Ftoken.rs?ref=7e43a31f0885353d7d028014261913f79e531f83", "patch": "@@ -1,7 +1,7 @@\n import util::common::ty_mach;\n import util::common::ty_mach_to_str;\n import util::common::new_str_hash;\n-import util::interner;\n+import util::data::interner;\n import std::int;\n import std::uint;\n import std::str;"}, {"sha": "67fb829d4ad791a48bf7ef074d342ac52fecdfba", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e43a31f0885353d7d028014261913f79e531f83/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e43a31f0885353d7d028014261913f79e531f83/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=7e43a31f0885353d7d028014261913f79e531f83", "patch": "@@ -34,7 +34,7 @@ import util::common::new_def_hash;\n import util::common::span;\n import middle::tstate::ann::ts_ann;\n \n-import util::interner;\n+import util::data::interner;\n \n // Data types\n \n@@ -232,7 +232,7 @@ fn mk_ctxt(session::session s, resolve::def_map dm) -> ctxt {\n         common::new_def_hash[ty::ty_param_count_and_ty]();\n \n     auto items = common::new_def_hash[any_item]();\n-    auto ts = @interner::mk_interner[raw_t](hash_raw_ty, eq_raw_ty);\n+    auto ts = @interner::mk[raw_t](hash_raw_ty, eq_raw_ty);\n \n     auto cx =\n         rec(ts = ts,"}, {"sha": "d9a9b8dea9c5dc43620665902991c34a938b90b9", "filename": "src/comp/rustc.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e43a31f0885353d7d028014261913f79e531f83/src%2Fcomp%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/7e43a31f0885353d7d028014261913f79e531f83/src%2Fcomp%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Frustc.rc?ref=7e43a31f0885353d7d028014261913f79e531f83", "patch": "@@ -62,7 +62,7 @@ mod driver {\n \n mod util {\n     mod common;\n-    mod interner;\n+    mod data;\n }\n \n auth front::creader::load_crate = unsafe;"}, {"sha": "301297ba3432c28e83242268d3c916978e13a4ab", "filename": "src/comp/util/data.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/7e43a31f0885353d7d028014261913f79e531f83/src%2Fcomp%2Futil%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e43a31f0885353d7d028014261913f79e531f83/src%2Fcomp%2Futil%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Fdata.rs?ref=7e43a31f0885353d7d028014261913f79e531f83", "patch": "@@ -0,0 +1,44 @@\n+// An \"interner\" is a data structure that associates values with uint tags and\n+// allows bidirectional lookup; i.e. given a value, one can easily find the\n+// type, and vice versa.\n+\n+import std::vec;\n+import std::map;\n+import std::map::hashmap;\n+import std::map::hashfn;\n+import std::map::eqfn;\n+import std::option;\n+import std::option::none;\n+import std::option::some;\n+\n+mod interner {\n+    type interner[T] = rec(\n+        hashmap[T,uint] map,\n+        mutable vec[T] vect,\n+        hashfn[T] hasher,\n+        eqfn[T] eqer\n+    );\n+\n+    fn mk[T](hashfn[T] hasher, eqfn[T] eqer) -> interner[T] {\n+        auto m = map::mk_hashmap[T,uint](hasher, eqer);\n+        let vec[T] vect = [];\n+        ret rec(map=m, mutable vect=vect, hasher=hasher, eqer=eqer);\n+    }\n+\n+    fn intern[T](&interner[T] itr, &T val) -> uint {\n+        alt (itr.map.find(val)) {\n+            case (some[uint](?idx)) { ret idx; }\n+            case (none[uint]) {\n+                auto new_idx = vec::len[T](itr.vect);\n+                itr.map.insert(val, new_idx);\n+                itr.vect += [val];\n+                ret new_idx;\n+            }\n+        }\n+    }\n+\n+    fn get[T](&interner[T] itr, uint idx) -> T {\n+        ret itr.vect.(idx);\n+    }\n+}\n+"}, {"sha": "60d6b3102f0eb5e40b4c03e0915c2fc1719d3984", "filename": "src/comp/util/interner.rs", "status": "removed", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/02b995f428ffd66ab72e13f804cdd5ad80fefa7a/src%2Fcomp%2Futil%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b995f428ffd66ab72e13f804cdd5ad80fefa7a/src%2Fcomp%2Futil%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Finterner.rs?ref=02b995f428ffd66ab72e13f804cdd5ad80fefa7a", "patch": "@@ -1,42 +0,0 @@\n-// An \"interner\" is a data structure that associates values with uint tags and\n-// allows bidirectional lookup; i.e. given a value, one can easily find the\n-// type, and vice versa.\n-\n-import std::vec;\n-import std::map;\n-import std::map::hashmap;\n-import std::map::hashfn;\n-import std::map::eqfn;\n-import std::option;\n-import std::option::none;\n-import std::option::some;\n-\n-type interner[T] = rec(\n-    hashmap[T,uint] map,\n-    mutable vec[T] vect,\n-    hashfn[T] hasher,\n-    eqfn[T] eqer\n-);\n-\n-fn mk_interner[T](hashfn[T] hasher, eqfn[T] eqer) -> interner[T] {\n-    auto m = map::mk_hashmap[T,uint](hasher, eqer);\n-    let vec[T] vect = [];\n-    ret rec(map=m, mutable vect=vect, hasher=hasher, eqer=eqer);\n-}\n-\n-fn intern[T](&interner[T] itr, &T val) -> uint {\n-    alt (itr.map.find(val)) {\n-        case (some[uint](?idx)) { ret idx; }\n-        case (none[uint]) {\n-            auto new_idx = vec::len[T](itr.vect);\n-            itr.map.insert(val, new_idx);\n-            itr.vect += [val];\n-            ret new_idx;\n-        }\n-    }\n-}\n-\n-fn get[T](&interner[T] itr, uint idx) -> T {\n-    ret itr.vect.(idx);\n-}\n-"}]}