{"sha": "5a5e9410148dd10586acd50e4e99b515b0e3111a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhNWU5NDEwMTQ4ZGQxMDU4NmFjZDUwZTRlOTliNTE1YjBlMzExMWE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-03-07T15:13:10Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-03-07T15:13:10Z"}, "message": "Merge branch 'metadata-send-sync' of https://github.com/Zoxc/rust into update-cargo", "tree": {"sha": "b644f2041fbb8d945cccb7e09e7c3879f06f8786", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b644f2041fbb8d945cccb7e09e7c3879f06f8786"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a5e9410148dd10586acd50e4e99b515b0e3111a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a5e9410148dd10586acd50e4e99b515b0e3111a", "html_url": "https://github.com/rust-lang/rust/commit/5a5e9410148dd10586acd50e4e99b515b0e3111a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a5e9410148dd10586acd50e4e99b515b0e3111a/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8eaabcdbaa66da93e35025ed0d02ad01c5824c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8eaabcdbaa66da93e35025ed0d02ad01c5824c3", "html_url": "https://github.com/rust-lang/rust/commit/a8eaabcdbaa66da93e35025ed0d02ad01c5824c3"}, {"sha": "62089c335fbdbe2a04c432239dce9e6e8f9a5e8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/62089c335fbdbe2a04c432239dce9e6e8f9a5e8e", "html_url": "https://github.com/rust-lang/rust/commit/62089c335fbdbe2a04c432239dce9e6e8f9a5e8e"}], "stats": {"total": 107, "additions": 76, "deletions": 31}, "files": [{"sha": "3c451d7ae46a1070cab54d0aa66594cc2d3de843", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5a5e9410148dd10586acd50e4e99b515b0e3111a/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5e9410148dd10586acd50e4e99b515b0e3111a/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=5a5e9410148dd10586acd50e4e99b515b0e3111a", "patch": "@@ -36,13 +36,12 @@ use session::search_paths::PathKind;\n use std::any::Any;\n use std::collections::BTreeMap;\n use std::path::{Path, PathBuf};\n-use rustc_data_structures::owning_ref::ErasedBoxRef;\n use syntax::ast;\n use syntax::ext::base::SyntaxExtension;\n use syntax::symbol::Symbol;\n use syntax_pos::Span;\n use rustc_back::target::Target;\n-use rustc_data_structures::sync::Lrc;\n+use rustc_data_structures::sync::{MetadataRef, Lrc};\n \n pub use self::NativeLibraryKind::*;\n \n@@ -186,11 +185,11 @@ pub trait MetadataLoader {\n     fn get_rlib_metadata(&self,\n                          target: &Target,\n                          filename: &Path)\n-                         -> Result<ErasedBoxRef<[u8]>, String>;\n+                         -> Result<MetadataRef, String>;\n     fn get_dylib_metadata(&self,\n                           target: &Target,\n                           filename: &Path)\n-                          -> Result<ErasedBoxRef<[u8]>, String>;\n+                          -> Result<MetadataRef, String>;\n }\n \n #[derive(Clone)]"}, {"sha": "c466b8f8ad1b5acb716db8b2720dd2cadb25c08f", "filename": "src/librustc_data_structures/owning_ref/mod.rs", "status": "modified", "additions": 41, "deletions": 6, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/5a5e9410148dd10586acd50e4e99b515b0e3111a/src%2Flibrustc_data_structures%2Fowning_ref%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5e9410148dd10586acd50e4e99b515b0e3111a/src%2Flibrustc_data_structures%2Fowning_ref%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fowning_ref%2Fmod.rs?ref=5a5e9410148dd10586acd50e4e99b515b0e3111a", "patch": "@@ -243,6 +243,7 @@ fn main() {\n ```\n */\n \n+use std::mem;\n pub use stable_deref_trait::{StableDeref as StableAddress, CloneStableDeref as CloneStableAddress};\n \n /// An owning reference.\n@@ -279,7 +280,7 @@ pub struct OwningRefMut<O, T: ?Sized> {\n pub trait Erased {}\n impl<T> Erased for T {}\n \n-/// Helper trait for erasing the concrete type of what an owner derferences to,\n+/// Helper trait for erasing the concrete type of what an owner dereferences to,\n /// for example `Box<T> -> Box<Erased>`. This would be unneeded with\n /// higher kinded types support in the language.\n pub unsafe trait IntoErased<'a> {\n@@ -289,10 +290,20 @@ pub unsafe trait IntoErased<'a> {\n     fn into_erased(self) -> Self::Erased;\n }\n \n-/// Helper trait for erasing the concrete type of what an owner derferences to,\n+/// Helper trait for erasing the concrete type of what an owner dereferences to,\n+/// for example `Box<T> -> Box<Erased + Send>`. This would be unneeded with\n+/// higher kinded types support in the language.\n+pub unsafe trait IntoErasedSend<'a> {\n+    /// Owner with the dereference type substituted to `Erased + Send`.\n+    type Erased: Send;\n+    /// Perform the type erasure.\n+    fn into_erased_send(self) -> Self::Erased;\n+}\n+\n+/// Helper trait for erasing the concrete type of what an owner dereferences to,\n /// for example `Box<T> -> Box<Erased + Send + Sync>`. This would be unneeded with\n /// higher kinded types support in the language.\n-pub unsafe trait IntoErasedSendSync<'a>: Send + Sync {\n+pub unsafe trait IntoErasedSendSync<'a> {\n     /// Owner with the dereference type substituted to `Erased + Send + Sync`.\n     type Erased: Send + Sync;\n     /// Perform the type erasure.\n@@ -472,6 +483,18 @@ impl<O, T: ?Sized> OwningRef<O, T> {\n         }\n     }\n \n+    /// Erases the concrete base type of the owner with a trait object which implements `Send`.\n+    ///\n+    /// This allows mixing of owned references with different owner base types.\n+    pub fn erase_send_owner<'a>(self) -> OwningRef<O::Erased, T>\n+        where O: IntoErasedSend<'a>,\n+    {\n+        OwningRef {\n+            reference: self.reference,\n+            owner: self.owner.into_erased_send(),\n+        }\n+    }\n+\n     /// Erases the concrete base type of the owner with a trait object which implements `Send` and `Sync`.\n     ///\n     /// This allows mixing of owned references with different owner base types.\n@@ -1161,13 +1184,25 @@ unsafe impl<'a, T: 'a> IntoErased<'a> for Arc<T> {\n     }\n }\n \n-unsafe impl<'a, T: Send + Sync + 'a> IntoErasedSendSync<'a> for Box<T> {\n-    type Erased = Box<Erased + Send + Sync + 'a>;\n-    fn into_erased_send_sync(self) -> Self::Erased {\n+unsafe impl<'a, T: Send + 'a> IntoErasedSend<'a> for Box<T> {\n+    type Erased = Box<Erased + Send + 'a>;\n+    fn into_erased_send(self) -> Self::Erased {\n         self\n     }\n }\n \n+unsafe impl<'a, T: Send + 'a> IntoErasedSendSync<'a> for Box<T> {\n+    type Erased = Box<Erased + Sync + Send + 'a>;\n+    fn into_erased_send_sync(self) -> Self::Erased {\n+        let result: Box<Erased + Send + 'a> = self;\n+        // This is safe since Erased can always implement Sync\n+        // Only the destructor is available and it takes &mut self\n+        unsafe {\n+            mem::transmute(result)\n+        }\n+    }\n+}\n+\n unsafe impl<'a, T: Send + Sync + 'a> IntoErasedSendSync<'a> for Arc<T> {\n     type Erased = Arc<Erased + Send + Sync + 'a>;\n     fn into_erased_send_sync(self) -> Self::Erased {"}, {"sha": "69fc9ef785eb791e645c5767f31870983f9b4a3b", "filename": "src/librustc_data_structures/sync.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a5e9410148dd10586acd50e4e99b515b0e3111a/src%2Flibrustc_data_structures%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5e9410148dd10586acd50e4e99b515b0e3111a/src%2Flibrustc_data_structures%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsync.rs?ref=5a5e9410148dd10586acd50e4e99b515b0e3111a", "patch": "@@ -177,7 +177,7 @@ cfg_if! {\n         macro_rules! rustc_erase_owner {\n             ($v:expr) => {{\n                 let v = $v;\n-                ::rustc_data_structures::sync::assert_send_sync_val(&v);\n+                ::rustc_data_structures::sync::assert_send_val(&v);\n                 v.erase_send_sync_owner()\n             }}\n         }\n@@ -262,6 +262,7 @@ cfg_if! {\n }\n \n pub fn assert_sync<T: ?Sized + Sync>() {}\n+pub fn assert_send_val<T: ?Sized + Send>(_t: &T) {}\n pub fn assert_send_sync_val<T: ?Sized + Sync + Send>(_t: &T) {}\n \n #[macro_export]"}, {"sha": "9d8690072709b8670adbe10321b963da977edff3", "filename": "src/librustc_llvm/archive_ro.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a5e9410148dd10586acd50e4e99b515b0e3111a/src%2Flibrustc_llvm%2Farchive_ro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5e9410148dd10586acd50e4e99b515b0e3111a/src%2Flibrustc_llvm%2Farchive_ro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Farchive_ro.rs?ref=5a5e9410148dd10586acd50e4e99b515b0e3111a", "patch": "@@ -22,6 +22,8 @@ pub struct ArchiveRO {\n     ptr: ArchiveRef,\n }\n \n+unsafe impl Send for ArchiveRO {}\n+\n pub struct Iter<'a> {\n     archive: &'a ArchiveRO,\n     ptr: ::ArchiveIteratorRef,"}, {"sha": "16bee5b987e2d0a6b333745e0289f20597cf9685", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a5e9410148dd10586acd50e4e99b515b0e3111a/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5e9410148dd10586acd50e4e99b515b0e3111a/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=5a5e9410148dd10586acd50e4e99b515b0e3111a", "patch": "@@ -221,6 +221,8 @@ pub struct ObjectFile {\n     pub llof: ObjectFileRef,\n }\n \n+unsafe impl Send for ObjectFile {}\n+\n impl ObjectFile {\n     // This will take ownership of llmb\n     pub fn new(llmb: MemoryBufferRef) -> Option<ObjectFile> {"}, {"sha": "202efb9276a81e0f8071e1b9915cee8fcc30080c", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5a5e9410148dd10586acd50e4e99b515b0e3111a/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5e9410148dd10586acd50e4e99b515b0e3111a/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=5a5e9410148dd10586acd50e4e99b515b0e3111a", "patch": "@@ -24,7 +24,6 @@ use rustc::util::nodemap::{FxHashMap, FxHashSet, NodeMap};\n \n use std::cell::{RefCell, Cell};\n use rustc_data_structures::sync::Lrc;\n-use rustc_data_structures::owning_ref::ErasedBoxRef;\n use syntax::{ast, attr};\n use syntax::ext::base::SyntaxExtension;\n use syntax::symbol::Symbol;\n@@ -42,7 +41,9 @@ pub use cstore_impl::{provide, provide_extern};\n // own crate numbers.\n pub type CrateNumMap = IndexVec<CrateNum, CrateNum>;\n \n-pub struct MetadataBlob(pub ErasedBoxRef<[u8]>);\n+pub use rustc_data_structures::sync::MetadataRef;\n+\n+pub struct MetadataBlob(pub MetadataRef);\n \n /// Holds information about a syntax_pos::FileMap imported from another crate.\n /// See `imported_filemaps()` for more information."}, {"sha": "da0da622d521424a661ac527921bcc5bded126c4", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a5e9410148dd10586acd50e4e99b515b0e3111a/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5e9410148dd10586acd50e4e99b515b0e3111a/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=5a5e9410148dd10586acd50e4e99b515b0e3111a", "patch": "@@ -39,6 +39,7 @@ extern crate proc_macro;\n #[macro_use]\n extern crate rustc;\n extern crate rustc_back;\n+#[macro_use]\n extern crate rustc_data_structures;\n \n mod diagnostics;"}, {"sha": "c56674bd6c5a9b959b0f121f52742fe80fa7bc48", "filename": "src/librustc_metadata/locator.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5a5e9410148dd10586acd50e4e99b515b0e3111a/src%2Flibrustc_metadata%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5e9410148dd10586acd50e4e99b515b0e3111a/src%2Flibrustc_metadata%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flocator.rs?ref=5a5e9410148dd10586acd50e4e99b515b0e3111a", "patch": "@@ -219,7 +219,7 @@\n //! no means all of the necessary details. Take a look at the rest of\n //! metadata::locator or metadata::creader for all the juicy details!\n \n-use cstore::MetadataBlob;\n+use cstore::{MetadataRef, MetadataBlob};\n use creader::Library;\n use schema::{METADATA_HEADER, rustc_version};\n \n@@ -243,8 +243,8 @@ use std::path::{Path, PathBuf};\n use std::time::Instant;\n \n use flate2::read::DeflateDecoder;\n-use rustc_data_structures::owning_ref::{ErasedBoxRef, OwningRef};\n \n+use rustc_data_structures::owning_ref::OwningRef;\n pub struct CrateMismatch {\n     path: PathBuf,\n     got: String,\n@@ -842,7 +842,7 @@ fn get_metadata_section_imp(target: &Target,\n     if !filename.exists() {\n         return Err(format!(\"no such file: '{}'\", filename.display()));\n     }\n-    let raw_bytes: ErasedBoxRef<[u8]> = match flavor {\n+    let raw_bytes: MetadataRef = match flavor {\n         CrateFlavor::Rlib => loader.get_rlib_metadata(target, filename)?,\n         CrateFlavor::Dylib => {\n             let buf = loader.get_dylib_metadata(target, filename)?;\n@@ -862,7 +862,7 @@ fn get_metadata_section_imp(target: &Target,\n             match DeflateDecoder::new(compressed_bytes).read_to_end(&mut inflated) {\n                 Ok(_) => {\n                     let buf = unsafe { OwningRef::new_assert_stable_address(inflated) };\n-                    buf.map_owner_box().erase_owner()\n+                    rustc_erase_owner!(buf.map_owner_box())\n                 }\n                 Err(_) => {\n                     return Err(format!(\"failed to decompress metadata: {}\", filename.display()));\n@@ -872,7 +872,7 @@ fn get_metadata_section_imp(target: &Target,\n         CrateFlavor::Rmeta => {\n             let buf = fs::read(filename).map_err(|_|\n                 format!(\"failed to read rmeta metadata: '{}'\", filename.display()))?;\n-            OwningRef::new(buf).map_owner_box().erase_owner()\n+            rustc_erase_owner!(OwningRef::new(buf).map_owner_box())\n         }\n     };\n     let blob = MetadataBlob(raw_bytes);"}, {"sha": "74df5127269a7d23014ba3ffc7888a0ce97695b9", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a5e9410148dd10586acd50e4e99b515b0e3111a/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5e9410148dd10586acd50e4e99b515b0e3111a/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=5a5e9410148dd10586acd50e4e99b515b0e3111a", "patch": "@@ -50,7 +50,7 @@ extern crate rustc_allocator;\n extern crate rustc_apfloat;\n extern crate rustc_back;\n extern crate rustc_const_math;\n-extern crate rustc_data_structures;\n+#[macro_use] extern crate rustc_data_structures;\n extern crate rustc_demangle;\n extern crate rustc_incremental;\n extern crate rustc_llvm as llvm;"}, {"sha": "9483420f2f0e79f670f0b4251a18f97fd8dce77f", "filename": "src/librustc_trans/metadata.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5a5e9410148dd10586acd50e4e99b515b0e3111a/src%2Flibrustc_trans%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5e9410148dd10586acd50e4e99b515b0e3111a/src%2Flibrustc_trans%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmetadata.rs?ref=5a5e9410148dd10586acd50e4e99b515b0e3111a", "patch": "@@ -15,17 +15,19 @@ use llvm;\n use llvm::{False, ObjectFile, mk_section_iter};\n use llvm::archive_ro::ArchiveRO;\n \n-use rustc_data_structures::owning_ref::{ErasedBoxRef, OwningRef};\n+use rustc_data_structures::owning_ref::OwningRef;\n use std::path::Path;\n use std::ptr;\n use std::slice;\n \n+pub use rustc_data_structures::sync::MetadataRef;\n+\n pub const METADATA_FILENAME: &str = \"rust.metadata.bin\";\n \n pub struct LlvmMetadataLoader;\n \n impl MetadataLoader for LlvmMetadataLoader {\n-    fn get_rlib_metadata(&self, _: &Target, filename: &Path) -> Result<ErasedBoxRef<[u8]>, String> {\n+    fn get_rlib_metadata(&self, _: &Target, filename: &Path) -> Result<MetadataRef, String> {\n         // Use ArchiveRO for speed here, it's backed by LLVM and uses mmap\n         // internally to read the file. We also avoid even using a memcpy by\n         // just keeping the archive along while the metadata is in use.\n@@ -47,13 +49,13 @@ impl MetadataLoader for LlvmMetadataLoader {\n                                 filename.display())\n                     })\n             })?;\n-        Ok(buf.erase_owner())\n+        Ok(rustc_erase_owner!(buf))\n     }\n \n     fn get_dylib_metadata(&self,\n                           target: &Target,\n                           filename: &Path)\n-                          -> Result<ErasedBoxRef<[u8]>, String> {\n+                          -> Result<MetadataRef, String> {\n         unsafe {\n             let buf = common::path2cstr(filename);\n             let mb = llvm::LLVMRustCreateMemoryBufferWithContentsOfFile(buf.as_ptr());\n@@ -65,7 +67,7 @@ impl MetadataLoader for LlvmMetadataLoader {\n                 .ok_or_else(|| format!(\"provided path not an object file: '{}'\",\n                                         filename.display()))?;\n             let buf = of.try_map(|of| search_meta_section(of, target, filename))?;\n-            Ok(buf.erase_owner())\n+            Ok(rustc_erase_owner!(buf))\n         }\n     }\n }"}, {"sha": "915f8d4588d9f7a0b338aae317d6c08695f33ee7", "filename": "src/librustc_trans_utils/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a5e9410148dd10586acd50e4e99b515b0e3111a/src%2Flibrustc_trans_utils%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5e9410148dd10586acd50e4e99b515b0e3111a/src%2Flibrustc_trans_utils%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2Flib.rs?ref=5a5e9410148dd10586acd50e4e99b515b0e3111a", "patch": "@@ -40,7 +40,7 @@ extern crate rustc_incremental;\n #[macro_use]\n extern crate syntax;\n extern crate syntax_pos;\n-extern crate rustc_data_structures;\n+#[macro_use] extern crate rustc_data_structures;\n \n pub extern crate rustc as __rustc;\n "}, {"sha": "784c662e3712586e086420aa2b7f4fefb6bf183f", "filename": "src/librustc_trans_utils/trans_crate.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5a5e9410148dd10586acd50e4e99b515b0e3111a/src%2Flibrustc_trans_utils%2Ftrans_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5e9410148dd10586acd50e4e99b515b0e3111a/src%2Flibrustc_trans_utils%2Ftrans_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2Ftrans_crate.rs?ref=5a5e9410148dd10586acd50e4e99b515b0e3111a", "patch": "@@ -28,7 +28,7 @@ use std::fs::File;\n use std::path::Path;\n use std::sync::mpsc;\n \n-use rustc_data_structures::owning_ref::{ErasedBoxRef, OwningRef};\n+use rustc_data_structures::owning_ref::OwningRef;\n use rustc_data_structures::sync::Lrc;\n use ar::{Archive, Builder, Header};\n use flate2::Compression;\n@@ -47,6 +47,8 @@ use rustc_back::target::Target;\n use rustc_mir::monomorphize::collector;\n use link::{build_link_meta, out_filename};\n \n+pub use rustc_data_structures::sync::MetadataRef;\n+\n pub trait TransCrate {\n     fn init(&self, _sess: &Session) {}\n     fn print(&self, _req: PrintRequest, _sess: &Session) {}\n@@ -119,23 +121,23 @@ impl MetadataLoader for DummyMetadataLoader {\n         &self,\n         _target: &Target,\n         _filename: &Path\n-    ) -> Result<ErasedBoxRef<[u8]>, String> {\n+    ) -> Result<MetadataRef, String> {\n         bug!(\"DummyMetadataLoader::get_rlib_metadata\");\n     }\n \n     fn get_dylib_metadata(\n         &self,\n         _target: &Target,\n         _filename: &Path\n-    ) -> Result<ErasedBoxRef<[u8]>, String> {\n+    ) -> Result<MetadataRef, String> {\n         bug!(\"DummyMetadataLoader::get_dylib_metadata\");\n     }\n }\n \n pub struct NoLlvmMetadataLoader;\n \n impl MetadataLoader for NoLlvmMetadataLoader {\n-    fn get_rlib_metadata(&self, _: &Target, filename: &Path) -> Result<ErasedBoxRef<[u8]>, String> {\n+    fn get_rlib_metadata(&self, _: &Target, filename: &Path) -> Result<MetadataRef, String> {\n         let file = File::open(filename)\n             .map_err(|e| format!(\"metadata file open err: {:?}\", e))?;\n         let mut archive = Archive::new(file);\n@@ -147,7 +149,7 @@ impl MetadataLoader for NoLlvmMetadataLoader {\n                 let mut buf = Vec::new();\n                 io::copy(&mut entry, &mut buf).unwrap();\n                 let buf: OwningRef<Vec<u8>, [u8]> = OwningRef::new(buf).into();\n-                return Ok(buf.map_owner_box().erase_owner());\n+                return Ok(rustc_erase_owner!(buf.map_owner_box()));\n             }\n         }\n \n@@ -158,7 +160,7 @@ impl MetadataLoader for NoLlvmMetadataLoader {\n         &self,\n         _target: &Target,\n         _filename: &Path,\n-    ) -> Result<ErasedBoxRef<[u8]>, String> {\n+    ) -> Result<MetadataRef, String> {\n         // FIXME: Support reading dylibs from llvm enabled rustc\n         self.get_rlib_metadata(_target, _filename)\n     }"}]}