{"sha": "420a038da9ea6d809c3c97491eb47f61b8afdae9", "node_id": "C_kwDOAAsO6NoAKDQyMGEwMzhkYTllYTZkODA5YzNjOTc0OTFlYjQ3ZjYxYjhhZmRhZTk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-24T06:34:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-24T06:34:25Z"}, "message": "Auto merge of #14513 - hecatia-elegua:alias-based-completion2, r=Veykril\n\ndoc(alias)-based completion round 2\n\nFollow-up on #14433\nWe can now complete fields, functions and some use/mods.\nFlyimports don't behave, I don't really have the time to understand the structure there either.\nWhile reading the flyimport code, I removed one method only used there, the closure-tree was a bit confusing, I can revert that if you want.", "tree": {"sha": "eb4f1b74fdf4178799ae3118dfd621b9b0bf38f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb4f1b74fdf4178799ae3118dfd621b9b0bf38f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/420a038da9ea6d809c3c97491eb47f61b8afdae9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/420a038da9ea6d809c3c97491eb47f61b8afdae9", "html_url": "https://github.com/rust-lang/rust/commit/420a038da9ea6d809c3c97491eb47f61b8afdae9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/420a038da9ea6d809c3c97491eb47f61b8afdae9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2e6f3a9da790fd449e28d41f77508ea13164466", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2e6f3a9da790fd449e28d41f77508ea13164466", "html_url": "https://github.com/rust-lang/rust/commit/b2e6f3a9da790fd449e28d41f77508ea13164466"}, {"sha": "398af0259f7614ff8a0d603edd5d94ce9aecd5f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/398af0259f7614ff8a0d603edd5d94ce9aecd5f2", "html_url": "https://github.com/rust-lang/rust/commit/398af0259f7614ff8a0d603edd5d94ce9aecd5f2"}], "stats": {"total": 291, "additions": 214, "deletions": 77}, "files": [{"sha": "bc7a94cd337bba28ec196786bcb15ee4b4a08767", "filename": "crates/ide-completion/src/completions.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/420a038da9ea6d809c3c97491eb47f61b8afdae9/crates%2Fide-completion%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/420a038da9ea6d809c3c97491eb47f61b8afdae9/crates%2Fide-completion%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions.rs?ref=420a038da9ea6d809c3c97491eb47f61b8afdae9", "patch": "@@ -78,14 +78,6 @@ impl Completions {\n         }\n     }\n \n-    pub(crate) fn add_all<I>(&mut self, items: I)\n-    where\n-        I: IntoIterator,\n-        I::Item: Into<CompletionItem>,\n-    {\n-        items.into_iter().for_each(|item| self.add(item.into()))\n-    }\n-\n     pub(crate) fn add_keyword(&mut self, ctx: &CompletionContext<'_>, keyword: &'static str) {\n         let item = CompletionItem::new(CompletionItemKind::Keyword, ctx.source_range(), keyword);\n         item.add_to(self);\n@@ -472,8 +464,9 @@ impl Completions {\n             Visible::Editable => true,\n             Visible::No => return,\n         };\n+        let doc_aliases = ctx.doc_aliases(&field);\n         let item = render_field(\n-            RenderContext::new(ctx).private_editable(is_private_editable),\n+            RenderContext::new(ctx).private_editable(is_private_editable).doc_aliases(doc_aliases),\n             dot_access,\n             receiver,\n             field,"}, {"sha": "9daa6984c3e38ab824704867ced6ec207e836636", "filename": "crates/ide-completion/src/completions/expr.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/420a038da9ea6d809c3c97491eb47f61b8afdae9/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/420a038da9ea6d809c3c97491eb47f61b8afdae9/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs?ref=420a038da9ea6d809c3c97491eb47f61b8afdae9", "patch": "@@ -88,7 +88,13 @@ pub(crate) fn complete_expr_path(\n                     let module_scope = module.scope(ctx.db, Some(ctx.module));\n                     for (name, def) in module_scope {\n                         if scope_def_applicable(def) {\n-                            acc.add_path_resolution(ctx, path_ctx, name, def, vec![]);\n+                            acc.add_path_resolution(\n+                                ctx,\n+                                path_ctx,\n+                                name,\n+                                def,\n+                                ctx.doc_aliases_in_scope(def),\n+                            );\n                         }\n                     }\n                 }"}, {"sha": "1edf636aea0f0a7824e5664e52caf4b12c667e8b", "filename": "crates/ide-completion/src/completions/flyimport.rs", "status": "modified", "additions": 36, "deletions": 52, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/420a038da9ea6d809c3c97491eb47f61b8afdae9/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/420a038da9ea6d809c3c97491eb47f61b8afdae9/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fflyimport.rs?ref=420a038da9ea6d809c3c97491eb47f61b8afdae9", "patch": "@@ -257,32 +257,24 @@ fn import_on_the_fly(\n     };\n     let user_input_lowercased = potential_import_name.to_lowercase();\n \n-    acc.add_all(\n-        import_assets\n-            .search_for_imports(\n-                &ctx.sema,\n-                ctx.config.insert_use.prefix_kind,\n-                ctx.config.prefer_no_std,\n-            )\n-            .into_iter()\n-            .filter(ns_filter)\n-            .filter(|import| {\n-                let original_item = &import.original_item;\n-                !ctx.is_item_hidden(&import.item_to_import)\n-                    && !ctx.is_item_hidden(original_item)\n-                    && ctx.check_stability(original_item.attrs(ctx.db).as_deref())\n-            })\n-            .sorted_by_key(|located_import| {\n-                compute_fuzzy_completion_order_key(\n-                    &located_import.import_path,\n-                    &user_input_lowercased,\n-                )\n-            })\n-            .filter_map(|import| {\n-                render_resolution_with_import(RenderContext::new(ctx), path_ctx, import)\n-            })\n-            .map(|builder| builder.build()),\n-    );\n+    import_assets\n+        .search_for_imports(&ctx.sema, ctx.config.insert_use.prefix_kind, ctx.config.prefer_no_std)\n+        .into_iter()\n+        .filter(ns_filter)\n+        .filter(|import| {\n+            let original_item = &import.original_item;\n+            !ctx.is_item_hidden(&import.item_to_import)\n+                && !ctx.is_item_hidden(original_item)\n+                && ctx.check_stability(original_item.attrs(ctx.db).as_deref())\n+        })\n+        .sorted_by_key(|located_import| {\n+            compute_fuzzy_completion_order_key(&located_import.import_path, &user_input_lowercased)\n+        })\n+        .filter_map(|import| {\n+            render_resolution_with_import(RenderContext::new(ctx), path_ctx, import)\n+        })\n+        .map(|builder| builder.build())\n+        .for_each(|item| acc.add(item));\n     Some(())\n }\n \n@@ -307,32 +299,24 @@ fn import_on_the_fly_pat_(\n     };\n     let user_input_lowercased = potential_import_name.to_lowercase();\n \n-    acc.add_all(\n-        import_assets\n-            .search_for_imports(\n-                &ctx.sema,\n-                ctx.config.insert_use.prefix_kind,\n-                ctx.config.prefer_no_std,\n-            )\n-            .into_iter()\n-            .filter(ns_filter)\n-            .filter(|import| {\n-                let original_item = &import.original_item;\n-                !ctx.is_item_hidden(&import.item_to_import)\n-                    && !ctx.is_item_hidden(original_item)\n-                    && ctx.check_stability(original_item.attrs(ctx.db).as_deref())\n-            })\n-            .sorted_by_key(|located_import| {\n-                compute_fuzzy_completion_order_key(\n-                    &located_import.import_path,\n-                    &user_input_lowercased,\n-                )\n-            })\n-            .filter_map(|import| {\n-                render_resolution_with_import_pat(RenderContext::new(ctx), pattern_ctx, import)\n-            })\n-            .map(|builder| builder.build()),\n-    );\n+    import_assets\n+        .search_for_imports(&ctx.sema, ctx.config.insert_use.prefix_kind, ctx.config.prefer_no_std)\n+        .into_iter()\n+        .filter(ns_filter)\n+        .filter(|import| {\n+            let original_item = &import.original_item;\n+            !ctx.is_item_hidden(&import.item_to_import)\n+                && !ctx.is_item_hidden(original_item)\n+                && ctx.check_stability(original_item.attrs(ctx.db).as_deref())\n+        })\n+        .sorted_by_key(|located_import| {\n+            compute_fuzzy_completion_order_key(&located_import.import_path, &user_input_lowercased)\n+        })\n+        .filter_map(|import| {\n+            render_resolution_with_import_pat(RenderContext::new(ctx), pattern_ctx, import)\n+        })\n+        .map(|builder| builder.build())\n+        .for_each(|item| acc.add(item));\n     Some(())\n }\n "}, {"sha": "7b145f3c14e32d7618babebe5f5454ee264c9637", "filename": "crates/ide-completion/src/context.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/420a038da9ea6d809c3c97491eb47f61b8afdae9/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/420a038da9ea6d809c3c97491eb47f61b8afdae9/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcontext.rs?ref=420a038da9ea6d809c3c97491eb47f61b8afdae9", "patch": "@@ -443,6 +443,14 @@ impl CompletionContext<'_> {\n         self.is_visible_impl(&vis, &attrs, item.krate(self.db))\n     }\n \n+    pub(crate) fn doc_aliases<I>(&self, item: &I) -> Vec<SmolStr>\n+    where\n+        I: hir::HasAttrs + Copy,\n+    {\n+        let attrs = item.attrs(self.db);\n+        attrs.doc_aliases().collect()\n+    }\n+\n     /// Check if an item is `#[doc(hidden)]`.\n     pub(crate) fn is_item_hidden(&self, item: &hir::ItemInNs) -> bool {\n         let attrs = item.attrs(self.db);\n@@ -507,7 +515,7 @@ impl CompletionContext<'_> {\n             if self.is_scope_def_hidden(def) {\n                 return;\n             }\n-            let doc_aliases = self.doc_aliases(def);\n+            let doc_aliases = self.doc_aliases_in_scope(def);\n             f(name, def, doc_aliases);\n         });\n     }\n@@ -555,7 +563,7 @@ impl CompletionContext<'_> {\n         self.krate != defining_crate && attrs.has_doc_hidden()\n     }\n \n-    fn doc_aliases(&self, scope_def: ScopeDef) -> Vec<SmolStr> {\n+    pub(crate) fn doc_aliases_in_scope(&self, scope_def: ScopeDef) -> Vec<SmolStr> {\n         if let Some(attrs) = scope_def.attrs(self.db) {\n             attrs.doc_aliases().collect()\n         } else {"}, {"sha": "e95cae9d67ff0f4161f5aee305b5774908044e60", "filename": "crates/ide-completion/src/item.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/420a038da9ea6d809c3c97491eb47f61b8afdae9/crates%2Fide-completion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/420a038da9ea6d809c3c97491eb47f61b8afdae9/crates%2Fide-completion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fitem.rs?ref=420a038da9ea6d809c3c97491eb47f61b8afdae9", "patch": "@@ -4,6 +4,7 @@ use std::fmt;\n \n use hir::{Documentation, Mutability};\n use ide_db::{imports::import_assets::LocatedImport, SnippetCap, SymbolKind};\n+use itertools::Itertools;\n use smallvec::SmallVec;\n use stdx::{impl_from, never};\n use syntax::{SmolStr, TextRange, TextSize};\n@@ -353,7 +354,7 @@ impl CompletionItem {\n             relevance: CompletionRelevance::default(),\n             ref_match: None,\n             imports_to_add: Default::default(),\n-            doc_aliases: None,\n+            doc_aliases: vec![],\n         }\n     }\n \n@@ -386,7 +387,7 @@ pub(crate) struct Builder {\n     source_range: TextRange,\n     imports_to_add: SmallVec<[LocatedImport; 1]>,\n     trait_name: Option<SmolStr>,\n-    doc_aliases: Option<SmolStr>,\n+    doc_aliases: Vec<SmolStr>,\n     label: SmolStr,\n     insert_text: Option<String>,\n     is_snippet: bool,\n@@ -408,7 +409,13 @@ impl Builder {\n         local_name: hir::Name,\n         resolution: hir::ScopeDef,\n     ) -> Self {\n-        render_path_resolution(RenderContext::new(ctx), path_ctx, local_name, resolution)\n+        let doc_aliases = ctx.doc_aliases_in_scope(resolution);\n+        render_path_resolution(\n+            RenderContext::new(ctx).doc_aliases(doc_aliases),\n+            path_ctx,\n+            local_name,\n+            resolution,\n+        )\n     }\n \n     pub(crate) fn build(self) -> CompletionItem {\n@@ -418,7 +425,8 @@ impl Builder {\n         let mut lookup = self.lookup.unwrap_or_else(|| label.clone());\n         let insert_text = self.insert_text.unwrap_or_else(|| label.to_string());\n \n-        if let Some(doc_aliases) = self.doc_aliases {\n+        if !self.doc_aliases.is_empty() {\n+            let doc_aliases = self.doc_aliases.into_iter().join(\", \");\n             label = SmolStr::from(format!(\"{label} (alias {doc_aliases})\"));\n             lookup = SmolStr::from(format!(\"{lookup} {doc_aliases}\"));\n         }\n@@ -464,8 +472,8 @@ impl Builder {\n         self.trait_name = Some(trait_name);\n         self\n     }\n-    pub(crate) fn doc_aliases(&mut self, doc_aliases: SmolStr) -> &mut Builder {\n-        self.doc_aliases = Some(doc_aliases);\n+    pub(crate) fn doc_aliases(&mut self, doc_aliases: Vec<SmolStr>) -> &mut Builder {\n+        self.doc_aliases = doc_aliases;\n         self\n     }\n     pub(crate) fn insert_text(&mut self, insert_text: impl Into<String>) -> &mut Builder {"}, {"sha": "9673252ff52191dd3031a8733a0a1d746b4f975d", "filename": "crates/ide-completion/src/render.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/420a038da9ea6d809c3c97491eb47f61b8afdae9/crates%2Fide-completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/420a038da9ea6d809c3c97491eb47f61b8afdae9/crates%2Fide-completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender.rs?ref=420a038da9ea6d809c3c97491eb47f61b8afdae9", "patch": "@@ -14,7 +14,6 @@ use hir::{AsAssocItem, HasAttrs, HirDisplay, ScopeDef};\n use ide_db::{\n     helpers::item_name, imports::import_assets::LocatedImport, RootDatabase, SnippetCap, SymbolKind,\n };\n-use itertools::Itertools;\n use syntax::{AstNode, SmolStr, SyntaxKind, TextRange};\n \n use crate::{\n@@ -152,6 +151,7 @@ pub(crate) fn render_field(\n             }\n         }\n     }\n+    item.doc_aliases(ctx.doc_aliases);\n     item.build()\n }\n \n@@ -209,7 +209,9 @@ pub(crate) fn render_resolution_with_import(\n ) -> Option<Builder> {\n     let resolution = ScopeDef::from(import_edit.original_item);\n     let local_name = scope_def_to_name(resolution, &ctx, &import_edit)?;\n-\n+    //this now just renders the alias text, but we need to find the aliases earlier and call this with the alias instead\n+    let doc_aliases = ctx.completion.doc_aliases_in_scope(resolution);\n+    let ctx = ctx.doc_aliases(doc_aliases);\n     Some(render_resolution_path(ctx, path_ctx, local_name, Some(import_edit), resolution))\n }\n \n@@ -361,11 +363,7 @@ fn render_resolution_simple_(\n         item.add_import(import_to_add);\n     }\n \n-    let doc_aliases = ctx.doc_aliases;\n-    if !doc_aliases.is_empty() {\n-        let doc_aliases = doc_aliases.into_iter().join(\", \").into();\n-        item.doc_aliases(doc_aliases);\n-    }\n+    item.doc_aliases(ctx.doc_aliases);\n     item\n }\n "}, {"sha": "bfcd23280ce305c44ec1462e13c4a762c40d39f0", "filename": "crates/ide-completion/src/render/function.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/420a038da9ea6d809c3c97491eb47f61b8afdae9/crates%2Fide-completion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/420a038da9ea6d809c3c97491eb47f61b8afdae9/crates%2Fide-completion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Ffunction.rs?ref=420a038da9ea6d809c3c97491eb47f61b8afdae9", "patch": "@@ -147,6 +147,8 @@ fn render(\n             }\n         }\n     }\n+\n+    item.doc_aliases(ctx.doc_aliases);\n     item\n }\n "}, {"sha": "e23f3ae72ebdb70a8c62cf046c053d95da9bde7d", "filename": "crates/ide-completion/src/tests/special.rs", "status": "modified", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/420a038da9ea6d809c3c97491eb47f61b8afdae9/crates%2Fide-completion%2Fsrc%2Ftests%2Fspecial.rs", "raw_url": "https://github.com/rust-lang/rust/raw/420a038da9ea6d809c3c97491eb47f61b8afdae9/crates%2Fide-completion%2Fsrc%2Ftests%2Fspecial.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Fspecial.rs?ref=420a038da9ea6d809c3c97491eb47f61b8afdae9", "patch": "@@ -1086,3 +1086,141 @@ fn here_we_go() {\n         \"#]],\n     );\n }\n+\n+#[test]\n+fn completes_field_name_via_doc_alias_in_fn_body() {\n+    check(\n+        r#\"\n+struct Foo {\n+    #[doc(alias = \"qux\")]\n+    bar: u8\n+};\n+\n+fn here_we_go() {\n+    let foo = Foo { q$0 }\n+}\n+\"#,\n+        expect![[r#\"\n+            fd bar (alias qux) u8\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn completes_fn_name_via_doc_alias_in_fn_body() {\n+    check(\n+        r#\"\n+#[doc(alias = \"qux\")]\n+fn foo() {}\n+fn bar() { qu$0 }\n+\"#,\n+        expect![[r#\"\n+            fn bar()             fn()\n+            fn foo() (alias qux) fn()\n+            bt u32\n+            kw const\n+            kw crate::\n+            kw enum\n+            kw extern\n+            kw false\n+            kw fn\n+            kw for\n+            kw if\n+            kw if let\n+            kw impl\n+            kw let\n+            kw loop\n+            kw match\n+            kw mod\n+            kw return\n+            kw self::\n+            kw static\n+            kw struct\n+            kw trait\n+            kw true\n+            kw type\n+            kw union\n+            kw unsafe\n+            kw use\n+            kw while\n+            kw while let\n+            sn macro_rules\n+            sn pd\n+            sn ppd\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn completes_struct_name_via_doc_alias_in_another_mod() {\n+    check(\n+        r#\"\n+mod foo {\n+    #[doc(alias = \"Qux\")]\n+    pub struct Bar(u8);\n+}\n+\n+fn here_we_go() {\n+    use foo;\n+    let foo = foo::Q$0\n+}\n+\"#,\n+        expect![[r#\"\n+            st Bar (alias Qux)\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn completes_use_via_doc_alias_in_another_mod() {\n+    check(\n+        r#\"\n+mod foo {\n+    #[doc(alias = \"Qux\")]\n+    pub struct Bar(u8);\n+}\n+\n+fn here_we_go() {\n+    use foo::Q$0;\n+}\n+\"#,\n+        expect![[r#\"\n+            st Bar (alias Qux)\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn completes_flyimport_with_doc_alias_in_another_mod() {\n+    check(\n+        r#\"\n+mod foo {\n+    #[doc(alias = \"Qux\")]\n+    pub struct Bar();\n+}\n+\n+fn here_we_go() {\n+    let foo = Bar$0\n+}\n+\"#,\n+        expect![[r#\"\n+            fn here_we_go()           fn()\n+            md foo\n+            st Bar (alias Qux) (use foo::Bar)\n+            bt u32\n+            kw crate::\n+            kw false\n+            kw for\n+            kw if\n+            kw if let\n+            kw loop\n+            kw match\n+            kw return\n+            kw self::\n+            kw true\n+            kw unsafe\n+            kw while\n+            kw while let\n+        \"#]],\n+    );\n+}"}]}