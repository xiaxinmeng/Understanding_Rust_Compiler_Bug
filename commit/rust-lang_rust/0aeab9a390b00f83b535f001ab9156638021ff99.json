{"sha": "0aeab9a390b00f83b535f001ab9156638021ff99", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhZWFiOWEzOTBiMDBmODNiNTM1ZjAwMWFiOTE1NjYzODAyMWZmOTk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-10-12T21:00:30Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-11-01T18:08:56Z"}, "message": "move early lint over to multispan", "tree": {"sha": "8737d084d8f180bd5d546678efdd8ba1607ef13a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8737d084d8f180bd5d546678efdd8ba1607ef13a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0aeab9a390b00f83b535f001ab9156638021ff99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0aeab9a390b00f83b535f001ab9156638021ff99", "html_url": "https://github.com/rust-lang/rust/commit/0aeab9a390b00f83b535f001ab9156638021ff99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0aeab9a390b00f83b535f001ab9156638021ff99/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ddabd509a862da4bd0e8cfb86baf598f45c2383b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddabd509a862da4bd0e8cfb86baf598f45c2383b", "html_url": "https://github.com/rust-lang/rust/commit/ddabd509a862da4bd0e8cfb86baf598f45c2383b"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "95e1ba6e0567d0167271d958c71b7373471c5199", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/0aeab9a390b00f83b535f001ab9156638021ff99/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aeab9a390b00f83b535f001ab9156638021ff99/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=0aeab9a390b00f83b535f001ab9156638021ff99", "patch": "@@ -90,7 +90,7 @@ pub struct EarlyLint {\n     /// what span was it attached to (this is used for Eq comparisons;\n     /// it duplicates to some extent the information in\n     /// `diagnostic.span`)\n-    pub span: Span,\n+    pub span: MultiSpan,\n \n     /// the main message\n     pub diagnostic: Diagnostic,\n@@ -109,11 +109,11 @@ impl fmt::Debug for EarlyLint {\n impl EarlyLint {\n     pub fn new<M: EarlyLintMessage>(id: LintId, span: Span, msg: M) -> Self {\n         let diagnostic = msg.into_diagnostic(span);\n-        EarlyLint { id: id, span: span, diagnostic: diagnostic }\n+        EarlyLint { id: id, span: MultiSpan::from(span), diagnostic: diagnostic }\n     }\n \n     pub fn with_diagnostic(id: LintId, span: Span, diagnostic: Diagnostic) -> Self {\n-        EarlyLint { id: id, span: span, diagnostic: diagnostic }\n+        EarlyLint { id: id, span: MultiSpan::from(span), diagnostic: diagnostic }\n     }\n \n     pub fn matches(&self, other: &EarlyLint) -> bool {\n@@ -449,12 +449,12 @@ pub fn gather_attr(attr: &ast::Attribute)\n /// in trans that run after the main lint pass is finished. Most\n /// lints elsewhere in the compiler should call\n /// `Session::add_lint()` instead.\n-pub fn raw_emit_lint(sess: &Session,\n-                     lints: &LintStore,\n-                     lint: &'static Lint,\n-                     lvlsrc: LevelSource,\n-                     span: Option<Span>,\n-                     msg: &str) {\n+pub fn raw_emit_lint<S: Into<MultiSpan>>(sess: &Session,\n+                                         lints: &LintStore,\n+                                         lint: &'static Lint,\n+                                         lvlsrc: LevelSource,\n+                                         span: Option<S>,\n+                                         msg: &str) {\n     raw_struct_lint(sess, lints, lint, lvlsrc, span, msg).emit();\n }\n \n@@ -559,11 +559,11 @@ pub trait LintContext: Sized {\n         raw_emit_lint(&self.sess(), self.lints(), lint, (level, src), span, msg);\n     }\n \n-    fn lookup(&self,\n-              lint: &'static Lint,\n-              span: Option<Span>,\n-              msg: &str)\n-              -> DiagnosticBuilder {\n+    fn lookup<S: Into<MultiSpan>>(&self,\n+                                  lint: &'static Lint,\n+                                  span: Option<S>,\n+                                  msg: &str)\n+                                  -> DiagnosticBuilder {\n         let (level, src) = match self.level_src(lint) {\n             None => return self.sess().diagnostic().struct_dummy(),\n             Some(pair) => pair,\n@@ -585,11 +585,11 @@ pub trait LintContext: Sized {\n         err.emit();\n     }\n \n-    fn struct_span_lint(&self,\n-                        lint: &'static Lint,\n-                        span: Span,\n-                        msg: &str)\n-                        -> DiagnosticBuilder {\n+    fn struct_span_lint<S: Into<MultiSpan>>(&self,\n+                                            lint: &'static Lint,\n+                                            span: S,\n+                                            msg: &str)\n+                                            -> DiagnosticBuilder {\n         self.lookup(lint, Some(span), msg)\n     }\n \n@@ -1283,7 +1283,7 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // in the iteration code.\n     for (id, v) in tcx.sess.lints.borrow().iter() {\n         for early_lint in v {\n-            span_bug!(early_lint.span,\n+            span_bug!(early_lint.span.clone(),\n                       \"unprocessed lint {:?} at {}\",\n                       early_lint, tcx.map.node_to_string(*id));\n         }\n@@ -1321,7 +1321,7 @@ pub fn check_ast_crate(sess: &Session, krate: &ast::Crate) {\n     // in the iteration code.\n     for (_, v) in sess.lints.borrow().iter() {\n         for early_lint in v {\n-            span_bug!(early_lint.span, \"unprocessed lint {:?}\", early_lint);\n+            span_bug!(early_lint.span.clone(), \"unprocessed lint {:?}\", early_lint);\n         }\n     }\n }"}]}