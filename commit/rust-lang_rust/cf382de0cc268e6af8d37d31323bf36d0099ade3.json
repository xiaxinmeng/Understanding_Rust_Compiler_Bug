{"sha": "cf382de0cc268e6af8d37d31323bf36d0099ade3", "node_id": "C_kwDOAAsO6NoAKGNmMzgyZGUwY2MyNjhlNmFmOGQzN2QzMTMyM2JmMzZkMDA5OWFkZTM", "commit": {"author": {"name": "mark", "email": "markm@cs.wisc.edu", "date": "2022-01-23T06:11:13Z"}, "committer": {"name": "mark", "email": "markm@cs.wisc.edu", "date": "2022-01-23T06:11:13Z"}, "message": "Remove DiagnosticBuilder.quiet", "tree": {"sha": "bef7a6bf124fdc140456da09363edb6935b0df9c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bef7a6bf124fdc140456da09363edb6935b0df9c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf382de0cc268e6af8d37d31323bf36d0099ade3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf382de0cc268e6af8d37d31323bf36d0099ade3", "html_url": "https://github.com/rust-lang/rust/commit/cf382de0cc268e6af8d37d31323bf36d0099ade3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf382de0cc268e6af8d37d31323bf36d0099ade3/comments", "author": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ecf72996eda4f8af19b0ca7235c6f62e0245a313", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecf72996eda4f8af19b0ca7235c6f62e0245a313", "html_url": "https://github.com/rust-lang/rust/commit/ecf72996eda4f8af19b0ca7235c6f62e0245a313"}], "stats": {"total": 33, "additions": 8, "deletions": 25}, "files": [{"sha": "06b9729a7fd9f6744b1076944fa3b100ee4d6b73", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cf382de0cc268e6af8d37d31323bf36d0099ade3/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf382de0cc268e6af8d37d31323bf36d0099ade3/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=cf382de0cc268e6af8d37d31323bf36d0099ade3", "patch": "@@ -445,9 +445,6 @@ struct HandlerInner {\n     deduplicated_warn_count: usize,\n \n     future_breakage_diagnostics: Vec<Diagnostic>,\n-\n-    /// If set to `true`, no warning or error will be emitted.\n-    quiet: bool,\n }\n \n /// A key denoting where from a diagnostic was stashed.\n@@ -563,19 +560,10 @@ impl Handler {\n                 emitted_diagnostics: Default::default(),\n                 stashed_diagnostics: Default::default(),\n                 future_breakage_diagnostics: Vec::new(),\n-                quiet: false,\n             }),\n         }\n     }\n \n-    pub fn with_disabled_diagnostic<T, F: FnOnce() -> T>(&self, f: F) -> T {\n-        let prev = self.inner.borrow_mut().quiet;\n-        self.inner.borrow_mut().quiet = true;\n-        let ret = f();\n-        self.inner.borrow_mut().quiet = prev;\n-        ret\n-    }\n-\n     // This is here to not allow mutation of flags;\n     // as of this writing it's only used in tests in librustc_middle.\n     pub fn can_emit_warnings(&self) -> bool {\n@@ -946,7 +934,7 @@ impl HandlerInner {\n     }\n \n     fn emit_diagnostic(&mut self, diagnostic: &Diagnostic) {\n-        if diagnostic.cancelled() || self.quiet {\n+        if diagnostic.cancelled() {\n             return;\n         }\n \n@@ -1170,9 +1158,6 @@ impl HandlerInner {\n     }\n \n     fn delay_as_bug(&mut self, diagnostic: Diagnostic) {\n-        if self.quiet {\n-            return;\n-        }\n         if self.flags.report_delayed_bugs {\n             self.emit_diagnostic(&diagnostic);\n         }"}, {"sha": "9bcdd7f3da6b3c729c58934964d9b4180b6166a0", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf382de0cc268e6af8d37d31323bf36d0099ade3/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf382de0cc268e6af8d37d31323bf36d0099ade3/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=cf382de0cc268e6af8d37d31323bf36d0099ade3", "patch": "@@ -476,10 +476,6 @@ impl Session {\n         &self.parse_sess.span_diagnostic\n     }\n \n-    pub fn with_disabled_diagnostic<T, F: FnOnce() -> T>(&self, f: F) -> T {\n-        self.parse_sess.span_diagnostic.with_disabled_diagnostic(f)\n-    }\n-\n     /// Analogous to calling methods on the given `DiagnosticBuilder`, but\n     /// deduplicates on lint ID, span (if any), and message for this `Session`\n     fn diag_once<'a, 'b>("}, {"sha": "731e18b1eec2cf20dce6538a62ba831a6396dd46", "filename": "src/librustdoc/html/render/span_map.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cf382de0cc268e6af8d37d31323bf36d0099ade3/src%2Flibrustdoc%2Fhtml%2Frender%2Fspan_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf382de0cc268e6af8d37d31323bf36d0099ade3/src%2Flibrustdoc%2Fhtml%2Frender%2Fspan_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fspan_map.rs?ref=cf382de0cc268e6af8d37d31323bf36d0099ade3", "patch": "@@ -134,11 +134,13 @@ impl<'tcx> Visitor<'tcx> for SpanMapVisitor<'tcx> {\n             if let Some(hir_id) = segment.hir_id {\n                 let hir = self.tcx.hir();\n                 let body_id = hir.enclosing_body_owner(hir_id);\n-                let typeck_results = self.tcx.sess.with_disabled_diagnostic(|| {\n-                    self.tcx.typeck_body(\n-                        hir.maybe_body_owned_by(body_id).expect(\"a body which isn't a body\"),\n-                    )\n-                });\n+                // FIXME: this is showing error messages for parts of the code that are not\n+                // compiled (because of cfg)!\n+                //\n+                // See discussion in https://github.com/rust-lang/rust/issues/69426#issuecomment-1019412352\n+                let typeck_results = self.tcx.typeck_body(\n+                    hir.maybe_body_owned_by(body_id).expect(\"a body which isn't a body\"),\n+                );\n                 if let Some(def_id) = typeck_results.type_dependent_def_id(expr.hir_id) {\n                     self.matches.insert(\n                         segment.ident.span,"}]}