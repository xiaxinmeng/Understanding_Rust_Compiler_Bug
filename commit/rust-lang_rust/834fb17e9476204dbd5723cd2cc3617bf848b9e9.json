{"sha": "834fb17e9476204dbd5723cd2cc3617bf848b9e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzNGZiMTdlOTQ3NjIwNGRiZDU3MjNjZDJjYzM2MTdiZjg0OGI5ZTk=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-01-06T07:04:48Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-01-06T07:04:48Z"}, "message": "Fix bug in duplicate checking for extern crates.", "tree": {"sha": "06f620a63168fa0616ab31031f9bca455521f300", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06f620a63168fa0616ab31031f9bca455521f300"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/834fb17e9476204dbd5723cd2cc3617bf848b9e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/834fb17e9476204dbd5723cd2cc3617bf848b9e9", "html_url": "https://github.com/rust-lang/rust/commit/834fb17e9476204dbd5723cd2cc3617bf848b9e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/834fb17e9476204dbd5723cd2cc3617bf848b9e9/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41611baececec41b54730079a53afb43ac7f9e49", "url": "https://api.github.com/repos/rust-lang/rust/commits/41611baececec41b54730079a53afb43ac7f9e49", "html_url": "https://github.com/rust-lang/rust/commit/41611baececec41b54730079a53afb43ac7f9e49"}], "stats": {"total": 35, "additions": 22, "deletions": 13}, "files": [{"sha": "8ed47300a17082ad95370d888330ac7755cf1c6a", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/834fb17e9476204dbd5723cd2cc3617bf848b9e9/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/834fb17e9476204dbd5723cd2cc3617bf848b9e9/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=834fb17e9476204dbd5723cd2cc3617bf848b9e9", "patch": "@@ -325,7 +325,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n \n                     debug!(\"(build reduced graph for item) found extern `{}`\",\n                            module_to_string(&*external_module));\n-                    self.check_for_conflicts_between_external_crates(&**parent, name, sp);\n+                    self.check_for_conflicts_for_external_crate(&parent, name, sp);\n                     parent.external_module_children\n                           .borrow_mut()\n                           .insert(name, external_module.clone());"}, {"sha": "715f5420cdeb825225e7fc00663a9ae3c27c5be5", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 21, "deletions": 12, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/834fb17e9476204dbd5723cd2cc3617bf848b9e9/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/834fb17e9476204dbd5723cd2cc3617bf848b9e9/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=834fb17e9476204dbd5723cd2cc3617bf848b9e9", "patch": "@@ -122,6 +122,8 @@ enum SuggestionType {\n }\n \n pub enum ResolutionError<'a> {\n+    /// error E0260: name conflicts with an extern crate\n+    NameConflictsWithExternCrate(Name),\n     /// error E0401: can't use type parameters from outer function\n     TypeParametersFromOuterFunction,\n     /// error E0402: cannot use an outer type parameter in this context\n@@ -228,6 +230,14 @@ fn resolve_struct_error<'b, 'a: 'b, 'tcx: 'a>(resolver: &'b Resolver<'a, 'tcx>,\n     }\n \n     match resolution_error {\n+        ResolutionError::NameConflictsWithExternCrate(name) => {\n+            struct_span_err!(resolver.session,\n+                             span,\n+                             E0260,\n+                             \"the name `{}` conflicts with an external crate \\\n+                             that has been imported into this module\",\n+                             name)\n+        }\n         ResolutionError::TypeParametersFromOuterFunction => {\n             struct_span_err!(resolver.session,\n                              span,\n@@ -1292,19 +1302,23 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         }\n     }\n \n-    /// Checks that the names of external crates don't collide with other\n-    /// external crates.\n-    fn check_for_conflicts_between_external_crates(&self,\n-                                                   module: &Module,\n-                                                   name: Name,\n-                                                   span: Span) {\n+    /// Check that an external crate doesn't collide with items or other external crates.\n+    fn check_for_conflicts_for_external_crate(&self, module: &Module, name: Name, span: Span) {\n         if module.external_module_children.borrow().contains_key(&name) {\n             span_err!(self.session,\n                       span,\n                       E0259,\n                       \"an external crate named `{}` has already been imported into this module\",\n                       name);\n         }\n+        match module.children.borrow().get(&name) {\n+            Some(name_bindings) if name_bindings.type_ns.defined() => {\n+                resolve_error(self,\n+                              name_bindings.type_ns.span().unwrap_or(codemap::DUMMY_SP),\n+                              ResolutionError::NameConflictsWithExternCrate(name));\n+            }\n+            _ => {},\n+        }\n     }\n \n     /// Checks that the names of items don't collide with external crates.\n@@ -1313,12 +1327,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                                              name: Name,\n                                                              span: Span) {\n         if module.external_module_children.borrow().contains_key(&name) {\n-            span_err!(self.session,\n-                      span,\n-                      E0260,\n-                      \"the name `{}` conflicts with an external crate that has been imported \\\n-                       into this module\",\n-                      name);\n+            resolve_error(self, span, ResolutionError::NameConflictsWithExternCrate(name));\n         }\n     }\n "}]}