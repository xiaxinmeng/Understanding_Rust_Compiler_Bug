{"sha": "e7aeb2b1c7e9776a6771f8d345390c2ab1ceb947", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3YWViMmIxYzdlOTc3NmE2NzcxZjhkMzQ1MzkwYzJhYjFjZWI5NDc=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-07-19T22:45:08Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-07-20T09:22:25Z"}, "message": "resolve: Add more comments to in-module resolution", "tree": {"sha": "79846be644eaf54af53b7281b20ca5a63636715a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79846be644eaf54af53b7281b20ca5a63636715a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7aeb2b1c7e9776a6771f8d345390c2ab1ceb947", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7aeb2b1c7e9776a6771f8d345390c2ab1ceb947", "html_url": "https://github.com/rust-lang/rust/commit/e7aeb2b1c7e9776a6771f8d345390c2ab1ceb947", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7aeb2b1c7e9776a6771f8d345390c2ab1ceb947/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32453db3326a9e8331695dda549cfb794feb656a", "url": "https://api.github.com/repos/rust-lang/rust/commits/32453db3326a9e8331695dda549cfb794feb656a", "html_url": "https://github.com/rust-lang/rust/commit/32453db3326a9e8331695dda549cfb794feb656a"}], "stats": {"total": 48, "additions": 26, "deletions": 22}, "files": [{"sha": "50eb89be6901133be930ac4389916c79427bf3c3", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 26, "deletions": 22, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/e7aeb2b1c7e9776a6771f8d345390c2ab1ceb947/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7aeb2b1c7e9776a6771f8d345390c2ab1ceb947/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=e7aeb2b1c7e9776a6771f8d345390c2ab1ceb947", "patch": "@@ -207,36 +207,39 @@ impl<'a> Resolver<'a> {\n             }\n         }\n \n-        let no_unexpanded_macros = module.unresolved_invocations.borrow().is_empty();\n-        match resolution.binding {\n-            // So we have a resolution that's from a glob import. This resolution is determined\n-            // if it cannot be shadowed by some new item/import expanded from a macro.\n-            // This happens either if there are no unexpanded macros, or expanded names cannot\n-            // shadow globs (that happens in macro namespace or with restricted shadowing).\n-            Some(binding) if no_unexpanded_macros || ns == MacroNS || restricted_shadowing =>\n-                return check_usable(self, binding),\n-            // If we have no resolution, then it's a determined error it some new item/import\n-            // cannot appear from a macro expansion or an undetermined glob.\n-            None if no_unexpanded_macros => {} // go check for globs below\n-            // This is actually an undetermined error, but we need to return determinate error\n-            // due to subtle interactions with `resolve_lexical_macro_path_segment`\n-            // that are going to be removed in the next commit.\n-            None if restricted_shadowing => {} // go check for globs below\n-            _ => return Err(Undetermined),\n+        // So we have a resolution that's from a glob import. This resolution is determined\n+        // if it cannot be shadowed by some new item/import expanded from a macro.\n+        // This happens either if there are no unexpanded macros, or expanded names cannot\n+        // shadow globs (that happens in macro namespace or with restricted shadowing).\n+        let unexpanded_macros = !module.unresolved_invocations.borrow().is_empty();\n+        if let Some(binding) = resolution.binding {\n+            if !unexpanded_macros || ns == MacroNS || restricted_shadowing {\n+                return check_usable(self, binding);\n+            } else {\n+                return Err(Undetermined);\n+            }\n         }\n \n         // --- From now on we have no resolution. ---\n \n-        // Check if one of glob imports can still define the name,\n-        // if it can then our \"no resolution\" result is not determined and can be invalidated.\n-\n-        // What on earth is this?\n-        // Apparently one more subtle interaction with `resolve_lexical_macro_path_segment`\n-        // that are going to be removed in the next commit.\n+        // Now we are in situation when new item/import can appear only from a glob or a macro\n+        // expansion. With restricted shadowing names from globs and macro expansions cannot\n+        // shadow names from outer scopes, so we can freely fallback from module search to search\n+        // in outer scopes. To continue search in outer scopes we have to lie a bit and return\n+        // `Determined` to `resolve_lexical_macro_path_segment` even if the correct answer\n+        // for in-module resolution could be `Undetermined`.\n         if restricted_shadowing {\n             return Err(Determined);\n         }\n \n+        // Check if one of unexpanded macros can still define the name,\n+        // if it can then our \"no resolution\" result is not determined and can be invalidated.\n+        if unexpanded_macros {\n+            return Err(Undetermined);\n+        }\n+\n+        // Check if one of glob imports can still define the name,\n+        // if it can then our \"no resolution\" result is not determined and can be invalidated.\n         for glob_import in module.globs.borrow().iter() {\n             if !self.is_accessible(glob_import.vis.get()) {\n                 continue\n@@ -258,6 +261,7 @@ impl<'a> Resolver<'a> {\n             }\n         }\n \n+        // No resolution and no one else can define the name - determinate error.\n         Err(Determined)\n     }\n "}]}