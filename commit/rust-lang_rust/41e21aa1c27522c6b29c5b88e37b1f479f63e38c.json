{"sha": "41e21aa1c27522c6b29c5b88e37b1f479f63e38c", "node_id": "C_kwDOAAsO6NoAKDQxZTIxYWExYzI3NTIyYzZiMjljNWI4OGUzN2IxZjQ3OWY2M2UzOGM", "commit": {"author": {"name": "Martin Habovstiak", "email": "martin.habovstiak@gmail.com", "date": "2021-09-13T13:44:27Z"}, "committer": {"name": "Martin Habovstiak", "email": "martin.habovstiak@gmail.com", "date": "2021-12-02T16:18:34Z"}, "message": "Implement write() method for Box<MaybeUninit<T>>\n\nThis adds method similar to `MaybeUninit::write` main difference being\nit returns owned `Box`. This can be used to elide copy from stack\nsafely, however it's not currently tested that the optimization actually\noccurs.\n\nAnalogous methods are not provided for `Rc` and `Arc` as those need to\nhandle the possibility of sharing. Some version of them may be added in\nthe future.\n\nThis was discussed in #63291 which this change extends.", "tree": {"sha": "3349d7ee63f707eed0a13a90b72261efc70b312c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3349d7ee63f707eed0a13a90b72261efc70b312c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41e21aa1c27522c6b29c5b88e37b1f479f63e38c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41e21aa1c27522c6b29c5b88e37b1f479f63e38c", "html_url": "https://github.com/rust-lang/rust/commit/41e21aa1c27522c6b29c5b88e37b1f479f63e38c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41e21aa1c27522c6b29c5b88e37b1f479f63e38c/comments", "author": {"login": "Kixunil", "id": 1178779, "node_id": "MDQ6VXNlcjExNzg3Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1178779?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kixunil", "html_url": "https://github.com/Kixunil", "followers_url": "https://api.github.com/users/Kixunil/followers", "following_url": "https://api.github.com/users/Kixunil/following{/other_user}", "gists_url": "https://api.github.com/users/Kixunil/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kixunil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kixunil/subscriptions", "organizations_url": "https://api.github.com/users/Kixunil/orgs", "repos_url": "https://api.github.com/users/Kixunil/repos", "events_url": "https://api.github.com/users/Kixunil/events{/privacy}", "received_events_url": "https://api.github.com/users/Kixunil/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kixunil", "id": 1178779, "node_id": "MDQ6VXNlcjExNzg3Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1178779?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kixunil", "html_url": "https://github.com/Kixunil", "followers_url": "https://api.github.com/users/Kixunil/followers", "following_url": "https://api.github.com/users/Kixunil/following{/other_user}", "gists_url": "https://api.github.com/users/Kixunil/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kixunil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kixunil/subscriptions", "organizations_url": "https://api.github.com/users/Kixunil/orgs", "repos_url": "https://api.github.com/users/Kixunil/repos", "events_url": "https://api.github.com/users/Kixunil/events{/privacy}", "received_events_url": "https://api.github.com/users/Kixunil/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18bb8c61a975fff6424cda831ace5b0404277145", "url": "https://api.github.com/repos/rust-lang/rust/commits/18bb8c61a975fff6424cda831ace5b0404277145", "html_url": "https://github.com/rust-lang/rust/commit/18bb8c61a975fff6424cda831ace5b0404277145"}], "stats": {"total": 42, "additions": 38, "deletions": 4}, "files": [{"sha": "2703af97a1be59ccd46b846f8228e6dbae461ad2", "filename": "compiler/rustc_data_structures/src/functor.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/41e21aa1c27522c6b29c5b88e37b1f479f63e38c/compiler%2Frustc_data_structures%2Fsrc%2Ffunctor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41e21aa1c27522c6b29c5b88e37b1f479f63e38c/compiler%2Frustc_data_structures%2Fsrc%2Ffunctor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ffunctor.rs?ref=41e21aa1c27522c6b29c5b88e37b1f479f63e38c", "patch": "@@ -31,11 +31,9 @@ impl<T> IdFunctor for Box<T> {\n             let value = raw.read();\n             // SAFETY: Converts `Box<T>` to `Box<MaybeUninit<T>>` which is the\n             // inverse of `Box::assume_init()` and should be safe.\n-            let mut raw: Box<mem::MaybeUninit<T>> = Box::from_raw(raw.cast());\n+            let raw: Box<mem::MaybeUninit<T>> = Box::from_raw(raw.cast());\n             // SAFETY: Write the mapped value back into the `Box`.\n-            raw.write(f(value)?);\n-            // SAFETY: We just initialized `raw`.\n-            raw.assume_init()\n+            Box::write(raw, f(value)?)\n         })\n     }\n }"}, {"sha": "0b72b3f0ee7b0ca2d3ecee28cc763658cbeeb3a6", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/41e21aa1c27522c6b29c5b88e37b1f479f63e38c/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41e21aa1c27522c6b29c5b88e37b1f479f63e38c/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=41e21aa1c27522c6b29c5b88e37b1f479f63e38c", "patch": "@@ -763,6 +763,42 @@ impl<T, A: Allocator> Box<mem::MaybeUninit<T>, A> {\n         let (raw, alloc) = Box::into_raw_with_allocator(self);\n         unsafe { Box::from_raw_in(raw as *mut T, alloc) }\n     }\n+\n+    /// Writes the value and converts to `Box<T, A>`.\n+    ///\n+    /// This method converts the box similarly to [`Box::assume_init`] but\n+    /// writes `value` into it before conversion thus guaranteeing safety.\n+    /// In some scenarios use of this method may improve performance because\n+    /// the compiler may be able to optimize copying from stack.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(new_uninit)]\n+    ///\n+    /// let big_box = Box::<[usize; 1024]>::new_uninit();\n+    ///\n+    /// let mut array = [0; 1024];\n+    /// for (i, place) in array.iter_mut().enumerate() {\n+    ///     *place = i;\n+    /// }\n+    ///\n+    /// // The optimizer may be able to elide this copy, so previous code writes\n+    /// // to heap directly.\n+    /// let big_box = Box::write(big_box, array);\n+    ///\n+    /// for (i, x) in big_box.iter().enumerate() {\n+    ///     assert_eq!(*x, i);\n+    /// }\n+    /// ```\n+    #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    #[inline]\n+    pub fn write(mut boxed: Self, value: T) -> Box<T, A> {\n+        unsafe {\n+            (*boxed).write(value);\n+            boxed.assume_init()\n+        }\n+    }\n }\n \n impl<T, A: Allocator> Box<[mem::MaybeUninit<T>], A> {"}]}