{"sha": "4dacf4f469de4fba4ac086f87c9263ff79a3bd13", "node_id": "C_kwDOAAsO6NoAKDRkYWNmNGY0NjlkZTRmYmE0YWMwODZmODdjOTI2M2ZmNzlhM2JkMTM", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-11-25T15:35:49Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-12-02T20:31:40Z"}, "message": "Use ocx.normalize in report_projection_error", "tree": {"sha": "13a7101c207663271b717ea9d04fef9d250b51b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13a7101c207663271b717ea9d04fef9d250b51b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4dacf4f469de4fba4ac086f87c9263ff79a3bd13", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmOKYK0ACgkQgTGiTgx5\n76+kuRAArkuH40Sqaw5T2Ye309lbbp6pWeRtKfZZjRjL1UJVB9CVuXZi9K2OgsAX\nGjEv6AMLDSIqS2H3t6afWntilb4fl/Kze+z56el8VK2jllRxPlvBXPDpYT1vsCtm\nc7Ldxtx878uqwVkj+ipCmM2ZaPMZoUnHEom6/ZE2jchuCJXWLUD9MwhYwN/rvLvm\ncCE+LLKWdvC5hiPJ2TCJzQu3MPbXfJ3d3pkJt+71SJHuV+eka6i/tvu0MwtdSeMe\nUOfIKOh7Kw6Vo2OpBjLuQGbmStIcDPo6K3CeNOx8uQ7xxG4nAJpJ4lob3hU+Z3RF\nV2GE31Z9RdMS4A+oOt1vzXjwuJKYW6qVPA/i9VGNGmUx5bInBKueQvkYajHpRZvi\nvACp+k5wnmshijwxFHKpshTygrY7flvlJlWmFfJFm31Y87jrQZk4QSr7UCs+Lz5l\nQ9f9gszJPAuhzMd7FqLQucEZ7AcyBdCKHokpWiZHQZ2I3hIVsXWbuXSD62rBuRx6\n5KQt929olicVqT5J+0H7eLm0LCEoz7jVW//mdfEVtU/tr/Wlk3RvHjhirlQZuyFf\neEaLuuiQeBSUdHUg6kzgub6MiXPxUoeamBemC2KGUqLOw0hVdlGEMEVhUon6UNsN\n77Di1kuU8ELDbu6a5qVdmkI7d25ULfsSgL1Du2+HXT8pC8Z05Yw=\n=Su5l\n-----END PGP SIGNATURE-----", "payload": "tree 13a7101c207663271b717ea9d04fef9d250b51b8\nparent 367ecffe5297260f11e71881125a5589c8cb5350\nauthor Santiago Pastorino <spastorino@gmail.com> 1669390549 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1670013100 -0300\n\nUse ocx.normalize in report_projection_error\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4dacf4f469de4fba4ac086f87c9263ff79a3bd13", "html_url": "https://github.com/rust-lang/rust/commit/4dacf4f469de4fba4ac086f87c9263ff79a3bd13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4dacf4f469de4fba4ac086f87c9263ff79a3bd13/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "367ecffe5297260f11e71881125a5589c8cb5350", "url": "https://api.github.com/repos/rust-lang/rust/commits/367ecffe5297260f11e71881125a5589c8cb5350", "html_url": "https://github.com/rust-lang/rust/commit/367ecffe5297260f11e71881125a5589c8cb5350"}], "stats": {"total": 61, "additions": 44, "deletions": 17}, "files": [{"sha": "c028e89e4ea2963f093b48240a8f98ca613199d3", "filename": "compiler/rustc_trait_selection/src/traits/engine.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4dacf4f469de4fba4ac086f87c9263ff79a3bd13/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dacf4f469de4fba4ac086f87c9263ff79a3bd13/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs?ref=4dacf4f469de4fba4ac086f87c9263ff79a3bd13", "patch": "@@ -112,6 +112,24 @@ impl<'a, 'tcx> ObligationCtxt<'a, 'tcx> {\n         self.register_infer_ok_obligations(infer_ok)\n     }\n \n+    /// Makes `expected <: actual`.\n+    pub fn eq_exp<T>(\n+        &self,\n+        cause: &ObligationCause<'tcx>,\n+        param_env: ty::ParamEnv<'tcx>,\n+        a_is_expected: bool,\n+        a: T,\n+        b: T,\n+    ) -> Result<(), TypeError<'tcx>>\n+    where\n+        T: ToTrace<'tcx>,\n+    {\n+        self.infcx\n+            .at(cause, param_env)\n+            .eq_exp(a_is_expected, a, b)\n+            .map(|infer_ok| self.register_infer_ok_obligations(infer_ok))\n+    }\n+\n     pub fn eq<T: ToTrace<'tcx>>(\n         &self,\n         cause: &ObligationCause<'tcx>,"}, {"sha": "203f6724cb25b07b6244b5cd81377117a8708b0e", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 26, "deletions": 17, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/4dacf4f469de4fba4ac086f87c9263ff79a3bd13/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dacf4f469de4fba4ac086f87c9263ff79a3bd13/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=4dacf4f469de4fba4ac086f87c9263ff79a3bd13", "patch": "@@ -1576,9 +1576,11 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             return;\n         }\n \n+        let mut values = None;\n+\n         self.probe(|_| {\n+            let ocx = ObligationCtxt::new_in_snapshot(self);\n             let mut err = error.err;\n-            let mut values = None;\n \n             // try to find the mismatched types to report the error with.\n             //\n@@ -1588,21 +1590,16 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             if let ty::PredicateKind::Clause(ty::Clause::Projection(data)) =\n                 bound_predicate.skip_binder()\n             {\n-                let mut selcx = SelectionContext::new(self);\n                 let data = self.replace_bound_vars_with_fresh_vars(\n                     obligation.cause.span,\n                     infer::LateBoundRegionConversionTime::HigherRankedType,\n                     bound_predicate.rebind(data),\n                 );\n-                let mut obligations = vec![];\n-                // FIXME(normalization): Change this to use `At::normalize`\n-                let normalized_ty = super::normalize_projection_type(\n-                    &mut selcx,\n+                let normalized_ty = ocx.normalize(\n+                    &obligation.cause,\n                     obligation.param_env,\n-                    data.projection_ty,\n-                    obligation.cause.clone(),\n-                    0,\n-                    &mut obligations,\n+                    self.tcx\n+                        .mk_projection(data.projection_ty.item_def_id, data.projection_ty.substs),\n                 );\n \n                 debug!(?obligation.cause, ?obligation.param_env);\n@@ -1618,19 +1615,31 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         | ObligationCauseCode::ObjectCastObligation(..)\n                         | ObligationCauseCode::OpaqueType\n                 );\n-                if let Err(new_err) = self.at(&obligation.cause, obligation.param_env).eq_exp(\n+                let expected_ty = data.term.ty().unwrap();\n+\n+                // constrain inference variables a bit more to nested obligations from normalize so\n+                // we can have more helpful errors.\n+                ocx.select_where_possible();\n+\n+                if let Err(new_err) = ocx.eq_exp(\n+                    &obligation.cause,\n+                    obligation.param_env,\n                     is_normalized_ty_expected,\n                     normalized_ty,\n-                    data.term,\n+                    expected_ty,\n                 ) {\n-                    values = Some((data, is_normalized_ty_expected, normalized_ty, data.term));\n+                    values = Some((data, is_normalized_ty_expected, normalized_ty, expected_ty));\n                     err = new_err;\n                 }\n             }\n \n             let msg = values\n                 .and_then(|(predicate, _, normalized_ty, expected_ty)| {\n-                    self.maybe_detailed_projection_msg(predicate, normalized_ty, expected_ty)\n+                    self.maybe_detailed_projection_msg(\n+                        predicate,\n+                        normalized_ty.into(),\n+                        expected_ty.into(),\n+                    )\n                 })\n                 .unwrap_or_else(|| format!(\"type mismatch resolving `{}`\", predicate));\n             let mut diag = struct_span_err!(self.tcx.sess, obligation.cause.span, E0271, \"{msg}\");\n@@ -1672,11 +1681,11 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 &mut diag,\n                 &obligation.cause,\n                 secondary_span,\n-                values.map(|(_, is_normalized_ty_expected, normalized_ty, term)| {\n+                values.map(|(_, is_normalized_ty_expected, normalized_ty, expected_ty)| {\n                     infer::ValuePairs::Terms(ExpectedFound::new(\n                         is_normalized_ty_expected,\n-                        normalized_ty,\n-                        term,\n+                        normalized_ty.into(),\n+                        expected_ty.into(),\n                     ))\n                 }),\n                 err,"}]}