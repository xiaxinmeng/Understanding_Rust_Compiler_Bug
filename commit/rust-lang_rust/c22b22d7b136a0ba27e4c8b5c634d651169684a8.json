{"sha": "c22b22d7b136a0ba27e4c8b5c634d651169684a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyMmIyMmQ3YjEzNmEwYmEyN2U0YzhiNWM2MzRkNjUxMTY5Njg0YTg=", "commit": {"author": {"name": "Mathijs van de Nes", "email": "git@mathijs.vd-nes.nl", "date": "2014-07-10T09:51:19Z"}, "committer": {"name": "Mathijs van de Nes", "email": "git@mathijs.vd-nes.nl", "date": "2014-07-10T09:55:04Z"}, "message": "Mistake in AtomicBool spinlock example\n\nThe current example of a spinlock was not correct. The lock is actually acquired\nwhen old == result. So we only need to deschedule when this is not the case.", "tree": {"sha": "02c7aed8f7c8b03bdcab0b8492b4a02b71567c67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02c7aed8f7c8b03bdcab0b8492b4a02b71567c67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c22b22d7b136a0ba27e4c8b5c634d651169684a8", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c22b22d7b136a0ba27e4c8b5c634d651169684a8", "html_url": "https://github.com/rust-lang/rust/commit/c22b22d7b136a0ba27e4c8b5c634d651169684a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c22b22d7b136a0ba27e4c8b5c634d651169684a8/comments", "author": {"login": "mvdnes", "id": 1009841, "node_id": "MDQ6VXNlcjEwMDk4NDE=", "avatar_url": "https://avatars.githubusercontent.com/u/1009841?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mvdnes", "html_url": "https://github.com/mvdnes", "followers_url": "https://api.github.com/users/mvdnes/followers", "following_url": "https://api.github.com/users/mvdnes/following{/other_user}", "gists_url": "https://api.github.com/users/mvdnes/gists{/gist_id}", "starred_url": "https://api.github.com/users/mvdnes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mvdnes/subscriptions", "organizations_url": "https://api.github.com/users/mvdnes/orgs", "repos_url": "https://api.github.com/users/mvdnes/repos", "events_url": "https://api.github.com/users/mvdnes/events{/privacy}", "received_events_url": "https://api.github.com/users/mvdnes/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mvdnes", "id": 1009841, "node_id": "MDQ6VXNlcjEwMDk4NDE=", "avatar_url": "https://avatars.githubusercontent.com/u/1009841?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mvdnes", "html_url": "https://github.com/mvdnes", "followers_url": "https://api.github.com/users/mvdnes/followers", "following_url": "https://api.github.com/users/mvdnes/following{/other_user}", "gists_url": "https://api.github.com/users/mvdnes/gists{/gist_id}", "starred_url": "https://api.github.com/users/mvdnes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mvdnes/subscriptions", "organizations_url": "https://api.github.com/users/mvdnes/orgs", "repos_url": "https://api.github.com/users/mvdnes/repos", "events_url": "https://api.github.com/users/mvdnes/events{/privacy}", "received_events_url": "https://api.github.com/users/mvdnes/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6372915a78a12adfbc327aba87225988ae03e7f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/6372915a78a12adfbc327aba87225988ae03e7f9", "html_url": "https://github.com/rust-lang/rust/commit/6372915a78a12adfbc327aba87225988ae03e7f9"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "e022fa2c370f2b8aeb69d3a99f3419c6199aee24", "filename": "src/libcore/atomics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c22b22d7b136a0ba27e4c8b5c634d651169684a8/src%2Flibcore%2Fatomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c22b22d7b136a0ba27e4c8b5c634d651169684a8/src%2Flibcore%2Fatomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fatomics.rs?ref=c22b22d7b136a0ba27e4c8b5c634d651169684a8", "patch": "@@ -141,7 +141,7 @@ impl AtomicBool {\n     ///\n     /// fn with_lock(spinlock: &Arc<AtomicBool>, f: || -> ()) {\n     ///     // CAS loop until we are able to replace `false` with `true`\n-    ///     while spinlock.compare_and_swap(false, true, SeqCst) == false {\n+    ///     while spinlock.compare_and_swap(false, true, SeqCst) != false {\n     ///         // Since tasks may not be preemptive (if they are green threads)\n     ///         // yield to the scheduler to let the other task run. Low level\n     ///         // concurrent code needs to take into account Rust's two threading"}]}