{"sha": "81ee7f752e8766102d1ce57b8caea0bbdf4929d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxZWU3Zjc1MmU4NzY2MTAyZDFjZTU3YjhjYWVhMGJiZGY0OTI5ZDg=", "commit": {"author": {"name": "Luis de Bethencourt", "email": "luisbg@osg.samsung.com", "date": "2017-05-11T14:55:55Z"}, "committer": {"name": "Luis de Bethencourt", "email": "luisbg@osg.samsung.com", "date": "2017-05-11T15:22:32Z"}, "message": "clean tests/ui/transmute.rs\n\nCleaning the empty lines for clarity.", "tree": {"sha": "76cd2c3fc0283d7001d9e397563b8c78898257f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76cd2c3fc0283d7001d9e397563b8c78898257f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81ee7f752e8766102d1ce57b8caea0bbdf4929d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81ee7f752e8766102d1ce57b8caea0bbdf4929d8", "html_url": "https://github.com/rust-lang/rust/commit/81ee7f752e8766102d1ce57b8caea0bbdf4929d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81ee7f752e8766102d1ce57b8caea0bbdf4929d8/comments", "author": {"login": "luisbg", "id": 303663, "node_id": "MDQ6VXNlcjMwMzY2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/303663?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luisbg", "html_url": "https://github.com/luisbg", "followers_url": "https://api.github.com/users/luisbg/followers", "following_url": "https://api.github.com/users/luisbg/following{/other_user}", "gists_url": "https://api.github.com/users/luisbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/luisbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luisbg/subscriptions", "organizations_url": "https://api.github.com/users/luisbg/orgs", "repos_url": "https://api.github.com/users/luisbg/repos", "events_url": "https://api.github.com/users/luisbg/events{/privacy}", "received_events_url": "https://api.github.com/users/luisbg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luisbg", "id": 303663, "node_id": "MDQ6VXNlcjMwMzY2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/303663?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luisbg", "html_url": "https://github.com/luisbg", "followers_url": "https://api.github.com/users/luisbg/followers", "following_url": "https://api.github.com/users/luisbg/following{/other_user}", "gists_url": "https://api.github.com/users/luisbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/luisbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luisbg/subscriptions", "organizations_url": "https://api.github.com/users/luisbg/orgs", "repos_url": "https://api.github.com/users/luisbg/repos", "events_url": "https://api.github.com/users/luisbg/events{/privacy}", "received_events_url": "https://api.github.com/users/luisbg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24324f84d85dce08bb50448a1dfd85932ed08b80", "url": "https://api.github.com/repos/rust-lang/rust/commits/24324f84d85dce08bb50448a1dfd85932ed08b80", "html_url": "https://github.com/rust-lang/rust/commit/24324f84d85dce08bb50448a1dfd85932ed08b80"}], "stats": {"total": 217, "additions": 79, "deletions": 138}, "files": [{"sha": "b70b846d32dc723b588619b806fdb5caddf84da7", "filename": "tests/ui/transmute.rs", "status": "modified", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/81ee7f752e8766102d1ce57b8caea0bbdf4929d8/tests%2Fui%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee7f752e8766102d1ce57b8caea0bbdf4929d8/tests%2Fui%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute.rs?ref=81ee7f752e8766102d1ce57b8caea0bbdf4929d8", "patch": "@@ -21,67 +21,36 @@ fn my_vec() -> MyVec<i32> {\n unsafe fn _generic<'a, T, U: 'a>(t: &'a T) {\n     let _: &'a T = core::intrinsics::transmute(t);\n \n-\n     let _: &'a U = core::intrinsics::transmute(t);\n \n     let _: *const T = core::intrinsics::transmute(t);\n \n-\n-\n-\n     let _: *mut T = core::intrinsics::transmute(t);\n \n-\n-\n-\n     let _: *const U = core::intrinsics::transmute(t);\n-\n-\n-\n }\n \n #[deny(transmute_ptr_to_ref)]\n unsafe fn _ptr_to_ref<T, U>(p: *const T, m: *mut T, o: *const U, om: *mut U) {\n     let _: &T = std::mem::transmute(p);\n-\n-\n-\n     let _: &T = &*p;\n \n     let _: &mut T = std::mem::transmute(m);\n-\n-\n-\n     let _: &mut T = &mut *m;\n \n     let _: &T = std::mem::transmute(m);\n-\n-\n-\n     let _: &T = &*m;\n \n     let _: &mut T = std::mem::transmute(p as *mut T);\n-\n-\n-\n     let _ = &mut *(p as *mut T);\n \n     let _: &T = std::mem::transmute(o);\n-\n-\n-\n     let _: &T = &*(o as *const T);\n \n     let _: &mut T = std::mem::transmute(om);\n-\n-\n-\n     let _: &mut T = &mut *(om as *mut T);\n \n     let _: &T = std::mem::transmute(om);\n-\n-\n-\n     let _: &T = &*(om as *const T);\n }\n \n@@ -94,40 +63,26 @@ fn issue1231() {\n     let raw = 42 as *const i32;\n     let _: &Foo<u8> = unsafe { std::mem::transmute::<_, &Foo<_>>(raw) };\n \n-\n-\n-\n     let _: &Foo<&u8> = unsafe { std::mem::transmute::<_, &Foo<&_>>(raw) };\n \n-\n-\n-\n     type Bar<'a> = &'a u8;\n     let raw = 42 as *const i32;\n     unsafe { std::mem::transmute::<_, Bar>(raw) };\n-\n-\n-\n }\n \n #[deny(useless_transmute)]\n fn useless() {\n     unsafe {\n         let _: Vec<i32> = core::intrinsics::transmute(my_vec());\n \n-\n         let _: Vec<i32> = core::mem::transmute(my_vec());\n \n-\n         let _: Vec<i32> = std::intrinsics::transmute(my_vec());\n \n-\n         let _: Vec<i32> = std::mem::transmute(my_vec());\n \n-\n         let _: Vec<i32> = my_transmute(my_vec());\n \n-\n         let _: Vec<u32> = core::intrinsics::transmute(my_vec());\n         let _: Vec<u32> = core::mem::transmute(my_vec());\n         let _: Vec<u32> = std::intrinsics::transmute(my_vec());\n@@ -136,14 +91,10 @@ fn useless() {\n \n         let _: *const usize = std::mem::transmute(5_isize);\n \n-\n-\n         let _  = 5_isize as *const usize;\n \n         let _: *const usize = std::mem::transmute(1+1usize);\n \n-\n-\n         let _  = (1+1_usize) as *const usize;\n     }\n }\n@@ -159,15 +110,11 @@ fn crosspointer() {\n     unsafe {\n         let _: Usize = core::intrinsics::transmute(int_const_ptr);\n \n-\n         let _: Usize = core::intrinsics::transmute(int_mut_ptr);\n \n-\n         let _: *const Usize = core::intrinsics::transmute(my_int());\n \n-\n         let _: *mut Usize = core::intrinsics::transmute(my_int());\n-\n     }\n }\n "}, {"sha": "b2bce16abe00b32dde3e15f9641006c445dbe510", "filename": "tests/ui/transmute.stderr", "status": "modified", "additions": 77, "deletions": 77, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/81ee7f752e8766102d1ce57b8caea0bbdf4929d8/tests%2Fui%2Ftransmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81ee7f752e8766102d1ce57b8caea0bbdf4929d8/tests%2Fui%2Ftransmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute.stderr?ref=81ee7f752e8766102d1ce57b8caea0bbdf4929d8", "patch": "@@ -11,171 +11,171 @@ note: lint level defined here\n    |        ^^^^^^^^^^^^^^^^^\n \n error: transmute from a reference to a pointer\n-  --> $DIR/transmute.rs:27:23\n+  --> $DIR/transmute.rs:26:23\n    |\n-27 |     let _: *const T = core::intrinsics::transmute(t);\n+26 |     let _: *const T = core::intrinsics::transmute(t);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `t as *const T`\n \n error: transmute from a reference to a pointer\n-  --> $DIR/transmute.rs:32:21\n+  --> $DIR/transmute.rs:28:21\n    |\n-32 |     let _: *mut T = core::intrinsics::transmute(t);\n+28 |     let _: *mut T = core::intrinsics::transmute(t);\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `t as *const T as *mut T`\n \n error: transmute from a reference to a pointer\n-  --> $DIR/transmute.rs:37:23\n+  --> $DIR/transmute.rs:30:23\n    |\n-37 |     let _: *const U = core::intrinsics::transmute(t);\n+30 |     let _: *const U = core::intrinsics::transmute(t);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `t as *const T as *const U`\n \n error: transmute from a pointer type (`*const T`) to a reference type (`&T`)\n-  --> $DIR/transmute.rs:45:17\n+  --> $DIR/transmute.rs:35:17\n    |\n-45 |     let _: &T = std::mem::transmute(p);\n+35 |     let _: &T = std::mem::transmute(p);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^ help: try `&*p`\n    |\n note: lint level defined here\n-  --> $DIR/transmute.rs:43:8\n+  --> $DIR/transmute.rs:33:8\n    |\n-43 | #[deny(transmute_ptr_to_ref)]\n+33 | #[deny(transmute_ptr_to_ref)]\n    |        ^^^^^^^^^^^^^^^^^^^^\n \n error: transmute from a pointer type (`*mut T`) to a reference type (`&mut T`)\n-  --> $DIR/transmute.rs:51:21\n+  --> $DIR/transmute.rs:38:21\n    |\n-51 |     let _: &mut T = std::mem::transmute(m);\n+38 |     let _: &mut T = std::mem::transmute(m);\n    |                     ^^^^^^^^^^^^^^^^^^^^^^ help: try `&mut *m`\n \n error: transmute from a pointer type (`*mut T`) to a reference type (`&T`)\n-  --> $DIR/transmute.rs:57:17\n+  --> $DIR/transmute.rs:41:17\n    |\n-57 |     let _: &T = std::mem::transmute(m);\n+41 |     let _: &T = std::mem::transmute(m);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^ help: try `&*m`\n \n error: transmute from a pointer type (`*mut T`) to a reference type (`&mut T`)\n-  --> $DIR/transmute.rs:63:21\n+  --> $DIR/transmute.rs:44:21\n    |\n-63 |     let _: &mut T = std::mem::transmute(p as *mut T);\n+44 |     let _: &mut T = std::mem::transmute(p as *mut T);\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `&mut *(p as *mut T)`\n \n error: transmute from a pointer type (`*const U`) to a reference type (`&T`)\n-  --> $DIR/transmute.rs:69:17\n+  --> $DIR/transmute.rs:47:17\n    |\n-69 |     let _: &T = std::mem::transmute(o);\n+47 |     let _: &T = std::mem::transmute(o);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^ help: try `&*(o as *const T)`\n \n error: transmute from a pointer type (`*mut U`) to a reference type (`&mut T`)\n-  --> $DIR/transmute.rs:75:21\n+  --> $DIR/transmute.rs:50:21\n    |\n-75 |     let _: &mut T = std::mem::transmute(om);\n+50 |     let _: &mut T = std::mem::transmute(om);\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^ help: try `&mut *(om as *mut T)`\n \n error: transmute from a pointer type (`*mut U`) to a reference type (`&T`)\n-  --> $DIR/transmute.rs:81:17\n+  --> $DIR/transmute.rs:53:17\n    |\n-81 |     let _: &T = std::mem::transmute(om);\n+53 |     let _: &T = std::mem::transmute(om);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^ help: try `&*(om as *const T)`\n \n error: transmute from a pointer type (`*const i32`) to a reference type (`&issue1231::Foo<'_, u8>`)\n-  --> $DIR/transmute.rs:95:32\n+  --> $DIR/transmute.rs:64:32\n    |\n-95 |     let _: &Foo<u8> = unsafe { std::mem::transmute::<_, &Foo<_>>(raw) };\n+64 |     let _: &Foo<u8> = unsafe { std::mem::transmute::<_, &Foo<_>>(raw) };\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `&*(raw as *const Foo<_>)`\n    |\n note: lint level defined here\n-  --> $DIR/transmute.rs:88:8\n+  --> $DIR/transmute.rs:57:8\n    |\n-88 | #[deny(transmute_ptr_to_ref)]\n+57 | #[deny(transmute_ptr_to_ref)]\n    |        ^^^^^^^^^^^^^^^^^^^^\n \n error: transmute from a pointer type (`*const i32`) to a reference type (`&issue1231::Foo<'_, &u8>`)\n-   --> $DIR/transmute.rs:100:33\n-    |\n-100 |     let _: &Foo<&u8> = unsafe { std::mem::transmute::<_, &Foo<&_>>(raw) };\n-    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `&*(raw as *const Foo<&_>)`\n+  --> $DIR/transmute.rs:66:33\n+   |\n+66 |     let _: &Foo<&u8> = unsafe { std::mem::transmute::<_, &Foo<&_>>(raw) };\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `&*(raw as *const Foo<&_>)`\n \n error: transmute from a pointer type (`*const i32`) to a reference type (`&u8`)\n-   --> $DIR/transmute.rs:107:14\n-    |\n-107 |     unsafe { std::mem::transmute::<_, Bar>(raw) };\n-    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `&*(raw as *const u8)`\n+  --> $DIR/transmute.rs:70:14\n+   |\n+70 |     unsafe { std::mem::transmute::<_, Bar>(raw) };\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `&*(raw as *const u8)`\n \n error: transmute from a type (`std::vec::Vec<i32>`) to itself\n-   --> $DIR/transmute.rs:116:27\n-    |\n-116 |         let _: Vec<i32> = core::intrinsics::transmute(my_vec());\n-    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-    |\n+  --> $DIR/transmute.rs:76:27\n+   |\n+76 |         let _: Vec<i32> = core::intrinsics::transmute(my_vec());\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n note: lint level defined here\n-   --> $DIR/transmute.rs:113:8\n-    |\n-113 | #[deny(useless_transmute)]\n-    |        ^^^^^^^^^^^^^^^^^\n+  --> $DIR/transmute.rs:73:8\n+   |\n+73 | #[deny(useless_transmute)]\n+   |        ^^^^^^^^^^^^^^^^^\n \n error: transmute from a type (`std::vec::Vec<i32>`) to itself\n-   --> $DIR/transmute.rs:119:27\n-    |\n-119 |         let _: Vec<i32> = core::mem::transmute(my_vec());\n-    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+  --> $DIR/transmute.rs:78:27\n+   |\n+78 |         let _: Vec<i32> = core::mem::transmute(my_vec());\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: transmute from a type (`std::vec::Vec<i32>`) to itself\n-   --> $DIR/transmute.rs:122:27\n-    |\n-122 |         let _: Vec<i32> = std::intrinsics::transmute(my_vec());\n-    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+  --> $DIR/transmute.rs:80:27\n+   |\n+80 |         let _: Vec<i32> = std::intrinsics::transmute(my_vec());\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: transmute from a type (`std::vec::Vec<i32>`) to itself\n-   --> $DIR/transmute.rs:125:27\n-    |\n-125 |         let _: Vec<i32> = std::mem::transmute(my_vec());\n-    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+  --> $DIR/transmute.rs:82:27\n+   |\n+82 |         let _: Vec<i32> = std::mem::transmute(my_vec());\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: transmute from a type (`std::vec::Vec<i32>`) to itself\n-   --> $DIR/transmute.rs:128:27\n-    |\n-128 |         let _: Vec<i32> = my_transmute(my_vec());\n-    |                           ^^^^^^^^^^^^^^^^^^^^^^\n+  --> $DIR/transmute.rs:84:27\n+   |\n+84 |         let _: Vec<i32> = my_transmute(my_vec());\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^\n \n error: transmute from an integer to a pointer\n-   --> $DIR/transmute.rs:137:31\n-    |\n-137 |         let _: *const usize = std::mem::transmute(5_isize);\n-    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `5_isize as *const usize`\n+  --> $DIR/transmute.rs:92:31\n+   |\n+92 |         let _: *const usize = std::mem::transmute(5_isize);\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `5_isize as *const usize`\n \n error: transmute from an integer to a pointer\n-   --> $DIR/transmute.rs:143:31\n-    |\n-143 |         let _: *const usize = std::mem::transmute(1+1usize);\n-    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `(1+1usize) as *const usize`\n+  --> $DIR/transmute.rs:96:31\n+   |\n+96 |         let _: *const usize = std::mem::transmute(1+1usize);\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `(1+1usize) as *const usize`\n \n error: transmute from a type (`*const Usize`) to the type that it points to (`Usize`)\n-   --> $DIR/transmute.rs:160:24\n+   --> $DIR/transmute.rs:111:24\n     |\n-160 |         let _: Usize = core::intrinsics::transmute(int_const_ptr);\n+111 |         let _: Usize = core::intrinsics::transmute(int_const_ptr);\n     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n note: lint level defined here\n-   --> $DIR/transmute.rs:153:8\n+   --> $DIR/transmute.rs:104:8\n     |\n-153 | #[deny(crosspointer_transmute)]\n+104 | #[deny(crosspointer_transmute)]\n     |        ^^^^^^^^^^^^^^^^^^^^^^\n \n error: transmute from a type (`*mut Usize`) to the type that it points to (`Usize`)\n-   --> $DIR/transmute.rs:163:24\n+   --> $DIR/transmute.rs:113:24\n     |\n-163 |         let _: Usize = core::intrinsics::transmute(int_mut_ptr);\n+113 |         let _: Usize = core::intrinsics::transmute(int_mut_ptr);\n     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: transmute from a type (`Usize`) to a pointer to that type (`*const Usize`)\n-   --> $DIR/transmute.rs:166:31\n+   --> $DIR/transmute.rs:115:31\n     |\n-166 |         let _: *const Usize = core::intrinsics::transmute(my_int());\n+115 |         let _: *const Usize = core::intrinsics::transmute(my_int());\n     |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: transmute from a type (`Usize`) to a pointer to that type (`*mut Usize`)\n-   --> $DIR/transmute.rs:169:29\n+   --> $DIR/transmute.rs:117:29\n     |\n-169 |         let _: *mut Usize = core::intrinsics::transmute(my_int());\n+117 |         let _: *mut Usize = core::intrinsics::transmute(my_int());\n     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 25 previous errors"}, {"sha": "f391b728ec5ee58e775aca6b7c6ee78fba02d10b", "filename": "tests/ui/transmute_32bit.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81ee7f752e8766102d1ce57b8caea0bbdf4929d8/tests%2Fui%2Ftransmute_32bit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee7f752e8766102d1ce57b8caea0bbdf4929d8/tests%2Fui%2Ftransmute_32bit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_32bit.rs?ref=81ee7f752e8766102d1ce57b8caea0bbdf4929d8", "patch": "@@ -7,14 +7,10 @@ fn main() {\n     unsafe {\n         let _: *const usize = std::mem::transmute(6.0f32);\n \n-\n         let _: *mut usize = std::mem::transmute(6.0f32);\n \n-\n         let _: *const usize = std::mem::transmute('x');\n \n-\n         let _: *mut usize = std::mem::transmute('x');\n-\n     }\n }"}, {"sha": "4caa9d1f30583368d1351ca7bc5a3d5e7dff72d8", "filename": "tests/ui/transmute_64bit.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81ee7f752e8766102d1ce57b8caea0bbdf4929d8/tests%2Fui%2Ftransmute_64bit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee7f752e8766102d1ce57b8caea0bbdf4929d8/tests%2Fui%2Ftransmute_64bit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_64bit.rs?ref=81ee7f752e8766102d1ce57b8caea0bbdf4929d8", "patch": "@@ -8,8 +8,6 @@ fn main() {\n     unsafe {\n         let _: *const usize = std::mem::transmute(6.0f64);\n \n-\n         let _: *mut usize = std::mem::transmute(6.0f64);\n-\n     }\n }"}, {"sha": "3d06348b147319e5358382edfae4260db0534244", "filename": "tests/ui/transmute_64bit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81ee7f752e8766102d1ce57b8caea0bbdf4929d8/tests%2Fui%2Ftransmute_64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81ee7f752e8766102d1ce57b8caea0bbdf4929d8/tests%2Fui%2Ftransmute_64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_64bit.stderr?ref=81ee7f752e8766102d1ce57b8caea0bbdf4929d8", "patch": "@@ -11,9 +11,9 @@ note: lint level defined here\n   |        ^^^^^^^^^^^^^^^\n \n error: transmute from a `f64` to a pointer\n-  --> $DIR/transmute_64bit.rs:12:29\n+  --> $DIR/transmute_64bit.rs:11:29\n    |\n-12 |         let _: *mut usize = std::mem::transmute(6.0f64);\n+11 |         let _: *mut usize = std::mem::transmute(6.0f64);\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors"}]}