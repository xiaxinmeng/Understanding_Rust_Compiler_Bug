{"sha": "d6077f895aa805394c0371365d4bf0f1c368dc02", "node_id": "C_kwDOAAsO6NoAKGQ2MDc3Zjg5NWFhODA1Mzk0YzAzNzEzNjVkNGJmMGYxYzM2OGRjMDI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-02-23T05:18:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-23T05:18:07Z"}, "message": "Rollup merge of #108350 - compiler-errors:assoc-type-bound-dogfooding, r=oli-obk\n\nUse associated type bounds in some places in the compiler\n\nUse associated type bounds for some nested `impl Trait<Assoc = impl Trait2>` cases. I'm generally keen to introduce new lang features that are more mature into the compiler, but maybe let's see what others think?\n\nSide-note: I was surprised that the only use-cases of nested impl trait in the compiler are just iterator related?!", "tree": {"sha": "86529239bd46414d9cdc56b018dea3818e1060d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86529239bd46414d9cdc56b018dea3818e1060d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6077f895aa805394c0371365d4bf0f1c368dc02", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj9vcPCRBK7hj4Ov3rIwAA9ykIAHdYYRCQVjua/YM++WuOppIr\ncLxQC9Z/JS796nUAuqBEyPEnSGgDaZ254K0V6/Mabc8u5/y+htiRx/tKab3APy7r\nDbQDSMGVl/36DEg0IYFvz2gqVL+ulg3xBtJEECBgSuSx+Pob5sSKxRyP7CBvyWeW\nC+hCXS7kXE5u6MZxq7Z6sTBsN1e6amVWuT0XauFL9byXma1h8mM/armyPCq/aD6T\n4mywAixZTQK58Aqw6bAR7Qo6AIfd2s748C6i5Px2wNlQB1Xd6QEwM6zTcWxCvyDk\nXizkNAjXoMJZx3l6kZD4wCwjr8Z1RkDloEZWT9HOswNz0pmw8eUoRfLhzwg1LyM=\n=Ca2j\n-----END PGP SIGNATURE-----\n", "payload": "tree 86529239bd46414d9cdc56b018dea3818e1060d2\nparent 2011ced333fb800d7101568a3f1588572b77ba19\nparent 729cd55688f0c7e39087b934f1d733813bf0a71a\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1677129487 +0100\ncommitter GitHub <noreply@github.com> 1677129487 +0100\n\nRollup merge of #108350 - compiler-errors:assoc-type-bound-dogfooding, r=oli-obk\n\nUse associated type bounds in some places in the compiler\n\nUse associated type bounds for some nested `impl Trait<Assoc = impl Trait2>` cases. I'm generally keen to introduce new lang features that are more mature into the compiler, but maybe let's see what others think?\n\nSide-note: I was surprised that the only use-cases of nested impl trait in the compiler are just iterator related?!\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6077f895aa805394c0371365d4bf0f1c368dc02", "html_url": "https://github.com/rust-lang/rust/commit/d6077f895aa805394c0371365d4bf0f1c368dc02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6077f895aa805394c0371365d4bf0f1c368dc02/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2011ced333fb800d7101568a3f1588572b77ba19", "url": "https://api.github.com/repos/rust-lang/rust/commits/2011ced333fb800d7101568a3f1588572b77ba19", "html_url": "https://github.com/rust-lang/rust/commit/2011ced333fb800d7101568a3f1588572b77ba19"}, {"sha": "729cd55688f0c7e39087b934f1d733813bf0a71a", "url": "https://api.github.com/repos/rust-lang/rust/commits/729cd55688f0c7e39087b934f1d733813bf0a71a", "html_url": "https://github.com/rust-lang/rust/commit/729cd55688f0c7e39087b934f1d733813bf0a71a"}], "stats": {"total": 63, "additions": 22, "deletions": 41}, "files": [{"sha": "18d7bde60d789236afa45cee8b3c12a158a722f5", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d6077f895aa805394c0371365d4bf0f1c368dc02/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6077f895aa805394c0371365d4bf0f1c368dc02/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=d6077f895aa805394c0371365d4bf0f1c368dc02", "patch": "@@ -1,6 +1,7 @@\n //! This query borrow-checks the MIR to (further) ensure it is not broken.\n \n #![allow(rustc::potential_query_instability)]\n+#![feature(associated_type_bounds)]\n #![feature(box_patterns)]\n #![feature(let_chains)]\n #![feature(min_specialization)]"}, {"sha": "b27d5d20532135d845a43e830a8d52c01ed3a3bf", "filename": "compiler/rustc_borrowck/src/type_check/canonical.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6077f895aa805394c0371365d4bf0f1c368dc02/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6077f895aa805394c0371365d4bf0f1c368dc02/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs?ref=d6077f895aa805394c0371365d4bf0f1c368dc02", "patch": "@@ -117,7 +117,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n \n     pub(super) fn prove_predicates(\n         &mut self,\n-        predicates: impl IntoIterator<Item = impl ToPredicate<'tcx> + std::fmt::Debug>,\n+        predicates: impl IntoIterator<Item: ToPredicate<'tcx> + std::fmt::Debug>,\n         locations: Locations,\n         category: ConstraintCategory<'tcx>,\n     ) {"}, {"sha": "33292e871b11cdb0b52593d86f4cc94802c43567", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d6077f895aa805394c0371365d4bf0f1c368dc02/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6077f895aa805394c0371365d4bf0f1c368dc02/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=d6077f895aa805394c0371365d4bf0f1c368dc02", "patch": "@@ -478,10 +478,7 @@ impl<'infcx, 'tcx> CombineFields<'infcx, 'tcx> {\n         self.obligations.extend(obligations.into_iter());\n     }\n \n-    pub fn register_predicates(\n-        &mut self,\n-        obligations: impl IntoIterator<Item = impl ToPredicate<'tcx>>,\n-    ) {\n+    pub fn register_predicates(&mut self, obligations: impl IntoIterator<Item: ToPredicate<'tcx>>) {\n         self.obligations.extend(obligations.into_iter().map(|to_pred| {\n             Obligation::new(self.infcx.tcx, self.trace.cause.clone(), self.param_env, to_pred)\n         }))\n@@ -814,10 +811,7 @@ pub trait ObligationEmittingRelation<'tcx>: TypeRelation<'tcx> {\n     /// Register predicates that must hold in order for this relation to hold. Uses\n     /// a default obligation cause, [`ObligationEmittingRelation::register_obligations`] should\n     /// be used if control over the obligaton causes is required.\n-    fn register_predicates(\n-        &mut self,\n-        obligations: impl IntoIterator<Item = impl ToPredicate<'tcx>>,\n-    );\n+    fn register_predicates(&mut self, obligations: impl IntoIterator<Item: ToPredicate<'tcx>>);\n \n     /// Register an obligation that both constants must be equal to each other.\n     ///"}, {"sha": "54a62326ef7bdce1107032e67166fb08bba3b5cd", "filename": "compiler/rustc_infer/src/infer/equate.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d6077f895aa805394c0371365d4bf0f1c368dc02/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6077f895aa805394c0371365d4bf0f1c368dc02/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs?ref=d6077f895aa805394c0371365d4bf0f1c368dc02", "patch": "@@ -201,10 +201,7 @@ impl<'tcx> TypeRelation<'tcx> for Equate<'_, '_, 'tcx> {\n }\n \n impl<'tcx> ObligationEmittingRelation<'tcx> for Equate<'_, '_, 'tcx> {\n-    fn register_predicates(\n-        &mut self,\n-        obligations: impl IntoIterator<Item = impl ty::ToPredicate<'tcx>>,\n-    ) {\n+    fn register_predicates(&mut self, obligations: impl IntoIterator<Item: ty::ToPredicate<'tcx>>) {\n         self.fields.register_predicates(obligations);\n     }\n "}, {"sha": "49df393d83b3efec5418086a592a121524a8894c", "filename": "compiler/rustc_infer/src/infer/glb.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d6077f895aa805394c0371365d4bf0f1c368dc02/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6077f895aa805394c0371365d4bf0f1c368dc02/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fglb.rs?ref=d6077f895aa805394c0371365d4bf0f1c368dc02", "patch": "@@ -148,10 +148,7 @@ impl<'combine, 'infcx, 'tcx> LatticeDir<'infcx, 'tcx> for Glb<'combine, 'infcx,\n }\n \n impl<'tcx> ObligationEmittingRelation<'tcx> for Glb<'_, '_, 'tcx> {\n-    fn register_predicates(\n-        &mut self,\n-        obligations: impl IntoIterator<Item = impl ty::ToPredicate<'tcx>>,\n-    ) {\n+    fn register_predicates(&mut self, obligations: impl IntoIterator<Item: ty::ToPredicate<'tcx>>) {\n         self.fields.register_predicates(obligations);\n     }\n "}, {"sha": "c871ccb21f8de6a3a4d1790d9e64f04f9c6a67a9", "filename": "compiler/rustc_infer/src/infer/lub.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d6077f895aa805394c0371365d4bf0f1c368dc02/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6077f895aa805394c0371365d4bf0f1c368dc02/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flub.rs?ref=d6077f895aa805394c0371365d4bf0f1c368dc02", "patch": "@@ -148,10 +148,7 @@ impl<'combine, 'infcx, 'tcx> LatticeDir<'infcx, 'tcx> for Lub<'combine, 'infcx,\n }\n \n impl<'tcx> ObligationEmittingRelation<'tcx> for Lub<'_, '_, 'tcx> {\n-    fn register_predicates(\n-        &mut self,\n-        obligations: impl IntoIterator<Item = impl ty::ToPredicate<'tcx>>,\n-    ) {\n+    fn register_predicates(&mut self, obligations: impl IntoIterator<Item: ty::ToPredicate<'tcx>>) {\n         self.fields.register_predicates(obligations);\n     }\n "}, {"sha": "6e413a7f41287a273f64d974c682a684cb2954d3", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d6077f895aa805394c0371365d4bf0f1c368dc02/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6077f895aa805394c0371365d4bf0f1c368dc02/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=d6077f895aa805394c0371365d4bf0f1c368dc02", "patch": "@@ -763,10 +763,7 @@ impl<'tcx, D> ObligationEmittingRelation<'tcx> for TypeRelating<'_, 'tcx, D>\n where\n     D: TypeRelatingDelegate<'tcx>,\n {\n-    fn register_predicates(\n-        &mut self,\n-        obligations: impl IntoIterator<Item = impl ty::ToPredicate<'tcx>>,\n-    ) {\n+    fn register_predicates(&mut self, obligations: impl IntoIterator<Item: ty::ToPredicate<'tcx>>) {\n         self.delegate.register_obligations(\n             obligations\n                 .into_iter()"}, {"sha": "4c003789a4ebe9aedb1d996118da37cc1c20347e", "filename": "compiler/rustc_infer/src/infer/sub.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d6077f895aa805394c0371365d4bf0f1c368dc02/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6077f895aa805394c0371365d4bf0f1c368dc02/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs?ref=d6077f895aa805394c0371365d4bf0f1c368dc02", "patch": "@@ -228,10 +228,7 @@ impl<'tcx> TypeRelation<'tcx> for Sub<'_, '_, 'tcx> {\n }\n \n impl<'tcx> ObligationEmittingRelation<'tcx> for Sub<'_, '_, 'tcx> {\n-    fn register_predicates(\n-        &mut self,\n-        obligations: impl IntoIterator<Item = impl ty::ToPredicate<'tcx>>,\n-    ) {\n+    fn register_predicates(&mut self, obligations: impl IntoIterator<Item: ty::ToPredicate<'tcx>>) {\n         self.fields.register_predicates(obligations);\n     }\n "}, {"sha": "bdc313c2141467d332dc2869842408f7dc4e5c55", "filename": "compiler/rustc_infer/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d6077f895aa805394c0371365d4bf0f1c368dc02/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6077f895aa805394c0371365d4bf0f1c368dc02/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Flib.rs?ref=d6077f895aa805394c0371365d4bf0f1c368dc02", "patch": "@@ -13,6 +13,7 @@\n //! This API is completely unstable and subject to change.\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n+#![feature(associated_type_bounds)]\n #![feature(box_patterns)]\n #![feature(control_flow_enum)]\n #![feature(extend_one)]"}, {"sha": "6bf54fa5417fffabedb2103059039ce78179a7a6", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d6077f895aa805394c0371365d4bf0f1c368dc02/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6077f895aa805394c0371365d4bf0f1c368dc02/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=d6077f895aa805394c0371365d4bf0f1c368dc02", "patch": "@@ -1856,7 +1856,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn mk_fn_def(\n         self,\n         def_id: DefId,\n-        substs: impl IntoIterator<Item = impl Into<GenericArg<'tcx>>>,\n+        substs: impl IntoIterator<Item: Into<GenericArg<'tcx>>>,\n     ) -> Ty<'tcx> {\n         let substs = self.check_substs(def_id, substs);\n         self.mk_ty(FnDef(def_id, substs))\n@@ -1866,7 +1866,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     fn check_substs(\n         self,\n         _def_id: DefId,\n-        substs: impl IntoIterator<Item = impl Into<GenericArg<'tcx>>>,\n+        substs: impl IntoIterator<Item: Into<GenericArg<'tcx>>>,\n     ) -> SubstsRef<'tcx> {\n         let substs = substs.into_iter().map(Into::into);\n         #[cfg(debug_assertions)]\n@@ -1901,7 +1901,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn mk_projection(\n         self,\n         item_def_id: DefId,\n-        substs: impl IntoIterator<Item = impl Into<GenericArg<'tcx>>>,\n+        substs: impl IntoIterator<Item: Into<GenericArg<'tcx>>>,\n     ) -> Ty<'tcx> {\n         self.mk_alias(ty::Projection, self.mk_alias_ty(item_def_id, substs))\n     }\n@@ -2293,7 +2293,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn mk_trait_ref(\n         self,\n         trait_def_id: DefId,\n-        substs: impl IntoIterator<Item = impl Into<GenericArg<'tcx>>>,\n+        substs: impl IntoIterator<Item: Into<GenericArg<'tcx>>>,\n     ) -> ty::TraitRef<'tcx> {\n         let substs = self.check_substs(trait_def_id, substs);\n         ty::TraitRef { def_id: trait_def_id, substs, _use_mk_trait_ref_instead: () }\n@@ -2302,7 +2302,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn mk_alias_ty(\n         self,\n         def_id: DefId,\n-        substs: impl IntoIterator<Item = impl Into<GenericArg<'tcx>>>,\n+        substs: impl IntoIterator<Item: Into<GenericArg<'tcx>>>,\n     ) -> ty::AliasTy<'tcx> {\n         let substs = self.check_substs(def_id, substs);\n         ty::AliasTy { def_id, substs, _use_mk_alias_ty_instead: () }\n@@ -2472,7 +2472,7 @@ impl<'tcx> TyCtxtAt<'tcx> {\n     pub fn mk_trait_ref(\n         self,\n         trait_lang_item: LangItem,\n-        substs: impl IntoIterator<Item = impl Into<ty::GenericArg<'tcx>>>,\n+        substs: impl IntoIterator<Item: Into<ty::GenericArg<'tcx>>>,\n     ) -> ty::TraitRef<'tcx> {\n         let trait_def_id = self.require_lang_item(trait_lang_item, Some(self.span));\n         self.tcx.mk_trait_ref(trait_def_id, substs)"}, {"sha": "658f09a850d554335540099b96138b89759e9219", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6077f895aa805394c0371365d4bf0f1c368dc02/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6077f895aa805394c0371365d4bf0f1c368dc02/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=d6077f895aa805394c0371365d4bf0f1c368dc02", "patch": "@@ -568,7 +568,7 @@ impl<'tcx> GeneratorSubsts<'tcx> {\n         self,\n         def_id: DefId,\n         tcx: TyCtxt<'tcx>,\n-    ) -> impl Iterator<Item = impl Iterator<Item = Ty<'tcx>> + Captures<'tcx>> {\n+    ) -> impl Iterator<Item: Iterator<Item = Ty<'tcx>> + Captures<'tcx>> {\n         let layout = tcx.generator_layout(def_id).unwrap();\n         layout.variant_fields.iter().map(move |variant| {\n             variant.iter().map(move |field| {"}, {"sha": "2de89f67dfdc74c001b6c37417fd74ef784790fa", "filename": "compiler/rustc_mir_build/src/build/matches/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6077f895aa805394c0371365d4bf0f1c368dc02/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6077f895aa805394c0371365d4bf0f1c368dc02/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs?ref=d6077f895aa805394c0371365d4bf0f1c368dc02", "patch": "@@ -832,7 +832,7 @@ fn trait_method<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     trait_def_id: DefId,\n     method_name: Symbol,\n-    substs: impl IntoIterator<Item = impl Into<GenericArg<'tcx>>>,\n+    substs: impl IntoIterator<Item: Into<GenericArg<'tcx>>>,\n ) -> ConstantKind<'tcx> {\n     // The unhygienic comparison here is acceptable because this is only\n     // used on known traits."}, {"sha": "9b47c7299bb7b2678a121a2c96f10300814b9b8d", "filename": "compiler/rustc_trait_selection/src/infer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6077f895aa805394c0371365d4bf0f1c368dc02/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6077f895aa805394c0371365d4bf0f1c368dc02/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs?ref=d6077f895aa805394c0371365d4bf0f1c368dc02", "patch": "@@ -42,7 +42,7 @@ pub trait InferCtxtExt<'tcx> {\n     fn type_implements_trait(\n         &self,\n         trait_def_id: DefId,\n-        params: impl IntoIterator<Item = impl Into<GenericArg<'tcx>>>,\n+        params: impl IntoIterator<Item: Into<GenericArg<'tcx>>>,\n         param_env: ty::ParamEnv<'tcx>,\n     ) -> traits::EvaluationResult;\n }\n@@ -82,7 +82,7 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n     fn type_implements_trait(\n         &self,\n         trait_def_id: DefId,\n-        params: impl IntoIterator<Item = impl Into<GenericArg<'tcx>>>,\n+        params: impl IntoIterator<Item: Into<GenericArg<'tcx>>>,\n         param_env: ty::ParamEnv<'tcx>,\n     ) -> traits::EvaluationResult {\n         let trait_ref = self.tcx.mk_trait_ref(trait_def_id, params);"}, {"sha": "1174efdbfa8fab5efdc17dfa5792db035ea8d252", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/method_chain.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6077f895aa805394c0371365d4bf0f1c368dc02/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmethod_chain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6077f895aa805394c0371365d4bf0f1c368dc02/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmethod_chain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmethod_chain.rs?ref=d6077f895aa805394c0371365d4bf0f1c368dc02", "patch": "@@ -98,7 +98,7 @@ impl<'tcx> ObligationEmittingRelation<'tcx> for CollectAllMismatches<'_, 'tcx> {\n \n     fn register_predicates(\n         &mut self,\n-        _obligations: impl IntoIterator<Item = impl ty::ToPredicate<'tcx>>,\n+        _obligations: impl IntoIterator<Item: ty::ToPredicate<'tcx>>,\n     ) {\n         // FIXME(deferred_projection_equality)\n     }"}, {"sha": "638a6592c088d9b23a688f65aef25cee45e06f53", "filename": "compiler/rustc_trait_selection/src/traits/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6077f895aa805394c0371365d4bf0f1c368dc02/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6077f895aa805394c0371365d4bf0f1c368dc02/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs?ref=d6077f895aa805394c0371365d4bf0f1c368dc02", "patch": "@@ -239,7 +239,7 @@ pub fn predicate_for_trait_def<'tcx>(\n     cause: ObligationCause<'tcx>,\n     trait_def_id: DefId,\n     recursion_depth: usize,\n-    params: impl IntoIterator<Item = impl Into<GenericArg<'tcx>>>,\n+    params: impl IntoIterator<Item: Into<GenericArg<'tcx>>>,\n ) -> PredicateObligation<'tcx> {\n     let trait_ref = tcx.mk_trait_ref(trait_def_id, params);\n     predicate_for_trait_ref(tcx, cause, param_env, trait_ref, recursion_depth)"}]}