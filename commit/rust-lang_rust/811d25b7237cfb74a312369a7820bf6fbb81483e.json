{"sha": "811d25b7237cfb74a312369a7820bf6fbb81483e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxMWQyNWI3MjM3Y2ZiNzRhMzEyMzY5YTc4MjBiZjZmYmI4MTQ4M2U=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-05-16T16:32:15Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-05-16T16:37:05Z"}, "message": "Allow calling dyn trait super trait methods without the super trait in scope\n\nThis also removes some vestiges of the old impl trait support which I think\naren't currently in use.", "tree": {"sha": "83934cff398526185a237937140716d18a9c6744", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83934cff398526185a237937140716d18a9c6744"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/811d25b7237cfb74a312369a7820bf6fbb81483e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/811d25b7237cfb74a312369a7820bf6fbb81483e", "html_url": "https://github.com/rust-lang/rust/commit/811d25b7237cfb74a312369a7820bf6fbb81483e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/811d25b7237cfb74a312369a7820bf6fbb81483e/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9322790066fe86056965332078bed74ff7f77293", "url": "https://api.github.com/repos/rust-lang/rust/commits/9322790066fe86056965332078bed74ff7f77293", "html_url": "https://github.com/rust-lang/rust/commit/9322790066fe86056965332078bed74ff7f77293"}], "stats": {"total": 55, "additions": 40, "deletions": 15}, "files": [{"sha": "daea02f8811a40918caa3230f7f2c9d574eff8f9", "filename": "crates/ra_hir_ty/src/lib.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/811d25b7237cfb74a312369a7820bf6fbb81483e/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/811d25b7237cfb74a312369a7820bf6fbb81483e/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flib.rs?ref=811d25b7237cfb74a312369a7820bf6fbb81483e", "patch": "@@ -808,15 +808,13 @@ impl Ty {\n         }\n     }\n \n-    /// If this is an `impl Trait` or `dyn Trait`, returns that trait.\n-    pub fn inherent_trait(&self) -> Option<TraitId> {\n+    /// If this is a `dyn Trait`, returns that trait.\n+    pub fn dyn_trait(&self) -> Option<TraitId> {\n         match self {\n-            Ty::Dyn(predicates) | Ty::Opaque(predicates) => {\n-                predicates.iter().find_map(|pred| match pred {\n-                    GenericPredicate::Implemented(tr) => Some(tr.trait_),\n-                    _ => None,\n-                })\n-            }\n+            Ty::Dyn(predicates) => predicates.iter().find_map(|pred| match pred {\n+                GenericPredicate::Implemented(tr) => Some(tr.trait_),\n+                _ => None,\n+            }),\n             _ => None,\n         }\n     }"}, {"sha": "0851e16a89b23df478ff3afbd62eeaebe4a536e6", "filename": "crates/ra_hir_ty/src/method_resolution.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/811d25b7237cfb74a312369a7820bf6fbb81483e/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/811d25b7237cfb74a312369a7820bf6fbb81483e/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs?ref=811d25b7237cfb74a312369a7820bf6fbb81483e", "patch": "@@ -408,8 +408,9 @@ fn iterate_trait_method_candidates<T>(\n     receiver_ty: Option<&Canonical<Ty>>,\n     mut callback: impl FnMut(&Ty, AssocItemId) -> Option<T>,\n ) -> Option<T> {\n-    // if ty is `impl Trait` or `dyn Trait`, the trait doesn't need to be in scope\n-    let inherent_trait = self_ty.value.inherent_trait().into_iter();\n+    // if ty is `dyn Trait`, the trait doesn't need to be in scope\n+    let inherent_trait =\n+        self_ty.value.dyn_trait().into_iter().flat_map(|t| all_super_traits(db.upcast(), t));\n     let env_traits = if let Ty::Placeholder(_) = self_ty.value {\n         // if we have `T: Trait` in the param env, the trait doesn't need to be in scope\n         env.trait_predicates_for_self_ty(&self_ty.value)\n@@ -601,11 +602,6 @@ pub fn implements_trait(\n     krate: CrateId,\n     trait_: TraitId,\n ) -> bool {\n-    if ty.value.inherent_trait() == Some(trait_) {\n-        // FIXME this is a bit of a hack, since Chalk should say the same thing\n-        // anyway, but currently Chalk doesn't implement `dyn/impl Trait` yet\n-        return true;\n-    }\n     let goal = generic_implements_goal(db, env, trait_, ty.clone());\n     let solution = db.trait_solve(krate, goal);\n "}, {"sha": "9c2c9e1d28386893c9368ef8e58ebbe7637c2324", "filename": "crates/ra_hir_ty/src/tests/method_resolution.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/811d25b7237cfb74a312369a7820bf6fbb81483e/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/811d25b7237cfb74a312369a7820bf6fbb81483e/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs?ref=811d25b7237cfb74a312369a7820bf6fbb81483e", "patch": "@@ -1096,3 +1096,34 @@ fn test() { (S {}).method()<|>; }\n     );\n     assert_eq!(t, \"()\");\n }\n+\n+#[test]\n+fn dyn_trait_super_trait_not_in_scope() {\n+    assert_snapshot!(\n+        infer(r#\"\n+mod m {\n+    pub trait SuperTrait {\n+        fn foo(&self) -> u32 { 0 }\n+    }\n+}\n+trait Trait: m::SuperTrait {}\n+\n+struct S;\n+impl m::SuperTrait for S {}\n+impl Trait for S {}\n+\n+fn test(d: &dyn Trait) {\n+    d.foo();\n+}\n+\"#),\n+        @r###\"\n+    52..56 'self': &Self\n+    65..70 '{ 0 }': u32\n+    67..68 '0': u32\n+    177..178 'd': &dyn Trait\n+    192..208 '{     ...o(); }': ()\n+    198..199 'd': &dyn Trait\n+    198..205 'd.foo()': u32\n+    \"###\n+    );\n+}"}]}