{"sha": "59d49c5d6d8f68e39677aada438708158027d6f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5ZDQ5YzVkNmQ4ZjY4ZTM5Njc3YWFkYTQzODcwODE1ODAyN2Q2Zjc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-07-14T18:06:29Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-07-25T08:30:12Z"}, "message": "fix checks when releasing write locks (101)", "tree": {"sha": "ee37816fa92500a06f51927289518ce7978a0a55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee37816fa92500a06f51927289518ce7978a0a55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59d49c5d6d8f68e39677aada438708158027d6f7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAll3AZQACgkQpp+NIls6\n19nAdA//WmwgLW72NtWtIbPYCicIkW1X1E8MSuu8OIjcTvf7dnA9QoQkid3PX/Ij\nKSwjxWFvgBlq1b38UdLbdXf+Hlh67LvJjLo5IVw/mDlQmm0gytiFjJf5rDJjHp2l\nVCgHoobb0LRQX7ff3yPYS/Wj15oy+gFAjgNoUidFz2jx6/MAv8Tm56QxylmjmU+f\nNvV9x5v9Iyx1ERdT5Kfn3CWPETQfYCI4Ag8/wyDtbkwRGpG5qBleNLdUuguOgk7h\nIJWbrWNHUU3VYagt3jWnSHaFGwLCgBU6XJU1f6pdacE76NaoHGK8eBv7OqZGDFYo\nch2YEavt16E53oHtPepGrU/1IPx1l4E8RyWEp+RaP82fJt0Zo4aJce1jjWshAD9a\n4SChVPslwVylT6JUag6Hf5dm6be0tH7uIMpVDtNx5sIecbL7ofIGvxP5Or/1II11\nGMV7xot4DxGlOLhVNf1r0gW1gEmmMtGCAYRjOG1a9slKsEEqPyGzMriM771OCbYp\neBdptI2gz7gWrY8pQmufT/tA2Db6nv84Kw8Jb/11DPXAgViNxQRsoyONNC6vyAX1\niSVdbeFM+zUb48G2qZqo52kYXEOH73XqJH+sjKEZJEwCaiVSpDFauezZPoHprvR9\nbJRN29JWWoyBVstp2X5cl0BFTzAxJxvpyU6L4O2wm+Whd4o0/c0=\n=cxZ2\n-----END PGP SIGNATURE-----", "payload": "tree ee37816fa92500a06f51927289518ce7978a0a55\nparent b79814e28183446d043e92b01e87e181682e83e3\nauthor Ralf Jung <post@ralfj.de> 1500055589 -0700\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1500971412 +0200\n\nfix checks when releasing write locks (101)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59d49c5d6d8f68e39677aada438708158027d6f7", "html_url": "https://github.com/rust-lang/rust/commit/59d49c5d6d8f68e39677aada438708158027d6f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59d49c5d6d8f68e39677aada438708158027d6f7/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b79814e28183446d043e92b01e87e181682e83e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/b79814e28183446d043e92b01e87e181682e83e3", "html_url": "https://github.com/rust-lang/rust/commit/b79814e28183446d043e92b01e87e181682e83e3"}], "stats": {"total": 15, "additions": 7, "deletions": 8}, "files": [{"sha": "36fb69cbe5bc73f3754206bd5dcf35f1b1556db8", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/59d49c5d6d8f68e39677aada438708158027d6f7/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d49c5d6d8f68e39677aada438708158027d6f7/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=59d49c5d6d8f68e39677aada438708158027d6f7", "patch": "@@ -63,9 +63,9 @@ mod range {\n             left..right\n         }\n \n-        pub fn contains(&self, offset: u64, len: u64) -> bool {\n+        pub fn contained_in(&self, offset: u64, len: u64) -> bool {\n             assert!(len > 0);\n-            self.start <= offset && (offset + len) <= self.end\n+            offset <= self.start && self.end <= (offset + len)\n         }\n \n         pub fn overlaps(&self, offset: u64, len: u64) -> bool {\n@@ -576,25 +576,24 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n         let alloc = self.get_mut_unchecked(ptr.alloc_id)?;\n \n         for (range, locks) in alloc.iter_lock_vecs_mut(ptr.offset, len) {\n-            if !range.contains(ptr.offset, len) {\n-                return Err(EvalError::Unimplemented(format!(\"miri does not support release part of a write-locked region\")));\n-            }\n-\n             // Check all locks in this region; make sure there are no conflicting write locks of other frames.\n             // Also, if we will recover later, perform our release by changing the lock status.\n             for lock in locks.iter_mut() {\n                 if lock.kind == AccessKind::Read || lock.status != LockStatus::Held { continue; }\n                 if lock.lifetime.frame != cur_frame {\n                     return Err(EvalError::InvalidMemoryLockRelease { ptr, len });\n                 }\n+                if !range.contained_in(ptr.offset, len) {\n+                    return Err(EvalError::Unimplemented(format!(\"miri does not support release part of a write-locked region\")));\n+                }\n                 let ptr = MemoryPointer { alloc_id : ptr.alloc_id, offset: range.offset() };\n                 trace!(\"Releasing write lock at {:?}, size {} until {:?}\", ptr, range.len(), release_until);\n                 if let Some(region) = release_until {\n                     lock.status = LockStatus::RecoverAfter(region);\n                 }\n             }\n \n-            // If we will not recove, we did not do anything above except for some checks. Now, erase the locks from the list.\n+            // If we will not recover, we did not do anything above except for some checks. Now, erase the locks from the list.\n             if let None = release_until {\n                 // Delete everything that's a held write lock.  We already checked above that these are ours.\n                 // Unfortunately, this duplicates the condition from above.  Is there anything we can do about this?\n@@ -615,7 +614,7 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n             match ending_region {\n                 None => true, // When a function ends, we end *all* its locks. It's okay for a function to still have lifetime-related locks\n                               // when it returns, that can happen e.g. with NLL when a lifetime can, but does not have to, extend beyond the\n-                              // end of a function.\n+                              // end of a function.  Same for a function still having recoveries.\n                 Some(ending_region) => lock.lifetime.region == Some(ending_region),\n             }\n         };"}]}