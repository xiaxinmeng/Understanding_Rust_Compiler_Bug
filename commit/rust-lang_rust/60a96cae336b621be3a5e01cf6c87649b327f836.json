{"sha": "60a96cae336b621be3a5e01cf6c87649b327f836", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwYTk2Y2FlMzM2YjYyMWJlM2E1ZTAxY2Y2Yzg3NjQ5YjMyN2Y4MzY=", "commit": {"author": {"name": "Canop", "email": "cano.petrole@gmail.com", "date": "2020-10-01T14:05:01Z"}, "committer": {"name": "Canop", "email": "cano.petrole@gmail.com", "date": "2020-10-23T09:41:19Z"}, "message": "more tests in option.insert, code cleaning in option\n\nCode cleaning made according to suggestions in discussion\non PR ##77392 impacts insert, get_or_insert and get_or_insert_with.", "tree": {"sha": "807d4c515661f60abc85bbb6a8f17068a489b4d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/807d4c515661f60abc85bbb6a8f17068a489b4d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60a96cae336b621be3a5e01cf6c87649b327f836", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60a96cae336b621be3a5e01cf6c87649b327f836", "html_url": "https://github.com/rust-lang/rust/commit/60a96cae336b621be3a5e01cf6c87649b327f836", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60a96cae336b621be3a5e01cf6c87649b327f836/comments", "author": {"login": "Canop", "id": 617006, "node_id": "MDQ6VXNlcjYxNzAwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/617006?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Canop", "html_url": "https://github.com/Canop", "followers_url": "https://api.github.com/users/Canop/followers", "following_url": "https://api.github.com/users/Canop/following{/other_user}", "gists_url": "https://api.github.com/users/Canop/gists{/gist_id}", "starred_url": "https://api.github.com/users/Canop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Canop/subscriptions", "organizations_url": "https://api.github.com/users/Canop/orgs", "repos_url": "https://api.github.com/users/Canop/repos", "events_url": "https://api.github.com/users/Canop/events{/privacy}", "received_events_url": "https://api.github.com/users/Canop/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Canop", "id": 617006, "node_id": "MDQ6VXNlcjYxNzAwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/617006?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Canop", "html_url": "https://github.com/Canop", "followers_url": "https://api.github.com/users/Canop/followers", "following_url": "https://api.github.com/users/Canop/following{/other_user}", "gists_url": "https://api.github.com/users/Canop/gists{/gist_id}", "starred_url": "https://api.github.com/users/Canop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Canop/subscriptions", "organizations_url": "https://api.github.com/users/Canop/orgs", "repos_url": "https://api.github.com/users/Canop/repos", "events_url": "https://api.github.com/users/Canop/events{/privacy}", "received_events_url": "https://api.github.com/users/Canop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8df2a426959fa3ff4f65eae85e618394bf27e28", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8df2a426959fa3ff4f65eae85e618394bf27e28", "html_url": "https://github.com/rust-lang/rust/commit/e8df2a426959fa3ff4f65eae85e618394bf27e28"}], "stats": {"total": 29, "additions": 17, "deletions": 12}, "files": [{"sha": "65575f4c41bad1fed393f11a8f6b01d478ad50f9", "filename": "library/core/src/option.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/60a96cae336b621be3a5e01cf6c87649b327f836/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60a96cae336b621be3a5e01cf6c87649b327f836/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=60a96cae336b621be3a5e01cf6c87649b327f836", "patch": "@@ -574,17 +574,22 @@ impl<T> Option<T> {\n     /// ```\n     /// #![feature(option_insert)]\n     ///\n-    /// let mut o = None;\n-    /// let v = o.insert(3);\n-    /// assert_eq!(*v, 3);\n+    /// let mut opt = None;\n+    /// let val = opt.insert(1);\n+    /// assert_eq!(*val, 1);\n+    /// assert_eq!(opt.unwrap(), 1);\n+    /// let val = opt.insert(2);\n+    /// assert_eq!(*val, 2);\n+    /// *val = 3;\n+    /// assert_eq!(opt.unwrap(), 3);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"option_insert\", reason = \"new API\", issue = \"none\")]\n-    pub fn insert(&mut self, v: T) -> &mut T {\n-        *self = Some(v);\n+    #[unstable(feature = \"option_insert\", reason = \"newly added\", issue = \"none\")]\n+    pub fn insert(&mut self, val: T) -> &mut T {\n+        *self = Some(val);\n \n-        match *self {\n-            Some(ref mut v) => v,\n+        match self {\n+            Some(v) => v,\n             // SAFETY: the code above just filled the option\n             None => unsafe { hint::unreachable_unchecked() },\n         }\n@@ -839,8 +844,8 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"option_entry\", since = \"1.20.0\")]\n-    pub fn get_or_insert(&mut self, v: T) -> &mut T {\n-        self.get_or_insert_with(|| v)\n+    pub fn get_or_insert(&mut self, val: T) -> &mut T {\n+        self.get_or_insert_with(|| val)\n     }\n \n     /// Inserts a value computed from `f` into the option if it is [`None`], then\n@@ -867,8 +872,8 @@ impl<T> Option<T> {\n             *self = Some(f());\n         }\n \n-        match *self {\n-            Some(ref mut v) => v,\n+        match self {\n+            Some(v) => v,\n             // SAFETY: a `None` variant for `self` would have been replaced by a `Some`\n             // variant in the code above.\n             None => unsafe { hint::unreachable_unchecked() },"}]}