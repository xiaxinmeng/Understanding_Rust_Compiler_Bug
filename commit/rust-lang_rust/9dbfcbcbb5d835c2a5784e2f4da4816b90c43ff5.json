{"sha": "9dbfcbcbb5d835c2a5784e2f4da4816b90c43ff5", "node_id": "C_kwDOAAsO6NoAKDlkYmZjYmNiYjVkODM1YzJhNTc4NGUyZjRkYTQ4MTZiOTBjNDNmZjU", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-06-29T14:25:44Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-06-29T16:24:34Z"}, "message": "pessimistically treat all function items as containing an opaque type", "tree": {"sha": "9f7322b09596a56dea4a769fc08e135639d5df99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f7322b09596a56dea4a769fc08e135639d5df99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9dbfcbcbb5d835c2a5784e2f4da4816b90c43ff5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9dbfcbcbb5d835c2a5784e2f4da4816b90c43ff5", "html_url": "https://github.com/rust-lang/rust/commit/9dbfcbcbb5d835c2a5784e2f4da4816b90c43ff5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9dbfcbcbb5d835c2a5784e2f4da4816b90c43ff5/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "493c960a3e6cdd2e2fbe8b6ea130fadea05f1ab0", "url": "https://api.github.com/repos/rust-lang/rust/commits/493c960a3e6cdd2e2fbe8b6ea130fadea05f1ab0", "html_url": "https://github.com/rust-lang/rust/commit/493c960a3e6cdd2e2fbe8b6ea130fadea05f1ab0"}], "stats": {"total": 67, "additions": 63, "deletions": 4}, "files": [{"sha": "49db121db1b6427927f70b88ed36a1fa6a3043b3", "filename": "compiler/rustc_middle/src/ty/flags.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9dbfcbcbb5d835c2a5784e2f4da4816b90c43ff5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dbfcbcbb5d835c2a5784e2f4da4816b90c43ff5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs?ref=9dbfcbcbb5d835c2a5784e2f4da4816b90c43ff5", "patch": "@@ -207,6 +207,11 @@ impl FlagComputation {\n \n             &ty::FnDef(_, substs) => {\n                 self.add_substs(substs);\n+                // HACK(#98608, oli-obk): Function items with opaque types in their signature will\n+                // end up not having the HAS_TY_OPAQUE flag set, causing `evaluate_obligation` to\n+                // optimistically assume the function item matches any signature. See documentation\n+                // on `HAS_FREE_LOCAL_NAMES` for details.\n+                self.add_flags(TypeFlags::HAS_TY_OPAQUE);\n             }\n \n             &ty::FnPtr(fn_sig) => self.bound_computation(fn_sig, |computation, fn_sig| {"}, {"sha": "4bc0f9d9200879884d80d3f0703e8e006f575a48", "filename": "src/test/ui/type-alias-impl-trait/issue-53398-cyclic-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9dbfcbcbb5d835c2a5784e2f4da4816b90c43ff5/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53398-cyclic-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dbfcbcbb5d835c2a5784e2f4da4816b90c43ff5/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53398-cyclic-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53398-cyclic-types.rs?ref=9dbfcbcbb5d835c2a5784e2f4da4816b90c43ff5", "patch": "@@ -3,7 +3,7 @@\n type Foo = impl Fn() -> Foo;\n \n fn foo() -> Foo {\n-    foo //~ ERROR: overflow evaluating the requirement `fn() -> Foo {foo}: Sized`\n+    foo //~ ERROR: overflow evaluating the requirement `<fn() -> Foo {foo} as FnOnce<()>>::Output == fn() -> Foo {foo}`\n }\n \n fn main() {}"}, {"sha": "f69514b7808f5ca3b7afbe21bfb3d3fe4f22789c", "filename": "src/test/ui/type-alias-impl-trait/issue-53398-cyclic-types.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9dbfcbcbb5d835c2a5784e2f4da4816b90c43ff5/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53398-cyclic-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9dbfcbcbb5d835c2a5784e2f4da4816b90c43ff5/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53398-cyclic-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53398-cyclic-types.stderr?ref=9dbfcbcbb5d835c2a5784e2f4da4816b90c43ff5", "patch": "@@ -1,10 +1,8 @@\n-error[E0275]: overflow evaluating the requirement `fn() -> Foo {foo}: Sized`\n+error[E0275]: overflow evaluating the requirement `<fn() -> Foo {foo} as FnOnce<()>>::Output == fn() -> Foo {foo}`\n   --> $DIR/issue-53398-cyclic-types.rs:6:5\n    |\n LL |     foo\n    |     ^^^\n-   |\n-   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_53398_cyclic_types`)\n \n error: aborting due to previous error\n "}, {"sha": "a4fd8a82a04fd2771c51d4597be5117f1eefd2f4", "filename": "src/test/ui/type-alias-impl-trait/issue-98604.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9dbfcbcbb5d835c2a5784e2f4da4816b90c43ff5/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-98604.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dbfcbcbb5d835c2a5784e2f4da4816b90c43ff5/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-98604.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-98604.rs?ref=9dbfcbcbb5d835c2a5784e2f4da4816b90c43ff5", "patch": "@@ -0,0 +1,13 @@\n+// edition:2018\n+\n+type AsyncFnPtr = Box<\n+    dyn Fn() -> std::pin::Pin<Box<dyn std::future::Future<Output = ()>>>,\n+>;\n+\n+async fn test() {}\n+\n+#[allow(unused_must_use)]\n+fn main() {\n+    Box::new(test) as AsyncFnPtr;\n+    //~^ ERROR type mismatch\n+}"}, {"sha": "f04d1b4d7877e974e67a9efe5696c955df36bcef", "filename": "src/test/ui/type-alias-impl-trait/issue-98604.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9dbfcbcbb5d835c2a5784e2f4da4816b90c43ff5/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-98604.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9dbfcbcbb5d835c2a5784e2f4da4816b90c43ff5/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-98604.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-98604.stderr?ref=9dbfcbcbb5d835c2a5784e2f4da4816b90c43ff5", "patch": "@@ -0,0 +1,18 @@\n+error[E0271]: type mismatch resolving `<fn() -> impl Future<Output = ()> {test} as FnOnce<()>>::Output == Pin<Box<(dyn Future<Output = ()> + 'static)>>`\n+  --> $DIR/issue-98604.rs:11:5\n+   |\n+LL |     Box::new(test) as AsyncFnPtr;\n+   |     ^^^^^^^^^^^^^^ expected struct `Pin`, found opaque type\n+   |\n+note: while checking the return type of the `async fn`\n+  --> $DIR/issue-98604.rs:7:17\n+   |\n+LL | async fn test() {}\n+   |                 ^ checked the `Output` of this `async fn`, found opaque type\n+   = note:   expected struct `Pin<Box<(dyn Future<Output = ()> + 'static)>>`\n+           found opaque type `impl Future<Output = ()>`\n+   = note: required for the cast from `fn() -> impl Future<Output = ()> {test}` to the object type `dyn Fn() -> Pin<Box<(dyn Future<Output = ()> + 'static)>>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0271`."}, {"sha": "d75762a8b62f094933539dfa770d7d5df7856745", "filename": "src/test/ui/type-alias-impl-trait/issue-98608.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9dbfcbcbb5d835c2a5784e2f4da4816b90c43ff5/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-98608.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dbfcbcbb5d835c2a5784e2f4da4816b90c43ff5/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-98608.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-98608.rs?ref=9dbfcbcbb5d835c2a5784e2f4da4816b90c43ff5", "patch": "@@ -0,0 +1,9 @@\n+fn hi() -> impl Sized { std::ptr::null::<u8>() }\n+\n+fn main() {\n+    let b: Box<dyn Fn() -> Box<u8>> = Box::new(hi);\n+    //~^ ERROR type mismatch resolving `<fn() -> impl Sized {hi} as FnOnce<()>>::Output == Box<u8>`\n+    let boxed = b();\n+    let null = *boxed;\n+    println!(\"{null:?}\");\n+}"}, {"sha": "8f3ec7d9d16160ed0fee5b1b6372f8345820dcdb", "filename": "src/test/ui/type-alias-impl-trait/issue-98608.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9dbfcbcbb5d835c2a5784e2f4da4816b90c43ff5/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-98608.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9dbfcbcbb5d835c2a5784e2f4da4816b90c43ff5/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-98608.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-98608.stderr?ref=9dbfcbcbb5d835c2a5784e2f4da4816b90c43ff5", "patch": "@@ -0,0 +1,16 @@\n+error[E0271]: type mismatch resolving `<fn() -> impl Sized {hi} as FnOnce<()>>::Output == Box<u8>`\n+  --> $DIR/issue-98608.rs:4:39\n+   |\n+LL | fn hi() -> impl Sized { std::ptr::null::<u8>() }\n+   |            ---------- the found opaque type\n+...\n+LL |     let b: Box<dyn Fn() -> Box<u8>> = Box::new(hi);\n+   |                                       ^^^^^^^^^^^^ expected struct `Box`, found opaque type\n+   |\n+   = note:   expected struct `Box<u8>`\n+           found opaque type `impl Sized`\n+   = note: required for the cast from `fn() -> impl Sized {hi}` to the object type `dyn Fn() -> Box<u8>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0271`."}]}