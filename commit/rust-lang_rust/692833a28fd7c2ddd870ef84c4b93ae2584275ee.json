{"sha": "692833a28fd7c2ddd870ef84c4b93ae2584275ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5MjgzM2EyOGZkN2MyZGRkODcwZWY4NGM0YjkzYWUyNTg0Mjc1ZWU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-08-12T17:04:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-12T17:04:14Z"}, "message": "Rollup merge of #87922 - Manishearth:c-enum-target-spec, r=nagisa,eddyb\n\nAdd c_enum_min_bits target spec field, use for arm-none and thumb-none targets\n\nFixes https://github.com/rust-lang/rust/issues/87917\n\n<s>Haven't tested this yet, still playing around.</s>\n\nThis seems to fix the issue.", "tree": {"sha": "884cbffe914dfbdb069ea1584ff33f793fcdbdf7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/884cbffe914dfbdb069ea1584ff33f793fcdbdf7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/692833a28fd7c2ddd870ef84c4b93ae2584275ee", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhFVSOCRBK7hj4Ov3rIwAAPqwIAD/hbf1IYGpnf2uDY7ri6/TG\n/O1MBo28aIxdioi3pKyrOZ/lCkM4J+ZgjXvlmsquSU91L19XOWpWr7dVo1YRylJu\nCaEmz6ttMiOy61O30p2W9PRcErcm8q7SCNbg1EmIVIox9lpTZw971oOjv8iMyDZQ\nZOngx3mqDKaDhj93bC4r9E/3ORrBD1Q594bOkpoj74jQQRyrzNWK/gftkshjelT/\nKaa+8kJOwukqEfuU3kIXg+1c3hK6jkmgrVpS7U37NlmXwsHcFEjYm+9ZO3hfKVxx\nbaGlauRDO2pB8iK8z/306H57GJA7GEJtMvoC87NZCdHSea3GymKNijp+DDnI8Lc=\n=YQae\n-----END PGP SIGNATURE-----\n", "payload": "tree 884cbffe914dfbdb069ea1584ff33f793fcdbdf7\nparent df23264f8043ee82e3f977ee46c38651fb6282fc\nparent 4c0e4244614f0d1d548c353e695aa1e2a67da7d6\nauthor Manish Goregaokar <manishsmail@gmail.com> 1628787854 -0700\ncommitter GitHub <noreply@github.com> 1628787854 -0700\n\nRollup merge of #87922 - Manishearth:c-enum-target-spec, r=nagisa,eddyb\n\nAdd c_enum_min_bits target spec field, use for arm-none and thumb-none targets\n\nFixes https://github.com/rust-lang/rust/issues/87917\n\n<s>Haven't tested this yet, still playing around.</s>\n\nThis seems to fix the issue.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/692833a28fd7c2ddd870ef84c4b93ae2584275ee", "html_url": "https://github.com/rust-lang/rust/commit/692833a28fd7c2ddd870ef84c4b93ae2584275ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/692833a28fd7c2ddd870ef84c4b93ae2584275ee/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df23264f8043ee82e3f977ee46c38651fb6282fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/df23264f8043ee82e3f977ee46c38651fb6282fc", "html_url": "https://github.com/rust-lang/rust/commit/df23264f8043ee82e3f977ee46c38651fb6282fc"}, {"sha": "4c0e4244614f0d1d548c353e695aa1e2a67da7d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c0e4244614f0d1d548c353e695aa1e2a67da7d6", "html_url": "https://github.com/rust-lang/rust/commit/4c0e4244614f0d1d548c353e695aa1e2a67da7d6"}], "stats": {"total": 545, "additions": 529, "deletions": 16}, "files": [{"sha": "3caca313ffddd9de044f12345c5ee3ca5c636083", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/692833a28fd7c2ddd870ef84c4b93ae2584275ee/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/692833a28fd7c2ddd870ef84c4b93ae2584275ee/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=692833a28fd7c2ddd870ef84c4b93ae2584275ee", "patch": "@@ -112,9 +112,6 @@ impl IntegerExt for Integer {\n         let unsigned_fit = Integer::fit_unsigned(cmp::max(min as u128, max as u128));\n         let signed_fit = cmp::max(Integer::fit_signed(min), Integer::fit_signed(max));\n \n-        let mut min_from_extern = None;\n-        let min_default = I8;\n-\n         if let Some(ity) = repr.int {\n             let discr = Integer::from_attr(&tcx, ity);\n             let fit = if ity.is_signed() { signed_fit } else { unsigned_fit };\n@@ -128,19 +125,14 @@ impl IntegerExt for Integer {\n             return (discr, ity.is_signed());\n         }\n \n-        if repr.c() {\n-            match &tcx.sess.target.arch[..] {\n-                \"hexagon\" => min_from_extern = Some(I8),\n-                // WARNING: the ARM EABI has two variants; the one corresponding\n-                // to `at_least == I32` appears to be used on Linux and NetBSD,\n-                // but some systems may use the variant corresponding to no\n-                // lower bound. However, we don't run on those yet...?\n-                \"arm\" => min_from_extern = Some(I32),\n-                _ => min_from_extern = Some(I32),\n-            }\n-        }\n-\n-        let at_least = min_from_extern.unwrap_or(min_default);\n+        let at_least = if repr.c() {\n+            // This is usually I32, however it can be different on some platforms,\n+            // notably hexagon and arm-none/thumb-none\n+            tcx.data_layout().c_enum_min_size\n+        } else {\n+            // repr(Rust) enums try to be as small as possible\n+            I8\n+        };\n \n         // If there are no negative values, we can use the unsigned fit.\n         if min >= 0 {"}, {"sha": "8ef6e142caecfe02745d6a58cdddce78fd852af6", "filename": "compiler/rustc_target/src/abi/mod.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/692833a28fd7c2ddd870ef84c4b93ae2584275ee/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/692833a28fd7c2ddd870ef84c4b93ae2584275ee/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs?ref=692833a28fd7c2ddd870ef84c4b93ae2584275ee", "patch": "@@ -36,6 +36,9 @@ pub struct TargetDataLayout {\n     pub vector_align: Vec<(Size, AbiAndPrefAlign)>,\n \n     pub instruction_address_space: AddressSpace,\n+\n+    /// Minimum size of #[repr(C)] enums (default I32 bits)\n+    pub c_enum_min_size: Integer,\n }\n \n impl Default for TargetDataLayout {\n@@ -60,6 +63,7 @@ impl Default for TargetDataLayout {\n                 (Size::from_bits(128), AbiAndPrefAlign::new(align(128))),\n             ],\n             instruction_address_space: AddressSpace::DATA,\n+            c_enum_min_size: Integer::I32,\n         }\n     }\n }\n@@ -173,6 +177,8 @@ impl TargetDataLayout {\n             ));\n         }\n \n+        dl.c_enum_min_size = Integer::from_size(Size::from_bits(target.c_enum_min_bits))?;\n+\n         Ok(dl)\n     }\n \n@@ -610,6 +616,17 @@ impl Integer {\n         }\n         I8\n     }\n+\n+    fn from_size(size: Size) -> Result<Self, String> {\n+        match size.bits() {\n+            8 => Ok(Integer::I8),\n+            16 => Ok(Integer::I16),\n+            32 => Ok(Integer::I32),\n+            64 => Ok(Integer::I64),\n+            128 => Ok(Integer::I128),\n+            _ => Err(format!(\"rust does not support integers with {} bits\", size.bits())),\n+        }\n+    }\n }\n \n /// Fundamental unit of memory access and layout."}, {"sha": "ed4779c0c023210a112ffd5fa61392f875db0db6", "filename": "compiler/rustc_target/src/spec/armebv7r_none_eabi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/692833a28fd7c2ddd870ef84c4b93ae2584275ee/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/692833a28fd7c2ddd870ef84c4b93ae2584275ee/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabi.rs?ref=692833a28fd7c2ddd870ef84c4b93ae2584275ee", "patch": "@@ -20,6 +20,8 @@ pub fn target() -> Target {\n             panic_strategy: PanicStrategy::Abort,\n             max_atomic_width: Some(32),\n             emit_debug_gdb_scripts: false,\n+            // GCC and Clang default to 8 for arm-none here\n+            c_enum_min_bits: 8,\n             ..Default::default()\n         },\n     }"}, {"sha": "b60e2895d7727db2863ac5638ca4c872f1609239", "filename": "compiler/rustc_target/src/spec/armebv7r_none_eabihf.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/692833a28fd7c2ddd870ef84c4b93ae2584275ee/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/692833a28fd7c2ddd870ef84c4b93ae2584275ee/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabihf.rs?ref=692833a28fd7c2ddd870ef84c4b93ae2584275ee", "patch": "@@ -21,6 +21,8 @@ pub fn target() -> Target {\n             features: \"+vfp3,-d32,-fp16\".to_string(),\n             max_atomic_width: Some(32),\n             emit_debug_gdb_scripts: false,\n+            // GCC and Clang default to 8 for arm-none here\n+            c_enum_min_bits: 8,\n             ..Default::default()\n         },\n     }"}, {"sha": "88040f49d9e4e926dfd4cce8cb4776f64427d87b", "filename": "compiler/rustc_target/src/spec/armv7a_none_eabi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/692833a28fd7c2ddd870ef84c4b93ae2584275ee/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/692833a28fd7c2ddd870ef84c4b93ae2584275ee/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabi.rs?ref=692833a28fd7c2ddd870ef84c4b93ae2584275ee", "patch": "@@ -28,6 +28,7 @@ pub fn target() -> Target {\n         max_atomic_width: Some(64),\n         panic_strategy: PanicStrategy::Abort,\n         emit_debug_gdb_scripts: false,\n+        c_enum_min_bits: 8,\n         ..Default::default()\n     };\n     Target {"}, {"sha": "af324843cede5c7090c01279be7fef673308a1c7", "filename": "compiler/rustc_target/src/spec/armv7a_none_eabihf.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/692833a28fd7c2ddd870ef84c4b93ae2584275ee/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/692833a28fd7c2ddd870ef84c4b93ae2584275ee/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabihf.rs?ref=692833a28fd7c2ddd870ef84c4b93ae2584275ee", "patch": "@@ -19,6 +19,8 @@ pub fn target() -> Target {\n         max_atomic_width: Some(64),\n         panic_strategy: PanicStrategy::Abort,\n         emit_debug_gdb_scripts: false,\n+        // GCC and Clang default to 8 for arm-none here\n+        c_enum_min_bits: 8,\n         ..Default::default()\n     };\n     Target {"}, {"sha": "c0e970983e70484470aceaeb49af0142128c9385", "filename": "compiler/rustc_target/src/spec/armv7r_none_eabi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/692833a28fd7c2ddd870ef84c4b93ae2584275ee/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/692833a28fd7c2ddd870ef84c4b93ae2584275ee/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabi.rs?ref=692833a28fd7c2ddd870ef84c4b93ae2584275ee", "patch": "@@ -19,6 +19,8 @@ pub fn target() -> Target {\n             panic_strategy: PanicStrategy::Abort,\n             max_atomic_width: Some(32),\n             emit_debug_gdb_scripts: false,\n+            // GCC and Clang default to 8 for arm-none here\n+            c_enum_min_bits: 8,\n             ..Default::default()\n         },\n     }"}, {"sha": "b126887b27b33f946dded05057718f7945e61f47", "filename": "compiler/rustc_target/src/spec/armv7r_none_eabihf.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/692833a28fd7c2ddd870ef84c4b93ae2584275ee/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/692833a28fd7c2ddd870ef84c4b93ae2584275ee/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabihf.rs?ref=692833a28fd7c2ddd870ef84c4b93ae2584275ee", "patch": "@@ -20,6 +20,8 @@ pub fn target() -> Target {\n             features: \"+vfp3,-d32,-fp16\".to_string(),\n             max_atomic_width: Some(32),\n             emit_debug_gdb_scripts: false,\n+            // GCC and Clang default to 8 for arm-none here\n+            c_enum_min_bits: 8,\n             ..Default::default()\n         },\n     }"}, {"sha": "27d306c41b79550f462224fbd7d32e44909f936c", "filename": "compiler/rustc_target/src/spec/hexagon_unknown_linux_musl.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/692833a28fd7c2ddd870ef84c4b93ae2584275ee/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhexagon_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/692833a28fd7c2ddd870ef84c4b93ae2584275ee/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhexagon_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhexagon_unknown_linux_musl.rs?ref=692833a28fd7c2ddd870ef84c4b93ae2584275ee", "patch": "@@ -13,6 +13,8 @@ pub fn target() -> Target {\n     base.dynamic_linking = true;\n     base.executables = true;\n \n+    base.c_enum_min_bits = 8;\n+\n     Target {\n         llvm_target: \"hexagon-unknown-linux-musl\".to_string(),\n         pointer_width: 32,"}, {"sha": "911956859b8619b263b1e1c252627642bea512bd", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/692833a28fd7c2ddd870ef84c4b93ae2584275ee/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/692833a28fd7c2ddd870ef84c4b93ae2584275ee/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=692833a28fd7c2ddd870ef84c4b93ae2584275ee", "patch": "@@ -1336,6 +1336,9 @@ pub struct TargetOptions {\n \n     /// If present it's a default value to use for adjusting the C ABI.\n     pub default_adjusted_cabi: Option<Abi>,\n+\n+    /// Minimum number of bits in #[repr(C)] enum. Defaults to 32.\n+    pub c_enum_min_bits: u64,\n }\n \n impl Default for TargetOptions {\n@@ -1440,6 +1443,7 @@ impl Default for TargetOptions {\n             split_debuginfo: SplitDebuginfo::Off,\n             supported_sanitizers: SanitizerSet::empty(),\n             default_adjusted_cabi: None,\n+            c_enum_min_bits: 32,\n         }\n     }\n }\n@@ -1604,6 +1608,12 @@ impl Target {\n                     base.$key_name = s;\n                 }\n             } );\n+            ($key_name:ident, u64) => ( {\n+                let name = (stringify!($key_name)).replace(\"_\", \"-\");\n+                if let Some(s) = obj.remove_key(&name).and_then(|j| Json::as_u64(&j)) {\n+                    base.$key_name = s;\n+                }\n+            } );\n             ($key_name:ident, Option<u32>) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n                 if let Some(s) = obj.remove_key(&name).and_then(|j| Json::as_u64(&j)) {\n@@ -2017,6 +2027,7 @@ impl Target {\n         key!(split_debuginfo, SplitDebuginfo)?;\n         key!(supported_sanitizers, SanitizerSet)?;\n         key!(default_adjusted_cabi, Option<Abi>)?;\n+        key!(c_enum_min_bits, u64);\n \n         if base.is_builtin {\n             // This can cause unfortunate ICEs later down the line.\n@@ -2255,6 +2266,7 @@ impl ToJson for Target {\n         target_option_val!(has_thumb_interworking);\n         target_option_val!(split_debuginfo);\n         target_option_val!(supported_sanitizers);\n+        target_option_val!(c_enum_min_bits);\n \n         if let Some(abi) = self.default_adjusted_cabi {\n             d.insert(\"default-adjusted-cabi\".to_string(), Abi::name(abi).to_json());"}, {"sha": "e2e528561e79719c9a78f8d29b26c394fa0ba584", "filename": "compiler/rustc_target/src/spec/thumb_base.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/692833a28fd7c2ddd870ef84c4b93ae2584275ee/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumb_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/692833a28fd7c2ddd870ef84c4b93ae2584275ee/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumb_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumb_base.rs?ref=692833a28fd7c2ddd870ef84c4b93ae2584275ee", "patch": "@@ -53,6 +53,9 @@ pub fn opts() -> TargetOptions {\n         // LLVM is eager to trash the link register when calling `noreturn` functions, which\n         // breaks debugging. Preserve LR by default to prevent that from happening.\n         frame_pointer: FramePointer::Always,\n+        // ARM supports multiple ABIs for enums, the linux one matches the default of 32 here\n+        // but any arm-none or thumb-none target will be defaulted to 8 on GCC and clang\n+        c_enum_min_bits: 8,\n         ..Default::default()\n     }\n }"}, {"sha": "3b43b1b83fa6e039f4185587a132972c5fa8d63d", "filename": "src/test/ui/layout/thumb-enum.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/692833a28fd7c2ddd870ef84c4b93ae2584275ee/src%2Ftest%2Fui%2Flayout%2Fthumb-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/692833a28fd7c2ddd870ef84c4b93ae2584275ee/src%2Ftest%2Fui%2Flayout%2Fthumb-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fthumb-enum.rs?ref=692833a28fd7c2ddd870ef84c4b93ae2584275ee", "patch": "@@ -0,0 +1,34 @@\n+// compile-flags: --target thumbv8m.main-none-eabihf\n+// needs-llvm-components: arm\n+//\n+// Verify that thumb targets implement the repr(C) for enums correctly.\n+//\n+// See #87917\n+#![feature(never_type, rustc_attrs, no_core, lang_items)]\n+#![crate_type = \"lib\"]\n+#![no_core]\n+\n+#[lang=\"sized\"]\n+trait Sized {}\n+\n+#[rustc_layout(debug)]\n+#[repr(C)]\n+enum A { Apple } //~ ERROR: layout_of\n+\n+#[rustc_layout(debug)]\n+#[repr(C)]\n+enum B { Banana = 255, } //~ ERROR: layout_of\n+\n+#[rustc_layout(debug)]\n+#[repr(C)]\n+enum C { Chaenomeles = 256, } //~ ERROR: layout_of\n+\n+#[rustc_layout(debug)]\n+#[repr(C)]\n+enum P { Peach = 0x1000_0000isize, } //~ ERROR: layout_of\n+\n+const TANGERINE: usize = 0x8100_0000; // hack to get negative numbers without negation operator!\n+\n+#[rustc_layout(debug)]\n+#[repr(C)]\n+enum T { Tangerine = TANGERINE as isize } //~ ERROR: layout_of"}, {"sha": "898a61b904db50bd0dbf1fa8f6feb492d2878290", "filename": "src/test/ui/layout/thumb-enum.stderr", "status": "added", "additions": 442, "deletions": 0, "changes": 442, "blob_url": "https://github.com/rust-lang/rust/blob/692833a28fd7c2ddd870ef84c4b93ae2584275ee/src%2Ftest%2Fui%2Flayout%2Fthumb-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/692833a28fd7c2ddd870ef84c4b93ae2584275ee/src%2Ftest%2Fui%2Flayout%2Fthumb-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fthumb-enum.stderr?ref=692833a28fd7c2ddd870ef84c4b93ae2584275ee", "patch": "@@ -0,0 +1,442 @@\n+error: layout_of(A) = Layout {\n+    fields: Arbitrary {\n+        offsets: [\n+            Size {\n+                raw: 0,\n+            },\n+        ],\n+        memory_index: [\n+            0,\n+        ],\n+    },\n+    variants: Multiple {\n+        tag: Scalar {\n+            value: Int(\n+                I8,\n+                false,\n+            ),\n+            valid_range: 0..=0,\n+        },\n+        tag_encoding: Direct,\n+        tag_field: 0,\n+        variants: [\n+            Layout {\n+                fields: Arbitrary {\n+                    offsets: [],\n+                    memory_index: [],\n+                },\n+                variants: Single {\n+                    index: 0,\n+                },\n+                abi: Aggregate {\n+                    sized: true,\n+                },\n+                largest_niche: None,\n+                align: AbiAndPrefAlign {\n+                    abi: Align {\n+                        pow2: 0,\n+                    },\n+                    pref: Align {\n+                        pow2: 2,\n+                    },\n+                },\n+                size: Size {\n+                    raw: 1,\n+                },\n+            },\n+        ],\n+    },\n+    abi: Scalar(\n+        Scalar {\n+            value: Int(\n+                I8,\n+                false,\n+            ),\n+            valid_range: 0..=0,\n+        },\n+    ),\n+    largest_niche: Some(\n+        Niche {\n+            offset: Size {\n+                raw: 0,\n+            },\n+            scalar: Scalar {\n+                value: Int(\n+                    I8,\n+                    false,\n+                ),\n+                valid_range: 0..=0,\n+            },\n+        },\n+    ),\n+    align: AbiAndPrefAlign {\n+        abi: Align {\n+            pow2: 0,\n+        },\n+        pref: Align {\n+            pow2: 2,\n+        },\n+    },\n+    size: Size {\n+        raw: 1,\n+    },\n+}\n+  --> $DIR/thumb-enum.rs:16:1\n+   |\n+LL | enum A { Apple }\n+   | ^^^^^^^^^^^^^^^^\n+\n+error: layout_of(B) = Layout {\n+    fields: Arbitrary {\n+        offsets: [\n+            Size {\n+                raw: 0,\n+            },\n+        ],\n+        memory_index: [\n+            0,\n+        ],\n+    },\n+    variants: Multiple {\n+        tag: Scalar {\n+            value: Int(\n+                I8,\n+                false,\n+            ),\n+            valid_range: 255..=255,\n+        },\n+        tag_encoding: Direct,\n+        tag_field: 0,\n+        variants: [\n+            Layout {\n+                fields: Arbitrary {\n+                    offsets: [],\n+                    memory_index: [],\n+                },\n+                variants: Single {\n+                    index: 0,\n+                },\n+                abi: Aggregate {\n+                    sized: true,\n+                },\n+                largest_niche: None,\n+                align: AbiAndPrefAlign {\n+                    abi: Align {\n+                        pow2: 0,\n+                    },\n+                    pref: Align {\n+                        pow2: 2,\n+                    },\n+                },\n+                size: Size {\n+                    raw: 1,\n+                },\n+            },\n+        ],\n+    },\n+    abi: Scalar(\n+        Scalar {\n+            value: Int(\n+                I8,\n+                false,\n+            ),\n+            valid_range: 255..=255,\n+        },\n+    ),\n+    largest_niche: Some(\n+        Niche {\n+            offset: Size {\n+                raw: 0,\n+            },\n+            scalar: Scalar {\n+                value: Int(\n+                    I8,\n+                    false,\n+                ),\n+                valid_range: 255..=255,\n+            },\n+        },\n+    ),\n+    align: AbiAndPrefAlign {\n+        abi: Align {\n+            pow2: 0,\n+        },\n+        pref: Align {\n+            pow2: 2,\n+        },\n+    },\n+    size: Size {\n+        raw: 1,\n+    },\n+}\n+  --> $DIR/thumb-enum.rs:20:1\n+   |\n+LL | enum B { Banana = 255, }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: layout_of(C) = Layout {\n+    fields: Arbitrary {\n+        offsets: [\n+            Size {\n+                raw: 0,\n+            },\n+        ],\n+        memory_index: [\n+            0,\n+        ],\n+    },\n+    variants: Multiple {\n+        tag: Scalar {\n+            value: Int(\n+                I16,\n+                false,\n+            ),\n+            valid_range: 256..=256,\n+        },\n+        tag_encoding: Direct,\n+        tag_field: 0,\n+        variants: [\n+            Layout {\n+                fields: Arbitrary {\n+                    offsets: [],\n+                    memory_index: [],\n+                },\n+                variants: Single {\n+                    index: 0,\n+                },\n+                abi: Aggregate {\n+                    sized: true,\n+                },\n+                largest_niche: None,\n+                align: AbiAndPrefAlign {\n+                    abi: Align {\n+                        pow2: 1,\n+                    },\n+                    pref: Align {\n+                        pow2: 2,\n+                    },\n+                },\n+                size: Size {\n+                    raw: 2,\n+                },\n+            },\n+        ],\n+    },\n+    abi: Scalar(\n+        Scalar {\n+            value: Int(\n+                I16,\n+                false,\n+            ),\n+            valid_range: 256..=256,\n+        },\n+    ),\n+    largest_niche: Some(\n+        Niche {\n+            offset: Size {\n+                raw: 0,\n+            },\n+            scalar: Scalar {\n+                value: Int(\n+                    I16,\n+                    false,\n+                ),\n+                valid_range: 256..=256,\n+            },\n+        },\n+    ),\n+    align: AbiAndPrefAlign {\n+        abi: Align {\n+            pow2: 1,\n+        },\n+        pref: Align {\n+            pow2: 2,\n+        },\n+    },\n+    size: Size {\n+        raw: 2,\n+    },\n+}\n+  --> $DIR/thumb-enum.rs:24:1\n+   |\n+LL | enum C { Chaenomeles = 256, }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: layout_of(P) = Layout {\n+    fields: Arbitrary {\n+        offsets: [\n+            Size {\n+                raw: 0,\n+            },\n+        ],\n+        memory_index: [\n+            0,\n+        ],\n+    },\n+    variants: Multiple {\n+        tag: Scalar {\n+            value: Int(\n+                I32,\n+                false,\n+            ),\n+            valid_range: 268435456..=268435456,\n+        },\n+        tag_encoding: Direct,\n+        tag_field: 0,\n+        variants: [\n+            Layout {\n+                fields: Arbitrary {\n+                    offsets: [],\n+                    memory_index: [],\n+                },\n+                variants: Single {\n+                    index: 0,\n+                },\n+                abi: Aggregate {\n+                    sized: true,\n+                },\n+                largest_niche: None,\n+                align: AbiAndPrefAlign {\n+                    abi: Align {\n+                        pow2: 2,\n+                    },\n+                    pref: Align {\n+                        pow2: 2,\n+                    },\n+                },\n+                size: Size {\n+                    raw: 4,\n+                },\n+            },\n+        ],\n+    },\n+    abi: Scalar(\n+        Scalar {\n+            value: Int(\n+                I32,\n+                false,\n+            ),\n+            valid_range: 268435456..=268435456,\n+        },\n+    ),\n+    largest_niche: Some(\n+        Niche {\n+            offset: Size {\n+                raw: 0,\n+            },\n+            scalar: Scalar {\n+                value: Int(\n+                    I32,\n+                    false,\n+                ),\n+                valid_range: 268435456..=268435456,\n+            },\n+        },\n+    ),\n+    align: AbiAndPrefAlign {\n+        abi: Align {\n+            pow2: 2,\n+        },\n+        pref: Align {\n+            pow2: 2,\n+        },\n+    },\n+    size: Size {\n+        raw: 4,\n+    },\n+}\n+  --> $DIR/thumb-enum.rs:28:1\n+   |\n+LL | enum P { Peach = 0x1000_0000isize, }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: layout_of(T) = Layout {\n+    fields: Arbitrary {\n+        offsets: [\n+            Size {\n+                raw: 0,\n+            },\n+        ],\n+        memory_index: [\n+            0,\n+        ],\n+    },\n+    variants: Multiple {\n+        tag: Scalar {\n+            value: Int(\n+                I32,\n+                true,\n+            ),\n+            valid_range: 2164260864..=2164260864,\n+        },\n+        tag_encoding: Direct,\n+        tag_field: 0,\n+        variants: [\n+            Layout {\n+                fields: Arbitrary {\n+                    offsets: [],\n+                    memory_index: [],\n+                },\n+                variants: Single {\n+                    index: 0,\n+                },\n+                abi: Aggregate {\n+                    sized: true,\n+                },\n+                largest_niche: None,\n+                align: AbiAndPrefAlign {\n+                    abi: Align {\n+                        pow2: 2,\n+                    },\n+                    pref: Align {\n+                        pow2: 2,\n+                    },\n+                },\n+                size: Size {\n+                    raw: 4,\n+                },\n+            },\n+        ],\n+    },\n+    abi: Scalar(\n+        Scalar {\n+            value: Int(\n+                I32,\n+                true,\n+            ),\n+            valid_range: 2164260864..=2164260864,\n+        },\n+    ),\n+    largest_niche: Some(\n+        Niche {\n+            offset: Size {\n+                raw: 0,\n+            },\n+            scalar: Scalar {\n+                value: Int(\n+                    I32,\n+                    true,\n+                ),\n+                valid_range: 2164260864..=2164260864,\n+            },\n+        },\n+    ),\n+    align: AbiAndPrefAlign {\n+        abi: Align {\n+            pow2: 2,\n+        },\n+        pref: Align {\n+            pow2: 2,\n+        },\n+    },\n+    size: Size {\n+        raw: 4,\n+    },\n+}\n+  --> $DIR/thumb-enum.rs:34:1\n+   |\n+LL | enum T { Tangerine = TANGERINE as isize }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 5 previous errors\n+"}]}