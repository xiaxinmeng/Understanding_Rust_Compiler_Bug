{"sha": "bd1732240b586733d8d9fb47cf9ef4cfc299c22e", "node_id": "C_kwDOAAsO6NoAKGJkMTczMjI0MGI1ODY3MzNkOGQ5ZmI0N2NmOWVmNGNmYzI5OWMyMmU", "commit": {"author": {"name": "Ezra Shaw", "email": "ezrasure@outlook.com", "date": "2023-03-10T08:29:45Z"}, "committer": {"name": "Ezra Shaw", "email": "ezrasure@outlook.com", "date": "2023-03-15T09:19:54Z"}, "message": "error-msg: impl better suggestion for `E0532`", "tree": {"sha": "5f68bcd2bd1de0bec088045fe5b9795ae53724b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f68bcd2bd1de0bec088045fe5b9795ae53724b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd1732240b586733d8d9fb47cf9ef4cfc299c22e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEINUdoc4Vb1yVx04IZ6vxb7Ds2HAFAmQRjboACgkQZ6vxb7Ds\n2HBjxxAAr6oBEBk1lolDWH4xPD+kGfIekC9D6EEUEd0DfPmmnAXgd9AOR6Cpeaga\nE2r5JPm4katj6nW9iOYd9rcR9hgOjlM3LHoRnfLZASJtqwRqTuS546MHEZ64CK1x\nn+YrvDRJgMPeI5S8KJR0UENbAfqbBQDXt6ALfRtLnuJjVjnGSvbkNAqW6lkAfPjP\nuegMqjZC6Q8qDOg5GlBgVpInJo4zGioVcJtVL3tHoyNAV7PDexkLolzZaX4TE3Qk\nMw6kANFhQZsCbTL+Y168tjFgxdJN4JOX31Xo2lCC/IpcYPb01Nfdf1+ipv90yLYS\nRHEFNDFIMdezT1e5XxLmGSzcKrEMjAbNAhjTode3Sq85R8otkIT6piCD/ZTVPS6Q\nlvmgyVqmSfGQhmSzkyWl1hHlRxaxupOHy2eoIF2A8D8fXRUzn01E3aNrTw9OxY8K\nOc4F7E9QJsnz6QMaedYGBqQDP9GBbZidsd33z3mUThjo6LhhmAqYFnH6vGZ6dZJ7\nVTLfgsgtZzMtYW2W26Ag5R7VfVgMz1RIHE+Zdw8cJ6HgF7lVDAmsaRO6EZpIZMFv\nlDKuVZXAQq3of+MjS7DJ3Jba67500nkYQ5ZvC9r5ppMxWkCYbYStjw59jxMKXOl9\nxy8eQOM+Kx8N7PznFT23CZZ157nbAPV2uKGxrahJZDO7BxrYQhs=\n=+hcU\n-----END PGP SIGNATURE-----", "payload": "tree 5f68bcd2bd1de0bec088045fe5b9795ae53724b4\nparent bd43458d4c2a01af55f7032f7c47d7c8fecfe560\nauthor Ezra Shaw <ezrasure@outlook.com> 1678436985 +1300\ncommitter Ezra Shaw <ezrasure@outlook.com> 1678871994 +1300\n\nerror-msg: impl better suggestion for `E0532`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd1732240b586733d8d9fb47cf9ef4cfc299c22e", "html_url": "https://github.com/rust-lang/rust/commit/bd1732240b586733d8d9fb47cf9ef4cfc299c22e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd1732240b586733d8d9fb47cf9ef4cfc299c22e/comments", "author": {"login": "Ezrashaw", "id": 38062690, "node_id": "MDQ6VXNlcjM4MDYyNjkw", "avatar_url": "https://avatars.githubusercontent.com/u/38062690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ezrashaw", "html_url": "https://github.com/Ezrashaw", "followers_url": "https://api.github.com/users/Ezrashaw/followers", "following_url": "https://api.github.com/users/Ezrashaw/following{/other_user}", "gists_url": "https://api.github.com/users/Ezrashaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ezrashaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ezrashaw/subscriptions", "organizations_url": "https://api.github.com/users/Ezrashaw/orgs", "repos_url": "https://api.github.com/users/Ezrashaw/repos", "events_url": "https://api.github.com/users/Ezrashaw/events{/privacy}", "received_events_url": "https://api.github.com/users/Ezrashaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ezrashaw", "id": 38062690, "node_id": "MDQ6VXNlcjM4MDYyNjkw", "avatar_url": "https://avatars.githubusercontent.com/u/38062690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ezrashaw", "html_url": "https://github.com/Ezrashaw", "followers_url": "https://api.github.com/users/Ezrashaw/followers", "following_url": "https://api.github.com/users/Ezrashaw/following{/other_user}", "gists_url": "https://api.github.com/users/Ezrashaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ezrashaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ezrashaw/subscriptions", "organizations_url": "https://api.github.com/users/Ezrashaw/orgs", "repos_url": "https://api.github.com/users/Ezrashaw/repos", "events_url": "https://api.github.com/users/Ezrashaw/events{/privacy}", "received_events_url": "https://api.github.com/users/Ezrashaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd43458d4c2a01af55f7032f7c47d7c8fecfe560", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd43458d4c2a01af55f7032f7c47d7c8fecfe560", "html_url": "https://github.com/rust-lang/rust/commit/bd43458d4c2a01af55f7032f7c47d7c8fecfe560"}], "stats": {"total": 186, "additions": 169, "deletions": 17}, "files": [{"sha": "df7681dc4267b5d1d3ff4976b1f2797cdb078427", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 32, "deletions": 16, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/bd1732240b586733d8d9fb47cf9ef4cfc299c22e/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd1732240b586733d8d9fb47cf9ef4cfc299c22e/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=bd1732240b586733d8d9fb47cf9ef4cfc299c22e", "patch": "@@ -1289,25 +1289,41 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n                 PathSource::Expr(_) | PathSource::TupleStruct(..) | PathSource::Pat => {\n                     let span = find_span(&source, err);\n                     err.span_label(self.r.def_span(def_id), &format!(\"`{path_str}` defined here\"));\n-                    let (tail, descr, applicability) = match source {\n-                        PathSource::Pat | PathSource::TupleStruct(..) => {\n-                            (\"\", \"pattern\", Applicability::MachineApplicable)\n-                        }\n-                        _ => (\": val\", \"literal\", Applicability::HasPlaceholders),\n-                    };\n \n+                    let (tail, descr, applicability, old_fields) = match source {\n+                        PathSource::Pat => (\"\", \"pattern\", Applicability::MachineApplicable, None),\n+                        PathSource::TupleStruct(_, args) => (\n+                            \"\",\n+                            \"pattern\",\n+                            Applicability::MachineApplicable,\n+                            Some(\n+                                args.iter()\n+                                    .map(|a| self.r.tcx.sess.source_map().span_to_snippet(*a).ok())\n+                                    .collect::<Vec<Option<String>>>(),\n+                            ),\n+                        ),\n+                        _ => (\": val\", \"literal\", Applicability::HasPlaceholders, None),\n+                    };\n                     let field_ids = self.r.field_def_ids(def_id);\n                     let (fields, applicability) = match field_ids {\n-                        Some(field_ids) => (\n-                            field_ids\n-                                .iter()\n-                                .map(|&field_id| {\n-                                    format!(\"{}{tail}\", self.r.tcx.item_name(field_id))\n-                                })\n-                                .collect::<Vec<String>>()\n-                                .join(\", \"),\n-                            applicability,\n-                        ),\n+                        Some(field_ids) => {\n+                            let fields = field_ids.iter().map(|&id| self.r.tcx.item_name(id));\n+\n+                            let fields = if let Some(old_fields) = old_fields {\n+                                fields\n+                                    .enumerate()\n+                                    .map(|(idx, new)| (new, old_fields.get(idx)))\n+                                    .map(|(new, old)| {\n+                                        let new = new.to_ident_string();\n+                                        if let Some(Some(old)) = old && new != *old { format!(\"{}: {}\", new, old) } else { new }\n+                                    })\n+                                    .collect::<Vec<String>>()\n+                            } else {\n+                                fields.map(|f| format!(\"{f}{tail}\")).collect::<Vec<String>>()\n+                            };\n+\n+                            (fields.join(\", \"), applicability)\n+                        }\n                         None => (\"/* fields */\".to_string(), Applicability::HasPlaceholders),\n                     };\n                     let pad = match field_ids {"}, {"sha": "90d0bb406554350793bc7537752184952bd29eab", "filename": "tests/ui/issues/issue-19086.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd1732240b586733d8d9fb47cf9ef4cfc299c22e/tests%2Fui%2Fissues%2Fissue-19086.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd1732240b586733d8d9fb47cf9ef4cfc299c22e/tests%2Fui%2Fissues%2Fissue-19086.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-19086.stderr?ref=bd1732240b586733d8d9fb47cf9ef4cfc299c22e", "patch": "@@ -5,7 +5,7 @@ LL |     FooB { x: i32, y: i32 }\n    |     ----------------------- `FooB` defined here\n ...\n LL |         FooB(a, b) => println!(\"{} {}\", a, b),\n-   |         ^^^^^^^^^^ help: use struct pattern syntax instead: `FooB { x, y }`\n+   |         ^^^^^^^^^^ help: use struct pattern syntax instead: `FooB { x: a, y: b }`\n \n error: aborting due to previous error\n "}, {"sha": "9b27a61ffd06905be77f622acce6931455bddfde", "filename": "tests/ui/pattern/issue-106862.fixed", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/bd1732240b586733d8d9fb47cf9ef4cfc299c22e/tests%2Fui%2Fpattern%2Fissue-106862.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/bd1732240b586733d8d9fb47cf9ef4cfc299c22e/tests%2Fui%2Fpattern%2Fissue-106862.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fissue-106862.fixed?ref=bd1732240b586733d8d9fb47cf9ef4cfc299c22e", "patch": "@@ -0,0 +1,44 @@\n+// run-rustfix\n+\n+#![allow(unused)]\n+\n+use Foo::{FooB, FooA};\n+\n+enum Foo {\n+    FooA { opt_x: Option<i32>, y: i32 },\n+    FooB { x: i32, y: i32 }\n+}\n+\n+fn main() {\n+    let f = FooB { x: 3, y: 4 };\n+\n+    match f {\n+        FooB { x: a, y: b } => println!(\"{} {}\", a, b),\n+        //~^ ERROR expected tuple struct or tuple variant, found variant `FooB`\n+        _ => (),\n+    }\n+\n+    match f {\n+        FooB { x, y } => println!(\"{} {}\", x, y),\n+        //~^ ERROR expected tuple struct or tuple variant, found variant `FooB`\n+        _ => (),\n+    }\n+\n+    match f {\n+        FooA { opt_x: Some(x), y } => println!(\"{} {}\", x, y),\n+        //~^ ERROR expected tuple struct or tuple variant, found variant `FooA`\n+        _ => (),\n+    }\n+\n+    match f {\n+        FooB { x: a, y: _ } => println!(\"{}\", a),\n+        //~^ ERROR expected tuple struct or tuple variant, found variant `FooB`\n+        _ => (),\n+    }\n+\n+    match f {\n+        FooB { x, y } => (),\n+        //~^ ERROR expected tuple struct or tuple variant, found variant `FooB`\n+        _ => (),\n+    }\n+}"}, {"sha": "590430a784314e1308869b79bb345fc607cba14a", "filename": "tests/ui/pattern/issue-106862.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/bd1732240b586733d8d9fb47cf9ef4cfc299c22e/tests%2Fui%2Fpattern%2Fissue-106862.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd1732240b586733d8d9fb47cf9ef4cfc299c22e/tests%2Fui%2Fpattern%2Fissue-106862.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fissue-106862.rs?ref=bd1732240b586733d8d9fb47cf9ef4cfc299c22e", "patch": "@@ -0,0 +1,44 @@\n+// run-rustfix\n+\n+#![allow(unused)]\n+\n+use Foo::{FooB, FooA};\n+\n+enum Foo {\n+    FooA { opt_x: Option<i32>, y: i32 },\n+    FooB { x: i32, y: i32 }\n+}\n+\n+fn main() {\n+    let f = FooB { x: 3, y: 4 };\n+\n+    match f {\n+        FooB(a, b) => println!(\"{} {}\", a, b),\n+        //~^ ERROR expected tuple struct or tuple variant, found variant `FooB`\n+        _ => (),\n+    }\n+\n+    match f {\n+        FooB(x, y) => println!(\"{} {}\", x, y),\n+        //~^ ERROR expected tuple struct or tuple variant, found variant `FooB`\n+        _ => (),\n+    }\n+\n+    match f {\n+        FooA(Some(x), y) => println!(\"{} {}\", x, y),\n+        //~^ ERROR expected tuple struct or tuple variant, found variant `FooA`\n+        _ => (),\n+    }\n+\n+    match f {\n+        FooB(a, _, _) => println!(\"{}\", a),\n+        //~^ ERROR expected tuple struct or tuple variant, found variant `FooB`\n+        _ => (),\n+    }\n+\n+    match f {\n+        FooB() => (),\n+        //~^ ERROR expected tuple struct or tuple variant, found variant `FooB`\n+        _ => (),\n+    }\n+}"}, {"sha": "27f8ac97284ebd7063a15b629f64736e320bf1a2", "filename": "tests/ui/pattern/issue-106862.stderr", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/bd1732240b586733d8d9fb47cf9ef4cfc299c22e/tests%2Fui%2Fpattern%2Fissue-106862.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd1732240b586733d8d9fb47cf9ef4cfc299c22e/tests%2Fui%2Fpattern%2Fissue-106862.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fissue-106862.stderr?ref=bd1732240b586733d8d9fb47cf9ef4cfc299c22e", "patch": "@@ -0,0 +1,48 @@\n+error[E0532]: expected tuple struct or tuple variant, found variant `FooB`\n+  --> $DIR/issue-106862.rs:16:9\n+   |\n+LL |     FooB { x: i32, y: i32 }\n+   |     ----------------------- `FooB` defined here\n+...\n+LL |         FooB(a, b) => println!(\"{} {}\", a, b),\n+   |         ^^^^^^^^^^ help: use struct pattern syntax instead: `FooB { x: a, y: b }`\n+\n+error[E0532]: expected tuple struct or tuple variant, found variant `FooB`\n+  --> $DIR/issue-106862.rs:22:9\n+   |\n+LL |     FooB { x: i32, y: i32 }\n+   |     ----------------------- `FooB` defined here\n+...\n+LL |         FooB(x, y) => println!(\"{} {}\", x, y),\n+   |         ^^^^^^^^^^ help: use struct pattern syntax instead: `FooB { x, y }`\n+\n+error[E0532]: expected tuple struct or tuple variant, found variant `FooA`\n+  --> $DIR/issue-106862.rs:28:9\n+   |\n+LL |     FooA { opt_x: Option<i32>, y: i32 },\n+   |     ----------------------------------- `FooA` defined here\n+...\n+LL |         FooA(Some(x), y) => println!(\"{} {}\", x, y),\n+   |         ^^^^^^^^^^^^^^^^ help: use struct pattern syntax instead: `FooA { opt_x: Some(x), y }`\n+\n+error[E0532]: expected tuple struct or tuple variant, found variant `FooB`\n+  --> $DIR/issue-106862.rs:34:9\n+   |\n+LL |     FooB { x: i32, y: i32 }\n+   |     ----------------------- `FooB` defined here\n+...\n+LL |         FooB(a, _, _) => println!(\"{}\", a),\n+   |         ^^^^^^^^^^^^^ help: use struct pattern syntax instead: `FooB { x: a, y: _ }`\n+\n+error[E0532]: expected tuple struct or tuple variant, found variant `FooB`\n+  --> $DIR/issue-106862.rs:40:9\n+   |\n+LL |     FooB { x: i32, y: i32 }\n+   |     ----------------------- `FooB` defined here\n+...\n+LL |         FooB() => (),\n+   |         ^^^^^^ help: use struct pattern syntax instead: `FooB { x, y }`\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0532`."}]}