{"sha": "83f126bedf227103463f6f505398d72d4efedd42", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzZjEyNmJlZGYyMjcxMDM0NjNmNmY1MDUzOThkNzJkNGVmZWRkNDI=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-10-21T04:59:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-21T04:59:43Z"}, "message": "Rollup merge of #78101 - RalfJung:foreign-static, r=oli-obk\n\nfix static_ptr_ty for foreign statics\n\nCc https://github.com/rust-lang/rust/issues/74840\n\nThis does not fix that issue but fixes a problem in `static_ptr_ty` that we noticed while discussing that issue. I also added and updated a few comments. The one about `internal` locals being ignored does not seem to have been true [even in the commit that introduced it](https://github.com/rust-lang/rust/pull/44700/files#diff-ae2f3c7e2f9744f7ef43e96072b10e98d4e3fe74a3a399a3ad8a810fbe56c520R139).\n\nr? @oli-obk", "tree": {"sha": "69f0bc8150091aa84a322a863816eabaeed8b778", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69f0bc8150091aa84a322a863816eabaeed8b778"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83f126bedf227103463f6f505398d72d4efedd42", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfj8A/CRBK7hj4Ov3rIwAAdHIIAECnyJEkmJ/z0hAqZ7DdVbJQ\nORsnBV7ic1vVoz6DaLilZvLOkIfglFm15ez6xP5f4aVdu805jyVllRQzaP+adXR+\nI8YtHQfDOtfB58ZNIofTNpsDO/yGcAPIHE7esdgBpfxn2G6tndInWdK9ZqobokjY\ncW4nSZ76WYLJ1J9bK0Rinn2m9wquShidj2z0IUCGUsgm2FI/8rCLyEE7P04lfwkp\nEiIkZ9N9GX4sjzxKdMM33zKM36cpbNgBdYTIqkQuwwqXAYRdXelIfQW1kpp2wLcI\ngXPiSy46ieNh0MNZ87bnvqMHOjq6uch7tetYxqMuiM4ADx8ejMcKWS7mOyzu+gc=\n=Wu9i\n-----END PGP SIGNATURE-----\n", "payload": "tree 69f0bc8150091aa84a322a863816eabaeed8b778\nparent 72ae00bc1df1e2f5b9a68d608347a0aa9b0dede5\nparent 153e843c490d569f4faf8f2e625dc7b837df584f\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1603256383 +0900\ncommitter GitHub <noreply@github.com> 1603256383 +0900\n\nRollup merge of #78101 - RalfJung:foreign-static, r=oli-obk\n\nfix static_ptr_ty for foreign statics\n\nCc https://github.com/rust-lang/rust/issues/74840\n\nThis does not fix that issue but fixes a problem in `static_ptr_ty` that we noticed while discussing that issue. I also added and updated a few comments. The one about `internal` locals being ignored does not seem to have been true [even in the commit that introduced it](https://github.com/rust-lang/rust/pull/44700/files#diff-ae2f3c7e2f9744f7ef43e96072b10e98d4e3fe74a3a399a3ad8a810fbe56c520R139).\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83f126bedf227103463f6f505398d72d4efedd42", "html_url": "https://github.com/rust-lang/rust/commit/83f126bedf227103463f6f505398d72d4efedd42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83f126bedf227103463f6f505398d72d4efedd42/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72ae00bc1df1e2f5b9a68d608347a0aa9b0dede5", "url": "https://api.github.com/repos/rust-lang/rust/commits/72ae00bc1df1e2f5b9a68d608347a0aa9b0dede5", "html_url": "https://github.com/rust-lang/rust/commit/72ae00bc1df1e2f5b9a68d608347a0aa9b0dede5"}, {"sha": "153e843c490d569f4faf8f2e625dc7b837df584f", "url": "https://api.github.com/repos/rust-lang/rust/commits/153e843c490d569f4faf8f2e625dc7b837df584f", "html_url": "https://github.com/rust-lang/rust/commit/153e843c490d569f4faf8f2e625dc7b837df584f"}], "stats": {"total": 42, "additions": 25, "deletions": 17}, "files": [{"sha": "fa40995407f4f81e60ed0df3cb999dd32e52ff4a", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/83f126bedf227103463f6f505398d72d4efedd42/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83f126bedf227103463f6f505398d72d4efedd42/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=83f126bedf227103463f6f505398d72d4efedd42", "patch": "@@ -821,9 +821,6 @@ pub struct LocalDecl<'tcx> {\n     /// flag drop flags to avoid triggering this check as they are introduced\n     /// after typeck.\n     ///\n-    /// Unsafety checking will also ignore dereferences of these locals,\n-    /// so they can be used for raw pointers only used in a desugaring.\n-    ///\n     /// This should be sound because the drop flags are fully algebraic, and\n     /// therefore don't affect the OIBIT or outlives properties of the\n     /// generator.\n@@ -1010,13 +1007,13 @@ impl<'tcx> LocalDecl<'tcx> {\n     }\n \n     /// Returns `Some` if this is a reference to a static item that is used to\n-    /// access that static\n+    /// access that static.\n     pub fn is_ref_to_static(&self) -> bool {\n         matches!(self.local_info, Some(box LocalInfo::StaticRef { .. }))\n     }\n \n-    /// Returns `Some` if this is a reference to a static item that is used to\n-    /// access that static\n+    /// Returns `Some` if this is a reference to a thread-local static item that is used to\n+    /// access that static.\n     pub fn is_ref_to_thread_local(&self) -> bool {\n         match self.local_info {\n             Some(box LocalInfo::StaticRef { is_thread_local, .. }) => is_thread_local,"}, {"sha": "f0bfdae261c643bdf2b6801ea8728aeba82a77e1", "filename": "compiler/rustc_middle/src/mir/tcx.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83f126bedf227103463f6f505398d72d4efedd42/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83f126bedf227103463f6f505398d72d4efedd42/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs?ref=83f126bedf227103463f6f505398d72d4efedd42", "patch": "@@ -152,10 +152,14 @@ impl<'tcx> Rvalue<'tcx> {\n                 tcx.mk_ty(ty::Array(operand.ty(local_decls, tcx), count))\n             }\n             Rvalue::ThreadLocalRef(did) => {\n+                let static_ty = tcx.type_of(did);\n                 if tcx.is_mutable_static(did) {\n-                    tcx.mk_mut_ptr(tcx.type_of(did))\n+                    tcx.mk_mut_ptr(static_ty)\n+                } else if tcx.is_foreign_item(did) {\n+                    tcx.mk_imm_ptr(static_ty)\n                 } else {\n-                    tcx.mk_imm_ref(tcx.lifetimes.re_static, tcx.type_of(did))\n+                    // FIXME: These things don't *really* have 'static lifetime.\n+                    tcx.mk_imm_ref(tcx.lifetimes.re_static, static_ty)\n                 }\n             }\n             Rvalue::Ref(reg, bk, ref place) => {"}, {"sha": "4a20e1c32f99e4c0bb4c0455e928187dbe911b8c", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83f126bedf227103463f6f505398d72d4efedd42/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83f126bedf227103463f6f505398d72d4efedd42/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=83f126bedf227103463f6f505398d72d4efedd42", "patch": "@@ -529,8 +529,12 @@ impl<'tcx> TyCtxt<'tcx> {\n         // Make sure that any constants in the static's type are evaluated.\n         let static_ty = self.normalize_erasing_regions(ty::ParamEnv::empty(), self.type_of(def_id));\n \n+        // Make sure that accesses to unsafe statics end up using raw pointers.\n+        // For thread-locals, this needs to be kept in sync with `Rvalue::ty`.\n         if self.is_mutable_static(def_id) {\n             self.mk_mut_ptr(static_ty)\n+        } else if self.is_foreign_item(def_id) {\n+            self.mk_imm_ptr(static_ty)\n         } else {\n             self.mk_imm_ref(self.lifetimes.re_erased, static_ty)\n         }"}, {"sha": "3d68b862df2d096138b5e9d30ac6c6c275869824", "filename": "compiler/rustc_mir/src/transform/check_unsafety.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/83f126bedf227103463f6f505398d72d4efedd42/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83f126bedf227103463f6f505398d72d4efedd42/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_unsafety.rs?ref=83f126bedf227103463f6f505398d72d4efedd42", "patch": "@@ -204,6 +204,9 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n             if let [] = proj_base {\n                 let decl = &self.body.local_decls[place.local];\n                 if decl.internal {\n+                    // If the projection root is an artifical local that we introduced when\n+                    // desugaring `static`, give a more specific error message\n+                    // (avoid the general \"raw pointer\" clause below, that would only be confusing).\n                     if let Some(box LocalInfo::StaticRef { def_id, .. }) = decl.local_info {\n                         if self.tcx.is_mutable_static(def_id) {\n                             self.require_unsafe("}, {"sha": "88d583b815adba1c8c196f496a1d366aeb35a79a", "filename": "src/test/mir-opt/const_promotion_extern_static.FOO-promoted[0].ConstProp.after.mir", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/83f126bedf227103463f6f505398d72d4efedd42/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO-promoted%5B0%5D.ConstProp.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/83f126bedf227103463f6f505398d72d4efedd42/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO-promoted%5B0%5D.ConstProp.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO-promoted%5B0%5D.ConstProp.after.mir?ref=83f126bedf227103463f6f505398d72d4efedd42", "patch": "@@ -4,17 +4,17 @@ promoted[0] in FOO: &[&i32; 1] = {\n     let mut _0: &[&i32; 1];              // return place in scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n     let mut _1: [&i32; 1];               // in scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n     let mut _2: &i32;                    // in scope 0 at $DIR/const-promotion-extern-static.rs:13:32: 13:45\n-    let mut _3: &i32;                    // in scope 0 at $DIR/const-promotion-extern-static.rs:13:42: 13:43\n+    let mut _3: *const i32;              // in scope 0 at $DIR/const-promotion-extern-static.rs:13:42: 13:43\n \n     bb0: {\n-        _3 = const {alloc2: &i32};       // scope 0 at $DIR/const-promotion-extern-static.rs:13:42: 13:43\n+        _3 = const {alloc2: *const i32}; // scope 0 at $DIR/const-promotion-extern-static.rs:13:42: 13:43\n                                          // ty::Const\n-                                         // + ty: &i32\n+                                         // + ty: *const i32\n                                          // + val: Value(Scalar(alloc2))\n                                          // mir::Constant\n                                          // + span: $DIR/const-promotion-extern-static.rs:13:42: 13:43\n-                                         // + literal: Const { ty: &i32, val: Value(Scalar(alloc2)) }\n-        _2 = _3;                         // scope 0 at $DIR/const-promotion-extern-static.rs:13:41: 13:43\n+                                         // + literal: Const { ty: *const i32, val: Value(Scalar(alloc2)) }\n+        _2 = &(*_3);                     // scope 0 at $DIR/const-promotion-extern-static.rs:13:41: 13:43\n         _1 = [move _2];                  // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n         _0 = &_1;                        // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n         return;                          // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46"}, {"sha": "82277b2a21cbef3515c527e46a6b18f860c37626", "filename": "src/test/mir-opt/const_promotion_extern_static.FOO.PromoteTemps.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83f126bedf227103463f6f505398d72d4efedd42/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/83f126bedf227103463f6f505398d72d4efedd42/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff?ref=83f126bedf227103463f6f505398d72d4efedd42", "patch": "@@ -7,7 +7,7 @@\n       let mut _2: &[&i32; 1];              // in scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n       let _3: [&i32; 1];                   // in scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n       let mut _4: &i32;                    // in scope 0 at $DIR/const-promotion-extern-static.rs:13:32: 13:45\n-      let _5: &i32;                        // in scope 0 at $DIR/const-promotion-extern-static.rs:13:42: 13:43\n+      let _5: *const i32;                  // in scope 0 at $DIR/const-promotion-extern-static.rs:13:42: 13:43\n +     let mut _6: &[&i32; 1];              // in scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n       scope 1 {\n       }\n@@ -18,16 +18,16 @@\n -         StorageLive(_3);                 // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n -         StorageLive(_4);                 // scope 0 at $DIR/const-promotion-extern-static.rs:13:32: 13:45\n -         StorageLive(_5);                 // scope 1 at $DIR/const-promotion-extern-static.rs:13:42: 13:43\n--         _5 = const {alloc2: &i32};       // scope 1 at $DIR/const-promotion-extern-static.rs:13:42: 13:43\n+-         _5 = const {alloc2: *const i32}; // scope 1 at $DIR/const-promotion-extern-static.rs:13:42: 13:43\n +         _6 = const FOO::promoted[0];     // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n                                            // ty::Const\n--                                          // + ty: &i32\n+-                                          // + ty: *const i32\n -                                          // + val: Value(Scalar(alloc2))\n +                                          // + ty: &[&i32; 1]\n +                                          // + val: Unevaluated(WithOptConstParam { did: DefId(0:7 ~ const_promotion_extern_static[317d]::FOO), const_param_did: None }, [], Some(promoted[0]))\n                                            // mir::Constant\n -                                          // + span: $DIR/const-promotion-extern-static.rs:13:42: 13:43\n--                                          // + literal: Const { ty: &i32, val: Value(Scalar(alloc2)) }\n+-                                          // + literal: Const { ty: *const i32, val: Value(Scalar(alloc2)) }\n -         _4 = &(*_5);                     // scope 1 at $DIR/const-promotion-extern-static.rs:13:41: 13:43\n -         _3 = [move _4];                  // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n -         _2 = &_3;                        // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46"}]}