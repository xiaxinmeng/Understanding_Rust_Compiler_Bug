{"sha": "54a20a02ecd0e1352a871aa0990bcc8b8b03173e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0YTIwYTAyZWNkMGUxMzUyYTg3MWFhMDk5MGJjYzhiOGIwMzE3M2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-15T08:37:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-15T08:37:36Z"}, "message": "Auto merge of #7468 - flip1995:rustup, r=flip1995\n\nRustup\n\nr? `@ghost`\n\nchangelog: none", "tree": {"sha": "0805adc5b0eb85048af44554eaf1b0c7e8080908", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0805adc5b0eb85048af44554eaf1b0c7e8080908"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54a20a02ecd0e1352a871aa0990bcc8b8b03173e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54a20a02ecd0e1352a871aa0990bcc8b8b03173e", "html_url": "https://github.com/rust-lang/rust/commit/54a20a02ecd0e1352a871aa0990bcc8b8b03173e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54a20a02ecd0e1352a871aa0990bcc8b8b03173e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09f5f15d8ba660d9c657fdc4a34d7aab7bc4ecad", "url": "https://api.github.com/repos/rust-lang/rust/commits/09f5f15d8ba660d9c657fdc4a34d7aab7bc4ecad", "html_url": "https://github.com/rust-lang/rust/commit/09f5f15d8ba660d9c657fdc4a34d7aab7bc4ecad"}, {"sha": "43b0121fa74a883988c440358ea4e462afadfe77", "url": "https://api.github.com/repos/rust-lang/rust/commits/43b0121fa74a883988c440358ea4e462afadfe77", "html_url": "https://github.com/rust-lang/rust/commit/43b0121fa74a883988c440358ea4e462afadfe77"}], "stats": {"total": 90, "additions": 40, "deletions": 50}, "files": [{"sha": "9f89f74e7450361f45def111ae1aeea75ef3e328", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54a20a02ecd0e1352a871aa0990bcc8b8b03173e/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/54a20a02ecd0e1352a871aa0990bcc8b8b03173e/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=54a20a02ecd0e1352a871aa0990bcc8b8b03173e", "patch": "@@ -592,7 +592,7 @@ Released 2021-02-11\n \n * Previously deprecated [`str_to_string`] and [`string_to_string`] have been un-deprecated\n   as `restriction` lints [#6333](https://github.com/rust-lang/rust-clippy/pull/6333)\n-* Deprecate `panic_params` lint. This is now available in rustc as `non_fmt_panic`\n+* Deprecate `panic_params` lint. This is now available in rustc as `non_fmt_panics`\n   [#6351](https://github.com/rust-lang/rust-clippy/pull/6351)\n * Move [`map_err_ignore`] to `restriction`\n   [#6416](https://github.com/rust-lang/rust-clippy/pull/6416)"}, {"sha": "0c19988a975a85b156031f4616084317be3c6059", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/54a20a02ecd0e1352a871aa0990bcc8b8b03173e/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54a20a02ecd0e1352a871aa0990bcc8b8b03173e/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=54a20a02ecd0e1352a871aa0990bcc8b8b03173e", "patch": "@@ -26,6 +26,7 @@ use rustc_span::source_map::{BytePos, FilePathMapping, MultiSpan, SourceMap, Spa\n use rustc_span::{sym, FileName, Pos};\n use std::io;\n use std::ops::Range;\n+use std::thread;\n use url::Url;\n \n declare_clippy_lint! {\n@@ -584,17 +585,17 @@ fn get_current_span(spans: &[(usize, Span)], idx: usize) -> (usize, Span) {\n }\n \n fn check_code(cx: &LateContext<'_>, text: &str, edition: Edition, span: Span) {\n-    fn has_needless_main(code: &str, edition: Edition) -> bool {\n+    fn has_needless_main(code: String, edition: Edition) -> bool {\n         rustc_driver::catch_fatal_errors(|| {\n-            rustc_span::with_session_globals(edition, || {\n-                let filename = FileName::anon_source_code(code);\n+            rustc_span::create_session_globals_then(edition, || {\n+                let filename = FileName::anon_source_code(&code);\n \n                 let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n                 let emitter = EmitterWriter::new(box io::sink(), None, false, false, false, None, false);\n                 let handler = Handler::with_emitter(false, None, box emitter);\n                 let sess = ParseSess::with_span_handler(handler, sm);\n \n-                let mut parser = match maybe_new_parser_from_source_str(&sess, filename, code.into()) {\n+                let mut parser = match maybe_new_parser_from_source_str(&sess, filename, code) {\n                     Ok(p) => p,\n                     Err(errs) => {\n                         for mut err in errs {\n@@ -649,7 +650,13 @@ fn check_code(cx: &LateContext<'_>, text: &str, edition: Edition, span: Span) {\n         .unwrap_or_default()\n     }\n \n-    if has_needless_main(text, edition) {\n+    // Because of the global session, we need to create a new session in a different thread with\n+    // the edition we need.\n+    let text = text.to_owned();\n+    if thread::spawn(move || has_needless_main(text, edition))\n+        .join()\n+        .expect(\"thread::spawn failed\")\n+    {\n         span_lint(cx, NEEDLESS_DOCTEST_MAIN, span, \"needless `fn main` in doctest\");\n     }\n }"}, {"sha": "4f8f3aa96cb1b124add8817ab4358da09f6c9245", "filename": "clippy_lints/src/implicit_hasher.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54a20a02ecd0e1352a871aa0990bcc8b8b03173e/clippy_lints%2Fsrc%2Fimplicit_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54a20a02ecd0e1352a871aa0990bcc8b8b03173e/clippy_lints%2Fsrc%2Fimplicit_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_hasher.rs?ref=54a20a02ecd0e1352a871aa0990bcc8b8b03173e", "patch": "@@ -1,5 +1,3 @@\n-#![allow(rustc::default_hash_types)]\n-\n use std::borrow::Cow;\n use std::collections::BTreeMap;\n "}, {"sha": "1af3a215f4468b4211bd7aa28a1e74ce8648604f", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54a20a02ecd0e1352a871aa0990bcc8b8b03173e/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54a20a02ecd0e1352a871aa0990bcc8b8b03173e/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=54a20a02ecd0e1352a871aa0990bcc8b8b03173e", "patch": "@@ -2177,7 +2177,7 @@ pub fn register_renamed(ls: &mut rustc_lint::LintStore) {\n     ls.register_renamed(\"clippy::unused_label\", \"unused_labels\");\n     ls.register_renamed(\"clippy::drop_bounds\", \"drop_bounds\");\n     ls.register_renamed(\"clippy::temporary_cstring_as_ptr\", \"temporary_cstring_as_ptr\");\n-    ls.register_renamed(\"clippy::panic_params\", \"non_fmt_panic\");\n+    ls.register_renamed(\"clippy::panic_params\", \"non_fmt_panics\");\n     ls.register_renamed(\"clippy::unknown_clippy_lints\", \"unknown_lints\");\n }\n "}, {"sha": "7cfce2e61cca59e153cf08caf4c40fb08880cd99", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/54a20a02ecd0e1352a871aa0990bcc8b8b03173e/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54a20a02ecd0e1352a871aa0990bcc8b8b03173e/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=54a20a02ecd0e1352a871aa0990bcc8b8b03173e", "patch": "@@ -662,14 +662,7 @@ fn in_attributes_expansion(expr: &Expr<'_>) -> bool {\n     use rustc_span::hygiene::MacroKind;\n     if expr.span.from_expansion() {\n         let data = expr.span.ctxt().outer_expn_data();\n-        matches!(\n-            data.kind,\n-            ExpnKind::Macro {\n-                kind: MacroKind::Attr,\n-                name: _,\n-                proc_macro: _\n-            }\n-        )\n+        matches!(data.kind, ExpnKind::Macro(MacroKind::Attr, _))\n     } else {\n         false\n     }"}, {"sha": "4dbbb14c504fa445f334b4b008ac248ed911a17b", "filename": "clippy_lints/src/mut_key.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54a20a02ecd0e1352a871aa0990bcc8b8b03173e/clippy_lints%2Fsrc%2Fmut_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54a20a02ecd0e1352a871aa0990bcc8b8b03173e/clippy_lints%2Fsrc%2Fmut_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_key.rs?ref=54a20a02ecd0e1352a871aa0990bcc8b8b03173e", "patch": "@@ -120,8 +120,8 @@ fn is_mutable_type<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>, span: Span) -> bo\n         },\n         Tuple(..) => ty.tuple_fields().any(|ty| is_mutable_type(cx, ty, span)),\n         Adt(..) => {\n-            cx.tcx.layout_of(cx.param_env.and(ty)).is_ok()\n-                && !ty.has_escaping_bound_vars()\n+            !ty.has_escaping_bound_vars()\n+                && cx.tcx.layout_of(cx.param_env.and(ty)).is_ok()\n                 && !ty.is_freeze(cx.tcx.at(span), cx.param_env)\n         },\n         _ => false,"}, {"sha": "85257f3113cb774adc43f326707c0182b1eac616", "filename": "clippy_lints/src/unit_types/unit_cmp.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/54a20a02ecd0e1352a871aa0990bcc8b8b03173e/clippy_lints%2Fsrc%2Funit_types%2Funit_cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54a20a02ecd0e1352a871aa0990bcc8b8b03173e/clippy_lints%2Fsrc%2Funit_types%2Funit_cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_types%2Funit_cmp.rs?ref=54a20a02ecd0e1352a871aa0990bcc8b8b03173e", "patch": "@@ -8,12 +8,7 @@ use super::UNIT_CMP;\n pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>) {\n     if expr.span.from_expansion() {\n         if let Some(callee) = expr.span.source_callee() {\n-            if let ExpnKind::Macro {\n-                kind: MacroKind::Bang,\n-                name: symbol,\n-                proc_macro: _,\n-            } = callee.kind\n-            {\n+            if let ExpnKind::Macro(MacroKind::Bang, symbol) = callee.kind {\n                 if let ExprKind::Binary(ref cmp, left, _) = expr.kind {\n                     let op = cmp.node;\n                     if op.is_comparison() && cx.typeck_results().expr_ty(left).is_unit() {"}, {"sha": "3eccc89cdeb808f813a32177d5af76f6819c0fed", "filename": "clippy_lints/src/utils/internal_lints/metadata_collector.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54a20a02ecd0e1352a871aa0990bcc8b8b03173e/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54a20a02ecd0e1352a871aa0990bcc8b8b03173e/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs?ref=54a20a02ecd0e1352a871aa0990bcc8b8b03173e", "patch": "@@ -520,7 +520,9 @@ fn get_lint_group_and_level_or_lint(\n     lint_name: &str,\n     item: &'hir Item<'_>,\n ) -> Option<(String, &'static str)> {\n-    let result = cx.lint_store.check_lint_name(lint_name, Some(sym::clippy));\n+    let result = cx\n+        .lint_store\n+        .check_lint_name(cx.sess(), lint_name, Some(sym::clippy), &[]);\n     if let CheckLintNameResult::Tool(Ok(lint_lst)) = result {\n         if let Some(group) = get_lint_group(cx, lint_lst[0]) {\n             if EXCLUDED_LINT_GROUPS.contains(&group.as_str()) {"}, {"sha": "3e3e472e99fb69215e7e07b2c70d34c4842674dd", "filename": "clippy_utils/src/higher.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54a20a02ecd0e1352a871aa0990bcc8b8b03173e/clippy_utils%2Fsrc%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54a20a02ecd0e1352a871aa0990bcc8b8b03173e/clippy_utils%2Fsrc%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhigher.rs?ref=54a20a02ecd0e1352a871aa0990bcc8b8b03173e", "patch": "@@ -285,7 +285,7 @@ impl FormatExpn<'tcx> {\n             if let Some(init) = local.init;\n             if let ExprKind::Call(_, [format_args]) = init.kind;\n             let expn_data = expr.span.ctxt().outer_expn_data();\n-            if let ExpnKind::Macro { name: sym::format, .. } = expn_data.kind;\n+            if let ExpnKind::Macro(_, sym::format) = expn_data.kind;\n             if let Some(format_args) = FormatArgsExpn::parse(format_args);\n             then {\n                 Some(FormatExpn {\n@@ -320,7 +320,7 @@ impl FormatArgsExpn<'tcx> {\n     /// Parses an expanded `format_args!` or `format_args_nl!` invocation\n     pub fn parse(expr: &'tcx Expr<'tcx>) -> Option<Self> {\n         if_chain! {\n-            if let ExpnKind::Macro { name, .. } = expr.span.ctxt().outer_expn_data().kind;\n+            if let ExpnKind::Macro(_, name) = expr.span.ctxt().outer_expn_data().kind;\n             let name = name.as_str();\n             if name.ends_with(\"format_args\") || name.ends_with(\"format_args_nl\");\n             if let ExprKind::Call(_, args) = expr.kind;"}, {"sha": "6db221ab0fdfdf2a3893c623e14afc0d7eb479a5", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/54a20a02ecd0e1352a871aa0990bcc8b8b03173e/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54a20a02ecd0e1352a871aa0990bcc8b8b03173e/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=54a20a02ecd0e1352a871aa0990bcc8b8b03173e", "patch": "@@ -483,7 +483,7 @@ pub fn path_to_res(cx: &LateContext<'_>, path: &[&str]) -> Res {\n         _ => return Res::Err,\n     };\n     let tcx = cx.tcx;\n-    let crates = tcx.crates();\n+    let crates = tcx.crates(());\n     let krate = try_res!(crates.iter().find(|&&num| tcx.crate_name(num).as_str() == krate));\n     let first = try_res!(item_child_by_name(tcx, krate.as_def_id(), first));\n     let last = path\n@@ -953,12 +953,7 @@ pub fn is_expn_of(mut span: Span, name: &str) -> Option<Span> {\n             let data = span.ctxt().outer_expn_data();\n             let new_span = data.call_site;\n \n-            if let ExpnKind::Macro {\n-                kind: MacroKind::Bang,\n-                name: mac_name,\n-                proc_macro: _,\n-            } = data.kind\n-            {\n+            if let ExpnKind::Macro(MacroKind::Bang, mac_name) = data.kind {\n                 if mac_name.as_str() == name {\n                     return Some(new_span);\n                 }\n@@ -986,12 +981,7 @@ pub fn is_direct_expn_of(span: Span, name: &str) -> Option<Span> {\n         let data = span.ctxt().outer_expn_data();\n         let new_span = data.call_site;\n \n-        if let ExpnKind::Macro {\n-            kind: MacroKind::Bang,\n-            name: mac_name,\n-            proc_macro: _,\n-        } = data.kind\n-        {\n+        if let ExpnKind::Macro(MacroKind::Bang, mac_name) = data.kind {\n             if mac_name.as_str() == name {\n                 return Some(new_span);\n             }"}, {"sha": "3f5c5604d43f5e5b481cb370ad45739cf05e3942", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/54a20a02ecd0e1352a871aa0990bcc8b8b03173e/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54a20a02ecd0e1352a871aa0990bcc8b8b03173e/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=54a20a02ecd0e1352a871aa0990bcc8b8b03173e", "patch": "@@ -14,6 +14,7 @@ use rustc_middle::ty::{self, AdtDef, IntTy, Ty, TypeFoldable, UintTy};\n use rustc_span::sym;\n use rustc_span::symbol::{Ident, Symbol};\n use rustc_span::DUMMY_SP;\n+use rustc_trait_selection::infer::InferCtxtExt;\n use rustc_trait_selection::traits::query::normalize::AtExt;\n \n use crate::{match_def_path, must_use_attr};\n@@ -112,23 +113,27 @@ pub fn has_iter_method(cx: &LateContext<'_>, probably_ref_ty: Ty<'_>) -> Option<\n }\n \n /// Checks whether a type implements a trait.\n+/// The function returns false in case the type contains an inference variable.\n /// See also `get_trait_def_id`.\n pub fn implements_trait<'tcx>(\n     cx: &LateContext<'tcx>,\n     ty: Ty<'tcx>,\n     trait_id: DefId,\n     ty_params: &[GenericArg<'tcx>],\n ) -> bool {\n-    // Do not check on infer_types to avoid panic in evaluate_obligation.\n-    if ty.has_infer_types() {\n-        return false;\n-    }\n+    // Clippy shouldn't have infer types\n+    assert!(!ty.needs_infer());\n+\n     let ty = cx.tcx.erase_regions(ty);\n     if ty.has_escaping_bound_vars() {\n         return false;\n     }\n     let ty_params = cx.tcx.mk_substs(ty_params.iter());\n-    cx.tcx.type_implements_trait((trait_id, ty, ty_params, cx.param_env))\n+    cx.tcx.infer_ctxt().enter(|infcx| {\n+        infcx\n+            .type_implements_trait(trait_id, ty, ty_params, cx.param_env)\n+            .must_apply_modulo_regions()\n+    })\n }\n \n /// Checks whether this type implements `Drop`."}, {"sha": "bf9cfb61b46d1a0e5d9895a91f50d36cb4699b5d", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54a20a02ecd0e1352a871aa0990bcc8b8b03173e/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/54a20a02ecd0e1352a871aa0990bcc8b8b03173e/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=54a20a02ecd0e1352a871aa0990bcc8b8b03173e", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2021-07-01\"\n+channel = \"nightly-2021-07-15\"\n components = [\"llvm-tools-preview\", \"rustc-dev\", \"rust-src\"]"}, {"sha": "2180f848d62cd256f7538d100d6cf5c634398ec2", "filename": "tests/ui/assertions_on_constants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54a20a02ecd0e1352a871aa0990bcc8b8b03173e/tests%2Fui%2Fassertions_on_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54a20a02ecd0e1352a871aa0990bcc8b8b03173e/tests%2Fui%2Fassertions_on_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassertions_on_constants.rs?ref=54a20a02ecd0e1352a871aa0990bcc8b8b03173e", "patch": "@@ -1,4 +1,4 @@\n-#![allow(non_fmt_panic)]\n+#![allow(non_fmt_panics)]\n \n macro_rules! assert_const {\n     ($len:expr) => {"}, {"sha": "c0002e5354310ab9bcc32c2f0753e534c02ff9eb", "filename": "tests/ui/deprecated.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54a20a02ecd0e1352a871aa0990bcc8b8b03173e/tests%2Fui%2Fdeprecated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/54a20a02ecd0e1352a871aa0990bcc8b8b03173e/tests%2Fui%2Fdeprecated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeprecated.stderr?ref=54a20a02ecd0e1352a871aa0990bcc8b8b03173e", "patch": "@@ -60,11 +60,11 @@ error: lint `clippy::temporary_cstring_as_ptr` has been renamed to `temporary_cs\n LL | #[warn(clippy::temporary_cstring_as_ptr)]\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `temporary_cstring_as_ptr`\n \n-error: lint `clippy::panic_params` has been renamed to `non_fmt_panic`\n+error: lint `clippy::panic_params` has been renamed to `non_fmt_panics`\n   --> $DIR/deprecated.rs:11:8\n    |\n LL | #[warn(clippy::panic_params)]\n-   |        ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `non_fmt_panic`\n+   |        ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `non_fmt_panics`\n \n error: lint `clippy::unknown_clippy_lints` has been renamed to `unknown_lints`\n   --> $DIR/deprecated.rs:12:8"}]}