{"sha": "225b6baae78a4342e713f9afdd31d2eccf6d63b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyNWI2YmFhZTc4YTQzNDJlNzEzZjlhZmRkMzFkMmVjY2Y2ZDYzYjg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-03-22T18:31:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-22T18:31:21Z"}, "message": "Rollup merge of #59190 - greg-kargin:master, r=sanxiyn\n\nconsistent naming for Rhs type parameter in libcore/ops\n\nRename RHS type parameter occurrences RHS->Rhs to make it consistent throughout files and follow naming conventions.", "tree": {"sha": "cc57fe7700c712a18082c131f06296ada142924a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc57fe7700c712a18082c131f06296ada142924a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/225b6baae78a4342e713f9afdd31d2eccf6d63b8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJclSn5CRBK7hj4Ov3rIwAAdHIIADxd5EILh2oVt/d66ERQMuHJ\nRsJfzKslZFkLfWuYDFBzvY2/rlbO4/uAJM4xfy/3d3eTPmUKsaItyBufxr3EkYDc\ntShEjaqo9x0wAKJSggO5/sgn5BSD2x9HYBZqGXpYEx4yb8f96zHDxpSjoV7kJXYg\nnJupItsQColE191gi9zMeOvpRcdHJOJYUvqfGukPol0wBOf70SdBuaw1fVG+TD9i\njyLCJvp4+UaEg041JFfKiCgFVAvdGIn9SRScVHdR5+SIHuWLc+Bn0+Ze1b4k2sXP\nCmbtZL3Wvu9M/LF59QksVzw+cHwquZ75LRZ0IB1n1/HxddomZNUeytazXDuHQao=\n=9tkm\n-----END PGP SIGNATURE-----\n", "payload": "tree cc57fe7700c712a18082c131f06296ada142924a\nparent e744fb7ac10fd3e50d69e084c4b15688ead539b7\nparent 7f395d2b3a5829f0557bfdca137e7838aa30d85a\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1553279481 +0100\ncommitter GitHub <noreply@github.com> 1553279481 +0100\n\nRollup merge of #59190 - greg-kargin:master, r=sanxiyn\n\nconsistent naming for Rhs type parameter in libcore/ops\n\nRename RHS type parameter occurrences RHS->Rhs to make it consistent throughout files and follow naming conventions.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/225b6baae78a4342e713f9afdd31d2eccf6d63b8", "html_url": "https://github.com/rust-lang/rust/commit/225b6baae78a4342e713f9afdd31d2eccf6d63b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/225b6baae78a4342e713f9afdd31d2eccf6d63b8/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e744fb7ac10fd3e50d69e084c4b15688ead539b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/e744fb7ac10fd3e50d69e084c4b15688ead539b7", "html_url": "https://github.com/rust-lang/rust/commit/e744fb7ac10fd3e50d69e084c4b15688ead539b7"}, {"sha": "7f395d2b3a5829f0557bfdca137e7838aa30d85a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f395d2b3a5829f0557bfdca137e7838aa30d85a", "html_url": "https://github.com/rust-lang/rust/commit/7f395d2b3a5829f0557bfdca137e7838aa30d85a"}], "stats": {"total": 112, "additions": 56, "deletions": 56}, "files": [{"sha": "28c9ff94dee7853db30f9cbcdbe382dda3b3b30a", "filename": "src/libcore/ops/arith.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/225b6baae78a4342e713f9afdd31d2eccf6d63b8/src%2Flibcore%2Fops%2Farith.rs", "raw_url": "https://github.com/rust-lang/rust/raw/225b6baae78a4342e713f9afdd31d2eccf6d63b8/src%2Flibcore%2Fops%2Farith.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Farith.rs?ref=225b6baae78a4342e713f9afdd31d2eccf6d63b8", "patch": "@@ -1,6 +1,6 @@\n /// The addition operator `+`.\n ///\n-/// Note that `RHS` is `Self` by default, but this is not mandatory. For\n+/// Note that `Rhs` is `Self` by default, but this is not mandatory. For\n /// example, [`std::time::SystemTime`] implements `Add<Duration>`, which permits\n /// operations of the form `SystemTime = SystemTime + Duration`.\n ///\n@@ -67,26 +67,26 @@\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_on_unimplemented(\n     on(\n-        all(_Self=\"{integer}\", RHS=\"{float}\"),\n+        all(_Self=\"{integer}\", Rhs=\"{float}\"),\n         message=\"cannot add a float to an integer\",\n     ),\n     on(\n-        all(_Self=\"{float}\", RHS=\"{integer}\"),\n+        all(_Self=\"{float}\", Rhs=\"{integer}\"),\n         message=\"cannot add an integer to a float\",\n     ),\n-    message=\"cannot add `{RHS}` to `{Self}`\",\n-    label=\"no implementation for `{Self} + {RHS}`\",\n+    message=\"cannot add `{Rhs}` to `{Self}`\",\n+    label=\"no implementation for `{Self} + {Rhs}`\",\n )]\n #[doc(alias = \"+\")]\n-pub trait Add<RHS=Self> {\n+pub trait Add<Rhs=Self> {\n     /// The resulting type after applying the `+` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Output;\n \n     /// Performs the `+` operation.\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn add(self, rhs: RHS) -> Self::Output;\n+    fn add(self, rhs: Rhs) -> Self::Output;\n }\n \n macro_rules! add_impl {\n@@ -108,7 +108,7 @@ add_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n \n /// The subtraction operator `-`.\n ///\n-/// Note that `RHS` is `Self` by default, but this is not mandatory. For\n+/// Note that `Rhs` is `Self` by default, but this is not mandatory. For\n /// example, [`std::time::SystemTime`] implements `Sub<Duration>`, which permits\n /// operations of the form `SystemTime = SystemTime - Duration`.\n ///\n@@ -173,18 +173,18 @@ add_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n /// ```\n #[lang = \"sub\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented(message=\"cannot subtract `{RHS}` from `{Self}`\",\n-                         label=\"no implementation for `{Self} - {RHS}`\")]\n+#[rustc_on_unimplemented(message=\"cannot subtract `{Rhs}` from `{Self}`\",\n+                         label=\"no implementation for `{Self} - {Rhs}`\")]\n #[doc(alias = \"-\")]\n-pub trait Sub<RHS=Self> {\n+pub trait Sub<Rhs=Self> {\n     /// The resulting type after applying the `-` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Output;\n \n     /// Performs the `-` operation.\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn sub(self, rhs: RHS) -> Self::Output;\n+    fn sub(self, rhs: Rhs) -> Self::Output;\n }\n \n macro_rules! sub_impl {\n@@ -206,7 +206,7 @@ sub_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n \n /// The multiplication operator `*`.\n ///\n-/// Note that `RHS` is `Self` by default, but this is not mandatory.\n+/// Note that `Rhs` is `Self` by default, but this is not mandatory.\n ///\n /// # Examples\n ///\n@@ -293,18 +293,18 @@ sub_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n /// ```\n #[lang = \"mul\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented(message=\"cannot multiply `{RHS}` to `{Self}`\",\n-                         label=\"no implementation for `{Self} * {RHS}`\")]\n+#[rustc_on_unimplemented(message=\"cannot multiply `{Rhs}` to `{Self}`\",\n+                         label=\"no implementation for `{Self} * {Rhs}`\")]\n #[doc(alias = \"*\")]\n-pub trait Mul<RHS=Self> {\n+pub trait Mul<Rhs=Self> {\n     /// The resulting type after applying the `*` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Output;\n \n     /// Performs the `*` operation.\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn mul(self, rhs: RHS) -> Self::Output;\n+    fn mul(self, rhs: Rhs) -> Self::Output;\n }\n \n macro_rules! mul_impl {\n@@ -326,7 +326,7 @@ mul_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n \n /// The division operator `/`.\n ///\n-/// Note that `RHS` is `Self` by default, but this is not mandatory.\n+/// Note that `Rhs` is `Self` by default, but this is not mandatory.\n ///\n /// # Examples\n ///\n@@ -417,18 +417,18 @@ mul_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n /// ```\n #[lang = \"div\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented(message=\"cannot divide `{Self}` by `{RHS}`\",\n-                         label=\"no implementation for `{Self} / {RHS}`\")]\n+#[rustc_on_unimplemented(message=\"cannot divide `{Self}` by `{Rhs}`\",\n+                         label=\"no implementation for `{Self} / {Rhs}`\")]\n #[doc(alias = \"/\")]\n-pub trait Div<RHS=Self> {\n+pub trait Div<Rhs=Self> {\n     /// The resulting type after applying the `/` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Output;\n \n     /// Performs the `/` operation.\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn div(self, rhs: RHS) -> Self::Output;\n+    fn div(self, rhs: Rhs) -> Self::Output;\n }\n \n macro_rules! div_impl_integer {\n@@ -467,7 +467,7 @@ div_impl_float! { f32 f64 }\n \n /// The remainder operator `%`.\n ///\n-/// Note that `RHS` is `Self` by default, but this is not mandatory.\n+/// Note that `Rhs` is `Self` by default, but this is not mandatory.\n ///\n /// # Examples\n ///\n@@ -502,18 +502,18 @@ div_impl_float! { f32 f64 }\n /// ```\n #[lang = \"rem\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented(message=\"cannot mod `{Self}` by `{RHS}`\",\n-                         label=\"no implementation for `{Self} % {RHS}`\")]\n+#[rustc_on_unimplemented(message=\"cannot mod `{Self}` by `{Rhs}`\",\n+                         label=\"no implementation for `{Self} % {Rhs}`\")]\n #[doc(alias = \"%\")]\n-pub trait Rem<RHS=Self> {\n+pub trait Rem<Rhs=Self> {\n     /// The resulting type after applying the `%` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Output = Self;\n \n     /// Performs the `%` operation.\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn rem(self, rhs: RHS) -> Self::Output;\n+    fn rem(self, rhs: Rhs) -> Self::Output;\n }\n \n macro_rules! rem_impl_integer {"}, {"sha": "a8f862f6c05a55f010d0e2dca351e90faaa2d976", "filename": "src/libcore/ops/bit.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/225b6baae78a4342e713f9afdd31d2eccf6d63b8/src%2Flibcore%2Fops%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/225b6baae78a4342e713f9afdd31d2eccf6d63b8/src%2Flibcore%2Fops%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fbit.rs?ref=225b6baae78a4342e713f9afdd31d2eccf6d63b8", "patch": "@@ -59,7 +59,7 @@ not_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n \n /// The bitwise AND operator `&`.\n ///\n-/// Note that `RHS` is `Self` by default, but this is not mandatory.\n+/// Note that `Rhs` is `Self` by default, but this is not mandatory.\n ///\n /// # Examples\n ///\n@@ -112,17 +112,17 @@ not_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n #[lang = \"bitand\"]\n #[doc(alias = \"&\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented(message=\"no implementation for `{Self} & {RHS}`\",\n-                         label=\"no implementation for `{Self} & {RHS}`\")]\n-pub trait BitAnd<RHS=Self> {\n+#[rustc_on_unimplemented(message=\"no implementation for `{Self} & {Rhs}`\",\n+                         label=\"no implementation for `{Self} & {Rhs}`\")]\n+pub trait BitAnd<Rhs=Self> {\n     /// The resulting type after applying the `&` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Output;\n \n     /// Performs the `&` operation.\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn bitand(self, rhs: RHS) -> Self::Output;\n+    fn bitand(self, rhs: Rhs) -> Self::Output;\n }\n \n macro_rules! bitand_impl {\n@@ -143,7 +143,7 @@ bitand_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n \n /// The bitwise OR operator `|`.\n ///\n-/// Note that `RHS` is `Self` by default, but this is not mandatory.\n+/// Note that `Rhs` is `Self` by default, but this is not mandatory.\n ///\n /// # Examples\n ///\n@@ -196,17 +196,17 @@ bitand_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n #[lang = \"bitor\"]\n #[doc(alias = \"|\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented(message=\"no implementation for `{Self} | {RHS}`\",\n-                         label=\"no implementation for `{Self} | {RHS}`\")]\n-pub trait BitOr<RHS=Self> {\n+#[rustc_on_unimplemented(message=\"no implementation for `{Self} | {Rhs}`\",\n+                         label=\"no implementation for `{Self} | {Rhs}`\")]\n+pub trait BitOr<Rhs=Self> {\n     /// The resulting type after applying the `|` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Output;\n \n     /// Performs the `|` operation.\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn bitor(self, rhs: RHS) -> Self::Output;\n+    fn bitor(self, rhs: Rhs) -> Self::Output;\n }\n \n macro_rules! bitor_impl {\n@@ -227,7 +227,7 @@ bitor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n \n /// The bitwise XOR operator `^`.\n ///\n-/// Note that `RHS` is `Self` by default, but this is not mandatory.\n+/// Note that `Rhs` is `Self` by default, but this is not mandatory.\n ///\n /// # Examples\n ///\n@@ -283,17 +283,17 @@ bitor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n #[lang = \"bitxor\"]\n #[doc(alias = \"^\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented(message=\"no implementation for `{Self} ^ {RHS}`\",\n-                         label=\"no implementation for `{Self} ^ {RHS}`\")]\n-pub trait BitXor<RHS=Self> {\n+#[rustc_on_unimplemented(message=\"no implementation for `{Self} ^ {Rhs}`\",\n+                         label=\"no implementation for `{Self} ^ {Rhs}`\")]\n+pub trait BitXor<Rhs=Self> {\n     /// The resulting type after applying the `^` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Output;\n \n     /// Performs the `^` operation.\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn bitxor(self, rhs: RHS) -> Self::Output;\n+    fn bitxor(self, rhs: Rhs) -> Self::Output;\n }\n \n macro_rules! bitxor_impl {\n@@ -371,17 +371,17 @@ bitxor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n #[lang = \"shl\"]\n #[doc(alias = \"<<\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented(message=\"no implementation for `{Self} << {RHS}`\",\n-                         label=\"no implementation for `{Self} << {RHS}`\")]\n-pub trait Shl<RHS=Self> {\n+#[rustc_on_unimplemented(message=\"no implementation for `{Self} << {Rhs}`\",\n+                         label=\"no implementation for `{Self} << {Rhs}`\")]\n+pub trait Shl<Rhs=Self> {\n     /// The resulting type after applying the `<<` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Output;\n \n     /// Performs the `<<` operation.\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn shl(self, rhs: RHS) -> Self::Output;\n+    fn shl(self, rhs: Rhs) -> Self::Output;\n }\n \n macro_rules! shl_impl {\n@@ -480,17 +480,17 @@ shl_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 isize i128 }\n #[lang = \"shr\"]\n #[doc(alias = \">>\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented(message=\"no implementation for `{Self} >> {RHS}`\",\n-                         label=\"no implementation for `{Self} >> {RHS}`\")]\n-pub trait Shr<RHS=Self> {\n+#[rustc_on_unimplemented(message=\"no implementation for `{Self} >> {Rhs}`\",\n+                         label=\"no implementation for `{Self} >> {Rhs}`\")]\n+pub trait Shr<Rhs=Self> {\n     /// The resulting type after applying the `>>` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Output;\n \n     /// Performs the `>>` operation.\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn shr(self, rhs: RHS) -> Self::Output;\n+    fn shr(self, rhs: Rhs) -> Self::Output;\n }\n \n macro_rules! shr_impl {"}, {"sha": "bda2e3c45749967eb9f2641c134afb5de2689b62", "filename": "src/test/ui/issues/issue-21950.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/225b6baae78a4342e713f9afdd31d2eccf6d63b8/src%2Ftest%2Fui%2Fissues%2Fissue-21950.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/225b6baae78a4342e713f9afdd31d2eccf6d63b8/src%2Ftest%2Fui%2Fissues%2Fissue-21950.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21950.stderr?ref=225b6baae78a4342e713f9afdd31d2eccf6d63b8", "patch": "@@ -1,8 +1,8 @@\n-error[E0393]: the type parameter `RHS` must be explicitly specified\n+error[E0393]: the type parameter `Rhs` must be explicitly specified\n   --> $DIR/issue-21950.rs:7:14\n    |\n LL |             &Add;\n-   |              ^^^ missing reference to `RHS`\n+   |              ^^^ missing reference to `Rhs`\n    |\n    = note: because of the default `Self` reference, type parameters must be specified on object types\n "}, {"sha": "694a4af51bc9ddf7b7824122dbeed5f1616b4966", "filename": "src/test/ui/issues/issue-22560.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/225b6baae78a4342e713f9afdd31d2eccf6d63b8/src%2Ftest%2Fui%2Fissues%2Fissue-22560.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/225b6baae78a4342e713f9afdd31d2eccf6d63b8/src%2Ftest%2Fui%2Fissues%2Fissue-22560.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22560.stderr?ref=225b6baae78a4342e713f9afdd31d2eccf6d63b8", "patch": "@@ -1,16 +1,16 @@\n-error[E0393]: the type parameter `RHS` must be explicitly specified\n+error[E0393]: the type parameter `Rhs` must be explicitly specified\n   --> $DIR/issue-22560.rs:5:13\n    |\n LL | type Test = Add +\n-   |             ^^^ missing reference to `RHS`\n+   |             ^^^ missing reference to `Rhs`\n    |\n    = note: because of the default `Self` reference, type parameters must be specified on object types\n \n-error[E0393]: the type parameter `RHS` must be explicitly specified\n+error[E0393]: the type parameter `Rhs` must be explicitly specified\n   --> $DIR/issue-22560.rs:8:13\n    |\n LL |             Sub;\n-   |             ^^^ missing reference to `RHS`\n+   |             ^^^ missing reference to `Rhs`\n    |\n    = note: because of the default `Self` reference, type parameters must be specified on object types\n "}]}