{"sha": "69b2179afe695d1a93b792cfd7c4197ca63ce658", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5YjIxNzlhZmU2OTVkMWE5M2I3OTJjZmQ3YzQxOTdjYTYzY2U2NTg=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-05-03T17:47:51Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-05-31T09:00:46Z"}, "message": "Print accessed env vars as special comments into depinfo files", "tree": {"sha": "48a4458f5434f87fc6f288116d360e3808b6b62d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48a4458f5434f87fc6f288116d360e3808b6b62d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69b2179afe695d1a93b792cfd7c4197ca63ce658", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69b2179afe695d1a93b792cfd7c4197ca63ce658", "html_url": "https://github.com/rust-lang/rust/commit/69b2179afe695d1a93b792cfd7c4197ca63ce658", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69b2179afe695d1a93b792cfd7c4197ca63ce658/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6fa392238a459c29a47e2cf824d79a49a8ba039", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6fa392238a459c29a47e2cf824d79a49a8ba039", "html_url": "https://github.com/rust-lang/rust/commit/b6fa392238a459c29a47e2cf824d79a49a8ba039"}], "stats": {"total": 71, "additions": 64, "deletions": 7}, "files": [{"sha": "6c3a1ce0958ec5d1f90a90f3cdf34ef1f9462a74", "filename": "src/librustc_builtin_macros/env.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/69b2179afe695d1a93b792cfd7c4197ca63ce658/src%2Flibrustc_builtin_macros%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69b2179afe695d1a93b792cfd7c4197ca63ce658/src%2Flibrustc_builtin_macros%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fenv.rs?ref=69b2179afe695d1a93b792cfd7c4197ca63ce658", "patch": "@@ -22,8 +22,10 @@ pub fn expand_option_env<'cx>(\n     };\n \n     let sp = cx.with_def_site_ctxt(sp);\n-    let e = match env::var(&var.as_str()) {\n-        Err(..) => {\n+    let value = env::var(&var.as_str()).ok().as_deref().map(Symbol::intern);\n+    cx.parse_sess.env_depinfo.borrow_mut().insert((Symbol::intern(&var), value));\n+    let e = match value {\n+        None => {\n             let lt = cx.lifetime(sp, Ident::new(kw::StaticLifetime, sp));\n             cx.expr_path(cx.path_all(\n                 sp,\n@@ -37,10 +39,10 @@ pub fn expand_option_env<'cx>(\n                 ))],\n             ))\n         }\n-        Ok(s) => cx.expr_call_global(\n+        Some(value) => cx.expr_call_global(\n             sp,\n             cx.std_path(&[sym::option, sym::Option, sym::Some]),\n-            vec![cx.expr_str(sp, Symbol::intern(&s))],\n+            vec![cx.expr_str(sp, value)],\n         ),\n     };\n     MacEager::expr(e)\n@@ -78,12 +80,14 @@ pub fn expand_env<'cx>(\n     }\n \n     let sp = cx.with_def_site_ctxt(sp);\n-    let e = match env::var(&*var.as_str()) {\n-        Err(_) => {\n+    let value = env::var(&*var.as_str()).ok().as_deref().map(Symbol::intern);\n+    cx.parse_sess.env_depinfo.borrow_mut().insert((var, value));\n+    let e = match value {\n+        None => {\n             cx.span_err(sp, &msg.as_str());\n             return DummyResult::any(sp);\n         }\n-        Ok(s) => cx.expr_str(sp, Symbol::intern(&s)),\n+        Some(value) => cx.expr_str(sp, value),\n     };\n     MacEager::expr(e)\n }"}, {"sha": "f56d8a372a73e3fbf9e515c889852c41fe03d700", "filename": "src/librustc_builtin_macros/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/69b2179afe695d1a93b792cfd7c4197ca63ce658/src%2Flibrustc_builtin_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69b2179afe695d1a93b792cfd7c4197ca63ce658/src%2Flibrustc_builtin_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Flib.rs?ref=69b2179afe695d1a93b792cfd7c4197ca63ce658", "patch": "@@ -5,6 +5,7 @@\n #![feature(bool_to_option)]\n #![feature(crate_visibility_modifier)]\n #![feature(decl_macro)]\n+#![feature(inner_deref)]\n #![feature(nll)]\n #![feature(or_patterns)]\n #![feature(proc_macro_internals)]"}, {"sha": "5af0ba2afb977c0c02211413db5f73a8427ead95", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/69b2179afe695d1a93b792cfd7c4197ca63ce658/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69b2179afe695d1a93b792cfd7c4197ca63ce658/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=69b2179afe695d1a93b792cfd7c4197ca63ce658", "patch": "@@ -540,6 +540,22 @@ fn escape_dep_filename(filename: &FileName) -> String {\n     filename.to_string().replace(\" \", \"\\\\ \")\n }\n \n+// Makefile comments only need escaping newlines and `\\`.\n+// The result can be unescaped by anything that can unescape `escape_default` and friends.\n+fn escape_dep_env(symbol: Symbol) -> String {\n+    let s = symbol.as_str();\n+    let mut escaped = String::with_capacity(s.len());\n+    for c in s.chars() {\n+        match c {\n+            '\\n' => escaped.push_str(r\"\\n\"),\n+            '\\r' => escaped.push_str(r\"\\r\"),\n+            '\\\\' => escaped.push_str(r\"\\\\\"),\n+            _ => escaped.push(c),\n+        }\n+    }\n+    escaped\n+}\n+\n fn write_out_deps(\n     sess: &Session,\n     boxed_resolver: &Steal<Rc<RefCell<BoxedResolver>>>,\n@@ -592,6 +608,25 @@ fn write_out_deps(\n         for path in files {\n             writeln!(file, \"{}:\", path)?;\n         }\n+\n+        // Emit special comments with information about accessed environment variables.\n+        let env_depinfo = sess.parse_sess.env_depinfo.borrow();\n+        if !env_depinfo.is_empty() {\n+            let mut envs: Vec<_> = env_depinfo\n+                .iter()\n+                .map(|(k, v)| (escape_dep_env(*k), v.map(escape_dep_env)))\n+                .collect();\n+            envs.sort_unstable();\n+            writeln!(file)?;\n+            for (k, v) in envs {\n+                write!(file, \"# env-dep:{}\", k)?;\n+                if let Some(v) = v {\n+                    write!(file, \"={}\", v)?;\n+                }\n+                writeln!(file)?;\n+            }\n+        }\n+\n         Ok(())\n     })();\n "}, {"sha": "aaae5889117ed289cddf5c3bac19e22b1fe967ba", "filename": "src/librustc_session/parse.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69b2179afe695d1a93b792cfd7c4197ca63ce658/src%2Flibrustc_session%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69b2179afe695d1a93b792cfd7c4197ca63ce658/src%2Flibrustc_session%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fparse.rs?ref=69b2179afe695d1a93b792cfd7c4197ca63ce658", "patch": "@@ -135,6 +135,8 @@ pub struct ParseSess {\n     pub symbol_gallery: SymbolGallery,\n     /// The parser has reached `Eof` due to an unclosed brace. Used to silence unnecessary errors.\n     pub reached_eof: Lock<bool>,\n+    /// Environment variables accessed during the build and their values when they exist.\n+    pub env_depinfo: Lock<FxHashSet<(Symbol, Option<Symbol>)>>,\n }\n \n impl ParseSess {\n@@ -160,6 +162,7 @@ impl ParseSess {\n             gated_spans: GatedSpans::default(),\n             symbol_gallery: SymbolGallery::default(),\n             reached_eof: Lock::new(false),\n+            env_depinfo: Default::default(),\n         }\n     }\n "}, {"sha": "2be0b4b324b08eae95b4ba093d84792a7ff8eec3", "filename": "src/test/run-make/env-dep-info/Makefile", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/69b2179afe695d1a93b792cfd7c4197ca63ce658/src%2Ftest%2Frun-make%2Fenv-dep-info%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/69b2179afe695d1a93b792cfd7c4197ca63ce658/src%2Ftest%2Frun-make%2Fenv-dep-info%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fenv-dep-info%2FMakefile?ref=69b2179afe695d1a93b792cfd7c4197ca63ce658", "patch": "@@ -0,0 +1,8 @@\n+-include ../../run-make-fulldeps/tools.mk\n+\n+all:\n+\tEXISTING_ENV=1 EXISTING_OPT_ENV=1 $(RUSTC) --emit dep-info main.rs\n+\t$(CGREP) \"# env-dep:EXISTING_ENV=1\" < $(TMPDIR)/main.d\n+\t$(CGREP) \"# env-dep:EXISTING_OPT_ENV=1\" < $(TMPDIR)/main.d\n+\t$(CGREP) \"# env-dep:NONEXISTENT_OPT_ENV\" < $(TMPDIR)/main.d\n+\t$(CGREP) \"# env-dep:ESCAPE\\nESCAPE\\\\\" < $(TMPDIR)/main.d"}, {"sha": "a25246bac792cb1ba6c51804a315fa4591abcc06", "filename": "src/test/run-make/env-dep-info/main.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/69b2179afe695d1a93b792cfd7c4197ca63ce658/src%2Ftest%2Frun-make%2Fenv-dep-info%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69b2179afe695d1a93b792cfd7c4197ca63ce658/src%2Ftest%2Frun-make%2Fenv-dep-info%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fenv-dep-info%2Fmain.rs?ref=69b2179afe695d1a93b792cfd7c4197ca63ce658", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    env!(\"EXISTING_ENV\");\n+    option_env!(\"EXISTING_OPT_ENV\");\n+    option_env!(\"NONEXISTENT_OPT_ENV\");\n+    option_env!(\"ESCAPE\\nESCAPE\\\\\");\n+}"}]}