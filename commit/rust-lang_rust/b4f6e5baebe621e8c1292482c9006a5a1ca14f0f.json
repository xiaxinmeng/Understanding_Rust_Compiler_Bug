{"sha": "b4f6e5baebe621e8c1292482c9006a5a1ca14f0f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0ZjZlNWJhZWJlNjIxZThjMTI5MjQ4MmM5MDA2YTVhMWNhMTRmMGY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-25T02:57:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-25T02:57:33Z"}, "message": "Rollup merge of #61093 - spastorino:borrow-of-local-data-iterate, r=oli-obk\n\nMake borrow_of_local_data iterate instead of recurse\n\nr? @oli-obk", "tree": {"sha": "d96af74c2812fcad41e85f02fb24e3f35b1d868e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d96af74c2812fcad41e85f02fb24e3f35b1d868e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4f6e5baebe621e8c1292482c9006a5a1ca14f0f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc6K8dCRBK7hj4Ov3rIwAAdHIIAH+i65mvbSHFkcfCzrLJW7eM\nVRNHH4oq3BmvcDf3+MgEBe2mPeAP12AsXzH0ctTPdlx3WlPnM5qVut2pU1JyqEyY\nrgwSb2VjN3grkzK/UoKsANkOB3+lTtDmahYq6unc3fI0Tn4Da9UjmheQLXSwk8Fn\nfwOe6RHsK2L/k1w+/xnqpRBbtfmgsHyTNcs9yZlAqg6Gh4JY4fqxWGfhA/vNM7Uo\nLIUkURnTT8hshDItpOlIeUgS2K0RsgNH8IMCWU+1caqFX0FYAbkmmuqZHKW/T2YK\nFO89pu0kLcxefaWlPmQ1syD+eBJCRuPAmtiDxTZI4C4vhtef2WkHg8nwWPbZIbk=\n=dVgZ\n-----END PGP SIGNATURE-----\n", "payload": "tree d96af74c2812fcad41e85f02fb24e3f35b1d868e\nparent 1ce0288e2f8d6e2b33e4b7614a8f9bc822336de5\nparent 96137798556e662e9bb744fb58055e06147b9330\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1558753053 +0200\ncommitter GitHub <noreply@github.com> 1558753053 +0200\n\nRollup merge of #61093 - spastorino:borrow-of-local-data-iterate, r=oli-obk\n\nMake borrow_of_local_data iterate instead of recurse\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4f6e5baebe621e8c1292482c9006a5a1ca14f0f", "html_url": "https://github.com/rust-lang/rust/commit/b4f6e5baebe621e8c1292482c9006a5a1ca14f0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4f6e5baebe621e8c1292482c9006a5a1ca14f0f/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ce0288e2f8d6e2b33e4b7614a8f9bc822336de5", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ce0288e2f8d6e2b33e4b7614a8f9bc822336de5", "html_url": "https://github.com/rust-lang/rust/commit/1ce0288e2f8d6e2b33e4b7614a8f9bc822336de5"}, {"sha": "96137798556e662e9bb744fb58055e06147b9330", "url": "https://api.github.com/repos/rust-lang/rust/commits/96137798556e662e9bb744fb58055e06147b9330", "html_url": "https://github.com/rust-lang/rust/commit/96137798556e662e9bb744fb58055e06147b9330"}], "stats": {"total": 28, "additions": 13, "deletions": 15}, "files": [{"sha": "caef8d8bc5a925820b1f7b1ec86581757113d220", "filename": "src/librustc_mir/borrow_check/path_utils.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b4f6e5baebe621e8c1292482c9006a5a1ca14f0f/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4f6e5baebe621e8c1292482c9006a5a1ca14f0f/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs?ref=b4f6e5baebe621e8c1292482c9006a5a1ca14f0f", "patch": "@@ -131,22 +131,20 @@ pub(super) fn is_active<'tcx>(\n /// Determines if a given borrow is borrowing local data\n /// This is called for all Yield statements on movable generators\n pub(super) fn borrow_of_local_data<'tcx>(place: &Place<'tcx>) -> bool {\n-    match place {\n-        Place::Base(PlaceBase::Static(..)) => false,\n-        Place::Base(PlaceBase::Local(..)) => true,\n-        Place::Projection(box proj) => {\n-            match proj.elem {\n-                // Reborrow of already borrowed data is ignored\n-                // Any errors will be caught on the initial borrow\n-                ProjectionElem::Deref => false,\n+    place.iterate(|place_base, place_projection| {\n+        match place_base {\n+            PlaceBase::Static(..) => return false,\n+            PlaceBase::Local(..) => {},\n+        }\n \n-                // For interior references and downcasts, find out if the base is local\n-                ProjectionElem::Field(..)\n-                    | ProjectionElem::Index(..)\n-                    | ProjectionElem::ConstantIndex { .. }\n-                | ProjectionElem::Subslice { .. }\n-                | ProjectionElem::Downcast(..) => borrow_of_local_data(&proj.base),\n+        for proj in place_projection {\n+            // Reborrow of already borrowed data is ignored\n+            // Any errors will be caught on the initial borrow\n+            if proj.elem == ProjectionElem::Deref {\n+                return false;\n             }\n         }\n-    }\n+\n+        true\n+    })\n }"}]}