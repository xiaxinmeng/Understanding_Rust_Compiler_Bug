{"sha": "f00897e2f4a411b0fa8ffb403a114bca007f0601", "node_id": "C_kwDOAAsO6NoAKGYwMDg5N2UyZjRhNDExYjBmYThmZmI0MDNhMTE0YmNhMDA3ZjA2MDE", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2022-11-11T17:12:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-11T17:12:30Z"}, "message": "Rollup merge of #103531 - chenyukang:yukang/fix-103474, r=estebank\n\nSuggest calling the instance method of the same name when method not found\n\nFixes #103474", "tree": {"sha": "adc85976544405647e3a066a3c84c3243bf2f7e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/adc85976544405647e3a066a3c84c3243bf2f7e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f00897e2f4a411b0fa8ffb403a114bca007f0601", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjboJ+CRBK7hj4Ov3rIwAAM0AIAKH6NVtdlACt8I7gdB8CxyJi\nunKUcXkeGfE3NTJ7NIhj5Vp0uRHME6OtOwZWnGyTQMAK6TMqRdXq5tId/JJlZK5H\nnGEXFm6qr4F2oOzg3soK27IjeLLaDl9b3J2rVPeX7qCqLdFRjoP9SiTQPbpa3OnI\newjp/7o35RLRba/KyJ4HcCM7W5aDy/LJ9udmR7oxGVrTx7AJ7lu9zGJ0tch2dv+n\nIKX77Z88TNiaLg7Upgl/LS85M/wlb0pU5npyfPDGZFBdmnW0eM6IvcFvAW8iAK8C\nG1SU50ob+MwZmPrrljVzeCZ5TYw/lw8d+xw4JR96jIVvMx3eUgCljX1FFR8UxLk=\n=bQlt\n-----END PGP SIGNATURE-----\n", "payload": "tree adc85976544405647e3a066a3c84c3243bf2f7e7\nparent fd5ff82f28be617c6116a7a16bb1a32b401e9459\nparent 27164495881d2d3d1bb1ef79850b00f1e9989ba7\nauthor Manish Goregaokar <manishsmail@gmail.com> 1668186750 -0500\ncommitter GitHub <noreply@github.com> 1668186750 -0500\n\nRollup merge of #103531 - chenyukang:yukang/fix-103474, r=estebank\n\nSuggest calling the instance method of the same name when method not found\n\nFixes #103474\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f00897e2f4a411b0fa8ffb403a114bca007f0601", "html_url": "https://github.com/rust-lang/rust/commit/f00897e2f4a411b0fa8ffb403a114bca007f0601", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f00897e2f4a411b0fa8ffb403a114bca007f0601/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd5ff82f28be617c6116a7a16bb1a32b401e9459", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd5ff82f28be617c6116a7a16bb1a32b401e9459", "html_url": "https://github.com/rust-lang/rust/commit/fd5ff82f28be617c6116a7a16bb1a32b401e9459"}, {"sha": "27164495881d2d3d1bb1ef79850b00f1e9989ba7", "url": "https://api.github.com/repos/rust-lang/rust/commits/27164495881d2d3d1bb1ef79850b00f1e9989ba7", "html_url": "https://github.com/rust-lang/rust/commit/27164495881d2d3d1bb1ef79850b00f1e9989ba7"}], "stats": {"total": 104, "additions": 88, "deletions": 16}, "files": [{"sha": "f2bfec5a2a38aff6f3fde462fb217d331ecc3630", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f00897e2f4a411b0fa8ffb403a114bca007f0601/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f00897e2f4a411b0fa8ffb403a114bca007f0601/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=f00897e2f4a411b0fa8ffb403a114bca007f0601", "patch": "@@ -219,26 +219,26 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n             let (mod_prefix, mod_str, suggestion) = if path.len() == 1 {\n                 debug!(?self.diagnostic_metadata.current_impl_items);\n                 debug!(?self.diagnostic_metadata.current_function);\n-                let suggestion = if let Some(items) = self.diagnostic_metadata.current_impl_items\n+                let suggestion = if self.current_trait_ref.is_none()\n                     && let Some((fn_kind, _)) = self.diagnostic_metadata.current_function\n-                    && self.current_trait_ref.is_none()\n                     && let Some(FnCtxt::Assoc(_)) = fn_kind.ctxt()\n+                    && let Some(items) = self.diagnostic_metadata.current_impl_items\n                     && let Some(item) = items.iter().find(|i| {\n-                        if let AssocItemKind::Fn(fn_) = &i.kind\n-                            && !fn_.sig.decl.has_self()\n-                            && i.ident.name == item_str.name\n+                        if let AssocItemKind::Fn(_) = &i.kind && i.ident.name == item_str.name\n                         {\n                             debug!(?item_str.name);\n-                            debug!(?fn_.sig.decl.inputs);\n                             return true\n                         }\n                         false\n                     })\n+                    && let AssocItemKind::Fn(fn_) = &item.kind\n                 {\n+                    debug!(?fn_);\n+                    let self_sugg = if fn_.sig.decl.has_self() { \"self.\" } else { \"Self::\" };\n                     Some((\n-                        item_span,\n+                        item_span.shrink_to_lo(),\n                         \"consider using the associated function\",\n-                        format!(\"Self::{}\", item.ident)\n+                        self_sugg.to_string()\n                     ))\n                 } else {\n                     None\n@@ -396,11 +396,13 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n     }\n \n     fn suggest_self_or_self_ref(&mut self, err: &mut Diagnostic, path: &[Segment], span: Span) {\n-        let is_assoc_fn = self.self_type_is_available();\n+        if !self.self_type_is_available() {\n+            return;\n+        }\n         let Some(path_last_segment) = path.last() else { return };\n         let item_str = path_last_segment.ident;\n         // Emit help message for fake-self from other languages (e.g., `this` in Javascript).\n-        if [\"this\", \"my\"].contains(&item_str.as_str()) && is_assoc_fn {\n+        if [\"this\", \"my\"].contains(&item_str.as_str()) {\n             err.span_suggestion_short(\n                 span,\n                 \"you might have meant to use `self` here instead\",\n@@ -451,7 +453,6 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         let is_enum_variant = &|res| matches!(res, Res::Def(DefKind::Variant, _));\n         let path_str = Segment::names_to_string(path);\n         let ident_span = path.last().map_or(span, |ident| ident.ident.span);\n-\n         let mut candidates = self\n             .r\n             .lookup_import_candidates(ident, ns, &self.parent_scope, is_expected)\n@@ -1542,7 +1543,6 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                 _ => None,\n             }\n         }\n-\n         // Fields are generally expected in the same contexts as locals.\n         if filter_fn(Res::Local(ast::DUMMY_NODE_ID)) {\n             if let Some(node_id) ="}, {"sha": "14f2259e1d4e82894316a70a8fd04ac900b70ac6", "filename": "src/test/ui/resolve/issue-103474.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f00897e2f4a411b0fa8ffb403a114bca007f0601/src%2Ftest%2Fui%2Fresolve%2Fissue-103474.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f00897e2f4a411b0fa8ffb403a114bca007f0601/src%2Ftest%2Fui%2Fresolve%2Fissue-103474.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-103474.rs?ref=f00897e2f4a411b0fa8ffb403a114bca007f0601", "patch": "@@ -0,0 +1,28 @@\n+struct S {}\n+impl S {\n+    fn first(&self) {}\n+\n+    fn second(&self) {\n+        first()\n+        //~^ ERROR cannot find function `first` in this scope\n+    }\n+\n+    fn third(&self) {\n+        no_method_err()\n+        //~^ ERROR cannot find function `no_method_err` in this scope\n+    }\n+}\n+\n+// https://github.com/rust-lang/rust/pull/103531#discussion_r1004728080\n+struct Foo {\n+    i: i32,\n+}\n+\n+impl Foo {\n+    fn needs_self() {\n+        this.i\n+        //~^ ERROR cannot find value `this` in this scope\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "415d231552a0335e56f520e07dbd3a7a32c22d56", "filename": "src/test/ui/resolve/issue-103474.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f00897e2f4a411b0fa8ffb403a114bca007f0601/src%2Ftest%2Fui%2Fresolve%2Fissue-103474.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f00897e2f4a411b0fa8ffb403a114bca007f0601/src%2Ftest%2Fui%2Fresolve%2Fissue-103474.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-103474.stderr?ref=f00897e2f4a411b0fa8ffb403a114bca007f0601", "patch": "@@ -0,0 +1,35 @@\n+error[E0425]: cannot find value `this` in this scope\n+  --> $DIR/issue-103474.rs:23:9\n+   |\n+LL |         this.i\n+   |         ^^^^ not found in this scope\n+   |\n+help: you might have meant to use `self` here instead\n+   |\n+LL |         self.i\n+   |         ~~~~\n+help: if you meant to use `self`, you are also missing a `self` receiver argument\n+   |\n+LL |     fn needs_self(&self) {\n+   |                   +++++\n+\n+error[E0425]: cannot find function `first` in this scope\n+  --> $DIR/issue-103474.rs:6:9\n+   |\n+LL |         first()\n+   |         ^^^^^ not found in this scope\n+   |\n+help: consider using the associated function\n+   |\n+LL |         self.first()\n+   |         +++++\n+\n+error[E0425]: cannot find function `no_method_err` in this scope\n+  --> $DIR/issue-103474.rs:11:9\n+   |\n+LL |         no_method_err()\n+   |         ^^^^^^^^^^^^^ not found in this scope\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0425`."}, {"sha": "36f3da7c9553794129913273f3194ddfcdb9da84", "filename": "src/test/ui/resolve/issue-2356.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f00897e2f4a411b0fa8ffb403a114bca007f0601/src%2Ftest%2Fui%2Fresolve%2Fissue-2356.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f00897e2f4a411b0fa8ffb403a114bca007f0601/src%2Ftest%2Fui%2Fresolve%2Fissue-2356.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-2356.stderr?ref=f00897e2f4a411b0fa8ffb403a114bca007f0601", "patch": "@@ -85,7 +85,7 @@ LL |         static_method();\n help: consider using the associated function\n    |\n LL |         Self::static_method();\n-   |         ~~~~~~~~~~~~~~~~~~~\n+   |         ++++++\n \n error[E0425]: cannot find function `purr` in this scope\n   --> $DIR/issue-2356.rs:54:9\n@@ -114,7 +114,7 @@ LL |     grow_older();\n help: consider using the associated function\n    |\n LL |     Self::grow_older();\n-   |     ~~~~~~~~~~~~~~~~\n+   |     ++++++\n \n error[E0425]: cannot find function `shave` in this scope\n   --> $DIR/issue-2356.rs:74:5"}, {"sha": "063c3f013c5390474fc2b54f14ad2fbfe7bdd413", "filename": "src/test/ui/self/class-missing-self.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f00897e2f4a411b0fa8ffb403a114bca007f0601/src%2Ftest%2Fui%2Fself%2Fclass-missing-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f00897e2f4a411b0fa8ffb403a114bca007f0601/src%2Ftest%2Fui%2Fself%2Fclass-missing-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fclass-missing-self.stderr?ref=f00897e2f4a411b0fa8ffb403a114bca007f0601", "patch": "@@ -10,6 +10,10 @@ error[E0425]: cannot find function `sleep` in this scope\n LL |       sleep();\n    |       ^^^^^ not found in this scope\n    |\n+help: consider using the associated function\n+   |\n+LL |       self.sleep();\n+   |       +++++\n help: consider importing this function\n    |\n LL | use std::thread::sleep;"}, {"sha": "febdd67338c991263c9f398ad89c7db59b988f4a", "filename": "src/test/ui/suggestions/assoc_fn_without_self.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f00897e2f4a411b0fa8ffb403a114bca007f0601/src%2Ftest%2Fui%2Fsuggestions%2Fassoc_fn_without_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f00897e2f4a411b0fa8ffb403a114bca007f0601/src%2Ftest%2Fui%2Fsuggestions%2Fassoc_fn_without_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fassoc_fn_without_self.stderr?ref=f00897e2f4a411b0fa8ffb403a114bca007f0601", "patch": "@@ -7,13 +7,18 @@ LL |         foo();\n help: consider using the associated function\n    |\n LL |         Self::foo();\n-   |         ~~~~~~~~~\n+   |         ++++++\n \n error[E0425]: cannot find function `bar` in this scope\n   --> $DIR/assoc_fn_without_self.rs:17:9\n    |\n LL |         bar();\n    |         ^^^ not found in this scope\n+   |\n+help: consider using the associated function\n+   |\n+LL |         self.bar();\n+   |         +++++\n \n error[E0425]: cannot find function `baz` in this scope\n   --> $DIR/assoc_fn_without_self.rs:18:9\n@@ -24,7 +29,7 @@ LL |         baz(2, 3);\n help: consider using the associated function\n    |\n LL |         Self::baz(2, 3);\n-   |         ~~~~~~~~~\n+   |         ++++++\n \n error[E0425]: cannot find function `foo` in this scope\n   --> $DIR/assoc_fn_without_self.rs:14:13"}]}