{"sha": "5fbb41108a14b74645296f64cc78ba05aea9ca18", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmYmI0MTEwOGExNGI3NDY0NTI5NmY2NGNjNzhiYTA1YWVhOWNhMTg=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-10-05T00:29:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-05T00:29:40Z"}, "message": "Rollup merge of #77512 - ecstatic-morse:const-checking-allow-abort, r=RalfJung\n\nAllow `Abort` terminators in all const-contexts\n\nWe never unwind during const-eval, so we basically have these semantics already. Also I just figured out that these only appear along the cleanup path, which doesn't get const-checked. In other words, this doesn't actually change behavior: the `check-pass` test I added compiles just fine on nightly.\n\nr? @RalfJung\ncc @rust-lang/wg-const-eval", "tree": {"sha": "a2e16b90faac32c6dd1184600ff9ae6d489474e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2e16b90faac32c6dd1184600ff9ae6d489474e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5fbb41108a14b74645296f64cc78ba05aea9ca18", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfemj0CRBK7hj4Ov3rIwAAdHIIAAjHr5FGzwYF5hAf7bwtw1eA\n+JM1j6Ee/pYbzmRqhg+DofkzQKVoEH/cOpBGofkLcfqEd9QFgIj02W5rgnja8jMd\nFHF1oE1wZ4KP7cgmgBLD+vZWwJxo3iN7sv8Ns/JSE19tB+OmGe6/uxWee0TiRHht\ne9BHNdaSvCRadiqEhmdV8F5m5iNMV5wDliDhw5Rm1KZuCq1Jl8h07taWRED14Qrt\nINjd337jcZW+CwTpLa0TGmupQAJ0isSGQacl0CHyXSk9Qz876E1xdnszOS9vuyC/\nuuNiZb6G0CgnpkLc3H7iDEHQLnkfoacSuI5qaDT5aa02N01w61JAd9GBENIstYY=\n=cSgF\n-----END PGP SIGNATURE-----\n", "payload": "tree a2e16b90faac32c6dd1184600ff9ae6d489474e0\nparent 23b1e3d77290265c72566b4dabff39384a330b60\nparent 6ae1da3198bd2d110652900082800e01a8e37149\nauthor Dylan DPC <dylan.dpc@gmail.com> 1601857780 +0200\ncommitter GitHub <noreply@github.com> 1601857780 +0200\n\nRollup merge of #77512 - ecstatic-morse:const-checking-allow-abort, r=RalfJung\n\nAllow `Abort` terminators in all const-contexts\n\nWe never unwind during const-eval, so we basically have these semantics already. Also I just figured out that these only appear along the cleanup path, which doesn't get const-checked. In other words, this doesn't actually change behavior: the `check-pass` test I added compiles just fine on nightly.\n\nr? @RalfJung\ncc @rust-lang/wg-const-eval\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5fbb41108a14b74645296f64cc78ba05aea9ca18", "html_url": "https://github.com/rust-lang/rust/commit/5fbb41108a14b74645296f64cc78ba05aea9ca18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5fbb41108a14b74645296f64cc78ba05aea9ca18/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23b1e3d77290265c72566b4dabff39384a330b60", "url": "https://api.github.com/repos/rust-lang/rust/commits/23b1e3d77290265c72566b4dabff39384a330b60", "html_url": "https://github.com/rust-lang/rust/commit/23b1e3d77290265c72566b4dabff39384a330b60"}, {"sha": "6ae1da3198bd2d110652900082800e01a8e37149", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ae1da3198bd2d110652900082800e01a8e37149", "html_url": "https://github.com/rust-lang/rust/commit/6ae1da3198bd2d110652900082800e01a8e37149"}], "stats": {"total": 79, "additions": 62, "deletions": 17}, "files": [{"sha": "9a1b77e994d1350d66b89fe561d28d5a1ab13ac0", "filename": "compiler/rustc_mir/src/transform/check_consts/ops.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5fbb41108a14b74645296f64cc78ba05aea9ca18/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fbb41108a14b74645296f64cc78ba05aea9ca18/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=5fbb41108a14b74645296f64cc78ba05aea9ca18", "patch": "@@ -41,18 +41,6 @@ pub trait NonConstOp: std::fmt::Debug {\n     fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx>;\n }\n \n-#[derive(Debug)]\n-pub struct Abort;\n-impl NonConstOp for Abort {\n-    fn status_in_item(&self, ccx: &ConstCx<'_, '_>) -> Status {\n-        mcf_status_in_item(ccx)\n-    }\n-\n-    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n-        mcf_build_error(ccx, span, \"abort is not stable in const fn\")\n-    }\n-}\n-\n #[derive(Debug)]\n pub struct FloatingPointOp;\n impl NonConstOp for FloatingPointOp {"}, {"sha": "94806116eaf2e5f5cba82aa022db15c869e18c04", "filename": "compiler/rustc_mir/src/transform/check_consts/validation.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5fbb41108a14b74645296f64cc78ba05aea9ca18/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fbb41108a14b74645296f64cc78ba05aea9ca18/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=5fbb41108a14b74645296f64cc78ba05aea9ca18", "patch": "@@ -434,11 +434,13 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n     fn visit_basic_block_data(&mut self, bb: BasicBlock, block: &BasicBlockData<'tcx>) {\n         trace!(\"visit_basic_block_data: bb={:?} is_cleanup={:?}\", bb, block.is_cleanup);\n \n-        // Just as the old checker did, we skip const-checking basic blocks on the unwind path.\n-        // These blocks often drop locals that would otherwise be returned from the function.\n+        // We don't const-check basic blocks on the cleanup path since we never unwind during\n+        // const-eval: a panic causes an immediate compile error. In other words, cleanup blocks\n+        // are unreachable during const-eval.\n         //\n-        // FIXME: This shouldn't be unsound since a panic at compile time will cause a compiler\n-        // error anyway, but maybe we should do more here?\n+        // We can't be more conservative (e.g., by const-checking cleanup blocks anyways) because\n+        // locals that would never be dropped during normal execution are sometimes dropped during\n+        // unwinding, which means backwards-incompatible live-drop errors.\n         if block.is_cleanup {\n             return;\n         }\n@@ -874,12 +876,16 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n             }\n \n             TerminatorKind::InlineAsm { .. } => self.check_op(ops::InlineAsm),\n-            TerminatorKind::Abort => self.check_op(ops::Abort),\n \n             TerminatorKind::GeneratorDrop | TerminatorKind::Yield { .. } => {\n                 self.check_op(ops::Generator(hir::GeneratorKind::Gen))\n             }\n \n+            TerminatorKind::Abort => {\n+                // Cleanup blocks are skipped for const checking (see `visit_basic_block_data`).\n+                span_bug!(self.span, \"`Abort` terminator outside of cleanup block\")\n+            }\n+\n             TerminatorKind::Assert { .. }\n             | TerminatorKind::FalseEdge { .. }\n             | TerminatorKind::FalseUnwind { .. }"}, {"sha": "b8b95dea1e77039b8903fb7cec7c7c784838b470", "filename": "src/test/ui/consts/const-eval/unwind-abort.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5fbb41108a14b74645296f64cc78ba05aea9ca18/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fbb41108a14b74645296f64cc78ba05aea9ca18/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.rs?ref=5fbb41108a14b74645296f64cc78ba05aea9ca18", "patch": "@@ -0,0 +1,13 @@\n+#![feature(unwind_attributes, const_panic)]\n+\n+#[unwind(aborts)]\n+const fn foo() {\n+    panic!() //~ evaluation of constant value failed\n+}\n+\n+const _: () = foo(); //~ any use of this value will cause an error\n+// Ensure that the CTFE engine handles calls to `#[unwind(aborts)]` gracefully\n+\n+fn main() {\n+    let _ = foo();\n+}"}, {"sha": "084beb19eb934973d935748996464ff89ca113c7", "filename": "src/test/ui/consts/const-eval/unwind-abort.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5fbb41108a14b74645296f64cc78ba05aea9ca18/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5fbb41108a14b74645296f64cc78ba05aea9ca18/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.stderr?ref=5fbb41108a14b74645296f64cc78ba05aea9ca18", "patch": "@@ -0,0 +1,21 @@\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/unwind-abort.rs:5:5\n+   |\n+LL |     panic!()\n+   |     ^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/unwind-abort.rs:5:5\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: any use of this value will cause an error\n+  --> $DIR/unwind-abort.rs:8:15\n+   |\n+LL | const _: () = foo();\n+   | --------------^^^^^-\n+   |               |\n+   |               referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "f9011f908a75e90ae3cc0d875fb8fe6d0db48ec5", "filename": "src/test/ui/consts/unwind-abort.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5fbb41108a14b74645296f64cc78ba05aea9ca18/src%2Ftest%2Fui%2Fconsts%2Funwind-abort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fbb41108a14b74645296f64cc78ba05aea9ca18/src%2Ftest%2Fui%2Fconsts%2Funwind-abort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Funwind-abort.rs?ref=5fbb41108a14b74645296f64cc78ba05aea9ca18", "patch": "@@ -0,0 +1,17 @@\n+// check-pass\n+\n+#![feature(unwind_attributes, const_panic)]\n+\n+// `#[unwind(aborts)]` is okay for a `const fn`. We don't unwind in const-eval anyways.\n+#[unwind(aborts)]\n+const fn foo() {\n+    panic!()\n+}\n+\n+const fn bar() {\n+    foo();\n+}\n+\n+fn main() {\n+    bar();\n+}"}]}