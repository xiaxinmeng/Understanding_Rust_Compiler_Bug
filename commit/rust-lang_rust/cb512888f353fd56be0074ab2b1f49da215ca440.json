{"sha": "cb512888f353fd56be0074ab2b1f49da215ca440", "node_id": "C_kwDOAAsO6NoAKGNiNTEyODg4ZjM1M2ZkNTZiZTAwNzRhYjJiMWY0OWRhMjE1Y2E0NDA", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-07-25T09:46:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-25T09:46:54Z"}, "message": "Rollup merge of #99659 - compiler-errors:opaque-type-nit, r=oli-obk\n\nUse `VecMap::get` in `ConstraintLocator::check`\n\nAlso rename the `def_id` param to `item_def_id` because that's easily confused with `self.def_id` (which is the opaque ty did).", "tree": {"sha": "5459d28929cfdefe0fe6227b7ee68bbad4a402ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5459d28929cfdefe0fe6227b7ee68bbad4a402ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb512888f353fd56be0074ab2b1f49da215ca440", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi3maOCRBK7hj4Ov3rIwAAsMoIAB5UpRQqDEZoOcwoX1tZ2akd\ndktFuNUCXm/lLHVU2uLjqEM2do9Pmc8Q8HWXan0e71s6t/KwdFlYIft6qB+uXaSW\nHpU1ByKwjsNHoeZgGw1W4oxrA2flT29W32OMMFcdWlkD2jvDS2Ev2mitpRULVTQq\njWqKqDHZoW2wmlyvcsgQqOgF2vSBRLYH/+Lzbpu+5+KIWVx9z2dWrEXZ2eNZXbk0\nIrxg245Y2Pz3RPxtBQPmTVJWQ8gxm43MF+cIvkfzTj6F/jNeFB0b7s8kx1GsxLDm\nh38ZQpQ31m/GQbi6p9+r+RfsBYtzF4wt8KBMlStWzmh2YTjIHbLWSFn5NA/1T4M=\n=LIJw\n-----END PGP SIGNATURE-----\n", "payload": "tree 5459d28929cfdefe0fe6227b7ee68bbad4a402ce\nparent f4c25270d4df28e48f78a9b2bcbcccbf53b1e63b\nparent f7326989e63ab8944493e8ff03447bb9a7d83141\nauthor Yuki Okushi <jtitor@2k36.org> 1658742414 +0900\ncommitter GitHub <noreply@github.com> 1658742414 +0900\n\nRollup merge of #99659 - compiler-errors:opaque-type-nit, r=oli-obk\n\nUse `VecMap::get` in `ConstraintLocator::check`\n\nAlso rename the `def_id` param to `item_def_id` because that's easily confused with `self.def_id` (which is the opaque ty did).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb512888f353fd56be0074ab2b1f49da215ca440", "html_url": "https://github.com/rust-lang/rust/commit/cb512888f353fd56be0074ab2b1f49da215ca440", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb512888f353fd56be0074ab2b1f49da215ca440/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4c25270d4df28e48f78a9b2bcbcccbf53b1e63b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4c25270d4df28e48f78a9b2bcbcccbf53b1e63b", "html_url": "https://github.com/rust-lang/rust/commit/f4c25270d4df28e48f78a9b2bcbcccbf53b1e63b"}, {"sha": "f7326989e63ab8944493e8ff03447bb9a7d83141", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7326989e63ab8944493e8ff03447bb9a7d83141", "html_url": "https://github.com/rust-lang/rust/commit/f7326989e63ab8944493e8ff03447bb9a7d83141"}], "stats": {"total": 18, "additions": 6, "deletions": 12}, "files": [{"sha": "1d7406e00ad0a63ff9e6dadb2b49561932873609", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cb512888f353fd56be0074ab2b1f49da215ca440/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb512888f353fd56be0074ab2b1f49da215ca440/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=cb512888f353fd56be0074ab2b1f49da215ca440", "patch": "@@ -538,9 +538,9 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n \n     impl ConstraintLocator<'_> {\n         #[instrument(skip(self), level = \"debug\")]\n-        fn check(&mut self, def_id: LocalDefId) {\n+        fn check(&mut self, item_def_id: LocalDefId) {\n             // Don't try to check items that cannot possibly constrain the type.\n-            if !self.tcx.has_typeck_results(def_id) {\n+            if !self.tcx.has_typeck_results(item_def_id) {\n                 debug!(\"no constraint: no typeck results\");\n                 return;\n             }\n@@ -555,26 +555,20 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n             // // because we again need to reveal `Foo` so we can check whether the\n             // // constant does not contain interior mutability.\n             // ```\n-            let tables = self.tcx.typeck(def_id);\n+            let tables = self.tcx.typeck(item_def_id);\n             if let Some(_) = tables.tainted_by_errors {\n                 self.found = Some(ty::OpaqueHiddenType { span: DUMMY_SP, ty: self.tcx.ty_error() });\n                 return;\n             }\n-            if tables.concrete_opaque_types.get(&self.def_id).is_none() {\n+            if !tables.concrete_opaque_types.contains_key(&self.def_id) {\n                 debug!(\"no constraints in typeck results\");\n                 return;\n             }\n             // Use borrowck to get the type with unerased regions.\n-            let concrete_opaque_types = &self.tcx.mir_borrowck(def_id).concrete_opaque_types;\n+            let concrete_opaque_types = &self.tcx.mir_borrowck(item_def_id).concrete_opaque_types;\n             debug!(?concrete_opaque_types);\n-            for &(def_id, concrete_type) in concrete_opaque_types {\n-                if def_id != self.def_id {\n-                    // Ignore constraints for other opaque types.\n-                    continue;\n-                }\n-\n+            if let Some(&concrete_type) = concrete_opaque_types.get(&self.def_id) {\n                 debug!(?concrete_type, \"found constraint\");\n-\n                 if let Some(prev) = self.found {\n                     if concrete_type.ty != prev.ty && !(concrete_type, prev).references_error() {\n                         prev.report_mismatch(&concrete_type, self.tcx);"}]}