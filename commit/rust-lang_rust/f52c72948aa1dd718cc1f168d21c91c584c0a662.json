{"sha": "f52c72948aa1dd718cc1f168d21c91c584c0a662", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1MmM3Mjk0OGFhMWRkNzE4Y2MxZjE2OGQyMWM5MWM1ODRjMGE2NjI=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-06-22T13:00:27Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-07-20T18:35:32Z"}, "message": "ty: normalize fn sigs before subst\n\nThis commit normalizes function signatures for instances before\nsubstituting, a workaround for polymorphization considering\nparameters unused when they show up in the signature, but not the\nbody (due to being normalized).\n\nUnfortunately, this causes test output to change with the parallel\ncompiler only.\n\nSigned-off-by: David Wood <david@davidtw.co>", "tree": {"sha": "1879e860dbd4ac450fb15504a31d41be71d1102b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1879e860dbd4ac450fb15504a31d41be71d1102b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f52c72948aa1dd718cc1f168d21c91c584c0a662", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEfgm2/wUjk9OnjxlyJZLnbIc4H9kFAl8V4/QACgkQJZLnbIc4\nH9kuHw//dv1YPllpu2S9vJ8/J2njTsYP5dOWfaG33380KICLGT0AjoNxdEGjUEwW\ndGYrhBWCQg5PpjzAxOlGtSszGLf+cZ3QtE0Pgsveuv/kvLJTK8hGLNByiXs6zPdY\nuEGkGNTrro8VaGwSVmupnhNWAajbe5a1TVH7vZnlOxu6UB1hz2UPfvWXTMpxzDUt\n7AV5iGRJTGmejPXm7G7FjvwRErD7//A3oHn26BhEPgp5BcUmJi91EORevFPj0c7A\n9evrA8GQEeeEdRoE6JcR2caTGbQvqKITXkXY+BuPy9CyA5vBtSIYwgFqT9m65GaE\nfNFuI2wleIZaJOoXpogajkHNn9kfhwJBpBqVObbQg8pB0zqPzQ8b/aztmWLlMYAv\nh2UL243ZMoXCaTBrUn9pHOIEKwypo4PKfjmQJeE3CBA3G84e6wxPr6CleWu4OI2W\nuM86X/2XKXgJ0HBMkuHmiKsuWw3oE3ovjFa/cPXA2WD44QSy3d6/3iQC5XtXLQ2Q\nCHVwCU+aKTsDWPak5oc16aLQrZLRC+QjX2hDYhYZ8/fSsdYYMUU55bb2oEVDG0d4\nl52QtlW4skXtDyNyVkW8LbLllFknRP+587TAsxu8YDLbwp0Mgqhxys0j67W75r9A\nIdpshB7tkIBR8p3kk6WOK1Nvb1fLktl9B4v8WEjJjgrMDWMImPs=\n=GWCa\n-----END PGP SIGNATURE-----", "payload": "tree 1879e860dbd4ac450fb15504a31d41be71d1102b\nparent 2989fea88a489a01b3e2243bb84b0ec20b8a0e28\nauthor David Wood <david@davidtw.co> 1592830827 +0100\ncommitter David Wood <david@davidtw.co> 1595270132 +0100\n\nty: normalize fn sigs before subst\n\nThis commit normalizes function signatures for instances before\nsubstituting, a workaround for polymorphization considering\nparameters unused when they show up in the signature, but not the\nbody (due to being normalized).\n\nUnfortunately, this causes test output to change with the parallel\ncompiler only.\n\nSigned-off-by: David Wood <david@davidtw.co>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f52c72948aa1dd718cc1f168d21c91c584c0a662", "html_url": "https://github.com/rust-lang/rust/commit/f52c72948aa1dd718cc1f168d21c91c584c0a662", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f52c72948aa1dd718cc1f168d21c91c584c0a662/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2989fea88a489a01b3e2243bb84b0ec20b8a0e28", "url": "https://api.github.com/repos/rust-lang/rust/commits/2989fea88a489a01b3e2243bb84b0ec20b8a0e28", "html_url": "https://github.com/rust-lang/rust/commit/2989fea88a489a01b3e2243bb84b0ec20b8a0e28"}], "stats": {"total": 68, "additions": 51, "deletions": 17}, "files": [{"sha": "cb937bf0112aee952aef0d9afb57a233d1f529f7", "filename": "src/librustc_middle/ty/layout.rs", "status": "modified", "additions": 26, "deletions": 17, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/f52c72948aa1dd718cc1f168d21c91c584c0a662/src%2Flibrustc_middle%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f52c72948aa1dd718cc1f168d21c91c584c0a662/src%2Flibrustc_middle%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Flayout.rs?ref=f52c72948aa1dd718cc1f168d21c91c584c0a662", "patch": "@@ -2302,10 +2302,19 @@ impl<'tcx> ty::Instance<'tcx> {\n         // FIXME(davidtwco,eddyb): A `ParamEnv` should be passed through to this function.\n         let ty = self.ty(tcx, ty::ParamEnv::reveal_all());\n         match ty.kind {\n-            ty::FnDef(..) |\n-            // Shims currently have type FnPtr. Not sure this should remain.\n-            ty::FnPtr(_) => {\n-                let mut sig = ty.fn_sig(tcx);\n+            ty::FnDef(..) => {\n+                // HACK(davidtwco,eddyb): This is a workaround for polymorphization considering\n+                // parameters unused if they show up in the signature, but not in the `mir::Body`\n+                // (i.e. due to being inside a projection that got normalized, see\n+                // `src/test/ui/polymorphization/normalized_sig_types.rs`), and codegen not keeping\n+                // track of a polymorphization `ParamEnv` to allow normalizing later.\n+                let mut sig = match ty.kind {\n+                    ty::FnDef(def_id, substs) => tcx\n+                        .normalize_erasing_regions(tcx.param_env(def_id), tcx.fn_sig(def_id))\n+                        .subst(tcx, substs),\n+                    _ => unreachable!(),\n+                };\n+\n                 if let ty::InstanceDef::VtableShim(..) = self.def {\n                     // Modify `fn(self, ...)` to `fn(self: *mut Self, ...)`.\n                     sig = sig.map_bound(|mut sig| {\n@@ -2321,13 +2330,15 @@ impl<'tcx> ty::Instance<'tcx> {\n                 let sig = substs.as_closure().sig();\n \n                 let env_ty = tcx.closure_env_ty(def_id, substs).unwrap();\n-                sig.map_bound(|sig| tcx.mk_fn_sig(\n-                    iter::once(env_ty.skip_binder()).chain(sig.inputs().iter().cloned()),\n-                    sig.output(),\n-                    sig.c_variadic,\n-                    sig.unsafety,\n-                    sig.abi\n-                ))\n+                sig.map_bound(|sig| {\n+                    tcx.mk_fn_sig(\n+                        iter::once(env_ty.skip_binder()).chain(sig.inputs().iter().cloned()),\n+                        sig.output(),\n+                        sig.c_variadic,\n+                        sig.unsafety,\n+                        sig.abi,\n+                    )\n+                })\n             }\n             ty::Generator(_, substs, _) => {\n                 let sig = substs.as_generator().poly_sig();\n@@ -2343,22 +2354,20 @@ impl<'tcx> ty::Instance<'tcx> {\n                 sig.map_bound(|sig| {\n                     let state_did = tcx.require_lang_item(GeneratorStateLangItem, None);\n                     let state_adt_ref = tcx.adt_def(state_did);\n-                    let state_substs = tcx.intern_substs(&[\n-                        sig.yield_ty.into(),\n-                        sig.return_ty.into(),\n-                    ]);\n+                    let state_substs =\n+                        tcx.intern_substs(&[sig.yield_ty.into(), sig.return_ty.into()]);\n                     let ret_ty = tcx.mk_adt(state_adt_ref, state_substs);\n \n                     tcx.mk_fn_sig(\n                         [env_ty, sig.resume_ty].iter(),\n                         &ret_ty,\n                         false,\n                         hir::Unsafety::Normal,\n-                        rustc_target::spec::abi::Abi::Rust\n+                        rustc_target::spec::abi::Abi::Rust,\n                     )\n                 })\n             }\n-            _ => bug!(\"unexpected type {:?} in Instance::fn_sig\", ty)\n+            _ => bug!(\"unexpected type {:?} in Instance::fn_sig\", ty),\n         }\n     }\n }"}, {"sha": "fa76b7201e8c3cabfa6e2d47eb0b5e25d843ecfb", "filename": "src/test/ui/polymorphization/normalized_sig_types.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f52c72948aa1dd718cc1f168d21c91c584c0a662/src%2Ftest%2Fui%2Fpolymorphization%2Fnormalized_sig_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f52c72948aa1dd718cc1f168d21c91c584c0a662/src%2Ftest%2Fui%2Fpolymorphization%2Fnormalized_sig_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Fnormalized_sig_types.rs?ref=f52c72948aa1dd718cc1f168d21c91c584c0a662", "patch": "@@ -0,0 +1,25 @@\n+// build-pass\n+\n+pub trait ParallelIterator: Sized {\n+    fn drive<C: Consumer<()>>(_: C) {\n+        C::into_folder();\n+    }\n+}\n+\n+pub trait Consumer<T>: Sized {\n+    type Result;\n+    fn into_folder() -> Self::Result;\n+}\n+\n+impl ParallelIterator for () {}\n+\n+impl<F: Fn(), T> Consumer<T> for F {\n+    type Result = ();\n+    fn into_folder() -> Self::Result {\n+        unimplemented!()\n+    }\n+}\n+\n+fn main() {\n+    <()>::drive(|| ());\n+}"}]}