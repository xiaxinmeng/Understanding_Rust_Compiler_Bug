{"sha": "5baba86fe554424e8a58e3f1a3f29c258fce3296", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViYWJhODZmZTU1NDQyNGU4YTU4ZTNmMWEzZjI5YzI1OGZjZTMyOTY=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2019-09-06T13:41:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-06T13:41:03Z"}, "message": "Update rustc-ap-* crates to 581.0.0 (#3783)", "tree": {"sha": "2fd322b9bfd583bca41d1ec2ef3c1a67e0a666c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2fd322b9bfd583bca41d1ec2ef3c1a67e0a666c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5baba86fe554424e8a58e3f1a3f29c258fce3296", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdcmHvCRBK7hj4Ov3rIwAAdHIIAAK3xtyd/87LbiWqYKTgwNhI\nL9J+SLyH5VURmNg4b5PBy5rll/7b6aGl+PpnI2R/snKokkGkPF247aeTudfw65D6\n2lAO5WY/clSvC3sFx5JplTm+V6+FAFH+yrJRs/sbWfR6eEuSlRI9Rk7sfP7zcmmo\n+GitmdFTEEcILBgQl8lNMvmNBOTwdhLfTuZVaTxcixCI2qUWuj9eIwD8YTR0uyfF\netRep+3lY6VXXWtU9o+XauuEr94NsQjrKetHTdPRP2f6nibdX4tPv8ndh+YpAgbZ\nlfr5YRyZAEMztKJ+8iFsNGkM25UB9TsZDl5cjD3139YmToKRZ6cQCcRqSntLtps=\n=bBWz\n-----END PGP SIGNATURE-----\n", "payload": "tree 2fd322b9bfd583bca41d1ec2ef3c1a67e0a666c9\nparent 1ded995ee79c44069b7832e5aba00162fc2113fa\nauthor Seiichi Uchida <seuchida@gmail.com> 1567777263 +0900\ncommitter GitHub <noreply@github.com> 1567777263 +0900\n\nUpdate rustc-ap-* crates to 581.0.0 (#3783)\n\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5baba86fe554424e8a58e3f1a3f29c258fce3296", "html_url": "https://github.com/rust-lang/rust/commit/5baba86fe554424e8a58e3f1a3f29c258fce3296", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5baba86fe554424e8a58e3f1a3f29c258fce3296/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ded995ee79c44069b7832e5aba00162fc2113fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ded995ee79c44069b7832e5aba00162fc2113fa", "html_url": "https://github.com/rust-lang/rust/commit/1ded995ee79c44069b7832e5aba00162fc2113fa"}], "stats": {"total": 369, "additions": 235, "deletions": 134}, "files": [{"sha": "9dcc509bba94d83e64d58fad948e57c33457eeec", "filename": "Cargo.lock", "status": "modified", "additions": 86, "deletions": 43, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/5baba86fe554424e8a58e3f1a3f29c258fce3296/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/5baba86fe554424e8a58e3f1a3f29c258fce3296/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=5baba86fe554424e8a58e3f1a3f29c258fce3296", "patch": "@@ -396,6 +396,15 @@ dependencies = [\n  \"rand 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"kernel32-sys\"\n+version = \"0.2.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"lazy_static\"\n version = \"1.3.0\"\n@@ -691,21 +700,21 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-arena\"\n-version = \"546.0.0\"\n+version = \"581.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"rustc-ap-rustc_data_structures 546.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 581.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"smallvec 0.6.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-graphviz\"\n-version = \"546.0.0\"\n+version = \"581.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"rustc-ap-rustc_data_structures\"\n-version = \"546.0.0\"\n+version = \"581.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cfg-if 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -716,8 +725,8 @@ dependencies = [\n  \"lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-graphviz 546.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 546.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-graphviz 581.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 581.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-rayon 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-rayon-core 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -727,27 +736,31 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-rustc_errors\"\n-version = \"546.0.0\"\n+version = \"581.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"annotate-snippets 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"atty 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 546.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 546.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-syntax_pos 546.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 581.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 581.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-syntax_pos 581.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"term_size 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"termcolor 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-width 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-rustc_lexer\"\n-version = \"546.0.0\"\n+version = \"581.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"unicode-xid 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n \n [[package]]\n name = \"rustc-ap-rustc_macros\"\n-version = \"546.0.0\"\n+version = \"581.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"itertools 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -759,19 +772,19 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-rustc_target\"\n-version = \"546.0.0\"\n+version = \"581.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bitflags 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 546.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 546.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-syntax_pos 546.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 581.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 581.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-syntax_pos 581.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-serialize\"\n-version = \"546.0.0\"\n+version = \"581.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"indexmap 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -780,33 +793,33 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-syntax\"\n-version = \"546.0.0\"\n+version = \"581.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bitflags 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 546.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_errors 546.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_lexer 546.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_macros 546.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_target 546.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 546.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-syntax_pos 546.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 581.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_errors 581.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_lexer 581.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_macros 581.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_target 581.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 581.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-syntax_pos 581.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"scoped-tls 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"smallvec 0.6.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-syntax_pos\"\n-version = \"546.0.0\"\n+version = \"581.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cfg-if 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-arena 546.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 546.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_macros 546.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 546.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-arena 581.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 581.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_macros 581.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 581.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"scoped-tls 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-width 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -886,9 +899,9 @@ dependencies = [\n  \"lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_target 546.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-syntax 546.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-syntax_pos 546.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_target 581.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-syntax 581.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-syntax_pos 581.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-workspace-hack 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustfmt-config_proc_macro 0.1.2\",\n  \"serde 1.0.97 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1042,6 +1055,16 @@ dependencies = [\n  \"winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"term_size\"\n+version = \"0.3.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.60 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"termcolor\"\n version = \"1.0.5\"\n@@ -1094,6 +1117,11 @@ name = \"unicode-xid\"\n version = \"0.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"unicode-xid\"\n+version = \"0.2.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"unicode_categories\"\n version = \"0.1.1\"\n@@ -1119,6 +1147,11 @@ dependencies = [\n  \"winapi-util 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"winapi\"\n+version = \"0.2.8\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"winapi\"\n version = \"0.3.7\"\n@@ -1128,6 +1161,11 @@ dependencies = [\n  \"winapi-x86_64-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"winapi-build\"\n+version = \"0.1.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"winapi-i686-pc-windows-gnu\"\n version = \"0.4.0\"\n@@ -1203,6 +1241,7 @@ dependencies = [\n \"checksum itertools 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5b8467d9c1cebe26feb08c640139247fac215782d35371ade9a2136ed6085358\"\n \"checksum itoa 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"501266b7edd0174f8530248f87f99c88fbe60ca4ef3dd486835b8d8d53136f7f\"\n \"checksum jobserver 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f74e73053eaf95399bf926e48fc7a2a3ce50bd0eaaa2357d391e95b2dcdd4f10\"\n+\"checksum kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d\"\n \"checksum lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bc5729f27f159ddd61f4df6228e827e86643d4d3e7c32183cb30a1c08f604a14\"\n \"checksum libc 0.2.60 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d44e80633f007889c7eff624b709ab43c92d708caad982295768a7b13ca3b5eb\"\n \"checksum lock_api 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"62ebf1391f6acad60e5c8b43706dde4582df75c06698ab44511d15016bc2442c\"\n@@ -1238,16 +1277,16 @@ dependencies = [\n \"checksum redox_users 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3fe5204c3a17e97dde73f285d49be585df59ed84b50a872baf416e73b62c3828\"\n \"checksum regex 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6b23da8dfd98a84bd7e08700190a5d9f7d2d38abd4369dd1dae651bc40bfd2cc\"\n \"checksum regex-syntax 0.6.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cd5485bf1523a9ed51c4964273f22f63f24e31632adb5dad134f488f86a3875c\"\n-\"checksum rustc-ap-arena 546.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4dc2e1e68b64268c543bfa6e63e3c0d9ea58074c71396f42f76931f35a9287f9\"\n-\"checksum rustc-ap-graphviz 546.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c108d647ce0dd46477b048eafff5a6273b5652e02d47424b0cd684147379c811\"\n-\"checksum rustc-ap-rustc_data_structures 546.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"656771744e0783cb8e4481e3b8b1f975687610aaf18833b898018111a0e0e582\"\n-\"checksum rustc-ap-rustc_errors 546.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e37064f6624bc799bfaa2968b61ee6880926dea2a8bba69f18aef6c8e69c9604\"\n-\"checksum rustc-ap-rustc_lexer 546.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ef5bc0a971823637ea23a857f0ef1467f44b1e05d71968821f83a0abe53e0fe3\"\n-\"checksum rustc-ap-rustc_macros 546.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b90037e3336fe8835f468db44d0848ae10d9cc8533ae89b55828883f905b7e80\"\n-\"checksum rustc-ap-rustc_target 546.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cadf9ca07315eab3a7a21f63872f9cc81e250fd6ede0419c24f8926ade73a45d\"\n-\"checksum rustc-ap-serialize 546.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"61673783f2089e01033ffa82d1988f55175402071b31253a358292e1624d4602\"\n-\"checksum rustc-ap-syntax 546.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"28f3dd1346d5b0269c07a4a78855e309a298ab569c9c1302d4d4f57f8eee4e84\"\n-\"checksum rustc-ap-syntax_pos 546.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"45e67b526dbda3a0c7dab91c8947d43685e7697f52686a4949da3c179cd7c979\"\n+\"checksum rustc-ap-arena 581.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e4efec6ece174df54e4605c3c229b5a8885355f9f8988cabbc24aa99dbc27f27\"\n+\"checksum rustc-ap-graphviz 581.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b01d685fc49fb05676a8829c7a9fa1759c441f1430384c32c8b42462409535f3\"\n+\"checksum rustc-ap-rustc_data_structures 581.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2e43082631e0b3782c216d02d7d86a221b58834a1b3ba2b686aa84309bd65ed9\"\n+\"checksum rustc-ap-rustc_errors 581.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1ad386fc563e7e5ab47d78eaf2ee37d430e1e6c0ca67a23df70fdee9c4bdf673\"\n+\"checksum rustc-ap-rustc_lexer 581.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c3820240b53041ee8932c866aaf9c877e3a55af31a2f5c333077b853e9bed2ac\"\n+\"checksum rustc-ap-rustc_macros 581.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"89b0931fe770efb7bc659e1900ef80d7bc8efeb4a36af94c5a89bea9e0230989\"\n+\"checksum rustc-ap-rustc_target 581.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"26a3d9de9e308ba21add5f92bc2dfd014f3ea06932df7ba10ac23c83c0c9bc03\"\n+\"checksum rustc-ap-serialize 581.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1e9f98141be65d2cc0bc8eb11e89bda9d4cec9ddf69dd46120c8f3840f9b5adc\"\n+\"checksum rustc-ap-syntax 581.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5643c677373d8fa1f19c93ce7b42f5628818964d4d3d7dc6ac191b2b6170e91b\"\n+\"checksum rustc-ap-syntax_pos 581.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1508b6dc46181580787b30876bc8cc1c76ca5851aec05d08e0065cd16c635736\"\n \"checksum rustc-demangle 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a7f4dccf6f4891ebcc0c39f9b6eb1a83b9bf5d747cb439ec6fba4f3b977038af\"\n \"checksum rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7540fc8b0c49f096ee9c961cda096467dce8084bec6bdca2fc83895fd9b28cb8\"\n \"checksum rustc-rayon 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0d2e07e19601f21c59aad953c2632172ba70cb27e685771514ea66e4062b3363\"\n@@ -1273,6 +1312,7 @@ dependencies = [\n \"checksum syn 0.15.42 (registry+https://github.com/rust-lang/crates.io-index)\" = \"eadc09306ca51a40555dd6fc2b415538e9e18bc9f870e47b1a524a79fe2dcf5e\"\n \"checksum synstructure 0.10.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"02353edf96d6e4dc81aea2d8490a7e9db177bf8acb0e951c24940bf866cb313f\"\n \"checksum term 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0dd90505d5006a4422d3520b30c781d480b3f36768c2fa2187c3e950bc110464\"\n+\"checksum term_size 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9e5b9a66db815dcfd2da92db471106457082577c3c278d4138ab3e3b4e189327\"\n \"checksum termcolor 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"96d6098003bde162e4277c70665bd87c326f5a0c3f3fbfb285787fa482d54e6e\"\n \"checksum textwrap 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d326610f408c7a4eb6f51c37c330e496b08506c9457c9d34287ecc38809fb060\"\n \"checksum thread_local 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c6b53e329000edc2b34dbe8545fd20e55a333362d0a321909685a19bd28c3f1b\"\n@@ -1281,11 +1321,14 @@ dependencies = [\n \"checksum unicode-segmentation 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1967f4cdfc355b37fd76d2a954fb2ed3871034eb4f26d60537d88795cfc332a9\"\n \"checksum unicode-width 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"882386231c45df4700b275c7ff55b6f3698780a650026380e72dabe76fa46526\"\n \"checksum unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fc72304796d0818e357ead4e000d19c9c174ab23dc11093ac919054d20a6a7fc\"\n+\"checksum unicode-xid 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"826e7639553986605ec5979c7dd957c7895e93eabed50ab2ffa7f6128a75097c\"\n \"checksum unicode_categories 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"39ec24b3121d976906ece63c9daad25b85969647682eee313cb5779fdd69e14e\"\n \"checksum utf8-ranges 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9d50aa7650df78abf942826607c62468ce18d9019673d4a2ebe1865dbb96ffde\"\n \"checksum vec_map 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"05c78687fb1a80548ae3250346c3db86a80a7cdd77bda190189f2d0a0987c81a\"\n \"checksum walkdir 2.2.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9658c94fa8b940eab2250bd5a457f9c48b748420d71293b165c8cdbe2f55f71e\"\n+\"checksum winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"167dc9d6949a9b857f3451275e911c3f44255842c1f7a76f33c55103a909087a\"\n \"checksum winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f10e386af2b13e47c89e7236a7a14a086791a2b88ebad6df9bf42040195cf770\"\n+\"checksum winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2d315eee3b34aca4797b2da6b13ed88266e6d612562a0c46390af8299fc699bc\"\n \"checksum winapi-i686-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n \"checksum winapi-util 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7168bab6e1daee33b4557efd0e95d5ca70a03706d39fa5f3fe7a236f584b03c9\"\n \"checksum winapi-x86_64-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\""}, {"sha": "27cf07c1332179006e624da83d78edeb26112be3", "filename": "Cargo.toml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5baba86fe554424e8a58e3f1a3f29c258fce3296/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5baba86fe554424e8a58e3f1a3f29c258fce3296/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=5baba86fe554424e8a58e3f1a3f29c258fce3296", "patch": "@@ -48,9 +48,9 @@ env_logger = \"0.6\"\n getopts = \"0.2\"\n derive-new = \"0.5\"\n cargo_metadata = \"0.8\"\n-rustc-ap-rustc_target = \"546.0.0\"\n-rustc-ap-syntax = \"546.0.0\"\n-rustc-ap-syntax_pos = \"546.0.0\"\n+rustc-ap-rustc_target = \"581.0.0\"\n+rustc-ap-syntax = \"581.0.0\"\n+rustc-ap-syntax_pos = \"581.0.0\"\n failure = \"0.1.3\"\n bytecount = \"0.5\"\n unicode-width = \"0.1.5\""}, {"sha": "7270215ccbbe68477c66059a8b443a4213c54cf9", "filename": "src/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5baba86fe554424e8a58e3f1a3f29c258fce3296/src%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5baba86fe554424e8a58e3f1a3f29c258fce3296/src%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fattr.rs?ref=5baba86fe554424e8a58e3f1a3f29c258fce3296", "patch": "@@ -340,7 +340,7 @@ impl Rewrite for ast::Attribute {\n \n                         let literal_str = literal.as_str();\n                         let doc_comment_formatter =\n-                            DocCommentFormatter::new(literal_str.get(), comment_style);\n+                            DocCommentFormatter::new(&*literal_str, comment_style);\n                         let doc_comment = format!(\"{}\", doc_comment_formatter);\n                         return rewrite_doc_comment(\n                             &doc_comment,"}, {"sha": "02bf1fa20e4f889ccad8763b7c27d551789f9b92", "filename": "src/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5baba86fe554424e8a58e3f1a3f29c258fce3296/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5baba86fe554424e8a58e3f1a3f29c258fce3296/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=5baba86fe554424e8a58e3f1a3f29c258fce3296", "patch": "@@ -1316,8 +1316,8 @@ pub(crate) fn can_be_overflowed_expr(\n             context.config.overflow_delimited_expr()\n                 || (context.use_block_indent() && args_len == 1)\n         }\n-        ast::ExprKind::Mac(ref macro_) => {\n-            match (macro_.node.delim, context.config.overflow_delimited_expr()) {\n+        ast::ExprKind::Mac(ref mac) => {\n+            match (mac.delim, context.config.overflow_delimited_expr()) {\n                 (ast::MacDelimiter::Bracket, true) | (ast::MacDelimiter::Brace, true) => true,\n                 _ => context.use_block_indent() && args_len == 1,\n             }"}, {"sha": "613f9b5b729de2567855159e9cf484cb609cc828", "filename": "src/items.rs", "status": "modified", "additions": 59, "deletions": 33, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/5baba86fe554424e8a58e3f1a3f29c258fce3296/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5baba86fe554424e8a58e3f1a3f29c258fce3296/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=5baba86fe554424e8a58e3f1a3f29c258fce3296", "patch": "@@ -473,8 +473,8 @@ impl<'a> FmtVisitor<'a> {\n         let discr_ident_lens: Vec<usize> = enum_def\n             .variants\n             .iter()\n-            .filter(|var| var.node.disr_expr.is_some())\n-            .map(|var| rewrite_ident(&self.get_context(), var.node.ident).len())\n+            .filter(|var| var.disr_expr.is_some())\n+            .map(|var| rewrite_ident(&self.get_context(), var.ident).len())\n             .collect();\n         // cut the list at the point of longest discrim shorter than the threshold\n         // All of the discrims under the threshold will get padded, and all above - left as is.\n@@ -491,8 +491,8 @@ impl<'a> FmtVisitor<'a> {\n                 \"}\",\n                 \",\",\n                 |f| {\n-                    if !f.node.attrs.is_empty() {\n-                        f.node.attrs[0].span.lo()\n+                    if !f.attrs.is_empty() {\n+                        f.attrs[0].span.lo()\n                     } else {\n                         f.span.lo()\n                     }\n@@ -533,34 +533,33 @@ impl<'a> FmtVisitor<'a> {\n         one_line_width: usize,\n         pad_discrim_ident_to: usize,\n     ) -> Option<String> {\n-        if contains_skip(&field.node.attrs) {\n-            let lo = field.node.attrs[0].span.lo();\n+        if contains_skip(&field.attrs) {\n+            let lo = field.attrs[0].span.lo();\n             let span = mk_sp(lo, field.span.hi());\n             return Some(self.snippet(span).to_owned());\n         }\n \n         let context = self.get_context();\n         // 1 = ','\n         let shape = self.shape().sub_width(1)?;\n-        let attrs_str = field.node.attrs.rewrite(&context, shape)?;\n+        let attrs_str = field.attrs.rewrite(&context, shape)?;\n         let lo = field\n-            .node\n             .attrs\n             .last()\n             .map_or(field.span.lo(), |attr| attr.span.hi());\n         let span = mk_sp(lo, field.span.lo());\n \n-        let variant_body = match field.node.data {\n+        let variant_body = match field.data {\n             ast::VariantData::Tuple(..) | ast::VariantData::Struct(..) => format_struct(\n                 &context,\n                 &StructParts::from_variant(field),\n                 self.block_indent,\n                 Some(one_line_width),\n             )?,\n-            ast::VariantData::Unit(..) => rewrite_ident(&context, field.node.ident).to_owned(),\n+            ast::VariantData::Unit(..) => rewrite_ident(&context, field.ident).to_owned(),\n         };\n \n-        let variant_body = if let Some(ref expr) = field.node.disr_expr {\n+        let variant_body = if let Some(ref expr) = field.disr_expr {\n             let lhs = format!(\"{:1$} =\", variant_body, pad_discrim_ident_to);\n             rewrite_assign_rhs_with(\n                 &context,\n@@ -585,27 +584,27 @@ impl<'a> FmtVisitor<'a> {\n                 buffer.push((self.buffer.clone(), item.clone()));\n                 self.buffer.clear();\n             }\n-            // type -> existential -> const -> macro -> method\n+            // type -> opaque -> const -> macro -> method\n             use crate::ast::ImplItemKind::*;\n             fn need_empty_line(a: &ast::ImplItemKind, b: &ast::ImplItemKind) -> bool {\n                 match (a, b) {\n-                    (Type(..), Type(..))\n+                    (TyAlias(..), TyAlias(..))\n                     | (Const(..), Const(..))\n-                    | (Existential(..), Existential(..)) => false,\n+                    | (OpaqueTy(..), OpaqueTy(..)) => false,\n                     _ => true,\n                 }\n             }\n \n             buffer.sort_by(|(_, a), (_, b)| match (&a.node, &b.node) {\n-                (Type(..), Type(..))\n+                (TyAlias(..), TyAlias(..))\n                 | (Const(..), Const(..))\n                 | (Macro(..), Macro(..))\n-                | (Existential(..), Existential(..)) => a.ident.as_str().cmp(&b.ident.as_str()),\n+                | (OpaqueTy(..), OpaqueTy(..)) => a.ident.as_str().cmp(&b.ident.as_str()),\n                 (Method(..), Method(..)) => a.span.lo().cmp(&b.span.lo()),\n-                (Type(..), _) => Ordering::Less,\n-                (_, Type(..)) => Ordering::Greater,\n-                (Existential(..), _) => Ordering::Less,\n-                (_, Existential(..)) => Ordering::Greater,\n+                (TyAlias(..), _) => Ordering::Less,\n+                (_, TyAlias(..)) => Ordering::Greater,\n+                (OpaqueTy(..), _) => Ordering::Less,\n+                (_, OpaqueTy(..)) => Ordering::Greater,\n                 (Const(..), _) => Ordering::Less,\n                 (_, Const(..)) => Ordering::Greater,\n                 (Macro(..), _) => Ordering::Less,\n@@ -920,9 +919,9 @@ impl<'a> StructParts<'a> {\n     fn from_variant(variant: &'a ast::Variant) -> Self {\n         StructParts {\n             prefix: \"\",\n-            ident: variant.node.ident,\n+            ident: variant.ident,\n             vis: &DEFAULT_VISIBILITY,\n-            def: &variant.node.data,\n+            def: &variant.data,\n             generics: None,\n             span: variant.span,\n         }\n@@ -1517,7 +1516,7 @@ pub(crate) fn rewrite_type_alias(\n     rewrite_type_item(context, indent, \"type\", \" =\", ident, ty, generics, vis)\n }\n \n-pub(crate) fn rewrite_existential_type(\n+pub(crate) fn rewrite_opaque_type(\n     context: &RewriteContext<'_>,\n     indent: Indent,\n     ident: ast::Ident,\n@@ -1528,8 +1527,8 @@ pub(crate) fn rewrite_existential_type(\n     rewrite_type_item(\n         context,\n         indent,\n-        \"existential type\",\n-        \":\",\n+        \"type\",\n+        \" =\",\n         ident,\n         generic_bounds,\n         generics,\n@@ -1786,15 +1785,42 @@ pub(crate) fn rewrite_associated_type(\n     }\n }\n \n-pub(crate) fn rewrite_existential_impl_type(\n+struct OpaqueType<'a> {\n+    bounds: &'a ast::GenericBounds,\n+}\n+\n+impl<'a> Rewrite for OpaqueType<'a> {\n+    fn rewrite(&self, context: &RewriteContext<'_>, shape: Shape) -> Option<String> {\n+        let shape = shape.offset_left(5)?; // `impl `\n+        self.bounds\n+            .rewrite(context, shape)\n+            .map(|s| format!(\"impl {}\", s))\n+    }\n+}\n+\n+pub(crate) fn rewrite_opaque_impl_type(\n     context: &RewriteContext<'_>,\n     ident: ast::Ident,\n     generics: &ast::Generics,\n     generic_bounds: &ast::GenericBounds,\n     indent: Indent,\n ) -> Option<String> {\n-    rewrite_associated_type(ident, None, generics, Some(generic_bounds), context, indent)\n-        .map(|s| format!(\"existential {}\", s))\n+    let ident_str = rewrite_ident(context, ident);\n+    // 5 = \"type \"\n+    let generics_shape = Shape::indented(indent, context.config).offset_left(5)?;\n+    let generics_str = rewrite_generics(context, ident_str, generics, generics_shape)?;\n+    let prefix = format!(\"type {} =\", generics_str);\n+    let rhs = OpaqueType {\n+        bounds: generic_bounds,\n+    };\n+\n+    rewrite_assign_rhs(\n+        context,\n+        &prefix,\n+        &rhs,\n+        Shape::indented(indent, context.config).sub_width(1)?,\n+    )\n+    .map(|s| s + \";\")\n }\n \n pub(crate) fn rewrite_associated_impl_type(\n@@ -1877,7 +1903,7 @@ fn get_missing_arg_comments(\n     (comment_before_colon, comment_after_colon)\n }\n \n-impl Rewrite for ast::Arg {\n+impl Rewrite for ast::Param {\n     fn rewrite(&self, context: &RewriteContext<'_>, shape: Shape) -> Option<String> {\n         if let Some(ref explicit_self) = self.to_self() {\n             rewrite_explicit_self(context, explicit_self)\n@@ -1941,23 +1967,23 @@ fn rewrite_explicit_self(\n     }\n }\n \n-pub(crate) fn span_lo_for_arg(arg: &ast::Arg) -> BytePos {\n+pub(crate) fn span_lo_for_arg(arg: &ast::Param) -> BytePos {\n     if is_named_arg(arg) {\n         arg.pat.span.lo()\n     } else {\n         arg.ty.span.lo()\n     }\n }\n \n-pub(crate) fn span_hi_for_arg(context: &RewriteContext<'_>, arg: &ast::Arg) -> BytePos {\n+pub(crate) fn span_hi_for_arg(context: &RewriteContext<'_>, arg: &ast::Param) -> BytePos {\n     match arg.ty.node {\n         ast::TyKind::Infer if context.snippet(arg.ty.span) == \"_\" => arg.ty.span.hi(),\n         ast::TyKind::Infer if is_named_arg(arg) => arg.pat.span.hi(),\n         _ => arg.ty.span.hi(),\n     }\n }\n \n-pub(crate) fn is_named_arg(arg: &ast::Arg) -> bool {\n+pub(crate) fn is_named_arg(arg: &ast::Param) -> bool {\n     if let ast::PatKind::Ident(_, ident, _) = arg.pat.node {\n         ident.name != symbol::kw::Invalid\n     } else {\n@@ -2349,7 +2375,7 @@ impl WhereClauseOption {\n \n fn rewrite_args(\n     context: &RewriteContext<'_>,\n-    args: &[ast::Arg],\n+    args: &[ast::Param],\n     one_line_budget: usize,\n     multi_line_budget: usize,\n     indent: Indent,"}, {"sha": "08f83b7e8261d6e11f89e2f8c813902689f17591", "filename": "src/macros.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5baba86fe554424e8a58e3f1a3f29c258fce3296/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5baba86fe554424e8a58e3f1a3f29c258fce3296/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=5baba86fe554424e8a58e3f1a3f29c258fce3296", "patch": "@@ -199,7 +199,7 @@ pub(crate) fn rewrite_macro(\n ) -> Option<String> {\n     let should_skip = context\n         .skip_context\n-        .skip_macro(&context.snippet(mac.node.path.span).to_owned());\n+        .skip_macro(&context.snippet(mac.path.span).to_owned());\n     if should_skip {\n         None\n     } else {\n@@ -235,7 +235,7 @@ fn check_keyword<'a, 'b: 'a>(parser: &'a mut Parser<'b>) -> Option<MacroArg> {\n         {\n             parser.bump();\n             let macro_arg =\n-                MacroArg::Keyword(ast::Ident::with_empty_ctxt(keyword), parser.prev_span);\n+                MacroArg::Keyword(ast::Ident::with_dummy_span(keyword), parser.prev_span);\n             return Some(macro_arg);\n         }\n     }\n@@ -259,15 +259,15 @@ fn rewrite_macro_inner(\n \n     let original_style = macro_style(mac, context);\n \n-    let macro_name = rewrite_macro_name(context, &mac.node.path, extra_ident);\n+    let macro_name = rewrite_macro_name(context, &mac.path, extra_ident);\n \n     let style = if FORCED_BRACKET_MACROS.contains(&&macro_name[..]) && !is_nested_macro {\n         DelimToken::Bracket\n     } else {\n         original_style\n     };\n \n-    let ts: TokenStream = mac.node.stream();\n+    let ts: TokenStream = mac.stream();\n     let has_comment = contains_comment(context.snippet(mac.span));\n     if ts.is_empty() && !has_comment {\n         return match style {\n@@ -1190,8 +1190,8 @@ fn next_space(tok: &TokenKind) -> SpaceState {\n /// when the macro is not an instance of `try!` (or parsing the inner expression\n /// failed).\n pub(crate) fn convert_try_mac(mac: &ast::Mac, context: &RewriteContext<'_>) -> Option<ast::Expr> {\n-    if &mac.node.path.to_string() == \"try\" {\n-        let ts: TokenStream = mac.node.tts.clone();\n+    if &mac.path.to_string() == \"try\" {\n+        let ts: TokenStream = mac.tts.clone();\n         let mut parser = new_parser_from_tts(context.parse_session, ts.trees().collect());\n \n         Some(ast::Expr {\n@@ -1532,7 +1532,7 @@ fn rewrite_macro_with_items(\n     Some(result)\n }\n \n-const RUST_KW: [Symbol; 60] = [\n+const RUST_KW: [Symbol; 59] = [\n     kw::PathRoot,\n     kw::DollarCrate,\n     kw::Underscore,\n@@ -1591,6 +1591,5 @@ const RUST_KW: [Symbol; 60] = [\n     kw::Auto,\n     kw::Catch,\n     kw::Default,\n-    kw::Existential,\n     kw::Union,\n ];"}, {"sha": "0c1ea008f687533cb072137e92c24ef671422df6", "filename": "src/modules.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5baba86fe554424e8a58e3f1a3f29c258fce3296/src%2Fmodules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5baba86fe554424e8a58e3f1a3f29c258fce3296/src%2Fmodules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmodules.rs?ref=5baba86fe554424e8a58e3f1a3f29c258fce3296", "patch": "@@ -442,7 +442,7 @@ fn parse_inner_attributes<'a>(parser: &mut parser::Parser<'a>) -> PResult<'a, Ve\n             }\n             TokenKind::DocComment(s) => {\n                 // we need to get the position of this token before we bump.\n-                let attr = attr::mk_sugared_doc_attr(attr::mk_attr_id(), s, parser.token.span);\n+                let attr = attr::mk_sugared_doc_attr(s, parser.token.span);\n                 if attr.style == ast::AttrStyle::Inner {\n                     attrs.push(attr);\n                     parser.bump();\n@@ -478,7 +478,7 @@ fn parse_mod_items<'a>(parser: &mut parser::Parser<'a>, inner_lo: Span) -> PResu\n fn is_cfg_if(item: &ast::Item) -> bool {\n     match item.node {\n         ast::ItemKind::Mac(ref mac) => {\n-            if let Some(first_segment) = mac.node.path.segments.first() {\n+            if let Some(first_segment) = mac.path.segments.first() {\n                 if first_segment.ident.name == Symbol::intern(\"cfg_if\") {\n                     return true;\n                 }"}, {"sha": "34b7e3463347bb88c46766fcc0825fe0d5cd62a5", "filename": "src/modules/visitor.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5baba86fe554424e8a58e3f1a3f29c258fce3296/src%2Fmodules%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5baba86fe554424e8a58e3f1a3f29c258fce3296/src%2Fmodules%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmodules%2Fvisitor.rs?ref=5baba86fe554424e8a58e3f1a3f29c258fce3296", "patch": "@@ -54,7 +54,7 @@ impl<'a, 'ast: 'a> CfgIfVisitor<'a> {\n         // extern crate cfg_if;\n         // cfg_if! {..}\n         // ```\n-        match mac.node.path.segments.first() {\n+        match mac.path.segments.first() {\n             Some(first_segment) => {\n                 if first_segment.ident.name != Symbol::intern(\"cfg_if\") {\n                     return Err(\"Expected cfg_if\");\n@@ -65,11 +65,8 @@ impl<'a, 'ast: 'a> CfgIfVisitor<'a> {\n             }\n         };\n \n-        let mut parser = stream_to_parser_with_base_dir(\n-            self.parse_sess,\n-            mac.node.tts.clone(),\n-            self.base_dir.clone(),\n-        );\n+        let mut parser =\n+            stream_to_parser_with_base_dir(self.parse_sess, mac.tts.clone(), self.base_dir.clone());\n         parser.cfg_mods = false;\n         let mut process_if_cfg = true;\n "}, {"sha": "96d45c6ac55d143be27fce5b8158ad7c74fd6571", "filename": "src/patterns.rs", "status": "modified", "additions": 34, "deletions": 7, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/5baba86fe554424e8a58e3f1a3f29c258fce3296/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5baba86fe554424e8a58e3f1a3f29c258fce3296/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=5baba86fe554424e8a58e3f1a3f29c258fce3296", "patch": "@@ -1,13 +1,13 @@\n use syntax::ast::{self, BindingMode, FieldPat, Pat, PatKind, RangeEnd, RangeSyntax};\n use syntax::ptr;\n-use syntax::source_map::{self, BytePos, Span};\n+use syntax::source_map::{BytePos, Span};\n \n use crate::comment::{combine_strs_with_missing_comments, FindUncommented};\n use crate::config::lists::*;\n use crate::expr::{can_be_overflowed_expr, rewrite_unary_prefix, wrap_struct_field};\n use crate::lists::{\n-    itemize_list, shape_for_tactic, struct_lit_formatting, struct_lit_shape, struct_lit_tactic,\n-    write_list,\n+    definitive_tactic, itemize_list, shape_for_tactic, struct_lit_formatting, struct_lit_shape,\n+    struct_lit_tactic, write_list, ListFormatting, Separator,\n };\n use crate::macros::{rewrite_macro, MacroPosition};\n use crate::overflow;\n@@ -51,12 +51,39 @@ fn is_short_pattern_inner(pat: &ast::Pat) -> bool {\n         ast::PatKind::Box(ref p) | ast::PatKind::Ref(ref p, _) | ast::PatKind::Paren(ref p) => {\n             is_short_pattern_inner(&*p)\n         }\n+        PatKind::Or(ref pats) => pats.iter().all(|p| is_short_pattern_inner(p)),\n     }\n }\n \n impl Rewrite for Pat {\n     fn rewrite(&self, context: &RewriteContext<'_>, shape: Shape) -> Option<String> {\n         match self.node {\n+            PatKind::Or(ref pats) => {\n+                let pat_items = itemize_list(\n+                    context.snippet_provider,\n+                    pats.iter(),\n+                    \"\",\n+                    \"|\",\n+                    |pat| pat.span().lo(),\n+                    |pat| pat.span().hi(),\n+                    |pat| pat.rewrite(context, shape),\n+                    self.span.lo(),\n+                    self.span.hi(),\n+                    false,\n+                );\n+                let pat_vec: Vec<_> = pat_items.collect();\n+                let tactic = definitive_tactic(\n+                    &pat_vec,\n+                    ListTactic::HorizontalVertical,\n+                    Separator::VerticalBar,\n+                    shape.width,\n+                );\n+                let fmt = ListFormatting::new(shape, context.config)\n+                    .tactic(tactic)\n+                    .trailing_separator(SeparatorTactic::Never)\n+                    .separator(\" |\");\n+                write_list(&pat_vec, &fmt)\n+            }\n             PatKind::Box(ref pat) => rewrite_unary_prefix(context, \"box \", &**pat, shape),\n             PatKind::Ident(binding_mode, ident, ref sub_pat) => {\n                 let (prefix, mutability) = match binding_mode {\n@@ -154,7 +181,7 @@ impl Rewrite for Pat {\n \n fn rewrite_struct_pat(\n     path: &ast::Path,\n-    fields: &[source_map::Spanned<ast::FieldPat>],\n+    fields: &[ast::FieldPat],\n     ellipsis: bool,\n     span: Span,\n     context: &RewriteContext<'_>,\n@@ -180,14 +207,14 @@ fn rewrite_struct_pat(\n         terminator,\n         \",\",\n         |f| {\n-            if f.node.attrs.is_empty() {\n+            if f.attrs.is_empty() {\n                 f.span.lo()\n             } else {\n-                f.node.attrs.first().unwrap().span.lo()\n+                f.attrs.first().unwrap().span.lo()\n             }\n         },\n         |f| f.span.hi(),\n-        |f| f.node.rewrite(context, v_shape),\n+        |f| f.rewrite(context, v_shape),\n         context.snippet_provider.span_after(span, \"{\"),\n         span.hi(),\n         false,"}, {"sha": "bbdee6ccf4bf916061b140b30b53eae6df41d3a5", "filename": "src/spanned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5baba86fe554424e8a58e3f1a3f29c258fce3296/src%2Fspanned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5baba86fe554424e8a58e3f1a3f29c258fce3296/src%2Fspanned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fspanned.rs?ref=5baba86fe554424e8a58e3f1a3f29c258fce3296", "patch": "@@ -104,7 +104,7 @@ impl Spanned for ast::Arm {\n     }\n }\n \n-impl Spanned for ast::Arg {\n+impl Spanned for ast::Param {\n     fn span(&self) -> Span {\n         if crate::items::is_named_arg(self) {\n             mk_sp(self.pat.span.lo(), self.ty.span.hi())"}, {"sha": "5b0d94e4780732b8ad48c3b3f9af504c611a978d", "filename": "src/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5baba86fe554424e8a58e3f1a3f29c258fce3296/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5baba86fe554424e8a58e3f1a3f29c258fce3296/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=5baba86fe554424e8a58e3f1a3f29c258fce3296", "patch": "@@ -8,7 +8,7 @@ use syntax::ast::{\n     VisibilityKind,\n };\n use syntax::ptr;\n-use syntax::source_map::{BytePos, Span, NO_EXPANSION};\n+use syntax::source_map::{BytePos, Span, SyntaxContext};\n use syntax::symbol::{sym, Symbol};\n use syntax_pos::ExpnId;\n use unicode_width::UnicodeWidthStr;\n@@ -335,7 +335,7 @@ macro_rules! source {\n }\n \n pub(crate) fn mk_sp(lo: BytePos, hi: BytePos) -> Span {\n-    Span::new(lo, hi, NO_EXPANSION)\n+    Span::new(lo, hi, SyntaxContext::root())\n }\n \n // Returns `true` if the given span does not intersect with file lines."}, {"sha": "831fd56819f51679f512e2ceda45fcf5b8866385", "filename": "src/visitor.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5baba86fe554424e8a58e3f1a3f29c258fce3296/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5baba86fe554424e8a58e3f1a3f29c258fce3296/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=5baba86fe554424e8a58e3f1a3f29c258fce3296", "patch": "@@ -11,8 +11,8 @@ use crate::config::{BraceStyle, Config};\n use crate::coverage::transform_missing_snippet;\n use crate::items::{\n     format_impl, format_trait, format_trait_alias, is_mod_decl, is_use_item,\n-    rewrite_associated_impl_type, rewrite_associated_type, rewrite_existential_impl_type,\n-    rewrite_existential_type, rewrite_extern_crate, rewrite_type_alias, FnBraceStyle, FnSig,\n+    rewrite_associated_impl_type, rewrite_associated_type, rewrite_extern_crate,\n+    rewrite_opaque_impl_type, rewrite_opaque_type, rewrite_type_alias, FnBraceStyle, FnSig,\n     StaticParts, StructParts,\n };\n use crate::macros::{rewrite_macro, rewrite_macro_def, MacroPosition};\n@@ -97,11 +97,20 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n \n     fn visit_stmt(&mut self, stmt: &Stmt<'_>) {\n         debug!(\n-            \"visit_stmt: {:?} {:?}\",\n+            \"visit_stmt: {:?} {:?} `{}`\",\n             self.source_map.lookup_char_pos(stmt.span().lo()),\n-            self.source_map.lookup_char_pos(stmt.span().hi())\n+            self.source_map.lookup_char_pos(stmt.span().hi()),\n+            self.snippet(stmt.span()),\n         );\n \n+        // https://github.com/rust-lang/rust/issues/63679.\n+        let is_all_semicolons =\n+            |snippet: &str| snippet.chars().all(|c| c.is_whitespace() || c == ';');\n+        if is_all_semicolons(&self.snippet(stmt.span())) {\n+            self.last_pos = stmt.span().hi();\n+            return;\n+        }\n+\n         match stmt.as_ast_node().node {\n             ast::StmtKind::Item(ref item) => {\n                 self.visit_item(item);\n@@ -468,7 +477,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                         Some(&inner_attrs),\n                     )\n                 }\n-                ast::ItemKind::Ty(ref ty, ref generics) => {\n+                ast::ItemKind::TyAlias(ref ty, ref generics) => {\n                     let rewrite = rewrite_type_alias(\n                         &self.get_context(),\n                         self.block_indent,\n@@ -479,8 +488,8 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                     );\n                     self.push_rewrite(item.span, rewrite);\n                 }\n-                ast::ItemKind::Existential(ref generic_bounds, ref generics) => {\n-                    let rewrite = rewrite_existential_type(\n+                ast::ItemKind::OpaqueTy(ref generic_bounds, ref generics) => {\n+                    let rewrite = rewrite_opaque_type(\n                         &self.get_context(),\n                         self.block_indent,\n                         item.ident,\n@@ -576,7 +585,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                 );\n             }\n             ast::ImplItemKind::Const(..) => self.visit_static(&StaticParts::from_impl_item(ii)),\n-            ast::ImplItemKind::Type(ref ty) => {\n+            ast::ImplItemKind::TyAlias(ref ty) => {\n                 let rewrite = rewrite_associated_impl_type(\n                     ii.ident,\n                     ii.defaultness,\n@@ -587,8 +596,8 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                 );\n                 self.push_rewrite(ii.span, rewrite);\n             }\n-            ast::ImplItemKind::Existential(ref generic_bounds) => {\n-                let rewrite = rewrite_existential_impl_type(\n+            ast::ImplItemKind::OpaqueTy(ref generic_bounds) => {\n+                let rewrite = rewrite_opaque_impl_type(\n                     &self.get_context(),\n                     ii.ident,\n                     &ii.generics,"}, {"sha": "92412fca8793b5a9d8007061bad145270749e188", "filename": "tests/source/existential_type.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5baba86fe554424e8a58e3f1a3f29c258fce3296/tests%2Fsource%2Fexistential_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5baba86fe554424e8a58e3f1a3f29c258fce3296/tests%2Fsource%2Fexistential_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fexistential_type.rs?ref=5baba86fe554424e8a58e3f1a3f29c258fce3296", "patch": "@@ -1,15 +1,15 @@\n-// Existential type.\n+// Opaque type.\n \n-    #![feature(existential_type)]\n+    #![feature(type_alias_impl_trait)]\n \n-pub existential type Adder<F, T>\n+pub type Adder<F, T>\n where\n     T: Clone,\n     F: Copy\n-    : Fn(T) -> T;\n+    = impl Fn(T) -> T;\n \n-pub existential type Adderrr<T>: Fn(  T  ) -> T;\n+pub type Adderrr<T> = impl Fn(  T  ) -> T;\n \n impl Foo for Bar {\n-existential type E  : Trait;\n+type E  = impl Trait;\n }"}, {"sha": "1bda857be766a152dabf8ec0b261fcae0806b1af", "filename": "tests/source/issue-2863.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5baba86fe554424e8a58e3f1a3f29c258fce3296/tests%2Fsource%2Fissue-2863.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5baba86fe554424e8a58e3f1a3f29c258fce3296/tests%2Fsource%2Fissue-2863.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-2863.rs?ref=5baba86fe554424e8a58e3f1a3f29c258fce3296", "patch": "@@ -1,7 +1,7 @@\n // rustfmt-reorder_impl_items: true\n \n impl<T> IntoIterator for SafeVec<T> {\n-    existential type F: Trait;\n+    type F = impl Trait;\n     type IntoIter = self::IntoIter<T>;\n     type Item = T;\n     // comment on foo()\n@@ -19,7 +19,7 @@ impl<T> IntoIterator for SafeVec<T> {\n     fn foo6() {println!(\"hello, world\");}\n     fn foo7() {println!(\"hello, world\");}\n     type BarFoo = u32;\n-    existential type E: Trait;\n+    type E = impl Trait;\n     const AnotherConst: i32 = 100;\n     fn foo8() {println!(\"hello, world\");}\n }"}, {"sha": "869ffda2378a8516d09323ac1a5065acb3c41cbd", "filename": "tests/target/existential_type.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5baba86fe554424e8a58e3f1a3f29c258fce3296/tests%2Ftarget%2Fexistential_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5baba86fe554424e8a58e3f1a3f29c258fce3296/tests%2Ftarget%2Fexistential_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fexistential_type.rs?ref=5baba86fe554424e8a58e3f1a3f29c258fce3296", "patch": "@@ -1,15 +1,15 @@\n-// Existential type.\n+// Opaque type.\n \n-#![feature(existential_type)]\n+#![feature(type_alias_impl_trait)]\n \n-pub existential type Adder<F, T>\n+pub type Adder<F, T>\n where\n     T: Clone,\n     F: Copy,\n-: Fn(T) -> T;\n+= Fn(T) -> T;\n \n-pub existential type Adderrr<T>: Fn(T) -> T;\n+pub type Adderrr<T> = Fn(T) -> T;\n \n impl Foo for Bar {\n-    existential type E: Trait;\n+    type E = impl Trait;\n }"}, {"sha": "35a80f7a621e8a01613ec203bb48d35921060730", "filename": "tests/target/issue-2863.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5baba86fe554424e8a58e3f1a3f29c258fce3296/tests%2Ftarget%2Fissue-2863.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5baba86fe554424e8a58e3f1a3f29c258fce3296/tests%2Ftarget%2Fissue-2863.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-2863.rs?ref=5baba86fe554424e8a58e3f1a3f29c258fce3296", "patch": "@@ -9,8 +9,8 @@ impl<T> IntoIterator for SafeVec<T> {\n     type IntoIter = self::IntoIter<T>;\n     type Item = T;\n \n-    existential type E: Trait;\n-    existential type F: Trait;\n+    type E = impl Trait;\n+    type F = impl Trait;\n \n     const AnotherConst: i32 = 100;\n     const SomeConst: i32 = 100;"}]}