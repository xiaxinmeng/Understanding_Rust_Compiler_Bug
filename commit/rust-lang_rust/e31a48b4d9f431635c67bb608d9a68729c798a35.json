{"sha": "e31a48b4d9f431635c67bb608d9a68729c798a35", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzMWE0OGI0ZDlmNDMxNjM1YzY3YmI2MDhkOWE2ODcyOWM3OThhMzU=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-08-30T10:26:45Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-08-30T10:26:45Z"}, "message": "Refactoring: remove duplicates", "tree": {"sha": "256faf19f5a4d79a0416b6210cbd91d0687340a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/256faf19f5a4d79a0416b6210cbd91d0687340a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e31a48b4d9f431635c67bb608d9a68729c798a35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e31a48b4d9f431635c67bb608d9a68729c798a35", "html_url": "https://github.com/rust-lang/rust/commit/e31a48b4d9f431635c67bb608d9a68729c798a35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e31a48b4d9f431635c67bb608d9a68729c798a35/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e780532239b391e19418707bbbc8b79c90bbb055", "url": "https://api.github.com/repos/rust-lang/rust/commits/e780532239b391e19418707bbbc8b79c90bbb055", "html_url": "https://github.com/rust-lang/rust/commit/e780532239b391e19418707bbbc8b79c90bbb055"}], "stats": {"total": 49, "additions": 18, "deletions": 31}, "files": [{"sha": "afa81693548fa9b53d0e5d7d4f288a66d9daa6c9", "filename": "src/imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e31a48b4d9f431635c67bb608d9a68729c798a35/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e31a48b4d9f431635c67bb608d9a68729c798a35/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=e31a48b4d9f431635c67bb608d9a68729c798a35", "patch": "@@ -260,7 +260,7 @@ impl<'a> FmtVisitor<'a> {\n     ) {\n         let vis = utils::format_visibility(vis);\n         // 4 = `use `, 1 = `;`\n-        let rw = Shape::indented(self.block_indent, self.config)\n+        let rw = self.shape()\n             .offset_left(vis.len() + 4)\n             .and_then(|shape| shape.sub_width(1))\n             .and_then(|shape| match vp.node {"}, {"sha": "5908464c416f65998f35950d81c7b1078dcaf8df", "filename": "src/items.rs", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e31a48b4d9f431635c67bb608d9a68729c798a35/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e31a48b4d9f431635c67bb608d9a68729c798a35/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=e31a48b4d9f431635c67bb608d9a68729c798a35", "patch": "@@ -187,8 +187,7 @@ impl<'a> FmtVisitor<'a> {\n \n \n     fn format_foreign_item(&mut self, item: &ast::ForeignItem) {\n-        let shape = Shape::indented(self.block_indent, self.config);\n-        let rewrite = item.rewrite(&self.get_context(), shape);\n+        let rewrite = item.rewrite(&self.get_context(), self.shape());\n         self.push_rewrite(item.span(), rewrite);\n         self.last_pos = item.span.hi;\n     }\n@@ -312,18 +311,11 @@ impl<'a> FmtVisitor<'a> {\n                                 \"\"\n                             };\n \n-                            format_expr(\n-                                &e,\n-                                ExprType::Statement,\n-                                &self.get_context(),\n-                                Shape::indented(self.block_indent, self.config),\n-                            ).map(|s| s + suffix)\n+                            format_expr(&e, ExprType::Statement, &self.get_context(), self.shape())\n+                                .map(|s| s + suffix)\n                                 .or_else(|| Some(self.snippet(e.span)))\n                         }\n-                        None => stmt.rewrite(\n-                            &self.get_context(),\n-                            Shape::indented(self.block_indent, self.config),\n-                        ),\n+                        None => stmt.rewrite(&self.get_context(), self.shape()),\n                     }\n                 } else {\n                     None\n@@ -421,9 +413,7 @@ impl<'a> FmtVisitor<'a> {\n             false,\n         );\n \n-        let shape = Shape::indented(self.block_indent, self.config)\n-            .sub_width(2)\n-            .unwrap();\n+        let shape = self.shape().sub_width(2).unwrap();\n         let fmt = ListFormatting {\n             tactic: DefinitiveListTactic::Vertical,\n             separator: \",\",\n@@ -451,7 +441,7 @@ impl<'a> FmtVisitor<'a> {\n \n         let context = self.get_context();\n         let indent = self.block_indent;\n-        let shape = Shape::indented(indent, self.config);\n+        let shape = self.shape();\n         let attrs_str = try_opt!(field.node.attrs.rewrite(&context, shape));\n         let lo = field\n             .node"}, {"sha": "fad14f19ce824cf068629c141e331739b014c231", "filename": "src/visitor.rs", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e31a48b4d9f431635c67bb608d9a68729c798a35/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e31a48b4d9f431635c67bb608d9a68729c798a35/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=e31a48b4d9f431635c67bb608d9a68729c798a35", "patch": "@@ -58,6 +58,10 @@ pub struct FmtVisitor<'a> {\n }\n \n impl<'a> FmtVisitor<'a> {\n+    pub fn shape(&self) -> Shape {\n+        Shape::indented(self.block_indent, self.config)\n+    }\n+\n     fn visit_stmt(&mut self, stmt: &ast::Stmt) {\n         debug!(\n             \"visit_stmt: {:?} {:?}\",\n@@ -138,9 +142,7 @@ impl<'a> FmtVisitor<'a> {\n             if let Some(first_stmt) = b.stmts.first() {\n                 let attr_lo = inner_attrs\n                     .and_then(|attrs| {\n-                        utils::inner_attributes(attrs)\n-                            .first()\n-                            .map(|attr| attr.span.lo)\n+                        inner_attributes(attrs).first().map(|attr| attr.span.lo)\n                     })\n                     .or_else(|| {\n                         // Attributes for an item in a statement position\n@@ -218,7 +220,7 @@ impl<'a> FmtVisitor<'a> {\n         let mut unindent_comment = self.is_if_else_block && !b.stmts.is_empty();\n         if unindent_comment {\n             let end_pos = source!(self, b.span).hi - brace_compensation - remove_len;\n-            let snippet = self.get_context().snippet(mk_sp(self.last_pos, end_pos));\n+            let snippet = self.snippet(mk_sp(self.last_pos, end_pos));\n             unindent_comment = snippet.contains(\"//\") || snippet.contains(\"/*\");\n         }\n         // FIXME: we should compress any newlines here to just one\n@@ -336,7 +338,7 @@ impl<'a> FmtVisitor<'a> {\n                         self.push_rewrite(item.span, None);\n                         return;\n                     }\n-                } else if utils::contains_skip(&item.attrs) {\n+                } else if contains_skip(&item.attrs) {\n                     // Module is not inline, but should be skipped.\n                     return;\n                 } else {\n@@ -371,7 +373,7 @@ impl<'a> FmtVisitor<'a> {\n             }\n             ast::ItemKind::Impl(..) => {\n                 self.format_missing_with_indent(source!(self, item.span).lo);\n-                let snippet = self.get_context().snippet(item.span);\n+                let snippet = self.snippet(item.span);\n                 let where_span_end = snippet\n                     .find_uncommented(\"{\")\n                     .map(|x| (BytePos(x as u32)) + source!(self, item.span).lo);\n@@ -635,9 +637,7 @@ impl<'a> FmtVisitor<'a> {\n         skip_out_of_file_lines_range_visitor!(self, mac.span);\n \n         // 1 = ;\n-        let shape = Shape::indented(self.block_indent, self.config)\n-            .sub_width(1)\n-            .unwrap();\n+        let shape = self.shape().sub_width(1).unwrap();\n         let rewrite = rewrite_macro(mac, ident, &self.get_context(), shape, pos);\n         self.push_rewrite(mac.span, rewrite);\n     }\n@@ -677,7 +677,7 @@ impl<'a> FmtVisitor<'a> {\n \n     // Returns true if we should skip the following item.\n     pub fn visit_attrs(&mut self, attrs: &[ast::Attribute], style: ast::AttrStyle) -> bool {\n-        if utils::contains_skip(attrs) {\n+        if contains_skip(attrs) {\n             return true;\n         }\n \n@@ -686,10 +686,7 @@ impl<'a> FmtVisitor<'a> {\n             return false;\n         }\n \n-        let rewrite = attrs.rewrite(\n-            &self.get_context(),\n-            Shape::indented(self.block_indent, self.config),\n-        );\n+        let rewrite = attrs.rewrite(&self.get_context(), self.shape());\n         let span = mk_sp(attrs[0].span.lo, attrs[attrs.len() - 1].span.hi);\n         self.push_rewrite(span, rewrite);\n "}]}