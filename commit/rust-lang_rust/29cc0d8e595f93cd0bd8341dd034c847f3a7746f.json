{"sha": "29cc0d8e595f93cd0bd8341dd034c847f3a7746f", "node_id": "C_kwDOAAsO6NoAKDI5Y2MwZDhlNTk1ZjkzY2QwYmQ4MzQxZGQwMzRjODQ3ZjNhNzc0NmY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-05T14:56:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-05T14:56:42Z"}, "message": "Auto merge of #8372 - tamaroning:unwrap_used, r=llogiq\n\nmake unwrap_used also trigger on .get().unwrap()\n\nfixes #8124\nchangelog: make the [unwrap_used] lint trigger for code of the form such as `.get(i).unwrap()` and `.get_mut(i).unwrap()`", "tree": {"sha": "68cb3c24735c422d6d1601eb33fc5f5403199e03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68cb3c24735c422d6d1601eb33fc5f5403199e03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29cc0d8e595f93cd0bd8341dd034c847f3a7746f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29cc0d8e595f93cd0bd8341dd034c847f3a7746f", "html_url": "https://github.com/rust-lang/rust/commit/29cc0d8e595f93cd0bd8341dd034c847f3a7746f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29cc0d8e595f93cd0bd8341dd034c847f3a7746f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "699ee5e31cbf6c8c97eafef635fc6df8d17e358f", "url": "https://api.github.com/repos/rust-lang/rust/commits/699ee5e31cbf6c8c97eafef635fc6df8d17e358f", "html_url": "https://github.com/rust-lang/rust/commit/699ee5e31cbf6c8c97eafef635fc6df8d17e358f"}, {"sha": "447ed5ce5234e645df298847fd616817d3dfd6e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/447ed5ce5234e645df298847fd616817d3dfd6e4", "html_url": "https://github.com/rust-lang/rust/commit/447ed5ce5234e645df298847fd616817d3dfd6e4"}], "stats": {"total": 174, "additions": 149, "deletions": 25}, "files": [{"sha": "5b4a152afd5da7118ba327d8b86412f4d63d93f1", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/29cc0d8e595f93cd0bd8341dd034c847f3a7746f/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29cc0d8e595f93cd0bd8341dd034c847f3a7746f/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=29cc0d8e595f93cd0bd8341dd034c847f3a7746f", "patch": "@@ -2402,10 +2402,17 @@ fn check_methods<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, msrv: Optio\n             (\"to_os_string\" | \"to_owned\" | \"to_path_buf\" | \"to_vec\", []) => {\n                 implicit_clone::check(cx, name, expr, recv);\n             },\n-            (\"unwrap\", []) => match method_call(recv) {\n-                Some((\"get\", [recv, get_arg], _)) => get_unwrap::check(cx, expr, recv, get_arg, false),\n-                Some((\"get_mut\", [recv, get_arg], _)) => get_unwrap::check(cx, expr, recv, get_arg, true),\n-                _ => unwrap_used::check(cx, expr, recv),\n+            (\"unwrap\", []) => {\n+                match method_call(recv) {\n+                    Some((\"get\", [recv, get_arg], _)) => {\n+                        get_unwrap::check(cx, expr, recv, get_arg, false);\n+                    },\n+                    Some((\"get_mut\", [recv, get_arg], _)) => {\n+                        get_unwrap::check(cx, expr, recv, get_arg, true);\n+                    },\n+                    _ => {},\n+                }\n+                unwrap_used::check(cx, expr, recv);\n             },\n             (\"unwrap_or\", [u_arg]) => match method_call(recv) {\n                 Some((arith @ (\"checked_add\" | \"checked_sub\" | \"checked_mul\"), [lhs, rhs], _)) => {"}, {"sha": "c3a36dcabd1a9392278988dd9150ddd69a847649", "filename": "tests/ui/get_unwrap.fixed", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/29cc0d8e595f93cd0bd8341dd034c847f3a7746f/tests%2Fui%2Fget_unwrap.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/29cc0d8e595f93cd0bd8341dd034c847f3a7746f/tests%2Fui%2Fget_unwrap.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fget_unwrap.fixed?ref=29cc0d8e595f93cd0bd8341dd034c847f3a7746f", "patch": "@@ -1,5 +1,7 @@\n // run-rustfix\n+\n #![allow(unused_mut, clippy::from_iter_instead_of_collect)]\n+#![warn(clippy::unwrap_used)]\n #![deny(clippy::get_unwrap)]\n \n use std::collections::BTreeMap;\n@@ -37,6 +39,7 @@ fn main() {\n         let _ = &some_vecdeque[0];\n         let _ = &some_hashmap[&1];\n         let _ = &some_btreemap[&1];\n+        #[allow(clippy::unwrap_used)]\n         let _ = false_positive.get(0).unwrap();\n         // Test with deref\n         let _: u8 = boxed_slice[1];\n@@ -49,9 +52,12 @@ fn main() {\n         some_vec[0] = 1;\n         some_vecdeque[0] = 1;\n         // Check false positives\n-        *some_hashmap.get_mut(&1).unwrap() = 'b';\n-        *some_btreemap.get_mut(&1).unwrap() = 'b';\n-        *false_positive.get_mut(0).unwrap() = 1;\n+        #[allow(clippy::unwrap_used)]\n+        {\n+            *some_hashmap.get_mut(&1).unwrap() = 'b';\n+            *some_btreemap.get_mut(&1).unwrap() = 'b';\n+            *false_positive.get_mut(0).unwrap() = 1;\n+        }\n     }\n \n     {"}, {"sha": "d77a202aa39c3455026a095bd64e71b56c13fa40", "filename": "tests/ui/get_unwrap.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/29cc0d8e595f93cd0bd8341dd034c847f3a7746f/tests%2Fui%2Fget_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29cc0d8e595f93cd0bd8341dd034c847f3a7746f/tests%2Fui%2Fget_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fget_unwrap.rs?ref=29cc0d8e595f93cd0bd8341dd034c847f3a7746f", "patch": "@@ -1,5 +1,7 @@\n // run-rustfix\n+\n #![allow(unused_mut, clippy::from_iter_instead_of_collect)]\n+#![warn(clippy::unwrap_used)]\n #![deny(clippy::get_unwrap)]\n \n use std::collections::BTreeMap;\n@@ -37,6 +39,7 @@ fn main() {\n         let _ = some_vecdeque.get(0).unwrap();\n         let _ = some_hashmap.get(&1).unwrap();\n         let _ = some_btreemap.get(&1).unwrap();\n+        #[allow(clippy::unwrap_used)]\n         let _ = false_positive.get(0).unwrap();\n         // Test with deref\n         let _: u8 = *boxed_slice.get(1).unwrap();\n@@ -49,9 +52,12 @@ fn main() {\n         *some_vec.get_mut(0).unwrap() = 1;\n         *some_vecdeque.get_mut(0).unwrap() = 1;\n         // Check false positives\n-        *some_hashmap.get_mut(&1).unwrap() = 'b';\n-        *some_btreemap.get_mut(&1).unwrap() = 'b';\n-        *false_positive.get_mut(0).unwrap() = 1;\n+        #[allow(clippy::unwrap_used)]\n+        {\n+            *some_hashmap.get_mut(&1).unwrap() = 'b';\n+            *some_btreemap.get_mut(&1).unwrap() = 'b';\n+            *false_positive.get_mut(0).unwrap() = 1;\n+        }\n     }\n \n     {"}, {"sha": "cb5f44fbd59ee6114a6f339a533c93cf24dbd5a9", "filename": "tests/ui/get_unwrap.stderr", "status": "modified", "additions": 120, "deletions": 15, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/29cc0d8e595f93cd0bd8341dd034c847f3a7746f/tests%2Fui%2Fget_unwrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29cc0d8e595f93cd0bd8341dd034c847f3a7746f/tests%2Fui%2Fget_unwrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fget_unwrap.stderr?ref=29cc0d8e595f93cd0bd8341dd034c847f3a7746f", "patch": "@@ -1,86 +1,191 @@\n error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise\n-  --> $DIR/get_unwrap.rs:34:17\n+  --> $DIR/get_unwrap.rs:36:17\n    |\n LL |         let _ = boxed_slice.get(1).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&boxed_slice[1]`\n    |\n note: the lint level is defined here\n-  --> $DIR/get_unwrap.rs:3:9\n+  --> $DIR/get_unwrap.rs:5:9\n    |\n LL | #![deny(clippy::get_unwrap)]\n    |         ^^^^^^^^^^^^^^^^^^\n \n+error: used `unwrap()` on `an Option` value\n+  --> $DIR/get_unwrap.rs:36:17\n+   |\n+LL |         let _ = boxed_slice.get(1).unwrap();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::unwrap-used` implied by `-D warnings`\n+   = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n+\n error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise\n-  --> $DIR/get_unwrap.rs:35:17\n+  --> $DIR/get_unwrap.rs:37:17\n    |\n LL |         let _ = some_slice.get(0).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_slice[0]`\n \n+error: used `unwrap()` on `an Option` value\n+  --> $DIR/get_unwrap.rs:37:17\n+   |\n+LL |         let _ = some_slice.get(0).unwrap();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n+\n error: called `.get().unwrap()` on a Vec. Using `[]` is more clear and more concise\n-  --> $DIR/get_unwrap.rs:36:17\n+  --> $DIR/get_unwrap.rs:38:17\n    |\n LL |         let _ = some_vec.get(0).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_vec[0]`\n \n+error: used `unwrap()` on `an Option` value\n+  --> $DIR/get_unwrap.rs:38:17\n+   |\n+LL |         let _ = some_vec.get(0).unwrap();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n+\n error: called `.get().unwrap()` on a VecDeque. Using `[]` is more clear and more concise\n-  --> $DIR/get_unwrap.rs:37:17\n+  --> $DIR/get_unwrap.rs:39:17\n    |\n LL |         let _ = some_vecdeque.get(0).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_vecdeque[0]`\n \n+error: used `unwrap()` on `an Option` value\n+  --> $DIR/get_unwrap.rs:39:17\n+   |\n+LL |         let _ = some_vecdeque.get(0).unwrap();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n+\n error: called `.get().unwrap()` on a HashMap. Using `[]` is more clear and more concise\n-  --> $DIR/get_unwrap.rs:38:17\n+  --> $DIR/get_unwrap.rs:40:17\n    |\n LL |         let _ = some_hashmap.get(&1).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_hashmap[&1]`\n \n+error: used `unwrap()` on `an Option` value\n+  --> $DIR/get_unwrap.rs:40:17\n+   |\n+LL |         let _ = some_hashmap.get(&1).unwrap();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n+\n error: called `.get().unwrap()` on a BTreeMap. Using `[]` is more clear and more concise\n-  --> $DIR/get_unwrap.rs:39:17\n+  --> $DIR/get_unwrap.rs:41:17\n    |\n LL |         let _ = some_btreemap.get(&1).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_btreemap[&1]`\n \n+error: used `unwrap()` on `an Option` value\n+  --> $DIR/get_unwrap.rs:41:17\n+   |\n+LL |         let _ = some_btreemap.get(&1).unwrap();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n+\n error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise\n-  --> $DIR/get_unwrap.rs:42:21\n+  --> $DIR/get_unwrap.rs:45:21\n    |\n LL |         let _: u8 = *boxed_slice.get(1).unwrap();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `boxed_slice[1]`\n \n+error: used `unwrap()` on `an Option` value\n+  --> $DIR/get_unwrap.rs:45:22\n+   |\n+LL |         let _: u8 = *boxed_slice.get(1).unwrap();\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n+\n error: called `.get_mut().unwrap()` on a slice. Using `[]` is more clear and more concise\n-  --> $DIR/get_unwrap.rs:47:9\n+  --> $DIR/get_unwrap.rs:50:9\n    |\n LL |         *boxed_slice.get_mut(0).unwrap() = 1;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `boxed_slice[0]`\n \n+error: used `unwrap()` on `an Option` value\n+  --> $DIR/get_unwrap.rs:50:10\n+   |\n+LL |         *boxed_slice.get_mut(0).unwrap() = 1;\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n+\n error: called `.get_mut().unwrap()` on a slice. Using `[]` is more clear and more concise\n-  --> $DIR/get_unwrap.rs:48:9\n+  --> $DIR/get_unwrap.rs:51:9\n    |\n LL |         *some_slice.get_mut(0).unwrap() = 1;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_slice[0]`\n \n+error: used `unwrap()` on `an Option` value\n+  --> $DIR/get_unwrap.rs:51:10\n+   |\n+LL |         *some_slice.get_mut(0).unwrap() = 1;\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n+\n error: called `.get_mut().unwrap()` on a Vec. Using `[]` is more clear and more concise\n-  --> $DIR/get_unwrap.rs:49:9\n+  --> $DIR/get_unwrap.rs:52:9\n    |\n LL |         *some_vec.get_mut(0).unwrap() = 1;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_vec[0]`\n \n+error: used `unwrap()` on `an Option` value\n+  --> $DIR/get_unwrap.rs:52:10\n+   |\n+LL |         *some_vec.get_mut(0).unwrap() = 1;\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n+\n error: called `.get_mut().unwrap()` on a VecDeque. Using `[]` is more clear and more concise\n-  --> $DIR/get_unwrap.rs:50:9\n+  --> $DIR/get_unwrap.rs:53:9\n    |\n LL |         *some_vecdeque.get_mut(0).unwrap() = 1;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_vecdeque[0]`\n \n+error: used `unwrap()` on `an Option` value\n+  --> $DIR/get_unwrap.rs:53:10\n+   |\n+LL |         *some_vecdeque.get_mut(0).unwrap() = 1;\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n+\n error: called `.get().unwrap()` on a Vec. Using `[]` is more clear and more concise\n-  --> $DIR/get_unwrap.rs:59:17\n+  --> $DIR/get_unwrap.rs:65:17\n    |\n LL |         let _ = some_vec.get(0..1).unwrap().to_vec();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_vec[0..1]`\n \n+error: used `unwrap()` on `an Option` value\n+  --> $DIR/get_unwrap.rs:65:17\n+   |\n+LL |         let _ = some_vec.get(0..1).unwrap().to_vec();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n+\n error: called `.get_mut().unwrap()` on a Vec. Using `[]` is more clear and more concise\n-  --> $DIR/get_unwrap.rs:60:17\n+  --> $DIR/get_unwrap.rs:66:17\n    |\n LL |         let _ = some_vec.get_mut(0..1).unwrap().to_vec();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_vec[0..1]`\n \n-error: aborting due to 13 previous errors\n+error: used `unwrap()` on `an Option` value\n+  --> $DIR/get_unwrap.rs:66:17\n+   |\n+LL |         let _ = some_vec.get_mut(0..1).unwrap().to_vec();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n+\n+error: aborting due to 26 previous errors\n "}]}