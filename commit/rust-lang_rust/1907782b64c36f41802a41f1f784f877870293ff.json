{"sha": "1907782b64c36f41802a41f1f784f877870293ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5MDc3ODJiNjRjMzZmNDE4MDJhNDFmMWY3ODRmODc3ODcwMjkzZmY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-17T14:55:59Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-17T14:58:54Z"}, "message": "reenable some tests that work now, and organize them better with directories", "tree": {"sha": "0f1f6018e2338dfde0c8958884709a951b47ed19", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f1f6018e2338dfde0c8958884709a951b47ed19"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1907782b64c36f41802a41f1f784f877870293ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1907782b64c36f41802a41f1f784f877870293ff", "html_url": "https://github.com/rust-lang/rust/commit/1907782b64c36f41802a41f1f784f877870293ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1907782b64c36f41802a41f1f784f877870293ff/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4b78b36abe896556ba04785610148b51aa67572", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4b78b36abe896556ba04785610148b51aa67572", "html_url": "https://github.com/rust-lang/rust/commit/d4b78b36abe896556ba04785610148b51aa67572"}], "stats": {"total": 257, "additions": 114, "deletions": 143}, "files": [{"sha": "9fa50da45bd0fb4cb1f0784fd50773bc0ee179a7", "filename": "tests/compile-fail/stacked_borrows/alias_through_mutation.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1907782b64c36f41802a41f1f784f877870293ff/tests%2Fcompile-fail%2Fstacked_borrows%2Falias_through_mutation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1907782b64c36f41802a41f1f784f877870293ff/tests%2Fcompile-fail%2Fstacked_borrows%2Falias_through_mutation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Falias_through_mutation.rs?ref=1907782b64c36f41802a41f1f784f877870293ff", "patch": "@@ -0,0 +1,15 @@\n+#![allow(unused_variables)]\n+\n+// This makes a ref that was passed to us via &mut alias with things it should not alias with\n+fn retarget(x: &mut &u32, target: &mut u32) {\n+    unsafe { *x = &mut *(target as *mut _); }\n+}\n+\n+fn main() {\n+    let target = &mut 42;\n+    let mut target_alias = &42; // initial dummy value\n+    retarget(&mut target_alias, target);\n+    // now `target_alias` points to the same thing as `target`\n+    *target = 13;\n+    let _val = *target_alias; //~ ERROR should be frozen\n+}"}, {"sha": "e812e13e702cadbfc5dd1dece7e0ba011b0720e2", "filename": "tests/compile-fail/stacked_borrows/aliasing_mut1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1907782b64c36f41802a41f1f784f877870293ff/tests%2Fcompile-fail%2Fstacked_borrows%2Faliasing_mut1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1907782b64c36f41802a41f1f784f877870293ff/tests%2Fcompile-fail%2Fstacked_borrows%2Faliasing_mut1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Faliasing_mut1.rs?ref=1907782b64c36f41802a41f1f784f877870293ff", "previous_filename": "tests/compile-fail/validation_aliasing_mut1.rs"}, {"sha": "36ebcc2b4ac6fae57a657af0c9b9c1dfdeda47a3", "filename": "tests/compile-fail/stacked_borrows/aliasing_mut2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1907782b64c36f41802a41f1f784f877870293ff/tests%2Fcompile-fail%2Fstacked_borrows%2Faliasing_mut2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1907782b64c36f41802a41f1f784f877870293ff/tests%2Fcompile-fail%2Fstacked_borrows%2Faliasing_mut2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Faliasing_mut2.rs?ref=1907782b64c36f41802a41f1f784f877870293ff", "previous_filename": "tests/compile-fail/validation_aliasing_mut2.rs"}, {"sha": "ad50fbd61b451f0d1a8d1cd05b24afe11a8eff8c", "filename": "tests/compile-fail/stacked_borrows/aliasing_mut3.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1907782b64c36f41802a41f1f784f877870293ff/tests%2Fcompile-fail%2Fstacked_borrows%2Faliasing_mut3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1907782b64c36f41802a41f1f784f877870293ff/tests%2Fcompile-fail%2Fstacked_borrows%2Faliasing_mut3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Faliasing_mut3.rs?ref=1907782b64c36f41802a41f1f784f877870293ff", "previous_filename": "tests/compile-fail/validation_aliasing_mut3.rs"}, {"sha": "a0f0a3cf9753a1abbb6fff23ded22eeb41f0e989", "filename": "tests/compile-fail/stacked_borrows/aliasing_mut4.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1907782b64c36f41802a41f1f784f877870293ff/tests%2Fcompile-fail%2Fstacked_borrows%2Faliasing_mut4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1907782b64c36f41802a41f1f784f877870293ff/tests%2Fcompile-fail%2Fstacked_borrows%2Faliasing_mut4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Faliasing_mut4.rs?ref=1907782b64c36f41802a41f1f784f877870293ff", "previous_filename": "tests/compile-fail/validation_aliasing_mut4.rs"}, {"sha": "3345668cee00c7fae44fab115e887490d01a9c67", "filename": "tests/compile-fail/stacked_borrows/buggy_as_mut_slice.rs", "status": "renamed", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1907782b64c36f41802a41f1f784f877870293ff/tests%2Fcompile-fail%2Fstacked_borrows%2Fbuggy_as_mut_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1907782b64c36f41802a41f1f784f877870293ff/tests%2Fcompile-fail%2Fstacked_borrows%2Fbuggy_as_mut_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fbuggy_as_mut_slice.rs?ref=1907782b64c36f41802a41f1f784f877870293ff", "patch": "@@ -1,22 +1,17 @@\n-// ignore-test validation_op is disabled\n-\n #![allow(unused_variables)]\n \n-// For some reason, the error location is different when using fullmir\n-// error-pattern: in conflict with lock WriteLock\n-\n mod safe {\n     use std::slice::from_raw_parts_mut;\n \n     pub fn as_mut_slice<T>(self_: &Vec<T>) -> &mut [T] {\n         unsafe {\n-            from_raw_parts_mut(self_.as_ptr() as *mut T, self_.len())\n+            from_raw_parts_mut(self_.as_ptr() as *mut T, self_.len()) //~ ERROR shared borrow for mutation\n         }\n     }\n }\n \n fn main() {\n     let v = vec![0,1,2];\n-    let v1_ = safe::as_mut_slice(&v);\n-    let v2_ = safe::as_mut_slice(&v);\n+    let v1 = safe::as_mut_slice(&v);\n+    let v2 = safe::as_mut_slice(&v);\n }", "previous_filename": "tests/compile-fail/validation_buggy_as_mut_slice.rs"}, {"sha": "d7f4300f82c05cc8ec49f32d5f74200c4c6aad51", "filename": "tests/compile-fail/stacked_borrows/buggy_split_at_mut.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1907782b64c36f41802a41f1f784f877870293ff/tests%2Fcompile-fail%2Fstacked_borrows%2Fbuggy_split_at_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1907782b64c36f41802a41f1f784f877870293ff/tests%2Fcompile-fail%2Fstacked_borrows%2Fbuggy_split_at_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fbuggy_split_at_mut.rs?ref=1907782b64c36f41802a41f1f784f877870293ff", "patch": "@@ -1,5 +1,3 @@\n-// ignore-test validation_op is disabled\n-\n #![allow(unused_variables)]\n \n mod safe {\n@@ -20,5 +18,7 @@ mod safe {\n \n fn main() {\n     let mut array = [1,2,3,4];\n-    let _x = safe::split_at_mut(&mut array, 0); //~ ERROR: in conflict with lock WriteLock\n+    let (a, b) = safe::split_at_mut(&mut array, 0);\n+    a[1] = 5; //~ ERROR does not exist on the stack\n+    b[1] = 6;\n }", "previous_filename": "tests/compile-fail/validation_buggy_split_at_mut.rs"}, {"sha": "6a7ccc84012c667e0bcadff5bc1635b57ea9e11c", "filename": "tests/compile-fail/stacked_borrows/illegal_write.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1907782b64c36f41802a41f1f784f877870293ff/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1907782b64c36f41802a41f1f784f877870293ff/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write.rs?ref=1907782b64c36f41802a41f1f784f877870293ff", "patch": "@@ -0,0 +1,11 @@\n+fn evil(x: &u32) {\n+    let x : &mut u32 = unsafe { &mut *(x as *const _ as *mut _) };\n+    *x = 42; // mutating shared ref without `UnsafeCell`\n+}\n+\n+fn main() {\n+    let target = 42;\n+    let ref_ = &target;\n+    evil(ref_); // invalidates shared ref\n+    let _x = *ref_; //~ ERROR should be frozen\n+}"}, {"sha": "1d61b1b9889659ea8fadd832045ef3e31f0ccdd1", "filename": "tests/compile-fail/stacked_borrows/illegal_write2.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1907782b64c36f41802a41f1f784f877870293ff/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1907782b64c36f41802a41f1f784f877870293ff/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write2.rs?ref=1907782b64c36f41802a41f1f784f877870293ff", "patch": "@@ -0,0 +1,10 @@\n+#![allow(unused_variables)]\n+\n+fn main() {\n+    let target = &mut 42;\n+    let target2 = target as *mut _;\n+    drop(&mut *target); // reborrow\n+    // Now make sure our ref is still the only one\n+    unsafe { *target2 = 13; } // invalidate our ref\n+    let _val = *target; //~ ERROR does not exist on the stack\n+}"}, {"sha": "3576aa52b753c2c025cf19f2a9b81f454403d301", "filename": "tests/compile-fail/stacked_borrows/pointer_smuggling.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1907782b64c36f41802a41f1f784f877870293ff/tests%2Fcompile-fail%2Fstacked_borrows%2Fpointer_smuggling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1907782b64c36f41802a41f1f784f877870293ff/tests%2Fcompile-fail%2Fstacked_borrows%2Fpointer_smuggling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fpointer_smuggling.rs?ref=1907782b64c36f41802a41f1f784f877870293ff", "patch": "@@ -0,0 +1,22 @@\n+#![allow(unused_variables)]\n+\n+static mut PTR: *mut u8 = 0 as *mut _;\n+\n+fn fun1(x: &mut u8) {\n+    unsafe {\n+        PTR = x;\n+    }\n+}\n+\n+fn fun2() {\n+    // Now we use a pointer we are not allowed to use\n+    let _x = unsafe { *PTR };\n+}\n+\n+fn main() {\n+    let val = &mut 0; // FIXME: This should also work with a local variable, but currently it does not.\n+    fun1(val);\n+    *val = 2; // this invalidates any raw ptrs `fun1` might have created.\n+    fun2(); // if they now use a raw ptr they break our reference\n+    *val = 3; //~ ERROR does not exist on the stack\n+}"}, {"sha": "584053f59323bc621f746b0a9a2ea3e1e5bf2ec9", "filename": "tests/compile-fail/stacked_borrows/shared_confusion.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1907782b64c36f41802a41f1f784f877870293ff/tests%2Fcompile-fail%2Fstacked_borrows%2Fshared_confusion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1907782b64c36f41802a41f1f784f877870293ff/tests%2Fcompile-fail%2Fstacked_borrows%2Fshared_confusion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fshared_confusion.rs?ref=1907782b64c36f41802a41f1f784f877870293ff", "patch": "@@ -0,0 +1,21 @@\n+#![allow(unused_variables)]\n+use std::cell::RefCell;\n+\n+fn test(r: &mut RefCell<i32>) {\n+    let x = &*r; // not freezing because interior mutability\n+    let mut x_ref = x.borrow_mut();\n+    let x_inner : &mut i32 = &mut *x_ref; // Uniq reference\n+    let x_evil = x_inner as *mut _;\n+    {\n+        let x_inner_shr = &*x_inner; // frozen\n+        let y = &*r; // outer ref, not freezing\n+        let x_inner_shr2 = &*x_inner; // freezing again\n+    }\n+    // Our old raw should be dead by now\n+    unsafe { *x_evil = 0; } // this falls back to some Raw higher up the stack\n+    *x_inner = 12; //~ ERROR does not exist on the stack\n+}\n+\n+fn main() {\n+    test(&mut RefCell::new(0));\n+}"}, {"sha": "cb3e4b3c1a204249571a6010bf3bfee86b104913", "filename": "tests/compile-fail/validation_illegal_write.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d4b78b36abe896556ba04785610148b51aa67572/tests%2Fcompile-fail%2Fvalidation_illegal_write.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4b78b36abe896556ba04785610148b51aa67572/tests%2Fcompile-fail%2Fvalidation_illegal_write.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidation_illegal_write.rs?ref=d4b78b36abe896556ba04785610148b51aa67572", "patch": "@@ -1,17 +0,0 @@\n-// ignore-test validation_op is disabled\n-\n-#![allow(unused_variables)]\n-\n-mod safe {\n-    pub(crate) fn safe(x: &u32) {\n-        let x : &mut u32 = unsafe { &mut *(x as *const _ as *mut _) };\n-        *x = 42; //~ ERROR: in conflict with lock ReadLock\n-    }\n-}\n-\n-fn main() {\n-    let target = &mut 42;\n-    let target_ref = &target;\n-    // do a reborrow, but we keep the lock\n-    safe::safe(&*target);\n-}"}, {"sha": "2a0857659622f7ddb7a6736165052f2493d1814f", "filename": "tests/compile-fail/validation_lock_confusion.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d4b78b36abe896556ba04785610148b51aa67572/tests%2Fcompile-fail%2Fvalidation_lock_confusion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4b78b36abe896556ba04785610148b51aa67572/tests%2Fcompile-fail%2Fvalidation_lock_confusion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidation_lock_confusion.rs?ref=d4b78b36abe896556ba04785610148b51aa67572", "patch": "@@ -1,26 +0,0 @@\n-// ignore-test validation_op is disabled\n-\n-// Make sure validation can handle many overlapping shared borrows for different parts of a data structure\n-#![allow(unused_variables)]\n-use std::cell::RefCell;\n-\n-fn evil(x: *mut i32) {\n-    unsafe { *x = 0; } //~ ERROR: in conflict with lock WriteLock\n-}\n-\n-fn test(r: &mut RefCell<i32>) {\n-    let x = &*r; // releasing write lock, first suspension recorded\n-    let mut x_ref = x.borrow_mut();\n-    let x_inner : &mut i32 = &mut *x_ref; // new inner write lock, with same lifetime as outer lock\n-    {\n-        let x_inner_shr = &*x_inner; // releasing inner write lock, recording suspension\n-        let y = &*r; // second suspension for the outer write lock\n-        let x_inner_shr2 = &*x_inner; // 2nd suspension for inner write lock\n-    }\n-    // If the two locks are mixed up, here we should have a write lock, but we do not.\n-    evil(x_inner as *mut _);\n-}\n-\n-fn main() {\n-    test(&mut RefCell::new(0));\n-}"}, {"sha": "14d6242860382d5781ada58d749ffe87a1b8a862", "filename": "tests/compile-fail/validation_pointer_smuggling.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d4b78b36abe896556ba04785610148b51aa67572/tests%2Fcompile-fail%2Fvalidation_pointer_smuggling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4b78b36abe896556ba04785610148b51aa67572/tests%2Fcompile-fail%2Fvalidation_pointer_smuggling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidation_pointer_smuggling.rs?ref=d4b78b36abe896556ba04785610148b51aa67572", "patch": "@@ -1,22 +0,0 @@\n-// ignore-test validation_op is disabled\n-\n-#![allow(unused_variables)]\n-\n-static mut PTR: *mut u8 = 0 as *mut _;\n-\n-fn fun1(x: &mut u8) {\n-    unsafe {\n-        PTR = x;\n-    }\n-}\n-\n-fn fun2() {\n-    // Now we use a pointer we are not allowed to use\n-    let _x = unsafe { *PTR }; //~ ERROR: in conflict with lock WriteLock\n-}\n-\n-fn main() {\n-    let mut val = 0;\n-    fun1(&mut val);\n-    fun2();\n-}"}, {"sha": "9061070ef67ebbed6aeb9dff7bd9b0740794e6ce", "filename": "tests/compile-fail/validation_recover1.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d4b78b36abe896556ba04785610148b51aa67572/tests%2Fcompile-fail%2Fvalidation_recover1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4b78b36abe896556ba04785610148b51aa67572/tests%2Fcompile-fail%2Fvalidation_recover1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidation_recover1.rs?ref=d4b78b36abe896556ba04785610148b51aa67572", "patch": "@@ -1,18 +0,0 @@\n-// ignore-test validation_op is disabled\n-\n-#![allow(unused_variables)]\n-\n-#[repr(u32)]\n-enum Bool { True }\n-\n-mod safe {\n-    pub(crate) fn safe(x: &mut super::Bool) {\n-        let x = x as *mut _ as *mut u32;\n-        unsafe { *x = 44; } // out-of-bounds enum discriminant\n-    }\n-}\n-\n-fn main() {\n-    let mut x = Bool::True;\n-    safe::safe(&mut x); //~ ERROR: invalid enum discriminant\n-}"}, {"sha": "7a4a417ab1db993b640864d6911a92f9015d94c8", "filename": "tests/compile-fail/validation_recover2.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d4b78b36abe896556ba04785610148b51aa67572/tests%2Fcompile-fail%2Fvalidation_recover2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4b78b36abe896556ba04785610148b51aa67572/tests%2Fcompile-fail%2Fvalidation_recover2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidation_recover2.rs?ref=d4b78b36abe896556ba04785610148b51aa67572", "patch": "@@ -1,16 +0,0 @@\n-// ignore-test validation_op is disabled\n-\n-#![allow(unused_variables)]\n-\n-mod safe {\n-    // This makes a ref that was passed to us via &mut alias with things it should not alias with\n-    pub(crate) fn safe(x: &mut &u32, target: &mut u32) {\n-        unsafe { *x = &mut *(target as *mut _); }\n-    }\n-}\n-\n-fn main() {\n-    let target = &mut 42;\n-    let mut target_alias = &42; // initial dummy value\n-    safe::safe(&mut target_alias, target); //~ ERROR: in conflict with lock ReadLock\n-}"}, {"sha": "5cfc8aaa66b5f2cefa127b5dfe236a00e65b497b", "filename": "tests/compile-fail/validation_recover3.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d4b78b36abe896556ba04785610148b51aa67572/tests%2Fcompile-fail%2Fvalidation_recover3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4b78b36abe896556ba04785610148b51aa67572/tests%2Fcompile-fail%2Fvalidation_recover3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidation_recover3.rs?ref=d4b78b36abe896556ba04785610148b51aa67572", "patch": "@@ -1,17 +0,0 @@\n-// ignore-test validation_op is disabled\n-\n-#![allow(unused_variables)]\n-\n-mod safe {\n-    pub(crate) fn safe(x: *mut u32) {\n-        unsafe { *x = 42; } //~ ERROR: in conflict with lock WriteLock\n-    }\n-}\n-\n-fn main() {\n-    let target = &mut 42u32;\n-    let target2 = target as *mut _;\n-    drop(&mut *target); // reborrow\n-    // Now make sure we still got the lock\n-    safe::safe(target2);\n-}"}, {"sha": "939e93a264e8c03214903485b62c38c206353092", "filename": "tests/compile-fail/validation_undef.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d4b78b36abe896556ba04785610148b51aa67572/tests%2Fcompile-fail%2Fvalidation_undef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4b78b36abe896556ba04785610148b51aa67572/tests%2Fcompile-fail%2Fvalidation_undef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidation_undef.rs?ref=d4b78b36abe896556ba04785610148b51aa67572", "patch": "@@ -1,16 +0,0 @@\n-// ignore-test validation_op is disabled\n-\n-#![allow(unused_variables)]\n-// error-pattern: attempted to read undefined bytes\n-\n-mod safe {\n-    use std::mem;\n-\n-    pub(crate) fn make_float() -> f32 {\n-        unsafe { mem::uninitialized() }\n-    }\n-}\n-\n-fn main() {\n-    let _x = safe::make_float();\n-}"}, {"sha": "82f2d10ee4bb5e94439135fc8dcda014c390b904", "filename": "tests/compile-fail/validity/cast_fn_ptr1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1907782b64c36f41802a41f1f784f877870293ff/tests%2Fcompile-fail%2Fvalidity%2Fcast_fn_ptr1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1907782b64c36f41802a41f1f784f877870293ff/tests%2Fcompile-fail%2Fvalidity%2Fcast_fn_ptr1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidity%2Fcast_fn_ptr1.rs?ref=1907782b64c36f41802a41f1f784f877870293ff", "previous_filename": "tests/compile-fail/validation_cast_fn_ptr1.rs"}, {"sha": "2f3b91a53e622a2b7c91db07fc6827b831595686", "filename": "tests/compile-fail/validity/cast_fn_ptr2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1907782b64c36f41802a41f1f784f877870293ff/tests%2Fcompile-fail%2Fvalidity%2Fcast_fn_ptr2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1907782b64c36f41802a41f1f784f877870293ff/tests%2Fcompile-fail%2Fvalidity%2Fcast_fn_ptr2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidity%2Fcast_fn_ptr2.rs?ref=1907782b64c36f41802a41f1f784f877870293ff", "previous_filename": "tests/compile-fail/validation_cast_fn_ptr2.rs"}, {"sha": "af4ad67a4f0999db940cabdb65cff97b6433b0b3", "filename": "tests/compile-fail/validity/invalid_bool.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1907782b64c36f41802a41f1f784f877870293ff/tests%2Fcompile-fail%2Fvalidity%2Finvalid_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1907782b64c36f41802a41f1f784f877870293ff/tests%2Fcompile-fail%2Fvalidity%2Finvalid_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidity%2Finvalid_bool.rs?ref=1907782b64c36f41802a41f1f784f877870293ff", "previous_filename": "tests/compile-fail/invalid_bool.rs"}, {"sha": "3ff0ed60f664c53e3a247a6c8e03470deb450a06", "filename": "tests/compile-fail/validity/invalid_char.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1907782b64c36f41802a41f1f784f877870293ff/tests%2Fcompile-fail%2Fvalidity%2Finvalid_char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1907782b64c36f41802a41f1f784f877870293ff/tests%2Fcompile-fail%2Fvalidity%2Finvalid_char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidity%2Finvalid_char.rs?ref=1907782b64c36f41802a41f1f784f877870293ff", "previous_filename": "tests/compile-fail/invalid_char.rs"}, {"sha": "543a797d44f20de0fa0492bbd4fcc35f21fdcdd8", "filename": "tests/compile-fail/validity/invalid_enum_discriminant.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1907782b64c36f41802a41f1f784f877870293ff/tests%2Fcompile-fail%2Fvalidity%2Finvalid_enum_discriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1907782b64c36f41802a41f1f784f877870293ff/tests%2Fcompile-fail%2Fvalidity%2Finvalid_enum_discriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidity%2Finvalid_enum_discriminant.rs?ref=1907782b64c36f41802a41f1f784f877870293ff", "previous_filename": "tests/compile-fail/invalid_enum_discriminant.rs"}, {"sha": "0a4c64bb9bb119bfad61901a4bdade67dae4398c", "filename": "tests/compile-fail/validity/transmute_through_ptr.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1907782b64c36f41802a41f1f784f877870293ff/tests%2Fcompile-fail%2Fvalidity%2Ftransmute_through_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1907782b64c36f41802a41f1f784f877870293ff/tests%2Fcompile-fail%2Fvalidity%2Ftransmute_through_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidity%2Ftransmute_through_ptr.rs?ref=1907782b64c36f41802a41f1f784f877870293ff", "patch": "@@ -0,0 +1,16 @@\n+#![allow(unused_variables)]\n+\n+#[repr(u32)]\n+enum Bool { True }\n+\n+fn evil(x: &mut Bool) {\n+    let x = x as *mut _ as *mut u32;\n+    unsafe { *x = 44; } // out-of-bounds enum discriminant\n+}\n+\n+fn main() {\n+    let mut x = Bool::True;\n+    evil(&mut x);\n+    let _y = x; // reading this ought to be enough to trigger validation\n+    //~^ ERROR invalid enum discriminant 44\n+}"}, {"sha": "58d3926dadafa824296938a5aff109f6c72f3d9e", "filename": "tests/compile-fail/validity/undef.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1907782b64c36f41802a41f1f784f877870293ff/tests%2Fcompile-fail%2Fvalidity%2Fundef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1907782b64c36f41802a41f1f784f877870293ff/tests%2Fcompile-fail%2Fvalidity%2Fundef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidity%2Fundef.rs?ref=1907782b64c36f41802a41f1f784f877870293ff", "patch": "@@ -0,0 +1,12 @@\n+#![allow(unused_variables)]\n+// error-pattern: encountered undefined data in pointer\n+\n+use std::mem;\n+\n+fn make_raw() -> *const f32 {\n+    unsafe { mem::uninitialized() }\n+}\n+\n+fn main() {\n+    let _x = make_raw();\n+}"}, {"sha": "7bec3fa8de2cd143aa0b3d6e2e4e98d10bfd190c", "filename": "tests/compiletest.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1907782b64c36f41802a41f1f784f877870293ff/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1907782b64c36f41802a41f1f784f877870293ff/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=1907782b64c36f41802a41f1f784f877870293ff", "patch": "@@ -63,6 +63,7 @@ fn compile_fail(sysroot: &Path, path: &str, target: &str, host: &str, need_fullm\n     flags.push(format!(\"--sysroot {}\", sysroot.display()));\n     flags.push(\"-Dwarnings -Dunused\".to_owned()); // overwrite the -Aunused in compiletest-rs\n     config.src_base = PathBuf::from(path.to_string());\n+    flags.push(\"-Zmir-opt-level=0\".to_owned()); // optimization circumvents some stacked borrow checks\n     flags.push(\"-Zmir-emit-validate=1\".to_owned());\n     config.target_rustcflags = Some(flags.join(\" \"));\n     config.target = target.to_owned();"}]}