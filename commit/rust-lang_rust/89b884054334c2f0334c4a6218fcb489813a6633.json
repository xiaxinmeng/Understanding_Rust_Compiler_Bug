{"sha": "89b884054334c2f0334c4a6218fcb489813a6633", "node_id": "C_kwDOAAsO6NoAKDg5Yjg4NDA1NDMzNGMyZjAzMzRjNGE2MjE4ZmNiNDg5ODEzYTY2MzM", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-26T21:32:01Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-13T17:40:27Z"}, "message": "squash OpaqueTy and ProjectionTy into AliasTy", "tree": {"sha": "aff2e2f019356d055f264d3eb4c02654dd555361", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aff2e2f019356d055f264d3eb4c02654dd555361"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89b884054334c2f0334c4a6218fcb489813a6633", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89b884054334c2f0334c4a6218fcb489813a6633", "html_url": "https://github.com/rust-lang/rust/commit/89b884054334c2f0334c4a6218fcb489813a6633", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89b884054334c2f0334c4a6218fcb489813a6633/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a274e7e9a2d6373d1989d187cdf8475e55be9f6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a274e7e9a2d6373d1989d187cdf8475e55be9f6f", "html_url": "https://github.com/rust-lang/rust/commit/a274e7e9a2d6373d1989d187cdf8475e55be9f6f"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "3ff774867b1efd264c0e9be0135e51604f251a96", "filename": "clippy_lints/src/future_not_send.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/89b884054334c2f0334c4a6218fcb489813a6633/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89b884054334c2f0334c4a6218fcb489813a6633/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffuture_not_send.rs?ref=89b884054334c2f0334c4a6218fcb489813a6633", "patch": "@@ -4,7 +4,7 @@ use rustc_hir::intravisit::FnKind;\n use rustc_hir::{Body, FnDecl, HirId};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty::{Clause, EarlyBinder, Opaque, OpaqueTy, PredicateKind};\n+use rustc_middle::ty::{AliasTy, Clause, EarlyBinder, Opaque, PredicateKind};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{sym, Span};\n use rustc_trait_selection::traits::error_reporting::suggestions::TypeErrCtxtExt;\n@@ -62,7 +62,7 @@ impl<'tcx> LateLintPass<'tcx> for FutureNotSend {\n             return;\n         }\n         let ret_ty = return_ty(cx, hir_id);\n-        if let Opaque(OpaqueTy { def_id, substs }) = *ret_ty.kind() {\n+        if let Opaque(AliasTy { def_id, substs }) = *ret_ty.kind() {\n             let preds = cx.tcx.explicit_item_bounds(def_id);\n             let mut is_future = false;\n             for &(p, _span) in preds {"}, {"sha": "bddab7eca53ba3dad0e9496c83fcafd9fe70a07e", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/89b884054334c2f0334c4a6218fcb489813a6633/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89b884054334c2f0334c4a6218fcb489813a6633/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=89b884054334c2f0334c4a6218fcb489813a6633", "patch": "@@ -17,7 +17,7 @@ use rustc_lint::LateContext;\n use rustc_middle::mir::interpret::{ConstValue, Scalar};\n use rustc_middle::ty::{\n     self, AdtDef, AssocKind, Binder, BoundRegion, DefIdTree, FnSig, IntTy, List, ParamEnv, Predicate, PredicateKind,\n-    ProjectionTy, Region, RegionKind, SubstsRef, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor, UintTy,\n+    AliasTy, Region, RegionKind, SubstsRef, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor, UintTy,\n     VariantDef, VariantDiscr,\n };\n use rustc_middle::ty::{GenericArg, GenericArgKind};\n@@ -79,7 +79,7 @@ pub fn contains_ty_adt_constructor_opaque<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'\n                 return true;\n             }\n \n-            if let ty::Opaque(ty::OpaqueTy { def_id, substs: _ }) = *inner_ty.kind() {\n+            if let ty::Opaque(ty::AliasTy { def_id, substs: _ }) = *inner_ty.kind() {\n                 for &(predicate, _span) in cx.tcx.explicit_item_bounds(def_id) {\n                     match predicate.kind().skip_binder() {\n                         // For `impl Trait<U>`, it will register a predicate of `T: Trait<U>`, so we go through\n@@ -250,7 +250,7 @@ pub fn is_must_use_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n             is_must_use_ty(cx, *ty)\n         },\n         ty::Tuple(substs) => substs.iter().any(|ty| is_must_use_ty(cx, ty)),\n-        ty::Opaque(ty::OpaqueTy { def_id, substs: _ }) => {\n+        ty::Opaque(ty::AliasTy { def_id, substs: _ }) => {\n             for (predicate, _) in cx.tcx.explicit_item_bounds(*def_id) {\n                 if let ty::PredicateKind::Clause(ty::Clause::Trait(trait_predicate)) = predicate.kind().skip_binder() {\n                     if cx.tcx.has_attr(trait_predicate.trait_ref.def_id, sym::must_use) {\n@@ -631,7 +631,7 @@ pub fn ty_sig<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Option<ExprFnSig<'t\n             Some(ExprFnSig::Closure(decl, subs.as_closure().sig()))\n         },\n         ty::FnDef(id, subs) => Some(ExprFnSig::Sig(cx.tcx.bound_fn_sig(id).subst(cx.tcx, subs), Some(id))),\n-        ty::Opaque(ty::OpaqueTy{ def_id, substs: _ }) => sig_from_bounds(cx, ty, cx.tcx.item_bounds(def_id), cx.tcx.opt_parent(def_id)),\n+        ty::Opaque(ty::AliasTy { def_id, substs: _ }) => sig_from_bounds(cx, ty, cx.tcx.item_bounds(def_id), cx.tcx.opt_parent(def_id)),\n         ty::FnPtr(sig) => Some(ExprFnSig::Sig(sig, None)),\n         ty::Dynamic(bounds, _, _) => {\n             let lang_items = cx.tcx.lang_items();\n@@ -701,7 +701,7 @@ fn sig_from_bounds<'tcx>(\n     inputs.map(|ty| ExprFnSig::Trait(ty, output, predicates_id))\n }\n \n-fn sig_for_projection<'tcx>(cx: &LateContext<'tcx>, ty: ProjectionTy<'tcx>) -> Option<ExprFnSig<'tcx>> {\n+fn sig_for_projection<'tcx>(cx: &LateContext<'tcx>, ty: AliasTy<'tcx>) -> Option<ExprFnSig<'tcx>> {\n     let mut inputs = None;\n     let mut output = None;\n     let lang_items = cx.tcx.lang_items();\n@@ -980,13 +980,13 @@ pub fn make_projection<'tcx>(\n     container_id: DefId,\n     assoc_ty: Symbol,\n     substs: impl IntoIterator<Item = impl Into<GenericArg<'tcx>>>,\n-) -> Option<ProjectionTy<'tcx>> {\n+) -> Option<AliasTy<'tcx>> {\n     fn helper<'tcx>(\n         tcx: TyCtxt<'tcx>,\n         container_id: DefId,\n         assoc_ty: Symbol,\n         substs: SubstsRef<'tcx>,\n-    ) -> Option<ProjectionTy<'tcx>> {\n+    ) -> Option<AliasTy<'tcx>> {\n         let Some(assoc_item) = tcx\n             .associated_items(container_id)\n             .find_by_name_and_kind(tcx, Ident::with_dummy_span(assoc_ty), AssocKind::Type, container_id)\n@@ -1039,7 +1039,7 @@ pub fn make_projection<'tcx>(\n             }\n         }\n \n-        Some(ProjectionTy {\n+        Some(AliasTy {\n             substs,\n             def_id: assoc_item.def_id,\n         })\n@@ -1065,7 +1065,7 @@ pub fn make_normalized_projection<'tcx>(\n     assoc_ty: Symbol,\n     substs: impl IntoIterator<Item = impl Into<GenericArg<'tcx>>>,\n ) -> Option<Ty<'tcx>> {\n-    fn helper<'tcx>(tcx: TyCtxt<'tcx>, param_env: ParamEnv<'tcx>, ty: ProjectionTy<'tcx>) -> Option<Ty<'tcx>> {\n+    fn helper<'tcx>(tcx: TyCtxt<'tcx>, param_env: ParamEnv<'tcx>, ty: AliasTy<'tcx>) -> Option<Ty<'tcx>> {\n         #[cfg(debug_assertions)]\n         if let Some((i, subst)) = ty\n             .substs"}]}