{"sha": "c4ca6e29c25df209c2733ef24b8b4eca70ee93a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0Y2E2ZTI5YzI1ZGYyMDljMjczM2VmMjRiOGI0ZWNhNzBlZTkzYTQ=", "commit": {"author": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2020-05-06T13:01:35Z"}, "committer": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2020-05-06T13:06:21Z"}, "message": "Uniformed way to get Debug Lens target executable.", "tree": {"sha": "de8df0d319a37d75f24b14340e6f0fe2ca65b52b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de8df0d319a37d75f24b14340e6f0fe2ca65b52b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4ca6e29c25df209c2733ef24b8b4eca70ee93a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4ca6e29c25df209c2733ef24b8b4eca70ee93a4", "html_url": "https://github.com/rust-lang/rust/commit/c4ca6e29c25df209c2733ef24b8b4eca70ee93a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4ca6e29c25df209c2733ef24b8b4eca70ee93a4/comments", "author": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1116c9a0e9992d0dea8dac87de95c8a74c093cff", "url": "https://api.github.com/repos/rust-lang/rust/commits/1116c9a0e9992d0dea8dac87de95c8a74c093cff", "html_url": "https://github.com/rust-lang/rust/commit/1116c9a0e9992d0dea8dac87de95c8a74c093cff"}], "stats": {"total": 65, "additions": 37, "deletions": 28}, "files": [{"sha": "7bb8727e7cdbf8555dd71fd876358bac50368535", "filename": "editors/code/src/commands/runnables.ts", "status": "modified", "additions": 33, "deletions": 26, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/c4ca6e29c25df209c2733ef24b8b4eca70ee93a4/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts", "raw_url": "https://github.com/rust-lang/rust/raw/c4ca6e29c25df209c2733ef24b8b4eca70ee93a4/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts?ref=c4ca6e29c25df209c2733ef24b8b4eca70ee93a4", "patch": "@@ -64,29 +64,19 @@ export function runSingle(ctx: Ctx): Cmd {\n     };\n }\n \n-function getLldbDebugConfig(config: ra.Runnable, sourceFileMap: Record<string, string>): vscode.DebugConfiguration {\n+function getLldbDebugConfig(config: ra.Runnable, executable: string, sourceFileMap?: Record<string, string>): vscode.DebugConfiguration {\n     return {\n         type: \"lldb\",\n         request: \"launch\",\n         name: config.label,\n-        cargo: {\n-            args: config.args,\n-        },\n+        program: executable,\n         args: config.extraArgs,\n         cwd: config.cwd,\n         sourceMap: sourceFileMap\n     };\n }\n \n-const debugOutput = vscode.window.createOutputChannel(\"Debug\");\n-\n-async function getCppvsDebugConfig(config: ra.Runnable, sourceFileMap: Record<string, string>): Promise<vscode.DebugConfiguration> {\n-    debugOutput.clear();\n-\n-    const cargo = new Cargo(config.cwd || '.', debugOutput);\n-    const executable = await cargo.executableFromArgs(config.args);\n-\n-    // if we are here, there were no compilation errors.\n+function getCppvsDebugConfig(config: ra.Runnable, executable: string, sourceFileMap?: Record<string, string>): vscode.DebugConfiguration {\n     return {\n         type: (os.platform() === \"win32\") ? \"cppvsdbg\" : 'cppdbg',\n         request: \"launch\",\n@@ -98,36 +88,53 @@ async function getCppvsDebugConfig(config: ra.Runnable, sourceFileMap: Record<st\n     };\n }\n \n+const debugOutput = vscode.window.createOutputChannel(\"Debug\");\n+\n+async function getDebugExecutable(config: ra.Runnable): Promise<string> {\n+    debugOutput.clear();\n+\n+    const cargo = new Cargo(config.cwd || '.', debugOutput);\n+    const executable = await cargo.executableFromArgs(config.args);\n+\n+    // if we are here, there were no compilation errors.\n+    return executable;\n+}\n+\n+type DebugConfigProvider = (config: ra.Runnable, executable: string, sourceFileMap?: Record<string, string>) => vscode.DebugConfiguration;\n+\n export function debugSingle(ctx: Ctx): Cmd {\n     return async (config: ra.Runnable) => {\n         const editor = ctx.activeRustEditor;\n         if (!editor) return;\n \n-        const lldbId = \"vadimcn.vscode-lldb\";\n-        const cpptoolsId = \"ms-vscode.cpptools\";\n+        const knownEngines: Record<string, DebugConfigProvider> = {\n+            \"vadimcn.vscode-lldb\": getLldbDebugConfig,\n+            \"ms-vscode.cpptools\": getCppvsDebugConfig\n+        };\n+        const debugOptions = ctx.config.debug;\n \n-        const debugEngineId = ctx.config.debug.engine;\n         let debugEngine = null;\n-        if (debugEngineId === \"auto\") {\n-            debugEngine = vscode.extensions.getExtension(lldbId);\n-            if (!debugEngine) {\n-                debugEngine = vscode.extensions.getExtension(cpptoolsId);\n+        if (debugOptions.engine === \"auto\") {\n+            for (var engineId in knownEngines) {\n+                debugEngine = vscode.extensions.getExtension(engineId);\n+                if (debugEngine) break;\n             }\n         }\n         else {\n-            debugEngine = vscode.extensions.getExtension(debugEngineId);\n+            debugEngine = vscode.extensions.getExtension(debugOptions.engine);\n         }\n \n         if (!debugEngine) {\n-            vscode.window.showErrorMessage(`Install [CodeLLDB](https://marketplace.visualstudio.com/items?itemName=${lldbId})`\n-                + ` or [MS C++ tools](https://marketplace.visualstudio.com/items?itemName=${cpptoolsId}) extension for debugging.`);\n+            vscode.window.showErrorMessage(`Install [CodeLLDB](https://marketplace.visualstudio.com/items?itemName=vadimcn.vscode-lldb)`\n+                + ` or [MS C++ tools](https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools) extension for debugging.`);\n             return;\n         }\n \n-        const debugConfig = lldbId === debugEngine.id\n-            ? getLldbDebugConfig(config, ctx.config.debug.sourceFileMap)\n-            : await getCppvsDebugConfig(config, ctx.config.debug.sourceFileMap);\n+        const executable = await getDebugExecutable(config);\n+        const debugConfig = knownEngines[debugEngine.id](config, executable, debugOptions.sourceFileMap);\n \n+        debugOutput.appendLine(\"Launching debug configuration:\");\n+        debugOutput.appendLine(JSON.stringify(debugConfig, null, 2));\n         return vscode.debug.startDebugging(undefined, debugConfig);\n     };\n }"}, {"sha": "8bceaaf7245332a691a40f91868f1b5e632de273", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c4ca6e29c25df209c2733ef24b8b4eca70ee93a4/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/c4ca6e29c25df209c2733ef24b8b4eca70ee93a4/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=c4ca6e29c25df209c2733ef24b8b4eca70ee93a4", "patch": "@@ -108,10 +108,12 @@ export class Config {\n     }\n \n     get debug() {\n+        // \"/rustc/<id>\" used by suggestions only.\n+        const { [\"/rustc/<id>\"]: _, ...sourceFileMap } = this.get<Record<string, string>>(\"debug.sourceFileMap\");\n+\n         return {\n             engine: this.get<string>(\"debug.engine\"),\n-            sourceFileMap: this.get<Record<string, string>>(\"debug.sourceFileMap\"),\n+            sourceFileMap: sourceFileMap,\n         };\n     }\n-\n }"}]}