{"sha": "375b8168e48f7af89c754a41581f3a7102fae066", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3NWI4MTY4ZTQ4ZjdhZjg5Yzc1NGE0MTU4MWYzYTcxMDJmYWUwNjY=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-01-13T17:32:05Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-01-13T17:32:05Z"}, "message": "Remove useless curly braces in else { if .. }", "tree": {"sha": "233ad842ed5ddbe5879c168ad713529cb610d7e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/233ad842ed5ddbe5879c168ad713529cb610d7e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/375b8168e48f7af89c754a41581f3a7102fae066", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/375b8168e48f7af89c754a41581f3a7102fae066", "html_url": "https://github.com/rust-lang/rust/commit/375b8168e48f7af89c754a41581f3a7102fae066", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/375b8168e48f7af89c754a41581f3a7102fae066/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6f8723c78cffe7cebec5b3792fcff0c81586ab8", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6f8723c78cffe7cebec5b3792fcff0c81586ab8", "html_url": "https://github.com/rust-lang/rust/commit/f6f8723c78cffe7cebec5b3792fcff0c81586ab8"}], "stats": {"total": 76, "additions": 33, "deletions": 43}, "files": [{"sha": "133212daf14741e7225abd5d10842ff41086ffe7", "filename": "src/bit_mask.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/375b8168e48f7af89c754a41581f3a7102fae066/src%2Fbit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/375b8168e48f7af89c754a41581f3a7102fae066/src%2Fbit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbit_mask.rs?ref=375b8168e48f7af89c754a41581f3a7102fae066", "patch": "@@ -148,11 +148,10 @@ fn check_bit_mask(cx: &LateContext, bit_op: BinOp_, cmp_op: BinOp_, mask_value:\n                                                mask_value,\n                                                cmp_value));\n                         }\n-                    } else {\n-                        if mask_value == 0 {\n-                            span_lint(cx, BAD_BIT_MASK, *span, \"&-masking with zero\");\n-                        }\n+                    } else if mask_value == 0 {\n+                        span_lint(cx, BAD_BIT_MASK, *span, \"&-masking with zero\");\n                     }\n+\n                 }\n                 BiBitOr => {\n                     if mask_value | cmp_value != cmp_value {\n@@ -177,10 +176,8 @@ fn check_bit_mask(cx: &LateContext, bit_op: BinOp_, cmp_op: BinOp_, mask_value:\n                                   &format!(\"incompatible bit mask: `_ & {}` will always be lower than `{}`\",\n                                            mask_value,\n                                            cmp_value));\n-                    } else {\n-                        if mask_value == 0 {\n-                            span_lint(cx, BAD_BIT_MASK, *span, \"&-masking with zero\");\n-                        }\n+                    } else if mask_value == 0 {\n+                        span_lint(cx, BAD_BIT_MASK, *span, \"&-masking with zero\");\n                     }\n                 }\n                 BiBitOr => {\n@@ -209,10 +206,8 @@ fn check_bit_mask(cx: &LateContext, bit_op: BinOp_, cmp_op: BinOp_, mask_value:\n                                   &format!(\"incompatible bit mask: `_ & {}` will never be higher than `{}`\",\n                                            mask_value,\n                                            cmp_value));\n-                    } else {\n-                        if mask_value == 0 {\n-                            span_lint(cx, BAD_BIT_MASK, *span, \"&-masking with zero\");\n-                        }\n+                    } else if mask_value == 0 {\n+                        span_lint(cx, BAD_BIT_MASK, *span, \"&-masking with zero\");\n                     }\n                 }\n                 BiBitOr => {"}, {"sha": "68320705fb6b67338d36164fc04378e06edc6ff8", "filename": "src/consts.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/375b8168e48f7af89c754a41581f3a7102fae066/src%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/375b8168e48f7af89c754a41581f3a7102fae066/src%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconsts.rs?ref=375b8168e48f7af89c754a41581f3a7102fae066", "patch": "@@ -536,12 +536,10 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n                                                    Plus\n                                                })\n                                     .and_then(|ty| l64.checked_add(r64).map(|v| ConstantInt(v, ty)))\n+                            } else if ln {\n+                                add_neg_int(r64, rty, l64, lty)\n                             } else {\n-                                if ln {\n-                                    add_neg_int(r64, rty, l64, lty)\n-                                } else {\n-                                    add_neg_int(l64, lty, r64, rty)\n-                                }\n+                                add_neg_int(l64, lty, r64, rty)\n                             }\n                         }\n                         // TODO: float (would need bignum library?)"}, {"sha": "e72f2392054e720b2af9b41bcae28f5787688d53", "filename": "src/minmax.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/375b8168e48f7af89c754a41581f3a7102fae066/src%2Fminmax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/375b8168e48f7af89c754a41581f3a7102fae066/src%2Fminmax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fminmax.rs?ref=375b8168e48f7af89c754a41581f3a7102fae066", "patch": "@@ -59,12 +59,10 @@ fn min_max<'a>(cx: &LateContext, expr: &'a Expr) -> Option<(MinMax, Constant, &'\n \n             if match_def_path(cx, def_id, &[\"core\", \"cmp\", \"min\"]) {\n                 fetch_const(args, Min)\n+            } else if match_def_path(cx, def_id, &[\"core\", \"cmp\", \"max\"]) {\n+                fetch_const(args, Max)\n             } else {\n-                if match_def_path(cx, def_id, &[\"core\", \"cmp\", \"max\"]) {\n-                    fetch_const(args, Max)\n-                } else {\n-                    None\n-                }\n+                None\n             }\n         } else {\n             None"}, {"sha": "bcf3ce7116ace69f98d996c3db3437f2d9fd37eb", "filename": "src/shadow.rs", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/375b8168e48f7af89c754a41581f3a7102fae066/src%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/375b8168e48f7af89c754a41581f3a7102fae066/src%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshadow.rs?ref=375b8168e48f7af89c754a41581f3a7102fae066", "patch": "@@ -204,29 +204,28 @@ fn lint_shadow<T>(cx: &LateContext, name: Name, span: Span, lspan: Span, init: &\n                                         snippet(cx, lspan, \"_\"),\n                                         snippet(cx, expr.span, \"..\")));\n             note_orig(cx, db, SHADOW_SAME, prev_span);\n+        } else if contains_self(name, expr) {\n+            let db = span_note_and_lint(cx,\n+                                        SHADOW_REUSE,\n+                                        lspan,\n+                                        &format!(\"{} is shadowed by {} which reuses the original value\",\n+                                                 snippet(cx, lspan, \"_\"),\n+                                                 snippet(cx, expr.span, \"..\")),\n+                                                 expr.span,\n+                                                 \"initialization happens here\");\n+            note_orig(cx, db, SHADOW_REUSE, prev_span);\n         } else {\n-            if contains_self(name, expr) {\n-                let db = span_note_and_lint(cx,\n-                                            SHADOW_REUSE,\n-                                            lspan,\n-                                            &format!(\"{} is shadowed by {} which reuses the original value\",\n-                                                     snippet(cx, lspan, \"_\"),\n-                                                     snippet(cx, expr.span, \"..\")),\n-                                            expr.span,\n-                                            \"initialization happens here\");\n-                note_orig(cx, db, SHADOW_REUSE, prev_span);\n-            } else {\n-                let db = span_note_and_lint(cx,\n-                                            SHADOW_UNRELATED,\n-                                            lspan,\n-                                            &format!(\"{} is shadowed by {}\",\n-                                                     snippet(cx, lspan, \"_\"),\n-                                                     snippet(cx, expr.span, \"..\")),\n-                                            expr.span,\n-                                            \"initialization happens here\");\n-                note_orig(cx, db, SHADOW_UNRELATED, prev_span);\n-            }\n+            let db = span_note_and_lint(cx,\n+                                        SHADOW_UNRELATED,\n+                                        lspan,\n+                                        &format!(\"{} is shadowed by {}\",\n+                                                 snippet(cx, lspan, \"_\"),\n+                                                 snippet(cx, expr.span, \"..\")),\n+                                                 expr.span,\n+                                                 \"initialization happens here\");\n+            note_orig(cx, db, SHADOW_UNRELATED, prev_span);\n         }\n+\n     } else {\n         let db = span_lint(cx,\n                            SHADOW_UNRELATED,"}]}