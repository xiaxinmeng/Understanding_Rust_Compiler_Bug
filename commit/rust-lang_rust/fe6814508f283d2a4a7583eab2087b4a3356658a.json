{"sha": "fe6814508f283d2a4a7583eab2087b4a3356658a", "node_id": "C_kwDOAAsO6NoAKGZlNjgxNDUwOGYyODNkMmE0YTc1ODNlYWIyMDg3YjRhMzM1NjY1OGE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-15T13:38:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-15T13:38:01Z"}, "message": "Auto merge of #9174 - flip1995:rustup, r=Jarcho\n\nRustup\n\nr? `@ghost`\n\nchangelog: none", "tree": {"sha": "2e414687d41decb8f61b422747ebd3190c1d986f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e414687d41decb8f61b422747ebd3190c1d986f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe6814508f283d2a4a7583eab2087b4a3356658a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe6814508f283d2a4a7583eab2087b4a3356658a", "html_url": "https://github.com/rust-lang/rust/commit/fe6814508f283d2a4a7583eab2087b4a3356658a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe6814508f283d2a4a7583eab2087b4a3356658a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9f0d1aca7ba2afc3e83e6175de704a5500f3114", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9f0d1aca7ba2afc3e83e6175de704a5500f3114", "html_url": "https://github.com/rust-lang/rust/commit/c9f0d1aca7ba2afc3e83e6175de704a5500f3114"}, {"sha": "9178ba1f557263a590db31a5c450fc20f36137de", "url": "https://api.github.com/repos/rust-lang/rust/commits/9178ba1f557263a590db31a5c450fc20f36137de", "html_url": "https://github.com/rust-lang/rust/commit/9178ba1f557263a590db31a5c450fc20f36137de"}], "stats": {"total": 519, "additions": 288, "deletions": 231}, "files": [{"sha": "6248d588a890b9dc13038eaa051ca56cd46d18b6", "filename": "book/src/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/book%2Fsrc%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/book%2Fsrc%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2FREADME.md?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -1,7 +1,7 @@\n # Clippy\n \n [![Clippy Test](https://github.com/rust-lang/rust-clippy/workflows/Clippy%20Test/badge.svg?branch=auto&event=push)](https://github.com/rust-lang/rust-clippy/actions?query=workflow%3A%22Clippy+Test%22+event%3Apush+branch%3Aauto)\n-[![License: MIT OR Apache-2.0](https://img.shields.io/crates/l/clippy.svg)](#license)\n+[![License: MIT OR Apache-2.0](https://img.shields.io/crates/l/clippy.svg)](https://github.com/rust-lang/rust-clippy#license)\n \n A collection of lints to catch common mistakes and improve your\n [Rust](https://github.com/rust-lang/rust) code."}, {"sha": "d06297f2e079a23b077f08e5b7bbf5d58f0d0f67", "filename": "book/src/development/adding_lints.md", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/book%2Fsrc%2Fdevelopment%2Fadding_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/book%2Fsrc%2Fdevelopment%2Fadding_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fdevelopment%2Fadding_lints.md?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -13,7 +13,6 @@ because that's clearly a non-descriptive name.\n   - [Testing](#testing)\n     - [Cargo lints](#cargo-lints)\n   - [Rustfix tests](#rustfix-tests)\n-  - [Edition 2018 tests](#edition-2018-tests)\n   - [Testing manually](#testing-manually)\n   - [Lint declaration](#lint-declaration)\n   - [Lint registration](#lint-registration)\n@@ -402,9 +401,8 @@ need to ensure that the MSRV configured for the project is >= the MSRV of the\n required Rust feature. If multiple features are required, just use the one with\n a lower MSRV.\n \n-First, add an MSRV alias for the required feature in\n-[`clippy_utils::msrvs`](/clippy_utils/src/msrvs.rs). This can be accessed later\n-as `msrvs::STR_STRIP_PREFIX`, for example.\n+First, add an MSRV alias for the required feature in [`clippy_utils::msrvs`].\n+This can be accessed later as `msrvs::STR_STRIP_PREFIX`, for example.\n \n ```rust\n msrv_aliases! {\n@@ -468,6 +466,8 @@ define_Conf! {\n }\n ```\n \n+[`clippy_utils::msrvs`]: https://doc.rust-lang.org/nightly/nightly-rustc/clippy_utils/msrvs/index.html\n+\n ## Author lint\n \n If you have trouble implementing your lint, there is also the internal `author`\n@@ -583,8 +583,7 @@ the workspace directory. Adding a configuration to a lint can be useful for\n thresholds or to constrain some behavior that can be seen as a false positive\n for some users. Adding a configuration is done in the following steps:\n \n-1. Adding a new configuration entry to\n-   [clippy_lints::utils::conf](/clippy_lints/src/utils/conf.rs) like this:\n+1. Adding a new configuration entry to [`clippy_lints::utils::conf`] like this:\n \n    ```rust\n    /// Lint: LINT_NAME.\n@@ -635,9 +634,9 @@ for some users. Adding a configuration is done in the following steps:\n        ```\n 3. Passing the configuration value to the lint impl struct:\n \n-   First find the struct construction in the [clippy_lints lib\n-   file](/clippy_lints/src/lib.rs). The configuration value is now cloned or\n-   copied into a local value that is then passed to the impl struct like this:\n+   First find the struct construction in the [`clippy_lints` lib file]. The\n+   configuration value is now cloned or copied into a local value that is then\n+   passed to the impl struct like this:\n \n    ```rust\n    // Default generated registration:\n@@ -653,12 +652,16 @@ for some users. Adding a configuration is done in the following steps:\n \n 4. Adding tests:\n     1. The default configured value can be tested like any normal lint in\n-       [`tests/ui`](/tests/ui).\n-    2. The configuration itself will be tested separately in\n-       [`tests/ui-toml`](/tests/ui-toml). Simply add a new subfolder with a\n-       fitting name. This folder contains a `clippy.toml` file with the\n-       configuration value and a rust file that should be linted by Clippy. The\n-       test can otherwise be written as usual.\n+       [`tests/ui`].\n+    2. The configuration itself will be tested separately in [`tests/ui-toml`].\n+       Simply add a new subfolder with a fitting name. This folder contains a\n+       `clippy.toml` file with the configuration value and a rust file that\n+       should be linted by Clippy. The test can otherwise be written as usual.\n+\n+[`clippy_lints::utils::conf`]: https://github.com/rust-lang/rust-clippy/blob/master/clippy_lints/src/utils/conf.rs\n+[`clippy_lints` lib file]: https://github.com/rust-lang/rust-clippy/blob/master/clippy_lints/src/lib.rs\n+[`tests/ui`]: https://github.com/rust-lang/rust-clippy/blob/master/tests/ui\n+[`tests/ui-toml`]: https://github.com/rust-lang/rust-clippy/blob/master/tests/ui-toml\n \n ## Cheat Sheet\n "}, {"sha": "44ba6e32755e319b24d5797c0b95c42baddaad20", "filename": "book/src/development/basics.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/book%2Fsrc%2Fdevelopment%2Fbasics.md", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/book%2Fsrc%2Fdevelopment%2Fbasics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fdevelopment%2Fbasics.md?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -102,7 +102,7 @@ cargo dev dogfood\n ```\n \n More about intellij command usage and reasons\n-[here](../CONTRIBUTING.md#intellij-rust)\n+[here](https://github.com/rust-lang/rust-clippy/blob/master/CONTRIBUTING.md#intellij-rust)\n \n ## lintcheck\n "}, {"sha": "15e00c7d7ce4c3e56faea6be845039c50dc6f034", "filename": "book/src/development/common_tools_writing_lints.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/book%2Fsrc%2Fdevelopment%2Fcommon_tools_writing_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/book%2Fsrc%2Fdevelopment%2Fcommon_tools_writing_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fdevelopment%2Fcommon_tools_writing_lints.md?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -276,4 +276,4 @@ functions to deal with macros:\n [LateContext]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/struct.LateContext.html\n [TyCtxt]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/context/struct.TyCtxt.html\n [pat_ty]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/context/struct.TypeckResults.html#method.pat_ty\n-[paths]: ../clippy_utils/src/paths.rs\n+[paths]: https://doc.rust-lang.org/nightly/nightly-rustc/clippy_utils/paths/index.html"}, {"sha": "61a90445d753c6b6f3d5b6be7a0ebf4b7e6d9150", "filename": "book/src/usage.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/book%2Fsrc%2Fusage.md", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/book%2Fsrc%2Fusage.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fusage.md?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -148,4 +148,4 @@ clippy-driver --edition 2018 -Cpanic=abort foo.rs\n > that are not optimized as expected, for example.\n \n [Installation]: installation.md\n-[CI]: continuous_integration\n+[CI]: continuous_integration/index.md"}, {"sha": "ad206b5fb304f04e3e79a465eff631cadae1da64", "filename": "clippy_lints/src/blocks_in_if_conditions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -6,7 +6,7 @@ use clippy_utils::ty::implements_trait;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_expr, Visitor};\n-use rustc_hir::{BlockCheckMode, Expr, ExprKind};\n+use rustc_hir::{BlockCheckMode, Closure, Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -51,7 +51,7 @@ struct ExVisitor<'a, 'tcx> {\n \n impl<'a, 'tcx> Visitor<'tcx> for ExVisitor<'a, 'tcx> {\n     fn visit_expr(&mut self, expr: &'tcx Expr<'tcx>) {\n-        if let ExprKind::Closure { body, .. } = expr.kind {\n+        if let ExprKind::Closure(&Closure { body, .. }) = expr.kind {\n             // do not lint if the closure is called using an iterator (see #1141)\n             if_chain! {\n                 if let Some(parent) = get_parent_expr(self.cx, expr);"}, {"sha": "326ce34082af7c233b8f2d1dc44cc185a81fdb08", "filename": "clippy_lints/src/bytecount.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fbytecount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fbytecount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbytecount.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -5,7 +5,7 @@ use clippy_utils::visitors::is_local_used;\n use clippy_utils::{path_to_local_id, paths, peel_blocks, peel_ref_operators, strip_pat_refs};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n-use rustc_hir::{BinOpKind, Expr, ExprKind, PatKind};\n+use rustc_hir::{BinOpKind, Closure, Expr, ExprKind, PatKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::{self, UintTy};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -51,7 +51,7 @@ impl<'tcx> LateLintPass<'tcx> for ByteCount {\n             if count.ident.name == sym::count;\n             if let ExprKind::MethodCall(filter, [filter_recv, filter_arg], _) = count_recv.kind;\n             if filter.ident.name == sym!(filter);\n-            if let ExprKind::Closure { body, .. } = filter_arg.kind;\n+            if let ExprKind::Closure(&Closure { body, .. }) = filter_arg.kind;\n             let body = cx.tcx.hir().body(body);\n             if let [param] = body.params;\n             if let PatKind::Binding(_, arg_id, _, _) = strip_pat_refs(param.pat).kind;"}, {"sha": "8c7cf7748be1359440197d3692fb6daaf677c024", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -8,14 +8,14 @@ use rustc_data_structures::fx::FxIndexMap;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_ty, Visitor};\n use rustc_hir::{\n-    self as hir, BindingAnnotation, Body, BodyId, BorrowKind, Expr, ExprKind, FnRetTy, GenericArg, HirId, ImplItem,\n-    ImplItemKind, Item, ItemKind, Local, MatchSource, Mutability, Node, Pat, PatKind, Path, QPath, TraitItem,\n+    self as hir, BindingAnnotation, Body, BodyId, BorrowKind, Closure, Expr, ExprKind, FnRetTy, GenericArg, HirId,\n+    ImplItem, ImplItemKind, Item, ItemKind, Local, MatchSource, Mutability, Node, Pat, PatKind, Path, QPath, TraitItem,\n     TraitItemKind, TyKind, UnOp,\n };\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, AutoBorrow, AutoBorrowMutability};\n-use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable, TypeckResults};\n+use rustc_middle::ty::{self, Ty, TyCtxt, TypeVisitable, TypeckResults};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{symbol::sym, Span, Symbol};\n use rustc_trait_selection::infer::InferCtxtExt;\n@@ -720,7 +720,7 @@ fn walk_parents<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> (Position, &\n                     let owner_id = cx.tcx.hir().body_owner(cx.enclosing_body.unwrap());\n                     Some(\n                         if let Node::Expr(Expr {\n-                            kind: ExprKind::Closure { fn_decl, .. },\n+                            kind: ExprKind::Closure(&Closure { fn_decl, .. }),\n                             ..\n                         }) = cx.tcx.hir().get(owner_id)\n                         {"}, {"sha": "e1eb3b6324c7820091e7b10dfa23f8c80d6e157a", "filename": "clippy_lints/src/duplicate_mod.rs", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fduplicate_mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fduplicate_mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fduplicate_mod.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n use rustc_ast::ast::{Crate, Inline, Item, ItemKind, ModKind};\n use rustc_errors::MultiSpan;\n-use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n+use rustc_lint::{EarlyContext, EarlyLintPass, Level, LintContext};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{FileName, Span};\n use std::collections::BTreeMap;\n@@ -49,6 +49,7 @@ declare_clippy_lint! {\n struct Modules {\n     local_path: PathBuf,\n     spans: Vec<Span>,\n+    lint_levels: Vec<Level>,\n }\n \n #[derive(Default)]\n@@ -70,13 +71,38 @@ impl EarlyLintPass for DuplicateMod {\n             let modules = self.modules.entry(absolute_path).or_insert(Modules {\n                 local_path,\n                 spans: Vec::new(),\n+                lint_levels: Vec::new(),\n             });\n             modules.spans.push(item.span_with_attributes());\n+            modules.lint_levels.push(cx.get_lint_level(DUPLICATE_MOD));\n         }\n     }\n \n     fn check_crate_post(&mut self, cx: &EarlyContext<'_>, _: &Crate) {\n-        for Modules { local_path, spans } in self.modules.values() {\n+        for Modules {\n+            local_path,\n+            spans,\n+            lint_levels,\n+        } in self.modules.values()\n+        {\n+            if spans.len() < 2 {\n+                continue;\n+            }\n+\n+            // At this point the lint would be emitted\n+            assert_eq!(spans.len(), lint_levels.len());\n+            let spans: Vec<_> = spans\n+                .iter()\n+                .zip(lint_levels)\n+                .filter_map(|(span, lvl)| {\n+                    if let Some(id) = lvl.get_expectation_id() {\n+                        cx.fulfill_expectation(id);\n+                    }\n+\n+                    (!matches!(lvl, Level::Allow | Level::Expect(_))).then_some(*span)\n+                })\n+                .collect();\n+\n             if spans.len() < 2 {\n                 continue;\n             }"}, {"sha": "1ac7bfba06ba217a38c4d23560be1ac841116126", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::span_lint_hir;\n use clippy_utils::ty::contains_ty;\n use rustc_hir::intravisit;\n-use rustc_hir::{self, AssocItemKind, Body, FnDecl, HirId, HirIdSet, Impl, ItemKind, Node};\n+use rustc_hir::{self, AssocItemKind, Body, FnDecl, HirId, HirIdSet, Impl, ItemKind, Node, Pat, PatKind};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::mir::FakeReadCause;\n@@ -132,7 +132,10 @@ impl<'tcx> LateLintPass<'tcx> for BoxedLocal {\n // TODO: Replace with Map::is_argument(..) when it's fixed\n fn is_argument(map: rustc_middle::hir::map::Map<'_>, id: HirId) -> bool {\n     match map.find(id) {\n-        Some(Node::Binding(_)) => (),\n+        Some(Node::Pat(Pat {\n+            kind: PatKind::Binding(..),\n+            ..\n+        })) => (),\n         _ => return false,\n     }\n \n@@ -144,15 +147,6 @@ impl<'a, 'tcx> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {\n         if cmt.place.projections.is_empty() {\n             if let PlaceBase::Local(lid) = cmt.place.base {\n                 self.set.remove(&lid);\n-                let map = &self.cx.tcx.hir();\n-                if let Some(Node::Binding(_)) = map.find(cmt.hir_id) {\n-                    if self.set.contains(&lid) {\n-                        // let y = x where x is known\n-                        // remove x, insert y\n-                        self.set.insert(cmt.hir_id);\n-                        self.set.remove(&lid);\n-                    }\n-                }\n             }\n         }\n     }"}, {"sha": "80c84014bfdeb7c864c2ceab833c52bd50b27f26", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -7,12 +7,12 @@ use clippy_utils::{higher, is_adjusted, path_to_local, path_to_local_id};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::def_id::DefId;\n-use rustc_hir::{Expr, ExprKind, Param, PatKind, Unsafety};\n+use rustc_hir::{Closure, Expr, ExprKind, Param, PatKind, Unsafety};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, AutoBorrow};\n use rustc_middle::ty::binding::BindingMode;\n use rustc_middle::ty::subst::Subst;\n-use rustc_middle::ty::{self, ClosureKind, Ty, TypeFoldable};\n+use rustc_middle::ty::{self, ClosureKind, Ty, TypeVisitable};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::sym;\n \n@@ -78,7 +78,7 @@ impl<'tcx> LateLintPass<'tcx> for EtaReduction {\n             return;\n         }\n         let body = match expr.kind {\n-            ExprKind::Closure { body, .. } => cx.tcx.hir().body(body),\n+            ExprKind::Closure(&Closure { body, .. }) => cx.tcx.hir().body(body),\n             _ => return,\n         };\n         if body.value.span.from_expansion() {"}, {"sha": "453471c8cdda6f4b6a09a706f2c17caf5bdb2814", "filename": "clippy_lints/src/excessive_bools.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fexcessive_bools.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fexcessive_bools.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexcessive_bools.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -94,7 +94,7 @@ impl ExcessiveBools {\n \n     fn check_fn_sig(&self, cx: &EarlyContext<'_>, fn_sig: &FnSig, span: Span) {\n         match fn_sig.header.ext {\n-            Extern::Implicit | Extern::Explicit(_) => return,\n+            Extern::Implicit(_) | Extern::Explicit(_, _) => return,\n             Extern::None => (),\n         }\n "}, {"sha": "5bf4313b41a49ae062fa7e8faf6f55ef83f52b9b", "filename": "clippy_lints/src/explicit_write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fexplicit_write.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fexplicit_write.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexplicit_write.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -125,7 +125,7 @@ fn look_in_block<'tcx, 'hir>(cx: &LateContext<'tcx>, kind: &'tcx ExprKind<'hir>)\n         // Find id of the local that expr_end_of_block resolves to\n         if let ExprKind::Path(QPath::Resolved(None, expr_path)) = expr_end_of_block.kind;\n         if let Res::Local(expr_res) = expr_path.res;\n-        if let Some(Node::Binding(res_pat)) = cx.tcx.hir().find(expr_res);\n+        if let Some(Node::Pat(res_pat)) = cx.tcx.hir().find(expr_res);\n \n         // Find id of the local we found in the block\n         if let PatKind::Binding(BindingAnnotation::Unannotated, local_hir_id, _ident, None) = local.pat.kind;"}, {"sha": "01c7eef4e04da87e91fbf45433b532b3911b3600", "filename": "clippy_lints/src/infinite_iter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Finfinite_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Finfinite_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finfinite_iter.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::span_lint;\n use clippy_utils::ty::{implements_trait, is_type_diagnostic_item};\n use clippy_utils::{higher, match_def_path, path_def_id, paths};\n-use rustc_hir::{BorrowKind, Expr, ExprKind};\n+use rustc_hir::{BorrowKind, Closure, Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::{sym, Symbol};\n@@ -159,7 +159,7 @@ fn is_infinite(cx: &LateContext<'_>, expr: &Expr<'_>) -> Finiteness {\n                 }\n             }\n             if method.ident.name == sym!(flat_map) && args.len() == 2 {\n-                if let ExprKind::Closure { body, .. } = args[1].kind {\n+                if let ExprKind::Closure(&Closure { body, .. }) = args[1].kind {\n                     let body = cx.tcx.hir().body(body);\n                     return is_infinite(cx, &body.value);\n                 }"}, {"sha": "94db1773fda69b081ca6b62230f5aacb3659491c", "filename": "clippy_lints/src/inherent_to_string.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Finherent_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Finherent_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_to_string.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -2,7 +2,7 @@ use clippy_utils::diagnostics::span_lint_and_help;\n use clippy_utils::ty::{implements_trait, is_type_diagnostic_item};\n use clippy_utils::{get_trait_def_id, paths, return_ty, trait_ref_of_method};\n use if_chain::if_chain;\n-use rustc_hir::{ImplItem, ImplItemKind};\n+use rustc_hir::{GenericParamKind, ImplItem, ImplItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n@@ -102,7 +102,7 @@ impl<'tcx> LateLintPass<'tcx> for InherentToString {\n             let decl = &signature.decl;\n             if decl.implicit_self.has_implicit_self();\n             if decl.inputs.len() == 1;\n-            if impl_item.generics.params.is_empty();\n+            if impl_item.generics.params.iter().all(|p| matches!(p.kind, GenericParamKind::Lifetime { .. }));\n \n             // Check if return type is String\n             if is_type_diagnostic_item(cx, return_ty(cx, impl_item.hir_id()), sym::String);"}, {"sha": "083c437a293c0937b6be1cdc9f3431bc8ec631f0", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -9,8 +9,8 @@ use rustc_hir::intravisit::{\n use rustc_hir::FnRetTy::Return;\n use rustc_hir::{\n     BareFnTy, BodyId, FnDecl, GenericArg, GenericBound, GenericParam, GenericParamKind, Generics, Impl, ImplItem,\n-    ImplItemKind, Item, ItemKind, LangItem, Lifetime, LifetimeName, ParamName, PolyTraitRef, PredicateOrigin,\n-    TraitBoundModifier, TraitFn, TraitItem, TraitItemKind, Ty, TyKind, WherePredicate,\n+    ImplItemKind, Item, ItemKind, LangItem, Lifetime, LifetimeName, LifetimeParamKind, ParamName, PolyTraitRef,\n+    PredicateOrigin, TraitBoundModifier, TraitFn, TraitItem, TraitItemKind, Ty, TyKind, WherePredicate,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::nested_filter as middle_nested_filter;\n@@ -338,7 +338,10 @@ fn could_use_elision<'tcx>(\n fn allowed_lts_from(named_generics: &[GenericParam<'_>]) -> FxHashSet<RefLt> {\n     let mut allowed_lts = FxHashSet::default();\n     for par in named_generics.iter() {\n-        if let GenericParamKind::Lifetime { .. } = par.kind {\n+        if let GenericParamKind::Lifetime {\n+            kind: LifetimeParamKind::Explicit,\n+        } = par.kind\n+        {\n             allowed_lts.insert(RefLt::Named(par.name.ident().name));\n         }\n     }\n@@ -379,6 +382,7 @@ impl<'a, 'tcx> RefVisitor<'a, 'tcx> {\n                 self.lts.push(RefLt::Static);\n             } else if let LifetimeName::Param(_, ParamName::Fresh) = lt.name {\n                 // Fresh lifetimes generated should be ignored.\n+                self.lts.push(RefLt::Unnamed);\n             } else if lt.is_elided() {\n                 self.lts.push(RefLt::Unnamed);\n             } else {"}, {"sha": "aedf3810b23e95c88de5d867eea3c03d446d0e24", "filename": "clippy_lints/src/loops/mut_range_bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -43,7 +43,7 @@ fn mut_warn_with_span(cx: &LateContext<'_>, span: Option<Span>) {\n fn check_for_mutability(cx: &LateContext<'_>, bound: &Expr<'_>) -> Option<HirId> {\n     if_chain! {\n         if let Some(hir_id) = path_to_local(bound);\n-        if let Node::Binding(pat) = cx.tcx.hir().get(hir_id);\n+        if let Node::Pat(pat) = cx.tcx.hir().get(hir_id);\n         if let PatKind::Binding(BindingAnnotation::Mutable, ..) = pat.kind;\n         then {\n             return Some(hir_id);"}, {"sha": "a7ef562b21fc48880a253b2d8a612920f550832f", "filename": "clippy_lints/src/loops/needless_range_loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -9,7 +9,7 @@ use rustc_ast::ast;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::intravisit::{walk_expr, Visitor};\n-use rustc_hir::{BinOpKind, BorrowKind, Expr, ExprKind, HirId, Mutability, Pat, PatKind, QPath};\n+use rustc_hir::{BinOpKind, BorrowKind, Closure, Expr, ExprKind, HirId, Mutability, Pat, PatKind, QPath};\n use rustc_lint::LateContext;\n use rustc_middle::middle::region;\n use rustc_middle::ty::{self, Ty};\n@@ -369,7 +369,7 @@ impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n                     self.visit_expr(expr);\n                 }\n             },\n-            ExprKind::Closure { body, .. } => {\n+            ExprKind::Closure(&Closure { body, .. }) => {\n                 let body = self.cx.tcx.hir().body(body);\n                 self.visit_expr(&body.value);\n             },"}, {"sha": "1439f1f4c75d5b03555c10edc1c2d67166c46d86", "filename": "clippy_lints/src/loops/same_item_push.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Floops%2Fsame_item_push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Floops%2Fsame_item_push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fsame_item_push.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -63,7 +63,7 @@ pub(super) fn check<'tcx>(\n                         Res::Local(hir_id) => {\n                             let node = cx.tcx.hir().get(hir_id);\n                             if_chain! {\n-                                if let Node::Binding(pat) = node;\n+                                if let Node::Pat(pat) = node;\n                                 if let PatKind::Binding(bind_ann, ..) = pat.kind;\n                                 if !matches!(bind_ann, BindingAnnotation::RefMut | BindingAnnotation::Mutable);\n                                 let parent_node = cx.tcx.hir().get_parent_node(hir_id);"}, {"sha": "e9e215e662f1939c6d799d5e0cdd84aee65fdea5", "filename": "clippy_lints/src/loops/while_let_on_iterator.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -9,7 +9,7 @@ use clippy_utils::{\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_expr, Visitor};\n-use rustc_hir::{def::Res, Expr, ExprKind, HirId, Local, Mutability, PatKind, QPath, UnOp};\n+use rustc_hir::{def::Res, Closure, Expr, ExprKind, HirId, Local, Mutability, PatKind, QPath, UnOp};\n use rustc_lint::LateContext;\n use rustc_middle::hir::nested_filter::OnlyBodies;\n use rustc_middle::ty::adjustment::Adjust;\n@@ -222,7 +222,7 @@ fn uses_iter<'tcx>(cx: &LateContext<'tcx>, iter_expr: &IterExpr, container: &'tc\n                 if let Some(e) = e {\n                     self.visit_expr(e);\n                 }\n-            } else if let ExprKind::Closure { body: id, .. } = e.kind {\n+            } else if let ExprKind::Closure(&Closure { body: id, .. }) = e.kind {\n                 if is_res_used(self.cx, self.iter_expr.path, id) {\n                     self.uses_iter = true;\n                 }\n@@ -267,7 +267,7 @@ fn needs_mutable_borrow(cx: &LateContext<'_>, iter_expr: &IterExpr, loop_expr: &\n                     if let Some(e) = e {\n                         self.visit_expr(e);\n                     }\n-                } else if let ExprKind::Closure { body: id, .. } = e.kind {\n+                } else if let ExprKind::Closure(&Closure { body: id, .. }) = e.kind {\n                     self.used_iter = is_res_used(self.cx, self.iter_expr.path, id);\n                 } else {\n                     walk_expr(self, e);\n@@ -319,7 +319,7 @@ fn needs_mutable_borrow(cx: &LateContext<'_>, iter_expr: &IterExpr, loop_expr: &\n                     if let Some(e) = e {\n                         self.visit_expr(e);\n                     }\n-                } else if let ExprKind::Closure { body: id, .. } = e.kind {\n+                } else if let ExprKind::Closure(&Closure { body: id, .. }) = e.kind {\n                     self.used_after = is_res_used(self.cx, self.iter_expr.path, id);\n                 } else {\n                     walk_expr(self, e);"}, {"sha": "945880d21471b2a31af15ee8f53ae573174967d7", "filename": "clippy_lints/src/manual_async_fn.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_async_fn.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -6,8 +6,8 @@ use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{\n-    AsyncGeneratorKind, Block, Body, Expr, ExprKind, FnDecl, FnRetTy, GeneratorKind, GenericArg, GenericBound, HirId,\n-    IsAsync, ItemKind, LifetimeName, Term, TraitRef, Ty, TyKind, TypeBindingKind,\n+    AsyncGeneratorKind, Block, Body, Closure, Expr, ExprKind, FnDecl, FnRetTy, GeneratorKind, GenericArg, GenericBound,\n+    HirId, IsAsync, ItemKind, LifetimeName, Term, TraitRef, Ty, TyKind, TypeBindingKind,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -177,7 +177,7 @@ fn desugared_async_block<'tcx>(cx: &LateContext<'tcx>, block: &'tcx Block<'tcx>)\n         if let Some(block_expr) = block.expr;\n         if let Some(args) = match_function_call(cx, block_expr, &FUTURE_FROM_GENERATOR);\n         if args.len() == 1;\n-        if let Expr{kind: ExprKind::Closure { body, .. }, ..} = args[0];\n+        if let Expr{kind: ExprKind::Closure(&Closure { body, .. }), ..} = args[0];\n         let closure_body = cx.tcx.hir().body(body);\n         if closure_body.generator_kind == Some(GeneratorKind::Async(AsyncGeneratorKind::Block));\n         then {"}, {"sha": "9abf2507b921c79f915e779d02e0adfeb774fd73", "filename": "clippy_lints/src/manual_ok_or.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fmanual_ok_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fmanual_ok_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_ok_or.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -5,7 +5,7 @@ use clippy_utils::{is_lang_ctor, path_to_local_id};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::LangItem::{ResultErr, ResultOk};\n-use rustc_hir::{Expr, ExprKind, PatKind};\n+use rustc_hir::{Closure, Expr, ExprKind, PatKind};\n use rustc_lint::LintContext;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::lint::in_external_macro;\n@@ -88,7 +88,7 @@ fn is_ok_wrapping(cx: &LateContext<'_>, map_expr: &Expr<'_>) -> bool {\n         }\n     }\n     if_chain! {\n-        if let ExprKind::Closure { body, .. } = map_expr.kind;\n+        if let ExprKind::Closure(&Closure { body, .. }) = map_expr.kind;\n         let body = cx.tcx.hir().body(body);\n         if let PatKind::Binding(_, param_id, ..) = body.params[0].pat.kind;\n         if let ExprKind::Call(Expr { kind: ExprKind::Path(ok_path), .. }, &[ref ok_arg]) = body.value.kind;"}, {"sha": "95cc6bdbd8ba7bf0b748b7d9559bb9dc7e8af8f2", "filename": "clippy_lints/src/manual_rem_euclid.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fmanual_rem_euclid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fmanual_rem_euclid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_rem_euclid.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -72,7 +72,7 @@ impl<'tcx> LateLintPass<'tcx> for ManualRemEuclid {\n             // Also ensures the const is nonzero since zero can't be a divisor\n             && const1 == const2 && const2 == const3\n             && let Some(hir_id) = path_to_local(expr3)\n-            && let Some(Node::Binding(_)) = cx.tcx.hir().find(hir_id) {\n+            && let Some(Node::Pat(_)) = cx.tcx.hir().find(hir_id) {\n                 // Apply only to params or locals with annotated types\n                 match cx.tcx.hir().find(cx.tcx.hir().get_parent_node(hir_id)) {\n                     Some(Node::Param(..)) => (),"}, {"sha": "42d2577cc3161f48cb1242d23d88b9633dc64fa4", "filename": "clippy_lints/src/manual_retain.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fmanual_retain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fmanual_retain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_retain.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -148,7 +148,7 @@ fn check_to_owned(\n \n fn suggest(cx: &LateContext<'_>, parent_expr: &hir::Expr<'_>, left_expr: &hir::Expr<'_>, filter_expr: &hir::Expr<'_>) {\n     if let hir::ExprKind::MethodCall(_, [_, closure], _) = filter_expr.kind\n-        && let hir::ExprKind::Closure{ body, ..} = closure.kind\n+        && let hir::ExprKind::Closure(&hir::Closure { body, ..}) = closure.kind\n         && let filter_body = cx.tcx.hir().body(body)\n         && let [filter_params] = filter_body.params\n         && let Some(sugg) = match filter_params.pat.kind {"}, {"sha": "95c312f1fe26b19216c0573697d3ca5cca040920", "filename": "clippy_lints/src/map_clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_clone.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -67,7 +67,7 @@ impl<'tcx> LateLintPass<'tcx> for MapClone {\n             if method.ident.name == sym::map;\n             let ty = cx.typeck_results().expr_ty(&args[0]);\n             if is_type_diagnostic_item(cx, ty, sym::Option) || is_trait_method(cx, e, sym::Iterator);\n-            if let hir::ExprKind::Closure { body, .. } = args[1].kind;\n+            if let hir::ExprKind::Closure(&hir::Closure { body, .. }) = args[1].kind;\n             then {\n                 let closure_body = cx.tcx.hir().body(body);\n                 let closure_expr = peel_blocks(&closure_body.value);"}, {"sha": "21d0e19eb0a489998a98b2ebcee90f9f514b86a1", "filename": "clippy_lints/src/map_err_ignore.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fmap_err_ignore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fmap_err_ignore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_err_ignore.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -1,5 +1,5 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n-use rustc_hir::{CaptureBy, Expr, ExprKind, PatKind};\n+use rustc_hir::{CaptureBy, Closure, Expr, ExprKind, PatKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n@@ -119,12 +119,12 @@ impl<'tcx> LateLintPass<'tcx> for MapErrIgnore {\n             if method.ident.as_str() == \"map_err\" && args.len() == 2 {\n                 // make sure the first argument is a closure, and grab the CaptureRef, BodyId, and fn_decl_span\n                 // fields\n-                if let ExprKind::Closure {\n+                if let ExprKind::Closure(&Closure {\n                     capture_clause,\n                     body,\n                     fn_decl_span,\n                     ..\n-                } = args[1].kind\n+                }) = args[1].kind\n                 {\n                     // check if this is by Reference (meaning there's no move statement)\n                     if capture_clause == CaptureBy::Ref {"}, {"sha": "af9d948af00e68e7425f3166e5f09f5da7fd01a2", "filename": "clippy_lints/src/map_unit_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_unit_fn.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -169,7 +169,7 @@ fn unit_closure<'tcx>(\n     expr: &hir::Expr<'_>,\n ) -> Option<(&'tcx hir::Param<'tcx>, &'tcx hir::Expr<'tcx>)> {\n     if_chain! {\n-        if let hir::ExprKind::Closure { fn_decl, body, .. } = expr.kind;\n+        if let hir::ExprKind::Closure(&hir::Closure { fn_decl, body, .. }) = expr.kind;\n         let body = cx.tcx.hir().body(body);\n         let body_expr = &body.value;\n         if fn_decl.inputs.len() == 1;"}, {"sha": "d55082c66dc864a4fa4a1254a082c1fbd639512a", "filename": "clippy_lints/src/matches/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -1041,7 +1041,8 @@ impl<'tcx> LateLintPass<'tcx> for Matches {\n     }\n \n     fn check_local(&mut self, cx: &LateContext<'tcx>, local: &'tcx Local<'_>) {\n-        self.infallible_destructuring_match_linted |= infallible_destructuring_match::check(cx, local);\n+        self.infallible_destructuring_match_linted |=\n+            local.els.is_none() && infallible_destructuring_match::check(cx, local);\n     }\n \n     fn check_pat(&mut self, cx: &LateContext<'tcx>, pat: &'tcx Pat<'_>) {"}, {"sha": "2f117e4dcc3746abd71f918d0e3efa88661a9c0f", "filename": "clippy_lints/src/methods/bind_instead_of_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -150,7 +150,7 @@ pub(crate) trait BindInsteadOfMap {\n         }\n \n         match arg.kind {\n-            hir::ExprKind::Closure { body, fn_decl_span, .. } => {\n+            hir::ExprKind::Closure(&hir::Closure { body, fn_decl_span, .. }) => {\n                 let closure_body = cx.tcx.hir().body(body);\n                 let closure_expr = peel_blocks(&closure_body.value);\n "}, {"sha": "692e22a7c5cf7138dbbc0f7cf6df0f06228721b3", "filename": "clippy_lints/src/methods/filter_map.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -6,7 +6,7 @@ use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n-use rustc_hir::{Expr, ExprKind, PatKind, PathSegment, QPath, UnOp};\n+use rustc_hir::{Closure, Expr, ExprKind, PatKind, PathSegment, QPath, UnOp};\n use rustc_lint::LateContext;\n use rustc_middle::ty::adjustment::Adjust;\n use rustc_span::source_map::Span;\n@@ -23,8 +23,8 @@ fn is_method<'tcx>(cx: &LateContext<'tcx>, expr: &hir::Expr<'_>, method_name: Sy\n         hir::ExprKind::Path(QPath::Resolved(_, segments)) => {\n             segments.segments.last().unwrap().ident.name == method_name\n         },\n-        hir::ExprKind::Closure { body, .. } => {\n-            let body = cx.tcx.hir().body(*body);\n+        hir::ExprKind::Closure(&hir::Closure { body, .. }) => {\n+            let body = cx.tcx.hir().body(body);\n             let closure_expr = peel_blocks(&body.value);\n             let arg_id = body.params[0].pat.hir_id;\n             match closure_expr.kind {\n@@ -95,7 +95,7 @@ pub(super) fn check<'tcx>(\n             if is_trait_method(cx, map_recv, sym::Iterator);\n \n             // filter(|x| ...is_some())...\n-            if let ExprKind::Closure { body: filter_body_id, .. } = filter_arg.kind;\n+            if let ExprKind::Closure(&Closure { body: filter_body_id, .. }) = filter_arg.kind;\n             let filter_body = cx.tcx.hir().body(filter_body_id);\n             if let [filter_param] = filter_body.params;\n             // optional ref pattern: `filter(|&x| ..)`\n@@ -118,7 +118,7 @@ pub(super) fn check<'tcx>(\n             if path.ident.name.as_str() == if is_result { \"is_ok\" } else { \"is_some\" };\n \n             // ...map(|x| ...unwrap())\n-            if let ExprKind::Closure { body: map_body_id, .. } = map_arg.kind;\n+            if let ExprKind::Closure(&Closure { body: map_body_id, .. }) = map_arg.kind;\n             let map_body = cx.tcx.hir().body(map_body_id);\n             if let [map_param] = map_body.params;\n             if let PatKind::Binding(_, map_param_id, map_param_ident, None) = map_param.pat.kind;"}, {"sha": "43e9451f7d37eb4f42b24e2b1bb39d2c5b8c74e8", "filename": "clippy_lints/src/methods/iter_skip_next.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fmethods%2Fiter_skip_next.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fmethods%2Fiter_skip_next.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiter_skip_next.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -22,7 +22,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, recv: &hir::Expr\n             |diag| {\n                 if_chain! {\n                     if let Some(id) = path_to_local(recv);\n-                    if let Node::Binding(pat) = cx.tcx.hir().get(id);\n+                    if let Node::Pat(pat) = cx.tcx.hir().get(id);\n                     if let PatKind::Binding(ann, _, _, _)  = pat.kind;\n                     if ann != BindingAnnotation::Mutable;\n                     then {"}, {"sha": "20cad0f181e951dcb22d5b69cc7a90c717eef42e", "filename": "clippy_lints/src/methods/option_as_ref_deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -51,7 +51,7 @@ pub(super) fn check<'tcx>(\n             .map_or(false, |fun_def_id| {\n                 deref_aliases.iter().any(|path| match_def_path(cx, fun_def_id, path))\n             }),\n-        hir::ExprKind::Closure { body, .. } => {\n+        hir::ExprKind::Closure(&hir::Closure { body, .. }) => {\n             let closure_body = cx.tcx.hir().body(body);\n             let closure_expr = peel_blocks(&closure_body.value);\n "}, {"sha": "5a39b82b027d1643536ec0c4f2fd9237fad57ccf", "filename": "clippy_lints/src/methods/option_map_or_none.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fmethods%2Foption_map_or_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fmethods%2Foption_map_or_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Foption_map_or_none.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -71,7 +71,7 @@ pub(super) fn check<'tcx>(\n     if is_option {\n         let self_snippet = snippet(cx, recv.span, \"..\");\n         if_chain! {\n-            if let hir::ExprKind::Closure { body, fn_decl_span, .. } = map_arg.kind;\n+            if let hir::ExprKind::Closure(&hir::Closure { body, fn_decl_span, .. }) = map_arg.kind;\n             let arg_snippet = snippet(cx, fn_decl_span, \"..\");\n             let body = cx.tcx.hir().body(body);\n             if let Some((func, [arg_char])) = reduce_unit_expression(&body.value);"}, {"sha": "7572ba3fe9a943150211b38568167ffa9a1e3f9f", "filename": "clippy_lints/src/methods/search_is_some.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -41,7 +41,7 @@ pub(super) fn check<'tcx>(\n             let mut applicability = Applicability::MachineApplicable;\n             let any_search_snippet = if_chain! {\n                 if search_method == \"find\";\n-                if let hir::ExprKind::Closure { body, .. } = search_arg.kind;\n+                if let hir::ExprKind::Closure(&hir::Closure { body, .. }) = search_arg.kind;\n                 let closure_body = cx.tcx.hir().body(body);\n                 if let Some(closure_arg) = closure_body.params.get(0);\n                 then {"}, {"sha": "bafa6fc584d48548e595d218fac04d29d129a54b", "filename": "clippy_lints/src/methods/unnecessary_filter_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -18,7 +18,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, arg: &hir::Expr<\n         return;\n     }\n \n-    if let hir::ExprKind::Closure { body, .. } = arg.kind {\n+    if let hir::ExprKind::Closure(&hir::Closure { body, .. }) = arg.kind {\n         let body = cx.tcx.hir().body(body);\n         let arg_id = body.params[0].pat.hir_id;\n         let mutates_arg ="}, {"sha": "c3531d4d0511e9e8f730dbc64e35190fc2228f53", "filename": "clippy_lints/src/methods/unnecessary_fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_fold.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -29,7 +29,7 @@ pub(super) fn check(\n     ) {\n         if_chain! {\n             // Extract the body of the closure passed to fold\n-            if let hir::ExprKind::Closure { body, .. } = acc.kind;\n+            if let hir::ExprKind::Closure(&hir::Closure { body, .. }) = acc.kind;\n             let closure_body = cx.tcx.hir().body(body);\n             let closure_expr = peel_blocks(&closure_body.value);\n "}, {"sha": "1876c7fb9d0510fd855b52232bdfa38b6e6e7a65", "filename": "clippy_lints/src/methods/unnecessary_lazy_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_lazy_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_lazy_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_lazy_eval.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -23,7 +23,7 @@ pub(super) fn check<'tcx>(\n     let is_bool = cx.typeck_results().expr_ty(recv).is_bool();\n \n     if is_option || is_result || is_bool {\n-        if let hir::ExprKind::Closure { body, .. } = arg.kind {\n+        if let hir::ExprKind::Closure(&hir::Closure { body, .. }) = arg.kind {\n             let body = cx.tcx.hir().body(body);\n             let body_expr = &body.value;\n "}, {"sha": "8224e80c9ccb36cb5f75ef2e025ddc7b9074e998", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -301,7 +301,7 @@ fn in_attributes_expansion(expr: &Expr<'_>) -> bool {\n     use rustc_span::hygiene::MacroKind;\n     if expr.span.from_expansion() {\n         let data = expr.span.ctxt().outer_expn_data();\n-        matches!(data.kind, ExpnKind::Macro(MacroKind::Attr, _))\n+        matches!(data.kind, ExpnKind::Macro(MacroKind::Attr | MacroKind::Derive, _))\n     } else {\n         false\n     }"}, {"sha": "4db103bbc1305ace26d744ecfb4d53113dc8dab9", "filename": "clippy_lints/src/mut_key.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fmut_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fmut_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_key.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -2,7 +2,7 @@ use clippy_utils::diagnostics::span_lint;\n use clippy_utils::trait_ref_of_method;\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty::TypeFoldable;\n+use rustc_middle::ty::TypeVisitable;\n use rustc_middle::ty::{Adt, Array, Ref, Slice, Tuple, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;"}, {"sha": "10e188ecb79a6af8365f832e17926fff68b50d0b", "filename": "clippy_lints/src/needless_for_each.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fneedless_for_each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fneedless_for_each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_for_each.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -1,7 +1,7 @@\n use rustc_errors::Applicability;\n use rustc_hir::{\n     intravisit::{walk_expr, Visitor},\n-    Expr, ExprKind, Stmt, StmtKind,\n+    Closure, Expr, ExprKind, Stmt, StmtKind,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -72,7 +72,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessForEach {\n             if has_iter_method(cx, cx.typeck_results().expr_ty(iter_recv)).is_some();\n             // Skip the lint if the body is not block because this is simpler than `for` loop.\n             // e.g. `v.iter().for_each(f)` is simpler and clearer than using `for` loop.\n-            if let ExprKind::Closure { body, .. } = for_each_arg.kind;\n+            if let ExprKind::Closure(&Closure { body, .. }) = for_each_arg.kind;\n             let body = cx.tcx.hir().body(body);\n             if let ExprKind::Block(..) = body.value.kind;\n             then {"}, {"sha": "0cbef1c95fe95ba4a15b565d2cbc147593cf6b50", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -13,7 +13,7 @@ use rustc_hir::{HirIdMap, HirIdSet};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::mir::FakeReadCause;\n-use rustc_middle::ty::{self, TypeFoldable};\n+use rustc_middle::ty::{self, TypeVisitable};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::kw;\n use rustc_span::{sym, Span};"}, {"sha": "819646bb6780e98099d405f0a1bd8993de003393", "filename": "clippy_lints/src/no_effect.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fno_effect.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -92,6 +92,7 @@ fn check_no_effect(cx: &LateContext<'_>, stmt: &Stmt<'_>) -> bool {\n         if_chain! {\n             if !is_lint_allowed(cx, NO_EFFECT_UNDERSCORE_BINDING, local.hir_id);\n             if let Some(init) = local.init;\n+            if local.els.is_none();\n             if !local.pat.span.from_expansion();\n             if has_no_effect(cx, init);\n             if let PatKind::Binding(_, _, ident, _) = local.pat.kind;"}, {"sha": "6bce5fbd4c1fecf24cb1144fa812569186834f26", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -148,7 +148,7 @@ fn is_value_unfrozen_raw<'tcx>(\n         match val.ty().kind() {\n             // the fact that we have to dig into every structs to search enums\n             // leads us to the point checking `UnsafeCell` directly is the only option.\n-            ty::Adt(ty_def, ..) if Some(ty_def.did()) == cx.tcx.lang_items().unsafe_cell_type() => true,\n+            ty::Adt(ty_def, ..) if ty_def.is_unsafe_cell() => true,\n             ty::Array(..) | ty::Adt(..) | ty::Tuple(..) => {\n                 let val = cx.tcx.destructure_mir_constant(cx.param_env, val);\n                 val.fields.iter().any(|field| inner(cx, *field))"}, {"sha": "413a740be25a529c0fe8fb64361dd38d567de634", "filename": "clippy_lints/src/only_used_in_recursion.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fonly_used_in_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fonly_used_in_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fonly_used_in_recursion.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -11,8 +11,8 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::definitions::{DefPathData, DisambiguatedDefPathData};\n use rustc_hir::intravisit::{walk_expr, walk_stmt, FnKind, Visitor};\n use rustc_hir::{\n-    Arm, Block, Body, Expr, ExprKind, Guard, HirId, ImplicitSelfKind, Let, Local, Pat, PatKind, Path, PathSegment,\n-    QPath, Stmt, StmtKind, TyKind, UnOp,\n+    Arm, Block, Body, Closure, Expr, ExprKind, Guard, HirId, ImplicitSelfKind, Let, Local, Pat, PatKind, Path,\n+    PathSegment, QPath, Stmt, StmtKind, TyKind, UnOp,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n@@ -298,7 +298,7 @@ impl<'tcx> Visitor<'tcx> for SideEffectVisit<'tcx> {\n             },\n             ExprKind::Match(expr, arms, _) => self.visit_match(expr, arms),\n             // since analysing the closure is not easy, just set all variables in it to side-effect\n-            ExprKind::Closure { body, .. } => {\n+            ExprKind::Closure(&Closure { body, .. }) => {\n                 let body = self.tcx.hir().body(body);\n                 self.visit_body(body);\n                 let vars = std::mem::take(&mut self.ret_vars);"}, {"sha": "b6097710dc689064c317e9827b945bbd69d41492", "filename": "clippy_lints/src/operators/numeric_arithmetic.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Foperators%2Fnumeric_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Foperators%2Fnumeric_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Fnumeric_arithmetic.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -96,11 +96,12 @@ impl Context {\n     }\n \n     pub fn enter_body(&mut self, cx: &LateContext<'_>, body: &hir::Body<'_>) {\n-        let body_owner = cx.tcx.hir().body_owner_def_id(body.id());\n+        let body_owner = cx.tcx.hir().body_owner(body.id());\n+        let body_owner_def_id = cx.tcx.hir().local_def_id(body_owner);\n \n-        match cx.tcx.hir().body_owner_kind(body_owner) {\n+        match cx.tcx.hir().body_owner_kind(body_owner_def_id) {\n             hir::BodyOwnerKind::Static(_) | hir::BodyOwnerKind::Const => {\n-                let body_span = cx.tcx.def_span(body_owner);\n+                let body_span = cx.tcx.hir().span_with_body(body_owner);\n \n                 if let Some(span) = self.const_span {\n                     if span.contains(body_span) {\n@@ -115,7 +116,7 @@ impl Context {\n \n     pub fn body_post(&mut self, cx: &LateContext<'_>, body: &hir::Body<'_>) {\n         let body_owner = cx.tcx.hir().body_owner(body.id());\n-        let body_span = cx.tcx.hir().span(body_owner);\n+        let body_span = cx.tcx.hir().span_with_body(body_owner);\n \n         if let Some(span) = self.const_span {\n             if span.contains(body_span) {"}, {"sha": "8534d8a29f10df201bd146ded37be1afdb409dbe", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -495,12 +495,13 @@ fn check_mut_from_ref<'tcx>(cx: &LateContext<'tcx>, sig: &FnSig<'_>, body: Optio\n     if let FnRetTy::Return(ty) = sig.decl.output\n         && let Some((out, Mutability::Mut, _)) = get_rptr_lm(ty)\n     {\n+        let out_region = cx.tcx.named_region(out.hir_id);\n         let args: Option<Vec<_>> = sig\n             .decl\n             .inputs\n             .iter()\n             .filter_map(get_rptr_lm)\n-            .filter(|&(lt, _, _)| lt.name == out.name)\n+            .filter(|&(lt, _, _)| cx.tcx.named_region(lt.hir_id) == out_region)\n             .map(|(_, mutability, span)| (mutability == Mutability::Not).then_some(span))\n             .collect();\n         if let Some(args) = args"}, {"sha": "eddca60457574822fb1917afc8fc9ac81f3233ce", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -14,7 +14,7 @@ use rustc_middle::mir::{\n     visit::{MutatingUseContext, NonMutatingUseContext, PlaceContext, Visitor as _},\n     Mutability,\n };\n-use rustc_middle::ty::{self, fold::TypeVisitor, Ty};\n+use rustc_middle::ty::{self, visit::TypeVisitor, Ty};\n use rustc_mir_dataflow::{Analysis, AnalysisDomain, CallReturnPlaces, GenKill, GenKillAnalysis, ResultsCursor};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::{BytePos, Span};\n@@ -161,7 +161,7 @@ impl<'tcx> LateLintPass<'tcx> for RedundantClone {\n                 // `arg` is a reference as it is `.deref()`ed in the previous block.\n                 // Look into the predecessor block and find out the source of deref.\n \n-                let ps = &mir.predecessors()[bb];\n+                let ps = &mir.basic_blocks.predecessors()[bb];\n                 if ps.len() != 1 {\n                     continue;\n                 }"}, {"sha": "f5a93cebab8ca65707c1151a85346c34081a071c", "filename": "clippy_lints/src/redundant_closure_call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fredundant_closure_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fredundant_closure_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_closure_call.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -69,7 +69,7 @@ impl EarlyLintPass for RedundantClosureCall {\n         if_chain! {\n             if let ast::ExprKind::Call(ref paren, _) = expr.kind;\n             if let ast::ExprKind::Paren(ref closure) = paren.kind;\n-            if let ast::ExprKind::Closure(_, _, _, ref decl, ref block, _) = closure.kind;\n+            if let ast::ExprKind::Closure(_, _, _, _, ref decl, ref block, _) = closure.kind;\n             then {\n                 let mut visitor = ReturnVisitor::new();\n                 visitor.visit_expr(block);"}, {"sha": "1d9a2abf7066c8819b61a42faacde644a72eb94a", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -10,7 +10,6 @@ use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::hygiene::DesugaringKind;\n use rustc_span::source_map::Span;\n use rustc_span::sym;\n \n@@ -203,9 +202,7 @@ fn check_final_expr<'tcx>(\n                 check_block_return(cx, ifblock);\n             }\n             if let Some(else_clause) = else_clause_opt {\n-                if expr.span.desugaring_kind() != Some(DesugaringKind::LetElse) {\n-                    check_final_expr(cx, else_clause, None, RetReplacement::Empty);\n-                }\n+                check_final_expr(cx, else_clause, None, RetReplacement::Empty);\n             }\n         },\n         // a match expr, check all arms"}, {"sha": "fe8859905953ff0fb35b870e71e1bfab8eb493be", "filename": "clippy_lints/src/suspicious_operation_groupings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -582,7 +582,7 @@ fn ident_difference_expr_with_base_location(\n         | (Await(_), Await(_))\n         | (Async(_, _, _), Async(_, _, _))\n         | (Block(_, _), Block(_, _))\n-        | (Closure(_, _, _, _, _, _), Closure(_, _, _, _, _, _))\n+        | (Closure(_, _, _, _, _, _, _), Closure(_, _, _, _, _, _, _))\n         | (Match(_, _), Match(_, _))\n         | (Loop(_, _), Loop(_, _))\n         | (ForLoop(_, _, _, _), ForLoop(_, _, _, _))"}, {"sha": "5eb03275b8ec1663e5061618c95dd9d63e1e9443", "filename": "clippy_lints/src/transmute/transmute_ptr_to_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ptr_to_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ptr_to_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ptr_to_ref.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -5,7 +5,7 @@ use clippy_utils::{meets_msrv, msrvs, sugg};\n use rustc_errors::Applicability;\n use rustc_hir::{self as hir, Expr, GenericArg, Mutability, Path, TyKind};\n use rustc_lint::LateContext;\n-use rustc_middle::ty::{self, Ty, TypeFoldable};\n+use rustc_middle::ty::{self, Ty, TypeVisitable};\n use rustc_semver::RustcVersion;\n \n /// Checks for `transmute_ptr_to_ref` lint."}, {"sha": "8122cd716e01183a362b4a091b23fbf8d1d150c1", "filename": "clippy_lints/src/transmute/useless_transmute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Ftransmute%2Fuseless_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Ftransmute%2Fuseless_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Fuseless_transmute.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -4,7 +4,7 @@ use clippy_utils::sugg;\n use rustc_errors::Applicability;\n use rustc_hir::Expr;\n use rustc_lint::LateContext;\n-use rustc_middle::ty::{self, Ty, TypeFoldable};\n+use rustc_middle::ty::{self, Ty, TypeVisitable};\n \n /// Checks for `useless_transmute` lint.\n /// Returns `true` if it's triggered, otherwise returns `false`."}, {"sha": "94945b2e1a9e250fe64c6a4958108dd79d9070e6", "filename": "clippy_lints/src/types/borrowed_box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Ftypes%2Fborrowed_box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Ftypes%2Fborrowed_box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fborrowed_box.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -31,7 +31,7 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, lt: &Lifetime, m\n                         return false;\n                     }\n \n-                    let ltopt = if lt.is_elided() {\n+                    let ltopt = if lt.name.is_anonymous() {\n                         String::new()\n                     } else {\n                         format!(\"{} \", lt.name.ident().as_str())"}, {"sha": "b2f536ca7815b7e155f4dfc5a4052dceebdb97ce", "filename": "clippy_lints/src/types/vec_box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Ftypes%2Fvec_box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Ftypes%2Fvec_box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fvec_box.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -6,7 +6,7 @@ use rustc_errors::Applicability;\n use rustc_hir::{self as hir, def_id::DefId, GenericArg, QPath, TyKind};\n use rustc_lint::LateContext;\n use rustc_middle::ty::layout::LayoutOf;\n-use rustc_middle::ty::TypeFoldable;\n+use rustc_middle::ty::TypeVisitable;\n use rustc_span::symbol::sym;\n use rustc_typeck::hir_ty_to_ty;\n "}, {"sha": "b0fce91abeb7d3fd44cd750321140aafa1d97454", "filename": "clippy_lints/src/unit_return_expecting_ord.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -2,7 +2,7 @@ use clippy_utils::diagnostics::{span_lint, span_lint_and_help};\n use clippy_utils::{get_trait_def_id, paths};\n use if_chain::if_chain;\n use rustc_hir::def_id::DefId;\n-use rustc_hir::{Expr, ExprKind, StmtKind};\n+use rustc_hir::{Closure, Expr, ExprKind, StmtKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n use rustc_middle::ty::{GenericPredicates, PredicateKind, ProjectionPredicate, TraitPredicate};\n@@ -116,7 +116,7 @@ fn get_args_to_check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) -> Ve\n \n fn check_arg<'tcx>(cx: &LateContext<'tcx>, arg: &'tcx Expr<'tcx>) -> Option<(Span, Option<Span>)> {\n     if_chain! {\n-        if let ExprKind::Closure { body, fn_decl_span, .. } = arg.kind;\n+        if let ExprKind::Closure(&Closure { body, fn_decl_span, .. }) = arg.kind;\n         if let ty::Closure(_def_id, substs) = &cx.typeck_results().node_type(arg.hir_id).kind();\n         let ret_ty = substs.as_closure().sig().output();\n         let ty = cx.tcx.erase_late_bound_regions(ret_ty);"}, {"sha": "ea5aadbbca1c614e597ed843bedbf3de09267db3", "filename": "clippy_lints/src/unnecessary_sort_by.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Funnecessary_sort_by.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Funnecessary_sort_by.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_sort_by.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -3,7 +3,7 @@ use clippy_utils::sugg::Sugg;\n use clippy_utils::ty::{implements_trait, is_type_diagnostic_item};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n-use rustc_hir::{Expr, ExprKind, Mutability, Param, Pat, PatKind, Path, PathSegment, QPath};\n+use rustc_hir::{Closure, Expr, ExprKind, Mutability, Param, Pat, PatKind, Path, PathSegment, QPath};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::{self, subst::GenericArgKind};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -155,7 +155,7 @@ fn detect_lint(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<LintTrigger> {\n         if let ExprKind::MethodCall(name_ident, args, _) = &expr.kind;\n         if let name = name_ident.ident.name.to_ident_string();\n         if name == \"sort_by\" || name == \"sort_unstable_by\";\n-        if let [vec, Expr { kind: ExprKind::Closure{ body: closure_body_id, .. }, .. }] = args;\n+        if let [vec, Expr { kind: ExprKind::Closure(Closure { body: closure_body_id, .. }), .. }] = args;\n         if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(vec), sym::Vec);\n         if let closure_body = cx.tcx.hir().body(*closure_body_id);\n         if let &["}, {"sha": "bbb04c9945a09871bbb8f16acab81419d08c73a6", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -6,7 +6,7 @@ use rustc_ast::ast::{LitFloatType, LitKind};\n use rustc_ast::LitIntType;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n-use rustc_hir::{ArrayLen, ExprKind, FnRetTy, HirId, Lit, PatKind, QPath, StmtKind, TyKind};\n+use rustc_hir::{ArrayLen, Closure, ExprKind, FnRetTy, HirId, Lit, PatKind, QPath, StmtKind, TyKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::{Ident, Symbol};\n@@ -466,13 +466,13 @@ impl<'a, 'tcx> PrintVisitor<'a, 'tcx> {\n                 self.expr(scrutinee);\n                 self.slice(arms, |arm| self.arm(arm));\n             },\n-            ExprKind::Closure {\n+            ExprKind::Closure(&Closure {\n                 capture_clause,\n                 fn_decl,\n                 body: body_id,\n                 movability,\n                 ..\n-            } => {\n+            }) => {\n                 let movability = OptionPat::new(movability.map(|m| format!(\"Movability::{m:?}\")));\n \n                 let ret_ty = match fn_decl.output {"}, {"sha": "b309653291b11ce58d3d1d3a45eb696705490cbd", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -20,8 +20,8 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::hir_id::CRATE_HIR_ID;\n use rustc_hir::intravisit::Visitor;\n use rustc_hir::{\n-    BinOpKind, Block, Expr, ExprKind, HirId, Item, Local, MutTy, Mutability, Node, Path, Stmt, StmtKind, Ty, TyKind,\n-    UnOp,\n+    BinOpKind, Block, Closure, Expr, ExprKind, HirId, Item, Local, MutTy, Mutability, Node, Path, Stmt, StmtKind, Ty,\n+    TyKind, UnOp,\n };\n use rustc_lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext};\n use rustc_middle::hir::nested_filter;\n@@ -730,8 +730,8 @@ impl<'tcx> LateLintPass<'tcx> for CollapsibleCalls {\n             if let ExprKind::Call(func, and_then_args) = expr.kind;\n             if is_expr_path_def_path(cx, func, &[\"clippy_utils\", \"diagnostics\", \"span_lint_and_then\"]);\n             if and_then_args.len() == 5;\n-            if let ExprKind::Closure { body, .. } = &and_then_args[4].kind;\n-            let body = cx.tcx.hir().body(*body);\n+            if let ExprKind::Closure(&Closure { body, .. }) = &and_then_args[4].kind;\n+            let body = cx.tcx.hir().body(body);\n             let only_expr = peel_blocks_with_stmt(&body.value);\n             if let ExprKind::MethodCall(ps, span_call_args, _) = &only_expr.kind;\n             if let ExprKind::Path(..) = span_call_args[0].kind;"}, {"sha": "92934c16d4b406a252e121355671e60dfc425dbe", "filename": "clippy_lints/src/utils/internal_lints/metadata_collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -17,7 +17,7 @@ use if_chain::if_chain;\n use rustc_ast as ast;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::{\n-    self as hir, def::DefKind, intravisit, intravisit::Visitor, ExprKind, Item, ItemKind, Mutability, QPath,\n+    self as hir, def::DefKind, intravisit, intravisit::Visitor, Closure, ExprKind, Item, ItemKind, Mutability, QPath,\n };\n use rustc_lint::{CheckLintNameResult, LateContext, LateLintPass, LintContext, LintId};\n use rustc_middle::hir::nested_filter;\n@@ -958,7 +958,7 @@ fn resolve_applicability<'hir>(cx: &LateContext<'hir>, expr: &'hir hir::Expr<'hi\n }\n \n fn check_is_multi_part<'hir>(cx: &LateContext<'hir>, closure_expr: &'hir hir::Expr<'hir>) -> bool {\n-    if let ExprKind::Closure { body, .. } = closure_expr.kind {\n+    if let ExprKind::Closure(&Closure { body, .. }) = closure_expr.kind {\n         let mut scanner = IsMultiSpanScanner::new(cx);\n         intravisit::walk_body(&mut scanner, cx.tcx.hir().body(body));\n         return scanner.is_multi_part();"}, {"sha": "8dc43c0e29436d369b05d50d0880da07477352b3", "filename": "clippy_lints/src/zero_sized_map_values.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fzero_sized_map_values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_lints%2Fsrc%2Fzero_sized_map_values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fzero_sized_map_values.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -4,7 +4,7 @@ use if_chain::if_chain;\n use rustc_hir::{self as hir, HirId, ItemKind, Node};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::layout::LayoutOf as _;\n-use rustc_middle::ty::{Adt, Ty, TypeFoldable};\n+use rustc_middle::ty::{Adt, Ty, TypeVisitable};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n use rustc_typeck::hir_ty_to_ty;"}, {"sha": "b226026323be835a7f5be3231f8fe70f491bdc80", "filename": "clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fast_utils.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -168,8 +168,13 @@ pub fn eq_expr(l: &Expr, r: &Expr) -> bool {\n         (AssignOp(lo, lp, lv), AssignOp(ro, rp, rv)) => lo.node == ro.node && eq_expr(lp, rp) && eq_expr(lv, rv),\n         (Field(lp, lf), Field(rp, rf)) => eq_id(*lf, *rf) && eq_expr(lp, rp),\n         (Match(ls, la), Match(rs, ra)) => eq_expr(ls, rs) && over(la, ra, eq_arm),\n-        (Closure(lc, la, lm, lf, lb, _), Closure(rc, ra, rm, rf, rb, _)) => {\n-            lc == rc && la.is_async() == ra.is_async() && lm == rm && eq_fn_decl(lf, rf) && eq_expr(lb, rb)\n+        (Closure(lb, lc, la, lm, lf, le, _), Closure(rb, rc, ra, rm, rf, re, _)) => {\n+            eq_closure_binder(lb, rb)\n+                && lc == rc\n+                && la.is_async() == ra.is_async()\n+                && lm == rm\n+                && eq_fn_decl(lf, rf)\n+                && eq_expr(le, re)\n         },\n         (Async(lc, _, lb), Async(rc, _, rb)) => lc == rc && eq_block(lb, rb),\n         (Range(lf, lt, ll), Range(rf, rt, rl)) => ll == rl && eq_expr_opt(lf, rf) && eq_expr_opt(lt, rt),\n@@ -561,6 +566,16 @@ pub fn eq_fn_decl(l: &FnDecl, r: &FnDecl) -> bool {\n         })\n }\n \n+pub fn eq_closure_binder(l: &ClosureBinder, r: &ClosureBinder) -> bool {\n+    match (l, r) {\n+        (ClosureBinder::NotPresent, ClosureBinder::NotPresent) => true,\n+        (ClosureBinder::For { generic_params: lp, .. }, ClosureBinder::For { generic_params: rp, .. }) => {\n+            lp.len() == rp.len() && std::iter::zip(lp.iter(), rp.iter()).all(|(l, r)| eq_generic_param(l, r))\n+        },\n+        _ => false,\n+    }\n+}\n+\n pub fn eq_fn_ret_ty(l: &FnRetTy, r: &FnRetTy) -> bool {\n     match (l, r) {\n         (FnRetTy::Default(_), FnRetTy::Default(_)) => true,\n@@ -600,8 +615,8 @@ pub fn eq_ty(l: &Ty, r: &Ty) -> bool {\n pub fn eq_ext(l: &Extern, r: &Extern) -> bool {\n     use Extern::*;\n     match (l, r) {\n-        (None, None) | (Implicit, Implicit) => true,\n-        (Explicit(l), Explicit(r)) => eq_str_lit(l, r),\n+        (None, None) | (Implicit(_), Implicit(_)) => true,\n+        (Explicit(l, _), Explicit(r, _)) => eq_str_lit(l, r),\n         _ => false,\n     }\n }"}, {"sha": "77c974582ecb0e9b604f3e8ac432399a215efbe6", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -6,9 +6,9 @@ use rustc_data_structures::fx::FxHasher;\n use rustc_hir::def::Res;\n use rustc_hir::HirIdMap;\n use rustc_hir::{\n-    ArrayLen, BinOpKind, Block, BodyId, Expr, ExprField, ExprKind, FnRetTy, GenericArg, GenericArgs, Guard, HirId,\n-    InlineAsmOperand, Let, Lifetime, LifetimeName, ParamName, Pat, PatField, PatKind, Path, PathSegment, QPath, Stmt,\n-    StmtKind, Ty, TyKind, TypeBinding,\n+    ArrayLen, BinOpKind, Block, BodyId, Closure, Expr, ExprField, ExprKind, FnRetTy, GenericArg, GenericArgs, Guard,\n+    HirId, InlineAsmOperand, Let, Lifetime, LifetimeName, ParamName, Pat, PatField, PatKind, Path, PathSegment, QPath,\n+    Stmt, StmtKind, Ty, TyKind, TypeBinding,\n };\n use rustc_lexer::{tokenize, TokenKind};\n use rustc_lint::LateContext;\n@@ -117,6 +117,7 @@ impl HirEqInterExpr<'_, '_, '_> {\n                 // these only get added if the init and type is equal.\n                 both(&l.init, &r.init, |l, r| self.eq_expr(l, r))\n                     && both(&l.ty, &r.ty, |l, r| self.eq_ty(l, r))\n+                    && both(&l.els, &r.els, |l, r| self.eq_block(l, r))\n                     && self.eq_pat(l.pat, r.pat)\n             },\n             (&StmtKind::Expr(l), &StmtKind::Expr(r)) | (&StmtKind::Semi(l), &StmtKind::Semi(r)) => self.eq_expr(l, r),\n@@ -662,9 +663,9 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                 self.hash_expr(e);\n                 self.hash_ty(ty);\n             },\n-            ExprKind::Closure {\n+            ExprKind::Closure(&Closure {\n                 capture_clause, body, ..\n-            } => {\n+            }) => {\n                 std::mem::discriminant(&capture_clause).hash(&mut self.s);\n                 // closures inherit TypeckResults\n                 self.hash_expr(&self.cx.tcx.hir().body(body).value);\n@@ -926,6 +927,9 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                 if let Some(init) = local.init {\n                     self.hash_expr(init);\n                 }\n+                if let Some(els) = local.els {\n+                    self.hash_block(els);\n+                }\n             },\n             StmtKind::Item(..) => {},\n             StmtKind::Expr(expr) | StmtKind::Semi(expr) => {"}, {"sha": "46c5c2eef5675f2dd661731fc80d5cf8f74b3b68", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -79,10 +79,10 @@ use rustc_hir::hir_id::{HirIdMap, HirIdSet};\n use rustc_hir::intravisit::{walk_expr, FnKind, Visitor};\n use rustc_hir::LangItem::{OptionNone, ResultErr, ResultOk};\n use rustc_hir::{\n-    def, Arm, ArrayLen, BindingAnnotation, Block, BlockCheckMode, Body, Constness, Destination, Expr, ExprKind, FnDecl,\n-    HirId, Impl, ImplItem, ImplItemKind, IsAsync, Item, ItemKind, LangItem, Local, MatchSource, Mutability, Node,\n-    Param, Pat, PatKind, Path, PathSegment, PrimTy, QPath, Stmt, StmtKind, TraitItem, TraitItemKind, TraitRef, TyKind,\n-    UnOp,\n+    def, Arm, ArrayLen, BindingAnnotation, Block, BlockCheckMode, Body, Closure, Constness, Destination, Expr,\n+    ExprKind, FnDecl, HirId, Impl, ImplItem, ImplItemKind, IsAsync, Item, ItemKind, LangItem, Local, MatchSource,\n+    Mutability, Node, Param, Pat, PatKind, Path, PathSegment, PrimTy, QPath, Stmt, StmtKind, TraitItem, TraitItemKind,\n+    TraitRef, TyKind, UnOp,\n };\n use rustc_lint::{LateContext, Level, Lint, LintContext};\n use rustc_middle::hir::place::PlaceBase;\n@@ -94,7 +94,7 @@ use rustc_middle::ty::fast_reject::SimplifiedTypeGen::{\n     PtrSimplifiedType, SliceSimplifiedType, StrSimplifiedType, UintSimplifiedType,\n };\n use rustc_middle::ty::{\n-    layout::IntegerExt, BorrowKind, ClosureKind, DefIdTree, Ty, TyCtxt, TypeAndMut, TypeFoldable, UpvarCapture,\n+    layout::IntegerExt, BorrowKind, ClosureKind, DefIdTree, Ty, TyCtxt, TypeAndMut, TypeVisitable, UpvarCapture,\n };\n use rustc_middle::ty::{FloatTy, IntTy, UintTy};\n use rustc_semver::RustcVersion;\n@@ -185,7 +185,7 @@ pub fn expr_or_init<'a, 'b, 'tcx: 'b>(cx: &LateContext<'tcx>, mut expr: &'a Expr\n pub fn find_binding_init<'tcx>(cx: &LateContext<'tcx>, hir_id: HirId) -> Option<&'tcx Expr<'tcx>> {\n     let hir = cx.tcx.hir();\n     if_chain! {\n-        if let Some(Node::Binding(pat)) = hir.find(hir_id);\n+        if let Some(Node::Pat(pat)) = hir.find(hir_id);\n         if matches!(pat.kind, PatKind::Binding(BindingAnnotation::Unannotated, ..));\n         let parent = hir.get_parent_node(hir_id);\n         if let Some(Node::Local(local)) = hir.find(parent);\n@@ -1739,7 +1739,7 @@ pub fn get_async_fn_body<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'_>) -> Option<&'t\n         _,\n         &[\n             Expr {\n-                kind: ExprKind::Closure { body, .. },\n+                kind: ExprKind::Closure(&Closure { body, .. }),\n                 ..\n             },\n         ],\n@@ -1826,7 +1826,7 @@ pub fn is_expr_identity_function(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool\n     }\n \n     match expr.kind {\n-        ExprKind::Closure { body, .. } => is_body_identity_function(cx, cx.tcx.hir().body(body)),\n+        ExprKind::Closure(&Closure { body, .. }) => is_body_identity_function(cx, cx.tcx.hir().body(body)),\n         _ => path_def_id(cx, expr).map_or(false, |id| match_def_path(cx, id, &paths::CONVERT_IDENTITY)),\n     }\n }"}, {"sha": "3bf75bcbee83e85d779b96ba2478d91b76d96450", "filename": "clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -124,6 +124,7 @@ fn check_rvalue<'tcx>(\n         Rvalue::Len(place) | Rvalue::Discriminant(place) | Rvalue::Ref(_, _, place) | Rvalue::AddressOf(_, place) => {\n             check_place(tcx, *place, span, body)\n         },\n+        Rvalue::CopyForDeref(place) => check_place(tcx, *place, span, body),\n         Rvalue::Repeat(operand, _)\n         | Rvalue::Use(operand)\n         | Rvalue::Cast(\n@@ -353,7 +354,7 @@ fn check_terminator<'a, 'tcx>(\n fn is_const_fn(tcx: TyCtxt<'_>, def_id: DefId, msrv: Option<RustcVersion>) -> bool {\n     tcx.is_const_fn(def_id)\n         && tcx.lookup_const_stability(def_id).map_or(true, |const_stab| {\n-            if let rustc_attr::StabilityLevel::Stable { since } = const_stab.level {\n+            if let rustc_attr::StabilityLevel::Stable { since, .. } = const_stab.level {\n                 // Checking MSRV is manually necessary because `rustc` has no such concept. This entire\n                 // function could be removed if `rustc` provided a MSRV-aware version of `is_const_fn`.\n                 // as a part of an unimplemented MSRV check https://github.com/rust-lang/rust/issues/65262."}, {"sha": "bad291dfc2513f6a0318437107dff89432b03e55", "filename": "clippy_utils/src/sugg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsugg.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -9,7 +9,7 @@ use rustc_ast::{ast, token};\n use rustc_ast_pretty::pprust::token_kind_to_string;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n-use rustc_hir::{ExprKind, HirId, MutTy, TyKind};\n+use rustc_hir::{Closure, ExprKind, HirId, MutTy, TyKind};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{EarlyContext, LateContext, LintContext};\n use rustc_middle::hir::place::ProjectionKind;\n@@ -790,7 +790,7 @@ pub struct DerefClosure {\n ///\n /// note: this only works on single line immutable closures with exactly one input parameter.\n pub fn deref_closure_args<'tcx>(cx: &LateContext<'_>, closure: &'tcx hir::Expr<'_>) -> Option<DerefClosure> {\n-    if let hir::ExprKind::Closure { fn_decl, body, .. } = closure.kind {\n+    if let hir::ExprKind::Closure(&Closure { fn_decl, body, .. }) = closure.kind {\n         let closure_body = cx.tcx.hir().body(body);\n         // is closure arg a type annotated double reference (i.e.: `|x: &&i32| ...`)\n         // a type annotation is present if param `kind` is different from `TyKind::Infer`"}, {"sha": "a05d633d980c3247b18f9e94140d379a80dd9c9c", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -15,7 +15,7 @@ use rustc_middle::mir::interpret::{ConstValue, Scalar};\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, Subst};\n use rustc_middle::ty::{\n     self, AdtDef, Binder, BoundRegion, DefIdTree, FnSig, IntTy, ParamEnv, Predicate, PredicateKind, ProjectionTy,\n-    Region, RegionKind, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable, TypeVisitor, UintTy, VariantDef, VariantDiscr,\n+    Region, RegionKind, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor, UintTy, VariantDef, VariantDiscr,\n };\n use rustc_span::symbol::Ident;\n use rustc_span::{sym, Span, Symbol, DUMMY_SP};\n@@ -773,7 +773,7 @@ pub fn for_each_top_level_late_bound_region<B>(\n                 ControlFlow::Continue(())\n             }\n         }\n-        fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &Binder<'tcx, T>) -> ControlFlow<Self::BreakTy> {\n+        fn visit_binder<T: TypeVisitable<'tcx>>(&mut self, t: &Binder<'tcx, T>) -> ControlFlow<Self::BreakTy> {\n             self.index += 1;\n             let res = t.super_visit_with(self);\n             self.index -= 1;"}, {"sha": "e693e6837592fcaf0cf446016f11fdd3c6c173f2", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2022-06-30\"\n+channel = \"nightly-2022-07-15\"\n components = [\"cargo\", \"llvm-tools-preview\", \"rust-src\", \"rust-std\", \"rustc\", \"rustc-dev\", \"rustfmt\"]"}, {"sha": "c219c7de830efdd275e7f2e4d788bd4543b6ab82", "filename": "src/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -117,7 +117,7 @@ impl rustc_driver::Callbacks for ClippyCallbacks {\n         // run on the unoptimized MIR. On the other hand this results in some false negatives. If\n         // MIR passes can be enabled / disabled separately, we should figure out, what passes to\n         // use for Clippy.\n-        config.opts.debugging_opts.mir_opt_level = Some(0);\n+        config.opts.unstable_opts.mir_opt_level = Some(0);\n     }\n }\n "}, {"sha": "3615d07154dfb2d44d1f78c101475d0896675fd4", "filename": "tests/compile-test.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -23,7 +23,6 @@ const RUN_INTERNAL_TESTS: bool = cfg!(feature = \"internal\");\n \n /// All crates used in UI tests are listed here\n static TEST_DEPENDENCIES: &[&str] = &[\n-    \"clap\",\n     \"clippy_lints\",\n     \"clippy_utils\",\n     \"derive_new\",\n@@ -43,8 +42,6 @@ static TEST_DEPENDENCIES: &[&str] = &[\n // Test dependencies may need an `extern crate` here to ensure that they show up\n // in the depinfo file (otherwise cargo thinks they are unused)\n #[allow(unused_extern_crates)]\n-extern crate clap;\n-#[allow(unused_extern_crates)]\n extern crate clippy_lints;\n #[allow(unused_extern_crates)]\n extern crate clippy_utils;"}, {"sha": "8b137891791fe96927ad78e64b0aad7bded08bdc", "filename": "tests/ui-cargo/duplicate_mod/fail/src/d.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/tests%2Fui-cargo%2Fduplicate_mod%2Ffail%2Fsrc%2Fd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/tests%2Fui-cargo%2Fduplicate_mod%2Ffail%2Fsrc%2Fd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-cargo%2Fduplicate_mod%2Ffail%2Fsrc%2Fd.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -0,0 +1 @@\n+"}, {"sha": "6478e65ac81ad04b0ac79c4a553fc1a0486d8213", "filename": "tests/ui-cargo/duplicate_mod/fail/src/main.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/tests%2Fui-cargo%2Fduplicate_mod%2Ffail%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/tests%2Fui-cargo%2Fduplicate_mod%2Ffail%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-cargo%2Fduplicate_mod%2Ffail%2Fsrc%2Fmain.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -1,3 +1,5 @@\n+#![feature(lint_reasons)]\n+\n mod a;\n \n mod b;\n@@ -13,4 +15,14 @@ mod c3;\n mod from_other_module;\n mod other_module;\n \n+mod d;\n+#[path = \"d.rs\"]\n+mod d2;\n+#[path = \"d.rs\"]\n+#[expect(clippy::duplicate_mod)]\n+mod d3;\n+#[path = \"d.rs\"]\n+#[allow(clippy::duplicate_mod)]\n+mod d4;\n+\n fn main() {}"}, {"sha": "b450a2b18f25713eefe7c86857fe963ccf174c7e", "filename": "tests/ui-cargo/duplicate_mod/fail/src/main.stderr", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/tests%2Fui-cargo%2Fduplicate_mod%2Ffail%2Fsrc%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/tests%2Fui-cargo%2Fduplicate_mod%2Ffail%2Fsrc%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-cargo%2Fduplicate_mod%2Ffail%2Fsrc%2Fmain.stderr?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -1,5 +1,5 @@\n error: file is loaded as a module multiple times: `$DIR/b.rs`\n-  --> $DIR/main.rs:3:1\n+  --> $DIR/main.rs:5:1\n    |\n LL |   mod b;\n    |   ^^^^^^ first loaded here\n@@ -11,7 +11,7 @@ LL | | mod b2;\n    = help: replace all but one `mod` item with `use` items\n \n error: file is loaded as a module multiple times: `$DIR/c.rs`\n-  --> $DIR/main.rs:7:1\n+  --> $DIR/main.rs:9:1\n    |\n LL |   mod c;\n    |   ^^^^^^ first loaded here\n@@ -24,8 +24,19 @@ LL | | mod c3;\n    |\n    = help: replace all but one `mod` item with `use` items\n \n+error: file is loaded as a module multiple times: `$DIR/d.rs`\n+  --> $DIR/main.rs:18:1\n+   |\n+LL |   mod d;\n+   |   ^^^^^^ first loaded here\n+LL | / #[path = \"d.rs\"]\n+LL | | mod d2;\n+   | |_______^ loaded again here\n+   |\n+   = help: replace all but one `mod` item with `use` items\n+\n error: file is loaded as a module multiple times: `$DIR/from_other_module.rs`\n-  --> $DIR/main.rs:13:1\n+  --> $DIR/main.rs:15:1\n    |\n LL |   mod from_other_module;\n    |   ^^^^^^^^^^^^^^^^^^^^^^ first loaded here\n@@ -38,5 +49,5 @@ LL | | mod m;\n    |\n    = help: replace all but one `mod` item with `use` items\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n "}, {"sha": "8da2965c6351266b3e80fe480be82b02428e3924", "filename": "tests/ui/crashes/ice-6251.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/tests%2Fui%2Fcrashes%2Fice-6251.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/tests%2Fui%2Fcrashes%2Fice-6251.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-6251.stderr?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -33,7 +33,7 @@ LL | fn bug<T>() -> impl Iterator<Item = [(); { |x: [u8]| x }]> {\n    |                                            ^^^^^^^^^^^ expected `usize`, found closure\n    |\n    = note: expected type `usize`\n-           found closure `[closure@$DIR/ice-6251.rs:4:44: 4:55]`\n+           found closure `[closure@$DIR/ice-6251.rs:4:44: 4:53]`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "a1e37e7317b2e4b3b4a1578bc7e69dd71923cae2", "filename": "tests/ui/crashes/ice-6252.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/tests%2Fui%2Fcrashes%2Fice-6252.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/tests%2Fui%2Fcrashes%2Fice-6252.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-6252.stderr?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -25,10 +25,10 @@ error[E0046]: not all trait items implemented, missing: `VAL`\n   --> $DIR/ice-6252.rs:10:1\n    |\n LL |     const VAL: T;\n-   |     ------------- `VAL` from trait\n+   |     ------------ `VAL` from trait\n ...\n LL | impl<N, M> TypeVal<usize> for Multiply<N, M> where N: TypeVal<VAL> {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `VAL` in implementation\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `VAL` in implementation\n \n error: constant expression depends on a generic parameter\n   --> $DIR/ice-6252.rs:13:9"}, {"sha": "c629c0e535377ebf1b2e05ccd96c2a62fb8923dc", "filename": "tests/ui/derive.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/tests%2Fui%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/tests%2Fui%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderive.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -1,4 +1,3 @@\n-#![feature(untagged_unions)]\n #![allow(dead_code)]\n #![warn(clippy::expl_impl_clone_on_copy)]\n "}, {"sha": "fabfd02539226e3c2cc731fd350929b7dfdf1585", "filename": "tests/ui/derive.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/tests%2Fui%2Fderive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/tests%2Fui%2Fderive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderive.stderr?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -1,5 +1,5 @@\n error: you are implementing `Clone` explicitly on a `Copy` type\n-  --> $DIR/derive.rs:8:1\n+  --> $DIR/derive.rs:7:1\n    |\n LL | / impl Clone for Qux {\n LL | |     fn clone(&self) -> Self {\n@@ -10,7 +10,7 @@ LL | | }\n    |\n    = note: `-D clippy::expl-impl-clone-on-copy` implied by `-D warnings`\n note: consider deriving `Clone` or removing `Copy`\n-  --> $DIR/derive.rs:8:1\n+  --> $DIR/derive.rs:7:1\n    |\n LL | / impl Clone for Qux {\n LL | |     fn clone(&self) -> Self {\n@@ -20,7 +20,7 @@ LL | | }\n    | |_^\n \n error: you are implementing `Clone` explicitly on a `Copy` type\n-  --> $DIR/derive.rs:32:1\n+  --> $DIR/derive.rs:31:1\n    |\n LL | / impl<'a> Clone for Lt<'a> {\n LL | |     fn clone(&self) -> Self {\n@@ -30,7 +30,7 @@ LL | | }\n    | |_^\n    |\n note: consider deriving `Clone` or removing `Copy`\n-  --> $DIR/derive.rs:32:1\n+  --> $DIR/derive.rs:31:1\n    |\n LL | / impl<'a> Clone for Lt<'a> {\n LL | |     fn clone(&self) -> Self {\n@@ -40,7 +40,7 @@ LL | | }\n    | |_^\n \n error: you are implementing `Clone` explicitly on a `Copy` type\n-  --> $DIR/derive.rs:43:1\n+  --> $DIR/derive.rs:42:1\n    |\n LL | / impl Clone for BigArray {\n LL | |     fn clone(&self) -> Self {\n@@ -50,7 +50,7 @@ LL | | }\n    | |_^\n    |\n note: consider deriving `Clone` or removing `Copy`\n-  --> $DIR/derive.rs:43:1\n+  --> $DIR/derive.rs:42:1\n    |\n LL | / impl Clone for BigArray {\n LL | |     fn clone(&self) -> Self {\n@@ -60,7 +60,7 @@ LL | | }\n    | |_^\n \n error: you are implementing `Clone` explicitly on a `Copy` type\n-  --> $DIR/derive.rs:54:1\n+  --> $DIR/derive.rs:53:1\n    |\n LL | / impl Clone for FnPtr {\n LL | |     fn clone(&self) -> Self {\n@@ -70,7 +70,7 @@ LL | | }\n    | |_^\n    |\n note: consider deriving `Clone` or removing `Copy`\n-  --> $DIR/derive.rs:54:1\n+  --> $DIR/derive.rs:53:1\n    |\n LL | / impl Clone for FnPtr {\n LL | |     fn clone(&self) -> Self {\n@@ -80,7 +80,7 @@ LL | | }\n    | |_^\n \n error: you are implementing `Clone` explicitly on a `Copy` type\n-  --> $DIR/derive.rs:74:1\n+  --> $DIR/derive.rs:73:1\n    |\n LL | / impl<T: Clone> Clone for Generic2<T> {\n LL | |     fn clone(&self) -> Self {\n@@ -90,7 +90,7 @@ LL | | }\n    | |_^\n    |\n note: consider deriving `Clone` or removing `Copy`\n-  --> $DIR/derive.rs:74:1\n+  --> $DIR/derive.rs:73:1\n    |\n LL | / impl<T: Clone> Clone for Generic2<T> {\n LL | |     fn clone(&self) -> Self {"}, {"sha": "2a4abb0c5193aabda7946080b98322df565e5375", "filename": "tests/ui/derive_hash_xor_eq.stderr", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/tests%2Fui%2Fderive_hash_xor_eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/tests%2Fui%2Fderive_hash_xor_eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderive_hash_xor_eq.stderr?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -8,12 +8,8 @@ LL | #[derive(Hash)]\n note: `PartialEq` implemented here\n   --> $DIR/derive_hash_xor_eq.rs:15:1\n    |\n-LL | / impl PartialEq for Bar {\n-LL | |     fn eq(&self, _: &Bar) -> bool {\n-LL | |         true\n-LL | |     }\n-LL | | }\n-   | |_^\n+LL | impl PartialEq for Bar {\n+   | ^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: you are deriving `Hash` but have implemented `PartialEq` explicitly\n@@ -25,12 +21,8 @@ LL | #[derive(Hash)]\n note: `PartialEq` implemented here\n   --> $DIR/derive_hash_xor_eq.rs:24:1\n    |\n-LL | / impl PartialEq<Baz> for Baz {\n-LL | |     fn eq(&self, _: &Baz) -> bool {\n-LL | |         true\n-LL | |     }\n-LL | | }\n-   | |_^\n+LL | impl PartialEq<Baz> for Baz {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: you are implementing `Hash` explicitly but have derived `PartialEq`"}, {"sha": "baf8341aba908d1b409e60000241a4496d9b446e", "filename": "tests/ui/derive_ord_xor_partial_ord.stderr", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/tests%2Fui%2Fderive_ord_xor_partial_ord.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/tests%2Fui%2Fderive_ord_xor_partial_ord.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderive_ord_xor_partial_ord.stderr?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -8,12 +8,8 @@ LL | #[derive(Ord, PartialEq, Eq)]\n note: `PartialOrd` implemented here\n   --> $DIR/derive_ord_xor_partial_ord.rs:24:1\n    |\n-LL | / impl PartialOrd for DeriveOrd {\n-LL | |     fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n-LL | |         Some(other.cmp(self))\n-LL | |     }\n-LL | | }\n-   | |_^\n+LL | impl PartialOrd for DeriveOrd {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Ord` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: you are deriving `Ord` but have implemented `PartialOrd` explicitly\n@@ -25,12 +21,8 @@ LL | #[derive(Ord, PartialEq, Eq)]\n note: `PartialOrd` implemented here\n   --> $DIR/derive_ord_xor_partial_ord.rs:33:1\n    |\n-LL | / impl PartialOrd<DeriveOrdWithExplicitTypeVariable> for DeriveOrdWithExplicitTypeVariable {\n-LL | |     fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n-LL | |         Some(other.cmp(self))\n-LL | |     }\n-LL | | }\n-   | |_^\n+LL | impl PartialOrd<DeriveOrdWithExplicitTypeVariable> for DeriveOrdWithExplicitTypeVariable {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Ord` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: you are implementing `Ord` explicitly but have derived `PartialOrd`"}, {"sha": "38f33c53f128b87ec239bb45d30bd925f8e1c336", "filename": "tests/ui/needless_pass_by_value.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/tests%2Fui%2Fneedless_pass_by_value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/tests%2Fui%2Fneedless_pass_by_value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_pass_by_value.stderr?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -124,7 +124,7 @@ help: consider marking this type as `Copy`\n   --> $DIR/needless_pass_by_value.rs:123:1\n    |\n LL | struct CopyWrapper(u32);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^\n \n error: this argument is passed by value, but not consumed in the function body\n   --> $DIR/needless_pass_by_value.rs:131:29\n@@ -136,7 +136,7 @@ help: consider marking this type as `Copy`\n   --> $DIR/needless_pass_by_value.rs:123:1\n    |\n LL | struct CopyWrapper(u32);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^\n \n error: this argument is passed by value, but not consumed in the function body\n   --> $DIR/needless_pass_by_value.rs:131:45\n@@ -148,7 +148,7 @@ help: consider marking this type as `Copy`\n   --> $DIR/needless_pass_by_value.rs:123:1\n    |\n LL | struct CopyWrapper(u32);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^\n \n error: this argument is passed by value, but not consumed in the function body\n   --> $DIR/needless_pass_by_value.rs:131:61\n@@ -160,7 +160,7 @@ help: consider marking this type as `Copy`\n   --> $DIR/needless_pass_by_value.rs:123:1\n    |\n LL | struct CopyWrapper(u32);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^\n \n error: this argument is passed by value, but not consumed in the function body\n   --> $DIR/needless_pass_by_value.rs:143:40"}, {"sha": "fdefb11ae17a543f4f4c1cabdd4a1d88eddb36ad", "filename": "tests/ui/no_effect.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/tests%2Fui%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/tests%2Fui%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fno_effect.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -4,7 +4,6 @@\n #![allow(path_statements)]\n #![allow(clippy::deref_addrof)]\n #![allow(clippy::redundant_field_names)]\n-#![feature(untagged_unions)]\n \n struct Unit;\n struct Tuple(i32);"}, {"sha": "328d2555ceb8e98304485abf59f08d3ceda9cfaa", "filename": "tests/ui/no_effect.stderr", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/tests%2Fui%2Fno_effect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/tests%2Fui%2Fno_effect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fno_effect.stderr?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -1,183 +1,183 @@\n error: statement with no effect\n-  --> $DIR/no_effect.rs:95:5\n+  --> $DIR/no_effect.rs:94:5\n    |\n LL |     0;\n    |     ^^\n    |\n    = note: `-D clippy::no-effect` implied by `-D warnings`\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:96:5\n+  --> $DIR/no_effect.rs:95:5\n    |\n LL |     s2;\n    |     ^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:97:5\n+  --> $DIR/no_effect.rs:96:5\n    |\n LL |     Unit;\n    |     ^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:98:5\n+  --> $DIR/no_effect.rs:97:5\n    |\n LL |     Tuple(0);\n    |     ^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:99:5\n+  --> $DIR/no_effect.rs:98:5\n    |\n LL |     Struct { field: 0 };\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:100:5\n+  --> $DIR/no_effect.rs:99:5\n    |\n LL |     Struct { ..s };\n    |     ^^^^^^^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:101:5\n+  --> $DIR/no_effect.rs:100:5\n    |\n LL |     Union { a: 0 };\n    |     ^^^^^^^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:102:5\n+  --> $DIR/no_effect.rs:101:5\n    |\n LL |     Enum::Tuple(0);\n    |     ^^^^^^^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:103:5\n+  --> $DIR/no_effect.rs:102:5\n    |\n LL |     Enum::Struct { field: 0 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:104:5\n+  --> $DIR/no_effect.rs:103:5\n    |\n LL |     5 + 6;\n    |     ^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:105:5\n+  --> $DIR/no_effect.rs:104:5\n    |\n LL |     *&42;\n    |     ^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:106:5\n+  --> $DIR/no_effect.rs:105:5\n    |\n LL |     &6;\n    |     ^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:107:5\n+  --> $DIR/no_effect.rs:106:5\n    |\n LL |     (5, 6, 7);\n    |     ^^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:108:5\n+  --> $DIR/no_effect.rs:107:5\n    |\n LL |     box 42;\n    |     ^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:109:5\n+  --> $DIR/no_effect.rs:108:5\n    |\n LL |     ..;\n    |     ^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:110:5\n+  --> $DIR/no_effect.rs:109:5\n    |\n LL |     5..;\n    |     ^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:111:5\n+  --> $DIR/no_effect.rs:110:5\n    |\n LL |     ..5;\n    |     ^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:112:5\n+  --> $DIR/no_effect.rs:111:5\n    |\n LL |     5..6;\n    |     ^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:113:5\n+  --> $DIR/no_effect.rs:112:5\n    |\n LL |     5..=6;\n    |     ^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:114:5\n+  --> $DIR/no_effect.rs:113:5\n    |\n LL |     [42, 55];\n    |     ^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:115:5\n+  --> $DIR/no_effect.rs:114:5\n    |\n LL |     [42, 55][1];\n    |     ^^^^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:116:5\n+  --> $DIR/no_effect.rs:115:5\n    |\n LL |     (42, 55).1;\n    |     ^^^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:117:5\n+  --> $DIR/no_effect.rs:116:5\n    |\n LL |     [42; 55];\n    |     ^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:118:5\n+  --> $DIR/no_effect.rs:117:5\n    |\n LL |     [42; 55][13];\n    |     ^^^^^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:120:5\n+  --> $DIR/no_effect.rs:119:5\n    |\n LL |     || x += 5;\n    |     ^^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:122:5\n+  --> $DIR/no_effect.rs:121:5\n    |\n LL |     FooString { s: s };\n    |     ^^^^^^^^^^^^^^^^^^^\n \n error: binding to `_` prefixed variable with no side-effect\n-  --> $DIR/no_effect.rs:123:5\n+  --> $DIR/no_effect.rs:122:5\n    |\n LL |     let _unused = 1;\n    |     ^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::no-effect-underscore-binding` implied by `-D warnings`\n \n error: binding to `_` prefixed variable with no side-effect\n-  --> $DIR/no_effect.rs:124:5\n+  --> $DIR/no_effect.rs:123:5\n    |\n LL |     let _penguin = || println!(\"Some helpful closure\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: binding to `_` prefixed variable with no side-effect\n-  --> $DIR/no_effect.rs:125:5\n+  --> $DIR/no_effect.rs:124:5\n    |\n LL |     let _duck = Struct { field: 0 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: binding to `_` prefixed variable with no side-effect\n-  --> $DIR/no_effect.rs:126:5\n+  --> $DIR/no_effect.rs:125:5\n    |\n LL |     let _cat = [2, 4, 6, 8][2];\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "d20977d55d29de60b79fe9202716b827c917c21b", "filename": "tests/ui/used_underscore_binding.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/tests%2Fui%2Fused_underscore_binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/tests%2Fui%2Fused_underscore_binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fused_underscore_binding.rs?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -44,6 +44,12 @@ fn in_struct_field() {\n     s._underscore_field += 1;\n }\n \n+/// Tests that we do not lint if the struct field is used in code created with derive.\n+#[derive(Clone, Debug)]\n+pub struct UnderscoreInStruct {\n+    _foo: u32,\n+}\n+\n /// Tests that we do not lint if the underscore is not a prefix\n fn non_prefix_underscore(some_foo: u32) -> u32 {\n     some_foo + 1"}, {"sha": "61a9161d212da9a281d20bd840948e0dabc81763", "filename": "tests/ui/used_underscore_binding.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe6814508f283d2a4a7583eab2087b4a3356658a/tests%2Fui%2Fused_underscore_binding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe6814508f283d2a4a7583eab2087b4a3356658a/tests%2Fui%2Fused_underscore_binding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fused_underscore_binding.stderr?ref=fe6814508f283d2a4a7583eab2087b4a3356658a", "patch": "@@ -31,7 +31,7 @@ LL |     s._underscore_field += 1;\n    |     ^^^^^^^^^^^^^^^^^^^\n \n error: used binding `_i` which is prefixed with an underscore. A leading underscore signals that a binding will not be used\n-  --> $DIR/used_underscore_binding.rs:99:16\n+  --> $DIR/used_underscore_binding.rs:105:16\n    |\n LL |         uses_i(_i);\n    |                ^^"}]}