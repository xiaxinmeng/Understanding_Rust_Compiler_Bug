{"sha": "1624b00bde42a674c50a03e63868e8b4d08b6b49", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2MjRiMDBiZGU0MmE2NzRjNTBhMDNlNjM4NjhlOGI0ZDA4YjZiNDk=", "commit": {"author": {"name": "Takayuki Nakata", "email": "f.seasons017@gmail.com", "date": "2020-11-05T04:56:57Z"}, "committer": {"name": "Takayuki Nakata", "email": "f.seasons017@gmail.com", "date": "2020-11-05T23:40:43Z"}, "message": "Fix suggestion to add unneeded space in `manual_async`", "tree": {"sha": "ebae600531907632f503cd1ce3d586293895b0ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebae600531907632f503cd1ce3d586293895b0ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1624b00bde42a674c50a03e63868e8b4d08b6b49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1624b00bde42a674c50a03e63868e8b4d08b6b49", "html_url": "https://github.com/rust-lang/rust/commit/1624b00bde42a674c50a03e63868e8b4d08b6b49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1624b00bde42a674c50a03e63868e8b4d08b6b49/comments", "author": {"login": "giraffate", "id": 17407489, "node_id": "MDQ6VXNlcjE3NDA3NDg5", "avatar_url": "https://avatars.githubusercontent.com/u/17407489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/giraffate", "html_url": "https://github.com/giraffate", "followers_url": "https://api.github.com/users/giraffate/followers", "following_url": "https://api.github.com/users/giraffate/following{/other_user}", "gists_url": "https://api.github.com/users/giraffate/gists{/gist_id}", "starred_url": "https://api.github.com/users/giraffate/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/giraffate/subscriptions", "organizations_url": "https://api.github.com/users/giraffate/orgs", "repos_url": "https://api.github.com/users/giraffate/repos", "events_url": "https://api.github.com/users/giraffate/events{/privacy}", "received_events_url": "https://api.github.com/users/giraffate/received_events", "type": "User", "site_admin": false}, "committer": {"login": "giraffate", "id": 17407489, "node_id": "MDQ6VXNlcjE3NDA3NDg5", "avatar_url": "https://avatars.githubusercontent.com/u/17407489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/giraffate", "html_url": "https://github.com/giraffate", "followers_url": "https://api.github.com/users/giraffate/followers", "following_url": "https://api.github.com/users/giraffate/following{/other_user}", "gists_url": "https://api.github.com/users/giraffate/gists{/gist_id}", "starred_url": "https://api.github.com/users/giraffate/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/giraffate/subscriptions", "organizations_url": "https://api.github.com/users/giraffate/orgs", "repos_url": "https://api.github.com/users/giraffate/repos", "events_url": "https://api.github.com/users/giraffate/events{/privacy}", "received_events_url": "https://api.github.com/users/giraffate/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b20d4c155d2fe3a8391f86dcf9a8c49e17188703", "url": "https://api.github.com/repos/rust-lang/rust/commits/b20d4c155d2fe3a8391f86dcf9a8c49e17188703", "html_url": "https://github.com/rust-lang/rust/commit/b20d4c155d2fe3a8391f86dcf9a8c49e17188703"}], "stats": {"total": 125, "additions": 115, "deletions": 10}, "files": [{"sha": "e9d65abb44302192e62b7e12a0d91c9832d4c298", "filename": "clippy_lints/src/manual_async_fn.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1624b00bde42a674c50a03e63868e8b4d08b6b49/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1624b00bde42a674c50a03e63868e8b4d08b6b49/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_async_fn.rs?ref=1624b00bde42a674c50a03e63868e8b4d08b6b49", "patch": "@@ -69,7 +69,20 @@ impl<'tcx> LateLintPass<'tcx> for ManualAsyncFn {\n                     |diag| {\n                         if_chain! {\n                             if let Some(header_snip) = snippet_opt(cx, header_span);\n-                            if let Some(ret_pos) = header_snip.rfind(\"->\");\n+                            if let Some(ret_pos) = header_snip.rfind(\"->\").map(|rpos| {\n+                                let mut rpos = rpos;\n+                                let chars: Vec<char> = header_snip.chars().collect();\n+                                while rpos > 1 {\n+                                    if let Some(c) = chars.get(rpos - 1) {\n+                                        if c.is_whitespace() {\n+                                            rpos -= 1;\n+                                            continue;\n+                                        }\n+                                    }\n+                                    break;\n+                                }\n+                                rpos\n+                            });\n                             if let Some((ret_sugg, ret_snip)) = suggested_ret(cx, output);\n                             then {\n                                 let help = format!(\"make the function `async` and {}\", ret_sugg);\n@@ -194,7 +207,7 @@ fn suggested_ret(cx: &LateContext<'_>, output: &Ty<'_>) -> Option<(&'static str,\n         },\n         _ => {\n             let sugg = \"return the output of the future directly\";\n-            snippet_opt(cx, output.span).map(|snip| (sugg, format!(\"-> {}\", snip)))\n+            snippet_opt(cx, output.span).map(|snip| (sugg, format!(\" -> {}\", snip)))\n         },\n     }\n }"}, {"sha": "5184f6fdb88b3991850aead57bf02ea0a75b46cf", "filename": "tests/ui/manual_async_fn.fixed", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1624b00bde42a674c50a03e63868e8b4d08b6b49/tests%2Fui%2Fmanual_async_fn.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1624b00bde42a674c50a03e63868e8b4d08b6b49/tests%2Fui%2Fmanual_async_fn.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_async_fn.fixed?ref=1624b00bde42a674c50a03e63868e8b4d08b6b49", "patch": "@@ -7,7 +7,19 @@ use std::future::Future;\n \n async fn fut() -> i32 { 42 }\n \n-async fn empty_fut()  {}\n+#[rustfmt::skip]\n+async fn fut2() -> i32 { 42 }\n+\n+#[rustfmt::skip]\n+async fn fut3() -> i32 { 42 }\n+\n+async fn empty_fut() {}\n+\n+#[rustfmt::skip]\n+async fn empty_fut2() {}\n+\n+#[rustfmt::skip]\n+async fn empty_fut3() {}\n \n async fn core_fut() -> i32 { 42 }\n "}, {"sha": "68c0e591f0b6eed6b4ffd5eeb1b8bd0fde47bae1", "filename": "tests/ui/manual_async_fn.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1624b00bde42a674c50a03e63868e8b4d08b6b49/tests%2Fui%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1624b00bde42a674c50a03e63868e8b4d08b6b49/tests%2Fui%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_async_fn.rs?ref=1624b00bde42a674c50a03e63868e8b4d08b6b49", "patch": "@@ -9,10 +9,30 @@ fn fut() -> impl Future<Output = i32> {\n     async { 42 }\n }\n \n+#[rustfmt::skip]\n+fn fut2() ->impl Future<Output = i32> {\n+    async { 42 }\n+}\n+\n+#[rustfmt::skip]\n+fn fut3()-> impl Future<Output = i32> {\n+    async { 42 }\n+}\n+\n fn empty_fut() -> impl Future<Output = ()> {\n     async {}\n }\n \n+#[rustfmt::skip]\n+fn empty_fut2() ->impl Future<Output = ()> {\n+    async {}\n+}\n+\n+#[rustfmt::skip]\n+fn empty_fut3()-> impl Future<Output = ()> {\n+    async {}\n+}\n+\n fn core_fut() -> impl core::future::Future<Output = i32> {\n     async move { 42 }\n }"}, {"sha": "fdd43db3255ee5991fe49597ded05698fbae3f64", "filename": "tests/ui/manual_async_fn.stderr", "status": "modified", "additions": 67, "deletions": 7, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/1624b00bde42a674c50a03e63868e8b4d08b6b49/tests%2Fui%2Fmanual_async_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1624b00bde42a674c50a03e63868e8b4d08b6b49/tests%2Fui%2Fmanual_async_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_async_fn.stderr?ref=1624b00bde42a674c50a03e63868e8b4d08b6b49", "patch": "@@ -15,22 +15,82 @@ LL | fn fut() -> impl Future<Output = i32> { 42 }\n    |                                       ^^^^^^\n \n error: this function can be simplified using the `async fn` syntax\n-  --> $DIR/manual_async_fn.rs:12:1\n+  --> $DIR/manual_async_fn.rs:13:1\n+   |\n+LL | fn fut2() ->impl Future<Output = i32> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: make the function `async` and return the output of the future directly\n+   |\n+LL | async fn fut2() -> i32 {\n+   | ^^^^^^^^^^^^^^^^^^^^^^\n+help: move the body of the async block to the enclosing function\n+   |\n+LL | fn fut2() ->impl Future<Output = i32> { 42 }\n+   |                                       ^^^^^^\n+\n+error: this function can be simplified using the `async fn` syntax\n+  --> $DIR/manual_async_fn.rs:18:1\n+   |\n+LL | fn fut3()-> impl Future<Output = i32> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: make the function `async` and return the output of the future directly\n+   |\n+LL | async fn fut3() -> i32 {\n+   | ^^^^^^^^^^^^^^^^^^^^^^\n+help: move the body of the async block to the enclosing function\n+   |\n+LL | fn fut3()-> impl Future<Output = i32> { 42 }\n+   |                                       ^^^^^^\n+\n+error: this function can be simplified using the `async fn` syntax\n+  --> $DIR/manual_async_fn.rs:22:1\n    |\n LL | fn empty_fut() -> impl Future<Output = ()> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n help: make the function `async` and remove the return type\n    |\n-LL | async fn empty_fut()  {\n+LL | async fn empty_fut() {\n    | ^^^^^^^^^^^^^^^^^^^^\n help: move the body of the async block to the enclosing function\n    |\n LL | fn empty_fut() -> impl Future<Output = ()> {}\n    |                                            ^^\n \n error: this function can be simplified using the `async fn` syntax\n-  --> $DIR/manual_async_fn.rs:16:1\n+  --> $DIR/manual_async_fn.rs:27:1\n+   |\n+LL | fn empty_fut2() ->impl Future<Output = ()> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: make the function `async` and remove the return type\n+   |\n+LL | async fn empty_fut2() {\n+   | ^^^^^^^^^^^^^^^^^^^^^\n+help: move the body of the async block to the enclosing function\n+   |\n+LL | fn empty_fut2() ->impl Future<Output = ()> {}\n+   |                                            ^^\n+\n+error: this function can be simplified using the `async fn` syntax\n+  --> $DIR/manual_async_fn.rs:32:1\n+   |\n+LL | fn empty_fut3()-> impl Future<Output = ()> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: make the function `async` and remove the return type\n+   |\n+LL | async fn empty_fut3() {\n+   | ^^^^^^^^^^^^^^^^^^^^^\n+help: move the body of the async block to the enclosing function\n+   |\n+LL | fn empty_fut3()-> impl Future<Output = ()> {}\n+   |                                            ^^\n+\n+error: this function can be simplified using the `async fn` syntax\n+  --> $DIR/manual_async_fn.rs:36:1\n    |\n LL | fn core_fut() -> impl core::future::Future<Output = i32> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -45,7 +105,7 @@ LL | fn core_fut() -> impl core::future::Future<Output = i32> { 42 }\n    |                                                          ^^^^^^\n \n error: this function can be simplified using the `async fn` syntax\n-  --> $DIR/manual_async_fn.rs:38:5\n+  --> $DIR/manual_async_fn.rs:58:5\n    |\n LL |     fn inh_fut() -> impl Future<Output = i32> {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -65,7 +125,7 @@ LL |             let c = 21;\n  ...\n \n error: this function can be simplified using the `async fn` syntax\n-  --> $DIR/manual_async_fn.rs:73:1\n+  --> $DIR/manual_async_fn.rs:93:1\n    |\n LL | fn elided(_: &i32) -> impl Future<Output = i32> + '_ {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -80,7 +140,7 @@ LL | fn elided(_: &i32) -> impl Future<Output = i32> + '_ { 42 }\n    |                                                      ^^^^^^\n \n error: this function can be simplified using the `async fn` syntax\n-  --> $DIR/manual_async_fn.rs:82:1\n+  --> $DIR/manual_async_fn.rs:102:1\n    |\n LL | fn explicit<'a, 'b>(_: &'a i32, _: &'b i32) -> impl Future<Output = i32> + 'a + 'b {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -94,5 +154,5 @@ help: move the body of the async block to the enclosing function\n LL | fn explicit<'a, 'b>(_: &'a i32, _: &'b i32) -> impl Future<Output = i32> + 'a + 'b { 42 }\n    |                                                                                    ^^^^^^\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 10 previous errors\n "}]}