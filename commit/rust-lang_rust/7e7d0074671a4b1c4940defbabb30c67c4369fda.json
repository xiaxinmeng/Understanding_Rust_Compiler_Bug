{"sha": "7e7d0074671a4b1c4940defbabb30c67c4369fda", "node_id": "C_kwDOAAsO6NoAKDdlN2QwMDc0NjcxYTRiMWM0OTQwZGVmYmFiYjMwYzY3YzQzNjlmZGE", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2022-07-03T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2022-07-08T07:19:07Z"}, "message": "Add `SourceScope::inlined_instance`", "tree": {"sha": "2e8461ca548512fbb6cb5541276356915c047423", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e8461ca548512fbb6cb5541276356915c047423"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e7d0074671a4b1c4940defbabb30c67c4369fda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e7d0074671a4b1c4940defbabb30c67c4369fda", "html_url": "https://github.com/rust-lang/rust/commit/7e7d0074671a4b1c4940defbabb30c67c4369fda", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e7d0074671a4b1c4940defbabb30c67c4369fda/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eba361ae36be41e42fb8fdf138455307e0ad407c", "url": "https://api.github.com/repos/rust-lang/rust/commits/eba361ae36be41e42fb8fdf138455307e0ad407c", "html_url": "https://github.com/rust-lang/rust/commit/eba361ae36be41e42fb8fdf138455307e0ad407c"}], "stats": {"total": 23, "additions": 18, "deletions": 5}, "files": [{"sha": "f1fe495282abc45f56e38de8cda5bf1ea2adbc7d", "filename": "compiler/rustc_codegen_ssa/src/mir/coverageinfo.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7e7d0074671a4b1c4940defbabb30c67c4369fda/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fcoverageinfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e7d0074671a4b1c4940defbabb30c67c4369fda/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fcoverageinfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fcoverageinfo.rs?ref=7e7d0074671a4b1c4940defbabb30c67c4369fda", "patch": "@@ -9,11 +9,8 @@ use super::FunctionCx;\n impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     pub fn codegen_coverage(&self, bx: &mut Bx, coverage: Coverage, scope: SourceScope) {\n         // Determine the instance that coverage data was originally generated for.\n-        let scope_data = &self.mir.source_scopes[scope];\n-        let instance = if let Some((inlined_instance, _)) = scope_data.inlined {\n-            self.monomorphize(inlined_instance)\n-        } else if let Some(inlined_scope) = scope_data.inlined_parent_scope {\n-            self.monomorphize(self.mir.source_scopes[inlined_scope].inlined.unwrap().0)\n+        let instance = if let Some(inlined) = scope.inlined_instance(&self.mir.source_scopes) {\n+            self.monomorphize(inlined)\n         } else {\n             self.instance\n         };"}, {"sha": "743e02ad3e19ed6060ed13a2987518d82fd1670f", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7e7d0074671a4b1c4940defbabb30c67c4369fda/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e7d0074671a4b1c4940defbabb30c67c4369fda/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=7e7d0074671a4b1c4940defbabb30c67c4369fda", "patch": "@@ -1650,6 +1650,22 @@ impl SourceScope {\n             ClearCrossCrate::Clear => None,\n         }\n     }\n+\n+    /// The instance this source scope was inlined from, if any.\n+    #[inline]\n+    pub fn inlined_instance<'tcx>(\n+        self,\n+        source_scopes: &IndexVec<SourceScope, SourceScopeData<'tcx>>,\n+    ) -> Option<ty::Instance<'tcx>> {\n+        let scope_data = &source_scopes[self];\n+        if let Some((inlined_instance, _)) = scope_data.inlined {\n+            Some(inlined_instance)\n+        } else if let Some(inlined_scope) = scope_data.inlined_parent_scope {\n+            Some(source_scopes[inlined_scope].inlined.unwrap().0)\n+        } else {\n+            None\n+        }\n+    }\n }\n \n #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable, TypeVisitable)]"}]}