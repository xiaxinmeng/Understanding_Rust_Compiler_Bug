{"sha": "11874a0c14a1637a310f0088a2c91ceb2810f6dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExODc0YTBjMTRhMTYzN2EzMTBmMDA4OGEyYzkxY2ViMjgxMGY2ZGQ=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-02-05T15:52:17Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-02-07T14:02:17Z"}, "message": "Validate generic parameter and argument order in ast_validation\n\nCo-Authored-By: Gabriel Smith <yodaldevoid@users.noreply.github.com>", "tree": {"sha": "32bfb11c53c2caa4bece6f9d0ae6b50a68091c7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32bfb11c53c2caa4bece6f9d0ae6b50a68091c7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11874a0c14a1637a310f0088a2c91ceb2810f6dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11874a0c14a1637a310f0088a2c91ceb2810f6dd", "html_url": "https://github.com/rust-lang/rust/commit/11874a0c14a1637a310f0088a2c91ceb2810f6dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11874a0c14a1637a310f0088a2c91ceb2810f6dd/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fec52bf58d66b6efc7a2d87c9296072b727fc83", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fec52bf58d66b6efc7a2d87c9296072b727fc83", "html_url": "https://github.com/rust-lang/rust/commit/2fec52bf58d66b6efc7a2d87c9296072b727fc83"}], "stats": {"total": 128, "additions": 112, "deletions": 16}, "files": [{"sha": "502799900642dd0b74260cfaea0c3ba1205d375a", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 112, "deletions": 16, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/11874a0c14a1637a310f0088a2c91ceb2810f6dd/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11874a0c14a1637a310f0088a2c91ceb2810f6dd/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=11874a0c14a1637a310f0088a2c91ceb2810f6dd", "patch": "@@ -9,6 +9,7 @@\n use std::mem;\n use rustc::lint;\n use rustc::session::Session;\n+use rustc_data_structures::fx::FxHashMap;\n use syntax::ast::*;\n use syntax::attr;\n use syntax::source_map::Spanned;\n@@ -271,7 +272,74 @@ impl<'a> AstValidator<'a> {\n             _ => None,\n         }\n     }\n+}\n \n+enum GenericPosition {\n+    Param,\n+    Arg,\n+}\n+\n+fn validate_generics_order<'a>(\n+    handler: &errors::Handler,\n+    generics: impl Iterator<Item = (ParamKindOrd, Span, Option<Ident>)>,\n+    pos: GenericPosition,\n+    span: Span,\n+) {\n+    let mut max_param: Option<ParamKindOrd> = None;\n+    let mut out_of_order = FxHashMap::default();\n+    let mut param_idents = vec![];\n+\n+    for (kind, span, ident) in generics {\n+        if let Some(ident) = ident {\n+            param_idents.push((kind, param_idents.len(), ident));\n+        }\n+        let max_param = &mut max_param;\n+        match max_param {\n+            Some(max_param) if *max_param > kind => {\n+                let entry = out_of_order.entry(kind).or_insert((*max_param, vec![]));\n+                entry.1.push(span);\n+            }\n+            Some(_) | None => *max_param = Some(kind),\n+        };\n+    }\n+\n+    let mut ordered_params = \"<\".to_string();\n+    if !out_of_order.is_empty() {\n+        param_idents.sort_by_key(|&(po, i, _)| (po, i));\n+        let mut first = true;\n+        for (_, _, ident) in param_idents {\n+            if !first {\n+                ordered_params += \", \";\n+            }\n+            ordered_params += &ident.as_str();\n+            first = false;\n+        }\n+    }\n+    ordered_params += \">\";\n+\n+    let pos_str = match pos {\n+        GenericPosition::Param => \"parameter\",\n+        GenericPosition::Arg => \"argument\",\n+    };\n+\n+    for (param_ord, (max_param, spans)) in out_of_order {\n+        let mut err = handler.struct_span_err(spans,\n+            &format!(\n+                \"{} {pos}s must be declared prior to {} {pos}s\",\n+                param_ord,\n+                max_param,\n+                pos = pos_str,\n+            ));\n+        if let GenericPosition::Param = pos {\n+            err.span_suggestion(\n+                span,\n+                &format!(\"reorder the {}s: lifetimes, then types, then consts\", pos_str),\n+                ordered_params.clone(),\n+                Applicability::MachineApplicable,\n+            );\n+        }\n+        err.emit();\n+    }\n }\n \n impl<'a> Visitor<'a> for AstValidator<'a> {\n@@ -412,6 +480,26 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                         .note(\"only trait implementations may be annotated with default\").emit();\n                 }\n             }\n+            ItemKind::Fn(_, header, ref generics, _) => {\n+                // We currently do not permit const generics in `const fn`, as\n+                // this is tantamount to allowing compile-time dependent typing.\n+                if header.constness.node == Constness::Const {\n+                    // Look for const generics and error if we find any.\n+                    for param in &generics.params {\n+                        match param.kind {\n+                            GenericParamKind::Const { .. } => {\n+                                self.err_handler()\n+                                    .struct_span_err(\n+                                        item.span,\n+                                        \"const parameters are not permitted in `const fn`\",\n+                                    )\n+                                    .emit();\n+                            }\n+                            _ => {}\n+                        }\n+                    }\n+                }\n+            }\n             ItemKind::ForeignMod(..) => {\n                 self.invalid_visibility(\n                     &item.vis,\n@@ -508,6 +596,13 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         match *generic_args {\n             GenericArgs::AngleBracketed(ref data) => {\n                 walk_list!(self, visit_generic_arg, &data.args);\n+                validate_generics_order(self.err_handler(), data.args.iter().map(|arg| {\n+                    (match arg {\n+                        GenericArg::Lifetime(..) => ParamKindOrd::Lifetime,\n+                        GenericArg::Type(..) => ParamKindOrd::Type,\n+                        GenericArg::Const(..) => ParamKindOrd::Const,\n+                    }, arg.span(), None)\n+                }), GenericPosition::Arg, generic_args.span());\n                 // Type bindings such as `Item=impl Debug` in `Iterator<Item=Debug>`\n                 // are allowed to contain nested `impl Trait`.\n                 self.with_impl_trait(None, |this| {\n@@ -526,34 +621,35 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n     }\n \n     fn visit_generics(&mut self, generics: &'a Generics) {\n-        let mut seen_non_lifetime_param = false;\n-        let mut seen_default = None;\n+        let mut prev_ty_default = None;\n         for param in &generics.params {\n-            match (&param.kind, seen_non_lifetime_param) {\n-                (GenericParamKind::Lifetime { .. }, true) => {\n+            if let GenericParamKind::Type { ref default, .. } = param.kind {\n+                if default.is_some() {\n+                    prev_ty_default = Some(param.ident.span);\n+                } else if let Some(span) = prev_ty_default {\n                     self.err_handler()\n-                        .span_err(param.ident.span, \"lifetime parameters must be leading\");\n-                },\n-                (GenericParamKind::Lifetime { .. }, false) => {}\n-                (GenericParamKind::Type { ref default, .. }, _) => {\n-                    seen_non_lifetime_param = true;\n-                    if default.is_some() {\n-                        seen_default = Some(param.ident.span);\n-                    } else if let Some(span) = seen_default {\n-                        self.err_handler()\n-                            .span_err(span, \"type parameters with a default must be trailing\");\n-                        break;\n-                    }\n+                        .span_err(span, \"type parameters with a default must be trailing\");\n+                    break;\n                 }\n             }\n         }\n+\n+        validate_generics_order(self.err_handler(), generics.params.iter().map(|param| {\n+            (match param.kind {\n+                GenericParamKind::Lifetime { .. } => ParamKindOrd::Lifetime,\n+                GenericParamKind::Type { .. } => ParamKindOrd::Type,\n+                GenericParamKind::Const { .. } => ParamKindOrd::Const,\n+            }, param.ident.span, Some(param.ident))\n+        }), GenericPosition::Param, generics.span);\n+\n         for predicate in &generics.where_clause.predicates {\n             if let WherePredicate::EqPredicate(ref predicate) = *predicate {\n                 self.err_handler()\n                     .span_err(predicate.span, \"equality constraints are not yet \\\n                                                supported in where clauses (see #20041)\");\n             }\n         }\n+\n         visit::walk_generics(self, generics)\n     }\n "}]}