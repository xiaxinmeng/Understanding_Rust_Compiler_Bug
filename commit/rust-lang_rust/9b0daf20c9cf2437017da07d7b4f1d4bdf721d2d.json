{"sha": "9b0daf20c9cf2437017da07d7b4f1d4bdf721d2d", "node_id": "C_kwDOAAsO6NoAKDliMGRhZjIwYzljZjI0MzcwMTdkYTA3ZDdiNGYxZDRiZGY3MjFkMmQ", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-02-13T09:44:53Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-02-13T09:44:53Z"}, "message": "fix: don't include `r#` prefix in filesystem changes", "tree": {"sha": "7dd412edd8d419af3a1a24fff0bd88c0f75065d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7dd412edd8d419af3a1a24fff0bd88c0f75065d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b0daf20c9cf2437017da07d7b4f1d4bdf721d2d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmPqBqMACgkQ4laYqTBY\nYXFK/g/+Lilk9ynW7ZeBM4YJG7XixrUJUNvKy6HsIu+3HKogafjhz6sH+kJ5SfyG\n/Px85U0NWCybbsGnXi+0Ssmr5EdpUh1yrubmqUVxevJLl84FxwB49g1+Gm1obtoe\n9C+11o9tRgZNg7WkA+KVuI+K5FZ2wvc9UiAfRh7eLXHbIrq6eCcu/HYII/62mr6c\n3oiMJMQagH7c6qsur2PgfAY0dG1M+25rbt85PjdwlJIRBz0p7FWLV9GoVoF1eVM7\nPV5Nn7XKej+d5etereJ7DwCKmAx4VadS6d9Zn7+UazGAC7L2RtsnU6pGj8/obXxD\nTGwilnVWoxrMFQbMqoLFBcyNGnzKjZ4tjyCq/9q/mmSWoBztOW3CdKuaAApBXoI5\nSLGThfcT1CP4X6PJvy8wh1Ca+mUpuW1BWUohXaOFDA5UaeIu/5WIhFHqRTdNjbmb\ncLrZnWbI/fN0Ud/twsyzZx/KzEuFpX0l3lIlVMQYetI+ZLgDojpkq8c3iue34Qaz\nL/GnvSEDbYsUMxBrG6dAPenA0jNnFtPAIm9EPHeWYxqMhugN1WkW4LWaXwx9XL6a\n9o9kwsakY4MpofdF7huruA9lHiQA8HQiW5J8YMWTQH/lhfVSma/iIvq0Wft3jl+C\nXpj2gNdeNknjAXKC+zmE8Hnl7mm2FaVKWkUTBC80zIf1qCDGx3I=\n=Ni/Q\n-----END PGP SIGNATURE-----", "payload": "tree 7dd412edd8d419af3a1a24fff0bd88c0f75065d3\nparent 92fdfb548ea68636a4c823c8138cfef2af41dcbf\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1676281493 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1676281493 +0900\n\nfix: don't include `r#` prefix in filesystem changes\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b0daf20c9cf2437017da07d7b4f1d4bdf721d2d", "html_url": "https://github.com/rust-lang/rust/commit/9b0daf20c9cf2437017da07d7b4f1d4bdf721d2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b0daf20c9cf2437017da07d7b4f1d4bdf721d2d/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92fdfb548ea68636a4c823c8138cfef2af41dcbf", "url": "https://api.github.com/repos/rust-lang/rust/commits/92fdfb548ea68636a4c823c8138cfef2af41dcbf", "html_url": "https://github.com/rust-lang/rust/commit/92fdfb548ea68636a4c823c8138cfef2af41dcbf"}], "stats": {"total": 154, "additions": 150, "deletions": 4}, "files": [{"sha": "689d23efd71db05cdfd4926da524a54119e89243", "filename": "crates/ide-db/src/rename.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9b0daf20c9cf2437017da07d7b4f1d4bdf721d2d/crates%2Fide-db%2Fsrc%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0daf20c9cf2437017da07d7b4f1d4bdf721d2d/crates%2Fide-db%2Fsrc%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Frename.rs?ref=9b0daf20c9cf2437017da07d7b4f1d4bdf721d2d", "patch": "@@ -190,6 +190,7 @@ fn rename_mod(\n \n     let InFile { file_id, value: def_source } = module.definition_source(sema.db);\n     if let ModuleSource::SourceFile(..) = def_source {\n+        let new_name = new_name.trim_start_matches(\"r#\");\n         let anchor = file_id.original_file(sema.db);\n \n         let is_mod_rs = module.is_mod_rs(sema.db);\n@@ -207,9 +208,13 @@ fn rename_mod(\n         //  - Module has submodules defined in separate files\n         let dir_paths = match (is_mod_rs, has_detached_child, module.name(sema.db)) {\n             // Go up one level since the anchor is inside the dir we're trying to rename\n-            (true, _, Some(mod_name)) => Some((format!(\"../{mod_name}\"), format!(\"../{new_name}\"))),\n+            (true, _, Some(mod_name)) => {\n+                Some((format!(\"../{}\", mod_name.unescaped()), format!(\"../{new_name}\")))\n+            }\n             // The anchor is on the same level as target dir\n-            (false, true, Some(mod_name)) => Some((mod_name.to_string(), new_name.to_string())),\n+            (false, true, Some(mod_name)) => {\n+                Some((mod_name.unescaped().to_string(), new_name.to_string()))\n+            }\n             _ => None,\n         };\n "}, {"sha": "84a14ccd9790d94fbb36a8ed94b5d12864d4bbdb", "filename": "crates/ide/src/rename.rs", "status": "modified", "additions": 143, "deletions": 2, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/9b0daf20c9cf2437017da07d7b4f1d4bdf721d2d/crates%2Fide%2Fsrc%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0daf20c9cf2437017da07d7b4f1d4bdf721d2d/crates%2Fide%2Fsrc%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frename.rs?ref=9b0daf20c9cf2437017da07d7b4f1d4bdf721d2d", "patch": "@@ -13,7 +13,7 @@ use ide_db::{\n };\n use itertools::Itertools;\n use stdx::{always, never};\n-use syntax::{ast, AstNode, SyntaxNode, TextRange, TextSize};\n+use syntax::{ast, utils::is_raw_identifier, AstNode, SmolStr, SyntaxNode, TextRange, TextSize};\n \n use text_edit::TextEdit;\n \n@@ -122,7 +122,11 @@ pub(crate) fn will_rename_file(\n     let sema = Semantics::new(db);\n     let module = sema.to_module_def(file_id)?;\n     let def = Definition::Module(module);\n-    let mut change = def.rename(&sema, new_name_stem).ok()?;\n+    let mut change = if is_raw_identifier(new_name_stem) {\n+        def.rename(&sema, &SmolStr::from_iter([\"r#\", new_name_stem])).ok()?\n+    } else {\n+        def.rename(&sema, new_name_stem).ok()?\n+    };\n     change.file_system_edits.clear();\n     Some(change)\n }\n@@ -1286,6 +1290,143 @@ mod bar$0;\n         )\n     }\n \n+    #[test]\n+    fn test_rename_mod_to_raw_ident() {\n+        check_expect(\n+            \"r#fn\",\n+            r#\"\n+//- /lib.rs\n+mod foo$0;\n+\n+fn main() { foo::bar::baz(); }\n+\n+//- /foo.rs\n+pub mod bar;\n+\n+//- /foo/bar.rs\n+pub fn baz() {}\n+\"#,\n+            expect![[r#\"\n+                SourceChange {\n+                    source_file_edits: {\n+                        FileId(\n+                            0,\n+                        ): TextEdit {\n+                            indels: [\n+                                Indel {\n+                                    insert: \"r#fn\",\n+                                    delete: 4..7,\n+                                },\n+                                Indel {\n+                                    insert: \"r#fn\",\n+                                    delete: 22..25,\n+                                },\n+                            ],\n+                        },\n+                    },\n+                    file_system_edits: [\n+                        MoveFile {\n+                            src: FileId(\n+                                1,\n+                            ),\n+                            dst: AnchoredPathBuf {\n+                                anchor: FileId(\n+                                    1,\n+                                ),\n+                                path: \"fn.rs\",\n+                            },\n+                        },\n+                        MoveDir {\n+                            src: AnchoredPathBuf {\n+                                anchor: FileId(\n+                                    1,\n+                                ),\n+                                path: \"foo\",\n+                            },\n+                            src_id: FileId(\n+                                1,\n+                            ),\n+                            dst: AnchoredPathBuf {\n+                                anchor: FileId(\n+                                    1,\n+                                ),\n+                                path: \"fn\",\n+                            },\n+                        },\n+                    ],\n+                    is_snippet: false,\n+                }\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_rename_mod_from_raw_ident() {\n+        // FIXME: `r#fn` in path expression is not renamed.\n+        check_expect(\n+            \"foo\",\n+            r#\"\n+//- /lib.rs\n+mod r#fn$0;\n+\n+fn main() { r#fn::bar::baz(); }\n+\n+//- /fn.rs\n+pub mod bar;\n+\n+//- /fn/bar.rs\n+pub fn baz() {}\n+\"#,\n+            expect![[r#\"\n+                SourceChange {\n+                    source_file_edits: {\n+                        FileId(\n+                            0,\n+                        ): TextEdit {\n+                            indels: [\n+                                Indel {\n+                                    insert: \"foo\",\n+                                    delete: 4..8,\n+                                },\n+                            ],\n+                        },\n+                    },\n+                    file_system_edits: [\n+                        MoveFile {\n+                            src: FileId(\n+                                1,\n+                            ),\n+                            dst: AnchoredPathBuf {\n+                                anchor: FileId(\n+                                    1,\n+                                ),\n+                                path: \"foo.rs\",\n+                            },\n+                        },\n+                        MoveDir {\n+                            src: AnchoredPathBuf {\n+                                anchor: FileId(\n+                                    1,\n+                                ),\n+                                path: \"fn\",\n+                            },\n+                            src_id: FileId(\n+                                1,\n+                            ),\n+                            dst: AnchoredPathBuf {\n+                                anchor: FileId(\n+                                    1,\n+                                ),\n+                                path: \"foo\",\n+                            },\n+                        },\n+                    ],\n+                    is_snippet: false,\n+                }\n+            \"#]],\n+        );\n+    }\n+\n     #[test]\n     fn test_enum_variant_from_module_1() {\n         cov_mark::check!(rename_non_local);"}]}