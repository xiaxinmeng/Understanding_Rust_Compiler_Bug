{"sha": "3aa1503a61d03834643a39f3e4c9de6721c31bdb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhYTE1MDNhNjFkMDM4MzQ2NDNhMzlmM2U0YzlkZTY3MjFjMzFiZGI=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2018-12-04T11:28:06Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2019-01-03T22:34:52Z"}, "message": "add support for principal-less trait object types\n\nshould be a pure refactoring.", "tree": {"sha": "ad29fd4d3b5ad4854523a501fa94568e3536b524", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad29fd4d3b5ad4854523a501fa94568e3536b524"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3aa1503a61d03834643a39f3e4c9de6721c31bdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3aa1503a61d03834643a39f3e4c9de6721c31bdb", "html_url": "https://github.com/rust-lang/rust/commit/3aa1503a61d03834643a39f3e4c9de6721c31bdb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3aa1503a61d03834643a39f3e4c9de6721c31bdb/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0bbc3927e28c22edefe6a1353b5ecc95ea9a104", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0bbc3927e28c22edefe6a1353b5ecc95ea9a104", "html_url": "https://github.com/rust-lang/rust/commit/c0bbc3927e28c22edefe6a1353b5ecc95ea9a104"}], "stats": {"total": 335, "additions": 203, "deletions": 132}, "files": [{"sha": "5a4fc23a603f12525d71012cdc392cb3b75c8568", "filename": "src/librustc/traits/coherence.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3aa1503a61d03834643a39f3e4c9de6721c31bdb/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aa1503a61d03834643a39f3e4c9de6721c31bdb/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fcoherence.rs?ref=3aa1503a61d03834643a39f3e4c9de6721c31bdb", "patch": "@@ -485,7 +485,13 @@ fn ty_is_local_constructor(ty: Ty<'_>, in_crate: InCrate) -> bool {\n         ty::Adt(def, _) => def_id_is_local(def.did, in_crate),\n         ty::Foreign(did) => def_id_is_local(did, in_crate),\n \n-        ty::Dynamic(ref tt, ..) => def_id_is_local(tt.principal().def_id(), in_crate),\n+        ty::Dynamic(ref tt, ..) => {\n+            if let Some(principal) = tt.principal() {\n+                def_id_is_local(principal.def_id(), in_crate)\n+            } else {\n+                false\n+            }\n+        }\n \n         ty::Error => true,\n "}, {"sha": "7c4a29ecb54be8420f773d917dc20bb725f046e2", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3aa1503a61d03834643a39f3e4c9de6721c31bdb/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aa1503a61d03834643a39f3e4c9de6721c31bdb/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=3aa1503a61d03834643a39f3e4c9de6721c31bdb", "patch": "@@ -2016,7 +2016,12 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                         return;\n                     }\n \n-                    data.principal().with_self_ty(self.tcx(), self_ty)\n+                    if let Some(principal) = data.principal() {\n+                        principal.with_self_ty(self.tcx(), self_ty)\n+                    } else {\n+                        // Only auto-trait bounds exist.\n+                        return;\n+                    }\n                 }\n                 ty::Infer(ty::TyVar(_)) => {\n                     debug!(\"assemble_candidates_from_object_ty: ambiguous\");\n@@ -2108,7 +2113,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                 //\n                 // We always upcast when we can because of reason\n                 // #2 (region bounds).\n-                data_a.principal().def_id() == data_b.principal().def_id()\n+                data_a.principal_def_id() == data_b.principal_def_id()\n                     && data_b.auto_traits()\n                     // All of a's auto traits need to be in b's auto traits.\n                     .all(|b| data_a.auto_traits().any(|a| a == b))\n@@ -2919,7 +2924,10 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         let self_ty = self.infcx\n             .shallow_resolve(*obligation.self_ty().skip_binder());\n         let poly_trait_ref = match self_ty.sty {\n-            ty::Dynamic(ref data, ..) => data.principal().with_self_ty(self.tcx(), self_ty),\n+            ty::Dynamic(ref data, ..) =>\n+                data.principal().unwrap_or_else(|| {\n+                    span_bug!(obligation.cause.span, \"object candidate with no principal\")\n+                }).with_self_ty(self.tcx(), self_ty),\n             _ => span_bug!(obligation.cause.span, \"object candidate with non-object\"),\n         };\n \n@@ -3222,8 +3230,9 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             (&ty::Dynamic(ref data_a, r_a), &ty::Dynamic(ref data_b, r_b)) => {\n                 // See assemble_candidates_for_unsizing for more info.\n                 let existential_predicates = data_a.map_bound(|data_a| {\n-                    let iter = iter::once(ty::ExistentialPredicate::Trait(data_a.principal()))\n-                        .chain(\n+                    let iter =\n+                        data_a.principal().map(|x| ty::ExistentialPredicate::Trait(x))\n+                        .into_iter().chain(\n                             data_a\n                                 .projection_bounds()\n                                 .map(|x| ty::ExistentialPredicate::Projection(x)),\n@@ -3260,7 +3269,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             // T -> Trait.\n             (_, &ty::Dynamic(ref data, r)) => {\n                 let mut object_dids = data.auto_traits()\n-                    .chain(iter::once(data.principal().def_id()));\n+                    .chain(data.principal_def_id());\n                 if let Some(did) = object_dids.find(|did| !tcx.is_object_safe(*did)) {\n                     return Err(TraitNotObjectSafe(did));\n                 }"}, {"sha": "1ba367b8688a651f03447f5f27113c6d24bef60a", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3aa1503a61d03834643a39f3e4c9de6721c31bdb/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aa1503a61d03834643a39f3e4c9de6721c31bdb/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=3aa1503a61d03834643a39f3e4c9de6721c31bdb", "patch": "@@ -183,7 +183,11 @@ impl<'a, 'gcx, 'lcx, 'tcx> ty::TyS<'tcx> {\n             ty::FnDef(..) => \"fn item\".into(),\n             ty::FnPtr(_) => \"fn pointer\".into(),\n             ty::Dynamic(ref inner, ..) => {\n-                format!(\"trait {}\", tcx.item_path_str(inner.principal().def_id())).into()\n+                if let Some(principal) = inner.principal() {\n+                    format!(\"trait {}\", tcx.item_path_str(principal.def_id())).into()\n+                } else {\n+                    \"trait\".into()\n+                }\n             }\n             ty::Closure(..) => \"closure\".into(),\n             ty::Generator(..) => \"generator\".into(),"}, {"sha": "2b41fc4fe341f74623b1f7c1faace1f456463474", "filename": "src/librustc/ty/fast_reject.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3aa1503a61d03834643a39f3e4c9de6721c31bdb/src%2Flibrustc%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aa1503a61d03834643a39f3e4c9de6721c31bdb/src%2Flibrustc%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffast_reject.rs?ref=3aa1503a61d03834643a39f3e4c9de6721c31bdb", "patch": "@@ -71,11 +71,11 @@ pub fn simplify_type<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n         ty::Array(..) | ty::Slice(_) => Some(ArraySimplifiedType),\n         ty::RawPtr(_) => Some(PtrSimplifiedType),\n         ty::Dynamic(ref trait_info, ..) => {\n-            let principal_def_id = trait_info.principal().def_id();\n-            if tcx.trait_is_auto(principal_def_id) {\n-                Some(MarkerTraitObjectSimplifiedType)\n-            } else {\n-                Some(TraitSimplifiedType(principal_def_id))\n+            match trait_info.principal_def_id() {\n+                Some(principal_def_id) if !tcx.trait_is_auto(principal_def_id) => {\n+                    Some(TraitSimplifiedType(principal_def_id))\n+                }\n+                _ => Some(MarkerTraitObjectSimplifiedType)\n             }\n         }\n         ty::Ref(_, ty, _) => {\n@@ -140,9 +140,9 @@ impl<D: Copy + Debug + Ord + Eq + Hash> SimplifiedTypeGen<D> {\n             ArraySimplifiedType => ArraySimplifiedType,\n             PtrSimplifiedType => PtrSimplifiedType,\n             NeverSimplifiedType => NeverSimplifiedType,\n+            MarkerTraitObjectSimplifiedType => MarkerTraitObjectSimplifiedType,\n             TupleSimplifiedType(n) => TupleSimplifiedType(n),\n             TraitSimplifiedType(d) => TraitSimplifiedType(map(d)),\n-            MarkerTraitObjectSimplifiedType => MarkerTraitObjectSimplifiedType,\n             ClosureSimplifiedType(d) => ClosureSimplifiedType(map(d)),\n             GeneratorSimplifiedType(d) => GeneratorSimplifiedType(map(d)),\n             GeneratorWitnessSimplifiedType(n) => GeneratorWitnessSimplifiedType(n),"}, {"sha": "417e14054d24f260668bbb84edcc0b03593df614", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3aa1503a61d03834643a39f3e4c9de6721c31bdb/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aa1503a61d03834643a39f3e4c9de6721c31bdb/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=3aa1503a61d03834643a39f3e4c9de6721c31bdb", "patch": "@@ -479,7 +479,7 @@ pub fn characteristic_def_id_of_type(ty: Ty<'_>) -> Option<DefId> {\n     match ty.sty {\n         ty::Adt(adt_def, _) => Some(adt_def.did),\n \n-        ty::Dynamic(data, ..) => Some(data.principal().def_id()),\n+        ty::Dynamic(data, ..) => data.principal_def_id(),\n \n         ty::Array(subty, _) |\n         ty::Slice(subty) => characteristic_def_id_of_type(subty),"}, {"sha": "45fb8cf3dc9b40c2117bdf192ea888b394ada101", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3aa1503a61d03834643a39f3e4c9de6721c31bdb/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aa1503a61d03834643a39f3e4c9de6721c31bdb/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=3aa1503a61d03834643a39f3e4c9de6721c31bdb", "patch": "@@ -569,13 +569,18 @@ impl<'a, 'gcx, 'tcx> Binder<ExistentialPredicate<'tcx>> {\n impl<'tcx> serialize::UseSpecializedDecodable for &'tcx List<ExistentialPredicate<'tcx>> {}\n \n impl<'tcx> List<ExistentialPredicate<'tcx>> {\n-    pub fn principal(&self) -> ExistentialTraitRef<'tcx> {\n+    pub fn principal(&self) -> Option<ExistentialTraitRef<'tcx>> {\n         match self[0] {\n-            ExistentialPredicate::Trait(tr) => tr,\n+            ExistentialPredicate::Trait(tr) => Some(tr),\n             other => bug!(\"first predicate is {:?}\", other),\n         }\n     }\n \n+\n+    pub fn principal_def_id(&self) -> Option<DefId> {\n+        self.principal().map(|d| d.def_id)\n+    }\n+\n     #[inline]\n     pub fn projection_bounds<'a>(&'a self) ->\n         impl Iterator<Item=ExistentialProjection<'tcx>> + 'a {\n@@ -599,8 +604,12 @@ impl<'tcx> List<ExistentialPredicate<'tcx>> {\n }\n \n impl<'tcx> Binder<&'tcx List<ExistentialPredicate<'tcx>>> {\n-    pub fn principal(&self) -> PolyExistentialTraitRef<'tcx> {\n-        Binder::bind(self.skip_binder().principal())\n+    pub fn principal(&self) -> Option<ty::Binder<ExistentialTraitRef<'tcx>>> {\n+        self.skip_binder().principal().map(Binder::bind)\n+    }\n+\n+    pub fn principal_def_id(&self) -> Option<DefId> {\n+        self.skip_binder().principal_def_id()\n     }\n \n     #[inline]\n@@ -1917,7 +1926,9 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n             }\n             Dynamic(ref obj, region) => {\n                 out.push(region);\n-                out.extend(obj.principal().skip_binder().substs.regions());\n+                if let Some(principal) = obj.principal() {\n+                    out.extend(principal.skip_binder().substs.regions());\n+                }\n             }\n             Adt(_, substs) | Opaque(_, substs) => {\n                 out.extend(substs.regions())"}, {"sha": "1fad96435991d7c69f0e58ed947baf733d08bb57", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3aa1503a61d03834643a39f3e4c9de6721c31bdb/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aa1503a61d03834643a39f3e4c9de6721c31bdb/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=3aa1503a61d03834643a39f3e4c9de6721c31bdb", "patch": "@@ -384,7 +384,7 @@ impl<'a, 'gcx, 'tcx> WfPredicates<'a, 'gcx, 'tcx> {\n \n                     let cause = self.cause(traits::MiscObligation);\n                     let component_traits =\n-                        data.auto_traits().chain(once(data.principal().def_id()));\n+                        data.auto_traits().chain(data.principal_def_id());\n                     self.out.extend(\n                         component_traits.map(|did| traits::Obligation::new(\n                             cause.clone(),"}, {"sha": "d55d9c8c2ed1c44f655b7f6ee980b7c7186e131d", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3aa1503a61d03834643a39f3e4c9de6721c31bdb/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aa1503a61d03834643a39f3e4c9de6721c31bdb/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=3aa1503a61d03834643a39f3e4c9de6721c31bdb", "patch": "@@ -713,16 +713,18 @@ define_print! {\n                 // Use a type that can't appear in defaults of type parameters.\n                 let dummy_self = tcx.mk_infer(ty::FreshTy(0));\n \n-                let principal = tcx\n-                    .lift(&self.principal())\n-                    .expect(\"could not lift TraitRef for printing\")\n-                    .with_self_ty(tcx, dummy_self);\n-                let projections = self.projection_bounds().map(|p| {\n-                    tcx.lift(&p)\n-                        .expect(\"could not lift projection for printing\")\n-                        .with_self_ty(tcx, dummy_self)\n-                }).collect::<Vec<_>>();\n-                cx.parameterized(f, principal.substs, principal.def_id, &projections)?;\n+                if let Some(principal) = self.principal() {\n+                    let principal = tcx\n+                        .lift(&principal)\n+                        .expect(\"could not lift TraitRef for printing\")\n+                        .with_self_ty(tcx, dummy_self);\n+                    let projections = self.projection_bounds().map(|p| {\n+                        tcx.lift(&p)\n+                            .expect(\"could not lift projection for printing\")\n+                            .with_self_ty(tcx, dummy_self)\n+                    }).collect::<Vec<_>>();\n+                    cx.parameterized(f, principal.substs, principal.def_id, &projections)?;\n+                }\n \n                 // Builtin bounds.\n                 for did in self.auto_traits() {"}, {"sha": "2b03e99161db8911939e39240d8b23e2f652ad34", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3aa1503a61d03834643a39f3e4c9de6721c31bdb/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aa1503a61d03834643a39f3e4c9de6721c31bdb/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=3aa1503a61d03834643a39f3e4c9de6721c31bdb", "patch": "@@ -50,7 +50,8 @@ pub struct CodegenCx<'ll, 'tcx: 'll> {\n     /// Cache instances of monomorphic and polymorphic items\n     pub instances: RefCell<FxHashMap<Instance<'tcx>, &'ll Value>>,\n     /// Cache generated vtables\n-    pub vtables: RefCell<FxHashMap<(Ty<'tcx>, ty::PolyExistentialTraitRef<'tcx>), &'ll Value>>,\n+    pub vtables: RefCell<FxHashMap<\n+            (Ty<'tcx>, Option<ty::PolyExistentialTraitRef<'tcx>>), &'ll Value>>,\n     /// Cache of constant strings,\n     pub const_cstr_cache: RefCell<FxHashMap<LocalInternedString, &'ll Value>>,\n \n@@ -311,7 +312,7 @@ impl<'ll, 'tcx> CodegenCx<'ll, 'tcx> {\n \n impl MiscMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n     fn vtables(&self) -> &RefCell<FxHashMap<(Ty<'tcx>,\n-                                ty::PolyExistentialTraitRef<'tcx>), &'ll Value>>\n+                                Option<ty::PolyExistentialTraitRef<'tcx>>), &'ll Value>>\n     {\n         &self.vtables\n     }"}, {"sha": "72ed55df946588440b4567ea82f6baf172e9c8e6", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3aa1503a61d03834643a39f3e4c9de6721c31bdb/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aa1503a61d03834643a39f3e4c9de6721c31bdb/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=3aa1503a61d03834643a39f3e4c9de6721c31bdb", "patch": "@@ -429,7 +429,8 @@ fn trait_pointer_metadata(\n     // But it does not describe the trait's methods.\n \n     let containing_scope = match trait_type.sty {\n-        ty::Dynamic(ref data, ..) => Some(get_namespace_for_item(cx, data.principal().def_id())),\n+        ty::Dynamic(ref data, ..) =>\n+            data.principal_def_id().map(|did| get_namespace_for_item(cx, did)),\n         _ => {\n             bug!(\"debuginfo: Unexpected trait-object type in \\\n                   trait_pointer_metadata(): {:?}\","}, {"sha": "32432f7e4ec10d2da4be8a22f818910912a4d2d6", "filename": "src/librustc_codegen_llvm/debuginfo/type_names.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3aa1503a61d03834643a39f3e4c9de6721c31bdb/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aa1503a61d03834643a39f3e4c9de6721c31bdb/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Ftype_names.rs?ref=3aa1503a61d03834643a39f3e4c9de6721c31bdb", "patch": "@@ -107,12 +107,16 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n             }\n         },\n         ty::Dynamic(ref trait_data, ..) => {\n-            let principal = cx.tcx.normalize_erasing_late_bound_regions(\n-                ty::ParamEnv::reveal_all(),\n-                &trait_data.principal(),\n-            );\n-            push_item_name(cx, principal.def_id, false, output);\n-            push_type_params(cx, principal.substs, output);\n+            if let Some(principal) = trait_data.principal() {\n+                let principal = cx.tcx.normalize_erasing_late_bound_regions(\n+                    ty::ParamEnv::reveal_all(),\n+                    &principal,\n+                );\n+                push_item_name(cx, principal.def_id, false, output);\n+                push_type_params(cx, principal.substs, output);\n+            } else {\n+                output.push_str(\"dyn '_\");\n+            }\n         },\n         ty::FnDef(..) | ty::FnPtr(_) => {\n             let sig = t.fn_sig(cx.tcx);"}, {"sha": "98ad2616eeaae364c47f339a27cca95db2c639bc", "filename": "src/librustc_codegen_ssa/meth.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3aa1503a61d03834643a39f3e4c9de6721c31bdb/src%2Flibrustc_codegen_ssa%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aa1503a61d03834643a39f3e4c9de6721c31bdb/src%2Flibrustc_codegen_ssa%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmeth.rs?ref=3aa1503a61d03834643a39f3e4c9de6721c31bdb", "patch": "@@ -69,7 +69,7 @@ impl<'a, 'tcx: 'a> VirtualIndex {\n pub fn get_vtable<'tcx, Cx: CodegenMethods<'tcx>>(\n     cx: &Cx,\n     ty: Ty<'tcx>,\n-    trait_ref: ty::PolyExistentialTraitRef<'tcx>,\n+    trait_ref: Option<ty::PolyExistentialTraitRef<'tcx>>,\n ) -> Cx::Value {\n     let tcx = cx.tcx();\n \n@@ -83,8 +83,15 @@ pub fn get_vtable<'tcx, Cx: CodegenMethods<'tcx>>(\n     // Not in the cache. Build it.\n     let nullptr = cx.const_null(cx.type_i8p());\n \n-    let methods = tcx.vtable_methods(trait_ref.with_self_ty(tcx, ty));\n-    let methods = methods.iter().cloned().map(|opt_mth| {\n+    let methods_root;\n+    let methods = if let Some(trait_ref) = trait_ref {\n+        methods_root = tcx.vtable_methods(trait_ref.with_self_ty(tcx, ty));\n+        methods_root.iter()\n+    } else {\n+        (&[]).iter()\n+    };\n+\n+    let methods = methods.cloned().map(|opt_mth| {\n         opt_mth.map_or(nullptr, |(def_id, substs)| {\n             callee::resolve_and_get_fn_for_vtable(cx, def_id, substs)\n         })"}, {"sha": "b23155563665d1c38a71f86195ba9f9f148fafcf", "filename": "src/librustc_codegen_ssa/traits/misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3aa1503a61d03834643a39f3e4c9de6721c31bdb/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aa1503a61d03834643a39f3e4c9de6721c31bdb/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmisc.rs?ref=3aa1503a61d03834643a39f3e4c9de6721c31bdb", "patch": "@@ -11,7 +11,7 @@ use std::sync::Arc;\n pub trait MiscMethods<'tcx>: BackendTypes {\n     fn vtables(\n         &self,\n-    ) -> &RefCell<FxHashMap<(Ty<'tcx>, ty::PolyExistentialTraitRef<'tcx>), Self::Value>>;\n+    ) -> &RefCell<FxHashMap<(Ty<'tcx>, Option<ty::PolyExistentialTraitRef<'tcx>>), Self::Value>>;\n     fn check_overflow(&self) -> bool;\n     fn instances(&self) -> &RefCell<FxHashMap<Instance<'tcx>, Self::Value>>;\n     fn get_fn(&self, instance: Instance<'tcx>) -> Self::Value;"}, {"sha": "19362b6cfdb1c4af21052d343674fde60cdb9b05", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3aa1503a61d03834643a39f3e4c9de6721c31bdb/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aa1503a61d03834643a39f3e4c9de6721c31bdb/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=3aa1503a61d03834643a39f3e4c9de6721c31bdb", "patch": "@@ -42,7 +42,7 @@ pub struct EvalContext<'a, 'mir, 'tcx: 'a + 'mir, M: Machine<'a, 'mir, 'tcx>> {\n     pub(crate) stack: Vec<Frame<'mir, 'tcx, M::PointerTag, M::FrameExtra>>,\n \n     /// A cache for deduplicating vtables\n-    pub(super) vtables: FxHashMap<(Ty<'tcx>, ty::PolyExistentialTraitRef<'tcx>), AllocId>,\n+    pub(super) vtables: FxHashMap<(Ty<'tcx>, Option<ty::PolyExistentialTraitRef<'tcx>>), AllocId>,\n }\n \n /// A stack frame."}, {"sha": "642bbc114f5620c6a79165e4df3c5d25c04027e4", "filename": "src/librustc_mir/interpret/traits.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3aa1503a61d03834643a39f3e4c9de6721c31bdb/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aa1503a61d03834643a39f3e4c9de6721c31bdb/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs?ref=3aa1503a61d03834643a39f3e4c9de6721c31bdb", "patch": "@@ -1,3 +1,4 @@\n+use rustc_data_structures::sync::Lrc;\n use rustc::ty::{self, Ty};\n use rustc::ty::layout::{Size, Align, LayoutOf};\n use rustc::mir::interpret::{Scalar, Pointer, EvalResult, PointerArithmetic};\n@@ -14,7 +15,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n     pub fn get_vtable(\n         &mut self,\n         ty: Ty<'tcx>,\n-        poly_trait_ref: ty::PolyExistentialTraitRef<'tcx>,\n+        poly_trait_ref: Option<ty::PolyExistentialTraitRef<'tcx>>,\n     ) -> EvalResult<'tcx, Pointer<M::PointerTag>> {\n         trace!(\"get_vtable(trait_ref={:?})\", poly_trait_ref);\n \n@@ -24,10 +25,14 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n             return Ok(Pointer::from(vtable).with_default_tag());\n         }\n \n-        let trait_ref = poly_trait_ref.with_self_ty(*self.tcx, ty);\n-        let trait_ref = self.tcx.erase_regions(&trait_ref);\n+        let methods = if let Some(poly_trait_ref) = poly_trait_ref {\n+            let trait_ref = poly_trait_ref.with_self_ty(*self.tcx, ty);\n+            let trait_ref = self.tcx.erase_regions(&trait_ref);\n \n-        let methods = self.tcx.vtable_methods(trait_ref);\n+            self.tcx.vtable_methods(trait_ref)\n+        } else {\n+            Lrc::new(Vec::new())\n+        };\n \n         let layout = self.layout_of(ty)?;\n         assert!(!layout.is_unsized(), \"can't create a vtable for an unsized type\");"}, {"sha": "e299dbc3c8f2f7549944ff048e2f6fbbcc6e87e9", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3aa1503a61d03834643a39f3e4c9de6721c31bdb/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aa1503a61d03834643a39f3e4c9de6721c31bdb/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=3aa1503a61d03834643a39f3e4c9de6721c31bdb", "patch": "@@ -894,20 +894,23 @@ fn create_mono_items_for_vtable_methods<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             !impl_ty.needs_subst() && !impl_ty.has_escaping_bound_vars());\n \n     if let ty::Dynamic(ref trait_ty, ..) = trait_ty.sty {\n-        let poly_trait_ref = trait_ty.principal().with_self_ty(tcx, impl_ty);\n-        assert!(!poly_trait_ref.has_escaping_bound_vars());\n-\n-        // Walk all methods of the trait, including those of its supertraits\n-        let methods = tcx.vtable_methods(poly_trait_ref);\n-        let methods = methods.iter().cloned().filter_map(|method| method)\n-            .map(|(def_id, substs)| ty::Instance::resolve_for_vtable(\n+        if let Some(principal) = trait_ty.principal() {\n+            let poly_trait_ref = principal.with_self_ty(tcx, impl_ty);\n+            assert!(!poly_trait_ref.has_escaping_bound_vars());\n+\n+            // Walk all methods of the trait, including those of its supertraits\n+            let methods = tcx.vtable_methods(poly_trait_ref);\n+            let methods = methods.iter().cloned().filter_map(|method| method)\n+                .map(|(def_id, substs)| ty::Instance::resolve_for_vtable(\n                     tcx,\n                     ty::ParamEnv::reveal_all(),\n                     def_id,\n                     substs).unwrap())\n-            .filter(|&instance| should_monomorphize_locally(tcx, &instance))\n-            .map(|instance| create_fn_mono_item(instance));\n-        output.extend(methods);\n+                .filter(|&instance| should_monomorphize_locally(tcx, &instance))\n+                .map(|instance| create_fn_mono_item(instance));\n+            output.extend(methods);\n+        }\n+\n         // Also add the destructor\n         visit_drop_use(tcx, impl_ty, false, output);\n     }"}, {"sha": "7014f539d575416eb76f9fe14bdf5e8543050b03", "filename": "src/librustc_mir/monomorphize/item.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3aa1503a61d03834643a39f3e4c9de6721c31bdb/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aa1503a61d03834643a39f3e4c9de6721c31bdb/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs?ref=3aa1503a61d03834643a39f3e4c9de6721c31bdb", "patch": "@@ -304,13 +304,16 @@ impl<'a, 'tcx> DefPathBasedNames<'a, 'tcx> {\n                 output.push(']');\n             },\n             ty::Dynamic(ref trait_data, ..) => {\n-                let principal = trait_data.principal();\n-                self.push_def_path(principal.def_id(), output);\n-                self.push_type_params(\n-                    principal.skip_binder().substs,\n-                    trait_data.projection_bounds(),\n-                    output,\n-                );\n+                if let Some(principal) = trait_data.principal() {\n+                    self.push_def_path(principal.def_id(), output);\n+                    self.push_type_params(\n+                        principal.skip_binder().substs,\n+                        trait_data.projection_bounds(),\n+                        output,\n+                    );\n+                } else {\n+                    output.push_str(\"dyn '_\");\n+                }\n             },\n             ty::Foreign(did) => self.push_def_path(did, output),\n             ty::FnDef(..) |"}, {"sha": "38f9adee0a48fc1401a7ce4de3bd61caf46bf2ef", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3aa1503a61d03834643a39f3e4c9de6721c31bdb/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aa1503a61d03834643a39f3e4c9de6721c31bdb/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=3aa1503a61d03834643a39f3e4c9de6721c31bdb", "patch": "@@ -63,7 +63,7 @@ enum PointerKind<'tcx> {\n     /// No metadata attached, ie pointer to sized type or foreign type\n     Thin,\n     /// A trait object\n-    Vtable(DefId),\n+    Vtable(Option<DefId>),\n     /// Slice\n     Length,\n     /// The unsize info of this projection\n@@ -95,7 +95,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         Ok(match t.sty {\n             ty::Slice(_) | ty::Str => Some(PointerKind::Length),\n             ty::Dynamic(ref tty, ..) =>\n-                Some(PointerKind::Vtable(tty.principal().def_id())),\n+                Some(PointerKind::Vtable(tty.principal_def_id())),\n             ty::Adt(def, substs) if def.is_struct() => {\n                 match def.non_enum_variant().fields.last() {\n                     None => Some(PointerKind::Thin),"}, {"sha": "ff3b22dd1dec783235d2c5e7bdd98dd745fa327e", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3aa1503a61d03834643a39f3e4c9de6721c31bdb/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aa1503a61d03834643a39f3e4c9de6721c31bdb/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=3aa1503a61d03834643a39f3e4c9de6721c31bdb", "patch": "@@ -190,7 +190,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         self.deduce_sig_from_projection(None, &pb)\n                     })\n                     .next();\n-                let kind = self.tcx.lang_items().fn_trait_kind(object_type.principal().def_id());\n+                let kind = object_type.principal_def_id().and_then(|did| {\n+                    self.tcx.lang_items().fn_trait_kind(did)\n+                });\n                 (sig, kind)\n             }\n             ty::Infer(ty::TyVar(vid)) => self.deduce_expectations_from_obligations(vid),"}, {"sha": "2cf2974a45a1cd64597f2de807d69f1055e57864", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3aa1503a61d03834643a39f3e4c9de6721c31bdb/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aa1503a61d03834643a39f3e4c9de6721c31bdb/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=3aa1503a61d03834643a39f3e4c9de6721c31bdb", "patch": "@@ -280,7 +280,11 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n             .include_raw_pointers()\n             .filter_map(|(ty, _)|\n                 match ty.sty {\n-                    ty::Dynamic(ref data, ..) => Some(closure(self, ty, data.principal())),\n+                    ty::Dynamic(ref data, ..) => {\n+                        Some(closure(self, ty, data.principal().unwrap_or_else(|| {\n+                            span_bug!(self.span, \"calling trait method on empty object?\")\n+                        })))\n+                    },\n                     _ => None,\n                 }\n             )"}, {"sha": "9a828ce01775c0df574f734aea316ff4761f1f43", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/3aa1503a61d03834643a39f3e4c9de6721c31bdb/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aa1503a61d03834643a39f3e4c9de6721c31bdb/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=3aa1503a61d03834643a39f3e4c9de6721c31bdb", "patch": "@@ -505,17 +505,18 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n \n         match self_ty.value.value.sty {\n             ty::Dynamic(ref data, ..) => {\n-                let p = data.principal();\n-                self.fcx.probe(|_| {\n-                    let InferOk { value: self_ty, obligations: _ } =\n-                        self.fcx.probe_instantiate_query_response(\n-                            self.span, &self.orig_steps_var_values, self_ty)\n-                        .unwrap_or_else(|_| {\n-                            span_bug!(self.span, \"{:?} was applicable but now isn't?\", self_ty)\n-                        });\n-                    self.assemble_inherent_candidates_from_object(self_ty);\n-                });\n-                self.assemble_inherent_impl_candidates_for_type(p.def_id());\n+                if let Some(p) = data.principal() {\n+                    self.fcx.probe(|_| {\n+                        let InferOk { value: self_ty, obligations: _ } =\n+                            self.fcx.probe_instantiate_query_response(\n+                                self.span, &self.orig_steps_var_values, self_ty)\n+                            .unwrap_or_else(|_| {\n+                                span_bug!(self.span, \"{:?} was applicable but now isn't?\", self_ty)\n+                            });\n+                        self.assemble_inherent_candidates_from_object(self_ty);\n+                    });\n+                    self.assemble_inherent_impl_candidates_for_type(p.def_id());\n+                }\n             }\n             ty::Adt(def, _) => {\n                 self.assemble_inherent_impl_candidates_for_type(def.did);\n@@ -680,10 +681,12 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n                self_ty);\n \n         let principal = match self_ty.sty {\n-            ty::Dynamic(ref data, ..) => data.principal(),\n-            _ => span_bug!(self.span, \"non-object {:?} in assemble_inherent_candidates_from_object\",\n-                           self_ty)\n-        };\n+            ty::Dynamic(ref data, ..) => Some(data),\n+            _ => None\n+        }.and_then(|data| data.principal()).unwrap_or_else(|| {\n+            span_bug!(self.span, \"non-object {:?} in assemble_inherent_candidates_from_object\",\n+                      self_ty)\n+        });\n \n         // It is illegal to invoke a method on a trait instance that\n         // refers to the `Self` type. An error will be reported by"}, {"sha": "23bcd88d6afb5548ccc94557115a1be069fd5d62", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3aa1503a61d03834643a39f3e4c9de6721c31bdb/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aa1503a61d03834643a39f3e4c9de6721c31bdb/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=3aa1503a61d03834643a39f3e4c9de6721c31bdb", "patch": "@@ -651,7 +651,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 ty::Adt(def, _) => def.did.is_local(),\n                 ty::Foreign(did) => did.is_local(),\n \n-                ty::Dynamic(ref tr, ..) => tr.principal().def_id().is_local(),\n+                ty::Dynamic(ref tr, ..) =>\n+                    tr.principal().map(|d| d.def_id().is_local()).unwrap_or(false),\n \n                 ty::Param(_) => true,\n "}, {"sha": "93cc86423ace314ac1a494ca3021996da3da5552", "filename": "src/librustc_typeck/coherence/inherent_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3aa1503a61d03834643a39f3e4c9de6721c31bdb/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aa1503a61d03834643a39f3e4c9de6721c31bdb/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs?ref=3aa1503a61d03834643a39f3e4c9de6721c31bdb", "patch": "@@ -95,8 +95,8 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for InherentCollect<'a, 'tcx> {\n             ty::Foreign(did) => {\n                 self.check_def_id(item, did);\n             }\n-            ty::Dynamic(ref data, ..) => {\n-                self.check_def_id(item, data.principal().def_id());\n+            ty::Dynamic(ref data, ..) if data.principal_def_id().is_some() => {\n+                self.check_def_id(item, data.principal_def_id().unwrap());\n             }\n             ty::Char => {\n                 self.check_primitive_impl(def_id,"}, {"sha": "ce71be07efd423e1b8df93d0d5edca1bf7ca246e", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 21, "deletions": 18, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/3aa1503a61d03834643a39f3e4c9de6721c31bdb/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aa1503a61d03834643a39f3e4c9de6721c31bdb/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=3aa1503a61d03834643a39f3e4c9de6721c31bdb", "patch": "@@ -171,25 +171,28 @@ fn check_impl_overlap<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, node_id: ast::NodeI\n         // This is something like impl Trait1 for Trait2. Illegal\n         // if Trait1 is a supertrait of Trait2 or Trait2 is not object safe.\n \n-        if !tcx.is_object_safe(data.principal().def_id()) {\n-            // This is an error, but it will be reported by wfcheck.  Ignore it here.\n-            // This is tested by `coherence-impl-trait-for-trait-object-safe.rs`.\n-        } else {\n-            let mut supertrait_def_ids =\n-                traits::supertrait_def_ids(tcx, data.principal().def_id());\n-            if supertrait_def_ids.any(|d| d == trait_def_id) {\n-                let sp = tcx.sess.source_map().def_span(tcx.span_of_impl(impl_def_id).unwrap());\n-                struct_span_err!(tcx.sess,\n-                                 sp,\n-                                 E0371,\n-                                 \"the object type `{}` automatically implements the trait `{}`\",\n-                                 trait_ref.self_ty(),\n-                                 tcx.item_path_str(trait_def_id))\n-                    .span_label(sp, format!(\"`{}` automatically implements trait `{}`\",\n-                                            trait_ref.self_ty(),\n-                                            tcx.item_path_str(trait_def_id)))\n-                    .emit();\n+        if let Some(principal_def_id) = data.principal_def_id() {\n+            if !tcx.is_object_safe(principal_def_id) {\n+                // This is an error, but it will be reported by wfcheck.  Ignore it here.\n+                // This is tested by `coherence-impl-trait-for-trait-object-safe.rs`.\n+            } else {\n+                let mut supertrait_def_ids =\n+                    traits::supertrait_def_ids(tcx, principal_def_id);\n+                if supertrait_def_ids.any(|d| d == trait_def_id) {\n+                    let sp = tcx.sess.source_map().def_span(tcx.span_of_impl(impl_def_id).unwrap());\n+                    struct_span_err!(tcx.sess,\n+                                     sp,\n+                                     E0371,\n+                                     \"the object type `{}` automatically implements the trait `{}`\",\n+                                     trait_ref.self_ty(),\n+                                     tcx.item_path_str(trait_def_id))\n+                        .span_label(sp, format!(\"`{}` automatically implements trait `{}`\",\n+                                                trait_ref.self_ty(),\n+                                                tcx.item_path_str(trait_def_id)))\n+                        .emit();\n+                }\n             }\n         }\n+        // FIXME: also check auto-trait def-ids? (e.g. `impl Sync for Foo+Sync`)?\n     }\n }"}, {"sha": "e388a3e0d0c2fa49526fcef06bae444b2c97a439", "filename": "src/librustc_typeck/outlives/implicit_infer.rs", "status": "modified", "additions": 22, "deletions": 21, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/3aa1503a61d03834643a39f3e4c9de6721c31bdb/src%2Flibrustc_typeck%2Foutlives%2Fimplicit_infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aa1503a61d03834643a39f3e4c9de6721c31bdb/src%2Flibrustc_typeck%2Foutlives%2Fimplicit_infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Fimplicit_infer.rs?ref=3aa1503a61d03834643a39f3e4c9de6721c31bdb", "patch": "@@ -194,27 +194,28 @@ fn insert_required_predicates_to_be_wf<'tcx>(\n                 debug!(\"Dynamic\");\n                 debug!(\"field_ty = {}\", &field_ty);\n                 debug!(\"ty in field = {}\", &ty);\n-                let ex_trait_ref = obj.principal();\n-                // Here, we are passing the type `usize` as a\n-                // placeholder value with the function\n-                // `with_self_ty`, since there is no concrete type\n-                // `Self` for a `dyn Trait` at this\n-                // stage. Therefore when checking explicit\n-                // predicates in `check_explicit_predicates` we\n-                // need to ignore checking the explicit_map for\n-                // Self type.\n-                let substs = ex_trait_ref\n-                    .with_self_ty(tcx, tcx.types.usize)\n-                    .skip_binder()\n-                    .substs;\n-                check_explicit_predicates(\n-                    tcx,\n-                    &ex_trait_ref.skip_binder().def_id,\n-                    substs,\n-                    required_predicates,\n-                    explicit_map,\n-                    IgnoreSelfTy(true),\n-                );\n+                if let Some(ex_trait_ref) = obj.principal() {\n+                    // Here, we are passing the type `usize` as a\n+                    // placeholder value with the function\n+                    // `with_self_ty`, since there is no concrete type\n+                    // `Self` for a `dyn Trait` at this\n+                    // stage. Therefore when checking explicit\n+                    // predicates in `check_explicit_predicates` we\n+                    // need to ignore checking the explicit_map for\n+                    // Self type.\n+                    let substs = ex_trait_ref\n+                        .with_self_ty(tcx, tcx.types.usize)\n+                        .skip_binder()\n+                        .substs;\n+                    check_explicit_predicates(\n+                        tcx,\n+                        &ex_trait_ref.skip_binder().def_id,\n+                        substs,\n+                        required_predicates,\n+                        explicit_map,\n+                        IgnoreSelfTy(true),\n+                    );\n+                }\n             }\n \n             ty::Projection(obj) => {"}, {"sha": "868c1132e44c560653dbc73ffae9d18062ffa663", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3aa1503a61d03834643a39f3e4c9de6721c31bdb/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aa1503a61d03834643a39f3e4c9de6721c31bdb/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=3aa1503a61d03834643a39f3e4c9de6721c31bdb", "patch": "@@ -301,11 +301,12 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                 let contra = self.contravariant(variance);\n                 self.add_constraints_from_region(current, r, contra);\n \n-                let poly_trait_ref = data\n-                    .principal()\n-                    .with_self_ty(self.tcx(), self.tcx().types.err);\n-                self.add_constraints_from_trait_ref(\n-                    current, *poly_trait_ref.skip_binder(), variance);\n+                if let Some(poly_trait_ref) = data.principal() {\n+                    let poly_trait_ref =\n+                        poly_trait_ref.with_self_ty(self.tcx(), self.tcx().types.err);\n+                    self.add_constraints_from_trait_ref(\n+                        current, *poly_trait_ref.skip_binder(), variance);\n+                }\n \n                 for projection in data.projection_bounds() {\n                     self.add_constraints_from_ty("}]}