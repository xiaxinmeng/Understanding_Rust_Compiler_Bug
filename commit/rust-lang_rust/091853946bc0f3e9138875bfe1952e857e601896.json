{"sha": "091853946bc0f3e9138875bfe1952e857e601896", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5MTg1Mzk0NmJjMGYzZTkxMzg4NzViZmUxOTUyZTg1N2U2MDE4OTY=", "commit": {"author": {"name": "Janusz Marcinkiewicz", "email": "virrages@gmail.com", "date": "2019-12-21T18:13:12Z"}, "committer": {"name": "Janusz Marcinkiewicz", "email": "virrages@gmail.com", "date": "2019-12-23T10:57:09Z"}, "message": "Add arguments to suggestion method call", "tree": {"sha": "251c3abc32aef80a53833a59e5848a40aab0f1f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/251c3abc32aef80a53833a59e5848a40aab0f1f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/091853946bc0f3e9138875bfe1952e857e601896", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/091853946bc0f3e9138875bfe1952e857e601896", "html_url": "https://github.com/rust-lang/rust/commit/091853946bc0f3e9138875bfe1952e857e601896", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/091853946bc0f3e9138875bfe1952e857e601896/comments", "author": {"login": "VirrageS", "id": 3855799, "node_id": "MDQ6VXNlcjM4NTU3OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/3855799?v=4", "gravatar_id": "", "url": "https://api.github.com/users/VirrageS", "html_url": "https://github.com/VirrageS", "followers_url": "https://api.github.com/users/VirrageS/followers", "following_url": "https://api.github.com/users/VirrageS/following{/other_user}", "gists_url": "https://api.github.com/users/VirrageS/gists{/gist_id}", "starred_url": "https://api.github.com/users/VirrageS/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/VirrageS/subscriptions", "organizations_url": "https://api.github.com/users/VirrageS/orgs", "repos_url": "https://api.github.com/users/VirrageS/repos", "events_url": "https://api.github.com/users/VirrageS/events{/privacy}", "received_events_url": "https://api.github.com/users/VirrageS/received_events", "type": "User", "site_admin": false}, "committer": {"login": "VirrageS", "id": 3855799, "node_id": "MDQ6VXNlcjM4NTU3OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/3855799?v=4", "gravatar_id": "", "url": "https://api.github.com/users/VirrageS", "html_url": "https://github.com/VirrageS", "followers_url": "https://api.github.com/users/VirrageS/followers", "following_url": "https://api.github.com/users/VirrageS/following{/other_user}", "gists_url": "https://api.github.com/users/VirrageS/gists{/gist_id}", "starred_url": "https://api.github.com/users/VirrageS/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/VirrageS/subscriptions", "organizations_url": "https://api.github.com/users/VirrageS/orgs", "repos_url": "https://api.github.com/users/VirrageS/repos", "events_url": "https://api.github.com/users/VirrageS/events{/privacy}", "received_events_url": "https://api.github.com/users/VirrageS/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e5b2c80d3f30c9d83a8e921e78e6c10e54c8319", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e5b2c80d3f30c9d83a8e921e78e6c10e54c8319", "html_url": "https://github.com/rust-lang/rust/commit/8e5b2c80d3f30c9d83a8e921e78e6c10e54c8319"}], "stats": {"total": 23, "additions": 19, "deletions": 4}, "files": [{"sha": "43626d87d71d57f348918319bc0d3cb3d075059d", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/091853946bc0f3e9138875bfe1952e857e601896/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/091853946bc0f3e9138875bfe1952e857e601896/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=091853946bc0f3e9138875bfe1952e857e601896", "patch": "@@ -262,6 +262,7 @@ impl<'a> LateResolutionVisitor<'a, '_> {\n \n             // Check if the first argument is `self` and suggest calling a method.\n             let mut has_self_arg = false;\n+            let mut args_span = None;\n             if let PathSource::Expr(parent) = source {\n                 match &parent.map(|p| &p.kind) {\n                     Some(ExprKind::Call(_, args)) if args.len() > 0 => {\n@@ -270,6 +271,13 @@ impl<'a> LateResolutionVisitor<'a, '_> {\n                             match expr_kind {\n                                 ExprKind::Path(_, arg_name) if arg_name.segments.len() == 1 => {\n                                     has_self_arg = arg_name.segments[0].ident.name == kw::SelfLower;\n+                                    if args.len() > 1 {\n+                                        args_span = Some(Span::new(\n+                                            args[1].span.lo(),\n+                                            args.last().unwrap().span.hi(),\n+                                            parent.unwrap().span.ctxt(),\n+                                        ));\n+                                    }\n                                     break;\n                                 },\n                                 ExprKind::AddrOf(_, _, expr) => expr_kind = &expr.kind,\n@@ -282,10 +290,17 @@ impl<'a> LateResolutionVisitor<'a, '_> {\n             };\n \n             if has_self_arg {\n+                let mut args_snippet: String = String::from(\"\");\n+                if let Some(args_span) = args_span {\n+                    if let Ok(snippet) = self.r.session.source_map().span_to_snippet(args_span) {\n+                        args_snippet = snippet;\n+                    }\n+                }\n+\n                 err.span_suggestion(\n                     span,\n                     &format!(\"try calling `{}` as a method\", ident),\n-                    format!(\"self.{}\", path_str),\n+                    format!(\"self.{}({})\", path_str, args_snippet),\n                     Applicability::MachineApplicable,\n                 );\n                 return (err, candidates);"}, {"sha": "6148012ac0d92db0c7c54bed33f1bc5d12706dcd", "filename": "src/test/ui/self/suggest-self-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/091853946bc0f3e9138875bfe1952e857e601896/src%2Ftest%2Fui%2Fself%2Fsuggest-self-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/091853946bc0f3e9138875bfe1952e857e601896/src%2Ftest%2Fui%2Fself%2Fsuggest-self-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fsuggest-self-2.stderr?ref=091853946bc0f3e9138875bfe1952e857e601896", "patch": "@@ -2,19 +2,19 @@ error[E0425]: cannot find function `bar` in this scope\n   --> $DIR/suggest-self-2.rs:5:9\n    |\n LL |         bar(self);\n-   |         ^^^ help: try calling `bar` as a method: `self.bar`\n+   |         ^^^ help: try calling `bar` as a method: `self.bar()`\n \n error[E0425]: cannot find function `bar` in this scope\n   --> $DIR/suggest-self-2.rs:9:9\n    |\n LL |         bar(&&self, 102);\n-   |         ^^^ help: try calling `bar` as a method: `self.bar`\n+   |         ^^^ help: try calling `bar` as a method: `self.bar(102)`\n \n error[E0425]: cannot find function `bar` in this scope\n   --> $DIR/suggest-self-2.rs:13:9\n    |\n LL |         bar(&mut self, 102, &\"str\");\n-   |         ^^^ help: try calling `bar` as a method: `self.bar`\n+   |         ^^^ help: try calling `bar` as a method: `self.bar(102, &\"str\")`\n \n error[E0425]: cannot find function `bar` in this scope\n   --> $DIR/suggest-self-2.rs:17:9"}]}