{"sha": "4584868a7a23ea640694f34ed9e8c907473c66b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1ODQ4NjhhN2EyM2VhNjQwNjk0ZjM0ZWQ5ZThjOTA3NDczYzY2YjQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-15T13:37:58Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-15T13:37:58Z"}, "message": "internal: don't #[ignore] tests\n\nSee the style.md for motivation", "tree": {"sha": "00fe1acac72a5b170e568fcd7712dc61858775c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00fe1acac72a5b170e568fcd7712dc61858775c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4584868a7a23ea640694f34ed9e8c907473c66b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4584868a7a23ea640694f34ed9e8c907473c66b4", "html_url": "https://github.com/rust-lang/rust/commit/4584868a7a23ea640694f34ed9e8c907473c66b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4584868a7a23ea640694f34ed9e8c907473c66b4/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c1f30bebfc3ffb8aabf85f688faa855ba36f3cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c1f30bebfc3ffb8aabf85f688faa855ba36f3cb", "html_url": "https://github.com/rust-lang/rust/commit/1c1f30bebfc3ffb8aabf85f688faa855ba36f3cb"}], "stats": {"total": 110, "additions": 27, "deletions": 83}, "files": [{"sha": "d8e0dc4d598d2cc4a613efe985faca2b69a7265f", "filename": "crates/ide/src/goto_definition.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4584868a7a23ea640694f34ed9e8c907473c66b4/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4584868a7a23ea640694f34ed9e8c907473c66b4/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_definition.rs?ref=4584868a7a23ea640694f34ed9e8c907473c66b4", "patch": "@@ -1130,15 +1130,15 @@ fn foo<'foobar>(_: &'foobar ()) {\n     }\n \n     #[test]\n-    #[ignore] // requires the HIR to somehow track these hrtb lifetimes\n     fn goto_lifetime_hrtb() {\n-        check(\n+        // FIXME: requires the HIR to somehow track these hrtb lifetimes\n+        check_unresolved(\n             r#\"trait Foo<T> {}\n fn foo<T>() where for<'a> T: Foo<&'a$0 (u8, u16)>, {}\n                     //^^\n \"#,\n         );\n-        check(\n+        check_unresolved(\n             r#\"trait Foo<T> {}\n fn foo<T>() where for<'a$0> T: Foo<&'a (u8, u16)>, {}\n                     //^^\n@@ -1147,9 +1147,9 @@ fn foo<T>() where for<'a$0> T: Foo<&'a (u8, u16)>, {}\n     }\n \n     #[test]\n-    #[ignore] // requires ForTypes to be implemented\n     fn goto_lifetime_hrtb_for_type() {\n-        check(\n+        // FIXME: requires ForTypes to be implemented\n+        check_unresolved(\n             r#\"trait Foo<T> {}\n fn foo<T>() where T: for<'a> Foo<&'a$0 (u8, u16)>, {}\n                        //^^"}, {"sha": "f834bf16a5d19a17a181b6e45697c43b56227deb", "filename": "crates/ide_assists/src/handlers/fix_visibility.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4584868a7a23ea640694f34ed9e8c907473c66b4/crates%2Fide_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4584868a7a23ea640694f34ed9e8c907473c66b4/crates%2Fide_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs?ref=4584868a7a23ea640694f34ed9e8c907473c66b4", "patch": "@@ -361,8 +361,6 @@ pub struct Foo { pub bar: () }\n     }\n \n     #[test]\n-    #[ignore]\n-    // FIXME reenable this test when `Semantics::resolve_record_field` works with union fields\n     fn fix_visibility_of_union_field() {\n         check_assist(\n             fix_visibility,"}, {"sha": "6a658d4cfd8bbf5848d743ca77a33aba6ee94a2c", "filename": "crates/ide_assists/src/handlers/generate_function.rs", "status": "modified", "additions": 16, "deletions": 33, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/4584868a7a23ea640694f34ed9e8c907473c66b4/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4584868a7a23ea640694f34ed9e8c907473c66b4/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=4584868a7a23ea640694f34ed9e8c907473c66b4", "patch": "@@ -811,9 +811,8 @@ fn bar(baz: Baz::Bof) ${0:-> ()} {\n     }\n \n     #[test]\n-    #[ignore]\n-    // FIXME fix printing the generics of a `Ty` to make this test pass\n     fn add_function_with_generic_arg() {\n+        // FIXME: This is wrong, generated `bar` should include generic parameter.\n         check_assist(\n             generate_function,\n             r\"\n@@ -826,17 +825,16 @@ fn foo<T>(t: T) {\n     bar(t)\n }\n \n-fn bar<T>(t: T) ${0:-> ()} {\n+fn bar(t: T) ${0:-> ()} {\n     todo!()\n }\n \",\n         )\n     }\n \n     #[test]\n-    #[ignore]\n-    // FIXME Fix function type printing to make this test pass\n     fn add_function_with_fn_arg() {\n+        // FIXME: The argument in `bar` is wrong.\n         check_assist(\n             generate_function,\n             r\"\n@@ -857,17 +855,16 @@ fn foo() {\n     bar(Baz::new);\n }\n \n-fn bar(arg: fn() -> Baz) ${0:-> ()} {\n+fn bar(new: fn) ${0:-> ()} {\n     todo!()\n }\n \",\n         )\n     }\n \n     #[test]\n-    #[ignore]\n-    // FIXME Fix closure type printing to make this test pass\n     fn add_function_with_closure_arg() {\n+        // FIXME: The argument in `bar` is wrong.\n         check_assist(\n             generate_function,\n             r\"\n@@ -882,7 +879,7 @@ fn foo() {\n     bar(closure)\n }\n \n-fn bar(closure: impl Fn(i64) -> i64) ${0:-> ()} {\n+fn bar(closure: ()) ${0:-> ()} {\n     todo!()\n }\n \",\n@@ -986,13 +983,10 @@ fn foo() {\n     }\n \n     #[test]\n-    #[ignore]\n-    // Ignored until local imports are supported.\n-    // See https://github.com/rust-analyzer/rust-analyzer/issues/1165\n     fn qualified_path_uses_correct_scope() {\n         check_assist(\n             generate_function,\n-            \"\n+            r#\"\n mod foo {\n     pub struct Foo;\n }\n@@ -1001,8 +995,8 @@ fn bar() {\n     let foo = Foo;\n     baz$0(foo)\n }\n-\",\n-            \"\n+\"#,\n+            r#\"\n mod foo {\n     pub struct Foo;\n }\n@@ -1015,7 +1009,7 @@ fn bar() {\n fn baz(foo: foo::Foo) ${0:-> ()} {\n     todo!()\n }\n-\",\n+\"#,\n         )\n     }\n \n@@ -1141,40 +1135,29 @@ fn bar() {}\n             // The assist is only active if the cursor is on an unresolved path,\n             // but the assist should only be offered if the path is a function call.\n             generate_function,\n-            r\"\n+            r#\"\n fn foo() {\n     bar(b$0az);\n }\n \n fn bar(baz: ()) {}\n-\",\n+\"#,\n         )\n     }\n \n     #[test]\n-    #[ignore]\n     fn create_method_with_no_args() {\n-        check_assist(\n+        // FIXME: This is wrong, this should just work.\n+        check_assist_not_applicable(\n             generate_function,\n-            r\"\n+            r#\"\n struct Foo;\n impl Foo {\n     fn foo(&self) {\n         self.bar()$0;\n     }\n }\n-        \",\n-            r\"\n-struct Foo;\n-impl Foo {\n-    fn foo(&self) {\n-        self.bar();\n-    }\n-    fn bar(&self) {\n-        todo!();\n-    }\n-}\n-        \",\n+        \"#,\n         )\n     }\n }"}, {"sha": "7b3133e5396d93ab4eca908d197e1fe6e06d5afc", "filename": "crates/ide_completion/src/completions/attribute/derive.rs", "status": "modified", "additions": 6, "deletions": 43, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/4584868a7a23ea640694f34ed9e8c907473c66b4/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4584868a7a23ea640694f34ed9e8c907473c66b4/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs?ref=4584868a7a23ea640694f34ed9e8c907473c66b4", "patch": "@@ -93,57 +93,20 @@ mod tests {\n     }\n \n     #[test]\n-    #[ignore] // FIXME: Fixtures cant test proc-macros/derives yet as we cant specify them in fixtures\n     fn empty_derive() {\n-        check(\n-            r#\"#[derive($0)] struct Test;\"#,\n-            expect![[r#\"\n-                at Clone\n-                at Clone, Copy\n-                at Debug\n-                at Default\n-                at Hash\n-                at PartialEq\n-                at PartialEq, Eq\n-                at PartialEq, PartialOrd\n-                at PartialEq, Eq, PartialOrd, Ord\n-            \"#]],\n-        );\n+        // FIXME: Add build-in derives to fixture.\n+        check(r#\"#[derive($0)] struct Test;\"#, expect![[r#\"\"#]]);\n     }\n \n     #[test]\n-    #[ignore] // FIXME: Fixtures cant test proc-macros/derives yet as we cant specify them in fixtures\n     fn derive_with_input() {\n-        check(\n-            r#\"#[derive(serde::Serialize, PartialEq, $0)] struct Test;\"#,\n-            expect![[r#\"\n-                at Clone\n-                at Clone, Copy\n-                at Debug\n-                at Default\n-                at Hash\n-                at Eq\n-                at PartialOrd\n-                at Eq, PartialOrd, Ord\n-            \"#]],\n-        )\n+        // FIXME: Add build-in derives to fixture.\n+        check(r#\"#[derive(serde::Serialize, PartialEq, $0)] struct Test;\"#, expect![[r#\"\"#]])\n     }\n \n     #[test]\n-    #[ignore] // FIXME: Fixtures cant test proc-macros/derives yet as we cant specify them in fixtures\n     fn derive_with_input2() {\n-        check(\n-            r#\"#[derive($0 serde::Serialize, PartialEq)] struct Test;\"#,\n-            expect![[r#\"\n-                at Clone\n-                at Clone, Copy\n-                at Debug\n-                at Default\n-                at Hash\n-                at Eq\n-                at PartialOrd\n-                at Eq, PartialOrd, Ord\n-            \"#]],\n-        )\n+        // FIXME: Add build-in derives to fixture.\n+        check(r#\"#[derive($0 serde::Serialize, PartialEq)] struct Test;\"#, expect![[r#\"\"#]])\n     }\n }"}]}