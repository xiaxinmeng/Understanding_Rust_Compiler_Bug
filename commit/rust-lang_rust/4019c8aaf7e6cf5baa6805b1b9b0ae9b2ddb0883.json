{"sha": "4019c8aaf7e6cf5baa6805b1b9b0ae9b2ddb0883", "node_id": "C_kwDOAAsO6NoAKDQwMTljOGFhZjdlNmNmNWJhYTY4MDViMWI5YjBhZTliMmRkYjA4ODM", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2022-11-26T16:47:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-26T16:47:24Z"}, "message": "Rollup merge of #104921 - compiler-errors:no-binder-on-fut-ty, r=cjgillot\n\nRemove unnecessary binder from `get_impl_future_output_ty`\n\nWe never construct an `async fn` with a higher-ranked `impl Future` bound anyways, and basically all the call-sites already skip the binder.", "tree": {"sha": "2a256d89f92d03b20455cacf146256abc647ebb8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a256d89f92d03b20455cacf146256abc647ebb8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4019c8aaf7e6cf5baa6805b1b9b0ae9b2ddb0883", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjgkMcCRBK7hj4Ov3rIwAA+jYIAI4iW3YxgZZq7BpYc+drR/MI\nfBFFe9FwQtGMDFUjXjmmOOXn8CwARZhzxVZriqRS1hm3QIy+TOr6LDR1YxR0UfKr\n4CqZYsVv3ddd6YsY+ep2b27wR7OY9Sh4iPZQICv8eVBkWiS2AQH5bGUK9sUttHST\nLR6uqe4K3Q513pmy8hBnljG7cThp0n6GBT3Pi72oPIuA/jSio0T66imUnHTOZOma\nW8/Wc19Ieou+MknmfXk/Q4CqH5I59jcGelSiCsZxhzrN0G2rxU1zqdd5um6s0nha\ncdue38u3QA1nqKJ4z8CNXUKE4IOr/HUgoPVchKpnTjTwU6Nkx59zO/Zu9qPOs0s=\n=F7ew\n-----END PGP SIGNATURE-----\n", "payload": "tree 2a256d89f92d03b20455cacf146256abc647ebb8\nparent 75352dddf365c68b000ce47aa6ab1868e583d95c\nparent 1472b3803988997d8eca5764cd0bf8ddf9523cf6\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1669481244 +0100\ncommitter GitHub <noreply@github.com> 1669481244 +0100\n\nRollup merge of #104921 - compiler-errors:no-binder-on-fut-ty, r=cjgillot\n\nRemove unnecessary binder from `get_impl_future_output_ty`\n\nWe never construct an `async fn` with a higher-ranked `impl Future` bound anyways, and basically all the call-sites already skip the binder.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4019c8aaf7e6cf5baa6805b1b9b0ae9b2ddb0883", "html_url": "https://github.com/rust-lang/rust/commit/4019c8aaf7e6cf5baa6805b1b9b0ae9b2ddb0883", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4019c8aaf7e6cf5baa6805b1b9b0ae9b2ddb0883/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75352dddf365c68b000ce47aa6ab1868e583d95c", "url": "https://api.github.com/repos/rust-lang/rust/commits/75352dddf365c68b000ce47aa6ab1868e583d95c", "html_url": "https://github.com/rust-lang/rust/commit/75352dddf365c68b000ce47aa6ab1868e583d95c"}, {"sha": "1472b3803988997d8eca5764cd0bf8ddf9523cf6", "url": "https://api.github.com/repos/rust-lang/rust/commits/1472b3803988997d8eca5764cd0bf8ddf9523cf6", "html_url": "https://github.com/rust-lang/rust/commit/1472b3803988997d8eca5764cd0bf8ddf9523cf6"}], "stats": {"total": 57, "additions": 23, "deletions": 34}, "files": [{"sha": "d7f875b2857752d228cdccff34bedcb41d9b9d81", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4019c8aaf7e6cf5baa6805b1b9b0ae9b2ddb0883/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4019c8aaf7e6cf5baa6805b1b9b0ae9b2ddb0883/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=4019c8aaf7e6cf5baa6805b1b9b0ae9b2ddb0883", "patch": "@@ -2333,12 +2333,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         base: &'tcx hir::Expr<'tcx>,\n         ty: Ty<'tcx>,\n     ) {\n-        let output_ty = match self.get_impl_future_output_ty(ty) {\n-            Some(output_ty) => self.resolve_vars_if_possible(output_ty),\n-            _ => return,\n-        };\n+        let Some(output_ty) = self.get_impl_future_output_ty(ty) else { return; };\n         let mut add_label = true;\n-        if let ty::Adt(def, _) = output_ty.skip_binder().kind() {\n+        if let ty::Adt(def, _) = output_ty.kind() {\n             // no field access on enum type\n             if !def.is_enum() {\n                 if def"}, {"sha": "6c3526a71a3285955c12288b78aca34ff1d9a674", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4019c8aaf7e6cf5baa6805b1b9b0ae9b2ddb0883/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4019c8aaf7e6cf5baa6805b1b9b0ae9b2ddb0883/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=4019c8aaf7e6cf5baa6805b1b9b0ae9b2ddb0883", "patch": "@@ -924,15 +924,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let ty = match self.tcx.asyncness(fn_id.owner) {\n                 hir::IsAsync::Async => {\n                     let infcx = self.tcx.infer_ctxt().build();\n-                    infcx\n-                        .get_impl_future_output_ty(ty)\n-                        .unwrap_or_else(|| {\n-                            span_bug!(\n-                                fn_decl.output.span(),\n-                                \"failed to get output type of async function\"\n-                            )\n-                        })\n-                        .skip_binder()\n+                    infcx.get_impl_future_output_ty(ty).unwrap_or_else(|| {\n+                        span_bug!(\n+                            fn_decl.output.span(),\n+                            \"failed to get output type of async function\"\n+                        )\n+                    })\n                 }\n                 hir::IsAsync::NotAsync => ty,\n             };"}, {"sha": "727fab9e7aa1e7df85b4d31bb27ce265d9423b3f", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4019c8aaf7e6cf5baa6805b1b9b0ae9b2ddb0883/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4019c8aaf7e6cf5baa6805b1b9b0ae9b2ddb0883/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=4019c8aaf7e6cf5baa6805b1b9b0ae9b2ddb0883", "patch": "@@ -1952,7 +1952,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         span: Span,\n     ) {\n         let output_ty = match self.get_impl_future_output_ty(ty) {\n-            Some(output_ty) => self.resolve_vars_if_possible(output_ty).skip_binder(),\n+            Some(output_ty) => self.resolve_vars_if_possible(output_ty),\n             _ => return,\n         };\n         let method_exists = self.method_exists(item_name, output_ty, call.hir_id, true);"}, {"sha": "6b6be7359a599ef339de8665c1f280a2a3bdfa0c", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 14, "deletions": 19, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/4019c8aaf7e6cf5baa6805b1b9b0ae9b2ddb0883/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4019c8aaf7e6cf5baa6805b1b9b0ae9b2ddb0883/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=4019c8aaf7e6cf5baa6805b1b9b0ae9b2ddb0883", "patch": "@@ -74,7 +74,7 @@ use rustc_middle::dep_graph::DepContext;\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::relate::{self, RelateResult, TypeRelation};\n use rustc_middle::ty::{\n-    self, error::TypeError, Binder, List, Region, Ty, TyCtxt, TypeFoldable, TypeSuperVisitable,\n+    self, error::TypeError, List, Region, Ty, TyCtxt, TypeFoldable, TypeSuperVisitable,\n     TypeVisitable,\n };\n use rustc_span::{sym, symbol::kw, BytePos, DesugaringKind, Pos, Span};\n@@ -339,16 +339,15 @@ pub fn unexpected_hidden_region_diagnostic<'tcx>(\n }\n \n impl<'tcx> InferCtxt<'tcx> {\n-    pub fn get_impl_future_output_ty(&self, ty: Ty<'tcx>) -> Option<Binder<'tcx, Ty<'tcx>>> {\n-        if let ty::Opaque(def_id, substs) = ty.kind() {\n-            let future_trait = self.tcx.require_lang_item(LangItem::Future, None);\n-            // Future::Output\n-            let item_def_id = self.tcx.associated_item_def_ids(future_trait)[0];\n+    pub fn get_impl_future_output_ty(&self, ty: Ty<'tcx>) -> Option<Ty<'tcx>> {\n+        let ty::Opaque(def_id, substs) = *ty.kind() else { return None; };\n \n-            let bounds = self.tcx.bound_explicit_item_bounds(*def_id);\n+        let future_trait = self.tcx.require_lang_item(LangItem::Future, None);\n+        let item_def_id = self.tcx.associated_item_def_ids(future_trait)[0];\n \n-            for (predicate, _) in bounds.subst_iter_copied(self.tcx, substs) {\n-                let output = predicate\n+        self.tcx.bound_explicit_item_bounds(def_id).subst_iter_copied(self.tcx, substs).find_map(\n+            |(predicate, _)| {\n+                predicate\n                     .kind()\n                     .map_bound(|kind| match kind {\n                         ty::PredicateKind::Clause(ty::Clause::Projection(projection_predicate))\n@@ -358,14 +357,10 @@ impl<'tcx> InferCtxt<'tcx> {\n                         }\n                         _ => None,\n                     })\n-                    .transpose();\n-                if output.is_some() {\n-                    // We don't account for multiple `Future::Output = Ty` constraints.\n-                    return output;\n-                }\n-            }\n-        }\n-        None\n+                    .no_bound_vars()\n+                    .flatten()\n+            },\n+        )\n     }\n }\n \n@@ -2055,8 +2050,8 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n         }\n \n         match (\n-            self.get_impl_future_output_ty(exp_found.expected).map(Binder::skip_binder),\n-            self.get_impl_future_output_ty(exp_found.found).map(Binder::skip_binder),\n+            self.get_impl_future_output_ty(exp_found.expected),\n+            self.get_impl_future_output_ty(exp_found.found),\n         ) {\n             (Some(exp), Some(found)) if self.same_type_modulo_infer(exp, found) => match cause\n                 .code()"}]}