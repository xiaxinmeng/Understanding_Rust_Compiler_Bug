{"sha": "e2ab2758f2ec15861f4e8e689d77a7a234a600ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyYWIyNzU4ZjJlYzE1ODYxZjRlOGU2ODlkNzdhN2EyMzRhNjAwYWI=", "commit": {"author": {"name": "F\u00e9lix Fischer", "email": "felix91gr@gmail.com", "date": "2020-04-27T22:57:58Z"}, "committer": {"name": "F\u00e9lix Fischer", "email": "felix91gr@gmail.com", "date": "2020-04-28T04:53:44Z"}, "message": "Added MIR const-prop diff tests to show why some assertions now fail at compile-time", "tree": {"sha": "ec4290cc4c4e49533a722c9920c84fc70d623839", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec4290cc4c4e49533a722c9920c84fc70d623839"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2ab2758f2ec15861f4e8e689d77a7a234a600ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2ab2758f2ec15861f4e8e689d77a7a234a600ab", "html_url": "https://github.com/rust-lang/rust/commit/e2ab2758f2ec15861f4e8e689d77a7a234a600ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2ab2758f2ec15861f4e8e689d77a7a234a600ab/comments", "author": {"login": "felix91gr", "id": 11747623, "node_id": "MDQ6VXNlcjExNzQ3NjIz", "avatar_url": "https://avatars.githubusercontent.com/u/11747623?v=4", "gravatar_id": "", "url": "https://api.github.com/users/felix91gr", "html_url": "https://github.com/felix91gr", "followers_url": "https://api.github.com/users/felix91gr/followers", "following_url": "https://api.github.com/users/felix91gr/following{/other_user}", "gists_url": "https://api.github.com/users/felix91gr/gists{/gist_id}", "starred_url": "https://api.github.com/users/felix91gr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/felix91gr/subscriptions", "organizations_url": "https://api.github.com/users/felix91gr/orgs", "repos_url": "https://api.github.com/users/felix91gr/repos", "events_url": "https://api.github.com/users/felix91gr/events{/privacy}", "received_events_url": "https://api.github.com/users/felix91gr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "felix91gr", "id": 11747623, "node_id": "MDQ6VXNlcjExNzQ3NjIz", "avatar_url": "https://avatars.githubusercontent.com/u/11747623?v=4", "gravatar_id": "", "url": "https://api.github.com/users/felix91gr", "html_url": "https://github.com/felix91gr", "followers_url": "https://api.github.com/users/felix91gr/followers", "following_url": "https://api.github.com/users/felix91gr/following{/other_user}", "gists_url": "https://api.github.com/users/felix91gr/gists{/gist_id}", "starred_url": "https://api.github.com/users/felix91gr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/felix91gr/subscriptions", "organizations_url": "https://api.github.com/users/felix91gr/orgs", "repos_url": "https://api.github.com/users/felix91gr/repos", "events_url": "https://api.github.com/users/felix91gr/events{/privacy}", "received_events_url": "https://api.github.com/users/felix91gr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "072649ec5d5a70f3eb87fde8ace2e357e44a3283", "url": "https://api.github.com/repos/rust-lang/rust/commits/072649ec5d5a70f3eb87fde8ace2e357e44a3283", "html_url": "https://github.com/rust-lang/rust/commit/072649ec5d5a70f3eb87fde8ace2e357e44a3283"}], "stats": {"total": 421, "additions": 421, "deletions": 0}, "files": [{"sha": "0cd1f37c9a7879292521ac9da3e6a45a6be60525", "filename": "src/test/mir-opt/const_prop/bad_op_div_by_zero.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e2ab2758f2ec15861f4e8e689d77a7a234a600ab/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_div_by_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ab2758f2ec15861f4e8e689d77a7a234a600ab/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_div_by_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_div_by_zero.rs?ref=e2ab2758f2ec15861f4e8e689d77a7a234a600ab", "patch": "@@ -0,0 +1,6 @@\n+// EMIT_MIR rustc.main.ConstProp.diff\n+#[allow(unconditional_panic)]\n+fn main() {\n+    let y = 0;\n+    let _z = 1 / y;\n+}"}, {"sha": "333bf0e320b6effe8db3a15251aaa8f325e1e8fa", "filename": "src/test/mir-opt/const_prop/bad_op_div_by_zero/rustc.main.ConstProp.diff", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/e2ab2758f2ec15861f4e8e689d77a7a234a600ab/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_div_by_zero%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e2ab2758f2ec15861f4e8e689d77a7a234a600ab/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_div_by_zero%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_div_by_zero%2Frustc.main.ConstProp.diff?ref=e2ab2758f2ec15861f4e8e689d77a7a234a600ab", "patch": "@@ -0,0 +1,117 @@\n+- // MIR for `main` before ConstProp\n++ // MIR for `main` after ConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/bad_op_div_by_zero.rs:3:11: 3:11\n+      let _1: i32;                         // in scope 0 at $DIR/bad_op_div_by_zero.rs:4:9: 4:10\n+      let mut _3: i32;                     // in scope 0 at $DIR/bad_op_div_by_zero.rs:5:18: 5:19\n+      let mut _4: bool;                    // in scope 0 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n+      let mut _5: bool;                    // in scope 0 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n+      let mut _6: bool;                    // in scope 0 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n+      let mut _7: bool;                    // in scope 0 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n+      scope 1 {\n+          debug y => _1;                   // in scope 1 at $DIR/bad_op_div_by_zero.rs:4:9: 4:10\n+          let _2: i32;                     // in scope 1 at $DIR/bad_op_div_by_zero.rs:5:9: 5:11\n+          scope 2 {\n+              debug _z => _2;              // in scope 2 at $DIR/bad_op_div_by_zero.rs:5:9: 5:11\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/bad_op_div_by_zero.rs:4:9: 4:10\n+          _1 = const 0i32;                 // scope 0 at $DIR/bad_op_div_by_zero.rs:4:13: 4:14\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000000))\n+                                           // mir::Constant\n+                                           // + span: $DIR/bad_op_div_by_zero.rs:4:13: 4:14\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n+          StorageLive(_2);                 // scope 1 at $DIR/bad_op_div_by_zero.rs:5:9: 5:11\n+          StorageLive(_3);                 // scope 1 at $DIR/bad_op_div_by_zero.rs:5:18: 5:19\n+-         _3 = _1;                         // scope 1 at $DIR/bad_op_div_by_zero.rs:5:18: 5:19\n+-         _4 = Eq(_3, const 0i32);         // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n++         _3 = const 0i32;                 // scope 1 at $DIR/bad_op_div_by_zero.rs:5:18: 5:19\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000000))\n+                                           // mir::Constant\n+-                                          // + span: $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n++                                          // + span: $DIR/bad_op_div_by_zero.rs:5:18: 5:19\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n++         _4 = const true;                 // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n++                                          // ty::Const\n++                                          // + ty: bool\n++                                          // + val: Value(Scalar(0x01))\n++                                          // mir::Constant\n++                                          // + span: $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n++                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n+          assert(!move _4, \"attempt to divide by zero\") -> bb1; // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n+      }\n+  \n+      bb1: {\n+-         _5 = Eq(_3, const -1i32);        // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n++         _5 = const false;                // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n+                                           // ty::Const\n+-                                          // + ty: i32\n+-                                          // + val: Value(Scalar(0xffffffff))\n++                                          // + ty: bool\n++                                          // + val: Value(Scalar(0x00))\n+                                           // mir::Constant\n+                                           // + span: $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n+-                                          // + literal: Const { ty: i32, val: Value(Scalar(0xffffffff)) }\n+-         _6 = Eq(const 1i32, const std::i32::MIN); // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n++                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n++         _6 = const false;                // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n+                                           // ty::Const\n+-                                          // + ty: i32\n+-                                          // + val: Value(Scalar(0x00000001))\n++                                          // + ty: bool\n++                                          // + val: Value(Scalar(0x00))\n+                                           // mir::Constant\n+-                                          // + span: $DIR/bad_op_div_by_zero.rs:5:14: 5:15\n+-                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n++                                          // + span: $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n++                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n++         _7 = const false;                // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n+                                           // ty::Const\n+-                                          // + ty: i32\n+-                                          // + val: Value(Scalar(0x80000000))\n++                                          // + ty: bool\n++                                          // + val: Value(Scalar(0x00))\n+                                           // mir::Constant\n+                                           // + span: $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n+-                                          // + literal: Const { ty: i32, val: Value(Scalar(0x80000000)) }\n+-         _7 = BitAnd(move _5, move _6);   // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n+-         assert(!move _7, \"attempt to divide with overflow\") -> bb2; // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n++                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n++         assert(!const false, \"attempt to divide with overflow\") -> bb2; // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n++                                          // ty::Const\n++                                          // + ty: bool\n++                                          // + val: Value(Scalar(0x00))\n++                                          // mir::Constant\n++                                          // + span: $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n++                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n+      }\n+  \n+      bb2: {\n+          _2 = Div(const 1i32, move _3);   // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000001))\n+                                           // mir::Constant\n+                                           // + span: $DIR/bad_op_div_by_zero.rs:5:14: 5:15\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n+          StorageDead(_3);                 // scope 1 at $DIR/bad_op_div_by_zero.rs:5:18: 5:19\n+          _0 = const ();                   // scope 0 at $DIR/bad_op_div_by_zero.rs:3:11: 6:2\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/bad_op_div_by_zero.rs:3:11: 6:2\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+          StorageDead(_2);                 // scope 1 at $DIR/bad_op_div_by_zero.rs:6:1: 6:2\n+          StorageDead(_1);                 // scope 0 at $DIR/bad_op_div_by_zero.rs:6:1: 6:2\n+          return;                          // scope 0 at $DIR/bad_op_div_by_zero.rs:6:2: 6:2\n+      }\n+  }\n+  "}, {"sha": "26bccbb90ec82f7c9b82d44a995e9f4c364797a3", "filename": "src/test/mir-opt/const_prop/bad_op_mod_by_zero.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e2ab2758f2ec15861f4e8e689d77a7a234a600ab/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ab2758f2ec15861f4e8e689d77a7a234a600ab/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero.rs?ref=e2ab2758f2ec15861f4e8e689d77a7a234a600ab", "patch": "@@ -0,0 +1,6 @@\n+// EMIT_MIR rustc.main.ConstProp.diff\n+#[allow(unconditional_panic)]\n+fn main() {\n+    let y = 0;\n+    let _z = 1 % y;\n+}"}, {"sha": "c081b46366e9b56151b58dd7239888b833f189b6", "filename": "src/test/mir-opt/const_prop/bad_op_mod_by_zero/rustc.main.ConstProp.diff", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/e2ab2758f2ec15861f4e8e689d77a7a234a600ab/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e2ab2758f2ec15861f4e8e689d77a7a234a600ab/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero%2Frustc.main.ConstProp.diff?ref=e2ab2758f2ec15861f4e8e689d77a7a234a600ab", "patch": "@@ -0,0 +1,117 @@\n+- // MIR for `main` before ConstProp\n++ // MIR for `main` after ConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/bad_op_mod_by_zero.rs:3:11: 3:11\n+      let _1: i32;                         // in scope 0 at $DIR/bad_op_mod_by_zero.rs:4:9: 4:10\n+      let mut _3: i32;                     // in scope 0 at $DIR/bad_op_mod_by_zero.rs:5:18: 5:19\n+      let mut _4: bool;                    // in scope 0 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n+      let mut _5: bool;                    // in scope 0 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n+      let mut _6: bool;                    // in scope 0 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n+      let mut _7: bool;                    // in scope 0 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n+      scope 1 {\n+          debug y => _1;                   // in scope 1 at $DIR/bad_op_mod_by_zero.rs:4:9: 4:10\n+          let _2: i32;                     // in scope 1 at $DIR/bad_op_mod_by_zero.rs:5:9: 5:11\n+          scope 2 {\n+              debug _z => _2;              // in scope 2 at $DIR/bad_op_mod_by_zero.rs:5:9: 5:11\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/bad_op_mod_by_zero.rs:4:9: 4:10\n+          _1 = const 0i32;                 // scope 0 at $DIR/bad_op_mod_by_zero.rs:4:13: 4:14\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000000))\n+                                           // mir::Constant\n+                                           // + span: $DIR/bad_op_mod_by_zero.rs:4:13: 4:14\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n+          StorageLive(_2);                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:9: 5:11\n+          StorageLive(_3);                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:18: 5:19\n+-         _3 = _1;                         // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:18: 5:19\n+-         _4 = Eq(_3, const 0i32);         // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n++         _3 = const 0i32;                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:18: 5:19\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000000))\n+                                           // mir::Constant\n+-                                          // + span: $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n++                                          // + span: $DIR/bad_op_mod_by_zero.rs:5:18: 5:19\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n++         _4 = const true;                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n++                                          // ty::Const\n++                                          // + ty: bool\n++                                          // + val: Value(Scalar(0x01))\n++                                          // mir::Constant\n++                                          // + span: $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n++                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n+          assert(!move _4, \"attempt to calculate the remainder with a divisor of zero\") -> bb1; // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n+      }\n+  \n+      bb1: {\n+-         _5 = Eq(_3, const -1i32);        // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n++         _5 = const false;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n+                                           // ty::Const\n+-                                          // + ty: i32\n+-                                          // + val: Value(Scalar(0xffffffff))\n++                                          // + ty: bool\n++                                          // + val: Value(Scalar(0x00))\n+                                           // mir::Constant\n+                                           // + span: $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n+-                                          // + literal: Const { ty: i32, val: Value(Scalar(0xffffffff)) }\n+-         _6 = Eq(const 1i32, const std::i32::MIN); // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n++                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n++         _6 = const false;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n+                                           // ty::Const\n+-                                          // + ty: i32\n+-                                          // + val: Value(Scalar(0x00000001))\n++                                          // + ty: bool\n++                                          // + val: Value(Scalar(0x00))\n+                                           // mir::Constant\n+-                                          // + span: $DIR/bad_op_mod_by_zero.rs:5:14: 5:15\n+-                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n++                                          // + span: $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n++                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n++         _7 = const false;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n+                                           // ty::Const\n+-                                          // + ty: i32\n+-                                          // + val: Value(Scalar(0x80000000))\n++                                          // + ty: bool\n++                                          // + val: Value(Scalar(0x00))\n+                                           // mir::Constant\n+                                           // + span: $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n+-                                          // + literal: Const { ty: i32, val: Value(Scalar(0x80000000)) }\n+-         _7 = BitAnd(move _5, move _6);   // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n+-         assert(!move _7, \"attempt to calculate the remainder with overflow\") -> bb2; // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n++                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n++         assert(!const false, \"attempt to calculate the remainder with overflow\") -> bb2; // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n++                                          // ty::Const\n++                                          // + ty: bool\n++                                          // + val: Value(Scalar(0x00))\n++                                          // mir::Constant\n++                                          // + span: $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n++                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n+      }\n+  \n+      bb2: {\n+          _2 = Rem(const 1i32, move _3);   // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000001))\n+                                           // mir::Constant\n+                                           // + span: $DIR/bad_op_mod_by_zero.rs:5:14: 5:15\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n+          StorageDead(_3);                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:18: 5:19\n+          _0 = const ();                   // scope 0 at $DIR/bad_op_mod_by_zero.rs:3:11: 6:2\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/bad_op_mod_by_zero.rs:3:11: 6:2\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+          StorageDead(_2);                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:6:1: 6:2\n+          StorageDead(_1);                 // scope 0 at $DIR/bad_op_mod_by_zero.rs:6:1: 6:2\n+          return;                          // scope 0 at $DIR/bad_op_mod_by_zero.rs:6:2: 6:2\n+      }\n+  }\n+  "}, {"sha": "e517e467c372cc2bcff3f8c908aa2cc47ad1e16e", "filename": "src/test/mir-opt/const_prop/bad_op_unsafe_oob_for_slices.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e2ab2758f2ec15861f4e8e689d77a7a234a600ab/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ab2758f2ec15861f4e8e689d77a7a234a600ab/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.rs?ref=e2ab2758f2ec15861f4e8e689d77a7a234a600ab", "patch": "@@ -0,0 +1,9 @@\n+// EMIT_MIR_FOR_EACH_BIT_WIDTH\n+// EMIT_MIR rustc.main.ConstProp.diff\n+#[allow(unconditional_panic)]\n+fn main() {\n+    let a: *const [_] = &[1, 2, 3];\n+    unsafe {\n+        let _b = (*a)[3];\n+    }\n+}"}, {"sha": "8ecb77752bb395b4f47e119746eb4cbb4a89531e", "filename": "src/test/mir-opt/const_prop/bad_op_unsafe_oob_for_slices/32bit/rustc.main.ConstProp.diff", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/e2ab2758f2ec15861f4e8e689d77a7a234a600ab/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices%2F32bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e2ab2758f2ec15861f4e8e689d77a7a234a600ab/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices%2F32bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices%2F32bit%2Frustc.main.ConstProp.diff?ref=e2ab2758f2ec15861f4e8e689d77a7a234a600ab", "patch": "@@ -0,0 +1,83 @@\n+- // MIR for `main` before ConstProp\n++ // MIR for `main` after ConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:4:11: 4:11\n+      let _1: *const [i32] as UserTypeProjection { base: UserType(0), projs: [] }; // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:9: 5:10\n+      let mut _2: *const [i32; 3];         // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n+      let _3: &[i32; 3];                   // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n+      let _4: [i32; 3];                    // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:26: 5:35\n+      let _6: usize;                       // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:23: 7:24\n+      let mut _7: usize;                   // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n+      let mut _8: bool;                    // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n+      let mut _9: &[i32; 3];               // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n+      scope 1 {\n+          debug a => _1;                   // in scope 1 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:9: 5:10\n+          scope 2 {\n+              let _5: i32;                 // in scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:13: 7:15\n+              scope 3 {\n+                  debug _b => _5;          // in scope 3 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:13: 7:15\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:9: 5:10\n+          StorageLive(_2);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n+          StorageLive(_3);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n+          _9 = const main::promoted[0];    // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n+                                           // ty::Const\n+                                           // + ty: &[i32; 3]\n+                                           // + val: Unevaluated(DefId(0:3 ~ bad_op_unsafe_oob_for_slices[317d]::main[0]), [], Some(promoted[0]))\n+                                           // mir::Constant\n+                                           // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n+                                           // + literal: Const { ty: &[i32; 3], val: Unevaluated(DefId(0:3 ~ bad_op_unsafe_oob_for_slices[317d]::main[0]), [], Some(promoted[0])) }\n+          _3 = _9;                         // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n+          _2 = &raw const (*_3);           // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n+          _1 = move _2 as *const [i32] (Pointer(Unsize)); // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n+          StorageDead(_2);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:34: 5:35\n+          StorageDead(_3);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:35: 5:36\n+          StorageLive(_5);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:13: 7:15\n+          StorageLive(_6);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:23: 7:24\n+          _6 = const 3usize;               // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:23: 7:24\n+                                           // ty::Const\n+                                           // + ty: usize\n+                                           // + val: Value(Scalar(0x00000003))\n+                                           // mir::Constant\n+                                           // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:7:23: 7:24\n+                                           // + literal: Const { ty: usize, val: Value(Scalar(0x00000003)) }\n+-         _7 = Len((*_1));                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n+-         _8 = Lt(_6, _7);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n++         _7 = const 3usize;               // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n++                                          // ty::Const\n++                                          // + ty: usize\n++                                          // + val: Value(Scalar(0x00000003))\n++                                          // mir::Constant\n++                                          // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n++                                          // + literal: Const { ty: usize, val: Value(Scalar(0x00000003)) }\n++         _8 = const false;                // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n++                                          // ty::Const\n++                                          // + ty: bool\n++                                          // + val: Value(Scalar(0x00))\n++                                          // mir::Constant\n++                                          // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n++                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n+          assert(move _8, \"index out of bounds: the len is {} but the index is {}\", move _7, _6) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n+      }\n+  \n+      bb1: {\n+          _5 = (*_1)[_6];                  // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n+          StorageDead(_6);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:25: 7:26\n+          _0 = const ();                   // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:6:5: 8:6\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:6:5: 8:6\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+          StorageDead(_5);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:8:5: 8:6\n+          StorageDead(_1);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:9:1: 9:2\n+          return;                          // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:9:2: 9:2\n+      }\n+  }\n+  "}, {"sha": "2778ec02724df89826fcc9fc5c4dce22edff18bf", "filename": "src/test/mir-opt/const_prop/bad_op_unsafe_oob_for_slices/64bit/rustc.main.ConstProp.diff", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/e2ab2758f2ec15861f4e8e689d77a7a234a600ab/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices%2F64bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e2ab2758f2ec15861f4e8e689d77a7a234a600ab/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices%2F64bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices%2F64bit%2Frustc.main.ConstProp.diff?ref=e2ab2758f2ec15861f4e8e689d77a7a234a600ab", "patch": "@@ -0,0 +1,83 @@\n+- // MIR for `main` before ConstProp\n++ // MIR for `main` after ConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:4:11: 4:11\n+      let _1: *const [i32] as UserTypeProjection { base: UserType(0), projs: [] }; // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:9: 5:10\n+      let mut _2: *const [i32; 3];         // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n+      let _3: &[i32; 3];                   // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n+      let _4: [i32; 3];                    // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:26: 5:35\n+      let _6: usize;                       // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:23: 7:24\n+      let mut _7: usize;                   // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n+      let mut _8: bool;                    // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n+      let mut _9: &[i32; 3];               // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n+      scope 1 {\n+          debug a => _1;                   // in scope 1 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:9: 5:10\n+          scope 2 {\n+              let _5: i32;                 // in scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:13: 7:15\n+              scope 3 {\n+                  debug _b => _5;          // in scope 3 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:13: 7:15\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:9: 5:10\n+          StorageLive(_2);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n+          StorageLive(_3);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n+          _9 = const main::promoted[0];    // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n+                                           // ty::Const\n+                                           // + ty: &[i32; 3]\n+                                           // + val: Unevaluated(DefId(0:3 ~ bad_op_unsafe_oob_for_slices[317d]::main[0]), [], Some(promoted[0]))\n+                                           // mir::Constant\n+                                           // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n+                                           // + literal: Const { ty: &[i32; 3], val: Unevaluated(DefId(0:3 ~ bad_op_unsafe_oob_for_slices[317d]::main[0]), [], Some(promoted[0])) }\n+          _3 = _9;                         // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n+          _2 = &raw const (*_3);           // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n+          _1 = move _2 as *const [i32] (Pointer(Unsize)); // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n+          StorageDead(_2);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:34: 5:35\n+          StorageDead(_3);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:35: 5:36\n+          StorageLive(_5);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:13: 7:15\n+          StorageLive(_6);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:23: 7:24\n+          _6 = const 3usize;               // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:23: 7:24\n+                                           // ty::Const\n+                                           // + ty: usize\n+                                           // + val: Value(Scalar(0x0000000000000003))\n+                                           // mir::Constant\n+                                           // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:7:23: 7:24\n+                                           // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000003)) }\n+-         _7 = Len((*_1));                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n+-         _8 = Lt(_6, _7);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n++         _7 = const 3usize;               // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n++                                          // ty::Const\n++                                          // + ty: usize\n++                                          // + val: Value(Scalar(0x0000000000000003))\n++                                          // mir::Constant\n++                                          // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n++                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000003)) }\n++         _8 = const false;                // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n++                                          // ty::Const\n++                                          // + ty: bool\n++                                          // + val: Value(Scalar(0x00))\n++                                          // mir::Constant\n++                                          // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n++                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n+          assert(move _8, \"index out of bounds: the len is {} but the index is {}\", move _7, _6) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n+      }\n+  \n+      bb1: {\n+          _5 = (*_1)[_6];                  // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n+          StorageDead(_6);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:25: 7:26\n+          _0 = const ();                   // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:6:5: 8:6\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:6:5: 8:6\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+          StorageDead(_5);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:8:5: 8:6\n+          StorageDead(_1);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:9:1: 9:2\n+          return;                          // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:9:2: 9:2\n+      }\n+  }\n+  "}]}