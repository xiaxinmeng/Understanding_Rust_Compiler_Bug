{"sha": "2ab69aef03f9744381e4a0cedb397c34d191f4f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhYjY5YWVmMDNmOTc0NDM4MWU0YTBjZWRiMzk3YzM0ZDE5MWY0Zjc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-24T13:51:48Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-24T17:57:05Z"}, "message": "typeck/pat.rs: extract `new_ref_ty`.", "tree": {"sha": "8b492811789fbe3bf2b4abbab749af98b0be848c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b492811789fbe3bf2b4abbab749af98b0be848c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ab69aef03f9744381e4a0cedb397c34d191f4f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ab69aef03f9744381e4a0cedb397c34d191f4f7", "html_url": "https://github.com/rust-lang/rust/commit/2ab69aef03f9744381e4a0cedb397c34d191f4f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ab69aef03f9744381e4a0cedb397c34d191f4f7/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97986b57046a7af6d5ec1eeca7a19346131dec59", "url": "https://api.github.com/repos/rust-lang/rust/commits/97986b57046a7af6d5ec1eeca7a19346131dec59", "html_url": "https://github.com/rust-lang/rust/commit/97986b57046a7af6d5ec1eeca7a19346131dec59"}], "stats": {"total": 15, "additions": 9, "deletions": 6}, "files": [{"sha": "ac025754ffbae04830d27eb2db8ecc6f1ce6ea9d", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2ab69aef03f9744381e4a0cedb397c34d191f4f7/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ab69aef03f9744381e4a0cedb397c34d191f4f7/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=2ab69aef03f9744381e4a0cedb397c34d191f4f7", "patch": "@@ -426,9 +426,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // If the binding is like `ref x | ref const x | ref mut x`\n                 // then `x` is assigned a value of type `&M T` where M is the\n                 // mutability and T is the expected type.\n-                let region_var = self.next_region_var(infer::PatternRegion(pat.span));\n-                let mt = ty::TypeAndMut { ty: expected, mutbl };\n-                let region_ty = self.tcx.mk_ref(region_var, mt);\n+                let region_ty = self.new_ref_ty(pat.span, mutbl, expected);\n \n                 // `x` is assigned a value of type `&M T`, hence `&M T <: typeof(x)`\n                 // is required. However, we use equality, which is stronger.\n@@ -971,9 +969,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             span: inner.span,\n                         }\n                     );\n-                    let mt = ty::TypeAndMut { ty: inner_ty, mutbl };\n-                    let region = self.next_region_var(infer::PatternRegion(pat.span));\n-                    let rptr_ty = tcx.mk_ref(region, mt);\n+                    let rptr_ty = self.new_ref_ty(pat.span, mutbl, inner_ty);\n                     debug!(\"check_pat_ref: demanding {:?} = {:?}\", expected, rptr_ty);\n                     let err = self.demand_eqtype_diag(pat.span, expected, rptr_ty);\n \n@@ -995,6 +991,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n+    /// Create a reference type with a fresh region variable.\n+    fn new_ref_ty(&self, span: Span, mutbl: hir::Mutability, ty: Ty<'tcx>) -> Ty<'tcx> {\n+        let region = self.next_region_var(infer::PatternRegion(span));\n+        let mt = ty::TypeAndMut { ty, mutbl };\n+        self.tcx.mk_ref(region, mt)\n+    }\n+\n     fn check_pat_slice(\n         &self,\n         span: Span,"}]}