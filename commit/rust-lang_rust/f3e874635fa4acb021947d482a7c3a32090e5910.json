{"sha": "f3e874635fa4acb021947d482a7c3a32090e5910", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzZTg3NDYzNWZhNGFjYjAyMTk0N2Q0ODJhN2MzYTMyMDkwZTU5MTA=", "commit": {"author": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-07-10T23:37:44Z"}, "committer": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-07-11T19:06:47Z"}, "message": "Fix (I think!) the ACTUALLY expr parsing situation.", "tree": {"sha": "43a65d7589ba1903f86172cbae90825b366d605f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43a65d7589ba1903f86172cbae90825b366d605f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3e874635fa4acb021947d482a7c3a32090e5910", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3e874635fa4acb021947d482a7c3a32090e5910", "html_url": "https://github.com/rust-lang/rust/commit/f3e874635fa4acb021947d482a7c3a32090e5910", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3e874635fa4acb021947d482a7c3a32090e5910/comments", "author": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf88ff52178d1703c473c4ee9461348bbf4be7a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf88ff52178d1703c473c4ee9461348bbf4be7a2", "html_url": "https://github.com/rust-lang/rust/commit/bf88ff52178d1703c473c4ee9461348bbf4be7a2"}], "stats": {"total": 36, "additions": 4, "deletions": 32}, "files": [{"sha": "1a60d46f5e59c629793a7abbf26e87e545a512d8", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 32, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f3e874635fa4acb021947d482a7c3a32090e5910/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3e874635fa4acb021947d482a7c3a32090e5910/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=f3e874635fa4acb021947d482a7c3a32090e5910", "patch": "@@ -101,24 +101,7 @@ type item_info = (ident, item_, option<~[attribute]>);\n \n fn dummy() {\n \n-/* We need to position the macros to capture the ACTUALLY tokens before they\n-get bumped away. So two bumps in a row is bad. (the first lookahead also\n-counts as a bump).\n-\n-Events happen L to R; 'B' indicates a bump before hand:\n-           ._____________________________.________________________.\n-           \u2193                            B|                        |\n-   parse_expr -> parse_expr_res -> parse_assign_expr              |\n-                                    \u2193                             |\n-                            parse_binops -> parse_more_binops     |\n-                             \u2193             B\u2193                    B|\n-                            parse_prefix_expr B-> parse_dot_or_call_expr\n-                             B|_\u2191                  \u2193\n-                                                  parse_bottom_expr\n-                                                  B\u2193\n-                                            \u22ef->parse_ident\n-...so we've hit parse_prefix_expr, parse_more_binops, and parse_bottom_expr.\n-*/\n+\n \n     #macro[[#maybe_whole_item[p],\n             alt copy p.token {\n@@ -136,18 +119,9 @@ Events happen L to R; 'B' indicates a bump before hand:\n             alt copy p.token {\n                 ACTUALLY(token::w_pat(pt)) { p.bump(); ret pt; }\n                 _ {} }]];\n-    #macro[[#maybe_whole_expr[p],\n-            alt copy p.token {\n-                ACTUALLY(token::w_expr(e)) {\n-                    p.bump();\n-                    ret e;\n-                }\n-                ACTUALLY(token::w_path(pt)) {\n-                    p.bump();\n-                    ret p.mk_expr(p.span.lo, p.span.lo,\n-                                  expr_path(pt));\n-                }\n-                _ {} }]];\n+    /* The expr situation is not as complex as I thought it would be.\n+    The important thing is to make sure that lookahead doesn't balk\n+    at ACTUALLY tokens */\n     #macro[[#maybe_whole_expr_pexpr[p], /* ack! */\n             alt copy p.token {\n                 ACTUALLY(token::w_expr(e)) {\n@@ -1302,7 +1276,6 @@ class parser {\n \n \n     fn parse_prefix_expr() -> pexpr {\n-        #maybe_whole_expr_pexpr[self];\n         let lo = self.span.lo;\n         let mut hi;\n \n@@ -1380,7 +1353,6 @@ class parser {\n \n     fn parse_more_binops(plhs: pexpr, min_prec: uint) ->\n         @expr {\n-        #maybe_whole_expr[self];\n         let lhs = self.to_expr(plhs);\n         if self.expr_is_complete(plhs) { ret lhs; }\n         let peeked = self.token;"}]}