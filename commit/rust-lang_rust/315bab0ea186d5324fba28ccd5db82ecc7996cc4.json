{"sha": "315bab0ea186d5324fba28ccd5db82ecc7996cc4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxNWJhYjBlYTE4NmQ1MzI0ZmJhMjhjY2Q1ZGI4MmVjYzc5OTZjYzQ=", "commit": {"author": {"name": "Piti the little Light", "email": "djhlinacz@gmail.com", "date": "2020-09-10T18:14:23Z"}, "committer": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2020-11-03T15:42:28Z"}, "message": "Add `from_iter_instead_of_collect` lint implementation", "tree": {"sha": "41d97d59fa00261fb2d18b81f56ae56b7c7b12a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41d97d59fa00261fb2d18b81f56ae56b7c7b12a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/315bab0ea186d5324fba28ccd5db82ecc7996cc4", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE2r96VLqbr4DI+7ylr8A1RIkIeHcFAl+hemYACgkQr8A1RIkI\neHfzmw//dvGOxCtPGMvHne12eeG0b59qRMcBqjz+6I7RxpGO6JYE45KqBlxp+A07\nCoOhUf/C/MP+ZXaEYq+CwqYtpQ+Iv4iQlZMzBtWz0TvDd7wnOZn3jm4hyLvxc3tZ\nQQVorj9mrgu6JbwTv3uMs7pymuVrDykIuwFIyoO974cm8rNd8vqKEwuHHeg8iF2M\nlKEpHtLz+Fn/Wf/kvek7Q8va8yrsQD4pZWG6n5CKcWX8JkNVADnBPtN310YJ50FO\n8SxhYvGCR0qDD1wW/xPBw8YvW2k2k9Jus0DlSY73qqgSGAjfhWyV0h5maibvM03Y\npM0Q1i3bJgCUwzuWothb8b1MgzSD7Ftcnopd5aU0AjaOMGjQJGMiry23r0IZu/Ey\nuvEjtZ8axCWn9HR4MG1a+A7C7BrFsc50Socejjs9jjPdVgn/dQEMZihlVmzLBPhG\nAug9vTovd5ej/bFrLiGVc35PC4hoypJC/NPxp/C7Ljz7z8k2G50gYEGkKFZ1Uo0x\nD4blQIq+j4bQD19KToYCckf5apdGyDSdsu++SzEg2EeNm488L62kRi+r7xmVdiG7\ne3yJOgoXAbXWW27RWWkj0EaYT4VgA+o4fKb9Rw3L7erCe59+L1tjWftEXSmBDN4n\nFMB3eS3L3pwU5VEHlVYsI7p4491XrdQaOGrdxy0W/WO3+c2NJIM=\n=39K4\n-----END PGP SIGNATURE-----", "payload": "tree 41d97d59fa00261fb2d18b81f56ae56b7c7b12a8\nparent c45255b14573e9cf641a766d225bc73ae7f36fc8\nauthor Piti the little Light <djhlinacz@gmail.com> 1599761663 +0200\ncommitter flip1995 <philipp.krones@embecosm.com> 1604418148 +0100\n\nAdd `from_iter_instead_of_collect` lint implementation\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/315bab0ea186d5324fba28ccd5db82ecc7996cc4", "html_url": "https://github.com/rust-lang/rust/commit/315bab0ea186d5324fba28ccd5db82ecc7996cc4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/315bab0ea186d5324fba28ccd5db82ecc7996cc4/comments", "author": {"login": "pitiK3U", "id": 33703129, "node_id": "MDQ6VXNlcjMzNzAzMTI5", "avatar_url": "https://avatars.githubusercontent.com/u/33703129?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pitiK3U", "html_url": "https://github.com/pitiK3U", "followers_url": "https://api.github.com/users/pitiK3U/followers", "following_url": "https://api.github.com/users/pitiK3U/following{/other_user}", "gists_url": "https://api.github.com/users/pitiK3U/gists{/gist_id}", "starred_url": "https://api.github.com/users/pitiK3U/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pitiK3U/subscriptions", "organizations_url": "https://api.github.com/users/pitiK3U/orgs", "repos_url": "https://api.github.com/users/pitiK3U/repos", "events_url": "https://api.github.com/users/pitiK3U/events{/privacy}", "received_events_url": "https://api.github.com/users/pitiK3U/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c45255b14573e9cf641a766d225bc73ae7f36fc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c45255b14573e9cf641a766d225bc73ae7f36fc8", "html_url": "https://github.com/rust-lang/rust/commit/c45255b14573e9cf641a766d225bc73ae7f36fc8"}], "stats": {"total": 60, "additions": 60, "deletions": 0}, "files": [{"sha": "93b5d4e7efc9439bde5b570acbc6fda998d09882", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/315bab0ea186d5324fba28ccd5db82ecc7996cc4/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315bab0ea186d5324fba28ccd5db82ecc7996cc4/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=315bab0ea186d5324fba28ccd5db82ecc7996cc4", "patch": "@@ -1369,6 +1369,38 @@ declare_clippy_lint! {\n     \"using `.map(_).collect::<Result<(),_>()`, which can be replaced with `try_for_each`\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for `from_iter()` function calls that implements `FromIterator`\n+    /// trait.\n+    ///\n+    /// **Why is this bad?** Makes code less readable especially in method chaining.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// use std::iter::FromIterator;\n+    ///\n+    /// let five_fives = std::iter::repeat(5).take(5);\n+    ///\n+    /// let v = Vec::from_iter(five_fives);\n+    ///\n+    /// assert_eq!(v, vec![5, 5, 5, 5, 5]);\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// let five_fives = std::iter::repeat(5).take(5);\n+    ///\n+    /// let v: Vec<i32> = five_fives.collect();\n+    ///\n+    /// assert_eq!(v, vec![5, 5, 5, 5, 5]);\n+    /// ```\n+    pub FROM_ITER_INSTEAD_OF_COLLECT,\n+    style,\n+    \"use `.collect()` instead of `::from_iter()`\"\n+}\n+\n declare_lint_pass!(Methods => [\n     UNWRAP_USED,\n     EXPECT_USED,\n@@ -1419,6 +1451,7 @@ declare_lint_pass!(Methods => [\n     OPTION_AS_REF_DEREF,\n     UNNECESSARY_LAZY_EVALUATIONS,\n     MAP_COLLECT_RESULT_UNIT,\n+    FROM_ITER_INSTEAD_OF_COLLECT,\n ]);\n \n impl<'tcx> LateLintPass<'tcx> for Methods {\n@@ -1505,6 +1538,14 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n         }\n \n         match expr.kind {\n+            hir::ExprKind::Call(ref func, ref args) => {\n+                if let hir::ExprKind::Path(path) = &func.kind {\n+                    let path_segment = last_path_segment(path);\n+                    if path_segment.ident.name.as_str() == \"from_iter\" {\n+                        lint_from_iter(cx, expr, args);\n+                    }\n+                }\n+            },\n             hir::ExprKind::MethodCall(ref method_call, ref method_span, ref args, _) => {\n                 lint_or_fun_call(cx, expr, *method_span, &method_call.ident.as_str(), args);\n                 lint_expect_fun_call(cx, expr, *method_span, &method_call.ident.as_str(), args);\n@@ -3831,6 +3872,24 @@ fn lint_filetype_is_file(cx: &LateContext<'_>, expr: &hir::Expr<'_>, args: &[hir\n     span_lint_and_help(cx, FILETYPE_IS_FILE, span, &lint_msg, None, &help_msg);\n }\n \n+fn lint_from_iter(cx: &LateContext<'_>, expr: &hir::Expr<'_>, args: &[hir::Expr<'_>]) {\n+    let ty = cx.typeck_results().expr_ty(expr);\n+    let id = get_trait_def_id(cx, &paths::FROM_ITERATOR_TRAIT).unwrap();\n+\n+    if implements_trait(cx, ty, id, &[]) {\n+        // `expr` implements `FromIterator` trait\n+        let iter_expr = snippet(cx, args[0].span, \"..\");\n+        span_lint_and_help(\n+            cx,\n+            FROM_ITER_INSTEAD_OF_COLLECT,\n+            expr.span,\n+            \"use `.collect()` instead of `::from_iter()`\",\n+            None,\n+            &format!(\"consider using `{}.collect()`\", iter_expr),\n+        );\n+    }\n+}\n+\n fn fn_header_equals(expected: hir::FnHeader, actual: hir::FnHeader) -> bool {\n     expected.constness == actual.constness\n         && expected.unsafety == actual.unsafety"}, {"sha": "3aade8ca8a2f30d7138aac6f08acbbce4f864695", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/315bab0ea186d5324fba28ccd5db82ecc7996cc4/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315bab0ea186d5324fba28ccd5db82ecc7996cc4/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=315bab0ea186d5324fba28ccd5db82ecc7996cc4", "patch": "@@ -44,6 +44,7 @@ pub const FN: [&str; 3] = [\"core\", \"ops\", \"Fn\"];\n pub const FN_MUT: [&str; 3] = [\"core\", \"ops\", \"FnMut\"];\n pub const FN_ONCE: [&str; 3] = [\"core\", \"ops\", \"FnOnce\"];\n pub const FROM_FROM: [&str; 4] = [\"core\", \"convert\", \"From\", \"from\"];\n+pub const FROM_ITERATOR_TRAIT: [&str; 3] = [\"std\", \"iter\", \"FromIterator\"];\n pub const FROM_TRAIT: [&str; 3] = [\"core\", \"convert\", \"From\"];\n pub const FUTURE_FROM_GENERATOR: [&str; 3] = [\"core\", \"future\", \"from_generator\"];\n pub const HASH: [&str; 3] = [\"core\", \"hash\", \"Hash\"];"}]}