{"sha": "b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxZGUzNTE5YzlmOTQ3ZjVjYmM1MjU3MTliOTM2NWYyZmQ1OGY3Zjk=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2018-05-26T17:22:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-05-26T17:22:54Z"}, "message": "Rollup merge of #51057 - pnkfelix:issue-51025-make-ui-tests-robust-wrt-nll, r=nikomatsakis\n\nmake ui tests robust with respect to NLL\n\nThis PR revises the `ui` tests that I could quickly identify that:\n 1. previously had successful compilations under non-lexical lifetimes (NLL) because they assumed lexical lifetimes, but\n 2. such assumption of lexical lifetimes was actually not necessarily part of the spirit of the original issue/bug we want to witness.\n\nIn many cases, this is simply a matter of adding a use of a borrow so that it gets extended long enough to observe a conflict.\n\n(In some cases the revision was more subtle, such as adding a destructor, or revising the order of declaration of some variables.)\n\n----\n\nWith these test revisions in place, I subsequently updated the expected stderr output under the NLL compiletest mode. So now we should get even more testing of NLL than we were before.\n\nFix #51025", "tree": {"sha": "5595b703caec066036e060f3863fe682c335c68d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5595b703caec066036e060f3863fe682c335c68d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbCZfuCRBK7hj4Ov3rIwAAdHIIAJ1snIKjVExfMWB2mWVtbyHp\nS9XQPBKePAvrK0yXhNzti70WT+L+am39Qdvm9DtY2y9/SaT7v3/dHDciNVr+98Mf\nN3Fu4yQFlco8+Jh+Xf3njg9FXAcUnhqSXTFTs5UBnRnEpfVctBQ0POUjFyxKO00G\n/DAPeW/V+dJhCZawnoLMcOzukTIrOCjH9CijAG0W/aaoeCO6r83wECPtWNhDP8BN\noIt51nAFNi1QxMi2/c0eQdmM7W2R9XGzIlsA30MBkV0PoHu+Wk/RUTR2MuCIwX0f\nPv1EuY56k+pDjKBdU9FWnWd3xWUamfPN4fiE0z4sryla6HJXwwMoCFThZSsDkyM=\n=ptfO\n-----END PGP SIGNATURE-----\n", "payload": "tree 5595b703caec066036e060f3863fe682c335c68d\nparent 90b7bf6e0a7c9ecd32bc7fd96a76e5e800f3e6ea\nparent d8bd5336c90764ca90e0e6f0df5bb309167e872c\nauthor Mark Simulacrum <mark.simulacrum@gmail.com> 1527355374 -0600\ncommitter GitHub <noreply@github.com> 1527355374 -0600\n\nRollup merge of #51057 - pnkfelix:issue-51025-make-ui-tests-robust-wrt-nll, r=nikomatsakis\n\nmake ui tests robust with respect to NLL\n\nThis PR revises the `ui` tests that I could quickly identify that:\n 1. previously had successful compilations under non-lexical lifetimes (NLL) because they assumed lexical lifetimes, but\n 2. such assumption of lexical lifetimes was actually not necessarily part of the spirit of the original issue/bug we want to witness.\n\nIn many cases, this is simply a matter of adding a use of a borrow so that it gets extended long enough to observe a conflict.\n\n(In some cases the revision was more subtle, such as adding a destructor, or revising the order of declaration of some variables.)\n\n----\n\nWith these test revisions in place, I subsequently updated the expected stderr output under the NLL compiletest mode. So now we should get even more testing of NLL than we were before.\n\nFix #51025\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "html_url": "https://github.com/rust-lang/rust/commit/b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90b7bf6e0a7c9ecd32bc7fd96a76e5e800f3e6ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/90b7bf6e0a7c9ecd32bc7fd96a76e5e800f3e6ea", "html_url": "https://github.com/rust-lang/rust/commit/90b7bf6e0a7c9ecd32bc7fd96a76e5e800f3e6ea"}, {"sha": "d8bd5336c90764ca90e0e6f0df5bb309167e872c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8bd5336c90764ca90e0e6f0df5bb309167e872c", "html_url": "https://github.com/rust-lang/rust/commit/d8bd5336c90764ca90e0e6f0df5bb309167e872c"}], "stats": {"total": 1087, "additions": 725, "deletions": 362}, "files": [{"sha": "fa600f0559f17e63274796c5cdec189968804b35", "filename": "src/test/ui/borrowck/borrowck-report-with-custom-diagnostic.nll.stderr", "status": "modified", "additions": 37, "deletions": 11, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-report-with-custom-diagnostic.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-report-with-custom-diagnostic.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-report-with-custom-diagnostic.nll.stderr?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -1,14 +1,40 @@\n-error: compilation successful\n-  --> $DIR/borrowck-report-with-custom-diagnostic.rs:12:1\n+error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-report-with-custom-diagnostic.rs:17:13\n    |\n-LL | / fn main() { #![rustc_error] // rust-lang/rust#49855\n-LL | |     // Original borrow ends at end of function\n-LL | |     let mut x = 1;\n-LL | |     let y = &mut x;\n-...  |\n-LL | |     //~^ immutable borrow occurs here\n-LL | | }\n-   | |_^\n+LL |     let y = &mut x;\n+   |             ------ mutable borrow occurs here\n+LL |     //~^ mutable borrow occurs here\n+LL |     let z = &x; //~ ERROR cannot borrow\n+   |             ^^ immutable borrow occurs here\n+...\n+LL |     y.use_mut();\n+   |     - borrow later used here\n \n-error: aborting due to previous error\n+error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-report-with-custom-diagnostic.rs:30:21\n+   |\n+LL |             let y = &x;\n+   |                     -- immutable borrow occurs here\n+LL |             //~^ immutable borrow occurs here\n+LL |             let z = &mut x; //~ ERROR cannot borrow\n+   |                     ^^^^^^ mutable borrow occurs here\n+...\n+LL |             y.use_ref();\n+   |             - borrow later used here\n+\n+error[E0499]: cannot borrow `x` as mutable more than once at a time\n+  --> $DIR/borrowck-report-with-custom-diagnostic.rs:45:17\n+   |\n+LL |         let y = &mut x;\n+   |                 ------ first mutable borrow occurs here\n+LL |         //~^ first mutable borrow occurs here\n+LL |         let z = &mut x; //~ ERROR cannot borrow\n+   |                 ^^^^^^ second mutable borrow occurs here\n+...\n+LL |         y.use_mut();\n+   |         - borrow later used here\n+\n+error: aborting due to 3 previous errors\n \n+Some errors occurred: E0499, E0502.\n+For more information about an error, try `rustc --explain E0499`."}, {"sha": "2bc65287982af0f431171a5b0366a6d49113c4a4", "filename": "src/test/ui/borrowck/borrowck-report-with-custom-diagnostic.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-report-with-custom-diagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-report-with-custom-diagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-report-with-custom-diagnostic.rs?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -16,6 +16,8 @@ fn main() { #![rustc_error] // rust-lang/rust#49855\n     //~^ mutable borrow occurs here\n     let z = &x; //~ ERROR cannot borrow\n     //~^ immutable borrow occurs here\n+    z.use_ref();\n+    y.use_mut();\n }\n \n fn foo() {\n@@ -27,6 +29,8 @@ fn foo() {\n             //~^ immutable borrow occurs here\n             let z = &mut x; //~ ERROR cannot borrow\n             //~^ mutable borrow occurs here\n+            z.use_mut();\n+            y.use_ref();\n         }\n         false => ()\n     }\n@@ -40,5 +44,10 @@ fn bar() {\n         //~^ first mutable borrow occurs here\n         let z = &mut x; //~ ERROR cannot borrow\n         //~^ second mutable borrow occurs here\n+        z.use_mut();\n+        y.use_mut();\n     };\n }\n+\n+trait Fake { fn use_mut(&mut self) { } fn use_ref(&self) { }  }\n+impl<T> Fake for T { }"}, {"sha": "1fe052cef71115f084aa4672d2ef26509499919e", "filename": "src/test/ui/borrowck/borrowck-report-with-custom-diagnostic.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-report-with-custom-diagnostic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-report-with-custom-diagnostic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-report-with-custom-diagnostic.stderr?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -6,31 +6,31 @@ LL |     let y = &mut x;\n LL |     //~^ mutable borrow occurs here\n LL |     let z = &x; //~ ERROR cannot borrow\n    |              ^ immutable borrow occurs here\n-LL |     //~^ immutable borrow occurs here\n+...\n LL | }\n    | - mutable borrow ends here\n \n error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-report-with-custom-diagnostic.rs:28:26\n+  --> $DIR/borrowck-report-with-custom-diagnostic.rs:30:26\n    |\n LL |             let y = &x;\n    |                      - immutable borrow occurs here\n LL |             //~^ immutable borrow occurs here\n LL |             let z = &mut x; //~ ERROR cannot borrow\n    |                          ^ mutable borrow occurs here\n-LL |             //~^ mutable borrow occurs here\n+...\n LL |         }\n    |         - immutable borrow ends here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time\n-  --> $DIR/borrowck-report-with-custom-diagnostic.rs:41:22\n+  --> $DIR/borrowck-report-with-custom-diagnostic.rs:45:22\n    |\n LL |         let y = &mut x;\n    |                      - first mutable borrow occurs here\n LL |         //~^ first mutable borrow occurs here\n LL |         let z = &mut x; //~ ERROR cannot borrow\n    |                      ^ second mutable borrow occurs here\n-LL |         //~^ second mutable borrow occurs here\n+...\n LL |     };\n    |     - first borrow ends here\n "}, {"sha": "55f57e97ba4fa3c968a2e634009437cdba15b206", "filename": "src/test/ui/borrowck/mut-borrow-outside-loop.nll.stderr", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-outside-loop.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-outside-loop.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-outside-loop.nll.stderr?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -1,14 +1,24 @@\n-error: compilation successful\n-  --> $DIR/mut-borrow-outside-loop.rs:13:1\n+error[E0499]: cannot borrow `void` as mutable more than once at a time\n+  --> $DIR/mut-borrow-outside-loop.rs:17:18\n    |\n-LL | / fn main() { #![rustc_error] // rust-lang/rust#49855\n-LL | |     let mut void = ();\n-LL | |\n-LL | |     let first = &mut void;\n-...  |\n-LL | |     }\n-LL | | }\n-   | |_^\n+LL |     let first = &mut void;\n+   |                 --------- first mutable borrow occurs here\n+LL |     let second = &mut void; //~ ERROR cannot borrow\n+   |                  ^^^^^^^^^ second mutable borrow occurs here\n+LL |     first.use_mut();\n+   |     ----- borrow later used here\n \n-error: aborting due to previous error\n+error[E0499]: cannot borrow `inner_void` as mutable more than once at a time\n+  --> $DIR/mut-borrow-outside-loop.rs:25:28\n+   |\n+LL |         let inner_first = &mut inner_void;\n+   |                           --------------- first mutable borrow occurs here\n+LL |         let inner_second = &mut inner_void; //~ ERROR cannot borrow\n+   |                            ^^^^^^^^^^^^^^^ second mutable borrow occurs here\n+LL |         inner_second.use_mut();\n+LL |         inner_first.use_mut();\n+   |         ----------- borrow later used here\n+\n+error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0499`."}, {"sha": "aba520bd864d282a42844114f7008b0b664f432d", "filename": "src/test/ui/borrowck/mut-borrow-outside-loop.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-outside-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-outside-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-outside-loop.rs?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -15,12 +15,18 @@ fn main() { #![rustc_error] // rust-lang/rust#49855\n \n     let first = &mut void;\n     let second = &mut void; //~ ERROR cannot borrow\n+    first.use_mut();\n+    second.use_mut();\n \n     loop {\n         let mut inner_void = ();\n \n         let inner_first = &mut inner_void;\n         let inner_second = &mut inner_void; //~ ERROR cannot borrow\n+        inner_second.use_mut();\n+        inner_first.use_mut();\n     }\n }\n \n+trait Fake { fn use_mut(&mut self) { } fn use_ref(&self) { }  }\n+impl<T> Fake for T { }"}, {"sha": "95e9fa19129be172b57940fbca2d24e6f3929b08", "filename": "src/test/ui/borrowck/mut-borrow-outside-loop.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-outside-loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-outside-loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-outside-loop.stderr?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -10,12 +10,13 @@ LL | }\n    | - first borrow ends here\n \n error[E0499]: cannot borrow `inner_void` as mutable more than once at a time\n-  --> $DIR/mut-borrow-outside-loop.rs:23:33\n+  --> $DIR/mut-borrow-outside-loop.rs:25:33\n    |\n LL |         let inner_first = &mut inner_void;\n    |                                ---------- first mutable borrow occurs here\n LL |         let inner_second = &mut inner_void; //~ ERROR cannot borrow\n    |                                 ^^^^^^^^^^ second mutable borrow occurs here\n+...\n LL |     }\n    |     - first borrow ends here\n "}, {"sha": "c0eeb63447d550e46ef119b01e0cff508a5743a8", "filename": "src/test/ui/codemap_tests/issue-11715.nll.stderr", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-11715.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-11715.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-11715.nll.stderr?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -1,12 +1,14 @@\n-error: compilation successful\n-  --> $DIR/issue-11715.rs:97:1\n+error[E0499]: cannot borrow `x` as mutable more than once at a time\n+  --> $DIR/issue-11715.rs:100:13\n    |\n-LL | / fn main() { #![rustc_error] // rust-lang/rust#49855\n-LL | |     let mut x = \"foo\";\n-LL | |     let y = &mut x;\n-LL | |     let z = &mut x; //~ ERROR cannot borrow\n-LL | | }\n-   | |_^\n+LL |     let y = &mut x;\n+   |             ------ first mutable borrow occurs here\n+LL |     let z = &mut x; //~ ERROR cannot borrow\n+   |             ^^^^^^ second mutable borrow occurs here\n+LL |     z.use_mut();\n+LL |     y.use_mut();\n+   |     - borrow later used here\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0499`."}, {"sha": "415aa3687083b6e18fee9788dd2b16273ca84595", "filename": "src/test/ui/codemap_tests/issue-11715.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-11715.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-11715.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-11715.rs?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -98,4 +98,9 @@ fn main() { #![rustc_error] // rust-lang/rust#49855\n     let mut x = \"foo\";\n     let y = &mut x;\n     let z = &mut x; //~ ERROR cannot borrow\n+    z.use_mut();\n+    y.use_mut();\n }\n+\n+trait Fake { fn use_mut(&mut self) { } fn use_ref(&self) { }  }\n+impl<T> Fake for T { }"}, {"sha": "eb73c69c5dcf02691e0a6514c010208784bfa115", "filename": "src/test/ui/codemap_tests/issue-11715.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-11715.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-11715.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-11715.stderr?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -5,6 +5,7 @@ LL |     let y = &mut x;\n    |                  - first mutable borrow occurs here\n LL |     let z = &mut x; //~ ERROR cannot borrow\n    |                  ^ second mutable borrow occurs here\n+...\n LL | }\n    | - first borrow ends here\n "}, {"sha": "008ecfeabcb1461432d84b2e8af4fba7a92fec4f", "filename": "src/test/ui/dropck/dropck-eyepatch-extern-crate.nll.stderr", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.nll.stderr?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -1,14 +1,15 @@\n-error: compilation successful\n-  --> $DIR/dropck-eyepatch-extern-crate.rs:27:1\n+error[E0597]: `c_shortest` does not live long enough\n+  --> $DIR/dropck-eyepatch-extern-crate.rs:47:19\n    |\n-LL | / fn main() { #![rustc_error] // rust-lang/rust#49855\n-LL | |     use std::cell::Cell;\n-LL | |     let c_long;\n-LL | |     let (c, mut dt, mut dr, mut pt, mut pr, st, sr)\n-...  |\n-LL | |     println!(\"{:?}\", (dt.0, dr.0, pt.0, pr.0, st.0, sr.0));\n-LL | | }\n-   | |_^\n+LL |     dt = Dt(\"dt\", &c_shortest);\n+   |                   ^^^^^^^^^^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | -\n+   | |\n+   | borrowed value only lives until here\n+   | borrow later used here, when `dt` is dropped\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "3e531d9fd6011e8fee34972998a929cb9de8c4ed", "filename": "src/test/ui/dropck/dropck-eyepatch-extern-crate.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.rs?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -27,33 +27,41 @@ use other::{Dt,Dr,Pt,Pr,St,Sr};\n fn main() { #![rustc_error] // rust-lang/rust#49855\n     use std::cell::Cell;\n     let c_long;\n-    let (c, mut dt, mut dr, mut pt, mut pr, st, sr)\n-        : (Cell<_>, Dt<_>, Dr<_>, Pt<_, _>, Pr<_>, St<_>, Sr<_>);\n+    let (c, mut dt, mut dr, mut pt, mut pr, st, sr, c_shortest)\n+        : (Cell<_>, Dt<_>, Dr<_>, Pt<_, _>, Pr<_>, St<_>, Sr<_>, Cell<_>);\n     c_long = Cell::new(1);\n     c = Cell::new(1);\n+    c_shortest = Cell::new(1);\n \n     // No error: sufficiently long-lived state can be referenced in dtors\n     dt = Dt(\"dt\", &c_long);\n     dr = Dr(\"dr\", &c_long);\n+\n     // Error: destructor order imprecisely modelled\n     dt = Dt(\"dt\", &c);\n     //~^ ERROR `c` does not live long enough\n     dr = Dr(\"dr\", &c);\n     //~^ ERROR `c` does not live long enough\n \n+    // Error: `c_shortest` dies too soon for the references in dtors to be valid.\n+    dt = Dt(\"dt\", &c_shortest);\n+    //~^ ERROR `c_shortest` does not live long enough\n+    dr = Dr(\"dr\", &c_shortest);\n+    //~^ ERROR `c_shortest` does not live long enough\n+\n     // No error: Drop impl asserts .1 (A and &'a _) are not accessed\n-    pt = Pt(\"pt\", &c, &c_long);\n-    pr = Pr(\"pr\", &c, &c_long);\n+    pt = Pt(\"pt\", &c_shortest, &c_long);\n+    pr = Pr(\"pr\", &c_shortest, &c_long);\n \n     // Error: Drop impl's assertion does not apply to `B` nor `&'b _`\n-    pt = Pt(\"pt\", &c_long, &c);\n-    //~^ ERROR `c` does not live long enough\n-    pr = Pr(\"pr\", &c_long, &c);\n-    //~^ ERROR `c` does not live long enough\n+    pt = Pt(\"pt\", &c_long, &c_shortest);\n+    //~^ ERROR `c_shortest` does not live long enough\n+    pr = Pr(\"pr\", &c_long, &c_shortest);\n+    //~^ ERROR `c_shortest` does not live long enough\n \n     // No error: St and Sr have no destructor.\n-    st = St(\"st\", &c);\n-    sr = Sr(\"sr\", &c);\n+    st = St(\"st\", &c_shortest);\n+    sr = Sr(\"sr\", &c_shortest);\n \n     println!(\"{:?}\", (dt.0, dr.0, pt.0, pr.0, st.0, sr.0));\n }"}, {"sha": "35db46f4faeb104a181e508e8b85499cd8307efa", "filename": "src/test/ui/dropck/dropck-eyepatch-extern-crate.stderr", "status": "modified", "additions": 35, "deletions": 13, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.stderr?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `c` does not live long enough\n-  --> $DIR/dropck-eyepatch-extern-crate.rs:39:20\n+  --> $DIR/dropck-eyepatch-extern-crate.rs:41:20\n    |\n LL |     dt = Dt(\"dt\", &c);\n    |                    ^ borrowed value does not live long enough\n@@ -10,7 +10,7 @@ LL | }\n    = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `c` does not live long enough\n-  --> $DIR/dropck-eyepatch-extern-crate.rs:41:20\n+  --> $DIR/dropck-eyepatch-extern-crate.rs:43:20\n    |\n LL |     dr = Dr(\"dr\", &c);\n    |                    ^ borrowed value does not live long enough\n@@ -20,28 +20,50 @@ LL | }\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n-error[E0597]: `c` does not live long enough\n-  --> $DIR/dropck-eyepatch-extern-crate.rs:49:29\n+error[E0597]: `c_shortest` does not live long enough\n+  --> $DIR/dropck-eyepatch-extern-crate.rs:47:20\n    |\n-LL |     pt = Pt(\"pt\", &c_long, &c);\n-   |                             ^ borrowed value does not live long enough\n+LL |     dt = Dt(\"dt\", &c_shortest);\n+   |                    ^^^^^^^^^^ borrowed value does not live long enough\n ...\n LL | }\n-   | - `c` dropped here while still borrowed\n+   | - `c_shortest` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n-error[E0597]: `c` does not live long enough\n-  --> $DIR/dropck-eyepatch-extern-crate.rs:51:29\n+error[E0597]: `c_shortest` does not live long enough\n+  --> $DIR/dropck-eyepatch-extern-crate.rs:49:20\n    |\n-LL |     pr = Pr(\"pr\", &c_long, &c);\n-   |                             ^ borrowed value does not live long enough\n+LL |     dr = Dr(\"dr\", &c_shortest);\n+   |                    ^^^^^^^^^^ borrowed value does not live long enough\n ...\n LL | }\n-   | - `c` dropped here while still borrowed\n+   | - `c_shortest` dropped here while still borrowed\n+   |\n+   = note: values in a scope are dropped in the opposite order they are created\n+\n+error[E0597]: `c_shortest` does not live long enough\n+  --> $DIR/dropck-eyepatch-extern-crate.rs:57:29\n+   |\n+LL |     pt = Pt(\"pt\", &c_long, &c_shortest);\n+   |                             ^^^^^^^^^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | - `c_shortest` dropped here while still borrowed\n+   |\n+   = note: values in a scope are dropped in the opposite order they are created\n+\n+error[E0597]: `c_shortest` does not live long enough\n+  --> $DIR/dropck-eyepatch-extern-crate.rs:59:29\n+   |\n+LL |     pr = Pr(\"pr\", &c_long, &c_shortest);\n+   |                             ^^^^^^^^^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | - `c_shortest` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0597`."}, {"sha": "233ff198af48bef8926b7880005f8d50f3a1bd8c", "filename": "src/test/ui/dropck/dropck-eyepatch-reorder.nll.stderr", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.nll.stderr?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -1,14 +1,15 @@\n-error: compilation successful\n-  --> $DIR/dropck-eyepatch-reorder.rs:44:1\n+error[E0597]: `c_shortest` does not live long enough\n+  --> $DIR/dropck-eyepatch-reorder.rs:64:19\n    |\n-LL | / fn main() { #![rustc_error] // rust-lang/rust#49855\n-LL | |     use std::cell::Cell;\n-LL | |     let c_long;\n-LL | |     let (c, mut dt, mut dr, mut pt, mut pr, st, sr)\n-...  |\n-LL | |     println!(\"{:?}\", (dt.0, dr.0, pt.0, pr.0, st.0, sr.0));\n-LL | | }\n-   | |_^\n+LL |     dt = Dt(\"dt\", &c_shortest);\n+   |                   ^^^^^^^^^^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | -\n+   | |\n+   | borrowed value only lives until here\n+   | borrow later used here, when `dt` is dropped\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "1806dc71424527947eb8f3ffb9c3073913e68ae9", "filename": "src/test/ui/dropck/dropck-eyepatch-reorder.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.rs?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -44,33 +44,41 @@ unsafe impl<'b, #[may_dangle] 'a, B: fmt::Debug> Drop for Pr<'a, 'b, B> {\n fn main() { #![rustc_error] // rust-lang/rust#49855\n     use std::cell::Cell;\n     let c_long;\n-    let (c, mut dt, mut dr, mut pt, mut pr, st, sr)\n-        : (Cell<_>, Dt<_>, Dr<_>, Pt<_, _>, Pr<_>, St<_>, Sr<_>);\n+    let (c, mut dt, mut dr, mut pt, mut pr, st, sr, c_shortest)\n+        : (Cell<_>, Dt<_>, Dr<_>, Pt<_, _>, Pr<_>, St<_>, Sr<_>, Cell<_>);\n     c_long = Cell::new(1);\n     c = Cell::new(1);\n+    c_shortest = Cell::new(1);\n \n     // No error: sufficiently long-lived state can be referenced in dtors\n     dt = Dt(\"dt\", &c_long);\n     dr = Dr(\"dr\", &c_long);\n+\n     // Error: destructor order imprecisely modelled\n     dt = Dt(\"dt\", &c);\n     //~^ ERROR `c` does not live long enough\n     dr = Dr(\"dr\", &c);\n     //~^ ERROR `c` does not live long enough\n \n+    // Error: `c_shortest` dies too soon for the references in dtors to be valid.\n+    dt = Dt(\"dt\", &c_shortest);\n+    //~^ ERROR `c_shortest` does not live long enough\n+    dr = Dr(\"dr\", &c_shortest);\n+    //~^ ERROR `c_shortest` does not live long enough\n+\n     // No error: Drop impl asserts .1 (A and &'a _) are not accessed\n-    pt = Pt(\"pt\", &c, &c_long);\n-    pr = Pr(\"pr\", &c, &c_long);\n+    pt = Pt(\"pt\", &c_shortest, &c_long);\n+    pr = Pr(\"pr\", &c_shortest, &c_long);\n \n     // Error: Drop impl's assertion does not apply to `B` nor `&'b _`\n-    pt = Pt(\"pt\", &c_long, &c);\n-    //~^ ERROR `c` does not live long enough\n-    pr = Pr(\"pr\", &c_long, &c);\n-    //~^ ERROR `c` does not live long enough\n+    pt = Pt(\"pt\", &c_long, &c_shortest);\n+    //~^ ERROR `c_shortest` does not live long enough\n+    pr = Pr(\"pr\", &c_long, &c_shortest);\n+    //~^ ERROR `c_shortest` does not live long enough\n \n     // No error: St and Sr have no destructor.\n-    st = St(\"st\", &c);\n-    sr = Sr(\"sr\", &c);\n+    st = St(\"st\", &c_shortest);\n+    sr = Sr(\"sr\", &c_shortest);\n \n     println!(\"{:?}\", (dt.0, dr.0, pt.0, pr.0, st.0, sr.0));\n }"}, {"sha": "9984a7b9409c437dece0e07ad7dbea6b8c3573a5", "filename": "src/test/ui/dropck/dropck-eyepatch-reorder.stderr", "status": "modified", "additions": 35, "deletions": 13, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.stderr?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `c` does not live long enough\n-  --> $DIR/dropck-eyepatch-reorder.rs:56:20\n+  --> $DIR/dropck-eyepatch-reorder.rs:58:20\n    |\n LL |     dt = Dt(\"dt\", &c);\n    |                    ^ borrowed value does not live long enough\n@@ -10,7 +10,7 @@ LL | }\n    = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `c` does not live long enough\n-  --> $DIR/dropck-eyepatch-reorder.rs:58:20\n+  --> $DIR/dropck-eyepatch-reorder.rs:60:20\n    |\n LL |     dr = Dr(\"dr\", &c);\n    |                    ^ borrowed value does not live long enough\n@@ -20,28 +20,50 @@ LL | }\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n-error[E0597]: `c` does not live long enough\n-  --> $DIR/dropck-eyepatch-reorder.rs:66:29\n+error[E0597]: `c_shortest` does not live long enough\n+  --> $DIR/dropck-eyepatch-reorder.rs:64:20\n    |\n-LL |     pt = Pt(\"pt\", &c_long, &c);\n-   |                             ^ borrowed value does not live long enough\n+LL |     dt = Dt(\"dt\", &c_shortest);\n+   |                    ^^^^^^^^^^ borrowed value does not live long enough\n ...\n LL | }\n-   | - `c` dropped here while still borrowed\n+   | - `c_shortest` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n-error[E0597]: `c` does not live long enough\n-  --> $DIR/dropck-eyepatch-reorder.rs:68:29\n+error[E0597]: `c_shortest` does not live long enough\n+  --> $DIR/dropck-eyepatch-reorder.rs:66:20\n    |\n-LL |     pr = Pr(\"pr\", &c_long, &c);\n-   |                             ^ borrowed value does not live long enough\n+LL |     dr = Dr(\"dr\", &c_shortest);\n+   |                    ^^^^^^^^^^ borrowed value does not live long enough\n ...\n LL | }\n-   | - `c` dropped here while still borrowed\n+   | - `c_shortest` dropped here while still borrowed\n+   |\n+   = note: values in a scope are dropped in the opposite order they are created\n+\n+error[E0597]: `c_shortest` does not live long enough\n+  --> $DIR/dropck-eyepatch-reorder.rs:74:29\n+   |\n+LL |     pt = Pt(\"pt\", &c_long, &c_shortest);\n+   |                             ^^^^^^^^^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | - `c_shortest` dropped here while still borrowed\n+   |\n+   = note: values in a scope are dropped in the opposite order they are created\n+\n+error[E0597]: `c_shortest` does not live long enough\n+  --> $DIR/dropck-eyepatch-reorder.rs:76:29\n+   |\n+LL |     pr = Pr(\"pr\", &c_long, &c_shortest);\n+   |                             ^^^^^^^^^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | - `c_shortest` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0597`."}, {"sha": "7b27ff01f924a3a6f35d5e597da82eb4a2c05f41", "filename": "src/test/ui/dropck/dropck-eyepatch.nll.stderr", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.nll.stderr?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -1,14 +1,15 @@\n-error: compilation successful\n-  --> $DIR/dropck-eyepatch.rs:67:1\n+error[E0597]: `c_shortest` does not live long enough\n+  --> $DIR/dropck-eyepatch.rs:87:19\n    |\n-LL | / fn main() { #![rustc_error] // rust-lang/rust#49855\n-LL | |     use std::cell::Cell;\n-LL | |     let c_long;\n-LL | |     let (c, mut dt, mut dr, mut pt, mut pr, st, sr)\n-...  |\n-LL | |     println!(\"{:?}\", (dt.0, dr.0, pt.0, pr.0, st.0, sr.0));\n-LL | | }\n-   | |_^\n+LL |     dt = Dt(\"dt\", &c_shortest);\n+   |                   ^^^^^^^^^^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | -\n+   | |\n+   | borrowed value only lives until here\n+   | borrow later used here, when `dt` is dropped\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "40d3ff050e2aa3db6fa71367fbd80780a97831bc", "filename": "src/test/ui/dropck/dropck-eyepatch.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.rs?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -67,33 +67,42 @@ unsafe impl<#[may_dangle] 'a, 'b, B: fmt::Debug> Drop for Pr<'a, 'b, B> {\n fn main() { #![rustc_error] // rust-lang/rust#49855\n     use std::cell::Cell;\n     let c_long;\n-    let (c, mut dt, mut dr, mut pt, mut pr, st, sr)\n-        : (Cell<_>, Dt<_>, Dr<_>, Pt<_, _>, Pr<_>, St<_>, Sr<_>);\n+    let (c, mut dt, mut dr, mut pt, mut pr, st, sr, c_shortest)\n+        : (Cell<_>, Dt<_>, Dr<_>, Pt<_, _>, Pr<_>, St<_>, Sr<_>, Cell<_>);\n     c_long = Cell::new(1);\n     c = Cell::new(1);\n+    c_shortest = Cell::new(1);\n \n     // No error: sufficiently long-lived state can be referenced in dtors\n     dt = Dt(\"dt\", &c_long);\n     dr = Dr(\"dr\", &c_long);\n+\n     // Error: destructor order imprecisely modelled\n     dt = Dt(\"dt\", &c);\n     //~^ ERROR `c` does not live long enough\n     dr = Dr(\"dr\", &c);\n     //~^ ERROR `c` does not live long enough\n \n+    // Error: `c_shortest` dies too soon for the references in dtors to be valid.\n+    dt = Dt(\"dt\", &c_shortest);\n+    //~^ ERROR `c_shortest` does not live long enough\n+    dr = Dr(\"dr\", &c_shortest);\n+    //~^ ERROR `c_shortest` does not live long enough\n+\n+\n     // No error: Drop impl asserts .1 (A and &'a _) are not accessed\n-    pt = Pt(\"pt\", &c, &c_long);\n-    pr = Pr(\"pr\", &c, &c_long);\n+    pt = Pt(\"pt\", &c_shortest, &c_long);\n+    pr = Pr(\"pr\", &c_shortest, &c_long);\n \n     // Error: Drop impl's assertion does not apply to `B` nor `&'b _`\n-    pt = Pt(\"pt\", &c_long, &c);\n-    //~^ ERROR `c` does not live long enough\n-    pr = Pr(\"pr\", &c_long, &c);\n-    //~^ ERROR `c` does not live long enough\n+    pt = Pt(\"pt\", &c_long, &c_shortest);\n+    //~^ ERROR `c_shortest` does not live long enough\n+    pr = Pr(\"pr\", &c_long, &c_shortest);\n+    //~^ ERROR `c_shortest` does not live long enough\n \n     // No error: St and Sr have no destructor.\n-    st = St(\"st\", &c);\n-    sr = Sr(\"sr\", &c);\n+    st = St(\"st\", &c_shortest);\n+    sr = Sr(\"sr\", &c_shortest);\n \n     println!(\"{:?}\", (dt.0, dr.0, pt.0, pr.0, st.0, sr.0));\n }"}, {"sha": "7cdf645941d09ba5b0d42a43490c1bacc68e78a2", "filename": "src/test/ui/dropck/dropck-eyepatch.stderr", "status": "modified", "additions": 35, "deletions": 13, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.stderr?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `c` does not live long enough\n-  --> $DIR/dropck-eyepatch.rs:79:20\n+  --> $DIR/dropck-eyepatch.rs:81:20\n    |\n LL |     dt = Dt(\"dt\", &c);\n    |                    ^ borrowed value does not live long enough\n@@ -10,7 +10,7 @@ LL | }\n    = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `c` does not live long enough\n-  --> $DIR/dropck-eyepatch.rs:81:20\n+  --> $DIR/dropck-eyepatch.rs:83:20\n    |\n LL |     dr = Dr(\"dr\", &c);\n    |                    ^ borrowed value does not live long enough\n@@ -20,28 +20,50 @@ LL | }\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n-error[E0597]: `c` does not live long enough\n-  --> $DIR/dropck-eyepatch.rs:89:29\n+error[E0597]: `c_shortest` does not live long enough\n+  --> $DIR/dropck-eyepatch.rs:87:20\n    |\n-LL |     pt = Pt(\"pt\", &c_long, &c);\n-   |                             ^ borrowed value does not live long enough\n+LL |     dt = Dt(\"dt\", &c_shortest);\n+   |                    ^^^^^^^^^^ borrowed value does not live long enough\n ...\n LL | }\n-   | - `c` dropped here while still borrowed\n+   | - `c_shortest` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n-error[E0597]: `c` does not live long enough\n-  --> $DIR/dropck-eyepatch.rs:91:29\n+error[E0597]: `c_shortest` does not live long enough\n+  --> $DIR/dropck-eyepatch.rs:89:20\n    |\n-LL |     pr = Pr(\"pr\", &c_long, &c);\n-   |                             ^ borrowed value does not live long enough\n+LL |     dr = Dr(\"dr\", &c_shortest);\n+   |                    ^^^^^^^^^^ borrowed value does not live long enough\n ...\n LL | }\n-   | - `c` dropped here while still borrowed\n+   | - `c_shortest` dropped here while still borrowed\n+   |\n+   = note: values in a scope are dropped in the opposite order they are created\n+\n+error[E0597]: `c_shortest` does not live long enough\n+  --> $DIR/dropck-eyepatch.rs:98:29\n+   |\n+LL |     pt = Pt(\"pt\", &c_long, &c_shortest);\n+   |                             ^^^^^^^^^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | - `c_shortest` dropped here while still borrowed\n+   |\n+   = note: values in a scope are dropped in the opposite order they are created\n+\n+error[E0597]: `c_shortest` does not live long enough\n+  --> $DIR/dropck-eyepatch.rs:100:29\n+   |\n+LL |     pr = Pr(\"pr\", &c_long, &c_shortest);\n+   |                             ^^^^^^^^^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | - `c_shortest` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0597`."}, {"sha": "89801693b763ce6fde3b245680ced87b24a6bbe5", "filename": "src/test/ui/error-codes/E0499.nll.stderr", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Ferror-codes%2FE0499.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Ferror-codes%2FE0499.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0499.nll.stderr?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -1,12 +1,14 @@\n-error: compilation successful\n-  --> $DIR/E0499.rs:11:1\n+error[E0499]: cannot borrow `i` as mutable more than once at a time\n+  --> $DIR/E0499.rs:14:17\n    |\n-LL | / fn main() { #![rustc_error] // rust-lang/rust#49855\n-LL | |     let mut i = 0;\n-LL | |     let mut x = &mut i;\n-LL | |     let mut a = &mut i; //~ ERROR E0499\n-LL | | }\n-   | |_^\n+LL |     let mut x = &mut i;\n+   |                 ------ first mutable borrow occurs here\n+LL |     let mut a = &mut i; //~ ERROR E0499\n+   |                 ^^^^^^ second mutable borrow occurs here\n+LL |     a.use_mut();\n+LL |     x.use_mut();\n+   |     - borrow later used here\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0499`."}, {"sha": "9fb235eccdd319721aa472f98f8611d852d8a122", "filename": "src/test/ui/error-codes/E0499.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Ferror-codes%2FE0499.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Ferror-codes%2FE0499.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0499.rs?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -7,9 +7,14 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-#![feature(rustc_attrs)]\n-fn main() { #![rustc_error] // rust-lang/rust#49855\n+\n+fn main() {\n     let mut i = 0;\n     let mut x = &mut i;\n     let mut a = &mut i; //~ ERROR E0499\n+    a.use_mut();\n+    x.use_mut();\n }\n+\n+trait Fake { fn use_mut(&mut self) { } fn use_ref(&self) { }  }\n+impl<T> Fake for T { }"}, {"sha": "8f4fd445fc2a5f25342003df59f4ab25d7ee04a4", "filename": "src/test/ui/error-codes/E0499.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Ferror-codes%2FE0499.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Ferror-codes%2FE0499.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0499.stderr?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -5,6 +5,7 @@ LL |     let mut x = &mut i;\n    |                      - first mutable borrow occurs here\n LL |     let mut a = &mut i; //~ ERROR E0499\n    |                      ^ second mutable borrow occurs here\n+...\n LL | }\n    | - first borrow ends here\n "}, {"sha": "565f73616b9fe313b5e03134424ba85eab72a682", "filename": "src/test/ui/error-codes/E0502.nll.stderr", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Ferror-codes%2FE0502.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Ferror-codes%2FE0502.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0502.nll.stderr?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -1,9 +1,13 @@\n-error: compilation successful\n-  --> $DIR/E0502.rs:17:1\n+error[E0502]: cannot borrow `*a` as mutable because it is also borrowed as immutable\n+  --> $DIR/E0502.rs:14:5\n    |\n-LL | / fn main() { #![rustc_error] // rust-lang/rust#49855\n-LL | | }\n-   | |_^\n+LL |     let ref y = a;\n+   |         ----- immutable borrow occurs here\n+LL |     bar(a); //~ ERROR E0502\n+   |     ^^^^^^ mutable borrow occurs here\n+LL |     y.use_ref();\n+   |     - borrow later used here\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0502`."}, {"sha": "86d9c130d873d7e8e186cc523224c9d82936f0ae", "filename": "src/test/ui/error-codes/E0502.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Ferror-codes%2FE0502.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Ferror-codes%2FE0502.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0502.rs?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -7,12 +7,16 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-#![feature(rustc_attrs)]\n+\n fn bar(x: &mut i32) {}\n fn foo(a: &mut i32) {\n     let ref y = a;\n     bar(a); //~ ERROR E0502\n+    y.use_ref();\n }\n \n-fn main() { #![rustc_error] // rust-lang/rust#49855\n+fn main() {\n }\n+\n+trait Fake { fn use_mut(&mut self) { } fn use_ref(&self) { }  }\n+impl<T> Fake for T { }"}, {"sha": "8f0335c0662683ebd457a29f66a7c2e492d4c09a", "filename": "src/test/ui/error-codes/E0502.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Ferror-codes%2FE0502.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Ferror-codes%2FE0502.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0502.stderr?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -5,6 +5,7 @@ LL |     let ref y = a;\n    |         ----- immutable borrow occurs here\n LL |     bar(a); //~ ERROR E0502\n    |         ^ mutable borrow occurs here\n+LL |     y.use_ref();\n LL | }\n    | - immutable borrow ends here\n "}, {"sha": "54e2bdacfa9b3ae18e591295f8e2c5cedd54c61d", "filename": "src/test/ui/error-codes/E0503.nll.stderr", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Ferror-codes%2FE0503.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Ferror-codes%2FE0503.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0503.nll.stderr?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -1,12 +1,13 @@\n-error: compilation successful\n-  --> $DIR/E0503.rs:11:1\n+error[E0503]: cannot use `value` because it was mutably borrowed\n+  --> $DIR/E0503.rs:14:16\n    |\n-LL | / fn main() { #![rustc_error] // rust-lang/rust#49855\n-LL | |     let mut value = 3;\n-LL | |     let _borrow = &mut value;\n-LL | |     let _sum = value + 1; //~ ERROR E0503\n-LL | | }\n-   | |_^\n+LL |     let _borrow = &mut value;\n+   |                   ---------- borrow of `value` occurs here\n+LL |     let _sum = value + 1; //~ ERROR E0503\n+   |                ^^^^^ use of borrowed `value`\n+LL |     _borrow.use_mut();\n+   |     ------- borrow later used here\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0503`."}, {"sha": "eacf510414575927e01bcda9bc211907f0f57884", "filename": "src/test/ui/error-codes/E0503.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Ferror-codes%2FE0503.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Ferror-codes%2FE0503.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0503.rs?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -7,9 +7,13 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-#![feature(rustc_attrs)]\n-fn main() { #![rustc_error] // rust-lang/rust#49855\n+\n+fn main() {\n     let mut value = 3;\n     let _borrow = &mut value;\n     let _sum = value + 1; //~ ERROR E0503\n+    _borrow.use_mut();\n }\n+\n+trait Fake { fn use_mut(&mut self) { } fn use_ref(&self) { }  }\n+impl<T> Fake for T { }"}, {"sha": "94624cb96992b65e096e50f92c04c7862ddb145b", "filename": "src/test/ui/error-codes/E0505.nll.stderr", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Ferror-codes%2FE0505.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Ferror-codes%2FE0505.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0505.nll.stderr?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -1,14 +1,13 @@\n-error: compilation successful\n-  --> $DIR/E0505.rs:15:1\n+error[E0505]: cannot move out of `x` because it is borrowed\n+  --> $DIR/E0505.rs:19:13\n    |\n-LL | / fn main() { #![rustc_error] // rust-lang/rust#49855\n-LL | |     let x = Value{};\n-LL | |     {\n-LL | |         let _ref_to_val: &Value = &x;\n-LL | |         eat(x); //~ ERROR E0505\n-LL | |     }\n-LL | | }\n-   | |_^\n+LL |         let _ref_to_val: &Value = &x;\n+   |                                   -- borrow of `x` occurs here\n+LL |         eat(x); //~ ERROR E0505\n+   |             ^ move out of `x` occurs here\n+LL |         _ref_to_val.use_ref();\n+   |         ----------- borrow later used here\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0505`."}, {"sha": "2ec4ac44b6ef60c2fa9cd080d2d5f6724ab98787", "filename": "src/test/ui/error-codes/E0505.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Ferror-codes%2FE0505.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Ferror-codes%2FE0505.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0505.rs?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -7,15 +7,19 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-#![feature(rustc_attrs)]\n+\n struct Value {}\n \n fn eat(val: Value) {}\n \n-fn main() { #![rustc_error] // rust-lang/rust#49855\n+fn main() {\n     let x = Value{};\n     {\n         let _ref_to_val: &Value = &x;\n         eat(x); //~ ERROR E0505\n+        _ref_to_val.use_ref();\n     }\n }\n+\n+trait Fake { fn use_mut(&mut self) { } fn use_ref(&self) { }  }\n+impl<T> Fake for T { }"}, {"sha": "459de1bc00b0f8b5b937bd88e40ac20a2bb52e6a", "filename": "src/test/ui/error-codes/E0597.nll.stderr", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Ferror-codes%2FE0597.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Ferror-codes%2FE0597.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0597.nll.stderr?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -1,13 +1,15 @@\n-error: compilation successful\n-  --> $DIR/E0597.rs:15:1\n+error[E0597]: `y` does not live long enough\n+  --> $DIR/E0597.rs:18:16\n    |\n-LL | / fn main() { #![rustc_error] // rust-lang/rust#49855\n-LL | |     let mut x = Foo { x: None };\n-LL | |     let y = 0;\n-LL | |     x.x = Some(&y);\n-LL | |     //~^ `y` does not live long enough [E0597]\n-LL | | }\n-   | |_^\n+LL |     x.x = Some(&y);\n+   |                ^^ borrowed value does not live long enough\n+LL |     //~^ `y` does not live long enough [E0597]\n+LL | }\n+   | -\n+   | |\n+   | borrowed value only lives until here\n+   | borrow later used here, when `x` is dropped\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "e70213e19c34c41f2dfdc3021036bced483f3a00", "filename": "src/test/ui/error-codes/E0597.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Ferror-codes%2FE0597.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Ferror-codes%2FE0597.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0597.rs?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -7,14 +7,16 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-#![feature(rustc_attrs)]\n+\n struct Foo<'a> {\n     x: Option<&'a u32>,\n }\n \n-fn main() { #![rustc_error] // rust-lang/rust#49855\n+fn main() {\n     let mut x = Foo { x: None };\n     let y = 0;\n     x.x = Some(&y);\n     //~^ `y` does not live long enough [E0597]\n }\n+\n+impl<'a> Drop for Foo<'a> { fn drop(&mut self) { } }"}, {"sha": "7b68c167d4acb0cdd2c339da2106e6207747ad26", "filename": "src/test/ui/generator/dropck.nll.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fgenerator%2Fdropck.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fgenerator%2Fdropck.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fdropck.nll.stderr?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -1,3 +1,15 @@\n+error[E0597]: `*cell` does not live long enough\n+  --> $DIR/dropck.rs:19:40\n+   |\n+LL |     let ref_ = Box::leak(Box::new(Some(cell.borrow_mut())));\n+   |                                        ^^^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | -\n+   | |\n+   | borrowed value only lives until here\n+   | borrow later used here, when `gen` is dropped\n+\n error[E0597]: `ref_` does not live long enough\n   --> $DIR/dropck.rs:22:11\n    |\n@@ -15,6 +27,6 @@ LL |   }\n    |   borrowed value only lives until here\n    |   borrow later used here, when `gen` is dropped\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0597`."}, {"sha": "992a31a73208345779eb4184de190d1e42a1fba5", "filename": "src/test/ui/generator/dropck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fgenerator%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fgenerator%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fdropck.rs?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -14,7 +14,7 @@ use std::cell::RefCell;\n use std::ops::Generator;\n \n fn main() {\n-    let (cell, mut gen);\n+    let (mut gen, cell);\n     cell = Box::new(RefCell::new(0));\n     let ref_ = Box::leak(Box::new(Some(cell.borrow_mut())));\n     //~^ ERROR `*cell` does not live long enough [E0597]"}, {"sha": "48f23486a317c0cf5685fc7646fe34e4c36d1735", "filename": "src/test/ui/generator/pattern-borrow.nll.stderr", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fgenerator%2Fpattern-borrow.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fgenerator%2Fpattern-borrow.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fpattern-borrow.nll.stderr?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -1,8 +1,11 @@\n-error: compilation successful\n-  --> $DIR/pattern-borrow.rs:15:1\n+error[E0626]: borrow may still be in use when generator yields\n+  --> $DIR/pattern-borrow.rs:19:24\n    |\n-LL | fn main() { #![rustc_error] } // rust-lang/rust#49855\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         if let Test::A(ref _a) = test { //~ ERROR borrow may still be in use when generator yields\n+   |                        ^^^^^^\n+LL |             yield ();\n+   |             -------- possible yield occurs here\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0626`."}, {"sha": "2c4c682d8cca92407b072ef70ec425bdb2c6a68d", "filename": "src/test/ui/generator/pattern-borrow.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fgenerator%2Fpattern-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fgenerator%2Fpattern-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fpattern-borrow.rs?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -8,16 +8,20 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(generators, rustc_attrs)]\n+#![feature(generators)]\n \n enum Test { A(i32), B, }\n \n-fn main() { #![rustc_error] } // rust-lang/rust#49855\n+fn main() { }\n \n fn fun(test: Test) {\n     move || {\n         if let Test::A(ref _a) = test { //~ ERROR borrow may still be in use when generator yields\n             yield ();\n+            _a.use_ref();\n         }\n     };\n }\n+\n+trait Fake { fn use_mut(&mut self) { } fn use_ref(&self) { }  }\n+impl<T> Fake for T { }"}, {"sha": "56dfee1fe33c1e43bd826edadce36b94c0ab9267", "filename": "src/test/ui/hygiene/fields-numeric-borrowck.nll.stderr", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fhygiene%2Ffields-numeric-borrowck.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fhygiene%2Ffields-numeric-borrowck.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Ffields-numeric-borrowck.nll.stderr?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -1,13 +1,14 @@\n-error: compilation successful\n-  --> $DIR/fields-numeric-borrowck.rs:13:1\n+error[E0499]: cannot borrow `s.0` as mutable more than once at a time\n+  --> $DIR/fields-numeric-borrowck.rs:16:16\n    |\n-LL | / fn main() { #![rustc_error] // rust-lang/rust#49855\n-LL | |     let mut s = S(0);\n-LL | |     let borrow1 = &mut s.0;\n-LL | |     let S { 0: ref mut borrow2 } = s;\n-LL | |     //~^ ERROR cannot borrow `s.0` as mutable more than once at a time\n-LL | | }\n-   | |_^\n+LL |     let borrow1 = &mut s.0;\n+   |                   -------- first mutable borrow occurs here\n+LL |     let S { 0: ref mut borrow2 } = s;\n+   |                ^^^^^^^^^^^^^^^ second mutable borrow occurs here\n+...\n+LL |     borrow1.use_mut();\n+   |     ------- borrow later used here\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0499`."}, {"sha": "7e14c811a30a12d99b1af788f2c0341b106593ff", "filename": "src/test/ui/hygiene/fields-numeric-borrowck.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fhygiene%2Ffields-numeric-borrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fhygiene%2Ffields-numeric-borrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Ffields-numeric-borrowck.rs?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -7,12 +7,17 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-#![feature(rustc_attrs)]\n+\n struct S(u8);\n \n-fn main() { #![rustc_error] // rust-lang/rust#49855\n+fn main() {\n     let mut s = S(0);\n     let borrow1 = &mut s.0;\n     let S { 0: ref mut borrow2 } = s;\n     //~^ ERROR cannot borrow `s.0` as mutable more than once at a time\n+    borrow2.use_mut();\n+    borrow1.use_mut();\n }\n+\n+trait Fake { fn use_mut(&mut self) { } fn use_ref(&self) { }  }\n+impl<T> Fake for T { }"}, {"sha": "d0156cfa671b5264e9be131836d022d267ba3caa", "filename": "src/test/ui/hygiene/fields-numeric-borrowck.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fhygiene%2Ffields-numeric-borrowck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fhygiene%2Ffields-numeric-borrowck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Ffields-numeric-borrowck.stderr?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -5,7 +5,7 @@ LL |     let borrow1 = &mut s.0;\n    |                        --- first mutable borrow occurs here\n LL |     let S { 0: ref mut borrow2 } = s;\n    |                ^^^^^^^^^^^^^^^ second mutable borrow occurs here\n-LL |     //~^ ERROR cannot borrow `s.0` as mutable more than once at a time\n+...\n LL | }\n    | - first borrow ends here\n "}, {"sha": "bd48d0eeb7c42ec903c972b9d68bce96d22f01cc", "filename": "src/test/ui/issue-25793.nll.stderr", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fissue-25793.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fissue-25793.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-25793.nll.stderr?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -1,8 +1,17 @@\n-error: compilation successful\n-  --> $DIR/issue-25793.rs:32:1\n+error[E0503]: cannot use `self.width` because it was mutably borrowed\n+  --> $DIR/issue-25793.rs:13:9\n    |\n-LL | fn main() { #![rustc_error] } // rust-lang/rust#49855\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         $this.width.unwrap()\n+   |         ^^^^^^^^^^^ use of borrowed `*self`\n+...\n+LL |         let r = &mut *self;\n+   |                 ---------- borrow of `*self` occurs here\n+LL |         r.get_size(width!(self))\n+   |         ------------------------\n+   |         |          |\n+   |         |          in this macro invocation\n+   |         borrow later used here\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0503`."}, {"sha": "2939646342aacbe21a03823648f94e745888d86d", "filename": "src/test/ui/issue-25793.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fissue-25793.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fissue-25793.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-25793.rs?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -25,8 +25,11 @@ impl HasInfo {\n     }\n \n     fn get_other(&mut self) -> usize {\n-        self.get_size(width!(self))\n+        let r = &mut *self;\n+        r.get_size(width!(self))\n     }\n+    // Above is like `self.get_size(width!(self))`, but it\n+    // deliberately avoids NLL's two phase borrow feature.\n }\n \n-fn main() { #![rustc_error] } // rust-lang/rust#49855\n+fn main() { }"}, {"sha": "fb83d767c50690d5c3774bab04f3cd3b2f72e967", "filename": "src/test/ui/issue-25793.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fissue-25793.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fissue-25793.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-25793.stderr?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -4,10 +4,10 @@ error[E0503]: cannot use `self.width` because it was mutably borrowed\n LL |         $this.width.unwrap()\n    |         ^^^^^^^^^^^ use of borrowed `*self`\n ...\n-LL |         self.get_size(width!(self))\n-   |         ----          ------------ in this macro invocation\n-   |         |\n-   |         borrow of `*self` occurs here\n+LL |         let r = &mut *self;\n+   |                      ----- borrow of `*self` occurs here\n+LL |         r.get_size(width!(self))\n+   |                    ------------ in this macro invocation\n \n error: aborting due to previous error\n "}, {"sha": "39e3c218f408912d1956d972a6c74d28d43ee58c", "filename": "src/test/ui/issue-42106.nll.stderr", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fissue-42106.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fissue-42106.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-42106.nll.stderr?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -1,8 +1,13 @@\n-error: compilation successful\n-  --> $DIR/issue-42106.rs:16:1\n+error[E0502]: cannot borrow `*collection` as mutable because it is also borrowed as immutable\n+  --> $DIR/issue-42106.rs:13:5\n    |\n-LL | fn main() { #![rustc_error] } // rust-lang/rust#49855\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     let _a = &collection;\n+   |              ----------- immutable borrow occurs here\n+LL |     collection.swap(1, 2); //~ ERROR also borrowed as immutable\n+   |     ^^^^^^^^^^ mutable borrow occurs here\n+LL |     _a.use_ref();\n+   |     -- borrow later used here\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0502`."}, {"sha": "b177a14af333c6e7cd1261f223287236626ab143", "filename": "src/test/ui/issue-42106.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fissue-42106.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fissue-42106.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-42106.rs?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -7,10 +7,14 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-#![feature(rustc_attrs)]\n+\n fn do_something<T>(collection: &mut Vec<T>) {\n     let _a = &collection;\n     collection.swap(1, 2); //~ ERROR also borrowed as immutable\n+    _a.use_ref();\n }\n \n-fn main() { #![rustc_error] } // rust-lang/rust#49855\n+fn main() { }\n+\n+trait Fake { fn use_mut(&mut self) { } fn use_ref(&self) { }  }\n+impl<T> Fake for T { }"}, {"sha": "d77ff315ce7fcea552ea7eb83643dd070c2b6e22", "filename": "src/test/ui/issue-42106.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fissue-42106.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fissue-42106.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-42106.stderr?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -5,6 +5,7 @@ LL |     let _a = &collection;\n    |               ---------- immutable borrow occurs here\n LL |     collection.swap(1, 2); //~ ERROR also borrowed as immutable\n    |     ^^^^^^^^^^ mutable borrow occurs here\n+LL |     _a.use_ref();\n LL | }\n    | - immutable borrow ends here\n "}, {"sha": "da171577e2d8b33f6d30c13e4698826742e03a1e", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-2.nll.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-2.nll.stderr?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -1,17 +1,17 @@\n warning: not reporting region error due to nll\n-  --> $DIR/ex3-both-anon-regions-2.rs:12:9\n+  --> $DIR/ex3-both-anon-regions-2.rs:12:10\n    |\n-LL |     v = x; //~ ERROR lifetime mismatch\n-   |         ^\n+LL |     *v = x; //~ ERROR lifetime mismatch\n+   |          ^\n \n-error[E0384]: cannot assign twice to immutable variable `v`\n-  --> $DIR/ex3-both-anon-regions-2.rs:12:5\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ex3-both-anon-regions-2.rs:11:14\n    |\n-LL | fn foo((v, w): (&u8, &u8), x: &u8) {\n-   |         - first assignment to `v`\n-LL |     v = x; //~ ERROR lifetime mismatch\n-   |     ^^^^^ cannot assign twice to immutable variable\n+LL | fn foo(&mut (ref mut v, w): &mut (&u8, &u8), x: &u8) {\n+   |              ^^^^^^^^^            ---           --- these two types are declared with different lifetimes...\n+   |              |\n+   |              ...but data from `x` flows here\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0384`.\n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "62d7d56f9f70361caff292ec08c989fb1f358b94", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-2.rs?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn foo((v, w): (&u8, &u8), x: &u8) {\n-    v = x; //~ ERROR lifetime mismatch\n+fn foo(&mut (ref mut v, w): &mut (&u8, &u8), x: &u8) {\n+    *v = x; //~ ERROR lifetime mismatch\n }\n \n fn main() { }"}, {"sha": "5e110b43fb4a8040ffa9d0c5d0246052ed03ea58", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-2.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-2.stderr?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -1,10 +1,10 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ex3-both-anon-regions-2.rs:12:9\n+  --> $DIR/ex3-both-anon-regions-2.rs:12:10\n    |\n-LL | fn foo((v, w): (&u8, &u8), x: &u8) {\n-   |                 ---           --- these two types are declared with different lifetimes...\n-LL |     v = x; //~ ERROR lifetime mismatch\n-   |         ^ ...but data from `x` flows here\n+LL | fn foo(&mut (ref mut v, w): &mut (&u8, &u8), x: &u8) {\n+   |                                   ---           --- these two types are declared with different lifetimes...\n+LL |     *v = x; //~ ERROR lifetime mismatch\n+   |          ^ ...but data from `x` flows here\n \n error: aborting due to previous error\n "}, {"sha": "7b7302ae58214527db675d483212264eef3c7037", "filename": "src/test/ui/lifetimes/borrowck-let-suggestion.nll.stderr", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.nll.stderr?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -1,10 +1,15 @@\n-error: compilation successful\n-  --> $DIR/borrowck-let-suggestion.rs:15:1\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/borrowck-let-suggestion.rs:12:17\n    |\n-LL | / fn main() { #![rustc_error] // rust-lang/rust#49855\n-LL | |     f();\n-LL | | }\n-   | |_^\n+LL |     let mut x = vec![1].iter();\n+   |                 ^^^^^^^       - temporary value only lives until here\n+   |                 |\n+   |                 temporary value does not live long enough\n+LL |     x.use_mut();\n+   |     - borrow later used here\n+   |\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "51a2a1fc883530ce671140e804bd239d16226011", "filename": "src/test/ui/lifetimes/borrowck-let-suggestion.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.rs?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -7,11 +7,15 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-#![feature(rustc_attrs)]\n+\n fn f() {\n-    let x = vec![1].iter();\n+    let mut x = vec![1].iter();\n+    x.use_mut();\n }\n \n-fn main() { #![rustc_error] // rust-lang/rust#49855\n+fn main() {\n     f();\n }\n+\n+trait Fake { fn use_mut(&mut self) { } fn use_ref(&self) { }  }\n+impl<T> Fake for T { }"}, {"sha": "32fdb9df96f2520f97e9f15315fc2d7c8e9a41d9", "filename": "src/test/ui/lifetimes/borrowck-let-suggestion.stderr", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.stderr?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -1,10 +1,11 @@\n error[E0597]: borrowed value does not live long enough\n-  --> $DIR/borrowck-let-suggestion.rs:12:13\n+  --> $DIR/borrowck-let-suggestion.rs:12:17\n    |\n-LL |     let x = vec![1].iter();\n-   |             ^^^^^^^       - temporary value dropped here while still borrowed\n-   |             |\n-   |             temporary value does not live long enough\n+LL |     let mut x = vec![1].iter();\n+   |                 ^^^^^^^       - temporary value dropped here while still borrowed\n+   |                 |\n+   |                 temporary value does not live long enough\n+LL |     x.use_mut();\n LL | }\n    | - temporary value needs to live until here\n    |"}, {"sha": "79cfee2d01fd565b541b6eff7949b00cd53f0380", "filename": "src/test/ui/span/borrowck-let-suggestion-suffixes.nll.stderr", "status": "modified", "additions": 33, "deletions": 7, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.nll.stderr?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -1,10 +1,36 @@\n-error: compilation successful\n-  --> $DIR/borrowck-let-suggestion-suffixes.rs:61:1\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/borrowck-let-suggestion-suffixes.rs:28:14\n    |\n-LL | / fn main() { #![rustc_error] // rust-lang/rust#49855\n-LL | |     f();\n-LL | | }\n-   | |_^\n+LL |     v3.push(&id('x'));           // statement 6\n+   |              ^^^^^^^ - temporary value only lives until here\n+   |              |\n+   |              temporary value does not live long enough\n+...\n+LL |     (v1, v2, v3, /* v4 is above. */ v5).use_ref();\n+   |              -- borrow later used here\n \n-error: aborting due to previous error\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/borrowck-let-suggestion-suffixes.rs:38:18\n+   |\n+LL |         v4.push(&id('y'));\n+   |                  ^^^^^^^ - temporary value only lives until here\n+   |                  |\n+   |                  temporary value does not live long enough\n+...\n+LL |         v4.use_ref();\n+   |         -- borrow later used here\n+\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/borrowck-let-suggestion-suffixes.rs:49:14\n+   |\n+LL |     v5.push(&id('z'));\n+   |              ^^^^^^^ - temporary value only lives until here\n+   |              |\n+   |              temporary value does not live long enough\n+...\n+LL |     (v1, v2, v3, /* v4 is above. */ v5).use_ref();\n+   |                                     -- borrow later used here\n+\n+error: aborting due to 3 previous errors\n \n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "b19a0b4c2c23391b2e9fcd250e67295034c779cd", "filename": "src/test/ui/span/borrowck-let-suggestion-suffixes.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.rs?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -40,7 +40,7 @@ fn f() {\n         //~| NOTE temporary value does not live long enough\n         //~| NOTE temporary value dropped here while still borrowed\n         //~| NOTE consider using a `let` binding to increase its lifetime\n-\n+        v4.use_ref();\n     }                       // (statement 7)\n     //~^ NOTE temporary value needs to live until here\n \n@@ -53,6 +53,8 @@ fn f() {\n     //~| NOTE consider using a `let` binding to increase its lifetime\n \n     v1.push(&old[0]);\n+\n+    (v1, v2, v3, /* v4 is above. */ v5).use_ref();\n }\n //~^ NOTE `young[..]` dropped here while still borrowed\n //~| NOTE temporary value needs to live until here\n@@ -61,3 +63,6 @@ fn f() {\n fn main() { #![rustc_error] // rust-lang/rust#49855\n     f();\n }\n+\n+trait Fake { fn use_mut(&mut self) { } fn use_ref(&self) { }  }\n+impl<T> Fake for T { }"}, {"sha": "a3b8a3e766bbfb7c01ffe4674bd815a64aadd949", "filename": "src/test/ui/span/issue-36537.nll.stderr", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fspan%2Fissue-36537.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fspan%2Fissue-36537.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-36537.nll.stderr?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -1,13 +1,14 @@\n-error: compilation successful\n-  --> $DIR/issue-36537.rs:11:1\n+error[E0597]: `a` does not live long enough\n+  --> $DIR/issue-36537.rs:15:9\n    |\n-LL | / fn main() { #![rustc_error] // rust-lang/rust#49855\n-LL | |     let p;\n-LL | |     let a = 42;\n-LL | |     p = &a;\n-LL | |     //~^ ERROR `a` does not live long enough\n-LL | | }\n-   | |_^\n+LL |         p = &a;\n+   |         ^^^^^^ borrowed value does not live long enough\n+...\n+LL |     }\n+   |     - borrowed value only lives until here\n+LL |     p.use_ref();\n+   |     - borrow later used here\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "6f1647c9ebb260c763380948da16143cf2f635be", "filename": "src/test/ui/span/issue-36537.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fspan%2Fissue-36537.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fspan%2Fissue-36537.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-36537.rs?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -7,10 +7,18 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-#![feature(rustc_attrs)]\n-fn main() { #![rustc_error] // rust-lang/rust#49855\n+\n+fn main() {\n     let p;\n-    let a = 42;\n-    p = &a;\n-    //~^ ERROR `a` does not live long enough\n+    {\n+        let a = 42;\n+        p = &a;\n+        //~^ ERROR `a` does not live long enough\n+\n+    }\n+    p.use_ref();\n+\n }\n+\n+trait Fake { fn use_mut(&mut self) { } fn use_ref(&self) { }  }\n+impl<T> Fake for T { }"}, {"sha": "c090ae6318d3e552f29d5364f7fb72dcaf304747", "filename": "src/test/ui/span/issue-36537.stderr", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fspan%2Fissue-36537.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fspan%2Fissue-36537.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-36537.stderr?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -1,13 +1,14 @@\n error[E0597]: `a` does not live long enough\n-  --> $DIR/issue-36537.rs:14:10\n+  --> $DIR/issue-36537.rs:15:14\n    |\n-LL |     p = &a;\n-   |          ^ borrowed value does not live long enough\n-LL |     //~^ ERROR `a` does not live long enough\n+LL |         p = &a;\n+   |              ^ borrowed value does not live long enough\n+...\n+LL |     }\n+   |     - `a` dropped here while still borrowed\n+...\n LL | }\n-   | - `a` dropped here while still borrowed\n-   |\n-   = note: values in a scope are dropped in the opposite order they are created\n+   | - borrowed value needs to live until here\n \n error: aborting due to previous error\n "}, {"sha": "a99ff9e272619110a708e131294c70ac7e083a45", "filename": "src/test/ui/span/mut-ptr-cant-outlive-ref.nll.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fspan%2Fmut-ptr-cant-outlive-ref.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fspan%2Fmut-ptr-cant-outlive-ref.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmut-ptr-cant-outlive-ref.nll.stderr?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -1,14 +1,14 @@\n-error: compilation successful\n-  --> $DIR/mut-ptr-cant-outlive-ref.rs:13:1\n+error[E0597]: `b` does not live long enough\n+  --> $DIR/mut-ptr-cant-outlive-ref.rs:18:15\n    |\n-LL | / fn main() { #![rustc_error] // rust-lang/rust#49855\n-LL | |     let m = RefCell::new(0);\n-LL | |     let p;\n-LL | |     {\n-...  |\n-LL | |     //~^^ ERROR `b` does not live long enough\n-LL | | }\n-   | |_^\n+LL |         p = &*b;\n+   |               ^ borrowed value does not live long enough\n+LL |     }\n+   |     - borrowed value only lives until here\n+LL |     //~^^ ERROR `b` does not live long enough\n+LL |     p.use_ref();\n+   |     - borrow later used here\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "6cd2cf1e6734dcca3d211fc777743f77d4782765", "filename": "src/test/ui/span/mut-ptr-cant-outlive-ref.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fspan%2Fmut-ptr-cant-outlive-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fspan%2Fmut-ptr-cant-outlive-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmut-ptr-cant-outlive-ref.rs?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -7,15 +7,19 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-#![feature(rustc_attrs)]\n+\n use std::cell::RefCell;\n \n-fn main() { #![rustc_error] // rust-lang/rust#49855\n+fn main() {\n     let m = RefCell::new(0);\n     let p;\n     {\n         let b = m.borrow();\n         p = &*b;\n     }\n     //~^^ ERROR `b` does not live long enough\n+    p.use_ref();\n }\n+\n+trait Fake { fn use_mut(&mut self) { } fn use_ref(&self) { }  }\n+impl<T> Fake for T { }"}, {"sha": "34fcc9ef962925174a4062ba38791847a3558a9d", "filename": "src/test/ui/span/mut-ptr-cant-outlive-ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fspan%2Fmut-ptr-cant-outlive-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fspan%2Fmut-ptr-cant-outlive-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmut-ptr-cant-outlive-ref.stderr?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -5,7 +5,7 @@ LL |         p = &*b;\n    |               ^ borrowed value does not live long enough\n LL |     }\n    |     - `b` dropped here while still borrowed\n-LL |     //~^^ ERROR `b` does not live long enough\n+...\n LL | }\n    | - borrowed value needs to live until here\n "}, {"sha": "aff1fededbb3c4a5d0ac8cebf5dc1a27abd84725", "filename": "src/test/ui/span/range-2.nll.stderr", "status": "modified", "additions": 22, "deletions": 11, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fspan%2Frange-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fspan%2Frange-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Frange-2.nll.stderr?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -1,14 +1,25 @@\n-error: compilation successful\n-  --> $DIR/range-2.rs:13:1\n+error[E0597]: `b` does not live long enough\n+  --> $DIR/range-2.rs:17:13\n    |\n-LL | / pub fn main() { #![rustc_error] // rust-lang/rust#49855\n-LL | |     let r = {\n-LL | |         let a = 42;\n-LL | |         let b = 42;\n-...  |\n-LL | |     //~| ERROR `b` does not live long enough\n-LL | | }\n-   | |_^\n+LL |         &a..&b\n+   |             ^^ borrowed value does not live long enough\n+LL |     };\n+   |     - borrowed value only lives until here\n+...\n+LL |     r.use_ref();\n+   |     - borrow later used here\n \n-error: aborting due to previous error\n+error[E0597]: `a` does not live long enough\n+  --> $DIR/range-2.rs:17:9\n+   |\n+LL |         &a..&b\n+   |         ^^ borrowed value does not live long enough\n+LL |     };\n+   |     - borrowed value only lives until here\n+...\n+LL |     r.use_ref();\n+   |     - borrow later used here\n+\n+error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "6d2cd85fb666c13eaedac1930641136054ecbac5", "filename": "src/test/ui/span/range-2.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fspan%2Frange-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fspan%2Frange-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Frange-2.rs?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -18,4 +18,8 @@ pub fn main() { #![rustc_error] // rust-lang/rust#49855\n     };\n     //~^^ ERROR `a` does not live long enough\n     //~| ERROR `b` does not live long enough\n+    r.use_ref();\n }\n+\n+trait Fake { fn use_mut(&mut self) { } fn use_ref(&self) { }  }\n+impl<T> Fake for T { }"}, {"sha": "71e02af1f845fe82abd1f7b6498f79ea1fde2069", "filename": "src/test/ui/span/regionck-unboxed-closure-lifetimes.nll.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fspan%2Fregionck-unboxed-closure-lifetimes.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fspan%2Fregionck-unboxed-closure-lifetimes.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregionck-unboxed-closure-lifetimes.nll.stderr?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -1,14 +1,14 @@\n-error: compilation successful\n-  --> $DIR/regionck-unboxed-closure-lifetimes.rs:13:1\n+error[E0597]: `c` does not live long enough\n+  --> $DIR/regionck-unboxed-closure-lifetimes.rs:17:21\n    |\n-LL | / fn main() { #![rustc_error] // rust-lang/rust#49855\n-LL | |     let mut f;\n-LL | |     {\n-LL | |         let c = 1;\n-...  |\n-LL | |     }\n-LL | | }\n-   | |_^\n+LL |         let c_ref = &c;\n+   |                     ^^ borrowed value does not live long enough\n+...\n+LL |     }\n+   |     - borrowed value only lives until here\n+LL |     f.use_mut();\n+   |     - borrow later used here\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "7595f03fd31d9fe43001cf9d518a6cec148cff85", "filename": "src/test/ui/span/regionck-unboxed-closure-lifetimes.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fspan%2Fregionck-unboxed-closure-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fspan%2Fregionck-unboxed-closure-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregionck-unboxed-closure-lifetimes.rs?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -18,4 +18,8 @@ fn main() { #![rustc_error] // rust-lang/rust#49855\n         //~^ ERROR `c` does not live long enough\n         f = move |a: isize, b: isize| { a + b + *c_ref };\n     }\n+    f.use_mut();\n }\n+\n+trait Fake { fn use_mut(&mut self) { } fn use_ref(&self) { }  }\n+impl<T> Fake for T { }"}, {"sha": "8a1bb4a45e1b6af7531df42328c66dcdf1a0e811", "filename": "src/test/ui/span/regionck-unboxed-closure-lifetimes.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fspan%2Fregionck-unboxed-closure-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fspan%2Fregionck-unboxed-closure-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregionck-unboxed-closure-lifetimes.stderr?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -6,6 +6,7 @@ LL |         let c_ref = &c;\n ...\n LL |     }\n    |     - `c` dropped here while still borrowed\n+LL |     f.use_mut();\n LL | }\n    | - borrowed value needs to live until here\n "}, {"sha": "d411f0d26f4fbd7afafb40c6c1b27b7a2cbab152", "filename": "src/test/ui/span/send-is-not-static-std-sync.nll.stderr", "status": "modified", "additions": 27, "deletions": 5, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync.nll.stderr?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -9,8 +9,19 @@ LL |     drop(y); //~ ERROR cannot move out\n LL |         *lock.lock().unwrap() = &z;\n    |          ---- borrow later used here\n \n+error[E0597]: `z` does not live long enough\n+  --> $DIR/send-is-not-static-std-sync.rs:26:33\n+   |\n+LL |         *lock.lock().unwrap() = &z;\n+   |                                 ^^ borrowed value does not live long enough\n+LL |     }\n+   |     - borrowed value only lives until here\n+LL |     //~^^ ERROR `z` does not live long enough\n+LL |     lock.use_ref(); // (Mutex is #[may_dangle] so its dtor does not use `z` => needs explicit use)\n+   |     ---- borrow later used here\n+\n error[E0505]: cannot move out of `y` because it is borrowed\n-  --> $DIR/send-is-not-static-std-sync.rs:36:10\n+  --> $DIR/send-is-not-static-std-sync.rs:37:10\n    |\n LL |     *lock.write().unwrap() = &*y;\n    |                              --- borrow of `*y` occurs here\n@@ -20,8 +31,19 @@ LL |     drop(y); //~ ERROR cannot move out\n LL |         *lock.write().unwrap() = &z;\n    |          ---- borrow later used here\n \n+error[E0597]: `z` does not live long enough\n+  --> $DIR/send-is-not-static-std-sync.rs:40:34\n+   |\n+LL |         *lock.write().unwrap() = &z;\n+   |                                  ^^ borrowed value does not live long enough\n+LL |     }\n+   |     - borrowed value only lives until here\n+LL |     //~^^ ERROR `z` does not live long enough\n+LL |     lock.use_ref(); // (RwLock is #[may_dangle] so its dtor does not use `z` => needs explicit use)\n+   |     ---- borrow later used here\n+\n error[E0505]: cannot move out of `y` because it is borrowed\n-  --> $DIR/send-is-not-static-std-sync.rs:51:10\n+  --> $DIR/send-is-not-static-std-sync.rs:53:10\n    |\n LL |     tx.send(&*y);\n    |             --- borrow of `*y` occurs here\n@@ -32,17 +54,17 @@ LL |         tx.send(&z).unwrap();\n    |         -- borrow later used here\n \n error[E0597]: `z` does not live long enough\n-  --> $DIR/send-is-not-static-std-sync.rs:54:17\n+  --> $DIR/send-is-not-static-std-sync.rs:56:17\n    |\n LL |         tx.send(&z).unwrap();\n    |                 ^^ borrowed value does not live long enough\n LL |     }\n    |     - borrowed value only lives until here\n-LL |     //~^^ ERROR `z` does not live long enough\n+...\n LL | }\n    | - borrow later used here, when `tx` is dropped\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 6 previous errors\n \n Some errors occurred: E0505, E0597.\n For more information about an error, try `rustc --explain E0505`."}, {"sha": "08718ffc864b8847ac3e2ef952b9899748f5a56a", "filename": "src/test/ui/span/send-is-not-static-std-sync.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync.rs?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -26,6 +26,7 @@ fn mutex() {\n         *lock.lock().unwrap() = &z;\n     }\n     //~^^ ERROR `z` does not live long enough\n+    lock.use_ref(); // (Mutex is #[may_dangle] so its dtor does not use `z` => needs explicit use)\n }\n \n fn rwlock() {\n@@ -39,6 +40,7 @@ fn rwlock() {\n         *lock.write().unwrap() = &z;\n     }\n     //~^^ ERROR `z` does not live long enough\n+    lock.use_ref(); // (RwLock is #[may_dangle] so its dtor does not use `z` => needs explicit use)\n }\n \n fn channel() {\n@@ -54,6 +56,10 @@ fn channel() {\n         tx.send(&z).unwrap();\n     }\n     //~^^ ERROR `z` does not live long enough\n+    // (channels lack #[may_dangle], thus their dtors are implicit uses of `z`)\n }\n \n fn main() {}\n+\n+trait Fake { fn use_mut(&mut self) { } fn use_ref(&self) { }  }\n+impl<T> Fake for T { }"}, {"sha": "efcd1312da8e9111c198eef80d464239184d17c1", "filename": "src/test/ui/span/send-is-not-static-std-sync.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync.stderr?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -5,7 +5,7 @@ LL |         *lock.lock().unwrap() = &z;\n    |                                  ^ borrowed value does not live long enough\n LL |     }\n    |     - `z` dropped here while still borrowed\n-LL |     //~^^ ERROR `z` does not live long enough\n+...\n LL | }\n    | - borrowed value needs to live until here\n \n@@ -18,37 +18,37 @@ LL |     drop(y); //~ ERROR cannot move out\n    |          ^ move out of `y` occurs here\n \n error[E0597]: `z` does not live long enough\n-  --> $DIR/send-is-not-static-std-sync.rs:39:35\n+  --> $DIR/send-is-not-static-std-sync.rs:40:35\n    |\n LL |         *lock.write().unwrap() = &z;\n    |                                   ^ borrowed value does not live long enough\n LL |     }\n    |     - `z` dropped here while still borrowed\n-LL |     //~^^ ERROR `z` does not live long enough\n+...\n LL | }\n    | - borrowed value needs to live until here\n \n error[E0505]: cannot move out of `y` because it is borrowed\n-  --> $DIR/send-is-not-static-std-sync.rs:36:10\n+  --> $DIR/send-is-not-static-std-sync.rs:37:10\n    |\n LL |     *lock.write().unwrap() = &*y;\n    |                               -- borrow of `*y` occurs here\n LL |     drop(y); //~ ERROR cannot move out\n    |          ^ move out of `y` occurs here\n \n error[E0597]: `z` does not live long enough\n-  --> $DIR/send-is-not-static-std-sync.rs:54:18\n+  --> $DIR/send-is-not-static-std-sync.rs:56:18\n    |\n LL |         tx.send(&z).unwrap();\n    |                  ^ borrowed value does not live long enough\n LL |     }\n    |     - `z` dropped here while still borrowed\n-LL |     //~^^ ERROR `z` does not live long enough\n+...\n LL | }\n    | - borrowed value needs to live until here\n \n error[E0505]: cannot move out of `y` because it is borrowed\n-  --> $DIR/send-is-not-static-std-sync.rs:51:10\n+  --> $DIR/send-is-not-static-std-sync.rs:53:10\n    |\n LL |     tx.send(&*y);\n    |              -- borrow of `*y` occurs here"}, {"sha": "35838184e33992bc56b2be64a5442b56e4e0873e", "filename": "src/test/ui/span/slice-borrow.nll.stderr", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.nll.stderr?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -1,14 +1,16 @@\n-error: compilation successful\n-  --> $DIR/slice-borrow.rs:13:1\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/slice-borrow.rs:16:28\n    |\n-LL | / fn main() { #![rustc_error] // rust-lang/rust#49855\n-LL | |     let y;\n-LL | |     {\n-LL | |         let x: &[isize] = &vec![1, 2, 3, 4, 5];\n-LL | |         y = &x[1..];\n-LL | |     }\n-LL | | }\n-   | |_^\n+LL |         let x: &[isize] = &vec![1, 2, 3, 4, 5];\n+   |                            ^^^^^^^^^^^^^^^^^^^ temporary value does not live long enough\n+LL |         y = &x[1..];\n+LL |     }\n+   |     - temporary value only lives until here\n+LL |     y.use_ref();\n+   |     - borrow later used here\n+   |\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "2d9b49d89b8064211cd73de8d2f0b838570219cc", "filename": "src/test/ui/span/slice-borrow.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.rs?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -7,13 +7,17 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-#![feature(rustc_attrs)]\n+\n // Test slicing expressions doesn't defeat the borrow checker.\n \n-fn main() { #![rustc_error] // rust-lang/rust#49855\n+fn main() {\n     let y;\n     {\n         let x: &[isize] = &vec![1, 2, 3, 4, 5];\n         y = &x[1..];\n     }\n+    y.use_ref();\n }\n+\n+trait Fake { fn use_mut(&mut self) { } fn use_ref(&self) { }  }\n+impl<T> Fake for T { }"}, {"sha": "cb17064889168c7a5a87eaca53cb046e4b3a3f60", "filename": "src/test/ui/span/slice-borrow.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.stderr?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -6,6 +6,7 @@ LL |         let x: &[isize] = &vec![1, 2, 3, 4, 5];\n LL |         y = &x[1..];\n LL |     }\n    |     - temporary value dropped here while still borrowed\n+LL |     y.use_ref();\n LL | }\n    | - temporary value needs to live until here\n    |"}, {"sha": "6074199b89a1575cd95a062cc9f3f2abe37f0bcc", "filename": "src/test/ui/span/vec_refs_data_with_early_death.nll.stderr", "status": "modified", "additions": 24, "deletions": 11, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fspan%2Fvec_refs_data_with_early_death.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fspan%2Fvec_refs_data_with_early_death.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fvec_refs_data_with_early_death.nll.stderr?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -1,14 +1,27 @@\n-error: compilation successful\n-  --> $DIR/vec_refs_data_with_early_death.rs:21:1\n+error[E0597]: `y` does not live long enough\n+  --> $DIR/vec_refs_data_with_early_death.rs:29:12\n    |\n-LL | / fn main() { #![rustc_error] // rust-lang/rust#49855\n-LL | |     let mut v = Vec::new();\n-LL | |\n-LL | |     let x: i8 = 3;\n-...  |\n-LL | |     assert_eq!(v, [&3, &4]);\n-LL | | }\n-   | |_^\n+LL |     v.push(&y);\n+   |            ^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | -\n+   | |\n+   | borrowed value only lives until here\n+   | borrow later used here, when `v` is dropped\n \n-error: aborting due to previous error\n+error[E0597]: `x` does not live long enough\n+  --> $DIR/vec_refs_data_with_early_death.rs:27:12\n+   |\n+LL |     v.push(&x);\n+   |            ^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | -\n+   | |\n+   | borrowed value only lives until here\n+   | borrow later used here, when `v` is dropped\n+\n+error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "9febeaaee467553ee88458b2174e79bf808fbbda", "filename": "src/test/ui/span/vec_refs_data_with_early_death.rs", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fspan%2Fvec_refs_data_with_early_death.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1de3519c9f947f5cbc525719b9365f2fd58f7f9/src%2Ftest%2Fui%2Fspan%2Fvec_refs_data_with_early_death.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fvec_refs_data_with_early_death.rs?ref=b1de3519c9f947f5cbc525719b9365f2fd58f7f9", "patch": "@@ -9,17 +9,17 @@\n // except according to those terms.\n \n // This test is a simple example of code that violates the dropck\n-// rules: it pushes `&x` and `&y` into `v`, but the referenced data\n-// will be dropped before the vector itself is.\n-\n-// (In principle we know that `Vec` does not reference the data it\n-//  owns from within its drop code, apart from calling drop on each\n-//  element it owns; thus, for data like this, it seems like we could\n-//  loosen the restrictions here if we wanted. But it also is not\n-//  clear whether such loosening is terribly important.)\n-#![feature(rustc_attrs)]\n-fn main() { #![rustc_error] // rust-lang/rust#49855\n-    let mut v = Vec::new();\n+// rules: it pushes `&x` and `&y` into a bag (with dtor), but the\n+// referenced data will be dropped before the bag is.\n+\n+\n+\n+\n+\n+\n+\n+fn main() {\n+    let mut v = Bag::new();\n \n     let x: i8 = 3;\n     let y: i8 = 4;\n@@ -29,5 +29,15 @@ fn main() { #![rustc_error] // rust-lang/rust#49855\n     v.push(&y);\n     //~^ ERROR `y` does not live long enough\n \n-    assert_eq!(v, [&3, &4]);\n+    assert_eq!(v.0, [&3, &4]);\n+}\n+\n+//`Vec<T>` is #[may_dangle] w.r.t. `T`; putting a bag over its head\n+// forces borrowck to treat dropping the bag as a potential use.\n+struct Bag<T>(Vec<T>);\n+impl<T> Drop for Bag<T> { fn drop(&mut self) { } }\n+\n+impl<T> Bag<T> {\n+    fn new() -> Self { Bag(Vec::new()) }\n+    fn push(&mut self, t: T) { self.0.push(t); }\n }"}]}