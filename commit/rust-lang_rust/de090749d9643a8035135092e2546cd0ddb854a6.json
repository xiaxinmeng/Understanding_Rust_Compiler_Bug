{"sha": "de090749d9643a8035135092e2546cd0ddb854a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlMDkwNzQ5ZDk2NDNhODAzNTEzNTA5MmUyNTQ2Y2QwZGRiODU0YTY=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2021-05-23T17:56:54Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2021-05-23T19:46:20Z"}, "message": "Drag detached files towards loading", "tree": {"sha": "01f0564f53a7763ecf28a46860997c294a042f3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01f0564f53a7763ecf28a46860997c294a042f3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de090749d9643a8035135092e2546cd0ddb854a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de090749d9643a8035135092e2546cd0ddb854a6", "html_url": "https://github.com/rust-lang/rust/commit/de090749d9643a8035135092e2546cd0ddb854a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de090749d9643a8035135092e2546cd0ddb854a6/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "695569d9784b4a7d6e91451a0cc354f8bd009b59", "url": "https://api.github.com/repos/rust-lang/rust/commits/695569d9784b4a7d6e91451a0cc354f8bd009b59", "html_url": "https://github.com/rust-lang/rust/commit/695569d9784b4a7d6e91451a0cc354f8bd009b59"}], "stats": {"total": 94, "additions": 83, "deletions": 11}, "files": [{"sha": "8c6cf94c249fa73e7f43914d4bd29b14bc6f6c42", "filename": "crates/project_model/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/de090749d9643a8035135092e2546cd0ddb854a6/crates%2Fproject_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de090749d9643a8035135092e2546cd0ddb854a6/crates%2Fproject_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Flib.rs?ref=de090749d9643a8035135092e2546cd0ddb854a6", "patch": "@@ -50,7 +50,6 @@ pub use proc_macro_api::ProcMacroClient;\n pub enum ProjectManifest {\n     ProjectJson(AbsPathBuf),\n     CargoToml(AbsPathBuf),\n-    DetachedFile(AbsPathBuf),\n }\n \n impl ProjectManifest {"}, {"sha": "c89e2f6e1bf908784cfd5fa7c7df8d2e896bc791", "filename": "crates/project_model/src/sysroot.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de090749d9643a8035135092e2546cd0ddb854a6/crates%2Fproject_model%2Fsrc%2Fsysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de090749d9643a8035135092e2546cd0ddb854a6/crates%2Fproject_model%2Fsrc%2Fsysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fsysroot.rs?ref=de090749d9643a8035135092e2546cd0ddb854a6", "patch": "@@ -50,7 +50,9 @@ impl Sysroot {\n \n     pub fn discover(cargo_toml: &AbsPath) -> Result<Sysroot> {\n         log::debug!(\"Discovering sysroot for {}\", cargo_toml.display());\n-        let current_dir = cargo_toml.parent().unwrap();\n+        let current_dir = cargo_toml.parent().ok_or_else(|| {\n+            format_err!(\"Failed to find the parent directory for file {:?}\", cargo_toml)\n+        })?;\n         let sysroot_dir = discover_sysroot_dir(current_dir)?;\n         let sysroot_src_dir = discover_sysroot_src_dir(&sysroot_dir, current_dir)?;\n         let res = Sysroot::load(&sysroot_src_dir)?;"}, {"sha": "ad4c202f2008cf57189563ddd1cae09a7b60bd63", "filename": "crates/project_model/src/workspace.rs", "status": "modified", "additions": 69, "deletions": 4, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/de090749d9643a8035135092e2546cd0ddb854a6/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de090749d9643a8035135092e2546cd0ddb854a6/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fworkspace.rs?ref=de090749d9643a8035135092e2546cd0ddb854a6", "patch": "@@ -4,7 +4,7 @@\n \n use std::{collections::VecDeque, fmt, fs, path::Path, process::Command};\n \n-use anyhow::{Context, Result};\n+use anyhow::{format_err, Context, Result};\n use base_db::{CrateDisplayName, CrateGraph, CrateId, CrateName, Edition, Env, FileId, ProcMacro};\n use cargo_workspace::DepKind;\n use cfg::CfgOptions;\n@@ -49,6 +49,8 @@ pub enum ProjectWorkspace {\n     },\n     /// Project workspace was manually specified using a `rust-project.json` file.\n     Json { project: ProjectJson, sysroot: Option<Sysroot>, rustc_cfg: Vec<CfgFlag> },\n+    /// TODO kb docs\n+    DetachedFiles { files: Vec<AbsPathBuf>, sysroot: Sysroot, rustc_cfg: Vec<CfgFlag> },\n }\n \n impl fmt::Debug for ProjectWorkspace {\n@@ -75,6 +77,12 @@ impl fmt::Debug for ProjectWorkspace {\n                 debug_struct.field(\"n_rustc_cfg\", &rustc_cfg.len());\n                 debug_struct.finish()\n             }\n+            ProjectWorkspace::DetachedFiles { files, sysroot, rustc_cfg } => f\n+                .debug_struct(\"DetachedFiles\")\n+                .field(\"n_files\", &files.len())\n+                .field(\"n_sysroot_crates\", &sysroot.crates().len())\n+                .field(\"n_rustc_cfg\", &rustc_cfg.len())\n+                .finish(),\n         }\n     }\n }\n@@ -148,9 +156,6 @@ impl ProjectWorkspace {\n                 let rustc_cfg = rustc_cfg::get(Some(&cargo_toml), config.target.as_deref());\n                 ProjectWorkspace::Cargo { cargo, sysroot, rustc, rustc_cfg }\n             }\n-            ProjectManifest::DetachedFile(_) => {\n-                todo!(\"TODO kb\")\n-            }\n         };\n \n         Ok(res)\n@@ -168,6 +173,14 @@ impl ProjectWorkspace {\n         Ok(ProjectWorkspace::Json { project: project_json, sysroot, rustc_cfg })\n     }\n \n+    pub fn load_detached_files(detached_files: Vec<AbsPathBuf>) -> Result<ProjectWorkspace> {\n+        let sysroot = Sysroot::discover(\n+            &detached_files.first().ok_or_else(|| format_err!(\"No detached files to load\"))?,\n+        )?;\n+        let rustc_cfg = rustc_cfg::get(None, None);\n+        Ok(ProjectWorkspace::DetachedFiles { files: detached_files, sysroot, rustc_cfg })\n+    }\n+\n     /// Returns the roots for the current `ProjectWorkspace`\n     /// The return type contains the path and whether or not\n     /// the root is a member of the current workspace\n@@ -227,6 +240,19 @@ impl ProjectWorkspace {\n                     })\n                 }))\n                 .collect(),\n+            ProjectWorkspace::DetachedFiles { files, sysroot, .. } => files\n+                .into_iter()\n+                .map(|detached_file| PackageRoot {\n+                    is_member: true,\n+                    include: vec![detached_file.clone()],\n+                    exclude: Vec::new(),\n+                })\n+                .chain(sysroot.crates().map(|krate| PackageRoot {\n+                    is_member: false,\n+                    include: vec![sysroot[krate].root_dir().to_path_buf()],\n+                    exclude: Vec::new(),\n+                }))\n+                .collect(),\n         }\n     }\n \n@@ -237,6 +263,9 @@ impl ProjectWorkspace {\n                 let rustc_package_len = rustc.as_ref().map_or(0, |rc| rc.packages().len());\n                 cargo.packages().len() + sysroot.crates().len() + rustc_package_len\n             }\n+            ProjectWorkspace::DetachedFiles { sysroot, files, .. } => {\n+                sysroot.crates().len() + files.len()\n+            }\n         }\n     }\n \n@@ -270,6 +299,9 @@ impl ProjectWorkspace {\n                 rustc,\n                 rustc.as_ref().zip(build_data).and_then(|(it, map)| map.get(it.workspace_root())),\n             ),\n+            ProjectWorkspace::DetachedFiles { files, sysroot, rustc_cfg } => {\n+                detached_files_to_crate_graph(rustc_cfg.clone(), load, files, sysroot)\n+            }\n         };\n         if crate_graph.patch_cfg_if() {\n             log::debug!(\"Patched std to depend on cfg-if\")\n@@ -477,6 +509,39 @@ fn cargo_to_crate_graph(\n     crate_graph\n }\n \n+// TODO kb refactor and check for correctness\n+fn detached_files_to_crate_graph(\n+    rustc_cfg: Vec<CfgFlag>,\n+    load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n+    detached_files: &[AbsPathBuf],\n+    sysroot: &Sysroot,\n+) -> CrateGraph {\n+    let _p = profile::span(\"detached_files_to_crate_graph\");\n+    let mut crate_graph = CrateGraph::default();\n+    let (public_deps, _libproc_macro) =\n+        sysroot_to_crate_graph(&mut crate_graph, sysroot, rustc_cfg.clone(), load);\n+\n+    let mut cfg_options = CfgOptions::default();\n+    cfg_options.extend(rustc_cfg);\n+\n+    for detached_file in detached_files {\n+        let file_id = load(&detached_file).unwrap();\n+        let detached_file_crate = crate_graph.add_crate_root(\n+            file_id,\n+            Edition::Edition2018,\n+            None,\n+            cfg_options.clone(),\n+            Env::default(),\n+            Vec::new(),\n+        );\n+\n+        for (name, krate) in public_deps.iter() {\n+            add_dep(&mut crate_graph, detached_file_crate, name.clone(), *krate);\n+        }\n+    }\n+    crate_graph\n+}\n+\n fn handle_rustc_crates(\n     rustc_workspace: &CargoWorkspace,\n     load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,"}, {"sha": "7c02a507cdea50f92037607e3add819ce69b6281", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/de090749d9643a8035135092e2546cd0ddb854a6/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de090749d9643a8035135092e2546cd0ddb854a6/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=de090749d9643a8035135092e2546cd0ddb854a6", "patch": "@@ -236,7 +236,7 @@ impl Default for ConfigData {\n pub struct Config {\n     caps: lsp_types::ClientCapabilities,\n     data: ConfigData,\n-    detached_files: Vec<ProjectManifest>,\n+    detached_files: Vec<AbsPathBuf>,\n     pub discovered_projects: Option<Vec<ProjectManifest>>,\n     pub root_path: AbsPathBuf,\n }\n@@ -345,7 +345,6 @@ impl Config {\n         self.detached_files = get_field::<Vec<PathBuf>>(&mut json, \"detachedFiles\", None, \"[]\")\n             .into_iter()\n             .map(AbsPathBuf::assert)\n-            .map(ProjectManifest::DetachedFile)\n             .collect();\n         self.data = ConfigData::from_json(json);\n     }\n@@ -399,7 +398,7 @@ impl Config {\n         }\n     }\n \n-    pub fn detached_files(&self) -> &[ProjectManifest] {\n+    pub fn detached_files(&self) -> &[AbsPathBuf] {\n         &self.detached_files\n     }\n "}, {"sha": "6a36d29d4d8f1a02af04f0c9146040bc022496b3", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/de090749d9643a8035135092e2546cd0ddb854a6/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de090749d9643a8035135092e2546cd0ddb854a6/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=de090749d9643a8035135092e2546cd0ddb854a6", "patch": "@@ -312,6 +312,7 @@ impl GlobalStateSnapshot {\n                 cargo.target_by_root(&path).map(|it| (cargo, it))\n             }\n             ProjectWorkspace::Json { .. } => None,\n+            ProjectWorkspace::DetachedFiles { .. } => None,\n         })\n     }\n }"}, {"sha": "7a53e4a8b955e8a7b0515a40d3d82c528580b067", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/de090749d9643a8035135092e2546cd0ddb854a6/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de090749d9643a8035135092e2546cd0ddb854a6/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=de090749d9643a8035135092e2546cd0ddb854a6", "patch": "@@ -146,8 +146,8 @@ impl GlobalState {\n         log::info!(\"will fetch workspaces\");\n \n         self.task_pool.handle.spawn_with_sender({\n-            // TODO kb reload workspace here?\n             let linked_projects = self.config.linked_projects();\n+            let detached_files = self.config.detached_files().to_vec();\n             let cargo_config = self.config.cargo();\n \n             move |sender| {\n@@ -162,7 +162,7 @@ impl GlobalState {\n \n                 sender.send(Task::FetchWorkspace(ProjectWorkspaceProgress::Begin)).unwrap();\n \n-                let workspaces = linked_projects\n+                let mut workspaces = linked_projects\n                     .iter()\n                     .map(|project| match project {\n                         LinkedProject::ProjectManifest(manifest) => {\n@@ -181,6 +181,11 @@ impl GlobalState {\n                     })\n                     .collect::<Vec<_>>();\n \n+                if !detached_files.is_empty() {\n+                    workspaces\n+                        .push(project_model::ProjectWorkspace::load_detached_files(detached_files));\n+                }\n+\n                 log::info!(\"did fetch workspaces {:?}\", workspaces);\n                 sender\n                     .send(Task::FetchWorkspace(ProjectWorkspaceProgress::End(workspaces)))\n@@ -408,6 +413,7 @@ impl GlobalState {\n                         _ => None,\n                     }\n                 }\n+                ProjectWorkspace::DetachedFiles { .. } => None,\n             })\n             .map(|(id, root)| {\n                 let sender = sender.clone();"}]}