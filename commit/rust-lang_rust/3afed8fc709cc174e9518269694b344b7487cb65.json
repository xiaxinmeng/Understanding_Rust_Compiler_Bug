{"sha": "3afed8fc709cc174e9518269694b344b7487cb65", "node_id": "C_kwDOAAsO6NoAKDNhZmVkOGZjNzA5Y2MxNzRlOTUxODI2OTY5NGIzNDRiNzQ4N2NiNjU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-22T23:28:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-22T23:28:56Z"}, "message": "Rollup merge of #92208 - ChrisDenton:win-bat-cmd, r=dtolnay\n\nQuote bat script command line\n\nFixes #91991\n\n[`CreateProcessW`](https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createprocessw#parameters) should only be used to run exe files but it does have some (undocumented) special handling for files with `.bat` and `.cmd` extensions. Essentially those magic extensions will cause the parameters to be automatically rewritten. Example pseudo Rust code (note that `CreateProcess` starts with an optional application name followed by the application arguments):\n```rust\n// These arguments...\nCreateProcess(None, `@\"foo.bat` \"hello world\"\"`@,` ...);\n// ...are rewritten as\nCreateProcess(Some(r\"C:\\Windows\\System32\\cmd.exe\"), `@\"\"foo.bat` \"hello world\"\"\"`@,` ...);\n```\n\nHowever, when setting the first parameter (the application name) as we now do, it will omit the extra level of quotes around the arguments:\n\n```rust\n// These arguments...\nCreateProcess(Some(\"foo.bat\"), `@\"foo.bat` \"hello world\"\"`@,` ...);\n// ...are rewritten as\nCreateProcess(Some(r\"C:\\Windows\\System32\\cmd.exe\"), `@\"foo.bat` \"hello world\"\"`@,` ...);\n```\n\nThis means the arguments won't be passed to the script as intended.\n\nNote that running batch files this way is undocumented but people have relied on this so we probably shouldn't break it.", "tree": {"sha": "8fcbec674ee1e35fec378987671a840a0f8c8757", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8fcbec674ee1e35fec378987671a840a0f8c8757"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3afed8fc709cc174e9518269694b344b7487cb65", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhw7S4CRBK7hj4Ov3rIwAAG80IAJa1JBiJsqx42eap4JzbGdY4\nPZUjGJmyxtWSZ4cNVlXMqaaiR9eV5/dUJktBNzguPgyDAS0e4CXTJgmNg+ecy//k\nRWDGLjj3Z2LZB0xcxuo9hIXZtYkrZahVIsUw9teceWua3uN+OM9p6/0RYG0t2roT\nEmhieVD9A2dDbwR4pvJANXwB95GGZGkYuXOx8hFopn4ModxMiiWWPvHl71Nwtm9B\nwWkGKdt7Hy6gDDxnR8kS24LTDEzGQG449KKPBXih446UG0s1F4OnMczbXg5oSYVc\n986swFZfG7qRD9Cnfjvu5heWcmZOuJeCAdliAh1YRxgR5LB5no/anq9wyGr2I04=\n=H/Nx\n-----END PGP SIGNATURE-----\n", "payload": "tree 8fcbec674ee1e35fec378987671a840a0f8c8757\nparent 051d91a5ce6c6a7fa2f4759a4df546254fb5cccc\nparent de764a7ccbbcaf90db88569ce7a8b5e2214cfcd8\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1640215736 +0100\ncommitter GitHub <noreply@github.com> 1640215736 +0100\n\nRollup merge of #92208 - ChrisDenton:win-bat-cmd, r=dtolnay\n\nQuote bat script command line\n\nFixes #91991\n\n[`CreateProcessW`](https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createprocessw#parameters) should only be used to run exe files but it does have some (undocumented) special handling for files with `.bat` and `.cmd` extensions. Essentially those magic extensions will cause the parameters to be automatically rewritten. Example pseudo Rust code (note that `CreateProcess` starts with an optional application name followed by the application arguments):\n```rust\n// These arguments...\nCreateProcess(None, `@\"foo.bat` \"hello world\"\"`@,` ...);\n// ...are rewritten as\nCreateProcess(Some(r\"C:\\Windows\\System32\\cmd.exe\"), `@\"\"foo.bat` \"hello world\"\"\"`@,` ...);\n```\n\nHowever, when setting the first parameter (the application name) as we now do, it will omit the extra level of quotes around the arguments:\n\n```rust\n// These arguments...\nCreateProcess(Some(\"foo.bat\"), `@\"foo.bat` \"hello world\"\"`@,` ...);\n// ...are rewritten as\nCreateProcess(Some(r\"C:\\Windows\\System32\\cmd.exe\"), `@\"foo.bat` \"hello world\"\"`@,` ...);\n```\n\nThis means the arguments won't be passed to the script as intended.\n\nNote that running batch files this way is undocumented but people have relied on this so we probably shouldn't break it.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3afed8fc709cc174e9518269694b344b7487cb65", "html_url": "https://github.com/rust-lang/rust/commit/3afed8fc709cc174e9518269694b344b7487cb65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3afed8fc709cc174e9518269694b344b7487cb65/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "051d91a5ce6c6a7fa2f4759a4df546254fb5cccc", "url": "https://api.github.com/repos/rust-lang/rust/commits/051d91a5ce6c6a7fa2f4759a4df546254fb5cccc", "html_url": "https://github.com/rust-lang/rust/commit/051d91a5ce6c6a7fa2f4759a4df546254fb5cccc"}, {"sha": "de764a7ccbbcaf90db88569ce7a8b5e2214cfcd8", "url": "https://api.github.com/repos/rust-lang/rust/commits/de764a7ccbbcaf90db88569ce7a8b5e2214cfcd8", "html_url": "https://github.com/rust-lang/rust/commit/de764a7ccbbcaf90db88569ce7a8b5e2214cfcd8"}], "stats": {"total": 35, "additions": 35, "deletions": 0}, "files": [{"sha": "e5cdc4737068a4a06a642657a11ee1b9d11d94ef", "filename": "library/std/src/process/tests.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3afed8fc709cc174e9518269694b344b7487cb65/library%2Fstd%2Fsrc%2Fprocess%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3afed8fc709cc174e9518269694b344b7487cb65/library%2Fstd%2Fsrc%2Fprocess%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess%2Ftests.rs?ref=3afed8fc709cc174e9518269694b344b7487cb65", "patch": "@@ -420,3 +420,22 @@ fn env_empty() {\n     let p = Command::new(\"cmd\").args(&[\"/C\", \"exit 0\"]).env_clear().spawn();\n     assert!(p.is_ok());\n }\n+\n+// See issue #91991\n+#[test]\n+#[cfg(windows)]\n+fn run_bat_script() {\n+    let tempdir = crate::sys_common::io::test::tmpdir();\n+    let script_path = tempdir.join(\"hello.cmd\");\n+\n+    crate::fs::write(&script_path, \"@echo Hello, %~1!\").unwrap();\n+    let output = Command::new(&script_path)\n+        .arg(\"fellow Rustaceans\")\n+        .stdout(crate::process::Stdio::piped())\n+        .spawn()\n+        .unwrap()\n+        .wait_with_output()\n+        .unwrap();\n+    assert!(output.status.success());\n+    assert_eq!(String::from_utf8_lossy(&output.stdout).trim(), \"Hello, fellow Rustaceans!\");\n+}"}, {"sha": "e84dfbce4a7540b97fc8e6b3d52fe0cc184bbe57", "filename": "library/std/src/sys/windows/process.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3afed8fc709cc174e9518269694b344b7487cb65/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3afed8fc709cc174e9518269694b344b7487cb65/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs?ref=3afed8fc709cc174e9518269694b344b7487cb65", "patch": "@@ -704,6 +704,19 @@ fn make_command_line(prog: &OsStr, args: &[Arg], force_quotes: bool) -> io::Resu\n     // Encode the command and arguments in a command line string such\n     // that the spawned process may recover them using CommandLineToArgvW.\n     let mut cmd: Vec<u16> = Vec::new();\n+\n+    // CreateFileW has special handling for .bat and .cmd files, which means we\n+    // need to add an extra pair of quotes surrounding the whole command line\n+    // so they are properly passed on to the script.\n+    // See issue #91991.\n+    let is_batch_file = Path::new(prog)\n+        .extension()\n+        .map(|ext| ext.eq_ignore_ascii_case(\"cmd\") || ext.eq_ignore_ascii_case(\"bat\"))\n+        .unwrap_or(false);\n+    if is_batch_file {\n+        cmd.push(b'\"' as u16);\n+    }\n+\n     // Always quote the program name so CreateProcess doesn't interpret args as\n     // part of the name if the binary wasn't found first time.\n     append_arg(&mut cmd, prog, Quote::Always)?;\n@@ -715,6 +728,9 @@ fn make_command_line(prog: &OsStr, args: &[Arg], force_quotes: bool) -> io::Resu\n         };\n         append_arg(&mut cmd, arg, quote)?;\n     }\n+    if is_batch_file {\n+        cmd.push(b'\"' as u16);\n+    }\n     return Ok(cmd);\n \n     fn append_arg(cmd: &mut Vec<u16>, arg: &OsStr, quote: Quote) -> io::Result<()> {"}]}