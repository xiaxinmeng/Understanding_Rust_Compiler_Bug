{"sha": "0d3bee8be03e58cfe0295a775961a4daa2ea2fd1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkM2JlZThiZTAzZTU4Y2ZlMDI5NWE3NzU5NjFhNGRhYTJlYTJmZDE=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-05-20T15:56:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-20T15:56:46Z"}, "message": "Rollup merge of #85275 - CDirkx:memchr, r=m-ou-se\n\nMove `std::memchr` to `sys_common`\n\n`std::memchr` is a thin abstraction over the different `memchr` implementations in `sys`, along with documentation and tests. The module is only used internally by `std`, nothing is exported externally. Code like this is exactly what the `sys_common` module is for, so this PR moves it there.", "tree": {"sha": "7bbf034849d62e31e35417daabc14711e74bff02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7bbf034849d62e31e35417daabc14711e74bff02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d3bee8be03e58cfe0295a775961a4daa2ea2fd1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgpobBCRBK7hj4Ov3rIwAA9EUIADhPL5yuFNI0sqXi/LuDwJof\n40tak3lEaNpy83L5GqlMMqKkvyg4bdICOAxLsHdQU7LBYhNLmvOcVOQQyAxiJERE\n8ej2cT6BZtxbn1KT5zqCW7ibswIaEk8cVTDKOlFoaR23iQFRSNf9pzrTvMJjt+xr\nbBIMipDhdZCz8mRljRRHN4HNUNnDIiD8uHca61ctaBG0ojpuDQ3M4bvcFvNEABd4\nQb4Pc24KeYXtd4oEOWX5vseI6uF/rdGT5jhBk2i4A05Pm0eHE/3ZnzSWD4EF91Do\nj+u5+4wEGd7REAk/MQXBtuODT8VfacJHhTRdO+Zn0kG0s3Gb058GZoBaYXvpy8A=\n=3hW1\n-----END PGP SIGNATURE-----\n", "payload": "tree 7bbf034849d62e31e35417daabc14711e74bff02\nparent 8a57820bca64a252489790a57cb5ea23db6f9198\nparent 5353c5c3fb7ebc4fb12ca3488c555ee3006c8325\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1621526206 +0200\ncommitter GitHub <noreply@github.com> 1621526206 +0200\n\nRollup merge of #85275 - CDirkx:memchr, r=m-ou-se\n\nMove `std::memchr` to `sys_common`\n\n`std::memchr` is a thin abstraction over the different `memchr` implementations in `sys`, along with documentation and tests. The module is only used internally by `std`, nothing is exported externally. Code like this is exactly what the `sys_common` module is for, so this PR moves it there.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d3bee8be03e58cfe0295a775961a4daa2ea2fd1", "html_url": "https://github.com/rust-lang/rust/commit/0d3bee8be03e58cfe0295a775961a4daa2ea2fd1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d3bee8be03e58cfe0295a775961a4daa2ea2fd1/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a57820bca64a252489790a57cb5ea23db6f9198", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a57820bca64a252489790a57cb5ea23db6f9198", "html_url": "https://github.com/rust-lang/rust/commit/8a57820bca64a252489790a57cb5ea23db6f9198"}, {"sha": "5353c5c3fb7ebc4fb12ca3488c555ee3006c8325", "url": "https://api.github.com/repos/rust-lang/rust/commits/5353c5c3fb7ebc4fb12ca3488c555ee3006c8325", "html_url": "https://github.com/rust-lang/rust/commit/5353c5c3fb7ebc4fb12ca3488c555ee3006c8325"}], "stats": {"total": 18, "additions": 10, "deletions": 8}, "files": [{"sha": "2a4ef553be3997626f70db57441799c398411009", "filename": "library/std/src/ffi/c_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d3bee8be03e58cfe0295a775961a4daa2ea2fd1/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d3bee8be03e58cfe0295a775961a4daa2ea2fd1/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs?ref=0d3bee8be03e58cfe0295a775961a4daa2ea2fd1", "patch": "@@ -10,7 +10,6 @@ use crate::error::Error;\n use crate::fmt::{self, Write};\n use crate::io;\n use crate::mem;\n-use crate::memchr;\n use crate::num::NonZeroU8;\n use crate::ops;\n use crate::os::raw::c_char;\n@@ -20,6 +19,7 @@ use crate::slice;\n use crate::str::{self, Utf8Error};\n use crate::sync::Arc;\n use crate::sys;\n+use crate::sys_common::memchr;\n \n /// A type representing an owned, C-compatible, nul-terminated string with no nul bytes in the\n /// middle."}, {"sha": "0175d2693e894c9361a33eeb626815311b3a1443", "filename": "library/std/src/io/buffered/linewritershim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d3bee8be03e58cfe0295a775961a4daa2ea2fd1/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Flinewritershim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d3bee8be03e58cfe0295a775961a4daa2ea2fd1/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Flinewritershim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Flinewritershim.rs?ref=0d3bee8be03e58cfe0295a775961a4daa2ea2fd1", "patch": "@@ -1,5 +1,5 @@\n use crate::io::{self, BufWriter, IoSlice, Write};\n-use crate::memchr;\n+use crate::sys_common::memchr;\n \n /// Private helper struct for implementing the line-buffered writing logic.\n /// This shim temporarily wraps a BufWriter, and uses its internals to"}, {"sha": "a8f3412c611169ac4cf615516e82fdf2603e85cc", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d3bee8be03e58cfe0295a775961a4daa2ea2fd1/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d3bee8be03e58cfe0295a775961a4daa2ea2fd1/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=0d3bee8be03e58cfe0295a775961a4daa2ea2fd1", "patch": "@@ -253,12 +253,12 @@ mod tests;\n \n use crate::cmp;\n use crate::fmt;\n-use crate::memchr;\n use crate::ops::{Deref, DerefMut};\n use crate::ptr;\n use crate::slice;\n use crate::str;\n use crate::sys;\n+use crate::sys_common::memchr;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::buffered::IntoInnerError;"}, {"sha": "442b5628d1dc0703a464f6916b164496a0f56bfc", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0d3bee8be03e58cfe0295a775961a4daa2ea2fd1/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d3bee8be03e58cfe0295a775961a4daa2ea2fd1/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=0d3bee8be03e58cfe0295a775961a4daa2ea2fd1", "patch": "@@ -530,7 +530,6 @@ mod sys;\n pub mod alloc;\n \n // Private support modules\n-mod memchr;\n mod panicking;\n \n // The runtime entry point and a few unstable public functions used by the"}, {"sha": "40bd393098f5731d37db8127529f36883105d884", "filename": "library/std/src/sys/hermit/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d3bee8be03e58cfe0295a775961a4daa2ea2fd1/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d3bee8be03e58cfe0295a775961a4daa2ea2fd1/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fos.rs?ref=0d3bee8be03e58cfe0295a775961a4daa2ea2fd1", "patch": "@@ -4,11 +4,11 @@ use crate::ffi::{CStr, OsStr, OsString};\n use crate::fmt;\n use crate::io;\n use crate::marker::PhantomData;\n-use crate::memchr;\n use crate::path::{self, PathBuf};\n use crate::str;\n use crate::sync::Mutex;\n use crate::sys::hermit::abi;\n+use crate::sys::memchr;\n use crate::sys::unsupported;\n use crate::sys_common::os_str_bytes::*;\n use crate::vec;"}, {"sha": "bbc4691d963c6405ff08bb5156fd4e092b082d97", "filename": "library/std/src/sys/unix/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d3bee8be03e58cfe0295a775961a4daa2ea2fd1/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d3bee8be03e58cfe0295a775961a4daa2ea2fd1/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs?ref=0d3bee8be03e58cfe0295a775961a4daa2ea2fd1", "patch": "@@ -13,13 +13,13 @@ use crate::fmt;\n use crate::io;\n use crate::iter;\n use crate::mem;\n-use crate::memchr;\n use crate::path::{self, PathBuf};\n use crate::ptr;\n use crate::slice;\n use crate::str;\n use crate::sys::cvt;\n use crate::sys::fd;\n+use crate::sys::memchr;\n use crate::sys::rwlock::{RWLockReadGuard, StaticRWLock};\n use crate::sys_common::mutex::{StaticMutex, StaticMutexGuard};\n use crate::vec;"}, {"sha": "b219e87891264060f1ee3d87a0c9fcb617d0a010", "filename": "library/std/src/sys_common/memchr.rs", "status": "renamed", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d3bee8be03e58cfe0295a775961a4daa2ea2fd1/library%2Fstd%2Fsrc%2Fsys_common%2Fmemchr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d3bee8be03e58cfe0295a775961a4daa2ea2fd1/library%2Fstd%2Fsrc%2Fsys_common%2Fmemchr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fmemchr.rs?ref=0d3bee8be03e58cfe0295a775961a4daa2ea2fd1", "patch": "@@ -1,6 +1,8 @@\n // Original implementation taken from rust-memchr.\n // Copyright 2015 Andrew Gallant, bluss and Nicolas Koch\n \n+use crate::sys::memchr as sys;\n+\n #[cfg(test)]\n mod tests;\n \n@@ -25,7 +27,7 @@ mod tests;\n /// ```\n #[inline]\n pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {\n-    crate::sys::memchr::memchr(needle, haystack)\n+    sys::memchr(needle, haystack)\n }\n \n /// A safe interface to `memrchr`.\n@@ -45,5 +47,5 @@ pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {\n /// ```\n #[inline]\n pub fn memrchr(needle: u8, haystack: &[u8]) -> Option<usize> {\n-    crate::sys::memchr::memrchr(needle, haystack)\n+    sys::memrchr(needle, haystack)\n }", "previous_filename": "library/std/src/memchr.rs"}, {"sha": "557d749c7f63e2f2c3e0976f8b7abb610764bfc3", "filename": "library/std/src/sys_common/memchr/tests.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0d3bee8be03e58cfe0295a775961a4daa2ea2fd1/library%2Fstd%2Fsrc%2Fsys_common%2Fmemchr%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d3bee8be03e58cfe0295a775961a4daa2ea2fd1/library%2Fstd%2Fsrc%2Fsys_common%2Fmemchr%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fmemchr%2Ftests.rs?ref=0d3bee8be03e58cfe0295a775961a4daa2ea2fd1", "previous_filename": "library/std/src/memchr/tests.rs"}, {"sha": "1a9caa22c92434a4b6a8d415003bbccdaa310173", "filename": "library/std/src/sys_common/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0d3bee8be03e58cfe0295a775961a4daa2ea2fd1/library%2Fstd%2Fsrc%2Fsys_common%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d3bee8be03e58cfe0295a775961a4daa2ea2fd1/library%2Fstd%2Fsrc%2Fsys_common%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fmod.rs?ref=0d3bee8be03e58cfe0295a775961a4daa2ea2fd1", "patch": "@@ -25,6 +25,7 @@ pub mod bytestring;\n pub mod condvar;\n pub mod fs;\n pub mod io;\n+pub mod memchr;\n pub mod mutex;\n // `doc` is required because `sys/mod.rs` imports `unix/ext/mod.rs` on Windows\n // when generating documentation."}]}