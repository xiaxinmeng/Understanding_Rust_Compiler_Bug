{"sha": "24712f99826b834e93639cc325124d70e2595f3c", "node_id": "C_kwDOAAsO6NoAKDI0NzEyZjk5ODI2YjgzNGU5MzYzOWNjMzI1MTI0ZDcwZTI1OTVmM2M", "commit": {"author": {"name": "Thom Chiovoloni", "email": "thom@shift.click", "date": "2022-11-25T02:12:12Z"}, "committer": {"name": "Thom Chiovoloni", "email": "thom@shift.click", "date": "2022-11-25T02:12:12Z"}, "message": "Revert \"Forbid inlining `thread_local!`'s `__getit` function on Windows\"\n\nThis reverts commit 3099dfdd9fc1a331eb9c53200b310fa1a06e1573.", "tree": {"sha": "9a1ff0abb9d580cec7b2ca8906ee907b62b9ec57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a1ff0abb9d580cec7b2ca8906ee907b62b9ec57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24712f99826b834e93639cc325124d70e2595f3c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQQszICQ1r0Zqrp7OLPXcz0dendfCgUCY4AkfgAKCRDXcz0dendf\nCluYAQDopALq2/b0YkDNYW3DYd8pV0MGqowzCbxpq0qMt7DFWQD/SbXEDBzOWzcK\nZaMrnv4QkW6LgTZxjL3HcURmXNQCqAs=\n=HXon\n-----END PGP SIGNATURE-----", "payload": "tree 9a1ff0abb9d580cec7b2ca8906ee907b62b9ec57\nparent b3bc6bf31265ac10946a0832092dbcedf9b26805\nauthor Thom Chiovoloni <thom@shift.click> 1669342332 -0800\ncommitter Thom Chiovoloni <thom@shift.click> 1669342332 -0800\n\nRevert \"Forbid inlining `thread_local!`'s `__getit` function on Windows\"\n\nThis reverts commit 3099dfdd9fc1a331eb9c53200b310fa1a06e1573.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24712f99826b834e93639cc325124d70e2595f3c", "html_url": "https://github.com/rust-lang/rust/commit/24712f99826b834e93639cc325124d70e2595f3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24712f99826b834e93639cc325124d70e2595f3c/comments", "author": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3bc6bf31265ac10946a0832092dbcedf9b26805", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3bc6bf31265ac10946a0832092dbcedf9b26805", "html_url": "https://github.com/rust-lang/rust/commit/b3bc6bf31265ac10946a0832092dbcedf9b26805"}], "stats": {"total": 25, "additions": 9, "deletions": 16}, "files": [{"sha": "5d267891bb0ed3b1538541624a3922134bbbb3b1", "filename": "library/std/src/thread/local.rs", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/24712f99826b834e93639cc325124d70e2595f3c/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24712f99826b834e93639cc325124d70e2595f3c/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs?ref=24712f99826b834e93639cc325124d70e2595f3c", "patch": "@@ -181,8 +181,7 @@ macro_rules! thread_local {\n macro_rules! __thread_local_inner {\n     // used to generate the `LocalKey` value for const-initialized thread locals\n     (@key $t:ty, const $init:expr) => {{\n-        #[cfg_attr(not(all(windows, target_thread_local)), inline)] // see comments below\n-        #[cfg_attr(all(windows, target_thread_local), inline(never))]\n+        #[cfg_attr(not(windows), inline)] // see comments below\n         #[deny(unsafe_op_in_unsafe_fn)]\n         unsafe fn __getit(\n             _init: $crate::option::Option<&mut $crate::option::Option<$t>>,\n@@ -295,17 +294,12 @@ macro_rules! __thread_local_inner {\n             fn __init() -> $t { $init }\n \n             // When reading this function you might ask \"why is this inlined\n-            // everywhere other than Windows?\", and \"why must it not be inlined\n-            // on Windows?\" and these are very reasonable questions to ask.\n-            //\n-            // The short story is that Windows doesn't support referencing\n-            // `#[thread_local]` across DLL boundaries. The slightly longer\n-            // story is that each module (dll or exe) has its own separate set\n-            // of static thread locals, so if you try and reference a\n-            // `#[thread_local]` that comes from `crate1.dll` from within one of\n-            // `crate2.dll`'s functions, then it might give you a completely\n-            // different thread local than what you asked for (or it might just\n-            // crash).\n+            // everywhere other than Windows?\", and that's a very reasonable\n+            // question to ask. The short story is that it segfaults rustc if\n+            // this function is inlined. The longer story is that Windows looks\n+            // to not support `extern` references to thread locals across DLL\n+            // boundaries. This appears to at least not be supported in the ABI\n+            // that LLVM implements.\n             //\n             // Because of this we never inline on Windows, but we do inline on\n             // other platforms (where external references to thread locals\n@@ -320,9 +314,8 @@ macro_rules! __thread_local_inner {\n             // Cargo question kinda). This means that, unfortunately, Windows\n             // gets the pessimistic path for now where it's never inlined.\n             //\n-            // The issue of \"should improve things on Windows\" is #84933\n-            #[cfg_attr(not(all(windows, target_thread_local)), inline)]\n-            #[cfg_attr(all(windows, target_thread_local), inline(never))]\n+            // The issue of \"should enable on Windows sometimes\" is #84933\n+            #[cfg_attr(not(windows), inline)]\n             unsafe fn __getit(\n                 init: $crate::option::Option<&mut $crate::option::Option<$t>>,\n             ) -> $crate::option::Option<&'static $t> {"}]}