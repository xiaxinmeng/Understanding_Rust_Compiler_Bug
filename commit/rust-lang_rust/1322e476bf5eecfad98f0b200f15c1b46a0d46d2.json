{"sha": "1322e476bf5eecfad98f0b200f15c1b46a0d46d2", "node_id": "C_kwDOAAsO6NoAKDEzMjJlNDc2YmY1ZWVjZmFkOThmMGIyMDBmMTVjMWI0NmEwZDQ2ZDI", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-12-27T20:24:35Z"}, "committer": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-12-27T21:18:22Z"}, "message": "Improve debug logs of `find_width_of_character_at_span`", "tree": {"sha": "211c5c4c8e53be76437bb99041ff6d91e6b85a42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/211c5c4c8e53be76437bb99041ff6d91e6b85a42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1322e476bf5eecfad98f0b200f15c1b46a0d46d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1322e476bf5eecfad98f0b200f15c1b46a0d46d2", "html_url": "https://github.com/rust-lang/rust/commit/1322e476bf5eecfad98f0b200f15c1b46a0d46d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1322e476bf5eecfad98f0b200f15c1b46a0d46d2/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1fc71196a5554eafc5dd9a1b4e0c159717141e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1fc71196a5554eafc5dd9a1b4e0c159717141e0", "html_url": "https://github.com/rust-lang/rust/commit/a1fc71196a5554eafc5dd9a1b4e0c159717141e0"}], "stats": {"total": 29, "additions": 12, "deletions": 17}, "files": [{"sha": "fa09b4faa441f3b83d50809c92b426e708784b89", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 12, "deletions": 17, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1322e476bf5eecfad98f0b200f15c1b46a0d46d2/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1322e476bf5eecfad98f0b200f15c1b46a0d46d2/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=1322e476bf5eecfad98f0b200f15c1b46a0d46d2", "patch": "@@ -964,45 +964,40 @@ impl SourceMap {\n \n     /// Finds the width of the character, either before or after the end of provided span,\n     /// depending on the `forwards` parameter.\n+    #[instrument(skip(self, sp))]\n     fn find_width_of_character_at_span(&self, sp: Span, forwards: bool) -> u32 {\n         let sp = sp.data();\n \n         if sp.lo == sp.hi && !forwards {\n-            debug!(\"find_width_of_character_at_span: early return empty span\");\n+            debug!(\"early return empty span\");\n             return 1;\n         }\n \n         let local_begin = self.lookup_byte_offset(sp.lo);\n         let local_end = self.lookup_byte_offset(sp.hi);\n-        debug!(\n-            \"find_width_of_character_at_span: local_begin=`{:?}`, local_end=`{:?}`\",\n-            local_begin, local_end\n-        );\n+        debug!(\"local_begin=`{:?}`, local_end=`{:?}`\", local_begin, local_end);\n \n         if local_begin.sf.start_pos != local_end.sf.start_pos {\n-            debug!(\"find_width_of_character_at_span: begin and end are in different files\");\n+            debug!(\"begin and end are in different files\");\n             return 1;\n         }\n \n         let start_index = local_begin.pos.to_usize();\n         let end_index = local_end.pos.to_usize();\n-        debug!(\n-            \"find_width_of_character_at_span: start_index=`{:?}`, end_index=`{:?}`\",\n-            start_index, end_index\n-        );\n+        debug!(\"start_index=`{:?}`, end_index=`{:?}`\", start_index, end_index);\n \n         // Disregard indexes that are at the start or end of their spans, they can't fit bigger\n         // characters.\n         if (!forwards && end_index == usize::MIN) || (forwards && start_index == usize::MAX) {\n-            debug!(\"find_width_of_character_at_span: start or end of span, cannot be multibyte\");\n+            debug!(\"start or end of span, cannot be multibyte\");\n             return 1;\n         }\n \n         let source_len = (local_begin.sf.end_pos - local_begin.sf.start_pos).to_usize();\n-        debug!(\"find_width_of_character_at_span: source_len=`{:?}`\", source_len);\n+        debug!(\"source_len=`{:?}`\", source_len);\n         // Ensure indexes are also not malformed.\n         if start_index > end_index || end_index > source_len - 1 {\n-            debug!(\"find_width_of_character_at_span: source indexes are malformed\");\n+            debug!(\"source indexes are malformed\");\n             return 1;\n         }\n \n@@ -1017,10 +1012,10 @@ impl SourceMap {\n         } else {\n             return 1;\n         };\n-        debug!(\"find_width_of_character_at_span: snippet=`{:?}`\", snippet);\n+        debug!(\"snippet=`{:?}`\", snippet);\n \n         let mut target = if forwards { end_index + 1 } else { end_index - 1 };\n-        debug!(\"find_width_of_character_at_span: initial target=`{:?}`\", target);\n+        debug!(\"initial target=`{:?}`\", target);\n \n         while !snippet.is_char_boundary(target - start_index) && target < source_len {\n             target = if forwards {\n@@ -1033,9 +1028,9 @@ impl SourceMap {\n                     }\n                 }\n             };\n-            debug!(\"find_width_of_character_at_span: target=`{:?}`\", target);\n+            debug!(\"target=`{:?}`\", target);\n         }\n-        debug!(\"find_width_of_character_at_span: final target=`{:?}`\", target);\n+        debug!(\"final target=`{:?}`\", target);\n \n         if forwards { (target - end_index) as u32 } else { (end_index - target) as u32 }\n     }"}]}