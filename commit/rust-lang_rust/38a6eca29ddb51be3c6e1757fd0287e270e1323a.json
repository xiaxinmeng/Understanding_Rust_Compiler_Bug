{"sha": "38a6eca29ddb51be3c6e1757fd0287e270e1323a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4YTZlY2EyOWRkYjUxYmUzYzZlMTc1N2ZkMDI4N2UyNzBlMTMyM2E=", "commit": {"author": {"name": "Samuel Wilson", "email": "samuel.wilson@fluxfederation.com", "date": "2018-05-04T10:32:08Z"}, "committer": {"name": "Samuel Wilson", "email": "samuel.wilson@fluxfederation.com", "date": "2018-05-06T02:52:38Z"}, "message": "issue-49938: Reference tagged unions discr(iminant) as tag\n\nRefer https://github.com/rust-lang/rust/issues/49938\n\nPreviously tagged unions' tag was refered to as a discr(iminant).\nHere the changes use tag instead which is the correct terminology\nwhen refering to the memory representation of tagged unions.", "tree": {"sha": "d72cab81ad0690d207f8c19e9f81f9f11837b86b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d72cab81ad0690d207f8c19e9f81f9f11837b86b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38a6eca29ddb51be3c6e1757fd0287e270e1323a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38a6eca29ddb51be3c6e1757fd0287e270e1323a", "html_url": "https://github.com/rust-lang/rust/commit/38a6eca29ddb51be3c6e1757fd0287e270e1323a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38a6eca29ddb51be3c6e1757fd0287e270e1323a/comments", "author": null, "committer": null, "parents": [{"sha": "2c315475eaf22c1e1d1c3e8efc0f9d1c720eb886", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c315475eaf22c1e1d1c3e8efc0f9d1c720eb886", "html_url": "https://github.com/rust-lang/rust/commit/2c315475eaf22c1e1d1c3e8efc0f9d1c720eb886"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "02c4b73efa1465fc89f3c2a36260b720651b7d0b", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/38a6eca29ddb51be3c6e1757fd0287e270e1323a/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38a6eca29ddb51be3c6e1757fd0287e270e1323a/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=38a6eca29ddb51be3c6e1757fd0287e270e1323a", "patch": "@@ -1057,7 +1057,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n                 }\n                 tcx.intern_layout(LayoutDetails {\n                     variants: Variants::Tagged {\n-                        discr: tag,\n+                        tag,\n                         variants: layout_variants,\n                     },\n                     fields: FieldPlacement::Arbitrary {\n@@ -1218,7 +1218,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n                     })\n                     .collect();\n                 record(adt_kind.into(), adt_packed, match layout.variants {\n-                    Variants::Tagged { ref discr, .. } => Some(discr.value.size(self)),\n+                    Variants::Tagged { ref tag, .. } => Some(tag.value.size(self)),\n                     _ => None\n                 }, variant_infos);\n             }\n@@ -1622,7 +1622,7 @@ impl<'a, 'tcx, C> TyLayoutMethods<'tcx, C> for Ty<'tcx>\n                     }\n \n                     // Discriminant field for enums (where applicable).\n-                    Variants::Tagged { ref discr, .. } |\n+                    Variants::Tagged { tag: ref discr, .. } |\n                     Variants::NicheFilling { niche: ref discr, .. } => {\n                         assert_eq!(i, 0);\n                         let layout = LayoutDetails::scalar(tcx, discr.clone());\n@@ -1736,10 +1736,10 @@ impl<'a> HashStable<StableHashingContext<'a>> for Variants {\n                 index.hash_stable(hcx, hasher);\n             }\n             Tagged {\n-                ref discr,\n+                ref tag,\n                 ref variants,\n             } => {\n-                discr.hash_stable(hcx, hasher);\n+                tag.hash_stable(hcx, hasher);\n                 variants.hash_stable(hcx, hasher);\n             }\n             NicheFilling {"}, {"sha": "9e0dc4d80c8e2a3a9dfca2435d0b43a90a8888d8", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38a6eca29ddb51be3c6e1757fd0287e270e1323a/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38a6eca29ddb51be3c6e1757fd0287e270e1323a/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=38a6eca29ddb51be3c6e1757fd0287e270e1323a", "patch": "@@ -820,8 +820,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for VariantSizeDifferences {\n                     bug!(\"failed to get layout for `{}`: {}\", t, e)\n                 });\n \n-                if let layout::Variants::Tagged { ref variants, ref discr, .. } = layout.variants {\n-                    let discr_size = discr.value.size(cx.tcx).bytes();\n+                if let layout::Variants::Tagged { ref variants, ref tag, .. } = layout.variants {\n+                    let discr_size = tag.value.size(cx.tcx).bytes();\n \n                     debug!(\"enum `{}` is {} bytes large with layout:\\n{:#?}\",\n                       t, layout.size.bytes(), layout);"}, {"sha": "f5fd14036c4d0a8461344349d48dea5de148283d", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/38a6eca29ddb51be3c6e1757fd0287e270e1323a/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38a6eca29ddb51be3c6e1757fd0287e270e1323a/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=38a6eca29ddb51be3c6e1757fd0287e270e1323a", "patch": "@@ -960,20 +960,20 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n                                layout::Abi::Uninhabited);\n                 }\n             }\n-            layout::Variants::Tagged { ref discr, .. } => {\n+            layout::Variants::Tagged { ref tag, .. } => {\n                 let discr_val = dest_ty.ty_adt_def().unwrap()\n                     .discriminant_for_variant(*self.tcx, variant_index)\n                     .val;\n \n                 // raw discriminants for enums are isize or bigger during\n                 // their computation, but the in-memory tag is the smallest possible\n                 // representation\n-                let size = discr.value.size(self.tcx.tcx).bits();\n+                let size = tag.value.size(self.tcx.tcx).bits();\n                 let amt = 128 - size;\n                 let discr_val = (discr_val << amt) >> amt;\n \n-                let (discr_dest, discr) = self.place_field(dest, mir::Field::new(0), layout)?;\n-                self.write_primval(discr_dest, PrimVal::Bytes(discr_val), discr.ty)?;\n+                let (discr_dest, tag) = self.place_field(dest, mir::Field::new(0), layout)?;\n+                self.write_primval(discr_dest, PrimVal::Bytes(discr_val), tag.ty)?;\n             }\n             layout::Variants::NicheFilling {\n                 dataful_variant,"}, {"sha": "7ae4d990c8a4ec469a2ce3da7463343b1ec21119", "filename": "src/librustc_target/abi/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38a6eca29ddb51be3c6e1757fd0287e270e1323a/src%2Flibrustc_target%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38a6eca29ddb51be3c6e1757fd0287e270e1323a/src%2Flibrustc_target%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fmod.rs?ref=38a6eca29ddb51be3c6e1757fd0287e270e1323a", "patch": "@@ -716,10 +716,10 @@ pub enum Variants {\n     },\n \n     /// General-case enums: for each case there is a struct, and they all have\n-    /// all space reserved for the discriminant, and their first field starts\n-    /// at a non-0 offset, after where the discriminant would go.\n+    /// all space reserved for the tag, and their first field starts\n+    /// at a non-0 offset, after where the tag would go.\n     Tagged {\n-        discr: Scalar,\n+        tag: Scalar,\n         variants: Vec<LayoutDetails>,\n     },\n "}, {"sha": "f16fef5ec1e843b269e7f19801cf50e7c2c07975", "filename": "src/librustc_trans/debuginfo/metadata.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38a6eca29ddb51be3c6e1757fd0287e270e1323a/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38a6eca29ddb51be3c6e1757fd0287e270e1323a/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs?ref=38a6eca29ddb51be3c6e1757fd0287e270e1323a", "patch": "@@ -1429,8 +1429,8 @@ fn prepare_enum_metadata<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n     let discriminant_type_metadata = match layout.variants {\n         layout::Variants::Single { .. } |\n         layout::Variants::NicheFilling { .. } => None,\n-        layout::Variants::Tagged { ref discr, .. } => {\n-            Some(discriminant_type_metadata(discr.value))\n+        layout::Variants::Tagged { ref tag, .. } => {\n+            Some(discriminant_type_metadata(tag.value))\n         }\n     };\n "}, {"sha": "d4abd5fa88d31bc496ca14830d22cb4e065ee4a8", "filename": "src/librustc_trans/mir/place.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38a6eca29ddb51be3c6e1757fd0287e270e1323a/src%2Flibrustc_trans%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38a6eca29ddb51be3c6e1757fd0287e270e1323a/src%2Flibrustc_trans%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fplace.rs?ref=38a6eca29ddb51be3c6e1757fd0287e270e1323a", "patch": "@@ -273,8 +273,8 @@ impl<'a, 'tcx> PlaceRef<'tcx> {\n         let lldiscr = discr.load(bx).immediate();\n         match self.layout.variants {\n             layout::Variants::Single { .. } => bug!(),\n-            layout::Variants::Tagged { ref discr, .. } => {\n-                let signed = match discr.value {\n+            layout::Variants::Tagged { ref tag, .. } => {\n+                let signed = match tag.value {\n                     layout::Int(_, signed) => signed,\n                     _ => false\n                 };"}]}