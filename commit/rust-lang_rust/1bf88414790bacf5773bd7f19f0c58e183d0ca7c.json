{"sha": "1bf88414790bacf5773bd7f19f0c58e183d0ca7c", "node_id": "C_kwDOAAsO6NoAKDFiZjg4NDE0NzkwYmFjZjU3NzNiZDdmMTlmMGM1OGUxODNkMGNhN2M", "commit": {"author": {"name": "Guilherme-Vasconcelos", "email": "49197151+Guilherme-Vasconcelos@users.noreply.github.com", "date": "2022-08-05T23:59:50Z"}, "committer": {"name": "Guilherme-Vasconcelos", "email": "49197151+Guilherme-Vasconcelos@users.noreply.github.com", "date": "2022-08-14T15:53:15Z"}, "message": "Update all tests to comply with clippy::manual_empty_string_creations", "tree": {"sha": "9a6d5dd72c9d5b3f00ef21a969bff583d0b8a887", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a6d5dd72c9d5b3f00ef21a969bff583d0b8a887"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1bf88414790bacf5773bd7f19f0c58e183d0ca7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1bf88414790bacf5773bd7f19f0c58e183d0ca7c", "html_url": "https://github.com/rust-lang/rust/commit/1bf88414790bacf5773bd7f19f0c58e183d0ca7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1bf88414790bacf5773bd7f19f0c58e183d0ca7c/comments", "author": {"login": "Guilherme-Vasconcelos", "id": 49197151, "node_id": "MDQ6VXNlcjQ5MTk3MTUx", "avatar_url": "https://avatars.githubusercontent.com/u/49197151?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Guilherme-Vasconcelos", "html_url": "https://github.com/Guilherme-Vasconcelos", "followers_url": "https://api.github.com/users/Guilherme-Vasconcelos/followers", "following_url": "https://api.github.com/users/Guilherme-Vasconcelos/following{/other_user}", "gists_url": "https://api.github.com/users/Guilherme-Vasconcelos/gists{/gist_id}", "starred_url": "https://api.github.com/users/Guilherme-Vasconcelos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Guilherme-Vasconcelos/subscriptions", "organizations_url": "https://api.github.com/users/Guilherme-Vasconcelos/orgs", "repos_url": "https://api.github.com/users/Guilherme-Vasconcelos/repos", "events_url": "https://api.github.com/users/Guilherme-Vasconcelos/events{/privacy}", "received_events_url": "https://api.github.com/users/Guilherme-Vasconcelos/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Guilherme-Vasconcelos", "id": 49197151, "node_id": "MDQ6VXNlcjQ5MTk3MTUx", "avatar_url": "https://avatars.githubusercontent.com/u/49197151?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Guilherme-Vasconcelos", "html_url": "https://github.com/Guilherme-Vasconcelos", "followers_url": "https://api.github.com/users/Guilherme-Vasconcelos/followers", "following_url": "https://api.github.com/users/Guilherme-Vasconcelos/following{/other_user}", "gists_url": "https://api.github.com/users/Guilherme-Vasconcelos/gists{/gist_id}", "starred_url": "https://api.github.com/users/Guilherme-Vasconcelos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Guilherme-Vasconcelos/subscriptions", "organizations_url": "https://api.github.com/users/Guilherme-Vasconcelos/orgs", "repos_url": "https://api.github.com/users/Guilherme-Vasconcelos/repos", "events_url": "https://api.github.com/users/Guilherme-Vasconcelos/events{/privacy}", "received_events_url": "https://api.github.com/users/Guilherme-Vasconcelos/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80826c3944df4233fd532ee8cf465851dfe1b0fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/80826c3944df4233fd532ee8cf465851dfe1b0fc", "html_url": "https://github.com/rust-lang/rust/commit/80826c3944df4233fd532ee8cf465851dfe1b0fc"}], "stats": {"total": 78, "additions": 40, "deletions": 38}, "files": [{"sha": "be05e67d724dfc120acfec0d1385dda0cd3df741", "filename": "clippy_dev/src/new_lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bf88414790bacf5773bd7f19f0c58e183d0ca7c/clippy_dev%2Fsrc%2Fnew_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bf88414790bacf5773bd7f19f0c58e183d0ca7c/clippy_dev%2Fsrc%2Fnew_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fnew_lint.rs?ref=1bf88414790bacf5773bd7f19f0c58e183d0ca7c", "patch": "@@ -155,7 +155,7 @@ fn to_camel_case(name: &str) -> String {\n     name.split('_')\n         .map(|s| {\n             if s.is_empty() {\n-                String::from(\"\")\n+                String::new()\n             } else {\n                 [&s[0..1].to_uppercase(), &s[1..]].concat()\n             }"}, {"sha": "2502c8f880ddce76aa1045cfcdc815aaa315209d", "filename": "clippy_lints/src/manual_async_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bf88414790bacf5773bd7f19f0c58e183d0ca7c/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bf88414790bacf5773bd7f19f0c58e183d0ca7c/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_async_fn.rs?ref=1bf88414790bacf5773bd7f19f0c58e183d0ca7c", "patch": "@@ -192,7 +192,7 @@ fn suggested_ret(cx: &LateContext<'_>, output: &Ty<'_>) -> Option<(&'static str,\n     match output.kind {\n         TyKind::Tup(tys) if tys.is_empty() => {\n             let sugg = \"remove the return type\";\n-            Some((sugg, \"\".into()))\n+            Some((sugg, String::new()))\n         },\n         _ => {\n             let sugg = \"return the output of the future directly\";"}, {"sha": "3c4002a3aef99b86fc175c86b343c9530cfac29e", "filename": "clippy_lints/src/methods/option_map_unwrap_or.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bf88414790bacf5773bd7f19f0c58e183d0ca7c/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bf88414790bacf5773bd7f19f0c58e183d0ca7c/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs?ref=1bf88414790bacf5773bd7f19f0c58e183d0ca7c", "patch": "@@ -78,7 +78,7 @@ pub(super) fn check<'tcx>(\n                     map_span,\n                     String::from(if unwrap_snippet_none { \"and_then\" } else { \"map_or\" }),\n                 ),\n-                (expr.span.with_lo(unwrap_recv.span.hi()), String::from(\"\")),\n+                (expr.span.with_lo(unwrap_recv.span.hi()), String::new()),\n             ];\n \n             if !unwrap_snippet_none {"}, {"sha": "7c4ae746e90e91894f9c604dadc53254cb48fb52", "filename": "clippy_lints/src/misc_early/unneeded_wildcard_pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bf88414790bacf5773bd7f19f0c58e183d0ca7c/clippy_lints%2Fsrc%2Fmisc_early%2Funneeded_wildcard_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bf88414790bacf5773bd7f19f0c58e183d0ca7c/clippy_lints%2Fsrc%2Fmisc_early%2Funneeded_wildcard_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early%2Funneeded_wildcard_pattern.rs?ref=1bf88414790bacf5773bd7f19f0c58e183d0ca7c", "patch": "@@ -46,7 +46,7 @@ fn span_lint(cx: &EarlyContext<'_>, span: Span, only_one: bool) {\n             \"these patterns are unneeded as the `..` pattern can match those elements\"\n         },\n         if only_one { \"remove it\" } else { \"remove them\" },\n-        \"\".to_string(),\n+        String::new(),\n         Applicability::MachineApplicable,\n     );\n }"}, {"sha": "a5afbb8ff9da49272efd9887b20732ed221c0049", "filename": "clippy_lints/src/unnecessary_wraps.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bf88414790bacf5773bd7f19f0c58e183d0ca7c/clippy_lints%2Fsrc%2Funnecessary_wraps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bf88414790bacf5773bd7f19f0c58e183d0ca7c/clippy_lints%2Fsrc%2Funnecessary_wraps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_wraps.rs?ref=1bf88414790bacf5773bd7f19f0c58e183d0ca7c", "patch": "@@ -130,7 +130,7 @@ impl<'tcx> LateLintPass<'tcx> for UnnecessaryWraps {\n                         (\n                             ret_expr.span,\n                             if inner_type.is_unit() {\n-                                \"\".to_string()\n+                                String::new()\n                             } else {\n                                 snippet(cx, arg.span.source_callsite(), \"..\").to_string()\n                             }"}, {"sha": "6f0485b5279b1112c173c8a5d07cfcbb872bd0d3", "filename": "tests/ui/case_sensitive_file_extension_comparisons.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1bf88414790bacf5773bd7f19f0c58e183d0ca7c/tests%2Fui%2Fcase_sensitive_file_extension_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bf88414790bacf5773bd7f19f0c58e183d0ca7c/tests%2Fui%2Fcase_sensitive_file_extension_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcase_sensitive_file_extension_comparisons.rs?ref=1bf88414790bacf5773bd7f19f0c58e183d0ca7c", "patch": "@@ -14,31 +14,31 @@ fn is_rust_file(filename: &str) -> bool {\n \n fn main() {\n     // std::string::String and &str should trigger the lint failure with .ext12\n-    let _ = String::from(\"\").ends_with(\".ext12\");\n+    let _ = String::new().ends_with(\".ext12\");\n     let _ = \"str\".ends_with(\".ext12\");\n \n     // The test struct should not trigger the lint failure with .ext12\n     TestStruct {}.ends_with(\".ext12\");\n \n     // std::string::String and &str should trigger the lint failure with .EXT12\n-    let _ = String::from(\"\").ends_with(\".EXT12\");\n+    let _ = String::new().ends_with(\".EXT12\");\n     let _ = \"str\".ends_with(\".EXT12\");\n \n     // The test struct should not trigger the lint failure with .EXT12\n     TestStruct {}.ends_with(\".EXT12\");\n \n     // Should not trigger the lint failure with .eXT12\n-    let _ = String::from(\"\").ends_with(\".eXT12\");\n+    let _ = String::new().ends_with(\".eXT12\");\n     let _ = \"str\".ends_with(\".eXT12\");\n     TestStruct {}.ends_with(\".eXT12\");\n \n     // Should not trigger the lint failure with .EXT123 (too long)\n-    let _ = String::from(\"\").ends_with(\".EXT123\");\n+    let _ = String::new().ends_with(\".EXT123\");\n     let _ = \"str\".ends_with(\".EXT123\");\n     TestStruct {}.ends_with(\".EXT123\");\n \n     // Shouldn't fail if it doesn't start with a dot\n-    let _ = String::from(\"\").ends_with(\"a.ext\");\n+    let _ = String::new().ends_with(\"a.ext\");\n     let _ = \"str\".ends_with(\"a.extA\");\n     TestStruct {}.ends_with(\"a.ext\");\n }"}, {"sha": "5d9a043edb9a5357dbce51e67c236a5f838901a2", "filename": "tests/ui/case_sensitive_file_extension_comparisons.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1bf88414790bacf5773bd7f19f0c58e183d0ca7c/tests%2Fui%2Fcase_sensitive_file_extension_comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1bf88414790bacf5773bd7f19f0c58e183d0ca7c/tests%2Fui%2Fcase_sensitive_file_extension_comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcase_sensitive_file_extension_comparisons.stderr?ref=1bf88414790bacf5773bd7f19f0c58e183d0ca7c", "patch": "@@ -8,10 +8,10 @@ LL |     filename.ends_with(\".rs\")\n    = help: consider using a case-insensitive comparison instead\n \n error: case-sensitive file extension comparison\n-  --> $DIR/case_sensitive_file_extension_comparisons.rs:17:30\n+  --> $DIR/case_sensitive_file_extension_comparisons.rs:17:27\n    |\n-LL |     let _ = String::from(\"\").ends_with(\".ext12\");\n-   |                              ^^^^^^^^^^^^^^^^^^^\n+LL |     let _ = String::new().ends_with(\".ext12\");\n+   |                           ^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a case-insensitive comparison instead\n \n@@ -24,10 +24,10 @@ LL |     let _ = \"str\".ends_with(\".ext12\");\n    = help: consider using a case-insensitive comparison instead\n \n error: case-sensitive file extension comparison\n-  --> $DIR/case_sensitive_file_extension_comparisons.rs:24:30\n+  --> $DIR/case_sensitive_file_extension_comparisons.rs:24:27\n    |\n-LL |     let _ = String::from(\"\").ends_with(\".EXT12\");\n-   |                              ^^^^^^^^^^^^^^^^^^^\n+LL |     let _ = String::new().ends_with(\".EXT12\");\n+   |                           ^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a case-insensitive comparison instead\n "}, {"sha": "b56d6aec508d38bda3189d67fd5610f971166d4e", "filename": "tests/ui/format.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bf88414790bacf5773bd7f19f0c58e183d0ca7c/tests%2Fui%2Fformat.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1bf88414790bacf5773bd7f19f0c58e183d0ca7c/tests%2Fui%2Fformat.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat.fixed?ref=1bf88414790bacf5773bd7f19f0c58e183d0ca7c", "patch": "@@ -33,7 +33,7 @@ fn main() {\n     format!(\"foo {}\", \"bar\");\n     format!(\"{} bar\", \"foo\");\n \n-    let arg: String = \"\".to_owned();\n+    let arg = String::new();\n     arg.to_string();\n     format!(\"{:?}\", arg); // Don't warn about debug.\n     format!(\"{:8}\", arg);"}, {"sha": "4c1a3a840ed96721f5cd87d7496c3e1edec99f94", "filename": "tests/ui/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bf88414790bacf5773bd7f19f0c58e183d0ca7c/tests%2Fui%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bf88414790bacf5773bd7f19f0c58e183d0ca7c/tests%2Fui%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat.rs?ref=1bf88414790bacf5773bd7f19f0c58e183d0ca7c", "patch": "@@ -35,7 +35,7 @@ fn main() {\n     format!(\"foo {}\", \"bar\");\n     format!(\"{} bar\", \"foo\");\n \n-    let arg: String = \"\".to_owned();\n+    let arg = String::new();\n     format!(\"{}\", arg);\n     format!(\"{:?}\", arg); // Don't warn about debug.\n     format!(\"{:8}\", arg);"}, {"sha": "fa564e23cd275cb270a64ae9510504e91c81657d", "filename": "tests/ui/identity_op.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bf88414790bacf5773bd7f19f0c58e183d0ca7c/tests%2Fui%2Fidentity_op.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1bf88414790bacf5773bd7f19f0c58e183d0ca7c/tests%2Fui%2Fidentity_op.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fidentity_op.fixed?ref=1bf88414790bacf5773bd7f19f0c58e183d0ca7c", "patch": "@@ -68,7 +68,7 @@ fn main() {\n     &x;\n     x;\n \n-    let mut a = A(\"\".into());\n+    let mut a = A(String::new());\n     let b = a << 0; // no error: non-integer\n \n     1 * Meter; // no error: non-integer"}, {"sha": "3d06d2a73b628d7b760d3a8c3684c8d15c4ebde7", "filename": "tests/ui/identity_op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bf88414790bacf5773bd7f19f0c58e183d0ca7c/tests%2Fui%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bf88414790bacf5773bd7f19f0c58e183d0ca7c/tests%2Fui%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fidentity_op.rs?ref=1bf88414790bacf5773bd7f19f0c58e183d0ca7c", "patch": "@@ -68,7 +68,7 @@ fn main() {\n     &x >> 0;\n     x >> &0;\n \n-    let mut a = A(\"\".into());\n+    let mut a = A(String::new());\n     let b = a << 0; // no error: non-integer\n \n     1 * Meter; // no error: non-integer"}, {"sha": "caf0c657c81a5ce20cca6ced2a08781b8146ea8f", "filename": "tests/ui/manual_empty_string_creations.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bf88414790bacf5773bd7f19f0c58e183d0ca7c/tests%2Fui%2Fmanual_empty_string_creations.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1bf88414790bacf5773bd7f19f0c58e183d0ca7c/tests%2Fui%2Fmanual_empty_string_creations.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_empty_string_creations.fixed?ref=1bf88414790bacf5773bd7f19f0c58e183d0ca7c", "patch": "@@ -7,7 +7,7 @@ macro_rules! create_strings_from_macro {\n     ($some_str:expr) => {\n         let _: String = $some_str.into();\n         let _ = $some_str.to_string();\n-    }\n+    };\n }\n \n fn main() {"}, {"sha": "18ea4e550292a4b3ddd5a729f4ba946afe2f4d13", "filename": "tests/ui/or_fun_call.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1bf88414790bacf5773bd7f19f0c58e183d0ca7c/tests%2Fui%2For_fun_call.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1bf88414790bacf5773bd7f19f0c58e183d0ca7c/tests%2Fui%2For_fun_call.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.fixed?ref=1bf88414790bacf5773bd7f19f0c58e183d0ca7c", "patch": "@@ -90,8 +90,8 @@ fn or_fun_call() {\n     let mut btree_vec = BTreeMap::<u64, Vec<i32>>::new();\n     btree_vec.entry(42).or_insert(vec![]);\n \n-    let stringy = Some(String::from(\"\"));\n-    let _ = stringy.unwrap_or_else(|| \"\".to_owned());\n+    let stringy = Some(String::new());\n+    let _ = stringy.unwrap_or_default();\n \n     let opt = Some(1);\n     let hello = \"Hello\";"}, {"sha": "c353b41e4495d96feee4525b5f1d20634d8bc694", "filename": "tests/ui/or_fun_call.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1bf88414790bacf5773bd7f19f0c58e183d0ca7c/tests%2Fui%2For_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bf88414790bacf5773bd7f19f0c58e183d0ca7c/tests%2Fui%2For_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.rs?ref=1bf88414790bacf5773bd7f19f0c58e183d0ca7c", "patch": "@@ -90,8 +90,8 @@ fn or_fun_call() {\n     let mut btree_vec = BTreeMap::<u64, Vec<i32>>::new();\n     btree_vec.entry(42).or_insert(vec![]);\n \n-    let stringy = Some(String::from(\"\"));\n-    let _ = stringy.unwrap_or(\"\".to_owned());\n+    let stringy = Some(String::new());\n+    let _ = stringy.unwrap_or(String::new());\n \n     let opt = Some(1);\n     let hello = \"Hello\";"}, {"sha": "887f23ac9761dfd7167f44f269d3224cb6d75e75", "filename": "tests/ui/or_fun_call.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1bf88414790bacf5773bd7f19f0c58e183d0ca7c/tests%2Fui%2For_fun_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1bf88414790bacf5773bd7f19f0c58e183d0ca7c/tests%2Fui%2For_fun_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.stderr?ref=1bf88414790bacf5773bd7f19f0c58e183d0ca7c", "patch": "@@ -66,11 +66,11 @@ error: use of `unwrap_or` followed by a function call\n LL |     without_default.unwrap_or(Foo::new());\n    |                     ^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(Foo::new)`\n \n-error: use of `unwrap_or` followed by a function call\n+error: use of `unwrap_or` followed by a call to `new`\n   --> $DIR/or_fun_call.rs:94:21\n    |\n-LL |     let _ = stringy.unwrap_or(\"\".to_owned());\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| \"\".to_owned())`\n+LL |     let _ = stringy.unwrap_or(String::new());\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a function call\n   --> $DIR/or_fun_call.rs:102:21"}, {"sha": "16673c01e63017da5769a39ea8085cf9f348dc76", "filename": "tests/ui/string_add.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1bf88414790bacf5773bd7f19f0c58e183d0ca7c/tests%2Fui%2Fstring_add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bf88414790bacf5773bd7f19f0c58e183d0ca7c/tests%2Fui%2Fstring_add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_add.rs?ref=1bf88414790bacf5773bd7f19f0c58e183d0ca7c", "patch": "@@ -7,13 +7,13 @@ extern crate macro_rules;\n #[allow(clippy::string_add_assign, unused)]\n fn main() {\n     // ignores assignment distinction\n-    let mut x = \"\".to_owned();\n+    let mut x = String::new();\n \n     for _ in 1..3 {\n         x = x + \".\";\n     }\n \n-    let y = \"\".to_owned();\n+    let y = String::new();\n     let z = y + \"...\";\n \n     assert_eq!(&x, &z);"}, {"sha": "b687f43b2541a016af4cb3abe8a07ce865b5de2c", "filename": "tests/ui/string_add_assign.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1bf88414790bacf5773bd7f19f0c58e183d0ca7c/tests%2Fui%2Fstring_add_assign.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1bf88414790bacf5773bd7f19f0c58e183d0ca7c/tests%2Fui%2Fstring_add_assign.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_add_assign.fixed?ref=1bf88414790bacf5773bd7f19f0c58e183d0ca7c", "patch": "@@ -4,13 +4,13 @@\n #[warn(clippy::string_add_assign)]\n fn main() {\n     // ignores assignment distinction\n-    let mut x = \"\".to_owned();\n+    let mut x = String::new();\n \n     for _ in 1..3 {\n         x += \".\";\n     }\n \n-    let y = \"\".to_owned();\n+    let y = String::new();\n     let z = y + \"...\";\n \n     assert_eq!(&x, &z);"}, {"sha": "e5dbde108fbdbebd46df2e51583b9f18f34603c8", "filename": "tests/ui/string_add_assign.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1bf88414790bacf5773bd7f19f0c58e183d0ca7c/tests%2Fui%2Fstring_add_assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bf88414790bacf5773bd7f19f0c58e183d0ca7c/tests%2Fui%2Fstring_add_assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_add_assign.rs?ref=1bf88414790bacf5773bd7f19f0c58e183d0ca7c", "patch": "@@ -4,13 +4,13 @@\n #[warn(clippy::string_add_assign)]\n fn main() {\n     // ignores assignment distinction\n-    let mut x = \"\".to_owned();\n+    let mut x = String::new();\n \n     for _ in 1..3 {\n         x = x + \".\";\n     }\n \n-    let y = \"\".to_owned();\n+    let y = String::new();\n     let z = y + \"...\";\n \n     assert_eq!(&x, &z);"}, {"sha": "c390618ca98b85602ced84b91791ac75f1c37c67", "filename": "tests/ui/unnecessary_owned_empty_strings.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1bf88414790bacf5773bd7f19f0c58e183d0ca7c/tests%2Fui%2Funnecessary_owned_empty_strings.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1bf88414790bacf5773bd7f19f0c58e183d0ca7c/tests%2Fui%2Funnecessary_owned_empty_strings.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_owned_empty_strings.fixed?ref=1bf88414790bacf5773bd7f19f0c58e183d0ca7c", "patch": "@@ -12,6 +12,7 @@ fn main() {\n     ref_str_argument(\"\");\n \n     // should be linted\n+    #[allow(clippy::manual_empty_string_creations)]\n     ref_str_argument(\"\");\n \n     // should not be linted"}, {"sha": "4a9d6125eb1226310678455cfd9625b26a220eb6", "filename": "tests/ui/unnecessary_owned_empty_strings.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1bf88414790bacf5773bd7f19f0c58e183d0ca7c/tests%2Fui%2Funnecessary_owned_empty_strings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bf88414790bacf5773bd7f19f0c58e183d0ca7c/tests%2Fui%2Funnecessary_owned_empty_strings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_owned_empty_strings.rs?ref=1bf88414790bacf5773bd7f19f0c58e183d0ca7c", "patch": "@@ -12,6 +12,7 @@ fn main() {\n     ref_str_argument(&String::new());\n \n     // should be linted\n+    #[allow(clippy::manual_empty_string_creations)]\n     ref_str_argument(&String::from(\"\"));\n \n     // should not be linted"}, {"sha": "1eb198a8675ea1b2f172667f6f8807d2f624d0fa", "filename": "tests/ui/unnecessary_owned_empty_strings.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bf88414790bacf5773bd7f19f0c58e183d0ca7c/tests%2Fui%2Funnecessary_owned_empty_strings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1bf88414790bacf5773bd7f19f0c58e183d0ca7c/tests%2Fui%2Funnecessary_owned_empty_strings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_owned_empty_strings.stderr?ref=1bf88414790bacf5773bd7f19f0c58e183d0ca7c", "patch": "@@ -7,7 +7,7 @@ LL |     ref_str_argument(&String::new());\n    = note: `-D clippy::unnecessary-owned-empty-strings` implied by `-D warnings`\n \n error: usage of `&String::from(\"\")` for a function expecting a `&str` argument\n-  --> $DIR/unnecessary_owned_empty_strings.rs:15:22\n+  --> $DIR/unnecessary_owned_empty_strings.rs:16:22\n    |\n LL |     ref_str_argument(&String::from(\"\"));\n    |                      ^^^^^^^^^^^^^^^^^ help: try: `\"\"`"}, {"sha": "4acf5b5fa2d1ba8ab717631f61210aa301ff90c5", "filename": "tests/ui/useless_conversion_try.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1bf88414790bacf5773bd7f19f0c58e183d0ca7c/tests%2Fui%2Fuseless_conversion_try.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bf88414790bacf5773bd7f19f0c58e183d0ca7c/tests%2Fui%2Fuseless_conversion_try.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_conversion_try.rs?ref=1bf88414790bacf5773bd7f19f0c58e183d0ca7c", "patch": "@@ -29,10 +29,10 @@ fn main() {\n     let _ = String::try_from(\"foo\".to_string()).unwrap();\n     let _ = String::try_from(format!(\"A: {:04}\", 123)).unwrap();\n     let _: String = format!(\"Hello {}\", \"world\").try_into().unwrap();\n-    let _: String = \"\".to_owned().try_into().unwrap();\n+    let _: String = String::new().try_into().unwrap();\n     let _: String = match String::from(\"_\").try_into() {\n         Ok(a) => a,\n-        Err(_) => \"\".into(),\n+        Err(_) => String::new(),\n     };\n     // FIXME this is a false negative\n     #[allow(clippy::cmp_owned)]"}, {"sha": "12e74d614717db6ee5c6d8068f894958d53e7dad", "filename": "tests/ui/useless_conversion_try.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bf88414790bacf5773bd7f19f0c58e183d0ca7c/tests%2Fui%2Fuseless_conversion_try.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1bf88414790bacf5773bd7f19f0c58e183d0ca7c/tests%2Fui%2Fuseless_conversion_try.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_conversion_try.stderr?ref=1bf88414790bacf5773bd7f19f0c58e183d0ca7c", "patch": "@@ -62,7 +62,7 @@ LL |     let _: String = format!(\"Hello {}\", \"world\").try_into().unwrap();\n error: useless conversion to the same type: `std::string::String`\n   --> $DIR/useless_conversion_try.rs:32:21\n    |\n-LL |     let _: String = \"\".to_owned().try_into().unwrap();\n+LL |     let _: String = String::new().try_into().unwrap();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider removing `.try_into()`"}]}