{"sha": "9f402b370c43f8cbad15d477d29aa96ff9746de5", "node_id": "C_kwDOAAsO6NoAKDlmNDAyYjM3MGM0M2Y4Y2JhZDE1ZDQ3N2QyOWFhOTZmZjk3NDZkZTU", "commit": {"author": {"name": "Nathaniel Hamovitz", "email": "18648574+nhamovitz@users.noreply.github.com", "date": "2021-10-18T10:03:48Z"}, "committer": {"name": "Nathaniel Hamovitz", "email": "18648574+nhamovitz@users.noreply.github.com", "date": "2021-10-18T10:05:19Z"}, "message": "Check for tuple structs", "tree": {"sha": "17a8ccd61af70d1d022a1cfa6fdb7653d0b9dce8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17a8ccd61af70d1d022a1cfa6fdb7653d0b9dce8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f402b370c43f8cbad15d477d29aa96ff9746de5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f402b370c43f8cbad15d477d29aa96ff9746de5", "html_url": "https://github.com/rust-lang/rust/commit/9f402b370c43f8cbad15d477d29aa96ff9746de5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f402b370c43f8cbad15d477d29aa96ff9746de5/comments", "author": {"login": "nhamovitz", "id": 18648574, "node_id": "MDQ6VXNlcjE4NjQ4NTc0", "avatar_url": "https://avatars.githubusercontent.com/u/18648574?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nhamovitz", "html_url": "https://github.com/nhamovitz", "followers_url": "https://api.github.com/users/nhamovitz/followers", "following_url": "https://api.github.com/users/nhamovitz/following{/other_user}", "gists_url": "https://api.github.com/users/nhamovitz/gists{/gist_id}", "starred_url": "https://api.github.com/users/nhamovitz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nhamovitz/subscriptions", "organizations_url": "https://api.github.com/users/nhamovitz/orgs", "repos_url": "https://api.github.com/users/nhamovitz/repos", "events_url": "https://api.github.com/users/nhamovitz/events{/privacy}", "received_events_url": "https://api.github.com/users/nhamovitz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nhamovitz", "id": 18648574, "node_id": "MDQ6VXNlcjE4NjQ4NTc0", "avatar_url": "https://avatars.githubusercontent.com/u/18648574?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nhamovitz", "html_url": "https://github.com/nhamovitz", "followers_url": "https://api.github.com/users/nhamovitz/followers", "following_url": "https://api.github.com/users/nhamovitz/following{/other_user}", "gists_url": "https://api.github.com/users/nhamovitz/gists{/gist_id}", "starred_url": "https://api.github.com/users/nhamovitz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nhamovitz/subscriptions", "organizations_url": "https://api.github.com/users/nhamovitz/orgs", "repos_url": "https://api.github.com/users/nhamovitz/repos", "events_url": "https://api.github.com/users/nhamovitz/events{/privacy}", "received_events_url": "https://api.github.com/users/nhamovitz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a5a4f07cf34895cf6d3c6f8843169e3d6d9c46d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a5a4f07cf34895cf6d3c6f8843169e3d6d9c46d", "html_url": "https://github.com/rust-lang/rust/commit/2a5a4f07cf34895cf6d3c6f8843169e3d6d9c46d"}], "stats": {"total": 27, "additions": 10, "deletions": 17}, "files": [{"sha": "9373551db15998ff811e1c772d7b0f6539ac711f", "filename": "clippy_lints/src/trailing_zero_sized_array_without_repr_c.rs", "status": "modified", "additions": 10, "deletions": 17, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9f402b370c43f8cbad15d477d29aa96ff9746de5/clippy_lints%2Fsrc%2Ftrailing_zero_sized_array_without_repr_c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f402b370c43f8cbad15d477d29aa96ff9746de5/clippy_lints%2Fsrc%2Ftrailing_zero_sized_array_without_repr_c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrailing_zero_sized_array_without_repr_c.rs?ref=9f402b370c43f8cbad15d477d29aa96ff9746de5", "patch": "@@ -38,7 +38,6 @@ declare_lint_pass!(TrailingZeroSizedArrayWithoutReprC => [TRAILING_ZERO_SIZED_AR\n \n impl<'tcx> LateLintPass<'tcx> for TrailingZeroSizedArrayWithoutReprC {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'tcx>) {\n-        dbg!(item.ident);\n         if is_struct_with_trailing_zero_sized_array(cx, item) {\n             // NOTE: This is to include attributes on the definition when we print the lint. If the convention\n             // is to not do that with struct definitions (I'm not sure), then this isn't necessary. (note: if\n@@ -66,24 +65,18 @@ impl<'tcx> LateLintPass<'tcx> for TrailingZeroSizedArrayWithoutReprC {\n }\n \n fn is_struct_with_trailing_zero_sized_array(cx: &LateContext<'tcx>, item: &'tcx Item<'tcx>) -> bool {\n+    // TODO: when finalized, replace with an `if_chain`. I have it like this because my rust-analyzer doesn't work when it's an `if_chain`\n     // First check if last field is an array\n     if let ItemKind::Struct(data, _) = &item.kind {\n-        if let VariantData::Struct(field_defs, _) = data {\n-            if let Some(last_field) = field_defs.last() {\n-                if let rustc_hir::TyKind::Array(_, length) = last_field.ty.kind {\n-                    // Then check if that that array zero-sized\n-                    let length_ldid = cx.tcx.hir().local_def_id(length.hir_id);\n-                    let length = Const::from_anon_const(cx.tcx, length_ldid);\n-                    let length = length.try_eval_usize(cx.tcx, cx.param_env);\n-                    // if let Some((Constant::Int(length), _)) = length {\n-                    if let Some(length) = length {\n-                        length == 0\n-                    } else {\n-                        false\n-                    }\n-                } else {\n-                    false\n-                }\n+        let field_defs = data.fields();\n+        if let Some(last_field) = field_defs.last() {\n+            if let rustc_hir::TyKind::Array(_, length) = last_field.ty.kind {\n+                // Then check if that that array zero-sized\n+                let length_ldid = cx.tcx.hir().local_def_id(length.hir_id);\n+                let length = Const::from_anon_const(cx.tcx, length_ldid);\n+                let length = length.try_eval_usize(cx.tcx, cx.param_env);\n+                // if let Some((Constant::Int(length), _)) = length {\n+                if let Some(length) = length { length == 0 } else { false }\n             } else {\n                 false\n             }"}]}