{"sha": "ef0b12189ee7c0ef8d9ab976a6078f585411c37e", "node_id": "C_kwDOAAsO6NoAKGVmMGIxMjE4OWVlN2MwZWY4ZDlhYjk3NmE2MDc4ZjU4NTQxMWMzN2U", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-02-16T06:10:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-16T06:10:21Z"}, "message": "Rollup merge of #108101 - matthiaskrgr:noclonecopy, r=compiler-errors\n\ndon't clone types that are copy", "tree": {"sha": "cab7c598ee7240b541047c382424a3ebb8ce315b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cab7c598ee7240b541047c382424a3ebb8ce315b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef0b12189ee7c0ef8d9ab976a6078f585411c37e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj7cjNCRBK7hj4Ov3rIwAA2JwIAKlIefIu2ZcwkiXr+q1N8lsg\nFgGoRfG8B5yLnb5VM12sRcKExzJSy9+jtxoy5g5KBqoM67myamOWcJBVIcAq4SXN\nOF9eMH3kzbLEJpKBeygNfMCiyDP+rFLMxvRpbkc5GIa/jI76ONAedFh8QGoa0v/Q\n9G/QcsiqFzqitemOodoZy09LHKCPN8B+3P4RUlDy906lcwMBXpQiyTcPvlPwNsOf\n9vlVZlYLz0clZrBMd3TiVrMnwTblF6Qc6UFJG460noRZDke9hm2GcBb6J6ZpASY4\nIEcf2Vai5NIaSit5cdAPnDFZAHoNClYEwKlRMPFjBUA3RfNnOl/KSYW8MYqImV4=\n=fjgP\n-----END PGP SIGNATURE-----\n", "payload": "tree cab7c598ee7240b541047c382424a3ebb8ce315b\nparent 323e5e823bfd7e7a771ca90f9fe9359e34129896\nparent e087f61075814ae2612193f98a84c7f77101f90f\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1676527821 +0530\ncommitter GitHub <noreply@github.com> 1676527821 +0530\n\nRollup merge of #108101 - matthiaskrgr:noclonecopy, r=compiler-errors\n\ndon't clone types that are copy\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef0b12189ee7c0ef8d9ab976a6078f585411c37e", "html_url": "https://github.com/rust-lang/rust/commit/ef0b12189ee7c0ef8d9ab976a6078f585411c37e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef0b12189ee7c0ef8d9ab976a6078f585411c37e/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "323e5e823bfd7e7a771ca90f9fe9359e34129896", "url": "https://api.github.com/repos/rust-lang/rust/commits/323e5e823bfd7e7a771ca90f9fe9359e34129896", "html_url": "https://github.com/rust-lang/rust/commit/323e5e823bfd7e7a771ca90f9fe9359e34129896"}, {"sha": "e087f61075814ae2612193f98a84c7f77101f90f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e087f61075814ae2612193f98a84c7f77101f90f", "html_url": "https://github.com/rust-lang/rust/commit/e087f61075814ae2612193f98a84c7f77101f90f"}], "stats": {"total": 13, "additions": 6, "deletions": 7}, "files": [{"sha": "a35fa008a9557793c9e88de163f94dc25efb1247", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ef0b12189ee7c0ef8d9ab976a6078f585411c37e/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef0b12189ee7c0ef8d9ab976a6078f585411c37e/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=ef0b12189ee7c0ef8d9ab976a6078f585411c37e", "patch": "@@ -517,8 +517,7 @@ fn method_autoderef_steps<'tcx>(\n         .by_ref()\n         .map(|(ty, d)| {\n             let step = CandidateStep {\n-                self_ty: infcx\n-                    .make_query_response_ignoring_pending_obligations(inference_vars.clone(), ty),\n+                self_ty: infcx.make_query_response_ignoring_pending_obligations(inference_vars, ty),\n                 autoderefs: d,\n                 from_unsafe_deref: reached_raw_pointer,\n                 unsize: false,"}, {"sha": "81c7e4673d41b7e11e950cfd2eba1363a4cbf11a", "filename": "compiler/rustc_query_system/src/query/caches.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ef0b12189ee7c0ef8d9ab976a6078f585411c37e/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fcaches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef0b12189ee7c0ef8d9ab976a6078f585411c37e/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fcaches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fcaches.rs?ref=ef0b12189ee7c0ef8d9ab976a6078f585411c37e", "patch": "@@ -92,7 +92,7 @@ where\n         let mut lock = self.cache.lock();\n         // We may be overwriting another value. This is all right, since the dep-graph\n         // will check that the fingerprint matches.\n-        lock.insert(key, (value.clone(), index));\n+        lock.insert(key, (value, index));\n         value\n     }\n \n@@ -153,7 +153,7 @@ where\n \n     #[inline]\n     fn complete(&self, _key: (), value: V, index: DepNodeIndex) -> Self::Stored {\n-        *self.cache.lock() = Some((value.clone(), index));\n+        *self.cache.lock() = Some((value, index));\n         value\n     }\n \n@@ -283,7 +283,7 @@ where\n         let mut lock = self.cache.get_shard_by_hash(key.index() as u64).lock();\n         #[cfg(not(parallel_compiler))]\n         let mut lock = self.cache.lock();\n-        lock.insert(key, (value.clone(), index));\n+        lock.insert(key, (value, index));\n         value\n     }\n "}, {"sha": "28aa3d5270590f2c6c15d7faf54619bf77b84e51", "filename": "compiler/rustc_trait_selection/src/solve/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef0b12189ee7c0ef8d9ab976a6078f585411c37e/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef0b12189ee7c0ef8d9ab976a6078f585411c37e/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs?ref=ef0b12189ee7c0ef8d9ab976a6078f585411c37e", "patch": "@@ -547,7 +547,7 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n             response.value.certainty == Certainty::Yes\n                 && response.has_no_inference_or_external_constraints()\n         }) {\n-            return Ok(response.clone());\n+            return Ok(*response);\n         }\n \n         let certainty = candidates.iter().fold(Certainty::AMBIGUOUS, |certainty, response| {"}, {"sha": "7ef39b20107438e0266f8a06b7eba2cf9aecf4b3", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef0b12189ee7c0ef8d9ab976a6078f585411c37e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef0b12189ee7c0ef8d9ab976a6078f585411c37e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=ef0b12189ee7c0ef8d9ab976a6078f585411c37e", "patch": "@@ -599,7 +599,7 @@ fn virtual_call_violation_for_method<'tcx>(\n             return false;\n         }\n \n-        contains_illegal_self_type_reference(tcx, trait_def_id, pred.clone())\n+        contains_illegal_self_type_reference(tcx, trait_def_id, pred)\n     }) {\n         return Some(MethodViolationCode::WhereClauseReferencesSelf);\n     }"}]}