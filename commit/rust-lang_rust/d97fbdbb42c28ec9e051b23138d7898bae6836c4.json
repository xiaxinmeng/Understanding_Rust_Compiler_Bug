{"sha": "d97fbdbb42c28ec9e051b23138d7898bae6836c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5N2ZiZGJiNDJjMjhlYzllMDUxYjIzMTM4ZDc4OThiYWU2ODM2YzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-09T08:56:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-09T08:56:30Z"}, "message": "Auto merge of #4635 - Lythenas:suggestions-for-assert-false, r=flip1995\n\nAdd assert message to suggestion in lint assertions_on_constants\n\n<!--\nThank you for making Clippy better!\n\nWe're collecting our changelog from pull request descriptions.\nIf your PR only updates to the latest nightly, you can leave the\n`changelog` entry as `none`. Otherwise, please write a short comment\nexplaining your change.\n\nIf your PR fixes an issue, you can add \"fixes #issue_number\" into this\nPR description. This way the issue will be automatically closed when\nyour PR is merged.\n\nIf you added a new lint, here's a checklist for things that will be\nchecked during review or continuous integration.\n\n- [x] Followed [lint naming conventions][lint_naming]\n- [x] Added passing UI tests (including committed `.stderr` file)\n- [ ] `cargo test` passes locally\n- [x] Executed `./util/dev update_lints`\n- [ ] Added lint documentation\n- [ ] Run `./util/dev fmt`\n\n[lint_naming]: https://rust-lang.github.io/rfcs/0344-conventions-galore.html#lints\n\nNote that you can skip the above if you are just opening a WIP PR in\norder to get feedback.\n\nDelete this line and everything above before opening your PR -->\n\n- [x] suggest replacing `assert!(false, \"msg\")` with `panic!(\"msg\")`\n- [x] extend to allow ~~variables~~ any expression for `\"msg\"`\n- ~~suggest replacing `assert!(false, \"msg {}\", \"arg\")` with `panic!(\"msg {}\", \"arg\")`~~\n\nchangelog: add assert message to suggestion in lint assertions_on_constants\n\nWork towards fixing: #3575", "tree": {"sha": "f09037835bdc30cb37df93f0dba27d9e55ad878b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f09037835bdc30cb37df93f0dba27d9e55ad878b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d97fbdbb42c28ec9e051b23138d7898bae6836c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d97fbdbb42c28ec9e051b23138d7898bae6836c4", "html_url": "https://github.com/rust-lang/rust/commit/d97fbdbb42c28ec9e051b23138d7898bae6836c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d97fbdbb42c28ec9e051b23138d7898bae6836c4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1dc7f5c0bcac7309bd35acd8a5c3f25a442ef703", "url": "https://api.github.com/repos/rust-lang/rust/commits/1dc7f5c0bcac7309bd35acd8a5c3f25a442ef703", "html_url": "https://github.com/rust-lang/rust/commit/1dc7f5c0bcac7309bd35acd8a5c3f25a442ef703"}, {"sha": "6ee8d751f63ab3652297aa88adafc6ca549cb899", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ee8d751f63ab3652297aa88adafc6ca549cb899", "html_url": "https://github.com/rust-lang/rust/commit/6ee8d751f63ab3652297aa88adafc6ca549cb899"}], "stats": {"total": 186, "additions": 152, "deletions": 34}, "files": [{"sha": "3f84f322500f1498ceac1e2bd6bafa8969e791a4", "filename": "clippy_lints/src/assertions_on_constants.rs", "status": "modified", "additions": 126, "deletions": 28, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/d97fbdbb42c28ec9e051b23138d7898bae6836c4/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d97fbdbb42c28ec9e051b23138d7898bae6836c4/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassertions_on_constants.rs?ref=d97fbdbb42c28ec9e051b23138d7898bae6836c4", "patch": "@@ -1,9 +1,11 @@\n-use rustc::hir::{Expr, ExprKind};\n+use crate::consts::{constant, Constant};\n+use crate::utils::paths;\n+use crate::utils::{is_direct_expn_of, is_expn_of, match_def_path, snippet_opt, span_help_and_lint};\n+use if_chain::if_chain;\n+use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};\n-\n-use crate::consts::{constant, Constant};\n-use crate::utils::{is_direct_expn_of, is_expn_of, span_help_and_lint};\n+use syntax::ast::LitKind;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for `assert!(true)` and `assert!(false)` calls.\n@@ -31,39 +33,135 @@ declare_lint_pass!(AssertionsOnConstants => [ASSERTIONS_ON_CONSTANTS]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssertionsOnConstants {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n-        let lint_assert_cb = |is_debug_assert: bool| {\n-            if let ExprKind::Unary(_, ref lit) = e.kind {\n-                if let Some((Constant::Bool(is_true), _)) = constant(cx, cx.tables, lit) {\n-                    if is_true {\n-                        span_help_and_lint(\n-                            cx,\n-                            ASSERTIONS_ON_CONSTANTS,\n-                            e.span,\n-                            \"`assert!(true)` will be optimized out by the compiler\",\n-                            \"remove it\",\n-                        );\n-                    } else if !is_debug_assert {\n-                        span_help_and_lint(\n-                            cx,\n-                            ASSERTIONS_ON_CONSTANTS,\n-                            e.span,\n-                            \"`assert!(false)` should probably be replaced\",\n-                            \"use `panic!()` or `unreachable!()`\",\n-                        );\n-                    }\n-                }\n-            }\n+        let lint_true = || {\n+            span_help_and_lint(\n+                cx,\n+                ASSERTIONS_ON_CONSTANTS,\n+                e.span,\n+                \"`assert!(true)` will be optimized out by the compiler\",\n+                \"remove it\",\n+            );\n         };\n+        let lint_false_without_message = || {\n+            span_help_and_lint(\n+                cx,\n+                ASSERTIONS_ON_CONSTANTS,\n+                e.span,\n+                \"`assert!(false)` should probably be replaced\",\n+                \"use `panic!()` or `unreachable!()`\",\n+            );\n+        };\n+        let lint_false_with_message = |panic_message: String| {\n+            span_help_and_lint(\n+                cx,\n+                ASSERTIONS_ON_CONSTANTS,\n+                e.span,\n+                &format!(\"`assert!(false, {})` should probably be replaced\", panic_message),\n+                &format!(\"use `panic!({})` or `unreachable!({})`\", panic_message, panic_message),\n+            )\n+        };\n+\n         if let Some(debug_assert_span) = is_expn_of(e.span, \"debug_assert\") {\n             if debug_assert_span.from_expansion() {\n                 return;\n             }\n-            lint_assert_cb(true);\n+            if_chain! {\n+                if let ExprKind::Unary(_, ref lit) = e.kind;\n+                if let Some((Constant::Bool(is_true), _)) = constant(cx, cx.tables, lit);\n+                if is_true;\n+                then {\n+                    lint_true();\n+                }\n+            };\n         } else if let Some(assert_span) = is_direct_expn_of(e.span, \"assert\") {\n             if assert_span.from_expansion() {\n                 return;\n             }\n-            lint_assert_cb(false);\n+            if let Some(assert_match) = match_assert_with_message(&cx, e) {\n+                match assert_match {\n+                    // matched assert but not message\n+                    AssertKind::WithoutMessage(false) => lint_false_without_message(),\n+                    AssertKind::WithoutMessage(true) | AssertKind::WithMessage(_, true) => lint_true(),\n+                    AssertKind::WithMessage(panic_message, false) => lint_false_with_message(panic_message),\n+                };\n+            }\n         }\n     }\n }\n+\n+/// Result of calling `match_assert_with_message`.\n+enum AssertKind {\n+    WithMessage(String, bool),\n+    WithoutMessage(bool),\n+}\n+\n+/// Check if the expression matches\n+///\n+/// ```rust,ignore\n+/// match { let _t = !c; _t } {\n+///     true => {\n+///         {\n+///             ::std::rt::begin_panic(message, _)\n+///         }\n+///     }\n+///     _ => { }\n+/// };\n+/// ```\n+///\n+/// where `message` is any expression and `c` is a constant bool.\n+fn match_assert_with_message<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) -> Option<AssertKind> {\n+    if_chain! {\n+        if let ExprKind::Match(ref expr, ref arms, _) = expr.kind;\n+        // matches { let _t = expr; _t }\n+        if let ExprKind::DropTemps(ref expr) = expr.kind;\n+        if let ExprKind::Unary(UnOp::UnNot, ref expr) = expr.kind;\n+        // bind the first argument of the `assert!` macro\n+        if let Some((Constant::Bool(is_true), _)) = constant(cx, cx.tables, expr);\n+        // arm 1 pattern\n+        if let PatKind::Lit(ref lit_expr) = arms[0].pat.kind;\n+        if let ExprKind::Lit(ref lit) = lit_expr.kind;\n+        if let LitKind::Bool(true) = lit.node;\n+        // arm 1 block\n+        if let ExprKind::Block(ref block, _) = arms[0].body.kind;\n+        if block.stmts.len() == 0;\n+        if let Some(block_expr) = &block.expr;\n+        if let ExprKind::Block(ref inner_block, _) = block_expr.kind;\n+        if let Some(begin_panic_call) = &inner_block.expr;\n+        // function call\n+        if let Some(args) = match_function_call(cx, begin_panic_call, &paths::BEGIN_PANIC);\n+        if args.len() == 2;\n+        // bind the second argument of the `assert!` macro if it exists\n+        if let panic_message = snippet_opt(cx, args[0].span);\n+        // second argument of begin_panic is irrelevant\n+        // as is the second match arm\n+        then {\n+            // an empty message occurs when it was generated by the macro\n+            // (and not passed by the user)\n+            return panic_message\n+                .filter(|msg| !msg.is_empty())\n+                .map(|msg| AssertKind::WithMessage(msg, is_true))\n+                .or(Some(AssertKind::WithoutMessage(is_true)));\n+        }\n+    }\n+    None\n+}\n+\n+/// Matches a function call with the given path and returns the arguments.\n+///\n+/// Usage:\n+///\n+/// ```rust,ignore\n+/// if let Some(args) = match_function_call(cx, begin_panic_call, &paths::BEGIN_PANIC);\n+/// ```\n+fn match_function_call<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr, path: &[&str]) -> Option<&'a [Expr]> {\n+    if_chain! {\n+        if let ExprKind::Call(ref fun, ref args) = expr.kind;\n+        if let ExprKind::Path(ref qpath) = fun.kind;\n+        if let Some(fun_def_id) = cx.tables.qpath_res(qpath, fun.hir_id).opt_def_id();\n+        if match_def_path(cx, fun_def_id, path);\n+        then {\n+            return Some(&args)\n+        }\n+    };\n+    None\n+}"}, {"sha": "60d721c2f20495367b9a8b530845dc93e89c1cbb", "filename": "tests/ui/assertions_on_constants.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d97fbdbb42c28ec9e051b23138d7898bae6836c4/tests%2Fui%2Fassertions_on_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d97fbdbb42c28ec9e051b23138d7898bae6836c4/tests%2Fui%2Fassertions_on_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassertions_on_constants.rs?ref=d97fbdbb42c28ec9e051b23138d7898bae6836c4", "patch": "@@ -11,11 +11,15 @@ fn main() {\n     assert!(true, \"true message\");\n     assert!(false, \"false message\");\n \n+    let msg = \"panic message\";\n+    assert!(false, msg.to_uppercase());\n+\n     const B: bool = true;\n     assert!(B);\n \n     const C: bool = false;\n     assert!(C);\n+    assert!(C, \"C message\");\n \n     debug_assert!(true);\n     // Don't lint this, since there is no better way for expressing \"Only panic in debug mode\"."}, {"sha": "215012f2ad73b9ab954b3ebf571eae4f580f2a68", "filename": "tests/ui/assertions_on_constants.stderr", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d97fbdbb42c28ec9e051b23138d7898bae6836c4/tests%2Fui%2Fassertions_on_constants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d97fbdbb42c28ec9e051b23138d7898bae6836c4/tests%2Fui%2Fassertions_on_constants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassertions_on_constants.stderr?ref=d97fbdbb42c28ec9e051b23138d7898bae6836c4", "patch": "@@ -23,38 +23,54 @@ LL |     assert!(true, \"true message\");\n    |\n    = help: remove it\n \n-error: `assert!(false)` should probably be replaced\n+error: `assert!(false, \"false message\")` should probably be replaced\n   --> $DIR/assertions_on_constants.rs:12:5\n    |\n LL |     assert!(false, \"false message\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: use `panic!()` or `unreachable!()`\n+   = help: use `panic!(\"false message\")` or `unreachable!(\"false message\")`\n \n-error: `assert!(true)` will be optimized out by the compiler\n+error: `assert!(false, msg.to_uppercase())` should probably be replaced\n   --> $DIR/assertions_on_constants.rs:15:5\n    |\n+LL |     assert!(false, msg.to_uppercase());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use `panic!(msg.to_uppercase())` or `unreachable!(msg.to_uppercase())`\n+\n+error: `assert!(true)` will be optimized out by the compiler\n+  --> $DIR/assertions_on_constants.rs:18:5\n+   |\n LL |     assert!(B);\n    |     ^^^^^^^^^^^\n    |\n    = help: remove it\n \n error: `assert!(false)` should probably be replaced\n-  --> $DIR/assertions_on_constants.rs:18:5\n+  --> $DIR/assertions_on_constants.rs:21:5\n    |\n LL |     assert!(C);\n    |     ^^^^^^^^^^^\n    |\n    = help: use `panic!()` or `unreachable!()`\n \n+error: `assert!(false, \"C message\")` should probably be replaced\n+  --> $DIR/assertions_on_constants.rs:22:5\n+   |\n+LL |     assert!(C, \"C message\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use `panic!(\"C message\")` or `unreachable!(\"C message\")`\n+\n error: `assert!(true)` will be optimized out by the compiler\n-  --> $DIR/assertions_on_constants.rs:20:5\n+  --> $DIR/assertions_on_constants.rs:24:5\n    |\n LL |     debug_assert!(true);\n    |     ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: remove it\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 9 previous errors\n "}]}