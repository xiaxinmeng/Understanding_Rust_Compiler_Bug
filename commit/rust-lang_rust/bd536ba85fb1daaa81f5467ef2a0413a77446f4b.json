{"sha": "bd536ba85fb1daaa81f5467ef2a0413a77446f4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkNTM2YmE4NWZiMWRhYWE4MWY1NDY3ZWYyYTA0MTNhNzc0NDZmNGI=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-12-31T21:01:45Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-12-31T21:01:45Z"}, "message": "Free objects by indirectly dropping fields via enclosed tydesc first.", "tree": {"sha": "4b75847cb5014a01513c5632c0391328928857e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b75847cb5014a01513c5632c0391328928857e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd536ba85fb1daaa81f5467ef2a0413a77446f4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd536ba85fb1daaa81f5467ef2a0413a77446f4b", "html_url": "https://github.com/rust-lang/rust/commit/bd536ba85fb1daaa81f5467ef2a0413a77446f4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd536ba85fb1daaa81f5467ef2a0413a77446f4b/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f072718cfe83f0b92fa445cfa5b4f973886ef918", "url": "https://api.github.com/repos/rust-lang/rust/commits/f072718cfe83f0b92fa445cfa5b4f973886ef918", "html_url": "https://github.com/rust-lang/rust/commit/f072718cfe83f0b92fa445cfa5b4f973886ef918"}], "stats": {"total": 51, "additions": 49, "deletions": 2}, "files": [{"sha": "115ef1f24b99de80dd48382b480c5877ed9bba76", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 49, "deletions": 2, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/bd536ba85fb1daaa81f5467ef2a0413a77446f4b/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd536ba85fb1daaa81f5467ef2a0413a77446f4b/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=bd536ba85fb1daaa81f5467ef2a0413a77446f4b", "patch": "@@ -399,9 +399,11 @@ fn type_of_inner(@crate_ctxt cx, @ty.t t) -> TypeRef {\n                 mtys += T_ptr(mty);\n             }\n             let TypeRef vtbl = T_struct(mtys);\n+            let TypeRef body = T_struct(vec(T_ptr(T_tydesc()),\n+                                            T_nil()));\n             let TypeRef pair =\n                 T_struct(vec(T_ptr(vtbl),\n-                             T_ptr(T_box(T_nil()))));\n+                             T_ptr(T_box(body))));\n             auto abs_pair = llvm.LLVMResolveTypeHandle(th.llth);\n             llvm.LLVMRefineType(abs_pair, pair);\n             abs_pair = llvm.LLVMResolveTypeHandle(th.llth);\n@@ -775,6 +777,50 @@ fn make_drop_glue(@block_ctxt cx, ValueRef v, @ty.t t) -> result {\n                                         T_int(), C_int(0));\n         }\n \n+        case (ty.ty_obj(_)) {\n+            fn hit_zero(@block_ctxt cx, ValueRef v) -> result {\n+\n+                // Call through the obj's own fields-drop glue first.\n+                auto body =\n+                    cx.build.GEP(v,\n+                                 vec(C_int(0),\n+                                     C_int(abi.box_rc_field_body)));\n+\n+                auto fields =\n+                    cx.build.GEP(body,\n+                                 vec(C_int(0),\n+                                     C_int(abi.obj_body_elt_fields)));\n+                auto llrawptr = cx.build.BitCast(fields, T_ptr(T_i8()));\n+\n+                auto tydescptr =\n+                    cx.build.GEP(body,\n+                                 vec(C_int(0),\n+                                     C_int(abi.obj_body_elt_tydesc)));\n+                auto tydesc = cx.build.Load(tydescptr);\n+                auto llfnptr =\n+                    cx.build.GEP(tydesc,\n+                                 vec(C_int(0),\n+                                     C_int(abi.tydesc_field_drop_glue_off)));\n+                auto llfn = cx.build.Load(llfnptr);\n+                cx.build.FastCall(llfn, vec(cx.fcx.lltaskptr, llrawptr));\n+\n+                // Then free the body.\n+                // FIXME: switch gc/non-gc on layer of the type.\n+                ret trans_non_gc_free(cx, v);\n+            }\n+            auto box_cell =\n+                cx.build.GEP(v,\n+                             vec(C_int(0),\n+                                 C_int(abi.obj_field_box)));\n+\n+            auto boxptr = cx.build.Load(box_cell);\n+\n+            ret decr_refcnt_and_if_zero(cx, boxptr,\n+                                        bind hit_zero(_, boxptr),\n+                                        \"free obj\",\n+                                        T_int(), C_int(0));\n+        }\n+\n         case (_) {\n             if (ty.type_is_structural(t)) {\n                 ret iter_structural_ty(cx, v, t,\n@@ -2651,7 +2697,8 @@ impure fn trans_obj(@crate_ctxt cx, &ast._obj ob, ast.def_id oid,\n                                       C_int(abi.obj_field_box)));\n     bcx.build.Store(vtbl, pair_vtbl);\n \n-    let TypeRef llbox_ty = T_ptr(T_box(T_nil()));\n+    let TypeRef llbox_ty = T_ptr(T_box(T_struct(vec(T_ptr(T_tydesc()),\n+                                                    T_nil()))));\n     if (_vec.len[ty.arg](arg_tys) == 0u) {\n         // Store null into pair, if no args.\n         bcx.build.Store(C_null(llbox_ty), pair_box);"}]}