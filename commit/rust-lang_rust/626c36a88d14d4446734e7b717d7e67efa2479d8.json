{"sha": "626c36a88d14d4446734e7b717d7e67efa2479d8", "node_id": "C_kwDOAAsO6NoAKDYyNmMzNmE4OGQxNGQ0NDQ2NzM0ZTdiNzE3ZDdlNjdlZmEyNDc5ZDg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-09-17T21:30:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-17T21:30:50Z"}, "message": "Rollup merge of #101942 - Mark-Simulacrum:fix-perf, r=jyn514\n\nRevert \"Copy stage0 binaries into stage0-sysroot\"\n\nThis reverts PR #101711.\n\nThe PR broke the rustc/bootstrap benchmark on rustc-perf, I believe due to the assumption that the stage0 directory exists. Fixing that by just skipping this logic might be reasonable, but I think there's a larger discussion to be had around the right behavior when we don't have a single bin/ directory (when rustc= and cargo= are specified in config.toml). I think it's potentially reasonable to put those binaries (cargo, rustc, rustfmt?) into the bin directory, but for now just want to get us back to a healthy state.\n\nr? `@jyn514` (but would appreciate review from others as this is just a direct revert).", "tree": {"sha": "c9079e2d55f8a01e606d18d7c8eb3af74eb76537", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9079e2d55f8a01e606d18d7c8eb3af74eb76537"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/626c36a88d14d4446734e7b717d7e67efa2479d8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjJjyKCRBK7hj4Ov3rIwAAcKIIAJydLpS+IgHg/tuQcGpP1+vi\nAuMduzvH/VTNzKTE1DxNUY0HDteRhDWB2nAt6Xf1a2KrgSfBfLwTnQ49TjX2D0Ws\n5rzg1qazbhJvmiQtJ9D95eH29z3zfKgzbqxFevUqSs6U1FMyW5vCojsLTB1Nm1YC\nE2cQhuOlXvhLLVDMJeH9PRcDRBbSL4nqaBSW8o/mpGnsLofG8be6SRQ37m3nbRB8\n85G7Wg6nowN2axAopkE+XvbQSfoPtMY7YHaF0B03MLEQjZnav6BkhaOQRQYHMP+Z\nNIm7z5c9/z+mGvprq2sxIe5xj+pcm2sUdOPBk+vQ+cAUaec4AxvmcuOrEsPo6G4=\n=kpD1\n-----END PGP SIGNATURE-----\n", "payload": "tree c9079e2d55f8a01e606d18d7c8eb3af74eb76537\nparent cda20a7da6d23fabdc805f15644fcc6a8a270532\nparent f0c78ee3dc7c6b99a939e6afb7348ba8b543d7fd\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1663450250 +0200\ncommitter GitHub <noreply@github.com> 1663450250 +0200\n\nRollup merge of #101942 - Mark-Simulacrum:fix-perf, r=jyn514\n\nRevert \"Copy stage0 binaries into stage0-sysroot\"\n\nThis reverts PR #101711.\n\nThe PR broke the rustc/bootstrap benchmark on rustc-perf, I believe due to the assumption that the stage0 directory exists. Fixing that by just skipping this logic might be reasonable, but I think there's a larger discussion to be had around the right behavior when we don't have a single bin/ directory (when rustc= and cargo= are specified in config.toml). I think it's potentially reasonable to put those binaries (cargo, rustc, rustfmt?) into the bin directory, but for now just want to get us back to a healthy state.\n\nr? `@jyn514` (but would appreciate review from others as this is just a direct revert).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/626c36a88d14d4446734e7b717d7e67efa2479d8", "html_url": "https://github.com/rust-lang/rust/commit/626c36a88d14d4446734e7b717d7e67efa2479d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/626c36a88d14d4446734e7b717d7e67efa2479d8/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cda20a7da6d23fabdc805f15644fcc6a8a270532", "url": "https://api.github.com/repos/rust-lang/rust/commits/cda20a7da6d23fabdc805f15644fcc6a8a270532", "html_url": "https://github.com/rust-lang/rust/commit/cda20a7da6d23fabdc805f15644fcc6a8a270532"}, {"sha": "f0c78ee3dc7c6b99a939e6afb7348ba8b543d7fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0c78ee3dc7c6b99a939e6afb7348ba8b543d7fd", "html_url": "https://github.com/rust-lang/rust/commit/f0c78ee3dc7c6b99a939e6afb7348ba8b543d7fd"}], "stats": {"total": 37, "additions": 0, "deletions": 37}, "files": [{"sha": "c13e83f6c86126c82563b80f224f6252bf6dfc2e", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/626c36a88d14d4446734e7b717d7e67efa2479d8/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626c36a88d14d4446734e7b717d7e67efa2479d8/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=626c36a88d14d4446734e7b717d7e67efa2479d8", "patch": "@@ -436,43 +436,6 @@ impl Step for StdLink {\n         let libdir = builder.sysroot_libdir(target_compiler, target);\n         let hostdir = builder.sysroot_libdir(target_compiler, compiler.host);\n         add_to_sysroot(builder, &libdir, &hostdir, &libstd_stamp(builder, compiler, target));\n-\n-        if compiler.stage == 0 {\n-            // special handling for stage0, to make `rustup toolchain link` and `x dist --stage 0`\n-            // work for stage0-sysroot\n-\n-            // copy bin files from stage0/bin to stage0-sysroot/bin\n-            let sysroot = builder.out.join(&compiler.host.triple).join(\"stage0-sysroot\");\n-\n-            let host = compiler.host.triple;\n-            let stage0_bin_dir = builder.out.join(&host).join(\"stage0/bin\");\n-            let sysroot_bin_dir = sysroot.join(\"bin\");\n-            t!(fs::create_dir_all(&sysroot_bin_dir));\n-            builder.cp_r(&stage0_bin_dir, &sysroot_bin_dir);\n-\n-            // copy all *.so files from stage0/lib to stage0-sysroot/lib\n-            let stage0_lib_dir = builder.out.join(&host).join(\"stage0/lib\");\n-            if let Ok(files) = fs::read_dir(&stage0_lib_dir) {\n-                for file in files {\n-                    let file = t!(file);\n-                    let path = file.path();\n-                    if path.is_file() && is_dylib(&file.file_name().into_string().unwrap()) {\n-                        builder.copy(&path, &sysroot.join(\"lib\").join(path.file_name().unwrap()));\n-                    }\n-                }\n-            }\n-\n-            // copy codegen-backends from stage0\n-            let sysroot_codegen_backends = builder.sysroot_codegen_backends(compiler);\n-            t!(fs::create_dir_all(&sysroot_codegen_backends));\n-            let stage0_codegen_backends = builder\n-                .out\n-                .join(&host)\n-                .join(\"stage0/lib/rustlib\")\n-                .join(&host)\n-                .join(\"codegen-backends\");\n-            builder.cp_r(&stage0_codegen_backends, &sysroot_codegen_backends);\n-        }\n     }\n }\n "}]}