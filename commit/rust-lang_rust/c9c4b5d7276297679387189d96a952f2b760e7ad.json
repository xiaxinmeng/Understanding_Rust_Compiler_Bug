{"sha": "c9c4b5d7276297679387189d96a952f2b760e7ad", "node_id": "C_kwDOAAsO6NoAKGM5YzRiNWQ3Mjc2Mjk3Njc5Mzg3MTg5ZDk2YTk1MmYyYjc2MGU3YWQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-17T17:13:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-17T17:13:41Z"}, "message": "Auto merge of #90984 - matthiaskrgr:rollup-j5bs96a, r=matthiaskrgr\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #89610 (warn on must_use use on async fn's)\n - #90667 (Improve diagnostics when a static lifetime is expected)\n - #90687 (Permit const panics in stable const contexts in stdlib)\n - #90772 (Add Vec::retain_mut)\n - #90861 (Print escaped string if char literal has multiple characters, but only one printable character)\n - #90884 (Fix span for non-satisfied trivial trait bounds)\n - #90900 (Remove workaround for the forward progress handling in LLVM)\n - #90901 (Improve ManuallyDrop suggestion)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "0b49f054a4bcead6f39c6cab5f42741335b767aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b49f054a4bcead6f39c6cab5f42741335b767aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9c4b5d7276297679387189d96a952f2b760e7ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9c4b5d7276297679387189d96a952f2b760e7ad", "html_url": "https://github.com/rust-lang/rust/commit/c9c4b5d7276297679387189d96a952f2b760e7ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9c4b5d7276297679387189d96a952f2b760e7ad/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "faea820643f9acec1bb787941063393f9508a775", "url": "https://api.github.com/repos/rust-lang/rust/commits/faea820643f9acec1bb787941063393f9508a775", "html_url": "https://github.com/rust-lang/rust/commit/faea820643f9acec1bb787941063393f9508a775"}, {"sha": "469faa2b667dc1d6cb6ca902a1d2c9a116fb096a", "url": "https://api.github.com/repos/rust-lang/rust/commits/469faa2b667dc1d6cb6ca902a1d2c9a116fb096a", "html_url": "https://github.com/rust-lang/rust/commit/469faa2b667dc1d6cb6ca902a1d2c9a116fb096a"}], "stats": {"total": 1005, "additions": 648, "deletions": 357}, "files": [{"sha": "f3a2382ef32d901c5e179f772b51b53dbcf384f1", "filename": "compiler/rustc_codegen_gcc/src/intrinsic/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c9c4b5d7276297679387189d96a952f2b760e7ad/compiler%2Frustc_codegen_gcc%2Fsrc%2Fintrinsic%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9c4b5d7276297679387189d96a952f2b760e7ad/compiler%2Frustc_codegen_gcc%2Fsrc%2Fintrinsic%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fintrinsic%2Fmod.rs?ref=c9c4b5d7276297679387189d96a952f2b760e7ad", "patch": "@@ -316,7 +316,7 @@ impl<'a, 'gcc, 'tcx> IntrinsicCallMethods<'tcx> for Builder<'a, 'gcc, 'tcx> {\n                     extended_asm.add_input_operand(None, \"r\", result.llval);\n                     extended_asm.add_clobber(\"memory\");\n                     extended_asm.set_volatile_flag(true);\n-                    \n+\n                     // We have copied the value to `result` already.\n                     return;\n                 }\n@@ -363,10 +363,6 @@ impl<'a, 'gcc, 'tcx> IntrinsicCallMethods<'tcx> for Builder<'a, 'gcc, 'tcx> {\n         cond\n     }\n \n-    fn sideeffect(&mut self) {\n-        // TODO(antoyo)\n-    }\n-\n     fn type_test(&mut self, _pointer: Self::Value, _typeid: Self::Value) -> Self::Value {\n         // Unsupported.\n         self.context.new_rvalue_from_int(self.int_type, 0)"}, {"sha": "613a8df891ce4e5914e5ba617402db72b58362e9", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9c4b5d7276297679387189d96a952f2b760e7ad/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9c4b5d7276297679387189d96a952f2b760e7ad/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=c9c4b5d7276297679387189d96a952f2b760e7ad", "patch": "@@ -597,7 +597,6 @@ impl CodegenCx<'b, 'tcx> {\n         ifn!(\"llvm.trap\", fn() -> void);\n         ifn!(\"llvm.debugtrap\", fn() -> void);\n         ifn!(\"llvm.frameaddress\", fn(t_i32) -> i8p);\n-        ifn!(\"llvm.sideeffect\", fn() -> void);\n \n         ifn!(\"llvm.powi.f32\", fn(t_f32, t_i32) -> t_f32);\n         ifn!(\"llvm.powi.f64\", fn(t_f64, t_i32) -> t_f64);"}, {"sha": "a7e34b080594bc1005f9dabcc9a63e1982441236", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c9c4b5d7276297679387189d96a952f2b760e7ad/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9c4b5d7276297679387189d96a952f2b760e7ad/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=c9c4b5d7276297679387189d96a952f2b760e7ad", "patch": "@@ -392,15 +392,6 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n         self.call_intrinsic(\"llvm.expect.i1\", &[cond, self.const_bool(expected)])\n     }\n \n-    fn sideeffect(&mut self) {\n-        // This kind of check would make a ton of sense in the caller, but currently the only\n-        // caller of this function is in `rustc_codegen_ssa`, which is agnostic to whether LLVM\n-        // codegen backend being used, and so is unable to check the LLVM version.\n-        if unsafe { llvm::LLVMRustVersionMajor() } < 12 {\n-            self.call_intrinsic(\"llvm.sideeffect\", &[]);\n-        }\n-    }\n-\n     fn type_test(&mut self, pointer: Self::Value, typeid: Self::Value) -> Self::Value {\n         // Test the called operand using llvm.type.test intrinsic. The LowerTypeTests link-time\n         // optimization pass replaces calls to this intrinsic with code to test type membership."}, {"sha": "c8f388bfa1d5ab920bdbedf8171407aa8e52cb03", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c9c4b5d7276297679387189d96a952f2b760e7ad/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9c4b5d7276297679387189d96a952f2b760e7ad/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=c9c4b5d7276297679387189d96a952f2b760e7ad", "patch": "@@ -980,17 +980,6 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             }\n \n             mir::TerminatorKind::Goto { target } => {\n-                if bb == target {\n-                    // This is an unconditional branch back to this same basic block. That means we\n-                    // have something like a `loop {}` statement. LLVM versions before 12.0\n-                    // miscompile this because they assume forward progress. For older versions\n-                    // try to handle just this specific case which comes up commonly in practice\n-                    // (e.g., in embedded code).\n-                    //\n-                    // NB: the `sideeffect` currently checks for the LLVM version used internally.\n-                    bx.sideeffect();\n-                }\n-\n                 helper.funclet_br(self, &mut bx, target);\n             }\n "}, {"sha": "02be6cd360c72e2d6675f9a6990cb29f83569917", "filename": "compiler/rustc_codegen_ssa/src/traits/intrinsic.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9c4b5d7276297679387189d96a952f2b760e7ad/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9c4b5d7276297679387189d96a952f2b760e7ad/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fintrinsic.rs?ref=c9c4b5d7276297679387189d96a952f2b760e7ad", "patch": "@@ -20,10 +20,6 @@ pub trait IntrinsicCallMethods<'tcx>: BackendTypes {\n     fn abort(&mut self);\n     fn assume(&mut self, val: Self::Value);\n     fn expect(&mut self, cond: Self::Value, expected: bool) -> Self::Value;\n-    /// Emits a forced side effect.\n-    ///\n-    /// Currently has any effect only when LLVM versions prior to 12.0 are used as the backend.\n-    fn sideeffect(&mut self);\n     /// Trait method used to test whether a given pointer is associated with a type identifier.\n     fn type_test(&mut self, pointer: Self::Value, typeid: Self::Value) -> Self::Value;\n     /// Trait method used to inject `va_start` on the \"spoofed\" `VaListImpl` in"}, {"sha": "eb1c80ecb018c1454ae38c876ff50557ec532b8d", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/named_anon_conflict.rs", "status": "modified", "additions": 24, "deletions": 41, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/c9c4b5d7276297679387189d96a952f2b760e7ad/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9c4b5d7276297679387189d96a952f2b760e7ad/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs?ref=c9c4b5d7276297679387189d96a952f2b760e7ad", "patch": "@@ -3,8 +3,6 @@\n use crate::infer::error_reporting::nice_region_error::find_anon_type::find_anon_type;\n use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n-use rustc_hir::intravisit::Visitor;\n-use rustc_hir::FnRetTy;\n use rustc_middle::ty;\n \n impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n@@ -48,19 +46,24 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             return None; // inapplicable\n         };\n \n+        // Suggesting to add a `'static` lifetime to a parameter is nearly always incorrect,\n+        // and can steer users down the wrong path.\n+        if *named == ty::ReStatic {\n+            return None;\n+        }\n+\n         debug!(\"try_report_named_anon_conflict: named = {:?}\", named);\n         debug!(\"try_report_named_anon_conflict: anon_param_info = {:?}\", anon_param_info);\n         debug!(\"try_report_named_anon_conflict: region_info = {:?}\", region_info);\n \n-        let (param, new_ty, new_ty_span, br, is_first, scope_def_id, is_impl_item) = (\n-            anon_param_info.param,\n-            anon_param_info.param_ty,\n-            anon_param_info.param_ty_span,\n-            anon_param_info.bound_region,\n-            anon_param_info.is_first,\n-            region_info.def_id,\n-            region_info.is_impl_item,\n-        );\n+        let param = anon_param_info.param;\n+        let new_ty = anon_param_info.param_ty;\n+        let new_ty_span = anon_param_info.param_ty_span;\n+        let br = anon_param_info.bound_region;\n+        let is_first = anon_param_info.is_first;\n+        let scope_def_id = region_info.def_id;\n+        let is_impl_item = region_info.is_impl_item;\n+\n         match br {\n             ty::BrAnon(_) => {}\n             _ => {\n@@ -75,26 +78,10 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             return None;\n         }\n \n-        if let Some((_, fndecl)) = find_anon_type(self.tcx(), anon, &br) {\n-            if self.is_self_anon(is_first, scope_def_id) {\n-                return None;\n-            }\n-\n-            if let FnRetTy::Return(ty) = &fndecl.output {\n-                let mut v = ty::TraitObjectVisitor(vec![], self.tcx().hir());\n-                v.visit_ty(ty);\n-\n-                debug!(\"try_report_named_anon_conflict: ret ty {:?}\", ty);\n-                if sub == &ty::ReStatic\n-                    && v.0.into_iter().any(|t| t.span.desugaring_kind().is_none())\n-                {\n-                    // If the failure is due to a `'static` requirement coming from a `dyn` or\n-                    // `impl` Trait that *isn't* caused by `async fn` desugaring, handle this case\n-                    // better in `static_impl_trait`.\n-                    debug!(\"try_report_named_anon_conflict: impl Trait + 'static\");\n-                    return None;\n-                }\n-            }\n+        if find_anon_type(self.tcx(), anon, &br).is_some()\n+            && self.is_self_anon(is_first, scope_def_id)\n+        {\n+            return None;\n         }\n \n         let (error_var, span_label_var) = match param.pat.simple_ident() {\n@@ -114,16 +101,12 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         );\n \n         diag.span_label(span, format!(\"lifetime `{}` required\", named));\n-        // Suggesting `'static` is nearly always incorrect, and can steer users\n-        // down the wrong path.\n-        if *named != ty::ReStatic {\n-            diag.span_suggestion(\n-                new_ty_span,\n-                &format!(\"add explicit lifetime `{}` to {}\", named, span_label_var),\n-                new_ty.to_string(),\n-                Applicability::Unspecified,\n-            );\n-        }\n+        diag.span_suggestion(\n+            new_ty_span,\n+            &format!(\"add explicit lifetime `{}` to {}\", named, span_label_var),\n+            new_ty.to_string(),\n+            Applicability::Unspecified,\n+        );\n \n         Some(diag)\n     }"}, {"sha": "92f74af4eb3eb930959168337dd0911572a85803", "filename": "compiler/rustc_infer/src/traits/util.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c9c4b5d7276297679387189d96a952f2b760e7ad/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9c4b5d7276297679387189d96a952f2b760e7ad/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs?ref=c9c4b5d7276297679387189d96a952f2b760e7ad", "patch": "@@ -5,6 +5,7 @@ use crate::traits::{Obligation, ObligationCause, PredicateObligation};\n use rustc_data_structures::fx::{FxHashSet, FxIndexSet};\n use rustc_middle::ty::{self, ToPredicate, TyCtxt, WithConstness};\n use rustc_span::symbol::Ident;\n+use rustc_span::Span;\n \n pub fn anonymize_predicate<'tcx>(\n     tcx: TyCtxt<'tcx>,\n@@ -97,6 +98,22 @@ pub fn elaborate_predicates<'tcx>(\n     elaborate_obligations(tcx, obligations)\n }\n \n+pub fn elaborate_predicates_with_span<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    predicates: impl Iterator<Item = (ty::Predicate<'tcx>, Span)>,\n+) -> Elaborator<'tcx> {\n+    let obligations = predicates\n+        .map(|(predicate, span)| {\n+            predicate_obligation(\n+                predicate,\n+                ty::ParamEnv::empty(),\n+                ObligationCause::dummy_with_span(span),\n+            )\n+        })\n+        .collect();\n+    elaborate_obligations(tcx, obligations)\n+}\n+\n pub fn elaborate_obligations<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     mut obligations: Vec<PredicateObligation<'tcx>>,"}, {"sha": "7f68112a427ba1be2270c2bf58dfe06b6c09cdc2", "filename": "compiler/rustc_parse/src/lexer/unescape_error_reporting.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c9c4b5d7276297679387189d96a952f2b760e7ad/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9c4b5d7276297679387189d96a952f2b760e7ad/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs?ref=c9c4b5d7276297679387189d96a952f2b760e7ad", "patch": "@@ -82,6 +82,33 @@ pub(crate) fn emit_unescape_error(\n                         Applicability::MachineApplicable,\n                     );\n                 }\n+            } else {\n+                let printable: Vec<char> = lit\n+                    .chars()\n+                    .filter(|&x| {\n+                        unicode_width::UnicodeWidthChar::width(x).unwrap_or(0) != 0\n+                            && !x.is_whitespace()\n+                    })\n+                    .collect();\n+\n+                if let [ch] = printable.as_slice() {\n+                    has_help = true;\n+\n+                    handler.span_note(\n+                        span,\n+                        &format!(\n+                            \"there are non-printing characters, the full sequence is `{}`\",\n+                            lit.escape_default(),\n+                        ),\n+                    );\n+\n+                    handler.span_suggestion(\n+                        span,\n+                        \"consider removing the non-printing characters\",\n+                        ch.to_string(),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n             }\n \n             if !has_help {"}, {"sha": "6ff2259dc5b0a9f34896513c0bc8bcc4e45de3f2", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c9c4b5d7276297679387189d96a952f2b760e7ad/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9c4b5d7276297679387189d96a952f2b760e7ad/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=c9c4b5d7276297679387189d96a952f2b760e7ad", "patch": "@@ -112,6 +112,7 @@ impl CheckAttrVisitor<'tcx> {\n                     self.check_default_method_body_is_const(attr, span, target)\n                 }\n                 sym::must_not_suspend => self.check_must_not_suspend(&attr, span, target),\n+                sym::must_use => self.check_must_use(hir_id, &attr, span, target),\n                 sym::rustc_const_unstable\n                 | sym::rustc_const_stable\n                 | sym::unstable\n@@ -1046,6 +1047,37 @@ impl CheckAttrVisitor<'tcx> {\n         is_valid\n     }\n \n+    /// Warns against some misuses of `#[must_use]`\n+    fn check_must_use(\n+        &self,\n+        hir_id: HirId,\n+        attr: &Attribute,\n+        span: &Span,\n+        _target: Target,\n+    ) -> bool {\n+        let node = self.tcx.hir().get(hir_id);\n+        if let Some(fn_node) = node.fn_kind() {\n+            if let rustc_hir::IsAsync::Async = fn_node.asyncness() {\n+                self.tcx.struct_span_lint_hir(UNUSED_ATTRIBUTES, hir_id, attr.span, |lint| {\n+                    lint.build(\n+                        \"`must_use` attribute on `async` functions \\\n+                              applies to the anonymous `Future` returned by the \\\n+                              function, not the value within\",\n+                    )\n+                    .span_label(\n+                        *span,\n+                        \"this attribute does nothing, the `Future`s \\\n+                                returned by async functions are already `must_use`\",\n+                    )\n+                    .emit();\n+                });\n+            }\n+        }\n+\n+        // For now, its always valid\n+        true\n+    }\n+\n     /// Checks if `#[must_not_suspend]` is applied to a function. Returns `true` if valid.\n     fn check_must_not_suspend(&self, attr: &Attribute, span: &Span, target: Target) -> bool {\n         match target {"}, {"sha": "91671994c5ace9c87c31ddc0e1750a7277244ae4", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c9c4b5d7276297679387189d96a952f2b760e7ad/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9c4b5d7276297679387189d96a952f2b760e7ad/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=c9c4b5d7276297679387189d96a952f2b760e7ad", "patch": "@@ -65,7 +65,8 @@ pub use self::specialize::{specialization_graph, translate_substs, OverlapError}\n pub use self::structural_match::search_for_structural_match_violation;\n pub use self::structural_match::NonStructuralMatchTy;\n pub use self::util::{\n-    elaborate_obligations, elaborate_predicates, elaborate_trait_ref, elaborate_trait_refs,\n+    elaborate_obligations, elaborate_predicates, elaborate_predicates_with_span,\n+    elaborate_trait_ref, elaborate_trait_refs,\n };\n pub use self::util::{expand_trait_aliases, TraitAliasExpander};\n pub use self::util::{"}, {"sha": "bb1d9744e66fe068447885de77b80c62f789339a", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c9c4b5d7276297679387189d96a952f2b760e7ad/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9c4b5d7276297679387189d96a952f2b760e7ad/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=c9c4b5d7276297679387189d96a952f2b760e7ad", "patch": "@@ -371,16 +371,26 @@ fn check_union_fields(tcx: TyCtxt<'_>, span: Span, item_def_id: LocalDefId) -> b\n         let param_env = tcx.param_env(item_def_id);\n         for field in fields {\n             let field_ty = field.ty(tcx, substs);\n-            // We are currently checking the type this field came from, so it must be local.\n-            let field_span = tcx.hir().span_if_local(field.did).unwrap();\n             if field_ty.needs_drop(tcx, param_env) {\n+                let (field_span, ty_span) = match tcx.hir().get_if_local(field.did) {\n+                    // We are currently checking the type this field came from, so it must be local.\n+                    Some(Node::Field(field)) => (field.span, field.ty.span),\n+                    _ => unreachable!(\"mir field has to correspond to hir field\"),\n+                };\n                 struct_span_err!(\n                     tcx.sess,\n                     field_span,\n                     E0740,\n                     \"unions may not contain fields that need dropping\"\n                 )\n-                .span_note(field_span, \"`std::mem::ManuallyDrop` can be used to wrap the type\")\n+                .multipart_suggestion_verbose(\n+                    \"wrap the type with `std::mem::ManuallyDrop` and ensure it is manually dropped\",\n+                    vec![\n+                        (ty_span.shrink_to_lo(), format!(\"std::mem::ManuallyDrop<\")),\n+                        (ty_span.shrink_to_hi(), \">\".into()),\n+                    ],\n+                    Applicability::MaybeIncorrect,\n+                )\n                 .emit();\n                 return false;\n             }"}, {"sha": "0050ac99cb19a8c32ac804792a94b2ec2b099783", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c9c4b5d7276297679387189d96a952f2b760e7ad/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9c4b5d7276297679387189d96a952f2b760e7ad/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=c9c4b5d7276297679387189d96a952f2b760e7ad", "patch": "@@ -1641,19 +1641,38 @@ fn report_bivariance(tcx: TyCtxt<'_>, param: &rustc_hir::GenericParam<'_>) {\n \n /// Feature gates RFC 2056 -- trivial bounds, checking for global bounds that\n /// aren't true.\n-fn check_false_global_bounds(fcx: &FnCtxt<'_, '_>, span: Span, id: hir::HirId) {\n+fn check_false_global_bounds(fcx: &FnCtxt<'_, '_>, mut span: Span, id: hir::HirId) {\n     let empty_env = ty::ParamEnv::empty();\n \n     let def_id = fcx.tcx.hir().local_def_id(id);\n-    let predicates = fcx.tcx.predicates_of(def_id).predicates.iter().map(|(p, _)| *p);\n+    let predicates_with_span =\n+        fcx.tcx.predicates_of(def_id).predicates.iter().map(|(p, span)| (*p, *span));\n     // Check elaborated bounds.\n-    let implied_obligations = traits::elaborate_predicates(fcx.tcx, predicates);\n+    let implied_obligations = traits::elaborate_predicates_with_span(fcx.tcx, predicates_with_span);\n \n     for obligation in implied_obligations {\n         let pred = obligation.predicate;\n         // Match the existing behavior.\n         if pred.is_global(fcx.tcx) && !pred.has_late_bound_regions() {\n             let pred = fcx.normalize_associated_types_in(span, pred);\n+            let hir_node = fcx.tcx.hir().find(id);\n+\n+            // only use the span of the predicate clause (#90869)\n+\n+            if let Some(hir::Generics { where_clause, .. }) =\n+                hir_node.and_then(|node| node.generics())\n+            {\n+                let obligation_span = obligation.cause.span(fcx.tcx);\n+\n+                span = where_clause\n+                    .predicates\n+                    .iter()\n+                    // There seems to be no better way to find out which predicate we are in\n+                    .find(|pred| pred.span().contains(obligation_span))\n+                    .map(|pred| pred.span())\n+                    .unwrap_or(obligation_span);\n+            }\n+\n             let obligation = traits::Obligation::new(\n                 traits::ObligationCause::new(span, id, traits::TrivialBound),\n                 empty_env,"}, {"sha": "4989244b50e27e4638631fa36d2d80092023f95f", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c9c4b5d7276297679387189d96a952f2b760e7ad/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9c4b5d7276297679387189d96a952f2b760e7ad/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=c9c4b5d7276297679387189d96a952f2b760e7ad", "patch": "@@ -1444,6 +1444,34 @@ impl<T, A: Allocator> Vec<T, A> {\n     pub fn retain<F>(&mut self, mut f: F)\n     where\n         F: FnMut(&T) -> bool,\n+    {\n+        self.retain_mut(|elem| f(elem));\n+    }\n+\n+    /// Retains only the elements specified by the predicate, passing a mutable reference to it.\n+    ///\n+    /// In other words, remove all elements `e` such that `f(&mut e)` returns `false`.\n+    /// This method operates in place, visiting each element exactly once in the\n+    /// original order, and preserves the order of the retained elements.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(vec_retain_mut)]\n+    ///\n+    /// let mut vec = vec![1, 2, 3, 4];\n+    /// vec.retain_mut(|x| if *x > 3 {\n+    ///     false\n+    /// } else {\n+    ///     *x += 1;\n+    ///     true\n+    /// });\n+    /// assert_eq!(vec, [2, 3, 4]);\n+    /// ```\n+    #[unstable(feature = \"vec_retain_mut\", issue = \"90829\")]\n+    pub fn retain_mut<F>(&mut self, mut f: F)\n+    where\n+        F: FnMut(&mut T) -> bool,\n     {\n         let original_len = self.len();\n         // Avoid double drop if the drop guard is not executed,\n@@ -1496,7 +1524,7 @@ impl<T, A: Allocator> Vec<T, A> {\n             g: &mut BackshiftOnDrop<'_, T, A>,\n         ) -> bool\n         where\n-            F: FnMut(&T) -> bool,\n+            F: FnMut(&mut T) -> bool,\n         {\n             // SAFETY: Unchecked element must be valid.\n             let cur = unsafe { &mut *g.v.as_mut_ptr().add(g.processed_len) };"}, {"sha": "eedea6562bd4db2ca8d42c8dbd71354c10b10813", "filename": "library/core/src/panicking.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9c4b5d7276297679387189d96a952f2b760e7ad/library%2Fcore%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9c4b5d7276297679387189d96a952f2b760e7ad/library%2Fcore%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanicking.rs?ref=c9c4b5d7276297679387189d96a952f2b760e7ad", "patch": "@@ -36,6 +36,7 @@ use crate::panic::{Location, PanicInfo};\n #[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n #[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n #[track_caller]\n+#[rustc_const_unstable(feature = \"core_panic\", issue = \"none\")]\n #[lang = \"panic\"] // needed by codegen for panic on overflow and other `Assert` MIR terminators\n pub const fn panic(expr: &'static str) -> ! {\n     // Use Arguments::new_v1 instead of format_args!(\"{}\", expr) to potentially"}, {"sha": "7330c86a11a29502eb477ed2ad79b236fccc2e12", "filename": "library/core/src/time.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9c4b5d7276297679387189d96a952f2b760e7ad/library%2Fcore%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9c4b5d7276297679387189d96a952f2b760e7ad/library%2Fcore%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftime.rs?ref=c9c4b5d7276297679387189d96a952f2b760e7ad", "patch": "@@ -727,7 +727,7 @@ impl Duration {\n     pub const fn from_secs_f64(secs: f64) -> Duration {\n         match Duration::try_from_secs_f64(secs) {\n             Ok(v) => v,\n-            Err(e) => crate::panicking::panic(e.description()),\n+            Err(e) => panic!(\"{}\", e.description()),\n         }\n     }\n \n@@ -788,7 +788,7 @@ impl Duration {\n     pub const fn from_secs_f32(secs: f32) -> Duration {\n         match Duration::try_from_secs_f32(secs) {\n             Ok(v) => v,\n-            Err(e) => crate::panicking::panic(e.description()),\n+            Err(e) => panic!(\"{}\", e.description()),\n         }\n     }\n "}, {"sha": "af3810e91aeb05ccf0227d783d0f43d761a82ee9", "filename": "src/test/ui/closures/closure-bounds-static-cant-capture-borrowed.nll.stderr", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-static-cant-capture-borrowed.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-static-cant-capture-borrowed.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-static-cant-capture-borrowed.nll.stderr?ref=c9c4b5d7276297679387189d96a952f2b760e7ad", "patch": "@@ -1,11 +1,18 @@\n-error[E0621]: explicit lifetime required in the type of `x`\n+error[E0521]: borrowed data escapes outside of function\n   --> $DIR/closure-bounds-static-cant-capture-borrowed.rs:5:5\n    |\n+LL |   fn foo(x: &()) {\n+   |          -  - let's call the lifetime of this reference `'1`\n+   |          |\n+   |          `x` is a reference that is only valid in the function body\n LL | /     bar(|| {\n LL | |\n LL | |         let _ = x;\n LL | |     })\n-   | |______^ lifetime `'static` required\n+   | |      ^\n+   | |      |\n+   | |______`x` escapes the function body here\n+   |        argument requires that `'1` must outlive `'static`\n \n error[E0373]: closure may outlive the current function, but it borrows `x`, which is owned by the current function\n   --> $DIR/closure-bounds-static-cant-capture-borrowed.rs:5:9\n@@ -31,5 +38,5 @@ LL |     bar(move || {\n \n error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0373, E0621.\n+Some errors have detailed explanations: E0373, E0521.\n For more information about an error, try `rustc --explain E0373`."}, {"sha": "cbdc8b7deef382ab109390cc126ed6e0836a61d5", "filename": "src/test/ui/closures/closure-bounds-static-cant-capture-borrowed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-static-cant-capture-borrowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-static-cant-capture-borrowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-static-cant-capture-borrowed.rs?ref=c9c4b5d7276297679387189d96a952f2b760e7ad", "patch": "@@ -3,7 +3,7 @@ fn bar<F>(blk: F) where F: FnOnce() + 'static {\n \n fn foo(x: &()) {\n     bar(|| {\n-        //~^ ERROR explicit lifetime required in the type of `x` [E0621]\n+        //~^ ERROR `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement [E0759]\n         let _ = x;\n     })\n }"}, {"sha": "d761abdfc6a3416fc38a9cd2dbecbac793c4ed38", "filename": "src/test/ui/closures/closure-bounds-static-cant-capture-borrowed.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-static-cant-capture-borrowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-static-cant-capture-borrowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-static-cant-capture-borrowed.stderr?ref=c9c4b5d7276297679387189d96a952f2b760e7ad", "patch": "@@ -1,9 +1,21 @@\n-error[E0621]: explicit lifetime required in the type of `x`\n+error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n+  --> $DIR/closure-bounds-static-cant-capture-borrowed.rs:5:9\n+   |\n+LL |   fn foo(x: &()) {\n+   |             --- this data with an anonymous lifetime `'_`...\n+LL |       bar(|| {\n+   |  _________^\n+LL | |\n+LL | |         let _ = x;\n+LL | |     })\n+   | |_____^ ...is captured here...\n+   |\n+note: ...and is required to live as long as `'static` here\n   --> $DIR/closure-bounds-static-cant-capture-borrowed.rs:5:5\n    |\n LL |     bar(|| {\n-   |     ^^^ lifetime `'static` required\n+   |     ^^^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0621`.\n+For more information about this error, try `rustc --explain E0759`."}, {"sha": "18bb6f6bc1edc4884d65cd5155f87cbdbf94ebdc", "filename": "src/test/ui/const-generics/issues/issue-67185-2.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.rs?ref=c9c4b5d7276297679387189d96a952f2b760e7ad", "patch": "@@ -9,11 +9,10 @@ trait Bar {}\n impl Bar for [u16; 4] {}\n impl Bar for [[u16; 3]; 3] {}\n \n-trait Foo  //~ ERROR the trait bound `[u16; 3]: Bar` is not satisfied [E0277]\n-           //~^ ERROR the trait bound `[[u16; 3]; 2]: Bar` is not satisfied [E0277]\n-    where\n-        [<u8 as Baz>::Quaks; 2]: Bar,\n-        <u8 as Baz>::Quaks: Bar,\n+trait Foo\n+where\n+    [<u8 as Baz>::Quaks; 2]: Bar, //~ ERROR the trait bound `[[u16; 3]; 2]: Bar` is not satisfied [E0277]\n+    <u8 as Baz>::Quaks: Bar,  //~ ERROR the trait bound `[u16; 3]: Bar` is not satisfied [E0277]\n {\n }\n "}, {"sha": "89aa3d395e25bb8eae63133c28f02e1ee774cad5", "filename": "src/test/ui/const-generics/issues/issue-67185-2.stderr", "status": "modified", "additions": 24, "deletions": 36, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.stderr?ref=c9c4b5d7276297679387189d96a952f2b760e7ad", "patch": "@@ -1,14 +1,8 @@\n error[E0277]: the trait bound `[u16; 3]: Bar` is not satisfied\n-  --> $DIR/issue-67185-2.rs:12:1\n+  --> $DIR/issue-67185-2.rs:15:5\n    |\n-LL | / trait Foo\n-LL | |\n-LL | |     where\n-LL | |         [<u8 as Baz>::Quaks; 2]: Bar,\n-LL | |         <u8 as Baz>::Quaks: Bar,\n-LL | | {\n-LL | | }\n-   | |_^ the trait `Bar` is not implemented for `[u16; 3]`\n+LL |     <u8 as Baz>::Quaks: Bar,\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ the trait `Bar` is not implemented for `[u16; 3]`\n    |\n    = help: the following implementations were found:\n              <[[u16; 3]; 3] as Bar>\n@@ -17,16 +11,10 @@ LL | | }\n    = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n \n error[E0277]: the trait bound `[[u16; 3]; 2]: Bar` is not satisfied\n-  --> $DIR/issue-67185-2.rs:12:1\n+  --> $DIR/issue-67185-2.rs:14:5\n    |\n-LL | / trait Foo\n-LL | |\n-LL | |     where\n-LL | |         [<u8 as Baz>::Quaks; 2]: Bar,\n-LL | |         <u8 as Baz>::Quaks: Bar,\n-LL | | {\n-LL | | }\n-   | |_^ the trait `Bar` is not implemented for `[[u16; 3]; 2]`\n+LL |     [<u8 as Baz>::Quaks; 2]: Bar,\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Bar` is not implemented for `[[u16; 3]; 2]`\n    |\n    = help: the following implementations were found:\n              <[[u16; 3]; 3] as Bar>\n@@ -35,7 +23,7 @@ LL | | }\n    = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n \n error[E0277]: the trait bound `[u16; 3]: Bar` is not satisfied\n-  --> $DIR/issue-67185-2.rs:22:6\n+  --> $DIR/issue-67185-2.rs:21:6\n    |\n LL | impl Foo for FooImpl {}\n    |      ^^^ the trait `Bar` is not implemented for `[u16; 3]`\n@@ -44,16 +32,16 @@ LL | impl Foo for FooImpl {}\n              <[[u16; 3]; 3] as Bar>\n              <[u16; 4] as Bar>\n note: required by a bound in `Foo`\n-  --> $DIR/issue-67185-2.rs:16:29\n+  --> $DIR/issue-67185-2.rs:15:25\n    |\n LL | trait Foo\n    |       --- required by a bound in this\n ...\n-LL |         <u8 as Baz>::Quaks: Bar,\n-   |                             ^^^ required by this bound in `Foo`\n+LL |     <u8 as Baz>::Quaks: Bar,\n+   |                         ^^^ required by this bound in `Foo`\n \n error[E0277]: the trait bound `[[u16; 3]; 2]: Bar` is not satisfied\n-  --> $DIR/issue-67185-2.rs:22:6\n+  --> $DIR/issue-67185-2.rs:21:6\n    |\n LL | impl Foo for FooImpl {}\n    |      ^^^ the trait `Bar` is not implemented for `[[u16; 3]; 2]`\n@@ -62,16 +50,16 @@ LL | impl Foo for FooImpl {}\n              <[[u16; 3]; 3] as Bar>\n              <[u16; 4] as Bar>\n note: required by a bound in `Foo`\n-  --> $DIR/issue-67185-2.rs:15:34\n+  --> $DIR/issue-67185-2.rs:14:30\n    |\n LL | trait Foo\n    |       --- required by a bound in this\n-...\n-LL |         [<u8 as Baz>::Quaks; 2]: Bar,\n-   |                                  ^^^ required by this bound in `Foo`\n+LL | where\n+LL |     [<u8 as Baz>::Quaks; 2]: Bar,\n+   |                              ^^^ required by this bound in `Foo`\n \n error[E0277]: the trait bound `[[u16; 3]; 2]: Bar` is not satisfied\n-  --> $DIR/issue-67185-2.rs:26:14\n+  --> $DIR/issue-67185-2.rs:25:14\n    |\n LL | fn f(_: impl Foo) {}\n    |              ^^^ the trait `Bar` is not implemented for `[[u16; 3]; 2]`\n@@ -80,16 +68,16 @@ LL | fn f(_: impl Foo) {}\n              <[[u16; 3]; 3] as Bar>\n              <[u16; 4] as Bar>\n note: required by a bound in `Foo`\n-  --> $DIR/issue-67185-2.rs:15:34\n+  --> $DIR/issue-67185-2.rs:14:30\n    |\n LL | trait Foo\n    |       --- required by a bound in this\n-...\n-LL |         [<u8 as Baz>::Quaks; 2]: Bar,\n-   |                                  ^^^ required by this bound in `Foo`\n+LL | where\n+LL |     [<u8 as Baz>::Quaks; 2]: Bar,\n+   |                              ^^^ required by this bound in `Foo`\n \n error[E0277]: the trait bound `[u16; 3]: Bar` is not satisfied\n-  --> $DIR/issue-67185-2.rs:26:14\n+  --> $DIR/issue-67185-2.rs:25:14\n    |\n LL | fn f(_: impl Foo) {}\n    |              ^^^ the trait `Bar` is not implemented for `[u16; 3]`\n@@ -98,13 +86,13 @@ LL | fn f(_: impl Foo) {}\n              <[[u16; 3]; 3] as Bar>\n              <[u16; 4] as Bar>\n note: required by a bound in `Foo`\n-  --> $DIR/issue-67185-2.rs:16:29\n+  --> $DIR/issue-67185-2.rs:15:25\n    |\n LL | trait Foo\n    |       --- required by a bound in this\n ...\n-LL |         <u8 as Baz>::Quaks: Bar,\n-   |                             ^^^ required by this bound in `Foo`\n+LL |     <u8 as Baz>::Quaks: Bar,\n+   |                         ^^^ required by this bound in `Foo`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "94cf64fff1999a5a2d2ada2292d8b74d946bae3f", "filename": "src/test/ui/consts/const-eval/const_panic_stability.e2018.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_stability.e2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_stability.e2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_stability.e2018.stderr?ref=c9c4b5d7276297679387189d96a952f2b760e7ad", "patch": "@@ -0,0 +1,16 @@\n+warning: panic message is not a string literal\n+  --> $DIR/const_panic_stability.rs:14:12\n+   |\n+LL |     panic!({ \"foo\" });\n+   |            ^^^^^^^^^\n+   |\n+   = note: `#[warn(non_fmt_panics)]` on by default\n+   = note: this usage of panic!() is deprecated; it will be a hard error in Rust 2021\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n+help: add a \"{}\" format string to Display the message\n+   |\n+LL |     panic!(\"{}\", { \"foo\" });\n+   |            +++++\n+\n+warning: 1 warning emitted\n+"}, {"sha": "9e8179181fd09cd4b1cc53e248c47b27a70876c5", "filename": "src/test/ui/consts/const-eval/const_panic_stability.e2021.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_stability.e2021.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_stability.e2021.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_stability.e2021.stderr?ref=c9c4b5d7276297679387189d96a952f2b760e7ad", "patch": "@@ -0,0 +1,13 @@\n+error: format argument must be a string literal\n+  --> $DIR/const_panic_stability.rs:14:12\n+   |\n+LL |     panic!({ \"foo\" });\n+   |            ^^^^^^^^^\n+   |\n+help: you might be missing a string literal to format with\n+   |\n+LL |     panic!(\"{}\", { \"foo\" });\n+   |            +++++\n+\n+error: aborting due to previous error\n+"}, {"sha": "1aee6f27e2752384be92aa767d8ab27332b1553e", "filename": "src/test/ui/consts/const-eval/const_panic_stability.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_stability.rs?ref=c9c4b5d7276297679387189d96a952f2b760e7ad", "patch": "@@ -0,0 +1,17 @@\n+// revisions: e2018 e2021\n+//[e2018] edition:2018\n+//[e2021] edition:2021\n+//[e2018] check-pass\n+#![crate_type = \"lib\"]\n+#![stable(feature = \"foo\", since = \"1.0.0\")]\n+#![feature(staged_api)]\n+\n+#[stable(feature = \"foo\", since = \"1.0.0\")]\n+#[rustc_const_stable(feature = \"foo\", since = \"1.0.0\")]\n+const fn foo() {\n+    assert!(false);\n+    assert!(false, \"foo\");\n+    panic!({ \"foo\" });\n+    //[e2018]~^ WARNING panic message is not a string literal\n+    //[e2021]~^^ ERROR format argument must be a string literal\n+}"}, {"sha": "c38a5001ac86d18c30d068eca0fa0ac0cd055424", "filename": "src/test/ui/cross/cross-fn-cache-hole.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Fcross%2Fcross-fn-cache-hole.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Fcross%2Fcross-fn-cache-hole.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcross%2Fcross-fn-cache-hole.rs?ref=c9c4b5d7276297679387189d96a952f2b760e7ad", "patch": "@@ -12,8 +12,8 @@ trait Bar<X> { }\n \n // We don't always check where clauses for sanity, but in this case\n // wfcheck does report an error here:\n-fn vacuous<A>() //~ ERROR the trait bound `i32: Bar<u32>` is not satisfied\n-    where i32: Foo<u32, A>\n+fn vacuous<A>()\n+    where i32: Foo<u32, A> //~ ERROR the trait bound `i32: Bar<u32>` is not satisfied\n {\n     // ... the original intention was to check that we don't use that\n     // vacuous where clause (which could never be satisfied) to accept"}, {"sha": "7e15562b0816b38759feaa4f8b5a99f776bc0f21", "filename": "src/test/ui/cross/cross-fn-cache-hole.stderr", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Fcross%2Fcross-fn-cache-hole.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Fcross%2Fcross-fn-cache-hole.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcross%2Fcross-fn-cache-hole.stderr?ref=c9c4b5d7276297679387189d96a952f2b760e7ad", "patch": "@@ -1,14 +1,8 @@\n error[E0277]: the trait bound `i32: Bar<u32>` is not satisfied\n-  --> $DIR/cross-fn-cache-hole.rs:15:1\n+  --> $DIR/cross-fn-cache-hole.rs:16:11\n    |\n-LL | / fn vacuous<A>()\n-LL | |     where i32: Foo<u32, A>\n-LL | | {\n-LL | |     // ... the original intention was to check that we don't use that\n-...  |\n-LL | |     require::<i32, u32>();\n-LL | | }\n-   | |_^ the trait `Bar<u32>` is not implemented for `i32`\n+LL |     where i32: Foo<u32, A>\n+   |           ^^^^^^^^^^^^^^^^ the trait `Bar<u32>` is not implemented for `i32`\n    |\n    = help: see issue #48214\n    = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable"}, {"sha": "28c49c33bf6b5b41caee35a8b9792aaa5e26f458", "filename": "src/test/ui/feature-gates/feature-gate-trivial_bounds.stderr", "status": "modified", "additions": 28, "deletions": 48, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trivial_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trivial_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trivial_bounds.stderr?ref=c9c4b5d7276297679387189d96a952f2b760e7ad", "patch": "@@ -1,110 +1,92 @@\n error[E0277]: the trait bound `i32: Foo` is not satisfied\n-  --> $DIR/feature-gate-trivial_bounds.rs:10:1\n+  --> $DIR/feature-gate-trivial_bounds.rs:10:14\n    |\n LL | enum E where i32: Foo { V }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `i32`\n+   |              ^^^^^^^^ the trait `Foo` is not implemented for `i32`\n    |\n    = help: see issue #48214\n    = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n \n error[E0277]: the trait bound `i32: Foo` is not satisfied\n-  --> $DIR/feature-gate-trivial_bounds.rs:12:1\n+  --> $DIR/feature-gate-trivial_bounds.rs:12:16\n    |\n LL | struct S where i32: Foo;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `i32`\n+   |                ^^^^^^^^ the trait `Foo` is not implemented for `i32`\n    |\n    = help: see issue #48214\n    = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n \n error[E0277]: the trait bound `i32: Foo` is not satisfied\n-  --> $DIR/feature-gate-trivial_bounds.rs:14:1\n+  --> $DIR/feature-gate-trivial_bounds.rs:14:15\n    |\n LL | trait T where i32: Foo {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `i32`\n+   |               ^^^^^^^^ the trait `Foo` is not implemented for `i32`\n    |\n    = help: see issue #48214\n    = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n \n error[E0277]: the trait bound `i32: Foo` is not satisfied\n-  --> $DIR/feature-gate-trivial_bounds.rs:16:1\n+  --> $DIR/feature-gate-trivial_bounds.rs:16:15\n    |\n LL | union U where i32: Foo { f: i32 }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `i32`\n+   |               ^^^^^^^^ the trait `Foo` is not implemented for `i32`\n    |\n    = help: see issue #48214\n    = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n \n error[E0277]: the trait bound `i32: Foo` is not satisfied\n-  --> $DIR/feature-gate-trivial_bounds.rs:20:1\n+  --> $DIR/feature-gate-trivial_bounds.rs:20:23\n    |\n-LL | / impl Foo for () where i32: Foo {\n-LL | |     fn test(&self) {\n-LL | |         3i32.test();\n-LL | |         Foo::test(&4i32);\n-LL | |         generic_function(5i32);\n-LL | |     }\n-LL | | }\n-   | |_^ the trait `Foo` is not implemented for `i32`\n+LL | impl Foo for () where i32: Foo {\n+   |                       ^^^^^^^^ the trait `Foo` is not implemented for `i32`\n    |\n    = help: see issue #48214\n    = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n \n error[E0277]: the trait bound `i32: Foo` is not satisfied\n-  --> $DIR/feature-gate-trivial_bounds.rs:28:1\n+  --> $DIR/feature-gate-trivial_bounds.rs:28:14\n    |\n-LL | / fn f() where i32: Foo\n-LL | | {\n-LL | |     let s = S;\n-LL | |     3i32.test();\n-LL | |     Foo::test(&4i32);\n-LL | |     generic_function(5i32);\n-LL | | }\n-   | |_^ the trait `Foo` is not implemented for `i32`\n+LL | fn f() where i32: Foo\n+   |              ^^^^^^^^ the trait `Foo` is not implemented for `i32`\n    |\n    = help: see issue #48214\n    = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n \n error[E0277]: the trait bound `String: Neg` is not satisfied\n-  --> $DIR/feature-gate-trivial_bounds.rs:36:1\n+  --> $DIR/feature-gate-trivial_bounds.rs:36:38\n    |\n-LL | / fn use_op(s: String) -> String where String: ::std::ops::Neg<Output=String> {\n-LL | |     -s\n-LL | | }\n-   | |_^ the trait `Neg` is not implemented for `String`\n+LL | fn use_op(s: String) -> String where String: ::std::ops::Neg<Output=String> {\n+   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Neg` is not implemented for `String`\n    |\n    = help: see issue #48214\n    = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n \n error[E0277]: `i32` is not an iterator\n-  --> $DIR/feature-gate-trivial_bounds.rs:40:1\n+  --> $DIR/feature-gate-trivial_bounds.rs:40:20\n    |\n-LL | / fn use_for() where i32: Iterator {\n-LL | |     for _ in 2i32 {}\n-LL | | }\n-   | |_^ `i32` is not an iterator\n+LL | fn use_for() where i32: Iterator {\n+   |                    ^^^^^^^^^^^^^ `i32` is not an iterator\n    |\n    = help: the trait `Iterator` is not implemented for `i32`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n    = help: see issue #48214\n    = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n-  --> $DIR/feature-gate-trivial_bounds.rs:52:1\n+  --> $DIR/feature-gate-trivial_bounds.rs:52:32\n    |\n LL | struct TwoStrs(str, str) where str: Sized;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |                                ^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `str`\n    = help: see issue #48214\n    = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n \n error[E0277]: the size for values of type `(dyn A + 'static)` cannot be known at compilation time\n-  --> $DIR/feature-gate-trivial_bounds.rs:55:1\n+  --> $DIR/feature-gate-trivial_bounds.rs:55:26\n    |\n-LL | / fn unsized_local() where Dst<dyn A>: Sized {\n-LL | |     let x: Dst<dyn A> = *(Box::new(Dst { x: 1 }) as Box<Dst<dyn A>>);\n-LL | | }\n-   | |_^ doesn't have a size known at compile-time\n+LL | fn unsized_local() where Dst<dyn A>: Sized {\n+   |                          ^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Dst<(dyn A + 'static)>`, the trait `Sized` is not implemented for `(dyn A + 'static)`\n note: required because it appears within the type `Dst<(dyn A + 'static)>`\n@@ -116,12 +98,10 @@ LL | struct Dst<X: ?Sized> {\n    = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n-  --> $DIR/feature-gate-trivial_bounds.rs:59:1\n+  --> $DIR/feature-gate-trivial_bounds.rs:59:30\n    |\n-LL | / fn return_str() -> str where str: Sized {\n-LL | |     *\"Sized\".to_string().into_boxed_str()\n-LL | | }\n-   | |_^ doesn't have a size known at compile-time\n+LL | fn return_str() -> str where str: Sized {\n+   |                              ^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `str`\n    = help: see issue #48214"}, {"sha": "0967cb7ba8bd28496eb354928e22222250af39a2", "filename": "src/test/ui/feature-gates/feature-gate-untagged_unions.stderr", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-untagged_unions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-untagged_unions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-untagged_unions.stderr?ref=c9c4b5d7276297679387189d96a952f2b760e7ad", "patch": "@@ -13,23 +13,21 @@ error[E0740]: unions may not contain fields that need dropping\n LL |     a: String,\n    |     ^^^^^^^^^\n    |\n-note: `std::mem::ManuallyDrop` can be used to wrap the type\n-  --> $DIR/feature-gate-untagged_unions.rs:16:5\n+help: wrap the type with `std::mem::ManuallyDrop` and ensure it is manually dropped\n    |\n-LL |     a: String,\n-   |     ^^^^^^^^^\n+LL |     a: std::mem::ManuallyDrop<String>,\n+   |        +++++++++++++++++++++++      +\n \n error[E0740]: unions may not contain fields that need dropping\n   --> $DIR/feature-gate-untagged_unions.rs:24:5\n    |\n LL |     a: T,\n    |     ^^^^\n    |\n-note: `std::mem::ManuallyDrop` can be used to wrap the type\n-  --> $DIR/feature-gate-untagged_unions.rs:24:5\n+help: wrap the type with `std::mem::ManuallyDrop` and ensure it is manually dropped\n    |\n-LL |     a: T,\n-   |     ^^^^\n+LL |     a: std::mem::ManuallyDrop<T>,\n+   |        +++++++++++++++++++++++ +\n \n error: aborting due to 3 previous errors\n "}, {"sha": "b4530cfda2b54f7f21da2791d014d8dcae681d7d", "filename": "src/test/ui/generator/generator-region-requirements.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.nll.stderr?ref=c9c4b5d7276297679387189d96a952f2b760e7ad", "patch": "@@ -0,0 +1,11 @@\n+error: lifetime may not live long enough\n+  --> $DIR/generator-region-requirements.rs:13:51\n+   |\n+LL | fn dangle(x: &mut i32) -> &'static mut i32 {\n+   |              - let's call the lifetime of this reference `'1`\n+...\n+LL |             GeneratorState::Complete(c) => return c,\n+   |                                                   ^ returning this value requires that `'1` must outlive `'static`\n+\n+error: aborting due to previous error\n+"}, {"sha": "cec68509a66e6e1ac91a907ef7d4a0be68dbc05a", "filename": "src/test/ui/generator/generator-region-requirements.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.rs?ref=c9c4b5d7276297679387189d96a952f2b760e7ad", "patch": "@@ -6,11 +6,11 @@ fn dangle(x: &mut i32) -> &'static mut i32 {\n     let mut g = || {\n         yield;\n         x\n+        //~^ ERROR `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement [E0759]\n     };\n     loop {\n         match Pin::new(&mut g).resume(()) {\n             GeneratorState::Complete(c) => return c,\n-            //~^ ERROR explicit lifetime required\n             GeneratorState::Yielded(_) => (),\n         }\n     }"}, {"sha": "b6b9db22426eb40cf799c95eb8c6c3928e22006a", "filename": "src/test/ui/generator/generator-region-requirements.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.stderr?ref=c9c4b5d7276297679387189d96a952f2b760e7ad", "patch": "@@ -1,9 +1,15 @@\n-error[E0621]: explicit lifetime required in the type of `x`\n-  --> $DIR/generator-region-requirements.rs:12:51\n+error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n+  --> $DIR/generator-region-requirements.rs:8:9\n    |\n+LL | fn dangle(x: &mut i32) -> &'static mut i32 {\n+   |              -------- this data with an anonymous lifetime `'_`...\n+...\n+LL |         x\n+   |         ^ ...is captured here...\n+...\n LL |             GeneratorState::Complete(c) => return c,\n-   |                                                   ^ lifetime `'static` required\n+   |                                                   - ...and is required to live as long as `'static` here\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0621`.\n+For more information about this error, try `rustc --explain E0759`."}, {"sha": "4620aa34e84d926054c60d0f638ab12ebfec5c01", "filename": "src/test/ui/generic-associated-types/projection-type-lifetime-mismatch.nll.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.nll.stderr?ref=c9c4b5d7276297679387189d96a952f2b760e7ad", "patch": "@@ -0,0 +1,26 @@\n+error: lifetime may not live long enough\n+  --> $DIR/projection-type-lifetime-mismatch.rs:17:5\n+   |\n+LL | fn f(x: &impl for<'a> X<Y<'a> = &'a ()>) -> &'static () {\n+   |         - let's call the lifetime of this reference `'1`\n+LL |     x.m()\n+   |     ^^^^^ returning this value requires that `'1` must outlive `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/projection-type-lifetime-mismatch.rs:22:5\n+   |\n+LL | fn g<T: for<'a> X<Y<'a> = &'a ()>>(x: &T) -> &'static () {\n+   |                                       - let's call the lifetime of this reference `'1`\n+LL |     x.m()\n+   |     ^^^^^ returning this value requires that `'1` must outlive `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/projection-type-lifetime-mismatch.rs:27:5\n+   |\n+LL | fn h(x: &()) -> &'static () {\n+   |         - let's call the lifetime of this reference `'1`\n+LL |     x.m()\n+   |     ^^^^^ returning this value requires that `'1` must outlive `'static`\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "9b04fe233208ecae8458949dc9a5f7ee6c4686d5", "filename": "src/test/ui/generic-associated-types/projection-type-lifetime-mismatch.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.rs?ref=c9c4b5d7276297679387189d96a952f2b760e7ad", "patch": "@@ -15,17 +15,17 @@ impl X for () {\n \n fn f(x: &impl for<'a> X<Y<'a> = &'a ()>) -> &'static () {\n     x.m()\n-    //~^ ERROR explicit lifetime required\n+    //~^ ERROR `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement [E0759]\n }\n \n fn g<T: for<'a> X<Y<'a> = &'a ()>>(x: &T) -> &'static () {\n     x.m()\n-    //~^ ERROR explicit lifetime required\n+    //~^ ERROR `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement [E0759]\n }\n \n fn h(x: &()) -> &'static () {\n     x.m()\n-    //~^ ERROR explicit lifetime required\n+    //~^ ERROR `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement [E0759]\n }\n \n fn main() {"}, {"sha": "1ffd205652f666a70425ea5dd1ede0933fb7e629", "filename": "src/test/ui/generic-associated-types/projection-type-lifetime-mismatch.stderr", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.stderr?ref=c9c4b5d7276297679387189d96a952f2b760e7ad", "patch": "@@ -1,21 +1,27 @@\n-error[E0621]: explicit lifetime required in the type of `x`\n-  --> $DIR/projection-type-lifetime-mismatch.rs:17:5\n+error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n+  --> $DIR/projection-type-lifetime-mismatch.rs:17:7\n    |\n+LL | fn f(x: &impl for<'a> X<Y<'a> = &'a ()>) -> &'static () {\n+   |         ------------------------------- this data with an anonymous lifetime `'_`...\n LL |     x.m()\n-   |     ^^^^^ lifetime `'static` required\n+   |     --^-- ...is captured and required to live as long as `'static` here\n \n-error[E0621]: explicit lifetime required in the type of `x`\n-  --> $DIR/projection-type-lifetime-mismatch.rs:22:5\n+error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n+  --> $DIR/projection-type-lifetime-mismatch.rs:22:7\n    |\n+LL | fn g<T: for<'a> X<Y<'a> = &'a ()>>(x: &T) -> &'static () {\n+   |                                       -- this data with an anonymous lifetime `'_`...\n LL |     x.m()\n-   |     ^^^^^ lifetime `'static` required\n+   |     --^-- ...is captured and required to live as long as `'static` here\n \n-error[E0621]: explicit lifetime required in the type of `x`\n-  --> $DIR/projection-type-lifetime-mismatch.rs:27:5\n+error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n+  --> $DIR/projection-type-lifetime-mismatch.rs:27:7\n    |\n+LL | fn h(x: &()) -> &'static () {\n+   |         --- this data with an anonymous lifetime `'_`...\n LL |     x.m()\n-   |     ^^^^^ lifetime `'static` required\n+   |     --^-- ...is captured and required to live as long as `'static` here\n \n error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0621`.\n+For more information about this error, try `rustc --explain E0759`."}, {"sha": "38a219bbd7b5257e4a1b775053a03f57ce13ac5b", "filename": "src/test/ui/issues/issue-46983.nll.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Fissues%2Fissue-46983.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Fissues%2Fissue-46983.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46983.nll.stderr?ref=c9c4b5d7276297679387189d96a952f2b760e7ad", "patch": "@@ -0,0 +1,10 @@\n+error: lifetime may not live long enough\n+  --> $DIR/issue-46983.rs:2:5\n+   |\n+LL | fn foo(x: &u32) -> &'static u32 {\n+   |           - let's call the lifetime of this reference `'1`\n+LL |     &*x\n+   |     ^^^ returning this value requires that `'1` must outlive `'static`\n+\n+error: aborting due to previous error\n+"}, {"sha": "87ed89289447915cdef52f533d23ade0a403379f", "filename": "src/test/ui/issues/issue-46983.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Fissues%2Fissue-46983.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Fissues%2Fissue-46983.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46983.rs?ref=c9c4b5d7276297679387189d96a952f2b760e7ad", "patch": "@@ -1,6 +1,6 @@\n fn foo(x: &u32) -> &'static u32 {\n     &*x\n-    //~^ ERROR explicit lifetime required in the type of `x` [E0621]\n+    //~^ ERROR `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement [E0759]\n }\n \n fn main() {}"}, {"sha": "77fb130f5192e34d1a7c69abaa9e9853e42e70f4", "filename": "src/test/ui/issues/issue-46983.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Fissues%2Fissue-46983.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Fissues%2Fissue-46983.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46983.stderr?ref=c9c4b5d7276297679387189d96a952f2b760e7ad", "patch": "@@ -1,9 +1,11 @@\n-error[E0621]: explicit lifetime required in the type of `x`\n+error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n   --> $DIR/issue-46983.rs:2:5\n    |\n+LL | fn foo(x: &u32) -> &'static u32 {\n+   |           ---- this data with an anonymous lifetime `'_`...\n LL |     &*x\n-   |     ^^^ lifetime `'static` required\n+   |     ^^^ ...is captured and required to live as long as `'static` here\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0621`.\n+For more information about this error, try `rustc --explain E0759`."}, {"sha": "99e1e7217b45ce2318f07df0f0c37689a9858450", "filename": "src/test/ui/lifetimes/issue-90600-expected-return-static-indirect.nll.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Flifetimes%2Fissue-90600-expected-return-static-indirect.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Flifetimes%2Fissue-90600-expected-return-static-indirect.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-90600-expected-return-static-indirect.nll.stderr?ref=c9c4b5d7276297679387189d96a952f2b760e7ad", "patch": "@@ -0,0 +1,24 @@\n+error[E0597]: `foo` does not live long enough\n+  --> $DIR/issue-90600-expected-return-static-indirect.rs:7:32\n+   |\n+LL |     let refcell = RefCell::new(&mut foo);\n+   |                                ^^^^^^^^ borrowed value does not live long enough\n+LL |\n+LL |     let read = &refcell as &RefCell<dyn Read>;\n+   |                -------- cast requires that `foo` is borrowed for `'static`\n+...\n+LL | }\n+   | - `foo` dropped here while still borrowed\n+\n+error: lifetime may not live long enough\n+  --> $DIR/issue-90600-expected-return-static-indirect.rs:9:16\n+   |\n+LL | fn inner(mut foo: &[u8]) {\n+   |                   - let's call the lifetime of this reference `'1`\n+...\n+LL |     let read = &refcell as &RefCell<dyn Read>;\n+   |                ^^^^^^^^ cast requires that `'1` must outlive `'static`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "39996bbf43b3c5de940c2e999b4d5819714d49c2", "filename": "src/test/ui/lifetimes/issue-90600-expected-return-static-indirect.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Flifetimes%2Fissue-90600-expected-return-static-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Flifetimes%2Fissue-90600-expected-return-static-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-90600-expected-return-static-indirect.rs?ref=c9c4b5d7276297679387189d96a952f2b760e7ad", "patch": "@@ -0,0 +1,14 @@\n+use std::cell::RefCell;\n+use std::io::Read;\n+\n+fn main() {}\n+\n+fn inner(mut foo: &[u8]) {\n+    let refcell = RefCell::new(&mut foo);\n+    //~^ ERROR `foo` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement [E0759]\n+    let read = &refcell as &RefCell<dyn Read>;\n+\n+    read_thing(read);\n+}\n+\n+fn read_thing(refcell: &RefCell<dyn Read>) {}"}, {"sha": "3f65d3af725cf8d9b26adf0f015f55004587741f", "filename": "src/test/ui/lifetimes/issue-90600-expected-return-static-indirect.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Flifetimes%2Fissue-90600-expected-return-static-indirect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Flifetimes%2Fissue-90600-expected-return-static-indirect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-90600-expected-return-static-indirect.stderr?ref=c9c4b5d7276297679387189d96a952f2b760e7ad", "patch": "@@ -0,0 +1,14 @@\n+error[E0759]: `foo` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n+  --> $DIR/issue-90600-expected-return-static-indirect.rs:7:32\n+   |\n+LL | fn inner(mut foo: &[u8]) {\n+   |                   ----- this data with an anonymous lifetime `'_`...\n+LL |     let refcell = RefCell::new(&mut foo);\n+   |                                ^^^^^^^^ ...is captured here...\n+...\n+LL |     read_thing(read);\n+   |                ---- ...and is required to live as long as `'static` here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0759`."}, {"sha": "7d17af11573796bbf61e7c8cd5e61dbc05fbd0c3", "filename": "src/test/ui/lint/unused/unused-async.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Flint%2Funused%2Funused-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Flint%2Funused%2Funused-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Funused-async.rs?ref=c9c4b5d7276297679387189d96a952f2b760e7ad", "patch": "@@ -0,0 +1,43 @@\n+// edition:2018\n+// run-pass\n+#![allow(dead_code)]\n+\n+#[must_use]\n+//~^ WARNING `must_use`\n+async fn test() -> i32 {\n+    1\n+}\n+\n+\n+struct Wowee {}\n+\n+impl Wowee {\n+    #[must_use]\n+    //~^ WARNING `must_use`\n+    async fn test_method() -> i32 {\n+        1\n+    }\n+}\n+\n+/* FIXME(guswynn) update this test when async-fn-in-traits works\n+trait Doer {\n+    #[must_use]\n+    async fn test_trait_method() -> i32;\n+    WARNING must_use\n+    async fn test_other_trait() -> i32;\n+}\n+\n+impl Doer for Wowee {\n+    async fn test_trait_method() -> i32 {\n+        1\n+    }\n+    #[must_use]\n+    async fn test_other_trait() -> i32 {\n+        WARNING must_use\n+        1\n+    }\n+}\n+*/\n+\n+fn main() {\n+}"}, {"sha": "6bbc9e2bf00885e0e29534184371d8d7dc4fd74c", "filename": "src/test/ui/lint/unused/unused-async.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Flint%2Funused%2Funused-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Flint%2Funused%2Funused-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Funused-async.stderr?ref=c9c4b5d7276297679387189d96a952f2b760e7ad", "patch": "@@ -0,0 +1,26 @@\n+warning: `must_use` attribute on `async` functions applies to the anonymous `Future` returned by the function, not the value within\n+  --> $DIR/unused-async.rs:5:1\n+   |\n+LL |   #[must_use]\n+   |   ^^^^^^^^^^^\n+LL |\n+LL | / async fn test() -> i32 {\n+LL | |     1\n+LL | | }\n+   | |_- this attribute does nothing, the `Future`s returned by async functions are already `must_use`\n+   |\n+   = note: `#[warn(unused_attributes)]` on by default\n+\n+warning: `must_use` attribute on `async` functions applies to the anonymous `Future` returned by the function, not the value within\n+  --> $DIR/unused-async.rs:15:5\n+   |\n+LL |       #[must_use]\n+   |       ^^^^^^^^^^^\n+LL |\n+LL | /     async fn test_method() -> i32 {\n+LL | |         1\n+LL | |     }\n+   | |_____- this attribute does nothing, the `Future`s returned by async functions are already `must_use`\n+\n+warning: 2 warnings emitted\n+"}, {"sha": "c8f226f5238e98df3145a8475f12202a28c046ca", "filename": "src/test/ui/nll/closure-requirements/region-lbr-anon-does-not-outlive-static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-anon-does-not-outlive-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-anon-does-not-outlive-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-anon-does-not-outlive-static.rs?ref=c9c4b5d7276297679387189d96a952f2b760e7ad", "patch": "@@ -7,7 +7,7 @@\n \n fn foo(x: &u32) -> &'static u32 {\n     &*x\n-        //~^ ERROR explicit lifetime required in the type of `x`\n+    //~^ ERROR lifetime may not live long enough\n }\n \n fn main() { }"}, {"sha": "7034492cee09d153703a46990756c72e43a19eae", "filename": "src/test/ui/nll/closure-requirements/region-lbr-anon-does-not-outlive-static.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-anon-does-not-outlive-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-anon-does-not-outlive-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-anon-does-not-outlive-static.stderr?ref=c9c4b5d7276297679387189d96a952f2b760e7ad", "patch": "@@ -1,9 +1,10 @@\n-error[E0621]: explicit lifetime required in the type of `x`\n+error: lifetime may not live long enough\n   --> $DIR/region-lbr-anon-does-not-outlive-static.rs:9:5\n    |\n+LL | fn foo(x: &u32) -> &'static u32 {\n+   |           - let's call the lifetime of this reference `'1`\n LL |     &*x\n-   |     ^^^ lifetime `ReStatic` required\n+   |     ^^^ returning this value requires that `'1` must outlive `'static`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0621`."}, {"sha": "87ed0e642e998c0c2ccbf4dab80e3a21ddb304de", "filename": "src/test/ui/nll/guarantor-issue-46974.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Fnll%2Fguarantor-issue-46974.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Fnll%2Fguarantor-issue-46974.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fguarantor-issue-46974.rs?ref=c9c4b5d7276297679387189d96a952f2b760e7ad", "patch": "@@ -12,7 +12,7 @@ fn foo(s: &mut (i32,)) -> i32 {\n \n fn bar(s: &Box<(i32,)>) -> &'static i32 {\n     // FIXME(#46983): error message should be better\n-    &s.0 //~ ERROR explicit lifetime required in the type of `s` [E0621]\n+    &s.0 //~ ERROR lifetime may not live long enough\n }\n \n fn main() {"}, {"sha": "8245aadf82684e173267a7360df75668ad62b33d", "filename": "src/test/ui/nll/guarantor-issue-46974.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Fnll%2Fguarantor-issue-46974.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Fnll%2Fguarantor-issue-46974.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fguarantor-issue-46974.stderr?ref=c9c4b5d7276297679387189d96a952f2b760e7ad", "patch": "@@ -9,13 +9,15 @@ LL |     *s = (2,);\n LL |     *x\n    |     -- borrow later used here\n \n-error[E0621]: explicit lifetime required in the type of `s`\n+error: lifetime may not live long enough\n   --> $DIR/guarantor-issue-46974.rs:15:5\n    |\n+LL | fn bar(s: &Box<(i32,)>) -> &'static i32 {\n+   |           - let's call the lifetime of this reference `'1`\n+LL |     // FIXME(#46983): error message should be better\n LL |     &s.0\n-   |     ^^^^ lifetime `'static` required\n+   |     ^^^^ returning this value requires that `'1` must outlive `'static`\n \n error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0506, E0621.\n-For more information about an error, try `rustc --explain E0506`.\n+For more information about this error, try `rustc --explain E0506`."}, {"sha": "de5e09204b46298027efc90efd86a72f3899bf9c", "filename": "src/test/ui/parser/char/whitespace-character-literal.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Fparser%2Fchar%2Fwhitespace-character-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Fparser%2Fchar%2Fwhitespace-character-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fchar%2Fwhitespace-character-literal.rs?ref=c9c4b5d7276297679387189d96a952f2b760e7ad", "patch": "@@ -0,0 +1,10 @@\n+// This tests that the error generated when a character literal has multiple\n+// characters in it contains a note about non-printing characters.\n+\n+fn main() {\n+    let _hair_space_around = '\u200ax\u200b';\n+    //~^ ERROR: character literal may only contain one codepoint\n+    //~| NOTE: there are non-printing characters, the full sequence is `\\u{200a}x\\u{200b}`\n+    //~| HELP: consider removing the non-printing characters\n+    //~| SUGGESTION: x\n+}"}, {"sha": "d73de41a8099ba633043906c44f3ba9086d62100", "filename": "src/test/ui/parser/char/whitespace-character-literal.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Fparser%2Fchar%2Fwhitespace-character-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Fparser%2Fchar%2Fwhitespace-character-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fchar%2Fwhitespace-character-literal.stderr?ref=c9c4b5d7276297679387189d96a952f2b760e7ad", "patch": "@@ -0,0 +1,16 @@\n+error: character literal may only contain one codepoint\n+  --> $DIR/whitespace-character-literal.rs:5:30\n+   |\n+LL |     let _hair_space_around = '\u200ax\u200b';\n+   |                              ^--^\n+   |                               |\n+   |                               help: consider removing the non-printing characters: `x`\n+   |\n+note: there are non-printing characters, the full sequence is `\\u{200a}x\\u{200b}`\n+  --> $DIR/whitespace-character-literal.rs:5:31\n+   |\n+LL |     let _hair_space_around = '\u200ax\u200b';\n+   |                               ^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "d6cec03e0ff2ecf89b186fff09a8844903dd34d5", "filename": "src/test/ui/regions/regions-static-bound.ll.nll.stderr", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/faea820643f9acec1bb787941063393f9508a775/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.ll.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/faea820643f9acec1bb787941063393f9508a775/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.ll.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.ll.nll.stderr?ref=faea820643f9acec1bb787941063393f9508a775", "patch": "@@ -1,28 +0,0 @@\n-error: lifetime may not live long enough\n-  --> $DIR/regions-static-bound.rs:9:5\n-   |\n-LL | fn static_id_wrong_way<'a>(t: &'a ()) -> &'static () where 'static: 'a {\n-   |                        -- lifetime `'a` defined here\n-LL |     t //[ll]~ ERROR E0312\n-   |     ^ returning this value requires that `'a` must outlive `'static`\n-\n-error[E0621]: explicit lifetime required in the type of `u`\n-  --> $DIR/regions-static-bound.rs:14:5\n-   |\n-LL | fn error(u: &(), v: &()) {\n-   |             --- help: add explicit lifetime `'static` to the type of `u`: `&'static ()`\n-LL |     static_id(&u); //[ll]~ ERROR explicit lifetime required in the type of `u` [E0621]\n-   |     ^^^^^^^^^^^^^ lifetime `'static` required\n-\n-error[E0621]: explicit lifetime required in the type of `v`\n-  --> $DIR/regions-static-bound.rs:16:5\n-   |\n-LL | fn error(u: &(), v: &()) {\n-   |                     --- help: add explicit lifetime `'static` to the type of `v`: `&'static ()`\n-...\n-LL |     static_id_indirect(&v); //[ll]~ ERROR explicit lifetime required in the type of `v` [E0621]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ lifetime `'static` required\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0621`."}, {"sha": "a280c6f0a02d28ce7f40889ea450e4eb9dc60414", "filename": "src/test/ui/regions/regions-static-bound.migrate.nll.stderr", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/faea820643f9acec1bb787941063393f9508a775/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.migrate.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/faea820643f9acec1bb787941063393f9508a775/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.migrate.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.migrate.nll.stderr?ref=faea820643f9acec1bb787941063393f9508a775", "patch": "@@ -1,23 +0,0 @@\n-error: lifetime may not live long enough\n-  --> $DIR/regions-static-bound.rs:9:5\n-   |\n-LL | fn static_id_wrong_way<'a>(t: &'a ()) -> &'static () where 'static: 'a {\n-   |                        -- lifetime `'a` defined here\n-LL |     t\n-   |     ^ returning this value requires that `'a` must outlive `'static`\n-\n-error[E0621]: explicit lifetime required in the type of `u`\n-  --> $DIR/regions-static-bound.rs:14:5\n-   |\n-LL |     static_id(&u);\n-   |     ^^^^^^^^^^^^^ lifetime `'static` required\n-\n-error[E0621]: explicit lifetime required in the type of `v`\n-  --> $DIR/regions-static-bound.rs:16:5\n-   |\n-LL |     static_id_indirect(&v);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ lifetime `'static` required\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0621`."}, {"sha": "8f11e148220d6b9d1801cb195a4d32efc9653d58", "filename": "src/test/ui/regions/regions-static-bound.migrate.stderr", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/faea820643f9acec1bb787941063393f9508a775/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/faea820643f9acec1bb787941063393f9508a775/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.migrate.stderr?ref=faea820643f9acec1bb787941063393f9508a775", "patch": "@@ -1,29 +0,0 @@\n-error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n-  --> $DIR/regions-static-bound.rs:9:5\n-   |\n-LL |     t\n-   |     ^\n-   |\n-   = note: ...the reference is valid for the static lifetime...\n-note: ...but the borrowed content is only valid for the lifetime `'a` as defined here\n-  --> $DIR/regions-static-bound.rs:8:24\n-   |\n-LL | fn static_id_wrong_way<'a>(t: &'a ()) -> &'static () where 'static: 'a {\n-   |                        ^^\n-\n-error[E0621]: explicit lifetime required in the type of `u`\n-  --> $DIR/regions-static-bound.rs:14:5\n-   |\n-LL |     static_id(&u);\n-   |     ^^^^^^^^^ lifetime `'static` required\n-\n-error[E0621]: explicit lifetime required in the type of `v`\n-  --> $DIR/regions-static-bound.rs:16:5\n-   |\n-LL |     static_id_indirect(&v);\n-   |     ^^^^^^^^^^^^^^^^^^ lifetime `'static` required\n-\n-error: aborting due to 3 previous errors\n-\n-Some errors have detailed explanations: E0312, E0621.\n-For more information about an error, try `rustc --explain E0312`."}, {"sha": "699638c7ef9b23142eb303efdc02d3a00d14cf58", "filename": "src/test/ui/regions/regions-static-bound.nll.stderr", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.nll.stderr?ref=c9c4b5d7276297679387189d96a952f2b760e7ad", "patch": "@@ -1,23 +1,38 @@\n error: lifetime may not live long enough\n-  --> $DIR/regions-static-bound.rs:9:5\n+  --> $DIR/regions-static-bound.rs:6:5\n    |\n LL | fn static_id_wrong_way<'a>(t: &'a ()) -> &'static () where 'static: 'a {\n    |                        -- lifetime `'a` defined here\n LL |     t\n    |     ^ returning this value requires that `'a` must outlive `'static`\n \n-error[E0621]: explicit lifetime required in the type of `u`\n-  --> $DIR/regions-static-bound.rs:14:5\n+error[E0521]: borrowed data escapes outside of function\n+  --> $DIR/regions-static-bound.rs:10:5\n    |\n+LL | fn error(u: &(), v: &()) {\n+   |          -  - let's call the lifetime of this reference `'1`\n+   |          |\n+   |          `u` is a reference that is only valid in the function body\n LL |     static_id(&u);\n-   |     ^^^^^^^^^^^^^ lifetime `'static` required\n+   |     ^^^^^^^^^^^^^\n+   |     |\n+   |     `u` escapes the function body here\n+   |     argument requires that `'1` must outlive `'static`\n \n-error[E0621]: explicit lifetime required in the type of `v`\n-  --> $DIR/regions-static-bound.rs:16:5\n+error[E0521]: borrowed data escapes outside of function\n+  --> $DIR/regions-static-bound.rs:11:5\n    |\n+LL | fn error(u: &(), v: &()) {\n+   |                  -  - let's call the lifetime of this reference `'2`\n+   |                  |\n+   |                  `v` is a reference that is only valid in the function body\n+LL |     static_id(&u);\n LL |     static_id_indirect(&v);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ lifetime `'static` required\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |     |\n+   |     `v` escapes the function body here\n+   |     argument requires that `'2` must outlive `'static`\n \n error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0621`.\n+For more information about this error, try `rustc --explain E0521`."}, {"sha": "a977a8b36d0563babb348b4eb1b7af78a5cd0f29", "filename": "src/test/ui/regions/regions-static-bound.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.rs?ref=c9c4b5d7276297679387189d96a952f2b760e7ad", "patch": "@@ -1,20 +1,14 @@\n-// revisions: migrate nll\n-//[nll] compile-flags:-Zborrowck=mir\n-\n fn static_id<'a,'b>(t: &'a ()) -> &'static ()\n     where 'a: 'static { t }\n fn static_id_indirect<'a,'b>(t: &'a ()) -> &'static ()\n     where 'a: 'b, 'b: 'static { t }\n fn static_id_wrong_way<'a>(t: &'a ()) -> &'static () where 'static: 'a {\n-    t //[migrate]~ ERROR E0312\n-        //[nll]~^ ERROR lifetime may not live long enough\n+    t //~ ERROR E0312\n }\n \n fn error(u: &(), v: &()) {\n-    static_id(&u); //[migrate]~ ERROR explicit lifetime required in the type of `u` [E0621]\n-    //[nll]~^ ERROR explicit lifetime required in the type of `u` [E0621]\n-    static_id_indirect(&v); //[migrate]~ ERROR explicit lifetime required in the type of `v` [E0621]\n-    //[nll]~^ ERROR explicit lifetime required in the type of `v` [E0621]\n+    static_id(&u); //~ ERROR `u` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement [E0759]\n+    static_id_indirect(&v); //~ ERROR `v` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement [E0759]\n }\n \n fn main() {}"}, {"sha": "51fe16ca9da03515dff6f71a480bba44923033d0", "filename": "src/test/ui/regions/regions-static-bound.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.stderr?ref=c9c4b5d7276297679387189d96a952f2b760e7ad", "patch": "@@ -0,0 +1,46 @@\n+error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n+  --> $DIR/regions-static-bound.rs:6:5\n+   |\n+LL |     t\n+   |     ^\n+   |\n+   = note: ...the reference is valid for the static lifetime...\n+note: ...but the borrowed content is only valid for the lifetime `'a` as defined here\n+  --> $DIR/regions-static-bound.rs:5:24\n+   |\n+LL | fn static_id_wrong_way<'a>(t: &'a ()) -> &'static () where 'static: 'a {\n+   |                        ^^\n+\n+error[E0759]: `u` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n+  --> $DIR/regions-static-bound.rs:10:5\n+   |\n+LL | fn error(u: &(), v: &()) {\n+   |             --- this data with an anonymous lifetime `'_`...\n+LL |     static_id(&u);\n+   |     ^^^^^^^^^ -- ...is captured here...\n+   |\n+note: ...and is required to live as long as `'static` here\n+  --> $DIR/regions-static-bound.rs:10:5\n+   |\n+LL |     static_id(&u);\n+   |     ^^^^^^^^^\n+\n+error[E0759]: `v` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n+  --> $DIR/regions-static-bound.rs:11:5\n+   |\n+LL | fn error(u: &(), v: &()) {\n+   |                     --- this data with an anonymous lifetime `'_`...\n+LL |     static_id(&u);\n+LL |     static_id_indirect(&v);\n+   |     ^^^^^^^^^^^^^^^^^^ -- ...is captured here...\n+   |\n+note: ...and is required to live as long as `'static` here\n+  --> $DIR/regions-static-bound.rs:11:5\n+   |\n+LL |     static_id_indirect(&v);\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0312, E0759.\n+For more information about an error, try `rustc --explain E0312`."}, {"sha": "8edf4db441b9cf872a8b429367757277ed04ba4a", "filename": "src/test/ui/union/issue-41073.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Funion%2Fissue-41073.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Funion%2Fissue-41073.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Fissue-41073.stderr?ref=c9c4b5d7276297679387189d96a952f2b760e7ad", "patch": "@@ -4,11 +4,10 @@ error[E0740]: unions may not contain fields that need dropping\n LL |     a: A,\n    |     ^^^^\n    |\n-note: `std::mem::ManuallyDrop` can be used to wrap the type\n-  --> $DIR/issue-41073.rs:4:5\n+help: wrap the type with `std::mem::ManuallyDrop` and ensure it is manually dropped\n    |\n-LL |     a: A,\n-   |     ^^^^\n+LL |     a: std::mem::ManuallyDrop<A>,\n+   |        +++++++++++++++++++++++ +\n \n error: aborting due to previous error\n "}, {"sha": "65ca5fd931d670417865d75e1393d812be9081ec", "filename": "src/test/ui/union/union-custom-drop.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Funion%2Funion-custom-drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Funion%2Funion-custom-drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-custom-drop.stderr?ref=c9c4b5d7276297679387189d96a952f2b760e7ad", "patch": "@@ -4,11 +4,10 @@ error[E0740]: unions may not contain fields that need dropping\n LL |     bar: Bar,\n    |     ^^^^^^^^\n    |\n-note: `std::mem::ManuallyDrop` can be used to wrap the type\n-  --> $DIR/union-custom-drop.rs:7:5\n+help: wrap the type with `std::mem::ManuallyDrop` and ensure it is manually dropped\n    |\n-LL |     bar: Bar,\n-   |     ^^^^^^^^\n+LL |     bar: std::mem::ManuallyDrop<Bar>,\n+   |          +++++++++++++++++++++++   +\n \n error: aborting due to previous error\n "}, {"sha": "f5e9681735c6f93272155b397e73b52b4a3ca570", "filename": "src/test/ui/union/union-with-drop-fields.mirunsafeck.stderr", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Funion%2Funion-with-drop-fields.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Funion%2Funion-with-drop-fields.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-with-drop-fields.mirunsafeck.stderr?ref=c9c4b5d7276297679387189d96a952f2b760e7ad", "patch": "@@ -4,35 +4,32 @@ error[E0740]: unions may not contain fields that need dropping\n LL |     a: String,\n    |     ^^^^^^^^^\n    |\n-note: `std::mem::ManuallyDrop` can be used to wrap the type\n-  --> $DIR/union-with-drop-fields.rs:11:5\n+help: wrap the type with `std::mem::ManuallyDrop` and ensure it is manually dropped\n    |\n-LL |     a: String,\n-   |     ^^^^^^^^^\n+LL |     a: std::mem::ManuallyDrop<String>,\n+   |        +++++++++++++++++++++++      +\n \n error[E0740]: unions may not contain fields that need dropping\n   --> $DIR/union-with-drop-fields.rs:19:5\n    |\n LL |     a: S,\n    |     ^^^^\n    |\n-note: `std::mem::ManuallyDrop` can be used to wrap the type\n-  --> $DIR/union-with-drop-fields.rs:19:5\n+help: wrap the type with `std::mem::ManuallyDrop` and ensure it is manually dropped\n    |\n-LL |     a: S,\n-   |     ^^^^\n+LL |     a: std::mem::ManuallyDrop<S>,\n+   |        +++++++++++++++++++++++ +\n \n error[E0740]: unions may not contain fields that need dropping\n   --> $DIR/union-with-drop-fields.rs:24:5\n    |\n LL |     a: T,\n    |     ^^^^\n    |\n-note: `std::mem::ManuallyDrop` can be used to wrap the type\n-  --> $DIR/union-with-drop-fields.rs:24:5\n+help: wrap the type with `std::mem::ManuallyDrop` and ensure it is manually dropped\n    |\n-LL |     a: T,\n-   |     ^^^^\n+LL |     a: std::mem::ManuallyDrop<T>,\n+   |        +++++++++++++++++++++++ +\n \n error: aborting due to 3 previous errors\n "}, {"sha": "f5e9681735c6f93272155b397e73b52b4a3ca570", "filename": "src/test/ui/union/union-with-drop-fields.thirunsafeck.stderr", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Funion%2Funion-with-drop-fields.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftest%2Fui%2Funion%2Funion-with-drop-fields.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-with-drop-fields.thirunsafeck.stderr?ref=c9c4b5d7276297679387189d96a952f2b760e7ad", "patch": "@@ -4,35 +4,32 @@ error[E0740]: unions may not contain fields that need dropping\n LL |     a: String,\n    |     ^^^^^^^^^\n    |\n-note: `std::mem::ManuallyDrop` can be used to wrap the type\n-  --> $DIR/union-with-drop-fields.rs:11:5\n+help: wrap the type with `std::mem::ManuallyDrop` and ensure it is manually dropped\n    |\n-LL |     a: String,\n-   |     ^^^^^^^^^\n+LL |     a: std::mem::ManuallyDrop<String>,\n+   |        +++++++++++++++++++++++      +\n \n error[E0740]: unions may not contain fields that need dropping\n   --> $DIR/union-with-drop-fields.rs:19:5\n    |\n LL |     a: S,\n    |     ^^^^\n    |\n-note: `std::mem::ManuallyDrop` can be used to wrap the type\n-  --> $DIR/union-with-drop-fields.rs:19:5\n+help: wrap the type with `std::mem::ManuallyDrop` and ensure it is manually dropped\n    |\n-LL |     a: S,\n-   |     ^^^^\n+LL |     a: std::mem::ManuallyDrop<S>,\n+   |        +++++++++++++++++++++++ +\n \n error[E0740]: unions may not contain fields that need dropping\n   --> $DIR/union-with-drop-fields.rs:24:5\n    |\n LL |     a: T,\n    |     ^^^^\n    |\n-note: `std::mem::ManuallyDrop` can be used to wrap the type\n-  --> $DIR/union-with-drop-fields.rs:24:5\n+help: wrap the type with `std::mem::ManuallyDrop` and ensure it is manually dropped\n    |\n-LL |     a: T,\n-   |     ^^^^\n+LL |     a: std::mem::ManuallyDrop<T>,\n+   |        +++++++++++++++++++++++ +\n \n error: aborting due to 3 previous errors\n "}, {"sha": "681b2486d07cc0bc20b54ccf95ac22dc20d7e798", "filename": "src/tools/tidy/src/ui_tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9c4b5d7276297679387189d96a952f2b760e7ad/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs?ref=c9c4b5d7276297679387189d96a952f2b760e7ad", "patch": "@@ -9,7 +9,7 @@ const ENTRY_LIMIT: usize = 1000;\n // FIXME: The following limits should be reduced eventually.\n const ROOT_ENTRY_LIMIT: usize = 1102;\n const ISSUES_ENTRY_LIMIT: usize = 2310;\n-const PARSER_LIMIT: usize = 1004;\n+const PARSER_LIMIT: usize = 1005;\n \n fn check_entries(path: &Path, bad: &mut bool) {\n     let dirs = walkdir::WalkDir::new(&path.join(\"test/ui\"))"}]}