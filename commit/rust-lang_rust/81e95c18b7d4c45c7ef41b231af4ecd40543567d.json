{"sha": "81e95c18b7d4c45c7ef41b231af4ecd40543567d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxZTk1YzE4YjdkNGM0NWM3ZWY0MWIyMzFhZjRlY2Q0MDU0MzU2N2Q=", "commit": {"author": {"name": "Tobias Bucher", "email": "tobiasbucher5991@gmail.com", "date": "2016-06-24T18:54:52Z"}, "committer": {"name": "Tobias Bucher", "email": "tobiasbucher5991@gmail.com", "date": "2016-07-12T08:40:40Z"}, "message": "Use `ptr::{null, null_mut}` instead of `0 as *{const, mut}`", "tree": {"sha": "ced85ac151c5d6c0a892fc063906a232b3b49ea3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ced85ac151c5d6c0a892fc063906a232b3b49ea3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81e95c18b7d4c45c7ef41b231af4ecd40543567d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81e95c18b7d4c45c7ef41b231af4ecd40543567d", "html_url": "https://github.com/rust-lang/rust/commit/81e95c18b7d4c45c7ef41b231af4ecd40543567d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81e95c18b7d4c45c7ef41b231af4ecd40543567d/comments", "author": {"login": "tbu-", "id": 6666593, "node_id": "MDQ6VXNlcjY2NjY1OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6666593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbu-", "html_url": "https://github.com/tbu-", "followers_url": "https://api.github.com/users/tbu-/followers", "following_url": "https://api.github.com/users/tbu-/following{/other_user}", "gists_url": "https://api.github.com/users/tbu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbu-/subscriptions", "organizations_url": "https://api.github.com/users/tbu-/orgs", "repos_url": "https://api.github.com/users/tbu-/repos", "events_url": "https://api.github.com/users/tbu-/events{/privacy}", "received_events_url": "https://api.github.com/users/tbu-/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tbu-", "id": 6666593, "node_id": "MDQ6VXNlcjY2NjY1OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6666593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbu-", "html_url": "https://github.com/tbu-", "followers_url": "https://api.github.com/users/tbu-/followers", "following_url": "https://api.github.com/users/tbu-/following{/other_user}", "gists_url": "https://api.github.com/users/tbu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbu-/subscriptions", "organizations_url": "https://api.github.com/users/tbu-/orgs", "repos_url": "https://api.github.com/users/tbu-/repos", "events_url": "https://api.github.com/users/tbu-/events{/privacy}", "received_events_url": "https://api.github.com/users/tbu-/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2539c15b49530e882a3e8803b3f53a7914d367be", "url": "https://api.github.com/repos/rust-lang/rust/commits/2539c15b49530e882a3e8803b3f53a7914d367be", "html_url": "https://github.com/rust-lang/rust/commit/2539c15b49530e882a3e8803b3f53a7914d367be"}], "stats": {"total": 70, "additions": 41, "deletions": 29}, "files": [{"sha": "3c46072e17e1a7753aa3939c7676efb8e54ff2bd", "filename": "src/libpanic_unwind/gcc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/81e95c18b7d4c45c7ef41b231af4ecd40543567d/src%2Flibpanic_unwind%2Fgcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e95c18b7d4c45c7ef41b231af4ecd40543567d/src%2Flibpanic_unwind%2Fgcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fgcc.rs?ref=81e95c18b7d4c45c7ef41b231af4ecd40543567d", "patch": "@@ -57,6 +57,7 @@\n #![allow(private_no_mangle_fns)]\n \n use core::any::Any;\n+use core::ptr;\n use alloc::boxed::Box;\n \n use unwind as uw;\n@@ -88,7 +89,7 @@ pub unsafe fn panic(data: Box<Any + Send>) -> u32 {\n }\n \n pub fn payload() -> *mut u8 {\n-    0 as *mut u8\n+    ptr::null_mut()\n }\n \n pub unsafe fn cleanup(ptr: *mut u8) -> Box<Any + Send> {"}, {"sha": "56801e8cb6bcf3d5583a7ca409a2aac4a8db965d", "filename": "src/libpanic_unwind/seh64_gnu.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/81e95c18b7d4c45c7ef41b231af4ecd40543567d/src%2Flibpanic_unwind%2Fseh64_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e95c18b7d4c45c7ef41b231af4ecd40543567d/src%2Flibpanic_unwind%2Fseh64_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fseh64_gnu.rs?ref=81e95c18b7d4c45c7ef41b231af4ecd40543567d", "patch": "@@ -18,6 +18,7 @@ use alloc::boxed::Box;\n \n use core::any::Any;\n use core::intrinsics;\n+use core::ptr;\n use dwarf::eh;\n use windows as c;\n \n@@ -50,7 +51,7 @@ pub unsafe fn panic(data: Box<Any + Send>) -> u32 {\n }\n \n pub fn payload() -> *mut u8 {\n-    0 as *mut u8\n+    ptr::null_mut()\n }\n \n pub unsafe fn cleanup(ptr: *mut u8) -> Box<Any + Send> {"}, {"sha": "8fadb191e253b86200392ae0b9dc132759acb19d", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/81e95c18b7d4c45c7ef41b231af4ecd40543567d/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e95c18b7d4c45c7ef41b231af4ecd40543567d/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=81e95c18b7d4c45c7ef41b231af4ecd40543567d", "patch": "@@ -98,6 +98,7 @@ use libc::c_uint;\n use std::ffi::{CStr, CString};\n use std::cell::{Cell, RefCell};\n use std::collections::{HashMap, HashSet};\n+use std::ptr;\n use std::rc::Rc;\n use std::str;\n use std::{i8, i16, i32, i64};\n@@ -2304,7 +2305,7 @@ pub fn maybe_create_entry_wrapper(ccx: &CrateContext) {\n                                                  start_fn,\n                                                  args.as_ptr(),\n                                                  args.len() as c_uint,\n-                                                 0 as *mut _,\n+                                                 ptr::null_mut(),\n                                                  noname());\n \n             llvm::LLVMBuildRet(bld, result);"}, {"sha": "e88257dcd4cf874490d6186b6a0deee09306681b", "filename": "src/librustc_trans/builder.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/81e95c18b7d4c45c7ef41b231af4ecd40543567d/src%2Flibrustc_trans%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e95c18b7d4c45c7ef41b231af4ecd40543567d/src%2Flibrustc_trans%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbuilder.rs?ref=81e95c18b7d4c45c7ef41b231af4ecd40543567d", "patch": "@@ -177,7 +177,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n         check_call(\"invoke\", llfn, args);\n \n-        let bundle = bundle.as_ref().map(|b| b.raw()).unwrap_or(0 as *mut _);\n+        let bundle = bundle.as_ref().map(|b| b.raw()).unwrap_or(ptr::null_mut());\n \n         unsafe {\n             llvm::LLVMRustBuildInvoke(self.llbuilder,\n@@ -859,7 +859,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n         check_call(\"call\", llfn, args);\n \n-        let bundle = bundle.as_ref().map(|b| b.raw()).unwrap_or(0 as *mut _);\n+        let bundle = bundle.as_ref().map(|b| b.raw()).unwrap_or(ptr::null_mut());\n \n         unsafe {\n             llvm::LLVMRustBuildCall(self.llbuilder, llfn, args.as_ptr(),\n@@ -961,7 +961,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             self.count_insn(\"trap\");\n             llvm::LLVMRustBuildCall(self.llbuilder, t,\n                                     args.as_ptr(), args.len() as c_uint,\n-                                    0 as *mut _,\n+                                    ptr::null_mut(),\n                                     noname());\n         }\n     }\n@@ -1000,7 +1000,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                        parent: Option<ValueRef>,\n                        args: &[ValueRef]) -> ValueRef {\n         self.count_insn(\"cleanuppad\");\n-        let parent = parent.unwrap_or(0 as *mut _);\n+        let parent = parent.unwrap_or(ptr::null_mut());\n         let name = CString::new(\"cleanuppad\").unwrap();\n         let ret = unsafe {\n             llvm::LLVMRustBuildCleanupPad(self.llbuilder,\n@@ -1016,7 +1016,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     pub fn cleanup_ret(&self, cleanup: ValueRef,\n                        unwind: Option<BasicBlockRef>) -> ValueRef {\n         self.count_insn(\"cleanupret\");\n-        let unwind = unwind.unwrap_or(0 as *mut _);\n+        let unwind = unwind.unwrap_or(ptr::null_mut());\n         let ret = unsafe {\n             llvm::LLVMRustBuildCleanupRet(self.llbuilder, cleanup, unwind)\n         };\n@@ -1052,8 +1052,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         unwind: Option<BasicBlockRef>,\n                         num_handlers: usize) -> ValueRef {\n         self.count_insn(\"catchswitch\");\n-        let parent = parent.unwrap_or(0 as *mut _);\n-        let unwind = unwind.unwrap_or(0 as *mut _);\n+        let parent = parent.unwrap_or(ptr::null_mut());\n+        let unwind = unwind.unwrap_or(ptr::null_mut());\n         let name = CString::new(\"catchswitch\").unwrap();\n         let ret = unsafe {\n             llvm::LLVMRustBuildCatchSwitch(self.llbuilder, parent, unwind,"}, {"sha": "54c1fe6c5640cebcb7312d0ad67fe8233c316b92", "filename": "src/libstd/sync/once.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/81e95c18b7d4c45c7ef41b231af4ecd40543567d/src%2Flibstd%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e95c18b7d4c45c7ef41b231af4ecd40543567d/src%2Flibstd%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fonce.rs?ref=81e95c18b7d4c45c7ef41b231af4ecd40543567d", "patch": "@@ -65,6 +65,7 @@\n // it!\n \n use marker;\n+use ptr;\n use sync::atomic::{AtomicUsize, AtomicBool, Ordering};\n use thread::{self, Thread};\n \n@@ -297,7 +298,7 @@ impl Once {\n                     let mut node = Waiter {\n                         thread: Some(thread::current()),\n                         signaled: AtomicBool::new(false),\n-                        next: 0 as *mut Waiter,\n+                        next: ptr::null_mut(),\n                     };\n                     let me = &mut node as *mut Waiter as usize;\n                     assert!(me & STATE_MASK == 0);"}, {"sha": "5f7588de776bd0beab0c794308d62cfb8092f6f9", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/81e95c18b7d4c45c7ef41b231af4ecd40543567d/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e95c18b7d4c45c7ef41b231af4ecd40543567d/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=81e95c18b7d4c45c7ef41b231af4ecd40543567d", "patch": "@@ -227,11 +227,11 @@ pub fn current_exe() -> io::Result<PathBuf> {\n                        libc::KERN_PROC_ARGV];\n         let mib = mib.as_mut_ptr();\n         let mut argv_len = 0;\n-        cvt(libc::sysctl(mib, 4, 0 as *mut _, &mut argv_len,\n-                         0 as *mut _, 0))?;\n+        cvt(libc::sysctl(mib, 4, ptr::null_mut(), &mut argv_len,\n+                         ptr::null_mut(), 0))?;\n         let mut argv = Vec::<*const libc::c_char>::with_capacity(argv_len as usize);\n         cvt(libc::sysctl(mib, 4, argv.as_mut_ptr() as *mut _,\n-                         &mut argv_len, 0 as *mut _, 0))?;\n+                         &mut argv_len, ptr::null_mut(), 0))?;\n         argv.set_len(argv_len as usize);\n         if argv[0].is_null() {\n             return Err(io::Error::new(io::ErrorKind::Other,"}, {"sha": "010594133387a4602261369cf4b0e89cfb81e642", "filename": "src/libstd/sys/unix/pipe.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/81e95c18b7d4c45c7ef41b231af4ecd40543567d/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e95c18b7d4c45c7ef41b231af4ecd40543567d/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs?ref=81e95c18b7d4c45c7ef41b231af4ecd40543567d", "patch": "@@ -14,6 +14,7 @@ use cmp;\n use io;\n use libc::{self, c_int};\n use mem;\n+use ptr;\n use sys::cvt_r;\n use sys::fd::FileDesc;\n \n@@ -92,8 +93,8 @@ pub fn read2(p1: AnonPipe,\n             let mut read: libc::fd_set = mem::zeroed();\n             libc::FD_SET(p1.raw(), &mut read);\n             libc::FD_SET(p2.raw(), &mut read);\n-            libc::select(max + 1, &mut read, 0 as *mut _, 0 as *mut _,\n-                         0 as *mut _)\n+            libc::select(max + 1, &mut read, ptr::null_mut(), ptr::null_mut(),\n+                         ptr::null_mut())\n         })?;\n \n         // Read as much as we can from each pipe, ignoring EWOULDBLOCK or"}, {"sha": "d68867fb3d2ce9d164466ef0a1164a1f8fb008c9", "filename": "src/libstd/sys/unix/process.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/81e95c18b7d4c45c7ef41b231af4ecd40543567d/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e95c18b7d4c45c7ef41b231af4ecd40543567d/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs?ref=81e95c18b7d4c45c7ef41b231af4ecd40543567d", "patch": "@@ -96,7 +96,7 @@ impl Command {\n         let mut saw_nul = false;\n         let program = os2c(program, &mut saw_nul);\n         Command {\n-            argv: vec![program.as_ptr(), 0 as *const _],\n+            argv: vec![program.as_ptr(), ptr::null()],\n             program: program,\n             args: Vec::new(),\n             env: None,\n@@ -117,7 +117,7 @@ impl Command {\n         // pointer.\n         let arg = os2c(arg, &mut self.saw_nul);\n         self.argv[self.args.len() + 1] = arg.as_ptr();\n-        self.argv.push(0 as *const _);\n+        self.argv.push(ptr::null());\n \n         // Also make sure we keep track of the owned value to schedule a\n         // destructor for this memory.\n@@ -134,7 +134,7 @@ impl Command {\n                 envp.push(s.as_ptr());\n                 map.insert(k, (envp.len() - 1, s));\n             }\n-            envp.push(0 as *const _);\n+            envp.push(ptr::null());\n             self.env = Some(map);\n             self.envp = Some(envp);\n         }\n@@ -158,7 +158,7 @@ impl Command {\n             Entry::Vacant(e) => {\n                 let len = envp.len();\n                 envp[len - 1] = new_key.as_ptr();\n-                envp.push(0 as *const _);\n+                envp.push(ptr::null());\n                 e.insert((len - 1, new_key));\n             }\n         }\n@@ -183,7 +183,7 @@ impl Command {\n \n     pub fn env_clear(&mut self) {\n         self.env = Some(HashMap::new());\n-        self.envp = Some(vec![0 as *const _]);\n+        self.envp = Some(vec![ptr::null()]);\n     }\n \n     pub fn cwd(&mut self, dir: &OsStr) {"}, {"sha": "a08cec38f732dae6ed8c8da0009080f91d08399d", "filename": "src/libstd/sys/unix/time.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/81e95c18b7d4c45c7ef41b231af4ecd40543567d/src%2Flibstd%2Fsys%2Funix%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e95c18b7d4c45c7ef41b231af4ecd40543567d/src%2Flibstd%2Fsys%2Funix%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ftime.rs?ref=81e95c18b7d4c45c7ef41b231af4ecd40543567d", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n use cmp::Ordering;\n-use time::Duration;\n use libc;\n+use time::Duration;\n \n pub use self::inner::{Instant, SystemTime, UNIX_EPOCH};\n \n@@ -164,12 +164,14 @@ mod inner {\n \n     impl SystemTime {\n         pub fn now() -> SystemTime {\n+            use ptr;\n+\n             let mut s = libc::timeval {\n                 tv_sec: 0,\n                 tv_usec: 0,\n             };\n             cvt(unsafe {\n-                libc::gettimeofday(&mut s, 0 as *mut _)\n+                libc::gettimeofday(&mut s, ptr::null_mut())\n             }).unwrap();\n             return SystemTime::from(s)\n         }"}, {"sha": "d10abae2865271dadfc6af7a3c1f3fa62cd41da9", "filename": "src/libstd/sys/windows/handle.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81e95c18b7d4c45c7ef41b231af4ecd40543567d/src%2Flibstd%2Fsys%2Fwindows%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e95c18b7d4c45c7ef41b231af4ecd40543567d/src%2Flibstd%2Fsys%2Fwindows%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fhandle.rs?ref=81e95c18b7d4c45c7ef41b231af4ecd40543567d", "patch": "@@ -46,10 +46,10 @@ impl Handle {\n \n     pub fn new_event(manual: bool, init: bool) -> io::Result<Handle> {\n         unsafe {\n-            let event = c::CreateEventW(0 as *mut _,\n+            let event = c::CreateEventW(ptr::null_mut(),\n                                         manual as c::BOOL,\n                                         init as c::BOOL,\n-                                        0 as *const _);\n+                                        ptr::null());\n             if event.is_null() {\n                 Err(io::Error::last_os_error())\n             } else {"}, {"sha": "6e9c67051a6eb3559c17a3d2d813df4b685816df", "filename": "src/libstd/sys/windows/pipe.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/81e95c18b7d4c45c7ef41b231af4ecd40543567d/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e95c18b7d4c45c7ef41b231af4ecd40543567d/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs?ref=81e95c18b7d4c45c7ef41b231af4ecd40543567d", "patch": "@@ -12,9 +12,10 @@ use prelude::v1::*;\n use os::windows::prelude::*;\n \n use ffi::OsStr;\n-use path::Path;\n use io;\n use mem;\n+use path::Path;\n+use ptr;\n use rand::{self, Rng};\n use slice;\n use sys::c;\n@@ -66,7 +67,7 @@ pub fn anon_pipe() -> io::Result<(AnonPipe, AnonPipe)> {\n                                              4096,\n                                              4096,\n                                              0,\n-                                             0 as *mut _);\n+                                             ptr::null_mut());\n \n             // We pass the FILE_FLAG_FIRST_PIPE_INSTANCE flag above, and we're\n             // also just doing a best effort at selecting a unique name. If"}, {"sha": "248f6f98650a526778ae67e84d66f4eb2d3bea6b", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/81e95c18b7d4c45c7ef41b231af4ecd40543567d/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e95c18b7d4c45c7ef41b231af4ecd40543567d/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=81e95c18b7d4c45c7ef41b231af4ecd40543567d", "patch": "@@ -959,6 +959,8 @@ fn get_concurrency() -> usize {\n               target_os = \"bitrig\",\n               target_os = \"netbsd\"))]\n     fn num_cpus() -> usize {\n+        use std::ptr;\n+\n         let mut cpus: libc::c_uint = 0;\n         let mut cpus_size = std::mem::size_of_val(&cpus);\n \n@@ -972,7 +974,7 @@ fn get_concurrency() -> usize {\n                              2,\n                              &mut cpus as *mut _ as *mut _,\n                              &mut cpus_size as *mut _ as *mut _,\n-                             0 as *mut _,\n+                             ptr::null_mut(),\n                              0);\n             }\n             if cpus < 1 {\n@@ -984,6 +986,8 @@ fn get_concurrency() -> usize {\n \n     #[cfg(target_os = \"openbsd\")]\n     fn num_cpus() -> usize {\n+        use std::ptr;\n+\n         let mut cpus: libc::c_uint = 0;\n         let mut cpus_size = std::mem::size_of_val(&cpus);\n         let mut mib = [libc::CTL_HW, libc::HW_NCPU, 0, 0];\n@@ -993,7 +997,7 @@ fn get_concurrency() -> usize {\n                          2,\n                          &mut cpus as *mut _ as *mut _,\n                          &mut cpus_size as *mut _ as *mut _,\n-                         0 as *mut _,\n+                         ptr::null_mut(),\n                          0);\n         }\n         if cpus < 1 {"}]}