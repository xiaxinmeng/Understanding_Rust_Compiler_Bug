{"sha": "c73925452c870f028ab393acf8edc5ceea382fcb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3MzkyNTQ1MmM4NzBmMDI4YWIzOTNhY2Y4ZWRjNWNlZWEzODJmY2I=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-01-31T00:59:20Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-01-31T00:59:20Z"}, "message": "Fix ICE when reading non-UTF-8 input from stdin\n\nFixes #22387.", "tree": {"sha": "ced2e698b67f59377d09284324cd0256db6b8035", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ced2e698b67f59377d09284324cd0256db6b8035"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c73925452c870f028ab393acf8edc5ceea382fcb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c73925452c870f028ab393acf8edc5ceea382fcb", "html_url": "https://github.com/rust-lang/rust/commit/c73925452c870f028ab393acf8edc5ceea382fcb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c73925452c870f028ab393acf8edc5ceea382fcb/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90eb44a5897c39e3dff9c7e48e3973671dcd9496", "url": "https://api.github.com/repos/rust-lang/rust/commits/90eb44a5897c39e3dff9c7e48e3973671dcd9496", "html_url": "https://github.com/rust-lang/rust/commit/90eb44a5897c39e3dff9c7e48e3973671dcd9496"}], "stats": {"total": 34, "additions": 27, "deletions": 7}, "files": [{"sha": "2f083c2193a2164f8f059c4ee194b1bd16e7498f", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c73925452c870f028ab393acf8edc5ceea382fcb/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c73925452c870f028ab393acf8edc5ceea382fcb/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=c73925452c870f028ab393acf8edc5ceea382fcb", "patch": "@@ -456,10 +456,13 @@ pub fn run_compiler<'a>(args: &[String],\n                                            None);\n \n     let (odir, ofile) = make_output(&matches);\n-    let (input, input_file_path) = match make_input(&matches.free) {\n-        Some((input, input_file_path)) => callbacks.some_input(input, input_file_path),\n+    let (input, input_file_path, input_err) = match make_input(&matches.free) {\n+        Some((input, input_file_path, input_err)) => {\n+            let (input, input_file_path) = callbacks.some_input(input, input_file_path);\n+            (input, input_file_path, input_err)\n+        },\n         None => match callbacks.no_input(&matches, &sopts, &cfg, &odir, &ofile, &descriptions) {\n-            Some((input, input_file_path)) => (input, input_file_path),\n+            Some((input, input_file_path)) => (input, input_file_path, None),\n             None => return (Ok(()), None),\n         },\n     };\n@@ -470,6 +473,13 @@ pub fn run_compiler<'a>(args: &[String],\n         sopts, input_file_path.clone(), descriptions, codemap, emitter_dest,\n     );\n \n+    if let Some(err) = input_err {\n+        // Immediately stop compilation if there was an issue reading\n+        // the input (for example if the input stream is not UTF-8).\n+        sess.err(&format!(\"{}\", err));\n+        return (Err(CompileIncomplete::Stopped), Some(sess));\n+    }\n+\n     let trans = get_trans(&sess);\n \n     rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));\n@@ -512,17 +522,22 @@ fn make_output(matches: &getopts::Matches) -> (Option<PathBuf>, Option<PathBuf>)\n }\n \n // Extract input (string or file and optional path) from matches.\n-fn make_input(free_matches: &[String]) -> Option<(Input, Option<PathBuf>)> {\n+fn make_input(free_matches: &[String]) -> Option<(Input, Option<PathBuf>, Option<io::Error>)> {\n     if free_matches.len() == 1 {\n         let ifile = &free_matches[0];\n         if ifile == \"-\" {\n             let mut src = String::new();\n-            io::stdin().read_to_string(&mut src).unwrap();\n+            let err = if io::stdin().read_to_string(&mut src).is_err() {\n+                Some(io::Error::new(io::ErrorKind::InvalidData,\n+                                    \"couldn't read from stdin, as it did not contain valid UTF-8\"))\n+            } else {\n+                None\n+            };\n             Some((Input::Str { name: FileName::Anon, input: src },\n-                  None))\n+                  None, err))\n         } else {\n             Some((Input::File(PathBuf::from(ifile)),\n-                  Some(PathBuf::from(ifile))))\n+                  Some(PathBuf::from(ifile)), None))\n         }\n     } else {\n         None"}, {"sha": "307f3d85c00678135be9c8dcb4e398fbfcde0438", "filename": "src/test/run-make/stdin-non-utf8/Makefile", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c73925452c870f028ab393acf8edc5ceea382fcb/src%2Ftest%2Frun-make%2Fstdin-non-utf8%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c73925452c870f028ab393acf8edc5ceea382fcb/src%2Ftest%2Frun-make%2Fstdin-non-utf8%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fstdin-non-utf8%2FMakefile?ref=c73925452c870f028ab393acf8edc5ceea382fcb", "patch": "@@ -0,0 +1,5 @@\n+-include ../tools.mk\n+\n+all:\n+\techo '\\xD2' | $(RUSTC) - 2>&1 \\\n+\t\t| $(CGREP) \"error: couldn't read from stdin, as it did not contain valid UTF-8\""}]}