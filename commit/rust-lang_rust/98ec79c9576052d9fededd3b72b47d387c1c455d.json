{"sha": "98ec79c9576052d9fededd3b72b47d387c1c455d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4ZWM3OWM5NTc2MDUyZDlmZWRlZGQzYjcyYjQ3ZDM4N2MxYzQ1NWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-07T20:23:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-07T20:23:07Z"}, "message": "auto merge of #8294 : erickt/rust/map-move, r=bblum\n\nAccording to #7887, we've decided to use the syntax of `fn map<U>(f: &fn(&T) -> U) -> U`, which passes a reference to the closure, and to `fn map_move<U>(f: &fn(T) -> U) -> U` which moves the value into the closure. This PR adds these `.map_move()` functions to `Option` and `Result`.\r\n\r\nIn addition, it has these other minor features:\r\n \r\n* Replaces a couple uses of `option.get()`, `result.get()`, and `result.get_err()` with `option.unwrap()`, `result.unwrap()`, and `result.unwrap_err()`. (See #8268 and #8288 for a more thorough adaptation of this functionality.\r\n* Removes `option.take_map()` and `option.take_map_default()`. These two functions can be easily written as `.take().map_move(...)`.\r\n* Adds a better error message to `result.unwrap()` and `result.unwrap_err()`.", "tree": {"sha": "1bb89d47e3668a024cc4bc9d252991ef78d1e4d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1bb89d47e3668a024cc4bc9d252991ef78d1e4d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98ec79c9576052d9fededd3b72b47d387c1c455d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98ec79c9576052d9fededd3b72b47d387c1c455d", "html_url": "https://github.com/rust-lang/rust/commit/98ec79c9576052d9fededd3b72b47d387c1c455d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98ec79c9576052d9fededd3b72b47d387c1c455d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cdba212e7299f6bda752abbb9f887c51d96f7586", "url": "https://api.github.com/repos/rust-lang/rust/commits/cdba212e7299f6bda752abbb9f887c51d96f7586", "html_url": "https://github.com/rust-lang/rust/commit/cdba212e7299f6bda752abbb9f887c51d96f7586"}, {"sha": "19e17f54a02e484f1ab4fd809caa0aaf3f3d14bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/19e17f54a02e484f1ab4fd809caa0aaf3f3d14bc", "html_url": "https://github.com/rust-lang/rust/commit/19e17f54a02e484f1ab4fd809caa0aaf3f3d14bc"}], "stats": {"total": 454, "additions": 243, "deletions": 211}, "files": [{"sha": "4262aba9a85946c2f30ee8dc6bdfa4be5dc75d5e", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=98ec79c9576052d9fededd3b72b47d387c1c455d", "patch": "@@ -109,8 +109,8 @@ pub fn parse_config(args: ~[~str]) -> config {\n         compile_lib_path: getopts::opt_str(matches, \"compile-lib-path\"),\n         run_lib_path: getopts::opt_str(matches, \"run-lib-path\"),\n         rustc_path: opt_path(matches, \"rustc-path\"),\n-        clang_path: getopts::opt_maybe_str(matches, \"clang-path\").map(|s| Path(*s)),\n-        llvm_bin_path: getopts::opt_maybe_str(matches, \"llvm-bin-path\").map(|s| Path(*s)),\n+        clang_path: getopts::opt_maybe_str(matches, \"clang-path\").map_move(|s| Path(s)),\n+        llvm_bin_path: getopts::opt_maybe_str(matches, \"llvm-bin-path\").map_move(|s| Path(s)),\n         src_base: opt_path(matches, \"src-base\"),\n         build_base: opt_path(matches, \"build-base\"),\n         aux_base: opt_path(matches, \"aux-base\"),\n@@ -123,14 +123,14 @@ pub fn parse_config(args: ~[~str]) -> config {\n             } else {\n                 None\n             },\n-        logfile: getopts::opt_maybe_str(matches, \"logfile\").map(|s| Path(*s)),\n-        save_metrics: getopts::opt_maybe_str(matches, \"save-metrics\").map(|s| Path(*s)),\n+        logfile: getopts::opt_maybe_str(matches, \"logfile\").map_move(|s| Path(s)),\n+        save_metrics: getopts::opt_maybe_str(matches, \"save-metrics\").map_move(|s| Path(s)),\n         ratchet_metrics:\n-            getopts::opt_maybe_str(matches, \"ratchet-metrics\").map(|s| Path(*s)),\n+            getopts::opt_maybe_str(matches, \"ratchet-metrics\").map_move(|s| Path(s)),\n         ratchet_noise_percent:\n             getopts::opt_maybe_str(matches,\n-                                   \"ratchet-noise-percent\").map(|s|\n-                                                                f64::from_str(*s).unwrap()),\n+                                   \"ratchet-noise-percent\").map_move(|s|\n+                                                                     f64::from_str(s).unwrap()),\n         runtool: getopts::opt_maybe_str(matches, \"runtool\"),\n         rustcflags: getopts::opt_maybe_str(matches, \"rustcflags\"),\n         jit: getopts::opt_present(matches, \"jit\"),"}, {"sha": "0d1c5c8eb43516c738c7df112f9c0fe5f48694c9", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=98ec79c9576052d9fededd3b72b47d387c1c455d", "patch": "@@ -162,9 +162,8 @@ fn run_pretty_test(config: &config, props: &TestProps, testfile: &Path) {\n         round += 1;\n     }\n \n-    let mut expected =\n-        match props.pp_exact {\n-          Some(ref file) => {\n+    let mut expected = match props.pp_exact {\n+        Some(ref file) => {\n             let filepath = testfile.dir_path().push_rel(file);\n             io::read_whole_file_str(&filepath).unwrap()\n           }"}, {"sha": "b0839a55795b760ccf0efdaba987c0d9edf6df35", "filename": "src/libextra/dlist.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibextra%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibextra%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fdlist.rs?ref=98ec79c9576052d9fededd3b72b47d387c1c455d", "patch": "@@ -164,7 +164,7 @@ impl<T> DList<T> {\n     /// Remove the first Node and return it, or None if the list is empty\n     #[inline]\n     fn pop_front_node(&mut self) -> Option<~Node<T>> {\n-        do self.list_head.take().map_consume |mut front_node| {\n+        do self.list_head.take().map_move |mut front_node| {\n             self.length -= 1;\n             match front_node.next.take() {\n                 Some(node) => self.list_head = link_with_prev(node, Rawlink::none()),\n@@ -190,7 +190,7 @@ impl<T> DList<T> {\n     /// Remove the last Node and return it, or None if the list is empty\n     #[inline]\n     fn pop_back_node(&mut self) -> Option<~Node<T>> {\n-        do self.list_tail.resolve().map_consume_default(None) |tail| {\n+        do self.list_tail.resolve().map_move_default(None) |tail| {\n             self.length -= 1;\n             self.list_tail = tail.prev;\n             match tail.prev.resolve() {\n@@ -237,7 +237,7 @@ impl<T> Deque<T> for DList<T> {\n     ///\n     /// O(1)\n     fn pop_front(&mut self) -> Option<T> {\n-        self.pop_front_node().map_consume(|~Node{value, _}| value)\n+        self.pop_front_node().map_move(|~Node{value, _}| value)\n     }\n \n     /// Add an element last in the list\n@@ -251,7 +251,7 @@ impl<T> Deque<T> for DList<T> {\n     ///\n     /// O(1)\n     fn pop_back(&mut self) -> Option<T> {\n-        self.pop_back_node().map_consume(|~Node{value, _}| value)\n+        self.pop_back_node().map_move(|~Node{value, _}| value)\n     }\n }\n \n@@ -267,7 +267,7 @@ impl<T> DList<T> {\n     /// If the list is empty, do nothing.\n     #[inline]\n     pub fn rotate_forward(&mut self) {\n-        do self.pop_back_node().map_consume |tail| {\n+        do self.pop_back_node().map_move |tail| {\n             self.push_front_node(tail)\n         };\n     }\n@@ -277,7 +277,7 @@ impl<T> DList<T> {\n     /// If the list is empty, do nothing.\n     #[inline]\n     pub fn rotate_backward(&mut self) {\n-        do self.pop_front_node().map_consume |head| {\n+        do self.pop_front_node().map_move |head| {\n             self.push_back_node(head)\n         };\n     }\n@@ -463,7 +463,7 @@ impl<'self, A> DoubleEndedIterator<&'self A> for DListIterator<'self, A> {\n         if self.nelem == 0 {\n             return None;\n         }\n-        do self.tail.resolve().map_consume |prev| {\n+        do self.tail.resolve().map_move |prev| {\n             self.nelem -= 1;\n             self.tail = prev.prev;\n             &prev.value\n@@ -477,7 +477,7 @@ impl<'self, A> Iterator<&'self mut A> for MutDListIterator<'self, A> {\n         if self.nelem == 0 {\n             return None;\n         }\n-        do self.head.resolve().map_consume |next| {\n+        do self.head.resolve().map_move |next| {\n             self.nelem -= 1;\n             self.head = match next.next {\n                 Some(ref mut node) => Rawlink::some(&mut **node),\n@@ -499,7 +499,7 @@ impl<'self, A> DoubleEndedIterator<&'self mut A> for MutDListIterator<'self, A>\n         if self.nelem == 0 {\n             return None;\n         }\n-        do self.tail.resolve().map_consume |prev| {\n+        do self.tail.resolve().map_move |prev| {\n             self.nelem -= 1;\n             self.tail = prev.prev;\n             &mut prev.value\n@@ -553,7 +553,7 @@ impl<'self, A> ListInsertion<A> for MutDListIterator<'self, A> {\n         if self.nelem == 0 {\n             return None\n         }\n-        self.head.resolve().map_consume(|head| &mut head.value)\n+        self.head.resolve().map_move(|head| &mut head.value)\n     }\n }\n "}, {"sha": "c3737d44e385ff8f5686345b0027686e51f24d05", "filename": "src/libextra/num/bigint.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibextra%2Fnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibextra%2Fnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Fbigint.rs?ref=98ec79c9576052d9fededd3b72b47d387c1c455d", "patch": "@@ -548,7 +548,7 @@ impl BigUint {\n \n     pub fn new(v: ~[BigDigit]) -> BigUint {\n         // omit trailing zeros\n-        let new_len = v.rposition(|n| *n != 0).map_default(0, |p| *p + 1);\n+        let new_len = v.rposition(|n| *n != 0).map_move_default(0, |p| p + 1);\n \n         if new_len == v.len() { return BigUint { data: v }; }\n         let mut v = v;\n@@ -1145,7 +1145,7 @@ impl BigInt {\n             start = 1;\n         }\n         return BigUint::parse_bytes(buf.slice(start, buf.len()), radix)\n-            .map_consume(|bu| BigInt::from_biguint(sign, bu));\n+            .map_move(|bu| BigInt::from_biguint(sign, bu));\n     }\n \n     pub fn to_uint(&self) -> uint {\n@@ -2028,7 +2028,7 @@ mod bigint_tests {\n     #[test]\n     fn test_from_str_radix() {\n         fn check(s: &str, ans: Option<int>) {\n-            let ans = ans.map(|&n| IntConvertible::from_int::<BigInt>(n));\n+            let ans = ans.map_move(|n| IntConvertible::from_int::<BigInt>(n));\n             assert_eq!(FromStrRadix::from_str_radix(s, 10), ans);\n         }\n         check(\"10\", Some(10));"}, {"sha": "e5116f19afa513feb04e17c97fd23e3097304a16", "filename": "src/libextra/smallintmap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibextra%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibextra%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsmallintmap.rs?ref=98ec79c9576052d9fededd3b72b47d387c1c455d", "patch": "@@ -203,7 +203,7 @@ impl<V> SmallIntMap<V> {\n     {\n         let values = replace(&mut self.v, ~[]);\n         values.consume_iter().enumerate().filter_map(|(i, v)| {\n-            v.map_consume(|v| (i, v))\n+            v.map_move(|v| (i, v))\n         })\n     }\n }"}, {"sha": "2173eb838e5ee9e65f72199944429335cd3924db", "filename": "src/libextra/term.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibextra%2Fterm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibextra%2Fterm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fterm.rs?ref=98ec79c9576052d9fededd3b72b47d387c1c455d", "patch": "@@ -127,7 +127,7 @@ impl Terminal {\n         let inf = ti.unwrap();\n         let nc = if inf.strings.find_equiv(&(\"setaf\")).is_some()\n                  && inf.strings.find_equiv(&(\"setab\")).is_some() {\n-                     inf.numbers.find_equiv(&(\"colors\")).map_consume_default(0, |&n| n)\n+                     inf.numbers.find_equiv(&(\"colors\")).map_move_default(0, |&n| n)\n                  } else { 0 };\n \n         return Ok(Terminal {out: out, ti: inf, num_colors: nc});\n@@ -220,7 +220,7 @@ impl Terminal {\n                 cap = self.ti.strings.find_equiv(&(\"op\"));\n             }\n         }\n-        let s = do cap.map_consume_default(Err(~\"can't find terminfo capability `sgr0`\")) |op| {\n+        let s = do cap.map_move_default(Err(~\"can't find terminfo capability `sgr0`\")) |op| {\n             expand(*op, [], &mut Variables::new())\n         };\n         if s.is_ok() {"}, {"sha": "761cb1bd76f929198e5011cd8595f3840fe30996", "filename": "src/libextra/test.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibextra%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibextra%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftest.rs?ref=98ec79c9576052d9fededd3b72b47d387c1c455d", "patch": "@@ -238,20 +238,20 @@ pub fn parse_opts(args: &[~str]) -> OptRes {\n     let run_ignored = getopts::opt_present(&matches, \"ignored\");\n \n     let logfile = getopts::opt_maybe_str(&matches, \"logfile\");\n-    let logfile = logfile.map(|s| Path(*s));\n+    let logfile = logfile.map_move(|s| Path(s));\n \n     let run_benchmarks = getopts::opt_present(&matches, \"bench\");\n     let run_tests = ! run_benchmarks ||\n         getopts::opt_present(&matches, \"test\");\n \n     let ratchet_metrics = getopts::opt_maybe_str(&matches, \"ratchet-metrics\");\n-    let ratchet_metrics = ratchet_metrics.map(|s| Path(*s));\n+    let ratchet_metrics = ratchet_metrics.map_move(|s| Path(s));\n \n     let ratchet_noise_percent = getopts::opt_maybe_str(&matches, \"ratchet-noise-percent\");\n-    let ratchet_noise_percent = ratchet_noise_percent.map(|s| f64::from_str(*s).unwrap());\n+    let ratchet_noise_percent = ratchet_noise_percent.map_move(|s| f64::from_str(s).unwrap());\n \n     let save_metrics = getopts::opt_maybe_str(&matches, \"save-metrics\");\n-    let save_metrics = save_metrics.map(|s| Path(*s));\n+    let save_metrics = save_metrics.map_move(|s| Path(s));\n \n     let test_opts = TestOpts {\n         filter: filter,"}, {"sha": "ab7d47255dac60da1aceb794d943910ff9fe7b3e", "filename": "src/libextra/treemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibextra%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibextra%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftreemap.rs?ref=98ec79c9576052d9fededd3b72b47d387c1c455d", "patch": "@@ -394,7 +394,7 @@ impl<'self, T> Iterator<&'self T> for TreeSetIterator<'self, T> {\n     /// Advance the iterator to the next node (in order). If there are no more nodes, return `None`.\n     #[inline]\n     fn next(&mut self) -> Option<&'self T> {\n-        do self.iter.next().map |&(value, _)| { value }\n+        do self.iter.next().map_move |(value, _)| { value }\n     }\n }\n "}, {"sha": "b4ba8acae476974cff76b27e2945718900e12350", "filename": "src/libextra/workcache.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibextra%2Fworkcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibextra%2Fworkcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fworkcache.rs?ref=98ec79c9576052d9fededd3b72b47d387c1c455d", "patch": "@@ -221,7 +221,7 @@ fn digest<T:Encodable<json::Encoder>>(t: &T) -> ~str {\n fn digest_file(path: &Path) -> ~str {\n     let mut sha = ~Sha1::new();\n     let s = io::read_whole_file_str(path);\n-    (*sha).input_str(*s.get_ref());\n+    (*sha).input_str(s.unwrap());\n     (*sha).result_str()\n }\n \n@@ -378,7 +378,7 @@ fn test() {\n     let pth = Path(\"foo.c\");\n     {\n         let r = io::file_writer(&pth, [io::Create]);\n-        r.get_ref().write_str(\"int main() { return 0; }\");\n+        r.unwrap().write_str(\"int main() { return 0; }\");\n     }\n \n     let cx = Context::new(RWArc::new(Database::new(Path(\"db.json\"))),"}, {"sha": "010486cdf855c7747df7c33c46362d3b1cd69f95", "filename": "src/librust/rust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibrust%2Frust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibrust%2Frust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrust%2Frust.rs?ref=98ec79c9576052d9fededd3b72b47d387c1c455d", "patch": "@@ -130,7 +130,7 @@ fn rustc_help() {\n fn find_cmd(command_string: &str) -> Option<Command> {\n     do COMMANDS.iter().find_ |command| {\n         command.cmd == command_string\n-    }.map_consume(|x| *x)\n+    }.map_move(|x| *x)\n }\n \n fn cmd_help(args: &[~str]) -> ValidUsage {"}, {"sha": "61ab826e9ee51f5728c25c15edbdaca8d89c355c", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=98ec79c9576052d9fededd3b72b47d387c1c455d", "patch": "@@ -669,8 +669,7 @@ pub fn build_session_options(binary: @str,\n         } else if opt_present(matches, \"emit-llvm\") {\n             link::output_type_bitcode\n         } else { link::output_type_exe };\n-    let sysroot_opt = getopts::opt_maybe_str(matches, \"sysroot\");\n-    let sysroot_opt = sysroot_opt.map(|m| @Path(*m));\n+    let sysroot_opt = getopts::opt_maybe_str(matches, \"sysroot\").map_move(|m| @Path(m));\n     let target_opt = getopts::opt_maybe_str(matches, \"target\");\n     let target_feature_opt = getopts::opt_maybe_str(matches, \"target-feature\");\n     let save_temps = getopts::opt_present(matches, \"save-temps\");"}, {"sha": "d6584846655d2db01bc28f9cbfdabfcc699a7ce8", "filename": "src/librustc/front/config.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibrustc%2Ffront%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibrustc%2Ffront%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fconfig.rs?ref=98ec79c9576052d9fededd3b72b47d387c1c455d", "patch": "@@ -61,7 +61,9 @@ fn fold_mod(cx: @Context, m: &ast::_mod, fld: @fold::ast_fold) -> ast::_mod {\n         filter_item(cx, *a).chain(|x| fld.fold_item(x))\n     }.collect();\n     let filtered_view_items = do m.view_items.iter().filter_map |a| {\n-        filter_view_item(cx, a).map(|&x| fld.fold_view_item(x))\n+        do filter_view_item(cx, a).map_move |x| {\n+            fld.fold_view_item(x)\n+        }\n     }.collect();\n     ast::_mod {\n         view_items: filtered_view_items,\n@@ -83,7 +85,9 @@ fn fold_foreign_mod(\n ) -> ast::foreign_mod {\n     let filtered_items = nm.items.iter().filter_map(|a| filter_foreign_item(cx, *a)).collect();\n     let filtered_view_items = do nm.view_items.iter().filter_map |a| {\n-        filter_view_item(cx, a).map(|&x| fld.fold_view_item(x))\n+        do filter_view_item(cx, a).map_move |x| {\n+            fld.fold_view_item(x)\n+        }\n     }.collect();\n     ast::foreign_mod {\n         sort: nm.sort,\n@@ -138,7 +142,7 @@ fn fold_block(\n         filter_stmt(cx, *a).chain(|stmt| fld.fold_stmt(stmt))\n     }.collect();\n     let filtered_view_items = do b.view_items.iter().filter_map |a| {\n-        filter_view_item(cx, a).map(|&x| fld.fold_view_item(x))\n+        filter_view_item(cx, a).map(|x| fld.fold_view_item(*x))\n     }.collect();\n     ast::Block {\n         view_items: filtered_view_items,"}, {"sha": "90db3f8edb0a6eec5ba033ecafd0d6d57190262d", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=98ec79c9576052d9fededd3b72b47d387c1c455d", "patch": "@@ -2159,7 +2159,7 @@ impl TypeNames {\n     }\n \n     pub fn find_type(&self, s: &str) -> Option<Type> {\n-        self.named_types.find_equiv(&s).map_consume(|x| Type::from_ref(*x))\n+        self.named_types.find_equiv(&s).map_move(|x| Type::from_ref(*x))\n     }\n \n     // We have a depth count, because we seem to make infinite types."}, {"sha": "a5f541412ded9b84715b777e58f1c4aabdc093eb", "filename": "src/librustc/metadata/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcstore.rs?ref=98ec79c9576052d9fededd3b72b47d387c1c455d", "patch": "@@ -133,7 +133,7 @@ pub fn add_extern_mod_stmt_cnum(cstore: &mut CStore,\n pub fn find_extern_mod_stmt_cnum(cstore: &CStore,\n                                  emod_id: ast::NodeId)\n                        -> Option<ast::CrateNum> {\n-    cstore.extern_mod_crate_map.find(&emod_id).map_consume(|x| *x)\n+    cstore.extern_mod_crate_map.find(&emod_id).map_move(|x| *x)\n }\n \n #[deriving(Clone)]"}, {"sha": "8d3571260184b679ec621756110ac3230e021c0c", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=98ec79c9576052d9fededd3b72b47d387c1c455d", "patch": "@@ -198,8 +198,8 @@ fn item_def_id(d: ebml::Doc, cdata: cmd) -> ast::def_id {\n }\n \n fn get_provided_source(d: ebml::Doc, cdata: cmd) -> Option<ast::def_id> {\n-    do reader::maybe_get_doc(d, tag_item_method_provided_source).map |doc| {\n-        translate_def_id(cdata, reader::with_doc_data(*doc, parse_def_id))\n+    do reader::maybe_get_doc(d, tag_item_method_provided_source).map_move |doc| {\n+        translate_def_id(cdata, reader::with_doc_data(doc, parse_def_id))\n     }\n }\n \n@@ -265,10 +265,10 @@ fn item_ty_param_defs(item: ebml::Doc, tcx: ty::ctxt, cdata: cmd,\n }\n \n fn item_ty_region_param(item: ebml::Doc) -> Option<ty::region_variance> {\n-    reader::maybe_get_doc(item, tag_region_param).map(|doc| {\n-        let mut decoder = reader::Decoder(*doc);\n+    do reader::maybe_get_doc(item, tag_region_param).map_move |doc| {\n+        let mut decoder = reader::Decoder(doc);\n         Decodable::decode(&mut decoder)\n-    })\n+    }\n }\n \n fn item_ty_param_count(item: ebml::Doc) -> uint {\n@@ -415,7 +415,7 @@ pub fn get_impl_trait(cdata: cmd,\n                        tcx: ty::ctxt) -> Option<@ty::TraitRef>\n {\n     let item_doc = lookup_item(id, cdata.data);\n-    do reader::maybe_get_doc(item_doc, tag_item_trait_ref).map |&tp| {\n+    do reader::maybe_get_doc(item_doc, tag_item_trait_ref).map_move |tp| {\n         @doc_trait_ref(tp, tcx, cdata)\n     }\n }"}, {"sha": "d410021063c238496b76f4ce94ce296d7468a7b6", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=98ec79c9576052d9fededd3b72b47d387c1c455d", "patch": "@@ -286,13 +286,15 @@ pub fn opt_loan_path(cmt: mc::cmt) -> Option<@LoanPath> {\n         }\n \n         mc::cat_deref(cmt_base, _, _) => {\n-            opt_loan_path(cmt_base).map(\n-                |&lp| @LpExtend(lp, cmt.mutbl, LpDeref))\n+            do opt_loan_path(cmt_base).map_move |lp| {\n+                @LpExtend(lp, cmt.mutbl, LpDeref)\n+            }\n         }\n \n         mc::cat_interior(cmt_base, ik) => {\n-            opt_loan_path(cmt_base).map(\n-                |&lp| @LpExtend(lp, cmt.mutbl, LpInterior(ik)))\n+            do opt_loan_path(cmt_base).map_move |lp| {\n+                @LpExtend(lp, cmt.mutbl, LpInterior(ik))\n+            }\n         }\n \n         mc::cat_downcast(cmt_base) |"}, {"sha": "3b56764f2fcad1afb0f38f41df22a46f744d794c", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=98ec79c9576052d9fededd3b72b47d387c1c455d", "patch": "@@ -493,9 +493,9 @@ pub fn compare_lit_exprs(tcx: middle::ty::ctxt, a: &expr, b: &expr) -> Option<in\n }\n \n pub fn lit_expr_eq(tcx: middle::ty::ctxt, a: &expr, b: &expr) -> Option<bool> {\n-    compare_lit_exprs(tcx, a, b).map(|&val| val == 0)\n+    compare_lit_exprs(tcx, a, b).map_move(|val| val == 0)\n }\n \n pub fn lit_eq(a: &lit, b: &lit) -> Option<bool> {\n-    compare_const_vals(&lit_to_const(a), &lit_to_const(b)).map(|&val| val == 0)\n+    compare_const_vals(&lit_to_const(a), &lit_to_const(b)).map_move(|val| val == 0)\n }"}, {"sha": "42bc435a58a944c48c30bf1b914a4a677c82784f", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=98ec79c9576052d9fededd3b72b47d387c1c455d", "patch": "@@ -393,7 +393,7 @@ impl<'self> LanguageItemCollector<'self> {\n             return;    // Didn't match.\n         }\n \n-        let item_index = self.item_refs.find(&value).map(|x| **x);\n+        let item_index = self.item_refs.find(&value).map_move(|x| *x);\n         // prevent borrow checker from considering   ^~~~~~~~~~~\n         // self to be borrowed (annoying)\n "}, {"sha": "b39616304906bb4a02a4936c74091446bff12a57", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=98ec79c9576052d9fededd3b72b47d387c1c455d", "patch": "@@ -607,9 +607,9 @@ impl Liveness {\n         match expr.node {\n           expr_path(_) => {\n             let def = self.tcx.def_map.get_copy(&expr.id);\n-            moves::moved_variable_node_id_from_def(def).map(\n-                |rdef| self.variable(*rdef, expr.span)\n-            )\n+            do moves::moved_variable_node_id_from_def(def).map_move |rdef| {\n+                self.variable(rdef, expr.span)\n+            }\n           }\n           _ => None\n         }\n@@ -623,9 +623,9 @@ impl Liveness {\n                                  -> Option<Variable> {\n         match self.tcx.def_map.find(&node_id) {\n           Some(&def) => {\n-            moves::moved_variable_node_id_from_def(def).map(\n-                |rdef| self.variable(*rdef, span)\n-            )\n+            do moves::moved_variable_node_id_from_def(def).map_move |rdef| {\n+                self.variable(rdef, span)\n+            }\n           }\n           None => {\n             self.tcx.sess.span_bug("}, {"sha": "4da22be4428e271f60b8de66ad1da2f1c440a853", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=98ec79c9576052d9fededd3b72b47d387c1c455d", "patch": "@@ -111,7 +111,7 @@ impl RegionMaps {\n     pub fn opt_encl_scope(&self, id: ast::NodeId) -> Option<ast::NodeId> {\n         //! Returns the narrowest scope that encloses `id`, if any.\n \n-        self.scope_map.find(&id).map(|&x| *x)\n+        self.scope_map.find(&id).map_move(|x| *x)\n     }\n \n     pub fn encl_scope(&self, id: ast::NodeId) -> ast::NodeId {\n@@ -579,8 +579,7 @@ impl DetermineRpCtxt {\n     /// the new variance is joined with the old variance.\n     pub fn add_rp(&mut self, id: ast::NodeId, variance: region_variance) {\n         assert!(id != 0);\n-        let old_variance = self.region_paramd_items.find(&id).\n-                                map_consume(|x| *x);\n+        let old_variance = self.region_paramd_items.find(&id).map_move(|x| *x);\n         let joined_variance = match old_variance {\n           None => variance,\n           Some(v) => join_variance(v, variance)"}, {"sha": "da0ba1558c9bd988f16bab7b6cdae49fb047c583", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=98ec79c9576052d9fededd3b72b47d387c1c455d", "patch": "@@ -3358,7 +3358,7 @@ impl Resolver {\n                   // item, it's ok\n                   match def {\n                     def_ty_param(did, _)\n-                        if self.def_map.find(&did.node).map_consume(|x| *x)\n+                        if self.def_map.find(&did.node).map_move(|x| *x)\n                             == Some(def_typaram_binder(item_id)) => {\n                       // ok\n                     }"}, {"sha": "dcaa141cbc2890f144fae2a3067cfe74fd1a4126", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=98ec79c9576052d9fededd3b72b47d387c1c455d", "patch": "@@ -92,7 +92,7 @@ pub use middle::trans::context::task_llcx;\n static task_local_insn_key: local_data::Key<@~[&'static str]> = &local_data::Key;\n \n pub fn with_insn_ctxt(blk: &fn(&[&'static str])) {\n-    let opt = local_data::get(task_local_insn_key, |k| k.map(|&k| *k));\n+    let opt = local_data::get(task_local_insn_key, |k| k.map_move(|k| *k));\n     if opt.is_some() {\n         blk(*opt.unwrap());\n     }\n@@ -108,7 +108,7 @@ pub struct _InsnCtxt { _x: () }\n impl Drop for _InsnCtxt {\n     fn drop(&self) {\n         do local_data::modify(task_local_insn_key) |c| {\n-            do c.map_consume |ctx| {\n+            do c.map_move |ctx| {\n                 let mut ctx = (*ctx).clone();\n                 ctx.pop();\n                 @ctx\n@@ -120,7 +120,7 @@ impl Drop for _InsnCtxt {\n pub fn push_ctxt(s: &'static str) -> _InsnCtxt {\n     debug!(\"new InsnCtxt: %s\", s);\n     do local_data::modify(task_local_insn_key) |c| {\n-        do c.map_consume |ctx| {\n+        do c.map_move |ctx| {\n             let mut ctx = (*ctx).clone();\n             ctx.push(s);\n             @ctx"}, {"sha": "f5fb68a70578c2fcf60536019877e5f00e07d236", "filename": "src/librustc/middle/trans/cabi_mips.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_mips.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_mips.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_mips.rs?ref=98ec79c9576052d9fededd3b72b47d387c1c455d", "patch": "@@ -159,7 +159,7 @@ fn struct_ty(ty: Type,\n              padding: Option<Type>,\n              coerce: bool) -> Type {\n     let size = ty_size(ty) * 8;\n-    let mut fields = padding.map_default(~[], |p| ~[*p]);\n+    let mut fields = padding.map_move_default(~[], |p| ~[p]);\n \n     if coerce {\n         fields = vec::append(fields, coerce_to_int(size));"}, {"sha": "240696ec1908b5a706b5b1da79ef34308b87bf8f", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=98ec79c9576052d9fededd3b72b47d387c1c455d", "patch": "@@ -1010,8 +1010,7 @@ pub fn node_id_type_params(bcx: @mut Block, id: ast::NodeId) -> ~[ty::t] {\n pub fn node_vtables(bcx: @mut Block, id: ast::NodeId)\n                  -> Option<typeck::vtable_res> {\n     let raw_vtables = bcx.ccx().maps.vtable_map.find(&id);\n-    raw_vtables.map(\n-        |&vts| resolve_vtables_in_fn_ctxt(bcx.fcx, *vts))\n+    raw_vtables.map_move(|vts| resolve_vtables_in_fn_ctxt(bcx.fcx, *vts))\n }\n \n pub fn resolve_vtables_in_fn_ctxt(fcx: &FunctionContext, vts: typeck::vtable_res)"}, {"sha": "56ba1ae1694b6684f3a02681c69318032d7abb36", "filename": "src/librustc/middle/trans/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs?ref=98ec79c9576052d9fededd3b72b47d387c1c455d", "patch": "@@ -241,7 +241,7 @@ impl Drop for CrateContext {\n static task_local_llcx_key: local_data::Key<@ContextRef> = &local_data::Key;\n \n pub fn task_llcx() -> ContextRef {\n-    let opt = local_data::get(task_local_llcx_key, |k| k.map(|&k| *k));\n+    let opt = local_data::get(task_local_llcx_key, |k| k.map_move(|k| *k));\n     *opt.expect(\"task-local LLVMContextRef wasn't ever set!\")\n }\n "}, {"sha": "9be01ef1db94f639da751f44bb3ed3ef253e31bd", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=98ec79c9576052d9fededd3b72b47d387c1c455d", "patch": "@@ -162,7 +162,7 @@ pub fn trans_method_callee(bcx: @mut Block,\n                 data: Method(MethodData {\n                     llfn: callee_fn.llfn,\n                     llself: val,\n-                    temp_cleanup: temp_cleanups.head_opt().map(|&v| *v),\n+                    temp_cleanup: temp_cleanups.head_opt().map_move(|v| *v),\n                     self_ty: node_id_type(bcx, this.id),\n                     self_mode: mentry.self_mode,\n                 })\n@@ -339,7 +339,7 @@ pub fn trans_monomorphized_callee(bcx: @mut Block,\n               data: Method(MethodData {\n                   llfn: llfn_val,\n                   llself: llself_val,\n-                  temp_cleanup: temp_cleanups.head_opt().map(|&v| *v),\n+                  temp_cleanup: temp_cleanups.head_opt().map_move(|v| *v),\n                   self_ty: node_id_type(bcx, base.id),\n                   self_mode: mentry.self_mode,\n               })"}, {"sha": "849c35cdd2c038eec2662fbf09c77466a2edcfb0", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=98ec79c9576052d9fededd3b72b47d387c1c455d", "patch": "@@ -3557,7 +3557,7 @@ pub fn def_has_ty_params(def: ast::def) -> bool {\n \n pub fn provided_source(cx: ctxt, id: ast::def_id)\n     -> Option<ast::def_id> {\n-    cx.provided_method_sources.find(&id).map(|x| **x)\n+    cx.provided_method_sources.find(&id).map_move(|x| *x)\n }\n \n pub fn provided_trait_methods(cx: ctxt, id: ast::def_id) -> ~[@Method] {\n@@ -3710,8 +3710,9 @@ fn struct_ctor_id(cx: ctxt, struct_did: ast::def_id) -> Option<ast::def_id> {\n         Some(&ast_map::node_item(item, _)) => {\n             match item.node {\n                 ast::item_struct(struct_def, _) => {\n-                    struct_def.ctor_id.map(|ctor_id|\n-                        ast_util::local_def(*ctor_id))\n+                    do struct_def.ctor_id.map_move |ctor_id| {\n+                        ast_util::local_def(ctor_id)\n+                    }\n                 }\n                 _ => cx.sess.bug(\"called struct_ctor_id on non-struct\")\n             }\n@@ -4443,15 +4444,15 @@ pub fn count_traits_and_supertraits(tcx: ctxt,\n }\n \n pub fn get_tydesc_ty(tcx: ctxt) -> Result<t, ~str> {\n-    do tcx.lang_items.require(TyDescStructLangItem).map |tydesc_lang_item| {\n-        tcx.intrinsic_defs.find_copy(tydesc_lang_item)\n+    do tcx.lang_items.require(TyDescStructLangItem).map_move |tydesc_lang_item| {\n+        tcx.intrinsic_defs.find_copy(&tydesc_lang_item)\n             .expect(\"Failed to resolve TyDesc\")\n     }\n }\n \n pub fn get_opaque_ty(tcx: ctxt) -> Result<t, ~str> {\n-    do tcx.lang_items.require(OpaqueStructLangItem).map |opaque_lang_item| {\n-        tcx.intrinsic_defs.find_copy(opaque_lang_item)\n+    do tcx.lang_items.require(OpaqueStructLangItem).map_move |opaque_lang_item| {\n+        tcx.intrinsic_defs.find_copy(&opaque_lang_item)\n             .expect(\"Failed to resolve Opaque\")\n     }\n }"}, {"sha": "750bd506f3e48583a66c7740b1aeb1806dba6d57", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=98ec79c9576052d9fededd3b72b47d387c1c455d", "patch": "@@ -621,9 +621,9 @@ fn ty_of_method_or_bare_fn<AC:AstConv,RS:region_scope + Clone + 'static>(\n         in_binding_rscope(rscope,\n                           RegionParamNames(bound_lifetime_names.clone()));\n \n-    let opt_transformed_self_ty = opt_self_info.map(|&self_info| {\n+    let opt_transformed_self_ty = do opt_self_info.map_move |self_info| {\n         transform_self_ty(this, &rb, self_info)\n-    });\n+    };\n \n     let input_tys = decl.inputs.map(|a| ty_of_arg(this, &rb, a, None));\n "}, {"sha": "d8a9350e695d70404f3250bb904ab818d0eebb49", "filename": "src/librustc/middle/typeck/check/_match.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs?ref=98ec79c9576052d9fededd3b72b47d387c1c455d", "patch": "@@ -158,9 +158,9 @@ pub fn check_pat_variant(pcx: &pat_ctxt, pat: @ast::pat, path: &ast::Path,\n                 None => {\n                     fcx.infcx().type_error_message_str_with_expected(pat.span,\n                                                        |expected, actual| {\n-                                                       expected.map_default(~\"\", |e| {\n+                                                       expected.map_move_default(~\"\", |e| {\n                         fmt!(\"mismatched types: expected `%s` but found %s\",\n-                             *e, actual)})},\n+                             e, actual)})},\n                              Some(expected), ~\"a structure pattern\",\n                              None);\n                     fcx.write_error(pat.id);\n@@ -201,9 +201,9 @@ pub fn check_pat_variant(pcx: &pat_ctxt, pat: @ast::pat, path: &ast::Path,\n         _ => {\n             fcx.infcx().type_error_message_str_with_expected(pat.span,\n                                                |expected, actual| {\n-                                               expected.map_default(~\"\", |e| {\n+                                               expected.map_move_default(~\"\", |e| {\n                     fmt!(\"mismatched types: expected `%s` but found %s\",\n-                         *e, actual)})},\n+                         e, actual)})},\n                     Some(expected), ~\"an enum or structure pattern\",\n                     None);\n             fcx.write_error(pat.id);\n@@ -535,9 +535,9 @@ pub fn check_pat(pcx: &pat_ctxt, pat: @ast::pat, expected: ty::t) {\n                     _ => ty::terr_mismatch\n                 };\n                 fcx.infcx().type_error_message_str_with_expected(pat.span, |expected, actual| {\n-                expected.map_default(~\"\", |e| {\n+                expected.map_move_default(~\"\", |e| {\n                     fmt!(\"mismatched types: expected `%s` but found %s\",\n-                                     *e, actual)})}, Some(expected), ~\"tuple\", Some(&type_error));\n+                                     e, actual)})}, Some(expected), ~\"tuple\", Some(&type_error));\n                 fcx.write_error(pat.id);\n             }\n         }\n@@ -584,9 +584,9 @@ pub fn check_pat(pcx: &pat_ctxt, pat: @ast::pat, expected: ty::t) {\n               fcx.infcx().type_error_message_str_with_expected(\n                   pat.span,\n                   |expected, actual| {\n-                      expected.map_default(~\"\", |e| {\n+                      expected.map_move_default(~\"\", |e| {\n                           fmt!(\"mismatched types: expected `%s` but found %s\",\n-                               *e, actual)})},\n+                               e, actual)})},\n                   Some(expected),\n                   ~\"a vector pattern\",\n                   None);\n@@ -642,9 +642,9 @@ pub fn check_pointer_pat(pcx: &pat_ctxt,\n             fcx.infcx().type_error_message_str_with_expected(\n                 span,\n                 |expected, actual| {\n-                    expected.map_default(~\"\", |e| {\n+                    expected.map_move_default(~\"\", |e| {\n                         fmt!(\"mismatched types: expected `%s` but found %s\",\n-                             *e, actual)})},\n+                             e, actual)})},\n                 Some(expected),\n                 fmt!(\"%s pattern\", match pointer_kind {\n                     Managed => \"an @-box\","}, {"sha": "da0e219310fde2b64b3f325b892d7cd5d028acc5", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=98ec79c9576052d9fededd3b72b47d387c1c455d", "patch": "@@ -364,8 +364,8 @@ pub fn check_fn(ccx: @mut CrateCtxt,\n                 |br| ty::re_free(ty::FreeRegion {scope_id: body.id,\n                                                  bound_region: br}));\n         let opt_self_info =\n-            opt_self_info.map(\n-                |si| SelfInfo {self_ty: opt_self_ty.unwrap(), ..*si});\n+            opt_self_info.map_move(\n+                |si| SelfInfo {self_ty: opt_self_ty.unwrap(), .. si});\n         (isr, opt_self_info, fn_sig)\n     };\n \n@@ -536,7 +536,7 @@ pub fn check_method(ccx: @mut CrateCtxt,\n {\n     let method_def_id = local_def(method.id);\n     let method_ty = ty::method(ccx.tcx, method_def_id);\n-    let opt_self_info = method_ty.transformed_self_ty.map(|&ty| {\n+    let opt_self_info = method_ty.transformed_self_ty.map_move(|ty| {\n         SelfInfo {self_ty: ty,\n                   self_id: method.self_id,\n                   span: method.explicit_self.span}\n@@ -557,7 +557,7 @@ pub fn check_no_duplicate_fields(tcx: ty::ctxt,\n \n     for p in fields.iter() {\n         let (id, sp) = *p;\n-        let orig_sp = field_names.find(&id).map_consume(|x| *x);\n+        let orig_sp = field_names.find(&id).map_move(|x| *x);\n         match orig_sp {\n             Some(orig_sp) => {\n                 tcx.sess.span_err(sp, fmt!(\"Duplicate field name %s in record type declaration\",\n@@ -601,7 +601,7 @@ pub fn check_item(ccx: @mut CrateCtxt, it: @ast::item) {\n         check_bare_fn(ccx, decl, body, it.id, None);\n       }\n       ast::item_impl(_, _, _, ref ms) => {\n-        let rp = ccx.tcx.region_paramd_items.find(&it.id).map_consume(|x| *x);\n+        let rp = ccx.tcx.region_paramd_items.find(&it.id).map_move(|x| *x);\n         debug!(\"item_impl %s with id %d rp %?\",\n                ccx.tcx.sess.str_of(it.ident), it.id, rp);\n         for m in ms.iter() {\n@@ -1877,8 +1877,7 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n         for field in ast_fields.iter() {\n             let mut expected_field_type = ty::mk_err();\n \n-            let pair = class_field_map.find(&field.ident).\n-                                       map_consume(|x| *x);\n+            let pair = class_field_map.find(&field.ident).map_move(|x| *x);\n             match pair {\n                 None => {\n                     tcx.sess.span_err(\n@@ -1962,7 +1961,7 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n         if class_id.crate == ast::LOCAL_CRATE {\n             region_parameterized =\n                 tcx.region_paramd_items.find(&class_id.node).\n-                    map_consume(|x| *x);\n+                    map_move(|x| *x);\n             match tcx.items.find(&class_id.node) {\n                 Some(&ast_map::node_item(@ast::item {\n                         node: ast::item_struct(_, ref generics),\n@@ -2050,7 +2049,7 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n         let raw_type;\n         if enum_id.crate == ast::LOCAL_CRATE {\n             region_parameterized =\n-                tcx.region_paramd_items.find(&enum_id.node).map_consume(|x| *x);\n+                tcx.region_paramd_items.find(&enum_id.node).map_move(|x| *x);\n             match tcx.items.find(&enum_id.node) {\n                 Some(&ast_map::node_item(@ast::item {\n                         node: ast::item_enum(_, ref generics),"}, {"sha": "cb4827104b6275e7f63506060f1146cac7430ec1", "filename": "src/librustc/middle/typeck/check/regionmanip.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs?ref=98ec79c9576052d9fededd3b72b47d387c1c455d", "patch": "@@ -40,9 +40,9 @@ pub fn replace_bound_regions_in_fn_sig(\n \n     debug!(\"replace_bound_regions_in_fn_sig(self_ty=%?, fn_sig=%s, \\\n             all_tys=%?)\",\n-           opt_self_ty.map(|&t| ppaux::ty_to_str(tcx, t)),\n+           opt_self_ty.map(|t| ppaux::ty_to_str(tcx, *t)),\n            ppaux::fn_sig_to_str(tcx, fn_sig),\n-           all_tys.map(|&t| ppaux::ty_to_str(tcx, t)));\n+           all_tys.map(|t| ppaux::ty_to_str(tcx, *t)));\n     let _i = indenter();\n \n     let isr = do create_bound_region_mapping(tcx, isr, all_tys) |br| {\n@@ -52,12 +52,12 @@ pub fn replace_bound_regions_in_fn_sig(\n     let new_fn_sig = ty::fold_sig(fn_sig, |t| {\n         replace_bound_regions(tcx, isr, t)\n     });\n-    let new_self_ty = opt_self_ty.map(|&t| replace_bound_regions(tcx, isr, t));\n+    let new_self_ty = opt_self_ty.map(|t| replace_bound_regions(tcx, isr, *t));\n \n     debug!(\"result of replace_bound_regions_in_fn_sig: \\\n             new_self_ty=%?, \\\n             fn_sig=%s\",\n-           new_self_ty.map(|&t| ppaux::ty_to_str(tcx, t)),\n+           new_self_ty.map(|t| ppaux::ty_to_str(tcx, *t)),\n            ppaux::fn_sig_to_str(tcx, &new_fn_sig));\n \n     return (isr, new_self_ty, new_fn_sig);"}, {"sha": "700d96727eae2f9a0f3700e0a9f4c91b09c379df", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=98ec79c9576052d9fededd3b72b47d387c1c455d", "patch": "@@ -131,9 +131,7 @@ fn lookup_vtables_for_param(vcx: &VtableContext,\n     // ty is the value supplied for the type parameter A...\n     let mut param_result = ~[];\n \n-    do ty::each_bound_trait_and_supertraits(\n-        tcx, type_param_bounds.trait_bounds) |trait_ref|\n-    {\n+    do ty::each_bound_trait_and_supertraits(tcx, type_param_bounds.trait_bounds) |trait_ref| {\n         // ...and here trait_ref is each bound that was declared on A,\n         // expressed in terms of the type parameters.\n "}, {"sha": "907a076b1a1efce000e622877195440379157c62", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=98ec79c9576052d9fededd3b72b47d387c1c455d", "patch": "@@ -198,7 +198,7 @@ pub fn ensure_trait_methods(ccx: &CrateCtxt,\n                             trait_id: ast::NodeId)\n {\n     let tcx = ccx.tcx;\n-    let region_paramd = tcx.region_paramd_items.find(&trait_id).map(|&x| *x);\n+    let region_paramd = tcx.region_paramd_items.find(&trait_id).map_move(|x| *x);\n     match tcx.items.get_copy(&trait_id) {\n         ast_map::node_item(@ast::item {\n             node: ast::item_trait(ref generics, _, ref ms),\n@@ -817,7 +817,7 @@ pub fn ensure_no_ty_param_bounds(ccx: &CrateCtxt,\n \n pub fn convert(ccx: &CrateCtxt, it: &ast::item) {\n     let tcx = ccx.tcx;\n-    let rp = tcx.region_paramd_items.find(&it.id).map_consume(|x| *x);\n+    let rp = tcx.region_paramd_items.find(&it.id).map_move(|x| *x);\n     debug!(\"convert: item %s with id %d rp %?\",\n            tcx.sess.str_of(it.ident), it.id, rp);\n     match it.node {\n@@ -1020,7 +1020,7 @@ pub fn trait_def_of_item(ccx: &CrateCtxt, it: &ast::item) -> @ty::TraitDef {\n       Some(&def) => return def,\n       _ => {}\n     }\n-    let rp = tcx.region_paramd_items.find(&it.id).map_consume(|x| *x);\n+    let rp = tcx.region_paramd_items.find(&it.id).map_move(|x| *x);\n     match it.node {\n         ast::item_trait(ref generics, _, _) => {\n             let self_ty = ty::mk_self(tcx, def_id);\n@@ -1049,7 +1049,7 @@ pub fn ty_of_item(ccx: &CrateCtxt, it: &ast::item)\n       Some(&tpt) => return tpt,\n       _ => {}\n     }\n-    let rp = tcx.region_paramd_items.find(&it.id).map_consume(|x| *x);\n+    let rp = tcx.region_paramd_items.find(&it.id).map_move(|x| *x);\n     match it.node {\n       ast::item_static(ref t, _, _) => {\n         let typ = ccx.to_ty(&empty_rscope, t);\n@@ -1086,7 +1086,7 @@ pub fn ty_of_item(ccx: &CrateCtxt, it: &ast::item)\n           None => { }\n         }\n \n-        let rp = tcx.region_paramd_items.find(&it.id).map_consume(|x| *x);\n+        let rp = tcx.region_paramd_items.find(&it.id).map_move(|x| *x);\n         let region_parameterization =\n             RegionParameterization::from_variance_and_generics(rp, generics);\n         let tpt = {"}, {"sha": "7fa7daf614901006d54b2cc334c962752007d925", "filename": "src/librustc/middle/typeck/infer/mod.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs?ref=98ec79c9576052d9fededd3b72b47d387c1c455d", "patch": "@@ -716,12 +716,13 @@ impl InferCtxt {\n                                                 err: Option<&ty::type_err>) {\n         debug!(\"hi! expected_ty = %?, actual_ty = %s\", expected_ty, actual_ty);\n \n-        let error_str = err.map_default(~\"\", |t_err|\n-                         fmt!(\" (%s)\",\n-                              ty::type_err_to_str(self.tcx, *t_err)));\n-        let resolved_expected = expected_ty.map(|&e_ty|\n-                                                { self.resolve_type_vars_if_possible(e_ty) });\n-        if !resolved_expected.map_default(false, |&e| { ty::type_is_error(e) }) {\n+        let error_str = do err.map_move_default(~\"\") |t_err| {\n+            fmt!(\" (%s)\", ty::type_err_to_str(self.tcx, t_err))\n+        };\n+        let resolved_expected = do expected_ty.map_move |e_ty| {\n+            self.resolve_type_vars_if_possible(e_ty)\n+        };\n+        if !resolved_expected.map_move_default(false, |e| { ty::type_is_error(e) }) {\n             match resolved_expected {\n                 None => self.tcx.sess.span_err(sp,\n                             fmt!(\"%s%s\", mk_msg(None, actual_ty), error_str)),"}, {"sha": "222433787f0abbee9cd98cec4b33fd7caeb101d1", "filename": "src/librustc/rustc.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibrustc%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibrustc%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rs?ref=98ec79c9576052d9fededd3b72b47d387c1c455d", "patch": "@@ -249,13 +249,12 @@ pub fn run_compiler(args: &~[~str], demitter: diagnostic::Emitter) {\n \n     let sopts = build_session_options(binary, matches, demitter);\n     let sess = build_session(sopts, demitter);\n-    let odir = getopts::opt_maybe_str(matches, \"out-dir\");\n-    let odir = odir.map(|o| Path(*o));\n-    let ofile = getopts::opt_maybe_str(matches, \"o\");\n-    let ofile = ofile.map(|o| Path(*o));\n+    let odir = getopts::opt_maybe_str(matches, \"out-dir\").map_move(|o| Path(o));\n+    let ofile = getopts::opt_maybe_str(matches, \"o\").map_move(|o| Path(o));\n     let cfg = build_configuration(sess, binary, &input);\n-    let pretty = getopts::opt_default(matches, \"pretty\", \"normal\").map(\n-                    |a| parse_pretty(sess, *a));\n+    let pretty = do getopts::opt_default(matches, \"pretty\", \"normal\").map_move |a| {\n+        parse_pretty(sess, a)\n+    };\n     match pretty {\n       Some::<pp_mode>(ppm) => {\n         pretty_print_input(sess, cfg, &input, ppm);"}, {"sha": "3598eb7c0fb9b217d8af908ae888c112567382b1", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=98ec79c9576052d9fededd3b72b47d387c1c455d", "patch": "@@ -140,16 +140,16 @@ fn config_from_opts(\n     let result = result::Ok(config);\n     let result = do result.chain |config| {\n         let output_dir = getopts::opt_maybe_str(matches, opt_output_dir());\n-        let output_dir = output_dir.map(|s| Path(*s));\n+        let output_dir = output_dir.map_move(|s| Path(s));\n         result::Ok(Config {\n             output_dir: output_dir.unwrap_or_default(config.output_dir.clone()),\n             .. config\n         })\n     };\n     let result = do result.chain |config| {\n         let output_format = getopts::opt_maybe_str(matches, opt_output_format());\n-        do output_format.map_default(result::Ok(config.clone())) |output_format| {\n-            do parse_output_format(*output_format).chain |output_format| {\n+        do output_format.map_move_default(result::Ok(config.clone())) |output_format| {\n+            do parse_output_format(output_format).chain |output_format| {\n                 result::Ok(Config {\n                     output_format: output_format,\n                     .. config.clone()\n@@ -160,8 +160,8 @@ fn config_from_opts(\n     let result = do result.chain |config| {\n         let output_style =\n             getopts::opt_maybe_str(matches, opt_output_style());\n-        do output_style.map_default(result::Ok(config.clone())) |output_style| {\n-            do parse_output_style(*output_style).chain |output_style| {\n+        do output_style.map_move_default(result::Ok(config.clone())) |output_style| {\n+            do parse_output_style(output_style).chain |output_style| {\n                 result::Ok(Config {\n                     output_style: output_style,\n                     .. config.clone()"}, {"sha": "0d7ec34243da410e0c16f364bcdfbe6426f040a3", "filename": "src/librustdoc/tystr_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibrustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibrustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftystr_pass.rs?ref=98ec79c9576052d9fededd3b72b47d387c1c455d", "patch": "@@ -260,9 +260,9 @@ fn fold_impl(\n                 }, _) => {\n                     let bounds = pprust::generics_to_str(generics, extract::interner());\n                     let bounds = if bounds.is_empty() { None } else { Some(bounds) };\n-                    let trait_types = opt_trait_type.map_default(~[], |p| {\n+                    let trait_types = do opt_trait_type.map_default(~[]) |p| {\n                         ~[pprust::path_to_str(&p.path, extract::interner())]\n-                    });\n+                    };\n                     (bounds,\n                      trait_types,\n                      Some(pprust::ty_to_str("}, {"sha": "6b61b099d23bec14fc68eeff4d4bab3e12a81a44", "filename": "src/librusti/rusti.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibrusti%2Frusti.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibrusti%2Frusti.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Frusti.rs?ref=98ec79c9576052d9fededd3b72b47d387c1c455d", "patch": "@@ -203,7 +203,7 @@ fn run(mut program: ~Program, binary: ~str, lib_search_paths: ~[~str],\n                 }\n             }\n         }\n-        result = do blk.expr.map_consume |e| {\n+        result = do blk.expr.map_move |e| {\n             do with_pp(intr) |pp, _| { pprust::print_expr(pp, e); }\n         };\n     }"}, {"sha": "3484a5e7d6e8b084180c78feca838646a932bb81", "filename": "src/libstd/hashmap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibstd%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibstd%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhashmap.rs?ref=98ec79c9576052d9fededd3b72b47d387c1c455d", "patch": "@@ -238,7 +238,7 @@ impl<K:Hash + Eq,V> HashMap<K, V> {\n         let len_buckets = self.buckets.len();\n         let bucket = self.buckets[idx].take();\n \n-        let value = do bucket.map_consume |bucket| {\n+        let value = do bucket.map_move |bucket| {\n             bucket.value\n         };\n \n@@ -479,7 +479,7 @@ impl<K: Hash + Eq, V> HashMap<K, V> {\n impl<K: Hash + Eq, V: Clone> HashMap<K, V> {\n     /// Like `find`, but returns a copy of the value.\n     pub fn find_copy(&self, k: &K) -> Option<V> {\n-        self.find(k).map_consume(|v| (*v).clone())\n+        self.find(k).map_move(|v| (*v).clone())\n     }\n \n     /// Like `get`, but returns a copy of the value."}, {"sha": "29f54bd10fba152bffdd3805c9d5aa6936400eb0", "filename": "src/libstd/iterator.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibstd%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibstd%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiterator.rs?ref=98ec79c9576052d9fededd3b72b47d387c1c455d", "patch": "@@ -674,7 +674,7 @@ impl<A, T: Iterator<A>> IteratorUtil<A> for T {\n                     Some((y, y_val))\n                 }\n             }\n-        }).map_consume(|(x, _)| x)\n+        }).map_move(|(x, _)| x)\n     }\n \n     #[inline]\n@@ -689,7 +689,7 @@ impl<A, T: Iterator<A>> IteratorUtil<A> for T {\n                     Some((y, y_val))\n                 }\n             }\n-        }).map_consume(|(x, _)| x)\n+        }).map_move(|(x, _)| x)\n     }\n }\n \n@@ -1382,7 +1382,7 @@ impl<'self, A, T: Iterator<A>, B, U: Iterator<B>> Iterator<B> for\n                     return Some(x)\n                 }\n             }\n-            match self.iter.next().map_consume(|x| (self.f)(x)) {\n+            match self.iter.next().map_move(|x| (self.f)(x)) {\n                 None => return self.backiter.chain_mut_ref(|it| it.next()),\n                 next => self.frontiter = next,\n             }\n@@ -1414,7 +1414,7 @@ impl<'self,\n                     y => return y\n                 }\n             }\n-            match self.iter.next_back().map_consume(|x| (self.f)(x)) {\n+            match self.iter.next_back().map_move(|x| (self.f)(x)) {\n                 None => return self.frontiter.chain_mut_ref(|it| it.next_back()),\n                 next => self.backiter = next,\n             }"}, {"sha": "a73809d202c44c7eb64a47be72c228bc159f7e47", "filename": "src/libstd/local_data.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibstd%2Flocal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibstd%2Flocal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flocal_data.rs?ref=98ec79c9576052d9fededd3b72b47d387c1c455d", "patch": "@@ -110,24 +110,24 @@ fn test_tls_multitask() {\n     set(my_key, @~\"parent data\");\n     do task::spawn {\n         // TLS shouldn't carry over.\n-        assert!(get(my_key, |k| k.map(|&k| *k)).is_none());\n+        assert!(get(my_key, |k| k.map_move(|k| *k)).is_none());\n         set(my_key, @~\"child data\");\n-        assert!(*(get(my_key, |k| k.map(|&k| *k)).unwrap()) ==\n+        assert!(*(get(my_key, |k| k.map_move(|k| *k)).unwrap()) ==\n                 ~\"child data\");\n         // should be cleaned up for us\n     }\n     // Must work multiple times\n-    assert!(*(get(my_key, |k| k.map(|&k| *k)).unwrap()) == ~\"parent data\");\n-    assert!(*(get(my_key, |k| k.map(|&k| *k)).unwrap()) == ~\"parent data\");\n-    assert!(*(get(my_key, |k| k.map(|&k| *k)).unwrap()) == ~\"parent data\");\n+    assert!(*(get(my_key, |k| k.map_move(|k| *k)).unwrap()) == ~\"parent data\");\n+    assert!(*(get(my_key, |k| k.map_move(|k| *k)).unwrap()) == ~\"parent data\");\n+    assert!(*(get(my_key, |k| k.map_move(|k| *k)).unwrap()) == ~\"parent data\");\n }\n \n #[test]\n fn test_tls_overwrite() {\n     static my_key: Key<@~str> = &Key;\n     set(my_key, @~\"first data\");\n     set(my_key, @~\"next data\"); // Shouldn't leak.\n-    assert!(*(get(my_key, |k| k.map(|&k| *k)).unwrap()) == ~\"next data\");\n+    assert!(*(get(my_key, |k| k.map_move(|k| *k)).unwrap()) == ~\"next data\");\n }\n \n #[test]"}, {"sha": "66b30d8dd031c288eb2200fd4f35d69553f5a35b", "filename": "src/libstd/option.rs", "status": "modified", "additions": 10, "deletions": 24, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibstd%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibstd%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foption.rs?ref=98ec79c9576052d9fededd3b72b47d387c1c455d", "patch": "@@ -208,6 +208,12 @@ impl<T> Option<T> {\n         match *self { Some(ref mut x) => Some(f(x)), None => None }\n     }\n \n+    /// Applies a function to the contained value or returns a default\n+    #[inline]\n+    pub fn map_default<'a, U>(&'a self, def: U, f: &fn(&'a T) -> U) -> U {\n+        match *self { None => def, Some(ref t) => f(t) }\n+    }\n+\n     /// Maps a `Some` value from one type to another by a mutable reference,\n     /// or returns a default value.\n     #[inline]\n@@ -218,21 +224,15 @@ impl<T> Option<T> {\n     /// As `map`, but consumes the option and gives `f` ownership to avoid\n     /// copying.\n     #[inline]\n-    pub fn map_consume<U>(self, f: &fn(v: T) -> U) -> Option<U> {\n-        match self { None => None, Some(v) => Some(f(v)) }\n-    }\n-\n-    /// Applies a function to the contained value or returns a default\n-    #[inline]\n-    pub fn map_default<'a, U>(&'a self, def: U, f: &fn(&'a T) -> U) -> U {\n-        match *self { None => def, Some(ref t) => f(t) }\n+    pub fn map_move<U>(self, f: &fn(T) -> U) -> Option<U> {\n+        match self { Some(x) => Some(f(x)), None => None }\n     }\n \n     /// As `map_default`, but consumes the option and gives `f`\n     /// ownership to avoid copying.\n     #[inline]\n-    pub fn map_consume_default<U>(self, def: U, f: &fn(v: T) -> U) -> U {\n-        match self { None => def, Some(v) => f(v) }\n+    pub fn map_move_default<U>(self, def: U, f: &fn(T) -> U) -> U {\n+        match self { None => def, Some(t) => f(t) }\n     }\n \n     /// Take the value out of the option, leaving a `None` in its place.\n@@ -241,20 +241,6 @@ impl<T> Option<T> {\n         util::replace(self, None)\n     }\n \n-    /// As `map_consume`, but swaps a None into the original option rather\n-    /// than consuming it by-value.\n-    #[inline]\n-    pub fn take_map<U>(&mut self, blk: &fn(T) -> U) -> Option<U> {\n-        self.take().map_consume(blk)\n-    }\n-\n-    /// As `map_consume_default`, but swaps a None into the original option\n-    /// rather than consuming it by-value.\n-    #[inline]\n-    pub fn take_map_default<U> (&mut self, def: U, blk: &fn(T) -> U) -> U {\n-        self.take().map_consume_default(def, blk)\n-    }\n-\n     /// Apply a function to the contained value or do nothing.\n     /// Returns true if the contained value was mutated.\n     pub fn mutate(&mut self, f: &fn(T) -> T) -> bool {"}, {"sha": "f246a61a4d580d8308aaa93e0885a37a6842a7f5", "filename": "src/libstd/os.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=98ec79c9576052d9fededd3b72b47d387c1c455d", "patch": "@@ -498,9 +498,7 @@ pub fn self_exe_path() -> Option<Path> {\n         }\n     }\n \n-    do load_self().map |pth| {\n-        Path(*pth).dir_path()\n-    }\n+    load_self().map_move(|path| Path(path).dir_path())\n }\n \n "}, {"sha": "3e429c6116d4c60d2c7aa191170405433b158593", "filename": "src/libstd/result.rs", "status": "modified", "additions": 52, "deletions": 4, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibstd%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibstd%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fresult.rs?ref=98ec79c9576052d9fededd3b72b47d387c1c455d", "patch": "@@ -149,6 +149,40 @@ impl<T, E: ToStr> Result<T, E> {\n         }\n     }\n \n+    /// Call a method based on a previous result\n+    ///\n+    /// If `self` is `Ok` then the value is extracted and passed to `op`\n+    /// whereupon `op`s result is wrapped in `Ok` and returned. if `self` is\n+    /// `Err` then it is immediately returned.  This function can be used to\n+    /// compose the results of two functions.\n+    ///\n+    /// Example:\n+    ///\n+    ///     let res = do read_file(file).map_move |buf| {\n+    ///         parse_bytes(buf)\n+    ///     }\n+    #[inline]\n+    pub fn map_move<U>(self, op: &fn(T) -> U) -> Result<U,E> {\n+        match self {\n+          Ok(t) => Ok(op(t)),\n+          Err(e) => Err(e)\n+        }\n+    }\n+\n+    /// Call a method based on a previous result\n+    ///\n+    /// If `self` is `Err` then the value is extracted and passed to `op`\n+    /// whereupon `op`s result is wrapped in an `Err` and returned. if `self` is\n+    /// `Ok` then it is immediately returned.  This function can be used to pass\n+    /// through a successful result while handling an error.\n+    #[inline]\n+    pub fn map_err_move<F>(self, op: &fn(E) -> F) -> Result<T,F> {\n+        match self {\n+          Ok(t) => Ok(t),\n+          Err(e) => Err(op(e))\n+        }\n+    }\n+\n     /// Call a method based on a previous result\n     ///\n     /// If `self` is `Ok` then the value is extracted and passed to `op`\n@@ -312,7 +346,9 @@ pub fn iter_vec2<S, T, U: ToStr>(ss: &[S], ts: &[T],\n #[cfg(test)]\n mod tests {\n     use super::*;\n+\n     use either;\n+    use str::OwnedStr;\n \n     pub fn op1() -> Result<int, ~str> { Ok(666) }\n \n@@ -359,14 +395,26 @@ mod tests {\n \n     #[test]\n     pub fn test_impl_map() {\n-        assert_eq!(Ok::<~str, ~str>(~\"a\").map(|_x| ~\"b\"), Ok(~\"b\"));\n-        assert_eq!(Err::<~str, ~str>(~\"a\").map(|_x| ~\"b\"), Err(~\"a\"));\n+        assert_eq!(Ok::<~str, ~str>(~\"a\").map(|x| (~\"b\").append(*x)), Ok(~\"ba\"));\n+        assert_eq!(Err::<~str, ~str>(~\"a\").map(|x| (~\"b\").append(*x)), Err(~\"a\"));\n     }\n \n     #[test]\n     pub fn test_impl_map_err() {\n-        assert_eq!(Ok::<~str, ~str>(~\"a\").map_err(|_x| ~\"b\"), Ok(~\"a\"));\n-        assert_eq!(Err::<~str, ~str>(~\"a\").map_err(|_x| ~\"b\"), Err(~\"b\"));\n+        assert_eq!(Ok::<~str, ~str>(~\"a\").map_err(|x| (~\"b\").append(*x)), Ok(~\"a\"));\n+        assert_eq!(Err::<~str, ~str>(~\"a\").map_err(|x| (~\"b\").append(*x)), Err(~\"ba\"));\n+    }\n+\n+    #[test]\n+    pub fn test_impl_map_move() {\n+        assert_eq!(Ok::<~str, ~str>(~\"a\").map_move(|x| x + \"b\"), Ok(~\"ab\"));\n+        assert_eq!(Err::<~str, ~str>(~\"a\").map_move(|x| x + \"b\"), Err(~\"a\"));\n+    }\n+\n+    #[test]\n+    pub fn test_impl_map_err_move() {\n+        assert_eq!(Ok::<~str, ~str>(~\"a\").map_err_move(|x| x + \"b\"), Ok(~\"a\"));\n+        assert_eq!(Err::<~str, ~str>(~\"a\").map_err_move(|x| x + \"b\"), Err(~\"ab\"));\n     }\n \n     #[test]"}, {"sha": "0cf223f3029134cee4d535498d78352cb7edbe1e", "filename": "src/libstd/rt/comm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibstd%2Frt%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibstd%2Frt%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fcomm.rs?ref=98ec79c9576052d9fededd3b72b47d387c1c455d", "patch": "@@ -159,7 +159,7 @@ impl<T> ChanOne<T> {\n                     // Port is blocked. Wake it up.\n                     let recvr = BlockedTask::cast_from_uint(task_as_state);\n                     if do_resched {\n-                        do recvr.wake().map_consume |woken_task| {\n+                        do recvr.wake().map_move |woken_task| {\n                             Scheduler::run_task(woken_task);\n                         };\n                     } else {\n@@ -381,7 +381,7 @@ impl<T> Drop for ChanOne<T> {\n                     // The port is blocked waiting for a message we will never send. Wake it.\n                     assert!((*this.packet()).payload.is_none());\n                     let recvr = BlockedTask::cast_from_uint(task_as_state);\n-                    do recvr.wake().map_consume |woken_task| {\n+                    do recvr.wake().map_move |woken_task| {\n                         Scheduler::run_task(woken_task);\n                     };\n                 }"}, {"sha": "789c7531eca82221ee0a384526726cd9b838f010", "filename": "src/libstd/rt/kill.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibstd%2Frt%2Fkill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibstd%2Frt%2Fkill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fkill.rs?ref=98ec79c9576052d9fededd3b72b47d387c1c455d", "patch": "@@ -402,10 +402,10 @@ impl KillHandle {\n                     || {\n                         // Prefer to check tombstones that were there first,\n                         // being \"more fair\" at the expense of tail-recursion.\n-                        others.take().map_consume_default(true, |f| f()) && {\n+                        others.take().map_move_default(true, |f| f()) && {\n                             let mut inner = this.take().unwrap();\n                             (!inner.any_child_failed) &&\n-                                inner.child_tombstones.take_map_default(true, |f| f())\n+                                inner.child_tombstones.take().map_move_default(true, |f| f())\n                         }\n                     }\n                 }\n@@ -424,7 +424,7 @@ impl KillHandle {\n                     let others = Cell::new(other_tombstones); // :(\n                     || {\n                         // Prefer fairness to tail-recursion, as in above case.\n-                        others.take().map_consume_default(true, |f| f()) &&\n+                        others.take().map_move_default(true, |f| f()) &&\n                             f.take()()\n                     }\n                 }\n@@ -493,15 +493,15 @@ impl Death {\n         { use util; util::ignore(group); }\n \n         // Step 1. Decide if we need to collect child failures synchronously.\n-        do self.on_exit.take_map |on_exit| {\n+        do self.on_exit.take().map_move |on_exit| {\n             if success {\n                 // We succeeded, but our children might not. Need to wait for them.\n                 let mut inner = self.kill_handle.take_unwrap().unwrap();\n                 if inner.any_child_failed {\n                     success = false;\n                 } else {\n                     // Lockless access to tombstones protected by unwrap barrier.\n-                    success = inner.child_tombstones.take_map_default(true, |f| f());\n+                    success = inner.child_tombstones.take().map_move_default(true, |f| f());\n                 }\n             }\n             on_exit(success);\n@@ -510,12 +510,12 @@ impl Death {\n         // Step 2. Possibly alert possibly-watching parent to failure status.\n         // Note that as soon as parent_handle goes out of scope, the parent\n         // can successfully unwrap its handle and collect our reported status.\n-        do self.watching_parent.take_map |mut parent_handle| {\n+        do self.watching_parent.take().map_move |mut parent_handle| {\n             if success {\n                 // Our handle might be None if we had an exit callback, and\n                 // already unwrapped it. But 'success' being true means no\n                 // child failed, so there's nothing to do (see below case).\n-                do self.kill_handle.take_map |own_handle| {\n+                do self.kill_handle.take().map_move |own_handle| {\n                     own_handle.reparent_children_to(&mut parent_handle);\n                 };\n             } else {"}, {"sha": "c2c12c6e3c0741704360860e508f5426b7363bbd", "filename": "src/libstd/rt/sched.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibstd%2Frt%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibstd%2Frt%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fsched.rs?ref=98ec79c9576052d9fededd3b72b47d387c1c455d", "patch": "@@ -325,7 +325,7 @@ impl Scheduler {\n     /// As enqueue_task, but with the possibility for the blocked task to\n     /// already have been killed.\n     pub fn enqueue_blocked_task(&mut self, blocked_task: BlockedTask) {\n-        do blocked_task.wake().map_consume |task| {\n+        do blocked_task.wake().map_move |task| {\n             self.enqueue_task(task);\n         };\n     }\n@@ -533,7 +533,7 @@ impl Scheduler {\n                 sched.enqueue_blocked_task(last_task);\n             }\n         };\n-        opt.map_consume(Local::put);\n+        opt.map_move(Local::put);\n     }\n \n     // The primary function for changing contexts. In the current"}, {"sha": "e732ef67b5b1861670a862ded8cf05039182d3eb", "filename": "src/libstd/rt/task.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibstd%2Frt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibstd%2Frt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftask.rs?ref=98ec79c9576052d9fededd3b72b47d387c1c455d", "patch": "@@ -465,10 +465,10 @@ mod test {\n         do run_in_newsched_task() {\n             static key: local_data::Key<@~str> = &local_data::Key;\n             local_data::set(key, @~\"data\");\n-            assert!(*local_data::get(key, |k| k.map(|&k| *k)).unwrap() == ~\"data\");\n+            assert!(*local_data::get(key, |k| k.map_move(|k| *k)).unwrap() == ~\"data\");\n             static key2: local_data::Key<@~str> = &local_data::Key;\n             local_data::set(key2, @~\"data\");\n-            assert!(*local_data::get(key2, |k| k.map(|&k| *k)).unwrap() == ~\"data\");\n+            assert!(*local_data::get(key2, |k| k.map_move(|k| *k)).unwrap() == ~\"data\");\n         }\n     }\n "}, {"sha": "c4bd2c5435a28a6193304b9bffbe945d5d8b7695", "filename": "src/libstd/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=98ec79c9576052d9fededd3b72b47d387c1c455d", "patch": "@@ -1849,7 +1849,7 @@ impl<'self> StrSlice<'self> for &'self str {\n         } else {\n             self.matches_index_iter(needle)\n                 .next()\n-                .map_consume(|(start, _end)| start)\n+                .map_move(|(start, _end)| start)\n         }\n     }\n "}, {"sha": "7486a78837c56fb56ef31959d3610d211b2b68cd", "filename": "src/libstd/task/spawn.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibstd%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibstd%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fspawn.rs?ref=98ec79c9576052d9fededd3b72b47d387c1c455d", "patch": "@@ -500,7 +500,7 @@ impl RuntimeGlue {\n             OldTask(ptr) => rt::rust_task_kill_other(ptr),\n             NewTask(handle) => {\n                 let mut handle = handle;\n-                do handle.kill().map_consume |killed_task| {\n+                do handle.kill().map_move |killed_task| {\n                     let killed_task = Cell::new(killed_task);\n                     do Local::borrow::<Scheduler, ()> |sched| {\n                         sched.enqueue_task(killed_task.take());\n@@ -682,7 +682,7 @@ fn spawn_raw_newsched(mut opts: TaskOpts, f: ~fn()) {\n         // Child task runs this code.\n \n         // If child data is 'None', the enlist is vacuously successful.\n-        let enlist_success = do child_data.take().map_consume_default(true) |child_data| {\n+        let enlist_success = do child_data.take().map_move_default(true) |child_data| {\n             let child_data = Cell::new(child_data); // :(\n             do Local::borrow::<Task, bool> |me| {\n                 let (child_tg, ancestors, is_main) = child_data.take();\n@@ -854,7 +854,7 @@ fn spawn_raw_oldsched(mut opts: TaskOpts, f: ~fn()) {\n             // Even if the below code fails to kick the child off, we must\n             // send Something on the notify channel.\n \n-            let notifier = notify_chan.map_consume(|c| AutoNotify(c));\n+            let notifier = notify_chan.map_move(|c| AutoNotify(c));\n \n             if enlist_many(OldTask(child), &child_arc, &mut ancestors) {\n                 let group = @@mut Taskgroup(child_arc, ancestors, is_main, notifier);"}, {"sha": "ba167fe67148ef5df984fbdf00e50495fb7f6f39", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=98ec79c9576052d9fededd3b72b47d387c1c455d", "patch": "@@ -888,7 +888,7 @@ pub fn new_sctable_internal() -> SCTable {\n // fetch the SCTable from TLS, create one if it doesn't yet exist.\n pub fn get_sctable() -> @mut SCTable {\n     static sctable_key: local_data::Key<@@mut SCTable> = &local_data::Key;\n-    match local_data::get(sctable_key, |k| k.map(|&k| *k)) {\n+    match local_data::get(sctable_key, |k| k.map_move(|k| *k)) {\n         None => {\n             let new_table = @@mut new_sctable_internal();\n             local_data::set(sctable_key,new_table);"}, {"sha": "9edd41152f7f288ef090b2b94f555fabf4edf0b7", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=98ec79c9576052d9fededd3b72b47d387c1c455d", "patch": "@@ -83,7 +83,7 @@ impl AttrMetaMethods for MetaItem {\n     }\n \n     pub fn name_str_pair(&self) -> Option<(@str, @str)> {\n-        self.value_str().map_consume(|s| (self.name(), s))\n+        self.value_str().map_move(|s| (self.name(), s))\n     }\n }\n "}, {"sha": "2b6cb91a5df1759771fb7e4567c270f8806a0535", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=98ec79c9576052d9fededd3b72b47d387c1c455d", "patch": "@@ -192,7 +192,7 @@ fn print_maybe_styled(msg: &str, color: term::attr::Attr) {\n     let stderr = io::stderr();\n \n     if stderr.get_type() == io::Screen {\n-        let t = match local_data::get(tls_terminal, |v| v.map_consume(|&k|k)) {\n+        let t = match local_data::get(tls_terminal, |v| v.map_move(|k| *k)) {\n             None => {\n                 let t = term::Terminal::new(stderr);\n                 let tls = @match t {"}, {"sha": "efaf6b8e001f3208cf3c1ad80f525fa2289b355e", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=98ec79c9576052d9fededd3b72b47d387c1c455d", "patch": "@@ -479,7 +479,7 @@ impl <K: Eq + Hash + IterBytes + 'static, V: 'static> MapChain<K,V>{\n             ConsMapChain(ref map,_) => map\n         };\n         // strip one layer of indirection off the pointer.\n-        map.find(key).map(|r| {**r})\n+        map.find(key).map_move(|r| {*r})\n     }\n \n     // insert the binding into the top-level map"}, {"sha": "d81dca005b0a41dc99bdef621159eea0face4e9a", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=98ec79c9576052d9fededd3b72b47d387c1c455d", "patch": "@@ -591,7 +591,7 @@ impl AstBuilder for @ExtCtxt {\n \n     fn expr_if(&self, span: span,\n                cond: @ast::expr, then: @ast::expr, els: Option<@ast::expr>) -> @ast::expr {\n-        let els = els.map(|x| self.expr_block(self.block_expr(*x)));\n+        let els = els.map_move(|x| self.expr_block(self.block_expr(x)));\n         self.expr(span, ast::expr_if(cond, self.block_expr(then), els))\n     }\n "}, {"sha": "0a5bc00072034a052bd9a2d865d81aabfbb4f5a5", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=98ec79c9576052d9fededd3b72b47d387c1c455d", "patch": "@@ -417,7 +417,7 @@ fn noop_fold_stmt(s: &stmt_, fld: @ast_fold) -> Option<stmt_> {\n fn noop_fold_arm(a: &arm, fld: @ast_fold) -> arm {\n     arm {\n         pats: a.pats.map(|x| fld.fold_pat(*x)),\n-        guard: a.guard.map(|x| fld.fold_expr(*x)),\n+        guard: a.guard.map_move(|x| fld.fold_expr(x)),\n         body: fld.fold_block(&a.body),\n     }\n }\n@@ -429,7 +429,7 @@ pub fn noop_fold_pat(p: &pat_, fld: @ast_fold) -> pat_ {\n             pat_ident(\n                 binding_mode,\n                 fld.fold_path(pth),\n-                sub.map(|x| fld.fold_pat(*x))\n+                sub.map_move(|x| fld.fold_pat(x))\n             )\n         }\n         pat_lit(e) => pat_lit(fld.fold_expr(e)),\n@@ -459,7 +459,7 @@ pub fn noop_fold_pat(p: &pat_, fld: @ast_fold) -> pat_ {\n         pat_vec(ref before, ref slice, ref after) => {\n             pat_vec(\n                 before.map(|x| fld.fold_pat(*x)),\n-                slice.map(|x| fld.fold_pat(*x)),\n+                slice.map_move(|x| fld.fold_pat(x)),\n                 after.map(|x| fld.fold_pat(*x))\n             )\n         }\n@@ -551,7 +551,7 @@ pub fn noop_fold_expr(e: &expr_, fld: @ast_fold) -> expr_ {\n             expr_if(\n                 fld.fold_expr(cond),\n                 fld.fold_block(tr),\n-                fl.map(|x| fld.fold_expr(*x))\n+                fl.map_move(|x| fld.fold_expr(x))\n             )\n         }\n         expr_while(cond, ref body) => {\n@@ -565,7 +565,7 @@ pub fn noop_fold_expr(e: &expr_, fld: @ast_fold) -> expr_ {\n         expr_loop(ref body, opt_ident) => {\n             expr_loop(\n                 fld.fold_block(body),\n-                opt_ident.map(|x| fld.fold_ident(*x))\n+                opt_ident.map_move(|x| fld.fold_ident(x))\n             )\n         }\n         expr_match(expr, ref arms) => {\n@@ -608,13 +608,13 @@ pub fn noop_fold_expr(e: &expr_, fld: @ast_fold) -> expr_ {\n         expr_path(ref pth) => expr_path(fld.fold_path(pth)),\n         expr_self => expr_self,\n         expr_break(ref opt_ident) => {\n-            expr_break(opt_ident.map(|x| fld.fold_ident(*x)))\n+            expr_break(opt_ident.map_move(|x| fld.fold_ident(x)))\n         }\n         expr_again(ref opt_ident) => {\n-            expr_again(opt_ident.map(|x| fld.fold_ident(*x)))\n+            expr_again(opt_ident.map_move(|x| fld.fold_ident(x)))\n         }\n         expr_ret(ref e) => {\n-            expr_ret(e.map(|x| fld.fold_expr(*x)))\n+            expr_ret(e.map_move(|x| fld.fold_expr(x)))\n         }\n         expr_log(lv, e) => {\n             expr_log(\n@@ -634,7 +634,7 @@ pub fn noop_fold_expr(e: &expr_, fld: @ast_fold) -> expr_ {\n             expr_struct(\n                 fld.fold_path(path),\n                 fields.map(|x| fold_field(*x)),\n-                maybe_expr.map(|x| fld.fold_expr(*x))\n+                maybe_expr.map_move(|x| fld.fold_expr(x))\n             )\n         },\n         expr_paren(ex) => expr_paren(fld.fold_expr(ex))\n@@ -731,7 +731,7 @@ fn noop_fold_variant(v: &variant_, fld: @ast_fold) -> variant_ {\n                 fold_variant_arg(/*bad*/ (*x).clone())\n             })\n         }\n-        struct_variant_kind(struct_def) => {\n+        struct_variant_kind(ref struct_def) => {\n             kind = struct_variant_kind(@ast::struct_def {\n                 fields: struct_def.fields.iter()\n                     .transform(|f| fld.fold_struct_field(*f)).collect(),\n@@ -776,7 +776,7 @@ fn noop_fold_local(l: @Local, fld: @ast_fold) -> @Local {\n         is_mutbl: l.is_mutbl,\n         ty: fld.fold_ty(&l.ty),\n         pat: fld.fold_pat(l.pat),\n-        init: l.init.map(|e| fld.fold_expr(*e)),\n+        init: l.init.map_move(|e| fld.fold_expr(e)),\n         id: fld.new_id(l.id),\n         span: fld.new_span(l.span),\n     }"}, {"sha": "4902c4587ac39f8a02b3b06a09d62d45eeafb003", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=98ec79c9576052d9fededd3b72b47d387c1c455d", "patch": "@@ -1313,7 +1313,7 @@ impl Parser {\n \n         // If the path might have bounds on it, they should be parsed before\n         // the parameters, e.g. module::TraitName:B1+B2<T>\n-        before_tps.map_consume(|callback| callback());\n+        before_tps.map_move(|callback| callback());\n \n         // Parse the (obsolete) trailing region parameter, if any, which will\n         // be written \"foo/&x\""}, {"sha": "fd491c1e890a0d8f140d56d06bd2a29e5ea34791", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec79c9576052d9fededd3b72b47d387c1c455d/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=98ec79c9576052d9fededd3b72b47d387c1c455d", "patch": "@@ -486,7 +486,7 @@ fn mk_fresh_ident_interner() -> @ident_interner {\n pub fn get_ident_interner() -> @ident_interner {\n     static key: local_data::Key<@@::parse::token::ident_interner> =\n         &local_data::Key;\n-    match local_data::get(key, |k| k.map(|&k| *k)) {\n+    match local_data::get(key, |k| k.map_move(|k| *k)) {\n         Some(interner) => *interner,\n         None => {\n             let interner = mk_fresh_ident_interner();"}]}