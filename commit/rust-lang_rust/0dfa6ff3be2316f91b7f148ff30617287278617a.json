{"sha": "0dfa6ff3be2316f91b7f148ff30617287278617a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkZmE2ZmYzYmUyMzE2ZjkxYjdmMTQ4ZmYzMDYxNzI4NzI3ODYxN2E=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-07-25T12:41:53Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-10-06T10:19:32Z"}, "message": "Avoid cycles from projection bounds\n\nOnly check the own predicates of associated types when confirming\nprojection candidates.\nAlso consider implied bounds when comparing trait and impl methods.", "tree": {"sha": "fa1c3c99fb39c91cb3624038df1f978b879b706a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa1c3c99fb39c91cb3624038df1f978b879b706a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0dfa6ff3be2316f91b7f148ff30617287278617a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0dfa6ff3be2316f91b7f148ff30617287278617a", "html_url": "https://github.com/rust-lang/rust/commit/0dfa6ff3be2316f91b7f148ff30617287278617a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0dfa6ff3be2316f91b7f148ff30617287278617a/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "596d6c4b3b5e86e024cd02f7221749ee6958bec6", "url": "https://api.github.com/repos/rust-lang/rust/commits/596d6c4b3b5e86e024cd02f7221749ee6958bec6", "html_url": "https://github.com/rust-lang/rust/commit/596d6c4b3b5e86e024cd02f7221749ee6958bec6"}], "stats": {"total": 199, "additions": 118, "deletions": 81}, "files": [{"sha": "8f7513cf27c36115dae4dcdc1f17ea6ef07b09f3", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 36, "deletions": 3, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/0dfa6ff3be2316f91b7f148ff30617287278617a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dfa6ff3be2316f91b7f148ff30617287278617a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=0dfa6ff3be2316f91b7f148ff30617287278617a", "patch": "@@ -28,7 +28,6 @@ use rustc_middle::ty::fold::{TypeFoldable, TypeFolder};\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::{self, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, WithConstness};\n use rustc_span::symbol::sym;\n-use rustc_span::DUMMY_SP;\n \n pub use rustc_middle::traits::Reveal;\n \n@@ -1409,6 +1408,7 @@ fn confirm_param_env_candidate<'cx, 'tcx>(\n     match infcx.at(cause, param_env).eq(cache_trait_ref, obligation_trait_ref) {\n         Ok(InferOk { value: _, obligations }) => {\n             nested_obligations.extend(obligations);\n+            assoc_ty_own_obligations(selcx, obligation, &mut nested_obligations);\n             Progress { ty: cache_entry.ty, obligations: nested_obligations }\n         }\n         Err(e) => {\n@@ -1430,7 +1430,7 @@ fn confirm_impl_candidate<'cx, 'tcx>(\n ) -> Progress<'tcx> {\n     let tcx = selcx.tcx();\n \n-    let ImplSourceUserDefinedData { impl_def_id, substs, nested } = impl_impl_source;\n+    let ImplSourceUserDefinedData { impl_def_id, substs, mut nested } = impl_impl_source;\n     let assoc_item_id = obligation.predicate.item_def_id;\n     let trait_def_id = tcx.trait_id_of_impl(impl_def_id).unwrap();\n \n@@ -1463,15 +1463,48 @@ fn confirm_impl_candidate<'cx, 'tcx>(\n     let ty = tcx.type_of(assoc_ty.item.def_id);\n     if substs.len() != tcx.generics_of(assoc_ty.item.def_id).count() {\n         let err = tcx.ty_error_with_message(\n-            DUMMY_SP,\n+            obligation.cause.span,\n             \"impl item and trait item have different parameter counts\",\n         );\n         Progress { ty: err, obligations: nested }\n     } else {\n+        assoc_ty_own_obligations(selcx, obligation, &mut nested);\n         Progress { ty: ty.subst(tcx, substs), obligations: nested }\n     }\n }\n \n+// Get obligations corresponding to the predicates from the where-clause of the\n+// associated type itself.\n+// Note: `feature(generic_associated_types)` is required to write such\n+// predicates, even for non-generic associcated types.\n+fn assoc_ty_own_obligations<'cx, 'tcx>(\n+    selcx: &mut SelectionContext<'cx, 'tcx>,\n+    obligation: &ProjectionTyObligation<'tcx>,\n+    nested: &mut Vec<PredicateObligation<'tcx>>,\n+) {\n+    let tcx = selcx.tcx();\n+    for predicate in tcx\n+        .predicates_of(obligation.predicate.item_def_id)\n+        .instantiate_own(tcx, obligation.predicate.substs)\n+        .predicates\n+    {\n+        let normalized = normalize_with_depth_to(\n+            selcx,\n+            obligation.param_env,\n+            obligation.cause.clone(),\n+            obligation.recursion_depth + 1,\n+            &predicate,\n+            nested,\n+        );\n+        nested.push(Obligation::with_depth(\n+            obligation.cause.clone(),\n+            obligation.recursion_depth + 1,\n+            obligation.param_env,\n+            normalized,\n+        ));\n+    }\n+}\n+\n /// Locate the definition of an associated type in the specialization hierarchy,\n /// starting from the given impl.\n ///"}, {"sha": "21293615bc98cdade0547e5d3a8c22c71ae590ad", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0dfa6ff3be2316f91b7f148ff30617287278617a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dfa6ff3be2316f91b7f148ff30617287278617a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=0dfa6ff3be2316f91b7f148ff30617287278617a", "patch": "@@ -157,22 +157,26 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                         );\n                     }),\n             );\n-            // Require that the projection is well-formed.\n-            let self_ty = self.infcx.replace_bound_vars_with_placeholders(&bound_self_ty);\n-            let self_ty = normalize_with_depth_to(\n-                self,\n-                obligation.param_env,\n-                obligation.cause.clone(),\n-                obligation.recursion_depth + 1,\n-                &self_ty,\n-                &mut obligations,\n-            );\n-            obligations.push(Obligation::with_depth(\n-                obligation.cause.clone(),\n-                obligation.recursion_depth + 1,\n-                obligation.param_env,\n-                ty::PredicateKind::WellFormed(self_ty.into()).to_predicate(tcx),\n-            ));\n+\n+            if let ty::Projection(..) = bound_self_ty.skip_binder().kind {\n+                for predicate in tcx.predicates_of(def_id).instantiate_own(tcx, substs).predicates {\n+                    let normalized = normalize_with_depth_to(\n+                        self,\n+                        obligation.param_env,\n+                        obligation.cause.clone(),\n+                        obligation.recursion_depth + 1,\n+                        &predicate,\n+                        &mut obligations,\n+                    );\n+                    obligations.push(Obligation::with_depth(\n+                        obligation.cause.clone(),\n+                        obligation.recursion_depth + 1,\n+                        obligation.param_env,\n+                        normalized,\n+                    ));\n+                }\n+            }\n+\n             obligations\n         })\n     }"}, {"sha": "788590e50f3b05a4bd4f98cedaf4b71d781fe13b", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dfa6ff3be2316f91b7f148ff30617287278617a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dfa6ff3be2316f91b7f148ff30617287278617a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=0dfa6ff3be2316f91b7f148ff30617287278617a", "patch": "@@ -328,7 +328,7 @@ fn compare_predicate_entailment<'tcx>(\n         // Finally, resolve all regions. This catches wily misuses of\n         // lifetime parameters.\n         let fcx = FnCtxt::new(&inh, param_env, impl_m_hir_id);\n-        fcx.regionck_item(impl_m_hir_id, impl_m_span, &[]);\n+        fcx.regionck_item(impl_m_hir_id, impl_m_span, trait_sig.inputs_and_output);\n \n         Ok(())\n     })"}, {"sha": "d7467ac22371f53bcc4fbcc2127a89ddb5286be6", "filename": "src/test/ui/associated-types/wf-cycle-2.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0dfa6ff3be2316f91b7f148ff30617287278617a/src%2Ftest%2Fui%2Fassociated-types%2Fwf-cycle-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dfa6ff3be2316f91b7f148ff30617287278617a/src%2Ftest%2Fui%2Fassociated-types%2Fwf-cycle-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fwf-cycle-2.rs?ref=0dfa6ff3be2316f91b7f148ff30617287278617a", "patch": "@@ -0,0 +1,18 @@\n+// check-pass\n+\n+trait IntoIt {\n+    type Item;\n+}\n+\n+impl<I> IntoIt for I {\n+    type Item = ();\n+}\n+\n+trait BaseGraph\n+where\n+    <Self::VertexIter as IntoIt>::Item: Sized,\n+{\n+    type VertexIter: IntoIt;\n+}\n+\n+fn main() {}"}, {"sha": "cf6508551a558a10de11bf031150cb1f6476f35a", "filename": "src/test/ui/associated-types/wf-cycle.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0dfa6ff3be2316f91b7f148ff30617287278617a/src%2Ftest%2Fui%2Fassociated-types%2Fwf-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dfa6ff3be2316f91b7f148ff30617287278617a/src%2Ftest%2Fui%2Fassociated-types%2Fwf-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fwf-cycle.rs?ref=0dfa6ff3be2316f91b7f148ff30617287278617a", "patch": "@@ -0,0 +1,13 @@\n+// check-pass\n+\n+trait A {\n+    type U: Copy;\n+}\n+\n+trait B where\n+    <Self::V as A>::U: Copy,\n+{\n+    type V: A;\n+}\n+\n+fn main() {}"}, {"sha": "b6dab1c32e8b291e1212c9e322447d7afb926788", "filename": "src/test/ui/regions/regions-trait-1.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0dfa6ff3be2316f91b7f148ff30617287278617a/src%2Ftest%2Fui%2Fregions%2Fregions-trait-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dfa6ff3be2316f91b7f148ff30617287278617a/src%2Ftest%2Fui%2Fregions%2Fregions-trait-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-trait-1.rs?ref=0dfa6ff3be2316f91b7f148ff30617287278617a", "patch": "@@ -1,30 +1,33 @@\n-#![feature(box_syntax)]\n+// check-pass\n \n-struct Ctxt { v: usize }\n+struct Ctxt {\n+    v: usize,\n+}\n \n trait GetCtxt {\n     // Here the `&` is bound in the method definition:\n     fn get_ctxt(&self) -> &Ctxt;\n }\n \n-struct HasCtxt<'a> { c: &'a Ctxt }\n+struct HasCtxt<'a> {\n+    c: &'a Ctxt,\n+}\n \n impl<'a> GetCtxt for HasCtxt<'a> {\n-\n-    // Here an error occurs because we used `&self` but\n-    // the definition used `&`:\n-    fn get_ctxt(&self) -> &'a Ctxt { //~ ERROR method not compatible with trait\n+    // Ok: Have implied bound of WF(&'b HasCtxt<'a>)\n+    // so know 'a: 'b\n+    // so know &'a Ctxt <: &'b Ctxt\n+    fn get_ctxt<'b>(&'b self) -> &'a Ctxt {\n         self.c\n     }\n-\n }\n \n-fn get_v(gc: Box<dyn GetCtxt>) -> usize {\n+fn get_v(gc: Box<dyn GetCtxt + '_>) -> usize {\n     gc.get_ctxt().v\n }\n \n fn main() {\n     let ctxt = Ctxt { v: 22 };\n     let hc = HasCtxt { c: &ctxt };\n-    assert_eq!(get_v(box hc as Box<dyn GetCtxt>), 22);\n+    assert_eq!(get_v(Box::new(hc) as Box<dyn GetCtxt>), 22);\n }"}, {"sha": "92d96a722d4e913e7e9ca0ae1691d1ac7837e35a", "filename": "src/test/ui/regions/regions-trait-1.stderr", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/596d6c4b3b5e86e024cd02f7221749ee6958bec6/src%2Ftest%2Fui%2Fregions%2Fregions-trait-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/596d6c4b3b5e86e024cd02f7221749ee6958bec6/src%2Ftest%2Fui%2Fregions%2Fregions-trait-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-trait-1.stderr?ref=596d6c4b3b5e86e024cd02f7221749ee6958bec6", "patch": "@@ -1,22 +0,0 @@\n-error[E0308]: method not compatible with trait\n-  --> $DIR/regions-trait-1.rs:16:5\n-   |\n-LL |     fn get_ctxt(&self) -> &'a Ctxt {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n-   |\n-   = note: expected fn pointer `fn(&HasCtxt<'a>) -> &Ctxt`\n-              found fn pointer `fn(&HasCtxt<'a>) -> &'a Ctxt`\n-note: the lifetime `'a` as defined on the impl at 12:6...\n-  --> $DIR/regions-trait-1.rs:12:6\n-   |\n-LL | impl<'a> GetCtxt for HasCtxt<'a> {\n-   |      ^^\n-note: ...does not necessarily outlive the anonymous lifetime #1 defined on the method body at 16:5\n-  --> $DIR/regions-trait-1.rs:16:5\n-   |\n-LL |     fn get_ctxt(&self) -> &'a Ctxt {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "9ed0b240d0a0f43db02767c9762d977fb342b131", "filename": "src/test/ui/specialization/issue-38091-2.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0dfa6ff3be2316f91b7f148ff30617287278617a/src%2Ftest%2Fui%2Fspecialization%2Fissue-38091-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dfa6ff3be2316f91b7f148ff30617287278617a/src%2Ftest%2Fui%2Fspecialization%2Fissue-38091-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-38091-2.rs?ref=0dfa6ff3be2316f91b7f148ff30617287278617a", "patch": "@@ -1,11 +1,17 @@\n+// build-fail\n+//~^ ERROR overflow evaluating the requirement `i32: Check`\n+\n #![feature(specialization)]\n //~^ WARN the feature `specialization` is incomplete\n \n trait Iterate<'a> {\n     type Ty: Valid;\n     fn iterate(self);\n }\n-impl<'a, T> Iterate<'a> for T where T: Check {\n+impl<'a, T> Iterate<'a> for T\n+where\n+    T: Check,\n+{\n     default type Ty = ();\n     default fn iterate(self) {}\n }\n@@ -19,5 +25,4 @@ impl Valid for () {}\n \n fn main() {\n     Iterate::iterate(0);\n-    //~^ ERROR overflow evaluating the requirement `{integer}: Check`\n }"}, {"sha": "a314c26ad147db90096727bae35c4fa63d9e3813", "filename": "src/test/ui/specialization/issue-38091-2.stderr", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0dfa6ff3be2316f91b7f148ff30617287278617a/src%2Ftest%2Fui%2Fspecialization%2Fissue-38091-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dfa6ff3be2316f91b7f148ff30617287278617a/src%2Ftest%2Fui%2Fspecialization%2Fissue-38091-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-38091-2.stderr?ref=0dfa6ff3be2316f91b7f148ff30617287278617a", "patch": "@@ -1,22 +1,15 @@\n warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-38091-2.rs:1:12\n+  --> $DIR/issue-38091-2.rs:4:12\n    |\n LL | #![feature(specialization)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n \n-error[E0275]: overflow evaluating the requirement `{integer}: Check`\n-  --> $DIR/issue-38091-2.rs:21:5\n+error[E0275]: overflow evaluating the requirement `i32: Check`\n    |\n-LL |     fn iterate(self);\n-   |     ----------------- required by `Iterate::iterate`\n-...\n-LL |     Iterate::iterate(0);\n-   |     ^^^^^^^^^^^^^^^^\n-   |\n-   = note: required because of the requirements on the impl of `Iterate<'_>` for `{integer}`\n+   = note: required because of the requirements on the impl of `Iterate` for `i32`\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "5b398368a6733122040d7dc55662c3b6f0e695eb", "filename": "src/test/ui/specialization/issue-38091.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0dfa6ff3be2316f91b7f148ff30617287278617a/src%2Ftest%2Fui%2Fspecialization%2Fissue-38091.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dfa6ff3be2316f91b7f148ff30617287278617a/src%2Ftest%2Fui%2Fspecialization%2Fissue-38091.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-38091.rs?ref=0dfa6ff3be2316f91b7f148ff30617287278617a", "patch": "@@ -5,7 +5,10 @@ trait Iterate<'a> {\n     type Ty: Valid;\n     fn iterate(self);\n }\n-impl<'a, T> Iterate<'a> for T where T: Check {\n+impl<'a, T> Iterate<'a> for T\n+where\n+    T: Check,\n+{\n     default type Ty = ();\n     //~^ ERROR the trait bound `(): Valid` is not satisfied\n     default fn iterate(self) {}\n@@ -18,5 +21,4 @@ trait Valid {}\n \n fn main() {\n     Iterate::iterate(0);\n-    //~^ ERROR overflow evaluating the requirement `{integer}: Check`\n }"}, {"sha": "6be0f26849f90717e19446a925ba5934b2f4ce7f", "filename": "src/test/ui/specialization/issue-38091.stderr", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0dfa6ff3be2316f91b7f148ff30617287278617a/src%2Ftest%2Fui%2Fspecialization%2Fissue-38091.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dfa6ff3be2316f91b7f148ff30617287278617a/src%2Ftest%2Fui%2Fspecialization%2Fissue-38091.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-38091.stderr?ref=0dfa6ff3be2316f91b7f148ff30617287278617a", "patch": "@@ -8,26 +8,14 @@ LL | #![feature(specialization)]\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n \n error[E0277]: the trait bound `(): Valid` is not satisfied\n-  --> $DIR/issue-38091.rs:9:5\n+  --> $DIR/issue-38091.rs:12:5\n    |\n LL |     type Ty: Valid;\n    |              ----- required by this bound in `Iterate::Ty`\n ...\n LL |     default type Ty = ();\n    |     ^^^^^^^^^^^^^^^^^^^^^ the trait `Valid` is not implemented for `()`\n \n-error[E0275]: overflow evaluating the requirement `{integer}: Check`\n-  --> $DIR/issue-38091.rs:20:5\n-   |\n-LL |     fn iterate(self);\n-   |     ----------------- required by `Iterate::iterate`\n-...\n-LL |     Iterate::iterate(0);\n-   |     ^^^^^^^^^^^^^^^^\n-   |\n-   = note: required because of the requirements on the impl of `Iterate<'_>` for `{integer}`\n-\n-error: aborting due to 2 previous errors; 1 warning emitted\n+error: aborting due to previous error; 1 warning emitted\n \n-Some errors have detailed explanations: E0275, E0277.\n-For more information about an error, try `rustc --explain E0275`.\n+For more information about this error, try `rustc --explain E0277`."}]}