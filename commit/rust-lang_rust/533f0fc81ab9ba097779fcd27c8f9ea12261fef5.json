{"sha": "533f0fc81ab9ba097779fcd27c8f9ea12261fef5", "node_id": "C_kwDOAAsO6NoAKDUzM2YwZmM4MWFiOWJhMDk3Nzc5ZmNkMjdjOGY5ZWExMjI2MWZlZjU", "commit": {"author": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2021-12-11T04:11:54Z"}, "committer": {"name": "Jubilee", "email": "46493976+workingjubilee@users.noreply.github.com", "date": "2021-12-11T06:11:27Z"}, "message": "Use relative intrinsics paths for bitmasks", "tree": {"sha": "51ecfbe22ea387faeeed7100047e7556c7d2af03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51ecfbe22ea387faeeed7100047e7556c7d2af03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/533f0fc81ab9ba097779fcd27c8f9ea12261fef5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/533f0fc81ab9ba097779fcd27c8f9ea12261fef5", "html_url": "https://github.com/rust-lang/rust/commit/533f0fc81ab9ba097779fcd27c8f9ea12261fef5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/533f0fc81ab9ba097779fcd27c8f9ea12261fef5/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81484a399c96c69adeef352be0e7823b39ce6e7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/81484a399c96c69adeef352be0e7823b39ce6e7e", "html_url": "https://github.com/rust-lang/rust/commit/81484a399c96c69adeef352be0e7823b39ce6e7e"}], "stats": {"total": 12, "additions": 4, "deletions": 8}, "files": [{"sha": "b4217dc87ba9c209e3e07c57fe7120dc20bcb922", "filename": "crates/core_simd/src/masks/bitmask.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/533f0fc81ab9ba097779fcd27c8f9ea12261fef5/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fbitmask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/533f0fc81ab9ba097779fcd27c8f9ea12261fef5/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fbitmask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fbitmask.rs?ref=533f0fc81ab9ba097779fcd27c8f9ea12261fef5", "patch": "@@ -105,18 +105,14 @@ where\n     #[must_use = \"method returns a new vector and does not mutate the original value\"]\n     pub fn to_int(self) -> Simd<T, LANES> {\n         unsafe {\n-            crate::intrinsics::simd_select_bitmask(\n-                self.0,\n-                Simd::splat(T::TRUE),\n-                Simd::splat(T::FALSE),\n-            )\n+            intrinsics::simd_select_bitmask(self.0, Simd::splat(T::TRUE), Simd::splat(T::FALSE))\n         }\n     }\n \n     #[inline]\n     #[must_use = \"method returns a new mask and does not mutate the original value\"]\n     pub unsafe fn from_int_unchecked(value: Simd<T, LANES>) -> Self {\n-        unsafe { Self(crate::intrinsics::simd_bitmask(value), PhantomData) }\n+        unsafe { Self(intrinsics::simd_bitmask(value), PhantomData) }\n     }\n \n     #[cfg(feature = \"generic_const_exprs\")]"}, {"sha": "e5bb784bb910f4b40da0746f3f7ad7604d25b285", "filename": "crates/core_simd/src/masks/full_masks.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/533f0fc81ab9ba097779fcd27c8f9ea12261fef5/crates%2Fcore_simd%2Fsrc%2Fmasks%2Ffull_masks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/533f0fc81ab9ba097779fcd27c8f9ea12261fef5/crates%2Fcore_simd%2Fsrc%2Fmasks%2Ffull_masks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmasks%2Ffull_masks.rs?ref=533f0fc81ab9ba097779fcd27c8f9ea12261fef5", "patch": "@@ -115,7 +115,7 @@ where\n     pub fn to_bitmask(self) -> [u8; LaneCount::<LANES>::BITMASK_LEN] {\n         unsafe {\n             let mut bitmask: [u8; LaneCount::<LANES>::BITMASK_LEN] =\n-                crate::intrinsics::simd_bitmask(self.0);\n+                intrinsics::simd_bitmask(self.0);\n \n             // There is a bug where LLVM appears to implement this operation with the wrong\n             // bit order.\n@@ -144,7 +144,7 @@ where\n                 }\n             }\n \n-            Self::from_int_unchecked(crate::intrinsics::simd_select_bitmask(\n+            Self::from_int_unchecked(intrinsics::simd_select_bitmask(\n                 bitmask,\n                 Self::splat(true).to_int(),\n                 Self::splat(false).to_int(),"}]}