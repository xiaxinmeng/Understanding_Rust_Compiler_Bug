{"sha": "6bf5434e19ce6d2a501589d1fcbc0d1748c531a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiZjU0MzRlMTljZTZkMmE1MDE1ODlkMWZjYmMwZDE3NDhjNTMxYTY=", "commit": {"author": {"name": "Tim Nielens", "email": "tim.nielens@gmail.com", "date": "2020-06-23T23:01:23Z"}, "committer": {"name": "Tim Nielens", "email": "tim.nielens@gmail.com", "date": "2020-06-23T23:01:44Z"}, "message": "copy_on_clone - add machine applicability", "tree": {"sha": "798e64e0a4ecb5fd654ad5e1c28f0a258cfd323b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/798e64e0a4ecb5fd654ad5e1c28f0a258cfd323b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6bf5434e19ce6d2a501589d1fcbc0d1748c531a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6bf5434e19ce6d2a501589d1fcbc0d1748c531a6", "html_url": "https://github.com/rust-lang/rust/commit/6bf5434e19ce6d2a501589d1fcbc0d1748c531a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6bf5434e19ce6d2a501589d1fcbc0d1748c531a6/comments", "author": {"login": "tnielens", "id": 11885535, "node_id": "MDQ6VXNlcjExODg1NTM1", "avatar_url": "https://avatars.githubusercontent.com/u/11885535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tnielens", "html_url": "https://github.com/tnielens", "followers_url": "https://api.github.com/users/tnielens/followers", "following_url": "https://api.github.com/users/tnielens/following{/other_user}", "gists_url": "https://api.github.com/users/tnielens/gists{/gist_id}", "starred_url": "https://api.github.com/users/tnielens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tnielens/subscriptions", "organizations_url": "https://api.github.com/users/tnielens/orgs", "repos_url": "https://api.github.com/users/tnielens/repos", "events_url": "https://api.github.com/users/tnielens/events{/privacy}", "received_events_url": "https://api.github.com/users/tnielens/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tnielens", "id": 11885535, "node_id": "MDQ6VXNlcjExODg1NTM1", "avatar_url": "https://avatars.githubusercontent.com/u/11885535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tnielens", "html_url": "https://github.com/tnielens", "followers_url": "https://api.github.com/users/tnielens/followers", "following_url": "https://api.github.com/users/tnielens/following{/other_user}", "gists_url": "https://api.github.com/users/tnielens/gists{/gist_id}", "starred_url": "https://api.github.com/users/tnielens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tnielens/subscriptions", "organizations_url": "https://api.github.com/users/tnielens/orgs", "repos_url": "https://api.github.com/users/tnielens/repos", "events_url": "https://api.github.com/users/tnielens/events{/privacy}", "received_events_url": "https://api.github.com/users/tnielens/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "742706511c9f33c6a0d4380392e513e5249057e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/742706511c9f33c6a0d4380392e513e5249057e3", "html_url": "https://github.com/rust-lang/rust/commit/742706511c9f33c6a0d4380392e513e5249057e3"}], "stats": {"total": 199, "additions": 129, "deletions": 70}, "files": [{"sha": "74fefa65612f62c54402d75363192fded78994f7", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bf5434e19ce6d2a501589d1fcbc0d1748c531a6/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bf5434e19ce6d2a501589d1fcbc0d1748c531a6/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=6bf5434e19ce6d2a501589d1fcbc0d1748c531a6", "patch": "@@ -2041,7 +2041,7 @@ fn lint_clone_on_copy(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>, arg: &hir:\n         }\n         span_lint_and_then(cx, CLONE_ON_COPY, expr.span, \"using `clone` on a `Copy` type\", |diag| {\n             if let Some((text, snip)) = snip {\n-                diag.span_suggestion(expr.span, text, snip, Applicability::Unspecified);\n+                diag.span_suggestion(expr.span, text, snip, Applicability::MachineApplicable);\n             }\n         });\n     }"}, {"sha": "1f0ca101757ec849a7d51ef30db43894f7dc742f", "filename": "tests/ui/clone_on_copy.fixed", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/6bf5434e19ce6d2a501589d1fcbc0d1748c531a6/tests%2Fui%2Fclone_on_copy.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/6bf5434e19ce6d2a501589d1fcbc0d1748c531a6/tests%2Fui%2Fclone_on_copy.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclone_on_copy.fixed?ref=6bf5434e19ce6d2a501589d1fcbc0d1748c531a6", "patch": "@@ -0,0 +1,40 @@\n+// run-rustfix\n+\n+#![allow(\n+    unused,\n+    clippy::redundant_clone,\n+    clippy::deref_addrof,\n+    clippy::no_effect,\n+    clippy::unnecessary_operation\n+)]\n+\n+use std::cell::RefCell;\n+use std::rc::{self, Rc};\n+use std::sync::{self, Arc};\n+\n+fn main() {}\n+\n+fn is_ascii(ch: char) -> bool {\n+    ch.is_ascii()\n+}\n+\n+fn clone_on_copy() {\n+    42;\n+\n+    vec![1].clone(); // ok, not a Copy type\n+    Some(vec![1]).clone(); // ok, not a Copy type\n+    *(&42);\n+\n+    let rc = RefCell::new(0);\n+    *rc.borrow();\n+\n+    // Issue #4348\n+    let mut x = 43;\n+    let _ = &x.clone(); // ok, getting a ref\n+    'a'.clone().make_ascii_uppercase(); // ok, clone and then mutate\n+    is_ascii('z');\n+\n+    // Issue #5436\n+    let mut vec = Vec::new();\n+    vec.push(42);\n+}"}, {"sha": "ca39a654b4fce21c6fe1e57a81377152ae8beba0", "filename": "tests/ui/clone_on_copy.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/6bf5434e19ce6d2a501589d1fcbc0d1748c531a6/tests%2Fui%2Fclone_on_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bf5434e19ce6d2a501589d1fcbc0d1748c531a6/tests%2Fui%2Fclone_on_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclone_on_copy.rs?ref=6bf5434e19ce6d2a501589d1fcbc0d1748c531a6", "patch": "@@ -0,0 +1,40 @@\n+// run-rustfix\n+\n+#![allow(\n+    unused,\n+    clippy::redundant_clone,\n+    clippy::deref_addrof,\n+    clippy::no_effect,\n+    clippy::unnecessary_operation\n+)]\n+\n+use std::cell::RefCell;\n+use std::rc::{self, Rc};\n+use std::sync::{self, Arc};\n+\n+fn main() {}\n+\n+fn is_ascii(ch: char) -> bool {\n+    ch.is_ascii()\n+}\n+\n+fn clone_on_copy() {\n+    42.clone();\n+\n+    vec![1].clone(); // ok, not a Copy type\n+    Some(vec![1]).clone(); // ok, not a Copy type\n+    (&42).clone();\n+\n+    let rc = RefCell::new(0);\n+    rc.borrow().clone();\n+\n+    // Issue #4348\n+    let mut x = 43;\n+    let _ = &x.clone(); // ok, getting a ref\n+    'a'.clone().make_ascii_uppercase(); // ok, clone and then mutate\n+    is_ascii('z'.clone());\n+\n+    // Issue #5436\n+    let mut vec = Vec::new();\n+    vec.push(42.clone());\n+}"}, {"sha": "ec2faf4ab40d2c94b0370006f0633940d8c62d5b", "filename": "tests/ui/clone_on_copy.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/6bf5434e19ce6d2a501589d1fcbc0d1748c531a6/tests%2Fui%2Fclone_on_copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6bf5434e19ce6d2a501589d1fcbc0d1748c531a6/tests%2Fui%2Fclone_on_copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclone_on_copy.stderr?ref=6bf5434e19ce6d2a501589d1fcbc0d1748c531a6", "patch": "@@ -0,0 +1,34 @@\n+error: using `clone` on a `Copy` type\n+  --> $DIR/clone_on_copy.rs:22:5\n+   |\n+LL |     42.clone();\n+   |     ^^^^^^^^^^ help: try removing the `clone` call: `42`\n+   |\n+   = note: `-D clippy::clone-on-copy` implied by `-D warnings`\n+\n+error: using `clone` on a `Copy` type\n+  --> $DIR/clone_on_copy.rs:26:5\n+   |\n+LL |     (&42).clone();\n+   |     ^^^^^^^^^^^^^ help: try dereferencing it: `*(&42)`\n+\n+error: using `clone` on a `Copy` type\n+  --> $DIR/clone_on_copy.rs:29:5\n+   |\n+LL |     rc.borrow().clone();\n+   |     ^^^^^^^^^^^^^^^^^^^ help: try dereferencing it: `*rc.borrow()`\n+\n+error: using `clone` on a `Copy` type\n+  --> $DIR/clone_on_copy.rs:35:14\n+   |\n+LL |     is_ascii('z'.clone());\n+   |              ^^^^^^^^^^^ help: try removing the `clone` call: `'z'`\n+\n+error: using `clone` on a `Copy` type\n+  --> $DIR/clone_on_copy.rs:39:14\n+   |\n+LL |     vec.push(42.clone());\n+   |              ^^^^^^^^^^ help: try removing the `clone` call: `42`\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "2c9d4d39e6c7d9e7d18c8c7daf59fbe075b18b32", "filename": "tests/ui/unnecessary_clone.rs", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6bf5434e19ce6d2a501589d1fcbc0d1748c531a6/tests%2Fui%2Funnecessary_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bf5434e19ce6d2a501589d1fcbc0d1748c531a6/tests%2Fui%2Funnecessary_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_clone.rs?ref=6bf5434e19ce6d2a501589d1fcbc0d1748c531a6", "patch": "@@ -13,31 +13,6 @@ impl SomeTrait for SomeImpl {}\n \n fn main() {}\n \n-fn is_ascii(ch: char) -> bool {\n-    ch.is_ascii()\n-}\n-\n-fn clone_on_copy() {\n-    42.clone();\n-\n-    vec![1].clone(); // ok, not a Copy type\n-    Some(vec![1]).clone(); // ok, not a Copy type\n-    (&42).clone();\n-\n-    let rc = RefCell::new(0);\n-    rc.borrow().clone();\n-\n-    // Issue #4348\n-    let mut x = 43;\n-    let _ = &x.clone(); // ok, getting a ref\n-    'a'.clone().make_ascii_uppercase(); // ok, clone and then mutate\n-    is_ascii('z'.clone());\n-\n-    // Issue #5436\n-    let mut vec = Vec::new();\n-    vec.push(42.clone());\n-}\n-\n fn clone_on_ref_ptr() {\n     let rc = Rc::new(true);\n     let arc = Arc::new(true);"}, {"sha": "113fab6900954c891b2610517dd728148aa3994b", "filename": "tests/ui/unnecessary_clone.stderr", "status": "modified", "additions": 14, "deletions": 44, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/6bf5434e19ce6d2a501589d1fcbc0d1748c531a6/tests%2Fui%2Funnecessary_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6bf5434e19ce6d2a501589d1fcbc0d1748c531a6/tests%2Fui%2Funnecessary_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_clone.stderr?ref=6bf5434e19ce6d2a501589d1fcbc0d1748c531a6", "patch": "@@ -1,81 +1,51 @@\n-error: using `clone` on a `Copy` type\n-  --> $DIR/unnecessary_clone.rs:21:5\n-   |\n-LL |     42.clone();\n-   |     ^^^^^^^^^^ help: try removing the `clone` call: `42`\n-   |\n-   = note: `-D clippy::clone-on-copy` implied by `-D warnings`\n-\n-error: using `clone` on a `Copy` type\n-  --> $DIR/unnecessary_clone.rs:25:5\n-   |\n-LL |     (&42).clone();\n-   |     ^^^^^^^^^^^^^ help: try dereferencing it: `*(&42)`\n-\n-error: using `clone` on a `Copy` type\n-  --> $DIR/unnecessary_clone.rs:28:5\n-   |\n-LL |     rc.borrow().clone();\n-   |     ^^^^^^^^^^^^^^^^^^^ help: try dereferencing it: `*rc.borrow()`\n-\n-error: using `clone` on a `Copy` type\n-  --> $DIR/unnecessary_clone.rs:34:14\n-   |\n-LL |     is_ascii('z'.clone());\n-   |              ^^^^^^^^^^^ help: try removing the `clone` call: `'z'`\n-\n-error: using `clone` on a `Copy` type\n-  --> $DIR/unnecessary_clone.rs:38:14\n-   |\n-LL |     vec.push(42.clone());\n-   |              ^^^^^^^^^^ help: try removing the `clone` call: `42`\n-\n error: using `.clone()` on a ref-counted pointer\n-  --> $DIR/unnecessary_clone.rs:48:5\n+  --> $DIR/unnecessary_clone.rs:23:5\n    |\n LL |     rc.clone();\n    |     ^^^^^^^^^^ help: try this: `Rc::<bool>::clone(&rc)`\n    |\n    = note: `-D clippy::clone-on-ref-ptr` implied by `-D warnings`\n \n error: using `.clone()` on a ref-counted pointer\n-  --> $DIR/unnecessary_clone.rs:51:5\n+  --> $DIR/unnecessary_clone.rs:26:5\n    |\n LL |     arc.clone();\n    |     ^^^^^^^^^^^ help: try this: `Arc::<bool>::clone(&arc)`\n \n error: using `.clone()` on a ref-counted pointer\n-  --> $DIR/unnecessary_clone.rs:54:5\n+  --> $DIR/unnecessary_clone.rs:29:5\n    |\n LL |     rcweak.clone();\n    |     ^^^^^^^^^^^^^^ help: try this: `Weak::<bool>::clone(&rcweak)`\n \n error: using `.clone()` on a ref-counted pointer\n-  --> $DIR/unnecessary_clone.rs:57:5\n+  --> $DIR/unnecessary_clone.rs:32:5\n    |\n LL |     arc_weak.clone();\n    |     ^^^^^^^^^^^^^^^^ help: try this: `Weak::<bool>::clone(&arc_weak)`\n \n error: using `.clone()` on a ref-counted pointer\n-  --> $DIR/unnecessary_clone.rs:61:33\n+  --> $DIR/unnecessary_clone.rs:36:33\n    |\n LL |     let _: Arc<dyn SomeTrait> = x.clone();\n    |                                 ^^^^^^^^^ help: try this: `Arc::<SomeImpl>::clone(&x)`\n \n error: using `clone` on a `Copy` type\n-  --> $DIR/unnecessary_clone.rs:65:5\n+  --> $DIR/unnecessary_clone.rs:40:5\n    |\n LL |     t.clone();\n    |     ^^^^^^^^^ help: try removing the `clone` call: `t`\n+   |\n+   = note: `-D clippy::clone-on-copy` implied by `-D warnings`\n \n error: using `clone` on a `Copy` type\n-  --> $DIR/unnecessary_clone.rs:67:5\n+  --> $DIR/unnecessary_clone.rs:42:5\n    |\n LL |     Some(t).clone();\n    |     ^^^^^^^^^^^^^^^ help: try removing the `clone` call: `Some(t)`\n \n error: using `clone` on a double-reference; this will copy the reference instead of cloning the inner type\n-  --> $DIR/unnecessary_clone.rs:73:22\n+  --> $DIR/unnecessary_clone.rs:48:22\n    |\n LL |     let z: &Vec<_> = y.clone();\n    |                      ^^^^^^^^^\n@@ -91,13 +61,13 @@ LL |     let z: &Vec<_> = <&std::vec::Vec<i32>>::clone(y);\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: using `clone` on a `Copy` type\n-  --> $DIR/unnecessary_clone.rs:109:20\n+  --> $DIR/unnecessary_clone.rs:84:20\n    |\n LL |         let _: E = a.clone();\n    |                    ^^^^^^^^^ help: try dereferencing it: `*****a`\n \n error: using `clone` on a double-reference; this will copy the reference instead of cloning the inner type\n-  --> $DIR/unnecessary_clone.rs:114:22\n+  --> $DIR/unnecessary_clone.rs:89:22\n    |\n LL |         let _ = &mut encoded.clone();\n    |                      ^^^^^^^^^^^^^^^\n@@ -112,7 +82,7 @@ LL |         let _ = &mut <&[u8]>::clone(encoded);\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: using `clone` on a double-reference; this will copy the reference instead of cloning the inner type\n-  --> $DIR/unnecessary_clone.rs:115:18\n+  --> $DIR/unnecessary_clone.rs:90:18\n    |\n LL |         let _ = &encoded.clone();\n    |                  ^^^^^^^^^^^^^^^\n@@ -126,5 +96,5 @@ help: or try being explicit if you are sure, that you want to clone a reference\n LL |         let _ = &<&[u8]>::clone(encoded);\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 16 previous errors\n+error: aborting due to 11 previous errors\n "}]}