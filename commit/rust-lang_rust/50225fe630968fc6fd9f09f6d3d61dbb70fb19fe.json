{"sha": "50225fe630968fc6fd9f09f6d3d61dbb70fb19fe", "node_id": "C_kwDOAAsO6NoAKDUwMjI1ZmU2MzA5NjhmYzZmZDlmMDlmNmQzZDYxZGJiNzBmYjE5ZmU", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-04-01T12:40:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-01T12:40:51Z"}, "message": "Merge #11869\n\n11869: fix: code blocks with tilde also works like code block r=Veykril a=moreal\n\nThe `rustdoc` uses the `pulldown_cmark` package to parse *doc_comment* and the package also treat triple `~` characters also as code block fences. So when we run `cargo doc`, they will be placed also.\r\n\r\n<img width=\"965\" alt=\"image\" src=\"https://user-images.githubusercontent.com/26626194/161208072-5a09a209-57fc-4a52-b190-b0a9be9ffcd6.png\">\r\n\r\nBut `rust-analyzer` doesn't support it so it doesn't have any injected code highlights and any `Run doctest` hint. This pull request tries to allow also them. \ud83d\ude47\ud83c\udffb\u200d\u2642\ufe0f \r\n\r\nBefore:\r\n\r\n<img width=\"224\" alt=\"image\" src=\"https://user-images.githubusercontent.com/26626194/161207405-b1d6cfda-82b1-4f60-8e42-c51d0ed98f38.png\">\r\n\r\nAfter:\r\n\r\n<img width=\"161\" alt=\"image\" src=\"https://user-images.githubusercontent.com/26626194/161207693-8e39997c-9ca6-4e69-8c65-e9b70899f7db.png\">\r\n\n\nCo-authored-by: Lee Dogeon <dev.moreal@gmail.com>", "tree": {"sha": "44e5e49c9fc688f8880755f43437b7fa30700287", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44e5e49c9fc688f8880755f43437b7fa30700287"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50225fe630968fc6fd9f09f6d3d61dbb70fb19fe", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiRvLTCRBK7hj4Ov3rIwAAqd8IADVrgXY4CmnIfg3XEVI6wVzB\nkmvD4XqZgpAkUs6qxvvkO/2RxjUzFFGbrqiT64NzXW8FpTQFj21xvpJg3KHPN9oQ\nMZsu2FLrAGXWghCpr243ovIRtNCF5n+3wW23++wAy96dWd65i9CuY0W/DBkXd290\np0j1Q0Q8b03WT+s4T6JDXXtL9e1GUB6klAAH3mBPS1oGu8KMmxupOTc34cRMHT76\n+GgRBhn1lTRW8wug9dtq/+i8pst27arV2l/czacwtejRrRZSw+yrq0zMJ7npquoj\nIbFAXEynDv2Pr8x0Z16N7fhs9KGPbmEyxLEBdIXBb87WZ7o3DDW0/iX2CKqF3Iw=\n=Z2KN\n-----END PGP SIGNATURE-----\n", "payload": "tree 44e5e49c9fc688f8880755f43437b7fa30700287\nparent 244ee65bbec161f122e48077d9fd7c4bb1cb62d7\nparent e3f32d13e11f8b0aee13656a1dde6b89e90051df\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1648816851 +0000\ncommitter GitHub <noreply@github.com> 1648816851 +0000\n\nMerge #11869\n\n11869: fix: code blocks with tilde also works like code block r=Veykril a=moreal\n\nThe `rustdoc` uses the `pulldown_cmark` package to parse *doc_comment* and the package also treat triple `~` characters also as code block fences. So when we run `cargo doc`, they will be placed also.\r\n\r\n<img width=\"965\" alt=\"image\" src=\"https://user-images.githubusercontent.com/26626194/161208072-5a09a209-57fc-4a52-b190-b0a9be9ffcd6.png\">\r\n\r\nBut `rust-analyzer` doesn't support it so it doesn't have any injected code highlights and any `Run doctest` hint. This pull request tries to allow also them. \ud83d\ude47\ud83c\udffb\u200d\u2642\ufe0f \r\n\r\nBefore:\r\n\r\n<img width=\"224\" alt=\"image\" src=\"https://user-images.githubusercontent.com/26626194/161207405-b1d6cfda-82b1-4f60-8e42-c51d0ed98f38.png\">\r\n\r\nAfter:\r\n\r\n<img width=\"161\" alt=\"image\" src=\"https://user-images.githubusercontent.com/26626194/161207693-8e39997c-9ca6-4e69-8c65-e9b70899f7db.png\">\r\n\n\nCo-authored-by: Lee Dogeon <dev.moreal@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50225fe630968fc6fd9f09f6d3d61dbb70fb19fe", "html_url": "https://github.com/rust-lang/rust/commit/50225fe630968fc6fd9f09f6d3d61dbb70fb19fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50225fe630968fc6fd9f09f6d3d61dbb70fb19fe/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "244ee65bbec161f122e48077d9fd7c4bb1cb62d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/244ee65bbec161f122e48077d9fd7c4bb1cb62d7", "html_url": "https://github.com/rust-lang/rust/commit/244ee65bbec161f122e48077d9fd7c4bb1cb62d7"}, {"sha": "e3f32d13e11f8b0aee13656a1dde6b89e90051df", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3f32d13e11f8b0aee13656a1dde6b89e90051df", "html_url": "https://github.com/rust-lang/rust/commit/e3f32d13e11f8b0aee13656a1dde6b89e90051df"}], "stats": {"total": 28, "additions": 21, "deletions": 7}, "files": [{"sha": "1c455c5f30c37ea85e86980fddee72a1c612d81c", "filename": "crates/ide/src/runnables.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/50225fe630968fc6fd9f09f6d3d61dbb70fb19fe/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50225fe630968fc6fd9f09f6d3d61dbb70fb19fe/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=50225fe630968fc6fd9f09f6d3d61dbb70fb19fe", "patch": "@@ -474,7 +474,7 @@ impl TestAttr {\n     }\n }\n \n-const RUSTDOC_FENCE: &str = \"```\";\n+const RUSTDOC_FENCES: [&str; 2] = [\"```\", \"~~~\"];\n const RUSTDOC_CODE_BLOCK_ATTRIBUTES_RUNNABLE: &[&str] =\n     &[\"\", \"rust\", \"should_panic\", \"edition2015\", \"edition2018\", \"edition2021\"];\n \n@@ -483,7 +483,9 @@ fn has_runnable_doc_test(attrs: &hir::Attrs) -> bool {\n         let mut in_code_block = false;\n \n         for line in String::from(doc).lines() {\n-            if let Some(header) = line.strip_prefix(RUSTDOC_FENCE) {\n+            if let Some(header) =\n+                RUSTDOC_FENCES.into_iter().find_map(|fence| line.strip_prefix(fence))\n+            {\n                 in_code_block = !in_code_block;\n \n                 if in_code_block"}, {"sha": "8ac3c2da50b35654ff58b1eda6ee5f75c4eee54e", "filename": "crates/ide/src/syntax_highlighting/inject.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/50225fe630968fc6fd9f09f6d3d61dbb70fb19fe/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50225fe630968fc6fd9f09f6d3d61dbb70fb19fe/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs?ref=50225fe630968fc6fd9f09f6d3d61dbb70fb19fe", "patch": "@@ -78,7 +78,8 @@ pub(super) fn ra_fixture(\n     Some(())\n }\n \n-const RUSTDOC_FENCE: &str = \"```\";\n+const RUSTDOC_FENCE_LENGTH: usize = 3;\n+const RUSTDOC_FENCES: [&str; 2] = [\"```\", \"~~~\"];\n \n /// Injection of syntax highlighting of doctests.\n pub(super) fn doc_comment(\n@@ -166,11 +167,11 @@ pub(super) fn doc_comment(\n             };\n             let mut pos = TextSize::from(0);\n \n-            match line.find(RUSTDOC_FENCE) {\n+            match RUSTDOC_FENCES.into_iter().find_map(|fence| line.find(fence)) {\n                 Some(idx) => {\n                     is_codeblock = !is_codeblock;\n                     // Check whether code is rust by inspecting fence guards\n-                    let guards = &line[idx + RUSTDOC_FENCE.len()..];\n+                    let guards = &line[idx + RUSTDOC_FENCE_LENGTH..];\n                     let is_rust = is_rust_fence(guards);\n                     is_doctest = is_codeblock && is_rust;\n                     continue;"}, {"sha": "36e9ec6333be03a36c533f899b026d5d1c1b8fc9", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_doctest.html", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/50225fe630968fc6fd9f09f6d3d61dbb70fb19fe/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html", "raw_url": "https://github.com/rust-lang/rust/raw/50225fe630968fc6fd9f09f6d3d61dbb70fb19fe/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html?ref=50225fe630968fc6fd9f09f6d3d61dbb70fb19fe", "patch": "@@ -110,6 +110,11 @@\n     <span class=\"comment documentation\">///</span><span class=\"comment documentation\"> </span><span class=\"keyword injected\">let</span><span class=\"none injected\"> </span><span class=\"variable declaration injected\">foobar</span><span class=\"none injected\"> </span><span class=\"operator injected\">=</span><span class=\"none injected\"> </span><span class=\"struct injected\">Foo</span><span class=\"operator injected\">::</span><span class=\"function injected\">new</span><span class=\"parenthesis injected\">(</span><span class=\"parenthesis injected\">)</span><span class=\"operator injected\">.</span><span class=\"function injected\">bar</span><span class=\"parenthesis injected\">(</span><span class=\"parenthesis injected\">)</span><span class=\"semicolon injected\">;</span>\n     <span class=\"comment documentation\">/// ```</span>\n     <span class=\"comment documentation\">///</span>\n+    <span class=\"comment documentation\">/// ~~~rust,no_run</span>\n+    <span class=\"comment documentation\">///</span><span class=\"comment documentation\"> </span><span class=\"comment injected\">// code block with tilde.</span>\n+    <span class=\"comment documentation\">///</span><span class=\"comment documentation\"> </span><span class=\"keyword injected\">let</span><span class=\"none injected\"> </span><span class=\"variable declaration injected\">foobar</span><span class=\"none injected\"> </span><span class=\"operator injected\">=</span><span class=\"none injected\"> </span><span class=\"struct injected\">Foo</span><span class=\"operator injected\">::</span><span class=\"function injected\">new</span><span class=\"parenthesis injected\">(</span><span class=\"parenthesis injected\">)</span><span class=\"operator injected\">.</span><span class=\"function injected\">bar</span><span class=\"parenthesis injected\">(</span><span class=\"parenthesis injected\">)</span><span class=\"semicolon injected\">;</span>\n+    <span class=\"comment documentation\">/// ~~~</span>\n+    <span class=\"comment documentation\">///</span>\n     <span class=\"comment documentation\">/// ```</span>\n     <span class=\"comment documentation\">///</span><span class=\"comment documentation\"> </span><span class=\"comment injected\">// functions</span>\n     <span class=\"comment documentation\">///</span><span class=\"comment documentation\"> </span><span class=\"keyword injected\">fn</span><span class=\"none injected\"> </span><span class=\"function declaration injected\">foo</span><span class=\"angle injected\">&lt;</span><span class=\"type_param declaration injected\">T</span><span class=\"comma injected\">,</span><span class=\"none injected\"> </span><span class=\"keyword injected\">const</span><span class=\"none injected\"> </span><span class=\"const_param declaration injected\">X</span><span class=\"colon injected\">:</span><span class=\"none injected\"> </span><span class=\"builtin_type injected\">usize</span><span class=\"angle injected\">&gt;</span><span class=\"parenthesis injected\">(</span><span class=\"value_param declaration injected\">arg</span><span class=\"colon injected\">:</span><span class=\"none injected\"> </span><span class=\"builtin_type injected\">i32</span><span class=\"parenthesis injected\">)</span><span class=\"none injected\"> </span><span class=\"brace injected\">{</span>"}, {"sha": "fdfe347a3286ddf981d1d5325497d7d4bde8ea68", "filename": "crates/ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/50225fe630968fc6fd9f09f6d3d61dbb70fb19fe/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50225fe630968fc6fd9f09f6d3d61dbb70fb19fe/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=50225fe630968fc6fd9f09f6d3d61dbb70fb19fe", "patch": "@@ -644,6 +644,11 @@ impl Foo {\n     /// let foobar = Foo::new().bar();\n     /// ```\n     ///\n+    /// ~~~rust,no_run\n+    /// // code block with tilde.\n+    /// let foobar = Foo::new().bar();\n+    /// ~~~\n+    ///\n     /// ```\n     /// // functions\n     /// fn foo<T, const X: usize>(arg: i32) {"}, {"sha": "912ed1e7642759a21030209d8d502a5505e70132", "filename": "crates/rust-analyzer/src/markdown.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/50225fe630968fc6fd9f09f6d3d61dbb70fb19fe/crates%2Frust-analyzer%2Fsrc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50225fe630968fc6fd9f09f6d3d61dbb70fb19fe/crates%2Frust-analyzer%2Fsrc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmarkdown.rs?ref=50225fe630968fc6fd9f09f6d3d61dbb70fb19fe", "patch": "@@ -1,7 +1,7 @@\n //! Transforms markdown\n use ide_db::rust_doc::is_rust_fence;\n \n-const RUSTDOC_FENCE: &str = \"```\";\n+const RUSTDOC_FENCES: [&str; 2] = [\"```\", \"~~~\"];\n \n pub(crate) fn format_docs(src: &str) -> String {\n     let mut processed_lines = Vec::new();\n@@ -13,7 +13,8 @@ pub(crate) fn format_docs(src: &str) -> String {\n             continue;\n         }\n \n-        if let Some(header) = line.strip_prefix(RUSTDOC_FENCE) {\n+        if let Some(header) = RUSTDOC_FENCES.into_iter().find_map(|fence| line.strip_prefix(fence))\n+        {\n             in_code_block ^= true;\n \n             if in_code_block {"}]}