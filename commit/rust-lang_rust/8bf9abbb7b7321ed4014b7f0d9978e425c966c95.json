{"sha": "8bf9abbb7b7321ed4014b7f0d9978e425c966c95", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiZjlhYmJiN2I3MzIxZWQ0MDE0YjdmMGQ5OTc4ZTQyNWM5NjZjOTU=", "commit": {"author": {"name": "SNCPlay42", "email": "SNCPlay42@gmail.com", "date": "2020-10-26T09:28:09Z"}, "committer": {"name": "SNCPlay42", "email": "SNCPlay42@gmail.com", "date": "2020-10-26T09:29:50Z"}, "message": "always record reference to binding in match if guards", "tree": {"sha": "ce93fe13b97dc4e902dca27edcce874812a7025a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce93fe13b97dc4e902dca27edcce874812a7025a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8bf9abbb7b7321ed4014b7f0d9978e425c966c95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8bf9abbb7b7321ed4014b7f0d9978e425c966c95", "html_url": "https://github.com/rust-lang/rust/commit/8bf9abbb7b7321ed4014b7f0d9978e425c966c95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8bf9abbb7b7321ed4014b7f0d9978e425c966c95/comments", "author": {"login": "SNCPlay42", "id": 5455518, "node_id": "MDQ6VXNlcjU0NTU1MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5455518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SNCPlay42", "html_url": "https://github.com/SNCPlay42", "followers_url": "https://api.github.com/users/SNCPlay42/followers", "following_url": "https://api.github.com/users/SNCPlay42/following{/other_user}", "gists_url": "https://api.github.com/users/SNCPlay42/gists{/gist_id}", "starred_url": "https://api.github.com/users/SNCPlay42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SNCPlay42/subscriptions", "organizations_url": "https://api.github.com/users/SNCPlay42/orgs", "repos_url": "https://api.github.com/users/SNCPlay42/repos", "events_url": "https://api.github.com/users/SNCPlay42/events{/privacy}", "received_events_url": "https://api.github.com/users/SNCPlay42/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SNCPlay42", "id": 5455518, "node_id": "MDQ6VXNlcjU0NTU1MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5455518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SNCPlay42", "html_url": "https://github.com/SNCPlay42", "followers_url": "https://api.github.com/users/SNCPlay42/followers", "following_url": "https://api.github.com/users/SNCPlay42/following{/other_user}", "gists_url": "https://api.github.com/users/SNCPlay42/gists{/gist_id}", "starred_url": "https://api.github.com/users/SNCPlay42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SNCPlay42/subscriptions", "organizations_url": "https://api.github.com/users/SNCPlay42/orgs", "repos_url": "https://api.github.com/users/SNCPlay42/repos", "events_url": "https://api.github.com/users/SNCPlay42/events{/privacy}", "received_events_url": "https://api.github.com/users/SNCPlay42/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69e68cf550fb7ba6137b167c17d0fcbe7ea06ce2", "url": "https://api.github.com/repos/rust-lang/rust/commits/69e68cf550fb7ba6137b167c17d0fcbe7ea06ce2", "html_url": "https://github.com/rust-lang/rust/commit/69e68cf550fb7ba6137b167c17d0fcbe7ea06ce2"}], "stats": {"total": 33, "additions": 32, "deletions": 1}, "files": [{"sha": "f1828ddf3eb9497a92d14b740d176ec1873ce023", "filename": "compiler/rustc_typeck/src/check/generator_interior.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8bf9abbb7b7321ed4014b7f0d9978e425c966c95/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bf9abbb7b7321ed4014b7f0d9978e425c966c95/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs?ref=8bf9abbb7b7321ed4014b7f0d9978e425c966c95", "patch": "@@ -344,6 +344,18 @@ impl<'a, 'tcx> Visitor<'tcx> for InteriorVisitor<'a, 'tcx> {\n         // The type table might not have information for this expression\n         // if it is in a malformed scope. (#66387)\n         if let Some(ty) = self.fcx.typeck_results.borrow().expr_ty_opt(expr) {\n+            if guard_borrowing_from_pattern {\n+                // Match guards create references to all the bindings in the pattern that are used\n+                // in the guard, e.g. `y if is_even(y) => ...` becomes `is_even(*r_y)` where `r_y`\n+                // is a reference to `y`, so we must record a reference to the type of the binding.\n+                let tcx = self.fcx.tcx;\n+                let ref_ty = tcx.mk_ref(\n+                    // Use `ReErased` as `resolve_interior` is going to replace all the regions anyway.\n+                    tcx.mk_region(ty::RegionKind::ReErased),\n+                    ty::TypeAndMut { ty, mutbl: hir::Mutability::Not },\n+                );\n+                self.record(ref_ty, scope, Some(expr), expr.span, guard_borrowing_from_pattern);\n+            }\n             self.record(ty, scope, Some(expr), expr.span, guard_borrowing_from_pattern);\n         } else {\n             self.fcx.tcx.sess.delay_span_bug(expr.span, \"no type for node\");"}, {"sha": "c76726414df8abb27752ac058572bd0655cb0fee", "filename": "src/test/ui/generator/yielding-in-match-guards.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8bf9abbb7b7321ed4014b7f0d9978e425c966c95/src%2Ftest%2Fui%2Fgenerator%2Fyielding-in-match-guards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bf9abbb7b7321ed4014b7f0d9978e425c966c95/src%2Ftest%2Fui%2Fgenerator%2Fyielding-in-match-guards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyielding-in-match-guards.rs?ref=8bf9abbb7b7321ed4014b7f0d9978e425c966c95", "patch": "@@ -1,4 +1,4 @@\n-// check-pass\n+// build-pass\n // edition:2018\n \n // This test is derived from\n@@ -11,6 +11,7 @@\n // of the underlying generator.\n \n async fn f() -> u8 { 1 }\n+async fn foo() -> [bool; 10] { [false; 10] }\n \n pub async fn g(x: u8) {\n     match x {\n@@ -19,6 +20,24 @@ pub async fn g(x: u8) {\n     }\n }\n \n+// #78366: check the reference to the binding is recorded even if the binding is not autorefed\n+\n+async fn h(x: usize) {\n+    match x {\n+        y if foo().await[y] => (),\n+        _ => (),\n+    }\n+}\n+\n+async fn i(x: u8) {\n+    match x {\n+        y if f().await == y + 1 => (),\n+        _ => (),\n+    }\n+}\n+\n fn main() {\n     let _ = g(10);\n+    let _ = h(9);\n+    let _ = i(8);\n }"}]}