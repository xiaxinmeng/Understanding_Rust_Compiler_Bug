{"sha": "3bbcf64fb33e701084c664d9b691ac3c1736bd14", "node_id": "C_kwDOAAsO6NoAKDNiYmNmNjRmYjMzZTcwMTA4NGM2NjRkOWI2OTFhYzNjMTczNmJkMTQ", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-03-26T17:17:49Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-03-26T18:35:36Z"}, "message": "interpret: with enforce_number_validity, ensure integers are truly Scalar::Int (i.e., no pointers)", "tree": {"sha": "13620d270e8cabb0447939eb7a9839261a85e591", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13620d270e8cabb0447939eb7a9839261a85e591"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bbcf64fb33e701084c664d9b691ac3c1736bd14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bbcf64fb33e701084c664d9b691ac3c1736bd14", "html_url": "https://github.com/rust-lang/rust/commit/3bbcf64fb33e701084c664d9b691ac3c1736bd14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bbcf64fb33e701084c664d9b691ac3c1736bd14/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78b680e14a287a98ec0501116607bb49b31c9f28", "url": "https://api.github.com/repos/rust-lang/rust/commits/78b680e14a287a98ec0501116607bb49b31c9f28", "html_url": "https://github.com/rust-lang/rust/commit/78b680e14a287a98ec0501116607bb49b31c9f28"}], "stats": {"total": 9, "additions": 6, "deletions": 3}, "files": [{"sha": "9da7f5e30cb9eff604835c8680f97837d8934672", "filename": "compiler/rustc_const_eval/src/interpret/validity.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3bbcf64fb33e701084c664d9b691ac3c1736bd14/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bbcf64fb33e701084c664d9b691ac3c1736bd14/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs?ref=3bbcf64fb33e701084c664d9b691ac3c1736bd14", "patch": "@@ -21,7 +21,7 @@ use std::hash::Hash;\n \n use super::{\n     alloc_range, CheckInAllocMsg, GlobalAlloc, InterpCx, InterpResult, MPlaceTy, Machine,\n-    MemPlaceMeta, OpTy, ScalarMaybeUninit, ValueVisitor,\n+    MemPlaceMeta, OpTy, Scalar, ScalarMaybeUninit, ValueVisitor,\n };\n \n macro_rules! throw_validation_failure {\n@@ -521,8 +521,11 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                 // NOTE: Keep this in sync with the array optimization for int/float\n                 // types below!\n                 if M::enforce_number_validity(self.ecx) {\n-                    // Integers/floats in CTFE: Must be scalar bits, pointers are dangerous\n-                    let is_bits = value.check_init().map_or(false, |v| v.try_to_int().is_ok());\n+                    // Integers/floats with number validity: Must be scalar bits, pointers are dangerous.\n+                    // As a special exception we *do* match on a `Scalar` here, since we truly want\n+                    // to know its underlying representation (and *not* cast it to an integer).\n+                    let is_bits =\n+                        value.check_init().map_or(false, |v| matches!(v, Scalar::Int(..)));\n                     if !is_bits {\n                         throw_validation_failure!(self.path,\n                             { \"{:x}\", value } expected { \"initialized plain (non-pointer) bytes\" }"}]}