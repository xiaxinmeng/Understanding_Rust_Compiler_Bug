{"sha": "35c00a9731809292959e98b1e7da3c6e2673f3cc", "node_id": "C_kwDOAAsO6NoAKDM1YzAwYTk3MzE4MDkyOTI5NTllOThiMWU3ZGEzYzZlMjY3M2YzY2M", "commit": {"author": {"name": "Lukas Markeffsky", "email": "@", "date": "2022-12-03T19:02:39Z"}, "committer": {"name": "Lukas Markeffsky", "email": "@", "date": "2022-12-03T19:02:39Z"}, "message": "suggest parenthesis around ExprWithBlock BinOp ExprWithBlock", "tree": {"sha": "f5ad057affd309a992e739c6158f4371400575bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5ad057affd309a992e739c6158f4371400575bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35c00a9731809292959e98b1e7da3c6e2673f3cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35c00a9731809292959e98b1e7da3c6e2673f3cc", "html_url": "https://github.com/rust-lang/rust/commit/35c00a9731809292959e98b1e7da3c6e2673f3cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35c00a9731809292959e98b1e7da3c6e2673f3cc/comments", "author": null, "committer": null, "parents": [{"sha": "4bb15759d7eb519be70c9a955dba9be09e13c06d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bb15759d7eb519be70c9a955dba9be09e13c06d", "html_url": "https://github.com/rust-lang/rust/commit/4bb15759d7eb519be70c9a955dba9be09e13c06d"}], "stats": {"total": 85, "additions": 71, "deletions": 14}, "files": [{"sha": "56b889fdcdda6f11be5f5758692ade9be2fea155", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35c00a9731809292959e98b1e7da3c6e2673f3cc/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35c00a9731809292959e98b1e7da3c6e2673f3cc/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=35c00a9731809292959e98b1e7da3c6e2673f3cc", "patch": "@@ -32,11 +32,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n \n     pub(in super::super) fn suggest_semicolon_at_end(&self, span: Span, err: &mut Diagnostic) {\n+        // This suggestion is incorrect for\n+        // fn foo() -> bool { match () { () => true } || match () { () => true } }\n         err.span_suggestion_short(\n             span.shrink_to_hi(),\n             \"consider using a semicolon here\",\n             \";\",\n-            Applicability::MachineApplicable,\n+            Applicability::MaybeIncorrect,\n         );\n     }\n "}, {"sha": "377638ab96870ec2c15d23cee1f2d9537ec370c9", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/35c00a9731809292959e98b1e7da3c6e2673f3cc/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35c00a9731809292959e98b1e7da3c6e2673f3cc/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=35c00a9731809292959e98b1e7da3c6e2673f3cc", "patch": "@@ -390,20 +390,10 @@ impl<'a> Parser<'a> {\n             // want to keep their span info to improve diagnostics in these cases in a later stage.\n             (true, Some(AssocOp::Multiply)) | // `{ 42 } *foo = bar;` or `{ 42 } * 3`\n             (true, Some(AssocOp::Subtract)) | // `{ 42 } -5`\n-            (true, Some(AssocOp::Add)) // `{ 42 } + 42\n-            // If the next token is a keyword, then the tokens above *are* unambiguously incorrect:\n-            // `if x { a } else { b } && if y { c } else { d }`\n-            if !self.look_ahead(1, |t| t.is_used_keyword()) => {\n-                // These cases are ambiguous and can't be identified in the parser alone.\n-                let sp = self.sess.source_map().start_point(self.token.span);\n-                self.sess.ambiguous_block_expr_parse.borrow_mut().insert(sp, lhs.span);\n-                false\n-            }\n-            (true, Some(AssocOp::LAnd)) |\n+            (true, Some(AssocOp::Add)) | // `{ 42 } + 42\n+            (true, Some(AssocOp::LAnd)) | // `{ 42 } &&x` (#61475) or `{ 42 } && if x { 1 } else { 0 }`\n             (true, Some(AssocOp::LOr)) |\n             (true, Some(AssocOp::BitOr)) => {\n-                // `{ 42 } &&x` (#61475) or `{ 42 } && if x { 1 } else { 0 }`. Separated from the\n-                // above due to #74233.\n                 // These cases are ambiguous and can't be identified in the parser alone.\n                 //\n                 // Bitwise AND is left out because guessing intent is hard. We can make"}, {"sha": "b06f62794c4e3a4632930ed8ed7d90866bac79bd", "filename": "src/test/ui/parser/expr-as-stmt.fixed", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/35c00a9731809292959e98b1e7da3c6e2673f3cc/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/35c00a9731809292959e98b1e7da3c6e2673f3cc/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.fixed?ref=35c00a9731809292959e98b1e7da3c6e2673f3cc", "patch": "@@ -64,4 +64,16 @@ fn asteroids() -> impl FnOnce() -> bool {\n     { foo(); } || { true } //~ ERROR E0308\n }\n \n+// https://github.com/rust-lang/rust/issues/105179\n+fn r#match() -> i32 {\n+    (match () { () => 1 }) + match () { () => 1 } //~ ERROR expected expression, found `+`\n+    //~^ ERROR mismatched types\n+}\n+\n+// https://github.com/rust-lang/rust/issues/102171\n+fn r#unsafe() -> i32 {\n+    (unsafe { 1 }) + unsafe { 1 } //~ ERROR expected expression, found `+`\n+    //~^ ERROR mismatched types\n+}\n+\n fn main() {}"}, {"sha": "b39d2b88647c0a5d806ce3c4b227801dbe86ee7f", "filename": "src/test/ui/parser/expr-as-stmt.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/35c00a9731809292959e98b1e7da3c6e2673f3cc/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35c00a9731809292959e98b1e7da3c6e2673f3cc/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.rs?ref=35c00a9731809292959e98b1e7da3c6e2673f3cc", "patch": "@@ -64,4 +64,16 @@ fn asteroids() -> impl FnOnce() -> bool {\n     { foo() } || { true } //~ ERROR E0308\n }\n \n+// https://github.com/rust-lang/rust/issues/105179\n+fn r#match() -> i32 {\n+    match () { () => 1 } + match () { () => 1 } //~ ERROR expected expression, found `+`\n+    //~^ ERROR mismatched types\n+}\n+\n+// https://github.com/rust-lang/rust/issues/102171\n+fn r#unsafe() -> i32 {\n+    unsafe { 1 } + unsafe { 1 } //~ ERROR expected expression, found `+`\n+    //~^ ERROR mismatched types\n+}\n+\n fn main() {}"}, {"sha": "18c8b0b7c506bbb6b0fd069ecb07d2df43ac6e79", "filename": "src/test/ui/parser/expr-as-stmt.stderr", "status": "modified", "additions": 42, "deletions": 1, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/35c00a9731809292959e98b1e7da3c6e2673f3cc/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35c00a9731809292959e98b1e7da3c6e2673f3cc/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr?ref=35c00a9731809292959e98b1e7da3c6e2673f3cc", "patch": "@@ -55,6 +55,28 @@ help: parentheses are required to parse this as an expression\n LL |     ({ true }) | { true }\n    |     +        +\n \n+error: expected expression, found `+`\n+  --> $DIR/expr-as-stmt.rs:69:26\n+   |\n+LL |     match () { () => 1 } + match () { () => 1 }\n+   |                          ^ expected expression\n+   |\n+help: parentheses are required to parse this as an expression\n+   |\n+LL |     (match () { () => 1 }) + match () { () => 1 }\n+   |     +                    +\n+\n+error: expected expression, found `+`\n+  --> $DIR/expr-as-stmt.rs:75:18\n+   |\n+LL |     unsafe { 1 } + unsafe { 1 }\n+   |                  ^ expected expression\n+   |\n+help: parentheses are required to parse this as an expression\n+   |\n+LL |     (unsafe { 1 }) + unsafe { 1 }\n+   |     +            +\n+\n error[E0308]: mismatched types\n   --> $DIR/expr-as-stmt.rs:64:7\n    |\n@@ -201,7 +223,26 @@ help: parentheses are required to parse this as an expression\n LL |     ({ true }) || { true }\n    |     +        +\n \n-error: aborting due to 18 previous errors\n+error[E0308]: mismatched types\n+  --> $DIR/expr-as-stmt.rs:69:5\n+   |\n+LL |     match () { () => 1 } + match () { () => 1 }\n+   |     ^^^^^^^^^^^^^^^^^^^^- help: consider using a semicolon here\n+   |     |\n+   |     expected `()`, found integer\n+\n+error[E0308]: mismatched types\n+  --> $DIR/expr-as-stmt.rs:75:14\n+   |\n+LL |     unsafe { 1 } + unsafe { 1 }\n+   |              ^ expected `()`, found integer\n+   |\n+help: you might have meant to return this value\n+   |\n+LL |     unsafe { return 1; } + unsafe { 1 }\n+   |              ++++++  +\n+\n+error: aborting due to 22 previous errors\n \n Some errors have detailed explanations: E0308, E0600, E0614.\n For more information about an error, try `rustc --explain E0308`."}]}