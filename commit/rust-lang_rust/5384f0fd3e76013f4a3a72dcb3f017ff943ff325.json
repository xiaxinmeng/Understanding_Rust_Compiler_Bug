{"sha": "5384f0fd3e76013f4a3a72dcb3f017ff943ff325", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzODRmMGZkM2U3NjAxM2Y0YTNhNzJkY2IzZjAxN2ZmOTQzZmYzMjU=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-09-15T14:26:45Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-09-15T14:26:45Z"}, "message": "Make `bad_style` a silent alias for `nonstandard_style`\n\nNow only `nonstandard_style` is suggested in `rustc -W help`, but `bad_style` will not produce a warning.", "tree": {"sha": "704fa552a590822cc6c9d745be40b2f3b0c0a9ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/704fa552a590822cc6c9d745be40b2f3b0c0a9ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5384f0fd3e76013f4a3a72dcb3f017ff943ff325", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5384f0fd3e76013f4a3a72dcb3f017ff943ff325", "html_url": "https://github.com/rust-lang/rust/commit/5384f0fd3e76013f4a3a72dcb3f017ff943ff325", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5384f0fd3e76013f4a3a72dcb3f017ff943ff325/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90d36fb5905bbe5004f5b465ea14b53d10dae260", "url": "https://api.github.com/repos/rust-lang/rust/commits/90d36fb5905bbe5004f5b465ea14b53d10dae260", "html_url": "https://github.com/rust-lang/rust/commit/90d36fb5905bbe5004f5b465ea14b53d10dae260"}], "stats": {"total": 73, "additions": 43, "deletions": 30}, "files": [{"sha": "f498935a8151f22b094d00beb5d66e63587c486c", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 34, "deletions": 17, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/5384f0fd3e76013f4a3a72dcb3f017ff943ff325/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5384f0fd3e76013f4a3a72dcb3f017ff943ff325/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=5384f0fd3e76013f4a3a72dcb3f017ff943ff325", "patch": "@@ -69,8 +69,9 @@ pub struct LintStore {\n \n     /// Map of registered lint groups to what lints they expand to. The first\n     /// bool is true if the lint group was added by a plugin. The optional string\n-    /// is used to store the new names of deprecated lint group names.\n-    lint_groups: FxHashMap<&'static str, (Vec<LintId>, bool, Option<&'static str>)>,\n+    /// is used to store the new names of deprecated lint group names and is paired\n+    /// with `true` if the deprecation is silent.\n+    lint_groups: FxHashMap<&'static str, (Vec<LintId>, bool, Option<(&'static str, bool)>)>,\n \n     /// Extra info for future incompatibility lints, describing the\n     /// issue or RFC that caused the incompatibility.\n@@ -160,9 +161,9 @@ impl LintStore {\n     }\n \n     pub fn get_lint_groups<'t>(&'t self) -> Vec<(&'static str, Vec<LintId>, bool)> {\n-        self.lint_groups.iter().map(|(k, v)| (*k,\n-                                              v.0.clone(),\n-                                              v.1)).collect()\n+        self.lint_groups.iter()\n+            .filter(|(_, (_, _, d))| d.is_none()) // Don't display deprecated lint groups.\n+            .map(|(k, v)| (*k, v.0.clone(), v.1)).collect()\n     }\n \n     pub fn register_early_pass(&mut self,\n@@ -245,6 +246,14 @@ impl LintStore {\n         self.future_incompatible.get(&id)\n     }\n \n+    pub fn register_group_alias(\n+        &mut self,\n+        lint_name: &'static str,\n+        alias: &'static str,\n+    ) {\n+        self.lint_groups.insert(alias, (vec![], false, Some((lint_name, true))));\n+    }\n+\n     pub fn register_group(\n         &mut self,\n         sess: Option<&Session>,\n@@ -259,7 +268,7 @@ impl LintStore {\n             .is_none();\n         if let Some(deprecated) = deprecated_name {\n             self.lint_groups\n-                .insert(deprecated, (vec![], from_plugin, Some(name)));\n+                .insert(deprecated, (vec![], from_plugin, Some((name, false))));\n         }\n \n         if !new {\n@@ -392,12 +401,16 @@ impl LintStore {\n                 None => self.check_tool_name_for_backwards_compat(&complete_name, \"clippy\"),\n                 Some(ids) => {\n                     // Check if the lint group name is deprecated\n-                    if let Some(new_name) = ids.2 {\n+                    if let Some((new_name, silent)) = ids.2 {\n                         let lint_ids = self.lint_groups.get(new_name).unwrap();\n-                        return CheckLintNameResult::Tool(Err((\n-                            Some(&lint_ids.0),\n-                            new_name.to_string(),\n-                        )));\n+                        return if silent {\n+                            CheckLintNameResult::Ok(&lint_ids.0)\n+                        } else {\n+                            CheckLintNameResult::Tool(Err((\n+                                Some(&lint_ids.0),\n+                                new_name.to_string(),\n+                            )))\n+                        };\n                     }\n                     CheckLintNameResult::Ok(&ids.0)\n                 }\n@@ -417,13 +430,17 @@ impl LintStore {\n                 // Now we are sure, that this lint exists nowhere\n                 None => CheckLintNameResult::NoLint,\n                 Some(ids) => {\n-                    // Reaching this would be weird, but lets cover this case anyway\n-                    if let Some(new_name) = ids.2 {\n+                    // Reaching this would be weird, but let's cover this case anyway\n+                    if let Some((new_name, silent)) = ids.2 {\n                         let lint_ids = self.lint_groups.get(new_name).unwrap();\n-                        return CheckLintNameResult::Tool(Err((\n-                            Some(&lint_ids.0),\n-                            new_name.to_string(),\n-                        )));\n+                        return if silent {\n+                            CheckLintNameResult::Tool(Err((Some(&lint_ids.0), complete_name)))\n+                        } else {\n+                            CheckLintNameResult::Tool(Err((\n+                                Some(&lint_ids.0),\n+                                new_name.to_string(),\n+                            )))\n+                        };\n                     }\n                     CheckLintNameResult::Tool(Err((Some(&ids.0), complete_name)))\n                 }"}, {"sha": "3b935ac5aa886a4d743b576f66050b487fbf8969", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5384f0fd3e76013f4a3a72dcb3f017ff943ff325/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5384f0fd3e76013f4a3a72dcb3f017ff943ff325/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=5384f0fd3e76013f4a3a72dcb3f017ff943ff325", "patch": "@@ -82,30 +82,30 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n         ($sess:ident, $($name:ident),*,) => (\n             {$(\n                 store.register_early_pass($sess, false, box $name);\n-                )*}\n-            )\n+            )*}\n+        )\n     }\n \n     macro_rules! add_pre_expansion_builtin {\n         ($sess:ident, $($name:ident),*,) => (\n             {$(\n                 store.register_pre_expansion_pass($sess, box $name);\n-                )*}\n-            )\n+            )*}\n+        )\n     }\n \n     macro_rules! add_early_builtin_with_new {\n         ($sess:ident, $($name:ident),*,) => (\n             {$(\n                 store.register_early_pass($sess, false, box $name::new());\n-                )*}\n-            )\n+            )*}\n+        )\n     }\n \n     macro_rules! add_lint_group {\n         ($sess:ident, $name:expr, $($lint:ident),*) => (\n             store.register_group($sess, false, $name, None, vec![$(LintId::of($lint)),*]);\n-            )\n+        )\n     }\n \n     add_pre_expansion_builtin!(sess,\n@@ -159,12 +159,6 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n \n     store.register_late_pass(sess, false, box BuiltinCombinedLateLintPass::new());\n \n-    add_lint_group!(sess,\n-                    \"bad_style\",\n-                    NON_CAMEL_CASE_TYPES,\n-                    NON_SNAKE_CASE,\n-                    NON_UPPER_CASE_GLOBALS);\n-\n     add_lint_group!(sess,\n                     \"nonstandard_style\",\n                     NON_CAMEL_CASE_TYPES,\n@@ -353,6 +347,8 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n     store.register_removed(\"unsigned_negation\", \"replaced by negate_unsigned feature gate\");\n     store.register_removed(\"negate_unsigned\", \"cast a signed value instead\");\n     store.register_removed(\"raw_pointer_derive\", \"using derive with raw pointers is ok\");\n+    // Register lint group aliases\n+    store.register_group_alias(\"nonstandard_style\", \"bad_style\");\n     // This was renamed to raw_pointer_derive, which was then removed,\n     // so it is also considered removed\n     store.register_removed(\"raw_pointer_deriving\", \"using derive with raw pointers is ok\");"}]}