{"sha": "0714bb5f7d1805322095841471bc9244df1aaea0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3MTRiYjVmN2QxODA1MzIyMDk1ODQxNDcxYmM5MjQ0ZGYxYWFlYTA=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-20T22:26:26Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-20T22:38:51Z"}, "message": "Fix the problem with check-fast randomly failing\n\nTrans has been assuming that tag node id's are unique across crates and they\nare not so, depending on which way the wind is blowing, it would choose to use\na crate-local tag variant instead of the correct one from std.\n\nNo test case since I can't come up with a reliable one that compiles in a\nreasonable amount of time.", "tree": {"sha": "f353c854d49bdb6a092c1f6e8471a8531c693339", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f353c854d49bdb6a092c1f6e8471a8531c693339"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0714bb5f7d1805322095841471bc9244df1aaea0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0714bb5f7d1805322095841471bc9244df1aaea0", "html_url": "https://github.com/rust-lang/rust/commit/0714bb5f7d1805322095841471bc9244df1aaea0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0714bb5f7d1805322095841471bc9244df1aaea0/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8f1d950ef50b5e2e9380999d65c0769f0e381d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8f1d950ef50b5e2e9380999d65c0769f0e381d3", "html_url": "https://github.com/rust-lang/rust/commit/f8f1d950ef50b5e2e9380999d65c0769f0e381d3"}], "stats": {"total": 23, "additions": 18, "deletions": 5}, "files": [{"sha": "ca456ef1c3168dc4c2b31e79f27cd629a9c82d47", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0714bb5f7d1805322095841471bc9244df1aaea0/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0714bb5f7d1805322095841471bc9244df1aaea0/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=0714bb5f7d1805322095841471bc9244df1aaea0", "patch": "@@ -3026,7 +3026,7 @@ fn lval_static_fn(bcx: @block_ctxt, tpt: ty::ty_param_kinds_and_ty,\n }\n \n fn lookup_discriminant(lcx: @local_ctxt, vid: ast::def_id) -> ValueRef {\n-    alt lcx.ccx.discrims.find(vid.node) {\n+    alt lcx.ccx.discrims.find(vid) {\n       none. {\n         // It's an external discriminant that we haven't seen yet.\n         assert (vid.crate != ast::local_crate);\n@@ -3039,7 +3039,7 @@ fn lookup_discriminant(lcx: @local_ctxt, vid: ast::def_id) -> ValueRef {\n         llvm::LLVMSetLinkage(gvar,\n                              lib::llvm::LLVMExternalLinkage as llvm::Linkage);\n         llvm::LLVMSetGlobalConstant(gvar, True);\n-        lcx.ccx.discrims.insert(vid.node, gvar);\n+        lcx.ccx.discrims.insert(vid, gvar);\n         ret gvar;\n       }\n       some(llval) { ret llval; }\n@@ -6086,7 +6086,8 @@ fn trans_constant(ccx: @crate_ctxt, it: @ast::item, &&pt: [str],\n                             });\n             llvm::LLVMSetInitializer(discrim_gvar, C_int(i as int));\n             llvm::LLVMSetGlobalConstant(discrim_gvar, True);\n-            ccx.discrims.insert(variant.node.id, discrim_gvar);\n+            ccx.discrims.insert(\n+                ast_util::local_def(variant.node.id), discrim_gvar);\n             ccx.discrim_symbols.insert(variant.node.id, s);\n             i += 1u;\n         }\n@@ -6288,7 +6289,7 @@ fn trans_crate(sess: session::session, crate: @ast::crate, tcx: ty::ctxt,\n           mutable main_fn: none::<ValueRef>,\n           link_meta: link_meta,\n           tag_sizes: tag_sizes,\n-          discrims: new_int_hash::<ValueRef>(),\n+          discrims: ast_util::new_def_id_hash::<ValueRef>(),\n           discrim_symbols: new_int_hash::<str>(),\n           consts: new_int_hash::<ValueRef>(),\n           obj_methods: new_int_hash::<()>(),"}, {"sha": "3b0043e16608df2efed20bb4376e46c8a77b7a04", "filename": "src/comp/middle/trans_common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0714bb5f7d1805322095841471bc9244df1aaea0/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0714bb5f7d1805322095841471bc9244df1aaea0/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_common.rs?ref=0714bb5f7d1805322095841471bc9244df1aaea0", "patch": "@@ -102,7 +102,7 @@ type crate_ctxt =\n      mutable main_fn: option::t<ValueRef>,\n      link_meta: link::link_meta,\n      tag_sizes: hashmap<ty::t, uint>,\n-     discrims: hashmap<ast::node_id, ValueRef>,\n+     discrims: hashmap<ast::def_id, ValueRef>,\n      discrim_symbols: hashmap<ast::node_id, str>,\n      consts: hashmap<ast::node_id, ValueRef>,\n      obj_methods: hashmap<ast::node_id, ()>,"}, {"sha": "ca3b6c94698a671ecffaa363b2973c3c8b2a2407", "filename": "src/comp/syntax/ast_util.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0714bb5f7d1805322095841471bc9244df1aaea0/src%2Fcomp%2Fsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0714bb5f7d1805322095841471bc9244df1aaea0/src%2Fcomp%2Fsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast_util.rs?ref=0714bb5f7d1805322095841471bc9244df1aaea0", "patch": "@@ -184,6 +184,18 @@ fn eq_ty(&&a: @ty, &&b: @ty) -> bool { ret std::box::ptr_eq(a, b); }\n \n fn hash_ty(&&t: @ty) -> uint { ret t.span.lo << 16u + t.span.hi; }\n \n+fn hash_def_id(&&id: def_id) -> uint {\n+    id.crate as uint << 16u + (id.node as uint)\n+}\n+\n+fn eq_def_id(&&a: def_id, &&b: def_id) -> bool {\n+    a == b\n+}\n+\n+fn new_def_id_hash<@T>() -> std::map::hashmap<def_id, T> {\n+    std::map::mk_hashmap(hash_def_id, eq_def_id)\n+}\n+\n fn block_from_expr(e: @expr) -> blk {\n     let blk_ = default_block([], option::some::<@expr>(e), e.id);\n     ret {node: blk_, span: e.span};"}]}