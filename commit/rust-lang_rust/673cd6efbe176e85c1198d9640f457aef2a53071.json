{"sha": "673cd6efbe176e85c1198d9640f457aef2a53071", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3M2NkNmVmYmUxNzZlODVjMTE5OGQ5NjQwZjQ1N2FlZjJhNTMwNzE=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-09-17T23:52:31Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-09-18T00:06:45Z"}, "message": "Updates to tests reflecting the diangostic changes in previous commit.\n\nIt is worth pointing out that the reason that so few diagnostics are\neffected is because of the filter I put in where it only goes down the\nnew path if the borrowed place is *not* a prefix of the dropped place.\n\n(Without that filter, a *lot* of the tests would need this change, and\nit would probably be a net loss for the UX, since you'd see it even in\ncases like borrows of generic types where there is no explicit mention\nof `Drop`.)", "tree": {"sha": "27035fa51685f34b3cb9b931f605855c10b7e255", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27035fa51685f34b3cb9b931f605855c10b7e255"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/673cd6efbe176e85c1198d9640f457aef2a53071", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/673cd6efbe176e85c1198d9640f457aef2a53071", "html_url": "https://github.com/rust-lang/rust/commit/673cd6efbe176e85c1198d9640f457aef2a53071", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/673cd6efbe176e85c1198d9640f457aef2a53071/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f0fbddfff60f7f5d35b9008ab3f0ffb8133bb52", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f0fbddfff60f7f5d35b9008ab3f0ffb8133bb52", "html_url": "https://github.com/rust-lang/rust/commit/1f0fbddfff60f7f5d35b9008ab3f0ffb8133bb52"}], "stats": {"total": 105, "additions": 53, "deletions": 52}, "files": [{"sha": "5c70294a1b90c0abc22028a7e7937939c078212b", "filename": "src/test/ui/borrowck/borrowck-fn-in-const-c.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/673cd6efbe176e85c1198d9640f457aef2a53071/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-fn-in-const-c.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/673cd6efbe176e85c1198d9640f457aef2a53071/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-fn-in-const-c.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-fn-in-const-c.nll.stderr?ref=673cd6efbe176e85c1198d9640f457aef2a53071", "patch": "@@ -1,13 +1,13 @@\n-error[E0597]: `local.inner` does not live long enough\n+error[E0713]: borrow may still be in use when destructor runs\n   --> $DIR/borrowck-fn-in-const-c.rs:27:16\n    |\n LL |         return &local.inner; //~ ERROR does not live long enough\n-   |                ^^^^^^^^^^^^ borrowed value does not live long enough\n+   |                ^^^^^^^^^^^^\n LL |     }\n-   |     - `local.inner` dropped here while still borrowed\n+   |     - here, drop of `local` needs exclusive access to `local.inner`, because the type `DropString` implements the `Drop` trait\n    |\n    = note: borrowed value must be valid for the static lifetime...\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0713`."}, {"sha": "70d819f0f467819e26b60039e2280a5aa60302d7", "filename": "src/test/ui/issues/issue-45696-scribble-on-boxed-borrow.migrate.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/673cd6efbe176e85c1198d9640f457aef2a53071/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/673cd6efbe176e85c1198d9640f457aef2a53071/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.migrate.stderr?ref=673cd6efbe176e85c1198d9640f457aef2a53071", "patch": "@@ -1,11 +1,11 @@\n-warning[E0597]: `*s.0` does not live long enough\n+warning[E0713]: borrow may still be in use when destructor runs\n   --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:63:5\n    |\n-LL |     &mut *s.0 //[nll]~ ERROR `*s.0` does not live long enough [E0597]\n-   |     ^^^^^^^^^ borrowed value does not live long enough\n+LL |     &mut *s.0 //[nll]~ ERROR borrow may still be in use when destructor runs [E0713]\n+   |     ^^^^^^^^^\n ...\n LL | }\n-   | - `*s.0` dropped here while still borrowed\n+   | - here, drop of `s` needs exclusive access to `*s.0`, because the type `Scribble<'_>` implements the `Drop` trait\n    |\n note: borrowed value must be valid for the lifetime 'a as defined on the function body at 62:14...\n   --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:62:14\n@@ -16,14 +16,14 @@ LL | fn scribbled<'a>(s: Scribble<'a>) -> &'a mut u32 {\n            It represents potential unsoundness in your code.\n            This warning will become a hard error in the future.\n \n-warning[E0597]: `*s.0` does not live long enough\n+warning[E0713]: borrow may still be in use when destructor runs\n   --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:73:5\n    |\n-LL |     &mut *(*s).0 //[nll]~ ERROR `*s.0` does not live long enough [E0597]\n-   |     ^^^^^^^^^^^^ borrowed value does not live long enough\n+LL |     &mut *(*s).0 //[nll]~ ERROR borrow may still be in use when destructor runs [E0713]\n+   |     ^^^^^^^^^^^^\n ...\n LL | }\n-   | - `*s.0` dropped here while still borrowed\n+   | - here, drop of `*s` needs exclusive access to `*s.0`, because the type `Scribble<'_>` implements the `Drop` trait\n    |\n note: borrowed value must be valid for the lifetime 'a as defined on the function body at 72:20...\n   --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:72:20\n@@ -34,14 +34,14 @@ LL | fn boxed_scribbled<'a>(s: Box<Scribble<'a>>) -> &'a mut u32 {\n            It represents potential unsoundness in your code.\n            This warning will become a hard error in the future.\n \n-warning[E0597]: `*s.0` does not live long enough\n+warning[E0713]: borrow may still be in use when destructor runs\n   --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:83:5\n    |\n-LL |     &mut *(**s).0 //[nll]~ ERROR `*s.0` does not live long enough [E0597]\n-   |     ^^^^^^^^^^^^^ borrowed value does not live long enough\n+LL |     &mut *(**s).0 //[nll]~ ERROR borrow may still be in use when destructor runs [E0713]\n+   |     ^^^^^^^^^^^^^\n ...\n LL | }\n-   | - `*s.0` dropped here while still borrowed\n+   | - here, drop of `**s` needs exclusive access to `*s.0`, because the type `Scribble<'_>` implements the `Drop` trait\n    |\n note: borrowed value must be valid for the lifetime 'a as defined on the function body at 82:26...\n   --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:82:26\n@@ -66,4 +66,4 @@ LL | | }\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0713`."}, {"sha": "72ec5affb182b64fb44684d42fec372865f90cfb", "filename": "src/test/ui/issues/issue-45696-scribble-on-boxed-borrow.nll.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/673cd6efbe176e85c1198d9640f457aef2a53071/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/673cd6efbe176e85c1198d9640f457aef2a53071/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.nll.stderr?ref=673cd6efbe176e85c1198d9640f457aef2a53071", "patch": "@@ -1,41 +1,41 @@\n-error[E0597]: `*s.0` does not live long enough\n+error[E0713]: borrow may still be in use when destructor runs\n   --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:63:5\n    |\n-LL |     &mut *s.0 //[nll]~ ERROR `*s.0` does not live long enough [E0597]\n-   |     ^^^^^^^^^ borrowed value does not live long enough\n+LL |     &mut *s.0 //[nll]~ ERROR borrow may still be in use when destructor runs [E0713]\n+   |     ^^^^^^^^^\n ...\n LL | }\n-   | - `*s.0` dropped here while still borrowed\n+   | - here, drop of `s` needs exclusive access to `*s.0`, because the type `Scribble<'_>` implements the `Drop` trait\n    |\n note: borrowed value must be valid for the lifetime 'a as defined on the function body at 62:14...\n   --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:62:14\n    |\n LL | fn scribbled<'a>(s: Scribble<'a>) -> &'a mut u32 {\n    |              ^^\n \n-error[E0597]: `*s.0` does not live long enough\n+error[E0713]: borrow may still be in use when destructor runs\n   --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:73:5\n    |\n-LL |     &mut *(*s).0 //[nll]~ ERROR `*s.0` does not live long enough [E0597]\n-   |     ^^^^^^^^^^^^ borrowed value does not live long enough\n+LL |     &mut *(*s).0 //[nll]~ ERROR borrow may still be in use when destructor runs [E0713]\n+   |     ^^^^^^^^^^^^\n ...\n LL | }\n-   | - `*s.0` dropped here while still borrowed\n+   | - here, drop of `*s` needs exclusive access to `*s.0`, because the type `Scribble<'_>` implements the `Drop` trait\n    |\n note: borrowed value must be valid for the lifetime 'a as defined on the function body at 72:20...\n   --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:72:20\n    |\n LL | fn boxed_scribbled<'a>(s: Box<Scribble<'a>>) -> &'a mut u32 {\n    |                    ^^\n \n-error[E0597]: `*s.0` does not live long enough\n+error[E0713]: borrow may still be in use when destructor runs\n   --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:83:5\n    |\n-LL |     &mut *(**s).0 //[nll]~ ERROR `*s.0` does not live long enough [E0597]\n-   |     ^^^^^^^^^^^^^ borrowed value does not live long enough\n+LL |     &mut *(**s).0 //[nll]~ ERROR borrow may still be in use when destructor runs [E0713]\n+   |     ^^^^^^^^^^^^^\n ...\n LL | }\n-   | - `*s.0` dropped here while still borrowed\n+   | - here, drop of `**s` needs exclusive access to `*s.0`, because the type `Scribble<'_>` implements the `Drop` trait\n    |\n note: borrowed value must be valid for the lifetime 'a as defined on the function body at 82:26...\n   --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:82:26\n@@ -45,4 +45,4 @@ LL | fn boxed_boxed_scribbled<'a>(s: Box<Box<Scribble<'a>>>) -> &'a mut u32 {\n \n error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0713`."}, {"sha": "2af05172d24db05cddf4048c3b4374378154e2aa", "filename": "src/test/ui/issues/issue-45696-scribble-on-boxed-borrow.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/673cd6efbe176e85c1198d9640f457aef2a53071/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/673cd6efbe176e85c1198d9640f457aef2a53071/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.rs?ref=673cd6efbe176e85c1198d9640f457aef2a53071", "patch": "@@ -60,8 +60,8 @@ fn boxed_boxed_borrowed_scribble<'a>(s: Box<Box<&'a mut Scribble>>) -> &'a mut u\n // this should be an error. (Which is perhaps the essence of why\n // rust-lang/rust#45696 arose in the first place.)\n fn scribbled<'a>(s: Scribble<'a>) -> &'a mut u32 {\n-    &mut *s.0 //[nll]~ ERROR `*s.0` does not live long enough [E0597]\n-    //[migrate]~^ WARNING `*s.0` does not live long enough [E0597]\n+    &mut *s.0 //[nll]~ ERROR borrow may still be in use when destructor runs [E0713]\n+    //[migrate]~^ WARNING borrow may still be in use when destructor runs [E0713]\n     //[migrate]~| WARNING This error has been downgraded to a warning for backwards compatibility\n }\n \n@@ -70,8 +70,8 @@ fn scribbled<'a>(s: Scribble<'a>) -> &'a mut u32 {\n // (But again, AST-borrowck was not smart enogh to know that this\n // should be an error.)\n fn boxed_scribbled<'a>(s: Box<Scribble<'a>>) -> &'a mut u32 {\n-    &mut *(*s).0 //[nll]~ ERROR `*s.0` does not live long enough [E0597]\n-    //[migrate]~^ WARNING `*s.0` does not live long enough [E0597]\n+    &mut *(*s).0 //[nll]~ ERROR borrow may still be in use when destructor runs [E0713]\n+    //[migrate]~^ WARNING borrow may still be in use when destructor runs [E0713]\n     //[migrate]~| WARNING This error has been downgraded to a warning for backwards compatibility\n }\n \n@@ -80,8 +80,8 @@ fn boxed_scribbled<'a>(s: Box<Scribble<'a>>) -> &'a mut u32 {\n // (But again, AST-borrowck was not smart enogh to know that this\n // should be an error.)\n fn boxed_boxed_scribbled<'a>(s: Box<Box<Scribble<'a>>>) -> &'a mut u32 {\n-    &mut *(**s).0 //[nll]~ ERROR `*s.0` does not live long enough [E0597]\n-    //[migrate]~^ WARNING `*s.0` does not live long enough [E0597]\n+    &mut *(**s).0 //[nll]~ ERROR borrow may still be in use when destructor runs [E0713]\n+    //[migrate]~^ WARNING borrow may still be in use when destructor runs [E0713]\n     //[migrate]~| WARNING This error has been downgraded to a warning for backwards compatibility\n }\n "}, {"sha": "3508f3033e62efabff66c37b9042230039e4a25e", "filename": "src/test/ui/nll/issue-31567.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/673cd6efbe176e85c1198d9640f457aef2a53071/src%2Ftest%2Fui%2Fnll%2Fissue-31567.rs", "raw_url": "https://github.com/rust-lang/rust/raw/673cd6efbe176e85c1198d9640f457aef2a53071/src%2Ftest%2Fui%2Fnll%2Fissue-31567.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-31567.rs?ref=673cd6efbe176e85c1198d9640f457aef2a53071", "patch": "@@ -19,7 +19,7 @@ struct VecWrapper<'a>(&'a mut S);\n struct S(Box<u32>);\n \n fn get_dangling<'a>(v: VecWrapper<'a>) -> &'a u32 {\n-    let s_inner: &'a S = &*v.0; //~ ERROR `*v.0` does not live long enough\n+    let s_inner: &'a S = &*v.0; //~ ERROR borrow may still be in use when destructor runs [E0713]\n     &s_inner.0\n }\n "}, {"sha": "63330f303198156a2348ecf79ecebe12d700c537", "filename": "src/test/ui/nll/issue-31567.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/673cd6efbe176e85c1198d9640f457aef2a53071/src%2Ftest%2Fui%2Fnll%2Fissue-31567.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/673cd6efbe176e85c1198d9640f457aef2a53071/src%2Ftest%2Fui%2Fnll%2Fissue-31567.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-31567.stderr?ref=673cd6efbe176e85c1198d9640f457aef2a53071", "patch": "@@ -1,11 +1,11 @@\n-error[E0597]: `*v.0` does not live long enough\n+error[E0713]: borrow may still be in use when destructor runs\n   --> $DIR/issue-31567.rs:22:26\n    |\n-LL |     let s_inner: &'a S = &*v.0; //~ ERROR `*v.0` does not live long enough\n-   |                          ^^^^^ borrowed value does not live long enough\n+LL |     let s_inner: &'a S = &*v.0; //~ ERROR borrow may still be in use when destructor runs [E0713]\n+   |                          ^^^^^\n LL |     &s_inner.0\n LL | }\n-   | - `*v.0` dropped here while still borrowed\n+   | - here, drop of `v` needs exclusive access to `*v.0`, because the type `VecWrapper<'_>` implements the `Drop` trait\n    |\n note: borrowed value must be valid for the lifetime 'a as defined on the function body at 21:17...\n   --> $DIR/issue-31567.rs:21:17\n@@ -15,4 +15,4 @@ LL | fn get_dangling<'a>(v: VecWrapper<'a>) -> &'a u32 {\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0713`."}, {"sha": "c94558f12bbde9c04794ecee9fdc117d846b1391", "filename": "src/test/ui/span/borrowck-ref-into-rvalue.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/673cd6efbe176e85c1198d9640f457aef2a53071/src%2Ftest%2Fui%2Fspan%2Fborrowck-ref-into-rvalue.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/673cd6efbe176e85c1198d9640f457aef2a53071/src%2Ftest%2Fui%2Fspan%2Fborrowck-ref-into-rvalue.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-ref-into-rvalue.nll.stderr?ref=673cd6efbe176e85c1198d9640f457aef2a53071", "patch": "@@ -1,16 +1,16 @@\n-error[E0597]: borrowed value does not live long enough\n-  --> $DIR/borrowck-ref-into-rvalue.rs:13:11\n+error[E0713]: borrow may still be in use when destructor runs\n+  --> $DIR/borrowck-ref-into-rvalue.rs:14:14\n    |\n-LL |     match Some(\"Hello\".to_string()) {\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^ temporary value does not live long enough\n+LL |         Some(ref m) => {\n+   |              ^^^^^\n ...\n LL |     }\n-   |     - temporary value only lives until here\n+   |     - drop of temporary value occurs here\n LL |     println!(\"{}\", *msg);\n    |                    ---- borrow later used here\n    |\n    = note: consider using a `let` binding to create a longer lived value\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0713`."}, {"sha": "1f72b78ebc76d371b3d89581dfcb2b8c68b53b8f", "filename": "src/test/ui/span/issue28498-reject-ex1.nll.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/673cd6efbe176e85c1198d9640f457aef2a53071/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-ex1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/673cd6efbe176e85c1198d9640f457aef2a53071/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-ex1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-ex1.nll.stderr?ref=673cd6efbe176e85c1198d9640f457aef2a53071", "patch": "@@ -1,17 +1,18 @@\n-error[E0597]: `foo.data` does not live long enough\n+error[E0713]: borrow may still be in use when destructor runs\n   --> $DIR/issue28498-reject-ex1.rs:44:29\n    |\n LL |     foo.data[0].1.set(Some(&foo.data[1]));\n-   |                             ^^^^^^^^ borrowed value does not live long enough\n+   |                             ^^^^^^^^\n ...\n LL | }\n    | -\n    | |\n-   | `foo.data` dropped here while still borrowed\n+   | here, drop of `foo` needs exclusive access to `foo.data`, because the type `Foo<Concrete<'_>>` implements the `Drop` trait\n    | borrow later used here, when `foo` is dropped\n    |\n+   = note: consider using a `let` binding to create a longer lived value\n    = note: values in a scope are dropped in the opposite order they are defined\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0713`."}]}