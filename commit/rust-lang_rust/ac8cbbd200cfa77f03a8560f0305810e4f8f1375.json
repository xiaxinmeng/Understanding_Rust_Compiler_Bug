{"sha": "ac8cbbd200cfa77f03a8560f0305810e4f8f1375", "node_id": "C_kwDOAAsO6NoAKGFjOGNiYmQyMDBjZmE3N2YwM2E4NTYwZjAzMDU4MTBlNGY4ZjEzNzU", "commit": {"author": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2022-03-26T21:26:02Z"}, "committer": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2022-04-04T21:06:33Z"}, "message": "Fix #90970, doesn't address #87437", "tree": {"sha": "d6756bd5fee07ccdd73f5026283c5a80343f1700", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6756bd5fee07ccdd73f5026283c5a80343f1700"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac8cbbd200cfa77f03a8560f0305810e4f8f1375", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac8cbbd200cfa77f03a8560f0305810e4f8f1375", "html_url": "https://github.com/rust-lang/rust/commit/ac8cbbd200cfa77f03a8560f0305810e4f8f1375", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac8cbbd200cfa77f03a8560f0305810e4f8f1375/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "url": "https://api.github.com/repos/rust-lang/rust/commits/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15", "html_url": "https://github.com/rust-lang/rust/commit/3aac307ca62f6d6c5b3612d3dfe80b6eeae8ba15"}], "stats": {"total": 121, "additions": 115, "deletions": 6}, "files": [{"sha": "65e2554a6f22321ccb358a44190ce82a5da9c5d5", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 73, "deletions": 6, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/ac8cbbd200cfa77f03a8560f0305810e4f8f1375/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac8cbbd200cfa77f03a8560f0305810e4f8f1375/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=ac8cbbd200cfa77f03a8560f0305810e4f8f1375", "patch": "@@ -2,10 +2,11 @@ pub mod on_unimplemented;\n pub mod suggestions;\n \n use super::{\n-    EvaluationResult, FulfillmentContext, FulfillmentError, FulfillmentErrorCode,\n-    MismatchedProjectionTypes, Obligation, ObligationCause, ObligationCauseCode,\n-    OnUnimplementedDirective, OnUnimplementedNote, OutputTypeParameterMismatch, Overflow,\n-    PredicateObligation, SelectionContext, SelectionError, TraitNotObjectSafe,\n+    DerivedObligationCause, EvaluationResult, FulfillmentContext, FulfillmentError,\n+    FulfillmentErrorCode, ImplDerivedObligationCause, MismatchedProjectionTypes, Obligation,\n+    ObligationCause, ObligationCauseCode, OnUnimplementedDirective, OnUnimplementedNote,\n+    OutputTypeParameterMismatch, Overflow, PredicateObligation, SelectionContext, SelectionError,\n+    TraitNotObjectSafe,\n };\n \n use crate::infer::error_reporting::{TyCategory, TypeAnnotationNeeded as ErrorCode};\n@@ -654,11 +655,77 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         } else if !suggested {\n                             // Can't show anything else useful, try to find similar impls.\n                             let impl_candidates = self.find_similar_impl_candidates(trait_ref);\n-                            self.report_similar_impl_candidates(\n+                            if !self.report_similar_impl_candidates(\n                                 impl_candidates,\n                                 trait_ref,\n                                 &mut err,\n-                            );\n+                            ) {\n+                                // This is *almost* equivalent to\n+                                // `obligation.cause.code().peel_derives()`, but it gives us the\n+                                // trait predicate for that corresponding root obligation. This\n+                                // lets us get a derived obligation from a type parameter, like\n+                                // when calling `string.strip_suffix(p)` where `p` is *not* an\n+                                // implementer of `Pattern<'_>`.\n+                                let mut code = obligation.cause.code();\n+                                let mut trait_pred = trait_predicate;\n+                                let mut peeled = false;\n+                                loop {\n+                                    match &*code {\n+                                        ObligationCauseCode::FunctionArgumentObligation {\n+                                            parent_code,\n+                                            ..\n+                                        } => {\n+                                            code = &parent_code;\n+                                        }\n+                                        ObligationCauseCode::ImplDerivedObligation(\n+                                            box ImplDerivedObligationCause {\n+                                                derived:\n+                                                    DerivedObligationCause {\n+                                                        parent_code,\n+                                                        parent_trait_pred,\n+                                                    },\n+                                                ..\n+                                            },\n+                                        )\n+                                        | ObligationCauseCode::BuiltinDerivedObligation(\n+                                            DerivedObligationCause {\n+                                                parent_code,\n+                                                parent_trait_pred,\n+                                            },\n+                                        )\n+                                        | ObligationCauseCode::DerivedObligation(\n+                                            DerivedObligationCause {\n+                                                parent_code,\n+                                                parent_trait_pred,\n+                                            },\n+                                        ) => {\n+                                            peeled = true;\n+                                            code = &parent_code;\n+                                            trait_pred = *parent_trait_pred;\n+                                        }\n+                                        _ => break,\n+                                    };\n+                                }\n+                                let def_id = trait_pred.def_id();\n+                                // Mention *all* the `impl`s for the *top most* obligation, the\n+                                // user might have meant to use one of them, if any found. We skip\n+                                // auto-traits or fundamental traits that might not be exactly what\n+                                // the user might expect to be presented with. Instead this is\n+                                // useful for less general traits.\n+                                if peeled\n+                                    && !self.tcx.trait_is_auto(def_id)\n+                                    && !self.tcx.lang_items().items().contains(&Some(def_id))\n+                                {\n+                                    let trait_ref = trait_pred.to_poly_trait_ref();\n+                                    let impl_candidates =\n+                                        self.find_similar_impl_candidates(trait_ref);\n+                                    self.report_similar_impl_candidates(\n+                                        impl_candidates,\n+                                        trait_ref,\n+                                        &mut err,\n+                                    );\n+                                }\n+                            }\n                         }\n \n                         // Changing mutability doesn't make a difference to whether we have"}, {"sha": "27f5dce9fb266f619ccd89e30fd593ac4b8e7139", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-85848.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ac8cbbd200cfa77f03a8560f0305810e4f8f1375/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-85848.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ac8cbbd200cfa77f03a8560f0305810e4f8f1375/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-85848.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-85848.stderr?ref=ac8cbbd200cfa77f03a8560f0305810e4f8f1375", "patch": "@@ -6,6 +6,7 @@ LL |     writes_to_specific_path(&cap);\n    |     |\n    |     required by a bound introduced by this call\n    |\n+   = help: the trait `Delegates<U>` is implemented for `T`\n note: required because of the requirements on the impl of `Contains<(), true>` for `&C`\n   --> $DIR/issue-85848.rs:21:12\n    |"}, {"sha": "d458c7be783d59ae1ec5b8a0fdf35daf8090d6ef", "filename": "src/test/ui/impl-trait/cross-return-site-inference.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ac8cbbd200cfa77f03a8560f0305810e4f8f1375/src%2Ftest%2Fui%2Fimpl-trait%2Fcross-return-site-inference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ac8cbbd200cfa77f03a8560f0305810e4f8f1375/src%2Ftest%2Fui%2Fimpl-trait%2Fcross-return-site-inference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fcross-return-site-inference.stderr?ref=ac8cbbd200cfa77f03a8560f0305810e4f8f1375", "patch": "@@ -7,6 +7,7 @@ LL |     Err(\"whoops\")?;\n    |                  ^ the trait `From<&str>` is not implemented for `impl Debug`\n    |\n    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\n+   = help: the trait `FromResidual<Result<Infallible, E>>` is implemented for `Result<T, F>`\n    = note: required because of the requirements on the impl of `FromResidual<Result<Infallible, &str>>` for `Result<(), impl Debug>`\n \n error[E0277]: the trait bound `impl Debug: From<&str>` is not satisfied"}, {"sha": "bb4ae5e82825488270cc66960739c19bbb27890b", "filename": "src/test/ui/impl-trait/nested_impl_trait.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac8cbbd200cfa77f03a8560f0305810e4f8f1375/src%2Ftest%2Fui%2Fimpl-trait%2Fnested_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ac8cbbd200cfa77f03a8560f0305810e4f8f1375/src%2Ftest%2Fui%2Fimpl-trait%2Fnested_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested_impl_trait.stderr?ref=ac8cbbd200cfa77f03a8560f0305810e4f8f1375", "patch": "@@ -52,6 +52,7 @@ error[E0277]: the trait bound `impl Debug: From<impl Into<u32>>` is not satisfie\n LL | fn bad_in_ret_position(x: impl Into<u32>) -> impl Into<impl Debug> { x }\n    |                                              ^^^^^^^^^^^^^^^^^^^^^ the trait `From<impl Into<u32>>` is not implemented for `impl Debug`\n    |\n+   = help: the trait `Into<U>` is implemented for `T`\n    = note: required because of the requirements on the impl of `Into<impl Debug>` for `impl Into<u32>`\n \n error[E0277]: the trait bound `impl Debug: From<impl Into<u32>>` is not satisfied\n@@ -60,6 +61,7 @@ error[E0277]: the trait bound `impl Debug: From<impl Into<u32>>` is not satisfie\n LL |     fn bad(x: impl Into<u32>) -> impl Into<impl Debug> { x }\n    |                                  ^^^^^^^^^^^^^^^^^^^^^ the trait `From<impl Into<u32>>` is not implemented for `impl Debug`\n    |\n+   = help: the trait `Into<U>` is implemented for `T`\n    = note: required because of the requirements on the impl of `Into<impl Debug>` for `impl Into<u32>`\n \n error: aborting due to 8 previous errors"}, {"sha": "ed5addcbec5170497bc1577e716ad9138c0c5e75", "filename": "src/test/ui/issues/issue-32709.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ac8cbbd200cfa77f03a8560f0305810e4f8f1375/src%2Ftest%2Fui%2Fissues%2Fissue-32709.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ac8cbbd200cfa77f03a8560f0305810e4f8f1375/src%2Ftest%2Fui%2Fissues%2Fissue-32709.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32709.stderr?ref=ac8cbbd200cfa77f03a8560f0305810e4f8f1375", "patch": "@@ -7,6 +7,7 @@ LL |     Err(5)?;\n    |           ^ the trait `From<{integer}>` is not implemented for `()`\n    |\n    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\n+   = help: the trait `FromResidual<Result<Infallible, E>>` is implemented for `Result<T, F>`\n    = note: required because of the requirements on the impl of `FromResidual<Result<Infallible, {integer}>>` for `Result<i32, ()>`\n \n error: aborting due to previous error"}, {"sha": "64bbc841b330f7dde52328808923eda531321fb9", "filename": "src/test/ui/kindck/kindck-impl-type-params.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac8cbbd200cfa77f03a8560f0305810e4f8f1375/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ac8cbbd200cfa77f03a8560f0305810e4f8f1375/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.stderr?ref=ac8cbbd200cfa77f03a8560f0305810e4f8f1375", "patch": "@@ -80,6 +80,7 @@ error[E0277]: the trait bound `String: Copy` is not satisfied\n LL |     let a = t as Box<dyn Gettable<String>>;\n    |             ^ the trait `Copy` is not implemented for `String`\n    |\n+   = help: the trait `Gettable<T>` is implemented for `S<T>`\n note: required because of the requirements on the impl of `Gettable<String>` for `S<String>`\n   --> $DIR/kindck-impl-type-params.rs:14:32\n    |\n@@ -93,6 +94,7 @@ error[E0277]: the trait bound `Foo: Copy` is not satisfied\n LL |     let a: Box<dyn Gettable<Foo>> = t;\n    |                                     ^ the trait `Copy` is not implemented for `Foo`\n    |\n+   = help: the trait `Gettable<T>` is implemented for `S<T>`\n note: required because of the requirements on the impl of `Gettable<Foo>` for `S<Foo>`\n   --> $DIR/kindck-impl-type-params.rs:14:32\n    |"}, {"sha": "2720f94a3c1914d99271e8f79b382908f87658ef", "filename": "src/test/ui/traits/bound/assoc-fn-bound-root-obligation.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ac8cbbd200cfa77f03a8560f0305810e4f8f1375/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fassoc-fn-bound-root-obligation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac8cbbd200cfa77f03a8560f0305810e4f8f1375/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fassoc-fn-bound-root-obligation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fassoc-fn-bound-root-obligation.rs?ref=ac8cbbd200cfa77f03a8560f0305810e4f8f1375", "patch": "@@ -0,0 +1,12 @@\n+fn strip_lf(s: &str) -> &str {\n+    s.strip_suffix(b'\\n').unwrap_or(s)\n+    //~^ ERROR expected a `FnMut<(char,)>` closure, found `u8`\n+    //~| NOTE expected an `FnMut<(char,)>` closure, found `u8`\n+    //~| NOTE required by a bound introduced by this call\n+    //~| HELP the trait `FnMut<(char,)>` is not implemented for `u8`\n+    //~| HELP the following other types implement trait `Pattern<'_>`:\n+    //~| NOTE required because of the requirements on the impl of `Pattern<'_>` for `u8`\n+\n+}\n+\n+fn main() {}"}, {"sha": "37cba4189d72554136efd705ec4be2cb5b9351a9", "filename": "src/test/ui/traits/bound/assoc-fn-bound-root-obligation.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ac8cbbd200cfa77f03a8560f0305810e4f8f1375/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fassoc-fn-bound-root-obligation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ac8cbbd200cfa77f03a8560f0305810e4f8f1375/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fassoc-fn-bound-root-obligation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fassoc-fn-bound-root-obligation.stderr?ref=ac8cbbd200cfa77f03a8560f0305810e4f8f1375", "patch": "@@ -0,0 +1,23 @@\n+error[E0277]: expected a `FnMut<(char,)>` closure, found `u8`\n+  --> $DIR/assoc-fn-bound-root-obligation.rs:2:20\n+   |\n+LL |     s.strip_suffix(b'\\n').unwrap_or(s)\n+   |       ------------ ^^^^^ expected an `FnMut<(char,)>` closure, found `u8`\n+   |       |\n+   |       required by a bound introduced by this call\n+   |\n+   = help: the trait `FnMut<(char,)>` is not implemented for `u8`\n+   = help: the following other types implement trait `Pattern<'_>`:\n+             &'b String\n+             &'b [char; N]\n+             &'b [char]\n+             &'b str\n+             &'c &'b str\n+             [char; N]\n+             char\n+             pattern::MultiCharEqPattern<C>\n+   = note: required because of the requirements on the impl of `Pattern<'_>` for `u8`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}