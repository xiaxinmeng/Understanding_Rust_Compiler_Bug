{"sha": "8296699faed63f713735fbfac53c0325ce45954e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyOTY2OTlmYWVkNjNmNzEzNzM1ZmJmYWM1M2MwMzI1Y2U0NTk1NGU=", "commit": {"author": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2018-03-16T13:35:26Z"}, "committer": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2018-07-27T14:26:36Z"}, "message": "Remove unnecessary `.collect()`", "tree": {"sha": "c75befe75ce530a55b7bc1e15719972c9d796cfd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c75befe75ce530a55b7bc1e15719972c9d796cfd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8296699faed63f713735fbfac53c0325ce45954e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8296699faed63f713735fbfac53c0325ce45954e", "html_url": "https://github.com/rust-lang/rust/commit/8296699faed63f713735fbfac53c0325ce45954e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8296699faed63f713735fbfac53c0325ce45954e/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3525368a562435622c3c8f293354805e6961b0bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/3525368a562435622c3c8f293354805e6961b0bf", "html_url": "https://github.com/rust-lang/rust/commit/3525368a562435622c3c8f293354805e6961b0bf"}], "stats": {"total": 23, "additions": 9, "deletions": 14}, "files": [{"sha": "c46492895dd21bd607b58ab224dedcff11adcc5b", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8296699faed63f713735fbfac53c0325ce45954e/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8296699faed63f713735fbfac53c0325ce45954e/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=8296699faed63f713735fbfac53c0325ce45954e", "patch": "@@ -805,7 +805,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                     //     Foo<_, Qux>\n                     //         ^ elided type as this type argument was the same in both sides\n                     let type_arguments = sub1.types().zip(sub2.types());\n-                    let regions_len = sub1.regions().collect::<Vec<_>>().len();\n+                    let regions_len = sub1.regions().count();\n                     for (i, (ta1, ta2)) in type_arguments.take(len).enumerate() {\n                         let i = i + regions_len;\n                         if ta1 == ta2 {"}, {"sha": "e0ed89a64165919adb674578acde028054acc666", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8296699faed63f713735fbfac53c0325ce45954e/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8296699faed63f713735fbfac53c0325ce45954e/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=8296699faed63f713735fbfac53c0325ce45954e", "patch": "@@ -528,9 +528,7 @@ impl EmitterWriter {\n \n         // If there are no annotations or the only annotations on this line are\n         // MultilineLine, then there's only code being shown, stop processing.\n-        if line.annotations.is_empty() || line.annotations.iter()\n-            .filter(|a| !a.is_line()).collect::<Vec<_>>().len() == 0\n-        {\n+        if line.annotations.iter().all(|a| a.is_line()) {\n             return vec![];\n         }\n "}, {"sha": "400e5829d33378e4a6c48d5461fa37cc2c085aca", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8296699faed63f713735fbfac53c0325ce45954e/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8296699faed63f713735fbfac53c0325ce45954e/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=8296699faed63f713735fbfac53c0325ce45954e", "patch": "@@ -610,9 +610,8 @@ impl Handler {\n         if can_show_explain && are_there_diagnostics {\n             let mut error_codes =\n                 self.emitted_diagnostic_codes.borrow()\n-                                             .clone()\n-                                             .into_iter()\n-                                             .filter_map(|x| match x {\n+                                             .iter()\n+                                             .filter_map(|x| match *x {\n                                                  DiagnosticId::Error(ref s) => Some(s.clone()),\n                                                  _ => None,\n                                              })"}, {"sha": "09871c0e84049d801888014eafc012a400faa67f", "filename": "src/librustc_lint/bad_style.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8296699faed63f713735fbfac53c0325ce45954e/src%2Flibrustc_lint%2Fbad_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8296699faed63f713735fbfac53c0325ce45954e/src%2Flibrustc_lint%2Fbad_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbad_style.rs?ref=8296699faed63f713735fbfac53c0325ce45954e", "patch": "@@ -83,20 +83,18 @@ impl NonCamelCaseTypes {\n                     } else {\n                         c.to_lowercase().collect()\n                     })\n-                    .collect::<Vec<_>>()\n-                    .concat()\n+                    .collect::<String>()\n                 })\n                 .filter(|x| !x.is_empty())\n-                .collect::<Vec<_>>()\n-                .iter().fold((String::new(), None), |(acc, prev): (String, Option<&String>), next| {\n+                .fold((String::new(), None), |(acc, prev): (String, Option<String>), next| {\n                     // separate two components with an underscore if their boundary cannot\n                     // be distinguished using a uppercase/lowercase case distinction\n                     let join = if let Some(prev) = prev {\n                                     let l = prev.chars().last().unwrap();\n                                     let f = next.chars().next().unwrap();\n                                     !char_has_case(l) && !char_has_case(f)\n                                 } else { false };\n-                    (acc + if join { \"_\" } else { \"\" } + next, Some(next))\n+                    (acc + if join { \"_\" } else { \"\" } + &next, Some(next))\n                 }).0\n         }\n "}, {"sha": "d8b9c58950f51840dfec89bc1c27e1b8ce42c965", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8296699faed63f713735fbfac53c0325ce45954e/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8296699faed63f713735fbfac53c0325ce45954e/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=8296699faed63f713735fbfac53c0325ce45954e", "patch": "@@ -271,7 +271,7 @@ fn resolve_struct_error<'sess, 'a>(resolver: &'sess Resolver,\n             err\n         }\n         ResolutionError::VariableNotBoundInPattern(binding_error) => {\n-            let target_sp = binding_error.target.iter().map(|x| *x).collect::<Vec<_>>();\n+            let target_sp = binding_error.target.iter().cloned().collect::<Vec<_>>();\n             let msp = MultiSpan::from_spans(target_sp.clone());\n             let msg = format!(\"variable `{}` is not bound in all patterns\", binding_error.name);\n             let mut err = resolver.session.struct_span_err_with_code(\n@@ -282,7 +282,7 @@ fn resolve_struct_error<'sess, 'a>(resolver: &'sess Resolver,\n             for sp in target_sp {\n                 err.span_label(sp, format!(\"pattern doesn't bind `{}`\", binding_error.name));\n             }\n-            let origin_sp = binding_error.origin.iter().map(|x| *x).collect::<Vec<_>>();\n+            let origin_sp = binding_error.origin.iter().cloned();\n             for sp in origin_sp {\n                 err.span_label(sp, \"variable not in all patterns\");\n             }"}]}