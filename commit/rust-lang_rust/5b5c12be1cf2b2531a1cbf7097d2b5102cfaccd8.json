{"sha": "5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8", "node_id": "C_kwDOAAsO6NoAKDViNWMxMmJlMWNmMmIyNTMxYTFjYmY3MDk3ZDJiNTEwMmNmYWNjZDg", "commit": {"author": {"name": "John Kugelman", "email": "john@kugelman.name", "date": "2021-10-10T06:44:26Z"}, "committer": {"name": "John Kugelman", "email": "john@kugelman.name", "date": "2021-10-10T06:44:26Z"}, "message": "Add #[must_use] to core and std constructors", "tree": {"sha": "d330f50e13e10c83c8ead1deca530a8e48496107", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d330f50e13e10c83c8ead1deca530a8e48496107"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8", "html_url": "https://github.com/rust-lang/rust/commit/5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8/comments", "author": {"login": "jkugelman", "id": 4551859, "node_id": "MDQ6VXNlcjQ1NTE4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/4551859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jkugelman", "html_url": "https://github.com/jkugelman", "followers_url": "https://api.github.com/users/jkugelman/followers", "following_url": "https://api.github.com/users/jkugelman/following{/other_user}", "gists_url": "https://api.github.com/users/jkugelman/gists{/gist_id}", "starred_url": "https://api.github.com/users/jkugelman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jkugelman/subscriptions", "organizations_url": "https://api.github.com/users/jkugelman/orgs", "repos_url": "https://api.github.com/users/jkugelman/repos", "events_url": "https://api.github.com/users/jkugelman/events{/privacy}", "received_events_url": "https://api.github.com/users/jkugelman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jkugelman", "id": 4551859, "node_id": "MDQ6VXNlcjQ1NTE4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/4551859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jkugelman", "html_url": "https://github.com/jkugelman", "followers_url": "https://api.github.com/users/jkugelman/followers", "following_url": "https://api.github.com/users/jkugelman/following{/other_user}", "gists_url": "https://api.github.com/users/jkugelman/gists{/gist_id}", "starred_url": "https://api.github.com/users/jkugelman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jkugelman/subscriptions", "organizations_url": "https://api.github.com/users/jkugelman/orgs", "repos_url": "https://api.github.com/users/jkugelman/repos", "events_url": "https://api.github.com/users/jkugelman/events{/privacy}", "received_events_url": "https://api.github.com/users/jkugelman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6928fafe06e4ab29317f75194e1bf67c119dccdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/6928fafe06e4ab29317f75194e1bf67c119dccdc", "html_url": "https://github.com/rust-lang/rust/commit/6928fafe06e4ab29317f75194e1bf67c119dccdc"}], "stats": {"total": 36, "additions": 36, "deletions": 0}, "files": [{"sha": "c98aa38e3df290c6a2671a4553d813a1c63e7fe4", "filename": "library/core/src/alloc/layout.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs?ref=5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8", "patch": "@@ -119,6 +119,7 @@ impl Layout {\n     /// Constructs a `Layout` suitable for holding a value of type `T`.\n     #[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n     #[rustc_const_stable(feature = \"alloc_layout_const_new\", since = \"1.42.0\")]\n+    #[must_use]\n     #[inline]\n     pub const fn new<T>() -> Self {\n         let (size, align) = size_align::<T>();"}, {"sha": "b9443e30074b00fc9ef5cc288120e6f5abba425f", "filename": "library/core/src/hash/sip.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8/library%2Fcore%2Fsrc%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8/library%2Fcore%2Fsrc%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhash%2Fsip.rs?ref=5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8", "patch": "@@ -157,6 +157,7 @@ impl SipHasher {\n         since = \"1.13.0\",\n         reason = \"use `std::collections::hash_map::DefaultHasher` instead\"\n     )]\n+    #[must_use]\n     pub fn new() -> SipHasher {\n         SipHasher::new_with_keys(0, 0)\n     }\n@@ -168,6 +169,7 @@ impl SipHasher {\n         since = \"1.13.0\",\n         reason = \"use `std::collections::hash_map::DefaultHasher` instead\"\n     )]\n+    #[must_use]\n     pub fn new_with_keys(key0: u64, key1: u64) -> SipHasher {\n         SipHasher(SipHasher24 { hasher: Hasher::new_with_keys(key0, key1) })\n     }"}, {"sha": "d109141216aefb90a498acf146e4e9b25fe04cf6", "filename": "library/core/src/lazy.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8/library%2Fcore%2Fsrc%2Flazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8/library%2Fcore%2Fsrc%2Flazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flazy.rs?ref=5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8", "patch": "@@ -83,6 +83,7 @@ impl<T> From<T> for OnceCell<T> {\n impl<T> OnceCell<T> {\n     /// Creates a new empty cell.\n     #[unstable(feature = \"once_cell\", issue = \"74465\")]\n+    #[must_use]\n     pub const fn new() -> OnceCell<T> {\n         OnceCell { inner: UnsafeCell::new(None) }\n     }"}, {"sha": "b9772eaa67813d152bf9d5a930b2c345098102ae", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8", "patch": "@@ -312,6 +312,7 @@ impl<T> MaybeUninit<T> {\n     /// ```\n     #[stable(feature = \"maybe_uninit\", since = \"1.36.0\")]\n     #[rustc_const_stable(feature = \"const_maybe_uninit\", since = \"1.36.0\")]\n+    #[must_use]\n     #[inline(always)]\n     #[rustc_diagnostic_item = \"maybe_uninit_uninit\"]\n     pub const fn uninit() -> MaybeUninit<T> {\n@@ -349,6 +350,7 @@ impl<T> MaybeUninit<T> {\n     /// ```\n     #[unstable(feature = \"maybe_uninit_uninit_array\", issue = \"none\")]\n     #[rustc_const_unstable(feature = \"maybe_uninit_uninit_array\", issue = \"none\")]\n+    #[must_use]\n     #[inline(always)]\n     pub const fn uninit_array<const LEN: usize>() -> [Self; LEN] {\n         // SAFETY: An uninitialized `[MaybeUninit<_>; LEN]` is valid.\n@@ -391,6 +393,7 @@ impl<T> MaybeUninit<T> {\n     /// // This is undefined behavior. \u26a0\ufe0f\n     /// ```\n     #[stable(feature = \"maybe_uninit\", since = \"1.36.0\")]\n+    #[must_use]\n     #[inline]\n     #[rustc_diagnostic_item = \"maybe_uninit_zeroed\"]\n     pub fn zeroed() -> MaybeUninit<T> {"}, {"sha": "5b50b13b23e376ad8892aed4eef47acd5c610fc1", "filename": "library/core/src/num/nonzero.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs?ref=5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8", "patch": "@@ -50,6 +50,7 @@ macro_rules! nonzero_integers {\n                 /// The value must not be zero.\n                 #[$stability]\n                 #[$const_new_unchecked_stability]\n+                #[must_use]\n                 #[inline]\n                 pub const unsafe fn new_unchecked(n: $Int) -> Self {\n                     // SAFETY: this is guaranteed to be safe by the caller.\n@@ -59,6 +60,7 @@ macro_rules! nonzero_integers {\n                 /// Creates a non-zero if the given value is not zero.\n                 #[$stability]\n                 #[rustc_const_stable(feature = \"const_nonzero_int_methods\", since = \"1.47.0\")]\n+                #[must_use]\n                 #[inline]\n                 pub const fn new(n: $Int) -> Option<Self> {\n                     if n != 0 {"}, {"sha": "b07752116e514901435239589cf24c7ffd62ec6b", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8", "patch": "@@ -290,6 +290,7 @@ impl AtomicBool {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_stable(feature = \"const_atomic_new\", since = \"1.24.0\")]\n+    #[must_use]\n     pub const fn new(v: bool) -> AtomicBool {\n         AtomicBool { v: UnsafeCell::new(v as u8) }\n     }\n@@ -1392,6 +1393,7 @@ macro_rules! atomic_int {\n             #[inline]\n             #[$stable]\n             #[$const_stable]\n+            #[must_use]\n             pub const fn new(v: $int_type) -> Self {\n                 Self {v: UnsafeCell::new(v)}\n             }"}, {"sha": "2b540716154a188ee91f4235c0627abb6c389624", "filename": "library/core/src/task/wake.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs?ref=5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8", "patch": "@@ -39,6 +39,7 @@ impl RawWaker {\n     #[rustc_promotable]\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n     #[rustc_const_stable(feature = \"futures_api\", since = \"1.36.0\")]\n+    #[must_use]\n     pub const fn new(data: *const (), vtable: &'static RawWakerVTable) -> RawWaker {\n         RawWaker { data, vtable }\n     }"}, {"sha": "d2757ef71213f8275fb033057b09bce9fcf3123e", "filename": "library/core/src/time.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8/library%2Fcore%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8/library%2Fcore%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftime.rs?ref=5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8", "patch": "@@ -181,6 +181,7 @@ impl Duration {\n     #[stable(feature = \"duration\", since = \"1.3.0\")]\n     #[inline]\n     #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n+    #[must_use]\n     pub const fn new(secs: u64, nanos: u32) -> Duration {\n         let secs = match secs.checked_add((nanos / NANOS_PER_SEC) as u64) {\n             Some(secs) => secs,"}, {"sha": "7fa2e3ed3f6ac7b357679c389263a373005b0195", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8", "patch": "@@ -223,6 +223,7 @@ impl<K, V> HashMap<K, V, RandomState> {\n     /// let mut map: HashMap<&str, i32> = HashMap::new();\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new() -> HashMap<K, V, RandomState> {\n         Default::default()\n@@ -240,6 +241,7 @@ impl<K, V> HashMap<K, V, RandomState> {\n     /// let mut map: HashMap<&str, i32> = HashMap::with_capacity(10);\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn with_capacity(capacity: usize) -> HashMap<K, V, RandomState> {\n         HashMap::with_capacity_and_hasher(capacity, Default::default())\n@@ -2891,6 +2893,7 @@ impl RandomState {\n     #[inline]\n     #[allow(deprecated)]\n     // rand\n+    #[must_use]\n     #[stable(feature = \"hashmap_build_hasher\", since = \"1.7.0\")]\n     pub fn new() -> RandomState {\n         // Historically this function did not cache keys from the OS and instead\n@@ -2943,6 +2946,7 @@ impl DefaultHasher {\n     /// instances created through `new` or `default`.\n     #[stable(feature = \"hashmap_default_hasher\", since = \"1.13.0\")]\n     #[allow(deprecated)]\n+    #[must_use]\n     pub fn new() -> DefaultHasher {\n         DefaultHasher(SipHasher13::new_with_keys(0, 0))\n     }"}, {"sha": "5804701892e6e447641ea8144b1a815c42799648", "filename": "library/std/src/collections/hash/set.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs?ref=5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8", "patch": "@@ -126,6 +126,7 @@ impl<T> HashSet<T, RandomState> {\n     /// let set: HashSet<i32> = HashSet::new();\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new() -> HashSet<T, RandomState> {\n         Default::default()\n@@ -144,6 +145,7 @@ impl<T> HashSet<T, RandomState> {\n     /// assert!(set.capacity() >= 10);\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn with_capacity(capacity: usize) -> HashSet<T, RandomState> {\n         HashSet { base: base::HashSet::with_capacity_and_hasher(capacity, Default::default()) }"}, {"sha": "e4ad6cba88046de23cadcb6daedd7b8d08b6878f", "filename": "library/std/src/ffi/os_str.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs?ref=5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8", "patch": "@@ -119,6 +119,7 @@ impl OsString {\n     /// let os_string = OsString::new();\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn new() -> OsString {\n         OsString { inner: Buf::from_string(String::new()) }\n@@ -199,6 +200,7 @@ impl OsString {\n     /// assert_eq!(capacity, os_string.capacity());\n     /// ```\n     #[stable(feature = \"osstring_simple_functions\", since = \"1.9.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn with_capacity(capacity: usize) -> OsString {\n         OsString { inner: Buf::with_capacity(capacity) }"}, {"sha": "85d350729239cf4af4e56702233a0b98dcd2ab13", "filename": "library/std/src/fs.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8/library%2Fstd%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8/library%2Fstd%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs.rs?ref=5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8", "patch": "@@ -744,6 +744,7 @@ impl OpenOptions {\n     /// let file = options.read(true).open(\"foo.txt\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub fn new() -> Self {\n         OpenOptions(fs_imp::OpenOptions::new())\n     }\n@@ -2184,6 +2185,7 @@ impl DirBuilder {\n     /// let builder = DirBuilder::new();\n     /// ```\n     #[stable(feature = \"dir_builder\", since = \"1.6.0\")]\n+    #[must_use]\n     pub fn new() -> DirBuilder {\n         DirBuilder { inner: fs_imp::DirBuilder::new(), recursive: false }\n     }"}, {"sha": "abe29ba0f7caa379c339c2fde186777cfe3d17f2", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8", "patch": "@@ -1206,6 +1206,7 @@ impl<'a> IoSlice<'a> {\n     ///\n     /// Panics on Windows if the slice is larger than 4GB.\n     #[stable(feature = \"iovec\", since = \"1.36.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn new(buf: &'a [u8]) -> IoSlice<'a> {\n         IoSlice(sys::io::IoSlice::new(buf))"}, {"sha": "d7450962359df78e42e636aeab324071a85c16b3", "filename": "library/std/src/lazy.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8/library%2Fstd%2Fsrc%2Flazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8/library%2Fstd%2Fsrc%2Flazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flazy.rs?ref=5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8", "patch": "@@ -171,6 +171,7 @@ impl<T: Eq> Eq for SyncOnceCell<T> {}\n impl<T> SyncOnceCell<T> {\n     /// Creates a new empty cell.\n     #[unstable(feature = \"once_cell\", issue = \"74465\")]\n+    #[must_use]\n     pub const fn new() -> SyncOnceCell<T> {\n         SyncOnceCell {\n             once: Once::new(),"}, {"sha": "cd2007cc2cb42a96a0f7c7e94340f7f31c0b288f", "filename": "library/std/src/net/addr.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8/library%2Fstd%2Fsrc%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8/library%2Fstd%2Fsrc%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Faddr.rs?ref=5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8", "patch": "@@ -131,6 +131,7 @@ impl SocketAddr {\n     /// assert_eq!(socket.port(), 8080);\n     /// ```\n     #[stable(feature = \"ip_addr\", since = \"1.7.0\")]\n+    #[must_use]\n     pub fn new(ip: IpAddr, port: u16) -> SocketAddr {\n         match ip {\n             IpAddr::V4(a) => SocketAddr::V4(SocketAddrV4::new(a, port)),\n@@ -272,6 +273,7 @@ impl SocketAddrV4 {\n     /// let socket = SocketAddrV4::new(Ipv4Addr::new(127, 0, 0, 1), 8080);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub fn new(ip: Ipv4Addr, port: u16) -> SocketAddrV4 {\n         SocketAddrV4 {\n             inner: c::sockaddr_in {\n@@ -368,6 +370,7 @@ impl SocketAddrV6 {\n     /// let socket = SocketAddrV6::new(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1), 8080, 0, 0);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub fn new(ip: Ipv6Addr, port: u16, flowinfo: u32, scope_id: u32) -> SocketAddrV6 {\n         SocketAddrV6 {\n             inner: c::sockaddr_in6 {"}, {"sha": "99922eef61f105ae7db43bdda84f6522b5101d14", "filename": "library/std/src/net/ip.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip.rs?ref=5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8", "patch": "@@ -442,6 +442,7 @@ impl Ipv4Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.32.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     #[inline]\n     pub const fn new(a: u8, b: u8, c: u8, d: u8) -> Ipv4Addr {\n         // `s_addr` is stored as BE on all machine and the array is in BE order.\n@@ -1192,6 +1193,7 @@ impl Ipv6Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv6\", since = \"1.32.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     #[inline]\n     pub const fn new(a: u16, b: u16, c: u16, d: u16, e: u16, f: u16, g: u16, h: u16) -> Ipv6Addr {\n         let addr16 = ["}, {"sha": "57bb61903c147964c6d74b08ed6ba788e1c075cb", "filename": "library/std/src/os/unix/net/ancillary.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs?ref=5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8", "patch": "@@ -189,6 +189,7 @@ impl SocketCred {\n     ///\n     /// PID, UID and GID is set to 0.\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n+    #[must_use]\n     pub fn new() -> SocketCred {\n         SocketCred(libc::ucred { pid: 0, uid: 0, gid: 0 })\n     }"}, {"sha": "c5476c3d5267bc28633080e98f5dc1061176ad7c", "filename": "library/std/src/path.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8", "patch": "@@ -1145,6 +1145,7 @@ impl PathBuf {\n     /// let path = PathBuf::new();\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn new() -> PathBuf {\n         PathBuf { inner: OsString::new() }\n@@ -1169,6 +1170,7 @@ impl PathBuf {\n     ///\n     /// [`with_capacity`]: OsString::with_capacity\n     #[stable(feature = \"path_buf_capacity\", since = \"1.44.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn with_capacity(capacity: usize) -> PathBuf {\n         PathBuf { inner: OsString::with_capacity(capacity) }"}, {"sha": "0e28a2d166f137e902cc3ac7788909e6f32948bd", "filename": "library/std/src/sync/barrier.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8/library%2Fstd%2Fsrc%2Fsync%2Fbarrier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8/library%2Fstd%2Fsrc%2Fsync%2Fbarrier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fbarrier.rs?ref=5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8", "patch": "@@ -80,6 +80,7 @@ impl Barrier {\n     /// let barrier = Barrier::new(10);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub fn new(n: usize) -> Barrier {\n         Barrier {\n             lock: Mutex::new(BarrierState { count: 0, generation_id: 0 }),"}, {"sha": "d8aca9651b8678726b24244920c2dc574badca15", "filename": "library/std/src/sync/condvar.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8/library%2Fstd%2Fsrc%2Fsync%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8/library%2Fstd%2Fsrc%2Fsync%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fcondvar.rs?ref=5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8", "patch": "@@ -121,6 +121,7 @@ impl Condvar {\n     /// let condvar = Condvar::new();\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub fn new() -> Condvar {\n         Condvar { inner: sys::Condvar::new() }\n     }"}, {"sha": "1710c0053934a76bc26e8b8fe929c5fb94db353e", "filename": "library/std/src/sync/once.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8/library%2Fstd%2Fsrc%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8/library%2Fstd%2Fsrc%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fonce.rs?ref=5b5c12be1cf2b2531a1cbf7097d2b5102cfaccd8", "patch": "@@ -186,6 +186,7 @@ impl Once {\n     #[inline]\n     #[stable(feature = \"once_new\", since = \"1.2.0\")]\n     #[rustc_const_stable(feature = \"const_once_new\", since = \"1.32.0\")]\n+    #[must_use]\n     pub const fn new() -> Once {\n         Once { state_and_queue: AtomicUsize::new(INCOMPLETE), _marker: marker::PhantomData }\n     }"}]}