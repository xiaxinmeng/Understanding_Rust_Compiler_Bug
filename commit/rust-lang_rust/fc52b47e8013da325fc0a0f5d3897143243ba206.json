{"sha": "fc52b47e8013da325fc0a0f5d3897143243ba206", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjNTJiNDdlODAxM2RhMzI1ZmMwYTBmNWQzODk3MTQzMjQzYmEyMDY=", "commit": {"author": {"name": "Jamie Cunliffe", "email": "Jamie.Cunliffe@arm.com", "date": "2020-06-30T08:57:59Z"}, "committer": {"name": "Jamie Cunliffe", "email": "Jamie.Cunliffe@arm.com", "date": "2020-06-30T08:58:00Z"}, "message": "va_args implementation for AAPCS.\n\nImplement the va args in codegen for AAPCS, this will be used as the\ndefault va_args implementation for AArch64 rather than the va_args\nllvm-ir as it currently is.\n\nCopyright (c) 2020, Arm Limited.", "tree": {"sha": "60c14618b68410119cdbfd10de375eccd87dd2c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60c14618b68410119cdbfd10de375eccd87dd2c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc52b47e8013da325fc0a0f5d3897143243ba206", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc52b47e8013da325fc0a0f5d3897143243ba206", "html_url": "https://github.com/rust-lang/rust/commit/fc52b47e8013da325fc0a0f5d3897143243ba206", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc52b47e8013da325fc0a0f5d3897143243ba206/comments", "author": {"login": "JamieCunliffe", "id": 29557119, "node_id": "MDQ6VXNlcjI5NTU3MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/29557119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JamieCunliffe", "html_url": "https://github.com/JamieCunliffe", "followers_url": "https://api.github.com/users/JamieCunliffe/followers", "following_url": "https://api.github.com/users/JamieCunliffe/following{/other_user}", "gists_url": "https://api.github.com/users/JamieCunliffe/gists{/gist_id}", "starred_url": "https://api.github.com/users/JamieCunliffe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JamieCunliffe/subscriptions", "organizations_url": "https://api.github.com/users/JamieCunliffe/orgs", "repos_url": "https://api.github.com/users/JamieCunliffe/repos", "events_url": "https://api.github.com/users/JamieCunliffe/events{/privacy}", "received_events_url": "https://api.github.com/users/JamieCunliffe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JamieCunliffe", "id": 29557119, "node_id": "MDQ6VXNlcjI5NTU3MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/29557119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JamieCunliffe", "html_url": "https://github.com/JamieCunliffe", "followers_url": "https://api.github.com/users/JamieCunliffe/followers", "following_url": "https://api.github.com/users/JamieCunliffe/following{/other_user}", "gists_url": "https://api.github.com/users/JamieCunliffe/gists{/gist_id}", "starred_url": "https://api.github.com/users/JamieCunliffe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JamieCunliffe/subscriptions", "organizations_url": "https://api.github.com/users/JamieCunliffe/orgs", "repos_url": "https://api.github.com/users/JamieCunliffe/repos", "events_url": "https://api.github.com/users/JamieCunliffe/events{/privacy}", "received_events_url": "https://api.github.com/users/JamieCunliffe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1528c432e45339d9b5602a19ac3571e2900d37b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1528c432e45339d9b5602a19ac3571e2900d37b", "html_url": "https://github.com/rust-lang/rust/commit/a1528c432e45339d9b5602a19ac3571e2900d37b"}], "stats": {"total": 154, "additions": 151, "deletions": 3}, "files": [{"sha": "01c2ab32d6ada866e51eb9370cf6b4b256eb6015", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fc52b47e8013da325fc0a0f5d3897143243ba206/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc52b47e8013da325fc0a0f5d3897143243ba206/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=fc52b47e8013da325fc0a0f5d3897143243ba206", "patch": "@@ -1279,7 +1279,12 @@ impl Builder<'a, 'll, 'tcx> {\n         self.call(lifetime_intrinsic, &[self.cx.const_u64(size), ptr], None);\n     }\n \n-    fn phi(&mut self, ty: &'ll Type, vals: &[&'ll Value], bbs: &[&'ll BasicBlock]) -> &'ll Value {\n+    pub(crate) fn phi(\n+        &mut self,\n+        ty: &'ll Type,\n+        vals: &[&'ll Value],\n+        bbs: &[&'ll BasicBlock],\n+    ) -> &'ll Value {\n         assert_eq!(vals.len(), bbs.len());\n         let phi = unsafe { llvm::LLVMBuildPhi(self.llbuilder, ty, UNNAMED) };\n         unsafe {"}, {"sha": "8c0d256df2357cb26eb7e26fe92826c9f9956b29", "filename": "src/librustc_codegen_llvm/va_arg.rs", "status": "modified", "additions": 80, "deletions": 2, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/fc52b47e8013da325fc0a0f5d3897143243ba206/src%2Flibrustc_codegen_llvm%2Fva_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc52b47e8013da325fc0a0f5d3897143243ba206/src%2Flibrustc_codegen_llvm%2Fva_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fva_arg.rs?ref=fc52b47e8013da325fc0a0f5d3897143243ba206", "patch": "@@ -3,8 +3,9 @@ use crate::type_::Type;\n use crate::type_of::LayoutLlvmExt;\n use crate::value::Value;\n use rustc_codegen_ssa::mir::operand::OperandRef;\n-use rustc_codegen_ssa::traits::{\n-    BaseTypeMethods, BuilderMethods, ConstMethods, DerivedTypeMethods,\n+use rustc_codegen_ssa::{\n+    common::IntPredicate,\n+    traits::{BaseTypeMethods, BuilderMethods, ConstMethods, DerivedTypeMethods},\n };\n use rustc_middle::ty::layout::HasTyCtxt;\n use rustc_middle::ty::Ty;\n@@ -89,6 +90,82 @@ fn emit_ptr_va_arg(\n     }\n }\n \n+fn emit_aapcs_va_arg(\n+    bx: &mut Builder<'a, 'll, 'tcx>,\n+    list: OperandRef<'tcx, &'ll Value>,\n+    target_ty: Ty<'tcx>,\n+) -> &'ll Value {\n+    // Implementation of the AAPCS64 calling convention for va_args see\n+    // https://github.com/ARM-software/abi-aa/blob/master/aapcs64/aapcs64.rst\n+    let va_list_addr = list.immediate();\n+    let layout = bx.cx.layout_of(target_ty);\n+\n+    let mut maybe_reg = bx.build_sibling_block(\"va_arg.maybe_reg\");\n+    let mut in_reg = bx.build_sibling_block(\"va_arg.in_reg\");\n+    let mut on_stack = bx.build_sibling_block(\"va_arg.on_stack\");\n+    let mut end = bx.build_sibling_block(\"va_arg.end\");\n+    let zero = bx.const_i32(0);\n+    let offset_align = Align::from_bytes(4).unwrap();\n+    assert!(&*bx.tcx().sess.target.target.target_endian == \"little\");\n+\n+    let gr_type = target_ty.is_any_ptr() || target_ty.is_integral();\n+    let (reg_off, reg_top_index, slot_size) = if gr_type {\n+        let gr_offs = bx.struct_gep(va_list_addr, 7);\n+        let nreg = (layout.size.bytes() + 7) / 8;\n+        (gr_offs, 3, nreg * 8)\n+    } else {\n+        let vr_off = bx.struct_gep(va_list_addr, 9);\n+        let nreg = (layout.size.bytes() + 15) / 16;\n+        (vr_off, 5, nreg * 16)\n+    };\n+\n+    // if the offset >= 0 then the value will be on the stack\n+    let mut reg_off_v = bx.load(reg_off, offset_align);\n+    let use_stack = bx.icmp(IntPredicate::IntSGE, reg_off_v, zero);\n+    bx.cond_br(use_stack, &on_stack.llbb(), &maybe_reg.llbb());\n+\n+    // The value at this point might be in a register, but there is a chance that\n+    // it could be on the stack so we have to update the offset and then check\n+    // the offset again.\n+\n+    if layout.align.abi.bytes() > 8 {\n+        assert!(layout.align.abi.bytes() <= 16);\n+        reg_off_v = maybe_reg.add(reg_off_v, bx.const_i32(15));\n+        reg_off_v = maybe_reg.and(reg_off_v, bx.const_i32(-16));\n+    }\n+    let new_reg_off_v = maybe_reg.add(reg_off_v, bx.const_i32(slot_size as i32));\n+\n+    maybe_reg.store(new_reg_off_v, reg_off, offset_align);\n+\n+    // Check to see if we have overflowed the registers as a result of this.\n+    // If we have then we need to use the stack for this value\n+    let use_stack = maybe_reg.icmp(IntPredicate::IntSGT, new_reg_off_v, zero);\n+    maybe_reg.cond_br(use_stack, &on_stack.llbb(), &in_reg.llbb());\n+\n+    let top = in_reg.struct_gep(va_list_addr, reg_top_index);\n+    let top = in_reg.load(top, bx.tcx().data_layout.pointer_align.abi);\n+\n+    // reg_value = *(@top + reg_off_v);\n+    let top = in_reg.gep(top, &[reg_off_v]);\n+    let top = in_reg.bitcast(top, bx.cx.type_ptr_to(layout.llvm_type(bx)));\n+    let reg_value = in_reg.load(top, layout.align.abi);\n+    in_reg.br(&end.llbb());\n+\n+    // On Stack block\n+    let stack_value =\n+        emit_ptr_va_arg(&mut on_stack, list, target_ty, false, Align::from_bytes(8).unwrap(), true);\n+    on_stack.br(&end.llbb());\n+\n+    let val = end.phi(\n+        layout.immediate_llvm_type(bx),\n+        &[reg_value, stack_value],\n+        &[&in_reg.llbb(), &on_stack.llbb()],\n+    );\n+\n+    *bx = end;\n+    val\n+}\n+\n pub(super) fn emit_va_arg(\n     bx: &mut Builder<'a, 'll, 'tcx>,\n     addr: OperandRef<'tcx, &'ll Value>,\n@@ -115,6 +192,7 @@ pub(super) fn emit_va_arg(\n         (\"aarch64\", _) if target.target_os == \"ios\" => {\n             emit_ptr_va_arg(bx, addr, target_ty, false, Align::from_bytes(8).unwrap(), true)\n         }\n+        (\"aarch64\", _) => emit_aapcs_va_arg(bx, addr, target_ty),\n         // Windows x86_64\n         (\"x86_64\", true) => {\n             let target_ty_size = bx.cx.size_of(target_ty).bytes();"}, {"sha": "5830ef033d38990198300d15843d721b42b41d29", "filename": "src/test/run-make-fulldeps/c-link-to-rust-va-list-fn/checkrust.rs", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/fc52b47e8013da325fc0a0f5d3897143243ba206/src%2Ftest%2Frun-make-fulldeps%2Fc-link-to-rust-va-list-fn%2Fcheckrust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc52b47e8013da325fc0a0f5d3897143243ba206/src%2Ftest%2Frun-make-fulldeps%2Fc-link-to-rust-va-list-fn%2Fcheckrust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fc-link-to-rust-va-list-fn%2Fcheckrust.rs?ref=fc52b47e8013da325fc0a0f5d3897143243ba206", "patch": "@@ -91,3 +91,58 @@ pub unsafe extern \"C\" fn check_varargs_1(_: c_int, mut ap: ...) -> usize {\n pub unsafe extern \"C\" fn check_varargs_2(_: c_int, _ap: ...) -> usize {\n     0\n }\n+\n+#[no_mangle]\n+pub unsafe extern \"C\" fn check_varargs_3(_: c_int, mut ap: ...) -> usize {\n+    continue_if!(ap.arg::<c_int>() == 1);\n+    continue_if!(ap.arg::<c_int>() == 2);\n+    continue_if!(ap.arg::<c_int>() == 3);\n+    continue_if!(ap.arg::<c_int>() == 4);\n+    continue_if!(ap.arg::<c_int>() == 5);\n+    continue_if!(ap.arg::<c_int>() == 6);\n+    continue_if!(ap.arg::<c_int>() == 7);\n+    continue_if!(ap.arg::<c_int>() == 8);\n+    continue_if!(ap.arg::<c_int>() == 9);\n+    continue_if!(ap.arg::<c_int>() == 10);\n+    0\n+}\n+\n+#[no_mangle]\n+pub unsafe extern \"C\" fn check_varargs_4(_: c_double, mut ap: ...) -> usize {\n+    continue_if!(ap.arg::<c_double>() == 1.0);\n+    continue_if!(ap.arg::<c_double>() == 2.0);\n+    continue_if!(ap.arg::<c_double>() == 3.0);\n+    continue_if!(ap.arg::<c_double>() == 4.0);\n+    continue_if!(ap.arg::<c_double>() == 5.0);\n+    continue_if!(ap.arg::<c_double>() == 6.0);\n+    continue_if!(ap.arg::<c_double>() == 7.0);\n+    continue_if!(ap.arg::<c_double>() == 8.0);\n+    continue_if!(ap.arg::<c_double>() == 9.0);\n+    continue_if!(ap.arg::<c_double>() == 10.0);\n+    0\n+}\n+\n+#[no_mangle]\n+pub unsafe extern \"C\" fn check_varargs_5(_: c_int, mut ap: ...) -> usize {\n+    continue_if!(ap.arg::<c_double>() == 1.0);\n+    continue_if!(ap.arg::<c_int>() == 1);\n+    continue_if!(ap.arg::<c_double>() == 2.0);\n+    continue_if!(ap.arg::<c_int>() == 2);\n+    continue_if!(ap.arg::<c_double>() == 3.0);\n+    continue_if!(ap.arg::<c_int>() == 3);\n+    continue_if!(ap.arg::<c_double>() == 4.0);\n+    continue_if!(ap.arg::<c_int>() == 4);\n+    continue_if!(ap.arg::<c_int>() == 5);\n+    continue_if!(ap.arg::<c_double>() == 5.0);\n+    continue_if!(ap.arg::<c_int>() == 6);\n+    continue_if!(ap.arg::<c_double>() == 6.0);\n+    continue_if!(ap.arg::<c_int>() == 7);\n+    continue_if!(ap.arg::<c_double>() == 7.0);\n+    continue_if!(ap.arg::<c_int>() == 8);\n+    continue_if!(ap.arg::<c_double>() == 8.0);\n+    continue_if!(ap.arg::<c_int>() == 9);\n+    continue_if!(ap.arg::<c_double>() == 9.0);\n+    continue_if!(ap.arg::<c_int>() == 10);\n+    continue_if!(ap.arg::<c_double>() == 10.0);\n+    0\n+}"}, {"sha": "5bdb51680a6562ec25d03597146de4bdf4cbb417", "filename": "src/test/run-make-fulldeps/c-link-to-rust-va-list-fn/test.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fc52b47e8013da325fc0a0f5d3897143243ba206/src%2Ftest%2Frun-make-fulldeps%2Fc-link-to-rust-va-list-fn%2Ftest.c", "raw_url": "https://github.com/rust-lang/rust/raw/fc52b47e8013da325fc0a0f5d3897143243ba206/src%2Ftest%2Frun-make-fulldeps%2Fc-link-to-rust-va-list-fn%2Ftest.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fc-link-to-rust-va-list-fn%2Ftest.c?ref=fc52b47e8013da325fc0a0f5d3897143243ba206", "patch": "@@ -11,6 +11,9 @@ extern size_t check_list_copy_0(va_list ap);\n extern size_t check_varargs_0(int fixed, ...);\n extern size_t check_varargs_1(int fixed, ...);\n extern size_t check_varargs_2(int fixed, ...);\n+extern size_t check_varargs_3(int fixed, ...);\n+extern size_t check_varargs_4(double fixed, ...);\n+extern size_t check_varargs_5(int fixed, ...);\n \n int test_rust(size_t (*fn)(va_list), ...) {\n     size_t ret = 0;\n@@ -36,5 +39,12 @@ int main(int argc, char* argv[]) {\n \n     assert(check_varargs_2(0, \"All\", \"of\", \"these\", \"are\", \"ignored\", \".\") == 0);\n \n+    assert(check_varargs_3(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10) == 0);\n+\n+    assert(check_varargs_4(0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0) == 0);\n+\n+    assert(check_varargs_5(0, 1.0, 1, 2.0, 2, 3.0, 3, 4.0, 4, 5, 5.0, 6, 6.0, 7, 7.0, 8, 8.0,\n+                           9, 9.0, 10, 10.0) == 0);\n+\n     return 0;\n }"}]}