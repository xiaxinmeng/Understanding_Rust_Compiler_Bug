{"sha": "bf602952116262f261eec20a2dc085d915de7bc7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmNjAyOTUyMTE2MjYyZjI2MWVlYzIwYTJkYzA4NWQ5MTVkZTdiYzc=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-04-16T17:50:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-04-16T17:50:56Z"}, "message": "Rollup merge of #49555 - nox:inline-into-boxed, r=alexcrichton\n\nInline most of the code paths for conversions with boxed slices\n\nThis helps with the specific problem described in #49541, obviously without making any large change to how inlining works in the general case.\n\nEverything involved in the conversions is made `#[inline]`, except for the `<Vec<T>>::into_boxed_slice` entry point which is made `#[inline(always)]` after checking that duplicating the function mentioned in the issue prevented its inlining if I only annotate it with\n`#[inline]`.\n\nFor the record, that function was:\n\n```rust\npub fn foo() -> Box<[u8]> {\n    vec![0].into_boxed_slice()\n}\n```\n\nTo help the inliner's job, we also hoist a `self.capacity() != self.len` check in `<Vec<T>>::shrink_to_fit` and mark it as `#[inline]` too.", "tree": {"sha": "8fd11451918910559d4024bd11630fab46caf821", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8fd11451918910559d4024bd11630fab46caf821"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf602952116262f261eec20a2dc085d915de7bc7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJa1OKACRBK7hj4Ov3rIwAAdHIIAKCtVmXFpEHWMhRQGdOXOJN1\ne1FpauPdtDEqFBxcxK6AzgvpvYM0SryVZMqODkljNvYbWWd5eAOziRtrpEfpG014\nLe7Z6jrZI95HzEUmeEQOGTd9eyX3LCKkxRB6Dq4sm2RXx96gJ4wHXJ0ZNCB2NmVC\nQiE+yfnIfLDq83/daAWlfgFTfl4kLJiHYgnvkgAZiPys5uI/kS4ov2ARP+DtAt/w\nhfO1TJqrFOtLBrxw01dyKiglQr8JSEO7mg7Na+9kN9KC1gTmDQN+M4d+tJsKa9Yo\nHIGvxQ7RutYoxySpxA6Z+qFR3M8Drqmjhibb0h3ot5t5ha1U0XU5ZSnvlmdJpxY=\n=GZcq\n-----END PGP SIGNATURE-----\n", "payload": "tree 8fd11451918910559d4024bd11630fab46caf821\nparent 1ef1563518d48ad9231b3ec3ac463d34d819ed28\nparent b59fa0d9e81fe36c5d298f8f828aaf0755e96f89\nauthor kennytm <kennytm@gmail.com> 1523901056 +0800\ncommitter GitHub <noreply@github.com> 1523901056 +0800\n\nRollup merge of #49555 - nox:inline-into-boxed, r=alexcrichton\n\nInline most of the code paths for conversions with boxed slices\n\nThis helps with the specific problem described in #49541, obviously without making any large change to how inlining works in the general case.\n\nEverything involved in the conversions is made `#[inline]`, except for the `<Vec<T>>::into_boxed_slice` entry point which is made `#[inline(always)]` after checking that duplicating the function mentioned in the issue prevented its inlining if I only annotate it with\n`#[inline]`.\n\nFor the record, that function was:\n\n```rust\npub fn foo() -> Box<[u8]> {\n    vec![0].into_boxed_slice()\n}\n```\n\nTo help the inliner's job, we also hoist a `self.capacity() != self.len` check in `<Vec<T>>::shrink_to_fit` and mark it as `#[inline]` too.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf602952116262f261eec20a2dc085d915de7bc7", "html_url": "https://github.com/rust-lang/rust/commit/bf602952116262f261eec20a2dc085d915de7bc7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf602952116262f261eec20a2dc085d915de7bc7/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ef1563518d48ad9231b3ec3ac463d34d819ed28", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ef1563518d48ad9231b3ec3ac463d34d819ed28", "html_url": "https://github.com/rust-lang/rust/commit/1ef1563518d48ad9231b3ec3ac463d34d819ed28"}, {"sha": "b59fa0d9e81fe36c5d298f8f828aaf0755e96f89", "url": "https://api.github.com/repos/rust-lang/rust/commits/b59fa0d9e81fe36c5d298f8f828aaf0755e96f89", "html_url": "https://github.com/rust-lang/rust/commit/b59fa0d9e81fe36c5d298f8f828aaf0755e96f89"}], "stats": {"total": 10, "additions": 9, "deletions": 1}, "files": [{"sha": "5ebd2cc6146371febfa208b013699eadee9e963a", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf602952116262f261eec20a2dc085d915de7bc7/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf602952116262f261eec20a2dc085d915de7bc7/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=bf602952116262f261eec20a2dc085d915de7bc7", "patch": "@@ -429,13 +429,15 @@ impl<'a, T: Copy> From<&'a [T]> for Box<[T]> {\n \n #[stable(feature = \"box_from_slice\", since = \"1.17.0\")]\n impl<'a> From<&'a str> for Box<str> {\n+    #[inline]\n     fn from(s: &'a str) -> Box<str> {\n         unsafe { from_boxed_utf8_unchecked(Box::from(s.as_bytes())) }\n     }\n }\n \n #[stable(feature = \"boxed_str_conv\", since = \"1.19.0\")]\n impl From<Box<str>> for Box<[u8]> {\n+    #[inline]\n     fn from(s: Box<str>) -> Self {\n         unsafe { Box::from_raw(Box::into_raw(s) as *mut [u8]) }\n     }"}, {"sha": "0e7084653329e8b32be0ebaa7df109795e4557db", "filename": "src/liballoc/str.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bf602952116262f261eec20a2dc085d915de7bc7/src%2Fliballoc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf602952116262f261eec20a2dc085d915de7bc7/src%2Fliballoc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstr.rs?ref=bf602952116262f261eec20a2dc085d915de7bc7", "patch": "@@ -1827,6 +1827,7 @@ impl str {\n     /// assert_eq!(*boxed_bytes, *s.as_bytes());\n     /// ```\n     #[stable(feature = \"str_box_extras\", since = \"1.20.0\")]\n+    #[inline]\n     pub fn into_boxed_bytes(self: Box<str>) -> Box<[u8]> {\n         self.into()\n     }\n@@ -2065,6 +2066,7 @@ impl str {\n     /// assert_eq!(boxed_str.into_string(), string);\n     /// ```\n     #[stable(feature = \"box_str\", since = \"1.4.0\")]\n+    #[inline]\n     pub fn into_string(self: Box<str>) -> String {\n         let slice = Box::<[u8]>::from(self);\n         unsafe { String::from_utf8_unchecked(slice.into_vec()) }\n@@ -2323,6 +2325,7 @@ impl str {\n /// assert_eq!(\"\u263a\", &*smile);\n /// ```\n #[stable(feature = \"str_box_extras\", since = \"1.20.0\")]\n+#[inline]\n pub unsafe fn from_boxed_utf8_unchecked(v: Box<[u8]>) -> Box<str> {\n     Box::from_raw(Box::into_raw(v) as *mut str)\n }"}, {"sha": "11fb82c09d3aa47839088a53dec68ba09baa177a", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bf602952116262f261eec20a2dc085d915de7bc7/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf602952116262f261eec20a2dc085d915de7bc7/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=bf602952116262f261eec20a2dc085d915de7bc7", "patch": "@@ -1586,6 +1586,7 @@ impl String {\n     /// let b = s.into_boxed_str();\n     /// ```\n     #[stable(feature = \"box_str\", since = \"1.4.0\")]\n+    #[inline]\n     pub fn into_boxed_str(self) -> Box<str> {\n         let slice = self.vec.into_boxed_slice();\n         unsafe { from_boxed_utf8_unchecked(slice) }"}, {"sha": "7d1b2ed85c7e13655e871cdaff00be37796788d8", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf602952116262f261eec20a2dc085d915de7bc7/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf602952116262f261eec20a2dc085d915de7bc7/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=bf602952116262f261eec20a2dc085d915de7bc7", "patch": "@@ -583,7 +583,9 @@ impl<T> Vec<T> {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn shrink_to_fit(&mut self) {\n-        self.buf.shrink_to_fit(self.len);\n+        if self.capacity() != self.len {\n+            self.buf.shrink_to_fit(self.len);\n+        }\n     }\n \n     /// Shrinks the capacity of the vector with a lower bound."}]}