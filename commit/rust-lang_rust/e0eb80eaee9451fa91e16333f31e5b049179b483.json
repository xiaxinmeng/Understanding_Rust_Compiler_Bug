{"sha": "e0eb80eaee9451fa91e16333f31e5b049179b483", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwZWI4MGVhZWU5NDUxZmE5MWUxNjMzM2YzMWU1YjA0OTE3OWI0ODM=", "commit": {"author": {"name": "Paco Sober\u00f3n", "email": "unratito@gmail.com", "date": "2021-02-16T23:09:31Z"}, "committer": {"name": "Paco Sober\u00f3n", "email": "unratito@gmail.com", "date": "2021-02-16T23:09:56Z"}, "message": "Allow comments between newlines in chaining hints", "tree": {"sha": "6c94581ea676904c6106a37507e3fbbf8c8415ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c94581ea676904c6106a37507e3fbbf8c8415ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0eb80eaee9451fa91e16333f31e5b049179b483", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0eb80eaee9451fa91e16333f31e5b049179b483", "html_url": "https://github.com/rust-lang/rust/commit/e0eb80eaee9451fa91e16333f31e5b049179b483", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0eb80eaee9451fa91e16333f31e5b049179b483/comments", "author": {"login": "unratito", "id": 2053671, "node_id": "MDQ6VXNlcjIwNTM2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/2053671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unratito", "html_url": "https://github.com/unratito", "followers_url": "https://api.github.com/users/unratito/followers", "following_url": "https://api.github.com/users/unratito/following{/other_user}", "gists_url": "https://api.github.com/users/unratito/gists{/gist_id}", "starred_url": "https://api.github.com/users/unratito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unratito/subscriptions", "organizations_url": "https://api.github.com/users/unratito/orgs", "repos_url": "https://api.github.com/users/unratito/repos", "events_url": "https://api.github.com/users/unratito/events{/privacy}", "received_events_url": "https://api.github.com/users/unratito/received_events", "type": "User", "site_admin": false}, "committer": {"login": "unratito", "id": 2053671, "node_id": "MDQ6VXNlcjIwNTM2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/2053671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unratito", "html_url": "https://github.com/unratito", "followers_url": "https://api.github.com/users/unratito/followers", "following_url": "https://api.github.com/users/unratito/following{/other_user}", "gists_url": "https://api.github.com/users/unratito/gists{/gist_id}", "starred_url": "https://api.github.com/users/unratito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unratito/subscriptions", "organizations_url": "https://api.github.com/users/unratito/orgs", "repos_url": "https://api.github.com/users/unratito/repos", "events_url": "https://api.github.com/users/unratito/events{/privacy}", "received_events_url": "https://api.github.com/users/unratito/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c4de19467780a085866278b8423108ef99d0d80", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c4de19467780a085866278b8423108ef99d0d80", "html_url": "https://github.com/rust-lang/rust/commit/4c4de19467780a085866278b8423108ef99d0d80"}], "stats": {"total": 38, "additions": 22, "deletions": 16}, "files": [{"sha": "4ceb2074209d62842ba53afb5bfdf801c6c6741c", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 22, "deletions": 16, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/e0eb80eaee9451fa91e16333f31e5b049179b483/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0eb80eaee9451fa91e16333f31e5b049179b483/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=e0eb80eaee9451fa91e16333f31e5b049179b483", "patch": "@@ -109,26 +109,31 @@ fn get_chaining_hints(\n     // Chaining can be defined as an expression whose next sibling tokens are newline and dot\n     // Ignoring extra whitespace and comments\n     let next = tokens.next()?.kind();\n-    let next_next = tokens.next()?.kind();\n-    if next == SyntaxKind::WHITESPACE && next_next == T![.] {\n-        let ty = sema.type_of_expr(&expr)?;\n-        if ty.is_unknown() {\n-            return None;\n+    if next == SyntaxKind::WHITESPACE {\n+        let mut next_next = tokens.next()?.kind();\n+        while next_next == SyntaxKind::WHITESPACE {\n+            next_next = tokens.next()?.kind();\n         }\n-        if matches!(expr, ast::Expr::PathExpr(_)) {\n-            if let Some(hir::Adt::Struct(st)) = ty.as_adt() {\n-                if st.fields(sema.db).is_empty() {\n-                    return None;\n+        if next_next == T![.] {\n+            let ty = sema.type_of_expr(&expr)?;\n+            if ty.is_unknown() {\n+                return None;\n+            }\n+            if matches!(expr, ast::Expr::PathExpr(_)) {\n+                if let Some(hir::Adt::Struct(st)) = ty.as_adt() {\n+                    if st.fields(sema.db).is_empty() {\n+                        return None;\n+                    }\n                 }\n             }\n+            acc.push(InlayHint {\n+                range: expr.syntax().text_range(),\n+                kind: InlayKind::ChainingHint,\n+                label: hint_iterator(sema, &famous_defs, config, &ty).unwrap_or_else(|| {\n+                    ty.display_truncated(sema.db, config.max_length).to_string().into()\n+                }),\n+            });\n         }\n-        acc.push(InlayHint {\n-            range: expr.syntax().text_range(),\n-            kind: InlayKind::ChainingHint,\n-            label: hint_iterator(sema, &famous_defs, config, &ty).unwrap_or_else(|| {\n-                ty.display_truncated(sema.db, config.max_length).to_string().into()\n-            }),\n-        });\n     }\n     Some(())\n }\n@@ -983,6 +988,7 @@ struct C;\n fn main() {\n     let c = A(B(C))\n         .into_b() // This is a comment\n+        // This is another comment\n         .into_c();\n }\n \"#,"}]}