{"sha": "dd3e89aaf25c667fa8207f8800c4b60d70d76c1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkM2U4OWFhZjI1YzY2N2ZhODIwN2Y4ODAwYzRiNjBkNzBkNzZjMWI=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-01-07T04:26:55Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-01-07T20:07:55Z"}, "message": "Rename `target_word_size` to `target_pointer_width`\n\nCloses #20421\n\n[breaking-change]", "tree": {"sha": "e22fee6b3c1b88bb3d247e89e0349a1781849f74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e22fee6b3c1b88bb3d247e89e0349a1781849f74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b", "html_url": "https://github.com/rust-lang/rust/commit/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f1ead8fadc56bad30dc74f5cc50d78af4fbc972", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f1ead8fadc56bad30dc74f5cc50d78af4fbc972", "html_url": "https://github.com/rust-lang/rust/commit/9f1ead8fadc56bad30dc74f5cc50d78af4fbc972"}], "stats": {"total": 160, "additions": 91, "deletions": 69}, "files": [{"sha": "f0f4a191e4f99b971200bee3806631140e5e2acf", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=dd3e89aaf25c667fa8207f8800c4b60d70d76c1b", "patch": "@@ -2749,9 +2749,9 @@ macro_rules! step_impl_no_between {\n }\n \n step_impl!(uint u8 u16 u32 int i8 i16 i32);\n-#[cfg(target_word_size = \"64\")]\n+#[cfg(any(all(stage0, target_word_size = \"64\"), all(not(stage0), target_pointer_width = \"64\")))]\n step_impl!(u64 i64);\n-#[cfg(target_word_size = \"32\")]\n+#[cfg(any(all(stage0, target_word_size = \"32\"), all(not(stage0), target_pointer_width = \"32\")))]\n step_impl_no_between!(u64 i64);\n \n "}, {"sha": "93f5b31ca721cdbc8d55aba66626402eea31988b", "filename": "src/libcore/num/int.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Flibcore%2Fnum%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Flibcore%2Fnum%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint.rs?ref=dd3e89aaf25c667fa8207f8800c4b60d70d76c1b", "patch": "@@ -13,5 +13,8 @@\n #![stable]\n #![doc(primitive = \"int\")]\n \n-#[cfg(target_word_size = \"32\")] int_module! { int, 32 }\n-#[cfg(target_word_size = \"64\")] int_module! { int, 64 }\n+#[cfg(stage0)] #[cfg(target_word_size = \"32\")] int_module! { int, 32 }\n+#[cfg(stage0)] #[cfg(target_word_size = \"64\")] int_module! { int, 64 }\n+\n+#[cfg(not(stage0))] #[cfg(target_pointer_width = \"32\")] int_module! { int, 32 }\n+#[cfg(not(stage0))] #[cfg(target_pointer_width = \"64\")] int_module! { int, 64 }"}, {"sha": "47da5de53919004d812a8958505f5b4ad02a11aa", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=dd3e89aaf25c667fa8207f8800c4b60d70d76c1b", "patch": "@@ -496,7 +496,7 @@ uint_impl! { u64 = u64, 64,\n     intrinsics::u64_sub_with_overflow,\n     intrinsics::u64_mul_with_overflow }\n \n-#[cfg(target_word_size = \"32\")]\n+#[cfg(any(all(stage0, target_word_size = \"32\"), all(not(stage0), target_pointer_width = \"32\")))]\n uint_impl! { uint = u32, 32,\n     intrinsics::ctpop32,\n     intrinsics::ctlz32,\n@@ -506,7 +506,7 @@ uint_impl! { uint = u32, 32,\n     intrinsics::u32_sub_with_overflow,\n     intrinsics::u32_mul_with_overflow }\n \n-#[cfg(target_word_size = \"64\")]\n+#[cfg(any(all(stage0, target_word_size = \"64\"), all(not(stage0), target_pointer_width = \"64\")))]\n uint_impl! { uint = u64, 64,\n     intrinsics::ctpop64,\n     intrinsics::ctlz64,\n@@ -601,13 +601,13 @@ int_impl! { i64 = i64, u64, 64,\n     intrinsics::i64_sub_with_overflow,\n     intrinsics::i64_mul_with_overflow }\n \n-#[cfg(target_word_size = \"32\")]\n+#[cfg(any(all(stage0, target_word_size = \"32\"), all(not(stage0), target_pointer_width = \"32\")))]\n int_impl! { int = i32, u32, 32,\n     intrinsics::i32_add_with_overflow,\n     intrinsics::i32_sub_with_overflow,\n     intrinsics::i32_mul_with_overflow }\n \n-#[cfg(target_word_size = \"64\")]\n+#[cfg(any(all(stage0, target_word_size = \"64\"), all(not(stage0), target_pointer_width = \"64\")))]\n int_impl! { int = i64, u64, 64,\n     intrinsics::i64_add_with_overflow,\n     intrinsics::i64_sub_with_overflow,"}, {"sha": "e8160487e16f73f1a7c36048a4e57c82498e4984", "filename": "src/librustc/metadata/filesearch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs?ref=dd3e89aaf25c667fa8207f8800c4b60d70d76c1b", "patch": "@@ -272,12 +272,12 @@ fn find_libdir(sysroot: &Path) -> String {\n         }\n     }\n \n-    #[cfg(target_word_size = \"64\")]\n+    #[cfg(any(all(stage0, target_word_size = \"64\"), all(not(stage0), target_pointer_width = \"64\")))]\n     fn primary_libdir_name() -> String {\n         \"lib64\".to_string()\n     }\n \n-    #[cfg(target_word_size = \"32\")]\n+    #[cfg(any(all(stage0, target_word_size = \"32\"), all(not(stage0), target_pointer_width = \"32\")))]\n     fn primary_libdir_name() -> String {\n         \"lib32\".to_string()\n     }"}, {"sha": "ebf8c52a6142a9b9f5ced99998984b65b15a903b", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=dd3e89aaf25c667fa8207f8800c4b60d70d76c1b", "patch": "@@ -594,7 +594,7 @@ pub fn default_configuration(sess: &Session) -> ast::CrateConfig {\n \n     let end = sess.target.target.target_endian.index(&FullRange);\n     let arch = sess.target.target.arch.index(&FullRange);\n-    let wordsz = sess.target.target.target_word_size.index(&FullRange);\n+    let wordsz = sess.target.target.target_pointer_width.index(&FullRange);\n     let os = sess.target.target.target_os.index(&FullRange);\n \n     let fam = match sess.target.target.options.is_like_windows {\n@@ -609,7 +609,7 @@ pub fn default_configuration(sess: &Session) -> ast::CrateConfig {\n          mk(InternedString::new(\"target_family\"), fam),\n          mk(InternedString::new(\"target_arch\"), intern(arch)),\n          mk(InternedString::new(\"target_endian\"), intern(end)),\n-         mk(InternedString::new(\"target_word_size\"),\n+         mk(InternedString::new(\"target_pointer_width\"),\n             intern(wordsz))\n     );\n }\n@@ -643,7 +643,7 @@ pub fn build_target_config(opts: &Options, sp: &SpanHandler) -> Config {\n     }\n     };\n \n-    let (int_type, uint_type) = match target.target_word_size.index(&FullRange) {\n+    let (int_type, uint_type) = match target.target_pointer_width.index(&FullRange) {\n         \"32\" => (ast::TyI32, ast::TyU32),\n         \"64\" => (ast::TyI64, ast::TyU64),\n         w    => sp.handler().fatal((format!(\"target specification was invalid: unrecognized \\"}, {"sha": "a3ef6372f0648b9e1046b1ea1cd14584f9ab1749", "filename": "src/librustc_back/target/aarch64_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Flibrustc_back%2Ftarget%2Faarch64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Flibrustc_back%2Ftarget%2Faarch64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Faarch64_unknown_linux_gnu.rs?ref=dd3e89aaf25c667fa8207f8800c4b60d70d76c1b", "patch": "@@ -18,7 +18,7 @@ pub fn target() -> Target {\n                       n32:64-S128\".to_string(),\n         llvm_target: \"aarch64-unknown-linux-gnu\".to_string(),\n         target_endian: \"little\".to_string(),\n-        target_word_size: \"64\".to_string(),\n+        target_pointer_width: \"64\".to_string(),\n         arch: \"aarch64\".to_string(),\n         target_os: \"linux\".to_string(),\n         options: base,"}, {"sha": "e0afef6e3904f235faa475bcb24609e1c7bfdf93", "filename": "src/librustc_back/target/arm_apple_ios.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Flibrustc_back%2Ftarget%2Farm_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Flibrustc_back%2Ftarget%2Farm_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farm_apple_ios.rs?ref=dd3e89aaf25c667fa8207f8800c4b60d70d76c1b", "patch": "@@ -19,7 +19,7 @@ pub fn target() -> Target {\n                       -a:0:64-n32\".to_string(),\n         llvm_target: \"arm-apple-ios\".to_string(),\n         target_endian: \"little\".to_string(),\n-        target_word_size: \"32\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"ios\".to_string(),\n         options: TargetOptions {"}, {"sha": "6fc77a715a55667b672a7edafa1f23229360bf28", "filename": "src/librustc_back/target/arm_linux_androideabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Flibrustc_back%2Ftarget%2Farm_linux_androideabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Flibrustc_back%2Ftarget%2Farm_linux_androideabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farm_linux_androideabi.rs?ref=dd3e89aaf25c667fa8207f8800c4b60d70d76c1b", "patch": "@@ -27,7 +27,7 @@ pub fn target() -> Target {\n                       -a:0:64-n32\".to_string(),\n         llvm_target: \"arm-linux-androideabi\".to_string(),\n         target_endian: \"little\".to_string(),\n-        target_word_size: \"32\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"android\".to_string(),\n         options: base,"}, {"sha": "32eccaf54b038816e01c02207fb35e558863f1e1", "filename": "src/librustc_back/target/arm_unknown_linux_gnueabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_gnueabi.rs?ref=dd3e89aaf25c667fa8207f8800c4b60d70d76c1b", "patch": "@@ -20,7 +20,7 @@ pub fn target() -> Target {\n                       -a:0:64-n32\".to_string(),\n         llvm_target: \"arm-unknown-linux-gnueabi\".to_string(),\n         target_endian: \"little\".to_string(),\n-        target_word_size: \"32\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"linux\".to_string(),\n "}, {"sha": "eff3601250f875c58e4aaee59261ee4d2ce99c0a", "filename": "src/librustc_back/target/arm_unknown_linux_gnueabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_gnueabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_gnueabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_gnueabihf.rs?ref=dd3e89aaf25c667fa8207f8800c4b60d70d76c1b", "patch": "@@ -20,7 +20,7 @@ pub fn target() -> Target {\n                       -a:0:64-n32\".to_string(),\n         llvm_target: \"arm-unknown-linux-gnueabihf\".to_string(),\n         target_endian: \"little\".to_string(),\n-        target_word_size: \"32\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"linux\".to_string(),\n "}, {"sha": "a1fcc9ac53fb226b4ce546f33ddf5fd40c9235a9", "filename": "src/librustc_back/target/i386_apple_ios.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Flibrustc_back%2Ftarget%2Fi386_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Flibrustc_back%2Ftarget%2Fi386_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi386_apple_ios.rs?ref=dd3e89aaf25c667fa8207f8800c4b60d70d76c1b", "patch": "@@ -19,7 +19,7 @@ pub fn target() -> Target {\n                       -n8:16:32\".to_string(),\n         llvm_target: \"i386-apple-ios\".to_string(),\n         target_endian: \"little\".to_string(),\n-        target_word_size: \"32\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n         arch: \"x86\".to_string(),\n         target_os: \"ios\".to_string(),\n "}, {"sha": "1b079323bf9ca7e4de47a8ab4ff23d73adc5bdc2", "filename": "src/librustc_back/target/i686_apple_darwin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Flibrustc_back%2Ftarget%2Fi686_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Flibrustc_back%2Ftarget%2Fi686_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi686_apple_darwin.rs?ref=dd3e89aaf25c667fa8207f8800c4b60d70d76c1b", "patch": "@@ -22,7 +22,7 @@ pub fn target() -> Target {\n                       -n8:16:32\".to_string(),\n         llvm_target: \"i686-apple-darwin\".to_string(),\n         target_endian: \"little\".to_string(),\n-        target_word_size: \"32\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n         arch: \"x86\".to_string(),\n         target_os: \"macos\".to_string(),\n         options: base,"}, {"sha": "c2ab68ee05256d048ac27874e053a06be463556e", "filename": "src/librustc_back/target/i686_pc_windows_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Flibrustc_back%2Ftarget%2Fi686_pc_windows_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Flibrustc_back%2Ftarget%2Fi686_pc_windows_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi686_pc_windows_gnu.rs?ref=dd3e89aaf25c667fa8207f8800c4b60d70d76c1b", "patch": "@@ -26,7 +26,7 @@ pub fn target() -> Target {\n         data_layout: \"e-p:32:32-f64:64:64-i64:64:64-f80:32:32-n8:16:32\".to_string(),\n         llvm_target: \"i686-pc-windows-gnu\".to_string(),\n         target_endian: \"little\".to_string(),\n-        target_word_size: \"32\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n         arch: \"x86\".to_string(),\n         target_os: \"windows\".to_string(),\n         options: options,"}, {"sha": "7910eba7ea1249e479a9fe30341ca225b16a334f", "filename": "src/librustc_back/target/i686_unknown_dragonfly.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_dragonfly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_dragonfly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_dragonfly.rs?ref=dd3e89aaf25c667fa8207f8800c4b60d70d76c1b", "patch": "@@ -18,7 +18,7 @@ pub fn target() -> Target {\n         data_layout: \"e-p:32:32-f64:32:64-i64:32:64-f80:32:32-n8:16:32\".to_string(),\n         llvm_target: \"i686-unknown-dragonfly\".to_string(),\n         target_endian: \"little\".to_string(),\n-        target_word_size: \"32\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n         arch: \"x86\".to_string(),\n         target_os: \"dragonfly\".to_string(),\n         options: base,"}, {"sha": "c93a564fef5f44164fc3a5e6ffa861891a12cf89", "filename": "src/librustc_back/target/i686_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_linux_gnu.rs?ref=dd3e89aaf25c667fa8207f8800c4b60d70d76c1b", "patch": "@@ -18,7 +18,7 @@ pub fn target() -> Target {\n         data_layout: \"e-p:32:32-f64:32:64-i64:32:64-f80:32:32-n8:16:32\".to_string(),\n         llvm_target: \"i686-unknown-linux-gnu\".to_string(),\n         target_endian: \"little\".to_string(),\n-        target_word_size: \"32\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n         arch: \"x86\".to_string(),\n         target_os: \"linux\".to_string(),\n         options: base,"}, {"sha": "8acc248e23410105c134612cf65f5822c6804a6d", "filename": "src/librustc_back/target/mips_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Flibrustc_back%2Ftarget%2Fmips_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Flibrustc_back%2Ftarget%2Fmips_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmips_unknown_linux_gnu.rs?ref=dd3e89aaf25c667fa8207f8800c4b60d70d76c1b", "patch": "@@ -19,7 +19,7 @@ pub fn target() -> Target {\n                       -a:0:64-n32\".to_string(),\n         llvm_target: \"mips-unknown-linux-gnu\".to_string(),\n         target_endian: \"big\".to_string(),\n-        target_word_size: \"32\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n         arch: \"mips\".to_string(),\n         target_os: \"linux\".to_string(),\n         options: super::linux_base::opts()"}, {"sha": "604c62eb69f0f753fffe2e628f29ddbb076d55da", "filename": "src/librustc_back/target/mipsel_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Flibrustc_back%2Ftarget%2Fmipsel_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Flibrustc_back%2Ftarget%2Fmipsel_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmipsel_unknown_linux_gnu.rs?ref=dd3e89aaf25c667fa8207f8800c4b60d70d76c1b", "patch": "@@ -19,7 +19,7 @@ pub fn target() -> Target {\n                       -a:0:64-n32\".to_string(),\n         llvm_target: \"mipsel-unknown-linux-gnu\".to_string(),\n         target_endian: \"little\".to_string(),\n-        target_word_size: \"32\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n         arch: \"mips\".to_string(),\n         target_os: \"linux\".to_string(),\n "}, {"sha": "87897c2885733e96c757ec980593e79fd1234e3a", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=dd3e89aaf25c667fa8207f8800c4b60d70d76c1b", "patch": "@@ -85,8 +85,8 @@ pub struct Target {\n     pub llvm_target: String,\n     /// String to use as the `target_endian` `cfg` variable.\n     pub target_endian: String,\n-    /// String to use as the `target_word_size` `cfg` variable.\n-    pub target_word_size: String,\n+    /// String to use as the `target_pointer_width` `cfg` variable.\n+    pub target_pointer_width: String,\n     /// OS name to use for conditional compilation.\n     pub target_os: String,\n     /// Architecture to use for ABI considerations. Valid options: \"x86\", \"x86_64\", \"arm\",\n@@ -233,7 +233,7 @@ impl Target {\n             data_layout: get_req_field(\"data-layout\"),\n             llvm_target: get_req_field(\"llvm-target\"),\n             target_endian: get_req_field(\"target-endian\"),\n-            target_word_size: get_req_field(\"target-word-size\"),\n+            target_pointer_width: get_req_field(\"target-word-size\"),\n             arch: get_req_field(\"arch\"),\n             target_os: get_req_field(\"os\"),\n             options: Default::default(),"}, {"sha": "0ebd3bd321583aa17186ae3f55cf6d84899a4019", "filename": "src/librustc_back/target/x86_64_apple_darwin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Flibrustc_back%2Ftarget%2Fx86_64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Flibrustc_back%2Ftarget%2Fx86_64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_apple_darwin.rs?ref=dd3e89aaf25c667fa8207f8800c4b60d70d76c1b", "patch": "@@ -21,7 +21,7 @@ pub fn target() -> Target {\n                       s0:64:64-f80:128:128-n8:16:32:64\".to_string(),\n         llvm_target: \"x86_64-apple-darwin\".to_string(),\n         target_endian: \"little\".to_string(),\n-        target_word_size: \"64\".to_string(),\n+        target_pointer_width: \"64\".to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"macos\".to_string(),\n         options: base,"}, {"sha": "9e1294a89625fbc5ef112acfc95be0a0ec3baeef", "filename": "src/librustc_back/target/x86_64_pc_windows_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Flibrustc_back%2Ftarget%2Fx86_64_pc_windows_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Flibrustc_back%2Ftarget%2Fx86_64_pc_windows_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_pc_windows_gnu.rs?ref=dd3e89aaf25c667fa8207f8800c4b60d70d76c1b", "patch": "@@ -23,7 +23,7 @@ pub fn target() -> Target {\n                       s0:64:64-f80:128:128-n8:16:32:64-S128\".to_string(),\n         llvm_target: \"x86_64-pc-windows-gnu\".to_string(),\n         target_endian: \"little\".to_string(),\n-        target_word_size: \"64\".to_string(),\n+        target_pointer_width: \"64\".to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"windows\".to_string(),\n         options: base,"}, {"sha": "6635306b0e193b57376664139c316d59c580c30d", "filename": "src/librustc_back/target/x86_64_unknown_dragonfly.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_dragonfly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_dragonfly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_dragonfly.rs?ref=dd3e89aaf25c667fa8207f8800c4b60d70d76c1b", "patch": "@@ -20,7 +20,7 @@ pub fn target() -> Target {\n                      s0:64:64-f80:128:128-n8:16:32:64-S128\".to_string(),\n         llvm_target: \"x86_64-unknown-dragonfly\".to_string(),\n         target_endian: \"little\".to_string(),\n-        target_word_size: \"64\".to_string(),\n+        target_pointer_width: \"64\".to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"dragonfly\".to_string(),\n         options: base,"}, {"sha": "2aba2b8defbdc1385043851fc3c34c4d1b85c6dd", "filename": "src/librustc_back/target/x86_64_unknown_freebsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_freebsd.rs?ref=dd3e89aaf25c667fa8207f8800c4b60d70d76c1b", "patch": "@@ -20,7 +20,7 @@ pub fn target() -> Target {\n                      s0:64:64-f80:128:128-n8:16:32:64-S128\".to_string(),\n         llvm_target: \"x86_64-unknown-freebsd\".to_string(),\n         target_endian: \"little\".to_string(),\n-        target_word_size: \"64\".to_string(),\n+        target_pointer_width: \"64\".to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"freebsd\".to_string(),\n         options: base,"}, {"sha": "d7a6df3a8b0beddd8be12612ed074e3e385d6328", "filename": "src/librustc_back/target/x86_64_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_linux_gnu.rs?ref=dd3e89aaf25c667fa8207f8800c4b60d70d76c1b", "patch": "@@ -20,7 +20,7 @@ pub fn target() -> Target {\n                       s0:64:64-f80:128:128-n8:16:32:64-S128\".to_string(),\n         llvm_target: \"x86_64-unknown-linux-gnu\".to_string(),\n         target_endian: \"little\".to_string(),\n-        target_word_size: \"64\".to_string(),\n+        target_pointer_width: \"64\".to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"linux\".to_string(),\n         options: base,"}, {"sha": "39632f2b084e96a22eff9f73f2ddf64c21abd907", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=dd3e89aaf25c667fa8207f8800c4b60d70d76c1b", "patch": "@@ -1128,7 +1128,7 @@ pub fn call_lifetime_end(cx: Block, ptr: ValueRef) {\n pub fn call_memcpy(cx: Block, dst: ValueRef, src: ValueRef, n_bytes: ValueRef, align: u32) {\n     let _icx = push_ctxt(\"call_memcpy\");\n     let ccx = cx.ccx();\n-    let key = match ccx.sess().target.target.target_word_size.index(&FullRange) {\n+    let key = match ccx.sess().target.target.target_pointer_width.index(&FullRange) {\n         \"32\" => \"llvm.memcpy.p0i8.p0i8.i32\",\n         \"64\" => \"llvm.memcpy.p0i8.p0i8.i64\",\n         tws => panic!(\"Unsupported target word size for memcpy: {}\", tws),\n@@ -1175,7 +1175,7 @@ fn memzero<'a, 'tcx>(b: &Builder<'a, 'tcx>, llptr: ValueRef, ty: Ty<'tcx>) {\n \n     let llty = type_of::type_of(ccx, ty);\n \n-    let intrinsic_key = match ccx.sess().target.target.target_word_size.index(&FullRange) {\n+    let intrinsic_key = match ccx.sess().target.target.target_pointer_width.index(&FullRange) {\n         \"32\" => \"llvm.memset.p0i8.i32\",\n         \"64\" => \"llvm.memset.p0i8.i64\",\n         tws => panic!(\"Unsupported target word size for memset: {}\", tws),"}, {"sha": "d450ce24de7bdc84ed51c1f2b104ee1356d9a702", "filename": "src/librustc_trans/trans/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs?ref=dd3e89aaf25c667fa8207f8800c4b60d70d76c1b", "patch": "@@ -721,7 +721,7 @@ impl<'b, 'tcx> CrateContext<'b, 'tcx> {\n     /// currently conservatively bounded to 1 << 47 as that is enough to cover the current usable\n     /// address space on 64-bit ARMv8 and x86_64.\n     pub fn obj_size_bound(&self) -> u64 {\n-        match self.sess().target.target.target_word_size.index(&FullRange) {\n+        match self.sess().target.target.target_pointer_width.index(&FullRange) {\n             \"32\" => 1 << 31,\n             \"64\" => 1 << 47,\n             _ => unreachable!() // error handled by config::build_target_config"}, {"sha": "2e236154d48db88c1a488ec1c7473a7426f080fe", "filename": "src/librustc_trans/trans/type_.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Flibrustc_trans%2Ftrans%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Flibrustc_trans%2Ftrans%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftype_.rs?ref=dd3e89aaf25c667fa8207f8800c4b60d70d76c1b", "patch": "@@ -103,7 +103,7 @@ impl Type {\n     }\n \n     pub fn int(ccx: &CrateContext) -> Type {\n-        match ccx.tcx().sess.target.target.target_word_size.index(&FullRange) {\n+        match ccx.tcx().sess.target.target.target_pointer_width.index(&FullRange) {\n             \"32\" => Type::i32(ccx),\n             \"64\" => Type::i64(ccx),\n             tws => panic!(\"Unsupported target word size for int: {}\", tws),"}, {"sha": "9e87c90d2e57a4fab1c838c6998f607cbdf29c5c", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=dd3e89aaf25c667fa8207f8800c4b60d70d76c1b", "patch": "@@ -3481,7 +3481,7 @@ mod tests {\n         }\n     }\n     #[test]\n-    #[cfg_attr(target_word_size = \"32\", ignore)] // FIXME(#14064)\n+    #[cfg_attr(target_pointer_width = \"32\", ignore)] // FIXME(#14064)\n     fn test_streaming_parser() {\n         assert_stream_equal(\n             r#\"{ \"foo\":\"bar\", \"array\" : [0, 1, 2, 3, 4, 5], \"idents\":[null,true,false]}\"#,\n@@ -3520,7 +3520,7 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_word_size = \"32\", ignore)] // FIXME(#14064)\n+    #[cfg_attr(target_pointer_width = \"32\", ignore)] // FIXME(#14064)\n     fn test_read_object_streaming() {\n         assert_eq!(last_event(\"{ \"),      Error(SyntaxError(EOFWhileParsingObject, 1, 3)));\n         assert_eq!(last_event(\"{1\"),      Error(SyntaxError(KeyMustBeAString,      1, 2)));\n@@ -3604,7 +3604,7 @@ mod tests {\n         );\n     }\n     #[test]\n-    #[cfg_attr(target_word_size = \"32\", ignore)] // FIXME(#14064)\n+    #[cfg_attr(target_pointer_width = \"32\", ignore)] // FIXME(#14064)\n     fn test_read_array_streaming() {\n         assert_stream_equal(\n             \"[]\","}, {"sha": "9c6911cf4d14a83b3cdb2957fdc4170ebae854e8", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 28, "deletions": 14, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=dd3e89aaf25c667fa8207f8800c4b60d70d76c1b", "patch": "@@ -424,12 +424,14 @@ mod tests {\n         assert_eq!(int::MIN.to_u32(),  None);\n         assert_eq!(int::MIN.to_u64(),  None);\n \n-        #[cfg(target_word_size = \"32\")]\n+        #[cfg(any(all(stage0, target_word_size = \"32\"),\n+                  all(not(stage0), target_pointer_width = \"32\")))]\n         fn check_word_size() {\n             assert_eq!(int::MIN.to_i32(), Some(int::MIN as i32));\n         }\n \n-        #[cfg(target_word_size = \"64\")]\n+        #[cfg(any(all(stage0, target_word_size = \"64\"),\n+                  all(not(stage0), target_pointer_width = \"64\")))]\n         fn check_word_size() {\n             assert_eq!(int::MIN.to_i32(), None);\n         }\n@@ -492,12 +494,14 @@ mod tests {\n         assert_eq!(i64::MIN.to_u32(),  None);\n         assert_eq!(i64::MIN.to_u64(),  None);\n \n-        #[cfg(target_word_size = \"32\")]\n+        #[cfg(any(all(stage0, target_word_size = \"32\"),\n+                  all(not(stage0), target_pointer_width = \"32\")))]\n         fn check_word_size() {\n             assert_eq!(i64::MIN.to_int(), None);\n         }\n \n-        #[cfg(target_word_size = \"64\")]\n+        #[cfg(any(all(stage0, target_word_size = \"64\"),\n+                  all(not(stage0), target_pointer_width = \"64\")))]\n         fn check_word_size() {\n             assert_eq!(i64::MIN.to_int(), Some(i64::MIN as int));\n         }\n@@ -517,13 +521,15 @@ mod tests {\n         // int::MAX.to_u32() is word-size specific\n         assert_eq!(int::MAX.to_u64(),  Some(int::MAX as u64));\n \n-        #[cfg(target_word_size = \"32\")]\n+        #[cfg(any(all(stage0, target_word_size = \"32\"),\n+                  all(not(stage0), target_pointer_width = \"32\")))]\n         fn check_word_size() {\n             assert_eq!(int::MAX.to_i32(), Some(int::MAX as i32));\n             assert_eq!(int::MAX.to_u32(), Some(int::MAX as u32));\n         }\n \n-        #[cfg(target_word_size = \"64\")]\n+        #[cfg(any(all(stage0, target_word_size = \"64\"),\n+                  all(not(stage0), target_pointer_width = \"64\")))]\n         fn check_word_size() {\n             assert_eq!(int::MAX.to_i32(), None);\n             assert_eq!(int::MAX.to_u32(), None);\n@@ -587,13 +593,15 @@ mod tests {\n         assert_eq!(i64::MAX.to_u32(),  None);\n         assert_eq!(i64::MAX.to_u64(),  Some(i64::MAX as u64));\n \n-        #[cfg(target_word_size = \"32\")]\n+        #[cfg(any(all(stage0, target_word_size = \"32\"),\n+                  all(not(stage0), target_pointer_width = \"32\")))]\n         fn check_word_size() {\n             assert_eq!(i64::MAX.to_int(),  None);\n             assert_eq!(i64::MAX.to_uint(), None);\n         }\n \n-        #[cfg(target_word_size = \"64\")]\n+        #[cfg(any(all(stage0, target_word_size = \"64\"),\n+                  all(not(stage0), target_pointer_width = \"64\")))]\n         fn check_word_size() {\n             assert_eq!(i64::MAX.to_int(),  Some(i64::MAX as int));\n             assert_eq!(i64::MAX.to_uint(), Some(i64::MAX as uint));\n@@ -684,13 +692,15 @@ mod tests {\n         // uint::MAX.to_u32() is word-size specific\n         assert_eq!(uint::MAX.to_u64(),  Some(uint::MAX as u64));\n \n-        #[cfg(target_word_size = \"32\")]\n+        #[cfg(any(all(stage0, target_word_size = \"32\"),\n+                  all(not(stage0), target_pointer_width = \"32\")))]\n         fn check_word_size() {\n             assert_eq!(uint::MAX.to_u32(), Some(uint::MAX as u32));\n             assert_eq!(uint::MAX.to_i64(), Some(uint::MAX as i64));\n         }\n \n-        #[cfg(target_word_size = \"64\")]\n+        #[cfg(any(all(stage0, target_word_size = \"64\"),\n+                  all(not(stage0), target_pointer_width = \"64\")))]\n         fn check_word_size() {\n             assert_eq!(uint::MAX.to_u32(), None);\n             assert_eq!(uint::MAX.to_i64(), None);\n@@ -740,12 +750,14 @@ mod tests {\n         assert_eq!(u32::MAX.to_u32(),  Some(u32::MAX as u32));\n         assert_eq!(u32::MAX.to_u64(),  Some(u32::MAX as u64));\n \n-        #[cfg(target_word_size = \"32\")]\n+        #[cfg(any(all(stage0, target_word_size = \"32\"),\n+                  all(not(stage0), target_pointer_width = \"32\")))]\n         fn check_word_size() {\n             assert_eq!(u32::MAX.to_int(),  None);\n         }\n \n-        #[cfg(target_word_size = \"64\")]\n+        #[cfg(any(all(stage0, target_word_size = \"64\"),\n+                  all(not(stage0), target_pointer_width = \"64\")))]\n         fn check_word_size() {\n             assert_eq!(u32::MAX.to_int(),  Some(u32::MAX as int));\n         }\n@@ -766,12 +778,14 @@ mod tests {\n         assert_eq!(u64::MAX.to_u32(),  None);\n         assert_eq!(u64::MAX.to_u64(),  Some(u64::MAX as u64));\n \n-        #[cfg(target_word_size = \"32\")]\n+        #[cfg(any(all(stage0, target_word_size = \"32\"),\n+                  all(not(stage0), target_pointer_width = \"32\")))]\n         fn check_word_size() {\n             assert_eq!(u64::MAX.to_uint(), None);\n         }\n \n-        #[cfg(target_word_size = \"64\")]\n+        #[cfg(any(all(stage0, target_word_size = \"64\"),\n+                  all(not(stage0), target_pointer_width = \"64\")))]\n         fn check_word_size() {\n             assert_eq!(u64::MAX.to_uint(), Some(u64::MAX as uint));\n         }"}, {"sha": "91e3b4a06875e4c55930d624d2f6efe9c01b66de", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=dd3e89aaf25c667fa8207f8800c4b60d70d76c1b", "patch": "@@ -230,9 +230,9 @@ use rc::Rc;\n use result::Result::{Ok, Err};\n use vec::Vec;\n \n-#[cfg(not(target_word_size=\"64\"))]\n+#[cfg(any(all(stage0, target_word_size = \"32\"), all(not(stage0), target_pointer_width = \"32\")))]\n use core_rand::IsaacRng as IsaacWordRng;\n-#[cfg(target_word_size=\"64\")]\n+#[cfg(any(all(stage0, target_word_size = \"64\"), all(not(stage0), target_pointer_width = \"64\")))]\n use core_rand::Isaac64Rng as IsaacWordRng;\n \n pub use core_rand::{Rand, Rng, SeedableRng, Open01, Closed01};"}, {"sha": "f6161ec193d52c27b233e230919b2d821af1e567", "filename": "src/libstd/sys/common/backtrace.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Flibstd%2Fsys%2Fcommon%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Flibstd%2Fsys%2Fcommon%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fbacktrace.rs?ref=dd3e89aaf25c667fa8207f8800c4b60d70d76c1b", "patch": "@@ -12,8 +12,11 @@ use prelude::v1::*;\n \n use io::IoResult;\n \n-#[cfg(target_word_size = \"64\")] pub const HEX_WIDTH: uint = 18;\n-#[cfg(target_word_size = \"32\")] pub const HEX_WIDTH: uint = 10;\n+#[cfg(any(all(stage0, target_word_size = \"64\"), all(not(stage0), target_pointer_width = \"64\")))]\n+pub const HEX_WIDTH: uint = 18;\n+\n+#[cfg(any(all(stage0, target_word_size = \"32\"), all(not(stage0), target_pointer_width = \"32\")))]\n+pub const HEX_WIDTH: uint = 10;\n \n // All rust symbols are in theory lists of \"::\"-separated identifiers. Some\n // assemblers, however, can't handle these characters in symbol names. To get"}, {"sha": "1d523ed6eddace4426c7c710070d4d58892a18c9", "filename": "src/libstd/sys/unix/c.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Flibstd%2Fsys%2Funix%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Flibstd%2Fsys%2Funix%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fc.rs?ref=dd3e89aaf25c667fa8207f8800c4b60d70d76c1b", "patch": "@@ -169,13 +169,13 @@ mod signal {\n     unsafe impl ::marker::Sync for sigaction { }\n \n     #[repr(C)]\n-    #[cfg(target_word_size = \"32\")]\n+    #[cfg(any(all(stage0, target_word_size = \"32\"), all(not(stage0), target_pointer_width = \"32\")))]\n     pub struct sigset_t {\n         __val: [libc::c_ulong; 32],\n     }\n \n     #[repr(C)]\n-    #[cfg(target_word_size = \"64\")]\n+    #[cfg(any(all(stage0, target_word_size = \"64\"), all(not(stage0), target_pointer_width = \"64\")))]\n     pub struct sigset_t {\n         __val: [libc::c_ulong; 16],\n     }"}, {"sha": "48a51813ba4ab5a44f3b55f8ca77444322eda640", "filename": "src/libstd/sys/unix/stack_overflow.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs?ref=dd3e89aaf25c667fa8207f8800c4b60d70d76c1b", "patch": "@@ -182,12 +182,14 @@ mod imp {\n             sa_restorer: *mut libc::c_void,\n         }\n \n-        #[cfg(target_word_size = \"32\")]\n+        #[cfg(any(all(stage0, target_word_size = \"32\"),\n+                  all(not(stage0), target_pointer_width = \"32\")))]\n         #[repr(C)]\n         pub struct sigset_t {\n             __val: [libc::c_ulong; 32],\n         }\n-        #[cfg(target_word_size = \"64\")]\n+        #[cfg(any(all(stage0, target_word_size = \"64\"),\n+                  all(not(stage0), target_pointer_width = \"64\")))]\n         #[repr(C)]\n         pub struct sigset_t {\n             __val: [libc::c_ulong; 16],"}, {"sha": "aef1fa85e0d940980acda7a6afb53b2c2734f45a", "filename": "src/test/compile-fail/huge-enum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Ftest%2Fcompile-fail%2Fhuge-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Ftest%2Fcompile-fail%2Fhuge-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fhuge-enum.rs?ref=dd3e89aaf25c667fa8207f8800c4b60d70d76c1b", "patch": "@@ -12,12 +12,12 @@\n \n // FIXME: work properly with higher limits\n \n-#[cfg(target_word_size = \"32\")]\n+#[cfg(any(all(stage0, target_word_size = \"32\"), all(not(stage0), target_pointer_width = \"32\")))]\n fn main() {\n     let big: Option<[u32; (1<<29)-1]> = None;\n }\n \n-#[cfg(target_word_size = \"64\")]\n+#[cfg(any(all(stage0, target_word_size = \"64\"), all(not(stage0), target_pointer_width = \"64\")))]\n fn main() {\n     let big: Option<[u32; (1<<45)-1]> = None;\n }"}, {"sha": "7ae8dfef9bc28222bba5fb3b2bb3c124c5c386c5", "filename": "src/test/compile-fail/issue-17913.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Ftest%2Fcompile-fail%2Fissue-17913.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Ftest%2Fcompile-fail%2Fissue-17913.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17913.rs?ref=dd3e89aaf25c667fa8207f8800c4b60d70d76c1b", "patch": "@@ -10,14 +10,14 @@\n \n // error-pattern: too big for the current architecture\n \n-#[cfg(target_word_size = \"64\")]\n+#[cfg(any(all(stage0, target_word_size = \"64\"), all(not(stage0), target_pointer_width = \"64\")))]\n fn main() {\n     let n = 0u;\n     let a = box [&n; 0xF000000000000000u];\n     println!(\"{}\", a[0xFFFFFFu]);\n }\n \n-#[cfg(target_word_size = \"32\")]\n+#[cfg(any(all(stage0, target_word_size = \"32\"), all(not(stage0), target_pointer_width = \"32\")))]\n fn main() {\n     let n = 0u;\n     let a = box [&n; 0xFFFFFFFFu];"}, {"sha": "e1b0c1153657e3d79736a9f7dc66de868dfaad5f", "filename": "src/test/run-pass/huge-largest-array.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Ftest%2Frun-pass%2Fhuge-largest-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Ftest%2Frun-pass%2Fhuge-largest-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhuge-largest-array.rs?ref=dd3e89aaf25c667fa8207f8800c4b60d70d76c1b", "patch": "@@ -10,12 +10,12 @@\n \n use std::mem::size_of;\n \n-#[cfg(target_word_size = \"32\")]\n+#[cfg(any(all(stage0, target_word_size = \"32\"), all(not(stage0), target_pointer_width = \"32\")))]\n pub fn main() {\n     assert_eq!(size_of::<[u8; (1 << 31) - 1]>(), (1 << 31) - 1);\n }\n \n-#[cfg(target_word_size = \"64\")]\n+#[cfg(any(all(stage0, target_word_size = \"64\"), all(not(stage0), target_pointer_width = \"64\")))]\n pub fn main() {\n     assert_eq!(size_of::<[u8; (1 << 47) - 1]>(), (1 << 47) - 1);\n }"}, {"sha": "101999bbe088aab11ed8c50f2537fbaa4db9e88e", "filename": "src/test/run-pass/vec-fixed-length.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Ftest%2Frun-pass%2Fvec-fixed-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3e89aaf25c667fa8207f8800c4b60d70d76c1b/src%2Ftest%2Frun-pass%2Fvec-fixed-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-fixed-length.rs?ref=dd3e89aaf25c667fa8207f8800c4b60d70d76c1b", "patch": "@@ -21,7 +21,7 @@ pub fn main() {\n \n     // FIXME #10183\n     // FIXME #18069\n-    //if cfg!(target_word_size = \"64\") {\n+    //if cfg!(target_pointer_width = \"64\") {\n     //    assert_eq!(size_of::<[u8; (1 << 32)]>(), (1u << 32));\n     //}\n }"}]}