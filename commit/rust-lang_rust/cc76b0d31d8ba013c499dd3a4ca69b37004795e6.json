{"sha": "cc76b0d31d8ba013c499dd3a4ca69b37004795e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjNzZiMGQzMWQ4YmEwMTNjNDk5ZGQzYTRjYTY5YjM3MDA0Nzk1ZTY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-16T11:29:34Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-16T11:29:34Z"}, "message": "Update readme", "tree": {"sha": "d83c46b8774ceee93467e1da942d511b7be4b390", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d83c46b8774ceee93467e1da942d511b7be4b390"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc76b0d31d8ba013c499dd3a4ca69b37004795e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc76b0d31d8ba013c499dd3a4ca69b37004795e6", "html_url": "https://github.com/rust-lang/rust/commit/cc76b0d31d8ba013c499dd3a4ca69b37004795e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc76b0d31d8ba013c499dd3a4ca69b37004795e6/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5021411a84822cb3f1e3aeffad9550dd15bdeb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5021411a84822cb3f1e3aeffad9550dd15bdeb6", "html_url": "https://github.com/rust-lang/rust/commit/b5021411a84822cb3f1e3aeffad9550dd15bdeb6"}], "stats": {"total": 54, "additions": 47, "deletions": 7}, "files": [{"sha": "41fc8bbba4813de5a10d6fb492a7fa30d8fa3388", "filename": "README.md", "status": "modified", "additions": 47, "deletions": 7, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/cc76b0d31d8ba013c499dd3a4ca69b37004795e6/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/cc76b0d31d8ba013c499dd3a4ca69b37004795e6/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=cc76b0d31d8ba013c499dd3a4ca69b37004795e6", "patch": "@@ -1,13 +1,18 @@\n-# libsyntax2.0\n+# Rust Analyzer\n \n-[![Build Status](https://travis-ci.org/matklad/libsyntax2.svg?branch=master)](https://travis-ci.org/matklad/libsyntax2)\n-[![Build status](https://ci.appveyor.com/api/projects/status/j56x1hbje8rdg6xk/branch/master?svg=true)](https://ci.appveyor.com/project/matklad/libsyntax2/branch/master)\n+[![Build Status](https://travis-ci.org/matklad/rust-analyzer.svg?branch=master)](https://travis-ci.org/matklad/rust-analyzer)\n+[![Build status](https://ci.appveyor.com/api/projects/status/j56x1hbje8rdg6xk/branch/master?svg=true)](https://ci.appveyor.com/project/matklad/rust-analyzer/branch/master)\n \n \n-libsyntax2.0 is an **experimental** parser of the Rust language,\n-intended for the use in IDEs.\n-[RFC](https://github.com/rust-lang/rfcs/pull/2256).\n+Rust Analyzer is an **experimental** modular compiler frontend for the\n+Rust language, which aims to lay a foundation for excellent IDE\n+support.\n \n+It doesn't implement much of compiler functionality yet, but the\n+white-space preserving Rust parser works, and there are significant\n+chunks of overall architecture (indexing, on-demand & lazy\n+computation, snapshotable world view) in place. Some basic IDE\n+functionality is provided via a language server.\n \n ## Quick Start\n \n@@ -16,7 +21,6 @@ $ cargo test\n $ cargo parse < crates/libsyntax2/src/lib.rs\n ```\n \n-\n ## Trying It Out\n \n This installs experimental VS Code plugin\n@@ -61,6 +65,42 @@ doesn't hurt too much :-)\n \n * **Go to definition** (\"correct\" for `mod foo;` decls, index-based for functions).\n \n+## Current Status and Plans\n+\n+Rust analyzer aims to fill the same niche as the official [Rust\n+Language Server](https://github.com/rust-lang-nursery/rls), but\n+better. It was created because @matklad is not satisfied with RLS\n+original starting point and current direction. More details can be\n+found [in this\n+thread](https://internals.rust-lang.org/t/2019-strategy-for-rustc-and-the-rls/8361).\n+The core issue is that RLS works in the \"wait until user stops typing,\n+run the build process, save the results of the analysis\" mode, which\n+arguably is the wrong foundation for IDE (see the thread for details).\n+\n+Rust Analyzer is a hobby project at the moment, there's exactly zero\n+guarantees that it becomes production-ready one day.\n+\n+The near/mid term plan is to work independently of the main rustc\n+compiler and implement at least simplistic versions of name\n+resolution, macro expansion and type inference. The purpose is two\n+fold:\n+\n+* to quickly bootstrap usable and useful language server: solution\n+  that covers 80% of Rust code will be useful for IDEs, and will be\n+  vastly simpler than 100% solution.\n+  \n+* to understand how the consumer-side of compiler API should look like\n+  (especially it's on-demand aspects). If you have\n+  `get_expression_type` function, you can write a ton of purely-IDE\n+  features on top of it, even if the function is only partially\n+  correct. Plugin in the precise function afterwards should just make\n+  IDE features more reliable.\n+  \n+The long term plan is to merge with the mainline rustc compiler,\n+probably around the HIR boundary? That is, use rust analyzer for\n+parsing, macro expansion and related bits of name resolution, but\n+leave the rest (including type inference and trait selection) to the\n+existing rustc.\n \n ## Code Walk-Through\n "}]}