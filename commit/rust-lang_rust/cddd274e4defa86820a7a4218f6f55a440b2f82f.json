{"sha": "cddd274e4defa86820a7a4218f6f55a440b2f82f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkZGQyNzRlNGRlZmE4NjgyMGE3YTQyMThmNmY1NWE0NDBiMmY4MmY=", "commit": {"author": {"name": "Tom Lee", "email": "github@tomlee.co", "date": "2013-05-25T03:18:20Z"}, "committer": {"name": "Tom Lee", "email": "github@tomlee.co", "date": "2013-05-28T00:13:01Z"}, "message": "Add _RUST_STAGE0 #ifdefs", "tree": {"sha": "a0e5087ddbfffba07d71eeff1a2f943d5f62d2cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0e5087ddbfffba07d71eeff1a2f943d5f62d2cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cddd274e4defa86820a7a4218f6f55a440b2f82f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cddd274e4defa86820a7a4218f6f55a440b2f82f", "html_url": "https://github.com/rust-lang/rust/commit/cddd274e4defa86820a7a4218f6f55a440b2f82f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cddd274e4defa86820a7a4218f6f55a440b2f82f/comments", "author": {"login": "thomaslee", "id": 93216, "node_id": "MDQ6VXNlcjkzMjE2", "avatar_url": "https://avatars.githubusercontent.com/u/93216?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomaslee", "html_url": "https://github.com/thomaslee", "followers_url": "https://api.github.com/users/thomaslee/followers", "following_url": "https://api.github.com/users/thomaslee/following{/other_user}", "gists_url": "https://api.github.com/users/thomaslee/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomaslee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomaslee/subscriptions", "organizations_url": "https://api.github.com/users/thomaslee/orgs", "repos_url": "https://api.github.com/users/thomaslee/repos", "events_url": "https://api.github.com/users/thomaslee/events{/privacy}", "received_events_url": "https://api.github.com/users/thomaslee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thomaslee", "id": 93216, "node_id": "MDQ6VXNlcjkzMjE2", "avatar_url": "https://avatars.githubusercontent.com/u/93216?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomaslee", "html_url": "https://github.com/thomaslee", "followers_url": "https://api.github.com/users/thomaslee/followers", "following_url": "https://api.github.com/users/thomaslee/following{/other_user}", "gists_url": "https://api.github.com/users/thomaslee/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomaslee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomaslee/subscriptions", "organizations_url": "https://api.github.com/users/thomaslee/orgs", "repos_url": "https://api.github.com/users/thomaslee/repos", "events_url": "https://api.github.com/users/thomaslee/events{/privacy}", "received_events_url": "https://api.github.com/users/thomaslee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67283eaad2f53e19ae963e2b0a04b65826568336", "url": "https://api.github.com/repos/rust-lang/rust/commits/67283eaad2f53e19ae963e2b0a04b65826568336", "html_url": "https://github.com/rust-lang/rust/commit/67283eaad2f53e19ae963e2b0a04b65826568336"}], "stats": {"total": 20, "additions": 20, "deletions": 0}, "files": [{"sha": "cf7c07770570c8b021467a0cd3f6753d4be2d59e", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cddd274e4defa86820a7a4218f6f55a440b2f82f/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/cddd274e4defa86820a7a4218f6f55a440b2f82f/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=cddd274e4defa86820a7a4218f6f55a440b2f82f", "patch": "@@ -754,7 +754,11 @@ class raw_thread: public rust_thread {\n \n     virtual void run() {\n         record_sp_limit(0);\n+#ifdef _RUST_STAGE0\n+        fn.f(NULL, fn.env, NULL);\n+#else\n         fn.f(fn.env, NULL);\n+#endif\n     }\n };\n "}, {"sha": "b5ecb1661755ae78248b673fba0aaf9010e556ad", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cddd274e4defa86820a7a4218f6f55a440b2f82f/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/cddd274e4defa86820a7a4218f6f55a440b2f82f/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=cddd274e4defa86820a7a4218f6f55a440b2f82f", "patch": "@@ -162,7 +162,11 @@ void task_start_wrapper(spawn_args *a)\n \n     bool threw_exception = false;\n     try {\n+#ifdef _RUST_STAGE0\n+        a->f(NULL, a->envptr, a->argptr);\n+#else\n         a->f(a->envptr, a->argptr);\n+#endif\n     } catch (rust_task *ex) {\n         assert(ex == task && \"Expected this task to be thrown for unwinding\");\n         threw_exception = true;\n@@ -183,7 +187,11 @@ void task_start_wrapper(spawn_args *a)\n     if(env) {\n         // free the environment (which should be a unique closure).\n         const type_desc *td = env->td;\n+#ifdef _RUST_STAGE0\n+        td->drop_glue(NULL, NULL, NULL, box_body(env));\n+#else\n         td->drop_glue(NULL, NULL, box_body(env));\n+#endif\n         task->kernel->region()->free(env);\n     }\n "}, {"sha": "b50c08379de7f6cf3d197e8a5bd25eea1fc9ebbf", "filename": "src/rt/rust_type.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cddd274e4defa86820a7a4218f6f55a440b2f82f/src%2Frt%2Frust_type.h", "raw_url": "https://github.com/rust-lang/rust/raw/cddd274e4defa86820a7a4218f6f55a440b2f82f/src%2Frt%2Frust_type.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_type.h?ref=cddd274e4defa86820a7a4218f6f55a440b2f82f", "patch": "@@ -21,11 +21,19 @@ struct rust_opaque_box;\n // - the main function: has a NULL environment, but uses the void* arg\n // - unique closures of type fn~(): have a non-NULL environment, but\n //   no arguments (and hence the final void*) is harmless\n+#ifdef _RUST_STAGE0\n+typedef void (*CDECL spawn_fn)(void *, rust_opaque_box*, void *);\n+#else\n typedef void (*CDECL spawn_fn)(rust_opaque_box*, void *);\n+#endif\n \n struct type_desc;\n \n+#ifdef _RUST_STAGE0\n+typedef void CDECL (glue_fn)(void *, void *, const type_desc **, void *);\n+#else\n typedef void CDECL (glue_fn)(void *, const type_desc **, void *);\n+#endif\n \n // Corresponds to the boxed data in the @ region.  The body follows the\n // header; you can obtain a ptr via box_body() below."}]}