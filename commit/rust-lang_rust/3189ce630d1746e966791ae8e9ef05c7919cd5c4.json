{"sha": "3189ce630d1746e966791ae8e9ef05c7919cd5c4", "node_id": "C_kwDOAAsO6NoAKDMxODljZTYzMGQxNzQ2ZTk2Njc5MWFlOGU5ZWYwNWM3OTE5Y2Q1YzQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-06-10T09:20:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-06-10T09:20:09Z"}, "message": "Rollup merge of #112369 - nnethercote:more-cgu-cleanups, r=wesleywiser\n\nMore CGU cleanups\n\nAn assortment of improvements.\n\nr? `@wesleywiser`", "tree": {"sha": "54eacc28018b947e416abfaad06bfd3d77b2b130", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54eacc28018b947e416abfaad06bfd3d77b2b130"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3189ce630d1746e966791ae8e9ef05c7919cd5c4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkhEBJCRBK7hj4Ov3rIwAAahMIAKDO4aPPWhfIEFEV24gRz7Wz\ndNSXlwnC9eLKbDKu+vogqRWR6Rh0rwmFWMUPk1x2xOOl7L+i6WCiHtVp/AkQWeNY\njrN06kSXvUc6/82PxzzMFuu9y2vXsYcRQ0bTjpq3by+pdhMWE+oK+3NZhrU4QfK5\nRy6DZh4WdDoyfwTTJeYDJJp91RyYXz2gFzlfVweB0xQY4SVb/+ZlS2SFEgdARpfe\nU7ehwjCKd9Y6O1kuXL+aMzLmPX1RuuuCYjE1ddgskx5CceAH/fBkmqq5S4Y7tj2E\nc2T/NSt+6cph4/Tt6I8Pd9QyGgViCaPrUWUev5kgHCEoIBof8XbEH1h7PLDdwt4=\n=0m9h\n-----END PGP SIGNATURE-----\n", "payload": "tree 54eacc28018b947e416abfaad06bfd3d77b2b130\nparent 2baebad0635c061b5820ab560ccccc8f57958408\nparent 853345635be1c51f180174d0ed66bb85aacc2570\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1686388809 +0200\ncommitter GitHub <noreply@github.com> 1686388809 +0200\n\nRollup merge of #112369 - nnethercote:more-cgu-cleanups, r=wesleywiser\n\nMore CGU cleanups\n\nAn assortment of improvements.\n\nr? `@wesleywiser`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3189ce630d1746e966791ae8e9ef05c7919cd5c4", "html_url": "https://github.com/rust-lang/rust/commit/3189ce630d1746e966791ae8e9ef05c7919cd5c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3189ce630d1746e966791ae8e9ef05c7919cd5c4/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2baebad0635c061b5820ab560ccccc8f57958408", "url": "https://api.github.com/repos/rust-lang/rust/commits/2baebad0635c061b5820ab560ccccc8f57958408", "html_url": "https://github.com/rust-lang/rust/commit/2baebad0635c061b5820ab560ccccc8f57958408"}, {"sha": "853345635be1c51f180174d0ed66bb85aacc2570", "url": "https://api.github.com/repos/rust-lang/rust/commits/853345635be1c51f180174d0ed66bb85aacc2570", "html_url": "https://github.com/rust-lang/rust/commit/853345635be1c51f180174d0ed66bb85aacc2570"}], "stats": {"total": 169, "additions": 68, "deletions": 101}, "files": [{"sha": "1d9c8ded349c0924895c2864364a0d2b9be3fa59", "filename": "compiler/rustc_monomorphize/src/partitioning.rs", "status": "modified", "additions": 68, "deletions": 101, "changes": 169, "blob_url": "https://github.com/rust-lang/rust/blob/3189ce630d1746e966791ae8e9ef05c7919cd5c4/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3189ce630d1746e966791ae8e9ef05c7919cd5c4/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning.rs?ref=3189ce630d1746e966791ae8e9ef05c7919cd5c4", "patch": "@@ -129,14 +129,13 @@ struct PlacedRootMonoItems<'tcx> {\n     /// The codegen units, sorted by name to make things deterministic.\n     codegen_units: Vec<CodegenUnit<'tcx>>,\n \n-    roots: FxHashSet<MonoItem<'tcx>>,\n     internalization_candidates: FxHashSet<MonoItem<'tcx>>,\n }\n \n // The output CGUs are sorted by name.\n fn partition<'tcx, I>(\n     tcx: TyCtxt<'tcx>,\n-    mono_items: &mut I,\n+    mono_items: I,\n     max_cgu_count: usize,\n     usage_map: &UsageMap<'tcx>,\n ) -> Vec<CodegenUnit<'tcx>>\n@@ -150,7 +149,7 @@ where\n     // In the first step, we place all regular monomorphizations into their\n     // respective 'home' codegen unit. Regular monomorphizations are all\n     // functions and statics defined in the local crate.\n-    let PlacedRootMonoItems { mut codegen_units, roots, internalization_candidates } = {\n+    let PlacedRootMonoItems { mut codegen_units, internalization_candidates } = {\n         let _prof_timer = tcx.prof.generic_activity(\"cgu_partitioning_place_roots\");\n         place_root_mono_items(cx, mono_items)\n     };\n@@ -174,9 +173,9 @@ where\n     // monomorphizations have to go into each codegen unit. These additional\n     // monomorphizations can be drop-glue, functions from external crates, and\n     // local functions the definition of which is marked with `#[inline]`.\n-    let mono_item_placements = {\n+    {\n         let _prof_timer = tcx.prof.generic_activity(\"cgu_partitioning_place_inline_items\");\n-        place_inlined_mono_items(cx, &mut codegen_units, roots)\n+        place_inlined_mono_items(cx, &mut codegen_units)\n     };\n \n     for cgu in &mut codegen_units {\n@@ -189,12 +188,7 @@ where\n     // more freedom to optimize.\n     if !tcx.sess.link_dead_code() {\n         let _prof_timer = tcx.prof.generic_activity(\"cgu_partitioning_internalize_symbols\");\n-        internalize_symbols(\n-            cx,\n-            &mut codegen_units,\n-            mono_item_placements,\n-            internalization_candidates,\n-        );\n+        internalize_symbols(cx, &mut codegen_units, internalization_candidates);\n     }\n \n     let instrument_dead_code =\n@@ -239,12 +233,11 @@ where\n \n fn place_root_mono_items<'tcx, I>(\n     cx: &PartitioningCx<'_, 'tcx>,\n-    mono_items: &mut I,\n+    mono_items: I,\n ) -> PlacedRootMonoItems<'tcx>\n where\n     I: Iterator<Item = MonoItem<'tcx>>,\n {\n-    let mut roots = FxHashSet::default();\n     let mut codegen_units = FxHashMap::default();\n     let is_incremental_build = cx.tcx.sess.opts.incremental.is_some();\n     let mut internalization_candidates = FxHashSet::default();\n@@ -295,7 +288,6 @@ where\n         }\n \n         codegen_unit.items_mut().insert(mono_item, (linkage, visibility));\n-        roots.insert(mono_item);\n     }\n \n     // Always ensure we have at least one CGU; otherwise, if we have a\n@@ -308,7 +300,7 @@ where\n     let mut codegen_units: Vec<_> = codegen_units.into_values().collect();\n     codegen_units.sort_by(|a, b| a.name().as_str().cmp(b.name().as_str()));\n \n-    PlacedRootMonoItems { codegen_units, roots, internalization_candidates }\n+    PlacedRootMonoItems { codegen_units, internalization_candidates }\n }\n \n // This function requires the CGUs to be sorted by name on input, and ensures\n@@ -404,67 +396,28 @@ fn merge_codegen_units<'tcx>(\n     codegen_units.sort_by(|a, b| a.name().as_str().cmp(b.name().as_str()));\n }\n \n-/// For symbol internalization, we need to know whether a symbol/mono-item is\n-/// used from outside the codegen unit it is defined in. This type is used\n-/// to keep track of that.\n-#[derive(Clone, PartialEq, Eq, Debug)]\n-enum MonoItemPlacement {\n-    SingleCgu { cgu_name: Symbol },\n-    MultipleCgus,\n-}\n-\n fn place_inlined_mono_items<'tcx>(\n     cx: &PartitioningCx<'_, 'tcx>,\n     codegen_units: &mut [CodegenUnit<'tcx>],\n-    roots: FxHashSet<MonoItem<'tcx>>,\n-) -> FxHashMap<MonoItem<'tcx>, MonoItemPlacement> {\n-    let mut mono_item_placements = FxHashMap::default();\n-\n-    let single_codegen_unit = codegen_units.len() == 1;\n-\n+) {\n     for cgu in codegen_units.iter_mut() {\n-        // Collect all items that need to be available in this codegen unit.\n-        let mut reachable = FxHashSet::default();\n+        // Collect all inlined items that need to be available in this codegen unit.\n+        let mut reachable_inlined_items = FxHashSet::default();\n         for root in cgu.items().keys() {\n-            // Insert the root item itself, plus all inlined items that are\n-            // reachable from it without going via another root item.\n-            reachable.insert(*root);\n-            get_reachable_inlined_items(cx.tcx, *root, cx.usage_map, &mut reachable);\n+            // Get all inlined items that are reachable from it without going\n+            // via another root item.\n+            get_reachable_inlined_items(cx.tcx, *root, cx.usage_map, &mut reachable_inlined_items);\n         }\n \n         // Add all monomorphizations that are not already there.\n-        for mono_item in reachable {\n-            if !cgu.items().contains_key(&mono_item) {\n-                if roots.contains(&mono_item) {\n-                    bug!(\"GloballyShared mono-item inlined into other CGU: {:?}\", mono_item);\n-                }\n-\n-                // This is a CGU-private copy.\n-                cgu.items_mut().insert(mono_item, (Linkage::Internal, Visibility::Default));\n-            }\n+        for inlined_item in reachable_inlined_items {\n+            assert!(!cgu.items().contains_key(&inlined_item));\n \n-            if !single_codegen_unit {\n-                // If there is more than one codegen unit, we need to keep track\n-                // in which codegen units each monomorphization is placed.\n-                match mono_item_placements.entry(mono_item) {\n-                    Entry::Occupied(e) => {\n-                        let placement = e.into_mut();\n-                        debug_assert!(match *placement {\n-                            MonoItemPlacement::SingleCgu { cgu_name } => cgu_name != cgu.name(),\n-                            MonoItemPlacement::MultipleCgus => true,\n-                        });\n-                        *placement = MonoItemPlacement::MultipleCgus;\n-                    }\n-                    Entry::Vacant(e) => {\n-                        e.insert(MonoItemPlacement::SingleCgu { cgu_name: cgu.name() });\n-                    }\n-                }\n-            }\n+            // This is a CGU-private copy.\n+            cgu.items_mut().insert(inlined_item, (Linkage::Internal, Visibility::Default));\n         }\n     }\n \n-    return mono_item_placements;\n-\n     fn get_reachable_inlined_items<'tcx>(\n         tcx: TyCtxt<'tcx>,\n         item: MonoItem<'tcx>,\n@@ -483,20 +436,40 @@ fn place_inlined_mono_items<'tcx>(\n fn internalize_symbols<'tcx>(\n     cx: &PartitioningCx<'_, 'tcx>,\n     codegen_units: &mut [CodegenUnit<'tcx>],\n-    mono_item_placements: FxHashMap<MonoItem<'tcx>, MonoItemPlacement>,\n     internalization_candidates: FxHashSet<MonoItem<'tcx>>,\n ) {\n-    if codegen_units.len() == 1 {\n-        // Fast path for when there is only one codegen unit. In this case we\n-        // can internalize all candidates, since there is nowhere else they\n-        // could be used from.\n-        for cgu in codegen_units {\n-            for candidate in &internalization_candidates {\n-                cgu.items_mut().insert(*candidate, (Linkage::Internal, Visibility::Default));\n+    /// For symbol internalization, we need to know whether a symbol/mono-item\n+    /// is used from outside the codegen unit it is defined in. This type is\n+    /// used to keep track of that.\n+    #[derive(Clone, PartialEq, Eq, Debug)]\n+    enum MonoItemPlacement {\n+        SingleCgu { cgu_name: Symbol },\n+        MultipleCgus,\n+    }\n+\n+    let mut mono_item_placements = FxHashMap::default();\n+    let single_codegen_unit = codegen_units.len() == 1;\n+\n+    if !single_codegen_unit {\n+        for cgu in codegen_units.iter_mut() {\n+            for item in cgu.items().keys() {\n+                // If there is more than one codegen unit, we need to keep track\n+                // in which codegen units each monomorphization is placed.\n+                match mono_item_placements.entry(*item) {\n+                    Entry::Occupied(e) => {\n+                        let placement = e.into_mut();\n+                        debug_assert!(match *placement {\n+                            MonoItemPlacement::SingleCgu { cgu_name } => cgu_name != cgu.name(),\n+                            MonoItemPlacement::MultipleCgus => true,\n+                        });\n+                        *placement = MonoItemPlacement::MultipleCgus;\n+                    }\n+                    Entry::Vacant(e) => {\n+                        e.insert(MonoItemPlacement::SingleCgu { cgu_name: cgu.name() });\n+                    }\n+                }\n             }\n         }\n-\n-        return;\n     }\n \n     // For each internalization candidates in each codegen unit, check if it is\n@@ -509,21 +482,24 @@ fn internalize_symbols<'tcx>(\n                 // This item is no candidate for internalizing, so skip it.\n                 continue;\n             }\n-            debug_assert_eq!(mono_item_placements[item], home_cgu);\n-\n-            if let Some(user_items) = cx.usage_map.get_user_items(*item) {\n-                if user_items\n-                    .iter()\n-                    .filter_map(|user_item| {\n-                        // Some user mono items might not have been\n-                        // instantiated. We can safely ignore those.\n-                        mono_item_placements.get(user_item)\n-                    })\n-                    .any(|placement| *placement != home_cgu)\n-                {\n-                    // Found a user from another CGU, so skip to the next item\n-                    // without marking this one as internal.\n-                    continue;\n+\n+            if !single_codegen_unit {\n+                debug_assert_eq!(mono_item_placements[item], home_cgu);\n+\n+                if let Some(user_items) = cx.usage_map.get_user_items(*item) {\n+                    if user_items\n+                        .iter()\n+                        .filter_map(|user_item| {\n+                            // Some user mono items might not have been\n+                            // instantiated. We can safely ignore those.\n+                            mono_item_placements.get(user_item)\n+                        })\n+                        .any(|placement| *placement != home_cgu)\n+                    {\n+                        // Found a user from another CGU, so skip to the next item\n+                        // without marking this one as internal.\n+                        continue;\n+                    }\n                 }\n             }\n \n@@ -864,15 +840,10 @@ fn debug_dump<'a, 'tcx: 'a>(tcx: TyCtxt<'tcx>, label: &str, cgus: &[CodegenUnit<\n                 cgu.size_estimate()\n             );\n \n-            // The order of `cgu.items()` is non-deterministic; sort it by name\n-            // to give deterministic output.\n-            let mut items: Vec<_> = cgu.items().iter().collect();\n-            items.sort_by_key(|(item, _)| item.symbol_name(tcx).name);\n-            for (item, linkage) in items {\n+            for (item, linkage) in cgu.items_in_deterministic_order(tcx) {\n                 let symbol_name = item.symbol_name(tcx).name;\n                 let symbol_hash_start = symbol_name.rfind('h');\n                 let symbol_hash = symbol_hash_start.map_or(\"<no hash>\", |i| &symbol_name[i..]);\n-\n                 let size = item.size_estimate(tcx);\n                 let _ = with_no_trimmed_paths!(writeln!(\n                     s,\n@@ -951,12 +922,8 @@ fn collect_and_partition_mono_items(tcx: TyCtxt<'_>, (): ()) -> (&DefIdSet, &[Co\n     let (codegen_units, _) = tcx.sess.time(\"partition_and_assert_distinct_symbols\", || {\n         sync::join(\n             || {\n-                let mut codegen_units = partition(\n-                    tcx,\n-                    &mut items.iter().copied(),\n-                    tcx.sess.codegen_units(),\n-                    &usage_map,\n-                );\n+                let mut codegen_units =\n+                    partition(tcx, items.iter().copied(), tcx.sess.codegen_units(), &usage_map);\n                 codegen_units[0].make_primary();\n                 &*tcx.arena.alloc_from_iter(codegen_units)\n             },"}]}