{"sha": "1174cda4f1d3aff6d2a34e7300d5ea12769de0f5", "node_id": "C_kwDOAAsO6NoAKDExNzRjZGE0ZjFkM2FmZjZkMmEzNGU3MzAwZDVlYTEyNzY5ZGUwZjU", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-18T12:05:46Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-18T12:05:46Z"}, "message": "remove ret param from foreign_item hierarchy", "tree": {"sha": "3e41a5bb748bc6b88e31147c912d393741fa9f41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e41a5bb748bc6b88e31147c912d393741fa9f41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1174cda4f1d3aff6d2a34e7300d5ea12769de0f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1174cda4f1d3aff6d2a34e7300d5ea12769de0f5", "html_url": "https://github.com/rust-lang/rust/commit/1174cda4f1d3aff6d2a34e7300d5ea12769de0f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1174cda4f1d3aff6d2a34e7300d5ea12769de0f5/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53ead1b8c960a63a9422725d54d405c65756a1bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/53ead1b8c960a63a9422725d54d405c65756a1bb", "html_url": "https://github.com/rust-lang/rust/commit/53ead1b8c960a63a9422725d54d405c65756a1bb"}], "stats": {"total": 25, "additions": 7, "deletions": 18}, "files": [{"sha": "8d82c912f3803081fddaa8028590ab4f81624771", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1174cda4f1d3aff6d2a34e7300d5ea12769de0f5/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1174cda4f1d3aff6d2a34e7300d5ea12769de0f5/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=1174cda4f1d3aff6d2a34e7300d5ea12769de0f5", "patch": "@@ -297,8 +297,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             Some(p) => p,\n         };\n \n-        // Second: functions that return.\n-        match this.emulate_foreign_item_by_name(link_name, abi, args, dest, ret)? {\n+        // Second: functions that return immediately.\n+        match this.emulate_foreign_item_by_name(link_name, abi, args, dest)? {\n             EmulateByNameResult::NeedsJumping => {\n                 trace!(\"{:?}\", this.dump_place(**dest));\n                 this.go_to_block(ret);\n@@ -355,7 +355,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         abi: Abi,\n         args: &[OpTy<'tcx, Tag>],\n         dest: &PlaceTy<'tcx, Tag>,\n-        ret: mir::BasicBlock,\n     ) -> InterpResult<'tcx, EmulateByNameResult<'mir, 'tcx>> {\n         let this = self.eval_context_mut();\n \n@@ -702,8 +701,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // Platform-specific shims\n             _ => match this.tcx.sess.target.os.as_ref() {\n-                target if target_os_is_unix(target) => return shims::unix::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, abi, args, dest, ret),\n-                \"windows\" => return shims::windows::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, abi, args, dest, ret),\n+                target if target_os_is_unix(target) => return shims::unix::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, abi, args, dest),\n+                \"windows\" => return shims::windows::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, abi, args, dest),\n                 target => throw_unsup_format!(\"the target `{}` is not supported\", target),\n             }\n         };"}, {"sha": "cf34b4baec7f73a23183b520192ec52eb1dd792a", "filename": "src/shims/unix/foreign_items.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1174cda4f1d3aff6d2a34e7300d5ea12769de0f5/src%2Fshims%2Funix%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1174cda4f1d3aff6d2a34e7300d5ea12769de0f5/src%2Fshims%2Funix%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Fforeign_items.rs?ref=1174cda4f1d3aff6d2a34e7300d5ea12769de0f5", "patch": "@@ -2,7 +2,6 @@ use std::ffi::OsStr;\n \n use log::trace;\n \n-use rustc_middle::mir;\n use rustc_middle::ty::layout::LayoutOf;\n use rustc_span::Symbol;\n use rustc_target::abi::{Align, Size};\n@@ -22,7 +21,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         abi: Abi,\n         args: &[OpTy<'tcx, Tag>],\n         dest: &PlaceTy<'tcx, Tag>,\n-        ret: mir::BasicBlock,\n     ) -> InterpResult<'tcx, EmulateByNameResult<'mir, 'tcx>> {\n         let this = self.eval_context_mut();\n \n@@ -533,9 +531,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // Platform-specific shims\n             _ => {\n                 match this.tcx.sess.target.os.as_ref() {\n-                    \"linux\" => return shims::unix::linux::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, abi, args, dest, ret),\n-                    \"macos\" => return shims::unix::macos::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, abi, args, dest, ret),\n-                    \"freebsd\" => return shims::unix::freebsd::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, abi, args, dest, ret),\n+                    \"linux\" => return shims::unix::linux::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, abi, args, dest),\n+                    \"macos\" => return shims::unix::macos::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, abi, args, dest),\n+                    \"freebsd\" => return shims::unix::freebsd::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, abi, args, dest),\n                     _ => unreachable!(),\n                 }\n             }"}, {"sha": "2350e5a12c11d8e1c47a20848c5d0e0ce6324088", "filename": "src/shims/unix/freebsd/foreign_items.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1174cda4f1d3aff6d2a34e7300d5ea12769de0f5/src%2Fshims%2Funix%2Ffreebsd%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1174cda4f1d3aff6d2a34e7300d5ea12769de0f5/src%2Fshims%2Funix%2Ffreebsd%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Ffreebsd%2Fforeign_items.rs?ref=1174cda4f1d3aff6d2a34e7300d5ea12769de0f5", "patch": "@@ -1,4 +1,3 @@\n-use rustc_middle::mir;\n use rustc_span::Symbol;\n use rustc_target::spec::abi::Abi;\n \n@@ -14,7 +13,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         abi: Abi,\n         args: &[OpTy<'tcx, Tag>],\n         dest: &PlaceTy<'tcx, Tag>,\n-        _ret: mir::BasicBlock,\n     ) -> InterpResult<'tcx, EmulateByNameResult<'mir, 'tcx>> {\n         let this = self.eval_context_mut();\n         match link_name.as_str() {"}, {"sha": "efd4e2a8c03d3d1bb0a7ab19f86df77b3b5a73e8", "filename": "src/shims/unix/linux/foreign_items.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1174cda4f1d3aff6d2a34e7300d5ea12769de0f5/src%2Fshims%2Funix%2Flinux%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1174cda4f1d3aff6d2a34e7300d5ea12769de0f5/src%2Fshims%2Funix%2Flinux%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Flinux%2Fforeign_items.rs?ref=1174cda4f1d3aff6d2a34e7300d5ea12769de0f5", "patch": "@@ -1,4 +1,3 @@\n-use rustc_middle::mir;\n use rustc_span::Symbol;\n use rustc_target::spec::abi::Abi;\n \n@@ -17,7 +16,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         abi: Abi,\n         args: &[OpTy<'tcx, Tag>],\n         dest: &PlaceTy<'tcx, Tag>,\n-        _ret: mir::BasicBlock,\n     ) -> InterpResult<'tcx, EmulateByNameResult<'mir, 'tcx>> {\n         let this = self.eval_context_mut();\n "}, {"sha": "58dd40cda301d521b7c3c1a6eb7ee84b8cc38456", "filename": "src/shims/unix/macos/foreign_items.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1174cda4f1d3aff6d2a34e7300d5ea12769de0f5/src%2Fshims%2Funix%2Fmacos%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1174cda4f1d3aff6d2a34e7300d5ea12769de0f5/src%2Fshims%2Funix%2Fmacos%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Fmacos%2Fforeign_items.rs?ref=1174cda4f1d3aff6d2a34e7300d5ea12769de0f5", "patch": "@@ -1,4 +1,3 @@\n-use rustc_middle::mir;\n use rustc_span::Symbol;\n use rustc_target::spec::abi::Abi;\n \n@@ -15,7 +14,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         abi: Abi,\n         args: &[OpTy<'tcx, Tag>],\n         dest: &PlaceTy<'tcx, Tag>,\n-        _ret: mir::BasicBlock,\n     ) -> InterpResult<'tcx, EmulateByNameResult<'mir, 'tcx>> {\n         let this = self.eval_context_mut();\n "}, {"sha": "65634342417beac915446fd59d96005a92c4d158", "filename": "src/shims/windows/foreign_items.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1174cda4f1d3aff6d2a34e7300d5ea12769de0f5/src%2Fshims%2Fwindows%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1174cda4f1d3aff6d2a34e7300d5ea12769de0f5/src%2Fshims%2Fwindows%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fwindows%2Fforeign_items.rs?ref=1174cda4f1d3aff6d2a34e7300d5ea12769de0f5", "patch": "@@ -1,6 +1,5 @@\n use std::iter;\n \n-use rustc_middle::mir;\n use rustc_span::Symbol;\n use rustc_target::abi::Size;\n use rustc_target::spec::abi::Abi;\n@@ -18,7 +17,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         abi: Abi,\n         args: &[OpTy<'tcx, Tag>],\n         dest: &PlaceTy<'tcx, Tag>,\n-        _ret: mir::BasicBlock,\n     ) -> InterpResult<'tcx, EmulateByNameResult<'mir, 'tcx>> {\n         let this = self.eval_context_mut();\n "}]}