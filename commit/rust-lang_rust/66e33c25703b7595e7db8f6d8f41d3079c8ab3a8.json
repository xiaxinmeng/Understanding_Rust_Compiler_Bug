{"sha": "66e33c25703b7595e7db8f6d8f41d3079c8ab3a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2ZTMzYzI1NzAzYjc1OTVlN2RiOGY2ZDhmNDFkMzA3OWM4YWIzYTg=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-04-06T10:18:42Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-04-06T10:18:42Z"}, "message": "Rustup to rustc 1.35.0-nightly (acd8dd6a5 2019-04-05)", "tree": {"sha": "59cf048f9db293f0dd7e447d2709d5dc5452efb5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59cf048f9db293f0dd7e447d2709d5dc5452efb5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66e33c25703b7595e7db8f6d8f41d3079c8ab3a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66e33c25703b7595e7db8f6d8f41d3079c8ab3a8", "html_url": "https://github.com/rust-lang/rust/commit/66e33c25703b7595e7db8f6d8f41d3079c8ab3a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66e33c25703b7595e7db8f6d8f41d3079c8ab3a8/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8eee61fe6989af62a9ed3b804b617d4b12febbc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/8eee61fe6989af62a9ed3b804b617d4b12febbc6", "html_url": "https://github.com/rust-lang/rust/commit/8eee61fe6989af62a9ed3b804b617d4b12febbc6"}], "stats": {"total": 99, "additions": 99, "deletions": 0}, "files": [{"sha": "277d44ebfa4f1c9e6525abb457eb34db2ef7c15e", "filename": "patches/0015-Remove-usage-of-unsized-locals.patch", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/66e33c25703b7595e7db8f6d8f41d3079c8ab3a8/patches%2F0015-Remove-usage-of-unsized-locals.patch", "raw_url": "https://github.com/rust-lang/rust/raw/66e33c25703b7595e7db8f6d8f41d3079c8ab3a8/patches%2F0015-Remove-usage-of-unsized-locals.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0015-Remove-usage-of-unsized-locals.patch?ref=66e33c25703b7595e7db8f6d8f41d3079c8ab3a8", "patch": "@@ -0,0 +1,99 @@\n+From 7403e2998345ef0650fd50628d7098d4d1e88e5c Mon Sep 17 00:00:00 2001\n+From: bjorn3 <bjorn3@users.noreply.github.com>\n+Date: Sat, 6 Apr 2019 12:16:21 +0200\n+Subject: [PATCH] Remove usage of unsized locals\n+\n+---\n+ src/liballoc/boxed.rs                | 23 -----------------------\n+ src/libstd/sys_common/at_exit_imp.rs |  2 ++\n+ src/libstd/sys_common/mod.rs         |  1 -\n+ src/libstd/sys_common/thread.rs      |  7 +------\n+ 4 files changed, 3 insertions(+), 30 deletions(-)\n+\n+diff --git a/src/liballoc/boxed.rs b/src/liballoc/boxed.rs\n+index f6dee7c..0c6a8c0 100644\n+--- a/src/liballoc/boxed.rs\n++++ b/src/liballoc/boxed.rs\n+@@ -694,29 +694,6 @@ impl<I: ExactSizeIterator + ?Sized> ExactSizeIterator for Box<I> {\n+ #[stable(feature = \"fused\", since = \"1.26.0\")]\n+ impl<I: FusedIterator + ?Sized> FusedIterator for Box<I> {}\n+ \n+-#[stable(feature = \"boxed_closure_impls\", since = \"1.35.0\")]\n+-impl<A, F: FnOnce<A> + ?Sized> FnOnce<A> for Box<F> {\n+-    type Output = <F as FnOnce<A>>::Output;\n+-\n+-    extern \"rust-call\" fn call_once(self, args: A) -> Self::Output {\n+-        <F as FnOnce<A>>::call_once(*self, args)\n+-    }\n+-}\n+-\n+-#[stable(feature = \"boxed_closure_impls\", since = \"1.35.0\")]\n+-impl<A, F: FnMut<A> + ?Sized> FnMut<A> for Box<F> {\n+-    extern \"rust-call\" fn call_mut(&mut self, args: A) -> Self::Output {\n+-        <F as FnMut<A>>::call_mut(self, args)\n+-    }\n+-}\n+-\n+-#[stable(feature = \"boxed_closure_impls\", since = \"1.35.0\")]\n+-impl<A, F: Fn<A> + ?Sized> Fn<A> for Box<F> {\n+-    extern \"rust-call\" fn call(&self, args: A) -> Self::Output {\n+-        <F as Fn<A>>::call(self, args)\n+-    }\n+-}\n+-\n+ /// `FnBox` is a version of the `FnOnce` intended for use with boxed\n+ /// closure objects. The idea is that where one would normally store a\n+ /// `Box<dyn FnOnce()>` in a data structure, you should use\n+diff --git a/src/libstd/sys_common/at_exit_imp.rs b/src/libstd/sys_common/at_exit_imp.rs\n+index 1181b86..20f9251 100644\n+--- a/src/libstd/sys_common/at_exit_imp.rs\n++++ b/src/libstd/sys_common/at_exit_imp.rs\n+@@ -38,6 +38,7 @@ unsafe fn init() -> bool {\n+     true\n+ }\n+ \n++/*\n+ pub fn cleanup() {\n+     for i in 1..=ITERS {\n+         unsafe {\n+@@ -60,6 +61,7 @@ pub fn cleanup() {\n+         }\n+     }\n+ }\n++*/\n+ \n+ pub fn push(f: Box<dyn FnBox()>) -> bool {\n+     unsafe {\n+diff --git a/src/libstd/sys_common/mod.rs b/src/libstd/sys_common/mod.rs\n+index 6260c3b..611ed7e 100644\n+--- a/src/libstd/sys_common/mod.rs\n++++ b/src/libstd/sys_common/mod.rs\n+@@ -127,7 +127,6 @@ pub fn cleanup() {\n+     CLEANUP.call_once(|| unsafe {\n+         sys::args::cleanup();\n+         sys::stack_overflow::cleanup();\n+-        at_exit_imp::cleanup();\n+     });\n+ }\n+ \n+diff --git a/src/libstd/sys_common/thread.rs b/src/libstd/sys_common/thread.rs\n+index b2142e7..718bb1c 100644\n+--- a/src/libstd/sys_common/thread.rs\n++++ b/src/libstd/sys_common/thread.rs\n+@@ -6,12 +6,7 @@ use crate::sys::thread as imp;\n+ \n+ #[allow(dead_code)]\n+ pub unsafe fn start_thread(main: *mut u8) {\n+-    // Next, set up our stack overflow handler which may get triggered if we run\n+-    // out of stack.\n+-    let _handler = stack_overflow::Handler::new();\n+-\n+-    // Finally, let's run some code.\n+-    Box::from_raw(main as *mut Box<dyn FnBox()>)()\n++    panic!(\"Threads are not yet supported, because cranelift doesn't support atomics.\");\n+ }\n+ \n+ pub fn min_stack() -> usize {\n+-- \n+2.20.1 (Apple Git-117)\n+"}]}