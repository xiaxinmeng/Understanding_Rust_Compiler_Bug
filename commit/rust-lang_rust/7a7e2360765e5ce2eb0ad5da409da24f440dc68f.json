{"sha": "7a7e2360765e5ce2eb0ad5da409da24f440dc68f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhN2UyMzYwNzY1ZTVjZTJlYjBhZDVkYTQwOWRhMjRmNDQwZGM2OGY=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-05-23T04:15:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-05-23T04:15:42Z"}, "message": "Rollup merge of #42122 - rust-lang:frewsxcv/unstable-book, r=steveklabnik\n\nAdd a few entries to the Unstable Book.", "tree": {"sha": "5b5ce1cbeab505f1f0a2bb4ee0e53a814b418ab0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b5ce1cbeab505f1f0a2bb4ee0e53a814b418ab0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a7e2360765e5ce2eb0ad5da409da24f440dc68f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a7e2360765e5ce2eb0ad5da409da24f440dc68f", "html_url": "https://github.com/rust-lang/rust/commit/7a7e2360765e5ce2eb0ad5da409da24f440dc68f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a7e2360765e5ce2eb0ad5da409da24f440dc68f/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e38d5d5039c0d46f4021a176c00501c7c27379fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/e38d5d5039c0d46f4021a176c00501c7c27379fb", "html_url": "https://github.com/rust-lang/rust/commit/e38d5d5039c0d46f4021a176c00501c7c27379fb"}, {"sha": "2d3438d35f8db4de0326f56232169b0bdbd6051c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d3438d35f8db4de0326f56232169b0bdbd6051c", "html_url": "https://github.com/rust-lang/rust/commit/2d3438d35f8db4de0326f56232169b0bdbd6051c"}], "stats": {"total": 80, "additions": 80, "deletions": 0}, "files": [{"sha": "60741a74400d2e50007610ab1ed27b291d56ee0a", "filename": "src/doc/unstable-book/src/language-features/attr-literals.md", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7a7e2360765e5ce2eb0ad5da409da24f440dc68f/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fattr-literals.md", "raw_url": "https://github.com/rust-lang/rust/raw/7a7e2360765e5ce2eb0ad5da409da24f440dc68f/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fattr-literals.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fattr-literals.md?ref=7a7e2360765e5ce2eb0ad5da409da24f440dc68f", "patch": "@@ -6,5 +6,25 @@ The tracking issue for this feature is: [#34981]\n \n ------------------------\n \n+At present, literals are only accepted as the value of a key-value pair in\n+attributes. What's more, only _string_ literals are accepted. This means that\n+literals can only appear in forms of `#[attr(name = \"value\")]` or\n+`#[attr = \"value\"]`.\n \n+The `attr_literals` unstable feature allows other types of literals to be used\n+in attributes. Here are some examples of attributes that can now be used with\n+this feature enabled:\n+\n++```rust,ignore\n++#[attr]\n++#[attr(true)]\n++#[attr(ident)]\n++#[attr(ident, 100, true, \"true\", ident = 100, ident = \"hello\", ident(100))]\n++#[attr(100)]\n++#[attr(enabled = true)]\n++#[enabled(true)]\n++#[attr(\"hello\")]\n++#[repr(C, align = 4)]\n++#[repr(C, align(4))]\n++```\n "}, {"sha": "fbd213dca569949fc8b9e38c20f3a2de10f2778e", "filename": "src/doc/unstable-book/src/language-features/catch-expr.md", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7a7e2360765e5ce2eb0ad5da409da24f440dc68f/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcatch-expr.md", "raw_url": "https://github.com/rust-lang/rust/raw/7a7e2360765e5ce2eb0ad5da409da24f440dc68f/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcatch-expr.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcatch-expr.md?ref=7a7e2360765e5ce2eb0ad5da409da24f440dc68f", "patch": "@@ -5,3 +5,26 @@ The tracking issue for this feature is: [#31436]\n [#31436]: https://github.com/rust-lang/rust/issues/31436\n \n ------------------------\n+\n+The `catch_expr` feature adds support for a `catch` expression. The `catch`\n+expression creates a new scope one can use the `?` operator in.\n+\n+```rust\n+#![feature(catch_expr)]\n+\n+use std::num::ParseIntError;\n+\n+let result: Result<i32, ParseIntError> = do catch {\n+    Ok(\"1\".parse::<i32>()?\n+        + \"2\".parse::<i32>()?\n+        + \"3\".parse::<i32>()?)\n+};\n+assert_eq!(result, Ok(6));\n+\n+let result: Result<i32, ParseIntError> = do catch {\n+    Ok(\"1\".parse::<i32>()?\n+        + \"foo\".parse::<i32>()?\n+        + \"3\".parse::<i32>()?)\n+};\n+assert!(result.is_err());\n+```"}, {"sha": "9eea3fccbbc17e39ad591fb72f94893f0027d5f5", "filename": "src/doc/unstable-book/src/language-features/on-unimplemented.md", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/7a7e2360765e5ce2eb0ad5da409da24f440dc68f/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fon-unimplemented.md", "raw_url": "https://github.com/rust-lang/rust/raw/7a7e2360765e5ce2eb0ad5da409da24f440dc68f/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fon-unimplemented.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fon-unimplemented.md?ref=7a7e2360765e5ce2eb0ad5da409da24f440dc68f", "patch": "@@ -6,5 +6,42 @@ The tracking issue for this feature is: [#29628]\n \n ------------------------\n \n+The `on_unimplemented` feature provides the `#[rustc_on_unimplemented]`\n+attribute, which allows trait definitions to add specialized notes to error\n+messages when an implementation was expected but not found.\n \n+For example:\n+\n+```rust,compile_fail\n+#![feature(on_unimplemented)]\n+\n+#[rustc_on_unimplemented=\"a collection of type `{Self}` cannot be built from an \\\n+                          iterator over elements of type `{A}`\"]\n+trait MyIterator<A> {\n+    fn next(&mut self) -> A;\n+}\n+\n+fn iterate_chars<I: MyIterator<char>>(i: I) {\n+    // ...\n+}\n+\n+fn main() {\n+    iterate_chars(&[1, 2, 3][..]);\n+}\n+```\n+\n+When the user compiles this, they will see the following;\n+\n+```txt\n+error[E0277]: the trait bound `&[{integer}]: MyIterator<char>` is not satisfied\n+  --> <anon>:14:5\n+   |\n+14 |     iterate_chars(&[1, 2, 3][..]);\n+   |     ^^^^^^^^^^^^^ the trait `MyIterator<char>` is not implemented for `&[{integer}]`\n+   |\n+   = note: a collection of type `&[{integer}]` cannot be built from an iterator over elements of type `char`\n+   = note: required by `iterate_chars`\n+\n+error: aborting due to previous error\n+```\n "}]}