{"sha": "e2617a98c0683561d31a9d19f98b9ba792f7161e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyNjE3YTk4YzA2ODM1NjFkMzFhOWQxOWY5OGI5YmE3OTJmNzE2MWU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-08T19:54:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-08T19:54:31Z"}, "message": "Rollup merge of #69734 - tmiasko:di-enumerator, r=ecstatic-morse\n\nChange DIBuilderCreateEnumerator signature to match LLVM 9\n\n* Change DIBuilderCreateEnumerator signature to match LLVM 9 C API.\n* Use provided is unsigned flag when emitting enumerators.", "tree": {"sha": "643f712bfc90076508fe2a78a435ff1d81487772", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/643f712bfc90076508fe2a78a435ff1d81487772"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2617a98c0683561d31a9d19f98b9ba792f7161e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeZU14CRBK7hj4Ov3rIwAAdHIIAFUaK+NNnUnX6plgNIpS0CxN\nAPRb7XLRWTcw43RUmIb6+Z63x4NdByLkMG2iJTPsf5JbA3pDbR6KDBNByBPXLMx4\nVWGLxt4ngxbWGBiVHzVgrm1TOumZx000cycOLQOLll+X9d7bCn69/Q2PA6n8e7fs\nPNmlM1+26vvtBHPz2hDlemXiDT6OJG3+NKzAzWbAGT5zrbyt1n0RJlQOa6KfhLMi\nPb8SJFEIA43IxP4gwJIXT9lxMG/HSsystFNyYcfJTiTvxiAYV0WBjjVrzHqufg+R\nfjWH9lZHYYfmu2WflDU6enRLVX3XvJ718/vEDO4YcAPK1bu0bb1uxICEmy2x13s=\n=e3ej\n-----END PGP SIGNATURE-----\n", "payload": "tree 643f712bfc90076508fe2a78a435ff1d81487772\nparent 5e9888eec5f5e5d41be0d6ccd0b55bbd536f44e9\nparent 30650f867bb0a94b3378942487e78f3eb7eb868f\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1583697271 +0100\ncommitter GitHub <noreply@github.com> 1583697271 +0100\n\nRollup merge of #69734 - tmiasko:di-enumerator, r=ecstatic-morse\n\nChange DIBuilderCreateEnumerator signature to match LLVM 9\n\n* Change DIBuilderCreateEnumerator signature to match LLVM 9 C API.\n* Use provided is unsigned flag when emitting enumerators.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2617a98c0683561d31a9d19f98b9ba792f7161e", "html_url": "https://github.com/rust-lang/rust/commit/e2617a98c0683561d31a9d19f98b9ba792f7161e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2617a98c0683561d31a9d19f98b9ba792f7161e/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e9888eec5f5e5d41be0d6ccd0b55bbd536f44e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e9888eec5f5e5d41be0d6ccd0b55bbd536f44e9", "html_url": "https://github.com/rust-lang/rust/commit/5e9888eec5f5e5d41be0d6ccd0b55bbd536f44e9"}, {"sha": "30650f867bb0a94b3378942487e78f3eb7eb868f", "url": "https://api.github.com/repos/rust-lang/rust/commits/30650f867bb0a94b3378942487e78f3eb7eb868f", "html_url": "https://github.com/rust-lang/rust/commit/30650f867bb0a94b3378942487e78f3eb7eb868f"}], "stats": {"total": 62, "additions": 50, "deletions": 12}, "files": [{"sha": "19bd0b6f7e674f9b280c19ea984a55382810af33", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e2617a98c0683561d31a9d19f98b9ba792f7161e/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2617a98c0683561d31a9d19f98b9ba792f7161e/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=e2617a98c0683561d31a9d19f98b9ba792f7161e", "patch": "@@ -1779,13 +1779,20 @@ fn prepare_enum_metadata(\n                 .discriminants(cx.tcx)\n                 .zip(&def.variants)\n                 .map(|((_, discr), v)| {\n-                    let name = SmallCStr::new(&v.ident.as_str());\n+                    let name = v.ident.as_str();\n+                    let is_unsigned = match discr.ty.kind {\n+                        ty::Int(_) => false,\n+                        ty::Uint(_) => true,\n+                        _ => bug!(\"non integer discriminant\"),\n+                    };\n                     unsafe {\n                         Some(llvm::LLVMRustDIBuilderCreateEnumerator(\n                             DIB(cx),\n-                            name.as_ptr(),\n+                            name.as_ptr().cast(),\n+                            name.len(),\n                             // FIXME: what if enumeration has i128 discriminant?\n-                            discr.val as u64,\n+                            discr.val as i64,\n+                            is_unsigned,\n                         ))\n                     }\n                 })\n@@ -1794,13 +1801,15 @@ fn prepare_enum_metadata(\n                 .as_generator()\n                 .variant_range(enum_def_id, cx.tcx)\n                 .map(|variant_index| {\n-                    let name = SmallCStr::new(&substs.as_generator().variant_name(variant_index));\n+                    let name = substs.as_generator().variant_name(variant_index);\n                     unsafe {\n                         Some(llvm::LLVMRustDIBuilderCreateEnumerator(\n                             DIB(cx),\n-                            name.as_ptr(),\n-                            // FIXME: what if enumeration has i128 discriminant?\n-                            variant_index.as_usize() as u64,\n+                            name.as_ptr().cast(),\n+                            name.len(),\n+                            // Generators use u32 as discriminant type.\n+                            variant_index.as_u32().into(),\n+                            true, // IsUnsigned\n                         ))\n                     }\n                 })"}, {"sha": "8b796e0423b1325463d9b43cc629e569bb528115", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2617a98c0683561d31a9d19f98b9ba792f7161e/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2617a98c0683561d31a9d19f98b9ba792f7161e/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=e2617a98c0683561d31a9d19f98b9ba792f7161e", "patch": "@@ -1776,7 +1776,9 @@ extern \"C\" {\n     pub fn LLVMRustDIBuilderCreateEnumerator(\n         Builder: &DIBuilder<'a>,\n         Name: *const c_char,\n-        Val: u64,\n+        NameLen: size_t,\n+        Value: i64,\n+        IsUnsigned: bool,\n     ) -> &'a DIEnumerator;\n \n     pub fn LLVMRustDIBuilderCreateEnumerationType("}, {"sha": "0e430d3881e60dc277ac3e64ba72cf37bd886dc4", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e2617a98c0683561d31a9d19f98b9ba792f7161e/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/e2617a98c0683561d31a9d19f98b9ba792f7161e/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=e2617a98c0683561d31a9d19f98b9ba792f7161e", "patch": "@@ -891,10 +891,10 @@ extern \"C\" LLVMValueRef LLVMRustDIBuilderInsertDeclareAtEnd(\n       unwrap(InsertAtEnd)));\n }\n \n-extern \"C\" LLVMMetadataRef\n-LLVMRustDIBuilderCreateEnumerator(LLVMRustDIBuilderRef Builder,\n-                                  const char *Name, uint64_t Val) {\n-  return wrap(Builder->createEnumerator(Name, Val));\n+extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateEnumerator(\n+    LLVMRustDIBuilderRef Builder, const char *Name, size_t NameLen,\n+    int64_t Value, bool IsUnsigned) {\n+  return wrap(Builder->createEnumerator({Name, NameLen}, Value, IsUnsigned));\n }\n \n extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateEnumerationType("}, {"sha": "f9da987765f9cd58c60fe86a6171304aa8453738", "filename": "src/test/codegen/enum-discriminant-value.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e2617a98c0683561d31a9d19f98b9ba792f7161e/src%2Ftest%2Fcodegen%2Fenum-discriminant-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2617a98c0683561d31a9d19f98b9ba792f7161e/src%2Ftest%2Fcodegen%2Fenum-discriminant-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fenum-discriminant-value.rs?ref=e2617a98c0683561d31a9d19f98b9ba792f7161e", "patch": "@@ -0,0 +1,27 @@\n+// Verify that DIEnumerator uses isUnsigned flag when appropriate.\n+//\n+// compile-flags: -g -C no-prepopulate-passes\n+\n+#[repr(i64)]\n+pub enum I64 {\n+    I64Min = std::i64::MIN,\n+    I64Max = std::i64::MAX,\n+}\n+\n+#[repr(u64)]\n+pub enum U64 {\n+    U64Min = std::u64::MIN,\n+    U64Max = std::u64::MAX,\n+}\n+\n+fn main() {\n+    let _a = I64::I64Min;\n+    let _b = I64::I64Max;\n+    let _c = U64::U64Min;\n+    let _d = U64::U64Max;\n+}\n+\n+// CHECK: !DIEnumerator(name: \"I64Min\", value: -9223372036854775808)\n+// CHECK: !DIEnumerator(name: \"I64Max\", value: 9223372036854775807)\n+// CHECK: !DIEnumerator(name: \"U64Min\", value: 0, isUnsigned: true)\n+// CHECK: !DIEnumerator(name: \"U64Max\", value: 18446744073709551615, isUnsigned: true)"}]}