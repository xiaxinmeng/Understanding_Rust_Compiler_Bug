{"sha": "958df4b0031654c6e9b03997e956a21ede289660", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1OGRmNGIwMDMxNjU0YzZlOWIwMzk5N2U5NTZhMjFlZGUyODk2NjA=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-08-14T23:25:42Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-08-14T23:36:04Z"}, "message": "De-mode comm, libc, priv, rt, sync, arc. Super easy.", "tree": {"sha": "f649f259ca6caab360ce6d8cd6586b48055ab2a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f649f259ca6caab360ce6d8cd6586b48055ab2a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/958df4b0031654c6e9b03997e956a21ede289660", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/958df4b0031654c6e9b03997e956a21ede289660", "html_url": "https://github.com/rust-lang/rust/commit/958df4b0031654c6e9b03997e956a21ede289660", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/958df4b0031654c6e9b03997e956a21ede289660/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4377802202d59eb5aeb36bb6b656d376bbdf67dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/4377802202d59eb5aeb36bb6b656d376bbdf67dc", "html_url": "https://github.com/rust-lang/rust/commit/4377802202d59eb5aeb36bb6b656d376bbdf67dc"}], "stats": {"total": 25, "additions": 22, "deletions": 3}, "files": [{"sha": "38bdc4075477f59a19cff5f26a4f61f3ae1d6353", "filename": "src/libcore/comm.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/958df4b0031654c6e9b03997e956a21ede289660/src%2Flibcore%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958df4b0031654c6e9b03997e956a21ede289660/src%2Flibcore%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcomm.rs?ref=958df4b0031654c6e9b03997e956a21ede289660", "patch": "@@ -1,3 +1,6 @@\n+// NB: transitionary, de-mode-ing.\n+#[forbid(deprecated_mode)];\n+#[forbid(deprecated_pattern)];\n /*!\n  * Communication between tasks\n  *\n@@ -162,7 +165,7 @@ fn chan<T: send>(p: port<T>) -> chan<T> {\n  * Sends data over a channel. The sent data is moved into the channel,\n  * whereupon the caller loses access to it.\n  */\n-fn send<T: send>(ch: chan<T>, -data: T) {\n+fn send<T: send>(ch: chan<T>, +data: T) {\n     let chan_t(p) = ch;\n     let data_ptr = ptr::addr_of(data) as *();\n     let res = rustrt::rust_port_id_send(p, data_ptr);"}, {"sha": "fc87d64e786c49b0031083cf1d75c1f8482fb53b", "filename": "src/libcore/libc.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/958df4b0031654c6e9b03997e956a21ede289660/src%2Flibcore%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958df4b0031654c6e9b03997e956a21ede289660/src%2Flibcore%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flibc.rs?ref=958df4b0031654c6e9b03997e956a21ede289660", "patch": "@@ -1,3 +1,6 @@\n+// NB: transitionary, de-mode-ing.\n+#[forbid(deprecated_mode)];\n+#[forbid(deprecated_pattern)];\n /*!\n  * Bindings for libc.\n  *"}, {"sha": "01a7936ca26a5bc0fc67d349cf89ae010e79662f", "filename": "src/libcore/priv.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/958df4b0031654c6e9b03997e956a21ede289660/src%2Flibcore%2Fpriv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958df4b0031654c6e9b03997e956a21ede289660/src%2Flibcore%2Fpriv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpriv.rs?ref=958df4b0031654c6e9b03997e956a21ede289660", "patch": "@@ -1,3 +1,7 @@\n+// NB: transitionary, de-mode-ing.\n+#[forbid(deprecated_mode)];\n+#[forbid(deprecated_pattern)];\n+\n #[doc(hidden)];\n \n export chan_from_global_ptr, weaken_task;"}, {"sha": "7fd646d6bf85d1a2214d2522dbc2a85e3854c35f", "filename": "src/libcore/rt.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/958df4b0031654c6e9b03997e956a21ede289660/src%2Flibcore%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958df4b0031654c6e9b03997e956a21ede289660/src%2Flibcore%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt.rs?ref=958df4b0031654c6e9b03997e956a21ede289660", "patch": "@@ -1,3 +1,6 @@\n+// NB: transitionary, de-mode-ing.\n+#[forbid(deprecated_mode)];\n+#[forbid(deprecated_pattern)];\n //! Runtime calls emitted by the compiler.\n \n import libc::c_char;"}, {"sha": "8d6c7ce5d298ed17b207f493ec22ab22fa977e88", "filename": "src/libstd/arc.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/958df4b0031654c6e9b03997e956a21ede289660/src%2Flibstd%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958df4b0031654c6e9b03997e956a21ede289660/src%2Flibstd%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farc.rs?ref=958df4b0031654c6e9b03997e956a21ede289660", "patch": "@@ -1,3 +1,6 @@\n+// NB: transitionary, de-mode-ing.\n+#[forbid(deprecated_mode)];\n+#[forbid(deprecated_pattern)];\n /**\n  * Concurrency-enabled mechanisms for sharing mutable and/or immutable state\n  * between tasks."}, {"sha": "4233c351cf1ebd077f6fa08519f6e3c89ae74196", "filename": "src/libstd/sync.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/958df4b0031654c6e9b03997e956a21ede289660/src%2Flibstd%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958df4b0031654c6e9b03997e956a21ede289660/src%2Flibstd%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync.rs?ref=958df4b0031654c6e9b03997e956a21ede289660", "patch": "@@ -1,3 +1,6 @@\n+// NB: transitionary, de-mode-ing.\n+#[forbid(deprecated_mode)];\n+#[forbid(deprecated_pattern)];\n /**\n  * The concurrency primitives you know and love.\n  *\n@@ -836,7 +839,7 @@ mod tests {\n         }\n     }\n     #[cfg(test)]\n-    fn test_rwlock_exclusion(x: ~rwlock, mode1: rwlock_mode,\n+    fn test_rwlock_exclusion(+x: ~rwlock, mode1: rwlock_mode,\n                              mode2: rwlock_mode) {\n         // Test mutual exclusion between readers and writers. Just like the\n         // mutex mutual exclusion test, a ways above.\n@@ -881,7 +884,7 @@ mod tests {\n         test_rwlock_exclusion(~rwlock(), downgrade, downgrade);\n     }\n     #[cfg(test)]\n-    fn test_rwlock_handshake(x: ~rwlock, mode1: rwlock_mode,\n+    fn test_rwlock_handshake(+x: ~rwlock, mode1: rwlock_mode,\n                              mode2: rwlock_mode, make_mode2_go_first: bool) {\n         // Much like sem_multi_resource.\n         let x2 = ~x.clone();"}]}