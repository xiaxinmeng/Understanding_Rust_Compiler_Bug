{"sha": "60826e77c3753e2d9d4b37228d2395dc7c171baf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwODI2ZTc3YzM3NTNlMmQ5ZDRiMzcyMjhkMjM5NWRjN2MxNzFiYWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-20T12:32:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-20T12:32:06Z"}, "message": "Auto merge of #7253 - flip1995:shrink-monster, r=xFrednet\n\nEarly return from LintPass registration when collecting metadata\n\nThis speeds up the metadata collection by 2-2.5x on my machine. During\nmetadata collection other lint passes don't have to be registered, only\nthe lints themselves.\n\ncc #7172\n\nr? `@xFrednet`\n\nchangelog: none", "tree": {"sha": "5d310c5ee7aaf4400cd54bc60d0a9bb7f3d55092", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d310c5ee7aaf4400cd54bc60d0a9bb7f3d55092"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60826e77c3753e2d9d4b37228d2395dc7c171baf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60826e77c3753e2d9d4b37228d2395dc7c171baf", "html_url": "https://github.com/rust-lang/rust/commit/60826e77c3753e2d9d4b37228d2395dc7c171baf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60826e77c3753e2d9d4b37228d2395dc7c171baf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e3cd88718cd1912a515d26dbd9c4019fd5a9577", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e3cd88718cd1912a515d26dbd9c4019fd5a9577", "html_url": "https://github.com/rust-lang/rust/commit/9e3cd88718cd1912a515d26dbd9c4019fd5a9577"}, {"sha": "73048291157e845877a987cab5da8f0dbf1309ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/73048291157e845877a987cab5da8f0dbf1309ef", "html_url": "https://github.com/rust-lang/rust/commit/73048291157e845877a987cab5da8f0dbf1309ef"}], "stats": {"total": 951, "additions": 477, "deletions": 474}, "files": [{"sha": "d1c129eba82bc48abb6fc02ebeb6278428400d01", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 477, "deletions": 474, "changes": 951, "blob_url": "https://github.com/rust-lang/rust/blob/60826e77c3753e2d9d4b37228d2395dc7c171baf/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60826e77c3753e2d9d4b37228d2395dc7c171baf/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=60826e77c3753e2d9d4b37228d2395dc7c171baf", "patch": "@@ -995,457 +995,172 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     ]);\n     // end register lints, do not remove this comment, it\u2019s used in `update_lints`\n \n-    // all the internal lints\n-    #[cfg(feature = \"internal-lints\")]\n-    {\n-        store.register_early_pass(|| box utils::internal_lints::ClippyLintsInternal);\n-        store.register_early_pass(|| box utils::internal_lints::ProduceIce);\n-        store.register_late_pass(|| box utils::inspector::DeepCodeInspector);\n-        store.register_late_pass(|| box utils::internal_lints::CollapsibleCalls);\n-        store.register_late_pass(|| box utils::internal_lints::CompilerLintFunctions::new());\n-        store.register_late_pass(|| box utils::internal_lints::IfChainStyle);\n-        store.register_late_pass(|| box utils::internal_lints::InvalidPaths);\n-        store.register_late_pass(|| box utils::internal_lints::InterningDefinedSymbol::default());\n-        store.register_late_pass(|| box utils::internal_lints::LintWithoutLintPass::default());\n-        store.register_late_pass(|| box utils::internal_lints::MatchTypeOnDiagItem);\n-        store.register_late_pass(|| box utils::internal_lints::OuterExpnDataPass);\n-    }\n-    #[cfg(feature = \"metadata-collector-lint\")]\n-    {\n-        if std::env::var(\"ENABLE_METADATA_COLLECTION\").eq(&Ok(\"1\".to_string())) {\n-            store.register_late_pass(|| box utils::internal_lints::metadata_collector::MetadataCollector::new());\n-        }\n-    }\n-\n-    store.register_late_pass(|| box utils::author::Author);\n-    store.register_late_pass(|| box await_holding_invalid::AwaitHolding);\n-    store.register_late_pass(|| box serde_api::SerdeApi);\n-    let vec_box_size_threshold = conf.vec_box_size_threshold;\n-    let type_complexity_threshold = conf.type_complexity_threshold;\n-    store.register_late_pass(move || box types::Types::new(vec_box_size_threshold, type_complexity_threshold));\n-    store.register_late_pass(|| box booleans::NonminimalBool);\n-    store.register_late_pass(|| box needless_bitwise_bool::NeedlessBitwiseBool);\n-    store.register_late_pass(|| box eq_op::EqOp);\n-    store.register_late_pass(|| box enum_clike::UnportableVariant);\n-    store.register_late_pass(|| box float_literal::FloatLiteral);\n-    let verbose_bit_mask_threshold = conf.verbose_bit_mask_threshold;\n-    store.register_late_pass(move || box bit_mask::BitMask::new(verbose_bit_mask_threshold));\n-    store.register_late_pass(|| box ptr::Ptr);\n-    store.register_late_pass(|| box ptr_eq::PtrEq);\n-    store.register_late_pass(|| box needless_bool::NeedlessBool);\n-    store.register_late_pass(|| box needless_bool::BoolComparison);\n-    store.register_late_pass(|| box needless_for_each::NeedlessForEach);\n-    store.register_late_pass(|| box approx_const::ApproxConstant);\n-    store.register_late_pass(|| box misc::MiscLints);\n-    store.register_late_pass(|| box eta_reduction::EtaReduction);\n-    store.register_late_pass(|| box identity_op::IdentityOp);\n-    store.register_late_pass(|| box erasing_op::ErasingOp);\n-    store.register_late_pass(|| box mut_mut::MutMut);\n-    store.register_late_pass(|| box mut_reference::UnnecessaryMutPassed);\n-    store.register_late_pass(|| box len_zero::LenZero);\n-    store.register_late_pass(|| box attrs::Attributes);\n-    store.register_late_pass(|| box blocks_in_if_conditions::BlocksInIfConditions);\n-    store.register_late_pass(|| box collapsible_match::CollapsibleMatch);\n-    store.register_late_pass(|| box unicode::Unicode);\n-    store.register_late_pass(|| box unit_return_expecting_ord::UnitReturnExpectingOrd);\n-    store.register_late_pass(|| box strings::StringAdd);\n-    store.register_late_pass(|| box implicit_return::ImplicitReturn);\n-    store.register_late_pass(|| box implicit_saturating_sub::ImplicitSaturatingSub);\n-    store.register_late_pass(|| box default_numeric_fallback::DefaultNumericFallback);\n-    store.register_late_pass(|| box inconsistent_struct_constructor::InconsistentStructConstructor);\n-    store.register_late_pass(|| box non_octal_unix_permissions::NonOctalUnixPermissions);\n-    store.register_early_pass(|| box unnecessary_self_imports::UnnecessarySelfImports);\n+    store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n+        LintId::of(arithmetic::FLOAT_ARITHMETIC),\n+        LintId::of(arithmetic::INTEGER_ARITHMETIC),\n+        LintId::of(as_conversions::AS_CONVERSIONS),\n+        LintId::of(asm_syntax::INLINE_ASM_X86_ATT_SYNTAX),\n+        LintId::of(asm_syntax::INLINE_ASM_X86_INTEL_SYNTAX),\n+        LintId::of(create_dir::CREATE_DIR),\n+        LintId::of(dbg_macro::DBG_MACRO),\n+        LintId::of(default_numeric_fallback::DEFAULT_NUMERIC_FALLBACK),\n+        LintId::of(else_if_without_else::ELSE_IF_WITHOUT_ELSE),\n+        LintId::of(exhaustive_items::EXHAUSTIVE_ENUMS),\n+        LintId::of(exhaustive_items::EXHAUSTIVE_STRUCTS),\n+        LintId::of(exit::EXIT),\n+        LintId::of(float_literal::LOSSY_FLOAT_LITERAL),\n+        LintId::of(if_then_some_else_none::IF_THEN_SOME_ELSE_NONE),\n+        LintId::of(implicit_return::IMPLICIT_RETURN),\n+        LintId::of(indexing_slicing::INDEXING_SLICING),\n+        LintId::of(inherent_impl::MULTIPLE_INHERENT_IMPL),\n+        LintId::of(integer_division::INTEGER_DIVISION),\n+        LintId::of(let_underscore::LET_UNDERSCORE_MUST_USE),\n+        LintId::of(literal_representation::DECIMAL_LITERAL_REPRESENTATION),\n+        LintId::of(map_err_ignore::MAP_ERR_IGNORE),\n+        LintId::of(matches::REST_PAT_IN_FULLY_BOUND_STRUCTS),\n+        LintId::of(matches::WILDCARD_ENUM_MATCH_ARM),\n+        LintId::of(mem_forget::MEM_FORGET),\n+        LintId::of(methods::CLONE_ON_REF_PTR),\n+        LintId::of(methods::EXPECT_USED),\n+        LintId::of(methods::FILETYPE_IS_FILE),\n+        LintId::of(methods::GET_UNWRAP),\n+        LintId::of(methods::UNWRAP_USED),\n+        LintId::of(methods::WRONG_PUB_SELF_CONVENTION),\n+        LintId::of(misc::FLOAT_CMP_CONST),\n+        LintId::of(misc_early::UNNEEDED_FIELD_PATTERN),\n+        LintId::of(missing_doc::MISSING_DOCS_IN_PRIVATE_ITEMS),\n+        LintId::of(missing_inline::MISSING_INLINE_IN_PUBLIC_ITEMS),\n+        LintId::of(modulo_arithmetic::MODULO_ARITHMETIC),\n+        LintId::of(panic_in_result_fn::PANIC_IN_RESULT_FN),\n+        LintId::of(panic_unimplemented::PANIC),\n+        LintId::of(panic_unimplemented::TODO),\n+        LintId::of(panic_unimplemented::UNIMPLEMENTED),\n+        LintId::of(panic_unimplemented::UNREACHABLE),\n+        LintId::of(pattern_type_mismatch::PATTERN_TYPE_MISMATCH),\n+        LintId::of(semicolon_if_nothing_returned::SEMICOLON_IF_NOTHING_RETURNED),\n+        LintId::of(shadow::SHADOW_REUSE),\n+        LintId::of(shadow::SHADOW_SAME),\n+        LintId::of(strings::STRING_ADD),\n+        LintId::of(strings::STRING_TO_STRING),\n+        LintId::of(strings::STR_TO_STRING),\n+        LintId::of(types::RC_BUFFER),\n+        LintId::of(unnecessary_self_imports::UNNECESSARY_SELF_IMPORTS),\n+        LintId::of(unwrap_in_result::UNWRAP_IN_RESULT),\n+        LintId::of(verbose_file_reads::VERBOSE_FILE_READS),\n+        LintId::of(write::PRINT_STDERR),\n+        LintId::of(write::PRINT_STDOUT),\n+        LintId::of(write::USE_DEBUG),\n+    ]);\n \n-    let msrv = conf.msrv.as_ref().and_then(|s| {\n-        parse_msrv(s, None, None).or_else(|| {\n-            sess.err(&format!(\"error reading Clippy's configuration file. `{}` is not a valid Rust version\", s));\n-            None\n-        })\n-    });\n+    store.register_group(true, \"clippy::pedantic\", Some(\"clippy_pedantic\"), vec![\n+        LintId::of(attrs::INLINE_ALWAYS),\n+        LintId::of(await_holding_invalid::AWAIT_HOLDING_LOCK),\n+        LintId::of(await_holding_invalid::AWAIT_HOLDING_REFCELL_REF),\n+        LintId::of(bit_mask::VERBOSE_BIT_MASK),\n+        LintId::of(bytecount::NAIVE_BYTECOUNT),\n+        LintId::of(case_sensitive_file_extension_comparisons::CASE_SENSITIVE_FILE_EXTENSION_COMPARISONS),\n+        LintId::of(casts::CAST_LOSSLESS),\n+        LintId::of(casts::CAST_POSSIBLE_TRUNCATION),\n+        LintId::of(casts::CAST_POSSIBLE_WRAP),\n+        LintId::of(casts::CAST_PRECISION_LOSS),\n+        LintId::of(casts::CAST_PTR_ALIGNMENT),\n+        LintId::of(casts::CAST_SIGN_LOSS),\n+        LintId::of(casts::PTR_AS_PTR),\n+        LintId::of(checked_conversions::CHECKED_CONVERSIONS),\n+        LintId::of(copies::SAME_FUNCTIONS_IN_IF_CONDITION),\n+        LintId::of(copy_iterator::COPY_ITERATOR),\n+        LintId::of(default::DEFAULT_TRAIT_ACCESS),\n+        LintId::of(dereference::EXPLICIT_DEREF_METHODS),\n+        LintId::of(derive::EXPL_IMPL_CLONE_ON_COPY),\n+        LintId::of(derive::UNSAFE_DERIVE_DESERIALIZE),\n+        LintId::of(doc::DOC_MARKDOWN),\n+        LintId::of(doc::MISSING_ERRORS_DOC),\n+        LintId::of(doc::MISSING_PANICS_DOC),\n+        LintId::of(empty_enum::EMPTY_ENUM),\n+        LintId::of(enum_variants::MODULE_NAME_REPETITIONS),\n+        LintId::of(enum_variants::PUB_ENUM_VARIANT_NAMES),\n+        LintId::of(eta_reduction::REDUNDANT_CLOSURE_FOR_METHOD_CALLS),\n+        LintId::of(excessive_bools::FN_PARAMS_EXCESSIVE_BOOLS),\n+        LintId::of(excessive_bools::STRUCT_EXCESSIVE_BOOLS),\n+        LintId::of(functions::MUST_USE_CANDIDATE),\n+        LintId::of(functions::TOO_MANY_LINES),\n+        LintId::of(if_not_else::IF_NOT_ELSE),\n+        LintId::of(implicit_hasher::IMPLICIT_HASHER),\n+        LintId::of(implicit_saturating_sub::IMPLICIT_SATURATING_SUB),\n+        LintId::of(inconsistent_struct_constructor::INCONSISTENT_STRUCT_CONSTRUCTOR),\n+        LintId::of(infinite_iter::MAYBE_INFINITE_ITER),\n+        LintId::of(invalid_upcast_comparisons::INVALID_UPCAST_COMPARISONS),\n+        LintId::of(items_after_statements::ITEMS_AFTER_STATEMENTS),\n+        LintId::of(large_stack_arrays::LARGE_STACK_ARRAYS),\n+        LintId::of(let_underscore::LET_UNDERSCORE_DROP),\n+        LintId::of(literal_representation::LARGE_DIGIT_GROUPS),\n+        LintId::of(literal_representation::UNREADABLE_LITERAL),\n+        LintId::of(loops::EXPLICIT_INTO_ITER_LOOP),\n+        LintId::of(loops::EXPLICIT_ITER_LOOP),\n+        LintId::of(macro_use::MACRO_USE_IMPORTS),\n+        LintId::of(manual_ok_or::MANUAL_OK_OR),\n+        LintId::of(match_on_vec_items::MATCH_ON_VEC_ITEMS),\n+        LintId::of(matches::MATCH_BOOL),\n+        LintId::of(matches::MATCH_SAME_ARMS),\n+        LintId::of(matches::MATCH_WILDCARD_FOR_SINGLE_VARIANTS),\n+        LintId::of(matches::MATCH_WILD_ERR_ARM),\n+        LintId::of(matches::SINGLE_MATCH_ELSE),\n+        LintId::of(methods::CLONED_INSTEAD_OF_COPIED),\n+        LintId::of(methods::FILTER_MAP_NEXT),\n+        LintId::of(methods::FLAT_MAP_OPTION),\n+        LintId::of(methods::IMPLICIT_CLONE),\n+        LintId::of(methods::INEFFICIENT_TO_STRING),\n+        LintId::of(methods::MAP_FLATTEN),\n+        LintId::of(methods::MAP_UNWRAP_OR),\n+        LintId::of(misc::USED_UNDERSCORE_BINDING),\n+        LintId::of(misc_early::UNSEPARATED_LITERAL_SUFFIX),\n+        LintId::of(mut_mut::MUT_MUT),\n+        LintId::of(needless_bitwise_bool::NEEDLESS_BITWISE_BOOL),\n+        LintId::of(needless_continue::NEEDLESS_CONTINUE),\n+        LintId::of(needless_for_each::NEEDLESS_FOR_EACH),\n+        LintId::of(needless_pass_by_value::NEEDLESS_PASS_BY_VALUE),\n+        LintId::of(non_expressive_names::SIMILAR_NAMES),\n+        LintId::of(option_if_let_else::OPTION_IF_LET_ELSE),\n+        LintId::of(pass_by_ref_or_value::LARGE_TYPES_PASSED_BY_VALUE),\n+        LintId::of(pass_by_ref_or_value::TRIVIALLY_COPY_PASS_BY_REF),\n+        LintId::of(ranges::RANGE_MINUS_ONE),\n+        LintId::of(ranges::RANGE_PLUS_ONE),\n+        LintId::of(redundant_else::REDUNDANT_ELSE),\n+        LintId::of(ref_option_ref::REF_OPTION_REF),\n+        LintId::of(shadow::SHADOW_UNRELATED),\n+        LintId::of(strings::STRING_ADD_ASSIGN),\n+        LintId::of(trait_bounds::TRAIT_DUPLICATION_IN_BOUNDS),\n+        LintId::of(trait_bounds::TYPE_REPETITION_IN_BOUNDS),\n+        LintId::of(transmute::TRANSMUTE_PTR_TO_PTR),\n+        LintId::of(types::LINKEDLIST),\n+        LintId::of(types::OPTION_OPTION),\n+        LintId::of(unicode::NON_ASCII_LITERAL),\n+        LintId::of(unicode::UNICODE_NOT_NFC),\n+        LintId::of(unit_types::LET_UNIT_VALUE),\n+        LintId::of(unnecessary_wraps::UNNECESSARY_WRAPS),\n+        LintId::of(unnested_or_patterns::UNNESTED_OR_PATTERNS),\n+        LintId::of(unused_async::UNUSED_ASYNC),\n+        LintId::of(unused_self::UNUSED_SELF),\n+        LintId::of(wildcard_imports::ENUM_GLOB_USE),\n+        LintId::of(wildcard_imports::WILDCARD_IMPORTS),\n+        LintId::of(zero_sized_map_values::ZERO_SIZED_MAP_VALUES),\n+    ]);\n \n-    store.register_late_pass(move || box methods::Methods::new(msrv));\n-    store.register_late_pass(move || box matches::Matches::new(msrv));\n-    store.register_early_pass(move || box manual_non_exhaustive::ManualNonExhaustive::new(msrv));\n-    store.register_late_pass(move || box manual_strip::ManualStrip::new(msrv));\n-    store.register_early_pass(move || box redundant_static_lifetimes::RedundantStaticLifetimes::new(msrv));\n-    store.register_early_pass(move || box redundant_field_names::RedundantFieldNames::new(msrv));\n-    store.register_late_pass(move || box checked_conversions::CheckedConversions::new(msrv));\n-    store.register_late_pass(move || box mem_replace::MemReplace::new(msrv));\n-    store.register_late_pass(move || box ranges::Ranges::new(msrv));\n-    store.register_late_pass(move || box from_over_into::FromOverInto::new(msrv));\n-    store.register_late_pass(move || box use_self::UseSelf::new(msrv));\n-    store.register_late_pass(move || box missing_const_for_fn::MissingConstForFn::new(msrv));\n-    store.register_late_pass(move || box needless_question_mark::NeedlessQuestionMark);\n-    store.register_late_pass(move || box casts::Casts::new(msrv));\n-    store.register_early_pass(move || box unnested_or_patterns::UnnestedOrPatterns::new(msrv));\n-\n-    store.register_late_pass(|| box size_of_in_element_count::SizeOfInElementCount);\n-    store.register_late_pass(|| box map_clone::MapClone);\n-    store.register_late_pass(|| box map_err_ignore::MapErrIgnore);\n-    store.register_late_pass(|| box shadow::Shadow);\n-    store.register_late_pass(|| box unit_types::UnitTypes);\n-    store.register_late_pass(|| box loops::Loops);\n-    store.register_late_pass(|| box main_recursion::MainRecursion::default());\n-    store.register_late_pass(|| box lifetimes::Lifetimes);\n-    store.register_late_pass(|| box entry::HashMapPass);\n-    store.register_late_pass(|| box minmax::MinMaxPass);\n-    store.register_late_pass(|| box open_options::OpenOptions);\n-    store.register_late_pass(|| box zero_div_zero::ZeroDiv);\n-    store.register_late_pass(|| box mutex_atomic::Mutex);\n-    store.register_late_pass(|| box needless_update::NeedlessUpdate);\n-    store.register_late_pass(|| box needless_borrow::NeedlessBorrow::default());\n-    store.register_late_pass(|| box needless_borrowed_ref::NeedlessBorrowedRef);\n-    store.register_late_pass(|| box no_effect::NoEffect);\n-    store.register_late_pass(|| box temporary_assignment::TemporaryAssignment);\n-    store.register_late_pass(|| box transmute::Transmute);\n-    let cognitive_complexity_threshold = conf.cognitive_complexity_threshold;\n-    store.register_late_pass(move || box cognitive_complexity::CognitiveComplexity::new(cognitive_complexity_threshold));\n-    let too_large_for_stack = conf.too_large_for_stack;\n-    store.register_late_pass(move || box escape::BoxedLocal{too_large_for_stack});\n-    store.register_late_pass(move || box vec::UselessVec{too_large_for_stack});\n-    store.register_late_pass(|| box panic_unimplemented::PanicUnimplemented);\n-    store.register_late_pass(|| box strings::StringLitAsBytes);\n-    store.register_late_pass(|| box derive::Derive);\n-    store.register_late_pass(|| box get_last_with_len::GetLastWithLen);\n-    store.register_late_pass(|| box drop_forget_ref::DropForgetRef);\n-    store.register_late_pass(|| box empty_enum::EmptyEnum);\n-    store.register_late_pass(|| box absurd_extreme_comparisons::AbsurdExtremeComparisons);\n-    store.register_late_pass(|| box invalid_upcast_comparisons::InvalidUpcastComparisons);\n-    store.register_late_pass(|| box regex::Regex::default());\n-    store.register_late_pass(|| box copies::CopyAndPaste);\n-    store.register_late_pass(|| box copy_iterator::CopyIterator);\n-    store.register_late_pass(|| box format::UselessFormat);\n-    store.register_late_pass(|| box swap::Swap);\n-    store.register_late_pass(|| box overflow_check_conditional::OverflowCheckConditional);\n-    store.register_late_pass(|| box new_without_default::NewWithoutDefault::default());\n-    let blacklisted_names = conf.blacklisted_names.iter().cloned().collect::<FxHashSet<_>>();\n-    store.register_late_pass(move || box blacklisted_name::BlacklistedName::new(blacklisted_names.clone()));\n-    let too_many_arguments_threshold = conf.too_many_arguments_threshold;\n-    let too_many_lines_threshold = conf.too_many_lines_threshold;\n-    store.register_late_pass(move || box functions::Functions::new(too_many_arguments_threshold, too_many_lines_threshold));\n-    let doc_valid_idents = conf.doc_valid_idents.iter().cloned().collect::<FxHashSet<_>>();\n-    store.register_late_pass(move || box doc::DocMarkdown::new(doc_valid_idents.clone()));\n-    store.register_late_pass(|| box neg_multiply::NegMultiply);\n-    store.register_late_pass(|| box mem_discriminant::MemDiscriminant);\n-    store.register_late_pass(|| box mem_forget::MemForget);\n-    store.register_late_pass(|| box arithmetic::Arithmetic::default());\n-    store.register_late_pass(|| box assign_ops::AssignOps);\n-    store.register_late_pass(|| box let_if_seq::LetIfSeq);\n-    store.register_late_pass(|| box eval_order_dependence::EvalOrderDependence);\n-    store.register_late_pass(|| box missing_doc::MissingDoc::new());\n-    store.register_late_pass(|| box missing_inline::MissingInline);\n-    store.register_late_pass(move || box exhaustive_items::ExhaustiveItems);\n-    store.register_late_pass(|| box if_let_some_result::OkIfLet);\n-    store.register_late_pass(|| box partialeq_ne_impl::PartialEqNeImpl);\n-    store.register_late_pass(|| box unused_io_amount::UnusedIoAmount);\n-    let enum_variant_size_threshold = conf.enum_variant_size_threshold;\n-    store.register_late_pass(move || box large_enum_variant::LargeEnumVariant::new(enum_variant_size_threshold));\n-    store.register_late_pass(|| box explicit_write::ExplicitWrite);\n-    store.register_late_pass(|| box needless_pass_by_value::NeedlessPassByValue);\n-    let pass_by_ref_or_value = pass_by_ref_or_value::PassByRefOrValue::new(\n-        conf.trivial_copy_size_limit,\n-        conf.pass_by_value_size_limit,\n-        &sess.target,\n-    );\n-    store.register_late_pass(move || box pass_by_ref_or_value);\n-    store.register_late_pass(|| box ref_option_ref::RefOptionRef);\n-    store.register_late_pass(|| box try_err::TryErr);\n-    store.register_late_pass(|| box bytecount::ByteCount);\n-    store.register_late_pass(|| box infinite_iter::InfiniteIter);\n-    store.register_late_pass(|| box inline_fn_without_body::InlineFnWithoutBody);\n-    store.register_late_pass(|| box useless_conversion::UselessConversion::default());\n-    store.register_late_pass(|| box implicit_hasher::ImplicitHasher);\n-    store.register_late_pass(|| box fallible_impl_from::FallibleImplFrom);\n-    store.register_late_pass(|| box double_comparison::DoubleComparisons);\n-    store.register_late_pass(|| box question_mark::QuestionMark);\n-    store.register_early_pass(|| box suspicious_operation_groupings::SuspiciousOperationGroupings);\n-    store.register_late_pass(|| box suspicious_trait_impl::SuspiciousImpl);\n-    store.register_late_pass(|| box map_unit_fn::MapUnit);\n-    store.register_late_pass(|| box inherent_impl::MultipleInherentImpl);\n-    store.register_late_pass(|| box neg_cmp_op_on_partial_ord::NoNegCompOpForPartialOrd);\n-    store.register_late_pass(|| box unwrap::Unwrap);\n-    store.register_late_pass(|| box duration_subsec::DurationSubsec);\n-    store.register_late_pass(|| box indexing_slicing::IndexingSlicing);\n-    store.register_late_pass(|| box non_copy_const::NonCopyConst);\n-    store.register_late_pass(|| box ptr_offset_with_cast::PtrOffsetWithCast);\n-    store.register_late_pass(|| box redundant_clone::RedundantClone);\n-    store.register_late_pass(|| box slow_vector_initialization::SlowVectorInit);\n-    store.register_late_pass(|| box unnecessary_sort_by::UnnecessarySortBy);\n-    store.register_late_pass(|| box unnecessary_wraps::UnnecessaryWraps);\n-    store.register_late_pass(|| box assertions_on_constants::AssertionsOnConstants);\n-    store.register_late_pass(|| box transmuting_null::TransmutingNull);\n-    store.register_late_pass(|| box path_buf_push_overwrite::PathBufPushOverwrite);\n-    store.register_late_pass(|| box integer_division::IntegerDivision);\n-    store.register_late_pass(|| box inherent_to_string::InherentToString);\n-    let max_trait_bounds = conf.max_trait_bounds;\n-    store.register_late_pass(move || box trait_bounds::TraitBounds::new(max_trait_bounds));\n-    store.register_late_pass(|| box comparison_chain::ComparisonChain);\n-    store.register_late_pass(|| box mut_key::MutableKeyType);\n-    store.register_late_pass(|| box modulo_arithmetic::ModuloArithmetic);\n-    store.register_early_pass(|| box reference::DerefAddrOf);\n-    store.register_early_pass(|| box reference::RefInDeref);\n-    store.register_early_pass(|| box double_parens::DoubleParens);\n-    store.register_late_pass(|| box to_string_in_display::ToStringInDisplay::new());\n-    store.register_early_pass(|| box unsafe_removed_from_name::UnsafeNameRemoval);\n-    store.register_early_pass(|| box if_not_else::IfNotElse);\n-    store.register_early_pass(|| box else_if_without_else::ElseIfWithoutElse);\n-    store.register_early_pass(|| box int_plus_one::IntPlusOne);\n-    store.register_early_pass(|| box formatting::Formatting);\n-    store.register_early_pass(|| box misc_early::MiscEarlyLints);\n-    store.register_early_pass(|| box redundant_closure_call::RedundantClosureCall);\n-    store.register_late_pass(|| box redundant_closure_call::RedundantClosureCall);\n-    store.register_early_pass(|| box unused_unit::UnusedUnit);\n-    store.register_late_pass(|| box returns::Return);\n-    store.register_early_pass(|| box collapsible_if::CollapsibleIf);\n-    store.register_early_pass(|| box items_after_statements::ItemsAfterStatements);\n-    store.register_early_pass(|| box precedence::Precedence);\n-    store.register_early_pass(|| box needless_continue::NeedlessContinue);\n-    store.register_early_pass(|| box redundant_else::RedundantElse);\n-    store.register_late_pass(|| box create_dir::CreateDir);\n-    store.register_early_pass(|| box needless_arbitrary_self_type::NeedlessArbitrarySelfType);\n-    let cargo_ignore_publish = conf.cargo_ignore_publish;\n-    store.register_late_pass(move || box cargo_common_metadata::CargoCommonMetadata::new(cargo_ignore_publish));\n-    store.register_late_pass(|| box multiple_crate_versions::MultipleCrateVersions);\n-    store.register_late_pass(|| box wildcard_dependencies::WildcardDependencies);\n-    let literal_representation_lint_fraction_readability = conf.unreadable_literal_lint_fractions;\n-    store.register_early_pass(move || box literal_representation::LiteralDigitGrouping::new(literal_representation_lint_fraction_readability));\n-    let literal_representation_threshold = conf.literal_representation_threshold;\n-    store.register_early_pass(move || box literal_representation::DecimalLiteralRepresentation::new(literal_representation_threshold));\n-    let enum_variant_name_threshold = conf.enum_variant_name_threshold;\n-    store.register_early_pass(move || box enum_variants::EnumVariantNames::new(enum_variant_name_threshold));\n-    store.register_early_pass(|| box tabs_in_doc_comments::TabsInDocComments);\n-    let upper_case_acronyms_aggressive = conf.upper_case_acronyms_aggressive;\n-    store.register_early_pass(move || box upper_case_acronyms::UpperCaseAcronyms::new(upper_case_acronyms_aggressive));\n-    store.register_late_pass(|| box default::Default::default());\n-    store.register_late_pass(|| box unused_self::UnusedSelf);\n-    store.register_late_pass(|| box mutable_debug_assertion::DebugAssertWithMutCall);\n-    store.register_late_pass(|| box exit::Exit);\n-    store.register_late_pass(|| box to_digit_is_some::ToDigitIsSome);\n-    let array_size_threshold = conf.array_size_threshold;\n-    store.register_late_pass(move || box large_stack_arrays::LargeStackArrays::new(array_size_threshold));\n-    store.register_late_pass(move || box large_const_arrays::LargeConstArrays::new(array_size_threshold));\n-    store.register_late_pass(|| box floating_point_arithmetic::FloatingPointArithmetic);\n-    store.register_early_pass(|| box as_conversions::AsConversions);\n-    store.register_late_pass(|| box let_underscore::LetUnderscore);\n-    store.register_late_pass(|| box atomic_ordering::AtomicOrdering);\n-    store.register_early_pass(|| box single_component_path_imports::SingleComponentPathImports);\n-    let max_fn_params_bools = conf.max_fn_params_bools;\n-    let max_struct_bools = conf.max_struct_bools;\n-    store.register_early_pass(move || box excessive_bools::ExcessiveBools::new(max_struct_bools, max_fn_params_bools));\n-    store.register_early_pass(|| box option_env_unwrap::OptionEnvUnwrap);\n-    let warn_on_all_wildcard_imports = conf.warn_on_all_wildcard_imports;\n-    store.register_late_pass(move || box wildcard_imports::WildcardImports::new(warn_on_all_wildcard_imports));\n-    store.register_late_pass(|| box verbose_file_reads::VerboseFileReads);\n-    store.register_late_pass(|| box redundant_pub_crate::RedundantPubCrate::default());\n-    store.register_late_pass(|| box unnamed_address::UnnamedAddress);\n-    store.register_late_pass(|| box dereference::Dereferencing::default());\n-    store.register_late_pass(|| box option_if_let_else::OptionIfLetElse);\n-    store.register_late_pass(|| box future_not_send::FutureNotSend);\n-    store.register_late_pass(|| box if_let_mutex::IfLetMutex);\n-    store.register_late_pass(|| box mut_mutex_lock::MutMutexLock);\n-    store.register_late_pass(|| box match_on_vec_items::MatchOnVecItems);\n-    store.register_late_pass(|| box manual_async_fn::ManualAsyncFn);\n-    store.register_late_pass(|| box vec_resize_to_zero::VecResizeToZero);\n-    store.register_late_pass(|| box panic_in_result_fn::PanicInResultFn);\n-    let single_char_binding_names_threshold = conf.single_char_binding_names_threshold;\n-    store.register_early_pass(move || box non_expressive_names::NonExpressiveNames {\n-        single_char_binding_names_threshold,\n-    });\n-    store.register_late_pass(|| box macro_use::MacroUseImports::default());\n-    store.register_late_pass(|| box map_identity::MapIdentity);\n-    store.register_late_pass(|| box pattern_type_mismatch::PatternTypeMismatch);\n-    store.register_late_pass(|| box stable_sort_primitive::StableSortPrimitive);\n-    store.register_late_pass(|| box repeat_once::RepeatOnce);\n-    store.register_late_pass(|| box unwrap_in_result::UnwrapInResult);\n-    store.register_late_pass(|| box self_assignment::SelfAssignment);\n-    store.register_late_pass(|| box manual_unwrap_or::ManualUnwrapOr);\n-    store.register_late_pass(|| box manual_ok_or::ManualOkOr);\n-    store.register_late_pass(|| box float_equality_without_abs::FloatEqualityWithoutAbs);\n-    store.register_late_pass(|| box semicolon_if_nothing_returned::SemicolonIfNothingReturned);\n-    store.register_late_pass(|| box async_yields_async::AsyncYieldsAsync);\n-    let disallowed_methods = conf.disallowed_methods.iter().cloned().collect::<FxHashSet<_>>();\n-    store.register_late_pass(move || box disallowed_method::DisallowedMethod::new(&disallowed_methods));\n-    store.register_early_pass(|| box asm_syntax::InlineAsmX86AttSyntax);\n-    store.register_early_pass(|| box asm_syntax::InlineAsmX86IntelSyntax);\n-    store.register_late_pass(|| box undropped_manually_drops::UndroppedManuallyDrops);\n-    store.register_late_pass(|| box strings::StrToString);\n-    store.register_late_pass(|| box strings::StringToString);\n-    store.register_late_pass(|| box zero_sized_map_values::ZeroSizedMapValues);\n-    store.register_late_pass(|| box vec_init_then_push::VecInitThenPush::default());\n-    store.register_late_pass(|| box case_sensitive_file_extension_comparisons::CaseSensitiveFileExtensionComparisons);\n-    store.register_late_pass(|| box redundant_slicing::RedundantSlicing);\n-    store.register_late_pass(|| box from_str_radix_10::FromStrRadix10);\n-    store.register_late_pass(|| box manual_map::ManualMap);\n-    store.register_late_pass(move || box if_then_some_else_none::IfThenSomeElseNone::new(msrv));\n-    store.register_early_pass(|| box bool_assert_comparison::BoolAssertComparison);\n-    store.register_late_pass(|| box unused_async::UnusedAsync);\n-\n-    store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n-        LintId::of(arithmetic::FLOAT_ARITHMETIC),\n-        LintId::of(arithmetic::INTEGER_ARITHMETIC),\n-        LintId::of(as_conversions::AS_CONVERSIONS),\n-        LintId::of(asm_syntax::INLINE_ASM_X86_ATT_SYNTAX),\n-        LintId::of(asm_syntax::INLINE_ASM_X86_INTEL_SYNTAX),\n-        LintId::of(create_dir::CREATE_DIR),\n-        LintId::of(dbg_macro::DBG_MACRO),\n-        LintId::of(default_numeric_fallback::DEFAULT_NUMERIC_FALLBACK),\n-        LintId::of(else_if_without_else::ELSE_IF_WITHOUT_ELSE),\n-        LintId::of(exhaustive_items::EXHAUSTIVE_ENUMS),\n-        LintId::of(exhaustive_items::EXHAUSTIVE_STRUCTS),\n-        LintId::of(exit::EXIT),\n-        LintId::of(float_literal::LOSSY_FLOAT_LITERAL),\n-        LintId::of(if_then_some_else_none::IF_THEN_SOME_ELSE_NONE),\n-        LintId::of(implicit_return::IMPLICIT_RETURN),\n-        LintId::of(indexing_slicing::INDEXING_SLICING),\n-        LintId::of(inherent_impl::MULTIPLE_INHERENT_IMPL),\n-        LintId::of(integer_division::INTEGER_DIVISION),\n-        LintId::of(let_underscore::LET_UNDERSCORE_MUST_USE),\n-        LintId::of(literal_representation::DECIMAL_LITERAL_REPRESENTATION),\n-        LintId::of(map_err_ignore::MAP_ERR_IGNORE),\n-        LintId::of(matches::REST_PAT_IN_FULLY_BOUND_STRUCTS),\n-        LintId::of(matches::WILDCARD_ENUM_MATCH_ARM),\n-        LintId::of(mem_forget::MEM_FORGET),\n-        LintId::of(methods::CLONE_ON_REF_PTR),\n-        LintId::of(methods::EXPECT_USED),\n-        LintId::of(methods::FILETYPE_IS_FILE),\n-        LintId::of(methods::GET_UNWRAP),\n-        LintId::of(methods::UNWRAP_USED),\n-        LintId::of(methods::WRONG_PUB_SELF_CONVENTION),\n-        LintId::of(misc::FLOAT_CMP_CONST),\n-        LintId::of(misc_early::UNNEEDED_FIELD_PATTERN),\n-        LintId::of(missing_doc::MISSING_DOCS_IN_PRIVATE_ITEMS),\n-        LintId::of(missing_inline::MISSING_INLINE_IN_PUBLIC_ITEMS),\n-        LintId::of(modulo_arithmetic::MODULO_ARITHMETIC),\n-        LintId::of(panic_in_result_fn::PANIC_IN_RESULT_FN),\n-        LintId::of(panic_unimplemented::PANIC),\n-        LintId::of(panic_unimplemented::TODO),\n-        LintId::of(panic_unimplemented::UNIMPLEMENTED),\n-        LintId::of(panic_unimplemented::UNREACHABLE),\n-        LintId::of(pattern_type_mismatch::PATTERN_TYPE_MISMATCH),\n-        LintId::of(semicolon_if_nothing_returned::SEMICOLON_IF_NOTHING_RETURNED),\n-        LintId::of(shadow::SHADOW_REUSE),\n-        LintId::of(shadow::SHADOW_SAME),\n-        LintId::of(strings::STRING_ADD),\n-        LintId::of(strings::STRING_TO_STRING),\n-        LintId::of(strings::STR_TO_STRING),\n-        LintId::of(types::RC_BUFFER),\n-        LintId::of(unnecessary_self_imports::UNNECESSARY_SELF_IMPORTS),\n-        LintId::of(unwrap_in_result::UNWRAP_IN_RESULT),\n-        LintId::of(verbose_file_reads::VERBOSE_FILE_READS),\n-        LintId::of(write::PRINT_STDERR),\n-        LintId::of(write::PRINT_STDOUT),\n-        LintId::of(write::USE_DEBUG),\n-    ]);\n-\n-    store.register_group(true, \"clippy::pedantic\", Some(\"clippy_pedantic\"), vec![\n-        LintId::of(attrs::INLINE_ALWAYS),\n-        LintId::of(await_holding_invalid::AWAIT_HOLDING_LOCK),\n-        LintId::of(await_holding_invalid::AWAIT_HOLDING_REFCELL_REF),\n-        LintId::of(bit_mask::VERBOSE_BIT_MASK),\n-        LintId::of(bytecount::NAIVE_BYTECOUNT),\n-        LintId::of(case_sensitive_file_extension_comparisons::CASE_SENSITIVE_FILE_EXTENSION_COMPARISONS),\n-        LintId::of(casts::CAST_LOSSLESS),\n-        LintId::of(casts::CAST_POSSIBLE_TRUNCATION),\n-        LintId::of(casts::CAST_POSSIBLE_WRAP),\n-        LintId::of(casts::CAST_PRECISION_LOSS),\n-        LintId::of(casts::CAST_PTR_ALIGNMENT),\n-        LintId::of(casts::CAST_SIGN_LOSS),\n-        LintId::of(casts::PTR_AS_PTR),\n-        LintId::of(checked_conversions::CHECKED_CONVERSIONS),\n-        LintId::of(copies::SAME_FUNCTIONS_IN_IF_CONDITION),\n-        LintId::of(copy_iterator::COPY_ITERATOR),\n-        LintId::of(default::DEFAULT_TRAIT_ACCESS),\n-        LintId::of(dereference::EXPLICIT_DEREF_METHODS),\n-        LintId::of(derive::EXPL_IMPL_CLONE_ON_COPY),\n-        LintId::of(derive::UNSAFE_DERIVE_DESERIALIZE),\n-        LintId::of(doc::DOC_MARKDOWN),\n-        LintId::of(doc::MISSING_ERRORS_DOC),\n-        LintId::of(doc::MISSING_PANICS_DOC),\n-        LintId::of(empty_enum::EMPTY_ENUM),\n-        LintId::of(enum_variants::MODULE_NAME_REPETITIONS),\n-        LintId::of(enum_variants::PUB_ENUM_VARIANT_NAMES),\n-        LintId::of(eta_reduction::REDUNDANT_CLOSURE_FOR_METHOD_CALLS),\n-        LintId::of(excessive_bools::FN_PARAMS_EXCESSIVE_BOOLS),\n-        LintId::of(excessive_bools::STRUCT_EXCESSIVE_BOOLS),\n-        LintId::of(functions::MUST_USE_CANDIDATE),\n-        LintId::of(functions::TOO_MANY_LINES),\n-        LintId::of(if_not_else::IF_NOT_ELSE),\n-        LintId::of(implicit_hasher::IMPLICIT_HASHER),\n-        LintId::of(implicit_saturating_sub::IMPLICIT_SATURATING_SUB),\n-        LintId::of(inconsistent_struct_constructor::INCONSISTENT_STRUCT_CONSTRUCTOR),\n-        LintId::of(infinite_iter::MAYBE_INFINITE_ITER),\n-        LintId::of(invalid_upcast_comparisons::INVALID_UPCAST_COMPARISONS),\n-        LintId::of(items_after_statements::ITEMS_AFTER_STATEMENTS),\n-        LintId::of(large_stack_arrays::LARGE_STACK_ARRAYS),\n-        LintId::of(let_underscore::LET_UNDERSCORE_DROP),\n-        LintId::of(literal_representation::LARGE_DIGIT_GROUPS),\n-        LintId::of(literal_representation::UNREADABLE_LITERAL),\n-        LintId::of(loops::EXPLICIT_INTO_ITER_LOOP),\n-        LintId::of(loops::EXPLICIT_ITER_LOOP),\n-        LintId::of(macro_use::MACRO_USE_IMPORTS),\n-        LintId::of(manual_ok_or::MANUAL_OK_OR),\n-        LintId::of(match_on_vec_items::MATCH_ON_VEC_ITEMS),\n-        LintId::of(matches::MATCH_BOOL),\n-        LintId::of(matches::MATCH_SAME_ARMS),\n-        LintId::of(matches::MATCH_WILDCARD_FOR_SINGLE_VARIANTS),\n-        LintId::of(matches::MATCH_WILD_ERR_ARM),\n-        LintId::of(matches::SINGLE_MATCH_ELSE),\n-        LintId::of(methods::CLONED_INSTEAD_OF_COPIED),\n-        LintId::of(methods::FILTER_MAP_NEXT),\n-        LintId::of(methods::FLAT_MAP_OPTION),\n-        LintId::of(methods::IMPLICIT_CLONE),\n-        LintId::of(methods::INEFFICIENT_TO_STRING),\n-        LintId::of(methods::MAP_FLATTEN),\n-        LintId::of(methods::MAP_UNWRAP_OR),\n-        LintId::of(misc::USED_UNDERSCORE_BINDING),\n-        LintId::of(misc_early::UNSEPARATED_LITERAL_SUFFIX),\n-        LintId::of(mut_mut::MUT_MUT),\n-        LintId::of(needless_bitwise_bool::NEEDLESS_BITWISE_BOOL),\n-        LintId::of(needless_continue::NEEDLESS_CONTINUE),\n-        LintId::of(needless_for_each::NEEDLESS_FOR_EACH),\n-        LintId::of(needless_pass_by_value::NEEDLESS_PASS_BY_VALUE),\n-        LintId::of(non_expressive_names::SIMILAR_NAMES),\n-        LintId::of(option_if_let_else::OPTION_IF_LET_ELSE),\n-        LintId::of(pass_by_ref_or_value::LARGE_TYPES_PASSED_BY_VALUE),\n-        LintId::of(pass_by_ref_or_value::TRIVIALLY_COPY_PASS_BY_REF),\n-        LintId::of(ranges::RANGE_MINUS_ONE),\n-        LintId::of(ranges::RANGE_PLUS_ONE),\n-        LintId::of(redundant_else::REDUNDANT_ELSE),\n-        LintId::of(ref_option_ref::REF_OPTION_REF),\n-        LintId::of(shadow::SHADOW_UNRELATED),\n-        LintId::of(strings::STRING_ADD_ASSIGN),\n-        LintId::of(trait_bounds::TRAIT_DUPLICATION_IN_BOUNDS),\n-        LintId::of(trait_bounds::TYPE_REPETITION_IN_BOUNDS),\n-        LintId::of(transmute::TRANSMUTE_PTR_TO_PTR),\n-        LintId::of(types::LINKEDLIST),\n-        LintId::of(types::OPTION_OPTION),\n-        LintId::of(unicode::NON_ASCII_LITERAL),\n-        LintId::of(unicode::UNICODE_NOT_NFC),\n-        LintId::of(unit_types::LET_UNIT_VALUE),\n-        LintId::of(unnecessary_wraps::UNNECESSARY_WRAPS),\n-        LintId::of(unnested_or_patterns::UNNESTED_OR_PATTERNS),\n-        LintId::of(unused_async::UNUSED_ASYNC),\n-        LintId::of(unused_self::UNUSED_SELF),\n-        LintId::of(wildcard_imports::ENUM_GLOB_USE),\n-        LintId::of(wildcard_imports::WILDCARD_IMPORTS),\n-        LintId::of(zero_sized_map_values::ZERO_SIZED_MAP_VALUES),\n-    ]);\n-\n-    #[cfg(feature = \"internal-lints\")]\n-    store.register_group(true, \"clippy::internal\", Some(\"clippy_internal\"), vec![\n-        LintId::of(utils::internal_lints::CLIPPY_LINTS_INTERNAL),\n-        LintId::of(utils::internal_lints::COLLAPSIBLE_SPAN_LINT_CALLS),\n-        LintId::of(utils::internal_lints::COMPILER_LINT_FUNCTIONS),\n-        LintId::of(utils::internal_lints::DEFAULT_LINT),\n-        LintId::of(utils::internal_lints::IF_CHAIN_STYLE),\n-        LintId::of(utils::internal_lints::INTERNING_DEFINED_SYMBOL),\n-        LintId::of(utils::internal_lints::INVALID_PATHS),\n-        LintId::of(utils::internal_lints::LINT_WITHOUT_LINT_PASS),\n-        LintId::of(utils::internal_lints::MATCH_TYPE_ON_DIAGNOSTIC_ITEM),\n-        LintId::of(utils::internal_lints::OUTER_EXPN_EXPN_DATA),\n-        LintId::of(utils::internal_lints::PRODUCE_ICE),\n-        LintId::of(utils::internal_lints::UNNECESSARY_SYMBOL_STR),\n-    ]);\n+    #[cfg(feature = \"internal-lints\")]\n+    store.register_group(true, \"clippy::internal\", Some(\"clippy_internal\"), vec![\n+        LintId::of(utils::internal_lints::CLIPPY_LINTS_INTERNAL),\n+        LintId::of(utils::internal_lints::COLLAPSIBLE_SPAN_LINT_CALLS),\n+        LintId::of(utils::internal_lints::COMPILER_LINT_FUNCTIONS),\n+        LintId::of(utils::internal_lints::DEFAULT_LINT),\n+        LintId::of(utils::internal_lints::IF_CHAIN_STYLE),\n+        LintId::of(utils::internal_lints::INTERNING_DEFINED_SYMBOL),\n+        LintId::of(utils::internal_lints::INVALID_PATHS),\n+        LintId::of(utils::internal_lints::LINT_WITHOUT_LINT_PASS),\n+        LintId::of(utils::internal_lints::MATCH_TYPE_ON_DIAGNOSTIC_ITEM),\n+        LintId::of(utils::internal_lints::OUTER_EXPN_EXPN_DATA),\n+        LintId::of(utils::internal_lints::PRODUCE_ICE),\n+        LintId::of(utils::internal_lints::UNNECESSARY_SYMBOL_STR),\n+    ]);\n \n     store.register_group(true, \"clippy::all\", Some(\"clippy\"), vec![\n         LintId::of(absurd_extreme_comparisons::ABSURD_EXTREME_COMPARISONS),\n@@ -2048,32 +1763,320 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(vec_init_then_push::VEC_INIT_THEN_PUSH),\n     ]);\n \n-    store.register_group(true, \"clippy::cargo\", Some(\"clippy_cargo\"), vec![\n-        LintId::of(cargo_common_metadata::CARGO_COMMON_METADATA),\n-        LintId::of(multiple_crate_versions::MULTIPLE_CRATE_VERSIONS),\n-        LintId::of(wildcard_dependencies::WILDCARD_DEPENDENCIES),\n-    ]);\n+    store.register_group(true, \"clippy::cargo\", Some(\"clippy_cargo\"), vec![\n+        LintId::of(cargo_common_metadata::CARGO_COMMON_METADATA),\n+        LintId::of(multiple_crate_versions::MULTIPLE_CRATE_VERSIONS),\n+        LintId::of(wildcard_dependencies::WILDCARD_DEPENDENCIES),\n+    ]);\n+\n+    store.register_group(true, \"clippy::nursery\", Some(\"clippy_nursery\"), vec![\n+        LintId::of(attrs::EMPTY_LINE_AFTER_OUTER_ATTR),\n+        LintId::of(cognitive_complexity::COGNITIVE_COMPLEXITY),\n+        LintId::of(disallowed_method::DISALLOWED_METHOD),\n+        LintId::of(fallible_impl_from::FALLIBLE_IMPL_FROM),\n+        LintId::of(floating_point_arithmetic::IMPRECISE_FLOPS),\n+        LintId::of(floating_point_arithmetic::SUBOPTIMAL_FLOPS),\n+        LintId::of(future_not_send::FUTURE_NOT_SEND),\n+        LintId::of(let_if_seq::USELESS_LET_IF_SEQ),\n+        LintId::of(missing_const_for_fn::MISSING_CONST_FOR_FN),\n+        LintId::of(mutable_debug_assertion::DEBUG_ASSERT_WITH_MUT_CALL),\n+        LintId::of(mutex_atomic::MUTEX_INTEGER),\n+        LintId::of(needless_borrow::NEEDLESS_BORROW),\n+        LintId::of(path_buf_push_overwrite::PATH_BUF_PUSH_OVERWRITE),\n+        LintId::of(redundant_pub_crate::REDUNDANT_PUB_CRATE),\n+        LintId::of(regex::TRIVIAL_REGEX),\n+        LintId::of(strings::STRING_LIT_AS_BYTES),\n+        LintId::of(transmute::USELESS_TRANSMUTE),\n+        LintId::of(use_self::USE_SELF),\n+    ]);\n+\n+    #[cfg(feature = \"metadata-collector-lint\")]\n+    {\n+        if std::env::var(\"ENABLE_METADATA_COLLECTION\").eq(&Ok(\"1\".to_string())) {\n+            store.register_late_pass(|| box utils::internal_lints::metadata_collector::MetadataCollector::new());\n+            return;\n+        }\n+    }\n+\n+    // all the internal lints\n+    #[cfg(feature = \"internal-lints\")]\n+    {\n+        store.register_early_pass(|| box utils::internal_lints::ClippyLintsInternal);\n+        store.register_early_pass(|| box utils::internal_lints::ProduceIce);\n+        store.register_late_pass(|| box utils::inspector::DeepCodeInspector);\n+        store.register_late_pass(|| box utils::internal_lints::CollapsibleCalls);\n+        store.register_late_pass(|| box utils::internal_lints::CompilerLintFunctions::new());\n+        store.register_late_pass(|| box utils::internal_lints::IfChainStyle);\n+        store.register_late_pass(|| box utils::internal_lints::InvalidPaths);\n+        store.register_late_pass(|| box utils::internal_lints::InterningDefinedSymbol::default());\n+        store.register_late_pass(|| box utils::internal_lints::LintWithoutLintPass::default());\n+        store.register_late_pass(|| box utils::internal_lints::MatchTypeOnDiagItem);\n+        store.register_late_pass(|| box utils::internal_lints::OuterExpnDataPass);\n+    }\n+\n+    store.register_late_pass(|| box utils::author::Author);\n+    store.register_late_pass(|| box await_holding_invalid::AwaitHolding);\n+    store.register_late_pass(|| box serde_api::SerdeApi);\n+    let vec_box_size_threshold = conf.vec_box_size_threshold;\n+    let type_complexity_threshold = conf.type_complexity_threshold;\n+    store.register_late_pass(move || box types::Types::new(vec_box_size_threshold, type_complexity_threshold));\n+    store.register_late_pass(|| box booleans::NonminimalBool);\n+    store.register_late_pass(|| box needless_bitwise_bool::NeedlessBitwiseBool);\n+    store.register_late_pass(|| box eq_op::EqOp);\n+    store.register_late_pass(|| box enum_clike::UnportableVariant);\n+    store.register_late_pass(|| box float_literal::FloatLiteral);\n+    let verbose_bit_mask_threshold = conf.verbose_bit_mask_threshold;\n+    store.register_late_pass(move || box bit_mask::BitMask::new(verbose_bit_mask_threshold));\n+    store.register_late_pass(|| box ptr::Ptr);\n+    store.register_late_pass(|| box ptr_eq::PtrEq);\n+    store.register_late_pass(|| box needless_bool::NeedlessBool);\n+    store.register_late_pass(|| box needless_bool::BoolComparison);\n+    store.register_late_pass(|| box needless_for_each::NeedlessForEach);\n+    store.register_late_pass(|| box approx_const::ApproxConstant);\n+    store.register_late_pass(|| box misc::MiscLints);\n+    store.register_late_pass(|| box eta_reduction::EtaReduction);\n+    store.register_late_pass(|| box identity_op::IdentityOp);\n+    store.register_late_pass(|| box erasing_op::ErasingOp);\n+    store.register_late_pass(|| box mut_mut::MutMut);\n+    store.register_late_pass(|| box mut_reference::UnnecessaryMutPassed);\n+    store.register_late_pass(|| box len_zero::LenZero);\n+    store.register_late_pass(|| box attrs::Attributes);\n+    store.register_late_pass(|| box blocks_in_if_conditions::BlocksInIfConditions);\n+    store.register_late_pass(|| box collapsible_match::CollapsibleMatch);\n+    store.register_late_pass(|| box unicode::Unicode);\n+    store.register_late_pass(|| box unit_return_expecting_ord::UnitReturnExpectingOrd);\n+    store.register_late_pass(|| box strings::StringAdd);\n+    store.register_late_pass(|| box implicit_return::ImplicitReturn);\n+    store.register_late_pass(|| box implicit_saturating_sub::ImplicitSaturatingSub);\n+    store.register_late_pass(|| box default_numeric_fallback::DefaultNumericFallback);\n+    store.register_late_pass(|| box inconsistent_struct_constructor::InconsistentStructConstructor);\n+    store.register_late_pass(|| box non_octal_unix_permissions::NonOctalUnixPermissions);\n+    store.register_early_pass(|| box unnecessary_self_imports::UnnecessarySelfImports);\n+\n+    let msrv = conf.msrv.as_ref().and_then(|s| {\n+        parse_msrv(s, None, None).or_else(|| {\n+            sess.err(&format!(\"error reading Clippy's configuration file. `{}` is not a valid Rust version\", s));\n+            None\n+        })\n+    });\n+\n+    store.register_late_pass(move || box methods::Methods::new(msrv));\n+    store.register_late_pass(move || box matches::Matches::new(msrv));\n+    store.register_early_pass(move || box manual_non_exhaustive::ManualNonExhaustive::new(msrv));\n+    store.register_late_pass(move || box manual_strip::ManualStrip::new(msrv));\n+    store.register_early_pass(move || box redundant_static_lifetimes::RedundantStaticLifetimes::new(msrv));\n+    store.register_early_pass(move || box redundant_field_names::RedundantFieldNames::new(msrv));\n+    store.register_late_pass(move || box checked_conversions::CheckedConversions::new(msrv));\n+    store.register_late_pass(move || box mem_replace::MemReplace::new(msrv));\n+    store.register_late_pass(move || box ranges::Ranges::new(msrv));\n+    store.register_late_pass(move || box from_over_into::FromOverInto::new(msrv));\n+    store.register_late_pass(move || box use_self::UseSelf::new(msrv));\n+    store.register_late_pass(move || box missing_const_for_fn::MissingConstForFn::new(msrv));\n+    store.register_late_pass(move || box needless_question_mark::NeedlessQuestionMark);\n+    store.register_late_pass(move || box casts::Casts::new(msrv));\n+    store.register_early_pass(move || box unnested_or_patterns::UnnestedOrPatterns::new(msrv));\n+\n+    store.register_late_pass(|| box size_of_in_element_count::SizeOfInElementCount);\n+    store.register_late_pass(|| box map_clone::MapClone);\n+    store.register_late_pass(|| box map_err_ignore::MapErrIgnore);\n+    store.register_late_pass(|| box shadow::Shadow);\n+    store.register_late_pass(|| box unit_types::UnitTypes);\n+    store.register_late_pass(|| box loops::Loops);\n+    store.register_late_pass(|| box main_recursion::MainRecursion::default());\n+    store.register_late_pass(|| box lifetimes::Lifetimes);\n+    store.register_late_pass(|| box entry::HashMapPass);\n+    store.register_late_pass(|| box minmax::MinMaxPass);\n+    store.register_late_pass(|| box open_options::OpenOptions);\n+    store.register_late_pass(|| box zero_div_zero::ZeroDiv);\n+    store.register_late_pass(|| box mutex_atomic::Mutex);\n+    store.register_late_pass(|| box needless_update::NeedlessUpdate);\n+    store.register_late_pass(|| box needless_borrow::NeedlessBorrow::default());\n+    store.register_late_pass(|| box needless_borrowed_ref::NeedlessBorrowedRef);\n+    store.register_late_pass(|| box no_effect::NoEffect);\n+    store.register_late_pass(|| box temporary_assignment::TemporaryAssignment);\n+    store.register_late_pass(|| box transmute::Transmute);\n+    let cognitive_complexity_threshold = conf.cognitive_complexity_threshold;\n+    store.register_late_pass(move || box cognitive_complexity::CognitiveComplexity::new(cognitive_complexity_threshold));\n+    let too_large_for_stack = conf.too_large_for_stack;\n+    store.register_late_pass(move || box escape::BoxedLocal{too_large_for_stack});\n+    store.register_late_pass(move || box vec::UselessVec{too_large_for_stack});\n+    store.register_late_pass(|| box panic_unimplemented::PanicUnimplemented);\n+    store.register_late_pass(|| box strings::StringLitAsBytes);\n+    store.register_late_pass(|| box derive::Derive);\n+    store.register_late_pass(|| box get_last_with_len::GetLastWithLen);\n+    store.register_late_pass(|| box drop_forget_ref::DropForgetRef);\n+    store.register_late_pass(|| box empty_enum::EmptyEnum);\n+    store.register_late_pass(|| box absurd_extreme_comparisons::AbsurdExtremeComparisons);\n+    store.register_late_pass(|| box invalid_upcast_comparisons::InvalidUpcastComparisons);\n+    store.register_late_pass(|| box regex::Regex::default());\n+    store.register_late_pass(|| box copies::CopyAndPaste);\n+    store.register_late_pass(|| box copy_iterator::CopyIterator);\n+    store.register_late_pass(|| box format::UselessFormat);\n+    store.register_late_pass(|| box swap::Swap);\n+    store.register_late_pass(|| box overflow_check_conditional::OverflowCheckConditional);\n+    store.register_late_pass(|| box new_without_default::NewWithoutDefault::default());\n+    let blacklisted_names = conf.blacklisted_names.iter().cloned().collect::<FxHashSet<_>>();\n+    store.register_late_pass(move || box blacklisted_name::BlacklistedName::new(blacklisted_names.clone()));\n+    let too_many_arguments_threshold = conf.too_many_arguments_threshold;\n+    let too_many_lines_threshold = conf.too_many_lines_threshold;\n+    store.register_late_pass(move || box functions::Functions::new(too_many_arguments_threshold, too_many_lines_threshold));\n+    let doc_valid_idents = conf.doc_valid_idents.iter().cloned().collect::<FxHashSet<_>>();\n+    store.register_late_pass(move || box doc::DocMarkdown::new(doc_valid_idents.clone()));\n+    store.register_late_pass(|| box neg_multiply::NegMultiply);\n+    store.register_late_pass(|| box mem_discriminant::MemDiscriminant);\n+    store.register_late_pass(|| box mem_forget::MemForget);\n+    store.register_late_pass(|| box arithmetic::Arithmetic::default());\n+    store.register_late_pass(|| box assign_ops::AssignOps);\n+    store.register_late_pass(|| box let_if_seq::LetIfSeq);\n+    store.register_late_pass(|| box eval_order_dependence::EvalOrderDependence);\n+    store.register_late_pass(|| box missing_doc::MissingDoc::new());\n+    store.register_late_pass(|| box missing_inline::MissingInline);\n+    store.register_late_pass(move || box exhaustive_items::ExhaustiveItems);\n+    store.register_late_pass(|| box if_let_some_result::OkIfLet);\n+    store.register_late_pass(|| box partialeq_ne_impl::PartialEqNeImpl);\n+    store.register_late_pass(|| box unused_io_amount::UnusedIoAmount);\n+    let enum_variant_size_threshold = conf.enum_variant_size_threshold;\n+    store.register_late_pass(move || box large_enum_variant::LargeEnumVariant::new(enum_variant_size_threshold));\n+    store.register_late_pass(|| box explicit_write::ExplicitWrite);\n+    store.register_late_pass(|| box needless_pass_by_value::NeedlessPassByValue);\n+    let pass_by_ref_or_value = pass_by_ref_or_value::PassByRefOrValue::new(\n+        conf.trivial_copy_size_limit,\n+        conf.pass_by_value_size_limit,\n+        &sess.target,\n+    );\n+    store.register_late_pass(move || box pass_by_ref_or_value);\n+    store.register_late_pass(|| box ref_option_ref::RefOptionRef);\n+    store.register_late_pass(|| box try_err::TryErr);\n+    store.register_late_pass(|| box bytecount::ByteCount);\n+    store.register_late_pass(|| box infinite_iter::InfiniteIter);\n+    store.register_late_pass(|| box inline_fn_without_body::InlineFnWithoutBody);\n+    store.register_late_pass(|| box useless_conversion::UselessConversion::default());\n+    store.register_late_pass(|| box implicit_hasher::ImplicitHasher);\n+    store.register_late_pass(|| box fallible_impl_from::FallibleImplFrom);\n+    store.register_late_pass(|| box double_comparison::DoubleComparisons);\n+    store.register_late_pass(|| box question_mark::QuestionMark);\n+    store.register_early_pass(|| box suspicious_operation_groupings::SuspiciousOperationGroupings);\n+    store.register_late_pass(|| box suspicious_trait_impl::SuspiciousImpl);\n+    store.register_late_pass(|| box map_unit_fn::MapUnit);\n+    store.register_late_pass(|| box inherent_impl::MultipleInherentImpl);\n+    store.register_late_pass(|| box neg_cmp_op_on_partial_ord::NoNegCompOpForPartialOrd);\n+    store.register_late_pass(|| box unwrap::Unwrap);\n+    store.register_late_pass(|| box duration_subsec::DurationSubsec);\n+    store.register_late_pass(|| box indexing_slicing::IndexingSlicing);\n+    store.register_late_pass(|| box non_copy_const::NonCopyConst);\n+    store.register_late_pass(|| box ptr_offset_with_cast::PtrOffsetWithCast);\n+    store.register_late_pass(|| box redundant_clone::RedundantClone);\n+    store.register_late_pass(|| box slow_vector_initialization::SlowVectorInit);\n+    store.register_late_pass(|| box unnecessary_sort_by::UnnecessarySortBy);\n+    store.register_late_pass(|| box unnecessary_wraps::UnnecessaryWraps);\n+    store.register_late_pass(|| box assertions_on_constants::AssertionsOnConstants);\n+    store.register_late_pass(|| box transmuting_null::TransmutingNull);\n+    store.register_late_pass(|| box path_buf_push_overwrite::PathBufPushOverwrite);\n+    store.register_late_pass(|| box integer_division::IntegerDivision);\n+    store.register_late_pass(|| box inherent_to_string::InherentToString);\n+    let max_trait_bounds = conf.max_trait_bounds;\n+    store.register_late_pass(move || box trait_bounds::TraitBounds::new(max_trait_bounds));\n+    store.register_late_pass(|| box comparison_chain::ComparisonChain);\n+    store.register_late_pass(|| box mut_key::MutableKeyType);\n+    store.register_late_pass(|| box modulo_arithmetic::ModuloArithmetic);\n+    store.register_early_pass(|| box reference::DerefAddrOf);\n+    store.register_early_pass(|| box reference::RefInDeref);\n+    store.register_early_pass(|| box double_parens::DoubleParens);\n+    store.register_late_pass(|| box to_string_in_display::ToStringInDisplay::new());\n+    store.register_early_pass(|| box unsafe_removed_from_name::UnsafeNameRemoval);\n+    store.register_early_pass(|| box if_not_else::IfNotElse);\n+    store.register_early_pass(|| box else_if_without_else::ElseIfWithoutElse);\n+    store.register_early_pass(|| box int_plus_one::IntPlusOne);\n+    store.register_early_pass(|| box formatting::Formatting);\n+    store.register_early_pass(|| box misc_early::MiscEarlyLints);\n+    store.register_early_pass(|| box redundant_closure_call::RedundantClosureCall);\n+    store.register_late_pass(|| box redundant_closure_call::RedundantClosureCall);\n+    store.register_early_pass(|| box unused_unit::UnusedUnit);\n+    store.register_late_pass(|| box returns::Return);\n+    store.register_early_pass(|| box collapsible_if::CollapsibleIf);\n+    store.register_early_pass(|| box items_after_statements::ItemsAfterStatements);\n+    store.register_early_pass(|| box precedence::Precedence);\n+    store.register_early_pass(|| box needless_continue::NeedlessContinue);\n+    store.register_early_pass(|| box redundant_else::RedundantElse);\n+    store.register_late_pass(|| box create_dir::CreateDir);\n+    store.register_early_pass(|| box needless_arbitrary_self_type::NeedlessArbitrarySelfType);\n+    let cargo_ignore_publish = conf.cargo_ignore_publish;\n+    store.register_late_pass(move || box cargo_common_metadata::CargoCommonMetadata::new(cargo_ignore_publish));\n+    store.register_late_pass(|| box multiple_crate_versions::MultipleCrateVersions);\n+    store.register_late_pass(|| box wildcard_dependencies::WildcardDependencies);\n+    let literal_representation_lint_fraction_readability = conf.unreadable_literal_lint_fractions;\n+    store.register_early_pass(move || box literal_representation::LiteralDigitGrouping::new(literal_representation_lint_fraction_readability));\n+    let literal_representation_threshold = conf.literal_representation_threshold;\n+    store.register_early_pass(move || box literal_representation::DecimalLiteralRepresentation::new(literal_representation_threshold));\n+    let enum_variant_name_threshold = conf.enum_variant_name_threshold;\n+    store.register_early_pass(move || box enum_variants::EnumVariantNames::new(enum_variant_name_threshold));\n+    store.register_early_pass(|| box tabs_in_doc_comments::TabsInDocComments);\n+    let upper_case_acronyms_aggressive = conf.upper_case_acronyms_aggressive;\n+    store.register_early_pass(move || box upper_case_acronyms::UpperCaseAcronyms::new(upper_case_acronyms_aggressive));\n+    store.register_late_pass(|| box default::Default::default());\n+    store.register_late_pass(|| box unused_self::UnusedSelf);\n+    store.register_late_pass(|| box mutable_debug_assertion::DebugAssertWithMutCall);\n+    store.register_late_pass(|| box exit::Exit);\n+    store.register_late_pass(|| box to_digit_is_some::ToDigitIsSome);\n+    let array_size_threshold = conf.array_size_threshold;\n+    store.register_late_pass(move || box large_stack_arrays::LargeStackArrays::new(array_size_threshold));\n+    store.register_late_pass(move || box large_const_arrays::LargeConstArrays::new(array_size_threshold));\n+    store.register_late_pass(|| box floating_point_arithmetic::FloatingPointArithmetic);\n+    store.register_early_pass(|| box as_conversions::AsConversions);\n+    store.register_late_pass(|| box let_underscore::LetUnderscore);\n+    store.register_late_pass(|| box atomic_ordering::AtomicOrdering);\n+    store.register_early_pass(|| box single_component_path_imports::SingleComponentPathImports);\n+    let max_fn_params_bools = conf.max_fn_params_bools;\n+    let max_struct_bools = conf.max_struct_bools;\n+    store.register_early_pass(move || box excessive_bools::ExcessiveBools::new(max_struct_bools, max_fn_params_bools));\n+    store.register_early_pass(|| box option_env_unwrap::OptionEnvUnwrap);\n+    let warn_on_all_wildcard_imports = conf.warn_on_all_wildcard_imports;\n+    store.register_late_pass(move || box wildcard_imports::WildcardImports::new(warn_on_all_wildcard_imports));\n+    store.register_late_pass(|| box verbose_file_reads::VerboseFileReads);\n+    store.register_late_pass(|| box redundant_pub_crate::RedundantPubCrate::default());\n+    store.register_late_pass(|| box unnamed_address::UnnamedAddress);\n+    store.register_late_pass(|| box dereference::Dereferencing::default());\n+    store.register_late_pass(|| box option_if_let_else::OptionIfLetElse);\n+    store.register_late_pass(|| box future_not_send::FutureNotSend);\n+    store.register_late_pass(|| box if_let_mutex::IfLetMutex);\n+    store.register_late_pass(|| box mut_mutex_lock::MutMutexLock);\n+    store.register_late_pass(|| box match_on_vec_items::MatchOnVecItems);\n+    store.register_late_pass(|| box manual_async_fn::ManualAsyncFn);\n+    store.register_late_pass(|| box vec_resize_to_zero::VecResizeToZero);\n+    store.register_late_pass(|| box panic_in_result_fn::PanicInResultFn);\n+    let single_char_binding_names_threshold = conf.single_char_binding_names_threshold;\n+    store.register_early_pass(move || box non_expressive_names::NonExpressiveNames {\n+        single_char_binding_names_threshold,\n+    });\n+    store.register_late_pass(|| box macro_use::MacroUseImports::default());\n+    store.register_late_pass(|| box map_identity::MapIdentity);\n+    store.register_late_pass(|| box pattern_type_mismatch::PatternTypeMismatch);\n+    store.register_late_pass(|| box stable_sort_primitive::StableSortPrimitive);\n+    store.register_late_pass(|| box repeat_once::RepeatOnce);\n+    store.register_late_pass(|| box unwrap_in_result::UnwrapInResult);\n+    store.register_late_pass(|| box self_assignment::SelfAssignment);\n+    store.register_late_pass(|| box manual_unwrap_or::ManualUnwrapOr);\n+    store.register_late_pass(|| box manual_ok_or::ManualOkOr);\n+    store.register_late_pass(|| box float_equality_without_abs::FloatEqualityWithoutAbs);\n+    store.register_late_pass(|| box semicolon_if_nothing_returned::SemicolonIfNothingReturned);\n+    store.register_late_pass(|| box async_yields_async::AsyncYieldsAsync);\n+    let disallowed_methods = conf.disallowed_methods.iter().cloned().collect::<FxHashSet<_>>();\n+    store.register_late_pass(move || box disallowed_method::DisallowedMethod::new(&disallowed_methods));\n+    store.register_early_pass(|| box asm_syntax::InlineAsmX86AttSyntax);\n+    store.register_early_pass(|| box asm_syntax::InlineAsmX86IntelSyntax);\n+    store.register_late_pass(|| box undropped_manually_drops::UndroppedManuallyDrops);\n+    store.register_late_pass(|| box strings::StrToString);\n+    store.register_late_pass(|| box strings::StringToString);\n+    store.register_late_pass(|| box zero_sized_map_values::ZeroSizedMapValues);\n+    store.register_late_pass(|| box vec_init_then_push::VecInitThenPush::default());\n+    store.register_late_pass(|| box case_sensitive_file_extension_comparisons::CaseSensitiveFileExtensionComparisons);\n+    store.register_late_pass(|| box redundant_slicing::RedundantSlicing);\n+    store.register_late_pass(|| box from_str_radix_10::FromStrRadix10);\n+    store.register_late_pass(|| box manual_map::ManualMap);\n+    store.register_late_pass(move || box if_then_some_else_none::IfThenSomeElseNone::new(msrv));\n+    store.register_early_pass(|| box bool_assert_comparison::BoolAssertComparison);\n+    store.register_late_pass(|| box unused_async::UnusedAsync);\n \n-    store.register_group(true, \"clippy::nursery\", Some(\"clippy_nursery\"), vec![\n-        LintId::of(attrs::EMPTY_LINE_AFTER_OUTER_ATTR),\n-        LintId::of(cognitive_complexity::COGNITIVE_COMPLEXITY),\n-        LintId::of(disallowed_method::DISALLOWED_METHOD),\n-        LintId::of(fallible_impl_from::FALLIBLE_IMPL_FROM),\n-        LintId::of(floating_point_arithmetic::IMPRECISE_FLOPS),\n-        LintId::of(floating_point_arithmetic::SUBOPTIMAL_FLOPS),\n-        LintId::of(future_not_send::FUTURE_NOT_SEND),\n-        LintId::of(let_if_seq::USELESS_LET_IF_SEQ),\n-        LintId::of(missing_const_for_fn::MISSING_CONST_FOR_FN),\n-        LintId::of(mutable_debug_assertion::DEBUG_ASSERT_WITH_MUT_CALL),\n-        LintId::of(mutex_atomic::MUTEX_INTEGER),\n-        LintId::of(needless_borrow::NEEDLESS_BORROW),\n-        LintId::of(path_buf_push_overwrite::PATH_BUF_PUSH_OVERWRITE),\n-        LintId::of(redundant_pub_crate::REDUNDANT_PUB_CRATE),\n-        LintId::of(regex::TRIVIAL_REGEX),\n-        LintId::of(strings::STRING_LIT_AS_BYTES),\n-        LintId::of(transmute::USELESS_TRANSMUTE),\n-        LintId::of(use_self::USE_SELF),\n-    ]);\n }\n \n #[rustfmt::skip]"}]}