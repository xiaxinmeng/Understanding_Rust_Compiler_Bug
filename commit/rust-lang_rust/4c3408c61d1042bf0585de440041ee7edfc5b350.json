{"sha": "4c3408c61d1042bf0585de440041ee7edfc5b350", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjMzQwOGM2MWQxMDQyYmYwNTg1ZGU0NDAwNDFlZTdlZGZjNWIzNTA=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-11-05T09:02:11Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-11-05T09:02:11Z"}, "message": "Merge #3408\n\n3408: RIIR update lints: Add check mode (update_lints.py rewrite complete) r=oli-obk a=phansch\n\nThis finishes up the rewrite of `update_lints.py` in Rust. More\r\nspecifically, this\r\n\r\n* adds the `--check` flag and handling to clippy_dev\r\n* tracks file changes over the different calls to `replace_region_in_file`\r\n* only writes changes to files if the `--check` flag is *not* used\r\n* runs `./util/dev update_lints --check` on CI instead of the old script\r\n* replaces usage of the `update_lints.py` script with an error\r\n\r\n`./util/dev update_lints` behaves 99% the same as the python script.\r\nThe only difference that I'm aware of is an ordering change to\r\n`clippy_lints/src/lib.rs` because underscores seem to be sorted\r\ndifferently in Rust and in Python.\r\n\r\n:checkered_flag:\r\n\r\ncc #2882 \n\nCo-authored-by: Philipp Hansch <dev@phansch.net>\nCo-authored-by: Philipp Krones <hello@philkrones.com>", "tree": {"sha": "34b8469202e6fd9e71aaf4b9df7d09758afdd6e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34b8469202e6fd9e71aaf4b9df7d09758afdd6e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c3408c61d1042bf0585de440041ee7edfc5b350", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c3408c61d1042bf0585de440041ee7edfc5b350", "html_url": "https://github.com/rust-lang/rust/commit/4c3408c61d1042bf0585de440041ee7edfc5b350", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c3408c61d1042bf0585de440041ee7edfc5b350/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "7e417d4cbd4c254792b6fb7bb0c13896f9ff42e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e417d4cbd4c254792b6fb7bb0c13896f9ff42e7", "html_url": "https://github.com/rust-lang/rust/commit/7e417d4cbd4c254792b6fb7bb0c13896f9ff42e7"}, {"sha": "745a619657943f2491a02020907c2de18163b0cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/745a619657943f2491a02020907c2de18163b0cd", "html_url": "https://github.com/rust-lang/rust/commit/745a619657943f2491a02020907c2de18163b0cd"}], "stats": {"total": 442, "additions": 128, "deletions": 314}, "files": [{"sha": "50f61eb1e670cc52f0710a527a3beda91dd72bb8", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c3408c61d1042bf0585de440041ee7edfc5b350/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/4c3408c61d1042bf0585de440041ee7edfc5b350/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=4c3408c61d1042bf0585de440041ee7edfc5b350", "patch": "@@ -180,7 +180,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n \n The [`rustc_plugin::PluginRegistry`][plugin_registry] provides two methods to register lints: [register_early_lint_pass][reg_early_lint_pass] and [register_late_lint_pass][reg_late_lint_pass].\n Both take an object that implements an [`EarlyLintPass`][early_lint_pass] or [`LateLintPass`][late_lint_pass] respectively. This is done in every single lint.\n-It's worth noting that the majority of `clippy_lints/src/lib.rs` is autogenerated by `util/update_lints.py` and you don't have to add anything by hand. When you are writing your own lint, you can use that script to save you some time.\n+It's worth noting that the majority of `clippy_lints/src/lib.rs` is autogenerated by `util/dev update_lints` and you don't have to add anything by hand. When you are writing your own lint, you can use that script to save you some time.\n \n ```rust\n // ./clippy_lints/src/else_if_without_else.rs"}, {"sha": "88cc20842e82d4240461d181f2533d9e46e3aa87", "filename": "ci/base-tests.sh", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4c3408c61d1042bf0585de440041ee7edfc5b350/ci%2Fbase-tests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/4c3408c61d1042bf0585de440041ee7edfc5b350/ci%2Fbase-tests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ci%2Fbase-tests.sh?ref=4c3408c61d1042bf0585de440041ee7edfc5b350", "patch": "@@ -23,8 +23,9 @@ cargo test --features debugging\n cd clippy_lints && cargo test && cd ..\n cd rustc_tools_util && cargo test && cd ..\n cd clippy_dev && cargo test && cd ..\n-# check that the lint lists are up-to-date\n-./util/update_lints.py -c\n+\n+# Perform various checks for lint registration\n+./util/dev update_lints --check\n \n CLIPPY=\"`pwd`/target/debug/cargo-clippy clippy\"\n # run clippy on its own codebase..."}, {"sha": "5e1a454195e4f33670a57cec32781bc95f56fa55", "filename": "clippy_dev/src/lib.rs", "status": "modified", "additions": 73, "deletions": 49, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/4c3408c61d1042bf0585de440041ee7edfc5b350/clippy_dev%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c3408c61d1042bf0585de440041ee7edfc5b350/clippy_dev%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flib.rs?ref=4c3408c61d1042bf0585de440041ee7edfc5b350", "patch": "@@ -114,19 +114,22 @@ pub fn gen_changelog_lint_list(lints: Vec<Lint>) -> Vec<String> {\n \n /// Generates the `register_removed` code in `./clippy_lints/src/lib.rs`.\n pub fn gen_deprecated(lints: &[Lint]) -> Vec<String> {\n-    lints.iter()\n-        .filter_map(|l| {\n-            l.clone().deprecation.and_then(|depr_text| {\n-                Some(\n-                    format!(\n-                        \"    store.register_removed(\\n        \\\"{}\\\",\\n        \\\"{}\\\",\\n    );\",\n-                        l.name,\n-                        depr_text\n+    itertools::flatten(\n+        lints\n+            .iter()\n+            .filter_map(|l| {\n+                l.clone().deprecation.and_then(|depr_text| {\n+                    Some(\n+                        vec![\n+                            \"    store.register_removed(\".to_string(),\n+                            format!(\"        \\\"{}\\\",\", l.name),\n+                            format!(\"        \\\"{}\\\",\", depr_text),\n+                            \"    );\".to_string()\n+                        ]\n                     )\n-                )\n+                })\n             })\n-        })\n-        .collect()\n+    ).collect()\n }\n \n /// Gathers all files in `src/clippy_lints` and gathers all lints inside\n@@ -168,23 +171,33 @@ fn lint_files() -> impl Iterator<Item=walkdir::DirEntry> {\n         .filter(|f| f.path().extension() == Some(OsStr::new(\"rs\")))\n }\n \n+/// Whether a file has had its text changed or not\n+#[derive(PartialEq, Debug)]\n+pub struct FileChange {\n+    pub changed: bool,\n+    pub new_lines: String,\n+}\n+\n /// Replace a region in a file delimited by two lines matching regexes.\n ///\n /// `path` is the relative path to the file on which you want to perform the replacement.\n ///\n /// See `replace_region_in_text` for documentation of the other options.\n #[allow(clippy::expect_fun_call)]\n-pub fn replace_region_in_file<F>(path: &str, start: &str, end: &str, replace_start: bool, replacements: F) where F: Fn() -> Vec<String> {\n+pub fn replace_region_in_file<F>(path: &str, start: &str, end: &str, replace_start: bool, write_back: bool, replacements: F) -> FileChange where F: Fn() -> Vec<String> {\n     let mut f = fs::File::open(path).expect(&format!(\"File not found: {}\", path));\n     let mut contents = String::new();\n     f.read_to_string(&mut contents).expect(\"Something went wrong reading the file\");\n-    let replaced = replace_region_in_text(&contents, start, end, replace_start, replacements);\n-\n-    let mut f = fs::File::create(path).expect(&format!(\"File not found: {}\", path));\n-    f.write_all(replaced.as_bytes()).expect(\"Unable to write file\");\n-    // Ensure we write the changes with a trailing newline so that\n-    // the file has the proper line endings.\n-    f.write_all(b\"\\n\").expect(\"Unable to write file\");\n+    let file_change = replace_region_in_text(&contents, start, end, replace_start, replacements);\n+\n+    if write_back {\n+        let mut f = fs::File::create(path).expect(&format!(\"File not found: {}\", path));\n+        f.write_all(file_change.new_lines.as_bytes()).expect(\"Unable to write file\");\n+        // Ensure we write the changes with a trailing newline so that\n+        // the file has the proper line endings.\n+        f.write_all(b\"\\n\").expect(\"Unable to write file\");\n+    }\n+    file_change\n }\n \n /// Replace a region in a text delimited by two lines matching regexes.\n@@ -213,18 +226,18 @@ pub fn replace_region_in_file<F>(path: &str, start: &str, end: &str, replace_sta\n ///     || {\n ///         vec![\"a different\".to_string(), \"text\".to_string()]\n ///     }\n-/// );\n+/// ).new_lines;\n /// assert_eq!(\"replace_start\\na different\\ntext\\nreplace_end\", result);\n /// ```\n-pub fn replace_region_in_text<F>(text: &str, start: &str, end: &str, replace_start: bool, replacements: F) -> String where F: Fn() -> Vec<String> {\n+pub fn replace_region_in_text<F>(text: &str, start: &str, end: &str, replace_start: bool, replacements: F) -> FileChange where F: Fn() -> Vec<String> {\n     let lines = text.lines();\n     let mut in_old_region = false;\n     let mut found = false;\n     let mut new_lines = vec![];\n     let start = Regex::new(start).unwrap();\n     let end = Regex::new(end).unwrap();\n \n-    for line in lines {\n+    for line in lines.clone() {\n         if in_old_region {\n             if end.is_match(&line) {\n                 in_old_region = false;\n@@ -248,7 +261,11 @@ pub fn replace_region_in_text<F>(text: &str, start: &str, end: &str, replace_sta\n         // is incorrect.\n         eprintln!(\"error: regex `{:?}` not found. You may have to update it.\", start);\n     }\n-    new_lines.join(\"\\n\")\n+\n+    FileChange {\n+        changed: lines.ne(new_lines.clone()),\n+        new_lines: new_lines.join(\"\\n\")\n+    }\n }\n \n #[test]\n@@ -292,17 +309,11 @@ declare_deprecated_lint! {\n \n #[test]\n fn test_replace_region() {\n-    let text = r#\"\n-abc\n-123\n-789\n-def\n-ghi\"#;\n-    let expected = r#\"\n-abc\n-hello world\n-def\n-ghi\"#;\n+    let text = \"\\nabc\\n123\\n789\\ndef\\nghi\";\n+    let expected = FileChange {\n+        changed: true,\n+        new_lines: \"\\nabc\\nhello world\\ndef\\nghi\".to_string()\n+    };\n     let result = replace_region_in_text(text, r#\"^\\s*abc$\"#, r#\"^\\s*def\"#, false, || {\n         vec![\"hello world\".to_string()]\n     });\n@@ -311,22 +322,30 @@ ghi\"#;\n \n #[test]\n fn test_replace_region_with_start() {\n-    let text = r#\"\n-abc\n-123\n-789\n-def\n-ghi\"#;\n-    let expected = r#\"\n-hello world\n-def\n-ghi\"#;\n+    let text = \"\\nabc\\n123\\n789\\ndef\\nghi\";\n+    let expected = FileChange {\n+        changed: true,\n+        new_lines: \"\\nhello world\\ndef\\nghi\".to_string()\n+    };\n     let result = replace_region_in_text(text, r#\"^\\s*abc$\"#, r#\"^\\s*def\"#, true, || {\n         vec![\"hello world\".to_string()]\n     });\n     assert_eq!(expected, result);\n }\n \n+#[test]\n+fn test_replace_region_no_changes() {\n+    let text = \"123\\n456\\n789\";\n+    let expected = FileChange {\n+        changed: false,\n+        new_lines: \"123\\n456\\n789\".to_string()\n+    };\n+    let result = replace_region_in_text(text, r#\"^\\s*123$\"#, r#\"^\\s*456\"#, false, || {\n+        vec![]\n+    });\n+    assert_eq!(expected, result);\n+}\n+\n #[test]\n fn test_usable_lints() {\n     let lints = vec![\n@@ -377,14 +396,19 @@ fn test_gen_changelog_lint_list() {\n fn test_gen_deprecated() {\n     let lints = vec![\n         Lint::new(\"should_assert_eq\", \"group1\", \"abc\", Some(\"has been superseeded by should_assert_eq2\"), \"module_name\"),\n+        Lint::new(\"another_deprecated\", \"group2\", \"abc\", Some(\"will be removed\"), \"module_name\"),\n         Lint::new(\"should_assert_eq2\", \"group2\", \"abc\", None, \"module_name\")\n     ];\n     let expected: Vec<String> = vec![\n-        r#\"    store.register_removed(\n-        \"should_assert_eq\",\n-        \"has been superseeded by should_assert_eq2\",\n-    );\"#.to_string()\n-    ];\n+        \"    store.register_removed(\",\n+        \"        \\\"should_assert_eq\\\",\",\n+        \"        \\\"has been superseeded by should_assert_eq2\\\",\",\n+        \"    );\",\n+        \"    store.register_removed(\",\n+        \"        \\\"another_deprecated\\\",\",\n+        \"        \\\"will be removed\\\",\",\n+        \"    );\"\n+    ].into_iter().map(String::from).collect();\n     assert_eq!(expected, gen_deprecated(&lints));\n }\n "}, {"sha": "bfd98968c422deaf9bb8b5019e08878abca377b0", "filename": "clippy_dev/src/main.rs", "status": "modified", "additions": 41, "deletions": 18, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/4c3408c61d1042bf0585de440041ee7edfc5b350/clippy_dev%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c3408c61d1042bf0585de440041ee7edfc5b350/clippy_dev%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fmain.rs?ref=4c3408c61d1042bf0585de440041ee7edfc5b350", "patch": "@@ -15,6 +15,12 @@ extern crate regex;\n use clap::{App, Arg, SubCommand};\n use clippy_dev::*;\n \n+#[derive(PartialEq)]\n+enum UpdateMode {\n+    Check,\n+    Change\n+}\n+\n fn main() {\n     let matches = App::new(\"Clippy developer tooling\")\n         .subcommand(\n@@ -28,17 +34,23 @@ fn main() {\n                 .arg(\n                     Arg::with_name(\"print-only\")\n                         .long(\"print-only\")\n-                        .short(\"p\")\n-                        .help(\"Print a table of lints to STDOUT. This does not include deprecated and internal lints. (Does not modify any files)\"),\n+                        .help(\"Print a table of lints to STDOUT. This does not include deprecated and internal lints. (Does not modify any files)\")\n+                )\n+                .arg(\n+                    Arg::with_name(\"check\")\n+                        .long(\"check\")\n+                        .help(\"Checks that util/dev update_lints has been run. Used on CI.\"),\n                 )\n-        )\n-        .get_matches();\n+            )\n+            .get_matches();\n \n     if let Some(matches) = matches.subcommand_matches(\"update_lints\") {\n         if matches.is_present(\"print-only\") {\n             print_lints();\n+        } else if matches.is_present(\"check\") {\n+            update_lints(&UpdateMode::Check);\n         } else {\n-            update_lints();\n+            update_lints(&UpdateMode::Change);\n         }\n     }\n }\n@@ -63,53 +75,58 @@ fn print_lints() {\n     println!(\"there are {} lints\", lint_count);\n }\n \n-fn update_lints() {\n+fn update_lints(update_mode: &UpdateMode) {\n     let lint_list: Vec<Lint> = gather_all().collect();\n     let usable_lints: Vec<Lint> = Lint::usable_lints(lint_list.clone().into_iter()).collect();\n     let lint_count = usable_lints.len();\n \n-    replace_region_in_file(\n+    let mut file_change = replace_region_in_file(\n         \"../README.md\",\n         r#\"\\[There are \\d+ lints included in this crate!\\]\\(https://rust-lang-nursery.github.io/rust-clippy/master/index.html\\)\"#,\n         \"\",\n         true,\n+        update_mode == &UpdateMode::Change,\n         || {\n             vec![\n                 format!(\"[There are {} lints included in this crate!](https://rust-lang-nursery.github.io/rust-clippy/master/index.html)\", lint_count)\n             ]\n         }\n-    );\n+    ).changed;\n \n-    replace_region_in_file(\n+    file_change |= replace_region_in_file(\n         \"../CHANGELOG.md\",\n         \"<!-- begin autogenerated links to lint list -->\",\n         \"<!-- end autogenerated links to lint list -->\",\n         false,\n+        update_mode == &UpdateMode::Change,\n         || { gen_changelog_lint_list(lint_list.clone()) }\n-    );\n+    ).changed;\n \n-    replace_region_in_file(\n+    file_change |= replace_region_in_file(\n         \"../clippy_lints/src/lib.rs\",\n         \"begin deprecated lints\",\n         \"end deprecated lints\",\n         false,\n+        update_mode == &UpdateMode::Change,\n         || { gen_deprecated(&lint_list) }\n-    );\n+    ).changed;\n \n-    replace_region_in_file(\n+    file_change |= replace_region_in_file(\n         \"../clippy_lints/src/lib.rs\",\n         \"begin lints modules\",\n         \"end lints modules\",\n         false,\n+        update_mode == &UpdateMode::Change,\n         || { gen_modules_list(lint_list.clone()) }\n-    );\n+    ).changed;\n \n     // Generate lists of lints in the clippy::all lint group\n-    replace_region_in_file(\n+    file_change |= replace_region_in_file(\n         \"../clippy_lints/src/lib.rs\",\n         r#\"reg.register_lint_group\\(\"clippy::all\"\"#,\n         r#\"\\]\\);\"#,\n         false,\n+        update_mode == &UpdateMode::Change,\n         || {\n             // clippy::all should only include the following lint groups:\n             let all_group_lints = usable_lints.clone().into_iter().filter(|l| {\n@@ -121,16 +138,22 @@ fn update_lints() {\n \n             gen_lint_group_list(all_group_lints)\n         }\n-    );\n+    ).changed;\n \n     // Generate the list of lints for all other lint groups\n     for (lint_group, lints) in Lint::by_lint_group(&usable_lints) {\n-        replace_region_in_file(\n+        file_change |= replace_region_in_file(\n             \"../clippy_lints/src/lib.rs\",\n             &format!(\"reg.register_lint_group\\\\(\\\"clippy::{}\\\"\", lint_group),\n             r#\"\\]\\);\"#,\n             false,\n+            update_mode == &UpdateMode::Change,\n             || { gen_lint_group_list(lints.clone()) }\n-        );\n+        ).changed;\n+    }\n+\n+    if update_mode == &UpdateMode::Check && file_change {\n+      println!(\"Not all lints defined properly. Please run `util/dev update_lints` to make sure all lints are defined properly.\");\n+      std::process::exit(1);\n     }\n }"}, {"sha": "c93e9d57d6760035b99c0b5eb4c3e423447aba4d", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4c3408c61d1042bf0585de440041ee7edfc5b350/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c3408c61d1042bf0585de440041ee7edfc5b350/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=4c3408c61d1042bf0585de440041ee7edfc5b350", "patch": "@@ -548,8 +548,8 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         bytecount::NAIVE_BYTECOUNT,\n         collapsible_if::COLLAPSIBLE_IF,\n         const_static_lifetime::CONST_STATIC_LIFETIME,\n-        copies::IF_SAME_THEN_ELSE,\n         copies::IFS_SAME_COND,\n+        copies::IF_SAME_THEN_ELSE,\n         cyclomatic_complexity::CYCLOMATIC_COMPLEXITY,\n         derive::DERIVE_HASH_XOR_EQ,\n         double_comparison::DOUBLE_COMPARISONS,\n@@ -743,12 +743,12 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         unused_io_amount::UNUSED_IO_AMOUNT,\n         unused_label::UNUSED_LABEL,\n         vec::USELESS_VEC,\n+        write::PRINTLN_EMPTY_STRING,\n         write::PRINT_LITERAL,\n         write::PRINT_WITH_NEWLINE,\n-        write::PRINTLN_EMPTY_STRING,\n+        write::WRITELN_EMPTY_STRING,\n         write::WRITE_LITERAL,\n         write::WRITE_WITH_NEWLINE,\n-        write::WRITELN_EMPTY_STRING,\n         zero_div_zero::ZERO_DIVIDED_BY_ZERO,\n     ]);\n \n@@ -831,12 +831,12 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         types::IMPLICIT_HASHER,\n         types::LET_UNIT_VALUE,\n         unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME,\n+        write::PRINTLN_EMPTY_STRING,\n         write::PRINT_LITERAL,\n         write::PRINT_WITH_NEWLINE,\n-        write::PRINTLN_EMPTY_STRING,\n+        write::WRITELN_EMPTY_STRING,\n         write::WRITE_LITERAL,\n         write::WRITE_WITH_NEWLINE,\n-        write::WRITELN_EMPTY_STRING,\n     ]);\n \n     reg.register_lint_group(\"clippy::complexity\", Some(\"clippy_complexity\"), vec![\n@@ -916,8 +916,8 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         bit_mask::BAD_BIT_MASK,\n         bit_mask::INEFFECTIVE_BIT_MASK,\n         booleans::LOGIC_BUG,\n-        copies::IF_SAME_THEN_ELSE,\n         copies::IFS_SAME_COND,\n+        copies::IF_SAME_THEN_ELSE,\n         derive::DERIVE_HASH_XOR_EQ,\n         drop_forget_ref::DROP_COPY,\n         drop_forget_ref::DROP_REF,"}, {"sha": "4467b5c0cf7d00f35b432d579b9ad0e3d5472c0a", "filename": "util/update_lints.py", "status": "modified", "additions": 4, "deletions": 238, "changes": 242, "blob_url": "https://github.com/rust-lang/rust/blob/4c3408c61d1042bf0585de440041ee7edfc5b350/util%2Fupdate_lints.py", "raw_url": "https://github.com/rust-lang/rust/raw/4c3408c61d1042bf0585de440041ee7edfc5b350/util%2Fupdate_lints.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fupdate_lints.py?ref=4c3408c61d1042bf0585de440041ee7edfc5b350", "patch": "@@ -10,245 +10,11 @@\n # option. This file may not be copied, modified, or distributed\n # except according to those terms.\n \n-\n-# Generate a Markdown table of all lints, and put it in README.md.\n-# With -n option, only print the new table to stdout.\n-# With -c option, print a warning and set exit status to 1 if a file would be\n-# changed.\n-\n-import os\n-import re\n import sys\n-from subprocess import call\n-\n-declare_deprecated_lint_re = re.compile(r'''\n-    declare_deprecated_lint! \\s* [{(] \\s*\n-    pub \\s+ (?P<name>[A-Z_][A-Z_0-9]*) \\s*,\\s*\n-    \" (?P<desc>(?:[^\"\\\\]+|\\\\.)*) \" \\s* [})]\n-''', re.VERBOSE | re.DOTALL)\n-\n-declare_clippy_lint_re = re.compile(r'''\n-    declare_clippy_lint! \\s* [{(] \\s*\n-    pub \\s+ (?P<name>[A-Z_][A-Z_0-9]*) \\s*,\\s*\n-    (?P<cat>[a-z_]+) \\s*,\\s*\n-    \" (?P<desc>(?:[^\"\\\\]+|\\\\.)*) \" \\s* [})]\n-''', re.VERBOSE | re.DOTALL)\n-\n-nl_escape_re = re.compile(r'\\\\\\n\\s*')\n-\n-docs_link = 'https://rust-lang-nursery.github.io/rust-clippy/master/index.html'\n-\n-\n-def collect(deprecated_lints, clippy_lints, fn):\n-    \"\"\"Collect all lints from a file.\n-\n-    Adds entries to the lints list as `(module, name, level, desc)`.\n-    \"\"\"\n-    with open(fn) as fp:\n-        code = fp.read()\n-\n-    for match in declare_deprecated_lint_re.finditer(code):\n-        # remove \\-newline escapes from description string\n-        desc = nl_escape_re.sub('', match.group('desc'))\n-        deprecated_lints.append((os.path.splitext(os.path.basename(fn))[0],\n-                                match.group('name').lower(),\n-                                desc.replace('\\\\\"', '\"')))\n-\n-    for match in declare_clippy_lint_re.finditer(code):\n-        # remove \\-newline escapes from description string\n-        desc = nl_escape_re.sub('', match.group('desc'))\n-        cat = match.group('cat')\n-        if cat in ('internal', 'internal_warn'):\n-            continue\n-        module_name = os.path.splitext(os.path.basename(fn))[0]\n-        if module_name == 'mod':\n-            module_name = os.path.basename(os.path.dirname(fn))\n-        clippy_lints[cat].append((module_name,\n-                                  match.group('name').lower(),\n-                                  \"allow\",\n-                                  desc.replace('\\\\\"', '\"')))\n-\n-\n-def gen_group(lints):\n-    \"\"\"Write lint group (list of all lints in the form module::NAME).\"\"\"\n-    for (module, name, _, _) in sorted(lints):\n-        yield '        %s::%s,\\n' % (module, name.upper())\n-\n-\n-def gen_mods(lints):\n-    \"\"\"Declare modules\"\"\"\n-\n-    for module in sorted(set(lint[0] for lint in lints)):\n-        yield 'pub mod %s;\\n' % module\n-\n-\n-def gen_deprecated(lints):\n-    \"\"\"Declare deprecated lints\"\"\"\n-\n-    for lint in lints:\n-        yield '    store.register_removed(\\n'\n-        yield '        \"%s\",\\n' % lint[1]\n-        yield '        \"%s\",\\n' % lint[2]\n-        yield '    );\\n'\n-\n-\n-def replace_region(fn, region_start, region_end, callback,\n-                   replace_start=True, write_back=True):\n-    \"\"\"Replace a region in a file delimited by two lines matching regexes.\n-\n-    A callback is called to write the new region.  If `replace_start` is true,\n-    the start delimiter line is replaced as well.  The end delimiter line is\n-    never replaced.\n-    \"\"\"\n-    # read current content\n-    with open(fn) as fp:\n-        lines = list(fp)\n-\n-    found = False\n-\n-    # replace old region with new region\n-    new_lines = []\n-    in_old_region = False\n-    for line in lines:\n-        if in_old_region:\n-            if re.search(region_end, line):\n-                in_old_region = False\n-                new_lines.extend(callback())\n-                new_lines.append(line)\n-        elif re.search(region_start, line):\n-            if not replace_start:\n-                new_lines.append(line)\n-            # old region starts here\n-            in_old_region = True\n-            found = True\n-        else:\n-            new_lines.append(line)\n-\n-    if not found:\n-        print(\"regex \" + region_start + \" not found\")\n-\n-    # write back to file\n-    if write_back:\n-        with open(fn, 'w') as fp:\n-            fp.writelines(new_lines)\n-\n-    # if something changed, return true\n-    return lines != new_lines\n-\n-\n-def main(print_only=False, check=False):\n-    deprecated_lints = []\n-    clippy_lints = {\n-        \"correctness\": [],\n-        \"style\": [],\n-        \"complexity\": [],\n-        \"perf\": [],\n-        \"restriction\": [],\n-        \"pedantic\": [],\n-        \"cargo\": [],\n-        \"nursery\": [],\n-    }\n-\n-    # check directory\n-    if not os.path.isfile('clippy_lints/src/lib.rs'):\n-        print('Error: call this script from clippy checkout directory!')\n-        return\n-\n-    # collect all lints from source files\n-    for root, dirs, files in os.walk('clippy_lints/src'):\n-        for fn in files:\n-            if fn.endswith('.rs'):\n-                collect(deprecated_lints, clippy_lints,\n-                        os.path.join(root, fn))\n-\n-    # determine version\n-    with open('Cargo.toml') as fp:\n-        for line in fp:\n-            if line.startswith('version ='):\n-                clippy_version = line.split()[2].strip('\"')\n-                break\n-        else:\n-            print('Error: version not found in Cargo.toml!')\n-            return\n-\n-    all_lints = []\n-    clippy_lint_groups = [\n-        \"correctness\",\n-        \"style\",\n-        \"complexity\",\n-        \"perf\",\n-    ]\n-    clippy_lint_list = []\n-    for x in clippy_lint_groups:\n-        clippy_lint_list += clippy_lints[x]\n-    for _, value in clippy_lints.iteritems():\n-        all_lints += value\n-\n-    if print_only:\n-        call([\"./util/dev\", \"update_lints\", \"--print-only\"])\n-        return\n-\n-    # update the lint counter in README.md\n-    changed = replace_region(\n-        'README.md',\n-        r'^\\[There are \\d+ lints included in this crate!\\]\\(https://rust-lang-nursery.github.io/rust-clippy/master/index.html\\)$', \"\",\n-        lambda: ['[There are %d lints included in this crate!](https://rust-lang-nursery.github.io/rust-clippy/master/index.html)\\n' %\n-                 (len(all_lints))],\n-        write_back=not check)\n-\n-    # update the links in the CHANGELOG\n-    changed |= replace_region(\n-        'CHANGELOG.md',\n-        \"<!-- begin autogenerated links to lint list -->\",\n-        \"<!-- end autogenerated links to lint list -->\",\n-        lambda: [\"[`{0}`]: {1}#{0}\\n\".format(l[1], docs_link) for l in\n-                 sorted(all_lints + deprecated_lints,\n-                        key=lambda l: l[1])],\n-        replace_start=False, write_back=not check)\n-\n-    # update version of clippy_lints in Cargo.toml\n-    changed |= replace_region(\n-        'Cargo.toml', r'# begin automatic update', '# end automatic update',\n-        lambda: ['clippy_lints = { version = \"%s\", path = \"clippy_lints\" }\\n' %\n-                 clippy_version],\n-        replace_start=False, write_back=not check)\n-\n-    # update version of clippy_lints in Cargo.toml\n-    changed |= replace_region(\n-        'clippy_lints/Cargo.toml', r'# begin automatic update', '# end automatic update',\n-        lambda: ['version = \"%s\"\\n' % clippy_version],\n-        replace_start=False, write_back=not check)\n-\n-    # update the `pub mod` list\n-    changed |= replace_region(\n-        'clippy_lints/src/lib.rs', r'begin lints modules', r'end lints modules',\n-        lambda: gen_mods(all_lints),\n-        replace_start=False, write_back=not check)\n-\n-    # same for \"clippy::*\" lint collections\n-    changed |= replace_region(\n-        'clippy_lints/src/lib.rs', r'reg.register_lint_group\\(\"clippy::all\"', r'\\]\\);',\n-        lambda: gen_group(clippy_lint_list),\n-        replace_start=False, write_back=not check)\n-\n-    for key, value in clippy_lints.iteritems():\n-        # same for \"clippy::*\" lint collections\n-        changed |= replace_region(\n-            'clippy_lints/src/lib.rs', r'reg.register_lint_group\\(\"clippy::' + key + r'\"', r'\\]\\);',\n-            lambda: gen_group(value),\n-            replace_start=False, write_back=not check)\n-\n-    # same for \"deprecated\" lint collection\n-    changed |= replace_region(\n-        'clippy_lints/src/lib.rs', r'begin deprecated lints', r'end deprecated lints',\n-        lambda: gen_deprecated(deprecated_lints),\n-        replace_start=False,\n-        write_back=not check)\n-\n-    if check and changed:\n-        print('Please run util/update_lints.py to regenerate lints lists.')\n-        return 1\n \n+def main():\n+    print('Error: Please use `util/dev` to update lints')\n+    return 1\n \n if __name__ == '__main__':\n-    sys.exit(main(print_only='-n' in sys.argv, check='-c' in sys.argv))\n+    sys.exit(main())"}]}