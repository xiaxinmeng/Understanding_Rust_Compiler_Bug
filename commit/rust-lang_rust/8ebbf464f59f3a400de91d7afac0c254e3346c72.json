{"sha": "8ebbf464f59f3a400de91d7afac0c254e3346c72", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlYmJmNDY0ZjU5ZjNhNDAwZGU5MWQ3YWZhYzBjMjU0ZTMzNDZjNzI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-06-04T17:44:19Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-06-07T01:37:58Z"}, "message": "minor changes to tests so they pass borrowck", "tree": {"sha": "73c770dfdd6ddac9fd8e3aeabe67cfed52f623d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73c770dfdd6ddac9fd8e3aeabe67cfed52f623d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ebbf464f59f3a400de91d7afac0c254e3346c72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ebbf464f59f3a400de91d7afac0c254e3346c72", "html_url": "https://github.com/rust-lang/rust/commit/8ebbf464f59f3a400de91d7afac0c254e3346c72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ebbf464f59f3a400de91d7afac0c254e3346c72/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8dfe179da7ff0c679d6020fe658c8edd076a602", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8dfe179da7ff0c679d6020fe658c8edd076a602", "html_url": "https://github.com/rust-lang/rust/commit/e8dfe179da7ff0c679d6020fe658c8edd076a602"}], "stats": {"total": 44, "additions": 24, "deletions": 20}, "files": [{"sha": "87ab9bbcfea33cc10609cad938ee3437c0317902", "filename": "src/test/auxiliary/cci_nested_lib.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8ebbf464f59f3a400de91d7afac0c254e3346c72/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebbf464f59f3a400de91d7afac0c254e3346c72/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs?ref=8ebbf464f59f3a400de91d7afac0c254e3346c72", "patch": "@@ -1,29 +1,29 @@\n-type alist<A,B> = { eq_fn: fn@(A,A) -> bool, mut data: [(A,B)] };\n+import dvec::{dvec,extensions};\n+\n+type entry<A,B> = {key: A, value: B};\n+type alist<A,B> = { eq_fn: fn@(A,A) -> bool, data: dvec<entry<A,B>> };\n \n fn alist_add<A: copy, B: copy>(lst: alist<A,B>, k: A, v: B) {\n-    lst.data += [(k, v)];\n+    lst.data.push({key:k, value:v});\n }\n \n fn alist_get<A: copy, B: copy>(lst: alist<A,B>, k: A) -> B {\n     let eq_fn = lst.eq_fn;\n-    for lst.data.each {|pair|\n-        let (ki, vi) = pair; // copy req'd for alias analysis\n-        if eq_fn(k, ki) { ret vi; }\n+    for lst.data.each {|entry|\n+        if eq_fn(entry.key, k) { ret entry.value; }\n     }\n     fail;\n }\n \n #[inline]\n fn new_int_alist<B: copy>() -> alist<int, B> {\n     fn eq_int(&&a: int, &&b: int) -> bool { a == b }\n-    ret {eq_fn: eq_int,\n-         mut data: []};\n+    ret {eq_fn: eq_int, data: dvec()};\n }\n \n #[inline]\n fn new_int_alist_2<B: copy>() -> alist<int, B> {\n     #[inline]\n     fn eq_int(&&a: int, &&b: int) -> bool { a == b }\n-    ret {eq_fn: eq_int,\n-         mut data: []};\n+    ret {eq_fn: eq_int, data: dvec()};\n }\n\\ No newline at end of file"}, {"sha": "793bb48c79a7d20493c61daac933a07cce12d64d", "filename": "src/test/compile-fail/issue-511.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ebbf464f59f3a400de91d7afac0c254e3346c72/src%2Ftest%2Fcompile-fail%2Fissue-511.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebbf464f59f3a400de91d7afac0c254e3346c72/src%2Ftest%2Fcompile-fail%2Fissue-511.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-511.rs?ref=8ebbf464f59f3a400de91d7afac0c254e3346c72", "patch": "@@ -8,4 +8,6 @@ fn f<T>(&o: option<T>) {\n fn main() {\n     f::<int>(option::none);\n     //!^ ERROR taking mut reference to static item\n+    //!^^ ERROR illegal borrow unless pure: creating mutable alias to aliasable, immutable memory\n+    //!^^^ NOTE impure due to access to impure function\n }\n\\ No newline at end of file"}, {"sha": "0af65bd18270f5e6fda2a8c9da5a85fc0b9b188e", "filename": "src/test/run-pass/alt-pattern-drop.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ebbf464f59f3a400de91d7afac0c254e3346c72/src%2Ftest%2Frun-pass%2Falt-pattern-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebbf464f59f3a400de91d7afac0c254e3346c72/src%2Ftest%2Frun-pass%2Falt-pattern-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-pattern-drop.rs?ref=8ebbf464f59f3a400de91d7afac0c254e3346c72", "patch": "@@ -25,8 +25,10 @@ fn foo(s: @int) {\n fn main() {\n     let s: @int = @0; // ref up\n \n+    let count = dbg::refcount(s);\n+\n     foo(s); // ref up then down\n \n     log(debug, dbg::refcount(s));\n-    assert (dbg::refcount(s) == 1u);\n+    assert (dbg::refcount(s) == count);\n }"}, {"sha": "1a8f777767205d84d9b5f16f6de9637788ce0544", "filename": "src/test/run-pass/class-implements-multiple-ifaces.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8ebbf464f59f3a400de91d7afac0c254e3346c72/src%2Ftest%2Frun-pass%2Fclass-implements-multiple-ifaces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebbf464f59f3a400de91d7afac0c254e3346c72/src%2Ftest%2Frun-pass%2Fclass-implements-multiple-ifaces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-implements-multiple-ifaces.rs?ref=8ebbf464f59f3a400de91d7afac0c254e3346c72", "patch": "@@ -1,6 +1,7 @@\n use std;\n import std::map::*;\n import vec::*;\n+import dvec::{dvec, extensions};\n \n enum furniture { chair, couch, bed }\n enum body_part { finger, toe, nose, ear }\n@@ -26,7 +27,7 @@ fn vec_includes<T>(xs: [T], x: T) -> bool {\n class cat implements noisy, scratchy, bitey {\n   priv {\n     let meows : @mut uint;\n-    let scratched : @mut [furniture];\n+    let scratched : dvec<furniture>;\n     let bite_counts : hashmap<body_part, uint>;\n \n     fn meow() -> uint {\n@@ -44,7 +45,7 @@ class cat implements noisy, scratchy, bitey {\n \n   new(in_x : uint, in_y : int, in_name: str)\n     { self.meows = @mut in_x; self.how_hungry = @mut in_y;\n-      self.name = in_name; self.scratched = @mut [];\n+      self.name = in_name; self.scratched = dvec();\n       let hsher: hashfn<body_part> =\n         fn@(p: body_part) -> uint { int::hash(p as int) };\n       let eqer : eqfn<body_part> =\n@@ -61,10 +62,10 @@ class cat implements noisy, scratchy, bitey {\n   fn meow_count() -> uint { *self.meows }\n   fn scratch() -> option<furniture> {\n     let all = [chair, couch, bed];\n-    log(error, *(self.scratched));\n+    log(error, self.scratched);\n     let mut rslt = none;\n-    for each(all) {|thing| if !vec_includes(*(self.scratched), thing) {\n-          *self.scratched += [thing];\n+    for each(all) {|thing| if !self.scratched.contains(thing) {\n+          self.scratched.push(thing);\n           ret some(thing); }}\n     rslt\n   }"}, {"sha": "1377bb2a279010dc933f5436fd36b21bbd492d3d", "filename": "src/test/run-pass/iface-cast.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8ebbf464f59f3a400de91d7afac0c254e3346c72/src%2Ftest%2Frun-pass%2Fiface-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebbf464f59f3a400de91d7afac0c254e3346c72/src%2Ftest%2Frun-pass%2Fiface-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fiface-cast.rs?ref=8ebbf464f59f3a400de91d7afac0c254e3346c72", "patch": "@@ -26,10 +26,9 @@ impl of to_str for int {\n \n impl of to_str for Tree {\n     fn to_str() -> str {\n-        #fmt[\"[%s, %s, %s]\",\n-             self.val.to_str(),\n-             self.left.to_str(),\n-             self.right.to_str()]\n+        let l = self.left, r = self.right;\n+        #fmt[\"[%s, %s, %s]\", self.val.to_str(),\n+             l.to_str(), r.to_str()]\n     }\n }\n "}, {"sha": "4f305ff837880fba854294d463425517404c952b", "filename": "src/test/run-pass/maybe-mutable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ebbf464f59f3a400de91d7afac0c254e3346c72/src%2Ftest%2Frun-pass%2Fmaybe-mutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebbf464f59f3a400de91d7afac0c254e3346c72/src%2Ftest%2Frun-pass%2Fmaybe-mutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmaybe-mutable.rs?ref=8ebbf464f59f3a400de91d7afac0c254e3346c72", "patch": "@@ -4,7 +4,7 @@\n // -*- rust -*-\n fn len(v: [const int]) -> uint {\n     let mut i = 0u;\n-    for v.each {|x| i += 1u; }\n+    while i < vec::len(v) { i += 1u; }\n     ret i;\n }\n "}]}