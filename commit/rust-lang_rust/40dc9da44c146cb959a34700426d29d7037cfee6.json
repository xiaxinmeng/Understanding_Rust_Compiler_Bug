{"sha": "40dc9da44c146cb959a34700426d29d7037cfee6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwZGM5ZGE0NGMxNDZjYjk1OWEzNDcwMDQyNmQyOWQ3MDM3Y2ZlZTY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-29T23:49:22Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-30T02:36:57Z"}, "message": "syntax refactor `parse_self_param` (1)", "tree": {"sha": "30d0f55df6fcff68fe4d16e20aaa8fdc2081ecf3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30d0f55df6fcff68fe4d16e20aaa8fdc2081ecf3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40dc9da44c146cb959a34700426d29d7037cfee6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40dc9da44c146cb959a34700426d29d7037cfee6", "html_url": "https://github.com/rust-lang/rust/commit/40dc9da44c146cb959a34700426d29d7037cfee6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40dc9da44c146cb959a34700426d29d7037cfee6/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4fa9c3bca3b0b3fe7d33648bc6bc69df57deb7db", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fa9c3bca3b0b3fe7d33648bc6bc69df57deb7db", "html_url": "https://github.com/rust-lang/rust/commit/4fa9c3bca3b0b3fe7d33648bc6bc69df57deb7db"}], "stats": {"total": 25, "additions": 13, "deletions": 12}, "files": [{"sha": "93de890b222e29d03b899630305c7052acf5de34", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/40dc9da44c146cb959a34700426d29d7037cfee6/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40dc9da44c146cb959a34700426d29d7037cfee6/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=40dc9da44c146cb959a34700426d29d7037cfee6", "patch": "@@ -1259,6 +1259,11 @@ impl<'a> Parser<'a> {\n         Ok(params)\n     }\n \n+    fn is_isolated_self(&self, n: usize) -> bool {\n+        self.is_keyword_ahead(n, &[kw::SelfLower])\n+        && self.look_ahead(n + 1, |t| t != &token::ModSep)\n+    }\n+\n     /// Returns the parsed optional self parameter and whether a self shortcut was used.\n     ///\n     /// See `parse_self_param_with_attrs` to collect attributes.\n@@ -1269,10 +1274,6 @@ impl<'a> Parser<'a> {\n                 { let span = this.token.span; this.bump(); Ident::new(name, span) }\n             _ => unreachable!()\n         };\n-        let isolated_self = |this: &mut Self, n| {\n-            this.look_ahead(n, |t| t.is_keyword(kw::SelfLower)) &&\n-            this.look_ahead(n + 1, |t| t != &token::ModSep)\n-        };\n \n         // Parse optional `self` parameter of a method.\n         // Only a limited set of initial token sequences is considered `self` parameters; anything\n@@ -1285,22 +1286,22 @@ impl<'a> Parser<'a> {\n                 // `&'lt self`\n                 // `&'lt mut self`\n                 // `&not_self`\n-                (if isolated_self(self, 1) {\n+                (if self.is_isolated_self(1) {\n                     self.bump();\n                     SelfKind::Region(None, Mutability::Immutable)\n                 } else if self.is_keyword_ahead(1, &[kw::Mut]) &&\n-                          isolated_self(self, 2) {\n+                          self.is_isolated_self(2) {\n                     self.bump();\n                     self.bump();\n                     SelfKind::Region(None, Mutability::Mutable)\n                 } else if self.look_ahead(1, |t| t.is_lifetime()) &&\n-                          isolated_self(self, 2) {\n+                          self.is_isolated_self(2) {\n                     self.bump();\n                     let lt = self.expect_lifetime();\n                     SelfKind::Region(Some(lt), Mutability::Immutable)\n                 } else if self.look_ahead(1, |t| t.is_lifetime()) &&\n                           self.is_keyword_ahead(2, &[kw::Mut]) &&\n-                          isolated_self(self, 3) {\n+                          self.is_isolated_self(3) {\n                     self.bump();\n                     let lt = self.expect_lifetime();\n                     self.bump();\n@@ -1316,14 +1317,14 @@ impl<'a> Parser<'a> {\n                 // `*not_self`\n                 // Emit special error for `self` cases.\n                 let msg = \"cannot pass `self` by raw pointer\";\n-                (if isolated_self(self, 1) {\n+                (if self.is_isolated_self(1) {\n                     self.bump();\n                     self.struct_span_err(self.token.span, msg)\n                         .span_label(self.token.span, msg)\n                         .emit();\n                     SelfKind::Value(Mutability::Immutable)\n                 } else if self.look_ahead(1, |t| t.is_mutability()) &&\n-                          isolated_self(self, 2) {\n+                          self.is_isolated_self(2) {\n                     self.bump();\n                     self.bump();\n                     self.struct_span_err(self.token.span, msg)\n@@ -1335,7 +1336,7 @@ impl<'a> Parser<'a> {\n                 }, expect_ident(self), self.prev_span)\n             }\n             token::Ident(..) => {\n-                if isolated_self(self, 0) {\n+                if self.is_isolated_self(0) {\n                     // `self`\n                     // `self: TYPE`\n                     let eself_ident = expect_ident(self);\n@@ -1347,7 +1348,7 @@ impl<'a> Parser<'a> {\n                         SelfKind::Value(Mutability::Immutable)\n                     }, eself_ident, eself_hi)\n                 } else if self.token.is_keyword(kw::Mut) &&\n-                          isolated_self(self, 1) {\n+                          self.is_isolated_self(1) {\n                     // `mut self`\n                     // `mut self: TYPE`\n                     self.bump();"}]}