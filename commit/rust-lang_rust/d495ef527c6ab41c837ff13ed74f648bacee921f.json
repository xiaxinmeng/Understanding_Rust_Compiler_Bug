{"sha": "d495ef527c6ab41c837ff13ed74f648bacee921f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0OTVlZjUyN2M2YWI0MWM4MzdmZjEzZWQ3NGY2NDhiYWNlZTkyMWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-10T19:33:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-10T19:33:25Z"}, "message": "Auto merge of #75127 - jyn514:impl-trait, r=pnkfelix\n\nFix async-std by special-casing rustdoc in typeck\n\nhttps://github.com/rust-lang/rust/issues/75100", "tree": {"sha": "b1beb16bc99570e25929d5d0d4badf3078b188b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1beb16bc99570e25929d5d0d4badf3078b188b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d495ef527c6ab41c837ff13ed74f648bacee921f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d495ef527c6ab41c837ff13ed74f648bacee921f", "html_url": "https://github.com/rust-lang/rust/commit/d495ef527c6ab41c837ff13ed74f648bacee921f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d495ef527c6ab41c837ff13ed74f648bacee921f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1275cc15d6aa0597f0b3bbf8aa0750239f9da7b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/1275cc15d6aa0597f0b3bbf8aa0750239f9da7b2", "html_url": "https://github.com/rust-lang/rust/commit/1275cc15d6aa0597f0b3bbf8aa0750239f9da7b2"}, {"sha": "a306e12874e3d9da225e41a904d27dd53629ca54", "url": "https://api.github.com/repos/rust-lang/rust/commits/a306e12874e3d9da225e41a904d27dd53629ca54", "html_url": "https://github.com/rust-lang/rust/commit/a306e12874e3d9da225e41a904d27dd53629ca54"}], "stats": {"total": 231, "additions": 126, "deletions": 105}, "files": [{"sha": "3ba5acd00a09a0dd92ac5cb03d66e1150d2ae6f5", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d495ef527c6ab41c837ff13ed74f648bacee921f/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d495ef527c6ab41c837ff13ed74f648bacee921f/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=d495ef527c6ab41c837ff13ed74f648bacee921f", "patch": "@@ -784,11 +784,18 @@ impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n             // The interface is empty.\n             hir::ItemKind::GlobalAsm(..) => {}\n             hir::ItemKind::OpaqueTy(..) => {\n-                // FIXME: This is some serious pessimization intended to workaround deficiencies\n-                // in the reachability pass (`middle/reachable.rs`). Types are marked as link-time\n-                // reachable if they are returned via `impl Trait`, even from private functions.\n-                let exist_level = cmp::max(item_level, Some(AccessLevel::ReachableFromImplTrait));\n-                self.reach(item.hir_id, exist_level).generics().predicates().ty();\n+                // HACK(jynelson): trying to infer the type of `impl trait` breaks `async-std` (and `pub async fn` in general)\n+                // Since rustdoc never need to do codegen and doesn't care about link-time reachability,\n+                // mark this as unreachable.\n+                // See https://github.com/rust-lang/rust/issues/75100\n+                if !self.tcx.sess.opts.actually_rustdoc {\n+                    // FIXME: This is some serious pessimization intended to workaround deficiencies\n+                    // in the reachability pass (`middle/reachable.rs`). Types are marked as link-time\n+                    // reachable if they are returned via `impl Trait`, even from private functions.\n+                    let exist_level =\n+                        cmp::max(item_level, Some(AccessLevel::ReachableFromImplTrait));\n+                    self.reach(item.hir_id, exist_level).generics().predicates().ty();\n+                }\n             }\n             // Visit everything.\n             hir::ItemKind::Const(..)"}, {"sha": "63e9e9a821502c9f4ea1714a4cbae8a38f513e2e", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d495ef527c6ab41c837ff13ed74f648bacee921f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d495ef527c6ab41c837ff13ed74f648bacee921f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=d495ef527c6ab41c837ff13ed74f648bacee921f", "patch": "@@ -1967,10 +1967,16 @@ pub fn check_item_type<'tcx>(tcx: TyCtxt<'tcx>, it: &'tcx hir::Item<'tcx>) {\n             check_union(tcx, it.hir_id, it.span);\n         }\n         hir::ItemKind::OpaqueTy(hir::OpaqueTy { origin, .. }) => {\n-            let def_id = tcx.hir().local_def_id(it.hir_id);\n-\n-            let substs = InternalSubsts::identity_for_item(tcx, def_id.to_def_id());\n-            check_opaque(tcx, def_id, substs, it.span, &origin);\n+            // HACK(jynelson): trying to infer the type of `impl trait` breaks documenting\n+            // `async-std` (and `pub async fn` in general).\n+            // Since rustdoc doesn't care about the concrete type behind `impl Trait`, just don't look at it!\n+            // See https://github.com/rust-lang/rust/issues/75100\n+            if !tcx.sess.opts.actually_rustdoc {\n+                let def_id = tcx.hir().local_def_id(it.hir_id);\n+\n+                let substs = InternalSubsts::identity_for_item(tcx, def_id.to_def_id());\n+                check_opaque(tcx, def_id, substs, it.span, &origin);\n+            }\n         }\n         hir::ItemKind::TyAlias(..) => {\n             let def_id = tcx.hir().local_def_id(it.hir_id);"}, {"sha": "056090baa22d031aeb0880be08cda2bc2960385d", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d495ef527c6ab41c837ff13ed74f648bacee921f/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d495ef527c6ab41c837ff13ed74f648bacee921f/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=d495ef527c6ab41c837ff13ed74f648bacee921f", "patch": "@@ -390,6 +390,7 @@ pub fn check_crate(tcx: TyCtxt<'_>) -> Result<(), ErrorReported> {\n         tcx.sess.time(\"wf_checking\", || check::check_wf_new(tcx));\n     })?;\n \n+    // NOTE: This is copy/pasted in librustdoc/core.rs and should be kept in sync.\n     tcx.sess.time(\"item_types_checking\", || {\n         for &module in tcx.hir().krate().modules.keys() {\n             tcx.ensure().check_mod_item_types(tcx.hir().local_def_id(module));"}, {"sha": "b13acaae1bf234048cfd2858a33a01312808486d", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d495ef527c6ab41c837ff13ed74f648bacee921f/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d495ef527c6ab41c837ff13ed74f648bacee921f/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=d495ef527c6ab41c837ff13ed74f648bacee921f", "patch": "@@ -452,10 +452,20 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n                 // Certain queries assume that some checks were run elsewhere\n                 // (see https://github.com/rust-lang/rust/pull/73566#issuecomment-656954425),\n                 // so type-check everything other than function bodies in this crate before running lints.\n+\n                 // NOTE: this does not call `tcx.analysis()` so that we won't\n                 // typeck function bodies or run the default rustc lints.\n                 // (see `override_queries` in the `config`)\n-                let _ = rustc_typeck::check_crate(tcx);\n+\n+                // HACK(jynelson) this calls an _extremely_ limited subset of `typeck`\n+                // and might break if queries change their assumptions in the future.\n+\n+                // NOTE: This is copy/pasted from typeck/lib.rs and should be kept in sync with those changes.\n+                tcx.sess.time(\"item_types_checking\", || {\n+                    for &module in tcx.hir().krate().modules.keys() {\n+                        tcx.ensure().check_mod_item_types(tcx.hir().local_def_id(module));\n+                    }\n+                });\n                 tcx.sess.abort_if_errors();\n                 sess.time(\"missing_docs\", || {\n                     rustc_lint::check_crate(tcx, rustc_lint::builtin::MissingDoc::new);"}, {"sha": "cda53bff07a1b0fc8e5d226c989659283d4e6bf7", "filename": "src/test/rustdoc-ui/error-in-impl-trait/async.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d495ef527c6ab41c837ff13ed74f648bacee921f/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fasync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d495ef527c6ab41c837ff13ed74f648bacee921f/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fasync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fasync.rs?ref=d495ef527c6ab41c837ff13ed74f648bacee921f", "patch": "@@ -1,10 +1,7 @@\n // edition:2018\n+// check-pass\n \n-/// This used to work with ResolveBodyWithLoop.\n-/// However now that we ignore type checking instead of modifying the function body,\n-/// the return type is seen as `impl Future<Output = u32>`, not a `u32`.\n-/// So it no longer allows errors in the function body.\n+/// Should compile fine\n pub async fn a() -> u32 {\n     error::_in::async_fn()\n-    //~^ ERROR failed to resolve\n }"}, {"sha": "086db1be722742a717b076c2a2f957f0460e4942", "filename": "src/test/rustdoc-ui/error-in-impl-trait/async.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1275cc15d6aa0597f0b3bbf8aa0750239f9da7b2/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fasync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1275cc15d6aa0597f0b3bbf8aa0750239f9da7b2/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fasync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fasync.stderr?ref=1275cc15d6aa0597f0b3bbf8aa0750239f9da7b2", "patch": "@@ -1,12 +0,0 @@\n-error[E0433]: failed to resolve: could not resolve path `error::_in::async_fn`\n-  --> $DIR/async.rs:8:5\n-   |\n-LL |     error::_in::async_fn()\n-   |     ^^^^^^^^^^^^^^^^^^^^ could not resolve path `error::_in::async_fn`\n-   |\n-   = note: this error was originally ignored because you are running `rustdoc`\n-   = note: try running again with `rustc` or `cargo check` and you may get a more detailed error\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0433`."}, {"sha": "f1fd85bb23cb6cd8da4d9ca229ee6af5304122ba", "filename": "src/test/rustdoc-ui/error-in-impl-trait/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d495ef527c6ab41c837ff13ed74f648bacee921f/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d495ef527c6ab41c837ff13ed74f648bacee921f/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fclosure.rs?ref=d495ef527c6ab41c837ff13ed74f648bacee921f", "patch": "@@ -1,5 +1,5 @@\n+// check-pass\n // manually desugared version of an `async fn` (but with a closure instead of a generator)\n pub fn a() -> impl Fn() -> u32 {\n     || content::doesnt::matter()\n-    //~^ ERROR failed to resolve\n }"}, {"sha": "4ee9c4d1f438dd2f931ca0691249567d5af19f87", "filename": "src/test/rustdoc-ui/error-in-impl-trait/closure.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1275cc15d6aa0597f0b3bbf8aa0750239f9da7b2/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fclosure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1275cc15d6aa0597f0b3bbf8aa0750239f9da7b2/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fclosure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fclosure.stderr?ref=1275cc15d6aa0597f0b3bbf8aa0750239f9da7b2", "patch": "@@ -1,12 +0,0 @@\n-error[E0433]: failed to resolve: could not resolve path `content::doesnt::matter`\n-  --> $DIR/closure.rs:3:8\n-   |\n-LL |     || content::doesnt::matter()\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^ could not resolve path `content::doesnt::matter`\n-   |\n-   = note: this error was originally ignored because you are running `rustdoc`\n-   = note: try running again with `rustc` or `cargo check` and you may get a more detailed error\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0433`."}, {"sha": "dcec379d47e946c0b91fc2fae68a3d50b806a94f", "filename": "src/test/rustdoc-ui/error-in-impl-trait/generic-argument.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d495ef527c6ab41c837ff13ed74f648bacee921f/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fgeneric-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d495ef527c6ab41c837ff13ed74f648bacee921f/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fgeneric-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fgeneric-argument.rs?ref=d495ef527c6ab41c837ff13ed74f648bacee921f", "patch": "@@ -1,7 +1,7 @@\n+// check-pass\n trait ValidTrait {}\n \n /// This has docs\n pub fn f() -> impl ValidTrait {\n     Vec::<DoesNotExist>::new()\n-    //~^ ERROR failed to resolve\n }"}, {"sha": "72716c258dc1ee42d0ba715688d689b94651a9a7", "filename": "src/test/rustdoc-ui/error-in-impl-trait/generic-argument.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1275cc15d6aa0597f0b3bbf8aa0750239f9da7b2/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fgeneric-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1275cc15d6aa0597f0b3bbf8aa0750239f9da7b2/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fgeneric-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fgeneric-argument.stderr?ref=1275cc15d6aa0597f0b3bbf8aa0750239f9da7b2", "patch": "@@ -1,12 +0,0 @@\n-error[E0433]: failed to resolve: could not resolve path `DoesNotExist`\n-  --> $DIR/generic-argument.rs:5:11\n-   |\n-LL |     Vec::<DoesNotExist>::new()\n-   |           ^^^^^^^^^^^^ could not resolve path `DoesNotExist`\n-   |\n-   = note: this error was originally ignored because you are running `rustdoc`\n-   = note: try running again with `rustc` or `cargo check` and you may get a more detailed error\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0433`."}, {"sha": "b935b0832f065ac9a06fc3677f7d2453772bab8f", "filename": "src/test/rustdoc-ui/error-in-impl-trait/impl-keyword-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d495ef527c6ab41c837ff13ed74f648bacee921f/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fimpl-keyword-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d495ef527c6ab41c837ff13ed74f648bacee921f/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fimpl-keyword-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fimpl-keyword-closure.rs?ref=d495ef527c6ab41c837ff13ed74f648bacee921f", "patch": "@@ -1,6 +1,6 @@\n+// check-pass\n pub trait ValidTrait {}\n /// This returns impl trait\n pub fn g() -> impl ValidTrait {\n     (|| error::_in::impl_trait::alias::nested::closure())()\n-    //~^ ERROR failed to resolve\n }"}, {"sha": "55f9b609a1105183d015e75c9481305703b7fd6c", "filename": "src/test/rustdoc-ui/error-in-impl-trait/impl-keyword-closure.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1275cc15d6aa0597f0b3bbf8aa0750239f9da7b2/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fimpl-keyword-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1275cc15d6aa0597f0b3bbf8aa0750239f9da7b2/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fimpl-keyword-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fimpl-keyword-closure.stderr?ref=1275cc15d6aa0597f0b3bbf8aa0750239f9da7b2", "patch": "@@ -1,12 +0,0 @@\n-error[E0433]: failed to resolve: could not resolve path `error::_in::impl_trait::alias::nested::closure`\n-  --> $DIR/impl-keyword-closure.rs:4:9\n-   |\n-LL |     (|| error::_in::impl_trait::alias::nested::closure())()\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ could not resolve path `error::_in::impl_trait::alias::nested::closure`\n-   |\n-   = note: this error was originally ignored because you are running `rustdoc`\n-   = note: try running again with `rustc` or `cargo check` and you may get a more detailed error\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0433`."}, {"sha": "701126f87a1f0fc091845f623bcd66248354a1d1", "filename": "src/test/rustdoc-ui/error-in-impl-trait/impl-keyword.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d495ef527c6ab41c837ff13ed74f648bacee921f/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fimpl-keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d495ef527c6ab41c837ff13ed74f648bacee921f/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fimpl-keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fimpl-keyword.rs?ref=d495ef527c6ab41c837ff13ed74f648bacee921f", "patch": "@@ -1,6 +1,6 @@\n+// check-pass\n pub trait ValidTrait {}\n /// This returns impl trait\n pub fn g() -> impl ValidTrait {\n     error::_in::impl_trait()\n-    //~^ ERROR failed to resolve\n }"}, {"sha": "3257079f94219f2c602bdc09f3559cc90f54cdf0", "filename": "src/test/rustdoc-ui/error-in-impl-trait/impl-keyword.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1275cc15d6aa0597f0b3bbf8aa0750239f9da7b2/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fimpl-keyword.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1275cc15d6aa0597f0b3bbf8aa0750239f9da7b2/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fimpl-keyword.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fimpl-keyword.stderr?ref=1275cc15d6aa0597f0b3bbf8aa0750239f9da7b2", "patch": "@@ -1,12 +0,0 @@\n-error[E0433]: failed to resolve: could not resolve path `error::_in::impl_trait`\n-  --> $DIR/impl-keyword.rs:4:5\n-   |\n-LL |     error::_in::impl_trait()\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ could not resolve path `error::_in::impl_trait`\n-   |\n-   = note: this error was originally ignored because you are running `rustdoc`\n-   = note: try running again with `rustc` or `cargo check` and you may get a more detailed error\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0433`."}, {"sha": "248575d352840ed97c615a767e2103fe8b4b8670", "filename": "src/test/rustdoc-ui/error-in-impl-trait/realistic-async.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d495ef527c6ab41c837ff13ed74f648bacee921f/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Frealistic-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d495ef527c6ab41c837ff13ed74f648bacee921f/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Frealistic-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Frealistic-async.rs?ref=d495ef527c6ab41c837ff13ed74f648bacee921f", "patch": "@@ -0,0 +1,28 @@\n+// edition:2018\n+// check-pass\n+\n+mod windows {\n+    pub trait WinFoo {\n+        fn foo(&self) {}\n+    }\n+\n+    impl WinFoo for () {}\n+}\n+\n+#[cfg(any(windows, doc))]\n+use windows::*;\n+\n+mod unix {\n+    pub trait UnixFoo {\n+        fn foo(&self) {}\n+    }\n+\n+    impl UnixFoo for () {}\n+}\n+\n+#[cfg(any(unix, doc))]\n+use unix::*;\n+\n+async fn bar() {\n+    ().foo()\n+}"}, {"sha": "31dd786cbbf8974bdea235940088b5a8ede648ad", "filename": "src/test/rustdoc-ui/error-in-impl-trait/trait-alias-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d495ef527c6ab41c837ff13ed74f648bacee921f/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Ftrait-alias-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d495ef527c6ab41c837ff13ed74f648bacee921f/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Ftrait-alias-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Ftrait-alias-closure.rs?ref=d495ef527c6ab41c837ff13ed74f648bacee921f", "patch": "@@ -1,3 +1,4 @@\n+// check-pass\n #![feature(type_alias_impl_trait)]\n \n pub trait ValidTrait {}\n@@ -6,5 +7,4 @@ type ImplTrait = impl ValidTrait;\n /// This returns impl trait, but using a type alias\n pub fn h() -> ImplTrait {\n     (|| error::_in::impl_trait::alias::nested::closure())()\n-    //~^ ERROR failed to resolve\n }"}, {"sha": "84b28139dbcd53cb69c7dbae7d8b48ccd6a9a2b6", "filename": "src/test/rustdoc-ui/error-in-impl-trait/trait-alias-closure.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1275cc15d6aa0597f0b3bbf8aa0750239f9da7b2/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Ftrait-alias-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1275cc15d6aa0597f0b3bbf8aa0750239f9da7b2/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Ftrait-alias-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Ftrait-alias-closure.stderr?ref=1275cc15d6aa0597f0b3bbf8aa0750239f9da7b2", "patch": "@@ -1,12 +0,0 @@\n-error[E0433]: failed to resolve: could not resolve path `error::_in::impl_trait::alias::nested::closure`\n-  --> $DIR/trait-alias-closure.rs:8:9\n-   |\n-LL |     (|| error::_in::impl_trait::alias::nested::closure())()\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ could not resolve path `error::_in::impl_trait::alias::nested::closure`\n-   |\n-   = note: this error was originally ignored because you are running `rustdoc`\n-   = note: try running again with `rustc` or `cargo check` and you may get a more detailed error\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0433`."}, {"sha": "c18a024af4bbc88eca84a20d221af858989b75a5", "filename": "src/test/rustdoc-ui/error-in-impl-trait/trait-alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d495ef527c6ab41c837ff13ed74f648bacee921f/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Ftrait-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d495ef527c6ab41c837ff13ed74f648bacee921f/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Ftrait-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Ftrait-alias.rs?ref=d495ef527c6ab41c837ff13ed74f648bacee921f", "patch": "@@ -1,3 +1,4 @@\n+// check-pass\n #![feature(type_alias_impl_trait)]\n \n pub trait ValidTrait {}\n@@ -6,5 +7,4 @@ type ImplTrait = impl ValidTrait;\n /// This returns impl trait, but using a type alias\n pub fn h() -> ImplTrait {\n     error::_in::impl_trait::alias()\n-    //~^ ERROR failed to resolve\n }"}, {"sha": "9be6a3d8d6bba7c69cbe6565ca1aa4c2f344d648", "filename": "src/test/rustdoc-ui/error-in-impl-trait/trait-alias.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1275cc15d6aa0597f0b3bbf8aa0750239f9da7b2/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Ftrait-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1275cc15d6aa0597f0b3bbf8aa0750239f9da7b2/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Ftrait-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Ftrait-alias.stderr?ref=1275cc15d6aa0597f0b3bbf8aa0750239f9da7b2", "patch": "@@ -1,12 +0,0 @@\n-error[E0433]: failed to resolve: could not resolve path `error::_in::impl_trait::alias`\n-  --> $DIR/trait-alias.rs:8:5\n-   |\n-LL |     error::_in::impl_trait::alias()\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ could not resolve path `error::_in::impl_trait::alias`\n-   |\n-   = note: this error was originally ignored because you are running `rustdoc`\n-   = note: try running again with `rustc` or `cargo check` and you may get a more detailed error\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0433`."}, {"sha": "acce0f77a258ea676b803e09ebb0a5332d2072a5", "filename": "src/test/rustdoc-ui/infinite-recursive-type-impl-trait-return.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d495ef527c6ab41c837ff13ed74f648bacee921f/src%2Ftest%2Frustdoc-ui%2Finfinite-recursive-type-impl-trait-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d495ef527c6ab41c837ff13ed74f648bacee921f/src%2Ftest%2Frustdoc-ui%2Finfinite-recursive-type-impl-trait-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Finfinite-recursive-type-impl-trait-return.rs?ref=d495ef527c6ab41c837ff13ed74f648bacee921f", "patch": "@@ -0,0 +1,15 @@\n+// normalize-stderr-test: \"`.*`\" -> \"`DEF_ID`\"\n+// normalize-stdout-test: \"`.*`\" -> \"`DEF_ID`\"\n+// edition:2018\n+\n+pub async fn f() -> impl std::fmt::Debug {\n+    #[derive(Debug)]\n+    enum E {\n+    //~^ ERROR recursive type `f::{{closure}}#0::E` has infinite size\n+        This(E),\n+        Unit,\n+    }\n+    E::Unit\n+}\n+\n+fn main() {}"}, {"sha": "991dc6eec1d200003349c758eae2f07fd0b9c5d5", "filename": "src/test/rustdoc-ui/infinite-recursive-type-impl-trait-return.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d495ef527c6ab41c837ff13ed74f648bacee921f/src%2Ftest%2Frustdoc-ui%2Finfinite-recursive-type-impl-trait-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d495ef527c6ab41c837ff13ed74f648bacee921f/src%2Ftest%2Frustdoc-ui%2Finfinite-recursive-type-impl-trait-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Finfinite-recursive-type-impl-trait-return.stderr?ref=d495ef527c6ab41c837ff13ed74f648bacee921f", "patch": "@@ -0,0 +1,17 @@\n+error[E0072]: recursive type `DEF_ID` has infinite size\n+  --> $DIR/infinite-recursive-type-impl-trait-return.rs:7:5\n+   |\n+LL |     enum E {\n+   |     ^^^^^^ recursive type has infinite size\n+LL |\n+LL |         This(E),\n+   |              - recursive without indirection\n+   |\n+help: insert some indirection (e.g., a `DEF_ID` representable\n+   |\n+LL |         This(Box<E>),\n+   |              ^^^^ ^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `DEF_ID`."}, {"sha": "b3a7ee563130edd75c29a96d36163fdfcb8952b7", "filename": "src/test/rustdoc-ui/infinite-recursive-type-impl-trait.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d495ef527c6ab41c837ff13ed74f648bacee921f/src%2Ftest%2Frustdoc-ui%2Finfinite-recursive-type-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d495ef527c6ab41c837ff13ed74f648bacee921f/src%2Ftest%2Frustdoc-ui%2Finfinite-recursive-type-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Finfinite-recursive-type-impl-trait.rs?ref=d495ef527c6ab41c837ff13ed74f648bacee921f", "patch": "@@ -0,0 +1,7 @@\n+fn f() -> impl Sized {\n+    enum E {\n+    //~^ ERROR recursive type `f::E` has infinite size\n+        V(E),\n+    }\n+    unimplemented!()\n+}"}, {"sha": "ec1bb786fe5adcaf46461055161cba3cfbdde2e1", "filename": "src/test/rustdoc-ui/infinite-recursive-type-impl-trait.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d495ef527c6ab41c837ff13ed74f648bacee921f/src%2Ftest%2Frustdoc-ui%2Finfinite-recursive-type-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d495ef527c6ab41c837ff13ed74f648bacee921f/src%2Ftest%2Frustdoc-ui%2Finfinite-recursive-type-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Finfinite-recursive-type-impl-trait.stderr?ref=d495ef527c6ab41c837ff13ed74f648bacee921f", "patch": "@@ -0,0 +1,17 @@\n+error[E0072]: recursive type `f::E` has infinite size\n+  --> $DIR/infinite-recursive-type-impl-trait.rs:2:5\n+   |\n+LL |     enum E {\n+   |     ^^^^^^ recursive type has infinite size\n+LL |\n+LL |         V(E),\n+   |           - recursive without indirection\n+   |\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `f::E` representable\n+   |\n+LL |         V(Box<E>),\n+   |           ^^^^ ^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0072`."}]}