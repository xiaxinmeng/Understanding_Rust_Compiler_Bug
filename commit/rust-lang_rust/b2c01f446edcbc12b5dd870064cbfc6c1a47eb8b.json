{"sha": "b2c01f446edcbc12b5dd870064cbfc6c1a47eb8b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyYzAxZjQ0NmVkY2JjMTJiNWRkODcwMDY0Y2JmYzZjMWE0N2ViOGI=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-12-06T20:46:18Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-12-06T20:53:31Z"}, "message": "Implement ancestors_with_macros in a better way", "tree": {"sha": "d21f398d8a0ef3898fda2ce044f0c3c402032cb8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d21f398d8a0ef3898fda2ce044f0c3c402032cb8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2c01f446edcbc12b5dd870064cbfc6c1a47eb8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2c01f446edcbc12b5dd870064cbfc6c1a47eb8b", "html_url": "https://github.com/rust-lang/rust/commit/b2c01f446edcbc12b5dd870064cbfc6c1a47eb8b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2c01f446edcbc12b5dd870064cbfc6c1a47eb8b/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c80dc0ad3aee717f9d15c11d300d0eb1c10f1cc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c80dc0ad3aee717f9d15c11d300d0eb1c10f1cc8", "html_url": "https://github.com/rust-lang/rust/commit/c80dc0ad3aee717f9d15c11d300d0eb1c10f1cc8"}], "stats": {"total": 34, "additions": 22, "deletions": 12}, "files": [{"sha": "0e136b90498a7bce38ef110560fc865757fcfa22", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b2c01f446edcbc12b5dd870064cbfc6c1a47eb8b/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2c01f446edcbc12b5dd870064cbfc6c1a47eb8b/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=b2c01f446edcbc12b5dd870064cbfc6c1a47eb8b", "patch": "@@ -76,7 +76,7 @@ fn def_with_body_from_child_node(\n     db: &impl HirDatabase,\n     child: InFile<&SyntaxNode>,\n ) -> Option<DefWithBody> {\n-    ancestors_with_macros(db, child).find_map(|node| {\n+    child.cloned().ancestors_with_macros(db).find_map(|node| {\n         let n = &node.value;\n         match_ast! {\n             match n {\n@@ -89,17 +89,6 @@ fn def_with_body_from_child_node(\n     })\n }\n \n-fn ancestors_with_macros<'a>(\n-    db: &'a (impl HirDatabase),\n-    node: InFile<&SyntaxNode>,\n-) -> impl Iterator<Item = InFile<SyntaxNode>> + 'a {\n-    let file = node.with_value(()); // keep just the file id for borrow checker purposes\n-    let parent_node = node.file_id.call_node(db);\n-    let parent_ancestors: Box<dyn Iterator<Item = InFile<SyntaxNode>>> =\n-        Box::new(parent_node.into_iter().flat_map(move |n| ancestors_with_macros(db, n.as_ref())));\n-    node.value.ancestors().map(move |n| file.with_value(n)).chain(parent_ancestors)\n-}\n-\n /// `SourceAnalyzer` is a convenience wrapper which exposes HIR API in terms of\n /// original source files. It should not be used inside the HIR itself.\n #[derive(Debug)]"}, {"sha": "0a5da7e54795c132479640dcf8a4befc5f1ed5bf", "filename": "crates/ra_hir_expand/src/lib.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b2c01f446edcbc12b5dd870064cbfc6c1a47eb8b/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2c01f446edcbc12b5dd870064cbfc6c1a47eb8b/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Flib.rs?ref=b2c01f446edcbc12b5dd870064cbfc6c1a47eb8b", "patch": "@@ -301,3 +301,24 @@ impl<T> InFile<T> {\n         db.parse_or_expand(self.file_id).expect(\"source created from invalid file\")\n     }\n }\n+\n+impl<T: Clone> InFile<&T> {\n+    pub fn cloned(&self) -> InFile<T> {\n+        self.with_value(self.value.clone())\n+    }\n+}\n+\n+impl InFile<SyntaxNode> {\n+    pub fn ancestors_with_macros<'a>(\n+        self,\n+        db: &'a impl crate::db::AstDatabase,\n+    ) -> impl Iterator<Item = InFile<SyntaxNode>> + 'a {\n+        std::iter::successors(Some(self), move |node| match node.value.parent() {\n+            Some(parent) => Some(node.with_value(parent)),\n+            None => {\n+                let parent_node = node.file_id.call_node(db)?;\n+                Some(parent_node)\n+            }\n+        })\n+    }\n+}"}]}