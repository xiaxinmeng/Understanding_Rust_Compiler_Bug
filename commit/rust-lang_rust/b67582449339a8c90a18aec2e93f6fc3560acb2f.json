{"sha": "b67582449339a8c90a18aec2e93f6fc3560acb2f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2NzU4MjQ0OTMzOWE4YzkwYTE4YWVjMmU5M2Y2ZmMzNTYwYWNiMmY=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-09-01T02:18:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-01T02:18:13Z"}, "message": "Rollup merge of #75945 - pickfire:patch-7, r=jyn514\n\nUse `env::func()`, not 'the function env::func' in docs for std::env\n\nFollow up of https://github.com/rust-lang/rust/pull/75629\n\nr? @jyn514", "tree": {"sha": "39a5035b15ec9d63ad3189d08d06fec90dd5eb2e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39a5035b15ec9d63ad3189d08d06fec90dd5eb2e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b67582449339a8c90a18aec2e93f6fc3560acb2f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfTa9lCRBK7hj4Ov3rIwAAdHIIAHDSnIhFxt2F+ieEAga4kgUF\nNn1iz9dnQ0duxkSArNTAejQPjN/etgr3LwEQCn99AQFuuBJk4RfdERh+RiR1Lluq\nYQASTnZ5HoeQfbWXqljJCTCz/GyyqwRYHFcQAgPh/IJidAdtdUW7Z87oLxJNjjny\nG9fjjsUd+C5nGH2FEtJlQq8DZP1T8S+An8V3gZLBrwO7ViTL+ydQEoJYh8lHHcQK\nbYzgTaMwFZNgPqNPgzADznrYu1i8zRvEE0ledT0zwTtHTbflrA7+eXdTjWo2svAC\ns8mBzFVs9uRVsv31xNLJXuRoy/TNVRlqywm3IwMS30YKErcgloXLwhTUybikoNU=\n=/aZ9\n-----END PGP SIGNATURE-----\n", "payload": "tree 39a5035b15ec9d63ad3189d08d06fec90dd5eb2e\nparent d824b2351449714dc685d90e298c9d630ad6c437\nparent 1d017eb6a4602d18ccae9e8dfcc209fb8382982e\nauthor Tyler Mandry <tmandry@gmail.com> 1598926693 -0700\ncommitter GitHub <noreply@github.com> 1598926693 -0700\n\nRollup merge of #75945 - pickfire:patch-7, r=jyn514\n\nUse `env::func()`, not 'the function env::func' in docs for std::env\n\nFollow up of https://github.com/rust-lang/rust/pull/75629\n\nr? @jyn514\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b67582449339a8c90a18aec2e93f6fc3560acb2f", "html_url": "https://github.com/rust-lang/rust/commit/b67582449339a8c90a18aec2e93f6fc3560acb2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b67582449339a8c90a18aec2e93f6fc3560acb2f/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d824b2351449714dc685d90e298c9d630ad6c437", "url": "https://api.github.com/repos/rust-lang/rust/commits/d824b2351449714dc685d90e298c9d630ad6c437", "html_url": "https://github.com/rust-lang/rust/commit/d824b2351449714dc685d90e298c9d630ad6c437"}, {"sha": "1d017eb6a4602d18ccae9e8dfcc209fb8382982e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d017eb6a4602d18ccae9e8dfcc209fb8382982e", "html_url": "https://github.com/rust-lang/rust/commit/1d017eb6a4602d18ccae9e8dfcc209fb8382982e"}], "stats": {"total": 51, "additions": 25, "deletions": 26}, "files": [{"sha": "970dea6b2991b0fd5ddf99d6a9d40e804433c982", "filename": "library/std/src/env.rs", "status": "modified", "additions": 25, "deletions": 26, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/b67582449339a8c90a18aec2e93f6fc3560acb2f/library%2Fstd%2Fsrc%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b67582449339a8c90a18aec2e93f6fc3560acb2f/library%2Fstd%2Fsrc%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fenv.rs?ref=b67582449339a8c90a18aec2e93f6fc3560acb2f", "patch": "@@ -68,21 +68,19 @@ pub fn set_current_dir<P: AsRef<Path>>(path: P) -> io::Result<()> {\n \n /// An iterator over a snapshot of the environment variables of this process.\n ///\n-/// This structure is created by the [`std::env::vars`] function. See its\n-/// documentation for more.\n+/// This structure is created by [`env::vars()`]. See its documentation for more.\n ///\n-/// [`std::env::vars`]: vars\n+/// [`env::vars()`]: vars\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub struct Vars {\n     inner: VarsOs,\n }\n \n /// An iterator over a snapshot of the environment variables of this process.\n ///\n-/// This structure is created by the [`std::env::vars_os`] function. See\n-/// its documentation for more.\n+/// This structure is created by [`env::vars_os()`]. See its documentation for more.\n ///\n-/// [`std::env::vars_os`]: vars_os\n+/// [`env::vars_os()`]: vars_os\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub struct VarsOs {\n     inner: os_imp::Env,\n@@ -98,10 +96,8 @@ pub struct VarsOs {\n /// # Panics\n ///\n /// While iterating, the returned iterator will panic if any key or value in the\n-/// environment is not valid unicode. If this is not desired, consider using the\n-/// [`env::vars_os`] function.\n-///\n-/// [`env::vars_os`]: vars_os\n+/// environment is not valid unicode. If this is not desired, consider using\n+/// [`env::vars_os()`].\n ///\n /// # Examples\n ///\n@@ -114,6 +110,8 @@ pub struct VarsOs {\n ///     println!(\"{}: {}\", key, value);\n /// }\n /// ```\n+///\n+/// [`env::vars_os()`]: vars_os\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub fn vars() -> Vars {\n     Vars { inner: vars_os() }\n@@ -245,9 +243,9 @@ fn _var_os(key: &OsStr) -> Option<OsString> {\n }\n \n /// The error type for operations interacting with environment variables.\n-/// Possibly returned from the [`env::var`] function.\n+/// Possibly returned from [`env::var()`].\n ///\n-/// [`env::var`]: var\n+/// [`env::var()`]: var\n #[derive(Debug, PartialEq, Eq, Clone)]\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub enum VarError {\n@@ -372,10 +370,10 @@ fn _remove_var(k: &OsStr) {\n ///\n /// The iterator element type is [`PathBuf`].\n ///\n-/// This structure is created by the [`std::env::split_paths`] function. See its\n+/// This structure is created by [`env::split_paths()`]. See its\n /// documentation for more.\n ///\n-/// [`std::env::split_paths`]: split_paths\n+/// [`env::split_paths()`]: split_paths\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub struct SplitPaths<'a> {\n     inner: os_imp::SplitPaths<'a>,\n@@ -426,9 +424,9 @@ impl fmt::Debug for SplitPaths<'_> {\n }\n \n /// The error type for operations on the `PATH` variable. Possibly returned from\n-/// the [`env::join_paths`] function.\n+/// [`env::join_paths()`].\n ///\n-/// [`env::join_paths`]: join_paths\n+/// [`env::join_paths()`]: join_paths\n #[derive(Debug)]\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub struct JoinPathsError {\n@@ -463,7 +461,8 @@ pub struct JoinPathsError {\n /// }\n /// ```\n ///\n-/// Joining a path containing a colon on a Unix-like platform results in an error:\n+/// Joining a path containing a colon on a Unix-like platform results in an\n+/// error:\n ///\n /// ```\n /// # if cfg!(unix) {\n@@ -475,8 +474,8 @@ pub struct JoinPathsError {\n /// # }\n /// ```\n ///\n-/// Using `env::join_paths` with [`env::split_paths`] to append an item to the `PATH` environment\n-/// variable:\n+/// Using `env::join_paths()` with [`env::split_paths()`] to append an item to\n+/// the `PATH` environment variable:\n ///\n /// ```\n /// use std::env;\n@@ -494,7 +493,7 @@ pub struct JoinPathsError {\n /// }\n /// ```\n ///\n-/// [`env::split_paths`]: split_paths\n+/// [`env::split_paths()`]: split_paths\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub fn join_paths<I, T>(paths: I) -> Result<OsString, JoinPathsError>\n where\n@@ -667,14 +666,14 @@ pub fn current_exe() -> io::Result<PathBuf> {\n /// An iterator over the arguments of a process, yielding a [`String`] value for\n /// each argument.\n ///\n-/// This struct is created by the [`std::env::args`] function. See its\n-/// documentation for more.\n+/// This struct is created by [`env::args()`]. See its documentation\n+/// for more.\n ///\n /// The first element is traditionally the path of the executable, but it can be\n /// set to arbitrary text, and may not even exist. This means this property\n /// should not be relied upon for security purposes.\n ///\n-/// [`std::env::args`]: args\n+/// [`env::args()`]: args\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub struct Args {\n     inner: ArgsOs,\n@@ -683,14 +682,14 @@ pub struct Args {\n /// An iterator over the arguments of a process, yielding an [`OsString`] value\n /// for each argument.\n ///\n-/// This struct is created by the [`std::env::args_os`] function. See its\n-/// documentation for more.\n+/// This struct is created by [`env::args_os()`]. See its documentation\n+/// for more.\n ///\n /// The first element is traditionally the path of the executable, but it can be\n /// set to arbitrary text, and may not even exist. This means this property\n /// should not be relied upon for security purposes.\n ///\n-/// [`std::env::args_os`]: args_os\n+/// [`env::args_os()`]: args_os\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub struct ArgsOs {\n     inner: sys::args::Args,"}]}