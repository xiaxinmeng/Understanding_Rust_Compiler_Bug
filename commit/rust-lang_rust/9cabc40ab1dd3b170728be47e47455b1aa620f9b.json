{"sha": "9cabc40ab1dd3b170728be47e47455b1aa620f9b", "node_id": "C_kwDOAAsO6NoAKDljYWJjNDBhYjFkZDNiMTcwNzI4YmU0N2U0NzQ1NWIxYWE2MjBmOWI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-04T19:48:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-04T19:48:18Z"}, "message": "Rollup merge of #108723 - notriddle:notriddle/where-clause, r=GuillaumeGomez\n\nrustdoc: function signature search with traits in `where` clause\n\n## Before\n\n![image](https://user-images.githubusercontent.com/1593513/222873534-a640a72a-c654-4702-9f3b-175129d9591d.png)\n\n## After\n\n![image](https://user-images.githubusercontent.com/1593513/222873544-fdfc431d-2b65-4b56-bede-0302ea9f153a.png)", "tree": {"sha": "82f98ab5a532bd7bfeeecae0d16a32b671335eb8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82f98ab5a532bd7bfeeecae0d16a32b671335eb8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9cabc40ab1dd3b170728be47e47455b1aa620f9b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkA6CCCRBK7hj4Ov3rIwAA3dEIAKv7PknXO+OAkqOaLJTmSrzA\nL4bNONQLhzUJ7TykwcsYnVy8l2Drton48OS6nJSrNS/JeKZ05OiOpWQrMmbjipY4\nPgukD91VTtRjBB2vLzg5lccggAoe/yUvByPxdgo8hQQBgXAnplMKc676B79WNfpD\njnofw9B2w4wYMh4YKskVm+4QU6JtNCo7eOKO0wMOguNq6tWT5wG0kz6uQJanJPTf\njX6P6gda+hE1YX2jrVhAHwG17sXDgB+udMytMHXMvkSJia6X5+M0cwyhj2N++ydn\nLHB9cH8JqjvgufLogKwVqX7iCyVeLSzZX15kyEPf0wN8Bz2s6PaXAhlHPtNOSNQ=\n=ddVu\n-----END PGP SIGNATURE-----\n", "payload": "tree 82f98ab5a532bd7bfeeecae0d16a32b671335eb8\nparent dd6f03de9a5c26851b623f0eb4723ba99df38822\nparent 9d27028391c2e0fcb72527f2bc3aa4107d123a87\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1677959298 +0100\ncommitter GitHub <noreply@github.com> 1677959298 +0100\n\nRollup merge of #108723 - notriddle:notriddle/where-clause, r=GuillaumeGomez\n\nrustdoc: function signature search with traits in `where` clause\n\n## Before\n\n![image](https://user-images.githubusercontent.com/1593513/222873534-a640a72a-c654-4702-9f3b-175129d9591d.png)\n\n## After\n\n![image](https://user-images.githubusercontent.com/1593513/222873544-fdfc431d-2b65-4b56-bede-0302ea9f153a.png)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9cabc40ab1dd3b170728be47e47455b1aa620f9b", "html_url": "https://github.com/rust-lang/rust/commit/9cabc40ab1dd3b170728be47e47455b1aa620f9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9cabc40ab1dd3b170728be47e47455b1aa620f9b/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd6f03de9a5c26851b623f0eb4723ba99df38822", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd6f03de9a5c26851b623f0eb4723ba99df38822", "html_url": "https://github.com/rust-lang/rust/commit/dd6f03de9a5c26851b623f0eb4723ba99df38822"}, {"sha": "9d27028391c2e0fcb72527f2bc3aa4107d123a87", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d27028391c2e0fcb72527f2bc3aa4107d123a87", "html_url": "https://github.com/rust-lang/rust/commit/9d27028391c2e0fcb72527f2bc3aa4107d123a87"}], "stats": {"total": 76, "additions": 55, "deletions": 21}, "files": [{"sha": "e22ac6ec19b008c0a7f8e3d83ea633722529a614", "filename": "src/librustdoc/html/render/search_index.rs", "status": "modified", "additions": 13, "deletions": 21, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9cabc40ab1dd3b170728be47e47455b1aa620f9b/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cabc40ab1dd3b170728be47e47455b1aa620f9b/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs?ref=9cabc40ab1dd3b170728be47e47455b1aa620f9b", "patch": "@@ -7,9 +7,7 @@ use rustc_span::symbol::Symbol;\n use serde::ser::{Serialize, SerializeStruct, Serializer};\n \n use crate::clean;\n-use crate::clean::types::{\n-    FnRetTy, Function, GenericBound, Generics, ItemId, Type, WherePredicate,\n-};\n+use crate::clean::types::{FnRetTy, Function, Generics, ItemId, Type, WherePredicate};\n use crate::formats::cache::{Cache, OrphanImplItem};\n use crate::formats::item_type::ItemType;\n use crate::html::format::join_with_double_colon;\n@@ -482,29 +480,23 @@ fn add_generics_and_bounds_as_types<'tcx, 'a>(\n     if let Type::Generic(arg_s) = *arg {\n         // First we check if the bounds are in a `where` predicate...\n         if let Some(where_pred) = generics.where_predicates.iter().find(|g| match g {\n-            WherePredicate::BoundPredicate { ty, .. } => ty.def_id(cache) == arg.def_id(cache),\n+            WherePredicate::BoundPredicate { ty: Type::Generic(ty_s), .. } => *ty_s == arg_s,\n             _ => false,\n         }) {\n             let mut ty_generics = Vec::new();\n             let bounds = where_pred.get_bounds().unwrap_or_else(|| &[]);\n             for bound in bounds.iter() {\n-                if let GenericBound::TraitBound(poly_trait, _) = bound {\n-                    for param_def in poly_trait.generic_params.iter() {\n-                        match &param_def.kind {\n-                            clean::GenericParamDefKind::Type { default: Some(ty), .. } => {\n-                                add_generics_and_bounds_as_types(\n-                                    self_,\n-                                    generics,\n-                                    ty,\n-                                    tcx,\n-                                    recurse + 1,\n-                                    &mut ty_generics,\n-                                    cache,\n-                                )\n-                            }\n-                            _ => {}\n-                        }\n-                    }\n+                if let Some(path) = bound.get_trait_path() {\n+                    let ty = Type::Path { path };\n+                    add_generics_and_bounds_as_types(\n+                        self_,\n+                        generics,\n+                        &ty,\n+                        tcx,\n+                        recurse + 1,\n+                        &mut ty_generics,\n+                        cache,\n+                    );\n                 }\n             }\n             insert_ty(res, arg.clone(), ty_generics);"}, {"sha": "dee4819e81a9f43116110074227c0df4e7a5d20f", "filename": "tests/rustdoc-js-std/option-type-signatures.js", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9cabc40ab1dd3b170728be47e47455b1aa620f9b/tests%2Frustdoc-js-std%2Foption-type-signatures.js", "raw_url": "https://github.com/rust-lang/rust/raw/9cabc40ab1dd3b170728be47e47455b1aa620f9b/tests%2Frustdoc-js-std%2Foption-type-signatures.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Foption-type-signatures.js?ref=9cabc40ab1dd3b170728be47e47455b1aa620f9b", "patch": "@@ -0,0 +1,7 @@\n+const QUERY = 'option, fnonce -> option';\n+\n+const EXPECTED = {\n+    'others': [\n+        { 'path': 'std::option::Option', 'name': 'map' },\n+    ],\n+};"}, {"sha": "6cb42a455a36901707485c81eb36eb1ac6369b1e", "filename": "tests/rustdoc-js/where-clause.js", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9cabc40ab1dd3b170728be47e47455b1aa620f9b/tests%2Frustdoc-js%2Fwhere-clause.js", "raw_url": "https://github.com/rust-lang/rust/raw/9cabc40ab1dd3b170728be47e47455b1aa620f9b/tests%2Frustdoc-js%2Fwhere-clause.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js%2Fwhere-clause.js?ref=9cabc40ab1dd3b170728be47e47455b1aa620f9b", "patch": "@@ -0,0 +1,19 @@\n+const QUERY = ['trait<nested>', '-> trait<nested>', 't1, t2'];\n+\n+const EXPECTED = [\n+    {\n+        'in_args': [\n+           { 'path': 'where_clause', 'name': 'abracadabra' },\n+        ],\n+    },\n+    {\n+        'others': [\n+            { 'path': 'where_clause', 'name': 'alacazam' },\n+        ],\n+    },\n+    {\n+        'others': [\n+            { 'path': 'where_clause', 'name': 'presto' },\n+        ],\n+    },\n+];"}, {"sha": "808561feee227674592d0c292540247526b663c1", "filename": "tests/rustdoc-js/where-clause.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9cabc40ab1dd3b170728be47e47455b1aa620f9b/tests%2Frustdoc-js%2Fwhere-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cabc40ab1dd3b170728be47e47455b1aa620f9b/tests%2Frustdoc-js%2Fwhere-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js%2Fwhere-clause.rs?ref=9cabc40ab1dd3b170728be47e47455b1aa620f9b", "patch": "@@ -0,0 +1,16 @@\n+pub struct Nested;\n+\n+pub trait Trait<T> {\n+    fn thank_you(x: T);\n+}\n+\n+pub fn abracadabra<X>(_: X) where X: Trait<Nested> {}\n+\n+pub fn alacazam<X>() -> X where X: Trait<Nested> {}\n+\n+pub trait T1 {}\n+pub trait T2<'a, T> {\n+    fn please(_: &'a T);\n+}\n+\n+pub fn presto<A, B>(_: A, _: B) where A: T1, B: for <'b> T2<'b, Nested> {}"}]}