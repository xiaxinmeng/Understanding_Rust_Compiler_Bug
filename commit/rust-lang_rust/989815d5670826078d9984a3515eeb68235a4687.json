{"sha": "989815d5670826078d9984a3515eeb68235a4687", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4OTgxNWQ1NjcwODI2MDc4ZDk5ODRhMzUxNWVlYjY4MjM1YTQ2ODc=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-04-27T21:33:34Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-04-30T09:24:24Z"}, "message": "Extend Printer::buf on demand.\n\nSo that 55 entries (at 48 bytes each) don't need to be eagerly\ninitialized on creation.\n\nThis speeds up numerous rust-perf benchmark runs, by up to 3%.", "tree": {"sha": "96e8f3e49fc64bc30fdca609b028b5613865bf09", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96e8f3e49fc64bc30fdca609b028b5613865bf09"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/989815d5670826078d9984a3515eeb68235a4687", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/989815d5670826078d9984a3515eeb68235a4687", "html_url": "https://github.com/rust-lang/rust/commit/989815d5670826078d9984a3515eeb68235a4687", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/989815d5670826078d9984a3515eeb68235a4687/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f76f6fbdea497c3cb536e33387f405cc74b99b76", "url": "https://api.github.com/repos/rust-lang/rust/commits/f76f6fbdea497c3cb536e33387f405cc74b99b76", "html_url": "https://github.com/rust-lang/rust/commit/f76f6fbdea497c3cb536e33387f405cc74b99b76"}], "stats": {"total": 30, "additions": 23, "deletions": 7}, "files": [{"sha": "e7bd369053cf9c98aed73e40fdfd3e7b2f961686", "filename": "src/libsyntax/print/pp.rs", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/989815d5670826078d9984a3515eeb68235a4687/src%2Flibsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989815d5670826078d9984a3515eeb68235a4687/src%2Flibsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpp.rs?ref=989815d5670826078d9984a3515eeb68235a4687", "patch": "@@ -247,12 +247,14 @@ pub fn mk_printer<'a>(out: Box<io::Write+'a>, linewidth: usize) -> Printer<'a> {\n     debug!(\"mk_printer {}\", linewidth);\n     Printer {\n         out,\n-        buf_len: n,\n+        buf_max_len: n,\n         margin: linewidth as isize,\n         space: linewidth as isize,\n         left: 0,\n         right: 0,\n-        buf: vec![BufEntry { token: Token::Eof, size: 0 }; n],\n+        // Initialize a single entry; advance_right() will extend it on demand\n+        // up to `buf_max_len` elements.\n+        buf: vec![BufEntry::default()],\n         left_total: 0,\n         right_total: 0,\n         scan_stack: VecDeque::new(),\n@@ -263,7 +265,7 @@ pub fn mk_printer<'a>(out: Box<io::Write+'a>, linewidth: usize) -> Printer<'a> {\n \n pub struct Printer<'a> {\n     out: Box<io::Write+'a>,\n-    buf_len: usize,\n+    buf_max_len: usize,\n     /// Width of lines we're constrained to\n     margin: isize,\n     /// Number of spaces left on line\n@@ -297,6 +299,12 @@ struct BufEntry {\n     size: isize,\n }\n \n+impl Default for BufEntry {\n+    fn default() -> Self {\n+        BufEntry { token: Token::Eof, size: 0 }\n+    }\n+}\n+\n impl<'a> Printer<'a> {\n     pub fn last_token(&mut self) -> Token {\n         self.buf[self.right].token.clone()\n@@ -322,7 +330,9 @@ impl<'a> Printer<'a> {\n                 self.right_total = 1;\n                 self.left = 0;\n                 self.right = 0;\n-            } else { self.advance_right(); }\n+            } else {\n+                self.advance_right();\n+            }\n             debug!(\"pp Begin({})/buffer Vec<{},{}>\",\n                    b.offset, self.left, self.right);\n             self.buf[self.right] = BufEntry { token: token, size: -self.right_total };\n@@ -349,7 +359,9 @@ impl<'a> Printer<'a> {\n                 self.right_total = 1;\n                 self.left = 0;\n                 self.right = 0;\n-            } else { self.advance_right(); }\n+            } else {\n+                self.advance_right();\n+            }\n             debug!(\"pp Break({})/buffer Vec<{},{}>\",\n                    b.offset, self.left, self.right);\n             self.check_stack(0);\n@@ -408,7 +420,11 @@ impl<'a> Printer<'a> {\n     }\n     pub fn advance_right(&mut self) {\n         self.right += 1;\n-        self.right %= self.buf_len;\n+        self.right %= self.buf_max_len;\n+        // Extend the buf if necessary.\n+        if self.right == self.buf.len() {\n+            self.buf.push(BufEntry::default());\n+        }\n         assert_ne!(self.right, self.left);\n     }\n     pub fn advance_left(&mut self) -> io::Result<()> {\n@@ -438,7 +454,7 @@ impl<'a> Printer<'a> {\n             }\n \n             self.left += 1;\n-            self.left %= self.buf_len;\n+            self.left %= self.buf_max_len;\n \n             left_size = self.buf[self.left].size;\n         }"}]}