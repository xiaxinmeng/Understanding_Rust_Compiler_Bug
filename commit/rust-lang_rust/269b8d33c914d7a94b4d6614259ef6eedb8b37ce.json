{"sha": "269b8d33c914d7a94b4d6614259ef6eedb8b37ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2OWI4ZDMzYzkxNGQ3YTk0YjRkNjYxNDI1OWVmNmVlZGI4YjM3Y2U=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-03-24T12:39:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-03-24T12:39:30Z"}, "message": "Merge pull request #1575 from tristianc/1537-drop_copy\n\nCalls to mem::drop on Copy types", "tree": {"sha": "8ce8ea8deced782035c80f9367ac7968f1ba226c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ce8ea8deced782035c80f9367ac7968f1ba226c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/269b8d33c914d7a94b4d6614259ef6eedb8b37ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/269b8d33c914d7a94b4d6614259ef6eedb8b37ce", "html_url": "https://github.com/rust-lang/rust/commit/269b8d33c914d7a94b4d6614259ef6eedb8b37ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/269b8d33c914d7a94b4d6614259ef6eedb8b37ce/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f473f7f607b44f894f1c3a18f610d023d2bbddf", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f473f7f607b44f894f1c3a18f610d023d2bbddf", "html_url": "https://github.com/rust-lang/rust/commit/4f473f7f607b44f894f1c3a18f610d023d2bbddf"}, {"sha": "5547fbb770ea27f5a09a93ce5d748ccc30acd670", "url": "https://api.github.com/repos/rust-lang/rust/commits/5547fbb770ea27f5a09a93ce5d748ccc30acd670", "html_url": "https://github.com/rust-lang/rust/commit/5547fbb770ea27f5a09a93ce5d748ccc30acd670"}], "stats": {"total": 304, "additions": 263, "deletions": 41}, "files": [{"sha": "4ace142aa76c0e2aed3aba69fb274114844203c1", "filename": "CHANGELOG.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/269b8d33c914d7a94b4d6614259ef6eedb8b37ce/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/269b8d33c914d7a94b4d6614259ef6eedb8b37ce/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=269b8d33c914d7a94b4d6614259ef6eedb8b37ce", "patch": "@@ -330,6 +330,7 @@ All notable changes to this project will be documented in this file.\n [`doc_markdown`]: https://github.com/Manishearth/rust-clippy/wiki#doc_markdown\n [`double_neg`]: https://github.com/Manishearth/rust-clippy/wiki#double_neg\n [`double_parens`]: https://github.com/Manishearth/rust-clippy/wiki#double_parens\n+[`drop_copy`]: https://github.com/Manishearth/rust-clippy/wiki#drop_copy\n [`drop_ref`]: https://github.com/Manishearth/rust-clippy/wiki#drop_ref\n [`duplicate_underscore_argument`]: https://github.com/Manishearth/rust-clippy/wiki#duplicate_underscore_argument\n [`empty_enum`]: https://github.com/Manishearth/rust-clippy/wiki#empty_enum\n@@ -351,6 +352,7 @@ All notable changes to this project will be documented in this file.\n [`for_kv_map`]: https://github.com/Manishearth/rust-clippy/wiki#for_kv_map\n [`for_loop_over_option`]: https://github.com/Manishearth/rust-clippy/wiki#for_loop_over_option\n [`for_loop_over_result`]: https://github.com/Manishearth/rust-clippy/wiki#for_loop_over_result\n+[`forget_copy`]: https://github.com/Manishearth/rust-clippy/wiki#forget_copy\n [`forget_ref`]: https://github.com/Manishearth/rust-clippy/wiki#forget_ref\n [`get_unwrap`]: https://github.com/Manishearth/rust-clippy/wiki#get_unwrap\n [`identity_op`]: https://github.com/Manishearth/rust-clippy/wiki#identity_op"}, {"sha": "1cfc1fafea2f848eac0af82c19c961dd59706417", "filename": "README.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/269b8d33c914d7a94b4d6614259ef6eedb8b37ce/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/269b8d33c914d7a94b4d6614259ef6eedb8b37ce/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=269b8d33c914d7a94b4d6614259ef6eedb8b37ce", "patch": "@@ -180,7 +180,7 @@ transparently:\n \n ## Lints\n \n-There are 194 lints included in this crate:\n+There are 196 lints included in this crate:\n \n name                                                                                                                   | default | triggers on\n -----------------------------------------------------------------------------------------------------------------------|---------|----------------------------------------------------------------------------------------------------------------------------------\n@@ -218,6 +218,7 @@ name\n [doc_markdown](https://github.com/Manishearth/rust-clippy/wiki#doc_markdown)                                           | warn    | presence of `_`, `::` or camel-case outside backticks in documentation\n [double_neg](https://github.com/Manishearth/rust-clippy/wiki#double_neg)                                               | warn    | `--x`, which is a double negation of `x` and not a pre-decrement as in C/C++\n [double_parens](https://github.com/Manishearth/rust-clippy/wiki#double_parens)                                         | warn    | Warn on unnecessary double parentheses\n+[drop_copy](https://github.com/Manishearth/rust-clippy/wiki#drop_copy)                                                 | warn    | calls to `std::mem::drop` with a value that implements Copy\n [drop_ref](https://github.com/Manishearth/rust-clippy/wiki#drop_ref)                                                   | warn    | calls to `std::mem::drop` with a reference instead of an owned value\n [duplicate_underscore_argument](https://github.com/Manishearth/rust-clippy/wiki#duplicate_underscore_argument)         | warn    | function arguments having names which only differ by an underscore\n [empty_enum](https://github.com/Manishearth/rust-clippy/wiki#empty_enum)                                               | allow   | enum with no variants\n@@ -238,6 +239,7 @@ name\n [for_kv_map](https://github.com/Manishearth/rust-clippy/wiki#for_kv_map)                                               | warn    | looping on a map using `iter` when `keys` or `values` would do\n [for_loop_over_option](https://github.com/Manishearth/rust-clippy/wiki#for_loop_over_option)                           | warn    | for-looping over an `Option`, which is more clearly expressed as an `if let`\n [for_loop_over_result](https://github.com/Manishearth/rust-clippy/wiki#for_loop_over_result)                           | warn    | for-looping over a `Result`, which is more clearly expressed as an `if let`\n+[forget_copy](https://github.com/Manishearth/rust-clippy/wiki#forget_copy)                                             | warn    | calls to `std::mem::forget` with a value that implements Copy\n [forget_ref](https://github.com/Manishearth/rust-clippy/wiki#forget_ref)                                               | warn    | calls to `std::mem::forget` with a reference instead of an owned value\n [get_unwrap](https://github.com/Manishearth/rust-clippy/wiki#get_unwrap)                                               | warn    | using `.get().unwrap()` or `.get_mut().unwrap()` when using `[]` would work instead\n [identity_op](https://github.com/Manishearth/rust-clippy/wiki#identity_op)                                             | warn    | using identity operations, e.g. `x + 0` or `y / 1`"}, {"sha": "688f1cc9eb069c8e32529b679cd87ca5c68151cf", "filename": "clippy_lints/src/drop_forget_ref.rs", "status": "modified", "additions": 82, "deletions": 14, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/269b8d33c914d7a94b4d6614259ef6eedb8b37ce/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/269b8d33c914d7a94b4d6614259ef6eedb8b37ce/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs?ref=269b8d33c914d7a94b4d6614259ef6eedb8b37ce", "patch": "@@ -1,7 +1,7 @@\n use rustc::lint::*;\n use rustc::ty;\n use rustc::hir::*;\n-use utils::{match_def_path, paths, span_note_and_lint};\n+use utils::{match_def_path, paths, span_note_and_lint, is_copy};\n \n /// **What it does:** Checks for calls to `std::mem::drop` with a reference\n /// instead of an owned value.\n@@ -45,12 +45,65 @@ declare_lint! {\n     \"calls to `std::mem::forget` with a reference instead of an owned value\"\n }\n \n+/// **What it does:** Checks for calls to `std::mem::drop` with a value\n+/// that derives the Copy trait\n+///\n+/// **Why is this bad?** Calling `std::mem::drop` [does nothing for types that\n+/// implement Copy](https://doc.rust-lang.org/std/mem/fn.drop.html), since the\n+/// value will be copied and moved into the function on invocation.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// let x:i32 = 42;   // i32 implements Copy\n+/// std::mem::drop(x) // A copy of x is passed to the function, leaving the original unaffected\n+/// ```\n+declare_lint! {\n+    pub DROP_COPY,\n+    Warn,\n+    \"calls to `std::mem::drop` with a value that implements Copy\"\n+}\n+\n+/// **What it does:** Checks for calls to `std::mem::forget` with a value that\n+/// derives the Copy trait\n+///\n+/// **Why is this bad?** Calling `std::mem::forget` [does nothing for types that\n+/// implement Copy](https://doc.rust-lang.org/std/mem/fn.drop.html) since the\n+/// value will be copied and moved into the function on invocation.\n+///\n+/// An alternative, but also valid, explanation is that Copy types do not implement\n+/// the Drop trait, which means they have no destructors. Without a destructor, there\n+/// is nothing for `std::mem::forget` to ignore.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// let x:i32 = 42;     // i32 implements Copy\n+/// std::mem::forget(x) // A copy of x is passed to the function, leaving the original unaffected\n+/// ```\n+declare_lint! {\n+    pub FORGET_COPY,\n+    Warn,\n+    \"calls to `std::mem::forget` with a value that implements Copy\"\n+}\n+\n+const DROP_REF_SUMMARY: &str = \"calls to `std::mem::drop` with a reference instead of an owned value. \\\n+                               Dropping a reference does nothing.\";\n+const FORGET_REF_SUMMARY: &str = \"calls to `std::mem::forget` with a reference instead of an owned value. \\\n+                                 Forgetting a reference does nothing.\";\n+const DROP_COPY_SUMMARY: &str = \"calls to `std::mem::drop` with a value that implements Copy. \\\n+                                Dropping a copy leaves the original intact.\";\n+const FORGET_COPY_SUMMARY: &str = \"calls to `std::mem::forget` with a value that implements Copy. \\\n+                                  Forgetting a copy leaves the original intact.\";\n+\n #[allow(missing_copy_implementations)]\n pub struct Pass;\n \n impl LintPass for Pass {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(DROP_REF, FORGET_REF)\n+        lint_array!(DROP_REF, FORGET_REF, DROP_COPY, FORGET_COPY)\n     }\n }\n \n@@ -64,24 +117,39 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n             let def_id = cx.tables.qpath_def(qpath, path.id).def_id();\n             let lint;\n             let msg;\n-            if match_def_path(cx.tcx, def_id, &paths::DROP) {\n-                lint = DROP_REF;\n-                msg = \"call to `std::mem::drop` with a reference argument. \\\n-                       Dropping a reference does nothing\";\n-            } else if match_def_path(cx.tcx, def_id, &paths::MEM_FORGET) {\n-                lint = FORGET_REF;\n-                msg = \"call to `std::mem::forget` with a reference argument. \\\n-                       Forgetting a reference does nothing\";\n-            } else {\n-                return;\n-            }\n             let arg = &args[0];\n             let arg_ty = cx.tables.expr_ty(arg);\n+\n             if let ty::TyRef(..) = arg_ty.sty {\n+                if match_def_path(cx.tcx, def_id, &paths::DROP) {\n+                    lint = DROP_REF;\n+                    msg = DROP_REF_SUMMARY.to_string();\n+                } else if match_def_path(cx.tcx, def_id, &paths::MEM_FORGET) {\n+                    lint = FORGET_REF;\n+                    msg = FORGET_REF_SUMMARY.to_string();\n+                } else {\n+                    return;\n+                }\n+                span_note_and_lint(cx,\n+                                   lint,\n+                                   expr.span,\n+                                   &msg,\n+                                   arg.span,\n+                                   &format!(\"argument has type {}\", arg_ty.sty));\n+            } else if is_copy(cx, arg_ty, cx.tcx.hir.get_parent(arg.id)) {\n+                if match_def_path(cx.tcx, def_id, &paths::DROP) {\n+                    lint = DROP_COPY;\n+                    msg = DROP_COPY_SUMMARY.to_string();\n+                } else if match_def_path(cx.tcx, def_id, &paths::MEM_FORGET) {\n+                    lint = FORGET_COPY;\n+                    msg = FORGET_COPY_SUMMARY.to_string();\n+                } else {\n+                    return;\n+                }\n                 span_note_and_lint(cx,\n                                    lint,\n                                    expr.span,\n-                                   msg,\n+                                   &msg,\n                                    arg.span,\n                                    &format!(\"argument has type {}\", arg_ty.sty));\n             }"}, {"sha": "068bc5d2e17411703f2fc4c954846a1f459299d6", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/269b8d33c914d7a94b4d6614259ef6eedb8b37ce/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/269b8d33c914d7a94b4d6614259ef6eedb8b37ce/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=269b8d33c914d7a94b4d6614259ef6eedb8b37ce", "patch": "@@ -374,7 +374,9 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         derive::EXPL_IMPL_CLONE_ON_COPY,\n         doc::DOC_MARKDOWN,\n         double_parens::DOUBLE_PARENS,\n+        drop_forget_ref::DROP_COPY,\n         drop_forget_ref::DROP_REF,\n+        drop_forget_ref::FORGET_COPY,\n         drop_forget_ref::FORGET_REF,\n         entry::MAP_ENTRY,\n         enum_clike::ENUM_CLIKE_UNPORTABLE_VARIANT,"}, {"sha": "d92c053476f2d44da09275f18ad2c8d75676cc4c", "filename": "tests/ui/drop_forget_copy.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/269b8d33c914d7a94b4d6614259ef6eedb8b37ce/tests%2Fui%2Fdrop_forget_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/269b8d33c914d7a94b4d6614259ef6eedb8b37ce/tests%2Fui%2Fdrop_forget_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_forget_copy.rs?ref=269b8d33c914d7a94b4d6614259ef6eedb8b37ce", "patch": "@@ -0,0 +1,62 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#![deny(drop_copy, forget_copy)]\n+#![allow(toplevel_ref_arg, drop_ref, forget_ref, unused_mut)]\n+\n+use std::mem::{drop, forget};\n+use std::vec::Vec;\n+\n+#[derive(Copy, Clone)]\n+struct SomeStruct {\n+}\n+\n+struct AnotherStruct {\n+    x: u8,\n+    y: u8,\n+    z: Vec<u8>\n+}\n+\n+impl Clone for AnotherStruct {\n+    fn clone(& self) -> AnotherStruct {\n+        AnotherStruct{x: self.x, y: self.y, z: self.z.clone()}\n+    }\n+}\n+\n+fn main() {\n+    let s1 = SomeStruct {};\n+    let s2 = s1;\n+    let s3 = &s1;\n+    let mut s4 = s1;\n+    let ref s5 = s1;\n+\n+    drop(s1);\n+    drop(s2);\n+    drop(s3);\n+    drop(s4);\n+    drop(s5);\n+\n+    forget(s1);\n+    forget(s2);\n+    forget(s3);\n+    forget(s4);\n+    forget(s5);\n+\n+    let a1 = AnotherStruct {x: 255, y: 0, z: vec![1, 2, 3]};\n+    let a2 = &a1;\n+    let mut a3 = a1.clone();\n+    let ref a4 = a1;\n+    let a5 = a1.clone();\n+\n+    drop(a2);\n+    drop(a3);\n+    drop(a4);\n+    drop(a5);\n+\n+    forget(a2);\n+    let a3 = &a1;\n+    forget(a3);\n+    forget(a4);\n+    let a5 = a1.clone();\n+    forget(a5);\n+}"}, {"sha": "5d95e9f868520cbe0c85ddf78ca1084027dffbb9", "filename": "tests/ui/drop_forget_copy.stderr", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/269b8d33c914d7a94b4d6614259ef6eedb8b37ce/tests%2Fui%2Fdrop_forget_copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/269b8d33c914d7a94b4d6614259ef6eedb8b37ce/tests%2Fui%2Fdrop_forget_copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_forget_copy.stderr?ref=269b8d33c914d7a94b4d6614259ef6eedb8b37ce", "patch": "@@ -0,0 +1,84 @@\n+error: calls to `std::mem::drop` with a value that implements Copy. Dropping a copy leaves the original intact.\n+  --> $DIR/drop_forget_copy.rs:33:5\n+   |\n+33 |     drop(s1);\n+   |     ^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/drop_forget_copy.rs:4:9\n+   |\n+4  | #![deny(drop_copy, forget_copy)]\n+   |         ^^^^^^^^^\n+note: argument has type SomeStruct\n+  --> $DIR/drop_forget_copy.rs:33:10\n+   |\n+33 |     drop(s1);\n+   |          ^^\n+\n+error: calls to `std::mem::drop` with a value that implements Copy. Dropping a copy leaves the original intact.\n+  --> $DIR/drop_forget_copy.rs:34:5\n+   |\n+34 |     drop(s2);\n+   |     ^^^^^^^^\n+   |\n+note: argument has type SomeStruct\n+  --> $DIR/drop_forget_copy.rs:34:10\n+   |\n+34 |     drop(s2);\n+   |          ^^\n+\n+error: calls to `std::mem::drop` with a value that implements Copy. Dropping a copy leaves the original intact.\n+  --> $DIR/drop_forget_copy.rs:36:5\n+   |\n+36 |     drop(s4);\n+   |     ^^^^^^^^\n+   |\n+note: argument has type SomeStruct\n+  --> $DIR/drop_forget_copy.rs:36:10\n+   |\n+36 |     drop(s4);\n+   |          ^^\n+\n+error: calls to `std::mem::forget` with a value that implements Copy. Forgetting a copy leaves the original intact.\n+  --> $DIR/drop_forget_copy.rs:39:5\n+   |\n+39 |     forget(s1);\n+   |     ^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/drop_forget_copy.rs:4:20\n+   |\n+4  | #![deny(drop_copy, forget_copy)]\n+   |                    ^^^^^^^^^^^\n+note: argument has type SomeStruct\n+  --> $DIR/drop_forget_copy.rs:39:12\n+   |\n+39 |     forget(s1);\n+   |            ^^\n+\n+error: calls to `std::mem::forget` with a value that implements Copy. Forgetting a copy leaves the original intact.\n+  --> $DIR/drop_forget_copy.rs:40:5\n+   |\n+40 |     forget(s2);\n+   |     ^^^^^^^^^^\n+   |\n+note: argument has type SomeStruct\n+  --> $DIR/drop_forget_copy.rs:40:12\n+   |\n+40 |     forget(s2);\n+   |            ^^\n+\n+error: calls to `std::mem::forget` with a value that implements Copy. Forgetting a copy leaves the original intact.\n+  --> $DIR/drop_forget_copy.rs:42:5\n+   |\n+42 |     forget(s4);\n+   |     ^^^^^^^^^^\n+   |\n+note: argument has type SomeStruct\n+  --> $DIR/drop_forget_copy.rs:42:12\n+   |\n+42 |     forget(s4);\n+   |            ^^\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "b1d674604118925a482e5e0e5c774b25276dc6e5", "filename": "tests/ui/drop_forget_ref.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/269b8d33c914d7a94b4d6614259ef6eedb8b37ce/tests%2Fui%2Fdrop_forget_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/269b8d33c914d7a94b4d6614259ef6eedb8b37ce/tests%2Fui%2Fdrop_forget_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_forget_ref.stderr?ref=269b8d33c914d7a94b4d6614259ef6eedb8b37ce", "patch": "@@ -1,4 +1,4 @@\n-error: call to `std::mem::drop` with a reference argument. Dropping a reference does nothing\n+error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n   --> $DIR/drop_forget_ref.rs:12:5\n    |\n 12 |     drop(&SomeStruct);\n@@ -15,7 +15,7 @@ note: argument has type &SomeStruct\n 12 |     drop(&SomeStruct);\n    |          ^^^^^^^^^^^\n \n-error: call to `std::mem::forget` with a reference argument. Forgetting a reference does nothing\n+error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n   --> $DIR/drop_forget_ref.rs:13:5\n    |\n 13 |     forget(&SomeStruct);\n@@ -32,7 +32,7 @@ note: argument has type &SomeStruct\n 13 |     forget(&SomeStruct);\n    |            ^^^^^^^^^^^\n \n-error: call to `std::mem::drop` with a reference argument. Dropping a reference does nothing\n+error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n   --> $DIR/drop_forget_ref.rs:16:5\n    |\n 16 |     drop(&owned1);\n@@ -44,7 +44,7 @@ note: argument has type &SomeStruct\n 16 |     drop(&owned1);\n    |          ^^^^^^^\n \n-error: call to `std::mem::drop` with a reference argument. Dropping a reference does nothing\n+error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n   --> $DIR/drop_forget_ref.rs:17:5\n    |\n 17 |     drop(&&owned1);\n@@ -56,7 +56,7 @@ note: argument has type &&SomeStruct\n 17 |     drop(&&owned1);\n    |          ^^^^^^^^\n \n-error: call to `std::mem::drop` with a reference argument. Dropping a reference does nothing\n+error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n   --> $DIR/drop_forget_ref.rs:18:5\n    |\n 18 |     drop(&mut owned1);\n@@ -68,7 +68,7 @@ note: argument has type &mut SomeStruct\n 18 |     drop(&mut owned1);\n    |          ^^^^^^^^^^^\n \n-error: call to `std::mem::forget` with a reference argument. Forgetting a reference does nothing\n+error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n   --> $DIR/drop_forget_ref.rs:21:5\n    |\n 21 |     forget(&owned2);\n@@ -80,7 +80,7 @@ note: argument has type &SomeStruct\n 21 |     forget(&owned2);\n    |            ^^^^^^^\n \n-error: call to `std::mem::forget` with a reference argument. Forgetting a reference does nothing\n+error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n   --> $DIR/drop_forget_ref.rs:22:5\n    |\n 22 |     forget(&&owned2);\n@@ -92,7 +92,7 @@ note: argument has type &&SomeStruct\n 22 |     forget(&&owned2);\n    |            ^^^^^^^^\n \n-error: call to `std::mem::forget` with a reference argument. Forgetting a reference does nothing\n+error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n   --> $DIR/drop_forget_ref.rs:23:5\n    |\n 23 |     forget(&mut owned2);\n@@ -104,7 +104,7 @@ note: argument has type &mut SomeStruct\n 23 |     forget(&mut owned2);\n    |            ^^^^^^^^^^^\n \n-error: call to `std::mem::drop` with a reference argument. Dropping a reference does nothing\n+error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n   --> $DIR/drop_forget_ref.rs:27:5\n    |\n 27 |     drop(reference1);\n@@ -116,7 +116,7 @@ note: argument has type &SomeStruct\n 27 |     drop(reference1);\n    |          ^^^^^^^^^^\n \n-error: call to `std::mem::forget` with a reference argument. Forgetting a reference does nothing\n+error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n   --> $DIR/drop_forget_ref.rs:28:5\n    |\n 28 |     forget(&*reference1);\n@@ -128,7 +128,7 @@ note: argument has type &SomeStruct\n 28 |     forget(&*reference1);\n    |            ^^^^^^^^^^^^\n \n-error: call to `std::mem::drop` with a reference argument. Dropping a reference does nothing\n+error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n   --> $DIR/drop_forget_ref.rs:31:5\n    |\n 31 |     drop(reference2);\n@@ -140,7 +140,7 @@ note: argument has type &mut SomeStruct\n 31 |     drop(reference2);\n    |          ^^^^^^^^^^\n \n-error: call to `std::mem::forget` with a reference argument. Forgetting a reference does nothing\n+error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n   --> $DIR/drop_forget_ref.rs:33:5\n    |\n 33 |     forget(reference3);\n@@ -152,7 +152,7 @@ note: argument has type &mut SomeStruct\n 33 |     forget(reference3);\n    |            ^^^^^^^^^^\n \n-error: call to `std::mem::drop` with a reference argument. Dropping a reference does nothing\n+error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n   --> $DIR/drop_forget_ref.rs:36:5\n    |\n 36 |     drop(reference4);\n@@ -164,7 +164,7 @@ note: argument has type &SomeStruct\n 36 |     drop(reference4);\n    |          ^^^^^^^^^^\n \n-error: call to `std::mem::forget` with a reference argument. Forgetting a reference does nothing\n+error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n   --> $DIR/drop_forget_ref.rs:37:5\n    |\n 37 |     forget(reference4);\n@@ -176,7 +176,7 @@ note: argument has type &SomeStruct\n 37 |     forget(reference4);\n    |            ^^^^^^^^^^\n \n-error: call to `std::mem::drop` with a reference argument. Dropping a reference does nothing\n+error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n   --> $DIR/drop_forget_ref.rs:42:5\n    |\n 42 |     drop(&val);\n@@ -188,7 +188,7 @@ note: argument has type &T\n 42 |     drop(&val);\n    |          ^^^^\n \n-error: call to `std::mem::forget` with a reference argument. Forgetting a reference does nothing\n+error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n   --> $DIR/drop_forget_ref.rs:48:5\n    |\n 48 |     forget(&val);\n@@ -200,7 +200,7 @@ note: argument has type &T\n 48 |     forget(&val);\n    |            ^^^^\n \n-error: call to `std::mem::drop` with a reference argument. Dropping a reference does nothing\n+error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n   --> $DIR/drop_forget_ref.rs:56:5\n    |\n 56 |     std::mem::drop(&SomeStruct);\n@@ -212,7 +212,7 @@ note: argument has type &SomeStruct\n 56 |     std::mem::drop(&SomeStruct);\n    |                    ^^^^^^^^^^^\n \n-error: call to `std::mem::forget` with a reference argument. Forgetting a reference does nothing\n+error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n   --> $DIR/drop_forget_ref.rs:59:5\n    |\n 59 |     std::mem::forget(&SomeStruct);"}, {"sha": "e553afcf05f6a8ad896edda7c87d1059eccb5395", "filename": "tests/ui/mem_forget.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/269b8d33c914d7a94b4d6614259ef6eedb8b37ce/tests%2Fui%2Fmem_forget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/269b8d33c914d7a94b4d6614259ef6eedb8b37ce/tests%2Fui%2Fmem_forget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_forget.rs?ref=269b8d33c914d7a94b4d6614259ef6eedb8b37ce", "patch": "@@ -1,13 +1,15 @@\n #![feature(plugin)]\n #![plugin(clippy)]\n \n+\n use std::sync::Arc;\n use std::rc::Rc;\n \n use std::mem::forget as forgetSomething;\n use std::mem as memstuff;\n \n #[deny(mem_forget)]\n+#[allow(forget_copy)]\n fn main() {\n     let five: i32 = 5;\n     forgetSomething(five);"}, {"sha": "21cb65f82eb741c464f38e684223c0605d8b1713", "filename": "tests/ui/mem_forget.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/269b8d33c914d7a94b4d6614259ef6eedb8b37ce/tests%2Fui%2Fmem_forget.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/269b8d33c914d7a94b4d6614259ef6eedb8b37ce/tests%2Fui%2Fmem_forget.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_forget.stderr?ref=269b8d33c914d7a94b4d6614259ef6eedb8b37ce", "patch": "@@ -1,25 +1,25 @@\n error: usage of mem::forget on Drop type\n-  --> $DIR/mem_forget.rs:16:5\n+  --> $DIR/mem_forget.rs:18:5\n    |\n-16 |     memstuff::forget(six);\n+18 |     memstuff::forget(six);\n    |     ^^^^^^^^^^^^^^^^^^^^^\n    |\n note: lint level defined here\n-  --> $DIR/mem_forget.rs:10:8\n+  --> $DIR/mem_forget.rs:11:8\n    |\n-10 | #[deny(mem_forget)]\n+11 | #[deny(mem_forget)]\n    |        ^^^^^^^^^^\n \n error: usage of mem::forget on Drop type\n-  --> $DIR/mem_forget.rs:20:5\n+  --> $DIR/mem_forget.rs:22:5\n    |\n-20 |     std::mem::forget(seven);\n+22 |     std::mem::forget(seven);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: usage of mem::forget on Drop type\n-  --> $DIR/mem_forget.rs:24:5\n+  --> $DIR/mem_forget.rs:26:5\n    |\n-24 |     forgetSomething(eight);\n+26 |     forgetSomething(eight);\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors"}]}