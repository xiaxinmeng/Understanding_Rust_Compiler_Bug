{"sha": "2c8916581472f5f9892c306632bb2b3d8bc96bc4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjODkxNjU4MTQ3MmY1Zjk4OTJjMzA2NjMyYmIyYjNkOGJjOTZiYzQ=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-06-20T07:53:03Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-06-23T07:31:53Z"}, "message": "Modify --explain to handle hidden code (`# ...`) and indented code blocks.", "tree": {"sha": "c1aadcc1c69e59c835788afbdddb259bf8b2733f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1aadcc1c69e59c835788afbdddb259bf8b2733f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c8916581472f5f9892c306632bb2b3d8bc96bc4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCAAGBQJZTMPpAAoJEP72yAUdDgE8WYEP/i+tJF/oUSU2cnIXKx6/ztPt\nhRUpiqL/6wE/I80b+RUrSD15RA6/lKlSm7jSRY0f+PYL5nqVeD2Bp741Clh3AnX+\nKWPddz/+jw/r1SqboBLOak1YtBBu5P2DPhSo0C/b3Ds6A9JXx1oJaRUQ/GISWFDm\nLCMUCzRpQydo3//HL+0l538BZSEAm3hXjuW4G8WEhGvjypIkTBOZw1mAU2+u9Wfg\nBkVUkqI6svu5JKc0KnodW0vvlYzh7BcpZP6Wfo+JAyzrbpUa9W27vz5y3n2Q2HBq\nVQJXPo6557JEzLK57pph9LRZO0NSEJJme3PPVxl6clFFK6QOqoiwp7itQY0w8goB\nr+XeI+WiSajD8dBRIT6+Dcyliu5b85LKAXfQQ0c6GD1UQPn6RPuT007QnPHEwfmk\niFhoVDFOBLNNjQyZDUzRkqcbsFnZT9g82xlw7bS7rAGUlWsGd4UkioJsmsDC8L2A\nrNY7DSg+NARSV3IK4WQ7v/eMdHbQZdmE0SYroZ6yJNe5L1l0RE5So02Dj6T0Uwuw\ncGxESzYr8Z9gJz6jNNkWEVJEsfvNoH/CD8oNymIN+pkPqv4VQLU9AE3xyhu8VLBG\nISp8mRyuYkgUhVvzPpxU+gi82kyG3DXrAWrmRFCilGttmAeoMP+JvIXDRcNocgKe\nyJAwQwbpa9Tg+WemHHD4\n=mQdZ\n-----END PGP SIGNATURE-----", "payload": "tree c1aadcc1c69e59c835788afbdddb259bf8b2733f\nparent 4711982314ba33cab83704c26484b501c8652774\nauthor kennytm <kennytm@gmail.com> 1497945183 +0800\ncommitter kennytm <kennytm@gmail.com> 1498203113 +0800\n\nModify --explain to handle hidden code (`# ...`) and indented code blocks.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c8916581472f5f9892c306632bb2b3d8bc96bc4", "html_url": "https://github.com/rust-lang/rust/commit/2c8916581472f5f9892c306632bb2b3d8bc96bc4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c8916581472f5f9892c306632bb2b3d8bc96bc4/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4711982314ba33cab83704c26484b501c8652774", "url": "https://api.github.com/repos/rust-lang/rust/commits/4711982314ba33cab83704c26484b501c8652774", "html_url": "https://github.com/rust-lang/rust/commit/4711982314ba33cab83704c26484b501c8652774"}], "stats": {"total": 93, "additions": 87, "deletions": 6}, "files": [{"sha": "54e7c398fe6a67379990159b7064fd778f4af026", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2c8916581472f5f9892c306632bb2b3d8bc96bc4/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c8916581472f5f9892c306632bb2b3d8bc96bc4/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=2c8916581472f5f9892c306632bb2b3d8bc96bc4", "patch": "@@ -355,14 +355,21 @@ fn handle_explain(code: &str,\n     };\n     match descriptions.find_description(&normalised) {\n         Some(ref description) => {\n+            let mut is_in_code_block = false;\n             // Slice off the leading newline and print.\n-            print!(\"{}\", &(&description[1..]).split(\"\\n\").map(|x| {\n-                format!(\"{}\\n\", if x.starts_with(\"```\") {\n-                    \"```\"\n+            for line in description[1..].lines() {\n+                let indent_level = line.find(|c: char| !c.is_whitespace())\n+                    .unwrap_or_else(|| line.len());\n+                let dedented_line = &line[indent_level..];\n+                if dedented_line.starts_with(\"```\") {\n+                    is_in_code_block = !is_in_code_block;\n+                    println!(\"{}\", &line[..(indent_level+3)]);\n+                } else if is_in_code_block && dedented_line.starts_with(\"# \") {\n+                    continue;\n                 } else {\n-                    x\n-                })\n-            }).collect::<String>());\n+                    println!(\"{}\", line);\n+                }\n+            }\n         }\n         None => {\n             early_error(output, &format!(\"no extended information for {}\", code));"}, {"sha": "17fb59935dd16d78b9d609e8af2d3123be64bf09", "filename": "src/test/ui/explain.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2c8916581472f5f9892c306632bb2b3d8bc96bc4/src%2Ftest%2Fui%2Fexplain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c8916581472f5f9892c306632bb2b3d8bc96bc4/src%2Ftest%2Fui%2Fexplain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexplain.rs?ref=2c8916581472f5f9892c306632bb2b3d8bc96bc4", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: --explain E0591"}, {"sha": "0bbbd95320a8ca879b8e44f089fb04b422491308", "filename": "src/test/ui/explain.stdout", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/2c8916581472f5f9892c306632bb2b3d8bc96bc4/src%2Ftest%2Fui%2Fexplain.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/2c8916581472f5f9892c306632bb2b3d8bc96bc4/src%2Ftest%2Fui%2Fexplain.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexplain.stdout?ref=2c8916581472f5f9892c306632bb2b3d8bc96bc4", "patch": "@@ -0,0 +1,63 @@\n+Per [RFC 401][rfc401], if you have a function declaration `foo`:\n+\n+```\n+// For the purposes of this explanation, all of these\n+// different kinds of `fn` declarations are equivalent:\n+struct S;\n+fn foo(x: S) { /* ... */ }\n+extern \"C\" { fn foo(x: S); }\n+impl S { fn foo(self) { /* ... */ } }\n+```\n+\n+the type of `foo` is **not** `fn(S)`, as one might expect.\n+Rather, it is a unique, zero-sized marker type written here as `typeof(foo)`.\n+However, `typeof(foo)` can be _coerced_ to a function pointer `fn(S)`,\n+so you rarely notice this:\n+\n+```\n+let x: fn(S) = foo; // OK, coerces\n+```\n+\n+The reason that this matter is that the type `fn(S)` is not specific to\n+any particular function: it's a function _pointer_. So calling `x()` results\n+in a virtual call, whereas `foo()` is statically dispatched, because the type\n+of `foo` tells us precisely what function is being called.\n+\n+As noted above, coercions mean that most code doesn't have to be\n+concerned with this distinction. However, you can tell the difference\n+when using **transmute** to convert a fn item into a fn pointer.\n+\n+This is sometimes done as part of an FFI:\n+\n+```\n+extern \"C\" fn foo(userdata: Box<i32>) {\n+    /* ... */\n+}\n+\n+let f: extern \"C\" fn(*mut i32) = transmute(foo);\n+callback(f);\n+```\n+\n+Here, transmute is being used to convert the types of the fn arguments.\n+This pattern is incorrect because, because the type of `foo` is a function\n+**item** (`typeof(foo)`), which is zero-sized, and the target type (`fn()`)\n+is a function pointer, which is not zero-sized.\n+This pattern should be rewritten. There are a few possible ways to do this:\n+\n+- change the original fn declaration to match the expected signature,\n+  and do the cast in the fn body (the prefered option)\n+- cast the fn item fo a fn pointer before calling transmute, as shown here:\n+\n+    ```\n+    let f: extern \"C\" fn(*mut i32) = transmute(foo as extern \"C\" fn(_));\n+    let f: extern \"C\" fn(*mut i32) = transmute(foo as usize); // works too\n+    ```\n+\n+The same applies to transmutes to `*mut fn()`, which were observedin practice.\n+Note though that use of this type is generally incorrect.\n+The intention is typically to describe a function pointer, but just `fn()`\n+alone suffices for that. `*mut fn()` is a pointer to a fn pointer.\n+(Since these values are typically just passed to C code, however, this rarely\n+makes a difference in practice.)\n+\n+[rfc401]: https://github.com/rust-lang/rfcs/blob/master/text/0401-coercions.md"}]}