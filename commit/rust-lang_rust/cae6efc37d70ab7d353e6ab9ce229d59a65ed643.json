{"sha": "cae6efc37d70ab7d353e6ab9ce229d59a65ed643", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhZTZlZmMzN2Q3MGFiN2QzNTNlNmFiOWNlMjI5ZDU5YTY1ZWQ2NDM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-27T19:29:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-27T19:29:35Z"}, "message": "Auto merge of #54183 - qnighy:by-value-object-safety, r=oli-obk\n\nImplement by-value object safety\n\nThis PR implements **by-value object safety**, which is part of unsized rvalues #48055. That means, with `#![feature(unsized_locals)]`, you can call a method `fn foo(self, ...)` on trait objects. One aim of this is to enable `Box<FnOnce>`  in the near future.\n\nThe difficulty here is this: when constructing a vtable for a trait `Foo`, we can't just put the function `<T as Foo>::foo` into the table. If `T` is no larger than `usize`, `self` is usually passed directly. However, as the caller of the vtable doesn't know the concrete `Self` type, we want a variant of `<T as Foo>::foo` where `self` is always passed by reference.\n\nTherefore, when the compiler encounters such a method to be generated as a vtable entry, it produces a newly introduced instance called `InstanceDef::VtableShim(def_id)` (that wraps the original instance). the shim just derefs the receiver and calls the original method. We give different symbol names for the shims by appending `::{{vtable-shim}}` to the symbol path (and also adding vtable-shimness as an ingredient to the symbol hash).\n\nr? @eddyb", "tree": {"sha": "755deb56e86b2436a04ccbab70b3506608e36075", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/755deb56e86b2436a04ccbab70b3506608e36075"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cae6efc37d70ab7d353e6ab9ce229d59a65ed643", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cae6efc37d70ab7d353e6ab9ce229d59a65ed643", "html_url": "https://github.com/rust-lang/rust/commit/cae6efc37d70ab7d353e6ab9ce229d59a65ed643", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3b87609713887a27ebd07557af14e4aa57771f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3b87609713887a27ebd07557af14e4aa57771f3", "html_url": "https://github.com/rust-lang/rust/commit/b3b87609713887a27ebd07557af14e4aa57771f3"}, {"sha": "2f7ea4a8725d433db4f34fca87eb7f61afb7ef9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f7ea4a8725d433db4f34fca87eb7f61afb7ef9a", "html_url": "https://github.com/rust-lang/rust/commit/2f7ea4a8725d433db4f34fca87eb7f61afb7ef9a"}], "stats": {"total": 1041, "additions": 870, "deletions": 171}, "files": [{"sha": "6f7cf754ae083b778a4e9db3f0cb5dc2582aa29f", "filename": "src/doc/unstable-book/src/language-features/unsized-locals.md", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Funsized-locals.md", "raw_url": "https://github.com/rust-lang/rust/raw/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Funsized-locals.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Funsized-locals.md?ref=cae6efc37d70ab7d353e6ab9ce229d59a65ed643", "patch": "@@ -101,9 +101,9 @@ fn main() {\n }\n ```\n \n-And `Foo` will also be object-safe. However, this object-safety is not yet implemented.\n+And `Foo` will also be object-safe.\n \n-```rust,ignore\n+```rust\n #![feature(unsized_locals)]\n \n trait Foo {\n@@ -119,8 +119,6 @@ fn main () {\n }\n ```\n \n-Unfortunately, this is not implemented yet.\n-\n One of the objectives of this feature is to allow `Box<dyn FnOnce>`, instead of `Box<dyn FnBox>` in the future. See [#28796] for details.\n \n [#28796]: https://github.com/rust-lang/rust/issues/28796"}, {"sha": "0c38cb10a23204e819d1ee0a99827035a1fab103", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=cae6efc37d70ab7d353e6ab9ce229d59a65ed643", "patch": "@@ -1007,6 +1007,9 @@ impl<'a, 'gcx> HashStable<StableHashingContext<'a>> for ty::InstanceDef<'gcx> {\n             ty::InstanceDef::Item(def_id) => {\n                 def_id.hash_stable(hcx, hasher);\n             }\n+            ty::InstanceDef::VtableShim(def_id) => {\n+                def_id.hash_stable(hcx, hasher);\n+            }\n             ty::InstanceDef::Intrinsic(def_id) => {\n                 def_id.hash_stable(hcx, hasher);\n             }"}, {"sha": "041565c8b5a07ba6834e2e5bebbabf52373adf44", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 96, "deletions": 1, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=cae6efc37d70ab7d353e6ab9ce229d59a65ed643", "patch": "@@ -8,13 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use hir::Unsafety;\n use hir::def_id::DefId;\n-use ty::{self, Ty, TypeFoldable, Substs, TyCtxt};\n+use ty::{self, Ty, PolyFnSig, TypeFoldable, Substs, TyCtxt};\n use traits;\n use rustc_target::spec::abi::Abi;\n use util::ppaux;\n \n use std::fmt;\n+use std::iter;\n \n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n pub struct Instance<'tcx> {\n@@ -27,6 +29,9 @@ pub enum InstanceDef<'tcx> {\n     Item(DefId),\n     Intrinsic(DefId),\n \n+    /// `<T as Trait>::method` where `method` receives unsizeable `self: Self`.\n+    VtableShim(DefId),\n+\n     /// \\<fn() as FnTrait>::call_*\n     /// def-id is FnTrait::call_*\n     FnPtrShim(DefId, Ty<'tcx>),\n@@ -56,13 +61,73 @@ impl<'a, 'tcx> Instance<'tcx> {\n             &ty,\n         )\n     }\n+\n+    fn fn_sig_noadjust(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> PolyFnSig<'tcx> {\n+        let ty = self.ty(tcx);\n+        match ty.sty {\n+            ty::FnDef(..) |\n+            // Shims currently have type FnPtr. Not sure this should remain.\n+            ty::FnPtr(_) => ty.fn_sig(tcx),\n+            ty::Closure(def_id, substs) => {\n+                let sig = substs.closure_sig(def_id, tcx);\n+\n+                let env_ty = tcx.closure_env_ty(def_id, substs).unwrap();\n+                sig.map_bound(|sig| tcx.mk_fn_sig(\n+                    iter::once(*env_ty.skip_binder()).chain(sig.inputs().iter().cloned()),\n+                    sig.output(),\n+                    sig.variadic,\n+                    sig.unsafety,\n+                    sig.abi\n+                ))\n+            }\n+            ty::Generator(def_id, substs, _) => {\n+                let sig = substs.poly_sig(def_id, tcx);\n+\n+                let env_region = ty::ReLateBound(ty::INNERMOST, ty::BrEnv);\n+                let env_ty = tcx.mk_mut_ref(tcx.mk_region(env_region), ty);\n+\n+                sig.map_bound(|sig| {\n+                    let state_did = tcx.lang_items().gen_state().unwrap();\n+                    let state_adt_ref = tcx.adt_def(state_did);\n+                    let state_substs = tcx.intern_substs(&[\n+                        sig.yield_ty.into(),\n+                        sig.return_ty.into(),\n+                    ]);\n+                    let ret_ty = tcx.mk_adt(state_adt_ref, state_substs);\n+\n+                    tcx.mk_fn_sig(iter::once(env_ty),\n+                        ret_ty,\n+                        false,\n+                        Unsafety::Normal,\n+                        Abi::Rust\n+                    )\n+                })\n+            }\n+            _ => bug!(\"unexpected type {:?} in Instance::fn_sig_noadjust\", ty)\n+        }\n+    }\n+\n+    pub fn fn_sig(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> ty::PolyFnSig<'tcx> {\n+        let mut fn_sig = self.fn_sig_noadjust(tcx);\n+        if let InstanceDef::VtableShim(..) = self.def {\n+            // Modify fn(self, ...) to fn(self: *mut Self, ...)\n+            fn_sig = fn_sig.map_bound(|mut fn_sig| {\n+                let mut inputs_and_output = fn_sig.inputs_and_output.to_vec();\n+                inputs_and_output[0] = tcx.mk_mut_ptr(inputs_and_output[0]);\n+                fn_sig.inputs_and_output = tcx.intern_type_list(&inputs_and_output);\n+                fn_sig\n+            });\n+        }\n+        fn_sig\n+    }\n }\n \n impl<'tcx> InstanceDef<'tcx> {\n     #[inline]\n     pub fn def_id(&self) -> DefId {\n         match *self {\n             InstanceDef::Item(def_id) |\n+            InstanceDef::VtableShim(def_id) |\n             InstanceDef::FnPtrShim(def_id, _) |\n             InstanceDef::Virtual(def_id, _) |\n             InstanceDef::Intrinsic(def_id, ) |\n@@ -120,6 +185,9 @@ impl<'tcx> fmt::Display for Instance<'tcx> {\n         ppaux::parameterized(f, self.substs, self.def_id(), &[])?;\n         match self.def {\n             InstanceDef::Item(_) => Ok(()),\n+            InstanceDef::VtableShim(_) => {\n+                write!(f, \" - shim(vtable)\")\n+            }\n             InstanceDef::Intrinsic(_) => {\n                 write!(f, \" - intrinsic\")\n             }\n@@ -230,6 +298,25 @@ impl<'a, 'b, 'tcx> Instance<'tcx> {\n         result\n     }\n \n+    pub fn resolve_for_vtable(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                              param_env: ty::ParamEnv<'tcx>,\n+                              def_id: DefId,\n+                              substs: &'tcx Substs<'tcx>) -> Option<Instance<'tcx>> {\n+        debug!(\"resolve(def_id={:?}, substs={:?})\", def_id, substs);\n+        let fn_sig = tcx.fn_sig(def_id);\n+        let is_vtable_shim =\n+            fn_sig.inputs().skip_binder().len() > 0 && fn_sig.input(0).skip_binder().is_self();\n+        if is_vtable_shim {\n+            debug!(\" => associated item with unsizeable self: Self\");\n+            Some(Instance {\n+                def: InstanceDef::VtableShim(def_id),\n+                substs,\n+            })\n+        } else {\n+            Instance::resolve(tcx, param_env, def_id, substs)\n+        }\n+    }\n+\n     pub fn resolve_closure(\n         tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         def_id: DefId,\n@@ -244,6 +331,14 @@ impl<'a, 'b, 'tcx> Instance<'tcx> {\n             _ => Instance::new(def_id, substs.substs)\n         }\n     }\n+\n+    pub fn is_vtable_shim(&self) -> bool {\n+        if let InstanceDef::VtableShim(..) = self.def {\n+            true\n+        } else {\n+            false\n+        }\n+    }\n }\n \n fn resolve_associated_item<'a, 'tcx>("}, {"sha": "f8fc2cc83034fb418d2df9ef0406d72aa47930be", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=cae6efc37d70ab7d353e6ab9ce229d59a65ed643", "patch": "@@ -2761,6 +2761,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             ty::InstanceDef::Item(did) => {\n                 self.optimized_mir(did)\n             }\n+            ty::InstanceDef::VtableShim(..) |\n             ty::InstanceDef::Intrinsic(..) |\n             ty::InstanceDef::FnPtrShim(..) |\n             ty::InstanceDef::Virtual(..) |"}, {"sha": "ba5b714a0e7d90f41ca36e1ceebb5d80c79e3f9e", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=cae6efc37d70ab7d353e6ab9ce229d59a65ed643", "patch": "@@ -467,6 +467,8 @@ impl<'a, 'tcx> Lift<'tcx> for ty::InstanceDef<'a> {\n         match *self {\n             ty::InstanceDef::Item(def_id) =>\n                 Some(ty::InstanceDef::Item(def_id)),\n+            ty::InstanceDef::VtableShim(def_id) =>\n+                Some(ty::InstanceDef::VtableShim(def_id)),\n             ty::InstanceDef::Intrinsic(def_id) =>\n                 Some(ty::InstanceDef::Intrinsic(def_id)),\n             ty::InstanceDef::FnPtrShim(def_id, ref ty) =>\n@@ -647,6 +649,7 @@ impl<'tcx> TypeFoldable<'tcx> for ty::instance::Instance<'tcx> {\n             substs: self.substs.fold_with(folder),\n             def: match self.def {\n                 Item(did) => Item(did.fold_with(folder)),\n+                VtableShim(did) => VtableShim(did.fold_with(folder)),\n                 Intrinsic(did) => Intrinsic(did.fold_with(folder)),\n                 FnPtrShim(did, ty) => FnPtrShim(\n                     did.fold_with(folder),\n@@ -675,7 +678,7 @@ impl<'tcx> TypeFoldable<'tcx> for ty::instance::Instance<'tcx> {\n         use ty::InstanceDef::*;\n         self.substs.visit_with(visitor) ||\n         match self.def {\n-            Item(did) | Intrinsic(did) | Virtual(did, _) => {\n+            Item(did) | VtableShim(did) | Intrinsic(did) | Virtual(did, _) => {\n                 did.visit_with(visitor)\n             },\n             FnPtrShim(did, ty) | CloneShim(did, ty) => {"}, {"sha": "7c7662a88de535a1af92a71c40a0617a185fa058", "filename": "src/librustc_codegen_llvm/abi.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Flibrustc_codegen_llvm%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Flibrustc_codegen_llvm%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fabi.rs?ref=cae6efc37d70ab7d353e6ab9ce229d59a65ed643", "patch": "@@ -11,7 +11,7 @@\n use llvm::{self, AttributePlace};\n use base;\n use builder::{Builder, MemFlags};\n-use common::{ty_fn_sig, C_usize};\n+use common::C_usize;\n use context::CodegenCx;\n use mir::place::PlaceRef;\n use mir::operand::OperandValue;\n@@ -283,8 +283,7 @@ pub trait FnTypeExt<'tcx> {\n \n impl<'tcx> FnTypeExt<'tcx> for FnType<'tcx, Ty<'tcx>> {\n     fn of_instance(cx: &CodegenCx<'ll, 'tcx>, instance: &ty::Instance<'tcx>) -> Self {\n-        let fn_ty = instance.ty(cx.tcx);\n-        let sig = ty_fn_sig(cx, fn_ty);\n+        let sig = instance.fn_sig(cx.tcx);\n         let sig = cx.tcx.normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), &sig);\n         FnType::new(cx, sig, &[])\n     }\n@@ -305,17 +304,17 @@ impl<'tcx> FnTypeExt<'tcx> for FnType<'tcx, Ty<'tcx>> {\n             // Don't pass the vtable, it's not an argument of the virtual fn.\n             // Instead, pass just the (thin pointer) first field of `*dyn Trait`.\n             if arg_idx == Some(0) {\n-                if layout.is_unsized() {\n-                    unimplemented!(\"by-value trait object is not \\\n-                                    yet implemented in #![feature(unsized_locals)]\");\n-                }\n                 // FIXME(eddyb) `layout.field(cx, 0)` is not enough because e.g.\n                 // `Box<dyn Trait>` has a few newtype wrappers around the raw\n                 // pointer, so we'd have to \"dig down\" to find `*dyn Trait`.\n-                let pointee = layout.ty.builtin_deref(true)\n-                    .unwrap_or_else(|| {\n-                        bug!(\"FnType::new_vtable: non-pointer self {:?}\", layout)\n-                    }).ty;\n+                let pointee = if layout.is_unsized() {\n+                    layout.ty\n+                } else {\n+                    layout.ty.builtin_deref(true)\n+                        .unwrap_or_else(|| {\n+                            bug!(\"FnType::new_vtable: non-pointer self {:?}\", layout)\n+                        }).ty\n+                };\n                 let fat_ptr_ty = cx.tcx.mk_mut_ptr(pointee);\n                 layout = cx.layout_of(fat_ptr_ty).field(cx, 0);\n             }"}, {"sha": "a4c7a7123b9647d1745728eadc1edcfce50a3f76", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=cae6efc37d70ab7d353e6ab9ce229d59a65ed643", "patch": "@@ -56,7 +56,7 @@ use callee;\n use common::{C_bool, C_bytes_in_context, C_i32, C_usize};\n use rustc_mir::monomorphize::collector::{self, MonoItemCollectionMode};\n use rustc_mir::monomorphize::item::DefPathBasedNames;\n-use common::{self, C_struct_in_context, C_array, val_ty};\n+use common::{C_struct_in_context, C_array, val_ty};\n use consts;\n use context::CodegenCx;\n use debuginfo;\n@@ -491,8 +491,7 @@ pub fn codegen_instance<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>, instance: Instance<'\n     // release builds.\n     info!(\"codegen_instance({})\", instance);\n \n-    let fn_ty = instance.ty(cx.tcx);\n-    let sig = common::ty_fn_sig(cx, fn_ty);\n+    let sig = instance.fn_sig(cx.tcx);\n     let sig = cx.tcx.normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), &sig);\n \n     let lldecl = cx.instances.borrow().get(&instance).cloned().unwrap_or_else(||"}, {"sha": "7300bac96182b53bbdd6ddfc9e6d48e05dc9d1a4", "filename": "src/librustc_codegen_llvm/callee.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcallee.rs?ref=cae6efc37d70ab7d353e6ab9ce229d59a65ed643", "patch": "@@ -47,16 +47,16 @@ pub fn get_fn(\n     assert!(!instance.substs.has_escaping_regions());\n     assert!(!instance.substs.has_param_types());\n \n-    let fn_ty = instance.ty(cx.tcx);\n+    let sig = instance.fn_sig(cx.tcx);\n     if let Some(&llfn) = cx.instances.borrow().get(&instance) {\n         return llfn;\n     }\n \n     let sym = tcx.symbol_name(instance).as_str();\n-    debug!(\"get_fn({:?}: {:?}) => {}\", instance, fn_ty, sym);\n+    debug!(\"get_fn({:?}: {:?}) => {}\", instance, sig, sym);\n \n     // Create a fn pointer with the substituted signature.\n-    let fn_ptr_ty = tcx.mk_fn_ptr(common::ty_fn_sig(cx, fn_ty));\n+    let fn_ptr_ty = tcx.mk_fn_ptr(sig);\n     let llptrty = cx.layout_of(fn_ptr_ty).llvm_type(cx);\n \n     let llfn = if let Some(llfn) = declare::get_declared_value(cx, &sym) {\n@@ -91,7 +91,7 @@ pub fn get_fn(\n             llfn\n         }\n     } else {\n-        let llfn = declare::declare_fn(cx, &sym, fn_ty);\n+        let llfn = declare::declare_fn(cx, &sym, sig);\n         assert_eq!(common::val_ty(llfn), llptrty);\n         debug!(\"get_fn: not casting pointer!\");\n \n@@ -220,3 +220,19 @@ pub fn resolve_and_get_fn(\n         ).unwrap()\n     )\n }\n+\n+pub fn resolve_and_get_fn_for_vtable(\n+    cx: &CodegenCx<'ll, 'tcx>,\n+    def_id: DefId,\n+    substs: &'tcx Substs<'tcx>,\n+) -> &'ll Value {\n+    get_fn(\n+        cx,\n+        ty::Instance::resolve_for_vtable(\n+            cx.tcx,\n+            ty::ParamEnv::reveal_all(),\n+            def_id,\n+            substs\n+        ).unwrap()\n+    )\n+}"}, {"sha": "c9b464fd8f3dd48482fa3a307a3f55b0c0bc7856", "filename": "src/librustc_codegen_llvm/common.rs", "status": "modified", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcommon.rs?ref=cae6efc37d70ab7d353e6ab9ce229d59a65ed643", "patch": "@@ -30,9 +30,7 @@ use rustc::ty::layout::{HasDataLayout, LayoutOf};\n use rustc::hir;\n \n use libc::{c_uint, c_char};\n-use std::iter;\n \n-use rustc_target::spec::abi::Abi;\n use syntax::symbol::LocalInternedString;\n use syntax_pos::{Span, DUMMY_SP};\n \n@@ -404,52 +402,3 @@ pub fn shift_mask_val(\n         _ => bug!(\"shift_mask_val: expected Integer or Vector, found {:?}\", kind),\n     }\n }\n-\n-pub fn ty_fn_sig<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n-                           ty: Ty<'tcx>)\n-                           -> ty::PolyFnSig<'tcx>\n-{\n-    match ty.sty {\n-        ty::FnDef(..) |\n-        // Shims currently have type FnPtr. Not sure this should remain.\n-        ty::FnPtr(_) => ty.fn_sig(cx.tcx),\n-        ty::Closure(def_id, substs) => {\n-            let tcx = cx.tcx;\n-            let sig = substs.closure_sig(def_id, tcx);\n-\n-            let env_ty = tcx.closure_env_ty(def_id, substs).unwrap();\n-            sig.map_bound(|sig| tcx.mk_fn_sig(\n-                iter::once(*env_ty.skip_binder()).chain(sig.inputs().iter().cloned()),\n-                sig.output(),\n-                sig.variadic,\n-                sig.unsafety,\n-                sig.abi\n-            ))\n-        }\n-        ty::Generator(def_id, substs, _) => {\n-            let tcx = cx.tcx;\n-            let sig = substs.poly_sig(def_id, cx.tcx);\n-\n-            let env_region = ty::ReLateBound(ty::INNERMOST, ty::BrEnv);\n-            let env_ty = tcx.mk_mut_ref(tcx.mk_region(env_region), ty);\n-\n-            sig.map_bound(|sig| {\n-                let state_did = tcx.lang_items().gen_state().unwrap();\n-                let state_adt_ref = tcx.adt_def(state_did);\n-                let state_substs = tcx.intern_substs(&[\n-                    sig.yield_ty.into(),\n-                    sig.return_ty.into(),\n-                ]);\n-                let ret_ty = tcx.mk_adt(state_adt_ref, state_substs);\n-\n-                tcx.mk_fn_sig(iter::once(env_ty),\n-                    ret_ty,\n-                    false,\n-                    hir::Unsafety::Normal,\n-                    Abi::Rust\n-                )\n-            })\n-        }\n-        _ => bug!(\"unexpected type {:?} to ty_fn_sig\", ty)\n-    }\n-}"}, {"sha": "241f7989e168179c8c21de67061f7fdec0a5d496", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=cae6efc37d70ab7d353e6ab9ce229d59a65ed643", "patch": "@@ -404,15 +404,15 @@ impl<'b, 'tcx> CodegenCx<'b, 'tcx> {\n             return llfn;\n         }\n \n-        let ty = tcx.mk_fn_ptr(ty::Binder::bind(tcx.mk_fn_sig(\n+        let sig = ty::Binder::bind(tcx.mk_fn_sig(\n             iter::once(tcx.mk_mut_ptr(tcx.types.u8)),\n             tcx.types.never,\n             false,\n             hir::Unsafety::Unsafe,\n             Abi::C\n-        )));\n+        ));\n \n-        let llfn = declare::declare_fn(self, \"rust_eh_unwind_resume\", ty);\n+        let llfn = declare::declare_fn(self, \"rust_eh_unwind_resume\", sig);\n         attributes::unwind(llfn, true);\n         attributes::apply_target_cpu_attr(self, llfn);\n         unwresume.set(Some(llfn));"}, {"sha": "f4aede55ce1a628d4e054b09a78a6547ae114889", "filename": "src/librustc_codegen_llvm/declare.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Flibrustc_codegen_llvm%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Flibrustc_codegen_llvm%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdeclare.rs?ref=cae6efc37d70ab7d353e6ab9ce229d59a65ed643", "patch": "@@ -22,15 +22,14 @@\n \n use llvm;\n use llvm::AttributePlace::Function;\n-use rustc::ty::{self, Ty};\n+use rustc::ty::{self, PolyFnSig};\n use rustc::ty::layout::LayoutOf;\n use rustc::session::config::Sanitizer;\n use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_target::spec::PanicStrategy;\n use abi::{Abi, FnType, FnTypeExt};\n use attributes;\n use context::CodegenCx;\n-use common;\n use type_::Type;\n use value::Value;\n \n@@ -129,10 +128,9 @@ pub fn declare_cfn(cx: &CodegenCx<'ll, '_>, name: &str, fn_type: &'ll Type) -> &\n pub fn declare_fn(\n     cx: &CodegenCx<'ll, 'tcx>,\n     name: &str,\n-    fn_type: Ty<'tcx>,\n+    sig: PolyFnSig<'tcx>,\n ) -> &'ll Value {\n-    debug!(\"declare_rust_fn(name={:?}, fn_type={:?})\", name, fn_type);\n-    let sig = common::ty_fn_sig(cx, fn_type);\n+    debug!(\"declare_rust_fn(name={:?}, sig={:?})\", name, sig);\n     let sig = cx.tcx.normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), &sig);\n     debug!(\"declare_rust_fn (after region erasure) sig={:?}\", sig);\n \n@@ -184,12 +182,12 @@ pub fn define_private_global(cx: &CodegenCx<'ll, '_>, ty: &'ll Type) -> &'ll Val\n pub fn define_fn(\n     cx: &CodegenCx<'ll, 'tcx>,\n     name: &str,\n-    fn_type: Ty<'tcx>,\n+    fn_sig: PolyFnSig<'tcx>,\n ) -> &'ll Value {\n     if get_defined_value(cx, name).is_some() {\n         cx.sess().fatal(&format!(\"symbol `{}` already defined\", name))\n     } else {\n-        declare_fn(cx, name, fn_type)\n+        declare_fn(cx, name, fn_sig)\n     }\n }\n \n@@ -201,9 +199,9 @@ pub fn define_fn(\n pub fn define_internal_fn(\n     cx: &CodegenCx<'ll, 'tcx>,\n     name: &str,\n-    fn_type: Ty<'tcx>,\n+    fn_sig: PolyFnSig<'tcx>,\n ) -> &'ll Value {\n-    let llfn = define_fn(cx, name, fn_type);\n+    let llfn = define_fn(cx, name, fn_sig);\n     unsafe { llvm::LLVMRustSetLinkage(llfn, llvm::Linkage::InternalLinkage) };\n     llfn\n }"}, {"sha": "03244c18ac3e4f3d15e6be674228431fe4a91ccf", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=cae6efc37d70ab7d353e6ab9ce229d59a65ed643", "patch": "@@ -933,14 +933,14 @@ fn gen_fn<'ll, 'tcx>(\n     output: Ty<'tcx>,\n     codegen: &mut dyn FnMut(Builder<'_, 'll, 'tcx>),\n ) -> &'ll Value {\n-    let rust_fn_ty = cx.tcx.mk_fn_ptr(ty::Binder::bind(cx.tcx.mk_fn_sig(\n+    let rust_fn_sig = ty::Binder::bind(cx.tcx.mk_fn_sig(\n         inputs.into_iter(),\n         output,\n         false,\n         hir::Unsafety::Unsafe,\n         Abi::Rust\n-    )));\n-    let llfn = declare::define_internal_fn(cx, name, rust_fn_ty);\n+    ));\n+    let llfn = declare::define_internal_fn(cx, name, rust_fn_sig);\n     attributes::from_fn_attrs(cx, llfn, None);\n     let bx = Builder::new_block(cx, llfn, \"entry-block\");\n     codegen(bx);"}, {"sha": "d38f343d01f34981b5088ff949df6494df9fd924", "filename": "src/librustc_codegen_llvm/meth.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Flibrustc_codegen_llvm%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Flibrustc_codegen_llvm%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmeth.rs?ref=cae6efc37d70ab7d353e6ab9ce229d59a65ed643", "patch": "@@ -89,7 +89,7 @@ pub fn get_vtable(\n     let methods = tcx.vtable_methods(trait_ref.with_self_ty(tcx, ty));\n     let methods = methods.iter().cloned().map(|opt_mth| {\n         opt_mth.map_or(nullptr, |(def_id, substs)| {\n-            callee::resolve_and_get_fn(cx, def_id, substs)\n+            callee::resolve_and_get_fn_for_vtable(cx, def_id, substs)\n         })\n     });\n "}, {"sha": "d98b7869ae98e3dfa9a54b8895a5390559db503f", "filename": "src/librustc_codegen_llvm/mir/block.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs?ref=cae6efc37d70ab7d353e6ab9ce229d59a65ed643", "patch": "@@ -298,8 +298,7 @@ impl FunctionCx<'a, 'll, 'tcx> {\n                 };\n                 let (drop_fn, fn_ty) = match ty.sty {\n                     ty::Dynamic(..) => {\n-                        let fn_ty = drop_fn.ty(bx.cx.tcx);\n-                        let sig = common::ty_fn_sig(bx.cx, fn_ty);\n+                        let sig = drop_fn.fn_sig(bx.cx.tcx);\n                         let sig = bx.tcx().normalize_erasing_late_bound_regions(\n                             ty::ParamEnv::reveal_all(),\n                             &sig,\n@@ -651,6 +650,14 @@ impl FunctionCx<'a, 'll, 'tcx> {\n                                 .get_fn(&bx, meta, &fn_ty));\n                             llargs.push(data_ptr);\n                             continue;\n+                        } else if let Ref(data_ptr, Some(meta), _) = op.val {\n+                            // by-value dynamic dispatch\n+                            llfn = Some(meth::VirtualIndex::from_index(idx)\n+                                .get_fn(&bx, meta, &fn_ty));\n+                            llargs.push(data_ptr);\n+                            continue;\n+                        } else {\n+                            span_bug!(span, \"can't codegen a virtual call on {:?}\", op);\n                         }\n                     }\n "}, {"sha": "91c1ccbe00213dd6e53176c60544aa314df4064e", "filename": "src/librustc_codegen_llvm/mono_item.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Flibrustc_codegen_llvm%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Flibrustc_codegen_llvm%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmono_item.rs?ref=cae6efc37d70ab7d353e6ab9ce229d59a65ed643", "patch": "@@ -153,9 +153,9 @@ fn predefine_fn<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n     assert!(!instance.substs.needs_infer() &&\n             !instance.substs.has_param_types());\n \n-    let mono_ty = instance.ty(cx.tcx);\n+    let mono_sig = instance.fn_sig(cx.tcx);\n     let attrs = cx.tcx.codegen_fn_attrs(instance.def_id());\n-    let lldecl = declare::declare_fn(cx, symbol_name, mono_ty);\n+    let lldecl = declare::declare_fn(cx, symbol_name, mono_sig);\n     unsafe { llvm::LLVMRustSetLinkage(lldecl, base::linkage_to_llvm(linkage)) };\n     base::set_link_section(lldecl, &attrs);\n     if linkage == Linkage::LinkOnceODR ||\n@@ -178,7 +178,7 @@ fn predefine_fn<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n         }\n     }\n \n-    debug!(\"predefine_fn: mono_ty = {:?} instance = {:?}\", mono_ty, instance);\n+    debug!(\"predefine_fn: mono_sig = {:?} instance = {:?}\", mono_sig, instance);\n     if instance.def.is_inline(cx.tcx) {\n         attributes::inline(cx, lldecl, attributes::InlineAttr::Hint);\n     }"}, {"sha": "0d95b0c7bbc0caa0760a4ef59befa822edf07976", "filename": "src/librustc_codegen_utils/symbol_names.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs?ref=cae6efc37d70ab7d353e6ab9ce229d59a65ed643", "patch": "@@ -114,6 +114,7 @@ use rustc_mir::monomorphize::Instance;\n use syntax_pos::symbol::Symbol;\n \n use std::fmt::Write;\n+use std::mem::discriminant;\n \n pub fn provide(providers: &mut Providers) {\n     *providers = Providers {\n@@ -219,6 +220,10 @@ fn get_symbol_hash<'a, 'tcx>(\n                 .hash_stable(&mut hcx, &mut hasher);\n             (&tcx.crate_disambiguator(instantiating_crate)).hash_stable(&mut hcx, &mut hasher);\n         }\n+\n+        // We want to avoid accidental collision between different types of instances.\n+        // Especially, VtableShim may overlap with its original instance without this.\n+        discriminant(&instance.def).hash_stable(&mut hcx, &mut hasher);\n     });\n \n     // 64 bits should be enough to avoid collisions.\n@@ -322,7 +327,13 @@ fn compute_symbol_name<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, instance: Instance\n \n     let hash = get_symbol_hash(tcx, def_id, instance, instance_ty, substs);\n \n-    SymbolPathBuffer::from_interned(tcx.def_symbol_name(def_id)).finish(hash)\n+    let mut buf = SymbolPathBuffer::from_interned(tcx.def_symbol_name(def_id));\n+\n+    if instance.is_vtable_shim() {\n+        buf.push(\"{{vtable-shim}}\");\n+    }\n+\n+    buf.finish(hash)\n }\n \n // Follow C++ namespace-mangling style, see"}, {"sha": "ee84e49022f1b9cfe6cafd12f93078dbe4ce4b00", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=cae6efc37d70ab7d353e6ab9ce229d59a65ed643", "patch": "@@ -256,6 +256,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                 self.dump_place(*dest);\n                 Ok(())\n             }\n+            ty::InstanceDef::VtableShim(..) |\n             ty::InstanceDef::ClosureOnceShim { .. } |\n             ty::InstanceDef::FnPtrShim(..) |\n             ty::InstanceDef::DropGlue(..) |"}, {"sha": "8c6966691328a44029a83cf9378dec343482d07d", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=cae6efc37d70ab7d353e6ab9ce229d59a65ed643", "patch": "@@ -705,6 +705,7 @@ fn visit_instance_use<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 bug!(\"intrinsic {:?} being reified\", def_id);\n             }\n         }\n+        ty::InstanceDef::VtableShim(..) |\n         ty::InstanceDef::Virtual(..) |\n         ty::InstanceDef::DropGlue(_, None) => {\n             // don't need to emit shim if we are calling directly.\n@@ -731,6 +732,7 @@ fn should_monomorphize_locally<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, instance:\n                                          -> bool {\n     let def_id = match instance.def {\n         ty::InstanceDef::Item(def_id) => def_id,\n+        ty::InstanceDef::VtableShim(..) |\n         ty::InstanceDef::ClosureOnceShim { .. } |\n         ty::InstanceDef::Virtual(..) |\n         ty::InstanceDef::FnPtrShim(..) |\n@@ -913,7 +915,7 @@ fn create_mono_items_for_vtable_methods<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         // Walk all methods of the trait, including those of its supertraits\n         let methods = tcx.vtable_methods(poly_trait_ref);\n         let methods = methods.iter().cloned().filter_map(|method| method)\n-            .map(|(def_id, substs)| ty::Instance::resolve(\n+            .map(|(def_id, substs)| ty::Instance::resolve_for_vtable(\n                     tcx,\n                     ty::ParamEnv::reveal_all(),\n                     def_id,"}, {"sha": "f0a35ca7adbd21a02f15b97316bab98d80988dc8", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=cae6efc37d70ab7d353e6ab9ce229d59a65ed643", "patch": "@@ -180,6 +180,7 @@ pub trait CodegenUnitExt<'tcx> {\n                         InstanceDef::Item(def_id) => {\n                             tcx.hir.as_local_node_id(def_id)\n                         }\n+                        InstanceDef::VtableShim(..) |\n                         InstanceDef::Intrinsic(..) |\n                         InstanceDef::FnPtrShim(..) |\n                         InstanceDef::Virtual(..) |\n@@ -422,6 +423,7 @@ fn mono_item_visibility(\n         InstanceDef::Item(def_id) => def_id,\n \n         // These are all compiler glue and such, never exported, always hidden.\n+        InstanceDef::VtableShim(..) |\n         InstanceDef::FnPtrShim(..) |\n         InstanceDef::Virtual(..) |\n         InstanceDef::Intrinsic(..) |\n@@ -756,6 +758,7 @@ fn characteristic_def_id_of_mono_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         MonoItem::Fn(instance) => {\n             let def_id = match instance.def {\n                 ty::InstanceDef::Item(def_id) => def_id,\n+                ty::InstanceDef::VtableShim(..) |\n                 ty::InstanceDef::FnPtrShim(..) |\n                 ty::InstanceDef::ClosureOnceShim { .. } |\n                 ty::InstanceDef::Intrinsic(..) |"}, {"sha": "7061504cd0ae74b7708565116e645667d2dca047", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=cae6efc37d70ab7d353e6ab9ce229d59a65ed643", "patch": "@@ -43,6 +43,15 @@ fn make_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let mut result = match instance {\n         ty::InstanceDef::Item(..) =>\n             bug!(\"item {:?} passed to make_shim\", instance),\n+        ty::InstanceDef::VtableShim(def_id) => {\n+            build_call_shim(\n+                tcx,\n+                def_id,\n+                Adjustment::DerefMove,\n+                CallKind::Direct(def_id),\n+                None,\n+            )\n+        }\n         ty::InstanceDef::FnPtrShim(def_id, ty) => {\n             let trait_ = tcx.trait_of_item(def_id).unwrap();\n             let adjustment = match tcx.lang_items().fn_trait_kind(trait_) {\n@@ -128,6 +137,7 @@ fn make_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n enum Adjustment {\n     Identity,\n     Deref,\n+    DerefMove,\n     RefMut,\n }\n \n@@ -701,6 +711,14 @@ fn build_call_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let rcvr = match rcvr_adjustment {\n         Adjustment::Identity => Operand::Move(rcvr_l),\n         Adjustment::Deref => Operand::Copy(rcvr_l.deref()),\n+        Adjustment::DerefMove => {\n+            // fn(Self, ...) -> fn(*mut Self, ...)\n+            let arg_ty = local_decls[rcvr_arg].ty;\n+            assert!(arg_ty.is_self());\n+            local_decls[rcvr_arg].ty = tcx.mk_mut_ptr(arg_ty);\n+\n+            Operand::Move(rcvr_l.deref())\n+        }\n         Adjustment::RefMut => {\n             // let rcvr = &mut rcvr;\n             let ref_rcvr = local_decls.push(temp_decl("}, {"sha": "7f365ce2bbaf3a98feae0b917744e23992a2cdac", "filename": "src/test/run-pass-valgrind/unsized-locals/by-value-trait-objects-rust-call.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Ftest%2Frun-pass-valgrind%2Funsized-locals%2Fby-value-trait-objects-rust-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Ftest%2Frun-pass-valgrind%2Funsized-locals%2Fby-value-trait-objects-rust-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-valgrind%2Funsized-locals%2Fby-value-trait-objects-rust-call.rs?ref=cae6efc37d70ab7d353e6ab9ce229d59a65ed643", "patch": "@@ -0,0 +1,55 @@\n+#![feature(unsized_locals)]\n+#![feature(unboxed_closures)]\n+\n+pub trait FnOnce<Args> {\n+    type Output;\n+    extern \"rust-call\" fn call_once(self, args: Args) -> Self::Output;\n+}\n+\n+struct A;\n+\n+impl FnOnce<()> for A {\n+    type Output = String;\n+    extern \"rust-call\" fn call_once(self, (): ()) -> Self::Output {\n+        format!(\"hello\")\n+    }\n+}\n+\n+struct B(i32);\n+\n+impl FnOnce<()> for B {\n+    type Output = String;\n+    extern \"rust-call\" fn call_once(self, (): ()) -> Self::Output {\n+        format!(\"{}\", self.0)\n+    }\n+}\n+\n+struct C(String);\n+\n+impl FnOnce<()> for C {\n+    type Output = String;\n+    extern \"rust-call\" fn call_once(self, (): ()) -> Self::Output {\n+        self.0\n+    }\n+}\n+\n+struct D(Box<String>);\n+\n+impl FnOnce<()> for D {\n+    type Output = String;\n+    extern \"rust-call\" fn call_once(self, (): ()) -> Self::Output {\n+        *self.0\n+    }\n+}\n+\n+\n+fn main() {\n+    let x = *(Box::new(A) as Box<dyn FnOnce<(), Output = String>>);\n+    assert_eq!(x.call_once(()), format!(\"hello\"));\n+    let x = *(Box::new(B(42)) as Box<dyn FnOnce<(), Output = String>>);\n+    assert_eq!(x.call_once(()), format!(\"42\"));\n+    let x = *(Box::new(C(format!(\"jumping fox\"))) as Box<dyn FnOnce<(), Output = String>>);\n+    assert_eq!(x.call_once(()), format!(\"jumping fox\"));\n+    let x = *(Box::new(D(Box::new(format!(\"lazy dog\")))) as Box<dyn FnOnce<(), Output = String>>);\n+    assert_eq!(x.call_once(()), format!(\"lazy dog\"));\n+}"}, {"sha": "a78b897d19414eed97cd129dc456d341ae66004f", "filename": "src/test/run-pass-valgrind/unsized-locals/by-value-trait-objects-rust-call2.rs", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Ftest%2Frun-pass-valgrind%2Funsized-locals%2Fby-value-trait-objects-rust-call2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Ftest%2Frun-pass-valgrind%2Funsized-locals%2Fby-value-trait-objects-rust-call2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-valgrind%2Funsized-locals%2Fby-value-trait-objects-rust-call2.rs?ref=cae6efc37d70ab7d353e6ab9ce229d59a65ed643", "patch": "@@ -0,0 +1,69 @@\n+#![feature(unsized_locals)]\n+#![feature(unboxed_closures)]\n+\n+pub trait FnOnce<Args> {\n+    type Output;\n+    extern \"rust-call\" fn call_once(self, args: Args) -> Self::Output;\n+}\n+\n+struct A;\n+\n+impl FnOnce<(String, Box<str>)> for A {\n+    type Output = String;\n+    extern \"rust-call\" fn call_once(self, (s1, s2): (String, Box<str>)) -> Self::Output {\n+        assert_eq!(&s1 as &str, \"s1\");\n+        assert_eq!(&s2 as &str, \"s2\");\n+        format!(\"hello\")\n+    }\n+}\n+\n+struct B(i32);\n+\n+impl FnOnce<(String, Box<str>)> for B {\n+    type Output = String;\n+    extern \"rust-call\" fn call_once(self, (s1, s2): (String, Box<str>)) -> Self::Output {\n+        assert_eq!(&s1 as &str, \"s1\");\n+        assert_eq!(&s2 as &str, \"s2\");\n+        format!(\"{}\", self.0)\n+    }\n+}\n+\n+struct C(String);\n+\n+impl FnOnce<(String, Box<str>)> for C {\n+    type Output = String;\n+    extern \"rust-call\" fn call_once(self, (s1, s2): (String, Box<str>)) -> Self::Output {\n+        assert_eq!(&s1 as &str, \"s1\");\n+        assert_eq!(&s2 as &str, \"s2\");\n+        self.0\n+    }\n+}\n+\n+struct D(Box<String>);\n+\n+impl FnOnce<(String, Box<str>)> for D {\n+    type Output = String;\n+    extern \"rust-call\" fn call_once(self, (s1, s2): (String, Box<str>)) -> Self::Output {\n+        assert_eq!(&s1 as &str, \"s1\");\n+        assert_eq!(&s2 as &str, \"s2\");\n+        *self.0\n+    }\n+}\n+\n+\n+fn main() {\n+    let (s1, s2) = (format!(\"s1\"), format!(\"s2\").into_boxed_str());\n+    let x = *(Box::new(A) as Box<dyn FnOnce<(String, Box<str>), Output = String>>);\n+    assert_eq!(x.call_once((s1, s2)), format!(\"hello\"));\n+    let (s1, s2) = (format!(\"s1\"), format!(\"s2\").into_boxed_str());\n+    let x = *(Box::new(B(42)) as Box<dyn FnOnce<(String, Box<str>), Output = String>>);\n+    assert_eq!(x.call_once((s1, s2)), format!(\"42\"));\n+    let (s1, s2) = (format!(\"s1\"), format!(\"s2\").into_boxed_str());\n+    let x = *(Box::new(C(format!(\"jumping fox\")))\n+              as Box<dyn FnOnce<(String, Box<str>), Output = String>>);\n+    assert_eq!(x.call_once((s1, s2)), format!(\"jumping fox\"));\n+    let (s1, s2) = (format!(\"s1\"), format!(\"s2\").into_boxed_str());\n+    let x = *(Box::new(D(Box::new(format!(\"lazy dog\"))))\n+              as Box<dyn FnOnce<(String, Box<str>), Output = String>>);\n+    assert_eq!(x.call_once((s1, s2)), format!(\"lazy dog\"));\n+}"}, {"sha": "3d67101e734c7eaa9e0213d4f11b24af92627e7c", "filename": "src/test/run-pass-valgrind/unsized-locals/by-value-trait-objects.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Ftest%2Frun-pass-valgrind%2Funsized-locals%2Fby-value-trait-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Ftest%2Frun-pass-valgrind%2Funsized-locals%2Fby-value-trait-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-valgrind%2Funsized-locals%2Fby-value-trait-objects.rs?ref=cae6efc37d70ab7d353e6ab9ce229d59a65ed643", "patch": "@@ -0,0 +1,49 @@\n+#![feature(unsized_locals)]\n+\n+pub trait Foo {\n+    fn foo(self) -> String;\n+}\n+\n+struct A;\n+\n+impl Foo for A {\n+    fn foo(self) -> String {\n+        format!(\"hello\")\n+    }\n+}\n+\n+struct B(i32);\n+\n+impl Foo for B {\n+    fn foo(self) -> String {\n+        format!(\"{}\", self.0)\n+    }\n+}\n+\n+struct C(String);\n+\n+impl Foo for C {\n+    fn foo(self) -> String {\n+        self.0\n+    }\n+}\n+\n+struct D(Box<String>);\n+\n+impl Foo for D {\n+    fn foo(self) -> String {\n+        *self.0\n+    }\n+}\n+\n+\n+fn main() {\n+    let x = *(Box::new(A) as Box<dyn Foo>);\n+    assert_eq!(x.foo(), format!(\"hello\"));\n+    let x = *(Box::new(B(42)) as Box<dyn Foo>);\n+    assert_eq!(x.foo(), format!(\"42\"));\n+    let x = *(Box::new(C(format!(\"jumping fox\"))) as Box<dyn Foo>);\n+    assert_eq!(x.foo(), format!(\"jumping fox\"));\n+    let x = *(Box::new(D(Box::new(format!(\"lazy dog\")))) as Box<dyn Foo>);\n+    assert_eq!(x.foo(), format!(\"lazy dog\"));\n+}"}, {"sha": "2f275f88d963ee40cbbe241a48e81d47d57b17ee", "filename": "src/test/run-pass-valgrind/unsized-locals/long-live-the-unsized-temporary.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Ftest%2Frun-pass-valgrind%2Funsized-locals%2Flong-live-the-unsized-temporary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Ftest%2Frun-pass-valgrind%2Funsized-locals%2Flong-live-the-unsized-temporary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-valgrind%2Funsized-locals%2Flong-live-the-unsized-temporary.rs?ref=cae6efc37d70ab7d353e6ab9ce229d59a65ed643", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n #![feature(unsized_locals)]\n \n use std::fmt;"}, {"sha": "885cd2b83608019cd66cb4863b8f2827ffda7fe4", "filename": "src/test/run-pass/unsized-locals/autoderef.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Ftest%2Frun-pass%2Funsized-locals%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Ftest%2Frun-pass%2Funsized-locals%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funsized-locals%2Fautoderef.rs?ref=cae6efc37d70ab7d353e6ab9ce229d59a65ed643", "patch": "@@ -0,0 +1,47 @@\n+#![feature(unsized_locals)]\n+\n+pub trait Foo {\n+    fn foo(self) -> String;\n+}\n+\n+impl Foo for [char] {\n+    fn foo(self) -> String {\n+        self.iter().collect()\n+    }\n+}\n+\n+impl Foo for str {\n+    fn foo(self) -> String {\n+        self.to_owned()\n+    }\n+}\n+\n+impl Foo for dyn FnMut() -> String {\n+    fn foo(mut self) -> String {\n+        self()\n+    }\n+}\n+\n+\n+fn main() {\n+    let x = *(Box::new(['h', 'e', 'l', 'l', 'o']) as Box<[char]>);\n+    assert_eq!(&x.foo() as &str, \"hello\");\n+\n+    let x = Box::new(['h', 'e', 'l', 'l', 'o']) as Box<[char]>;\n+    assert_eq!(&x.foo() as &str, \"hello\");\n+\n+    let x = \"hello\".to_owned().into_boxed_str();\n+    assert_eq!(&x.foo() as &str, \"hello\");\n+\n+    let x = *(\"hello\".to_owned().into_boxed_str());\n+    assert_eq!(&x.foo() as &str, \"hello\");\n+\n+    let x = \"hello\".to_owned().into_boxed_str();\n+    assert_eq!(&x.foo() as &str, \"hello\");\n+\n+    let x = *(Box::new(|| \"hello\".to_owned()) as Box<dyn FnMut() -> String>);\n+    assert_eq!(&x.foo() as &str, \"hello\");\n+\n+    let x = Box::new(|| \"hello\".to_owned()) as Box<dyn FnMut() -> String>;\n+    assert_eq!(&x.foo() as &str, \"hello\");\n+}"}, {"sha": "e6e363f55a1a6f764b56fa72eb052e29fab3c2c3", "filename": "src/test/run-pass/unsized-locals/by-value-trait-object-safety-withdefault.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Ftest%2Frun-pass%2Funsized-locals%2Fby-value-trait-object-safety-withdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Ftest%2Frun-pass%2Funsized-locals%2Fby-value-trait-object-safety-withdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funsized-locals%2Fby-value-trait-object-safety-withdefault.rs?ref=cae6efc37d70ab7d353e6ab9ce229d59a65ed643", "patch": "@@ -0,0 +1,21 @@\n+#![feature(unsized_locals)]\n+\n+pub trait Foo {\n+    fn foo(self) -> String {\n+        format!(\"hello\")\n+    }\n+}\n+\n+struct A;\n+\n+impl Foo for A {}\n+\n+\n+fn main() {\n+    let x = *(Box::new(A) as Box<dyn Foo>);\n+    assert_eq!(x.foo(), format!(\"hello\"));\n+\n+    // I'm not sure whether we want this to work\n+    let x = Box::new(A) as Box<dyn Foo>;\n+    assert_eq!(x.foo(), format!(\"hello\"));\n+}"}, {"sha": "f19ff5b8de462f6d99bd953c00f5a835df7e91a5", "filename": "src/test/run-pass/unsized-locals/by-value-trait-object-safety.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Ftest%2Frun-pass%2Funsized-locals%2Fby-value-trait-object-safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Ftest%2Frun-pass%2Funsized-locals%2Fby-value-trait-object-safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funsized-locals%2Fby-value-trait-object-safety.rs?ref=cae6efc37d70ab7d353e6ab9ce229d59a65ed643", "patch": "@@ -0,0 +1,23 @@\n+#![feature(unsized_locals)]\n+\n+pub trait Foo {\n+    fn foo(self) -> String;\n+}\n+\n+struct A;\n+\n+impl Foo for A {\n+    fn foo(self) -> String {\n+        format!(\"hello\")\n+    }\n+}\n+\n+\n+fn main() {\n+    let x = *(Box::new(A) as Box<dyn Foo>);\n+    assert_eq!(x.foo(), format!(\"hello\"));\n+\n+    // I'm not sure whether we want this to work\n+    let x = Box::new(A) as Box<dyn Foo>;\n+    assert_eq!(x.foo(), format!(\"hello\"));\n+}"}, {"sha": "1560d25d4b0de1f83151a98c7500f21d894f81d2", "filename": "src/test/run-pass/unsized-locals/reference-unsized-locals.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Ftest%2Frun-pass%2Funsized-locals%2Freference-unsized-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Ftest%2Frun-pass%2Funsized-locals%2Freference-unsized-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funsized-locals%2Freference-unsized-locals.rs?ref=cae6efc37d70ab7d353e6ab9ce229d59a65ed643", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n // run-pass\n \n #![feature(unsized_locals)]"}, {"sha": "059559192456d17a493dd1df25eccdc8745eb770", "filename": "src/test/run-pass/unsized-locals/simple-unsized-locals.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Ftest%2Frun-pass%2Funsized-locals%2Fsimple-unsized-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Ftest%2Frun-pass%2Funsized-locals%2Fsimple-unsized-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funsized-locals%2Fsimple-unsized-locals.rs?ref=cae6efc37d70ab7d353e6ab9ce229d59a65ed643", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n // run-pass\n \n #![feature(unsized_locals)]"}, {"sha": "4b988f1e72d5aff2300c9bf42b5554bda4342787", "filename": "src/test/run-pass/unsized-locals/unsized-exprs.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Ftest%2Frun-pass%2Funsized-locals%2Funsized-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Ftest%2Frun-pass%2Funsized-locals%2Funsized-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funsized-locals%2Funsized-exprs.rs?ref=cae6efc37d70ab7d353e6ab9ce229d59a65ed643", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n // run-pass\n \n #![feature(unsized_tuple_coercion, unsized_locals)]"}, {"sha": "3624154d5c44ce4907af2b55d2d12a40d661edfb", "filename": "src/test/run-pass/unsized-locals/unsized-parameters.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Ftest%2Frun-pass%2Funsized-locals%2Funsized-parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Ftest%2Frun-pass%2Funsized-locals%2Funsized-parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funsized-locals%2Funsized-parameters.rs?ref=cae6efc37d70ab7d353e6ab9ce229d59a65ed643", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n // run-pass\n \n #![feature(unsized_locals)]"}, {"sha": "551c5bb4a7591a6adb3c0f1bab31ba693c59ff22", "filename": "src/test/ui/symbol-names/basic.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.stderr?ref=cae6efc37d70ab7d353e6ab9ce229d59a65ed643", "patch": "@@ -1,4 +1,4 @@\n-error: symbol-name(_ZN5basic4main17h2138d548fb9814b6E)\n+error: symbol-name(_ZN5basic4main17h08bcaf310214ed52E)\n   --> $DIR/basic.rs:13:1\n    |\n LL | #[rustc_symbol_name] //~ ERROR _ZN5basic4main"}, {"sha": "73c8d7b9721c66adf070c97ec6fd5bc49241c109", "filename": "src/test/ui/symbol-names/impl1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.stderr?ref=cae6efc37d70ab7d353e6ab9ce229d59a65ed643", "patch": "@@ -1,4 +1,4 @@\n-error: symbol-name(_ZN5impl13foo3Foo3bar17h8da62e6147ff602fE)\n+error: symbol-name(_ZN5impl13foo3Foo3bar17hc487d6ec13fe9124E)\n   --> $DIR/impl1.rs:18:9\n    |\n LL |         #[rustc_symbol_name] //~ ERROR _ZN5impl13foo3Foo3bar\n@@ -10,7 +10,7 @@ error: item-path(foo::Foo::bar)\n LL |         #[rustc_item_path] //~ ERROR item-path(foo::Foo::bar)\n    |         ^^^^^^^^^^^^^^^^^^\n \n-error: symbol-name(_ZN5impl13bar33_$LT$impl$u20$impl1..foo..Foo$GT$3baz17h374cb8f6185db9b4E)\n+error: symbol-name(_ZN5impl13bar33_$LT$impl$u20$impl1..foo..Foo$GT$3baz17h38577281258e1527E)\n   --> $DIR/impl1.rs:28:9\n    |\n LL |         #[rustc_symbol_name] //~ ERROR _ZN5impl13bar33_$LT$impl$u20$impl1..foo..Foo$GT$3baz"}, {"sha": "a3cfcc89217661a710d980bd8fadd120b873b183", "filename": "src/test/ui/unsized-locals/borrow-after-move.nll.stderr", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Ftest%2Fui%2Funsized-locals%2Fborrow-after-move.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Ftest%2Fui%2Funsized-locals%2Fborrow-after-move.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fborrow-after-move.nll.stderr?ref=cae6efc37d70ab7d353e6ab9ce229d59a65ed643", "patch": "@@ -0,0 +1,51 @@\n+error[E0382]: borrow of moved value: `x`\n+  --> $DIR/borrow-after-move.rs:20:24\n+   |\n+LL |         let y = *x;\n+   |                 -- value moved here\n+LL |         drop_unsized(y);\n+LL |         println!(\"{}\", &x);\n+   |                        ^^ value borrowed here after move\n+\n+error[E0382]: borrow of moved value: `y`\n+  --> $DIR/borrow-after-move.rs:22:24\n+   |\n+LL |         drop_unsized(y);\n+   |                      - value moved here\n+...\n+LL |         println!(\"{}\", &y);\n+   |                        ^^ value borrowed here after move\n+   |\n+   = note: move occurs because `y` has type `str`, which does not implement the `Copy` trait\n+\n+error[E0382]: borrow of moved value: `x`\n+  --> $DIR/borrow-after-move.rs:30:24\n+   |\n+LL |         let y = *x;\n+   |                 -- value moved here\n+LL |         y.foo();\n+LL |         println!(\"{}\", &x);\n+   |                        ^^ value borrowed here after move\n+\n+error[E0382]: borrow of moved value: `y`\n+  --> $DIR/borrow-after-move.rs:32:24\n+   |\n+LL |         y.foo();\n+   |         - value moved here\n+...\n+LL |         println!(\"{}\", &y);\n+   |                        ^^ value borrowed here after move\n+   |\n+   = note: move occurs because `y` has type `str`, which does not implement the `Copy` trait\n+\n+error[E0382]: borrow of moved value: `x`\n+  --> $DIR/borrow-after-move.rs:39:24\n+   |\n+LL |         x.foo();\n+   |         - value moved here\n+LL |         println!(\"{}\", &x);\n+   |                        ^^ value borrowed here after move\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "587a2180c1558d175bdf93c0e069e7d7b855fe20", "filename": "src/test/ui/unsized-locals/borrow-after-move.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Ftest%2Fui%2Funsized-locals%2Fborrow-after-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Ftest%2Fui%2Funsized-locals%2Fborrow-after-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fborrow-after-move.rs?ref=cae6efc37d70ab7d353e6ab9ce229d59a65ed643", "patch": "@@ -0,0 +1,42 @@\n+#![feature(unsized_locals)]\n+\n+pub trait Foo {\n+    fn foo(self) -> String;\n+}\n+\n+impl Foo for str {\n+    fn foo(self) -> String {\n+        self.to_owned()\n+    }\n+}\n+\n+fn drop_unsized<T: ?Sized>(_: T) {}\n+\n+fn main() {\n+    {\n+        let x = \"hello\".to_owned().into_boxed_str();\n+        let y = *x;\n+        drop_unsized(y);\n+        println!(\"{}\", &x);\n+        //~^ERROR use of moved value\n+        println!(\"{}\", &y);\n+        //~^ERROR use of moved value\n+    }\n+\n+    {\n+        let x = \"hello\".to_owned().into_boxed_str();\n+        let y = *x;\n+        y.foo();\n+        println!(\"{}\", &x);\n+        //~^ERROR use of moved value\n+        println!(\"{}\", &y);\n+        //~^ERROR use of moved value\n+    }\n+\n+    {\n+        let x = \"hello\".to_owned().into_boxed_str();\n+        x.foo();\n+        println!(\"{}\", &x);\n+        //~^ERROR use of moved value\n+    }\n+}"}, {"sha": "8eea01f25c86585f8a62826a6748927c6f470ecf", "filename": "src/test/ui/unsized-locals/borrow-after-move.stderr", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Ftest%2Fui%2Funsized-locals%2Fborrow-after-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Ftest%2Fui%2Funsized-locals%2Fborrow-after-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fborrow-after-move.stderr?ref=cae6efc37d70ab7d353e6ab9ce229d59a65ed643", "patch": "@@ -0,0 +1,57 @@\n+error[E0382]: use of moved value: `x`\n+  --> $DIR/borrow-after-move.rs:20:25\n+   |\n+LL |         let y = *x;\n+   |             - value moved here\n+LL |         drop_unsized(y);\n+LL |         println!(\"{}\", &x);\n+   |                         ^ value used here after move\n+   |\n+   = note: move occurs because `*x` has type `str`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `y`\n+  --> $DIR/borrow-after-move.rs:22:25\n+   |\n+LL |         drop_unsized(y);\n+   |                      - value moved here\n+...\n+LL |         println!(\"{}\", &y);\n+   |                         ^ value used here after move\n+   |\n+   = note: move occurs because `y` has type `str`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `x`\n+  --> $DIR/borrow-after-move.rs:30:25\n+   |\n+LL |         let y = *x;\n+   |             - value moved here\n+LL |         y.foo();\n+LL |         println!(\"{}\", &x);\n+   |                         ^ value used here after move\n+   |\n+   = note: move occurs because `*x` has type `str`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `y`\n+  --> $DIR/borrow-after-move.rs:32:25\n+   |\n+LL |         y.foo();\n+   |         - value moved here\n+...\n+LL |         println!(\"{}\", &y);\n+   |                         ^ value used here after move\n+   |\n+   = note: move occurs because `y` has type `str`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `x`\n+  --> $DIR/borrow-after-move.rs:39:25\n+   |\n+LL |         x.foo();\n+   |         - value moved here\n+LL |         println!(\"{}\", &x);\n+   |                         ^ value used here after move\n+   |\n+   = note: move occurs because `*x` has type `str`, which does not implement the `Copy` trait\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "8b24328bd3854f498f03dee0c34d4b0bb343fba9", "filename": "src/test/ui/unsized-locals/by-value-trait-object-safety.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Ftest%2Fui%2Funsized-locals%2Fby-value-trait-object-safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Ftest%2Fui%2Funsized-locals%2Fby-value-trait-object-safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fby-value-trait-object-safety.rs?ref=cae6efc37d70ab7d353e6ab9ce229d59a65ed643", "patch": "@@ -0,0 +1,20 @@\n+#![feature(unsized_locals)]\n+\n+pub trait Foo {\n+    fn foo(self) -> String where Self: Sized;\n+}\n+\n+struct A;\n+\n+impl Foo for A {\n+    fn foo(self) -> String {\n+        format!(\"hello\")\n+    }\n+}\n+\n+\n+fn main() {\n+    let x = *(Box::new(A) as Box<dyn Foo>);\n+    x.foo();\n+    //~^ERROR the `foo` method cannot be invoked on a trait object\n+}"}, {"sha": "7e9a2316be2bf79e87141b24b5ca9d41513e7d1b", "filename": "src/test/ui/unsized-locals/by-value-trait-object-safety.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Ftest%2Fui%2Funsized-locals%2Fby-value-trait-object-safety.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Ftest%2Fui%2Funsized-locals%2Fby-value-trait-object-safety.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fby-value-trait-object-safety.stderr?ref=cae6efc37d70ab7d353e6ab9ce229d59a65ed643", "patch": "@@ -0,0 +1,8 @@\n+error: the `foo` method cannot be invoked on a trait object\n+  --> $DIR/by-value-trait-object-safety.rs:18:7\n+   |\n+LL |     x.foo();\n+   |       ^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "0555a8944bf94499cb464e2f01b4fdc4d02da0f3", "filename": "src/test/ui/unsized-locals/double-move.nll.stderr", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Ftest%2Fui%2Funsized-locals%2Fdouble-move.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Ftest%2Fui%2Funsized-locals%2Fdouble-move.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fdouble-move.nll.stderr?ref=cae6efc37d70ab7d353e6ab9ce229d59a65ed643", "patch": "@@ -0,0 +1,55 @@\n+error[E0382]: use of moved value: `y`\n+  --> $DIR/double-move.rs:20:22\n+   |\n+LL |         drop_unsized(y);\n+   |                      - value moved here\n+LL |         drop_unsized(y); //~ERROR use of moved value\n+   |                      ^ value used here after move\n+   |\n+   = note: move occurs because `y` has type `str`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `x`\n+  --> $DIR/double-move.rs:26:22\n+   |\n+LL |         let _y = *x;\n+   |                  -- value moved here\n+LL |         drop_unsized(x); //~ERROR use of moved value\n+   |                      ^ value used here after move\n+\n+error[E0382]: use of moved value: `*x`\n+  --> $DIR/double-move.rs:32:18\n+   |\n+LL |         drop_unsized(x);\n+   |                      - value moved here\n+LL |         let _y = *x; //~ERROR use of moved value\n+   |                  ^^ value used here after move\n+\n+error[E0382]: use of moved value: `y`\n+  --> $DIR/double-move.rs:39:9\n+   |\n+LL |         y.foo();\n+   |         - value moved here\n+LL |         y.foo(); //~ERROR use of moved value\n+   |         ^ value used here after move\n+   |\n+   = note: move occurs because `y` has type `str`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `*x`\n+  --> $DIR/double-move.rs:45:9\n+   |\n+LL |         let _y = *x;\n+   |                  -- value moved here\n+LL |         x.foo(); //~ERROR use of moved value\n+   |         ^ value used here after move\n+\n+error[E0382]: use of moved value: `*x`\n+  --> $DIR/double-move.rs:51:18\n+   |\n+LL |         x.foo();\n+   |         - value moved here\n+LL |         let _y = *x; //~ERROR use of moved value\n+   |                  ^^ value used here after move\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "c3a50341bc96213ad4c390f17cd6cc1f2b615c83", "filename": "src/test/ui/unsized-locals/double-move.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Ftest%2Fui%2Funsized-locals%2Fdouble-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Ftest%2Fui%2Funsized-locals%2Fdouble-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fdouble-move.rs?ref=cae6efc37d70ab7d353e6ab9ce229d59a65ed643", "patch": "@@ -0,0 +1,53 @@\n+#![feature(unsized_locals)]\n+\n+pub trait Foo {\n+    fn foo(self) -> String;\n+}\n+\n+impl Foo for str {\n+    fn foo(self) -> String {\n+        self.to_owned()\n+    }\n+}\n+\n+fn drop_unsized<T: ?Sized>(_: T) {}\n+\n+fn main() {\n+    {\n+        let x = \"hello\".to_owned().into_boxed_str();\n+        let y = *x;\n+        drop_unsized(y);\n+        drop_unsized(y); //~ERROR use of moved value\n+    }\n+\n+    {\n+        let x = \"hello\".to_owned().into_boxed_str();\n+        let _y = *x;\n+        drop_unsized(x); //~ERROR use of moved value\n+    }\n+\n+    {\n+        let x = \"hello\".to_owned().into_boxed_str();\n+        drop_unsized(x);\n+        let _y = *x; //~ERROR use of moved value\n+    }\n+\n+    {\n+        let x = \"hello\".to_owned().into_boxed_str();\n+        let y = *x;\n+        y.foo();\n+        y.foo(); //~ERROR use of moved value\n+    }\n+\n+    {\n+        let x = \"hello\".to_owned().into_boxed_str();\n+        let _y = *x;\n+        x.foo(); //~ERROR use of moved value\n+    }\n+\n+    {\n+        let x = \"hello\".to_owned().into_boxed_str();\n+        x.foo();\n+        let _y = *x; //~ERROR use of moved value\n+    }\n+}"}, {"sha": "1009e913b7b67bbdb7d93a783741da668650fb71", "filename": "src/test/ui/unsized-locals/double-move.stderr", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Ftest%2Fui%2Funsized-locals%2Fdouble-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Ftest%2Fui%2Funsized-locals%2Fdouble-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fdouble-move.stderr?ref=cae6efc37d70ab7d353e6ab9ce229d59a65ed643", "patch": "@@ -0,0 +1,63 @@\n+error[E0382]: use of moved value: `y`\n+  --> $DIR/double-move.rs:20:22\n+   |\n+LL |         drop_unsized(y);\n+   |                      - value moved here\n+LL |         drop_unsized(y); //~ERROR use of moved value\n+   |                      ^ value used here after move\n+   |\n+   = note: move occurs because `y` has type `str`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `x`\n+  --> $DIR/double-move.rs:26:22\n+   |\n+LL |         let _y = *x;\n+   |             -- value moved here\n+LL |         drop_unsized(x); //~ERROR use of moved value\n+   |                      ^ value used here after move\n+   |\n+   = note: move occurs because `*x` has type `str`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `*x`\n+  --> $DIR/double-move.rs:32:13\n+   |\n+LL |         drop_unsized(x);\n+   |                      - value moved here\n+LL |         let _y = *x; //~ERROR use of moved value\n+   |             ^^ value used here after move\n+   |\n+   = note: move occurs because `x` has type `std::boxed::Box<str>`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `y`\n+  --> $DIR/double-move.rs:39:9\n+   |\n+LL |         y.foo();\n+   |         - value moved here\n+LL |         y.foo(); //~ERROR use of moved value\n+   |         ^ value used here after move\n+   |\n+   = note: move occurs because `y` has type `str`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `*x`\n+  --> $DIR/double-move.rs:45:9\n+   |\n+LL |         let _y = *x;\n+   |             -- value moved here\n+LL |         x.foo(); //~ERROR use of moved value\n+   |         ^ value used here after move\n+   |\n+   = note: move occurs because `*x` has type `str`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `*x`\n+  --> $DIR/double-move.rs:51:13\n+   |\n+LL |         x.foo();\n+   |         - value moved here\n+LL |         let _y = *x; //~ERROR use of moved value\n+   |             ^^ value used here after move\n+   |\n+   = note: move occurs because `*x` has type `str`, which does not implement the `Copy` trait\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "0cf93c78c4abe11b63015255a74cc8e68830bb89", "filename": "src/test/ui/unsized-locals/unsized-exprs.rs", "status": "renamed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs.rs?ref=cae6efc37d70ab7d353e6ab9ce229d59a65ed643", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n #![feature(unsized_tuple_coercion, unsized_locals)]\n \n struct A<X: ?Sized>(X);", "previous_filename": "src/test/compile-fail/unsized-locals/unsized-exprs.rs"}, {"sha": "eb2016941770ca662b1be26646aa8e94bc6946ce", "filename": "src/test/ui/unsized-locals/unsized-exprs.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs.stderr?ref=cae6efc37d70ab7d353e6ab9ce229d59a65ed643", "patch": "@@ -0,0 +1,25 @@\n+error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n+  --> $DIR/unsized-exprs.rs:22:26\n+   |\n+LL |     udrop::<(i32, [u8])>((42, *foo()));\n+   |                          ^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: within `({integer}, [u8])`, the trait `std::marker::Sized` is not implemented for `[u8]`\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: required because it appears within the type `({integer}, [u8])`\n+   = note: tuples must have a statically known size to be initialized\n+\n+error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n+  --> $DIR/unsized-exprs.rs:24:22\n+   |\n+LL |     udrop::<A<[u8]>>(A { 0: *foo() });\n+   |                      ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: within `A<[u8]>`, the trait `std::marker::Sized` is not implemented for `[u8]`\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: required because it appears within the type `A<[u8]>`\n+   = note: structs must have a statically known size to be initialized\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "675457b0db6bb2ff72251c490388a544408219be", "filename": "src/test/ui/unsized-locals/unsized-exprs2.nll.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs2.nll.stderr?ref=cae6efc37d70ab7d353e6ab9ce229d59a65ed643", "patch": "@@ -0,0 +1,19 @@\n+error[E0508]: cannot move out of type `[u8]`, a non-copy slice\n+  --> $DIR/unsized-exprs2.rs:22:19\n+   |\n+LL |     udrop::<[u8]>(foo()[..]);\n+   |                   ^^^^^^^^^ cannot move out of here\n+\n+error[E0507]: cannot move out of data in a `&` reference\n+  --> $DIR/unsized-exprs2.rs:22:19\n+   |\n+LL |     udrop::<[u8]>(foo()[..]);\n+   |                   ^^^^^^^^^\n+   |                   |\n+   |                   cannot move out of data in a `&` reference\n+   |                   cannot move\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors occurred: E0507, E0508.\n+For more information about an error, try `rustc --explain E0507`."}, {"sha": "ae69893a835773046be38daaa2f9cdb9eaaf53a9", "filename": "src/test/ui/unsized-locals/unsized-exprs2.rs", "status": "renamed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs2.rs?ref=cae6efc37d70ab7d353e6ab9ce229d59a65ed643", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n #![feature(unsized_tuple_coercion, unsized_locals)]\n \n struct A<X: ?Sized>(X);", "previous_filename": "src/test/compile-fail/unsized-locals/unsized-exprs2.rs"}, {"sha": "d7cb4bffb483da2b66da63ce3aac9894b095c2d4", "filename": "src/test/ui/unsized-locals/unsized-exprs2.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cae6efc37d70ab7d353e6ab9ce229d59a65ed643/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs2.stderr?ref=cae6efc37d70ab7d353e6ab9ce229d59a65ed643", "patch": "@@ -0,0 +1,9 @@\n+error[E0507]: cannot move out of indexed content\n+  --> $DIR/unsized-exprs2.rs:22:19\n+   |\n+LL |     udrop::<[u8]>(foo()[..]);\n+   |                   ^^^^^^^^^ cannot move out of indexed content\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0507`."}]}