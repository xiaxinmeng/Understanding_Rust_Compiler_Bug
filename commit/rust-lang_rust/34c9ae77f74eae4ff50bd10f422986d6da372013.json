{"sha": "34c9ae77f74eae4ff50bd10f422986d6da372013", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0YzlhZTc3Zjc0ZWFlNGZmNTBiZDEwZjQyMjk4NmQ2ZGEzNzIwMTM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-05-28T13:53:10Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-05-28T23:47:04Z"}, "message": "refactor `resolve_lifetime` to track outer-index, not depth\n\nCo-authored-by: csmoe <35686186+csmoe@users.noreply.github.com>", "tree": {"sha": "8e5f5aef43271e0164a7c12d0b354c678733257f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e5f5aef43271e0164a7c12d0b354c678733257f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34c9ae77f74eae4ff50bd10f422986d6da372013", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34c9ae77f74eae4ff50bd10f422986d6da372013", "html_url": "https://github.com/rust-lang/rust/commit/34c9ae77f74eae4ff50bd10f422986d6da372013", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34c9ae77f74eae4ff50bd10f422986d6da372013/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f965b79ccff2beadb52b817c67f56984e9e29112", "url": "https://api.github.com/repos/rust-lang/rust/commits/f965b79ccff2beadb52b817c67f56984e9e29112", "html_url": "https://github.com/rust-lang/rust/commit/f965b79ccff2beadb52b817c67f56984e9e29112"}], "stats": {"total": 26, "additions": 11, "deletions": 15}, "files": [{"sha": "53d51d9429fb585b9c2e76f7c989510ea775c2a8", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/34c9ae77f74eae4ff50bd10f422986d6da372013/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34c9ae77f74eae4ff50bd10f422986d6da372013/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=34c9ae77f74eae4ff50bd10f422986d6da372013", "patch": "@@ -133,19 +133,15 @@ impl Region {\n         }\n     }\n \n-    fn from_depth(self, depth: u32) -> Region {\n+    fn shifted_out_to_binder(self, binder: ty::DebruijnIndex) -> Region {\n         match self {\n             Region::LateBound(debruijn, id, origin) => Region::LateBound(\n-                ty::DebruijnIndex {\n-                    depth: debruijn.depth - (depth - 1),\n-                },\n+                debruijn.shifted_out_to_binder(binder),\n                 id,\n                 origin,\n             ),\n             Region::LateBoundAnon(debruijn, index) => Region::LateBoundAnon(\n-                ty::DebruijnIndex {\n-                    depth: debruijn.depth - (depth - 1),\n-                },\n+                debruijn.shifted_out_to_binder(binder),\n                 index,\n             ),\n             _ => self,\n@@ -1858,7 +1854,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             .map(|(i, input)| {\n                 let mut gather = GatherLifetimes {\n                     map: self.map,\n-                    binder_depth: 1,\n+                    outer_index: ty::DebruijnIndex::INNERMOST,\n                     have_bound_regions: false,\n                     lifetimes: FxHashSet(),\n                 };\n@@ -1899,7 +1895,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n \n         struct GatherLifetimes<'a> {\n             map: &'a NamedRegionMap,\n-            binder_depth: u32,\n+            outer_index: ty::DebruijnIndex,\n             have_bound_regions: bool,\n             lifetimes: FxHashSet<Region>,\n         }\n@@ -1911,7 +1907,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n \n             fn visit_ty(&mut self, ty: &hir::Ty) {\n                 if let hir::TyBareFn(_) = ty.node {\n-                    self.binder_depth += 1;\n+                    self.outer_index.shift_in(1);\n                 }\n                 if let hir::TyTraitObject(ref bounds, ref lifetime) = ty.node {\n                     for bound in bounds {\n@@ -1927,7 +1923,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                     intravisit::walk_ty(self, ty);\n                 }\n                 if let hir::TyBareFn(_) = ty.node {\n-                    self.binder_depth -= 1;\n+                    self.outer_index.shift_out(1);\n                 }\n             }\n \n@@ -1946,22 +1942,22 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                 trait_ref: &hir::PolyTraitRef,\n                 modifier: hir::TraitBoundModifier,\n             ) {\n-                self.binder_depth += 1;\n+                self.outer_index.shift_in(1);\n                 intravisit::walk_poly_trait_ref(self, trait_ref, modifier);\n-                self.binder_depth -= 1;\n+                self.outer_index.shift_out(1);\n             }\n \n             fn visit_lifetime(&mut self, lifetime_ref: &hir::Lifetime) {\n                 if let Some(&lifetime) = self.map.defs.get(&lifetime_ref.id) {\n                     match lifetime {\n                         Region::LateBound(debruijn, _, _) | Region::LateBoundAnon(debruijn, _)\n-                            if debruijn.depth < self.binder_depth =>\n+                            if debruijn < self.outer_index =>\n                         {\n                             self.have_bound_regions = true;\n                         }\n                         _ => {\n                             self.lifetimes\n-                                .insert(lifetime.from_depth(self.binder_depth));\n+                                .insert(lifetime.shifted_out_to_binder(self.outer_index));\n                         }\n                     }\n                 }"}]}