{"sha": "59f5045a1696018411f10807057e3168aa8a6ee5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5ZjUwNDVhMTY5NjAxODQxMWYxMDgwNzA1N2UzMTY4YWE4YTZlZTU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-06-12T14:42:21Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-06-12T17:56:29Z"}, "message": "add more debug logs", "tree": {"sha": "f65c8fc4239b6b0f17033074f442182e3ff5eeaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f65c8fc4239b6b0f17033074f442182e3ff5eeaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59f5045a1696018411f10807057e3168aa8a6ee5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59f5045a1696018411f10807057e3168aa8a6ee5", "html_url": "https://github.com/rust-lang/rust/commit/59f5045a1696018411f10807057e3168aa8a6ee5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59f5045a1696018411f10807057e3168aa8a6ee5/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6fdcc8281a93c3aa032df245ca5d0342adcb01b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fdcc8281a93c3aa032df245ca5d0342adcb01b1", "html_url": "https://github.com/rust-lang/rust/commit/6fdcc8281a93c3aa032df245ca5d0342adcb01b1"}], "stats": {"total": 42, "additions": 40, "deletions": 2}, "files": [{"sha": "5a59a13a37c5233ffded421b417b4a451e9e9b25", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 40, "deletions": 2, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/59f5045a1696018411f10807057e3168aa8a6ee5/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f5045a1696018411f10807057e3168aa8a6ee5/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=59f5045a1696018411f10807057e3168aa8a6ee5", "patch": "@@ -4126,7 +4126,7 @@ struct ProvisionalEvaluationCache<'tcx> {\n \n /// A cache value for the provisional cache: contains the depth-first\n /// number (DFN) and result.\n-#[derive(Copy, Clone)]\n+#[derive(Copy, Clone, Debug)]\n struct ProvisionalEvaluation {\n     from_dfn: usize,\n     result: EvaluationResult,\n@@ -4145,6 +4145,11 @@ impl<'tcx> ProvisionalEvaluationCache<'tcx> {\n     /// it an access to the stack slots at depth\n     /// `self.current_reached_depth()` and above.\n     fn get_provisional(&self, fresh_trait_ref: ty::PolyTraitRef<'tcx>) -> Option<EvaluationResult> {\n+        debug!(\n+            \"get_provisional(fresh_trait_ref={:?}) = {:#?}\",\n+            fresh_trait_ref,\n+            self.map.borrow().get(&fresh_trait_ref),\n+        );\n         Some(self.map.borrow().get(&fresh_trait_ref)?.result)\n     }\n \n@@ -4166,9 +4171,18 @@ impl<'tcx> ProvisionalEvaluationCache<'tcx> {\n         fresh_trait_ref: ty::PolyTraitRef<'tcx>,\n         result: EvaluationResult,\n     ) {\n+        debug!(\n+            \"insert_provisional(from_dfn={}, reached_depth={}, fresh_trait_ref={:?}, result={:?})\",\n+            from_dfn,\n+            reached_depth,\n+            fresh_trait_ref,\n+            result,\n+        );\n         let r_d = self.reached_depth.get();\n         self.reached_depth.set(r_d.min(reached_depth));\n \n+        debug!(\"insert_provisional: reached_depth={:?}\", self.reached_depth.get());\n+\n         self.map.borrow_mut().insert(fresh_trait_ref, ProvisionalEvaluation { from_dfn, result });\n     }\n \n@@ -4181,7 +4195,18 @@ impl<'tcx> ProvisionalEvaluationCache<'tcx> {\n     /// these provisional entries must either depend on it or some\n     /// ancestor of it.\n     fn on_failure(&self, dfn: usize) {\n-        self.map.borrow_mut().retain(|_key, eval| eval.from_dfn >= dfn)\n+        debug!(\n+            \"on_failure(dfn={:?})\",\n+            dfn,\n+        );\n+        self.map.borrow_mut().retain(|key, eval| {\n+            if !eval.from_dfn >= dfn {\n+                debug!(\"on_failure: removing {:?}\", key);\n+                false\n+            } else {\n+                true\n+            }\n+        });\n     }\n \n     /// Invoked when the node at depth `depth` completed without\n@@ -4194,11 +4219,24 @@ impl<'tcx> ProvisionalEvaluationCache<'tcx> {\n         depth: usize,\n         mut op: impl FnMut(ty::PolyTraitRef<'tcx>, EvaluationResult),\n     ) {\n+        debug!(\n+            \"on_completion(depth={}, reached_depth={})\",\n+            depth,\n+            self.reached_depth.get(),\n+        );\n+\n         if self.reached_depth.get() < depth {\n+            debug!(\"on_completion: did not yet reach depth to complete\");\n             return;\n         }\n \n         for (fresh_trait_ref, eval) in self.map.borrow_mut().drain() {\n+            debug!(\n+                \"on_completion: fresh_trait_ref={:?} eval={:?}\",\n+                fresh_trait_ref,\n+                eval,\n+            );\n+\n             op(fresh_trait_ref, eval.result);\n         }\n "}]}