{"sha": "3d14470be4194656e2f71120f232f9349e896711", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkMTQ0NzBiZTQxOTQ2NTZlMmY3MTEyMGYyMzJmOTM0OWU4OTY3MTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-04T19:49:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-04T19:49:53Z"}, "message": "auto merge of #7115 : alexcrichton/rust/llvm-upgrades, r=thestinger\n\nThis is a reopening of #6713\r\n\r\nThis is still blocked on windows failures. I'll re-push try once the existing crisis has passed.", "tree": {"sha": "5b0586d1db80694ea5b20443f53d3c6986fe6c02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b0586d1db80694ea5b20443f53d3c6986fe6c02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d14470be4194656e2f71120f232f9349e896711", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d14470be4194656e2f71120f232f9349e896711", "html_url": "https://github.com/rust-lang/rust/commit/3d14470be4194656e2f71120f232f9349e896711", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d14470be4194656e2f71120f232f9349e896711/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b49d026ecd3c37d3156f614325f409ed988c2d0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b49d026ecd3c37d3156f614325f409ed988c2d0b", "html_url": "https://github.com/rust-lang/rust/commit/b49d026ecd3c37d3156f614325f409ed988c2d0b"}, {"sha": "60e9507086dd0329fc4e96897d4d89c7d6b271f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/60e9507086dd0329fc4e96897d4d89c7d6b271f6", "html_url": "https://github.com/rust-lang/rust/commit/60e9507086dd0329fc4e96897d4d89c7d6b271f6"}], "stats": {"total": 152, "additions": 72, "deletions": 80}, "files": [{"sha": "88ead6e608d5c4ee00212451f47c281d09d00846", "filename": ".gitmodules", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d14470be4194656e2f71120f232f9349e896711/.gitmodules", "raw_url": "https://github.com/rust-lang/rust/raw/3d14470be4194656e2f71120f232f9349e896711/.gitmodules", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitmodules?ref=3d14470be4194656e2f71120f232f9349e896711", "patch": "@@ -1,6 +1,6 @@\n [submodule \"src/llvm\"]\n \tpath = src/llvm\n-\turl = https://github.com/brson/llvm.git\n+\turl = https://github.com/alexcrichton/llvm.git\n \tbranch = master\n [submodule \"src/libuv\"]\n \tpath = src/libuv"}, {"sha": "12ccc55d4fae135020c85a0529f26f7046cefd54", "filename": "mk/llvm.mk", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d14470be4194656e2f71120f232f9349e896711/mk%2Fllvm.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d14470be4194656e2f71120f232f9349e896711/mk%2Fllvm.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fllvm.mk?ref=3d14470be4194656e2f71120f232f9349e896711", "patch": "@@ -14,7 +14,9 @@ LLVM_DEPS := $(S)/.gitmodules\n else\n \n # This is just a rough approximation of LLVM deps\n-LLVM_DEPS=$(call rwildcard,$(CFG_LLVM_SRC_DIR),*cpp *hpp)\n+LLVM_DEPS_SRC=$(call rwildcard,$(CFG_LLVM_SRC_DIR)/lib,*cpp *hpp)\n+LLVM_DEPS_INC=$(call rwildcard,$(CFG_LLVM_SRC_DIR)/include,*cpp *hpp)\n+LLVM_DEPS=$(LLVM_DEPS_SRC) $(LLVM_DEPS_INC)\n endif\n \n define DEF_LLVM_RULES"}, {"sha": "b77ed10c21ba4e3b5abe4cefea307125ac0bc81c", "filename": "src/librustc/back/passes.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d14470be4194656e2f71120f232f9349e896711/src%2Flibrustc%2Fback%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d14470be4194656e2f71120f232f9349e896711/src%2Flibrustc%2Fback%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Fpasses.rs?ref=3d14470be4194656e2f71120f232f9349e896711", "patch": "@@ -97,7 +97,6 @@ pub fn create_standard_passes(level: OptLevel) -> ~[~str] {\n         passes.push(~\"sroa\");\n         passes.push(~\"domtree\");\n         passes.push(~\"early-cse\");\n-        passes.push(~\"simplify-libcalls\");\n         passes.push(~\"lazy-value-info\");\n         passes.push(~\"jump-threading\");\n         passes.push(~\"correlated-propagation\");"}, {"sha": "356cdaf754eebe7b199bf20870b46568e552d317", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 55, "deletions": 30, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/3d14470be4194656e2f71120f232f9349e896711/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d14470be4194656e2f71120f232f9349e896711/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=3d14470be4194656e2f71120f232f9349e896711", "patch": "@@ -59,35 +59,37 @@ pub enum Linkage {\n \n #[deriving(Clone)]\n pub enum Attribute {\n-    ZExtAttribute = 1,\n-    SExtAttribute = 2,\n-    NoReturnAttribute = 4,\n-    InRegAttribute = 8,\n-    StructRetAttribute = 16,\n-    NoUnwindAttribute = 32,\n-    NoAliasAttribute = 64,\n-    ByValAttribute = 128,\n-    NestAttribute = 256,\n-    ReadNoneAttribute = 512,\n-    ReadOnlyAttribute = 1024,\n-    NoInlineAttribute = 2048,\n-    AlwaysInlineAttribute = 4096,\n-    OptimizeForSizeAttribute = 8192,\n-    StackProtectAttribute = 16384,\n-    StackProtectReqAttribute = 32768,\n-    // 31 << 16\n-    AlignmentAttribute = 2031616,\n-    NoCaptureAttribute = 2097152,\n-    NoRedZoneAttribute = 4194304,\n-    NoImplicitFloatAttribute = 8388608,\n-    NakedAttribute = 16777216,\n-    InlineHintAttribute = 33554432,\n-    // 7 << 26\n-    StackAttribute = 469762048,\n-    ReturnsTwiceAttribute = 536870912,\n-    // 1 << 30\n-    UWTableAttribute = 1073741824,\n-    NonLazyBindAttribute = 2147483648,\n+    ZExtAttribute = 1 << 0,\n+    SExtAttribute = 1 << 1,\n+    NoReturnAttribute = 1 << 2,\n+    InRegAttribute = 1 << 3,\n+    StructRetAttribute = 1 << 4,\n+    NoUnwindAttribute = 1 << 5,\n+    NoAliasAttribute = 1 << 6,\n+    ByValAttribute = 1 << 7,\n+    NestAttribute = 1 << 8,\n+    ReadNoneAttribute = 1 << 9,\n+    ReadOnlyAttribute = 1 << 10,\n+    NoInlineAttribute = 1 << 11,\n+    AlwaysInlineAttribute = 1 << 12,\n+    OptimizeForSizeAttribute = 1 << 13,\n+    StackProtectAttribute = 1 << 14,\n+    StackProtectReqAttribute = 1 << 15,\n+    AlignmentAttribute = 31 << 16,\n+    NoCaptureAttribute = 1 << 21,\n+    NoRedZoneAttribute = 1 << 22,\n+    NoImplicitFloatAttribute = 1 << 23,\n+    NakedAttribute = 1 << 24,\n+    InlineHintAttribute = 1 << 25,\n+    StackAttribute = 7 << 26,\n+    ReturnsTwiceAttribute = 1 << 29,\n+    UWTableAttribute = 1 << 30,\n+    NonLazyBindAttribute = 1 << 31,\n+\n+    // Not added to LLVM yet, so may need to stay updated if LLVM changes.\n+    // FIXME(#8199): if this changes, be sure to change the relevant constant\n+    //               down below\n+    // FixedStackSegment = 1 << 41,\n }\n \n // enum for the LLVM IntPredicate type\n@@ -1541,7 +1543,8 @@ pub mod llvm {\n                                   Op: AtomicBinOp,\n                                   LHS: ValueRef,\n                                   RHS: ValueRef,\n-                                  Order: AtomicOrdering)\n+                                  Order: AtomicOrdering,\n+                                  SingleThreaded: Bool)\n                                   -> ValueRef;\n \n         pub fn LLVMBuildAtomicFence(B: BuilderRef, Order: AtomicOrdering);\n@@ -2106,6 +2109,28 @@ pub fn ConstFCmp(Pred: RealPredicate, V1: ValueRef, V2: ValueRef) -> ValueRef {\n         llvm::LLVMConstFCmp(Pred as c_ushort, V1, V2)\n     }\n }\n+\n+pub fn SetFunctionAttribute(Fn: ValueRef, attr: Attribute) {\n+    unsafe {\n+        let attr = attr as u64;\n+        let lower = attr & 0xffffffff;\n+        let upper = (attr >> 32) & 0xffffffff;\n+        llvm::LLVMAddFunctionAttr(Fn, lower as c_uint, upper as c_uint);\n+    }\n+}\n+\n+// FIXME(#8199): this shouldn't require this hackery. On i686\n+//               (FixedStackSegment as u64) will return 0 instead of 1 << 41.\n+//               Furthermore, if we use a match of any sort then an LLVM\n+//               assertion is generated!\n+pub fn SetFixedStackSegmentAttribute(Fn: ValueRef) {\n+    unsafe {\n+        let attr = 1u64 << 41;\n+        let lower = attr & 0xffffffff;\n+        let upper = (attr >> 32) & 0xffffffff;\n+        llvm::LLVMAddFunctionAttr(Fn, lower as c_uint, upper as c_uint);\n+    }\n+}\n /* Memory-managed object interface to type handles. */\n \n pub struct TypeNames {"}, {"sha": "fc39af095b79c9a1dea95f31d789d7190ce4c2fb", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 7, "deletions": 34, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/3d14470be4194656e2f71120f232f9349e896711/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d14470be4194656e2f71120f232f9349e896711/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=3d14470be4194656e2f71120f232f9349e896711", "patch": "@@ -419,46 +419,25 @@ pub fn get_tydesc(ccx: &mut CrateContext, t: ty::t) -> @mut tydesc_info {\n }\n \n pub fn set_optimize_for_size(f: ValueRef) {\n-    unsafe {\n-        llvm::LLVMAddFunctionAttr(f,\n-                                  lib::llvm::OptimizeForSizeAttribute\n-                                    as c_uint,\n-                                  0);\n-    }\n+    lib::llvm::SetFunctionAttribute(f, lib::llvm::OptimizeForSizeAttribute)\n }\n \n pub fn set_no_inline(f: ValueRef) {\n-    unsafe {\n-        llvm::LLVMAddFunctionAttr(f,\n-                                  lib::llvm::NoInlineAttribute as c_uint,\n-                                  0);\n-    }\n+    lib::llvm::SetFunctionAttribute(f, lib::llvm::NoInlineAttribute)\n }\n \n pub fn set_no_unwind(f: ValueRef) {\n-    unsafe {\n-        llvm::LLVMAddFunctionAttr(f,\n-                                  lib::llvm::NoUnwindAttribute as c_uint,\n-                                  0);\n-    }\n+    lib::llvm::SetFunctionAttribute(f, lib::llvm::NoUnwindAttribute)\n }\n \n // Tell LLVM to emit the information necessary to unwind the stack for the\n // function f.\n pub fn set_uwtable(f: ValueRef) {\n-    unsafe {\n-        llvm::LLVMAddFunctionAttr(f,\n-                                  lib::llvm::UWTableAttribute as c_uint,\n-                                  0);\n-    }\n+    lib::llvm::SetFunctionAttribute(f, lib::llvm::UWTableAttribute)\n }\n \n pub fn set_inline_hint(f: ValueRef) {\n-    unsafe {\n-        llvm::LLVMAddFunctionAttr(f,\n-                                  lib::llvm::InlineHintAttribute as c_uint,\n-                                  0);\n-    }\n+    lib::llvm::SetFunctionAttribute(f, lib::llvm::InlineHintAttribute)\n }\n \n pub fn set_inline_hint_if_appr(attrs: &[ast::Attribute],\n@@ -473,17 +452,11 @@ pub fn set_inline_hint_if_appr(attrs: &[ast::Attribute],\n }\n \n pub fn set_always_inline(f: ValueRef) {\n-    unsafe {\n-        llvm::LLVMAddFunctionAttr(f,\n-                                  lib::llvm::AlwaysInlineAttribute as c_uint,\n-                                  0);\n-    }\n+    lib::llvm::SetFunctionAttribute(f, lib::llvm::AlwaysInlineAttribute)\n }\n \n pub fn set_fixed_stack_segment(f: ValueRef) {\n-    unsafe {\n-        llvm::LLVMAddFunctionAttr(f, 0, 1 << (39 - 32));\n-    }\n+    lib::llvm::SetFixedStackSegmentAttribute(f);\n }\n \n pub fn set_glue_inlining(f: ValueRef, t: ty::t) {"}, {"sha": "1d821e5af94bd3769c8477a846978c66564209e9", "filename": "src/librustc/middle/trans/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d14470be4194656e2f71120f232f9349e896711/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d14470be4194656e2f71120f232f9349e896711/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuilder.rs?ref=3d14470be4194656e2f71120f232f9349e896711", "patch": "@@ -940,7 +940,7 @@ impl Builder {\n                      dst: ValueRef, src: ValueRef,\n                      order: AtomicOrdering) -> ValueRef {\n         unsafe {\n-            llvm::LLVMBuildAtomicRMW(self.llbuilder, op, dst, src, order)\n+            llvm::LLVMBuildAtomicRMW(self.llbuilder, op, dst, src, order, False)\n         }\n     }\n "}, {"sha": "f67442eee27d3d075a65cf7f9a70f7ec6649ffd1", "filename": "src/llvm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm?ref=3d14470be4194656e2f71120f232f9349e896711", "patch": "@@ -1 +1 @@\n-Subproject commit 2e9f0d21fe321849a4759a01fc28eae82ef196d6\n+Subproject commit f67442eee27d3d075a65cf7f9a70f7ec6649ffd1"}, {"sha": "04c062072d6cb4d8fd9dc4152f0af3f028f95f25", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3d14470be4194656e2f71120f232f9349e896711/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/3d14470be4194656e2f71120f232f9349e896711/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=3d14470be4194656e2f71120f232f9349e896711", "patch": "@@ -113,6 +113,7 @@ class RustMCJITMemoryManager : public JITMemoryManager {\n \n   virtual uint8_t *allocateDataSection(uintptr_t Size, unsigned Alignment,\n                                        unsigned SectionID, bool isReadOnly);\n+  bool finalizeMemory(std::string *ErrMsg) { return false; }\n \n   virtual bool applyPermissions(std::string *Str);\n \n@@ -340,7 +341,6 @@ LLVMRustBuildJIT(void* mem,\n \n   std::string Err;\n   TargetOptions Options;\n-  Options.JITExceptionHandling = true;\n   Options.JITEmitDebugInfo = true;\n   Options.NoFramePointerElim = true;\n   Options.EnableSegmentedStacks = EnableSegmentedStacks;\n@@ -516,15 +516,6 @@ extern \"C\" LLVMValueRef LLVMBuildAtomicCmpXchg(LLVMBuilderRef B,\n extern \"C\" LLVMValueRef LLVMBuildAtomicFence(LLVMBuilderRef B, AtomicOrdering order) {\n     return wrap(unwrap(B)->CreateFence(order));\n }\n-extern \"C\" LLVMValueRef LLVMBuildAtomicRMW(LLVMBuilderRef B,\n-                                           AtomicRMWInst::BinOp op,\n-                                           LLVMValueRef target,\n-                                           LLVMValueRef source,\n-                                           AtomicOrdering order) {\n-    return wrap(unwrap(B)->CreateAtomicRMW(op,\n-                                           unwrap(target), unwrap(source),\n-                                           order));\n-}\n \n extern \"C\" void LLVMSetDebug(int Enabled) {\n #ifndef NDEBUG"}, {"sha": "670eebbed132743548cd4cfb70d98314a5e8de7d", "filename": "src/rustllvm/llvm-auto-clean-trigger", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d14470be4194656e2f71120f232f9349e896711/src%2Frustllvm%2Fllvm-auto-clean-trigger", "raw_url": "https://github.com/rust-lang/rust/raw/3d14470be4194656e2f71120f232f9349e896711/src%2Frustllvm%2Fllvm-auto-clean-trigger", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Fllvm-auto-clean-trigger?ref=3d14470be4194656e2f71120f232f9349e896711", "patch": "@@ -1,4 +1,4 @@\n # If this file is modified, then llvm will be forcibly cleaned and then rebuilt.\n # The actual contents of this file do not matter, but to trigger a change on the\n # build bots then the contents should be changed so git updates the mtime.\n-2013-07-03\n+2013-07-04"}, {"sha": "eeefb19883eb38666957f25fa5f4247439556e3f", "filename": "src/rustllvm/rustllvm.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d14470be4194656e2f71120f232f9349e896711/src%2Frustllvm%2Frustllvm.h", "raw_url": "https://github.com/rust-lang/rust/raw/3d14470be4194656e2f71120f232f9349e896711/src%2Frustllvm%2Frustllvm.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.h?ref=3d14470be4194656e2f71120f232f9349e896711", "patch": "@@ -8,8 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#include \"llvm/IR/IRBuilder.h\"\n #include \"llvm/IR/InlineAsm.h\"\n #include \"llvm/IR/LLVMContext.h\"\n+#include \"llvm/IR/Module.h\"\n #include \"llvm/Linker.h\"\n #include \"llvm/PassManager.h\"\n #include \"llvm/IR/InlineAsm.h\""}]}