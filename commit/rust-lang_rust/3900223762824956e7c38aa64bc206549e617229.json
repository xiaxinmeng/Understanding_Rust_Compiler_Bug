{"sha": "3900223762824956e7c38aa64bc206549e617229", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5MDAyMjM3NjI4MjQ5NTZlN2MzOGFhNjRiYzIwNjU0OWU2MTcyMjk=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-02-21T08:13:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-02-21T08:13:11Z"}, "message": "Merge pull request #1559 from theotherphil/master\n\nUse span of impl/trait in len_without_is_empty error message, rather \u2026", "tree": {"sha": "3f94861b69a45e023a637a66f19a9213d7eb56c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f94861b69a45e023a637a66f19a9213d7eb56c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3900223762824956e7c38aa64bc206549e617229", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3900223762824956e7c38aa64bc206549e617229", "html_url": "https://github.com/rust-lang/rust/commit/3900223762824956e7c38aa64bc206549e617229", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3900223762824956e7c38aa64bc206549e617229/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c1efc6570e43956ab438f282c0b48a08282aae5", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c1efc6570e43956ab438f282c0b48a08282aae5", "html_url": "https://github.com/rust-lang/rust/commit/7c1efc6570e43956ab438f282c0b48a08282aae5"}, {"sha": "d6a4d2cb18504a4b5d81be7d67dfac668b074cec", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6a4d2cb18504a4b5d81be7d67dfac668b074cec", "html_url": "https://github.com/rust-lang/rust/commit/d6a4d2cb18504a4b5d81be7d67dfac668b074cec"}], "stats": {"total": 109, "additions": 75, "deletions": 34}, "files": [{"sha": "f2609dd574352ea38612178355028f3006e006e7", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3900223762824956e7c38aa64bc206549e617229/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3900223762824956e7c38aa64bc206549e617229/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=3900223762824956e7c38aa64bc206549e617229", "patch": "@@ -107,7 +107,7 @@ fn check_trait_items(cx: &LateContext, item: &Item, trait_items: &[TraitItemRef]\n             if cx.access_levels.is_exported(i.id.node_id) {\n                 span_lint(cx,\n                           LEN_WITHOUT_IS_EMPTY,\n-                          i.span,\n+                          item.span,\n                           &format!(\"trait `{}` has a `len` method but no `is_empty` method\", item.name));\n             }\n         }\n@@ -146,7 +146,7 @@ fn check_impl_items(cx: &LateContext, item: &Item, impl_items: &[ImplItemRef]) {\n \n             span_lint(cx,\n                       LEN_WITHOUT_IS_EMPTY,\n-                      i.span,\n+                      item.span,\n                       &format!(\"item `{}` has a public `len` method but {} `is_empty` method\", ty, is_empty));\n         }\n     }"}, {"sha": "9790f2c9fcb7674fa85ce9b5b11f8dbc0075629b", "filename": "tests/ui/len_zero.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3900223762824956e7c38aa64bc206549e617229/tests%2Fui%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3900223762824956e7c38aa64bc206549e617229/tests%2Fui%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_zero.rs?ref=3900223762824956e7c38aa64bc206549e617229", "patch": "@@ -12,6 +12,30 @@ impl PubOne {\n     }\n }\n \n+impl PubOne { // A second impl for this struct - the error span shouldn't mention this\n+    pub fn irrelevant(self: &Self) -> bool {\n+        false\n+    }\n+}\n+\n+// Identical to PubOne, but with an allow attribute on the impl complaining len\n+pub struct PubAllowed;\n+\n+#[allow(len_without_is_empty)]\n+impl PubAllowed {\n+    pub fn len(self: &Self) -> isize {\n+        1\n+    }\n+}\n+\n+// No allow attribute on this impl block, but that doesn't matter - we only require one on the\n+// impl containing len.\n+impl PubAllowed {\n+    pub fn irrelevant(self: &Self) -> bool {\n+        false\n+    }\n+}\n+\n struct NotPubOne;\n \n impl NotPubOne {"}, {"sha": "9ebc5209a22eb23c5260117bb378f860e9fcab5b", "filename": "tests/ui/len_zero.stderr", "status": "modified", "additions": 49, "deletions": 32, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/3900223762824956e7c38aa64bc206549e617229/tests%2Fui%2Flen_zero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3900223762824956e7c38aa64bc206549e617229/tests%2Fui%2Flen_zero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_zero.stderr?ref=3900223762824956e7c38aa64bc206549e617229", "patch": "@@ -1,11 +1,13 @@\n error: item `PubOne` has a public `len` method but no corresponding `is_empty` method\n-  --> $DIR/len_zero.rs:10:5\n+  --> $DIR/len_zero.rs:9:1\n    |\n-10 |       pub fn len(self: &Self) -> isize {\n-   |  _____^ starting here...\n+9  |   impl PubOne {\n+   |  _^ starting here...\n+10 | |     pub fn len(self: &Self) -> isize {\n 11 | |         1\n 12 | |     }\n-   | |_____^ ...ending here\n+13 | | }\n+   | |_^ ...ending here\n    |\n note: lint level defined here\n   --> $DIR/len_zero.rs:4:9\n@@ -14,33 +16,48 @@ note: lint level defined here\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: trait `PubTraitsToo` has a `len` method but no `is_empty` method\n-  --> $DIR/len_zero.rs:32:5\n+  --> $DIR/len_zero.rs:55:1\n    |\n-32 |     fn len(self: &Self) -> isize;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+55 |   pub trait PubTraitsToo {\n+   |  _^ starting here...\n+56 | |     fn len(self: &Self) -> isize;\n+57 | | }\n+   | |_^ ...ending here\n \n error: item `HasIsEmpty` has a public `len` method but a private `is_empty` method\n-  --> $DIR/len_zero.rs:66:5\n+  --> $DIR/len_zero.rs:89:1\n    |\n-66 |       pub fn len(self: &Self) -> isize {\n-   |  _____^ starting here...\n-67 | |         1\n-68 | |     }\n-   | |_____^ ...ending here\n+89 |   impl HasIsEmpty {\n+   |  _^ starting here...\n+90 | |     pub fn len(self: &Self) -> isize {\n+91 | |         1\n+92 | |     }\n+93 | |\n+94 | |     fn is_empty(self: &Self) -> bool {\n+95 | |         false\n+96 | |     }\n+97 | | }\n+   | |_^ ...ending here\n \n error: item `HasWrongIsEmpty` has a public `len` method but no corresponding `is_empty` method\n-  --> $DIR/len_zero.rs:95:5\n-   |\n-95 |       pub fn len(self: &Self) -> isize {\n-   |  _____^ starting here...\n-96 | |         1\n-97 | |     }\n-   | |_____^ ...ending here\n+   --> $DIR/len_zero.rs:118:1\n+    |\n+118 |   impl HasWrongIsEmpty {\n+    |  _^ starting here...\n+119 | |     pub fn len(self: &Self) -> isize {\n+120 | |         1\n+121 | |     }\n+122 | |\n+123 | |     pub fn is_empty(self: &Self, x : u32) -> bool {\n+124 | |         false\n+125 | |     }\n+126 | | }\n+    | |_^ ...ending here\n \n error: length comparison to zero\n-   --> $DIR/len_zero.rs:106:8\n+   --> $DIR/len_zero.rs:130:8\n     |\n-106 |     if x.len() == 0 {\n+130 |     if x.len() == 0 {\n     |        ^^^^^^^^^^^^\n     |\n note: lint level defined here\n@@ -52,45 +69,45 @@ help: consider using `is_empty`\n     |     if x.is_empty() {\n \n error: length comparison to zero\n-   --> $DIR/len_zero.rs:113:8\n+   --> $DIR/len_zero.rs:137:8\n     |\n-113 |     if \"\".len() == 0 {\n+137 |     if \"\".len() == 0 {\n     |        ^^^^^^^^^^^^^\n     |\n help: consider using `is_empty`\n     |     if \"\".is_empty() {\n \n error: length comparison to zero\n-   --> $DIR/len_zero.rs:130:8\n+   --> $DIR/len_zero.rs:154:8\n     |\n-130 |     if has_is_empty.len() == 0 {\n+154 |     if has_is_empty.len() == 0 {\n     |        ^^^^^^^^^^^^^^^^^^^^^^^\n     |\n help: consider using `is_empty`\n     |     if has_is_empty.is_empty() {\n \n error: length comparison to zero\n-   --> $DIR/len_zero.rs:136:8\n+   --> $DIR/len_zero.rs:160:8\n     |\n-136 |     if has_is_empty.len() != 0 {\n+160 |     if has_is_empty.len() != 0 {\n     |        ^^^^^^^^^^^^^^^^^^^^^^^\n     |\n help: consider using `is_empty`\n     |     if !has_is_empty.is_empty() {\n \n error: length comparison to zero\n-   --> $DIR/len_zero.rs:142:8\n+   --> $DIR/len_zero.rs:166:8\n     |\n-142 |     if has_is_empty.len() > 0 {\n+166 |     if has_is_empty.len() > 0 {\n     |        ^^^^^^^^^^^^^^^^^^^^^^\n     |\n help: consider using `is_empty`\n     |     if !has_is_empty.is_empty() {\n \n error: length comparison to zero\n-   --> $DIR/len_zero.rs:151:8\n+   --> $DIR/len_zero.rs:175:8\n     |\n-151 |     if with_is_empty.len() == 0 {\n+175 |     if with_is_empty.len() == 0 {\n     |        ^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n help: consider using `is_empty`"}]}