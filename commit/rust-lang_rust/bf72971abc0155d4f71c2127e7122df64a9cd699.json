{"sha": "bf72971abc0155d4f71c2127e7122df64a9cd699", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmNzI5NzFhYmMwMTU1ZDRmNzFjMjEyN2U3MTIyZGY2NGE5Y2Q2OTk=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-11-23T17:31:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-23T17:31:58Z"}, "message": "Rollup merge of #56120 - SergioBenitez:subspan, r=alexcrichton\n\nAdd unstable Literal::subspan().\n\nTake 2 of #55971. Still ~wrong, but now with a comment! (and less of a surface) Unblocks #49219.\n\nr? @alexcrichton", "tree": {"sha": "cba3c9cf6e655aaa73c04d7e6d1b73ce4665027c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cba3c9cf6e655aaa73c04d7e6d1b73ce4665027c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf72971abc0155d4f71c2127e7122df64a9cd699", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb+DmOCRBK7hj4Ov3rIwAAdHIIAGB9j9URFFIvGEvukZX+YED8\ncxbz3j0mX4arN+/Vw9R15Dv2TSz24AZZz9j2TsvOaDiTPoy6Ht5CwMfXPdH+ZNz/\nz22t3zhXXQTXwwJyPHcLLBQttSpNRuwo1ddIKBh/ZfgTcsi4OwgPgzJnRGTo5+OE\n6fqOthw8OigvMcgwmMABa1Bo0yORvnvgXh8lm9kwDhLsQeu0mvSdn3Sf4Tsm9ya0\nLSR5DX4YErw2ux6iUlZE4B7T9Ypgz5H4RJnvwasQWRQSiMePVhtqFMiTOCG/J5CU\nQMdA9knq25PbYlaJAWnQkOwqlFsz34dCneGoKR/hldFZja+xTx4QhTFZ5IHGF3w=\n=qhWe\n-----END PGP SIGNATURE-----\n", "payload": "tree cba3c9cf6e655aaa73c04d7e6d1b73ce4665027c\nparent 97e6007932853efed3c710944473b78e67ff527f\nparent 09e7051b7eb1d2aa1e1d34b7b09a594cba901141\nauthor kennytm <kennytm@gmail.com> 1542994318 +0800\ncommitter GitHub <noreply@github.com> 1542994318 +0800\n\nRollup merge of #56120 - SergioBenitez:subspan, r=alexcrichton\n\nAdd unstable Literal::subspan().\n\nTake 2 of #55971. Still ~wrong, but now with a comment! (and less of a surface) Unblocks #49219.\n\nr? @alexcrichton\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf72971abc0155d4f71c2127e7122df64a9cd699", "html_url": "https://github.com/rust-lang/rust/commit/bf72971abc0155d4f71c2127e7122df64a9cd699", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf72971abc0155d4f71c2127e7122df64a9cd699/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97e6007932853efed3c710944473b78e67ff527f", "url": "https://api.github.com/repos/rust-lang/rust/commits/97e6007932853efed3c710944473b78e67ff527f", "html_url": "https://github.com/rust-lang/rust/commit/97e6007932853efed3c710944473b78e67ff527f"}, {"sha": "09e7051b7eb1d2aa1e1d34b7b09a594cba901141", "url": "https://api.github.com/repos/rust-lang/rust/commits/09e7051b7eb1d2aa1e1d34b7b09a594cba901141", "html_url": "https://github.com/rust-lang/rust/commit/09e7051b7eb1d2aa1e1d34b7b09a594cba901141"}], "stats": {"total": 229, "additions": 228, "deletions": 1}, "files": [{"sha": "e9d2d97e3646bada963ff2b1a8c48c839a9735aa", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 46, "deletions": 1, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/bf72971abc0155d4f71c2127e7122df64a9cd699/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf72971abc0155d4f71c2127e7122df64a9cd699/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=bf72971abc0155d4f71c2127e7122df64a9cd699", "patch": "@@ -50,6 +50,7 @@ mod diagnostic;\n #[unstable(feature = \"proc_macro_diagnostic\", issue = \"54140\")]\n pub use diagnostic::{Diagnostic, Level, MultiSpan};\n \n+use std::ops::{Bound, RangeBounds};\n use std::{ascii, fmt, iter};\n use std::path::PathBuf;\n use rustc_data_structures::sync::Lrc;\n@@ -59,7 +60,7 @@ use syntax::errors::DiagnosticBuilder;\n use syntax::parse::{self, token};\n use syntax::symbol::Symbol;\n use syntax::tokenstream::{self, DelimSpan};\n-use syntax_pos::{Pos, FileName};\n+use syntax_pos::{Pos, FileName, BytePos};\n \n /// The main type provided by this crate, representing an abstract stream of\n /// tokens, or, more specifically, a sequence of token trees.\n@@ -1168,6 +1169,50 @@ impl Literal {\n     pub fn set_span(&mut self, span: Span) {\n         self.span = span;\n     }\n+\n+    /// Returns a `Span` that is a subset of `self.span()` containing only the\n+    /// source bytes in range `range`. Returns `None` if the would-be trimmed\n+    /// span is outside the bounds of `self`.\n+    // FIXME(SergioBenitez): check that the byte range starts and ends at a\n+    // UTF-8 boundary of the source. otherwise, it's likely that a panic will\n+    // occur elsewhere when the source text is printed.\n+    // FIXME(SergioBenitez): there is no way for the user to know what\n+    // `self.span()` actually maps to, so this method can currently only be\n+    // called blindly. For example, `to_string()` for the character 'c' returns\n+    // \"'\\u{63}'\"; there is no way for the user to know whether the source text\n+    // was 'c' or whether it was '\\u{63}'.\n+    #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n+    pub fn subspan<R: RangeBounds<usize>>(&self, range: R) -> Option<Span> {\n+        let inner = self.span().0;\n+        let length = inner.hi().to_usize() - inner.lo().to_usize();\n+\n+        let start = match range.start_bound() {\n+            Bound::Included(&lo) => lo,\n+            Bound::Excluded(&lo) => lo + 1,\n+            Bound::Unbounded => 0,\n+        };\n+\n+        let end = match range.end_bound() {\n+            Bound::Included(&hi) => hi + 1,\n+            Bound::Excluded(&hi) => hi,\n+            Bound::Unbounded => length,\n+        };\n+\n+        // Bounds check the values, preventing addition overflow and OOB spans.\n+        if start > u32::max_value() as usize\n+            || end > u32::max_value() as usize\n+            || (u32::max_value() - start as u32) < inner.lo().to_u32()\n+            || (u32::max_value() - end as u32) < inner.lo().to_u32()\n+            || start >= end\n+            || end > length\n+        {\n+            return None;\n+        }\n+\n+        let new_lo = inner.lo() + BytePos::from_usize(start);\n+        let new_hi = inner.lo() + BytePos::from_usize(end);\n+        Some(Span(inner.with_lo(new_lo).with_hi(new_hi)))\n+    }\n }\n \n /// Prints the literal as a string that should be losslessly convertible"}, {"sha": "134b04d7333bcba3cb56718a2b43a0f8021f1067", "filename": "src/test/ui-fulldeps/auxiliary/subspan.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/bf72971abc0155d4f71c2127e7122df64a9cd699/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fsubspan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf72971abc0155d4f71c2127e7122df64a9cd699/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fsubspan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fsubspan.rs?ref=bf72971abc0155d4f71c2127e7122df64a9cd699", "patch": "@@ -0,0 +1,47 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+#![feature(proc_macro_diagnostic, proc_macro_span)]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::{TokenStream, TokenTree, Span, Diagnostic};\n+\n+fn parse(input: TokenStream) -> Result<(), Diagnostic> {\n+    if let Some(TokenTree::Literal(lit)) = input.into_iter().next() {\n+        let mut spans = vec![];\n+        let string = lit.to_string();\n+        for hi in string.matches(\"hi\") {\n+            let index = hi.as_ptr() as usize - string.as_ptr() as usize;\n+            let subspan = lit.subspan(index..(index + hi.len())).unwrap();\n+            spans.push(subspan);\n+        }\n+\n+        if !spans.is_empty() {\n+            Err(Span::call_site().error(\"found 'hi's\").span_note(spans, \"here\"))\n+        } else {\n+            Ok(())\n+        }\n+    } else {\n+        Err(Span::call_site().error(\"invalid input: expected string literal\"))\n+    }\n+}\n+\n+#[proc_macro]\n+pub fn subspan(input: TokenStream) -> TokenStream {\n+    if let Err(diag) = parse(input) {\n+        diag.emit();\n+    }\n+\n+    TokenStream::new()\n+}"}, {"sha": "437123ca4795e4d7e0caf67eef1272c8e1eda15d", "filename": "src/test/ui-fulldeps/subspan.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/bf72971abc0155d4f71c2127e7122df64a9cd699/src%2Ftest%2Fui-fulldeps%2Fsubspan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf72971abc0155d4f71c2127e7122df64a9cd699/src%2Ftest%2Fui-fulldeps%2Fsubspan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsubspan.rs?ref=bf72971abc0155d4f71c2127e7122df64a9cd699", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:subspan.rs\n+// ignore-stage1\n+\n+extern crate subspan;\n+\n+use subspan::subspan;\n+\n+// This one emits no error.\n+subspan!(\"\");\n+\n+// Exactly one 'hi'.\n+subspan!(\"hi\"); //~ ERROR found 'hi's\n+\n+// Now two, back to back.\n+subspan!(\"hihi\"); //~ ERROR found 'hi's\n+\n+// Now three, back to back.\n+subspan!(\"hihihi\"); //~ ERROR found 'hi's\n+\n+// Now several, with spacing.\n+subspan!(\"why I hide? hi!\"); //~ ERROR found 'hi's\n+subspan!(\"hey, hi, hidy, hidy, hi hi\"); //~ ERROR found 'hi's\n+subspan!(\"this is a hi, and this is another hi\"); //~ ERROR found 'hi's\n+subspan!(\"how are you this evening\"); //~ ERROR found 'hi's\n+subspan!(\"this is highly eradic\"); //~ ERROR found 'hi's\n+\n+fn main() { }"}, {"sha": "4d3928cae723a775e0dd477c9ecb7abf3efbd8b5", "filename": "src/test/ui-fulldeps/subspan.stderr", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/bf72971abc0155d4f71c2127e7122df64a9cd699/src%2Ftest%2Fui-fulldeps%2Fsubspan.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bf72971abc0155d4f71c2127e7122df64a9cd699/src%2Ftest%2Fui-fulldeps%2Fsubspan.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsubspan.stderr?ref=bf72971abc0155d4f71c2127e7122df64a9cd699", "patch": "@@ -0,0 +1,98 @@\n+error: found 'hi's\n+  --> $DIR/subspan.rs:22:1\n+   |\n+LL | subspan!(\"hi\"); //~ ERROR found 'hi's\n+   | ^^^^^^^^^^^^^^^\n+   |\n+note: here\n+  --> $DIR/subspan.rs:22:11\n+   |\n+LL | subspan!(\"hi\"); //~ ERROR found 'hi's\n+   |           ^^\n+\n+error: found 'hi's\n+  --> $DIR/subspan.rs:25:1\n+   |\n+LL | subspan!(\"hihi\"); //~ ERROR found 'hi's\n+   | ^^^^^^^^^^^^^^^^^\n+   |\n+note: here\n+  --> $DIR/subspan.rs:25:11\n+   |\n+LL | subspan!(\"hihi\"); //~ ERROR found 'hi's\n+   |           ^^^^\n+\n+error: found 'hi's\n+  --> $DIR/subspan.rs:28:1\n+   |\n+LL | subspan!(\"hihihi\"); //~ ERROR found 'hi's\n+   | ^^^^^^^^^^^^^^^^^^^\n+   |\n+note: here\n+  --> $DIR/subspan.rs:28:11\n+   |\n+LL | subspan!(\"hihihi\"); //~ ERROR found 'hi's\n+   |           ^^^^^^\n+\n+error: found 'hi's\n+  --> $DIR/subspan.rs:31:1\n+   |\n+LL | subspan!(\"why I hide? hi!\"); //~ ERROR found 'hi's\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: here\n+  --> $DIR/subspan.rs:31:17\n+   |\n+LL | subspan!(\"why I hide? hi!\"); //~ ERROR found 'hi's\n+   |                 ^^    ^^\n+\n+error: found 'hi's\n+  --> $DIR/subspan.rs:32:1\n+   |\n+LL | subspan!(\"hey, hi, hidy, hidy, hi hi\"); //~ ERROR found 'hi's\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: here\n+  --> $DIR/subspan.rs:32:16\n+   |\n+LL | subspan!(\"hey, hi, hidy, hidy, hi hi\"); //~ ERROR found 'hi's\n+   |                ^^  ^^    ^^    ^^ ^^\n+\n+error: found 'hi's\n+  --> $DIR/subspan.rs:33:1\n+   |\n+LL | subspan!(\"this is a hi, and this is another hi\"); //~ ERROR found 'hi's\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: here\n+  --> $DIR/subspan.rs:33:12\n+   |\n+LL | subspan!(\"this is a hi, and this is another hi\"); //~ ERROR found 'hi's\n+   |            ^^       ^^       ^^             ^^\n+\n+error: found 'hi's\n+  --> $DIR/subspan.rs:34:1\n+   |\n+LL | subspan!(\"how are you this evening\"); //~ ERROR found 'hi's\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: here\n+  --> $DIR/subspan.rs:34:24\n+   |\n+LL | subspan!(\"how are you this evening\"); //~ ERROR found 'hi's\n+   |                        ^^\n+\n+error: found 'hi's\n+  --> $DIR/subspan.rs:35:1\n+   |\n+LL | subspan!(\"this is highly eradic\"); //~ ERROR found 'hi's\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: here\n+  --> $DIR/subspan.rs:35:12\n+   |\n+LL | subspan!(\"this is highly eradic\"); //~ ERROR found 'hi's\n+   |            ^^     ^^\n+\n+error: aborting due to 8 previous errors\n+"}]}