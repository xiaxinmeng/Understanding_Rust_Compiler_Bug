{"sha": "b76978530ca40eaa72f16486edbc12145fd1ddd0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3Njk3ODUzMGNhNDBlYWE3MmYxNjQ4NmVkYmMxMjE0NWZkMWRkZDA=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-05T10:28:22Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-16T10:57:42Z"}, "message": "move `RegionResolutionError` into `lexical_region_resolve`", "tree": {"sha": "b978943189666bd9f9007768f73588e9f4b75333", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b978943189666bd9f9007768f73588e9f4b75333"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b76978530ca40eaa72f16486edbc12145fd1ddd0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b76978530ca40eaa72f16486edbc12145fd1ddd0", "html_url": "https://github.com/rust-lang/rust/commit/b76978530ca40eaa72f16486edbc12145fd1ddd0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b76978530ca40eaa72f16486edbc12145fd1ddd0/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e9e15446f110b01fc06ef0dc40b57f991acc0f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e9e15446f110b01fc06ef0dc40b57f991acc0f3", "html_url": "https://github.com/rust-lang/rust/commit/8e9e15446f110b01fc06ef0dc40b57f991acc0f3"}], "stats": {"total": 76, "additions": 42, "deletions": 34}, "files": [{"sha": "c64bd610962eb440a4b4180cd2931c0fb227bcc4", "filename": "src/librustc/infer/error_reporting/different_lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b76978530ca40eaa72f16486edbc12145fd1ddd0/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fdifferent_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76978530ca40eaa72f16486edbc12145fd1ddd0/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fdifferent_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fdifferent_lifetimes.rs?ref=b76978530ca40eaa72f16486edbc12145fd1ddd0", "patch": "@@ -13,8 +13,8 @@\n use hir;\n use infer::InferCtxt;\n use ty::{self, Region};\n-use infer::region_inference::RegionResolutionError::*;\n-use infer::region_inference::RegionResolutionError;\n+use infer::lexical_region_resolve::RegionResolutionError::*;\n+use infer::lexical_region_resolve::RegionResolutionError;\n use hir::map as hir_map;\n use middle::resolve_lifetime as rl;\n use hir::intravisit::{self, Visitor, NestedVisitorMap};"}, {"sha": "9ce0e503280eac888b7d2108835dc2080e983373", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b76978530ca40eaa72f16486edbc12145fd1ddd0/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76978530ca40eaa72f16486edbc12145fd1ddd0/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=b76978530ca40eaa72f16486edbc12145fd1ddd0", "patch": "@@ -57,7 +57,8 @@\n \n use infer;\n use super::{InferCtxt, TypeTrace, SubregionOrigin, RegionVariableOrigin, ValuePairs};\n-use super::region_inference::{RegionResolutionError, GenericKind};\n+use super::region_inference::GenericKind;\n+use super::lexical_region_resolve::RegionResolutionError;\n \n use std::fmt;\n use hir;"}, {"sha": "6af7415ba5371147a88fd79b01ad918aaa2766d9", "filename": "src/librustc/infer/error_reporting/named_anon_conflict.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b76978530ca40eaa72f16486edbc12145fd1ddd0/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnamed_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76978530ca40eaa72f16486edbc12145fd1ddd0/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnamed_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnamed_anon_conflict.rs?ref=b76978530ca40eaa72f16486edbc12145fd1ddd0", "patch": "@@ -11,8 +11,8 @@\n //! Error Reporting for Anonymous Region Lifetime Errors\n //! where one region is named and the other is anonymous.\n use infer::InferCtxt;\n-use infer::region_inference::RegionResolutionError::*;\n-use infer::region_inference::RegionResolutionError;\n+use infer::lexical_region_resolve::RegionResolutionError::*;\n+use infer::lexical_region_resolve::RegionResolutionError;\n use ty;\n \n impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {"}, {"sha": "217387befd89fa41f1241e0e394d00b6f604ea55", "filename": "src/librustc/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 36, "deletions": 4, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/b76978530ca40eaa72f16486edbc12145fd1ddd0/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76978530ca40eaa72f16486edbc12145fd1ddd0/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=b76978530ca40eaa72f16486edbc12145fd1ddd0", "patch": "@@ -11,9 +11,10 @@\n //! The code to do lexical region resolution.\n \n use infer::SubregionOrigin;\n+use infer::RegionVariableOrigin;\n use infer::region_inference::Constraint;\n+use infer::region_inference::GenericKind;\n use infer::region_inference::RegionVarBindings;\n-use infer::region_inference::RegionResolutionError;\n use infer::region_inference::VarValue;\n use infer::region_inference::VerifyBound;\n use middle::free_region::RegionRelations;\n@@ -23,11 +24,38 @@ use std::fmt;\n use std::u32;\n use ty::{self, TyCtxt};\n use ty::{Region, RegionVid};\n-use ty::{ReEmpty, ReStatic, ReFree, ReEarlyBound, ReErased};\n-use ty::{ReLateBound, ReScope, ReVar, ReSkolemized};\n+use ty::{ReEarlyBound, ReEmpty, ReErased, ReFree, ReStatic};\n+use ty::{ReLateBound, ReScope, ReSkolemized, ReVar};\n \n mod graphviz;\n \n+#[derive(Clone, Debug)]\n+pub enum RegionResolutionError<'tcx> {\n+    /// `ConcreteFailure(o, a, b)`:\n+    ///\n+    /// `o` requires that `a <= b`, but this does not hold\n+    ConcreteFailure(SubregionOrigin<'tcx>, Region<'tcx>, Region<'tcx>),\n+\n+    /// `GenericBoundFailure(p, s, a)\n+    ///\n+    /// The parameter/associated-type `p` must be known to outlive the lifetime\n+    /// `a` (but none of the known bounds are sufficient).\n+    GenericBoundFailure(SubregionOrigin<'tcx>, GenericKind<'tcx>, Region<'tcx>),\n+\n+    /// `SubSupConflict(v, sub_origin, sub_r, sup_origin, sup_r)`:\n+    ///\n+    /// Could not infer a value for `v` because `sub_r <= v` (due to\n+    /// `sub_origin`) but `v <= sup_r` (due to `sup_origin`) and\n+    /// `sub_r <= sup_r` does not hold.\n+    SubSupConflict(\n+        RegionVariableOrigin,\n+        SubregionOrigin<'tcx>,\n+        Region<'tcx>,\n+        SubregionOrigin<'tcx>,\n+        Region<'tcx>,\n+    ),\n+}\n+\n struct RegionAndOrigin<'tcx> {\n     region: Region<'tcx>,\n     origin: SubregionOrigin<'tcx>,\n@@ -327,7 +355,11 @@ impl<'a, 'gcx, 'tcx> RegionVarBindings<'a, 'gcx, 'tcx> {\n                         sup\n                     );\n \n-                    errors.push(RegionResolutionError::ConcreteFailure((*origin).clone(), sub, sup));\n+                    errors.push(RegionResolutionError::ConcreteFailure(\n+                        (*origin).clone(),\n+                        sub,\n+                        sup,\n+                    ));\n                 }\n \n                 Constraint::VarSubReg(a_vid, b_region) => {"}, {"sha": "d5997aa0662f52adaa96c3828ca5afff3a0bfc20", "filename": "src/librustc/infer/region_inference/mod.rs", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b76978530ca40eaa72f16486edbc12145fd1ddd0/src%2Flibrustc%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76978530ca40eaa72f16486edbc12145fd1ddd0/src%2Flibrustc%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_inference%2Fmod.rs?ref=b76978530ca40eaa72f16486edbc12145fd1ddd0", "patch": "@@ -142,31 +142,6 @@ enum CombineMapType {\n     Glb,\n }\n \n-#[derive(Clone, Debug)]\n-pub enum RegionResolutionError<'tcx> {\n-    /// `ConcreteFailure(o, a, b)`:\n-    ///\n-    /// `o` requires that `a <= b`, but this does not hold\n-    ConcreteFailure(SubregionOrigin<'tcx>, Region<'tcx>, Region<'tcx>),\n-\n-    /// `GenericBoundFailure(p, s, a)\n-    ///\n-    /// The parameter/associated-type `p` must be known to outlive the lifetime\n-    /// `a` (but none of the known bounds are sufficient).\n-    GenericBoundFailure(SubregionOrigin<'tcx>, GenericKind<'tcx>, Region<'tcx>),\n-\n-    /// `SubSupConflict(v, sub_origin, sub_r, sup_origin, sup_r)`:\n-    ///\n-    /// Could not infer a value for `v` because `sub_r <= v` (due to\n-    /// `sub_origin`) but `v <= sup_r` (due to `sup_origin`) and\n-    /// `sub_r <= sup_r` does not hold.\n-    SubSupConflict(RegionVariableOrigin,\n-                   SubregionOrigin<'tcx>,\n-                   Region<'tcx>,\n-                   SubregionOrigin<'tcx>,\n-                   Region<'tcx>),\n-}\n-\n #[derive(Copy, Clone, Debug)]\n pub enum VarValue<'tcx> {\n     Value(Region<'tcx>),"}]}