{"sha": "b524ade782d20b63b84febbcfe58e2b54bfe7ab8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1MjRhZGU3ODJkMjBiNjNiODRmZWJiY2ZlNThlMmI1NGJmZTdhYjg=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-02-19T21:20:45Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-03-13T23:46:35Z"}, "message": "Refactor generic parameter encoder functions", "tree": {"sha": "09d3b295f2c8c1a3f181a36e90d285928d2fd68c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09d3b295f2c8c1a3f181a36e90d285928d2fd68c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b524ade782d20b63b84febbcfe58e2b54bfe7ab8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b524ade782d20b63b84febbcfe58e2b54bfe7ab8", "html_url": "https://github.com/rust-lang/rust/commit/b524ade782d20b63b84febbcfe58e2b54bfe7ab8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b524ade782d20b63b84febbcfe58e2b54bfe7ab8/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "719b0d9849dab698c1ff0630313d068c7d561eae", "url": "https://api.github.com/repos/rust-lang/rust/commits/719b0d9849dab698c1ff0630313d068c7d561eae", "html_url": "https://github.com/rust-lang/rust/commit/719b0d9849dab698c1ff0630313d068c7d561eae"}], "stats": {"total": 60, "additions": 18, "deletions": 42}, "files": [{"sha": "ed1113677d0445e2b53c454c9648b0f36797f730", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 18, "deletions": 42, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/b524ade782d20b63b84febbcfe58e2b54bfe7ab8/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b524ade782d20b63b84febbcfe58e2b54bfe7ab8/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=b524ade782d20b63b84febbcfe58e2b54bfe7ab8", "patch": "@@ -7,6 +7,7 @@ use rustc::middle::cstore::{LinkagePreference, NativeLibrary,\n                             EncodedMetadata, ForeignModule};\n use rustc::hir::def::CtorKind;\n use rustc::hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefIndex, DefId, LocalDefId, LOCAL_CRATE};\n+use rustc::hir::GenericParamKind;\n use rustc::hir::map::definitions::DefPathTable;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc::middle::dependency_format::Linkage;\n@@ -1307,10 +1308,11 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n         }\n     }\n \n-    fn encode_info_for_ty_param(&mut self,\n-                                (def_id, Untracked(has_default)): (DefId, Untracked<bool>))\n-                                -> Entry<'tcx> {\n-        debug!(\"IsolatedEncoder::encode_info_for_ty_param({:?})\", def_id);\n+    fn encode_info_for_generic_param(\n+        &mut self,\n+        (def_id, Untracked(encode_type)): (DefId, Untracked<bool>),\n+    ) -> Entry<'tcx> {\n+        debug!(\"IsolatedEncoder::encode_info_for_generic_param({:?})\", def_id);\n         let tcx = self.tcx;\n         Entry {\n             kind: EntryKind::Type,\n@@ -1321,7 +1323,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n             stability: None,\n             deprecation: None,\n \n-            ty: if has_default {\n+            ty: if encode_type {\n                 Some(self.encode_item_type(def_id))\n             } else {\n                 None\n@@ -1336,29 +1338,6 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n         }\n     }\n \n-    fn encode_info_for_const_param(&mut self, def_id: DefId) -> Entry<'tcx> {\n-        debug!(\"IsolatedEncoder::encode_info_for_const_param({:?})\", def_id);\n-        let tcx = self.tcx;\n-        Entry {\n-            kind: EntryKind::Type,\n-            visibility: self.lazy(&ty::Visibility::Public),\n-            span: self.lazy(&tcx.def_span(def_id)),\n-            attributes: LazySeq::empty(),\n-            children: LazySeq::empty(),\n-            stability: None,\n-            deprecation: None,\n-\n-            ty: Some(self.encode_item_type(def_id)),\n-            inherent_impls: LazySeq::empty(),\n-            variances: LazySeq::empty(),\n-            generics: None,\n-            predicates: None,\n-            predicates_defined_on: None,\n-\n-            mir: None,\n-        }\n-    }\n-\n     fn encode_info_for_closure(&mut self, def_id: DefId) -> Entry<'tcx> {\n         debug!(\"IsolatedEncoder::encode_info_for_closure({:?})\", def_id);\n         let tcx = self.tcx;\n@@ -1703,20 +1682,17 @@ impl<'a, 'b, 'tcx> IndexBuilder<'a, 'b, 'tcx> {\n \n     fn encode_info_for_generics(&mut self, generics: &hir::Generics) {\n         for param in &generics.params {\n-            match param.kind {\n-                hir::GenericParamKind::Lifetime { .. } => {}\n-                hir::GenericParamKind::Type { ref default, .. } => {\n-                    let def_id = self.tcx.hir().local_def_id_from_hir_id(param.hir_id);\n-                    let has_default = Untracked(default.is_some());\n-                    let encode_info = IsolatedEncoder::encode_info_for_ty_param;\n-                    self.record(def_id, encode_info, (def_id, has_default));\n-                }\n-                hir::GenericParamKind::Const { .. } => {\n-                    let def_id = self.tcx.hir().local_def_id_from_hir_id(param.hir_id);\n-                    let encode_info = IsolatedEncoder::encode_info_for_const_param;\n-                    self.record(def_id, encode_info, def_id);\n-                }\n-            }\n+            let encode_type = match param.kind {\n+                GenericParamKind::Lifetime { .. } => continue,\n+                GenericParamKind::Type { ref default, .. } => default.is_some(),\n+                GenericParamKind::Const { .. } => true,\n+            };\n+            let def_id = self.tcx.hir().local_def_id_from_hir_id(param.hir_id);\n+            self.record(\n+                def_id,\n+                IsolatedEncoder::encode_info_for_generic_param,\n+                (def_id, Untracked(encode_type)),\n+            );\n         }\n     }\n "}]}