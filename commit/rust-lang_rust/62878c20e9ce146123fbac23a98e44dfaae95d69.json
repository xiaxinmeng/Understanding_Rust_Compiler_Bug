{"sha": "62878c20e9ce146123fbac23a98e44dfaae95d69", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyODc4YzIwZTljZTE0NjEyM2ZiYWMyM2E5OGU0NGRmYWFlOTVkNjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-22T12:59:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-22T12:59:57Z"}, "message": "Auto merge of #73617 - Dylan-DPC:rollup-zugh80o, r=Dylan-DPC\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #71660 (impl PartialEq<Vec<B>> for &[A], &mut [A])\n - #72623 (Prefer accessible paths in 'use' suggestions)\n - #73502 (Add E0765)\n - #73580 (deprecate wrapping_offset_from)\n - #73582 (Miri: replace many bug! by span_bug!)\n - #73585 (Do not send a notification for P-high stable regressions)\n\nFailed merges:\n\n - #73581 (Create 0766 error code)\n\nr? @ghost", "tree": {"sha": "7c00b342398c48898a8cba76e31ecfdde193f127", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c00b342398c48898a8cba76e31ecfdde193f127"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62878c20e9ce146123fbac23a98e44dfaae95d69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62878c20e9ce146123fbac23a98e44dfaae95d69", "html_url": "https://github.com/rust-lang/rust/commit/62878c20e9ce146123fbac23a98e44dfaae95d69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62878c20e9ce146123fbac23a98e44dfaae95d69/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a4e2b6f9c75a0e21722c88a0e3b610d6ffc3ae3", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a4e2b6f9c75a0e21722c88a0e3b610d6ffc3ae3", "html_url": "https://github.com/rust-lang/rust/commit/1a4e2b6f9c75a0e21722c88a0e3b610d6ffc3ae3"}, {"sha": "c5e6f48544a1a9dfdfc6a953d5c9d56c399bcb7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5e6f48544a1a9dfdfc6a953d5c9d56c399bcb7d", "html_url": "https://github.com/rust-lang/rust/commit/c5e6f48544a1a9dfdfc6a953d5c9d56c399bcb7d"}], "stats": {"total": 406, "additions": 277, "deletions": 129}, "files": [{"sha": "ffff543b07fe52cb79ecfa0209b5bddc741beaad", "filename": "src/liballoc/tests/vec.rs", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/62878c20e9ce146123fbac23a98e44dfaae95d69/src%2Fliballoc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62878c20e9ce146123fbac23a98e44dfaae95d69/src%2Fliballoc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fvec.rs?ref=62878c20e9ce146123fbac23a98e44dfaae95d69", "patch": "@@ -1,5 +1,6 @@\n use std::borrow::Cow;\n use std::collections::TryReserveError::*;\n+use std::fmt::Debug;\n use std::mem::size_of;\n use std::panic::{catch_unwind, AssertUnwindSafe};\n use std::vec::{Drain, IntoIter};\n@@ -1573,3 +1574,56 @@ fn test_push_growth_strategy() {\n         }\n     }\n }\n+\n+macro_rules! generate_assert_eq_vec_and_prim {\n+    ($name:ident<$B:ident>($type:ty)) => {\n+        fn $name<A: PartialEq<$B> + Debug, $B: Debug>(a: Vec<A>, b: $type) {\n+            assert!(a == b);\n+            assert_eq!(a, b);\n+        }\n+    };\n+}\n+\n+generate_assert_eq_vec_and_prim! { assert_eq_vec_and_slice  <B>(&[B])   }\n+generate_assert_eq_vec_and_prim! { assert_eq_vec_and_array_3<B>([B; 3]) }\n+\n+#[test]\n+fn partialeq_vec_and_prim() {\n+    assert_eq_vec_and_slice(vec![1, 2, 3], &[1, 2, 3]);\n+    assert_eq_vec_and_array_3(vec![1, 2, 3], [1, 2, 3]);\n+}\n+\n+macro_rules! assert_partial_eq_valid {\n+    ($a2:ident, $a3:ident; $b2:ident, $b3: ident) => {\n+        assert!($a2 == $b2);\n+        assert!($a2 != $b3);\n+        assert!($a3 != $b2);\n+        assert!($a3 == $b3);\n+        assert_eq!($a2, $b2);\n+        assert_ne!($a2, $b3);\n+        assert_ne!($a3, $b2);\n+        assert_eq!($a3, $b3);\n+    };\n+}\n+\n+#[test]\n+fn partialeq_vec_full() {\n+    let vec2: Vec<_> = vec![1, 2];\n+    let vec3: Vec<_> = vec![1, 2, 3];\n+    let slice2: &[_] = &[1, 2];\n+    let slice3: &[_] = &[1, 2, 3];\n+    let slicemut2: &[_] = &mut [1, 2];\n+    let slicemut3: &[_] = &mut [1, 2, 3];\n+    let array2: [_; 2] = [1, 2];\n+    let array3: [_; 3] = [1, 2, 3];\n+    let arrayref2: &[_; 2] = &[1, 2];\n+    let arrayref3: &[_; 3] = &[1, 2, 3];\n+\n+    assert_partial_eq_valid!(vec2,vec3; vec2,vec3);\n+    assert_partial_eq_valid!(vec2,vec3; slice2,slice3);\n+    assert_partial_eq_valid!(vec2,vec3; slicemut2,slicemut3);\n+    assert_partial_eq_valid!(slice2,slice3; vec2,vec3);\n+    assert_partial_eq_valid!(slicemut2,slicemut3; vec2,vec3);\n+    assert_partial_eq_valid!(vec2,vec3; array2,array3);\n+    assert_partial_eq_valid!(vec2,vec3; arrayref2,arrayref3);\n+}"}, {"sha": "fc8a992e1701bf9d6d03ef623aea96e705509b97", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/62878c20e9ce146123fbac23a98e44dfaae95d69/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62878c20e9ce146123fbac23a98e44dfaae95d69/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=62878c20e9ce146123fbac23a98e44dfaae95d69", "patch": "@@ -2342,12 +2342,12 @@ impl<'a, T: 'a + Copy> Extend<&'a T> for Vec<T> {\n }\n \n macro_rules! __impl_slice_eq1 {\n-    ([$($vars:tt)*] $lhs:ty, $rhs:ty, $($constraints:tt)*) => {\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    ([$($vars:tt)*] $lhs:ty, $rhs:ty $(where $ty:ty: $bound:ident)?, #[$stability:meta]) => {\n+        #[$stability]\n         impl<A, B, $($vars)*> PartialEq<$rhs> for $lhs\n         where\n             A: PartialEq<B>,\n-            $($constraints)*\n+            $($ty: $bound)?\n         {\n             #[inline]\n             fn eq(&self, other: &$rhs) -> bool { self[..] == other[..] }\n@@ -2357,18 +2357,23 @@ macro_rules! __impl_slice_eq1 {\n     }\n }\n \n-__impl_slice_eq1! { [] Vec<A>, Vec<B>, }\n-__impl_slice_eq1! { [] Vec<A>, &[B], }\n-__impl_slice_eq1! { [] Vec<A>, &mut [B], }\n-__impl_slice_eq1! { [] Cow<'_, [A]>, Vec<B>, A: Clone }\n-__impl_slice_eq1! { [] Cow<'_, [A]>, &[B], A: Clone }\n-__impl_slice_eq1! { [] Cow<'_, [A]>, &mut [B], A: Clone }\n-__impl_slice_eq1! { [const N: usize] Vec<A>, [B; N], [B; N]: LengthAtMost32 }\n-__impl_slice_eq1! { [const N: usize] Vec<A>, &[B; N], [B; N]: LengthAtMost32 }\n+__impl_slice_eq1! { [] Vec<A>, Vec<B>, #[stable(feature = \"rust1\", since = \"1.0.0\")] }\n+__impl_slice_eq1! { [] Vec<A>, &[B], #[stable(feature = \"rust1\", since = \"1.0.0\")] }\n+__impl_slice_eq1! { [] Vec<A>, &mut [B], #[stable(feature = \"rust1\", since = \"1.0.0\")] }\n+__impl_slice_eq1! { [] &[A], Vec<B>, #[stable(feature = \"partialeq_vec_for_ref_slice\", since = \"1.46.0\")] }\n+__impl_slice_eq1! { [] &mut [A], Vec<B>, #[stable(feature = \"partialeq_vec_for_ref_slice\", since = \"1.46.0\")] }\n+__impl_slice_eq1! { [] Cow<'_, [A]>, Vec<B> where A: Clone, #[stable(feature = \"rust1\", since = \"1.0.0\")] }\n+__impl_slice_eq1! { [] Cow<'_, [A]>, &[B] where A: Clone, #[stable(feature = \"rust1\", since = \"1.0.0\")] }\n+__impl_slice_eq1! { [] Cow<'_, [A]>, &mut [B] where A: Clone, #[stable(feature = \"rust1\", since = \"1.0.0\")] }\n+__impl_slice_eq1! { [const N: usize] Vec<A>, [B; N] where [B; N]: LengthAtMost32, #[stable(feature = \"rust1\", since = \"1.0.0\")] }\n+__impl_slice_eq1! { [const N: usize] Vec<A>, &[B; N] where [B; N]: LengthAtMost32, #[stable(feature = \"rust1\", since = \"1.0.0\")] }\n \n // NOTE: some less important impls are omitted to reduce code bloat\n // FIXME(Centril): Reconsider this?\n //__impl_slice_eq1! { [const N: usize] Vec<A>, &mut [B; N], [B; N]: LengthAtMost32 }\n+//__impl_slice_eq1! { [const N: usize] [A; N], Vec<B>, [A; N]: LengthAtMost32 }\n+//__impl_slice_eq1! { [const N: usize] &[A; N], Vec<B>, [A; N]: LengthAtMost32 }\n+//__impl_slice_eq1! { [const N: usize] &mut [A; N], Vec<B>, [A; N]: LengthAtMost32 }\n //__impl_slice_eq1! { [const N: usize] Cow<'a, [A]>, [B; N], [B; N]: LengthAtMost32 }\n //__impl_slice_eq1! { [const N: usize] Cow<'a, [A]>, &[B; N], [B; N]: LengthAtMost32 }\n //__impl_slice_eq1! { [const N: usize] Cow<'a, [A]>, &mut [B; N], [B; N]: LengthAtMost32 }"}, {"sha": "acc09ddc014e6ceaeb1b58eddef1ba299bc6ddcf", "filename": "src/libcore/ptr/const_ptr.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/62878c20e9ce146123fbac23a98e44dfaae95d69/src%2Flibcore%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62878c20e9ce146123fbac23a98e44dfaae95d69/src%2Flibcore%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fconst_ptr.rs?ref=62878c20e9ce146123fbac23a98e44dfaae95d69", "patch": "@@ -330,6 +330,12 @@ impl<T: ?Sized> *const T {\n     /// assert_eq!(ptr2.wrapping_offset_from(ptr1), 2);\n     /// ```\n     #[unstable(feature = \"ptr_wrapping_offset_from\", issue = \"41079\")]\n+    #[rustc_deprecated(\n+        since = \"1.46.0\",\n+        reason = \"Pointer distances across allocation \\\n+        boundaries are not typically meaningful. \\\n+        Use integer subtraction if you really need this.\"\n+    )]\n     #[inline]\n     pub fn wrapping_offset_from(self, origin: *const T) -> isize\n     where"}, {"sha": "2bbeb95965e7ef704413017fe99c23f6735a4748", "filename": "src/libcore/ptr/mut_ptr.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/62878c20e9ce146123fbac23a98e44dfaae95d69/src%2Flibcore%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62878c20e9ce146123fbac23a98e44dfaae95d69/src%2Flibcore%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fmut_ptr.rs?ref=62878c20e9ce146123fbac23a98e44dfaae95d69", "patch": "@@ -380,11 +380,18 @@ impl<T: ?Sized> *mut T {\n     /// assert_eq!(ptr2.wrapping_offset_from(ptr1), 2);\n     /// ```\n     #[unstable(feature = \"ptr_wrapping_offset_from\", issue = \"41079\")]\n+    #[rustc_deprecated(\n+        since = \"1.46.0\",\n+        reason = \"Pointer distances across allocation \\\n+        boundaries are not typically meaningful. \\\n+        Use integer subtraction if you really need this.\"\n+    )]\n     #[inline]\n     pub fn wrapping_offset_from(self, origin: *const T) -> isize\n     where\n         T: Sized,\n     {\n+        #[allow(deprecated_in_future, deprecated)]\n         (self as *const T).wrapping_offset_from(origin)\n     }\n "}, {"sha": "6a5e23adafa53fa374ba061d1946016335bef413", "filename": "src/librustc_error_codes/error_codes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/62878c20e9ce146123fbac23a98e44dfaae95d69/src%2Flibrustc_error_codes%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62878c20e9ce146123fbac23a98e44dfaae95d69/src%2Flibrustc_error_codes%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes.rs?ref=62878c20e9ce146123fbac23a98e44dfaae95d69", "patch": "@@ -445,6 +445,7 @@ E0761: include_str!(\"./error_codes/E0761.md\"),\n E0762: include_str!(\"./error_codes/E0762.md\"),\n E0763: include_str!(\"./error_codes/E0763.md\"),\n E0764: include_str!(\"./error_codes/E0764.md\"),\n+E0765: include_str!(\"./error_codes/E0765.md\"),\n ;\n //  E0006, // merged with E0005\n //  E0008, // cannot bind by-move into a pattern guard"}, {"sha": "456e3f3e9e4089c116872a907b1c221ea36b84ee", "filename": "src/librustc_error_codes/error_codes/E0765.md", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/62878c20e9ce146123fbac23a98e44dfaae95d69/src%2Flibrustc_error_codes%2Ferror_codes%2FE0765.md", "raw_url": "https://github.com/rust-lang/rust/raw/62878c20e9ce146123fbac23a98e44dfaae95d69/src%2Flibrustc_error_codes%2Ferror_codes%2FE0765.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0765.md?ref=62878c20e9ce146123fbac23a98e44dfaae95d69", "patch": "@@ -0,0 +1,13 @@\n+A double quote string (`\"`) was not terminated.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0765\n+let s = \"; // error!\n+```\n+\n+To fix this error, add the missing double quote at the end of the string:\n+\n+```\n+let s = \"\"; // ok!\n+```"}, {"sha": "60cf21552e9e91102bbd368bd6aa3511dd5bf95f", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 26, "deletions": 10, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/62878c20e9ce146123fbac23a98e44dfaae95d69/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62878c20e9ce146123fbac23a98e44dfaae95d69/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=62878c20e9ce146123fbac23a98e44dfaae95d69", "patch": "@@ -52,7 +52,10 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                         }\n \n                         if self.tcx.has_attr(def_id, sym::rustc_args_required_const) {\n-                            bug!(\"reifying a fn ptr that requires const arguments\");\n+                            span_bug!(\n+                                self.cur_span(),\n+                                \"reifying a fn ptr that requires const arguments\"\n+                            );\n                         }\n \n                         let instance = ty::Instance::resolve_for_fn_ptr(\n@@ -66,7 +69,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                         let fn_ptr = self.memory.create_fn_alloc(FnVal::Instance(instance));\n                         self.write_scalar(fn_ptr, dest)?;\n                     }\n-                    _ => bug!(\"reify fn pointer on {:?}\", src.layout.ty),\n+                    _ => span_bug!(self.cur_span(), \"reify fn pointer on {:?}\", src.layout.ty),\n                 }\n             }\n \n@@ -77,7 +80,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                         // No change to value\n                         self.write_immediate(*src, dest)?;\n                     }\n-                    _ => bug!(\"fn to unsafe fn cast on {:?}\", cast_ty),\n+                    _ => span_bug!(self.cur_span(), \"fn to unsafe fn cast on {:?}\", cast_ty),\n                 }\n             }\n \n@@ -99,7 +102,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                         let fn_ptr = self.memory.create_fn_alloc(FnVal::Instance(instance));\n                         self.write_scalar(fn_ptr, dest)?;\n                     }\n-                    _ => bug!(\"closure fn pointer on {:?}\", src.layout.ty),\n+                    _ => span_bug!(self.cur_span(), \"closure fn pointer on {:?}\", src.layout.ty),\n                 }\n             }\n         }\n@@ -162,7 +165,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 assert!(src.layout.ty.is_unsafe_ptr());\n                 return match *src {\n                     Immediate::ScalarPair(data, _) => Ok(data.into()),\n-                    Immediate::Scalar(..) => bug!(\n+                    Immediate::Scalar(..) => span_bug!(\n+                        self.cur_span(),\n                         \"{:?} input to a fat-to-thin cast ({:?} -> {:?})\",\n                         *src,\n                         src.layout.ty,\n@@ -216,7 +220,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n \n             // Casts to bool are not permitted by rustc, no need to handle them here.\n-            _ => bug!(\"invalid int to {:?} cast\", cast_ty),\n+            _ => span_bug!(self.cur_span(), \"invalid int to {:?} cast\", cast_ty),\n         }\n     }\n \n@@ -248,7 +252,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             // float -> f64\n             Float(FloatTy::F64) => Scalar::from_f64(f.convert(&mut false).value),\n             // That's it.\n-            _ => bug!(\"invalid float to {:?} cast\", dest_ty),\n+            _ => span_bug!(self.cur_span(), \"invalid float to {:?} cast\", dest_ty),\n         }\n     }\n \n@@ -287,7 +291,9 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 self.write_immediate(val, dest)\n             }\n \n-            _ => bug!(\"invalid unsizing {:?} -> {:?}\", src.layout.ty, cast_ty),\n+            _ => {\n+                span_bug!(self.cur_span(), \"invalid unsizing {:?} -> {:?}\", src.layout.ty, cast_ty)\n+            }\n         }\n     }\n \n@@ -307,7 +313,12 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 assert_eq!(def_a, def_b);\n                 if def_a.is_box() || def_b.is_box() {\n                     if !def_a.is_box() || !def_b.is_box() {\n-                        bug!(\"invalid unsizing between {:?} -> {:?}\", src.layout.ty, cast_ty.ty);\n+                        span_bug!(\n+                            self.cur_span(),\n+                            \"invalid unsizing between {:?} -> {:?}\",\n+                            src.layout.ty,\n+                            cast_ty.ty\n+                        );\n                     }\n                     return self.unsize_into_ptr(\n                         src,\n@@ -335,7 +346,12 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 }\n                 Ok(())\n             }\n-            _ => bug!(\"unsize_into: invalid conversion: {:?} -> {:?}\", src.layout, dest.layout),\n+            _ => span_bug!(\n+                self.cur_span(),\n+                \"unsize_into: invalid conversion: {:?} -> {:?}\",\n+                src.layout,\n+                dest.layout\n+            ),\n         }\n     }\n }"}, {"sha": "ceacbbe5139bf3508587b2f9493896961923c1e8", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/62878c20e9ce146123fbac23a98e44dfaae95d69/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62878c20e9ce146123fbac23a98e44dfaae95d69/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=62878c20e9ce146123fbac23a98e44dfaae95d69", "patch": "@@ -536,7 +536,10 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                         if sized_size == Size::ZERO {\n                             return Ok(None);\n                         } else {\n-                            bug!(\"Fields cannot be extern types, unless they are at offset 0\")\n+                            span_bug!(\n+                                self.cur_span(),\n+                                \"Fields cannot be extern types, unless they are at offset 0\"\n+                            )\n                         }\n                     }\n                 };\n@@ -584,7 +587,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n             ty::Foreign(_) => Ok(None),\n \n-            _ => bug!(\"size_and_align_of::<{:?}> not supported\", layout.ty),\n+            _ => span_bug!(self.cur_span(), \"size_and_align_of::<{:?}> not supported\", layout.ty),\n         }\n     }\n     #[inline]"}, {"sha": "31bdc45a2eab9432a901bec4cd87382355e5ed22", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/62878c20e9ce146123fbac23a98e44dfaae95d69/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62878c20e9ce146123fbac23a98e44dfaae95d69/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=62878c20e9ce146123fbac23a98e44dfaae95d69", "patch": "@@ -135,7 +135,12 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let bits = self.force_bits(val, layout_of.size)?;\n                 let kind = match layout_of.abi {\n                     Abi::Scalar(ref scalar) => scalar.value,\n-                    _ => bug!(\"{} called on invalid type {:?}\", intrinsic_name, ty),\n+                    _ => span_bug!(\n+                        self.cur_span(),\n+                        \"{} called on invalid type {:?}\",\n+                        intrinsic_name,\n+                        ty\n+                    ),\n                 };\n                 let (nonzero, intrinsic_name) = match intrinsic_name {\n                     sym::cttz_nonzero => (true, sym::cttz),"}, {"sha": "38948ee53846ae119bc4de38bf37612e1880d41d", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/62878c20e9ce146123fbac23a98e44dfaae95d69/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62878c20e9ce146123fbac23a98e44dfaae95d69/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=62878c20e9ce146123fbac23a98e44dfaae95d69", "patch": "@@ -311,7 +311,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         if let Ok(imm) = self.try_read_immediate(op)? {\n             Ok(imm)\n         } else {\n-            bug!(\"primitive read failed for type: {:?}\", op.layout.ty);\n+            span_bug!(self.cur_span(), \"primitive read failed for type: {:?}\", op.layout.ty);\n         }\n     }\n \n@@ -360,9 +360,12 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let val = if offset.bytes() == 0 { a } else { b };\n                 Immediate::from(val)\n             }\n-            Immediate::Scalar(val) => {\n-                bug!(\"field access on non aggregate {:#?}, {:#?}\", val, op.layout)\n-            }\n+            Immediate::Scalar(val) => span_bug!(\n+                self.cur_span(),\n+                \"field access on non aggregate {:#?}, {:#?}\",\n+                val,\n+                op.layout\n+            ),\n         };\n         Ok(OpTy { op: Operand::Immediate(immediate), layout: field_layout })\n     }\n@@ -545,7 +548,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             ty::ConstKind::Infer(..)\n             | ty::ConstKind::Bound(..)\n             | ty::ConstKind::Placeholder(..) => {\n-                bug!(\"eval_const_to_op: Unexpected ConstKind {:?}\", val)\n+                span_bug!(self.cur_span(), \"eval_const_to_op: Unexpected ConstKind {:?}\", val)\n             }\n             ty::ConstKind::Value(val_val) => val_val,\n         };\n@@ -656,7 +659,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                             .discriminants(def_id, *self.tcx)\n                             .find(|(_, var)| var.val == discr_bits)\n                     }\n-                    _ => bug!(\"tagged layout for non-adt non-generator\"),\n+                    _ => span_bug!(self.cur_span(), \"tagged layout for non-adt non-generator\"),\n                 }\n                 .ok_or_else(|| err_ub!(InvalidTag(tag_val.erase_tag())))?;\n                 // Return the cast value, and the index."}, {"sha": "607122935347e127537b59185385f0d7c44513cd", "filename": "src/librustc_mir/interpret/operator.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/62878c20e9ce146123fbac23a98e44dfaae95d69/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62878c20e9ce146123fbac23a98e44dfaae95d69/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperator.rs?ref=62878c20e9ce146123fbac23a98e44dfaae95d69", "patch": "@@ -61,7 +61,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             Le => l <= r,\n             Gt => l > r,\n             Ge => l >= r,\n-            _ => bug!(\"Invalid operation on char: {:?}\", bin_op),\n+            _ => span_bug!(self.cur_span(), \"Invalid operation on char: {:?}\", bin_op),\n         };\n         (Scalar::from_bool(res), false, self.tcx.types.bool)\n     }\n@@ -84,7 +84,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             BitAnd => l & r,\n             BitOr => l | r,\n             BitXor => l ^ r,\n-            _ => bug!(\"Invalid operation on bool: {:?}\", bin_op),\n+            _ => span_bug!(self.cur_span(), \"Invalid operation on bool: {:?}\", bin_op),\n         };\n         (Scalar::from_bool(res), false, self.tcx.types.bool)\n     }\n@@ -110,7 +110,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             Mul => ((l * r).value.into(), ty),\n             Div => ((l / r).value.into(), ty),\n             Rem => ((l % r).value.into(), ty),\n-            _ => bug!(\"invalid float op: `{:?}`\", bin_op),\n+            _ => span_bug!(self.cur_span(), \"invalid float op: `{:?}`\", bin_op),\n         };\n         (val, false, ty)\n     }\n@@ -154,7 +154,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n         // For the remaining ops, the types must be the same on both sides\n         if left_layout.ty != right_layout.ty {\n-            bug!(\n+            span_bug!(\n+                self.cur_span(),\n                 \"invalid asymmetric binary op {:?}: {:?} ({:?}), {:?} ({:?})\",\n                 bin_op,\n                 l,\n@@ -251,7 +252,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 ));\n             }\n \n-            _ => bug!(\n+            _ => span_bug!(\n+                self.cur_span(),\n                 \"invalid binary op {:?}: {:?}, {:?} (both {:?})\",\n                 bin_op,\n                 l,\n@@ -333,7 +335,11 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n                 M::binary_ptr_op(self, bin_op, left, right)\n             }\n-            _ => bug!(\"Invalid MIR: bad LHS type for binop: {:?}\", left.layout.ty),\n+            _ => span_bug!(\n+                self.cur_span(),\n+                \"Invalid MIR: bad LHS type for binop: {:?}\",\n+                left.layout.ty\n+            ),\n         }\n     }\n \n@@ -367,15 +373,15 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let val = val.to_bool()?;\n                 let res = match un_op {\n                     Not => !val,\n-                    _ => bug!(\"Invalid bool op {:?}\", un_op),\n+                    _ => span_bug!(self.cur_span(), \"Invalid bool op {:?}\", un_op),\n                 };\n                 Ok((Scalar::from_bool(res), false, self.tcx.types.bool))\n             }\n             ty::Float(fty) => {\n                 let res = match (un_op, fty) {\n                     (Neg, FloatTy::F32) => Scalar::from_f32(-val.to_f32()?),\n                     (Neg, FloatTy::F64) => Scalar::from_f64(-val.to_f64()?),\n-                    _ => bug!(\"Invalid float op {:?}\", un_op),\n+                    _ => span_bug!(self.cur_span(), \"Invalid float op {:?}\", un_op),\n                 };\n                 Ok((res, false, layout.ty))\n             }"}, {"sha": "0f3fbcf8195748e20ee222fe5f8ae850ccbdfb6d", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62878c20e9ce146123fbac23a98e44dfaae95d69/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62878c20e9ce146123fbac23a98e44dfaae95d69/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=62878c20e9ce146123fbac23a98e44dfaae95d69", "patch": "@@ -232,7 +232,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     ty::FnDef(..) => instance_ty.fn_sig(*self.tcx).abi(),\n                     ty::Closure(..) => Abi::RustCall,\n                     ty::Generator(..) => Abi::Rust,\n-                    _ => bug!(\"unexpected callee ty: {:?}\", instance_ty),\n+                    _ => span_bug!(self.cur_span(), \"unexpected callee ty: {:?}\", instance_ty),\n                 }\n             };\n             let normalize_abi = |abi| match abi {"}, {"sha": "8e74c3847bc90be89eea83e5357dce217eda93e2", "filename": "src/librustc_parse/lexer/mod.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/62878c20e9ce146123fbac23a98e44dfaae95d69/src%2Flibrustc_parse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62878c20e9ce146123fbac23a98e44dfaae95d69/src%2Flibrustc_parse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flexer%2Fmod.rs?ref=62878c20e9ce146123fbac23a98e44dfaae95d69", "patch": "@@ -353,8 +353,15 @@ impl<'a> StringReader<'a> {\n             }\n             rustc_lexer::LiteralKind::Str { terminated } => {\n                 if !terminated {\n-                    self.fatal_span_(start, suffix_start, \"unterminated double quote string\")\n-                        .raise()\n+                    self.sess\n+                        .span_diagnostic\n+                        .struct_span_fatal_with_code(\n+                            self.mk_sp(start, suffix_start),\n+                            \"unterminated double quote string\",\n+                            error_code!(E0765),\n+                        )\n+                        .emit();\n+                    FatalError.raise();\n                 }\n                 (token::Str, Mode::Str, 1, 1) // \" \"\n             }"}, {"sha": "bb88b8191f1adb6729c6293112dede99d8db46e3", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 43, "deletions": 22, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/62878c20e9ce146123fbac23a98e44dfaae95d69/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62878c20e9ce146123fbac23a98e44dfaae95d69/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=62878c20e9ce146123fbac23a98e44dfaae95d69", "patch": "@@ -49,6 +49,7 @@ crate struct ImportSuggestion {\n     pub did: Option<DefId>,\n     pub descr: &'static str,\n     pub path: Path,\n+    pub accessible: bool,\n }\n \n /// Adjust the impl span so that just the `impl` keyword is taken by removing\n@@ -640,21 +641,32 @@ impl<'a> Resolver<'a> {\n         let mut candidates = Vec::new();\n         let mut seen_modules = FxHashSet::default();\n         let not_local_module = crate_name.name != kw::Crate;\n-        let mut worklist = vec![(start_module, Vec::<ast::PathSegment>::new(), not_local_module)];\n+        let mut worklist =\n+            vec![(start_module, Vec::<ast::PathSegment>::new(), true, not_local_module)];\n \n-        while let Some((in_module, path_segments, in_module_is_extern)) = worklist.pop() {\n+        while let Some((in_module, path_segments, accessible, in_module_is_extern)) = worklist.pop()\n+        {\n             // We have to visit module children in deterministic order to avoid\n             // instabilities in reported imports (#43552).\n             in_module.for_each_child(self, |this, ident, ns, name_binding| {\n                 // avoid imports entirely\n                 if name_binding.is_import() && !name_binding.is_extern_crate() {\n                     return;\n                 }\n+\n                 // avoid non-importable candidates as well\n                 if !name_binding.is_importable() {\n                     return;\n                 }\n \n+                let child_accessible =\n+                    accessible && this.is_accessible_from(name_binding.vis, parent_scope.module);\n+\n+                // do not venture inside inaccessible items of other crates\n+                if in_module_is_extern && !child_accessible {\n+                    return;\n+                }\n+\n                 // collect results based on the filter function\n                 // avoid suggesting anything from the same module in which we are resolving\n                 if ident.name == lookup_ident.name\n@@ -673,22 +685,29 @@ impl<'a> Resolver<'a> {\n \n                         segms.push(ast::PathSegment::from_ident(ident));\n                         let path = Path { span: name_binding.span, segments: segms };\n-                        // the entity is accessible in the following cases:\n-                        // 1. if it's defined in the same crate, it's always\n-                        // accessible (since private entities can be made public)\n-                        // 2. if it's defined in another crate, it's accessible\n-                        // only if both the module is public and the entity is\n-                        // declared as public (due to pruning, we don't explore\n-                        // outside crate private modules => no need to check this)\n-                        if !in_module_is_extern || name_binding.vis == ty::Visibility::Public {\n-                            let did = match res {\n-                                Res::Def(DefKind::Ctor(..), did) => this.parent(did),\n-                                _ => res.opt_def_id(),\n-                            };\n-                            if candidates.iter().all(|v: &ImportSuggestion| v.did != did) {\n-                                candidates.push(ImportSuggestion { did, descr: res.descr(), path });\n+                        let did = match res {\n+                            Res::Def(DefKind::Ctor(..), did) => this.parent(did),\n+                            _ => res.opt_def_id(),\n+                        };\n+\n+                        if child_accessible {\n+                            // Remove invisible match if exists\n+                            if let Some(idx) = candidates\n+                                .iter()\n+                                .position(|v: &ImportSuggestion| v.did == did && !v.accessible)\n+                            {\n+                                candidates.remove(idx);\n                             }\n                         }\n+\n+                        if candidates.iter().all(|v: &ImportSuggestion| v.did != did) {\n+                            candidates.push(ImportSuggestion {\n+                                did,\n+                                descr: res.descr(),\n+                                path,\n+                                accessible: child_accessible,\n+                            });\n+                        }\n                     }\n                 }\n \n@@ -701,20 +720,22 @@ impl<'a> Resolver<'a> {\n                     let is_extern_crate_that_also_appears_in_prelude =\n                         name_binding.is_extern_crate() && lookup_ident.span.rust_2018();\n \n-                    let is_visible_to_user =\n-                        !in_module_is_extern || name_binding.vis == ty::Visibility::Public;\n-\n-                    if !is_extern_crate_that_also_appears_in_prelude && is_visible_to_user {\n-                        // add the module to the lookup\n+                    if !is_extern_crate_that_also_appears_in_prelude {\n                         let is_extern = in_module_is_extern || name_binding.is_extern_crate();\n+                        // add the module to the lookup\n                         if seen_modules.insert(module.def_id().unwrap()) {\n-                            worklist.push((module, path_segments, is_extern));\n+                            worklist.push((module, path_segments, child_accessible, is_extern));\n                         }\n                     }\n                 }\n             })\n         }\n \n+        // If only some candidates are accessible, take just them\n+        if !candidates.iter().all(|v: &ImportSuggestion| !v.accessible) {\n+            candidates = candidates.into_iter().filter(|x| x.accessible).collect();\n+        }\n+\n         candidates\n     }\n "}, {"sha": "478698ba20c70b4d36d64e4bf1954e4b7548f3c4", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/62878c20e9ce146123fbac23a98e44dfaae95d69/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62878c20e9ce146123fbac23a98e44dfaae95d69/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=62878c20e9ce146123fbac23a98e44dfaae95d69", "patch": "@@ -887,7 +887,12 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n                         let path = Path { span: name_binding.span, segments: path_segments };\n                         result = Some((\n                             module,\n-                            ImportSuggestion { did: Some(def_id), descr: \"module\", path },\n+                            ImportSuggestion {\n+                                did: Some(def_id),\n+                                descr: \"module\",\n+                                path,\n+                                accessible: true,\n+                            },\n                         ));\n                     } else {\n                         // add the module to the lookup"}, {"sha": "fab801b3beaeaec049388d3856dbc741c39014f0", "filename": "src/test/rustdoc-ui/test-compile-fail3.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/62878c20e9ce146123fbac23a98e44dfaae95d69/src%2Ftest%2Frustdoc-ui%2Ftest-compile-fail3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62878c20e9ce146123fbac23a98e44dfaae95d69/src%2Ftest%2Frustdoc-ui%2Ftest-compile-fail3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ftest-compile-fail3.stderr?ref=62878c20e9ce146123fbac23a98e44dfaae95d69", "patch": "@@ -1,8 +1,9 @@\n-error: unterminated double quote string\n+error[E0765]: unterminated double quote string\n  --> $DIR/test-compile-fail3.rs:3:1\n   |\n 3 | \"fail\n   | ^^^^^^\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0765`."}, {"sha": "29cb22e2e4b099689f7ff055516d3d5dcca6355d", "filename": "src/test/rustdoc-ui/unparseable-doc-test.stdout", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/62878c20e9ce146123fbac23a98e44dfaae95d69/src%2Ftest%2Frustdoc-ui%2Funparseable-doc-test.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/62878c20e9ce146123fbac23a98e44dfaae95d69/src%2Ftest%2Frustdoc-ui%2Funparseable-doc-test.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Funparseable-doc-test.stdout?ref=62878c20e9ce146123fbac23a98e44dfaae95d69", "patch": "@@ -5,14 +5,15 @@ test $DIR/unparseable-doc-test.rs - foo (line 6) ... FAILED\n failures:\n \n ---- $DIR/unparseable-doc-test.rs - foo (line 6) stdout ----\n-error: unterminated double quote string\n+error[E0765]: unterminated double quote string\n   --> $DIR/unparseable-doc-test.rs:8:1\n    |\n LL | \"unterminated\n    | ^^^^^^^^^^^^^\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0765`.\n Couldn't compile the test.\n \n failures:"}, {"sha": "0bfdc3ac2651dbccfbe77b8ff007c3b7f82c206f", "filename": "src/test/ui/codemap_tests/tab_2.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/62878c20e9ce146123fbac23a98e44dfaae95d69/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62878c20e9ce146123fbac23a98e44dfaae95d69/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_2.stderr?ref=62878c20e9ce146123fbac23a98e44dfaae95d69", "patch": "@@ -1,4 +1,4 @@\n-error: unterminated double quote string\n+error[E0765]: unterminated double quote string\n   --> $DIR/tab_2.rs:4:7\n    |\n LL |                   \"\"\";\n@@ -8,3 +8,4 @@ LL | | }\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0765`."}, {"sha": "6dcbf055a8bb78fbc0f968c83b6c146e253b2189", "filename": "src/test/ui/hygiene/globs.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/62878c20e9ce146123fbac23a98e44dfaae95d69/src%2Ftest%2Fui%2Fhygiene%2Fglobs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62878c20e9ce146123fbac23a98e44dfaae95d69/src%2Ftest%2Fui%2Fhygiene%2Fglobs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fglobs.stderr?ref=62878c20e9ce146123fbac23a98e44dfaae95d69", "patch": "@@ -23,14 +23,10 @@ LL | |     }\n    | |_____- in this macro invocation\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-help: consider importing one of these items\n+help: consider importing this function\n    |\n LL | use bar::g;\n    |\n-LL | use foo::test2::test::g;\n-   |\n-LL | use foo::test::g;\n-   |\n \n error[E0425]: cannot find function `f` in this scope\n   --> $DIR/globs.rs:61:12"}, {"sha": "5652ee747060597bec4dea336d00d71103d82f88", "filename": "src/test/ui/issues/issue-26545.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/62878c20e9ce146123fbac23a98e44dfaae95d69/src%2Ftest%2Fui%2Fissues%2Fissue-26545.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62878c20e9ce146123fbac23a98e44dfaae95d69/src%2Ftest%2Fui%2Fissues%2Fissue-26545.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26545.rs?ref=62878c20e9ce146123fbac23a98e44dfaae95d69", "patch": "@@ -0,0 +1,12 @@\n+mod foo {\n+    pub struct B(pub ());\n+}\n+\n+mod baz {\n+    fn foo() {\n+        B(());\n+        //~^ ERROR cannot find function, tuple struct or tuple variant `B` in this scope [E0425]\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "d3c86692501d68ee2102e6d3d0050b03f64d03e2", "filename": "src/test/ui/issues/issue-26545.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/62878c20e9ce146123fbac23a98e44dfaae95d69/src%2Ftest%2Fui%2Fissues%2Fissue-26545.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62878c20e9ce146123fbac23a98e44dfaae95d69/src%2Ftest%2Fui%2Fissues%2Fissue-26545.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26545.stderr?ref=62878c20e9ce146123fbac23a98e44dfaae95d69", "patch": "@@ -0,0 +1,14 @@\n+error[E0425]: cannot find function, tuple struct or tuple variant `B` in this scope\n+  --> $DIR/issue-26545.rs:7:9\n+   |\n+LL |         B(());\n+   |         ^ not found in this scope\n+   |\n+help: consider importing this tuple struct\n+   |\n+LL |     use foo::B;\n+   |\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0425`."}, {"sha": "683761667d40aee2077f5d6463b311fb9dab5065", "filename": "src/test/ui/issues/issue-35675.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62878c20e9ce146123fbac23a98e44dfaae95d69/src%2Ftest%2Fui%2Fissues%2Fissue-35675.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62878c20e9ce146123fbac23a98e44dfaae95d69/src%2Ftest%2Fui%2Fissues%2Fissue-35675.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35675.rs?ref=62878c20e9ce146123fbac23a98e44dfaae95d69", "patch": "@@ -33,7 +33,7 @@ fn qux() -> Some {\n fn main() {}\n \n mod x {\n-    enum Enum {\n+    pub enum Enum {\n         Variant1,\n         Variant2(),\n         Variant3(usize),"}, {"sha": "a088f91554dfb6734adcde64d115bbb8624091a8", "filename": "src/test/ui/issues/issue-42944.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/62878c20e9ce146123fbac23a98e44dfaae95d69/src%2Ftest%2Fui%2Fissues%2Fissue-42944.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62878c20e9ce146123fbac23a98e44dfaae95d69/src%2Ftest%2Fui%2Fissues%2Fissue-42944.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-42944.rs?ref=62878c20e9ce146123fbac23a98e44dfaae95d69", "patch": "@@ -1,20 +1,20 @@\n mod foo {\n-    pub struct B(());\n+    pub struct Bx(());\n }\n \n mod bar {\n-    use foo::B;\n+    use foo::Bx;\n \n     fn foo() {\n-        B(());\n-        //~^ ERROR expected function, tuple struct or tuple variant, found struct `B` [E0423]\n+        Bx(());\n+        //~^ ERROR expected function, tuple struct or tuple variant, found struct `Bx` [E0423]\n     }\n }\n \n mod baz {\n     fn foo() {\n-        B(());\n-        //~^ ERROR cannot find function, tuple struct or tuple variant `B` in this scope [E0425]\n+        Bx(());\n+        //~^ ERROR cannot find function, tuple struct or tuple variant `Bx` in this scope [E0425]\n     }\n }\n "}, {"sha": "9fad43757ba62fdf8e6f1a3c11d46207d1fca78f", "filename": "src/test/ui/issues/issue-42944.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/62878c20e9ce146123fbac23a98e44dfaae95d69/src%2Ftest%2Fui%2Fissues%2Fissue-42944.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62878c20e9ce146123fbac23a98e44dfaae95d69/src%2Ftest%2Fui%2Fissues%2Fissue-42944.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-42944.stderr?ref=62878c20e9ce146123fbac23a98e44dfaae95d69", "patch": "@@ -1,18 +1,18 @@\n-error[E0423]: expected function, tuple struct or tuple variant, found struct `B`\n+error[E0423]: expected function, tuple struct or tuple variant, found struct `Bx`\n   --> $DIR/issue-42944.rs:9:9\n    |\n-LL |         B(());\n-   |         ^ constructor is not visible here due to private fields\n+LL |         Bx(());\n+   |         ^^ constructor is not visible here due to private fields\n \n-error[E0425]: cannot find function, tuple struct or tuple variant `B` in this scope\n+error[E0425]: cannot find function, tuple struct or tuple variant `Bx` in this scope\n   --> $DIR/issue-42944.rs:16:9\n    |\n-LL |         B(());\n-   |         ^ not found in this scope\n+LL |         Bx(());\n+   |         ^^ not found in this scope\n    |\n help: consider importing this tuple struct\n    |\n-LL |     use foo::B;\n+LL |     use foo::Bx;\n    |\n \n error: aborting due to 2 previous errors"}, {"sha": "a86ec7fabea4bf37690c55ff9175e20eacb00782", "filename": "src/test/ui/issues/issue-4366-2.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62878c20e9ce146123fbac23a98e44dfaae95d69/src%2Ftest%2Fui%2Fissues%2Fissue-4366-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62878c20e9ce146123fbac23a98e44dfaae95d69/src%2Ftest%2Fui%2Fissues%2Fissue-4366-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4366-2.stderr?ref=62878c20e9ce146123fbac23a98e44dfaae95d69", "patch": "@@ -15,12 +15,10 @@ error[E0423]: expected function, found module `foo`\n LL |     foo();\n    |     ^^^ not a function\n    |\n-help: consider importing one of these items instead\n+help: consider importing this function instead\n    |\n LL | use foo::foo;\n    |\n-LL | use m1::foo;\n-   |\n \n error: aborting due to 2 previous errors\n "}, {"sha": "469ea93e904686e08b416c449f10988084aea6b1", "filename": "src/test/ui/issues/issue-4366.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62878c20e9ce146123fbac23a98e44dfaae95d69/src%2Ftest%2Fui%2Fissues%2Fissue-4366.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62878c20e9ce146123fbac23a98e44dfaae95d69/src%2Ftest%2Fui%2Fissues%2Fissue-4366.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4366.stderr?ref=62878c20e9ce146123fbac23a98e44dfaae95d69", "patch": "@@ -4,12 +4,10 @@ error[E0425]: cannot find function `foo` in this scope\n LL |         fn sub() -> isize { foo(); 1 }\n    |                             ^^^ not found in this scope\n    |\n-help: consider importing one of these items\n+help: consider importing this function\n    |\n LL |         use foo::foo;\n    |\n-LL |         use m1::foo;\n-   |\n \n error: aborting due to previous error\n "}, {"sha": "daf67219f4d0acf122df231618faca7c3007411a", "filename": "src/test/ui/issues/issue-44078.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/62878c20e9ce146123fbac23a98e44dfaae95d69/src%2Ftest%2Fui%2Fissues%2Fissue-44078.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62878c20e9ce146123fbac23a98e44dfaae95d69/src%2Ftest%2Fui%2Fissues%2Fissue-44078.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-44078.stderr?ref=62878c20e9ce146123fbac23a98e44dfaae95d69", "patch": "@@ -1,4 +1,4 @@\n-error: unterminated double quote string\n+error[E0765]: unterminated double quote string\n   --> $DIR/issue-44078.rs:2:8\n    |\n LL |       \"\ud83d\ude0a\"\";\n@@ -8,3 +8,4 @@ LL | | }\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0765`."}, {"sha": "94b300a7bd765839364e4ba1ed41c139089639b3", "filename": "src/test/ui/parser/unbalanced-doublequote.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/62878c20e9ce146123fbac23a98e44dfaae95d69/src%2Ftest%2Fui%2Fparser%2Funbalanced-doublequote.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62878c20e9ce146123fbac23a98e44dfaae95d69/src%2Ftest%2Fui%2Fparser%2Funbalanced-doublequote.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funbalanced-doublequote.stderr?ref=62878c20e9ce146123fbac23a98e44dfaae95d69", "patch": "@@ -1,4 +1,4 @@\n-error: unterminated double quote string\n+error[E0765]: unterminated double quote string\n   --> $DIR/unbalanced-doublequote.rs:5:5\n    |\n LL | /     \"\n@@ -7,3 +7,4 @@ LL | | }\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0765`."}, {"sha": "eda9d4c128d81dee01ee130853d50ffb28fd3255", "filename": "src/test/ui/privacy/privacy-ns1.stderr", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/62878c20e9ce146123fbac23a98e44dfaae95d69/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62878c20e9ce146123fbac23a98e44dfaae95d69/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns1.stderr?ref=62878c20e9ce146123fbac23a98e44dfaae95d69", "patch": "@@ -11,14 +11,10 @@ help: a unit struct with a similar name exists\n    |\n LL |     Baz();\n    |     ^^^\n-help: consider importing one of these items instead\n-   |\n-LL | use foo1::Bar;\n+help: consider importing this function instead\n    |\n LL | use foo2::Bar;\n    |\n-LL | use foo3::Bar;\n-   |\n \n error[E0425]: cannot find function, tuple struct or tuple variant `Bar` in this scope\n   --> $DIR/privacy-ns1.rs:51:5\n@@ -33,14 +29,10 @@ help: a unit struct with a similar name exists\n    |\n LL |     Baz();\n    |     ^^^\n-help: consider importing one of these items\n-   |\n-LL | use foo1::Bar;\n+help: consider importing this function\n    |\n LL | use foo2::Bar;\n    |\n-LL | use foo3::Bar;\n-   |\n \n error[E0412]: cannot find type `Bar` in this scope\n   --> $DIR/privacy-ns1.rs:52:17\n@@ -55,14 +47,10 @@ help: a struct with a similar name exists\n    |\n LL |     let _x: Box<Baz>;\n    |                 ^^^\n-help: consider importing one of these items\n+help: consider importing this trait\n    |\n LL | use foo1::Bar;\n    |\n-LL | use foo2::Bar;\n-   |\n-LL | use foo3::Bar;\n-   |\n \n error[E0107]: wrong number of const arguments: expected 0, found 1\n   --> $DIR/privacy-ns1.rs:35:17"}, {"sha": "d7d9b83527509b3232f3005d35aee782a290e656", "filename": "src/test/ui/privacy/privacy-ns2.stderr", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/62878c20e9ce146123fbac23a98e44dfaae95d69/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62878c20e9ce146123fbac23a98e44dfaae95d69/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns2.stderr?ref=62878c20e9ce146123fbac23a98e44dfaae95d69", "patch": "@@ -4,14 +4,10 @@ error[E0423]: expected function, tuple struct or tuple variant, found trait `Bar\n LL |     Bar();\n    |     ^^^ not a function, tuple struct or tuple variant\n    |\n-help: consider importing one of these items instead\n-   |\n-LL | use foo1::Bar;\n+help: consider importing this function instead\n    |\n LL | use foo2::Bar;\n    |\n-LL | use foo3::Bar;\n-   |\n \n error[E0423]: expected function, tuple struct or tuple variant, found trait `Bar`\n   --> $DIR/privacy-ns2.rs:26:5\n@@ -26,14 +22,10 @@ help: a unit struct with a similar name exists\n    |\n LL |     Baz();\n    |     ^^^\n-help: consider importing one of these items instead\n-   |\n-LL | use foo1::Bar;\n+help: consider importing this function instead\n    |\n LL | use foo2::Bar;\n    |\n-LL | use foo3::Bar;\n-   |\n \n error[E0573]: expected type, found function `Bar`\n   --> $DIR/privacy-ns2.rs:43:14\n@@ -45,14 +37,10 @@ help: use `=` if you meant to assign\n    |\n LL |     let _x = Bar();\n    |            ^\n-help: consider importing one of these items instead\n+help: consider importing this trait instead\n    |\n LL | use foo1::Bar;\n    |\n-LL | use foo2::Bar;\n-   |\n-LL | use foo3::Bar;\n-   |\n \n error[E0603]: trait `Bar` is private\n   --> $DIR/privacy-ns2.rs:63:15"}, {"sha": "538eeead9fc9da401d05656a641772cc1376295a", "filename": "src/test/ui/resolve/issue-21221-1.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/62878c20e9ce146123fbac23a98e44dfaae95d69/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62878c20e9ce146123fbac23a98e44dfaae95d69/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-1.stderr?ref=62878c20e9ce146123fbac23a98e44dfaae95d69", "patch": "@@ -25,11 +25,8 @@ LL | use mul1::Mul;\n    |\n LL | use mul2::Mul;\n    |\n-LL | use mul3::Mul;\n-   |\n-LL | use mul4::Mul;\n+LL | use std::ops::Mul;\n    |\n-     and 2 other candidates\n \n error[E0405]: cannot find trait `ThisTraitReallyDoesntExistInAnyModuleReally` in this scope\n   --> $DIR/issue-21221-1.rs:63:6"}, {"sha": "5361a618d4e85371b5e236a090117ec87f94b9f0", "filename": "triagebot.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62878c20e9ce146123fbac23a98e44dfaae95d69/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/62878c20e9ce146123fbac23a98e44dfaae95d69/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=62878c20e9ce146123fbac23a98e44dfaae95d69", "patch": "@@ -113,7 +113,7 @@ topic = \"P-critical #{number} {title}\"\n message_on_add = \"@*WG-prioritization* issue #{number} has been assigned `P-critical`.\"\n \n [notify-zulip.\"P-high\"]\n-required_labels = [\"regression-from-stable-to-*\"]\n+required_labels = [\"regression-from-stable-to-[bn]*\"] # only nightly and beta regressions\n zulip_stream = 227806 # #t-compiler/wg-prioritization\n topic = \"P-high regression #{number} {title}\"\n message_on_add = \"@*WG-prioritization* issue #{number} has been assigned `P-high` and is a regression.\""}]}