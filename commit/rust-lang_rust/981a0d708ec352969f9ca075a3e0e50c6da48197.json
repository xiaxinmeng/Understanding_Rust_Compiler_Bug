{"sha": "981a0d708ec352969f9ca075a3e0e50c6da48197", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4MWEwZDcwOGVjMzUyOTY5ZjljYTA3NWEzZTBlNTBjNmRhNDgxOTc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-01-07T18:16:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-07T18:16:43Z"}, "message": "Merge #7199\n\n7199: typo r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "959c67eb747eab5701e36a451e265280a4c8d62f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/959c67eb747eab5701e36a451e265280a4c8d62f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/981a0d708ec352969f9ca075a3e0e50c6da48197", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf91ALCRBK7hj4Ov3rIwAAdHIIAIk3FmdX2tC35QpxRQxUHmRb\nx1silIqqmMZ7Ac7CPB4i4IkJY8AAMmAvcQc23ywMxSifx7Z1FfBSqPRXemeE4Ho6\nX+hRBicHVXNlQr50TV75VhTsMEHO+8FXKIdcVV3VncwZKAfBvsV+fcWZsCgFNvCL\nhp6LemrxglJAbzrup3M5Vy5tdo7DtroEYy+7LWi9ihZYLl2mQR7rr0LunyoKVUw7\n/Kyj8vKrrV2y1j9y3Bc2kmjjOTwJSdedkRQt48cFKF0Kk56Gk+2pE8HgRYfKT3k6\no5ohBXGj6GR+/OikiADtmC9owmyNg7LuWhVCk9x/157/gpYlVkc3v9AJhF1PXmk=\n=mqYP\n-----END PGP SIGNATURE-----\n", "payload": "tree 959c67eb747eab5701e36a451e265280a4c8d62f\nparent 4ddf075673c4a8e3b5b0be5a2f085cdefe3993ef\nparent 8f994dda68833bdd517bc300f258bd0c307e13bf\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1610043403 +0000\ncommitter GitHub <noreply@github.com> 1610043403 +0000\n\nMerge #7199\n\n7199: typo r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/981a0d708ec352969f9ca075a3e0e50c6da48197", "html_url": "https://github.com/rust-lang/rust/commit/981a0d708ec352969f9ca075a3e0e50c6da48197", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/981a0d708ec352969f9ca075a3e0e50c6da48197/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ddf075673c4a8e3b5b0be5a2f085cdefe3993ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ddf075673c4a8e3b5b0be5a2f085cdefe3993ef", "html_url": "https://github.com/rust-lang/rust/commit/4ddf075673c4a8e3b5b0be5a2f085cdefe3993ef"}, {"sha": "8f994dda68833bdd517bc300f258bd0c307e13bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f994dda68833bdd517bc300f258bd0c307e13bf", "html_url": "https://github.com/rust-lang/rust/commit/8f994dda68833bdd517bc300f258bd0c307e13bf"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "67cbc6744885b2ea4ed29c4a422160671f4b2001", "filename": "docs/dev/style.md", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/981a0d708ec352969f9ca075a3e0e50c6da48197/docs%2Fdev%2Fstyle.md", "raw_url": "https://github.com/rust-lang/rust/raw/981a0d708ec352969f9ca075a3e0e50c6da48197/docs%2Fdev%2Fstyle.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Fstyle.md?ref=981a0d708ec352969f9ca075a3e0e50c6da48197", "patch": "@@ -53,7 +53,7 @@ We try to be very conservative with usage of crates.io dependencies.\n Don't use small \"helper\" crates (exception: `itertools` is allowed).\n If there's some general reusable bit of code you need, consider adding it to the `stdx` crate.\n \n-**Rational:** keep compile times low, create ecosystem pressure for faster\n+**Rationale:** keep compile times low, create ecosystem pressure for faster\n compiles, reduce the number of things which might break.\n \n ## Commit Style\n@@ -78,7 +78,7 @@ Use original span for FileId\n \n This makes it easier to prepare a changelog.\n \n-**Rational:** clean history is potentially useful, but rarely used.\n+**Rationale:** clean history is potentially useful, but rarely used.\n But many users read changelogs.\n \n ## Clippy\n@@ -90,7 +90,7 @@ There's `cargo xtask lint` command which runs a subset of low-FPR lints.\n Careful tweaking of `xtask lint` is welcome.\n Of course, applying Clippy suggestions is welcome as long as they indeed improve the code.\n \n-**Rational:** see [rust-lang/clippy#5537](https://github.com/rust-lang/rust-clippy/issues/5537).\n+**Rationale:** see [rust-lang/clippy#5537](https://github.com/rust-lang/rust-clippy/issues/5537).\n \n # Code\n \n@@ -126,7 +126,7 @@ fn main() {\n     }\n ```\n \n-**Rational:**\n+**Rationale:**\n \n There are many benefits to this:\n \n@@ -157,7 +157,7 @@ fn frobnicate(walrus: Option<Walrus>) {\n }\n ```\n \n-**Rational:** this makes control flow explicit at the call site.\n+**Rationale:** this makes control flow explicit at the call site.\n Call-site has more context, it often happens that the precondition falls out naturally or can be bubbled up higher in the stack.\n \n Avoid splitting precondition check and precondition use across functions:\n@@ -195,7 +195,7 @@ fn is_string_literal(s: &str) -> bool {\n In the \"Not as good\" version, the precondition that `1` is a valid char boundary is checked in `is_string_literal` and used in `foo`.\n In the \"Good\" version, the precondition check and usage are checked in the same block, and then encoded in the types.\n \n-**Rational:** non-local code properties degrade under change.\n+**Rationale:** non-local code properties degrade under change.\n \n When checking a boolean precondition, prefer `if !invariant` to `if negated_invariant`:\n \n@@ -211,7 +211,7 @@ if idx >= len {\n }\n ```\n \n-**Rational:** its useful to see the invariant relied upon by the rest of the function clearly spelled out.\n+**Rationale:** its useful to see the invariant relied upon by the rest of the function clearly spelled out.\n \n ## Getters & Setters\n \n@@ -241,7 +241,7 @@ impl Person {\n }\n ```\n \n-**Rational:** we don't provide public API, it's cheaper to refactor than to pay getters rent.\n+**Rationale:** we don't provide public API, it's cheaper to refactor than to pay getters rent.\n Non-local code properties degrade under change, privacy makes invariant local.\n Borrowed own data discloses irrelevant details about origin of data.\n Irrelevant (neither right nor wrong) things obscure correctness.\n@@ -271,7 +271,7 @@ impl Foo {\n \n Prefer `Default` even it has to be implemented manually.\n \n-**Rational:** less typing in the common case, uniformity.\n+**Rationale:** less typing in the common case, uniformity.\n \n ## Functions Over Objects\n \n@@ -327,7 +327,7 @@ impl ThingDoer {\n }\n ```\n \n-**Rational:** not bothering the caller with irrelevant details, not mixing user API with implementor API.\n+**Rationale:** not bothering the caller with irrelevant details, not mixing user API with implementor API.\n \n ## Avoid Monomorphization\n \n@@ -360,7 +360,7 @@ fn frbonicate(f: impl AsRef<Path>) {\n }\n ```\n \n-**Rational:** Rust uses monomorphization to compile generic code, meaning that for each instantiation of a generic functions with concrete types, the function is compiled afresh, *per crate*.\n+**Rationale:** Rust uses monomorphization to compile generic code, meaning that for each instantiation of a generic functions with concrete types, the function is compiled afresh, *per crate*.\n This allows for exceptionally good performance, but leads to increased compile times.\n Runtime performance obeys 80%/20% rule -- only a small fraction of code is hot.\n Compile time **does not** obey this rule -- all code has to be compiled.\n@@ -389,7 +389,7 @@ if words.len() != 2 {\n }\n ```\n \n-**Rational:** not allocating is almost often faster.\n+**Rationale:** not allocating is almost often faster.\n \n ## Push Allocations to the Call Site\n \n@@ -408,14 +408,14 @@ fn frobnicate(s: &str) {\n }\n ```\n \n-**Rational:** reveals the costs.\n+**Rationale:** reveals the costs.\n It is also more efficient when the caller already owns the allocation.\n \n ## Collection types\n \n Prefer `rustc_hash::FxHashMap` and `rustc_hash::FxHashSet` instead of the ones in `std::collections`.\n \n-**Rational:** they use a hasher that's significantly faster and using them consistently will reduce code size by some small amount.\n+**Rationale:** they use a hasher that's significantly faster and using them consistently will reduce code size by some small amount.\n \n # Style\n \n@@ -445,7 +445,7 @@ use crate::{}\n use super::{}\n ```\n \n-**Rational:** consistency.\n+**Rationale:** consistency.\n Reading order is important for new contributors.\n Grouping by crate allows to spot unwanted dependencies easier.\n \n@@ -466,7 +466,7 @@ use syntax::ast::Struct;\n fn frobnicate(func: Function, strukt: Struct) {}\n ```\n \n-**Rational:** avoids name clashes, makes the layer clear at a glance.\n+**Rationale:** avoids name clashes, makes the layer clear at a glance.\n \n When implementing traits from `std::fmt` or `std::ops`, import the module:\n \n@@ -492,14 +492,14 @@ impl Deref for Widget {\n }\n ```\n \n-**Rational:** overall, less typing.\n+**Rationale:** overall, less typing.\n Makes it clear that a trait is implemented, rather than used.\n \n Avoid local `use MyEnum::*` imports.\n-**Rational:** consistency.\n+**Rationale:** consistency.\n \n Prefer `use crate::foo::bar` to `use super::bar` or `use self::bar::baz`.\n-**Rational:** consistency, this is the style which works in all cases.\n+**Rationale:** consistency, this is the style which works in all cases.\n \n ## Order of Items\n \n@@ -570,7 +570,7 @@ impl Parent {\n }\n ```\n \n-**Rational:** easier to get the sense of the API by visually scanning the file.\n+**Rationale:** easier to get the sense of the API by visually scanning the file.\n If function bodies are folded in the editor, the source code should read as documentation for the public API.\n \n ## Variable Naming\n@@ -626,7 +626,7 @@ fn foo() -> Option<Bar> {\n }\n ```\n \n-**Rational:** reduce congnitive stack usage.\n+**Rationale:** reduce congnitive stack usage.\n \n ## Comparisons\n \n@@ -640,12 +640,12 @@ assert!(lo <= x && x <= hi);\n assert!(x >= lo && x <= hi>);\n ```\n \n-**Rational:** Less-then comparisons are more intuitive, they correspond spatially to [real line](https://en.wikipedia.org/wiki/Real_line).\n+**Rationale:** Less-then comparisons are more intuitive, they correspond spatially to [real line](https://en.wikipedia.org/wiki/Real_line).\n \n \n ## Documentation\n \n For `.md` and `.adoc` files, prefer a sentence-per-line format, don't wrap lines.\n If the line is too long, you want to split the sentence in two :-)\n \n-**Rational:** much easier to edit the text and read the diff.\n+**Rationale:** much easier to edit the text and read the diff."}]}