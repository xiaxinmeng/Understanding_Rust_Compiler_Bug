{"sha": "7564a043d0349df2d92bc4962f1c824c4cee09d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1NjRhMDQzZDAzNDlkZjJkOTJiYzQ5NjJmMWM4MjRjNGNlZTA5ZDA=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-31T14:53:18Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-31T14:53:18Z"}, "message": "Fix some warnings", "tree": {"sha": "88fe58476228d2cab7358e60fc26ef98a003f0b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88fe58476228d2cab7358e60fc26ef98a003f0b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7564a043d0349df2d92bc4962f1c824c4cee09d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7564a043d0349df2d92bc4962f1c824c4cee09d0", "html_url": "https://github.com/rust-lang/rust/commit/7564a043d0349df2d92bc4962f1c824c4cee09d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7564a043d0349df2d92bc4962f1c824c4cee09d0/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e6d533af2f2210a65fdddcb0cb1fdfad2d9391f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e6d533af2f2210a65fdddcb0cb1fdfad2d9391f", "html_url": "https://github.com/rust-lang/rust/commit/7e6d533af2f2210a65fdddcb0cb1fdfad2d9391f"}], "stats": {"total": 26, "additions": 11, "deletions": 15}, "files": [{"sha": "5b3deb52baade4cb2471b95a59a4547e9c32a541", "filename": "src/intrinsics/llvm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7564a043d0349df2d92bc4962f1c824c4cee09d0/src%2Fintrinsics%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7564a043d0349df2d92bc4962f1c824c4cee09d0/src%2Fintrinsics%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fllvm.rs?ref=7564a043d0349df2d92bc4962f1c824c4cee09d0", "patch": "@@ -86,7 +86,7 @@ pub fn codegen_llvm_intrinsic_call<'tcx>(\n                 kind => unreachable!(\"kind {:?}\", kind),\n             };\n \n-            simd_pair_for_each_lane(fx, intrinsic, x, y, ret, |fx, lane_layout, res_lane_layout, x_lane, y_lane| {\n+            simd_pair_for_each_lane(fx, x, y, ret, |fx, lane_layout, res_lane_layout, x_lane, y_lane| {\n                 let res_lane = match lane_layout.ty.kind {\n                     ty::Float(_) => fx.bcx.ins().fcmp(flt_cc, x_lane, y_lane),\n                     _ => unreachable!(\"{:?}\", lane_layout.ty),"}, {"sha": "e17c38a8ef7941b79d07254b179b586c3b948e5a", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7564a043d0349df2d92bc4962f1c824c4cee09d0/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7564a043d0349df2d92bc4962f1c824c4cee09d0/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=7564a043d0349df2d92bc4962f1c824c4cee09d0", "patch": "@@ -145,7 +145,6 @@ pub fn lane_type_and_count<'tcx>(\n \n fn simd_for_each_lane<'tcx, B: Backend>(\n     fx: &mut FunctionCx<'_, 'tcx, B>,\n-    intrinsic: &str,\n     val: CValue<'tcx>,\n     ret: CPlace<'tcx>,\n     f: impl Fn(\n@@ -173,7 +172,6 @@ fn simd_for_each_lane<'tcx, B: Backend>(\n \n fn simd_pair_for_each_lane<'tcx, B: Backend>(\n     fx: &mut FunctionCx<'_, 'tcx, B>,\n-    intrinsic: &str,\n     x: CValue<'tcx>,\n     y: CValue<'tcx>,\n     ret: CPlace<'tcx>,\n@@ -231,10 +229,9 @@ fn bool_to_zero_or_max_uint<'tcx>(\n }\n \n macro simd_cmp {\n-    ($fx:expr, $intrinsic:expr, $cc:ident($x:ident, $y:ident) -> $ret:ident) => {\n+    ($fx:expr, $cc:ident($x:ident, $y:ident) -> $ret:ident) => {\n         simd_pair_for_each_lane(\n             $fx,\n-            $intrinsic,\n             $x,\n             $y,\n             $ret,\n@@ -247,10 +244,9 @@ macro simd_cmp {\n             },\n         );\n     },\n-    ($fx:expr, $intrinsic:expr, $cc_u:ident|$cc_s:ident($x:ident, $y:ident) -> $ret:ident) => {\n+    ($fx:expr, $cc_u:ident|$cc_s:ident($x:ident, $y:ident) -> $ret:ident) => {\n         simd_pair_for_each_lane(\n             $fx,\n-            $intrinsic,\n             $x,\n             $y,\n             $ret,"}, {"sha": "17b6f230c88ad8683999e35a3a2ea1e1db9ffe93", "filename": "src/intrinsics/simd.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7564a043d0349df2d92bc4962f1c824c4cee09d0/src%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7564a043d0349df2d92bc4962f1c824c4cee09d0/src%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fsimd.rs?ref=7564a043d0349df2d92bc4962f1c824c4cee09d0", "patch": "@@ -21,7 +21,7 @@ pub fn codegen_simd_intrinsic_call<'tcx>(\n         };\n \n         simd_cast, (c a) {\n-            simd_for_each_lane(fx, intrinsic, a, ret, |fx, lane_layout, ret_lane_layout, lane| {\n+            simd_for_each_lane(fx, a, ret, |fx, lane_layout, ret_lane_layout, lane| {\n                 let ret_lane_ty = fx.clif_type(ret_lane_layout.ty).unwrap();\n \n                 let from_signed = type_sign(lane_layout.ty);\n@@ -33,22 +33,22 @@ pub fn codegen_simd_intrinsic_call<'tcx>(\n         };\n \n         simd_eq, (c x, c y) {\n-            simd_cmp!(fx, intrinsic, Equal(x, y) -> ret);\n+            simd_cmp!(fx, Equal(x, y) -> ret);\n         };\n         simd_ne, (c x, c y) {\n-            simd_cmp!(fx, intrinsic, NotEqual(x, y) -> ret);\n+            simd_cmp!(fx, NotEqual(x, y) -> ret);\n         };\n         simd_lt, (c x, c y) {\n-            simd_cmp!(fx, intrinsic, UnsignedLessThan|SignedLessThan(x, y) -> ret);\n+            simd_cmp!(fx, UnsignedLessThan|SignedLessThan(x, y) -> ret);\n         };\n         simd_le, (c x, c y) {\n-            simd_cmp!(fx, intrinsic, UnsignedLessThanOrEqual|SignedLessThanOrEqual(x, y) -> ret);\n+            simd_cmp!(fx, UnsignedLessThanOrEqual|SignedLessThanOrEqual(x, y) -> ret);\n         };\n         simd_gt, (c x, c y) {\n-            simd_cmp!(fx, intrinsic, UnsignedGreaterThan|SignedGreaterThan(x, y) -> ret);\n+            simd_cmp!(fx, UnsignedGreaterThan|SignedGreaterThan(x, y) -> ret);\n         };\n         simd_ge, (c x, c y) {\n-            simd_cmp!(fx, intrinsic, UnsignedGreaterThanOrEqual|SignedGreaterThanOrEqual(x, y) -> ret);\n+            simd_cmp!(fx, UnsignedGreaterThanOrEqual|SignedGreaterThanOrEqual(x, y) -> ret);\n         };\n \n         // simd_shuffle32<T, U>(x: T, y: T, idx: [u32; 32]) -> U"}, {"sha": "39eb7d247074425495721f533ae941dbca15df0e", "filename": "src/value_and_place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7564a043d0349df2d92bc4962f1c824c4cee09d0/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7564a043d0349df2d92bc4962f1c824c4cee09d0/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=7564a043d0349df2d92bc4962f1c824c4cee09d0", "patch": "@@ -479,7 +479,7 @@ impl<'tcx> CPlace<'tcx> {\n             CValueInner::ByVal(val) => {\n                 to_ptr.store(fx, val, MemFlags::new());\n             }\n-            CValueInner::ByValPair(value, extra) => {\n+            CValueInner::ByValPair(_, _) => {\n                 bug!(\n                     \"Non ScalarPair abi {:?} for ByValPair CValue\",\n                     dst_layout.abi"}]}