{"sha": "8172ada984b4fa18967f08ce8651f8a8ae817400", "node_id": "C_kwDOAAsO6NoAKDgxNzJhZGE5ODRiNGZhMTg5NjdmMDhjZTg2NTFmOGE4YWU4MTc0MDA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-05-06T11:30:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-06T11:30:04Z"}, "message": "Rollup merge of #110985 - Amanieu:normalize_asm_spans, r=b-naber\n\nFix spans in LLVM-generated inline asm errors\n\nPreviously, incorrect spans were reported if inline assembly contained CRLF (Windows) line endings.\n\nFixes #110885", "tree": {"sha": "14c4d790371c227098381df1f875737ae9a8a2fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14c4d790371c227098381df1f875737ae9a8a2fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8172ada984b4fa18967f08ce8651f8a8ae817400", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkVjo8CRBK7hj4Ov3rIwAAe5AIAEgYYXXLzqR7vwGSBJ1yE9GQ\nFubNweW5dOUHIMbnVqkpuJbOD6aL1os6vmprOT/HMFrRLJduxBMXyKBERDiKDcOV\n9P/ihZd3/7kXECYQGMCNu2FB/QtZ/Xn/5bao7fyQOX8eKITpdlClwNbc0uaxgx4Z\nH9bZuGo7L43Nar4Y9UQYyKswvU9kk467mngD7vuoIa+phtRZAz0EPTY+pup8xjjE\nXRIyKWJDHpFaso9g7KkRVXuwPsj7lSM4nzeaeVg7FDJ3ofiYC8/8dDoAGokNISqj\nenrpYuqssSbqr7DU2t2WI50awgRC8Iq8ZrC9WmRZ3RPcgNaa6SAuUeQ4PRl1auU=\n=7dwg\n-----END PGP SIGNATURE-----\n", "payload": "tree 14c4d790371c227098381df1f875737ae9a8a2fb\nparent 77004eafeaf8f579fdcd9a746ee59274a83b8ad7\nparent bba2a1e07179c59b422e60411813446606b1b7f3\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1683372604 +0200\ncommitter GitHub <noreply@github.com> 1683372604 +0200\n\nRollup merge of #110985 - Amanieu:normalize_asm_spans, r=b-naber\n\nFix spans in LLVM-generated inline asm errors\n\nPreviously, incorrect spans were reported if inline assembly contained CRLF (Windows) line endings.\n\nFixes #110885\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8172ada984b4fa18967f08ce8651f8a8ae817400", "html_url": "https://github.com/rust-lang/rust/commit/8172ada984b4fa18967f08ce8651f8a8ae817400", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8172ada984b4fa18967f08ce8651f8a8ae817400/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77004eafeaf8f579fdcd9a746ee59274a83b8ad7", "url": "https://api.github.com/repos/rust-lang/rust/commits/77004eafeaf8f579fdcd9a746ee59274a83b8ad7", "html_url": "https://github.com/rust-lang/rust/commit/77004eafeaf8f579fdcd9a746ee59274a83b8ad7"}, {"sha": "bba2a1e07179c59b422e60411813446606b1b7f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/bba2a1e07179c59b422e60411813446606b1b7f3", "html_url": "https://github.com/rust-lang/rust/commit/bba2a1e07179c59b422e60411813446606b1b7f3"}], "stats": {"total": 34, "additions": 31, "deletions": 3}, "files": [{"sha": "c323372bda42d98206a4a7c1c74d9c12c95cafe3", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8172ada984b4fa18967f08ce8651f8a8ae817400/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8172ada984b4fa18967f08ce8651f8a8ae817400/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=8172ada984b4fa18967f08ce8651f8a8ae817400", "patch": "@@ -1821,9 +1821,15 @@ impl SharedEmitterMain {\n                         let source = sess\n                             .source_map()\n                             .new_source_file(FileName::inline_asm_source_code(&buffer), buffer);\n-                        let source_span = Span::with_root_ctxt(source.start_pos, source.end_pos);\n-                        let spans: Vec<_> =\n-                            spans.iter().map(|sp| source_span.from_inner(*sp)).collect();\n+                        let spans: Vec<_> = spans\n+                            .iter()\n+                            .map(|sp| {\n+                                Span::with_root_ctxt(\n+                                    source.normalized_byte_pos(sp.start as u32),\n+                                    source.normalized_byte_pos(sp.end as u32),\n+                                )\n+                            })\n+                            .collect();\n                         err.span_note(spans, \"instantiated into assembly here\");\n                     }\n "}, {"sha": "7bbab34c69a383d83010232751ff14a05aabd872", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8172ada984b4fa18967f08ce8651f8a8ae817400/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8172ada984b4fa18967f08ce8651f8a8ae817400/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=8172ada984b4fa18967f08ce8651f8a8ae817400", "patch": "@@ -1744,6 +1744,28 @@ impl SourceFile {\n         BytePos::from_u32(pos.0 - self.start_pos.0 + diff)\n     }\n \n+    /// Calculates a normalized byte position from a byte offset relative to the\n+    /// start of the file.\n+    ///\n+    /// When we get an inline assembler error from LLVM during codegen, we\n+    /// import the expanded assembly code as a new `SourceFile`, which can then\n+    /// be used for error reporting with spans. However the byte offsets given\n+    /// to us by LLVM are relative to the start of the original buffer, not the\n+    /// normalized one. Hence we need to convert those offsets to the normalized\n+    /// form when constructing spans.\n+    pub fn normalized_byte_pos(&self, offset: u32) -> BytePos {\n+        let diff = match self\n+            .normalized_pos\n+            .binary_search_by(|np| (np.pos.0 + np.diff).cmp(&(self.start_pos.0 + offset)))\n+        {\n+            Ok(i) => self.normalized_pos[i].diff,\n+            Err(i) if i == 0 => 0,\n+            Err(i) => self.normalized_pos[i - 1].diff,\n+        };\n+\n+        BytePos::from_u32(self.start_pos.0 + offset - diff)\n+    }\n+\n     /// Converts an absolute `BytePos` to a `CharPos` relative to the `SourceFile`.\n     pub fn bytepos_to_file_charpos(&self, bpos: BytePos) -> CharPos {\n         // The number of extra bytes due to multibyte chars in the `SourceFile`."}]}