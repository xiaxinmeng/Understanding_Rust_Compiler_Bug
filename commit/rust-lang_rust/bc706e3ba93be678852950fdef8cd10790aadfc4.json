{"sha": "bc706e3ba93be678852950fdef8cd10790aadfc4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjNzA2ZTNiYTkzYmU2Nzg4NTI5NTBmZGVmOGNkMTA3OTBhYWRmYzQ=", "commit": {"author": {"name": "Krishna Sai Veera Reddy", "email": "veerareddy@email.arizona.edu", "date": "2020-02-23T04:29:22Z"}, "committer": {"name": "Krishna Sai Veera Reddy", "email": "veerareddy@email.arizona.edu", "date": "2020-02-24T06:20:34Z"}, "message": "Fix `powi` suggestion and add general improvements", "tree": {"sha": "134b2b5c16b4521caa4d123835ebe49282716803", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/134b2b5c16b4521caa4d123835ebe49282716803"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc706e3ba93be678852950fdef8cd10790aadfc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc706e3ba93be678852950fdef8cd10790aadfc4", "html_url": "https://github.com/rust-lang/rust/commit/bc706e3ba93be678852950fdef8cd10790aadfc4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc706e3ba93be678852950fdef8cd10790aadfc4/comments", "author": {"login": "krishna-veerareddy", "id": 41484652, "node_id": "MDQ6VXNlcjQxNDg0NjUy", "avatar_url": "https://avatars.githubusercontent.com/u/41484652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krishna-veerareddy", "html_url": "https://github.com/krishna-veerareddy", "followers_url": "https://api.github.com/users/krishna-veerareddy/followers", "following_url": "https://api.github.com/users/krishna-veerareddy/following{/other_user}", "gists_url": "https://api.github.com/users/krishna-veerareddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/krishna-veerareddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krishna-veerareddy/subscriptions", "organizations_url": "https://api.github.com/users/krishna-veerareddy/orgs", "repos_url": "https://api.github.com/users/krishna-veerareddy/repos", "events_url": "https://api.github.com/users/krishna-veerareddy/events{/privacy}", "received_events_url": "https://api.github.com/users/krishna-veerareddy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "krishna-veerareddy", "id": 41484652, "node_id": "MDQ6VXNlcjQxNDg0NjUy", "avatar_url": "https://avatars.githubusercontent.com/u/41484652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krishna-veerareddy", "html_url": "https://github.com/krishna-veerareddy", "followers_url": "https://api.github.com/users/krishna-veerareddy/followers", "following_url": "https://api.github.com/users/krishna-veerareddy/following{/other_user}", "gists_url": "https://api.github.com/users/krishna-veerareddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/krishna-veerareddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krishna-veerareddy/subscriptions", "organizations_url": "https://api.github.com/users/krishna-veerareddy/orgs", "repos_url": "https://api.github.com/users/krishna-veerareddy/repos", "events_url": "https://api.github.com/users/krishna-veerareddy/events{/privacy}", "received_events_url": "https://api.github.com/users/krishna-veerareddy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6dacb1aa678046940d3fae7a68bd0112accecfd4", "url": "https://api.github.com/repos/rust-lang/rust/commits/6dacb1aa678046940d3fae7a68bd0112accecfd4", "html_url": "https://github.com/rust-lang/rust/commit/6dacb1aa678046940d3fae7a68bd0112accecfd4"}], "stats": {"total": 72, "additions": 34, "deletions": 38}, "files": [{"sha": "d342afbc12a4aba39f4b4b5cdcf1a26758acce45", "filename": "clippy_lints/src/floating_point_arithmetic.rs", "status": "modified", "additions": 34, "deletions": 38, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/bc706e3ba93be678852950fdef8cd10790aadfc4/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc706e3ba93be678852950fdef8cd10790aadfc4/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs?ref=bc706e3ba93be678852950fdef8cd10790aadfc4", "patch": "@@ -11,7 +11,7 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use std::f32::consts as f32_consts;\n use std::f64::consts as f64_consts;\n-use sugg::Sugg;\n+use sugg::{format_numeric_literal, Sugg};\n use syntax::ast;\n \n declare_clippy_lint! {\n@@ -159,23 +159,23 @@ fn check_ln1p(cx: &LateContext<'_, '_>, expr: &Expr<'_>, args: &[Expr<'_>]) {\n     }\n }\n \n-// Returns an integer if the float constant is a whole number and it\n-// can be converted to an integer without loss\n-// TODO: Add a better check to determine whether the float can be\n-// casted without loss\n+// Returns an integer if the float constant is a whole number and it can be\n+// converted to an integer without loss of precision. For now we only check\n+// ranges [-16777215, 16777216) for type f32 as whole number floats outside\n+// this range are lossy and ambiguous.\n #[allow(clippy::cast_possible_truncation)]\n-fn get_integer_from_float_constant(value: &Constant) -> Option<i64> {\n+fn get_integer_from_float_constant(value: &Constant) -> Option<i32> {\n     match value {\n-        F32(num) if (num.trunc() - num).abs() <= std::f32::EPSILON => {\n-            if *num > -16_777_217.0 && *num < 16_777_217.0 {\n-                Some(num.round() as i64)\n+        F32(num) if num.fract() == 0.0 => {\n+            if (-16_777_215.0..16_777_216.0).contains(num) {\n+                Some(num.round() as i32)\n             } else {\n                 None\n             }\n         },\n-        F64(num) if (num.trunc() - num).abs() <= std::f64::EPSILON => {\n-            if *num > -9_007_199_254_740_993.0 && *num < 9_007_199_254_740_993.0 {\n-                Some(num.round() as i64)\n+        F64(num) if num.fract() == 0.0 => {\n+            if (-2_147_483_648.0..2_147_483_648.0).contains(num) {\n+                Some(num.round() as i32)\n             } else {\n                 None\n             }\n@@ -187,15 +187,13 @@ fn get_integer_from_float_constant(value: &Constant) -> Option<i64> {\n fn check_powf(cx: &LateContext<'_, '_>, expr: &Expr<'_>, args: &[Expr<'_>]) {\n     // Check receiver\n     if let Some((value, _)) = constant(cx, cx.tables, &args[0]) {\n-        let method;\n-\n-        if F32(f32_consts::E) == value || F64(f64_consts::E) == value {\n-            method = \"exp\";\n+        let method = if F32(f32_consts::E) == value || F64(f64_consts::E) == value {\n+            \"exp\"\n         } else if F32(2.0) == value || F64(2.0) == value {\n-            method = \"exp2\";\n+            \"exp2\"\n         } else {\n             return;\n-        }\n+        };\n \n         span_lint_and_sugg(\n             cx,\n@@ -210,38 +208,36 @@ fn check_powf(cx: &LateContext<'_, '_>, expr: &Expr<'_>, args: &[Expr<'_>]) {\n \n     // Check argument\n     if let Some((value, _)) = constant(cx, cx.tables, &args[1]) {\n-        let help;\n-        let method;\n-\n-        if F32(1.0 / 2.0) == value || F64(1.0 / 2.0) == value {\n-            help = \"square-root of a number can be computed more efficiently and accurately\";\n-            method = \"sqrt\";\n+        let (help, suggestion) = if F32(1.0 / 2.0) == value || F64(1.0 / 2.0) == value {\n+            (\n+                \"square-root of a number can be computed more efficiently and accurately\",\n+                format!(\"{}.sqrt()\", Sugg::hir(cx, &args[0], \"..\"))\n+            )\n         } else if F32(1.0 / 3.0) == value || F64(1.0 / 3.0) == value {\n-            help = \"cube-root of a number can be computed more accurately\";\n-            method = \"cbrt\";\n+            (\n+                \"cube-root of a number can be computed more accurately\",\n+                format!(\"{}.cbrt()\", Sugg::hir(cx, &args[0], \"..\"))\n+            )\n         } else if let Some(exponent) = get_integer_from_float_constant(&value) {\n-            span_lint_and_sugg(\n-                cx,\n-                SUBOPTIMAL_FLOPS,\n-                expr.span,\n+            (\n                 \"exponentiation with integer powers can be computed more efficiently\",\n-                \"consider using\",\n-                format!(\"{}.powi({})\", Sugg::hir(cx, &args[0], \"..\"), exponent),\n-                Applicability::MachineApplicable,\n-            );\n-\n-            return;\n+                format!(\n+                    \"{}.powi({})\",\n+                    Sugg::hir(cx, &args[0], \"..\"),\n+                    format_numeric_literal(&exponent.to_string(), None, false)\n+                )\n+            )\n         } else {\n             return;\n-        }\n+        };\n \n         span_lint_and_sugg(\n             cx,\n             SUBOPTIMAL_FLOPS,\n             expr.span,\n             help,\n             \"consider using\",\n-            format!(\"{}.{}()\", Sugg::hir(cx, &args[0], \"..\"), method),\n+            suggestion,\n             Applicability::MachineApplicable,\n         );\n     }"}]}