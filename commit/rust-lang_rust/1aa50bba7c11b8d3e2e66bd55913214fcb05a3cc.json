{"sha": "1aa50bba7c11b8d3e2e66bd55913214fcb05a3cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhYTUwYmJhN2MxMWI4ZDNlMmU2NmJkNTU5MTMyMTRmY2IwNWEzY2M=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-08-20T21:58:59Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-08-21T01:51:39Z"}, "message": "Add unwrap for std::arc ARC variants", "tree": {"sha": "c08bb565cdda5915aa9b8afed4563068ecb14bb4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c08bb565cdda5915aa9b8afed4563068ecb14bb4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1aa50bba7c11b8d3e2e66bd55913214fcb05a3cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1aa50bba7c11b8d3e2e66bd55913214fcb05a3cc", "html_url": "https://github.com/rust-lang/rust/commit/1aa50bba7c11b8d3e2e66bd55913214fcb05a3cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1aa50bba7c11b8d3e2e66bd55913214fcb05a3cc/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05accaa16787285560c6ddb1afe9dec45726a7f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/05accaa16787285560c6ddb1afe9dec45726a7f4", "html_url": "https://github.com/rust-lang/rust/commit/05accaa16787285560c6ddb1afe9dec45726a7f4"}], "stats": {"total": 50, "additions": 48, "deletions": 2}, "files": [{"sha": "86347c7d3a6524a1fc9ff1ee982faf6534ab9691", "filename": "src/libstd/arc.rs", "status": "modified", "additions": 48, "deletions": 2, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/1aa50bba7c11b8d3e2e66bd55913214fcb05a3cc/src%2Flibstd%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aa50bba7c11b8d3e2e66bd55913214fcb05a3cc/src%2Flibstd%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farc.rs?ref=1aa50bba7c11b8d3e2e66bd55913214fcb05a3cc", "patch": "@@ -6,8 +6,8 @@\n  * between tasks.\n  */\n \n-import unsafe::{SharedMutableState,\n-                shared_mutable_state, clone_shared_mutable_state,\n+import unsafe::{SharedMutableState, shared_mutable_state,\n+                clone_shared_mutable_state, unwrap_shared_mutable_state,\n                 get_shared_mutable_state, get_shared_immutable_state};\n import sync;\n import sync::{mutex, mutex_with_condvars, rwlock, rwlock_with_condvars};\n@@ -93,6 +93,12 @@ fn clone<T: const send>(rc: &arc<T>) -> arc<T> {\n     arc { x: unsafe { clone_shared_mutable_state(&rc.x) } }\n }\n \n+#[cfg(stage1)]\n+fn unwrap<T: const send>(+rc: arc<T>) -> T {\n+    let arc { x: x } = rc;\n+    unsafe { unwrap_shared_mutable_state(x) }\n+}\n+\n /****************************************************************************\n  * Mutex protected ARC (unsafe)\n  ****************************************************************************/\n@@ -181,6 +187,18 @@ impl<T: send> &mutex_arc<T> {\n     }\n }\n \n+// FIXME(#2585) make this a by-move method on the arc\n+#[cfg(stage1)]\n+fn unwrap_mutex_arc<T: send>(+arc: mutex_arc<T>) -> T {\n+    let mutex_arc { x: x } = arc;\n+    let inner = unsafe { unwrap_shared_mutable_state(x) };\n+    let mutex_arc_inner { failed: failed, data: data, _ } = inner;\n+    if failed {\n+        fail ~\"Can't unwrap poisoned mutex_arc - another task failed inside!\"\n+    }\n+    data\n+}\n+\n // Common code for {mutex.access,rwlock.write}{,_cond}.\n #[inline(always)]\n #[doc(hidden)]\n@@ -347,6 +365,18 @@ impl<T: const send> &rw_arc<T> {\n     }\n }\n \n+// FIXME(#2585) make this a by-move method on the arc\n+#[cfg(stage1)]\n+fn unwrap_rw_arc<T: const send>(+arc: rw_arc<T>) -> T {\n+    let rw_arc { x: x, _ } = arc;\n+    let inner = unsafe { unwrap_shared_mutable_state(x) };\n+    let rw_arc_inner { failed: failed, data: data, _ } = inner;\n+    if failed {\n+        fail ~\"Can't unwrap poisoned rw_arc - another task failed inside!\"\n+    }\n+    data\n+}\n+\n // Borrowck rightly complains about immutably aliasing the rwlock in order to\n // lock it. This wraps the unsafety, with the justification that the 'lock'\n // field is never overwritten; only 'failed' and 'data'.\n@@ -497,6 +527,22 @@ mod tests {\n         }\n     }\n     #[test] #[should_fail] #[ignore(cfg(windows))]\n+    #[cfg(stage1)]\n+    fn test_mutex_arc_unwrap_poison() {\n+        let arc = mutex_arc(1);\n+        let arc2 = ~(&arc).clone();\n+        let (c,p) = pipes::stream();\n+        do task::spawn {\n+            do arc2.access |one| {\n+                c.send(());\n+                assert *one == 2;\n+            }\n+        }\n+        let _ = p.recv();\n+        let one = unwrap_mutex_arc(arc);\n+        assert one == 1;\n+    }\n+    #[test] #[should_fail] #[ignore(cfg(windows))]\n     fn test_rw_arc_poison_wr() {\n         let arc = ~rw_arc(1);\n         let arc2 = ~arc.clone();"}]}