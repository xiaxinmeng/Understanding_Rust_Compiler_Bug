{"sha": "b637f6b1bdee12e0cf18bd8fefbebe058518726f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2MzdmNmIxYmRlZTEyZTBjZjE4YmQ4ZmVmYmViZTA1ODUxODcyNmY=", "commit": {"author": {"name": "Nick Hamann", "email": "nick@wabbo.org", "date": "2015-06-18T00:41:55Z"}, "committer": {"name": "Nick Hamann", "email": "nick@wabbo.org", "date": "2015-06-18T00:41:55Z"}, "message": "Fix the E0252 error message to use better names for things.\n\nCurrently in the E0252 message, traits and modules are all called types\n(as in \"a type named `Foo` has already been imported\", even when `Foo` was\na trait or module). This commit changes that to additionally detect when\nthe import in question is a trait or module and report it accordingly.\n\nFixes #25396.", "tree": {"sha": "50f209a5594164a7e3f4f19709ff87afd8a3f10c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50f209a5594164a7e3f4f19709ff87afd8a3f10c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b637f6b1bdee12e0cf18bd8fefbebe058518726f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b637f6b1bdee12e0cf18bd8fefbebe058518726f", "html_url": "https://github.com/rust-lang/rust/commit/b637f6b1bdee12e0cf18bd8fefbebe058518726f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b637f6b1bdee12e0cf18bd8fefbebe058518726f/comments", "author": null, "committer": null, "parents": [{"sha": "0250ff9a5f1347f3177516e178fd8382d48169c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/0250ff9a5f1347f3177516e178fd8382d48169c7", "html_url": "https://github.com/rust-lang/rust/commit/0250ff9a5f1347f3177516e178fd8382d48169c7"}], "stats": {"total": 52, "additions": 51, "deletions": 1}, "files": [{"sha": "57d0c98d50e995e1ce948b0f4a6019e61fb462be", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b637f6b1bdee12e0cf18bd8fefbebe058518726f/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b637f6b1bdee12e0cf18bd8fefbebe058518726f/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=b637f6b1bdee12e0cf18bd8fefbebe058518726f", "patch": "@@ -12,6 +12,7 @@ use self::ImportDirectiveSubclass::*;\n \n use DefModifiers;\n use Module;\n+use ModuleKind;\n use Namespace::{self, TypeNS, ValueNS};\n use NameBindings;\n use NamespaceResult::{BoundResult, UnboundResult, UnknownResult};\n@@ -899,7 +900,19 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n         match target {\n             Some(ref target) if target.shadowable != Shadowable::Always => {\n                 let ns_word = match namespace {\n-                    TypeNS => \"type\",\n+                    TypeNS => {\n+                        if let Some(ref ty_def) = *target.bindings.type_def.borrow() {\n+                            match ty_def.module_def {\n+                                Some(ref module)\n+                                    if module.kind.get() == ModuleKind::NormalModuleKind =>\n+                                        \"module\",\n+                                Some(ref module)\n+                                    if module.kind.get() == ModuleKind::TraitModuleKind =>\n+                                        \"trait\",\n+                                _ => \"type\",\n+                            }\n+                        } else { \"type\" }\n+                    },\n                     ValueNS => \"value\",\n                 };\n                 span_err!(self.resolver.session, import_span, E0252,"}, {"sha": "3ada57c9993054286725fc8475e254330bd064d8", "filename": "src/test/compile-fail/issue-25396.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/b637f6b1bdee12e0cf18bd8fefbebe058518726f/src%2Ftest%2Fcompile-fail%2Fissue-25396.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b637f6b1bdee12e0cf18bd8fefbebe058518726f/src%2Ftest%2Fcompile-fail%2Fissue-25396.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-25396.rs?ref=b637f6b1bdee12e0cf18bd8fefbebe058518726f", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use foo::baz;\n+use bar::baz; //~ ERROR a module named `baz` has already been imported\n+\n+use foo::Quux;\n+use bar::Quux; //~ ERROR a trait named `Quux` has already been imported\n+\n+use foo::blah;\n+use bar::blah; //~ ERROR a type named `blah` has already been imported\n+\n+use foo::WOMP;\n+use bar::WOMP; //~ ERROR a value named `WOMP` has already been imported\n+\n+fn main() {}\n+\n+mod foo {\n+    pub mod baz {}\n+    pub trait Quux { }\n+    pub type blah = (f64, u32);\n+    pub const WOMP: u8 = 5;\n+}\n+\n+mod bar {\n+    pub mod baz {}\n+    pub type Quux = i32;\n+    struct blah { x: i8 }\n+    pub const WOMP: i8 = -5;\n+}"}]}