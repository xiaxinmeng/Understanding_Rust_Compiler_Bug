{"sha": "2e587df6e2215b9dd053879d2ad42044781fc1c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlNTg3ZGY2ZTIyMTViOWRkMDUzODc5ZDJhZDQyMDQ0NzgxZmMxYzQ=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-08-17T13:25:46Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-08-31T13:22:52Z"}, "message": "Provide a way of accessing the ThinLTO module import map in rustc.", "tree": {"sha": "b392d58c0e4d22b806476f0d87c524b30861e45e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b392d58c0e4d22b806476f0d87c524b30861e45e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e587df6e2215b9dd053879d2ad42044781fc1c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e587df6e2215b9dd053879d2ad42044781fc1c4", "html_url": "https://github.com/rust-lang/rust/commit/2e587df6e2215b9dd053879d2ad42044781fc1c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e587df6e2215b9dd053879d2ad42044781fc1c4/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1114ab684fbad001c4e580326d8eb4d8c4e917d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/1114ab684fbad001c4e580326d8eb4d8c4e917d3", "html_url": "https://github.com/rust-lang/rust/commit/1114ab684fbad001c4e580326d8eb4d8c4e917d3"}], "stats": {"total": 36, "additions": 36, "deletions": 0}, "files": [{"sha": "6c2601bf1ef1255ec229b6533da9b8290bbd55dc", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2e587df6e2215b9dd053879d2ad42044781fc1c4/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e587df6e2215b9dd053879d2ad42044781fc1c4/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=2e587df6e2215b9dd053879d2ad42044781fc1c4", "patch": "@@ -363,6 +363,10 @@ extern { pub type ThinLTOData; }\n /// LLVMRustThinLTOBuffer\n extern { pub type ThinLTOBuffer; }\n \n+// LLVMRustModuleNameCallback\n+pub type ThinLTOModuleNameCallback =\n+    unsafe extern \"C\" fn(*mut c_void, *const c_char, *const c_char);\n+\n /// LLVMRustThinLTOModule\n #[repr(C)]\n pub struct ThinLTOModule {\n@@ -1622,6 +1626,11 @@ extern \"C\" {\n         Data: &ThinLTOData,\n         Module: &Module,\n     ) -> bool;\n+    pub fn LLVMRustGetThinLTOModuleImports(\n+        Data: *const ThinLTOData,\n+        ModuleNameCallback: ThinLTOModuleNameCallback,\n+        CallbackPayload: *mut c_void,\n+    );\n     pub fn LLVMRustFreeThinLTOData(Data: &'static mut ThinLTOData);\n     pub fn LLVMRustParseBitcodeForThinLTO(\n         Context: &Context,"}, {"sha": "5c4bb61781ed1367b99cdb91ba42275336a01dd5", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2e587df6e2215b9dd053879d2ad42044781fc1c4/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/2e587df6e2215b9dd053879d2ad42044781fc1c4/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=2e587df6e2215b9dd053879d2ad42044781fc1c4", "patch": "@@ -1123,6 +1123,28 @@ LLVMRustPrepareThinLTOImport(const LLVMRustThinLTOData *Data, LLVMModuleRef M) {\n   return true;\n }\n \n+extern \"C\" typedef void (*LLVMRustModuleNameCallback)(void*, // payload\n+                                                      const char*, // importing module name\n+                                                      const char*); // imported module name\n+\n+// Calls `module_name_callback` for each module import done by ThinLTO.\n+// The callback is provided with regular null-terminated C strings.\n+extern \"C\" void\n+LLVMRustGetThinLTOModuleImports(const LLVMRustThinLTOData *data,\n+                                LLVMRustModuleNameCallback module_name_callback,\n+                                void* callback_payload) {\n+  for (const auto& importing_module : data->ImportLists) {\n+    const std::string importing_module_id = importing_module.getKey().str();\n+    const auto& imports = importing_module.getValue();\n+    for (const auto& imported_module : imports) {\n+      const std::string imported_module_id = imported_module.getKey().str();\n+      module_name_callback(callback_payload,\n+                           importing_module_id.c_str(),\n+                           imported_module_id.c_str());\n+    }\n+  }\n+}\n+\n // This struct and various functions are sort of a hack right now, but the\n // problem is that we've got in-memory LLVM modules after we generate and\n // optimize all codegen-units for one compilation in rustc. To be compatible\n@@ -1288,6 +1310,11 @@ LLVMRustPrepareThinLTOImport(const LLVMRustThinLTOData *Data, LLVMModuleRef M) {\n   report_fatal_error(\"ThinLTO not available\");\n }\n \n+extern \"C\" LLVMRustThinLTOModuleImports\n+LLVMRustGetLLVMRustThinLTOModuleImports(const LLVMRustThinLTOData *Data) {\n+  report_fatal_error(\"ThinLTO not available\");\n+}\n+\n extern \"C\" void\n LLVMRustFreeThinLTOData(LLVMRustThinLTOData *Data) {\n   report_fatal_error(\"ThinLTO not available\");"}]}