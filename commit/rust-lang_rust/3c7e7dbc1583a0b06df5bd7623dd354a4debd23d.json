{"sha": "3c7e7dbc1583a0b06df5bd7623dd354a4debd23d", "node_id": "C_kwDOAAsO6NoAKDNjN2U3ZGJjMTU4M2EwYjA2ZGY1YmQ3NjIzZGQzNTRhNGRlYmQyM2Q", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-28T16:56:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-28T16:56:38Z"}, "message": "Auto merge of #9257 - flip1995:rustup, r=flip1995\n\nRustup\n\nr? `@ghost`\n\nchangelog: none", "tree": {"sha": "b959bc8f83c4b7cf22ca7e20d5332794d3cf7484", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b959bc8f83c4b7cf22ca7e20d5332794d3cf7484"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c7e7dbc1583a0b06df5bd7623dd354a4debd23d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c7e7dbc1583a0b06df5bd7623dd354a4debd23d", "html_url": "https://github.com/rust-lang/rust/commit/3c7e7dbc1583a0b06df5bd7623dd354a4debd23d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c7e7dbc1583a0b06df5bd7623dd354a4debd23d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70bca2988b30e4c9b694562dd035912c81916820", "url": "https://api.github.com/repos/rust-lang/rust/commits/70bca2988b30e4c9b694562dd035912c81916820", "html_url": "https://github.com/rust-lang/rust/commit/70bca2988b30e4c9b694562dd035912c81916820"}, {"sha": "510effce597f26abe4e4c1464fdf97c7df6bd9c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/510effce597f26abe4e4c1464fdf97c7df6bd9c8", "html_url": "https://github.com/rust-lang/rust/commit/510effce597f26abe4e4c1464fdf97c7df6bd9c8"}], "stats": {"total": 177, "additions": 89, "deletions": 88}, "files": [{"sha": "8a6bd1cbdf564b5bff3095f012adff97ce736884", "filename": "clippy_dev/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3c7e7dbc1583a0b06df5bd7623dd354a4debd23d/clippy_dev%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c7e7dbc1583a0b06df5bd7623dd354a4debd23d/clippy_dev%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flib.rs?ref=3c7e7dbc1583a0b06df5bd7623dd354a4debd23d", "patch": "@@ -1,4 +1,3 @@\n-#![feature(let_chains)]\n #![feature(let_else)]\n #![feature(once_cell)]\n #![feature(rustc_private)]"}, {"sha": "925a8cb8deed94ff792f3f4a7ce144ec5b2486c5", "filename": "clippy_lints/src/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c7e7dbc1583a0b06df5bd7623dd354a4debd23d/clippy_lints%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c7e7dbc1583a0b06df5bd7623dd354a4debd23d/clippy_lints%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat.rs?ref=3c7e7dbc1583a0b06df5bd7623dd354a4debd23d", "patch": "@@ -82,7 +82,7 @@ impl<'tcx> LateLintPass<'tcx> for UselessFormat {\n                 then {\n                     let is_new_string = match value.kind {\n                         ExprKind::Binary(..) => true,\n-                        ExprKind::MethodCall(path, ..) => path.ident.name.as_str() == \"to_string\",\n+                        ExprKind::MethodCall(path, ..) => path.ident.name == sym::to_string,\n                         _ => false,\n                     };\n                     let sugg = if is_new_string {"}, {"sha": "04b5be6c80ec6acf2727dfeaec769f0f71f43de0", "filename": "clippy_lints/src/format_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c7e7dbc1583a0b06df5bd7623dd354a4debd23d/clippy_lints%2Fsrc%2Fformat_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c7e7dbc1583a0b06df5bd7623dd354a4debd23d/clippy_lints%2Fsrc%2Fformat_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat_impl.rs?ref=3c7e7dbc1583a0b06df5bd7623dd354a4debd23d", "patch": "@@ -141,7 +141,7 @@ fn check_to_string_in_display(cx: &LateContext<'_>, expr: &Expr<'_>) {\n         // Get the hir_id of the object we are calling the method on\n         if let ExprKind::MethodCall(path, [ref self_arg, ..], _) = expr.kind;\n         // Is the method to_string() ?\n-        if path.ident.name == sym!(to_string);\n+        if path.ident.name == sym::to_string;\n         // Is the method a part of the ToString trait? (i.e. not to_string() implemented\n         // separately)\n         if let Some(expr_def_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);"}, {"sha": "17d867aacb533b3d483e25d16cf31d74b224684f", "filename": "clippy_lints/src/inherent_to_string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c7e7dbc1583a0b06df5bd7623dd354a4debd23d/clippy_lints%2Fsrc%2Finherent_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c7e7dbc1583a0b06df5bd7623dd354a4debd23d/clippy_lints%2Fsrc%2Finherent_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_to_string.rs?ref=3c7e7dbc1583a0b06df5bd7623dd354a4debd23d", "patch": "@@ -98,7 +98,7 @@ impl<'tcx> LateLintPass<'tcx> for InherentToString {\n         if_chain! {\n             // Check if item is a method, called to_string and has a parameter 'self'\n             if let ImplItemKind::Fn(ref signature, _) = impl_item.kind;\n-            if impl_item.ident.name.as_str() == \"to_string\";\n+            if impl_item.ident.name == sym::to_string;\n             let decl = &signature.decl;\n             if decl.implicit_self.has_implicit_self();\n             if decl.inputs.len() == 1;"}, {"sha": "197c415f2a954939dd1e0c2fd38f380b932ec7e9", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3c7e7dbc1583a0b06df5bd7623dd354a4debd23d/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c7e7dbc1583a0b06df5bd7623dd354a4debd23d/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=3c7e7dbc1583a0b06df5bd7623dd354a4debd23d", "patch": "@@ -4,7 +4,6 @@\n #![feature(control_flow_enum)]\n #![feature(drain_filter)]\n #![feature(iter_intersperse)]\n-#![feature(let_chains)]\n #![feature(let_else)]\n #![feature(lint_reasons)]\n #![feature(never_type)]"}, {"sha": "573a7c016b8e8c8c6d708fccb3ccd42c0f6f2792", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 47, "deletions": 35, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/3c7e7dbc1583a0b06df5bd7623dd354a4debd23d/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c7e7dbc1583a0b06df5bd7623dd354a4debd23d/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=3c7e7dbc1583a0b06df5bd7623dd354a4debd23d", "patch": "@@ -9,12 +9,14 @@ use rustc_hir::intravisit::{\n use rustc_hir::FnRetTy::Return;\n use rustc_hir::{\n     BareFnTy, BodyId, FnDecl, GenericArg, GenericBound, GenericParam, GenericParamKind, Generics, Impl, ImplItem,\n-    ImplItemKind, Item, ItemKind, LangItem, Lifetime, LifetimeName, LifetimeParamKind, ParamName, PolyTraitRef,\n-    PredicateOrigin, TraitBoundModifier, TraitFn, TraitItem, TraitItemKind, Ty, TyKind, WherePredicate,\n+    ImplItemKind, Item, ItemKind, LangItem, Lifetime, LifetimeName, ParamName, PolyTraitRef, PredicateOrigin,\n+    TraitBoundModifier, TraitFn, TraitItem, TraitItemKind, Ty, TyKind, WherePredicate,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::nested_filter as middle_nested_filter;\n+use rustc_middle::ty::TyCtxt;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::def_id::LocalDefId;\n use rustc_span::source_map::Span;\n use rustc_span::symbol::{kw, Ident, Symbol};\n \n@@ -129,7 +131,7 @@ impl<'tcx> LateLintPass<'tcx> for Lifetimes {\n enum RefLt {\n     Unnamed,\n     Static,\n-    Named(Symbol),\n+    Named(LocalDefId),\n }\n \n fn check_fn_inner<'tcx>(\n@@ -232,7 +234,7 @@ fn could_use_elision<'tcx>(\n     // level of the current item.\n \n     // check named LTs\n-    let allowed_lts = allowed_lts_from(named_generics);\n+    let allowed_lts = allowed_lts_from(cx.tcx, named_generics);\n \n     // these will collect all the lifetimes for references in arg/return types\n     let mut input_visitor = RefVisitor::new(cx);\n@@ -254,22 +256,6 @@ fn could_use_elision<'tcx>(\n         return false;\n     }\n \n-    if allowed_lts\n-        .intersection(\n-            &input_visitor\n-                .nested_elision_site_lts\n-                .iter()\n-                .chain(output_visitor.nested_elision_site_lts.iter())\n-                .cloned()\n-                .filter(|v| matches!(v, RefLt::Named(_)))\n-                .collect(),\n-        )\n-        .next()\n-        .is_some()\n-    {\n-        return false;\n-    }\n-\n     let input_lts = input_visitor.lts;\n     let output_lts = output_visitor.lts;\n \n@@ -303,6 +289,31 @@ fn could_use_elision<'tcx>(\n         }\n     }\n \n+    // check for higher-ranked trait bounds\n+    if !input_visitor.nested_elision_site_lts.is_empty() || !output_visitor.nested_elision_site_lts.is_empty() {\n+        let allowed_lts: FxHashSet<_> = allowed_lts\n+            .iter()\n+            .filter_map(|lt| match lt {\n+                RefLt::Named(def_id) => Some(cx.tcx.item_name(def_id.to_def_id())),\n+                _ => None,\n+            })\n+            .collect();\n+        for lt in input_visitor.nested_elision_site_lts {\n+            if let RefLt::Named(def_id) = lt {\n+                if allowed_lts.contains(&cx.tcx.item_name(def_id.to_def_id())) {\n+                    return false;\n+                }\n+            }\n+        }\n+        for lt in output_visitor.nested_elision_site_lts {\n+            if let RefLt::Named(def_id) = lt {\n+                if allowed_lts.contains(&cx.tcx.item_name(def_id.to_def_id())) {\n+                    return false;\n+                }\n+            }\n+        }\n+    }\n+\n     // no input lifetimes? easy case!\n     if input_lts.is_empty() {\n         false\n@@ -335,14 +346,11 @@ fn could_use_elision<'tcx>(\n     }\n }\n \n-fn allowed_lts_from(named_generics: &[GenericParam<'_>]) -> FxHashSet<RefLt> {\n+fn allowed_lts_from(tcx: TyCtxt<'_>, named_generics: &[GenericParam<'_>]) -> FxHashSet<RefLt> {\n     let mut allowed_lts = FxHashSet::default();\n     for par in named_generics.iter() {\n-        if let GenericParamKind::Lifetime {\n-            kind: LifetimeParamKind::Explicit,\n-        } = par.kind\n-        {\n-            allowed_lts.insert(RefLt::Named(par.name.ident().name));\n+        if let GenericParamKind::Lifetime { .. } = par.kind {\n+            allowed_lts.insert(RefLt::Named(tcx.hir().local_def_id(par.hir_id)));\n         }\n     }\n     allowed_lts.insert(RefLt::Unnamed);\n@@ -385,8 +393,10 @@ impl<'a, 'tcx> RefVisitor<'a, 'tcx> {\n                 self.lts.push(RefLt::Unnamed);\n             } else if lt.is_elided() {\n                 self.lts.push(RefLt::Unnamed);\n+            } else if let LifetimeName::Param(def_id, _) = lt.name {\n+                self.lts.push(RefLt::Named(def_id));\n             } else {\n-                self.lts.push(RefLt::Named(lt.name.ident().name));\n+                self.lts.push(RefLt::Unnamed);\n             }\n         } else {\n             self.lts.push(RefLt::Unnamed);\n@@ -434,18 +444,22 @@ impl<'a, 'tcx> Visitor<'tcx> for RefVisitor<'a, 'tcx> {\n             TyKind::OpaqueDef(item, bounds) => {\n                 let map = self.cx.tcx.hir();\n                 let item = map.item(item);\n+                let len = self.lts.len();\n                 walk_item(self, item);\n-                walk_ty(self, ty);\n+                self.lts.truncate(len);\n                 self.lts.extend(bounds.iter().filter_map(|bound| match bound {\n-                    GenericArg::Lifetime(l) => Some(RefLt::Named(l.name.ident().name)),\n+                    GenericArg::Lifetime(l) => Some(if let LifetimeName::Param(def_id, _) = l.name {\n+                        RefLt::Named(def_id)\n+                    } else {\n+                        RefLt::Unnamed\n+                    }),\n                     _ => None,\n                 }));\n             },\n             TyKind::BareFn(&BareFnTy { decl, .. }) => {\n                 let mut sub_visitor = RefVisitor::new(self.cx);\n                 sub_visitor.visit_fn_decl(decl);\n                 self.nested_elision_site_lts.append(&mut sub_visitor.all_lts());\n-                return;\n             },\n             TyKind::TraitObject(bounds, ref lt, _) => {\n                 if !lt.is_elided() {\n@@ -454,11 +468,9 @@ impl<'a, 'tcx> Visitor<'tcx> for RefVisitor<'a, 'tcx> {\n                 for bound in bounds {\n                     self.visit_poly_trait_ref(bound, TraitBoundModifier::None);\n                 }\n-                return;\n             },\n-            _ => (),\n+            _ => walk_ty(self, ty),\n         }\n-        walk_ty(self, ty);\n     }\n }\n \n@@ -477,7 +489,7 @@ fn has_where_lifetimes<'tcx>(cx: &LateContext<'tcx>, generics: &'tcx Generics<'_\n                     return true;\n                 }\n                 // if the bounds define new lifetimes, they are fine to occur\n-                let allowed_lts = allowed_lts_from(pred.bound_generic_params);\n+                let allowed_lts = allowed_lts_from(cx.tcx, pred.bound_generic_params);\n                 // now walk the bounds\n                 for bound in pred.bounds.iter() {\n                     walk_param_bound(&mut visitor, bound);\n@@ -601,7 +613,7 @@ struct BodyLifetimeChecker {\n impl<'tcx> Visitor<'tcx> for BodyLifetimeChecker {\n     // for lifetimes as parameters of generics\n     fn visit_lifetime(&mut self, lifetime: &'tcx Lifetime) {\n-        if lifetime.name.ident().name != kw::Empty && lifetime.name.ident().name != kw::StaticLifetime {\n+        if lifetime.name.ident().name != kw::UnderscoreLifetime && lifetime.name.ident().name != kw::StaticLifetime {\n             self.lifetimes_used_in_body = true;\n         }\n     }"}, {"sha": "a0ca7e6ff1e22b78f2cd4c08a8ca29c6cea71e8c", "filename": "clippy_lints/src/manual_async_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c7e7dbc1583a0b06df5bd7623dd354a4debd23d/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c7e7dbc1583a0b06df5bd7623dd354a4debd23d/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_async_fn.rs?ref=3c7e7dbc1583a0b06df5bd7623dd354a4debd23d", "patch": "@@ -166,7 +166,7 @@ fn captures_all_lifetimes(inputs: &[Ty<'_>], output_lifetimes: &[LifetimeName])\n     // - There's only one output lifetime bound using `+ '_`\n     // - All input lifetimes are explicitly bound to the output\n     input_lifetimes.is_empty()\n-        || (output_lifetimes.len() == 1 && matches!(output_lifetimes[0], LifetimeName::Underscore))\n+        || (output_lifetimes.len() == 1 && matches!(output_lifetimes[0], LifetimeName::Infer))\n         || input_lifetimes\n             .iter()\n             .all(|in_lt| output_lifetimes.iter().any(|out_lt| in_lt == out_lt))"}, {"sha": "f52170df662ca666bbaf7eee1bcbadb2d4f2f05b", "filename": "clippy_lints/src/methods/inefficient_to_string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c7e7dbc1583a0b06df5bd7623dd354a4debd23d/clippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c7e7dbc1583a0b06df5bd7623dd354a4debd23d/clippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs?ref=3c7e7dbc1583a0b06df5bd7623dd354a4debd23d", "patch": "@@ -14,7 +14,7 @@ use super::INEFFICIENT_TO_STRING;\n /// Checks for the `INEFFICIENT_TO_STRING` lint\n pub fn check<'tcx>(cx: &LateContext<'tcx>, expr: &hir::Expr<'_>, method_name: Symbol, args: &[hir::Expr<'_>]) {\n     if_chain! {\n-        if args.len() == 1 && method_name == sym!(to_string);\n+        if args.len() == 1 && method_name == sym::to_string;\n         if let Some(to_string_meth_did) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n         if match_def_path(cx, to_string_meth_did, &paths::TO_STRING_METHOD);\n         if let Some(substs) = cx.typeck_results().node_substs_opt(expr.hir_id);"}, {"sha": "b3276f1394ed2f7bcb0f4bcd3ad5bea8322717ce", "filename": "clippy_lints/src/methods/unnecessary_to_owned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c7e7dbc1583a0b06df5bd7623dd354a4debd23d/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c7e7dbc1583a0b06df5bd7623dd354a4debd23d/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs?ref=3c7e7dbc1583a0b06df5bd7623dd354a4debd23d", "patch": "@@ -427,5 +427,5 @@ fn is_cow_into_owned(cx: &LateContext<'_>, method_name: Symbol, method_def_id: D\n \n /// Returns true if the named method is `ToString::to_string`.\n fn is_to_string(cx: &LateContext<'_>, method_name: Symbol, method_def_id: DefId) -> bool {\n-    method_name.as_str() == \"to_string\" && is_diag_trait_item(cx, method_def_id, sym::ToString)\n+    method_name == sym::to_string && is_diag_trait_item(cx, method_def_id, sym::ToString)\n }"}, {"sha": "3c5ea2d94144faf0718772b5342befcc510c7b8e", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c7e7dbc1583a0b06df5bd7623dd354a4debd23d/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c7e7dbc1583a0b06df5bd7623dd354a4debd23d/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=3c7e7dbc1583a0b06df5bd7623dd354a4debd23d", "patch": "@@ -351,7 +351,7 @@ impl fmt::Display for RefPrefix {\n                 name.fmt(f)?;\n                 f.write_char(' ')?;\n             },\n-            LifetimeName::Underscore => f.write_str(\"'_ \")?,\n+            LifetimeName::Infer => f.write_str(\"'_ \")?,\n             LifetimeName::Static => f.write_str(\"'static \")?,\n             _ => (),\n         }"}, {"sha": "22eb06b364632f7a9f5a26b5ae95d4d053fb066c", "filename": "clippy_lints/src/strings.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c7e7dbc1583a0b06df5bd7623dd354a4debd23d/clippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c7e7dbc1583a0b06df5bd7623dd354a4debd23d/clippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrings.rs?ref=3c7e7dbc1583a0b06df5bd7623dd354a4debd23d", "patch": "@@ -394,7 +394,7 @@ impl<'tcx> LateLintPass<'tcx> for StrToString {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &Expr<'_>) {\n         if_chain! {\n             if let ExprKind::MethodCall(path, [self_arg, ..], _) = &expr.kind;\n-            if path.ident.name == sym!(to_string);\n+            if path.ident.name == sym::to_string;\n             let ty = cx.typeck_results().expr_ty(self_arg);\n             if let ty::Ref(_, ty, ..) = ty.kind();\n             if *ty.kind() == ty::Str;\n@@ -444,7 +444,7 @@ impl<'tcx> LateLintPass<'tcx> for StringToString {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &Expr<'_>) {\n         if_chain! {\n             if let ExprKind::MethodCall(path, [self_arg, ..], _) = &expr.kind;\n-            if path.ident.name == sym!(to_string);\n+            if path.ident.name == sym::to_string;\n             let ty = cx.typeck_results().expr_ty(self_arg);\n             if is_type_diagnostic_item(cx, ty, sym::String);\n             then {"}, {"sha": "9ffbc73dc62c75ab56a43d11366f329456cd0b20", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3c7e7dbc1583a0b06df5bd7623dd354a4debd23d/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c7e7dbc1583a0b06df5bd7623dd354a4debd23d/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=3c7e7dbc1583a0b06df5bd7623dd354a4debd23d", "patch": "@@ -2,7 +2,6 @@\n #![feature(box_patterns)]\n #![feature(control_flow_enum)]\n #![feature(let_else)]\n-#![feature(let_chains)]\n #![feature(lint_reasons)]\n #![feature(once_cell)]\n #![feature(rustc_private)]\n@@ -2142,7 +2141,7 @@ pub fn is_hir_ty_cfg_dependant(cx: &LateContext<'_>, ty: &hir::Ty<'_>) -> bool {\n \n static TEST_ITEM_NAMES_CACHE: OnceLock<Mutex<FxHashMap<LocalDefId, Vec<Symbol>>>> = OnceLock::new();\n \n-fn with_test_item_names<'tcx>(tcx: TyCtxt<'tcx>, module: LocalDefId, f: impl Fn(&[Symbol]) -> bool) -> bool {\n+fn with_test_item_names(tcx: TyCtxt<'_>, module: LocalDefId, f: impl Fn(&[Symbol]) -> bool) -> bool {\n     let cache = TEST_ITEM_NAMES_CACHE.get_or_init(|| Mutex::new(FxHashMap::default()));\n     let mut map: MutexGuard<'_, FxHashMap<LocalDefId, Vec<Symbol>>> = cache.lock().unwrap();\n     let value = map.entry(module);"}, {"sha": "23ba7c712779efb0b788652c35a02faedeec5c6e", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c7e7dbc1583a0b06df5bd7623dd354a4debd23d/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/3c7e7dbc1583a0b06df5bd7623dd354a4debd23d/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=3c7e7dbc1583a0b06df5bd7623dd354a4debd23d", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2022-07-15\"\n+channel = \"nightly-2022-07-28\"\n components = [\"cargo\", \"llvm-tools-preview\", \"rust-src\", \"rust-std\", \"rustc\", \"rustc-dev\", \"rustfmt\"]"}, {"sha": "c1ec2bd5bd665c659475866d3ba817ff37189aef", "filename": "src/driver.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c7e7dbc1583a0b06df5bd7623dd354a4debd23d/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c7e7dbc1583a0b06df5bd7623dd354a4debd23d/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=3c7e7dbc1583a0b06df5bd7623dd354a4debd23d", "patch": "@@ -94,6 +94,8 @@ struct ClippyCallbacks {\n }\n \n impl rustc_driver::Callbacks for ClippyCallbacks {\n+    // JUSTIFICATION: necessary in clippy driver to set `mir_opt_level`\n+    #[cfg_attr(not(bootstrap), allow(rustc::bad_opt_access))]\n     fn config(&mut self, config: &mut interface::Config) {\n         let previous = config.register_lints.take();\n         let clippy_args_var = self.clippy_args_var.take();"}, {"sha": "5331075885c1d92b0bb961ca65ec63e8301596f3", "filename": "tests/ui-internal/check_clippy_version_attribute.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3c7e7dbc1583a0b06df5bd7623dd354a4debd23d/tests%2Fui-internal%2Fcheck_clippy_version_attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c7e7dbc1583a0b06df5bd7623dd354a4debd23d/tests%2Fui-internal%2Fcheck_clippy_version_attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Fcheck_clippy_version_attribute.stderr?ref=3c7e7dbc1583a0b06df5bd7623dd354a4debd23d", "patch": "@@ -17,7 +17,7 @@ LL | #![deny(clippy::internal)]\n    |         ^^^^^^^^^^^^^^^^\n    = note: `#[deny(clippy::invalid_clippy_version_attribute)]` implied by `#[deny(clippy::internal)]`\n    = help: please use a valid sematic version, see `doc/adding_lints.md`\n-   = note: this error originates in the macro `$crate::declare_tool_lint` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::declare_tool_lint` which comes from the expansion of the macro `declare_tool_lint` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: this item has an invalid `clippy::version` attribute\n   --> $DIR/check_clippy_version_attribute.rs:48:1\n@@ -32,7 +32,7 @@ LL | | }\n    | |_^\n    |\n    = help: please use a valid sematic version, see `doc/adding_lints.md`\n-   = note: this error originates in the macro `$crate::declare_tool_lint` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::declare_tool_lint` which comes from the expansion of the macro `declare_tool_lint` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: this lint is missing the `clippy::version` attribute or version value\n   --> $DIR/check_clippy_version_attribute.rs:59:1\n@@ -48,7 +48,7 @@ LL | | }\n    |\n    = note: `#[deny(clippy::missing_clippy_version_attribute)]` implied by `#[deny(clippy::internal)]`\n    = help: please use a `clippy::version` attribute, see `doc/adding_lints.md`\n-   = note: this error originates in the macro `$crate::declare_tool_lint` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::declare_tool_lint` which comes from the expansion of the macro `declare_tool_lint` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: this lint is missing the `clippy::version` attribute or version value\n   --> $DIR/check_clippy_version_attribute.rs:67:1\n@@ -62,7 +62,7 @@ LL | | }\n    | |_^\n    |\n    = help: please use a `clippy::version` attribute, see `doc/adding_lints.md`\n-   = note: this error originates in the macro `$crate::declare_tool_lint` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::declare_tool_lint` which comes from the expansion of the macro `declare_tool_lint` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "8961bd4624f45e32da1a4c49b83f737b242dbcf7", "filename": "tests/ui-internal/default_lint.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c7e7dbc1583a0b06df5bd7623dd354a4debd23d/tests%2Fui-internal%2Fdefault_lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c7e7dbc1583a0b06df5bd7623dd354a4debd23d/tests%2Fui-internal%2Fdefault_lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Fdefault_lint.stderr?ref=3c7e7dbc1583a0b06df5bd7623dd354a4debd23d", "patch": "@@ -15,7 +15,7 @@ note: the lint level is defined here\n LL | #![deny(clippy::internal)]\n    |         ^^^^^^^^^^^^^^^^\n    = note: `#[deny(clippy::default_lint)]` implied by `#[deny(clippy::internal)]`\n-   = note: this error originates in the macro `$crate::declare_tool_lint` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::declare_tool_lint` which comes from the expansion of the macro `declare_tool_lint` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "24106510e73be2f344f5154db916807ee97a9d66", "filename": "tests/ui-internal/if_chain_style.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c7e7dbc1583a0b06df5bd7623dd354a4debd23d/tests%2Fui-internal%2Fif_chain_style.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c7e7dbc1583a0b06df5bd7623dd354a4debd23d/tests%2Fui-internal%2Fif_chain_style.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Fif_chain_style.stderr?ref=3c7e7dbc1583a0b06df5bd7623dd354a4debd23d", "patch": "@@ -56,7 +56,7 @@ LL | |         }\n LL | |     }\n    | |_____^\n    |\n-   = note: this error originates in the macro `__if_chain` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `__if_chain` which comes from the expansion of the macro `if_chain` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `let` expression should be above the `if_chain!`\n   --> $DIR/if_chain_style.rs:40:9"}, {"sha": "638e4a5484932d3585c593c489fda1e5b4e89beb", "filename": "tests/ui/crashes/ice-6252.stderr", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3c7e7dbc1583a0b06df5bd7623dd354a4debd23d/tests%2Fui%2Fcrashes%2Fice-6252.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c7e7dbc1583a0b06df5bd7623dd354a4debd23d/tests%2Fui%2Fcrashes%2Fice-6252.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-6252.stderr?ref=3c7e7dbc1583a0b06df5bd7623dd354a4debd23d", "patch": "@@ -30,15 +30,7 @@ LL |     const VAL: T;\n LL | impl<N, M> TypeVal<usize> for Multiply<N, M> where N: TypeVal<VAL> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `VAL` in implementation\n \n-error: constant expression depends on a generic parameter\n-  --> $DIR/ice-6252.rs:13:9\n-   |\n-LL |     [1; <Multiply<Five, Five>>::VAL];\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: this may fail depending on what value the parameter takes\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0046, E0412.\n For more information about an error, try `rustc --explain E0046`."}, {"sha": "9c91d935716d893b186f2529ab67261ee73084e3", "filename": "tests/ui/diverging_sub_expression.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c7e7dbc1583a0b06df5bd7623dd354a4debd23d/tests%2Fui%2Fdiverging_sub_expression.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c7e7dbc1583a0b06df5bd7623dd354a4debd23d/tests%2Fui%2Fdiverging_sub_expression.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdiverging_sub_expression.stderr?ref=3c7e7dbc1583a0b06df5bd7623dd354a4debd23d", "patch": "@@ -36,7 +36,7 @@ error: sub-expression diverges\n LL |                 _ => true || panic!(\"boo\"),\n    |                              ^^^^^^^^^^^^^\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: sub-expression diverges\n   --> $DIR/diverging_sub_expression.rs:38:26"}, {"sha": "d637dbce5d79294a603e0d69abe2510e3f47b1cd", "filename": "tests/ui/fallible_impl_from.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3c7e7dbc1583a0b06df5bd7623dd354a4debd23d/tests%2Fui%2Ffallible_impl_from.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c7e7dbc1583a0b06df5bd7623dd354a4debd23d/tests%2Fui%2Ffallible_impl_from.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffallible_impl_from.stderr?ref=3c7e7dbc1583a0b06df5bd7623dd354a4debd23d", "patch": "@@ -38,7 +38,7 @@ note: potential failure(s)\n    |\n LL |             panic!();\n    |             ^^^^^^^^\n-   = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: consider implementing `TryFrom` instead\n   --> $DIR/fallible_impl_from.rs:35:1\n@@ -65,7 +65,7 @@ LL |         } else if s.parse::<u32>().unwrap() != 42 {\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^\n LL |             panic!(\"{:?}\", s);\n    |             ^^^^^^^^^^^^^^^^^\n-   = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: consider implementing `TryFrom` instead\n   --> $DIR/fallible_impl_from.rs:53:1\n@@ -87,7 +87,7 @@ LL |         if s.parse::<u32>().ok().unwrap() != 42 {\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n LL |             panic!(\"{:?}\", s);\n    |             ^^^^^^^^^^^^^^^^^\n-   = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "8d8c29f138587858b2bdf5ec63b9c1638c351201", "filename": "tests/ui/issue-7447.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c7e7dbc1583a0b06df5bd7623dd354a4debd23d/tests%2Fui%2Fissue-7447.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c7e7dbc1583a0b06df5bd7623dd354a4debd23d/tests%2Fui%2Fissue-7447.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissue-7447.stderr?ref=3c7e7dbc1583a0b06df5bd7623dd354a4debd23d", "patch": "@@ -5,15 +5,15 @@ LL |     byte_view(panic!());\n    |               ^^^^^^^^\n    |\n    = note: `-D clippy::diverging-sub-expression` implied by `-D warnings`\n-   = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: sub-expression diverges\n   --> $DIR/issue-7447.rs:24:19\n    |\n LL |     group_entries(panic!());\n    |                   ^^^^^^^^\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "4c98e1827bdbbf56f1c1caea2f8ede273ee7ed90", "filename": "tests/ui/needless_late_init.fixed", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3c7e7dbc1583a0b06df5bd7623dd354a4debd23d/tests%2Fui%2Fneedless_late_init.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3c7e7dbc1583a0b06df5bd7623dd354a4debd23d/tests%2Fui%2Fneedless_late_init.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_late_init.fixed?ref=3c7e7dbc1583a0b06df5bd7623dd354a4debd23d", "patch": "@@ -1,5 +1,4 @@\n // run-rustfix\n-#![feature(let_chains)]\n #![allow(\n     unused,\n     clippy::assign_op_pattern,"}, {"sha": "25e1e0214fb443bd1264042d918c0f9b2ee7a0be", "filename": "tests/ui/needless_late_init.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3c7e7dbc1583a0b06df5bd7623dd354a4debd23d/tests%2Fui%2Fneedless_late_init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c7e7dbc1583a0b06df5bd7623dd354a4debd23d/tests%2Fui%2Fneedless_late_init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_late_init.rs?ref=3c7e7dbc1583a0b06df5bd7623dd354a4debd23d", "patch": "@@ -1,5 +1,4 @@\n // run-rustfix\n-#![feature(let_chains)]\n #![allow(\n     unused,\n     clippy::assign_op_pattern,"}, {"sha": "97f0f7019a9df0f24e99c3b3368dd8fa0a9154b2", "filename": "tests/ui/needless_late_init.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3c7e7dbc1583a0b06df5bd7623dd354a4debd23d/tests%2Fui%2Fneedless_late_init.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c7e7dbc1583a0b06df5bd7623dd354a4debd23d/tests%2Fui%2Fneedless_late_init.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_late_init.stderr?ref=3c7e7dbc1583a0b06df5bd7623dd354a4debd23d", "patch": "@@ -1,5 +1,5 @@\n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:23:5\n+  --> $DIR/needless_late_init.rs:22:5\n    |\n LL |     let a;\n    |     ^^^^^^ created here\n@@ -13,7 +13,7 @@ LL |     let a = \"zero\";\n    |     ~~~~~\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:26:5\n+  --> $DIR/needless_late_init.rs:25:5\n    |\n LL |     let b;\n    |     ^^^^^^ created here\n@@ -27,7 +27,7 @@ LL |     let b = 1;\n    |     ~~~~~\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:27:5\n+  --> $DIR/needless_late_init.rs:26:5\n    |\n LL |     let c;\n    |     ^^^^^^ created here\n@@ -41,7 +41,7 @@ LL |     let c = 2;\n    |     ~~~~~\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:31:5\n+  --> $DIR/needless_late_init.rs:30:5\n    |\n LL |     let d: usize;\n    |     ^^^^^^^^^^^^^ created here\n@@ -54,7 +54,7 @@ LL |     let d: usize = 1;\n    |     ~~~~~~~~~~~~\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:34:5\n+  --> $DIR/needless_late_init.rs:33:5\n    |\n LL |     let e;\n    |     ^^^^^^ created here\n@@ -67,7 +67,7 @@ LL |     let e = format!(\"{}\", d);\n    |     ~~~~~\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:39:5\n+  --> $DIR/needless_late_init.rs:38:5\n    |\n LL |     let a;\n    |     ^^^^^^\n@@ -88,7 +88,7 @@ LL |     };\n    |      +\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:48:5\n+  --> $DIR/needless_late_init.rs:47:5\n    |\n LL |     let b;\n    |     ^^^^^^\n@@ -109,7 +109,7 @@ LL |     };\n    |      +\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:55:5\n+  --> $DIR/needless_late_init.rs:54:5\n    |\n LL |     let d;\n    |     ^^^^^^\n@@ -130,7 +130,7 @@ LL |     };\n    |      +\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:63:5\n+  --> $DIR/needless_late_init.rs:62:5\n    |\n LL |     let e;\n    |     ^^^^^^\n@@ -151,7 +151,7 @@ LL |     };\n    |      +\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:70:5\n+  --> $DIR/needless_late_init.rs:69:5\n    |\n LL |     let f;\n    |     ^^^^^^\n@@ -167,7 +167,7 @@ LL +         1 => \"three\",\n    |\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:76:5\n+  --> $DIR/needless_late_init.rs:75:5\n    |\n LL |     let g: usize;\n    |     ^^^^^^^^^^^^^\n@@ -187,7 +187,7 @@ LL |     };\n    |      +\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:84:5\n+  --> $DIR/needless_late_init.rs:83:5\n    |\n LL |     let x;\n    |     ^^^^^^ created here\n@@ -201,7 +201,7 @@ LL |     let x = 1;\n    |     ~~~~~\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:88:5\n+  --> $DIR/needless_late_init.rs:87:5\n    |\n LL |     let x;\n    |     ^^^^^^ created here\n@@ -215,7 +215,7 @@ LL |     let x = SignificantDrop;\n    |     ~~~~~\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:92:5\n+  --> $DIR/needless_late_init.rs:91:5\n    |\n LL |     let x;\n    |     ^^^^^^ created here\n@@ -229,7 +229,7 @@ LL |     let x = SignificantDrop;\n    |     ~~~~~\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:111:5\n+  --> $DIR/needless_late_init.rs:110:5\n    |\n LL |     let a;\n    |     ^^^^^^\n@@ -250,7 +250,7 @@ LL |     };\n    |      +\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:128:5\n+  --> $DIR/needless_late_init.rs:127:5\n    |\n LL |     let a;\n    |     ^^^^^^"}]}