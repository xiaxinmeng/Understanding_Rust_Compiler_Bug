{"sha": "3272c9845cb6fcd8c15bcd0cb4c229de42f583c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyNzJjOTg0NWNiNmZjZDhjMTViY2QwY2I0YzIyOWRlNDJmNTgzYzc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-10T07:11:38Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-13T07:09:03Z"}, "message": "foreign types: use size and align from layout", "tree": {"sha": "54e3274198bd68ec375c6f0aca63b117d26afd33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54e3274198bd68ec375c6f0aca63b117d26afd33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3272c9845cb6fcd8c15bcd0cb4c229de42f583c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3272c9845cb6fcd8c15bcd0cb4c229de42f583c7", "html_url": "https://github.com/rust-lang/rust/commit/3272c9845cb6fcd8c15bcd0cb4c229de42f583c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3272c9845cb6fcd8c15bcd0cb4c229de42f583c7/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0c585c52582d79dc83ac180521ccf1d8c249b57", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0c585c52582d79dc83ac180521ccf1d8c249b57", "html_url": "https://github.com/rust-lang/rust/commit/d0c585c52582d79dc83ac180521ccf1d8c249b57"}], "stats": {"total": 5, "additions": 3, "deletions": 2}, "files": [{"sha": "59df61f2a6f93046435afa4aa50aa367c714c9bc", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3272c9845cb6fcd8c15bcd0cb4c229de42f583c7/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3272c9845cb6fcd8c15bcd0cb4c229de42f583c7/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=3272c9845cb6fcd8c15bcd0cb4c229de42f583c7", "patch": "@@ -210,8 +210,9 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                     // Make sure this is non-NULL and aligned\n                     let (size, align) = self.size_and_align_of(place.meta, place.layout)?\n                         // for the purpose of validity, consider foreign types to have\n-                        // alignment 1 and size 0.\n-                        .unwrap_or_else(|| (Size::ZERO, Align::from_bytes(1, 1).unwrap()));\n+                        // alignment and size determined by the layout (size will be 0,\n+                        // alignment should take attributes into account).\n+                        .unwrap_or_else(|| place.layout.size_and_align());\n                     match self.memory.check_align(place.ptr, align) {\n                         Ok(_) => {},\n                         Err(err) => match err.kind {"}]}