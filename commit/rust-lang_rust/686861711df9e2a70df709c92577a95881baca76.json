{"sha": "686861711df9e2a70df709c92577a95881baca76", "node_id": "C_kwDOAAsO6NoAKDY4Njg2MTcxMWRmOWUyYTcwZGY3MDljOTI1NzdhOTU4ODFiYWNhNzY", "commit": {"author": {"name": "Jannis Christopher K\u00f6hl", "email": "mail@koehl.dev", "date": "2022-09-27T14:18:40Z"}, "committer": {"name": "Jannis Christopher K\u00f6hl", "email": "mail@koehl.dev", "date": "2022-11-07T09:35:17Z"}, "message": "Add tests from current const prop", "tree": {"sha": "ff459e32115a38ae4e386e7eaf79c1bde81d1bdc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff459e32115a38ae4e386e7eaf79c1bde81d1bdc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/686861711df9e2a70df709c92577a95881baca76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/686861711df9e2a70df709c92577a95881baca76", "html_url": "https://github.com/rust-lang/rust/commit/686861711df9e2a70df709c92577a95881baca76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/686861711df9e2a70df709c92577a95881baca76/comments", "author": {"login": "jachris", "id": 30163784, "node_id": "MDQ6VXNlcjMwMTYzNzg0", "avatar_url": "https://avatars.githubusercontent.com/u/30163784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jachris", "html_url": "https://github.com/jachris", "followers_url": "https://api.github.com/users/jachris/followers", "following_url": "https://api.github.com/users/jachris/following{/other_user}", "gists_url": "https://api.github.com/users/jachris/gists{/gist_id}", "starred_url": "https://api.github.com/users/jachris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jachris/subscriptions", "organizations_url": "https://api.github.com/users/jachris/orgs", "repos_url": "https://api.github.com/users/jachris/repos", "events_url": "https://api.github.com/users/jachris/events{/privacy}", "received_events_url": "https://api.github.com/users/jachris/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jachris", "id": 30163784, "node_id": "MDQ6VXNlcjMwMTYzNzg0", "avatar_url": "https://avatars.githubusercontent.com/u/30163784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jachris", "html_url": "https://github.com/jachris", "followers_url": "https://api.github.com/users/jachris/followers", "following_url": "https://api.github.com/users/jachris/following{/other_user}", "gists_url": "https://api.github.com/users/jachris/gists{/gist_id}", "starred_url": "https://api.github.com/users/jachris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jachris/subscriptions", "organizations_url": "https://api.github.com/users/jachris/orgs", "repos_url": "https://api.github.com/users/jachris/repos", "events_url": "https://api.github.com/users/jachris/events{/privacy}", "received_events_url": "https://api.github.com/users/jachris/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13b70599c1fbf15ced793b862ee9732156dd7bb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/13b70599c1fbf15ced793b862ee9732156dd7bb8", "html_url": "https://github.com/rust-lang/rust/commit/13b70599c1fbf15ced793b862ee9732156dd7bb8"}], "stats": {"total": 2297, "additions": 2297, "deletions": 0}, "files": [{"sha": "8c35b5ca4203aa584fcce27f2cef762e5ebff02f", "filename": "src/test/mir-opt/dataflow-const-prop/previous/aggregate.main.DataflowConstProp.diff", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Faggregate.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Faggregate.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Faggregate.main.DataflowConstProp.diff?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,32 @@\n+- // MIR for `main` before DataflowConstProp\n++ // MIR for `main` after DataflowConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/aggregate.rs:+0:11: +0:11\n+      let _1: i32;                         // in scope 0 at $DIR/aggregate.rs:+1:9: +1:10\n+      let mut _2: i32;                     // in scope 0 at $DIR/aggregate.rs:+1:13: +1:24\n+      let mut _3: (i32, i32, i32);         // in scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/aggregate.rs:+1:9: +1:10\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/aggregate.rs:+1:9: +1:10\n+          StorageLive(_2);                 // scope 0 at $DIR/aggregate.rs:+1:13: +1:24\n+          StorageLive(_3);                 // scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n+          Deinit(_3);                      // scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n+          (_3.0: i32) = const 0_i32;       // scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n+          (_3.1: i32) = const 1_i32;       // scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n+          (_3.2: i32) = const 2_i32;       // scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n+-         _2 = (_3.1: i32);                // scope 0 at $DIR/aggregate.rs:+1:13: +1:24\n+-         _1 = Add(move _2, const 0_i32);  // scope 0 at $DIR/aggregate.rs:+1:13: +1:28\n++         _2 = const 1_i32;                // scope 0 at $DIR/aggregate.rs:+1:13: +1:24\n++         _1 = const 1_i32;                // scope 0 at $DIR/aggregate.rs:+1:13: +1:28\n+          StorageDead(_2);                 // scope 0 at $DIR/aggregate.rs:+1:27: +1:28\n+          StorageDead(_3);                 // scope 0 at $DIR/aggregate.rs:+1:28: +1:29\n+          _0 = const ();                   // scope 0 at $DIR/aggregate.rs:+0:11: +2:2\n+          StorageDead(_1);                 // scope 0 at $DIR/aggregate.rs:+2:1: +2:2\n+          return;                          // scope 0 at $DIR/aggregate.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "bdfa922cf5cafe74964188eff9bf0ee98b60d8d8", "filename": "src/test/mir-opt/dataflow-const-prop/previous/aggregate.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Faggregate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Faggregate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Faggregate.rs?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,7 @@\n+// unit-test: DataflowConstProp\n+// compile-flags: -O\n+\n+// EMIT_MIR aggregate.main.DataflowConstProp.diff\n+fn main() {\n+    let x = (0, 1, 2).1 + 0;\n+}"}, {"sha": "8cbc4a72e800f925f33c12845123901ad16bbd65", "filename": "src/test/mir-opt/dataflow-const-prop/previous/array_index.main.DataflowConstProp.32bit.diff", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Farray_index.main.DataflowConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Farray_index.main.DataflowConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Farray_index.main.DataflowConstProp.32bit.diff?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,39 @@\n+- // MIR for `main` before DataflowConstProp\n++ // MIR for `main` after DataflowConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/array_index.rs:+0:11: +0:11\n+      let _1: u32;                         // in scope 0 at $DIR/array_index.rs:+1:9: +1:10\n+      let mut _2: [u32; 4];                // in scope 0 at $DIR/array_index.rs:+1:18: +1:30\n+      let _3: usize;                       // in scope 0 at $DIR/array_index.rs:+1:31: +1:32\n+      let mut _4: usize;                   // in scope 0 at $DIR/array_index.rs:+1:18: +1:33\n+      let mut _5: bool;                    // in scope 0 at $DIR/array_index.rs:+1:18: +1:33\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/array_index.rs:+1:9: +1:10\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/array_index.rs:+1:9: +1:10\n+          StorageLive(_2);                 // scope 0 at $DIR/array_index.rs:+1:18: +1:30\n+          _2 = [const 0_u32, const 1_u32, const 2_u32, const 3_u32]; // scope 0 at $DIR/array_index.rs:+1:18: +1:30\n+          StorageLive(_3);                 // scope 0 at $DIR/array_index.rs:+1:31: +1:32\n+          _3 = const 2_usize;              // scope 0 at $DIR/array_index.rs:+1:31: +1:32\n+-         _4 = Len(_2);                    // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n+-         _5 = Lt(_3, _4);                 // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n+-         assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n++         _4 = const 4_usize;              // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n++         _5 = const true;                 // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n++         assert(const true, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n+      }\n+  \n+      bb1: {\n+-         _1 = _2[_3];                     // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n++         _1 = const 2_u32;                // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n+          StorageDead(_3);                 // scope 0 at $DIR/array_index.rs:+1:33: +1:34\n+          StorageDead(_2);                 // scope 0 at $DIR/array_index.rs:+1:33: +1:34\n+          _0 = const ();                   // scope 0 at $DIR/array_index.rs:+0:11: +2:2\n+          StorageDead(_1);                 // scope 0 at $DIR/array_index.rs:+2:1: +2:2\n+          return;                          // scope 0 at $DIR/array_index.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "8cbc4a72e800f925f33c12845123901ad16bbd65", "filename": "src/test/mir-opt/dataflow-const-prop/previous/array_index.main.DataflowConstProp.64bit.diff", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Farray_index.main.DataflowConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Farray_index.main.DataflowConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Farray_index.main.DataflowConstProp.64bit.diff?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,39 @@\n+- // MIR for `main` before DataflowConstProp\n++ // MIR for `main` after DataflowConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/array_index.rs:+0:11: +0:11\n+      let _1: u32;                         // in scope 0 at $DIR/array_index.rs:+1:9: +1:10\n+      let mut _2: [u32; 4];                // in scope 0 at $DIR/array_index.rs:+1:18: +1:30\n+      let _3: usize;                       // in scope 0 at $DIR/array_index.rs:+1:31: +1:32\n+      let mut _4: usize;                   // in scope 0 at $DIR/array_index.rs:+1:18: +1:33\n+      let mut _5: bool;                    // in scope 0 at $DIR/array_index.rs:+1:18: +1:33\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/array_index.rs:+1:9: +1:10\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/array_index.rs:+1:9: +1:10\n+          StorageLive(_2);                 // scope 0 at $DIR/array_index.rs:+1:18: +1:30\n+          _2 = [const 0_u32, const 1_u32, const 2_u32, const 3_u32]; // scope 0 at $DIR/array_index.rs:+1:18: +1:30\n+          StorageLive(_3);                 // scope 0 at $DIR/array_index.rs:+1:31: +1:32\n+          _3 = const 2_usize;              // scope 0 at $DIR/array_index.rs:+1:31: +1:32\n+-         _4 = Len(_2);                    // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n+-         _5 = Lt(_3, _4);                 // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n+-         assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n++         _4 = const 4_usize;              // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n++         _5 = const true;                 // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n++         assert(const true, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n+      }\n+  \n+      bb1: {\n+-         _1 = _2[_3];                     // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n++         _1 = const 2_u32;                // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n+          StorageDead(_3);                 // scope 0 at $DIR/array_index.rs:+1:33: +1:34\n+          StorageDead(_2);                 // scope 0 at $DIR/array_index.rs:+1:33: +1:34\n+          _0 = const ();                   // scope 0 at $DIR/array_index.rs:+0:11: +2:2\n+          StorageDead(_1);                 // scope 0 at $DIR/array_index.rs:+2:1: +2:2\n+          return;                          // scope 0 at $DIR/array_index.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "3cd7ddf20a7da11bd9a33a0bde9ae58ea514dc2b", "filename": "src/test/mir-opt/dataflow-const-prop/previous/array_index.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Farray_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Farray_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Farray_index.rs?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,7 @@\n+// unit-test: DataflowConstProp\n+// EMIT_MIR_FOR_EACH_BIT_WIDTH\n+\n+// EMIT_MIR array_index.main.DataflowConstProp.diff\n+fn main() {\n+    let x: u32 = [0, 1, 2, 3][2];\n+}"}, {"sha": "47af40988ddd3b3918e3b57f75d5834b82791046", "filename": "src/test/mir-opt/dataflow-const-prop/previous/bad_op_div_by_zero.main.DataflowConstProp.diff", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_div_by_zero.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_div_by_zero.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_div_by_zero.main.DataflowConstProp.diff?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,52 @@\n+- // MIR for `main` before DataflowConstProp\n++ // MIR for `main` after DataflowConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/bad_op_div_by_zero.rs:+0:11: +0:11\n+      let _1: i32;                         // in scope 0 at $DIR/bad_op_div_by_zero.rs:+1:9: +1:10\n+      let mut _3: i32;                     // in scope 0 at $DIR/bad_op_div_by_zero.rs:+2:18: +2:19\n+      let mut _4: bool;                    // in scope 0 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n+      let mut _5: bool;                    // in scope 0 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n+      let mut _6: bool;                    // in scope 0 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n+      let mut _7: bool;                    // in scope 0 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n+      scope 1 {\n+          debug y => _1;                   // in scope 1 at $DIR/bad_op_div_by_zero.rs:+1:9: +1:10\n+          let _2: i32;                     // in scope 1 at $DIR/bad_op_div_by_zero.rs:+2:9: +2:11\n+          scope 2 {\n+              debug _z => _2;              // in scope 2 at $DIR/bad_op_div_by_zero.rs:+2:9: +2:11\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/bad_op_div_by_zero.rs:+1:9: +1:10\n+          _1 = const 0_i32;                // scope 0 at $DIR/bad_op_div_by_zero.rs:+1:13: +1:14\n+          StorageLive(_2);                 // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:9: +2:11\n+          StorageLive(_3);                 // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:18: +2:19\n+-         _3 = _1;                         // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:18: +2:19\n+-         _4 = Eq(_3, const 0_i32);        // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n++         _3 = const 0_i32;                // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:18: +2:19\n++         _4 = const true;                 // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n+          assert(!move _4, \"attempt to divide `{}` by zero\", const 1_i32) -> bb1; // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n+      }\n+  \n+      bb1: {\n+-         _5 = Eq(_3, const -1_i32);       // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n+-         _6 = Eq(const 1_i32, const i32::MIN); // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n+-         _7 = BitAnd(move _5, move _6);   // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n+-         assert(!move _7, \"attempt to compute `{} / {}`, which would overflow\", const 1_i32, _3) -> bb2; // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n++         _5 = const false;                // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n++         _6 = const false;                // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n++         _7 = const false;                // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n++         assert(!const false, \"attempt to compute `{} / {}`, which would overflow\", const 1_i32, _3) -> bb2; // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n+      }\n+  \n+      bb2: {\n+          _2 = Div(const 1_i32, move _3);  // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n+          StorageDead(_3);                 // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:18: +2:19\n+          _0 = const ();                   // scope 0 at $DIR/bad_op_div_by_zero.rs:+0:11: +3:2\n+          StorageDead(_2);                 // scope 1 at $DIR/bad_op_div_by_zero.rs:+3:1: +3:2\n+          StorageDead(_1);                 // scope 0 at $DIR/bad_op_div_by_zero.rs:+3:1: +3:2\n+          return;                          // scope 0 at $DIR/bad_op_div_by_zero.rs:+3:2: +3:2\n+      }\n+  }\n+  "}, {"sha": "ddf195b2c8a9fc78505344a93607dba55a68a74e", "filename": "src/test/mir-opt/dataflow-const-prop/previous/bad_op_div_by_zero.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_div_by_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_div_by_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_div_by_zero.rs?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,7 @@\n+// unit-test: DataflowConstProp\n+// EMIT_MIR bad_op_div_by_zero.main.DataflowConstProp.diff\n+#[allow(unconditional_panic)]\n+fn main() {\n+    let y = 0;\n+    let _z = 1 / y;\n+}"}, {"sha": "0069d3ce53443e677c880bc15c06f0c679fad8cb", "filename": "src/test/mir-opt/dataflow-const-prop/previous/bad_op_mod_by_zero.main.DataflowConstProp.diff", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_mod_by_zero.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_mod_by_zero.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_mod_by_zero.main.DataflowConstProp.diff?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,54 @@\n+- // MIR for `main` before DataflowConstProp\n++ // MIR for `main` after DataflowConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/bad_op_mod_by_zero.rs:+0:11: +0:11\n+      let _1: i32;                         // in scope 0 at $DIR/bad_op_mod_by_zero.rs:+1:9: +1:10\n+      let mut _3: i32;                     // in scope 0 at $DIR/bad_op_mod_by_zero.rs:+2:18: +2:19\n+      let mut _4: bool;                    // in scope 0 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n+      let mut _5: bool;                    // in scope 0 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n+      let mut _6: bool;                    // in scope 0 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n+      let mut _7: bool;                    // in scope 0 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n+      scope 1 {\n+          debug y => _1;                   // in scope 1 at $DIR/bad_op_mod_by_zero.rs:+1:9: +1:10\n+          let _2: i32;                     // in scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:9: +2:11\n+          scope 2 {\n+              debug _z => _2;              // in scope 2 at $DIR/bad_op_mod_by_zero.rs:+2:9: +2:11\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/bad_op_mod_by_zero.rs:+1:9: +1:10\n+          _1 = const 0_i32;                // scope 0 at $DIR/bad_op_mod_by_zero.rs:+1:13: +1:14\n+          StorageLive(_2);                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:9: +2:11\n+          StorageLive(_3);                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:18: +2:19\n+-         _3 = _1;                         // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:18: +2:19\n+-         _4 = Eq(_3, const 0_i32);        // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n+-         assert(!move _4, \"attempt to calculate the remainder of `{}` with a divisor of zero\", const 1_i32) -> bb1; // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n++         _3 = const 0_i32;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:18: +2:19\n++         _4 = const true;                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n++         assert(!const true, \"attempt to calculate the remainder of `{}` with a divisor of zero\", const 1_i32) -> bb1; // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n+      }\n+  \n+      bb1: {\n+-         _5 = Eq(_3, const -1_i32);       // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n+-         _6 = Eq(const 1_i32, const i32::MIN); // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n+-         _7 = BitAnd(move _5, move _6);   // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n+-         assert(!move _7, \"attempt to compute the remainder of `{} % {}`, which would overflow\", const 1_i32, _3) -> bb2; // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n++         _5 = const false;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n++         _6 = const false;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n++         _7 = const false;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n++         assert(!const false, \"attempt to compute the remainder of `{} % {}`, which would overflow\", const 1_i32, const 0_i32) -> bb2; // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n+      }\n+  \n+      bb2: {\n+-         _2 = Rem(const 1_i32, move _3);  // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n++         _2 = Rem(const 1_i32, const 0_i32); // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n+          StorageDead(_3);                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:18: +2:19\n+          nop;                             // scope 0 at $DIR/bad_op_mod_by_zero.rs:+0:11: +3:2\n+          StorageDead(_2);                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:+3:1: +3:2\n+          StorageDead(_1);                 // scope 0 at $DIR/bad_op_mod_by_zero.rs:+3:1: +3:2\n+          return;                          // scope 0 at $DIR/bad_op_mod_by_zero.rs:+3:2: +3:2\n+      }\n+  }\n+  "}, {"sha": "6a7a82e5034b03fd059fed7c39671d62e4205d48", "filename": "src/test/mir-opt/dataflow-const-prop/previous/bad_op_mod_by_zero.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_mod_by_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_mod_by_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_mod_by_zero.rs?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,6 @@\n+// EMIT_MIR bad_op_mod_by_zero.main.DataflowConstProp.diff\n+#[allow(unconditional_panic)]\n+fn main() {\n+    let y = 0;\n+    let _z = 1 % y;\n+}"}, {"sha": "f04715e3b335fe7c3d04782703e5d4a11a3821d7", "filename": "src/test/mir-opt/dataflow-const-prop/previous/bad_op_unsafe_oob_for_slices.main.DataflowConstProp.32bit.diff", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_unsafe_oob_for_slices.main.DataflowConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_unsafe_oob_for_slices.main.DataflowConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_unsafe_oob_for_slices.main.DataflowConstProp.32bit.diff?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,56 @@\n+- // MIR for `main` before DataflowConstProp\n++ // MIR for `main` after DataflowConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+0:11: +0:11\n+      let _1: *const [i32];                // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:9: +1:10\n+      let mut _2: *const [i32; 3];         // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+      let _3: &[i32; 3];                   // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+      let _4: [i32; 3];                    // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:26: +1:35\n+      let _6: usize;                       // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n+      let mut _7: usize;                   // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+      let mut _8: bool;                    // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+      let mut _9: &[i32; 3];               // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+      scope 1 {\n+          debug a => _1;                   // in scope 1 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:9: +1:10\n+          scope 2 {\n+              let _5: i32;                 // in scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:13: +3:15\n+              scope 3 {\n+                  debug _b => _5;          // in scope 3 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:13: +3:15\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:9: +1:10\n+          StorageLive(_2);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+          StorageLive(_3);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+          _9 = const main::promoted[0];    // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+                                           // mir::Constant\n+                                           // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n+                                           // + literal: Const { ty: &[i32; 3], val: Unevaluated(main, [], Some(promoted[0])) }\n+          _3 = _9;                         // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+          _2 = &raw const (*_3);           // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+          _1 = move _2 as *const [i32] (Pointer(Unsize)); // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+          StorageDead(_2);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:34: +1:35\n+          StorageDead(_3);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:35: +1:36\n+          StorageLive(_5);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:13: +3:15\n+          StorageLive(_6);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n+          _6 = const 3_usize;              // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n+          _7 = Len((*_1));                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+-         _8 = Lt(_6, _7);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+-         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n++         _8 = Lt(const 3_usize, _7);      // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n++         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, const 3_usize) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+      }\n+  \n+      bb1: {\n+          _5 = (*_1)[_6];                  // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+          StorageDead(_6);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:25: +3:26\n+          nop;                             // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+2:5: +4:6\n+          StorageDead(_5);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+4:5: +4:6\n+          StorageDead(_1);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+5:1: +5:2\n+          return;                          // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+5:2: +5:2\n+      }\n+  }\n+  "}, {"sha": "f04715e3b335fe7c3d04782703e5d4a11a3821d7", "filename": "src/test/mir-opt/dataflow-const-prop/previous/bad_op_unsafe_oob_for_slices.main.DataflowConstProp.64bit.diff", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_unsafe_oob_for_slices.main.DataflowConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_unsafe_oob_for_slices.main.DataflowConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_unsafe_oob_for_slices.main.DataflowConstProp.64bit.diff?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,56 @@\n+- // MIR for `main` before DataflowConstProp\n++ // MIR for `main` after DataflowConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+0:11: +0:11\n+      let _1: *const [i32];                // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:9: +1:10\n+      let mut _2: *const [i32; 3];         // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+      let _3: &[i32; 3];                   // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+      let _4: [i32; 3];                    // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:26: +1:35\n+      let _6: usize;                       // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n+      let mut _7: usize;                   // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+      let mut _8: bool;                    // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+      let mut _9: &[i32; 3];               // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+      scope 1 {\n+          debug a => _1;                   // in scope 1 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:9: +1:10\n+          scope 2 {\n+              let _5: i32;                 // in scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:13: +3:15\n+              scope 3 {\n+                  debug _b => _5;          // in scope 3 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:13: +3:15\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:9: +1:10\n+          StorageLive(_2);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+          StorageLive(_3);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+          _9 = const main::promoted[0];    // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+                                           // mir::Constant\n+                                           // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n+                                           // + literal: Const { ty: &[i32; 3], val: Unevaluated(main, [], Some(promoted[0])) }\n+          _3 = _9;                         // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+          _2 = &raw const (*_3);           // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+          _1 = move _2 as *const [i32] (Pointer(Unsize)); // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+          StorageDead(_2);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:34: +1:35\n+          StorageDead(_3);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:35: +1:36\n+          StorageLive(_5);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:13: +3:15\n+          StorageLive(_6);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n+          _6 = const 3_usize;              // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n+          _7 = Len((*_1));                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+-         _8 = Lt(_6, _7);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+-         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n++         _8 = Lt(const 3_usize, _7);      // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n++         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, const 3_usize) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+      }\n+  \n+      bb1: {\n+          _5 = (*_1)[_6];                  // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+          StorageDead(_6);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:25: +3:26\n+          nop;                             // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+2:5: +4:6\n+          StorageDead(_5);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+4:5: +4:6\n+          StorageDead(_1);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+5:1: +5:2\n+          return;                          // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+5:2: +5:2\n+      }\n+  }\n+  "}, {"sha": "e4cc9cb917edebfb7b2a52c8671939dee3a454f4", "filename": "src/test/mir-opt/dataflow-const-prop/previous/bad_op_unsafe_oob_for_slices.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_unsafe_oob_for_slices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_unsafe_oob_for_slices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_unsafe_oob_for_slices.rs?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,9 @@\n+// EMIT_MIR_FOR_EACH_BIT_WIDTH\n+// EMIT_MIR bad_op_unsafe_oob_for_slices.main.DataflowConstProp.diff\n+#[allow(unconditional_panic)]\n+fn main() {\n+    let a: *const [_] = &[1, 2, 3];\n+    unsafe {\n+        let _b = (*a)[3];\n+    }\n+}"}, {"sha": "578f9830cf221a649597232fe9b45644cd3b2d4e", "filename": "src/test/mir-opt/dataflow-const-prop/previous/boolean_identities.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fboolean_identities.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fboolean_identities.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fboolean_identities.rs?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,11 @@\n+// unit-test: DataflowConstProp\n+// compile-flags: -O -Zmir-opt-level=4\n+\n+// EMIT_MIR boolean_identities.test.DataflowConstProp.diff\n+pub fn test(x: bool, y: bool) -> bool {\n+    (y | true) & (x & false)\n+}\n+\n+fn main() {\n+    test(true, false);\n+}"}, {"sha": "90236fcf0a9356a03ec3dc06667f53195da09109", "filename": "src/test/mir-opt/dataflow-const-prop/previous/boolean_identities.test.DataflowConstProp.diff", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fboolean_identities.test.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fboolean_identities.test.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fboolean_identities.test.DataflowConstProp.diff?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,33 @@\n+- // MIR for `test` before DataflowConstProp\n++ // MIR for `test` after DataflowConstProp\n+  \n+  fn test(_1: bool, _2: bool) -> bool {\n+      debug x => _1;                       // in scope 0 at $DIR/boolean_identities.rs:+0:13: +0:14\n+      debug y => _2;                       // in scope 0 at $DIR/boolean_identities.rs:+0:22: +0:23\n+      let mut _0: bool;                    // return place in scope 0 at $DIR/boolean_identities.rs:+0:34: +0:38\n+      let mut _3: bool;                    // in scope 0 at $DIR/boolean_identities.rs:+1:5: +1:15\n+      let mut _4: bool;                    // in scope 0 at $DIR/boolean_identities.rs:+1:6: +1:7\n+      let mut _5: bool;                    // in scope 0 at $DIR/boolean_identities.rs:+1:18: +1:29\n+      let mut _6: bool;                    // in scope 0 at $DIR/boolean_identities.rs:+1:19: +1:20\n+  \n+      bb0: {\n+          StorageLive(_3);                 // scope 0 at $DIR/boolean_identities.rs:+1:5: +1:15\n+          StorageLive(_4);                 // scope 0 at $DIR/boolean_identities.rs:+1:6: +1:7\n+          _4 = _2;                         // scope 0 at $DIR/boolean_identities.rs:+1:6: +1:7\n+-         _3 = BitOr(move _4, const true); // scope 0 at $DIR/boolean_identities.rs:+1:5: +1:15\n++         _3 = const true;                 // scope 0 at $DIR/boolean_identities.rs:+1:5: +1:15\n+          StorageDead(_4);                 // scope 0 at $DIR/boolean_identities.rs:+1:14: +1:15\n+          StorageLive(_5);                 // scope 0 at $DIR/boolean_identities.rs:+1:18: +1:29\n+          StorageLive(_6);                 // scope 0 at $DIR/boolean_identities.rs:+1:19: +1:20\n+          _6 = _1;                         // scope 0 at $DIR/boolean_identities.rs:+1:19: +1:20\n+-         _5 = BitAnd(move _6, const false); // scope 0 at $DIR/boolean_identities.rs:+1:18: +1:29\n++         _5 = const false;                // scope 0 at $DIR/boolean_identities.rs:+1:18: +1:29\n+          StorageDead(_6);                 // scope 0 at $DIR/boolean_identities.rs:+1:28: +1:29\n+-         _0 = BitAnd(move _3, move _5);   // scope 0 at $DIR/boolean_identities.rs:+1:5: +1:29\n++         _0 = const false;                // scope 0 at $DIR/boolean_identities.rs:+1:5: +1:29\n+          StorageDead(_5);                 // scope 0 at $DIR/boolean_identities.rs:+1:28: +1:29\n+          StorageDead(_3);                 // scope 0 at $DIR/boolean_identities.rs:+1:28: +1:29\n+          return;                          // scope 0 at $DIR/boolean_identities.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "2d8604440deb3d422218b01b2792fe08859f22ab", "filename": "src/test/mir-opt/dataflow-const-prop/previous/boxes.main.DataflowConstProp.diff", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fboxes.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fboxes.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fboxes.main.DataflowConstProp.diff?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,60 @@\n+- // MIR for `main` before DataflowConstProp\n++ // MIR for `main` after DataflowConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/boxes.rs:+0:11: +0:11\n+      let _1: i32;                         // in scope 0 at $DIR/boxes.rs:+1:9: +1:10\n+      let mut _2: i32;                     // in scope 0 at $DIR/boxes.rs:+1:13: +1:22\n+      let mut _3: std::boxed::Box<i32>;    // in scope 0 at $DIR/boxes.rs:+1:14: +1:22\n+      let mut _4: usize;                   // in scope 0 at $DIR/boxes.rs:+1:14: +1:22\n+      let mut _5: usize;                   // in scope 0 at $DIR/boxes.rs:+1:14: +1:22\n+      let mut _6: *mut u8;                 // in scope 0 at $DIR/boxes.rs:+1:14: +1:22\n+      let mut _7: std::boxed::Box<i32>;    // in scope 0 at $DIR/boxes.rs:+1:14: +1:22\n+      let mut _8: *const i32;              // in scope 0 at $DIR/boxes.rs:+1:14: +1:22\n+      let mut _9: *const i32;              // in scope 0 at $DIR/boxes.rs:+1:14: +1:22\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/boxes.rs:+1:9: +1:10\n+      }\n+      scope 2 {\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/boxes.rs:+1:9: +1:10\n+          StorageLive(_2);                 // scope 0 at $DIR/boxes.rs:+1:13: +1:22\n+          StorageLive(_3);                 // scope 0 at $DIR/boxes.rs:+1:14: +1:22\n+-         _4 = SizeOf(i32);                // scope 2 at $DIR/boxes.rs:+1:14: +1:22\n+-         _5 = AlignOf(i32);               // scope 2 at $DIR/boxes.rs:+1:14: +1:22\n++         _4 = const 4_usize;              // scope 2 at $DIR/boxes.rs:+1:14: +1:22\n++         _5 = const 4_usize;              // scope 2 at $DIR/boxes.rs:+1:14: +1:22\n+          _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> bb1; // scope 2 at $DIR/boxes.rs:+1:14: +1:22\n+                                           // mir::Constant\n+                                           // + span: $DIR/boxes.rs:13:14: 13:22\n+                                           // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          StorageLive(_7);                 // scope 0 at $DIR/boxes.rs:+1:14: +1:22\n+          _7 = ShallowInitBox(move _6, i32); // scope 0 at $DIR/boxes.rs:+1:14: +1:22\n+          _8 = (((_7.0: std::ptr::Unique<i32>).0: std::ptr::NonNull<i32>).0: *const i32); // scope 0 at $DIR/boxes.rs:+1:19: +1:21\n+          (*_8) = const 42_i32;            // scope 0 at $DIR/boxes.rs:+1:19: +1:21\n+          _3 = move _7;                    // scope 0 at $DIR/boxes.rs:+1:14: +1:22\n+          StorageDead(_7);                 // scope 0 at $DIR/boxes.rs:+1:21: +1:22\n+          _9 = (((_3.0: std::ptr::Unique<i32>).0: std::ptr::NonNull<i32>).0: *const i32); // scope 0 at $DIR/boxes.rs:+1:13: +1:22\n+          _2 = (*_9);                      // scope 0 at $DIR/boxes.rs:+1:13: +1:22\n+          _1 = Add(move _2, const 0_i32);  // scope 0 at $DIR/boxes.rs:+1:13: +1:26\n+          StorageDead(_2);                 // scope 0 at $DIR/boxes.rs:+1:25: +1:26\n+          drop(_3) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/boxes.rs:+1:26: +1:27\n+      }\n+  \n+      bb2: {\n+          StorageDead(_3);                 // scope 0 at $DIR/boxes.rs:+1:26: +1:27\n+          _0 = const ();                   // scope 0 at $DIR/boxes.rs:+0:11: +2:2\n+          StorageDead(_1);                 // scope 0 at $DIR/boxes.rs:+2:1: +2:2\n+          return;                          // scope 0 at $DIR/boxes.rs:+2:2: +2:2\n+      }\n+  \n+      bb3 (cleanup): {\n+          resume;                          // scope 0 at $DIR/boxes.rs:+0:1: +2:2\n+      }\n+  }\n+  "}, {"sha": "8b0c13c2eb6f576494bb775a8c7197c3755e4603", "filename": "src/test/mir-opt/dataflow-const-prop/previous/boxes.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fboxes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fboxes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fboxes.rs?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,14 @@\n+// unit-test: DataflowConstProp\n+// compile-flags: -O\n+// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32\n+// ignore-wasm64\n+\n+#![feature(box_syntax)]\n+\n+// Note: this test verifies that we, in fact, do not const prop `box`\n+\n+// EMIT_MIR boxes.main.DataflowConstProp.diff\n+fn main() {\n+    let x = *(box 42) + 0;\n+}"}, {"sha": "fb346993d6133258f69cb8b833607b1b27e4df59", "filename": "src/test/mir-opt/dataflow-const-prop/previous/cast.main.DataflowConstProp.diff", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fcast.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fcast.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fcast.main.DataflowConstProp.diff?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,28 @@\n+- // MIR for `main` before DataflowConstProp\n++ // MIR for `main` after DataflowConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/cast.rs:+0:11: +0:11\n+      let _1: u32;                         // in scope 0 at $DIR/cast.rs:+1:9: +1:10\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/cast.rs:+1:9: +1:10\n+          let _2: u8;                      // in scope 1 at $DIR/cast.rs:+3:9: +3:10\n+          scope 2 {\n+              debug y => _2;               // in scope 2 at $DIR/cast.rs:+3:9: +3:10\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/cast.rs:+1:9: +1:10\n+-         _1 = const 42_u8 as u32 (Misc);  // scope 0 at $DIR/cast.rs:+1:13: +1:24\n++         _1 = const 42_u32;               // scope 0 at $DIR/cast.rs:+1:13: +1:24\n+          StorageLive(_2);                 // scope 1 at $DIR/cast.rs:+3:9: +3:10\n+-         _2 = const 42_u32 as u8 (Misc);  // scope 1 at $DIR/cast.rs:+3:13: +3:24\n++         _2 = const 42_u8;                // scope 1 at $DIR/cast.rs:+3:13: +3:24\n+          _0 = const ();                   // scope 0 at $DIR/cast.rs:+0:11: +4:2\n+          StorageDead(_2);                 // scope 1 at $DIR/cast.rs:+4:1: +4:2\n+          StorageDead(_1);                 // scope 0 at $DIR/cast.rs:+4:1: +4:2\n+          return;                          // scope 0 at $DIR/cast.rs:+4:2: +4:2\n+      }\n+  }\n+  "}, {"sha": "25cc1839ff01939c3153fa3094140ca748e4e0d1", "filename": "src/test/mir-opt/dataflow-const-prop/previous/cast.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fcast.rs?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,8 @@\n+// unit-test: DataflowConstProp\n+// EMIT_MIR cast.main.DataflowConstProp.diff\n+\n+fn main() {\n+    let x = 42u8 as u32;\n+\n+    let y = 42u32 as u8;\n+}"}, {"sha": "4a40fd27497c42b817259d4bf42cc209e2d5e578", "filename": "src/test/mir-opt/dataflow-const-prop/previous/checked_add.main.DataflowConstProp.diff", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fchecked_add.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fchecked_add.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fchecked_add.main.DataflowConstProp.diff?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,28 @@\n+- // MIR for `main` before DataflowConstProp\n++ // MIR for `main` after DataflowConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/checked_add.rs:+0:11: +0:11\n+      let _1: u32;                         // in scope 0 at $DIR/checked_add.rs:+1:9: +1:10\n+      let mut _2: (u32, bool);             // in scope 0 at $DIR/checked_add.rs:+1:18: +1:23\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/checked_add.rs:+1:9: +1:10\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/checked_add.rs:+1:9: +1:10\n+-         _2 = CheckedAdd(const 1_u32, const 1_u32); // scope 0 at $DIR/checked_add.rs:+1:18: +1:23\n+-         assert(!move (_2.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const 1_u32, const 1_u32) -> bb1; // scope 0 at $DIR/checked_add.rs:+1:18: +1:23\n++         _2 = const (2_u32, false);       // scope 0 at $DIR/checked_add.rs:+1:18: +1:23\n++         assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", const 1_u32, const 1_u32) -> bb1; // scope 0 at $DIR/checked_add.rs:+1:18: +1:23\n+      }\n+  \n+      bb1: {\n+-         _1 = move (_2.0: u32);           // scope 0 at $DIR/checked_add.rs:+1:18: +1:23\n++         _1 = const 2_u32;                // scope 0 at $DIR/checked_add.rs:+1:18: +1:23\n+          _0 = const ();                   // scope 0 at $DIR/checked_add.rs:+0:11: +2:2\n+          StorageDead(_1);                 // scope 0 at $DIR/checked_add.rs:+2:1: +2:2\n+          return;                          // scope 0 at $DIR/checked_add.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "e7cb047098989b4f24fbd9438232ea3c259cf664", "filename": "src/test/mir-opt/dataflow-const-prop/previous/checked_add.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fchecked_add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fchecked_add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fchecked_add.rs?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,7 @@\n+// unit-test: DataflowConstProp\n+// compile-flags: -C overflow-checks=on\n+\n+// EMIT_MIR checked_add.main.DataflowConstProp.diff\n+fn main() {\n+    let x: u32 = 1 + 1;\n+}"}, {"sha": "17b63065df020f1f13b8a2239d0b0193d97d209e", "filename": "src/test/mir-opt/dataflow-const-prop/previous/const_prop_fails_gracefully.main.DataflowConstProp.diff", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fconst_prop_fails_gracefully.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fconst_prop_fails_gracefully.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fconst_prop_fails_gracefully.main.DataflowConstProp.diff?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,44 @@\n+- // MIR for `main` before DataflowConstProp\n++ // MIR for `main` after DataflowConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/const_prop_fails_gracefully.rs:+0:11: +0:11\n+      let _1: usize;                       // in scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:9: +2:10\n+      let mut _2: *const i32;              // in scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:13: +2:30\n+      let _3: &i32;                        // in scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:13: +2:16\n+      let _4: ();                          // in scope 0 at $DIR/const_prop_fails_gracefully.rs:+3:5: +3:12\n+      let mut _5: usize;                   // in scope 0 at $DIR/const_prop_fails_gracefully.rs:+3:10: +3:11\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/const_prop_fails_gracefully.rs:+2:9: +2:10\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:9: +2:10\n+          StorageLive(_2);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:13: +2:30\n+          StorageLive(_3);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:13: +2:16\n+          _3 = const FOO;                  // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:13: +2:16\n+                                           // mir::Constant\n+                                           // + span: $DIR/const_prop_fails_gracefully.rs:8:13: 8:16\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(FOO, [], None) }\n+          _2 = &raw const (*_3);           // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:13: +2:16\n+          _1 = move _2 as usize (PointerExposeAddress); // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:13: +2:39\n+          StorageDead(_2);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:38: +2:39\n+          StorageDead(_3);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:39: +2:40\n+          StorageLive(_4);                 // scope 1 at $DIR/const_prop_fails_gracefully.rs:+3:5: +3:12\n+          StorageLive(_5);                 // scope 1 at $DIR/const_prop_fails_gracefully.rs:+3:10: +3:11\n+          _5 = _1;                         // scope 1 at $DIR/const_prop_fails_gracefully.rs:+3:10: +3:11\n+          _4 = read(move _5) -> bb1;       // scope 1 at $DIR/const_prop_fails_gracefully.rs:+3:5: +3:12\n+                                           // mir::Constant\n+                                           // + span: $DIR/const_prop_fails_gracefully.rs:9:5: 9:9\n+                                           // + literal: Const { ty: fn(usize) {read}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_5);                 // scope 1 at $DIR/const_prop_fails_gracefully.rs:+3:11: +3:12\n+          StorageDead(_4);                 // scope 1 at $DIR/const_prop_fails_gracefully.rs:+3:12: +3:13\n+          _0 = const ();                   // scope 0 at $DIR/const_prop_fails_gracefully.rs:+0:11: +4:2\n+          StorageDead(_1);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:+4:1: +4:2\n+          return;                          // scope 0 at $DIR/const_prop_fails_gracefully.rs:+4:2: +4:2\n+      }\n+  }\n+  "}, {"sha": "59b2f9caf2eaf0025d461bb748cc1de83a679655", "filename": "src/test/mir-opt/dataflow-const-prop/previous/const_prop_fails_gracefully.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fconst_prop_fails_gracefully.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fconst_prop_fails_gracefully.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fconst_prop_fails_gracefully.rs?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,10 @@\n+// unit-test: DataflowConstProp\n+#[inline(never)]\n+fn read(_: usize) {}\n+\n+// EMIT_MIR const_prop_fails_gracefully.main.DataflowConstProp.diff\n+fn main() {\n+    const FOO: &i32 = &1;\n+    let x = FOO as *const i32 as usize;\n+    read(x);\n+}"}, {"sha": "e1269628d2f1a1aded008a387c34e184a977a55d", "filename": "src/test/mir-opt/dataflow-const-prop/previous/control-flow-simplification.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fcontrol-flow-simplification.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fcontrol-flow-simplification.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fcontrol-flow-simplification.rs?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,21 @@\n+// unit-test: DataflowConstProp\n+// compile-flags: -Zmir-opt-level=1\n+\n+trait NeedsDrop: Sized {\n+    const NEEDS: bool = std::mem::needs_drop::<Self>();\n+}\n+\n+impl<This> NeedsDrop for This {}\n+\n+// EMIT_MIR control_flow_simplification.hello.DataflowConstProp.diff\n+// EMIT_MIR control_flow_simplification.hello.PreCodegen.before.mir\n+fn hello<T>() {\n+    if <bool>::NEEDS {\n+        panic!()\n+    }\n+}\n+\n+pub fn main() {\n+    hello::<()>();\n+    hello::<Vec<()>>();\n+}"}, {"sha": "2faa8422e5ea9c281bc372ca7011da151ba3f040", "filename": "src/test/mir-opt/dataflow-const-prop/previous/control_flow_simplification.hello.DataflowConstProp.diff", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fcontrol_flow_simplification.hello.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fcontrol_flow_simplification.hello.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fcontrol_flow_simplification.hello.DataflowConstProp.diff?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,34 @@\n+- // MIR for `hello` before DataflowConstProp\n++ // MIR for `hello` after DataflowConstProp\n+  \n+  fn hello() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/control-flow-simplification.rs:+0:14: +0:14\n+      let mut _1: bool;                    // in scope 0 at $DIR/control-flow-simplification.rs:+1:8: +1:21\n+      let mut _2: !;                       // in scope 0 at $SRC_DIR/std/src/panic.rs:LL:COL\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/control-flow-simplification.rs:+1:8: +1:21\n+-         _1 = const <bool as NeedsDrop>::NEEDS; // scope 0 at $DIR/control-flow-simplification.rs:+1:8: +1:21\n+-         switchInt(move _1) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/control-flow-simplification.rs:+1:8: +1:21\n++         _1 = const false;                // scope 0 at $DIR/control-flow-simplification.rs:+1:8: +1:21\n++         switchInt(const false) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/control-flow-simplification.rs:+1:8: +1:21\n+      }\n+  \n+      bb1: {\n+          StorageLive(_2);                 // scope 0 at $SRC_DIR/std/src/panic.rs:LL:COL\n+          _2 = begin_panic::<&str>(const \"explicit panic\"); // scope 0 at $SRC_DIR/std/src/panic.rs:LL:COL\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/std/src/panic.rs:LL:COL\n+                                           // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/std/src/panic.rs:LL:COL\n+                                           // + literal: Const { ty: &str, val: Value(Slice(..)) }\n+      }\n+  \n+      bb2: {\n+          nop;                             // scope 0 at $DIR/control-flow-simplification.rs:+3:6: +3:6\n+          StorageDead(_1);                 // scope 0 at $DIR/control-flow-simplification.rs:+3:5: +3:6\n+          return;                          // scope 0 at $DIR/control-flow-simplification.rs:+4:2: +4:2\n+      }\n+  }\n+  "}, {"sha": "70f9797751131f61cfac51ee1529e1a26ddb308f", "filename": "src/test/mir-opt/dataflow-const-prop/previous/control_flow_simplification.hello.PreCodegen.before.mir", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fcontrol_flow_simplification.hello.PreCodegen.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fcontrol_flow_simplification.hello.PreCodegen.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fcontrol_flow_simplification.hello.PreCodegen.before.mir?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,9 @@\n+// MIR for `hello` before PreCodegen\n+\n+fn hello() -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/control-flow-simplification.rs:+0:14: +0:14\n+\n+    bb0: {\n+        return;                          // scope 0 at $DIR/control-flow-simplification.rs:+4:2: +4:2\n+    }\n+}"}, {"sha": "e527e2e1a5451dbbf7b6fa84e8fdff1d066760c3", "filename": "src/test/mir-opt/dataflow-const-prop/previous/discriminant.main.DataflowConstProp.32bit.diff", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fdiscriminant.main.DataflowConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fdiscriminant.main.DataflowConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fdiscriminant.main.DataflowConstProp.32bit.diff?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,52 @@\n+- // MIR for `main` before DataflowConstProp\n++ // MIR for `main` after DataflowConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/discriminant.rs:+0:11: +0:11\n+      let _1: i32;                         // in scope 0 at $DIR/discriminant.rs:+1:9: +1:10\n+      let mut _2: i32;                     // in scope 0 at $DIR/discriminant.rs:+1:13: +1:64\n+      let mut _3: std::option::Option<bool>; // in scope 0 at $DIR/discriminant.rs:+1:34: +1:44\n+      let mut _4: isize;                   // in scope 0 at $DIR/discriminant.rs:+1:21: +1:31\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/discriminant.rs:+1:9: +1:10\n+      }\n+      scope 2 {\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/discriminant.rs:+1:9: +1:10\n+          StorageLive(_2);                 // scope 0 at $DIR/discriminant.rs:+1:13: +1:64\n+          StorageLive(_3);                 // scope 2 at $DIR/discriminant.rs:+1:34: +1:44\n+          Deinit(_3);                      // scope 2 at $DIR/discriminant.rs:+1:34: +1:44\n+          ((_3 as Some).0: bool) = const true; // scope 2 at $DIR/discriminant.rs:+1:34: +1:44\n+          discriminant(_3) = 1;            // scope 2 at $DIR/discriminant.rs:+1:34: +1:44\n+-         _4 = discriminant(_3);           // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n+-         switchInt(move _4) -> [1_isize: bb1, otherwise: bb3]; // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n++         _4 = const 1_isize;              // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n++         switchInt(const 1_isize) -> [1_isize: bb1, otherwise: bb3]; // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n+      }\n+  \n+      bb1: {\n+          switchInt(((_3 as Some).0: bool)) -> [false: bb3, otherwise: bb2]; // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n+      }\n+  \n+      bb2: {\n+          _2 = const 42_i32;               // scope 2 at $DIR/discriminant.rs:+1:47: +1:49\n+          goto -> bb4;                     // scope 0 at $DIR/discriminant.rs:+1:13: +1:64\n+      }\n+  \n+      bb3: {\n+          _2 = const 10_i32;               // scope 0 at $DIR/discriminant.rs:+1:59: +1:61\n+          goto -> bb4;                     // scope 0 at $DIR/discriminant.rs:+1:13: +1:64\n+      }\n+  \n+      bb4: {\n+          _1 = Add(move _2, const 0_i32);  // scope 0 at $DIR/discriminant.rs:+1:13: +1:68\n+          StorageDead(_2);                 // scope 0 at $DIR/discriminant.rs:+1:67: +1:68\n+          StorageDead(_3);                 // scope 0 at $DIR/discriminant.rs:+1:68: +1:69\n+          _0 = const ();                   // scope 0 at $DIR/discriminant.rs:+0:11: +2:2\n+          StorageDead(_1);                 // scope 0 at $DIR/discriminant.rs:+2:1: +2:2\n+          return;                          // scope 0 at $DIR/discriminant.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "e527e2e1a5451dbbf7b6fa84e8fdff1d066760c3", "filename": "src/test/mir-opt/dataflow-const-prop/previous/discriminant.main.DataflowConstProp.64bit.diff", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fdiscriminant.main.DataflowConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fdiscriminant.main.DataflowConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fdiscriminant.main.DataflowConstProp.64bit.diff?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,52 @@\n+- // MIR for `main` before DataflowConstProp\n++ // MIR for `main` after DataflowConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/discriminant.rs:+0:11: +0:11\n+      let _1: i32;                         // in scope 0 at $DIR/discriminant.rs:+1:9: +1:10\n+      let mut _2: i32;                     // in scope 0 at $DIR/discriminant.rs:+1:13: +1:64\n+      let mut _3: std::option::Option<bool>; // in scope 0 at $DIR/discriminant.rs:+1:34: +1:44\n+      let mut _4: isize;                   // in scope 0 at $DIR/discriminant.rs:+1:21: +1:31\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/discriminant.rs:+1:9: +1:10\n+      }\n+      scope 2 {\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/discriminant.rs:+1:9: +1:10\n+          StorageLive(_2);                 // scope 0 at $DIR/discriminant.rs:+1:13: +1:64\n+          StorageLive(_3);                 // scope 2 at $DIR/discriminant.rs:+1:34: +1:44\n+          Deinit(_3);                      // scope 2 at $DIR/discriminant.rs:+1:34: +1:44\n+          ((_3 as Some).0: bool) = const true; // scope 2 at $DIR/discriminant.rs:+1:34: +1:44\n+          discriminant(_3) = 1;            // scope 2 at $DIR/discriminant.rs:+1:34: +1:44\n+-         _4 = discriminant(_3);           // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n+-         switchInt(move _4) -> [1_isize: bb1, otherwise: bb3]; // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n++         _4 = const 1_isize;              // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n++         switchInt(const 1_isize) -> [1_isize: bb1, otherwise: bb3]; // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n+      }\n+  \n+      bb1: {\n+          switchInt(((_3 as Some).0: bool)) -> [false: bb3, otherwise: bb2]; // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n+      }\n+  \n+      bb2: {\n+          _2 = const 42_i32;               // scope 2 at $DIR/discriminant.rs:+1:47: +1:49\n+          goto -> bb4;                     // scope 0 at $DIR/discriminant.rs:+1:13: +1:64\n+      }\n+  \n+      bb3: {\n+          _2 = const 10_i32;               // scope 0 at $DIR/discriminant.rs:+1:59: +1:61\n+          goto -> bb4;                     // scope 0 at $DIR/discriminant.rs:+1:13: +1:64\n+      }\n+  \n+      bb4: {\n+          _1 = Add(move _2, const 0_i32);  // scope 0 at $DIR/discriminant.rs:+1:13: +1:68\n+          StorageDead(_2);                 // scope 0 at $DIR/discriminant.rs:+1:67: +1:68\n+          StorageDead(_3);                 // scope 0 at $DIR/discriminant.rs:+1:68: +1:69\n+          _0 = const ();                   // scope 0 at $DIR/discriminant.rs:+0:11: +2:2\n+          StorageDead(_1);                 // scope 0 at $DIR/discriminant.rs:+2:1: +2:2\n+          return;                          // scope 0 at $DIR/discriminant.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "5399bc2599778154392473fe71348f67f0e4fae6", "filename": "src/test/mir-opt/dataflow-const-prop/previous/discriminant.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fdiscriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fdiscriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fdiscriminant.rs?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,13 @@\n+// unit-test: DataflowConstProp\n+// compile-flags: -O\n+\n+// FIXME(wesleywiser): Ideally, we could const-prop away all of this and just be left with\n+// `let x = 42` but that doesn't work because const-prop doesn't support `Operand::Indirect`\n+// and `InterpCx::eval_place()` always forces an allocation which creates the `Indirect`.\n+// Fixing either of those will allow us to const-prop this away.\n+\n+// EMIT_MIR_FOR_EACH_BIT_WIDTH\n+// EMIT_MIR discriminant.main.DataflowConstProp.diff\n+fn main() {\n+    let x = (if let Some(true) = Some(true) { 42 } else { 10 }) + 0;\n+}"}, {"sha": "f5b23abfb3bcbc369a7f7cb4b96b2cbf255efca5", "filename": "src/test/mir-opt/dataflow-const-prop/previous/indirect.main.DataflowConstProp.diff", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Findirect.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Findirect.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Findirect.main.DataflowConstProp.diff?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,33 @@\n+- // MIR for `main` before DataflowConstProp\n++ // MIR for `main` after DataflowConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/indirect.rs:+0:11: +0:11\n+      let _1: u8;                          // in scope 0 at $DIR/indirect.rs:+1:9: +1:10\n+      let mut _2: u8;                      // in scope 0 at $DIR/indirect.rs:+1:13: +1:25\n+      let mut _3: (u8, bool);              // in scope 0 at $DIR/indirect.rs:+1:13: +1:29\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/indirect.rs:+1:9: +1:10\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/indirect.rs:+1:9: +1:10\n+          StorageLive(_2);                 // scope 0 at $DIR/indirect.rs:+1:13: +1:25\n+-         _2 = const 2_u32 as u8 (Misc);   // scope 0 at $DIR/indirect.rs:+1:13: +1:25\n+-         _3 = CheckedAdd(_2, const 1_u8); // scope 0 at $DIR/indirect.rs:+1:13: +1:29\n+-         assert(!move (_3.1: bool), \"attempt to compute `{} + {}`, which would overflow\", move _2, const 1_u8) -> bb1; // scope 0 at $DIR/indirect.rs:+1:13: +1:29\n++         _2 = const 2_u8;                 // scope 0 at $DIR/indirect.rs:+1:13: +1:25\n++         _3 = const (3_u8, false);        // scope 0 at $DIR/indirect.rs:+1:13: +1:29\n++         assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", move _2, const 1_u8) -> bb1; // scope 0 at $DIR/indirect.rs:+1:13: +1:29\n+      }\n+  \n+      bb1: {\n+-         _1 = move (_3.0: u8);            // scope 0 at $DIR/indirect.rs:+1:13: +1:29\n++         _1 = const 3_u8;                 // scope 0 at $DIR/indirect.rs:+1:13: +1:29\n+          StorageDead(_2);                 // scope 0 at $DIR/indirect.rs:+1:28: +1:29\n+          _0 = const ();                   // scope 0 at $DIR/indirect.rs:+0:11: +2:2\n+          StorageDead(_1);                 // scope 0 at $DIR/indirect.rs:+2:1: +2:2\n+          return;                          // scope 0 at $DIR/indirect.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "d8d79d29b8a417a40c74884e945909ee5e40d30c", "filename": "src/test/mir-opt/dataflow-const-prop/previous/indirect.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Findirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Findirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Findirect.rs?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,7 @@\n+// unit-test: DataflowConstProp\n+// compile-flags: -C overflow-checks=on\n+\n+// EMIT_MIR indirect.main.DataflowConstProp.diff\n+fn main() {\n+    let x = (2u32 as u8) + 1;\n+}"}, {"sha": "b8713d31ad742aa39e38c5caab2ed1764eb9678b", "filename": "src/test/mir-opt/dataflow-const-prop/previous/invalid_constant.main.DataflowConstProp.diff", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Finvalid_constant.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Finvalid_constant.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Finvalid_constant.main.DataflowConstProp.diff?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,77 @@\n+- // MIR for `main` before DataflowConstProp\n++ // MIR for `main` after DataflowConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/invalid_constant.rs:+0:11: +0:11\n+      let _1: char;                        // in scope 0 at $DIR/invalid_constant.rs:+6:9: +6:22\n+      let mut _2: main::InvalidChar;       // in scope 0 at $DIR/invalid_constant.rs:+6:34: +6:63\n+      let mut _4: E;                       // in scope 0 at $DIR/invalid_constant.rs:+13:25: +13:59\n+      let mut _5: main::InvalidTag;        // in scope 0 at $DIR/invalid_constant.rs:+13:34: +13:55\n+      let mut _7: Empty;                   // in scope 0 at $DIR/invalid_constant.rs:+20:35: +20:73\n+      let mut _8: main::NoVariants;        // in scope 0 at $DIR/invalid_constant.rs:+20:44: +20:65\n+      scope 1 {\n+          debug _invalid_char => _1;       // in scope 1 at $DIR/invalid_constant.rs:+6:9: +6:22\n+          let _3: [E; 1];                  // in scope 1 at $DIR/invalid_constant.rs:+13:9: +13:21\n+          scope 3 {\n+              debug _invalid_tag => _3;    // in scope 3 at $DIR/invalid_constant.rs:+13:9: +13:21\n+              let _6: [Empty; 1];          // in scope 3 at $DIR/invalid_constant.rs:+20:9: +20:31\n+              scope 5 {\n+                  debug _enum_without_variants => _6; // in scope 5 at $DIR/invalid_constant.rs:+20:9: +20:31\n+                  let _9: main::Str<\"\ufffd\ufffd\ufffd\">; // in scope 5 at $DIR/invalid_constant.rs:+24:9: +24:22\n+                  scope 7 {\n+                      debug _non_utf8_str => _9; // in scope 7 at $DIR/invalid_constant.rs:+24:9: +24:22\n+                  }\n+              }\n+              scope 6 {\n+              }\n+          }\n+          scope 4 {\n+          }\n+      }\n+      scope 2 {\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/invalid_constant.rs:+6:9: +6:22\n+          StorageLive(_2);                 // scope 2 at $DIR/invalid_constant.rs:+6:34: +6:63\n+          Deinit(_2);                      // scope 2 at $DIR/invalid_constant.rs:+6:34: +6:63\n+          (_2.0: u32) = const 1114113_u32; // scope 2 at $DIR/invalid_constant.rs:+6:34: +6:63\n+-         _1 = (_2.1: char);               // scope 2 at $DIR/invalid_constant.rs:+6:34: +6:67\n++         _1 = const {transmute(0x00110001): char}; // scope 2 at $DIR/invalid_constant.rs:+6:34: +6:67\n+          StorageDead(_2);                 // scope 0 at $DIR/invalid_constant.rs:+6:69: +6:70\n+          StorageLive(_3);                 // scope 1 at $DIR/invalid_constant.rs:+13:9: +13:21\n+          StorageLive(_4);                 // scope 1 at $DIR/invalid_constant.rs:+13:25: +13:59\n+          StorageLive(_5);                 // scope 4 at $DIR/invalid_constant.rs:+13:34: +13:55\n+          Deinit(_5);                      // scope 4 at $DIR/invalid_constant.rs:+13:34: +13:55\n+          (_5.0: u32) = const 4_u32;       // scope 4 at $DIR/invalid_constant.rs:+13:34: +13:55\n+-         _4 = (_5.1: E);                  // scope 4 at $DIR/invalid_constant.rs:+13:34: +13:57\n+-         _3 = [move _4];                  // scope 1 at $DIR/invalid_constant.rs:+13:24: +13:60\n++         _4 = const Scalar(0x00000004): E; // scope 4 at $DIR/invalid_constant.rs:+13:34: +13:57\n++                                          // mir::Constant\n++                                          // + span: $DIR/invalid_constant.rs:28:34: 28:57\n++                                          // + literal: Const { ty: E, val: Value(Scalar(0x00000004)) }\n++         _3 = [const Scalar(0x00000004): E]; // scope 1 at $DIR/invalid_constant.rs:+13:24: +13:60\n++                                          // mir::Constant\n++                                          // + span: $DIR/invalid_constant.rs:28:24: 28:60\n++                                          // + literal: Const { ty: E, val: Value(Scalar(0x00000004)) }\n+          StorageDead(_4);                 // scope 1 at $DIR/invalid_constant.rs:+13:59: +13:60\n+          StorageDead(_5);                 // scope 1 at $DIR/invalid_constant.rs:+13:60: +13:61\n+          StorageLive(_6);                 // scope 3 at $DIR/invalid_constant.rs:+20:9: +20:31\n+          StorageLive(_7);                 // scope 3 at $DIR/invalid_constant.rs:+20:35: +20:73\n+          StorageLive(_8);                 // scope 6 at $DIR/invalid_constant.rs:+20:44: +20:65\n+          Deinit(_8);                      // scope 6 at $DIR/invalid_constant.rs:+20:44: +20:65\n+          (_8.0: u32) = const 0_u32;       // scope 6 at $DIR/invalid_constant.rs:+20:44: +20:65\n+          nop;                             // scope 6 at $DIR/invalid_constant.rs:+20:44: +20:71\n+          nop;                             // scope 3 at $DIR/invalid_constant.rs:+20:34: +20:74\n+          StorageDead(_7);                 // scope 3 at $DIR/invalid_constant.rs:+20:73: +20:74\n+          StorageDead(_8);                 // scope 3 at $DIR/invalid_constant.rs:+20:74: +20:75\n+          StorageLive(_9);                 // scope 5 at $DIR/invalid_constant.rs:+24:9: +24:22\n+          nop;                             // scope 0 at $DIR/invalid_constant.rs:+0:11: +27:2\n+          StorageDead(_9);                 // scope 5 at $DIR/invalid_constant.rs:+27:1: +27:2\n+          StorageDead(_6);                 // scope 3 at $DIR/invalid_constant.rs:+27:1: +27:2\n+          StorageDead(_3);                 // scope 1 at $DIR/invalid_constant.rs:+27:1: +27:2\n+          StorageDead(_1);                 // scope 0 at $DIR/invalid_constant.rs:+27:1: +27:2\n+          return;                          // scope 0 at $DIR/invalid_constant.rs:+27:2: +27:2\n+      }\n+  }\n+  "}, {"sha": "296fdcf0bc43c1e79b702b43f46361acf882d45d", "filename": "src/test/mir-opt/dataflow-const-prop/previous/invalid_constant.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Finvalid_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Finvalid_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Finvalid_constant.rs?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,44 @@\n+// Verify that we can pretty print invalid constants.\n+\n+#![feature(adt_const_params)]\n+#![feature(inline_const)]\n+#![allow(incomplete_features)]\n+\n+#[derive(Copy, Clone)]\n+#[repr(u32)]\n+enum E {\n+    A,\n+    B,\n+    C,\n+}\n+\n+#[derive(Copy, Clone)]\n+enum Empty {}\n+\n+// EMIT_MIR invalid_constant.main.DataflowConstProp.diff\n+fn main() {\n+    // An invalid char.\n+    union InvalidChar {\n+        int: u32,\n+        chr: char,\n+    }\n+    let _invalid_char = unsafe { InvalidChar { int: 0x110001 }.chr };\n+\n+    // An enum with an invalid tag. Regression test for #93688.\n+    union InvalidTag {\n+        int: u32,\n+        e: E,\n+    }\n+    let _invalid_tag = [unsafe { InvalidTag { int: 4 }.e }];\n+\n+    // An enum without variants. Regression test for #94073.\n+    union NoVariants {\n+        int: u32,\n+        empty: Empty,\n+    }\n+    let _enum_without_variants = [unsafe { NoVariants { int: 0 }.empty }];\n+\n+    // A non-UTF-8 string slice. Regression test for #75763 and #78520.\n+    struct Str<const S: &'static str>;\n+    let _non_utf8_str: Str<{ unsafe { std::mem::transmute::<&[u8], &str>(&[0xC0, 0xC1, 0xF5]) } }>;\n+}"}, {"sha": "39f0ace71347e81a744ae3131dfb5f719880496f", "filename": "src/test/mir-opt/dataflow-const-prop/previous/issue-66971.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fissue-66971.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fissue-66971.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fissue-66971.rs?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,18 @@\n+// unit-test: DataflowConstProp\n+// compile-flags: -Z mir-opt-level=3\n+\n+// Due to a bug in propagating scalar pairs the assertion below used to fail. In the expected\n+// outputs below, after DataflowConstProp this is how _2 would look like with the bug:\n+//\n+//     _2 = (const Scalar(0x00) : (), const 0u8);\n+//\n+// Which has the wrong type.\n+\n+fn encode(this: ((), u8, u8)) {\n+    assert!(this.2 == 0);\n+}\n+\n+// EMIT_MIR issue_66971.main.DataflowConstProp.diff\n+fn main() {\n+    encode(((), 0, 0));\n+}"}, {"sha": "6d8b482a543ef3ce91622e87a6b0f9fcd4c83ca6", "filename": "src/test/mir-opt/dataflow-const-prop/previous/issue-67019.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fissue-67019.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fissue-67019.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fissue-67019.rs?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,13 @@\n+// unit-test: DataflowConstProp\n+// compile-flags: -Z mir-opt-level=3\n+\n+// This used to ICE in const-prop\n+\n+fn test(this: ((u8, u8),)) {\n+    assert!((this.0).0 == 1);\n+}\n+\n+// EMIT_MIR issue_67019.main.DataflowConstProp.diff\n+fn main() {\n+    test(((1, 2),));\n+}"}, {"sha": "62e94755f12837237b7ad2216364db81ad30c8d1", "filename": "src/test/mir-opt/dataflow-const-prop/previous/issue_66971.main.DataflowConstProp.diff", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fissue_66971.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fissue_66971.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fissue_66971.main.DataflowConstProp.diff?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,33 @@\n+- // MIR for `main` before DataflowConstProp\n++ // MIR for `main` after DataflowConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/issue-66971.rs:+0:11: +0:11\n+      let _1: ();                          // in scope 0 at $DIR/issue-66971.rs:+1:5: +1:23\n+      let mut _2: ((), u8, u8);            // in scope 0 at $DIR/issue-66971.rs:+1:12: +1:22\n+      let mut _3: ();                      // in scope 0 at $DIR/issue-66971.rs:+1:13: +1:15\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/issue-66971.rs:+1:5: +1:23\n+          StorageLive(_2);                 // scope 0 at $DIR/issue-66971.rs:+1:12: +1:22\n+          StorageLive(_3);                 // scope 0 at $DIR/issue-66971.rs:+1:13: +1:15\n+          nop;                             // scope 0 at $DIR/issue-66971.rs:+1:13: +1:15\n+          Deinit(_2);                      // scope 0 at $DIR/issue-66971.rs:+1:12: +1:22\n+          nop;                             // scope 0 at $DIR/issue-66971.rs:+1:12: +1:22\n+          (_2.1: u8) = const 0_u8;         // scope 0 at $DIR/issue-66971.rs:+1:12: +1:22\n+          (_2.2: u8) = const 0_u8;         // scope 0 at $DIR/issue-66971.rs:+1:12: +1:22\n+          StorageDead(_3);                 // scope 0 at $DIR/issue-66971.rs:+1:21: +1:22\n+          _1 = encode(move _2) -> bb1;     // scope 0 at $DIR/issue-66971.rs:+1:5: +1:23\n+                                           // mir::Constant\n+                                           // + span: $DIR/issue-66971.rs:17:5: 17:11\n+                                           // + literal: Const { ty: fn(((), u8, u8)) {encode}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_2);                 // scope 0 at $DIR/issue-66971.rs:+1:22: +1:23\n+          StorageDead(_1);                 // scope 0 at $DIR/issue-66971.rs:+1:23: +1:24\n+          nop;                             // scope 0 at $DIR/issue-66971.rs:+0:11: +2:2\n+          return;                          // scope 0 at $DIR/issue-66971.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "acd6b977d269a4df231c6dab8d4497819f28c31a", "filename": "src/test/mir-opt/dataflow-const-prop/previous/issue_67019.main.DataflowConstProp.diff", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fissue_67019.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fissue_67019.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fissue_67019.main.DataflowConstProp.diff?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,34 @@\n+- // MIR for `main` before DataflowConstProp\n++ // MIR for `main` after DataflowConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/issue-67019.rs:+0:11: +0:11\n+      let _1: ();                          // in scope 0 at $DIR/issue-67019.rs:+1:5: +1:20\n+      let mut _2: ((u8, u8),);             // in scope 0 at $DIR/issue-67019.rs:+1:10: +1:19\n+      let mut _3: (u8, u8);                // in scope 0 at $DIR/issue-67019.rs:+1:11: +1:17\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/issue-67019.rs:+1:5: +1:20\n+          StorageLive(_2);                 // scope 0 at $DIR/issue-67019.rs:+1:10: +1:19\n+          StorageLive(_3);                 // scope 0 at $DIR/issue-67019.rs:+1:11: +1:17\n+          Deinit(_3);                      // scope 0 at $DIR/issue-67019.rs:+1:11: +1:17\n+          (_3.0: u8) = const 1_u8;         // scope 0 at $DIR/issue-67019.rs:+1:11: +1:17\n+          (_3.1: u8) = const 2_u8;         // scope 0 at $DIR/issue-67019.rs:+1:11: +1:17\n+          Deinit(_2);                      // scope 0 at $DIR/issue-67019.rs:+1:10: +1:19\n+-         (_2.0: (u8, u8)) = move _3;      // scope 0 at $DIR/issue-67019.rs:+1:10: +1:19\n++         (_2.0: (u8, u8)) = const (1_u8, 2_u8); // scope 0 at $DIR/issue-67019.rs:+1:10: +1:19\n+          StorageDead(_3);                 // scope 0 at $DIR/issue-67019.rs:+1:18: +1:19\n+          _1 = test(move _2) -> bb1;       // scope 0 at $DIR/issue-67019.rs:+1:5: +1:20\n+                                           // mir::Constant\n+                                           // + span: $DIR/issue-67019.rs:12:5: 12:9\n+                                           // + literal: Const { ty: fn(((u8, u8),)) {test}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_2);                 // scope 0 at $DIR/issue-67019.rs:+1:19: +1:20\n+          StorageDead(_1);                 // scope 0 at $DIR/issue-67019.rs:+1:20: +1:21\n+          nop;                             // scope 0 at $DIR/issue-67019.rs:+0:11: +2:2\n+          return;                          // scope 0 at $DIR/issue-67019.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "eabe4ec6d0fb60d201dba2348008cb3430407ca2", "filename": "src/test/mir-opt/dataflow-const-prop/previous/large_array_index.main.DataflowConstProp.32bit.diff", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Flarge_array_index.main.DataflowConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Flarge_array_index.main.DataflowConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Flarge_array_index.main.DataflowConstProp.32bit.diff?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,37 @@\n+- // MIR for `main` before DataflowConstProp\n++ // MIR for `main` after DataflowConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/large_array_index.rs:+0:11: +0:11\n+      let _1: u8;                          // in scope 0 at $DIR/large_array_index.rs:+2:9: +2:10\n+      let mut _2: [u8; 5000];              // in scope 0 at $DIR/large_array_index.rs:+2:17: +2:29\n+      let _3: usize;                       // in scope 0 at $DIR/large_array_index.rs:+2:30: +2:31\n+      let mut _4: usize;                   // in scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n+      let mut _5: bool;                    // in scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/large_array_index.rs:+2:9: +2:10\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/large_array_index.rs:+2:9: +2:10\n+          StorageLive(_2);                 // scope 0 at $DIR/large_array_index.rs:+2:17: +2:29\n+          _2 = [const 0_u8; 5000];         // scope 0 at $DIR/large_array_index.rs:+2:17: +2:29\n+          StorageLive(_3);                 // scope 0 at $DIR/large_array_index.rs:+2:30: +2:31\n+          _3 = const 2_usize;              // scope 0 at $DIR/large_array_index.rs:+2:30: +2:31\n+          _4 = const 5000_usize;           // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n+-         _5 = Lt(_3, _4);                 // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n+-         assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n++         _5 = const true;                 // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n++         assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 5000_usize, const 2_usize) -> bb1; // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n+      }\n+  \n+      bb1: {\n+          _1 = _2[_3];                     // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n+          StorageDead(_3);                 // scope 0 at $DIR/large_array_index.rs:+2:32: +2:33\n+          StorageDead(_2);                 // scope 0 at $DIR/large_array_index.rs:+2:32: +2:33\n+          nop;                             // scope 0 at $DIR/large_array_index.rs:+0:11: +3:2\n+          StorageDead(_1);                 // scope 0 at $DIR/large_array_index.rs:+3:1: +3:2\n+          return;                          // scope 0 at $DIR/large_array_index.rs:+3:2: +3:2\n+      }\n+  }\n+  "}, {"sha": "eabe4ec6d0fb60d201dba2348008cb3430407ca2", "filename": "src/test/mir-opt/dataflow-const-prop/previous/large_array_index.main.DataflowConstProp.64bit.diff", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Flarge_array_index.main.DataflowConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Flarge_array_index.main.DataflowConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Flarge_array_index.main.DataflowConstProp.64bit.diff?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,37 @@\n+- // MIR for `main` before DataflowConstProp\n++ // MIR for `main` after DataflowConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/large_array_index.rs:+0:11: +0:11\n+      let _1: u8;                          // in scope 0 at $DIR/large_array_index.rs:+2:9: +2:10\n+      let mut _2: [u8; 5000];              // in scope 0 at $DIR/large_array_index.rs:+2:17: +2:29\n+      let _3: usize;                       // in scope 0 at $DIR/large_array_index.rs:+2:30: +2:31\n+      let mut _4: usize;                   // in scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n+      let mut _5: bool;                    // in scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/large_array_index.rs:+2:9: +2:10\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/large_array_index.rs:+2:9: +2:10\n+          StorageLive(_2);                 // scope 0 at $DIR/large_array_index.rs:+2:17: +2:29\n+          _2 = [const 0_u8; 5000];         // scope 0 at $DIR/large_array_index.rs:+2:17: +2:29\n+          StorageLive(_3);                 // scope 0 at $DIR/large_array_index.rs:+2:30: +2:31\n+          _3 = const 2_usize;              // scope 0 at $DIR/large_array_index.rs:+2:30: +2:31\n+          _4 = const 5000_usize;           // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n+-         _5 = Lt(_3, _4);                 // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n+-         assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n++         _5 = const true;                 // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n++         assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 5000_usize, const 2_usize) -> bb1; // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n+      }\n+  \n+      bb1: {\n+          _1 = _2[_3];                     // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n+          StorageDead(_3);                 // scope 0 at $DIR/large_array_index.rs:+2:32: +2:33\n+          StorageDead(_2);                 // scope 0 at $DIR/large_array_index.rs:+2:32: +2:33\n+          nop;                             // scope 0 at $DIR/large_array_index.rs:+0:11: +3:2\n+          StorageDead(_1);                 // scope 0 at $DIR/large_array_index.rs:+3:1: +3:2\n+          return;                          // scope 0 at $DIR/large_array_index.rs:+3:2: +3:2\n+      }\n+  }\n+  "}, {"sha": "a1002401f57b651843ea39365350c61875aeaab5", "filename": "src/test/mir-opt/dataflow-const-prop/previous/large_array_index.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Flarge_array_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Flarge_array_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Flarge_array_index.rs?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,7 @@\n+// EMIT_MIR_FOR_EACH_BIT_WIDTH\n+\n+// EMIT_MIR large_array_index.main.DataflowConstProp.diff\n+fn main() {\n+    // check that we don't propagate this, because it's too large\n+    let x: u8 = [0_u8; 5000][2];\n+}"}, {"sha": "e169135e0acde2d9c3e343d4c838bc370c292c9f", "filename": "src/test/mir-opt/dataflow-const-prop/previous/mult_by_zero.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmult_by_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmult_by_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmult_by_zero.rs?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,11 @@\n+// unit-test\n+// compile-flags: -O -Zmir-opt-level=4\n+\n+// EMIT_MIR mult_by_zero.test.DataflowConstProp.diff\n+fn test(x: i32) -> i32 {\n+    x * 0\n+}\n+\n+fn main() {\n+    test(10);\n+}"}, {"sha": "0f1d49e3888b19aeb10360329c208daadb069d96", "filename": "src/test/mir-opt/dataflow-const-prop/previous/mult_by_zero.test.DataflowConstProp.diff", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmult_by_zero.test.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmult_by_zero.test.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmult_by_zero.test.DataflowConstProp.diff?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,18 @@\n+- // MIR for `test` before DataflowConstProp\n++ // MIR for `test` after DataflowConstProp\n+  \n+  fn test(_1: i32) -> i32 {\n+      debug x => _1;                       // in scope 0 at $DIR/mult_by_zero.rs:+0:9: +0:10\n+      let mut _0: i32;                     // return place in scope 0 at $DIR/mult_by_zero.rs:+0:21: +0:24\n+      let mut _2: i32;                     // in scope 0 at $DIR/mult_by_zero.rs:+1:3: +1:4\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/mult_by_zero.rs:+1:3: +1:4\n+          _2 = _1;                         // scope 0 at $DIR/mult_by_zero.rs:+1:3: +1:4\n+-         _0 = Mul(move _2, const 0_i32);  // scope 0 at $DIR/mult_by_zero.rs:+1:3: +1:8\n++         _0 = const 0_i32;                // scope 0 at $DIR/mult_by_zero.rs:+1:3: +1:8\n+          StorageDead(_2);                 // scope 0 at $DIR/mult_by_zero.rs:+1:7: +1:8\n+          return;                          // scope 0 at $DIR/mult_by_zero.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "94724a676c490e34ca393770cc4fe369ca8a3179", "filename": "src/test/mir-opt/dataflow-const-prop/previous/mutable_variable.main.DataflowConstProp.diff", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable.main.DataflowConstProp.diff?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,28 @@\n+- // MIR for `main` before DataflowConstProp\n++ // MIR for `main` after DataflowConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/mutable_variable.rs:+0:11: +0:11\n+      let mut _1: i32;                     // in scope 0 at $DIR/mutable_variable.rs:+1:9: +1:14\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/mutable_variable.rs:+1:9: +1:14\n+          let _2: i32;                     // in scope 1 at $DIR/mutable_variable.rs:+3:9: +3:10\n+          scope 2 {\n+              debug y => _2;               // in scope 2 at $DIR/mutable_variable.rs:+3:9: +3:10\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/mutable_variable.rs:+1:9: +1:14\n+          _1 = const 42_i32;               // scope 0 at $DIR/mutable_variable.rs:+1:17: +1:19\n+          _1 = const 99_i32;               // scope 1 at $DIR/mutable_variable.rs:+2:5: +2:11\n+          StorageLive(_2);                 // scope 1 at $DIR/mutable_variable.rs:+3:9: +3:10\n+-         _2 = _1;                         // scope 1 at $DIR/mutable_variable.rs:+3:13: +3:14\n++         _2 = const 99_i32;               // scope 1 at $DIR/mutable_variable.rs:+3:13: +3:14\n+          nop;                             // scope 0 at $DIR/mutable_variable.rs:+0:11: +4:2\n+          StorageDead(_2);                 // scope 1 at $DIR/mutable_variable.rs:+4:1: +4:2\n+          StorageDead(_1);                 // scope 0 at $DIR/mutable_variable.rs:+4:1: +4:2\n+          return;                          // scope 0 at $DIR/mutable_variable.rs:+4:2: +4:2\n+      }\n+  }\n+  "}, {"sha": "055b7f158da092bc84bc310a21be5b4a5a7d97e2", "filename": "src/test/mir-opt/dataflow-const-prop/previous/mutable_variable.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable.rs?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,9 @@\n+// unit-test\n+// compile-flags: -O\n+\n+// EMIT_MIR mutable_variable.main.DataflowConstProp.diff\n+fn main() {\n+    let mut x = 42;\n+    x = 99;\n+    let y = x;\n+}"}, {"sha": "adff27af3b347d3fbc3c3e908f369db879670078", "filename": "src/test/mir-opt/dataflow-const-prop/previous/mutable_variable_aggregate.main.DataflowConstProp.diff", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_aggregate.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_aggregate.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_aggregate.main.DataflowConstProp.diff?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,30 @@\n+- // MIR for `main` before DataflowConstProp\n++ // MIR for `main` after DataflowConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/mutable_variable_aggregate.rs:+0:11: +0:11\n+      let mut _1: (i32, i32);              // in scope 0 at $DIR/mutable_variable_aggregate.rs:+1:9: +1:14\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/mutable_variable_aggregate.rs:+1:9: +1:14\n+          let _2: (i32, i32);              // in scope 1 at $DIR/mutable_variable_aggregate.rs:+3:9: +3:10\n+          scope 2 {\n+              debug y => _2;               // in scope 2 at $DIR/mutable_variable_aggregate.rs:+3:9: +3:10\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_aggregate.rs:+1:9: +1:14\n+          Deinit(_1);                      // scope 0 at $DIR/mutable_variable_aggregate.rs:+1:17: +1:25\n+          (_1.0: i32) = const 42_i32;      // scope 0 at $DIR/mutable_variable_aggregate.rs:+1:17: +1:25\n+          (_1.1: i32) = const 43_i32;      // scope 0 at $DIR/mutable_variable_aggregate.rs:+1:17: +1:25\n+          (_1.1: i32) = const 99_i32;      // scope 1 at $DIR/mutable_variable_aggregate.rs:+2:5: +2:13\n+          StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_aggregate.rs:+3:9: +3:10\n+-         _2 = _1;                         // scope 1 at $DIR/mutable_variable_aggregate.rs:+3:13: +3:14\n++         _2 = const (42_i32, 99_i32);     // scope 1 at $DIR/mutable_variable_aggregate.rs:+3:13: +3:14\n+          nop;                             // scope 0 at $DIR/mutable_variable_aggregate.rs:+0:11: +4:2\n+          StorageDead(_2);                 // scope 1 at $DIR/mutable_variable_aggregate.rs:+4:1: +4:2\n+          StorageDead(_1);                 // scope 0 at $DIR/mutable_variable_aggregate.rs:+4:1: +4:2\n+          return;                          // scope 0 at $DIR/mutable_variable_aggregate.rs:+4:2: +4:2\n+      }\n+  }\n+  "}, {"sha": "854c2d3b8a800d6b281f9d50c46386006b69916f", "filename": "src/test/mir-opt/dataflow-const-prop/previous/mutable_variable_aggregate.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_aggregate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_aggregate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_aggregate.rs?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,9 @@\n+// unit-test\n+// compile-flags: -O\n+\n+// EMIT_MIR mutable_variable_aggregate.main.DataflowConstProp.diff\n+fn main() {\n+    let mut x = (42, 43);\n+    x.1 = 99;\n+    let y = x;\n+}"}, {"sha": "8c3f4b92618042bbedf33d19bd33154e861a98f2", "filename": "src/test/mir-opt/dataflow-const-prop/previous/mutable_variable_aggregate_mut_ref.main.DataflowConstProp.diff", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_aggregate_mut_ref.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_aggregate_mut_ref.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_aggregate_mut_ref.main.DataflowConstProp.diff?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,36 @@\n+- // MIR for `main` before DataflowConstProp\n++ // MIR for `main` after DataflowConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:+0:11: +0:11\n+      let mut _1: (i32, i32);              // in scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:+1:9: +1:14\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/mutable_variable_aggregate_mut_ref.rs:+1:9: +1:14\n+          let _2: &mut (i32, i32);         // in scope 1 at $DIR/mutable_variable_aggregate_mut_ref.rs:+2:9: +2:10\n+          scope 2 {\n+              debug z => _2;               // in scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+2:9: +2:10\n+              let _3: (i32, i32);          // in scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+4:9: +4:10\n+              scope 3 {\n+                  debug y => _3;           // in scope 3 at $DIR/mutable_variable_aggregate_mut_ref.rs:+4:9: +4:10\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:+1:9: +1:14\n+          Deinit(_1);                      // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:+1:17: +1:25\n+          (_1.0: i32) = const 42_i32;      // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:+1:17: +1:25\n+          (_1.1: i32) = const 43_i32;      // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:+1:17: +1:25\n+          StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_aggregate_mut_ref.rs:+2:9: +2:10\n+          _2 = &mut _1;                    // scope 1 at $DIR/mutable_variable_aggregate_mut_ref.rs:+2:13: +2:19\n+          ((*_2).1: i32) = const 99_i32;   // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+3:5: +3:13\n+          StorageLive(_3);                 // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+4:9: +4:10\n+          _3 = _1;                         // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+4:13: +4:14\n+          nop;                             // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:+0:11: +5:2\n+          StorageDead(_3);                 // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+5:1: +5:2\n+          StorageDead(_2);                 // scope 1 at $DIR/mutable_variable_aggregate_mut_ref.rs:+5:1: +5:2\n+          StorageDead(_1);                 // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:+5:1: +5:2\n+          return;                          // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:+5:2: +5:2\n+      }\n+  }\n+  "}, {"sha": "18df3596cff18715ea7cc236194aa83e4882f267", "filename": "src/test/mir-opt/dataflow-const-prop/previous/mutable_variable_aggregate_mut_ref.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_aggregate_mut_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_aggregate_mut_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_aggregate_mut_ref.rs?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,10 @@\n+// unit-test\n+// compile-flags: -O\n+\n+// EMIT_MIR mutable_variable_aggregate_mut_ref.main.DataflowConstProp.diff\n+fn main() {\n+    let mut x = (42, 43);\n+    let z = &mut x;\n+    z.1 = 99;\n+    let y = x;\n+}"}, {"sha": "e7d64c4f451a96335356cd100810213f55c0f0fc", "filename": "src/test/mir-opt/dataflow-const-prop/previous/mutable_variable_aggregate_partial_read.main.DataflowConstProp.diff", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_aggregate_partial_read.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_aggregate_partial_read.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_aggregate_partial_read.main.DataflowConstProp.diff?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,35 @@\n+- // MIR for `main` before DataflowConstProp\n++ // MIR for `main` after DataflowConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:+0:11: +0:11\n+      let mut _1: (i32, i32);              // in scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:+1:9: +1:14\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+1:9: +1:14\n+          let _2: i32;                     // in scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+4:9: +4:10\n+          scope 2 {\n+              debug y => _2;               // in scope 2 at $DIR/mutable_variable_aggregate_partial_read.rs:+4:9: +4:10\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:+1:9: +1:14\n+          _1 = foo() -> bb1;               // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:+1:29: +1:34\n+                                           // mir::Constant\n+                                           // + span: $DIR/mutable_variable_aggregate_partial_read.rs:6:29: 6:32\n+                                           // + literal: Const { ty: fn() -> (i32, i32) {foo}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          (_1.1: i32) = const 99_i32;      // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+2:5: +2:13\n+          (_1.0: i32) = const 42_i32;      // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+3:5: +3:13\n+          StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+4:9: +4:10\n+-         _2 = (_1.1: i32);                // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+4:13: +4:16\n++         _2 = const 99_i32;               // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+4:13: +4:16\n+          nop;                             // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:+0:11: +5:2\n+          StorageDead(_2);                 // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+5:1: +5:2\n+          StorageDead(_1);                 // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:+5:1: +5:2\n+          return;                          // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:+5:2: +5:2\n+      }\n+  }\n+  "}, {"sha": "39a77ba178946b608436034fd0ab91caa5e181c4", "filename": "src/test/mir-opt/dataflow-const-prop/previous/mutable_variable_aggregate_partial_read.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_aggregate_partial_read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_aggregate_partial_read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_aggregate_partial_read.rs?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,15 @@\n+// unit-test\n+// compile-flags: -O\n+\n+// EMIT_MIR mutable_variable_aggregate_partial_read.main.DataflowConstProp.diff\n+fn main() {\n+    let mut x: (i32, i32) = foo();\n+    x.1 = 99;\n+    x.0 = 42;\n+    let y = x.1;\n+}\n+\n+#[inline(never)]\n+fn foo() -> (i32, i32) {\n+    unimplemented!()\n+}"}, {"sha": "783aaacca3c04bbe828fcf2e31bb8be099f2b0be", "filename": "src/test/mir-opt/dataflow-const-prop/previous/mutable_variable_no_prop.main.DataflowConstProp.diff", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_no_prop.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_no_prop.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_no_prop.main.DataflowConstProp.diff?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,48 @@\n+- // MIR for `main` before DataflowConstProp\n++ // MIR for `main` after DataflowConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/mutable_variable_no_prop.rs:+0:11: +0:11\n+      let mut _1: u32;                     // in scope 0 at $DIR/mutable_variable_no_prop.rs:+1:9: +1:14\n+      let _2: ();                          // in scope 0 at $DIR/mutable_variable_no_prop.rs:+2:5: +4:6\n+      let mut _3: u32;                     // in scope 0 at $DIR/mutable_variable_no_prop.rs:+3:13: +3:19\n+      let mut _4: *mut u32;                // in scope 0 at $DIR/mutable_variable_no_prop.rs:+3:13: +3:19\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/mutable_variable_no_prop.rs:+1:9: +1:14\n+          let _5: u32;                     // in scope 1 at $DIR/mutable_variable_no_prop.rs:+5:9: +5:10\n+          scope 2 {\n+          }\n+          scope 3 {\n+              debug y => _5;               // in scope 3 at $DIR/mutable_variable_no_prop.rs:+5:9: +5:10\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_no_prop.rs:+1:9: +1:14\n+          _1 = const 42_u32;               // scope 0 at $DIR/mutable_variable_no_prop.rs:+1:17: +1:19\n+          StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_no_prop.rs:+2:5: +4:6\n+          StorageLive(_3);                 // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:13: +3:19\n+          StorageLive(_4);                 // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:13: +3:19\n+          _4 = const {alloc1: *mut u32};   // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:13: +3:19\n+                                           // mir::Constant\n+                                           // + span: $DIR/mutable_variable_no_prop.rs:10:13: 10:19\n+                                           // + literal: Const { ty: *mut u32, val: Value(Scalar(alloc1)) }\n+          _3 = (*_4);                      // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:13: +3:19\n+          _1 = move _3;                    // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:9: +3:19\n+          StorageDead(_3);                 // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:18: +3:19\n+          StorageDead(_4);                 // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:19: +3:20\n+          nop;                             // scope 2 at $DIR/mutable_variable_no_prop.rs:+2:5: +4:6\n+          StorageDead(_2);                 // scope 1 at $DIR/mutable_variable_no_prop.rs:+4:5: +4:6\n+          StorageLive(_5);                 // scope 1 at $DIR/mutable_variable_no_prop.rs:+5:9: +5:10\n+          _5 = _1;                         // scope 1 at $DIR/mutable_variable_no_prop.rs:+5:13: +5:14\n+          nop;                             // scope 0 at $DIR/mutable_variable_no_prop.rs:+0:11: +6:2\n+          StorageDead(_5);                 // scope 1 at $DIR/mutable_variable_no_prop.rs:+6:1: +6:2\n+          StorageDead(_1);                 // scope 0 at $DIR/mutable_variable_no_prop.rs:+6:1: +6:2\n+          return;                          // scope 0 at $DIR/mutable_variable_no_prop.rs:+6:2: +6:2\n+      }\n+  }\n+  \n+  alloc1 (static: STATIC, size: 4, align: 4) {\n+      2a 00 00 00                                     \u2502 *...\n+  }\n+  "}, {"sha": "26f9cab5cd44f53848093527bf7d98ffce21c849", "filename": "src/test/mir-opt/dataflow-const-prop/previous/mutable_variable_no_prop.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_no_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_no_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_no_prop.rs?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,13 @@\n+// unit-test\n+// compile-flags: -O\n+\n+static mut STATIC: u32 = 42;\n+\n+// EMIT_MIR mutable_variable_no_prop.main.DataflowConstProp.diff\n+fn main() {\n+    let mut x = 42;\n+    unsafe {\n+        x = STATIC;\n+    }\n+    let y = x;\n+}"}, {"sha": "e9b52365813903f11b75b0bf520b2a4f630d738e", "filename": "src/test/mir-opt/dataflow-const-prop/previous/mutable_variable_unprop_assign.main.DataflowConstProp.diff", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_unprop_assign.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_unprop_assign.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_unprop_assign.main.DataflowConstProp.diff?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,54 @@\n+- // MIR for `main` before DataflowConstProp\n++ // MIR for `main` after DataflowConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/mutable_variable_unprop_assign.rs:+0:11: +0:11\n+      let _1: i32;                         // in scope 0 at $DIR/mutable_variable_unprop_assign.rs:+1:9: +1:10\n+      let mut _3: i32;                     // in scope 0 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n+      scope 1 {\n+          debug a => _1;                   // in scope 1 at $DIR/mutable_variable_unprop_assign.rs:+1:9: +1:10\n+          let mut _2: (i32, i32);          // in scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n+          scope 2 {\n+              debug x => _2;               // in scope 2 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n+              let _4: i32;                 // in scope 2 at $DIR/mutable_variable_unprop_assign.rs:+4:9: +4:10\n+              scope 3 {\n+                  debug y => _4;           // in scope 3 at $DIR/mutable_variable_unprop_assign.rs:+4:9: +4:10\n+                  let _5: i32;             // in scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:9: +5:10\n+                  scope 4 {\n+                      debug z => _5;       // in scope 4 at $DIR/mutable_variable_unprop_assign.rs:+5:9: +5:10\n+                  }\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_unprop_assign.rs:+1:9: +1:10\n+          _1 = foo() -> bb1;               // scope 0 at $DIR/mutable_variable_unprop_assign.rs:+1:13: +1:18\n+                                           // mir::Constant\n+                                           // + span: $DIR/mutable_variable_unprop_assign.rs:6:13: 6:16\n+                                           // + literal: Const { ty: fn() -> i32 {foo}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n+          Deinit(_2);                      // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:29: +2:35\n+          (_2.0: i32) = const 1_i32;       // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:29: +2:35\n+          (_2.1: i32) = const 2_i32;       // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:29: +2:35\n+          StorageLive(_3);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n+          _3 = _1;                         // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n+          (_2.1: i32) = move _3;           // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:5: +3:12\n+          StorageDead(_3);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n+          StorageLive(_4);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+4:9: +4:10\n+          _4 = (_2.1: i32);                // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+4:13: +4:16\n+          StorageLive(_5);                 // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:9: +5:10\n+-         _5 = (_2.0: i32);                // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:13: +5:16\n++         _5 = const 1_i32;                // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:13: +5:16\n+          nop;                             // scope 0 at $DIR/mutable_variable_unprop_assign.rs:+0:11: +6:2\n+          StorageDead(_5);                 // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n+          StorageDead(_4);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n+          StorageDead(_2);                 // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n+          StorageDead(_1);                 // scope 0 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n+          return;                          // scope 0 at $DIR/mutable_variable_unprop_assign.rs:+6:2: +6:2\n+      }\n+  }\n+  "}, {"sha": "92da91682d160daa122a97f0658054bc28792c01", "filename": "src/test/mir-opt/dataflow-const-prop/previous/mutable_variable_unprop_assign.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_unprop_assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_unprop_assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_unprop_assign.rs?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,16 @@\n+// unit-test\n+// compile-flags: -O\n+\n+// EMIT_MIR mutable_variable_unprop_assign.main.DataflowConstProp.diff\n+fn main() {\n+    let a = foo();\n+    let mut x: (i32, i32) = (1, 2);\n+    x.1 = a;\n+    let y = x.1;\n+    let z = x.0; // this could theoretically be allowed, but we can't handle it right now\n+}\n+\n+#[inline(never)]\n+fn foo() -> i32 {\n+    unimplemented!()\n+}"}, {"sha": "43afabda7f631b74aec77445d0c12c7257aca052", "filename": "src/test/mir-opt/dataflow-const-prop/previous/optimizes_into_variable.main.DataflowConstProp.32bit.diff", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Foptimizes_into_variable.main.DataflowConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Foptimizes_into_variable.main.DataflowConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Foptimizes_into_variable.main.DataflowConstProp.32bit.diff?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,68 @@\n+- // MIR for `main` before DataflowConstProp\n++ // MIR for `main` after DataflowConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/optimizes_into_variable.rs:+0:11: +0:11\n+      let _1: i32;                         // in scope 0 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n+      let mut _2: (i32, bool);             // in scope 0 at $DIR/optimizes_into_variable.rs:+1:13: +1:18\n+      let mut _4: [i32; 6];                // in scope 0 at $DIR/optimizes_into_variable.rs:+2:13: +2:31\n+      let _5: usize;                       // in scope 0 at $DIR/optimizes_into_variable.rs:+2:32: +2:33\n+      let mut _6: usize;                   // in scope 0 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n+      let mut _7: bool;                    // in scope 0 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n+      let mut _9: Point;                   // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n+          let _3: i32;                     // in scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n+          scope 2 {\n+              debug y => _3;               // in scope 2 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n+              let _8: u32;                 // in scope 2 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n+              scope 3 {\n+                  debug z => _8;           // in scope 3 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n+-         _2 = CheckedAdd(const 2_i32, const 2_i32); // scope 0 at $DIR/optimizes_into_variable.rs:+1:13: +1:18\n+-         assert(!move (_2.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const 2_i32, const 2_i32) -> bb1; // scope 0 at $DIR/optimizes_into_variable.rs:+1:13: +1:18\n++         _2 = const (4_i32, false);       // scope 0 at $DIR/optimizes_into_variable.rs:+1:13: +1:18\n++         assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", const 2_i32, const 2_i32) -> bb1; // scope 0 at $DIR/optimizes_into_variable.rs:+1:13: +1:18\n+      }\n+  \n+      bb1: {\n+-         _1 = move (_2.0: i32);           // scope 0 at $DIR/optimizes_into_variable.rs:+1:13: +1:18\n++         _1 = const 4_i32;                // scope 0 at $DIR/optimizes_into_variable.rs:+1:13: +1:18\n+          StorageLive(_3);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n+          StorageLive(_4);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:31\n+          _4 = [const 0_i32, const 1_i32, const 2_i32, const 3_i32, const 4_i32, const 5_i32]; // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:31\n+          StorageLive(_5);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:32: +2:33\n+          _5 = const 3_usize;              // scope 1 at $DIR/optimizes_into_variable.rs:+2:32: +2:33\n+          _6 = const 6_usize;              // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n+-         _7 = Lt(_5, _6);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n+-         assert(move _7, \"index out of bounds: the length is {} but the index is {}\", move _6, _5) -> bb2; // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n++         _7 = const true;                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n++         assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 6_usize, const 3_usize) -> bb2; // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n+      }\n+  \n+      bb2: {\n+-         _3 = _4[_5];                     // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n++         _3 = const 3_i32;                // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n+          StorageDead(_5);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:34: +2:35\n+          StorageDead(_4);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:34: +2:35\n+          StorageLive(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n+          StorageLive(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+          Deinit(_9);                      // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+          (_9.0: u32) = const 12_u32;      // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+          (_9.1: u32) = const 42_u32;      // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+-         _8 = (_9.1: u32);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:38\n++         _8 = const 42_u32;               // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:38\n+          StorageDead(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:38: +3:39\n+          nop;                             // scope 0 at $DIR/optimizes_into_variable.rs:+0:11: +4:2\n+          StorageDead(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n+          StorageDead(_3);                 // scope 1 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n+          StorageDead(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n+          return;                          // scope 0 at $DIR/optimizes_into_variable.rs:+4:2: +4:2\n+      }\n+  }\n+  "}, {"sha": "43afabda7f631b74aec77445d0c12c7257aca052", "filename": "src/test/mir-opt/dataflow-const-prop/previous/optimizes_into_variable.main.DataflowConstProp.64bit.diff", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Foptimizes_into_variable.main.DataflowConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Foptimizes_into_variable.main.DataflowConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Foptimizes_into_variable.main.DataflowConstProp.64bit.diff?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,68 @@\n+- // MIR for `main` before DataflowConstProp\n++ // MIR for `main` after DataflowConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/optimizes_into_variable.rs:+0:11: +0:11\n+      let _1: i32;                         // in scope 0 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n+      let mut _2: (i32, bool);             // in scope 0 at $DIR/optimizes_into_variable.rs:+1:13: +1:18\n+      let mut _4: [i32; 6];                // in scope 0 at $DIR/optimizes_into_variable.rs:+2:13: +2:31\n+      let _5: usize;                       // in scope 0 at $DIR/optimizes_into_variable.rs:+2:32: +2:33\n+      let mut _6: usize;                   // in scope 0 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n+      let mut _7: bool;                    // in scope 0 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n+      let mut _9: Point;                   // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n+          let _3: i32;                     // in scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n+          scope 2 {\n+              debug y => _3;               // in scope 2 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n+              let _8: u32;                 // in scope 2 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n+              scope 3 {\n+                  debug z => _8;           // in scope 3 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n+-         _2 = CheckedAdd(const 2_i32, const 2_i32); // scope 0 at $DIR/optimizes_into_variable.rs:+1:13: +1:18\n+-         assert(!move (_2.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const 2_i32, const 2_i32) -> bb1; // scope 0 at $DIR/optimizes_into_variable.rs:+1:13: +1:18\n++         _2 = const (4_i32, false);       // scope 0 at $DIR/optimizes_into_variable.rs:+1:13: +1:18\n++         assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", const 2_i32, const 2_i32) -> bb1; // scope 0 at $DIR/optimizes_into_variable.rs:+1:13: +1:18\n+      }\n+  \n+      bb1: {\n+-         _1 = move (_2.0: i32);           // scope 0 at $DIR/optimizes_into_variable.rs:+1:13: +1:18\n++         _1 = const 4_i32;                // scope 0 at $DIR/optimizes_into_variable.rs:+1:13: +1:18\n+          StorageLive(_3);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n+          StorageLive(_4);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:31\n+          _4 = [const 0_i32, const 1_i32, const 2_i32, const 3_i32, const 4_i32, const 5_i32]; // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:31\n+          StorageLive(_5);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:32: +2:33\n+          _5 = const 3_usize;              // scope 1 at $DIR/optimizes_into_variable.rs:+2:32: +2:33\n+          _6 = const 6_usize;              // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n+-         _7 = Lt(_5, _6);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n+-         assert(move _7, \"index out of bounds: the length is {} but the index is {}\", move _6, _5) -> bb2; // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n++         _7 = const true;                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n++         assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 6_usize, const 3_usize) -> bb2; // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n+      }\n+  \n+      bb2: {\n+-         _3 = _4[_5];                     // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n++         _3 = const 3_i32;                // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n+          StorageDead(_5);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:34: +2:35\n+          StorageDead(_4);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:34: +2:35\n+          StorageLive(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n+          StorageLive(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+          Deinit(_9);                      // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+          (_9.0: u32) = const 12_u32;      // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+          (_9.1: u32) = const 42_u32;      // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+-         _8 = (_9.1: u32);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:38\n++         _8 = const 42_u32;               // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:38\n+          StorageDead(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:38: +3:39\n+          nop;                             // scope 0 at $DIR/optimizes_into_variable.rs:+0:11: +4:2\n+          StorageDead(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n+          StorageDead(_3);                 // scope 1 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n+          StorageDead(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n+          return;                          // scope 0 at $DIR/optimizes_into_variable.rs:+4:2: +4:2\n+      }\n+  }\n+  "}, {"sha": "75cea8ad2cebf53475877761cdf1043e4ed2d643", "filename": "src/test/mir-opt/dataflow-const-prop/previous/optimizes_into_variable.main.SimplifyLocals.after.32bit.mir", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Foptimizes_into_variable.main.SimplifyLocals.after.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Foptimizes_into_variable.main.SimplifyLocals.after.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Foptimizes_into_variable.main.SimplifyLocals.after.32bit.mir?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,27 @@\n+// MIR for `main` after SimplifyLocals\n+\n+fn main() -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/optimizes_into_variable.rs:+0:11: +0:11\n+    let _1: i32;                         // in scope 0 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n+    scope 1 {\n+        debug x => _1;                   // in scope 1 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n+        let _2: i32;                     // in scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n+        scope 2 {\n+            debug y => _2;               // in scope 2 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n+            let _3: u32;                 // in scope 2 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n+            scope 3 {\n+                debug z => _3;           // in scope 3 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n+            }\n+        }\n+    }\n+\n+    bb0: {\n+        StorageLive(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n+        StorageLive(_2);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n+        StorageLive(_3);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n+        StorageDead(_3);                 // scope 2 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n+        StorageDead(_2);                 // scope 1 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n+        StorageDead(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n+        return;                          // scope 0 at $DIR/optimizes_into_variable.rs:+4:2: +4:2\n+    }\n+}"}, {"sha": "75cea8ad2cebf53475877761cdf1043e4ed2d643", "filename": "src/test/mir-opt/dataflow-const-prop/previous/optimizes_into_variable.main.SimplifyLocals.after.64bit.mir", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Foptimizes_into_variable.main.SimplifyLocals.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Foptimizes_into_variable.main.SimplifyLocals.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Foptimizes_into_variable.main.SimplifyLocals.after.64bit.mir?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,27 @@\n+// MIR for `main` after SimplifyLocals\n+\n+fn main() -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/optimizes_into_variable.rs:+0:11: +0:11\n+    let _1: i32;                         // in scope 0 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n+    scope 1 {\n+        debug x => _1;                   // in scope 1 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n+        let _2: i32;                     // in scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n+        scope 2 {\n+            debug y => _2;               // in scope 2 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n+            let _3: u32;                 // in scope 2 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n+            scope 3 {\n+                debug z => _3;           // in scope 3 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n+            }\n+        }\n+    }\n+\n+    bb0: {\n+        StorageLive(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n+        StorageLive(_2);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n+        StorageLive(_3);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n+        StorageDead(_3);                 // scope 2 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n+        StorageDead(_2);                 // scope 1 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n+        StorageDead(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n+        return;                          // scope 0 at $DIR/optimizes_into_variable.rs:+4:2: +4:2\n+    }\n+}"}, {"sha": "189a080dbef783550e4af71079c39055760b31d2", "filename": "src/test/mir-opt/dataflow-const-prop/previous/optimizes_into_variable.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Foptimizes_into_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Foptimizes_into_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Foptimizes_into_variable.rs?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,16 @@\n+// unit-test\n+// compile-flags: -C overflow-checks=on\n+\n+struct Point {\n+    x: u32,\n+    y: u32,\n+}\n+\n+// EMIT_MIR_FOR_EACH_BIT_WIDTH\n+// EMIT_MIR optimizes_into_variable.main.DataflowConstProp.diff\n+// EMIT_MIR optimizes_into_variable.main.SimplifyLocals.after.mir\n+fn main() {\n+    let x = 2 + 2;\n+    let y = [0, 1, 2, 3, 4, 5][3];\n+    let z = (Point { x: 12, y: 42 }).y;\n+}"}, {"sha": "2aeb0bb9e0e262fecac302be1d0b37b0838e0e8e", "filename": "src/test/mir-opt/dataflow-const-prop/previous/read_immutable_static.main.DataflowConstProp.diff", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fread_immutable_static.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fread_immutable_static.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fread_immutable_static.main.DataflowConstProp.diff?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,48 @@\n+- // MIR for `main` before DataflowConstProp\n++ // MIR for `main` after DataflowConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/read_immutable_static.rs:+0:11: +0:11\n+      let _1: u8;                          // in scope 0 at $DIR/read_immutable_static.rs:+1:9: +1:10\n+      let mut _2: u8;                      // in scope 0 at $DIR/read_immutable_static.rs:+1:13: +1:16\n+      let mut _3: &u8;                     // in scope 0 at $DIR/read_immutable_static.rs:+1:13: +1:16\n+      let mut _4: u8;                      // in scope 0 at $DIR/read_immutable_static.rs:+1:19: +1:22\n+      let mut _5: &u8;                     // in scope 0 at $DIR/read_immutable_static.rs:+1:19: +1:22\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/read_immutable_static.rs:+1:9: +1:10\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/read_immutable_static.rs:+1:9: +1:10\n+          StorageLive(_2);                 // scope 0 at $DIR/read_immutable_static.rs:+1:13: +1:16\n+          StorageLive(_3);                 // scope 0 at $DIR/read_immutable_static.rs:+1:13: +1:16\n+          _3 = const {alloc1: &u8};        // scope 0 at $DIR/read_immutable_static.rs:+1:13: +1:16\n+                                           // mir::Constant\n+                                           // + span: $DIR/read_immutable_static.rs:8:13: 8:16\n+                                           // + literal: Const { ty: &u8, val: Value(Scalar(alloc1)) }\n+-         _2 = (*_3);                      // scope 0 at $DIR/read_immutable_static.rs:+1:13: +1:16\n++         _2 = const 2_u8;                 // scope 0 at $DIR/read_immutable_static.rs:+1:13: +1:16\n+          StorageLive(_4);                 // scope 0 at $DIR/read_immutable_static.rs:+1:19: +1:22\n+          StorageLive(_5);                 // scope 0 at $DIR/read_immutable_static.rs:+1:19: +1:22\n+          _5 = const {alloc1: &u8};        // scope 0 at $DIR/read_immutable_static.rs:+1:19: +1:22\n+                                           // mir::Constant\n+                                           // + span: $DIR/read_immutable_static.rs:8:19: 8:22\n+                                           // + literal: Const { ty: &u8, val: Value(Scalar(alloc1)) }\n+-         _4 = (*_5);                      // scope 0 at $DIR/read_immutable_static.rs:+1:19: +1:22\n+-         _1 = Add(move _2, move _4);      // scope 0 at $DIR/read_immutable_static.rs:+1:13: +1:22\n++         _4 = const 2_u8;                 // scope 0 at $DIR/read_immutable_static.rs:+1:19: +1:22\n++         _1 = const 4_u8;                 // scope 0 at $DIR/read_immutable_static.rs:+1:13: +1:22\n+          StorageDead(_4);                 // scope 0 at $DIR/read_immutable_static.rs:+1:21: +1:22\n+          StorageDead(_2);                 // scope 0 at $DIR/read_immutable_static.rs:+1:21: +1:22\n+          StorageDead(_5);                 // scope 0 at $DIR/read_immutable_static.rs:+1:22: +1:23\n+          StorageDead(_3);                 // scope 0 at $DIR/read_immutable_static.rs:+1:22: +1:23\n+          nop;                             // scope 0 at $DIR/read_immutable_static.rs:+0:11: +2:2\n+          StorageDead(_1);                 // scope 0 at $DIR/read_immutable_static.rs:+2:1: +2:2\n+          return;                          // scope 0 at $DIR/read_immutable_static.rs:+2:2: +2:2\n+      }\n+  }\n+  \n+  alloc1 (static: FOO, size: 1, align: 1) {\n+      02                                              \u2502 .\n+  }\n+  "}, {"sha": "0ca5668fb86297d113c3c89204bac9eb35d71b64", "filename": "src/test/mir-opt/dataflow-const-prop/previous/read_immutable_static.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fread_immutable_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fread_immutable_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fread_immutable_static.rs?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,9 @@\n+// unit-test\n+// compile-flags: -O\n+\n+static FOO: u8 = 2;\n+\n+// EMIT_MIR read_immutable_static.main.DataflowConstProp.diff\n+fn main() {\n+    let x = FOO + FOO;\n+}"}, {"sha": "eb55ab0f1b2617fbf30f9b19ffaa46e4451ee859", "filename": "src/test/mir-opt/dataflow-const-prop/previous/ref_deref.main.DataflowConstProp.diff", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fref_deref.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fref_deref.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fref_deref.main.DataflowConstProp.diff?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,27 @@\n+- // MIR for `main` before DataflowConstProp\n++ // MIR for `main` after DataflowConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/ref_deref.rs:+0:11: +0:11\n+      let _1: i32;                         // in scope 0 at $DIR/ref_deref.rs:+1:5: +1:10\n+      let mut _2: &i32;                    // in scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n+      let _3: i32;                         // in scope 0 at $DIR/ref_deref.rs:+1:8: +1:9\n+      let mut _4: &i32;                    // in scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/ref_deref.rs:+1:5: +1:10\n+          StorageLive(_2);                 // scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n+          _4 = const main::promoted[0];    // scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n+                                           // mir::Constant\n+                                           // + span: $DIR/ref_deref.rs:5:6: 5:10\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }\n+          _2 = _4;                         // scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n+-         _1 = (*_2);                      // scope 0 at $DIR/ref_deref.rs:+1:5: +1:10\n++         _1 = const 4_i32;                // scope 0 at $DIR/ref_deref.rs:+1:5: +1:10\n+          StorageDead(_2);                 // scope 0 at $DIR/ref_deref.rs:+1:10: +1:11\n+          StorageDead(_1);                 // scope 0 at $DIR/ref_deref.rs:+1:10: +1:11\n+          nop;                             // scope 0 at $DIR/ref_deref.rs:+0:11: +2:2\n+          return;                          // scope 0 at $DIR/ref_deref.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "d141d2cf87bb7812ac4541e0f3776610f9b9dbdd", "filename": "src/test/mir-opt/dataflow-const-prop/previous/ref_deref.main.PromoteTemps.diff", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fref_deref.main.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fref_deref.main.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fref_deref.main.PromoteTemps.diff?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,30 @@\n+- // MIR for `main` before PromoteTemps\n++ // MIR for `main` after PromoteTemps\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/ref_deref.rs:+0:11: +0:11\n+      let _1: i32;                         // in scope 0 at $DIR/ref_deref.rs:+1:5: +1:10\n+      let mut _2: &i32;                    // in scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n+      let _3: i32;                         // in scope 0 at $DIR/ref_deref.rs:+1:8: +1:9\n++     let mut _4: &i32;                    // in scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/ref_deref.rs:+1:5: +1:10\n+          StorageLive(_2);                 // scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n+-         StorageLive(_3);                 // scope 0 at $DIR/ref_deref.rs:+1:8: +1:9\n+-         _3 = const 4_i32;                // scope 0 at $DIR/ref_deref.rs:+1:8: +1:9\n+-         _2 = &_3;                        // scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n++         _4 = const main::promoted[0];    // scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n++                                          // mir::Constant\n++                                          // + span: $DIR/ref_deref.rs:5:6: 5:10\n++                                          // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }\n++         _2 = &(*_4);                     // scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n+          _1 = (*_2);                      // scope 0 at $DIR/ref_deref.rs:+1:5: +1:10\n+-         StorageDead(_3);                 // scope 0 at $DIR/ref_deref.rs:+1:10: +1:11\n+          StorageDead(_2);                 // scope 0 at $DIR/ref_deref.rs:+1:10: +1:11\n+          StorageDead(_1);                 // scope 0 at $DIR/ref_deref.rs:+1:10: +1:11\n+          _0 = const ();                   // scope 0 at $DIR/ref_deref.rs:+0:11: +2:2\n+          return;                          // scope 0 at $DIR/ref_deref.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "ee9426dd906eaf1c59264de0a0043ada706b25af", "filename": "src/test/mir-opt/dataflow-const-prop/previous/ref_deref.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fref_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fref_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fref_deref.rs?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,6 @@\n+// EMIT_MIR ref_deref.main.PromoteTemps.diff\n+// EMIT_MIR ref_deref.main.DataflowConstProp.diff\n+\n+fn main() {\n+    *(&4);\n+}"}, {"sha": "66828e5013c9f33ecefe708d8af0569f8bc6c2fb", "filename": "src/test/mir-opt/dataflow-const-prop/previous/ref_deref_project.main.DataflowConstProp.diff", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fref_deref_project.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fref_deref_project.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fref_deref_project.main.DataflowConstProp.diff?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,26 @@\n+- // MIR for `main` before DataflowConstProp\n++ // MIR for `main` after DataflowConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/ref_deref_project.rs:+0:11: +0:11\n+      let _1: i32;                         // in scope 0 at $DIR/ref_deref_project.rs:+1:5: +1:17\n+      let mut _2: &i32;                    // in scope 0 at $DIR/ref_deref_project.rs:+1:6: +1:17\n+      let _3: (i32, i32);                  // in scope 0 at $DIR/ref_deref_project.rs:+1:8: +1:14\n+      let mut _4: &(i32, i32);             // in scope 0 at $DIR/ref_deref_project.rs:+1:6: +1:17\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/ref_deref_project.rs:+1:5: +1:17\n+          StorageLive(_2);                 // scope 0 at $DIR/ref_deref_project.rs:+1:6: +1:17\n+          _4 = const main::promoted[0];    // scope 0 at $DIR/ref_deref_project.rs:+1:6: +1:17\n+                                           // mir::Constant\n+                                           // + span: $DIR/ref_deref_project.rs:6:6: 6:17\n+                                           // + literal: Const { ty: &(i32, i32), val: Unevaluated(main, [], Some(promoted[0])) }\n+          _2 = &((*_4).1: i32);            // scope 0 at $DIR/ref_deref_project.rs:+1:6: +1:17\n+          _1 = (*_2);                      // scope 0 at $DIR/ref_deref_project.rs:+1:5: +1:17\n+          StorageDead(_2);                 // scope 0 at $DIR/ref_deref_project.rs:+1:17: +1:18\n+          StorageDead(_1);                 // scope 0 at $DIR/ref_deref_project.rs:+1:17: +1:18\n+          nop;                             // scope 0 at $DIR/ref_deref_project.rs:+0:11: +2:2\n+          return;                          // scope 0 at $DIR/ref_deref_project.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "6f3a060a1260a87281f8b73dbed98d1c80ffdb99", "filename": "src/test/mir-opt/dataflow-const-prop/previous/ref_deref_project.main.PromoteTemps.diff", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fref_deref_project.main.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fref_deref_project.main.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fref_deref_project.main.PromoteTemps.diff?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,30 @@\n+- // MIR for `main` before PromoteTemps\n++ // MIR for `main` after PromoteTemps\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/ref_deref_project.rs:+0:11: +0:11\n+      let _1: i32;                         // in scope 0 at $DIR/ref_deref_project.rs:+1:5: +1:17\n+      let mut _2: &i32;                    // in scope 0 at $DIR/ref_deref_project.rs:+1:6: +1:17\n+      let _3: (i32, i32);                  // in scope 0 at $DIR/ref_deref_project.rs:+1:8: +1:14\n++     let mut _4: &(i32, i32);             // in scope 0 at $DIR/ref_deref_project.rs:+1:6: +1:17\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/ref_deref_project.rs:+1:5: +1:17\n+          StorageLive(_2);                 // scope 0 at $DIR/ref_deref_project.rs:+1:6: +1:17\n+-         StorageLive(_3);                 // scope 0 at $DIR/ref_deref_project.rs:+1:8: +1:14\n+-         _3 = (const 4_i32, const 5_i32); // scope 0 at $DIR/ref_deref_project.rs:+1:8: +1:14\n+-         _2 = &(_3.1: i32);               // scope 0 at $DIR/ref_deref_project.rs:+1:6: +1:17\n++         _4 = const main::promoted[0];    // scope 0 at $DIR/ref_deref_project.rs:+1:6: +1:17\n++                                          // mir::Constant\n++                                          // + span: $DIR/ref_deref_project.rs:6:6: 6:17\n++                                          // + literal: Const { ty: &(i32, i32), val: Unevaluated(main, [], Some(promoted[0])) }\n++         _2 = &((*_4).1: i32);            // scope 0 at $DIR/ref_deref_project.rs:+1:6: +1:17\n+          _1 = (*_2);                      // scope 0 at $DIR/ref_deref_project.rs:+1:5: +1:17\n+-         StorageDead(_3);                 // scope 0 at $DIR/ref_deref_project.rs:+1:17: +1:18\n+          StorageDead(_2);                 // scope 0 at $DIR/ref_deref_project.rs:+1:17: +1:18\n+          StorageDead(_1);                 // scope 0 at $DIR/ref_deref_project.rs:+1:17: +1:18\n+          _0 = const ();                   // scope 0 at $DIR/ref_deref_project.rs:+0:11: +2:2\n+          return;                          // scope 0 at $DIR/ref_deref_project.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "b28fb320d33e4306b874931f3b8a97cf3f14d8e3", "filename": "src/test/mir-opt/dataflow-const-prop/previous/ref_deref_project.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fref_deref_project.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fref_deref_project.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fref_deref_project.rs?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,7 @@\n+// unit-test\n+// EMIT_MIR ref_deref_project.main.PromoteTemps.diff\n+// EMIT_MIR ref_deref_project.main.DataflowConstProp.diff\n+\n+fn main() {\n+    *(&(4, 5).1); // This does not currently propagate (#67862)\n+}"}, {"sha": "7581b852a89b006fe1679b81d0969e2fc667c98b", "filename": "src/test/mir-opt/dataflow-const-prop/previous/reify_fn_ptr.main.DataflowConstProp.diff", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Freify_fn_ptr.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Freify_fn_ptr.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Freify_fn_ptr.main.DataflowConstProp.diff?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,29 @@\n+- // MIR for `main` before DataflowConstProp\n++ // MIR for `main` after DataflowConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/reify_fn_ptr.rs:+0:11: +0:11\n+      let mut _1: *const fn();             // in scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:41\n+      let mut _2: usize;                   // in scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:26\n+      let mut _3: fn();                    // in scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:17\n+      scope 1 {\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:41\n+          StorageLive(_2);                 // scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:26\n+          StorageLive(_3);                 // scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:17\n+          _3 = main as fn() (Pointer(ReifyFnPointer)); // scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:17\n+                                           // mir::Constant\n+                                           // + span: $DIR/reify_fn_ptr.rs:4:13: 4:17\n+                                           // + literal: Const { ty: fn() {main}, val: Value(<ZST>) }\n+          _2 = move _3 as usize (PointerExposeAddress); // scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:26\n+          StorageDead(_3);                 // scope 0 at $DIR/reify_fn_ptr.rs:+1:25: +1:26\n+          _1 = move _2 as *const fn() (PointerFromExposedAddress); // scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:41\n+          StorageDead(_2);                 // scope 0 at $DIR/reify_fn_ptr.rs:+1:40: +1:41\n+          StorageDead(_1);                 // scope 0 at $DIR/reify_fn_ptr.rs:+1:41: +1:42\n+          nop;                             // scope 0 at $DIR/reify_fn_ptr.rs:+0:11: +2:2\n+          return;                          // scope 0 at $DIR/reify_fn_ptr.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "00205a2963080656cbfd55829962531497acd000", "filename": "src/test/mir-opt/dataflow-const-prop/previous/reify_fn_ptr.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Freify_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Freify_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Freify_fn_ptr.rs?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,5 @@\n+// EMIT_MIR reify_fn_ptr.main.DataflowConstProp.diff\n+\n+fn main() {\n+    let _ = main as usize as *const fn();\n+}"}, {"sha": "8534710bf369fe73b06ae0e77ca52e7453537a7d", "filename": "src/test/mir-opt/dataflow-const-prop/previous/repeat.main.DataflowConstProp.32bit.diff", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Frepeat.main.DataflowConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Frepeat.main.DataflowConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Frepeat.main.DataflowConstProp.32bit.diff?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,43 @@\n+- // MIR for `main` before DataflowConstProp\n++ // MIR for `main` after DataflowConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/repeat.rs:+0:11: +0:11\n+      let _1: u32;                         // in scope 0 at $DIR/repeat.rs:+1:9: +1:10\n+      let mut _2: u32;                     // in scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+      let mut _3: [u32; 8];                // in scope 0 at $DIR/repeat.rs:+1:18: +1:25\n+      let _4: usize;                       // in scope 0 at $DIR/repeat.rs:+1:26: +1:27\n+      let mut _5: usize;                   // in scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+      let mut _6: bool;                    // in scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/repeat.rs:+1:9: +1:10\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/repeat.rs:+1:9: +1:10\n+          StorageLive(_2);                 // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+          StorageLive(_3);                 // scope 0 at $DIR/repeat.rs:+1:18: +1:25\n+          _3 = [const 42_u32; 8];          // scope 0 at $DIR/repeat.rs:+1:18: +1:25\n+          StorageLive(_4);                 // scope 0 at $DIR/repeat.rs:+1:26: +1:27\n+          _4 = const 2_usize;              // scope 0 at $DIR/repeat.rs:+1:26: +1:27\n+          _5 = const 8_usize;              // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+-         _6 = Lt(_4, _5);                 // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+-         assert(move _6, \"index out of bounds: the length is {} but the index is {}\", move _5, _4) -> bb1; // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n++         _6 = const true;                 // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n++         assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 8_usize, const 2_usize) -> bb1; // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+      }\n+  \n+      bb1: {\n+-         _2 = _3[_4];                     // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+-         _1 = Add(move _2, const 0_u32);  // scope 0 at $DIR/repeat.rs:+1:18: +1:32\n++         _2 = const 42_u32;               // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n++         _1 = const 42_u32;               // scope 0 at $DIR/repeat.rs:+1:18: +1:32\n+          StorageDead(_2);                 // scope 0 at $DIR/repeat.rs:+1:31: +1:32\n+          StorageDead(_4);                 // scope 0 at $DIR/repeat.rs:+1:32: +1:33\n+          StorageDead(_3);                 // scope 0 at $DIR/repeat.rs:+1:32: +1:33\n+          nop;                             // scope 0 at $DIR/repeat.rs:+0:11: +2:2\n+          StorageDead(_1);                 // scope 0 at $DIR/repeat.rs:+2:1: +2:2\n+          return;                          // scope 0 at $DIR/repeat.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "8534710bf369fe73b06ae0e77ca52e7453537a7d", "filename": "src/test/mir-opt/dataflow-const-prop/previous/repeat.main.DataflowConstProp.64bit.diff", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Frepeat.main.DataflowConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Frepeat.main.DataflowConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Frepeat.main.DataflowConstProp.64bit.diff?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,43 @@\n+- // MIR for `main` before DataflowConstProp\n++ // MIR for `main` after DataflowConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/repeat.rs:+0:11: +0:11\n+      let _1: u32;                         // in scope 0 at $DIR/repeat.rs:+1:9: +1:10\n+      let mut _2: u32;                     // in scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+      let mut _3: [u32; 8];                // in scope 0 at $DIR/repeat.rs:+1:18: +1:25\n+      let _4: usize;                       // in scope 0 at $DIR/repeat.rs:+1:26: +1:27\n+      let mut _5: usize;                   // in scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+      let mut _6: bool;                    // in scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/repeat.rs:+1:9: +1:10\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/repeat.rs:+1:9: +1:10\n+          StorageLive(_2);                 // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+          StorageLive(_3);                 // scope 0 at $DIR/repeat.rs:+1:18: +1:25\n+          _3 = [const 42_u32; 8];          // scope 0 at $DIR/repeat.rs:+1:18: +1:25\n+          StorageLive(_4);                 // scope 0 at $DIR/repeat.rs:+1:26: +1:27\n+          _4 = const 2_usize;              // scope 0 at $DIR/repeat.rs:+1:26: +1:27\n+          _5 = const 8_usize;              // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+-         _6 = Lt(_4, _5);                 // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+-         assert(move _6, \"index out of bounds: the length is {} but the index is {}\", move _5, _4) -> bb1; // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n++         _6 = const true;                 // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n++         assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 8_usize, const 2_usize) -> bb1; // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+      }\n+  \n+      bb1: {\n+-         _2 = _3[_4];                     // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+-         _1 = Add(move _2, const 0_u32);  // scope 0 at $DIR/repeat.rs:+1:18: +1:32\n++         _2 = const 42_u32;               // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n++         _1 = const 42_u32;               // scope 0 at $DIR/repeat.rs:+1:18: +1:32\n+          StorageDead(_2);                 // scope 0 at $DIR/repeat.rs:+1:31: +1:32\n+          StorageDead(_4);                 // scope 0 at $DIR/repeat.rs:+1:32: +1:33\n+          StorageDead(_3);                 // scope 0 at $DIR/repeat.rs:+1:32: +1:33\n+          nop;                             // scope 0 at $DIR/repeat.rs:+0:11: +2:2\n+          StorageDead(_1);                 // scope 0 at $DIR/repeat.rs:+2:1: +2:2\n+          return;                          // scope 0 at $DIR/repeat.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "ade87676869ee8d14d12fc48891fa061ea8d82fb", "filename": "src/test/mir-opt/dataflow-const-prop/previous/repeat.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Frepeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Frepeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Frepeat.rs?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,7 @@\n+// compile-flags: -O\n+\n+// EMIT_MIR_FOR_EACH_BIT_WIDTH\n+// EMIT_MIR repeat.main.DataflowConstProp.diff\n+fn main() {\n+    let x: u32 = [42; 8][2] + 0;\n+}"}, {"sha": "97966e86a2dc8642b20394b998429eff74144953", "filename": "src/test/mir-opt/dataflow-const-prop/previous/return_place.add.DataflowConstProp.diff", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Freturn_place.add.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Freturn_place.add.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Freturn_place.add.DataflowConstProp.diff?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,21 @@\n+- // MIR for `add` before DataflowConstProp\n++ // MIR for `add` after DataflowConstProp\n+  \n+  fn add() -> u32 {\n+      let mut _0: u32;                     // return place in scope 0 at $DIR/return_place.rs:+0:13: +0:16\n+      let mut _1: (u32, bool);             // in scope 0 at $DIR/return_place.rs:+1:5: +1:10\n+  \n+      bb0: {\n+-         _1 = CheckedAdd(const 2_u32, const 2_u32); // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n+-         assert(!move (_1.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const 2_u32, const 2_u32) -> bb1; // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n++         _1 = const (4_u32, false);       // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n++         assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", const 2_u32, const 2_u32) -> bb1; // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n+      }\n+  \n+      bb1: {\n+-         _0 = move (_1.0: u32);           // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n++         _0 = const 4_u32;                // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n+          return;                          // scope 0 at $DIR/return_place.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "ececd9942838d9a607c1cee14bc812e1ba830453", "filename": "src/test/mir-opt/dataflow-const-prop/previous/return_place.add.PreCodegen.before.mir", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Freturn_place.add.PreCodegen.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Freturn_place.add.PreCodegen.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Freturn_place.add.PreCodegen.before.mir?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,10 @@\n+// MIR for `add` before PreCodegen\n+\n+fn add() -> u32 {\n+    let mut _0: u32;                     // return place in scope 0 at $DIR/return_place.rs:+0:13: +0:16\n+\n+    bb0: {\n+        _0 = const 4_u32;                // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n+        return;                          // scope 0 at $DIR/return_place.rs:+2:2: +2:2\n+    }\n+}"}, {"sha": "d4cac2c76ddcdef24bc377a4c1d0fdb5a43cc706", "filename": "src/test/mir-opt/dataflow-const-prop/previous/return_place.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Freturn_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Freturn_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Freturn_place.rs?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,11 @@\n+// compile-flags: -C overflow-checks=on\n+\n+// EMIT_MIR return_place.add.DataflowConstProp.diff\n+// EMIT_MIR return_place.add.PreCodegen.before.mir\n+fn add() -> u32 {\n+    2 + 2\n+}\n+\n+fn main() {\n+    add();\n+}"}, {"sha": "955c3e956c8e74c316ba6eda798f182bd62ae705", "filename": "src/test/mir-opt/dataflow-const-prop/previous/scalar_literal_propagation.main.DataflowConstProp.diff", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fscalar_literal_propagation.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fscalar_literal_propagation.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fscalar_literal_propagation.main.DataflowConstProp.diff?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,35 @@\n+- // MIR for `main` before DataflowConstProp\n++ // MIR for `main` after DataflowConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/scalar_literal_propagation.rs:+0:11: +0:11\n+      let _1: u32;                         // in scope 0 at $DIR/scalar_literal_propagation.rs:+1:9: +1:10\n+      let _2: ();                          // in scope 0 at $DIR/scalar_literal_propagation.rs:+2:5: +2:15\n+      let mut _3: u32;                     // in scope 0 at $DIR/scalar_literal_propagation.rs:+2:13: +2:14\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/scalar_literal_propagation.rs:+1:9: +1:10\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/scalar_literal_propagation.rs:+1:9: +1:10\n+          _1 = const 1_u32;                // scope 0 at $DIR/scalar_literal_propagation.rs:+1:13: +1:14\n+          StorageLive(_2);                 // scope 1 at $DIR/scalar_literal_propagation.rs:+2:5: +2:15\n+          StorageLive(_3);                 // scope 1 at $DIR/scalar_literal_propagation.rs:+2:13: +2:14\n+-         _3 = _1;                         // scope 1 at $DIR/scalar_literal_propagation.rs:+2:13: +2:14\n+-         _2 = consume(move _3) -> bb1;    // scope 1 at $DIR/scalar_literal_propagation.rs:+2:5: +2:15\n++         _3 = const 1_u32;                // scope 1 at $DIR/scalar_literal_propagation.rs:+2:13: +2:14\n++         _2 = consume(const 1_u32) -> bb1; // scope 1 at $DIR/scalar_literal_propagation.rs:+2:5: +2:15\n+                                           // mir::Constant\n+                                           // + span: $DIR/scalar_literal_propagation.rs:4:5: 4:12\n+                                           // + literal: Const { ty: fn(u32) {consume}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_3);                 // scope 1 at $DIR/scalar_literal_propagation.rs:+2:14: +2:15\n+          StorageDead(_2);                 // scope 1 at $DIR/scalar_literal_propagation.rs:+2:15: +2:16\n+          nop;                             // scope 0 at $DIR/scalar_literal_propagation.rs:+0:11: +3:2\n+          StorageDead(_1);                 // scope 0 at $DIR/scalar_literal_propagation.rs:+3:1: +3:2\n+          return;                          // scope 0 at $DIR/scalar_literal_propagation.rs:+3:2: +3:2\n+      }\n+  }\n+  "}, {"sha": "00726b6f13de94983de82aa51832a5d3686b202c", "filename": "src/test/mir-opt/dataflow-const-prop/previous/scalar_literal_propagation.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fscalar_literal_propagation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fscalar_literal_propagation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fscalar_literal_propagation.rs?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,8 @@\n+// EMIT_MIR scalar_literal_propagation.main.DataflowConstProp.diff\n+fn main() {\n+    let x = 1;\n+    consume(x);\n+}\n+\n+#[inline(never)]\n+fn consume(_: u32) {}"}, {"sha": "d8718409b4b77bcaca629983808ffac1a21dbbee", "filename": "src/test/mir-opt/dataflow-const-prop/previous/slice_len.main.DataflowConstProp.32bit.diff", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fslice_len.main.DataflowConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fslice_len.main.DataflowConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fslice_len.main.DataflowConstProp.32bit.diff?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,53 @@\n+- // MIR for `main` before DataflowConstProp\n++ // MIR for `main` after DataflowConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/slice_len.rs:+0:11: +0:11\n+      let _1: u32;                         // in scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+      let mut _2: &[u32];                  // in scope 0 at $DIR/slice_len.rs:+1:5: +1:30\n+      let mut _3: &[u32; 3];               // in scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+      let _4: &[u32; 3];                   // in scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+      let _5: [u32; 3];                    // in scope 0 at $DIR/slice_len.rs:+1:7: +1:19\n+      let _6: usize;                       // in scope 0 at $DIR/slice_len.rs:+1:31: +1:32\n+      let mut _7: usize;                   // in scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+      let mut _8: bool;                    // in scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+      let mut _9: &[u32; 3];               // in scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+      let mut _10: &[u32; 3];              // in scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+          StorageLive(_2);                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:30\n+          StorageLive(_3);                 // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+          StorageLive(_4);                 // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+          _9 = const main::promoted[0];    // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+                                           // mir::Constant\n+                                           // + span: $DIR/slice_len.rs:5:6: 5:19\n+                                           // + literal: Const { ty: &[u32; 3], val: Unevaluated(main, [], Some(promoted[0])) }\n+          _4 = _9;                         // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+          _3 = _4;                         // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+          StorageLive(_10);                // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+          _10 = _3;                        // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+          _2 = move _3 as &[u32] (Pointer(Unsize)); // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+          StorageDead(_3);                 // scope 0 at $DIR/slice_len.rs:+1:18: +1:19\n+          StorageLive(_6);                 // scope 0 at $DIR/slice_len.rs:+1:31: +1:32\n+          _6 = const 1_usize;              // scope 0 at $DIR/slice_len.rs:+1:31: +1:32\n+          _7 = const 3_usize;              // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+          StorageDead(_10);                // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+-         _8 = Lt(_6, _7);                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+-         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb1; // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n++         _8 = const true;                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n++         assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 3_usize, const 1_usize) -> bb1; // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+      }\n+  \n+      bb1: {\n+-         _1 = (*_2)[_6];                  // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n++         _1 = const 2_u32;                // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+          StorageDead(_6);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34\n+          StorageDead(_4);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34\n+          StorageDead(_2);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34\n+          StorageDead(_1);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34\n+          nop;                             // scope 0 at $DIR/slice_len.rs:+0:11: +2:2\n+          return;                          // scope 0 at $DIR/slice_len.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "d8718409b4b77bcaca629983808ffac1a21dbbee", "filename": "src/test/mir-opt/dataflow-const-prop/previous/slice_len.main.DataflowConstProp.64bit.diff", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fslice_len.main.DataflowConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fslice_len.main.DataflowConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fslice_len.main.DataflowConstProp.64bit.diff?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,53 @@\n+- // MIR for `main` before DataflowConstProp\n++ // MIR for `main` after DataflowConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/slice_len.rs:+0:11: +0:11\n+      let _1: u32;                         // in scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+      let mut _2: &[u32];                  // in scope 0 at $DIR/slice_len.rs:+1:5: +1:30\n+      let mut _3: &[u32; 3];               // in scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+      let _4: &[u32; 3];                   // in scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+      let _5: [u32; 3];                    // in scope 0 at $DIR/slice_len.rs:+1:7: +1:19\n+      let _6: usize;                       // in scope 0 at $DIR/slice_len.rs:+1:31: +1:32\n+      let mut _7: usize;                   // in scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+      let mut _8: bool;                    // in scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+      let mut _9: &[u32; 3];               // in scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+      let mut _10: &[u32; 3];              // in scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+          StorageLive(_2);                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:30\n+          StorageLive(_3);                 // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+          StorageLive(_4);                 // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+          _9 = const main::promoted[0];    // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+                                           // mir::Constant\n+                                           // + span: $DIR/slice_len.rs:5:6: 5:19\n+                                           // + literal: Const { ty: &[u32; 3], val: Unevaluated(main, [], Some(promoted[0])) }\n+          _4 = _9;                         // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+          _3 = _4;                         // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+          StorageLive(_10);                // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+          _10 = _3;                        // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+          _2 = move _3 as &[u32] (Pointer(Unsize)); // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+          StorageDead(_3);                 // scope 0 at $DIR/slice_len.rs:+1:18: +1:19\n+          StorageLive(_6);                 // scope 0 at $DIR/slice_len.rs:+1:31: +1:32\n+          _6 = const 1_usize;              // scope 0 at $DIR/slice_len.rs:+1:31: +1:32\n+          _7 = const 3_usize;              // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+          StorageDead(_10);                // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+-         _8 = Lt(_6, _7);                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+-         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb1; // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n++         _8 = const true;                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n++         assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 3_usize, const 1_usize) -> bb1; // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+      }\n+  \n+      bb1: {\n+-         _1 = (*_2)[_6];                  // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n++         _1 = const 2_u32;                // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+          StorageDead(_6);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34\n+          StorageDead(_4);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34\n+          StorageDead(_2);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34\n+          StorageDead(_1);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34\n+          nop;                             // scope 0 at $DIR/slice_len.rs:+0:11: +2:2\n+          return;                          // scope 0 at $DIR/slice_len.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "224ccb70f8b462986247ab6f4a70e03a4e3ab5a4", "filename": "src/test/mir-opt/dataflow-const-prop/previous/slice_len.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fslice_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fslice_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fslice_len.rs?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,6 @@\n+// EMIT_MIR_FOR_EACH_BIT_WIDTH\n+\n+// EMIT_MIR slice_len.main.DataflowConstProp.diff\n+fn main() {\n+    (&[1u32, 2, 3] as &[u32])[1];\n+}"}, {"sha": "27223fcb2dbbbedbbbb6ae01a67f5c501157e5a9", "filename": "src/test/mir-opt/dataflow-const-prop/previous/switch_int.main.DataflowConstProp.diff", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fswitch_int.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fswitch_int.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fswitch_int.main.DataflowConstProp.diff?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,34 @@\n+- // MIR for `main` before DataflowConstProp\n++ // MIR for `main` after DataflowConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/switch_int.rs:+0:11: +0:11\n+      let mut _1: i32;                     // in scope 0 at $DIR/switch_int.rs:+1:11: +1:12\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/switch_int.rs:+1:11: +1:12\n+          _1 = const 1_i32;                // scope 0 at $DIR/switch_int.rs:+1:11: +1:12\n+-         switchInt(_1) -> [1_i32: bb2, otherwise: bb1]; // scope 0 at $DIR/switch_int.rs:+1:5: +1:12\n++         switchInt(const 1_i32) -> [1_i32: bb2, otherwise: bb1]; // scope 0 at $DIR/switch_int.rs:+1:5: +1:12\n+      }\n+  \n+      bb1: {\n+          _0 = foo(const -1_i32) -> bb3;   // scope 0 at $DIR/switch_int.rs:+3:14: +3:21\n+                                           // mir::Constant\n+                                           // + span: $DIR/switch_int.rs:9:14: 9:17\n+                                           // + literal: Const { ty: fn(i32) {foo}, val: Value(<ZST>) }\n+      }\n+  \n+      bb2: {\n+          _0 = foo(const 0_i32) -> bb3;    // scope 0 at $DIR/switch_int.rs:+2:14: +2:20\n+                                           // mir::Constant\n+                                           // + span: $DIR/switch_int.rs:8:14: 8:17\n+                                           // + literal: Const { ty: fn(i32) {foo}, val: Value(<ZST>) }\n+      }\n+  \n+      bb3: {\n+          StorageDead(_1);                 // scope 0 at $DIR/switch_int.rs:+5:1: +5:2\n+          return;                          // scope 0 at $DIR/switch_int.rs:+5:2: +5:2\n+      }\n+  }\n+  "}, {"sha": "74f9eafe42061cd0724e94a550eef3aa487dea20", "filename": "src/test/mir-opt/dataflow-const-prop/previous/switch_int.main.SimplifyConstCondition-after-const-prop.diff", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fswitch_int.main.SimplifyConstCondition-after-const-prop.diff", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fswitch_int.main.SimplifyConstCondition-after-const-prop.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fswitch_int.main.SimplifyConstCondition-after-const-prop.diff?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,34 @@\n+- // MIR for `main` before SimplifyConstCondition-after-const-prop\n++ // MIR for `main` after SimplifyConstCondition-after-const-prop\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/switch_int.rs:+0:11: +0:11\n+      let mut _1: i32;                     // in scope 0 at $DIR/switch_int.rs:+1:11: +1:12\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/switch_int.rs:+1:11: +1:12\n+          _1 = const 1_i32;                // scope 0 at $DIR/switch_int.rs:+1:11: +1:12\n+-         switchInt(const 1_i32) -> [1_i32: bb2, otherwise: bb1]; // scope 0 at $DIR/switch_int.rs:+1:5: +1:12\n++         goto -> bb2;                     // scope 0 at $DIR/switch_int.rs:+1:5: +1:12\n+      }\n+  \n+      bb1: {\n+          _0 = foo(const -1_i32) -> bb3;   // scope 0 at $DIR/switch_int.rs:+3:14: +3:21\n+                                           // mir::Constant\n+                                           // + span: $DIR/switch_int.rs:9:14: 9:17\n+                                           // + literal: Const { ty: fn(i32) {foo}, val: Value(<ZST>) }\n+      }\n+  \n+      bb2: {\n+          _0 = foo(const 0_i32) -> bb3;    // scope 0 at $DIR/switch_int.rs:+2:14: +2:20\n+                                           // mir::Constant\n+                                           // + span: $DIR/switch_int.rs:8:14: 8:17\n+                                           // + literal: Const { ty: fn(i32) {foo}, val: Value(<ZST>) }\n+      }\n+  \n+      bb3: {\n+          StorageDead(_1);                 // scope 0 at $DIR/switch_int.rs:+5:1: +5:2\n+          return;                          // scope 0 at $DIR/switch_int.rs:+5:2: +5:2\n+      }\n+  }\n+  "}, {"sha": "eec51c5c48c25885c75d6b6ce5d4e0c20bb897de", "filename": "src/test/mir-opt/dataflow-const-prop/previous/switch_int.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fswitch_int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fswitch_int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fswitch_int.rs?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,11 @@\n+#[inline(never)]\n+fn foo(_: i32) {}\n+\n+// EMIT_MIR switch_int.main.DataflowConstProp.diff\n+// EMIT_MIR switch_int.main.SimplifyConstCondition-after-const-prop.diff\n+fn main() {\n+    match 1 {\n+        1 => foo(0),\n+        _ => foo(-1),\n+    }\n+}"}, {"sha": "176fd70fbef31f1e5fa0ca0ffc5a0a546d15a9e5", "filename": "src/test/mir-opt/dataflow-const-prop/previous/tuple_literal_propagation.main.DataflowConstProp.diff", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Ftuple_literal_propagation.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Ftuple_literal_propagation.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Ftuple_literal_propagation.main.DataflowConstProp.diff?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,36 @@\n+- // MIR for `main` before DataflowConstProp\n++ // MIR for `main` after DataflowConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/tuple_literal_propagation.rs:+0:11: +0:11\n+      let _1: (u32, u32);                  // in scope 0 at $DIR/tuple_literal_propagation.rs:+1:9: +1:10\n+      let _2: ();                          // in scope 0 at $DIR/tuple_literal_propagation.rs:+3:5: +3:15\n+      let mut _3: (u32, u32);              // in scope 0 at $DIR/tuple_literal_propagation.rs:+3:13: +3:14\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/tuple_literal_propagation.rs:+1:9: +1:10\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/tuple_literal_propagation.rs:+1:9: +1:10\n+          Deinit(_1);                      // scope 0 at $DIR/tuple_literal_propagation.rs:+1:13: +1:19\n+          (_1.0: u32) = const 1_u32;       // scope 0 at $DIR/tuple_literal_propagation.rs:+1:13: +1:19\n+          (_1.1: u32) = const 2_u32;       // scope 0 at $DIR/tuple_literal_propagation.rs:+1:13: +1:19\n+          StorageLive(_2);                 // scope 1 at $DIR/tuple_literal_propagation.rs:+3:5: +3:15\n+          StorageLive(_3);                 // scope 1 at $DIR/tuple_literal_propagation.rs:+3:13: +3:14\n+-         _3 = _1;                         // scope 1 at $DIR/tuple_literal_propagation.rs:+3:13: +3:14\n++         _3 = const (1_u32, 2_u32);       // scope 1 at $DIR/tuple_literal_propagation.rs:+3:13: +3:14\n+          _2 = consume(move _3) -> bb1;    // scope 1 at $DIR/tuple_literal_propagation.rs:+3:5: +3:15\n+                                           // mir::Constant\n+                                           // + span: $DIR/tuple_literal_propagation.rs:5:5: 5:12\n+                                           // + literal: Const { ty: fn((u32, u32)) {consume}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_3);                 // scope 1 at $DIR/tuple_literal_propagation.rs:+3:14: +3:15\n+          StorageDead(_2);                 // scope 1 at $DIR/tuple_literal_propagation.rs:+3:15: +3:16\n+          nop;                             // scope 0 at $DIR/tuple_literal_propagation.rs:+0:11: +4:2\n+          StorageDead(_1);                 // scope 0 at $DIR/tuple_literal_propagation.rs:+4:1: +4:2\n+          return;                          // scope 0 at $DIR/tuple_literal_propagation.rs:+4:2: +4:2\n+      }\n+  }\n+  "}, {"sha": "41085838127f6991d2a295d277bd7631e2a2fd3e", "filename": "src/test/mir-opt/dataflow-const-prop/previous/tuple_literal_propagation.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Ftuple_literal_propagation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686861711df9e2a70df709c92577a95881baca76/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Ftuple_literal_propagation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Ftuple_literal_propagation.rs?ref=686861711df9e2a70df709c92577a95881baca76", "patch": "@@ -0,0 +1,9 @@\n+// EMIT_MIR tuple_literal_propagation.main.DataflowConstProp.diff\n+fn main() {\n+    let x = (1, 2);\n+\n+    consume(x);\n+}\n+\n+#[inline(never)]\n+fn consume(_: (u32, u32)) {}"}]}