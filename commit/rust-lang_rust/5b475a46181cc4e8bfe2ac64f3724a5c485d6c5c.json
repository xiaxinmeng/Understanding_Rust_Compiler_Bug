{"sha": "5b475a46181cc4e8bfe2ac64f3724a5c485d6c5c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViNDc1YTQ2MTgxY2M0ZThiZmUyYWM2NGYzNzI0YTVjNDg1ZDZjNWM=", "commit": {"author": {"name": "Andy Weiss", "email": "dragonbear@google.com", "date": "2020-09-09T22:16:34Z"}, "committer": {"name": "Andy Weiss", "email": "dragonbear@google.com", "date": "2020-09-22T20:22:10Z"}, "message": "Suggest async {} for async || {}\n\nFixes #76011\n\nThis adds support for adding help diagnostics to the feature gating checks and\nthen uses it for the async_closure gate to add the extra bit of help\ninformation as described in the issue.", "tree": {"sha": "c14392e4936b7f78d308ecde758fa0a9b0ced8d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c14392e4936b7f78d308ecde758fa0a9b0ced8d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b475a46181cc4e8bfe2ac64f3724a5c485d6c5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b475a46181cc4e8bfe2ac64f3724a5c485d6c5c", "html_url": "https://github.com/rust-lang/rust/commit/5b475a46181cc4e8bfe2ac64f3724a5c485d6c5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b475a46181cc4e8bfe2ac64f3724a5c485d6c5c/comments", "author": {"login": "rokob", "id": 831355, "node_id": "MDQ6VXNlcjgzMTM1NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/831355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rokob", "html_url": "https://github.com/rokob", "followers_url": "https://api.github.com/users/rokob/followers", "following_url": "https://api.github.com/users/rokob/following{/other_user}", "gists_url": "https://api.github.com/users/rokob/gists{/gist_id}", "starred_url": "https://api.github.com/users/rokob/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rokob/subscriptions", "organizations_url": "https://api.github.com/users/rokob/orgs", "repos_url": "https://api.github.com/users/rokob/repos", "events_url": "https://api.github.com/users/rokob/events{/privacy}", "received_events_url": "https://api.github.com/users/rokob/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rokob", "id": 831355, "node_id": "MDQ6VXNlcjgzMTM1NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/831355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rokob", "html_url": "https://github.com/rokob", "followers_url": "https://api.github.com/users/rokob/followers", "following_url": "https://api.github.com/users/rokob/following{/other_user}", "gists_url": "https://api.github.com/users/rokob/gists{/gist_id}", "starred_url": "https://api.github.com/users/rokob/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rokob/subscriptions", "organizations_url": "https://api.github.com/users/rokob/orgs", "repos_url": "https://api.github.com/users/rokob/repos", "events_url": "https://api.github.com/users/rokob/events{/privacy}", "received_events_url": "https://api.github.com/users/rokob/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25b2f4861222d6507598149f576e7d25dc308c8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/25b2f4861222d6507598149f576e7d25dc308c8c", "html_url": "https://github.com/rust-lang/rust/commit/25b2f4861222d6507598149f576e7d25dc308c8c"}], "stats": {"total": 51, "additions": 34, "deletions": 17}, "files": [{"sha": "f52bc206ee4b1af81b26d9b3a1602773aea9d150", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5b475a46181cc4e8bfe2ac64f3724a5c485d6c5c/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b475a46181cc4e8bfe2ac64f3724a5c485d6c5c/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=5b475a46181cc4e8bfe2ac64f3724a5c485d6c5c", "patch": "@@ -14,6 +14,17 @@ use rustc_span::Span;\n use tracing::debug;\n \n macro_rules! gate_feature_fn {\n+    ($visitor: expr, $has_feature: expr, $span: expr, $name: expr, $explain: expr, $help: expr) => {{\n+        let (visitor, has_feature, span, name, explain, help) =\n+            (&*$visitor, $has_feature, $span, $name, $explain, $help);\n+        let has_feature: bool = has_feature(visitor.features);\n+        debug!(\"gate_feature(feature = {:?}, span = {:?}); has? {}\", name, span, has_feature);\n+        if !has_feature && !span.allows_unstable($name) {\n+            feature_err_issue(&visitor.sess.parse_sess, name, span, GateIssue::Language, explain)\n+                .help(help)\n+                .emit();\n+        }\n+    }};\n     ($visitor: expr, $has_feature: expr, $span: expr, $name: expr, $explain: expr) => {{\n         let (visitor, has_feature, span, name, explain) =\n             (&*$visitor, $has_feature, $span, $name, $explain);\n@@ -27,6 +38,9 @@ macro_rules! gate_feature_fn {\n }\n \n macro_rules! gate_feature_post {\n+    ($visitor: expr, $feature: ident, $span: expr, $explain: expr, $help: expr) => {\n+        gate_feature_fn!($visitor, |x: &Features| x.$feature, $span, sym::$feature, $explain, $help)\n+    };\n     ($visitor: expr, $feature: ident, $span: expr, $explain: expr) => {\n         gate_feature_fn!($visitor, |x: &Features| x.$feature, $span, sym::$feature, $explain)\n     };\n@@ -613,6 +627,13 @@ pub fn check_crate(krate: &ast::Crate, sess: &Session) {\n \n     let spans = sess.parse_sess.gated_spans.spans.borrow();\n     macro_rules! gate_all {\n+        ($gate:ident, $msg:literal, $help:literal) => {\n+            if let Some(spans) = spans.get(&sym::$gate) {\n+                for span in spans {\n+                    gate_feature_post!(&visitor, $gate, *span, $msg, $help);\n+                }\n+            }\n+        };\n         ($gate:ident, $msg:literal) => {\n             if let Some(spans) = spans.get(&sym::$gate) {\n                 for span in spans {\n@@ -623,7 +644,11 @@ pub fn check_crate(krate: &ast::Crate, sess: &Session) {\n     }\n     gate_all!(if_let_guard, \"`if let` guard is not implemented\");\n     gate_all!(let_chains, \"`let` expressions in this position are experimental\");\n-    gate_all!(async_closure, \"async closures are unstable\");\n+    gate_all!(\n+        async_closure,\n+        \"async closures are unstable\",\n+        \"to use an async block, remove the `||`: `async {`\"\n+    );\n     gate_all!(generators, \"yield syntax is experimental\");\n     gate_all!(or_patterns, \"or-patterns syntax is experimental\");\n     gate_all!(raw_ref_op, \"raw address of syntax is experimental\");"}, {"sha": "368c0d4c9bcf1c9ba837bad671a614a0d7e850c7", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5b475a46181cc4e8bfe2ac64f3724a5c485d6c5c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b475a46181cc4e8bfe2ac64f3724a5c485d6c5c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=5b475a46181cc4e8bfe2ac64f3724a5c485d6c5c", "patch": "@@ -1554,10 +1554,6 @@ impl<'a> Parser<'a> {\n         } else {\n             Async::No\n         };\n-        if let Async::Yes { span, .. } = asyncness {\n-            // Feature-gate `async ||` closures.\n-            self.sess.gated_spans.gate(sym::async_closure, span);\n-        }\n \n         let capture_clause = self.parse_capture_clause();\n         let decl = self.parse_fn_block_decl()?;\n@@ -1574,6 +1570,11 @@ impl<'a> Parser<'a> {\n             }\n         };\n \n+        if let Async::Yes { span, .. } = asyncness {\n+            // Feature-gate `async ||` closures.\n+            self.sess.gated_spans.gate(sym::async_closure, span);\n+        }\n+\n         Ok(self.mk_expr(\n             lo.to(body.span),\n             ExprKind::Closure(capture_clause, asyncness, movability, decl, body, lo.to(decl_hi)),"}, {"sha": "485a838b67ff2e9861f42ddcc3e574aaca23c537", "filename": "src/test/ui/async-await/feature-async-closure.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b475a46181cc4e8bfe2ac64f3724a5c485d6c5c/src%2Ftest%2Fui%2Fasync-await%2Ffeature-async-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b475a46181cc4e8bfe2ac64f3724a5c485d6c5c/src%2Ftest%2Fui%2Fasync-await%2Ffeature-async-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Ffeature-async-closure.stderr?ref=5b475a46181cc4e8bfe2ac64f3724a5c485d6c5c", "patch": "@@ -6,6 +6,7 @@ LL |     let _ = async || {};\n    |\n    = note: see issue #62290 <https://github.com/rust-lang/rust/issues/62290> for more information\n    = help: add `#![feature(async_closure)]` to the crate attributes to enable\n+   = help: to use an async block, remove the `||`: `async {`\n \n error: aborting due to previous error\n "}, {"sha": "8a6599488b1e750de5542d36ee3d04185a34a7de", "filename": "src/test/ui/parser/block-no-opening-brace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b475a46181cc4e8bfe2ac64f3724a5c485d6c5c/src%2Ftest%2Fui%2Fparser%2Fblock-no-opening-brace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b475a46181cc4e8bfe2ac64f3724a5c485d6c5c/src%2Ftest%2Fui%2Fparser%2Fblock-no-opening-brace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fblock-no-opening-brace.rs?ref=5b475a46181cc4e8bfe2ac64f3724a5c485d6c5c", "patch": "@@ -26,6 +26,6 @@ fn f4() {\n     }\n \n fn f5() {\n-    async //~ ERROR async closures are unstable\n+    async\n         let x = 0; //~ ERROR expected one of `move`, `|`, or `||`, found keyword `let`\n     }"}, {"sha": "e32c8bdc73acca091c1afefcd34e63e1d1f78f5d", "filename": "src/test/ui/parser/block-no-opening-brace.stderr", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5b475a46181cc4e8bfe2ac64f3724a5c485d6c5c/src%2Ftest%2Fui%2Fparser%2Fblock-no-opening-brace.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b475a46181cc4e8bfe2ac64f3724a5c485d6c5c/src%2Ftest%2Fui%2Fparser%2Fblock-no-opening-brace.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fblock-no-opening-brace.stderr?ref=5b475a46181cc4e8bfe2ac64f3724a5c485d6c5c", "patch": "@@ -39,15 +39,5 @@ LL |     async\n LL |         let x = 0;\n    |         ^^^ unexpected token\n \n-error[E0658]: async closures are unstable\n-  --> $DIR/block-no-opening-brace.rs:29:5\n-   |\n-LL |     async\n-   |     ^^^^^\n-   |\n-   = note: see issue #62290 <https://github.com/rust-lang/rust/issues/62290> for more information\n-   = help: add `#![feature(async_closure)]` to the crate attributes to enable\n-\n-error: aborting due to 6 previous errors\n+error: aborting due to 5 previous errors\n \n-For more information about this error, try `rustc --explain E0658`."}]}