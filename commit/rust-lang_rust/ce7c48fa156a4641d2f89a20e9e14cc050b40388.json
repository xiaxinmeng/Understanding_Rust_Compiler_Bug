{"sha": "ce7c48fa156a4641d2f89a20e9e14cc050b40388", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlN2M0OGZhMTU2YTQ2NDFkMmY4OWEyMGU5ZTE0Y2MwNTBiNDAzODg=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-06-22T12:22:45Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-07-20T10:23:26Z"}, "message": "trait_sel: only test predicates w/ no substs\n\nThis commit modifies the `substitute_normalize_and_test_predicates`\nquery, renaming it to `impossible_predicates` and only checking\npredicates which do not require substs. By making this change,\npolymorphization doesn't have to explicitly support vtables.\n\nSigned-off-by: David Wood <david@davidtw.co>", "tree": {"sha": "e255b106d1d8f794a45332892910eac064f5ad8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e255b106d1d8f794a45332892910eac064f5ad8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce7c48fa156a4641d2f89a20e9e14cc050b40388", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEfgm2/wUjk9OnjxlyJZLnbIc4H9kFAl8VcJ4ACgkQJZLnbIc4\nH9mYRg//fw3GOH33HP2zofB4+JRabPTnjGQKLdofO6MsYf37QlYvJMBn3Od7TotM\nLBjfpluOCYSSyDbM7Idahtu+NIOlW3wuhTKSyq8YgqU/gaU1k+BpW6HYPdIdbmGq\nZovj59BrN7Z+Btj583V9Hy7RwkSMK0Gfg4sDoa0SmnsuunpJPt/MutWsLZjQWKJF\neisdzsh32SMl4MR72orgnwJ1O9f0Upb7Gr/nLlB4sW0ttaqdXJm6o26uAdGr4rtH\n7zY9ED/FJkFLHiSiZY4VcKfuGHY1QWgeeWbRXAVzmRqDPFK+8kVA/tmBIHdVt509\n7FUi5oZypLJGE9I7HrPCnSdHHVBdksj5WmQF6o3MZzjx2scDv71YmcNRoCgaUTlP\n7mQEDSZ+VpSCljLCg05DUMtRnPk5Ft07wchnqbu48mVxtl4pZYkzcuggI72LDT/h\nX9Yu/8m4cbwzD5aFyfNaKHec19xEEMNZcmLsEQ3Kuq0D6YKO+mruutalpxPI7gdX\n2PsYgcXjKomCZZt3Ai4OacjgnaRkgE+XaGkRO1wPine1TNRzLlVZgDA1tHewA7Df\ndq2mjjWHqZI0NzoXvDe4DmNp/htMsOXXaurdIpXkprI/pqNiUqSlcKwTTxZN2FAA\ny4CSeLVYatsLTrvNA9TEYTRbpbZDgttbCJBcU/+EtFtEA9NPIWg=\n=iEdF\n-----END PGP SIGNATURE-----", "payload": "tree e255b106d1d8f794a45332892910eac064f5ad8d\nparent c6ed442f401d90211ae36a9808ccaf0a3dc025f6\nauthor David Wood <david@davidtw.co> 1592828565 +0100\ncommitter David Wood <david@davidtw.co> 1595240606 +0100\n\ntrait_sel: only test predicates w/ no substs\n\nThis commit modifies the `substitute_normalize_and_test_predicates`\nquery, renaming it to `impossible_predicates` and only checking\npredicates which do not require substs. By making this change,\npolymorphization doesn't have to explicitly support vtables.\n\nSigned-off-by: David Wood <david@davidtw.co>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce7c48fa156a4641d2f89a20e9e14cc050b40388", "html_url": "https://github.com/rust-lang/rust/commit/ce7c48fa156a4641d2f89a20e9e14cc050b40388", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce7c48fa156a4641d2f89a20e9e14cc050b40388/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6ed442f401d90211ae36a9808ccaf0a3dc025f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6ed442f401d90211ae36a9808ccaf0a3dc025f6", "html_url": "https://github.com/rust-lang/rust/commit/c6ed442f401d90211ae36a9808ccaf0a3dc025f6"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "bb204223b60607ee9079ac6ec8da1e3e02b9d5a1", "filename": "src/librustc_middle/mir/mono.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce7c48fa156a4641d2f89a20e9e14cc050b40388/src%2Flibrustc_middle%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce7c48fa156a4641d2f89a20e9e14cc050b40388/src%2Flibrustc_middle%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fmono.rs?ref=ce7c48fa156a4641d2f89a20e9e14cc050b40388", "patch": "@@ -168,7 +168,7 @@ impl<'tcx> MonoItem<'tcx> {\n             MonoItem::GlobalAsm(..) => return true,\n         };\n \n-        tcx.substitute_normalize_and_test_predicates((def_id, &substs))\n+        !tcx.subst_and_check_impossible_predicates((def_id, &substs))\n     }\n \n     pub fn to_string(&self, tcx: TyCtxt<'tcx>, debug: bool) -> String {"}, {"sha": "7b4b27c363b4ecfbf63a17c7748ab9f1e0a6360a", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce7c48fa156a4641d2f89a20e9e14cc050b40388/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce7c48fa156a4641d2f89a20e9e14cc050b40388/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=ce7c48fa156a4641d2f89a20e9e14cc050b40388", "patch": "@@ -1461,9 +1461,9 @@ rustc_queries! {\n             desc { \"normalizing `{:?}`\", goal }\n         }\n \n-        query substitute_normalize_and_test_predicates(key: (DefId, SubstsRef<'tcx>)) -> bool {\n+        query subst_and_check_impossible_predicates(key: (DefId, SubstsRef<'tcx>)) -> bool {\n             desc { |tcx|\n-                \"testing substituted normalized predicates:`{}`\",\n+                \"impossible substituted predicates:`{}`\",\n                 tcx.def_path_str(key.0)\n             }\n         }"}, {"sha": "3073bf53afd7869486a54daa9f7d13a8f1a86e4c", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce7c48fa156a4641d2f89a20e9e14cc050b40388/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce7c48fa156a4641d2f89a20e9e14cc050b40388/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=ce7c48fa156a4641d2f89a20e9e14cc050b40388", "patch": "@@ -116,7 +116,7 @@ impl<'tcx> MirPass<'tcx> for ConstProp {\n             .predicates\n             .iter()\n             .filter_map(|(p, _)| if p.is_global() { Some(*p) } else { None });\n-        if !traits::normalize_and_test_predicates(\n+        if traits::impossible_predicates(\n             tcx,\n             traits::elaborate_predicates(tcx, predicates).map(|o| o.predicate).collect(),\n         ) {"}, {"sha": "1c3755222495e28585dbb4d83efb2d57de7b8ee9", "filename": "src/librustc_trait_selection/traits/mod.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ce7c48fa156a4641d2f89a20e9e14cc050b40388/src%2Flibrustc_trait_selection%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce7c48fa156a4641d2f89a20e9e14cc050b40388/src%2Flibrustc_trait_selection%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fmod.rs?ref=ce7c48fa156a4641d2f89a20e9e14cc050b40388", "patch": "@@ -418,15 +418,14 @@ where\n     Ok(resolved_value)\n }\n \n-/// Normalizes the predicates and checks whether they hold in an empty\n-/// environment. If this returns false, then either normalize\n-/// encountered an error or one of the predicates did not hold. Used\n-/// when creating vtables to check for unsatisfiable methods.\n-pub fn normalize_and_test_predicates<'tcx>(\n+/// Normalizes the predicates and checks whether they hold in an empty environment. If this\n+/// returns true, then either normalize encountered an error or one of the predicates did not\n+/// hold. Used when creating vtables to check for unsatisfiable methods.\n+pub fn impossible_predicates<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     predicates: Vec<ty::Predicate<'tcx>>,\n ) -> bool {\n-    debug!(\"normalize_and_test_predicates(predicates={:?})\", predicates);\n+    debug!(\"impossible_predicates(predicates={:?})\", predicates);\n \n     let result = tcx.infer_ctxt().enter(|infcx| {\n         let param_env = ty::ParamEnv::reveal_all();\n@@ -443,22 +442,23 @@ pub fn normalize_and_test_predicates<'tcx>(\n             fulfill_cx.register_predicate_obligation(&infcx, obligation);\n         }\n \n-        fulfill_cx.select_all_or_error(&infcx).is_ok()\n+        fulfill_cx.select_all_or_error(&infcx).is_err()\n     });\n-    debug!(\"normalize_and_test_predicates(predicates={:?}) = {:?}\", predicates, result);\n+    debug!(\"impossible_predicates(predicates={:?}) = {:?}\", predicates, result);\n     result\n }\n \n-fn substitute_normalize_and_test_predicates<'tcx>(\n+fn subst_and_check_impossible_predicates<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     key: (DefId, SubstsRef<'tcx>),\n ) -> bool {\n-    debug!(\"substitute_normalize_and_test_predicates(key={:?})\", key);\n+    debug!(\"subst_and_check_impossible_predicates(key={:?})\", key);\n \n-    let predicates = tcx.predicates_of(key.0).instantiate(tcx, key.1).predicates;\n-    let result = normalize_and_test_predicates(tcx, predicates);\n+    let mut predicates = tcx.predicates_of(key.0).instantiate(tcx, key.1).predicates;\n+    predicates.retain(|predicate| !predicate.needs_subst());\n+    let result = impossible_predicates(tcx, predicates);\n \n-    debug!(\"substitute_normalize_and_test_predicates(key={:?}) = {:?}\", key, result);\n+    debug!(\"subst_and_check_impossible_predicates(key={:?}) = {:?}\", key, result);\n     result\n }\n \n@@ -510,7 +510,7 @@ fn vtable_methods<'tcx>(\n             // Note that this method could then never be called, so we\n             // do not want to try and codegen it, in that case (see #23435).\n             let predicates = tcx.predicates_of(def_id).instantiate_own(tcx, substs);\n-            if !normalize_and_test_predicates(tcx, predicates.predicates) {\n+            if impossible_predicates(tcx, predicates.predicates) {\n                 debug!(\"vtable_methods: predicates do not hold\");\n                 return None;\n             }\n@@ -558,8 +558,8 @@ pub fn provide(providers: &mut ty::query::Providers) {\n         specializes: specialize::specializes,\n         codegen_fulfill_obligation: codegen::codegen_fulfill_obligation,\n         vtable_methods,\n-        substitute_normalize_and_test_predicates,\n         type_implements_trait,\n+        subst_and_check_impossible_predicates,\n         ..*providers\n     };\n }"}, {"sha": "a4bee1c278059a97329ef6a28e6426288ac426ef", "filename": "src/tools/clippy/clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce7c48fa156a4641d2f89a20e9e14cc050b40388/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce7c48fa156a4641d2f89a20e9e14cc050b40388/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=ce7c48fa156a4641d2f89a20e9e14cc050b40388", "patch": "@@ -1346,7 +1346,7 @@ pub fn fn_has_unsatisfiable_preds(cx: &LateContext<'_>, did: DefId) -> bool {\n             .predicates\n             .iter()\n             .filter_map(|(p, _)| if p.is_global() { Some(*p) } else { None });\n-    !traits::normalize_and_test_predicates(\n+    traits::impossible_predicates(\n         cx.tcx,\n         traits::elaborate_predicates(cx.tcx, predicates)\n             .map(|o| o.predicate)"}]}