{"sha": "1f4278d650837bf30e5461fd15c2364b2bb5ceff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmNDI3OGQ2NTA4MzdiZjMwZTU0NjFmZDE1YzIzNjRiMmJiNWNlZmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-28T18:32:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-28T18:32:07Z"}, "message": "auto merge of #13797 : lifthrasiir/rust/std-mem-replace-doc, r=alexcrichton\n\nInspired by @steveklabnik's [comment](http://www.reddit.com/r/rust/comments/240p9s/eli5_stdmemreplace/ch2gxw8), this PR adds the practical use cases to the documentation of `std::mem::replace`.\r\n\r\nCaveat: We need a `compile-fail` equivalent for doctest. :p", "tree": {"sha": "91a8c94e84ead9143bd0faa1691e94d82ce72026", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91a8c94e84ead9143bd0faa1691e94d82ce72026"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f4278d650837bf30e5461fd15c2364b2bb5ceff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f4278d650837bf30e5461fd15c2364b2bb5ceff", "html_url": "https://github.com/rust-lang/rust/commit/1f4278d650837bf30e5461fd15c2364b2bb5ceff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f4278d650837bf30e5461fd15c2364b2bb5ceff/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e284eeb21d8276abecd052b8a72e3146e787e95", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e284eeb21d8276abecd052b8a72e3146e787e95", "html_url": "https://github.com/rust-lang/rust/commit/3e284eeb21d8276abecd052b8a72e3146e787e95"}, {"sha": "1be93e61da4cd63840a0b5318785547a009e8cae", "url": "https://api.github.com/repos/rust-lang/rust/commits/1be93e61da4cd63840a0b5318785547a009e8cae", "html_url": "https://github.com/rust-lang/rust/commit/1be93e61da4cd63840a0b5318785547a009e8cae"}], "stats": {"total": 32, "additions": 32, "deletions": 0}, "files": [{"sha": "d216d91b9010e0748bdf3cf64b1cc35a14dcbc29", "filename": "src/libstd/mem.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1f4278d650837bf30e5461fd15c2364b2bb5ceff/src%2Flibstd%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4278d650837bf30e5461fd15c2364b2bb5ceff/src%2Flibstd%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmem.rs?ref=1f4278d650837bf30e5461fd15c2364b2bb5ceff", "patch": "@@ -248,6 +248,38 @@ pub fn swap<T>(x: &mut T, y: &mut T) {\n /**\n  * Replace the value at a mutable location with a new one, returning the old\n  * value, without deinitialising or copying either one.\n+ *\n+ * This is primarily used for transferring and swapping ownership of a value\n+ * in a mutable location. For example, this function allows consumption of\n+ * one field of a struct by replacing it with another value. The normal approach\n+ * doesn't always work:\n+ *\n+ * ```rust,ignore\n+ * struct Buffer<T> { buf: Vec<T> }\n+ *\n+ * impl<T> Buffer<T> {\n+ *     fn get_and_reset(&mut self) -> Vec<T> {\n+ *         // error: cannot move out of dereference of `&mut`-pointer\n+ *         let buf = self.buf;\n+ *         self.buf = Vec::new();\n+ *         buf\n+ *     }\n+ * }\n+ * ```\n+ *\n+ * Note that `T` does not necessarily implement `Clone`, so it can't even\n+ * clone and reset `self.buf`. But `replace` can be used to disassociate\n+ * the original value of `self.buf` from `self`, allowing it to be returned:\n+ *\n+ * ```rust\n+ * # struct Buffer<T> { buf: Vec<T> }\n+ * impl<T> Buffer<T> {\n+ *     fn get_and_reset(&mut self) -> Vec<T> {\n+ *         use std::mem::replace;\n+ *         replace(&mut self.buf, Vec::new())\n+ *     }\n+ * }\n+ * ```\n  */\n #[inline]\n pub fn replace<T>(dest: &mut T, mut src: T) -> T {"}]}