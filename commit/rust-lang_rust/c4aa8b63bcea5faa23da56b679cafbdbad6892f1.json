{"sha": "c4aa8b63bcea5faa23da56b679cafbdbad6892f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0YWE4YjYzYmNlYTVmYWEyM2RhNTZiNjc5Y2FmYmRiYWQ2ODkyZjE=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-11-11T06:15:09Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-11-11T06:15:09Z"}, "message": "Add line macro and tests", "tree": {"sha": "759950e504bb0fa8115c85ea7e606e20c609f40c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/759950e504bb0fa8115c85ea7e606e20c609f40c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4aa8b63bcea5faa23da56b679cafbdbad6892f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4aa8b63bcea5faa23da56b679cafbdbad6892f1", "html_url": "https://github.com/rust-lang/rust/commit/c4aa8b63bcea5faa23da56b679cafbdbad6892f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4aa8b63bcea5faa23da56b679cafbdbad6892f1/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1637a8a59071d8c7976ffc8d04edc5b7f54ae40b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1637a8a59071d8c7976ffc8d04edc5b7f54ae40b", "html_url": "https://github.com/rust-lang/rust/commit/1637a8a59071d8c7976ffc8d04edc5b7f54ae40b"}], "stats": {"total": 91, "additions": 84, "deletions": 7}, "files": [{"sha": "896bf2924b905146b525b55bc76b85a63b7cbab0", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c4aa8b63bcea5faa23da56b679cafbdbad6892f1/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4aa8b63bcea5faa23da56b679cafbdbad6892f1/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=c4aa8b63bcea5faa23da56b679cafbdbad6892f1", "patch": "@@ -4810,3 +4810,22 @@ fn no_such_field_diagnostics() {\n     \"###\n     );\n }\n+\n+#[test]\n+fn infer_builtin_macros_line() {\n+    assert_snapshot!(\n+        infer(r#\"\n+#[rustc_builtin_macro]\n+macro_rules! line {() => {}}\n+\n+fn main() {\n+    let x = line!();\n+}\n+\"#),\n+        @r###\"\n+        ![0; 1) '6': i32\n+        [64; 88) '{     ...!(); }': ()\n+        [74; 75) 'x': i32        \n+    \"###\n+    );\n+}"}, {"sha": "acb62da27bf86882d54e5579f5271221d9dbbeab", "filename": "crates/ra_hir_expand/src/builtin_macro.rs", "status": "modified", "additions": 64, "deletions": 6, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/c4aa8b63bcea5faa23da56b679cafbdbad6892f1/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4aa8b63bcea5faa23da56b679cafbdbad6892f1/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs?ref=c4aa8b63bcea5faa23da56b679cafbdbad6892f1", "patch": "@@ -1,14 +1,28 @@\n //! Builtin macro\n-use crate::{ast, name, AstId, BuiltinMacro, CrateId, MacroDefId};\n+use crate::db::AstDatabase;\n+use crate::{\n+    ast::{self, AstNode},\n+    name, AstId, BuiltinMacro, CrateId, HirFileId, MacroCallId, MacroDefId, MacroFileKind,\n+    TextUnit,\n+};\n+\n+use crate::quote;\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub enum BuiltinExpander {\n-    Line\n+    Line,\n }\n \n impl BuiltinExpander {\n-    pub fn expand(&self, _tt: &tt::Subtree) -> Result<tt::Subtree, mbe::ExpandError> {\n-        Err(mbe::ExpandError::UnexpectedToken)\n+    pub fn expand(\n+        &self,\n+        db: &dyn AstDatabase,\n+        id: MacroCallId,\n+        tt: &tt::Subtree,\n+    ) -> Result<tt::Subtree, mbe::ExpandError> {\n+        match self {\n+            BuiltinExpander::Line => line_expand(db, id, tt),\n+        }\n     }\n }\n \n@@ -18,9 +32,53 @@ pub fn find_builtin_macro(\n     ast_id: AstId<ast::MacroCall>,\n ) -> Option<MacroDefId> {\n     // FIXME: Better registering method\n-    if ident == &name::LINE {\n-        Some(MacroDefId::BuiltinMacro(BuiltinMacro { expander: BuiltinExpander::Line, krate, ast_id }))\n+    if ident == &name::LINE_MACRO {\n+        Some(MacroDefId::BuiltinMacro(BuiltinMacro {\n+            expander: BuiltinExpander::Line,\n+            krate,\n+            ast_id,\n+        }))\n     } else {\n         None\n     }\n }\n+\n+fn to_line_number(db: &dyn AstDatabase, file: HirFileId, pos: TextUnit) -> usize {\n+    // FIXME: Use expansion info\n+    let file_id = file.original_file(db);\n+    let text = db.file_text(file_id);\n+    let mut line_num = 1;\n+\n+    // Count line end\n+    for (i, c) in text.chars().enumerate() {\n+        if i == pos.to_usize() {\n+            break;\n+        }\n+        if c == '\\n' {\n+            line_num += 1;\n+        }\n+    }\n+\n+    line_num\n+}\n+\n+fn line_expand(\n+    db: &dyn AstDatabase,\n+    id: MacroCallId,\n+    _tt: &tt::Subtree,\n+) -> Result<tt::Subtree, mbe::ExpandError> {\n+    let loc = db.lookup_intern_macro(id);\n+    let macro_call = loc.ast_id.to_node(db);\n+\n+    let arg = macro_call.token_tree().ok_or_else(|| mbe::ExpandError::UnexpectedToken)?;\n+    let arg_start = arg.syntax().text_range().start();\n+\n+    let file = id.as_file(MacroFileKind::Expr);\n+    let line_num = to_line_number(db, file, arg_start);\n+\n+    let expanded = quote! {\n+        #line_num\n+    };\n+\n+    Ok(expanded)\n+}"}, {"sha": "009ff53129cfe1d2e7d51d05668246b54e42d948", "filename": "crates/ra_hir_expand/src/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4aa8b63bcea5faa23da56b679cafbdbad6892f1/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4aa8b63bcea5faa23da56b679cafbdbad6892f1/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs?ref=c4aa8b63bcea5faa23da56b679cafbdbad6892f1", "patch": "@@ -28,7 +28,7 @@ impl TokenExpander {\n     ) -> Result<tt::Subtree, mbe::ExpandError> {\n         match self {\n             TokenExpander::MacroRules(it) => it.expand(tt),\n-            TokenExpander::Builtin(it) => it.expand(tt),\n+            TokenExpander::Builtin(it) => it.expand(db, id, tt),\n         }\n     }\n "}]}