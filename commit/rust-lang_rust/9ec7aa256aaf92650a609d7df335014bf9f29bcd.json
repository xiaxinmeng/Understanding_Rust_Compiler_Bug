{"sha": "9ec7aa256aaf92650a609d7df335014bf9f29bcd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllYzdhYTI1NmFhZjkyNjUwYTYwOWQ3ZGYzMzUwMTRiZjlmMjliY2Q=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2018-04-11T22:07:36Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2018-04-11T23:02:14Z"}, "message": "Run rustfmt over type_check/mod.rs", "tree": {"sha": "9f6502f091d97cd99f2b98d60856bf672bcadf22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f6502f091d97cd99f2b98d60856bf672bcadf22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ec7aa256aaf92650a609d7df335014bf9f29bcd", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEmNHc6jmXzkUyxd4xiMlBzaHUZDIFAlrOk/YACgkQiMlBzaHU\nZDJnag/9GUE2Xw3fBhrTm1U+vI85I8Kjv/FmTIVnG5BV7Zo83TToiufxOUY7SspN\npxP+Q5k+KOwot/+yrIHdVyBV9QZdHudHAxgopgcU1pkCI/vYwd8jely8IG6wcbGe\nWvn3jSkwRLHd1twJO60aLgOH6HLaVoUNzrH9J9RYgZguuGAcU4962ZGyjokI5x8m\nTVwHY6YapdnjQMeUBpTbLJDSa35/m1au7Z4KodIdFNoVsPL3qZV6HfwDRi/SKPul\nQkdoX9GXLoQsK6F9KL7SSW2YrlKpCfydbEFJQ5/jBEFvwHn73GVTKPqHU6tsIYag\nHMOF9BPV61/LlVvf4azJDzjeogJn26aqkCVn1ihODyEPRptZQTuaU/KDMyAvpvPs\nfiqMsPkLcggz1CeyuCyiKpY/K4ipxRsATJdnJeeekLZAvtqMgOTD7ibib9LxaaTE\nG/eWcR6nE7HPAKYIXlKej17D0JRJvs6HMC8ReN0ml5vsTACWN+jJWCvufVWgp3S3\n6rIbwsQfxknq/IkISq7ERp2mKAYj09g8yiXAlkhI506zNka83oiV2HjlnGzMjSuT\nA1wrvU1jnv9rPE9gRP4K/ufGYPfOGOb6wmBltIhgc2Yk2Ez9LaBUwWDsaMl5LMDz\nIHveCcISAdYVi8oR2s5gfMF7cuuNOpnWTgiGm5y2QsaoQW71yBI=\n=gu9+\n-----END PGP SIGNATURE-----", "payload": "tree 9f6502f091d97cd99f2b98d60856bf672bcadf22\nparent ca26ef321c44358404ef788d315c4557eb015fb2\nauthor Santiago Pastorino <spastorino@gmail.com> 1523484456 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1523487734 -0300\n\nRun rustfmt over type_check/mod.rs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ec7aa256aaf92650a609d7df335014bf9f29bcd", "html_url": "https://github.com/rust-lang/rust/commit/9ec7aa256aaf92650a609d7df335014bf9f29bcd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ec7aa256aaf92650a609d7df335014bf9f29bcd/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca26ef321c44358404ef788d315c4557eb015fb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca26ef321c44358404ef788d315c4557eb015fb2", "html_url": "https://github.com/rust-lang/rust/commit/ca26ef321c44358404ef788d315c4557eb015fb2"}], "stats": {"total": 29, "additions": 16, "deletions": 13}, "files": [{"sha": "98e31d75c980fca23f1afbcbedfbe1a85cfe87d1", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/9ec7aa256aaf92650a609d7df335014bf9f29bcd/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ec7aa256aaf92650a609d7df335014bf9f29bcd/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=9ec7aa256aaf92650a609d7df335014bf9f29bcd", "patch": "@@ -14,20 +14,20 @@\n use borrow_check::nll::region_infer::Cause;\n use borrow_check::nll::region_infer::ClosureRegionRequirementsExt;\n use borrow_check::nll::universal_regions::UniversalRegions;\n+use dataflow::move_paths::MoveData;\n use dataflow::FlowAtLocation;\n use dataflow::MaybeInitializedPlaces;\n-use dataflow::move_paths::MoveData;\n use rustc::hir::def_id::DefId;\n-use rustc::infer::{InferCtxt, InferOk, InferResult, LateBoundRegionConversionTime, UnitResult};\n use rustc::infer::region_constraints::{GenericKind, RegionConstraintData};\n-use rustc::traits::{self, Normalized, TraitEngine};\n+use rustc::infer::{InferCtxt, InferOk, InferResult, LateBoundRegionConversionTime, UnitResult};\n+use rustc::mir::tcx::PlaceTy;\n+use rustc::mir::visit::{PlaceContext, Visitor};\n+use rustc::mir::*;\n use rustc::traits::query::NoSolution;\n+use rustc::traits::{self, Normalized, TraitEngine};\n use rustc::ty::error::TypeError;\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::{self, ToPolyTraitRef, Ty, TyCtxt, TypeVariants};\n-use rustc::mir::*;\n-use rustc::mir::tcx::PlaceTy;\n-use rustc::mir::visit::{PlaceContext, Visitor};\n use std::fmt;\n use syntax::ast;\n use syntax_pos::{Span, DUMMY_SP};\n@@ -61,8 +61,8 @@ macro_rules! span_mirbug_and_err {\n     })\n }\n \n-mod liveness;\n mod input_output;\n+mod liveness;\n \n /// Type checks the given `mir` in the context of the inference\n /// context `infcx`. Returns any region constraints that have yet to\n@@ -763,9 +763,12 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n             }\n             StatementKind::UserAssertTy(ref c_ty, ref local) => {\n                 let local_ty = mir.local_decls()[*local].ty;\n-                let (ty, _) = self.infcx.instantiate_canonical_with_fresh_inference_vars(\n-                    stmt.source_info.span, c_ty);\n-                debug!(\"check_stmt: user_assert_ty ty={:?} local_ty={:?}\", ty, local_ty);\n+                let (ty, _) = self.infcx\n+                    .instantiate_canonical_with_fresh_inference_vars(stmt.source_info.span, c_ty);\n+                debug!(\n+                    \"check_stmt: user_assert_ty ty={:?} local_ty={:?}\",\n+                    ty, local_ty\n+                );\n                 if let Err(terr) = self.eq_types(ty, local_ty, location.at_self()) {\n                     span_mirbug!(\n                         self,\n@@ -1513,9 +1516,9 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n \n     fn prove_trait_ref(&mut self, trait_ref: ty::TraitRef<'tcx>, location: Location) {\n         self.prove_predicates(\n-            &[\n-                ty::Predicate::Trait(trait_ref.to_poly_trait_ref().to_poly_trait_predicate()),\n-            ],\n+            &[ty::Predicate::Trait(\n+                trait_ref.to_poly_trait_ref().to_poly_trait_predicate(),\n+            )],\n             location,\n         );\n     }"}]}