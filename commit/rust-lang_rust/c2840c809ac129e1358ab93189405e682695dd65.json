{"sha": "c2840c809ac129e1358ab93189405e682695dd65", "node_id": "C_kwDOAAsO6NoAKGMyODQwYzgwOWFjMTI5ZTEzNThhYjkzMTg5NDA1ZTY4MjY5NWRkNjU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-21T19:38:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-21T19:38:51Z"}, "message": "Auto merge of #13814 - Veykril:layout, r=Veykril\n\nCalculate the TargetDataLayout correctly for the selected target\n\nThis fails the tests still since those don't call into rustc yet", "tree": {"sha": "0d6e8bdb94b2d82f91308e15d711d23bfb8d40c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d6e8bdb94b2d82f91308e15d711d23bfb8d40c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2840c809ac129e1358ab93189405e682695dd65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2840c809ac129e1358ab93189405e682695dd65", "html_url": "https://github.com/rust-lang/rust/commit/c2840c809ac129e1358ab93189405e682695dd65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2840c809ac129e1358ab93189405e682695dd65/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c00b19b0a424b2f42cbce8f8ae84b51b2429572", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c00b19b0a424b2f42cbce8f8ae84b51b2429572", "html_url": "https://github.com/rust-lang/rust/commit/3c00b19b0a424b2f42cbce8f8ae84b51b2429572"}, {"sha": "a694c342fa5b121de7562e4bd8beca3f7a8b8d97", "url": "https://api.github.com/repos/rust-lang/rust/commits/a694c342fa5b121de7562e4bd8beca3f7a8b8d97", "html_url": "https://github.com/rust-lang/rust/commit/a694c342fa5b121de7562e4bd8beca3f7a8b8d97"}], "stats": {"total": 395, "additions": 318, "deletions": 77}, "files": [{"sha": "83286cf6b777da294c30911bb81bcabc83d06b03", "filename": "crates/base-db/src/fixture.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c2840c809ac129e1358ab93189405e682695dd65/crates%2Fbase-db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2840c809ac129e1358ab93189405e682695dd65/crates%2Fbase-db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase-db%2Fsrc%2Ffixture.rs?ref=c2840c809ac129e1358ab93189405e682695dd65", "patch": "@@ -162,6 +162,7 @@ impl ChangeFixture {\n                     Ok(Vec::new()),\n                     false,\n                     origin,\n+                    meta.target_data_layout.as_deref().map(Arc::from),\n                 );\n                 let prev = crates.insert(crate_name.clone(), crate_id);\n                 assert!(prev.is_none());\n@@ -197,6 +198,7 @@ impl ChangeFixture {\n                 Ok(Vec::new()),\n                 false,\n                 CrateOrigin::CratesIo { repo: None, name: None },\n+                None,\n             );\n         } else {\n             for (from, to, prelude) in crate_deps {\n@@ -210,6 +212,8 @@ impl ChangeFixture {\n                     .unwrap();\n             }\n         }\n+        let target_layout =\n+            crate_graph.iter().next().and_then(|it| crate_graph[it].target_layout.clone());\n \n         if let Some(mini_core) = mini_core {\n             let core_file = file_id;\n@@ -234,6 +238,7 @@ impl ChangeFixture {\n                 Ok(Vec::new()),\n                 false,\n                 CrateOrigin::Lang(LangCrateOrigin::Core),\n+                target_layout.clone(),\n             );\n \n             for krate in all_crates {\n@@ -271,6 +276,7 @@ impl ChangeFixture {\n                 Ok(proc_macro),\n                 true,\n                 CrateOrigin::CratesIo { repo: None, name: None },\n+                target_layout,\n             );\n \n             for krate in all_crates {\n@@ -391,6 +397,7 @@ struct FileMeta {\n     edition: Edition,\n     env: Env,\n     introduce_new_source_root: Option<SourceRootKind>,\n+    target_data_layout: Option<String>,\n }\n \n fn parse_crate(crate_str: String) -> (String, CrateOrigin, Option<String>) {\n@@ -434,6 +441,7 @@ impl From<Fixture> for FileMeta {\n                 \"library\" => SourceRootKind::Library,\n                 invalid => panic!(\"invalid source root kind '{}'\", invalid),\n             }),\n+            target_data_layout: f.target_data_layout,\n         }\n     }\n }"}, {"sha": "7aff9b1ae844bfc5bd008a5af04a03d2c9d5b5cb", "filename": "crates/base-db/src/input.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c2840c809ac129e1358ab93189405e682695dd65/crates%2Fbase-db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2840c809ac129e1358ab93189405e682695dd65/crates%2Fbase-db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase-db%2Fsrc%2Finput.rs?ref=c2840c809ac129e1358ab93189405e682695dd65", "patch": "@@ -270,6 +270,7 @@ pub struct CrateData {\n     pub display_name: Option<CrateDisplayName>,\n     pub cfg_options: CfgOptions,\n     pub potential_cfg_options: CfgOptions,\n+    pub target_layout: Option<Arc<str>>,\n     pub env: Env,\n     pub dependencies: Vec<Dependency>,\n     pub proc_macro: ProcMacroLoadResult,\n@@ -328,6 +329,7 @@ impl CrateGraph {\n         proc_macro: ProcMacroLoadResult,\n         is_proc_macro: bool,\n         origin: CrateOrigin,\n+        target_layout: Option<Arc<str>>,\n     ) -> CrateId {\n         let data = CrateData {\n             root_file_id,\n@@ -340,6 +342,7 @@ impl CrateGraph {\n             proc_macro,\n             dependencies: Vec::new(),\n             origin,\n+            target_layout,\n             is_proc_macro,\n         };\n         let crate_id = CrateId(self.arena.len() as u32);\n@@ -649,6 +652,7 @@ mod tests {\n             Ok(Vec::new()),\n             false,\n             CrateOrigin::CratesIo { repo: None, name: None },\n+            None,\n         );\n         let crate2 = graph.add_crate_root(\n             FileId(2u32),\n@@ -661,6 +665,7 @@ mod tests {\n             Ok(Vec::new()),\n             false,\n             CrateOrigin::CratesIo { repo: None, name: None },\n+            None,\n         );\n         let crate3 = graph.add_crate_root(\n             FileId(3u32),\n@@ -673,6 +678,7 @@ mod tests {\n             Ok(Vec::new()),\n             false,\n             CrateOrigin::CratesIo { repo: None, name: None },\n+            None,\n         );\n         assert!(graph\n             .add_dep(crate1, Dependency::new(CrateName::new(\"crate2\").unwrap(), crate2))\n@@ -699,6 +705,7 @@ mod tests {\n             Ok(Vec::new()),\n             false,\n             CrateOrigin::CratesIo { repo: None, name: None },\n+            None,\n         );\n         let crate2 = graph.add_crate_root(\n             FileId(2u32),\n@@ -711,6 +718,7 @@ mod tests {\n             Ok(Vec::new()),\n             false,\n             CrateOrigin::CratesIo { repo: None, name: None },\n+            None,\n         );\n         assert!(graph\n             .add_dep(crate1, Dependency::new(CrateName::new(\"crate2\").unwrap(), crate2))\n@@ -734,6 +742,7 @@ mod tests {\n             Ok(Vec::new()),\n             false,\n             CrateOrigin::CratesIo { repo: None, name: None },\n+            None,\n         );\n         let crate2 = graph.add_crate_root(\n             FileId(2u32),\n@@ -746,6 +755,7 @@ mod tests {\n             Ok(Vec::new()),\n             false,\n             CrateOrigin::CratesIo { repo: None, name: None },\n+            None,\n         );\n         let crate3 = graph.add_crate_root(\n             FileId(3u32),\n@@ -758,6 +768,7 @@ mod tests {\n             Ok(Vec::new()),\n             false,\n             CrateOrigin::CratesIo { repo: None, name: None },\n+            None,\n         );\n         assert!(graph\n             .add_dep(crate1, Dependency::new(CrateName::new(\"crate2\").unwrap(), crate2))\n@@ -781,6 +792,7 @@ mod tests {\n             Ok(Vec::new()),\n             false,\n             CrateOrigin::CratesIo { repo: None, name: None },\n+            None,\n         );\n         let crate2 = graph.add_crate_root(\n             FileId(2u32),\n@@ -793,6 +805,7 @@ mod tests {\n             Ok(Vec::new()),\n             false,\n             CrateOrigin::CratesIo { repo: None, name: None },\n+            None,\n         );\n         assert!(graph\n             .add_dep("}, {"sha": "6bb4cd94f8a072d014201015f4cc4a5eaac2bd35", "filename": "crates/hir-def/src/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2840c809ac129e1358ab93189405e682695dd65/crates%2Fhir-def%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2840c809ac129e1358ab93189405e682695dd65/crates%2Fhir-def%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Flayout.rs?ref=c2840c809ac129e1358ab93189405e682695dd65", "patch": "@@ -6,7 +6,7 @@ use la_arena::{Idx, RawIdx};\n pub use rustc_abi::{\n     Abi, AbiAndPrefAlign, AddressSpace, Align, Endian, FieldsShape, Integer, IntegerType,\n     LayoutCalculator, Niche, Primitive, ReprFlags, ReprOptions, Scalar, Size, StructKind,\n-    TargetDataLayout, WrappingRange,\n+    TargetDataLayout, TargetDataLayoutErrors, WrappingRange,\n };\n \n use crate::LocalEnumVariantId;"}, {"sha": "54b244620fba3ed260266a669c081e4e506d8d7c", "filename": "crates/hir-ty/src/db.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c2840c809ac129e1358ab93189405e682695dd65/crates%2Fhir-ty%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2840c809ac129e1358ab93189405e682695dd65/crates%2Fhir-ty%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fdb.rs?ref=c2840c809ac129e1358ab93189405e682695dd65", "patch": "@@ -64,8 +64,8 @@ pub trait HirDatabase: DefDatabase + Upcast<dyn DefDatabase> {\n     #[salsa::cycle(crate::layout::layout_of_adt_recover)]\n     fn layout_of_adt(&self, def: AdtId, subst: Substitution) -> Result<Layout, LayoutError>;\n \n-    #[salsa::invoke(crate::layout::current_target_data_layout_query)]\n-    fn current_target_data_layout(&self) -> Arc<TargetDataLayout>;\n+    #[salsa::invoke(crate::layout::target_data_layout_query)]\n+    fn target_data_layout(&self, krate: CrateId) -> Arc<TargetDataLayout>;\n \n     #[salsa::invoke(crate::lower::callable_item_sig)]\n     fn callable_item_signature(&self, def: CallableDefId) -> PolyFnSig;"}, {"sha": "209072176c4d26af311625f3808e6eb84bad07cd", "filename": "crates/hir-ty/src/layout.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c2840c809ac129e1358ab93189405e682695dd65/crates%2Fhir-ty%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2840c809ac129e1358ab93189405e682695dd65/crates%2Fhir-ty%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flayout.rs?ref=c2840c809ac129e1358ab93189405e682695dd65", "patch": "@@ -2,6 +2,7 @@\n \n use std::sync::Arc;\n \n+use base_db::CrateId;\n use chalk_ir::{AdtId, TyKind};\n use hir_def::{\n     layout::{\n@@ -17,7 +18,7 @@ use crate::{db::HirDatabase, Interner, Substitution, Ty};\n use self::adt::struct_variant_idx;\n pub use self::{\n     adt::{layout_of_adt_query, layout_of_adt_recover},\n-    target::current_target_data_layout_query,\n+    target::target_data_layout_query,\n };\n \n macro_rules! user_error {\n@@ -31,6 +32,7 @@ mod target;\n \n struct LayoutCx<'a> {\n     db: &'a dyn HirDatabase,\n+    krate: CrateId,\n }\n \n impl LayoutCalculator for LayoutCx<'_> {\n@@ -41,7 +43,7 @@ impl LayoutCalculator for LayoutCx<'_> {\n     }\n \n     fn current_data_layout(&self) -> Arc<TargetDataLayout> {\n-        self.db.current_target_data_layout()\n+        self.db.target_data_layout(self.krate)\n     }\n }\n \n@@ -53,9 +55,9 @@ fn scalar(dl: &TargetDataLayout, value: Primitive) -> Layout {\n     Layout::scalar(dl, scalar_unit(dl, value))\n }\n \n-pub fn layout_of_ty(db: &dyn HirDatabase, ty: &Ty) -> Result<Layout, LayoutError> {\n-    let dl = &*db.current_target_data_layout();\n-    let cx = LayoutCx { db };\n+pub fn layout_of_ty(db: &dyn HirDatabase, ty: &Ty, krate: CrateId) -> Result<Layout, LayoutError> {\n+    let cx = LayoutCx { db, krate };\n+    let dl = &*cx.current_data_layout();\n     Ok(match ty.kind(Interner) {\n         TyKind::Adt(AdtId(def), subst) => db.layout_of_adt(*def, subst.clone())?,\n         TyKind::Scalar(s) => match s {\n@@ -84,7 +86,7 @@ pub fn layout_of_ty(db: &dyn HirDatabase, ty: &Ty) -> Result<Layout, LayoutError\n                         chalk_ir::IntTy::I64 => Integer::I64,\n                         chalk_ir::IntTy::I128 => Integer::I128,\n                     },\n-                    false,\n+                    true,\n                 ),\n             ),\n             chalk_ir::Scalar::Uint(i) => scalar(\n@@ -98,7 +100,7 @@ pub fn layout_of_ty(db: &dyn HirDatabase, ty: &Ty) -> Result<Layout, LayoutError\n                         chalk_ir::UintTy::U64 => Integer::I64,\n                         chalk_ir::UintTy::U128 => Integer::I128,\n                     },\n-                    true,\n+                    false,\n                 ),\n             ),\n             chalk_ir::Scalar::Float(f) => scalar(\n@@ -114,7 +116,7 @@ pub fn layout_of_ty(db: &dyn HirDatabase, ty: &Ty) -> Result<Layout, LayoutError\n \n             let fields = tys\n                 .iter(Interner)\n-                .map(|k| layout_of_ty(db, k.assert_ty_ref(Interner)))\n+                .map(|k| layout_of_ty(db, k.assert_ty_ref(Interner), krate))\n                 .collect::<Result<Vec<_>, _>>()?;\n             let fields = fields.iter().collect::<Vec<_>>();\n             let fields = fields.iter().collect::<Vec<_>>();\n@@ -132,7 +134,7 @@ pub fn layout_of_ty(db: &dyn HirDatabase, ty: &Ty) -> Result<Layout, LayoutError\n                 },\n                 _ => return Err(LayoutError::HasPlaceholder),\n             };\n-            let element = layout_of_ty(db, element)?;\n+            let element = layout_of_ty(db, element, krate)?;\n             let size = element.size.checked_mul(count, dl).ok_or(LayoutError::SizeOverflow)?;\n \n             let abi = if count != 0 && matches!(element.abi, Abi::Uninhabited) {\n@@ -153,7 +155,7 @@ pub fn layout_of_ty(db: &dyn HirDatabase, ty: &Ty) -> Result<Layout, LayoutError\n             }\n         }\n         TyKind::Slice(element) => {\n-            let element = layout_of_ty(db, element)?;\n+            let element = layout_of_ty(db, element, krate)?;\n             Layout {\n                 variants: Variants::Single { index: struct_variant_idx() },\n                 fields: FieldsShape::Array { stride: element.size, count: 0 },"}, {"sha": "23166a5a5223a98ef561513cb6b7e3cc455f92ab", "filename": "crates/hir-ty/src/layout/adt.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c2840c809ac129e1358ab93189405e682695dd65/crates%2Fhir-ty%2Fsrc%2Flayout%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2840c809ac129e1358ab93189405e682695dd65/crates%2Fhir-ty%2Fsrc%2Flayout%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flayout%2Fadt.rs?ref=c2840c809ac129e1358ab93189405e682695dd65", "patch": "@@ -5,7 +5,7 @@ use std::ops::Bound;\n use hir_def::{\n     adt::VariantData,\n     layout::{Integer, IntegerExt, Layout, LayoutCalculator, LayoutError, RustcEnumVariantIdx},\n-    AdtId, EnumVariantId, LocalEnumVariantId, VariantId,\n+    AdtId, EnumVariantId, HasModule, LocalEnumVariantId, VariantId,\n };\n use la_arena::RawIdx;\n use smallvec::SmallVec;\n@@ -23,12 +23,12 @@ pub fn layout_of_adt_query(\n     def: AdtId,\n     subst: Substitution,\n ) -> Result<Layout, LayoutError> {\n-    let dl = db.current_target_data_layout();\n-    let cx = LayoutCx { db };\n+    let cx = LayoutCx { db, krate: def.module(db.upcast()).krate() };\n+    let dl = cx.current_data_layout();\n     let handle_variant = |def: VariantId, var: &VariantData| {\n         var.fields()\n             .iter()\n-            .map(|(fd, _)| layout_of_ty(db, &field_ty(db, def, fd, &subst)))\n+            .map(|(fd, _)| layout_of_ty(db, &field_ty(db, def, fd, &subst), cx.krate))\n             .collect::<Result<Vec<_>, _>>()\n     };\n     let (variants, is_enum, is_union, repr) = match def {"}, {"sha": "54fa0fd9ea55f8a43d89df3824f66766e99cdc8b", "filename": "crates/hir-ty/src/layout/target.rs", "status": "modified", "additions": 120, "deletions": 35, "changes": 155, "blob_url": "https://github.com/rust-lang/rust/blob/c2840c809ac129e1358ab93189405e682695dd65/crates%2Fhir-ty%2Fsrc%2Flayout%2Ftarget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2840c809ac129e1358ab93189405e682695dd65/crates%2Fhir-ty%2Fsrc%2Flayout%2Ftarget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flayout%2Ftarget.rs?ref=c2840c809ac129e1358ab93189405e682695dd65", "patch": "@@ -2,45 +2,130 @@\n \n use std::sync::Arc;\n \n-use hir_def::layout::TargetDataLayout;\n+use base_db::CrateId;\n+use hir_def::layout::{TargetDataLayout, TargetDataLayoutErrors};\n \n use crate::db::HirDatabase;\n \n-use hir_def::layout::{AbiAndPrefAlign, AddressSpace, Align, Endian, Integer, Size};\n+use hir_def::layout::{AbiAndPrefAlign, AddressSpace, Align, Endian, Size};\n \n-pub fn current_target_data_layout_query(db: &dyn HirDatabase) -> Arc<TargetDataLayout> {\n+pub fn target_data_layout_query(db: &dyn HirDatabase, krate: CrateId) -> Arc<TargetDataLayout> {\n     let crate_graph = db.crate_graph();\n-    let cfg_options = &crate_graph[crate_graph.iter().next().unwrap()].cfg_options;\n-    let endian = match cfg_options.get_cfg_values(\"target_endian\").next() {\n-        Some(x) if x.as_str() == \"big\" => Endian::Big,\n-        _ => Endian::Little,\n+    let target_layout = &crate_graph[krate].target_layout;\n+    let cfg_options = &crate_graph[krate].cfg_options;\n+    Arc::new(\n+        target_layout\n+            .as_ref()\n+            .and_then(|it| parse_from_llvm_datalayout_string(it).ok())\n+            .unwrap_or_else(|| {\n+                let endian = match cfg_options.get_cfg_values(\"target_endian\").next() {\n+                    Some(x) if x.as_str() == \"big\" => Endian::Big,\n+                    _ => Endian::Little,\n+                };\n+                let pointer_size = Size::from_bytes(\n+                    match cfg_options.get_cfg_values(\"target_pointer_width\").next() {\n+                        Some(x) => match x.as_str() {\n+                            \"16\" => 2,\n+                            \"32\" => 4,\n+                            _ => 8,\n+                        },\n+                        _ => 8,\n+                    },\n+                );\n+                TargetDataLayout { endian, pointer_size, ..TargetDataLayout::default() }\n+            }),\n+    )\n+}\n+\n+/// copied from rustc as it is not exposed yet\n+fn parse_from_llvm_datalayout_string<'a>(\n+    input: &'a str,\n+) -> Result<TargetDataLayout, TargetDataLayoutErrors<'a>> {\n+    // Parse an address space index from a string.\n+    let parse_address_space = |s: &'a str, cause: &'a str| {\n+        s.parse::<u32>().map(AddressSpace).map_err(|err| {\n+            TargetDataLayoutErrors::InvalidAddressSpace { addr_space: s, cause, err }\n+        })\n     };\n-    let pointer_size =\n-        Size::from_bytes(match cfg_options.get_cfg_values(\"target_pointer_width\").next() {\n-            Some(x) => match x.as_str() {\n-                \"16\" => 2,\n-                \"32\" => 4,\n-                _ => 8,\n-            },\n-            _ => 8,\n-        });\n-    // FIXME: These values are incorrect for many architectures, at least for aarch64 and riscv64,\n-    // use `rustc +nightly -Z unstable-options --print target-spec-json` or something similar instead.\n-    Arc::new(TargetDataLayout {\n-        endian,\n-        i1_align: AbiAndPrefAlign::new(Align::from_bytes(1).unwrap()),\n-        i8_align: AbiAndPrefAlign::new(Align::from_bytes(1).unwrap()),\n-        i16_align: AbiAndPrefAlign::new(Align::from_bytes(2).unwrap()),\n-        i32_align: AbiAndPrefAlign::new(Align::from_bytes(4).unwrap()),\n-        i64_align: AbiAndPrefAlign::new(Align::from_bytes(8).unwrap()),\n-        i128_align: AbiAndPrefAlign::new(Align::from_bytes(8).unwrap()),\n-        f32_align: AbiAndPrefAlign::new(Align::from_bytes(4).unwrap()),\n-        f64_align: AbiAndPrefAlign::new(Align::from_bytes(8).unwrap()),\n-        pointer_size,\n-        pointer_align: AbiAndPrefAlign::new(Align::from_bytes(pointer_size.bytes()).unwrap()),\n-        aggregate_align: AbiAndPrefAlign::new(Align::from_bytes(1).unwrap()),\n-        vector_align: vec![],\n-        instruction_address_space: AddressSpace(0),\n-        c_enum_min_size: Integer::I32,\n-    })\n+\n+    // Parse a bit count from a string.\n+    let parse_bits = |s: &'a str, kind: &'a str, cause: &'a str| {\n+        s.parse::<u64>().map_err(|err| TargetDataLayoutErrors::InvalidBits {\n+            kind,\n+            bit: s,\n+            cause,\n+            err,\n+        })\n+    };\n+\n+    // Parse a size string.\n+    let size = |s: &'a str, cause: &'a str| parse_bits(s, \"size\", cause).map(Size::from_bits);\n+\n+    // Parse an alignment string.\n+    let align = |s: &[&'a str], cause: &'a str| {\n+        if s.is_empty() {\n+            return Err(TargetDataLayoutErrors::MissingAlignment { cause });\n+        }\n+        let align_from_bits = |bits| {\n+            Align::from_bits(bits)\n+                .map_err(|err| TargetDataLayoutErrors::InvalidAlignment { cause, err })\n+        };\n+        let abi = parse_bits(s[0], \"alignment\", cause)?;\n+        let pref = s.get(1).map_or(Ok(abi), |pref| parse_bits(pref, \"alignment\", cause))?;\n+        Ok(AbiAndPrefAlign { abi: align_from_bits(abi)?, pref: align_from_bits(pref)? })\n+    };\n+\n+    let mut dl = TargetDataLayout::default();\n+    let mut i128_align_src = 64;\n+    for spec in input.split('-') {\n+        let spec_parts = spec.split(':').collect::<Vec<_>>();\n+\n+        match &*spec_parts {\n+            [\"e\"] => dl.endian = Endian::Little,\n+            [\"E\"] => dl.endian = Endian::Big,\n+            [p] if p.starts_with('P') => {\n+                dl.instruction_address_space = parse_address_space(&p[1..], \"P\")?\n+            }\n+            [\"a\", ref a @ ..] => dl.aggregate_align = align(a, \"a\")?,\n+            [\"f32\", ref a @ ..] => dl.f32_align = align(a, \"f32\")?,\n+            [\"f64\", ref a @ ..] => dl.f64_align = align(a, \"f64\")?,\n+            [p @ \"p\", s, ref a @ ..] | [p @ \"p0\", s, ref a @ ..] => {\n+                dl.pointer_size = size(s, p)?;\n+                dl.pointer_align = align(a, p)?;\n+            }\n+            [s, ref a @ ..] if s.starts_with('i') => {\n+                let Ok(bits) = s[1..].parse::<u64>() else {\n+                    size(&s[1..], \"i\")?; // For the user error.\n+                    continue;\n+                };\n+                let a = align(a, s)?;\n+                match bits {\n+                    1 => dl.i1_align = a,\n+                    8 => dl.i8_align = a,\n+                    16 => dl.i16_align = a,\n+                    32 => dl.i32_align = a,\n+                    64 => dl.i64_align = a,\n+                    _ => {}\n+                }\n+                if bits >= i128_align_src && bits <= 128 {\n+                    // Default alignment for i128 is decided by taking the alignment of\n+                    // largest-sized i{64..=128}.\n+                    i128_align_src = bits;\n+                    dl.i128_align = a;\n+                }\n+            }\n+            [s, ref a @ ..] if s.starts_with('v') => {\n+                let v_size = size(&s[1..], \"v\")?;\n+                let a = align(a, s)?;\n+                if let Some(v) = dl.vector_align.iter_mut().find(|v| v.0 == v_size) {\n+                    v.1 = a;\n+                    continue;\n+                }\n+                // No existing entry, add a new one.\n+                dl.vector_align.push((v_size, a));\n+            }\n+            _ => {} // Ignore everything else.\n+        }\n+    }\n+    Ok(dl)\n }"}, {"sha": "ba821235f3f3bec623efe5359c933e97ae267583", "filename": "crates/hir-ty/src/layout/tests.rs", "status": "modified", "additions": 29, "deletions": 15, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/c2840c809ac129e1358ab93189405e682695dd65/crates%2Fhir-ty%2Fsrc%2Flayout%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2840c809ac129e1358ab93189405e682695dd65/crates%2Fhir-ty%2Fsrc%2Flayout%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flayout%2Ftests.rs?ref=c2840c809ac129e1358ab93189405e682695dd65", "patch": "@@ -9,8 +9,22 @@ use crate::{test_db::TestDB, Interner, Substitution};\n \n use super::layout_of_ty;\n \n-fn eval_goal(ra_fixture: &str) -> Result<Layout, LayoutError> {\n-    let (db, file_id) = TestDB::with_single_file(ra_fixture);\n+fn eval_goal(ra_fixture: &str, minicore: &str) -> Result<Layout, LayoutError> {\n+    // using unstable cargo features failed, fall back to using plain rustc\n+    let mut cmd = std::process::Command::new(\"rustc\");\n+    cmd.args(&[\"-Z\", \"unstable-options\", \"--print\", \"target-spec-json\"])\n+        .env(\"RUSTC_BOOTSTRAP\", \"1\");\n+    let output = cmd.output().unwrap();\n+    assert!(output.status.success(), \"{}\", output.status);\n+    let stdout = String::from_utf8(output.stdout).unwrap();\n+    let target_data_layout =\n+        stdout.split_once(r#\"\"data-layout\": \"\"#).unwrap().1.split_once('\"').unwrap().0.to_owned();\n+\n+    let ra_fixture = format!(\n+        \"{minicore}//- /main.rs crate:test target_data_layout:{target_data_layout}\\n{ra_fixture}\",\n+    );\n+\n+    let (db, file_id) = TestDB::with_single_file(&ra_fixture);\n     let module_id = db.module_for_file(file_id);\n     let def_map = module_id.def_map(&db);\n     let scope = &def_map[module_id.local_id].scope;\n@@ -20,31 +34,29 @@ fn eval_goal(ra_fixture: &str) -> Result<Layout, LayoutError> {\n         .find_map(|x| match x {\n             hir_def::ModuleDefId::AdtId(x) => {\n                 let name = match x {\n-                    hir_def::AdtId::StructId(x) => db.struct_data(x).name.to_string(),\n-                    hir_def::AdtId::UnionId(x) => db.union_data(x).name.to_string(),\n-                    hir_def::AdtId::EnumId(x) => db.enum_data(x).name.to_string(),\n+                    hir_def::AdtId::StructId(x) => db.struct_data(x).name.to_smol_str(),\n+                    hir_def::AdtId::UnionId(x) => db.union_data(x).name.to_smol_str(),\n+                    hir_def::AdtId::EnumId(x) => db.enum_data(x).name.to_smol_str(),\n                 };\n-                if name == \"Goal\" {\n-                    Some(x)\n-                } else {\n-                    None\n-                }\n+                (name == \"Goal\").then(|| x)\n             }\n             _ => None,\n         })\n         .unwrap();\n     let goal_ty = TyKind::Adt(AdtId(adt_id), Substitution::empty(Interner)).intern(Interner);\n-    layout_of_ty(&db, &goal_ty)\n+    layout_of_ty(&db, &goal_ty, module_id.krate())\n }\n \n-fn check_size_and_align(ra_fixture: &str, size: u64, align: u64) {\n-    let l = eval_goal(ra_fixture).unwrap();\n+#[track_caller]\n+fn check_size_and_align(ra_fixture: &str, minicore: &str, size: u64, align: u64) {\n+    let l = eval_goal(ra_fixture, minicore).unwrap();\n     assert_eq!(l.size.bytes(), size);\n     assert_eq!(l.align.abi.bytes(), align);\n }\n \n+#[track_caller]\n fn check_fail(ra_fixture: &str, e: LayoutError) {\n-    let r = eval_goal(ra_fixture);\n+    let r = eval_goal(ra_fixture, \"\");\n     assert_eq!(r, Err(e));\n }\n \n@@ -54,7 +66,8 @@ macro_rules! size_and_align {\n             #[allow(dead_code)]\n             $($t)*\n             check_size_and_align(\n-                &format!(\"//- minicore: {}\\n{}\", stringify!($($x),*), stringify!($($t)*)),\n+                stringify!($($t)*),\n+                &format!(\"//- minicore: {}\\n\", stringify!($($x),*)),\n                 ::std::mem::size_of::<Goal>() as u64,\n                 ::std::mem::align_of::<Goal>() as u64,\n             );\n@@ -66,6 +79,7 @@ macro_rules! size_and_align {\n             $($t)*\n             check_size_and_align(\n                 stringify!($($t)*),\n+                \"\",\n                 ::std::mem::size_of::<Goal>() as u64,\n                 ::std::mem::align_of::<Goal>() as u64,\n             );"}, {"sha": "cc983ee0142ca3823e745bd4c6bb7f2b37e0bbc0", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2840c809ac129e1358ab93189405e682695dd65/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2840c809ac129e1358ab93189405e682695dd65/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=c2840c809ac129e1358ab93189405e682695dd65", "patch": "@@ -866,7 +866,7 @@ impl Field {\n     }\n \n     pub fn layout(&self, db: &dyn HirDatabase) -> Result<Layout, LayoutError> {\n-        layout_of_ty(db, &self.ty(db).ty)\n+        layout_of_ty(db, &self.ty(db).ty, self.parent.module(db).krate().into())\n     }\n \n     pub fn parent_def(&self, _db: &dyn HirDatabase) -> VariantDef {"}, {"sha": "6698bf766a05706ebe0c4cd884eb4365a107693c", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2840c809ac129e1358ab93189405e682695dd65/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2840c809ac129e1358ab93189405e682695dd65/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=c2840c809ac129e1358ab93189405e682695dd65", "patch": "@@ -236,6 +236,7 @@ impl Analysis {\n             Ok(Vec::new()),\n             false,\n             CrateOrigin::CratesIo { repo: None, name: None },\n+            None,\n         );\n         change.change_file(file_id, Some(Arc::new(text)));\n         change.set_crate_graph(crate_graph);"}, {"sha": "ae539a5d397f788a6a0a3f1bbbaeb7f94a78f039", "filename": "crates/ide/src/shuffle_crate_graph.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2840c809ac129e1358ab93189405e682695dd65/crates%2Fide%2Fsrc%2Fshuffle_crate_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2840c809ac129e1358ab93189405e682695dd65/crates%2Fide%2Fsrc%2Fshuffle_crate_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fshuffle_crate_graph.rs?ref=c2840c809ac129e1358ab93189405e682695dd65", "patch": "@@ -36,6 +36,7 @@ pub(crate) fn shuffle_crate_graph(db: &mut RootDatabase) {\n             data.proc_macro.clone(),\n             data.is_proc_macro,\n             data.origin.clone(),\n+            data.target_layout.clone(),\n         );\n         map.insert(old_id, new_id);\n     }"}, {"sha": "835f2b3dd031caf9986ea0be35cbb27961903c8b", "filename": "crates/project-model/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2840c809ac129e1358ab93189405e682695dd65/crates%2Fproject-model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2840c809ac129e1358ab93189405e682695dd65/crates%2Fproject-model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Flib.rs?ref=c2840c809ac129e1358ab93189405e682695dd65", "patch": "@@ -25,6 +25,7 @@ mod sysroot;\n mod workspace;\n mod rustc_cfg;\n mod build_scripts;\n+mod target_data_layout;\n \n #[cfg(test)]\n mod tests;"}, {"sha": "12c8cf70dc0626629ecbc05ae4e2ae4b5abe023c", "filename": "crates/project-model/src/rustc_cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2840c809ac129e1358ab93189405e682695dd65/crates%2Fproject-model%2Fsrc%2Frustc_cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2840c809ac129e1358ab93189405e682695dd65/crates%2Fproject-model%2Fsrc%2Frustc_cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Frustc_cfg.rs?ref=c2840c809ac129e1358ab93189405e682695dd65", "patch": "@@ -50,7 +50,7 @@ fn get_rust_cfgs(\n         cargo_config.envs(extra_env);\n         cargo_config\n             .current_dir(cargo_toml.parent())\n-            .args(&[\"-Z\", \"unstable-options\", \"rustc\", \"--print\", \"cfg\"])\n+            .args(&[\"rustc\", \"-Z\", \"unstable-options\", \"--print\", \"cfg\"])\n             .env(\"RUSTC_BOOTSTRAP\", \"1\");\n         if let Some(target) = target {\n             cargo_config.args(&[\"--target\", target]);"}, {"sha": "b9d7d2338c39ca02f2438f1e5e7d65022579ce88", "filename": "crates/project-model/src/target_data_layout.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c2840c809ac129e1358ab93189405e682695dd65/crates%2Fproject-model%2Fsrc%2Ftarget_data_layout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2840c809ac129e1358ab93189405e682695dd65/crates%2Fproject-model%2Fsrc%2Ftarget_data_layout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Ftarget_data_layout.rs?ref=c2840c809ac129e1358ab93189405e682695dd65", "patch": "@@ -0,0 +1,40 @@\n+//! Runs `rustc --print target-spec-json` to get the target_data_layout.\n+use std::process::Command;\n+\n+use rustc_hash::FxHashMap;\n+\n+use crate::{utf8_stdout, ManifestPath};\n+\n+pub(super) fn get(\n+    cargo_toml: Option<&ManifestPath>,\n+    target: Option<&str>,\n+    extra_env: &FxHashMap<String, String>,\n+) -> Option<String> {\n+    let output = (|| {\n+        if let Some(cargo_toml) = cargo_toml {\n+            let mut cmd = Command::new(toolchain::rustc());\n+            cmd.envs(extra_env);\n+            cmd.current_dir(cargo_toml.parent())\n+                .args(&[\"-Z\", \"unstable-options\", \"rustc\", \"--print\", \"target-spec-json\"])\n+                .env(\"RUSTC_BOOTSTRAP\", \"1\");\n+            if let Some(target) = target {\n+                cmd.args(&[\"--target\", target]);\n+            }\n+            match utf8_stdout(cmd) {\n+                Ok(it) => return Ok(it),\n+                Err(e) => tracing::debug!(\"{e:?}: falling back to querying rustc for cfgs\"),\n+            }\n+        }\n+        // using unstable cargo features failed, fall back to using plain rustc\n+        let mut cmd = Command::new(toolchain::rustc());\n+        cmd.envs(extra_env)\n+            .args(&[\"-Z\", \"unstable-options\", \"rustc\", \"--print\", \"target-spec-json\"])\n+            .env(\"RUSTC_BOOTSTRAP\", \"1\");\n+        if let Some(target) = target {\n+            cmd.args(&[\"--target\", target]);\n+        }\n+        utf8_stdout(cmd)\n+    })()\n+    .ok()?;\n+    Some(output.split_once(r#\"\"data-layout\": \"\"#)?.1.split_once('\"')?.0.to_owned())\n+}"}, {"sha": "adb106e97931464c3762ce9ca4a73ef004bb9246", "filename": "crates/project-model/src/tests.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c2840c809ac129e1358ab93189405e682695dd65/crates%2Fproject-model%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2840c809ac129e1358ab93189405e682695dd65/crates%2Fproject-model%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Ftests.rs?ref=c2840c809ac129e1358ab93189405e682695dd65", "patch": "@@ -29,6 +29,7 @@ fn load_cargo_with_overrides(file: &str, cfg_overrides: CfgOverrides) -> CrateGr\n         rustc_cfg: Vec::new(),\n         cfg_overrides,\n         toolchain: None,\n+        target_layout: None,\n     };\n     to_crate_graph(project_workspace)\n }\n@@ -150,6 +151,7 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                                 \"debug_assertions\",\n                             ],\n                         ),\n+                        target_layout: None,\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -219,6 +221,7 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                                 \"debug_assertions\",\n                             ],\n                         ),\n+                        target_layout: None,\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -297,6 +300,7 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                                 \"debug_assertions\",\n                             ],\n                         ),\n+                        target_layout: None,\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -375,6 +379,7 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                                 \"debug_assertions\",\n                             ],\n                         ),\n+                        target_layout: None,\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -462,6 +467,7 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                                 \"feature=use_std\",\n                             ],\n                         ),\n+                        target_layout: None,\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -547,6 +553,7 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                                 \"test\",\n                             ],\n                         ),\n+                        target_layout: None,\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -618,6 +625,7 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                                 \"test\",\n                             ],\n                         ),\n+                        target_layout: None,\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -698,6 +706,7 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                                 \"test\",\n                             ],\n                         ),\n+                        target_layout: None,\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -778,6 +787,7 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                                 \"test\",\n                             ],\n                         ),\n+                        target_layout: None,\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -865,6 +875,7 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                                 \"feature=use_std\",\n                             ],\n                         ),\n+                        target_layout: None,\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -941,6 +952,7 @@ fn cargo_hello_world_project_model() {\n                                 \"test\",\n                             ],\n                         ),\n+                        target_layout: None,\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -1012,6 +1024,7 @@ fn cargo_hello_world_project_model() {\n                                 \"test\",\n                             ],\n                         ),\n+                        target_layout: None,\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -1092,6 +1105,7 @@ fn cargo_hello_world_project_model() {\n                                 \"test\",\n                             ],\n                         ),\n+                        target_layout: None,\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -1172,6 +1186,7 @@ fn cargo_hello_world_project_model() {\n                                 \"test\",\n                             ],\n                         ),\n+                        target_layout: None,\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -1259,6 +1274,7 @@ fn cargo_hello_world_project_model() {\n                                 \"feature=use_std\",\n                             ],\n                         ),\n+                        target_layout: None,\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -1327,6 +1343,7 @@ fn rust_project_hello_world_project_model() {\n                         potential_cfg_options: CfgOptions(\n                             [],\n                         ),\n+                        target_layout: None,\n                         env: Env {\n                             entries: {},\n                         },\n@@ -1371,6 +1388,7 @@ fn rust_project_hello_world_project_model() {\n                         potential_cfg_options: CfgOptions(\n                             [],\n                         ),\n+                        target_layout: None,\n                         env: Env {\n                             entries: {},\n                         },\n@@ -1405,6 +1423,7 @@ fn rust_project_hello_world_project_model() {\n                         potential_cfg_options: CfgOptions(\n                             [],\n                         ),\n+                        target_layout: None,\n                         env: Env {\n                             entries: {},\n                         },\n@@ -1439,6 +1458,7 @@ fn rust_project_hello_world_project_model() {\n                         potential_cfg_options: CfgOptions(\n                             [],\n                         ),\n+                        target_layout: None,\n                         env: Env {\n                             entries: {},\n                         },\n@@ -1473,6 +1493,7 @@ fn rust_project_hello_world_project_model() {\n                         potential_cfg_options: CfgOptions(\n                             [],\n                         ),\n+                        target_layout: None,\n                         env: Env {\n                             entries: {},\n                         },\n@@ -1517,6 +1538,7 @@ fn rust_project_hello_world_project_model() {\n                         potential_cfg_options: CfgOptions(\n                             [],\n                         ),\n+                        target_layout: None,\n                         env: Env {\n                             entries: {},\n                         },\n@@ -1551,6 +1573,7 @@ fn rust_project_hello_world_project_model() {\n                         potential_cfg_options: CfgOptions(\n                             [],\n                         ),\n+                        target_layout: None,\n                         env: Env {\n                             entries: {},\n                         },\n@@ -1658,6 +1681,7 @@ fn rust_project_hello_world_project_model() {\n                         potential_cfg_options: CfgOptions(\n                             [],\n                         ),\n+                        target_layout: None,\n                         env: Env {\n                             entries: {},\n                         },\n@@ -1692,6 +1716,7 @@ fn rust_project_hello_world_project_model() {\n                         potential_cfg_options: CfgOptions(\n                             [],\n                         ),\n+                        target_layout: None,\n                         env: Env {\n                             entries: {},\n                         },\n@@ -1726,6 +1751,7 @@ fn rust_project_hello_world_project_model() {\n                         potential_cfg_options: CfgOptions(\n                             [],\n                         ),\n+                        target_layout: None,\n                         env: Env {\n                             entries: {},\n                         },\n@@ -1760,6 +1786,7 @@ fn rust_project_hello_world_project_model() {\n                         potential_cfg_options: CfgOptions(\n                             [],\n                         ),\n+                        target_layout: None,\n                         env: Env {\n                             entries: {},\n                         },"}, {"sha": "52ac3b6dc02840576b4ca4eda45399fd6f8802b0", "filename": "crates/project-model/src/workspace.rs", "status": "modified", "additions": 52, "deletions": 8, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/c2840c809ac129e1358ab93189405e682695dd65/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2840c809ac129e1358ab93189405e682695dd65/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fworkspace.rs?ref=c2840c809ac129e1358ab93189405e682695dd65", "patch": "@@ -21,8 +21,8 @@ use crate::{\n     cfg_flag::CfgFlag,\n     rustc_cfg,\n     sysroot::SysrootCrate,\n-    utf8_stdout, CargoConfig, CargoWorkspace, InvocationStrategy, ManifestPath, Package,\n-    ProjectJson, ProjectManifest, Sysroot, TargetKind, WorkspaceBuildScripts,\n+    target_data_layout, utf8_stdout, CargoConfig, CargoWorkspace, InvocationStrategy, ManifestPath,\n+    Package, ProjectJson, ProjectManifest, Sysroot, TargetKind, WorkspaceBuildScripts,\n };\n \n /// A set of cfg-overrides per crate.\n@@ -79,6 +79,7 @@ pub enum ProjectWorkspace {\n         rustc_cfg: Vec<CfgFlag>,\n         cfg_overrides: CfgOverrides,\n         toolchain: Option<Version>,\n+        target_layout: Option<String>,\n     },\n     /// Project workspace was manually specified using a `rust-project.json` file.\n     Json { project: ProjectJson, sysroot: Option<Sysroot>, rustc_cfg: Vec<CfgFlag> },\n@@ -108,6 +109,7 @@ impl fmt::Debug for ProjectWorkspace {\n                 rustc_cfg,\n                 cfg_overrides,\n                 toolchain,\n+                target_layout: data_layout,\n             } => f\n                 .debug_struct(\"Cargo\")\n                 .field(\"root\", &cargo.workspace_root().file_name())\n@@ -120,6 +122,7 @@ impl fmt::Debug for ProjectWorkspace {\n                 .field(\"n_rustc_cfg\", &rustc_cfg.len())\n                 .field(\"n_cfg_overrides\", &cfg_overrides.len())\n                 .field(\"toolchain\", &toolchain)\n+                .field(\"data_layout\", &data_layout)\n                 .finish(),\n             ProjectWorkspace::Json { project, sysroot, rustc_cfg } => {\n                 let mut debug_struct = f.debug_struct(\"Json\");\n@@ -241,6 +244,11 @@ impl ProjectWorkspace {\n                     rustc_cfg::get(Some(&cargo_toml), config.target.as_deref(), &config.extra_env);\n \n                 let cfg_overrides = config.cfg_overrides();\n+                let data_layout = target_data_layout::get(\n+                    Some(&cargo_toml),\n+                    config.target.as_deref(),\n+                    &config.extra_env,\n+                );\n                 ProjectWorkspace::Cargo {\n                     cargo,\n                     build_scripts: WorkspaceBuildScripts::default(),\n@@ -249,6 +257,7 @@ impl ProjectWorkspace {\n                     rustc_cfg,\n                     cfg_overrides,\n                     toolchain,\n+                    target_layout: data_layout,\n                 }\n             }\n         };\n@@ -435,6 +444,7 @@ impl ProjectWorkspace {\n                 cfg_overrides: _,\n                 build_scripts,\n                 toolchain: _,\n+                target_layout: _,\n             } => {\n                 cargo\n                     .packages()\n@@ -530,6 +540,7 @@ impl ProjectWorkspace {\n                 project,\n                 sysroot,\n                 extra_env,\n+                None,\n             ),\n             ProjectWorkspace::Cargo {\n                 cargo,\n@@ -539,6 +550,7 @@ impl ProjectWorkspace {\n                 cfg_overrides,\n                 build_scripts,\n                 toolchain: _,\n+                target_layout,\n             } => cargo_to_crate_graph(\n                 load_proc_macro,\n                 load,\n@@ -548,9 +560,10 @@ impl ProjectWorkspace {\n                 rustc_cfg.clone(),\n                 cfg_overrides,\n                 build_scripts,\n+                target_layout.as_deref().map(Arc::from),\n             ),\n             ProjectWorkspace::DetachedFiles { files, sysroot, rustc_cfg } => {\n-                detached_files_to_crate_graph(rustc_cfg.clone(), load, files, sysroot)\n+                detached_files_to_crate_graph(rustc_cfg.clone(), load, files, sysroot, None)\n             }\n         };\n         if crate_graph.patch_cfg_if() {\n@@ -569,11 +582,18 @@ fn project_json_to_crate_graph(\n     project: &ProjectJson,\n     sysroot: &Option<Sysroot>,\n     extra_env: &FxHashMap<String, String>,\n+    target_layout: Option<Arc<str>>,\n ) -> CrateGraph {\n     let mut crate_graph = CrateGraph::default();\n-    let sysroot_deps = sysroot\n-        .as_ref()\n-        .map(|sysroot| sysroot_to_crate_graph(&mut crate_graph, sysroot, rustc_cfg.clone(), load));\n+    let sysroot_deps = sysroot.as_ref().map(|sysroot| {\n+        sysroot_to_crate_graph(\n+            &mut crate_graph,\n+            sysroot,\n+            rustc_cfg.clone(),\n+            target_layout.clone(),\n+            load,\n+        )\n+    });\n \n     let mut cfg_cache: FxHashMap<&str, Vec<CfgFlag>> = FxHashMap::default();\n     let crates: NoHashHashMap<CrateId, CrateId> = project\n@@ -625,6 +645,7 @@ fn project_json_to_crate_graph(\n                     } else {\n                         CrateOrigin::CratesIo { repo: None, name: None }\n                     },\n+                    target_layout.clone(),\n                 ),\n             )\n         })\n@@ -665,11 +686,18 @@ fn cargo_to_crate_graph(\n     rustc_cfg: Vec<CfgFlag>,\n     override_cfg: &CfgOverrides,\n     build_scripts: &WorkspaceBuildScripts,\n+    target_layout: Option<Arc<str>>,\n ) -> CrateGraph {\n     let _p = profile::span(\"cargo_to_crate_graph\");\n     let mut crate_graph = CrateGraph::default();\n     let (public_deps, libproc_macro) = match sysroot {\n-        Some(sysroot) => sysroot_to_crate_graph(&mut crate_graph, sysroot, rustc_cfg.clone(), load),\n+        Some(sysroot) => sysroot_to_crate_graph(\n+            &mut crate_graph,\n+            sysroot,\n+            rustc_cfg.clone(),\n+            target_layout.clone(),\n+            load,\n+        ),\n         None => (SysrootPublicDeps::default(), None),\n     };\n \n@@ -732,6 +760,7 @@ fn cargo_to_crate_graph(\n                     file_id,\n                     &cargo[tgt].name,\n                     cargo[tgt].is_proc_macro,\n+                    target_layout.clone(),\n                 );\n                 if cargo[tgt].kind == TargetKind::Lib {\n                     lib_tgt = Some((crate_id, cargo[tgt].name.clone()));\n@@ -811,6 +840,7 @@ fn cargo_to_crate_graph(\n                 &cfg_options,\n                 override_cfg,\n                 build_scripts,\n+                target_layout,\n             );\n         }\n     }\n@@ -822,11 +852,18 @@ fn detached_files_to_crate_graph(\n     load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n     detached_files: &[AbsPathBuf],\n     sysroot: &Option<Sysroot>,\n+    target_layout: Option<Arc<str>>,\n ) -> CrateGraph {\n     let _p = profile::span(\"detached_files_to_crate_graph\");\n     let mut crate_graph = CrateGraph::default();\n     let (public_deps, _libproc_macro) = match sysroot {\n-        Some(sysroot) => sysroot_to_crate_graph(&mut crate_graph, sysroot, rustc_cfg.clone(), load),\n+        Some(sysroot) => sysroot_to_crate_graph(\n+            &mut crate_graph,\n+            sysroot,\n+            rustc_cfg.clone(),\n+            target_layout.clone(),\n+            load,\n+        ),\n         None => (SysrootPublicDeps::default(), None),\n     };\n \n@@ -859,6 +896,7 @@ fn detached_files_to_crate_graph(\n                 repo: None,\n                 name: display_name.map(|n| n.canonical_name().to_string()),\n             },\n+            target_layout.clone(),\n         );\n \n         public_deps.add_to_crate_graph(&mut crate_graph, detached_file_crate);\n@@ -879,6 +917,7 @@ fn handle_rustc_crates(\n     cfg_options: &CfgOptions,\n     override_cfg: &CfgOverrides,\n     build_scripts: &WorkspaceBuildScripts,\n+    target_layout: Option<Arc<str>>,\n ) {\n     let mut rustc_pkg_crates = FxHashMap::default();\n     // The root package of the rustc-dev component is rustc_driver, so we match that\n@@ -935,6 +974,7 @@ fn handle_rustc_crates(\n                         file_id,\n                         &rustc_workspace[tgt].name,\n                         rustc_workspace[tgt].is_proc_macro,\n+                        target_layout.clone(),\n                     );\n                     pkg_to_lib_crate.insert(pkg, crate_id);\n                     // Add dependencies on core / std / alloc for this crate\n@@ -999,6 +1039,7 @@ fn add_target_crate_root(\n     file_id: FileId,\n     cargo_name: &str,\n     is_proc_macro: bool,\n+    target_layout: Option<Arc<str>>,\n ) -> CrateId {\n     let edition = pkg.edition;\n     let mut potential_cfg_options = cfg_options.clone();\n@@ -1045,6 +1086,7 @@ fn add_target_crate_root(\n         proc_macro,\n         is_proc_macro,\n         CrateOrigin::CratesIo { repo: pkg.repository.clone(), name: Some(pkg.name.clone()) },\n+        target_layout,\n     )\n }\n \n@@ -1066,6 +1108,7 @@ fn sysroot_to_crate_graph(\n     crate_graph: &mut CrateGraph,\n     sysroot: &Sysroot,\n     rustc_cfg: Vec<CfgFlag>,\n+    target_layout: Option<Arc<str>>,\n     load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n ) -> (SysrootPublicDeps, Option<CrateId>) {\n     let _p = profile::span(\"sysroot_to_crate_graph\");\n@@ -1089,6 +1132,7 @@ fn sysroot_to_crate_graph(\n                 Err(\"no proc macro loaded for sysroot crate\".into()),\n                 false,\n                 CrateOrigin::Lang(LangCrateOrigin::from(&*sysroot[krate].name)),\n+                target_layout.clone(),\n             );\n             Some((krate, crate_id))\n         })"}, {"sha": "faf7a2c213178a73bff7152ed00e3eab8141a8c0", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2840c809ac129e1358ab93189405e682695dd65/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2840c809ac129e1358ab93189405e682695dd65/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=c2840c809ac129e1358ab93189405e682695dd65", "patch": "@@ -226,6 +226,7 @@ impl GlobalState {\n \n                     build_scripts: _,\n                     toolchain: _,\n+                    target_layout: _,\n                 } => Some((cargo, sysroot, rustc, rustc_cfg, cfg_overrides)),\n                 _ => None,\n             };"}, {"sha": "73e72c18809b59702f7fdd074f70fca6b278c80f", "filename": "crates/test-utils/src/fixture.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c2840c809ac129e1358ab93189405e682695dd65/crates%2Ftest-utils%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2840c809ac129e1358ab93189405e682695dd65/crates%2Ftest-utils%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest-utils%2Fsrc%2Ffixture.rs?ref=c2840c809ac129e1358ab93189405e682695dd65", "patch": "@@ -78,6 +78,7 @@ pub struct Fixture {\n     pub edition: Option<String>,\n     pub env: FxHashMap<String, String>,\n     pub introduce_new_source_root: Option<String>,\n+    pub target_data_layout: Option<String>,\n }\n \n pub struct MiniCore {\n@@ -181,6 +182,7 @@ impl Fixture {\n         let mut cfg_key_values = Vec::new();\n         let mut env = FxHashMap::default();\n         let mut introduce_new_source_root = None;\n+        let mut target_data_layout = None;\n         for component in components[1..].iter() {\n             let (key, value) = component\n                 .split_once(':')\n@@ -213,6 +215,7 @@ impl Fixture {\n                     }\n                 }\n                 \"new_source_root\" => introduce_new_source_root = Some(value.to_string()),\n+                \"target_data_layout\" => target_data_layout = Some(value.to_string()),\n                 _ => panic!(\"bad component: {:?}\", component),\n             }\n         }\n@@ -237,6 +240,7 @@ impl Fixture {\n             edition,\n             env,\n             introduce_new_source_root,\n+            target_data_layout,\n         }\n     }\n }"}]}