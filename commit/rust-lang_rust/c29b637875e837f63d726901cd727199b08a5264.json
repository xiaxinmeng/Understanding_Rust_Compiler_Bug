{"sha": "c29b637875e837f63d726901cd727199b08a5264", "node_id": "C_kwDOAAsO6NoAKGMyOWI2Mzc4NzVlODM3ZjYzZDcyNjkwMWNkNzI3MTk5YjA4YTUyNjQ", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-01-20T13:47:31Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-01-20T13:50:35Z"}, "message": "update comments", "tree": {"sha": "a572f68241dfafb096abb46b2aaed06a57ce0c66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a572f68241dfafb096abb46b2aaed06a57ce0c66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c29b637875e837f63d726901cd727199b08a5264", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c29b637875e837f63d726901cd727199b08a5264", "html_url": "https://github.com/rust-lang/rust/commit/c29b637875e837f63d726901cd727199b08a5264", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c29b637875e837f63d726901cd727199b08a5264/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74fbbefea8d13683cca5eee62e4740706cb3144a", "url": "https://api.github.com/repos/rust-lang/rust/commits/74fbbefea8d13683cca5eee62e4740706cb3144a", "html_url": "https://github.com/rust-lang/rust/commit/74fbbefea8d13683cca5eee62e4740706cb3144a"}], "stats": {"total": 8, "additions": 6, "deletions": 2}, "files": [{"sha": "6a3378a3896e3a0b58fdb74afed1dd6b486f5e53", "filename": "compiler/rustc_const_eval/src/interpret/util.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c29b637875e837f63d726901cd727199b08a5264/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c29b637875e837f63d726901cd727199b08a5264/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Futil.rs?ref=c29b637875e837f63d726901cd727199b08a5264", "patch": "@@ -3,7 +3,11 @@ use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable, TypeVisitor};\n use std::convert::TryInto;\n use std::ops::ControlFlow;\n \n-/// Returns `true` if a used generic parameter requires substitution.\n+/// Checks whether a type contains generic parameters which require substitution.\n+///\n+/// In case it does, returns a `TooGeneric` const eval error. Note that due to polymorphization\n+/// types may be \"concrete enough\" even though they still contain generic parameters in\n+/// case these parameters are unused.\n crate fn ensure_monomorphic_enough<'tcx, T>(tcx: TyCtxt<'tcx>, ty: T) -> InterpResult<'tcx>\n where\n     T: TypeFoldable<'tcx>,"}, {"sha": "ec88bdf4a370f8a8508d9da6f24e7e827aebdbeb", "filename": "compiler/rustc_typeck/src/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c29b637875e837f63d726901cd727199b08a5264/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c29b637875e837f63d726901cd727199b08a5264/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs?ref=c29b637875e837f63d726901cd727199b08a5264", "patch": "@@ -43,7 +43,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let item_def_id = self.tcx.hir().local_def_id(item_id);\n \n         // This attribute causes us to dump some writeback information\n-        // in the form of errors, which is uSymbol for unit tests.\n+        // in the form of errors, which is used for unit tests.\n         let rustc_dump_user_substs =\n             self.tcx.has_attr(item_def_id.to_def_id(), sym::rustc_dump_user_substs);\n "}]}