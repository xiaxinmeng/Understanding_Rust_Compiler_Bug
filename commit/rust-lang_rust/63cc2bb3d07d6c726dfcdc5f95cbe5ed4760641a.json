{"sha": "63cc2bb3d07d6c726dfcdc5f95cbe5ed4760641a", "node_id": "C_kwDOAAsO6NoAKDYzY2MyYmIzZDA3ZDZjNzI2ZGZjZGM1Zjk1Y2JlNWVkNDc2MDY0MWE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-25T13:43:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-25T13:43:52Z"}, "message": "Auto merge of #88243 - nikic:newpm-2, r=nagisa\n\nEnable new pass manager with LLVM 13\n\nThe new pass manager is enabled by default in clang since Clang/LLVM 13. Per the recent discussion on llvm-dev (https://lists.llvm.org/pipermail/llvm-dev/2021-August/152305.html) the legacy pass manager will be unmaintained in LLVM 14 and removed entirely in LLVM 15.\n\nThis switches us to use the new pass manager if LLVM >= 13 is used. It's possible to still use the old pass manager using `-Z new-llvm-pass-manager=no`.", "tree": {"sha": "b1707204606ee934c8e3981cb5c751cc80be483e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1707204606ee934c8e3981cb5c751cc80be483e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63cc2bb3d07d6c726dfcdc5f95cbe5ed4760641a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63cc2bb3d07d6c726dfcdc5f95cbe5ed4760641a", "html_url": "https://github.com/rust-lang/rust/commit/63cc2bb3d07d6c726dfcdc5f95cbe5ed4760641a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63cc2bb3d07d6c726dfcdc5f95cbe5ed4760641a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9f29a851917a706c01b6f51331894df1d15770b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9f29a851917a706c01b6f51331894df1d15770b", "html_url": "https://github.com/rust-lang/rust/commit/e9f29a851917a706c01b6f51331894df1d15770b"}, {"sha": "51203dc1c40393b864af70d0bc50b6c4f4ea34e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/51203dc1c40393b864af70d0bc50b6c4f4ea34e4", "html_url": "https://github.com/rust-lang/rust/commit/51203dc1c40393b864af70d0bc50b6c4f4ea34e4"}], "stats": {"total": 25, "additions": 17, "deletions": 8}, "files": [{"sha": "92199f611bad03baa517c0425a28e1aa98a4bb36", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/63cc2bb3d07d6c726dfcdc5f95cbe5ed4760641a/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63cc2bb3d07d6c726dfcdc5f95cbe5ed4760641a/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=63cc2bb3d07d6c726dfcdc5f95cbe5ed4760641a", "patch": "@@ -370,8 +370,9 @@ fn get_pgo_use_path(config: &ModuleConfig) -> Option<CString> {\n }\n \n pub(crate) fn should_use_new_llvm_pass_manager(config: &ModuleConfig) -> bool {\n-    // The new pass manager is disabled by default.\n-    config.new_llvm_pass_manager.unwrap_or(false)\n+    // The new pass manager is enabled by default for LLVM >= 13.\n+    // This matches Clang, which also enables it since Clang 13.\n+    config.new_llvm_pass_manager.unwrap_or_else(|| llvm_util::get_version() >= (13, 0, 0))\n }\n \n pub(crate) unsafe fn optimize_with_new_llvm_pass_manager("}, {"sha": "48eb50953a957dc759f4e867a9a3564c9fe6a192", "filename": "compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/63cc2bb3d07d6c726dfcdc5f95cbe5ed4760641a/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/63cc2bb3d07d6c726dfcdc5f95cbe5ed4760641a/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp?ref=63cc2bb3d07d6c726dfcdc5f95cbe5ed4760641a", "patch": "@@ -1004,7 +1004,10 @@ LLVMRustOptimizeWithNewPassManager(\n #endif\n   bool NeedThinLTOBufferPasses = UseThinLTOBuffers;\n   if (!NoPrepopulatePasses) {\n-    if (OptLevel == OptimizationLevel::O0) {\n+    // The pre-link pipelines don't support O0 and require using budilO0DefaultPipeline() instead.\n+    // At the same time, the LTO pipelines do support O0 and using them is required.\n+    bool IsLTO = OptStage == LLVMRustOptStage::ThinLTO || OptStage == LLVMRustOptStage::FatLTO;\n+    if (OptLevel == OptimizationLevel::O0 && !IsLTO) {\n #if LLVM_VERSION_GE(12, 0)\n       for (const auto &C : PipelineStartEPCallbacks)\n         PB.registerPipelineStartEPCallback(C);"}, {"sha": "39f73c4e3967eff439afc494819ca778521d7a91", "filename": "src/test/codegen/panic-in-drop-abort.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/63cc2bb3d07d6c726dfcdc5f95cbe5ed4760641a/src%2Ftest%2Fcodegen%2Fpanic-in-drop-abort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63cc2bb3d07d6c726dfcdc5f95cbe5ed4760641a/src%2Ftest%2Fcodegen%2Fpanic-in-drop-abort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fpanic-in-drop-abort.rs?ref=63cc2bb3d07d6c726dfcdc5f95cbe5ed4760641a", "patch": "@@ -1,8 +1,17 @@\n-// compile-flags: -Z panic-in-drop=abort -O\n+// compile-flags: -Z panic-in-drop=abort -O -Z new-llvm-pass-manager=no\n \n // Ensure that unwinding code paths are eliminated from the output after\n // optimization.\n \n+// This test uses -Z new-llvm-pass-manager=no, because the expected optimization does not happen\n+// on targets using SEH exceptions (i.e. MSVC) anymore. The core issue is that Rust promises that\n+// the drop_in_place() function can't unwind, but implements it in a way that *can*, because we\n+// currently go out of our way to allow longjmps, which also use the unwinding mechanism on MSVC\n+// targets. We should either forbid longjmps, or not assume nounwind, making this optimization\n+// incompatible with the current behavior of running cleanuppads on longjmp unwinding.\n+\n+// CHECK-NOT: {{(call|invoke).*}}should_not_appear_in_output\n+\n #![crate_type = \"lib\"]\n use std::any::Any;\n use std::mem::forget;\n@@ -35,17 +44,13 @@ impl Drop for AssertNeverDrop {\n     }\n }\n \n-// CHECK-LABEL: normal_drop\n-// CHECK-NOT: should_not_appear_in_output\n #[no_mangle]\n pub fn normal_drop(x: ExternDrop) {\n     let guard = AssertNeverDrop;\n     drop(x);\n     forget(guard);\n }\n \n-// CHECK-LABEL: indirect_drop\n-// CHECK-NOT: should_not_appear_in_output\n #[no_mangle]\n pub fn indirect_drop(x: Box<dyn Any>) {\n     let guard = AssertNeverDrop;"}]}