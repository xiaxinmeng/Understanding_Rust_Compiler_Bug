{"sha": "4eb47ded54610300c54291aee74d5585a711e75b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlYjQ3ZGVkNTQ2MTAzMDBjNTQyOTFhZWU3NGQ1NTg1YTcxMWU3NWI=", "commit": {"author": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2020-01-15T07:13:51Z"}, "committer": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2020-01-15T07:13:51Z"}, "message": "wrap expr id into GeneratorInteriorTypeCause", "tree": {"sha": "125192603ec4ca75a6f52754265ef5168783cae9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/125192603ec4ca75a6f52754265ef5168783cae9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4eb47ded54610300c54291aee74d5585a711e75b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4eb47ded54610300c54291aee74d5585a711e75b", "html_url": "https://github.com/rust-lang/rust/commit/4eb47ded54610300c54291aee74d5585a711e75b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4eb47ded54610300c54291aee74d5585a711e75b/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ad8b9e3948fa05df0b9c2a6c71146c3af10cbc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ad8b9e3948fa05df0b9c2a6c71146c3af10cbc8", "html_url": "https://github.com/rust-lang/rust/commit/5ad8b9e3948fa05df0b9c2a6c71146c3af10cbc8"}], "stats": {"total": 41, "additions": 23, "deletions": 18}, "files": [{"sha": "c1df1149bbdfc234b9fda7db231d2e51b655b2d3", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4eb47ded54610300c54291aee74d5585a711e75b/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eb47ded54610300c54291aee74d5585a711e75b/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=4eb47ded54610300c54291aee74d5585a711e75b", "patch": "@@ -2456,7 +2456,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         let target_span = tables\n             .generator_interior_types\n             .iter()\n-            .find(|(ty::GeneratorInteriorTypeCause { ty, .. }, _)| {\n+            .find(|ty::GeneratorInteriorTypeCause { ty, .. }| {\n                 // Careful: the regions for types that appear in the\n                 // generator interior are not generally known, so we\n                 // want to erase them when comparing (and anyway,\n@@ -2479,7 +2479,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 );\n                 eq\n             })\n-            .map(|(ty::GeneratorInteriorTypeCause { span, scope_span, .. }, expr)| {\n+            .map(|ty::GeneratorInteriorTypeCause { span, scope_span, expr, .. }| {\n                 (span, source_map.span_to_snippet(*span), scope_span, expr)\n             });\n \n@@ -2585,8 +2585,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         };\n \n         // Look at the last interior type to get a span for the `.await`.\n-        let await_span =\n-            tables.generator_interior_types.iter().map(|(i, _)| i.span).last().unwrap();\n+        let await_span = tables.generator_interior_types.iter().map(|t| t.span).last().unwrap();\n         let mut span = MultiSpan::from_span(await_span);\n         span.push_span_label(\n             await_span,"}, {"sha": "ef776c88a8f7cd85859c809c59c46a90cb56a37d", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4eb47ded54610300c54291aee74d5585a711e75b/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eb47ded54610300c54291aee74d5585a711e75b/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=4eb47ded54610300c54291aee74d5585a711e75b", "patch": "@@ -315,15 +315,16 @@ pub struct ResolvedOpaqueTy<'tcx> {\n ///\n /// Here, we would store the type `T`, the span of the value `x`, and the \"scope-span\" for\n /// the scope that contains `x`.\n-#[derive(RustcEncodable, RustcDecodable, Clone, Debug, Eq, Hash, PartialEq)]\n-#[derive(HashStable, TypeFoldable)]\n+#[derive(RustcEncodable, RustcDecodable, Clone, Debug, Eq, Hash, PartialEq, HashStable)]\n pub struct GeneratorInteriorTypeCause<'tcx> {\n     /// Type of the captured binding.\n     pub ty: Ty<'tcx>,\n     /// Span of the binding that was captured.\n     pub span: Span,\n     /// Span of the scope of the captured binding.\n     pub scope_span: Option<Span>,\n+    /// Expr which the type evaluated from.\n+    pub expr: Option<hir::HirId>,\n }\n \n #[derive(RustcEncodable, RustcDecodable, Debug)]\n@@ -438,7 +439,7 @@ pub struct TypeckTables<'tcx> {\n \n     /// Stores the type, expression, span and optional scope span of all types\n     /// that are live across the yield of this generator (if a generator).\n-    pub generator_interior_types: Vec<(GeneratorInteriorTypeCause<'tcx>, Option<hir::HirId>)>,\n+    pub generator_interior_types: Vec<GeneratorInteriorTypeCause<'tcx>>,\n }\n \n impl<'tcx> TypeckTables<'tcx> {"}, {"sha": "fc02d17a50f373d9752e07d95014bfa6fcb7e954", "filename": "src/librustc_typeck/check/generator_interior.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4eb47ded54610300c54291aee74d5585a711e75b/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eb47ded54610300c54291aee74d5585a711e75b/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs?ref=4eb47ded54610300c54291aee74d5585a711e75b", "patch": "@@ -18,7 +18,6 @@ use rustc_span::Span;\n struct InteriorVisitor<'a, 'tcx> {\n     fcx: &'a FnCtxt<'a, 'tcx>,\n     types: FxHashMap<ty::GeneratorInteriorTypeCause<'tcx>, usize>,\n-    exprs: Vec<Option<hir::HirId>>,\n     region_scope_tree: &'tcx region::ScopeTree,\n     expr_count: usize,\n     kind: hir::GeneratorKind,\n@@ -98,9 +97,9 @@ impl<'a, 'tcx> InteriorVisitor<'a, 'tcx> {\n                         span: source_span,\n                         ty: &ty,\n                         scope_span,\n+                        expr: expr.map(|e| e.hir_id),\n                     })\n                     .or_insert(entries);\n-                self.exprs.push(expr.map(|e| e.hir_id));\n             }\n         } else {\n             debug!(\n@@ -138,7 +137,6 @@ pub fn resolve_interior<'a, 'tcx>(\n         expr_count: 0,\n         kind,\n         prev_unresolved_span: None,\n-        exprs: vec![],\n     };\n     intravisit::walk_body(&mut visitor, body);\n \n@@ -167,18 +165,25 @@ pub fn resolve_interior<'a, 'tcx>(\n     // which means that none of the regions inside relate to any other, even if\n     // typeck had previously found constraints that would cause them to be related.\n     let mut counter = 0;\n-    let types = fcx.tcx.fold_regions(&types, &mut false, |_, current_depth| {\n+    let fold_types: Vec<_> = types.iter().map(|(t, _)| t.ty).collect();\n+    let folded_types = fcx.tcx.fold_regions(&fold_types, &mut false, |_, current_depth| {\n         counter += 1;\n         fcx.tcx.mk_region(ty::ReLateBound(current_depth, ty::BrAnon(counter)))\n     });\n \n     // Store the generator types and spans into the tables for this generator.\n-    let interior_types =\n-        types.iter().zip(visitor.exprs).map(|(t, e)| (t.0.clone(), e)).collect::<Vec<_>>();\n-    visitor.fcx.inh.tables.borrow_mut().generator_interior_types = interior_types;\n+    let types = types\n+        .into_iter()\n+        .zip(&folded_types)\n+        .map(|((mut interior_cause, _), ty)| {\n+            interior_cause.ty = ty;\n+            interior_cause\n+        })\n+        .collect();\n+    visitor.fcx.inh.tables.borrow_mut().generator_interior_types = types;\n \n     // Extract type components\n-    let type_list = fcx.tcx.mk_type_list(types.into_iter().map(|t| (t.0).ty));\n+    let type_list = fcx.tcx.mk_type_list(folded_types.iter());\n \n     let witness = fcx.tcx.mk_generator_witness(ty::Binder::bind(type_list));\n "}, {"sha": "18d9012b3acf69410ce744320a54424a2c066471", "filename": "src/test/ui/generator/not-send-sync.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4eb47ded54610300c54291aee74d5585a711e75b/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4eb47ded54610300c54291aee74d5585a711e75b/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr?ref=4eb47ded54610300c54291aee74d5585a711e75b", "patch": "@@ -20,7 +20,7 @@ LL |     fn assert_sync<T: Sync>(_: T) {}\n LL |     assert_sync(|| {\n    |     ^^^^^^^^^^^ future returned by `main` is not `Sync`\n    |\n-   = help: within `[generator@$DIR/not-send-sync.rs:9:17: 13:6 {std::cell::Cell<i32>, ()}]`, the trait `std::marker::Sync` is not implemented for `std::cell::Cell<i32>`\n+   = help: within `[generator@$DIR/not-send-sync.rs:9:17: 13:6 {std::cell::Cell<i32>, (), ()}]`, the trait `std::marker::Sync` is not implemented for `std::cell::Cell<i32>`\n note: future is not `Sync` as this value is used across an yield\n   --> $DIR/not-send-sync.rs:12:9\n    |"}, {"sha": "15a028f60ae1154208e9c9e7ded2a4d65be10130", "filename": "src/test/ui/impl-trait/recursive-impl-trait-type-indirect.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4eb47ded54610300c54291aee74d5585a711e75b/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-indirect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4eb47ded54610300c54291aee74d5585a711e75b/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-indirect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-indirect.stderr?ref=4eb47ded54610300c54291aee74d5585a711e75b", "patch": "@@ -76,7 +76,7 @@ error[E0720]: opaque type expands to a recursive type\n LL | fn generator_capture() -> impl Sized {\n    |                           ^^^^^^^^^^ expands to a recursive type\n    |\n-   = note: expanded type is `[generator@$DIR/recursive-impl-trait-type-indirect.rs:50:5: 50:26 x:impl Sized {()}]`\n+   = note: expanded type is `[generator@$DIR/recursive-impl-trait-type-indirect.rs:50:5: 50:26 x:impl Sized {(), ()}]`\n \n error[E0720]: opaque type expands to a recursive type\n   --> $DIR/recursive-impl-trait-type-indirect.rs:53:26\n@@ -92,7 +92,7 @@ error[E0720]: opaque type expands to a recursive type\n LL | fn generator_hold() -> impl Sized {\n    |                        ^^^^^^^^^^ expands to a recursive type\n    |\n-   = note: expanded type is `[generator@$DIR/recursive-impl-trait-type-indirect.rs:58:5: 62:6 {impl Sized, ()}]`\n+   = note: expanded type is `[generator@$DIR/recursive-impl-trait-type-indirect.rs:58:5: 62:6 {impl Sized, (), ()}]`\n \n error[E0720]: opaque type expands to a recursive type\n   --> $DIR/recursive-impl-trait-type-indirect.rs:69:26"}]}