{"sha": "6da214c1e2a85b420eacec0dc36525aab586e823", "node_id": "C_kwDOAAsO6NoAKDZkYTIxNGMxZTJhODViNDIwZWFjZWMwZGMzNjUyNWFhYjU4NmU4MjM", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-06-06T12:34:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-06T12:34:57Z"}, "message": "Rollup merge of #97579 - SparrowLii:target_features, r=nagisa\n\nAvoid creating `SmallVec`s in `global_llvm_features`\n\nThis PR made a simple optimization to avoid creating extra `SmallVec`s by adjusting the use of iterator statements.\nAlso, given the very small size of `tied_target_features`, there is no need to insert each feature into the FxHashMap.", "tree": {"sha": "121c6b93843531c3ff38cc7a36b77f039cb5bf7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/121c6b93843531c3ff38cc7a36b77f039cb5bf7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6da214c1e2a85b420eacec0dc36525aab586e823", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJinfRxCRBK7hj4Ov3rIwAAQbUIAIf4Yv1QLVQPr2H8pGx8R7+E\nryheMOUOdDIJF6noaLIunQ1SSdw/XrcHTp+o8abDMl2VVLDJHEw9jdmvG30Lf0Wa\nHJDSCqaMQ/f8JFK96b1StAv3gTyOFlEH+OKzcFB73JPCg4gK/7f5KT716l38JB55\n/TL2GPJtnl1O2sE9VfNjgJsChht9bUz8wgjYTSTZ/Y3JPXc4Aba5FCU0L1E0jsv7\nrJUylhJTwlgIQ0Xuygxj53Nvzm7VxpS58setE+tqTS7AbS1wVxZ/s471tpcPybOK\njpyKMJcc9bvocxR2S5/lkdOsJ479cybRijL6qGwANd5DFlBPyflDYsCEUGYjsA8=\n=pXZ1\n-----END PGP SIGNATURE-----\n", "payload": "tree 121c6b93843531c3ff38cc7a36b77f039cb5bf7c\nparent cb787bea4613189da9f0b26406e11ee8cb39d422\nparent b3cd892ae153fb8eb10a6b386518ffca16834d8e\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1654518897 +0200\ncommitter GitHub <noreply@github.com> 1654518897 +0200\n\nRollup merge of #97579 - SparrowLii:target_features, r=nagisa\n\nAvoid creating `SmallVec`s in `global_llvm_features`\n\nThis PR made a simple optimization to avoid creating extra `SmallVec`s by adjusting the use of iterator statements.\nAlso, given the very small size of `tied_target_features`, there is no need to insert each feature into the FxHashMap.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6da214c1e2a85b420eacec0dc36525aab586e823", "html_url": "https://github.com/rust-lang/rust/commit/6da214c1e2a85b420eacec0dc36525aab586e823", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6da214c1e2a85b420eacec0dc36525aab586e823/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb787bea4613189da9f0b26406e11ee8cb39d422", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb787bea4613189da9f0b26406e11ee8cb39d422", "html_url": "https://github.com/rust-lang/rust/commit/cb787bea4613189da9f0b26406e11ee8cb39d422"}, {"sha": "b3cd892ae153fb8eb10a6b386518ffca16834d8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3cd892ae153fb8eb10a6b386518ffca16834d8e", "html_url": "https://github.com/rust-lang/rust/commit/b3cd892ae153fb8eb10a6b386518ffca16834d8e"}], "stats": {"total": 70, "additions": 37, "deletions": 33}, "files": [{"sha": "ce6c6e3215c9b430efa46ce5f1726dd1cf8403f9", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 37, "deletions": 33, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/6da214c1e2a85b420eacec0dc36525aab586e823/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6da214c1e2a85b420eacec0dc36525aab586e823/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=6da214c1e2a85b420eacec0dc36525aab586e823", "patch": "@@ -218,15 +218,17 @@ pub fn check_tied_features(\n     sess: &Session,\n     features: &FxHashMap<&str, bool>,\n ) -> Option<&'static [&'static str]> {\n-    for tied in tied_target_features(sess) {\n-        // Tied features must be set to the same value, or not set at all\n-        let mut tied_iter = tied.iter();\n-        let enabled = features.get(tied_iter.next().unwrap());\n-        if tied_iter.any(|f| enabled != features.get(f)) {\n-            return Some(tied);\n+    if !features.is_empty() {\n+        for tied in tied_target_features(sess) {\n+            // Tied features must be set to the same value, or not set at all\n+            let mut tied_iter = tied.iter();\n+            let enabled = features.get(tied_iter.next().unwrap());\n+            if tied_iter.any(|f| enabled != features.get(f)) {\n+                return Some(tied);\n+            }\n         }\n     }\n-    None\n+    return None;\n }\n \n // Used to generate cfg variables and apply features\n@@ -440,6 +442,7 @@ pub(crate) fn global_llvm_features(sess: &Session, diagnostics: bool) -> Vec<Str\n \n     // -Ctarget-features\n     let supported_features = supported_target_features(sess);\n+    let mut featsmap = FxHashMap::default();\n     let feats = sess\n         .opts\n         .cg\n@@ -485,35 +488,36 @@ pub(crate) fn global_llvm_features(sess: &Session, diagnostics: bool) -> Vec<Str\n                 }\n                 diag.emit();\n             }\n-            Some((enable_disable, feature))\n+\n+            if diagnostics {\n+                // FIXME(nagisa): figure out how to not allocate a full hashset here.\n+                featsmap.insert(feature, enable_disable == '+');\n+            }\n+\n+            // rustc-specific features do not get passed down to LLVM\u2026\n+            if RUSTC_SPECIFIC_FEATURES.contains(&feature) {\n+                return None;\n+            }\n+            // ... otherwise though we run through `to_llvm_features` when\n+            // passing requests down to LLVM. This means that all in-language\n+            // features also work on the command line instead of having two\n+            // different names when the LLVM name and the Rust name differ.\n+            Some(\n+                to_llvm_features(sess, feature)\n+                    .into_iter()\n+                    .map(move |f| format!(\"{}{}\", enable_disable, f)),\n+            )\n         })\n-        .collect::<SmallVec<[(char, &str); 8]>>();\n-\n-    if diagnostics {\n-        // FIXME(nagisa): figure out how to not allocate a full hashset here.\n-        let featmap = feats.iter().map(|&(flag, feat)| (feat, flag == '+')).collect();\n-        if let Some(f) = check_tied_features(sess, &featmap) {\n-            sess.err(&format!(\n-                \"target features {} must all be enabled or disabled together\",\n-                f.join(\", \")\n-            ));\n-        }\n+        .flatten();\n+    features.extend(feats);\n+\n+    if diagnostics && let Some(f) = check_tied_features(sess, &featsmap) {\n+        sess.err(&format!(\n+            \"target features {} must all be enabled or disabled together\",\n+            f.join(\", \")\n+        ));\n     }\n \n-    features.extend(feats.into_iter().flat_map(|(enable_disable, feature)| {\n-        // rustc-specific features do not get passed down to LLVM\u2026\n-        if RUSTC_SPECIFIC_FEATURES.contains(&feature) {\n-            return SmallVec::<[_; 2]>::new();\n-        }\n-        // ... otherwise though we run through `to_llvm_features` when\n-        // passing requests down to LLVM. This means that all in-language\n-        // features also work on the command line instead of having two\n-        // different names when the LLVM name and the Rust name differ.\n-        to_llvm_features(sess, feature)\n-            .into_iter()\n-            .map(|f| format!(\"{}{}\", enable_disable, f))\n-            .collect()\n-    }));\n     features\n }\n "}]}