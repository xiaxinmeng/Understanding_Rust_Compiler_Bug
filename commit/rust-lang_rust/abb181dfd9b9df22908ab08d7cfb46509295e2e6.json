{"sha": "abb181dfd9b9df22908ab08d7cfb46509295e2e6", "node_id": "C_kwDOAAsO6NoAKGFiYjE4MWRmZDliOWRmMjI5MDhhYjA4ZDdjZmI0NjUwOTI5NWUyZTY", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2023-03-10T14:18:58Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2023-05-02T10:32:08Z"}, "message": "make it semantic error", "tree": {"sha": "3872f7b6250f2b217082481899f4de183d12a3c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3872f7b6250f2b217082481899f4de183d12a3c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abb181dfd9b9df22908ab08d7cfb46509295e2e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abb181dfd9b9df22908ab08d7cfb46509295e2e6", "html_url": "https://github.com/rust-lang/rust/commit/abb181dfd9b9df22908ab08d7cfb46509295e2e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abb181dfd9b9df22908ab08d7cfb46509295e2e6/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf3ca5979e47774802e95623c11e71fb303e5ff3", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf3ca5979e47774802e95623c11e71fb303e5ff3", "html_url": "https://github.com/rust-lang/rust/commit/bf3ca5979e47774802e95623c11e71fb303e5ff3"}], "stats": {"total": 23, "additions": 22, "deletions": 1}, "files": [{"sha": "15a54fe13d0b78153b915778e412b270099ee9fa", "filename": "compiler/rustc_ast/src/util/literal.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abb181dfd9b9df22908ab08d7cfb46509295e2e6/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abb181dfd9b9df22908ab08d7cfb46509295e2e6/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs?ref=abb181dfd9b9df22908ab08d7cfb46509295e2e6", "patch": "@@ -8,6 +8,7 @@ use rustc_lexer::unescape::{\n };\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;\n+use std::ops::Range;\n use std::{ascii, fmt, str};\n \n // Escapes a string, represented as a symbol. Reuses the original symbol,\n@@ -38,6 +39,7 @@ pub enum LitError {\n     InvalidFloatSuffix,\n     NonDecimalFloat(u32),\n     IntTooLarge(u32),\n+    NulInCStr(Range<usize>),\n }\n \n impl LitKind {"}, {"sha": "c4578ec4af1ef99566180a03fedb80bc5e97b4ff", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/abb181dfd9b9df22908ab08d7cfb46509295e2e6/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abb181dfd9b9df22908ab08d7cfb46509295e2e6/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=abb181dfd9b9df22908ab08d7cfb46509295e2e6", "patch": "@@ -572,6 +572,7 @@ pub fn check_crate(krate: &ast::Crate, sess: &Session) {\n             }\n         };\n     }\n+    gate_all!(c_str_literals, \"`c\\\"..\\\"` literals are experimental\");\n     gate_all!(\n         if_let_guard,\n         \"`if let` guards are experimental\","}, {"sha": "050f18986154adaf693f53487b1159421c5cd679", "filename": "compiler/rustc_parse/src/lexer/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/abb181dfd9b9df22908ab08d7cfb46509295e2e6/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abb181dfd9b9df22908ab08d7cfb46509295e2e6/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs?ref=abb181dfd9b9df22908ab08d7cfb46509295e2e6", "patch": "@@ -204,6 +204,9 @@ impl<'a> StringReader<'a> {\n                 rustc_lexer::TokenKind::Literal { kind, suffix_start } => {\n                     let suffix_start = start + BytePos(suffix_start);\n                     let (kind, symbol) = self.cook_lexer_literal(start, suffix_start, kind);\n+                    if let token::LitKind::CStr | token::LitKind::CStrRaw(_) = kind {\n+                        self.sess.gated_spans.gate(sym::c_str_literals, self.mk_sp(start, self.pos));\n+                    }\n                     let suffix = if suffix_start < self.pos {\n                         let string = self.str_from(suffix_start);\n                         if string == \"_\" {"}, {"sha": "2420857e739ed95b0acb512356cf94cc45e06613", "filename": "compiler/rustc_session/messages.ftl", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abb181dfd9b9df22908ab08d7cfb46509295e2e6/compiler%2Frustc_session%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/abb181dfd9b9df22908ab08d7cfb46509295e2e6/compiler%2Frustc_session%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fmessages.ftl?ref=abb181dfd9b9df22908ab08d7cfb46509295e2e6", "patch": "@@ -93,3 +93,5 @@ session_invalid_int_literal_width = invalid width `{$width}` for integer literal\n     .help = valid widths are 8, 16, 32, 64 and 128\n \n session_optimization_fuel_exhausted = optimization-fuel-exhausted: {$msg}\n+\n+session_nul_in_c_str = null characters in C string literals are not supported"}, {"sha": "22af74eb1d9e028bd1db32479311eed84cd672aa", "filename": "compiler/rustc_session/src/errors.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/abb181dfd9b9df22908ab08d7cfb46509295e2e6/compiler%2Frustc_session%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abb181dfd9b9df22908ab08d7cfb46509295e2e6/compiler%2Frustc_session%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ferrors.rs?ref=abb181dfd9b9df22908ab08d7cfb46509295e2e6", "patch": "@@ -6,7 +6,7 @@ use rustc_ast::token;\n use rustc_ast::util::literal::LitError;\n use rustc_errors::{error_code, DiagnosticMessage, EmissionGuarantee, IntoDiagnostic, MultiSpan};\n use rustc_macros::Diagnostic;\n-use rustc_span::{Span, Symbol};\n+use rustc_span::{BytePos, Span, Symbol};\n use rustc_target::spec::{SplitDebuginfo, StackProtector, TargetTriple};\n \n #[derive(Diagnostic)]\n@@ -307,6 +307,13 @@ pub(crate) struct BinaryFloatLiteralNotSupported {\n     pub span: Span,\n }\n \n+#[derive(Diagnostic)]\n+#[diag(session_nul_in_c_str)]\n+pub(crate) struct NulInCStr {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n pub fn report_lit_error(sess: &ParseSess, err: LitError, lit: token::Lit, span: Span) {\n     // Checks if `s` looks like i32 or u1234 etc.\n     fn looks_like_width_suffix(first_chars: &[char], s: &str) -> bool {\n@@ -385,6 +392,12 @@ pub fn report_lit_error(sess: &ParseSess, err: LitError, lit: token::Lit, span:\n             };\n             sess.emit_err(IntLiteralTooLarge { span, limit });\n         }\n+        LitError::NulInCStr(range) => {\n+            let lo = BytePos(span.lo().0 + range.start as u32 + 2);\n+            let hi = BytePos(span.lo().0 + range.end as u32 + 2);\n+            let span = span.with_lo(lo).with_hi(hi);\n+            sess.emit_err(NulInCStr { span });\n+        }\n     }\n }\n "}, {"sha": "e66519f294cd08f751f03b725967b5cd60dcee1d", "filename": "tests/ui/rfcs/rfc-3348-c-string-literals/no-nuls.rs", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/abb181dfd9b9df22908ab08d7cfb46509295e2e6/tests%2Fui%2Frfcs%2Frfc-3348-c-string-literals%2Fno-nuls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abb181dfd9b9df22908ab08d7cfb46509295e2e6/tests%2Fui%2Frfcs%2Frfc-3348-c-string-literals%2Fno-nuls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfcs%2Frfc-3348-c-string-literals%2Fno-nuls.rs?ref=abb181dfd9b9df22908ab08d7cfb46509295e2e6"}, {"sha": "ff9006f6f97f1be7eed18d188e8c30ba2075743e", "filename": "tests/ui/rfcs/rfc-3348-c-string-literals/no-nuls.stderr", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/abb181dfd9b9df22908ab08d7cfb46509295e2e6/tests%2Fui%2Frfcs%2Frfc-3348-c-string-literals%2Fno-nuls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abb181dfd9b9df22908ab08d7cfb46509295e2e6/tests%2Fui%2Frfcs%2Frfc-3348-c-string-literals%2Fno-nuls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfcs%2Frfc-3348-c-string-literals%2Fno-nuls.stderr?ref=abb181dfd9b9df22908ab08d7cfb46509295e2e6"}]}