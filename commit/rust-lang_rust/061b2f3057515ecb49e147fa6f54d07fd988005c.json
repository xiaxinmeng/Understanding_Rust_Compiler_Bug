{"sha": "061b2f3057515ecb49e147fa6f54d07fd988005c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2MWIyZjMwNTc1MTVlY2I0OWUxNDdmYTZmNTRkMDdmZDk4ODAwNWM=", "commit": {"author": {"name": "Josh Holmer", "email": "jholmer.in@gmail.com", "date": "2018-08-31T22:26:04Z"}, "committer": {"name": "Josh Holmer", "email": "jholmer.in@gmail.com", "date": "2018-09-04T03:29:44Z"}, "message": "Apply applicability", "tree": {"sha": "769871051f873dbf2affb421d0b6119664687d53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/769871051f873dbf2affb421d0b6119664687d53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/061b2f3057515ecb49e147fa6f54d07fd988005c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/061b2f3057515ecb49e147fa6f54d07fd988005c", "html_url": "https://github.com/rust-lang/rust/commit/061b2f3057515ecb49e147fa6f54d07fd988005c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/061b2f3057515ecb49e147fa6f54d07fd988005c/comments", "author": {"login": "shssoichiro", "id": 5951392, "node_id": "MDQ6VXNlcjU5NTEzOTI=", "avatar_url": "https://avatars.githubusercontent.com/u/5951392?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shssoichiro", "html_url": "https://github.com/shssoichiro", "followers_url": "https://api.github.com/users/shssoichiro/followers", "following_url": "https://api.github.com/users/shssoichiro/following{/other_user}", "gists_url": "https://api.github.com/users/shssoichiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/shssoichiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shssoichiro/subscriptions", "organizations_url": "https://api.github.com/users/shssoichiro/orgs", "repos_url": "https://api.github.com/users/shssoichiro/repos", "events_url": "https://api.github.com/users/shssoichiro/events{/privacy}", "received_events_url": "https://api.github.com/users/shssoichiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "shssoichiro", "id": 5951392, "node_id": "MDQ6VXNlcjU5NTEzOTI=", "avatar_url": "https://avatars.githubusercontent.com/u/5951392?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shssoichiro", "html_url": "https://github.com/shssoichiro", "followers_url": "https://api.github.com/users/shssoichiro/followers", "following_url": "https://api.github.com/users/shssoichiro/following{/other_user}", "gists_url": "https://api.github.com/users/shssoichiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/shssoichiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shssoichiro/subscriptions", "organizations_url": "https://api.github.com/users/shssoichiro/orgs", "repos_url": "https://api.github.com/users/shssoichiro/repos", "events_url": "https://api.github.com/users/shssoichiro/events{/privacy}", "received_events_url": "https://api.github.com/users/shssoichiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfed9751bdcfb158c566819541db958162b69643", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfed9751bdcfb158c566819541db958162b69643", "html_url": "https://github.com/rust-lang/rust/commit/dfed9751bdcfb158c566819541db958162b69643"}], "stats": {"total": 76, "additions": 41, "deletions": 35}, "files": [{"sha": "0c737d9480630be471ddfc641e7e37ff6f365fbc", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 33, "deletions": 27, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/061b2f3057515ecb49e147fa6f54d07fd988005c/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/061b2f3057515ecb49e147fa6f54d07fd988005c/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=061b2f3057515ecb49e147fa6f54d07fd988005c", "patch": "@@ -14,6 +14,7 @@ use rustc::middle::mem_categorization::Categorization;\n use rustc::middle::mem_categorization::cmt_;\n use rustc::ty::{self, Ty};\n use rustc::ty::subst::Subst;\n+use rustc_errors::Applicability;\n use std::collections::{HashMap, HashSet};\n use std::iter::{once, Iterator};\n use syntax::ast;\n@@ -2267,6 +2268,8 @@ impl<'a, 'tcx> Visitor<'tcx> for VarCollectorVisitor<'a, 'tcx> {\n     }\n }\n \n+const NEEDLESS_COLLECT_MSG: &str = \"avoid using `collect()` when not needed\";\n+\n fn check_needless_collect<'a, 'tcx>(expr: &'tcx Expr, cx: &LateContext<'a, 'tcx>) {\n     if let ExprKind::MethodCall(ref method, _, ref args) = expr.node {\n         if let ExprKind::MethodCall(ref chain_method, _, _) = args[0].node {\n@@ -2281,38 +2284,41 @@ fn check_needless_collect<'a, 'tcx>(expr: &'tcx Expr, cx: &LateContext<'a, 'tcx>\n                         match_type(cx, ty, &paths::BTREEMAP) ||\n                         match_type(cx, ty, &paths::HASHMAP) {\n                         if method.ident.name == \"len\" {\n-                            span_lint_and_sugg(\n-                                cx,\n-                                NEEDLESS_COLLECT,\n-                                shorten_needless_collect_span(expr),\n-                                \"you are collecting an iterator to check its length\",\n-                                \"consider replacing with\",\n-                                \".count()\".to_string(),\n-                            );\n+                            let span = shorten_needless_collect_span(expr);\n+                            span_lint_and_then(cx, NEEDLESS_COLLECT, span, NEEDLESS_COLLECT_MSG, |db| {\n+                                db.span_suggestion_with_applicability(\n+                                    span,\n+                                    \"replace with\",\n+                                    \".count()\".to_string(),\n+                                    Applicability::MachineApplicable,\n+                                );\n+                            });\n                         }\n                         if method.ident.name == \"is_empty\" {\n-                            span_lint_and_sugg(\n-                                cx,\n-                                NEEDLESS_COLLECT,\n-                                shorten_needless_collect_span(expr),\n-                                \"you are collecting an iterator to check if it is empty\",\n-                                \"consider replacing with\",\n-                                \".next().is_none()\".to_string(),\n-                            );\n+                            let span = shorten_needless_collect_span(expr);\n+                            span_lint_and_then(cx, NEEDLESS_COLLECT, span, NEEDLESS_COLLECT_MSG, |db| {\n+                                db.span_suggestion_with_applicability(\n+                                    span,\n+                                    \"replace with\",\n+                                    \".next().is_none()\".to_string(),\n+                                    Applicability::MachineApplicable,\n+                                );\n+                            });\n                         }\n                         if method.ident.name == \"contains\" {\n                             let contains_arg = snippet(cx, args[1].span, \"??\");\n-                            span_lint_and_sugg(\n-                                cx,\n-                                NEEDLESS_COLLECT,\n-                                shorten_needless_collect_span(expr),\n-                                \"you are collecting an iterator to check if contains an element\",\n-                                \"consider replacing with\",\n-                                format!(\n-                                    \".any(|&x| x == {})\",\n-                                    if contains_arg.starts_with('&') { &contains_arg[1..] } else { &contains_arg }\n-                                ),\n-                            );\n+                            let span = shorten_needless_collect_span(expr);\n+                            span_lint_and_then(cx, NEEDLESS_COLLECT, span, NEEDLESS_COLLECT_MSG, |db| {\n+                                db.span_suggestion_with_applicability(\n+                                    span,\n+                                    \"replace with\",\n+                                    format!(\n+                                        \".any(|&x| x == {})\",\n+                                        if contains_arg.starts_with('&') { &contains_arg[1..] } else { &contains_arg }\n+                                    ),\n+                                    Applicability::MachineApplicable,\n+                                );\n+                            });\n                         }\n                     }\n                 }"}, {"sha": "c2dd0879fb890f18e61fdda606663cfc5cb2c8f4", "filename": "tests/ui/needless_collect.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/061b2f3057515ecb49e147fa6f54d07fd988005c/tests%2Fui%2Fneedless_collect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/061b2f3057515ecb49e147fa6f54d07fd988005c/tests%2Fui%2Fneedless_collect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_collect.stderr?ref=061b2f3057515ecb49e147fa6f54d07fd988005c", "patch": "@@ -1,28 +1,28 @@\n-error: you are collecting an iterator to check its length\n+error: avoid using `collect()` when not needed\n  --> $DIR/needless_collect.rs:7:28\n   |\n 7 |     let len = sample.iter().collect::<Vec<_>>().len();\n-  |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider replacing with: `.count()`\n+  |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `.count()`\n   |\n   = note: `-D needless-collect` implied by `-D warnings`\n \n-error: you are collecting an iterator to check if it is empty\n+error: avoid using `collect()` when not needed\n  --> $DIR/needless_collect.rs:8:21\n   |\n 8 |     if sample.iter().collect::<Vec<_>>().is_empty() {\n-  |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider replacing with: `.next().is_none()`\n+  |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `.next().is_none()`\n \n-error: you are collecting an iterator to check if contains an element\n+error: avoid using `collect()` when not needed\n   --> $DIR/needless_collect.rs:11:27\n    |\n 11 |     sample.iter().cloned().collect::<Vec<_>>().contains(&1);\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider replacing with: `.any(|&x| x == 1)`\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `.any(|&x| x == 1)`\n \n-error: you are collecting an iterator to check its length\n+error: avoid using `collect()` when not needed\n   --> $DIR/needless_collect.rs:12:34\n    |\n 12 |     sample.iter().map(|x| (x, x)).collect::<HashMap<_, _>>().len();\n-   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider replacing with: `.count()`\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `.count()`\n \n error: aborting due to 4 previous errors\n "}]}