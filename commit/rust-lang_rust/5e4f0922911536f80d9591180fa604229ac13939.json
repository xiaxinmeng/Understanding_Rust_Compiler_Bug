{"sha": "5e4f0922911536f80d9591180fa604229ac13939", "node_id": "C_kwDOAAsO6NoAKDVlNGYwOTIyOTExNTM2ZjgwZDk1OTExODBmYTYwNDIyOWFjMTM5Mzk", "commit": {"author": {"name": "Alex Macleod", "email": "alex@macleod.io", "date": "2022-05-09T13:06:46Z"}, "committer": {"name": "Alex Macleod", "email": "alex@macleod.io", "date": "2022-05-09T13:06:46Z"}, "message": "use let chains in bit_mask.rs", "tree": {"sha": "8ff40736d0398ed5c17c2c00b57b4838efb230d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ff40736d0398ed5c17c2c00b57b4838efb230d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e4f0922911536f80d9591180fa604229ac13939", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e4f0922911536f80d9591180fa604229ac13939", "html_url": "https://github.com/rust-lang/rust/commit/5e4f0922911536f80d9591180fa604229ac13939", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e4f0922911536f80d9591180fa604229ac13939/comments", "author": {"login": "Alexendoo", "id": 1830331, "node_id": "MDQ6VXNlcjE4MzAzMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1830331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alexendoo", "html_url": "https://github.com/Alexendoo", "followers_url": "https://api.github.com/users/Alexendoo/followers", "following_url": "https://api.github.com/users/Alexendoo/following{/other_user}", "gists_url": "https://api.github.com/users/Alexendoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alexendoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alexendoo/subscriptions", "organizations_url": "https://api.github.com/users/Alexendoo/orgs", "repos_url": "https://api.github.com/users/Alexendoo/repos", "events_url": "https://api.github.com/users/Alexendoo/events{/privacy}", "received_events_url": "https://api.github.com/users/Alexendoo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Alexendoo", "id": 1830331, "node_id": "MDQ6VXNlcjE4MzAzMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1830331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alexendoo", "html_url": "https://github.com/Alexendoo", "followers_url": "https://api.github.com/users/Alexendoo/followers", "following_url": "https://api.github.com/users/Alexendoo/following{/other_user}", "gists_url": "https://api.github.com/users/Alexendoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alexendoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alexendoo/subscriptions", "organizations_url": "https://api.github.com/users/Alexendoo/orgs", "repos_url": "https://api.github.com/users/Alexendoo/repos", "events_url": "https://api.github.com/users/Alexendoo/events{/privacy}", "received_events_url": "https://api.github.com/users/Alexendoo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4667198d4f6a0fd4c2cccd0ddec4e5afbe291401", "url": "https://api.github.com/repos/rust-lang/rust/commits/4667198d4f6a0fd4c2cccd0ddec4e5afbe291401", "html_url": "https://github.com/rust-lang/rust/commit/4667198d4f6a0fd4c2cccd0ddec4e5afbe291401"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "dc7e400fdc28156ed88bea412dcc8b92158ef654", "filename": "clippy_lints/src/bit_mask.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/5e4f0922911536f80d9591180fa604229ac13939/clippy_lints%2Fsrc%2Fbit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e4f0922911536f80d9591180fa604229ac13939/clippy_lints%2Fsrc%2Fbit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbit_mask.rs?ref=5e4f0922911536f80d9591180fa604229ac13939", "patch": "@@ -1,7 +1,6 @@\n use clippy_utils::consts::{constant, Constant};\n use clippy_utils::diagnostics::{span_lint, span_lint_and_then};\n use clippy_utils::sugg::Sugg;\n-use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, Expr, ExprKind};\n@@ -130,32 +129,33 @@ impl<'tcx> LateLintPass<'tcx> for BitMask {\n                 }\n             }\n         }\n-        if_chain! {\n-            if let ExprKind::Binary(op, left, right) = &e.kind;\n-            if BinOpKind::Eq == op.node;\n-            if let ExprKind::Binary(op1, left1, right1) = &left.kind;\n-            if BinOpKind::BitAnd == op1.node;\n-            if let ExprKind::Lit(lit) = &right1.kind;\n-            if let LitKind::Int(n, _) = lit.node;\n-            if let ExprKind::Lit(lit1) = &right.kind;\n-            if let LitKind::Int(0, _) = lit1.node;\n-            if n.leading_zeros() == n.count_zeros();\n-            if n > u128::from(self.verbose_bit_mask_threshold);\n-            then {\n-                span_lint_and_then(cx,\n-                                   VERBOSE_BIT_MASK,\n-                                   e.span,\n-                                   \"bit mask could be simplified with a call to `trailing_zeros`\",\n-                                   |diag| {\n+\n+        if let ExprKind::Binary(op, left, right) = &e.kind\n+            && BinOpKind::Eq == op.node\n+            && let ExprKind::Binary(op1, left1, right1) = &left.kind\n+            && BinOpKind::BitAnd == op1.node\n+            && let ExprKind::Lit(lit) = &right1.kind\n+            && let LitKind::Int(n, _) = lit.node\n+            && let ExprKind::Lit(lit1) = &right.kind\n+            && let LitKind::Int(0, _) = lit1.node\n+            && n.leading_zeros() == n.count_zeros()\n+            && n > u128::from(self.verbose_bit_mask_threshold)\n+        {\n+            span_lint_and_then(\n+                cx,\n+                VERBOSE_BIT_MASK,\n+                e.span,\n+                \"bit mask could be simplified with a call to `trailing_zeros`\",\n+                |diag| {\n                     let sugg = Sugg::hir(cx, left1, \"...\").maybe_par();\n                     diag.span_suggestion(\n                         e.span,\n                         \"try\",\n                         format!(\"{}.trailing_zeros() >= {}\", sugg, n.count_ones()),\n                         Applicability::MaybeIncorrect,\n                     );\n-                });\n-            }\n+                },\n+            );\n         }\n     }\n }"}]}