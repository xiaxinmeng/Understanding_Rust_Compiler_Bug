{"sha": "2f5c0f59a96612667ca6aeb40b6e40259f861e7e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmNWMwZjU5YTk2NjEyNjY3Y2E2YWViNDBiNmU0MDI1OWY4NjFlN2U=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-04-12T13:34:42Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-04-29T17:33:50Z"}, "message": "emit err when using trait objects in pat", "tree": {"sha": "cbc5e84c2db906536c65078a32e576a072611a58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbc5e84c2db906536c65078a32e576a072611a58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f5c0f59a96612667ca6aeb40b6e40259f861e7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f5c0f59a96612667ca6aeb40b6e40259f861e7e", "html_url": "https://github.com/rust-lang/rust/commit/2f5c0f59a96612667ca6aeb40b6e40259f861e7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f5c0f59a96612667ca6aeb40b6e40259f861e7e/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f34b82de203a01b7bb1afd57714886a65dbea8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f34b82de203a01b7bb1afd57714886a65dbea8f", "html_url": "https://github.com/rust-lang/rust/commit/9f34b82de203a01b7bb1afd57714886a65dbea8f"}], "stats": {"total": 50, "additions": 33, "deletions": 17}, "files": [{"sha": "4cc6a27a6da93b5f5bd7d43c8b47b34a6db0944c", "filename": "src/librustc_mir_build/hair/pattern/const_to_pat.rs", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2f5c0f59a96612667ca6aeb40b6e40259f861e7e/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f5c0f59a96612667ca6aeb40b6e40259f861e7e/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fconst_to_pat.rs?ref=2f5c0f59a96612667ca6aeb40b6e40259f861e7e", "patch": "@@ -111,23 +111,21 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n             }\n \n             if let Some(non_sm_ty) = structural {\n-                let adt_def = match non_sm_ty {\n-                    traits::NonStructuralMatchTy::Adt(adt_def) => adt_def,\n-                    traits::NonStructuralMatchTy::Param => {\n-                        bug!(\"use of constant whose type is a parameter inside a pattern\")\n+                let msg = match non_sm_ty {\n+                    traits::NonStructuralMatchTy::Adt(adt_def) => {\n+                        let path = self.tcx().def_path_str(adt_def.did);\n+                        format!(\n+                            \"to use a constant of type `{}` in a pattern, \\\n+                             `{}` must be annotated with `#[derive(PartialEq, Eq)]`\",\n+                            path, path,\n+                        )\n                     }\n                     traits::NonStructuralMatchTy::Dynamic => {\n-                        bug!(\"use of a trait object inside a pattern\")\n+                        format!(\"trait objects cannot be used in patterns\")\n+                    }\n+                    traits::NonStructuralMatchTy::Param => {\n+                        bug!(\"use of constant whose type is a parameter inside a pattern\")\n                     }\n-                };\n-                let path = self.tcx().def_path_str(adt_def.did);\n-\n-                let make_msg = || -> String {\n-                    format!(\n-                        \"to use a constant of type `{}` in a pattern, \\\n-                         `{}` must be annotated with `#[derive(PartialEq, Eq)]`\",\n-                        path, path,\n-                    )\n                 };\n \n                 // double-check there even *is* a semantic `PartialEq` to dispatch to.\n@@ -158,13 +156,13 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n \n                 if !ty_is_partial_eq {\n                     // span_fatal avoids ICE from resolution of non-existent method (rare case).\n-                    self.tcx().sess.span_fatal(self.span, &make_msg());\n+                    self.tcx().sess.span_fatal(self.span, &msg);\n                 } else if mir_structural_match_violation {\n                     self.tcx().struct_span_lint_hir(\n                         lint::builtin::INDIRECT_STRUCTURAL_MATCH,\n                         self.id,\n                         self.span,\n-                        |lint| lint.build(&make_msg()).emit(),\n+                        |lint| lint.build(&msg).emit(),\n                     );\n                 } else {\n                     debug!("}, {"sha": "c3db6c65a8f4c7e6441cc49f71c32c0ec6615f38", "filename": "src/test/ui/const-generics/issues/issue-63322-forbid-dyn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f5c0f59a96612667ca6aeb40b6e40259f861e7e/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f5c0f59a96612667ca6aeb40b6e40259f861e7e/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.stderr?ref=2f5c0f59a96612667ca6aeb40b6e40259f861e7e", "patch": "@@ -12,6 +12,6 @@ error[E0741]: `&'static (dyn A + 'static)` must be annotated with `#[derive(Part\n LL | fn test<const T: &'static dyn A>() {\n    |                  ^^^^^^^^^^^^^^ `&'static (dyn A + 'static)` doesn't derive both `PartialEq` and `Eq`\n \n-error: aborting due to previous error\n+error: aborting due to previous error; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0741`."}, {"sha": "a9b2699cafdc4956c95720b3554253ea69227dca", "filename": "src/test/ui/match/issue-70972-dyn-trait.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2f5c0f59a96612667ca6aeb40b6e40259f861e7e/src%2Ftest%2Fui%2Fmatch%2Fissue-70972-dyn-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f5c0f59a96612667ca6aeb40b6e40259f861e7e/src%2Ftest%2Fui%2Fmatch%2Fissue-70972-dyn-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fissue-70972-dyn-trait.rs?ref=2f5c0f59a96612667ca6aeb40b6e40259f861e7e", "patch": "@@ -0,0 +1,10 @@\n+const F: &'static dyn Send = &7u32;\n+\n+fn main() {\n+    let a: &dyn Send = &7u32;\n+    match a {\n+        F => panic!(),\n+        //~^ ERROR trait objects cannot be used in patterns\n+        _ => {}\n+    }\n+}"}, {"sha": "a4e827357de6bdfec3278c0283c295c794785f6c", "filename": "src/test/ui/match/issue-70972-dyn-trait.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2f5c0f59a96612667ca6aeb40b6e40259f861e7e/src%2Ftest%2Fui%2Fmatch%2Fissue-70972-dyn-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f5c0f59a96612667ca6aeb40b6e40259f861e7e/src%2Ftest%2Fui%2Fmatch%2Fissue-70972-dyn-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fissue-70972-dyn-trait.stderr?ref=2f5c0f59a96612667ca6aeb40b6e40259f861e7e", "patch": "@@ -0,0 +1,8 @@\n+error: trait objects cannot be used in patterns\n+  --> $DIR/issue-70972-dyn-trait.rs:6:9\n+   |\n+LL |         F => panic!(),\n+   |         ^\n+\n+error: aborting due to previous error\n+"}]}