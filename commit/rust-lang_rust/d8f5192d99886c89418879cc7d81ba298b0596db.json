{"sha": "d8f5192d99886c89418879cc7d81ba298b0596db", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4ZjUxOTJkOTk4ODZjODk0MTg4NzljYzdkODFiYTI5OGIwNTk2ZGI=", "commit": {"author": {"name": "adamrk", "email": "ark.email@gmail.com", "date": "2020-06-20T09:53:55Z"}, "committer": {"name": "adamrk", "email": "ark.email@gmail.com", "date": "2020-06-20T09:53:55Z"}, "message": "Get Output assoc type by name", "tree": {"sha": "f737bb1f7e9f26be44a1a9cde8dcbb9858533740", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f737bb1f7e9f26be44a1a9cde8dcbb9858533740"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8f5192d99886c89418879cc7d81ba298b0596db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8f5192d99886c89418879cc7d81ba298b0596db", "html_url": "https://github.com/rust-lang/rust/commit/d8f5192d99886c89418879cc7d81ba298b0596db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8f5192d99886c89418879cc7d81ba298b0596db/comments", "author": {"login": "adamrk", "id": 16367467, "node_id": "MDQ6VXNlcjE2MzY3NDY3", "avatar_url": "https://avatars.githubusercontent.com/u/16367467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamrk", "html_url": "https://github.com/adamrk", "followers_url": "https://api.github.com/users/adamrk/followers", "following_url": "https://api.github.com/users/adamrk/following{/other_user}", "gists_url": "https://api.github.com/users/adamrk/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamrk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamrk/subscriptions", "organizations_url": "https://api.github.com/users/adamrk/orgs", "repos_url": "https://api.github.com/users/adamrk/repos", "events_url": "https://api.github.com/users/adamrk/events{/privacy}", "received_events_url": "https://api.github.com/users/adamrk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "adamrk", "id": 16367467, "node_id": "MDQ6VXNlcjE2MzY3NDY3", "avatar_url": "https://avatars.githubusercontent.com/u/16367467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamrk", "html_url": "https://github.com/adamrk", "followers_url": "https://api.github.com/users/adamrk/followers", "following_url": "https://api.github.com/users/adamrk/following{/other_user}", "gists_url": "https://api.github.com/users/adamrk/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamrk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamrk/subscriptions", "organizations_url": "https://api.github.com/users/adamrk/orgs", "repos_url": "https://api.github.com/users/adamrk/repos", "events_url": "https://api.github.com/users/adamrk/events{/privacy}", "received_events_url": "https://api.github.com/users/adamrk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f07338bae2e4209d5e47e69f131bfa9efc56c890", "url": "https://api.github.com/repos/rust-lang/rust/commits/f07338bae2e4209d5e47e69f131bfa9efc56c890", "html_url": "https://github.com/rust-lang/rust/commit/f07338bae2e4209d5e47e69f131bfa9efc56c890"}], "stats": {"total": 16, "additions": 3, "deletions": 13}, "files": [{"sha": "171330274f8e6d3689fab34ea8449f2d66a9564e", "filename": "crates/ra_hir_ty/src/infer/expr.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d8f5192d99886c89418879cc7d81ba298b0596db/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8f5192d99886c89418879cc7d81ba298b0596db/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=d8f5192d99886c89418879cc7d81ba298b0596db", "patch": "@@ -10,7 +10,7 @@ use hir_def::{\n     resolver::resolver_for_expr,\n     AdtId, AssocContainerId, FieldId, Lookup,\n };\n-use hir_expand::name::Name;\n+use hir_expand::name::{name, Name};\n use ra_syntax::ast::RangeOp;\n \n use crate::{\n@@ -70,18 +70,8 @@ impl<'a> InferenceContext<'a> {\n             .filter_map(|f| f.get_id(self.db, krate))\n             .collect();\n         let fn_once_trait = FnTrait::FnOnce.get_id(self.db, krate)?;\n-        let output_assoc_type = match self\n-            .db\n-            .trait_data(fn_once_trait)\n-            .associated_types()\n-            .collect::<Vec<hir_def::TypeAliasId>>()\n-            .as_slice()\n-        {\n-            [output] => *output,\n-            _ => {\n-                return None;\n-            }\n-        };\n+        let output_assoc_type =\n+            self.db.trait_data(fn_once_trait).associated_type_by_name(&name![Output])?;\n         for fn_trait in fn_traits {\n             let generic_params = generics(self.db.upcast(), fn_trait.into());\n             if generic_params.len() != 2 {"}]}