{"sha": "822a35ab9fe529d3ca02bc4ea8c1337dcc6f45b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyMmEzNWFiOWZlNTI5ZDNjYTAyYmM0ZWE4YzEzMzdkY2M2ZjQ1YjY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-01-03T14:54:16Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-01-03T14:54:16Z"}, "message": "Merge pull request #539 from mcarton/small-fix\n\nSmall fix", "tree": {"sha": "39f3c0166d5bd31210a6ad24f99dfadc03bf3384", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39f3c0166d5bd31210a6ad24f99dfadc03bf3384"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/822a35ab9fe529d3ca02bc4ea8c1337dcc6f45b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/822a35ab9fe529d3ca02bc4ea8c1337dcc6f45b6", "html_url": "https://github.com/rust-lang/rust/commit/822a35ab9fe529d3ca02bc4ea8c1337dcc6f45b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/822a35ab9fe529d3ca02bc4ea8c1337dcc6f45b6/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3ab0fb6e7c8a99b02355fec1708fd197156fbe4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3ab0fb6e7c8a99b02355fec1708fd197156fbe4", "html_url": "https://github.com/rust-lang/rust/commit/e3ab0fb6e7c8a99b02355fec1708fd197156fbe4"}, {"sha": "bb597179158d8a2d36ac9f5cf0083b5a680c9d85", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb597179158d8a2d36ac9f5cf0083b5a680c9d85", "html_url": "https://github.com/rust-lang/rust/commit/bb597179158d8a2d36ac9f5cf0083b5a680c9d85"}], "stats": {"total": 68, "additions": 60, "deletions": 8}, "files": [{"sha": "2aa3b040e55ac58c543c264f45e4ebc66e689286", "filename": "src/methods.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/822a35ab9fe529d3ca02bc4ea8c1337dcc6f45b6/src%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/822a35ab9fe529d3ca02bc4ea8c1337dcc6f45b6/src%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmethods.rs?ref=822a35ab9fe529d3ca02bc4ea8c1337dcc6f45b6", "patch": "@@ -173,8 +173,8 @@ declare_lint!(pub SEARCH_IS_SOME, Warn,\n impl LintPass for MethodsPass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(OPTION_UNWRAP_USED, RESULT_UNWRAP_USED, STR_TO_STRING, STRING_TO_STRING,\n-                    SHOULD_IMPLEMENT_TRAIT, WRONG_SELF_CONVENTION, OK_EXPECT, OPTION_MAP_UNWRAP_OR,\n-                    OPTION_MAP_UNWRAP_OR_ELSE)\n+                    SHOULD_IMPLEMENT_TRAIT, WRONG_SELF_CONVENTION, WRONG_PUB_SELF_CONVENTION,\n+                    OK_EXPECT, OPTION_MAP_UNWRAP_OR, OPTION_MAP_UNWRAP_OR_ELSE)\n     }\n }\n \n@@ -258,14 +258,21 @@ impl LateLintPass for MethodsPass {\n fn lint_unwrap(cx: &LateContext, expr: &Expr, unwrap_args: &MethodArgs) {\n     let (obj_ty, _) = walk_ptrs_ty_depth(cx.tcx.expr_ty(&unwrap_args[0]));\n \n-    if match_type(cx, obj_ty, &OPTION_PATH) {\n-        span_lint(cx, OPTION_UNWRAP_USED, expr.span,\n-                  \"used unwrap() on an Option value. If you don't want to handle the None case \\\n-                   gracefully, consider using expect() to provide a better panic message\");\n+    let mess = if match_type(cx, obj_ty, &OPTION_PATH) {\n+        Some((OPTION_UNWRAP_USED, \"an Option\", \"None\"))\n     }\n     else if match_type(cx, obj_ty, &RESULT_PATH) {\n-        span_lint(cx, RESULT_UNWRAP_USED, expr.span,\n-                  \"used unwrap() on a Result value. Graceful handling of Err values is preferred\");\n+        Some((RESULT_UNWRAP_USED, \"a Result\", \"Err\"))\n+    }\n+    else {\n+        None\n+    };\n+\n+    if let Some((lint, kind, none_value)) = mess {\n+        span_lint(cx, lint, expr.span,\n+                  &format!(\"used unwrap() on {} value. If you don't want to handle the {} \\\n+                            case gracefully, consider using expect() to provide a better panic\n+                            message\", kind, none_value));\n     }\n }\n "}, {"sha": null, "filename": "tests/compile-fail/array_indexing.rs", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/822a35ab9fe529d3ca02bc4ea8c1337dcc6f45b6/tests%2Fcompile-fail%2Farray_indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/822a35ab9fe529d3ca02bc4ea8c1337dcc6f45b6/tests%2Fcompile-fail%2Farray_indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Farray_indexing.rs?ref=822a35ab9fe529d3ca02bc4ea8c1337dcc6f45b6"}, {"sha": "ca896a6b94b830184913268ad2331beb1c50838d", "filename": "tests/compile-fail/wrong_self_convention.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/822a35ab9fe529d3ca02bc4ea8c1337dcc6f45b6/tests%2Fcompile-fail%2Fwrong_self_convention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/822a35ab9fe529d3ca02bc4ea8c1337dcc6f45b6/tests%2Fcompile-fail%2Fwrong_self_convention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fwrong_self_convention.rs?ref=822a35ab9fe529d3ca02bc4ea8c1337dcc6f45b6", "patch": "@@ -0,0 +1,45 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#![deny(wrong_self_convention)]\n+#![deny(wrong_pub_self_convention)]\n+#![allow(dead_code)]\n+\n+fn main() {}\n+\n+#[derive(Clone, Copy)]\n+struct Foo;\n+\n+impl Foo {\n+\n+    fn as_i32(self) {}\n+    fn into_i32(self) {}\n+    fn is_i32(self) {}\n+    fn to_i32(self) {}\n+    fn from_i32(self) {} //~ERROR: methods called `from_*` usually take no self\n+\n+    pub fn as_i64(self) {}\n+    pub fn into_i64(self) {}\n+    pub fn is_i64(self) {}\n+    pub fn to_i64(self) {}\n+    pub fn from_i64(self) {} //~ERROR: methods called `from_*` usually take no self\n+\n+}\n+\n+struct Bar;\n+\n+impl Bar {\n+\n+    fn as_i32(self) {} //~ERROR: methods called `as_*` usually take self by reference\n+    fn into_i32(&self) {} //~ERROR: methods called `into_*` usually take self by value\n+    fn is_i32(self) {} //~ERROR: methods called `is_*` usually take self by reference\n+    fn to_i32(self) {} //~ERROR: methods called `to_*` usually take self by reference\n+    fn from_i32(self) {} //~ERROR: methods called `from_*` usually take no self\n+\n+    pub fn as_i64(self) {} //~ERROR: methods called `as_*` usually take self by reference\n+    pub fn into_i64(&self) {} //~ERROR: methods called `into_*` usually take self by value\n+    pub fn is_i64(self) {} //~ERROR: methods called `is_*` usually take self by reference\n+    pub fn to_i64(self) {} //~ERROR: methods called `to_*` usually take self by reference\n+    pub fn from_i64(self) {} //~ERROR: methods called `from_*` usually take no self\n+\n+}"}]}