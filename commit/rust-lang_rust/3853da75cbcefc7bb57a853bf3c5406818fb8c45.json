{"sha": "3853da75cbcefc7bb57a853bf3c5406818fb8c45", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4NTNkYTc1Y2JjZWZjN2JiNTdhODUzYmYzYzU0MDY4MThmYjhjNDU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-11T13:03:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-11T13:03:49Z"}, "message": "Rollup merge of #69850 - RalfJung:panic-bounds-check, r=eddyb\n\npanic_bounds_check: use caller_location, like PanicFnLangItem\n\nThe `PanicFnLangItem` got switched to using `#[caller_location]` at some point, but `PanicBoundsCheckFnLangItem` was kept in the old style. For consistency, switch that one over to use `#[caller_location]` as well.\n\nThis is also helpful for Miri as it means the `assert_panic` machine hook never needs to know the current `Span`.", "tree": {"sha": "cc10dbb90f7d68568e6cc4318a2f140bbac4e62d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc10dbb90f7d68568e6cc4318a2f140bbac4e62d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3853da75cbcefc7bb57a853bf3c5406818fb8c45", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeaOG1CRBK7hj4Ov3rIwAAdHIIAK3A1jspcfQQedsD0XJhQSLm\nNEY3VyuGcexvSOkd8HjbR24ulFfLmb3UJuojDsQqYEzEPKwAS78wS1ik8bd48p80\ntNBRLMtZE1H1RtRNARxtTVh/pOoz2SJ35EGQ0GgeZiCSi6vaYlno+i4FEzAMo1f9\nqPH1QKaakyJ0NvE5vWzpEzEjgQiyMTazjIi1j36Zbo9kdy7YsbyV6w4+M6ZJ8HFv\nxg992Y7joMCnL1qb6G4H3larnQOogajR3bn6YS4+AVuMDqQ02Kdnc6OPAPCKcX6L\nIxm9x981Cy52uoBRd+z+TEknoLObwv5B2CfY+AcDrgv+0XxWuGjLXc4ZZIkaATc=\n=euH/\n-----END PGP SIGNATURE-----\n", "payload": "tree cc10dbb90f7d68568e6cc4318a2f140bbac4e62d\nparent 080d41391d84ccf61b1b3667e731981519f9d5b7\nparent 0b2329da9a9a61dc70f9e607628977302f8144b4\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1583931829 +0100\ncommitter GitHub <noreply@github.com> 1583931829 +0100\n\nRollup merge of #69850 - RalfJung:panic-bounds-check, r=eddyb\n\npanic_bounds_check: use caller_location, like PanicFnLangItem\n\nThe `PanicFnLangItem` got switched to using `#[caller_location]` at some point, but `PanicBoundsCheckFnLangItem` was kept in the old style. For consistency, switch that one over to use `#[caller_location]` as well.\n\nThis is also helpful for Miri as it means the `assert_panic` machine hook never needs to know the current `Span`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3853da75cbcefc7bb57a853bf3c5406818fb8c45", "html_url": "https://github.com/rust-lang/rust/commit/3853da75cbcefc7bb57a853bf3c5406818fb8c45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3853da75cbcefc7bb57a853bf3c5406818fb8c45/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "080d41391d84ccf61b1b3667e731981519f9d5b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/080d41391d84ccf61b1b3667e731981519f9d5b7", "html_url": "https://github.com/rust-lang/rust/commit/080d41391d84ccf61b1b3667e731981519f9d5b7"}, {"sha": "0b2329da9a9a61dc70f9e607628977302f8144b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b2329da9a9a61dc70f9e607628977302f8144b4", "html_url": "https://github.com/rust-lang/rust/commit/0b2329da9a9a61dc70f9e607628977302f8144b4"}], "stats": {"total": 62, "additions": 55, "deletions": 7}, "files": [{"sha": "04af5b5f7682800cd5694bfb6a9eb58e715c1b14", "filename": "src/libcore/macros/mod.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3853da75cbcefc7bb57a853bf3c5406818fb8c45/src%2Flibcore%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3853da75cbcefc7bb57a853bf3c5406818fb8c45/src%2Flibcore%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros%2Fmod.rs?ref=3853da75cbcefc7bb57a853bf3c5406818fb8c45", "patch": "@@ -1,3 +1,4 @@\n+#[cfg(bootstrap)]\n #[doc(include = \"panic.md\")]\n #[macro_export]\n #[allow_internal_unstable(core_panic, track_caller)]\n@@ -20,6 +21,26 @@ macro_rules! panic {\n     );\n }\n \n+#[cfg(not(bootstrap))]\n+#[doc(include = \"panic.md\")]\n+#[macro_export]\n+#[allow_internal_unstable(core_panic, track_caller)]\n+#[stable(feature = \"core\", since = \"1.6.0\")]\n+macro_rules! panic {\n+    () => (\n+        $crate::panic!(\"explicit panic\")\n+    );\n+    ($msg:expr) => (\n+        $crate::panicking::panic($msg)\n+    );\n+    ($msg:expr,) => (\n+        $crate::panic!($msg)\n+    );\n+    ($fmt:expr, $($arg:tt)+) => (\n+        $crate::panicking::panic_fmt($crate::format_args!($fmt, $($arg)+))\n+    );\n+}\n+\n /// Asserts that two expressions are equal to each other (using [`PartialEq`]).\n ///\n /// On panic, this macro will print the values of the expressions with their"}, {"sha": "3587f3f0ebf56c738feb4be9a8db8327052a6424", "filename": "src/libcore/panicking.rs", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3853da75cbcefc7bb57a853bf3c5406818fb8c45/src%2Flibcore%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3853da75cbcefc7bb57a853bf3c5406818fb8c45/src%2Flibcore%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanicking.rs?ref=3853da75cbcefc7bb57a853bf3c5406818fb8c45", "patch": "@@ -32,6 +32,7 @@\n use crate::fmt;\n use crate::panic::{Location, PanicInfo};\n \n+/// The underlying implementation of libcore's `panic!` macro when no formatting is used.\n #[cold]\n // never inline unless panic_immediate_abort to avoid code\n // bloat at the call sites as much as possible\n@@ -49,9 +50,28 @@ pub fn panic(expr: &str) -> ! {\n     // truncation and padding (even though none is used here). Using\n     // Arguments::new_v1 may allow the compiler to omit Formatter::pad from the\n     // output binary, saving up to a few kilobytes.\n-    panic_fmt(fmt::Arguments::new_v1(&[expr], &[]), Location::caller())\n+    #[cfg(not(bootstrap))]\n+    panic_fmt(fmt::Arguments::new_v1(&[expr], &[]));\n+    #[cfg(bootstrap)]\n+    panic_fmt(fmt::Arguments::new_v1(&[expr], &[]), Location::caller());\n }\n \n+#[cfg(not(bootstrap))]\n+#[cold]\n+#[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n+#[track_caller]\n+#[lang = \"panic_bounds_check\"] // needed by codegen for panic on OOB array/slice access\n+fn panic_bounds_check(index: usize, len: usize) -> ! {\n+    if cfg!(feature = \"panic_immediate_abort\") {\n+        unsafe { super::intrinsics::abort() }\n+    }\n+\n+    panic!(\"index out of bounds: the len is {} but the index is {}\", len, index)\n+}\n+\n+// For bootstrap, we need a variant with the old argument order, and a corresponding\n+// `panic_fmt`.\n+#[cfg(bootstrap)]\n #[cold]\n #[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n #[lang = \"panic_bounds_check\"] // needed by codegen for panic on OOB array/slice access\n@@ -66,10 +86,12 @@ fn panic_bounds_check(location: &Location<'_>, index: usize, len: usize) -> ! {\n     )\n }\n \n+/// The underlying implementation of libcore's `panic!` macro when formatting is used.\n #[cold]\n #[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n #[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n-pub fn panic_fmt(fmt: fmt::Arguments<'_>, location: &Location<'_>) -> ! {\n+#[cfg_attr(not(bootstrap), track_caller)]\n+pub fn panic_fmt(fmt: fmt::Arguments<'_>, #[cfg(bootstrap)] location: &Location<'_>) -> ! {\n     if cfg!(feature = \"panic_immediate_abort\") {\n         unsafe { super::intrinsics::abort() }\n     }\n@@ -81,6 +103,10 @@ pub fn panic_fmt(fmt: fmt::Arguments<'_>, location: &Location<'_>) -> ! {\n         fn panic_impl(pi: &PanicInfo<'_>) -> !;\n     }\n \n+    #[cfg(bootstrap)]\n     let pi = PanicInfo::internal_constructor(Some(&fmt), location);\n+    #[cfg(not(bootstrap))]\n+    let pi = PanicInfo::internal_constructor(Some(&fmt), Location::caller());\n+\n     unsafe { panic_impl(&pi) }\n }"}, {"sha": "9ce23ff5f3fc855a619e4e85b992369f26d166bd", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3853da75cbcefc7bb57a853bf3c5406818fb8c45/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3853da75cbcefc7bb57a853bf3c5406818fb8c45/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=3853da75cbcefc7bb57a853bf3c5406818fb8c45", "patch": "@@ -415,11 +415,15 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             AssertKind::BoundsCheck { ref len, ref index } => {\n                 let len = self.codegen_operand(&mut bx, len).immediate();\n                 let index = self.codegen_operand(&mut bx, index).immediate();\n-                (lang_items::PanicBoundsCheckFnLangItem, vec![location, index, len])\n+                // It's `fn panic_bounds_check(index: usize, len: usize)`,\n+                // and `#[track_caller]` adds an implicit third argument.\n+                (lang_items::PanicBoundsCheckFnLangItem, vec![index, len, location])\n             }\n             _ => {\n                 let msg_str = Symbol::intern(msg.description());\n                 let msg = bx.const_str(msg_str);\n+                // It's `pub fn panic(expr: &str)`, with the wide reference being passed\n+                // as two arguments, and `#[track_caller]` adds an implicit third argument.\n                 (lang_items::PanicFnLangItem, vec![msg.0, msg.1, location])\n             }\n         };"}, {"sha": "bb661d3d2a30a3e7ff9d1b1998c2bcab7e755373", "filename": "src/librustc_mir/const_eval/machine.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3853da75cbcefc7bb57a853bf3c5406818fb8c45/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3853da75cbcefc7bb57a853bf3c5406818fb8c45/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs?ref=3853da75cbcefc7bb57a853bf3c5406818fb8c45", "patch": "@@ -280,7 +280,6 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n \n     fn assert_panic(\n         ecx: &mut InterpCx<'mir, 'tcx, Self>,\n-        _span: Span,\n         msg: &AssertMessage<'tcx>,\n         _unwind: Option<mir::BasicBlock>,\n     ) -> InterpResult<'tcx> {"}, {"sha": "087517ff4e31da59e0e1b9689787a3f20c9bb2ea", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3853da75cbcefc7bb57a853bf3c5406818fb8c45/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3853da75cbcefc7bb57a853bf3c5406818fb8c45/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=3853da75cbcefc7bb57a853bf3c5406818fb8c45", "patch": "@@ -165,7 +165,6 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     /// Called to evaluate `Assert` MIR terminators that trigger a panic.\n     fn assert_panic(\n         ecx: &mut InterpCx<'mir, 'tcx, Self>,\n-        span: Span,\n         msg: &mir::AssertMessage<'tcx>,\n         unwind: Option<mir::BasicBlock>,\n     ) -> InterpResult<'tcx>;"}, {"sha": "b5c34daf8a318c503c49f8c3255146fdb99de3fd", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3853da75cbcefc7bb57a853bf3c5406818fb8c45/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3853da75cbcefc7bb57a853bf3c5406818fb8c45/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=3853da75cbcefc7bb57a853bf3c5406818fb8c45", "patch": "@@ -95,7 +95,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 if expected == cond_val {\n                     self.go_to_block(target);\n                 } else {\n-                    M::assert_panic(self, terminator.source_info.span, msg, cleanup)?;\n+                    M::assert_panic(self, msg, cleanup)?;\n                 }\n             }\n "}, {"sha": "f9682a77173f540e5d5d24f31b91fd596ada3593", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3853da75cbcefc7bb57a853bf3c5406818fb8c45/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3853da75cbcefc7bb57a853bf3c5406818fb8c45/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=3853da75cbcefc7bb57a853bf3c5406818fb8c45", "patch": "@@ -197,7 +197,6 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine {\n \n     fn assert_panic(\n         _ecx: &mut InterpCx<'mir, 'tcx, Self>,\n-        _span: Span,\n         _msg: &rustc::mir::AssertMessage<'tcx>,\n         _unwind: Option<rustc::mir::BasicBlock>,\n     ) -> InterpResult<'tcx> {"}]}