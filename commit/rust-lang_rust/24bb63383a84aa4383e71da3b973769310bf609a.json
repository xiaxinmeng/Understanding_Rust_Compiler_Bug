{"sha": "24bb63383a84aa4383e71da3b973769310bf609a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0YmI2MzM4M2E4NGFhNDM4M2U3MWRhM2I5NzM3NjkzMTBiZjYwOWE=", "commit": {"author": {"name": "Matthew Kraai", "email": "kraai@ftbfs.org", "date": "2019-04-08T06:40:59Z"}, "committer": {"name": "Matthew Kraai", "email": "kraai@ftbfs.org", "date": "2019-04-17T13:51:21Z"}, "message": "Document `declare_lint_pass!`", "tree": {"sha": "d2f6a3ca761883da78ae1f3c3c313996b93614a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2f6a3ca761883da78ae1f3c3c313996b93614a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24bb63383a84aa4383e71da3b973769310bf609a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24bb63383a84aa4383e71da3b973769310bf609a", "html_url": "https://github.com/rust-lang/rust/commit/24bb63383a84aa4383e71da3b973769310bf609a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24bb63383a84aa4383e71da3b973769310bf609a/comments", "author": {"login": "kraai", "id": 552646, "node_id": "MDQ6VXNlcjU1MjY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/552646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kraai", "html_url": "https://github.com/kraai", "followers_url": "https://api.github.com/users/kraai/followers", "following_url": "https://api.github.com/users/kraai/following{/other_user}", "gists_url": "https://api.github.com/users/kraai/gists{/gist_id}", "starred_url": "https://api.github.com/users/kraai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kraai/subscriptions", "organizations_url": "https://api.github.com/users/kraai/orgs", "repos_url": "https://api.github.com/users/kraai/repos", "events_url": "https://api.github.com/users/kraai/events{/privacy}", "received_events_url": "https://api.github.com/users/kraai/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kraai", "id": 552646, "node_id": "MDQ6VXNlcjU1MjY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/552646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kraai", "html_url": "https://github.com/kraai", "followers_url": "https://api.github.com/users/kraai/followers", "following_url": "https://api.github.com/users/kraai/following{/other_user}", "gists_url": "https://api.github.com/users/kraai/gists{/gist_id}", "starred_url": "https://api.github.com/users/kraai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kraai/subscriptions", "organizations_url": "https://api.github.com/users/kraai/orgs", "repos_url": "https://api.github.com/users/kraai/repos", "events_url": "https://api.github.com/users/kraai/events{/privacy}", "received_events_url": "https://api.github.com/users/kraai/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce8705177928c5225501f43c14664438c677b98f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce8705177928c5225501f43c14664438c677b98f", "html_url": "https://github.com/rust-lang/rust/commit/ce8705177928c5225501f43c14664438c677b98f"}], "stats": {"total": 39, "additions": 8, "deletions": 31}, "files": [{"sha": "5781ab7f9999c7860054a4b99d98242df4e5bda8", "filename": "doc/adding_lints.md", "status": "modified", "additions": 8, "deletions": 31, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/24bb63383a84aa4383e71da3b973769310bf609a/doc%2Fadding_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/24bb63383a84aa4383e71da3b973769310bf609a/doc%2Fadding_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fadding_lints.md?ref=24bb63383a84aa4383e71da3b973769310bf609a", "patch": "@@ -116,7 +116,7 @@ where all the lint code is. We are going to call the file\n \n ```rust\n use rustc::lint::{LintArray, LintPass, EarlyLintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n ```\n \n The next step is to provide a lint declaration. Lints are declared using the\n@@ -147,22 +147,9 @@ lint pass:\n \n // .. imports and lint declaration ..\n \n-#[derive(Copy, Clone)]\n-pub struct FooFunctionsPass;\n-\n-impl LintPass for FooFunctionsPass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(\n-            FOO_FUNCTIONS,\n-        )\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"FooFunctions\"\n-    }\n-}\n+declare_lint_pass!(FooFunctions => [FOO_FUNCTIONS]);\n \n-impl EarlyLintPass for FooFunctionsPass {}\n+impl EarlyLintPass for FooFunctions {}\n ```\n \n Don't worry about the `name` method here. As long as it includes the name of the\n@@ -176,7 +163,7 @@ will have to register our lint pass manually in the `register_plugins` function\n in `clippy_lints/src/lib.rs`:\n \n ```rust\n-reg.register_early_lint_pass(box foo_functions::FooFunctionsPass);\n+reg.register_early_lint_pass(box foo_functions::FooFunctions);\n ```\n \n This should fix the `unknown clippy lint: clippy::foo_functions` error that we\n@@ -211,10 +198,10 @@ use rustc::{declare_tool_lint, lint_array};\n With UI tests and the lint declaration in place, we can start working on the\n implementation of the lint logic.\n \n-Let's start by implementing the `EarlyLintPass` for our `FooFunctionsPass`:\n+Let's start by implementing the `EarlyLintPass` for our `FooFunctions`:\n \n ```rust\n-impl EarlyLintPass for FooFunctionsPass {\n+impl EarlyLintPass for FooFunctions {\n     fn check_fn(&mut self, cx: &EarlyContext<'_>, fn_kind: FnKind<'_>, _: &FnDecl, span: Span, _: NodeId) {\n         // TODO: Emit lint here\n     }\n@@ -236,7 +223,7 @@ provide an extra help message and we can't really suggest a better name\n automatically. This is how it looks:\n \n ```rust\n-impl EarlyLintPass for Pass {\n+impl EarlyLintPass for FooFunctions {\n     fn check_fn(&mut self, cx: &EarlyContext<'_>, _: FnKind<'_>, _: &FnDecl, span: Span, _: NodeId) {\n         span_help_and_lint(\n             cx,\n@@ -263,7 +250,7 @@ Both provide access to the name of the function/method via an [`Ident`][ident].\n With that we can expand our `check_fn` method to:\n \n ```rust\n-impl EarlyLintPass for Pass {\n+impl EarlyLintPass for FooFunctions {\n     fn check_fn(&mut self, cx: &EarlyContext<'_>, fn_kind: FnKind<'_>, _: &FnDecl, span: Span, _: NodeId) {\n         if is_foo_fn(fn_kind) {\n             span_help_and_lint(\n@@ -304,16 +291,6 @@ running `cargo test` should produce the expected output. Remember to run\n `cargo test` (as opposed to `cargo uitest`) will also ensure that our lint\n implementation is not violating any Clippy lints itself.\n \n-If you are still following the example, you will see that `FooFunctionsPass`\n-violates a Clippy lint. So we are going to rename that struct to just `Pass`:\n-\n-```rust\n-#[derive(Copy, Clone)]\n-pub struct Pass;\n-\n-impl LintPass for Pass { /* .. */ }\n-```\n-\n That should be it for the lint implementation. Running `cargo test` should now\n pass.\n "}]}