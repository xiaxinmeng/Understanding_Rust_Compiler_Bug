{"sha": "d00e5e9343a11939c80c0ade5ca71c8dcbc31847", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwMGU1ZTkzNDNhMTE5MzljODBjMGFkZTVjYTcxYzhkY2JjMzE4NDc=", "commit": {"author": {"name": "Jonathan Turner", "email": "jonathandturner@users.noreply.github.com", "date": "2016-11-02T19:09:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-11-02T19:09:41Z"}, "message": "Rollup merge of #37351 - Amanieu:consume, r=alexcrichton\n\nPrevent exhaustive matching of Ordering to allow for future extension\n\nThe C++11 atomic memory model defines a `memory_order_consume` ordering which is generally equivalent to `memory_order_acquire` but can allow better code generation by avoiding memory barrier instructions. Most compilers (including LLVM) currently do not implement this ordering directly and instead treat it identically to `memory_order_acquire`, including adding a memory barrier instruction.\n\nThere is currently [work](http://open-std.org/Jtc1/sc22/wg21/docs/papers/2016/p0098r1.pdf) to support consume ordering in compilers, and it would be a shame if Rust did not support this. This PR therefore reserves a `__Nonexhaustive` variant in `Ordering` so that adding a new ordering is not a breaking change in the future.\n\nThis is a [breaking-change] since it disallows exhaustive matching on `Ordering`, however a search of all Rust code on Github shows that there is no code that does this. This makes sense since `Ordering` is typically only used as a parameter to an atomic operation.", "tree": {"sha": "42ca4d28f45d12affae488f7e53a7565e7a9b313", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42ca4d28f45d12affae488f7e53a7565e7a9b313"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d00e5e9343a11939c80c0ade5ca71c8dcbc31847", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d00e5e9343a11939c80c0ade5ca71c8dcbc31847", "html_url": "https://github.com/rust-lang/rust/commit/d00e5e9343a11939c80c0ade5ca71c8dcbc31847", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d00e5e9343a11939c80c0ade5ca71c8dcbc31847/comments", "author": {"login": "jonathandturner", "id": 111457284, "node_id": "O_kgDOBqS0BA", "avatar_url": "https://avatars.githubusercontent.com/u/111457284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonathandturner", "html_url": "https://github.com/jonathandturner", "followers_url": "https://api.github.com/users/jonathandturner/followers", "following_url": "https://api.github.com/users/jonathandturner/following{/other_user}", "gists_url": "https://api.github.com/users/jonathandturner/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonathandturner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonathandturner/subscriptions", "organizations_url": "https://api.github.com/users/jonathandturner/orgs", "repos_url": "https://api.github.com/users/jonathandturner/repos", "events_url": "https://api.github.com/users/jonathandturner/events{/privacy}", "received_events_url": "https://api.github.com/users/jonathandturner/received_events", "type": "Organization", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ca9967af75f7a279dcf4921f119b2602b41dd71", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ca9967af75f7a279dcf4921f119b2602b41dd71", "html_url": "https://github.com/rust-lang/rust/commit/0ca9967af75f7a279dcf4921f119b2602b41dd71"}, {"sha": "5a2fb8806ba841c74dee49a732937a71d16caff5", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a2fb8806ba841c74dee49a732937a71d16caff5", "html_url": "https://github.com/rust-lang/rust/commit/5a2fb8806ba841c74dee49a732937a71d16caff5"}], "stats": {"total": 18, "additions": 18, "deletions": 0}, "files": [{"sha": "c10f7e39fc39da0e13f768f993b98c0e128e03e8", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d00e5e9343a11939c80c0ade5ca71c8dcbc31847/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d00e5e9343a11939c80c0ade5ca71c8dcbc31847/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=d00e5e9343a11939c80c0ade5ca71c8dcbc31847", "patch": "@@ -166,6 +166,10 @@ pub enum Ordering {\n     /// sequentially consistent operations in the same order.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     SeqCst,\n+    // Prevent exhaustive matching to allow for future extension\n+    #[doc(hidden)]\n+    #[unstable(feature = \"future_atomic_orderings\", issue = \"0\")]\n+    __Nonexhaustive,\n }\n \n /// An `AtomicBool` initialized to `false`.\n@@ -1277,6 +1281,7 @@ fn strongest_failure_ordering(order: Ordering) -> Ordering {\n         SeqCst => SeqCst,\n         Acquire => Acquire,\n         AcqRel => Acquire,\n+        __Nonexhaustive => __Nonexhaustive,\n     }\n }\n \n@@ -1288,6 +1293,7 @@ unsafe fn atomic_store<T>(dst: *mut T, val: T, order: Ordering) {\n         SeqCst => intrinsics::atomic_store(dst, val),\n         Acquire => panic!(\"there is no such thing as an acquire store\"),\n         AcqRel => panic!(\"there is no such thing as an acquire/release store\"),\n+        __Nonexhaustive => panic!(\"invalid memory ordering\"),\n     }\n }\n \n@@ -1299,6 +1305,7 @@ unsafe fn atomic_load<T>(dst: *const T, order: Ordering) -> T {\n         SeqCst => intrinsics::atomic_load(dst),\n         Release => panic!(\"there is no such thing as a release load\"),\n         AcqRel => panic!(\"there is no such thing as an acquire/release load\"),\n+        __Nonexhaustive => panic!(\"invalid memory ordering\"),\n     }\n }\n \n@@ -1310,6 +1317,7 @@ unsafe fn atomic_swap<T>(dst: *mut T, val: T, order: Ordering) -> T {\n         AcqRel => intrinsics::atomic_xchg_acqrel(dst, val),\n         Relaxed => intrinsics::atomic_xchg_relaxed(dst, val),\n         SeqCst => intrinsics::atomic_xchg(dst, val),\n+        __Nonexhaustive => panic!(\"invalid memory ordering\"),\n     }\n }\n \n@@ -1322,6 +1330,7 @@ unsafe fn atomic_add<T>(dst: *mut T, val: T, order: Ordering) -> T {\n         AcqRel => intrinsics::atomic_xadd_acqrel(dst, val),\n         Relaxed => intrinsics::atomic_xadd_relaxed(dst, val),\n         SeqCst => intrinsics::atomic_xadd(dst, val),\n+        __Nonexhaustive => panic!(\"invalid memory ordering\"),\n     }\n }\n \n@@ -1334,6 +1343,7 @@ unsafe fn atomic_sub<T>(dst: *mut T, val: T, order: Ordering) -> T {\n         AcqRel => intrinsics::atomic_xsub_acqrel(dst, val),\n         Relaxed => intrinsics::atomic_xsub_relaxed(dst, val),\n         SeqCst => intrinsics::atomic_xsub(dst, val),\n+        __Nonexhaustive => panic!(\"invalid memory ordering\"),\n     }\n }\n \n@@ -1354,6 +1364,8 @@ unsafe fn atomic_compare_exchange<T>(dst: *mut T,\n         (AcqRel, Relaxed) => intrinsics::atomic_cxchg_acqrel_failrelaxed(dst, old, new),\n         (SeqCst, Relaxed) => intrinsics::atomic_cxchg_failrelaxed(dst, old, new),\n         (SeqCst, Acquire) => intrinsics::atomic_cxchg_failacq(dst, old, new),\n+        (__Nonexhaustive, _) => panic!(\"invalid memory ordering\"),\n+        (_, __Nonexhaustive) => panic!(\"invalid memory ordering\"),\n         (_, AcqRel) => panic!(\"there is no such thing as an acquire/release failure ordering\"),\n         (_, Release) => panic!(\"there is no such thing as a release failure ordering\"),\n         _ => panic!(\"a failure ordering can't be stronger than a success ordering\"),\n@@ -1378,6 +1390,8 @@ unsafe fn atomic_compare_exchange_weak<T>(dst: *mut T,\n         (AcqRel, Relaxed) => intrinsics::atomic_cxchgweak_acqrel_failrelaxed(dst, old, new),\n         (SeqCst, Relaxed) => intrinsics::atomic_cxchgweak_failrelaxed(dst, old, new),\n         (SeqCst, Acquire) => intrinsics::atomic_cxchgweak_failacq(dst, old, new),\n+        (__Nonexhaustive, _) => panic!(\"invalid memory ordering\"),\n+        (_, __Nonexhaustive) => panic!(\"invalid memory ordering\"),\n         (_, AcqRel) => panic!(\"there is no such thing as an acquire/release failure ordering\"),\n         (_, Release) => panic!(\"there is no such thing as a release failure ordering\"),\n         _ => panic!(\"a failure ordering can't be stronger than a success ordering\"),\n@@ -1393,6 +1407,7 @@ unsafe fn atomic_and<T>(dst: *mut T, val: T, order: Ordering) -> T {\n         AcqRel => intrinsics::atomic_and_acqrel(dst, val),\n         Relaxed => intrinsics::atomic_and_relaxed(dst, val),\n         SeqCst => intrinsics::atomic_and(dst, val),\n+        __Nonexhaustive => panic!(\"invalid memory ordering\"),\n     }\n }\n \n@@ -1404,6 +1419,7 @@ unsafe fn atomic_or<T>(dst: *mut T, val: T, order: Ordering) -> T {\n         AcqRel => intrinsics::atomic_or_acqrel(dst, val),\n         Relaxed => intrinsics::atomic_or_relaxed(dst, val),\n         SeqCst => intrinsics::atomic_or(dst, val),\n+        __Nonexhaustive => panic!(\"invalid memory ordering\"),\n     }\n }\n \n@@ -1415,6 +1431,7 @@ unsafe fn atomic_xor<T>(dst: *mut T, val: T, order: Ordering) -> T {\n         AcqRel => intrinsics::atomic_xor_acqrel(dst, val),\n         Relaxed => intrinsics::atomic_xor_relaxed(dst, val),\n         SeqCst => intrinsics::atomic_xor(dst, val),\n+        __Nonexhaustive => panic!(\"invalid memory ordering\"),\n     }\n }\n \n@@ -1448,6 +1465,7 @@ pub fn fence(order: Ordering) {\n             AcqRel => intrinsics::atomic_fence_acqrel(),\n             SeqCst => intrinsics::atomic_fence(),\n             Relaxed => panic!(\"there is no such thing as a relaxed fence\"),\n+            __Nonexhaustive => panic!(\"invalid memory ordering\"),\n         }\n     }\n }"}]}