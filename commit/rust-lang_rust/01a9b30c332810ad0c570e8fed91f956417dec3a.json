{"sha": "01a9b30c332810ad0c570e8fed91f956417dec3a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxYTliMzBjMzMyODEwYWQwYzU3MGU4ZmVkOTFmOTU2NDE3ZGVjM2E=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-03T23:04:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-03T23:04:11Z"}, "message": "Auto merge of #51111 - kennytm:intralink-resolution-failure-line-numbers, r=GuillaumeGomez\n\nPoint to the rustdoc attribute where intralink resolution failed.", "tree": {"sha": "24881a8e56e8ee763cf5ebaec19e09a1fbaedc01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24881a8e56e8ee763cf5ebaec19e09a1fbaedc01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01a9b30c332810ad0c570e8fed91f956417dec3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01a9b30c332810ad0c570e8fed91f956417dec3a", "html_url": "https://github.com/rust-lang/rust/commit/01a9b30c332810ad0c570e8fed91f956417dec3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01a9b30c332810ad0c570e8fed91f956417dec3a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29f48ccf396be031ee8a54e74a3a4e81866c8872", "url": "https://api.github.com/repos/rust-lang/rust/commits/29f48ccf396be031ee8a54e74a3a4e81866c8872", "html_url": "https://github.com/rust-lang/rust/commit/29f48ccf396be031ee8a54e74a3a4e81866c8872"}, {"sha": "2886aca232361519a1a8c142b2c670fed1bd03b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/2886aca232361519a1a8c142b2c670fed1bd03b6", "html_url": "https://github.com/rust-lang/rust/commit/2886aca232361519a1a8c142b2c670fed1bd03b6"}], "stats": {"total": 121, "additions": 108, "deletions": 13}, "files": [{"sha": "1c1ba208678ed0e418faac4eba8cbd3025321142", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 49, "deletions": 9, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/01a9b30c332810ad0c570e8fed91f956417dec3a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01a9b30c332810ad0c570e8fed91f956417dec3a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=01a9b30c332810ad0c570e8fed91f956417dec3a", "patch": "@@ -57,6 +57,7 @@ use std::rc::Rc;\n use std::cell::RefCell;\n use std::sync::Arc;\n use std::u32;\n+use std::ops::Range;\n \n use core::{self, DocContext};\n use doctree;\n@@ -954,12 +955,20 @@ fn type_ns_kind(def: Def, path_str: &str) -> (&'static str, &'static str, String\n     (kind, article, format!(\"{}@{}\", kind, path_str))\n }\n \n+fn span_of_attrs(attrs: &Attributes) -> syntax_pos::Span {\n+    if attrs.doc_strings.is_empty() {\n+        return DUMMY_SP;\n+    }\n+    let start = attrs.doc_strings[0].span();\n+    let end = attrs.doc_strings.last().unwrap().span();\n+    start.to(end)\n+}\n+\n fn ambiguity_error(cx: &DocContext, attrs: &Attributes,\n                    path_str: &str,\n                    article1: &str, kind1: &str, disambig1: &str,\n                    article2: &str, kind2: &str, disambig2: &str) {\n-    let sp = attrs.doc_strings.first()\n-                  .map_or(DUMMY_SP, |a| a.span());\n+    let sp = span_of_attrs(attrs);\n     cx.sess()\n       .struct_span_warn(sp,\n                         &format!(\"`{}` is both {} {} and {} {}\",\n@@ -1174,8 +1183,39 @@ enum PathKind {\n     Type,\n }\n \n-fn resolution_failure(cx: &DocContext, path_str: &str) {\n-    cx.sess().warn(&format!(\"[{}] cannot be resolved, ignoring it...\", path_str));\n+fn resolution_failure(\n+    cx: &DocContext,\n+    attrs: &Attributes,\n+    path_str: &str,\n+    dox: &str,\n+    link_range: Option<Range<usize>>,\n+) {\n+    let sp = span_of_attrs(attrs);\n+    let mut diag = cx.sess()\n+        .struct_span_warn(sp, &format!(\"[{}] cannot be resolved, ignoring it...\", path_str));\n+\n+    if let Some(link_range) = link_range {\n+        // blah blah blah\\nblah\\nblah [blah] blah blah\\nblah blah\n+        //                       ^    ~~~~~~\n+        //                       |    link_range\n+        //                       last_new_line_offset\n+\n+        let last_new_line_offset = dox[..link_range.start].rfind('\\n').map_or(0, |n| n + 1);\n+        let line = dox[last_new_line_offset..].lines().next().unwrap_or(\"\");\n+\n+        // Print the line containing the `link_range` and manually mark it with '^'s\n+        diag.note(&format!(\n+            \"the link appears in this line:\\n\\n{line}\\n{indicator: <before$}{indicator:^<found$}\",\n+            line=line,\n+            indicator=\"\",\n+            before=link_range.start - last_new_line_offset,\n+            found=link_range.len(),\n+        ));\n+    } else {\n+\n+    }\n+\n+    diag.emit();\n }\n \n impl Clean<Attributes> for [ast::Attribute] {\n@@ -1184,7 +1224,7 @@ impl Clean<Attributes> for [ast::Attribute] {\n \n         if UnstableFeatures::from_environment().is_nightly_build() {\n             let dox = attrs.collapsed_doc_value().unwrap_or_else(String::new);\n-            for ori_link in markdown_links(&dox) {\n+            for (ori_link, link_range) in markdown_links(&dox) {\n                 // bail early for real links\n                 if ori_link.contains('/') {\n                     continue;\n@@ -1228,7 +1268,7 @@ impl Clean<Attributes> for [ast::Attribute] {\n                             if let Ok(def) = resolve(cx, path_str, true) {\n                                 def\n                             } else {\n-                                resolution_failure(cx, path_str);\n+                                resolution_failure(cx, &attrs, path_str, &dox, link_range);\n                                 // this could just be a normal link or a broken link\n                                 // we could potentially check if something is\n                                 // \"intra-doc-link-like\" and warn in that case\n@@ -1239,7 +1279,7 @@ impl Clean<Attributes> for [ast::Attribute] {\n                             if let Ok(def) = resolve(cx, path_str, false) {\n                                 def\n                             } else {\n-                                resolution_failure(cx, path_str);\n+                                resolution_failure(cx, &attrs, path_str, &dox, link_range);\n                                 // this could just be a normal link\n                                 continue;\n                             }\n@@ -1284,7 +1324,7 @@ impl Clean<Attributes> for [ast::Attribute] {\n                             } else if let Ok(value_def) = resolve(cx, path_str, true) {\n                                 value_def\n                             } else {\n-                                resolution_failure(cx, path_str);\n+                                resolution_failure(cx, &attrs, path_str, &dox, link_range);\n                                 // this could just be a normal link\n                                 continue;\n                             }\n@@ -1293,7 +1333,7 @@ impl Clean<Attributes> for [ast::Attribute] {\n                             if let Some(def) = macro_resolve(cx, path_str) {\n                                 (def, None)\n                             } else {\n-                                resolution_failure(cx, path_str);\n+                                resolution_failure(cx, &attrs, path_str, &dox, link_range);\n                                 continue\n                             }\n                         }"}, {"sha": "7088104cd7a31d8b6ee5a6f6baa1ca2b3a5c9cea", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/01a9b30c332810ad0c570e8fed91f956417dec3a/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01a9b30c332810ad0c570e8fed91f956417dec3a/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=01a9b30c332810ad0c570e8fed91f956417dec3a", "patch": "@@ -32,6 +32,8 @@ use std::cell::RefCell;\n use std::collections::{HashMap, VecDeque};\n use std::default::Default;\n use std::fmt::{self, Write};\n+use std::borrow::Cow;\n+use std::ops::Range;\n use std::str;\n use syntax::feature_gate::UnstableFeatures;\n use syntax::codemap::Span;\n@@ -747,7 +749,7 @@ pub fn plain_summary_line(md: &str) -> String {\n     s\n }\n \n-pub fn markdown_links(md: &str) -> Vec<String> {\n+pub fn markdown_links(md: &str) -> Vec<(String, Option<Range<usize>>)> {\n     if md.is_empty() {\n         return vec![];\n     }\n@@ -760,8 +762,22 @@ pub fn markdown_links(md: &str) -> Vec<String> {\n     let shortcut_links = RefCell::new(vec![]);\n \n     {\n+        let locate = |s: &str| unsafe {\n+            let s_start = s.as_ptr();\n+            let s_end = s_start.add(s.len());\n+            let md_start = md.as_ptr();\n+            let md_end = md_start.add(md.len());\n+            if md_start <= s_start && s_end <= md_end {\n+                let start = s_start.offset_from(md_start) as usize;\n+                let end = s_end.offset_from(md_start) as usize;\n+                Some(start..end)\n+            } else {\n+                None\n+            }\n+        };\n+\n         let push = |_: &str, s: &str| {\n-            shortcut_links.borrow_mut().push(s.to_owned());\n+            shortcut_links.borrow_mut().push((s.to_owned(), locate(s)));\n             None\n         };\n         let p = Parser::new_with_broken_link_callback(md, opts,\n@@ -772,7 +788,10 @@ pub fn markdown_links(md: &str) -> Vec<String> {\n         for ev in iter {\n             if let Event::Start(Tag::Link(dest, _)) = ev {\n                 debug!(\"found link: {}\", dest);\n-                links.push(dest.into_owned());\n+                links.push(match dest {\n+                    Cow::Borrowed(s) => (s.to_owned(), locate(s)),\n+                    Cow::Owned(s) => (s, None),\n+                });\n             }\n         }\n     }"}, {"sha": "97c84d8348f7c0ce6f142dcf29a9a6493beac68a", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/01a9b30c332810ad0c570e8fed91f956417dec3a/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01a9b30c332810ad0c570e8fed91f956417dec3a/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=01a9b30c332810ad0c570e8fed91f956417dec3a", "patch": "@@ -23,6 +23,7 @@\n #![feature(test)]\n #![feature(vec_remove_item)]\n #![feature(entry_and_modify)]\n+#![feature(ptr_offset_from)]\n \n #![recursion_limit=\"256\"]\n "}, {"sha": "830aaabf9d231c801fd9fac3f18e03d104fd1ccf", "filename": "src/test/rustdoc-ui/intra-links-warning.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01a9b30c332810ad0c570e8fed91f956417dec3a/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01a9b30c332810ad0c570e8fed91f956417dec3a/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.rs?ref=01a9b30c332810ad0c570e8fed91f956417dec3a", "patch": "@@ -10,7 +10,9 @@\n \n // compile-pass\n \n-//! Test with [Foo::baz], [Bar::foo], [Uniooon::X]\n+//! Test with [Foo::baz], [Bar::foo], ...\n+//!\n+//! and [Uniooon::X].\n \n pub struct Foo {\n     pub bar: usize,"}, {"sha": "1e8e9f04c26ace303e17597274859488e1cee8f9", "filename": "src/test/rustdoc-ui/intra-links-warning.stderr", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/01a9b30c332810ad0c570e8fed91f956417dec3a/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01a9b30c332810ad0c570e8fed91f956417dec3a/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.stderr?ref=01a9b30c332810ad0c570e8fed91f956417dec3a", "patch": "@@ -1,6 +1,39 @@\n warning: [Foo::baz] cannot be resolved, ignoring it...\n+  --> $DIR/intra-links-warning.rs:13:1\n+   |\n+13 | / //! Test with [Foo::baz], [Bar::foo], ...\n+14 | | //!\n+15 | | //! and [Uniooon::X].\n+   | |_____________________^\n+   |\n+   = note: the link appears in this line:\n+           \n+            Test with [Foo::baz], [Bar::foo], ...\n+                       ^^^^^^^^\n \n warning: [Bar::foo] cannot be resolved, ignoring it...\n+  --> $DIR/intra-links-warning.rs:13:1\n+   |\n+13 | / //! Test with [Foo::baz], [Bar::foo], ...\n+14 | | //!\n+15 | | //! and [Uniooon::X].\n+   | |_____________________^\n+   |\n+   = note: the link appears in this line:\n+           \n+            Test with [Foo::baz], [Bar::foo], ...\n+                                   ^^^^^^^^\n \n warning: [Uniooon::X] cannot be resolved, ignoring it...\n+  --> $DIR/intra-links-warning.rs:13:1\n+   |\n+13 | / //! Test with [Foo::baz], [Bar::foo], ...\n+14 | | //!\n+15 | | //! and [Uniooon::X].\n+   | |_____________________^\n+   |\n+   = note: the link appears in this line:\n+           \n+            and [Uniooon::X].\n+                 ^^^^^^^^^^\n "}]}