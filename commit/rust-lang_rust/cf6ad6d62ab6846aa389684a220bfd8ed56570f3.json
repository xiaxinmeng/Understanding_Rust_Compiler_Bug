{"sha": "cf6ad6d62ab6846aa389684a220bfd8ed56570f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmNmFkNmQ2MmFiNjg0NmFhMzg5Njg0YTIyMGJmZDhlZDU2NTcwZjM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-05-11T17:44:57Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-05-19T03:00:50Z"}, "message": "move io over to dvec", "tree": {"sha": "df2d6587c5330163860a5268b2a700d0bf495201", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df2d6587c5330163860a5268b2a700d0bf495201"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf6ad6d62ab6846aa389684a220bfd8ed56570f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf6ad6d62ab6846aa389684a220bfd8ed56570f3", "html_url": "https://github.com/rust-lang/rust/commit/cf6ad6d62ab6846aa389684a220bfd8ed56570f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf6ad6d62ab6846aa389684a220bfd8ed56570f3/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35f6f37453781f1d7bada7a0468b96d851831762", "url": "https://api.github.com/repos/rust-lang/rust/commits/35f6f37453781f1d7bada7a0468b96d851831762", "html_url": "https://github.com/rust-lang/rust/commit/35f6f37453781f1d7bada7a0468b96d851831762"}], "stats": {"total": 62, "additions": 39, "deletions": 23}, "files": [{"sha": "fe3fe804c8bab2cda5153f5375be4a7f50ba1cc0", "filename": "src/libcore/dvec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf6ad6d62ab6846aa389684a220bfd8ed56570f3/src%2Flibcore%2Fdvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf6ad6d62ab6846aa389684a220bfd8ed56570f3/src%2Flibcore%2Fdvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdvec.rs?ref=cf6ad6d62ab6846aa389684a220bfd8ed56570f3", "patch": "@@ -176,7 +176,7 @@ impl extensions<A:copy> for dvec<A> {\n     //    attempts to access this vector.\n     //\"]\n     //fn append_iter<I:iter::base<A>>(ts: I) {\n-    //    self.dvec.swap { |v|\n+    //    self.data.swap { |v|\n     //        alt ts.size_hint() {\n     //          none {}\n     //          some(h) { vec::reserve(v, len(v) + h) }"}, {"sha": "beac1e5fb09566e03a3d877f6513d0866a511063", "filename": "src/libcore/io.rs", "status": "modified", "additions": 34, "deletions": 19, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/cf6ad6d62ab6846aa389684a220bfd8ed56570f3/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf6ad6d62ab6846aa389684a220bfd8ed56570f3/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=cf6ad6d62ab6846aa389684a220bfd8ed56570f3", "patch": "@@ -6,6 +6,7 @@ Basic input/output\n \n import result::result;\n \n+import dvec::{dvec, extensions};\n import libc::{c_int, c_uint, c_void, size_t, ssize_t};\n import libc::consts::os::posix88::*;\n import libc::consts::os::extra::*;\n@@ -574,46 +575,45 @@ fn stderr() -> writer { fd_writer(libc::STDERR_FILENO as c_int, false) }\n fn print(s: str) { stdout().write_str(s); }\n fn println(s: str) { stdout().write_line(s); }\n \n-type mem_buffer = @{mut buf: [mut u8],\n-                    mut pos: uint};\n+type mem_buffer = @{buf: dvec<u8>, mut pos: uint};\n \n impl of writer for mem_buffer {\n     fn write(v: [const u8]/&) {\n         // Fast path.\n-        if self.pos == vec::len(self.buf) {\n-            for vec::each(v) {|b| self.buf += [mut b]; }\n-            self.pos += vec::len(v);\n+        let vlen = vec::len(v);\n+        let buf_len = self.buf.len();\n+        if self.pos == buf_len {\n+            self.buf.push_all(v);\n+            self.pos += vlen;\n             ret;\n         }\n-        // FIXME: Optimize: These should be unique pointers. // #2004\n-        let vlen = vec::len(v);\n-        let mut vpos = 0u;\n-        while vpos < vlen {\n-            let b = v[vpos];\n-            if self.pos == vec::len(self.buf) {\n-                self.buf += [mut b];\n-            } else { self.buf[self.pos] = b; }\n-            self.pos += 1u;\n+\n+        // FIXME #2004--use memcpy here?\n+        let mut pos = self.pos, vpos = 0u;\n+        while vpos < vlen && pos < buf_len {\n+            self.buf.set_elt(pos, v[vpos]);\n+            pos += 1u;\n             vpos += 1u;\n         }\n+        self.buf.push_slice(v, vpos, vlen);\n+        self.pos += vlen;\n     }\n     fn seek(offset: int, whence: seek_style) {\n         let pos = self.pos;\n-        let len = vec::len(self.buf);\n+        let len = self.buf.len();\n         self.pos = seek_in_buf(offset, pos, len, whence);\n     }\n     fn tell() -> uint { self.pos }\n     fn flush() -> int { 0 }\n }\n \n fn mem_buffer() -> mem_buffer {\n-    @{mut buf: [mut], mut pos: 0u}\n+    @{buf: dvec(), mut pos: 0u}\n }\n fn mem_buffer_writer(b: mem_buffer) -> writer { b as writer }\n-fn mem_buffer_buf(b: mem_buffer) -> [u8] { vec::from_mut(b.buf) }\n+fn mem_buffer_buf(b: mem_buffer) -> [u8] { b.buf.get() }\n fn mem_buffer_str(b: mem_buffer) -> str {\n-    let b_ = vec::from_mut(b.buf);\n-    str::from_bytes(b_)\n+    str::from_bytes(b.buf.get())\n }\n \n fn with_str_writer(f: fn(writer)) -> str {\n@@ -827,6 +827,21 @@ mod tests {\n           result::ok(_) { fail; }\n         }\n     }\n+\n+    #[test]\n+    fn mem_buffer_overwrite() {\n+        let mbuf = mem_buffer();\n+        mbuf.write([0u8, 1u8, 2u8, 3u8]);\n+        assert mem_buffer_buf(mbuf) == [0u8, 1u8, 2u8, 3u8];\n+        mbuf.seek(-2, seek_cur);\n+        mbuf.write([4u8, 5u8, 6u8, 7u8]);\n+        assert mem_buffer_buf(mbuf) == [0u8, 1u8, 4u8, 5u8, 6u8, 7u8];\n+        mbuf.seek(-2, seek_end);\n+        mbuf.write([8u8]);\n+        mbuf.seek(1, seek_set);\n+        mbuf.write([9u8]);\n+        assert mem_buffer_buf(mbuf) == [0u8, 9u8, 4u8, 5u8, 8u8, 7u8];\n+    }\n }\n \n //"}, {"sha": "15441ee103445eb3f7e1facfde63f057d4671abc", "filename": "src/test/run-pass/dvec-test.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cf6ad6d62ab6846aa389684a220bfd8ed56570f3/src%2Ftest%2Frun-pass%2Fdvec-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf6ad6d62ab6846aa389684a220bfd8ed56570f3/src%2Ftest%2Frun-pass%2Fdvec-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdvec-test.rs?ref=cf6ad6d62ab6846aa389684a220bfd8ed56570f3", "patch": "@@ -11,9 +11,10 @@ fn main() {\n     d.push(8);\n     d.push(9);\n     d.push(10);\n-    d.push_vec([11, 12, 13]);\n+    d.push_all([11, 12, 13]);\n+    d.push_slice([11, 12, 13], 1u, 2u);\n \n-    let exp = [5, 6, 7, 8, 9, 10, 11, 12, 13];\n+    let exp = [5, 6, 7, 8, 9, 10, 11, 12, 13, 12];\n     assert d.get() == exp;\n     assert d.get() == exp;\n     assert d.len() == exp.len();\n@@ -22,5 +23,5 @@ fn main() {\n         assert e == exp[i];\n     }\n \n-    assert dvec::unwrap(d) == [5, 6, 7, 8, 9, 10, 11, 12, 13];\n+    assert dvec::unwrap(d) == exp;\n }\n\\ No newline at end of file"}]}