{"sha": "696c88d69ce01cc41acd9744d120e12be260a4b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5NmM4OGQ2OWNlMDFjYzQxYWNkOTc0NGQxMjBlMTJiZTI2MGE0YjY=", "commit": {"author": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2021-08-19T18:46:35Z"}, "committer": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2021-08-19T18:47:38Z"}, "message": "canonicalize const equate predicates", "tree": {"sha": "80495e894e114df56bad01874228724c7bb2c93c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80495e894e114df56bad01874228724c7bb2c93c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/696c88d69ce01cc41acd9744d120e12be260a4b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/696c88d69ce01cc41acd9744d120e12be260a4b6", "html_url": "https://github.com/rust-lang/rust/commit/696c88d69ce01cc41acd9744d120e12be260a4b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/696c88d69ce01cc41acd9744d120e12be260a4b6/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0035d9dcecee49d1f7349932bfa52c05a6f83641", "url": "https://api.github.com/repos/rust-lang/rust/commits/0035d9dcecee49d1f7349932bfa52c05a6f83641", "html_url": "https://github.com/rust-lang/rust/commit/0035d9dcecee49d1f7349932bfa52c05a6f83641"}], "stats": {"total": 25, "additions": 16, "deletions": 9}, "files": [{"sha": "1d44e1718070392515be568ac9f4bd3716dd078f", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/696c88d69ce01cc41acd9744d120e12be260a4b6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/696c88d69ce01cc41acd9744d120e12be260a4b6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=696c88d69ce01cc41acd9744d120e12be260a4b6", "patch": "@@ -4,6 +4,7 @@ use rustc_data_structures::obligation_forest::{Error, ForestObligation, Outcome}\n use rustc_data_structures::obligation_forest::{ObligationForest, ObligationProcessor};\n use rustc_errors::ErrorReported;\n use rustc_hir as hir;\n+use rustc_infer::infer::canonical::OriginalQueryValues;\n use rustc_infer::traits::{SelectionError, TraitEngine, TraitEngineExt as _, TraitObligation};\n use rustc_middle::mir::abstract_const::NotConstEvaluatable;\n use rustc_middle::mir::interpret::ErrorHandled;\n@@ -552,11 +553,13 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n                         if let (ty::ConstKind::Unevaluated(a), ty::ConstKind::Unevaluated(b)) =\n                             (c1.val, c2.val)\n                         {\n-                            if self\n-                                .selcx\n-                                .tcx()\n-                                .try_unify_abstract_consts(((a.def, a.substs), (b.def, b.substs)))\n-                            {\n+                            let canonical = infcx.canonicalize_query(\n+                                ((a.def, a.substs), (b.def, b.substs)),\n+                                &mut OriginalQueryValues::default(),\n+                            );\n+                            debug!(\"canonical consts: {:?}\", &canonical.value);\n+\n+                            if self.selcx.tcx().try_unify_abstract_consts(canonical.value) {\n                                 return ProcessResult::Changed(vec![]);\n                             }\n                         }"}, {"sha": "60484b4d0656cdd81c700e676d6782a80f3a7b86", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/696c88d69ce01cc41acd9744d120e12be260a4b6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/696c88d69ce01cc41acd9744d120e12be260a4b6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=696c88d69ce01cc41acd9744d120e12be260a4b6", "patch": "@@ -33,6 +33,7 @@ use rustc_errors::ErrorReported;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::Constness;\n+use rustc_infer::infer::canonical::OriginalQueryValues;\n use rustc_infer::infer::LateBoundRegionConversionTime;\n use rustc_middle::dep_graph::{DepKind, DepNodeIndex};\n use rustc_middle::mir::abstract_const::NotConstEvaluatable;\n@@ -608,10 +609,13 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                         if let (ty::ConstKind::Unevaluated(a), ty::ConstKind::Unevaluated(b)) =\n                             (c1.val, c2.val)\n                         {\n-                            if self\n-                                .tcx()\n-                                .try_unify_abstract_consts(((a.def, a.substs), (b.def, b.substs)))\n-                            {\n+                            let canonical = self.infcx.canonicalize_query(\n+                                ((a.def, a.substs), (b.def, b.substs)),\n+                                &mut OriginalQueryValues::default(),\n+                            );\n+                            debug!(\"canonical consts: {:?}\", &canonical.value);\n+\n+                            if self.tcx().try_unify_abstract_consts(canonical.value) {\n                                 return Ok(EvaluatedToOk);\n                             }\n                         }"}]}