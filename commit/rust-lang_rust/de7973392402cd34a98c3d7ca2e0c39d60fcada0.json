{"sha": "de7973392402cd34a98c3d7ca2e0c39d60fcada0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlNzk3MzM5MjQwMmNkMzRhOThjM2Q3Y2EyZTBjMzlkNjBmY2FkYTA=", "commit": {"author": {"name": "Krishna Veera Reddy", "email": "veerareddy@email.arizona.edu", "date": "2019-12-17T02:03:51Z"}, "committer": {"name": "Krishna Sai Veera Reddy", "email": "veerareddy@email.arizona.edu", "date": "2020-02-24T06:20:33Z"}, "message": "Lint expressions of the form `x.log(b) / y.log(b)`", "tree": {"sha": "0f23b9509b07c3911527264107de9d70bb58a88b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f23b9509b07c3911527264107de9d70bb58a88b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de7973392402cd34a98c3d7ca2e0c39d60fcada0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de7973392402cd34a98c3d7ca2e0c39d60fcada0", "html_url": "https://github.com/rust-lang/rust/commit/de7973392402cd34a98c3d7ca2e0c39d60fcada0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de7973392402cd34a98c3d7ca2e0c39d60fcada0/comments", "author": {"login": "krishna-veerareddy", "id": 41484652, "node_id": "MDQ6VXNlcjQxNDg0NjUy", "avatar_url": "https://avatars.githubusercontent.com/u/41484652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krishna-veerareddy", "html_url": "https://github.com/krishna-veerareddy", "followers_url": "https://api.github.com/users/krishna-veerareddy/followers", "following_url": "https://api.github.com/users/krishna-veerareddy/following{/other_user}", "gists_url": "https://api.github.com/users/krishna-veerareddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/krishna-veerareddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krishna-veerareddy/subscriptions", "organizations_url": "https://api.github.com/users/krishna-veerareddy/orgs", "repos_url": "https://api.github.com/users/krishna-veerareddy/repos", "events_url": "https://api.github.com/users/krishna-veerareddy/events{/privacy}", "received_events_url": "https://api.github.com/users/krishna-veerareddy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "krishna-veerareddy", "id": 41484652, "node_id": "MDQ6VXNlcjQxNDg0NjUy", "avatar_url": "https://avatars.githubusercontent.com/u/41484652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krishna-veerareddy", "html_url": "https://github.com/krishna-veerareddy", "followers_url": "https://api.github.com/users/krishna-veerareddy/followers", "following_url": "https://api.github.com/users/krishna-veerareddy/following{/other_user}", "gists_url": "https://api.github.com/users/krishna-veerareddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/krishna-veerareddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krishna-veerareddy/subscriptions", "organizations_url": "https://api.github.com/users/krishna-veerareddy/orgs", "repos_url": "https://api.github.com/users/krishna-veerareddy/repos", "events_url": "https://api.github.com/users/krishna-veerareddy/events{/privacy}", "received_events_url": "https://api.github.com/users/krishna-veerareddy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9520d3dfa4d3213ef07894dd99d201aeab255fa3", "url": "https://api.github.com/repos/rust-lang/rust/commits/9520d3dfa4d3213ef07894dd99d201aeab255fa3", "html_url": "https://github.com/rust-lang/rust/commit/9520d3dfa4d3213ef07894dd99d201aeab255fa3"}], "stats": {"total": 203, "additions": 190, "deletions": 13}, "files": [{"sha": "7f6dac87d04a4de8050c122e928a37ddf3afe6d1", "filename": "clippy_lints/src/floating_point_arithmetic.rs", "status": "modified", "additions": 91, "deletions": 12, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/de7973392402cd34a98c3d7ca2e0c39d60fcada0/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7973392402cd34a98c3d7ca2e0c39d60fcada0/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs?ref=de7973392402cd34a98c3d7ca2e0c39d60fcada0", "patch": "@@ -64,29 +64,31 @@ declare_clippy_lint! {\n \n declare_lint_pass!(FloatingPointArithmetic => [FLOATING_POINT_IMPROVEMENTS]);\n \n-fn check_log_base(cx: &LateContext<'_, '_>, expr: &Expr, args: &HirVec<Expr>) {\n-    let arg = sugg::Sugg::hir(cx, &args[0], \"..\").maybe_par();\n-\n-    if let Some((value, _)) = constant(cx, cx.tables, &args[1]) {\n-        let method;\n-\n+// Returns the specialized log method for a given base if base is constant\n+// and is one of 2, 10 and e\n+fn get_specialized_log_method(cx: &LateContext<'_, '_>, base: &Expr) -> Option<&'static str> {\n+    if let Some((value, _)) = constant(cx, cx.tables, base) {\n         if F32(2.0) == value || F64(2.0) == value {\n-            method = \"log2\";\n+            return Some(\"log2\");\n         } else if F32(10.0) == value || F64(10.0) == value {\n-            method = \"log10\";\n+            return Some(\"log10\");\n         } else if F32(f32_consts::E) == value || F64(f64_consts::E) == value {\n-            method = \"ln\";\n-        } else {\n-            return;\n+            return Some(\"ln\");\n         }\n+    }\n+\n+    None\n+}\n \n+fn check_log_base(cx: &LateContext<'_, '_>, expr: &Expr, args: &HirVec<Expr>) {\n+    if let Some(method) = get_specialized_log_method(cx, &args[1]) {\n         span_lint_and_sugg(\n             cx,\n             FLOATING_POINT_IMPROVEMENTS,\n             expr.span,\n             \"logarithm for bases 2, 10 and e can be computed more accurately\",\n             \"consider using\",\n-            format!(\"{}.{}()\", arg, method),\n+            format!(\"{}.{}()\", sugg::Sugg::hir(cx, &args[0], \"..\"), method),\n             Applicability::MachineApplicable,\n         );\n     }\n@@ -232,6 +234,82 @@ fn check_expm1(cx: &LateContext<'_, '_>, expr: &Expr) {\n     }\n }\n \n+// Checks whether two expressions evaluate to the same value\n+fn are_exprs_equivalent(cx: &LateContext<'_, '_>, left: &Expr, right: &Expr) -> bool {\n+    // Checks whether the values are constant and equal\n+    if_chain! {\n+        if let Some((left_value, _)) = constant(cx, cx.tables, left);\n+        if let Some((right_value, _)) = constant(cx, cx.tables, right);\n+        if left_value == right_value;\n+        then {\n+            return true;\n+        }\n+    }\n+\n+    // Checks whether the expressions resolve to the same variable\n+    if_chain! {\n+        if let ExprKind::Path(ref left_qpath) = left.kind;\n+        if let QPath::Resolved(_, ref left_path) = *left_qpath;\n+        if left_path.segments.len() == 1;\n+        if let def::Res::Local(left_local_id) = qpath_res(cx, left_qpath, left.hir_id);\n+        if let ExprKind::Path(ref right_qpath) = right.kind;\n+        if let QPath::Resolved(_, ref right_path) = *right_qpath;\n+        if right_path.segments.len() == 1;\n+        if let def::Res::Local(right_local_id) = qpath_res(cx, right_qpath, right.hir_id);\n+        if left_local_id == right_local_id;\n+        then {\n+            return true;\n+        }\n+    }\n+\n+    false\n+}\n+\n+fn check_log_division(cx: &LateContext<'_, '_>, expr: &Expr) {\n+    let log_methods = [\"log\", \"log2\", \"log10\", \"ln\"];\n+\n+    if_chain! {\n+        if let ExprKind::Binary(op, ref lhs, ref rhs) = expr.kind;\n+        if op.node == BinOpKind::Div;\n+        if cx.tables.expr_ty(lhs).is_floating_point();\n+        if let ExprKind::MethodCall(left_path, _, left_args) = &lhs.kind;\n+        if let ExprKind::MethodCall(right_path, _, right_args) = &rhs.kind;\n+        let left_method = left_path.ident.name.as_str();\n+        if left_method == right_path.ident.name.as_str();\n+        if log_methods.iter().any(|&method| left_method == method);\n+        then {\n+            let left_recv = &left_args[0];\n+            let right_recv = &right_args[0];\n+\n+            // Return early when bases are not equal\n+            if left_method == \"log\" && !are_exprs_equivalent(cx, &left_args[1], &right_args[1]) {\n+                return;\n+            }\n+\n+            // Reduce the expression further for bases 2, 10 and e\n+            let suggestion = if let Some(method) = get_specialized_log_method(cx, right_recv) {\n+                format!(\"{}.{}()\", sugg::Sugg::hir(cx, left_recv, \"..\"), method)\n+            } else {\n+                format!(\n+                    \"{}.log({})\",\n+                    sugg::Sugg::hir(cx, left_recv, \"..\"),\n+                    sugg::Sugg::hir(cx, right_recv, \"..\")\n+                )\n+            };\n+\n+            span_lint_and_sugg(\n+                cx,\n+                FLOATING_POINT_IMPROVEMENTS,\n+                expr.span,\n+                \"x.log(b) / y.log(b) can be reduced to x.log(y)\",\n+                \"consider using\",\n+                suggestion,\n+                Applicability::MachineApplicable,\n+            );\n+        }\n+    }\n+}\n+\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for FloatingPointArithmetic {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if let ExprKind::MethodCall(ref path, _, args) = &expr.kind {\n@@ -247,6 +325,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for FloatingPointArithmetic {\n             }\n         } else {\n             check_expm1(cx, expr);\n+            check_log_division(cx, expr);\n         }\n     }\n }"}, {"sha": "ff594941546112dde20f513275d60a86b64c9248", "filename": "tests/ui/floating_point_arithmetic.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/de7973392402cd34a98c3d7ca2e0c39d60fcada0/tests%2Fui%2Ffloating_point_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7973392402cd34a98c3d7ca2e0c39d60fcada0/tests%2Fui%2Ffloating_point_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_arithmetic.rs?ref=de7973392402cd34a98c3d7ca2e0c39d60fcada0", "patch": "@@ -82,4 +82,30 @@ fn check_expm1() {\n     let _ = x.exp() - 1.0 * 2.0;\n }\n \n+fn check_log_division() {\n+    let x = 3f32;\n+    let y = 2f32;\n+    let b = 4f32;\n+\n+    let _ = x.log2() / y.log2();\n+    let _ = x.log10() / y.log10();\n+    let _ = x.ln() / y.ln();\n+    let _ = x.log(4.0) / y.log(4.0);\n+    let _ = x.log(b) / y.log(b);\n+    let _ = x.log(b) / y.log(x);\n+    let _ = x.log(b) / 2f32.log(b);\n+\n+    let x = 3f64;\n+    let y = 2f64;\n+    let b = 4f64;\n+\n+    let _ = x.log2() / y.log2();\n+    let _ = x.log10() / y.log10();\n+    let _ = x.ln() / y.ln();\n+    let _ = x.log(4.0) / y.log(4.0);\n+    let _ = x.log(b) / y.log(b);\n+    let _ = x.log(b) / y.log(x);\n+    let _ = x.log(b) / 2f64.log(b);\n+}\n+\n fn main() {}"}, {"sha": "076b8d4fefe63ae515a432817d9b57bd59c31548", "filename": "tests/ui/floating_point_arithmetic.stderr", "status": "modified", "additions": 73, "deletions": 1, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/de7973392402cd34a98c3d7ca2e0c39d60fcada0/tests%2Fui%2Ffloating_point_arithmetic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de7973392402cd34a98c3d7ca2e0c39d60fcada0/tests%2Fui%2Ffloating_point_arithmetic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_arithmetic.stderr?ref=de7973392402cd34a98c3d7ca2e0c39d60fcada0", "patch": "@@ -192,5 +192,77 @@ error: (e.pow(x) - 1) can be computed more accurately\n LL |     let _ = x.exp() - 1.0 + 2.0;\n    |             ^^^^^^^^^^^^^ help: consider using: `x.exp_m1()`\n \n-error: aborting due to 32 previous errors\n+error: x.log(b) / y.log(b) can be reduced to x.log(y)\n+  --> $DIR/floating_point_arithmetic.rs:90:13\n+   |\n+LL |     let _ = x.log2() / y.log2();\n+   |             ^^^^^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n+\n+error: x.log(b) / y.log(b) can be reduced to x.log(y)\n+  --> $DIR/floating_point_arithmetic.rs:91:13\n+   |\n+LL |     let _ = x.log10() / y.log10();\n+   |             ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n+\n+error: x.log(b) / y.log(b) can be reduced to x.log(y)\n+  --> $DIR/floating_point_arithmetic.rs:92:13\n+   |\n+LL |     let _ = x.ln() / y.ln();\n+   |             ^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n+\n+error: x.log(b) / y.log(b) can be reduced to x.log(y)\n+  --> $DIR/floating_point_arithmetic.rs:93:13\n+   |\n+LL |     let _ = x.log(4.0) / y.log(4.0);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n+\n+error: x.log(b) / y.log(b) can be reduced to x.log(y)\n+  --> $DIR/floating_point_arithmetic.rs:94:13\n+   |\n+LL |     let _ = x.log(b) / y.log(b);\n+   |             ^^^^^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n+\n+error: x.log(b) / y.log(b) can be reduced to x.log(y)\n+  --> $DIR/floating_point_arithmetic.rs:96:13\n+   |\n+LL |     let _ = x.log(b) / 2f32.log(b);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.log2()`\n+\n+error: x.log(b) / y.log(b) can be reduced to x.log(y)\n+  --> $DIR/floating_point_arithmetic.rs:102:13\n+   |\n+LL |     let _ = x.log2() / y.log2();\n+   |             ^^^^^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n+\n+error: x.log(b) / y.log(b) can be reduced to x.log(y)\n+  --> $DIR/floating_point_arithmetic.rs:103:13\n+   |\n+LL |     let _ = x.log10() / y.log10();\n+   |             ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n+\n+error: x.log(b) / y.log(b) can be reduced to x.log(y)\n+  --> $DIR/floating_point_arithmetic.rs:104:13\n+   |\n+LL |     let _ = x.ln() / y.ln();\n+   |             ^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n+\n+error: x.log(b) / y.log(b) can be reduced to x.log(y)\n+  --> $DIR/floating_point_arithmetic.rs:105:13\n+   |\n+LL |     let _ = x.log(4.0) / y.log(4.0);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n+\n+error: x.log(b) / y.log(b) can be reduced to x.log(y)\n+  --> $DIR/floating_point_arithmetic.rs:106:13\n+   |\n+LL |     let _ = x.log(b) / y.log(b);\n+   |             ^^^^^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n+\n+error: x.log(b) / y.log(b) can be reduced to x.log(y)\n+  --> $DIR/floating_point_arithmetic.rs:108:13\n+   |\n+LL |     let _ = x.log(b) / 2f64.log(b);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.log2()`\n+\n+error: aborting due to 44 previous errors\n "}]}