{"sha": "3dfd8f7a64067d8b348ba597db10a06e2eccb773", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkZmQ4ZjdhNjQwNjdkOGIzNDhiYTU5N2RiMTBhMDZlMmVjY2I3NzM=", "commit": {"author": {"name": "Dan Robertson", "email": "dan@dlrobertson.com", "date": "2018-12-05T02:44:08Z"}, "committer": {"name": "Dan Robertson", "email": "dan@dlrobertson.com", "date": "2018-12-07T22:54:56Z"}, "message": "codegen: Fix va_list - aaarch64 iOS/Windows\n\nAccording to the Apple developer docs:\n\n> The type va_list is an alias for char * rather than for the struct\n> type specified in the generic PCS.\n\nThe current implementation uses the generic Aarch64 structure for VaList\nfor Aarch64 iOS.\n\nWindows always uses the char * variant of the va_list.", "tree": {"sha": "26939b48c8c82ebd9e0dd970fb81a001b42f0ff0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26939b48c8c82ebd9e0dd970fb81a001b42f0ff0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3dfd8f7a64067d8b348ba597db10a06e2eccb773", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF5dO2RaKc5C+SCJ9RcSmUsR+QqUFAlwK+kEACgkQRcSmUsR+\nQqXAohAAsUDOAwjW2q8Mec8v5yn2dYz+/RMb4dhxde5RGcFQA7TpHDKLcORjPNiZ\ngHccz38VzrXiBUdtnPFW6KRJ65aeyUF6I4m3yrXoBpJiqWUvJj/CYLwzYigPKVyN\nV1MSyjzoXvFQbbZ11gRxB/v+GgSxyJo1/gxbEPV85ZVHFMRqy14qE9hDmkfVYjvd\niKE+ufO/8YTk/90iK/YmnnVrSqKdmRTDFiZBMzLFZKlvl6u2puPcbEq83k+ikecc\nvoQxTlyHGs9FaQydSC270us7omnfAK60PiVXxawh+WIBDukLBA9DUwH/+Bz81dC1\nuBPgh9QZpY/EScddXruX+zUKoWsVAw58X4k0A07nON2Glecczqli36VMkz3y7j6H\n2+ydWVeNcO9Dzx8XOuz8kB4N6jnLl0IZL2mMF8NYbdzDEaiUFnpQyiVDBcL0p3yX\nNJ9+8gNQzSwX9UxfhZWu51byjDQsg/WLWbzzyEGGo1aLJMR4/qyXl+d/Vh0zPxse\nd4sr2dTwh03NFJhbrgfwU5UuYyOuMrFpSdi+tIIdwiM59bHSsugjGHrHjhrKQb6Q\nM3kSGcJa8lZ5NmZLJs6zIqd0o4CqD1ywQErBDlWEUXTo9Wa3fVU9GabbSLCsJ9hi\nV7RDV1L2nf1MkoRtBqG9TZiwHIznsVw/VllQGz9jNNUPY2whwqg=\n=5ohY\n-----END PGP SIGNATURE-----", "payload": "tree 26939b48c8c82ebd9e0dd970fb81a001b42f0ff0\nparent fc84f5f837a3e1b9b9bc992dd603d3d968502288\nauthor Dan Robertson <dan@dlrobertson.com> 1543977848 +0000\ncommitter Dan Robertson <dan@dlrobertson.com> 1544223296 +0000\n\ncodegen: Fix va_list - aaarch64 iOS/Windows\n\nAccording to the Apple developer docs:\n\n> The type va_list is an alias for char * rather than for the struct\n> type specified in the generic PCS.\n\nThe current implementation uses the generic Aarch64 structure for VaList\nfor Aarch64 iOS.\n\nWindows always uses the char * variant of the va_list.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3dfd8f7a64067d8b348ba597db10a06e2eccb773", "html_url": "https://github.com/rust-lang/rust/commit/3dfd8f7a64067d8b348ba597db10a06e2eccb773", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3dfd8f7a64067d8b348ba597db10a06e2eccb773/comments", "author": {"login": "dlrobertson", "id": 7504153, "node_id": "MDQ6VXNlcjc1MDQxNTM=", "avatar_url": "https://avatars.githubusercontent.com/u/7504153?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dlrobertson", "html_url": "https://github.com/dlrobertson", "followers_url": "https://api.github.com/users/dlrobertson/followers", "following_url": "https://api.github.com/users/dlrobertson/following{/other_user}", "gists_url": "https://api.github.com/users/dlrobertson/gists{/gist_id}", "starred_url": "https://api.github.com/users/dlrobertson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dlrobertson/subscriptions", "organizations_url": "https://api.github.com/users/dlrobertson/orgs", "repos_url": "https://api.github.com/users/dlrobertson/repos", "events_url": "https://api.github.com/users/dlrobertson/events{/privacy}", "received_events_url": "https://api.github.com/users/dlrobertson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dlrobertson", "id": 7504153, "node_id": "MDQ6VXNlcjc1MDQxNTM=", "avatar_url": "https://avatars.githubusercontent.com/u/7504153?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dlrobertson", "html_url": "https://github.com/dlrobertson", "followers_url": "https://api.github.com/users/dlrobertson/followers", "following_url": "https://api.github.com/users/dlrobertson/following{/other_user}", "gists_url": "https://api.github.com/users/dlrobertson/gists{/gist_id}", "starred_url": "https://api.github.com/users/dlrobertson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dlrobertson/subscriptions", "organizations_url": "https://api.github.com/users/dlrobertson/orgs", "repos_url": "https://api.github.com/users/dlrobertson/repos", "events_url": "https://api.github.com/users/dlrobertson/events{/privacy}", "received_events_url": "https://api.github.com/users/dlrobertson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc84f5f837a3e1b9b9bc992dd603d3d968502288", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc84f5f837a3e1b9b9bc992dd603d3d968502288", "html_url": "https://github.com/rust-lang/rust/commit/fc84f5f837a3e1b9b9bc992dd603d3d968502288"}], "stats": {"total": 38, "additions": 28, "deletions": 10}, "files": [{"sha": "60b8874bf76350f724406da5db703d09abd48dd2", "filename": "src/libcore/ffi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3dfd8f7a64067d8b348ba597db10a06e2eccb773/src%2Flibcore%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dfd8f7a64067d8b348ba597db10a06e2eccb773/src%2Flibcore%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fffi.rs?ref=3dfd8f7a64067d8b348ba597db10a06e2eccb773", "patch": "@@ -45,6 +45,7 @@ impl fmt::Debug for c_void {\n /// Basic implementation of a `va_list`.\n #[cfg(any(all(not(target_arch = \"aarch64\"), not(target_arch = \"powerpc\"),\n               not(target_arch = \"x86_64\")),\n+          all(target_arch = \"aarch4\", target_os = \"ios\"),\n           windows))]\n #[unstable(feature = \"c_variadic\",\n            reason = \"the `c_variadic` feature has not been properly tested on \\\n@@ -192,6 +193,7 @@ impl<'a> VaList<'a> {\n             where F: for<'copy> FnOnce(VaList<'copy>) -> R {\n         #[cfg(any(all(not(target_arch = \"aarch64\"), not(target_arch = \"powerpc\"),\n                       not(target_arch = \"x86_64\")),\n+                  all(target_arch = \"aarch4\", target_os = \"ios\"),\n                   windows))]\n         let mut ap = va_copy(self);\n         #[cfg(all(any(target_arch = \"aarch64\", target_arch = \"powerpc\", target_arch = \"x86_64\"),"}, {"sha": "1e5bb03ddb12b9387622a1ac32ba2bc4e314b9fe", "filename": "src/librustc_codegen_llvm/va_arg.rs", "status": "modified", "additions": 26, "deletions": 10, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3dfd8f7a64067d8b348ba597db10a06e2eccb773/src%2Flibrustc_codegen_llvm%2Fva_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dfd8f7a64067d8b348ba597db10a06e2eccb773/src%2Flibrustc_codegen_llvm%2Fva_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fva_arg.rs?ref=3dfd8f7a64067d8b348ba597db10a06e2eccb773", "patch": "@@ -105,13 +105,30 @@ pub(super) fn emit_va_arg(\n ) -> &'ll Value {\n     // Determine the va_arg implementation to use. The LLVM va_arg instruction\n     // is lacking in some instances, so we should only use it as a fallback.\n+    let target = &bx.cx.tcx.sess.target.target;\n     let arch = &bx.cx.tcx.sess.target.target.arch;\n-    match (&**arch,\n-           bx.cx.tcx.sess.target.target.options.is_like_windows) {\n+    match (&**arch, target.options.is_like_windows) {\n+        // Windows x86\n         (\"x86\", true) => {\n             emit_ptr_va_arg(bx, addr, target_ty, false,\n                             Align::from_bytes(4).unwrap(), false)\n         }\n+        // Generic x86\n+        (\"x86\", _) => {\n+            emit_ptr_va_arg(bx, addr, target_ty, false,\n+                            Align::from_bytes(4).unwrap(), true)\n+        }\n+        // Windows Aarch64\n+        (\"aarch4\", true) => {\n+            emit_ptr_va_arg(bx, addr, target_ty, false,\n+                            Align::from_bytes(8).unwrap(), false)\n+        }\n+        // iOS Aarch64\n+        (\"aarch4\", _) if target.target_os == \"ios\" => {\n+            emit_ptr_va_arg(bx, addr, target_ty, false,\n+                            Align::from_bytes(8).unwrap(), true)\n+        }\n+        // Windows x86_64\n         (\"x86_64\", true) => {\n             let target_ty_size = bx.cx.size_of(target_ty).bytes();\n             let indirect = if target_ty_size > 8 || !target_ty_size.is_power_of_two() {\n@@ -122,15 +139,14 @@ pub(super) fn emit_va_arg(\n             emit_ptr_va_arg(bx, addr, target_ty, indirect,\n                             Align::from_bytes(8).unwrap(), false)\n         }\n-        (\"x86\", false) => {\n-            emit_ptr_va_arg(bx, addr, target_ty, false,\n-                            Align::from_bytes(4).unwrap(), true)\n-        }\n+        // For all other architecture/OS combinations fall back to using\n+        // the LLVM va_arg instruction.\n+        // https://llvm.org/docs/LangRef.html#va-arg-instruction\n         _ => {\n-            let va_list = if (bx.tcx().sess.target.target.arch == \"aarch64\" ||\n-                              bx.tcx().sess.target.target.arch == \"x86_64\" ||\n-                              bx.tcx().sess.target.target.arch == \"powerpc\") &&\n-                             !bx.tcx().sess.target.target.options.is_like_windows {\n+            let va_list = if (target.arch == \"aarch64\" ||\n+                              target.arch == \"x86_64\" ||\n+                              target.arch == \"powerpc\") &&\n+                             !target.options.is_like_windows {\n                 bx.load(addr.immediate(), bx.tcx().data_layout.pointer_align.abi)\n             } else {\n                 addr.immediate()"}]}