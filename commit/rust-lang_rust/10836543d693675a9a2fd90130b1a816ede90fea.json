{"sha": "10836543d693675a9a2fd90130b1a816ede90fea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwODM2NTQzZDY5MzY3NWE5YTJmZDkwMTMwYjFhODE2ZWRlOTBmZWE=", "commit": {"author": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2020-04-30T15:41:48Z"}, "committer": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2020-04-30T15:41:48Z"}, "message": "Fixed tsfmt and eslint errors.", "tree": {"sha": "eeec3b5ab836bd65082c09ab0d38c94dfa1c1fb4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eeec3b5ab836bd65082c09ab0d38c94dfa1c1fb4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10836543d693675a9a2fd90130b1a816ede90fea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10836543d693675a9a2fd90130b1a816ede90fea", "html_url": "https://github.com/rust-lang/rust/commit/10836543d693675a9a2fd90130b1a816ede90fea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10836543d693675a9a2fd90130b1a816ede90fea/comments", "author": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb6f9c23e19eae9015bd859941c5e8cbf4622cba", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb6f9c23e19eae9015bd859941c5e8cbf4622cba", "html_url": "https://github.com/rust-lang/rust/commit/eb6f9c23e19eae9015bd859941c5e8cbf4622cba"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "50f93856d7566324de0556c8c434d448a380f359", "filename": "editors/code/src/cargo.ts", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/10836543d693675a9a2fd90130b1a816ede90fea/editors%2Fcode%2Fsrc%2Fcargo.ts", "raw_url": "https://github.com/rust-lang/rust/raw/10836543d693675a9a2fd90130b1a816ede90fea/editors%2Fcode%2Fsrc%2Fcargo.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcargo.ts?ref=10836543d693675a9a2fd90130b1a816ede90fea", "patch": "@@ -21,24 +21,24 @@ export class Cargo {\n     }\n \n     public async artifactsFromArgs(cargoArgs: string[]): Promise<CompilationArtifact[]> {\n-        let artifacts: CompilationArtifact[] = [];\n+        const artifacts: CompilationArtifact[] = [];\n \n         try {\n             await this.runCargo(cargoArgs,\n                 message => {\n-                    if (message.reason == 'compiler-artifact' && message.executable) {\n-                        let isBinary = message.target.crate_types.includes('bin');\n-                        let isBuildScript = message.target.kind.includes('custom-build');\n+                    if (message.reason === 'compiler-artifact' && message.executable) {\n+                        const isBinary = message.target.crate_types.includes('bin');\n+                        const isBuildScript = message.target.kind.includes('custom-build');\n                         if ((isBinary && !isBuildScript) || message.profile.test) {\n                             artifacts.push({\n                                 fileName: message.executable,\n                                 name: message.target.name,\n                                 kind: message.target.kind[0],\n                                 isTest: message.profile.test\n-                            })\n+                            });\n                         }\n                     }\n-                    else if( message.reason == 'compiler-message') {\n+                    else if (message.reason === 'compiler-message') {\n                         this.output.append(message.message.rendered);\n                     }\n                 },\n@@ -62,9 +62,9 @@ export class Cargo {\n             cargoArgs.push(...extraArgs);\n         }\n \n-        let artifacts = await this.artifactsFromArgs(cargoArgs);\n+        const artifacts = await this.artifactsFromArgs(cargoArgs);\n \n-        if (artifacts.length == 0 ) {\n+        if (artifacts.length === 0) {\n             throw new Error('No compilation artifacts');\n         } else if (artifacts.length > 1) {\n             throw new Error('Multiple compilation artifacts are not supported.');\n@@ -79,7 +79,7 @@ export class Cargo {\n         onStderrString: (data: string) => void\n     ): Promise<number> {\n         return new Promise<number>((resolve, reject) => {\n-            let cargo = cp.spawn('cargo', cargoArgs, {\n+            const cargo = cp.spawn('cargo', cargoArgs, {\n                 stdio: ['ignore', 'pipe', 'pipe'],\n                 cwd: this.rootFolder,\n                 env: this.env,\n@@ -92,14 +92,14 @@ export class Cargo {\n                 onStderrString(chunk.toString());\n             });\n \n-            let rl = readline.createInterface({ input: cargo.stdout });\n+            const rl = readline.createInterface({ input: cargo.stdout });\n             rl.on('line', line => {\n-                let message = JSON.parse(line);\n+                const message = JSON.parse(line);\n                 onStdoutJson(message);\n             });\n \n             cargo.on('exit', (exitCode, _) => {\n-                if (exitCode == 0)\n+                if (exitCode === 0)\n                     resolve(exitCode);\n                 else\n                     reject(new Error(`exit code: ${exitCode}.`));"}, {"sha": "36d309334852724e3329f77f972b098822c679cb", "filename": "editors/code/src/commands/runnables.ts", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/10836543d693675a9a2fd90130b1a816ede90fea/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts", "raw_url": "https://github.com/rust-lang/rust/raw/10836543d693675a9a2fd90130b1a816ede90fea/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts?ref=10836543d693675a9a2fd90130b1a816ede90fea", "patch": "@@ -82,9 +82,9 @@ const debugOutput = vscode.window.createOutputChannel(\"Debug\");\n \n async function getCppvsDebugConfig(config: ra.Runnable, sourceFileMap: Record<string, string>): Promise<vscode.DebugConfiguration> {\n     debugOutput.clear();\n-    \n-    let cargo = new Cargo(config.cwd || '.', debugOutput);\n-    let executable = await cargo.executableFromArgs(config.args, config.extraArgs);\n+\n+    const cargo = new Cargo(config.cwd || '.', debugOutput);\n+    const executable = await cargo.executableFromArgs(config.args, config.extraArgs);\n \n     // if we are here, there were no compilation errors.\n     return {\n@@ -106,9 +106,9 @@ export function debugSingle(ctx: Ctx): Cmd {\n         const lldbId = \"vadimcn.vscode-lldb\";\n         const cpptoolsId = \"ms-vscode.cpptools\";\n \n-        let debugEngineId = ctx.config.debug.engine;\n+        const debugEngineId = ctx.config.debug.engine;\n         let debugEngine = null;\n-        if ( debugEngineId === \"auto\" ) {\n+        if (debugEngineId === \"auto\") {\n             debugEngine = vscode.extensions.getExtension(lldbId);\n             if (!debugEngine) {\n                 debugEngine = vscode.extensions.getExtension(cpptoolsId);\n@@ -120,11 +120,11 @@ export function debugSingle(ctx: Ctx): Cmd {\n \n         if (!debugEngine) {\n             vscode.window.showErrorMessage(`Install [CodeLLDB](https://marketplace.visualstudio.com/items?itemName=${lldbId})`\n-            + ` or [MS C++ tools](https://marketplace.visualstudio.com/items?itemName=${cpptoolsId}) extension for debugging.`);\n+                + ` or [MS C++ tools](https://marketplace.visualstudio.com/items?itemName=${cpptoolsId}) extension for debugging.`);\n             return;\n         }\n \n-        const debugConfig = lldbId == debugEngine.id\n+        const debugConfig = lldbId === debugEngine.id\n             ? getLldbDebugConfig(config, ctx.config.debug.sourceFileMap)\n             : await getCppvsDebugConfig(config, ctx.config.debug.sourceFileMap);\n "}]}