{"sha": "96747c1a460a241c42a9aa262eeb37b910f06760", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2NzQ3YzFhNDYwYTI0MWM0MmE5YWEyNjJlZWIzN2I5MTBmMDY3NjA=", "commit": {"author": {"name": "Bastian Kersting", "email": "bastian@cmbt.de", "date": "2021-06-05T12:27:36Z"}, "committer": {"name": "Bastian Kersting", "email": "bastian@cmbt.de", "date": "2021-06-05T16:54:41Z"}, "message": "Enhance semicolon_if_nothing_returned according to #7324", "tree": {"sha": "eb1c2e540700117c76d888e044874011cd71c427", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb1c2e540700117c76d888e044874011cd71c427"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96747c1a460a241c42a9aa262eeb37b910f06760", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96747c1a460a241c42a9aa262eeb37b910f06760", "html_url": "https://github.com/rust-lang/rust/commit/96747c1a460a241c42a9aa262eeb37b910f06760", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96747c1a460a241c42a9aa262eeb37b910f06760/comments", "author": {"login": "1c3t3a", "id": 45260993, "node_id": "MDQ6VXNlcjQ1MjYwOTkz", "avatar_url": "https://avatars.githubusercontent.com/u/45260993?v=4", "gravatar_id": "", "url": "https://api.github.com/users/1c3t3a", "html_url": "https://github.com/1c3t3a", "followers_url": "https://api.github.com/users/1c3t3a/followers", "following_url": "https://api.github.com/users/1c3t3a/following{/other_user}", "gists_url": "https://api.github.com/users/1c3t3a/gists{/gist_id}", "starred_url": "https://api.github.com/users/1c3t3a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/1c3t3a/subscriptions", "organizations_url": "https://api.github.com/users/1c3t3a/orgs", "repos_url": "https://api.github.com/users/1c3t3a/repos", "events_url": "https://api.github.com/users/1c3t3a/events{/privacy}", "received_events_url": "https://api.github.com/users/1c3t3a/received_events", "type": "User", "site_admin": false}, "committer": {"login": "1c3t3a", "id": 45260993, "node_id": "MDQ6VXNlcjQ1MjYwOTkz", "avatar_url": "https://avatars.githubusercontent.com/u/45260993?v=4", "gravatar_id": "", "url": "https://api.github.com/users/1c3t3a", "html_url": "https://github.com/1c3t3a", "followers_url": "https://api.github.com/users/1c3t3a/followers", "following_url": "https://api.github.com/users/1c3t3a/following{/other_user}", "gists_url": "https://api.github.com/users/1c3t3a/gists{/gist_id}", "starred_url": "https://api.github.com/users/1c3t3a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/1c3t3a/subscriptions", "organizations_url": "https://api.github.com/users/1c3t3a/orgs", "repos_url": "https://api.github.com/users/1c3t3a/repos", "events_url": "https://api.github.com/users/1c3t3a/events{/privacy}", "received_events_url": "https://api.github.com/users/1c3t3a/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4a1e8524cb3b03e24be800e5abbf5e5a25d268d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4a1e8524cb3b03e24be800e5abbf5e5a25d268d", "html_url": "https://github.com/rust-lang/rust/commit/e4a1e8524cb3b03e24be800e5abbf5e5a25d268d"}], "stats": {"total": 83, "additions": 80, "deletions": 3}, "files": [{"sha": "9e5d5b6e956fab794f73a4d713b0db7a06f78691", "filename": "clippy_lints/src/semicolon_if_nothing_returned.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/96747c1a460a241c42a9aa262eeb37b910f06760/clippy_lints%2Fsrc%2Fsemicolon_if_nothing_returned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96747c1a460a241c42a9aa262eeb37b910f06760/clippy_lints%2Fsrc%2Fsemicolon_if_nothing_returned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsemicolon_if_nothing_returned.rs?ref=96747c1a460a241c42a9aa262eeb37b910f06760", "patch": "@@ -1,9 +1,9 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::snippet_with_macro_callsite;\n-use clippy_utils::{in_macro, sugg};\n+use clippy_utils::{get_parent_expr_for_hir, in_macro, spans_on_same_line, sugg};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n-use rustc_hir::{Block, ExprKind};\n+use rustc_hir::{Block, BlockCheckMode, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n@@ -46,6 +46,22 @@ impl LateLintPass<'_> for SemicolonIfNothingReturned {\n             if let snippet = snippet_with_macro_callsite(cx, expr.span, \"}\");\n             if !snippet.ends_with('}');\n             then {\n+                // check if the block is inside a closure or an unsafe block and don't\n+                // emit if the block is on the same line\n+                if_chain! {\n+                    if let Some(parent) = get_parent_expr_for_hir(cx, block.hir_id);\n+\n+                    if !matches!(block.rules, BlockCheckMode::DefaultBlock) ||\n+                    matches!(parent.kind, ExprKind::Closure(..) | ExprKind::Block(..));\n+\n+                    if block.stmts.len() == 0;\n+\n+                    if spans_on_same_line(cx, parent.span, expr.span);\n+                    then {\n+                        return;\n+                    }\n+                }\n+\n                 // filter out the desugared `for` loop\n                 if let ExprKind::DropTemps(..) = &expr.kind {\n                     return;"}, {"sha": "be625eb26551794f3ddde5fe5ae378846091d263", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/96747c1a460a241c42a9aa262eeb37b910f06760/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96747c1a460a241c42a9aa262eeb37b910f06760/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=96747c1a460a241c42a9aa262eeb37b910f06760", "patch": "@@ -820,6 +820,11 @@ fn line_span<T: LintContext>(cx: &T, span: Span) -> Span {\n     Span::new(line_start, span.hi(), span.ctxt())\n }\n \n+/// Checks if two spans begin on the same line.\n+pub fn spans_on_same_line<T: LintContext>(cx: &T, left_span: Span, right_span: Span) -> bool {\n+    line_span(cx, left_span).lo() == line_span(cx, right_span).lo()\n+}\n+\n /// Gets the parent node, if any.\n pub fn get_parent_node(tcx: TyCtxt<'_>, id: HirId) -> Option<Node<'_>> {\n     tcx.hir().parent_iter(id).next().map(|(_, node)| node)"}, {"sha": "79ba7402f1f49285a79b0de83952e5f46c272333", "filename": "tests/ui/semicolon_if_nothing_returned.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/96747c1a460a241c42a9aa262eeb37b910f06760/tests%2Fui%2Fsemicolon_if_nothing_returned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96747c1a460a241c42a9aa262eeb37b910f06760/tests%2Fui%2Fsemicolon_if_nothing_returned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsemicolon_if_nothing_returned.rs?ref=96747c1a460a241c42a9aa262eeb37b910f06760", "patch": "@@ -17,6 +17,24 @@ fn basic101(x: i32) {\n     y = x + 1\n }\n \n+#[rustfmt::skip]\n+fn closure_error() {\n+    let _d = || {\n+        hello()\n+    };\n+}\n+\n+#[rustfmt::skip]\n+fn unsafe_checks_error() {\n+    use std::mem::MaybeUninit;\n+    use std::ptr;\n+\n+    let mut s = MaybeUninit::<String>::uninit();\n+    let _d = || unsafe { \n+        ptr::drop_in_place(s.as_mut_ptr()) \n+    };\n+}\n+\n // this is fine\n fn print_sum(a: i32, b: i32) {\n     println!(\"{}\", a + b);\n@@ -53,3 +71,29 @@ fn loop_test(x: i32) {\n         println!(\"{}\", ext);\n     }\n }\n+\n+fn closure() {\n+    let _d = || hello();\n+}\n+\n+#[rustfmt::skip]\n+fn closure_block() {\n+    let _d = || { hello() };\n+}\n+\n+unsafe fn some_unsafe_op() {}\n+unsafe fn some_other_unsafe_fn() {}\n+\n+fn do_something() {\n+    unsafe { some_unsafe_op() };\n+\n+    unsafe { some_other_unsafe_fn() };\n+}\n+\n+fn unsafe_checks() {\n+    use std::mem::MaybeUninit;\n+    use std::ptr;\n+\n+    let mut s = MaybeUninit::<String>::uninit();\n+    let _d = || unsafe { ptr::drop_in_place(s.as_mut_ptr()) };\n+}"}, {"sha": "e88ebe2ad35f0bcacf64ed5f8ee3bc57e1227ae7", "filename": "tests/ui/semicolon_if_nothing_returned.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/96747c1a460a241c42a9aa262eeb37b910f06760/tests%2Fui%2Fsemicolon_if_nothing_returned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/96747c1a460a241c42a9aa262eeb37b910f06760/tests%2Fui%2Fsemicolon_if_nothing_returned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsemicolon_if_nothing_returned.stderr?ref=96747c1a460a241c42a9aa262eeb37b910f06760", "patch": "@@ -18,5 +18,17 @@ error: consider adding a `;` to the last statement for consistent formatting\n LL |     y = x + 1\n    |     ^^^^^^^^^ help: add a `;` here: `y = x + 1;`\n \n-error: aborting due to 3 previous errors\n+error: consider adding a `;` to the last statement for consistent formatting\n+  --> $DIR/semicolon_if_nothing_returned.rs:23:9\n+   |\n+LL |         hello()\n+   |         ^^^^^^^ help: add a `;` here: `hello();`\n+\n+error: consider adding a `;` to the last statement for consistent formatting\n+  --> $DIR/semicolon_if_nothing_returned.rs:34:9\n+   |\n+LL |         ptr::drop_in_place(s.as_mut_ptr()) \n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add a `;` here: `ptr::drop_in_place(s.as_mut_ptr());`\n+\n+error: aborting due to 5 previous errors\n "}]}