{"sha": "4da67855f13e2bb0f46b4b221c61311fd826f1de", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkYTY3ODU1ZjEzZTJiYjBmNDZiNGIyMjFjNjEzMTFmZDgyNmYxZGU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-11-06T18:50:30Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-11-06T18:50:30Z"}, "message": "Rustfmt", "tree": {"sha": "632e6d8c5d3ecb9f37127424e5ea56277f59be89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/632e6d8c5d3ecb9f37127424e5ea56277f59be89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4da67855f13e2bb0f46b4b221c61311fd826f1de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4da67855f13e2bb0f46b4b221c61311fd826f1de", "html_url": "https://github.com/rust-lang/rust/commit/4da67855f13e2bb0f46b4b221c61311fd826f1de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4da67855f13e2bb0f46b4b221c61311fd826f1de/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "509054d4dea5a8ea1cfa382db5f7c01b620fa8d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/509054d4dea5a8ea1cfa382db5f7c01b620fa8d2", "html_url": "https://github.com/rust-lang/rust/commit/509054d4dea5a8ea1cfa382db5f7c01b620fa8d2"}], "stats": {"total": 15, "additions": 5, "deletions": 10}, "files": [{"sha": "674e6d907510a8510607cea2c747a66d17238c74", "filename": "src/atomic_shim.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4da67855f13e2bb0f46b4b221c61311fd826f1de/src%2Fatomic_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da67855f13e2bb0f46b4b221c61311fd826f1de/src%2Fatomic_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fatomic_shim.rs?ref=4da67855f13e2bb0f46b4b221c61311fd826f1de", "patch": "@@ -7,8 +7,7 @@ use crate::prelude::*;\n \n #[cfg(all(feature = \"jit\", unix))]\n #[no_mangle]\n-static mut __cg_clif_global_atomic_mutex: libc::pthread_mutex_t =\n-    libc::PTHREAD_MUTEX_INITIALIZER;\n+static mut __cg_clif_global_atomic_mutex: libc::pthread_mutex_t = libc::PTHREAD_MUTEX_INITIALIZER;\n \n pub(crate) fn init_global_lock(\n     module: &mut impl Module,"}, {"sha": "aeeb93e2142e128823b6e406d596e8068f327fcf", "filename": "src/base.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4da67855f13e2bb0f46b4b221c61311fd826f1de/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da67855f13e2bb0f46b4b221c61311fd826f1de/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=4da67855f13e2bb0f46b4b221c61311fd826f1de", "patch": "@@ -499,7 +499,8 @@ fn codegen_stmt<'tcx>(\n                         UnOp::Neg => match layout.ty.kind() {\n                             ty::Int(IntTy::I128) => {\n                                 // FIXME remove this case once ineg.i128 works\n-                                let zero = CValue::const_val(fx, layout, ty::ScalarInt::null(layout.size));\n+                                let zero =\n+                                    CValue::const_val(fx, layout, ty::ScalarInt::null(layout.size));\n                                 crate::num::codegen_int_binop(fx, BinOp::Sub, zero, operand)\n                             }\n                             ty::Int(_) => CValue::by_val(fx.bcx.ins().ineg(val), layout),"}, {"sha": "8885a809c420ffe6d1eb11d6f762276c88eb2484", "filename": "src/constant.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4da67855f13e2bb0f46b4b221c61311fd826f1de/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da67855f13e2bb0f46b4b221c61311fd826f1de/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=4da67855f13e2bb0f46b4b221c61311fd826f1de", "patch": "@@ -163,10 +163,7 @@ pub(crate) fn codegen_const_value<'tcx>(\n     assert!(!layout.is_unsized(), \"sized const value\");\n \n     if layout.is_zst() {\n-        return CValue::by_ref(\n-            crate::Pointer::dangling(layout.align.pref),\n-            layout,\n-        );\n+        return CValue::by_ref(crate::Pointer::dangling(layout.align.pref), layout);\n     }\n \n     match const_val {\n@@ -186,9 +183,7 @@ pub(crate) fn codegen_const_value<'tcx>(\n             }\n \n             match x {\n-                Scalar::Int(int) => {\n-                    CValue::const_val(fx, layout, int)\n-                }\n+                Scalar::Int(int) => CValue::const_val(fx, layout, int),\n                 Scalar::Ptr(ptr) => {\n                     let alloc_kind = fx.tcx.get_global_alloc(ptr.alloc_id);\n                     let base_addr = match alloc_kind {"}]}