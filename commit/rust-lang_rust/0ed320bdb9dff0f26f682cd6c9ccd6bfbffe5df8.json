{"sha": "0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8", "node_id": "C_kwDOAAsO6NoAKDBlZDMyMGJkYjlkZmYwZjI2ZjY4MmNkNmM5Y2NkNmJmYmZmZTVkZjg", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-05-30T12:33:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-30T12:33:48Z"}, "message": "Rollup merge of #97494 - est31:remove_box_alloc_tests, r=Dylan-DPC\n\nUse Box::new() instead of box syntax in library tests\n\nThe tests inside `library/*` have no reason to use `box` syntax as they have 0 performance relevance. Therefore, we can safely remove them (instead of having to use alternatives like the one in #97293).", "tree": {"sha": "b2aa9546006a30e5d1ae2c9dc1e03b1dc2df6340", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2aa9546006a30e5d1ae2c9dc1e03b1dc2df6340"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJilLmsCRBK7hj4Ov3rIwAA32kIAKqSEafFET2oZQo0/yQcwVuF\nyLsusnxOpAF/uSFIcnYSs/qoTNZ8gLWfv7bEnufvSrRw7DBU//ux2kkngUy9r5oQ\nF+AI2UvTEbqX9VH4pOQoaRWAjxjfv8DfJJApJ6aN7vS3evtGp+NfH4XIH4Xv9/kz\nPRqPknDWQa9wRUigMHTkxuUCwkDNEjYcktM0yngMLvX/8FY/E0w24Fd6CCU+YzyC\no1X6YojdFI+HmDOA1HGyj99z6Qv4uHEQJrRZRaJPK66AjES+tMl6u+Rev2bqLUXl\nEewTjSDIdTQK+g2Mybw7cRh4a5yGz7vPfXKCeS2lNGXIRKzm+VguTpBdT7+S38c=\n=2GmE\n-----END PGP SIGNATURE-----\n", "payload": "tree b2aa9546006a30e5d1ae2c9dc1e03b1dc2df6340\nparent 5c780b98d10f48d6255cf2deb2643194b9221c02\nparent cdb8e64bc78400f9366db3b556bb01f470855f55\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1653914028 +0200\ncommitter GitHub <noreply@github.com> 1653914028 +0200\n\nRollup merge of #97494 - est31:remove_box_alloc_tests, r=Dylan-DPC\n\nUse Box::new() instead of box syntax in library tests\n\nThe tests inside `library/*` have no reason to use `box` syntax as they have 0 performance relevance. Therefore, we can safely remove them (instead of having to use alternatives like the one in #97293).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8", "html_url": "https://github.com/rust-lang/rust/commit/0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c780b98d10f48d6255cf2deb2643194b9221c02", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c780b98d10f48d6255cf2deb2643194b9221c02", "html_url": "https://github.com/rust-lang/rust/commit/5c780b98d10f48d6255cf2deb2643194b9221c02"}, {"sha": "cdb8e64bc78400f9366db3b556bb01f470855f55", "url": "https://api.github.com/repos/rust-lang/rust/commits/cdb8e64bc78400f9366db3b556bb01f470855f55", "html_url": "https://github.com/rust-lang/rust/commit/cdb8e64bc78400f9366db3b556bb01f470855f55"}], "stats": {"total": 168, "additions": 86, "deletions": 82}, "files": [{"sha": "7d560964d85be7108d99a51e50a3a180ae684858", "filename": "library/alloc/src/alloc/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8/library%2Falloc%2Fsrc%2Falloc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8/library%2Falloc%2Fsrc%2Falloc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Falloc%2Ftests.rs?ref=0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8", "patch": "@@ -25,6 +25,6 @@ fn allocate_zeroed() {\n #[cfg_attr(miri, ignore)] // isolated Miri does not support benchmarks\n fn alloc_owned_small(b: &mut Bencher) {\n     b.iter(|| {\n-        let _: Box<_> = box 10;\n+        let _: Box<_> = Box::new(10);\n     })\n }"}, {"sha": "5a05215aeeddfcd6b0e2f34c4c95f5a9b3b0714c", "filename": "library/alloc/src/collections/binary_heap/tests.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap%2Ftests.rs?ref=0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8", "patch": "@@ -183,22 +183,22 @@ fn test_push() {\n \n #[test]\n fn test_push_unique() {\n-    let mut heap = BinaryHeap::<Box<_>>::from(vec![box 2, box 4, box 9]);\n+    let mut heap = BinaryHeap::<Box<_>>::from(vec![Box::new(2), Box::new(4), Box::new(9)]);\n     assert_eq!(heap.len(), 3);\n     assert!(**heap.peek().unwrap() == 9);\n-    heap.push(box 11);\n+    heap.push(Box::new(11));\n     assert_eq!(heap.len(), 4);\n     assert!(**heap.peek().unwrap() == 11);\n-    heap.push(box 5);\n+    heap.push(Box::new(5));\n     assert_eq!(heap.len(), 5);\n     assert!(**heap.peek().unwrap() == 11);\n-    heap.push(box 27);\n+    heap.push(Box::new(27));\n     assert_eq!(heap.len(), 6);\n     assert!(**heap.peek().unwrap() == 27);\n-    heap.push(box 3);\n+    heap.push(Box::new(3));\n     assert_eq!(heap.len(), 7);\n     assert!(**heap.peek().unwrap() == 27);\n-    heap.push(box 103);\n+    heap.push(Box::new(103));\n     assert_eq!(heap.len(), 8);\n     assert!(**heap.peek().unwrap() == 103);\n }"}, {"sha": "e21c8aa3bd536d1fa4ecfda330f82df66f8985e1", "filename": "library/alloc/src/collections/linked_list.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs?ref=0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8", "patch": "@@ -791,7 +791,7 @@ impl<T> LinkedList<T> {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn push_front(&mut self, elt: T) {\n-        self.push_front_node(box Node::new(elt));\n+        self.push_front_node(Box::new(Node::new(elt)));\n     }\n \n     /// Removes the first element and returns it, or `None` if the list is\n@@ -834,7 +834,7 @@ impl<T> LinkedList<T> {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn push_back(&mut self, elt: T) {\n-        self.push_back_node(box Node::new(elt));\n+        self.push_back_node(Box::new(Node::new(elt)));\n     }\n \n     /// Removes the last element from a list and returns it, or `None` if"}, {"sha": "f8fbfa1bfbc87bdc171dfc785415779dedb2809e", "filename": "library/alloc/src/collections/linked_list/tests.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list%2Ftests.rs?ref=0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8", "patch": "@@ -12,20 +12,20 @@ fn test_basic() {\n     assert_eq!(m.pop_front(), None);\n     assert_eq!(m.pop_back(), None);\n     assert_eq!(m.pop_front(), None);\n-    m.push_front(box 1);\n-    assert_eq!(m.pop_front(), Some(box 1));\n-    m.push_back(box 2);\n-    m.push_back(box 3);\n+    m.push_front(Box::new(1));\n+    assert_eq!(m.pop_front(), Some(Box::new(1)));\n+    m.push_back(Box::new(2));\n+    m.push_back(Box::new(3));\n     assert_eq!(m.len(), 2);\n-    assert_eq!(m.pop_front(), Some(box 2));\n-    assert_eq!(m.pop_front(), Some(box 3));\n+    assert_eq!(m.pop_front(), Some(Box::new(2)));\n+    assert_eq!(m.pop_front(), Some(Box::new(3)));\n     assert_eq!(m.len(), 0);\n     assert_eq!(m.pop_front(), None);\n-    m.push_back(box 1);\n-    m.push_back(box 3);\n-    m.push_back(box 5);\n-    m.push_back(box 7);\n-    assert_eq!(m.pop_front(), Some(box 1));\n+    m.push_back(Box::new(1));\n+    m.push_back(Box::new(3));\n+    m.push_back(Box::new(5));\n+    m.push_back(Box::new(7));\n+    assert_eq!(m.pop_front(), Some(Box::new(1)));\n \n     let mut n = LinkedList::new();\n     n.push_front(2);"}, {"sha": "2b3736019ba40ee05627208d74604a33228d46c8", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8", "patch": "@@ -369,7 +369,8 @@ impl<T> Rc<T> {\n         // if the weak pointer is stored inside the strong one.\n         unsafe {\n             Self::from_inner(\n-                Box::leak(box RcBox { strong: Cell::new(1), weak: Cell::new(1), value }).into(),\n+                Box::leak(Box::new(RcBox { strong: Cell::new(1), weak: Cell::new(1), value }))\n+                    .into(),\n             )\n         }\n     }\n@@ -433,11 +434,11 @@ impl<T> Rc<T> {\n     {\n         // Construct the inner in the \"uninitialized\" state with a single\n         // weak reference.\n-        let uninit_ptr: NonNull<_> = Box::leak(box RcBox {\n+        let uninit_ptr: NonNull<_> = Box::leak(Box::new(RcBox {\n             strong: Cell::new(0),\n             weak: Cell::new(1),\n             value: mem::MaybeUninit::<T>::uninit(),\n-        })\n+        }))\n         .into();\n \n         let init_ptr: NonNull<RcBox<T>> = uninit_ptr.cast();"}, {"sha": "32433cfbdcff6f8ed173e9f81bc15e007fe0a8d7", "filename": "library/alloc/src/rc/tests.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8/library%2Falloc%2Fsrc%2Frc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8/library%2Falloc%2Fsrc%2Frc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc%2Ftests.rs?ref=0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8", "patch": "@@ -32,7 +32,7 @@ fn test_simple_clone() {\n \n #[test]\n fn test_destructor() {\n-    let x: Rc<Box<_>> = Rc::new(box 5);\n+    let x: Rc<Box<_>> = Rc::new(Box::new(5));\n     assert_eq!(**x, 5);\n }\n \n@@ -153,7 +153,7 @@ fn try_unwrap() {\n \n #[test]\n fn into_from_raw() {\n-    let x = Rc::new(box \"hello\");\n+    let x = Rc::new(Box::new(\"hello\"));\n     let y = x.clone();\n \n     let x_ptr = Rc::into_raw(x);\n@@ -192,7 +192,7 @@ fn test_into_from_raw_unsized() {\n \n #[test]\n fn into_from_weak_raw() {\n-    let x = Rc::new(box \"hello\");\n+    let x = Rc::new(Box::new(\"hello\"));\n     let y = Rc::downgrade(&x);\n \n     let y_ptr = Weak::into_raw(y);\n@@ -409,7 +409,7 @@ fn test_clone_from_slice_panic() {\n \n #[test]\n fn test_from_box() {\n-    let b: Box<u32> = box 123;\n+    let b: Box<u32> = Box::new(123);\n     let r: Rc<u32> = Rc::from(b);\n \n     assert_eq!(*r, 123);\n@@ -438,7 +438,7 @@ fn test_from_box_trait() {\n     use std::fmt::Display;\n     use std::string::ToString;\n \n-    let b: Box<dyn Display> = box 123;\n+    let b: Box<dyn Display> = Box::new(123);\n     let r: Rc<dyn Display> = Rc::from(b);\n \n     assert_eq!(r.to_string(), \"123\");\n@@ -448,7 +448,7 @@ fn test_from_box_trait() {\n fn test_from_box_trait_zero_sized() {\n     use std::fmt::Debug;\n \n-    let b: Box<dyn Debug> = box ();\n+    let b: Box<dyn Debug> = Box::new(());\n     let r: Rc<dyn Debug> = Rc::from(b);\n \n     assert_eq!(format!(\"{r:?}\"), \"()\");"}, {"sha": "d5ed3fd18c3b87f43b7191785e814e5a3abe509f", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8", "patch": "@@ -343,11 +343,11 @@ impl<T> Arc<T> {\n     pub fn new(data: T) -> Arc<T> {\n         // Start the weak pointer count as 1 which is the weak pointer that's\n         // held by all the strong pointers (kinda), see std/rc.rs for more info\n-        let x: Box<_> = box ArcInner {\n+        let x: Box<_> = Box::new(ArcInner {\n             strong: atomic::AtomicUsize::new(1),\n             weak: atomic::AtomicUsize::new(1),\n             data,\n-        };\n+        });\n         unsafe { Self::from_inner(Box::leak(x).into()) }\n     }\n \n@@ -411,11 +411,11 @@ impl<T> Arc<T> {\n     {\n         // Construct the inner in the \"uninitialized\" state with a single\n         // weak reference.\n-        let uninit_ptr: NonNull<_> = Box::leak(box ArcInner {\n+        let uninit_ptr: NonNull<_> = Box::leak(Box::new(ArcInner {\n             strong: atomic::AtomicUsize::new(0),\n             weak: atomic::AtomicUsize::new(1),\n             data: mem::MaybeUninit::<T>::uninit(),\n-        })\n+        }))\n         .into();\n         let init_ptr: NonNull<ArcInner<T>> = uninit_ptr.cast();\n "}, {"sha": "202d0e7f02057df1162e867982c4d6d09409d393", "filename": "library/alloc/src/sync/tests.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8/library%2Falloc%2Fsrc%2Fsync%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8/library%2Falloc%2Fsrc%2Fsync%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync%2Ftests.rs?ref=0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8", "patch": "@@ -103,7 +103,7 @@ fn try_unwrap() {\n \n #[test]\n fn into_from_raw() {\n-    let x = Arc::new(box \"hello\");\n+    let x = Arc::new(Box::new(\"hello\"));\n     let y = x.clone();\n \n     let x_ptr = Arc::into_raw(x);\n@@ -142,7 +142,7 @@ fn test_into_from_raw_unsized() {\n \n #[test]\n fn into_from_weak_raw() {\n-    let x = Arc::new(box \"hello\");\n+    let x = Arc::new(Box::new(\"hello\"));\n     let y = Arc::downgrade(&x);\n \n     let y_ptr = Weak::into_raw(y);\n@@ -467,7 +467,7 @@ fn test_clone_from_slice_panic() {\n \n #[test]\n fn test_from_box() {\n-    let b: Box<u32> = box 123;\n+    let b: Box<u32> = Box::new(123);\n     let r: Arc<u32> = Arc::from(b);\n \n     assert_eq!(*r, 123);\n@@ -496,7 +496,7 @@ fn test_from_box_trait() {\n     use std::fmt::Display;\n     use std::string::ToString;\n \n-    let b: Box<dyn Display> = box 123;\n+    let b: Box<dyn Display> = Box::new(123);\n     let r: Arc<dyn Display> = Arc::from(b);\n \n     assert_eq!(r.to_string(), \"123\");\n@@ -506,7 +506,7 @@ fn test_from_box_trait() {\n fn test_from_box_trait_zero_sized() {\n     use std::fmt::Debug;\n \n-    let b: Box<dyn Debug> = box ();\n+    let b: Box<dyn Debug> = Box::new(());\n     let r: Arc<dyn Debug> = Arc::from(b);\n \n     assert_eq!(format!(\"{r:?}\"), \"()\");"}, {"sha": "21f894343be097394aee870a5b71f83fec2f64ab", "filename": "library/alloc/tests/slice.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8/library%2Falloc%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8/library%2Falloc%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fslice.rs?ref=0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8", "patch": "@@ -268,9 +268,9 @@ fn test_swap_remove_fail() {\n fn test_swap_remove_noncopyable() {\n     // Tests that we don't accidentally run destructors twice.\n     let mut v: Vec<Box<_>> = Vec::new();\n-    v.push(box 0);\n-    v.push(box 0);\n-    v.push(box 0);\n+    v.push(Box::new(0));\n+    v.push(Box::new(0));\n+    v.push(Box::new(0));\n     let mut _e = v.swap_remove(0);\n     assert_eq!(v.len(), 2);\n     _e = v.swap_remove(1);\n@@ -296,7 +296,7 @@ fn test_push() {\n \n #[test]\n fn test_truncate() {\n-    let mut v: Vec<Box<_>> = vec![box 6, box 5, box 4];\n+    let mut v: Vec<Box<_>> = vec![Box::new(6), Box::new(5), Box::new(4)];\n     v.truncate(1);\n     let v = v;\n     assert_eq!(v.len(), 1);\n@@ -306,7 +306,7 @@ fn test_truncate() {\n \n #[test]\n fn test_clear() {\n-    let mut v: Vec<Box<_>> = vec![box 6, box 5, box 4];\n+    let mut v: Vec<Box<_>> = vec![Box::new(6), Box::new(5), Box::new(4)];\n     v.clear();\n     assert_eq!(v.len(), 0);\n     // If the unsafe block didn't drop things properly, we blow up here.\n@@ -1516,14 +1516,14 @@ fn test_mut_last() {\n \n #[test]\n fn test_to_vec() {\n-    let xs: Box<_> = box [1, 2, 3];\n+    let xs: Box<_> = Box::new([1, 2, 3]);\n     let ys = xs.to_vec();\n     assert_eq!(ys, [1, 2, 3]);\n }\n \n #[test]\n fn test_in_place_iterator_specialization() {\n-    let src: Box<[usize]> = box [1, 2, 3];\n+    let src: Box<[usize]> = Box::new([1, 2, 3]);\n     let src_ptr = src.as_ptr();\n     let sink: Box<_> = src.into_vec().into_iter().map(std::convert::identity).collect();\n     let sink_ptr = sink.as_ptr();"}, {"sha": "cc768c73c0e0391abf597e8a6f1a0ae9a9147d9b", "filename": "library/alloc/tests/vec.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8/library%2Falloc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8/library%2Falloc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fvec.rs?ref=0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8", "patch": "@@ -266,8 +266,8 @@ fn test_clone() {\n #[test]\n fn test_clone_from() {\n     let mut v = vec![];\n-    let three: Vec<Box<_>> = vec![box 1, box 2, box 3];\n-    let two: Vec<Box<_>> = vec![box 4, box 5];\n+    let three: Vec<Box<_>> = vec![Box::new(1), Box::new(2), Box::new(3)];\n+    let two: Vec<Box<_>> = vec![Box::new(4), Box::new(5)];\n     // zero, long\n     v.clone_from(&three);\n     assert_eq!(v, three);\n@@ -407,11 +407,11 @@ fn test_dedup_by() {\n \n #[test]\n fn test_dedup_unique() {\n-    let mut v0: Vec<Box<_>> = vec![box 1, box 1, box 2, box 3];\n+    let mut v0: Vec<Box<_>> = vec![Box::new(1), Box::new(1), Box::new(2), Box::new(3)];\n     v0.dedup();\n-    let mut v1: Vec<Box<_>> = vec![box 1, box 2, box 2, box 3];\n+    let mut v1: Vec<Box<_>> = vec![Box::new(1), Box::new(2), Box::new(2), Box::new(3)];\n     v1.dedup();\n-    let mut v2: Vec<Box<_>> = vec![box 1, box 2, box 3, box 3];\n+    let mut v2: Vec<Box<_>> = vec![Box::new(1), Box::new(2), Box::new(3), Box::new(3)];\n     v2.dedup();\n     // If the boxed pointers were leaked or otherwise misused, valgrind\n     // and/or rt should raise errors."}, {"sha": "0dffd137565b3dfb34123c04cdf3c78b3c547672", "filename": "library/core/tests/any.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8/library%2Fcore%2Ftests%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8/library%2Fcore%2Ftests%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fany.rs?ref=0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8", "patch": "@@ -24,8 +24,11 @@ fn any_referenced() {\n \n #[test]\n fn any_owning() {\n-    let (a, b, c) =\n-        (box 5_usize as Box<dyn Any>, box TEST as Box<dyn Any>, box Test as Box<dyn Any>);\n+    let (a, b, c) = (\n+        Box::new(5_usize) as Box<dyn Any>,\n+        Box::new(TEST) as Box<dyn Any>,\n+        Box::new(Test) as Box<dyn Any>,\n+    );\n \n     assert!(a.is::<usize>());\n     assert!(!b.is::<usize>());\n@@ -58,7 +61,7 @@ fn any_downcast_ref() {\n #[test]\n fn any_downcast_mut() {\n     let mut a = 5_usize;\n-    let mut b: Box<_> = box 7_usize;\n+    let mut b: Box<_> = Box::new(7_usize);\n \n     let a_r = &mut a as &mut dyn Any;\n     let tmp: &mut usize = &mut *b;"}, {"sha": "33ca9f2c6a3a1ef0995101c28e622d4c72bdf941", "filename": "library/core/tests/clone.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8/library%2Fcore%2Ftests%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8/library%2Fcore%2Ftests%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fclone.rs?ref=0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8", "patch": "@@ -8,8 +8,8 @@ fn test_borrowed_clone() {\n \n #[test]\n fn test_clone_from() {\n-    let a = box 5;\n-    let mut b = box 10;\n+    let a = Box::new(5);\n+    let mut b = Box::new(10);\n     b.clone_from(&a);\n     assert_eq!(*b, 5);\n }"}, {"sha": "00ef4a6e6a987bd6f6108ef1c98b01ea2864cfef", "filename": "library/core/tests/iter/traits/double_ended.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fdouble_ended.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fdouble_ended.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fdouble_ended.rs?ref=0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8", "patch": "@@ -78,7 +78,8 @@ fn test_rev_rposition() {\n #[test]\n #[should_panic]\n fn test_rposition_panic() {\n-    let v: [(Box<_>, Box<_>); 4] = [(box 0, box 0), (box 0, box 0), (box 0, box 0), (box 0, box 0)];\n+    let u = (Box::new(0), Box::new(0));\n+    let v: [(Box<_>, Box<_>); 4] = [u.clone(), u.clone(), u.clone(), u];\n     let mut i = 0;\n     v.iter().rposition(|_elt| {\n         if i == 2 {"}, {"sha": "7e9d7d27101802b66e40d1ba1a8e9f10019aa7fc", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8", "patch": "@@ -3,7 +3,6 @@\n #![feature(array_methods)]\n #![feature(array_windows)]\n #![feature(bench_black_box)]\n-#![feature(box_syntax)]\n #![feature(cell_update)]\n #![feature(const_assume)]\n #![feature(const_black_box)]"}, {"sha": "9f5e537dcefc0a8109af28ff4290e111163f214e", "filename": "library/core/tests/option.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8/library%2Fcore%2Ftests%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8/library%2Fcore%2Ftests%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Foption.rs?ref=0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8", "patch": "@@ -7,7 +7,7 @@ use core::option::*;\n #[test]\n fn test_get_ptr() {\n     unsafe {\n-        let x: Box<_> = box 0;\n+        let x: Box<_> = Box::new(0);\n         let addr_x: *const isize = mem::transmute(&*x);\n         let opt = Some(x);\n         let y = opt.unwrap();\n@@ -315,7 +315,7 @@ fn test_collect() {\n \n     // test that it does not take more elements than it needs\n     let mut functions: [Box<dyn Fn() -> Option<()>>; 3] =\n-        [box || Some(()), box || None, box || panic!()];\n+        [Box::new(|| Some(())), Box::new(|| None), Box::new(|| panic!())];\n \n     let v: Option<Vec<()>> = functions.iter_mut().map(|f| (*f)()).collect();\n "}, {"sha": "103e8cc3a96facada05da2bd5f1afba39c288613", "filename": "library/core/tests/result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8/library%2Fcore%2Ftests%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8/library%2Fcore%2Ftests%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fresult.rs?ref=0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8", "patch": "@@ -69,7 +69,7 @@ fn test_collect() {\n \n     // test that it does not take more elements than it needs\n     let mut functions: [Box<dyn Fn() -> Result<(), isize>>; 3] =\n-        [box || Ok(()), box || Err(1), box || panic!()];\n+        [Box::new(|| Ok(())), Box::new(|| Err(1)), Box::new(|| panic!())];\n \n     let v: Result<Vec<()>, isize> = functions.iter_mut().map(|f| (*f)()).collect();\n     assert!(v == Err(1));"}, {"sha": "8d7877bcad35d078108a042e2a8a102a76b334cd", "filename": "library/std/src/io/error/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8/library%2Fstd%2Fsrc%2Fio%2Ferror%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8/library%2Fstd%2Fsrc%2Fio%2Ferror%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror%2Ftests.rs?ref=0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8", "patch": "@@ -17,10 +17,10 @@ fn test_debug_error() {\n     let msg = error_string(code);\n     let kind = decode_error_kind(code);\n     let err = Error {\n-        repr: Repr::new_custom(box Custom {\n+        repr: Repr::new_custom(Box::new(Custom {\n             kind: ErrorKind::InvalidInput,\n-            error: box Error { repr: super::Repr::new_os(code) },\n-        }),\n+            error: Box::new(Error { repr: super::Repr::new_os(code) }),\n+        })),\n     };\n     let expected = format!(\n         \"Custom {{ \\"}, {"sha": "9f4f31ed051455ba3cf79aec04fa8b7972941ca5", "filename": "library/std/src/sync/mpsc/mpsc_queue/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fmpsc_queue%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fmpsc_queue%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fmpsc_queue%2Ftests.rs?ref=0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8", "patch": "@@ -6,8 +6,8 @@ use crate::thread;\n #[test]\n fn test_full() {\n     let q: Queue<Box<_>> = Queue::new();\n-    q.push(box 1);\n-    q.push(box 2);\n+    q.push(Box::new(1));\n+    q.push(Box::new(2));\n }\n \n #[test]"}, {"sha": "467ef3dbdcbbd687d8d76cfb67fdde6f6e40e867", "filename": "library/std/src/sync/mpsc/spsc_queue/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fspsc_queue%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fspsc_queue%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fspsc_queue%2Ftests.rs?ref=0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8", "patch": "@@ -47,8 +47,8 @@ fn peek() {\n fn drop_full() {\n     unsafe {\n         let q: Queue<Box<_>> = Queue::with_additions(0, (), ());\n-        q.push(box 1);\n-        q.push(box 2);\n+        q.push(Box::new(1));\n+        q.push(Box::new(2));\n     }\n }\n "}, {"sha": "e58649bab6e420bbf8915a6275ae35af7155e02e", "filename": "library/std/src/sync/mpsc/sync_tests.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fsync_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fsync_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fsync_tests.rs?ref=0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8", "patch": "@@ -20,7 +20,7 @@ fn smoke() {\n #[test]\n fn drop_full() {\n     let (tx, _rx) = sync_channel::<Box<isize>>(1);\n-    tx.send(box 1).unwrap();\n+    tx.send(Box::new(1)).unwrap();\n }\n \n #[test]\n@@ -238,7 +238,7 @@ fn oneshot_single_thread_send_port_close() {\n     // Testing that the sender cleans up the payload if receiver is closed\n     let (tx, rx) = sync_channel::<Box<i32>>(0);\n     drop(rx);\n-    assert!(tx.send(box 0).is_err());\n+    assert!(tx.send(Box::new(0)).is_err());\n }\n \n #[test]\n@@ -257,7 +257,7 @@ fn oneshot_single_thread_recv_chan_close() {\n #[test]\n fn oneshot_single_thread_send_then_recv() {\n     let (tx, rx) = sync_channel::<Box<i32>>(1);\n-    tx.send(box 10).unwrap();\n+    tx.send(Box::new(10)).unwrap();\n     assert!(*rx.recv().unwrap() == 10);\n }\n \n@@ -333,7 +333,7 @@ fn oneshot_multi_task_recv_then_send() {\n         assert!(*rx.recv().unwrap() == 10);\n     });\n \n-    tx.send(box 10).unwrap();\n+    tx.send(Box::new(10)).unwrap();\n }\n \n #[test]\n@@ -398,7 +398,7 @@ fn oneshot_multi_thread_send_recv_stress() {\n     for _ in 0..stress_factor() {\n         let (tx, rx) = sync_channel::<Box<i32>>(0);\n         let _t = thread::spawn(move || {\n-            tx.send(box 10).unwrap();\n+            tx.send(Box::new(10)).unwrap();\n         });\n         assert!(*rx.recv().unwrap() == 10);\n     }\n@@ -418,7 +418,7 @@ fn stream_send_recv_stress() {\n             }\n \n             thread::spawn(move || {\n-                tx.send(box i).unwrap();\n+                tx.send(Box::new(i)).unwrap();\n                 send(tx, i + 1);\n             });\n         }"}, {"sha": "4deb3e596157757f27d7948cb22ff5ee958a697f", "filename": "library/std/src/sync/mpsc/tests.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Ftests.rs?ref=0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8", "patch": "@@ -20,15 +20,15 @@ fn smoke() {\n #[test]\n fn drop_full() {\n     let (tx, _rx) = channel::<Box<isize>>();\n-    tx.send(box 1).unwrap();\n+    tx.send(Box::new(1)).unwrap();\n }\n \n #[test]\n fn drop_full_shared() {\n     let (tx, _rx) = channel::<Box<isize>>();\n     drop(tx.clone());\n     drop(tx.clone());\n-    tx.send(box 1).unwrap();\n+    tx.send(Box::new(1)).unwrap();\n }\n \n #[test]\n@@ -229,7 +229,7 @@ fn oneshot_single_thread_send_port_close() {\n     // Testing that the sender cleans up the payload if receiver is closed\n     let (tx, rx) = channel::<Box<i32>>();\n     drop(rx);\n-    assert!(tx.send(box 0).is_err());\n+    assert!(tx.send(Box::new(0)).is_err());\n }\n \n #[test]\n@@ -248,7 +248,7 @@ fn oneshot_single_thread_recv_chan_close() {\n #[test]\n fn oneshot_single_thread_send_then_recv() {\n     let (tx, rx) = channel::<Box<i32>>();\n-    tx.send(box 10).unwrap();\n+    tx.send(Box::new(10)).unwrap();\n     assert!(*rx.recv().unwrap() == 10);\n }\n \n@@ -309,7 +309,7 @@ fn oneshot_multi_task_recv_then_send() {\n         assert!(*rx.recv().unwrap() == 10);\n     });\n \n-    tx.send(box 10).unwrap();\n+    tx.send(Box::new(10)).unwrap();\n }\n \n #[test]\n@@ -374,7 +374,7 @@ fn oneshot_multi_thread_send_recv_stress() {\n     for _ in 0..stress_factor() {\n         let (tx, rx) = channel::<Box<isize>>();\n         let _t = thread::spawn(move || {\n-            tx.send(box 10).unwrap();\n+            tx.send(Box::new(10)).unwrap();\n         });\n         assert!(*rx.recv().unwrap() == 10);\n     }\n@@ -394,7 +394,7 @@ fn stream_send_recv_stress() {\n             }\n \n             thread::spawn(move || {\n-                tx.send(box i).unwrap();\n+                tx.send(Box::new(i)).unwrap();\n                 send(tx, i + 1);\n             });\n         }"}, {"sha": "5b8309cf5d273f8a4af4b4c1069ece9fec6525a7", "filename": "library/std/src/thread/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8/library%2Fstd%2Fsrc%2Fthread%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8/library%2Fstd%2Fsrc%2Fthread%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Ftests.rs?ref=0ed320bdb9dff0f26f682cd6c9ccd6bfbffe5df8", "patch": "@@ -127,7 +127,7 @@ where\n {\n     let (tx, rx) = channel();\n \n-    let x: Box<_> = box 1;\n+    let x: Box<_> = Box::new(1);\n     let x_in_parent = (&*x) as *const i32 as usize;\n \n     spawnfn(Box::new(move || {\n@@ -219,7 +219,7 @@ fn test_try_panic_any_message_owned_str() {\n #[test]\n fn test_try_panic_any_message_any() {\n     match thread::spawn(move || {\n-        panic_any(box 413u16 as Box<dyn Any + Send>);\n+        panic_any(Box::new(413u16) as Box<dyn Any + Send>);\n     })\n     .join()\n     {"}]}