{"sha": "450d35f582a100e25a394a188c34c283c837087e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1MGQzNWY1ODJhMTAwZTI1YTM5NGExODhjMzRjMjgzYzgzNzA4N2U=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2018-03-08T00:37:18Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2018-03-16T03:11:09Z"}, "message": "Remove unused  fields\n\nRelated to #46753", "tree": {"sha": "09995e0efe379fc804c9b1a4bb56d5d8be872fdf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09995e0efe379fc804c9b1a4bb56d5d8be872fdf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/450d35f582a100e25a394a188c34c283c837087e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/450d35f582a100e25a394a188c34c283c837087e", "html_url": "https://github.com/rust-lang/rust/commit/450d35f582a100e25a394a188c34c283c837087e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/450d35f582a100e25a394a188c34c283c837087e/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36b66873187e37a9d79adad89563088a9cb86028", "url": "https://api.github.com/repos/rust-lang/rust/commits/36b66873187e37a9d79adad89563088a9cb86028", "html_url": "https://github.com/rust-lang/rust/commit/36b66873187e37a9d79adad89563088a9cb86028"}], "stats": {"total": 22, "additions": 8, "deletions": 14}, "files": [{"sha": "edb4ebb6284e955da6179356ffc19f61dbf92f43", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/450d35f582a100e25a394a188c34c283c837087e/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450d35f582a100e25a394a188c34c283c837087e/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=450d35f582a100e25a394a188c34c283c837087e", "patch": "@@ -28,15 +28,13 @@ use rustc::hir;\n \n pub struct CheckTypeWellFormedVisitor<'a, 'tcx:'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    code: ObligationCauseCode<'tcx>,\n }\n \n /// Helper type of a temporary returned by .for_item(...).\n /// Necessary because we can't write the following bound:\n /// F: for<'b, 'tcx> where 'gcx: 'tcx FnOnce(FnCtxt<'b, 'gcx, 'tcx>).\n struct CheckWfFcxBuilder<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     inherited: super::InheritedBuilder<'a, 'gcx, 'tcx>,\n-    code: ObligationCauseCode<'gcx>,\n     id: ast::NodeId,\n     span: Span,\n     param_env: ty::ParamEnv<'tcx>,\n@@ -47,15 +45,13 @@ impl<'a, 'gcx, 'tcx> CheckWfFcxBuilder<'a, 'gcx, 'tcx> {\n         F: for<'b> FnOnce(&FnCtxt<'b, 'gcx, 'tcx>,\n                           &mut CheckTypeWellFormedVisitor<'b, 'gcx>) -> Vec<Ty<'tcx>>\n     {\n-        let code = self.code.clone();\n         let id = self.id;\n         let span = self.span;\n         let param_env = self.param_env;\n         self.inherited.enter(|inh| {\n             let fcx = FnCtxt::new(&inh, param_env, id);\n             let wf_tys = f(&fcx, &mut CheckTypeWellFormedVisitor {\n                 tcx: fcx.tcx.global_tcx(),\n-                code,\n             });\n             fcx.select_all_obligations_or_error();\n             fcx.regionck_item(id, span, &wf_tys);\n@@ -68,7 +64,6 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n                -> CheckTypeWellFormedVisitor<'a, 'gcx> {\n         CheckTypeWellFormedVisitor {\n             tcx,\n-            code: ObligationCauseCode::MiscObligation\n         }\n     }\n \n@@ -165,7 +160,7 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n                              item_id: ast::NodeId,\n                              span: Span,\n                              sig_if_method: Option<&hir::MethodSig>) {\n-        let code = self.code.clone();\n+        let code = ObligationCauseCode::MiscObligation;\n         self.for_id(item_id, span).with_fcx(|fcx, this| {\n             let item = fcx.tcx.associated_item(fcx.tcx.hir.local_def_id(item_id));\n \n@@ -213,7 +208,6 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n         let def_id = self.tcx.hir.local_def_id(id);\n         CheckWfFcxBuilder {\n             inherited: Inherited::build(self.tcx, def_id),\n-            code: self.code.clone(),\n             id,\n             span,\n             param_env: self.tcx.param_env(def_id),\n@@ -265,7 +259,7 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n \n                 // All field types must be well-formed.\n                 for field in &variant.fields {\n-                    fcx.register_wf_obligation(field.ty, field.span, this.code.clone())\n+                    fcx.register_wf_obligation(field.ty, field.span, ObligationCauseCode::MiscObligation)\n                 }\n             }\n \n@@ -300,11 +294,11 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n     {\n         debug!(\"check_item_type: {:?}\", item);\n \n-        self.for_item(item).with_fcx(|fcx, this| {\n+        self.for_item(item).with_fcx(|fcx, _this| {\n             let ty = fcx.tcx.type_of(fcx.tcx.hir.local_def_id(item.id));\n             let item_ty = fcx.normalize_associated_types_in(item.span, &ty);\n \n-            fcx.register_wf_obligation(item_ty, item.span, this.code.clone());\n+            fcx.register_wf_obligation(item_ty, item.span, ObligationCauseCode::MiscObligation);\n \n             vec![] // no implied bounds in a const etc\n         });\n@@ -339,7 +333,7 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n                 None => {\n                     let self_ty = fcx.tcx.type_of(item_def_id);\n                     let self_ty = fcx.normalize_associated_types_in(item.span, &self_ty);\n-                    fcx.register_wf_obligation(self_ty, ast_self_ty.span, this.code.clone());\n+                    fcx.register_wf_obligation(self_ty, ast_self_ty.span, ObligationCauseCode::MiscObligation);\n                 }\n             }\n \n@@ -374,7 +368,7 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n             // parameter includes another (e.g., <T, U = T>). In those cases, we can't\n             // be sure if it will error or not as user might always specify the other.\n             if !ty.needs_subst() {\n-                fcx.register_wf_obligation(ty, fcx.tcx.def_span(d), self.code.clone());\n+                fcx.register_wf_obligation(ty, fcx.tcx.def_span(d), ObligationCauseCode::MiscObligation);\n             }\n         }\n \n@@ -458,11 +452,11 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n         let sig = fcx.tcx.liberate_late_bound_regions(def_id, &sig);\n \n         for input_ty in sig.inputs() {\n-            fcx.register_wf_obligation(&input_ty, span, self.code.clone());\n+            fcx.register_wf_obligation(&input_ty, span, ObligationCauseCode::MiscObligation);\n         }\n         implied_bounds.extend(sig.inputs());\n \n-        fcx.register_wf_obligation(sig.output(), span, self.code.clone());\n+        fcx.register_wf_obligation(sig.output(), span, ObligationCauseCode::MiscObligation);\n \n         // FIXME(#25759) return types should not be implied bounds\n         implied_bounds.push(sig.output());"}]}