{"sha": "ac2faad26e2e252dd5596d9577388095ee7bdeee", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjMmZhYWQyNmUyZTI1MmRkNTU5NmQ5NTc3Mzg4MDk1ZWU3YmRlZWU=", "commit": {"author": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-05-18T17:02:21Z"}, "committer": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-05-18T17:05:25Z"}, "message": "Fold #include_str into the other source_utils.rs syntax extensions.", "tree": {"sha": "e5c549941f5f94956d0b15ea9fb9912f63129a5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5c549941f5f94956d0b15ea9fb9912f63129a5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac2faad26e2e252dd5596d9577388095ee7bdeee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac2faad26e2e252dd5596d9577388095ee7bdeee", "html_url": "https://github.com/rust-lang/rust/commit/ac2faad26e2e252dd5596d9577388095ee7bdeee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac2faad26e2e252dd5596d9577388095ee7bdeee/comments", "author": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07e775404f21b2a3e66e4038461918f73807f9f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/07e775404f21b2a3e66e4038461918f73807f9f9", "html_url": "https://github.com/rust-lang/rust/commit/07e775404f21b2a3e66e4038461918f73807f9f9"}], "stats": {"total": 115, "additions": 55, "deletions": 60}, "files": [{"sha": "aeca5b93e02ea213217d38d689309d2f7764df3b", "filename": "src/librustsyntax/ext/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac2faad26e2e252dd5596d9577388095ee7bdeee/src%2Flibrustsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac2faad26e2e252dd5596d9577388095ee7bdeee/src%2Flibrustsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fext%2Fbase.rs?ref=ac2faad26e2e252dd5596d9577388095ee7bdeee", "patch": "@@ -31,8 +31,6 @@ fn syntax_expander_table() -> hashmap<str, syntax_extension> {\n     syntax_expanders.insert(\"auto_serialize\",\n                             item_decorator(ext::auto_serialize::expand));\n     syntax_expanders.insert(\"env\", builtin(ext::env::expand_syntax_ext));\n-    syntax_expanders.insert(\"include_str\",\n-                            builtin(ext::include::str::expand_syntax_ext));\n     syntax_expanders.insert(\"macro\",\n                             macro_defining(ext::simplext::add_new_extension));\n     syntax_expanders.insert(\"concat_idents\",\n@@ -53,6 +51,8 @@ fn syntax_expander_table() -> hashmap<str, syntax_extension> {\n                             builtin(ext::source_util::expand_stringify));\n     syntax_expanders.insert(\"include\",\n                             builtin(ext::source_util::expand_include));\n+    syntax_expanders.insert(\"include_str\",\n+                            builtin(ext::source_util::expand_include_str));\n     syntax_expanders.insert(\"mod\",\n                             builtin(ext::source_util::expand_mod));\n     ret syntax_expanders;"}, {"sha": "e9391adb2227ae3b27c7cbddb9177c07b83eb29e", "filename": "src/librustsyntax/ext/include.rs", "status": "removed", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/07e775404f21b2a3e66e4038461918f73807f9f9/src%2Flibrustsyntax%2Fext%2Finclude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e775404f21b2a3e66e4038461918f73807f9f9/src%2Flibrustsyntax%2Fext%2Finclude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fext%2Finclude.rs?ref=07e775404f21b2a3e66e4038461918f73807f9f9", "patch": "@@ -1,49 +0,0 @@\n-/*\n- * The compiler code necessary to support the #include and #include_str\n- * extensions.  Eventually this should all get sucked into either the compiler\n- * syntax extension plugin interface.\n- */\n-\n-import diagnostic::span_handler;\n-import base::*;\n-export str;\n-\n-// FIXME: implement plain #include, restarting the parser on the included\n-// file. Currently only implement #include_str.\n-\n-mod str {\n-    fn expand_syntax_ext(cx: ext_ctxt, sp: codemap::span, arg: ast::mac_arg,\n-                         _body: ast::mac_body) -> @ast::expr {\n-        let args = get_mac_args(cx,sp,arg,1u,option::some(1u),\"include_str\");\n-\n-        let mut path = expr_to_str(cx, args[0], \"#include_str requires \\\n-                                                 a string\");\n-\n-        // NB: relative paths are resolved relative to the compilation unit\n-        if !path::path_is_absolute(path) {\n-            let cu = codemap::span_to_filename(sp, cx.codemap());\n-            let dir = path::dirname(cu);\n-            path = path::connect(dir, path);\n-        }\n-\n-        alt io::read_whole_file_str(path) {\n-          result::ok(src) { ret make_new_str(cx, sp, src); }\n-          result::err(e) {\n-            cx.parse_sess().span_diagnostic.handler().fatal(e)\n-          }\n-        }\n-    }\n-}\n-\n-fn make_new_str(cx: ext_ctxt, sp: codemap::span, s: str) -> @ast::expr {\n-    ret make_new_lit(cx, sp, ast::lit_str(s));\n-}\n-//\n-// Local Variables:\n-// mode: rust\n-// fill-column: 78;\n-// indent-tabs-mode: nil\n-// c-basic-offset: 4\n-// buffer-file-coding-system: utf-8-unix\n-// End:\n-//"}, {"sha": "3cb8db18b82c0e289898e2fcb6b584c46762d7d0", "filename": "src/librustsyntax/ext/source_util.rs", "status": "modified", "additions": 50, "deletions": 8, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/ac2faad26e2e252dd5596d9577388095ee7bdeee/src%2Flibrustsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac2faad26e2e252dd5596d9577388095ee7bdeee/src%2Flibrustsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fext%2Fsource_util.rs?ref=ac2faad26e2e252dd5596d9577388095ee7bdeee", "patch": "@@ -3,6 +3,14 @@ import ast;\n import codemap::span;\n import print::pprust;\n \n+export expand_line;\n+export expand_col;\n+export expand_file;\n+export expand_stringify;\n+export expand_mod;\n+export expand_include;\n+export expand_include_str;\n+\n /* #line(): expands to the current line number */\n fn expand_line(cx: ext_ctxt, sp: span, arg: ast::mac_arg,\n                _body: ast::mac_body) -> @ast::expr {\n@@ -35,19 +43,53 @@ fn expand_stringify(cx: ext_ctxt, sp: span, arg: ast::mac_arg,\n     ret make_new_lit(cx, sp, ast::lit_str(pprust::expr_to_str(args[0])));\n }\n \n+fn expand_mod(cx: ext_ctxt, sp: span, arg: ast::mac_arg, _body: ast::mac_body)\n+    -> @ast::expr {\n+    get_mac_args(cx, sp, arg, 0u, option::some(0u), \"file\");\n+    ret make_new_lit(cx, sp, ast::lit_str(str::connect(cx.mod_path(), \"::\")));\n+}\n+\n fn expand_include(cx: ext_ctxt, sp: span, arg: ast::mac_arg,\n                   _body: ast::mac_body) -> @ast::expr {\n     let args = get_mac_args(cx, sp, arg, 1u, option::some(1u), \"include\");\n-    let loc = codemap::lookup_char_pos(cx.codemap(), sp.lo);\n-    let path = path::connect(path::dirname(loc.file.name),\n-        expr_to_str(cx, args[0], \"#include requires a string literal\"));\n-    let p = parse::new_parser_from_file(cx.parse_sess(), cx.cfg(), path,\n+    let file = expr_to_str(cx, args[0], \"#include_str requires a string\");\n+    let p = parse::new_parser_from_file(cx.parse_sess(), cx.cfg(),\n+                                        res_rel_file(cx, sp, file),\n                                         parse::parser::SOURCE_FILE);\n     ret parse::parser::parse_expr(p)\n }\n \n-fn expand_mod(cx: ext_ctxt, sp: span, arg: ast::mac_arg, _body: ast::mac_body)\n-    -> @ast::expr {\n-    get_mac_args(cx, sp, arg, 0u, option::some(0u), \"file\");\n-    ret make_new_lit(cx, sp, ast::lit_str(str::connect(cx.mod_path(), \"::\")));\n+fn expand_include_str(cx: ext_ctxt, sp: codemap::span, arg: ast::mac_arg,\n+                      _body: ast::mac_body) -> @ast::expr {\n+    let args = get_mac_args(cx,sp,arg,1u,option::some(1u),\"include_str\");\n+\n+    let file = expr_to_str(cx, args[0], \"#include_str requires a string\");\n+\n+    alt io::read_whole_file_str(res_rel_file(cx, sp, file)) {\n+      result::ok(src) { ret make_new_lit(cx, sp, ast::lit_str(src)); }\n+      result::err(e) {\n+        cx.parse_sess().span_diagnostic.handler().fatal(e)\n+      }\n+    }\n+}\n+\n+fn res_rel_file(cx: ext_ctxt, sp: codemap::span, arg: path) -> path {\n+    // NB: relative paths are resolved relative to the compilation unit\n+    if !path::path_is_absolute(arg) {\n+        let cu = codemap::span_to_filename(sp, cx.codemap());\n+        let dir = path::dirname(cu);\n+        ret path::connect(dir, arg);\n+    } else {\n+        ret arg;\n+    }\n }\n+\n+//\n+// Local Variables:\n+// mode: rust\n+// fill-column: 78;\n+// indent-tabs-mode: nil\n+// c-basic-offset: 4\n+// buffer-file-coding-system: utf-8-unix\n+// End:\n+//"}, {"sha": "29d65d13fbb44426418033b9ee65ce7042972675", "filename": "src/librustsyntax/rustsyntax.rc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ac2faad26e2e252dd5596d9577388095ee7bdeee/src%2Flibrustsyntax%2Frustsyntax.rc", "raw_url": "https://github.com/rust-lang/rust/raw/ac2faad26e2e252dd5596d9577388095ee7bdeee/src%2Flibrustsyntax%2Frustsyntax.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Frustsyntax.rc?ref=ac2faad26e2e252dd5596d9577388095ee7bdeee", "patch": "@@ -63,7 +63,6 @@ mod ext {\n     mod simplext;\n     mod concat_idents;\n     mod ident_to_str;\n-    mod include;\n     mod log_syntax;\n     mod auto_serialize;\n     mod source_util;"}, {"sha": "e9eb5d6a50343c30605ee39b245145ce30447036", "filename": "src/test/run-pass/syntax-extension-source-utils.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ac2faad26e2e252dd5596d9577388095ee7bdeee/src%2Ftest%2Frun-pass%2Fsyntax-extension-source-utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac2faad26e2e252dd5596d9577388095ee7bdeee/src%2Ftest%2Frun-pass%2Fsyntax-extension-source-utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsyntax-extension-source-utils.rs?ref=ac2faad26e2e252dd5596d9577388095ee7bdeee", "patch": "@@ -14,6 +14,9 @@ fn main() {\n     assert(#stringify[(2*3) + 5] == \"2 * 3 + 5\");\n     assert(#include[\"syntax-extension-source-utils-files/includeme.fragment\"]\n            == \"victory robot 6\");\n+    assert(\n+        #include_str[\"syntax-extension-source-utils-files/includeme.fragment\"]\n+        .starts_with(\"/* this is for \"));\n     // The Windows tests are wrapped in an extra module for some reason\n     assert(m1::m2::where_am_i().ends_with(\"m1::m2\"));\n }"}]}