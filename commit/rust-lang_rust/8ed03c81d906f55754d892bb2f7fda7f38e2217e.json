{"sha": "8ed03c81d906f55754d892bb2f7fda7f38e2217e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlZDAzYzgxZDkwNmY1NTc1NGQ4OTJiYjJmN2ZkYTdmMzhlMjIxN2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-25T05:43:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-25T05:43:43Z"}, "message": "Auto merge of #30049 - Manishearth:rollup, r=Manishearth\n\n- Successful merges: #30013, #30038, #30040\n- Failed merges: #30030", "tree": {"sha": "13e010758e11aa83f6ee56571c125c7505423315", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13e010758e11aa83f6ee56571c125c7505423315"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ed03c81d906f55754d892bb2f7fda7f38e2217e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ed03c81d906f55754d892bb2f7fda7f38e2217e", "html_url": "https://github.com/rust-lang/rust/commit/8ed03c81d906f55754d892bb2f7fda7f38e2217e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ed03c81d906f55754d892bb2f7fda7f38e2217e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7fa2c6ca31ae7ad8beb35ed11493339684786a10", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fa2c6ca31ae7ad8beb35ed11493339684786a10", "html_url": "https://github.com/rust-lang/rust/commit/7fa2c6ca31ae7ad8beb35ed11493339684786a10"}, {"sha": "529689f0dc7b877b7e47cee53d66af2e97664a4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/529689f0dc7b877b7e47cee53d66af2e97664a4d", "html_url": "https://github.com/rust-lang/rust/commit/529689f0dc7b877b7e47cee53d66af2e97664a4d"}], "stats": {"total": 112, "additions": 96, "deletions": 16}, "files": [{"sha": "ace0fbc821a27764e19b3a0c5fc7a4b06cc971d6", "filename": "src/doc/book/dining-philosophers.md", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8ed03c81d906f55754d892bb2f7fda7f38e2217e/src%2Fdoc%2Fbook%2Fdining-philosophers.md", "raw_url": "https://github.com/rust-lang/rust/raw/8ed03c81d906f55754d892bb2f7fda7f38e2217e/src%2Fdoc%2Fbook%2Fdining-philosophers.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fdining-philosophers.md?ref=8ed03c81d906f55754d892bb2f7fda7f38e2217e", "patch": "@@ -45,8 +45,17 @@ Now, let\u2019s imagine this sequence of events:\n 6. ... ? All the forks are taken, but nobody can eat!\n \n There are different ways to solve this problem. We\u2019ll get to our solution in\n-the tutorial itself. For now, let\u2019s get started modeling the problem itself.\n-We\u2019ll start with the philosophers:\n+the tutorial itself. For now, let\u2019s get started and create a new project with\n+`cargo`:\n+\n+```bash\n+$ cd ~/projects\n+$ cargo new dining_philosophers --bin\n+$ cd dining_philosophers\n+```\n+\n+Now we can start modeling the problem itself. We\u2019ll start with the philosophers\n+in `src/main.rs`:\n \n ```rust\n struct Philosopher {"}, {"sha": "45a47ae075e72b42780ce7cc390cc59d7aeb92f6", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8ed03c81d906f55754d892bb2f7fda7f38e2217e/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ed03c81d906f55754d892bb2f7fda7f38e2217e/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=8ed03c81d906f55754d892bb2f7fda7f38e2217e", "patch": "@@ -637,6 +637,11 @@ impl<T: ?Sized> Weak<T> {\n                 return None\n             }\n \n+            // See comments in `Arc::clone` for why we do this (for `mem::forget`).\n+            if n > MAX_REFCOUNT {\n+                unsafe { abort(); }\n+            }\n+\n             // Relaxed is valid for the same reason it is on Arc's Clone impl\n             let old = inner.strong.compare_and_swap(n, n + 1, Relaxed);\n             if old == n {"}, {"sha": "d5a2de69c0271c47f7285631ef0ed65cdcf883e2", "filename": "src/librustc_unicode/char.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8ed03c81d906f55754d892bb2f7fda7f38e2217e/src%2Flibrustc_unicode%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ed03c81d906f55754d892bb2f7fda7f38e2217e/src%2Flibrustc_unicode%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Fchar.rs?ref=8ed03c81d906f55754d892bb2f7fda7f38e2217e", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! A Unicode scalar value\n+//! Unicode scalar values\n //!\n //! This module provides the `CharExt` trait, as well as its\n //! implementation for the primitive `char` type, in order to allow\n@@ -244,11 +244,12 @@ impl char {\n     /// character, as `char`s.\n     ///\n     /// All characters are escaped with Rust syntax of the form `\\\\u{NNNN}`\n-    /// where `NNNN` is the shortest hexadecimal representation of the code\n-    /// point.\n+    /// where `NNNN` is the shortest hexadecimal representation.\n     ///\n     /// # Examples\n     ///\n+    /// Basic usage:\n+    ///\n     /// ```\n     /// for c in '\u2764'.escape_unicode() {\n     ///     print!(\"{}\", c);\n@@ -384,6 +385,8 @@ impl char {\n     ///\n     /// # Examples\n     ///\n+    /// Basic usage:\n+    ///\n     /// ```\n     /// let n = '\u00df'.len_utf16();\n     /// assert_eq!(n, 1);\n@@ -858,6 +861,8 @@ pub struct DecodeUtf16<I>\n ///\n /// # Examples\n ///\n+/// Basic usage:\n+///\n /// ```\n /// #![feature(decode_utf16)]\n ///"}, {"sha": "aec8b6b1b222d100e324d07d654d00c53ad1f665", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 72, "deletions": 11, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/8ed03c81d906f55754d892bb2f7fda7f38e2217e/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ed03c81d906f55754d892bb2f7fda7f38e2217e/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=8ed03c81d906f55754d892bb2f7fda7f38e2217e", "patch": "@@ -16,21 +16,82 @@ mod prim_bool { }\n \n #[doc(primitive = \"char\")]\n //\n-/// A Unicode scalar value.\n+/// A character type.\n ///\n-/// A `char` represents a\n-/// *[Unicode scalar\n-/// value](http://www.unicode.org/glossary/#unicode_scalar_value)*, as it can\n-/// contain any Unicode code point except high-surrogate and low-surrogate code\n-/// points.\n+/// The `char` type represents a single character. More specifically, since\n+/// 'character' isn't a well-defined concept in Unicode, `char` is a '[Unicode\n+/// scalar value]', which is similar to, but not the same as, a '[Unicode code\n+/// point]'.\n ///\n-/// As such, only values in the ranges \\[0x0,0xD7FF\\] and \\[0xE000,0x10FFFF\\]\n-/// (inclusive) are allowed. A `char` can always be safely cast to a `u32`;\n-/// however the converse is not always true due to the above range limits\n-/// and, as such, should be performed via the `from_u32` function.\n+/// [Unicode scalar value]: http://www.unicode.org/glossary/#unicode_scalar_value\n+/// [Unicode code point]: http://www.unicode.org/glossary/#code_point\n ///\n-/// *[See also the `std::char` module](char/index.html).*\n+/// This documentation describes a number of methods and trait implementations on the\n+/// `char` type. For technical reasons, there is additional, separate\n+/// documentation in [the `std::char` module](char/index.html) as well.\n ///\n+/// # Representation\n+///\n+/// `char` is always four bytes in size. This is a different representation than\n+/// a given character would have as part of a [`String`], for example:\n+///\n+/// ```\n+/// let v = vec!['h', 'e', 'l', 'l', 'o'];\n+///\n+/// // five elements times four bytes for each element\n+/// assert_eq!(20, v.len() * std::mem::size_of::<char>());\n+///\n+/// let s = String::from(\"hello\");\n+///\n+/// // five elements times one byte per element\n+/// assert_eq!(5, s.len() * std::mem::size_of::<u8>());\n+/// ```\n+///\n+/// [`String`]: string/struct.String.html\n+///\n+/// As always, remember that a human intuition for 'character' may not map to\n+/// Unicode's definitions. For example, emoji symbols such as '\u2764\ufe0f' are more than\n+/// one byte; \u2764\ufe0f in particular is six:\n+///\n+/// ```\n+/// let s = String::from(\"\u2764\ufe0f\");\n+///\n+/// // six bytes times one byte for each element\n+/// assert_eq!(6, s.len() * std::mem::size_of::<u8>());\n+/// ```\n+///\n+/// This also means it won't fit into a `char`, and so trying to create a\n+/// literal with `let heart = '\u2764\ufe0f';` gives an error:\n+///\n+/// ```text\n+/// error: character literal may only contain one codepoint: '\u2764\n+/// let heart = '\u2764\ufe0f';\n+///             ^~\n+/// ```\n+///\n+/// Another implication of this is that if you want to do per-`char`acter\n+/// processing, it can end up using a lot more memory:\n+///\n+/// ```\n+/// let s = String::from(\"love: \u2764\ufe0f\");\n+/// let v: Vec<char> = s.chars().collect();\n+///\n+/// assert_eq!(12, s.len() * std::mem::size_of::<u8>());\n+/// assert_eq!(32, v.len() * std::mem::size_of::<char>());\n+/// ```\n+///\n+/// Or may give you results you may not expect:\n+///\n+/// ```\n+/// let s = String::from(\"\u2764\ufe0f\");\n+///\n+/// let mut iter = s.chars();\n+///\n+/// // we get two chars out of a single \u2764\ufe0f\n+/// assert_eq!(Some('\\u{2764}'), iter.next());\n+/// assert_eq!(Some('\\u{fe0f}'), iter.next());\n+/// assert_eq!(None, iter.next());\n+/// ```\n mod prim_char { }\n \n #[doc(primitive = \"unit\")]"}]}