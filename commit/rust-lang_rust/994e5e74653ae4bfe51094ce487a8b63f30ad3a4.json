{"sha": "994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5NGU1ZTc0NjUzYWU0YmZlNTEwOTRjZTQ4N2E4YjYzZjMwYWQzYTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-02T13:16:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-02T13:16:43Z"}, "message": "Auto merge of #68771 - Centril:rollup-zllcup9, r=Centril\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #68733 (Update option.rs)\n - #68760 (Issue error on `compile-fail` header in UI test)\n - #68763 (Do not suggest duplicate bounds)\n - #68764 (parser: syntactically allow `self` in all `fn` contexts)\n - #68769 (parser: avoid re-wrapping NtItem)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "d8a2be03965e66017cb0d8ea37a7b2f42b2fb1b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8a2be03965e66017cb0d8ea37a7b2f42b2fb1b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "html_url": "https://github.com/rust-lang/rust/commit/994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cef68945722fa593a4a1314f4a2f1ff095aab4f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/cef68945722fa593a4a1314f4a2f1ff095aab4f4", "html_url": "https://github.com/rust-lang/rust/commit/cef68945722fa593a4a1314f4a2f1ff095aab4f4"}, {"sha": "011fb23c581cbb3291765cc98eab501082fdbcd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/011fb23c581cbb3291765cc98eab501082fdbcd1", "html_url": "https://github.com/rust-lang/rust/commit/011fb23c581cbb3291765cc98eab501082fdbcd1"}], "stats": {"total": 994, "additions": 675, "deletions": 319}, "files": [{"sha": "ad0491f888cc79989bb5b3f6f66e4efeae068844", "filename": "src/libcore/option.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "patch": "@@ -331,12 +331,12 @@ impl<T> Option<T> {\n     ///\n     /// ```\n     /// let x = Some(\"value\");\n-    /// assert_eq!(x.expect(\"the world is ending\"), \"value\");\n+    /// assert_eq!(x.expect(\"fruits are healthy\"), \"value\");\n     /// ```\n     ///\n     /// ```{.should_panic}\n     /// let x: Option<&str> = None;\n-    /// x.expect(\"the world is ending\"); // panics with `the world is ending`\n+    /// x.expect(\"fruits are healthy\"); // panics with `fruits are healthy`\n     /// ```\n     #[inline]\n     #[track_caller]"}, {"sha": "cb64e2e95bf7d63185bb86670fa0d918ae9d861a", "filename": "src/librustc_ast_passes/ast_validation.rs", "status": "modified", "additions": 36, "deletions": 8, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Flibrustc_ast_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Flibrustc_ast_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Fast_validation.rs?ref=994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "patch": "@@ -23,6 +23,12 @@ use syntax::expand::is_proc_macro_attr;\n use syntax::visit::{self, Visitor};\n use syntax::walk_list;\n \n+/// Is `self` allowed semantically as the first parameter in an `FnDecl`?\n+enum SelfSemantic {\n+    Yes,\n+    No,\n+}\n+\n /// A syntactic context that disallows certain kinds of bounds (e.g., `?Trait` or `?const Trait`).\n #[derive(Clone, Copy)]\n enum BoundContext {\n@@ -302,7 +308,13 @@ impl<'a> AstValidator<'a> {\n         }\n     }\n \n-    fn check_fn_decl(&self, fn_decl: &FnDecl) {\n+    fn check_fn_decl(&self, fn_decl: &FnDecl, self_semantic: SelfSemantic) {\n+        self.check_decl_cvaradic_pos(fn_decl);\n+        self.check_decl_attrs(fn_decl);\n+        self.check_decl_self_param(fn_decl, self_semantic);\n+    }\n+\n+    fn check_decl_cvaradic_pos(&self, fn_decl: &FnDecl) {\n         match &*fn_decl.inputs {\n             [Param { ty, span, .. }] => {\n                 if let TyKind::CVarArgs = ty.kind {\n@@ -324,7 +336,9 @@ impl<'a> AstValidator<'a> {\n             }\n             _ => {}\n         }\n+    }\n \n+    fn check_decl_attrs(&self, fn_decl: &FnDecl) {\n         fn_decl\n             .inputs\n             .iter()\n@@ -352,6 +366,21 @@ impl<'a> AstValidator<'a> {\n             });\n     }\n \n+    fn check_decl_self_param(&self, fn_decl: &FnDecl, self_semantic: SelfSemantic) {\n+        if let (SelfSemantic::No, [param, ..]) = (self_semantic, &*fn_decl.inputs) {\n+            if param.is_self() {\n+                self.err_handler()\n+                    .struct_span_err(\n+                        param.span,\n+                        \"`self` parameter is only allowed in associated functions\",\n+                    )\n+                    .span_label(param.span, \"not semantically valid as function parameter\")\n+                    .note(\"associated functions are those in `impl` or `trait` definitions\")\n+                    .emit();\n+            }\n+        }\n+    }\n+\n     fn check_defaultness(&self, span: Span, defaultness: Defaultness) {\n         if let Defaultness::Default = defaultness {\n             self.err_handler()\n@@ -504,7 +533,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n     fn visit_expr(&mut self, expr: &'a Expr) {\n         match &expr.kind {\n             ExprKind::Closure(_, _, _, fn_decl, _, _) => {\n-                self.check_fn_decl(fn_decl);\n+                self.check_fn_decl(fn_decl, SelfSemantic::No);\n             }\n             ExprKind::InlineAsm(..) if !self.session.target.target.options.allow_asm => {\n                 struct_span_err!(\n@@ -524,7 +553,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n     fn visit_ty(&mut self, ty: &'a Ty) {\n         match ty.kind {\n             TyKind::BareFn(ref bfty) => {\n-                self.check_fn_decl(&bfty.decl);\n+                self.check_fn_decl(&bfty.decl, SelfSemantic::No);\n                 Self::check_decl_no_pat(&bfty.decl, |span, _| {\n                     struct_span_err!(\n                         self.session,\n@@ -685,7 +714,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             }\n             ItemKind::Fn(ref sig, ref generics, _) => {\n                 self.visit_fn_header(&sig.header);\n-                self.check_fn_decl(&sig.decl);\n+                self.check_fn_decl(&sig.decl, SelfSemantic::No);\n                 // We currently do not permit const generics in `const fn`, as\n                 // this is tantamount to allowing compile-time dependent typing.\n                 if sig.header.constness.node == Constness::Const {\n@@ -793,7 +822,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n     fn visit_foreign_item(&mut self, fi: &'a ForeignItem) {\n         match fi.kind {\n             ForeignItemKind::Fn(ref decl, _) => {\n-                self.check_fn_decl(decl);\n+                self.check_fn_decl(decl, SelfSemantic::No);\n                 Self::check_decl_no_pat(decl, |span, _| {\n                     struct_span_err!(\n                         self.session,\n@@ -987,9 +1016,8 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             AssocItemKind::Const(_, body) => {\n                 self.check_impl_item_provided(ii.span, body, \"constant\", \" = <expr>;\");\n             }\n-            AssocItemKind::Fn(sig, body) => {\n+            AssocItemKind::Fn(_, body) => {\n                 self.check_impl_item_provided(ii.span, body, \"function\", \" { <body> }\");\n-                self.check_fn_decl(&sig.decl);\n             }\n             AssocItemKind::TyAlias(bounds, body) => {\n                 self.check_impl_item_provided(ii.span, body, \"type\", \" = <type>;\");\n@@ -1005,7 +1033,6 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         self.check_defaultness(ti.span, ti.defaultness);\n \n         if let AssocItemKind::Fn(sig, block) = &ti.kind {\n-            self.check_fn_decl(&sig.decl);\n             self.check_trait_fn_not_async(ti.span, sig.header.asyncness.node);\n             self.check_trait_fn_not_const(sig.header.constness);\n             if block.is_none() {\n@@ -1035,6 +1062,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n \n     fn visit_assoc_item(&mut self, item: &'a AssocItem) {\n         if let AssocItemKind::Fn(sig, _) = &item.kind {\n+            self.check_fn_decl(&sig.decl, SelfSemantic::Yes);\n             self.check_c_varadic_type(&sig.decl);\n         }\n         visit::walk_assoc_item(self, item);"}, {"sha": "b1cab591fd97c8829a042254d3adddc7cb964ce3", "filename": "src/librustc_parse/parser/diagnostics.rs", "status": "modified", "additions": 7, "deletions": 18, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs?ref=994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "patch": "@@ -1336,8 +1336,7 @@ impl<'a> Parser<'a> {\n         err: &mut DiagnosticBuilder<'_>,\n         pat: P<ast::Pat>,\n         require_name: bool,\n-        is_self_allowed: bool,\n-        is_trait_item: bool,\n+        first_param: bool,\n     ) -> Option<Ident> {\n         // If we find a pattern followed by an identifier, it could be an (incorrect)\n         // C-style parameter declaration.\n@@ -1357,13 +1356,12 @@ impl<'a> Parser<'a> {\n             return Some(ident);\n         } else if let PatKind::Ident(_, ident, _) = pat.kind {\n             if require_name\n-                && (is_trait_item\n-                    || self.token == token::Comma\n+                && (self.token == token::Comma\n                     || self.token == token::Lt\n                     || self.token == token::CloseDelim(token::Paren))\n             {\n                 // `fn foo(a, b) {}`, `fn foo(a<x>, b<y>) {}` or `fn foo(usize, usize) {}`\n-                if is_self_allowed {\n+                if first_param {\n                     err.span_suggestion(\n                         pat.span,\n                         \"if this is a `self` type, give it a parameter name\",\n@@ -1420,21 +1418,12 @@ impl<'a> Parser<'a> {\n         Ok((pat, ty))\n     }\n \n-    pub(super) fn recover_bad_self_param(\n-        &mut self,\n-        mut param: ast::Param,\n-        is_trait_item: bool,\n-    ) -> PResult<'a, ast::Param> {\n+    pub(super) fn recover_bad_self_param(&mut self, mut param: Param) -> PResult<'a, Param> {\n         let sp = param.pat.span;\n         param.ty.kind = TyKind::Err;\n-        let mut err = self.struct_span_err(sp, \"unexpected `self` parameter in function\");\n-        if is_trait_item {\n-            err.span_label(sp, \"must be the first associated function parameter\");\n-        } else {\n-            err.span_label(sp, \"not valid as function parameter\");\n-            err.note(\"`self` is only valid as the first parameter of an associated function\");\n-        }\n-        err.emit();\n+        self.struct_span_err(sp, \"unexpected `self` parameter in function\")\n+            .span_label(sp, \"must be the first parameter of an associated function\")\n+            .emit();\n         Ok(param)\n     }\n "}, {"sha": "b7f299e56ae504a324309b378b9a4392a58bf2ad", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 25, "deletions": 46, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "patch": "@@ -70,16 +70,15 @@ impl<'a> Parser<'a> {\n     /// Parses one of the items allowed by the flags.\n     fn parse_item_implementation(\n         &mut self,\n-        attrs: Vec<Attribute>,\n+        mut attrs: Vec<Attribute>,\n         macros_allowed: bool,\n         attributes_allowed: bool,\n     ) -> PResult<'a, Option<P<Item>>> {\n         maybe_whole!(self, NtItem, |item| {\n-            let mut item = item.into_inner();\n-            let mut attrs = attrs;\n+            let mut item = item;\n             mem::swap(&mut item.attrs, &mut attrs);\n             item.attrs.extend(attrs);\n-            Some(P(item))\n+            Some(item)\n         });\n \n         let lo = self.token.span;\n@@ -1715,8 +1714,6 @@ impl<'a> Parser<'a> {\n \n /// The parsing configuration used to parse a parameter list (see `parse_fn_params`).\n pub(super) struct ParamCfg {\n-    /// Is `self` is allowed as the first parameter?\n-    pub is_self_allowed: bool,\n     /// `is_name_required` decides if, per-parameter,\n     /// the parameter must have a pattern or just a type.\n     pub is_name_required: fn(&token::Token) -> bool,\n@@ -1732,8 +1729,8 @@ impl<'a> Parser<'a> {\n         attrs: Vec<Attribute>,\n         header: FnHeader,\n     ) -> PResult<'a, Option<P<Item>>> {\n-        let (ident, decl, generics) =\n-            self.parse_fn_sig(ParamCfg { is_self_allowed: false, is_name_required: |_| true })?;\n+        let cfg = ParamCfg { is_name_required: |_| true };\n+        let (ident, decl, generics) = self.parse_fn_sig(&cfg)?;\n         let (inner_attrs, body) = self.parse_inner_attrs_and_block()?;\n         let kind = ItemKind::Fn(FnSig { decl, header }, generics, body);\n         self.mk_item_with_info(attrs, lo, vis, (ident, kind, Some(inner_attrs)))\n@@ -1747,20 +1744,13 @@ impl<'a> Parser<'a> {\n         attrs: Vec<Attribute>,\n         extern_sp: Span,\n     ) -> PResult<'a, P<ForeignItem>> {\n+        let cfg = ParamCfg { is_name_required: |_| true };\n         self.expect_keyword(kw::Fn)?;\n-        let (ident, decl, generics) =\n-            self.parse_fn_sig(ParamCfg { is_self_allowed: false, is_name_required: |_| true })?;\n+        let (ident, decl, generics) = self.parse_fn_sig(&cfg)?;\n         let span = lo.to(self.token.span);\n         self.parse_semi_or_incorrect_foreign_fn_body(&ident, extern_sp)?;\n-        Ok(P(ast::ForeignItem {\n-            ident,\n-            attrs,\n-            kind: ForeignItemKind::Fn(decl, generics),\n-            id: DUMMY_NODE_ID,\n-            span,\n-            vis,\n-            tokens: None,\n-        }))\n+        let kind = ForeignItemKind::Fn(decl, generics);\n+        Ok(P(ast::ForeignItem { ident, attrs, kind, id: DUMMY_NODE_ID, span, vis, tokens: None }))\n     }\n \n     fn parse_assoc_fn(\n@@ -1770,8 +1760,7 @@ impl<'a> Parser<'a> {\n         is_name_required: fn(&token::Token) -> bool,\n     ) -> PResult<'a, (Ident, AssocItemKind, Generics)> {\n         let header = self.parse_fn_front_matter()?;\n-        let (ident, decl, generics) =\n-            self.parse_fn_sig(ParamCfg { is_self_allowed: true, is_name_required })?;\n+        let (ident, decl, generics) = self.parse_fn_sig(&ParamCfg { is_name_required })?;\n         let sig = FnSig { header, decl };\n         let body = self.parse_assoc_fn_body(at_end, attrs)?;\n         Ok((ident, AssocItemKind::Fn(sig, body), generics))\n@@ -1847,7 +1836,7 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parse the \"signature\", including the identifier, parameters, and generics of a function.\n-    fn parse_fn_sig(&mut self, cfg: ParamCfg) -> PResult<'a, (Ident, P<FnDecl>, Generics)> {\n+    fn parse_fn_sig(&mut self, cfg: &ParamCfg) -> PResult<'a, (Ident, P<FnDecl>, Generics)> {\n         let ident = self.parse_ident()?;\n         let mut generics = self.parse_generics()?;\n         let decl = self.parse_fn_decl(cfg, true)?;\n@@ -1858,7 +1847,7 @@ impl<'a> Parser<'a> {\n     /// Parses the parameter list and result type of a function declaration.\n     pub(super) fn parse_fn_decl(\n         &mut self,\n-        cfg: ParamCfg,\n+        cfg: &ParamCfg,\n         ret_allow_plus: bool,\n     ) -> PResult<'a, P<FnDecl>> {\n         Ok(P(FnDecl {\n@@ -1868,11 +1857,11 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parses the parameter list of a function, including the `(` and `)` delimiters.\n-    fn parse_fn_params(&mut self, mut cfg: ParamCfg) -> PResult<'a, Vec<Param>> {\n-        let is_trait_item = cfg.is_self_allowed;\n-        // Parse the arguments, starting out with `self` being possibly allowed...\n+    fn parse_fn_params(&mut self, cfg: &ParamCfg) -> PResult<'a, Vec<Param>> {\n+        let mut first_param = true;\n+        // Parse the arguments, starting out with `self` being allowed...\n         let (mut params, _) = self.parse_paren_comma_seq(|p| {\n-            let param = p.parse_param_general(&cfg, is_trait_item).or_else(|mut e| {\n+            let param = p.parse_param_general(&cfg, first_param).or_else(|mut e| {\n                 e.emit();\n                 let lo = p.prev_span;\n                 // Skip every token until next possible arg or end.\n@@ -1881,29 +1870,25 @@ impl<'a> Parser<'a> {\n                 Ok(dummy_arg(Ident::new(kw::Invalid, lo.to(p.prev_span))))\n             });\n             // ...now that we've parsed the first argument, `self` is no longer allowed.\n-            cfg.is_self_allowed = false;\n+            first_param = false;\n             param\n         })?;\n         // Replace duplicated recovered params with `_` pattern to avoid unnecessary errors.\n         self.deduplicate_recovered_params_names(&mut params);\n         Ok(params)\n     }\n \n-    /// Skips unexpected attributes and doc comments in this position and emits an appropriate\n-    /// error.\n-    /// This version of parse param doesn't necessarily require identifier names.\n-    fn parse_param_general(&mut self, cfg: &ParamCfg, is_trait_item: bool) -> PResult<'a, Param> {\n+    /// Parses a single function parameter.\n+    ///\n+    /// - `self` is syntactically allowed when `first_param` holds.\n+    fn parse_param_general(&mut self, cfg: &ParamCfg, first_param: bool) -> PResult<'a, Param> {\n         let lo = self.token.span;\n         let attrs = self.parse_outer_attributes()?;\n \n         // Possibly parse `self`. Recover if we parsed it and it wasn't allowed here.\n         if let Some(mut param) = self.parse_self_param()? {\n             param.attrs = attrs.into();\n-            return if cfg.is_self_allowed {\n-                Ok(param)\n-            } else {\n-                self.recover_bad_self_param(param, is_trait_item)\n-            };\n+            return if first_param { Ok(param) } else { self.recover_bad_self_param(param) };\n         }\n \n         let is_name_required = match self.token.kind {\n@@ -1915,13 +1900,9 @@ impl<'a> Parser<'a> {\n \n             let pat = self.parse_fn_param_pat()?;\n             if let Err(mut err) = self.expect(&token::Colon) {\n-                return if let Some(ident) = self.parameter_without_type(\n-                    &mut err,\n-                    pat,\n-                    is_name_required,\n-                    cfg.is_self_allowed,\n-                    is_trait_item,\n-                ) {\n+                return if let Some(ident) =\n+                    self.parameter_without_type(&mut err, pat, is_name_required, first_param)\n+                {\n                     err.emit();\n                     Ok(dummy_arg(ident))\n                 } else {\n@@ -1975,8 +1956,6 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Returns the parsed optional self parameter and whether a self shortcut was used.\n-    ///\n-    /// See `parse_self_param_with_attrs` to collect attributes.\n     fn parse_self_param(&mut self) -> PResult<'a, Option<Param>> {\n         // Extract an identifier *after* having confirmed that the token is one.\n         let expect_self_ident = |this: &mut Self| {"}, {"sha": "c9c2cbb98ca40710892f24e67b6c8d9a5920cf03", "filename": "src/librustc_parse/parser/ty.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Flibrustc_parse%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Flibrustc_parse%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fty.rs?ref=994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "patch": "@@ -288,8 +288,7 @@ impl<'a> Parser<'a> {\n         let unsafety = self.parse_unsafety();\n         let ext = self.parse_extern()?;\n         self.expect_keyword(kw::Fn)?;\n-        let cfg = ParamCfg { is_self_allowed: false, is_name_required: |_| false };\n-        let decl = self.parse_fn_decl(cfg, false)?;\n+        let decl = self.parse_fn_decl(&ParamCfg { is_name_required: |_| false }, false)?;\n         Ok(TyKind::BareFn(P(BareFnTy { ext, unsafety, generic_params, decl })))\n     }\n "}, {"sha": "490c69b55362bb82346c2655ed0c0ad1f571c806", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 23, "deletions": 19, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "patch": "@@ -853,26 +853,30 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 } else {\n                                     sp\n                                 };\n-                                // FIXME: contrast `t.def_id` against `param.bounds` to not suggest\n-                                // traits already there. That can happen when the cause is that\n-                                // we're in a const scope or associated function used as a method.\n-                                err.span_suggestions(\n-                                    sp,\n-                                    &message(format!(\n-                                        \"restrict type parameter `{}` with\",\n-                                        param.name.ident(),\n-                                    )),\n-                                    candidates.iter().map(|t| {\n-                                        format!(\n-                                            \"{}{} {}{}\",\n+                                let trait_def_ids: FxHashSet<DefId> = param\n+                                    .bounds\n+                                    .iter()\n+                                    .filter_map(|bound| bound.trait_def_id())\n+                                    .collect();\n+                                if !candidates.iter().any(|t| trait_def_ids.contains(&t.def_id)) {\n+                                    err.span_suggestions(\n+                                        sp,\n+                                        &message(format!(\n+                                            \"restrict type parameter `{}` with\",\n                                             param.name.ident(),\n-                                            if impl_trait { \" +\" } else { \":\" },\n-                                            self.tcx.def_path_str(t.def_id),\n-                                            if has_bounds.is_some() { \" + \" } else { \"\" },\n-                                        )\n-                                    }),\n-                                    Applicability::MaybeIncorrect,\n-                                );\n+                                        )),\n+                                        candidates.iter().map(|t| {\n+                                            format!(\n+                                                \"{}{} {}{}\",\n+                                                param.name.ident(),\n+                                                if impl_trait { \" +\" } else { \":\" },\n+                                                self.tcx.def_path_str(t.def_id),\n+                                                if has_bounds.is_some() { \" + \" } else { \"\" },\n+                                            )\n+                                        }),\n+                                        Applicability::MaybeIncorrect,\n+                                    );\n+                                }\n                                 suggested = true;\n                             }\n                             Node::Item(hir::Item {"}, {"sha": "bec922b0721b978cae319d2b0d0962e94e79e057", "filename": "src/test/ui/associated-item/associated-item-duplicate-bounds.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-bounds.rs?ref=994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "patch": "@@ -0,0 +1,11 @@\n+trait Adapter {\n+    const LINKS: usize;\n+}\n+\n+struct Foo<A: Adapter> {\n+    adapter: A,\n+    links: [u32; A::LINKS], // Shouldn't suggest bounds already there.\n+    //~^ ERROR: no associated item named `LINKS` found\n+}\n+\n+fn main() {}"}, {"sha": "ff1ad4c006e786e569f5e52b4d77b7d1146b7c11", "filename": "src/test/ui/associated-item/associated-item-duplicate-bounds.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-bounds.stderr?ref=994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "patch": "@@ -0,0 +1,11 @@\n+error[E0599]: no associated item named `LINKS` found for type parameter `A` in the current scope\n+  --> $DIR/associated-item-duplicate-bounds.rs:7:21\n+   |\n+LL |     links: [u32; A::LINKS], // Shouldn't suggest bounds already there.\n+   |                     ^^^^^ associated item not found in `A`\n+   |\n+   = help: items from traits can only be used if the type parameter is bounded by the trait\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "3db5e468b35bfa981715e512f63d08dc9070e9c6", "filename": "src/test/ui/associated-type-bounds/bad-bounds-on-assoc-in-trait.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.rs?ref=994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "patch": "@@ -1,4 +1,3 @@\n-// compile-fail\n // ignore-tidy-linelength\n \n // NOTE: rustc cannot currently handle bounds of the form `for<'a> <Foo as Bar<'a>>::Assoc: Baz`."}, {"sha": "5303a09644d50a398c3f3fb63962a85e1f350bdc", "filename": "src/test/ui/associated-type-bounds/bad-bounds-on-assoc-in-trait.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr?ref=994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "patch": "@@ -1,13 +1,13 @@\n error[E0277]: `<L1 as Lam<&'a u8>>::App` doesn't implement `std::fmt::Debug`\n-  --> $DIR/bad-bounds-on-assoc-in-trait.rs:32:6\n+  --> $DIR/bad-bounds-on-assoc-in-trait.rs:31:6\n    |\n LL | impl Case1 for S1 {\n    |      ^^^^^ `<L1 as Lam<&'a u8>>::App` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n    |\n    = help: the trait `for<'a> std::fmt::Debug` is not implemented for `<L1 as Lam<&'a u8>>::App`\n \n error[E0277]: `<<T as Case1>::C as std::iter::Iterator>::Item` is not an iterator\n-  --> $DIR/bad-bounds-on-assoc-in-trait.rs:37:1\n+  --> $DIR/bad-bounds-on-assoc-in-trait.rs:36:1\n    |\n LL |   fn assume_case1<T: Case1>() {\n    |   ^                          - help: consider further restricting the associated type: `where <<T as Case1>::C as std::iter::Iterator>::Item: std::iter::Iterator`\n@@ -24,7 +24,7 @@ LL | | }\n    = help: the trait `std::iter::Iterator` is not implemented for `<<T as Case1>::C as std::iter::Iterator>::Item`\n \n error[E0277]: `<<T as Case1>::C as std::iter::Iterator>::Item` cannot be sent between threads safely\n-  --> $DIR/bad-bounds-on-assoc-in-trait.rs:37:1\n+  --> $DIR/bad-bounds-on-assoc-in-trait.rs:36:1\n    |\n LL |   trait Case1 {\n    |   ----------- required by `Case1`\n@@ -44,7 +44,7 @@ LL | | }\n    = help: the trait `std::marker::Send` is not implemented for `<<T as Case1>::C as std::iter::Iterator>::Item`\n \n error[E0277]: `<<T as Case1>::C as std::iter::Iterator>::Item` cannot be shared between threads safely\n-  --> $DIR/bad-bounds-on-assoc-in-trait.rs:37:1\n+  --> $DIR/bad-bounds-on-assoc-in-trait.rs:36:1\n    |\n LL |   trait Case1 {\n    |   ----------- required by `Case1`\n@@ -64,7 +64,7 @@ LL | | }\n    = help: the trait `std::marker::Sync` is not implemented for `<<T as Case1>::C as std::iter::Iterator>::Item`\n \n error[E0277]: `<_ as Lam<&'a u8>>::App` doesn't implement `std::fmt::Debug`\n-  --> $DIR/bad-bounds-on-assoc-in-trait.rs:37:1\n+  --> $DIR/bad-bounds-on-assoc-in-trait.rs:36:1\n    |\n LL |   trait Case1 {\n    |   ----------- required by `Case1`"}, {"sha": "f8d230da36523211fe689db00a0232104cc45031", "filename": "src/test/ui/associated-type-bounds/duplicate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.rs?ref=994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "patch": "@@ -1,4 +1,3 @@\n-// compile-fail\n // ignore-tidy-linelength\n \n #![feature(associated_type_bounds)]"}, {"sha": "df1151d876c04b17b3e3b7a96195c762f99b7d1d", "filename": "src/test/ui/associated-type-bounds/duplicate.stderr", "status": "modified", "additions": 97, "deletions": 97, "changes": 194, "blob_url": "https://github.com/rust-lang/rust/blob/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.stderr?ref=994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "patch": "@@ -1,727 +1,727 @@\n warning: the feature `impl_trait_in_bindings` is incomplete and may cause the compiler to crash\n-  --> $DIR/duplicate.rs:6:12\n+  --> $DIR/duplicate.rs:5:12\n    |\n LL | #![feature(impl_trait_in_bindings)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:11:36\n+  --> $DIR/duplicate.rs:10:36\n    |\n LL | struct SI1<T: Iterator<Item: Copy, Item: Send>> { f: T }\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:13:36\n+  --> $DIR/duplicate.rs:12:36\n    |\n LL | struct SI2<T: Iterator<Item: Copy, Item: Copy>> { f: T }\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:15:39\n+  --> $DIR/duplicate.rs:14:39\n    |\n LL | struct SI3<T: Iterator<Item: 'static, Item: 'static>> { f: T }\n    |                        -------------  ^^^^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:17:45\n+  --> $DIR/duplicate.rs:16:45\n    |\n LL | struct SW1<T> where T: Iterator<Item: Copy, Item: Send> { f: T }\n    |                                 ----------  ^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:19:45\n+  --> $DIR/duplicate.rs:18:45\n    |\n LL | struct SW2<T> where T: Iterator<Item: Copy, Item: Copy> { f: T }\n    |                                 ----------  ^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:21:48\n+  --> $DIR/duplicate.rs:20:48\n    |\n LL | struct SW3<T> where T: Iterator<Item: 'static, Item: 'static> { f: T }\n    |                                 -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:24:34\n+  --> $DIR/duplicate.rs:23:34\n    |\n LL | enum EI1<T: Iterator<Item: Copy, Item: Send>> { V(T) }\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:26:34\n+  --> $DIR/duplicate.rs:25:34\n    |\n LL | enum EI2<T: Iterator<Item: Copy, Item: Copy>> { V(T) }\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:28:37\n+  --> $DIR/duplicate.rs:27:37\n    |\n LL | enum EI3<T: Iterator<Item: 'static, Item: 'static>> { V(T) }\n    |                      -------------  ^^^^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:30:43\n+  --> $DIR/duplicate.rs:29:43\n    |\n LL | enum EW1<T> where T: Iterator<Item: Copy, Item: Send> { V(T) }\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:32:43\n+  --> $DIR/duplicate.rs:31:43\n    |\n LL | enum EW2<T> where T: Iterator<Item: Copy, Item: Copy> { V(T) }\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:34:46\n+  --> $DIR/duplicate.rs:33:46\n    |\n LL | enum EW3<T> where T: Iterator<Item: 'static, Item: 'static> { V(T) }\n    |                               -------------  ^^^^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:37:35\n+  --> $DIR/duplicate.rs:36:35\n    |\n LL | union UI1<T: Iterator<Item: Copy, Item: Send>> { f: T }\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:39:35\n+  --> $DIR/duplicate.rs:38:35\n    |\n LL | union UI2<T: Iterator<Item: Copy, Item: Copy>> { f: T }\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:41:38\n+  --> $DIR/duplicate.rs:40:38\n    |\n LL | union UI3<T: Iterator<Item: 'static, Item: 'static>> { f: T }\n    |                       -------------  ^^^^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:43:44\n+  --> $DIR/duplicate.rs:42:44\n    |\n LL | union UW1<T> where T: Iterator<Item: Copy, Item: Send> { f: T }\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:45:44\n+  --> $DIR/duplicate.rs:44:44\n    |\n LL | union UW2<T> where T: Iterator<Item: Copy, Item: Copy> { f: T }\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:47:47\n+  --> $DIR/duplicate.rs:46:47\n    |\n LL | union UW3<T> where T: Iterator<Item: 'static, Item: 'static> { f: T }\n    |                                -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:50:32\n+  --> $DIR/duplicate.rs:49:32\n    |\n LL | fn FI1<T: Iterator<Item: Copy, Item: Send>>() {}\n    |                    ----------  ^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:52:32\n+  --> $DIR/duplicate.rs:51:32\n    |\n LL | fn FI2<T: Iterator<Item: Copy, Item: Copy>>() {}\n    |                    ----------  ^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:54:35\n+  --> $DIR/duplicate.rs:53:35\n    |\n LL | fn FI3<T: Iterator<Item: 'static, Item: 'static>>() {}\n    |                    -------------  ^^^^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:56:43\n+  --> $DIR/duplicate.rs:55:43\n    |\n LL | fn FW1<T>() where T: Iterator<Item: Copy, Item: Send> {}\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:58:43\n+  --> $DIR/duplicate.rs:57:43\n    |\n LL | fn FW2<T>() where T: Iterator<Item: Copy, Item: Copy> {}\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:60:46\n+  --> $DIR/duplicate.rs:59:46\n    |\n LL | fn FW3<T>() where T: Iterator<Item: 'static, Item: 'static> {}\n    |                               -------------  ^^^^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:69:40\n+  --> $DIR/duplicate.rs:68:40\n    |\n LL | fn FAPIT1(_: impl Iterator<Item: Copy, Item: Send>) {}\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:71:40\n+  --> $DIR/duplicate.rs:70:40\n    |\n LL | fn FAPIT2(_: impl Iterator<Item: Copy, Item: Copy>) {}\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:73:43\n+  --> $DIR/duplicate.rs:72:43\n    |\n LL | fn FAPIT3(_: impl Iterator<Item: 'static, Item: 'static>) {}\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:63:42\n+  --> $DIR/duplicate.rs:62:42\n    |\n LL | fn FRPIT1() -> impl Iterator<Item: Copy, Item: Send> { iter::empty() }\n    |                              ----------  ^^^^^^^^^^ re-bound here\n    |                              |\n    |                              `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:65:42\n+  --> $DIR/duplicate.rs:64:42\n    |\n LL | fn FRPIT2() -> impl Iterator<Item: Copy, Item: Copy> { iter::empty() }\n    |                              ----------  ^^^^^^^^^^ re-bound here\n    |                              |\n    |                              `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:67:45\n+  --> $DIR/duplicate.rs:66:45\n    |\n LL | fn FRPIT3() -> impl Iterator<Item: 'static, Item: 'static> { iter::empty() }\n    |                              -------------  ^^^^^^^^^^^^^ re-bound here\n    |                              |\n    |                              `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:76:39\n+  --> $DIR/duplicate.rs:75:39\n    |\n LL | const CIT1: impl Iterator<Item: Copy, Item: Send> = iter::empty();\n    |                           ----------  ^^^^^^^^^^ re-bound here\n    |                           |\n    |                           `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:78:39\n+  --> $DIR/duplicate.rs:77:39\n    |\n LL | const CIT2: impl Iterator<Item: Copy, Item: Copy> = iter::empty();\n    |                           ----------  ^^^^^^^^^^ re-bound here\n    |                           |\n    |                           `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:80:42\n+  --> $DIR/duplicate.rs:79:42\n    |\n LL | const CIT3: impl Iterator<Item: 'static, Item: 'static> = iter::empty();\n    |                           -------------  ^^^^^^^^^^^^^ re-bound here\n    |                           |\n    |                           `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:82:40\n+  --> $DIR/duplicate.rs:81:40\n    |\n LL | static SIT1: impl Iterator<Item: Copy, Item: Send> = iter::empty();\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:84:40\n+  --> $DIR/duplicate.rs:83:40\n    |\n LL | static SIT2: impl Iterator<Item: Copy, Item: Copy> = iter::empty();\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:86:43\n+  --> $DIR/duplicate.rs:85:43\n    |\n LL | static SIT3: impl Iterator<Item: 'static, Item: 'static> = iter::empty();\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:89:46\n+  --> $DIR/duplicate.rs:88:46\n    |\n LL | fn lit1() { let _: impl Iterator<Item: Copy, Item: Send> = iter::empty(); }\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:91:46\n+  --> $DIR/duplicate.rs:90:46\n    |\n LL | fn lit2() { let _: impl Iterator<Item: Copy, Item: Copy> = iter::empty(); }\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:93:49\n+  --> $DIR/duplicate.rs:92:49\n    |\n LL | fn lit3() { let _: impl Iterator<Item: 'static, Item: 'static> = iter::empty(); }\n    |                                  -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:96:35\n+  --> $DIR/duplicate.rs:95:35\n    |\n LL | type TAI1<T: Iterator<Item: Copy, Item: Send>> = T;\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:98:35\n+  --> $DIR/duplicate.rs:97:35\n    |\n LL | type TAI2<T: Iterator<Item: Copy, Item: Copy>> = T;\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:100:38\n+  --> $DIR/duplicate.rs:99:38\n    |\n LL | type TAI3<T: Iterator<Item: 'static, Item: 'static>> = T;\n    |                       -------------  ^^^^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:102:44\n+  --> $DIR/duplicate.rs:101:44\n    |\n LL | type TAW1<T> where T: Iterator<Item: Copy, Item: Send> = T;\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:104:44\n+  --> $DIR/duplicate.rs:103:44\n    |\n LL | type TAW2<T> where T: Iterator<Item: Copy, Item: Copy> = T;\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:106:47\n+  --> $DIR/duplicate.rs:105:47\n    |\n LL | type TAW3<T> where T: Iterator<Item: 'static, Item: 'static> = T;\n    |                                -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:109:1\n+  --> $DIR/duplicate.rs:108:1\n    |\n LL | type ETAI1<T: Iterator<Item: Copy, Item: Send>> = impl Copy;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:109:36\n+  --> $DIR/duplicate.rs:108:36\n    |\n LL | type ETAI1<T: Iterator<Item: Copy, Item: Send>> = impl Copy;\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:114:1\n+  --> $DIR/duplicate.rs:113:1\n    |\n LL | type ETAI2<T: Iterator<Item: Copy, Item: Copy>> = impl Copy;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:114:36\n+  --> $DIR/duplicate.rs:113:36\n    |\n LL | type ETAI2<T: Iterator<Item: Copy, Item: Copy>> = impl Copy;\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:119:1\n+  --> $DIR/duplicate.rs:118:1\n    |\n LL | type ETAI3<T: Iterator<Item: 'static, Item: 'static>> = impl Copy;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:119:39\n+  --> $DIR/duplicate.rs:118:39\n    |\n LL | type ETAI3<T: Iterator<Item: 'static, Item: 'static>> = impl Copy;\n    |                        -------------  ^^^^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:124:1\n+  --> $DIR/duplicate.rs:123:1\n    |\n LL | type ETAI4 = impl Iterator<Item: Copy, Item: Send>;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:124:40\n+  --> $DIR/duplicate.rs:123:40\n    |\n LL | type ETAI4 = impl Iterator<Item: Copy, Item: Send>;\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:129:1\n+  --> $DIR/duplicate.rs:128:1\n    |\n LL | type ETAI5 = impl Iterator<Item: Copy, Item: Copy>;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:129:40\n+  --> $DIR/duplicate.rs:128:40\n    |\n LL | type ETAI5 = impl Iterator<Item: Copy, Item: Copy>;\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:134:1\n+  --> $DIR/duplicate.rs:133:1\n    |\n LL | type ETAI6 = impl Iterator<Item: 'static, Item: 'static>;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:134:43\n+  --> $DIR/duplicate.rs:133:43\n    |\n LL | type ETAI6 = impl Iterator<Item: 'static, Item: 'static>;\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:140:36\n+  --> $DIR/duplicate.rs:139:36\n    |\n LL | trait TRI1<T: Iterator<Item: Copy, Item: Send>> {}\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:142:36\n+  --> $DIR/duplicate.rs:141:36\n    |\n LL | trait TRI2<T: Iterator<Item: Copy, Item: Copy>> {}\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:144:39\n+  --> $DIR/duplicate.rs:143:39\n    |\n LL | trait TRI3<T: Iterator<Item: 'static, Item: 'static>> {}\n    |                        -------------  ^^^^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:146:34\n+  --> $DIR/duplicate.rs:145:34\n    |\n LL | trait TRS1: Iterator<Item: Copy, Item: Send> {}\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:148:34\n+  --> $DIR/duplicate.rs:147:34\n    |\n LL | trait TRS2: Iterator<Item: Copy, Item: Copy> {}\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:150:37\n+  --> $DIR/duplicate.rs:149:37\n    |\n LL | trait TRS3: Iterator<Item: 'static, Item: 'static> {}\n    |                      -------------  ^^^^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:152:45\n+  --> $DIR/duplicate.rs:151:45\n    |\n LL | trait TRW1<T> where T: Iterator<Item: Copy, Item: Send> {}\n    |                                 ----------  ^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:154:45\n+  --> $DIR/duplicate.rs:153:45\n    |\n LL | trait TRW2<T> where T: Iterator<Item: Copy, Item: Copy> {}\n    |                                 ----------  ^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:156:48\n+  --> $DIR/duplicate.rs:155:48\n    |\n LL | trait TRW3<T> where T: Iterator<Item: 'static, Item: 'static> {}\n    |                                 -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:158:46\n+  --> $DIR/duplicate.rs:157:46\n    |\n LL | trait TRSW1 where Self: Iterator<Item: Copy, Item: Send> {}\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:158:46\n+  --> $DIR/duplicate.rs:157:46\n    |\n LL | trait TRSW1 where Self: Iterator<Item: Copy, Item: Send> {}\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:161:46\n+  --> $DIR/duplicate.rs:160:46\n    |\n LL | trait TRSW2 where Self: Iterator<Item: Copy, Item: Copy> {}\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:161:46\n+  --> $DIR/duplicate.rs:160:46\n    |\n LL | trait TRSW2 where Self: Iterator<Item: Copy, Item: Copy> {}\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:164:49\n+  --> $DIR/duplicate.rs:163:49\n    |\n LL | trait TRSW3 where Self: Iterator<Item: 'static, Item: 'static> {}\n    |                                  -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:164:49\n+  --> $DIR/duplicate.rs:163:49\n    |\n LL | trait TRSW3 where Self: Iterator<Item: 'static, Item: 'static> {}\n    |                                  -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:167:43\n+  --> $DIR/duplicate.rs:166:43\n    |\n LL | trait TRA1 { type A: Iterator<Item: Copy, Item: Send>; }\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:169:43\n+  --> $DIR/duplicate.rs:168:43\n    |\n LL | trait TRA2 { type A: Iterator<Item: Copy, Item: Copy>; }\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:171:46\n+  --> $DIR/duplicate.rs:170:46\n    |\n LL | trait TRA3 { type A: Iterator<Item: 'static, Item: 'static>; }\n    |                               -------------  ^^^^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:174:40\n+  --> $DIR/duplicate.rs:173:40\n    |\n LL | type TADyn1 = dyn Iterator<Item: Copy, Item: Send>;\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:178:44\n+  --> $DIR/duplicate.rs:177:44\n    |\n LL | type TADyn2 = Box<dyn Iterator<Item: Copy, Item: Copy>>;\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:182:43\n+  --> $DIR/duplicate.rs:181:43\n    |\n LL | type TADyn3 = dyn Iterator<Item: 'static, Item: 'static>;\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:109:24\n+  --> $DIR/duplicate.rs:108:24\n    |\n LL | type ETAI1<T: Iterator<Item: Copy, Item: Send>> = impl Copy;\n    |                        ^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:109:36\n+  --> $DIR/duplicate.rs:108:36\n    |\n LL | type ETAI1<T: Iterator<Item: Copy, Item: Send>> = impl Copy;\n    |                                    ^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:114:24\n+  --> $DIR/duplicate.rs:113:24\n    |\n LL | type ETAI2<T: Iterator<Item: Copy, Item: Copy>> = impl Copy;\n    |                        ^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:114:36\n+  --> $DIR/duplicate.rs:113:36\n    |\n LL | type ETAI2<T: Iterator<Item: Copy, Item: Copy>> = impl Copy;\n    |                                    ^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:119:24\n+  --> $DIR/duplicate.rs:118:24\n    |\n LL | type ETAI3<T: Iterator<Item: 'static, Item: 'static>> = impl Copy;\n    |                        ^^^^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:119:39\n+  --> $DIR/duplicate.rs:118:39\n    |\n LL | type ETAI3<T: Iterator<Item: 'static, Item: 'static>> = impl Copy;\n    |                                       ^^^^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:124:28\n+  --> $DIR/duplicate.rs:123:28\n    |\n LL | type ETAI4 = impl Iterator<Item: Copy, Item: Send>;\n    |                            ^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:124:40\n+  --> $DIR/duplicate.rs:123:40\n    |\n LL | type ETAI4 = impl Iterator<Item: Copy, Item: Send>;\n    |                                        ^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:129:28\n+  --> $DIR/duplicate.rs:128:28\n    |\n LL | type ETAI5 = impl Iterator<Item: Copy, Item: Copy>;\n    |                            ^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:129:40\n+  --> $DIR/duplicate.rs:128:40\n    |\n LL | type ETAI5 = impl Iterator<Item: Copy, Item: Copy>;\n    |                                        ^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:134:28\n+  --> $DIR/duplicate.rs:133:28\n    |\n LL | type ETAI6 = impl Iterator<Item: 'static, Item: 'static>;\n    |                            ^^^^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:134:43\n+  --> $DIR/duplicate.rs:133:43\n    |\n LL | type ETAI6 = impl Iterator<Item: 'static, Item: 'static>;\n    |                                           ^^^^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:174:28\n+  --> $DIR/duplicate.rs:173:28\n    |\n LL | type TADyn1 = dyn Iterator<Item: Copy, Item: Send>;\n    |                            ^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:174:40\n+  --> $DIR/duplicate.rs:173:40\n    |\n LL | type TADyn1 = dyn Iterator<Item: Copy, Item: Send>;\n    |                                        ^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:178:32\n+  --> $DIR/duplicate.rs:177:32\n    |\n LL | type TADyn2 = Box<dyn Iterator<Item: Copy, Item: Copy>>;\n    |                                ^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:178:44\n+  --> $DIR/duplicate.rs:177:44\n    |\n LL | type TADyn2 = Box<dyn Iterator<Item: Copy, Item: Copy>>;\n    |                                            ^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:182:28\n+  --> $DIR/duplicate.rs:181:28\n    |\n LL | type TADyn3 = dyn Iterator<Item: 'static, Item: 'static>;\n    |                            ^^^^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:182:43\n+  --> $DIR/duplicate.rs:181:43\n    |\n LL | type TADyn3 = dyn Iterator<Item: 'static, Item: 'static>;\n    |                                           ^^^^^^^^^^^^^"}, {"sha": "cddce8777eab7a740546a528e3bb6dca699f0bb3", "filename": "src/test/ui/associated-type-bounds/implied-region-constraints.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fimplied-region-constraints.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fimplied-region-constraints.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fimplied-region-constraints.nll.stderr?ref=994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/implied-region-constraints.rs:19:56\n+  --> $DIR/implied-region-constraints.rs:17:56\n    |\n LL | fn _bad_st<'a, 'b, T>(x: St<'a, 'b, T>)\n    |            --  -- lifetime `'b` defined here\n@@ -12,7 +12,7 @@ LL |     let _failure_proves_not_implied_outlives_region_b: &'b T = &x.f0;\n    = help: consider adding the following bound: `'a: 'b`\n \n error: lifetime may not live long enough\n-  --> $DIR/implied-region-constraints.rs:40:64\n+  --> $DIR/implied-region-constraints.rs:38:64\n    |\n LL | fn _bad_en7<'a, 'b, T>(x: En7<'a, 'b, T>)\n    |             --  -- lifetime `'b` defined here"}, {"sha": "ccad947f7f074d39c96b4c393b2c13898b67c655", "filename": "src/test/ui/associated-type-bounds/implied-region-constraints.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fimplied-region-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fimplied-region-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fimplied-region-constraints.rs?ref=994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "patch": "@@ -1,5 +1,3 @@\n-// compile-fail\n-\n #![feature(associated_type_bounds)]\n \n trait Tr1 { type As1; }"}, {"sha": "c338e38d28f71625e6a73503407ab3651b5dd982", "filename": "src/test/ui/associated-type-bounds/implied-region-constraints.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fimplied-region-constraints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fimplied-region-constraints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fimplied-region-constraints.stderr?ref=994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/implied-region-constraints.rs:19:64\n+  --> $DIR/implied-region-constraints.rs:17:64\n    |\n LL | fn _bad_st<'a, 'b, T>(x: St<'a, 'b, T>)\n    |                          ------------- this type is declared with multiple lifetimes...\n@@ -8,7 +8,7 @@ LL |     let _failure_proves_not_implied_outlives_region_b: &'b T = &x.f0;\n    |                                                                ^^^^^ ...but data with one lifetime flows into the other here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/implied-region-constraints.rs:40:72\n+  --> $DIR/implied-region-constraints.rs:38:72\n    |\n LL | fn _bad_en7<'a, 'b, T>(x: En7<'a, 'b, T>)\n    |                           -------------- this type is declared with multiple lifetimes..."}, {"sha": "b74c03829b48b03db7509edc84dcbbab7dd867af", "filename": "src/test/ui/associated-type-bounds/inside-adt.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fassociated-type-bounds%2Finside-adt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fassociated-type-bounds%2Finside-adt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Finside-adt.rs?ref=994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "patch": "@@ -1,4 +1,3 @@\n-// compile-fail\n #![feature(associated_type_bounds)]\n #![feature(untagged_unions)]\n "}, {"sha": "a532bb0c76697e2233a78e6e6add07bd82c958a3", "filename": "src/test/ui/associated-type-bounds/inside-adt.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fassociated-type-bounds%2Finside-adt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fassociated-type-bounds%2Finside-adt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Finside-adt.stderr?ref=994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "patch": "@@ -1,107 +1,107 @@\n error: associated type bounds are not allowed within structs, enums, or unions\n-  --> $DIR/inside-adt.rs:5:29\n+  --> $DIR/inside-adt.rs:4:29\n    |\n LL | struct S1 { f: dyn Iterator<Item: Copy> }\n    |                             ^^^^^^^^^^\n \n error: associated type bounds are not allowed within structs, enums, or unions\n-  --> $DIR/inside-adt.rs:8:33\n+  --> $DIR/inside-adt.rs:7:33\n    |\n LL | struct S2 { f: Box<dyn Iterator<Item: Copy>> }\n    |                                 ^^^^^^^^^^\n \n error: associated type bounds are not allowed within structs, enums, or unions\n-  --> $DIR/inside-adt.rs:11:29\n+  --> $DIR/inside-adt.rs:10:29\n    |\n LL | struct S3 { f: dyn Iterator<Item: 'static> }\n    |                             ^^^^^^^^^^^^^\n \n error: associated type bounds are not allowed within structs, enums, or unions\n-  --> $DIR/inside-adt.rs:15:26\n+  --> $DIR/inside-adt.rs:14:26\n    |\n LL | enum E1 { V(dyn Iterator<Item: Copy>) }\n    |                          ^^^^^^^^^^\n \n error: associated type bounds are not allowed within structs, enums, or unions\n-  --> $DIR/inside-adt.rs:18:30\n+  --> $DIR/inside-adt.rs:17:30\n    |\n LL | enum E2 { V(Box<dyn Iterator<Item: Copy>>) }\n    |                              ^^^^^^^^^^\n \n error: associated type bounds are not allowed within structs, enums, or unions\n-  --> $DIR/inside-adt.rs:21:26\n+  --> $DIR/inside-adt.rs:20:26\n    |\n LL | enum E3 { V(dyn Iterator<Item: 'static>) }\n    |                          ^^^^^^^^^^^^^\n \n error: associated type bounds are not allowed within structs, enums, or unions\n-  --> $DIR/inside-adt.rs:25:28\n+  --> $DIR/inside-adt.rs:24:28\n    |\n LL | union U1 { f: dyn Iterator<Item: Copy> }\n    |                            ^^^^^^^^^^\n \n error: associated type bounds are not allowed within structs, enums, or unions\n-  --> $DIR/inside-adt.rs:28:32\n+  --> $DIR/inside-adt.rs:27:32\n    |\n LL | union U2 { f: Box<dyn Iterator<Item: Copy>> }\n    |                                ^^^^^^^^^^\n \n error: associated type bounds are not allowed within structs, enums, or unions\n-  --> $DIR/inside-adt.rs:31:28\n+  --> $DIR/inside-adt.rs:30:28\n    |\n LL | union U3 { f: dyn Iterator<Item: 'static> }\n    |                            ^^^^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/inside-adt.rs:5:29\n+  --> $DIR/inside-adt.rs:4:29\n    |\n LL | struct S1 { f: dyn Iterator<Item: Copy> }\n    |                             ^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/inside-adt.rs:8:33\n+  --> $DIR/inside-adt.rs:7:33\n    |\n LL | struct S2 { f: Box<dyn Iterator<Item: Copy>> }\n    |                                 ^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/inside-adt.rs:11:29\n+  --> $DIR/inside-adt.rs:10:29\n    |\n LL | struct S3 { f: dyn Iterator<Item: 'static> }\n    |                             ^^^^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/inside-adt.rs:15:26\n+  --> $DIR/inside-adt.rs:14:26\n    |\n LL | enum E1 { V(dyn Iterator<Item: Copy>) }\n    |                          ^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/inside-adt.rs:18:30\n+  --> $DIR/inside-adt.rs:17:30\n    |\n LL | enum E2 { V(Box<dyn Iterator<Item: Copy>>) }\n    |                              ^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/inside-adt.rs:21:26\n+  --> $DIR/inside-adt.rs:20:26\n    |\n LL | enum E3 { V(dyn Iterator<Item: 'static>) }\n    |                          ^^^^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/inside-adt.rs:25:28\n+  --> $DIR/inside-adt.rs:24:28\n    |\n LL | union U1 { f: dyn Iterator<Item: Copy> }\n    |                            ^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/inside-adt.rs:28:32\n+  --> $DIR/inside-adt.rs:27:32\n    |\n LL | union U2 { f: Box<dyn Iterator<Item: Copy>> }\n    |                                ^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/inside-adt.rs:31:28\n+  --> $DIR/inside-adt.rs:30:28\n    |\n LL | union U3 { f: dyn Iterator<Item: 'static> }\n    |                            ^^^^^^^^^^^^^"}, {"sha": "845941200fc9500ad5c56def864111788aa971f6", "filename": "src/test/ui/async-await/async-fn-nonsend.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.rs?ref=994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "patch": "@@ -1,4 +1,3 @@\n-// compile-fail\n // edition:2018\n // compile-flags: --crate-type lib\n "}, {"sha": "3a2c42b383700a0186cff08590687d9f1a7cde05", "filename": "src/test/ui/async-await/async-fn-nonsend.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr?ref=994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "patch": "@@ -1,5 +1,5 @@\n error: future cannot be sent between threads safely\n-  --> $DIR/async-fn-nonsend.rs:50:5\n+  --> $DIR/async-fn-nonsend.rs:49:5\n    |\n LL | fn assert_send(_: impl Send) {}\n    |    -----------         ---- required by this bound in `assert_send`\n@@ -9,7 +9,7 @@ LL |     assert_send(local_dropped_before_await());\n    |\n    = help: within `impl std::future::Future`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<()>`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/async-fn-nonsend.rs:25:5\n+  --> $DIR/async-fn-nonsend.rs:24:5\n    |\n LL |     let x = non_send();\n    |         - has type `impl std::fmt::Debug`\n@@ -20,7 +20,7 @@ LL | }\n    | - `x` is later dropped here\n \n error: future cannot be sent between threads safely\n-  --> $DIR/async-fn-nonsend.rs:52:5\n+  --> $DIR/async-fn-nonsend.rs:51:5\n    |\n LL | fn assert_send(_: impl Send) {}\n    |    -----------         ---- required by this bound in `assert_send`\n@@ -30,7 +30,7 @@ LL |     assert_send(non_send_temporary_in_match());\n    |\n    = help: within `impl std::future::Future`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<()>`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/async-fn-nonsend.rs:34:20\n+  --> $DIR/async-fn-nonsend.rs:33:20\n    |\n LL |     match Some(non_send()) {\n    |                ---------- has type `impl std::fmt::Debug`\n@@ -41,7 +41,7 @@ LL | }\n    | - `non_send()` is later dropped here\n \n error: future cannot be sent between threads safely\n-  --> $DIR/async-fn-nonsend.rs:54:5\n+  --> $DIR/async-fn-nonsend.rs:53:5\n    |\n LL | fn assert_send(_: impl Send) {}\n    |    -----------         ---- required by this bound in `assert_send`\n@@ -51,7 +51,7 @@ LL |     assert_send(non_sync_with_method_call());\n    |\n    = help: the trait `std::marker::Send` is not implemented for `dyn std::fmt::Write`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/async-fn-nonsend.rs:43:9\n+  --> $DIR/async-fn-nonsend.rs:42:9\n    |\n LL |     let f: &mut std::fmt::Formatter = panic!();\n    |         - has type `&mut std::fmt::Formatter<'_>`"}, {"sha": "64322990d0a9339d5d2c436870c6176a78833cc2", "filename": "src/test/ui/async-await/no-async-const.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fasync-await%2Fno-async-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fasync-await%2Fno-async-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-async-const.rs?ref=994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "patch": "@@ -1,4 +1,3 @@\n-// compile-fail\n // edition:2018\n // compile-flags: --crate-type lib\n "}, {"sha": "d5b8b344abe625781912d37d8295135315bdad3a", "filename": "src/test/ui/async-await/no-async-const.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fasync-await%2Fno-async-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fasync-await%2Fno-async-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-async-const.stderr?ref=994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "patch": "@@ -1,5 +1,5 @@\n error: expected one of `fn` or `unsafe`, found keyword `const`\n-  --> $DIR/no-async-const.rs:5:11\n+  --> $DIR/no-async-const.rs:4:11\n    |\n LL | pub async const fn x() {}\n    |           ^^^^^ expected one of `fn` or `unsafe`"}, {"sha": "55b27bd3fa1ac9768c133861d421115596bda53a", "filename": "src/test/ui/async-await/no-const-async.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.rs?ref=994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "patch": "@@ -1,4 +1,3 @@\n-// compile-fail\n // edition:2018\n // compile-flags: --crate-type lib\n "}, {"sha": "62cd5c45d1950fa2d21ce517090213c8e29cbe79", "filename": "src/test/ui/async-await/no-const-async.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.stderr?ref=994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "patch": "@@ -1,11 +1,11 @@\n error: expected identifier, found keyword `async`\n-  --> $DIR/no-const-async.rs:5:11\n+  --> $DIR/no-const-async.rs:4:11\n    |\n LL | pub const async fn x() {}\n    |           ^^^^^ expected identifier, found keyword\n \n error: expected `:`, found keyword `fn`\n-  --> $DIR/no-const-async.rs:5:17\n+  --> $DIR/no-const-async.rs:4:17\n    |\n LL | pub const async fn x() {}\n    |                 ^^ expected `:`"}, {"sha": "51c9a42b3f4e3e76083a109efef5787140bacf03", "filename": "src/test/ui/async-await/no-move-across-await-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-struct.rs?ref=994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "patch": "@@ -1,4 +1,3 @@\n-// compile-fail\n // edition:2018\n // compile-flags: --crate-type lib\n "}, {"sha": "adfae09925fef564f3942ab056612c5b2aac79a6", "filename": "src/test/ui/async-await/no-move-across-await-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-struct.stderr?ref=994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: use of moved value: `s.x`\n-  --> $DIR/no-move-across-await-struct.rs:8:5\n+  --> $DIR/no-move-across-await-struct.rs:7:5\n    |\n LL |     needs_vec(s.x).await;\n    |               --- value moved here"}, {"sha": "a656332698c43bf5be0048574d0ae744405f8743", "filename": "src/test/ui/async-await/no-move-across-await-tuple.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-tuple.rs?ref=994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "patch": "@@ -1,4 +1,3 @@\n-// compile-fail\n // edition:2018\n // compile-flags: --crate-type lib\n "}, {"sha": "a60fd9361a77920a2c182eb55c90b3c0225052b1", "filename": "src/test/ui/async-await/no-move-across-await-tuple.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-tuple.stderr?ref=994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: use of moved value: `x.1`\n-  --> $DIR/no-move-across-await-tuple.rs:9:5\n+  --> $DIR/no-move-across-await-tuple.rs:8:5\n    |\n LL |     drop(x.1);\n    |          --- value moved here"}, {"sha": "24070fe33083ca28fbfb0431d2c9264da6e2a72e", "filename": "src/test/ui/async-await/no-non-guaranteed-initialization.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fasync-await%2Fno-non-guaranteed-initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fasync-await%2Fno-non-guaranteed-initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-non-guaranteed-initialization.rs?ref=994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "patch": "@@ -1,4 +1,3 @@\n-// compile-fail\n // edition:2018\n // compile-flags: --crate-type lib\n "}, {"sha": "f5991f4bccac942e718f0ec725ef8862fca47c4f", "filename": "src/test/ui/async-await/no-non-guaranteed-initialization.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fasync-await%2Fno-non-guaranteed-initialization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fasync-await%2Fno-non-guaranteed-initialization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-non-guaranteed-initialization.stderr?ref=994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "patch": "@@ -1,5 +1,5 @@\n error[E0381]: use of possibly-uninitialized variable: `y`\n-  --> $DIR/no-non-guaranteed-initialization.rs:10:5\n+  --> $DIR/no-non-guaranteed-initialization.rs:9:5\n    |\n LL |     y\n    |     ^ use of possibly-uninitialized `y`"}, {"sha": "21ae25c16bb782fc653c00db1b06177d4e1298d5", "filename": "src/test/ui/borrowck/two-phase-nonrecv-autoref.nll.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.nll.stderr?ref=994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "patch": "@@ -1,5 +1,5 @@\n error[E0499]: cannot borrow `*f` as mutable more than once at a time\n-  --> $DIR/two-phase-nonrecv-autoref.rs:58:11\n+  --> $DIR/two-phase-nonrecv-autoref.rs:51:11\n    |\n LL |         f(f(10));\n    |         - ^ second mutable borrow occurs here\n@@ -8,7 +8,7 @@ LL |         f(f(10));\n    |         first borrow later used by call\n \n error[E0382]: use of moved value: `f`\n-  --> $DIR/two-phase-nonrecv-autoref.rs:66:11\n+  --> $DIR/two-phase-nonrecv-autoref.rs:59:11\n    |\n LL |     fn twice_ten_so<F: FnOnce(i32) -> i32>(f: Box<F>) {\n    |                                            - move occurs because `f` has type `std::boxed::Box<F>`, which does not implement the `Copy` trait\n@@ -18,7 +18,7 @@ LL |         f(f(10));\n    |         value moved here\n \n error[E0499]: cannot borrow `*f` as mutable more than once at a time\n-  --> $DIR/two-phase-nonrecv-autoref.rs:72:11\n+  --> $DIR/two-phase-nonrecv-autoref.rs:65:11\n    |\n LL |         f(f(10));\n    |         - ^ second mutable borrow occurs here\n@@ -27,7 +27,7 @@ LL |         f(f(10));\n    |         first borrow later used by call\n \n error[E0382]: use of moved value: `f`\n-  --> $DIR/two-phase-nonrecv-autoref.rs:80:11\n+  --> $DIR/two-phase-nonrecv-autoref.rs:73:11\n    |\n LL |     fn twice_ten_oo(f: Box<dyn FnOnce(i32) -> i32>) {\n    |                     - move occurs because `f` has type `std::boxed::Box<dyn std::ops::FnOnce(i32) -> i32>`, which does not implement the `Copy` trait\n@@ -37,7 +37,7 @@ LL |         f(f(10));\n    |         value moved here\n \n error[E0502]: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/two-phase-nonrecv-autoref.rs:119:27\n+  --> $DIR/two-phase-nonrecv-autoref.rs:112:27\n    |\n LL |     double_access(&mut a, &a);\n    |     ------------- ------  ^^ immutable borrow occurs here\n@@ -46,7 +46,7 @@ LL |     double_access(&mut a, &a);\n    |     mutable borrow later used by call\n \n error[E0502]: cannot borrow `i` as immutable because it is also borrowed as mutable\n-  --> $DIR/two-phase-nonrecv-autoref.rs:145:7\n+  --> $DIR/two-phase-nonrecv-autoref.rs:138:7\n    |\n LL |     i[i[3]] = 4;\n    |     --^----\n@@ -56,7 +56,7 @@ LL |     i[i[3]] = 4;\n    |     mutable borrow later used here\n \n error[E0502]: cannot borrow `i` as immutable because it is also borrowed as mutable\n-  --> $DIR/two-phase-nonrecv-autoref.rs:150:7\n+  --> $DIR/two-phase-nonrecv-autoref.rs:143:7\n    |\n LL |     i[i[3]] = i[4];\n    |     --^----"}, {"sha": "918c7a1be197ac630948749e3ae4ed3ec8b0c4e3", "filename": "src/test/ui/borrowck/two-phase-nonrecv-autoref.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.rs?ref=994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "patch": "@@ -13,13 +13,6 @@\n // receivers (namely, in many cases demonstrated below, the error\n // would not arise).\n \n-// (If we revise the compiler or this test so that the g2p revision\n-// passes, turn the `rustc_attrs` feature back on and tag the `fn\n-// main` with `#[rustc_error]` so that this remains a valid\n-// compile-fail test.)\n-//\n-// #![feature(rustc_attrs)]\n-\n use std::ops::{Index, IndexMut};\n \n fn foo(x: &mut u32, y: u32) {"}, {"sha": "5bf3ec733f5d78c3dee4f4500f14e1cc5b862fd7", "filename": "src/test/ui/impl-trait/bound-normalization-fail.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.rs?ref=994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "patch": "@@ -1,4 +1,3 @@\n-// compile-fail\n // ignore-tidy-linelength\n // edition:2018\n "}, {"sha": "22ba8342ff41fdc87abb17770ba3d34aafad9f6a", "filename": "src/test/ui/impl-trait/bound-normalization-fail.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr?ref=994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "patch": "@@ -1,13 +1,13 @@\n warning: the feature `impl_trait_in_bindings` is incomplete and may cause the compiler to crash\n-  --> $DIR/bound-normalization-fail.rs:5:12\n+  --> $DIR/bound-normalization-fail.rs:4:12\n    |\n LL | #![feature(impl_trait_in_bindings)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n \n error[E0271]: type mismatch resolving `<Foo<()> as FooLike>::Output == <T as impl_trait::Trait>::Assoc`\n-  --> $DIR/bound-normalization-fail.rs:28:32\n+  --> $DIR/bound-normalization-fail.rs:27:32\n    |\n LL |     fn foo_fail<T: Trait>() -> impl FooLike<Output=T::Assoc> {\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found associated type\n@@ -19,13 +19,13 @@ LL |     fn foo_fail<T: Trait>() -> impl FooLike<Output=T::Assoc> {\n    = note: the return type of a function must have a statically known size\n \n error: `impl Trait` return type cannot contain a projection or `Self` that references lifetimes from a parent scope\n-  --> $DIR/bound-normalization-fail.rs:44:41\n+  --> $DIR/bound-normalization-fail.rs:43:41\n    |\n LL |     fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output=T::Assoc> {\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0271]: type mismatch resolving `<Foo<()> as FooLike>::Output == <T as lifetimes::Trait<'static>>::Assoc`\n-  --> $DIR/bound-normalization-fail.rs:44:41\n+  --> $DIR/bound-normalization-fail.rs:43:41\n    |\n LL |     fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output=T::Assoc> {\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found associated type"}, {"sha": "7c580bc5a5deaa1d2ff46b6dece1c6b5e6cd1e43", "filename": "src/test/ui/invalid-self-argument/bare-fn-start.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn-start.rs", "raw_url": "https://github.com/rust-lang/rust/raw/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn-start.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn-start.rs?ref=994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "patch": "@@ -1,6 +1,6 @@\n fn a(&self) { }\n-//~^ ERROR unexpected `self` parameter in function\n-//~| NOTE not valid as function parameter\n-//~| NOTE `self` is only valid as the first parameter of an associated function\n+//~^ ERROR `self` parameter is only allowed in associated functions\n+//~| NOTE not semantically valid as function parameter\n+//~| NOTE associated functions are those in `impl` or `trait` definitions\n \n fn main() { }"}, {"sha": "37753e61f582a790d42af1456412d34b8e3e851f", "filename": "src/test/ui/invalid-self-argument/bare-fn-start.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn-start.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn-start.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn-start.stderr?ref=994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "patch": "@@ -1,10 +1,10 @@\n-error: unexpected `self` parameter in function\n+error: `self` parameter is only allowed in associated functions\n   --> $DIR/bare-fn-start.rs:1:6\n    |\n LL | fn a(&self) { }\n-   |      ^^^^^ not valid as function parameter\n+   |      ^^^^^ not semantically valid as function parameter\n    |\n-   = note: `self` is only valid as the first parameter of an associated function\n+   = note: associated functions are those in `impl` or `trait` definitions\n \n error: aborting due to previous error\n "}, {"sha": "342bdc31a7c8218f45a05c557a4206a610f3871a", "filename": "src/test/ui/invalid-self-argument/bare-fn.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn.rs?ref=994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "patch": "@@ -1,6 +1,5 @@\n fn b(foo: u32, &mut self) { }\n //~^ ERROR unexpected `self` parameter in function\n-//~| NOTE not valid as function parameter\n-//~| NOTE `self` is only valid as the first parameter of an associated function\n+//~| NOTE must be the first parameter of an associated function\n \n fn main() { }"}, {"sha": "ff2217b5e80bc04acacd8506cf241655e814f2c3", "filename": "src/test/ui/invalid-self-argument/bare-fn.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn.stderr?ref=994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "patch": "@@ -2,9 +2,7 @@ error: unexpected `self` parameter in function\n   --> $DIR/bare-fn.rs:1:16\n    |\n LL | fn b(foo: u32, &mut self) { }\n-   |                ^^^^^^^^^ not valid as function parameter\n-   |\n-   = note: `self` is only valid as the first parameter of an associated function\n+   |                ^^^^^^^^^ must be the first parameter of an associated function\n \n error: aborting due to previous error\n "}, {"sha": "5ccea589561cbdea1b02aae56fb3eaa448d5b65a", "filename": "src/test/ui/invalid-self-argument/trait-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Finvalid-self-argument%2Ftrait-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Finvalid-self-argument%2Ftrait-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-self-argument%2Ftrait-fn.rs?ref=994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "patch": "@@ -3,7 +3,7 @@ struct Foo {}\n impl Foo {\n     fn c(foo: u32, self) {}\n     //~^ ERROR unexpected `self` parameter in function\n-    //~| NOTE must be the first associated function parameter\n+    //~| NOTE must be the first parameter of an associated function\n \n     fn good(&mut self, foo: u32) {}\n }"}, {"sha": "b9887af962cbc1a898801fe21e54127a58ecb77c", "filename": "src/test/ui/invalid-self-argument/trait-fn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Finvalid-self-argument%2Ftrait-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Finvalid-self-argument%2Ftrait-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-self-argument%2Ftrait-fn.stderr?ref=994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "patch": "@@ -2,7 +2,7 @@ error: unexpected `self` parameter in function\n   --> $DIR/trait-fn.rs:4:20\n    |\n LL |     fn c(foo: u32, self) {}\n-   |                    ^^^^ must be the first associated function parameter\n+   |                    ^^^^ must be the first parameter of an associated function\n \n error: aborting due to previous error\n "}, {"sha": "5e8d487f41658571ab75b7a5971307c84b0d110d", "filename": "src/test/ui/issues/issue-39559.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fissues%2Fissue-39559.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fissues%2Fissue-39559.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39559.stderr?ref=994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "patch": "@@ -5,10 +5,6 @@ LL |     entries: [T; D::dim()],\n    |                     ^^^ function or associated item not found in `D`\n    |\n    = help: items from traits can only be used if the type parameter is bounded by the trait\n-help: the following trait defines an item `dim`, perhaps you need to restrict type parameter `D` with it:\n-   |\n-LL | pub struct Vector<T, D: Dim + Dim> {\n-   |                      ^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "6f19ee9c7dc0d600aba995b6b8a2292c041c5334", "filename": "src/test/ui/parser/inverted-parameters.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fparser%2Finverted-parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fparser%2Finverted-parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Finverted-parameters.rs?ref=994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "patch": "@@ -21,6 +21,7 @@ fn pattern((i32, i32) (a, b)) {}\n fn fizz(i32) {}\n //~^ ERROR expected one of `:`, `@`\n //~| HELP if this was a parameter name, give it a type\n+//~| HELP if this is a `self` type, give it a parameter name\n //~| HELP if this is a type, explicitly ignore the parameter name\n \n fn missing_colon(quux S) {}"}, {"sha": "043ff65f74e1a4831e3b066e6321ca2223115bca", "filename": "src/test/ui/parser/inverted-parameters.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fparser%2Finverted-parameters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fparser%2Finverted-parameters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Finverted-parameters.stderr?ref=994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "patch": "@@ -35,6 +35,10 @@ LL | fn fizz(i32) {}\n    |            ^ expected one of `:`, `@`, or `|`\n    |\n    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n+help: if this is a `self` type, give it a parameter name\n+   |\n+LL | fn fizz(self: i32) {}\n+   |         ^^^^^^^^^\n help: if this was a parameter name, give it a type\n    |\n LL | fn fizz(i32: TypeName) {}\n@@ -45,7 +49,7 @@ LL | fn fizz(_: i32) {}\n    |         ^^^^^^\n \n error: expected one of `:`, `@`, or `|`, found `S`\n-  --> $DIR/inverted-parameters.rs:26:23\n+  --> $DIR/inverted-parameters.rs:27:23\n    |\n LL | fn missing_colon(quux S) {}\n    |                  -----^"}, {"sha": "9f138bf84ce1985a69638db8db90ee6bc3c56d30", "filename": "src/test/ui/parser/omitted-arg-in-item-fn.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fparser%2Fomitted-arg-in-item-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fparser%2Fomitted-arg-in-item-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fomitted-arg-in-item-fn.stderr?ref=994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "patch": "@@ -5,6 +5,10 @@ LL | fn foo(x) {\n    |         ^ expected one of `:`, `@`, or `|`\n    |\n    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n+help: if this is a `self` type, give it a parameter name\n+   |\n+LL | fn foo(self: x) {\n+   |        ^^^^^^^\n help: if this was a parameter name, give it a type\n    |\n LL | fn foo(x: TypeName) {"}, {"sha": "6db9a4a0f15a6f92d69e4b3c1c0a20bbe9e8aa01", "filename": "src/test/ui/parser/pat-lt-bracket-2.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-2.stderr?ref=994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "patch": "@@ -5,6 +5,10 @@ LL | fn a(B<) {}\n    |       ^ expected one of `:`, `@`, or `|`\n    |\n    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n+help: if this is a `self` type, give it a parameter name\n+   |\n+LL | fn a(self: B<) {}\n+   |      ^^^^^^^\n help: if this is a type, explicitly ignore the parameter name\n    |\n LL | fn a(_: B<) {}"}, {"sha": "47d8381b0b1dad4322fcc4935f9c73de6a0a001f", "filename": "src/test/ui/parser/self-in-function-arg.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fparser%2Fself-in-function-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fparser%2Fself-in-function-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fself-in-function-arg.stderr?ref=994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "patch": "@@ -2,9 +2,7 @@ error: unexpected `self` parameter in function\n   --> $DIR/self-in-function-arg.rs:1:15\n    |\n LL | fn foo(x:i32, self: i32) -> i32 { self }\n-   |               ^^^^ not valid as function parameter\n-   |\n-   = note: `self` is only valid as the first parameter of an associated function\n+   |               ^^^^ must be the first parameter of an associated function\n \n error: aborting due to previous error\n "}, {"sha": "5676971b01ae42a123c8a4fa1f24c4b5321c6dfb", "filename": "src/test/ui/parser/self-param-semantic-fail.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fparser%2Fself-param-semantic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fparser%2Fself-param-semantic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fself-param-semantic-fail.rs?ref=994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "patch": "@@ -0,0 +1,64 @@\n+// This test ensures that `self` is semantically rejected\n+// in contexts with `FnDecl` but outside of associated `fn`s.\n+// FIXME(Centril): For now closures are an exception.\n+\n+fn main() {}\n+\n+fn free() {\n+    fn f1(self) {}\n+    //~^ ERROR `self` parameter is only allowed in associated functions\n+    fn f2(mut self) {}\n+    //~^ ERROR `self` parameter is only allowed in associated functions\n+    fn f3(&self) {}\n+    //~^ ERROR `self` parameter is only allowed in associated functions\n+    fn f4(&mut self) {}\n+    //~^ ERROR `self` parameter is only allowed in associated functions\n+    fn f5<'a>(&'a self) {}\n+    //~^ ERROR `self` parameter is only allowed in associated functions\n+    fn f6<'a>(&'a mut self) {}\n+    //~^ ERROR `self` parameter is only allowed in associated functions\n+    fn f7(self: u8) {}\n+    //~^ ERROR `self` parameter is only allowed in associated functions\n+    fn f8(mut self: u8) {}\n+    //~^ ERROR `self` parameter is only allowed in associated functions\n+}\n+\n+extern {\n+    fn f1(self);\n+    //~^ ERROR `self` parameter is only allowed in associated functions\n+    fn f2(mut self);\n+    //~^ ERROR `self` parameter is only allowed in associated functions\n+    //~| ERROR patterns aren't allowed in\n+    fn f3(&self);\n+    //~^ ERROR `self` parameter is only allowed in associated functions\n+    fn f4(&mut self);\n+    //~^ ERROR `self` parameter is only allowed in associated functions\n+    fn f5<'a>(&'a self);\n+    //~^ ERROR `self` parameter is only allowed in associated functions\n+    fn f6<'a>(&'a mut self);\n+    //~^ ERROR `self` parameter is only allowed in associated functions\n+    fn f7(self: u8);\n+    //~^ ERROR `self` parameter is only allowed in associated functions\n+    fn f8(mut self: u8);\n+    //~^ ERROR `self` parameter is only allowed in associated functions\n+    //~| ERROR patterns aren't allowed in\n+}\n+\n+type X1 = fn(self);\n+//~^ ERROR `self` parameter is only allowed in associated functions\n+type X2 = fn(mut self);\n+//~^ ERROR `self` parameter is only allowed in associated functions\n+//~| ERROR patterns aren't allowed in\n+type X3 = fn(&self);\n+//~^ ERROR `self` parameter is only allowed in associated functions\n+type X4 = fn(&mut self);\n+//~^ ERROR `self` parameter is only allowed in associated functions\n+type X5 = for<'a> fn(&'a self);\n+//~^ ERROR `self` parameter is only allowed in associated functions\n+type X6 = for<'a> fn(&'a mut self);\n+//~^ ERROR `self` parameter is only allowed in associated functions\n+type X7 = fn(self: u8);\n+//~^ ERROR `self` parameter is only allowed in associated functions\n+type X8 = fn(mut self: u8);\n+//~^ ERROR `self` parameter is only allowed in associated functions\n+//~| ERROR patterns aren't allowed in"}, {"sha": "e5d679773696b1b760c463a66df89b4aae26a775", "filename": "src/test/ui/parser/self-param-semantic-fail.stderr", "status": "added", "additions": 220, "deletions": 0, "changes": 220, "blob_url": "https://github.com/rust-lang/rust/blob/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fparser%2Fself-param-semantic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fparser%2Fself-param-semantic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fself-param-semantic-fail.stderr?ref=994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "patch": "@@ -0,0 +1,220 @@\n+error: `self` parameter is only allowed in associated functions\n+  --> $DIR/self-param-semantic-fail.rs:8:11\n+   |\n+LL |     fn f1(self) {}\n+   |           ^^^^ not semantically valid as function parameter\n+   |\n+   = note: associated functions are those in `impl` or `trait` definitions\n+\n+error: `self` parameter is only allowed in associated functions\n+  --> $DIR/self-param-semantic-fail.rs:10:11\n+   |\n+LL |     fn f2(mut self) {}\n+   |           ^^^^^^^^ not semantically valid as function parameter\n+   |\n+   = note: associated functions are those in `impl` or `trait` definitions\n+\n+error: `self` parameter is only allowed in associated functions\n+  --> $DIR/self-param-semantic-fail.rs:12:11\n+   |\n+LL |     fn f3(&self) {}\n+   |           ^^^^^ not semantically valid as function parameter\n+   |\n+   = note: associated functions are those in `impl` or `trait` definitions\n+\n+error: `self` parameter is only allowed in associated functions\n+  --> $DIR/self-param-semantic-fail.rs:14:11\n+   |\n+LL |     fn f4(&mut self) {}\n+   |           ^^^^^^^^^ not semantically valid as function parameter\n+   |\n+   = note: associated functions are those in `impl` or `trait` definitions\n+\n+error: `self` parameter is only allowed in associated functions\n+  --> $DIR/self-param-semantic-fail.rs:16:15\n+   |\n+LL |     fn f5<'a>(&'a self) {}\n+   |               ^^^^^^^^ not semantically valid as function parameter\n+   |\n+   = note: associated functions are those in `impl` or `trait` definitions\n+\n+error: `self` parameter is only allowed in associated functions\n+  --> $DIR/self-param-semantic-fail.rs:18:15\n+   |\n+LL |     fn f6<'a>(&'a mut self) {}\n+   |               ^^^^^^^^^^^^ not semantically valid as function parameter\n+   |\n+   = note: associated functions are those in `impl` or `trait` definitions\n+\n+error: `self` parameter is only allowed in associated functions\n+  --> $DIR/self-param-semantic-fail.rs:20:11\n+   |\n+LL |     fn f7(self: u8) {}\n+   |           ^^^^ not semantically valid as function parameter\n+   |\n+   = note: associated functions are those in `impl` or `trait` definitions\n+\n+error: `self` parameter is only allowed in associated functions\n+  --> $DIR/self-param-semantic-fail.rs:22:11\n+   |\n+LL |     fn f8(mut self: u8) {}\n+   |           ^^^^^^^^ not semantically valid as function parameter\n+   |\n+   = note: associated functions are those in `impl` or `trait` definitions\n+\n+error: `self` parameter is only allowed in associated functions\n+  --> $DIR/self-param-semantic-fail.rs:27:11\n+   |\n+LL |     fn f1(self);\n+   |           ^^^^ not semantically valid as function parameter\n+   |\n+   = note: associated functions are those in `impl` or `trait` definitions\n+\n+error: `self` parameter is only allowed in associated functions\n+  --> $DIR/self-param-semantic-fail.rs:29:11\n+   |\n+LL |     fn f2(mut self);\n+   |           ^^^^^^^^ not semantically valid as function parameter\n+   |\n+   = note: associated functions are those in `impl` or `trait` definitions\n+\n+error[E0130]: patterns aren't allowed in foreign function declarations\n+  --> $DIR/self-param-semantic-fail.rs:29:11\n+   |\n+LL |     fn f2(mut self);\n+   |           ^^^^^^^^ pattern not allowed in foreign function\n+\n+error: `self` parameter is only allowed in associated functions\n+  --> $DIR/self-param-semantic-fail.rs:32:11\n+   |\n+LL |     fn f3(&self);\n+   |           ^^^^^ not semantically valid as function parameter\n+   |\n+   = note: associated functions are those in `impl` or `trait` definitions\n+\n+error: `self` parameter is only allowed in associated functions\n+  --> $DIR/self-param-semantic-fail.rs:34:11\n+   |\n+LL |     fn f4(&mut self);\n+   |           ^^^^^^^^^ not semantically valid as function parameter\n+   |\n+   = note: associated functions are those in `impl` or `trait` definitions\n+\n+error: `self` parameter is only allowed in associated functions\n+  --> $DIR/self-param-semantic-fail.rs:36:15\n+   |\n+LL |     fn f5<'a>(&'a self);\n+   |               ^^^^^^^^ not semantically valid as function parameter\n+   |\n+   = note: associated functions are those in `impl` or `trait` definitions\n+\n+error: `self` parameter is only allowed in associated functions\n+  --> $DIR/self-param-semantic-fail.rs:38:15\n+   |\n+LL |     fn f6<'a>(&'a mut self);\n+   |               ^^^^^^^^^^^^ not semantically valid as function parameter\n+   |\n+   = note: associated functions are those in `impl` or `trait` definitions\n+\n+error: `self` parameter is only allowed in associated functions\n+  --> $DIR/self-param-semantic-fail.rs:40:11\n+   |\n+LL |     fn f7(self: u8);\n+   |           ^^^^ not semantically valid as function parameter\n+   |\n+   = note: associated functions are those in `impl` or `trait` definitions\n+\n+error: `self` parameter is only allowed in associated functions\n+  --> $DIR/self-param-semantic-fail.rs:42:11\n+   |\n+LL |     fn f8(mut self: u8);\n+   |           ^^^^^^^^ not semantically valid as function parameter\n+   |\n+   = note: associated functions are those in `impl` or `trait` definitions\n+\n+error[E0130]: patterns aren't allowed in foreign function declarations\n+  --> $DIR/self-param-semantic-fail.rs:42:11\n+   |\n+LL |     fn f8(mut self: u8);\n+   |           ^^^^^^^^ pattern not allowed in foreign function\n+\n+error: `self` parameter is only allowed in associated functions\n+  --> $DIR/self-param-semantic-fail.rs:47:14\n+   |\n+LL | type X1 = fn(self);\n+   |              ^^^^ not semantically valid as function parameter\n+   |\n+   = note: associated functions are those in `impl` or `trait` definitions\n+\n+error: `self` parameter is only allowed in associated functions\n+  --> $DIR/self-param-semantic-fail.rs:49:14\n+   |\n+LL | type X2 = fn(mut self);\n+   |              ^^^^^^^^ not semantically valid as function parameter\n+   |\n+   = note: associated functions are those in `impl` or `trait` definitions\n+\n+error[E0561]: patterns aren't allowed in function pointer types\n+  --> $DIR/self-param-semantic-fail.rs:49:14\n+   |\n+LL | type X2 = fn(mut self);\n+   |              ^^^^^^^^\n+\n+error: `self` parameter is only allowed in associated functions\n+  --> $DIR/self-param-semantic-fail.rs:52:14\n+   |\n+LL | type X3 = fn(&self);\n+   |              ^^^^^ not semantically valid as function parameter\n+   |\n+   = note: associated functions are those in `impl` or `trait` definitions\n+\n+error: `self` parameter is only allowed in associated functions\n+  --> $DIR/self-param-semantic-fail.rs:54:14\n+   |\n+LL | type X4 = fn(&mut self);\n+   |              ^^^^^^^^^ not semantically valid as function parameter\n+   |\n+   = note: associated functions are those in `impl` or `trait` definitions\n+\n+error: `self` parameter is only allowed in associated functions\n+  --> $DIR/self-param-semantic-fail.rs:56:22\n+   |\n+LL | type X5 = for<'a> fn(&'a self);\n+   |                      ^^^^^^^^ not semantically valid as function parameter\n+   |\n+   = note: associated functions are those in `impl` or `trait` definitions\n+\n+error: `self` parameter is only allowed in associated functions\n+  --> $DIR/self-param-semantic-fail.rs:58:22\n+   |\n+LL | type X6 = for<'a> fn(&'a mut self);\n+   |                      ^^^^^^^^^^^^ not semantically valid as function parameter\n+   |\n+   = note: associated functions are those in `impl` or `trait` definitions\n+\n+error: `self` parameter is only allowed in associated functions\n+  --> $DIR/self-param-semantic-fail.rs:60:14\n+   |\n+LL | type X7 = fn(self: u8);\n+   |              ^^^^ not semantically valid as function parameter\n+   |\n+   = note: associated functions are those in `impl` or `trait` definitions\n+\n+error: `self` parameter is only allowed in associated functions\n+  --> $DIR/self-param-semantic-fail.rs:62:14\n+   |\n+LL | type X8 = fn(mut self: u8);\n+   |              ^^^^^^^^ not semantically valid as function parameter\n+   |\n+   = note: associated functions are those in `impl` or `trait` definitions\n+\n+error[E0561]: patterns aren't allowed in function pointer types\n+  --> $DIR/self-param-semantic-fail.rs:62:14\n+   |\n+LL | type X8 = fn(mut self: u8);\n+   |              ^^^^^^^^\n+\n+error: aborting due to 28 previous errors\n+\n+Some errors have detailed explanations: E0130, E0561.\n+For more information about an error, try `rustc --explain E0130`."}, {"sha": "9e215e6cdd4b79e38ad85e77838d624133ed9f1f", "filename": "src/test/ui/parser/self-param-syntactic-pass.rs", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fparser%2Fself-param-syntactic-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fparser%2Fself-param-syntactic-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fself-param-syntactic-pass.rs?ref=994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "patch": "@@ -0,0 +1,66 @@\n+// This test ensures that `self` is syntactically accepted in all places an `FnDecl` is parsed.\n+// FIXME(Centril): For now closures are an exception.\n+\n+// check-pass\n+\n+fn main() {}\n+\n+#[cfg(FALSE)]\n+fn free() {\n+    fn f(self) {}\n+    fn f(mut self) {}\n+    fn f(&self) {}\n+    fn f(&mut self) {}\n+    fn f(&'a self) {}\n+    fn f(&'a mut self) {}\n+    fn f(self: u8) {}\n+    fn f(mut self: u8) {}\n+}\n+\n+#[cfg(FALSE)]\n+extern {\n+    fn f(self);\n+    fn f(mut self);\n+    fn f(&self);\n+    fn f(&mut self);\n+    fn f(&'a self);\n+    fn f(&'a mut self);\n+    fn f(self: u8);\n+    fn f(mut self: u8);\n+}\n+\n+#[cfg(FALSE)]\n+trait X {\n+    fn f(self) {}\n+    fn f(mut self) {}\n+    fn f(&self) {}\n+    fn f(&mut self) {}\n+    fn f(&'a self) {}\n+    fn f(&'a mut self) {}\n+    fn f(self: u8) {}\n+    fn f(mut self: u8) {}\n+}\n+\n+#[cfg(FALSE)]\n+impl X for Y {\n+    fn f(self) {}\n+    fn f(mut self) {}\n+    fn f(&self) {}\n+    fn f(&mut self) {}\n+    fn f(&'a self) {}\n+    fn f(&'a mut self) {}\n+    fn f(self: u8) {}\n+    fn f(mut self: u8) {}\n+}\n+\n+#[cfg(FALSE)]\n+impl X for Y {\n+    type X = fn(self);\n+    type X = fn(mut self);\n+    type X = fn(&self);\n+    type X = fn(&mut self);\n+    type X = fn(&'a self);\n+    type X = fn(&'a mut self);\n+    type X = fn(self: u8);\n+    type X = fn(mut self: u8);\n+}"}, {"sha": "73766c31b93b60779f52797906257f384c9cd78c", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.nll.stderr?ref=994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait.rs:8:31\n+  --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait.rs:6:31\n    |\n LL |     fn f(self: Pin<&Self>) -> impl Clone { self }\n    |                    -          ^^^^^^^^^^ opaque type requires that `'1` must outlive `'static`"}, {"sha": "5054568b18970ca0331dfde31bed23c1de9c65ac", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.rs?ref=994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "patch": "@@ -1,5 +1,3 @@\n-// compile-fail\n-\n use std::pin::Pin;\n \n struct Foo;"}, {"sha": "47ab6fff83878ed478758fc29402ef5df7eb0569", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr?ref=994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "patch": "@@ -1,17 +1,17 @@\n error: cannot infer an appropriate lifetime\n-  --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait.rs:8:44\n+  --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait.rs:6:44\n    |\n LL |     fn f(self: Pin<&Self>) -> impl Clone { self }\n    |                               ----------   ^^^^ ...but this borrow...\n    |                               |\n    |                               this return type evaluates to the `'static` lifetime...\n    |\n-note: ...can't outlive the anonymous lifetime #1 defined on the method body at 8:5\n-  --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait.rs:8:5\n+note: ...can't outlive the anonymous lifetime #1 defined on the method body at 6:5\n+  --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait.rs:6:5\n    |\n LL |     fn f(self: Pin<&Self>) -> impl Clone { self }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: you can add a bound to the return type to make it last less than `'static` and match the anonymous lifetime #1 defined on the method body at 8:5\n+help: you can add a bound to the return type to make it last less than `'static` and match the anonymous lifetime #1 defined on the method body at 6:5\n    |\n LL |     fn f(self: Pin<&Self>) -> impl Clone + '_ { self }\n    |                               ^^^^^^^^^^^^^^^"}, {"sha": "1a0904fcbba6eba38173f865232bc996c2f78c7e", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.nll.stderr?ref=994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch.rs:8:46\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch.rs:6:46\n    |\n LL |     fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n    |                    -         -               ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n@@ -8,7 +8,7 @@ LL |     fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n    |                    let's call the lifetime of this reference `'2`\n \n error: lifetime may not live long enough\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch.rs:10:69\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch.rs:8:69\n    |\n LL |     fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n    |                    -          -                                     ^^^^^^^^^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n@@ -17,7 +17,7 @@ LL |     fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self,\n    |                    let's call the lifetime of this reference `'2`\n \n error: lifetime may not live long enough\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch.rs:15:58\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch.rs:13:58\n    |\n LL |     fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> &() { arg }\n    |            --  ---- has type `std::pin::Pin<&'1 Foo>`    ^^^ function was supposed to return data with lifetime `'1` but it is returning data with lifetime `'a`"}, {"sha": "8291e44080b37dc4993e1971a4ab8f5a38477b92", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.rs?ref=994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "patch": "@@ -1,5 +1,3 @@\n-// compile-fail\n-\n use std::pin::Pin;\n \n struct Foo;"}, {"sha": "6bb7ad7cdc7c22ee3c59d69810a1d05d7946622d", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.stderr?ref=994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "patch": "@@ -1,21 +1,21 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch.rs:8:46\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch.rs:6:46\n    |\n LL |     fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n    |                              ----     ----   ^ ...but data from `f` is returned here\n    |                              |\n    |                              this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch.rs:10:76\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch.rs:8:76\n    |\n LL |     fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n    |                               ----              -----------------          ^ ...but data from `f` is returned here\n    |                               |\n    |                               this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch.rs:15:58\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch.rs:13:58\n    |\n LL |     fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> &() { arg }\n    |                                         ------     ---   ^^^ ...but data from `arg` is returned here"}, {"sha": "80a237ac6aad498d7ce1575307fd790f68d51d42", "filename": "src/test/ui/span/issue-34264.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr?ref=994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "patch": "@@ -5,6 +5,10 @@ LL | fn foo(Option<i32>, String) {}\n    |              ^ expected one of `:`, `@`, or `|`\n    |\n    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n+help: if this is a `self` type, give it a parameter name\n+   |\n+LL | fn foo(self: Option<i32>, String) {}\n+   |        ^^^^^^^^^^^^\n help: if this is a type, explicitly ignore the parameter name\n    |\n LL | fn foo(_: Option<i32>, String) {}\n@@ -33,6 +37,10 @@ LL | fn bar(x, y: usize) {}\n    |         ^ expected one of `:`, `@`, or `|`\n    |\n    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n+help: if this is a `self` type, give it a parameter name\n+   |\n+LL | fn bar(self: x, y: usize) {}\n+   |        ^^^^^^^\n help: if this was a parameter name, give it a type\n    |\n LL | fn bar(x: TypeName, y: usize) {}"}, {"sha": "89b36848a2897c2d6ebc4c4fd3cf38f7d5a12fcc", "filename": "src/test/ui/span/issue-7575.stderr", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fspan%2Fissue-7575.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fspan%2Fissue-7575.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-7575.stderr?ref=994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "patch": "@@ -61,7 +61,10 @@ error[E0599]: no method named `is_str` found for type parameter `T` in the curre\n   --> $DIR/issue-7575.rs:70:7\n    |\n LL |     t.is_str()\n-   |       ^^^^^^ this is an associated function, not a method\n+   |     --^^^^^^--\n+   |     | |\n+   |     | this is an associated function, not a method\n+   |     help: disambiguate the method call for the candidate: `ManyImplTrait::is_str(t)`\n    |\n    = note: found the following associated functions; to be used as methods, functions must have a `self` parameter\n note: the candidate is defined in the trait `ManyImplTrait`\n@@ -70,14 +73,6 @@ note: the candidate is defined in the trait `ManyImplTrait`\n LL |     fn is_str() -> bool {\n    |     ^^^^^^^^^^^^^^^^^^^\n    = help: items from traits can only be used if the type parameter is bounded by the trait\n-help: disambiguate the method call for the candidate\n-   |\n-LL |     ManyImplTrait::is_str(t)\n-   |\n-help: the following trait defines an item `is_str`, perhaps you need to restrict type parameter `T` with it:\n-   |\n-LL | fn param_bound<T: ManyImplTrait + ManyImplTrait>(t: T) -> bool {\n-   |                ^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "e96db3f1e8630664159a9ef6c8f46506de0382bf", "filename": "src/test/ui/suggestions/issue-64252-self-type.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fsuggestions%2Fissue-64252-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Fsuggestions%2Fissue-64252-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-64252-self-type.stderr?ref=994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "patch": "@@ -5,6 +5,10 @@ LL | pub fn foo(Box<Self>) { }\n    |               ^ expected one of `:`, `@`, or `|`\n    |\n    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n+help: if this is a `self` type, give it a parameter name\n+   |\n+LL | pub fn foo(self: Box<Self>) { }\n+   |            ^^^^^^^^^\n help: if this is a type, explicitly ignore the parameter name\n    |\n LL | pub fn foo(_: Box<Self>) { }"}, {"sha": "fa4a309315b4776cb2a47f13fb73dd50a3aa7bd0", "filename": "src/test/ui/traits/reservation-impls/reservation-impl-coherence-conflict.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Ftraits%2Freservation-impls%2Freservation-impl-coherence-conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Ftraits%2Freservation-impls%2Freservation-impl-coherence-conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Freservation-impls%2Freservation-impl-coherence-conflict.rs?ref=994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "patch": "@@ -1,5 +1,3 @@\n-// compile-fail\n-\n // check that reservation impls are accounted for in negative reasoning.\n \n #![feature(rustc_attrs)]"}, {"sha": "d76d3a91c8d3f9508246749d838a602f5b10abb0", "filename": "src/test/ui/traits/reservation-impls/reservation-impl-coherence-conflict.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Ftraits%2Freservation-impls%2Freservation-impl-coherence-conflict.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Ftraits%2Freservation-impls%2Freservation-impl-coherence-conflict.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Freservation-impls%2Freservation-impl-coherence-conflict.stderr?ref=994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "patch": "@@ -1,5 +1,5 @@\n error[E0119]: conflicting implementations of trait `OtherTrait` for type `()`:\n-  --> $DIR/reservation-impl-coherence-conflict.rs:13:1\n+  --> $DIR/reservation-impl-coherence-conflict.rs:11:1\n    |\n LL | impl OtherTrait for () {}\n    | ---------------------- first implementation here"}, {"sha": "65a55d9e20936ac97ab59303a2eeef45cf11f43d", "filename": "src/test/ui/traits/reservation-impls/reservation-impl-no-use.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Ftraits%2Freservation-impls%2Freservation-impl-no-use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Ftraits%2Freservation-impls%2Freservation-impl-no-use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Freservation-impls%2Freservation-impl-no-use.rs?ref=994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "patch": "@@ -1,5 +1,3 @@\n-// compile-fail\n-\n // check that reservation impls can't be used as normal impls in positive reasoning.\n \n #![feature(rustc_attrs)]"}, {"sha": "794faff8848fe6a2fd5efb4aed238b1e5ec14217", "filename": "src/test/ui/traits/reservation-impls/reservation-impl-no-use.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Ftraits%2Freservation-impls%2Freservation-impl-no-use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Ftraits%2Freservation-impls%2Freservation-impl-no-use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Freservation-impls%2Freservation-impl-no-use.stderr?ref=994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `(): MyTrait` is not satisfied\n-  --> $DIR/reservation-impl-no-use.rs:12:26\n+  --> $DIR/reservation-impl-no-use.rs:10:26\n    |\n LL | trait MyTrait { fn foo(&self); }\n    |                 -------------- required by `MyTrait::foo`"}, {"sha": "17771e976ef3b3d6ce36faf8c804966334324831", "filename": "src/test/ui/traits/wf-trait-object-maybe-bound.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Ftraits%2Fwf-trait-object-maybe-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Ftraits%2Fwf-trait-object-maybe-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fwf-trait-object-maybe-bound.rs?ref=994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "patch": "@@ -1,5 +1,3 @@\n-// compile-fail\n-\n // Test that `dyn ... + ?Sized + ...` is okay (though `?Sized` has no effect in trait objects).\n \n trait Foo {}"}, {"sha": "4a570efcb5dbcd969532e9838809286ec7747925", "filename": "src/test/ui/traits/wf-trait-object-maybe-bound.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Ftraits%2Fwf-trait-object-maybe-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftest%2Fui%2Ftraits%2Fwf-trait-object-maybe-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fwf-trait-object-maybe-bound.stderr?ref=994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "patch": "@@ -1,29 +1,29 @@\n error: `?Trait` is not permitted in trait object types\n-  --> $DIR/wf-trait-object-maybe-bound.rs:7:15\n+  --> $DIR/wf-trait-object-maybe-bound.rs:5:15\n    |\n LL | type _0 = dyn ?Sized + Foo;\n    |               ^^^^^^\n \n error: `?Trait` is not permitted in trait object types\n-  --> $DIR/wf-trait-object-maybe-bound.rs:10:21\n+  --> $DIR/wf-trait-object-maybe-bound.rs:8:21\n    |\n LL | type _1 = dyn Foo + ?Sized;\n    |                     ^^^^^^\n \n error: `?Trait` is not permitted in trait object types\n-  --> $DIR/wf-trait-object-maybe-bound.rs:13:21\n+  --> $DIR/wf-trait-object-maybe-bound.rs:11:21\n    |\n LL | type _2 = dyn Foo + ?Sized + ?Sized;\n    |                     ^^^^^^\n \n error: `?Trait` is not permitted in trait object types\n-  --> $DIR/wf-trait-object-maybe-bound.rs:13:30\n+  --> $DIR/wf-trait-object-maybe-bound.rs:11:30\n    |\n LL | type _2 = dyn Foo + ?Sized + ?Sized;\n    |                              ^^^^^^\n \n error: `?Trait` is not permitted in trait object types\n-  --> $DIR/wf-trait-object-maybe-bound.rs:17:15\n+  --> $DIR/wf-trait-object-maybe-bound.rs:15:15\n    |\n LL | type _3 = dyn ?Sized + Foo;\n    |               ^^^^^^"}, {"sha": "555e79d3e065c5e920023bad3d4fd1ac07a1aa50", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/994e5e74653ae4bfe51094ce487a8b63f30ad3a4/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=994e5e74653ae4bfe51094ce487a8b63f30ad3a4", "patch": "@@ -554,6 +554,9 @@ impl TestProps {\n                 panic!(\"`{}-fail` header is only supported in UI tests\", mode);\n             }\n         };\n+        if config.mode == Mode::Ui && config.parse_name_directive(ln, \"compile-fail\") {\n+            panic!(\"`compile-fail` header is useless in UI tests\");\n+        }\n         let fail_mode = if config.parse_name_directive(ln, \"check-fail\") {\n             check_ui(\"check\");\n             Some(FailMode::Check)"}]}