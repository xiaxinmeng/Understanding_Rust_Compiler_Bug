{"sha": "b5fe3bc0650279e4283a0511670c0668fc0f2217", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1ZmUzYmMwNjUwMjc5ZTQyODNhMDUxMTY3MGMwNjY4ZmMwZjIyMTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-24T14:55:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-24T14:55:48Z"}, "message": "Auto merge of #87900 - jackh726:issue-87429, r=nikomatsakis\n\nUse bound vars for GAT params in param_env in check_type_bounds\n\nFixes #87429", "tree": {"sha": "e0b783aca25d0bc2ef154ba5ac82063fd580c9c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0b783aca25d0bc2ef154ba5ac82063fd580c9c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5fe3bc0650279e4283a0511670c0668fc0f2217", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5fe3bc0650279e4283a0511670c0668fc0f2217", "html_url": "https://github.com/rust-lang/rust/commit/b5fe3bc0650279e4283a0511670c0668fc0f2217", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5fe3bc0650279e4283a0511670c0668fc0f2217/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47ab5f7ce27397310bd8359b8db1504fbf8a9b59", "url": "https://api.github.com/repos/rust-lang/rust/commits/47ab5f7ce27397310bd8359b8db1504fbf8a9b59", "html_url": "https://github.com/rust-lang/rust/commit/47ab5f7ce27397310bd8359b8db1504fbf8a9b59"}, {"sha": "b0170779f5c6e9705658cda1b02cf1fd1a925205", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0170779f5c6e9705658cda1b02cf1fd1a925205", "html_url": "https://github.com/rust-lang/rust/commit/b0170779f5c6e9705658cda1b02cf1fd1a925205"}], "stats": {"total": 227, "additions": 215, "deletions": 12}, "files": [{"sha": "84ec2e76c0b07d0975c5f061de9a6f59150e342b", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b5fe3bc0650279e4283a0511670c0668fc0f2217/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5fe3bc0650279e4283a0511670c0668fc0f2217/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=b5fe3bc0650279e4283a0511670c0668fc0f2217", "patch": "@@ -234,7 +234,7 @@ impl<'a, 'tcx> InternalSubsts<'tcx> {\n         })\n     }\n \n-    fn fill_item<F>(\n+    pub fn fill_item<F>(\n         substs: &mut SmallVec<[GenericArg<'tcx>; 8]>,\n         tcx: TyCtxt<'tcx>,\n         defs: &ty::Generics,\n@@ -249,7 +249,7 @@ impl<'a, 'tcx> InternalSubsts<'tcx> {\n         Self::fill_single(substs, defs, mk_kind)\n     }\n \n-    fn fill_single<F>(\n+    pub fn fill_single<F>(\n         substs: &mut SmallVec<[GenericArg<'tcx>; 8]>,\n         defs: &ty::Generics,\n         mk_kind: &mut F,"}, {"sha": "c384e0dcb2cae418bf238647e14d776166823917", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 93, "deletions": 10, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/b5fe3bc0650279e4283a0511670c0668fc0f2217/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5fe3bc0650279e4283a0511670c0668fc0f2217/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=b5fe3bc0650279e4283a0511670c0668fc0f2217", "patch": "@@ -1225,6 +1225,7 @@ fn compare_type_predicate_entailment<'tcx>(\n /// For default associated types the normalization is not possible (the value\n /// from the impl could be overridden). We also can't normalize generic\n /// associated types (yet) because they contain bound parameters.\n+#[tracing::instrument(level = \"debug\", skip(tcx))]\n pub fn check_type_bounds<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     trait_ty: &ty::AssocItem,\n@@ -1238,10 +1239,83 @@ pub fn check_type_bounds<'tcx>(\n     //     type Bar<C> =...\n     // }\n     //\n-    // - `impl_substs` would be `[A, B, C]`\n-    // - `rebased_substs` would be `[(A, B), u32, C]`, combining the substs from\n-    //    the *trait* with the generic associated type parameters.\n-    let impl_ty_substs = InternalSubsts::identity_for_item(tcx, impl_ty.def_id);\n+    // - `impl_trait_ref` would be `<(A, B) as Foo<u32>>\n+    // - `impl_ty_substs` would be `[A, B, ^0.0]` (`^0.0` here is the bound var with db 0 and index 0)\n+    // - `rebased_substs` would be `[(A, B), u32, ^0.0]`, combining the substs from\n+    //    the *trait* with the generic associated type parameters (as bound vars).\n+    //\n+    // A note regarding the use of bound vars here:\n+    // Imagine as an example\n+    // ```\n+    // trait Family {\n+    //     type Member<C: Eq>;\n+    // }\n+    //\n+    // impl Family for VecFamily {\n+    //     type Member<C: Eq> = i32;\n+    // }\n+    // ```\n+    // Here, we would generate\n+    // ```notrust\n+    // forall<C> { Normalize(<VecFamily as Family>::Member<C> => i32) }\n+    // ```\n+    // when we really would like to generate\n+    // ```notrust\n+    // forall<C> { Normalize(<VecFamily as Family>::Member<C> => i32) :- Implemented(C: Eq) }\n+    // ```\n+    // But, this is probably fine, because although the first clause can be used with types C that\n+    // do not implement Eq, for it to cause some kind of problem, there would have to be a\n+    // VecFamily::Member<X> for some type X where !(X: Eq), that appears in the value of type\n+    // Member<C: Eq> = .... That type would fail a well-formedness check that we ought to be doing\n+    // elsewhere, which would check that any <T as Family>::Member<X> meets the bounds declared in\n+    // the trait (notably, that X: Eq and T: Family).\n+    let defs: &ty::Generics = tcx.generics_of(impl_ty.def_id);\n+    let mut substs = smallvec::SmallVec::with_capacity(defs.count());\n+    if let Some(def_id) = defs.parent {\n+        let parent_defs = tcx.generics_of(def_id);\n+        InternalSubsts::fill_item(&mut substs, tcx, parent_defs, &mut |param, _| {\n+            tcx.mk_param_from_def(param)\n+        });\n+    }\n+    let mut bound_vars: smallvec::SmallVec<[ty::BoundVariableKind; 8]> =\n+        smallvec::SmallVec::with_capacity(defs.count());\n+    InternalSubsts::fill_single(&mut substs, defs, &mut |param, _| match param.kind {\n+        GenericParamDefKind::Type { .. } => {\n+            let kind = ty::BoundTyKind::Param(param.name);\n+            let bound_var = ty::BoundVariableKind::Ty(kind);\n+            bound_vars.push(bound_var);\n+            tcx.mk_ty(ty::Bound(\n+                ty::INNERMOST,\n+                ty::BoundTy { var: ty::BoundVar::from_usize(bound_vars.len() - 1), kind },\n+            ))\n+            .into()\n+        }\n+        GenericParamDefKind::Lifetime => {\n+            let kind = ty::BoundRegionKind::BrNamed(param.def_id, param.name);\n+            let bound_var = ty::BoundVariableKind::Region(kind);\n+            bound_vars.push(bound_var);\n+            tcx.mk_region(ty::ReLateBound(\n+                ty::INNERMOST,\n+                ty::BoundRegion { var: ty::BoundVar::from_usize(bound_vars.len() - 1), kind },\n+            ))\n+            .into()\n+        }\n+        GenericParamDefKind::Const { .. } => {\n+            let bound_var = ty::BoundVariableKind::Const;\n+            bound_vars.push(bound_var);\n+            tcx.mk_const(ty::Const {\n+                ty: tcx.type_of(param.def_id),\n+                val: ty::ConstKind::Bound(\n+                    ty::INNERMOST,\n+                    ty::BoundVar::from_usize(bound_vars.len() - 1),\n+                ),\n+            })\n+            .into()\n+        }\n+    });\n+    let bound_vars = tcx.mk_bound_variable_kinds(bound_vars.into_iter());\n+    let impl_ty_substs = tcx.intern_substs(&substs);\n+\n     let rebased_substs =\n         impl_ty_substs.rebase_onto(tcx, impl_ty.container.id(), impl_trait_ref.substs);\n     let impl_ty_value = tcx.type_of(impl_ty.def_id);\n@@ -1270,18 +1344,26 @@ pub fn check_type_bounds<'tcx>(\n                 // impl<T> X for T where T: X { type Y = <T as X>::Y; }\n             }\n             _ => predicates.push(\n-                ty::Binder::dummy(ty::ProjectionPredicate {\n-                    projection_ty: ty::ProjectionTy {\n-                        item_def_id: trait_ty.def_id,\n-                        substs: rebased_substs,\n+                ty::Binder::bind_with_vars(\n+                    ty::ProjectionPredicate {\n+                        projection_ty: ty::ProjectionTy {\n+                            item_def_id: trait_ty.def_id,\n+                            substs: rebased_substs,\n+                        },\n+                        ty: impl_ty_value,\n                     },\n-                    ty: impl_ty_value,\n-                })\n+                    bound_vars,\n+                )\n                 .to_predicate(tcx),\n             ),\n         };\n         ty::ParamEnv::new(tcx.intern_predicates(&predicates), Reveal::UserFacing)\n     };\n+    debug!(?normalize_param_env);\n+\n+    let impl_ty_substs = InternalSubsts::identity_for_item(tcx, impl_ty.def_id);\n+    let rebased_substs =\n+        impl_ty_substs.rebase_onto(tcx, impl_ty.container.id(), impl_trait_ref.substs);\n \n     tcx.infer_ctxt().enter(move |infcx| {\n         let constness = impl_ty\n@@ -1308,6 +1390,7 @@ pub fn check_type_bounds<'tcx>(\n             .explicit_item_bounds(trait_ty.def_id)\n             .iter()\n             .map(|&(bound, span)| {\n+                debug!(?bound);\n                 let concrete_ty_bound = bound.subst(tcx, rebased_substs);\n                 debug!(\"check_type_bounds: concrete_ty_bound = {:?}\", concrete_ty_bound);\n "}, {"sha": "d35bb098abdf008325209ea597275c370b64c067", "filename": "src/test/ui/generic-associated-types/issue-87429-2.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b5fe3bc0650279e4283a0511670c0668fc0f2217/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5fe3bc0650279e4283a0511670c0668fc0f2217/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-2.rs?ref=b5fe3bc0650279e4283a0511670c0668fc0f2217", "patch": "@@ -0,0 +1,20 @@\n+// Derived from `issue-87429`. A test that ensures that using bound vars in the\n+// predicates in the param env when checking that an associated type satisfies\n+// its bounds does not cause us to not be able to use the bounds on the parameters.\n+\n+// check-pass\n+\n+#![feature(generic_associated_types)]\n+\n+trait Family {\n+    type Member<'a, C: Eq>: for<'b> MyBound<'b, C>;\n+}\n+\n+trait MyBound<'a, C> { }\n+impl<'a, C: Eq> MyBound<'a, C> for i32 { }\n+\n+impl Family for () {\n+    type Member<'a, C: Eq> = i32;\n+}\n+\n+fn main() {}"}, {"sha": "9ee07c2f1e1cc953a0535c22080bcfbe37faeb8d", "filename": "src/test/ui/generic-associated-types/issue-87429-associated-type-default.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b5fe3bc0650279e4283a0511670c0668fc0f2217/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-associated-type-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5fe3bc0650279e4283a0511670c0668fc0f2217/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-associated-type-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-associated-type-default.rs?ref=b5fe3bc0650279e4283a0511670c0668fc0f2217", "patch": "@@ -0,0 +1,18 @@\n+// check-fail\n+\n+#![feature(associated_type_defaults)]\n+#![feature(generic_associated_types)]\n+\n+trait Family {\n+    // Fine, i32: PartialEq<i32>\n+    type Member<'a>: for<'b> PartialEq<Self::Member<'b>> = i32;\n+}\n+\n+struct Foo;\n+trait Family2 {\n+    // Not fine, not Foo: PartialEq<Foo>\n+    type Member<'a>: for<'b> PartialEq<Self::Member<'b>> = Foo;\n+    //~^ ERROR can't compare\n+}\n+\n+fn main() {}"}, {"sha": "01cb0bfc72cd152c9101d12a5f114ae4dcb7966d", "filename": "src/test/ui/generic-associated-types/issue-87429-associated-type-default.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b5fe3bc0650279e4283a0511670c0668fc0f2217/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-associated-type-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b5fe3bc0650279e4283a0511670c0668fc0f2217/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-associated-type-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-associated-type-default.stderr?ref=b5fe3bc0650279e4283a0511670c0668fc0f2217", "patch": "@@ -0,0 +1,16 @@\n+error[E0277]: can't compare `Foo` with `Foo`\n+  --> $DIR/issue-87429-associated-type-default.rs:14:5\n+   |\n+LL |     type Member<'a>: for<'b> PartialEq<Self::Member<'b>> = Foo;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `Foo == Foo`\n+   |\n+   = help: the trait `PartialEq` is not implemented for `Foo`\n+note: required by a bound in `Family2::Member`\n+  --> $DIR/issue-87429-associated-type-default.rs:14:22\n+   |\n+LL |     type Member<'a>: for<'b> PartialEq<Self::Member<'b>> = Foo;\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Family2::Member`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "b365e07feb28a957e7e3ad9bc9bf420199591505", "filename": "src/test/ui/generic-associated-types/issue-87429-specialization.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b5fe3bc0650279e4283a0511670c0668fc0f2217/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5fe3bc0650279e4283a0511670c0668fc0f2217/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-specialization.rs?ref=b5fe3bc0650279e4283a0511670c0668fc0f2217", "patch": "@@ -0,0 +1,25 @@\n+// check-fail\n+\n+#![feature(specialization)]\n+//~^ WARN incomplete\n+#![feature(generic_associated_types)]\n+\n+trait Family {\n+    type Member<'a>: for<'b> PartialEq<Self::Member<'b>>;\n+}\n+\n+struct I32Family;\n+\n+impl Family for I32Family {\n+    default type Member<'a> = i32;\n+}\n+\n+struct Foo;\n+struct FooFamily;\n+\n+impl Family for FooFamily {\n+    default type Member<'a> = Foo;\n+    //~^ ERROR can't compare\n+}\n+\n+fn main() {}"}, {"sha": "87bd35f58788f50fcf6a2fe20c15a067a4727295", "filename": "src/test/ui/generic-associated-types/issue-87429-specialization.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b5fe3bc0650279e4283a0511670c0668fc0f2217/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-specialization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b5fe3bc0650279e4283a0511670c0668fc0f2217/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-specialization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-specialization.stderr?ref=b5fe3bc0650279e4283a0511670c0668fc0f2217", "patch": "@@ -0,0 +1,26 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-87429-specialization.rs:3:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n+\n+error[E0277]: can't compare `Foo` with `Foo`\n+  --> $DIR/issue-87429-specialization.rs:21:5\n+   |\n+LL |     default type Member<'a> = Foo;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `Foo == Foo`\n+   |\n+   = help: the trait `PartialEq` is not implemented for `Foo`\n+note: required by a bound in `Family::Member`\n+  --> $DIR/issue-87429-specialization.rs:8:22\n+   |\n+LL |     type Member<'a>: for<'b> PartialEq<Self::Member<'b>>;\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Family::Member`\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "f905348ae32a30fdba2868b575b9782ac7311e9c", "filename": "src/test/ui/generic-associated-types/issue-87429.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b5fe3bc0650279e4283a0511670c0668fc0f2217/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5fe3bc0650279e4283a0511670c0668fc0f2217/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429.rs?ref=b5fe3bc0650279e4283a0511670c0668fc0f2217", "patch": "@@ -0,0 +1,15 @@\n+// check-pass\n+\n+#![feature(generic_associated_types)]\n+\n+trait Family {\n+    type Member<'a>: for<'b> PartialEq<Self::Member<'b>>;\n+}\n+\n+struct I32;\n+\n+impl Family for I32 {\n+    type Member<'a> = i32;\n+}\n+\n+fn main() {}"}]}