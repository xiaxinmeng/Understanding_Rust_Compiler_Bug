{"sha": "25f3ef5ff998eea060e73be04bfe88cbedf57dc9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1ZjNlZjVmZjk5OGVlYTA2MGU3M2JlMDRiZmU4OGNiZWRmNTdkYzk=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-02-24T11:38:06Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-03-02T19:11:31Z"}, "message": "Implement ProjectionElem::Subslice", "tree": {"sha": "a26165d35a54110808a2686b03009144508ddfdc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a26165d35a54110808a2686b03009144508ddfdc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25f3ef5ff998eea060e73be04bfe88cbedf57dc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25f3ef5ff998eea060e73be04bfe88cbedf57dc9", "html_url": "https://github.com/rust-lang/rust/commit/25f3ef5ff998eea060e73be04bfe88cbedf57dc9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25f3ef5ff998eea060e73be04bfe88cbedf57dc9/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99eb418f19fdd0cb902e75c8586a231e5e476b25", "url": "https://api.github.com/repos/rust-lang/rust/commits/99eb418f19fdd0cb902e75c8586a231e5e476b25", "html_url": "https://github.com/rust-lang/rust/commit/99eb418f19fdd0cb902e75c8586a231e5e476b25"}], "stats": {"total": 42, "additions": 35, "deletions": 7}, "files": [{"sha": "d550ccbf61a24d5dec84e8bc02340badf0d97380", "filename": "example/mini_core_hello_world.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/25f3ef5ff998eea060e73be04bfe88cbedf57dc9/example%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25f3ef5ff998eea060e73be04bfe88cbedf57dc9/example%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core_hello_world.rs?ref=25f3ef5ff998eea060e73be04bfe88cbedf57dc9", "patch": "@@ -1,6 +1,6 @@\n // Adapted from https://github.com/sunfishcode/mir2cranelift/blob/master/rust-examples/nocore-hello-world.rs\n \n-#![feature(no_core, unboxed_closures, start, lang_items, box_syntax)]\n+#![feature(no_core, unboxed_closures, start, lang_items, box_syntax, slice_patterns)]\n #![no_core]\n #![allow(dead_code)]\n \n@@ -184,4 +184,10 @@ fn main() {\n     }\n \n     [NoisyDropInner, NoisyDropInner];\n+\n+    let x = &[0u32, 42u32] as &[u32];\n+    match x {\n+        [] => assert_eq!(0u32, 1),\n+        [_, ref y..] => assert_eq!(&x[1] as *const u32 as usize, &y[0] as *const u32 as usize),\n+    }\n }"}, {"sha": "6427c756ac880a1895654b78830e8d201b9cc858", "filename": "src/base.rs", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/25f3ef5ff998eea060e73be04bfe88cbedf57dc9/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25f3ef5ff998eea060e73be04bfe88cbedf57dc9/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=25f3ef5ff998eea060e73be04bfe88cbedf57dc9", "patch": "@@ -1117,12 +1117,34 @@ pub fn trans_place<'a, 'tcx: 'a>(\n                     };\n                     base.place_index(fx, index)\n                 }\n-                ProjectionElem::Subslice { from, to } => unimpl!(\n-                    \"projection subslice {:?} from {} to {}\",\n-                    projection.base,\n-                    from,\n-                    to\n-                ),\n+                ProjectionElem::Subslice { from, to } => {\n+                    // These indices are generated by slice patterns.\n+                    // slice[from:-to] in Python terms.\n+\n+                    match base.layout().ty.sty {\n+                        ty::Array(elem_ty, len) => {\n+                            let elem_layout = fx.layout_of(elem_ty);\n+                            let ptr = base.to_addr(fx);\n+                            let len = crate::constant::force_eval_const(fx, len).unwrap_usize(fx.tcx);\n+                            CPlace::Addr(\n+                                fx.bcx.ins().iadd_imm(ptr, elem_layout.size.bytes() as i64 * from as i64),\n+                                None,\n+                                fx.layout_of(fx.tcx.mk_array(elem_ty, len - from as u64 - to as u64)),\n+                            )\n+                        }\n+                        ty::Slice(elem_ty) => {\n+                            let elem_layout = fx.layout_of(elem_ty);\n+                            let (ptr, len) = base.to_addr_maybe_unsized(fx);\n+                            let len = len.unwrap();\n+                            CPlace::Addr(\n+                                fx.bcx.ins().iadd_imm(ptr, elem_layout.size.bytes() as i64 * from as i64),\n+                                Some(fx.bcx.ins().iadd_imm(len, -(from as i64 + to as i64))),\n+                                base.layout(),\n+                            )\n+                        }\n+                        _ => unreachable!(),\n+                    }\n+                }\n                 ProjectionElem::Downcast(_adt_def, variant) => base.downcast_variant(fx, variant),\n             }\n         }"}]}