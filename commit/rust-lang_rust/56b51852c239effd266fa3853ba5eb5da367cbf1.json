{"sha": "56b51852c239effd266fa3853ba5eb5da367cbf1", "node_id": "C_kwDOAAsO6NoAKDU2YjUxODUyYzIzOWVmZmQyNjZmYTM4NTNiYTVlYjVkYTM2N2NiZjE", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-12-28T13:50:13Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-12-28T13:52:15Z"}, "message": "minor: dedup", "tree": {"sha": "ca813b5819a9d3a7925ed205372a6bcb98a30242", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca813b5819a9d3a7925ed205372a6bcb98a30242"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56b51852c239effd266fa3853ba5eb5da367cbf1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56b51852c239effd266fa3853ba5eb5da367cbf1", "html_url": "https://github.com/rust-lang/rust/commit/56b51852c239effd266fa3853ba5eb5da367cbf1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56b51852c239effd266fa3853ba5eb5da367cbf1/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "726da9884b761d9ae1ad266ab50a9bb758ccb8a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/726da9884b761d9ae1ad266ab50a9bb758ccb8a9", "html_url": "https://github.com/rust-lang/rust/commit/726da9884b761d9ae1ad266ab50a9bb758ccb8a9"}], "stats": {"total": 65, "additions": 32, "deletions": 33}, "files": [{"sha": "f3d8550a87f25779189cc3438c788d42679046a4", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 32, "deletions": 33, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/56b51852c239effd266fa3853ba5eb5da367cbf1/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56b51852c239effd266fa3853ba5eb5da367cbf1/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=56b51852c239effd266fa3853ba5eb5da367cbf1", "patch": "@@ -10,7 +10,7 @@ use hir_def::{\n     resolver::{self, HasResolver, Resolver, TypeNs},\n     AsMacroCall, FunctionId, TraitId, VariantId,\n };\n-use hir_expand::{name::AsName, ExpansionInfo, MacroCallLoc};\n+use hir_expand::{name::AsName, ExpansionInfo, MacroCallId, MacroCallLoc};\n use hir_ty::{associated_type_shorthand_candidates, Interner};\n use itertools::Itertools;\n use rustc_hash::{FxHashMap, FxHashSet};\n@@ -448,46 +448,45 @@ impl<'db> SemanticsImpl<'db> {\n     }\n \n     fn resolve_derive_macro(&self, attr: &ast::Attr) -> Option<Vec<MacroDef>> {\n-        let item = attr.syntax().parent().and_then(ast::Item::cast)?;\n-        let file_id = self.find_file(item.syntax()).file_id;\n-        let item = InFile::new(file_id, &item);\n-        let src = InFile::new(file_id, attr.clone());\n-        self.with_ctx(|ctx| {\n-            let macro_call_ids = ctx.attr_to_derive_macro_call(item, src)?;\n-\n-            let res = macro_call_ids\n-                .iter()\n-                .map(|&call| {\n-                    let loc: MacroCallLoc = self.db.lookup_intern_macro_call(call);\n-                    MacroDef { id: loc.def }\n-                })\n-                .collect();\n-            Some(res)\n-        })\n+        let macro_call_ids = self.derive_macro_calls(attr)?;\n+        let res = macro_call_ids\n+            .iter()\n+            .map(|&call| {\n+                let loc: MacroCallLoc = self.db.lookup_intern_macro_call(call);\n+                MacroDef { id: loc.def }\n+            })\n+            .collect();\n+        Some(res)\n     }\n \n     fn expand_derive_macro(&self, attr: &ast::Attr) -> Option<Vec<SyntaxNode>> {\n+        let macro_call_ids = self.derive_macro_calls(attr)?;\n+\n+        let expansions: Vec<_> = macro_call_ids\n+            .iter()\n+            .map(|call| call.as_file())\n+            .flat_map(|file_id| {\n+                let node = self.db.parse_or_expand(file_id)?;\n+                self.cache(node.clone(), file_id);\n+                Some(node)\n+            })\n+            .collect();\n+\n+        if expansions.is_empty() {\n+            None\n+        } else {\n+            Some(expansions)\n+        }\n+    }\n+\n+    fn derive_macro_calls(&self, attr: &ast::Attr) -> Option<Vec<MacroCallId>> {\n         let item = attr.syntax().parent().and_then(ast::Item::cast)?;\n         let file_id = self.find_file(item.syntax()).file_id;\n         let item = InFile::new(file_id, &item);\n         let src = InFile::new(file_id, attr.clone());\n         self.with_ctx(|ctx| {\n-            let macro_call_ids = ctx.attr_to_derive_macro_call(item, src)?;\n-\n-            let expansions: Vec<_> = macro_call_ids\n-                .iter()\n-                .map(|call| call.as_file())\n-                .flat_map(|file_id| {\n-                    let node = self.db.parse_or_expand(file_id)?;\n-                    self.cache(node.clone(), file_id);\n-                    Some(node)\n-                })\n-                .collect();\n-            if expansions.is_empty() {\n-                None\n-            } else {\n-                Some(expansions)\n-            }\n+            let res = ctx.attr_to_derive_macro_call(item, src)?;\n+            Some(res.to_vec())\n         })\n     }\n "}]}