{"sha": "4961a8e2bd8a6d2144ee90b4ec568a1c5b7a3241", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5NjFhOGUyYmQ4YTZkMjE0NGVlOTBiNGVjNTY4YTFjNWI3YTMyNDE=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-09-18T11:14:38Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-09-18T11:14:38Z"}, "message": "incr.comp.: Fix ICE caused by trying to hash INVALID_CRATE_NUM.", "tree": {"sha": "470ddae1b0bb7b0c16a38fa8f316fb08ebf05adc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/470ddae1b0bb7b0c16a38fa8f316fb08ebf05adc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4961a8e2bd8a6d2144ee90b4ec568a1c5b7a3241", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4961a8e2bd8a6d2144ee90b4ec568a1c5b7a3241", "html_url": "https://github.com/rust-lang/rust/commit/4961a8e2bd8a6d2144ee90b4ec568a1c5b7a3241", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4961a8e2bd8a6d2144ee90b4ec568a1c5b7a3241/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74d6b850fd731597fe2f03408a0397a972c13641", "url": "https://api.github.com/repos/rust-lang/rust/commits/74d6b850fd731597fe2f03408a0397a972c13641", "html_url": "https://github.com/rust-lang/rust/commit/74d6b850fd731597fe2f03408a0397a972c13641"}], "stats": {"total": 35, "additions": 16, "deletions": 19}, "files": [{"sha": "c0045483ced47fbeaa712f6c181f4bd5b645cb4a", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4961a8e2bd8a6d2144ee90b4ec568a1c5b7a3241/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4961a8e2bd8a6d2144ee90b4ec568a1c5b7a3241/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=4961a8e2bd8a6d2144ee90b4ec568a1c5b7a3241", "patch": "@@ -1417,7 +1417,7 @@ define_maps! { <'tcx>\n     [] fn all_crate_nums: all_crate_nums_node(CrateNum) -> Rc<Vec<CrateNum>>,\n \n     [] fn exported_symbols: ExportedSymbols(CrateNum)\n-        -> Arc<Vec<(String, DefId, SymbolExportLevel)>>,\n+        -> Arc<Vec<(String, Option<DefId>, SymbolExportLevel)>>,\n     [] fn collect_and_partition_translation_items:\n         collect_and_partition_translation_items_node(CrateNum)\n         -> (Arc<DefIdSet>, Arc<Vec<Arc<CodegenUnit<'tcx>>>>),"}, {"sha": "e1f97e2c923db17d42ce32aab2a4be64fdc7363d", "filename": "src/librustc_trans/back/symbol_export.rs", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/4961a8e2bd8a6d2144ee90b4ec568a1c5b7a3241/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4961a8e2bd8a6d2144ee90b4ec568a1c5b7a3241/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs?ref=4961a8e2bd8a6d2144ee90b4ec568a1c5b7a3241", "patch": "@@ -14,7 +14,7 @@ use std::sync::Arc;\n use base;\n use monomorphize::Instance;\n use rustc::hir::def_id::CrateNum;\n-use rustc::hir::def_id::{DefId, LOCAL_CRATE, INVALID_CRATE, CRATE_DEF_INDEX};\n+use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::middle::exported_symbols::SymbolExportLevel;\n use rustc::session::config;\n use rustc::ty::TyCtxt;\n@@ -24,7 +24,7 @@ use rustc_allocator::ALLOCATOR_METHODS;\n \n pub type ExportedSymbols = FxHashMap<\n     CrateNum,\n-    Arc<Vec<(String, DefId, SymbolExportLevel)>>,\n+    Arc<Vec<(String, Option<DefId>, SymbolExportLevel)>>,\n >;\n \n pub fn threshold(tcx: TyCtxt) -> SymbolExportLevel {\n@@ -65,11 +65,13 @@ pub fn provide_local(providers: &mut Providers) {\n         Rc::new(tcx.exported_symbols(cnum)\n             .iter()\n             .filter_map(|&(_, id, level)| {\n-                if level.is_below_threshold(export_threshold) {\n-                    Some(id)\n-                } else {\n-                    None\n-                }\n+                id.and_then(|id| {\n+                    if level.is_below_threshold(export_threshold) {\n+                        Some(id)\n+                    } else {\n+                        None\n+                    }\n+                })\n             })\n             .collect())\n     };\n@@ -95,25 +97,20 @@ pub fn provide_local(providers: &mut Providers) {\n                 let name = tcx.symbol_name(Instance::mono(tcx, def_id));\n                 let export_level = export_level(tcx, def_id);\n                 debug!(\"EXPORTED SYMBOL (local): {} ({:?})\", name, export_level);\n-                (str::to_owned(&name), def_id, export_level)\n+                (str::to_owned(&name), Some(def_id), export_level)\n             })\n             .collect();\n \n-        const INVALID_DEF_ID: DefId = DefId {\n-            krate: INVALID_CRATE,\n-            index: CRATE_DEF_INDEX,\n-        };\n-\n         if let Some(_) = *tcx.sess.entry_fn.borrow() {\n             local_crate.push((\"main\".to_string(),\n-                              INVALID_DEF_ID,\n+                              None,\n                               SymbolExportLevel::C));\n         }\n \n         if tcx.sess.allocator_kind.get().is_some() {\n             for method in ALLOCATOR_METHODS {\n                 local_crate.push((format!(\"__rust_{}\", method.name),\n-                                  INVALID_DEF_ID,\n+                                  None,\n                                   SymbolExportLevel::Rust));\n             }\n         }\n@@ -123,12 +120,12 @@ pub fn provide_local(providers: &mut Providers) {\n             let idx = def_id.index;\n             let disambiguator = tcx.sess.local_crate_disambiguator();\n             let registrar = tcx.sess.generate_derive_registrar_symbol(disambiguator, idx);\n-            local_crate.push((registrar, def_id, SymbolExportLevel::C));\n+            local_crate.push((registrar, Some(def_id), SymbolExportLevel::C));\n         }\n \n         if tcx.sess.crate_types.borrow().contains(&config::CrateTypeDylib) {\n             local_crate.push((metadata_symbol_name(tcx),\n-                              INVALID_DEF_ID,\n+                              None,\n                               SymbolExportLevel::Rust));\n         }\n         Arc::new(local_crate)\n@@ -178,7 +175,7 @@ pub fn provide_extern(providers: &mut Providers) {\n                     export_level(tcx, def_id)\n                 };\n                 debug!(\"EXPORTED SYMBOL (re-export): {} ({:?})\", name, export_level);\n-                (str::to_owned(&name), def_id, export_level)\n+                (str::to_owned(&name), Some(def_id), export_level)\n             })\n             .collect();\n "}]}