{"sha": "4f65fc7ef2cbf7dcd768da60bd13cbf0ee45fe1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmNjVmYzdlZjJjYmY3ZGNkNzY4ZGE2MGJkMTNjYmYwZWU0NWZlMWI=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-07-29T22:59:43Z"}, "committer": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-07-29T22:59:43Z"}, "message": "Improve std::num module description, and fix some formatting", "tree": {"sha": "3b472e2f2d14b234336ba751a704ebd163306bed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b472e2f2d14b234336ba751a704ebd163306bed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f65fc7ef2cbf7dcd768da60bd13cbf0ee45fe1b", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f65fc7ef2cbf7dcd768da60bd13cbf0ee45fe1b", "html_url": "https://github.com/rust-lang/rust/commit/4f65fc7ef2cbf7dcd768da60bd13cbf0ee45fe1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f65fc7ef2cbf7dcd768da60bd13cbf0ee45fe1b/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6ea0538a90f40ec940d2ae09e167ef2718dc507", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6ea0538a90f40ec940d2ae09e167ef2718dc507", "html_url": "https://github.com/rust-lang/rust/commit/b6ea0538a90f40ec940d2ae09e167ef2718dc507"}], "stats": {"total": 25, "additions": 4, "deletions": 21}, "files": [{"sha": "8b61a8a8734b9fb8f8df49193bc51db5756c5e56", "filename": "src/libstd/num/num.rs", "status": "modified", "additions": 4, "deletions": 21, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4f65fc7ef2cbf7dcd768da60bd13cbf0ee45fe1b/src%2Flibstd%2Fnum%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f65fc7ef2cbf7dcd768da60bd13cbf0ee45fe1b/src%2Flibstd%2Fnum%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fnum.rs?ref=4f65fc7ef2cbf7dcd768da60bd13cbf0ee45fe1b", "patch": "@@ -8,7 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! An interface for numeric types\n+//! Numeric traits and functions for generic mathematics.\n+//!\n+//! These are implemented for the primitive numeric types in `std::{u8, u16,\n+//! u32, u64, uint, i8, i16, i32, i64, int, f32, f64, float}`.\n \n #[allow(missing_doc)];\n \n@@ -19,9 +22,7 @@ use option::Option;\n \n pub mod strconv;\n \n-///\n /// The base trait for numeric types\n-///\n pub trait Num: Eq + Zero + One\n              + Neg<Self>\n              + Add<Self,Self>\n@@ -188,9 +189,7 @@ pub trait Hyperbolic: Exponential {\n #[inline(always)] pub fn acosh<T: Hyperbolic>(value: T) -> T { value.acosh() }\n #[inline(always)] pub fn atanh<T: Hyperbolic>(value: T) -> T { value.atanh() }\n \n-///\n /// Defines constants and methods common to real numbers\n-///\n pub trait Real: Signed\n               + Fractional\n               + Algebraic\n@@ -221,9 +220,7 @@ pub trait Real: Signed\n     fn to_radians(&self) -> Self;\n }\n \n-///\n /// Methods that are harder to implement and not commonly used.\n-///\n pub trait RealExt: Real {\n     // FIXME (#5527): usages of `int` should be replaced with an associated\n     // integer type once these are implemented\n@@ -241,9 +238,7 @@ pub trait RealExt: Real {\n     fn yn(&self, n: int) -> Self;\n }\n \n-///\n /// Collects the bitwise operators under one trait.\n-///\n pub trait Bitwise: Not<Self>\n                  + BitAnd<Self,Self>\n                  + BitOr<Self,Self>\n@@ -263,11 +258,9 @@ pub trait Bounded {\n     fn max_value() -> Self;\n }\n \n-///\n /// Specifies the available operations common to all of Rust's core numeric primitives.\n /// These may not always make sense from a purely mathematical point of view, but\n /// may be useful for systems programming.\n-///\n pub trait Primitive: Num\n                    + NumCast\n                    + Bounded\n@@ -282,17 +275,13 @@ pub trait Primitive: Num\n     fn bytes() -> uint;\n }\n \n-///\n /// A collection of traits relevant to primitive signed and unsigned integers\n-///\n pub trait Int: Integer\n              + Primitive\n              + Bitwise\n              + BitCount {}\n \n-///\n /// Used for representing the classification of floating point numbers\n-///\n #[deriving(Eq)]\n pub enum FPCategory {\n     /// \"Not a Number\", often obtained by dividing by zero\n@@ -307,9 +296,7 @@ pub enum FPCategory {\n     FPNormal,\n }\n \n-///\n /// Primitive floating point numbers\n-///\n pub trait Float: Real\n                + Signed\n                + Primitive\n@@ -343,7 +330,6 @@ pub trait Float: Real\n     fn next_after(&self, other: Self) -> Self;\n }\n \n-///\n #[inline(always)] pub fn exp_m1<T: Float>(value: T) -> T { value.exp_m1() }\n #[inline(always)] pub fn ln_1p<T: Float>(value: T) -> T { value.ln_1p() }\n #[inline(always)] pub fn mul_add<T: Float>(a: T, b: T, c: T) -> T { a.mul_add(b, c) }\n@@ -362,9 +348,7 @@ pub fn cast<T:NumCast,U:NumCast>(n: T) -> U {\n     NumCast::from(n)\n }\n \n-///\n /// An interface for casting between machine scalars\n-///\n pub trait NumCast {\n     fn from<T:NumCast>(n: T) -> Self;\n \n@@ -436,7 +420,6 @@ pub trait FromStrRadix {\n     pub fn from_str_radix(str: &str, radix: uint) -> Option<Self>;\n }\n \n-///\n /// Calculates a power to a given radix, optimized for uint `pow` and `radix`.\n ///\n /// Returns `radix^pow` as `T`."}]}