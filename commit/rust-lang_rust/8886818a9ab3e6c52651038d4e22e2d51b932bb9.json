{"sha": "8886818a9ab3e6c52651038d4e22e2d51b932bb9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4ODY4MThhOWFiM2U2YzUyNjUxMDM4ZDRlMjJlMmQ1MWI5MzJiYjk=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-06-29T15:51:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-06-29T15:51:22Z"}, "message": "Rollup merge of #34495 - jseyfried:only_ident_macro_invocations, r=eddyb\n\nForbid type parameters and global paths in macro invocations\n\nFixes #28558.\nThis is a [breaking-change]. For example, the following would break:\n```rust\nmacro_rules! m { () => { () } }\nfn main() {\n    m::<T>!(); // Type parameters are no longer allowed in macro invocations\n    ::m!(); // Global paths are no longer allowed in macro invocations\n}\n```\nAny breakage can be fixed by removing the type parameters or the leading `::` (respectively).\n\nr? @eddyb", "tree": {"sha": "b7df117c5afe9c843b3492a3961e41b1b7b7a164", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7df117c5afe9c843b3492a3961e41b1b7b7a164"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8886818a9ab3e6c52651038d4e22e2d51b932bb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8886818a9ab3e6c52651038d4e22e2d51b932bb9", "html_url": "https://github.com/rust-lang/rust/commit/8886818a9ab3e6c52651038d4e22e2d51b932bb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8886818a9ab3e6c52651038d4e22e2d51b932bb9/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a0c2c3b3a0c7291f6160f9cf4178ecbdb920f04", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a0c2c3b3a0c7291f6160f9cf4178ecbdb920f04", "html_url": "https://github.com/rust-lang/rust/commit/2a0c2c3b3a0c7291f6160f9cf4178ecbdb920f04"}, {"sha": "b4611b1ff29d93ba9a03932b316935cbfd076ed9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4611b1ff29d93ba9a03932b316935cbfd076ed9", "html_url": "https://github.com/rust-lang/rust/commit/b4611b1ff29d93ba9a03932b316935cbfd076ed9"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "c670283e559d9b8c60451dc964c617302ccada20", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8886818a9ab3e6c52651038d4e22e2d51b932bb9/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8886818a9ab3e6c52651038d4e22e2d51b932bb9/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=8886818a9ab3e6c52651038d4e22e2d51b932bb9", "patch": "@@ -202,7 +202,7 @@ fn expand_mac_invoc<T>(mac: ast::Mac, ident: Option<Ident>, attrs: Vec<ast::Attr\n                                           &fld.cx.ecfg.features.unwrap());\n         }\n \n-        if path.segments.len() > 1 {\n+        if path.segments.len() > 1 || path.global || !path.segments[0].parameters.is_empty() {\n             fld.cx.span_err(path.span, \"expected macro name without module separators\");\n             return None;\n         }"}, {"sha": "408bb15ba28cdd165cbf9246f2bdf1f891760b4e", "filename": "src/test/compile-fail/macro-with-seps-err-msg.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8886818a9ab3e6c52651038d4e22e2d51b932bb9/src%2Ftest%2Fcompile-fail%2Fmacro-with-seps-err-msg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8886818a9ab3e6c52651038d4e22e2d51b932bb9/src%2Ftest%2Fcompile-fail%2Fmacro-with-seps-err-msg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-with-seps-err-msg.rs?ref=8886818a9ab3e6c52651038d4e22e2d51b932bb9", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:expected macro name without module separators\n-\n fn main() {\n-    globnar::brotz!();\n+    globnar::brotz!(); //~ ERROR expected macro name without module separators\n+    ::foo!(); //~ ERROR expected macro name without module separators\n+    foo::<T>!(); //~ ERROR expected macro name without module separators\n }"}]}