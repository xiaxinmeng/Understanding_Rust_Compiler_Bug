{"sha": "91ffbc43b18842594adb997c8eea8c51035bf0e1", "node_id": "C_kwDOAAsO6NoAKDkxZmZiYzQzYjE4ODQyNTk0YWRiOTk3YzhlZWE4YzUxMDM1YmYwZTE", "commit": {"author": {"name": "Jane Lusby", "email": "jlusby@yaah.dev", "date": "2022-01-28T20:53:36Z"}, "committer": {"name": "Jane Lusby", "email": "jlusby@yaah.dev", "date": "2022-01-28T20:53:36Z"}, "message": "Change Termination::report return type to ExitCode", "tree": {"sha": "b6016327779fc749c75f2af275531059a249b220", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6016327779fc749c75f2af275531059a249b220"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91ffbc43b18842594adb997c8eea8c51035bf0e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91ffbc43b18842594adb997c8eea8c51035bf0e1", "html_url": "https://github.com/rust-lang/rust/commit/91ffbc43b18842594adb997c8eea8c51035bf0e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91ffbc43b18842594adb997c8eea8c51035bf0e1/comments", "author": {"login": "yaahc", "id": 1993852, "node_id": "MDQ6VXNlcjE5OTM4NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1993852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaahc", "html_url": "https://github.com/yaahc", "followers_url": "https://api.github.com/users/yaahc/followers", "following_url": "https://api.github.com/users/yaahc/following{/other_user}", "gists_url": "https://api.github.com/users/yaahc/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaahc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaahc/subscriptions", "organizations_url": "https://api.github.com/users/yaahc/orgs", "repos_url": "https://api.github.com/users/yaahc/repos", "events_url": "https://api.github.com/users/yaahc/events{/privacy}", "received_events_url": "https://api.github.com/users/yaahc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yaahc", "id": 1993852, "node_id": "MDQ6VXNlcjE5OTM4NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1993852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaahc", "html_url": "https://github.com/yaahc", "followers_url": "https://api.github.com/users/yaahc/followers", "following_url": "https://api.github.com/users/yaahc/following{/other_user}", "gists_url": "https://api.github.com/users/yaahc/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaahc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaahc/subscriptions", "organizations_url": "https://api.github.com/users/yaahc/orgs", "repos_url": "https://api.github.com/users/yaahc/repos", "events_url": "https://api.github.com/users/yaahc/events{/privacy}", "received_events_url": "https://api.github.com/users/yaahc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "427eba2f0bacdeaebc992a78eb2889564de7d7cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/427eba2f0bacdeaebc992a78eb2889564de7d7cf", "html_url": "https://github.com/rust-lang/rust/commit/427eba2f0bacdeaebc992a78eb2889564de7d7cf"}], "stats": {"total": 35, "additions": 25, "deletions": 10}, "files": [{"sha": "2a66ae03fae3281403129042d9ef2c0083eb6ee6", "filename": "library/std/src/process.rs", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/91ffbc43b18842594adb997c8eea8c51035bf0e1/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91ffbc43b18842594adb997c8eea8c51035bf0e1/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=91ffbc43b18842594adb997c8eea8c51035bf0e1", "patch": "@@ -1676,6 +1676,20 @@ impl ExitCode {\n     pub const FAILURE: ExitCode = ExitCode(imp::ExitCode::FAILURE);\n }\n \n+impl ExitCode {\n+    // This should not be stabilized when stabilizing ExitCode, we don't know that i32 will serve\n+    // all usecases, for example windows seems to use u32, unix uses the 8-15th bits of an i32, we\n+    // likely want to isolate users anything that could restrict the platform specific\n+    // representation of an ExitCode\n+    //\n+    // More info: https://internals.rust-lang.org/t/mini-pre-rfc-redesigning-process-exitstatus/5426\n+    #[unstable(feature = \"process_exitcode_placeholder\", issue = \"48711\")]\n+    /// Convert an ExitCode into an i32\n+    pub fn to_i32(self) -> i32 {\n+        self.0.as_i32()\n+    }\n+}\n+\n impl Child {\n     /// Forces the child process to exit. If the child has already exited, an [`InvalidInput`]\n     /// error is returned.\n@@ -2016,20 +2030,20 @@ pub fn id() -> u32 {\n pub trait Termination {\n     /// Is called to get the representation of the value as status code.\n     /// This status code is returned to the operating system.\n-    fn report(self) -> i32;\n+    fn report(self) -> ExitCode;\n }\n \n #[unstable(feature = \"termination_trait_lib\", issue = \"43301\")]\n impl Termination for () {\n     #[inline]\n-    fn report(self) -> i32 {\n+    fn report(self) -> ExitCode {\n         ExitCode::SUCCESS.report()\n     }\n }\n \n #[unstable(feature = \"termination_trait_lib\", issue = \"43301\")]\n impl<E: fmt::Debug> Termination for Result<(), E> {\n-    fn report(self) -> i32 {\n+    fn report(self) -> ExitCode {\n         match self {\n             Ok(()) => ().report(),\n             Err(err) => Err::<!, _>(err).report(),\n@@ -2039,14 +2053,14 @@ impl<E: fmt::Debug> Termination for Result<(), E> {\n \n #[unstable(feature = \"termination_trait_lib\", issue = \"43301\")]\n impl Termination for ! {\n-    fn report(self) -> i32 {\n+    fn report(self) -> ExitCode {\n         self\n     }\n }\n \n #[unstable(feature = \"termination_trait_lib\", issue = \"43301\")]\n impl<E: fmt::Debug> Termination for Result<!, E> {\n-    fn report(self) -> i32 {\n+    fn report(self) -> ExitCode {\n         let Err(err) = self;\n         eprintln!(\"Error: {:?}\", err);\n         ExitCode::FAILURE.report()\n@@ -2055,7 +2069,7 @@ impl<E: fmt::Debug> Termination for Result<!, E> {\n \n #[unstable(feature = \"termination_trait_lib\", issue = \"43301\")]\n impl<E: fmt::Debug> Termination for Result<Infallible, E> {\n-    fn report(self) -> i32 {\n+    fn report(self) -> ExitCode {\n         let Err(err) = self;\n         Err::<!, _>(err).report()\n     }\n@@ -2064,7 +2078,7 @@ impl<E: fmt::Debug> Termination for Result<Infallible, E> {\n #[unstable(feature = \"termination_trait_lib\", issue = \"43301\")]\n impl Termination for ExitCode {\n     #[inline]\n-    fn report(self) -> i32 {\n-        self.0.as_i32()\n+    fn report(self) -> ExitCode {\n+        self\n     }\n }"}, {"sha": "663537a05fa32f91c78545f732ec5837c60daef1", "filename": "library/std/src/rt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91ffbc43b18842594adb997c8eea8c51035bf0e1/library%2Fstd%2Fsrc%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91ffbc43b18842594adb997c8eea8c51035bf0e1/library%2Fstd%2Fsrc%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Frt.rs?ref=91ffbc43b18842594adb997c8eea8c51035bf0e1", "patch": "@@ -142,7 +142,7 @@ fn lang_start<T: crate::process::Termination + 'static>(\n     argv: *const *const u8,\n ) -> isize {\n     let Ok(v) = lang_start_internal(\n-        &move || crate::sys_common::backtrace::__rust_begin_short_backtrace(main).report(),\n+        &move || crate::sys_common::backtrace::__rust_begin_short_backtrace(main).report().to_i32(),\n         argc,\n         argv,\n     );"}, {"sha": "8fc2b4ed748c28fe01b7f310f5b96cb9a1d3ef04", "filename": "library/test/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/91ffbc43b18842594adb997c8eea8c51035bf0e1/library%2Ftest%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91ffbc43b18842594adb997c8eea8c51035bf0e1/library%2Ftest%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Flib.rs?ref=91ffbc43b18842594adb997c8eea8c51035bf0e1", "patch": "@@ -20,6 +20,7 @@\n #![feature(internal_output_capture)]\n #![feature(staged_api)]\n #![feature(termination_trait_lib)]\n+#![feature(process_exitcode_placeholder)]\n #![feature(test)]\n #![feature(total_cmp)]\n \n@@ -182,7 +183,7 @@ fn make_owned_test(test: &&TestDescAndFn) -> TestDescAndFn {\n /// Tests is considered a failure. By default, invokes `report()`\n /// and checks for a `0` result.\n pub fn assert_test_result<T: Termination>(result: T) {\n-    let code = result.report();\n+    let code = result.report().to_i32();\n     assert_eq!(\n         code, 0,\n         \"the test returned a termination value with a non-zero status code ({}) \\"}]}