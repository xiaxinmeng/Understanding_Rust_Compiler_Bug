{"sha": "4eb6ccc9731095ed014bd5c047bcd7dd75bdf335", "node_id": "C_kwDOAAsO6NoAKDRlYjZjY2M5NzMxMDk1ZWQwMTRiZDVjMDQ3YmNkN2RkNzViZGYzMzU", "commit": {"author": {"name": "unexge", "email": "unexge@gmail.com", "date": "2023-02-18T19:09:31Z"}, "committer": {"name": "unexge", "email": "unexge@gmail.com", "date": "2023-03-08T08:51:26Z"}, "message": "Update lint description and add help section\n\nCo-authored-by: Weihang Lo <me@weihanglo.tw>", "tree": {"sha": "c6097b8f1360680e5d50bdeac9d8f827c45d6ed8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6097b8f1360680e5d50bdeac9d8f827c45d6ed8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4eb6ccc9731095ed014bd5c047bcd7dd75bdf335", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4eb6ccc9731095ed014bd5c047bcd7dd75bdf335", "html_url": "https://github.com/rust-lang/rust/commit/4eb6ccc9731095ed014bd5c047bcd7dd75bdf335", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4eb6ccc9731095ed014bd5c047bcd7dd75bdf335/comments", "author": {"login": "unexge", "id": 16212576, "node_id": "MDQ6VXNlcjE2MjEyNTc2", "avatar_url": "https://avatars.githubusercontent.com/u/16212576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unexge", "html_url": "https://github.com/unexge", "followers_url": "https://api.github.com/users/unexge/followers", "following_url": "https://api.github.com/users/unexge/following{/other_user}", "gists_url": "https://api.github.com/users/unexge/gists{/gist_id}", "starred_url": "https://api.github.com/users/unexge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unexge/subscriptions", "organizations_url": "https://api.github.com/users/unexge/orgs", "repos_url": "https://api.github.com/users/unexge/repos", "events_url": "https://api.github.com/users/unexge/events{/privacy}", "received_events_url": "https://api.github.com/users/unexge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "unexge", "id": 16212576, "node_id": "MDQ6VXNlcjE2MjEyNTc2", "avatar_url": "https://avatars.githubusercontent.com/u/16212576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unexge", "html_url": "https://github.com/unexge", "followers_url": "https://api.github.com/users/unexge/followers", "following_url": "https://api.github.com/users/unexge/following{/other_user}", "gists_url": "https://api.github.com/users/unexge/gists{/gist_id}", "starred_url": "https://api.github.com/users/unexge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unexge/subscriptions", "organizations_url": "https://api.github.com/users/unexge/orgs", "repos_url": "https://api.github.com/users/unexge/repos", "events_url": "https://api.github.com/users/unexge/events{/privacy}", "received_events_url": "https://api.github.com/users/unexge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "099d610640a5ab35a25218af6cedfc4ece765aa0", "url": "https://api.github.com/repos/rust-lang/rust/commits/099d610640a5ab35a25218af6cedfc4ece765aa0", "html_url": "https://github.com/rust-lang/rust/commit/099d610640a5ab35a25218af6cedfc4ece765aa0"}], "stats": {"total": 55, "additions": 46, "deletions": 9}, "files": [{"sha": "3b73332215e1e024bfc8a2b4f2e24a3031726edc", "filename": "clippy_lints/src/missing_assert_message.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4eb6ccc9731095ed014bd5c047bcd7dd75bdf335/clippy_lints%2Fsrc%2Fmissing_assert_message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eb6ccc9731095ed014bd5c047bcd7dd75bdf335/clippy_lints%2Fsrc%2Fmissing_assert_message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_assert_message.rs?ref=4eb6ccc9731095ed014bd5c047bcd7dd75bdf335", "patch": "@@ -1,4 +1,4 @@\n-use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::diagnostics::span_lint_and_help;\n use rustc_ast::ast;\n use rustc_ast::{\n     token::{Token, TokenKind},\n@@ -13,19 +13,23 @@ declare_clippy_lint! {\n     /// Checks assertions without a custom panic message.\n     ///\n     /// ### Why is this bad?\n-    /// If the assertion fails, the custom message may make it easier to understand what went wrong.\n+    /// Without a good custom message, it'd be hard to understand what went wrong when the assertion fails.\n+    /// A good custom message should be more about why the failure of the assertion is problematic\n+    /// and not what is failed because the assertion already conveys that.\n     ///\n     /// ### Example\n     /// ```rust\n-    /// let threshold = 50;\n-    /// let num = 42;\n-    /// assert!(num < threshold);\n+    /// # struct Service { ready: bool }\n+    /// fn call(service: Service) {\n+    ///     assert!(service.ready);\n+    /// }\n     /// ```\n     /// Use instead:\n     /// ```rust\n-    /// let threshold = 50;\n-    /// let num = 42;\n-    /// assert!(num < threshold, \"{num} is lower than threshold ({threshold})\");\n+    /// # struct Service { ready: bool }\n+    /// fn call(service: Service) {\n+    ///     assert!(service.ready, \"`service.poll_ready()` must be called first to ensure that service is ready to receive requests\");\n+    /// }\n     /// ```\n     #[clippy::version = \"1.69.0\"]\n     pub MISSING_ASSERT_MESSAGE,\n@@ -56,11 +60,13 @@ impl EarlyLintPass for MissingAssertMessage {\n         let num_separators = num_commas_on_arguments(mac_call);\n \n         if num_separators < num_separators_needed {\n-            span_lint(\n+            span_lint_and_help(\n                 cx,\n                 MISSING_ASSERT_MESSAGE,\n                 mac_call.span(),\n                 \"assert without any message\",\n+                None,\n+                \"consider describing why the failing assert is problematic\",\n             );\n         }\n     }"}, {"sha": "ecd03801277979bccefdc42cb46b5fe49d156f92", "filename": "tests/ui/missing_assert_message.stderr", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/4eb6ccc9731095ed014bd5c047bcd7dd75bdf335/tests%2Fui%2Fmissing_assert_message.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4eb6ccc9731095ed014bd5c047bcd7dd75bdf335/tests%2Fui%2Fmissing_assert_message.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_assert_message.stderr?ref=4eb6ccc9731095ed014bd5c047bcd7dd75bdf335", "patch": "@@ -4,97 +4,128 @@ error: assert without any message\n LL |     assert!(foo());\n    |     ^^^^^^^^^^^^^^\n    |\n+   = help: consider describing why the failing assert is problematic\n    = note: `-D clippy::missing-assert-message` implied by `-D warnings`\n \n error: assert without any message\n   --> $DIR/missing_assert_message.rs:15:5\n    |\n LL |     assert_eq!(foo(), foo());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider describing why the failing assert is problematic\n \n error: assert without any message\n   --> $DIR/missing_assert_message.rs:16:5\n    |\n LL |     assert_ne!(foo(), foo());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider describing why the failing assert is problematic\n \n error: assert without any message\n   --> $DIR/missing_assert_message.rs:17:5\n    |\n LL |     debug_assert!(foo());\n    |     ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider describing why the failing assert is problematic\n \n error: assert without any message\n   --> $DIR/missing_assert_message.rs:18:5\n    |\n LL |     debug_assert_eq!(foo(), foo());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider describing why the failing assert is problematic\n \n error: assert without any message\n   --> $DIR/missing_assert_message.rs:19:5\n    |\n LL |     debug_assert_ne!(foo(), foo());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider describing why the failing assert is problematic\n \n error: assert without any message\n   --> $DIR/missing_assert_message.rs:24:5\n    |\n LL |     assert!(bar!(true));\n    |     ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider describing why the failing assert is problematic\n \n error: assert without any message\n   --> $DIR/missing_assert_message.rs:25:5\n    |\n LL |     assert!(bar!(true, false));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider describing why the failing assert is problematic\n \n error: assert without any message\n   --> $DIR/missing_assert_message.rs:26:5\n    |\n LL |     assert_eq!(bar!(true), foo());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider describing why the failing assert is problematic\n \n error: assert without any message\n   --> $DIR/missing_assert_message.rs:27:5\n    |\n LL |     assert_ne!(bar!(true, true), bar!(true));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider describing why the failing assert is problematic\n \n error: assert without any message\n   --> $DIR/missing_assert_message.rs:32:5\n    |\n LL |     assert!(foo(),);\n    |     ^^^^^^^^^^^^^^^\n+   |\n+   = help: consider describing why the failing assert is problematic\n \n error: assert without any message\n   --> $DIR/missing_assert_message.rs:33:5\n    |\n LL |     assert_eq!(foo(), foo(),);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider describing why the failing assert is problematic\n \n error: assert without any message\n   --> $DIR/missing_assert_message.rs:34:5\n    |\n LL |     assert_ne!(foo(), foo(),);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider describing why the failing assert is problematic\n \n error: assert without any message\n   --> $DIR/missing_assert_message.rs:35:5\n    |\n LL |     debug_assert!(foo(),);\n    |     ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider describing why the failing assert is problematic\n \n error: assert without any message\n   --> $DIR/missing_assert_message.rs:36:5\n    |\n LL |     debug_assert_eq!(foo(), foo(),);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider describing why the failing assert is problematic\n \n error: assert without any message\n   --> $DIR/missing_assert_message.rs:37:5\n    |\n LL |     debug_assert_ne!(foo(), foo(),);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider describing why the failing assert is problematic\n \n error: aborting due to 16 previous errors\n "}]}