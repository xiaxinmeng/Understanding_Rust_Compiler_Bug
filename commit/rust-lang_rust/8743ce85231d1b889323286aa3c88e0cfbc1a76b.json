{"sha": "8743ce85231d1b889323286aa3c88e0cfbc1a76b", "node_id": "C_kwDOAAsO6NoAKDg3NDNjZTg1MjMxZDFiODg5MzIzMjg2YWEzYzg4ZTBjZmJjMWE3NmI", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-04-29T15:49:14Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-04-29T16:06:50Z"}, "message": "rustdoc: prevent B -> C -> B -> C loops from stack overflowing", "tree": {"sha": "9f97bc830d176c3c27006073ac6485021ed3ca8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f97bc830d176c3c27006073ac6485021ed3ca8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8743ce85231d1b889323286aa3c88e0cfbc1a76b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8743ce85231d1b889323286aa3c88e0cfbc1a76b", "html_url": "https://github.com/rust-lang/rust/commit/8743ce85231d1b889323286aa3c88e0cfbc1a76b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8743ce85231d1b889323286aa3c88e0cfbc1a76b/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "346065f621c861179a4f51d701c9c7c7a907346b", "url": "https://api.github.com/repos/rust-lang/rust/commits/346065f621c861179a4f51d701c9c7c7a907346b", "html_url": "https://github.com/rust-lang/rust/commit/346065f621c861179a4f51d701c9c7c7a907346b"}], "stats": {"total": 15, "additions": 12, "deletions": 3}, "files": [{"sha": "9644e3d15fdfadbf366e86f6b6a81a88c466d2c0", "filename": "src/librustdoc/passes/collect_trait_impls.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8743ce85231d1b889323286aa3c88e0cfbc1a76b/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8743ce85231d1b889323286aa3c88e0cfbc1a76b/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs?ref=8743ce85231d1b889323286aa3c88e0cfbc1a76b", "patch": "@@ -100,6 +100,7 @@ crate fn collect_trait_impls(mut krate: Crate, cx: &mut DocContext<'_>) -> Crate\n         cx: &DocContext<'_>,\n         map: &FxHashMap<DefId, &Type>,\n         cleaner: &mut BadImplStripper<'_>,\n+        targets: &mut FxHashSet<DefId>,\n         type_did: DefId,\n     ) {\n         if let Some(target) = map.get(&type_did) {\n@@ -108,12 +109,12 @@ crate fn collect_trait_impls(mut krate: Crate, cx: &mut DocContext<'_>) -> Crate\n                 cleaner.prims.insert(target_prim);\n             } else if let Some(target_did) = target.def_id(&cx.cache) {\n                 // `impl Deref<Target = S> for S`\n-                if target_did == type_did {\n+                if !targets.insert(target_did) {\n                     // Avoid infinite cycles\n                     return;\n                 }\n                 cleaner.items.insert(target_did.into());\n-                add_deref_target(cx, map, cleaner, target_did);\n+                add_deref_target(cx, map, cleaner, targets, target_did);\n             }\n         }\n     }\n@@ -143,7 +144,15 @@ crate fn collect_trait_impls(mut krate: Crate, cx: &mut DocContext<'_>) -> Crate\n                         // `Deref` target type and the impl for type positions, this map of types is keyed by\n                         // `DefId` and for convenience uses a special cleaner that accepts `DefId`s directly.\n                         if cleaner.keep_impl_with_def_id(for_did.into()) {\n-                            add_deref_target(cx, &type_did_to_deref_target, &mut cleaner, for_did);\n+                            let mut targets = FxHashSet::default();\n+                            targets.insert(for_did);\n+                            add_deref_target(\n+                                cx,\n+                                &type_did_to_deref_target,\n+                                &mut cleaner,\n+                                &mut targets,\n+                                for_did,\n+                            );\n                         }\n                     }\n                 }"}]}