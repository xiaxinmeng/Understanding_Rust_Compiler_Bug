{"sha": "8b9298bbaaa1e1803f1ca4040c3200ed3373a210", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiOTI5OGJiYWFhMWUxODAzZjFjYTQwNDBjMzIwMGVkMzM3M2EyMTA=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-04-28T00:11:58Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-05-11T16:55:32Z"}, "message": "Add note to docs when layout cannot be computed\n\nThis should prevent confusion about why generic types don't have layout\ndocs.", "tree": {"sha": "d407b490517325e2380d8f7d4030681a71a7a1eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d407b490517325e2380d8f7d4030681a71a7a1eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b9298bbaaa1e1803f1ca4040c3200ed3373a210", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b9298bbaaa1e1803f1ca4040c3200ed3373a210", "html_url": "https://github.com/rust-lang/rust/commit/8b9298bbaaa1e1803f1ca4040c3200ed3373a210", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b9298bbaaa1e1803f1ca4040c3200ed3373a210/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "879a914eea7d8d10bf865822e76a165938e41544", "url": "https://api.github.com/repos/rust-lang/rust/commits/879a914eea7d8d10bf865822e76a165938e41544", "html_url": "https://github.com/rust-lang/rust/commit/879a914eea7d8d10bf865822e76a165938e41544"}], "stats": {"total": 43, "additions": 35, "deletions": 8}, "files": [{"sha": "bde42371713caea221f7478f9fbf9a53b1ca4050", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 26, "deletions": 7, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/8b9298bbaaa1e1803f1ca4040c3200ed3373a210/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b9298bbaaa1e1803f1ca4040c3200ed3373a210/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=8b9298bbaaa1e1803f1ca4040c3200ed3373a210", "patch": "@@ -7,6 +7,7 @@ use rustc_hir as hir;\n use rustc_hir::def::CtorKind;\n use rustc_hir::def_id::DefId;\n use rustc_middle::middle::stability;\n+use rustc_middle::ty::layout::LayoutError;\n use rustc_middle::ty::TyCtxt;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{kw, sym, Symbol};\n@@ -1540,13 +1541,14 @@ fn document_type_layout(w: &mut Buffer, cx: &Context<'_>, ty_def_id: DefId) {\n         return;\n     }\n \n+    writeln!(w, \"<h2 class=\\\"small-section-header\\\">Layout</h2>\");\n+    writeln!(w, \"<div class=\\\"docblock\\\">\");\n+\n     let tcx = cx.tcx();\n     let param_env = tcx.param_env(ty_def_id);\n     let ty = tcx.type_of(ty_def_id);\n     match tcx.layout_of(param_env.and(ty)) {\n         Ok(ty_layout) => {\n-            writeln!(w, \"<h2 class=\\\"small-section-header\\\">Layout</h2>\");\n-            writeln!(w, \"<div class=\\\"docblock\\\">\");\n             writeln!(\n                 w,\n                 \"<div class=\\\"warning\\\"><p><strong>Note:</strong> Most layout information is \\\n@@ -1567,11 +1569,28 @@ fn document_type_layout(w: &mut Buffer, cx: &Context<'_>, ty_def_id: DefId) {\n                     pl = if bytes == 1 { \"\" } else { \"s\" },\n                 );\n             }\n-            writeln!(w, \"</div>\");\n         }\n-        // Layout errors can occur with valid code, e.g. if you try to get the layout\n-        // of a generic type such as `Vec<T>`. In case of a layout error, we just\n-        // don't show any layout information.\n-        Err(_) => {}\n+        // This kind of layout error can occur with valid code, e.g. if you try to\n+        // get the layout of a generic type such as `Vec<T>`.\n+        Err(LayoutError::Unknown(_)) => {\n+            writeln!(\n+                w,\n+                \"<p><strong>Note:</strong> Unable to compute type layout, \\\n+                 possibly due to this type having generic parameters. \\\n+                 Layout can only be computed for concrete, fully-instantiated types.</p>\"\n+            );\n+        }\n+        // This kind of error probably can't happen with valid code, but we don't\n+        // want to panic and prevent the docs from building, so we just let the\n+        // user know that we couldn't compute the layout.\n+        Err(LayoutError::SizeOverflow(_)) => {\n+            writeln!(\n+                w,\n+                \"<p><strong>Note:</strong> Encountered an error during type layout; \\\n+                 the type was too big.</p>\"\n+            );\n+        }\n     }\n+\n+    writeln!(w, \"</div>\");\n }"}, {"sha": "637e4aef3d61c1fe462c6169186a48ab056e6cbe", "filename": "src/test/rustdoc/type-layout.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8b9298bbaaa1e1803f1ca4040c3200ed3373a210/src%2Ftest%2Frustdoc%2Ftype-layout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b9298bbaaa1e1803f1ca4040c3200ed3373a210/src%2Ftest%2Frustdoc%2Ftype-layout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftype-layout.rs?ref=8b9298bbaaa1e1803f1ca4040c3200ed3373a210", "patch": "@@ -35,9 +35,17 @@ pub struct Y(u8);\n // @has - '0 bytes'\n pub struct Z;\n \n-// @!has type_layout/struct.Generic.html 'Size: '\n+// We can't compute layout for generic types.\n+// @has type_layout/struct.Generic.html 'Unable to compute type layout, possibly due to this type having generic parameters'\n+// @!has - 'Size: '\n pub struct Generic<T>(T);\n \n+// We *can*, however, compute layout for types that are only generic over lifetimes,\n+// because lifetimes are a type-system construct.\n+// @has type_layout/struct.GenericLifetimes.html 'Size: '\n+// @has - ' bytes'\n+pub struct GenericLifetimes<'a>(&'a str);\n+\n // @has type_layout/struct.Unsized.html 'Size: '\n // @has - '(unsized)'\n pub struct Unsized([u8]);"}]}