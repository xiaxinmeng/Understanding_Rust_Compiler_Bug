{"sha": "1683bb7771640ec534c97d99fdc853d3090a30bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2ODNiYjc3NzE2NDBlYzUzNGM5N2Q5OWZkYzg1M2QzMDkwYTMwYmY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-30T19:57:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-06-30T19:57:25Z"}, "message": "Rollup merge of #62224 - euclio:remove-derives, r=GuillaumeGomez\n\nrustdoc: remove unused derives and variants\n\nThough many structs in rustdoc derive `RustcEncodable` and `RustcDecodable`, the impls do not appear to be used by the crate or its dependents. Removing them revealed some enum variants that are never constructed, too.\n\nr? @GuillaumeGomez", "tree": {"sha": "8ba655af4a77d1404027b9340103818e1414142c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ba655af4a77d1404027b9340103818e1414142c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1683bb7771640ec534c97d99fdc853d3090a30bf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdGRQlCRBK7hj4Ov3rIwAAdHIIAFO/fygLUoSi9MgvGbMWeGic\nldpO7lg1xObvF8RdBYP+75RIK7q+9rQD8Zv5vu2OEC+L5dPEXMbuThryRJJP/LSa\nLyGQxQKjfg9JlVeLB4HwCEyDJb2mKVvUgPMOjKnuR83EXpVSBNIeJsYo7C8Ou+dt\nI/BQ1KdbuepzL6sZnTr+jWwP63n+j+HuTwRlkgvAEXmsE0CE8WBq0JBm6+dSE730\nyIZP12VP9F7AuU2JyQttOwJmqVM/GeftDXOGzXu2DWL60GMwcg2Vqj7+9IzWZr4J\nx6wcEEFgjL+wOsdXVJYrgg8CDdPzdNQv8vzL0ZrO9M8zCOtFDNWhn/RuIODfaas=\n=WBs0\n-----END PGP SIGNATURE-----\n", "payload": "tree 8ba655af4a77d1404027b9340103818e1414142c\nparent 70ea57bcb37bb57444fafbb80be8f6d1846090f3\nparent e991abd00455b20bb96076bbeec63e56764fc822\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1561924645 +0200\ncommitter GitHub <noreply@github.com> 1561924645 +0200\n\nRollup merge of #62224 - euclio:remove-derives, r=GuillaumeGomez\n\nrustdoc: remove unused derives and variants\n\nThough many structs in rustdoc derive `RustcEncodable` and `RustcDecodable`, the impls do not appear to be used by the crate or its dependents. Removing them revealed some enum variants that are never constructed, too.\n\nr? @GuillaumeGomez\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1683bb7771640ec534c97d99fdc853d3090a30bf", "html_url": "https://github.com/rust-lang/rust/commit/1683bb7771640ec534c97d99fdc853d3090a30bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1683bb7771640ec534c97d99fdc853d3090a30bf/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70ea57bcb37bb57444fafbb80be8f6d1846090f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/70ea57bcb37bb57444fafbb80be8f6d1846090f3", "html_url": "https://github.com/rust-lang/rust/commit/70ea57bcb37bb57444fafbb80be8f6d1846090f3"}, {"sha": "e991abd00455b20bb96076bbeec63e56764fc822", "url": "https://api.github.com/repos/rust-lang/rust/commits/e991abd00455b20bb96076bbeec63e56764fc822", "html_url": "https://github.com/rust-lang/rust/commit/e991abd00455b20bb96076bbeec63e56764fc822"}], "stats": {"total": 124, "additions": 56, "deletions": 68}, "files": [{"sha": "ad211763a6c46e4be4106948c0ad873f7aecf6fb", "filename": "src/librustdoc/clean/cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1683bb7771640ec534c97d99fdc853d3090a30bf/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1683bb7771640ec534c97d99fdc853d3090a30bf/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg.rs?ref=1683bb7771640ec534c97d99fdc853d3090a30bf", "patch": "@@ -16,7 +16,7 @@ use syntax_pos::Span;\n \n use crate::html::escape::Escape;\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug, PartialEq, Eq, Hash)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash)]\n pub enum Cfg {\n     /// Accepts all configurations.\n     True,"}, {"sha": "3fe048a6986bb2e0bb33d70e7888560ea2226ab8", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 54, "deletions": 57, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/1683bb7771640ec534c97d99fdc853d3090a30bf/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1683bb7771640ec534c97d99fdc853d3090a30bf/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=1683bb7771640ec534c97d99fdc853d3090a30bf", "patch": "@@ -223,7 +223,7 @@ impl<'a, 'tcx> Clean<Crate> for visit_ast::RustdocVisitor<'a, 'tcx> {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, Debug)]\n pub struct ExternalCrate {\n     pub name: String,\n     pub src: FileName,\n@@ -355,7 +355,7 @@ impl Clean<ExternalCrate> for CrateNum {\n /// Anything with a source location and set of attributes and, optionally, a\n /// name. That is, anything that can be documented. This doesn't correspond\n /// directly to the AST's concept of an item; it's a strict superset.\n-#[derive(Clone, RustcEncodable, RustcDecodable)]\n+#[derive(Clone)]\n pub struct Item {\n     /// Stringified span\n     pub source: Span,\n@@ -528,7 +528,7 @@ impl Item {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, Debug)]\n pub enum ItemEnum {\n     ExternCrateItem(String, Option<String>),\n     ImportItem(Import),\n@@ -594,7 +594,7 @@ impl ItemEnum {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, Debug)]\n pub struct Module {\n     pub items: Vec<Item>,\n     pub is_crate: bool,\n@@ -731,7 +731,7 @@ impl<I: IntoIterator<Item=ast::NestedMetaItem>> NestedAttributesExt for I {\n /// Included files are kept separate from inline doc comments so that proper line-number\n /// information can be given when a doctest fails. Sugared doc comments and \"raw\" doc comments are\n /// kept separate because of issue #42760.\n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Debug, Hash)]\n+#[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub enum DocFragment {\n     /// A doc fragment created from a `///` or `//!` doc comment.\n     SugaredDoc(usize, syntax_pos::Span, String),\n@@ -781,7 +781,7 @@ impl<'a> FromIterator<&'a DocFragment> for String {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug, Default)]\n+#[derive(Clone, Debug, Default)]\n pub struct Attributes {\n     pub doc_strings: Vec<DocFragment>,\n     pub other_attrs: Vec<ast::Attribute>,\n@@ -1048,7 +1048,7 @@ impl Clean<Attributes> for [ast::Attribute] {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Debug, Hash)]\n+#[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub enum GenericBound {\n     TraitBound(PolyTrait, hir::TraitBoundModifier),\n     Outlives(Lifetime),\n@@ -1231,7 +1231,7 @@ impl<'tcx> Clean<Option<Vec<GenericBound>>> for InternalSubsts<'tcx> {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Debug, Hash)]\n+#[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub struct Lifetime(String);\n \n impl Lifetime {\n@@ -1326,7 +1326,7 @@ impl Clean<Option<Lifetime>> for ty::RegionKind {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Debug, Hash)]\n+#[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub enum WherePredicate {\n     BoundPredicate { ty: Type, bounds: Vec<GenericBound> },\n     RegionPredicate { lifetime: Lifetime, bounds: Vec<GenericBound> },\n@@ -1464,7 +1464,7 @@ impl<'tcx> Clean<Type> for ty::ProjectionTy<'tcx> {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Debug, Hash)]\n+#[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub enum GenericParamDefKind {\n     Lifetime,\n     Type {\n@@ -1498,7 +1498,7 @@ impl GenericParamDefKind {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Debug, Hash)]\n+#[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub struct GenericParamDef {\n     pub name: String,\n \n@@ -1610,7 +1610,7 @@ impl Clean<GenericParamDef> for hir::GenericParam {\n }\n \n // maybe use a Generic enum and use Vec<Generic>?\n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Debug, Default, Hash)]\n+#[derive(Clone, PartialEq, Eq, Debug, Default, Hash)]\n pub struct Generics {\n     pub params: Vec<GenericParamDef>,\n     pub where_predicates: Vec<WherePredicate>,\n@@ -1874,7 +1874,7 @@ pub fn get_all_types(\n     (all_types.into_iter().collect(), ret_types)\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, Debug)]\n pub struct Method {\n     pub generics: Generics,\n     pub decl: FnDecl,\n@@ -1902,7 +1902,7 @@ impl<'a> Clean<Method> for (&'a hir::MethodSig, &'a hir::Generics, hir::BodyId,\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, Debug)]\n pub struct TyMethod {\n     pub header: hir::FnHeader,\n     pub decl: FnDecl,\n@@ -1911,7 +1911,7 @@ pub struct TyMethod {\n     pub ret_types: Vec<Type>,\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, Debug)]\n pub struct Function {\n     pub decl: FnDecl,\n     pub generics: Generics,\n@@ -1952,7 +1952,7 @@ impl Clean<Item> for doctree::Function<'_> {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Debug, Hash)]\n+#[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub struct FnDecl {\n     pub inputs: Arguments,\n     pub output: FunctionRetTy,\n@@ -1989,7 +1989,7 @@ impl FnDecl {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Debug, Hash)]\n+#[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub struct Arguments {\n     pub values: Vec<Argument>,\n }\n@@ -2063,13 +2063,13 @@ impl<'tcx> Clean<FnDecl> for (DefId, ty::PolyFnSig<'tcx>) {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Debug, Hash)]\n+#[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub struct Argument {\n     pub type_: Type,\n     pub name: String,\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Debug)]\n+#[derive(Clone, PartialEq, Debug)]\n pub enum SelfTy {\n     SelfValue,\n     SelfBorrowed(Option<Lifetime>, Mutability),\n@@ -2093,7 +2093,7 @@ impl Argument {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Debug, Hash)]\n+#[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub enum FunctionRetTy {\n     Return(Type),\n     DefaultReturn,\n@@ -2117,7 +2117,7 @@ impl GetDefId for FunctionRetTy {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, Debug)]\n pub struct Trait {\n     pub auto: bool,\n     pub unsafety: hir::Unsafety,\n@@ -2153,7 +2153,7 @@ impl Clean<Item> for doctree::Trait<'_> {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, Debug)]\n pub struct TraitAlias {\n     pub generics: Generics,\n     pub bounds: Vec<GenericBound>,\n@@ -2437,7 +2437,7 @@ impl Clean<Item> for ty::AssocItem {\n }\n \n /// A trait reference, which may have higher ranked lifetimes.\n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Debug, Hash)]\n+#[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub struct PolyTrait {\n     pub trait_: Type,\n     pub generic_params: Vec<GenericParamDef>,\n@@ -2446,7 +2446,7 @@ pub struct PolyTrait {\n /// A representation of a type suitable for hyperlinking purposes. Ideally, one can get the original\n /// type out of the AST/`TyCtxt` given one of these, if more information is needed. Most\n /// importantly, it does not preserve mutability or boxes.\n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Debug, Hash)]\n+#[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub enum Type {\n     /// Structs/enums/traits (most that would be an `hir::TyKind::Path`).\n     ResolvedPath {\n@@ -2469,7 +2469,6 @@ pub enum Type {\n     Array(Box<Type>, String),\n     Never,\n     CVarArgs,\n-    Unique(Box<Type>),\n     RawPointer(Mutability, Box<Type>),\n     BorrowedRef {\n         lifetime: Option<Lifetime>,\n@@ -2491,7 +2490,7 @@ pub enum Type {\n     ImplTrait(Vec<GenericBound>),\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Hash, Copy, Debug)]\n+#[derive(Clone, PartialEq, Eq, Hash, Copy, Debug)]\n pub enum PrimitiveType {\n     Isize, I8, I16, I32, I64, I128,\n     Usize, U8, U16, U32, U64, U128,\n@@ -2510,7 +2509,7 @@ pub enum PrimitiveType {\n     CVarArgs,\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Copy, Debug)]\n+#[derive(Clone, Copy, Debug)]\n pub enum TypeKind {\n     Enum,\n     Function,\n@@ -2520,7 +2519,6 @@ pub enum TypeKind {\n     Struct,\n     Union,\n     Trait,\n-    Variant,\n     Typedef,\n     Foreign,\n     Macro,\n@@ -3190,7 +3188,7 @@ impl Clean<Item> for ty::FieldDef {\n     }\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcDecodable, RustcEncodable, Debug)]\n+#[derive(Clone, PartialEq, Eq, Debug)]\n pub enum Visibility {\n     Public,\n     Inherited,\n@@ -3219,15 +3217,15 @@ impl Clean<Option<Visibility>> for ty::Visibility {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, Debug)]\n pub struct Struct {\n     pub struct_type: doctree::StructType,\n     pub generics: Generics,\n     pub fields: Vec<Item>,\n     pub fields_stripped: bool,\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, Debug)]\n pub struct Union {\n     pub struct_type: doctree::StructType,\n     pub generics: Generics,\n@@ -3278,7 +3276,7 @@ impl Clean<Item> for doctree::Union<'_> {\n /// This is a more limited form of the standard Struct, different in that\n /// it lacks the things most items have (name, id, parameterization). Found\n /// only as a variant in an enum.\n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, Debug)]\n pub struct VariantStruct {\n     pub struct_type: doctree::StructType,\n     pub fields: Vec<Item>,\n@@ -3295,7 +3293,7 @@ impl Clean<VariantStruct> for ::rustc::hir::VariantData {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, Debug)]\n pub struct Enum {\n     pub variants: IndexVec<VariantIdx, Item>,\n     pub generics: Generics,\n@@ -3321,7 +3319,7 @@ impl Clean<Item> for doctree::Enum<'_> {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, Debug)]\n pub struct Variant {\n     pub kind: VariantKind,\n }\n@@ -3384,7 +3382,7 @@ impl Clean<Item> for ty::VariantDef {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, Debug)]\n pub enum VariantKind {\n     CLike,\n     Tuple(Vec<Type>),\n@@ -3402,7 +3400,7 @@ impl Clean<VariantKind> for hir::VariantData {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, Debug)]\n pub struct Span {\n     pub filename: FileName,\n     pub loline: usize,\n@@ -3448,7 +3446,7 @@ impl Clean<Span> for syntax_pos::Span {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Debug, Hash)]\n+#[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub struct Path {\n     pub global: bool,\n     pub res: Res,\n@@ -3471,7 +3469,7 @@ impl Clean<Path> for hir::Path {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Debug, Hash)]\n+#[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub enum GenericArg {\n     Lifetime(Lifetime),\n     Type(Type),\n@@ -3488,7 +3486,7 @@ impl fmt::Display for GenericArg {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Debug, Hash)]\n+#[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub enum GenericArgs {\n     AngleBracketed {\n         args: Vec<GenericArg>,\n@@ -3528,7 +3526,7 @@ impl Clean<GenericArgs> for hir::GenericArgs {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Debug, Hash)]\n+#[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub struct PathSegment {\n     pub name: String,\n     pub args: GenericArgs,\n@@ -3553,7 +3551,6 @@ fn strip_type(ty: Type) -> Type {\n         }\n         Type::Slice(inner_ty) => Type::Slice(Box::new(strip_type(*inner_ty))),\n         Type::Array(inner_ty, s) => Type::Array(Box::new(strip_type(*inner_ty)), s),\n-        Type::Unique(inner_ty) => Type::Unique(Box::new(strip_type(*inner_ty))),\n         Type::RawPointer(m, inner_ty) => Type::RawPointer(m, Box::new(strip_type(*inner_ty))),\n         Type::BorrowedRef { lifetime, mutability, type_ } => {\n             Type::BorrowedRef { lifetime, mutability, type_: Box::new(strip_type(*type_)) }\n@@ -3625,7 +3622,7 @@ impl Clean<String> for InternedString {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, Debug)]\n pub struct Typedef {\n     pub type_: Type,\n     pub generics: Generics,\n@@ -3649,7 +3646,7 @@ impl Clean<Item> for doctree::Typedef<'_> {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, Debug)]\n pub struct Existential {\n     pub bounds: Vec<GenericBound>,\n     pub generics: Generics,\n@@ -3673,7 +3670,7 @@ impl Clean<Item> for doctree::Existential<'_> {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Debug, Hash)]\n+#[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub struct BareFunctionDecl {\n     pub unsafety: hir::Unsafety,\n     pub generic_params: Vec<GenericParamDef>,\n@@ -3695,7 +3692,7 @@ impl Clean<BareFunctionDecl> for hir::BareFnTy {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, Debug)]\n pub struct Static {\n     pub type_: Type,\n     pub mutability: Mutability,\n@@ -3725,7 +3722,7 @@ impl Clean<Item> for doctree::Static<'_> {\n     }\n }\n \n-#[derive(Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, PartialEq, Eq, Hash, Debug)]\n pub struct Constant {\n     pub type_: Type,\n     pub expr: String,\n@@ -3749,7 +3746,7 @@ impl Clean<Item> for doctree::Constant<'_> {\n     }\n }\n \n-#[derive(Debug, Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Copy, Hash)]\n+#[derive(Debug, Clone, PartialEq, Eq, Copy, Hash)]\n pub enum Mutability {\n     Mutable,\n     Immutable,\n@@ -3764,7 +3761,7 @@ impl Clean<Mutability> for hir::Mutability {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Copy, Debug, Hash)]\n+#[derive(Clone, PartialEq, Eq, Copy, Debug, Hash)]\n pub enum ImplPolarity {\n     Positive,\n     Negative,\n@@ -3779,7 +3776,7 @@ impl Clean<ImplPolarity> for hir::ImplPolarity {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, Debug)]\n pub struct Impl {\n     pub unsafety: hir::Unsafety,\n     pub generics: Generics,\n@@ -4003,15 +4000,15 @@ impl Clean<Vec<Item>> for doctree::Import<'_> {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, Debug)]\n pub enum Import {\n     // use source as str;\n     Simple(String, ImportSource),\n     // use source::*;\n     Glob(ImportSource)\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, Debug)]\n pub struct ImportSource {\n     pub path: Path,\n     pub did: Option<DefId>,\n@@ -4227,7 +4224,7 @@ fn resolve_use_source(cx: &DocContext<'_>, path: Path) -> ImportSource {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, Debug)]\n pub struct Macro {\n     pub source: String,\n     pub imported_from: Option<String>,\n@@ -4256,7 +4253,7 @@ impl Clean<Item> for doctree::Macro<'_> {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, Debug)]\n pub struct ProcMacro {\n     pub kind: MacroKind,\n     pub helpers: Vec<String>,\n@@ -4280,7 +4277,7 @@ impl Clean<Item> for doctree::ProcMacro<'_> {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, Debug)]\n pub struct Stability {\n     pub level: stability::StabilityLevel,\n     pub feature: Option<String>,\n@@ -4290,7 +4287,7 @@ pub struct Stability {\n     pub issue: Option<u32>,\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, Debug)]\n pub struct Deprecation {\n     pub since: Option<String>,\n     pub note: Option<String>,\n@@ -4340,13 +4337,13 @@ impl Clean<Deprecation> for attr::Deprecation {\n \n /// An type binding on an associated type (e.g., `A = Bar` in `Foo<A = Bar>` or\n /// `A: Send + Sync` in `Foo<A: Send + Sync>`).\n-#[derive(Clone, PartialEq, Eq, RustcDecodable, RustcEncodable, Debug, Hash)]\n+#[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub struct TypeBinding {\n     pub name: String,\n     pub kind: TypeBindingKind,\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcDecodable, RustcEncodable, Debug, Hash)]\n+#[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub enum TypeBindingKind {\n     Equality {\n         ty: Type,"}, {"sha": "2557b8d1627c0a4a8f37688713f135a1d374cbe7", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1683bb7771640ec534c97d99fdc853d3090a30bf/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1683bb7771640ec534c97d99fdc853d3090a30bf/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=1683bb7771640ec534c97d99fdc853d3090a30bf", "patch": "@@ -78,7 +78,7 @@ impl Module<'hir> {\n     }\n }\n \n-#[derive(Debug, Clone, RustcEncodable, RustcDecodable, Copy)]\n+#[derive(Debug, Clone, Copy)]\n pub enum StructType {\n     /// A braced struct\n     Plain,"}, {"sha": "9e5cc03b8312323f01505e4371c1e80b8a959474", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1683bb7771640ec534c97d99fdc853d3090a30bf/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1683bb7771640ec534c97d99fdc853d3090a30bf/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=1683bb7771640ec534c97d99fdc853d3090a30bf", "patch": "@@ -737,9 +737,6 @@ fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter<'_>, use_absolute: bool) ->\n                 }\n             }\n         }\n-        clean::Unique(..) => {\n-            panic!(\"should have been cleaned\")\n-        }\n     }\n }\n "}, {"sha": "5f1a1b31616c1f0869bac051fac1206247021e1c", "filename": "src/librustdoc/html/item_type.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1683bb7771640ec534c97d99fdc853d3090a30bf/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1683bb7771640ec534c97d99fdc853d3090a30bf/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs?ref=1683bb7771640ec534c97d99fdc853d3090a30bf", "patch": "@@ -110,7 +110,6 @@ impl From<clean::TypeKind> for ItemType {\n             clean::TypeKind::Module     => ItemType::Module,\n             clean::TypeKind::Static     => ItemType::Static,\n             clean::TypeKind::Const      => ItemType::Constant,\n-            clean::TypeKind::Variant    => ItemType::Variant,\n             clean::TypeKind::Typedef    => ItemType::Typedef,\n             clean::TypeKind::Foreign    => ItemType::ForeignType,\n             clean::TypeKind::Macro      => ItemType::Macro,"}, {"sha": "2080637ecb402dab68c79df8c821c83b45ee5bdc", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1683bb7771640ec534c97d99fdc853d3090a30bf/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1683bb7771640ec534c97d99fdc853d3090a30bf/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=1683bb7771640ec534c97d99fdc853d3090a30bf", "patch": "@@ -5188,9 +5188,6 @@ fn collect_paths_for_type(first_ty: clean::Type) -> Vec<String> {\n             clean::Type::Array(ty, _) => {\n                 work.push_back(*ty);\n             },\n-            clean::Type::Unique(ty) => {\n-                work.push_back(*ty);\n-            },\n             clean::Type::RawPointer(_, ty) => {\n                 work.push_back(*ty);\n             },"}, {"sha": "ba423300e027760f4e60f5c44495e70a2721cd8e", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1683bb7771640ec534c97d99fdc853d3090a30bf/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1683bb7771640ec534c97d99fdc853d3090a30bf/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=1683bb7771640ec534c97d99fdc853d3090a30bf", "patch": "@@ -42,8 +42,6 @@ extern crate test as testing;\n #[macro_use] extern crate log;\n extern crate rustc_errors as errors;\n \n-extern crate serialize as rustc_serialize; // used by deriving\n-\n use std::default::Default;\n use std::env;\n use std::panic;"}]}