{"sha": "75f07012111972dcf38900b2d4347646fb89b75b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1ZjA3MDEyMTExOTcyZGNmMzg5MDBiMmQ0MzQ3NjQ2ZmI4OWI3NWI=", "commit": {"author": {"name": "elkowar", "email": "5300871+elkowar@users.noreply.github.com", "date": "2021-08-21T09:00:43Z"}, "committer": {"name": "elkowar", "email": "5300871+elkowar@users.noreply.github.com", "date": "2021-08-21T09:00:43Z"}, "message": "Add heuristic to determine type of IdentPat, make check for empty expressions correct", "tree": {"sha": "c57ff202049afeea5471eb07b9d2d8db3926d9d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c57ff202049afeea5471eb07b9d2d8db3926d9d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75f07012111972dcf38900b2d4347646fb89b75b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCAAdFiEEtViXQSiCDLRzvZgH4yGtcbHR8n8FAmEgwLsACgkQ4yGtcbHR\n8n/55QwAgY/E1DGyBkU8DqvW1L2rGWl0Yb26Thvm/DagNCNPOzV2HhkZfXpXtP3f\nnu3aMykFheHZ53IvSKW+XufNyJc4UZmr6lkpZSItxiCx/5Nfz1MYXudb7pXLqnmW\npDCUVqqdP8dV9FRAycp9mFmkFNLZytl3+BbIeTQWOH2q/zHEv2hlF5ay0y9bFo2I\nBnOck0fInfhXl7gn+3sBzWWrSCoiVXdgLc681RiqcaJ9cHlRKFYTu4X71+Vv3YcV\nOYB779P2cX7tNBrrshTbpwPu7S0w/S+36a3Ibth/NL83NHunSS09xyCW5/l7U+5M\nMpEHXYlubZRJW6FsbeNWb0nqjmSf7H+5xzJRpkOEWpQFZsRtP9qiE/ibR21wy/Bi\nPxzABzwrf/BrvjoT5aqP4H4pErArJUstT7II6QobLIFrQ09knpXq6pozkBJwboII\nLlzBxPbI/atFdxOeAobUf6ZEhy+CQMHzfgrbVx91uyp+vBEeHbCSn1J3vnEk/kR4\n4QQmpM4+\n=YasF\n-----END PGP SIGNATURE-----", "payload": "tree c57ff202049afeea5471eb07b9d2d8db3926d9d7\nparent d6695286ee50c37c84294d97c71d3f0799f98a95\nauthor elkowar <5300871+elkowar@users.noreply.github.com> 1629536443 +0200\ncommitter elkowar <5300871+elkowar@users.noreply.github.com> 1629536443 +0200\n\nAdd heuristic to determine type of IdentPat, make check for empty expressions correct\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75f07012111972dcf38900b2d4347646fb89b75b", "html_url": "https://github.com/rust-lang/rust/commit/75f07012111972dcf38900b2d4347646fb89b75b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75f07012111972dcf38900b2d4347646fb89b75b/comments", "author": {"login": "elkowar", "id": 5300871, "node_id": "MDQ6VXNlcjUzMDA4NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/5300871?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elkowar", "html_url": "https://github.com/elkowar", "followers_url": "https://api.github.com/users/elkowar/followers", "following_url": "https://api.github.com/users/elkowar/following{/other_user}", "gists_url": "https://api.github.com/users/elkowar/gists{/gist_id}", "starred_url": "https://api.github.com/users/elkowar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elkowar/subscriptions", "organizations_url": "https://api.github.com/users/elkowar/orgs", "repos_url": "https://api.github.com/users/elkowar/repos", "events_url": "https://api.github.com/users/elkowar/events{/privacy}", "received_events_url": "https://api.github.com/users/elkowar/received_events", "type": "User", "site_admin": false}, "committer": {"login": "elkowar", "id": 5300871, "node_id": "MDQ6VXNlcjUzMDA4NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/5300871?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elkowar", "html_url": "https://github.com/elkowar", "followers_url": "https://api.github.com/users/elkowar/followers", "following_url": "https://api.github.com/users/elkowar/following{/other_user}", "gists_url": "https://api.github.com/users/elkowar/gists{/gist_id}", "starred_url": "https://api.github.com/users/elkowar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elkowar/subscriptions", "organizations_url": "https://api.github.com/users/elkowar/orgs", "repos_url": "https://api.github.com/users/elkowar/repos", "events_url": "https://api.github.com/users/elkowar/events{/privacy}", "received_events_url": "https://api.github.com/users/elkowar/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6695286ee50c37c84294d97c71d3f0799f98a95", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6695286ee50c37c84294d97c71d3f0799f98a95", "html_url": "https://github.com/rust-lang/rust/commit/d6695286ee50c37c84294d97c71d3f0799f98a95"}], "stats": {"total": 42, "additions": 38, "deletions": 4}, "files": [{"sha": "025add6bc88a9f71afae4a0554a9a19e324c6557", "filename": "crates/ide_assists/src/handlers/replace_if_let_with_match.rs", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/75f07012111972dcf38900b2d4347646fb89b75b/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75f07012111972dcf38900b2d4347646fb89b75b/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs?ref=75f07012111972dcf38900b2d4347646fb89b75b", "patch": "@@ -235,24 +235,36 @@ fn pick_pattern_and_expr_order(\n ) -> Option<(ast::Pat, ast::Expr, ast::Expr)> {\n     let res = match (pat, pat2) {\n         (ast::Pat::WildcardPat(_), _) => return None,\n-        (pat, _) if expr2.syntax().first_child().is_none() => (pat, expr, expr2),\n-        (_, pat) if expr.syntax().first_child().is_none() => (pat, expr2, expr),\n+        (pat, _) if is_empty_expr(&expr2) => (pat, expr, expr2),\n+        (_, pat) if is_empty_expr(&expr) => (pat, expr2, expr),\n         (pat, pat2) => match (binds_name(&pat), binds_name(&pat2)) {\n+            (true, true) => return None,\n             (true, false) => (pat, expr, expr2),\n             (false, true) => (pat2, expr2, expr),\n             _ if is_sad_pat(sema, &pat2) => (pat, expr, expr2),\n             _ if is_sad_pat(sema, &pat) => (pat2, expr2, expr),\n-            (true, true) => return None,\n             (false, false) => (pat, expr, expr2),\n         },\n     };\n     Some(res)\n }\n \n+fn is_empty_expr(expr: &ast::Expr) -> bool {\n+    match expr {\n+        ast::Expr::BlockExpr(expr) => {\n+            expr.statements().next().is_none() && expr.tail_expr().is_none()\n+        }\n+        ast::Expr::TupleExpr(expr) => expr.fields().next().is_none(),\n+        _ => false,\n+    }\n+}\n+\n fn binds_name(pat: &ast::Pat) -> bool {\n     let binds_name_v = |pat| binds_name(&pat);\n     match pat {\n-        ast::Pat::IdentPat(_) => true,\n+        ast::Pat::IdentPat(pat) => {\n+            pat.to_string().starts_with(|c: char| c.is_lowercase() && c != '_')\n+        }\n         ast::Pat::MacroPat(_) => true,\n         ast::Pat::OrPat(pat) => pat.pats().any(binds_name_v),\n         ast::Pat::SlicePat(pat) => pat.pats().any(binds_name_v),\n@@ -704,6 +716,28 @@ fn main() {\n         )\n     }\n \n+    #[test]\n+    fn replace_match_with_if_let_number_body() {\n+        check_assist(\n+            replace_match_with_if_let,\n+            r#\"\n+fn main() {\n+    $0match Ok(()) {\n+        Ok(()) => {},\n+        Err(_) => 0,\n+    }\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    if let Err(_) = Ok(()) {\n+        0\n+    }\n+}\n+\"#,\n+        )\n+    }\n+\n     #[test]\n     fn replace_match_with_if_let_exhaustive() {\n         check_assist("}]}