{"sha": "ee1caae33c9082c44387b2dc9b939db9f764a8f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlMWNhYWUzM2M5MDgyYzQ0Mzg3YjJkYzliOTM5ZGI5Zjc2NGE4ZjM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-03-28T10:50:20Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-03-28T10:54:19Z"}, "message": "unaligned_references: align(N) fields in packed(N) structs are fine", "tree": {"sha": "6de2d41a7aa19716f2af38e27b773784fbc29669", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6de2d41a7aa19716f2af38e27b773784fbc29669"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee1caae33c9082c44387b2dc9b939db9f764a8f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee1caae33c9082c44387b2dc9b939db9f764a8f3", "html_url": "https://github.com/rust-lang/rust/commit/ee1caae33c9082c44387b2dc9b939db9f764a8f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee1caae33c9082c44387b2dc9b939db9f764a8f3/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5208f63ba8ec70a2a7a074d7ecd59a94693286fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/5208f63ba8ec70a2a7a074d7ecd59a94693286fc", "html_url": "https://github.com/rust-lang/rust/commit/5208f63ba8ec70a2a7a074d7ecd59a94693286fc"}], "stats": {"total": 74, "additions": 56, "deletions": 18}, "files": [{"sha": "5d4ca871faa2e46d3e0d189649afee1fdf465fb1", "filename": "compiler/rustc_mir/src/util/alignment.rs", "status": "modified", "additions": 24, "deletions": 11, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ee1caae33c9082c44387b2dc9b939db9f764a8f3/compiler%2Frustc_mir%2Fsrc%2Futil%2Falignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee1caae33c9082c44387b2dc9b939db9f764a8f3/compiler%2Frustc_mir%2Fsrc%2Futil%2Falignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Falignment.rs?ref=ee1caae33c9082c44387b2dc9b939db9f764a8f3", "patch": "@@ -1,5 +1,6 @@\n use rustc_middle::mir::*;\n use rustc_middle::ty::{self, TyCtxt};\n+use rustc_target::abi::Align;\n \n /// Returns `true` if this place is allowed to be less aligned\n /// than its containing struct (because it is within a packed\n@@ -14,17 +15,25 @@ where\n     L: HasLocalDecls<'tcx>,\n {\n     debug!(\"is_disaligned({:?})\", place);\n-    if !is_within_packed(tcx, local_decls, place) {\n-        debug!(\"is_disaligned({:?}) - not within packed\", place);\n-        return false;\n-    }\n+    let pack = match is_within_packed(tcx, local_decls, place) {\n+        None => {\n+            debug!(\"is_disaligned({:?}) - not within packed\", place);\n+            return false;\n+        }\n+        Some(pack) => pack,\n+    };\n \n     let ty = place.ty(local_decls, tcx).ty;\n     match tcx.layout_raw(param_env.and(ty)) {\n-        Ok(layout) if layout.align.abi.bytes() == 1 => {\n-            // if the alignment is 1, the type can't be further\n-            // disaligned.\n-            debug!(\"is_disaligned({:?}) - align = 1\", place);\n+        Ok(layout) if layout.align.abi <= pack => {\n+            // If the packed alignment is greater or equal to the field alignment, the type won't be\n+            // further disaligned.\n+            debug!(\n+                \"is_disaligned({:?}) - align = {}, packed = {}; not disaligned\",\n+                place,\n+                layout.align.abi.bytes(),\n+                pack.bytes()\n+            );\n             false\n         }\n         _ => {\n@@ -34,7 +43,11 @@ where\n     }\n }\n \n-fn is_within_packed<'tcx, L>(tcx: TyCtxt<'tcx>, local_decls: &L, place: Place<'tcx>) -> bool\n+fn is_within_packed<'tcx, L>(\n+    tcx: TyCtxt<'tcx>,\n+    local_decls: &L,\n+    place: Place<'tcx>,\n+) -> Option<Align>\n where\n     L: HasLocalDecls<'tcx>,\n {\n@@ -45,13 +58,13 @@ where\n             ProjectionElem::Field(..) => {\n                 let ty = place_base.ty(local_decls, tcx).ty;\n                 match ty.kind() {\n-                    ty::Adt(def, _) if def.repr.packed() => return true,\n+                    ty::Adt(def, _) => return def.repr.pack,\n                     _ => {}\n                 }\n             }\n             _ => {}\n         }\n     }\n \n-    false\n+    None\n }"}, {"sha": "d06b06b504f0652e2286c002f11dae966cf6281c", "filename": "src/test/ui/lint/unaligned_references.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ee1caae33c9082c44387b2dc9b939db9f764a8f3/src%2Ftest%2Fui%2Flint%2Funaligned_references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee1caae33c9082c44387b2dc9b939db9f764a8f3/src%2Ftest%2Fui%2Flint%2Funaligned_references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funaligned_references.rs?ref=ee1caae33c9082c44387b2dc9b939db9f764a8f3", "patch": "@@ -8,6 +8,13 @@ pub struct Good {\n     aligned: [u8; 32],\n }\n \n+#[repr(packed(2))]\n+pub struct Packed2 {\n+    x: u32,\n+    y: u16,\n+    z: u8,\n+}\n+\n fn main() {\n     unsafe {\n         let good = Good { data: 0, ptr: &0, data2: [0, 0], aligned: [0; 32] };\n@@ -32,4 +39,12 @@ fn main() {\n         let _ = &good.aligned; // ok, has align 1\n         let _ = &good.aligned[2]; // ok, has align 1\n     }\n+\n+    unsafe {\n+        let packed2 = Packed2 { x: 0, y: 0, z: 0 };\n+        let _ = &packed2.x; //~ ERROR reference to packed field\n+        //~^ previously accepted\n+        let _ = &packed2.y; // ok, has align 2 in packed(2) struct\n+        let _ = &packed2.z; // ok, has align 1\n+    }\n }"}, {"sha": "b4cce3cfea2179a8f69c51497fd136ca45079ec1", "filename": "src/test/ui/lint/unaligned_references.stderr", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ee1caae33c9082c44387b2dc9b939db9f764a8f3/src%2Ftest%2Fui%2Flint%2Funaligned_references.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ee1caae33c9082c44387b2dc9b939db9f764a8f3/src%2Ftest%2Fui%2Flint%2Funaligned_references.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funaligned_references.stderr?ref=ee1caae33c9082c44387b2dc9b939db9f764a8f3", "patch": "@@ -1,5 +1,5 @@\n error: reference to packed field is unaligned\n-  --> $DIR/unaligned_references.rs:15:17\n+  --> $DIR/unaligned_references.rs:22:17\n    |\n LL |         let _ = &good.ptr;\n    |                 ^^^^^^^^^\n@@ -14,7 +14,7 @@ LL | #![deny(unaligned_references)]\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n \n error: reference to packed field is unaligned\n-  --> $DIR/unaligned_references.rs:17:17\n+  --> $DIR/unaligned_references.rs:24:17\n    |\n LL |         let _ = &good.data;\n    |                 ^^^^^^^^^^\n@@ -24,7 +24,7 @@ LL |         let _ = &good.data;\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n \n error: reference to packed field is unaligned\n-  --> $DIR/unaligned_references.rs:20:17\n+  --> $DIR/unaligned_references.rs:27:17\n    |\n LL |         let _ = &good.data as *const _;\n    |                 ^^^^^^^^^^\n@@ -34,7 +34,7 @@ LL |         let _ = &good.data as *const _;\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n \n error: reference to packed field is unaligned\n-  --> $DIR/unaligned_references.rs:22:27\n+  --> $DIR/unaligned_references.rs:29:27\n    |\n LL |         let _: *const _ = &good.data;\n    |                           ^^^^^^^^^^\n@@ -44,7 +44,7 @@ LL |         let _: *const _ = &good.data;\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n \n error: reference to packed field is unaligned\n-  --> $DIR/unaligned_references.rs:25:17\n+  --> $DIR/unaligned_references.rs:32:17\n    |\n LL |         let _ = good.data.clone();\n    |                 ^^^^^^^^^\n@@ -54,7 +54,7 @@ LL |         let _ = good.data.clone();\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n \n error: reference to packed field is unaligned\n-  --> $DIR/unaligned_references.rs:28:17\n+  --> $DIR/unaligned_references.rs:35:17\n    |\n LL |         let _ = &good.data2[0];\n    |                 ^^^^^^^^^^^^^^\n@@ -63,5 +63,15 @@ LL |         let _ = &good.data2[0];\n    = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n \n-error: aborting due to 6 previous errors\n+error: reference to packed field is unaligned\n+  --> $DIR/unaligned_references.rs:45:17\n+   |\n+LL |         let _ = &packed2.x;\n+   |                 ^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n+   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+\n+error: aborting due to 7 previous errors\n "}]}