{"sha": "9d09331e00b02f81c714b0c41ce3a38380dd36a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkMDkzMzFlMDBiMDJmODFjNzE0YjBjNDFjZTNhMzgzODBkZDM2YTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-12T08:57:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-12T08:57:10Z"}, "message": "Auto merge of #74245 - Manishearth:rollup-r0xq9dn, r=Manishearth\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #72920 (Stabilize `transmute` in constants and statics but not const fn)\n - #73715 (debuginfo:  Mangle tuples to be natvis friendly, typedef basic types)\n - #74066 (Optimize is_ascii for str and [u8].)\n - #74116 (Fix cross compilation of LLVM to aarch64 Windows targets)\n - #74167 (linker: illumos ld does not support --eh-frame-hdr)\n - #74168 (Add a help to use `in_band_lifetimes` in nightly)\n - #74197 (Reword incorrect `self` token suggestion)\n - #74213 (Minor refactor for rustc_resolve diagnostics match)\n - #74240 (Fix #74081 and add the test case from #74236)\n - #74241 (update miri)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "248198edb7d5af5e8683793e1dc4ee944ba771fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/248198edb7d5af5e8683793e1dc4ee944ba771fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d09331e00b02f81c714b0c41ce3a38380dd36a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d09331e00b02f81c714b0c41ce3a38380dd36a2", "html_url": "https://github.com/rust-lang/rust/commit/9d09331e00b02f81c714b0c41ce3a38380dd36a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d09331e00b02f81c714b0c41ce3a38380dd36a2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "346aec9b02f3c74f3fce97fd6bda24709d220e49", "url": "https://api.github.com/repos/rust-lang/rust/commits/346aec9b02f3c74f3fce97fd6bda24709d220e49", "html_url": "https://github.com/rust-lang/rust/commit/346aec9b02f3c74f3fce97fd6bda24709d220e49"}, {"sha": "c8c4fd7cb17216c4771c03e521dfea073c16df8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8c4fd7cb17216c4771c03e521dfea073c16df8a", "html_url": "https://github.com/rust-lang/rust/commit/c8c4fd7cb17216c4771c03e521dfea073c16df8a"}], "stats": {"total": 1088, "additions": 955, "deletions": 133}, "files": [{"sha": "905f523aa53d666f67571b835d419e68ba8991bb", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/9d09331e00b02f81c714b0c41ce3a38380dd36a2/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -404,9 +404,9 @@ version = \"0.1.0\"\n \n [[package]]\n name = \"cc\"\n-version = \"1.0.54\"\n+version = \"1.0.57\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7bbb73db36c1246e9034e307d0fba23f9a2e251faa47ade70c1bd252220c8311\"\n+checksum = \"0fde55d2a2bfaa4c9668bbc63f531fbdeee3ffe188f4662511ce2c22b3eedebe\"\n dependencies = [\n  \"jobserver\",\n ]"}, {"sha": "e8ec575ea37466379f6ab1e75ccc3134f5c22ddd", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -9,6 +9,7 @@\n //! ensure that they're always in place if needed.\n \n use std::env;\n+use std::env::consts::EXE_EXTENSION;\n use std::ffi::OsString;\n use std::fs::{self, File};\n use std::io;\n@@ -252,8 +253,14 @@ impl Step for Llvm {\n             // FIXME: if the llvm root for the build triple is overridden then we\n             //        should use llvm-tblgen from there, also should verify that it\n             //        actually exists most of the time in normal installs of LLVM.\n-            let host = builder.llvm_out(builder.config.build).join(\"bin/llvm-tblgen\");\n-            cfg.define(\"CMAKE_CROSSCOMPILING\", \"True\").define(\"LLVM_TABLEGEN\", &host);\n+            let host_bin = builder.llvm_out(builder.config.build).join(\"bin\");\n+            cfg.define(\"CMAKE_CROSSCOMPILING\", \"True\");\n+            cfg.define(\"LLVM_TABLEGEN\", host_bin.join(\"llvm-tblgen\").with_extension(EXE_EXTENSION));\n+            cfg.define(\"LLVM_NM\", host_bin.join(\"llvm-nm\").with_extension(EXE_EXTENSION));\n+            cfg.define(\n+                \"LLVM_CONFIG_PATH\",\n+                host_bin.join(\"llvm-config\").with_extension(EXE_EXTENSION),\n+            );\n \n             if target.contains(\"netbsd\") {\n                 cfg.define(\"CMAKE_SYSTEM_NAME\", \"NetBSD\");\n@@ -262,8 +269,6 @@ impl Step for Llvm {\n             } else if target.contains(\"windows\") {\n                 cfg.define(\"CMAKE_SYSTEM_NAME\", \"Windows\");\n             }\n-\n-            cfg.define(\"LLVM_NATIVE_BUILD\", builder.llvm_out(builder.config.build).join(\"build\"));\n         }\n \n         if let Some(ref suffix) = builder.config.llvm_version_suffix {\n@@ -431,6 +436,9 @@ fn configure_cmake(\n             cflags.push_str(\" -miphoneos-version-min=10.0\");\n         }\n     }\n+    if builder.config.llvm_clang_cl.is_some() {\n+        cflags.push_str(&format!(\" --target={}\", target))\n+    }\n     cfg.define(\"CMAKE_C_FLAGS\", cflags);\n     let mut cxxflags = builder.cflags(target, GitRepo::Llvm).join(\" \");\n     if builder.config.llvm_static_stdcpp && !target.contains(\"msvc\") && !target.contains(\"netbsd\") {\n@@ -439,6 +447,9 @@ fn configure_cmake(\n     if let Some(ref s) = builder.config.llvm_cxxflags {\n         cxxflags.push_str(&format!(\" {}\", s));\n     }\n+    if builder.config.llvm_clang_cl.is_some() {\n+        cxxflags.push_str(&format!(\" --target={}\", target))\n+    }\n     cfg.define(\"CMAKE_CXX_FLAGS\", cxxflags);\n     if let Some(ar) = builder.ar(target) {\n         if ar.is_absolute() {\n@@ -484,7 +495,7 @@ impl Step for Lld {\n         run.builder.ensure(Lld { target: run.target });\n     }\n \n-    /// Compile LLVM for `target`.\n+    /// Compile LLD for `target`.\n     fn run(self, builder: &Builder<'_>) -> PathBuf {\n         if builder.config.dry_run {\n             return PathBuf::from(\"lld-out-dir-test-gen\");\n@@ -521,6 +532,7 @@ impl Step for Lld {\n         // can't build on a system where your paths require `\\` on Windows, but\n         // there's probably a lot of reasons you can't do that other than this.\n         let llvm_config_shim = env::current_exe().unwrap().with_file_name(\"llvm-config-wrapper\");\n+\n         cfg.out_dir(&out_dir)\n             .profile(\"Release\")\n             .env(\"LLVM_CONFIG_REAL\", &llvm_config)\n@@ -543,7 +555,10 @@ impl Step for Lld {\n         if target != builder.config.build {\n             cfg.env(\"LLVM_CONFIG_SHIM_REPLACE\", &builder.config.build)\n                 .env(\"LLVM_CONFIG_SHIM_REPLACE_WITH\", &target)\n-                .define(\"LLVM_TABLEGEN_EXE\", llvm_config.with_file_name(\"llvm-tblgen\"));\n+                .define(\n+                    \"LLVM_TABLEGEN_EXE\",\n+                    llvm_config.with_file_name(\"llvm-tblgen\").with_extension(EXE_EXTENSION),\n+                );\n         }\n \n         // Explicitly set C++ standard, because upstream doesn't do so\n@@ -595,8 +610,8 @@ impl Step for TestHelpers {\n         }\n \n         // We may have found various cross-compilers a little differently due to our\n-        // extra configuration, so inform gcc of these compilers. Note, though, that\n-        // on MSVC we still need gcc's detection of env vars (ugh).\n+        // extra configuration, so inform cc of these compilers. Note, though, that\n+        // on MSVC we still need cc's detection of env vars (ugh).\n         if !target.contains(\"msvc\") {\n             if let Some(ar) = builder.ar(target) {\n                 cfg.archiver(ar);"}, {"sha": "874550da8b0c97b196d1371af91879ca54c39b74", "filename": "src/etc/natvis/intrinsic.natvis", "status": "modified", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Fetc%2Fnatvis%2Fintrinsic.natvis", "raw_url": "https://github.com/rust-lang/rust/raw/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Fetc%2Fnatvis%2Fintrinsic.natvis", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fnatvis%2Fintrinsic.natvis?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -21,4 +21,128 @@\n       </ArrayItems>\n     </Expand>\n   </Type>\n+  <Type Name=\"tuple&lt;&gt;\">\n+    <DisplayString>()</DisplayString>\n+  </Type>\n+  <Type Name=\"tuple&lt;*&gt;\">\n+    <DisplayString>({__0})</DisplayString>\n+    <Expand>\n+      <Item Name=\"[0]\">__0</Item>\n+    </Expand>\n+  </Type>\n+  <Type Name=\"tuple&lt;*,*&gt;\">\n+    <DisplayString>({__0}, {__1})</DisplayString>\n+    <Expand>\n+      <Item Name=\"[0]\">__0</Item>\n+      <Item Name=\"[1]\">__1</Item>\n+    </Expand>\n+  </Type>\n+  <Type Name=\"tuple&lt;*,*,*&gt;\">\n+    <DisplayString>({__0}, {__1}, {__2})</DisplayString>\n+    <Expand>\n+      <Item Name=\"[0]\">__0</Item>\n+      <Item Name=\"[1]\">__1</Item>\n+      <Item Name=\"[2]\">__2</Item>\n+    </Expand>\n+  </Type>\n+  <Type Name=\"tuple&lt;*,*,*,*&gt;\">\n+    <DisplayString>({__0}, {__1}, {__2}, {__3})</DisplayString>\n+    <Expand>\n+      <Item Name=\"[0]\">__0</Item>\n+      <Item Name=\"[1]\">__1</Item>\n+      <Item Name=\"[2]\">__2</Item>\n+      <Item Name=\"[3]\">__3</Item>\n+    </Expand>\n+  </Type>\n+  <Type Name=\"tuple&lt;*,*,*,*,*&gt;\">\n+    <DisplayString>({__0}, {__1}, {__2}, {__3}, {__4})</DisplayString>\n+    <Expand>\n+      <Item Name=\"[0]\">__0</Item>\n+      <Item Name=\"[1]\">__1</Item>\n+      <Item Name=\"[2]\">__2</Item>\n+      <Item Name=\"[3]\">__3</Item>\n+      <Item Name=\"[4]\">__4</Item>\n+    </Expand>\n+  </Type>\n+  <Type Name=\"tuple&lt;*,*,*,*,*,*&gt;\">\n+    <DisplayString>({__0}, {__1}, {__2}, {__3}, {__4}, {__5})</DisplayString>\n+    <Expand>\n+      <Item Name=\"[0]\">__0</Item>\n+      <Item Name=\"[1]\">__1</Item>\n+      <Item Name=\"[2]\">__2</Item>\n+      <Item Name=\"[3]\">__3</Item>\n+      <Item Name=\"[4]\">__4</Item>\n+      <Item Name=\"[5]\">__5</Item>\n+    </Expand>\n+  </Type>\n+  <Type Name=\"tuple&lt;*,*,*,*,*,*,*&gt;\">\n+    <DisplayString>({__0}, {__1}, {__2}, {__3}, {__4}, {__5}, {__6})</DisplayString>\n+    <Expand>\n+      <Item Name=\"[0]\">__0</Item>\n+      <Item Name=\"[1]\">__1</Item>\n+      <Item Name=\"[2]\">__2</Item>\n+      <Item Name=\"[3]\">__3</Item>\n+      <Item Name=\"[4]\">__4</Item>\n+      <Item Name=\"[5]\">__5</Item>\n+      <Item Name=\"[6]\">__6</Item>\n+    </Expand>\n+  </Type>\n+  <Type Name=\"tuple&lt;*,*,*,*,*,*,*,*&gt;\">\n+    <DisplayString>({__0}, {__1}, {__2}, {__3}, {__4}, {__5}, {__6}, {__7})</DisplayString>\n+    <Expand>\n+      <Item Name=\"[0]\">__0</Item>\n+      <Item Name=\"[1]\">__1</Item>\n+      <Item Name=\"[2]\">__2</Item>\n+      <Item Name=\"[3]\">__3</Item>\n+      <Item Name=\"[4]\">__4</Item>\n+      <Item Name=\"[5]\">__5</Item>\n+      <Item Name=\"[6]\">__6</Item>\n+      <Item Name=\"[7]\">__7</Item>\n+    </Expand>\n+  </Type>\n+  <Type Name=\"tuple&lt;*,*,*,*,*,*,*,*,*&gt;\">\n+    <DisplayString>({__0}, {__1}, {__2}, {__3}, {__4}, {__5}, {__6}, {__7}, {__8})</DisplayString>\n+    <Expand>\n+      <Item Name=\"[0]\">__0</Item>\n+      <Item Name=\"[1]\">__1</Item>\n+      <Item Name=\"[2]\">__2</Item>\n+      <Item Name=\"[3]\">__3</Item>\n+      <Item Name=\"[4]\">__4</Item>\n+      <Item Name=\"[5]\">__5</Item>\n+      <Item Name=\"[6]\">__6</Item>\n+      <Item Name=\"[7]\">__7</Item>\n+      <Item Name=\"[8]\">__8</Item>\n+    </Expand>\n+  </Type>\n+  <Type Name=\"tuple&lt;*,*,*,*,*,*,*,*,*,*&gt;\">\n+    <DisplayString>({__0}, {__1}, {__2}, {__3}, {__4}, {__5}, {__6}, {__7}, {__8}, {__9})</DisplayString>\n+    <Expand>\n+      <Item Name=\"[0]\">__0</Item>\n+      <Item Name=\"[1]\">__1</Item>\n+      <Item Name=\"[2]\">__2</Item>\n+      <Item Name=\"[3]\">__3</Item>\n+      <Item Name=\"[4]\">__4</Item>\n+      <Item Name=\"[5]\">__5</Item>\n+      <Item Name=\"[6]\">__6</Item>\n+      <Item Name=\"[7]\">__7</Item>\n+      <Item Name=\"[8]\">__8</Item>\n+      <Item Name=\"[9]\">__9</Item>\n+    </Expand>\n+  </Type>\n+  <Type Name=\"tuple&lt;*,*,*,*,*,*,*,*,*,*,*&gt;\">\n+    <DisplayString>({__0}, {__1}, {__2}, {__3}, {__4}, {__5}, {__6}, {__7}, {__8}, {__9}, ...)</DisplayString>\n+    <Expand>\n+      <Item Name=\"[0]\">__0</Item>\n+      <Item Name=\"[1]\">__1</Item>\n+      <Item Name=\"[2]\">__2</Item>\n+      <Item Name=\"[3]\">__3</Item>\n+      <Item Name=\"[4]\">__4</Item>\n+      <Item Name=\"[5]\">__5</Item>\n+      <Item Name=\"[6]\">__6</Item>\n+      <Item Name=\"[7]\">__7</Item>\n+      <Item Name=\"[8]\">__8</Item>\n+      <Item Name=\"[9]\">__9</Item>\n+      <Synthetic Name=\"[...]\"><DisplayString>...</DisplayString></Synthetic>\n+    </Expand>\n+  </Type>\n </AutoVisualizer>"}, {"sha": "05dd7adff1fbbe4e495fe1de9089e5676bcf1743", "filename": "src/libcore/benches/ascii.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Flibcore%2Fbenches%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Flibcore%2Fbenches%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Fascii.rs?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -1,3 +1,5 @@\n+mod is_ascii;\n+\n // Lower-case ASCII 'a' is the first byte that has its highest bit set\n // after wrap-adding 0x1F:\n //"}, {"sha": "729b0a04eb6ba092795405ffb85f302ae8b542d3", "filename": "src/libcore/benches/ascii/is_ascii.rs", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Flibcore%2Fbenches%2Fascii%2Fis_ascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Flibcore%2Fbenches%2Fascii%2Fis_ascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Fascii%2Fis_ascii.rs?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -0,0 +1,82 @@\n+use super::{LONG, MEDIUM, SHORT};\n+use test::black_box;\n+use test::Bencher;\n+\n+macro_rules! benches {\n+    ($( fn $name: ident($arg: ident: &[u8]) $body: block )+) => {\n+        benches!(mod short SHORT[..] $($name $arg $body)+);\n+        benches!(mod medium MEDIUM[..] $($name $arg $body)+);\n+        benches!(mod long LONG[..] $($name $arg $body)+);\n+        // Ensure we benchmark cases where the functions are called with strings\n+        // that are not perfectly aligned or have a length which is not a\n+        // multiple of size_of::<usize>() (or both)\n+        benches!(mod unaligned_head MEDIUM[1..] $($name $arg $body)+);\n+        benches!(mod unaligned_tail MEDIUM[..(MEDIUM.len() - 1)] $($name $arg $body)+);\n+        benches!(mod unaligned_both MEDIUM[1..(MEDIUM.len() - 1)] $($name $arg $body)+);\n+    };\n+\n+    (mod $mod_name: ident $input: ident [$range: expr] $($name: ident $arg: ident $body: block)+) => {\n+        mod $mod_name {\n+            use super::*;\n+            $(\n+                #[bench]\n+                fn $name(bencher: &mut Bencher) {\n+                    bencher.bytes = $input[$range].len() as u64;\n+                    let mut vec = $input.as_bytes().to_vec();\n+                    bencher.iter(|| {\n+                        let $arg: &[u8] = &black_box(&mut vec)[$range];\n+                        black_box($body)\n+                    })\n+                }\n+            )+\n+        }\n+    };\n+}\n+\n+benches! {\n+    fn case00_libcore(bytes: &[u8]) {\n+        bytes.is_ascii()\n+    }\n+\n+    fn case01_iter_all(bytes: &[u8]) {\n+        bytes.iter().all(|b| b.is_ascii())\n+    }\n+\n+    fn case02_align_to(bytes: &[u8]) {\n+        is_ascii_align_to(bytes)\n+    }\n+\n+    fn case03_align_to_unrolled(bytes: &[u8]) {\n+        is_ascii_align_to_unrolled(bytes)\n+    }\n+}\n+\n+// These are separate since it's easier to debug errors if they don't go through\n+// macro expansion first.\n+fn is_ascii_align_to(bytes: &[u8]) -> bool {\n+    if bytes.len() < core::mem::size_of::<usize>() {\n+        return bytes.iter().all(|b| b.is_ascii());\n+    }\n+    // SAFETY: transmuting a sequence of `u8` to `usize` is always fine\n+    let (head, body, tail) = unsafe { bytes.align_to::<usize>() };\n+    head.iter().all(|b| b.is_ascii())\n+        && body.iter().all(|w| !contains_nonascii(*w))\n+        && tail.iter().all(|b| b.is_ascii())\n+}\n+\n+fn is_ascii_align_to_unrolled(bytes: &[u8]) -> bool {\n+    if bytes.len() < core::mem::size_of::<usize>() {\n+        return bytes.iter().all(|b| b.is_ascii());\n+    }\n+    // SAFETY: transmuting a sequence of `u8` to `[usize; 2]` is always fine\n+    let (head, body, tail) = unsafe { bytes.align_to::<[usize; 2]>() };\n+    head.iter().all(|b| b.is_ascii())\n+        && body.iter().all(|w| !contains_nonascii(w[0] | w[1]))\n+        && tail.iter().all(|b| b.is_ascii())\n+}\n+\n+#[inline]\n+fn contains_nonascii(v: usize) -> bool {\n+    const NONASCII_MASK: usize = 0x80808080_80808080u64 as usize;\n+    (NONASCII_MASK & v) != 0\n+}"}, {"sha": "540a8cfb290b36deb3741e69a5635f46f6399bc9", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -1285,7 +1285,9 @@ extern \"rust-intrinsic\" {\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_transmute\", issue = \"53605\")]\n+    // NOTE: While this makes the intrinsic const stable, we have some custom code in const fn\n+    // checks that prevent its use within `const fn`.\n+    #[rustc_const_stable(feature = \"const_transmute\", since = \"1.46.0\")]\n     pub fn transmute<T, U>(e: T) -> U;\n \n     /// Returns `true` if the actual type given as `T` requires drop"}, {"sha": "820c0a49e7f0318aaf4b1ef35464ad496982653a", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -140,7 +140,7 @@\n #![feature(rtm_target_feature)]\n #![feature(f16c_target_feature)]\n #![feature(hexagon_target_feature)]\n-#![feature(const_transmute)]\n+#![cfg_attr(not(bootstrap), feature(const_fn_transmute))]\n #![feature(abi_unadjusted)]\n #![feature(adx_target_feature)]\n #![feature(maybe_uninit_slice)]"}, {"sha": "bed8495993f438f81354070f61738873e368b781", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 101, "deletions": 1, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -2795,7 +2795,7 @@ impl [u8] {\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn is_ascii(&self) -> bool {\n-        self.iter().all(|b| b.is_ascii())\n+        is_ascii(self)\n     }\n \n     /// Checks that two slices are an ASCII case-insensitive match.\n@@ -2843,6 +2843,106 @@ impl [u8] {\n     }\n }\n \n+/// Returns `true` if any byte in the word `v` is nonascii (>= 128). Snarfed\n+/// from `../str/mod.rs`, which does something similar for utf8 validation.\n+#[inline]\n+fn contains_nonascii(v: usize) -> bool {\n+    const NONASCII_MASK: usize = 0x80808080_80808080u64 as usize;\n+    (NONASCII_MASK & v) != 0\n+}\n+\n+/// Optimized ASCII test that will use usize-at-a-time operations instead of\n+/// byte-at-a-time operations (when possible).\n+///\n+/// The algorithm we use here is pretty simple. If `s` is too short, we just\n+/// check each byte and be done with it. Otherwise:\n+///\n+/// - Read the first word with an unaligned load.\n+/// - Align the pointer, read subsequent words until end with aligned loads.\n+/// - If there's a tail, the last `usize` from `s` with an unaligned load.\n+///\n+/// If any of these loads produces something for which `contains_nonascii`\n+/// (above) returns true, then we know the answer is false.\n+#[inline]\n+fn is_ascii(s: &[u8]) -> bool {\n+    const USIZE_SIZE: usize = mem::size_of::<usize>();\n+\n+    let len = s.len();\n+    let align_offset = s.as_ptr().align_offset(USIZE_SIZE);\n+\n+    // If we wouldn't gain anything from the word-at-a-time implementation, fall\n+    // back to a scalar loop.\n+    //\n+    // We also do this for architectures where `size_of::<usize>()` isn't\n+    // sufficient alignment for `usize`, because it's a weird edge case.\n+    if len < USIZE_SIZE || len < align_offset || USIZE_SIZE < mem::align_of::<usize>() {\n+        return s.iter().all(|b| b.is_ascii());\n+    }\n+\n+    // We always read the first word unaligned, which means `align_offset` is\n+    // 0, we'd read the same value again for the aligned read.\n+    let offset_to_aligned = if align_offset == 0 { USIZE_SIZE } else { align_offset };\n+\n+    let start = s.as_ptr();\n+    // SAFETY: We verify `len < USIZE_SIZE` above.\n+    let first_word = unsafe { (start as *const usize).read_unaligned() };\n+\n+    if contains_nonascii(first_word) {\n+        return false;\n+    }\n+    // We checked this above, somewhat implicitly. Note that `offset_to_aligned`\n+    // is either `align_offset` or `USIZE_SIZE`, both of are explicitly checked\n+    // above.\n+    debug_assert!(offset_to_aligned <= len);\n+\n+    // word_ptr is the (properly aligned) usize ptr we use to read the middle chunk of the slice.\n+    let mut word_ptr = unsafe { start.add(offset_to_aligned) as *const usize };\n+\n+    // `byte_pos` is the byte index of `word_ptr`, used for loop end checks.\n+    let mut byte_pos = offset_to_aligned;\n+\n+    // Paranoia check about alignment, since we're about to do a bunch of\n+    // unaligned loads. In practice this should be impossible barring a bug in\n+    // `align_offset` though.\n+    debug_assert_eq!((word_ptr as usize) % mem::align_of::<usize>(), 0);\n+\n+    while byte_pos <= len - USIZE_SIZE {\n+        debug_assert!(\n+            // Sanity check that the read is in bounds\n+            (word_ptr as usize + USIZE_SIZE) <= (start.wrapping_add(len) as usize) &&\n+            // And that our assumptions about `byte_pos` hold.\n+            (word_ptr as usize) - (start as usize) == byte_pos\n+        );\n+\n+        // Safety: We know `word_ptr` is properly aligned (because of\n+        // `align_offset`), and we know that we have enough bytes between `word_ptr` and the end\n+        let word = unsafe { word_ptr.read() };\n+        if contains_nonascii(word) {\n+            return false;\n+        }\n+\n+        byte_pos += USIZE_SIZE;\n+        // SAFETY: We know that `byte_pos <= len - USIZE_SIZE`, which means that\n+        // after this `add`, `word_ptr` will be at most one-past-the-end.\n+        word_ptr = unsafe { word_ptr.add(1) };\n+    }\n+\n+    // If we have anything left over, it should be at-most 1 usize worth of bytes,\n+    // which we check with a read_unaligned.\n+    if byte_pos == len {\n+        return true;\n+    }\n+\n+    // Sanity check to ensure there really is only one `usize` left. This should\n+    // be guaranteed by our loop condition.\n+    debug_assert!(byte_pos < len && len - byte_pos < USIZE_SIZE);\n+\n+    // SAFETY: This relies on `len >= USIZE_SIZE`, which we check at the start.\n+    let last_word = unsafe { (start.add(len - USIZE_SIZE) as *const usize).read_unaligned() };\n+\n+    !contains_nonascii(last_word)\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T, I> ops::Index<I> for [T]\n where"}, {"sha": "003ed7df36e2a44d07943c718542e9c25e29eedf", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -4348,7 +4348,7 @@ impl str {\n         // We can treat each byte as character here: all multibyte characters\n         // start with a byte that is not in the ascii range, so we will stop\n         // there already.\n-        self.bytes().all(|b| b.is_ascii())\n+        self.as_bytes().is_ascii()\n     }\n \n     /// Checks that two strings are an ASCII case-insensitive match."}, {"sha": "57f2de16b2b37522b78d8785b6b5fd6d5f9e7908", "filename": "src/libcore/tests/ascii.rs", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Flibcore%2Ftests%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Flibcore%2Ftests%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fascii.rs?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -343,3 +343,59 @@ fn test_is_ascii_control() {\n         \" \",\n     );\n }\n+\n+// `is_ascii` does a good amount of pointer manipulation and has\n+// alignment-dependent computation. This is all sanity-checked via\n+// `debug_assert!`s, so we test various sizes/alignments thoroughly versus an\n+// \"obviously correct\" baseline function.\n+#[test]\n+fn test_is_ascii_align_size_thoroughly() {\n+    // The \"obviously-correct\" baseline mentioned above.\n+    fn is_ascii_baseline(s: &[u8]) -> bool {\n+        s.iter().all(|b| b.is_ascii())\n+    }\n+\n+    // Helper to repeat `l` copies of `b0` followed by `l` copies of `b1`.\n+    fn repeat_concat(b0: u8, b1: u8, l: usize) -> Vec<u8> {\n+        use core::iter::repeat;\n+        repeat(b0).take(l).chain(repeat(b1).take(l)).collect()\n+    }\n+\n+    // Miri is too slow for much of this, and in miri `align_offset` always\n+    // returns `usize::max_value()` anyway (at the moment), so we just test\n+    // lightly.\n+    let iter = if cfg!(miri) { 0..5 } else { 0..100 };\n+\n+    for i in iter {\n+        #[cfg(not(miri))]\n+        let cases = &[\n+            b\"a\".repeat(i),\n+            b\"\\0\".repeat(i),\n+            b\"\\x7f\".repeat(i),\n+            b\"\\x80\".repeat(i),\n+            b\"\\xff\".repeat(i),\n+            repeat_concat(b'a', 0x80u8, i),\n+            repeat_concat(0x80u8, b'a', i),\n+        ];\n+\n+        #[cfg(miri)]\n+        let cases = &[repeat_concat(b'a', 0x80u8, i)];\n+\n+        for case in cases {\n+            for pos in 0..=case.len() {\n+                // Potentially misaligned head\n+                let prefix = &case[pos..];\n+                assert_eq!(is_ascii_baseline(prefix), prefix.is_ascii(),);\n+\n+                // Potentially misaligned tail\n+                let suffix = &case[..case.len() - pos];\n+\n+                assert_eq!(is_ascii_baseline(suffix), suffix.is_ascii(),);\n+\n+                // Both head and tail are potentially misaligned\n+                let mid = &case[(pos / 2)..(case.len() - (pos / 2))];\n+                assert_eq!(is_ascii_baseline(mid), mid.is_ascii(),);\n+            }\n+        }\n+    }\n+}"}, {"sha": "c32ed1ea48c976ca3516ac147f5a01bdd3d24c19", "filename": "src/librustc_ast/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Flibrustc_ast%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Flibrustc_ast%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Flib.rs?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -10,7 +10,7 @@\n #![cfg_attr(bootstrap, feature(const_if_match))]\n #![feature(const_fn)] // For the `transmute` in `P::new`\n #![feature(const_panic)]\n-#![feature(const_transmute)]\n+#![cfg_attr(not(bootstrap), feature(const_fn_transmute))]\n #![feature(crate_visibility_modifier)]\n #![feature(label_break_value)]\n #![feature(nll)]"}, {"sha": "f2e042cf86aa5aa7822540772f170f42864ea6cd", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 71, "deletions": 1, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -19,6 +19,7 @@ use crate::llvm::debuginfo::{\n use crate::value::Value;\n \n use log::debug;\n+use rustc_ast::ast;\n use rustc_codegen_ssa::traits::*;\n use rustc_data_structures::const_cstr;\n use rustc_data_structures::fingerprint::Fingerprint;\n@@ -827,14 +828,60 @@ fn file_metadata_raw(\n     }\n }\n \n+trait MsvcBasicName {\n+    fn msvc_basic_name(self) -> &'static str;\n+}\n+\n+impl MsvcBasicName for ast::IntTy {\n+    fn msvc_basic_name(self) -> &'static str {\n+        match self {\n+            ast::IntTy::Isize => \"ptrdiff_t\",\n+            ast::IntTy::I8 => \"__int8\",\n+            ast::IntTy::I16 => \"__int16\",\n+            ast::IntTy::I32 => \"__int32\",\n+            ast::IntTy::I64 => \"__int64\",\n+            ast::IntTy::I128 => \"__int128\",\n+        }\n+    }\n+}\n+\n+impl MsvcBasicName for ast::UintTy {\n+    fn msvc_basic_name(self) -> &'static str {\n+        match self {\n+            ast::UintTy::Usize => \"size_t\",\n+            ast::UintTy::U8 => \"unsigned __int8\",\n+            ast::UintTy::U16 => \"unsigned __int16\",\n+            ast::UintTy::U32 => \"unsigned __int32\",\n+            ast::UintTy::U64 => \"unsigned __int64\",\n+            ast::UintTy::U128 => \"unsigned __int128\",\n+        }\n+    }\n+}\n+\n+impl MsvcBasicName for ast::FloatTy {\n+    fn msvc_basic_name(self) -> &'static str {\n+        match self {\n+            ast::FloatTy::F32 => \"float\",\n+            ast::FloatTy::F64 => \"double\",\n+        }\n+    }\n+}\n+\n fn basic_type_metadata(cx: &CodegenCx<'ll, 'tcx>, t: Ty<'tcx>) -> &'ll DIType {\n     debug!(\"basic_type_metadata: {:?}\", t);\n \n+    // When targeting MSVC, emit MSVC style type names for compatibility with\n+    // .natvis visualizers (and perhaps other existing native debuggers?)\n+    let msvc_like_names = cx.tcx.sess.target.target.options.is_like_msvc;\n+\n     let (name, encoding) = match t.kind {\n         ty::Never => (\"!\", DW_ATE_unsigned),\n         ty::Tuple(ref elements) if elements.is_empty() => (\"()\", DW_ATE_unsigned),\n         ty::Bool => (\"bool\", DW_ATE_boolean),\n         ty::Char => (\"char\", DW_ATE_unsigned_char),\n+        ty::Int(int_ty) if msvc_like_names => (int_ty.msvc_basic_name(), DW_ATE_signed),\n+        ty::Uint(uint_ty) if msvc_like_names => (uint_ty.msvc_basic_name(), DW_ATE_unsigned),\n+        ty::Float(float_ty) if msvc_like_names => (float_ty.msvc_basic_name(), DW_ATE_float),\n         ty::Int(int_ty) => (int_ty.name_str(), DW_ATE_signed),\n         ty::Uint(uint_ty) => (uint_ty.name_str(), DW_ATE_unsigned),\n         ty::Float(float_ty) => (float_ty.name_str(), DW_ATE_float),\n@@ -851,7 +898,30 @@ fn basic_type_metadata(cx: &CodegenCx<'ll, 'tcx>, t: Ty<'tcx>) -> &'ll DIType {\n         )\n     };\n \n-    ty_metadata\n+    if !msvc_like_names {\n+        return ty_metadata;\n+    }\n+\n+    let typedef_name = match t.kind {\n+        ty::Int(int_ty) => int_ty.name_str(),\n+        ty::Uint(uint_ty) => uint_ty.name_str(),\n+        ty::Float(float_ty) => float_ty.name_str(),\n+        _ => return ty_metadata,\n+    };\n+\n+    let typedef_metadata = unsafe {\n+        llvm::LLVMRustDIBuilderCreateTypedef(\n+            DIB(cx),\n+            ty_metadata,\n+            typedef_name.as_ptr().cast(),\n+            typedef_name.len(),\n+            unknown_file_metadata(cx),\n+            0,\n+            None,\n+        )\n+    };\n+\n+    typedef_metadata\n }\n \n fn foreign_type_metadata("}, {"sha": "64f5e103f0b0dbd5f06c46f84042e3a0fdbf4086", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -1703,6 +1703,16 @@ extern \"C\" {\n         Encoding: c_uint,\n     ) -> &'a DIBasicType;\n \n+    pub fn LLVMRustDIBuilderCreateTypedef(\n+        Builder: &DIBuilder<'a>,\n+        Type: &'a DIBasicType,\n+        Name: *const c_char,\n+        NameLen: size_t,\n+        File: &'a DIFile,\n+        LineNo: c_uint,\n+        Scope: Option<&'a DIScope>,\n+    ) -> &'a DIDerivedType;\n+\n     pub fn LLVMRustDIBuilderCreatePointerType(\n         Builder: &DIBuilder<'a>,\n         PointeeTy: &'a DIType,"}, {"sha": "e64aafa599fd8ae39d63af34fbb8808cd810090e", "filename": "src/librustc_codegen_ssa/back/linker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -619,9 +619,9 @@ impl<'a> Linker for GccLinker<'a> {\n     // Some versions of `gcc` add it implicitly, some (e.g. `musl-gcc`) don't,\n     // so we just always add it.\n     fn add_eh_frame_header(&mut self) {\n-        // The condition here is \"uses ELF\" basically.\n         if !self.sess.target.target.options.is_like_osx\n             && !self.sess.target.target.options.is_like_windows\n+            && !self.sess.target.target.options.is_like_solaris\n             && self.sess.target.target.target_os != \"uefi\"\n         {\n             self.linker_arg(\"--eh-frame-hdr\");"}, {"sha": "20d440433cbb0bc4f5b27bc3f4490aabadecd39f", "filename": "src/librustc_codegen_ssa/debuginfo/type_names.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Flibrustc_codegen_ssa%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Flibrustc_codegen_ssa%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fdebuginfo%2Ftype_names.rs?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -47,7 +47,12 @@ pub fn push_debuginfo_type_name<'tcx>(\n             push_type_params(tcx, substs, output, visited);\n         }\n         ty::Tuple(component_types) => {\n-            output.push('(');\n+            if cpp_like_names {\n+                output.push_str(\"tuple<\");\n+            } else {\n+                output.push('(');\n+            }\n+\n             for component_type in component_types {\n                 push_debuginfo_type_name(tcx, component_type.expect_ty(), true, output, visited);\n                 output.push_str(\", \");\n@@ -56,7 +61,12 @@ pub fn push_debuginfo_type_name<'tcx>(\n                 output.pop();\n                 output.pop();\n             }\n-            output.push(')');\n+\n+            if cpp_like_names {\n+                output.push('>');\n+            } else {\n+                output.push(')');\n+            }\n         }\n         ty::RawPtr(ty::TypeAndMut { ty: inner_type, mutbl }) => {\n             if !cpp_like_names {"}, {"sha": "0da3693af4fb694447d64a87a4fbe1d7140c337c", "filename": "src/librustc_feature/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Flibrustc_feature%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Flibrustc_feature%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Factive.rs?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -573,6 +573,9 @@ declare_features! (\n     /// Lazily evaluate constants. This allows constants to depend on type parameters.\n     (active, lazy_normalization_consts, \"1.46.0\", Some(72219), None),\n \n+    /// Alloc calling `transmute` in const fn\n+    (active, const_fn_transmute, \"1.46.0\", Some(53605), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "c2b14cb2e8408cb66610f22d1593543383776a7d", "filename": "src/librustc_middle/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Flibrustc_middle%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Flibrustc_middle%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Flib.rs?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -30,7 +30,7 @@\n #![cfg_attr(bootstrap, feature(const_if_match))]\n #![feature(const_fn)]\n #![feature(const_panic)]\n-#![feature(const_transmute)]\n+#![cfg_attr(not(bootstrap), feature(const_fn_transmute))]\n #![feature(core_intrinsics)]\n #![feature(discriminant_kind)]\n #![feature(drain_filter)]"}, {"sha": "3809c8d245bbe96ebbb682fe13ff81cdabfe0366", "filename": "src/librustc_middle/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -393,7 +393,7 @@ pub trait PrettyPrinter<'tcx>:\n                     .tcx()\n                     .item_children(visible_parent)\n                     .iter()\n-                    .find(|child| child.res.def_id() == def_id)\n+                    .find(|child| child.res.opt_def_id() == Some(def_id))\n                     .map(|child| child.ident.name);\n                 if let Some(reexport) = reexport {\n                     *name = reexport;"}, {"sha": "52b1eba3b93c277510857d5b858154a1b2c0ee5f", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -6,6 +6,7 @@ use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::{self, adjustment::PointerCast, Ty, TyCtxt};\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n+use rustc_target::spec::abi::Abi::RustIntrinsic;\n use std::borrow::Cow;\n \n type McfResult = Result<(), (Span, Cow<'static, str>)>;\n@@ -418,6 +419,20 @@ fn check_terminator(\n                     ));\n                 }\n \n+                // HACK: This is to \"unstabilize\" the `transmute` intrinsic\n+                // within const fns. `transmute` is allowed in all other const contexts.\n+                // This won't really scale to more intrinsics or functions. Let's allow const\n+                // transmutes in const fn before we add more hacks to this.\n+                if tcx.fn_sig(fn_def_id).abi() == RustIntrinsic\n+                    && tcx.item_name(fn_def_id) == sym::transmute\n+                    && !feature_allowed(tcx, def_id, sym::const_fn_transmute)\n+                {\n+                    return Err((\n+                        span,\n+                        \"can only call `transmute` from const items, not `const fn`\".into(),\n+                    ));\n+                }\n+\n                 check_operand(tcx, func, span, fn_def_id, body)?;\n \n                 for arg in args {"}, {"sha": "fc41ce5d5351114e4310fb90ef9b45b3d26b9337", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -100,9 +100,7 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n         let ident_span = path.last().map_or(span, |ident| ident.ident.span);\n         let ns = source.namespace();\n         let is_expected = &|res| source.is_expected(res);\n-        let is_enum_variant = &|res| {\n-            if let Res::Def(DefKind::Variant, _) = res { true } else { false }\n-        };\n+        let is_enum_variant = &|res| matches!(res, Res::Def(DefKind::Variant, _));\n \n         // Make the base error.\n         let expected = source.descr_expected();\n@@ -168,9 +166,9 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n         if [\"this\", \"my\"].contains(&&*item_str.as_str())\n             && self.self_value_is_available(path[0].ident.span, span)\n         {\n-            err.span_suggestion(\n+            err.span_suggestion_short(\n                 span,\n-                \"did you mean\",\n+                \"you might have meant to use `self` here instead\",\n                 \"self\".to_string(),\n                 Applicability::MaybeIncorrect,\n             );\n@@ -1044,6 +1042,7 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n             lifetime_ref\n         );\n         err.span_label(lifetime_ref.span, \"undeclared lifetime\");\n+        let mut suggests_in_band = false;\n         for missing in &self.missing_named_lifetime_spots {\n             match missing {\n                 MissingLifetimeSpot::Generics(generics) => {\n@@ -1057,6 +1056,7 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                         }) {\n                         (param.span.shrink_to_lo(), format!(\"{}, \", lifetime_ref))\n                     } else {\n+                        suggests_in_band = true;\n                         (generics.span, format!(\"<{}>\", lifetime_ref))\n                     };\n                     err.span_suggestion(\n@@ -1084,6 +1084,15 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                 }\n             }\n         }\n+        if nightly_options::is_nightly_build()\n+            && !self.tcx.features().in_band_lifetimes\n+            && suggests_in_band\n+        {\n+            err.help(\n+                \"if you want to experiment with in-band lifetime bindings, \\\n+                    add `#![feature(in_band_lifetimes)]` to the crate attributes\",\n+            );\n+        }\n         err.emit();\n     }\n "}, {"sha": "6b3dbd0bf7a059189df1fc5eb9eb8078ae699a7c", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -226,6 +226,7 @@ symbols! {\n         const_eval_limit,\n         const_extern_fn,\n         const_fn,\n+        const_fn_transmute,\n         const_fn_union,\n         const_generics,\n         const_if_match,"}, {"sha": "d134a53927fa033ae7e0f3e8ee872ff2dc71468d", "filename": "src/llvm-project", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm-project?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -1 +1 @@\n-Subproject commit 6c040dd86ed62d38e585279027486e6efc42fb36\n+Subproject commit d134a53927fa033ae7e0f3e8ee872ff2dc71468d"}, {"sha": "c92cf65f98af7fc1909f483a118c23c920791a95", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -762,6 +762,14 @@ extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateBasicType(\n   return wrap(Builder->createBasicType(StringRef(Name, NameLen), SizeInBits, Encoding));\n }\n \n+extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateTypedef(\n+    LLVMRustDIBuilderRef Builder, LLVMMetadataRef Type, const char *Name, size_t NameLen,\n+    LLVMMetadataRef File, unsigned LineNo, LLVMMetadataRef Scope) {\n+  return wrap(Builder->createTypedef(\n+    unwrap<DIType>(Type), StringRef(Name, NameLen), unwrap<DIFile>(File),\n+    LineNo, unwrap<DIScope>(Scope)));\n+}\n+\n extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreatePointerType(\n     LLVMRustDIBuilderRef Builder, LLVMMetadataRef PointeeTy,\n     uint64_t SizeInBits, uint32_t AlignInBits, unsigned AddressSpace,"}, {"sha": "b7fcfeef090aa590dc4e41c63a68ba840323a14c", "filename": "src/test/debuginfo/simple-tuple.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fdebuginfo%2Fsimple-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fdebuginfo%2Fsimple-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fsimple-tuple.rs?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -123,6 +123,48 @@\n // lldbg-check:[...]$6 = { 0 = 15 1 = 16 }\n // lldbr-check:((i32, i16)) paddingAtEnd = { 0 = 15 1 = 16 }\n \n+\n+// === CDB TESTS ==================================================================================\n+\n+// cdb-command: g\n+\n+// cdb-command:dx noPadding8,d\n+// cdb-check:noPadding8,d [...]: (-100, 100) [Type: tuple<i8, u8>]\n+// cdb-check:[...][0]              : -100 [Type: [...]]\n+// cdb-check:[...][1]              : 100 [Type: [...]]\n+// cdb-command:dx noPadding16,d\n+// cdb-check:noPadding16,d [...]: (0, 1, 2) [Type: tuple<i16, i16, u16>]\n+// cdb-check:[...][0]              : 0 [Type: [...]]\n+// cdb-check:[...][1]              : 1 [Type: [...]]\n+// cdb-check:[...][2]              : 2 [Type: [...]]\n+// cdb-command:dx noPadding32,d\n+// cdb-check:noPadding32,d [...]: (3, 4.5[...], 5) [Type: tuple<i32, f32, u32>]\n+// cdb-check:[...][0]              : 3 [Type: [...]]\n+// cdb-check:[...][1]              : 4.5[...] [Type: [...]]\n+// cdb-check:[...][2]              : 5 [Type: [...]]\n+// cdb-command:dx noPadding64,d\n+// cdb-check:noPadding64,d [...]: (6, 7.5[...], 8) [Type: tuple<i64, f64, u64>]\n+// cdb-check:[...][0]              : 6 [Type: [...]]\n+// cdb-check:[...][1]              : 7.500000 [Type: [...]]\n+// cdb-check:[...][2]              : 8 [Type: [...]]\n+\n+// cdb-command:dx internalPadding1,d\n+// cdb-check:internalPadding1,d [...]: (9, 10) [Type: tuple<i16, i32>]\n+// cdb-check:[...][0]              : 9 [Type: short]\n+// cdb-check:[...][1]              : 10 [Type: int]\n+// cdb-command:dx internalPadding2,d\n+// cdb-check:internalPadding2,d [...]: (11, 12, 13, 14) [Type: tuple<i16, i32, u32, u64>]\n+// cdb-check:[...][0]              : 11 [Type: [...]]\n+// cdb-check:[...][1]              : 12 [Type: [...]]\n+// cdb-check:[...][2]              : 13 [Type: [...]]\n+// cdb-check:[...][3]              : 14 [Type: [...]]\n+\n+// cdb-command:dx paddingAtEnd,d\n+// cdb-check:paddingAtEnd,d [...]: (15, 16) [Type: tuple<i32, i16>]\n+// cdb-check:[...][0]              : 15 [Type: [...]]\n+// cdb-check:[...][1]              : 16 [Type: [...]]\n+\n+\n #![allow(unused_variables)]\n #![allow(dead_code)]\n #![feature(omit_gdb_pretty_printer_section)]"}, {"sha": "0447d8e9ddeb0d8d1caf255cf497b54d5de39cea", "filename": "src/test/debuginfo/tuple-in-tuple.rs", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fdebuginfo%2Ftuple-in-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fdebuginfo%2Ftuple-in-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ftuple-in-tuple.rs?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -59,6 +59,73 @@\n // lldbg-check:[...]$6 = { 0 = { 0 = 21 1 = 22 } 1 = 23 }\n // lldbr-check:(((i32, i16), i32)) padding_at_end2 = { 0 = { 0 = 21 1 = 22 } 1 = 23 }\n \n+\n+// === CDB TESTS ==================================================================================\n+\n+// cdb-command: g\n+\n+// cdb-command:dx no_padding1,d\n+// cdb-check:no_padding1,d [...]: ((0, 1), 2, 3) [Type: tuple<tuple<u32, u32>, u32, u32>]\n+// cdb-check:[...][0]              : (0, 1) [Type: tuple<u32, u32>]\n+// cdb-check:[...][1]              : 2 [Type: [...]]\n+// cdb-check:[...][2]              : 3 [Type: [...]]\n+// cdb-command:dx no_padding1.__0,d\n+// cdb-check:no_padding1.__0,d [...]: (0, 1) [Type: tuple<u32, u32>]\n+// cdb-check:[...][0]              : 0 [Type: [...]]\n+// cdb-check:[...][1]              : 1 [Type: [...]]\n+// cdb-command:dx no_padding2,d\n+// cdb-check:no_padding2,d [...]: (4, (5, 6), 7) [Type: tuple<u32, tuple<u32, u32>, u32>]\n+// cdb-check:[...][0]              : 4 [Type: [...]]\n+// cdb-check:[...][1]              : (5, 6) [Type: tuple<u32, u32>]\n+// cdb-check:[...][2]              : 7 [Type: [...]]\n+// cdb-command:dx no_padding2.__1,d\n+// cdb-check:no_padding2.__1,d [...]: (5, 6) [Type: tuple<u32, u32>]\n+// cdb-check:[...][0]              : 5 [Type: [...]]\n+// cdb-check:[...][1]              : 6 [Type: [...]]\n+// cdb-command:dx no_padding3,d\n+// cdb-check:no_padding3,d [...]: (8, 9, (10, 11)) [Type: tuple<u32, u32, tuple<u32, u32>>]\n+// cdb-check:[...][0]              : 8 [Type: [...]]\n+// cdb-check:[...][1]              : 9 [Type: [...]]\n+// cdb-check:[...][2]              : (10, 11) [Type: tuple<u32, u32>]\n+// cdb-command:dx no_padding3.__2,d\n+// cdb-check:no_padding3.__2,d [...]: (10, 11) [Type: tuple<u32, u32>]\n+// cdb-check:[...][0]              : 10 [Type: [...]]\n+// cdb-check:[...][1]              : 11 [Type: [...]]\n+\n+// cdb-command:dx internal_padding1,d\n+// cdb-check:internal_padding1,d [...]: (12, (13, 14)) [Type: tuple<i16, tuple<i32, i32>>]\n+// cdb-check:[...][0]              : 12 [Type: [...]]\n+// cdb-check:[...][1]              : (13, 14) [Type: tuple<i32, i32>]\n+// cdb-command:dx internal_padding1.__1,d\n+// cdb-check:internal_padding1.__1,d [...]: (13, 14) [Type: tuple<i32, i32>]\n+// cdb-check:[...][0]              : 13 [Type: [...]]\n+// cdb-check:[...][1]              : 14 [Type: [...]]\n+// cdb-command:dx internal_padding2,d\n+// cdb-check:internal_padding2,d [...]: (15, (16, 17)) [Type: tuple<i16, tuple<i16, i32>>]\n+// cdb-check:[...][0]              : 15 [Type: [...]]\n+// cdb-check:[...][1]              : (16, 17) [Type: tuple<i16, i32>]\n+// cdb-command:dx internal_padding2.__1,d\n+// cdb-check:internal_padding2.__1,d [...]: (16, 17) [Type: tuple<i16, i32>]\n+// cdb-check:[...][0]              : 16 [Type: [...]]\n+// cdb-check:[...][1]              : 17 [Type: [...]]\n+\n+// cdb-command:dx padding_at_end1,d\n+// cdb-check:padding_at_end1,d [...]: (18, (19, 20)) [Type: tuple<i32, tuple<i32, i16>>]\n+// cdb-check:[...][0]              : 18 [Type: [...]]\n+// cdb-check:[...][1]              : (19, 20) [Type: tuple<i32, i16>]\n+// cdb-command:dx padding_at_end1.__1,d\n+// cdb-check:padding_at_end1.__1,d [...][Type: tuple<i32, i16>]\n+// cdb-check:[...][0]              : 19 [Type: [...]]\n+// cdb-check:[...][1]              : 20 [Type: [...]]\n+// cdb-command:dx padding_at_end2,d\n+// cdb-check:padding_at_end2,d [...]: ((21, 22), 23) [Type: tuple<tuple<i32, i16>, i32>]\n+// cdb-check:[...][0]              : (21, 22) [Type: tuple<i32, i16>]\n+// cdb-check:[...][1]              : 23 [Type: [...]]\n+// cdb-command:dx padding_at_end2.__0,d\n+// cdb-check:padding_at_end2.__0,d [...]: (21, 22) [Type: tuple<i32, i16>]\n+// cdb-check:[...][0]              : 21 [Type: [...]]\n+// cdb-check:[...][1]              : 22 [Type: [...]]\n+\n #![allow(unused_variables)]\n #![feature(omit_gdb_pretty_printer_section)]\n #![omit_gdb_pretty_printer_section]"}, {"sha": "78cf000db03d19ad692bc5af12143c25dc246a35", "filename": "src/test/ui/consts/const-eval/dangling.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdangling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdangling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdangling.rs?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_transmute, const_raw_ptr_deref)]\n+#![feature(const_raw_ptr_deref)]\n \n use std::{mem, usize};\n "}, {"sha": "56ca0aa1f15873f68c0902b80c7b9222e18f29f2", "filename": "src/test/ui/consts/const-eval/double_check.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check.rs?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -20,4 +20,6 @@ static FOO: (&Foo, &Bar) = unsafe {(\n     Union { u8: &BAR }.bar,\n )};\n \n+static FOO2: (&Foo, &Bar) = unsafe {(std::mem::transmute(&BAR), std::mem::transmute(&BAR))};\n+\n fn main() {}"}, {"sha": "8402d628856648f0d9ec022fc9a50a77e17e14cb", "filename": "src/test/ui/consts/const-eval/double_check2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check2.rs?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -17,5 +17,7 @@ static FOO: (&Foo, &Bar) = unsafe {( //~ undefined behavior\n     Union { u8: &BAR }.foo,\n     Union { u8: &BAR }.bar,\n )};\n+static FOO2: (&Foo, &Bar) = unsafe {(std::mem::transmute(&BAR), std::mem::transmute(&BAR))};\n+//~^ undefined behavior\n \n fn main() {}"}, {"sha": "84f60809156d0201d9543c09695b39b8bcb02db7", "filename": "src/test/ui/consts/const-eval/double_check2.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check2.stderr?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -9,6 +9,14 @@ LL | | )};\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n-error: aborting due to previous error\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/double_check2.rs:20:1\n+   |\n+LL | static FOO2: (&Foo, &Bar) = unsafe {(std::mem::transmute(&BAR), std::mem::transmute(&BAR))};\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0x05 at .1.<deref>.<enum-tag>, but expected a valid enum tag\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "fa5a493abde2131bd10e71489c4fe9e6aeeee7f5", "filename": "src/test/ui/consts/const-eval/issue-55541.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-55541.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-55541.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-55541.rs?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -2,7 +2,7 @@\n \n // Test that we can handle newtypes wrapping extern types\n \n-#![feature(extern_types, const_transmute)]\n+#![feature(extern_types)]\n \n use std::marker::PhantomData;\n "}, {"sha": "1cfad00ca76df7126e41dd03403b265d1030cca8", "filename": "src/test/ui/consts/const-eval/transmute-const.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const.rs?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_transmute)]\n-\n use std::mem;\n \n static FOO: bool = unsafe { mem::transmute(3u8) };"}, {"sha": "46a404982778d5f4025caf420a02549ed566f3c8", "filename": "src/test/ui/consts/const-eval/transmute-const.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const.stderr?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/transmute-const.rs:5:1\n+  --> $DIR/transmute-const.rs:3:1\n    |\n LL | static FOO: bool = unsafe { mem::transmute(3u8) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0x03, but expected a boolean"}, {"sha": "dc94f2368c9b6a05dfb98aedb297b55543dc41e2", "filename": "src/test/ui/consts/const-eval/ub-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.rs?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -1,5 +1,5 @@\n // normalize-stderr-64bit \"0x0000000000\" -> \"0x00\"\n-#![feature(const_transmute, never_type)]\n+#![feature(never_type)]\n #![allow(const_err)] // make sure we cannot allow away the errors tested here\n \n use std::mem;"}, {"sha": "6801c7fa3ff083e6ded310512f96892842488c04", "filename": "src/test/ui/consts/const-eval/ub-int-array.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-int-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-int-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-int-array.rs?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -1,4 +1,3 @@\n-#![feature(const_transmute)]\n #![allow(const_err)] // make sure we cannot allow away the errors tested here\n \n //! Test the \"array of int\" fast path in validity checking, and in particular whether it"}, {"sha": "92f654847df32ef3ede0108920479613e414448a", "filename": "src/test/ui/consts/const-eval/ub-int-array.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-int-array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-int-array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-int-array.stderr?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-int-array.rs:15:1\n+  --> $DIR/ub-int-array.rs:14:1\n    |\n LL | / const UNINIT_INT_0: [u32; 3] = unsafe {\n LL | |\n@@ -13,7 +13,7 @@ LL | | };\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-int-array.rs:24:1\n+  --> $DIR/ub-int-array.rs:23:1\n    |\n LL | / const UNINIT_INT_1: [u32; 3] = unsafe {\n LL | |\n@@ -27,7 +27,7 @@ LL | | };\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-int-array.rs:44:1\n+  --> $DIR/ub-int-array.rs:43:1\n    |\n LL | / const UNINIT_INT_2: [u32; 3] = unsafe {\n LL | |"}, {"sha": "4b90b892dce9a3663eb368950cf2d5b281a1be86", "filename": "src/test/ui/consts/const-eval/ub-nonnull.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.rs?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -1,4 +1,4 @@\n-#![feature(rustc_attrs, const_transmute)]\n+#![feature(rustc_attrs)]\n #![allow(const_err, invalid_value)] // make sure we cannot allow away the errors tested here\n \n use std::mem;"}, {"sha": "e8b101fed6d2f6f6ad1fa8952000c8583a850b87", "filename": "src/test/ui/consts/const-eval/ub-ref.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.rs?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -1,5 +1,4 @@\n // ignore-tidy-linelength\n-#![feature(const_transmute)]\n #![allow(const_err, invalid_value)] // make sure we cannot allow away the errors tested here\n \n use std::mem;"}, {"sha": "cd270f2a533bf8e5e1e88ef06b69b3440d1b46cf", "filename": "src/test/ui/consts/const-eval/ub-ref.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.stderr?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -1,69 +1,69 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref.rs:7:1\n+  --> $DIR/ub-ref.rs:6:1\n    |\n LL | const UNALIGNED: &u16 = unsafe { mem::transmute(&[0u8; 4]) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered an unaligned reference (required 2 byte alignment but found 1)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref.rs:11:1\n+  --> $DIR/ub-ref.rs:10:1\n    |\n LL | const UNALIGNED_BOX: Box<u16> = unsafe { mem::transmute(&[0u8; 4]) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered an unaligned box (required 2 byte alignment but found 1)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref.rs:15:1\n+  --> $DIR/ub-ref.rs:14:1\n    |\n LL | const NULL: &u16 = unsafe { mem::transmute(0usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a NULL reference\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref.rs:18:1\n+  --> $DIR/ub-ref.rs:17:1\n    |\n LL | const NULL_BOX: Box<u16> = unsafe { mem::transmute(0usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a NULL box\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref.rs:24:1\n+  --> $DIR/ub-ref.rs:23:1\n    |\n LL | const REF_AS_USIZE: usize = unsafe { mem::transmute(&0) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc16, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref.rs:27:1\n+  --> $DIR/ub-ref.rs:26:1\n    |\n LL | const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer at .<deref>, but expected plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref.rs:30:1\n+  --> $DIR/ub-ref.rs:29:1\n    |\n LL | const REF_AS_USIZE_BOX_SLICE: Box<[usize]> = unsafe { mem::transmute::<&[usize], _>(&[mem::transmute(&0)]) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer at .<deref>, but expected plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref.rs:33:1\n+  --> $DIR/ub-ref.rs:32:1\n    |\n LL | const USIZE_AS_REF: &'static u8 = unsafe { mem::transmute(1337usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a dangling reference (created from integer)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref.rs:36:1\n+  --> $DIR/ub-ref.rs:35:1\n    |\n LL | const USIZE_AS_BOX: Box<u8> = unsafe { mem::transmute(1337usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a dangling box (created from integer)"}, {"sha": "b81bca3849431cec69385355b0f53f9a81096148", "filename": "src/test/ui/consts/const-eval/ub-uninhabit.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.rs?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -1,4 +1,3 @@\n-#![feature(const_transmute)]\n #![allow(const_err)] // make sure we cannot allow away the errors tested here\n \n use std::mem;"}, {"sha": "16f5316a44230e0695723595146b06bd6c3827a7", "filename": "src/test/ui/consts/const-eval/ub-uninhabit.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.stderr?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -1,21 +1,21 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-uninhabit.rs:15:1\n+  --> $DIR/ub-uninhabit.rs:14:1\n    |\n LL | const BAD_BAD_BAD: Bar = unsafe { MaybeUninit { uninit: () }.init };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a value of uninhabited type Bar\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-uninhabit.rs:18:1\n+  --> $DIR/ub-uninhabit.rs:17:1\n    |\n LL | const BAD_BAD_REF: &Bar = unsafe { mem::transmute(1usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a value of uninhabited type Bar at .<deref>\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-uninhabit.rs:21:1\n+  --> $DIR/ub-uninhabit.rs:20:1\n    |\n LL | const BAD_BAD_ARRAY: [Bar; 1] = unsafe { MaybeUninit { uninit: () }.init };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a value of uninhabited type Bar at [0]"}, {"sha": "5d19276557eb6d53d99a63642ba46a85dee025f7", "filename": "src/test/ui/consts/const-eval/ub-upvars.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-upvars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-upvars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-upvars.rs?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -1,4 +1,3 @@\n-#![feature(const_transmute)]\n #![allow(const_err, invalid_value)] // make sure we cannot allow away the errors tested here\n \n use std::mem;"}, {"sha": "afd6c9035cabf94389e49bba8f56d0b13d66c82a", "filename": "src/test/ui/consts/const-eval/ub-upvars.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-upvars.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-upvars.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-upvars.stderr?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-upvars.rs:6:1\n+  --> $DIR/ub-upvars.rs:5:1\n    |\n LL | / const BAD_UPVAR: &dyn FnOnce() = &{\n LL | |     let bad_ref: &'static u16 = unsafe { mem::transmute(0usize) };"}, {"sha": "3e148af8de9d59fd5ba20d461f578e25b3b54d1c", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.rs?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -1,5 +1,4 @@\n // ignore-tidy-linelength\n-#![feature(const_transmute)]\n #![allow(unused)]\n #![allow(const_err)] // make sure we cannot allow away the errors tested here\n "}, {"sha": "b7509108abc234a543f96e456029312daee79a4e", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.stderr", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.stderr?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -1,61 +1,61 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:32:1\n+  --> $DIR/ub-wide-ptr.rs:31:1\n    |\n LL | const STR_TOO_LONG: &str = unsafe { mem::transmute((&42u8, 999usize)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a dangling reference (going beyond the bounds of its allocation)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:34:1\n+  --> $DIR/ub-wide-ptr.rs:33:1\n    |\n LL | const NESTED_STR_MUCH_TOO_LONG: (&str,) = (unsafe { mem::transmute((&42, usize::MAX)) },);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered invalid reference metadata: slice is bigger than largest supported object at .0\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:37:1\n+  --> $DIR/ub-wide-ptr.rs:36:1\n    |\n LL | const STR_LENGTH_PTR: &str = unsafe { mem::transmute((&42u8, &3)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered non-integer slice length in wide pointer\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:40:1\n+  --> $DIR/ub-wide-ptr.rs:39:1\n    |\n LL | const MY_STR_LENGTH_PTR: &MyStr = unsafe { mem::transmute((&42u8, &3)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered non-integer slice length in wide pointer\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:42:1\n+  --> $DIR/ub-wide-ptr.rs:41:1\n    |\n LL | const MY_STR_MUCH_TOO_LONG: &MyStr = unsafe { mem::transmute((&42u8, usize::MAX)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered invalid reference metadata: slice is bigger than largest supported object\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:46:1\n+  --> $DIR/ub-wide-ptr.rs:45:1\n    |\n LL | const STR_NO_INIT: &str = unsafe { mem::transmute::<&[_], _>(&[MaybeUninit::<u8> { uninit: () }]) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized data in `str` at .<deref>\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:49:1\n+  --> $DIR/ub-wide-ptr.rs:48:1\n    |\n LL | const MYSTR_NO_INIT: &MyStr = unsafe { mem::transmute::<&[_], _>(&[MaybeUninit::<u8> { uninit: () }]) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized data in `str` at .<deref>.0\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:56:1\n+  --> $DIR/ub-wide-ptr.rs:55:1\n    |\n LL | / const SLICE_LENGTH_UNINIT: &[u8] = unsafe {\n LL | |\n@@ -67,63 +67,63 @@ LL | | };\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:62:1\n+  --> $DIR/ub-wide-ptr.rs:61:1\n    |\n LL | const SLICE_TOO_LONG: &[u8] = unsafe { mem::transmute((&42u8, 999usize)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a dangling reference (going beyond the bounds of its allocation)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:65:1\n+  --> $DIR/ub-wide-ptr.rs:64:1\n    |\n LL | const SLICE_LENGTH_PTR: &[u8] = unsafe { mem::transmute((&42u8, &3)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered non-integer slice length in wide pointer\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:68:1\n+  --> $DIR/ub-wide-ptr.rs:67:1\n    |\n LL | const SLICE_TOO_LONG_BOX: Box<[u8]> = unsafe { mem::transmute((&42u8, 999usize)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a dangling box (going beyond the bounds of its allocation)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:71:1\n+  --> $DIR/ub-wide-ptr.rs:70:1\n    |\n LL | const SLICE_LENGTH_PTR_BOX: Box<[u8]> = unsafe { mem::transmute((&42u8, &3)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered non-integer slice length in wide pointer\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:75:1\n+  --> $DIR/ub-wide-ptr.rs:74:1\n    |\n LL | const SLICE_CONTENT_INVALID: &[bool] = &[unsafe { mem::transmute(3u8) }];\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0x03 at .<deref>[0], but expected a boolean\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:81:1\n+  --> $DIR/ub-wide-ptr.rs:80:1\n    |\n LL | const MYSLICE_PREFIX_BAD: &MySliceBool = &MySlice(unsafe { mem::transmute(3u8) }, [false]);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0x03 at .<deref>.0, but expected a boolean\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:84:1\n+  --> $DIR/ub-wide-ptr.rs:83:1\n    |\n LL | const MYSLICE_SUFFIX_BAD: &MySliceBool = &MySlice(true, [unsafe { mem::transmute(3u8) }]);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0x03 at .<deref>.1[0], but expected a boolean\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:91:1\n+  --> $DIR/ub-wide-ptr.rs:90:1\n    |\n LL | / const RAW_SLICE_LENGTH_UNINIT: *const [u8] = unsafe {\n LL | |\n@@ -135,93 +135,93 @@ LL | | };\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:99:1\n+  --> $DIR/ub-wide-ptr.rs:98:1\n    |\n LL | const TRAIT_OBJ_SHORT_VTABLE_1: &dyn Trait = unsafe { mem::transmute((&92u8, &3u8)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered too small vtable\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:102:1\n+  --> $DIR/ub-wide-ptr.rs:101:1\n    |\n LL | const TRAIT_OBJ_SHORT_VTABLE_2: &dyn Trait = unsafe { mem::transmute((&92u8, &3u64)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered too small vtable\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:105:1\n+  --> $DIR/ub-wide-ptr.rs:104:1\n    |\n LL | const TRAIT_OBJ_INT_VTABLE: &dyn Trait = unsafe { mem::transmute((&92u8, 4usize)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered dangling vtable pointer in wide pointer\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:107:1\n+  --> $DIR/ub-wide-ptr.rs:106:1\n    |\n LL | const TRAIT_OBJ_UNALIGNED_VTABLE: &dyn Trait = unsafe { mem::transmute((&92u8, &[0u8; 128])) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered unaligned vtable pointer in wide pointer\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:109:1\n+  --> $DIR/ub-wide-ptr.rs:108:1\n    |\n LL | const TRAIT_OBJ_BAD_DROP_FN_NULL: &dyn Trait = unsafe { mem::transmute((&92u8, &[0usize; 8])) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered invalid drop function pointer in vtable (not pointing to a function)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:111:1\n+  --> $DIR/ub-wide-ptr.rs:110:1\n    |\n LL | const TRAIT_OBJ_BAD_DROP_FN_INT: &dyn Trait = unsafe { mem::transmute((&92u8, &[1usize; 8])) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered invalid drop function pointer in vtable (not pointing to a function)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:113:1\n+  --> $DIR/ub-wide-ptr.rs:112:1\n    |\n LL | const TRAIT_OBJ_BAD_DROP_FN_NOT_FN_PTR: &dyn Trait = unsafe { mem::transmute((&92u8, &[&42u8; 8])) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered invalid drop function pointer in vtable (not pointing to a function)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:117:1\n+  --> $DIR/ub-wide-ptr.rs:116:1\n    |\n LL | const TRAIT_OBJ_CONTENT_INVALID: &dyn Trait = unsafe { mem::transmute::<_, &bool>(&3u8) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0x03 at .<deref>.<dyn-downcast>, but expected a boolean\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:121:1\n+  --> $DIR/ub-wide-ptr.rs:120:1\n    |\n LL | const RAW_TRAIT_OBJ_VTABLE_NULL: *const dyn Trait = unsafe { mem::transmute((&92u8, 0usize)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered dangling vtable pointer in wide pointer\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:123:1\n+  --> $DIR/ub-wide-ptr.rs:122:1\n    |\n LL | const RAW_TRAIT_OBJ_VTABLE_INVALID: *const dyn Trait = unsafe { mem::transmute((&92u8, &3u64)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered too small vtable\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: could not evaluate static initializer\n-  --> $DIR/ub-wide-ptr.rs:129:5\n+  --> $DIR/ub-wide-ptr.rs:128:5\n    |\n LL |     mem::transmute::<_, &dyn Trait>((&92u8, 0usize))\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ inbounds test failed: 0x0 is not a valid pointer\n \n error[E0080]: could not evaluate static initializer\n-  --> $DIR/ub-wide-ptr.rs:133:5\n+  --> $DIR/ub-wide-ptr.rs:132:5\n    |\n LL |     mem::transmute::<_, &dyn Trait>((&92u8, &3u64))\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ memory access failed: pointer must be in-bounds at offset N, but is outside bounds of allocN which has size N"}, {"sha": "9e4707182d596262c4925f0f1b30b456ebb0b9b2", "filename": "src/test/ui/consts/const-eval/valid-const.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalid-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalid-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalid-const.rs?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -1,7 +1,6 @@\n // check-pass\n \n // Some constants that *are* valid\n-#![feature(const_transmute)]\n #![deny(const_err)]\n \n use std::mem;"}, {"sha": "48a989bf58863bcd213931b896a2a8b04b895f66", "filename": "src/test/ui/consts/const-eval/validate_uninhabited_zsts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.rs?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -1,5 +1,5 @@\n #![feature(const_fn)]\n-#![feature(const_transmute)]\n+#![feature(const_fn_transmute)]\n \n const fn foo() -> ! {\n     unsafe { std::mem::transmute(()) }"}, {"sha": "d51215447d6cac05dae1319b45ccecbdc63d0bea", "filename": "src/test/ui/consts/consts-in-patterns.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fconsts%2Fconsts-in-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fconsts%2Fconsts-in-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconsts-in-patterns.rs?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(const_transmute)]\n \n const FOO: isize = 10;\n const BAR: isize = 3;"}, {"sha": "eb250081d6a72c37af4438f5584a7bd8bc4cf375", "filename": "src/test/ui/consts/miri_unleashed/abi-mismatch.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.stderr?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -17,11 +17,6 @@ help: skipping check that does not even have a feature gate\n    |\n LL |     my_fn();\n    |     ^^^^^^^\n-help: skipping check that does not even have a feature gate\n-  --> $DIR/abi-mismatch.rs:16:40\n-   |\n-LL | static VAL: () = call_rust_fn(unsafe { std::mem::transmute(c_fn as extern \"C\" fn()) });\n-   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "d782a3633b243faee3c2987d4a9c37fd64f07a84", "filename": "src/test/ui/consts/miri_unleashed/ptr_arith.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fptr_arith.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fptr_arith.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fptr_arith.stderr?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -17,11 +17,6 @@ help: skipping check that does not even have a feature gate\n    |\n LL |     let _v = x == x;\n    |              ^^^^^^\n-help: skipping check that does not even have a feature gate\n-  --> $DIR/ptr_arith.rs:15:20\n-   |\n-LL |     let x: usize = std::mem::transmute(&0);\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors; 1 warning emitted\n "}, {"sha": "5044d99ec51834b55437d303ba207b5af3ad95eb", "filename": "src/test/ui/consts/transmute-const.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fconsts%2Ftransmute-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fconsts%2Ftransmute-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Ftransmute-const.rs?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -1,7 +1,5 @@\n // run-pass\n \n-#![feature(const_transmute)]\n-\n use std::mem;\n \n #[repr(transparent)]"}, {"sha": "33d74feead513bf34132804999decdc4b4efd80f", "filename": "src/test/ui/error-codes/E0261.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Ferror-codes%2FE0261.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Ferror-codes%2FE0261.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0261.stderr?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -5,6 +5,8 @@ LL | fn foo(x: &'a str) { }\n    |       -    ^^ undeclared lifetime\n    |       |\n    |       help: consider introducing lifetime `'a` here: `<'a>`\n+   |\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/E0261.rs:5:9\n@@ -13,6 +15,8 @@ LL | struct Foo {\n    |           - help: consider introducing lifetime `'a` here: `<'a>`\n LL |     x: &'a str,\n    |         ^^ undeclared lifetime\n+   |\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error: aborting due to 2 previous errors\n "}, {"sha": "981680b5d1fadc34b3375559dc7838ab9aafa626", "filename": "src/test/ui/feature-gates/feature-gate-const_fn_transmute.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn_transmute.rs?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -0,0 +1,38 @@\n+use std::mem;\n+\n+#[repr(transparent)]\n+struct Foo(u32);\n+\n+const TRANSMUTED_U32: u32 = unsafe { mem::transmute(Foo(3)) };\n+\n+const fn transmute_fn() -> u32 { unsafe { mem::transmute(Foo(3)) } }\n+//~^ ERROR can only call `transmute` from const items, not `const fn`\n+\n+const fn transmute_fn_intrinsic() -> u32 { unsafe { std::intrinsics::transmute(Foo(3)) } }\n+//~^ ERROR can only call `transmute` from const items, not `const fn`\n+\n+const fn transmute_fn_core_intrinsic() -> u32 { unsafe { core::intrinsics::transmute(Foo(3)) } }\n+//~^ ERROR can only call `transmute` from const items, not `const fn`\n+\n+const unsafe fn unsafe_transmute_fn() -> u32 { mem::transmute(Foo(3)) }\n+//~^ ERROR can only call `transmute` from const items, not `const fn`\n+\n+const unsafe fn unsafe_transmute_fn_intrinsic() -> u32 { std::intrinsics::transmute(Foo(3)) }\n+//~^ ERROR can only call `transmute` from const items, not `const fn`\n+\n+const unsafe fn unsafe_transmute_fn_core_intrinsic() -> u32 { core::intrinsics::transmute(Foo(3)) }\n+//~^ ERROR can only call `transmute` from const items, not `const fn`\n+\n+const fn safe_transmute_fn() -> u32 { mem::transmute(Foo(3)) }\n+//~^ ERROR can only call `transmute` from const items, not `const fn`\n+//~| ERROR call to unsafe function is unsafe and requires unsafe function or block\n+\n+const fn safe_transmute_fn_intrinsic() -> u32 { std::intrinsics::transmute(Foo(3)) }\n+//~^ ERROR can only call `transmute` from const items, not `const fn`\n+//~| ERROR call to unsafe function is unsafe and requires unsafe function or block\n+\n+const fn safe_transmute_fn_core_intrinsic() -> u32 { core::intrinsics::transmute(Foo(3)) }\n+//~^ ERROR can only call `transmute` from const items, not `const fn`\n+//~| ERROR call to unsafe function is unsafe and requires unsafe function or block\n+\n+fn main() {}"}, {"sha": "44430fd577d886a027b6e1e1f98316623ef60876", "filename": "src/test/ui/feature-gates/feature-gate-const_fn_transmute.stderr", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn_transmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn_transmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn_transmute.stderr?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -0,0 +1,109 @@\n+error[E0723]: can only call `transmute` from const items, not `const fn`\n+  --> $DIR/feature-gate-const_fn_transmute.rs:8:43\n+   |\n+LL | const fn transmute_fn() -> u32 { unsafe { mem::transmute(Foo(3)) } }\n+   |                                           ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+\n+error[E0723]: can only call `transmute` from const items, not `const fn`\n+  --> $DIR/feature-gate-const_fn_transmute.rs:11:53\n+   |\n+LL | const fn transmute_fn_intrinsic() -> u32 { unsafe { std::intrinsics::transmute(Foo(3)) } }\n+   |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+\n+error[E0723]: can only call `transmute` from const items, not `const fn`\n+  --> $DIR/feature-gate-const_fn_transmute.rs:14:58\n+   |\n+LL | const fn transmute_fn_core_intrinsic() -> u32 { unsafe { core::intrinsics::transmute(Foo(3)) } }\n+   |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+\n+error[E0723]: can only call `transmute` from const items, not `const fn`\n+  --> $DIR/feature-gate-const_fn_transmute.rs:17:48\n+   |\n+LL | const unsafe fn unsafe_transmute_fn() -> u32 { mem::transmute(Foo(3)) }\n+   |                                                ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+\n+error[E0723]: can only call `transmute` from const items, not `const fn`\n+  --> $DIR/feature-gate-const_fn_transmute.rs:20:58\n+   |\n+LL | const unsafe fn unsafe_transmute_fn_intrinsic() -> u32 { std::intrinsics::transmute(Foo(3)) }\n+   |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+\n+error[E0723]: can only call `transmute` from const items, not `const fn`\n+  --> $DIR/feature-gate-const_fn_transmute.rs:23:63\n+   |\n+LL | const unsafe fn unsafe_transmute_fn_core_intrinsic() -> u32 { core::intrinsics::transmute(Foo(3)) }\n+   |                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+\n+error[E0723]: can only call `transmute` from const items, not `const fn`\n+  --> $DIR/feature-gate-const_fn_transmute.rs:26:39\n+   |\n+LL | const fn safe_transmute_fn() -> u32 { mem::transmute(Foo(3)) }\n+   |                                       ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+\n+error[E0723]: can only call `transmute` from const items, not `const fn`\n+  --> $DIR/feature-gate-const_fn_transmute.rs:30:49\n+   |\n+LL | const fn safe_transmute_fn_intrinsic() -> u32 { std::intrinsics::transmute(Foo(3)) }\n+   |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+\n+error[E0723]: can only call `transmute` from const items, not `const fn`\n+  --> $DIR/feature-gate-const_fn_transmute.rs:34:54\n+   |\n+LL | const fn safe_transmute_fn_core_intrinsic() -> u32 { core::intrinsics::transmute(Foo(3)) }\n+   |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/feature-gate-const_fn_transmute.rs:26:39\n+   |\n+LL | const fn safe_transmute_fn() -> u32 { mem::transmute(Foo(3)) }\n+   |                                       ^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/feature-gate-const_fn_transmute.rs:30:49\n+   |\n+LL | const fn safe_transmute_fn_intrinsic() -> u32 { std::intrinsics::transmute(Foo(3)) }\n+   |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/feature-gate-const_fn_transmute.rs:34:54\n+   |\n+LL | const fn safe_transmute_fn_core_intrinsic() -> u32 { core::intrinsics::transmute(Foo(3)) }\n+   |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error: aborting due to 12 previous errors\n+\n+Some errors have detailed explanations: E0133, E0723.\n+For more information about an error, try `rustc --explain E0133`."}, {"sha": "da532643d9457630088faef894324e6038542b11", "filename": "src/test/ui/feature-gates/feature-gate-const_transmute.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/346aec9b02f3c74f3fce97fd6bda24709d220e49/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/346aec9b02f3c74f3fce97fd6bda24709d220e49/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_transmute.rs?ref=346aec9b02f3c74f3fce97fd6bda24709d220e49", "patch": "@@ -1,9 +0,0 @@\n-use std::mem;\n-\n-#[repr(transparent)]\n-struct Foo(u32);\n-\n-const TRANSMUTED_U32: u32 = unsafe { mem::transmute(Foo(3)) };\n-//~^ ERROR `std::intrinsics::transmute` is not yet stable as a const fn\n-\n-fn main() {}"}, {"sha": "772e8d294781a0cd57fa1901bfb751236a090fde", "filename": "src/test/ui/feature-gates/feature-gate-const_transmute.stderr", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/346aec9b02f3c74f3fce97fd6bda24709d220e49/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_transmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/346aec9b02f3c74f3fce97fd6bda24709d220e49/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_transmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_transmute.stderr?ref=346aec9b02f3c74f3fce97fd6bda24709d220e49", "patch": "@@ -1,10 +0,0 @@\n-error: `std::intrinsics::transmute` is not yet stable as a const fn\n-  --> $DIR/feature-gate-const_transmute.rs:6:38\n-   |\n-LL | const TRANSMUTED_U32: u32 = unsafe { mem::transmute(Foo(3)) };\n-   |                                      ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add `#![feature(const_transmute)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-"}, {"sha": "0f0406b8e17d8cd5e3375f43b3ddfd1ebaf79d3f", "filename": "src/test/ui/feature-gates/feature-gate-in_band_lifetimes.stderr", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-in_band_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-in_band_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-in_band_lifetimes.stderr?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -5,6 +5,8 @@ LL | fn foo(x: &'x u8) -> &'x u8 { x }\n    |       -    ^^ undeclared lifetime\n    |       |\n    |       help: consider introducing lifetime `'x` here: `<'x>`\n+   |\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error[E0261]: use of undeclared lifetime name `'x`\n   --> $DIR/feature-gate-in_band_lifetimes.rs:3:23\n@@ -13,6 +15,8 @@ LL | fn foo(x: &'x u8) -> &'x u8 { x }\n    |       -               ^^ undeclared lifetime\n    |       |\n    |       help: consider introducing lifetime `'x` here: `<'x>`\n+   |\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error[E0261]: use of undeclared lifetime name `'b`\n   --> $DIR/feature-gate-in_band_lifetimes.rs:15:12\n@@ -28,6 +32,7 @@ error[E0261]: use of undeclared lifetime name `'b`\n LL |     fn inner_2(&self) -> &'b u8 {\n    |                           ^^ undeclared lifetime\n    |\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n help: consider introducing lifetime `'b` here\n    |\n LL | impl<'b, 'a> X<'b> {\n@@ -44,13 +49,16 @@ LL | impl X<'b> {\n    |     -  ^^ undeclared lifetime\n    |     |\n    |     help: consider introducing lifetime `'b` here: `<'b>`\n+   |\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error[E0261]: use of undeclared lifetime name `'b`\n   --> $DIR/feature-gate-in_band_lifetimes.rs:25:27\n    |\n LL |     fn inner_3(&self) -> &'b u8 {\n    |                           ^^ undeclared lifetime\n    |\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n help: consider introducing lifetime `'b` here\n    |\n LL | impl<'b> X<'b> {\n@@ -67,13 +75,16 @@ LL | impl Y<&'a u8> {\n    |     -   ^^ undeclared lifetime\n    |     |\n    |     help: consider introducing lifetime `'a` here: `<'a>`\n+   |\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/feature-gate-in_band_lifetimes.rs:35:25\n    |\n LL |     fn inner(&self) -> &'a u8 {\n    |                         ^^ undeclared lifetime\n    |\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n help: consider introducing lifetime `'a` here\n    |\n LL | impl<'a> Y<&'a u8> {\n@@ -89,6 +100,7 @@ error[E0261]: use of undeclared lifetime name `'b`\n LL |     fn any_lifetime() -> &'b u8;\n    |                           ^^ undeclared lifetime\n    |\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n help: consider introducing lifetime `'b` here\n    |\n LL | trait MyTrait<'b, 'a> {\n@@ -104,6 +116,7 @@ error[E0261]: use of undeclared lifetime name `'b`\n LL |     fn borrowed_lifetime(&'b self) -> &'b u8;\n    |                           ^^ undeclared lifetime\n    |\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n help: consider introducing lifetime `'b` here\n    |\n LL | trait MyTrait<'b, 'a> {\n@@ -119,6 +132,7 @@ error[E0261]: use of undeclared lifetime name `'b`\n LL |     fn borrowed_lifetime(&'b self) -> &'b u8;\n    |                                        ^^ undeclared lifetime\n    |\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n help: consider introducing lifetime `'b` here\n    |\n LL | trait MyTrait<'b, 'a> {\n@@ -135,6 +149,8 @@ LL | impl MyTrait<'a> for Y<&'a u8> {\n    |     -        ^^ undeclared lifetime\n    |     |\n    |     help: consider introducing lifetime `'a` here: `<'a>`\n+   |\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/feature-gate-in_band_lifetimes.rs:50:25\n@@ -143,13 +159,16 @@ LL | impl MyTrait<'a> for Y<&'a u8> {\n    |     -                   ^^ undeclared lifetime\n    |     |\n    |     help: consider introducing lifetime `'a` here: `<'a>`\n+   |\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/feature-gate-in_band_lifetimes.rs:53:31\n    |\n LL |     fn my_lifetime(&self) -> &'a u8 { self.0 }\n    |                               ^^ undeclared lifetime\n    |\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n help: consider introducing lifetime `'a` here\n    |\n LL | impl<'a> MyTrait<'a> for Y<&'a u8> {\n@@ -165,6 +184,7 @@ error[E0261]: use of undeclared lifetime name `'b`\n LL |     fn any_lifetime() -> &'b u8 { &0 }\n    |                           ^^ undeclared lifetime\n    |\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n help: consider introducing lifetime `'b` here\n    |\n LL | impl<'b> MyTrait<'a> for Y<&'a u8> {\n@@ -180,6 +200,7 @@ error[E0261]: use of undeclared lifetime name `'b`\n LL |     fn borrowed_lifetime(&'b self) -> &'b u8 { &*self.0 }\n    |                           ^^ undeclared lifetime\n    |\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n help: consider introducing lifetime `'b` here\n    |\n LL | impl<'b> MyTrait<'a> for Y<&'a u8> {\n@@ -195,6 +216,7 @@ error[E0261]: use of undeclared lifetime name `'b`\n LL |     fn borrowed_lifetime(&'b self) -> &'b u8 { &*self.0 }\n    |                                        ^^ undeclared lifetime\n    |\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n help: consider introducing lifetime `'b` here\n    |\n LL | impl<'b> MyTrait<'a> for Y<&'a u8> {"}, {"sha": "f164c0d07a3c45c4f624d84dec5a21c817d94747", "filename": "src/test/ui/generic-associated-types/generic_associated_type_undeclared_lifetimes.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.stderr?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -4,6 +4,7 @@ error[E0261]: use of undeclared lifetime name `'b`\n LL |         + Deref<Target = Self::Item<'b>>;\n    |                                     ^^ undeclared lifetime\n    |\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n help: consider introducing lifetime `'b` here\n    |\n LL | trait Iterable<'b> {\n@@ -19,6 +20,7 @@ error[E0261]: use of undeclared lifetime name `'undeclared`\n LL |     fn iter<'a>(&'a self) -> Self::Iter<'undeclared>;\n    |                                         ^^^^^^^^^^^ undeclared lifetime\n    |\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n help: consider introducing lifetime `'undeclared` here\n    |\n LL | trait Iterable<'undeclared> {"}, {"sha": "b923bc22f6e5f741684ff83f424e3e47750aa90c", "filename": "src/test/ui/internal/internal-unstable-const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Finternal%2Finternal-unstable-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Finternal%2Finternal-unstable-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finternal%2Finternal-unstable-const.rs?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -8,7 +8,7 @@\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const fn foo() -> i32 {\n-    unsafe { std::mem::transmute(4u32) } //~ ERROR is not stable as `const fn`\n+    unsafe { std::mem::transmute(4u32) } //~ ERROR can only call `transmute` from const items\n }\n \n fn main() {}"}, {"sha": "9626df23ec3c2838b80c68c54dd6f26c2cdd6c8c", "filename": "src/test/ui/internal/internal-unstable-const.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Finternal%2Finternal-unstable-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Finternal%2Finternal-unstable-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finternal%2Finternal-unstable-const.stderr?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -1,4 +1,4 @@\n-error[E0723]: can only call other `const fn` within a `const fn`, but `const std::intrinsics::transmute::<u32, i32>` is not stable as `const fn`\n+error[E0723]: can only call `transmute` from const items, not `const fn`\n   --> $DIR/internal-unstable-const.rs:11:14\n    |\n LL |     unsafe { std::mem::transmute(4u32) }"}, {"sha": "45f2601d307c851264911584f6726fc7495ad12a", "filename": "src/test/ui/issues/issue-74236/auxiliary/dep.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fissues%2Fissue-74236%2Fauxiliary%2Fdep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fissues%2Fissue-74236%2Fauxiliary%2Fdep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-74236%2Fauxiliary%2Fdep.rs?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -0,0 +1,8 @@\n+// edition:2018\n+\n+mod private { pub struct Pub; }\n+\n+// Reexport built-in attribute without a DefId (requires Rust 2018).\n+pub use cfg_attr as attr;\n+// This export needs to be after the built-in attribute to trigger the bug.\n+pub use private::Pub as Renamed;"}, {"sha": "daa7cfcf9a106ba5a3ffecfcaaed71c01d532ce0", "filename": "src/test/ui/issues/issue-74236/main.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fissues%2Fissue-74236%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fissues%2Fissue-74236%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-74236%2Fmain.rs?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -0,0 +1,9 @@\n+// edition:2018\n+// aux-build:dep.rs\n+// compile-flags:--extern dep\n+\n+fn main() {\n+    // Trigger an error that will print the path of dep::private::Pub (as \"dep::Renamed\").\n+    let () = dep::Renamed;\n+    //~^ ERROR mismatched types\n+}"}, {"sha": "51d4833e01432bc07f0d96f030f149e9225ca173", "filename": "src/test/ui/issues/issue-74236/main.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fissues%2Fissue-74236%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fissues%2Fissue-74236%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-74236%2Fmain.stderr?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -0,0 +1,11 @@\n+error[E0308]: mismatched types\n+  --> $DIR/main.rs:7:9\n+   |\n+LL |     let () = dep::Renamed;\n+   |         ^^   ------------ this expression has type `dep::Renamed`\n+   |         |\n+   |         expected struct `dep::Renamed`, found `()`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "93c0384fcc2663fa8ff82c4170ba356e85814022", "filename": "src/test/ui/methods/method-call-lifetime-args-unresolved.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-lifetime-args-unresolved.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-lifetime-args-unresolved.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-lifetime-args-unresolved.stderr?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -5,6 +5,8 @@ LL | fn main() {\n    |        - help: consider introducing lifetime `'a` here: `<'a>`\n LL |     0.clone::<'a>();\n    |               ^^ undeclared lifetime\n+   |\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error: aborting due to previous error\n "}, {"sha": "d56c1fbd119c8cf2ca95e65798734054e9947dde", "filename": "src/test/ui/regions/regions-in-enums.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fregions%2Fregions-in-enums.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fregions%2Fregions-in-enums.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-in-enums.stderr?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -5,6 +5,8 @@ LL | enum No0 {\n    |         - help: consider introducing lifetime `'foo` here: `<'foo>`\n LL |     X5(&'foo usize)\n    |         ^^^^ undeclared lifetime\n+   |\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/regions-in-enums.rs:17:9\n@@ -13,6 +15,8 @@ LL | enum No1 {\n    |         - help: consider introducing lifetime `'a` here: `<'a>`\n LL |     X6(&'a usize)\n    |         ^^ undeclared lifetime\n+   |\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error: aborting due to 2 previous errors\n "}, {"sha": "2750149d09735abd2d725686e7bbe49e575837a7", "filename": "src/test/ui/regions/regions-in-structs.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fregions%2Fregions-in-structs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fregions%2Fregions-in-structs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-in-structs.stderr?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -5,6 +5,8 @@ LL | struct StructDecl {\n    |                  - help: consider introducing lifetime `'a` here: `<'a>`\n LL |     a: &'a isize,\n    |         ^^ undeclared lifetime\n+   |\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/regions-in-structs.rs:11:9\n@@ -14,6 +16,8 @@ LL | struct StructDecl {\n LL |     a: &'a isize,\n LL |     b: &'a isize,\n    |         ^^ undeclared lifetime\n+   |\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error: aborting due to 2 previous errors\n "}, {"sha": "57d39d59c8b04d9edfa6a0ed0fbf6f909b375a10", "filename": "src/test/ui/regions/regions-name-undeclared.stderr", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fregions%2Fregions-name-undeclared.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fregions%2Fregions-name-undeclared.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-name-undeclared.stderr?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -4,6 +4,7 @@ error[E0261]: use of undeclared lifetime name `'b`\n LL |     fn m4(&self, arg: &'b isize) { }\n    |                        ^^ undeclared lifetime\n    |\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n help: consider introducing lifetime `'b` here\n    |\n LL | impl<'b, 'a> Foo<'a> {\n@@ -19,6 +20,7 @@ error[E0261]: use of undeclared lifetime name `'b`\n LL |     fn m5(&'b self) { }\n    |            ^^ undeclared lifetime\n    |\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n help: consider introducing lifetime `'b` here\n    |\n LL | impl<'b, 'a> Foo<'a> {\n@@ -34,6 +36,7 @@ error[E0261]: use of undeclared lifetime name `'b`\n LL |     fn m6(&self, arg: Foo<'b>) { }\n    |                           ^^ undeclared lifetime\n    |\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n help: consider introducing lifetime `'b` here\n    |\n LL | impl<'b, 'a> Foo<'a> {\n@@ -50,6 +53,8 @@ LL |     type X = Option<&'a isize>;\n    |           -          ^^ undeclared lifetime\n    |           |\n    |           help: consider introducing lifetime `'a` here: `<'a>`\n+   |\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/regions-name-undeclared.rs:27:13\n@@ -58,6 +63,8 @@ LL |     enum E {\n    |           - help: consider introducing lifetime `'a` here: `<'a>`\n LL |         E1(&'a isize)\n    |             ^^ undeclared lifetime\n+   |\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/regions-name-undeclared.rs:30:13\n@@ -66,6 +73,8 @@ LL |     struct S {\n    |             - help: consider introducing lifetime `'a` here: `<'a>`\n LL |         f: &'a isize\n    |             ^^ undeclared lifetime\n+   |\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/regions-name-undeclared.rs:32:14\n@@ -74,6 +83,8 @@ LL |     fn f(a: &'a isize) { }\n    |         -    ^^ undeclared lifetime\n    |         |\n    |         help: consider introducing lifetime `'a` here: `<'a>`\n+   |\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/regions-name-undeclared.rs:40:17\n@@ -82,6 +93,8 @@ LL | fn fn_types(a: &'a isize,\n    |            -    ^^ undeclared lifetime\n    |            |\n    |            help: consider introducing lifetime `'a` here: `<'a>`\n+   |\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error[E0261]: use of undeclared lifetime name `'b`\n   --> $DIR/regions-name-undeclared.rs:42:36\n@@ -90,6 +103,7 @@ LL | ...                   &'b isize,\n    |                        ^^ undeclared lifetime\n    |\n    = note: for more information on higher-ranked polymorphism, visit https://doc.rust-lang.org/nomicon/hrtb.html\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n help: consider introducing lifetime `'b` here\n    |\n LL | fn fn_types<'b>(a: &'a isize,\n@@ -106,6 +120,7 @@ LL | ...                   &'b isize)>,\n    |                        ^^ undeclared lifetime\n    |\n    = note: for more information on higher-ranked polymorphism, visit https://doc.rust-lang.org/nomicon/hrtb.html\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n help: consider introducing lifetime `'b` here\n    |\n LL | fn fn_types<'b>(a: &'a isize,\n@@ -123,6 +138,8 @@ LL | fn fn_types(a: &'a isize,\n ...\n LL |             c: &'a isize)\n    |                 ^^ undeclared lifetime\n+   |\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error: aborting due to 11 previous errors\n "}, {"sha": "f3cae184ccde813e4d05b5a91d06b988518e5157", "filename": "src/test/ui/regions/regions-undeclared.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fregions%2Fregions-undeclared.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fregions%2Fregions-undeclared.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-undeclared.stderr?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -11,6 +11,8 @@ LL | enum EnumDecl {\n    |              - help: consider introducing lifetime `'a` here: `<'a>`\n LL |     Foo(&'a isize),\n    |          ^^ undeclared lifetime\n+   |\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/regions-undeclared.rs:5:10\n@@ -20,6 +22,8 @@ LL | enum EnumDecl {\n LL |     Foo(&'a isize),\n LL |     Bar(&'a isize),\n    |          ^^ undeclared lifetime\n+   |\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/regions-undeclared.rs:8:15\n@@ -28,6 +32,8 @@ LL | fn fnDecl(x: &'a isize,\n    |          -    ^^ undeclared lifetime\n    |          |\n    |          help: consider introducing lifetime `'a` here: `<'a>`\n+   |\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/regions-undeclared.rs:9:15\n@@ -36,6 +42,8 @@ LL | fn fnDecl(x: &'a isize,\n    |          - help: consider introducing lifetime `'a` here: `<'a>`\n LL |           y: &'a isize)\n    |               ^^ undeclared lifetime\n+   |\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error: aborting due to 5 previous errors\n "}, {"sha": "0d38b9d87c5e806699306b74e3a02b60b16ba758", "filename": "src/test/ui/self/suggest-self.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fself%2Fsuggest-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fself%2Fsuggest-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fsuggest-self.stderr?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -5,7 +5,7 @@ LL |         this.x\n    |         ^^^^\n    |         |\n    |         not found in this scope\n-   |         help: did you mean: `self`\n+   |         help: you might have meant to use `self` here instead\n \n error[E0425]: cannot find value `this` in this scope\n   --> $DIR/suggest-self.rs:26:9\n@@ -14,7 +14,7 @@ LL |         this.foo()\n    |         ^^^^\n    |         |\n    |         not found in this scope\n-   |         help: did you mean: `self`\n+   |         help: you might have meant to use `self` here instead\n \n error[E0425]: cannot find value `my` in this scope\n   --> $DIR/suggest-self.rs:31:9\n@@ -23,7 +23,7 @@ LL |         my.bar()\n    |         ^^\n    |         |\n    |         not found in this scope\n-   |         help: did you mean: `self`\n+   |         help: you might have meant to use `self` here instead\n \n error: aborting due to 3 previous errors\n "}, {"sha": "a704fea28289969d976c8e45bf0bf0e4a357ba6c", "filename": "src/test/ui/where-clauses/where-lifetime-resolution.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-lifetime-resolution.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-lifetime-resolution.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-lifetime-resolution.stderr?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -6,6 +6,8 @@ LL | fn f() where\n LL |     for<'a> dyn Trait1<'a>: Trait1<'a>, // OK\n LL |     (dyn for<'a> Trait1<'a>): Trait1<'a>,\n    |                                      ^^ undeclared lifetime\n+   |\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error[E0261]: use of undeclared lifetime name `'b`\n   --> $DIR/where-lifetime-resolution.rs:8:52\n@@ -15,6 +17,8 @@ LL | fn f() where\n ...\n LL |     for<'a> dyn for<'b> Trait2<'a, 'b>: Trait2<'a, 'b>,\n    |                                                    ^^ undeclared lifetime\n+   |\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error: aborting due to 2 previous errors\n "}, {"sha": "74d32b8a1aa933a0960b5751b503103b2735c384", "filename": "src/tools/clippy/tests/ui/missing_const_for_fn/could_be_const.stderr", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d09331e00b02f81c714b0c41ce3a38380dd36a2/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.stderr?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -57,14 +57,6 @@ LL | |     t\n LL | | }\n    | |_^\n \n-error: this could be a `const fn`\n-  --> $DIR/could_be_const.rs:48:1\n-   |\n-LL | / fn sub(x: u32) -> usize {\n-LL | |     unsafe { transmute(&x) }\n-LL | | }\n-   | |_^\n-\n error: this could be a `const fn`\n   --> $DIR/could_be_const.rs:67:9\n    |\n@@ -73,5 +65,5 @@ LL | |             B\n LL | |         }\n    | |_________^\n \n-error: aborting due to 9 previous errors\n+error: aborting due to 8 previous errors\n "}, {"sha": "eee22ffddab20f51e1866bcbe4c5a69a90bdd260", "filename": "src/tools/miri", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri?ref=9d09331e00b02f81c714b0c41ce3a38380dd36a2", "patch": "@@ -1 +1 @@\n-Subproject commit eb5ff1791be706d173b4f4c29e9c0529b4235c0e\n+Subproject commit eee22ffddab20f51e1866bcbe4c5a69a90bdd260"}]}