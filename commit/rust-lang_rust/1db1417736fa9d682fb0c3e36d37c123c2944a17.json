{"sha": "1db1417736fa9d682fb0c3e36d37c123c2944a17", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkYjE0MTc3MzZmYTlkNjgyZmIwYzNlMzZkMzdjMTIzYzI5NDRhMTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-10T14:40:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-10T14:40:07Z"}, "message": "Auto merge of #27547 - vberger:more_perseverant_resolve, r=nrc\n\nAs noted in my previous PR #27439 , the import resolution algorithm has two cases where it bails out:\r\n\r\n- The algorithm will delay an import if the module containing the target of the import still has unresolved glob imports\r\n- The algorithm will delay a glob import of the target module still has unresolved imports\r\n\r\nThis PR alters the behaviour to only bail out when the above described unresolved imports are `pub`, as non-pub imports don't affect the result anyway.\r\n\r\nIt is still possible to fail the algorithm with examples like\r\n```rust\r\npub mod a {\r\n    pub use b::*;\r\n}\r\n\r\npub mod b {\r\n    pub use a::*;\r\n}\r\n```\r\nbut such configurations cannot be resolved in any meaningful way, as these are cyclic imports.\r\n\r\nCloses #4865", "tree": {"sha": "87e29f259f0cbf778dd2dcd32dbc33cbd1212c74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87e29f259f0cbf778dd2dcd32dbc33cbd1212c74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1db1417736fa9d682fb0c3e36d37c123c2944a17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1db1417736fa9d682fb0c3e36d37c123c2944a17", "html_url": "https://github.com/rust-lang/rust/commit/1db1417736fa9d682fb0c3e36d37c123c2944a17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1db1417736fa9d682fb0c3e36d37c123c2944a17/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a136d4c95f2d927f327713d432421c47ee90df77", "url": "https://api.github.com/repos/rust-lang/rust/commits/a136d4c95f2d927f327713d432421c47ee90df77", "html_url": "https://github.com/rust-lang/rust/commit/a136d4c95f2d927f327713d432421c47ee90df77"}, {"sha": "5847ea76195d9cbe9d066418bdf44ba2a0398649", "url": "https://api.github.com/repos/rust-lang/rust/commits/5847ea76195d9cbe9d066418bdf44ba2a0398649", "html_url": "https://github.com/rust-lang/rust/commit/5847ea76195d9cbe9d066418bdf44ba2a0398649"}], "stats": {"total": 153, "additions": 138, "deletions": 15}, "files": [{"sha": "85e3b7d1337a32ebc45da76f9438070e46d76ec5", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1db1417736fa9d682fb0c3e36d37c123c2944a17/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1db1417736fa9d682fb0c3e36d37c123c2944a17/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=1db1417736fa9d682fb0c3e36d37c123c2944a17", "patch": "@@ -924,6 +924,11 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                                                                is_public,\n                                                                shadowable));\n         self.unresolved_imports += 1;\n+\n+        if is_public {\n+            module_.inc_pub_count();\n+        }\n+\n         // Bump the reference count on the name. Or, if this is a glob, set\n         // the appropriate flag.\n \n@@ -956,7 +961,10 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                 // Set the glob flag. This tells us that we don't know the\n                 // module's exports ahead of time.\n \n-                module_.glob_count.set(module_.glob_count.get() + 1);\n+                module_.inc_glob_count();\n+                if is_public {\n+                    module_.inc_pub_glob_count();\n+                }\n             }\n         }\n     }"}, {"sha": "50a8c5885338567702df8494982b93a589e26d30", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1db1417736fa9d682fb0c3e36d37c123c2944a17/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1db1417736fa9d682fb0c3e36d37c123c2944a17/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=1db1417736fa9d682fb0c3e36d37c123c2944a17", "patch": "@@ -699,6 +699,12 @@ pub struct Module {\n     // The number of unresolved globs that this module exports.\n     glob_count: Cell<usize>,\n \n+    // The number of unresolved pub imports (both regular and globs) in this module\n+    pub_count: Cell<usize>,\n+\n+    // The number of unresolved pub glob imports in this module\n+    pub_glob_count: Cell<usize>,\n+\n     // The index of the import we're resolving.\n     resolved_import_count: Cell<usize>,\n \n@@ -726,6 +732,8 @@ impl Module {\n             anonymous_children: RefCell::new(NodeMap()),\n             import_resolutions: RefCell::new(HashMap::new()),\n             glob_count: Cell::new(0),\n+            pub_count: Cell::new(0),\n+            pub_glob_count: Cell::new(0),\n             resolved_import_count: Cell::new(0),\n             populated: Cell::new(!external),\n         }\n@@ -741,6 +749,30 @@ impl Module {\n     }\n }\n \n+impl Module {\n+    pub fn inc_glob_count(&self) {\n+        self.glob_count.set(self.glob_count.get() + 1);\n+    }\n+    pub fn dec_glob_count(&self) {\n+        assert!(self.glob_count.get() > 0);\n+        self.glob_count.set(self.glob_count.get() - 1);\n+    }\n+    pub fn inc_pub_count(&self) {\n+        self.pub_count.set(self.pub_count.get() + 1);\n+    }\n+    pub fn dec_pub_count(&self) {\n+        assert!(self.pub_count.get() > 0);\n+        self.pub_count.set(self.pub_count.get() - 1);\n+    }\n+    pub fn inc_pub_glob_count(&self) {\n+        self.pub_glob_count.set(self.pub_glob_count.get() + 1);\n+    }\n+    pub fn dec_pub_glob_count(&self) {\n+        assert!(self.pub_glob_count.get() > 0);\n+        self.pub_glob_count.set(self.pub_glob_count.get() - 1);\n+    }\n+}\n+\n impl fmt::Debug for Module {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"{:?}, kind: {:?}, {}\","}, {"sha": "5a377d2c5fe12f2af21cc022ebac6b4a9ddfd925", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/1db1417736fa9d682fb0c3e36d37c123c2944a17/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1db1417736fa9d682fb0c3e36d37c123c2944a17/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=1db1417736fa9d682fb0c3e36d37c123c2944a17", "patch": "@@ -407,13 +407,18 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n         if resolution_result.success() {\n             match import_directive.subclass {\n                 GlobImport => {\n-                    assert!(module_.glob_count.get() >= 1);\n-                    module_.glob_count.set(module_.glob_count.get() - 1);\n+                    module_.dec_glob_count();\n+                    if import_directive.is_public {\n+                        module_.dec_pub_glob_count();\n+                    }\n                 }\n                 SingleImport(..) => {\n                     // Ignore.\n                 }\n             }\n+            if import_directive.is_public {\n+                module_.dec_pub_count();\n+            }\n         }\n \n         return resolution_result;\n@@ -503,8 +508,8 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n                 // containing module, bail out. We don't know enough to be\n                 // able to resolve this import.\n \n-                if target_module.glob_count.get() > 0 {\n-                    debug!(\"(resolving single import) unresolved glob; \\\n+                if target_module.pub_glob_count.get() > 0 {\n+                    debug!(\"(resolving single import) unresolved pub glob; \\\n                             bailing out\");\n                     return ResolveResult::Indeterminate;\n                 }\n@@ -767,16 +772,26 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n \n         // We must bail out if the node has unresolved imports of any kind\n         // (including globs).\n-        if !(*target_module).all_imports_resolved() {\n+        if (*target_module).pub_count.get() > 0 {\n             debug!(\"(resolving glob import) target module has unresolved \\\n-                    imports; bailing out\");\n+                    pub imports; bailing out\");\n             return ResolveResult::Indeterminate;\n         }\n \n-        assert_eq!(target_module.glob_count.get(), 0);\n-\n         // Add all resolved imports from the containing module.\n         let import_resolutions = target_module.import_resolutions.borrow();\n+\n+        if module_.import_resolutions.borrow_state() != ::std::cell::BorrowState::Unused {\n+            // In this case, target_module == module_\n+            // This means we are trying to glob import a module into itself,\n+            // and it is a no-go\n+            debug!(\"(resolving glob imports) target module is current module; giving up\");\n+            return ResolveResult::Failed(Some((\n+                        import_directive.span,\n+                        \"Cannot glob-import a module into itself.\".into()\n+                    )));\n+        }\n+\n         for (ident, target_import_resolution) in import_resolutions.iter() {\n             debug!(\"(resolving glob import) writing module resolution \\\n                     {} into `{}`\","}, {"sha": "3ada57c9993054286725fc8475e254330bd064d8", "filename": "src/test/compile-fail/issue-25396.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1db1417736fa9d682fb0c3e36d37c123c2944a17/src%2Ftest%2Fcompile-fail%2Fissue-25396.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1db1417736fa9d682fb0c3e36d37c123c2944a17/src%2Ftest%2Fcompile-fail%2Fissue-25396.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-25396.rs?ref=1db1417736fa9d682fb0c3e36d37c123c2944a17", "patch": "@@ -11,14 +11,14 @@\n use foo::baz;\n use bar::baz; //~ ERROR a module named `baz` has already been imported\n \n-use bar::Quux; //~ ERROR a trait named `Quux` has already been imported\n use foo::Quux;\n+use bar::Quux; //~ ERROR a trait named `Quux` has already been imported\n \n-use foo::blah; //~ ERROR a type named `blah` has already been imported\n-use bar::blah;\n+use foo::blah;\n+use bar::blah; //~ ERROR a type named `blah` has already been imported\n \n-use foo::WOMP; //~ ERROR a value named `WOMP` has already been imported\n-use bar::WOMP;\n+use foo::WOMP;\n+use bar::WOMP; //~ ERROR a value named `WOMP` has already been imported\n \n fn main() {}\n "}, {"sha": "318089b3030f613d227c84f4b4957a4194c7dc28", "filename": "src/test/compile-fail/issue-8208.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1db1417736fa9d682fb0c3e36d37c123c2944a17/src%2Ftest%2Fcompile-fail%2Fissue-8208.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1db1417736fa9d682fb0c3e36d37c123c2944a17/src%2Ftest%2Fcompile-fail%2Fissue-8208.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-8208.rs?ref=1db1417736fa9d682fb0c3e36d37c123c2944a17", "patch": "@@ -8,7 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use self::*; //~ ERROR: unresolved import\n+use self::*; //~ ERROR: unresolved import `self::*`. Cannot glob-import a module into itself.\n+\n+mod foo {\n+    use foo::*; //~ ERROR: unresolved import `foo::*`. Cannot glob-import a module into itself.\n+\n+    mod bar {\n+        use super::bar::*;\n+        //~^ ERROR: unresolved import `super::bar::*`. Cannot glob-import a module into itself.\n+    }\n+\n+}\n \n fn main() {\n }"}, {"sha": "6de2f437b20b97e273432078a191f76a1c32d98a", "filename": "src/test/run-pass/issue-4865-2.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1db1417736fa9d682fb0c3e36d37c123c2944a17/src%2Ftest%2Frun-pass%2Fissue-4865-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1db1417736fa9d682fb0c3e36d37c123c2944a17/src%2Ftest%2Frun-pass%2Fissue-4865-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4865-2.rs?ref=1db1417736fa9d682fb0c3e36d37c123c2944a17", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Previously, this would have failed to resolve due to the circular\n+// block between `use say` and `pub use hello::*`.\n+//\n+// Now, as `use say` is not `pub`, the glob import can resolve\n+// without any problem and this resolves fine.\n+\n+pub use hello::*;\n+\n+pub mod say {\n+    pub fn hello() { println!(\"hello\"); }\n+}\n+\n+pub mod hello {\n+    use say;\n+\n+    pub fn hello() {\n+        say::hello();\n+    }\n+}\n+\n+fn main() {\n+    hello();\n+}"}, {"sha": "d800ea6a66580c56fba566e599e80fa54af3b35b", "filename": "src/test/run-pass/issue-4865-3.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1db1417736fa9d682fb0c3e36d37c123c2944a17/src%2Ftest%2Frun-pass%2Fissue-4865-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1db1417736fa9d682fb0c3e36d37c123c2944a17/src%2Ftest%2Frun-pass%2Fissue-4865-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4865-3.rs?ref=1db1417736fa9d682fb0c3e36d37c123c2944a17", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This should resolve fine even with the circular imports as\n+// they are not `pub`.\n+\n+pub mod a {\n+    use b::*;\n+}\n+\n+pub mod b {\n+    use a::*;\n+}\n+\n+use a::*;\n+\n+fn main() {\n+}"}]}