{"sha": "31599fe34799027939a0541d6e95d0fdd07e3155", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxNTk5ZmUzNDc5OTAyNzkzOWEwNTQxZDZlOTVkMGZkZDA3ZTMxNTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-02T23:03:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-02T23:03:37Z"}, "message": "auto merge of #6172 : Sodel-the-Vociferous/rust/rm_trt_obj_magic_nums, r=catamorphism,graydon\n\nI don't know how one would write a separate test for this sort of thing. Building the compiler, and `make check` worked, which should mean I didn't screw anything.", "tree": {"sha": "ef645f60b38c330375a3a3bcc7fa77d4911edbac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef645f60b38c330375a3a3bcc7fa77d4911edbac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31599fe34799027939a0541d6e95d0fdd07e3155", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31599fe34799027939a0541d6e95d0fdd07e3155", "html_url": "https://github.com/rust-lang/rust/commit/31599fe34799027939a0541d6e95d0fdd07e3155", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31599fe34799027939a0541d6e95d0fdd07e3155/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba842518a2f0834fdc141138a7e73f86e2387f42", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba842518a2f0834fdc141138a7e73f86e2387f42", "html_url": "https://github.com/rust-lang/rust/commit/ba842518a2f0834fdc141138a7e73f86e2387f42"}, {"sha": "c64471ab8624e256c745dfd5d5e89ea6aa9e8228", "url": "https://api.github.com/repos/rust-lang/rust/commits/c64471ab8624e256c745dfd5d5e89ea6aa9e8228", "html_url": "https://github.com/rust-lang/rust/commit/c64471ab8624e256c745dfd5d5e89ea6aa9e8228"}], "stats": {"total": 45, "additions": 28, "deletions": 17}, "files": [{"sha": "e722e1a33c62b087bd0f54c66557925c8555883f", "filename": "src/librustc/back/abi.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/31599fe34799027939a0541d6e95d0fdd07e3155/src%2Flibrustc%2Fback%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31599fe34799027939a0541d6e95d0fdd07e3155/src%2Flibrustc%2Fback%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Fabi.rs?ref=31599fe34799027939a0541d6e95d0fdd07e3155", "patch": "@@ -57,6 +57,13 @@ pub static n_tydesc_fields: uint = 8u;\n pub static fn_field_code: uint = 0u;\n pub static fn_field_box: uint = 1u;\n \n+// The three fields of a trait object/trait instance: vtable, box, and type\n+// description.\n+pub static trt_field_vtable: uint = 0u;\n+pub static trt_field_box: uint = 1u;\n+// This field is only present in unique trait objects, so it comes last.\n+pub static trt_field_tydesc: uint = 2u;\n+\n pub static vec_elt_fill: uint = 0u;\n \n pub static vec_elt_alloc: uint = 1u;"}, {"sha": "53d218d390bcf5d30c5ab4a7196c953cfd27e854", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/31599fe34799027939a0541d6e95d0fdd07e3155/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31599fe34799027939a0541d6e95d0fdd07e3155/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=31599fe34799027939a0541d6e95d0fdd07e3155", "patch": "@@ -537,12 +537,12 @@ pub fn make_drop_glue(bcx: block, v0: ValueRef, t: ty::t) {\n         closure::make_closure_glue(bcx, v0, t, drop_ty)\n       }\n       ty::ty_trait(_, _, ty::BoxTraitStore, _) => {\n-        let llbox = Load(bcx, GEPi(bcx, v0, [0u, 1u]));\n+        let llbox = Load(bcx, GEPi(bcx, v0, [0u, abi::trt_field_box]));\n         decr_refcnt_maybe_free(bcx, llbox, ty::mk_opaque_box(ccx.tcx))\n       }\n       ty::ty_trait(_, _, ty::UniqTraitStore, _) => {\n-        let lluniquevalue = GEPi(bcx, v0, [0, 1]);\n-        let lltydesc = Load(bcx, GEPi(bcx, v0, [0, 2]));\n+        let lluniquevalue = GEPi(bcx, v0, [0, abi::trt_field_box]);\n+        let lltydesc = Load(bcx, GEPi(bcx, v0, [0, abi::trt_field_tydesc]));\n         call_tydesc_glue_full(bcx, lluniquevalue, lltydesc,\n                               abi::tydesc_field_free_glue, None);\n         bcx\n@@ -601,13 +601,13 @@ pub fn make_take_glue(bcx: block, v: ValueRef, t: ty::t) {\n         closure::make_closure_glue(bcx, v, t, take_ty)\n       }\n       ty::ty_trait(_, _, ty::BoxTraitStore, _) => {\n-        let llbox = Load(bcx, GEPi(bcx, v, [0u, 1u]));\n+        let llbox = Load(bcx, GEPi(bcx, v, [0u, abi::trt_field_box]));\n         incr_refcnt_of_boxed(bcx, llbox);\n         bcx\n       }\n       ty::ty_trait(_, _, ty::UniqTraitStore, _) => {\n-        let llval = GEPi(bcx, v, [0, 1]);\n-        let lltydesc = Load(bcx, GEPi(bcx, v, [0, 2]));\n+        let llval = GEPi(bcx, v, [0, abi::trt_field_box]);\n+        let lltydesc = Load(bcx, GEPi(bcx, v, [0, abi::trt_field_tydesc]));\n         call_tydesc_glue_full(bcx, llval, lltydesc,\n                               abi::tydesc_field_take_glue, None);\n         bcx"}, {"sha": "a90475d9ed0856edf6957ab817d738f4ef4bfec5", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/31599fe34799027939a0541d6e95d0fdd07e3155/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31599fe34799027939a0541d6e95d0fdd07e3155/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=31599fe34799027939a0541d6e95d0fdd07e3155", "patch": "@@ -637,14 +637,15 @@ pub fn trans_trait_callee_from_llval(bcx: block,\n            val_str(bcx.ccx().tn, llpair));\n     let llvtable = Load(bcx,\n                       PointerCast(bcx,\n-                                  GEPi(bcx, llpair, [0u, 0u]),\n+                                  GEPi(bcx, llpair,\n+                                       [0u, abi::trt_field_vtable]),\n                                   T_ptr(T_ptr(T_vtable()))));\n \n     // Load the box from the @Trait pair and GEP over the box header if\n     // necessary:\n     let mut llself;\n     debug!(\"(translating trait callee) loading second index from pair\");\n-    let llbox = Load(bcx, GEPi(bcx, llpair, [0u, 1u]));\n+    let llbox = Load(bcx, GEPi(bcx, llpair, [0u, abi::trt_field_box]));\n \n     // Munge `llself` appropriately for the type of `self` in the method.\n     let self_mode;\n@@ -845,27 +846,30 @@ pub fn trans_trait_cast(bcx: block,\n \n     match store {\n         ty::RegionTraitStore(_) | ty::BoxTraitStore => {\n-            let mut llboxdest = GEPi(bcx, lldest, [0u, 1u]);\n-            // Just store the pointer into the pair.\n+            let mut llboxdest = GEPi(bcx, lldest, [0u, abi::trt_field_box]);\n+            // Just store the pointer into the pair. (Region/borrowed\n+            // and boxed trait objects are represented as pairs, and\n+            // have no type descriptor field.)\n             llboxdest = PointerCast(bcx,\n                                     llboxdest,\n                                     T_ptr(type_of(bcx.ccx(), v_ty)));\n             bcx = expr::trans_into(bcx, val, SaveIn(llboxdest));\n         }\n         ty::UniqTraitStore => {\n-            // Translate the uniquely-owned value into the second element of\n-            // the triple. (The first element is the vtable.)\n-            let mut llvaldest = GEPi(bcx, lldest, [0, 1]);\n+            // Translate the uniquely-owned value in the\n+            // triple. (Unique trait objects are represented as\n+            // triples.)\n+            let mut llvaldest = GEPi(bcx, lldest, [0, abi::trt_field_box]);\n             llvaldest = PointerCast(bcx,\n                                     llvaldest,\n                                     T_ptr(type_of(bcx.ccx(), v_ty)));\n             bcx = expr::trans_into(bcx, val, SaveIn(llvaldest));\n \n-            // Get the type descriptor of the wrapped value and store it into\n-            // the third element of the triple as well.\n+            // Get the type descriptor of the wrapped value and store\n+            // it in the triple as well.\n             let tydesc = get_tydesc(bcx.ccx(), v_ty);\n             glue::lazily_emit_all_tydesc_glue(bcx.ccx(), tydesc);\n-            let lltydescdest = GEPi(bcx, lldest, [0, 2]);\n+            let lltydescdest = GEPi(bcx, lldest, [0, abi::trt_field_tydesc]);\n             Store(bcx, tydesc.tydesc, lltydescdest);\n         }\n     }\n@@ -875,7 +879,7 @@ pub fn trans_trait_cast(bcx: block,\n     let orig = resolve_vtable_in_fn_ctxt(bcx.fcx, orig);\n     let vtable = get_vtable(bcx.ccx(), orig);\n     Store(bcx, vtable, PointerCast(bcx,\n-                                   GEPi(bcx, lldest, [0u, 0u]),\n+                                   GEPi(bcx, lldest, [0u, abi::trt_field_vtable]),\n                                    T_ptr(val_ty(vtable))));\n \n     bcx"}]}