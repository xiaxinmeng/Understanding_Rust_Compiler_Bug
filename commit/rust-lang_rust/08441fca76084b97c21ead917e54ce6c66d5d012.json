{"sha": "08441fca76084b97c21ead917e54ce6c66d5d012", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4NDQxZmNhNzYwODRiOTdjMjFlYWQ5MTdlNTRjZTZjNjZkNWQwMTI=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-08-20T20:14:19Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-08-20T20:59:47Z"}, "message": "Add PosixPath to path2. Add path2 to core build. Add dot/dotdot-normalizing.", "tree": {"sha": "e25b4c236f9864a5e4657d3e0c3ae65e58849dcd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e25b4c236f9864a5e4657d3e0c3ae65e58849dcd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08441fca76084b97c21ead917e54ce6c66d5d012", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08441fca76084b97c21ead917e54ce6c66d5d012", "html_url": "https://github.com/rust-lang/rust/commit/08441fca76084b97c21ead917e54ce6c66d5d012", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08441fca76084b97c21ead917e54ce6c66d5d012/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a14485b7fd1a8a268a456ee1b47d79b10ccac875", "url": "https://api.github.com/repos/rust-lang/rust/commits/a14485b7fd1a8a268a456ee1b47d79b10ccac875", "html_url": "https://github.com/rust-lang/rust/commit/a14485b7fd1a8a268a456ee1b47d79b10ccac875"}], "stats": {"total": 250, "additions": 241, "deletions": 9}, "files": [{"sha": "f3f1e6e98391f1448c2462bce7365bfe5fdbbf57", "filename": "src/libcore/core.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/08441fca76084b97c21ead917e54ce6c66d5d012/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/08441fca76084b97c21ead917e54ce6c66d5d012/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=08441fca76084b97c21ead917e54ce6c66d5d012", "patch": "@@ -252,6 +252,7 @@ mod libc;\n mod os;\n #[warn(non_camel_case_types)]\n mod path;\n+mod path2;\n #[warn(non_camel_case_types)]\n mod rand;\n #[warn(non_camel_case_types)]"}, {"sha": "50996c7876b9d6719bf5696c6be338e154e4718c", "filename": "src/libcore/path2.rs", "status": "modified", "additions": 239, "deletions": 9, "changes": 248, "blob_url": "https://github.com/rust-lang/rust/blob/08441fca76084b97c21ead917e54ce6c66d5d012/src%2Flibcore%2Fpath2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08441fca76084b97c21ead917e54ce6c66d5d012/src%2Flibcore%2Fpath2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpath2.rs?ref=08441fca76084b97c21ead917e54ce6c66d5d012", "patch": "@@ -1,4 +1,6 @@\n-extern mod std;\n+// NB: transitionary, de-mode-ing.\n+#[forbid(deprecated_mode)];\n+#[forbid(deprecated_pattern)];\n \n struct WindowsPath {\n     host: option<~str>;\n@@ -31,6 +33,148 @@ trait Path {\n     fn pop_component() -> self;\n }\n \n+// FIXME (#3227): when default methods in traits are working, de-duplicate\n+// PosixPath and WindowsPath, most of their methods are common.\n+\n+impl PosixPath : Path {\n+    fn to_str() -> ~str {\n+        match self.filename() {\n+          none => self.dirname(),\n+          some(ref f) =>\n+          if (self.components.len() == 1 &&\n+              !self.is_absolute) {\n+            copy *f\n+          } else {\n+            self.dirname() + \"/\" + *f\n+          }\n+        }\n+    }\n+\n+    static fn from_str(s: &str) -> PosixPath {\n+        let mut components = str::split_nonempty(s, |c| c == '/');\n+        let is_absolute = (s.len() != 0 && s[0] == '/' as u8);\n+        return PosixPath { is_absolute: is_absolute,\n+                           components: normalize(components) }\n+    }\n+\n+    fn dirname() -> ~str {\n+        let mut s = ~\"\";\n+        if self.is_absolute {\n+            s += \"/\";\n+        }\n+        let mut d = copy self.components;\n+        if d.len() != 0 {\n+            vec::pop(d);\n+        }\n+        s += str::connect(d, \"/\");\n+        if s.len() == 0 {\n+            s = ~\".\";\n+        }\n+        return s;\n+    }\n+\n+    fn filename() -> option<~str> {\n+        match self.components.len() {\n+          0 => none,\n+          n => some(copy self.components[n - 1])\n+        }\n+    }\n+\n+    fn filestem() -> option<~str> {\n+        match self.filename() {\n+          none => none,\n+          some(ref f) => {\n+            match str::rfind_char(*f, '.') {\n+              some(p) => some(f.slice(0, p)),\n+              none => some(copy *f)\n+            }\n+          }\n+        }\n+    }\n+\n+    fn filetype() -> option<~str> {\n+        match self.filename() {\n+          none => none,\n+          some(ref f) => {\n+            match str::rfind_char(*f, '.') {\n+              some(p) if p+1 < f.len() => some(f.slice(p+1, f.len())),\n+              _ => none\n+            }\n+          }\n+        }\n+    }\n+\n+    fn with_dirname(d: &str) -> PosixPath {\n+        let dpath = from_str::<PosixPath>(d);\n+        match self.filename() {\n+          some(ref f) => dpath.push_components(~[copy *f]),\n+          none => dpath\n+        }\n+    }\n+\n+    fn with_filename(f: &str) -> PosixPath {\n+        assert ! str::any(f, |c| windows::is_sep(c as u8));\n+        self.dir_path().push_components(~[str::from_slice(f)])\n+    }\n+\n+    fn with_filestem(s: &str) -> PosixPath {\n+        match self.filetype() {\n+          none => self.with_filename(s),\n+          some(ref t) =>\n+          self.with_filename(str::from_slice(s) + \".\" + *t)\n+        }\n+    }\n+\n+    fn with_filetype(t: &str) -> PosixPath {\n+        if t.len() == 0 {\n+            match self.filestem() {\n+              none => copy self,\n+              some(s) => self.with_filename(s)\n+            }\n+        } else {\n+            let t = ~\".\" + str::from_slice(t);\n+            match self.filestem() {\n+              none => self.with_filename(t),\n+              some(ref s) =>\n+              self.with_filename(*s + t)\n+            }\n+        }\n+    }\n+\n+    fn dir_path() -> PosixPath {\n+        if self.components.len() != 0 {\n+            self.pop_component()\n+        } else {\n+            copy self\n+        }\n+    }\n+\n+    fn file_path() -> PosixPath {\n+        let cs = match self.filename() {\n+          none => ~[],\n+          some(ref f) => ~[copy *f]\n+        };\n+        return PosixPath { is_absolute: false,\n+                           components: cs }\n+    }\n+\n+    fn push_components(cs: &[~str]) -> PosixPath {\n+        return PosixPath { components: normalize(self.components + cs),\n+                           ..self }\n+    }\n+\n+    fn pop_component() -> PosixPath {\n+        let mut cs = copy self.components;\n+        if cs.len() != 0 {\n+            vec::pop(cs);\n+        }\n+        return PosixPath { components: cs, ..self }\n+    }\n+\n+\n+\n+}\n+\n \n impl WindowsPath : Path {\n \n@@ -82,7 +226,7 @@ impl WindowsPath : Path {\n         return WindowsPath { host: host,\n                              device: device,\n                              is_absolute: is_absolute,\n-                            components: components }\n+                             components: normalize(components) }\n     }\n \n     fn dirname() -> ~str {\n@@ -112,7 +256,6 @@ impl WindowsPath : Path {\n     fn filename() -> option<~str> {\n         match self.components.len() {\n           0 => none,\n-          1 => some(copy self.components[0]),\n           n => some(copy self.components[n - 1])\n         }\n     }\n@@ -163,11 +306,18 @@ impl WindowsPath : Path {\n     }\n \n     fn with_filetype(t: &str) -> WindowsPath {\n-        let t = ~\".\" + str::from_slice(t);\n-        match self.filestem() {\n-          none => self.with_filename(t),\n-          some(ref s) =>\n-          self.with_filename(*s + t)\n+        if t.len() == 0 {\n+            match self.filestem() {\n+              none => copy self,\n+              some(s) => self.with_filename(s)\n+            }\n+        } else {\n+            let t = ~\".\" + str::from_slice(t);\n+            match self.filestem() {\n+              none => self.with_filename(t),\n+              some(ref s) =>\n+              self.with_filename(*s + t)\n+            }\n         }\n     }\n \n@@ -191,7 +341,8 @@ impl WindowsPath : Path {\n     }\n \n     fn push_components(cs: &[~str]) -> WindowsPath {\n-        return WindowsPath { components: self.components + cs, ..self }\n+        return WindowsPath { components: normalize(self.components + cs),\n+                            ..self }\n     }\n \n     fn pop_component() -> WindowsPath {\n@@ -203,6 +354,85 @@ impl WindowsPath : Path {\n     }\n }\n \n+\n+fn normalize(components: &[~str]) -> ~[~str] {\n+    let mut cs = ~[];\n+    for components.each |c| {\n+        if c == ~\".\" { again; }\n+        if c == ~\"..\" && cs.len() != 0 {\n+            vec::pop(cs);\n+            again;\n+        }\n+        vec::push(cs, copy c);\n+    }\n+    cs\n+}\n+\n+mod posix {\n+\n+    #[test]\n+    fn test_posix_paths() {\n+        fn mk(s: &str) -> PosixPath { from_str::<PosixPath>(s) }\n+        fn t(wp: &PosixPath, s: &str) {\n+            let ss = wp.to_str();\n+            let sss = str::from_slice(s);\n+            if (ss != sss) {\n+                debug!(\"got %s\", ss);\n+                debug!(\"expected %s\", sss);\n+                assert ss == sss;\n+            }\n+        }\n+\n+        t(&(mk(\"hi\")), \"hi\");\n+        t(&(mk(\"hi/there\")), \"hi/there\");\n+        t(&(mk(\"hi/there.txt\")), \"hi/there.txt\");\n+\n+        t(&(mk(\"hi/there.txt\")), \"hi/there.txt\");\n+        t(&(mk(\"hi/there.txt\")\n+           .with_filetype(\"\")), \"hi/there\");\n+\n+        t(&(mk(\"/a/b/c/there.txt\")\n+            .with_dirname(\"hi\")), \"hi/there.txt\");\n+\n+        t(&(mk(\"hi/there.txt\")\n+            .with_dirname(\".\")), \"there.txt\");\n+\n+        t(&(mk(\"a/b/../c/././/../foo.txt/\")),\n+          \"a/foo.txt\");\n+\n+        t(&(mk(\"a/b/c\")\n+            .push_components([~\"..\"])), \"a/b\");\n+\n+        t(&(mk(\"there.txt\")\n+            .with_filetype(\"o\")), \"there.o\");\n+\n+        t(&(mk(\"hi/there.txt\")\n+            .with_filetype(\"o\")), \"hi/there.o\");\n+\n+        t(&(mk(\"hi/there.txt\")\n+            .with_filetype(\"o\")\n+            .with_dirname(\"/usr/lib\")),\n+          \"/usr/lib/there.o\");\n+\n+        t(&(mk(\"hi/there.txt\")\n+            .with_filetype(\"o\")\n+            .with_dirname(\"/usr/lib/\")),\n+          \"/usr/lib/there.o\");\n+\n+        t(&(mk(\"hi/there.txt\")\n+            .with_filetype(\"o\")\n+            .with_dirname(\"/usr//lib//\")),\n+            \"/usr/lib/there.o\");\n+\n+        t(&(mk(\"/usr/bin/rust\")\n+            .push_components([~\"lib\", ~\"thingy.so\"])\n+            .with_filestem(\"librustc\")),\n+          \"/usr/bin/rust/lib/librustc.so\");\n+\n+    }\n+\n+}\n+\n // Various windows helpers, and tests for the impl.\n mod windows {\n "}, {"sha": "4d2c98077dd18507391685d32581f71874fd7060", "filename": "src/libcore/str.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/08441fca76084b97c21ead917e54ce6c66d5d012/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08441fca76084b97c21ead917e54ce6c66d5d012/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=08441fca76084b97c21ead917e54ce6c66d5d012", "patch": "@@ -14,6 +14,7 @@ export\n    // Creating a string\n    from_bytes,\n    from_byte,\n+   from_slice,\n    from_char,\n    from_chars,\n    append,"}]}