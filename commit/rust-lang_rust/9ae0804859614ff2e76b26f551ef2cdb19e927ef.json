{"sha": "9ae0804859614ff2e76b26f551ef2cdb19e927ef", "node_id": "C_kwDOAAsO6NoAKDlhZTA4MDQ4NTk2MTRmZjJlNzZiMjZmNTUxZWYyY2RiMTllOTI3ZWY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-10-16T06:02:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-16T06:02:20Z"}, "message": "Rollup merge of #89509 - jhpratt:stabilize-const_unreachable_unchecked, r=oli-obk\n\nStabilize `unreachable_unchecked` as `const fn`\n\nCloses #53188\n\nThis PR stabilizes `core::hint::unreachable_unchecked` as `const fn`. MIRI is able to detect when this method is called. Stabilization was delayed until `const_panic` was stabilized so as to avoid users calling this method in its place (thus resulting in runtime UB). With #89508, that is no longer an issue.\n\n````@rustbot```` label +A-const-eval +A-const-fn +T-lang +S-blocked\n\n(not sure why it's T-lang, but that's what the tracking issue is)", "tree": {"sha": "2a9b516c1279697e01c193ff4367850dd16132da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a9b516c1279697e01c193ff4367850dd16132da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ae0804859614ff2e76b26f551ef2cdb19e927ef", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhamrtCRBK7hj4Ov3rIwAAlEEIAKUwyDRB0ODluTELKdQy+H2u\nwCDHhSjIAVv2A6oM6r8xrwCjZXcJdf1+DelLrkwgZSKYtTlfhr6cYUc368FwbbbX\nFJbe+O2MD5nLZPgBRB8f0ALGy60Lwea3hQURrf3Q2wvaCnk8j3T52qPfnNTXF8lC\nNduu6jSbcvfkGvf3XJ6ZrUPuZxyBST3p+oHFAUiveu/IjQ4jQ0I4k5w9WNN6LJnk\n3ihUScZVOlXM9bWuf3s1bm4JczgVwZDjX+Ba3TBXd+aHYomaAbIO0cTmytsKbjzT\n1Cu5gMLMKIY9Lxp/woQ+pNejdkPVGDpr6xFg+By/S8tp1h8ZkzcG9zcRR8scZ0Y=\n=X+Pn\n-----END PGP SIGNATURE-----\n", "payload": "tree 2a9b516c1279697e01c193ff4367850dd16132da\nparent 6cc0a764e082d9c0abcf37a768d5889247ba13e2\nparent 11140ff1a0dd3a395dd3ca1488bf580559f782f8\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1634364140 +0200\ncommitter GitHub <noreply@github.com> 1634364140 +0200\n\nRollup merge of #89509 - jhpratt:stabilize-const_unreachable_unchecked, r=oli-obk\n\nStabilize `unreachable_unchecked` as `const fn`\n\nCloses #53188\n\nThis PR stabilizes `core::hint::unreachable_unchecked` as `const fn`. MIRI is able to detect when this method is called. Stabilization was delayed until `const_panic` was stabilized so as to avoid users calling this method in its place (thus resulting in runtime UB). With #89508, that is no longer an issue.\n\n````@rustbot```` label +A-const-eval +A-const-fn +T-lang +S-blocked\n\n(not sure why it's T-lang, but that's what the tracking issue is)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ae0804859614ff2e76b26f551ef2cdb19e927ef", "html_url": "https://github.com/rust-lang/rust/commit/9ae0804859614ff2e76b26f551ef2cdb19e927ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ae0804859614ff2e76b26f551ef2cdb19e927ef/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6cc0a764e082d9c0abcf37a768d5889247ba13e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cc0a764e082d9c0abcf37a768d5889247ba13e2", "html_url": "https://github.com/rust-lang/rust/commit/6cc0a764e082d9c0abcf37a768d5889247ba13e2"}, {"sha": "11140ff1a0dd3a395dd3ca1488bf580559f782f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/11140ff1a0dd3a395dd3ca1488bf580559f782f8", "html_url": "https://github.com/rust-lang/rust/commit/11140ff1a0dd3a395dd3ca1488bf580559f782f8"}], "stats": {"total": 18, "additions": 7, "deletions": 11}, "files": [{"sha": "95798879155c55cf30d497f1c5d155c81bcf543b", "filename": "library/core/src/hint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ae0804859614ff2e76b26f551ef2cdb19e927ef/library%2Fcore%2Fsrc%2Fhint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ae0804859614ff2e76b26f551ef2cdb19e927ef/library%2Fcore%2Fsrc%2Fhint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhint.rs?ref=9ae0804859614ff2e76b26f551ef2cdb19e927ef", "patch": "@@ -44,7 +44,7 @@ use crate::intrinsics;\n /// ```\n #[inline]\n #[stable(feature = \"unreachable\", since = \"1.27.0\")]\n-#[rustc_const_unstable(feature = \"const_unreachable_unchecked\", issue = \"53188\")]\n+#[rustc_const_stable(feature = \"const_unreachable_unchecked\", since = \"1.57.0\")]\n pub const unsafe fn unreachable_unchecked() -> ! {\n     // SAFETY: the safety contract for `intrinsics::unreachable` must\n     // be upheld by the caller."}, {"sha": "1aeb83931e5aa52fa90a53673ade1958fc01bd7e", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ae0804859614ff2e76b26f551ef2cdb19e927ef/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ae0804859614ff2e76b26f551ef2cdb19e927ef/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=9ae0804859614ff2e76b26f551ef2cdb19e927ef", "patch": "@@ -735,7 +735,7 @@ extern \"rust-intrinsic\" {\n     /// reach code marked with this function.\n     ///\n     /// The stabilized version of this intrinsic is [`core::hint::unreachable_unchecked`].\n-    #[rustc_const_unstable(feature = \"const_unreachable_unchecked\", issue = \"53188\")]\n+    #[rustc_const_stable(feature = \"const_unreachable_unchecked\", since = \"1.57.0\")]\n     pub fn unreachable() -> !;\n \n     /// Informs the optimizer that a condition is always true."}, {"sha": "13b80c05dbb30eb756a541450055caf7c78a656f", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9ae0804859614ff2e76b26f551ef2cdb19e927ef/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ae0804859614ff2e76b26f551ef2cdb19e927ef/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=9ae0804859614ff2e76b26f551ef2cdb19e927ef", "patch": "@@ -130,7 +130,6 @@\n #![feature(const_trait_impl)]\n #![feature(const_type_id)]\n #![feature(const_type_name)]\n-#![feature(const_unreachable_unchecked)]\n #![feature(const_default_impls)]\n #![feature(duration_consts_2)]\n #![feature(ptr_metadata)]"}, {"sha": "1c3baec5d8638cbd7dd016494a0db5e94199da38", "filename": "src/test/ui/consts/const_unsafe_unreachable.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ae0804859614ff2e76b26f551ef2cdb19e927ef/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ae0804859614ff2e76b26f551ef2cdb19e927ef/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable.rs?ref=9ae0804859614ff2e76b26f551ef2cdb19e927ef", "patch": "@@ -1,7 +1,5 @@\n // run-pass\n \n-#![feature(const_unreachable_unchecked)]\n-\n const unsafe fn foo(x: bool) -> bool {\n     match x {\n         true => true,\n@@ -12,5 +10,5 @@ const unsafe fn foo(x: bool) -> bool {\n const BAR: bool = unsafe { foo(true) };\n \n fn main() {\n-  assert_eq!(BAR, true);\n+    assert_eq!(BAR, true);\n }"}, {"sha": "b418fea617ceaec29dd407105371ffa2233a4a4b", "filename": "src/test/ui/consts/const_unsafe_unreachable_ub.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9ae0804859614ff2e76b26f551ef2cdb19e927ef/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ae0804859614ff2e76b26f551ef2cdb19e927ef/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.rs?ref=9ae0804859614ff2e76b26f551ef2cdb19e927ef", "patch": "@@ -1,5 +1,4 @@\n // error-pattern: evaluation of constant value failed\n-#![feature(const_unreachable_unchecked)]\n \n const unsafe fn foo(x: bool) -> bool {\n     match x {\n@@ -11,5 +10,5 @@ const unsafe fn foo(x: bool) -> bool {\n const BAR: bool = unsafe { foo(false) };\n \n fn main() {\n-  assert_eq!(BAR, true);\n+    assert_eq!(BAR, true);\n }"}, {"sha": "ec6ce1f5d7c0864bea7caf1b7169376a4fe4eb12", "filename": "src/test/ui/consts/const_unsafe_unreachable_ub.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9ae0804859614ff2e76b26f551ef2cdb19e927ef/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ae0804859614ff2e76b26f551ef2cdb19e927ef/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.stderr?ref=9ae0804859614ff2e76b26f551ef2cdb19e927ef", "patch": "@@ -7,13 +7,13 @@ LL |     unsafe { intrinsics::unreachable() }\n    |              entering unreachable code\n    |              inside `unreachable_unchecked` at $SRC_DIR/core/src/hint.rs:LL:COL\n    |\n-  ::: $DIR/const_unsafe_unreachable_ub.rs:7:18\n+  ::: $DIR/const_unsafe_unreachable_ub.rs:6:18\n    |\n LL |         false => std::hint::unreachable_unchecked(),\n-   |                  ---------------------------------- inside `foo` at $DIR/const_unsafe_unreachable_ub.rs:7:18\n+   |                  ---------------------------------- inside `foo` at $DIR/const_unsafe_unreachable_ub.rs:6:18\n ...\n LL | const BAR: bool = unsafe { foo(false) };\n-   |                            ---------- inside `BAR` at $DIR/const_unsafe_unreachable_ub.rs:11:28\n+   |                            ---------- inside `BAR` at $DIR/const_unsafe_unreachable_ub.rs:10:28\n \n error: aborting due to previous error\n "}]}