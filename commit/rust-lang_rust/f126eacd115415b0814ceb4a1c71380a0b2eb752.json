{"sha": "f126eacd115415b0814ceb4a1c71380a0b2eb752", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxMjZlYWNkMTE1NDE1YjA4MTRjZWI0YTFjNzEzODBhMGIyZWI3NTI=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2014-07-04T19:05:43Z"}, "committer": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2014-07-04T19:05:43Z"}, "message": "comments, whitespace, rename NameFinderContext to PatIdentFinder", "tree": {"sha": "fa104dfe2ced2a824de8a370e543dd94a1570418", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa104dfe2ced2a824de8a370e543dd94a1570418"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f126eacd115415b0814ceb4a1c71380a0b2eb752", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f126eacd115415b0814ceb4a1c71380a0b2eb752", "html_url": "https://github.com/rust-lang/rust/commit/f126eacd115415b0814ceb4a1c71380a0b2eb752", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f126eacd115415b0814ceb4a1c71380a0b2eb752/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4358bf8bfa1bfc853b51c29d48a2d57eb8dfee0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4358bf8bfa1bfc853b51c29d48a2d57eb8dfee0a", "html_url": "https://github.com/rust-lang/rust/commit/4358bf8bfa1bfc853b51c29d48a2d57eb8dfee0a"}], "stats": {"total": 52, "additions": 27, "deletions": 25}, "files": [{"sha": "e2a74ba4dfc9fc841fdf37b2836b9354ddab168b", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f126eacd115415b0814ceb4a1c71380a0b2eb752/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f126eacd115415b0814ceb4a1c71380a0b2eb752/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=f126eacd115415b0814ceb4a1c71380a0b2eb752", "patch": "@@ -453,10 +453,10 @@ pub enum Expr_ {\n     ExprCast(Gc<Expr>, P<Ty>),\n     ExprIf(Gc<Expr>, P<Block>, Option<Gc<Expr>>),\n     ExprWhile(Gc<Expr>, P<Block>),\n-    // FIXME #6993: change to Option<Name>\n+    // FIXME #6993: change to Option<Name> ... or not, if these are hygienic.\n     ExprForLoop(Gc<Pat>, Gc<Expr>, P<Block>, Option<Ident>),\n     // Conditionless loop (can be exited with break, cont, or ret)\n-    // FIXME #6993: change to Option<Name>\n+    // FIXME #6993: change to Option<Name> ... or not, if these are hygienic.\n     ExprLoop(P<Block>, Option<Ident>),\n     ExprMatch(Gc<Expr>, Vec<Arm>),\n     ExprFnBlock(P<FnDecl>, P<Block>),\n@@ -468,9 +468,8 @@ pub enum Expr_ {\n     ExprField(Gc<Expr>, SpannedIdent, Vec<P<Ty>>),\n     ExprIndex(Gc<Expr>, Gc<Expr>),\n \n-    /// Expression that looks like a \"name\". For example,\n-    /// `std::slice::from_elem::<uint>` is an ExprPath that's the \"name\" part\n-    /// of a function call.\n+    /// Variable reference, possibly containing `::` and/or\n+    /// type parameters, e.g. foo::bar::<baz>\n     ExprPath(Path),\n \n     ExprAddrOf(Mutability, Gc<Expr>),\n@@ -643,6 +642,8 @@ pub struct TypeField {\n     pub span: Span,\n }\n \n+/// Represents a required method in a trait declaration,\n+/// one without a default implementation\n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash)]\n pub struct TypeMethod {\n     pub ident: Ident,\n@@ -656,6 +657,8 @@ pub struct TypeMethod {\n     pub vis: Visibility,\n }\n \n+/// Represents a method declaration in a trait declaration, possibly\n+/// including a default implementation\n // A trait method is either required (meaning it doesn't have an\n // implementation, just a signature) or provided (meaning it has a default\n // implementation).\n@@ -741,6 +744,7 @@ impl fmt::Show for Onceness {\n     }\n }\n \n+/// Represents the type of a closure\n #[deriving(PartialEq, Eq, Encodable, Decodable, Hash)]\n pub struct ClosureTy {\n     pub lifetimes: Vec<Lifetime>,\n@@ -809,6 +813,7 @@ pub struct InlineAsm {\n     pub dialect: AsmDialect\n }\n \n+/// represents an argument in a function header\n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash)]\n pub struct Arg {\n     pub ty: P<Ty>,\n@@ -836,7 +841,7 @@ impl Arg {\n     }\n }\n \n-// represents the header (not the body) of a function declaration\n+/// represents the header (not the body) of a function declaration\n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash)]\n pub struct FnDecl {\n     pub inputs: Vec<Arg>,\n@@ -1107,6 +1112,7 @@ pub enum Item_ {\n     ItemTy(P<Ty>, Generics),\n     ItemEnum(EnumDef, Generics),\n     ItemStruct(Gc<StructDef>, Generics),\n+    /// Represents a Trait Declaration\n     ItemTrait(Generics, Sized, Vec<TraitRef> , Vec<TraitMethod> ),\n     ItemImpl(Generics,\n              Option<TraitRef>, // (optional) trait this impl implements"}, {"sha": "a4d32a1c020545c31fb4ee07b6434cbde107dea1", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 15, "deletions": 19, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f126eacd115415b0814ceb4a1c71380a0b2eb752/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f126eacd115415b0814ceb4a1c71380a0b2eb752/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=f126eacd115415b0814ceb4a1c71380a0b2eb752", "patch": "@@ -267,7 +267,8 @@ fn expand_loop_block(loop_block: P<Block>,\n     }\n }\n \n-// eval $e with a new exts frame:\n+// eval $e with a new exts frame.\n+// must be a macro so that $e isn't evaluated too early.\n macro_rules! with_exts_frame (\n     ($extsboxexpr:expr,$macros_escape:expr,$e:expr) =>\n     ({$extsboxexpr.push_frame();\n@@ -609,7 +610,7 @@ fn expand_non_macro_stmt(s: &Stmt, fld: &mut MacroExpander)\n                     } = **local;\n                     // expand the pat (it might contain macro uses):\n                     let expanded_pat = fld.fold_pat(pat);\n-                    // find the pat_idents in the pattern:\n+                    // find the PatIdents in the pattern:\n                     // oh dear heaven... this is going to include the enum\n                     // names, as well... but that should be okay, as long as\n                     // the new names are gensyms for the old ones.\n@@ -691,39 +692,34 @@ fn expand_arm(arm: &ast::Arm, fld: &mut MacroExpander) -> ast::Arm {\n \n \n \n-// a visitor that extracts the pat_ident (binding) paths\n-// from a given thingy and puts them in a mutable\n-// array\n+/// A visitor that extracts the PatIdent (binding) paths\n+/// from a given thingy and puts them in a mutable\n+/// array\n #[deriving(Clone)]\n-struct NameFinderContext {\n+struct PatIdentFinder {\n     ident_accumulator: Vec<ast::Ident> ,\n }\n \n-impl Visitor<()> for NameFinderContext {\n+impl Visitor<()> for PatIdentFinder {\n     fn visit_pat(&mut self, pattern: &ast::Pat, _: ()) {\n         match *pattern {\n-            // we found a pat_ident!\n-            ast::Pat {\n-                id: _,\n-                node: ast::PatIdent(_, ref path1, ref inner),\n-                span: _\n-            } => {\n+            ast::Pat { id: _, node: ast::PatIdent(_, ref path1, ref inner), span: _ } => {\n                 self.ident_accumulator.push(path1.node);\n-                // visit optional subpattern of pat_ident:\n+                // visit optional subpattern of PatIdent:\n                 for subpat in inner.iter() {\n                     self.visit_pat(&**subpat, ())\n                 }\n             }\n-            // use the default traversal for non-pat_idents\n+            // use the default traversal for non-PatIdents\n             _ => visit::walk_pat(self, pattern, ())\n         }\n     }\n \n }\n \n-// find the pat_ident paths in a pattern\n+/// find the PatIdent paths in a pattern\n fn pattern_bindings(pat : &ast::Pat) -> Vec<ast::Ident> {\n-    let mut name_finder = NameFinderContext{ident_accumulator:Vec::new()};\n+    let mut name_finder = PatIdentFinder{ident_accumulator:Vec::new()};\n     name_finder.visit_pat(pat,());\n     name_finder.ident_accumulator\n }\n@@ -1028,7 +1024,7 @@ fn original_span(cx: &ExtCtxt) -> Gc<codemap::ExpnInfo> {\n #[cfg(test)]\n mod test {\n     use super::{pattern_bindings, expand_crate, contains_macro_escape};\n-    use super::{NameFinderContext};\n+    use super::{PatIdentFinder};\n     use ast;\n     use ast::{Attribute_, AttrOuter, MetaWord};\n     use attr;\n@@ -1167,7 +1163,7 @@ mod test {\n \n     // find the pat_ident paths in a crate\n     fn crate_bindings(the_crate : &ast::Crate) -> Vec<ast::Ident> {\n-        let mut name_finder = NameFinderContext{ident_accumulator:Vec::new()};\n+        let mut name_finder = PatIdentFinder{ident_accumulator:Vec::new()};\n         visit::walk_crate(&mut name_finder, the_crate, ());\n         name_finder.ident_accumulator\n     }"}]}