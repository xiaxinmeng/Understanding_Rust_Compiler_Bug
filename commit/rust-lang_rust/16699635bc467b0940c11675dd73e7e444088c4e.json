{"sha": "16699635bc467b0940c11675dd73e7e444088c4e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2Njk5NjM1YmM0NjdiMDk0MGMxMTY3NWRkNzNlN2U0NDQwODhjNGU=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-07-24T14:52:28Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-07-24T14:52:28Z"}, "message": "Add DirEntry doc examples", "tree": {"sha": "cf7487d64feb022463f0bbb532763e9bd1934d8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf7487d64feb022463f0bbb532763e9bd1934d8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16699635bc467b0940c11675dd73e7e444088c4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16699635bc467b0940c11675dd73e7e444088c4e", "html_url": "https://github.com/rust-lang/rust/commit/16699635bc467b0940c11675dd73e7e444088c4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16699635bc467b0940c11675dd73e7e444088c4e/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dad29a6d03429874ddf5ce6f53045bae2e0d6fac", "url": "https://api.github.com/repos/rust-lang/rust/commits/dad29a6d03429874ddf5ce6f53045bae2e0d6fac", "html_url": "https://github.com/rust-lang/rust/commit/dad29a6d03429874ddf5ce6f53045bae2e0d6fac"}], "stats": {"total": 71, "additions": 71, "deletions": 0}, "files": [{"sha": "6547cb6acbe4437ab4de683246cd5095b03e0df2", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/16699635bc467b0940c11675dd73e7e444088c4e/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16699635bc467b0940c11675dd73e7e444088c4e/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=16699635bc467b0940c11675dd73e7e444088c4e", "patch": "@@ -846,6 +846,26 @@ impl DirEntry {\n     /// On Windows this function is cheap to call (no extra system calls\n     /// needed), but on Unix platforms this function is the equivalent of\n     /// calling `symlink_metadata` on the path.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs;\n+    ///\n+    /// if let Ok(entries) = fs::read_dir(\".\") {\n+    ///     for entry in entries {\n+    ///         if let Ok(entry) = entry {\n+    ///             // Here, `entry` is a `DirEntry`.\n+    ///             if let Ok(metadata) = entry.metadata() {\n+    ///                 // Now let's show our entry's permissions!\n+    ///                 println!(\"{:?}: {:?}\", entry.path(), metadata.permissions());\n+    ///             } else {\n+    ///                 println!(\"Couldn't get metadata for {:?}\", entry.path());\n+    ///             }\n+    ///         }\n+    ///     }\n+    /// }\n+    /// ```\n     #[stable(feature = \"dir_entry_ext\", since = \"1.1.0\")]\n     pub fn metadata(&self) -> io::Result<Metadata> {\n         self.0.metadata().map(Metadata)\n@@ -861,13 +881,48 @@ impl DirEntry {\n     /// On Windows and most Unix platforms this function is free (no extra\n     /// system calls needed), but some Unix platforms may require the equivalent\n     /// call to `symlink_metadata` to learn about the target file type.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs;\n+    ///\n+    /// if let Ok(entries) = fs::read_dir(\".\") {\n+    ///     for entry in entries {\n+    ///         if let Ok(entry) = entry {\n+    ///             // Here, `entry` is a `DirEntry`.\n+    ///             if let Ok(file_type) = entry.file_type() {\n+    ///                 // Now let's show our entry's file type!\n+    ///                 println!(\"{:?}: {:?}\", entry.path(), file_type);\n+    ///             } else {\n+    ///                 println!(\"Couldn't get file type for {:?}\", entry.path());\n+    ///             }\n+    ///         }\n+    ///     }\n+    /// }\n+    /// ```\n     #[stable(feature = \"dir_entry_ext\", since = \"1.1.0\")]\n     pub fn file_type(&self) -> io::Result<FileType> {\n         self.0.file_type().map(FileType)\n     }\n \n     /// Returns the bare file name of this directory entry without any other\n     /// leading path component.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs;\n+    ///\n+    /// if let Ok(entries) = fs::read_dir(\".\") {\n+    ///     for entry in entries {\n+    ///         if let Ok(entry) = entry {\n+    ///             // Here, `entry` is a `DirEntry`.\n+    ///             println!(\"{:?}\", entry.file_name());\n+    ///         }\n+    ///     }\n+    /// }\n+    /// ```\n     #[stable(feature = \"dir_entry_ext\", since = \"1.1.0\")]\n     pub fn file_name(&self) -> OsString {\n         self.0.file_name()"}, {"sha": "17c093e6cac6876d3eedf834ef6c8b6e2d521d27", "filename": "src/libstd/sys/unix/ext/fs.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/16699635bc467b0940c11675dd73e7e444088c4e/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16699635bc467b0940c11675dd73e7e444088c4e/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs?ref=16699635bc467b0940c11675dd73e7e444088c4e", "patch": "@@ -196,6 +196,22 @@ impl FileTypeExt for fs::FileType {\n pub trait DirEntryExt {\n     /// Returns the underlying `d_ino` field in the contained `dirent`\n     /// structure.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs;\n+    /// use std::os::unix::fs::DirEntryExt;\n+    ///\n+    /// if let Ok(entries) = fs::read_dir(\".\") {\n+    ///     for entry in entries {\n+    ///         if let Ok(entry) = entry {\n+    ///             // Here, `entry` is a `DirEntry`.\n+    ///             println!(\"{:?}: {}\", entry.file_name(), entry.ino());\n+    ///         }\n+    ///     }\n+    /// }\n+    /// ```\n     #[stable(feature = \"dir_entry_ext\", since = \"1.1.0\")]\n     fn ino(&self) -> u64;\n }"}]}