{"sha": "1b9b13b4b4a75b5531c3f046ce6bf72d681f2732", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiOWIxM2I0YjRhNzViNTUzMWMzZjA0NmNlNmJmNzJkNjgxZjI3MzI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-02-09T15:32:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-09T15:32:39Z"}, "message": "Merge #3068\n\n3068: Do not import anything if first segment of the qualified path resolves r=matklad a=SomeoneToIgnore\n\nPart of initial https://github.com/rust-analyzer/rust-analyzer/pull/3061, closing 2nd issue mentioned in the last comment there.\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>", "tree": {"sha": "4eb84e8454bd43c1e9c8931d4d0942c2512c02d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4eb84e8454bd43c1e9c8931d4d0942c2512c02d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b9b13b4b4a75b5531c3f046ce6bf72d681f2732", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeQCYXCRBK7hj4Ov3rIwAAdHIIAIF2JD2KqWhxoJzTXcMa3WJj\nFENo6wFc5e33cgurAuwPkYnZkOplBUZPzZCpSSC6horVlZeALwkCw3s37sBZBwqL\nOUMnILD1/VYQeIAiFou1XoP6/lSWfB5ZPy+yVulb3EFoAOc/aNkinoHLhER6ktiJ\n+jhfsmC3qNVaXtfJymNYiYHh9ztNfG8cUbbN5vqReHzFeQ3YL1el937e/bIn9+UP\nqAtH/BS393xgYgGWwIyCcinUKO95Iff0EZpULZiEhaw6Xaqd0/2NKMaNwvLvlE8j\nRBoCeZl5FnPg4UUTpXM1DCpQKePXWLzg0/tmANbHINzzwq2WLVFlgFBhJBL5PL8=\n=VH06\n-----END PGP SIGNATURE-----\n", "payload": "tree 4eb84e8454bd43c1e9c8931d4d0942c2512c02d0\nparent 360890fcec3af854c4848ba7ed3511b4bae2ff5e\nparent d39d4016121d19c77e3d8c417a5bcc58a3b06530\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1581262359 +0000\ncommitter GitHub <noreply@github.com> 1581262359 +0000\n\nMerge #3068\n\n3068: Do not import anything if first segment of the qualified path resolves r=matklad a=SomeoneToIgnore\n\nPart of initial https://github.com/rust-analyzer/rust-analyzer/pull/3061, closing 2nd issue mentioned in the last comment there.\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b9b13b4b4a75b5531c3f046ce6bf72d681f2732", "html_url": "https://github.com/rust-lang/rust/commit/1b9b13b4b4a75b5531c3f046ce6bf72d681f2732", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b9b13b4b4a75b5531c3f046ce6bf72d681f2732/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "360890fcec3af854c4848ba7ed3511b4bae2ff5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/360890fcec3af854c4848ba7ed3511b4bae2ff5e", "html_url": "https://github.com/rust-lang/rust/commit/360890fcec3af854c4848ba7ed3511b4bae2ff5e"}, {"sha": "d39d4016121d19c77e3d8c417a5bcc58a3b06530", "url": "https://api.github.com/repos/rust-lang/rust/commits/d39d4016121d19c77e3d8c417a5bcc58a3b06530", "html_url": "https://github.com/rust-lang/rust/commit/d39d4016121d19c77e3d8c417a5bcc58a3b06530"}], "stats": {"total": 50, "additions": 37, "deletions": 13}, "files": [{"sha": "1fb701da5f7f90ba4b8122406a6a096c40cd74d8", "filename": "crates/ra_assists/src/handlers/auto_import.rs", "status": "modified", "additions": 37, "deletions": 13, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/1b9b13b4b4a75b5531c3f046ce6bf72d681f2732/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b9b13b4b4a75b5531c3f046ce6bf72d681f2732/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs?ref=1b9b13b4b4a75b5531c3f046ce6bf72d681f2732", "patch": "@@ -27,31 +27,34 @@ use std::collections::BTreeSet;\n // # pub mod std { pub mod collections { pub struct HashMap { } } }\n // ```\n pub(crate) fn auto_import(ctx: AssistCtx) -> Option<Assist> {\n-    let path_to_import: ast::Path = ctx.find_node_at_offset()?;\n-    let path_to_import_syntax = path_to_import.syntax();\n-    if path_to_import_syntax.ancestors().find_map(ast::UseItem::cast).is_some() {\n+    let path_under_caret: ast::Path = ctx.find_node_at_offset()?;\n+    if path_under_caret.syntax().ancestors().find_map(ast::UseItem::cast).is_some() {\n         return None;\n     }\n-    let name_to_import =\n-        path_to_import_syntax.descendants().find_map(ast::NameRef::cast)?.syntax().to_string();\n \n-    let module = path_to_import_syntax.ancestors().find_map(ast::Module::cast);\n+    let module = path_under_caret.syntax().ancestors().find_map(ast::Module::cast);\n     let position = match module.and_then(|it| it.item_list()) {\n         Some(item_list) => item_list.syntax().clone(),\n         None => {\n-            let current_file = path_to_import_syntax.ancestors().find_map(ast::SourceFile::cast)?;\n+            let current_file =\n+                path_under_caret.syntax().ancestors().find_map(ast::SourceFile::cast)?;\n             current_file.syntax().clone()\n         }\n     };\n     let source_analyzer = ctx.source_analyzer(&position, None);\n     let module_with_name_to_import = source_analyzer.module()?;\n-    if source_analyzer.resolve_path(ctx.db, &path_to_import).is_some() {\n+\n+    let name_ref_to_import =\n+        path_under_caret.syntax().descendants().find_map(ast::NameRef::cast)?;\n+    if source_analyzer\n+        .resolve_path(ctx.db, &name_ref_to_import.syntax().ancestors().find_map(ast::Path::cast)?)\n+        .is_some()\n+    {\n         return None;\n     }\n \n-    let mut imports_locator = ImportsLocator::new(ctx.db);\n-\n-    let proposed_imports = imports_locator\n+    let name_to_import = name_ref_to_import.syntax().to_string();\n+    let proposed_imports = ImportsLocator::new(ctx.db)\n         .find_imports(&name_to_import)\n         .into_iter()\n         .filter_map(|module_def| module_with_name_to_import.find_use_path(ctx.db, module_def))\n@@ -66,10 +69,10 @@ pub(crate) fn auto_import(ctx: AssistCtx) -> Option<Assist> {\n     let mut group = ctx.add_assist_group(format!(\"Import {}\", name_to_import));\n     for import in proposed_imports {\n         group.add_assist(AssistId(\"auto_import\"), format!(\"Import `{}`\", &import), |edit| {\n-            edit.target(path_to_import_syntax.text_range());\n+            edit.target(path_under_caret.syntax().text_range());\n             insert_use_statement(\n                 &position,\n-                path_to_import_syntax,\n+                path_under_caret.syntax(),\n                 &import,\n                 edit.text_edit_builder(),\n             );\n@@ -266,4 +269,25 @@ mod tests {\n             \"GroupLabel\",\n         )\n     }\n+\n+    #[test]\n+    fn not_applicable_when_path_start_is_imported() {\n+        check_assist_not_applicable(\n+            auto_import,\n+            r\"\n+            pub mod mod1 {\n+                pub mod mod2 {\n+                    pub mod mod3 {\n+                        pub struct TestStruct;\n+                    }\n+                }\n+            }\n+\n+            use mod1::mod2;\n+            fn main() {\n+                mod2::mod3::TestStruct<|>\n+            }\n+            \",\n+        );\n+    }\n }"}]}