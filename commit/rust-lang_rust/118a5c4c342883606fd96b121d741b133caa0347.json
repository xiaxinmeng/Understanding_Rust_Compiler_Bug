{"sha": "118a5c4c342883606fd96b121d741b133caa0347", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExOGE1YzRjMzQyODgzNjA2ZmQ5NmIxMjFkNzQxYjEzM2NhYTAzNDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-21T00:03:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-21T00:03:37Z"}, "message": "Auto merge of #27129 - arthurprs:debug_atomic, r=alexcrichton\n\nI'm being constantly bitten by the lack of this implementation.\r\n\r\nI'm unsure if there's a reason to avoid these implementations though.\r\n\r\nSince we have a \"lossy\" implementation for both Mutex and RWLock (RWLock {{ locked }}) I don't think there's a big reason for not having a Debug implementation for the atomic types, even if the user can't specify the ordering.", "tree": {"sha": "6fc6a2c1cc22df2213444275ebe77a52f08fcfba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6fc6a2c1cc22df2213444275ebe77a52f08fcfba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/118a5c4c342883606fd96b121d741b133caa0347", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/118a5c4c342883606fd96b121d741b133caa0347", "html_url": "https://github.com/rust-lang/rust/commit/118a5c4c342883606fd96b121d741b133caa0347", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/118a5c4c342883606fd96b121d741b133caa0347/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed49bad0ccb0e9ee7e5ebea69d72a98bed08f77f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed49bad0ccb0e9ee7e5ebea69d72a98bed08f77f", "html_url": "https://github.com/rust-lang/rust/commit/ed49bad0ccb0e9ee7e5ebea69d72a98bed08f77f"}, {"sha": "225ad1752039f6c48189e8e30d4824de691761da", "url": "https://api.github.com/repos/rust-lang/rust/commits/225ad1752039f6c48189e8e30d4824de691761da", "html_url": "https://github.com/rust-lang/rust/commit/225ad1752039f6c48189e8e30d4824de691761da"}], "stats": {"total": 21, "additions": 21, "deletions": 0}, "files": [{"sha": "c6434e71957ae261ea717463d592e2ead0ad8375", "filename": "src/libcore/atomic.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/118a5c4c342883606fd96b121d741b133caa0347/src%2Flibcore%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/118a5c4c342883606fd96b121d741b133caa0347/src%2Flibcore%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fatomic.rs?ref=118a5c4c342883606fd96b121d741b133caa0347", "patch": "@@ -78,6 +78,7 @@ use intrinsics;\n use cell::UnsafeCell;\n \n use default::Default;\n+use fmt;\n \n /// A boolean type which can be safely shared between threads.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1089,3 +1090,23 @@ pub fn fence(order: Ordering) {\n         }\n     }\n }\n+\n+macro_rules! impl_Debug {\n+    ($($t:ident)*) => ($(\n+        #[stable(feature = \"atomic_debug\", since = \"1.3.0\")]\n+        impl fmt::Debug for $t {\n+            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+                f.debug_tuple(stringify!($t)).field(&self.load(Ordering::SeqCst)).finish()\n+            }\n+        }\n+    )*);\n+}\n+\n+impl_Debug!{ AtomicUsize AtomicIsize AtomicBool }\n+\n+#[stable(feature = \"atomic_debug\", since = \"1.3.0\")]\n+impl<T> fmt::Debug for AtomicPtr<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"AtomicPtr\").field(&self.load(Ordering::SeqCst)).finish()\n+    }\n+}"}]}