{"sha": "3973d1aaa75b684d2ebd3a77ca6a0845928954a6", "node_id": "C_kwDOAAsO6NoAKDM5NzNkMWFhYTc1YjY4NGQyZWJkM2E3N2NhNmEwODQ1OTI4OTU0YTY", "commit": {"author": {"name": "Mathew Horner", "email": "mathewhorner456@gmail.com", "date": "2022-10-22T21:49:37Z"}, "committer": {"name": "Jonas Platte", "email": "jplatte@matrix.org", "date": "2023-03-31T10:16:49Z"}, "message": "Add assist to convert nested function to closure", "tree": {"sha": "f1317869b36048a7137b0a9b520a9ea9f1b1c1d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1317869b36048a7137b0a9b520a9ea9f1b1c1d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3973d1aaa75b684d2ebd3a77ca6a0845928954a6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niIkEABYIADEWIQSXh9PzuU+wqFLlTaCqp6YfaWw+DAUCZCazFxMcanBsYXR0ZUBt\nYXRyaXgub3JnAAoJEKqnph9pbD4MGBMBAIr9xNqkKjIARHJNJXVEA9fKPPo1kyWp\nBqw9lR7eGbAmAQDEoKSB4I9grPoIQLG5CtusHvSxBQ3JaKciwYkgjjyPAg==\n=0YaW\n-----END PGP SIGNATURE-----", "payload": "tree f1317869b36048a7137b0a9b520a9ea9f1b1c1d0\nparent 42d671fcb7173f1bdb4e785d732e6fb31b5bea0b\nauthor Mathew Horner <mathewhorner456@gmail.com> 1666475377 -0500\ncommitter Jonas Platte <jplatte@matrix.org> 1680257809 +0200\n\nAdd assist to convert nested function to closure\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3973d1aaa75b684d2ebd3a77ca6a0845928954a6", "html_url": "https://github.com/rust-lang/rust/commit/3973d1aaa75b684d2ebd3a77ca6a0845928954a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3973d1aaa75b684d2ebd3a77ca6a0845928954a6/comments", "author": {"login": "mdx97", "id": 33100798, "node_id": "MDQ6VXNlcjMzMTAwNzk4", "avatar_url": "https://avatars.githubusercontent.com/u/33100798?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdx97", "html_url": "https://github.com/mdx97", "followers_url": "https://api.github.com/users/mdx97/followers", "following_url": "https://api.github.com/users/mdx97/following{/other_user}", "gists_url": "https://api.github.com/users/mdx97/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdx97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdx97/subscriptions", "organizations_url": "https://api.github.com/users/mdx97/orgs", "repos_url": "https://api.github.com/users/mdx97/repos", "events_url": "https://api.github.com/users/mdx97/events{/privacy}", "received_events_url": "https://api.github.com/users/mdx97/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jplatte", "id": 951129, "node_id": "MDQ6VXNlcjk1MTEyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/951129?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jplatte", "html_url": "https://github.com/jplatte", "followers_url": "https://api.github.com/users/jplatte/followers", "following_url": "https://api.github.com/users/jplatte/following{/other_user}", "gists_url": "https://api.github.com/users/jplatte/gists{/gist_id}", "starred_url": "https://api.github.com/users/jplatte/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jplatte/subscriptions", "organizations_url": "https://api.github.com/users/jplatte/orgs", "repos_url": "https://api.github.com/users/jplatte/repos", "events_url": "https://api.github.com/users/jplatte/events{/privacy}", "received_events_url": "https://api.github.com/users/jplatte/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42d671fcb7173f1bdb4e785d732e6fb31b5bea0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/42d671fcb7173f1bdb4e785d732e6fb31b5bea0b", "html_url": "https://github.com/rust-lang/rust/commit/42d671fcb7173f1bdb4e785d732e6fb31b5bea0b"}], "stats": {"total": 214, "additions": 213, "deletions": 1}, "files": [{"sha": "0524c27890f1a1e89396e744fdba157fe2c4c522", "filename": "crates/ide-assists/src/handlers/convert_nested_function_to_closure.rs", "status": "added", "additions": 185, "deletions": 0, "changes": 185, "blob_url": "https://github.com/rust-lang/rust/blob/3973d1aaa75b684d2ebd3a77ca6a0845928954a6/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fconvert_nested_function_to_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3973d1aaa75b684d2ebd3a77ca6a0845928954a6/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fconvert_nested_function_to_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fconvert_nested_function_to_closure.rs?ref=3973d1aaa75b684d2ebd3a77ca6a0845928954a6", "patch": "@@ -0,0 +1,185 @@\n+use ide_db::assists::{AssistId, AssistKind};\n+use syntax::ast::{self, HasGenericParams, HasName};\n+use syntax::{AstNode, SyntaxKind};\n+\n+use crate::assist_context::{AssistContext, Assists};\n+\n+// Assist: convert_nested_function_to_closure\n+//\n+// Converts a function that is defined within the body of another function into a closure.\n+//\n+// ```\n+// fn main() {\n+//     fn fo$0o(label: &str, number: u64) {\n+//         println!(\"{}: {}\", label, number);\n+//     }\n+//\n+//     foo(\"Bar\", 100);\n+// }\n+// ```\n+// ->\n+// ```\n+// fn main() {\n+//     let foo = |label: &str, number: u64| {\n+//         println!(\"{}: {}\", label, number);\n+//     };\n+//\n+//     foo(\"Bar\", 100);\n+// }\n+// ```\n+pub(crate) fn convert_nested_function_to_closure(\n+    acc: &mut Assists,\n+    ctx: &AssistContext<'_>,\n+) -> Option<()> {\n+    let name = ctx.find_node_at_offset::<ast::Name>()?;\n+    let function = name.syntax().parent().and_then(ast::Fn::cast)?;\n+\n+    if !is_nested_function(&function) || is_generic(&function) {\n+        return None;\n+    }\n+\n+    let target = function.syntax().text_range();\n+    let body = function.body()?;\n+    let name = function.name()?;\n+    let params = function.param_list()?;\n+\n+    acc.add(\n+        AssistId(\"convert_nested_function_to_closure\", AssistKind::RefactorRewrite),\n+        \"Convert nested function to closure\",\n+        target,\n+        |edit| {\n+            let has_semicolon = has_semicolon(&function);\n+            let params_text = params.syntax().text().to_string();\n+            let params_text_trimmed =\n+                params_text.strip_prefix(\"(\").and_then(|p| p.strip_suffix(\")\"));\n+\n+            if let Some(closure_params) = params_text_trimmed {\n+                let body = body.to_string();\n+                let body = if has_semicolon { body } else { format!(\"{};\", body) };\n+                edit.replace(target, format!(\"let {} = |{}| {}\", name, closure_params, body));\n+            }\n+        },\n+    )\n+}\n+\n+/// Returns whether the given function is nested within the body of another function.\n+fn is_nested_function(function: &ast::Fn) -> bool {\n+    function\n+        .syntax()\n+        .parent()\n+        .map(|p| p.ancestors().any(|a| a.kind() == SyntaxKind::FN))\n+        .unwrap_or(false)\n+}\n+\n+/// Returns whether the given nested function has generic parameters.\n+fn is_generic(function: &ast::Fn) -> bool {\n+    function.generic_param_list().is_some()\n+}\n+\n+/// Returns whether the given nested function has a trailing semicolon.\n+fn has_semicolon(function: &ast::Fn) -> bool {\n+    function\n+        .syntax()\n+        .next_sibling_or_token()\n+        .map(|t| t.kind() == SyntaxKind::SEMICOLON)\n+        .unwrap_or(false)\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n+\n+    use super::convert_nested_function_to_closure;\n+\n+    #[test]\n+    fn convert_nested_function_to_closure_works() {\n+        check_assist(\n+            convert_nested_function_to_closure,\n+            r#\"\n+fn main() {\n+    fn $0foo(a: u64, b: u64) -> u64 {\n+        2 * (a + b)\n+    }\n+\n+    _ = foo(3, 4);\n+}\n+            \"#,\n+            r#\"\n+fn main() {\n+    let foo = |a: u64, b: u64| {\n+        2 * (a + b)\n+    };\n+\n+    _ = foo(3, 4);\n+}\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn convert_nested_function_to_closure_works_with_existing_semicolon() {\n+        check_assist(\n+            convert_nested_function_to_closure,\n+            r#\"\n+fn main() {\n+    fn foo$0(a: u64, b: u64) -> u64 {\n+        2 * (a + b)\n+    };\n+\n+    _ = foo(3, 4);\n+}\n+            \"#,\n+            r#\"\n+fn main() {\n+    let foo = |a: u64, b: u64| {\n+        2 * (a + b)\n+    };\n+\n+    _ = foo(3, 4);\n+}\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn convert_nested_function_to_closure_does_not_work_on_top_level_function() {\n+        check_assist_not_applicable(\n+            convert_nested_function_to_closure,\n+            r#\"\n+fn ma$0in() {}\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn convert_nested_function_to_closure_does_not_work_when_cursor_off_name() {\n+        check_assist_not_applicable(\n+            convert_nested_function_to_closure,\n+            r#\"\n+fn main() {\n+    fn foo(a: u64, $0b: u64) -> u64 {\n+        2 * (a + b)\n+    };\n+\n+    _ = foo(3, 4);\n+}\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn convert_nested_function_to_closure_does_not_work_if_function_has_generic_params() {\n+        check_assist_not_applicable(\n+            convert_nested_function_to_closure,\n+            r#\"\n+fn main() {\n+    fn fo$0o<S: Into<String>>(s: S) -> String {\n+        s.into()\n+    };\n+\n+    _ = foo(\"hello\");\n+}\n+            \"#,\n+        );\n+    }\n+}"}, {"sha": "fc03903e593fc8fcd739b0f2459b599f0b5d5895", "filename": "crates/ide-assists/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3973d1aaa75b684d2ebd3a77ca6a0845928954a6/crates%2Fide-assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3973d1aaa75b684d2ebd3a77ca6a0845928954a6/crates%2Fide-assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Flib.rs?ref=3973d1aaa75b684d2ebd3a77ca6a0845928954a6", "patch": "@@ -122,6 +122,7 @@ mod handlers {\n     mod convert_iter_for_each_to_for;\n     mod convert_let_else_to_match;\n     mod convert_match_to_let_else;\n+    mod convert_nested_function_to_closure;\n     mod convert_tuple_struct_to_named_struct;\n     mod convert_named_struct_to_tuple_struct;\n     mod convert_to_guarded_return;\n@@ -228,8 +229,9 @@ mod handlers {\n             convert_iter_for_each_to_for::convert_iter_for_each_to_for,\n             convert_iter_for_each_to_for::convert_for_loop_with_for_each,\n             convert_let_else_to_match::convert_let_else_to_match,\n-            convert_named_struct_to_tuple_struct::convert_named_struct_to_tuple_struct,\n             convert_match_to_let_else::convert_match_to_let_else,\n+            convert_named_struct_to_tuple_struct::convert_named_struct_to_tuple_struct,\n+            convert_nested_function_to_closure::convert_nested_function_to_closure,\n             convert_to_guarded_return::convert_to_guarded_return,\n             convert_tuple_struct_to_named_struct::convert_tuple_struct_to_named_struct,\n             convert_two_arm_bool_match_to_matches_macro::convert_two_arm_bool_match_to_matches_macro,"}, {"sha": "993e7c371f033b53119f1c86fbfc2990e96030f0", "filename": "crates/ide-assists/src/tests/generated.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3973d1aaa75b684d2ebd3a77ca6a0845928954a6/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3973d1aaa75b684d2ebd3a77ca6a0845928954a6/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=3973d1aaa75b684d2ebd3a77ca6a0845928954a6", "patch": "@@ -494,6 +494,31 @@ impl Point {\n     )\n }\n \n+#[test]\n+fn doctest_convert_nested_function_to_closure() {\n+    check_doc_test(\n+        \"convert_nested_function_to_closure\",\n+        r#####\"\n+fn main() {\n+    fn fo$0o(label: &str, number: u64) {\n+        println!(\"{}: {}\", label, number);\n+    }\n+\n+    foo(\"Bar\", 100);\n+}\n+\"#####,\n+        r#####\"\n+fn main() {\n+    let foo = |label: &str, number: u64| {\n+        println!(\"{}: {}\", label, number);\n+    };\n+\n+    foo(\"Bar\", 100);\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_convert_to_guarded_return() {\n     check_doc_test("}]}