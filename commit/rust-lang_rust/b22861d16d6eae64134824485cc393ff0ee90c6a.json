{"sha": "b22861d16d6eae64134824485cc393ff0ee90c6a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyMjg2MWQxNmQ2ZWFlNjQxMzQ4MjQ0ODVjYzM5M2ZmMGVlOTBjNmE=", "commit": {"author": {"name": "Flaper Fesp", "email": "flaper87@gmail.com", "date": "2013-08-30T18:52:19Z"}, "committer": {"name": "Flaper Fesp", "email": "flaper87@gmail.com", "date": "2013-09-03T23:12:23Z"}, "message": "Rename MutexArc access methods to unsafe_access", "tree": {"sha": "31ba5e3b887c2e0ca4fcac19598d2f58ab20504c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31ba5e3b887c2e0ca4fcac19598d2f58ab20504c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b22861d16d6eae64134824485cc393ff0ee90c6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b22861d16d6eae64134824485cc393ff0ee90c6a", "html_url": "https://github.com/rust-lang/rust/commit/b22861d16d6eae64134824485cc393ff0ee90c6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b22861d16d6eae64134824485cc393ff0ee90c6a/comments", "author": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c4e943881fc93136c4b6ad80f23aead9fee9d1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c4e943881fc93136c4b6ad80f23aead9fee9d1b", "html_url": "https://github.com/rust-lang/rust/commit/3c4e943881fc93136c4b6ad80f23aead9fee9d1b"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "1021722d85edf561ee2476baaa57a9afaa1a7789", "filename": "src/libextra/arc.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b22861d16d6eae64134824485cc393ff0ee90c6a/src%2Flibextra%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22861d16d6eae64134824485cc393ff0ee90c6a/src%2Flibextra%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farc.rs?ref=b22861d16d6eae64134824485cc393ff0ee90c6a", "patch": "@@ -214,7 +214,7 @@ impl<T:Send> MutexArc<T> {\n      * blocked on the mutex) will also fail immediately.\n      */\n     #[inline]\n-    pub unsafe fn access<U>(&self, blk: &fn(x: &mut T) -> U) -> U {\n+    pub unsafe fn unsafe_access<U>(&self, blk: &fn(x: &mut T) -> U) -> U {\n         let state = self.x.get();\n         // Borrowck would complain about this if the function were\n         // not already unsafe. See borrow_rwlock, far below.\n@@ -227,7 +227,7 @@ impl<T:Send> MutexArc<T> {\n \n     /// As access(), but with a condvar, as sync::mutex.lock_cond().\n     #[inline]\n-    pub unsafe fn access_cond<'x, 'c, U>(&self,\n+    pub unsafe fn unsafe_access_cond<'x, 'c, U>(&self,\n                                          blk: &fn(x: &'x mut T,\n                                                   c: &'c Condvar) -> U)\n                                          -> U {\n@@ -597,12 +597,12 @@ mod tests {\n             do task::spawn {\n                 // wait until parent gets in\n                 p.take().recv();\n-                do arc2.access_cond |state, cond| {\n+                do arc2.unsafe_access_cond |state, cond| {\n                     *state = true;\n                     cond.signal();\n                 }\n             }\n-            do arc.access_cond |state, cond| {\n+            do arc.unsafe_access_cond |state, cond| {\n                 c.take().send(());\n                 assert!(!*state);\n                 while !*state {\n@@ -621,14 +621,14 @@ mod tests {\n \n             do task::spawn_unlinked {\n                 let _ = p.recv();\n-                do arc2.access_cond |one, cond| {\n+                do arc2.unsafe_access_cond |one, cond| {\n                     cond.signal();\n                     // Parent should fail when it wakes up.\n                     assert_eq!(*one, 0);\n                 }\n             }\n \n-            do arc.access_cond |one, cond| {\n+            do arc.unsafe_access_cond |one, cond| {\n                 c.send(());\n                 while *one == 1 {\n                     cond.wait();\n@@ -642,11 +642,11 @@ mod tests {\n             let arc = MutexArc::new(1);\n             let arc2 = arc.clone();\n             do task::try {\n-                do arc2.access |one| {\n+                do arc2.unsafe_access |one| {\n                     assert_eq!(*one, 2);\n                 }\n             };\n-            do arc.access |one| {\n+            do arc.unsafe_access |one| {\n                 assert_eq!(*one, 1);\n             }\n         }\n@@ -658,7 +658,7 @@ mod tests {\n         let (p, c) = comm::stream();\n         do task::spawn {\n             unsafe {\n-                do arc2.access |one| {\n+                do arc2.unsafe_access |one| {\n                     c.send(());\n                     assert!(*one == 2);\n                 }"}]}