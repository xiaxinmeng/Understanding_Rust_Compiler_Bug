{"sha": "7e3344b17f777f5bca0d3eaa9278fa2d628ca064", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlMzM0NGIxN2Y3NzdmNWJjYTBkM2VhYTkyNzhmYTJkNjI4Y2EwNjQ=", "commit": {"author": {"name": "Vladimir Matveev", "email": "vladimir.matweev@gmail.com", "date": "2014-10-29T19:59:43Z"}, "committer": {"name": "Vladimir Matveev", "email": "vladimir.matweev@gmail.com", "date": "2014-11-05T09:01:23Z"}, "message": "Migrated io::net::udp over to ToSocketAddr\n\nUdpSocket constructor methods now use ToSocketAddr trait instead of\nSocketAddr.\n\n[breaking-change]", "tree": {"sha": "89bbab5cbe0ab28446f554cd77d637db8c1dadcc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89bbab5cbe0ab28446f554cd77d637db8c1dadcc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e3344b17f777f5bca0d3eaa9278fa2d628ca064", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e3344b17f777f5bca0d3eaa9278fa2d628ca064", "html_url": "https://github.com/rust-lang/rust/commit/7e3344b17f777f5bca0d3eaa9278fa2d628ca064", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e3344b17f777f5bca0d3eaa9278fa2d628ca064/comments", "author": {"login": "netvl", "id": 280456, "node_id": "MDQ6VXNlcjI4MDQ1Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/280456?v=4", "gravatar_id": "", "url": "https://api.github.com/users/netvl", "html_url": "https://github.com/netvl", "followers_url": "https://api.github.com/users/netvl/followers", "following_url": "https://api.github.com/users/netvl/following{/other_user}", "gists_url": "https://api.github.com/users/netvl/gists{/gist_id}", "starred_url": "https://api.github.com/users/netvl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/netvl/subscriptions", "organizations_url": "https://api.github.com/users/netvl/orgs", "repos_url": "https://api.github.com/users/netvl/repos", "events_url": "https://api.github.com/users/netvl/events{/privacy}", "received_events_url": "https://api.github.com/users/netvl/received_events", "type": "User", "site_admin": false}, "committer": {"login": "netvl", "id": 280456, "node_id": "MDQ6VXNlcjI4MDQ1Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/280456?v=4", "gravatar_id": "", "url": "https://api.github.com/users/netvl", "html_url": "https://github.com/netvl", "followers_url": "https://api.github.com/users/netvl/followers", "following_url": "https://api.github.com/users/netvl/following{/other_user}", "gists_url": "https://api.github.com/users/netvl/gists{/gist_id}", "starred_url": "https://api.github.com/users/netvl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/netvl/subscriptions", "organizations_url": "https://api.github.com/users/netvl/orgs", "repos_url": "https://api.github.com/users/netvl/repos", "events_url": "https://api.github.com/users/netvl/events{/privacy}", "received_events_url": "https://api.github.com/users/netvl/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac846749f0abbd0b6107406ba2f97886605e1ad4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac846749f0abbd0b6107406ba2f97886605e1ad4", "html_url": "https://github.com/rust-lang/rust/commit/ac846749f0abbd0b6107406ba2f97886605e1ad4"}], "stats": {"total": 54, "additions": 34, "deletions": 20}, "files": [{"sha": "61cefa6f2082123b7e40a71fcb69fc270af021b6", "filename": "src/libstd/io/net/mod.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7e3344b17f777f5bca0d3eaa9278fa2d628ca064/src%2Flibstd%2Fio%2Fnet%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e3344b17f777f5bca0d3eaa9278fa2d628ca064/src%2Flibstd%2Fio%2Fnet%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fmod.rs?ref=7e3344b17f777f5bca0d3eaa9278fa2d628ca064", "patch": "@@ -10,11 +10,11 @@\n \n //! Networking I/O\n \n-use io::{IoError, InvalidInput};\n+use io::{IoError, IoResult, InvalidInput};\n use option::None;\n use result::{Result, Ok, Err};\n use rt::rtio;\n-use self::ip::{Ipv4Addr, Ipv6Addr, IpAddr, ToSocketAddr};\n+use self::ip::{Ipv4Addr, Ipv6Addr, IpAddr, SocketAddr, ToSocketAddr};\n \n pub use self::addrinfo::get_host_addresses;\n \n@@ -42,7 +42,7 @@ fn from_rtio(ip: rtio::IpAddr) -> IpAddr {\n     }\n }\n \n-fn with_addresses<A: ToSocketAddr, T>(\n+fn with_addresses_io<A: ToSocketAddr, T>(\n     addr: A, \n     action: |&mut rtio::IoFactory, rtio::SocketAddr| -> Result<T, rtio::IoError>\n ) -> Result<T, IoError> {\n@@ -63,3 +63,22 @@ fn with_addresses<A: ToSocketAddr, T>(\n     }\n     Err(err)\n }\n+\n+fn with_addresses<A: ToSocketAddr, T>(addr: A, action: |SocketAddr| -> IoResult<T>)\n+    -> IoResult<T> {\n+    const DEFAULT_ERROR: IoError = IoError {\n+        kind: InvalidInput,\n+        desc: \"no addresses found for hostname\",\n+        detail: None\n+    };\n+\n+    let addresses = try!(addr.to_socket_addr_all());\n+    let mut err = DEFAULT_ERROR;\n+    for addr in addresses.into_iter() {\n+        match action(addr) {\n+            Ok(r) => return Ok(r),\n+            Err(e) => err = e\n+        }\n+    }\n+    Err(err)\n+}"}, {"sha": "ee5f56469adf66c01457e063e9a0b69944f44d90", "filename": "src/libstd/io/net/tcp.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e3344b17f777f5bca0d3eaa9278fa2d628ca064/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e3344b17f777f5bca0d3eaa9278fa2d628ca064/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs?ref=7e3344b17f777f5bca0d3eaa9278fa2d628ca064", "patch": "@@ -67,7 +67,7 @@ impl TcpStream {\n     /// trait can be supplied for the address; see this trait documentation for\n     /// concrete examples.\n     pub fn connect<A: ToSocketAddr>(addr: A) -> IoResult<TcpStream> {\n-        super::with_addresses(addr, |io, addr| io.tcp_connect(addr, None).map(TcpStream::new))\n+        super::with_addresses_io(addr, |io, addr| io.tcp_connect(addr, None).map(TcpStream::new))\n     }\n \n     /// Creates a TCP connection to a remote socket address, timing out after\n@@ -89,7 +89,7 @@ impl TcpStream {\n             return Err(standard_error(TimedOut));\n         }\n \n-        super::with_addresses(addr, |io, addr|\n+        super::with_addresses_io(addr, |io, addr|\n             io.tcp_connect(addr, Some(timeout.num_milliseconds() as u64)).map(TcpStream::new)\n         )\n     }\n@@ -324,7 +324,7 @@ impl TcpListener {\n     /// to this listener. The port allocated can be queried via the\n     /// `socket_name` function.\n     pub fn bind<A: ToSocketAddr>(addr: A) -> IoResult<TcpListener> {\n-        super::with_addresses(addr, |io, addr| io.tcp_bind(addr).map(|l| TcpListener { obj: l }))\n+        super::with_addresses_io(addr, |io, addr| io.tcp_bind(addr).map(|l| TcpListener { obj: l }))\n     }\n \n     /// Returns the local socket address of this listener."}, {"sha": "62eeba7cbd263998914a2d8da34cfa8a10345d36", "filename": "src/libstd/io/net/udp.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7e3344b17f777f5bca0d3eaa9278fa2d628ca064/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e3344b17f777f5bca0d3eaa9278fa2d628ca064/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fudp.rs?ref=7e3344b17f777f5bca0d3eaa9278fa2d628ca064", "patch": "@@ -16,7 +16,7 @@\n //! datagram protocol.\n \n use clone::Clone;\n-use io::net::ip::{SocketAddr, IpAddr};\n+use io::net::ip::{SocketAddr, IpAddr, ToSocketAddr};\n use io::{Reader, Writer, IoResult, IoError};\n use kinds::Send;\n use boxed::Box;\n@@ -65,18 +65,13 @@ pub struct UdpSocket {\n \n impl UdpSocket {\n     /// Creates a UDP socket from the given socket address.\n-    pub fn bind(addr: SocketAddr) -> IoResult<UdpSocket> {\n-        let SocketAddr { ip, port } = addr;\n-        LocalIo::maybe_raise(|io| {\n-            let addr = rtio::SocketAddr { ip: super::to_rtio(ip), port: port };\n-            io.udp_bind(addr).map(|s| UdpSocket { obj: s })\n-        }).map_err(IoError::from_rtio_error)\n+    pub fn bind<A: ToSocketAddr>(addr: A) -> IoResult<UdpSocket> {\n+        super::with_addresses_io(addr, |io, addr| io.udp_bind(addr).map(|s| UdpSocket { obj: s }))\n     }\n \n     /// Receives data from the socket. On success, returns the number of bytes\n     /// read and the address from whence the data came.\n-    pub fn recv_from(&mut self, buf: &mut [u8])\n-                    -> IoResult<(uint, SocketAddr)> {\n+    pub fn recv_from(&mut self, buf: &mut [u8]) -> IoResult<(uint, SocketAddr)> {\n         match self.obj.recv_from(buf) {\n             Ok((amt, rtio::SocketAddr { ip, port })) => {\n                 Ok((amt, SocketAddr { ip: super::from_rtio(ip), port: port }))\n@@ -87,11 +82,11 @@ impl UdpSocket {\n \n     /// Sends data on the socket to the given address. Returns nothing on\n     /// success.\n-    pub fn send_to(&mut self, buf: &[u8], dst: SocketAddr) -> IoResult<()> {\n-        self.obj.send_to(buf, rtio::SocketAddr {\n-            ip: super::to_rtio(dst.ip),\n-            port: dst.port,\n-        }).map_err(IoError::from_rtio_error)\n+    pub fn send_to<A: ToSocketAddr>(&mut self, buf: &[u8], addr: A) -> IoResult<()> {\n+        super::with_addresses(addr, |addr| self.obj.send_to(buf, rtio::SocketAddr {\n+            ip: super::to_rtio(addr.ip),\n+            port: addr.port,\n+        }).map_err(IoError::from_rtio_error))\n     }\n \n     /// Creates a `UdpStream`, which allows use of the `Reader` and `Writer`"}]}