{"sha": "ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "node_id": "C_kwDOAAsO6NoAKGFiMjFjZjJmNGYwOTgyN2ViM2EwYjIwZTAwOGYwMTk2YzA3NzM0ZTM", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-03-06T18:01:30Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-03-06T18:04:04Z"}, "message": "internal: Re-arrange ide_db modules", "tree": {"sha": "20058f3fd2ed43d9469eaed3e08bbab9f1a47575", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20058f3fd2ed43d9469eaed3e08bbab9f1a47575"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "html_url": "https://github.com/rust-lang/rust/commit/ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1f91c93b2b92301f4ac9d90fd7f22e9519bbd7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1f91c93b2b92301f4ac9d90fd7f22e9519bbd7b", "html_url": "https://github.com/rust-lang/rust/commit/c1f91c93b2b92301f4ac9d90fd7f22e9519bbd7b"}], "stats": {"total": 1346, "additions": 666, "deletions": 680}, "files": [{"sha": "14464426bfcb367922e6f3bf5867266a4cfd5669", "filename": "crates/ide/src/expand_macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide%2Fsrc%2Fexpand_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide%2Fsrc%2Fexpand_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fexpand_macro.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -1,6 +1,6 @@\n use hir::Semantics;\n use ide_db::{\n-    helpers::{insert_whitespace_into_node::insert_ws_into, pick_best_token},\n+    helpers::pick_best_token, syntax_helpers::insert_whitespace_into_node::insert_ws_into,\n     RootDatabase,\n };\n use syntax::{ast, ted, AstNode, NodeOrToken, SyntaxKind, SyntaxNode, T};"}, {"sha": "ba999524d6336b513c1d0822c78a32e2b9d2ed0e", "filename": "crates/ide/src/folding_ranges.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide%2Fsrc%2Ffolding_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide%2Fsrc%2Ffolding_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ffolding_ranges.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -1,4 +1,4 @@\n-use ide_db::helpers::node_ext::vis_eq;\n+use ide_db::syntax_helpers::node_ext::vis_eq;\n use rustc_hash::FxHashSet;\n \n use syntax::{"}, {"sha": "baa015354f810fedd7c35ca2578daecaa3c66482", "filename": "crates/ide/src/highlight_related.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide%2Fsrc%2Fhighlight_related.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide%2Fsrc%2Fhighlight_related.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhighlight_related.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -2,10 +2,9 @@ use hir::Semantics;\n use ide_db::{\n     base_db::{FileId, FilePosition},\n     defs::{Definition, IdentClass},\n-    helpers::{\n-        for_each_break_and_continue_expr, for_each_tail_expr, node_ext::walk_expr, pick_best_token,\n-    },\n+    helpers::pick_best_token,\n     search::{FileReference, ReferenceCategory, SearchScope},\n+    syntax_helpers::node_ext::{for_each_break_and_continue_expr, for_each_tail_expr, walk_expr},\n     RootDatabase,\n };\n use rustc_hash::FxHashSet;"}, {"sha": "4a762ad1f85c657360b6479abaecabc61c739362", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -10,7 +10,8 @@ use hir::{HasSource, Semantics};\n use ide_db::{\n     base_db::FileRange,\n     defs::{Definition, IdentClass},\n-    helpers::{pick_best_token, FamousDefs},\n+    famous_defs::FamousDefs,\n+    helpers::pick_best_token,\n     FxIndexSet, RootDatabase,\n };\n use itertools::Itertools;"}, {"sha": "c298065f4e08094e40b0805de05eb3fad9e5beec", "filename": "crates/ide/src/hover/render.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Frender.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -6,10 +6,8 @@ use hir::{AsAssocItem, AttributeTemplate, HasAttrs, HasSource, HirDisplay, Seman\n use ide_db::{\n     base_db::SourceDatabase,\n     defs::Definition,\n-    helpers::{\n-        generated_lints::{CLIPPY_LINTS, DEFAULT_LINTS, FEATURES},\n-        FamousDefs,\n-    },\n+    famous_defs::FamousDefs,\n+    generated::lints::{CLIPPY_LINTS, DEFAULT_LINTS, FEATURES},\n     RootDatabase,\n };\n use itertools::Itertools;"}, {"sha": "f77cae3e3cc8d55ae2af0b19c04082a7315c8d0a", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -1,6 +1,6 @@\n use either::Either;\n use hir::{known, Callable, HasVisibility, HirDisplay, Semantics, TypeInfo};\n-use ide_db::{base_db::FileRange, helpers::FamousDefs, RootDatabase};\n+use ide_db::{base_db::FileRange, famous_defs::FamousDefs, RootDatabase};\n use itertools::Itertools;\n use stdx::to_lower_snake_case;\n use syntax::{"}, {"sha": "00ff9ed31b825a1caaa30a42b335789d0c425f68", "filename": "crates/ide/src/join_lines.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide%2Fsrc%2Fjoin_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide%2Fsrc%2Fjoin_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fjoin_lines.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -1,5 +1,5 @@\n use ide_assists::utils::extract_trivial_expression;\n-use ide_db::helpers::node_ext::expr_as_name_ref;\n+use ide_db::syntax_helpers::node_ext::expr_as_name_ref;\n use itertools::Itertools;\n use syntax::{\n     ast::{self, AstNode, AstToken, IsString},"}, {"sha": "2d5f5f00e16e42112b5b35ee7c7b7a53a463f766", "filename": "crates/ide/src/syntax_highlighting/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fformat.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -1,6 +1,6 @@\n //! Syntax highlighting for format macro strings.\n use ide_db::{\n-    helpers::format_string::{is_format_string, lex_format_specifiers, FormatSpecifier},\n+    syntax_helpers::format_string::{is_format_string, lex_format_specifiers, FormatSpecifier},\n     SymbolKind,\n };\n use syntax::{ast, TextRange};"}, {"sha": "a5b4ef5029858b142d70b3b7915614921f4d5f7d", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -3,7 +3,7 @@\n use hir::{AsAssocItem, HasVisibility, Semantics};\n use ide_db::{\n     defs::{Definition, IdentClass, NameClass, NameRefClass},\n-    helpers::FamousDefs,\n+    famous_defs::FamousDefs,\n     RootDatabase, SymbolKind,\n };\n use rustc_hash::FxHashMap;"}, {"sha": "7ac1200a4a33e7c56f7377fdda2ce9a762aacb5e", "filename": "crates/ide/src/syntax_highlighting/inject.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -5,8 +5,7 @@ use std::mem;\n use either::Either;\n use hir::{InFile, Semantics};\n use ide_db::{\n-    active_parameter::ActiveParameter, defs::Definition, helpers::rust_doc::is_rust_fence,\n-    SymbolKind,\n+    active_parameter::ActiveParameter, defs::Definition, rust_doc::is_rust_fence, SymbolKind,\n };\n use syntax::{\n     ast::{self, AstNode, IsString, QuoteOffsets},"}, {"sha": "d4d148c774578f13996383cde831f3002d60103b", "filename": "crates/ide_assists/src/assist_config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_assists%2Fsrc%2Fassist_config.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_assists%2Fsrc%2Fassist_config.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fassist_config.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -4,7 +4,7 @@\n //! module, and we use to statically check that we only produce snippet\n //! assists if we are allowed to.\n \n-use ide_db::helpers::{insert_use::InsertUseConfig, SnippetCap};\n+use ide_db::{imports::insert_use::InsertUseConfig, SnippetCap};\n \n use crate::AssistKind;\n "}, {"sha": "fd46aa24796a0f3382f4f962eb2f8675c05cf861", "filename": "crates/ide_assists/src/assist_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_assists%2Fsrc%2Fassist_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_assists%2Fsrc%2Fassist_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fassist_context.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -5,7 +5,7 @@ use std::mem;\n use hir::Semantics;\n use ide_db::{\n     base_db::{AnchoredPathBuf, FileId, FileRange},\n-    helpers::SnippetCap,\n+    SnippetCap,\n };\n use ide_db::{\n     label::Label,"}, {"sha": "11f12773e8e4ad17c337895b5399d16642b69e05", "filename": "crates/ide_assists/src/handlers/add_explicit_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -1,5 +1,5 @@\n use hir::HirDisplay;\n-use ide_db::helpers::node_ext::walk_ty;\n+use ide_db::syntax_helpers::node_ext::walk_ty;\n use syntax::ast::{self, AstNode, LetStmt, Param};\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};"}, {"sha": "c82caa370438847cf26a566f820926bfb535e936", "filename": "crates/ide_assists/src/handlers/add_missing_impl_members.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -1,5 +1,7 @@\n use hir::HasSource;\n-use ide_db::{helpers::insert_whitespace_into_node::insert_ws_into, traits::resolve_target_trait};\n+use ide_db::{\n+    syntax_helpers::insert_whitespace_into_node::insert_ws_into, traits::resolve_target_trait,\n+};\n use syntax::ast::{self, make, AstNode};\n \n use crate::{"}, {"sha": "9b6a1ad169f0be4c46b668555b629d3fef1d6d15", "filename": "crates/ide_assists/src/handlers/add_missing_match_arms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_missing_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_missing_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_missing_match_arms.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -2,8 +2,8 @@ use std::iter::{self, Peekable};\n \n use either::Either;\n use hir::{Adt, Crate, HasAttrs, HasSource, ModuleDef, Semantics};\n-use ide_db::helpers::{mod_path_to_ast, FamousDefs};\n use ide_db::RootDatabase;\n+use ide_db::{famous_defs::FamousDefs, helpers::mod_path_to_ast};\n use itertools::Itertools;\n use syntax::ast::{self, make, AstNode, HasName, MatchArmList, MatchExpr, Pat};\n "}, {"sha": "5a2809a1cf16d2a0a9c86ef1aee5a536f8548596", "filename": "crates/ide_assists/src/handlers/auto_import.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fauto_import.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -1,7 +1,9 @@\n-use ide_db::helpers::{\n-    import_assets::{ImportAssets, ImportCandidate},\n-    insert_use::{insert_use, ImportScope},\n-    mod_path_to_ast,\n+use ide_db::{\n+    helpers::mod_path_to_ast,\n+    imports::{\n+        import_assets::{ImportAssets, ImportCandidate},\n+        insert_use::{insert_use, ImportScope},\n+    },\n };\n use syntax::{ast, AstNode, NodeOrToken, SyntaxElement};\n "}, {"sha": "daec28999ea40b0cfa62d8e3b46bcbd3de14901e", "filename": "crates/ide_assists/src/handlers/convert_bool_then.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_bool_then.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_bool_then.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_bool_then.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -1,9 +1,8 @@\n use hir::{known, AsAssocItem, Semantics};\n use ide_db::{\n-    helpers::{\n-        for_each_tail_expr,\n-        node_ext::{block_as_lone_tail, is_pattern_cond, preorder_expr},\n-        FamousDefs,\n+    famous_defs::FamousDefs,\n+    syntax_helpers::node_ext::{\n+        block_as_lone_tail, for_each_tail_expr, is_pattern_cond, preorder_expr,\n     },\n     RootDatabase,\n };"}, {"sha": "9185501a62919c781fbe93eee5209c80f937dd5b", "filename": "crates/ide_assists/src/handlers/convert_into_to_from.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_into_to_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_into_to_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_into_to_from.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -1,7 +1,4 @@\n-use ide_db::{\n-    helpers::{mod_path_to_ast, FamousDefs},\n-    traits::resolve_target_trait,\n-};\n+use ide_db::{famous_defs::FamousDefs, helpers::mod_path_to_ast, traits::resolve_target_trait};\n use syntax::ast::{self, AstNode, HasName};\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};"}, {"sha": "bb75cb5c955451c9695fb52f195eda7e9125721e", "filename": "crates/ide_assists/src/handlers/convert_iter_for_each_to_for.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_iter_for_each_to_for.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_iter_for_each_to_for.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_iter_for_each_to_for.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -1,5 +1,5 @@\n use hir::known;\n-use ide_db::helpers::FamousDefs;\n+use ide_db::famous_defs::FamousDefs;\n use stdx::format_to;\n use syntax::{\n     ast::{self, edit_in_place::Indent, make, HasArgList, HasLoopBody},"}, {"sha": "a7c43413d2ce18b3920c9706b01e29d82dc537a4", "filename": "crates/ide_assists/src/handlers/convert_to_guarded_return.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_to_guarded_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_to_guarded_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_to_guarded_return.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -1,6 +1,6 @@\n use std::iter::once;\n \n-use ide_db::helpers::node_ext::{is_pattern_cond, single_let};\n+use ide_db::syntax_helpers::node_ext::{is_pattern_cond, single_let};\n use syntax::{\n     ast::{\n         self,"}, {"sha": "345d0c2063f3ab74a08881bdbbfef132d1149c25", "filename": "crates/ide_assists/src/handlers/convert_while_to_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_while_to_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_while_to_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_while_to_loop.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -1,6 +1,6 @@\n use std::iter::once;\n \n-use ide_db::helpers::node_ext::is_pattern_cond;\n+use ide_db::syntax_helpers::node_ext::is_pattern_cond;\n use syntax::{\n     ast::{\n         self,"}, {"sha": "5f86957ba2e7d73eff5a433031aa21dd05ec5439", "filename": "crates/ide_assists/src/handlers/extract_function.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -5,13 +5,11 @@ use either::Either;\n use hir::{HirDisplay, InFile, Local, ModuleDef, Semantics, TypeInfo};\n use ide_db::{\n     defs::{Definition, NameRefClass},\n-    helpers::{\n-        insert_use::{insert_use, ImportScope},\n-        mod_path_to_ast,\n-        node_ext::{preorder_expr, walk_expr, walk_pat, walk_patterns_in_expr},\n-        FamousDefs,\n-    },\n+    famous_defs::FamousDefs,\n+    helpers::mod_path_to_ast,\n+    imports::insert_use::{insert_use, ImportScope},\n     search::{FileReference, ReferenceCategory, SearchScope},\n+    syntax_helpers::node_ext::{preorder_expr, walk_expr, walk_pat, walk_patterns_in_expr},\n     FxIndexSet, RootDatabase,\n };\n use itertools::Itertools;"}, {"sha": "4b597837aaf134881b1fec0fc53d3a11b3cc7d25", "filename": "crates/ide_assists/src/handlers/extract_struct_from_enum_variant.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -4,10 +4,8 @@ use either::Either;\n use hir::{Module, ModuleDef, Name, Variant};\n use ide_db::{\n     defs::Definition,\n-    helpers::{\n-        insert_use::{insert_use, ImportScope, InsertUseConfig},\n-        mod_path_to_ast,\n-    },\n+    helpers::mod_path_to_ast,\n+    imports::insert_use::{insert_use, ImportScope, InsertUseConfig},\n     search::FileReference,\n     RootDatabase,\n };"}, {"sha": "f664aa6dbf98827f34eeb58de9966a68e0a65f0c", "filename": "crates/ide_assists/src/handlers/extract_type_alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_type_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_type_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_type_alias.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -1,5 +1,5 @@\n use either::Either;\n-use ide_db::helpers::node_ext::walk_ty;\n+use ide_db::syntax_helpers::node_ext::walk_ty;\n use itertools::Itertools;\n use syntax::{\n     ast::{self, edit::IndentLevel, AstNode, HasGenericParams, HasName},"}, {"sha": "4745ac24e9fd40ace7db5e4119e97894ba93843a", "filename": "crates/ide_assists/src/handlers/generate_default_from_enum_variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_default_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_default_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_default_from_enum_variant.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -1,4 +1,4 @@\n-use ide_db::{helpers::FamousDefs, RootDatabase};\n+use ide_db::{famous_defs::FamousDefs, RootDatabase};\n use syntax::ast::{self, AstNode, HasName};\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};"}, {"sha": "669fb28d101ab36671e60bd627be46635ed46e50", "filename": "crates/ide_assists/src/handlers/generate_default_from_new.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_default_from_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_default_from_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_default_from_new.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -1,4 +1,4 @@\n-use ide_db::helpers::FamousDefs;\n+use ide_db::famous_defs::FamousDefs;\n use itertools::Itertools;\n use stdx::format_to;\n use syntax::{"}, {"sha": "4328c54c098895cbd0ad03cf03e9fe0158ff5c56", "filename": "crates/ide_assists/src/handlers/generate_deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_deref.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -1,6 +1,6 @@\n use std::fmt::Display;\n \n-use ide_db::{helpers::FamousDefs, RootDatabase};\n+use ide_db::{famous_defs::FamousDefs, RootDatabase};\n use syntax::{\n     ast::{self, HasName},\n     AstNode, SyntaxNode,"}, {"sha": "ee8de5a20e5bc721d5dfa66d26ab12019093e3a2", "filename": "crates/ide_assists/src/handlers/generate_from_impl_for_enum.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -1,5 +1,4 @@\n-use ide_db::helpers::FamousDefs;\n-use ide_db::RootDatabase;\n+use ide_db::{famous_defs::FamousDefs, RootDatabase};\n use syntax::ast::{self, AstNode, HasName};\n \n use crate::{utils::generate_trait_impl_text, AssistContext, AssistId, AssistKind, Assists};"}, {"sha": "c06498a4c96b6286053c05d1c9dcd23af3452226", "filename": "crates/ide_assists/src/handlers/generate_function.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -1,12 +1,11 @@\n use rustc_hash::{FxHashMap, FxHashSet};\n \n use hir::{HasSource, HirDisplay, Module, Semantics, TypeInfo};\n-use ide_db::helpers::FamousDefs;\n use ide_db::{\n     base_db::FileId,\n     defs::{Definition, NameRefClass},\n-    helpers::SnippetCap,\n-    RootDatabase,\n+    famous_defs::FamousDefs,\n+    RootDatabase, SnippetCap,\n };\n use stdx::to_lower_snake_case;\n use syntax::{"}, {"sha": "c6e979c072ccd0746609072b6ba21b343d6bffb1", "filename": "crates/ide_assists/src/handlers/generate_getter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -1,4 +1,4 @@\n-use ide_db::helpers::FamousDefs;\n+use ide_db::famous_defs::FamousDefs;\n use stdx::{format_to, to_lower_snake_case};\n use syntax::ast::{self, AstNode, HasName, HasVisibility};\n "}, {"sha": "5e9f56180613dd0aa211da02bb717ec9e6159e5e", "filename": "crates/ide_assists/src/handlers/inline_call.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -4,9 +4,10 @@ use hir::{db::HirDatabase, PathResolution, Semantics, TypeInfo};\n use ide_db::{\n     base_db::{FileId, FileRange},\n     defs::Definition,\n-    helpers::{insert_use::remove_path_if_in_use_stmt, node_ext::expr_as_name_ref},\n+    imports::insert_use::remove_path_if_in_use_stmt,\n     path_transform::PathTransform,\n     search::{FileReference, SearchScope},\n+    syntax_helpers::node_ext::expr_as_name_ref,\n     RootDatabase,\n };\n use itertools::{izip, Itertools};"}, {"sha": "6eed59c9ea4f08a8c57cee42affa6340cf5d0fba", "filename": "crates/ide_assists/src/handlers/invert_if.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finvert_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finvert_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finvert_if.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -1,4 +1,4 @@\n-use ide_db::helpers::node_ext::is_pattern_cond;\n+use ide_db::syntax_helpers::node_ext::is_pattern_cond;\n use syntax::{\n     ast::{self, AstNode},\n     T,"}, {"sha": "e35c962a3f3d5625b249a96f23f3900e743feb07", "filename": "crates/ide_assists/src/handlers/merge_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -1,4 +1,4 @@\n-use ide_db::helpers::merge_imports::{try_merge_imports, try_merge_trees, MergeBehavior};\n+use ide_db::imports::merge_imports::{try_merge_imports, try_merge_trees, MergeBehavior};\n use syntax::{algo::neighbor, ast, ted, AstNode};\n \n use crate::{"}, {"sha": "58cee8eafbf37e2391c6a6fad59370e2e79fc258", "filename": "crates/ide_assists/src/handlers/promote_local_to_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fpromote_local_to_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fpromote_local_to_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fpromote_local_to_const.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -2,7 +2,7 @@ use hir::{HirDisplay, ModuleDef, PathResolution, Semantics};\n use ide_db::{\n     assists::{AssistId, AssistKind},\n     defs::Definition,\n-    helpers::node_ext::preorder_expr,\n+    syntax_helpers::node_ext::preorder_expr,\n     RootDatabase,\n };\n use stdx::to_upper_snake_case;"}, {"sha": "61c16aa044507e91f09b906922f112dd09fd0c17", "filename": "crates/ide_assists/src/handlers/qualify_method_call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fqualify_method_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fqualify_method_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fqualify_method_call.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -1,7 +1,7 @@\n use hir::{ItemInNs, ModuleDef};\n use ide_db::{\n     assists::{AssistId, AssistKind},\n-    helpers::import_assets::item_for_path_search,\n+    imports::import_assets::item_for_path_search,\n };\n use syntax::{ast, AstNode};\n "}, {"sha": "5deb60f57b1359afd2ed0209ae04ecd59b95f6e7", "filename": "crates/ide_assists/src/handlers/qualify_path.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fqualify_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fqualify_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fqualify_path.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -1,11 +1,11 @@\n use std::iter;\n \n use hir::AsAssocItem;\n-use ide_db::helpers::{\n-    import_assets::{ImportCandidate, LocatedImport},\n-    mod_path_to_ast,\n-};\n use ide_db::RootDatabase;\n+use ide_db::{\n+    helpers::mod_path_to_ast,\n+    imports::import_assets::{ImportCandidate, LocatedImport},\n+};\n use syntax::{\n     ast,\n     ast::{make, HasArgList},"}, {"sha": "0d0bd7071f40ee5f71c0a3987839b492a82e5fb6", "filename": "crates/ide_assists/src/handlers/replace_derive_with_manual_impl.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -1,9 +1,7 @@\n use hir::{InFile, ModuleDef};\n use ide_db::{\n-    helpers::{\n-        import_assets::NameToImport, insert_whitespace_into_node::insert_ws_into, mod_path_to_ast,\n-    },\n-    items_locator,\n+    helpers::mod_path_to_ast, imports::import_assets::NameToImport, items_locator,\n+    syntax_helpers::insert_whitespace_into_node::insert_ws_into,\n };\n use itertools::Itertools;\n use syntax::{"}, {"sha": "1c403eafe303074938afb01e6468e180328e2237", "filename": "crates/ide_assists/src/handlers/replace_if_let_with_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -3,7 +3,7 @@ use std::iter::{self, successors};\n use either::Either;\n use ide_db::{\n     defs::NameClass,\n-    helpers::node_ext::{is_pattern_cond, single_let},\n+    syntax_helpers::node_ext::{is_pattern_cond, single_let},\n     ty_filter::TryEnum,\n     RootDatabase,\n };"}, {"sha": "50134db8a1c1edacd4ba69f9b29848acc61280bd", "filename": "crates/ide_assists/src/handlers/replace_qualified_name_with_use.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -1,7 +1,7 @@\n use hir::AsAssocItem;\n-use ide_db::helpers::{\n-    insert_use::{insert_use, ImportScope},\n-    mod_path_to_ast,\n+use ide_db::{\n+    helpers::mod_path_to_ast,\n+    imports::insert_use::{insert_use, ImportScope},\n };\n use syntax::{\n     ast::{self, make},"}, {"sha": "b890462389fbb285fc527da7758af351b3e366de", "filename": "crates/ide_assists/src/handlers/unwrap_result_return_type.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Funwrap_result_return_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Funwrap_result_return_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Funwrap_result_return_type.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -1,4 +1,7 @@\n-use ide_db::helpers::{for_each_tail_expr, node_ext::walk_expr, FamousDefs};\n+use ide_db::{\n+    famous_defs::FamousDefs,\n+    syntax_helpers::node_ext::{for_each_tail_expr, walk_expr},\n+};\n use itertools::Itertools;\n use syntax::{\n     ast::{self, Expr},"}, {"sha": "972d4765bb3c4cb5f6ea2e5fdf72e9964982bd86", "filename": "crates/ide_assists/src/handlers/wrap_return_type_in_result.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fwrap_return_type_in_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fwrap_return_type_in_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fwrap_return_type_in_result.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -1,6 +1,9 @@\n use std::iter;\n \n-use ide_db::helpers::{for_each_tail_expr, node_ext::walk_expr, FamousDefs};\n+use ide_db::{\n+    famous_defs::FamousDefs,\n+    syntax_helpers::node_ext::{for_each_tail_expr, walk_expr},\n+};\n use syntax::{\n     ast::{self, make, Expr},\n     match_ast, AstNode,"}, {"sha": "09260c12ed937861bc108df855656a04e75f0e17", "filename": "crates/ide_assists/src/tests.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_assists%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_assists%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -5,12 +5,9 @@ use expect_test::expect;\n use hir::{db::DefDatabase, Semantics};\n use ide_db::{\n     base_db::{fixture::WithFixture, FileId, FileRange, SourceDatabaseExt},\n-    helpers::{\n-        insert_use::{ImportGranularity, InsertUseConfig},\n-        SnippetCap,\n-    },\n+    imports::insert_use::{ImportGranularity, InsertUseConfig},\n     source_change::FileSystemEdit,\n-    RootDatabase,\n+    RootDatabase, SnippetCap,\n };\n use stdx::{format_to, trim_indent};\n use syntax::TextRange;"}, {"sha": "42317ea4daba5ccf5eb840eabc5517abb699f62c", "filename": "crates/ide_assists/src/utils.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -6,9 +6,7 @@ use itertools::Itertools;\n \n pub(crate) use gen_trait_fn_body::gen_trait_fn_body;\n use hir::{db::HirDatabase, HirDisplay, Semantics};\n-use ide_db::{\n-    helpers::FamousDefs, helpers::SnippetCap, path_transform::PathTransform, RootDatabase,\n-};\n+use ide_db::{famous_defs::FamousDefs, path_transform::PathTransform, RootDatabase, SnippetCap};\n use stdx::format_to;\n use syntax::{\n     ast::{"}, {"sha": "eb287847be8323408db4a2df6002e205311f0ef7", "filename": "crates/ide_completion/src/completions/attribute.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -3,12 +3,10 @@\n //! This module uses a bit of static metadata to provide completions for builtin-in attributes and lints.\n \n use ide_db::{\n-    helpers::{\n-        generated_lints::{\n-            Lint, CLIPPY_LINTS, CLIPPY_LINT_GROUPS, DEFAULT_LINTS, FEATURES, RUSTDOC_LINTS,\n-        },\n-        parse_tt_as_comma_sep_paths,\n+    generated::lints::{\n+        Lint, CLIPPY_LINTS, CLIPPY_LINT_GROUPS, DEFAULT_LINTS, FEATURES, RUSTDOC_LINTS,\n     },\n+    syntax_helpers::node_ext::parse_tt_as_comma_sep_paths,\n     SymbolKind,\n };\n use itertools::Itertools;"}, {"sha": "cbd00500855e89f9f65a30013a50008aa39ea3d0", "filename": "crates/ide_completion/src/completions/attribute/derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -1,7 +1,7 @@\n //! Completion for derives\n use hir::{HasAttrs, MacroDef, MacroKind};\n use ide_db::{\n-    helpers::{import_assets::ImportAssets, insert_use::ImportScope},\n+    imports::{import_assets::ImportAssets, insert_use::ImportScope},\n     SymbolKind,\n };\n use itertools::Itertools;"}, {"sha": "8991d657e85488d09d0c24e96256ab4cc6a6a27b", "filename": "crates/ide_completion/src/completions/attribute/lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Flint.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -1,5 +1,5 @@\n //! Completion for lints\n-use ide_db::{helpers::generated_lints::Lint, SymbolKind};\n+use ide_db::{generated::lints::Lint, SymbolKind};\n use syntax::{ast, T};\n \n use crate::{context::CompletionContext, item::CompletionItem, Completions};"}, {"sha": "0a06e09bac7f50b5850fe680c2e48f7333b228c9", "filename": "crates/ide_completion/src/completions/flyimport.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -1,6 +1,6 @@\n //! See [`import_on_the_fly`].\n use hir::ItemInNs;\n-use ide_db::helpers::{\n+use ide_db::imports::{\n     import_assets::{ImportAssets, ImportCandidate, LocatedImport},\n     insert_use::ImportScope,\n };"}, {"sha": "f0c994f6b6670323c8197b1fe9aac2ba00cb71d8", "filename": "crates/ide_completion/src/completions/format_string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fformat_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fformat_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fformat_string.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -1,6 +1,6 @@\n //! Completes identifiers in format string literals.\n \n-use ide_db::helpers::format_string::is_format_string;\n+use ide_db::syntax_helpers::format_string::is_format_string;\n use itertools::Itertools;\n use syntax::{ast, AstToken, TextRange, TextSize};\n "}, {"sha": "23d4310aa9c4b3b68c8fe7a6fe3582e04b341991", "filename": "crates/ide_completion/src/completions/postfix.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -3,10 +3,7 @@\n mod format_like;\n \n use hir::{Documentation, HasAttrs};\n-use ide_db::{\n-    helpers::{insert_use::ImportScope, SnippetCap},\n-    ty_filter::TryEnum,\n-};\n+use ide_db::{imports::insert_use::ImportScope, ty_filter::TryEnum, SnippetCap};\n use syntax::{\n     ast::{self, AstNode, AstToken},\n     SyntaxKind::{EXPR_STMT, STMT_LIST},"}, {"sha": "b5ef87b8812c36c31469418d42a261e9ecc892d6", "filename": "crates/ide_completion/src/completions/postfix/format_like.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix%2Fformat_like.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix%2Fformat_like.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix%2Fformat_like.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -16,7 +16,7 @@\n //\n // image::https://user-images.githubusercontent.com/48062697/113020656-b560f500-917a-11eb-87de-02991f61beb8.gif[]\n \n-use ide_db::helpers::SnippetCap;\n+use ide_db::SnippetCap;\n use syntax::ast::{self, AstToken};\n \n use crate::{"}, {"sha": "e4c4899477ebceb5334e2d46005f529f36b6d754", "filename": "crates/ide_completion/src/completions/snippet.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -1,7 +1,7 @@\n //! This file provides snippet completions, like `pd` => `eprintln!(...)`.\n \n use hir::Documentation;\n-use ide_db::helpers::{insert_use::ImportScope, SnippetCap};\n+use ide_db::{imports::insert_use::ImportScope, SnippetCap};\n use syntax::T;\n \n use crate::{"}, {"sha": "302836dd1e117dfa3722b017343e39087aaa08a4", "filename": "crates/ide_completion/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_completion%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_completion%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fconfig.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -4,7 +4,7 @@\n //! module, and we use to statically check that we only produce snippet\n //! completions if we are allowed to.\n \n-use ide_db::helpers::{insert_use::InsertUseConfig, SnippetCap};\n+use ide_db::{imports::insert_use::InsertUseConfig, SnippetCap};\n \n use crate::snippet::Snippet;\n "}, {"sha": "da80224dd8c7e3bdfe0f59cc75f16a7e0aaf5888", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -9,7 +9,7 @@ use hir::{\n use ide_db::{\n     active_parameter::ActiveParameter,\n     base_db::{FilePosition, SourceDatabase},\n-    helpers::FamousDefs,\n+    famous_defs::FamousDefs,\n     RootDatabase,\n };\n use syntax::{"}, {"sha": "4b9f7d17c311c0c3209ec788b42e58c1dc6711fa", "filename": "crates/ide_completion/src/item.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_completion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_completion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fitem.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -4,12 +4,12 @@ use std::fmt;\n \n use hir::{Documentation, Mutability};\n use ide_db::{\n-    helpers::{\n+    helpers::mod_path_to_ast,\n+    imports::{\n         import_assets::LocatedImport,\n         insert_use::{self, ImportScope, InsertUseConfig},\n-        mod_path_to_ast, SnippetCap,\n     },\n-    SymbolKind,\n+    SnippetCap, SymbolKind,\n };\n use smallvec::SmallVec;\n use stdx::{impl_from, never};"}, {"sha": "3225a0bc9f4fef202aa9a9098861f51fe6b6c870", "filename": "crates/ide_completion/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_completion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_completion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Flib.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -14,10 +14,10 @@ mod snippet;\n use completions::flyimport::position_for_import;\n use ide_db::{\n     base_db::FilePosition,\n-    helpers::{\n+    helpers::mod_path_to_ast,\n+    imports::{\n         import_assets::NameToImport,\n         insert_use::{self, ImportScope},\n-        mod_path_to_ast,\n     },\n     items_locator, RootDatabase,\n };"}, {"sha": "1836f80bfb5604b482d83ab65b0008c88dde6e90", "filename": "crates/ide_completion/src/render.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -12,10 +12,7 @@ pub(crate) mod struct_literal;\n mod builder_ext;\n \n use hir::{AsAssocItem, HasAttrs, HirDisplay, ScopeDef};\n-use ide_db::{\n-    helpers::{item_name, SnippetCap},\n-    RootDatabase, SymbolKind,\n-};\n+use ide_db::{helpers::item_name, RootDatabase, SnippetCap, SymbolKind};\n use syntax::{SmolStr, SyntaxKind, TextRange};\n \n use crate::{"}, {"sha": "c2d51b1252c05252c1ee84be7aeb6464de0c1d5a", "filename": "crates/ide_completion/src/render/pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_completion%2Fsrc%2Frender%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_completion%2Fsrc%2Frender%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fpattern.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -1,7 +1,7 @@\n //! Renderer for patterns.\n \n use hir::{db::HirDatabase, HasAttrs, HasVisibility, Name, StructKind};\n-use ide_db::helpers::SnippetCap;\n+use ide_db::SnippetCap;\n use itertools::Itertools;\n use syntax::SmolStr;\n "}, {"sha": "3bc94fa782a82f35b3ed581c9d9bd9429165aba7", "filename": "crates/ide_completion/src/render/struct_literal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_completion%2Fsrc%2Frender%2Fstruct_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_completion%2Fsrc%2Frender%2Fstruct_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fstruct_literal.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -1,7 +1,7 @@\n //! Renderer for `struct` literal.\n \n use hir::{db::HirDatabase, HasAttrs, HasVisibility, Name, StructKind};\n-use ide_db::helpers::SnippetCap;\n+use ide_db::SnippetCap;\n use itertools::Itertools;\n use syntax::SmolStr;\n "}, {"sha": "05b066a0a919b13b48ccab228feeb6e235ed76a1", "filename": "crates/ide_completion/src/snippet.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_completion%2Fsrc%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_completion%2Fsrc%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fsnippet.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -102,7 +102,7 @@ use std::ops::Deref;\n // }\n // ----\n \n-use ide_db::helpers::{import_assets::LocatedImport, insert_use::ImportScope};\n+use ide_db::imports::{import_assets::LocatedImport, insert_use::ImportScope};\n use itertools::Itertools;\n use syntax::{ast, AstNode, GreenNode, SyntaxNode};\n "}, {"sha": "eedc37e2a6f6211214ff6cc598dc90ca7439f33a", "filename": "crates/ide_completion/src/tests.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_completion%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_completion%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -27,11 +27,8 @@ use std::mem;\n use hir::{db::DefDatabase, PrefixKind, Semantics};\n use ide_db::{\n     base_db::{fixture::ChangeFixture, FileLoader, FilePosition},\n-    helpers::{\n-        insert_use::{ImportGranularity, InsertUseConfig},\n-        SnippetCap,\n-    },\n-    RootDatabase,\n+    imports::insert_use::{ImportGranularity, InsertUseConfig},\n+    RootDatabase, SnippetCap,\n };\n use itertools::Itertools;\n use stdx::{format_to, trim_indent};"}, {"sha": "ee7bf9540bc2b04b8e36b706c190e6ffd89fe676", "filename": "crates/ide_db/src/famous_defs.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_db%2Fsrc%2Ffamous_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_db%2Fsrc%2Ffamous_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Ffamous_defs.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "previous_filename": "crates/ide_db/src/helpers/famous_defs.rs"}, {"sha": "64dd2bb5f2d1489bbbd6e0e8c94eada05f1d1691", "filename": "crates/ide_db/src/generated/lints.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_db%2Fsrc%2Fgenerated%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_db%2Fsrc%2Fgenerated%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fgenerated%2Flints.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "previous_filename": "crates/ide_db/src/helpers/generated_lints.rs"}, {"sha": "1e3d68b32185c8dae886bdd6c9eb8ba84cd79564", "filename": "crates/ide_db/src/helpers.rs", "status": "modified", "additions": 7, "deletions": 247, "changes": 254, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -1,28 +1,15 @@\n-//! A module with ide helpers for high-level ide features.\n-pub mod famous_defs;\n-pub mod generated_lints;\n-pub mod import_assets;\n-pub mod insert_use;\n-pub mod merge_imports;\n-pub mod insert_whitespace_into_node;\n-pub mod node_ext;\n-pub mod rust_doc;\n-pub mod format_string;\n+//! Random assortment of ide helpers for high-level ide features that don't fit in any other module.\n \n use std::collections::VecDeque;\n \n use base_db::FileId;\n use hir::{ItemInNs, MacroDef, ModuleDef, Name, Semantics};\n-use itertools::Itertools;\n use syntax::{\n-    ast::{self, make, HasLoopBody},\n-    AstNode, AstToken, Preorder, RustLanguage, SyntaxKind, SyntaxToken, TokenAtOffset, WalkEvent,\n-    T,\n+    ast::{self, make},\n+    AstToken, SyntaxKind, SyntaxToken, TokenAtOffset,\n };\n \n-use crate::{defs::Definition, RootDatabase};\n-\n-pub use self::famous_defs::FamousDefs;\n+use crate::{defs::Definition, generated, RootDatabase};\n \n pub fn item_name(db: &RootDatabase, item: ItemInNs) -> Option<Name> {\n     match item {\n@@ -91,247 +78,20 @@ pub fn visit_file_defs(\n     module.impl_defs(db).into_iter().for_each(|impl_| cb(impl_.into()));\n }\n \n-#[derive(Clone, Copy, Debug, PartialEq, Eq)]\n-pub struct SnippetCap {\n-    _private: (),\n-}\n-\n-impl SnippetCap {\n-    pub const fn new(allow_snippets: bool) -> Option<SnippetCap> {\n-        if allow_snippets {\n-            Some(SnippetCap { _private: () })\n-        } else {\n-            None\n-        }\n-    }\n-}\n-\n-/// Calls `cb` on each expression inside `expr` that is at \"tail position\".\n-/// Does not walk into `break` or `return` expressions.\n-/// Note that modifying the tree while iterating it will cause undefined iteration which might\n-/// potentially results in an out of bounds panic.\n-pub fn for_each_tail_expr(expr: &ast::Expr, cb: &mut dyn FnMut(&ast::Expr)) {\n-    match expr {\n-        ast::Expr::BlockExpr(b) => {\n-            match b.modifier() {\n-                Some(\n-                    ast::BlockModifier::Async(_)\n-                    | ast::BlockModifier::Try(_)\n-                    | ast::BlockModifier::Const(_),\n-                ) => return cb(expr),\n-\n-                Some(ast::BlockModifier::Label(label)) => {\n-                    for_each_break_expr(Some(label), b.stmt_list(), &mut |b| {\n-                        cb(&ast::Expr::BreakExpr(b))\n-                    });\n-                }\n-                Some(ast::BlockModifier::Unsafe(_)) => (),\n-                None => (),\n-            }\n-            if let Some(stmt_list) = b.stmt_list() {\n-                if let Some(e) = stmt_list.tail_expr() {\n-                    for_each_tail_expr(&e, cb);\n-                }\n-            }\n-        }\n-        ast::Expr::IfExpr(if_) => {\n-            let mut if_ = if_.clone();\n-            loop {\n-                if let Some(block) = if_.then_branch() {\n-                    for_each_tail_expr(&ast::Expr::BlockExpr(block), cb);\n-                }\n-                match if_.else_branch() {\n-                    Some(ast::ElseBranch::IfExpr(it)) => if_ = it,\n-                    Some(ast::ElseBranch::Block(block)) => {\n-                        for_each_tail_expr(&ast::Expr::BlockExpr(block), cb);\n-                        break;\n-                    }\n-                    None => break,\n-                }\n-            }\n-        }\n-        ast::Expr::LoopExpr(l) => {\n-            for_each_break_expr(l.label(), l.loop_body().and_then(|it| it.stmt_list()), &mut |b| {\n-                cb(&ast::Expr::BreakExpr(b))\n-            })\n-        }\n-        ast::Expr::MatchExpr(m) => {\n-            if let Some(arms) = m.match_arm_list() {\n-                arms.arms().filter_map(|arm| arm.expr()).for_each(|e| for_each_tail_expr(&e, cb));\n-            }\n-        }\n-        ast::Expr::ArrayExpr(_)\n-        | ast::Expr::AwaitExpr(_)\n-        | ast::Expr::BinExpr(_)\n-        | ast::Expr::BoxExpr(_)\n-        | ast::Expr::BreakExpr(_)\n-        | ast::Expr::CallExpr(_)\n-        | ast::Expr::CastExpr(_)\n-        | ast::Expr::ClosureExpr(_)\n-        | ast::Expr::ContinueExpr(_)\n-        | ast::Expr::FieldExpr(_)\n-        | ast::Expr::ForExpr(_)\n-        | ast::Expr::IndexExpr(_)\n-        | ast::Expr::Literal(_)\n-        | ast::Expr::MacroCall(_)\n-        | ast::Expr::MacroStmts(_)\n-        | ast::Expr::MethodCallExpr(_)\n-        | ast::Expr::ParenExpr(_)\n-        | ast::Expr::PathExpr(_)\n-        | ast::Expr::PrefixExpr(_)\n-        | ast::Expr::RangeExpr(_)\n-        | ast::Expr::RecordExpr(_)\n-        | ast::Expr::RefExpr(_)\n-        | ast::Expr::ReturnExpr(_)\n-        | ast::Expr::TryExpr(_)\n-        | ast::Expr::TupleExpr(_)\n-        | ast::Expr::WhileExpr(_)\n-        | ast::Expr::LetExpr(_)\n-        | ast::Expr::UnderscoreExpr(_)\n-        | ast::Expr::YieldExpr(_) => cb(expr),\n-    }\n-}\n-\n-pub fn for_each_break_and_continue_expr(\n-    label: Option<ast::Label>,\n-    body: Option<ast::StmtList>,\n-    cb: &mut dyn FnMut(ast::Expr),\n-) {\n-    let label = label.and_then(|lbl| lbl.lifetime());\n-    if let Some(b) = body {\n-        let tree_depth_iterator = TreeWithDepthIterator::new(b);\n-        for (expr, depth) in tree_depth_iterator {\n-            match expr {\n-                ast::Expr::BreakExpr(b)\n-                    if (depth == 0 && b.lifetime().is_none())\n-                        || eq_label_lt(&label, &b.lifetime()) =>\n-                {\n-                    cb(ast::Expr::BreakExpr(b));\n-                }\n-                ast::Expr::ContinueExpr(c)\n-                    if (depth == 0 && c.lifetime().is_none())\n-                        || eq_label_lt(&label, &c.lifetime()) =>\n-                {\n-                    cb(ast::Expr::ContinueExpr(c));\n-                }\n-                _ => (),\n-            }\n-        }\n-    }\n-}\n-\n-fn for_each_break_expr(\n-    label: Option<ast::Label>,\n-    body: Option<ast::StmtList>,\n-    cb: &mut dyn FnMut(ast::BreakExpr),\n-) {\n-    let label = label.and_then(|lbl| lbl.lifetime());\n-    if let Some(b) = body {\n-        let tree_depth_iterator = TreeWithDepthIterator::new(b);\n-        for (expr, depth) in tree_depth_iterator {\n-            match expr {\n-                ast::Expr::BreakExpr(b)\n-                    if (depth == 0 && b.lifetime().is_none())\n-                        || eq_label_lt(&label, &b.lifetime()) =>\n-                {\n-                    cb(b);\n-                }\n-                _ => (),\n-            }\n-        }\n-    }\n-}\n-\n-fn eq_label_lt(lt1: &Option<ast::Lifetime>, lt2: &Option<ast::Lifetime>) -> bool {\n-    lt1.as_ref().zip(lt2.as_ref()).map_or(false, |(lt, lbl)| lt.text() == lbl.text())\n-}\n-\n-struct TreeWithDepthIterator {\n-    preorder: Preorder<RustLanguage>,\n-    depth: u32,\n-}\n-\n-impl TreeWithDepthIterator {\n-    fn new(body: ast::StmtList) -> Self {\n-        let preorder = body.syntax().preorder();\n-        Self { preorder, depth: 0 }\n-    }\n-}\n-\n-impl<'a> Iterator for TreeWithDepthIterator {\n-    type Item = (ast::Expr, u32);\n-\n-    fn next(&mut self) -> Option<Self::Item> {\n-        while let Some(event) = self.preorder.find_map(|ev| match ev {\n-            WalkEvent::Enter(it) => ast::Expr::cast(it).map(WalkEvent::Enter),\n-            WalkEvent::Leave(it) => ast::Expr::cast(it).map(WalkEvent::Leave),\n-        }) {\n-            match event {\n-                WalkEvent::Enter(\n-                    ast::Expr::LoopExpr(_) | ast::Expr::WhileExpr(_) | ast::Expr::ForExpr(_),\n-                ) => {\n-                    self.depth += 1;\n-                }\n-                WalkEvent::Leave(\n-                    ast::Expr::LoopExpr(_) | ast::Expr::WhileExpr(_) | ast::Expr::ForExpr(_),\n-                ) => {\n-                    self.depth -= 1;\n-                }\n-                WalkEvent::Enter(ast::Expr::BlockExpr(e)) if e.label().is_some() => {\n-                    self.depth += 1;\n-                }\n-                WalkEvent::Leave(ast::Expr::BlockExpr(e)) if e.label().is_some() => {\n-                    self.depth -= 1;\n-                }\n-                WalkEvent::Enter(expr) => return Some((expr, self.depth)),\n-                _ => (),\n-            }\n-        }\n-        None\n-    }\n-}\n-\n /// Checks if the given lint is equal or is contained by the other lint which may or may not be a group.\n pub fn lint_eq_or_in_group(lint: &str, lint_is: &str) -> bool {\n     if lint == lint_is {\n         return true;\n     }\n \n-    if let Some(group) = generated_lints::DEFAULT_LINT_GROUPS\n+    if let Some(group) = generated::lints::DEFAULT_LINT_GROUPS\n         .iter()\n-        .chain(generated_lints::CLIPPY_LINT_GROUPS.iter())\n-        .chain(generated_lints::RUSTDOC_LINT_GROUPS.iter())\n+        .chain(generated::lints::CLIPPY_LINT_GROUPS.iter())\n+        .chain(generated::lints::RUSTDOC_LINT_GROUPS.iter())\n         .find(|&check| check.lint.label == lint_is)\n     {\n         group.children.contains(&lint)\n     } else {\n         false\n     }\n }\n-\n-/// Parses the input token tree as comma separated plain paths.\n-pub fn parse_tt_as_comma_sep_paths(input: ast::TokenTree) -> Option<Vec<ast::Path>> {\n-    let r_paren = input.r_paren_token();\n-    let tokens =\n-        input.syntax().children_with_tokens().skip(1).map_while(|it| match it.into_token() {\n-            // seeing a keyword means the attribute is unclosed so stop parsing here\n-            Some(tok) if tok.kind().is_keyword() => None,\n-            // don't include the right token tree parenthesis if it exists\n-            tok @ Some(_) if tok == r_paren => None,\n-            // only nodes that we can find are other TokenTrees, those are unexpected in this parse though\n-            None => None,\n-            Some(tok) => Some(tok),\n-        });\n-    let input_expressions = tokens.into_iter().group_by(|tok| tok.kind() == T![,]);\n-    let paths = input_expressions\n-        .into_iter()\n-        .filter_map(|(is_sep, group)| (!is_sep).then(|| group))\n-        .filter_map(|mut tokens| {\n-            syntax::hacks::parse_expr_from_str(&tokens.join(\"\")).and_then(|expr| match expr {\n-                ast::Expr::PathExpr(it) => it.path(),\n-                _ => None,\n-            })\n-        })\n-        .collect();\n-    Some(paths)\n-}"}, {"sha": "3c63f65fce6fe5681f3e385d11825ef7ecd1cc03", "filename": "crates/ide_db/src/imports/import_assets.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_db%2Fsrc%2Fimports%2Fimport_assets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_db%2Fsrc%2Fimports%2Fimport_assets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fimports%2Fimport_assets.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -12,12 +12,11 @@ use syntax::{\n };\n \n use crate::{\n+    helpers::item_name,\n     items_locator::{self, AssocItemSearch, DEFAULT_QUERY_SEARCH_LIMIT},\n     RootDatabase,\n };\n \n-use super::item_name;\n-\n /// A candidate for import, derived during various IDE activities:\n /// * completion with imports on the fly proposals\n /// * completion edit resolve requests", "previous_filename": "crates/ide_db/src/helpers/import_assets.rs"}, {"sha": "9e39c26b45b6582dbe3a18dced95432e0b242563", "filename": "crates/ide_db/src/imports/insert_use.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_db%2Fsrc%2Fimports%2Finsert_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_db%2Fsrc%2Fimports%2Finsert_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fimports%2Finsert_use.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -12,7 +12,7 @@ use syntax::{\n };\n \n use crate::{\n-    helpers::merge_imports::{\n+    imports::merge_imports::{\n         common_prefix, eq_attrs, eq_visibility, try_merge_imports, use_tree_path_cmp, MergeBehavior,\n     },\n     RootDatabase,", "previous_filename": "crates/ide_db/src/helpers/insert_use.rs"}, {"sha": "4219358a07f33aba74d57bd8a4ea29c7508d8033", "filename": "crates/ide_db/src/imports/insert_use/tests.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_db%2Fsrc%2Fimports%2Finsert_use%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_db%2Fsrc%2Fimports%2Finsert_use%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fimports%2Finsert_use%2Ftests.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "previous_filename": "crates/ide_db/src/helpers/insert_use/tests.rs"}, {"sha": "71859b7fc7d034ab1ee922581f475786939f2461", "filename": "crates/ide_db/src/imports/merge_imports.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_db%2Fsrc%2Fimports%2Fmerge_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_db%2Fsrc%2Fimports%2Fmerge_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fimports%2Fmerge_imports.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -7,7 +7,7 @@ use syntax::{\n     ted,\n };\n \n-use crate::helpers::node_ext::vis_eq;\n+use crate::syntax_helpers::node_ext::vis_eq;\n \n /// What type of merges are allowed.\n #[derive(Copy, Clone, Debug, PartialEq, Eq)]", "previous_filename": "crates/ide_db/src/helpers/merge_imports.rs"}, {"sha": "891b7c8e9207ad65f9d8e6e0ffb323067b29a9e8", "filename": "crates/ide_db/src/items_locator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_db%2Fsrc%2Fitems_locator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_db%2Fsrc%2Fitems_locator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fitems_locator.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -13,7 +13,7 @@ use syntax::{ast, AstNode, SyntaxKind::NAME};\n \n use crate::{\n     defs::{Definition, NameClass},\n-    helpers::import_assets::NameToImport,\n+    imports::import_assets::NameToImport,\n     symbol_index, RootDatabase,\n };\n "}, {"sha": "b11b70d1276cc3885a0ca55831abc9a2390c420f", "filename": "crates/ide_db/src/lib.rs", "status": "modified", "additions": 48, "deletions": 18, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Flib.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -4,21 +4,38 @@\n \n mod apply_change;\n \n+pub mod active_parameter;\n pub mod assists;\n-pub mod label;\n-pub mod line_index;\n-pub mod symbol_index;\n pub mod defs;\n+pub mod famous_defs;\n+pub mod helpers;\n pub mod items_locator;\n+pub mod label;\n+pub mod line_index;\n+pub mod path_transform;\n+pub mod rename;\n+pub mod rust_doc;\n+pub mod search;\n pub mod source_change;\n-pub mod ty_filter;\n+pub mod symbol_index;\n pub mod traits;\n-pub mod helpers;\n-pub mod path_transform;\n+pub mod ty_filter;\n \n-pub mod search;\n-pub mod rename;\n-pub mod active_parameter;\n+pub mod imports {\n+    pub mod import_assets;\n+    pub mod insert_use;\n+    pub mod merge_imports;\n+}\n+\n+pub mod generated {\n+    pub mod lints;\n+}\n+\n+pub mod syntax_helpers {\n+    pub mod node_ext;\n+    pub mod insert_whitespace_into_node;\n+    pub mod format_string;\n+}\n \n use std::{fmt, mem::ManuallyDrop, sync::Arc};\n \n@@ -42,14 +59,14 @@ pub type FxIndexMap<K, V> =\n     indexmap::IndexMap<K, V, std::hash::BuildHasherDefault<rustc_hash::FxHasher>>;\n \n #[salsa::database(\n-    base_db::SourceDatabaseStorage,\n     base_db::SourceDatabaseExtStorage,\n-    LineIndexDatabaseStorage,\n-    symbol_index::SymbolsDatabaseStorage,\n-    hir::db::InternDatabaseStorage,\n+    base_db::SourceDatabaseStorage,\n     hir::db::AstDatabaseStorage,\n     hir::db::DefDatabaseStorage,\n-    hir::db::HirDatabaseStorage\n+    hir::db::HirDatabaseStorage,\n+    hir::db::InternDatabaseStorage,\n+    LineIndexDatabaseStorage,\n+    symbol_index::SymbolsDatabaseStorage\n )]\n pub struct RootDatabase {\n     // We use `ManuallyDrop` here because every codegen unit that contains a\n@@ -61,9 +78,7 @@ pub struct RootDatabase {\n \n impl Drop for RootDatabase {\n     fn drop(&mut self) {\n-        unsafe {\n-            ManuallyDrop::drop(&mut self.storage);\n-        }\n+        unsafe { ManuallyDrop::drop(&mut self.storage) };\n     }\n }\n \n@@ -117,7 +132,7 @@ impl RootDatabase {\n         db.set_crate_graph_with_durability(Default::default(), Durability::HIGH);\n         db.set_local_roots_with_durability(Default::default(), Durability::HIGH);\n         db.set_library_roots_with_durability(Default::default(), Durability::HIGH);\n-        db.set_enable_proc_attr_macros(Default::default());\n+        db.set_enable_proc_attr_macros(false);\n         db.update_lru_capacity(lru_capacity);\n         db\n     }\n@@ -204,6 +219,21 @@ impl From<FileSymbolKind> for SymbolKind {\n     }\n }\n \n+#[derive(Clone, Copy, Debug, PartialEq, Eq)]\n+pub struct SnippetCap {\n+    _private: (),\n+}\n+\n+impl SnippetCap {\n+    pub const fn new(allow_snippets: bool) -> Option<SnippetCap> {\n+        if allow_snippets {\n+            Some(SnippetCap { _private: () })\n+        } else {\n+            None\n+        }\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     mod sourcegen_lints;"}, {"sha": "68ad07ee83fde307cbf5f754fae1872a48063fcb", "filename": "crates/ide_db/src/line_index.rs", "status": "modified", "additions": 138, "deletions": 6, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_db%2Fsrc%2Fline_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_db%2Fsrc%2Fline_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fline_index.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -1,6 +1,6 @@\n //! `LineIndex` maps flat `TextSize` offsets into `(Line, Column)`\n //! representation.\n-use std::iter;\n+use std::{iter, mem};\n \n use rustc_hash::FxHashMap;\n use syntax::{TextRange, TextSize};\n@@ -59,8 +59,7 @@ impl LineIndex {\n         let mut utf16_chars = Vec::new();\n \n         let mut newlines = vec![0.into()];\n-        let mut curr_row = 0.into();\n-        let mut curr_col = 0.into();\n+        let mut curr_row @ mut curr_col = 0.into();\n         let mut line = 0;\n         for c in text.chars() {\n             let c_len = TextSize::of(c);\n@@ -70,8 +69,7 @@ impl LineIndex {\n \n                 // Save any utf-16 characters seen in the previous line\n                 if !utf16_chars.is_empty() {\n-                    utf16_lines.insert(line, utf16_chars);\n-                    utf16_chars = Vec::new();\n+                    utf16_lines.insert(line, mem::take(&mut utf16_chars));\n                 }\n \n                 // Prepare for processing the next line\n@@ -165,4 +163,138 @@ impl LineIndex {\n }\n \n #[cfg(test)]\n-mod tests;\n+mod tests {\n+    use super::*;\n+\n+    #[test]\n+    fn test_line_index() {\n+        let text = \"hello\\nworld\";\n+        let table = [\n+            (00, 0, 0),\n+            (01, 0, 1),\n+            (05, 0, 5),\n+            (06, 1, 0),\n+            (07, 1, 1),\n+            (08, 1, 2),\n+            (10, 1, 4),\n+            (11, 1, 5),\n+            (12, 1, 6),\n+        ];\n+\n+        let index = LineIndex::new(text);\n+        for &(offset, line, col) in &table {\n+            assert_eq!(index.line_col(offset.into()), LineCol { line, col });\n+        }\n+\n+        let text = \"\\nhello\\nworld\";\n+        let table = [(0, 0, 0), (1, 1, 0), (2, 1, 1), (6, 1, 5), (7, 2, 0)];\n+        let index = LineIndex::new(text);\n+        for &(offset, line, col) in &table {\n+            assert_eq!(index.line_col(offset.into()), LineCol { line, col });\n+        }\n+    }\n+\n+    #[test]\n+    fn test_char_len() {\n+        assert_eq!('\u30e1'.len_utf8(), 3);\n+        assert_eq!('\u30e1'.len_utf16(), 1);\n+    }\n+\n+    #[test]\n+    fn test_empty_index() {\n+        let col_index = LineIndex::new(\n+            \"\n+const C: char = 'x';\n+\",\n+        );\n+        assert_eq!(col_index.utf16_lines.len(), 0);\n+    }\n+\n+    #[test]\n+    fn test_single_char() {\n+        let col_index = LineIndex::new(\n+            \"\n+const C: char = '\u30e1';\n+\",\n+        );\n+\n+        assert_eq!(col_index.utf16_lines.len(), 1);\n+        assert_eq!(col_index.utf16_lines[&1].len(), 1);\n+        assert_eq!(col_index.utf16_lines[&1][0], Utf16Char { start: 17.into(), end: 20.into() });\n+\n+        // UTF-8 to UTF-16, no changes\n+        assert_eq!(col_index.utf8_to_utf16_col(1, 15.into()), 15);\n+\n+        // UTF-8 to UTF-16\n+        assert_eq!(col_index.utf8_to_utf16_col(1, 22.into()), 20);\n+\n+        // UTF-16 to UTF-8, no changes\n+        assert_eq!(col_index.utf16_to_utf8_col(1, 15), TextSize::from(15));\n+\n+        // UTF-16 to UTF-8\n+        assert_eq!(col_index.utf16_to_utf8_col(1, 19), TextSize::from(21));\n+\n+        let col_index = LineIndex::new(\"a\ud801\udc0fb\");\n+        assert_eq!(col_index.utf16_to_utf8_col(0, 3), TextSize::from(5));\n+    }\n+\n+    #[test]\n+    fn test_string() {\n+        let col_index = LineIndex::new(\n+            \"\n+const C: char = \\\"\u30e1 \u30e1\\\";\n+\",\n+        );\n+\n+        assert_eq!(col_index.utf16_lines.len(), 1);\n+        assert_eq!(col_index.utf16_lines[&1].len(), 2);\n+        assert_eq!(col_index.utf16_lines[&1][0], Utf16Char { start: 17.into(), end: 20.into() });\n+        assert_eq!(col_index.utf16_lines[&1][1], Utf16Char { start: 21.into(), end: 24.into() });\n+\n+        // UTF-8 to UTF-16\n+        assert_eq!(col_index.utf8_to_utf16_col(1, 15.into()), 15);\n+\n+        assert_eq!(col_index.utf8_to_utf16_col(1, 21.into()), 19);\n+        assert_eq!(col_index.utf8_to_utf16_col(1, 25.into()), 21);\n+\n+        assert!(col_index.utf8_to_utf16_col(2, 15.into()) == 15);\n+\n+        // UTF-16 to UTF-8\n+        assert_eq!(col_index.utf16_to_utf8_col(1, 15), TextSize::from(15));\n+\n+        // \u30e1 UTF-8: 0xE3 0x83 0xA1, UTF-16: 0x30E1\n+        assert_eq!(col_index.utf16_to_utf8_col(1, 17), TextSize::from(17)); // first \u30e1 at 17..20\n+        assert_eq!(col_index.utf16_to_utf8_col(1, 18), TextSize::from(20)); // space\n+        assert_eq!(col_index.utf16_to_utf8_col(1, 19), TextSize::from(21)); // second \u30e1 at 21..24\n+\n+        assert_eq!(col_index.utf16_to_utf8_col(2, 15), TextSize::from(15));\n+    }\n+\n+    #[test]\n+    fn test_splitlines() {\n+        fn r(lo: u32, hi: u32) -> TextRange {\n+            TextRange::new(lo.into(), hi.into())\n+        }\n+\n+        let text = \"a\\nbb\\nccc\\n\";\n+        let line_index = LineIndex::new(text);\n+\n+        let actual = line_index.lines(r(0, 9)).collect::<Vec<_>>();\n+        let expected = vec![r(0, 2), r(2, 5), r(5, 9)];\n+        assert_eq!(actual, expected);\n+\n+        let text = \"\";\n+        let line_index = LineIndex::new(text);\n+\n+        let actual = line_index.lines(r(0, 0)).collect::<Vec<_>>();\n+        let expected = vec![];\n+        assert_eq!(actual, expected);\n+\n+        let text = \"\\n\";\n+        let line_index = LineIndex::new(text);\n+\n+        let actual = line_index.lines(r(0, 1)).collect::<Vec<_>>();\n+        let expected = vec![r(0, 1)];\n+        assert_eq!(actual, expected)\n+    }\n+}"}, {"sha": "09f3bca626c2e860bdccaaddcfb216a2e8b1af80", "filename": "crates/ide_db/src/line_index/tests.rs", "status": "removed", "additions": 0, "deletions": 133, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/c1f91c93b2b92301f4ac9d90fd7f22e9519bbd7b/crates%2Fide_db%2Fsrc%2Fline_index%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1f91c93b2b92301f4ac9d90fd7f22e9519bbd7b/crates%2Fide_db%2Fsrc%2Fline_index%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fline_index%2Ftests.rs?ref=c1f91c93b2b92301f4ac9d90fd7f22e9519bbd7b", "patch": "@@ -1,133 +0,0 @@\n-use super::*;\n-\n-#[test]\n-fn test_line_index() {\n-    let text = \"hello\\nworld\";\n-    let table = [\n-        (00, 0, 0),\n-        (01, 0, 1),\n-        (05, 0, 5),\n-        (06, 1, 0),\n-        (07, 1, 1),\n-        (08, 1, 2),\n-        (10, 1, 4),\n-        (11, 1, 5),\n-        (12, 1, 6),\n-    ];\n-\n-    let index = LineIndex::new(text);\n-    for &(offset, line, col) in &table {\n-        assert_eq!(index.line_col(offset.into()), LineCol { line, col });\n-    }\n-\n-    let text = \"\\nhello\\nworld\";\n-    let table = [(0, 0, 0), (1, 1, 0), (2, 1, 1), (6, 1, 5), (7, 2, 0)];\n-    let index = LineIndex::new(text);\n-    for &(offset, line, col) in &table {\n-        assert_eq!(index.line_col(offset.into()), LineCol { line, col });\n-    }\n-}\n-\n-#[test]\n-fn test_char_len() {\n-    assert_eq!('\u30e1'.len_utf8(), 3);\n-    assert_eq!('\u30e1'.len_utf16(), 1);\n-}\n-\n-#[test]\n-fn test_empty_index() {\n-    let col_index = LineIndex::new(\n-        \"\n-const C: char = 'x';\n-\",\n-    );\n-    assert_eq!(col_index.utf16_lines.len(), 0);\n-}\n-\n-#[test]\n-fn test_single_char() {\n-    let col_index = LineIndex::new(\n-        \"\n-const C: char = '\u30e1';\n-\",\n-    );\n-\n-    assert_eq!(col_index.utf16_lines.len(), 1);\n-    assert_eq!(col_index.utf16_lines[&1].len(), 1);\n-    assert_eq!(col_index.utf16_lines[&1][0], Utf16Char { start: 17.into(), end: 20.into() });\n-\n-    // UTF-8 to UTF-16, no changes\n-    assert_eq!(col_index.utf8_to_utf16_col(1, 15.into()), 15);\n-\n-    // UTF-8 to UTF-16\n-    assert_eq!(col_index.utf8_to_utf16_col(1, 22.into()), 20);\n-\n-    // UTF-16 to UTF-8, no changes\n-    assert_eq!(col_index.utf16_to_utf8_col(1, 15), TextSize::from(15));\n-\n-    // UTF-16 to UTF-8\n-    assert_eq!(col_index.utf16_to_utf8_col(1, 19), TextSize::from(21));\n-\n-    let col_index = LineIndex::new(\"a\ud801\udc0fb\");\n-    assert_eq!(col_index.utf16_to_utf8_col(0, 3), TextSize::from(5));\n-}\n-\n-#[test]\n-fn test_string() {\n-    let col_index = LineIndex::new(\n-        \"\n-const C: char = \\\"\u30e1 \u30e1\\\";\n-\",\n-    );\n-\n-    assert_eq!(col_index.utf16_lines.len(), 1);\n-    assert_eq!(col_index.utf16_lines[&1].len(), 2);\n-    assert_eq!(col_index.utf16_lines[&1][0], Utf16Char { start: 17.into(), end: 20.into() });\n-    assert_eq!(col_index.utf16_lines[&1][1], Utf16Char { start: 21.into(), end: 24.into() });\n-\n-    // UTF-8 to UTF-16\n-    assert_eq!(col_index.utf8_to_utf16_col(1, 15.into()), 15);\n-\n-    assert_eq!(col_index.utf8_to_utf16_col(1, 21.into()), 19);\n-    assert_eq!(col_index.utf8_to_utf16_col(1, 25.into()), 21);\n-\n-    assert!(col_index.utf8_to_utf16_col(2, 15.into()) == 15);\n-\n-    // UTF-16 to UTF-8\n-    assert_eq!(col_index.utf16_to_utf8_col(1, 15), TextSize::from(15));\n-\n-    // \u30e1 UTF-8: 0xE3 0x83 0xA1, UTF-16: 0x30E1\n-    assert_eq!(col_index.utf16_to_utf8_col(1, 17), TextSize::from(17)); // first \u30e1 at 17..20\n-    assert_eq!(col_index.utf16_to_utf8_col(1, 18), TextSize::from(20)); // space\n-    assert_eq!(col_index.utf16_to_utf8_col(1, 19), TextSize::from(21)); // second \u30e1 at 21..24\n-\n-    assert_eq!(col_index.utf16_to_utf8_col(2, 15), TextSize::from(15));\n-}\n-\n-#[test]\n-fn test_splitlines() {\n-    fn r(lo: u32, hi: u32) -> TextRange {\n-        TextRange::new(lo.into(), hi.into())\n-    }\n-\n-    let text = \"a\\nbb\\nccc\\n\";\n-    let line_index = LineIndex::new(text);\n-\n-    let actual = line_index.lines(r(0, 9)).collect::<Vec<_>>();\n-    let expected = vec![r(0, 2), r(2, 5), r(5, 9)];\n-    assert_eq!(actual, expected);\n-\n-    let text = \"\";\n-    let line_index = LineIndex::new(text);\n-\n-    let actual = line_index.lines(r(0, 0)).collect::<Vec<_>>();\n-    let expected = vec![];\n-    assert_eq!(actual, expected);\n-\n-    let text = \"\\n\";\n-    let line_index = LineIndex::new(text);\n-\n-    let actual = line_index.lines(r(0, 1)).collect::<Vec<_>>();\n-    let expected = vec![r(0, 1)];\n-    assert_eq!(actual, expected)\n-}"}, {"sha": "13234a817b2f931566f7fd4c435b040776572e4a", "filename": "crates/ide_db/src/rename.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_db%2Fsrc%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_db%2Fsrc%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Frename.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -10,7 +10,7 @@\n //!\n //! Another can of worms are macros:\n //!\n-//! ```\n+//! ```ignore\n //! macro_rules! m { () => { fn f() {} } }\n //! m!();\n //! fn main() {\n@@ -34,9 +34,9 @@ use text_edit::{TextEdit, TextEditBuilder};\n \n use crate::{\n     defs::Definition,\n-    helpers::node_ext::expr_as_name_ref,\n     search::FileReference,\n     source_change::{FileSystemEdit, SourceChange},\n+    syntax_helpers::node_ext::expr_as_name_ref,\n     RootDatabase,\n };\n "}, {"sha": "e27e23867a8b82ef6c0b896d75585a5bd64bd597", "filename": "crates/ide_db/src/rust_doc.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_db%2Fsrc%2Frust_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_db%2Fsrc%2Frust_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Frust_doc.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "previous_filename": "crates/ide_db/src/helpers/rust_doc.rs"}, {"sha": "3c584a6cbc977497218ba4511ab2badd024250db", "filename": "crates/ide_db/src/syntax_helpers/format_string.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_db%2Fsrc%2Fsyntax_helpers%2Fformat_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_db%2Fsrc%2Fsyntax_helpers%2Fformat_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsyntax_helpers%2Fformat_string.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "previous_filename": "crates/ide_db/src/helpers/format_string.rs"}, {"sha": "d59f13b9a1c8e2d785331a586a784f4b6f7ceb99", "filename": "crates/ide_db/src/syntax_helpers/insert_whitespace_into_node.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_db%2Fsrc%2Fsyntax_helpers%2Finsert_whitespace_into_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_db%2Fsrc%2Fsyntax_helpers%2Finsert_whitespace_into_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsyntax_helpers%2Finsert_whitespace_into_node.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "previous_filename": "crates/ide_db/src/helpers/insert_whitespace_into_node.rs"}, {"sha": "115d83c6e25041f184f9f0b415c4e5df295de5be", "filename": "crates/ide_db/src/syntax_helpers/node_ext.rs", "status": "renamed", "additions": 216, "deletions": 2, "changes": 218, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_db%2Fsrc%2Fsyntax_helpers%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_db%2Fsrc%2Fsyntax_helpers%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsyntax_helpers%2Fnode_ext.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -1,7 +1,9 @@\n //! Various helper functions to work with SyntaxNodes.\n+use itertools::Itertools;\n+use parser::T;\n use syntax::{\n-    ast::{self, PathSegmentKind, VisibilityKind},\n-    AstNode, WalkEvent,\n+    ast::{self, HasLoopBody, PathSegmentKind, VisibilityKind},\n+    AstNode, Preorder, RustLanguage, WalkEvent,\n };\n \n pub fn expr_as_name_ref(expr: &ast::Expr) -> Option<ast::NameRef> {\n@@ -242,3 +244,215 @@ pub fn is_pattern_cond(expr: ast::Expr) -> bool {\n         _ => false,\n     }\n }\n+\n+/// Calls `cb` on each expression inside `expr` that is at \"tail position\".\n+/// Does not walk into `break` or `return` expressions.\n+/// Note that modifying the tree while iterating it will cause undefined iteration which might\n+/// potentially results in an out of bounds panic.\n+pub fn for_each_tail_expr(expr: &ast::Expr, cb: &mut dyn FnMut(&ast::Expr)) {\n+    match expr {\n+        ast::Expr::BlockExpr(b) => {\n+            match b.modifier() {\n+                Some(\n+                    ast::BlockModifier::Async(_)\n+                    | ast::BlockModifier::Try(_)\n+                    | ast::BlockModifier::Const(_),\n+                ) => return cb(expr),\n+\n+                Some(ast::BlockModifier::Label(label)) => {\n+                    for_each_break_expr(Some(label), b.stmt_list(), &mut |b| {\n+                        cb(&ast::Expr::BreakExpr(b))\n+                    });\n+                }\n+                Some(ast::BlockModifier::Unsafe(_)) => (),\n+                None => (),\n+            }\n+            if let Some(stmt_list) = b.stmt_list() {\n+                if let Some(e) = stmt_list.tail_expr() {\n+                    for_each_tail_expr(&e, cb);\n+                }\n+            }\n+        }\n+        ast::Expr::IfExpr(if_) => {\n+            let mut if_ = if_.clone();\n+            loop {\n+                if let Some(block) = if_.then_branch() {\n+                    for_each_tail_expr(&ast::Expr::BlockExpr(block), cb);\n+                }\n+                match if_.else_branch() {\n+                    Some(ast::ElseBranch::IfExpr(it)) => if_ = it,\n+                    Some(ast::ElseBranch::Block(block)) => {\n+                        for_each_tail_expr(&ast::Expr::BlockExpr(block), cb);\n+                        break;\n+                    }\n+                    None => break,\n+                }\n+            }\n+        }\n+        ast::Expr::LoopExpr(l) => {\n+            for_each_break_expr(l.label(), l.loop_body().and_then(|it| it.stmt_list()), &mut |b| {\n+                cb(&ast::Expr::BreakExpr(b))\n+            })\n+        }\n+        ast::Expr::MatchExpr(m) => {\n+            if let Some(arms) = m.match_arm_list() {\n+                arms.arms().filter_map(|arm| arm.expr()).for_each(|e| for_each_tail_expr(&e, cb));\n+            }\n+        }\n+        ast::Expr::ArrayExpr(_)\n+        | ast::Expr::AwaitExpr(_)\n+        | ast::Expr::BinExpr(_)\n+        | ast::Expr::BoxExpr(_)\n+        | ast::Expr::BreakExpr(_)\n+        | ast::Expr::CallExpr(_)\n+        | ast::Expr::CastExpr(_)\n+        | ast::Expr::ClosureExpr(_)\n+        | ast::Expr::ContinueExpr(_)\n+        | ast::Expr::FieldExpr(_)\n+        | ast::Expr::ForExpr(_)\n+        | ast::Expr::IndexExpr(_)\n+        | ast::Expr::Literal(_)\n+        | ast::Expr::MacroCall(_)\n+        | ast::Expr::MacroStmts(_)\n+        | ast::Expr::MethodCallExpr(_)\n+        | ast::Expr::ParenExpr(_)\n+        | ast::Expr::PathExpr(_)\n+        | ast::Expr::PrefixExpr(_)\n+        | ast::Expr::RangeExpr(_)\n+        | ast::Expr::RecordExpr(_)\n+        | ast::Expr::RefExpr(_)\n+        | ast::Expr::ReturnExpr(_)\n+        | ast::Expr::TryExpr(_)\n+        | ast::Expr::TupleExpr(_)\n+        | ast::Expr::WhileExpr(_)\n+        | ast::Expr::LetExpr(_)\n+        | ast::Expr::UnderscoreExpr(_)\n+        | ast::Expr::YieldExpr(_) => cb(expr),\n+    }\n+}\n+\n+pub fn for_each_break_and_continue_expr(\n+    label: Option<ast::Label>,\n+    body: Option<ast::StmtList>,\n+    cb: &mut dyn FnMut(ast::Expr),\n+) {\n+    let label = label.and_then(|lbl| lbl.lifetime());\n+    if let Some(b) = body {\n+        let tree_depth_iterator = TreeWithDepthIterator::new(b);\n+        for (expr, depth) in tree_depth_iterator {\n+            match expr {\n+                ast::Expr::BreakExpr(b)\n+                    if (depth == 0 && b.lifetime().is_none())\n+                        || eq_label_lt(&label, &b.lifetime()) =>\n+                {\n+                    cb(ast::Expr::BreakExpr(b));\n+                }\n+                ast::Expr::ContinueExpr(c)\n+                    if (depth == 0 && c.lifetime().is_none())\n+                        || eq_label_lt(&label, &c.lifetime()) =>\n+                {\n+                    cb(ast::Expr::ContinueExpr(c));\n+                }\n+                _ => (),\n+            }\n+        }\n+    }\n+}\n+\n+fn for_each_break_expr(\n+    label: Option<ast::Label>,\n+    body: Option<ast::StmtList>,\n+    cb: &mut dyn FnMut(ast::BreakExpr),\n+) {\n+    let label = label.and_then(|lbl| lbl.lifetime());\n+    if let Some(b) = body {\n+        let tree_depth_iterator = TreeWithDepthIterator::new(b);\n+        for (expr, depth) in tree_depth_iterator {\n+            match expr {\n+                ast::Expr::BreakExpr(b)\n+                    if (depth == 0 && b.lifetime().is_none())\n+                        || eq_label_lt(&label, &b.lifetime()) =>\n+                {\n+                    cb(b);\n+                }\n+                _ => (),\n+            }\n+        }\n+    }\n+}\n+\n+fn eq_label_lt(lt1: &Option<ast::Lifetime>, lt2: &Option<ast::Lifetime>) -> bool {\n+    lt1.as_ref().zip(lt2.as_ref()).map_or(false, |(lt, lbl)| lt.text() == lbl.text())\n+}\n+\n+struct TreeWithDepthIterator {\n+    preorder: Preorder<RustLanguage>,\n+    depth: u32,\n+}\n+\n+impl TreeWithDepthIterator {\n+    fn new(body: ast::StmtList) -> Self {\n+        let preorder = body.syntax().preorder();\n+        Self { preorder, depth: 0 }\n+    }\n+}\n+\n+impl<'a> Iterator for TreeWithDepthIterator {\n+    type Item = (ast::Expr, u32);\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        while let Some(event) = self.preorder.find_map(|ev| match ev {\n+            WalkEvent::Enter(it) => ast::Expr::cast(it).map(WalkEvent::Enter),\n+            WalkEvent::Leave(it) => ast::Expr::cast(it).map(WalkEvent::Leave),\n+        }) {\n+            match event {\n+                WalkEvent::Enter(\n+                    ast::Expr::LoopExpr(_) | ast::Expr::WhileExpr(_) | ast::Expr::ForExpr(_),\n+                ) => {\n+                    self.depth += 1;\n+                }\n+                WalkEvent::Leave(\n+                    ast::Expr::LoopExpr(_) | ast::Expr::WhileExpr(_) | ast::Expr::ForExpr(_),\n+                ) => {\n+                    self.depth -= 1;\n+                }\n+                WalkEvent::Enter(ast::Expr::BlockExpr(e)) if e.label().is_some() => {\n+                    self.depth += 1;\n+                }\n+                WalkEvent::Leave(ast::Expr::BlockExpr(e)) if e.label().is_some() => {\n+                    self.depth -= 1;\n+                }\n+                WalkEvent::Enter(expr) => return Some((expr, self.depth)),\n+                _ => (),\n+            }\n+        }\n+        None\n+    }\n+}\n+\n+/// Parses the input token tree as comma separated plain paths.\n+pub fn parse_tt_as_comma_sep_paths(input: ast::TokenTree) -> Option<Vec<ast::Path>> {\n+    let r_paren = input.r_paren_token();\n+    let tokens =\n+        input.syntax().children_with_tokens().skip(1).map_while(|it| match it.into_token() {\n+            // seeing a keyword means the attribute is unclosed so stop parsing here\n+            Some(tok) if tok.kind().is_keyword() => None,\n+            // don't include the right token tree parenthesis if it exists\n+            tok @ Some(_) if tok == r_paren => None,\n+            // only nodes that we can find are other TokenTrees, those are unexpected in this parse though\n+            None => None,\n+            Some(tok) => Some(tok),\n+        });\n+    let input_expressions = tokens.into_iter().group_by(|tok| tok.kind() == T![,]);\n+    let paths = input_expressions\n+        .into_iter()\n+        .filter_map(|(is_sep, group)| (!is_sep).then(|| group))\n+        .filter_map(|mut tokens| {\n+            syntax::hacks::parse_expr_from_str(&tokens.join(\"\")).and_then(|expr| match expr {\n+                ast::Expr::PathExpr(it) => it.path(),\n+                _ => None,\n+            })\n+        })\n+        .collect();\n+    Some(paths)\n+}", "previous_filename": "crates/ide_db/src/helpers/node_ext.rs"}, {"sha": "44f8f2179511bf419019451d1e633c4fde6498da", "filename": "crates/ide_db/src/tests/sourcegen_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_db%2Fsrc%2Ftests%2Fsourcegen_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_db%2Fsrc%2Ftests%2Fsourcegen_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Ftests%2Fsourcegen_lints.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -44,7 +44,7 @@ pub struct LintGroup {\n \n     let contents = sourcegen::add_preamble(\"sourcegen_lints\", sourcegen::reformat(contents));\n \n-    let destination = project_root().join(\"crates/ide_db/src/helpers/generated_lints.rs\");\n+    let destination = project_root().join(\"crates/ide_db/src/generated/lints.rs\");\n     sourcegen::ensure_file_contents(destination.as_path(), &contents);\n }\n "}, {"sha": "c8cb1a26a871d1add43dad432a764a9968708378", "filename": "crates/ide_db/src/traits.rs", "status": "modified", "additions": 144, "deletions": 1, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_db%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_db%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Ftraits.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -77,4 +77,147 @@ pub fn get_missing_assoc_items(\n }\n \n #[cfg(test)]\n-mod tests;\n+mod tests {\n+    use base_db::{fixture::ChangeFixture, FilePosition};\n+    use expect_test::{expect, Expect};\n+    use hir::Semantics;\n+    use syntax::ast::{self, AstNode};\n+\n+    use crate::RootDatabase;\n+\n+    /// Creates analysis from a multi-file fixture, returns positions marked with $0.\n+    pub(crate) fn position(ra_fixture: &str) -> (RootDatabase, FilePosition) {\n+        let change_fixture = ChangeFixture::parse(ra_fixture);\n+        let mut database = RootDatabase::default();\n+        database.apply_change(change_fixture.change);\n+        let (file_id, range_or_offset) =\n+            change_fixture.file_position.expect(\"expected a marker ($0)\");\n+        let offset = range_or_offset.expect_offset();\n+        (database, FilePosition { file_id, offset })\n+    }\n+\n+    fn check_trait(ra_fixture: &str, expect: Expect) {\n+        let (db, position) = position(ra_fixture);\n+        let sema = Semantics::new(&db);\n+        let file = sema.parse(position.file_id);\n+        let impl_block: ast::Impl =\n+            sema.find_node_at_offset_with_descend(file.syntax(), position.offset).unwrap();\n+        let trait_ = crate::traits::resolve_target_trait(&sema, &impl_block);\n+        let actual = match trait_ {\n+            Some(trait_) => trait_.name(&db).to_string(),\n+            None => String::new(),\n+        };\n+        expect.assert_eq(&actual);\n+    }\n+\n+    fn check_missing_assoc(ra_fixture: &str, expect: Expect) {\n+        let (db, position) = position(ra_fixture);\n+        let sema = Semantics::new(&db);\n+        let file = sema.parse(position.file_id);\n+        let impl_block: ast::Impl =\n+            sema.find_node_at_offset_with_descend(file.syntax(), position.offset).unwrap();\n+        let items = crate::traits::get_missing_assoc_items(&sema, &impl_block);\n+        let actual = items\n+            .into_iter()\n+            .map(|item| item.name(&db).unwrap().to_string())\n+            .collect::<Vec<_>>()\n+            .join(\"\\n\");\n+        expect.assert_eq(&actual);\n+    }\n+\n+    #[test]\n+    fn resolve_trait() {\n+        check_trait(\n+            r#\"\n+pub trait Foo {\n+    fn bar();\n+}\n+impl Foo for u8 {\n+    $0\n+}\n+            \"#,\n+            expect![[\"Foo\"]],\n+        );\n+        check_trait(\n+            r#\"\n+pub trait Foo {\n+    fn bar();\n+}\n+impl Foo for u8 {\n+    fn bar() {\n+        fn baz() {\n+            $0\n+        }\n+        baz();\n+    }\n+}\n+            \"#,\n+            expect![[\"Foo\"]],\n+        );\n+        check_trait(\n+            r#\"\n+pub trait Foo {\n+    fn bar();\n+}\n+pub struct Bar;\n+impl Bar {\n+    $0\n+}\n+            \"#,\n+            expect![[\"\"]],\n+        );\n+    }\n+\n+    #[test]\n+    fn missing_assoc_items() {\n+        check_missing_assoc(\n+            r#\"\n+pub trait Foo {\n+    const FOO: u8;\n+    fn bar();\n+}\n+impl Foo for u8 {\n+    $0\n+}\"#,\n+            expect![[r#\"\n+                FOO\n+                bar\"#]],\n+        );\n+\n+        check_missing_assoc(\n+            r#\"\n+pub trait Foo {\n+    const FOO: u8;\n+    fn bar();\n+}\n+impl Foo for u8 {\n+    const FOO: u8 = 10;\n+    $0\n+}\"#,\n+            expect![[r#\"\n+                bar\"#]],\n+        );\n+\n+        check_missing_assoc(\n+            r#\"\n+pub trait Foo {\n+    const FOO: u8;\n+    fn bar();\n+}\n+impl Foo for u8 {\n+    const FOO: u8 = 10;\n+    fn bar() {$0}\n+}\"#,\n+            expect![[r#\"\"#]],\n+        );\n+\n+        check_missing_assoc(\n+            r#\"\n+pub struct Foo;\n+impl Foo {\n+    fn bar() {$0}\n+}\"#,\n+            expect![[r#\"\"#]],\n+        );\n+    }\n+}"}, {"sha": "de994407c7ca464061eee92c59aa604154ae1b76", "filename": "crates/ide_db/src/traits/tests.rs", "status": "removed", "additions": 0, "deletions": 141, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/c1f91c93b2b92301f4ac9d90fd7f22e9519bbd7b/crates%2Fide_db%2Fsrc%2Ftraits%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1f91c93b2b92301f4ac9d90fd7f22e9519bbd7b/crates%2Fide_db%2Fsrc%2Ftraits%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Ftraits%2Ftests.rs?ref=c1f91c93b2b92301f4ac9d90fd7f22e9519bbd7b", "patch": "@@ -1,141 +0,0 @@\n-use base_db::{fixture::ChangeFixture, FilePosition};\n-use expect_test::{expect, Expect};\n-use hir::Semantics;\n-use syntax::ast::{self, AstNode};\n-\n-use crate::RootDatabase;\n-\n-/// Creates analysis from a multi-file fixture, returns positions marked with $0.\n-pub(crate) fn position(ra_fixture: &str) -> (RootDatabase, FilePosition) {\n-    let change_fixture = ChangeFixture::parse(ra_fixture);\n-    let mut database = RootDatabase::default();\n-    database.apply_change(change_fixture.change);\n-    let (file_id, range_or_offset) = change_fixture.file_position.expect(\"expected a marker ($0)\");\n-    let offset = range_or_offset.expect_offset();\n-    (database, FilePosition { file_id, offset })\n-}\n-\n-fn check_trait(ra_fixture: &str, expect: Expect) {\n-    let (db, position) = position(ra_fixture);\n-    let sema = Semantics::new(&db);\n-    let file = sema.parse(position.file_id);\n-    let impl_block: ast::Impl =\n-        sema.find_node_at_offset_with_descend(file.syntax(), position.offset).unwrap();\n-    let trait_ = crate::traits::resolve_target_trait(&sema, &impl_block);\n-    let actual = match trait_ {\n-        Some(trait_) => trait_.name(&db).to_string(),\n-        None => String::new(),\n-    };\n-    expect.assert_eq(&actual);\n-}\n-\n-fn check_missing_assoc(ra_fixture: &str, expect: Expect) {\n-    let (db, position) = position(ra_fixture);\n-    let sema = Semantics::new(&db);\n-    let file = sema.parse(position.file_id);\n-    let impl_block: ast::Impl =\n-        sema.find_node_at_offset_with_descend(file.syntax(), position.offset).unwrap();\n-    let items = crate::traits::get_missing_assoc_items(&sema, &impl_block);\n-    let actual = items\n-        .into_iter()\n-        .map(|item| item.name(&db).unwrap().to_string())\n-        .collect::<Vec<_>>()\n-        .join(\"\\n\");\n-    expect.assert_eq(&actual);\n-}\n-\n-#[test]\n-fn resolve_trait() {\n-    check_trait(\n-        r#\"\n-pub trait Foo {\n-    fn bar();\n-}\n-impl Foo for u8 {\n-    $0\n-}\n-            \"#,\n-        expect![[\"Foo\"]],\n-    );\n-    check_trait(\n-        r#\"\n-pub trait Foo {\n-    fn bar();\n-}\n-impl Foo for u8 {\n-    fn bar() {\n-        fn baz() {\n-            $0\n-        }\n-        baz();\n-    }\n-}\n-            \"#,\n-        expect![[\"Foo\"]],\n-    );\n-    check_trait(\n-        r#\"\n-pub trait Foo {\n-    fn bar();\n-}\n-pub struct Bar;\n-impl Bar {\n-    $0\n-}\n-            \"#,\n-        expect![[\"\"]],\n-    );\n-}\n-\n-#[test]\n-fn missing_assoc_items() {\n-    check_missing_assoc(\n-        r#\"\n-pub trait Foo {\n-    const FOO: u8;\n-    fn bar();\n-}\n-impl Foo for u8 {\n-    $0\n-}\"#,\n-        expect![[r#\"\n-                FOO\n-                bar\"#]],\n-    );\n-\n-    check_missing_assoc(\n-        r#\"\n-pub trait Foo {\n-    const FOO: u8;\n-    fn bar();\n-}\n-impl Foo for u8 {\n-    const FOO: u8 = 10;\n-    $0\n-}\"#,\n-        expect![[r#\"\n-                bar\"#]],\n-    );\n-\n-    check_missing_assoc(\n-        r#\"\n-pub trait Foo {\n-    const FOO: u8;\n-    fn bar();\n-}\n-impl Foo for u8 {\n-    const FOO: u8 = 10;\n-    fn bar() {$0}\n-}\"#,\n-        expect![[r#\"\"#]],\n-    );\n-\n-    check_missing_assoc(\n-        r#\"\n-pub struct Foo;\n-impl Foo {\n-    fn bar() {$0}\n-}\"#,\n-        expect![[r#\"\"#]],\n-    );\n-}"}, {"sha": "8b3c22fffcea3ab3ade1cec6cba6a6c932cb76bc", "filename": "crates/ide_diagnostics/src/handlers/missing_fields.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_fields.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -3,7 +3,7 @@ use hir::{\n     db::{AstDatabase, HirDatabase},\n     known, AssocItem, HirDisplay, InFile, Type,\n };\n-use ide_db::{assists::Assist, helpers::FamousDefs, source_change::SourceChange};\n+use ide_db::{assists::Assist, famous_defs::FamousDefs, source_change::SourceChange};\n use rustc_hash::FxHashMap;\n use stdx::format_to;\n use syntax::{"}, {"sha": "d5635ba8baf355d93a85f0767873c7cf4235d4f3", "filename": "crates/ide_diagnostics/src/handlers/missing_ok_or_some_in_tail_expr.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_ok_or_some_in_tail_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_ok_or_some_in_tail_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_ok_or_some_in_tail_expr.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -1,5 +1,7 @@\n use hir::{db::AstDatabase, TypeInfo};\n-use ide_db::{assists::Assist, helpers::for_each_tail_expr, source_change::SourceChange};\n+use ide_db::{\n+    assists::Assist, source_change::SourceChange, syntax_helpers::node_ext::for_each_tail_expr,\n+};\n use syntax::AstNode;\n use text_edit::TextEdit;\n "}, {"sha": "1194fd9fafba56b435470331cdbad3c151beb78b", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -14,8 +14,8 @@ use ide::{\n     AssistConfig, CompletionConfig, DiagnosticsConfig, ExprFillDefaultMode, HighlightRelatedConfig,\n     HoverConfig, HoverDocFormat, InlayHintsConfig, JoinLinesConfig, Snippet, SnippetScope,\n };\n-use ide_db::helpers::{\n-    insert_use::{ImportGranularity, InsertUseConfig, PrefixKind},\n+use ide_db::{\n+    imports::insert_use::{ImportGranularity, InsertUseConfig, PrefixKind},\n     SnippetCap,\n };\n use lsp_types::{ClientCapabilities, MarkupKind};"}, {"sha": "b1f8958e92a409b40504605f2c5f4d8ae883e232", "filename": "crates/rust-analyzer/src/integrated_benchmarks.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Frust-analyzer%2Fsrc%2Fintegrated_benchmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Frust-analyzer%2Fsrc%2Fintegrated_benchmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fintegrated_benchmarks.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -13,8 +13,8 @@\n use std::sync::Arc;\n \n use ide::{Change, CompletionConfig, FilePosition, TextSize};\n-use ide_db::helpers::{\n-    insert_use::{ImportGranularity, InsertUseConfig},\n+use ide_db::{\n+    imports::insert_use::{ImportGranularity, InsertUseConfig},\n     SnippetCap,\n };\n use project_model::CargoConfig;"}, {"sha": "e1ff0f0178baf31298de67904adffa0181ccd26d", "filename": "crates/rust-analyzer/src/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Frust-analyzer%2Fsrc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab21cf2f4f09827eb3a0b20e008f0196c07734e3/crates%2Frust-analyzer%2Fsrc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmarkdown.rs?ref=ab21cf2f4f09827eb3a0b20e008f0196c07734e3", "patch": "@@ -1,5 +1,5 @@\n //! Transforms markdown\n-use ide_db::helpers::rust_doc::is_rust_fence;\n+use ide_db::rust_doc::is_rust_fence;\n \n const RUSTDOC_FENCE: &str = \"```\";\n "}]}