{"sha": "e1685dd9904f1c9d734ac50f85e2d35c9c4356b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxNjg1ZGQ5OTA0ZjFjOWQ3MzRhYzUwZjg1ZTJkMzVjOWM0MzU2Yjc=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-12-06T01:36:51Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-12-06T01:36:51Z"}, "message": "test: More bustage fixes. rs=me", "tree": {"sha": "3572f1d7fa28b1588a19f05837951dccb61998b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3572f1d7fa28b1588a19f05837951dccb61998b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1685dd9904f1c9d734ac50f85e2d35c9c4356b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1685dd9904f1c9d734ac50f85e2d35c9c4356b7", "html_url": "https://github.com/rust-lang/rust/commit/e1685dd9904f1c9d734ac50f85e2d35c9c4356b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1685dd9904f1c9d734ac50f85e2d35c9c4356b7/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "608403227075586dfe676916bdce6796eef3d9bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/608403227075586dfe676916bdce6796eef3d9bb", "html_url": "https://github.com/rust-lang/rust/commit/608403227075586dfe676916bdce6796eef3d9bb"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "8d1b6c9f8eab755d6b575592f44477fe04bd0958", "filename": "src/test/auxiliary/issue-2631-a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1685dd9904f1c9d734ac50f85e2d35c9c4356b7/src%2Ftest%2Fauxiliary%2Fissue-2631-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1685dd9904f1c9d734ac50f85e2d35c9c4356b7/src%2Ftest%2Fauxiliary%2Fissue-2631-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-2631-a.rs?ref=e1685dd9904f1c9d734ac50f85e2d35c9c4356b7", "patch": "@@ -12,5 +12,5 @@ type header_map = HashMap<~str, @DVec<@~str>>;\n \n // the unused ty param is necessary so this gets monomorphized\n fn request<T: Copy>(req: header_map) {\n-  let _x = *(copy *req.get(~\"METHOD\"))[0u];\n+  let _x = copy *(copy *req.get(~\"METHOD\"))[0u];\n }"}, {"sha": "91ae11a572490bd7908292994ae217e52d1dff3a", "filename": "src/test/run-pass/alt-implicit-copy-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1685dd9904f1c9d734ac50f85e2d35c9c4356b7/src%2Ftest%2Frun-pass%2Falt-implicit-copy-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1685dd9904f1c9d734ac50f85e2d35c9c4356b7/src%2Ftest%2Frun-pass%2Falt-implicit-copy-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-implicit-copy-unique.rs?ref=e1685dd9904f1c9d734ac50f85e2d35c9c4356b7", "patch": "@@ -1,7 +1,7 @@\n fn main() {\n     let x = ~{mut a: ~10, b: ~20};\n     match x {\n-      ~{a: ref a, b: ref b} => {\n+      ~{a: ref mut a, b: ref mut b} => {\n         assert **a == 10; (*x).a = ~30; assert **a == 30;\n       }\n     }"}, {"sha": "2ec0b757a19244be96e392e632a2fefbb6b0956d", "filename": "src/test/run-pass/class-exports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1685dd9904f1c9d734ac50f85e2d35c9c4356b7/src%2Ftest%2Frun-pass%2Fclass-exports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1685dd9904f1c9d734ac50f85e2d35c9c4356b7/src%2Ftest%2Frun-pass%2Fclass-exports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-exports.rs?ref=e1685dd9904f1c9d734ac50f85e2d35c9c4356b7", "patch": "@@ -12,7 +12,7 @@ mod kitty {\n   }\n \n   impl cat {\n-    fn get_name() -> ~str {  self.name }\n+    fn get_name() -> ~str { copy self.name }\n   }\n \n     fn cat(in_name: ~str) -> cat {\n@@ -26,4 +26,4 @@ mod kitty {\n \n fn main() {\n   assert(cat(~\"Spreckles\").get_name() == ~\"Spreckles\");\n-}\n\\ No newline at end of file\n+}"}, {"sha": "13b33535abe17d4fa01a1c82ff75676511e203b6", "filename": "src/test/run-pass/class-separate-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1685dd9904f1c9d734ac50f85e2d35c9c4356b7/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1685dd9904f1c9d734ac50f85e2d35c9c4356b7/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs?ref=e1685dd9904f1c9d734ac50f85e2d35c9c4356b7", "patch": "@@ -45,7 +45,7 @@ fn cat(in_x : uint, in_y : int, in_name: ~str) -> cat {\n }\n \n impl cat: ToStr {\n-  pure fn to_str() -> ~str { self.name }\n+  pure fn to_str() -> ~str { copy self.name }\n }\n \n fn print_out<T: ToStr>(thing: T, expected: ~str) {"}, {"sha": "25b0d2ad3705b4942aefeee454c8347c9bd3750e", "filename": "src/test/run-pass/getopts_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1685dd9904f1c9d734ac50f85e2d35c9c4356b7/src%2Ftest%2Frun-pass%2Fgetopts_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1685dd9904f1c9d734ac50f85e2d35c9c4356b7/src%2Ftest%2Frun-pass%2Fgetopts_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgetopts_ref.rs?ref=e1685dd9904f1c9d734ac50f85e2d35c9c4356b7", "patch": "@@ -9,7 +9,7 @@ fn main() {\n     match getopts(args, opts) {\n         result::Ok(ref m)  =>\n             assert !opt_present(m, \"b\"),\n-        result::Err(ref f) => fail fail_str(*f)\n+        result::Err(ref f) => fail fail_str(copy *f)\n     };\n \n }"}, {"sha": "d100a1841f00af69cc6865fd84c9699f64362f77", "filename": "src/test/run-pass/last-use-is-capture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1685dd9904f1c9d734ac50f85e2d35c9c4356b7/src%2Ftest%2Frun-pass%2Flast-use-is-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1685dd9904f1c9d734ac50f85e2d35c9c4356b7/src%2Ftest%2Frun-pass%2Flast-use-is-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flast-use-is-capture.rs?ref=e1685dd9904f1c9d734ac50f85e2d35c9c4356b7", "patch": "@@ -4,5 +4,5 @@ fn main() {\n     fn invoke(f: fn@()) { f(); }\n     let k = ~22;\n     let _u = {a: copy k};\n-    invoke(|| log(error, k) )\n+    invoke(|| log(error, copy k) )\n }"}, {"sha": "0ea212ec620366cc8c2ef564825758147d0a0169", "filename": "src/test/run-pass/operator-overloading.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1685dd9904f1c9d734ac50f85e2d35c9c4356b7/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1685dd9904f1c9d734ac50f85e2d35c9c4356b7/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foperator-overloading.rs?ref=e1685dd9904f1c9d734ac50f85e2d35c9c4356b7", "patch": "@@ -25,7 +25,7 @@ impl Point : ops::Neg<Point> {\n }\n \n impl Point : ops::Index<bool,int> {\n-    pure fn index(+x: bool) -> int {\n+    pure fn index(&self, +x: bool) -> int {\n         if x { self.x } else { self.y }\n     }\n }"}, {"sha": "5e174e7fa023e8fdaab23587c7db0c08df6b9f54", "filename": "src/test/run-pass/ret-break-cont-in-block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1685dd9904f1c9d734ac50f85e2d35c9c4356b7/src%2Ftest%2Frun-pass%2Fret-break-cont-in-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1685dd9904f1c9d734ac50f85e2d35c9c4356b7/src%2Ftest%2Frun-pass%2Fret-break-cont-in-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fret-break-cont-in-block.rs?ref=e1685dd9904f1c9d734ac50f85e2d35c9c4356b7", "patch": "@@ -13,7 +13,7 @@ fn iter<T>(v: ~[T], it: fn(T) -> bool) {\n \n fn find_pos<T:Eq>(n: T, h: ~[T]) -> Option<uint> {\n     let mut i = 0u;\n-    for iter(h) |e| {\n+    for iter(copy h) |e| {\n         if e == n { return Some(i); }\n         i += 1u;\n     }"}, {"sha": "6c3ecad2cb77164b924655583235e42bbad767a8", "filename": "src/test/run-pass/unique-decl-init-copy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1685dd9904f1c9d734ac50f85e2d35c9c4356b7/src%2Ftest%2Frun-pass%2Funique-decl-init-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1685dd9904f1c9d734ac50f85e2d35c9c4356b7/src%2Ftest%2Frun-pass%2Funique-decl-init-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-decl-init-copy.rs?ref=e1685dd9904f1c9d734ac50f85e2d35c9c4356b7", "patch": "@@ -1,9 +1,9 @@\n fn main() {\n     let i = ~mut 1;\n     // Should be a copy\n-    let j = i;\n+    let j = copy i;\n     *i = 2;\n     *j = 3;\n     assert *i == 2;\n     assert *j == 3;\n-}\n\\ No newline at end of file\n+}"}]}