{"sha": "de1df3608b5ece9e492cbda06c443249691b017a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlMWRmMzYwOGI1ZWNlOWU0OTJjYmRhMDZjNDQzMjQ5NjkxYjAxN2E=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2013-06-08T00:26:52Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2013-06-08T01:24:47Z"}, "message": "Lexer: Avoid unnecessary allocations", "tree": {"sha": "18c9b49bc66407b79cf4cbe76246970e073a7d00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18c9b49bc66407b79cf4cbe76246970e073a7d00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de1df3608b5ece9e492cbda06c443249691b017a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de1df3608b5ece9e492cbda06c443249691b017a", "html_url": "https://github.com/rust-lang/rust/commit/de1df3608b5ece9e492cbda06c443249691b017a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de1df3608b5ece9e492cbda06c443249691b017a/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96798f5e050829b2fe4e43420c21ae3372f2b76a", "url": "https://api.github.com/repos/rust-lang/rust/commits/96798f5e050829b2fe4e43420c21ae3372f2b76a", "html_url": "https://github.com/rust-lang/rust/commit/96798f5e050829b2fe4e43420c21ae3372f2b76a"}], "stats": {"total": 99, "additions": 57, "deletions": 42}, "files": [{"sha": "4921fb459bc15c8d67402e6d5cbaa3be31ea069a", "filename": "src/libsyntax/parse/comments.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/de1df3608b5ece9e492cbda06c443249691b017a/src%2Flibsyntax%2Fparse%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de1df3608b5ece9e492cbda06c443249691b017a/src%2Flibsyntax%2Fparse%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcomments.rs?ref=de1df3608b5ece9e492cbda06c443249691b017a", "patch": "@@ -13,7 +13,7 @@ use core::prelude::*;\n use ast;\n use codemap::{BytePos, CharPos, CodeMap, Pos};\n use diagnostic;\n-use parse::lexer::{is_whitespace, get_str_from, reader};\n+use parse::lexer::{is_whitespace, with_str_from, reader};\n use parse::lexer::{StringReader, bump, is_eof, nextch, TokenAndSpan};\n use parse::lexer::{is_line_non_doc_comment, is_block_non_doc_comment};\n use parse::lexer;\n@@ -352,9 +352,10 @@ pub fn gather_comments_and_literals(span_diagnostic:\n         //discard, and look ahead; we're working with internal state\n         let TokenAndSpan {tok: tok, sp: sp} = rdr.peek();\n         if token::is_lit(&tok) {\n-            let s = get_str_from(rdr, bstart);\n-            debug!(\"tok lit: %s\", s);\n-            literals.push(lit {lit: s, pos: sp.lo});\n+            do with_str_from(rdr, bstart) |s| {\n+                debug!(\"tok lit: %s\", s);\n+                literals.push(lit {lit: s.to_owned(), pos: sp.lo});\n+            }\n         } else {\n             debug!(\"tok: %s\", token::to_str(get_ident_interner(), &tok));\n         }"}, {"sha": "8ee0a976c8b9c5d29c89c78bf05714d01873b3e9", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 52, "deletions": 38, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/de1df3608b5ece9e492cbda06c443249691b017a/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de1df3608b5ece9e492cbda06c443249691b017a/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=de1df3608b5ece9e492cbda06c443249691b017a", "patch": "@@ -165,9 +165,10 @@ fn byte_offset(rdr: &StringReader, pos: BytePos) -> BytePos {\n     (pos - rdr.filemap.start_pos)\n }\n \n-pub fn get_str_from(rdr: @mut StringReader, start: BytePos) -> ~str {\n-    return str::slice(*rdr.src, start.to_uint(),\n-                      byte_offset(rdr, rdr.last_pos).to_uint()).to_owned();\n+pub fn with_str_from<T>(rdr: @mut StringReader, start: BytePos, f: &fn(s: &str) -> T) -> T {\n+    f(rdr.src.slice(\n+            byte_offset(rdr, start).to_uint(),\n+            byte_offset(rdr, rdr.last_pos).to_uint()))\n }\n \n // EFFECT: advance the StringReader by one character. If a newline is\n@@ -259,18 +260,24 @@ fn consume_any_line_comment(rdr: @mut StringReader)\n             bump(rdr);\n             // line comments starting with \"///\" or \"//!\" are doc-comments\n             if rdr.curr == '/' || rdr.curr == '!' {\n-                let start_bpos = rdr.pos - BytePos(2u);\n-                let mut acc = ~\"//\";\n+                let start_bpos = rdr.pos - BytePos(3u);\n                 while rdr.curr != '\\n' && !is_eof(rdr) {\n-                    str::push_char(&mut acc, rdr.curr);\n                     bump(rdr);\n                 }\n-                // but comments with only more \"/\"s are not\n-                if !is_line_non_doc_comment(acc) {\n-                    return Some(TokenAndSpan{\n-                        tok: token::DOC_COMMENT(str_to_ident(acc)),\n-                        sp: codemap::mk_sp(start_bpos, rdr.pos)\n-                    });\n+                let ret = do with_str_from(rdr, start_bpos) |string| {\n+                    // but comments with only more \"/\"s are not\n+                    if !is_line_non_doc_comment(string) {\n+                        Some(TokenAndSpan{\n+                            tok: token::DOC_COMMENT(str_to_ident(string)),\n+                            sp: codemap::mk_sp(start_bpos, rdr.pos)\n+                        })\n+                    } else {\n+                        None\n+                    }\n+                };\n+\n+                if ret.is_some() {\n+                    return ret;\n                 }\n             } else {\n                 while rdr.curr != '\\n' && !is_eof(rdr) { bump(rdr); }\n@@ -306,25 +313,26 @@ pub fn is_block_non_doc_comment(s: &str) -> bool {\n fn consume_block_comment(rdr: @mut StringReader)\n                       -> Option<TokenAndSpan> {\n     // block comments starting with \"/**\" or \"/*!\" are doc-comments\n-    if rdr.curr == '*' || rdr.curr == '!' {\n-        let start_bpos = rdr.pos - BytePos(2u);\n-        let mut acc = ~\"/*\";\n+    let res = if rdr.curr == '*' || rdr.curr == '!' {\n+        let start_bpos = rdr.pos - BytePos(3u);\n         while !(rdr.curr == '*' && nextch(rdr) == '/') && !is_eof(rdr) {\n-            str::push_char(&mut acc, rdr.curr);\n             bump(rdr);\n         }\n         if is_eof(rdr) {\n             rdr.fatal(~\"unterminated block doc-comment\");\n         } else {\n-            acc += \"*/\";\n             bump(rdr);\n             bump(rdr);\n-            // but comments with only \"*\"s between two \"/\"s are not\n-            if !is_block_non_doc_comment(acc) {\n-                return Some(TokenAndSpan{\n-                    tok: token::DOC_COMMENT(str_to_ident(acc)),\n-                    sp: codemap::mk_sp(start_bpos, rdr.pos)\n-                });\n+            do with_str_from(rdr, start_bpos) |string| {\n+                // but comments with only \"*\"s between two \"/\"s are not\n+                if !is_block_non_doc_comment(string) {\n+                    Some(TokenAndSpan{\n+                         tok: token::DOC_COMMENT(str_to_ident(string)),\n+                         sp: codemap::mk_sp(start_bpos, rdr.pos)\n+                         })\n+                } else {\n+                    None\n+                }\n             }\n         }\n     } else {\n@@ -338,10 +346,11 @@ fn consume_block_comment(rdr: @mut StringReader)\n                 bump(rdr);\n             }\n         }\n-    }\n+        None\n+    };\n     // restart whitespace munch.\n \n-    return consume_whitespace_and_comments(rdr);\n+   if res.is_some() { res } else { consume_whitespace_and_comments(rdr) }\n }\n \n fn scan_exponent(rdr: @mut StringReader) -> Option<~str> {\n@@ -540,17 +549,21 @@ fn ident_continue(c: char) -> bool {\n fn next_token_inner(rdr: @mut StringReader) -> token::Token {\n     let mut c = rdr.curr;\n     if ident_start(c) {\n-        let start = byte_offset(rdr, rdr.last_pos);\n+        let start = rdr.last_pos;\n         while ident_continue(rdr.curr) {\n             bump(rdr);\n         }\n-        let string = get_str_from(rdr, start);\n \n-        if \"_\" == string { return token::UNDERSCORE; }\n-        let is_mod_name = rdr.curr == ':' && nextch(rdr) == ':';\n+        return do with_str_from(rdr, start) |string| {\n+            if string == \"_\" {\n+                token::UNDERSCORE\n+            } else {\n+                let is_mod_name = rdr.curr == ':' && nextch(rdr) == ':';\n \n-        // FIXME: perform NFKC normalization here. (Issue #2253)\n-        return token::IDENT(str_to_ident(string), is_mod_name);\n+                // FIXME: perform NFKC normalization here. (Issue #2253)\n+                token::IDENT(str_to_ident(string), is_mod_name)\n+            }\n+        }\n     }\n     if is_dec_digit(c) {\n         return scan_number(c, rdr);\n@@ -648,19 +661,19 @@ fn next_token_inner(rdr: @mut StringReader) -> token::Token {\n       '\\'' => {\n         // Either a character constant 'a' OR a lifetime name 'abc\n         bump(rdr);\n+        let start = rdr.last_pos;\n         let mut c2 = rdr.curr;\n         bump(rdr);\n \n         // If the character is an ident start not followed by another single\n         // quote, then this is a lifetime name:\n         if ident_start(c2) && rdr.curr != '\\'' {\n-            let mut lifetime_name = ~\"\";\n-            lifetime_name.push_char(c2);\n             while ident_continue(rdr.curr) {\n-                lifetime_name.push_char(rdr.curr);\n                 bump(rdr);\n             }\n-            return token::LIFETIME(str_to_ident(lifetime_name));\n+            return do with_str_from(rdr, start) |lifetime_name| {\n+                token::LIFETIME(str_to_ident(lifetime_name))\n+            }\n         }\n \n         // Otherwise it is a character constant:\n@@ -691,12 +704,13 @@ fn next_token_inner(rdr: @mut StringReader) -> token::Token {\n       }\n       '\"' => {\n         let mut accum_str = ~\"\";\n-        let n = byte_offset(rdr, rdr.last_pos);\n+        let n = rdr.last_pos;\n         bump(rdr);\n         while rdr.curr != '\"' {\n             if is_eof(rdr) {\n-                rdr.fatal(fmt!(\"unterminated double quote string: %s\",\n-                               get_str_from(rdr, n)));\n+                do with_str_from(rdr, n) |s| {\n+                    rdr.fatal(fmt!(\"unterminated double quote string: %s\", s));\n+                }\n             }\n \n             let ch = rdr.curr;"}]}