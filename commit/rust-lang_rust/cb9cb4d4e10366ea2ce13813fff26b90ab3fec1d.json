{"sha": "cb9cb4d4e10366ea2ce13813fff26b90ab3fec1d", "node_id": "C_kwDOAAsO6NoAKGNiOWNiNGQ0ZTEwMzY2ZWEyY2UxMzgxM2ZmZjI2YjkwYWIzZmVjMWQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-11T21:39:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-11T21:39:02Z"}, "message": "Auto merge of #96806 - cjgillot:codegen-fulfill-nice, r=oli-obk\n\nGracefully fail to resolve associated items instead of `delay_span_bug`.\n\n`codegen_fulfill_obligation` is used during instance resolution for trait items.\n\nIn case of insufficient normalization issues during MIR inlining, it caused ICEs.\nIt's better to gracefully refuse to resolve the associated item, and let the caller decide what to do with this.\n\nSplit from https://github.com/rust-lang/rust/pull/91743\nCloses #69121\nCloses #73021\nCloses #88599\nCloses #93008\nCloses #93248\nCloses #94680\nCloses #96170\nr? `@oli-obk`", "tree": {"sha": "00f1c9cb1913239c0490df4422d1dfa4c38f37df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00f1c9cb1913239c0490df4422d1dfa4c38f37df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb9cb4d4e10366ea2ce13813fff26b90ab3fec1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb9cb4d4e10366ea2ce13813fff26b90ab3fec1d", "html_url": "https://github.com/rust-lang/rust/commit/cb9cb4d4e10366ea2ce13813fff26b90ab3fec1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb9cb4d4e10366ea2ce13813fff26b90ab3fec1d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6dd68402c5d7da168f87d8551dd9aed1d8a21893", "url": "https://api.github.com/repos/rust-lang/rust/commits/6dd68402c5d7da168f87d8551dd9aed1d8a21893", "html_url": "https://github.com/rust-lang/rust/commit/6dd68402c5d7da168f87d8551dd9aed1d8a21893"}, {"sha": "dacf1185cb9c6aa9bc9770c5202dce6c35d6604e", "url": "https://api.github.com/repos/rust-lang/rust/commits/dacf1185cb9c6aa9bc9770c5202dce6c35d6604e", "html_url": "https://github.com/rust-lang/rust/commit/dacf1185cb9c6aa9bc9770c5202dce6c35d6604e"}], "stats": {"total": 196, "additions": 108, "deletions": 88}, "files": [{"sha": "0ef694a3c8543d52f4b402d2df5b8d0914f35175", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb9cb4d4e10366ea2ce13813fff26b90ab3fec1d/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9cb4d4e10366ea2ce13813fff26b90ab3fec1d/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=cb9cb4d4e10366ea2ce13813fff26b90ab3fec1d", "patch": "@@ -1145,7 +1145,7 @@ rustc_queries! {\n \n     query codegen_fulfill_obligation(\n         key: (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>)\n-    ) -> Result<&'tcx ImplSource<'tcx, ()>, ErrorGuaranteed> {\n+    ) -> Result<&'tcx ImplSource<'tcx, ()>, traits::CodegenObligationError> {\n         cache_on_disk_if { true }\n         desc { |tcx|\n             \"checking if `{}` fulfills its obligations\","}, {"sha": "8c660e38a7fbe4786695edbc43c059d2cb83f614", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cb9cb4d4e10366ea2ce13813fff26b90ab3fec1d/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9cb4d4e10366ea2ce13813fff26b90ab3fec1d/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=cb9cb4d4e10366ea2ce13813fff26b90ab3fec1d", "patch": "@@ -963,3 +963,21 @@ pub enum MethodViolationCode {\n     /// the method's receiver (`self` argument) can't be dispatched on\n     UndispatchableReceiver,\n }\n+\n+/// These are the error cases for `codegen_fulfill_obligation`.\n+#[derive(Copy, Clone, Debug, Hash, HashStable, Encodable, Decodable)]\n+pub enum CodegenObligationError {\n+    /// Ambiguity can happen when monomorphizing during trans\n+    /// expands to some humongous type that never occurred\n+    /// statically -- this humongous type can then overflow,\n+    /// leading to an ambiguous result. So report this as an\n+    /// overflow bug, since I believe this is the only case\n+    /// where ambiguity can result.\n+    Ambiguity,\n+    /// This can trigger when we probe for the source of a `'static` lifetime requirement\n+    /// on a trait object: `impl Foo for dyn Trait {}` has an implicit `'static` bound.\n+    /// This can also trigger when we have a global bound that is not actually satisfied,\n+    /// but was included during typeck due to the trivial_bounds feature.\n+    Unimplemented,\n+    FulfillmentError,\n+}"}, {"sha": "6ca630b74cc79efcf1429ef49690de37fd4088d4", "filename": "compiler/rustc_trait_selection/src/traits/codegen.rs", "status": "modified", "additions": 16, "deletions": 75, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/cb9cb4d4e10366ea2ce13813fff26b90ab3fec1d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9cb4d4e10366ea2ce13813fff26b90ab3fec1d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs?ref=cb9cb4d4e10366ea2ce13813fff26b90ab3fec1d", "patch": "@@ -3,13 +3,12 @@\n // seems likely that they should eventually be merged into more\n // general routines.\n \n-use crate::infer::{InferCtxt, TyCtxtInferExt};\n+use crate::infer::TyCtxtInferExt;\n use crate::traits::{\n     FulfillmentContext, ImplSource, Obligation, ObligationCause, SelectionContext, TraitEngine,\n     Unimplemented,\n };\n-use rustc_errors::ErrorGuaranteed;\n-use rustc_middle::ty::fold::TypeFoldable;\n+use rustc_middle::traits::CodegenObligationError;\n use rustc_middle::ty::{self, TyCtxt};\n \n /// Attempts to resolve an obligation to an `ImplSource`. The result is\n@@ -23,7 +22,7 @@ use rustc_middle::ty::{self, TyCtxt};\n pub fn codegen_fulfill_obligation<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     (param_env, trait_ref): (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>),\n-) -> Result<&'tcx ImplSource<'tcx, ()>, ErrorGuaranteed> {\n+) -> Result<&'tcx ImplSource<'tcx, ()>, CodegenObligationError> {\n     // Remove any references to regions; this helps improve caching.\n     let trait_ref = tcx.erase_regions(trait_ref);\n     // We expect the input to be fully normalized.\n@@ -40,37 +39,8 @@ pub fn codegen_fulfill_obligation<'tcx>(\n \n         let selection = match selcx.select(&obligation) {\n             Ok(Some(selection)) => selection,\n-            Ok(None) => {\n-                // Ambiguity can happen when monomorphizing during trans\n-                // expands to some humongous type that never occurred\n-                // statically -- this humongous type can then overflow,\n-                // leading to an ambiguous result. So report this as an\n-                // overflow bug, since I believe this is the only case\n-                // where ambiguity can result.\n-                let reported = infcx.tcx.sess.delay_span_bug(\n-                    rustc_span::DUMMY_SP,\n-                    &format!(\n-                        \"encountered ambiguity selecting `{:?}` during codegen, presuming due to \\\n-                         overflow or prior type error\",\n-                        trait_ref\n-                    ),\n-                );\n-                return Err(reported);\n-            }\n-            Err(Unimplemented) => {\n-                // This can trigger when we probe for the source of a `'static` lifetime requirement\n-                // on a trait object: `impl Foo for dyn Trait {}` has an implicit `'static` bound.\n-                // This can also trigger when we have a global bound that is not actually satisfied,\n-                // but was included during typeck due to the trivial_bounds feature.\n-                let guar = infcx.tcx.sess.delay_span_bug(\n-                    rustc_span::DUMMY_SP,\n-                    &format!(\n-                        \"Encountered error `Unimplemented` selecting `{:?}` during codegen\",\n-                        trait_ref\n-                    ),\n-                );\n-                return Err(guar);\n-            }\n+            Ok(None) => return Err(CodegenObligationError::Ambiguity),\n+            Err(Unimplemented) => return Err(CodegenObligationError::Unimplemented),\n             Err(e) => {\n                 bug!(\"Encountered error `{:?}` selecting `{:?}` during codegen\", e, trait_ref)\n             }\n@@ -85,7 +55,17 @@ pub fn codegen_fulfill_obligation<'tcx>(\n         let impl_source = selection.map(|predicate| {\n             fulfill_cx.register_predicate_obligation(&infcx, predicate);\n         });\n-        let impl_source = drain_fulfillment_cx_or_panic(&infcx, &mut fulfill_cx, impl_source);\n+\n+        // In principle, we only need to do this so long as `impl_source`\n+        // contains unbound type parameters. It could be a slight\n+        // optimization to stop iterating early.\n+        let errors = fulfill_cx.select_all_or_error(&infcx);\n+        if !errors.is_empty() {\n+            return Err(CodegenObligationError::FulfillmentError);\n+        }\n+\n+        let impl_source = infcx.resolve_vars_if_possible(impl_source);\n+        let impl_source = infcx.tcx.erase_regions(impl_source);\n \n         // Opaque types may have gotten their hidden types constrained, but we can ignore them safely\n         // as they will get constrained elsewhere, too.\n@@ -95,42 +75,3 @@ pub fn codegen_fulfill_obligation<'tcx>(\n         Ok(&*tcx.arena.alloc(impl_source))\n     })\n }\n-\n-// # Global Cache\n-\n-/// Finishes processes any obligations that remain in the\n-/// fulfillment context, and then returns the result with all type\n-/// variables removed and regions erased. Because this is intended\n-/// for use outside of type inference, if any errors occur,\n-/// it will panic. It is used during normalization and other cases\n-/// where processing the obligations in `fulfill_cx` may cause\n-/// type inference variables that appear in `result` to be\n-/// unified, and hence we need to process those obligations to get\n-/// the complete picture of the type.\n-fn drain_fulfillment_cx_or_panic<'tcx, T>(\n-    infcx: &InferCtxt<'_, 'tcx>,\n-    fulfill_cx: &mut FulfillmentContext<'tcx>,\n-    result: T,\n-) -> T\n-where\n-    T: TypeFoldable<'tcx>,\n-{\n-    debug!(\"drain_fulfillment_cx_or_panic()\");\n-\n-    // In principle, we only need to do this so long as `result`\n-    // contains unbound type parameters. It could be a slight\n-    // optimization to stop iterating early.\n-    let errors = fulfill_cx.select_all_or_error(infcx);\n-    if !errors.is_empty() {\n-        infcx.tcx.sess.delay_span_bug(\n-            rustc_span::DUMMY_SP,\n-            &format!(\n-                \"Encountered errors `{:?}` resolving bounds outside of type inference\",\n-                errors\n-            ),\n-        );\n-    }\n-\n-    let result = infcx.resolve_vars_if_possible(result);\n-    infcx.tcx.erase_regions(result)\n-}"}, {"sha": "143081d61fb37bac2da9dabe7d9ff35b30adb450", "filename": "compiler/rustc_ty_utils/src/instance.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cb9cb4d4e10366ea2ce13813fff26b90ab3fec1d/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9cb4d4e10366ea2ce13813fff26b90ab3fec1d/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs?ref=cb9cb4d4e10366ea2ce13813fff26b90ab3fec1d", "patch": "@@ -1,6 +1,7 @@\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_infer::infer::TyCtxtInferExt;\n+use rustc_middle::traits::CodegenObligationError;\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, Binder, Instance, Ty, TyCtxt, TypeFoldable, TypeVisitor};\n use rustc_span::{sym, DUMMY_SP};\n@@ -212,7 +213,22 @@ fn resolve_associated_item<'tcx>(\n     let mut bound_vars_collector = BoundVarsCollector::new();\n     trait_ref.visit_with(&mut bound_vars_collector);\n     let trait_binder = ty::Binder::bind_with_vars(trait_ref, bound_vars_collector.into_vars(tcx));\n-    let vtbl = tcx.codegen_fulfill_obligation((param_env, trait_binder))?;\n+    let vtbl = match tcx.codegen_fulfill_obligation((param_env, trait_binder)) {\n+        Ok(vtbl) => vtbl,\n+        Err(CodegenObligationError::Ambiguity) => {\n+            let reported = tcx.sess.delay_span_bug(\n+                tcx.def_span(trait_item_id),\n+                &format!(\n+                    \"encountered ambiguity selecting `{:?}` during codegen, presuming due to \\\n+                     overflow or prior type error\",\n+                    trait_binder\n+                ),\n+            );\n+            return Err(reported);\n+        }\n+        Err(CodegenObligationError::Unimplemented) => return Ok(None),\n+        Err(CodegenObligationError::FulfillmentError) => return Ok(None),\n+    };\n \n     // Now that we know which impl is being used, we can dispatch to\n     // the actual function:"}, {"sha": "3a7f4c6184cf1b307e739b9b6183c0ff7f69871a", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-85848.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb9cb4d4e10366ea2ce13813fff26b90ab3fec1d/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-85848.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9cb4d4e10366ea2ce13813fff26b90ab3fec1d/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-85848.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-85848.rs?ref=cb9cb4d4e10366ea2ce13813fff26b90ab3fec1d", "patch": "@@ -24,6 +24,7 @@ fn writes_to_path<C>(cap: &C) {\n     writes_to_specific_path(&cap);\n     //~^ ERROR: the trait bound `(): _Contains<&C>` is not satisfied [E0277]\n     //~| ERROR: unconstrained generic constant\n+    //~| ERROR: mismatched types [E0308]\n }\n \n fn writes_to_specific_path<C: Delegates<()>>(cap: &C) {}"}, {"sha": "d45dfde9a791a39719f092db0af2347739e0c8e3", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-85848.stderr", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cb9cb4d4e10366ea2ce13813fff26b90ab3fec1d/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-85848.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb9cb4d4e10366ea2ce13813fff26b90ab3fec1d/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-85848.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-85848.stderr?ref=cb9cb4d4e10366ea2ce13813fff26b90ab3fec1d", "patch": "@@ -18,7 +18,7 @@ note: required because of the requirements on the impl of `Delegates<()>` for `&\n LL | impl<T, U> Delegates<U> for T where T: Contains<U, true> {}\n    |            ^^^^^^^^^^^^     ^\n note: required by a bound in `writes_to_specific_path`\n-  --> $DIR/issue-85848.rs:29:31\n+  --> $DIR/issue-85848.rs:30:31\n    |\n LL | fn writes_to_specific_path<C: Delegates<()>>(cap: &C) {}\n    |                               ^^^^^^^^^^^^^ required by this bound in `writes_to_specific_path`\n@@ -43,11 +43,21 @@ note: required because of the requirements on the impl of `Delegates<()>` for `&\n LL | impl<T, U> Delegates<U> for T where T: Contains<U, true> {}\n    |            ^^^^^^^^^^^^     ^\n note: required by a bound in `writes_to_specific_path`\n-  --> $DIR/issue-85848.rs:29:31\n+  --> $DIR/issue-85848.rs:30:31\n    |\n LL | fn writes_to_specific_path<C: Delegates<()>>(cap: &C) {}\n    |                               ^^^^^^^^^^^^^ required by this bound in `writes_to_specific_path`\n \n-error: aborting due to 2 previous errors\n+error[E0308]: mismatched types\n+  --> $DIR/issue-85848.rs:24:5\n+   |\n+LL |     writes_to_specific_path(&cap);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ expected `true`, found `{ contains::<T, U>() }`\n+   |\n+   = note: expected type `true`\n+              found type `{ contains::<T, U>() }`\n+\n+error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0277`.\n+Some errors have detailed explanations: E0277, E0308.\n+For more information about an error, try `rustc --explain E0277`."}, {"sha": "4a6ffd1f3008e4774c0fc7ab2a650538333abbd4", "filename": "src/test/ui/const-generics/issues/issue-86530.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb9cb4d4e10366ea2ce13813fff26b90ab3fec1d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86530.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9cb4d4e10366ea2ce13813fff26b90ab3fec1d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86530.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86530.rs?ref=cb9cb4d4e10366ea2ce13813fff26b90ab3fec1d", "patch": "@@ -15,6 +15,7 @@ where\n fn unit_literals() {\n     z(\" \");\n     //~^ ERROR: the trait bound `&str: X` is not satisfied\n+    //~| ERROR: unconstrained generic constant\n }\n \n fn main() {}"}, {"sha": "c688f838dab4783d7d2303615763b436d74fcc7d", "filename": "src/test/ui/const-generics/issues/issue-86530.stderr", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cb9cb4d4e10366ea2ce13813fff26b90ab3fec1d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86530.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb9cb4d4e10366ea2ce13813fff26b90ab3fec1d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86530.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86530.stderr?ref=cb9cb4d4e10366ea2ce13813fff26b90ab3fec1d", "patch": "@@ -15,6 +15,22 @@ LL | where\n LL |     T: X,\n    |        ^ required by this bound in `z`\n \n-error: aborting due to previous error\n+error: unconstrained generic constant\n+  --> $DIR/issue-86530.rs:16:5\n+   |\n+LL |     z(\" \");\n+   |     ^\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); T::Y]:`\n+note: required by a bound in `z`\n+  --> $DIR/issue-86530.rs:11:10\n+   |\n+LL | fn z<T>(t: T)\n+   |    - required by a bound in this\n+...\n+LL |     [(); T::Y]: ,\n+   |          ^^^^ required by this bound in `z`\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "1d5d5930731179a07486822ebdc62230c27dac80", "filename": "src/test/ui/issues/issue-77919.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb9cb4d4e10366ea2ce13813fff26b90ab3fec1d/src%2Ftest%2Fui%2Fissues%2Fissue-77919.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9cb4d4e10366ea2ce13813fff26b90ab3fec1d/src%2Ftest%2Fui%2Fissues%2Fissue-77919.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-77919.rs?ref=cb9cb4d4e10366ea2ce13813fff26b90ab3fec1d", "patch": "@@ -1,5 +1,6 @@\n fn main() {\n     [1; <Multiply<Five, Five>>::VAL];\n+    //~^ ERROR: constant expression depends on a generic parameter\n }\n trait TypeVal<T> {\n     const VAL: T;"}, {"sha": "c986e47fb5589f3b71081ba9184d7153508c45f6", "filename": "src/test/ui/issues/issue-77919.stderr", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cb9cb4d4e10366ea2ce13813fff26b90ab3fec1d/src%2Ftest%2Fui%2Fissues%2Fissue-77919.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb9cb4d4e10366ea2ce13813fff26b90ab3fec1d/src%2Ftest%2Fui%2Fissues%2Fissue-77919.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-77919.stderr?ref=cb9cb4d4e10366ea2ce13813fff26b90ab3fec1d", "patch": "@@ -1,5 +1,5 @@\n error[E0412]: cannot find type `PhantomData` in this scope\n-  --> $DIR/issue-77919.rs:9:9\n+  --> $DIR/issue-77919.rs:10:9\n    |\n LL |     _n: PhantomData,\n    |         ^^^^^^^^^^^ not found in this scope\n@@ -10,23 +10,31 @@ LL | use std::marker::PhantomData;\n    |\n \n error[E0412]: cannot find type `VAL` in this scope\n-  --> $DIR/issue-77919.rs:11:63\n+  --> $DIR/issue-77919.rs:12:63\n    |\n LL | impl<N, M> TypeVal<usize> for Multiply<N, M> where N: TypeVal<VAL> {}\n    |          -                                                    ^^^ not found in this scope\n    |          |\n    |          help: you might be missing a type parameter: `, VAL`\n \n error[E0046]: not all trait items implemented, missing: `VAL`\n-  --> $DIR/issue-77919.rs:11:1\n+  --> $DIR/issue-77919.rs:12:1\n    |\n LL |     const VAL: T;\n    |     ------------- `VAL` from trait\n ...\n LL | impl<N, M> TypeVal<usize> for Multiply<N, M> where N: TypeVal<VAL> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `VAL` in implementation\n \n-error: aborting due to 3 previous errors\n+error: constant expression depends on a generic parameter\n+  --> $DIR/issue-77919.rs:2:9\n+   |\n+LL |     [1; <Multiply<Five, Five>>::VAL];\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to 4 previous errors\n \n Some errors have detailed explanations: E0046, E0412.\n For more information about an error, try `rustc --explain E0046`."}, {"sha": "aa3f66b2e28e1e3a19924e19c4e8c5c32ed3c8d9", "filename": "src/test/ui/recursion/issue-83150.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb9cb4d4e10366ea2ce13813fff26b90ab3fec1d/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9cb4d4e10366ea2ce13813fff26b90ab3fec1d/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.rs?ref=cb9cb4d4e10366ea2ce13813fff26b90ab3fec1d", "patch": "@@ -1,5 +1,5 @@\n // build-fail\n- //~^ overflow evaluating\n+//~^ ERROR overflow evaluating the requirement\n \n fn main() {\n     let mut iter = 0u8..1;"}, {"sha": "d930d486fde654220d9cc9c93533fbfb01523d3f", "filename": "src/tools/clippy/tests/ui/crashes/ice-6252.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cb9cb4d4e10366ea2ce13813fff26b90ab3fec1d/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-6252.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb9cb4d4e10366ea2ce13813fff26b90ab3fec1d/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-6252.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-6252.stderr?ref=cb9cb4d4e10366ea2ce13813fff26b90ab3fec1d", "patch": "@@ -30,7 +30,15 @@ LL |     const VAL: T;\n LL | impl<N, M> TypeVal<usize> for Multiply<N, M> where N: TypeVal<VAL> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `VAL` in implementation\n \n-error: aborting due to 3 previous errors\n+error: constant expression depends on a generic parameter\n+  --> $DIR/ice-6252.rs:13:9\n+   |\n+LL |     [1; <Multiply<Five, Five>>::VAL];\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to 4 previous errors\n \n Some errors have detailed explanations: E0046, E0412.\n For more information about an error, try `rustc --explain E0046`."}]}