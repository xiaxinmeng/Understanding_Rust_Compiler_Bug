{"sha": "79dc9a76a6272dc2e080237de27406b1456d7c2c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5ZGM5YTc2YTYyNzJkYzJlMDgwMjM3ZGUyNzQwNmIxNDU2ZDdjMmM=", "commit": {"author": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2021-06-11T18:12:40Z"}, "committer": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2021-06-11T21:05:17Z"}, "message": "Suggest a FnPtr type if a FnDef type is found", "tree": {"sha": "cfb55c16266afa3759733d73fbe883b6b499fb25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cfb55c16266afa3759733d73fbe883b6b499fb25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79dc9a76a6272dc2e080237de27406b1456d7c2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79dc9a76a6272dc2e080237de27406b1456d7c2c", "html_url": "https://github.com/rust-lang/rust/commit/79dc9a76a6272dc2e080237de27406b1456d7c2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79dc9a76a6272dc2e080237de27406b1456d7c2c/comments", "author": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f687d5c43a0c90afba6d3fddab7665772bb0664a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f687d5c43a0c90afba6d3fddab7665772bb0664a", "html_url": "https://github.com/rust-lang/rust/commit/f687d5c43a0c90afba6d3fddab7665772bb0664a"}], "stats": {"total": 111, "additions": 73, "deletions": 38}, "files": [{"sha": "abe5d69a3b3c1b313c71f02a28084f38167d5fb8", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 40, "deletions": 11, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/79dc9a76a6272dc2e080237de27406b1456d7c2c/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79dc9a76a6272dc2e080237de27406b1456d7c2c/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=79dc9a76a6272dc2e080237de27406b1456d7c2c", "patch": "@@ -9,7 +9,7 @@ use rustc_hir::{HirId, Node};\n use rustc_middle::hir::map::Map;\n use rustc_middle::ty::subst::{GenericArgKind, InternalSubsts};\n use rustc_middle::ty::util::IntTypeExt;\n-use rustc_middle::ty::{self, DefIdTree, Ty, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{self, DefIdTree, Ty, TyCtxt, TypeFoldable, TypeFolder};\n use rustc_span::symbol::Ident;\n use rustc_span::{Span, DUMMY_SP};\n \n@@ -749,15 +749,38 @@ fn infer_placeholder_type(\n     span: Span,\n     item_ident: Ident,\n ) -> Ty<'_> {\n-    fn contains_anonymous(ty: Ty<'_>) -> bool {\n-        for gen_arg in ty.walk() {\n-            if let ty::subst::GenericArgKind::Type(inner_ty) = gen_arg.unpack() {\n-                if let ty::FnDef(..) | ty::Closure(..) | ty::Generator(..) = inner_ty.kind() {\n-                    return true;\n+    // Attempts to make the type nameable by turning FnDefs into FnPtrs.\n+    struct MakeNameable<'tcx> {\n+        success: bool,\n+        tcx: TyCtxt<'tcx>,\n+    }\n+\n+    impl<'tcx> MakeNameable<'tcx> {\n+        fn new(tcx: TyCtxt<'tcx>) -> Self {\n+            MakeNameable { success: true, tcx }\n+        }\n+    }\n+\n+    impl TypeFolder<'tcx> for MakeNameable<'tcx> {\n+        fn tcx(&self) -> TyCtxt<'tcx> {\n+            self.tcx\n+        }\n+\n+        fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n+            if !self.success {\n+                return ty;\n+            }\n+\n+            match ty.kind() {\n+                ty::FnDef(def_id, _) => self.tcx.mk_fn_ptr(self.tcx.fn_sig(*def_id)),\n+                // FIXME: non-capturing closures should also suggest a function pointer\n+                ty::Closure(..) | ty::Generator(..) => {\n+                    self.success = false;\n+                    ty\n                 }\n+                _ => ty.super_fold_with(self),\n             }\n         }\n-        false\n     }\n \n     let ty = tcx.diagnostic_only_typeck(def_id).node_type(body_id.hir_id);\n@@ -773,11 +796,14 @@ fn infer_placeholder_type(\n             err.suggestions.clear();\n \n             // Suggesting unnameable types won't help.\n-            if !contains_anonymous(ty) {\n+            let mut mk_nameable = MakeNameable::new(tcx);\n+            let ty = mk_nameable.fold_ty(ty);\n+            let sugg_ty = if mk_nameable.success { Some(ty) } else { None };\n+            if let Some(sugg_ty) = sugg_ty {\n                 err.span_suggestion(\n                     span,\n                     \"provide a type for the item\",\n-                    format!(\"{}: {}\", item_ident, ty),\n+                    format!(\"{}: {}\", item_ident, sugg_ty),\n                     Applicability::MachineApplicable,\n                 );\n             } else {\n@@ -793,11 +819,14 @@ fn infer_placeholder_type(\n             let mut diag = bad_placeholder_type(tcx, vec![span]);\n \n             if !ty.references_error() {\n-                if !contains_anonymous(ty) {\n+                let mut mk_nameable = MakeNameable::new(tcx);\n+                let ty = mk_nameable.fold_ty(ty);\n+                let sugg_ty = if mk_nameable.success { Some(ty) } else { None };\n+                if let Some(sugg_ty) = sugg_ty {\n                     diag.span_suggestion(\n                         span,\n                         \"replace with the correct type\",\n-                        ty.to_string(),\n+                        sugg_ty.to_string(),\n                         Applicability::MaybeIncorrect,\n                     );\n                 } else {"}, {"sha": "5d0616443e5ac872252c6f47dd9ac4d4690b486d", "filename": "src/test/ui/suggestions/unnamable-types.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/79dc9a76a6272dc2e080237de27406b1456d7c2c/src%2Ftest%2Fui%2Fsuggestions%2Funnamable-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79dc9a76a6272dc2e080237de27406b1456d7c2c/src%2Ftest%2Fui%2Fsuggestions%2Funnamable-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Funnamable-types.rs?ref=79dc9a76a6272dc2e080237de27406b1456d7c2c", "patch": "@@ -13,21 +13,27 @@ static B: _ = \"abc\";\n //~| HELP: replace with the correct type\n \n \n+// FIXME: this should also suggest a function pointer, as the closure is non-capturing\n const C: _ = || 42;\n //~^ ERROR: the type placeholder `_` is not allowed within types on item signatures\n //~| NOTE: not allowed in type signatures\n //~| NOTE: however, the inferred type\n \n struct S<T> { t: T }\n-const D = S { t: || -> i32 { 42 } };\n+const D = S { t: { let i = 0; move || -> i32 { i } } };\n //~^ ERROR: missing type for `const` item\n //~| NOTE: however, the inferred type\n \n+\n fn foo() -> i32 { 42 }\n-const E = S { t: foo };\n+const E = foo;\n //~^ ERROR: missing type for `const` item\n-//~| NOTE: however, the inferred type\n+//~| HELP: provide a type for the item\n+const F = S { t: foo };\n+//~^ ERROR: missing type for `const` item\n+//~| HELP: provide a type for the item\n+\n \n-const F = || -> i32 { yield 0; return 1; };\n+const G = || -> i32 { yield 0; return 1; };\n //~^ ERROR: missing type for `const` item\n //~| NOTE: however, the inferred type"}, {"sha": "2c8166781bfdc68aeae06f8a3485c01a85906e60", "filename": "src/test/ui/suggestions/unnamable-types.stderr", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/79dc9a76a6272dc2e080237de27406b1456d7c2c/src%2Ftest%2Fui%2Fsuggestions%2Funnamable-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79dc9a76a6272dc2e080237de27406b1456d7c2c/src%2Ftest%2Fui%2Fsuggestions%2Funnamable-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Funnamable-types.stderr?ref=79dc9a76a6272dc2e080237de27406b1456d7c2c", "patch": "@@ -14,53 +14,53 @@ LL | static B: _ = \"abc\";\n    |           help: replace with the correct type: `&str`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/unnamable-types.rs:16:10\n+  --> $DIR/unnamable-types.rs:17:10\n    |\n LL | const C: _ = || 42;\n    |          ^ not allowed in type signatures\n    |\n-note: however, the inferred type `[closure@$DIR/unnamable-types.rs:16:14: 16:19]` cannot be named\n-  --> $DIR/unnamable-types.rs:16:14\n+note: however, the inferred type `[closure@$DIR/unnamable-types.rs:17:14: 17:19]` cannot be named\n+  --> $DIR/unnamable-types.rs:17:14\n    |\n LL | const C: _ = || 42;\n    |              ^^^^^\n \n error: missing type for `const` item\n-  --> $DIR/unnamable-types.rs:22:7\n+  --> $DIR/unnamable-types.rs:23:7\n    |\n-LL | const D = S { t: || -> i32 { 42 } };\n+LL | const D = S { t: { let i = 0; move || -> i32 { i } } };\n    |       ^\n    |\n-note: however, the inferred type `S<[closure@$DIR/unnamable-types.rs:22:18: 22:34]>` cannot be named\n-  --> $DIR/unnamable-types.rs:22:11\n+note: however, the inferred type `S<[closure@$DIR/unnamable-types.rs:23:31: 23:51]>` cannot be named\n+  --> $DIR/unnamable-types.rs:23:11\n    |\n-LL | const D = S { t: || -> i32 { 42 } };\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | const D = S { t: { let i = 0; move || -> i32 { i } } };\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing type for `const` item\n-  --> $DIR/unnamable-types.rs:27:7\n+  --> $DIR/unnamable-types.rs:29:7\n    |\n-LL | const E = S { t: foo };\n-   |       ^\n-   |\n-note: however, the inferred type `S<fn() -> i32 {foo}>` cannot be named\n-  --> $DIR/unnamable-types.rs:27:11\n+LL | const E = foo;\n+   |       ^ help: provide a type for the item: `E: fn() -> i32`\n+\n+error: missing type for `const` item\n+  --> $DIR/unnamable-types.rs:32:7\n    |\n-LL | const E = S { t: foo };\n-   |           ^^^^^^^^^^^^\n+LL | const F = S { t: foo };\n+   |       ^ help: provide a type for the item: `F: S<fn() -> i32>`\n \n error: missing type for `const` item\n-  --> $DIR/unnamable-types.rs:31:7\n+  --> $DIR/unnamable-types.rs:37:7\n    |\n-LL | const F = || -> i32 { yield 0; return 1; };\n+LL | const G = || -> i32 { yield 0; return 1; };\n    |       ^\n    |\n-note: however, the inferred type `[generator@$DIR/unnamable-types.rs:31:11: 31:43 {i32, ()}]` cannot be named\n-  --> $DIR/unnamable-types.rs:31:11\n+note: however, the inferred type `[generator@$DIR/unnamable-types.rs:37:11: 37:43 {i32, ()}]` cannot be named\n+  --> $DIR/unnamable-types.rs:37:11\n    |\n-LL | const F = || -> i32 { yield 0; return 1; };\n+LL | const G = || -> i32 { yield 0; return 1; };\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 7 previous errors\n \n For more information about this error, try `rustc --explain E0121`."}]}