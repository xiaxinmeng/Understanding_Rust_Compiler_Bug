{"sha": "83a272582864bec707365dd196b07d5cfdf59dc6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzYTI3MjU4Mjg2NGJlYzcwNzM2NWRkMTk2YjA3ZDVjZmRmNTlkYzY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-12-19T00:13:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-19T00:13:27Z"}, "message": "Merge #6942\n\n6942: Minor `#[derive]` resolution cleanup r=jonas-schievink a=jonas-schievink\n\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "7c029631ffd844fa5598c54b0e1bbf230caaf0c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c029631ffd844fa5598c54b0e1bbf230caaf0c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83a272582864bec707365dd196b07d5cfdf59dc6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf3UWoCRBK7hj4Ov3rIwAAdHIIAIKVFRoc9uNQDdW3IlwFMJEB\nUTglENAOAnaQGNvhwKFAzBxg2yOU6qbwm7h1Pe4CVU3TMMZMxBSy4LSPlTlI49op\nC9njz4TQNH79pXEDGsGbr9Deu4tKMMQK2/z8udzzePROkQ2r8TyQyPjdk6sMRVj0\n8TOOAoYCISUg5SbSAK7u/EYsvSfWoYi/Mccnv+C4rMkQbIjj3oZQLe6X/wzYEZJ+\n/aPpjNxcupFnQ4f30ga+Qpf51YUubud/oZ9AGbKjVjK+sguYoBPiuEHaW5uYnzf0\nGL7jcVpkVshFYWe3CUnSSkJmQ9198nscYOMoxJxvDAWnS+3ZJP2zf46+VU8xaxY=\n=7l3U\n-----END PGP SIGNATURE-----\n", "payload": "tree 7c029631ffd844fa5598c54b0e1bbf230caaf0c8\nparent c7b7c37ea5f25806d8c523e309b7ee9be27f2cde\nparent aa00d1acd68911735334cb1c7de91d347bb56808\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1608336807 +0000\ncommitter GitHub <noreply@github.com> 1608336807 +0000\n\nMerge #6942\n\n6942: Minor `#[derive]` resolution cleanup r=jonas-schievink a=jonas-schievink\n\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83a272582864bec707365dd196b07d5cfdf59dc6", "html_url": "https://github.com/rust-lang/rust/commit/83a272582864bec707365dd196b07d5cfdf59dc6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83a272582864bec707365dd196b07d5cfdf59dc6/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7b7c37ea5f25806d8c523e309b7ee9be27f2cde", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7b7c37ea5f25806d8c523e309b7ee9be27f2cde", "html_url": "https://github.com/rust-lang/rust/commit/c7b7c37ea5f25806d8c523e309b7ee9be27f2cde"}, {"sha": "aa00d1acd68911735334cb1c7de91d347bb56808", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa00d1acd68911735334cb1c7de91d347bb56808", "html_url": "https://github.com/rust-lang/rust/commit/aa00d1acd68911735334cb1c7de91d347bb56808"}], "stats": {"total": 99, "additions": 66, "deletions": 33}, "files": [{"sha": "18525406c92a810e0a196b460af20ecff303e7ad", "filename": "crates/hir_def/src/attr.rs", "status": "modified", "additions": 43, "deletions": 3, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/83a272582864bec707365dd196b07d5cfdf59dc6/crates%2Fhir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a272582864bec707365dd196b07d5cfdf59dc6/crates%2Fhir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fattr.rs?ref=83a272582864bec707365dd196b07d5cfdf59dc6", "patch": "@@ -5,7 +5,7 @@ use std::{ops, sync::Arc};\n use base_db::CrateId;\n use cfg::{CfgExpr, CfgOptions};\n use either::Either;\n-use hir_expand::{hygiene::Hygiene, AstId, InFile};\n+use hir_expand::{hygiene::Hygiene, name::AsName, AstId, InFile};\n use itertools::Itertools;\n use mbe::ast_to_token_tree;\n use syntax::{\n@@ -19,7 +19,7 @@ use crate::{\n     db::DefDatabase,\n     item_tree::{ItemTreeId, ItemTreeNode},\n     nameres::ModuleSource,\n-    path::ModPath,\n+    path::{ModPath, PathKind},\n     src::HasChildSource,\n     AdtId, AttrDefId, Lookup,\n };\n@@ -357,6 +357,46 @@ impl Attr {\n         };\n         Some(Attr { path, input })\n     }\n+\n+    /// Parses this attribute as a `#[derive]`, returns an iterator that yields all contained paths\n+    /// to derive macros.\n+    ///\n+    /// Returns `None` when the attribute is not a well-formed `#[derive]` attribute.\n+    pub(crate) fn parse_derive(&self) -> Option<impl Iterator<Item = ModPath>> {\n+        if self.path.as_ident() != Some(&hir_expand::name![derive]) {\n+            return None;\n+        }\n+\n+        match &self.input {\n+            Some(AttrInput::TokenTree(args)) => {\n+                let mut counter = 0;\n+                let paths = args\n+                    .token_trees\n+                    .iter()\n+                    .group_by(move |tt| {\n+                        match tt {\n+                            tt::TokenTree::Leaf(tt::Leaf::Punct(p)) if p.char == ',' => {\n+                                counter += 1;\n+                            }\n+                            _ => {}\n+                        }\n+                        counter\n+                    })\n+                    .into_iter()\n+                    .map(|(_, tts)| {\n+                        let segments = tts.filter_map(|tt| match tt {\n+                            tt::TokenTree::Leaf(tt::Leaf::Ident(id)) => Some(id.as_name()),\n+                            _ => None,\n+                        });\n+                        ModPath::from_segments(PathKind::Plain, segments)\n+                    })\n+                    .collect::<Vec<_>>();\n+\n+                Some(paths.into_iter())\n+            }\n+            _ => None,\n+        }\n+    }\n }\n \n #[derive(Debug, Clone, Copy)]\n@@ -384,7 +424,7 @@ impl<'a> AttrQuery<'a> {\n         self.attrs().next().is_some()\n     }\n \n-    fn attrs(self) -> impl Iterator<Item = &'a Attr> {\n+    pub(crate) fn attrs(self) -> impl Iterator<Item = &'a Attr> {\n         let key = self.key;\n         self.attrs\n             .iter()"}, {"sha": "a636ec77d71b9dac4f7c4a5e3cf84f5d24e5a291", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/83a272582864bec707365dd196b07d5cfdf59dc6/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a272582864bec707365dd196b07d5cfdf59dc6/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=83a272582864bec707365dd196b07d5cfdf59dc6", "patch": "@@ -1289,20 +1289,20 @@ impl ModCollector<'_, '_> {\n     }\n \n     fn collect_derives(&mut self, attrs: &Attrs, ast_id: FileAstId<ast::Item>) {\n-        for derive_subtree in attrs.by_key(\"derive\").tt_values() {\n-            // for #[derive(Copy, Clone)], `derive_subtree` is the `(Copy, Clone)` subtree\n-            for tt in &derive_subtree.token_trees {\n-                let ident = match &tt {\n-                    tt::TokenTree::Leaf(tt::Leaf::Ident(ident)) => ident,\n-                    tt::TokenTree::Leaf(tt::Leaf::Punct(_)) => continue, // , is ok\n-                    _ => continue, // anything else would be an error (which we currently ignore)\n-                };\n-                let path = ModPath::from_tt_ident(ident);\n-\n-                let ast_id = AstIdWithPath::new(self.file_id, ast_id, path);\n-                self.def_collector\n-                    .unexpanded_attribute_macros\n-                    .push(DeriveDirective { module_id: self.module_id, ast_id });\n+        for derive in attrs.by_key(\"derive\").attrs() {\n+            match derive.parse_derive() {\n+                Some(derive_macros) => {\n+                    for path in derive_macros {\n+                        let ast_id = AstIdWithPath::new(self.file_id, ast_id, path);\n+                        self.def_collector\n+                            .unexpanded_attribute_macros\n+                            .push(DeriveDirective { module_id: self.module_id, ast_id });\n+                    }\n+                }\n+                None => {\n+                    // FIXME: diagnose\n+                    log::debug!(\"malformed derive: {:?}\", derive);\n+                }\n             }\n         }\n     }"}, {"sha": "c459fa66d2760ea4c3a560a800ab5a698926ab29", "filename": "crates/hir_def/src/nameres/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83a272582864bec707365dd196b07d5cfdf59dc6/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a272582864bec707365dd196b07d5cfdf59dc6/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests.rs?ref=83a272582864bec707365dd196b07d5cfdf59dc6", "patch": "@@ -13,8 +13,8 @@ use test_utils::mark;\n \n use crate::{db::DefDatabase, nameres::*, test_db::TestDB};\n \n-fn compute_crate_def_map(fixture: &str) -> Arc<CrateDefMap> {\n-    let db = TestDB::with_files(fixture);\n+fn compute_crate_def_map(ra_fixture: &str) -> Arc<CrateDefMap> {\n+    let db = TestDB::with_files(ra_fixture);\n     let krate = db.crate_graph().iter().next().unwrap();\n     db.crate_def_map(krate)\n }"}, {"sha": "f9bf5bc7253f6ac8e0f5e14e1c729589e72bcac7", "filename": "crates/hir_def/src/nameres/tests/macros.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83a272582864bec707365dd196b07d5cfdf59dc6/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a272582864bec707365dd196b07d5cfdf59dc6/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs?ref=83a272582864bec707365dd196b07d5cfdf59dc6", "patch": "@@ -632,11 +632,11 @@ pub struct bar;\n #[test]\n fn expand_derive() {\n     let map = compute_crate_def_map(\n-        \"\n+        r#\"\n         //- /main.rs crate:main deps:core\n-        use core::*;\n+        use core::Copy;\n \n-        #[derive(Copy, Clone)]\n+        #[derive(Copy, core::Clone)]\n         struct Foo;\n \n         //- /core.rs crate:core\n@@ -645,7 +645,7 @@ fn expand_derive() {\n \n         #[rustc_builtin_macro]\n         pub macro Clone {}\n-        \",\n+        \"#,\n     );\n     assert_eq!(map.modules[map.root].scope.impls().len(), 2);\n }"}, {"sha": "e2bf85bbc3a145080d5e15c02959275bb6a66e38", "filename": "crates/hir_def/src/path.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/83a272582864bec707365dd196b07d5cfdf59dc6/crates%2Fhir_def%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a272582864bec707365dd196b07d5cfdf59dc6/crates%2Fhir_def%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fpath.rs?ref=83a272582864bec707365dd196b07d5cfdf59dc6", "patch": "@@ -9,11 +9,8 @@ use std::{\n \n use crate::{body::LowerCtx, type_ref::LifetimeRef};\n use base_db::CrateId;\n-use hir_expand::{\n-    hygiene::Hygiene,\n-    name::{AsName, Name},\n-};\n-use syntax::ast::{self};\n+use hir_expand::{hygiene::Hygiene, name::Name};\n+use syntax::ast;\n \n use crate::{\n     type_ref::{TypeBound, TypeRef},\n@@ -56,11 +53,6 @@ impl ModPath {\n         ModPath { kind, segments }\n     }\n \n-    /// Converts an `tt::Ident` into a single-identifier `Path`.\n-    pub(crate) fn from_tt_ident(ident: &tt::Ident) -> ModPath {\n-        ident.as_name().into()\n-    }\n-\n     /// Calls `cb` with all paths, represented by this use item.\n     pub(crate) fn expand_use_item(\n         item_src: InFile<ast::Use>,"}, {"sha": "2f44876a8a3c382320363705d67dda4d821c0458", "filename": "crates/hir_expand/src/name.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/83a272582864bec707365dd196b07d5cfdf59dc6/crates%2Fhir_expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a272582864bec707365dd196b07d5cfdf59dc6/crates%2Fhir_expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fname.rs?ref=83a272582864bec707365dd196b07d5cfdf59dc6", "patch": "@@ -152,6 +152,7 @@ pub mod known {\n         str,\n         // Special names\n         macro_rules,\n+        derive,\n         doc,\n         cfg_attr,\n         // Components of known path (value or mod name)"}]}