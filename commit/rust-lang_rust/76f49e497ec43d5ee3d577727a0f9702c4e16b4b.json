{"sha": "76f49e497ec43d5ee3d577727a0f9702c4e16b4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2ZjQ5ZTQ5N2VjNDNkNWVlM2Q1Nzc3MjdhMGY5NzAyYzRlMTZiNGI=", "commit": {"author": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-05-16T19:09:55Z"}, "committer": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-05-16T19:09:55Z"}, "message": "Typo fixes.", "tree": {"sha": "4e4490a4a6c392b38bed78d90e0b089fa3237c4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e4490a4a6c392b38bed78d90e0b089fa3237c4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76f49e497ec43d5ee3d577727a0f9702c4e16b4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76f49e497ec43d5ee3d577727a0f9702c4e16b4b", "html_url": "https://github.com/rust-lang/rust/commit/76f49e497ec43d5ee3d577727a0f9702c4e16b4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76f49e497ec43d5ee3d577727a0f9702c4e16b4b/comments", "author": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa2ac6646233384deb6ff694da4e3b674a187cd0", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa2ac6646233384deb6ff694da4e3b674a187cd0", "html_url": "https://github.com/rust-lang/rust/commit/fa2ac6646233384deb6ff694da4e3b674a187cd0"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "8f68b0eac057c434fa9b163259503a6e913628ea", "filename": "src/rustc/middle/typeck/infer.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/76f49e497ec43d5ee3d577727a0f9702c4e16b4b/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76f49e497ec43d5ee3d577727a0f9702c4e16b4b/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs?ref=76f49e497ec43d5ee3d577727a0f9702c4e16b4b", "patch": "@@ -62,7 +62,7 @@ to pump constraints along and reach a fixed point, but it does impose\n some heuristics in the case where the user is relating two type\n variables A <: B.\n \n-The key point when relating type variables is that we do not know whta\n+The key point when relating type variables is that we do not know what\n type the variable represents, but we must make some change that will\n ensure that, whatever types A and B are resolved to, they are resolved\n to types which have a subtype relation.\n@@ -989,34 +989,34 @@ impl assignment for infer_ctxt {\n             alt (ty::get(a_bnd).struct, ty::get(b_bnd).struct) {\n               (ty::ty_box(mt_a), ty::ty_rptr(r_b, mt_b)) {\n                 let nr_b = ty::mk_box(self.tcx, mt_b);\n-                self.crosspolinate(anmnt, a, nr_b, r_b)\n+                self.crosspollinate(anmnt, a, nr_b, r_b)\n               }\n               (ty::ty_uniq(mt_a), ty::ty_rptr(r_b, mt_b)) {\n                 let nr_b = ty::mk_uniq(self.tcx, mt_b);\n-                self.crosspolinate(anmnt, a, nr_b, r_b)\n+                self.crosspollinate(anmnt, a, nr_b, r_b)\n               }\n               (ty::ty_estr(vs_a),\n                ty::ty_estr(ty::vstore_slice(r_b)))\n               if is_borrowable(vs_a) {\n                 let nr_b = ty::mk_estr(self.tcx, vs_a);\n-                self.crosspolinate(anmnt, a, nr_b, r_b)\n+                self.crosspollinate(anmnt, a, nr_b, r_b)\n               }\n               (ty::ty_str,\n                ty::ty_estr(ty::vstore_slice(r_b))) {\n                 let nr_b = ty::mk_str(self.tcx);\n-                self.crosspolinate(anmnt, a, nr_b, r_b)\n+                self.crosspollinate(anmnt, a, nr_b, r_b)\n               }\n \n               (ty::ty_evec(mt_a, vs_a),\n                ty::ty_evec(mt_b, ty::vstore_slice(r_b)))\n               if is_borrowable(vs_a) {\n                 let nr_b = ty::mk_evec(self.tcx, mt_b, vs_a);\n-                self.crosspolinate(anmnt, a, nr_b, r_b)\n+                self.crosspollinate(anmnt, a, nr_b, r_b)\n               }\n               (ty::ty_vec(mt_a),\n                ty::ty_evec(mt_b, ty::vstore_slice(r_b))) {\n                 let nr_b = ty::mk_vec(self.tcx, mt_b);\n-                self.crosspolinate(anmnt, a, nr_b, r_b)\n+                self.crosspollinate(anmnt, a, nr_b, r_b)\n               }\n               _ {\n                 self.sub_tys(a, b)\n@@ -1029,12 +1029,12 @@ impl assignment for infer_ctxt {\n         }\n     }\n \n-    fn crosspolinate(anmnt: assignment,\n+    fn crosspollinate(anmnt: assignment,\n                      a: ty::t,\n                      nr_b: ty::t,\n                      r_b: ty::region) -> ures {\n \n-        #debug[\"crosspolinate(anmnt=%?, a=%s, nr_b=%s, r_b=%s)\",\n+        #debug[\"crosspollinate(anmnt=%?, a=%s, nr_b=%s, r_b=%s)\",\n                anmnt, a.to_str(self), nr_b.to_str(self),\n                r_b.to_str(self)];\n "}]}