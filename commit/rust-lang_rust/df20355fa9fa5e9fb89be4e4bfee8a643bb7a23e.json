{"sha": "df20355fa9fa5e9fb89be4e4bfee8a643bb7a23e", "node_id": "C_kwDOAAsO6NoAKGRmMjAzNTVmYTlmYTVlOWZiODliZTRlNGJmZWU4YTY0M2JiN2EyM2U", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-31T10:33:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-31T10:33:56Z"}, "message": "Auto merge of #95456 - RalfJung:size, r=oli-obk\n\nallow large Size again\n\nThis basically reverts most of https://github.com/rust-lang/rust/pull/80042, and instead does the panic in `bits()` with a `#[cold]` function to make sure it does not get inlined.\n\nhttps://github.com/rust-lang/rust/pull/80042 added a comment about an invariant (\"The top 3 bits are ALWAYS zero\") that is not actually enforced, and if it were enforced that would be a problem for https://github.com/rust-lang/rust/pull/95388. So I think we should not have that invariant, and I adjusted the code accordingly.\n\nr? `@oli-obk` Cc `@sivadeilra`", "tree": {"sha": "0524050d132dafc2ce53626125011a0287ea3699", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0524050d132dafc2ce53626125011a0287ea3699"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df20355fa9fa5e9fb89be4e4bfee8a643bb7a23e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df20355fa9fa5e9fb89be4e4bfee8a643bb7a23e", "html_url": "https://github.com/rust-lang/rust/commit/df20355fa9fa5e9fb89be4e4bfee8a643bb7a23e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df20355fa9fa5e9fb89be4e4bfee8a643bb7a23e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e730969b0d433d66d4f1c0bbd9ff70050c274ad5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e730969b0d433d66d4f1c0bbd9ff70050c274ad5", "html_url": "https://github.com/rust-lang/rust/commit/e730969b0d433d66d4f1c0bbd9ff70050c274ad5"}, {"sha": "2799885ed03708eea1ec372339317bd97e5c5601", "url": "https://api.github.com/repos/rust-lang/rust/commits/2799885ed03708eea1ec372339317bd97e5c5601", "html_url": "https://github.com/rust-lang/rust/commit/2799885ed03708eea1ec372339317bd97e5c5601"}], "stats": {"total": 23, "additions": 7, "deletions": 16}, "files": [{"sha": "52fce7c0553091e5c1d5681666834b5a4770a71c", "filename": "compiler/rustc_target/src/abi/mod.rs", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/df20355fa9fa5e9fb89be4e4bfee8a643bb7a23e/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df20355fa9fa5e9fb89be4e4bfee8a643bb7a23e/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs?ref=df20355fa9fa5e9fb89be4e4bfee8a643bb7a23e", "patch": "@@ -279,30 +279,16 @@ impl ToJson for Endian {\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, Encodable, Decodable)]\n #[derive(HashStable_Generic)]\n pub struct Size {\n-    // The top 3 bits are ALWAYS zero.\n     raw: u64,\n }\n \n impl Size {\n     pub const ZERO: Size = Size { raw: 0 };\n \n     /// Rounds `bits` up to the next-higher byte boundary, if `bits` is\n-    /// is not aligned.\n+    /// not a multiple of 8.\n     pub fn from_bits(bits: impl TryInto<u64>) -> Size {\n         let bits = bits.try_into().ok().unwrap();\n-\n-        #[cold]\n-        fn overflow(bits: u64) -> ! {\n-            panic!(\"Size::from_bits({}) has overflowed\", bits);\n-        }\n-\n-        // This is the largest value of `bits` that does not cause overflow\n-        // during rounding, and guarantees that the resulting number of bytes\n-        // cannot cause overflow when multiplied by 8.\n-        if bits > 0xffff_ffff_ffff_fff8 {\n-            overflow(bits);\n-        }\n-\n         // Avoid potential overflow from `bits + 7`.\n         Size { raw: bits / 8 + ((bits % 8) + 7) / 8 }\n     }\n@@ -325,7 +311,12 @@ impl Size {\n \n     #[inline]\n     pub fn bits(self) -> u64 {\n-        self.raw << 3\n+        #[cold]\n+        fn overflow(bytes: u64) -> ! {\n+            panic!(\"Size::bits: {} bytes in bits doesn't fit in u64\", bytes)\n+        }\n+\n+        self.bytes().checked_mul(8).unwrap_or_else(|| overflow(self.bytes()))\n     }\n \n     #[inline]"}]}