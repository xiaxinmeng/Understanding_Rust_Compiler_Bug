{"sha": "91b200c62b7c464cb890c68230ab2d74605a60d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxYjIwMGM2MmI3YzQ2NGNiODkwYzY4MjMwYWIyZDc0NjA1YTYwZDA=", "commit": {"author": {"name": "rail", "email": "12975677+rail-rain@users.noreply.github.com", "date": "2020-08-23T10:16:24Z"}, "committer": {"name": "rail", "email": "12975677+rail-rain@users.noreply.github.com", "date": "2020-08-23T10:49:08Z"}, "message": "Fix fp in `borrow_interior_mutable_const`\n\nFix false positive when referencing a field behind a pointer.", "tree": {"sha": "6dd3523a050e5df8d0b01ff45d9a41534c3d4ccd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6dd3523a050e5df8d0b01ff45d9a41534c3d4ccd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91b200c62b7c464cb890c68230ab2d74605a60d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91b200c62b7c464cb890c68230ab2d74605a60d0", "html_url": "https://github.com/rust-lang/rust/commit/91b200c62b7c464cb890c68230ab2d74605a60d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91b200c62b7c464cb890c68230ab2d74605a60d0/comments", "author": {"login": "rail-rain", "id": 12975677, "node_id": "MDQ6VXNlcjEyOTc1Njc3", "avatar_url": "https://avatars.githubusercontent.com/u/12975677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rail-rain", "html_url": "https://github.com/rail-rain", "followers_url": "https://api.github.com/users/rail-rain/followers", "following_url": "https://api.github.com/users/rail-rain/following{/other_user}", "gists_url": "https://api.github.com/users/rail-rain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rail-rain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rail-rain/subscriptions", "organizations_url": "https://api.github.com/users/rail-rain/orgs", "repos_url": "https://api.github.com/users/rail-rain/repos", "events_url": "https://api.github.com/users/rail-rain/events{/privacy}", "received_events_url": "https://api.github.com/users/rail-rain/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rail-rain", "id": 12975677, "node_id": "MDQ6VXNlcjEyOTc1Njc3", "avatar_url": "https://avatars.githubusercontent.com/u/12975677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rail-rain", "html_url": "https://github.com/rail-rain", "followers_url": "https://api.github.com/users/rail-rain/followers", "following_url": "https://api.github.com/users/rail-rain/following{/other_user}", "gists_url": "https://api.github.com/users/rail-rain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rail-rain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rail-rain/subscriptions", "organizations_url": "https://api.github.com/users/rail-rain/orgs", "repos_url": "https://api.github.com/users/rail-rain/repos", "events_url": "https://api.github.com/users/rail-rain/events{/privacy}", "received_events_url": "https://api.github.com/users/rail-rain/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27ae4d303ce9103a104c57088913741ab17f4d36", "url": "https://api.github.com/repos/rust-lang/rust/commits/27ae4d303ce9103a104c57088913741ab17f4d36", "html_url": "https://github.com/rust-lang/rust/commit/27ae4d303ce9103a104c57088913741ab17f4d36"}], "stats": {"total": 82, "additions": 64, "deletions": 18}, "files": [{"sha": "f1df634701dd25d5c7a8e5dfcaa31abaad210426", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/91b200c62b7c464cb890c68230ab2d74605a60d0/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b200c62b7c464cb890c68230ab2d74605a60d0/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=91b200c62b7c464cb890c68230ab2d74605a60d0", "patch": "@@ -211,8 +211,21 @@ impl<'tcx> LateLintPass<'tcx> for NonCopyConst {\n                             needs_check_adjustment = false;\n                         },\n                         ExprKind::Field(..) => {\n-                            dereferenced_expr = parent_expr;\n                             needs_check_adjustment = true;\n+\n+                            // Check whether implicit dereferences happened;\n+                            // if so, no need to go further up\n+                            // because of the same reason as the `ExprKind::Unary` case.\n+                            if cx\n+                                .typeck_results()\n+                                .expr_adjustments(dereferenced_expr)\n+                                .iter()\n+                                .any(|adj| matches!(adj.kind, Adjust::Deref(_)))\n+                            {\n+                                break;\n+                            }\n+\n+                            dereferenced_expr = parent_expr;\n                         },\n                         ExprKind::Index(e, _) if ptr::eq(&**e, cur_expr) => {\n                             // `e[i]` => desugared to `*Index::index(&e, i)`,"}, {"sha": "310769cd002be0ebb26f4bcf4e5f2661067daf58", "filename": "tests/ui/borrow_interior_mutable_const.rs", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/91b200c62b7c464cb890c68230ab2d74605a60d0/tests%2Fui%2Fborrow_interior_mutable_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b200c62b7c464cb890c68230ab2d74605a60d0/tests%2Fui%2Fborrow_interior_mutable_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrow_interior_mutable_const.rs?ref=91b200c62b7c464cb890c68230ab2d74605a60d0", "patch": "@@ -2,7 +2,7 @@\n #![allow(clippy::declare_interior_mutable_const, clippy::ref_in_deref)]\n \n use std::borrow::Cow;\n-use std::cell::Cell;\n+use std::cell::{Cell, UnsafeCell};\n use std::fmt::Display;\n use std::sync::atomic::{AtomicUsize, Ordering};\n use std::sync::Once;\n@@ -30,6 +30,37 @@ impl Trait<u32> for u64 {\n     const ATOMIC: AtomicUsize = AtomicUsize::new(9);\n }\n \n+// This is just a pointer that can be safely dereferended,\n+// it's semantically the same as `&'static T`;\n+// but it isn't allowed make a static reference from an arbitrary integer value at the moment.\n+// For more information, please see the issue #5918.\n+pub struct StaticRef<T> {\n+    ptr: *const T,\n+}\n+\n+impl<T> StaticRef<T> {\n+    /// Create a new `StaticRef` from a raw pointer\n+    ///\n+    /// ## Safety\n+    ///\n+    /// Callers must pass in a reference to statically allocated memory which\n+    /// does not overlap with other values.\n+    pub const unsafe fn new(ptr: *const T) -> StaticRef<T> {\n+        StaticRef { ptr }\n+    }\n+}\n+\n+impl<T> std::ops::Deref for StaticRef<T> {\n+    type Target = T;\n+\n+    fn deref(&self) -> &'static T {\n+        unsafe { &*self.ptr }\n+    }\n+}\n+\n+// use a tuple to make sure referencing a field behind a pointer isn't linted.\n+const CELL_REF: StaticRef<(UnsafeCell<u32>,)> = unsafe { StaticRef::new(std::ptr::null()) };\n+\n fn main() {\n     ATOMIC.store(1, Ordering::SeqCst); //~ ERROR interior mutability\n     assert_eq!(ATOMIC.load(Ordering::SeqCst), 5); //~ ERROR interior mutability\n@@ -82,4 +113,6 @@ fn main() {\n     assert_eq!(u64::ATOMIC.load(Ordering::SeqCst), 9); //~ ERROR interior mutability\n \n     assert_eq!(NO_ANN.to_string(), \"70\"); // should never lint this.\n+\n+    let _ = &CELL_REF.0;\n }"}, {"sha": "1e0b3e4d20a5236c6b7c72162f0490bd8eb54345", "filename": "tests/ui/borrow_interior_mutable_const.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/91b200c62b7c464cb890c68230ab2d74605a60d0/tests%2Fui%2Fborrow_interior_mutable_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91b200c62b7c464cb890c68230ab2d74605a60d0/tests%2Fui%2Fborrow_interior_mutable_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrow_interior_mutable_const.stderr?ref=91b200c62b7c464cb890c68230ab2d74605a60d0", "patch": "@@ -1,5 +1,5 @@\n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:34:5\n+  --> $DIR/borrow_interior_mutable_const.rs:65:5\n    |\n LL |     ATOMIC.store(1, Ordering::SeqCst); //~ ERROR interior mutability\n    |     ^^^^^^\n@@ -8,119 +8,119 @@ LL |     ATOMIC.store(1, Ordering::SeqCst); //~ ERROR interior mutability\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:35:16\n+  --> $DIR/borrow_interior_mutable_const.rs:66:16\n    |\n LL |     assert_eq!(ATOMIC.load(Ordering::SeqCst), 5); //~ ERROR interior mutability\n    |                ^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:38:22\n+  --> $DIR/borrow_interior_mutable_const.rs:69:22\n    |\n LL |     let _once_ref = &ONCE_INIT; //~ ERROR interior mutability\n    |                      ^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:39:25\n+  --> $DIR/borrow_interior_mutable_const.rs:70:25\n    |\n LL |     let _once_ref_2 = &&ONCE_INIT; //~ ERROR interior mutability\n    |                         ^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:40:27\n+  --> $DIR/borrow_interior_mutable_const.rs:71:27\n    |\n LL |     let _once_ref_4 = &&&&ONCE_INIT; //~ ERROR interior mutability\n    |                           ^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:41:26\n+  --> $DIR/borrow_interior_mutable_const.rs:72:26\n    |\n LL |     let _once_mut = &mut ONCE_INIT; //~ ERROR interior mutability\n    |                          ^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:52:14\n+  --> $DIR/borrow_interior_mutable_const.rs:83:14\n    |\n LL |     let _ = &ATOMIC_TUPLE; //~ ERROR interior mutability\n    |              ^^^^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:53:14\n+  --> $DIR/borrow_interior_mutable_const.rs:84:14\n    |\n LL |     let _ = &ATOMIC_TUPLE.0; //~ ERROR interior mutability\n    |              ^^^^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:54:19\n+  --> $DIR/borrow_interior_mutable_const.rs:85:19\n    |\n LL |     let _ = &(&&&&ATOMIC_TUPLE).0; //~ ERROR interior mutability\n    |                   ^^^^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:55:14\n+  --> $DIR/borrow_interior_mutable_const.rs:86:14\n    |\n LL |     let _ = &ATOMIC_TUPLE.0[0]; //~ ERROR interior mutability\n    |              ^^^^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:56:13\n+  --> $DIR/borrow_interior_mutable_const.rs:87:13\n    |\n LL |     let _ = ATOMIC_TUPLE.0[0].load(Ordering::SeqCst); //~ ERROR interior mutability\n    |             ^^^^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:62:13\n+  --> $DIR/borrow_interior_mutable_const.rs:93:13\n    |\n LL |     let _ = ATOMIC_TUPLE.0[0]; //~ ERROR interior mutability\n    |             ^^^^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:67:5\n+  --> $DIR/borrow_interior_mutable_const.rs:98:5\n    |\n LL |     CELL.set(2); //~ ERROR interior mutability\n    |     ^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:68:16\n+  --> $DIR/borrow_interior_mutable_const.rs:99:16\n    |\n LL |     assert_eq!(CELL.get(), 6); //~ ERROR interior mutability\n    |                ^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:81:5\n+  --> $DIR/borrow_interior_mutable_const.rs:112:5\n    |\n LL |     u64::ATOMIC.store(5, Ordering::SeqCst); //~ ERROR interior mutability\n    |     ^^^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:82:16\n+  --> $DIR/borrow_interior_mutable_const.rs:113:16\n    |\n LL |     assert_eq!(u64::ATOMIC.load(Ordering::SeqCst), 9); //~ ERROR interior mutability\n    |                ^^^^^^^^^^^"}]}