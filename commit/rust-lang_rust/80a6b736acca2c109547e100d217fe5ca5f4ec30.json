{"sha": "80a6b736acca2c109547e100d217fe5ca5f4ec30", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwYTZiNzM2YWNjYTJjMTA5NTQ3ZTEwMGQyMTdmZTVjYTVmNGVjMzA=", "commit": {"author": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2018-10-22T16:54:02Z"}, "committer": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2018-10-22T16:54:02Z"}, "message": "Unimplement ExactSizeIterator\n\nIf root is not START_BLOCK, `basic_blocks().len() - visited` does not represent\ntheir exact size.", "tree": {"sha": "64a7179a733489513165e4264eb0c5b1a6d6d636", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64a7179a733489513165e4264eb0c5b1a6d6d636"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80a6b736acca2c109547e100d217fe5ca5f4ec30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80a6b736acca2c109547e100d217fe5ca5f4ec30", "html_url": "https://github.com/rust-lang/rust/commit/80a6b736acca2c109547e100d217fe5ca5f4ec30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80a6b736acca2c109547e100d217fe5ca5f4ec30/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89be71a46234a2231b5b3839cd497188e072291f", "url": "https://api.github.com/repos/rust-lang/rust/commits/89be71a46234a2231b5b3839cd497188e072291f", "html_url": "https://github.com/rust-lang/rust/commit/89be71a46234a2231b5b3839cd497188e072291f"}], "stats": {"total": 36, "additions": 24, "deletions": 12}, "files": [{"sha": "a1e2b7a06468d0994bf76868942b3aa352097097", "filename": "src/librustc/mir/traversal.rs", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/80a6b736acca2c109547e100d217fe5ca5f4ec30/src%2Flibrustc%2Fmir%2Ftraversal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80a6b736acca2c109547e100d217fe5ca5f4ec30/src%2Flibrustc%2Fmir%2Ftraversal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftraversal.rs?ref=80a6b736acca2c109547e100d217fe5ca5f4ec30", "patch": "@@ -34,6 +34,7 @@ pub struct Preorder<'a, 'tcx: 'a> {\n     mir: &'a Mir<'tcx>,\n     visited: BitSet<BasicBlock>,\n     worklist: Vec<BasicBlock>,\n+    root_is_start_block: bool,\n }\n \n impl<'a, 'tcx> Preorder<'a, 'tcx> {\n@@ -44,6 +45,7 @@ impl<'a, 'tcx> Preorder<'a, 'tcx> {\n             mir,\n             visited: BitSet::new_empty(mir.basic_blocks().len()),\n             worklist,\n+            root_is_start_block: root == START_BLOCK,\n         }\n     }\n }\n@@ -75,15 +77,19 @@ impl<'a, 'tcx> Iterator for Preorder<'a, 'tcx> {\n \n     fn size_hint(&self) -> (usize, Option<usize>) {\n         // All the blocks, minus the number of blocks we've visited.\n-        let remaining = self.mir.basic_blocks().len() - self.visited.count();\n+        let upper = self.mir.basic_blocks().len() - self.visited.count();\n \n-        // We will visit all remaining blocks exactly once.\n-        (remaining, Some(remaining))\n+        let lower = if self.root_is_start_block {\n+            // We will visit all remaining blocks exactly once.\n+            upper\n+        } else {\n+            self.worklist.len()\n+        };\n+\n+        (lower, Some(upper))\n     }\n }\n \n-impl<'a, 'tcx> ExactSizeIterator for Preorder<'a, 'tcx> {}\n-\n /// Postorder traversal of a graph.\n ///\n /// Postorder traversal is when each node is visited after all of it's\n@@ -105,15 +111,17 @@ impl<'a, 'tcx> ExactSizeIterator for Preorder<'a, 'tcx> {}\n pub struct Postorder<'a, 'tcx: 'a> {\n     mir: &'a Mir<'tcx>,\n     visited: BitSet<BasicBlock>,\n-    visit_stack: Vec<(BasicBlock, Successors<'a>)>\n+    visit_stack: Vec<(BasicBlock, Successors<'a>)>,\n+    root_is_start_block: bool,\n }\n \n impl<'a, 'tcx> Postorder<'a, 'tcx> {\n     pub fn new(mir: &'a Mir<'tcx>, root: BasicBlock) -> Postorder<'a, 'tcx> {\n         let mut po = Postorder {\n             mir,\n             visited: BitSet::new_empty(mir.basic_blocks().len()),\n-            visit_stack: Vec::new()\n+            visit_stack: Vec::new(),\n+            root_is_start_block: root == START_BLOCK,\n         };\n \n \n@@ -214,15 +222,19 @@ impl<'a, 'tcx> Iterator for Postorder<'a, 'tcx> {\n \n     fn size_hint(&self) -> (usize, Option<usize>) {\n         // All the blocks, minus the number of blocks we've visited.\n-        let remaining = self.mir.basic_blocks().len() - self.visited.count();\n+        let upper = self.mir.basic_blocks().len() - self.visited.count();\n \n-        // We will visit all remaining blocks exactly once.\n-        (remaining, Some(remaining))\n+        let lower = if self.root_is_start_block {\n+            // We will visit all remaining blocks exactly once.\n+            upper\n+        } else {\n+            self.visit_stack.len()\n+        };\n+\n+        (lower, Some(upper))\n     }\n }\n \n-impl<'a, 'tcx> ExactSizeIterator for Postorder<'a, 'tcx> {}\n-\n /// Reverse postorder traversal of a graph\n ///\n /// Reverse postorder is the reverse order of a postorder traversal."}]}