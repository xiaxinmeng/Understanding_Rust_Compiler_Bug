{"sha": "c815fef7959930ccdaca64f50910028f06aa74fe", "node_id": "C_kwDOAAsO6NoAKGM4MTVmZWY3OTU5OTMwY2NkYWNhNjRmNTA5MTAwMjhmMDZhYTc0ZmU", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-07-07T12:36:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-07T12:36:50Z"}, "message": "Rollup merge of #98507 - xFrednet:rfc-2383-manual-expectation-magic, r=wesleywiser\n\nFinishing touches for `#[expect]` (RFC 2383)\n\nThis PR adds documentation and some functionality to rustc's lint passes, to manually fulfill expectations. This is needed for some lints in Clippy. Hopefully, it should be one of the last things before we can move forward with stabilizing this feature.\n\nAs part of this PR, I've also updated `clippy::duplicate_mod` to showcase how this new functionality can be used and to ensure that it works correctly.\n\n---\n\nchangelog: [`duplicate_mod`]: Fixed lint attribute interaction\n\nr? `@wesleywiser`\n\ncc: https://github.com/rust-lang/rust/issues/97660, https://github.com/rust-lang/rust/issues/85549\n\nAnd I guess that's it. Here have a magical unicorn :unicorn:", "tree": {"sha": "d6524c8f04f81c4adfec93fb6d0a24bfa0733d55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6524c8f04f81c4adfec93fb6d0a24bfa0733d55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c815fef7959930ccdaca64f50910028f06aa74fe", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJixtNiCRBK7hj4Ov3rIwAABwEIACKae7kVunF+YF2lDUEagQE3\nbNh07YtqlNPMCaurPNsUtokNFjx86RTJhmHmSmKXEE/QCShAo+1HVMmcz2U3JfW2\n6KISS0slSO+MIKj29vc0ou4GUtLDKkywlxdlzf8/cnE6d+plh+i0L2NNNwKOttA2\nJT3pK7olHYC0OZu75lWy92ki7havmQ29nmwGszC4xpQ3qqlBFMGWbAkyZMsdLe64\nhMvpm9XPCUp4bpoUeqg6p21tvoRZOYbmCLkBo9zZHcQemFl2JkCUqrVxO9twtAy3\niNu37LHc8H13IJTv9F4x6tt+FWfiQ+BYKUTxWzbXOjitnt2wnCXxRVnMhjT0o/8=\n=71Ol\n-----END PGP SIGNATURE-----\n", "payload": "tree d6524c8f04f81c4adfec93fb6d0a24bfa0733d55\nparent d63c713947ed54d7e63398dc34cc32459a9e455c\nparent a2810cd277a8b747e5cb4ddd57d310e770599357\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1657197410 +0530\ncommitter GitHub <noreply@github.com> 1657197410 +0530\n\nRollup merge of #98507 - xFrednet:rfc-2383-manual-expectation-magic, r=wesleywiser\n\nFinishing touches for `#[expect]` (RFC 2383)\n\nThis PR adds documentation and some functionality to rustc's lint passes, to manually fulfill expectations. This is needed for some lints in Clippy. Hopefully, it should be one of the last things before we can move forward with stabilizing this feature.\n\nAs part of this PR, I've also updated `clippy::duplicate_mod` to showcase how this new functionality can be used and to ensure that it works correctly.\n\n---\n\nchangelog: [`duplicate_mod`]: Fixed lint attribute interaction\n\nr? `@wesleywiser`\n\ncc: https://github.com/rust-lang/rust/issues/97660, https://github.com/rust-lang/rust/issues/85549\n\nAnd I guess that's it. Here have a magical unicorn :unicorn:\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c815fef7959930ccdaca64f50910028f06aa74fe", "html_url": "https://github.com/rust-lang/rust/commit/c815fef7959930ccdaca64f50910028f06aa74fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c815fef7959930ccdaca64f50910028f06aa74fe/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d63c713947ed54d7e63398dc34cc32459a9e455c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d63c713947ed54d7e63398dc34cc32459a9e455c", "html_url": "https://github.com/rust-lang/rust/commit/d63c713947ed54d7e63398dc34cc32459a9e455c"}, {"sha": "a2810cd277a8b747e5cb4ddd57d310e770599357", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2810cd277a8b747e5cb4ddd57d310e770599357", "html_url": "https://github.com/rust-lang/rust/commit/a2810cd277a8b747e5cb4ddd57d310e770599357"}], "stats": {"total": 99, "additions": 92, "deletions": 7}, "files": [{"sha": "5725c240320ad779a68d36f6f12e75890edce3ed", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c815fef7959930ccdaca64f50910028f06aa74fe/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c815fef7959930ccdaca64f50910028f06aa74fe/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=c815fef7959930ccdaca64f50910028f06aa74fe", "patch": "@@ -34,7 +34,7 @@ use rustc_middle::middle::stability;\n use rustc_middle::ty::layout::{LayoutError, LayoutOfHelpers, TyAndLayout};\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::{self, print::Printer, subst::GenericArg, RegisteredTools, Ty, TyCtxt};\n-use rustc_session::lint::BuiltinLintDiagnostics;\n+use rustc_session::lint::{BuiltinLintDiagnostics, LintExpectationId};\n use rustc_session::lint::{FutureIncompatibleInfo, Level, Lint, LintBuffer, LintId};\n use rustc_session::Session;\n use rustc_span::lev_distance::find_best_match_for_name;\n@@ -906,6 +906,29 @@ pub trait LintContext: Sized {\n     ) {\n         self.lookup(lint, None as Option<Span>, decorate);\n     }\n+\n+    /// This returns the lint level for the given lint at the current location.\n+    fn get_lint_level(&self, lint: &'static Lint) -> Level;\n+\n+    /// This function can be used to manually fulfill an expectation. This can\n+    /// be used for lints which contain several spans, and should be suppressed,\n+    /// if either location was marked with an expectation.\n+    ///\n+    /// Note that this function should only be called for [`LintExpectationId`]s\n+    /// retrieved from the current lint pass. Buffered or manually created ids can\n+    /// cause ICEs.\n+    fn fulfill_expectation(&self, expectation: LintExpectationId) {\n+        // We need to make sure that submitted expectation ids are correctly fulfilled suppressed\n+        // and stored between compilation sessions. To not manually do these steps, we simply create\n+        // a dummy diagnostic and emit is as usual, which will be suppressed and stored like a normal\n+        // expected lint diagnostic.\n+        self.sess()\n+            .struct_expect(\n+                \"this is a dummy diagnostic, to submit and store an expectation\",\n+                expectation,\n+            )\n+            .emit();\n+    }\n }\n \n impl<'a> EarlyContext<'a> {\n@@ -953,6 +976,10 @@ impl LintContext for LateContext<'_> {\n             None => self.tcx.struct_lint_node(lint, hir_id, decorate),\n         }\n     }\n+\n+    fn get_lint_level(&self, lint: &'static Lint) -> Level {\n+        self.tcx.lint_level_at_node(lint, self.last_node_with_lint_attrs).0\n+    }\n }\n \n impl LintContext for EarlyContext<'_> {\n@@ -975,6 +1002,10 @@ impl LintContext for EarlyContext<'_> {\n     ) {\n         self.builder.struct_lint(lint, span.map(|s| s.into()), decorate)\n     }\n+\n+    fn get_lint_level(&self, lint: &'static Lint) -> Level {\n+        self.builder.lint_level(lint).0\n+    }\n }\n \n impl<'tcx> LateContext<'tcx> {"}, {"sha": "9fc2249b29019dfa3d5647eccfb230a800d33949", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c815fef7959930ccdaca64f50910028f06aa74fe/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c815fef7959930ccdaca64f50910028f06aa74fe/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=c815fef7959930ccdaca64f50910028f06aa74fe", "patch": "@@ -520,6 +520,11 @@ declare_lint! {\n     /// The `expect` attribute can be removed if this is intended behavior otherwise\n     /// it should be investigated why the expected lint is no longer issued.\n     ///\n+    /// In rare cases, the expectation might be emitted at a different location than\n+    /// shown in the shown code snippet. In most cases, the `#[expect]` attribute\n+    /// works when added to the outer scope. A few lints can only be expected\n+    /// on a crate level.\n+    ///\n     /// Part of RFC 2383. The progress is being tracked in [#54503]\n     ///\n     /// [#54503]: https://github.com/rust-lang/rust/issues/54503"}, {"sha": "48f441e69d64204254504175aa69cb0d3a5aafce", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c815fef7959930ccdaca64f50910028f06aa74fe/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c815fef7959930ccdaca64f50910028f06aa74fe/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=c815fef7959930ccdaca64f50910028f06aa74fe", "patch": "@@ -232,6 +232,13 @@ impl Level {\n             Level::Deny | Level::Forbid => true,\n         }\n     }\n+\n+    pub fn get_expectation_id(&self) -> Option<LintExpectationId> {\n+        match self {\n+            Level::Expect(id) | Level::ForceWarn(Some(id)) => Some(*id),\n+            _ => None,\n+        }\n+    }\n }\n \n /// Specification of a single lint."}, {"sha": "4f49bb879f5035c9b66e07a354089d681046e5e9", "filename": "src/tools/clippy/clippy_lints/src/duplicate_mod.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c815fef7959930ccdaca64f50910028f06aa74fe/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fduplicate_mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c815fef7959930ccdaca64f50910028f06aa74fe/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fduplicate_mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fduplicate_mod.rs?ref=c815fef7959930ccdaca64f50910028f06aa74fe", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n use rustc_ast::ast::{Crate, Inline, Item, ItemKind, ModKind};\n use rustc_errors::MultiSpan;\n-use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n+use rustc_lint::{EarlyContext, EarlyLintPass, LintContext, Level};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{FileName, Span};\n use std::collections::BTreeMap;\n@@ -49,6 +49,7 @@ declare_clippy_lint! {\n struct Modules {\n     local_path: PathBuf,\n     spans: Vec<Span>,\n+    lint_levels: Vec<Level>,\n }\n \n #[derive(Default)]\n@@ -70,13 +71,30 @@ impl EarlyLintPass for DuplicateMod {\n             let modules = self.modules.entry(absolute_path).or_insert(Modules {\n                 local_path,\n                 spans: Vec::new(),\n+                lint_levels: Vec::new(),\n             });\n             modules.spans.push(item.span_with_attributes());\n+            modules.lint_levels.push(cx.get_lint_level(DUPLICATE_MOD));\n         }\n     }\n \n     fn check_crate_post(&mut self, cx: &EarlyContext<'_>, _: &Crate) {\n-        for Modules { local_path, spans } in self.modules.values() {\n+        for Modules { local_path, spans, lint_levels } in self.modules.values() {\n+            if spans.len() < 2 {\n+                continue;\n+            }\n+\n+            // At this point the lint would be emitted\n+            assert_eq!(spans.len(), lint_levels.len());\n+            let spans: Vec<_> = spans.into_iter().zip(lint_levels).filter_map(|(span, lvl)|{\n+                if let Some(id) = lvl.get_expectation_id() {\n+                    cx.fulfill_expectation(id);\n+                }\n+\n+                (!matches!(lvl, Level::Allow | Level::Expect(_))).then_some(*span)\n+            })\n+            .collect();\n+\n             if spans.len() < 2 {\n                 continue;\n             }"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "src/tools/clippy/tests/ui-cargo/duplicate_mod/fail/src/d.rs", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c815fef7959930ccdaca64f50910028f06aa74fe/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fduplicate_mod%2Ffail%2Fsrc%2Fd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c815fef7959930ccdaca64f50910028f06aa74fe/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fduplicate_mod%2Ffail%2Fsrc%2Fd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fduplicate_mod%2Ffail%2Fsrc%2Fd.rs?ref=c815fef7959930ccdaca64f50910028f06aa74fe"}, {"sha": "99ca538b6e4a58bcecd21c2ea8bc7dc04037a9d5", "filename": "src/tools/clippy/tests/ui-cargo/duplicate_mod/fail/src/main.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c815fef7959930ccdaca64f50910028f06aa74fe/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fduplicate_mod%2Ffail%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c815fef7959930ccdaca64f50910028f06aa74fe/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fduplicate_mod%2Ffail%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fduplicate_mod%2Ffail%2Fsrc%2Fmain.rs?ref=c815fef7959930ccdaca64f50910028f06aa74fe", "patch": "@@ -1,3 +1,5 @@\n+#[feature(lint_reasons)]\n+\n mod a;\n \n mod b;\n@@ -13,4 +15,15 @@ mod c3;\n mod from_other_module;\n mod other_module;\n \n+mod d;\n+#[path = \"d.rs\"]\n+mod d2;\n+#[path = \"d.rs\"]\n+#[expect(clippy::duplicate_mod)]\n+mod d3;\n+#[path = \"d.rs\"]\n+#[allow(clippy::duplicate_mod)]\n+mod d4;\n+\n+\n fn main() {}"}, {"sha": "61df1ad5d501aad6d95ea089f282af0e639d7ce0", "filename": "src/tools/clippy/tests/ui-cargo/duplicate_mod/fail/src/main.stderr", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c815fef7959930ccdaca64f50910028f06aa74fe/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fduplicate_mod%2Ffail%2Fsrc%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c815fef7959930ccdaca64f50910028f06aa74fe/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fduplicate_mod%2Ffail%2Fsrc%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fduplicate_mod%2Ffail%2Fsrc%2Fmain.stderr?ref=c815fef7959930ccdaca64f50910028f06aa74fe", "patch": "@@ -1,5 +1,5 @@\n error: file is loaded as a module multiple times: `$DIR/b.rs`\n-  --> $DIR/main.rs:3:1\n+  --> $DIR/main.rs:5:1\n    |\n LL |   mod b;\n    |   ^^^^^^ first loaded here\n@@ -11,7 +11,7 @@ LL | | mod b2;\n    = help: replace all but one `mod` item with `use` items\n \n error: file is loaded as a module multiple times: `$DIR/c.rs`\n-  --> $DIR/main.rs:7:1\n+  --> $DIR/main.rs:9:1\n    |\n LL |   mod c;\n    |   ^^^^^^ first loaded here\n@@ -25,7 +25,7 @@ LL | | mod c3;\n    = help: replace all but one `mod` item with `use` items\n \n error: file is loaded as a module multiple times: `$DIR/from_other_module.rs`\n-  --> $DIR/main.rs:13:1\n+  --> $DIR/main.rs:15:1\n    |\n LL |   mod from_other_module;\n    |   ^^^^^^^^^^^^^^^^^^^^^^ first loaded here\n@@ -38,5 +38,16 @@ LL | | mod m;\n    |\n    = help: replace all but one `mod` item with `use` items\n \n-error: aborting due to 3 previous errors\n+error: file is loaded as a module multiple times: `$DIR/b.rs`\n+  --> $DIR/main.rs:18:1\n+   |\n+LL |   mod d;\n+   |   ^^^^^^ first loaded here\n+LL | / #[path = \"d.rs\"]\n+LL | | mod d2;\n+   | |_______^ loaded again here\n+   |\n+   = help: replace all but one `mod` item with `use` items\n+\n+error: aborting due to 4 previous errors\n "}]}