{"sha": "17033a62b420fcf353150998bbdb62629efdf956", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3MDMzYTYyYjQyMGZjZjM1MzE1MDk5OGJiZGI2MjYyOWVmZGY5NTY=", "commit": {"author": {"name": "Michael Pankov", "email": "work@michaelpankov.com", "date": "2015-10-07T22:01:02Z"}, "committer": {"name": "Michael Pankov", "email": "work@michaelpankov.com", "date": "2015-10-07T22:02:45Z"}, "message": "rustfmt part of libcore/fmt\n\nRest is blocked by https://github.com/nrc/rustfmt/issues/413", "tree": {"sha": "65d431b7bcb2ac67d5025fbcba99c6e1d80b9bcd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65d431b7bcb2ac67d5025fbcba99c6e1d80b9bcd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17033a62b420fcf353150998bbdb62629efdf956", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17033a62b420fcf353150998bbdb62629efdf956", "html_url": "https://github.com/rust-lang/rust/commit/17033a62b420fcf353150998bbdb62629efdf956", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17033a62b420fcf353150998bbdb62629efdf956/comments", "author": {"login": "mkpankov", "id": 393741, "node_id": "MDQ6VXNlcjM5Mzc0MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/393741?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mkpankov", "html_url": "https://github.com/mkpankov", "followers_url": "https://api.github.com/users/mkpankov/followers", "following_url": "https://api.github.com/users/mkpankov/following{/other_user}", "gists_url": "https://api.github.com/users/mkpankov/gists{/gist_id}", "starred_url": "https://api.github.com/users/mkpankov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mkpankov/subscriptions", "organizations_url": "https://api.github.com/users/mkpankov/orgs", "repos_url": "https://api.github.com/users/mkpankov/repos", "events_url": "https://api.github.com/users/mkpankov/events{/privacy}", "received_events_url": "https://api.github.com/users/mkpankov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mkpankov", "id": 393741, "node_id": "MDQ6VXNlcjM5Mzc0MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/393741?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mkpankov", "html_url": "https://github.com/mkpankov", "followers_url": "https://api.github.com/users/mkpankov/followers", "following_url": "https://api.github.com/users/mkpankov/following{/other_user}", "gists_url": "https://api.github.com/users/mkpankov/gists{/gist_id}", "starred_url": "https://api.github.com/users/mkpankov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mkpankov/subscriptions", "organizations_url": "https://api.github.com/users/mkpankov/orgs", "repos_url": "https://api.github.com/users/mkpankov/repos", "events_url": "https://api.github.com/users/mkpankov/events{/privacy}", "received_events_url": "https://api.github.com/users/mkpankov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "babe953e69798741d1a96f6b687742434b180def", "url": "https://api.github.com/repos/rust-lang/rust/commits/babe953e69798741d1a96f6b687742434b180def", "html_url": "https://github.com/rust-lang/rust/commit/babe953e69798741d1a96f6b687742434b180def"}], "stats": {"total": 85, "additions": 65, "deletions": 20}, "files": [{"sha": "0d4c0bb6480086c34a71e37ed13c45458cf26e1e", "filename": "src/libcore/fmt/builders.rs", "status": "modified", "additions": 48, "deletions": 14, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/17033a62b420fcf353150998bbdb62629efdf956/src%2Flibcore%2Ffmt%2Fbuilders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17033a62b420fcf353150998bbdb62629efdf956/src%2Flibcore%2Ffmt%2Fbuilders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fbuilders.rs?ref=17033a62b420fcf353150998bbdb62629efdf956", "patch": "@@ -61,7 +61,8 @@ pub struct DebugStruct<'a, 'b: 'a> {\n     has_fields: bool,\n }\n \n-pub fn debug_struct_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>, name: &str)\n+pub fn debug_struct_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>,\n+                                name: &str)\n                                 -> DebugStruct<'a, 'b> {\n     let result = fmt.write_str(name);\n     DebugStruct {\n@@ -84,7 +85,8 @@ impl<'a, 'b: 'a> DebugStruct<'a, 'b> {\n \n             if self.is_pretty() {\n                 let mut writer = PadAdapter::new(self.fmt);\n-                fmt::write(&mut writer, format_args!(\"{}\\n{}: {:#?}\", prefix, name, value))\n+                fmt::write(&mut writer,\n+                           format_args!(\"{}\\n{}: {:#?}\", prefix, name, value))\n             } else {\n                 write!(self.fmt, \"{} {}: {:?}\", prefix, name, value)\n             }\n@@ -195,10 +197,18 @@ impl<'a, 'b: 'a> DebugInner<'a, 'b> {\n         self.result = self.result.and_then(|_| {\n             if self.is_pretty() {\n                 let mut writer = PadAdapter::new(self.fmt);\n-                let prefix = if self.has_fields { \",\" } else { \"\" };\n+                let prefix = if self.has_fields {\n+                    \",\"\n+                } else {\n+                    \"\"\n+                };\n                 fmt::write(&mut writer, format_args!(\"{}\\n{:#?}\", prefix, entry))\n             } else {\n-                let prefix = if self.has_fields { \", \" } else { \"\" };\n+                let prefix = if self.has_fields {\n+                    \", \"\n+                } else {\n+                    \"\"\n+                };\n                 write!(self.fmt, \"{}{:?}\", prefix, entry)\n             }\n         });\n@@ -207,7 +217,11 @@ impl<'a, 'b: 'a> DebugInner<'a, 'b> {\n     }\n \n     pub fn finish(&mut self) {\n-        let prefix = if self.is_pretty() && self.has_fields { \"\\n\" } else { \"\" };\n+        let prefix = if self.is_pretty() && self.has_fields {\n+            \"\\n\"\n+        } else {\n+            \"\"\n+        };\n         self.result = self.result.and_then(|_| self.fmt.write_str(prefix));\n     }\n \n@@ -232,7 +246,7 @@ pub fn debug_set_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>) -> DebugSet<'a, 'b\n             fmt: fmt,\n             result: result,\n             has_fields: false,\n-        }\n+        },\n     }\n }\n \n@@ -247,7 +261,9 @@ impl<'a, 'b: 'a> DebugSet<'a, 'b> {\n     /// Adds the contents of an iterator of entries to the set output.\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n     pub fn entries<D, I>(&mut self, entries: I) -> &mut DebugSet<'a, 'b>\n-            where D: fmt::Debug, I: IntoIterator<Item=D> {\n+        where D: fmt::Debug,\n+              I: IntoIterator<Item = D>\n+    {\n         for entry in entries {\n             self.entry(&entry);\n         }\n@@ -278,7 +294,7 @@ pub fn debug_list_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>) -> DebugList<'a,\n             fmt: fmt,\n             result: result,\n             has_fields: false,\n-        }\n+        },\n     }\n }\n \n@@ -293,7 +309,9 @@ impl<'a, 'b: 'a> DebugList<'a, 'b> {\n     /// Adds the contents of an iterator of entries to the list output.\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n     pub fn entries<D, I>(&mut self, entries: I) -> &mut DebugList<'a, 'b>\n-            where D: fmt::Debug, I: IntoIterator<Item=D> {\n+        where D: fmt::Debug,\n+              I: IntoIterator<Item = D>\n+    {\n         for entry in entries {\n             self.entry(&entry);\n         }\n@@ -335,10 +353,19 @@ impl<'a, 'b: 'a> DebugMap<'a, 'b> {\n         self.result = self.result.and_then(|_| {\n             if self.is_pretty() {\n                 let mut writer = PadAdapter::new(self.fmt);\n-                let prefix = if self.has_fields { \",\" } else { \"\" };\n-                fmt::write(&mut writer, format_args!(\"{}\\n{:#?}: {:#?}\", prefix, key, value))\n+                let prefix = if self.has_fields {\n+                    \",\"\n+                } else {\n+                    \"\"\n+                };\n+                fmt::write(&mut writer,\n+                           format_args!(\"{}\\n{:#?}: {:#?}\", prefix, key, value))\n             } else {\n-                let prefix = if self.has_fields { \", \" } else { \"\" };\n+                let prefix = if self.has_fields {\n+                    \", \"\n+                } else {\n+                    \"\"\n+                };\n                 write!(self.fmt, \"{}{:?}: {:?}\", prefix, key, value)\n             }\n         });\n@@ -350,7 +377,10 @@ impl<'a, 'b: 'a> DebugMap<'a, 'b> {\n     /// Adds the contents of an iterator of entries to the map output.\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n     pub fn entries<K, V, I>(&mut self, entries: I) -> &mut DebugMap<'a, 'b>\n-            where K: fmt::Debug, V: fmt::Debug, I: IntoIterator<Item=(K, V)> {\n+        where K: fmt::Debug,\n+              V: fmt::Debug,\n+              I: IntoIterator<Item = (K, V)>\n+    {\n         for (k, v) in entries {\n             self.entry(&k, &v);\n         }\n@@ -360,7 +390,11 @@ impl<'a, 'b: 'a> DebugMap<'a, 'b> {\n     /// Finishes output and returns any error encountered.\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n     pub fn finish(&mut self) -> fmt::Result {\n-        let prefix = if self.is_pretty() && self.has_fields { \"\\n\" } else { \"\" };\n+        let prefix = if self.is_pretty() && self.has_fields {\n+            \"\\n\"\n+        } else {\n+            \"\"\n+        };\n         self.result.and_then(|_| write!(self.fmt, \"{}}}\", prefix))\n     }\n "}, {"sha": "5d8f58580788d2cee6ebee917812a61c5a62ecc1", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/17033a62b420fcf353150998bbdb62629efdf956/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17033a62b420fcf353150998bbdb62629efdf956/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=17033a62b420fcf353150998bbdb62629efdf956", "patch": "@@ -48,7 +48,9 @@ trait GenericRadix {\n     fn base(&self) -> u8;\n \n     /// A radix-specific prefix string.\n-    fn prefix(&self) -> &'static str { \"\" }\n+    fn prefix(&self) -> &'static str {\n+        \"\"\n+    }\n \n     /// Converts an integer to corresponding radix digit.\n     fn digit(&self, x: u8) -> u8;\n@@ -70,7 +72,10 @@ trait GenericRadix {\n                 x = x / base;                  // Deaccumulate the number.\n                 *byte = self.digit(n.to_u8()); // Store the digit in the buffer.\n                 curr -= 1;\n-                if x == zero { break };        // No more digits left to accumulate.\n+                if x == zero {\n+                    // No more digits left to accumulate.\n+                    break\n+                };\n             }\n         } else {\n             // Do the same as above, but accounting for two's complement.\n@@ -79,7 +84,9 @@ trait GenericRadix {\n                 x = x / base;                  // Deaccumulate the number.\n                 *byte = self.digit(n.to_u8()); // Store the digit in the buffer.\n                 curr -= 1;\n-                if x == zero { break };        // No more digits left to accumulate.\n+                if x == zero {\n+                    break\n+                };        // No more digits left to accumulate.\n             }\n         }\n         let buf = unsafe { str::from_utf8_unchecked(&buf[curr..]) };\n@@ -141,13 +148,17 @@ pub struct Radix {\n \n impl Radix {\n     fn new(base: u8) -> Radix {\n-        assert!(2 <= base && base <= 36, \"the base must be in the range of 2..36: {}\", base);\n+        assert!(2 <= base && base <= 36,\n+                \"the base must be in the range of 2..36: {}\",\n+                base);\n         Radix { base: base }\n     }\n }\n \n impl GenericRadix for Radix {\n-    fn base(&self) -> u8 { self.base }\n+    fn base(&self) -> u8 {\n+        self.base\n+    }\n     fn digit(&self, x: u8) -> u8 {\n         match x {\n             x @  0 ... 9 => b'0' + x,"}, {"sha": "f889045a3f59568b14eeca4689a0bf21c11975d1", "filename": "src/libcore/fmt/rt/v1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17033a62b420fcf353150998bbdb62629efdf956/src%2Flibcore%2Ffmt%2Frt%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17033a62b420fcf353150998bbdb62629efdf956/src%2Flibcore%2Ffmt%2Frt%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Frt%2Fv1.rs?ref=17033a62b420fcf353150998bbdb62629efdf956", "patch": "@@ -53,5 +53,5 @@ pub enum Count {\n #[derive(Copy, Clone)]\n pub enum Position {\n     Next,\n-    At(usize)\n+    At(usize),\n }"}]}