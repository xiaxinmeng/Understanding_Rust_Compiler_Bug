{"sha": "47c6db09ee35810005274017abcd0798d6978a47", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3YzZkYjA5ZWUzNTgxMDAwNTI3NDAxN2FiY2QwNzk4ZDY5NzhhNDc=", "commit": {"author": {"name": "Paul Daniel Faria", "email": "nashenas88@users.noreply.github.com", "date": "2017-11-11T21:13:23Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-22T08:51:54Z"}, "message": "Remove attributes and test comments accidentally left behind, add in span_mirbugs", "tree": {"sha": "ba7bfeed4de18ca8814e576febb29659f7b9dbc3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba7bfeed4de18ca8814e576febb29659f7b9dbc3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47c6db09ee35810005274017abcd0798d6978a47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47c6db09ee35810005274017abcd0798d6978a47", "html_url": "https://github.com/rust-lang/rust/commit/47c6db09ee35810005274017abcd0798d6978a47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47c6db09ee35810005274017abcd0798d6978a47/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe32df9adbdc076386b5b65f74bb29fe169f1547", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe32df9adbdc076386b5b65f74bb29fe169f1547", "html_url": "https://github.com/rust-lang/rust/commit/fe32df9adbdc076386b5b65f74bb29fe169f1547"}], "stats": {"total": 31, "additions": 20, "deletions": 11}, "files": [{"sha": "96264222eaef439b7cb09bc7941bf137d17c34a5", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/47c6db09ee35810005274017abcd0798d6978a47/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47c6db09ee35810005274017abcd0798d6978a47/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=47c6db09ee35810005274017abcd0798d6978a47", "patch": "@@ -1056,28 +1056,39 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    #[allow(dead_code)]\n     fn check_rvalue(&mut self, mir: &Mir<'tcx>, rv: &Rvalue<'tcx>, location: Location) {\n         let tcx = self.tcx();\n         match rv {\n-            Rvalue::Aggregate(ref ak, ref ops) => {\n+            Rvalue::Aggregate(ak, ops) => {\n                 match **ak {\n                     // tuple rvalue field type is always the type of the op. Nothing to check here.\n                     AggregateKind::Tuple => { },\n                     _ => {\n                         for (i, op) in ops.iter().enumerate() {\n-                            let field_ty = if let Ok(field_ty) = self.aggregate_field_ty(ak, i, location) {\n-                                field_ty\n-                            } else {\n-                                // TODO(nashenas88) log span_mirbug terr??\n-                                continue;\n+                            let field_ty = match self.aggregate_field_ty(ak, i, location) {\n+                                Ok(field_ty) => field_ty,\n+                                Err(FieldAccessError::OutOfRange { field_count }) => {\n+                                    span_mirbug!(\n+                                        self,\n+                                        rv,\n+                                        \"accessed field #{} but variant only has {}\",\n+                                        i,\n+                                        field_count);\n+                                    continue;\n+                                },\n                             };\n                             let op_ty = match op {\n                                 Operand::Consume(lv) => lv.ty(mir, tcx).to_ty(tcx),\n                                 Operand::Constant(c) => c.ty,\n                             };\n-                            if let Err(_terr) = self.sub_types(op_ty, field_ty, location.at_successor_within_block()) {\n-                                // TODO(nashenas88) log span_mirbug terr??\n+                            if let Err(terr) = self.sub_types(op_ty, field_ty, location.at_successor_within_block()) {\n+                                span_mirbug!(\n+                                    self,\n+                                    rv,\n+                                    \"{:?} is not a subtype of {:?}: {:?}\",\n+                                    op_ty,\n+                                    field_ty,\n+                                    terr);\n                             }\n                         }\n                     },"}, {"sha": "afde254082946887573277d23926493cff915880", "filename": "src/test/compile-fail/nll/reference-carried-through-struct-field.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47c6db09ee35810005274017abcd0798d6978a47/src%2Ftest%2Fcompile-fail%2Fnll%2Freference-carried-through-struct-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47c6db09ee35810005274017abcd0798d6978a47/src%2Ftest%2Fcompile-fail%2Fnll%2Freference-carried-through-struct-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnll%2Freference-carried-through-struct-field.rs?ref=47c6db09ee35810005274017abcd0798d6978a47", "patch": "@@ -17,8 +17,6 @@ struct Wrap<'a> { w: &'a mut u32 }\n fn foo() {\n     let mut x = 22;\n     let wrapper = Wrap { w: &mut x };\n-    //~^ ERROR cannot assign to `x` because it is borrowed (Mir) [E0506]\n-    //~^^ ERROR cannot use `x` because it was mutably borrowed (Mir) [E0503]\n     x += 1; //[ast]~ ERROR cannot assign to `x` because it is borrowed [E0506]\n     //[mir]~^ ERROR cannot assign to `x` because it is borrowed (Ast) [E0506]\n     //[mir]~^^ ERROR cannot assign to `x` because it is borrowed (Mir) [E0506]", "previous_filename": "src/test/compile-fail/aggregate-rvalues-typeck.rs"}]}