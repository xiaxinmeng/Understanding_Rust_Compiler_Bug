{"sha": "68a1fdfee49eeca4d3379423879c5299b5d8e0b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4YTFmZGZlZTQ5ZWVjYTRkMzM3OTQyMzg3OWM1Mjk5YjVkOGUwYjA=", "commit": {"author": {"name": "Sean Griffin", "email": "sean@seantheprogrammer.com", "date": "2018-05-02T21:02:11Z"}, "committer": {"name": "Sean Griffin", "email": "sean@seantheprogrammer.com", "date": "2018-05-02T21:02:11Z"}, "message": "Add a comment explaining unification w/ universes", "tree": {"sha": "8f667517a816998ebf5dc95e0b132d5bb3933821", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f667517a816998ebf5dc95e0b132d5bb3933821"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68a1fdfee49eeca4d3379423879c5299b5d8e0b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68a1fdfee49eeca4d3379423879c5299b5d8e0b0", "html_url": "https://github.com/rust-lang/rust/commit/68a1fdfee49eeca4d3379423879c5299b5d8e0b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68a1fdfee49eeca4d3379423879c5299b5d8e0b0/comments", "author": {"login": "sgrif", "id": 1529387, "node_id": "MDQ6VXNlcjE1MjkzODc=", "avatar_url": "https://avatars.githubusercontent.com/u/1529387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sgrif", "html_url": "https://github.com/sgrif", "followers_url": "https://api.github.com/users/sgrif/followers", "following_url": "https://api.github.com/users/sgrif/following{/other_user}", "gists_url": "https://api.github.com/users/sgrif/gists{/gist_id}", "starred_url": "https://api.github.com/users/sgrif/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sgrif/subscriptions", "organizations_url": "https://api.github.com/users/sgrif/orgs", "repos_url": "https://api.github.com/users/sgrif/repos", "events_url": "https://api.github.com/users/sgrif/events{/privacy}", "received_events_url": "https://api.github.com/users/sgrif/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sgrif", "id": 1529387, "node_id": "MDQ6VXNlcjE1MjkzODc=", "avatar_url": "https://avatars.githubusercontent.com/u/1529387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sgrif", "html_url": "https://github.com/sgrif", "followers_url": "https://api.github.com/users/sgrif/followers", "following_url": "https://api.github.com/users/sgrif/following{/other_user}", "gists_url": "https://api.github.com/users/sgrif/gists{/gist_id}", "starred_url": "https://api.github.com/users/sgrif/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sgrif/subscriptions", "organizations_url": "https://api.github.com/users/sgrif/orgs", "repos_url": "https://api.github.com/users/sgrif/repos", "events_url": "https://api.github.com/users/sgrif/events{/privacy}", "received_events_url": "https://api.github.com/users/sgrif/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ac9717a1f7b8b07d1ed15411550f4de68665d44", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ac9717a1f7b8b07d1ed15411550f4de68665d44", "html_url": "https://github.com/rust-lang/rust/commit/4ac9717a1f7b8b07d1ed15411550f4de68665d44"}], "stats": {"total": 5, "additions": 5, "deletions": 0}, "files": [{"sha": "d40e1b3760f0361a2bcf62877c1f528d46159269", "filename": "src/librustc/infer/type_variable.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/68a1fdfee49eeca4d3379423879c5299b5d8e0b0/src%2Flibrustc%2Finfer%2Ftype_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68a1fdfee49eeca4d3379423879c5299b5d8e0b0/src%2Flibrustc%2Finfer%2Ftype_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ftype_variable.rs?ref=68a1fdfee49eeca4d3379423879c5299b5d8e0b0", "patch": "@@ -442,6 +442,11 @@ impl<'tcx> ut::UnifyValue for TypeVariableValue<'tcx> {\n             // If both sides are *unknown*, it hardly matters, does it?\n             (&TypeVariableValue::Unknown { universe: universe1 },\n              &TypeVariableValue::Unknown { universe: universe2 }) =>  {\n+                // If we unify two unbound variables, ?T and ?U, then whatever\n+                // value they wind up taking (which must be the same value) must\n+                // be nameable by both universes. Therefore, the resulting\n+                // universe is the minimum of the two universes, because that is\n+                // the one which contains the fewest names in scope.\n                 let universe = cmp::min(universe1, universe2);\n                 Ok(TypeVariableValue::Unknown { universe })\n             }"}]}