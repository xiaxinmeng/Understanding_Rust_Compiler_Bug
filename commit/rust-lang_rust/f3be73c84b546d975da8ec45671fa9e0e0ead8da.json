{"sha": "f3be73c84b546d975da8ec45671fa9e0e0ead8da", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzYmU3M2M4NGI1NDZkOTc1ZGE4ZWM0NTY3MWZhOWUwZTBlYWQ4ZGE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-02-24T07:22:58Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-02-24T17:17:07Z"}, "message": "std: Cap read/write limits on Windows networking\n\nSimilar to #31825 where the read/write limits were capped for files, this\nimplements similar limits when reading/writing networking types. On Unix this\nshouldn't affect anything because the write size is already a `usize`, but on\nWindows this will cap the read/write amounts to `i32::max_value`.\n\ncc #31841", "tree": {"sha": "7697572e8381019253b882892ccae22d421097de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7697572e8381019253b882892ccae22d421097de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3be73c84b546d975da8ec45671fa9e0e0ead8da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3be73c84b546d975da8ec45671fa9e0e0ead8da", "html_url": "https://github.com/rust-lang/rust/commit/f3be73c84b546d975da8ec45671fa9e0e0ead8da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3be73c84b546d975da8ec45671fa9e0e0ead8da/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "281f9d868fee8e4f9750fc12289dc10522f587ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/281f9d868fee8e4f9750fc12289dc10522f587ea", "html_url": "https://github.com/rust-lang/rust/commit/281f9d868fee8e4f9750fc12289dc10522f587ea"}], "stats": {"total": 15, "additions": 10, "deletions": 5}, "files": [{"sha": "1cb9303a9fc4b5a984a1795942c4fff6d32ac63f", "filename": "src/libstd/sys/common/net.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f3be73c84b546d975da8ec45671fa9e0e0ead8da/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3be73c84b546d975da8ec45671fa9e0e0ead8da/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs?ref=f3be73c84b546d975da8ec45671fa9e0e0ead8da", "patch": "@@ -10,6 +10,7 @@\n \n use prelude::v1::*;\n \n+use cmp;\n use ffi::{CStr, CString};\n use fmt;\n use io::{self, Error, ErrorKind};\n@@ -198,10 +199,11 @@ impl TcpStream {\n     }\n \n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n+        let len = cmp::min(buf.len(), <wrlen_t>::max_value() as usize) as wrlen_t;\n         let ret = try!(cvt(unsafe {\n             c::send(*self.inner.as_inner(),\n                     buf.as_ptr() as *const c_void,\n-                    buf.len() as wrlen_t,\n+                    len,\n                     0)\n         }));\n         Ok(ret as usize)\n@@ -358,21 +360,23 @@ impl UdpSocket {\n     pub fn recv_from(&self, buf: &mut [u8]) -> io::Result<(usize, SocketAddr)> {\n         let mut storage: c::sockaddr_storage = unsafe { mem::zeroed() };\n         let mut addrlen = mem::size_of_val(&storage) as c::socklen_t;\n+        let len = cmp::min(buf.len(), <wrlen_t>::max_value() as usize) as wrlen_t;\n \n         let n = try!(cvt(unsafe {\n             c::recvfrom(*self.inner.as_inner(),\n                         buf.as_mut_ptr() as *mut c_void,\n-                        buf.len() as wrlen_t, 0,\n+                        len, 0,\n                         &mut storage as *mut _ as *mut _, &mut addrlen)\n         }));\n         Ok((n as usize, try!(sockaddr_to_addr(&storage, addrlen as usize))))\n     }\n \n     pub fn send_to(&self, buf: &[u8], dst: &SocketAddr) -> io::Result<usize> {\n+        let len = cmp::min(buf.len(), <wrlen_t>::max_value() as usize) as wrlen_t;\n         let (dstp, dstlen) = dst.into_inner();\n         let ret = try!(cvt(unsafe {\n             c::sendto(*self.inner.as_inner(),\n-                      buf.as_ptr() as *const c_void, buf.len() as wrlen_t,\n+                      buf.as_ptr() as *const c_void, len,\n                       0, dstp, dstlen)\n         }));\n         Ok(ret as usize)"}, {"sha": "49ba8e9c65990570c4192be868b7500cb8257b3c", "filename": "src/libstd/sys/windows/net.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f3be73c84b546d975da8ec45671fa9e0e0ead8da/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3be73c84b546d975da8ec45671fa9e0e0ead8da/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs?ref=f3be73c84b546d975da8ec45671fa9e0e0ead8da", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use cmp;\n use io;\n use libc::{c_int, c_void};\n use mem;\n@@ -131,9 +132,9 @@ impl Socket {\n     pub fn read(&self, buf: &mut [u8]) -> io::Result<usize> {\n         // On unix when a socket is shut down all further reads return 0, so we\n         // do the same on windows to map a shut down socket to returning EOF.\n+        let len = cmp::min(buf.len(), i32::max_value() as usize) as i32;\n         unsafe {\n-            match c::recv(self.0, buf.as_mut_ptr() as *mut c_void,\n-                             buf.len() as i32, 0) {\n+            match c::recv(self.0, buf.as_mut_ptr() as *mut c_void, len, 0) {\n                 -1 if c::WSAGetLastError() == c::WSAESHUTDOWN => Ok(0),\n                 -1 => Err(last_error()),\n                 n => Ok(n as usize)"}]}