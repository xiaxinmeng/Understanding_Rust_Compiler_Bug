{"sha": "1c3655bed192e31bdf649ed5f4e728201ede17b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjMzY1NWJlZDE5MmUzMWJkZjY0OWVkNWY0ZTcyODIwMWVkZTE3YjI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-07-20T04:11:26Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-07-21T16:54:26Z"}, "message": "rustc: Extract --crate-type parsing to its own function\n\nHelpful for users of rustc as a library.", "tree": {"sha": "dc7333aadf8b04e6eee8d61d2a7e5ee8ad70fecd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc7333aadf8b04e6eee8d61d2a7e5ee8ad70fecd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c3655bed192e31bdf649ed5f4e728201ede17b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c3655bed192e31bdf649ed5f4e728201ede17b2", "html_url": "https://github.com/rust-lang/rust/commit/1c3655bed192e31bdf649ed5f4e728201ede17b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c3655bed192e31bdf649ed5f4e728201ede17b2/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9631bf2e2526173b21070eb532c6cb590c5869b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/9631bf2e2526173b21070eb532c6cb590c5869b8", "html_url": "https://github.com/rust-lang/rust/commit/9631bf2e2526173b21070eb532c6cb590c5869b8"}], "stats": {"total": 43, "additions": 26, "deletions": 17}, "files": [{"sha": "4752997a3fcea080bb5206aad3c99ee309b19f86", "filename": "src/librustc/driver/config.rs", "status": "modified", "additions": 26, "deletions": 17, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/1c3655bed192e31bdf649ed5f4e728201ede17b2/src%2Flibrustc%2Fdriver%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c3655bed192e31bdf649ed5f4e728201ede17b2/src%2Flibrustc%2Fdriver%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fconfig.rs?ref=1c3655bed192e31bdf649ed5f4e728201ede17b2", "patch": "@@ -593,24 +593,10 @@ fn parse_cfgspecs(cfgspecs: Vec<String> ) -> ast::CrateConfig {\n }\n \n pub fn build_session_options(matches: &getopts::Matches) -> Options {\n-    let mut crate_types: Vec<CrateType> = Vec::new();\n+\n     let unparsed_crate_types = matches.opt_strs(\"crate-type\");\n-    for unparsed_crate_type in unparsed_crate_types.iter() {\n-        for part in unparsed_crate_type.as_slice().split(',') {\n-            let new_part = match part {\n-                \"lib\"       => default_lib_output(),\n-                \"rlib\"      => CrateTypeRlib,\n-                \"staticlib\" => CrateTypeStaticlib,\n-                \"dylib\"     => CrateTypeDylib,\n-                \"bin\"       => CrateTypeExecutable,\n-                _ => {\n-                    early_error(format!(\"unknown crate type: `{}`\",\n-                                        part).as_slice())\n-                }\n-            };\n-            crate_types.push(new_part)\n-        }\n-    }\n+    let crate_types = parse_crate_types_from_list(unparsed_crate_types)\n+        .unwrap_or_else(|e| early_error(e.as_slice()));\n \n     let parse_only = matches.opt_present(\"parse-only\");\n     let no_trans = matches.opt_present(\"no-trans\");\n@@ -804,6 +790,29 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n     }\n }\n \n+pub fn parse_crate_types_from_list(crate_types_list_list: Vec<String>) -> Result<Vec<CrateType>, String> {\n+\n+    let mut crate_types: Vec<CrateType> = Vec::new();\n+    for unparsed_crate_type in crate_types_list_list.iter() {\n+        for part in unparsed_crate_type.as_slice().split(',') {\n+            let new_part = match part {\n+                \"lib\"       => default_lib_output(),\n+                \"rlib\"      => CrateTypeRlib,\n+                \"staticlib\" => CrateTypeStaticlib,\n+                \"dylib\"     => CrateTypeDylib,\n+                \"bin\"       => CrateTypeExecutable,\n+                _ => {\n+                    return Err(format!(\"unknown crate type: `{}`\",\n+                                       part));\n+                }\n+            };\n+            crate_types.push(new_part)\n+        }\n+    }\n+\n+    return Ok(crate_types);\n+}\n+\n impl fmt::Show for CrateType {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {"}]}