{"sha": "199d1aebe472585e1066334d5e1f740f02eba661", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5OWQxYWViZTQ3MjU4NWUxMDY2MzM0ZDVlMWY3NDBmMDJlYmE2NjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-30T23:18:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-30T23:18:12Z"}, "message": "Auto merge of #86754 - estebank:use-multispans-more, r=varkor\n\nUse `multipart_suggestions` more\n\nBuilt on top of #86532", "tree": {"sha": "e51d508876c7a8ee511aab04dd6132c0b4f2aa8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e51d508876c7a8ee511aab04dd6132c0b4f2aa8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/199d1aebe472585e1066334d5e1f740f02eba661", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/199d1aebe472585e1066334d5e1f740f02eba661", "html_url": "https://github.com/rust-lang/rust/commit/199d1aebe472585e1066334d5e1f740f02eba661", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/199d1aebe472585e1066334d5e1f740f02eba661/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f0a591b3a5963a0ab11a35dc525ad9d46f612e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4", "html_url": "https://github.com/rust-lang/rust/commit/1f0a591b3a5963a0ab11a35dc525ad9d46f612e4"}, {"sha": "0b8f192cfee2f107867e7b9a0b0f781a5cb48787", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b8f192cfee2f107867e7b9a0b0f781a5cb48787", "html_url": "https://github.com/rust-lang/rust/commit/0b8f192cfee2f107867e7b9a0b0f781a5cb48787"}], "stats": {"total": 1103, "additions": 661, "deletions": 442}, "files": [{"sha": "8199c44ee2aed21f64697b757d9ac8a560b7eb98", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/199d1aebe472585e1066334d5e1f740f02eba661/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/199d1aebe472585e1066334d5e1f740f02eba661/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=199d1aebe472585e1066334d5e1f740f02eba661", "patch": "@@ -444,6 +444,30 @@ impl Diagnostic {\n         self\n     }\n \n+    /// Prints out a message with multiple suggested edits of the code.\n+    /// See also [`Diagnostic::span_suggestion()`].\n+    pub fn multipart_suggestions(\n+        &mut self,\n+        msg: &str,\n+        suggestions: impl Iterator<Item = Vec<(Span, String)>>,\n+        applicability: Applicability,\n+    ) -> &mut Self {\n+        self.suggestions.push(CodeSuggestion {\n+            substitutions: suggestions\n+                .map(|sugg| Substitution {\n+                    parts: sugg\n+                        .into_iter()\n+                        .map(|(span, snippet)| SubstitutionPart { snippet, span })\n+                        .collect(),\n+                })\n+                .collect(),\n+            msg: msg.to_owned(),\n+            style: SuggestionStyle::ShowCode,\n+            applicability,\n+            tool_metadata: Default::default(),\n+        });\n+        self\n+    }\n     /// Prints out a message with a suggested edit of the code. If the suggestion is presented\n     /// inline, it will only show the message and not the suggestion.\n     ///"}, {"sha": "d35b29248033fd75ac3dd6bc4b59f7fad2fe0dd1", "filename": "compiler/rustc_errors/src/diagnostic_builder.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/199d1aebe472585e1066334d5e1f740f02eba661/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/199d1aebe472585e1066334d5e1f740f02eba661/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs?ref=199d1aebe472585e1066334d5e1f740f02eba661", "patch": "@@ -301,6 +301,20 @@ impl<'a> DiagnosticBuilder<'a> {\n         self\n     }\n \n+    /// See [`Diagnostic::multipart_suggestions()`].\n+    pub fn multipart_suggestions(\n+        &mut self,\n+        msg: &str,\n+        suggestions: impl Iterator<Item = Vec<(Span, String)>>,\n+        applicability: Applicability,\n+    ) -> &mut Self {\n+        if !self.0.allow_suggestions {\n+            return self;\n+        }\n+        self.0.diagnostic.multipart_suggestions(msg, suggestions, applicability);\n+        self\n+    }\n+\n     /// See [`Diagnostic::span_suggestion_short()`].\n     pub fn span_suggestion_short(\n         &mut self,"}, {"sha": "a9bfbb51573b58be5d921c157b8e380df1b8da16", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/199d1aebe472585e1066334d5e1f740f02eba661/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/199d1aebe472585e1066334d5e1f740f02eba661/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=199d1aebe472585e1066334d5e1f740f02eba661", "patch": "@@ -12,7 +12,7 @@ use rustc_middle::mir::{\n use rustc_middle::ty::{self, suggest_constraining_type_param, Ty};\n use rustc_span::source_map::DesugaringKind;\n use rustc_span::symbol::sym;\n-use rustc_span::{MultiSpan, Span, DUMMY_SP};\n+use rustc_span::{BytePos, MultiSpan, Span, DUMMY_SP};\n use rustc_trait_selection::infer::InferCtxtExt;\n \n use crate::dataflow::drop_flag_effects;\n@@ -1393,18 +1393,19 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         let tcx = self.infcx.tcx;\n         let args_span = use_span.args_or_use();\n \n-        let suggestion = match tcx.sess.source_map().span_to_snippet(args_span) {\n-            Ok(mut string) => {\n+        let (sugg_span, suggestion) = match tcx.sess.source_map().span_to_snippet(args_span) {\n+            Ok(string) => {\n                 if string.starts_with(\"async \") {\n-                    string.insert_str(6, \"move \");\n+                    let pos = args_span.lo() + BytePos(6);\n+                    (args_span.with_lo(pos).with_hi(pos), \"move \".to_string())\n                 } else if string.starts_with(\"async|\") {\n-                    string.insert_str(5, \" move\");\n+                    let pos = args_span.lo() + BytePos(5);\n+                    (args_span.with_lo(pos).with_hi(pos), \" move\".to_string())\n                 } else {\n-                    string.insert_str(0, \"move \");\n-                };\n-                string\n+                    (args_span.shrink_to_lo(), \"move \".to_string())\n+                }\n             }\n-            Err(_) => \"move |<args>| <body>\".to_string(),\n+            Err(_) => (args_span, \"move |<args>| <body>\".to_string()),\n         };\n         let kind = match use_span.generator_kind() {\n             Some(generator_kind) => match generator_kind {\n@@ -1420,8 +1421,8 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n         let mut err =\n             self.cannot_capture_in_long_lived_closure(args_span, kind, captured_var, var_span);\n-        err.span_suggestion(\n-            args_span,\n+        err.span_suggestion_verbose(\n+            sugg_span,\n             &format!(\n                 \"to force the {} to take ownership of {} (and any \\\n                  other referenced variables), use the `move` keyword\","}, {"sha": "273fbea3580216d051566ccd5c3d56fcfcad869c", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/199d1aebe472585e1066334d5e1f740f02eba661/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/199d1aebe472585e1066334d5e1f740f02eba661/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=199d1aebe472585e1066334d5e1f740f02eba661", "patch": "@@ -1770,7 +1770,7 @@ impl<'a> Parser<'a> {\n         let mut err = self.struct_span_err(span, &msg);\n         let sp = self.sess.source_map().start_point(self.token.span);\n         if let Some(sp) = self.sess.ambiguous_block_expr_parse.borrow().get(&sp) {\n-            self.sess.expr_parentheses_needed(&mut err, *sp, None);\n+            self.sess.expr_parentheses_needed(&mut err, *sp);\n         }\n         err.span_label(span, \"expected expression\");\n         err"}, {"sha": "b774c76103fbb7b029b59f58fcc12134ce1cf151", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/199d1aebe472585e1066334d5e1f740f02eba661/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/199d1aebe472585e1066334d5e1f740f02eba661/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=199d1aebe472585e1066334d5e1f740f02eba661", "patch": "@@ -358,7 +358,7 @@ impl<'a> Parser<'a> {\n             &format!(\"expected expression, found `{}`\", pprust::token_to_string(&self.token),),\n         );\n         err.span_label(self.token.span, \"expected expression\");\n-        self.sess.expr_parentheses_needed(&mut err, lhs.span, Some(pprust::expr_to_string(&lhs)));\n+        self.sess.expr_parentheses_needed(&mut err, lhs.span);\n         err.emit();\n     }\n \n@@ -696,20 +696,18 @@ impl<'a> Parser<'a> {\n                         let expr =\n                             mk_expr(self, lhs, self.mk_ty(path.span, TyKind::Path(None, path)));\n \n-                        let expr_str = self\n-                            .span_to_snippet(expr.span)\n-                            .unwrap_or_else(|_| pprust::expr_to_string(&expr));\n-\n                         self.struct_span_err(self.token.span, &msg)\n                             .span_label(\n                                 self.look_ahead(1, |t| t.span).to(span_after_type),\n                                 \"interpreted as generic arguments\",\n                             )\n                             .span_label(self.token.span, format!(\"not interpreted as {}\", op_noun))\n-                            .span_suggestion(\n-                                expr.span,\n+                            .multipart_suggestion(\n                                 &format!(\"try {} the cast value\", op_verb),\n-                                format!(\"({})\", expr_str),\n+                                vec![\n+                                    (expr.span.shrink_to_lo(), \"(\".to_string()),\n+                                    (expr.span.shrink_to_hi(), \")\".to_string()),\n+                                ],\n                                 Applicability::MachineApplicable,\n                             )\n                             .emit();"}, {"sha": "b03b54599815270c70d46c62e2c785d08a2e19f2", "filename": "compiler/rustc_parse/src/parser/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/199d1aebe472585e1066334d5e1f740f02eba661/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/199d1aebe472585e1066334d5e1f740f02eba661/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs?ref=199d1aebe472585e1066334d5e1f740f02eba661", "patch": "@@ -763,7 +763,7 @@ impl<'a> Parser<'a> {\n \n         let sp = self.sess.source_map().start_point(self.token.span);\n         if let Some(sp) = self.sess.ambiguous_block_expr_parse.borrow().get(&sp) {\n-            self.sess.expr_parentheses_needed(&mut err, *sp, None);\n+            self.sess.expr_parentheses_needed(&mut err, *sp);\n         }\n \n         Err(err)"}, {"sha": "a007b530302719a9ee4b22ba2b656a63baf81123", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/199d1aebe472585e1066334d5e1f740f02eba661/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/199d1aebe472585e1066334d5e1f740f02eba661/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=199d1aebe472585e1066334d5e1f740f02eba661", "patch": "@@ -228,20 +228,12 @@ impl ParseSess {\n \n     /// Extend an error with a suggestion to wrap an expression with parentheses to allow the\n     /// parser to continue parsing the following operation as part of the same expression.\n-    pub fn expr_parentheses_needed(\n-        &self,\n-        err: &mut DiagnosticBuilder<'_>,\n-        span: Span,\n-        alt_snippet: Option<String>,\n-    ) {\n-        if let Some(snippet) = self.source_map().span_to_snippet(span).ok().or(alt_snippet) {\n-            err.span_suggestion(\n-                span,\n-                \"parentheses are required to parse this as an expression\",\n-                format!(\"({})\", snippet),\n-                Applicability::MachineApplicable,\n-            );\n-        }\n+    pub fn expr_parentheses_needed(&self, err: &mut DiagnosticBuilder<'_>, span: Span) {\n+        err.multipart_suggestion(\n+            \"parentheses are required to parse this as an expression\",\n+            vec![(span.shrink_to_lo(), \"(\".to_string()), (span.shrink_to_hi(), \")\".to_string())],\n+            Applicability::MachineApplicable,\n+        );\n     }\n \n     pub fn save_proc_macro_span(&self, span: Span) -> usize {"}, {"sha": "712fea84a8b1c8d3d7a1da8590b58a0a1a4b35b7", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/199d1aebe472585e1066334d5e1f740f02eba661/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/199d1aebe472585e1066334d5e1f740f02eba661/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=199d1aebe472585e1066334d5e1f740f02eba661", "patch": "@@ -1163,15 +1163,18 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             if is_object_safe {\n                 // Suggest `-> Box<dyn Trait>` and `Box::new(returned_value)`.\n                 // Get all the return values and collect their span and suggestion.\n-                if let Some(mut suggestions) = visitor\n+                let mut suggestions: Vec<_> = visitor\n                     .returns\n                     .iter()\n-                    .map(|expr| {\n-                        let snip = sm.span_to_snippet(expr.span).ok()?;\n-                        Some((expr.span, format!(\"Box::new({})\", snip)))\n+                    .flat_map(|expr| {\n+                        vec![\n+                            (expr.span.shrink_to_lo(), \"Box::new(\".to_string()),\n+                            (expr.span.shrink_to_hi(), \")\".to_string()),\n+                        ]\n+                        .into_iter()\n                     })\n-                    .collect::<Option<Vec<_>>>()\n-                {\n+                    .collect();\n+                if !suggestions.is_empty() {\n                     // Add the suggestion for the return type.\n                     suggestions.push((ret_ty.span, format!(\"Box<dyn {}>\", trait_obj)));\n                     err.multipart_suggestion("}, {"sha": "e5a00f706398adeba7982316dc4cb8cf23d560d3", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 69, "deletions": 35, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/199d1aebe472585e1066334d5e1f740f02eba661/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/199d1aebe472585e1066334d5e1f740f02eba661/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=199d1aebe472585e1066334d5e1f740f02eba661", "patch": "@@ -13,7 +13,7 @@ use rustc_middle::ty::adjustment::AllowTwoPhase;\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::{self, AssocItem, Ty, TypeAndMut};\n use rustc_span::symbol::sym;\n-use rustc_span::Span;\n+use rustc_span::{BytePos, Span};\n \n use super::method::probe;\n \n@@ -415,7 +415,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expr: &hir::Expr<'_>,\n         checked_ty: Ty<'tcx>,\n         expected: Ty<'tcx>,\n-    ) -> Option<(Span, &'static str, String, Applicability)> {\n+    ) -> Option<(Span, &'static str, String, Applicability, bool /* verbose */)> {\n         let sess = self.sess();\n         let sp = expr.span;\n \n@@ -441,12 +441,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 (&ty::Str, &ty::Array(arr, _) | &ty::Slice(arr)) if arr == self.tcx.types.u8 => {\n                     if let hir::ExprKind::Lit(_) = expr.kind {\n                         if let Ok(src) = sm.span_to_snippet(sp) {\n-                            if let Some(src) = replace_prefix(&src, \"b\\\"\", \"\\\"\") {\n+                            if let Some(_) = replace_prefix(&src, \"b\\\"\", \"\\\"\") {\n+                                let pos = sp.lo() + BytePos(1);\n                                 return Some((\n-                                    sp,\n+                                    sp.with_hi(pos),\n                                     \"consider removing the leading `b`\",\n-                                    src,\n+                                    String::new(),\n                                     Applicability::MachineApplicable,\n+                                    true,\n                                 ));\n                             }\n                         }\n@@ -455,12 +457,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 (&ty::Array(arr, _) | &ty::Slice(arr), &ty::Str) if arr == self.tcx.types.u8 => {\n                     if let hir::ExprKind::Lit(_) = expr.kind {\n                         if let Ok(src) = sm.span_to_snippet(sp) {\n-                            if let Some(src) = replace_prefix(&src, \"\\\"\", \"b\\\"\") {\n+                            if let Some(_) = replace_prefix(&src, \"\\\"\", \"b\\\"\") {\n                                 return Some((\n-                                    sp,\n+                                    sp.shrink_to_lo(),\n                                     \"consider adding a leading `b`\",\n-                                    src,\n+                                    \"b\".to_string(),\n                                     Applicability::MachineApplicable,\n+                                    true,\n                                 ));\n                             }\n                         }\n@@ -520,6 +523,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 sugg.1,\n                                 sugg.2,\n                                 Applicability::MachineApplicable,\n+                                false,\n                             ));\n                         }\n                         let field_name = if is_struct_pat_shorthand_field {\n@@ -539,13 +543,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 //                                   |     |\n                                 //    consider dereferencing here: `*opt`  |\n                                 // expected mutable reference, found enum `Option`\n-                                if let Ok(src) = sm.span_to_snippet(left_expr.span) {\n+                                if sm.span_to_snippet(left_expr.span).is_ok() {\n                                     return Some((\n-                                        left_expr.span,\n+                                        left_expr.span.shrink_to_lo(),\n                                         \"consider dereferencing here to assign to the mutable \\\n                                          borrowed piece of memory\",\n-                                        format!(\"*{}\", src),\n+                                        \"*\".to_string(),\n                                         Applicability::MachineApplicable,\n+                                        true,\n                                     ));\n                                 }\n                             }\n@@ -557,12 +562,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 \"consider mutably borrowing here\",\n                                 format!(\"{}&mut {}\", field_name, sugg_expr),\n                                 Applicability::MachineApplicable,\n+                                false,\n                             ),\n                             hir::Mutability::Not => (\n                                 sp,\n                                 \"consider borrowing here\",\n                                 format!(\"{}&{}\", field_name, sugg_expr),\n                                 Applicability::MachineApplicable,\n+                                false,\n                             ),\n                         });\n                     }\n@@ -584,24 +591,26 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     if let Some(call_span) =\n                         iter::successors(Some(expr.span), |s| s.parent()).find(|&s| sp.contains(s))\n                     {\n-                        if let Ok(code) = sm.span_to_snippet(call_span) {\n+                        if sm.span_to_snippet(call_span).is_ok() {\n                             return Some((\n-                                sp,\n+                                sp.with_hi(call_span.lo()),\n                                 \"consider removing the borrow\",\n-                                code,\n+                                String::new(),\n                                 Applicability::MachineApplicable,\n+                                true,\n                             ));\n                         }\n                     }\n                     return None;\n                 }\n                 if sp.contains(expr.span) {\n-                    if let Ok(code) = sm.span_to_snippet(expr.span) {\n+                    if sm.span_to_snippet(expr.span).is_ok() {\n                         return Some((\n-                            sp,\n+                            sp.with_hi(expr.span.lo()),\n                             \"consider removing the borrow\",\n-                            code,\n+                            String::new(),\n                             Applicability::MachineApplicable,\n+                            true,\n                         ));\n                     }\n                 }\n@@ -616,36 +625,59 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     if steps > 0 {\n                         // The pointer type implements `Copy` trait so the suggestion is always valid.\n                         if let Ok(src) = sm.span_to_snippet(sp) {\n-                            let derefs = &\"*\".repeat(steps);\n-                            if let Some((src, applicability)) = match mutbl_b {\n+                            let derefs = \"*\".repeat(steps);\n+                            if let Some((span, src, applicability)) = match mutbl_b {\n                                 hir::Mutability::Mut => {\n-                                    let new_prefix = \"&mut \".to_owned() + derefs;\n+                                    let new_prefix = \"&mut \".to_owned() + &derefs;\n                                     match mutbl_a {\n                                         hir::Mutability::Mut => {\n-                                            replace_prefix(&src, \"&mut \", &new_prefix)\n-                                                .map(|s| (s, Applicability::MachineApplicable))\n+                                            replace_prefix(&src, \"&mut \", &new_prefix).map(|_| {\n+                                                let pos = sp.lo() + BytePos(5);\n+                                                let sp = sp.with_lo(pos).with_hi(pos);\n+                                                (sp, derefs, Applicability::MachineApplicable)\n+                                            })\n                                         }\n                                         hir::Mutability::Not => {\n-                                            replace_prefix(&src, \"&\", &new_prefix)\n-                                                .map(|s| (s, Applicability::Unspecified))\n+                                            replace_prefix(&src, \"&\", &new_prefix).map(|_| {\n+                                                let pos = sp.lo() + BytePos(1);\n+                                                let sp = sp.with_lo(pos).with_hi(pos);\n+                                                (\n+                                                    sp,\n+                                                    format!(\"mut {}\", derefs),\n+                                                    Applicability::Unspecified,\n+                                                )\n+                                            })\n                                         }\n                                     }\n                                 }\n                                 hir::Mutability::Not => {\n-                                    let new_prefix = \"&\".to_owned() + derefs;\n+                                    let new_prefix = \"&\".to_owned() + &derefs;\n                                     match mutbl_a {\n                                         hir::Mutability::Mut => {\n-                                            replace_prefix(&src, \"&mut \", &new_prefix)\n-                                                .map(|s| (s, Applicability::MachineApplicable))\n+                                            replace_prefix(&src, \"&mut \", &new_prefix).map(|_| {\n+                                                let lo = sp.lo() + BytePos(1);\n+                                                let hi = sp.lo() + BytePos(5);\n+                                                let sp = sp.with_lo(lo).with_hi(hi);\n+                                                (sp, derefs, Applicability::MachineApplicable)\n+                                            })\n                                         }\n                                         hir::Mutability::Not => {\n-                                            replace_prefix(&src, \"&\", &new_prefix)\n-                                                .map(|s| (s, Applicability::MachineApplicable))\n+                                            replace_prefix(&src, \"&\", &new_prefix).map(|_| {\n+                                                let pos = sp.lo() + BytePos(1);\n+                                                let sp = sp.with_lo(pos).with_hi(pos);\n+                                                (sp, derefs, Applicability::MachineApplicable)\n+                                            })\n                                         }\n                                     }\n                                 }\n                             } {\n-                                return Some((sp, \"consider dereferencing\", src, applicability));\n+                                return Some((\n+                                    span,\n+                                    \"consider dereferencing\",\n+                                    src,\n+                                    applicability,\n+                                    true,\n+                                ));\n                             }\n                         }\n                     }\n@@ -669,6 +701,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 message,\n                                 suggestion,\n                                 Applicability::MachineApplicable,\n+                                false,\n                             ));\n                         } else if self.infcx.type_is_copy_modulo_regions(\n                             self.param_env,\n@@ -682,21 +715,22 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 } else {\n                                     \"consider dereferencing the type\"\n                                 };\n-                                let suggestion = if is_struct_pat_shorthand_field {\n-                                    format!(\"{}: *{}\", code, code)\n+                                let (span, suggestion) = if is_struct_pat_shorthand_field {\n+                                    (expr.span, format!(\"{}: *{}\", code, code))\n                                 } else if self.is_else_if_block(expr) {\n                                     // Don't suggest nonsense like `else *if`\n                                     return None;\n                                 } else if let Some(expr) = self.maybe_get_block_expr(expr.hir_id) {\n-                                    format!(\"*{}\", sm.span_to_snippet(expr.span).unwrap_or(code))\n+                                    (expr.span.shrink_to_lo(), \"*\".to_string())\n                                 } else {\n-                                    format!(\"*{}\", code)\n+                                    (expr.span.shrink_to_lo(), \"*\".to_string())\n                                 };\n                                 return Some((\n-                                    expr.span,\n+                                    span,\n                                     message,\n                                     suggestion,\n                                     Applicability::MachineApplicable,\n+                                    true,\n                                 ));\n                             }\n                         }"}, {"sha": "08258aac96f2f39032daeba61048d690a11e7005", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/199d1aebe472585e1066334d5e1f740f02eba661/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/199d1aebe472585e1066334d5e1f740f02eba661/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=199d1aebe472585e1066334d5e1f740f02eba661", "patch": "@@ -344,7 +344,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         if let Some(sp) =\n                             tcx.sess.parse_sess.ambiguous_block_expr_parse.borrow().get(&sp)\n                         {\n-                            tcx.sess.parse_sess.expr_parentheses_needed(&mut err, *sp, None);\n+                            tcx.sess.parse_sess.expr_parentheses_needed(&mut err, *sp);\n                         }\n                         err.emit();\n                         oprnd_t = tcx.ty_error();"}, {"sha": "0acf1d26e257d9d5b88d1544e938f73b6d0d366d", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 39, "deletions": 28, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/199d1aebe472585e1066334d5e1f740f02eba661/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/199d1aebe472585e1066334d5e1f740f02eba661/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=199d1aebe472585e1066334d5e1f740f02eba661", "patch": "@@ -213,8 +213,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expected_ty_expr: Option<&'tcx hir::Expr<'tcx>>,\n     ) {\n         let expr = expr.peel_blocks();\n-        if let Some((sp, msg, suggestion, applicability)) = self.check_ref(expr, found, expected) {\n-            err.span_suggestion(sp, msg, suggestion, applicability);\n+        if let Some((sp, msg, suggestion, applicability, verbose)) =\n+            self.check_ref(expr, found, expected)\n+        {\n+            if verbose {\n+                err.span_suggestion_verbose(sp, msg, suggestion, applicability);\n+            } else {\n+                err.span_suggestion(sp, msg, suggestion, applicability);\n+            }\n         } else if let (ty::FnDef(def_id, ..), true) =\n             (&found.kind(), self.suggest_fn_call(err, expr, expected, found))\n         {\n@@ -234,29 +240,36 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             None // do not suggest code that is already there (#53348)\n                         } else {\n                             let method_call_list = [\".to_vec()\", \".to_string()\"];\n-                            let sugg = if receiver.ends_with(\".clone()\")\n+                            let mut sugg = if receiver.ends_with(\".clone()\")\n                                 && method_call_list.contains(&method_call.as_str())\n                             {\n                                 let max_len = receiver.rfind('.').unwrap();\n-                                format!(\"{}{}\", &receiver[..max_len], method_call)\n+                                vec![(\n+                                    expr.span,\n+                                    format!(\"{}{}\", &receiver[..max_len], method_call),\n+                                )]\n                             } else {\n                                 if expr.precedence().order() < ExprPrecedence::MethodCall.order() {\n-                                    format!(\"({}){}\", receiver, method_call)\n+                                    vec![\n+                                        (expr.span.shrink_to_lo(), \"(\".to_string()),\n+                                        (expr.span.shrink_to_hi(), format!(\"){}\", method_call)),\n+                                    ]\n                                 } else {\n-                                    format!(\"{}{}\", receiver, method_call)\n+                                    vec![(expr.span.shrink_to_hi(), method_call)]\n                                 }\n                             };\n-                            Some(if is_struct_pat_shorthand_field {\n-                                format!(\"{}: {}\", receiver, sugg)\n-                            } else {\n-                                sugg\n-                            })\n+                            if is_struct_pat_shorthand_field {\n+                                sugg.insert(\n+                                    0,\n+                                    (expr.span.shrink_to_lo(), format!(\"{}: \", receiver)),\n+                                );\n+                            }\n+                            Some(sugg)\n                         }\n                     })\n                     .peekable();\n                 if suggestions.peek().is_some() {\n-                    err.span_suggestions(\n-                        expr.span,\n+                    err.multipart_suggestions(\n                         \"try using a conversion method\",\n                         suggestions,\n                         Applicability::MaybeIncorrect,\n@@ -283,14 +296,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             return;\n         }\n         let boxed_found = self.tcx.mk_box(found);\n-        if let (true, Ok(snippet)) = (\n-            self.can_coerce(boxed_found, expected),\n-            self.sess().source_map().span_to_snippet(expr.span),\n-        ) {\n-            err.span_suggestion(\n-                expr.span,\n+        if self.can_coerce(boxed_found, expected) {\n+            err.multipart_suggestion(\n                 \"store this in the heap by calling `Box::new`\",\n-                format!(\"Box::new({})\", snippet),\n+                vec![\n+                    (expr.span.shrink_to_lo(), \"Box::new(\".to_string()),\n+                    (expr.span.shrink_to_hi(), \")\".to_string()),\n+                ],\n                 Applicability::MachineApplicable,\n             );\n             err.note(\n@@ -357,19 +369,18 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n         let boxed_found = self.tcx.mk_box(found);\n         let new_found = self.tcx.mk_lang_item(boxed_found, LangItem::Pin).unwrap();\n-        if let (true, Ok(snippet)) = (\n-            self.can_coerce(new_found, expected),\n-            self.sess().source_map().span_to_snippet(expr.span),\n-        ) {\n+        if self.can_coerce(new_found, expected) {\n             match found.kind() {\n                 ty::Adt(def, _) if def.is_box() => {\n                     err.help(\"use `Box::pin`\");\n                 }\n                 _ => {\n-                    err.span_suggestion(\n-                        expr.span,\n+                    err.multipart_suggestion(\n                         \"you need to pin and box this expression\",\n-                        format!(\"Box::pin({})\", snippet),\n+                        vec![\n+                            (expr.span.shrink_to_lo(), \"Box::pin(\".to_string()),\n+                            (expr.span.shrink_to_hi(), \")\".to_string()),\n+                        ],\n                         Applicability::MachineApplicable,\n                     );\n                 }\n@@ -547,7 +558,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let sp = self.tcx.sess.source_map().start_point(expr.span);\n         if let Some(sp) = self.tcx.sess.parse_sess.ambiguous_block_expr_parse.borrow().get(&sp) {\n             // `{ 42 } &&x` (#61475) or `{ 42 } && if x { 1 } else { 0 }`\n-            self.tcx.sess.parse_sess.expr_parentheses_needed(err, *sp, None);\n+            self.tcx.sess.parse_sess.expr_parentheses_needed(err, *sp);\n         }\n     }\n "}, {"sha": "d0c91c4ab446687359bdce6e8c233596255981fa", "filename": "src/test/ui/async-await/async-borrowck-escaping-block-error.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-block-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-block-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-block-error.stderr?ref=199d1aebe472585e1066334d5e1f740f02eba661", "patch": "@@ -15,7 +15,7 @@ LL | fn test_boxed() -> Box<impl std::future::Future<Output = u32>> {\n help: to force the async block to take ownership of `x` (and any other referenced variables), use the `move` keyword\n    |\n LL |     Box::new(async move { x } )\n-   |                    ^^^^^^^^^^\n+   |                    ^^^^\n \n error[E0373]: async block may outlive the current function, but it borrows `x`, which is owned by the current function\n   --> $DIR/async-borrowck-escaping-block-error.rs:11:11\n@@ -34,7 +34,7 @@ LL |     async { *x }\n help: to force the async block to take ownership of `x` (and any other referenced variables), use the `move` keyword\n    |\n LL |     async move { *x }\n-   |           ^^^^^^^^^^^\n+   |           ^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "1bcaaf0d6b33b5d0a5a7c4169b5225a998abf497", "filename": "src/test/ui/async-await/async-borrowck-escaping-closure-error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-closure-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-closure-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-closure-error.stderr?ref=199d1aebe472585e1066334d5e1f740f02eba661", "patch": "@@ -14,7 +14,7 @@ LL |     Box::new((async || x)())\n help: to force the closure to take ownership of `x` (and any other referenced variables), use the `move` keyword\n    |\n LL |     Box::new((async move || x)())\n-   |               ^^^^^^^^^^^^^\n+   |                     ^^^^\n \n error: aborting due to previous error\n "}, {"sha": "1139175f8a07a87f0c74be1e419480f1f0f82c60", "filename": "src/test/ui/async-await/issues/issue-62097.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.nll.stderr?ref=199d1aebe472585e1066334d5e1f740f02eba661", "patch": "@@ -14,7 +14,7 @@ LL |         foo(|| self.bar()).await;\n help: to force the closure to take ownership of `self` (and any other referenced variables), use the `move` keyword\n    |\n LL |         foo(move || self.bar()).await;\n-   |             ^^^^^^^\n+   |             ^^^^\n \n error[E0521]: borrowed data escapes outside of associated function\n   --> $DIR/issue-62097.rs:13:9"}, {"sha": "22ebd86d85ca13847e60b1a5c5f14972c20a7115", "filename": "src/test/ui/async-await/issues/issue-78938-async-block.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78938-async-block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78938-async-block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78938-async-block.stderr?ref=199d1aebe472585e1066334d5e1f740f02eba661", "patch": "@@ -12,9 +12,7 @@ LL | |     });\n help: to force the async block to take ownership of `room_ref` (and any other referenced variables), use the `move` keyword\n    |\n LL |     let gameloop_handle = spawn(async move {\n-LL |         game_loop(Arc::clone(&room_ref))\n-LL |     });\n-   |\n+   |                                       ^^^^\n \n error: aborting due to previous error\n "}, {"sha": "ef3e2da81b28c26993bd6ffdbf2027c0842cd111", "filename": "src/test/ui/block-result/issue-5500.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fblock-result%2Fissue-5500.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fblock-result%2Fissue-5500.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-5500.stderr?ref=199d1aebe472585e1066334d5e1f740f02eba661", "patch": "@@ -4,13 +4,14 @@ error[E0308]: mismatched types\n LL | fn main() {\n    |           - expected `()` because of default return type\n LL |     &panic!()\n-   |     ^^^^^^^^^\n-   |     |\n-   |     expected `()`, found reference\n-   |     help: consider removing the borrow: `panic!()`\n+   |     ^^^^^^^^^ expected `()`, found reference\n    |\n    = note: expected unit type `()`\n               found reference `&_`\n+help: consider removing the borrow\n+   |\n+LL |     panic!()\n+   |    --\n \n error: aborting due to previous error\n "}, {"sha": "161e4610d614fa2f2ec138bbdc6bfabe7033472d", "filename": "src/test/ui/borrowck/borrowck-escaping-closure-error-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-1.stderr?ref=199d1aebe472585e1066334d5e1f740f02eba661", "patch": "@@ -14,7 +14,7 @@ LL |     spawn(|| books.push(4));\n help: to force the closure to take ownership of `books` (and any other referenced variables), use the `move` keyword\n    |\n LL |     spawn(move || books.push(4));\n-   |           ^^^^^^^\n+   |           ^^^^\n \n error: aborting due to previous error\n "}, {"sha": "b07db6e12ad153242d91914d1ac6e84c09e25e86", "filename": "src/test/ui/borrowck/borrowck-escaping-closure-error-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-2.stderr?ref=199d1aebe472585e1066334d5e1f740f02eba661", "patch": "@@ -14,7 +14,7 @@ LL |     Box::new(|| books.push(4))\n help: to force the closure to take ownership of `books` (and any other referenced variables), use the `move` keyword\n    |\n LL |     Box::new(move || books.push(4))\n-   |              ^^^^^^^\n+   |              ^^^^\n \n error: aborting due to previous error\n "}, {"sha": "311a1b84e0c80dd602d6fb18fdf66257b7b84984", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/borrowck/borrowck-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-4.stderr?ref=199d1aebe472585e1066334d5e1f740f02eba661", "patch": "@@ -15,7 +15,7 @@ LL | fn foo () -> impl FnMut()->() {\n help: to force the closure to take ownership of `p` (and any other referenced variables), use the `move` keyword\n    |\n LL |     let mut c = move || {\n-   |                 ^^^^^^^\n+   |                 ^^^^\n \n error: aborting due to previous error\n "}, {"sha": "7823e3570096e20680eed3d474201fff2c2552fe", "filename": "src/test/ui/closures/closure-bounds-static-cant-capture-borrowed.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-static-cant-capture-borrowed.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-static-cant-capture-borrowed.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-static-cant-capture-borrowed.nll.stderr?ref=199d1aebe472585e1066334d5e1f740f02eba661", "patch": "@@ -27,7 +27,7 @@ LL | |     })\n help: to force the closure to take ownership of `x` (and any other referenced variables), use the `move` keyword\n    |\n LL |     bar(move || {\n-   |         ^^^^^^^\n+   |         ^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "fd8f8b2693a4b6f08821ea7e58e25b3a93821998", "filename": "src/test/ui/const-generics/occurs-check/unused-substs-3.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-3.stderr?ref=199d1aebe472585e1066334d5e1f740f02eba661", "patch": "@@ -2,10 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/unused-substs-3.rs:16:9\n    |\n LL |     t = foo;\n-   |         ^^^\n+   |         ^^^- help: try using a conversion method: `.to_vec()`\n    |         |\n    |         cyclic type of infinite size\n-   |         help: try using a conversion method: `foo.to_vec()`\n \n error: aborting due to previous error\n "}, {"sha": "be289f44f1b6564a9a77d1689cbc537f4394cabd", "filename": "src/test/ui/const-generics/occurs-check/unused-substs-5.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-5.stderr?ref=199d1aebe472585e1066334d5e1f740f02eba661", "patch": "@@ -2,10 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/unused-substs-5.rs:15:9\n    |\n LL |     x = q::<_, N>(x);\n-   |         ^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^- help: try using a conversion method: `.to_vec()`\n    |         |\n    |         cyclic type of infinite size\n-   |         help: try using a conversion method: `q::<_, N>(x).to_vec()`\n \n error: aborting due to previous error\n "}, {"sha": "8c004148a5d758d81b053f0f2cf683486ad07877", "filename": "src/test/ui/deref-suggestion.stderr", "status": "modified", "additions": 39, "deletions": 26, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fderef-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fderef-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderef-suggestion.stderr?ref=199d1aebe472585e1066334d5e1f740f02eba661", "patch": "@@ -2,37 +2,42 @@ error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:8:9\n    |\n LL |     foo(s);\n-   |         ^\n+   |         ^- help: try using a conversion method: `.to_string()`\n    |         |\n    |         expected struct `String`, found `&String`\n-   |         help: try using a conversion method: `s.to_string()`\n \n error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:14:10\n    |\n LL |     foo3(u);\n+   |          ^ expected `u32`, found `&u32`\n+   |\n+help: consider dereferencing the borrow\n+   |\n+LL |     foo3(*u);\n    |          ^\n-   |          |\n-   |          expected `u32`, found `&u32`\n-   |          help: consider dereferencing the borrow: `*u`\n \n error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:30:9\n    |\n LL |     foo(&\"aaa\".to_owned());\n-   |         ^^^^^^^^^^^^^^^^^\n-   |         |\n-   |         expected struct `String`, found `&String`\n-   |         help: consider removing the borrow: `\"aaa\".to_owned()`\n+   |         ^^^^^^^^^^^^^^^^^ expected struct `String`, found `&String`\n+   |\n+help: consider removing the borrow\n+   |\n+LL |     foo(\"aaa\".to_owned());\n+   |        --\n \n error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:32:9\n    |\n LL |     foo(&mut \"aaa\".to_owned());\n-   |         ^^^^^^^^^^^^^^^^^^^^^\n-   |         |\n-   |         expected struct `String`, found `&mut String`\n-   |         help: consider removing the borrow: `\"aaa\".to_owned()`\n+   |         ^^^^^^^^^^^^^^^^^^^^^ expected struct `String`, found `&mut String`\n+   |\n+help: consider removing the borrow\n+   |\n+LL |     foo(\"aaa\".to_owned());\n+   |        --\n \n error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:2:20\n@@ -75,37 +80,45 @@ error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:44:17\n    |\n LL |     let r = R { i };\n-   |                 ^\n-   |                 |\n-   |                 expected `u32`, found `&{integer}`\n-   |                 help: consider dereferencing the borrow: `i: *i`\n+   |                 ^ expected `u32`, found `&{integer}`\n+   |\n+help: consider dereferencing the borrow\n+   |\n+LL |     let r = R { i: *i };\n+   |                 ^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:46:20\n    |\n LL |     let r = R { i: i };\n+   |                    ^ expected `u32`, found `&{integer}`\n+   |\n+help: consider dereferencing the borrow\n+   |\n+LL |     let r = R { i: *i };\n    |                    ^\n-   |                    |\n-   |                    expected `u32`, found `&{integer}`\n-   |                    help: consider dereferencing the borrow: `*i`\n \n error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:55:9\n    |\n LL |         b\n+   |         ^ expected `i32`, found `&{integer}`\n+   |\n+help: consider dereferencing the borrow\n+   |\n+LL |         *b\n    |         ^\n-   |         |\n-   |         expected `i32`, found `&{integer}`\n-   |         help: consider dereferencing the borrow: `*b`\n \n error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:63:9\n    |\n LL |         b\n+   |         ^ expected `i32`, found `&{integer}`\n+   |\n+help: consider dereferencing the borrow\n+   |\n+LL |         *b\n    |         ^\n-   |         |\n-   |         expected `i32`, found `&{integer}`\n-   |         help: consider dereferencing the borrow: `*b`\n \n error[E0308]: `if` and `else` have incompatible types\n   --> $DIR/deref-suggestion.rs:68:12"}, {"sha": "017b73a0d8611bdd78b1c4c1875aa4effa5af082", "filename": "src/test/ui/diverging-tuple-parts-39485.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fdiverging-tuple-parts-39485.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fdiverging-tuple-parts-39485.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdiverging-tuple-parts-39485.stderr?ref=199d1aebe472585e1066334d5e1f740f02eba661", "patch": "@@ -13,7 +13,7 @@ LL | fn g() -> &_ {\n help: consider removing the borrow\n    |\n LL |     panic!()\n-   |     ^^^^^^^^\n+   |    --\n \n error[E0308]: mismatched types\n   --> $DIR/diverging-tuple-parts-39485.rs:12:5"}, {"sha": "d929c32633a0aed37c02af7b795dfffd09bb4338", "filename": "src/test/ui/estr-subtyping.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Festr-subtyping.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Festr-subtyping.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Festr-subtyping.stderr?ref=199d1aebe472585e1066334d5e1f740f02eba661", "patch": "@@ -2,10 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/estr-subtyping.rs:10:15\n    |\n LL |    wants_uniq(x);\n-   |               ^\n+   |               ^- help: try using a conversion method: `.to_string()`\n    |               |\n    |               expected struct `String`, found `&str`\n-   |               help: try using a conversion method: `x.to_string()`\n \n error: aborting due to previous error\n "}, {"sha": "554cc3a2bcf34c8d6f5b187bc7fb5c81bda8b40c", "filename": "src/test/ui/expr/if/if-no-match-bindings.stderr", "status": "modified", "additions": 48, "deletions": 32, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-no-match-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-no-match-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-no-match-bindings.stderr?ref=199d1aebe472585e1066334d5e1f740f02eba661", "patch": "@@ -2,73 +2,89 @@ error[E0308]: mismatched types\n   --> $DIR/if-no-match-bindings.rs:18:8\n    |\n LL |     if b_ref() {}\n-   |        ^^^^^^^\n-   |        |\n-   |        expected `bool`, found `&bool`\n-   |        help: consider dereferencing the borrow: `*b_ref()`\n+   |        ^^^^^^^ expected `bool`, found `&bool`\n+   |\n+help: consider dereferencing the borrow\n+   |\n+LL |     if *b_ref() {}\n+   |        ^\n \n error[E0308]: mismatched types\n   --> $DIR/if-no-match-bindings.rs:19:8\n    |\n LL |     if b_mut_ref() {}\n-   |        ^^^^^^^^^^^\n-   |        |\n-   |        expected `bool`, found `&mut bool`\n-   |        help: consider dereferencing the borrow: `*b_mut_ref()`\n+   |        ^^^^^^^^^^^ expected `bool`, found `&mut bool`\n+   |\n+help: consider dereferencing the borrow\n+   |\n+LL |     if *b_mut_ref() {}\n+   |        ^\n \n error[E0308]: mismatched types\n   --> $DIR/if-no-match-bindings.rs:20:8\n    |\n LL |     if &true {}\n-   |        ^^^^^\n-   |        |\n-   |        expected `bool`, found `&bool`\n-   |        help: consider removing the borrow: `true`\n+   |        ^^^^^ expected `bool`, found `&bool`\n+   |\n+help: consider removing the borrow\n+   |\n+LL |     if true {}\n+   |       --\n \n error[E0308]: mismatched types\n   --> $DIR/if-no-match-bindings.rs:21:8\n    |\n LL |     if &mut true {}\n-   |        ^^^^^^^^^\n-   |        |\n-   |        expected `bool`, found `&mut bool`\n-   |        help: consider removing the borrow: `true`\n+   |        ^^^^^^^^^ expected `bool`, found `&mut bool`\n+   |\n+help: consider removing the borrow\n+   |\n+LL |     if true {}\n+   |       --\n \n error[E0308]: mismatched types\n   --> $DIR/if-no-match-bindings.rs:24:11\n    |\n LL |     while b_ref() {}\n-   |           ^^^^^^^\n-   |           |\n-   |           expected `bool`, found `&bool`\n-   |           help: consider dereferencing the borrow: `*b_ref()`\n+   |           ^^^^^^^ expected `bool`, found `&bool`\n+   |\n+help: consider dereferencing the borrow\n+   |\n+LL |     while *b_ref() {}\n+   |           ^\n \n error[E0308]: mismatched types\n   --> $DIR/if-no-match-bindings.rs:25:11\n    |\n LL |     while b_mut_ref() {}\n-   |           ^^^^^^^^^^^\n-   |           |\n-   |           expected `bool`, found `&mut bool`\n-   |           help: consider dereferencing the borrow: `*b_mut_ref()`\n+   |           ^^^^^^^^^^^ expected `bool`, found `&mut bool`\n+   |\n+help: consider dereferencing the borrow\n+   |\n+LL |     while *b_mut_ref() {}\n+   |           ^\n \n error[E0308]: mismatched types\n   --> $DIR/if-no-match-bindings.rs:26:11\n    |\n LL |     while &true {}\n-   |           ^^^^^\n-   |           |\n-   |           expected `bool`, found `&bool`\n-   |           help: consider removing the borrow: `true`\n+   |           ^^^^^ expected `bool`, found `&bool`\n+   |\n+help: consider removing the borrow\n+   |\n+LL |     while true {}\n+   |          --\n \n error[E0308]: mismatched types\n   --> $DIR/if-no-match-bindings.rs:27:11\n    |\n LL |     while &mut true {}\n-   |           ^^^^^^^^^\n-   |           |\n-   |           expected `bool`, found `&mut bool`\n-   |           help: consider removing the borrow: `true`\n+   |           ^^^^^^^^^ expected `bool`, found `&mut bool`\n+   |\n+help: consider removing the borrow\n+   |\n+LL |     while true {}\n+   |          --\n \n error: aborting due to 8 previous errors\n "}, {"sha": "73fd5e8ded3b6cc003dccec6fed60becf1e63603", "filename": "src/test/ui/impl-trait/does-not-live-long-enough.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fimpl-trait%2Fdoes-not-live-long-enough.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fimpl-trait%2Fdoes-not-live-long-enough.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fdoes-not-live-long-enough.stderr?ref=199d1aebe472585e1066334d5e1f740f02eba661", "patch": "@@ -14,7 +14,7 @@ LL |     fn started_with<'a>(&'a self, prefix: &'a str) -> impl Iterator<Item=&'\n help: to force the closure to take ownership of `prefix` (and any other referenced variables), use the `move` keyword\n    |\n LL |         self.data.iter().filter(move |s| s.starts_with(prefix)).map(|s| s.as_ref())\n-   |                                 ^^^^^^^^\n+   |                                 ^^^^\n \n error: aborting due to previous error\n "}, {"sha": "0ecec5eea368a03cc0486a6e040d58c338b68f1c", "filename": "src/test/ui/impl-trait/dyn-trait-return-should-be-impl-trait.stderr", "status": "modified", "additions": 40, "deletions": 32, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.stderr?ref=199d1aebe472585e1066334d5e1f740f02eba661", "patch": "@@ -140,14 +140,15 @@ LL | fn bam() -> Box<dyn Trait> {\n    |             -------------- expected `Box<(dyn Trait + 'static)>` because of return type\n LL |     if true {\n LL |         return Struct;\n-   |                ^^^^^^\n-   |                |\n-   |                expected struct `Box`, found struct `Struct`\n-   |                help: store this in the heap by calling `Box::new`: `Box::new(Struct)`\n+   |                ^^^^^^ expected struct `Box`, found struct `Struct`\n    |\n    = note: expected struct `Box<(dyn Trait + 'static)>`\n               found struct `Struct`\n    = note: for more on the distinction between the stack and the heap, read https://doc.rust-lang.org/book/ch15-01-box.html, https://doc.rust-lang.org/rust-by-example/std/box.html, and https://doc.rust-lang.org/std/boxed/index.html\n+help: store this in the heap by calling `Box::new`\n+   |\n+LL |         return Box::new(Struct);\n+   |                ^^^^^^^^^      ^\n \n error[E0308]: mismatched types\n   --> $DIR/dyn-trait-return-should-be-impl-trait.rs:36:5\n@@ -156,14 +157,15 @@ LL | fn bam() -> Box<dyn Trait> {\n    |             -------------- expected `Box<(dyn Trait + 'static)>` because of return type\n ...\n LL |     42\n-   |     ^^\n-   |     |\n-   |     expected struct `Box`, found integer\n-   |     help: store this in the heap by calling `Box::new`: `Box::new(42)`\n+   |     ^^ expected struct `Box`, found integer\n    |\n    = note: expected struct `Box<(dyn Trait + 'static)>`\n                 found type `{integer}`\n    = note: for more on the distinction between the stack and the heap, read https://doc.rust-lang.org/book/ch15-01-box.html, https://doc.rust-lang.org/rust-by-example/std/box.html, and https://doc.rust-lang.org/std/boxed/index.html\n+help: store this in the heap by calling `Box::new`\n+   |\n+LL |     Box::new(42)\n+   |     ^^^^^^^^^  ^\n \n error[E0308]: mismatched types\n   --> $DIR/dyn-trait-return-should-be-impl-trait.rs:40:16\n@@ -172,14 +174,15 @@ LL | fn baq() -> Box<dyn Trait> {\n    |             -------------- expected `Box<(dyn Trait + 'static)>` because of return type\n LL |     if true {\n LL |         return 0;\n-   |                ^\n-   |                |\n-   |                expected struct `Box`, found integer\n-   |                help: store this in the heap by calling `Box::new`: `Box::new(0)`\n+   |                ^ expected struct `Box`, found integer\n    |\n    = note: expected struct `Box<(dyn Trait + 'static)>`\n                 found type `{integer}`\n    = note: for more on the distinction between the stack and the heap, read https://doc.rust-lang.org/book/ch15-01-box.html, https://doc.rust-lang.org/rust-by-example/std/box.html, and https://doc.rust-lang.org/std/boxed/index.html\n+help: store this in the heap by calling `Box::new`\n+   |\n+LL |         return Box::new(0);\n+   |                ^^^^^^^^^ ^\n \n error[E0308]: mismatched types\n   --> $DIR/dyn-trait-return-should-be-impl-trait.rs:42:5\n@@ -188,14 +191,15 @@ LL | fn baq() -> Box<dyn Trait> {\n    |             -------------- expected `Box<(dyn Trait + 'static)>` because of return type\n ...\n LL |     42\n-   |     ^^\n-   |     |\n-   |     expected struct `Box`, found integer\n-   |     help: store this in the heap by calling `Box::new`: `Box::new(42)`\n+   |     ^^ expected struct `Box`, found integer\n    |\n    = note: expected struct `Box<(dyn Trait + 'static)>`\n                 found type `{integer}`\n    = note: for more on the distinction between the stack and the heap, read https://doc.rust-lang.org/book/ch15-01-box.html, https://doc.rust-lang.org/rust-by-example/std/box.html, and https://doc.rust-lang.org/std/boxed/index.html\n+help: store this in the heap by calling `Box::new`\n+   |\n+LL |     Box::new(42)\n+   |     ^^^^^^^^^  ^\n \n error[E0308]: mismatched types\n   --> $DIR/dyn-trait-return-should-be-impl-trait.rs:46:9\n@@ -204,14 +208,15 @@ LL | fn baz() -> Box<dyn Trait> {\n    |             -------------- expected `Box<(dyn Trait + 'static)>` because of return type\n LL |     if true {\n LL |         Struct\n-   |         ^^^^^^\n-   |         |\n-   |         expected struct `Box`, found struct `Struct`\n-   |         help: store this in the heap by calling `Box::new`: `Box::new(Struct)`\n+   |         ^^^^^^ expected struct `Box`, found struct `Struct`\n    |\n    = note: expected struct `Box<(dyn Trait + 'static)>`\n               found struct `Struct`\n    = note: for more on the distinction between the stack and the heap, read https://doc.rust-lang.org/book/ch15-01-box.html, https://doc.rust-lang.org/rust-by-example/std/box.html, and https://doc.rust-lang.org/std/boxed/index.html\n+help: store this in the heap by calling `Box::new`\n+   |\n+LL |         Box::new(Struct)\n+   |         ^^^^^^^^^      ^\n \n error[E0308]: mismatched types\n   --> $DIR/dyn-trait-return-should-be-impl-trait.rs:48:9\n@@ -220,14 +225,15 @@ LL | fn baz() -> Box<dyn Trait> {\n    |             -------------- expected `Box<(dyn Trait + 'static)>` because of return type\n ...\n LL |         42\n-   |         ^^\n-   |         |\n-   |         expected struct `Box`, found integer\n-   |         help: store this in the heap by calling `Box::new`: `Box::new(42)`\n+   |         ^^ expected struct `Box`, found integer\n    |\n    = note: expected struct `Box<(dyn Trait + 'static)>`\n                 found type `{integer}`\n    = note: for more on the distinction between the stack and the heap, read https://doc.rust-lang.org/book/ch15-01-box.html, https://doc.rust-lang.org/rust-by-example/std/box.html, and https://doc.rust-lang.org/std/boxed/index.html\n+help: store this in the heap by calling `Box::new`\n+   |\n+LL |         Box::new(42)\n+   |         ^^^^^^^^^  ^\n \n error[E0308]: mismatched types\n   --> $DIR/dyn-trait-return-should-be-impl-trait.rs:53:9\n@@ -236,14 +242,15 @@ LL | fn baw() -> Box<dyn Trait> {\n    |             -------------- expected `Box<(dyn Trait + 'static)>` because of return type\n LL |     if true {\n LL |         0\n-   |         ^\n-   |         |\n-   |         expected struct `Box`, found integer\n-   |         help: store this in the heap by calling `Box::new`: `Box::new(0)`\n+   |         ^ expected struct `Box`, found integer\n    |\n    = note: expected struct `Box<(dyn Trait + 'static)>`\n                 found type `{integer}`\n    = note: for more on the distinction between the stack and the heap, read https://doc.rust-lang.org/book/ch15-01-box.html, https://doc.rust-lang.org/rust-by-example/std/box.html, and https://doc.rust-lang.org/std/boxed/index.html\n+help: store this in the heap by calling `Box::new`\n+   |\n+LL |         Box::new(0)\n+   |         ^^^^^^^^^ ^\n \n error[E0308]: mismatched types\n   --> $DIR/dyn-trait-return-should-be-impl-trait.rs:55:9\n@@ -252,14 +259,15 @@ LL | fn baw() -> Box<dyn Trait> {\n    |             -------------- expected `Box<(dyn Trait + 'static)>` because of return type\n ...\n LL |         42\n-   |         ^^\n-   |         |\n-   |         expected struct `Box`, found integer\n-   |         help: store this in the heap by calling `Box::new`: `Box::new(42)`\n+   |         ^^ expected struct `Box`, found integer\n    |\n    = note: expected struct `Box<(dyn Trait + 'static)>`\n                 found type `{integer}`\n    = note: for more on the distinction between the stack and the heap, read https://doc.rust-lang.org/book/ch15-01-box.html, https://doc.rust-lang.org/rust-by-example/std/box.html, and https://doc.rust-lang.org/std/boxed/index.html\n+help: store this in the heap by calling `Box::new`\n+   |\n+LL |         Box::new(42)\n+   |         ^^^^^^^^^  ^\n \n error[E0746]: return type cannot have an unboxed trait object\n   --> $DIR/dyn-trait-return-should-be-impl-trait.rs:60:13"}, {"sha": "957ab2a754882af05329a5ac66450ccdef439d93", "filename": "src/test/ui/infinite/infinite-autoderef.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Finfinite%2Finfinite-autoderef.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Finfinite%2Finfinite-autoderef.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-autoderef.stderr?ref=199d1aebe472585e1066334d5e1f740f02eba661", "patch": "@@ -2,10 +2,12 @@ error[E0308]: mismatched types\n   --> $DIR/infinite-autoderef.rs:20:13\n    |\n LL |         x = box x;\n-   |             ^^^^^\n-   |             |\n-   |             cyclic type of infinite size\n-   |             help: try using a conversion method: `(box x).to_string()`\n+   |             ^^^^^ cyclic type of infinite size\n+   |\n+help: try using a conversion method\n+   |\n+LL |         x = (box x).to_string();\n+   |             ^     ^^^^^^^^^^^^^\n \n error[E0055]: reached the recursion limit while auto-dereferencing `Foo`\n   --> $DIR/infinite-autoderef.rs:25:5"}, {"sha": "99ff9ac0a0d5891b1dbb6a8af644b9d6ee84c336", "filename": "src/test/ui/issues/issue-22644.stderr", "status": "modified", "additions": 48, "deletions": 24, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fissues%2Fissue-22644.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fissues%2Fissue-22644.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22644.stderr?ref=199d1aebe472585e1066334d5e1f740f02eba661", "patch": "@@ -2,46 +2,66 @@ error: `<` is interpreted as a start of generic arguments for `usize`, not a com\n   --> $DIR/issue-22644.rs:8:31\n    |\n LL |     println!(\"{}\", a as usize < long_name);\n-   |                    ---------- ^ --------- interpreted as generic arguments\n-   |                    |          |\n-   |                    |          not interpreted as comparison\n-   |                    help: try comparing the cast value: `(a as usize)`\n+   |                               ^ --------- interpreted as generic arguments\n+   |                               |\n+   |                               not interpreted as comparison\n+   |\n+help: try comparing the cast value\n+   |\n+LL |     println!(\"{}\", (a as usize) < long_name);\n+   |                    ^          ^\n \n error: `<` is interpreted as a start of generic arguments for `usize`, not a comparison\n   --> $DIR/issue-22644.rs:9:33\n    |\n LL |     println!(\"{}{}\", a as usize < long_name, long_name);\n-   |                      ---------- ^ -------------------- interpreted as generic arguments\n-   |                      |          |\n-   |                      |          not interpreted as comparison\n-   |                      help: try comparing the cast value: `(a as usize)`\n+   |                                 ^ -------------------- interpreted as generic arguments\n+   |                                 |\n+   |                                 not interpreted as comparison\n+   |\n+help: try comparing the cast value\n+   |\n+LL |     println!(\"{}{}\", (a as usize) < long_name, long_name);\n+   |                      ^          ^\n \n error: `<` is interpreted as a start of generic arguments for `usize`, not a comparison\n   --> $DIR/issue-22644.rs:11:31\n    |\n LL |     println!(\"{}\", a as usize < 4);\n-   |                    ---------- ^ - interpreted as generic arguments\n-   |                    |          |\n-   |                    |          not interpreted as comparison\n-   |                    help: try comparing the cast value: `(a as usize)`\n+   |                               ^ - interpreted as generic arguments\n+   |                               |\n+   |                               not interpreted as comparison\n+   |\n+help: try comparing the cast value\n+   |\n+LL |     println!(\"{}\", (a as usize) < 4);\n+   |                    ^          ^\n \n error: `<` is interpreted as a start of generic arguments for `usize`, not a comparison\n   --> $DIR/issue-22644.rs:13:31\n    |\n LL |     println!(\"{}{}\", a: usize < long_name, long_name);\n-   |                      -------- ^ -------------------- interpreted as generic arguments\n-   |                      |        |\n-   |                      |        not interpreted as comparison\n-   |                      help: try comparing the cast value: `(a: usize)`\n+   |                               ^ -------------------- interpreted as generic arguments\n+   |                               |\n+   |                               not interpreted as comparison\n+   |\n+help: try comparing the cast value\n+   |\n+LL |     println!(\"{}{}\", (a: usize) < long_name, long_name);\n+   |                      ^        ^\n \n error: `<` is interpreted as a start of generic arguments for `usize`, not a comparison\n   --> $DIR/issue-22644.rs:15:29\n    |\n LL |     println!(\"{}\", a: usize < 4);\n-   |                    -------- ^ - interpreted as generic arguments\n-   |                    |        |\n-   |                    |        not interpreted as comparison\n-   |                    help: try comparing the cast value: `(a: usize)`\n+   |                             ^ - interpreted as generic arguments\n+   |                             |\n+   |                             not interpreted as comparison\n+   |\n+help: try comparing the cast value\n+   |\n+LL |     println!(\"{}\", (a: usize) < 4);\n+   |                    ^        ^\n \n error: `<` is interpreted as a start of generic arguments for `usize`, not a comparison\n   --> $DIR/issue-22644.rs:20:20\n@@ -80,10 +100,14 @@ error: `<` is interpreted as a start of generic arguments for `usize`, not a shi\n   --> $DIR/issue-22644.rs:32:31\n    |\n LL |     println!(\"{}\", a as usize << long_name);\n-   |                    ---------- ^^ --------- interpreted as generic arguments\n-   |                    |          |\n-   |                    |          not interpreted as shift\n-   |                    help: try shifting the cast value: `(a as usize)`\n+   |                               ^^ --------- interpreted as generic arguments\n+   |                               |\n+   |                               not interpreted as shift\n+   |\n+help: try shifting the cast value\n+   |\n+LL |     println!(\"{}\", (a as usize) << long_name);\n+   |                    ^          ^\n \n error: expected type, found `4`\n   --> $DIR/issue-22644.rs:34:28"}, {"sha": "b3362ae44b63798c8a91ad100547067527372b8a", "filename": "src/test/ui/issues/issue-32122-1.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fissues%2Fissue-32122-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fissues%2Fissue-32122-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32122-1.stderr?ref=199d1aebe472585e1066334d5e1f740f02eba661", "patch": "@@ -2,14 +2,16 @@ error[E0308]: mismatched types\n   --> $DIR/issue-32122-1.rs:16:24\n    |\n LL |     let _: *const u8 = &a;\n-   |            ---------   ^^\n-   |            |           |\n-   |            |           expected `u8`, found struct `Foo`\n-   |            |           help: consider dereferencing: `&*a`\n+   |            ---------   ^^ expected `u8`, found struct `Foo`\n+   |            |\n    |            expected due to this\n    |\n    = note: expected raw pointer `*const u8`\n                 found reference `&Foo`\n+help: consider dereferencing\n+   |\n+LL |     let _: *const u8 = &*a;\n+   |                         ^\n \n error: aborting due to previous error\n "}, {"sha": "bcf71638127e043b3fbabe1ad4a4a7d972e3e674", "filename": "src/test/ui/issues/issue-32122-2.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fissues%2Fissue-32122-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fissues%2Fissue-32122-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32122-2.stderr?ref=199d1aebe472585e1066334d5e1f740f02eba661", "patch": "@@ -2,14 +2,16 @@ error[E0308]: mismatched types\n   --> $DIR/issue-32122-2.rs:27:24\n    |\n LL |     let _: *const u8 = &a;\n-   |            ---------   ^^\n-   |            |           |\n-   |            |           expected `u8`, found struct `Emm`\n-   |            |           help: consider dereferencing: `&***a`\n+   |            ---------   ^^ expected `u8`, found struct `Emm`\n+   |            |\n    |            expected due to this\n    |\n    = note: expected raw pointer `*const u8`\n                 found reference `&Emm`\n+help: consider dereferencing\n+   |\n+LL |     let _: *const u8 = &***a;\n+   |                         ^^^\n \n error: aborting due to previous error\n "}, {"sha": "4f41c95323a253f1c69939ebe9f3a45a9655fa0b", "filename": "src/test/ui/issues/issue-42954.stderr", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fissues%2Fissue-42954.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fissues%2Fissue-42954.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-42954.stderr?ref=199d1aebe472585e1066334d5e1f740f02eba661", "patch": "@@ -2,15 +2,18 @@ error: `<` is interpreted as a start of generic arguments for `u32`, not a compa\n   --> $DIR/issue-42954.rs:7:19\n    |\n LL |         $i as u32 < 0\n-   |         --------- ^ - interpreted as generic arguments\n-   |         |         |\n-   |         |         not interpreted as comparison\n-   |         help: try comparing the cast value: `($i as u32)`\n+   |                   ^ - interpreted as generic arguments\n+   |                   |\n+   |                   not interpreted as comparison\n ...\n LL |     is_plainly_printable!(c);\n    |     ------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `is_plainly_printable` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: try comparing the cast value\n+   |\n+LL |         ($i as u32) < 0\n+   |         ^         ^\n \n error: aborting due to previous error\n "}, {"sha": "a9404c1c46afd69d115bcae21989f57cf50f4dcc", "filename": "src/test/ui/issues/issue-50687-ice-on-borrow.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fissues%2Fissue-50687-ice-on-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fissues%2Fissue-50687-ice-on-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50687-ice-on-borrow.stderr?ref=199d1aebe472585e1066334d5e1f740f02eba661", "patch": "@@ -2,14 +2,16 @@ error[E0308]: mismatched types\n   --> $DIR/issue-50687-ice-on-borrow.rs:40:17\n    |\n LL |     let _: () = Borrow::borrow(&owned);\n-   |            --   ^^^^^^^^^^^^^^^^^^^^^^\n-   |            |    |\n-   |            |    expected `()`, found reference\n-   |            |    help: consider dereferencing the borrow: `*Borrow::borrow(&owned)`\n+   |            --   ^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found reference\n+   |            |\n    |            expected due to this\n    |\n    = note: expected unit type `()`\n               found reference `&_`\n+help: consider dereferencing the borrow\n+   |\n+LL |     let _: () = *Borrow::borrow(&owned);\n+   |                 ^\n \n error: aborting due to previous error\n "}, {"sha": "14913c93bf74509b62047ba784edab219bc911cd", "filename": "src/test/ui/issues/issue-71676-1.stderr", "status": "modified", "additions": 24, "deletions": 16, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fissues%2Fissue-71676-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fissues%2Fissue-71676-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-71676-1.stderr?ref=199d1aebe472585e1066334d5e1f740f02eba661", "patch": "@@ -2,53 +2,61 @@ error[E0308]: mismatched types\n   --> $DIR/issue-71676-1.rs:43:24\n    |\n LL |     let _: *const u8 = &a;\n-   |            ---------   ^^\n-   |            |           |\n-   |            |           expected `u8`, found struct `Emm`\n-   |            |           help: consider dereferencing: `&***a`\n+   |            ---------   ^^ expected `u8`, found struct `Emm`\n+   |            |\n    |            expected due to this\n    |\n    = note: expected raw pointer `*const u8`\n                 found reference `&Emm`\n+help: consider dereferencing\n+   |\n+LL |     let _: *const u8 = &***a;\n+   |                         ^^^\n \n error[E0308]: mismatched types\n   --> $DIR/issue-71676-1.rs:46:22\n    |\n LL |     let _: *mut u8 = &a;\n-   |            -------   ^^\n-   |            |         |\n-   |            |         types differ in mutability\n-   |            |         help: consider dereferencing: `&mut ***a`\n+   |            -------   ^^ types differ in mutability\n+   |            |\n    |            expected due to this\n    |\n    = note: expected raw pointer `*mut u8`\n                 found reference `&Emm`\n+help: consider dereferencing\n+   |\n+LL |     let _: *mut u8 = &mut ***a;\n+   |                       ^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/issue-71676-1.rs:49:24\n    |\n LL |     let _: *const u8 = &mut a;\n-   |            ---------   ^^^^^^\n-   |            |           |\n-   |            |           expected `u8`, found struct `Emm`\n-   |            |           help: consider dereferencing: `&***a`\n+   |            ---------   ^^^^^^ expected `u8`, found struct `Emm`\n+   |            |\n    |            expected due to this\n    |\n    = note:    expected raw pointer `*const u8`\n            found mutable reference `&mut Emm`\n+help: consider dereferencing\n+   |\n+LL |     let _: *const u8 = &***a;\n+   |                         ^^^\n \n error[E0308]: mismatched types\n   --> $DIR/issue-71676-1.rs:52:22\n    |\n LL |     let _: *mut u8 = &mut a;\n-   |            -------   ^^^^^^\n-   |            |         |\n-   |            |         expected `u8`, found struct `Emm`\n-   |            |         help: consider dereferencing: `&mut ***a`\n+   |            -------   ^^^^^^ expected `u8`, found struct `Emm`\n+   |            |\n    |            expected due to this\n    |\n    = note:    expected raw pointer `*mut u8`\n            found mutable reference `&mut Emm`\n+help: consider dereferencing\n+   |\n+LL |     let _: *mut u8 = &mut ***a;\n+   |                           ^^^\n \n error: aborting due to 4 previous errors\n "}, {"sha": "0544deda4ae5a0af27b18a128ec2d4e44a5cb399", "filename": "src/test/ui/issues/issue-71676-2.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fissues%2Fissue-71676-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fissues%2Fissue-71676-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-71676-2.stderr?ref=199d1aebe472585e1066334d5e1f740f02eba661", "patch": "@@ -2,14 +2,16 @@ error[E0308]: mismatched types\n   --> $DIR/issue-71676-2.rs:41:22\n    |\n LL |     let _: *mut u8 = &a;\n-   |            -------   ^^\n-   |            |         |\n-   |            |         types differ in mutability\n-   |            |         help: consider dereferencing: `&mut ***a`\n+   |            -------   ^^ types differ in mutability\n+   |            |\n    |            expected due to this\n    |\n    = note: expected raw pointer `*mut u8`\n                 found reference `&Emm`\n+help: consider dereferencing\n+   |\n+LL |     let _: *mut u8 = &mut ***a;\n+   |                       ^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "f945f7f38f9ee2d00920e60a73bc2410b534fdfb", "filename": "src/test/ui/issues/issue-77218.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fissues%2Fissue-77218.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fissues%2Fissue-77218.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-77218.stderr?ref=199d1aebe472585e1066334d5e1f740f02eba661", "patch": "@@ -21,10 +21,12 @@ error[E0308]: mismatched types\n   --> $DIR/issue-77218.rs:3:16\n    |\n LL |     while Some(0) = value.get(0) {\n+   |                ^ expected integer, found `&u8`\n+   |\n+help: consider dereferencing the borrow\n+   |\n+LL |     while Some(*0) = value.get(0) {\n    |                ^\n-   |                |\n-   |                expected integer, found `&u8`\n-   |                help: consider dereferencing the borrow: `*0`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-77218.rs:3:11"}, {"sha": "02f3bc687cba9199d276f8c042589defee90b5f1", "filename": "src/test/ui/json-bom-plus-crlf-multifile.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fjson-bom-plus-crlf-multifile.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fjson-bom-plus-crlf-multifile.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson-bom-plus-crlf-multifile.stderr?ref=199d1aebe472585e1066334d5e1f740f02eba661", "patch": "@@ -24,7 +24,7 @@ This error occurs when an expression was used in a place where the compiler\n expected an expression of a different type. It can occur in several cases, the\n most common being when calling a function and passing an argument which has a\n different type than the matching type in the function declaration.\n-\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":621,\"byte_end\":622,\"line_start\":17,\"line_end\":17,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":612,\"byte_end\":618,\"line_start\":17,\"line_end\":17,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":621,\"byte_end\":622,\"line_start\":17,\"line_end\":17,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:17:22: error[E0308]: mismatched types\n+\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":621,\"byte_end\":622,\"line_start\":17,\"line_end\":17,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":612,\"byte_end\":618,\"line_start\":17,\"line_end\":17,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":622,\"byte_end\":622,\"line_start\":17,\"line_end\":17,\"column_start\":23,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":23,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\".to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:17:22: error[E0308]: mismatched types\n \"}\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\n \n@@ -52,7 +52,7 @@ This error occurs when an expression was used in a place where the compiler\n expected an expression of a different type. It can occur in several cases, the\n most common being when calling a function and passing an argument which has a\n different type than the matching type in the function declaration.\n-\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":681,\"byte_end\":682,\"line_start\":19,\"line_end\":19,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":672,\"byte_end\":678,\"line_start\":19,\"line_end\":19,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":681,\"byte_end\":682,\"line_start\":19,\"line_end\":19,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:19:22: error[E0308]: mismatched types\n+\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":681,\"byte_end\":682,\"line_start\":19,\"line_end\":19,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":672,\"byte_end\":678,\"line_start\":19,\"line_end\":19,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":682,\"byte_end\":682,\"line_start\":19,\"line_end\":19,\"column_start\":23,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":23,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\".to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:19:22: error[E0308]: mismatched types\n \"}\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\n \n@@ -80,7 +80,7 @@ This error occurs when an expression was used in a place where the compiler\n expected an expression of a different type. It can occur in several cases, the\n most common being when calling a function and passing an argument which has a\n different type than the matching type in the function declaration.\n-\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":745,\"byte_end\":746,\"line_start\":23,\"line_end\":23,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":\"expected struct `String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":735,\"byte_end\":741,\"line_start\":22,\"line_end\":22,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String =\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":745,\"byte_end\":746,\"line_start\":23,\"line_end\":23,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:23:1: error[E0308]: mismatched types\n+\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":745,\"byte_end\":746,\"line_start\":23,\"line_end\":23,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":\"expected struct `String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":735,\"byte_end\":741,\"line_start\":22,\"line_end\":22,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String =\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":746,\"byte_end\":746,\"line_start\":23,\"line_end\":23,\"column_start\":2,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":2,\"highlight_end\":2}],\"label\":null,\"suggested_replacement\":\".to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:23:1: error[E0308]: mismatched types\n \"}\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\n "}, {"sha": "df6bd7286a6158492d3574f1acac4b0eca2495b7", "filename": "src/test/ui/json-bom-plus-crlf.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fjson-bom-plus-crlf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fjson-bom-plus-crlf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson-bom-plus-crlf.stderr?ref=199d1aebe472585e1066334d5e1f740f02eba661", "patch": "@@ -24,7 +24,7 @@ This error occurs when an expression was used in a place where the compiler\n expected an expression of a different type. It can occur in several cases, the\n most common being when calling a function and passing an argument which has a\n different type than the matching type in the function declaration.\n-\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":606,\"byte_end\":607,\"line_start\":16,\"line_end\":16,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":597,\"byte_end\":603,\"line_start\":16,\"line_end\":16,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":606,\"byte_end\":607,\"line_start\":16,\"line_end\":16,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:16:22: error[E0308]: mismatched types\n+\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":606,\"byte_end\":607,\"line_start\":16,\"line_end\":16,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":597,\"byte_end\":603,\"line_start\":16,\"line_end\":16,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":607,\"byte_end\":607,\"line_start\":16,\"line_end\":16,\"column_start\":23,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":23,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\".to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:16:22: error[E0308]: mismatched types\n \"}\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\n \n@@ -52,7 +52,7 @@ This error occurs when an expression was used in a place where the compiler\n expected an expression of a different type. It can occur in several cases, the\n most common being when calling a function and passing an argument which has a\n different type than the matching type in the function declaration.\n-\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":666,\"byte_end\":667,\"line_start\":18,\"line_end\":18,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":657,\"byte_end\":663,\"line_start\":18,\"line_end\":18,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":666,\"byte_end\":667,\"line_start\":18,\"line_end\":18,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:18:22: error[E0308]: mismatched types\n+\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":666,\"byte_end\":667,\"line_start\":18,\"line_end\":18,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":657,\"byte_end\":663,\"line_start\":18,\"line_end\":18,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":667,\"byte_end\":667,\"line_start\":18,\"line_end\":18,\"column_start\":23,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":23,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\".to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:18:22: error[E0308]: mismatched types\n \"}\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\n \n@@ -80,7 +80,7 @@ This error occurs when an expression was used in a place where the compiler\n expected an expression of a different type. It can occur in several cases, the\n most common being when calling a function and passing an argument which has a\n different type than the matching type in the function declaration.\n-\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":730,\"byte_end\":731,\"line_start\":22,\"line_end\":22,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":\"expected struct `String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":720,\"byte_end\":726,\"line_start\":21,\"line_end\":21,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String =\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":730,\"byte_end\":731,\"line_start\":22,\"line_end\":22,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:22:1: error[E0308]: mismatched types\n+\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":730,\"byte_end\":731,\"line_start\":22,\"line_end\":22,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":\"expected struct `String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":720,\"byte_end\":726,\"line_start\":21,\"line_end\":21,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String =\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":731,\"byte_end\":731,\"line_start\":22,\"line_end\":22,\"column_start\":2,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":2,\"highlight_end\":2}],\"label\":null,\"suggested_replacement\":\".to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:22:1: error[E0308]: mismatched types\n \"}\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\n "}, {"sha": "1fef8fc69e23a63c69f1289855b46e82c9e22e22", "filename": "src/test/ui/lifetimes/unnamed-closure-doesnt-life-long-enough-issue-67634.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Flifetimes%2Funnamed-closure-doesnt-life-long-enough-issue-67634.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Flifetimes%2Funnamed-closure-doesnt-life-long-enough-issue-67634.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Funnamed-closure-doesnt-life-long-enough-issue-67634.stderr?ref=199d1aebe472585e1066334d5e1f740f02eba661", "patch": "@@ -14,7 +14,7 @@ LL |     [0].iter().flat_map(|a| [0].iter().map(|_| &a));\n help: to force the closure to take ownership of `a` (and any other referenced variables), use the `move` keyword\n    |\n LL |     [0].iter().flat_map(|a| [0].iter().map(move |_| &a));\n-   |                                            ^^^^^^^^\n+   |                                            ^^^^\n \n error: aborting due to previous error\n "}, {"sha": "7697a375fd8ae589c632997c39ccc31776a11f42", "filename": "src/test/ui/mismatched_types/abridged.stderr", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fmismatched_types%2Fabridged.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fmismatched_types%2Fabridged.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fabridged.stderr?ref=199d1aebe472585e1066334d5e1f740f02eba661", "patch": "@@ -78,21 +78,25 @@ error[E0308]: mismatched types\n LL | fn f() -> String {\n    |           ------ expected `String` because of return type\n LL |     1+2\n-   |     ^^^\n-   |     |\n-   |     expected struct `String`, found integer\n-   |     help: try using a conversion method: `(1+2).to_string()`\n+   |     ^^^ expected struct `String`, found integer\n+   |\n+help: try using a conversion method\n+   |\n+LL |     (1+2).to_string()\n+   |     ^   ^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/abridged.rs:59:5\n    |\n LL | fn g() -> String {\n    |           ------ expected `String` because of return type\n LL |     -2\n-   |     ^^\n-   |     |\n-   |     expected struct `String`, found integer\n-   |     help: try using a conversion method: `(-2).to_string()`\n+   |     ^^ expected struct `String`, found integer\n+   |\n+help: try using a conversion method\n+   |\n+LL |     (-2).to_string()\n+   |     ^  ^^^^^^^^^^^^^\n \n error: aborting due to 8 previous errors\n "}, {"sha": "3453f031623f42dd5d5b1c9b3f0ec48a6c55884f", "filename": "src/test/ui/never_type/issue-52443.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fnever_type%2Fissue-52443.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fnever_type%2Fissue-52443.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fissue-52443.stderr?ref=199d1aebe472585e1066334d5e1f740f02eba661", "patch": "@@ -19,13 +19,14 @@ error[E0308]: mismatched types\n   --> $DIR/issue-52443.rs:2:10\n    |\n LL |     [(); & { loop { continue } } ];\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^\n-   |          |\n-   |          expected `usize`, found reference\n-   |          help: consider removing the borrow: `{ loop { continue } }`\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^ expected `usize`, found reference\n    |\n    = note:   expected type `usize`\n            found reference `&_`\n+help: consider removing the borrow\n+   |\n+LL |     [(); { loop { continue } } ];\n+   |         --\n \n error[E0308]: mismatched types\n   --> $DIR/issue-52443.rs:4:17"}, {"sha": "b2c8775e78c37938f37c611df7a9e8df6564c2af", "filename": "src/test/ui/occurs-check-2.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Foccurs-check-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Foccurs-check-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foccurs-check-2.stderr?ref=199d1aebe472585e1066334d5e1f740f02eba661", "patch": "@@ -2,10 +2,12 @@ error[E0308]: mismatched types\n   --> $DIR/occurs-check-2.rs:7:9\n    |\n LL |     f = box g;\n-   |         ^^^^^\n-   |         |\n-   |         cyclic type of infinite size\n-   |         help: try using a conversion method: `(box g).to_string()`\n+   |         ^^^^^ cyclic type of infinite size\n+   |\n+help: try using a conversion method\n+   |\n+LL |     f = (box g).to_string();\n+   |         ^     ^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "a657106ad911f2465952c606fb0f5f85d5c9a2ce", "filename": "src/test/ui/occurs-check.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Foccurs-check.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Foccurs-check.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foccurs-check.stderr?ref=199d1aebe472585e1066334d5e1f740f02eba661", "patch": "@@ -2,10 +2,12 @@ error[E0308]: mismatched types\n   --> $DIR/occurs-check.rs:5:9\n    |\n LL |     f = box f;\n-   |         ^^^^^\n-   |         |\n-   |         cyclic type of infinite size\n-   |         help: try using a conversion method: `(box f).to_string()`\n+   |         ^^^^^ cyclic type of infinite size\n+   |\n+help: try using a conversion method\n+   |\n+LL |     f = (box f).to_string();\n+   |         ^     ^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "affcb6ed22425f64e9da31337eb4a01b61e922cb", "filename": "src/test/ui/parser/expr-as-stmt-2.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt-2.stderr?ref=199d1aebe472585e1066334d5e1f740f02eba661", "patch": "@@ -31,12 +31,15 @@ error[E0308]: mismatched types\n    |\n LL |   fn foo(a: Option<u32>, b: Option<u32>) -> bool {\n    |                                             ---- expected `bool` because of return type\n-LL |       if let Some(x) = a { true } else { false }\n-   |       ------------------------------------------ help: parentheses are required to parse this as an expression: `(if let Some(x) = a { true } else { false })`\n ...\n LL | /     &&\n LL | |     if let Some(y) = a { true } else { false }\n    | |______________________________________________^ expected `bool`, found `&&bool`\n+   |\n+help: parentheses are required to parse this as an expression\n+   |\n+LL |     (if let Some(x) = a { true } else { false })\n+   |     ^                                          ^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "2bb320e732185e3e31c22f8a396b5473e698caa9", "filename": "src/test/ui/parser/expr-as-stmt.stderr", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr?ref=199d1aebe472585e1066334d5e1f740f02eba661", "patch": "@@ -2,25 +2,34 @@ error: expected expression, found `+`\n   --> $DIR/expr-as-stmt.rs:8:9\n    |\n LL |     {2} + {2}\n-   |     --- ^ expected expression\n-   |     |\n-   |     help: parentheses are required to parse this as an expression: `({2})`\n+   |         ^ expected expression\n+   |\n+help: parentheses are required to parse this as an expression\n+   |\n+LL |     ({2}) + {2}\n+   |     ^   ^\n \n error: expected expression, found `+`\n   --> $DIR/expr-as-stmt.rs:13:9\n    |\n LL |     {2} + 2\n-   |     --- ^ expected expression\n-   |     |\n-   |     help: parentheses are required to parse this as an expression: `({2})`\n+   |         ^ expected expression\n+   |\n+help: parentheses are required to parse this as an expression\n+   |\n+LL |     ({2}) + 2\n+   |     ^   ^\n \n error: expected expression, found `+`\n   --> $DIR/expr-as-stmt.rs:19:12\n    |\n LL |     { 42 } + foo;\n-   |     ------ ^ expected expression\n-   |     |\n-   |     help: parentheses are required to parse this as an expression: `({ 42 })`\n+   |            ^ expected expression\n+   |\n+help: parentheses are required to parse this as an expression\n+   |\n+LL |     ({ 42 }) + foo;\n+   |     ^      ^\n \n error: expected expression, found `>`\n   --> $DIR/expr-as-stmt.rs:32:7\n@@ -83,9 +92,12 @@ error[E0614]: type `{integer}` cannot be dereferenced\n   --> $DIR/expr-as-stmt.rs:25:11\n    |\n LL |     { 3 } * 3\n-   |     ----- ^^^\n-   |     |\n-   |     help: parentheses are required to parse this as an expression: `({ 3 })`\n+   |           ^^^\n+   |\n+help: parentheses are required to parse this as an expression\n+   |\n+LL |     ({ 3 }) * 3\n+   |     ^     ^\n \n error: aborting due to 9 previous errors\n "}, {"sha": "4bd16c71137a1fb253e2fd5dcadce835afb9d159", "filename": "src/test/ui/regions/region-borrow-params-issue-29793-big.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fregions%2Fregion-borrow-params-issue-29793-big.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fregions%2Fregion-borrow-params-issue-29793-big.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-borrow-params-issue-29793-big.stderr?ref=199d1aebe472585e1066334d5e1f740f02eba661", "patch": "@@ -14,7 +14,7 @@ LL |         WrapB::new().set(|t: bool| if t { x } else { y }) // (separate erro\n help: to force the closure to take ownership of `x` (and any other referenced variables), use the `move` keyword\n    |\n LL |         WrapB::new().set(move |t: bool| if t { x } else { y }) // (separate errors for `x` vs `y`)\n-   |                          ^^^^^^^^^^^^^^\n+   |                          ^^^^\n \n error[E0373]: closure may outlive the current function, but it borrows `y`, which is owned by the current function\n   --> $DIR/region-borrow-params-issue-29793-big.rs:67:26\n@@ -32,7 +32,7 @@ LL |         WrapB::new().set(|t: bool| if t { x } else { y }) // (separate erro\n help: to force the closure to take ownership of `y` (and any other referenced variables), use the `move` keyword\n    |\n LL |         WrapB::new().set(move |t: bool| if t { x } else { y }) // (separate errors for `x` vs `y`)\n-   |                          ^^^^^^^^^^^^^^\n+   |                          ^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f70e4ea9fbcc632ac947eb58540c571148f921fe", "filename": "src/test/ui/regions/region-borrow-params-issue-29793-small.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fregions%2Fregion-borrow-params-issue-29793-small.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fregions%2Fregion-borrow-params-issue-29793-small.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-borrow-params-issue-29793-small.stderr?ref=199d1aebe472585e1066334d5e1f740f02eba661", "patch": "@@ -14,7 +14,7 @@ LL |         return f;\n help: to force the closure to take ownership of `x` (and any other referenced variables), use the `move` keyword\n    |\n LL |         let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n-   |                 ^^^^^^^^^^^^^^\n+   |                 ^^^^\n \n error[E0373]: closure may outlive the current function, but it borrows `y`, which is owned by the current function\n   --> $DIR/region-borrow-params-issue-29793-small.rs:9:17\n@@ -32,7 +32,7 @@ LL |         return f;\n help: to force the closure to take ownership of `y` (and any other referenced variables), use the `move` keyword\n    |\n LL |         let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n-   |                 ^^^^^^^^^^^^^^\n+   |                 ^^^^\n \n error[E0373]: closure may outlive the current function, but it borrows `x`, which is owned by the current function\n   --> $DIR/region-borrow-params-issue-29793-small.rs:24:17\n@@ -50,7 +50,7 @@ LL |         f\n help: to force the closure to take ownership of `x` (and any other referenced variables), use the `move` keyword\n    |\n LL |         let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n-   |                 ^^^^^^^^^^^^^^\n+   |                 ^^^^\n \n error[E0373]: closure may outlive the current function, but it borrows `y`, which is owned by the current function\n   --> $DIR/region-borrow-params-issue-29793-small.rs:24:17\n@@ -68,7 +68,7 @@ LL |         f\n help: to force the closure to take ownership of `y` (and any other referenced variables), use the `move` keyword\n    |\n LL |         let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n-   |                 ^^^^^^^^^^^^^^\n+   |                 ^^^^\n \n error[E0373]: closure may outlive the current function, but it borrows `x`, which is owned by the current function\n   --> $DIR/region-borrow-params-issue-29793-small.rs:55:17\n@@ -86,7 +86,7 @@ LL |         return Box::new(f);\n help: to force the closure to take ownership of `x` (and any other referenced variables), use the `move` keyword\n    |\n LL |         let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n-   |                 ^^^^^^^^^^^^^^\n+   |                 ^^^^\n \n error[E0373]: closure may outlive the current function, but it borrows `y`, which is owned by the current function\n   --> $DIR/region-borrow-params-issue-29793-small.rs:55:17\n@@ -104,7 +104,7 @@ LL |         return Box::new(f);\n help: to force the closure to take ownership of `y` (and any other referenced variables), use the `move` keyword\n    |\n LL |         let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n-   |                 ^^^^^^^^^^^^^^\n+   |                 ^^^^\n \n error[E0373]: closure may outlive the current function, but it borrows `x`, which is owned by the current function\n   --> $DIR/region-borrow-params-issue-29793-small.rs:66:17\n@@ -122,7 +122,7 @@ LL |         Box::new(f)\n help: to force the closure to take ownership of `x` (and any other referenced variables), use the `move` keyword\n    |\n LL |         let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n-   |                 ^^^^^^^^^^^^^^\n+   |                 ^^^^\n \n error[E0373]: closure may outlive the current function, but it borrows `y`, which is owned by the current function\n   --> $DIR/region-borrow-params-issue-29793-small.rs:66:17\n@@ -140,7 +140,7 @@ LL |         Box::new(f)\n help: to force the closure to take ownership of `y` (and any other referenced variables), use the `move` keyword\n    |\n LL |         let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n-   |                 ^^^^^^^^^^^^^^\n+   |                 ^^^^\n \n error[E0373]: closure may outlive the current function, but it borrows `x`, which is owned by the current function\n   --> $DIR/region-borrow-params-issue-29793-small.rs:90:21\n@@ -158,7 +158,7 @@ LL |             return Box::new(f);\n help: to force the closure to take ownership of `x` (and any other referenced variables), use the `move` keyword\n    |\n LL |             let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n-   |                     ^^^^^^^^^^^^^^\n+   |                     ^^^^\n \n error[E0373]: closure may outlive the current function, but it borrows `y`, which is owned by the current function\n   --> $DIR/region-borrow-params-issue-29793-small.rs:90:21\n@@ -176,7 +176,7 @@ LL |             return Box::new(f);\n help: to force the closure to take ownership of `y` (and any other referenced variables), use the `move` keyword\n    |\n LL |             let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n-   |                     ^^^^^^^^^^^^^^\n+   |                     ^^^^\n \n error[E0373]: closure may outlive the current function, but it borrows `x`, which is owned by the current function\n   --> $DIR/region-borrow-params-issue-29793-small.rs:104:21\n@@ -194,7 +194,7 @@ LL |             Box::new(f)\n help: to force the closure to take ownership of `x` (and any other referenced variables), use the `move` keyword\n    |\n LL |             let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n-   |                     ^^^^^^^^^^^^^^\n+   |                     ^^^^\n \n error[E0373]: closure may outlive the current function, but it borrows `y`, which is owned by the current function\n   --> $DIR/region-borrow-params-issue-29793-small.rs:104:21\n@@ -212,7 +212,7 @@ LL |             Box::new(f)\n help: to force the closure to take ownership of `y` (and any other referenced variables), use the `move` keyword\n    |\n LL |             let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n-   |                     ^^^^^^^^^^^^^^\n+   |                     ^^^^\n \n error[E0373]: closure may outlive the current function, but it borrows `x`, which is owned by the current function\n   --> $DIR/region-borrow-params-issue-29793-small.rs:132:21\n@@ -230,7 +230,7 @@ LL |             return Box::new(f);\n help: to force the closure to take ownership of `x` (and any other referenced variables), use the `move` keyword\n    |\n LL |             let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n-   |                     ^^^^^^^^^^^^^^\n+   |                     ^^^^\n \n error[E0373]: closure may outlive the current function, but it borrows `y`, which is owned by the current function\n   --> $DIR/region-borrow-params-issue-29793-small.rs:132:21\n@@ -248,7 +248,7 @@ LL |             return Box::new(f);\n help: to force the closure to take ownership of `y` (and any other referenced variables), use the `move` keyword\n    |\n LL |             let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n-   |                     ^^^^^^^^^^^^^^\n+   |                     ^^^^\n \n error[E0373]: closure may outlive the current function, but it borrows `x`, which is owned by the current function\n   --> $DIR/region-borrow-params-issue-29793-small.rs:147:21\n@@ -266,7 +266,7 @@ LL |             Box::new(f)\n help: to force the closure to take ownership of `x` (and any other referenced variables), use the `move` keyword\n    |\n LL |             let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n-   |                     ^^^^^^^^^^^^^^\n+   |                     ^^^^\n \n error[E0373]: closure may outlive the current function, but it borrows `y`, which is owned by the current function\n   --> $DIR/region-borrow-params-issue-29793-small.rs:147:21\n@@ -284,7 +284,7 @@ LL |             Box::new(f)\n help: to force the closure to take ownership of `y` (and any other referenced variables), use the `move` keyword\n    |\n LL |             let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n-   |                     ^^^^^^^^^^^^^^\n+   |                     ^^^^\n \n error[E0373]: closure may outlive the current function, but it borrows `x`, which is owned by the current function\n   --> $DIR/region-borrow-params-issue-29793-small.rs:175:21\n@@ -302,7 +302,7 @@ LL |             return Box::new(f);\n help: to force the closure to take ownership of `x` (and any other referenced variables), use the `move` keyword\n    |\n LL |             let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n-   |                     ^^^^^^^^^^^^^^\n+   |                     ^^^^\n \n error[E0373]: closure may outlive the current function, but it borrows `y`, which is owned by the current function\n   --> $DIR/region-borrow-params-issue-29793-small.rs:175:21\n@@ -320,7 +320,7 @@ LL |             return Box::new(f);\n help: to force the closure to take ownership of `y` (and any other referenced variables), use the `move` keyword\n    |\n LL |             let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n-   |                     ^^^^^^^^^^^^^^\n+   |                     ^^^^\n \n error[E0373]: closure may outlive the current function, but it borrows `x`, which is owned by the current function\n   --> $DIR/region-borrow-params-issue-29793-small.rs:189:21\n@@ -338,7 +338,7 @@ LL |             Box::new(f)\n help: to force the closure to take ownership of `x` (and any other referenced variables), use the `move` keyword\n    |\n LL |             let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n-   |                     ^^^^^^^^^^^^^^\n+   |                     ^^^^\n \n error[E0373]: closure may outlive the current function, but it borrows `y`, which is owned by the current function\n   --> $DIR/region-borrow-params-issue-29793-small.rs:189:21\n@@ -356,7 +356,7 @@ LL |             Box::new(f)\n help: to force the closure to take ownership of `y` (and any other referenced variables), use the `move` keyword\n    |\n LL |             let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n-   |                     ^^^^^^^^^^^^^^\n+   |                     ^^^^\n \n error: aborting due to 20 previous errors\n "}, {"sha": "23eabfa3b3edc50bf86428b26935763907f0be03", "filename": "src/test/ui/rfc-2497-if-let-chains/disallowed-positions.stderr", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr?ref=199d1aebe472585e1066334d5e1f740f02eba661", "patch": "@@ -478,10 +478,12 @@ error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:32:8\n    |\n LL |     if &let 0 = 0 {}\n-   |        ^^^^^^^^^^\n-   |        |\n-   |        expected `bool`, found `&bool`\n-   |        help: consider removing the borrow: `let 0 = 0`\n+   |        ^^^^^^^^^^ expected `bool`, found `&bool`\n+   |\n+help: consider removing the borrow\n+   |\n+LL |     if let 0 = 0 {}\n+   |       --\n \n error[E0614]: type `bool` cannot be dereferenced\n   --> $DIR/disallowed-positions.rs:36:8\n@@ -678,10 +680,12 @@ error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:96:11\n    |\n LL |     while &let 0 = 0 {}\n-   |           ^^^^^^^^^^\n-   |           |\n-   |           expected `bool`, found `&bool`\n-   |           help: consider removing the borrow: `let 0 = 0`\n+   |           ^^^^^^^^^^ expected `bool`, found `&bool`\n+   |\n+help: consider removing the borrow\n+   |\n+LL |     while let 0 = 0 {}\n+   |          --\n \n error[E0614]: type `bool` cannot be dereferenced\n   --> $DIR/disallowed-positions.rs:100:11"}, {"sha": "2595cd91dc1f38fcb1d20c0ee715850fdc86c308", "filename": "src/test/ui/span/coerce-suggestions.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr?ref=199d1aebe472585e1066334d5e1f740f02eba661", "patch": "@@ -38,10 +38,12 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-suggestions.rs:17:9\n    |\n LL |     f = box f;\n-   |         ^^^^^\n-   |         |\n-   |         cyclic type of infinite size\n-   |         help: try using a conversion method: `(box f).to_string()`\n+   |         ^^^^^ cyclic type of infinite size\n+   |\n+help: try using a conversion method\n+   |\n+LL |     f = (box f).to_string();\n+   |         ^     ^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-suggestions.rs:21:9"}, {"sha": "dcc1ee07cbd04581132ae4d06c6bd11b30923173", "filename": "src/test/ui/static/bad-const-type.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fstatic%2Fbad-const-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fstatic%2Fbad-const-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fbad-const-type.stderr?ref=199d1aebe472585e1066334d5e1f740f02eba661", "patch": "@@ -2,10 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/bad-const-type.rs:1:20\n    |\n LL | static i: String = 10;\n-   |                    ^^\n+   |                    ^^- help: try using a conversion method: `.to_string()`\n    |                    |\n    |                    expected struct `String`, found integer\n-   |                    help: try using a conversion method: `10.to_string()`\n \n error: aborting due to previous error\n "}, {"sha": "e8e2c4e24f55efc668f3fb323b7c0c04bd5f2489", "filename": "src/test/ui/str/str-lit-type-mismatch.stderr", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fstr%2Fstr-lit-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fstr%2Fstr-lit-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-lit-type-mismatch.stderr?ref=199d1aebe472585e1066334d5e1f740f02eba661", "patch": "@@ -2,40 +2,46 @@ error[E0308]: mismatched types\n   --> $DIR/str-lit-type-mismatch.rs:2:20\n    |\n LL |     let x: &[u8] = \"foo\";\n-   |            -----   ^^^^^\n-   |            |       |\n-   |            |       expected slice `[u8]`, found `str`\n-   |            |       help: consider adding a leading `b`: `b\"foo\"`\n+   |            -----   ^^^^^ expected slice `[u8]`, found `str`\n+   |            |\n    |            expected due to this\n    |\n    = note: expected reference `&[u8]`\n               found reference `&'static str`\n+help: consider adding a leading `b`\n+   |\n+LL |     let x: &[u8] = b\"foo\";\n+   |                    ^\n \n error[E0308]: mismatched types\n   --> $DIR/str-lit-type-mismatch.rs:3:23\n    |\n LL |     let y: &[u8; 4] = \"baaa\";\n-   |            --------   ^^^^^^\n-   |            |          |\n-   |            |          expected array `[u8; 4]`, found `str`\n-   |            |          help: consider adding a leading `b`: `b\"baaa\"`\n+   |            --------   ^^^^^^ expected array `[u8; 4]`, found `str`\n+   |            |\n    |            expected due to this\n    |\n    = note: expected reference `&[u8; 4]`\n               found reference `&'static str`\n+help: consider adding a leading `b`\n+   |\n+LL |     let y: &[u8; 4] = b\"baaa\";\n+   |                       ^\n \n error[E0308]: mismatched types\n   --> $DIR/str-lit-type-mismatch.rs:4:19\n    |\n LL |     let z: &str = b\"foo\";\n-   |            ----   ^^^^^^\n-   |            |      |\n-   |            |      expected `str`, found array `[u8; 3]`\n-   |            |      help: consider removing the leading `b`: `\"foo\"`\n+   |            ----   ^^^^^^ expected `str`, found array `[u8; 3]`\n+   |            |\n    |            expected due to this\n    |\n    = note: expected reference `&str`\n               found reference `&'static [u8; 3]`\n+help: consider removing the leading `b`\n+   |\n+LL |     let z: &str = \"foo\";\n+   |                  --\n \n error: aborting due to 3 previous errors\n "}, {"sha": "119599c22a63b01066263c13aa9cf1f9cdda515b", "filename": "src/test/ui/suggestions/expected-boxed-future-isnt-pinned.stderr", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr?ref=199d1aebe472585e1066334d5e1f740f02eba661", "patch": "@@ -5,13 +5,14 @@ LL | fn foo<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static,\n    |        - this type parameter                            ----------------------- expected `Pin<Box<(dyn Future<Output = i32> + Send + 'static)>>` because of return type\n LL |     // We could instead use an `async` block, but this way we have no std spans.\n LL |     x\n-   |     ^\n-   |     |\n-   |     expected struct `Pin`, found type parameter `F`\n-   |     help: you need to pin and box this expression: `Box::pin(x)`\n+   |     ^ expected struct `Pin`, found type parameter `F`\n    |\n    = note:      expected struct `Pin<Box<(dyn Future<Output = i32> + Send + 'static)>>`\n            found type parameter `F`\n+help: you need to pin and box this expression\n+   |\n+LL |     Box::pin(x)\n+   |     ^^^^^^^^^ ^\n \n error[E0308]: mismatched types\n   --> $DIR/expected-boxed-future-isnt-pinned.rs:18:5\n@@ -31,14 +32,15 @@ error[E0308]: mismatched types\n LL | fn baz<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32> {\n    |        - this type parameter\n LL |     Pin::new(x)\n-   |              ^\n-   |              |\n-   |              expected struct `Box`, found type parameter `F`\n-   |              help: store this in the heap by calling `Box::new`: `Box::new(x)`\n+   |              ^ expected struct `Box`, found type parameter `F`\n    |\n    = note:      expected struct `Box<dyn Future<Output = i32> + Send>`\n            found type parameter `F`\n    = note: for more on the distinction between the stack and the heap, read https://doc.rust-lang.org/book/ch15-01-box.html, https://doc.rust-lang.org/rust-by-example/std/box.html, and https://doc.rust-lang.org/std/boxed/index.html\n+help: store this in the heap by calling `Box::new`\n+   |\n+LL |     Pin::new(Box::new(x))\n+   |              ^^^^^^^^^ ^\n \n error[E0277]: `dyn Future<Output = i32> + Send` cannot be unpinned\n   --> $DIR/expected-boxed-future-isnt-pinned.rs:22:5"}, {"sha": "15cb845a06d543674a04e701bfc6e3b953016b40", "filename": "src/test/ui/suggestions/format-borrow.stderr", "status": "modified", "additions": 28, "deletions": 16, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fsuggestions%2Fformat-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fsuggestions%2Fformat-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fformat-borrow.stderr?ref=199d1aebe472585e1066334d5e1f740f02eba661", "patch": "@@ -2,41 +2,53 @@ error[E0308]: mismatched types\n   --> $DIR/format-borrow.rs:2:21\n    |\n LL |     let a: String = &String::from(\"a\");\n-   |            ------   ^^^^^^^^^^^^^^^^^^\n-   |            |        |\n-   |            |        expected struct `String`, found `&String`\n-   |            |        help: consider removing the borrow: `String::from(\"a\")`\n+   |            ------   ^^^^^^^^^^^^^^^^^^ expected struct `String`, found `&String`\n+   |            |\n    |            expected due to this\n+   |\n+help: consider removing the borrow\n+   |\n+LL |     let a: String = String::from(\"a\");\n+   |                    --\n \n error[E0308]: mismatched types\n   --> $DIR/format-borrow.rs:4:21\n    |\n LL |     let b: String = &format!(\"b\");\n-   |            ------   ^^^^^^^^^^^^^\n-   |            |        |\n-   |            |        expected struct `String`, found `&String`\n-   |            |        help: consider removing the borrow: `format!(\"b\")`\n+   |            ------   ^^^^^^^^^^^^^ expected struct `String`, found `&String`\n+   |            |\n    |            expected due to this\n+   |\n+help: consider removing the borrow\n+   |\n+LL |     let b: String = format!(\"b\");\n+   |                    --\n \n error[E0308]: mismatched types\n   --> $DIR/format-borrow.rs:6:21\n    |\n LL |     let c: String = &mut format!(\"c\");\n-   |            ------   ^^^^^^^^^^^^^^^^^\n-   |            |        |\n-   |            |        expected struct `String`, found `&mut String`\n-   |            |        help: consider removing the borrow: `format!(\"c\")`\n+   |            ------   ^^^^^^^^^^^^^^^^^ expected struct `String`, found `&mut String`\n+   |            |\n    |            expected due to this\n+   |\n+help: consider removing the borrow\n+   |\n+LL |     let c: String = format!(\"c\");\n+   |                    --\n \n error[E0308]: mismatched types\n   --> $DIR/format-borrow.rs:8:21\n    |\n LL |     let d: String = &mut (format!(\"d\"));\n-   |            ------   ^^^^^^^^^^^^^^^^^^^\n-   |            |        |\n-   |            |        expected struct `String`, found `&mut String`\n-   |            |        help: consider removing the borrow: `format!(\"d\")`\n+   |            ------   ^^^^^^^^^^^^^^^^^^^ expected struct `String`, found `&mut String`\n+   |            |\n    |            expected due to this\n+   |\n+help: consider removing the borrow\n+   |\n+LL |     let d: String = format!(\"d\"));\n+   |                    --\n \n error: aborting due to 4 previous errors\n "}, {"sha": "62c04584d3c75176b2fa0ba37a993c44a73a6bd3", "filename": "src/test/ui/suggestions/issue-52820.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fsuggestions%2Fissue-52820.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fsuggestions%2Fissue-52820.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-52820.stderr?ref=199d1aebe472585e1066334d5e1f740f02eba661", "patch": "@@ -2,10 +2,12 @@ error[E0308]: mismatched types\n   --> $DIR/issue-52820.rs:9:9\n    |\n LL |         guts,\n-   |         ^^^^\n-   |         |\n-   |         expected struct `String`, found `&str`\n-   |         help: try using a conversion method: `guts: guts.to_string()`\n+   |         ^^^^ expected struct `String`, found `&str`\n+   |\n+help: try using a conversion method\n+   |\n+LL |         guts: guts.to_string(),\n+   |         ^^^^^     ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/issue-52820.rs:10:17"}, {"sha": "ac9b6d975f42526dcb41672052f0b246b7203db3", "filename": "src/test/ui/suggestions/issue-59819.stderr", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fsuggestions%2Fissue-59819.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fsuggestions%2Fissue-59819.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-59819.stderr?ref=199d1aebe472585e1066334d5e1f740f02eba661", "patch": "@@ -2,30 +2,35 @@ error[E0308]: mismatched types\n   --> $DIR/issue-59819.rs:28:18\n    |\n LL |     let y: i32 = x;\n-   |            ---   ^\n-   |            |     |\n-   |            |     expected `i32`, found struct `Foo`\n-   |            |     help: consider dereferencing the type: `*x`\n+   |            ---   ^ expected `i32`, found struct `Foo`\n+   |            |\n    |            expected due to this\n+   |\n+help: consider dereferencing the type\n+   |\n+LL |     let y: i32 = *x;\n+   |                  ^\n \n error[E0308]: mismatched types\n   --> $DIR/issue-59819.rs:30:18\n    |\n LL |     let b: i32 = a;\n-   |            ---   ^\n-   |            |     |\n-   |            |     expected `i32`, found `&{integer}`\n-   |            |     help: consider dereferencing the borrow: `*a`\n+   |            ---   ^ expected `i32`, found `&{integer}`\n+   |            |\n    |            expected due to this\n+   |\n+help: consider dereferencing the borrow\n+   |\n+LL |     let b: i32 = *a;\n+   |                  ^\n \n error[E0308]: mismatched types\n   --> $DIR/issue-59819.rs:34:21\n    |\n LL |     let g: String = f;\n-   |            ------   ^\n+   |            ------   ^- help: try using a conversion method: `.to_string()`\n    |            |        |\n    |            |        expected struct `String`, found struct `Bar`\n-   |            |        help: try using a conversion method: `f.to_string()`\n    |            expected due to this\n \n error: aborting due to 3 previous errors"}, {"sha": "91b380e4e0d32a0157bd1411b307fe550d5ce6ed", "filename": "src/test/ui/suggestions/issue-82361.stderr", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fsuggestions%2Fissue-82361.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fsuggestions%2Fissue-82361.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-82361.stderr?ref=199d1aebe472585e1066334d5e1f740f02eba661", "patch": "@@ -6,12 +6,14 @@ LL | |         a\n    | |         - expected because of this\n LL | |     } else {\n LL | |         b\n-   | |         ^\n-   | |         |\n-   | |         expected `usize`, found `&usize`\n-   | |         help: consider dereferencing the borrow: `*b`\n+   | |         ^ expected `usize`, found `&usize`\n LL | |     };\n    | |_____- `if` and `else` have incompatible types\n+   |\n+help: consider dereferencing the borrow\n+   |\n+LL |         *b\n+   |         ^\n \n error[E0308]: `if` and `else` have incompatible types\n   --> $DIR/issue-82361.rs:16:9\n@@ -21,12 +23,14 @@ LL | |         1\n    | |         - expected because of this\n LL | |     } else {\n LL | |         &1\n-   | |         ^^\n-   | |         |\n-   | |         expected integer, found `&{integer}`\n-   | |         help: consider removing the borrow: `1`\n+   | |         ^^ expected integer, found `&{integer}`\n LL | |     };\n    | |_____- `if` and `else` have incompatible types\n+   |\n+help: consider removing the borrow\n+   |\n+LL |         1\n+   |        --\n \n error[E0308]: `if` and `else` have incompatible types\n   --> $DIR/issue-82361.rs:22:9\n@@ -36,12 +40,14 @@ LL | |         1\n    | |         - expected because of this\n LL | |     } else {\n LL | |         &mut 1\n-   | |         ^^^^^^\n-   | |         |\n-   | |         expected integer, found `&mut {integer}`\n-   | |         help: consider removing the borrow: `1`\n+   | |         ^^^^^^ expected integer, found `&mut {integer}`\n LL | |     };\n    | |_____- `if` and `else` have incompatible types\n+   |\n+help: consider removing the borrow\n+   |\n+LL |         1\n+   |        --\n \n error: aborting due to 3 previous errors\n "}, {"sha": "885106e8429bcfcc983c89d4a9676c0a5c543b84", "filename": "src/test/ui/suggestions/issue-83943.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fsuggestions%2Fissue-83943.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fsuggestions%2Fissue-83943.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-83943.stderr?ref=199d1aebe472585e1066334d5e1f740f02eba661", "patch": "@@ -6,10 +6,9 @@ LL | |         \"A\".to_string()\n    | |         --------------- expected because of this\n LL | |     } else {\n LL | |         \"B\"\n-   | |         ^^^\n+   | |         ^^^- help: try using a conversion method: `.to_string()`\n    | |         |\n    | |         expected struct `String`, found `&str`\n-   | |         help: try using a conversion method: `\"B\".to_string()`\n LL | |     };\n    | |_____- `if` and `else` have incompatible types\n "}, {"sha": "13b6182c0f5f605c82f6ffede603d854d2f91610", "filename": "src/test/ui/suggestions/mut-ref-reassignment.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fsuggestions%2Fmut-ref-reassignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Fsuggestions%2Fmut-ref-reassignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmut-ref-reassignment.stderr?ref=199d1aebe472585e1066334d5e1f740f02eba661", "patch": "@@ -9,7 +9,7 @@ LL |     opt = None;\n help: consider dereferencing here to assign to the mutable borrowed piece of memory\n    |\n LL |     *opt = None;\n-   |     ^^^^\n+   |     ^\n \n error[E0308]: mismatched types\n   --> $DIR/mut-ref-reassignment.rs:6:11\n@@ -31,7 +31,7 @@ LL |     opt = Some(String::new())\n help: consider dereferencing here to assign to the mutable borrowed piece of memory\n    |\n LL |     *opt = Some(String::new())\n-   |     ^^^^\n+   |     ^\n \n error[E0308]: mismatched types\n   --> $DIR/mut-ref-reassignment.rs:14:11"}, {"sha": "15848c66c15043e6be9bc4e8c2b9d5cb8a334df8", "filename": "src/test/ui/typeck/conversion-methods.stderr", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Ftypeck%2Fconversion-methods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftest%2Fui%2Ftypeck%2Fconversion-methods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fconversion-methods.stderr?ref=199d1aebe472585e1066334d5e1f740f02eba661", "patch": "@@ -2,44 +2,43 @@ error[E0308]: mismatched types\n   --> $DIR/conversion-methods.rs:5:41\n    |\n LL |     let _tis_an_instants_play: String = \"'Tis a fond Ambush\u2014\";\n-   |                                ------   ^^^^^^^^^^^^^^^^^^^^^\n+   |                                ------   ^^^^^^^^^^^^^^^^^^^^^- help: try using a conversion method: `.to_string()`\n    |                                |        |\n    |                                |        expected struct `String`, found `&str`\n-   |                                |        help: try using a conversion method: `\"'Tis a fond Ambush\u2014\".to_string()`\n    |                                expected due to this\n \n error[E0308]: mismatched types\n   --> $DIR/conversion-methods.rs:6:40\n    |\n LL |     let _just_to_make_bliss: PathBuf = Path::new(\"/ern/her/own/surprise\");\n-   |                              -------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                              -------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- help: try using a conversion method: `.to_path_buf()`\n    |                              |         |\n    |                              |         expected struct `PathBuf`, found `&Path`\n-   |                              |         help: try using a conversion method: `Path::new(\"/ern/her/own/surprise\").to_path_buf()`\n    |                              expected due to this\n \n error[E0308]: mismatched types\n   --> $DIR/conversion-methods.rs:9:40\n    |\n LL |     let _but_should_the_play: String = 2; // Perhaps surprisingly, we suggest .to_string() here\n-   |                               ------   ^\n+   |                               ------   ^- help: try using a conversion method: `.to_string()`\n    |                               |        |\n    |                               |        expected struct `String`, found integer\n-   |                               |        help: try using a conversion method: `2.to_string()`\n    |                               expected due to this\n \n error[E0308]: mismatched types\n   --> $DIR/conversion-methods.rs:12:47\n    |\n LL |     let _prove_piercing_earnest: Vec<usize> = &[1, 2, 3];\n-   |                                  ----------   ^^^^^^^^^^\n-   |                                  |            |\n-   |                                  |            expected struct `Vec`, found `&[{integer}; 3]`\n-   |                                  |            help: try using a conversion method: `(&[1, 2, 3]).to_vec()`\n+   |                                  ----------   ^^^^^^^^^^ expected struct `Vec`, found `&[{integer}; 3]`\n+   |                                  |\n    |                                  expected due to this\n    |\n    = note: expected struct `Vec<usize>`\n            found reference `&[{integer}; 3]`\n+help: try using a conversion method\n+   |\n+LL |     let _prove_piercing_earnest: Vec<usize> = (&[1, 2, 3]).to_vec();\n+   |                                               ^          ^^^^^^^^^^\n \n error: aborting due to 4 previous errors\n "}, {"sha": "320b3bb42f897ebb4d06e620ec337cd1c603674c", "filename": "src/tools/clippy/tests/ui/crashes/ice-6250.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-6250.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/199d1aebe472585e1066334d5e1f740f02eba661/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-6250.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-6250.stderr?ref=199d1aebe472585e1066334d5e1f740f02eba661", "patch": "@@ -25,10 +25,12 @@ error[E0308]: mismatched types\n   --> $DIR/ice-6250.rs:12:14\n    |\n LL |         Some(reference) = cache.data.get(key) {\n-   |              ^^^^^^^^^\n-   |              |\n-   |              expected integer, found `&i32`\n-   |              help: consider dereferencing the borrow: `*reference`\n+   |              ^^^^^^^^^ expected integer, found `&i32`\n+   |\n+help: consider dereferencing the borrow\n+   |\n+LL |         Some(*reference) = cache.data.get(key) {\n+   |              ^\n \n error[E0308]: mismatched types\n   --> $DIR/ice-6250.rs:12:9"}]}