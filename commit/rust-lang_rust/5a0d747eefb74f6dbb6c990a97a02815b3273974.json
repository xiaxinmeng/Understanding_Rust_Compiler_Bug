{"sha": "5a0d747eefb74f6dbb6c990a97a02815b3273974", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhMGQ3NDdlZWZiNzRmNmRiYjZjOTkwYTk3YTAyODE1YjMyNzM5NzQ=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2019-12-21T14:29:46Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2019-12-21T20:19:03Z"}, "message": "Remove clean::Mutability enum", "tree": {"sha": "1a7f13399c000cc88f2f4d16cfe7861095a921fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a7f13399c000cc88f2f4d16cfe7861095a921fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a0d747eefb74f6dbb6c990a97a02815b3273974", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a0d747eefb74f6dbb6c990a97a02815b3273974", "html_url": "https://github.com/rust-lang/rust/commit/5a0d747eefb74f6dbb6c990a97a02815b3273974", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a0d747eefb74f6dbb6c990a97a02815b3273974/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a440b159436ad3c75d25b24ce5d43086b567872", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a440b159436ad3c75d25b24ce5d43086b567872", "html_url": "https://github.com/rust-lang/rust/commit/0a440b159436ad3c75d25b24ce5d43086b567872"}], "stats": {"total": 39, "additions": 11, "deletions": 28}, "files": [{"sha": "0f43555fd74c35d936a0af5ddadf7d1d0e393c93", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d747eefb74f6dbb6c990a97a02815b3273974/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d747eefb74f6dbb6c990a97a02815b3273974/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=5a0d747eefb74f6dbb6c990a97a02815b3273974", "patch": "@@ -7,7 +7,7 @@ use syntax::symbol::sym;\n use syntax_pos::hygiene::MacroKind;\n use syntax_pos::Span;\n \n-use rustc::hir;\n+use rustc::hir::{self, Mutability};\n use rustc::hir::def::{Res, DefKind, CtorKind};\n use rustc::hir::def_id::DefId;\n use rustc_metadata::creader::LoadedMacro;\n@@ -472,7 +472,7 @@ fn build_const(cx: &DocContext<'_>, did: DefId) -> clean::Constant {\n fn build_static(cx: &DocContext<'_>, did: DefId, mutable: bool) -> clean::Static {\n     clean::Static {\n         type_: cx.tcx.type_of(did).clean(cx),\n-        mutability: if mutable {clean::Mutable} else {clean::Immutable},\n+        mutability: if mutable { Mutability::Mutable } else { Mutability::Immutable },\n         expr: \"\\n\\n\\n\".to_string(), // trigger the \"[definition]\" links\n     }\n }"}, {"sha": "78e9b665c9801316763e8403096b4f36a62fc16a", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 6, "deletions": 17, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d747eefb74f6dbb6c990a97a02815b3273974/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d747eefb74f6dbb6c990a97a02815b3273974/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=5a0d747eefb74f6dbb6c990a97a02815b3273974", "patch": "@@ -46,7 +46,6 @@ pub use utils::{get_auto_trait_and_blanket_impls, krate, register_res};\n \n pub use self::types::*;\n pub use self::types::Type::*;\n-pub use self::types::Mutability::*;\n pub use self::types::ItemEnum::*;\n pub use self::types::SelfTy::*;\n pub use self::types::FunctionRetTy::*;\n@@ -1321,15 +1320,14 @@ impl Clean<Type> for hir::Ty {\n \n         match self.kind {\n             TyKind::Never => Never,\n-            TyKind::Ptr(ref m) => RawPointer(m.mutbl.clean(cx), box m.ty.clean(cx)),\n+            TyKind::Ptr(ref m) => RawPointer(m.mutbl, box m.ty.clean(cx)),\n             TyKind::Rptr(ref l, ref m) => {\n                 let lifetime = if l.is_elided() {\n                     None\n                 } else {\n                     Some(l.clean(cx))\n                 };\n-                BorrowedRef {lifetime, mutability: m.mutbl.clean(cx),\n-                             type_: box m.ty.clean(cx)}\n+                BorrowedRef {lifetime, mutability: m.mutbl, type_: box m.ty.clean(cx)}\n             }\n             TyKind::Slice(ref ty) => Slice(box ty.clean(cx)),\n             TyKind::Array(ref ty, ref length) => {\n@@ -1547,10 +1545,10 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                 let n = print_const(cx, n);\n                 Array(box ty.clean(cx), n)\n             }\n-            ty::RawPtr(mt) => RawPointer(mt.mutbl.clean(cx), box mt.ty.clean(cx)),\n+            ty::RawPtr(mt) => RawPointer(mt.mutbl, box mt.ty.clean(cx)),\n             ty::Ref(r, ty, mutbl) => BorrowedRef {\n                 lifetime: r.clean(cx),\n-                mutability: mutbl.clean(cx),\n+                mutability: mutbl,\n                 type_: box ty.clean(cx),\n             },\n             ty::FnDef(..) |\n@@ -2073,7 +2071,7 @@ impl Clean<Item> for doctree::Static<'_> {\n             deprecation: cx.deprecation(self.id).clean(cx),\n             inner: StaticItem(Static {\n                 type_: self.type_.clean(cx),\n-                mutability: self.mutability.clean(cx),\n+                mutability: self.mutability,\n                 expr: print_const_expr(cx, self.expr),\n             }),\n         }\n@@ -2098,15 +2096,6 @@ impl Clean<Item> for doctree::Constant<'_> {\n     }\n }\n \n-impl Clean<Mutability> for hir::Mutability {\n-    fn clean(&self, _: &DocContext<'_>) -> Mutability {\n-        match self {\n-            &hir::Mutability::Mut => Mutable,\n-            &hir::Mutability::Not => Immutable,\n-        }\n-    }\n-}\n-\n impl Clean<ImplPolarity> for ty::ImplPolarity {\n     fn clean(&self, _: &DocContext<'_>) -> ImplPolarity {\n         match self {\n@@ -2296,7 +2285,7 @@ impl Clean<Item> for doctree::ForeignItem<'_> {\n             hir::ForeignItemKind::Static(ref ty, mutbl) => {\n                 ForeignStaticItem(Static {\n                     type_: ty.clean(cx),\n-                    mutability: mutbl.clean(cx),\n+                    mutability: *mutbl,\n                     expr: String::new(),\n                 })\n             }"}, {"sha": "706aef720310f5f266e1c67f29f898630da951e8", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d747eefb74f6dbb6c990a97a02815b3273974/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d747eefb74f6dbb6c990a97a02815b3273974/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=5a0d747eefb74f6dbb6c990a97a02815b3273974", "patch": "@@ -10,7 +10,7 @@ use std::sync::Arc;\n \n use rustc::middle::lang_items;\n use rustc::middle::stability;\n-use rustc::hir;\n+use rustc::hir::{self, Mutability};\n use rustc::hir::def::Res;\n use rustc::hir::def_id::{CrateNum, DefId};\n use rustc::ty::layout::VariantIdx;\n@@ -1450,12 +1450,6 @@ pub struct Constant {\n     pub expr: String,\n }\n \n-#[derive(Debug, Clone, PartialEq, Eq, Copy, Hash)]\n-pub enum Mutability {\n-    Mutable,\n-    Immutable,\n-}\n-\n #[derive(Clone, PartialEq, Debug)]\n pub enum ImplPolarity {\n     Positive,"}, {"sha": "e822ada0fb9b1555d88a84dd5fbbdc0322aa4582", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d747eefb74f6dbb6c990a97a02815b3273974/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d747eefb74f6dbb6c990a97a02815b3273974/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=5a0d747eefb74f6dbb6c990a97a02815b3273974", "patch": "@@ -54,12 +54,12 @@ use syntax_pos::hygiene::MacroKind;\n use rustc::hir::def_id::DefId;\n use rustc::middle::privacy::AccessLevels;\n use rustc::middle::stability;\n-use rustc::hir;\n+use rustc::hir::{self, Mutability};\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n use rustc_data_structures::flock;\n use rustc_feature::UnstableFeatures;\n \n-use crate::clean::{self, AttributesExt, Deprecation, GetDefId, SelfTy, Mutability};\n+use crate::clean::{self, AttributesExt, Deprecation, GetDefId, SelfTy};\n use crate::config::RenderOptions;\n use crate::docfs::{DocFS, ErrorStorage, PathError};\n use crate::doctree;"}]}