{"sha": "5f9fe7c120591591aa493376679a9f63a789e37d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmOWZlN2MxMjA1OTE1OTFhYTQ5MzM3NjY3OWE5ZjYzYTc4OWUzN2Q=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2016-11-12T08:38:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-11-12T08:38:42Z"}, "message": "Rollup merge of #37693 - michaelwoerister:ich-tests, r=brson\n\nICH: Add test case for call expressions.\n\nr? @nikomatsakis", "tree": {"sha": "3e8e355f00d6677d5695d3f98dbfd567229aa59a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e8e355f00d6677d5695d3f98dbfd567229aa59a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f9fe7c120591591aa493376679a9f63a789e37d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f9fe7c120591591aa493376679a9f63a789e37d", "html_url": "https://github.com/rust-lang/rust/commit/5f9fe7c120591591aa493376679a9f63a789e37d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f9fe7c120591591aa493376679a9f63a789e37d/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb922772911704f1b30d046cef3f683eebf14dfd", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb922772911704f1b30d046cef3f683eebf14dfd", "html_url": "https://github.com/rust-lang/rust/commit/fb922772911704f1b30d046cef3f683eebf14dfd"}, {"sha": "669102f0f07974f4643242302be5a4a0fafa1034", "url": "https://api.github.com/repos/rust-lang/rust/commits/669102f0f07974f4643242302be5a4a0fafa1034", "html_url": "https://github.com/rust-lang/rust/commit/669102f0f07974f4643242302be5a4a0fafa1034"}], "stats": {"total": 203, "additions": 203, "deletions": 0}, "files": [{"sha": "d2030d935546272b1b8281e5468bf760ef4ac828", "filename": "src/test/incremental/hashes/call_expressions.rs", "status": "added", "additions": 203, "deletions": 0, "changes": 203, "blob_url": "https://github.com/rust-lang/rust/blob/5f9fe7c120591591aa493376679a9f63a789e37d/src%2Ftest%2Fincremental%2Fhashes%2Fcall_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f9fe7c120591591aa493376679a9f63a789e37d/src%2Ftest%2Fincremental%2Fhashes%2Fcall_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fcall_expressions.rs?ref=5f9fe7c120591591aa493376679a9f63a789e37d", "patch": "@@ -0,0 +1,203 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+// This test case tests the incremental compilation hash (ICH) implementation\n+// for function and method call expressions.\n+\n+// The general pattern followed here is: Change one thing between rev1 and rev2\n+// and make sure that the hash has changed, then change nothing between rev2 and\n+// rev3 and make sure that the hash has not changed.\n+\n+// must-compile-successfully\n+// revisions: cfail1 cfail2 cfail3\n+// compile-flags: -Z query-dep-graph\n+\n+\n+#![allow(warnings)]\n+#![feature(rustc_attrs)]\n+#![crate_type=\"rlib\"]\n+\n+fn callee1(_x: u32, _y: i64) {}\n+fn callee2(_x: u32, _y: i64) {}\n+\n+\n+// Change Callee (Function) ----------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn change_callee_function() {\n+    callee1(1, 2)\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn change_callee_function() {\n+    callee2(1, 2)\n+}\n+\n+\n+\n+// Change Argument (Function) --------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn change_argument_function() {\n+    callee1(1, 2)\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn change_argument_function() {\n+    callee1(1, 3)\n+}\n+\n+\n+\n+// Change Callee Indirectly (Function) -----------------------------------------\n+mod change_callee_indirectly_function {\n+    #[cfg(cfail1)]\n+    use super::callee1 as callee;\n+    #[cfg(not(cfail1))]\n+    use super::callee2 as callee;\n+\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    pub fn change_callee_indirectly_function() {\n+        callee(1, 2)\n+    }\n+}\n+\n+\n+struct Struct;\n+impl Struct {\n+    fn method1(&self, _x: char, _y: bool) {}\n+    fn method2(&self, _x: char, _y: bool) {}\n+}\n+\n+// Change Callee (Method) ------------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn change_callee_method() {\n+    let s = Struct;\n+    s.method1('x', true);\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn change_callee_method() {\n+    let s = Struct;\n+    s.method2('x', true);\n+}\n+\n+\n+\n+// Change Argument (Method) ----------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn change_argument_method() {\n+    let s = Struct;\n+    s.method1('x', true);\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn change_argument_method() {\n+    let s = Struct;\n+    s.method1('y', true);\n+}\n+\n+\n+\n+// Change Callee (Method, UFCS) ------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn change_ufcs_callee_method() {\n+    let s = Struct;\n+    Struct::method1(&s, 'x', true);\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn change_ufcs_callee_method() {\n+    let s = Struct;\n+    Struct::method2(&s, 'x', true);\n+}\n+\n+\n+\n+// Change Argument (Method, UFCS) ----------------------------------------------\n+#[cfg(cfail1)]\n+pub fn change_argument_method_ufcs() {\n+    let s = Struct;\n+    Struct::method1(&s, 'x', true);\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn change_argument_method_ufcs() {\n+    let s = Struct;\n+    Struct::method1(&s, 'x', false);\n+}\n+\n+\n+\n+// Change To UFCS --------------------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn change_to_ufcs() {\n+    let s = Struct;\n+    s.method1('x', true);\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn change_to_ufcs() {\n+    let s = Struct;\n+    Struct::method1(&s, 'x', true);\n+}\n+\n+\n+struct Struct2;\n+impl Struct2 {\n+    fn method1(&self, _x: char, _y: bool) {}\n+}\n+\n+// Change UFCS Callee Indirectly -----------------------------------------------\n+mod change_ufcs_callee_indirectly {\n+    #[cfg(cfail1)]\n+    use super::Struct as Struct;\n+    #[cfg(not(cfail1))]\n+    use super::Struct2 as Struct;\n+\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    pub fn change_ufcs_callee_indirectly() {\n+        let s = Struct;\n+        Struct::method1(&s, 'q', false)\n+    }\n+}"}]}