{"sha": "06eb5a6645ff9faf8fbe553e73efaae00c70090a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2ZWI1YTY2NDVmZjlmYWY4ZmJlNTUzZTczZWZhYWUwMGM3MDA5MGE=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-10-03T14:01:01Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2017-11-26T14:12:42Z"}, "message": "fix codegen of drops of fields of packed structs", "tree": {"sha": "129229c8ac98600887022d88c409853d13750bdb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/129229c8ac98600887022d88c409853d13750bdb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06eb5a6645ff9faf8fbe553e73efaae00c70090a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06eb5a6645ff9faf8fbe553e73efaae00c70090a", "html_url": "https://github.com/rust-lang/rust/commit/06eb5a6645ff9faf8fbe553e73efaae00c70090a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06eb5a6645ff9faf8fbe553e73efaae00c70090a/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3801c0594ce4aa5c59d7998e7b56766a2a2ef338", "url": "https://api.github.com/repos/rust-lang/rust/commits/3801c0594ce4aa5c59d7998e7b56766a2a2ef338", "html_url": "https://github.com/rust-lang/rust/commit/3801c0594ce4aa5c59d7998e7b56766a2a2ef338"}], "stats": {"total": 367, "additions": 341, "deletions": 26}, "files": [{"sha": "0fa47d809994736a2f839fc0fe74a47c9369168a", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/06eb5a6645ff9faf8fbe553e73efaae00c70090a/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06eb5a6645ff9faf8fbe553e73efaae00c70090a/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=06eb5a6645ff9faf8fbe553e73efaae00c70090a", "patch": "@@ -27,7 +27,8 @@ use syntax_pos::Span;\n use std::fmt;\n use std::iter;\n \n-use transform::{add_call_guards, no_landing_pads, simplify};\n+use transform::{add_moves_for_packed_drops, add_call_guards};\n+use transform::{no_landing_pads, simplify};\n use util::elaborate_drops::{self, DropElaborator, DropStyle, DropFlagMode};\n use util::patch::MirPatch;\n \n@@ -114,6 +115,8 @@ fn make_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         }\n     };\n     debug!(\"make_shim({:?}) = untransformed {:?}\", instance, result);\n+    add_moves_for_packed_drops::add_moves_for_packed_drops(\n+        tcx, &mut result, instance.def_id());\n     no_landing_pads::no_landing_pads(tcx, &mut result);\n     simplify::simplify_cfg(&mut result);\n     add_call_guards::CriticalCallEdges.add_call_guards(&mut result);"}, {"sha": "297bc76d472f50a87060f0c104173339986fb2f6", "filename": "src/librustc_mir/transform/add_moves_for_packed_drops.rs", "status": "added", "additions": 141, "deletions": 0, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/06eb5a6645ff9faf8fbe553e73efaae00c70090a/src%2Flibrustc_mir%2Ftransform%2Fadd_moves_for_packed_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06eb5a6645ff9faf8fbe553e73efaae00c70090a/src%2Flibrustc_mir%2Ftransform%2Fadd_moves_for_packed_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_moves_for_packed_drops.rs?ref=06eb5a6645ff9faf8fbe553e73efaae00c70090a", "patch": "@@ -0,0 +1,141 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use rustc::hir::def_id::DefId;\n+use rustc::mir::*;\n+use rustc::ty::TyCtxt;\n+\n+use transform::{MirPass, MirSource};\n+use util::patch::MirPatch;\n+use util;\n+\n+// This pass moves values being dropped that are within a packed\n+// struct to a separate local before dropping them, to ensure that\n+// they are dropped from an aligned address.\n+//\n+// For example, if we have something like\n+// ```Rust\n+//     #[repr(packed)]\n+//     struct Foo {\n+//         dealign: u8,\n+//         data: Vec<u8>\n+//     }\n+//\n+//     let foo = ...;\n+// ```\n+//\n+// We want to call `drop_in_place::<Vec<u8>>` on `data` from an aligned\n+// address. This means we can't simply drop `foo.data` directly, because\n+// its address is not aligned.\n+//\n+// Instead, we move `foo.data` to a local and drop that:\n+// ```\n+//     storage.live(drop_temp)\n+//     drop_temp = foo.data;\n+//     drop(drop_temp) -> next\n+// next:\n+//     storage.dead(drop_temp)\n+// ```\n+//\n+// The storage instructions are required to avoid stack space\n+// blowup.\n+\n+pub struct AddMovesForPackedDrops;\n+\n+impl MirPass for AddMovesForPackedDrops {\n+    fn run_pass<'a, 'tcx>(&self,\n+                          tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                          src: MirSource,\n+                          mir: &mut Mir<'tcx>)\n+    {\n+        debug!(\"add_moves_for_packed_drops({:?} @ {:?})\", src, mir.span);\n+        add_moves_for_packed_drops(tcx, mir, src.def_id);\n+    }\n+}\n+\n+pub fn add_moves_for_packed_drops<'a, 'tcx>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    mir: &mut Mir<'tcx>,\n+    def_id: DefId)\n+{\n+    let patch = add_moves_for_packed_drops_patch(tcx, mir, def_id);\n+    patch.apply(mir);\n+}\n+\n+fn add_moves_for_packed_drops_patch<'a, 'tcx>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    mir: &Mir<'tcx>,\n+    def_id: DefId)\n+    -> MirPatch<'tcx>\n+{\n+    let mut patch = MirPatch::new(mir);\n+    let param_env = tcx.param_env(def_id);\n+\n+    for (bb, data) in mir.basic_blocks().iter_enumerated() {\n+        let loc = Location { block: bb, statement_index: data.statements.len() };\n+        let terminator = data.terminator();\n+\n+        match terminator.kind {\n+            TerminatorKind::Drop { ref location, .. }\n+                if util::is_disaligned(tcx, mir, param_env, location) =>\n+            {\n+                add_move_for_packed_drop(tcx, mir, &mut patch, terminator,\n+                                         loc, data.is_cleanup);\n+            }\n+            TerminatorKind::DropAndReplace { .. } => {\n+                span_bug!(terminator.source_info.span,\n+                          \"replace in AddMovesForPackedDrops\");\n+            }\n+            _ => {}\n+        }\n+    }\n+\n+    patch\n+}\n+\n+fn add_move_for_packed_drop<'a, 'tcx>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    mir: &Mir<'tcx>,\n+    patch: &mut MirPatch<'tcx>,\n+    terminator: &Terminator<'tcx>,\n+    loc: Location,\n+    is_cleanup: bool)\n+{\n+    debug!(\"add_move_for_packed_drop({:?} @ {:?})\", terminator, loc);\n+    let (location, target, unwind) = match terminator.kind {\n+        TerminatorKind::Drop { ref location, target, unwind } =>\n+            (location, target, unwind),\n+        _ => unreachable!()\n+    };\n+\n+    let source_info = terminator.source_info;\n+    let ty = location.ty(mir, tcx).to_ty(tcx);\n+    let temp = patch.new_temp(ty, terminator.source_info.span);\n+\n+    let storage_dead_block = patch.new_block(BasicBlockData {\n+        statements: vec![Statement {\n+            source_info, kind: StatementKind::StorageDead(temp)\n+        }],\n+        terminator: Some(Terminator {\n+            source_info, kind: TerminatorKind::Goto { target }\n+        }),\n+        is_cleanup\n+    });\n+\n+    patch.add_statement(\n+        loc, StatementKind::StorageLive(temp));\n+    patch.add_assign(loc, Lvalue::Local(temp),\n+                     Rvalue::Use(Operand::Consume(location.clone())));\n+    patch.patch_terminator(loc.block, TerminatorKind::Drop {\n+        location: Lvalue::Local(temp),\n+        target: storage_dead_block,\n+        unwind\n+    });\n+}"}, {"sha": "9cadc04dc0a9bdcb2807411a5834e6cf2f07a2c9", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 4, "deletions": 25, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/06eb5a6645ff9faf8fbe553e73efaae00c70090a/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06eb5a6645ff9faf8fbe553e73efaae00c70090a/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=06eb5a6645ff9faf8fbe553e73efaae00c70090a", "patch": "@@ -12,7 +12,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::indexed_vec::IndexVec;\n \n use rustc::ty::maps::Providers;\n-use rustc::ty::{self, Ty, TyCtxt};\n+use rustc::ty::{self, TyCtxt};\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc::lint::builtin::{SAFE_EXTERN_STATICS, UNUSED_UNSAFE};\n@@ -22,16 +22,13 @@ use rustc::mir::visit::{LvalueContext, Visitor};\n use syntax::ast;\n \n use std::rc::Rc;\n-\n+use util;\n \n pub struct UnsafetyChecker<'a, 'tcx: 'a> {\n     mir: &'a Mir<'tcx>,\n     visibility_scope_info: &'a IndexVec<VisibilityScope, VisibilityScopeInfo>,\n     violations: Vec<UnsafetyViolation>,\n     source_info: SourceInfo,\n-    // true if an a part of this *memory block* of this expression\n-    // is being borrowed, used for repr(packed) checking.\n-    need_check_packed: bool,\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     used_unsafe: FxHashSet<ast::NodeId>,\n@@ -53,7 +50,6 @@ impl<'a, 'gcx, 'tcx> UnsafetyChecker<'a, 'tcx> {\n             },\n             tcx,\n             param_env,\n-            need_check_packed: false,\n             used_unsafe: FxHashSet(),\n             inherited_blocks: vec![],\n         }\n@@ -142,11 +138,9 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                     lvalue: &Lvalue<'tcx>,\n                     context: LvalueContext<'tcx>,\n                     location: Location) {\n-        let old_need_check_packed = self.need_check_packed;\n         if let LvalueContext::Borrow { .. } = context {\n-            let ty = lvalue.ty(self.mir, self.tcx).to_ty(self.tcx);\n-            if !self.has_align_1(ty) {\n-                self.need_check_packed = true;\n+            if util::is_disaligned(self.tcx, self.mir, self.param_env, lvalue) {\n+                self.require_unsafe(\"borrow of packed field\")\n             }\n         }\n \n@@ -163,9 +157,6 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                         self.source_info = self.mir.local_decls[local].source_info;\n                     }\n                 }\n-                if let &ProjectionElem::Deref = elem {\n-                    self.need_check_packed = false;\n-                }\n                 let base_ty = base.ty(self.mir, self.tcx).to_ty(self.tcx);\n                 match base_ty.sty {\n                     ty::TyRawPtr(..) => {\n@@ -194,9 +185,6 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                                 self.require_unsafe(\"access to union field\")\n                             }\n                         }\n-                        if adt.repr.packed() && self.need_check_packed {\n-                            self.require_unsafe(\"borrow of packed field\")\n-                        }\n                     }\n                     _ => {}\n                 }\n@@ -221,19 +209,10 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n             }\n         };\n         self.super_lvalue(lvalue, context, location);\n-        self.need_check_packed = old_need_check_packed;\n     }\n }\n \n impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n-\n-    fn has_align_1(&self, ty: Ty<'tcx>) -> bool {\n-        self.tcx.at(self.source_info.span)\n-            .layout_raw(self.param_env.and(ty))\n-            .map(|layout| layout.align.abi() == 1)\n-            .unwrap_or(false)\n-    }\n-\n     fn require_unsafe(&mut self,\n                       description: &'static str)\n     {"}, {"sha": "418d3d220581e1db447f816c9625d7185bb6352f", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/06eb5a6645ff9faf8fbe553e73efaae00c70090a/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06eb5a6645ff9faf8fbe553e73efaae00c70090a/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=06eb5a6645ff9faf8fbe553e73efaae00c70090a", "patch": "@@ -23,6 +23,7 @@ use syntax::ast;\n use syntax_pos::Span;\n \n pub mod add_validation;\n+pub mod add_moves_for_packed_drops;\n pub mod clean_end_regions;\n pub mod check_unsafety;\n pub mod simplify_branches;\n@@ -236,7 +237,12 @@ fn optimized_mir<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx\n         // an AllCallEdges pass right before it.\n         add_call_guards::AllCallEdges,\n         add_validation::AddValidation,\n+        // AddMovesForPackedDrops needs to run after drop\n+        // elaboration.\n+        add_moves_for_packed_drops::AddMovesForPackedDrops,\n+\n         simplify::SimplifyCfg::new(\"elaborate-drops\"),\n+\n         // No lifetime analysis based on borrowing can be done from here on out.\n \n         // From here on out, regions are gone."}, {"sha": "afda6e4031c2bae8e102453f45e2665f06d87f18", "filename": "src/librustc_mir/util/alignment.rs", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/06eb5a6645ff9faf8fbe553e73efaae00c70090a/src%2Flibrustc_mir%2Futil%2Falignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06eb5a6645ff9faf8fbe553e73efaae00c70090a/src%2Flibrustc_mir%2Futil%2Falignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Falignment.rs?ref=06eb5a6645ff9faf8fbe553e73efaae00c70090a", "patch": "@@ -0,0 +1,74 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+use rustc::ty::{self, TyCtxt};\n+use rustc::mir::*;\n+\n+/// Return `true` if this lvalue is allowed to be less aligned\n+/// than its containing struct (because it is within a packed\n+/// struct).\n+pub fn is_disaligned<'a, 'tcx, L>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                  local_decls: &L,\n+                                  param_env: ty::ParamEnv<'tcx>,\n+                                  lvalue: &Lvalue<'tcx>)\n+                                  -> bool\n+    where L: HasLocalDecls<'tcx>\n+{\n+    debug!(\"is_disaligned({:?})\", lvalue);\n+    if !is_within_packed(tcx, local_decls, lvalue) {\n+        debug!(\"is_disaligned({:?}) - not within packed\", lvalue);\n+        return false\n+    }\n+\n+    let ty = lvalue.ty(local_decls, tcx).to_ty(tcx);\n+    match tcx.layout_raw(param_env.and(ty)) {\n+        Ok(layout) if layout.align.abi() == 1 => {\n+            // if the alignment is 1, the type can't be further\n+            // disaligned.\n+            debug!(\"is_disaligned({:?}) - align = 1\", lvalue);\n+            false\n+        }\n+        _ => {\n+            debug!(\"is_disaligned({:?}) - true\", lvalue);\n+            true\n+        }\n+    }\n+}\n+\n+fn is_within_packed<'a, 'tcx, L>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                 local_decls: &L,\n+                                 lvalue: &Lvalue<'tcx>)\n+                                 -> bool\n+    where L: HasLocalDecls<'tcx>\n+{\n+    let mut lvalue = lvalue;\n+    while let &Lvalue::Projection(box Projection {\n+        ref base, ref elem\n+    }) = lvalue {\n+        match *elem {\n+            // encountered a Deref, which is ABI-aligned\n+            ProjectionElem::Deref => break,\n+            ProjectionElem::Field(..) => {\n+                let ty = base.ty(local_decls, tcx).to_ty(tcx);\n+                match ty.sty {\n+                    ty::TyAdt(def, _) if def.repr.packed() => {\n+                        return true\n+                    }\n+                    _ => {}\n+                }\n+            }\n+            _ => {}\n+        }\n+        lvalue = base;\n+    }\n+\n+    false\n+}"}, {"sha": "feea0e2880974b492c3f36e1362e578db3911a2f", "filename": "src/librustc_mir/util/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06eb5a6645ff9faf8fbe553e73efaae00c70090a/src%2Flibrustc_mir%2Futil%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06eb5a6645ff9faf8fbe553e73efaae00c70090a/src%2Flibrustc_mir%2Futil%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fmod.rs?ref=06eb5a6645ff9faf8fbe553e73efaae00c70090a", "patch": "@@ -13,10 +13,12 @@ pub mod elaborate_drops;\n pub mod def_use;\n pub mod patch;\n \n+mod alignment;\n mod graphviz;\n mod pretty;\n pub mod liveness;\n \n+pub use self::alignment::is_disaligned;\n pub use self::pretty::{dump_enabled, dump_mir, write_mir_pretty, PassWhere};\n pub use self::graphviz::{write_mir_graphviz};\n pub use self::graphviz::write_node_label as write_graphviz_node_label;"}, {"sha": "07a943976c3b8923de5e6ac713e392308f9454eb", "filename": "src/test/mir-opt/packed-struct-drop-aligned.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/06eb5a6645ff9faf8fbe553e73efaae00c70090a/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06eb5a6645ff9faf8fbe553e73efaae00c70090a/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned.rs?ref=06eb5a6645ff9faf8fbe553e73efaae00c70090a", "patch": "@@ -0,0 +1,68 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let mut x = Packed(Aligned(Droppy(0)));\n+    x.0 = Aligned(Droppy(0));\n+}\n+\n+struct Aligned(Droppy);\n+#[repr(packed)]\n+struct Packed(Aligned);\n+\n+struct Droppy(usize);\n+impl Drop for Droppy {\n+    fn drop(&mut self) {}\n+}\n+\n+// END RUST SOURCE\n+// START rustc.main.EraseRegions.before.mir\n+// fn main() -> () {\n+//     let mut _0: ();\n+//     scope 1 {\n+//         let mut _1: Packed;\n+//     }\n+//     scope 2 {\n+//     }\n+//     let mut _2: Aligned;\n+//     let mut _3: Droppy;\n+//     let mut _4: Aligned;\n+//     let mut _5: Droppy;\n+//     let mut _6: Aligned;\n+//\n+//     bb0: {\n+//         StorageLive(_1);\n+//         ...\n+//         _1 = Packed::{{constructor}}(_2,);\n+//         ...\n+//         StorageLive(_6);\n+//         _6 = (_1.0: Aligned);\n+//         drop(_6) -> [return: bb4, unwind: bb3];\n+//     }\n+//     bb1: {\n+//         resume;\n+//     }\n+//     bb2: {\n+//         StorageDead(_1);\n+//         return;\n+//     }\n+//     bb3: {\n+//         (_1.0: Aligned) = _4;\n+//         drop(_1) -> bb1;\n+//     }\n+//     bb4: {\n+//         StorageDead(_6);\n+//         (_1.0: Aligned) = _4;\n+//         StorageDead(_4);\n+//         _0 = ();\n+//         drop(_1) -> bb2;\n+//     }\n+// }\n+// END rustc.main.EraseRegions.before.mir"}, {"sha": "bbe31a65e86a2cbfdd91ca5a18be71f6d8813b10", "filename": "src/test/run-pass/packed-struct-drop-aligned.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/06eb5a6645ff9faf8fbe553e73efaae00c70090a/src%2Ftest%2Frun-pass%2Fpacked-struct-drop-aligned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06eb5a6645ff9faf8fbe553e73efaae00c70090a/src%2Ftest%2Frun-pass%2Fpacked-struct-drop-aligned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpacked-struct-drop-aligned.rs?ref=06eb5a6645ff9faf8fbe553e73efaae00c70090a", "patch": "@@ -0,0 +1,42 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::cell::Cell;\n+use std::mem;\n+\n+struct Aligned<'a> {\n+    drop_count: &'a Cell<usize>\n+}\n+\n+#[inline(never)]\n+fn check_align(ptr: *const Aligned) {\n+    assert_eq!(ptr as usize % mem::align_of::<Aligned>(),\n+               0);\n+}\n+\n+impl<'a> Drop for Aligned<'a> {\n+    fn drop(&mut self) {\n+        check_align(self);\n+        self.drop_count.set(self.drop_count.get() + 1);\n+    }\n+}\n+\n+#[repr(packed)]\n+struct Packed<'a>(u8, Aligned<'a>);\n+\n+fn main() {\n+    let drop_count = &Cell::new(0);\n+    {\n+        let mut p = Packed(0, Aligned { drop_count });\n+        p.1 = Aligned { drop_count };\n+        assert_eq!(drop_count.get(), 1);\n+    }\n+    assert_eq!(drop_count.get(), 2);\n+}"}]}