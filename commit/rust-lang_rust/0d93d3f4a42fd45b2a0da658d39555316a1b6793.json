{"sha": "0d93d3f4a42fd45b2a0da658d39555316a1b6793", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkOTNkM2Y0YTQyZmQ0NWIyYTBkYTY1OGQzOTU1NTMxNmExYjY3OTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-31T20:58:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-31T20:58:56Z"}, "message": "Auto merge of #72831 - Dylan-DPC:rollup-6rxjwt9, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #72691 (Fix escape key handling)\n - #72807 (Avoid setting wrong obligation cause span of associated type mismatch)\n - #72812 (Miri tests: skip parts of test_char_range)\n - #72829 (Clarify terms in doc comments)\n - #72830 (Fix release notes for niche initialization change)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "dd386e77275b945dfb439f7a3d19a1730c1a7316", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd386e77275b945dfb439f7a3d19a1730c1a7316"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d93d3f4a42fd45b2a0da658d39555316a1b6793", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d93d3f4a42fd45b2a0da658d39555316a1b6793", "html_url": "https://github.com/rust-lang/rust/commit/0d93d3f4a42fd45b2a0da658d39555316a1b6793", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d93d3f4a42fd45b2a0da658d39555316a1b6793/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fd2f06e99a985dd896684cb2c9f8c7090eca1ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fd2f06e99a985dd896684cb2c9f8c7090eca1ab", "html_url": "https://github.com/rust-lang/rust/commit/5fd2f06e99a985dd896684cb2c9f8c7090eca1ab"}, {"sha": "76e0ecca2b7ec2913e4980050f4659a51f231171", "url": "https://api.github.com/repos/rust-lang/rust/commits/76e0ecca2b7ec2913e4980050f4659a51f231171", "html_url": "https://github.com/rust-lang/rust/commit/76e0ecca2b7ec2913e4980050f4659a51f231171"}], "stats": {"total": 91, "additions": 62, "deletions": 29}, "files": [{"sha": "100993bb75cec34633d1ad83ca35b6d238bef673", "filename": "RELEASES.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d93d3f4a42fd45b2a0da658d39555316a1b6793/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/0d93d3f4a42fd45b2a0da658d39555316a1b6793/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=0d93d3f4a42fd45b2a0da658d39555316a1b6793", "patch": "@@ -100,8 +100,8 @@ Compatibility Notes\n   source file rather than the previous format of `<NAME macros>`.][70969]\n   **Note:** this may not point a file that actually exists on the user's system.\n - [The minimum required external LLVM version has been bumped to LLVM 8.][71147]\n-- [`mem::{zeroed, uninitialised, MaybeUninit}` will now panic when used with types\n-  that do not allow zero initialization such as `NonZeroU8`.][66059] This was\n+- [`mem::{zeroed, uninitialised}` will now panic when used with types that do\n+  not allow zero initialization such as `NonZeroU8`.][66059] This was\n   previously a warning.\n - [In 1.45.0 (the next release) converting a `f64` to `u32` using the `as`\n   operator has been defined as a saturating operation.][71269] This was previously"}, {"sha": "ff333f77334f762a2874afc7ed771a48a1e69281", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d93d3f4a42fd45b2a0da658d39555316a1b6793/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d93d3f4a42fd45b2a0da658d39555316a1b6793/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=0d93d3f4a42fd45b2a0da658d39555316a1b6793", "patch": "@@ -2173,7 +2173,7 @@ impl<T> [T] {\n     ///\n     /// The length of `src` must be the same as `self`.\n     ///\n-    /// If `src` implements `Copy`, it can be more performant to use\n+    /// If `T` implements `Copy`, it can be more performant to use\n     /// [`copy_from_slice`].\n     ///\n     /// # Panics\n@@ -2244,7 +2244,7 @@ impl<T> [T] {\n     ///\n     /// The length of `src` must be the same as `self`.\n     ///\n-    /// If `src` does not implement `Copy`, use [`clone_from_slice`].\n+    /// If `T` does not implement `Copy`, use [`clone_from_slice`].\n     ///\n     /// # Panics\n     ///"}, {"sha": "3b854b56c320dcc7007a8c00edfb6993a12b2577", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0d93d3f4a42fd45b2a0da658d39555316a1b6793/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d93d3f4a42fd45b2a0da658d39555316a1b6793/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=0d93d3f4a42fd45b2a0da658d39555316a1b6793", "patch": "@@ -1959,8 +1959,11 @@ fn test_range() {\n #[test]\n fn test_char_range() {\n     use std::char;\n-    assert!(('\\0'..=char::MAX).eq((0..=char::MAX as u32).filter_map(char::from_u32)));\n-    assert!(('\\0'..=char::MAX).rev().eq((0..=char::MAX as u32).filter_map(char::from_u32).rev()));\n+    // Miri is too slow\n+    let from = if cfg!(miri) { char::from_u32(0xD800 - 10).unwrap() } else { '\\0' };\n+    let to = if cfg!(miri) { char::from_u32(0xDFFF + 10).unwrap() } else { char::MAX };\n+    assert!((from..=to).eq((from as u32..=to as u32).filter_map(char::from_u32)));\n+    assert!((from..=to).rev().eq((from as u32..=to as u32).filter_map(char::from_u32).rev()));\n \n     assert_eq!(('\\u{D7FF}'..='\\u{E000}').count(), 2);\n     assert_eq!(('\\u{D7FF}'..='\\u{E000}').size_hint(), (2, Some(2)));"}, {"sha": "39c7528a6324032977d919fbd7f3ecbf1109802b", "filename": "src/librustc_trait_selection/traits/wf.rs", "status": "modified", "additions": 12, "deletions": 19, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/0d93d3f4a42fd45b2a0da658d39555316a1b6793/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d93d3f4a42fd45b2a0da658d39555316a1b6793/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs?ref=0d93d3f4a42fd45b2a0da658d39555316a1b6793", "patch": "@@ -172,25 +172,18 @@ fn extend_cause_with_original_assoc_item_obligation<'tcx>(\n         };\n     match pred.kind() {\n         ty::PredicateKind::Projection(proj) => {\n-            // The obligation comes not from the current `impl` nor the `trait` being\n-            // implemented, but rather from a \"second order\" obligation, like in\n-            // `src/test/ui/associated-types/point-at-type-on-obligation-failure.rs`.\n-            let trait_assoc_item = tcx.associated_item(proj.projection_def_id());\n-            if let Some(impl_item_span) =\n-                items.iter().find(|item| item.ident == trait_assoc_item.ident).map(fix_span)\n-            {\n-                cause.span = impl_item_span;\n-            } else {\n-                let kind = &proj.ty().skip_binder().kind;\n-                if let ty::Projection(projection_ty) = kind {\n-                    // This happens when an associated type has a projection coming from another\n-                    // associated type. See `traits-assoc-type-in-supertrait-bad.rs`.\n-                    let trait_assoc_item = tcx.associated_item(projection_ty.item_def_id);\n-                    if let Some(impl_item_span) =\n-                        items.iter().find(|item| item.ident == trait_assoc_item.ident).map(fix_span)\n-                    {\n-                        cause.span = impl_item_span;\n-                    }\n+            // The obligation comes not from the current `impl` nor the `trait` being implemented,\n+            // but rather from a \"second order\" obligation, where an associated type has a\n+            // projection coming from another associated type. See\n+            // `src/test/ui/associated-types/point-at-type-on-obligation-failure.rs` and\n+            // `traits-assoc-type-in-supertrait-bad.rs`.\n+            let kind = &proj.ty().skip_binder().kind;\n+            if let ty::Projection(projection_ty) = kind {\n+                let trait_assoc_item = tcx.associated_item(projection_ty.item_def_id);\n+                if let Some(impl_item_span) =\n+                    items.iter().find(|item| item.ident == trait_assoc_item.ident).map(fix_span)\n+                {\n+                    cause.span = impl_item_span;\n                 }\n             }\n         }"}, {"sha": "ac5a2f96b26c6cfc6cfb4243a8dd433ea3e5d904", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0d93d3f4a42fd45b2a0da658d39555316a1b6793/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/0d93d3f4a42fd45b2a0da658d39555316a1b6793/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=0d93d3f4a42fd45b2a0da658d39555316a1b6793", "patch": "@@ -91,6 +91,7 @@ function defocusSearchBar() {\n \n     var disableShortcuts = getCurrentValue(\"rustdoc-disable-shortcuts\") === \"true\";\n     var search_input = getSearchInput();\n+    var searchTimeout = null;\n \n     // On the search screen, so you remain on the last tab you opened.\n     //\n@@ -101,6 +102,13 @@ function defocusSearchBar() {\n \n     var titleBeforeSearch = document.title;\n \n+    function clearInputTimeout() {\n+        if (searchTimeout !== null) {\n+            clearTimeout(searchTimeout);\n+            searchTimeout = null;\n+        }\n+    }\n+\n     function getPageId() {\n         var id = document.location.href.split(\"#\")[1];\n         if (id) {\n@@ -355,6 +363,7 @@ function defocusSearchBar() {\n         if (hasClass(help, \"hidden\") === false) {\n             displayHelp(false, ev, help);\n         } else if (hasClass(search, \"hidden\") === false) {\n+            clearInputTimeout();\n             ev.preventDefault();\n             hideSearchResults(search);\n             document.title = titleBeforeSearch;\n@@ -1810,9 +1819,8 @@ function defocusSearchBar() {\n         }\n \n         function startSearch() {\n-            var searchTimeout;\n             var callback = function() {\n-                clearTimeout(searchTimeout);\n+                clearInputTimeout();\n                 if (search_input.value.length === 0) {\n                     if (browserSupportsHistoryApi()) {\n                         history.replaceState(\"\", window.currentCrate + \" - Rust\", \"?search=\");\n@@ -1826,7 +1834,7 @@ function defocusSearchBar() {\n             search_input.oninput = callback;\n             document.getElementsByClassName(\"search-form\")[0].onsubmit = function(e) {\n                 e.preventDefault();\n-                clearTimeout(searchTimeout);\n+                clearInputTimeout();\n                 search();\n             };\n             search_input.onchange = function(e) {\n@@ -1835,7 +1843,7 @@ function defocusSearchBar() {\n                     return;\n                 }\n                 // Do NOT e.preventDefault() here. It will prevent pasting.\n-                clearTimeout(searchTimeout);\n+                clearInputTimeout();\n                 // zero-timeout necessary here because at the time of event handler execution the\n                 // pasted content is not in the input field yet. Shouldn\u2019t make any difference for\n                 // change, though."}, {"sha": "ae63781d568a1bc8d669d244e05717a84933398e", "filename": "src/test/ui/associated-types/issue-72806.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0d93d3f4a42fd45b2a0da658d39555316a1b6793/src%2Ftest%2Fui%2Fassociated-types%2Fissue-72806.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d93d3f4a42fd45b2a0da658d39555316a1b6793/src%2Ftest%2Fui%2Fassociated-types%2Fissue-72806.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-72806.rs?ref=0d93d3f4a42fd45b2a0da658d39555316a1b6793", "patch": "@@ -0,0 +1,20 @@\n+trait Bar {\n+    type Ok;\n+    type Sibling: Bar2<Ok=char>;\n+}\n+trait Bar2 {\n+    type Ok;\n+}\n+\n+struct Foo;\n+struct Foo2;\n+\n+impl Bar for Foo {  //~ ERROR type mismatch resolving `<Foo2 as Bar2>::Ok == char`\n+    type Ok = ();\n+    type Sibling = Foo2;\n+}\n+impl Bar2 for Foo2 {\n+    type Ok = u32;\n+}\n+\n+fn main() {}"}, {"sha": "03a6565848dc3524717f6de4112eaf1fc5d4e78e", "filename": "src/test/ui/associated-types/issue-72806.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0d93d3f4a42fd45b2a0da658d39555316a1b6793/src%2Ftest%2Fui%2Fassociated-types%2Fissue-72806.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d93d3f4a42fd45b2a0da658d39555316a1b6793/src%2Ftest%2Fui%2Fassociated-types%2Fissue-72806.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-72806.stderr?ref=0d93d3f4a42fd45b2a0da658d39555316a1b6793", "patch": "@@ -0,0 +1,9 @@\n+error[E0271]: type mismatch resolving `<Foo2 as Bar2>::Ok == char`\n+  --> $DIR/issue-72806.rs:12:6\n+   |\n+LL | impl Bar for Foo {\n+   |      ^^^ expected `u32`, found `char`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0271`."}]}