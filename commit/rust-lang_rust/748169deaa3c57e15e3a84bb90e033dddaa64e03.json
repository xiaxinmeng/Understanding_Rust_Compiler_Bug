{"sha": "748169deaa3c57e15e3a84bb90e033dddaa64e03", "node_id": "C_kwDOAAsO6NoAKDc0ODE2OWRlYWEzYzU3ZTE1ZTNhODRiYjkwZTAzM2RkZGFhNjRlMDM", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-10-10T19:51:24Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-10-24T20:05:39Z"}, "message": "Don't fire the lint if there is a type annotation\n\nSometimes type annotations are needed for type inferrence to work,\nor because of coercions. We don't know this, and we also don't\nwant users to possibly repeat the entire pattern.", "tree": {"sha": "264cdc281a8d1f03a46545d5e69ea9789dff2b8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/264cdc281a8d1f03a46545d5e69ea9789dff2b8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/748169deaa3c57e15e3a84bb90e033dddaa64e03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/748169deaa3c57e15e3a84bb90e033dddaa64e03", "html_url": "https://github.com/rust-lang/rust/commit/748169deaa3c57e15e3a84bb90e033dddaa64e03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/748169deaa3c57e15e3a84bb90e033dddaa64e03/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01e651f2feea84ce0b4551a71101f7b29bcc65cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/01e651f2feea84ce0b4551a71101f7b29bcc65cb", "html_url": "https://github.com/rust-lang/rust/commit/01e651f2feea84ce0b4551a71101f7b29bcc65cb"}], "stats": {"total": 5, "additions": 5, "deletions": 0}, "files": [{"sha": "521d02db80fb827d86d81107871fa025a249f430", "filename": "clippy_lints/src/manual_let_else.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/748169deaa3c57e15e3a84bb90e033dddaa64e03/clippy_lints%2Fsrc%2Fmanual_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/748169deaa3c57e15e3a84bb90e033dddaa64e03/clippy_lints%2Fsrc%2Fmanual_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_let_else.rs?ref=748169deaa3c57e15e3a84bb90e033dddaa64e03", "patch": "@@ -74,6 +74,7 @@ impl<'tcx> LateLintPass<'tcx> for ManualLetElse {\n             if let StmtKind::Local(local) = stmt.kind;\n             if let Some(init) = local.init;\n             if local.els.is_none();\n+            if local.ty.is_none();\n             if init.span.ctxt() == stmt.span.ctxt();\n             if let Some(if_let_or_match) = IfLetOrMatch::parse(cx, init);\n             then {"}, {"sha": "9046c0affb591bb54b387b34346f68de50dadeb9", "filename": "tests/ui/manual_let_else.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/748169deaa3c57e15e3a84bb90e033dddaa64e03/tests%2Fui%2Fmanual_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/748169deaa3c57e15e3a84bb90e033dddaa64e03/tests%2Fui%2Fmanual_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_let_else.rs?ref=748169deaa3c57e15e3a84bb90e033dddaa64e03", "patch": "@@ -197,4 +197,8 @@ fn not_fire() {\n \n     // Already a let-else\n     let Some(a) = (if let Some(b) = Some(Some(())) { b } else { return }) else { panic!() };\n+\n+    // If a type annotation is present, don't lint as\n+    // expressing the type might be too hard\n+    let v: () = if let Some(v_some) = g() { v_some } else { panic!() };\n }"}]}