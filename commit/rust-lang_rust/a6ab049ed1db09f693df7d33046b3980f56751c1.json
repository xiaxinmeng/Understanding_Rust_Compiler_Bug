{"sha": "a6ab049ed1db09f693df7d33046b3980f56751c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2YWIwNDllZDFkYjA5ZjY5M2RmN2QzMzA0NmIzOTgwZjU2NzUxYzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-05T03:56:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-05T03:56:34Z"}, "message": "Auto merge of #41762 - frewsxcv:rollup, r=frewsxcv\n\nRollup of 4 pull requests\n\n- Successful merges: #41741, #41746, #41749, #41754\n- Failed merges:", "tree": {"sha": "50a28372fab8299ce5a03cb645aa17f54bc6b7dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50a28372fab8299ce5a03cb645aa17f54bc6b7dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6ab049ed1db09f693df7d33046b3980f56751c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6ab049ed1db09f693df7d33046b3980f56751c1", "html_url": "https://github.com/rust-lang/rust/commit/a6ab049ed1db09f693df7d33046b3980f56751c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6ab049ed1db09f693df7d33046b3980f56751c1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50b98587180a44782b22cbde1f638b61193ef7a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/50b98587180a44782b22cbde1f638b61193ef7a3", "html_url": "https://github.com/rust-lang/rust/commit/50b98587180a44782b22cbde1f638b61193ef7a3"}, {"sha": "3cd7f37482ddf7c2b34f50cf157b55cc8ac4140e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3cd7f37482ddf7c2b34f50cf157b55cc8ac4140e", "html_url": "https://github.com/rust-lang/rust/commit/3cd7f37482ddf7c2b34f50cf157b55cc8ac4140e"}], "stats": {"total": 27, "additions": 9, "deletions": 18}, "files": [{"sha": "515f49d6f0bddc35aa41352a8675e3c8aa819572", "filename": "src/libcore/option.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a6ab049ed1db09f693df7d33046b3980f56751c1/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6ab049ed1db09f693df7d33046b3980f56751c1/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=a6ab049ed1db09f693df7d33046b3980f56751c1", "patch": "@@ -66,14 +66,14 @@\n //! not ([`None`]).\n //!\n //! ```\n-//! let optional: Option<Box<i32>> = None;\n-//! check_optional(&optional);\n+//! let optional = None;\n+//! check_optional(optional);\n //!\n-//! let optional: Option<Box<i32>> = Some(Box::new(9000));\n-//! check_optional(&optional);\n+//! let optional = Some(Box::new(9000));\n+//! check_optional(optional);\n //!\n-//! fn check_optional(optional: &Option<Box<i32>>) {\n-//!     match *optional {\n+//! fn check_optional(optional: Option<Box<i32>>) {\n+//!     match optional {\n //!         Some(ref p) => println!(\"has value {}\", p),\n //!         None => println!(\"has no value\"),\n //!     }"}, {"sha": "c782bea72f4b4b9fa181da5a64aabbfa2e47be18", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a6ab049ed1db09f693df7d33046b3980f56751c1/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6ab049ed1db09f693df7d33046b3980f56751c1/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=a6ab049ed1db09f693df7d33046b3980f56751c1", "patch": "@@ -482,14 +482,6 @@ pub struct GlobalCtxt<'tcx> {\n     /// about.\n     pub used_mut_nodes: RefCell<NodeSet>,\n \n-    /// The set of external nominal types whose implementations have been read.\n-    /// This is used for lazy resolution of methods.\n-    pub populated_external_types: RefCell<DefIdSet>,\n-\n-    /// The set of external primitive types whose implementations have been read.\n-    /// FIXME(arielb1): why is this separate from populated_external_types?\n-    pub populated_external_primitive_impls: RefCell<DefIdSet>,\n-\n     /// Maps any item's def-id to its stability index.\n     pub stability: RefCell<stability::Index<'tcx>>,\n \n@@ -767,8 +759,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             lang_items: lang_items,\n             used_unsafe: RefCell::new(NodeSet()),\n             used_mut_nodes: RefCell::new(NodeSet()),\n-            populated_external_types: RefCell::new(DefIdSet()),\n-            populated_external_primitive_impls: RefCell::new(DefIdSet()),\n             stability: RefCell::new(stability),\n             selection_cache: traits::SelectionCache::new(),\n             evaluation_cache: traits::EvaluationCache::new(),"}, {"sha": "8e7eaa77cd7098be059fa392fdc28599b9cfd21e", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a6ab049ed1db09f693df7d33046b3980f56751c1/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6ab049ed1db09f693df7d33046b3980f56751c1/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=a6ab049ed1db09f693df7d33046b3980f56751c1", "patch": "@@ -66,7 +66,7 @@\n //! let res = child.join();\n //! ```\n //!\n-//! The [`join`] method returns a [`Result`] containing [`Ok`] of the final\n+//! The [`join`] method returns a [`thread::Result`] containing [`Ok`] of the final\n //! value produced by the child thread, or [`Err`] of the value given to\n //! a call to [`panic!`] if the child panicked.\n //!\n@@ -159,6 +159,7 @@\n //! [`panic!`]: ../../std/macro.panic.html\n //! [`Builder`]: ../../std/thread/struct.Builder.html\n //! [`thread::current`]: ../../std/thread/fn.current.html\n+//! [`thread::Result`]: ../../std/thread/type.Result.html\n //! [`Thread`]: ../../std/thread/struct.Thread.html\n //! [`park`]: ../../std/thread/fn.park.html\n //! [`unpark`]: ../../std/thread/struct.Thread.html#method.unpark"}, {"sha": "7d2a1b3c4a4d21084689fc507f21aaa8c102b3b4", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6ab049ed1db09f693df7d33046b3980f56751c1/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6ab049ed1db09f693df7d33046b3980f56751c1/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=a6ab049ed1db09f693df7d33046b3980f56751c1", "patch": "@@ -73,7 +73,7 @@ fn mk_sp(lo: BytePos, hi: BytePos) -> Span {\n }\n \n impl<'a> StringReader<'a> {\n-    fn next_token(&mut self) -> TokenAndSpan where Self: Sized {\n+    fn next_token(&mut self) -> TokenAndSpan {\n         let res = self.try_next_token();\n         self.unwrap_or_abort(res)\n     }"}]}