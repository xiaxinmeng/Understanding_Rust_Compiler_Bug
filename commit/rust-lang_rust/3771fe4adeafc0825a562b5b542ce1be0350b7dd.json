{"sha": "3771fe4adeafc0825a562b5b542ce1be0350b7dd", "node_id": "C_kwDOAAsO6NoAKDM3NzFmZTRhZGVhZmMwODI1YTU2MmI1YjU0MmNlMWJlMDM1MGI3ZGQ", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2022-01-06T15:35:25Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2022-01-28T22:04:30Z"}, "message": "Factor out expr_path_res", "tree": {"sha": "5de38283c6d3306e34ed8882076060424865c21e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5de38283c6d3306e34ed8882076060424865c21e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3771fe4adeafc0825a562b5b542ce1be0350b7dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3771fe4adeafc0825a562b5b542ce1be0350b7dd", "html_url": "https://github.com/rust-lang/rust/commit/3771fe4adeafc0825a562b5b542ce1be0350b7dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3771fe4adeafc0825a562b5b542ce1be0350b7dd/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98c6381a387ac05e27c03ccfc64146bf4934f5c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/98c6381a387ac05e27c03ccfc64146bf4934f5c8", "html_url": "https://github.com/rust-lang/rust/commit/98c6381a387ac05e27c03ccfc64146bf4934f5c8"}], "stats": {"total": 35, "additions": 11, "deletions": 24}, "files": [{"sha": "ac82dd306a52879d1d96976dac46938d06abd974", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3771fe4adeafc0825a562b5b542ce1be0350b7dd/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3771fe4adeafc0825a562b5b542ce1be0350b7dd/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=3771fe4adeafc0825a562b5b542ce1be0350b7dd", "patch": "@@ -20,8 +20,8 @@ use rustc_span::symbol::sym;\n use clippy_utils::consts::{constant, Constant};\n use clippy_utils::sugg::Sugg;\n use clippy_utils::{\n-    expr_path_res, get_item_name, get_parent_expr, in_constant, is_diag_trait_item, is_integer_const, iter_input_pats,\n-    last_path_segment, match_any_def_paths, paths, unsext, SpanlessEq,\n+    get_item_name, get_parent_expr, in_constant, is_diag_trait_item, is_integer_const, iter_input_pats,\n+    last_path_segment, match_any_def_paths, path_def_id, paths, unsext, SpanlessEq,\n };\n \n declare_clippy_lint! {\n@@ -583,8 +583,7 @@ fn check_to_owned(cx: &LateContext<'_>, expr: &Expr<'_>, other: &Expr<'_>, left:\n             )\n         },\n         ExprKind::Call(path, [arg]) => {\n-            if expr_path_res(cx, path)\n-                .opt_def_id()\n+            if path_def_id(cx, path)\n                 .and_then(|id| match_any_def_paths(cx, id, &[&paths::FROM_STR_METHOD, &paths::FROM_FROM]))\n                 .is_some()\n             {"}, {"sha": "26717c0c0fdf6421e221ac30e4b9190b07a46340", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3771fe4adeafc0825a562b5b542ce1be0350b7dd/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3771fe4adeafc0825a562b5b542ce1be0350b7dd/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=3771fe4adeafc0825a562b5b542ce1be0350b7dd", "patch": "@@ -4,7 +4,8 @@ use clippy_utils::diagnostics::{span_lint, span_lint_and_sugg, span_lint_and_the\n use clippy_utils::source::snippet_opt;\n use clippy_utils::ty::expr_sig;\n use clippy_utils::{\n-    expr_path_res, get_expr_use_or_unification_node, is_lint_allowed, match_any_diagnostic_items, path_to_local, paths,\n+    expr_path_res, get_expr_use_or_unification_node, is_lint_allowed, is_lint_allowed, match_any_diagnostic_items,\n+    path_def_id, path_to_local, paths, paths,\n };\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n@@ -665,8 +666,8 @@ fn get_rptr_lm<'tcx>(ty: &'tcx hir::Ty<'tcx>) -> Option<(&'tcx Lifetime, Mutabil\n \n fn is_null_path(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     if let ExprKind::Call(pathexp, []) = expr.kind {\n-        expr_path_res(cx, pathexp).opt_def_id().map_or(false, |id| {\n-            match_any_diagnostic_items(cx, id, &[sym::ptr_null, sym::ptr_null_mut]).is_some()\n+        path_def_id(cx, pathexp).map_or(false, |id| {\n+            matches!(cx.tcx.get_diagnostic_name(id), Some(sym::ptr_null | sym::ptr_null_mut))\n         })\n     } else {\n         false"}, {"sha": "eeadc6d4ddaa139d1bbb2d04a355bc2434081e4b", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3771fe4adeafc0825a562b5b542ce1be0350b7dd/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3771fe4adeafc0825a562b5b542ce1be0350b7dd/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=3771fe4adeafc0825a562b5b542ce1be0350b7dd", "patch": "@@ -357,15 +357,6 @@ pub fn match_qpath(path: &QPath<'_>, segments: &[&str]) -> bool {\n     }\n }\n \n-/// If the expression is a path, resolve it. Otherwise, return `Res::Err`.\n-pub fn expr_path_res(cx: &LateContext<'_>, expr: &Expr<'_>) -> Res {\n-    if let ExprKind::Path(p) = &expr.kind {\n-        cx.qpath_res(p, expr.hir_id)\n-    } else {\n-        Res::Err\n-    }\n-}\n-\n /// Resolves the path to a `DefId` and checks if it matches the given path.\n pub fn is_qpath_def_path(cx: &LateContext<'_>, path: &QPath<'_>, hir_id: HirId, segments: &[&str]) -> bool {\n     cx.qpath_res(path, hir_id)\n@@ -377,17 +368,13 @@ pub fn is_qpath_def_path(cx: &LateContext<'_>, path: &QPath<'_>, hir_id: HirId,\n ///\n /// Please use `is_expr_diagnostic_item` if the target is a diagnostic item.\n pub fn is_expr_path_def_path(cx: &LateContext<'_>, expr: &Expr<'_>, segments: &[&str]) -> bool {\n-    expr_path_res(cx, expr)\n-        .opt_def_id()\n-        .map_or(false, |id| match_def_path(cx, id, segments))\n+    path_def_id(cx, expr).map_or(false, |id| match_def_path(cx, id, segments))\n }\n \n /// If the expression is a path, resolves it to a `DefId` and checks if it matches the given\n /// diagnostic item.\n pub fn is_expr_diagnostic_item(cx: &LateContext<'_>, expr: &Expr<'_>, diag_item: Symbol) -> bool {\n-    expr_path_res(cx, expr)\n-        .opt_def_id()\n-        .map_or(false, |id| cx.tcx.is_diagnostic_item(diag_item, id))\n+    path_def_id(cx, expr).map_or(false, |id| cx.tcx.is_diagnostic_item(diag_item, id))\n }\n \n /// THIS METHOD IS DEPRECATED and will eventually be removed since it does not match against the"}, {"sha": "aa3ea2d23da787de2724820dca214f22b1087b39", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3771fe4adeafc0825a562b5b542ce1be0350b7dd/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3771fe4adeafc0825a562b5b542ce1be0350b7dd/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=3771fe4adeafc0825a562b5b542ce1be0350b7dd", "patch": "@@ -20,7 +20,7 @@ use rustc_trait_selection::infer::InferCtxtExt;\n use rustc_trait_selection::traits::query::normalize::AtExt;\n use std::iter;\n \n-use crate::{expr_path_res, match_def_path, must_use_attr};\n+use crate::{match_def_path, must_use_attr, path_res};\n \n // Checks if the given type implements copy.\n pub fn is_copy<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n@@ -443,7 +443,7 @@ impl<'tcx> ExprFnSig<'tcx> {\n \n /// If the expression is function like, get the signature for it.\n pub fn expr_sig<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>) -> Option<ExprFnSig<'tcx>> {\n-    if let Res::Def(DefKind::Fn | DefKind::Ctor(_, CtorKind::Fn) | DefKind::AssocFn, id) = expr_path_res(cx, expr) {\n+    if let Res::Def(DefKind::Fn | DefKind::Ctor(_, CtorKind::Fn) | DefKind::AssocFn, id) = path_res(cx, expr) {\n         Some(ExprFnSig::Sig(cx.tcx.fn_sig(id)))\n     } else {\n         let ty = cx.typeck_results().expr_ty_adjusted(expr).peel_refs();"}]}