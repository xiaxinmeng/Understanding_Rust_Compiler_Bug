{"sha": "343976fe56d65aae4d4c6c4ac9d0ceb25b07c036", "node_id": "C_kwDOAAsO6NoAKDM0Mzk3NmZlNTZkNjVhYWU0ZDRjNmM0YWM5ZDBjZWIyNWIwN2MwMzY", "commit": {"author": {"name": "Ariel Davis", "email": "ariel.z.davis@icloud.com", "date": "2023-05-06T09:08:47Z"}, "committer": {"name": "Ariel Davis", "email": "ariel.z.davis@icloud.com", "date": "2023-05-06T09:08:47Z"}, "message": "Return None for too-large offset", "tree": {"sha": "e18ecdb7b70c603bbc5aaf99201cab06aba7db6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e18ecdb7b70c603bbc5aaf99201cab06aba7db6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/343976fe56d65aae4d4c6c4ac9d0ceb25b07c036", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/343976fe56d65aae4d4c6c4ac9d0ceb25b07c036", "html_url": "https://github.com/rust-lang/rust/commit/343976fe56d65aae4d4c6c4ac9d0ceb25b07c036", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/343976fe56d65aae4d4c6c4ac9d0ceb25b07c036/comments", "author": {"login": "azdavis", "id": 6496454, "node_id": "MDQ6VXNlcjY0OTY0NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6496454?v=4", "gravatar_id": "", "url": "https://api.github.com/users/azdavis", "html_url": "https://github.com/azdavis", "followers_url": "https://api.github.com/users/azdavis/followers", "following_url": "https://api.github.com/users/azdavis/following{/other_user}", "gists_url": "https://api.github.com/users/azdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/azdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/azdavis/subscriptions", "organizations_url": "https://api.github.com/users/azdavis/orgs", "repos_url": "https://api.github.com/users/azdavis/repos", "events_url": "https://api.github.com/users/azdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/azdavis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "azdavis", "id": 6496454, "node_id": "MDQ6VXNlcjY0OTY0NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6496454?v=4", "gravatar_id": "", "url": "https://api.github.com/users/azdavis", "html_url": "https://github.com/azdavis", "followers_url": "https://api.github.com/users/azdavis/followers", "following_url": "https://api.github.com/users/azdavis/following{/other_user}", "gists_url": "https://api.github.com/users/azdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/azdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/azdavis/subscriptions", "organizations_url": "https://api.github.com/users/azdavis/orgs", "repos_url": "https://api.github.com/users/azdavis/repos", "events_url": "https://api.github.com/users/azdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/azdavis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8a93306f0068adacc6fe2e811e261a5795f68e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8a93306f0068adacc6fe2e811e261a5795f68e8", "html_url": "https://github.com/rust-lang/rust/commit/e8a93306f0068adacc6fe2e811e261a5795f68e8"}], "stats": {"total": 10, "additions": 9, "deletions": 1}, "files": [{"sha": "6318cbde50bc31a03d63c34ae9146692da91b5a1", "filename": "lib/line-index/src/lib.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/343976fe56d65aae4d4c6c4ac9d0ceb25b07c036/lib%2Fline-index%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/343976fe56d65aae4d4c6c4ac9d0ceb25b07c036/lib%2Fline-index%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lib%2Fline-index%2Fsrc%2Flib.rs?ref=343976fe56d65aae4d4c6c4ac9d0ceb25b07c036", "patch": "@@ -84,6 +84,8 @@ impl WideChar {\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct LineIndex {\n     /// Offset the beginning of each line (except the first, which always has offset 0).\n+    ///\n+    /// Invariant: Always non-empty and the last element holds the length of the original text.\n     newlines: Box<[TextSize]>,\n     /// List of non-ASCII characters on each line.\n     line_wide_chars: IntMap<u32, Box<[WideChar]>>,\n@@ -125,6 +127,8 @@ impl LineIndex {\n             cur_col += c_len;\n         }\n \n+        newlines.push(TextSize::of(text));\n+\n         // Save any wide characters seen in the last line\n         if !wide_chars.is_empty() {\n             line_wide_chars.insert(line, wide_chars.into_boxed_slice());\n@@ -143,8 +147,12 @@ impl LineIndex {\n     }\n \n     /// Transforms the `TextSize` into a `LineCol`, or returns `None` if the `offset` was invalid,\n-    /// e.g. if it points to the middle of a multi-byte character.\n+    /// e.g. if it extends past the end of the text or points to the middle of a multi-byte\n+    /// character.\n     pub fn try_line_col(&self, offset: TextSize) -> Option<LineCol> {\n+        if offset > *self.newlines.last().unwrap() {\n+            return None;\n+        }\n         let line = self.newlines.partition_point(|&it| it <= offset);\n         let start = self.start_offset(line)?;\n         let col = offset - start;"}]}