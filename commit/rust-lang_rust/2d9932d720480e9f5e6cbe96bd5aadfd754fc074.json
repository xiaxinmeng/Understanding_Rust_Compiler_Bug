{"sha": "2d9932d720480e9f5e6cbe96bd5aadfd754fc074", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkOTkzMmQ3MjA0ODBlOWY1ZTZjYmU5NmJkNWFhZGZkNzU0ZmMwNzQ=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-02-27T00:34:45Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-02-28T21:53:52Z"}, "message": "lintcheck: don't run clippy in parallel by default", "tree": {"sha": "c3c7e6dd09a22d6fc44ddd9df12cfd4f52278786", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3c7e6dd09a22d6fc44ddd9df12cfd4f52278786"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d9932d720480e9f5e6cbe96bd5aadfd754fc074", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d9932d720480e9f5e6cbe96bd5aadfd754fc074", "html_url": "https://github.com/rust-lang/rust/commit/2d9932d720480e9f5e6cbe96bd5aadfd754fc074", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d9932d720480e9f5e6cbe96bd5aadfd754fc074/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d931d1b5e6d1ccb9290313dde986844966f3ee2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d931d1b5e6d1ccb9290313dde986844966f3ee2b", "html_url": "https://github.com/rust-lang/rust/commit/d931d1b5e6d1ccb9290313dde986844966f3ee2b"}], "stats": {"total": 57, "additions": 35, "deletions": 22}, "files": [{"sha": "00f406a085e93894a5ef53041a8654662c161993", "filename": "clippy_dev/src/lintcheck.rs", "status": "modified", "additions": 35, "deletions": 22, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/2d9932d720480e9f5e6cbe96bd5aadfd754fc074/clippy_dev%2Fsrc%2Flintcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d9932d720480e9f5e6cbe96bd5aadfd754fc074/clippy_dev%2Fsrc%2Flintcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flintcheck.rs?ref=2d9932d720480e9f5e6cbe96bd5aadfd754fc074", "patch": "@@ -588,28 +588,41 @@ pub fn run(clap_config: &ArgMatches) {\n             .flatten()\n             .collect()\n     } else {\n-        let counter = std::sync::atomic::AtomicUsize::new(0);\n-\n-        // Ask rayon for thread count. Assume that half of that is the number of physical cores\n-        // Use one target dir for each core so that we can run N clippys in parallel.\n-        // We need to use different target dirs because cargo would lock them for a single build otherwise,\n-        // killing the parallelism. However this also means that deps will only be reused half/a\n-        // quarter of the time which might result in a longer wall clock runtime\n-\n-        // This helps when we check many small crates with dep-trees that don't have a lot of branches in\n-        // order to achive some kind of parallelism\n-\n-        // by default, use a single thread\n-        let num_cpus = config.max_jobs;\n-        let num_crates = crates.len();\n-\n-        // check all crates (default)\n-        crates\n-            .into_par_iter()\n-            .map(|krate| krate.download_and_extract())\n-            .map(|krate| krate.run_clippy_lints(&cargo_clippy_path, &counter, num_cpus, num_crates))\n-            .flatten()\n-            .collect()\n+        if config.max_jobs > 1 {\n+            // run parallel with rayon\n+\n+            let counter = AtomicUsize::new(0);\n+\n+            // Ask rayon for thread count. Assume that half of that is the number of physical cores\n+            // Use one target dir for each core so that we can run N clippys in parallel.\n+            // We need to use different target dirs because cargo would lock them for a single build otherwise,\n+            // killing the parallelism. However this also means that deps will only be reused half/a\n+            // quarter of the time which might result in a longer wall clock runtime\n+\n+            // This helps when we check many small crates with dep-trees that don't have a lot of branches in\n+            // order to achive some kind of parallelism\n+\n+            // by default, use a single thread\n+            let num_cpus = config.max_jobs;\n+            let num_crates = crates.len();\n+\n+            // check all crates (default)\n+            crates\n+                .into_par_iter()\n+                .map(|krate| krate.download_and_extract())\n+                .map(|krate| krate.run_clippy_lints(&cargo_clippy_path, &counter, num_cpus, num_crates))\n+                .flatten()\n+                .collect()\n+        } else {\n+            // run sequential\n+            let num_crates = crates.len();\n+            crates\n+                .into_iter()\n+                .map(|krate| krate.download_and_extract())\n+                .map(|krate| krate.run_clippy_lints(&cargo_clippy_path, &AtomicUsize::new(0), 1, num_crates))\n+                .flatten()\n+                .collect()\n+        }\n     };\n \n     // generate some stats"}]}