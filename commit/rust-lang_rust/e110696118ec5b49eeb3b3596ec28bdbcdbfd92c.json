{"sha": "e110696118ec5b49eeb3b3596ec28bdbcdbfd92c", "node_id": "C_kwDOAAsO6NoAKGUxMTA2OTYxMThlYzViNDllZWIzYjM1OTZlYzI4YmRiY2RiZmQ5MmM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-18T19:56:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-18T19:56:16Z"}, "message": "Auto merge of #14845 - HKalbasi:layout, r=HKalbasi\n\nAdd layout info for enum variant and locals\n\nThe size of enum variant is what rustdoc shows (https://github.com/rust-lang/rust/pull/86263). I also added layout info for locals since it helps finding size of unnameable types like closures inside other structs or impl traits.", "tree": {"sha": "74c7a5be9a4b3fd618707f3ccf310d55180d584a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74c7a5be9a4b3fd618707f3ccf310d55180d584a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e110696118ec5b49eeb3b3596ec28bdbcdbfd92c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e110696118ec5b49eeb3b3596ec28bdbcdbfd92c", "html_url": "https://github.com/rust-lang/rust/commit/e110696118ec5b49eeb3b3596ec28bdbcdbfd92c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e110696118ec5b49eeb3b3596ec28bdbcdbfd92c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54129fa1132afa50afb4159673132c654244571d", "url": "https://api.github.com/repos/rust-lang/rust/commits/54129fa1132afa50afb4159673132c654244571d", "html_url": "https://github.com/rust-lang/rust/commit/54129fa1132afa50afb4159673132c654244571d"}, {"sha": "cae9660a1d076ddd78f28e65a7ac78b2c663ddda", "url": "https://api.github.com/repos/rust-lang/rust/commits/cae9660a1d076ddd78f28e65a7ac78b2c663ddda", "html_url": "https://github.com/rust-lang/rust/commit/cae9660a1d076ddd78f28e65a7ac78b2c663ddda"}], "stats": {"total": 279, "additions": 184, "deletions": 95}, "files": [{"sha": "8fac7fcd874abeb24c3f46ecca2cdb867d37cecc", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 36, "deletions": 14, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/e110696118ec5b49eeb3b3596ec28bdbcdbfd92c/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e110696118ec5b49eeb3b3596ec28bdbcdbfd92c/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=e110696118ec5b49eeb3b3596ec28bdbcdbfd92c", "patch": "@@ -45,7 +45,7 @@ use hir_def::{\n     hir::{BindingAnnotation, BindingId, ExprOrPatId, LabelId, Pat},\n     item_tree::ItemTreeNode,\n     lang_item::LangItemTarget,\n-    layout::ReprOptions,\n+    layout::{self, ReprOptions},\n     macro_id_to_def_id,\n     nameres::{self, diagnostics::DefDiagnostic, ModuleOrigin},\n     per_ns::PerNs,\n@@ -62,7 +62,7 @@ use hir_ty::{\n     consteval::{try_const_usize, unknown_const_as_generic, ConstEvalError, ConstExt},\n     diagnostics::BodyValidationDiagnostic,\n     display::HexifiedConst,\n-    layout::{layout_of_ty, Layout, LayoutError},\n+    layout::{layout_of_ty, Layout, LayoutError, RustcEnumVariantIdx, TagEncoding},\n     method_resolution::{self, TyFingerprint},\n     mir::{self, interpret_mir},\n     primitive::UintTy,\n@@ -1089,28 +1089,28 @@ impl Enum {\n         Type::new_for_crate(\n             self.id.lookup(db.upcast()).container.krate(),\n             TyBuilder::builtin(match db.enum_data(self.id).variant_body_type() {\n-                hir_def::layout::IntegerType::Pointer(sign) => match sign {\n+                layout::IntegerType::Pointer(sign) => match sign {\n                     true => hir_def::builtin_type::BuiltinType::Int(\n                         hir_def::builtin_type::BuiltinInt::Isize,\n                     ),\n                     false => hir_def::builtin_type::BuiltinType::Uint(\n                         hir_def::builtin_type::BuiltinUint::Usize,\n                     ),\n                 },\n-                hir_def::layout::IntegerType::Fixed(i, sign) => match sign {\n+                layout::IntegerType::Fixed(i, sign) => match sign {\n                     true => hir_def::builtin_type::BuiltinType::Int(match i {\n-                        hir_def::layout::Integer::I8 => hir_def::builtin_type::BuiltinInt::I8,\n-                        hir_def::layout::Integer::I16 => hir_def::builtin_type::BuiltinInt::I16,\n-                        hir_def::layout::Integer::I32 => hir_def::builtin_type::BuiltinInt::I32,\n-                        hir_def::layout::Integer::I64 => hir_def::builtin_type::BuiltinInt::I64,\n-                        hir_def::layout::Integer::I128 => hir_def::builtin_type::BuiltinInt::I128,\n+                        layout::Integer::I8 => hir_def::builtin_type::BuiltinInt::I8,\n+                        layout::Integer::I16 => hir_def::builtin_type::BuiltinInt::I16,\n+                        layout::Integer::I32 => hir_def::builtin_type::BuiltinInt::I32,\n+                        layout::Integer::I64 => hir_def::builtin_type::BuiltinInt::I64,\n+                        layout::Integer::I128 => hir_def::builtin_type::BuiltinInt::I128,\n                     }),\n                     false => hir_def::builtin_type::BuiltinType::Uint(match i {\n-                        hir_def::layout::Integer::I8 => hir_def::builtin_type::BuiltinUint::U8,\n-                        hir_def::layout::Integer::I16 => hir_def::builtin_type::BuiltinUint::U16,\n-                        hir_def::layout::Integer::I32 => hir_def::builtin_type::BuiltinUint::U32,\n-                        hir_def::layout::Integer::I64 => hir_def::builtin_type::BuiltinUint::U64,\n-                        hir_def::layout::Integer::I128 => hir_def::builtin_type::BuiltinUint::U128,\n+                        layout::Integer::I8 => hir_def::builtin_type::BuiltinUint::U8,\n+                        layout::Integer::I16 => hir_def::builtin_type::BuiltinUint::U16,\n+                        layout::Integer::I32 => hir_def::builtin_type::BuiltinUint::U32,\n+                        layout::Integer::I64 => hir_def::builtin_type::BuiltinUint::U64,\n+                        layout::Integer::I128 => hir_def::builtin_type::BuiltinUint::U128,\n                     }),\n                 },\n             }),\n@@ -1177,6 +1177,28 @@ impl Variant {\n     pub fn eval(self, db: &dyn HirDatabase) -> Result<i128, ConstEvalError> {\n         db.const_eval_discriminant(self.into())\n     }\n+\n+    /// Return layout of the variant and tag size of the parent enum.\n+    pub fn layout(&self, db: &dyn HirDatabase) -> Result<(Layout, usize), LayoutError> {\n+        let parent_enum = self.parent_enum(db);\n+        let parent_layout = Adt::from(parent_enum).layout(db)?;\n+        if let layout::Variants::Multiple { variants, tag, tag_encoding, tag_field: _ } =\n+            parent_layout.variants\n+        {\n+            let tag_size = match tag_encoding {\n+                TagEncoding::Direct => {\n+                    let target_data_layout = db\n+                        .target_data_layout(parent_enum.module(db).krate().id)\n+                        .ok_or(LayoutError::TargetLayoutNotAvailable)?;\n+                    tag.size(&*target_data_layout).bytes_usize()\n+                }\n+                TagEncoding::Niche { .. } => 0,\n+            };\n+            Ok((variants[RustcEnumVariantIdx(self.id)].clone(), tag_size))\n+        } else {\n+            Ok((parent_layout, 0))\n+        }\n+    }\n }\n \n /// Variants inherit visibility from the parent enum."}, {"sha": "fffc837876af8a70deeae4f8f54691e64e301e73", "filename": "crates/ide/src/hover/render.rs", "status": "modified", "additions": 52, "deletions": 6, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/e110696118ec5b49eeb3b3596ec28bdbcdbfd92c/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e110696118ec5b49eeb3b3596ec28bdbcdbfd92c/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Frender.rs?ref=e110696118ec5b49eeb3b3596ec28bdbcdbfd92c", "patch": "@@ -417,15 +417,25 @@ pub(super) fn definition(\n             let layout = it.layout(db).ok()?;\n             Some(format!(\"size = {}, align = {}\", layout.size.bytes(), layout.align.abi.bytes()))\n         }),\n-        Definition::Variant(it) => label_value_and_docs(db, it, |&it| {\n-            if !it.parent_enum(db).is_data_carrying(db) {\n+        Definition::Variant(it) => label_value_and_layout_info_and_docs(db, it, config, |&it| {\n+            let layout = (|| {\n+                let (layout, tag_size) = it.layout(db).ok()?;\n+                let size = layout.size.bytes_usize() - tag_size;\n+                if size == 0 {\n+                    // There is no value in showing layout info for fieldless variants\n+                    return None;\n+                }\n+                Some(format!(\"size = {}\", layout.size.bytes()))\n+            })();\n+            let value = if !it.parent_enum(db).is_data_carrying(db) {\n                 match it.eval(db) {\n                     Ok(x) => Some(if x >= 10 { format!(\"{x} ({x:#X})\") } else { format!(\"{x}\") }),\n                     Err(_) => it.value(db).map(|x| format!(\"{x:?}\")),\n                 }\n             } else {\n                 None\n-            }\n+            };\n+            (value, layout)\n         }),\n         Definition::Const(it) => label_value_and_docs(db, it, |it| {\n             let body = it.render_eval(db);\n@@ -460,7 +470,7 @@ pub(super) fn definition(\n                 .and_then(|fd| builtin(fd, it))\n                 .or_else(|| Some(Markup::fenced_block(&it.name())))\n         }\n-        Definition::Local(it) => return local(db, it),\n+        Definition::Local(it) => return local(db, it, config),\n         Definition::SelfType(impl_def) => {\n             impl_def.self_ty(db).as_adt().map(|adt| label_and_docs(db, adt))?\n         }\n@@ -637,6 +647,32 @@ where\n     (label, docs)\n }\n \n+fn label_value_and_layout_info_and_docs<D, E, V, L>(\n+    db: &RootDatabase,\n+    def: D,\n+    config: &HoverConfig,\n+    value_extractor: E,\n+) -> (String, Option<hir::Documentation>)\n+where\n+    D: HasAttrs + HirDisplay,\n+    E: Fn(&D) -> (Option<V>, Option<L>),\n+    V: Display,\n+    L: Display,\n+{\n+    let (value, layout) = value_extractor(&def);\n+    let label = if let Some(value) = value {\n+        format!(\"{} = {value}\", def.display(db))\n+    } else {\n+        def.display(db).to_string()\n+    };\n+    let label = match layout {\n+        Some(layout) if config.memory_layout => format!(\"{} // {layout}\", label),\n+        _ => label,\n+    };\n+    let docs = def.attrs(db).docs();\n+    (label, docs)\n+}\n+\n fn label_value_and_docs<D, E, V>(\n     db: &RootDatabase,\n     def: D,\n@@ -696,11 +732,11 @@ fn find_std_module(famous_defs: &FamousDefs<'_, '_>, name: &str) -> Option<hir::\n         .find(|module| module.name(db).map_or(false, |module| module.to_string() == name))\n }\n \n-fn local(db: &RootDatabase, it: hir::Local) -> Option<Markup> {\n+fn local(db: &RootDatabase, it: hir::Local, config: &HoverConfig) -> Option<Markup> {\n     let ty = it.ty(db);\n     let ty = ty.display_truncated(db, None);\n     let is_mut = if it.is_mut(db) { \"mut \" } else { \"\" };\n-    let desc = match it.primary_source(db).into_ident_pat() {\n+    let mut desc = match it.primary_source(db).into_ident_pat() {\n         Some(ident) => {\n             let name = it.name(db);\n             let let_kw = if ident\n@@ -716,6 +752,16 @@ fn local(db: &RootDatabase, it: hir::Local) -> Option<Markup> {\n         }\n         None => format!(\"{is_mut}self: {ty}\"),\n     };\n+    if config.memory_layout {\n+        if let Ok(layout) = it.ty(db).layout(db) {\n+            format_to!(\n+                desc,\n+                \" // size = {}, align = {}\",\n+                layout.size.bytes(),\n+                layout.align.abi.bytes()\n+            );\n+        }\n+    }\n     markup(None, desc, None)\n }\n "}, {"sha": "60708cb42ed86dc97da4aba5e923328fee2e0140", "filename": "crates/ide/src/hover/tests.rs", "status": "modified", "additions": 96, "deletions": 75, "changes": 171, "blob_url": "https://github.com/rust-lang/rust/blob/e110696118ec5b49eeb3b3596ec28bdbcdbfd92c/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e110696118ec5b49eeb3b3596ec28bdbcdbfd92c/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs?ref=e110696118ec5b49eeb3b3596ec28bdbcdbfd92c", "patch": "@@ -150,7 +150,7 @@ fn foo() {\n             *local*\n \n             ```rust\n-            let local: i32\n+            let local: i32 // size = 4, align = 4\n             ```\n         \"#]],\n     );\n@@ -396,12 +396,12 @@ fn main() {\n }\n \"#,\n         expect![[r#\"\n-                *iter*\n+            *iter*\n \n-                ```rust\n-                let mut iter: Iter<Scan<OtherStruct<OtherStruct<i32>>, impl Fn(&mut u32, &u32, &mut u32) -> Option<u32>, u32>>\n-                ```\n-            \"#]],\n+            ```rust\n+            let mut iter: Iter<Scan<OtherStruct<OtherStruct<i32>>, impl Fn(&mut u32, &u32, &mut u32) -> Option<u32>, u32>> // size = 8, align = 4\n+            ```\n+        \"#]],\n     );\n }\n \n@@ -778,12 +778,12 @@ fn main() {\n     let zz$0 = Test { t: 23u8, k: 33 };\n }\"#,\n         expect![[r#\"\n-                *zz*\n+            *zz*\n \n-                ```rust\n-                let zz: Test<i32>\n-                ```\n-            \"#]],\n+            ```rust\n+            let zz: Test<i32> // size = 8, align = 4\n+            ```\n+        \"#]],\n     );\n     check_hover_range(\n         r#\"\n@@ -829,12 +829,12 @@ use Option::Some;\n fn main() { let b$0ar = Some(12); }\n \"#,\n         expect![[r#\"\n-                *bar*\n+            *bar*\n \n-                ```rust\n-                let bar: Option<i32>\n-                ```\n-            \"#]],\n+            ```rust\n+            let bar: Option<i32> // size = 4, align = 4\n+            ```\n+        \"#]],\n     );\n }\n \n@@ -898,12 +898,12 @@ fn hover_for_local_variable() {\n     check(\n         r#\"fn func(foo: i32) { fo$0o; }\"#,\n         expect![[r#\"\n-                *foo*\n+            *foo*\n \n-                ```rust\n-                foo: i32\n-                ```\n-            \"#]],\n+            ```rust\n+            foo: i32 // size = 4, align = 4\n+            ```\n+        \"#]],\n     )\n }\n \n@@ -912,12 +912,12 @@ fn hover_for_local_variable_pat() {\n     check(\n         r#\"fn func(fo$0o: i32) {}\"#,\n         expect![[r#\"\n-                *foo*\n+            *foo*\n \n-                ```rust\n-                foo: i32\n-                ```\n-            \"#]],\n+            ```rust\n+            foo: i32 // size = 4, align = 4\n+            ```\n+        \"#]],\n     )\n }\n \n@@ -926,12 +926,12 @@ fn hover_local_var_edge() {\n     check(\n         r#\"fn func(foo: i32) { if true { $0foo; }; }\"#,\n         expect![[r#\"\n-                *foo*\n+            *foo*\n \n-                ```rust\n-                foo: i32\n-                ```\n-            \"#]],\n+            ```rust\n+            foo: i32 // size = 4, align = 4\n+            ```\n+        \"#]],\n     )\n }\n \n@@ -940,12 +940,12 @@ fn hover_for_param_edge() {\n     check(\n         r#\"fn func($0foo: i32) {}\"#,\n         expect![[r#\"\n-                *foo*\n+            *foo*\n \n-                ```rust\n-                foo: i32\n-                ```\n-            \"#]],\n+            ```rust\n+            foo: i32 // size = 4, align = 4\n+            ```\n+        \"#]],\n     )\n }\n \n@@ -984,12 +984,12 @@ impl Thing {\n fn main() { let foo_$0test = Thing::new(); }\n \"#,\n         expect![[r#\"\n-                *foo_test*\n+            *foo_test*\n \n-                ```rust\n-                let foo_test: Thing\n-                ```\n-            \"#]],\n+            ```rust\n+            let foo_test: Thing // size = 4, align = 4\n+            ```\n+        \"#]],\n     )\n }\n \n@@ -1144,12 +1144,12 @@ fn y() {\n }\n \"#,\n         expect![[r#\"\n-                *x*\n+            *x*\n \n-                ```rust\n-                let x: i32\n-                ```\n-            \"#]],\n+            ```rust\n+            let x: i32 // size = 4, align = 4\n+            ```\n+        \"#]],\n     )\n }\n \n@@ -1274,12 +1274,12 @@ macro_rules! id { ($($tt:tt)*) => { $($tt)* } }\n fn foo(bar:u32) { let a = id!(ba$0r); }\n \"#,\n         expect![[r#\"\n-                *bar*\n+            *bar*\n \n-                ```rust\n-                bar: u32\n-                ```\n-            \"#]],\n+            ```rust\n+            bar: u32 // size = 4, align = 4\n+            ```\n+        \"#]],\n     );\n }\n \n@@ -1292,12 +1292,12 @@ macro_rules! id { ($($tt:tt)*) => { id_deep!($($tt)*) } }\n fn foo(bar:u32) { let a = id!(ba$0r); }\n \"#,\n         expect![[r#\"\n-                *bar*\n+            *bar*\n \n-                ```rust\n-                bar: u32\n-                ```\n-            \"#]],\n+            ```rust\n+            bar: u32 // size = 4, align = 4\n+            ```\n+        \"#]],\n     );\n }\n \n@@ -1841,6 +1841,27 @@ pub fn fo$0o() {}\n     );\n }\n \n+#[test]\n+fn test_hover_layout_of_variant() {\n+    check(\n+        r#\"enum Foo {\n+            Va$0riant1(u8, u16),\n+            Variant2(i32, u8, i64),\n+        }\"#,\n+        expect![[r#\"\n+            *Variant1*\n+\n+            ```rust\n+            test::Foo\n+            ```\n+\n+            ```rust\n+            Variant1(u8, u16) // size = 4\n+            ```\n+        \"#]],\n+    );\n+}\n+\n #[test]\n fn test_hover_no_memory_layout() {\n     check_hover_no_memory_layout(\n@@ -3135,7 +3156,7 @@ fn main() {\n             *f*\n \n             ```rust\n-            f: &i32\n+            f: &i32 // size = 8, align = 8\n             ```\n             ---\n \n@@ -3185,7 +3206,7 @@ fn main() {\n             *value*\n \n             ```rust\n-            let value: Const<1>\n+            let value: Const<1> // size = 0, align = 1\n             ```\n         \"#]],\n     );\n@@ -3205,7 +3226,7 @@ fn main() {\n             *value*\n \n             ```rust\n-            let value: Const<0>\n+            let value: Const<0> // size = 0, align = 1\n             ```\n         \"#]],\n     );\n@@ -3225,7 +3246,7 @@ fn main() {\n             *value*\n \n             ```rust\n-            let value: Const<-1>\n+            let value: Const<-1> // size = 0, align = 1\n             ```\n         \"#]],\n     );\n@@ -3245,7 +3266,7 @@ fn main() {\n             *value*\n \n             ```rust\n-            let value: Const<true>\n+            let value: Const<true> // size = 0, align = 1\n             ```\n         \"#]],\n     );\n@@ -3265,7 +3286,7 @@ fn main() {\n             *value*\n \n             ```rust\n-            let value: Const<'\ud83e\udd80'>\n+            let value: Const<'\ud83e\udd80'> // size = 0, align = 1\n             ```\n         \"#]],\n     );\n@@ -3281,12 +3302,12 @@ impl Foo {\n }\n \"#,\n         expect![[r#\"\n-                *self*\n+            *self*\n \n-                ```rust\n-                self: &Foo\n-                ```\n-            \"#]],\n+            ```rust\n+            self: &Foo // size = 8, align = 8\n+            ```\n+        \"#]],\n     );\n }\n \n@@ -3301,12 +3322,12 @@ impl Foo {\n }\n \"#,\n         expect![[r#\"\n-                *self*\n+            *self*\n \n-                ```rust\n-                self: Arc<Foo>\n-                ```\n-            \"#]],\n+            ```rust\n+            self: Arc<Foo> // size = 0, align = 1\n+            ```\n+        \"#]],\n     );\n }\n \n@@ -4364,9 +4385,9 @@ fn main() {\n             *tile4*\n \n             ```rust\n-            let tile4: [u32; 8]\n+            let tile4: [u32; 8] // size = 32, align = 4\n             ```\n-            \"#]],\n+        \"#]],\n     );\n }\n \n@@ -5541,7 +5562,7 @@ enum Enum {\n             ```\n \n             ```rust\n-            RecordV { field: u32 }\n+            RecordV { field: u32 } // size = 4\n             ```\n         \"#]],\n     );"}]}