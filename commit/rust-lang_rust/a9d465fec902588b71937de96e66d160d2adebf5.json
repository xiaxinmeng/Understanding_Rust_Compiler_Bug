{"sha": "a9d465fec902588b71937de96e66d160d2adebf5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5ZDQ2NWZlYzkwMjU4OGI3MTkzN2RlOTZlNjZkMTYwZDJhZGViZjU=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-01-28T01:27:28Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-01-29T23:00:20Z"}, "message": "Use absolute path to FullRange, rather than assuming it is in the prelude\n\nCloses #21263\n\n[breaking-change]\n\nIf you are using `core::ops::FullRange` you should change to using `core::ops::RangeFull`", "tree": {"sha": "f82484ce9849bd594796f0fcb1e2c51722b87a53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f82484ce9849bd594796f0fcb1e2c51722b87a53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9d465fec902588b71937de96e66d160d2adebf5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9d465fec902588b71937de96e66d160d2adebf5", "html_url": "https://github.com/rust-lang/rust/commit/a9d465fec902588b71937de96e66d160d2adebf5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9d465fec902588b71937de96e66d160d2adebf5/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ea93abfb2c11111496d6e1f5b82fc21c2da27ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ea93abfb2c11111496d6e1f5b82fc21c2da27ad", "html_url": "https://github.com/rust-lang/rust/commit/7ea93abfb2c11111496d6e1f5b82fc21c2da27ad"}], "stats": {"total": 119, "additions": 66, "deletions": 53}, "files": [{"sha": "04cd5b2ae6a26d5507fc768bdb4ad6983eee9dd1", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a9d465fec902588b71937de96e66d160d2adebf5/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9d465fec902588b71937de96e66d160d2adebf5/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=a9d465fec902588b71937de96e66d160d2adebf5", "patch": "@@ -147,6 +147,7 @@ mod array;\n mod core {\n     pub use panicking;\n     pub use fmt;\n+    pub use ops;\n }\n \n #[doc(hidden)]"}, {"sha": "3d65dd82643bf5fb26d19a2187e42e0195f0fd60", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a9d465fec902588b71937de96e66d160d2adebf5/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9d465fec902588b71937de96e66d160d2adebf5/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=a9d465fec902588b71937de96e66d160d2adebf5", "patch": "@@ -2531,10 +2531,23 @@ impl<'a> Parser<'a> {\n                     // FIXME(#20516) It would be better to use a lang item or\n                     // something for FullRange.\n                     hi = self.last_span.hi;\n-                    let range = ExprStruct(ident_to_path(mk_sp(lo, hi),\n-                                                         token::special_idents::FullRange),\n-                                           vec![],\n-                                           None);\n+\n+                    let idents = vec![token::str_to_ident(\"core\"),\n+                                      token::str_to_ident(\"ops\"),\n+                                      token::str_to_ident(\"FullRange\")];\n+                    let segments = idents.into_iter().map(|ident| {\n+                        ast::PathSegment {\n+                            identifier: ident,\n+                            parameters: ast::PathParameters::none(),\n+                        }\n+                    }).collect();\n+                    let path = ast::Path {\n+                        span: mk_sp(lo, hi),\n+                        global: true,\n+                        segments: segments,\n+                    };\n+\n+                    let range = ExprStruct(path, vec![], None);\n                     let ix = self.mk_expr(bracket_pos, hi, range);\n                     let index = self.mk_index(e, ix);\n                     e = self.mk_expr(lo, hi, index)"}, {"sha": "5531ce7b119eb83ef27406607314315d4bf5a8ae", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 48, "deletions": 49, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/a9d465fec902588b71937de96e66d160d2adebf5/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9d465fec902588b71937de96e66d160d2adebf5/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=a9d465fec902588b71937de96e66d160d2adebf5", "patch": "@@ -516,66 +516,65 @@ declare_special_idents_and_keywords! {\n         (9,                          unnamed_field,          \"<unnamed_field>\");\n         (10,                         type_self,              \"Self\");\n         (11,                         prelude_import,         \"prelude_import\");\n-        (12,                         FullRange,              \"FullRange\");\n     }\n \n     pub mod keywords {\n         // These ones are variants of the Keyword enum\n \n         'strict:\n-        (13,                         As,         \"as\");\n-        (14,                         Break,      \"break\");\n-        (15,                         Crate,      \"crate\");\n-        (16,                         Else,       \"else\");\n-        (17,                         Enum,       \"enum\");\n-        (18,                         Extern,     \"extern\");\n-        (19,                         False,      \"false\");\n-        (20,                         Fn,         \"fn\");\n-        (21,                         For,        \"for\");\n-        (22,                         If,         \"if\");\n-        (23,                         Impl,       \"impl\");\n-        (24,                         In,         \"in\");\n-        (25,                         Let,        \"let\");\n-        (26,                         Loop,       \"loop\");\n-        (27,                         Match,      \"match\");\n-        (28,                         Mod,        \"mod\");\n-        (29,                         Move,       \"move\");\n-        (30,                         Mut,        \"mut\");\n-        (31,                         Pub,        \"pub\");\n-        (32,                         Ref,        \"ref\");\n-        (33,                         Return,     \"return\");\n+        (12,                         As,         \"as\");\n+        (13,                         Break,      \"break\");\n+        (14,                         Crate,      \"crate\");\n+        (15,                         Else,       \"else\");\n+        (16,                         Enum,       \"enum\");\n+        (17,                         Extern,     \"extern\");\n+        (18,                         False,      \"false\");\n+        (19,                         Fn,         \"fn\");\n+        (20,                         For,        \"for\");\n+        (21,                         If,         \"if\");\n+        (22,                         Impl,       \"impl\");\n+        (23,                         In,         \"in\");\n+        (24,                         Let,        \"let\");\n+        (25,                         Loop,       \"loop\");\n+        (26,                         Match,      \"match\");\n+        (27,                         Mod,        \"mod\");\n+        (28,                         Move,       \"move\");\n+        (29,                         Mut,        \"mut\");\n+        (30,                         Pub,        \"pub\");\n+        (31,                         Ref,        \"ref\");\n+        (32,                         Return,     \"return\");\n         // Static and Self are also special idents (prefill de-dupes)\n         (super::STATIC_KEYWORD_NAME_NUM, Static, \"static\");\n         (super::SELF_KEYWORD_NAME_NUM,   Self,   \"self\");\n-        (34,                         Struct,     \"struct\");\n+        (33,                         Struct,     \"struct\");\n         (super::SUPER_KEYWORD_NAME_NUM, Super,   \"super\");\n-        (35,                         True,       \"true\");\n-        (36,                         Trait,      \"trait\");\n-        (37,                         Type,       \"type\");\n-        (38,                         Unsafe,     \"unsafe\");\n-        (39,                         Use,        \"use\");\n-        (40,                         Virtual,    \"virtual\");\n-        (41,                         While,      \"while\");\n-        (42,                         Continue,   \"continue\");\n-        (43,                         Proc,       \"proc\");\n-        (44,                         Box,        \"box\");\n-        (45,                         Const,      \"const\");\n-        (46,                         Where,      \"where\");\n+        (34,                         True,       \"true\");\n+        (35,                         Trait,      \"trait\");\n+        (36,                         Type,       \"type\");\n+        (37,                         Unsafe,     \"unsafe\");\n+        (38,                         Use,        \"use\");\n+        (39,                         Virtual,    \"virtual\");\n+        (40,                         While,      \"while\");\n+        (41,                         Continue,   \"continue\");\n+        (42,                         Proc,       \"proc\");\n+        (43,                         Box,        \"box\");\n+        (44,                         Const,      \"const\");\n+        (45,                         Where,      \"where\");\n         'reserved:\n-        (47,                         Alignof,    \"alignof\");\n-        (48,                         Be,         \"be\");\n-        (49,                         Offsetof,   \"offsetof\");\n-        (50,                         Priv,       \"priv\");\n-        (51,                         Pure,       \"pure\");\n-        (52,                         Sizeof,     \"sizeof\");\n-        (53,                         Typeof,     \"typeof\");\n-        (54,                         Unsized,    \"unsized\");\n-        (55,                         Yield,      \"yield\");\n-        (56,                         Do,         \"do\");\n-        (57,                         Abstract,   \"abstract\");\n-        (58,                         Final,      \"final\");\n-        (59,                         Override,   \"override\");\n-        (60,                         Macro,      \"macro\");\n+        (46,                         Alignof,    \"alignof\");\n+        (47,                         Be,         \"be\");\n+        (48,                         Offsetof,   \"offsetof\");\n+        (49,                         Priv,       \"priv\");\n+        (50,                         Pure,       \"pure\");\n+        (51,                         Sizeof,     \"sizeof\");\n+        (52,                         Typeof,     \"typeof\");\n+        (53,                         Unsized,    \"unsized\");\n+        (54,                         Yield,      \"yield\");\n+        (55,                         Do,         \"do\");\n+        (56,                         Abstract,   \"abstract\");\n+        (57,                         Final,      \"final\");\n+        (58,                         Override,   \"override\");\n+        (59,                         Macro,      \"macro\");\n     }\n }\n "}]}