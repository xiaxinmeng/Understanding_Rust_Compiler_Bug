{"sha": "9155a9dae522bbedd42b4a11366d8157da0614ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxNTVhOWRhZTUyMmJiZWRkNDJiNGExMTM2NmQ4MTU3ZGEwNjE0ZWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-08T03:09:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-08T03:09:03Z"}, "message": "Auto merge of #80806 - JohnTitor:rollup-y64z7ph, r=JohnTitor\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #79675 (Make sure rust-call errors occur correctly for traits)\n - #80372 (Don't panic when an external crate can't be resolved)\n - #80761 (handle generic trait methods in coverage-report tests)\n - #80785 (rustc_ast_pretty: Remove `PrintState::insert_extra_parens`)\n - #80791 (Fix type name in doc example for Iter and IterMut)\n - #80794 (Use Option::map_or instead of `.map(..).unwrap_or(..)`)\n - #80799 (Get rid of custom pretty-printing in rustdoc)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "380cc035422ea61e9b39c6c0d0dfcdd75bf2b9d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/380cc035422ea61e9b39c6c0d0dfcdd75bf2b9d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9155a9dae522bbedd42b4a11366d8157da0614ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9155a9dae522bbedd42b4a11366d8157da0614ec", "html_url": "https://github.com/rust-lang/rust/commit/9155a9dae522bbedd42b4a11366d8157da0614ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9155a9dae522bbedd42b4a11366d8157da0614ec/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92c625d0f76a6f74930b1647b0b77f53824e5a8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/92c625d0f76a6f74930b1647b0b77f53824e5a8d", "html_url": "https://github.com/rust-lang/rust/commit/92c625d0f76a6f74930b1647b0b77f53824e5a8d"}, {"sha": "dec3dbd36a572222ad96b9f18b39b4f916614fcd", "url": "https://api.github.com/repos/rust-lang/rust/commits/dec3dbd36a572222ad96b9f18b39b4f916614fcd", "html_url": "https://github.com/rust-lang/rust/commit/dec3dbd36a572222ad96b9f18b39b4f916614fcd"}], "stats": {"total": 210, "additions": 90, "deletions": 120}, "files": [{"sha": "b88699f6ee176c5ba8185f72b644687c67009c20", "filename": "compiler/rustc_ast_pretty/src/pprust/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9155a9dae522bbedd42b4a11366d8157da0614ec/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9155a9dae522bbedd42b4a11366d8157da0614ec/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fmod.rs?ref=9155a9dae522bbedd42b4a11366d8157da0614ec", "patch": "@@ -8,11 +8,6 @@ use rustc_ast as ast;\n use rustc_ast::token::{Nonterminal, Token, TokenKind};\n use rustc_ast::tokenstream::{TokenStream, TokenTree};\n \n-pub fn nonterminal_to_string_no_extra_parens(nt: &Nonterminal) -> String {\n-    let state = State::without_insert_extra_parens();\n-    state.nonterminal_to_string(nt)\n-}\n-\n pub fn nonterminal_to_string(nt: &Nonterminal) -> String {\n     State::new().nonterminal_to_string(nt)\n }"}, {"sha": "ca816ef676959fe13a237d6bd3e507eff9afcc68", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 2, "deletions": 26, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9155a9dae522bbedd42b4a11366d8157da0614ec/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9155a9dae522bbedd42b4a11366d8157da0614ec/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=9155a9dae522bbedd42b4a11366d8157da0614ec", "patch": "@@ -88,13 +88,6 @@ pub struct State<'a> {\n     comments: Option<Comments<'a>>,\n     ann: &'a (dyn PpAnn + 'a),\n     is_expanded: bool,\n-    // If `true`, additional parenthesis (separate from `ExprKind::Paren`)\n-    // are inserted to ensure that proper precedence is preserved\n-    // in the pretty-printed output.\n-    //\n-    // This is usually `true`, except when performing the pretty-print/reparse\n-    // check in `nt_to_tokenstream`\n-    insert_extra_parens: bool,\n }\n \n crate const INDENT_UNIT: usize = 4;\n@@ -115,7 +108,6 @@ pub fn print_crate<'a>(\n         comments: Some(Comments::new(sm, filename, input)),\n         ann,\n         is_expanded,\n-        insert_extra_parens: true,\n     };\n \n     if is_expanded && !krate.attrs.iter().any(|attr| attr.has_name(sym::no_core)) {\n@@ -235,7 +227,6 @@ impl std::ops::DerefMut for State<'_> {\n }\n \n pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::DerefMut {\n-    fn insert_extra_parens(&self) -> bool;\n     fn comments(&mut self) -> &mut Option<Comments<'a>>;\n     fn print_ident(&mut self, ident: Ident);\n     fn print_generic_args(&mut self, args: &ast::GenericArgs, colons_before_params: bool);\n@@ -819,16 +810,12 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n \n     fn to_string(&self, f: impl FnOnce(&mut State<'_>)) -> String {\n         let mut printer = State::new();\n-        printer.insert_extra_parens = self.insert_extra_parens();\n         f(&mut printer);\n         printer.s.eof()\n     }\n }\n \n impl<'a> PrintState<'a> for State<'a> {\n-    fn insert_extra_parens(&self) -> bool {\n-        self.insert_extra_parens\n-    }\n     fn comments(&mut self) -> &mut Option<Comments<'a>> {\n         &mut self.comments\n     }\n@@ -865,17 +852,7 @@ impl<'a> PrintState<'a> for State<'a> {\n \n impl<'a> State<'a> {\n     pub fn new() -> State<'a> {\n-        State {\n-            s: pp::mk_printer(),\n-            comments: None,\n-            ann: &NoAnn,\n-            is_expanded: false,\n-            insert_extra_parens: true,\n-        }\n-    }\n-\n-    pub(super) fn without_insert_extra_parens() -> State<'a> {\n-        State { insert_extra_parens: false, ..State::new() }\n+        State { s: pp::mk_printer(), comments: None, ann: &NoAnn, is_expanded: false }\n     }\n \n     // Synthesizes a comment that was not textually present in the original source\n@@ -1680,8 +1657,7 @@ impl<'a> State<'a> {\n     }\n \n     /// Prints `expr` or `(expr)` when `needs_par` holds.\n-    fn print_expr_cond_paren(&mut self, expr: &ast::Expr, mut needs_par: bool) {\n-        needs_par &= self.insert_extra_parens;\n+    fn print_expr_cond_paren(&mut self, expr: &ast::Expr, needs_par: bool) {\n         if needs_par {\n             self.popen();\n         }"}, {"sha": "a9aa192bbcc3b53f8b9d1390e7e7ea743a51e492", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9155a9dae522bbedd42b4a11366d8157da0614ec/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9155a9dae522bbedd42b4a11366d8157da0614ec/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=9155a9dae522bbedd42b4a11366d8157da0614ec", "patch": "@@ -138,9 +138,6 @@ impl std::ops::DerefMut for State<'_> {\n }\n \n impl<'a> PrintState<'a> for State<'a> {\n-    fn insert_extra_parens(&self) -> bool {\n-        true\n-    }\n     fn comments(&mut self) -> &mut Option<Comments<'a>> {\n         &mut self.comments\n     }"}, {"sha": "0da9cd3fe5ee937d78bb90d3774d0de4e4fc4d49", "filename": "compiler/rustc_parse/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9155a9dae522bbedd42b4a11366d8157da0614ec/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9155a9dae522bbedd42b4a11366d8157da0614ec/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flib.rs?ref=9155a9dae522bbedd42b4a11366d8157da0614ec", "patch": "@@ -283,8 +283,7 @@ pub fn nt_to_tokenstream(\n     } else if matches!(synthesize_tokens, CanSynthesizeMissingTokens::Yes) {\n         return fake_token_stream(sess, nt);\n     } else {\n-        let pretty = rustc_ast_pretty::pprust::nonterminal_to_string_no_extra_parens(&nt);\n-        panic!(\"Missing tokens for nt {:?}\", pretty);\n+        panic!(\"Missing tokens for nt {:?}\", pprust::nonterminal_to_string(nt));\n     }\n }\n "}, {"sha": "6154414ff602a71c9e9ad6f010e9ec2560833ca6", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9155a9dae522bbedd42b4a11366d8157da0614ec/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9155a9dae522bbedd42b4a11366d8157da0614ec/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=9155a9dae522bbedd42b4a11366d8157da0614ec", "patch": "@@ -103,6 +103,10 @@ pub(super) fn check_fn<'a, 'tcx>(\n                 Node::ImplItem(hir::ImplItem {\n                     kind: hir::ImplItemKind::Fn(header, ..), ..\n                 }) => Some(header),\n+                Node::TraitItem(hir::TraitItem {\n+                    kind: hir::TraitItemKind::Fn(header, ..),\n+                    ..\n+                }) => Some(header),\n                 // Closures are RustCall, but they tuple their arguments, so shouldn't be checked\n                 Node::Expr(hir::Expr { kind: hir::ExprKind::Closure(..), .. }) => None,\n                 node => bug!(\"Item being checked wasn't a function/closure: {:?}\", node),"}, {"sha": "769b673d80ab58ec82a748e6567a4da9a356aae8", "filename": "library/core/src/slice/iter.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9155a9dae522bbedd42b4a11366d8157da0614ec/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9155a9dae522bbedd42b4a11366d8157da0614ec/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs?ref=9155a9dae522bbedd42b4a11366d8157da0614ec", "patch": "@@ -51,7 +51,7 @@ fn size_from_ptr<T>(_: *const T) -> usize {\n /// Basic usage:\n ///\n /// ```\n-/// // First, we declare a type which has `iter` method to get the `Iter` struct (&[usize here]):\n+/// // First, we declare a type which has `iter` method to get the `Iter` struct (`&[usize]` here):\n /// let slice = &[1, 2, 3];\n ///\n /// // Then, we iterate over it:\n@@ -112,7 +112,7 @@ impl<'a, T> Iter<'a, T> {\n     ///\n     /// ```\n     /// // First, we declare a type which has the `iter` method to get the `Iter`\n-    /// // struct (&[usize here]):\n+    /// // struct (`&[usize]` here):\n     /// let slice = &[1, 2, 3];\n     ///\n     /// // Then, we get the iterator:\n@@ -167,7 +167,7 @@ impl<T> AsRef<[T]> for Iter<'_, T> {\n ///\n /// ```\n /// // First, we declare a type which has `iter_mut` method to get the `IterMut`\n-/// // struct (&[usize here]):\n+/// // struct (`&[usize]` here):\n /// let mut slice = &mut [1, 2, 3];\n ///\n /// // Then, we iterate over it and increment each element value:\n@@ -246,7 +246,7 @@ impl<'a, T> IterMut<'a, T> {\n     ///\n     /// ```\n     /// // First, we declare a type which has `iter_mut` method to get the `IterMut`\n-    /// // struct (&[usize here]):\n+    /// // struct (`&[usize]` here):\n     /// let mut slice = &mut [1, 2, 3];\n     ///\n     /// {"}, {"sha": "d29ca5c921a9a5576482002af4838df57edb0647", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9155a9dae522bbedd42b4a11366d8157da0614ec/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9155a9dae522bbedd42b4a11366d8157da0614ec/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=9155a9dae522bbedd42b4a11366d8157da0614ec", "patch": "@@ -942,7 +942,7 @@ impl<'a> Clean<Arguments> for (&'a [hir::Ty<'a>], &'a [Ident]) {\n                 .iter()\n                 .enumerate()\n                 .map(|(i, ty)| {\n-                    let mut name = self.1.get(i).map(|ident| ident.name).unwrap_or(kw::Empty);\n+                    let mut name = self.1.get(i).map_or(kw::Empty, |ident| ident.name);\n                     if name.is_empty() {\n                         name = kw::Underscore;\n                     }\n@@ -963,7 +963,7 @@ impl<'a> Clean<Arguments> for (&'a [hir::Ty<'a>], hir::BodyId) {\n                 .iter()\n                 .enumerate()\n                 .map(|(i, ty)| Argument {\n-                    name: name_from_pat(&body.params[i].pat),\n+                    name: Symbol::intern(&rustc_hir_pretty::param_to_string(&body.params[i])),\n                     type_: ty.clean(cx),\n                 })\n                 .collect(),\n@@ -1001,7 +1001,7 @@ impl<'tcx> Clean<FnDecl> for (DefId, ty::PolyFnSig<'tcx>) {\n                     .iter()\n                     .map(|t| Argument {\n                         type_: t.clean(cx),\n-                        name: names.next().map(|i| i.name).unwrap_or(kw::Empty),\n+                        name: names.next().map_or(kw::Empty, |i| i.name),\n                     })\n                     .collect(),\n             },"}, {"sha": "0f5495c8310580d4939477c81e0d2fa46a74a941", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 0, "deletions": 70, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/9155a9dae522bbedd42b4a11366d8157da0614ec/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9155a9dae522bbedd42b4a11366d8157da0614ec/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=9155a9dae522bbedd42b4a11366d8157da0614ec", "patch": "@@ -314,25 +314,6 @@ crate fn strip_path(path: &Path) -> Path {\n     Path { global: path.global, res: path.res, segments }\n }\n \n-crate fn qpath_to_string(p: &hir::QPath<'_>) -> String {\n-    let segments = match *p {\n-        hir::QPath::Resolved(_, ref path) => &path.segments,\n-        hir::QPath::TypeRelative(_, ref segment) => return segment.ident.to_string(),\n-        hir::QPath::LangItem(lang_item, ..) => return lang_item.name().to_string(),\n-    };\n-\n-    let mut s = String::new();\n-    for (i, seg) in segments.iter().enumerate() {\n-        if i > 0 {\n-            s.push_str(\"::\");\n-        }\n-        if seg.ident.name != kw::PathRoot {\n-            s.push_str(&seg.ident.as_str());\n-        }\n-    }\n-    s\n-}\n-\n crate fn build_deref_target_impls(cx: &DocContext<'_>, items: &[Item], ret: &mut Vec<Item>) {\n     let tcx = cx.tcx;\n \n@@ -376,57 +357,6 @@ impl ToSource for rustc_span::Span {\n     }\n }\n \n-crate fn name_from_pat(p: &hir::Pat<'_>) -> Symbol {\n-    use rustc_hir::*;\n-    debug!(\"trying to get a name from pattern: {:?}\", p);\n-\n-    Symbol::intern(&match p.kind {\n-        PatKind::Wild => return kw::Underscore,\n-        PatKind::Binding(_, _, ident, _) => return ident.name,\n-        PatKind::TupleStruct(ref p, ..) | PatKind::Path(ref p) => qpath_to_string(p),\n-        PatKind::Struct(ref name, ref fields, etc) => format!(\n-            \"{} {{ {}{} }}\",\n-            qpath_to_string(name),\n-            fields\n-                .iter()\n-                .map(|fp| format!(\"{}: {}\", fp.ident, name_from_pat(&fp.pat)))\n-                .collect::<Vec<String>>()\n-                .join(\", \"),\n-            if etc { \", ..\" } else { \"\" }\n-        ),\n-        PatKind::Or(ref pats) => pats\n-            .iter()\n-            .map(|p| name_from_pat(&**p).to_string())\n-            .collect::<Vec<String>>()\n-            .join(\" | \"),\n-        PatKind::Tuple(ref elts, _) => format!(\n-            \"({})\",\n-            elts.iter()\n-                .map(|p| name_from_pat(&**p).to_string())\n-                .collect::<Vec<String>>()\n-                .join(\", \")\n-        ),\n-        PatKind::Box(ref p) => return name_from_pat(&**p),\n-        PatKind::Ref(ref p, _) => return name_from_pat(&**p),\n-        PatKind::Lit(..) => {\n-            warn!(\n-                \"tried to get argument name from PatKind::Lit, which is silly in function arguments\"\n-            );\n-            return Symbol::intern(\"()\");\n-        }\n-        PatKind::Range(..) => panic!(\n-            \"tried to get argument name from PatKind::Range, \\\n-             which is not allowed in function arguments\"\n-        ),\n-        PatKind::Slice(ref begin, ref mid, ref end) => {\n-            let begin = begin.iter().map(|p| name_from_pat(&**p).to_string());\n-            let mid = mid.as_ref().map(|p| format!(\"..{}\", name_from_pat(&**p))).into_iter();\n-            let end = end.iter().map(|p| name_from_pat(&**p).to_string());\n-            format!(\"[{}]\", begin.chain(mid).chain(end).collect::<Vec<_>>().join(\", \"))\n-        }\n-    })\n-}\n-\n crate fn print_const(cx: &DocContext<'_>, n: &'tcx ty::Const<'_>) -> String {\n     match n.val {\n         ty::ConstKind::Unevaluated(def, _, promoted) => {"}, {"sha": "4db5a0bccc85df563e5cec87d087cff50153116f", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9155a9dae522bbedd42b4a11366d8157da0614ec/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9155a9dae522bbedd42b4a11366d8157da0614ec/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=9155a9dae522bbedd42b4a11366d8157da0614ec", "patch": "@@ -434,16 +434,15 @@ crate fn create_resolver<'a>(\n         sess.time(\"load_extern_crates\", || {\n             for extern_name in &extern_names {\n                 debug!(\"loading extern crate {}\", extern_name);\n-                resolver\n+                if let Err(()) = resolver\n                     .resolve_str_path_error(\n                         DUMMY_SP,\n                         extern_name,\n                         TypeNS,\n                         LocalDefId { local_def_index: CRATE_DEF_INDEX }.to_def_id(),\n-                    )\n-                    .unwrap_or_else(|()| {\n-                        panic!(\"Unable to resolve external crate {}\", extern_name)\n-                    });\n+                  ) {\n+                    warn!(\"unable to resolve external crate {} (do you have an unused `--extern` crate?)\", extern_name)\n+                  }\n             }\n         });\n     });"}, {"sha": "f98245b4a99441595081d730f9bb0c4e707d38d5", "filename": "src/test/run-make-fulldeps/coverage-reports/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9155a9dae522bbedd42b4a11366d8157da0614ec/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/9155a9dae522bbedd42b4a11366d8157da0614ec/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2FMakefile?ref=9155a9dae522bbedd42b4a11366d8157da0614ec", "patch": "@@ -172,7 +172,7 @@ else\n \t# files are redundant, so there is no need to generate `expected_*.json` files or\n \t# compare actual JSON results.)\n \n-\t$(DIFF) --ignore-matching-lines='::<.*>.*:$$' \\\n+\t$(DIFF) --ignore-matching-lines='^  | .*::<.*>.*:$$' --ignore-matching-lines='^  | <.*>::.*:$$' \\\n \t\texpected_show_coverage.$@.txt \"$(TMPDIR)\"/actual_show_coverage.$@.txt || \\\n \t\t( grep -q '^\\/\\/ ignore-llvm-cov-show-diffs' $(SOURCEDIR)/$@.rs && \\\n \t\t\t>&2 echo 'diff failed, but suppressed with `// ignore-llvm-cov-show-diffs` in $(SOURCEDIR)/$@.rs' \\"}, {"sha": "186503cf69d3f6f4fcaba76f759d24af7b8a1060", "filename": "src/test/rustdoc-ui/intra-doc/unused-extern-crate.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9155a9dae522bbedd42b4a11366d8157da0614ec/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Funused-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9155a9dae522bbedd42b4a11366d8157da0614ec/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Funused-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Funused-extern-crate.rs?ref=9155a9dae522bbedd42b4a11366d8157da0614ec", "patch": "@@ -0,0 +1,5 @@\n+// compile-flags: --extern zip=whatever.rlib\n+#![deny(broken_intra_doc_links)]\n+/// See [zip] crate.\n+//~^ ERROR unresolved\n+pub struct ArrayZip;"}, {"sha": "b3b57fd1318383a4e4fac79ccea3218689006659", "filename": "src/test/rustdoc-ui/intra-doc/unused-extern-crate.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9155a9dae522bbedd42b4a11366d8157da0614ec/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Funused-extern-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9155a9dae522bbedd42b4a11366d8157da0614ec/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Funused-extern-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Funused-extern-crate.stderr?ref=9155a9dae522bbedd42b4a11366d8157da0614ec", "patch": "@@ -0,0 +1,15 @@\n+error: unresolved link to `zip`\n+  --> $DIR/unused-extern-crate.rs:3:10\n+   |\n+LL | /// See [zip] crate.\n+   |          ^^^ no item named `zip` in scope\n+   |\n+note: the lint level is defined here\n+  --> $DIR/unused-extern-crate.rs:2:9\n+   |\n+LL | #![deny(broken_intra_doc_links)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n+\n+error: aborting due to previous error\n+"}, {"sha": "fd255d02fcb6a2844c0de85ed090bde5ef75dbe0", "filename": "src/test/rustdoc-ui/range-pattern.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9155a9dae522bbedd42b4a11366d8157da0614ec/src%2Ftest%2Frustdoc-ui%2Frange-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9155a9dae522bbedd42b4a11366d8157da0614ec/src%2Ftest%2Frustdoc-ui%2Frange-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Frange-pattern.rs?ref=9155a9dae522bbedd42b4a11366d8157da0614ec", "patch": "@@ -0,0 +1,3 @@\n+// check-pass\n+\n+fn func(0u8..=255: u8) {}"}, {"sha": "f4cc36b1055adff790168f6a8f1470500279be8a", "filename": "src/test/rustdoc/range-arg-pattern.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9155a9dae522bbedd42b4a11366d8157da0614ec/src%2Ftest%2Frustdoc%2Frange-arg-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9155a9dae522bbedd42b4a11366d8157da0614ec/src%2Ftest%2Frustdoc%2Frange-arg-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Frange-arg-pattern.rs?ref=9155a9dae522bbedd42b4a11366d8157da0614ec", "patch": "@@ -0,0 +1,5 @@\n+#![crate_name = \"foo\"]\n+\n+// @has foo/fn.f.html\n+// @has - '//*[@class=\"rust fn\"]' 'pub fn f(0u8 ...255: u8)'\n+pub fn f(0u8...255: u8) {}"}, {"sha": "383eaab454ec4b216d8a3edb475cd02c4ec0647d", "filename": "src/test/ui/abi/issues/issue-22565-rust-call.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9155a9dae522bbedd42b4a11366d8157da0614ec/src%2Ftest%2Fui%2Fabi%2Fissues%2Fissue-22565-rust-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9155a9dae522bbedd42b4a11366d8157da0614ec/src%2Ftest%2Fui%2Fabi%2Fissues%2Fissue-22565-rust-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fissues%2Fissue-22565-rust-call.rs?ref=9155a9dae522bbedd42b4a11366d8157da0614ec", "patch": "@@ -3,6 +3,30 @@\n extern \"rust-call\" fn b(_i: i32) {}\n //~^ ERROR A function with the \"rust-call\" ABI must take a single non-self argument that is a tuple\n \n+trait Tr {\n+    extern \"rust-call\" fn a();\n+\n+    extern \"rust-call\" fn b() {}\n+    //~^ ERROR A function with the \"rust-call\" ABI must take a single non-self argument\n+}\n+\n+struct Foo;\n+\n+impl Foo {\n+    extern \"rust-call\" fn bar() {}\n+    //~^ ERROR A function with the \"rust-call\" ABI must take a single non-self argument\n+}\n+\n+impl Tr for Foo {\n+    extern \"rust-call\" fn a() {}\n+    //~^ ERROR A function with the \"rust-call\" ABI must take a single non-self argument\n+}\n+\n fn main () {\n     b(10);\n+\n+    Foo::bar();\n+\n+    <Foo as Tr>::a();\n+    <Foo as Tr>::b();\n }"}, {"sha": "f7c3d1de793dce847ecd6c1707e423863613d7b8", "filename": "src/test/ui/abi/issues/issue-22565-rust-call.stderr", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9155a9dae522bbedd42b4a11366d8157da0614ec/src%2Ftest%2Fui%2Fabi%2Fissues%2Fissue-22565-rust-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9155a9dae522bbedd42b4a11366d8157da0614ec/src%2Ftest%2Fui%2Fabi%2Fissues%2Fissue-22565-rust-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fissues%2Fissue-22565-rust-call.stderr?ref=9155a9dae522bbedd42b4a11366d8157da0614ec", "patch": "@@ -4,5 +4,23 @@ error: A function with the \"rust-call\" ABI must take a single non-self argument\n LL | extern \"rust-call\" fn b(_i: i32) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error: A function with the \"rust-call\" ABI must take a single non-self argument that is a tuple\n+  --> $DIR/issue-22565-rust-call.rs:9:5\n+   |\n+LL |     extern \"rust-call\" fn b() {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: A function with the \"rust-call\" ABI must take a single non-self argument that is a tuple\n+  --> $DIR/issue-22565-rust-call.rs:16:5\n+   |\n+LL |     extern \"rust-call\" fn bar() {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: A function with the \"rust-call\" ABI must take a single non-self argument that is a tuple\n+  --> $DIR/issue-22565-rust-call.rs:21:5\n+   |\n+LL |     extern \"rust-call\" fn a() {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n "}]}