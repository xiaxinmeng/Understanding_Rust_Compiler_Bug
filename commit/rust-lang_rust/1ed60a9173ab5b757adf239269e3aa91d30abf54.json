{"sha": "1ed60a9173ab5b757adf239269e3aa91d30abf54", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlZDYwYTkxNzNhYjViNzU3YWRmMjM5MjY5ZTNhYTkxZDMwYWJmNTQ=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-02-12T21:44:05Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-06-20T11:19:04Z"}, "message": "Rename *Parameter to *Param", "tree": {"sha": "d161547636188e1fdffa80f839b14219689e2b05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d161547636188e1fdffa80f839b14219689e2b05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ed60a9173ab5b757adf239269e3aa91d30abf54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ed60a9173ab5b757adf239269e3aa91d30abf54", "html_url": "https://github.com/rust-lang/rust/commit/1ed60a9173ab5b757adf239269e3aa91d30abf54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ed60a9173ab5b757adf239269e3aa91d30abf54/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "494859e8dde5080534e94aba6d98affb921552f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/494859e8dde5080534e94aba6d98affb921552f8", "html_url": "https://github.com/rust-lang/rust/commit/494859e8dde5080534e94aba6d98affb921552f8"}], "stats": {"total": 158, "additions": 81, "deletions": 77}, "files": [{"sha": "fd914f9f62bb1d5c8b0f549eda5d7da45154667d", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1ed60a9173ab5b757adf239269e3aa91d30abf54/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ed60a9173ab5b757adf239269e3aa91d30abf54/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=1ed60a9173ab5b757adf239269e3aa91d30abf54", "patch": "@@ -46,7 +46,7 @@ use hir::HirVec;\n use hir::map::{DefKey, DefPathData, Definitions};\n use hir::def_id::{DefId, DefIndex, DefIndexAddressSpace, CRATE_DEF_INDEX};\n use hir::def::{Def, PathResolution, PerNS};\n-use hir::GenericPathParam;\n+use hir::PathParam;\n use lint::builtin::{self, PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES};\n use middle::cstore::CrateStore;\n use rustc_data_structures::indexed_vec::IndexVec;\n@@ -1038,16 +1038,16 @@ impl<'a> LoweringContext<'a> {\n         }\n     }\n \n-    fn lower_param(&mut self,\n-                   p: &GenericAngleBracketedParam,\n-                   itctx: ImplTraitContext)\n-                   -> GenericPathParam {\n+    fn lower_path_param(&mut self,\n+                        p: &AngleBracketedParam,\n+                        itctx: ImplTraitContext)\n+                        -> PathParam {\n         match p {\n-            GenericAngleBracketedParam::Lifetime(lt) => {\n-                GenericPathParam::Lifetime(self.lower_lifetime(&lt))\n+            AngleBracketedParam::Lifetime(lt) => {\n+                PathParam::Lifetime(self.lower_lifetime(&lt))\n             }\n-            GenericAngleBracketedParam::Type(ty) => {\n-                GenericPathParam::Type(self.lower_ty(&ty, itctx))\n+            AngleBracketedParam::Type(ty) => {\n+                PathParam::Type(self.lower_ty(&ty, itctx))\n             }\n         }\n     }\n@@ -1715,7 +1715,7 @@ impl<'a> LoweringContext<'a> {\n \n         if !parameters.parenthesized && parameters.lifetimes.is_empty() {\n             path_params.parameters = (0..expected_lifetimes).map(|_| {\n-                GenericPathParam::Lifetime(self.elided_lifetime(path_span))\n+                PathParam::Lifetime(self.elided_lifetime(path_span))\n             }).chain(path_params.parameters.into_iter()).collect();\n         }\n \n@@ -1734,7 +1734,7 @@ impl<'a> LoweringContext<'a> {\n     ) -> (hir::PathParameters, bool) {\n         let &AngleBracketedParameterData { ref parameters, ref bindings, .. } = data;\n         (hir::PathParameters {\n-            parameters: parameters.iter().map(|p| self.lower_param(p, itctx)).collect(),\n+            parameters: parameters.iter().map(|p| self.lower_path_param(p, itctx)).collect(),\n             bindings: bindings.iter().map(|b| self.lower_ty_binding(b, itctx)).collect(),\n             parenthesized: false,\n         },\n@@ -1775,7 +1775,7 @@ impl<'a> LoweringContext<'a> {\n \n                 (\n                     hir::PathParameters {\n-                        parameters: hir_vec![GenericPathParam::Type(mk_tup(this, inputs, span))],\n+                        parameters: hir_vec![PathParam::Type(mk_tup(this, inputs, span))],\n                         bindings: hir_vec![\n                             hir::TypeBinding {\n                                 id: this.next_id().node_id,"}, {"sha": "455e64351e1861308b1103c5f5b9ac1249de2464", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1ed60a9173ab5b757adf239269e3aa91d30abf54/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ed60a9173ab5b757adf239269e3aa91d30abf54/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=1ed60a9173ab5b757adf239269e3aa91d30abf54", "patch": "@@ -373,15 +373,15 @@ impl PathSegment {\n }\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n-pub enum GenericPathParam {\n+pub enum PathParam {\n     Lifetime(Lifetime),\n     Type(P<Ty>),\n }\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct PathParameters {\n     /// The generic parameters for this path segment.\n-    pub parameters: HirVec<GenericPathParam>,\n+    pub parameters: HirVec<PathParam>,\n     /// Bindings (equality constraints) on associated types, if present.\n     /// E.g., `Foo<A=Bar>`.\n     pub bindings: HirVec<TypeBinding>,\n@@ -417,7 +417,7 @@ impl PathParameters {\n \n     pub fn lifetimes(&self) -> Vec<&Lifetime> {\n         self.parameters.iter().filter_map(|p| {\n-            if let GenericPathParam::Lifetime(lt) = p {\n+            if let PathParam::Lifetime(lt) = p {\n                 Some(lt)\n             } else {\n                 None\n@@ -427,7 +427,7 @@ impl PathParameters {\n \n     pub fn types(&self) -> Vec<&P<Ty>> {\n         self.parameters.iter().filter_map(|p| {\n-            if let GenericPathParam::Type(ty) = p {\n+            if let PathParam::Type(ty) = p {\n                 Some(ty)\n             } else {\n                 None"}, {"sha": "6f4a9dd59296ecb047bdce566672376adedbb260", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1ed60a9173ab5b757adf239269e3aa91d30abf54/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ed60a9173ab5b757adf239269e3aa91d30abf54/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=1ed60a9173ab5b757adf239269e3aa91d30abf54", "patch": "@@ -25,7 +25,7 @@ use syntax_pos::{self, BytePos, FileName};\n \n use hir;\n use hir::{PatKind, RegionTyParamBound, TraitTyParamBound, TraitBoundModifier, RangeEnd};\n-use hir::GenericPathParam;\n+use hir::PathParam;\n \n use std::cell::Cell;\n use std::io::{self, Write, Read};\n@@ -1732,7 +1732,7 @@ impl<'a> State<'a> {\n             };\n \n             let elide_lifetimes = path_params.parameters.iter().all(|p| {\n-                if let GenericPathParam::Lifetime(lt) = p {\n+                if let PathParam::Lifetime(lt) = p {\n                     if !lt.is_elided() {\n                         return false;\n                     }\n@@ -1742,17 +1742,21 @@ impl<'a> State<'a> {\n \n             self.commasep(Inconsistent, &path_params.parameters, |s, p| {\n                 match p {\n-                    GenericPathParam::Lifetime(lt) => {\n+                    PathParam::Lifetime(lt) => {\n                         if !elide_lifetimes {\n                             s.print_lifetime(lt)\n                         } else {\n                             Ok(())\n                         }\n                     }\n-                    GenericPathParam::Type(ty) => s.print_type(ty),\n+                    PathParam::Type(ty) => s.print_type(ty),\n                 }\n             })?;\n \n+            if !path_params.parameters.is_empty() {\n+                empty.set(false);\n+            }\n+\n             // FIXME(eddyb) This would leak into error messages, e.g.:\n             // \"non-exhaustive patterns: `Some::<..>(_)` not covered\".\n             if infer_types && false {"}, {"sha": "ee139412853b1c4ac37f16982da30f41d3df415f", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ed60a9173ab5b757adf239269e3aa91d30abf54/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ed60a9173ab5b757adf239269e3aa91d30abf54/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=1ed60a9173ab5b757adf239269e3aa91d30abf54", "patch": "@@ -180,7 +180,7 @@ impl_stable_hash_for!(struct hir::PathSegment {\n     parameters\n });\n \n-impl_stable_hash_for!(enum hir::GenericPathParam {\n+impl_stable_hash_for!(enum hir::PathParam {\n     Lifetime(lt),\n     Type(ty)\n });"}, {"sha": "9e0f98772bf14ed62d363cb340799d589249808b", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1ed60a9173ab5b757adf239269e3aa91d30abf54/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ed60a9173ab5b757adf239269e3aa91d30abf54/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=1ed60a9173ab5b757adf239269e3aa91d30abf54", "patch": "@@ -886,16 +886,16 @@ pub struct GenericParamCount {\n }\n \n #[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n-pub enum GenericParameterDef {\n+pub enum GenericParam {\n     Lifetime(RegionParameterDef),\n     Type(TypeParameterDef),\n }\n \n-impl GenericParameterDef {\n+impl GenericParam {\n     pub fn index(&self) -> u32 {\n         match self {\n-            GenericParameterDef::Lifetime(lt) => lt.index,\n-            GenericParameterDef::Type(ty)     => ty.index,\n+            GenericParam::Lifetime(lt) => lt.index,\n+            GenericParam::Type(ty)     => ty.index,\n         }\n     }\n }\n@@ -1011,7 +1011,7 @@ impl<'a, 'gcx, 'tcx> Generics {\n \n     pub fn lifetimes(&self) -> Vec<&RegionParameterDef> {\n         self.parameters.iter().filter_map(|p| {\n-            if let GenericParameterDef::Lifetime(lt) = p {\n+            if let GenericParam::Lifetime(lt) = p {\n                 Some(lt)\n             } else {\n                 None\n@@ -1021,7 +1021,7 @@ impl<'a, 'gcx, 'tcx> Generics {\n \n     pub fn types(&self) -> Vec<&TypeParameterDef> {\n         self.parameters.iter().filter_map(|p| {\n-            if let GenericParameterDef::Type(ty) = p {\n+            if let GenericParam::Type(ty) = p {\n                 Some(ty)\n             } else {\n                 None\n@@ -1030,11 +1030,11 @@ impl<'a, 'gcx, 'tcx> Generics {\n     }\n \n     pub fn parent_lifetimes(&self) -> u32 {\n-        *self.parent_parameters.get(KindIndex::Lifetime)\n+        *self.parent_params.get(KindIndex::Lifetime)\n     }\n \n     pub fn parent_types(&self) -> u32 {\n-        *self.parent_parameters.get(KindIndex::Type)\n+        *self.parent_params.get(KindIndex::Type)\n     }\n \n     pub fn region_param(&'tcx self,"}, {"sha": "a9d97df46134c796d1e145ae6c03c95f94bdd48c", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ed60a9173ab5b757adf239269e3aa91d30abf54/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ed60a9173ab5b757adf239269e3aa91d30abf54/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=1ed60a9173ab5b757adf239269e3aa91d30abf54", "patch": "@@ -973,13 +973,13 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n             segment.with_parameters(|params| {\n                 for p in &params.parameters {\n                     let (mut span_err, span, kind) = match p {\n-                        hir::GenericPathParam::Lifetime(lt) => {\n+                        hir::PathParam::Lifetime(lt) => {\n                             (struct_span_err!(self.tcx().sess, lt.span, E0110,\n                                               \"lifetime parameters are not allowed on this type\"),\n                              lt.span,\n                              \"lifetime\")\n                         }\n-                        hir::GenericPathParam::Type(ty) => {\n+                        hir::PathParam::Type(ty) => {\n                             (struct_span_err!(self.tcx().sess, ty.span, E0109,\n                                               \"type parameters are not allowed on this type\"),\n                              ty.span,"}, {"sha": "70367dd2461d2128be66453a5d8a494164772a4a", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1ed60a9173ab5b757adf239269e3aa91d30abf54/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ed60a9173ab5b757adf239269e3aa91d30abf54/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=1ed60a9173ab5b757adf239269e3aa91d30abf54", "patch": "@@ -973,11 +973,11 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                       .map(|param| (param.def_id, param.index))\n                                       .collect();\n \n-    let parent_parameters = ty::KindIndexed { lt: parent_regions, ty: parent_types };\n-    let lifetimes: Vec<ty::GenericParameterDef> =\n-        regions.into_iter().map(|lt| ty::GenericParameterDef::Lifetime(lt)).collect();\n-    let types: Vec<ty::GenericParameterDef> =\n-        types.into_iter().map(|ty| ty::GenericParameterDef::Type(ty)).collect();\n+    let parent_params = ty::KindIndexed { lt: parent_regions, ty: parent_types };\n+    let lifetimes: Vec<ty::GenericParam> =\n+        regions.into_iter().map(|lt| ty::GenericParam::Lifetime(lt)).collect();\n+    let types: Vec<ty::GenericParam> =\n+        types.into_iter().map(|ty| ty::GenericParam::Type(ty)).collect();\n     let parameters = lifetimes.into_iter().chain(types.into_iter()).collect();\n \n     tcx.alloc_generics(ty::Generics {"}, {"sha": "b886b31a08b788f6b547fc3af12183ecf36c45a5", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ed60a9173ab5b757adf239269e3aa91d30abf54/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ed60a9173ab5b757adf239269e3aa91d30abf54/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=1ed60a9173ab5b757adf239269e3aa91d30abf54", "patch": "@@ -3494,12 +3494,12 @@ impl Clean<PathParameters> for hir::PathParameters {\n             }\n         } else {\n             PathParameters::AngleBracketed {\n-                lifetimes: if self.lifetimes.iter().all(|lt| lt.is_elided()) {\n+                lifetimes: if self.lifetimes().iter().all(|lt| lt.is_elided()) {\n                     vec![]\n                 } else {\n-                    self.lifetimes.clean(cx)\n+                    self.lifetimes().iter().map(|lp| lp.clean(cx)).collect()\n                 },\n-                types: self.types.clean(cx),\n+                types: self.types().iter().map(|tp| tp.clean(cx)).collect(),\n                 bindings: self.bindings.clean(cx),\n             }\n         }"}, {"sha": "9a05c5c063a203d73dfa165588d47d5040f56485", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1ed60a9173ab5b757adf239269e3aa91d30abf54/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ed60a9173ab5b757adf239269e3aa91d30abf54/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=1ed60a9173ab5b757adf239269e3aa91d30abf54", "patch": "@@ -168,7 +168,7 @@ impl PathParameters {\n }\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n-pub enum GenericAngleBracketedParam {\n+pub enum AngleBracketedParam {\n     Lifetime(Lifetime),\n     Type(P<Ty>),\n }\n@@ -179,7 +179,7 @@ pub struct AngleBracketedParameterData {\n     /// Overall span\n     pub span: Span,\n     /// The parameters for this path segment.\n-    pub parameters: Vec<GenericAngleBracketedParam>,\n+    pub parameters: Vec<AngleBracketedParam>,\n     /// Bindings (equality constraints) on associated types, if present.\n     ///\n     /// E.g., `Foo<A=Bar>`.\n@@ -189,7 +189,7 @@ pub struct AngleBracketedParameterData {\n impl AngleBracketedParameterData {\n     pub fn lifetimes(&self) -> Vec<&Lifetime> {\n         self.parameters.iter().filter_map(|p| {\n-            if let GenericAngleBracketedParam::Lifetime(lt) = p {\n+            if let AngleBracketedParam::Lifetime(lt) = p {\n                 Some(lt)\n             } else {\n                 None\n@@ -199,7 +199,7 @@ impl AngleBracketedParameterData {\n \n     pub fn types(&self) -> Vec<&P<Ty>> {\n         self.parameters.iter().filter_map(|p| {\n-            if let GenericAngleBracketedParam::Type(ty) = p {\n+            if let AngleBracketedParam::Type(ty) = p {\n                 Some(ty)\n             } else {\n                 None"}, {"sha": "a59e34580c045f7e06826cf5dbdad6cee6b02265", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1ed60a9173ab5b757adf239269e3aa91d30abf54/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ed60a9173ab5b757adf239269e3aa91d30abf54/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=1ed60a9173ab5b757adf239269e3aa91d30abf54", "patch": "@@ -31,7 +31,7 @@ pub trait AstBuilder {\n     fn path_all(&self, sp: Span,\n                 global: bool,\n                 idents: Vec<ast::Ident>,\n-                parameters: Vec<ast::GenericAngleBracketedParam>,\n+                parameters: Vec<ast::AngleBracketedParam>,\n                 bindings: Vec<ast::TypeBinding>)\n         -> ast::Path;\n \n@@ -42,7 +42,7 @@ pub trait AstBuilder {\n     fn qpath_all(&self, self_type: P<ast::Ty>,\n                 trait_path: ast::Path,\n                 ident: ast::Ident,\n-                parameters: Vec<ast::GenericAngleBracketedParam>,\n+                parameters: Vec<ast::AngleBracketedParam>,\n                 bindings: Vec<ast::TypeBinding>)\n                 -> (ast::QSelf, ast::Path);\n \n@@ -314,7 +314,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n                 span: Span,\n                 global: bool,\n                 mut idents: Vec<ast::Ident> ,\n-                parameters: Vec<ast::GenericAngleBracketedParam>,\n+                parameters: Vec<ast::AngleBracketedParam>,\n                 bindings: Vec<ast::TypeBinding> )\n                 -> ast::Path {\n         let last_ident = idents.pop().unwrap();\n@@ -356,7 +356,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n                  self_type: P<ast::Ty>,\n                  trait_path: ast::Path,\n                  ident: ast::Ident,\n-                 parameters: Vec<ast::GenericAngleBracketedParam>,\n+                 parameters: Vec<ast::AngleBracketedParam>,\n                  bindings: Vec<ast::TypeBinding>)\n                  -> (ast::QSelf, ast::Path) {\n         let mut path = trait_path;\n@@ -424,7 +424,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n             self.path_all(DUMMY_SP,\n                           true,\n                           self.std_path(&[\"option\", \"Option\"]),\n-                          vec![ ast::GenericAngleBracketedParam::Type(ty) ],\n+                          vec![ ast::AngleBracketedParam::Type(ty) ],\n                           Vec::new()))\n     }\n "}, {"sha": "fc70ee9c38f4b2a9484384f5728492d00042c4c5", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1ed60a9173ab5b757adf239269e3aa91d30abf54/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ed60a9173ab5b757adf239269e3aa91d30abf54/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=1ed60a9173ab5b757adf239269e3aa91d30abf54", "patch": "@@ -132,7 +132,7 @@ pub trait Folder : Sized {\n         noop_fold_exprs(es, self)\n     }\n \n-    fn fold_param(&mut self, p: GenericAngleBracketedParam) -> GenericAngleBracketedParam {\n+    fn fold_param(&mut self, p: AngleBracketedParam) -> AngleBracketedParam {\n         noop_fold_param(p, self)\n     }\n \n@@ -357,15 +357,15 @@ pub fn noop_fold_ty_binding<T: Folder>(b: TypeBinding, fld: &mut T) -> TypeBindi\n     }\n }\n \n-pub fn noop_fold_param<T: Folder>(p: GenericAngleBracketedParam,\n+pub fn noop_fold_param<T: Folder>(p: AngleBracketedParam,\n                                   fld: &mut T)\n-                                  -> GenericAngleBracketedParam {\n+                                  -> AngleBracketedParam {\n     match p {\n-        GenericAngleBracketedParam::Lifetime(lt) => {\n-            GenericAngleBracketedParam::Lifetime(noop_fold_lifetime(lt, fld))\n+        AngleBracketedParam::Lifetime(lt) => {\n+            AngleBracketedParam::Lifetime(noop_fold_lifetime(lt, fld))\n         }\n-        GenericAngleBracketedParam::Type(ty) => {\n-            GenericAngleBracketedParam::Type(noop_fold_ty(ty, fld))\n+        AngleBracketedParam::Type(ty) => {\n+            AngleBracketedParam::Type(noop_fold_ty(ty, fld))\n         }\n     }\n }"}, {"sha": "e54c5445fa2f83a40de50c28d98cd9130be15c24", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1ed60a9173ab5b757adf239269e3aa91d30abf54/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ed60a9173ab5b757adf239269e3aa91d30abf54/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=1ed60a9173ab5b757adf239269e3aa91d30abf54", "patch": "@@ -22,7 +22,7 @@ use ast::{Expr, ExprKind, RangeLimits};\n use ast::{Field, FnDecl};\n use ast::{ForeignItem, ForeignItemKind, FunctionRetTy};\n use ast::GenericParam;\n-use ast::GenericAngleBracketedParam;\n+use ast::AngleBracketedParam;\n use ast::{Ident, ImplItem, IsAuto, Item, ItemKind};\n use ast::{Label, Lifetime, LifetimeDef, Lit, LitKind};\n use ast::Local;\n@@ -4938,15 +4938,15 @@ impl<'a> Parser<'a> {\n     /// Parses (possibly empty) list of lifetime and type arguments and associated type bindings,\n     /// possibly including trailing comma.\n     fn parse_generic_args(&mut self)\n-                          -> PResult<'a, (Vec<GenericAngleBracketedParam>, Vec<TypeBinding>)> {\n+                          -> PResult<'a, (Vec<AngleBracketedParam>, Vec<TypeBinding>)> {\n         let mut parameters = Vec::new();\n         let mut bindings = Vec::new();\n         let mut seen_type = false;\n         let mut seen_binding = false;\n         loop {\n             if self.check_lifetime() && self.look_ahead(1, |t| !t.is_like_plus()) {\n                 // Parse lifetime argument.\n-                parameters.push(GenericAngleBracketedParam::Lifetime(self.expect_lifetime()));\n+                parameters.push(AngleBracketedParam::Lifetime(self.expect_lifetime()));\n                 if seen_type || seen_binding {\n                     self.span_err(self.prev_span,\n                         \"lifetime parameters must be declared prior to type parameters\");\n@@ -4971,7 +4971,7 @@ impl<'a> Parser<'a> {\n                     self.span_err(ty_param.span,\n                         \"type parameters must be declared prior to associated type bindings\");\n                 }\n-                parameters.push(GenericAngleBracketedParam::Type(ty_param));\n+                parameters.push(AngleBracketedParam::Type(ty_param));\n                 seen_type = true;\n             } else {\n                 break"}, {"sha": "282b5dd545a1dc3e042c6185e0996a866e84ab8b", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1ed60a9173ab5b757adf239269e3aa91d30abf54/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ed60a9173ab5b757adf239269e3aa91d30abf54/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=1ed60a9173ab5b757adf239269e3aa91d30abf54", "patch": "@@ -13,7 +13,7 @@ pub use self::AnnNode::*;\n use rustc_target::spec::abi::{self, Abi};\n use ast::{self, BlockCheckMode, PatKind, RangeEnd, RangeSyntax};\n use ast::{SelfKind, RegionTyParamBound, TraitTyParamBound, TraitBoundModifier};\n-use ast::{Attribute, MacDelimiter, GenericAngleBracketedParam};\n+use ast::{Attribute, MacDelimiter, AngleBracketedParam};\n use util::parser::{self, AssocOp, Fixity};\n use attr;\n use codemap::{self, CodeMap};\n@@ -1017,10 +1017,10 @@ impl<'a> State<'a> {\n         Ok(())\n     }\n \n-    pub fn print_param(&mut self, param: &GenericAngleBracketedParam) -> io::Result<()> {\n+    pub fn print_param(&mut self, param: &AngleBracketedParam) -> io::Result<()> {\n         match param {\n-            GenericAngleBracketedParam::Lifetime(lt) => self.print_lifetime(lt),\n-            GenericAngleBracketedParam::Type(ty) => self.print_type(ty),\n+            AngleBracketedParam::Lifetime(lt) => self.print_lifetime(lt),\n+            AngleBracketedParam::Type(ty) => self.print_type(ty),\n         }\n     }\n "}, {"sha": "2e0551b32f73cc729b61f2857cc49866d3c7b3e4", "filename": "src/libsyntax_ext/deriving/clone.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ed60a9173ab5b757adf239269e3aa91d30abf54/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ed60a9173ab5b757adf239269e3aa91d30abf54/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs?ref=1ed60a9173ab5b757adf239269e3aa91d30abf54", "patch": "@@ -13,7 +13,7 @@ use deriving::generic::*;\n use deriving::generic::ty::*;\n \n use syntax::ast::{self, Expr, Generics, ItemKind, MetaItem, VariantData};\n-use syntax::ast::GenericAngleBracketedParam;\n+use syntax::ast::AngleBracketedParam;\n use syntax::attr;\n use syntax::ext::base::{Annotatable, ExtCtxt};\n use syntax::ext::build::AstBuilder;\n@@ -124,7 +124,7 @@ fn cs_clone_shallow(name: &str,\n         let span = span.with_ctxt(cx.backtrace());\n         let assert_path = cx.path_all(span, true,\n                                         cx.std_path(&[\"clone\", helper_name]),\n-                                        vec![GenericAngleBracketedParam::Type(ty)], vec![]);\n+                                        vec![AngleBracketedParam::Type(ty)], vec![]);\n         stmts.push(cx.stmt_let_type_only(span, cx.ty_path(assert_path)));\n     }\n     fn process_variant(cx: &mut ExtCtxt, stmts: &mut Vec<ast::Stmt>, variant: &VariantData) {"}, {"sha": "51ab9975ed986ef98bc3d9aa355c6336cb140b9a", "filename": "src/libsyntax_ext/deriving/cmp/eq.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ed60a9173ab5b757adf239269e3aa91d30abf54/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ed60a9173ab5b757adf239269e3aa91d30abf54/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs?ref=1ed60a9173ab5b757adf239269e3aa91d30abf54", "patch": "@@ -12,7 +12,7 @@ use deriving::path_std;\n use deriving::generic::*;\n use deriving::generic::ty::*;\n \n-use syntax::ast::{self, Expr, MetaItem, GenericAngleBracketedParam};\n+use syntax::ast::{self, Expr, MetaItem, AngleBracketedParam};\n use syntax::ext::base::{Annotatable, ExtCtxt};\n use syntax::ext::build::AstBuilder;\n use syntax::ptr::P;\n@@ -62,7 +62,7 @@ fn cs_total_eq_assert(cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure)\n         let span = span.with_ctxt(cx.backtrace());\n         let assert_path = cx.path_all(span, true,\n                                         cx.std_path(&[\"cmp\", helper_name]),\n-                                        vec![GenericAngleBracketedParam::Type(ty)], vec![]);\n+                                        vec![AngleBracketedParam::Type(ty)], vec![]);\n         stmts.push(cx.stmt_let_type_only(span, cx.ty_path(assert_path)));\n     }\n     fn process_variant(cx: &mut ExtCtxt, stmts: &mut Vec<ast::Stmt>, variant: &ast::VariantData) {"}, {"sha": "a7bb7ba025f71a0152b87703b06c304302067df5", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ed60a9173ab5b757adf239269e3aa91d30abf54/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ed60a9173ab5b757adf239269e3aa91d30abf54/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=1ed60a9173ab5b757adf239269e3aa91d30abf54", "patch": "@@ -193,7 +193,7 @@ use std::vec;\n \n use rustc_target::spec::abi::Abi;\n use syntax::ast::{self, BinOpKind, EnumDef, Expr, GenericParam, Generics, Ident, PatKind};\n-use syntax::ast::{VariantData, GenericAngleBracketedParam};\n+use syntax::ast::{VariantData, AngleBracketedParam};\n use syntax::attr;\n use syntax::ext::base::{Annotatable, ExtCtxt};\n use syntax::ext::build::AstBuilder;\n@@ -683,9 +683,9 @@ impl<'a> TraitDef<'a> {\n             .collect();\n \n         let self_params = self_lifetimes.into_iter()\n-                                        .map(|lt| GenericAngleBracketedParam::Lifetime(lt))\n+                                        .map(|lt| AngleBracketedParam::Lifetime(lt))\n                                         .chain(self_ty_params.into_iter().map(|ty|\n-                                            GenericAngleBracketedParam::Type(ty)))\n+                                            AngleBracketedParam::Type(ty)))\n                                         .collect();\n \n         // Create the type of `self`."}, {"sha": "d6ee7759ae63e3d9fc9c6bb74df19c18ec54dfea", "filename": "src/libsyntax_ext/deriving/generic/ty.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1ed60a9173ab5b757adf239269e3aa91d30abf54/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ed60a9173ab5b757adf239269e3aa91d30abf54/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs?ref=1ed60a9173ab5b757adf239269e3aa91d30abf54", "patch": "@@ -15,7 +15,7 @@ pub use self::PtrTy::*;\n pub use self::Ty::*;\n \n use syntax::ast;\n-use syntax::ast::{Expr, GenericParam, Generics, Ident, SelfKind, GenericAngleBracketedParam};\n+use syntax::ast::{Expr, GenericParam, Generics, Ident, SelfKind, AngleBracketedParam};\n use syntax::ext::base::ExtCtxt;\n use syntax::ext::build::AstBuilder;\n use syntax::codemap::{respan, DUMMY_SP};\n@@ -89,8 +89,8 @@ impl<'a> Path<'a> {\n         let tys: Vec<P<ast::Ty>> =\n             self.params.iter().map(|t| t.to_ty(cx, span, self_ty, self_generics)).collect();\n         let params = lt.into_iter()\n-                       .map(|lt| GenericAngleBracketedParam::Lifetime(lt))\n-                       .chain(tys.into_iter().map(|ty| GenericAngleBracketedParam::Type(ty)))\n+                       .map(|lt| AngleBracketedParam::Lifetime(lt))\n+                       .chain(tys.into_iter().map(|ty| AngleBracketedParam::Type(ty)))\n                        .collect();\n \n         match self.kind {\n@@ -206,9 +206,9 @@ impl<'a> Ty<'a> {\n                     .collect();\n \n                 let params = lifetimes.into_iter()\n-                                      .map(|lt| GenericAngleBracketedParam::Lifetime(lt))\n+                                      .map(|lt| AngleBracketedParam::Lifetime(lt))\n                                       .chain(ty_params.into_iter().map(|ty|\n-                                            GenericAngleBracketedParam::Type(ty)))\n+                                            AngleBracketedParam::Type(ty)))\n                                       .collect();\n \n                 cx.path_all(span,"}, {"sha": "78721d880fce721b993eee762d11f16928573d02", "filename": "src/libsyntax_ext/env.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ed60a9173ab5b757adf239269e3aa91d30abf54/src%2Flibsyntax_ext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ed60a9173ab5b757adf239269e3aa91d30abf54/src%2Flibsyntax_ext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fenv.rs?ref=1ed60a9173ab5b757adf239269e3aa91d30abf54", "patch": "@@ -13,7 +13,7 @@\n // interface.\n //\n \n-use syntax::ast::{self, Ident, GenericAngleBracketedParam};\n+use syntax::ast::{self, Ident, AngleBracketedParam};\n use syntax::ext::base::*;\n use syntax::ext::base;\n use syntax::ext::build::AstBuilder;\n@@ -39,7 +39,7 @@ pub fn expand_option_env<'cx>(cx: &'cx mut ExtCtxt,\n             cx.expr_path(cx.path_all(sp,\n                                      true,\n                                      cx.std_path(&[\"option\", \"Option\", \"None\"]),\n-                                     vec![GenericAngleBracketedParam::Type(cx.ty_rptr(sp,\n+                                     vec![AngleBracketedParam::Type(cx.ty_rptr(sp,\n                                                      cx.ty_ident(sp, Ident::from_str(\"str\")),\n                                                      Some(lt),\n                                                      ast::Mutability::Immutable)],"}]}