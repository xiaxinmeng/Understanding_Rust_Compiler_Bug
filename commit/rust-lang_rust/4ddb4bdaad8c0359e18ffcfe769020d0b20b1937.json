{"sha": "4ddb4bdaad8c0359e18ffcfe769020d0b20b1937", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkZGI0YmRhYWQ4YzAzNTllMThmZmNmZTc2OTAyMGQwYjIwYjE5Mzc=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-02-05T10:58:47Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-03-11T08:10:49Z"}, "message": "Eliminate all ParamEnv::empty uses in pretty printing", "tree": {"sha": "641bd2ba12b079326302bc797411a0583656c3da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/641bd2ba12b079326302bc797411a0583656c3da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ddb4bdaad8c0359e18ffcfe769020d0b20b1937", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ddb4bdaad8c0359e18ffcfe769020d0b20b1937", "html_url": "https://github.com/rust-lang/rust/commit/4ddb4bdaad8c0359e18ffcfe769020d0b20b1937", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ddb4bdaad8c0359e18ffcfe769020d0b20b1937/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b82edd279e2055a65135a2469b3ad539c5665e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b82edd279e2055a65135a2469b3ad539c5665e3", "html_url": "https://github.com/rust-lang/rust/commit/3b82edd279e2055a65135a2469b3ad539c5665e3"}], "stats": {"total": 41, "additions": 19, "deletions": 22}, "files": [{"sha": "d750fcdef89fd46bed0b115f74b03a31c329d9bc", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 19, "deletions": 22, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/4ddb4bdaad8c0359e18ffcfe769020d0b20b1937/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ddb4bdaad8c0359e18ffcfe769020d0b20b1937/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=4ddb4bdaad8c0359e18ffcfe769020d0b20b1937", "patch": "@@ -703,7 +703,7 @@ pub trait PrettyPrinter<'tcx>:\n                     // array length anon const, rustc will (with debug assertions) print the\n                     // constant's path. Which will end up here again.\n                     p!(write(\"_\"));\n-                } else if let Some(n) = sz.try_eval_usize(self.tcx(), ty::ParamEnv::empty()) {\n+                } else if let Some(n) = sz.val.try_to_bits(self.tcx().data_layout.pointer_size) {\n                     p!(write(\"{}\", n));\n                 } else {\n                     p!(write(\"_\"));\n@@ -916,26 +916,23 @@ pub trait PrettyPrinter<'tcx>:\n         define_scoped_cx!(self);\n \n         match (scalar, &ty.kind) {\n-            // Single element arrays print their element (they are `#[transparent]`) enclosed in\n-            // square brackets.\n-            (_, ty::Array(t, n)) if n.eval_usize(self.tcx(), ty::ParamEnv::empty()) == 1 => {\n-                p!(write(\"[\"));\n-                self = self.pretty_print_const_scalar(scalar, t, print_ty)?;\n-                p!(write(\"]\"));\n-            }\n             // Byte strings (&[u8; N])\n             (Scalar::Ptr(ptr), ty::Ref(_, ty::TyS { kind: ty::Array(t, n), .. }, _))\n                 if *t == self.tcx().types.u8 =>\n             {\n-                let n = n.eval_usize(self.tcx(), ty::ParamEnv::empty());\n-                let byte_str = self\n-                    .tcx()\n-                    .alloc_map\n-                    .lock()\n-                    .unwrap_memory(ptr.alloc_id)\n-                    .get_bytes(&self.tcx(), ptr, Size::from_bytes(n))\n-                    .unwrap();\n-                p!(pretty_print_byte_str(byte_str));\n+                match n.val.try_to_bits(self.tcx().data_layout.pointer_size) {\n+                    Some(n) => {\n+                        let byte_str = self\n+                            .tcx()\n+                            .alloc_map\n+                            .lock()\n+                            .unwrap_memory(ptr.alloc_id)\n+                            .get_bytes(&self.tcx(), ptr, Size::from_bytes(n as u64))\n+                            .unwrap();\n+                        p!(pretty_print_byte_str(byte_str));\n+                    }\n+                    None => self.write_str(\"_\")?,\n+                }\n             }\n             // Bool\n             (Scalar::Raw { data: 0, .. }, ty::Bool) => p!(write(\"false\")),\n@@ -961,12 +958,11 @@ pub trait PrettyPrinter<'tcx>:\n                 };\n             }\n             (Scalar::Raw { data, .. }, ty::Int(i)) => {\n-                let bit_size = Integer::from_attr(&self.tcx(), SignedInt(*i)).size().bits() as u128;\n+                let size = Integer::from_attr(&self.tcx(), SignedInt(*i)).size();\n+                let bit_size = size.bits() as u128;\n                 let min = 1u128 << (bit_size - 1);\n                 let max = min - 1;\n \n-                let ty = self.tcx().lift(&ty).unwrap();\n-                let size = self.tcx().layout_of(ty::ParamEnv::empty().and(ty)).unwrap().size;\n                 let i_str = i.name_str();\n                 match data {\n                     d if d == min => p!(write(\"std::{}::MIN\", i_str)),\n@@ -1092,8 +1088,9 @@ pub trait PrettyPrinter<'tcx>:\n                 Ok(self)\n             }\n             (ConstValue::ByRef { alloc, offset }, ty::Array(t, n)) if *t == u8_type => {\n-                let n = n.eval_usize(self.tcx(), ty::ParamEnv::empty());\n-                let n = Size::from_bytes(n);\n+                let n = n.val.try_to_bits(self.tcx().data_layout.pointer_size).unwrap();\n+                // cast is ok because we already checked for pointer size (32 or 64 bit) above\n+                let n = Size::from_bytes(n as u64);\n                 let ptr = Pointer::new(AllocId(0), offset);\n \n                 let byte_str = alloc.get_bytes(&self.tcx(), ptr, n).unwrap();"}]}