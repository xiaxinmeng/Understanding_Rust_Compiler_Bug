{"sha": "74e72e9afa58e5ba1e5a693211fc91a128e1b415", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0ZTcyZTlhZmE1OGU1YmExZTVhNjkzMjExZmM5MWExMjhlMWI0MTU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-05-10T17:47:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-10T17:47:27Z"}, "message": "Merge #4394 #4414\n\n4394: Simplify r=matklad a=Veetaha\n\n\n\n4414: Highlighting improvements r=matklad a=matthewjasper\n\n- `static mut`s are highlighted as `mutable`.\r\n- The name of the macro declared by `macro_rules!` is now highlighted.\n\nCo-authored-by: veetaha <veetaha2@gmail.com>\nCo-authored-by: Matthew Jasper <mjjasper1@gmail.com>", "tree": {"sha": "04bab5818bb3c28bbed73e9789c9e72749458f6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04bab5818bb3c28bbed73e9789c9e72749458f6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74e72e9afa58e5ba1e5a693211fc91a128e1b415", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeuD4vCRBK7hj4Ov3rIwAAdHIIAKObDn9g0F8Q2x7atw9q53+o\nsbb0N3QyknLbh5oB1oaFHFfdnavKrGFu/ZBdZVDSupxKPypzWwcTODVrLsnk/wkf\nYtaxZKy3t6m0HnI5FiRUXfYU5QeBxP2EVHrzjYcPgyeVQxTqYG3MeDkA21M9nfrt\n3AHbAwP9OPtBRP/pq5523m7Gdrki9Nrpb/ZuC+eH5dyt3K/uaWND1pHbYxf0NLGD\nZMvhrijB1VuQ4rjx9hVMmkW4R6iQgF4K41WmkNpzEeDEGleaBwM/GLdKdlKy9epm\noXfrZcxKKRd9X3OwzLr9xLA2f6fwm70eaMc24oO+HLl3sHXCWeF5+ZJpOk46yQg=\n=TxUC\n-----END PGP SIGNATURE-----\n", "payload": "tree 04bab5818bb3c28bbed73e9789c9e72749458f6c\nparent a3dbd272e01870b309fd3b783598038c1103653a\nparent 2f7c30c5158a752491dfea98de5a1c6044d104f7\nparent 22b75c4ceaefbaf26e63540b3e2d6705375c043c\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1589132847 +0000\ncommitter GitHub <noreply@github.com> 1589132847 +0000\n\nMerge #4394 #4414\n\n4394: Simplify r=matklad a=Veetaha\n\n\n\n4414: Highlighting improvements r=matklad a=matthewjasper\n\n- `static mut`s are highlighted as `mutable`.\r\n- The name of the macro declared by `macro_rules!` is now highlighted.\n\nCo-authored-by: veetaha <veetaha2@gmail.com>\nCo-authored-by: Matthew Jasper <mjjasper1@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74e72e9afa58e5ba1e5a693211fc91a128e1b415", "html_url": "https://github.com/rust-lang/rust/commit/74e72e9afa58e5ba1e5a693211fc91a128e1b415", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74e72e9afa58e5ba1e5a693211fc91a128e1b415/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3dbd272e01870b309fd3b783598038c1103653a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3dbd272e01870b309fd3b783598038c1103653a", "html_url": "https://github.com/rust-lang/rust/commit/a3dbd272e01870b309fd3b783598038c1103653a"}, {"sha": "2f7c30c5158a752491dfea98de5a1c6044d104f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f7c30c5158a752491dfea98de5a1c6044d104f7", "html_url": "https://github.com/rust-lang/rust/commit/2f7c30c5158a752491dfea98de5a1c6044d104f7"}, {"sha": "22b75c4ceaefbaf26e63540b3e2d6705375c043c", "url": "https://api.github.com/repos/rust-lang/rust/commits/22b75c4ceaefbaf26e63540b3e2d6705375c043c", "html_url": "https://github.com/rust-lang/rust/commit/22b75c4ceaefbaf26e63540b3e2d6705375c043c"}], "stats": {"total": 146, "additions": 99, "deletions": 47}, "files": [{"sha": "3fc2eccdd7b8801260a9820b35bcf1dbd61c52b2", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74e72e9afa58e5ba1e5a693211fc91a128e1b415/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74e72e9afa58e5ba1e5a693211fc91a128e1b415/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=74e72e9afa58e5ba1e5a693211fc91a128e1b415", "patch": "@@ -678,6 +678,10 @@ impl Static {\n     pub fn name(self, db: &dyn HirDatabase) -> Option<Name> {\n         db.static_data(self.id).name.clone()\n     }\n+\n+    pub fn is_mut(self, db: &dyn HirDatabase) -> bool {\n+        db.static_data(self.id).mutable\n+    }\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]"}, {"sha": "e2130d931fdb12508870ff02a90b56256eabd502", "filename": "crates/ra_hir_def/src/data.rs", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/74e72e9afa58e5ba1e5a693211fc91a128e1b415/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74e72e9afa58e5ba1e5a693211fc91a128e1b415/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdata.rs?ref=74e72e9afa58e5ba1e5a693211fc91a128e1b415", "patch": "@@ -251,11 +251,6 @@ impl ConstData {\n         Arc::new(ConstData::new(db, vis_default, node))\n     }\n \n-    pub(crate) fn static_data_query(db: &dyn DefDatabase, konst: StaticId) -> Arc<ConstData> {\n-        let node = konst.lookup(db).source(db);\n-        Arc::new(ConstData::new(db, RawVisibility::private(), node))\n-    }\n-\n     fn new<N: NameOwner + TypeAscriptionOwner + VisibilityOwner>(\n         db: &dyn DefDatabase,\n         vis_default: RawVisibility,\n@@ -270,6 +265,32 @@ impl ConstData {\n     }\n }\n \n+#[derive(Debug, Clone, PartialEq, Eq)]\n+pub struct StaticData {\n+    pub name: Option<Name>,\n+    pub type_ref: TypeRef,\n+    pub visibility: RawVisibility,\n+    pub mutable: bool,\n+}\n+\n+impl StaticData {\n+    pub(crate) fn static_data_query(db: &dyn DefDatabase, konst: StaticId) -> Arc<StaticData> {\n+        let node = konst.lookup(db).source(db);\n+        let ctx = LowerCtx::new(db, node.file_id);\n+\n+        let name = node.value.name().map(|n| n.as_name());\n+        let type_ref = TypeRef::from_ast_opt(&ctx, node.value.ascribed_type());\n+        let mutable = node.value.mut_token().is_some();\n+        let visibility = RawVisibility::from_ast_with_default(\n+            db,\n+            RawVisibility::private(),\n+            node.map(|n| n.visibility()),\n+        );\n+\n+        Arc::new(StaticData { name, type_ref, visibility, mutable })\n+    }\n+}\n+\n fn collect_items_in_macros(\n     db: &dyn DefDatabase,\n     expander: &mut Expander,"}, {"sha": "e665ab45d0330cad48dfa6e53006f7dd1c8059f4", "filename": "crates/ra_hir_def/src/db.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/74e72e9afa58e5ba1e5a693211fc91a128e1b415/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74e72e9afa58e5ba1e5a693211fc91a128e1b415/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdb.rs?ref=74e72e9afa58e5ba1e5a693211fc91a128e1b415", "patch": "@@ -10,7 +10,7 @@ use crate::{\n     adt::{EnumData, StructData},\n     attr::Attrs,\n     body::{scope::ExprScopes, Body, BodySourceMap},\n-    data::{ConstData, FunctionData, ImplData, TraitData, TypeAliasData},\n+    data::{ConstData, FunctionData, ImplData, StaticData, TraitData, TypeAliasData},\n     docs::Documentation,\n     generics::GenericParams,\n     lang_item::{LangItemTarget, LangItems},\n@@ -77,8 +77,8 @@ pub trait DefDatabase: InternDatabase + AstDatabase + Upcast<dyn AstDatabase> {\n     #[salsa::invoke(ConstData::const_data_query)]\n     fn const_data(&self, konst: ConstId) -> Arc<ConstData>;\n \n-    #[salsa::invoke(ConstData::static_data_query)]\n-    fn static_data(&self, konst: StaticId) -> Arc<ConstData>;\n+    #[salsa::invoke(StaticData::static_data_query)]\n+    fn static_data(&self, konst: StaticId) -> Arc<StaticData>;\n \n     #[salsa::invoke(Body::body_with_source_map_query)]\n     fn body_with_source_map(&self, def: DefWithBodyId) -> (Arc<Body>, Arc<BodySourceMap>);"}, {"sha": "fb7c6cd8c14cb9445d04c9537dc25243a9eaa7f0", "filename": "crates/ra_hir_ty/src/infer.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/74e72e9afa58e5ba1e5a693211fc91a128e1b415/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74e72e9afa58e5ba1e5a693211fc91a128e1b415/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs?ref=74e72e9afa58e5ba1e5a693211fc91a128e1b415", "patch": "@@ -22,7 +22,7 @@ use rustc_hash::FxHashMap;\n \n use hir_def::{\n     body::Body,\n-    data::{ConstData, FunctionData},\n+    data::{ConstData, FunctionData, StaticData},\n     expr::{BindingAnnotation, ExprId, PatId},\n     lang_item::LangItemTarget,\n     path::{path, Path},\n@@ -71,7 +71,7 @@ pub(crate) fn infer_query(db: &dyn HirDatabase, def: DefWithBodyId) -> Arc<Infer\n     match def {\n         DefWithBodyId::ConstId(c) => ctx.collect_const(&db.const_data(c)),\n         DefWithBodyId::FunctionId(f) => ctx.collect_fn(&db.function_data(f)),\n-        DefWithBodyId::StaticId(s) => ctx.collect_const(&db.static_data(s)),\n+        DefWithBodyId::StaticId(s) => ctx.collect_static(&db.static_data(s)),\n     }\n \n     ctx.infer_body();\n@@ -485,6 +485,10 @@ impl<'a> InferenceContext<'a> {\n         self.return_ty = self.make_ty(&data.type_ref);\n     }\n \n+    fn collect_static(&mut self, data: &StaticData) {\n+        self.return_ty = self.make_ty(&data.type_ref);\n+    }\n+\n     fn collect_fn(&mut self, data: &FunctionData) {\n         let body = Arc::clone(&self.body); // avoid borrow checker problem\n         let ctx = crate::lower::TyLoweringContext::new(self.db, &self.resolver)"}, {"sha": "752b487e82fa76530f534f5cdb66f8763b169f76", "filename": "crates/ra_ide/src/snapshots/highlight_strings.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74e72e9afa58e5ba1e5a693211fc91a128e1b415/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_strings.html", "raw_url": "https://github.com/rust-lang/rust/raw/74e72e9afa58e5ba1e5a693211fc91a128e1b415/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_strings.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_strings.html?ref=74e72e9afa58e5ba1e5a693211fc91a128e1b415", "patch": "@@ -27,13 +27,13 @@\n .keyword.unsafe     { color: #BC8383; font-weight: bold; }\n .control            { font-style: italic; }\n </style>\n-<pre><code><span class=\"macro\">macro_rules!</span> println {\n+<pre><code><span class=\"macro\">macro_rules!</span> <span class=\"macro declaration\">println</span> {\n     ($($arg:tt)*) =&gt; ({\n         $<span class=\"keyword\">crate</span>::io::_print($<span class=\"keyword\">crate</span>::format_args_nl!($($arg)*));\n     })\n }\n #[rustc_builtin_macro]\n-<span class=\"macro\">macro_rules!</span> format_args_nl {\n+<span class=\"macro\">macro_rules!</span> <span class=\"macro declaration\">format_args_nl</span> {\n     ($fmt:expr) =&gt; {{ <span class=\"comment\">/* compiler built-in */</span> }};\n     ($fmt:expr, $($args:tt)*) =&gt; {{ <span class=\"comment\">/* compiler built-in */</span> }};\n }"}, {"sha": "4c27aade40255f703f0f65da1510fd5a7bba04f6", "filename": "crates/ra_ide/src/snapshots/highlighting.html", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/74e72e9afa58e5ba1e5a693211fc91a128e1b415/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/74e72e9afa58e5ba1e5a693211fc91a128e1b415/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlighting.html?ref=74e72e9afa58e5ba1e5a693211fc91a128e1b415", "patch": "@@ -33,11 +33,13 @@\n     <span class=\"keyword\">pub</span> <span class=\"field declaration\">y</span>: <span class=\"builtin_type\">i32</span>,\n }\n \n+<span class=\"keyword\">static</span> <span class=\"keyword\">mut</span> <span class=\"static declaration mutable\">STATIC_MUT</span>: <span class=\"builtin_type\">i32</span> = <span class=\"numeric_literal\">0</span>;\n+\n <span class=\"keyword\">fn</span> <span class=\"function declaration\">foo</span>&lt;<span class=\"lifetime declaration\">'a</span>, <span class=\"type_param declaration\">T</span>&gt;() -&gt; <span class=\"type_param\">T</span> {\n     <span class=\"function\">foo</span>::&lt;<span class=\"lifetime\">'a</span>, <span class=\"builtin_type\">i32</span>&gt;()\n }\n \n-<span class=\"macro\">macro_rules!</span> def_fn {\n+<span class=\"macro\">macro_rules!</span> <span class=\"macro declaration\">def_fn</span> {\n     ($($tt:tt)*) =&gt; {$($tt)*}\n }\n \n@@ -56,7 +58,10 @@\n         <span class=\"keyword\">let</span> <span class=\"variable declaration\">x</span> = <span class=\"numeric_literal\">92</span>;\n         <span class=\"variable mutable\">vec</span>.<span class=\"unresolved_reference\">push</span>(<span class=\"struct\">Foo</span> { <span class=\"field\">x</span>, <span class=\"field\">y</span>: <span class=\"numeric_literal\">1</span> });\n     }\n-    <span class=\"keyword unsafe\">unsafe</span> { <span class=\"variable mutable\">vec</span>.<span class=\"unresolved_reference\">set_len</span>(<span class=\"numeric_literal\">0</span>); }\n+    <span class=\"keyword unsafe\">unsafe</span> {\n+        <span class=\"variable mutable\">vec</span>.<span class=\"unresolved_reference\">set_len</span>(<span class=\"numeric_literal\">0</span>);\n+        <span class=\"static mutable\">STATIC_MUT</span> = <span class=\"numeric_literal\">1</span>;\n+    }\n \n     <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\">x</span> = <span class=\"numeric_literal\">42</span>;\n     <span class=\"keyword\">let</span> <span class=\"variable declaration mutable\">y</span> = &<span class=\"keyword\">mut</span> <span class=\"variable mutable\">x</span>;"}, {"sha": "d53a39f57b526963ca12ecfc3340411920f3fb26", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/74e72e9afa58e5ba1e5a693211fc91a128e1b415/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74e72e9afa58e5ba1e5a693211fc91a128e1b415/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=74e72e9afa58e5ba1e5a693211fc91a128e1b415", "patch": "@@ -167,6 +167,19 @@ pub(crate) fn highlight(\n                         binding_hash: None,\n                     });\n                 }\n+                if let Some(name) = mc.is_macro_rules() {\n+                    if let Some((highlight, binding_hash)) = highlight_element(\n+                        &sema,\n+                        &mut bindings_shadow_count,\n+                        name.syntax().clone().into(),\n+                    ) {\n+                        stack.add(HighlightedRange {\n+                            range: name.syntax().text_range(),\n+                            highlight,\n+                            binding_hash,\n+                        });\n+                    }\n+                }\n                 continue;\n             }\n             WalkEvent::Leave(Some(mc)) => {\n@@ -431,10 +444,16 @@ fn highlight_name(db: &RootDatabase, def: Definition) -> Highlight {\n             hir::ModuleDef::Adt(hir::Adt::Union(_)) => HighlightTag::Union,\n             hir::ModuleDef::EnumVariant(_) => HighlightTag::EnumVariant,\n             hir::ModuleDef::Const(_) => HighlightTag::Constant,\n-            hir::ModuleDef::Static(_) => HighlightTag::Static,\n             hir::ModuleDef::Trait(_) => HighlightTag::Trait,\n             hir::ModuleDef::TypeAlias(_) => HighlightTag::TypeAlias,\n             hir::ModuleDef::BuiltinType(_) => HighlightTag::BuiltinType,\n+            hir::ModuleDef::Static(s) => {\n+                let mut h = Highlight::new(HighlightTag::Static);\n+                if s.is_mut(db) {\n+                    h |= HighlightModifier::Mutable;\n+                }\n+                return h;\n+            }\n         },\n         Definition::SelfType(_) => HighlightTag::SelfType,\n         Definition::TypeParam(_) => HighlightTag::TypeParam,"}, {"sha": "13894869c8bfe16c07c18649413230d4813637dd", "filename": "crates/ra_ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/74e72e9afa58e5ba1e5a693211fc91a128e1b415/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74e72e9afa58e5ba1e5a693211fc91a128e1b415/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=74e72e9afa58e5ba1e5a693211fc91a128e1b415", "patch": "@@ -17,6 +17,8 @@ struct Foo {\n     pub y: i32,\n }\n \n+static mut STATIC_MUT: i32 = 0;\n+\n fn foo<'a, T>() -> T {\n     foo::<'a, i32>()\n }\n@@ -40,7 +42,10 @@ fn main() {\n         let x = 92;\n         vec.push(Foo { x, y: 1 });\n     }\n-    unsafe { vec.set_len(0); }\n+    unsafe {\n+        vec.set_len(0);\n+        STATIC_MUT = 1;\n+    }\n \n     let mut x = 42;\n     let y = &mut x;"}, {"sha": "3d2865e09c8f5a79a0513d0c707604f0a1b64fe9", "filename": "crates/ra_toolchain/src/lib.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/74e72e9afa58e5ba1e5a693211fc91a128e1b415/crates%2Fra_toolchain%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74e72e9afa58e5ba1e5a693211fc91a128e1b415/crates%2Fra_toolchain%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_toolchain%2Fsrc%2Flib.rs?ref=74e72e9afa58e5ba1e5a693211fc91a128e1b415", "patch": "@@ -53,10 +53,9 @@ fn lookup_in_path(exec: &str) -> bool {\n     let paths = env::var_os(\"PATH\").unwrap_or_default();\n     let mut candidates = env::split_paths(&paths).flat_map(|path| {\n         let candidate = path.join(&exec);\n-        let with_exe = if env::consts::EXE_EXTENSION == \"\" {\n-            None\n-        } else {\n-            Some(candidate.with_extension(env::consts::EXE_EXTENSION))\n+        let with_exe = match env::consts::EXE_EXTENSION {\n+            \"\" => None,\n+            it => Some(candidate.with_extension(it)),\n         };\n         iter::once(candidate).chain(with_exe)\n     });"}, {"sha": "3f12dd71830c917308d347b2590e0e3fab497b6f", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/74e72e9afa58e5ba1e5a693211fc91a128e1b415/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74e72e9afa58e5ba1e5a693211fc91a128e1b415/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=74e72e9afa58e5ba1e5a693211fc91a128e1b415", "patch": "@@ -174,7 +174,6 @@ pub fn main_loop(ws_roots: Vec<PathBuf>, config: Config, connection: Connection)\n     };\n \n     loop_state.roots_total = world_state.vfs.read().n_roots();\n-    loop_state.roots_scanned = 0;\n \n     let pool = ThreadPool::default();\n     let (task_sender, task_receiver) = unbounded::<Task>();\n@@ -401,10 +400,12 @@ fn loop_turn(\n     }\n \n     let max_in_flight_libs = pool.max_count().saturating_sub(2).max(1);\n-    while loop_state.in_flight_libraries < max_in_flight_libs\n-        && !loop_state.pending_libraries.is_empty()\n-    {\n-        let (root, files) = loop_state.pending_libraries.pop().unwrap();\n+    while loop_state.in_flight_libraries < max_in_flight_libs {\n+        let (root, files) = match loop_state.pending_libraries.pop() {\n+            Some(it) => it,\n+            None => break,\n+        };\n+\n         loop_state.in_flight_libraries += 1;\n         let sender = libdata_sender.clone();\n         pool.execute(move || {"}, {"sha": "6333c15b2bba0cdd0405b13119081a28f732e6c4", "filename": "crates/rust-analyzer/src/world.rs", "status": "modified", "additions": 16, "deletions": 22, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/74e72e9afa58e5ba1e5a693211fc91a128e1b415/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74e72e9afa58e5ba1e5a693211fc91a128e1b415/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fworld.rs?ref=74e72e9afa58e5ba1e5a693211fc91a128e1b415", "patch": "@@ -137,15 +137,6 @@ impl WorldState {\n             opts\n         };\n \n-        // Create crate graph from all the workspaces\n-        let mut crate_graph = CrateGraph::default();\n-        let mut load = |path: &std::path::Path| {\n-            // Some path from metadata will be non canonicalized, e.g. /foo/../bar/lib.rs\n-            let path = path.canonicalize().ok()?;\n-            let vfs_file = vfs.load(&path);\n-            vfs_file.map(|f| FileId(f.0))\n-        };\n-\n         let proc_macro_client = match &config.proc_macro_srv {\n             None => ProcMacroClient::dummy(),\n             Some((path, args)) => match ProcMacroClient::extern_process(path.into(), args) {\n@@ -161,19 +152,22 @@ impl WorldState {\n             },\n         };\n \n-        workspaces\n-            .iter()\n-            .map(|ws| {\n-                ws.to_crate_graph(\n-                    &default_cfg_options,\n-                    &extern_source_roots,\n-                    &proc_macro_client,\n-                    &mut load,\n-                )\n-            })\n-            .for_each(|graph| {\n-                crate_graph.extend(graph);\n-            });\n+        // Create crate graph from all the workspaces\n+        let mut crate_graph = CrateGraph::default();\n+        let mut load = |path: &Path| {\n+            // Some path from metadata will be non canonicalized, e.g. /foo/../bar/lib.rs\n+            let path = path.canonicalize().ok()?;\n+            let vfs_file = vfs.load(&path);\n+            vfs_file.map(|f| FileId(f.0))\n+        };\n+        for ws in workspaces.iter() {\n+            crate_graph.extend(ws.to_crate_graph(\n+                &default_cfg_options,\n+                &extern_source_roots,\n+                &proc_macro_client,\n+                &mut load,\n+            ));\n+        }\n         change.set_crate_graph(crate_graph);\n \n         let flycheck = config.check.as_ref().and_then(|c| create_flycheck(&workspaces, c));"}]}