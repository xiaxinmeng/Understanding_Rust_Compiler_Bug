{"sha": "e7e5feb637ca0e130f2890800da054771410d321", "node_id": "C_kwDOAAsO6NoAKGU3ZTVmZWI2MzdjYTBlMTMwZjI4OTA4MDBkYTA1NDc3MTQxMGQzMjE", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-06-26T16:01:05Z"}, "committer": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-09-08T21:57:34Z"}, "message": "In ReverseMapper, don't fallback to ReEmpty, instead ReStatic", "tree": {"sha": "88756ded9b6a2fe8d347179f338380aa6f7dd608", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88756ded9b6a2fe8d347179f338380aa6f7dd608"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7e5feb637ca0e130f2890800da054771410d321", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7e5feb637ca0e130f2890800da054771410d321", "html_url": "https://github.com/rust-lang/rust/commit/e7e5feb637ca0e130f2890800da054771410d321", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7e5feb637ca0e130f2890800da054771410d321/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f29c91bf1245fc01853b0f1d8913139b3b355f63", "url": "https://api.github.com/repos/rust-lang/rust/commits/f29c91bf1245fc01853b0f1d8913139b3b355f63", "html_url": "https://github.com/rust-lang/rust/commit/f29c91bf1245fc01853b0f1d8913139b3b355f63"}], "stats": {"total": 41, "additions": 12, "deletions": 29}, "files": [{"sha": "0b8ed0fcf270906fd5023095c21ffe287c96ce56", "filename": "compiler/rustc_borrowck/src/region_infer/opaque_types.rs", "status": "modified", "additions": 11, "deletions": 21, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5feb637ca0e130f2890800da054771410d321/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5feb637ca0e130f2890800da054771410d321/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs?ref=e7e5feb637ca0e130f2890800da054771410d321", "patch": "@@ -433,7 +433,7 @@ struct ReverseMapper<'tcx> {\n \n     key: ty::OpaqueTypeKey<'tcx>,\n     map: FxHashMap<GenericArg<'tcx>, GenericArg<'tcx>>,\n-    map_missing_regions_to_empty: bool,\n+    do_not_error: bool,\n \n     /// initially `Some`, set to `None` once error has been reported\n     hidden_ty: Option<Ty<'tcx>>,\n@@ -450,29 +450,19 @@ impl<'tcx> ReverseMapper<'tcx> {\n         hidden_ty: Ty<'tcx>,\n         span: Span,\n     ) -> Self {\n-        Self {\n-            tcx,\n-            key,\n-            map,\n-            map_missing_regions_to_empty: false,\n-            hidden_ty: Some(hidden_ty),\n-            span,\n-        }\n+        Self { tcx, key, map, do_not_error: false, hidden_ty: Some(hidden_ty), span }\n     }\n \n-    fn fold_kind_mapping_missing_regions_to_empty(\n-        &mut self,\n-        kind: GenericArg<'tcx>,\n-    ) -> GenericArg<'tcx> {\n-        assert!(!self.map_missing_regions_to_empty);\n-        self.map_missing_regions_to_empty = true;\n+    fn fold_kind_no_missing_regions_error(&mut self, kind: GenericArg<'tcx>) -> GenericArg<'tcx> {\n+        assert!(!self.do_not_error);\n+        self.do_not_error = true;\n         let kind = kind.fold_with(self);\n-        self.map_missing_regions_to_empty = false;\n+        self.do_not_error = false;\n         kind\n     }\n \n     fn fold_kind_normally(&mut self, kind: GenericArg<'tcx>) -> GenericArg<'tcx> {\n-        assert!(!self.map_missing_regions_to_empty);\n+        assert!(!self.do_not_error);\n         kind.fold_with(self)\n     }\n }\n@@ -510,7 +500,7 @@ impl<'tcx> TypeFolder<'tcx> for ReverseMapper<'tcx> {\n         match self.map.get(&r.into()).map(|k| k.unpack()) {\n             Some(GenericArgKind::Lifetime(r1)) => r1,\n             Some(u) => panic!(\"region mapped to unexpected kind: {:?}\", u),\n-            None if self.map_missing_regions_to_empty => self.tcx.lifetimes.re_root_empty,\n+            None if self.do_not_error => self.tcx.lifetimes.re_static,\n             None if generics.parent.is_some() => {\n                 if let Some(hidden_ty) = self.hidden_ty.take() {\n                     unexpected_hidden_region_diagnostic(\n@@ -522,7 +512,7 @@ impl<'tcx> TypeFolder<'tcx> for ReverseMapper<'tcx> {\n                     )\n                     .emit();\n                 }\n-                self.tcx.lifetimes.re_root_empty\n+                self.tcx.lifetimes.re_static\n             }\n             None => {\n                 self.tcx\n@@ -574,7 +564,7 @@ impl<'tcx> TypeFolder<'tcx> for ReverseMapper<'tcx> {\n                 let substs = self.tcx.mk_substs(substs.iter().enumerate().map(|(index, kind)| {\n                     if index < generics.parent_count {\n                         // Accommodate missing regions in the parent kinds...\n-                        self.fold_kind_mapping_missing_regions_to_empty(kind)\n+                        self.fold_kind_no_missing_regions_error(kind)\n                     } else {\n                         // ...but not elsewhere.\n                         self.fold_kind_normally(kind)\n@@ -589,7 +579,7 @@ impl<'tcx> TypeFolder<'tcx> for ReverseMapper<'tcx> {\n                 let substs = self.tcx.mk_substs(substs.iter().enumerate().map(|(index, kind)| {\n                     if index < generics.parent_count {\n                         // Accommodate missing regions in the parent kinds...\n-                        self.fold_kind_mapping_missing_regions_to_empty(kind)\n+                        self.fold_kind_no_missing_regions_error(kind)\n                     } else {\n                         // ...but not elsewhere.\n                         self.fold_kind_normally(kind)"}, {"sha": "afb2d5b2ba5e5a00eee16751240184c83da06320", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e7e5feb637ca0e130f2890800da054771410d321/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e5feb637ca0e130f2890800da054771410d321/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=e7e5feb637ca0e130f2890800da054771410d321", "patch": "@@ -276,9 +276,6 @@ pub struct CommonTypes<'tcx> {\n }\n \n pub struct CommonLifetimes<'tcx> {\n-    /// `ReEmpty` in the root universe.\n-    pub re_root_empty: Region<'tcx>,\n-\n     /// `ReStatic`\n     pub re_static: Region<'tcx>,\n \n@@ -987,11 +984,7 @@ impl<'tcx> CommonLifetimes<'tcx> {\n             ))\n         };\n \n-        CommonLifetimes {\n-            re_root_empty: mk(ty::ReEmpty(ty::UniverseIndex::ROOT)),\n-            re_static: mk(ty::ReStatic),\n-            re_erased: mk(ty::ReErased),\n-        }\n+        CommonLifetimes { re_static: mk(ty::ReStatic), re_erased: mk(ty::ReErased) }\n     }\n }\n "}]}