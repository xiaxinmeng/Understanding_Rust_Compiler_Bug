{"sha": "1a5cc2552536eabe8c26a0592e71de5f7e3e0ebd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhNWNjMjU1MjUzNmVhYmU4YzI2YTA1OTJlNzFkZTVmN2UzZTBlYmQ=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-03-29T17:56:25Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-06-04T19:25:05Z"}, "message": "Remove unused code from `rustc_data_structures::sync`\n\nFound using https://github.com/est31/warnalyzer.", "tree": {"sha": "ed8ceed488c0f84715095460fa8da434bb017e0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed8ceed488c0f84715095460fa8da434bb017e0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a5cc2552536eabe8c26a0592e71de5f7e3e0ebd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a5cc2552536eabe8c26a0592e71de5f7e3e0ebd", "html_url": "https://github.com/rust-lang/rust/commit/1a5cc2552536eabe8c26a0592e71de5f7e3e0ebd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a5cc2552536eabe8c26a0592e71de5f7e3e0ebd/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4c2ab57a43737867982fafc8cfacd9b069fee96", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4c2ab57a43737867982fafc8cfacd9b069fee96", "html_url": "https://github.com/rust-lang/rust/commit/c4c2ab57a43737867982fafc8cfacd9b069fee96"}], "stats": {"total": 110, "additions": 0, "deletions": 110}, "files": [{"sha": "357686342bed0a59ef3211c838acf825e6c6467d", "filename": "compiler/rustc_data_structures/src/sync.rs", "status": "modified", "additions": 0, "deletions": 110, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/1a5cc2552536eabe8c26a0592e71de5f7e3e0ebd/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a5cc2552536eabe8c26a0592e71de5f7e3e0ebd/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs?ref=1a5cc2552536eabe8c26a0592e71de5f7e3e0ebd", "patch": "@@ -43,46 +43,6 @@ cfg_if! {\n         use std::ops::Add;\n         use std::panic::{resume_unwind, catch_unwind, AssertUnwindSafe};\n \n-        /// This is a single threaded variant of AtomicCell provided by crossbeam.\n-        /// Unlike `Atomic` this is intended for all `Copy` types,\n-        /// but it lacks the explicit ordering arguments.\n-        #[derive(Debug)]\n-        pub struct AtomicCell<T: Copy>(Cell<T>);\n-\n-        impl<T: Copy> AtomicCell<T> {\n-            #[inline]\n-            pub fn new(v: T) -> Self {\n-                AtomicCell(Cell::new(v))\n-            }\n-\n-            #[inline]\n-            pub fn get_mut(&mut self) -> &mut T {\n-                self.0.get_mut()\n-            }\n-        }\n-\n-        impl<T: Copy> AtomicCell<T> {\n-            #[inline]\n-            pub fn into_inner(self) -> T {\n-                self.0.into_inner()\n-            }\n-\n-            #[inline]\n-            pub fn load(&self) -> T {\n-                self.0.get()\n-            }\n-\n-            #[inline]\n-            pub fn store(&self, val: T) {\n-                self.0.set(val)\n-            }\n-\n-            #[inline]\n-            pub fn swap(&self, val: T) -> T {\n-                self.0.replace(val)\n-            }\n-        }\n-\n         /// This is a single threaded variant of `AtomicU64`, `AtomicUsize`, etc.\n         /// It differs from `AtomicCell` in that it has explicit ordering arguments\n         /// and is only intended for use with the native atomic types.\n@@ -99,11 +59,6 @@ cfg_if! {\n         }\n \n         impl<T: Copy> Atomic<T> {\n-            #[inline]\n-            pub fn into_inner(self) -> T {\n-                self.0.into_inner()\n-            }\n-\n             #[inline]\n             pub fn load(&self, _: Ordering) -> T {\n                 self.0.get()\n@@ -113,11 +68,6 @@ cfg_if! {\n             pub fn store(&self, val: T, _: Ordering) {\n                 self.0.set(val)\n             }\n-\n-            #[inline]\n-            pub fn swap(&self, val: T, _: Ordering) -> T {\n-                self.0.replace(val)\n-            }\n         }\n \n         impl<T: Copy + PartialEq> Atomic<T> {\n@@ -159,22 +109,6 @@ cfg_if! {\n             (oper_a(), oper_b())\n         }\n \n-        pub struct SerialScope;\n-\n-        impl SerialScope {\n-            pub fn spawn<F>(&self, f: F)\n-                where F: FnOnce(&SerialScope)\n-            {\n-                f(self)\n-            }\n-        }\n-\n-        pub fn scope<F, R>(f: F) -> R\n-            where F: FnOnce(&SerialScope) -> R\n-        {\n-            f(&SerialScope)\n-        }\n-\n         #[macro_export]\n         macro_rules! parallel {\n             ($($blocks:tt),*) => {\n@@ -246,12 +180,6 @@ cfg_if! {\n             pub fn new<F: FnMut(usize) -> T>(mut f: F) -> WorkerLocal<T> {\n                 WorkerLocal(OneThread::new(f(0)))\n             }\n-\n-            /// Returns the worker-local value for each thread\n-            #[inline]\n-            pub fn into_inner(self) -> Vec<T> {\n-                vec![OneThread::into_inner(self.0)]\n-            }\n         }\n \n         impl<T> Deref for WorkerLocal<T> {\n@@ -279,16 +207,6 @@ cfg_if! {\n                 self.0\n             }\n \n-            #[inline(always)]\n-            pub fn get_mut(&mut self) -> &mut T {\n-                &mut self.0\n-            }\n-\n-            #[inline(always)]\n-            pub fn lock(&self) -> &T {\n-                &self.0\n-            }\n-\n             #[inline(always)]\n             pub fn lock_mut(&mut self) -> &mut T {\n                 &mut self.0\n@@ -318,8 +236,6 @@ cfg_if! {\n \n         pub use std::sync::atomic::{AtomicBool, AtomicUsize, AtomicU32, AtomicU64};\n \n-        pub use crossbeam_utils::atomic::AtomicCell;\n-\n         pub use std::sync::Arc as Lrc;\n         pub use std::sync::Weak as Weak;\n \n@@ -521,16 +437,6 @@ impl<T> RwLock<T> {\n         RwLock(InnerRwLock::new(inner))\n     }\n \n-    #[inline(always)]\n-    pub fn into_inner(self) -> T {\n-        self.0.into_inner()\n-    }\n-\n-    #[inline(always)]\n-    pub fn get_mut(&mut self) -> &mut T {\n-        self.0.get_mut()\n-    }\n-\n     #[cfg(not(parallel_compiler))]\n     #[inline(always)]\n     pub fn read(&self) -> ReadGuard<'_, T> {\n@@ -547,11 +453,6 @@ impl<T> RwLock<T> {\n         }\n     }\n \n-    #[inline(always)]\n-    pub fn with_read_lock<F: FnOnce(&T) -> R, R>(&self, f: F) -> R {\n-        f(&*self.read())\n-    }\n-\n     #[cfg(not(parallel_compiler))]\n     #[inline(always)]\n     pub fn try_write(&self) -> Result<WriteGuard<'_, T>, ()> {\n@@ -580,11 +481,6 @@ impl<T> RwLock<T> {\n         }\n     }\n \n-    #[inline(always)]\n-    pub fn with_write_lock<F: FnOnce(&mut T) -> R, R>(&self, f: F) -> R {\n-        f(&mut *self.write())\n-    }\n-\n     #[inline(always)]\n     pub fn borrow(&self) -> ReadGuard<'_, T> {\n         self.read()\n@@ -633,12 +529,6 @@ impl<T> OneThread<T> {\n             inner,\n         }\n     }\n-\n-    #[inline(always)]\n-    pub fn into_inner(value: Self) -> T {\n-        value.check();\n-        value.inner\n-    }\n }\n \n impl<T> Deref for OneThread<T> {"}]}