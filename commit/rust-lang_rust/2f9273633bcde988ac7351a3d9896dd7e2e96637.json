{"sha": "2f9273633bcde988ac7351a3d9896dd7e2e96637", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmOTI3MzYzM2JjZGU5ODhhYzczNTFhM2Q5ODk2ZGQ3ZTJlOTY2Mzc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-08-03T14:36:06Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-08-03T14:36:06Z"}, "message": "feat: filter out duplicate macro completions\n\ncloses #9303", "tree": {"sha": "dd6814306f10521098ceab86bbfbe2be417a9b15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd6814306f10521098ceab86bbfbe2be417a9b15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f9273633bcde988ac7351a3d9896dd7e2e96637", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f9273633bcde988ac7351a3d9896dd7e2e96637", "html_url": "https://github.com/rust-lang/rust/commit/2f9273633bcde988ac7351a3d9896dd7e2e96637", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f9273633bcde988ac7351a3d9896dd7e2e96637/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "314e2e75c09cc6115fc35fd94433b146eb3e325a", "url": "https://api.github.com/repos/rust-lang/rust/commits/314e2e75c09cc6115fc35fd94433b146eb3e325a", "html_url": "https://github.com/rust-lang/rust/commit/314e2e75c09cc6115fc35fd94433b146eb3e325a"}], "stats": {"total": 228, "additions": 133, "deletions": 95}, "files": [{"sha": "2373e79d82a8050004dcb4c9502671c1fc3e7ff0", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f9273633bcde988ac7351a3d9896dd7e2e96637/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/2f9273633bcde988ac7351a3d9896dd7e2e96637/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=2f9273633bcde988ac7351a3d9896dd7e2e96637", "patch": "@@ -460,6 +460,7 @@ dependencies = [\n  \"hir_def\",\n  \"hir_expand\",\n  \"hir_ty\",\n+ \"indexmap\",\n  \"itertools\",\n  \"log\",\n  \"once_cell\","}, {"sha": "b9561e6f9e2330d0ef3d6e8013228aedc51a52fa", "filename": "crates/hir/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f9273633bcde988ac7351a3d9896dd7e2e96637/crates%2Fhir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2f9273633bcde988ac7351a3d9896dd7e2e96637/crates%2Fhir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2FCargo.toml?ref=2f9273633bcde988ac7351a3d9896dd7e2e96637", "patch": "@@ -16,6 +16,7 @@ arrayvec = \"0.7\"\n itertools = \"0.10.0\"\n smallvec = \"1.4.0\"\n once_cell = \"1\"\n+indexmap = \"1.7\"\n \n stdx = { path = \"../stdx\", version = \"0.0.0\" }\n syntax = { path = \"../syntax\", version = \"0.0.0\" }"}, {"sha": "354fb276a511856ef5dbf9065b0d93a40876eed1", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 21, "deletions": 24, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/2f9273633bcde988ac7351a3d9896dd7e2e96637/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f9273633bcde988ac7351a3d9896dd7e2e96637/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=2f9273633bcde988ac7351a3d9896dd7e2e96637", "patch": "@@ -923,31 +923,28 @@ impl<'a> SemanticsScope<'a> {\n     }\n \n     pub fn process_all_names(&self, f: &mut dyn FnMut(Name, ScopeDef)) {\n-        let resolver = &self.resolver;\n-\n-        resolver.process_all_names(self.db.upcast(), &mut |name, def| {\n-            let def = match def {\n-                resolver::ScopeDef::PerNs(it) => {\n-                    let items = ScopeDef::all_items(it);\n-                    for item in items {\n-                        f(name.clone(), item);\n+        let scope = self.resolver.names_in_scope(self.db.upcast());\n+        for (name, entries) in scope {\n+            for entry in entries {\n+                let def = match entry {\n+                    resolver::ScopeDef::ModuleDef(it) => ScopeDef::ModuleDef(it.into()),\n+                    resolver::ScopeDef::MacroDef(it) => ScopeDef::MacroDef(it.into()),\n+                    resolver::ScopeDef::Unknown => ScopeDef::Unknown,\n+                    resolver::ScopeDef::ImplSelfType(it) => ScopeDef::ImplSelfType(it.into()),\n+                    resolver::ScopeDef::AdtSelfType(it) => ScopeDef::AdtSelfType(it.into()),\n+                    resolver::ScopeDef::GenericParam(id) => ScopeDef::GenericParam(id.into()),\n+                    resolver::ScopeDef::Local(pat_id) => {\n+                        let parent = self.resolver.body_owner().unwrap();\n+                        ScopeDef::Local(Local { parent, pat_id })\n                     }\n-                    return;\n-                }\n-                resolver::ScopeDef::ImplSelfType(it) => ScopeDef::ImplSelfType(it.into()),\n-                resolver::ScopeDef::AdtSelfType(it) => ScopeDef::AdtSelfType(it.into()),\n-                resolver::ScopeDef::GenericParam(id) => ScopeDef::GenericParam(id.into()),\n-                resolver::ScopeDef::Local(pat_id) => {\n-                    let parent = resolver.body_owner().unwrap();\n-                    ScopeDef::Local(Local { parent, pat_id })\n-                }\n-                resolver::ScopeDef::Label(label_id) => {\n-                    let parent = resolver.body_owner().unwrap();\n-                    ScopeDef::Label(Label { parent, label_id })\n-                }\n-            };\n-            f(name, def)\n-        })\n+                    resolver::ScopeDef::Label(label_id) => {\n+                        let parent = self.resolver.body_owner().unwrap();\n+                        ScopeDef::Label(Label { parent, label_id })\n+                    }\n+                };\n+                f(name.clone(), def)\n+            }\n+        }\n     }\n \n     /// Resolve a path as-if it was written at the given scope. This is"}, {"sha": "0cf28acf7ff0958d35004faa75d39e36c038a50c", "filename": "crates/hir_def/src/resolver.rs", "status": "modified", "additions": 106, "deletions": 26, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/2f9273633bcde988ac7351a3d9896dd7e2e96637/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f9273633bcde988ac7351a3d9896dd7e2e96637/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fresolver.rs?ref=2f9273633bcde988ac7351a3d9896dd7e2e96637", "patch": "@@ -6,7 +6,9 @@ use hir_expand::{\n     name::{name, Name},\n     MacroDefId,\n };\n+use indexmap::IndexMap;\n use rustc_hash::FxHashSet;\n+use smallvec::SmallVec;\n \n use crate::{\n     body::scope::{ExprScopes, ScopeId},\n@@ -348,10 +350,50 @@ impl Resolver {\n         item_map.resolve_path(db, module, path, BuiltinShadowMode::Other).0.take_macros()\n     }\n \n-    pub fn process_all_names(&self, db: &dyn DefDatabase, f: &mut dyn FnMut(Name, ScopeDef)) {\n+    /// Returns a set of names available in the current scope.\n+    ///\n+    /// Note that this is a somewhat fuzzy concept -- internally, the compiler\n+    /// doesn't necessary follow a strict scoping discipline. Rathe, it just\n+    /// tells for each ident what it resolves to.\n+    ///\n+    /// A good example is something like `str::from_utf8`. From scopes point of\n+    /// view, this code is erroneous -- both `str` module and `str` type occupy\n+    /// the same type namespace.\n+    ///\n+    /// We don't try to model that super-correctly -- this functionality is\n+    /// primarily exposed for completions.\n+    ///\n+    /// Note that in Rust one name can be bound to several items:\n+    ///\n+    /// ```\n+    /// macro_rules! t { () => (()) }\n+    /// type t = t!();\n+    /// const t: t = t!()\n+    /// ```\n+    ///\n+    /// That's why we return a multimap.\n+    ///\n+    /// The shadowing is accounted for: in\n+    ///\n+    /// ```\n+    /// let x = 92;\n+    /// {\n+    ///     let x = 92;\n+    ///     $0\n+    /// }\n+    /// ```\n+    ///\n+    /// there will be only one entry for `x` in the result.\n+    ///\n+    /// The result is ordered *roughly* from the innermost scope to the\n+    /// outermost: when the name is introduced in two namespaces in two scopes,\n+    /// we use the position of the first scope.\n+    pub fn names_in_scope(&self, db: &dyn DefDatabase) -> IndexMap<Name, SmallVec<[ScopeDef; 1]>> {\n+        let mut res = ScopeNames::default();\n         for scope in self.scopes() {\n-            scope.process_names(db, f);\n+            scope.process_names(db, &mut res);\n         }\n+        res.map\n     }\n \n     pub fn traits_in_scope(&self, db: &dyn DefDatabase) -> FxHashSet<TraitId> {\n@@ -434,8 +476,11 @@ impl Resolver {\n     }\n }\n \n+#[derive(Debug, PartialEq, Eq)]\n pub enum ScopeDef {\n-    PerNs(PerNs),\n+    ModuleDef(ModuleDefId),\n+    MacroDef(MacroDefId),\n+    Unknown,\n     ImplSelfType(ImplId),\n     AdtSelfType(AdtId),\n     GenericParam(GenericParamId),\n@@ -444,8 +489,7 @@ pub enum ScopeDef {\n }\n \n impl Scope {\n-    fn process_names(&self, db: &dyn DefDatabase, f: &mut dyn FnMut(Name, ScopeDef)) {\n-        let mut seen = FxHashSet::default();\n+    fn process_names(&self, db: &dyn DefDatabase, acc: &mut ScopeNames) {\n         match self {\n             Scope::ModuleScope(m) => {\n                 // FIXME: should we provide `self` here?\n@@ -456,58 +500,53 @@ impl Scope {\n                 //     }),\n                 // );\n                 m.def_map[m.module_id].scope.entries().for_each(|(name, def)| {\n-                    f(name.clone(), ScopeDef::PerNs(def));\n+                    acc.add_per_ns(name, def);\n                 });\n-                m.def_map[m.module_id].scope.legacy_macros().for_each(|(name, macro_)| {\n-                    let scope = PerNs::macros(macro_, Visibility::Public);\n-                    seen.insert((name.clone(), scope));\n-                    f(name.clone(), ScopeDef::PerNs(scope));\n+                m.def_map[m.module_id].scope.legacy_macros().for_each(|(name, mac)| {\n+                    acc.add(name, ScopeDef::MacroDef(mac));\n                 });\n                 m.def_map.extern_prelude().for_each(|(name, &def)| {\n-                    f(name.clone(), ScopeDef::PerNs(PerNs::types(def, Visibility::Public)));\n+                    acc.add(name, ScopeDef::ModuleDef(def));\n                 });\n                 BUILTIN_SCOPE.iter().for_each(|(name, &def)| {\n-                    f(name.clone(), ScopeDef::PerNs(def));\n+                    acc.add_per_ns(name, def);\n                 });\n                 if let Some(prelude) = m.def_map.prelude() {\n                     let prelude_def_map = prelude.def_map(db);\n-                    prelude_def_map[prelude.local_id].scope.entries().for_each(|(name, def)| {\n-                        let seen_tuple = (name.clone(), def);\n-                        if !seen.contains(&seen_tuple) {\n-                            f(seen_tuple.0, ScopeDef::PerNs(def));\n-                        }\n-                    });\n+                    for (name, def) in prelude_def_map[prelude.local_id].scope.entries() {\n+                        acc.add_per_ns(name, def)\n+                    }\n                 }\n             }\n             Scope::GenericParams { params, def: parent } => {\n                 let parent = *parent;\n                 for (local_id, param) in params.types.iter() {\n-                    if let Some(ref name) = param.name {\n+                    if let Some(name) = &param.name {\n                         let id = TypeParamId { parent, local_id };\n-                        f(name.clone(), ScopeDef::GenericParam(id.into()))\n+                        acc.add(name, ScopeDef::GenericParam(id.into()))\n                     }\n                 }\n                 for (local_id, param) in params.consts.iter() {\n                     let id = ConstParamId { parent, local_id };\n-                    f(param.name.clone(), ScopeDef::GenericParam(id.into()))\n+                    acc.add(&param.name, ScopeDef::GenericParam(id.into()))\n                 }\n                 for (local_id, param) in params.lifetimes.iter() {\n                     let id = LifetimeParamId { parent, local_id };\n-                    f(param.name.clone(), ScopeDef::GenericParam(id.into()))\n+                    acc.add(&param.name, ScopeDef::GenericParam(id.into()))\n                 }\n             }\n             Scope::ImplDefScope(i) => {\n-                f(name![Self], ScopeDef::ImplSelfType(*i));\n+                acc.add(&name![Self], ScopeDef::ImplSelfType(*i));\n             }\n             Scope::AdtScope(i) => {\n-                f(name![Self], ScopeDef::AdtSelfType(*i));\n+                acc.add(&name![Self], ScopeDef::AdtSelfType(*i));\n             }\n             Scope::ExprScope(scope) => {\n                 if let Some((label, name)) = scope.expr_scopes.label(scope.scope_id) {\n-                    f(name, ScopeDef::Label(label))\n+                    acc.add(&name, ScopeDef::Label(label))\n                 }\n                 scope.expr_scopes.entries(scope.scope_id).iter().for_each(|e| {\n-                    f(e.name().clone(), ScopeDef::Local(e.pat()));\n+                    acc.add_local(e.name(), e.pat());\n                 });\n             }\n         }\n@@ -651,6 +690,47 @@ fn to_type_ns(per_ns: PerNs) -> Option<TypeNs> {\n     Some(res)\n }\n \n+#[derive(Default)]\n+struct ScopeNames {\n+    map: IndexMap<Name, SmallVec<[ScopeDef; 1]>>,\n+}\n+\n+impl ScopeNames {\n+    fn add(&mut self, name: &Name, def: ScopeDef) {\n+        let set = self.map.entry(name.clone()).or_default();\n+        if !set.contains(&def) {\n+            set.push(def)\n+        }\n+    }\n+    fn add_per_ns(&mut self, name: &Name, def: PerNs) {\n+        if let Some(ty) = &def.types {\n+            self.add(name, ScopeDef::ModuleDef(ty.0))\n+        }\n+        if let Some(val) = &def.values {\n+            self.add(name, ScopeDef::ModuleDef(val.0))\n+        }\n+        if let Some(mac) = &def.macros {\n+            self.add(name, ScopeDef::MacroDef(mac.0))\n+        }\n+        if def.is_none() {\n+            self.add(name, ScopeDef::Unknown)\n+        }\n+    }\n+    fn add_local(&mut self, name: &Name, pat: PatId) {\n+        let set = self.map.entry(name.clone()).or_default();\n+        // XXX: hack, account for local (and only local) shadowing.\n+        //\n+        // This should be somewhat more principled and take namespaces into\n+        // accounts, but, alas, scoping rules are a hoax. `str` type and `str`\n+        // module can be both available in the same scope.\n+        if set.iter().any(|it| matches!(it, &ScopeDef::Local(_))) {\n+            cov_mark::hit!(shadowing_shows_single_completion);\n+            return;\n+        }\n+        set.push(ScopeDef::Local(pat))\n+    }\n+}\n+\n pub trait HasResolver: Copy {\n     /// Builds a resolver for type references inside this def.\n     fn resolver(self, db: &dyn DefDatabase) -> Resolver;"}, {"sha": "d81cb5391cb09e7002bdb556c64b098076b8fd9b", "filename": "crates/ide_completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2f9273633bcde988ac7351a3d9896dd7e2e96637/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f9273633bcde988ac7351a3d9896dd7e2e96637/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=2f9273633bcde988ac7351a3d9896dd7e2e96637", "patch": "@@ -304,25 +304,4 @@ pub mod prelude {\n             \"#]],\n         );\n     }\n-\n-    #[test]\n-    fn local_variable_shadowing() {\n-        // FIXME: this isn't actually correct, should emit `x` only once.\n-        check(\n-            r#\"\n-fn main() {\n-    let x = 92;\n-    {\n-        let x = 92;\n-        x$0;\n-    }\n-}\n-\"#,\n-            expect![[r#\"\n-                lc x      i32\n-                lc x      i32\n-                fn main() fn()\n-            \"#]],\n-        );\n-    }\n }"}, {"sha": "23be915bbc991f734d9366cf9a2790fcd1a92ce5", "filename": "crates/ide_completion/src/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f9273633bcde988ac7351a3d9896dd7e2e96637/crates%2Fide_completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f9273633bcde988ac7351a3d9896dd7e2e96637/crates%2Fide_completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender.rs?ref=2f9273633bcde988ac7351a3d9896dd7e2e96637", "patch": "@@ -1348,10 +1348,10 @@ fn foo() {\n                 lc foo [type+local]\n                 ev Foo::A(\u2026) [type_could_unify]\n                 ev Foo::B [type_could_unify]\n+                fn foo() []\n                 en Foo []\n                 fn baz() []\n                 fn bar() []\n-                fn foo() []\n             \"#]],\n         );\n     }"}, {"sha": "5c8dccc7803218be6d7358e8ba1926e1b6c09bf2", "filename": "crates/ide_completion/src/tests/expression.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2f9273633bcde988ac7351a3d9896dd7e2e96637/crates%2Fide_completion%2Fsrc%2Ftests%2Fexpression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f9273633bcde988ac7351a3d9896dd7e2e96637/crates%2Fide_completion%2Fsrc%2Ftests%2Fexpression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fexpression.rs?ref=2f9273633bcde988ac7351a3d9896dd7e2e96637", "patch": "@@ -118,7 +118,6 @@ impl Unit {\n             un Union\n             ev TupleV(\u2026)    (u32)\n             ct CONST\n-            ma makro!(\u2026)    #[macro_export] macro_rules! makro\n             me self.foo()   fn(self)\n         \"##]],\n     );\n@@ -155,6 +154,8 @@ impl Unit {\n \n #[test]\n fn shadowing_shows_single_completion() {\n+    cov_mark::check!(shadowing_shows_single_completion);\n+\n     check_empty(\n         r#\"\n fn foo() {\n@@ -165,7 +166,6 @@ fn foo() {\n     }\n }\n \"#,\n-        // FIXME: should be only one bar here\n         expect![[r#\"\n             kw unsafe\n             kw match\n@@ -182,7 +182,6 @@ fn foo() {\n             kw super\n             kw crate\n             lc bar       i32\n-            lc bar       i32\n             fn foo()     fn()\n             bt u32\n         \"#]],"}, {"sha": "aa298fa0bf80f58a4ee6a30405ef7df3bf23876d", "filename": "crates/ide_completion/src/tests/item.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f9273633bcde988ac7351a3d9896dd7e2e96637/crates%2Fide_completion%2Fsrc%2Ftests%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f9273633bcde988ac7351a3d9896dd7e2e96637/crates%2Fide_completion%2Fsrc%2Ftests%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fitem.rs?ref=2f9273633bcde988ac7351a3d9896dd7e2e96637", "patch": "@@ -29,7 +29,6 @@ impl Tra$0\n             st Unit\n             ma makro!(\u2026) #[macro_export] macro_rules! makro\n             un Union\n-            ma makro!(\u2026) #[macro_export] macro_rules! makro\n             bt u32\n         \"##]],\n     )\n@@ -53,7 +52,6 @@ impl Trait for Str$0\n             st Unit\n             ma makro!(\u2026) #[macro_export] macro_rules! makro\n             un Union\n-            ma makro!(\u2026) #[macro_export] macro_rules! makro\n             bt u32\n         \"##]],\n     )"}, {"sha": "f355d37afc209681e2cfb9f152074436649da292", "filename": "crates/ide_completion/src/tests/item_list.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f9273633bcde988ac7351a3d9896dd7e2e96637/crates%2Fide_completion%2Fsrc%2Ftests%2Fitem_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f9273633bcde988ac7351a3d9896dd7e2e96637/crates%2Fide_completion%2Fsrc%2Ftests%2Fitem_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fitem_list.rs?ref=2f9273633bcde988ac7351a3d9896dd7e2e96637", "patch": "@@ -67,7 +67,6 @@ fn in_source_file_item_list() {\n             kw crate\n             md module\n             ma makro!(\u2026)           #[macro_export] macro_rules! makro\n-            ma makro!(\u2026)           #[macro_export] macro_rules! makro\n         \"##]],\n     )\n }\n@@ -172,7 +171,6 @@ fn in_impl_assoc_item_list() {\n             kw crate\n             md module\n             ma makro!(\u2026)  #[macro_export] macro_rules! makro\n-            ma makro!(\u2026)  #[macro_export] macro_rules! makro\n         \"##]],\n     )\n }\n@@ -206,7 +204,6 @@ fn in_trait_assoc_item_list() {\n             kw crate\n             md module\n             ma makro!(\u2026) #[macro_export] macro_rules! makro\n-            ma makro!(\u2026) #[macro_export] macro_rules! makro\n         \"##]],\n     );\n }\n@@ -243,7 +240,6 @@ impl Test for () {\n             kw crate\n             md module\n             ma makro!(\u2026)  #[macro_export] macro_rules! makro\n-            ma makro!(\u2026)  #[macro_export] macro_rules! makro\n         \"##]],\n     );\n }"}, {"sha": "10647e490eeceb1458f19c202ccca4c456732d99", "filename": "crates/ide_completion/src/tests/pattern.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f9273633bcde988ac7351a3d9896dd7e2e96637/crates%2Fide_completion%2Fsrc%2Ftests%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f9273633bcde988ac7351a3d9896dd7e2e96637/crates%2Fide_completion%2Fsrc%2Ftests%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fpattern.rs?ref=2f9273633bcde988ac7351a3d9896dd7e2e96637", "patch": "@@ -122,7 +122,6 @@ fn foo() {\n             bn TupleV    TupleV($1)$0\n             ev TupleV\n             ct CONST\n-            ma makro!(\u2026) #[macro_export] macro_rules! makro\n         \"##]],\n     );\n }\n@@ -143,7 +142,6 @@ fn foo() {\n             st Tuple\n             st Unit\n             ma makro!(\u2026) #[macro_export] macro_rules! makro\n-            ma makro!(\u2026) #[macro_export] macro_rules! makro\n         \"##]],\n     );\n }\n@@ -163,7 +161,6 @@ fn foo(a$0) {\n             st Tuple\n             st Unit\n             ma makro!(\u2026) #[macro_export] macro_rules! makro\n-            ma makro!(\u2026) #[macro_export] macro_rules! makro\n         \"##]],\n     );\n }"}, {"sha": "163080307d71ad5c80731adc1d8280e920da0788", "filename": "crates/ide_completion/src/tests/predicate.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f9273633bcde988ac7351a3d9896dd7e2e96637/crates%2Fide_completion%2Fsrc%2Ftests%2Fpredicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f9273633bcde988ac7351a3d9896dd7e2e96637/crates%2Fide_completion%2Fsrc%2Ftests%2Fpredicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fpredicate.rs?ref=2f9273633bcde988ac7351a3d9896dd7e2e96637", "patch": "@@ -28,7 +28,6 @@ struct Foo<'lt, T, const C: usize> where $0 {}\n             st Unit\n             ma makro!(\u2026) #[macro_export] macro_rules! makro\n             un Union\n-            ma makro!(\u2026) #[macro_export] macro_rules! makro\n             bt u32\n         \"##]],\n     );\n@@ -47,7 +46,6 @@ struct Foo<'lt, T, const C: usize> where T: $0 {}\n             tt Trait\n             md module\n             ma makro!(\u2026) #[macro_export] macro_rules! makro\n-            ma makro!(\u2026) #[macro_export] macro_rules! makro\n         \"##]],\n     );\n }\n@@ -67,7 +65,6 @@ struct Foo<'lt, T, const C: usize> where 'lt: $0 {}\n             tt Trait\n             md module\n             ma makro!(\u2026) #[macro_export] macro_rules! makro\n-            ma makro!(\u2026) #[macro_export] macro_rules! makro\n         \"##]],\n     );\n }\n@@ -85,7 +82,6 @@ struct Foo<'lt, T, const C: usize> where for<'a> T: $0 {}\n             tt Trait\n             md module\n             ma makro!(\u2026) #[macro_export] macro_rules! makro\n-            ma makro!(\u2026) #[macro_export] macro_rules! makro\n         \"##]],\n     );\n }\n@@ -109,7 +105,6 @@ struct Foo<'lt, T, const C: usize> where for<'a> $0 {}\n             st Unit\n             ma makro!(\u2026) #[macro_export] macro_rules! makro\n             un Union\n-            ma makro!(\u2026) #[macro_export] macro_rules! makro\n             bt u32\n         \"##]],\n     );\n@@ -136,7 +131,6 @@ impl Record {\n             st Unit\n             ma makro!(\u2026) #[macro_export] macro_rules! makro\n             un Union\n-            ma makro!(\u2026) #[macro_export] macro_rules! makro\n             bt u32\n         \"##]],\n     );"}, {"sha": "b6cf8945e23717743cf8180d2cf40afe79e6650a", "filename": "crates/ide_completion/src/tests/type_pos.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2f9273633bcde988ac7351a3d9896dd7e2e96637/crates%2Fide_completion%2Fsrc%2Ftests%2Ftype_pos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f9273633bcde988ac7351a3d9896dd7e2e96637/crates%2Fide_completion%2Fsrc%2Ftests%2Ftype_pos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Ftype_pos.rs?ref=2f9273633bcde988ac7351a3d9896dd7e2e96637", "patch": "@@ -31,7 +31,6 @@ struct Foo<'lt, T, const C: usize> {\n             st Unit\n             ma makro!(\u2026) #[macro_export] macro_rules! makro\n             un Union\n-            ma makro!(\u2026) #[macro_export] macro_rules! makro\n             bt u32\n         \"##]],\n     )\n@@ -60,7 +59,6 @@ struct Foo<'lt, T, const C: usize>(f$0);\n             st Unit\n             ma makro!(\u2026)  #[macro_export] macro_rules! makro\n             un Union\n-            ma makro!(\u2026)  #[macro_export] macro_rules! makro\n             bt u32\n         \"##]],\n     )\n@@ -85,7 +83,6 @@ fn x<'lt, T, const C: usize>() -> $0\n             st Unit\n             ma makro!(\u2026) #[macro_export] macro_rules! makro\n             un Union\n-            ma makro!(\u2026) #[macro_export] macro_rules! makro\n             bt u32\n         \"##]],\n     );\n@@ -113,7 +110,6 @@ fn foo<'lt, T, const C: usize>() {\n             st Unit\n             ma makro!(\u2026) #[macro_export] macro_rules! makro\n             un Union\n-            ma makro!(\u2026) #[macro_export] macro_rules! makro\n             bt u32\n         \"##]],\n     );\n@@ -164,7 +160,6 @@ fn foo<'lt, T: Trait2<$0>, const CONST_PARAM: usize>(_: T) {}\n             tt Trait2\n             un Union\n             ct CONST\n-            ma makro!(\u2026)          #[macro_export] macro_rules! makro\n             bt u32\n         \"##]],\n     );"}, {"sha": "3edbaf89d8c97297fccd631c8dacf20078696c3b", "filename": "docs/dev/style.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f9273633bcde988ac7351a3d9896dd7e2e96637/docs%2Fdev%2Fstyle.md", "raw_url": "https://github.com/rust-lang/rust/raw/2f9273633bcde988ac7351a3d9896dd7e2e96637/docs%2Fdev%2Fstyle.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Fstyle.md?ref=2f9273633bcde988ac7351a3d9896dd7e2e96637", "patch": "@@ -839,6 +839,7 @@ crate  -> krate\n enum   -> enum_\n fn     -> func\n impl   -> imp\n+macro  -> mac\n mod    -> module\n struct -> strukt\n trait  -> trait_"}]}