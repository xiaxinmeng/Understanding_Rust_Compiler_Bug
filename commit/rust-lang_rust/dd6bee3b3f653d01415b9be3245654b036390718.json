{"sha": "dd6bee3b3f653d01415b9be3245654b036390718", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkNmJlZTNiM2Y2NTNkMDE0MTViOWJlMzI0NTY1NGIwMzYzOTA3MTg=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-03-24T14:37:17Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-03-29T08:45:45Z"}, "message": "collect stats on bool ops and negations in an expression", "tree": {"sha": "cfb1488041fc6c776e6f1ca45eacba637c7eba7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cfb1488041fc6c776e6f1ca45eacba637c7eba7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd6bee3b3f653d01415b9be3245654b036390718", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd6bee3b3f653d01415b9be3245654b036390718", "html_url": "https://github.com/rust-lang/rust/commit/dd6bee3b3f653d01415b9be3245654b036390718", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd6bee3b3f653d01415b9be3245654b036390718/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f92f84f16778d6921f22079ffd5141cec2dbc6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f92f84f16778d6921f22079ffd5141cec2dbc6b", "html_url": "https://github.com/rust-lang/rust/commit/0f92f84f16778d6921f22079ffd5141cec2dbc6b"}], "stats": {"total": 99, "additions": 61, "deletions": 38}, "files": [{"sha": "9da594424ffbd7f67ffcc5a57715604624608423", "filename": "src/booleans.rs", "status": "modified", "additions": 52, "deletions": 37, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/dd6bee3b3f653d01415b9be3245654b036390718/src%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd6bee3b3f653d01415b9be3245654b036390718/src%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbooleans.rs?ref=dd6bee3b3f653d01415b9be3245654b036390718", "patch": "@@ -180,19 +180,35 @@ fn simple_negate(b: Bool) -> Bool {\n     }\n }\n \n-fn terminal_stats(b: &Bool) -> [usize; 32] {\n-    fn recurse(b: &Bool, stats: &mut [usize; 32]) {\n+#[derive(Default)]\n+struct Stats {\n+    terminals: [usize; 32],\n+    negations: usize,\n+    ops: usize,\n+}\n+\n+fn terminal_stats(b: &Bool) -> Stats {\n+    fn recurse(b: &Bool, stats: &mut Stats) {\n         match *b {\n-            True | False => {},\n-            Not(ref inner) => recurse(inner, stats),\n-            And(ref v) | Or(ref v) => for inner in v {\n-                recurse(inner, stats)\n+            True | False => stats.ops += 1,\n+            Not(ref inner) => {\n+                match **inner {\n+                    And(_) | Or(_) => stats.ops += 1, // brackets are also operations\n+                    _ => stats.negations += 1,\n+                }\n+                recurse(inner, stats);\n             },\n-            Term(n) => stats[n as usize] += 1,\n+            And(ref v) | Or(ref v) => {\n+                stats.ops += v.len() - 1;\n+                for inner in v {\n+                    recurse(inner, stats);\n+                }\n+            },\n+            Term(n) => stats.terminals[n as usize] += 1,\n         }\n     }\n     use quine_mc_cluskey::Bool::*;\n-    let mut stats = [0; 32];\n+    let mut stats = Stats::default();\n     recurse(b, &mut stats);\n     stats\n }\n@@ -217,40 +233,39 @@ impl<'a, 'tcx> NonminimalBoolVisitor<'a, 'tcx> {\n                 }\n                 simplified.push(simple_negated);\n             }\n-            if !simplified.iter().any(|s| *s == expr) {\n-                let mut improvements = Vec::new();\n-                'simplified: for suggestion in &simplified {\n-                    let simplified_stats = terminal_stats(&suggestion);\n-                    let mut improvement = false;\n-                    for i in 0..32 {\n-                        // ignore any \"simplifications\" that end up requiring a terminal more often than in the original expression\n-                        if stats[i] < simplified_stats[i] {\n-                            continue 'simplified;\n-                        }\n-                        // if the number of occurrences of a terminal doesn't increase, this expression is a candidate for improvement\n-                        improvement = true;\n-                        if stats[i] != 0 && simplified_stats[i] == 0 {\n-                            span_lint_and_then(self.0, LOGIC_BUG, e.span, \"this boolean expression contains a logic bug\", |db| {\n-                                db.span_help(h2q.terminals[i].span, \"this expression can be optimized out by applying boolean operations to the outer expression\");\n-                                db.span_suggestion(e.span, \"it would look like the following\", suggest(self.0, suggestion, &h2q.terminals));\n-                            });\n-                            // don't also lint `NONMINIMAL_BOOL`\n-                            improvements.clear();\n-                            break 'simplified;\n-                        }\n+            let mut improvements = Vec::new();\n+            'simplified: for suggestion in &simplified {\n+                let simplified_stats = terminal_stats(&suggestion);\n+                let mut improvement = false;\n+                for i in 0..32 {\n+                    // ignore any \"simplifications\" that end up requiring a terminal more often than in the original expression\n+                    if stats.terminals[i] < simplified_stats.terminals[i] {\n+                        continue 'simplified;\n                     }\n-                    if improvement {\n-                        improvements.push(suggestion);\n+                    if stats.terminals[i] != 0 && simplified_stats.terminals[i] == 0 {\n+                        span_lint_and_then(self.0, LOGIC_BUG, e.span, \"this boolean expression contains a logic bug\", |db| {\n+                            db.span_help(h2q.terminals[i].span, \"this expression can be optimized out by applying boolean operations to the outer expression\");\n+                            db.span_suggestion(e.span, \"it would look like the following\", suggest(self.0, suggestion, &h2q.terminals));\n+                        });\n+                        // don't also lint `NONMINIMAL_BOOL`\n+                        return;\n                     }\n+                    // if the number of occurrences of a terminal decreases or any of the stats decreases while none increases\n+                    improvement = (stats.terminals[i] > simplified_stats.terminals[i]) ||\n+                        (stats.negations > simplified_stats.negations && stats.ops == simplified_stats.ops) ||\n+                        (stats.ops > simplified_stats.ops && stats.negations == simplified_stats.negations);\n                 }\n-                if !improvements.is_empty() {\n-                    span_lint_and_then(self.0, NONMINIMAL_BOOL, e.span, \"this boolean expression can be simplified\", |db| {\n-                        for suggestion in &improvements {\n-                            db.span_suggestion(e.span, \"try\", suggest(self.0, suggestion, &h2q.terminals));\n-                        }\n-                    });\n+                if improvement {\n+                    improvements.push(suggestion);\n                 }\n             }\n+            if !improvements.is_empty() {\n+                span_lint_and_then(self.0, NONMINIMAL_BOOL, e.span, \"this boolean expression can be simplified\", |db| {\n+                    for suggestion in &improvements {\n+                        db.span_suggestion(e.span, \"try\", suggest(self.0, suggestion, &h2q.terminals));\n+                    }\n+                });\n+            }\n         }\n     }\n }"}, {"sha": "5d39c44e7bf2ba43034af66ffccb1506d921a1ef", "filename": "tests/compile-fail/booleans.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dd6bee3b3f653d01415b9be3245654b036390718/tests%2Fcompile-fail%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd6bee3b3f653d01415b9be3245654b036390718/tests%2Fcompile-fail%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fbooleans.rs?ref=dd6bee3b3f653d01415b9be3245654b036390718", "patch": "@@ -2,11 +2,13 @@\n #![plugin(clippy)]\n #![deny(nonminimal_bool, logic_bug)]\n \n-#[allow(unused)]\n+#[allow(unused, many_single_char_names)]\n fn main() {\n     let a: bool = unimplemented!();\n     let b: bool = unimplemented!();\n     let c: bool = unimplemented!();\n+    let d: bool = unimplemented!();\n+    let e: bool = unimplemented!();\n     let _ = a && b || a; //~ ERROR this boolean expression contains a logic bug\n     //|~ HELP for further information visit\n     //|~ HELP this expression can be optimized out\n@@ -36,5 +38,11 @@ fn main() {\n     // don't lint on cfgs\n     let _ = cfg!(you_shall_not_not_pass) && a;\n \n+    let _ = a || !b || !c || !d || !e;\n+\n     let _ = !(a && b || c);\n+\n+    let _ = !(!a && b); //~ ERROR this boolean expression can be simplified\n+    //|~ HELP for further information visit\n+    //|~ SUGGESTION let _ = !b || a;\n }"}]}