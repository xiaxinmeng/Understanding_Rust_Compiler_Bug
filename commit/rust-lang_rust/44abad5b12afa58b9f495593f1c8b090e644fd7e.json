{"sha": "44abad5b12afa58b9f495593f1c8b090e644fd7e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0YWJhZDViMTJhZmE1OGI5ZjQ5NTU5M2YxYzhiMDkwZTY0NGZkN2U=", "commit": {"author": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-02-08T22:34:23Z"}, "committer": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-02-08T22:35:02Z"}, "message": "introduce StaticRWLock wrapper to make methods safe", "tree": {"sha": "3e06f6dfa335c60bcc53d35fd6c402ac717b17af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e06f6dfa335c60bcc53d35fd6c402ac717b17af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44abad5b12afa58b9f495593f1c8b090e644fd7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44abad5b12afa58b9f495593f1c8b090e644fd7e", "html_url": "https://github.com/rust-lang/rust/commit/44abad5b12afa58b9f495593f1c8b090e644fd7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44abad5b12afa58b9f495593f1c8b090e644fd7e/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2200cf10d8051f535f726f2800b935a527696de8", "url": "https://api.github.com/repos/rust-lang/rust/commits/2200cf10d8051f535f726f2800b935a527696de8", "html_url": "https://github.com/rust-lang/rust/commit/2200cf10d8051f535f726f2800b935a527696de8"}], "stats": {"total": 132, "additions": 72, "deletions": 60}, "files": [{"sha": "f5a607561c0f73726da3b7d194dff16932627bd1", "filename": "library/std/src/sys/unix/os.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/44abad5b12afa58b9f495593f1c8b090e644fd7e/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44abad5b12afa58b9f495593f1c8b090e644fd7e/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs?ref=44abad5b12afa58b9f495593f1c8b090e644fd7e", "patch": "@@ -22,7 +22,7 @@ use crate::str;\n use crate::sys::cvt;\n use crate::sys::fd;\n use crate::sys_common::mutex::{StaticMutex, StaticMutexGuard};\n-use crate::sys_common::rwlock::{RWLock, RWLockGuard};\n+use crate::sys_common::rwlock::{RWLockGuard, StaticRWLock};\n use crate::vec;\n \n use libc::{c_char, c_int, c_void};\n@@ -494,16 +494,17 @@ pub unsafe fn environ() -> *mut *const *const c_char {\n     ptr::addr_of_mut!(environ)\n }\n \n-pub unsafe fn env_rwlock(readonly: bool) -> RWLockGuard {\n-    static ENV_LOCK: RWLock = RWLock::new();\n-    if readonly { ENV_LOCK.read_with_guard() } else { ENV_LOCK.write_with_guard() }\n+static ENV_LOCK: StaticRWLock = StaticRWLock::new();\n+\n+pub fn env_read_lock() -> RWLockGuard {\n+    ENV_LOCK.read_with_guard()\n }\n \n /// Returns a vector of (variable, value) byte-vector pairs for all the\n /// environment variables of the current process.\n pub fn env() -> Env {\n     unsafe {\n-        let _guard = env_rwlock(true);\n+        let _guard = env_read_lock();\n         let mut environ = *environ();\n         let mut result = Vec::new();\n         if !environ.is_null() {\n@@ -540,7 +541,7 @@ pub fn getenv(k: &OsStr) -> io::Result<Option<OsString>> {\n     // always None as well\n     let k = CString::new(k.as_bytes())?;\n     unsafe {\n-        let _guard = env_rwlock(true);\n+        let _guard = env_read_lock();\n         let s = libc::getenv(k.as_ptr()) as *const libc::c_char;\n         let ret = if s.is_null() {\n             None\n@@ -556,7 +557,7 @@ pub fn setenv(k: &OsStr, v: &OsStr) -> io::Result<()> {\n     let v = CString::new(v.as_bytes())?;\n \n     unsafe {\n-        let _guard = env_rwlock(false);\n+        let _guard = ENV_LOCK.write_with_guard();\n         cvt(libc::setenv(k.as_ptr(), v.as_ptr(), 1)).map(drop)\n     }\n }\n@@ -565,7 +566,7 @@ pub fn unsetenv(n: &OsStr) -> io::Result<()> {\n     let nbuf = CString::new(n.as_bytes())?;\n \n     unsafe {\n-        let _guard = env_rwlock(false);\n+        let _guard = ENV_LOCK.write_with_guard();\n         cvt(libc::unsetenv(nbuf.as_ptr())).map(drop)\n     }\n }"}, {"sha": "9e82df7755e89c5d58240e4ddee91ac122c0aad1", "filename": "library/std/src/sys/unix/process/process_unix.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/44abad5b12afa58b9f495593f1c8b090e644fd7e/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44abad5b12afa58b9f495593f1c8b090e644fd7e/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=44abad5b12afa58b9f495593f1c8b090e644fd7e", "patch": "@@ -47,7 +47,7 @@ impl Command {\n         // a lock any more because the parent won't do anything and the child is\n         // in its own process.\n         let result = unsafe {\n-            let _env_lock = sys::os::env_rwlock(true);\n+            let _env_lock = sys::os::env_read_lock();\n             cvt(libc::fork())?\n         };\n \n@@ -124,7 +124,7 @@ impl Command {\n                     // Similar to when forking, we want to ensure that access to\n                     // the environment is synchronized, so make sure to grab the\n                     // environment lock before we try to exec.\n-                    let _lock = sys::os::env_rwlock(true);\n+                    let _lock = sys::os::env_read_lock();\n \n                     let Err(e) = self.do_exec(theirs, envp.as_ref());\n                     e\n@@ -404,7 +404,7 @@ impl Command {\n             cvt_nz(libc::posix_spawnattr_setflags(attrs.0.as_mut_ptr(), flags as _))?;\n \n             // Make sure we synchronize access to the global `environ` resource\n-            let _env_lock = sys::os::env_rwlock(true);\n+            let _env_lock = sys::os::env_read_lock();\n             let envp = envp.map(|c| c.as_ptr()).unwrap_or_else(|| *sys::os::environ() as *const _);\n             cvt_nz(libc::posix_spawnp(\n                 &mut p.pid,"}, {"sha": "cc13771009fabd9c3fb1d4f7115d7a37c4679477", "filename": "library/std/src/sys_common/rwlock.rs", "status": "modified", "additions": 60, "deletions": 49, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/44abad5b12afa58b9f495593f1c8b090e644fd7e/library%2Fstd%2Fsrc%2Fsys_common%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44abad5b12afa58b9f495593f1c8b090e644fd7e/library%2Fstd%2Fsrc%2Fsys_common%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Frwlock.rs?ref=44abad5b12afa58b9f495593f1c8b090e644fd7e", "patch": "@@ -1,26 +1,5 @@\n use crate::sys::rwlock as imp;\n \n-#[cfg(unix)]\n-enum GuardType {\n-    Read,\n-    Write,\n-}\n-\n-#[cfg(unix)]\n-pub struct RWLockGuard(&'static RWLock, GuardType);\n-\n-#[cfg(unix)]\n-impl Drop for RWLockGuard {\n-    fn drop(&mut self) {\n-        unsafe {\n-            match &self.1 {\n-                GuardType::Read => self.0.read_unlock(),\n-                GuardType::Write => self.0.write_unlock(),\n-            }\n-        }\n-    }\n-}\n-\n /// An OS-based reader-writer lock.\n ///\n /// This structure is entirely unsafe and serves as the lowest layer of a\n@@ -47,20 +26,6 @@ impl RWLock {\n         self.0.read()\n     }\n \n-    /// Acquires shared access to the underlying lock, blocking the current\n-    /// thread to do so.\n-    ///\n-    /// The lock is automatically unlocked when the returned guard is dropped.\n-    ///\n-    /// Behavior is undefined if the rwlock has been moved between this and any\n-    /// previous method call.\n-    #[inline]\n-    #[cfg(unix)]\n-    pub unsafe fn read_with_guard(&'static self) -> RWLockGuard {\n-        self.read();\n-        RWLockGuard(&self, GuardType::Read)\n-    }\n-\n     /// Attempts to acquire shared access to this lock, returning whether it\n     /// succeeded or not.\n     ///\n@@ -83,20 +48,6 @@ impl RWLock {\n         self.0.write()\n     }\n \n-    /// Acquires write access to the underlying lock, blocking the current thread\n-    /// to do so.\n-    ///\n-    /// The lock is automatically unlocked when the returned guard is dropped.\n-    ///\n-    /// Behavior is undefined if the rwlock has been moved between this and any\n-    /// previous method call.\n-    #[inline]\n-    #[cfg(unix)]\n-    pub unsafe fn write_with_guard(&'static self) -> RWLockGuard {\n-        self.write();\n-        RWLockGuard(&self, GuardType::Write)\n-    }\n-\n     /// Attempts to acquire exclusive access to this lock, returning whether it\n     /// succeeded or not.\n     ///\n@@ -135,3 +86,63 @@ impl RWLock {\n         self.0.destroy()\n     }\n }\n+\n+// the cfg annotations only exist due to dead code warnings. the code itself is portable\n+#[cfg(unix)]\n+pub struct StaticRWLock(RWLock);\n+\n+#[cfg(unix)]\n+impl StaticRWLock {\n+    pub const fn new() -> StaticRWLock {\n+        StaticRWLock(RWLock::new())\n+    }\n+\n+    /// Acquires shared access to the underlying lock, blocking the current\n+    /// thread to do so.\n+    ///\n+    /// The lock is automatically unlocked when the returned guard is dropped.\n+    #[inline]\n+    pub fn read_with_guard(&'static self) -> RWLockGuard {\n+        // Safety: All methods require static references, therefore self\n+        // cannot be moved between invocations.\n+        unsafe {\n+            self.0.read();\n+        }\n+        RWLockGuard(&self.0, GuardType::Read)\n+    }\n+\n+    /// Acquires write access to the underlying lock, blocking the current thread\n+    /// to do so.\n+    ///\n+    /// The lock is automatically unlocked when the returned guard is dropped.\n+    #[inline]\n+    pub fn write_with_guard(&'static self) -> RWLockGuard {\n+        // Safety: All methods require static references, therefore self\n+        // cannot be moved between invocations.\n+        unsafe {\n+            self.0.write();\n+        }\n+        RWLockGuard(&self.0, GuardType::Write)\n+    }\n+}\n+\n+#[cfg(unix)]\n+enum GuardType {\n+    Read,\n+    Write,\n+}\n+\n+#[cfg(unix)]\n+pub struct RWLockGuard(&'static RWLock, GuardType);\n+\n+#[cfg(unix)]\n+impl Drop for RWLockGuard {\n+    fn drop(&mut self) {\n+        unsafe {\n+            match &self.1 {\n+                GuardType::Read => self.0.read_unlock(),\n+                GuardType::Write => self.0.write_unlock(),\n+            }\n+        }\n+    }\n+}"}]}