{"sha": "e73aeeaeeee456b58f3d45041d4169318c2b7130", "node_id": "C_kwDOAAsO6NoAKGU3M2FlZWFlZWVlNDU2YjU4ZjNkNDUwNDFkNDE2OTMxOGMyYjcxMzA", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-03-01T21:40:56Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-04-03T15:59:21Z"}, "message": "Remove redundant field.", "tree": {"sha": "2132792fc1cdbd03645b91ac3e90e0d530ee84bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2132792fc1cdbd03645b91ac3e90e0d530ee84bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e73aeeaeeee456b58f3d45041d4169318c2b7130", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e73aeeaeeee456b58f3d45041d4169318c2b7130", "html_url": "https://github.com/rust-lang/rust/commit/e73aeeaeeee456b58f3d45041d4169318c2b7130", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e73aeeaeeee456b58f3d45041d4169318c2b7130/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f97540432445c7e0dc4eb51e3ac5fd915d225ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f97540432445c7e0dc4eb51e3ac5fd915d225ad", "html_url": "https://github.com/rust-lang/rust/commit/4f97540432445c7e0dc4eb51e3ac5fd915d225ad"}], "stats": {"total": 14, "additions": 4, "deletions": 10}, "files": [{"sha": "431c3255ab2ac607f0715e934640495ebe162bab", "filename": "compiler/rustc_mir_build/src/errors.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e73aeeaeeee456b58f3d45041d4169318c2b7130/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e73aeeaeeee456b58f3d45041d4169318c2b7130/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs?ref=e73aeeaeeee456b58f3d45041d4169318c2b7130", "patch": "@@ -576,7 +576,6 @@ pub struct IrrefutableLetPatternsWhileLet {\n #[diag(mir_build_borrow_of_moved_value)]\n pub struct BorrowOfMovedValue<'tcx> {\n     #[primary_span]\n-    pub span: Span,\n     #[label]\n     #[label(mir_build_occurs_because_label)]\n     pub binding_span: Span,"}, {"sha": "534d236030b512679c584d0624b70d7f4ba5e828", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e73aeeaeeee456b58f3d45041d4169318c2b7130/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e73aeeaeeee456b58f3d45041d4169318c2b7130/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=e73aeeaeeee456b58f3d45041d4169318c2b7130", "patch": "@@ -900,7 +900,6 @@ fn maybe_point_at_variant<'a, 'p: 'a, 'tcx: 'a>(\n fn check_borrow_conflicts_in_at_patterns<'tcx>(cx: &MatchVisitor<'_, '_, 'tcx>, pat: &Pat<'tcx>) {\n     // Extract `sub` in `binding @ sub`.\n     let PatKind::Binding { name, mode, ty, subpattern: Some(box ref sub), .. } = pat.kind else { return };\n-    let binding_span = pat.span; //.with_hi(name.span.hi());\n \n     let is_binding_by_move = |ty: Ty<'tcx>| !ty.is_copy_modulo_regions(cx.tcx, cx.param_env);\n \n@@ -917,15 +916,11 @@ fn check_borrow_conflicts_in_at_patterns<'tcx>(cx: &MatchVisitor<'_, '_, 'tcx>,\n             });\n             if !conflicts_ref.is_empty() {\n                 sess.emit_err(BorrowOfMovedValue {\n-                    span: pat.span,\n-                    binding_span,\n+                    binding_span: pat.span,\n                     conflicts_ref,\n                     name,\n                     ty,\n-                    suggest_borrowing: pat\n-                        .span\n-                        .contains(binding_span)\n-                        .then(|| binding_span.shrink_to_lo()),\n+                    suggest_borrowing: Some(pat.span.shrink_to_lo()),\n                 });\n             }\n             return;\n@@ -967,8 +962,8 @@ fn check_borrow_conflicts_in_at_patterns<'tcx>(cx: &MatchVisitor<'_, '_, 'tcx>,\n     let report_move_conflict = !conflicts_move.is_empty();\n \n     let mut occurences = match mut_outer {\n-        Mutability::Mut => vec![Conflict::Mut { span: binding_span, name }],\n-        Mutability::Not => vec![Conflict::Ref { span: binding_span, name }],\n+        Mutability::Mut => vec![Conflict::Mut { span: pat.span, name }],\n+        Mutability::Not => vec![Conflict::Ref { span: pat.span, name }],\n     };\n     occurences.extend(conflicts_mut_mut);\n     occurences.extend(conflicts_mut_ref);"}]}