{"sha": "7ac5e96f4af8efe4a7f09a873d81006329cb5133", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhYzVlOTZmNGFmOGVmZTRhN2YwOWE4NzNkODEwMDYzMjljYjUxMzM=", "commit": {"author": {"name": "Robin Kruppe", "email": "robin.kruppe@gmail.com", "date": "2018-02-11T20:31:42Z"}, "committer": {"name": "Robin Kruppe", "email": "robin.kruppe@gmail.com", "date": "2018-02-15T16:47:53Z"}, "message": "[improper_ctypes] Use a 'help:' line for possible fixes", "tree": {"sha": "2c6a6cf27f637ddbb9627a24cdb21ab708adc89d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c6a6cf27f637ddbb9627a24cdb21ab708adc89d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ac5e96f4af8efe4a7f09a873d81006329cb5133", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ac5e96f4af8efe4a7f09a873d81006329cb5133", "html_url": "https://github.com/rust-lang/rust/commit/7ac5e96f4af8efe4a7f09a873d81006329cb5133", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ac5e96f4af8efe4a7f09a873d81006329cb5133/comments", "author": null, "committer": null, "parents": [{"sha": "1f0e1a043959461afd061be7ff92362492b2c85d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f0e1a043959461afd061be7ff92362492b2c85d", "html_url": "https://github.com/rust-lang/rust/commit/1f0e1a043959461afd061be7ff92362492b2c85d"}], "stats": {"total": 236, "additions": 156, "deletions": 80}, "files": [{"sha": "b6e8ae96942698be5ec786f156cdb711a4561e6f", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 112, "deletions": 65, "changes": 177, "blob_url": "https://github.com/rust-lang/rust/blob/7ac5e96f4af8efe4a7f09a873d81006329cb5133/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac5e96f4af8efe4a7f09a873d81006329cb5133/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=7ac5e96f4af8efe4a7f09a873d81006329cb5133", "patch": "@@ -353,13 +353,18 @@ struct ImproperCTypesVisitor<'a, 'tcx: 'a> {\n     cx: &'a LateContext<'a, 'tcx>,\n }\n \n+struct FfiError {\n+    message: &'static str,\n+    help: Option<&'static str>,\n+}\n+\n enum FfiResult {\n     FfiSafe,\n     FfiPhantom,\n-    FfiUnsafe(&'static str),\n-    FfiBadStruct(DefId, &'static str),\n-    FfiBadUnion(DefId, &'static str),\n-    FfiBadEnum(DefId, &'static str),\n+    FfiUnsafe(FfiError),\n+    FfiBadStruct(DefId, FfiError),\n+    FfiBadUnion(DefId, FfiError),\n+    FfiBadEnum(DefId, FfiError),\n }\n \n /// Check if this enum can be safely exported based on the\n@@ -434,14 +439,18 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                 match def.adt_kind() {\n                     AdtKind::Struct => {\n                         if !def.repr.c() && !def.repr.transparent() {\n-                            return FfiUnsafe(\"found struct without foreign-function-safe \\\n-                                              representation annotation in foreign module, \\\n-                                              consider adding a #[repr(C)] attribute to the type\");\n+                            return FfiUnsafe(FfiError {\n+                                message: \"found struct without foreign-function-safe \\\n+                                          representation annotation in foreign module\",\n+                                help: Some(\"consider adding a #[repr(C)] attribute to the type\"),\n+                            });\n                         }\n \n                         if def.non_enum_variant().fields.is_empty() {\n-                            return FfiUnsafe(\"found zero-size struct in foreign module, consider \\\n-                                              adding a member to this struct\");\n+                            return FfiUnsafe(FfiError {\n+                                message: \"found zero-size struct in foreign module\",\n+                                help: Some(\"consider adding a member to this struct\"),\n+                            });\n                         }\n \n                         // We can't completely trust repr(C) and repr(transparent) markings;\n@@ -471,8 +480,8 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                                 FfiBadStruct(..) | FfiBadUnion(..) | FfiBadEnum(..) => {\n                                     return r;\n                                 }\n-                                FfiUnsafe(s) => {\n-                                    return FfiBadStruct(def.did, s);\n+                                FfiUnsafe(err) => {\n+                                    return FfiBadStruct(def.did, err);\n                                 }\n                             }\n                         }\n@@ -481,14 +490,18 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                     }\n                     AdtKind::Union => {\n                         if !def.repr.c() {\n-                            return FfiUnsafe(\"found union without foreign-function-safe \\\n-                                              representation annotation in foreign module, \\\n-                                              consider adding a #[repr(C)] attribute to the type\");\n+                            return FfiUnsafe(FfiError {\n+                                message: \"found union without foreign-function-safe \\\n+                                          representation annotation in foreign module\",\n+                                help: Some(\"consider adding a #[repr(C)] attribute to the type\"),\n+                            });\n                         }\n \n                         if def.non_enum_variant().fields.is_empty() {\n-                            return FfiUnsafe(\"found zero-size union in foreign module, consider \\\n-                                              adding a member to this union\");\n+                            return FfiUnsafe(FfiError {\n+                                message: \"found zero-size union in foreign module\",\n+                                help: Some(\"consider adding a member to this union\"),\n+                            });\n                         }\n \n                         let mut all_phantom = true;\n@@ -505,8 +518,8 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                                 FfiBadStruct(..) | FfiBadUnion(..) | FfiBadEnum(..) => {\n                                     return r;\n                                 }\n-                                FfiUnsafe(s) => {\n-                                    return FfiBadUnion(def.did, s);\n+                                FfiUnsafe(err) => {\n+                                    return FfiBadUnion(def.did, err);\n                                 }\n                             }\n                         }\n@@ -524,18 +537,23 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                         if !def.repr.c() && def.repr.int.is_none() {\n                             // Special-case types like `Option<extern fn()>`.\n                             if !is_repr_nullable_ptr(cx, def, substs) {\n-                                return FfiUnsafe(\"found enum without foreign-function-safe \\\n-                                                  representation annotation in foreign \\\n-                                                  module, consider adding a #[repr(...)] \\\n-                                                  attribute to the type\");\n+                                return FfiUnsafe(FfiError {\n+                                    message: \"found enum without foreign-function-safe \\\n+                                              representation annotation in foreign module\",\n+                                    help: Some(\"consider adding a #[repr(...)] attribute \\\n+                                                to the type\"),\n+                                });\n                             }\n                         }\n \n                         if let Some(int_ty) = def.repr.int {\n                             if !is_ffi_safe(int_ty) {\n                                 // FIXME: This shouldn't be reachable: we should check\n                                 // this earlier.\n-                                return FfiUnsafe(\"enum has unexpected #[repr(...)] attribute\");\n+                                return FfiUnsafe(FfiError {\n+                                    message: \"enum has unexpected #[repr(...)] attribute\",\n+                                    help: None,\n+                                });\n                             }\n \n                             // Enum with an explicitly sized discriminant; either\n@@ -558,11 +576,13 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                                         return r;\n                                     }\n                                     FfiPhantom => {\n-                                        return FfiBadEnum(def.did,\n-                                                          \"Found phantom data in enum variant\");\n+                                        return FfiBadEnum(def.did, FfiError {\n+                                            message: \"Found phantom data in enum variant\",\n+                                            help: None,\n+                                        });\n                                     }\n-                                    FfiUnsafe(s) => {\n-                                        return FfiBadEnum(def.did, s);\n+                                    FfiUnsafe(err) => {\n+                                        return FfiBadEnum(def.did, err);\n                                     }\n                                 }\n                             }\n@@ -573,43 +593,57 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n             }\n \n             ty::TyChar => {\n-                FfiUnsafe(\"found Rust type `char` in foreign module, while \\\n-                           `u32` or `libc::wchar_t` should be used\")\n+                FfiUnsafe(FfiError {\n+                    message: \"found Rust type `char` in foreign module\",\n+                    help: Some(\"consider using `u32` or `libc::wchar_t`\"),\n+                })\n             }\n \n             ty::TyInt(ast::IntTy::I128) => {\n-                FfiUnsafe(\"found Rust type `i128` in foreign module, but \\\n-                           128-bit integers don't currently have a known \\\n-                           stable ABI\")\n+                FfiUnsafe(FfiError {\n+                    message: \"found Rust type `i128` in foreign module, but 128-bit \\\n+                              integers don't currently have a known stable ABI\",\n+                    help: None,\n+                })\n             }\n \n             ty::TyUint(ast::UintTy::U128) => {\n-                FfiUnsafe(\"found Rust type `u128` in foreign module, but \\\n-                           128-bit integers don't currently have a known \\\n-                           stable ABI\")\n+                FfiUnsafe(FfiError {\n+                    message: \"found Rust type `u128` in foreign module, but 128-bit \\\n+                              integers don't currently have a known stable ABI\",\n+                    help: None,\n+                })\n             }\n \n             // Primitive types with a stable representation.\n             ty::TyBool | ty::TyInt(..) | ty::TyUint(..) | ty::TyFloat(..) | ty::TyNever => FfiSafe,\n \n             ty::TySlice(_) => {\n-                FfiUnsafe(\"found Rust slice type in foreign module, \\\n-                           consider using a raw pointer instead\")\n+                FfiUnsafe(FfiError {\n+                    message: \"found Rust slice type in foreign module\",\n+                    help: Some(\"consider using a raw pointer instead\"),\n+                })\n             }\n \n             ty::TyDynamic(..) => {\n-                FfiUnsafe(\"found Rust trait type in foreign module, \\\n-                           consider using a raw pointer instead\")\n+                FfiUnsafe(FfiError {\n+                    message: \"found Rust trait type in foreign module\",\n+                    help: Some(\"consider using a raw pointer instead\"),\n+                })\n             }\n \n             ty::TyStr => {\n-                FfiUnsafe(\"found Rust type `str` in foreign module; \\\n-                           consider using a `*const libc::c_char`\")\n+                FfiUnsafe(FfiError {\n+                    message: \"found Rust type `str` in foreign module\",\n+                    help: Some(\"consider using a `*const libc::c_char`\"),\n+                })\n             }\n \n             ty::TyTuple(..) => {\n-                FfiUnsafe(\"found Rust tuple type in foreign module; \\\n-                           consider using a struct instead\")\n+                FfiUnsafe(FfiError {\n+                    message: \"found Rust tuple type in foreign module\",\n+                    help: Some(\"consider using a struct instead\"),\n+                })\n             }\n \n             ty::TyRawPtr(ref m) |\n@@ -620,9 +654,11 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n             ty::TyFnPtr(sig) => {\n                 match sig.abi() {\n                     Abi::Rust | Abi::RustIntrinsic | Abi::PlatformIntrinsic | Abi::RustCall => {\n-                        return FfiUnsafe(\"found function pointer with Rust calling convention in \\\n-                                          foreign module; consider using an `extern` function \\\n-                                          pointer\")\n+                        return FfiUnsafe(FfiError {\n+                            message: \"found function pointer with Rust calling convention in \\\n+                                      foreign module\",\n+                            help: Some(\"consider using an `extern` function pointer\"),\n+                        })\n                     }\n                     _ => {}\n                 }\n@@ -676,34 +712,45 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                                   &format!(\"found zero-sized type composed only \\\n                                             of phantom-data in a foreign-function.\"));\n             }\n-            FfiResult::FfiUnsafe(s) => {\n-                self.cx.span_lint(IMPROPER_CTYPES, sp, s);\n+            FfiResult::FfiUnsafe(err) => {\n+                let mut diag = self.cx.struct_span_lint(IMPROPER_CTYPES, sp, err.message);\n+                if let Some(s) = err.help {\n+                    diag.help(s);\n+                }\n+                diag.emit();\n             }\n-            FfiResult::FfiBadStruct(_, s) => {\n+            FfiResult::FfiBadStruct(_, err) => {\n                 // FIXME: This diagnostic is difficult to read, and doesn't\n                 // point at the relevant field.\n-                self.cx.span_lint(IMPROPER_CTYPES,\n-                                  sp,\n-                                  &format!(\"found non-foreign-function-safe member in struct \\\n-                                            marked #[repr(C)]: {}\",\n-                                           s));\n+                let msg = format!(\"found non-foreign-function-safe member in struct \\\n+                                   marked #[repr(C)]: {}\", err.message);\n+                let mut diag = self.cx.struct_span_lint(IMPROPER_CTYPES, sp, &msg);\n+                if let Some(s) = err.help {\n+                    diag.help(s);\n+                }\n+                diag.emit();\n             }\n-            FfiResult::FfiBadUnion(_, s) => {\n+            FfiResult::FfiBadUnion(_, err) => {\n                 // FIXME: This diagnostic is difficult to read, and doesn't\n                 // point at the relevant field.\n-                self.cx.span_lint(IMPROPER_CTYPES,\n-                                  sp,\n-                                  &format!(\"found non-foreign-function-safe member in union \\\n-                                            marked #[repr(C)]: {}\",\n-                                           s));\n+                let msg = format!(\"found non-foreign-function-safe member in union \\\n+                                   marked #[repr(C)]: {}\", err.message);\n+                let mut diag = self.cx.struct_span_lint(IMPROPER_CTYPES, sp, &msg);\n+                if let Some(s) = err.help {\n+                    diag.help(s);\n+                }\n+                diag.emit();\n             }\n-            FfiResult::FfiBadEnum(_, s) => {\n+            FfiResult::FfiBadEnum(_, err) => {\n                 // FIXME: This diagnostic is difficult to read, and doesn't\n                 // point at the relevant variant.\n-                self.cx.span_lint(IMPROPER_CTYPES,\n-                                  sp,\n-                                  &format!(\"found non-foreign-function-safe member in enum: {}\",\n-                                           s));\n+                let msg = format!(\"found non-foreign-function-safe member in enum: {}\",\n+                                  err.message);\n+                let mut diag = self.cx.struct_span_lint(IMPROPER_CTYPES, sp, &msg);\n+                if let Some(s) = err.help {\n+                    diag.help(s);\n+                }\n+                diag.emit();\n             }\n         }\n     }"}, {"sha": "0f7f7e048e3ab3ba4d48a7f242d857c5e375ecf6", "filename": "src/test/ui/lint-ctypes.stderr", "status": "modified", "additions": 44, "deletions": 15, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/7ac5e96f4af8efe4a7f09a873d81006329cb5133/src%2Ftest%2Fui%2Flint-ctypes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ac5e96f4af8efe4a7f09a873d81006329cb5133/src%2Ftest%2Fui%2Flint-ctypes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint-ctypes.stderr?ref=7ac5e96f4af8efe4a7f09a873d81006329cb5133", "patch": "@@ -1,4 +1,4 @@\n-error: found struct without foreign-function-safe representation annotation in foreign module, consider adding a #[repr(C)] attribute to the type\n+error: found struct without foreign-function-safe representation annotation in foreign module\n   --> $DIR/lint-ctypes.rs:54:28\n    |\n 54 |     pub fn ptr_type1(size: *const Foo); //~ ERROR: found struct without\n@@ -9,36 +9,47 @@ note: lint level defined here\n    |\n 11 | #![deny(improper_ctypes)]\n    |         ^^^^^^^^^^^^^^^\n+   = help: consider adding a #[repr(C)] attribute to the type\n \n-error: found struct without foreign-function-safe representation annotation in foreign module, consider adding a #[repr(C)] attribute to the type\n+error: found struct without foreign-function-safe representation annotation in foreign module\n   --> $DIR/lint-ctypes.rs:55:28\n    |\n 55 |     pub fn ptr_type2(size: *const Foo); //~ ERROR: found struct without\n    |                            ^^^^^^^^^^\n+   |\n+   = help: consider adding a #[repr(C)] attribute to the type\n \n-error: found Rust slice type in foreign module, consider using a raw pointer instead\n+error: found Rust slice type in foreign module\n   --> $DIR/lint-ctypes.rs:56:26\n    |\n 56 |     pub fn slice_type(p: &[u32]); //~ ERROR: found Rust slice type\n    |                          ^^^^^^\n+   |\n+   = help: consider using a raw pointer instead\n \n-error: found Rust type `str` in foreign module; consider using a `*const libc::c_char`\n+error: found Rust type `str` in foreign module\n   --> $DIR/lint-ctypes.rs:57:24\n    |\n 57 |     pub fn str_type(p: &str); //~ ERROR: found Rust type\n    |                        ^^^^\n+   |\n+   = help: consider using a `*const libc::c_char`\n \n-error: found struct without foreign-function-safe representation annotation in foreign module, consider adding a #[repr(C)] attribute to the type\n+error: found struct without foreign-function-safe representation annotation in foreign module\n   --> $DIR/lint-ctypes.rs:58:24\n    |\n 58 |     pub fn box_type(p: Box<u32>); //~ ERROR found struct without\n    |                        ^^^^^^^^\n+   |\n+   = help: consider adding a #[repr(C)] attribute to the type\n \n-error: found Rust type `char` in foreign module, while `u32` or `libc::wchar_t` should be used\n+error: found Rust type `char` in foreign module\n   --> $DIR/lint-ctypes.rs:59:25\n    |\n 59 |     pub fn char_type(p: char); //~ ERROR found Rust type\n    |                         ^^^^\n+   |\n+   = help: consider using `u32` or `libc::wchar_t`\n \n error: found Rust type `i128` in foreign module, but 128-bit integers don't currently have a known stable ABI\n   --> $DIR/lint-ctypes.rs:60:25\n@@ -52,29 +63,37 @@ error: found Rust type `u128` in foreign module, but 128-bit integers don't curr\n 61 |     pub fn u128_type(p: u128); //~ ERROR found Rust type\n    |                         ^^^^\n \n-error: found Rust trait type in foreign module, consider using a raw pointer instead\n+error: found Rust trait type in foreign module\n   --> $DIR/lint-ctypes.rs:62:26\n    |\n 62 |     pub fn trait_type(p: &Clone); //~ ERROR found Rust trait type\n    |                          ^^^^^^\n+   |\n+   = help: consider using a raw pointer instead\n \n-error: found Rust tuple type in foreign module; consider using a struct instead\n+error: found Rust tuple type in foreign module\n   --> $DIR/lint-ctypes.rs:63:26\n    |\n 63 |     pub fn tuple_type(p: (i32, i32)); //~ ERROR found Rust tuple type\n    |                          ^^^^^^^^^^\n+   |\n+   = help: consider using a struct instead\n \n-error: found Rust tuple type in foreign module; consider using a struct instead\n+error: found Rust tuple type in foreign module\n   --> $DIR/lint-ctypes.rs:64:27\n    |\n 64 |     pub fn tuple_type2(p: I32Pair); //~ ERROR found Rust tuple type\n    |                           ^^^^^^^\n+   |\n+   = help: consider using a struct instead\n \n-error: found zero-size struct in foreign module, consider adding a member to this struct\n+error: found zero-size struct in foreign module\n   --> $DIR/lint-ctypes.rs:65:25\n    |\n 65 |     pub fn zero_size(p: ZeroSize); //~ ERROR found zero-size struct\n    |                         ^^^^^^^^\n+   |\n+   = help: consider adding a member to this struct\n \n error: found zero-sized type composed only of phantom-data in a foreign-function.\n   --> $DIR/lint-ctypes.rs:66:33\n@@ -88,41 +107,51 @@ error: found zero-sized type composed only of phantom-data in a foreign-function\n 68 |         -> ::std::marker::PhantomData<bool>; //~ ERROR: found zero-sized type\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: found function pointer with Rust calling convention in foreign module; consider using an `extern` function pointer\n+error: found function pointer with Rust calling convention in foreign module\n   --> $DIR/lint-ctypes.rs:69:23\n    |\n 69 |     pub fn fn_type(p: RustFn); //~ ERROR found function pointer with Rust\n    |                       ^^^^^^\n+   |\n+   = help: consider using an `extern` function pointer\n \n-error: found function pointer with Rust calling convention in foreign module; consider using an `extern` function pointer\n+error: found function pointer with Rust calling convention in foreign module\n   --> $DIR/lint-ctypes.rs:70:24\n    |\n 70 |     pub fn fn_type2(p: fn()); //~ ERROR found function pointer with Rust\n    |                        ^^^^\n+   |\n+   = help: consider using an `extern` function pointer\n \n-error: found struct without foreign-function-safe representation annotation in foreign module, consider adding a #[repr(C)] attribute to the type\n+error: found struct without foreign-function-safe representation annotation in foreign module\n   --> $DIR/lint-ctypes.rs:71:28\n    |\n 71 |     pub fn fn_contained(p: RustBadRet); //~ ERROR: found struct without\n    |                            ^^^^^^^^^^\n+   |\n+   = help: consider adding a #[repr(C)] attribute to the type\n \n error: found non-foreign-function-safe member in struct marked #[repr(C)]: found Rust type `i128` in foreign module, but 128-bit integers don't currently have a known stable ABI\n   --> $DIR/lint-ctypes.rs:72:32\n    |\n 72 |     pub fn transparent_i128(p: TransparentI128); //~ ERROR: found Rust type `i128`\n    |                                ^^^^^^^^^^^^^^^\n \n-error: found non-foreign-function-safe member in struct marked #[repr(C)]: found Rust type `str` in foreign module; consider using a `*const libc::c_char`\n+error: found non-foreign-function-safe member in struct marked #[repr(C)]: found Rust type `str` in foreign module\n   --> $DIR/lint-ctypes.rs:73:31\n    |\n 73 |     pub fn transparent_str(p: TransparentStr); //~ ERROR: found Rust type `str`\n    |                               ^^^^^^^^^^^^^^\n+   |\n+   = help: consider using a `*const libc::c_char`\n \n-error: found non-foreign-function-safe member in struct marked #[repr(C)]: found struct without foreign-function-safe representation annotation in foreign module, consider adding a #[repr(C)] attribute to the type\n+error: found non-foreign-function-safe member in struct marked #[repr(C)]: found struct without foreign-function-safe representation annotation in foreign module\n   --> $DIR/lint-ctypes.rs:74:30\n    |\n 74 |     pub fn transparent_fn(p: TransparentBadFn); //~ ERROR: found struct without\n    |                              ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding a #[repr(C)] attribute to the type\n \n error: aborting due to 20 previous errors\n "}]}