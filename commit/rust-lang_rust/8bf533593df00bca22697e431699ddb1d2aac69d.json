{"sha": "8bf533593df00bca22697e431699ddb1d2aac69d", "node_id": "C_kwDOAAsO6NoAKDhiZjUzMzU5M2RmMDBiY2EyMjY5N2U0MzE2OTlkZGIxZDJhYWM2OWQ", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-09-22T12:55:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-22T12:55:54Z"}, "message": "Rollup merge of #102069 - compiler-errors:no-eq-in-register-opaque, r=oli-obk\n\nSkip `Equate` relation in `handle_opaque_type`\n\nr? ``@oli-obk``", "tree": {"sha": "97b96d91c9e10631e721fd3d80286bd70dbcf680", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97b96d91c9e10631e721fd3d80286bd70dbcf680"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8bf533593df00bca22697e431699ddb1d2aac69d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjLFtaCRBK7hj4Ov3rIwAAOQ8IAHnvkDHYVPIW29LLrgjRMWhZ\nMEbS2iFiUigbo3SWM7F1p6GndJNE0aswJa6/k7vFjFq+dEW8MpiTGSfKgtj9vJ8q\ntja3mbm+9Jj+3FVcwNYdm/YDjoqDsBR1tmPmkHsEhIs9848xRiZOOzJcpHdL/J9L\nCdnTmde2MqN5DUcMBZT7i7zlK90zS3+7wUe+6r8ejxpRXP6ALT91bxIODNwxO9Qa\nzROpcxSjhSWOEe9pKabN1E3rVOut5VRm1QyPQaD3kKcc7toInhHqoceKqKB5898B\ndC5RGmhbzYkRWk8WXeOadFFpEGdFFiziu9rgwnybaikCV8VdCJvFQMEJsy6xas8=\n=PErW\n-----END PGP SIGNATURE-----\n", "payload": "tree 97b96d91c9e10631e721fd3d80286bd70dbcf680\nparent d5ae6737bfbe9d457d1a0984a7666568118e894b\nparent 5b96e5e71a9152fb1c5f29e46f131dc95c004ab6\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1663851354 +0530\ncommitter GitHub <noreply@github.com> 1663851354 +0530\n\nRollup merge of #102069 - compiler-errors:no-eq-in-register-opaque, r=oli-obk\n\nSkip `Equate` relation in `handle_opaque_type`\n\nr? ``@oli-obk``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8bf533593df00bca22697e431699ddb1d2aac69d", "html_url": "https://github.com/rust-lang/rust/commit/8bf533593df00bca22697e431699ddb1d2aac69d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8bf533593df00bca22697e431699ddb1d2aac69d/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5ae6737bfbe9d457d1a0984a7666568118e894b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5ae6737bfbe9d457d1a0984a7666568118e894b", "html_url": "https://github.com/rust-lang/rust/commit/d5ae6737bfbe9d457d1a0984a7666568118e894b"}, {"sha": "5b96e5e71a9152fb1c5f29e46f131dc95c004ab6", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b96e5e71a9152fb1c5f29e46f131dc95c004ab6", "html_url": "https://github.com/rust-lang/rust/commit/5b96e5e71a9152fb1c5f29e46f131dc95c004ab6"}], "stats": {"total": 13, "additions": 3, "deletions": 10}, "files": [{"sha": "76c340a5efae04fa233283fd3851ca78178b4df7", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8bf533593df00bca22697e431699ddb1d2aac69d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bf533593df00bca22697e431699ddb1d2aac69d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=8bf533593df00bca22697e431699ddb1d2aac69d", "patch": "@@ -7,6 +7,7 @@ use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::vec_map::VecMap;\n use rustc_hir as hir;\n use rustc_middle::traits::ObligationCause;\n+use rustc_middle::ty::error::{ExpectedFound, TypeError};\n use rustc_middle::ty::fold::BottomUpFolder;\n use rustc_middle::ty::GenericArgKind;\n use rustc_middle::ty::{\n@@ -176,16 +177,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         } else if let Some(res) = process(b, a) {\n             res\n         } else {\n-            // Rerun equality check, but this time error out due to\n-            // different types.\n-            match self.at(cause, param_env).define_opaque_types(false).eq(a, b) {\n-                Ok(_) => span_bug!(\n-                    cause.span,\n-                    \"opaque types are never equal to anything but themselves: {:#?}\",\n-                    (a.kind(), b.kind())\n-                ),\n-                Err(e) => Err(e),\n-            }\n+            let (a, b) = self.resolve_vars_if_possible((a, b));\n+            Err(TypeError::Sorts(ExpectedFound::new(true, a, b)))\n         }\n     }\n "}]}