{"sha": "2f77a59d1611f58efa8890e935bec271032cd235", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmNzdhNTlkMTYxMWY1OGVmYTg4OTBlOTM1YmVjMjcxMDMyY2QyMzU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-04T14:16:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-04T14:16:54Z"}, "message": "Auto merge of #28201 - apasel422:issue-26205, r=nikomatsakis\n\nCloses #26205.\r\n\r\nr? @eddyb", "tree": {"sha": "f77e11f43a84449ec8f2828da82aef3ba00f342a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f77e11f43a84449ec8f2828da82aef3ba00f342a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f77a59d1611f58efa8890e935bec271032cd235", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f77a59d1611f58efa8890e935bec271032cd235", "html_url": "https://github.com/rust-lang/rust/commit/2f77a59d1611f58efa8890e935bec271032cd235", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f77a59d1611f58efa8890e935bec271032cd235/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94ddfc77072d99b16a5cc779d2b1f8d69e0d6850", "url": "https://api.github.com/repos/rust-lang/rust/commits/94ddfc77072d99b16a5cc779d2b1f8d69e0d6850", "html_url": "https://github.com/rust-lang/rust/commit/94ddfc77072d99b16a5cc779d2b1f8d69e0d6850"}, {"sha": "b8dad48435ebf8d85bffe4d65a247b96854b14ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8dad48435ebf8d85bffe4d65a247b96854b14ef", "html_url": "https://github.com/rust-lang/rust/commit/b8dad48435ebf8d85bffe4d65a247b96854b14ef"}], "stats": {"total": 143, "additions": 93, "deletions": 50}, "files": [{"sha": "40025aa0b7bf49cae219fc5ef10a27de9d5683fb", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f77a59d1611f58efa8890e935bec271032cd235/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f77a59d1611f58efa8890e935bec271032cd235/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=2f77a59d1611f58efa8890e935bec271032cd235", "patch": "@@ -664,7 +664,7 @@ fn is_useful(cx: &MatchCheckCtxt,\n \n         match real_pat.node {\n             hir::PatIdent(hir::BindByRef(..), _, _) => {\n-                left_ty.builtin_deref(false).unwrap().ty\n+                left_ty.builtin_deref(false, NoPreference).unwrap().ty\n             }\n             _ => left_ty,\n         }"}, {"sha": "ba7c675817f5d35e92f70c9c0ec2a0a9ad437ebf", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f77a59d1611f58efa8890e935bec271032cd235/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f77a59d1611f58efa8890e935bec271032cd235/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=2f77a59d1611f58efa8890e935bec271032cd235", "patch": "@@ -400,7 +400,7 @@ impl<'t, 'a,'tcx> MemCategorizationContext<'t, 'a, 'tcx> {\n                 // a bind-by-ref means that the base_ty will be the type of the ident itself,\n                 // but what we want here is the type of the underlying value being borrowed.\n                 // So peel off one-level, turning the &T into T.\n-                match base_ty.builtin_deref(false) {\n+                match base_ty.builtin_deref(false, ty::NoPreference) {\n                     Some(t) => t.ty,\n                     None => { return Err(()); }\n                 }\n@@ -897,7 +897,7 @@ impl<'t, 'a,'tcx> MemCategorizationContext<'t, 'a, 'tcx> {\n             None => base_cmt\n         };\n         let base_cmt_ty = base_cmt.ty;\n-        match base_cmt_ty.builtin_deref(true) {\n+        match base_cmt_ty.builtin_deref(true, ty::NoPreference) {\n             Some(mt) => {\n                 let ret = self.cat_deref_common(node, base_cmt, deref_cnt,\n                                               mt.ty,\n@@ -1044,7 +1044,7 @@ impl<'t, 'a,'tcx> MemCategorizationContext<'t, 'a, 'tcx> {\n                     span:elt.span(),\n                     cat:cat_deref(base_cmt.clone(), 0, ptr),\n                     mutbl:m,\n-                    ty: match base_cmt.ty.builtin_deref(false) {\n+                    ty: match base_cmt.ty.builtin_deref(false, ty::NoPreference) {\n                         Some(mt) => mt.ty,\n                         None => self.tcx().sess.bug(\"Found non-derefable type\")\n                     },"}, {"sha": "2e17a063775c6263512e3482a7e1b3a542764e4f", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2f77a59d1611f58efa8890e935bec271032cd235/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f77a59d1611f58efa8890e935bec271032cd235/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=2f77a59d1611f58efa8890e935bec271032cd235", "patch": "@@ -29,6 +29,7 @@ pub use self::BoundRegion::*;\n pub use self::TypeVariants::*;\n pub use self::IntVarValue::*;\n pub use self::CopyImplementationError::*;\n+pub use self::LvaluePreference::*;\n \n pub use self::BuiltinBound::Send as BoundSend;\n pub use self::BuiltinBound::Sized as BoundSized;\n@@ -4828,6 +4829,21 @@ impl<'tcx> TyS<'tcx> {\n     }\n }\n \n+#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n+pub enum LvaluePreference {\n+    PreferMutLvalue,\n+    NoPreference\n+}\n+\n+impl LvaluePreference {\n+    pub fn from_mutbl(m: hir::Mutability) -> Self {\n+        match m {\n+            hir::MutMutable => PreferMutLvalue,\n+            hir::MutImmutable => NoPreference,\n+        }\n+    }\n+}\n+\n /// Describes whether a type is representable. For types that are not\n /// representable, 'SelfRecursive' and 'ContainsRecursive' are used to\n /// distinguish between types that are recursive with themselves and types that\n@@ -5073,12 +5089,15 @@ impl<'tcx> TyS<'tcx> {\n     //\n     // The parameter `explicit` indicates if this is an *explicit* dereference.\n     // Some types---notably unsafe ptrs---can only be dereferenced explicitly.\n-    pub fn builtin_deref(&self, explicit: bool) -> Option<TypeAndMut<'tcx>> {\n+    pub fn builtin_deref(&self, explicit: bool, pref: LvaluePreference)\n+        -> Option<TypeAndMut<'tcx>>\n+    {\n         match self.sty {\n             TyBox(ty) => {\n                 Some(TypeAndMut {\n                     ty: ty,\n-                    mutbl: hir::MutImmutable,\n+                    mutbl:\n+                        if pref == PreferMutLvalue { hir::MutMutable } else { hir::MutImmutable },\n                 })\n             },\n             TyRef(_, mt) => Some(mt),\n@@ -5183,7 +5202,7 @@ impl<'tcx> TyS<'tcx> {\n                                     }\n                                     None => {}\n                                 }\n-                                match adjusted_ty.builtin_deref(true) {\n+                                match adjusted_ty.builtin_deref(true, NoPreference) {\n                                     Some(mt) => { adjusted_ty = mt.ty; }\n                                     None => {\n                                         cx.sess.span_bug("}, {"sha": "a3ba174a6e5a4a921c06a4e7c7edc1ee8c5e174c", "filename": "src/librustc_trans/trans/consts.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2f77a59d1611f58efa8890e935bec271032cd235/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f77a59d1611f58efa8890e935bec271032cd235/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs?ref=2f77a59d1611f58efa8890e935bec271032cd235", "patch": "@@ -155,7 +155,7 @@ fn const_deref<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                          v: ValueRef,\n                          ty: Ty<'tcx>)\n                          -> (ValueRef, Ty<'tcx>) {\n-    match ty.builtin_deref(true) {\n+    match ty.builtin_deref(true, ty::NoPreference) {\n         Some(mt) => {\n             if type_is_sized(cx.tcx(), mt.ty) {\n                 (const_deref_ptr(cx, v), mt.ty)\n@@ -329,7 +329,7 @@ pub fn const_expr<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                                                               param_substs,\n                                                               &target);\n \n-                let pointee_ty = ty.builtin_deref(true)\n+                let pointee_ty = ty.builtin_deref(true, ty::NoPreference)\n                     .expect(\"consts: unsizing got non-pointer type\").ty;\n                 let (base, old_info) = if !type_is_sized(cx.tcx(), pointee_ty) {\n                     // Normally, the source is a thin pointer and we are\n@@ -344,7 +344,7 @@ pub fn const_expr<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                     (llconst, None)\n                 };\n \n-                let unsized_ty = target.builtin_deref(true)\n+                let unsized_ty = target.builtin_deref(true, ty::NoPreference)\n                     .expect(\"consts: unsizing got non-pointer target type\").ty;\n                 let ptr_ty = type_of::in_memory_type_of(cx, unsized_ty).ptr_to();\n                 let base = ptrcast(base, ptr_ty);\n@@ -642,7 +642,8 @@ fn const_expr_unadjusted<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             }\n             if type_is_fat_ptr(cx.tcx(), t_expr) {\n                 // Fat pointer casts.\n-                let t_cast_inner = t_cast.builtin_deref(true).expect(\"cast to non-pointer\").ty;\n+                let t_cast_inner =\n+                    t_cast.builtin_deref(true, ty::NoPreference).expect(\"cast to non-pointer\").ty;\n                 let ptr_ty = type_of::in_memory_type_of(cx, t_cast_inner).ptr_to();\n                 let addr = ptrcast(const_get_elt(cx, v, &[abi::FAT_PTR_ADDR as u32]),\n                                    ptr_ty);"}, {"sha": "9dc96ff72ebad485b07d0d9b111cc7f3c2425019", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2f77a59d1611f58efa8890e935bec271032cd235/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f77a59d1611f58efa8890e935bec271032cd235/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=2f77a59d1611f58efa8890e935bec271032cd235", "patch": "@@ -780,7 +780,7 @@ fn trans_index<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n \n             let ref_ty = // invoked methods have LB regions instantiated:\n                 bcx.tcx().no_late_bound_regions(&method_ty.fn_ret()).unwrap().unwrap();\n-            let elt_ty = match ref_ty.builtin_deref(true) {\n+            let elt_ty = match ref_ty.builtin_deref(true, ty::NoPreference) {\n                 None => {\n                     bcx.tcx().sess.span_bug(index_expr.span,\n                                             \"index method didn't return a \\\n@@ -1971,7 +1971,8 @@ pub fn cast_is_noop<'tcx>(tcx: &ty::ctxt<'tcx>,\n         return true;\n     }\n \n-    match (t_in.builtin_deref(true), t_out.builtin_deref(true)) {\n+    match (t_in.builtin_deref(true, ty::NoPreference),\n+           t_out.builtin_deref(true, ty::NoPreference)) {\n         (Some(ty::TypeAndMut{ ty: t_in, .. }), Some(ty::TypeAndMut{ ty: t_out, .. })) => {\n             t_in == t_out\n         }"}, {"sha": "2ce06786db281e86df0ec4d721861387010d2eb6", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2f77a59d1611f58efa8890e935bec271032cd235/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f77a59d1611f58efa8890e935bec271032cd235/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=2f77a59d1611f58efa8890e935bec271032cd235", "patch": "@@ -15,10 +15,10 @@ use middle::pat_util::{PatIdMap, pat_id_map, pat_is_binding};\n use middle::pat_util::pat_is_resolved_const;\n use middle::privacy::{AllPublic, LastMod};\n use middle::subst::Substs;\n-use middle::ty::{self, Ty, HasTypeFlags};\n+use middle::ty::{self, Ty, HasTypeFlags, LvaluePreference};\n use check::{check_expr, check_expr_has_type, check_expr_with_expectation};\n use check::{check_expr_coercable_to_type, demand, FnCtxt, Expectation};\n-use check::{check_expr_with_lvalue_pref, LvaluePreference};\n+use check::{check_expr_with_lvalue_pref};\n use check::{instantiate_path, resolve_ty_and_def_ufcs, structurally_resolved_type};\n use require_same_types;\n use util::nodemap::FnvHashMap;\n@@ -292,7 +292,7 @@ pub fn check_pat<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>,\n                     let region = fcx.infcx().next_region_var(infer::PatternRegion(pat.span));\n                     tcx.mk_ref(tcx.mk_region(region), ty::TypeAndMut {\n                         ty: tcx.mk_slice(inner_ty),\n-                        mutbl: expected_ty.builtin_deref(true).map(|mt| mt.mutbl)\n+                        mutbl: expected_ty.builtin_deref(true, ty::NoPreference).map(|mt| mt.mutbl)\n                                                               .unwrap_or(hir::MutImmutable)\n                     })\n                 }\n@@ -310,7 +310,7 @@ pub fn check_pat<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>,\n             }\n             if let Some(ref slice) = *slice {\n                 let region = fcx.infcx().next_region_var(infer::PatternRegion(pat.span));\n-                let mutbl = expected_ty.builtin_deref(true)\n+                let mutbl = expected_ty.builtin_deref(true, ty::NoPreference)\n                     .map_or(hir::MutImmutable, |mt| mt.mutbl);\n \n                 let slice_ty = tcx.mk_ref(tcx.mk_region(region), ty::TypeAndMut {\n@@ -399,7 +399,7 @@ pub fn check_dereferencable<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>,\n     let tcx = pcx.fcx.ccx.tcx;\n     if pat_is_binding(&tcx.def_map, inner) {\n         let expected = fcx.infcx().shallow_resolve(expected);\n-        expected.builtin_deref(true).map_or(true, |mt| match mt.ty.sty {\n+        expected.builtin_deref(true, ty::NoPreference).map_or(true, |mt| match mt.ty.sty {\n             ty::TyTrait(_) => {\n                 // This is \"x = SomeTrait\" being reduced from\n                 // \"let &x = &SomeTrait\" or \"let box x = Box<SomeTrait>\", an error."}, {"sha": "948b7dd15619236b890da48ed984e5d23faf7e77", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f77a59d1611f58efa8890e935bec271032cd235/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f77a59d1611f58efa8890e935bec271032cd235/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=2f77a59d1611f58efa8890e935bec271032cd235", "patch": "@@ -18,7 +18,6 @@ use super::err_args;\n use super::Expectation;\n use super::expected_types_for_fn_args;\n use super::FnCtxt;\n-use super::LvaluePreference;\n use super::method;\n use super::structurally_resolved_type;\n use super::TupleArgumentsFlag;\n@@ -28,7 +27,7 @@ use super::write_call;\n use CrateCtxt;\n use middle::def_id::{DefId, LOCAL_CRATE};\n use middle::infer;\n-use middle::ty::{self, Ty};\n+use middle::ty::{self, LvaluePreference, Ty};\n use syntax::codemap::Span;\n use syntax::parse::token;\n use syntax::ptr::P;"}, {"sha": "65409afa52d105be2be329ee6e557310bd2fc294", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f77a59d1611f58efa8890e935bec271032cd235/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f77a59d1611f58efa8890e935bec271032cd235/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=2f77a59d1611f58efa8890e935bec271032cd235", "patch": "@@ -60,13 +60,13 @@\n //! sort of a minor point so I've opted to leave it for later---after all\n //! we may want to adjust precisely when coercions occur.\n \n-use check::{autoderef, FnCtxt, LvaluePreference, UnresolvedTypeAction};\n+use check::{autoderef, FnCtxt, UnresolvedTypeAction};\n \n use middle::infer::{self, Coercion};\n use middle::traits::{self, ObligationCause};\n use middle::traits::{predicate_for_trait_def, report_selection_error};\n use middle::ty::{AutoDerefRef, AdjustDerefRef};\n-use middle::ty::{self, TypeAndMut, Ty, TypeError};\n+use middle::ty::{self, LvaluePreference, TypeAndMut, Ty, TypeError};\n use middle::ty_relate::RelateResult;\n use util::common::indent;\n "}, {"sha": "040e644a94d1f6ad3a9ce07cdf6a758d6a9c2dd0", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f77a59d1611f58efa8890e935bec271032cd235/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f77a59d1611f58efa8890e935bec271032cd235/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=2f77a59d1611f58efa8890e935bec271032cd235", "patch": "@@ -10,12 +10,12 @@\n \n use super::probe;\n \n-use check::{self, FnCtxt, NoPreference, PreferMutLvalue, callee, demand};\n+use check::{self, FnCtxt, callee, demand};\n use check::UnresolvedTypeAction;\n use middle::def_id::DefId;\n use middle::subst::{self};\n use middle::traits;\n-use middle::ty::{self, Ty};\n+use middle::ty::{self, NoPreference, PreferMutLvalue, Ty};\n use middle::ty_fold::TypeFoldable;\n use middle::infer;\n use middle::infer::InferCtxt;\n@@ -534,7 +534,7 @@ impl<'a,'tcx> ConfirmContext<'a,'tcx> {\n                                 }\n                                 Some(ty::AutoPtr(_, _)) => {\n                                     (adr.autoderefs, adr.unsize.map(|target| {\n-                                        target.builtin_deref(false)\n+                                        target.builtin_deref(false, NoPreference)\n                                               .expect(\"fixup: AutoPtr is not &T\").ty\n                                     }))\n                                 }"}, {"sha": "b04899f5ecdc7d5501518c88db4e1f1aee028025", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f77a59d1611f58efa8890e935bec271032cd235/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f77a59d1611f58efa8890e935bec271032cd235/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=2f77a59d1611f58efa8890e935bec271032cd235", "patch": "@@ -14,13 +14,13 @@ use super::{CandidateSource, ImplSource, TraitSource};\n use super::suggest;\n \n use check;\n-use check::{FnCtxt, NoPreference, UnresolvedTypeAction};\n+use check::{FnCtxt, UnresolvedTypeAction};\n use middle::def_id::DefId;\n use middle::fast_reject;\n use middle::subst;\n use middle::subst::Subst;\n use middle::traits;\n-use middle::ty::{self, RegionEscape, Ty, ToPolyTraitRef, TraitRef};\n+use middle::ty::{self, NoPreference, RegionEscape, Ty, ToPolyTraitRef, TraitRef};\n use middle::ty::HasTypeFlags;\n use middle::ty_fold::TypeFoldable;\n use middle::infer;"}, {"sha": "6961f3444d90875bdad2183ba6ba8d69b73e6de5", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f77a59d1611f58efa8890e935bec271032cd235/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f77a59d1611f58efa8890e935bec271032cd235/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=2f77a59d1611f58efa8890e935bec271032cd235", "patch": "@@ -324,7 +324,7 @@ fn type_derefs_to_local<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n     }\n \n     check::autoderef(fcx, span, rcvr_ty, None,\n-                     check::UnresolvedTypeAction::Ignore, check::NoPreference,\n+                     check::UnresolvedTypeAction::Ignore, ty::NoPreference,\n                      |ty, _| {\n         if is_local(ty) {\n             Some(())"}, {"sha": "c4368a3898d3a50331a31cf74a615ef9b1a97f58", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 19, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2f77a59d1611f58efa8890e935bec271032cd235/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f77a59d1611f58efa8890e935bec271032cd235/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=2f77a59d1611f58efa8890e935bec271032cd235", "patch": "@@ -76,7 +76,6 @@ type parameter).\n \n */\n \n-pub use self::LvaluePreference::*;\n pub use self::Expectation::*;\n pub use self::compare_method::{compare_impl_method, compare_const_impl};\n use self::TupleArgumentsFlag::*;\n@@ -95,6 +94,7 @@ use middle::subst::{self, Subst, Substs, VecPerParamSpace, ParamSpace, TypeSpace\n use middle::traits::{self, report_fulfillment_errors};\n use middle::ty::{FnSig, GenericPredicates, TypeScheme};\n use middle::ty::{Disr, ParamTy, ParameterEnvironment};\n+use middle::ty::{LvaluePreference, NoPreference, PreferMutLvalue};\n use middle::ty::{self, HasTypeFlags, RegionEscape, ToPolyTraitRef, Ty};\n use middle::ty::{MethodCall, MethodCallee};\n use middle::ty_fold::{TypeFolder, TypeFoldable};\n@@ -2086,21 +2086,6 @@ impl<'a, 'tcx> RegionScope for FnCtxt<'a, 'tcx> {\n     }\n }\n \n-#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n-pub enum LvaluePreference {\n-    PreferMutLvalue,\n-    NoPreference\n-}\n-\n-impl LvaluePreference {\n-    pub fn from_mutbl(m: hir::Mutability) -> Self {\n-        match m {\n-            hir::MutMutable => PreferMutLvalue,\n-            hir::MutImmutable => NoPreference,\n-        }\n-    }\n-}\n-\n /// Whether `autoderef` requires types to resolve.\n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n pub enum UnresolvedTypeAction {\n@@ -2156,7 +2141,7 @@ pub fn autoderef<'a, 'tcx, T, F>(fcx: &FnCtxt<'a, 'tcx>,\n         }\n \n         // Otherwise, deref if type is derefable:\n-        let mt = match resolved_t.builtin_deref(false) {\n+        let mt = match resolved_t.builtin_deref(false, lvalue_pref) {\n             Some(mt) => Some(mt),\n             None => {\n                 let method_call =\n@@ -2245,7 +2230,7 @@ fn make_overloaded_lvalue_return_type<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n             }\n \n             // method returns &T, but the type as visible to user is T, so deref\n-            ret_ty.builtin_deref(true)\n+            ret_ty.builtin_deref(true, NoPreference)\n         }\n         None => None,\n     }\n@@ -3293,7 +3278,7 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n                 }\n                 hir::UnDeref => {\n                     oprnd_t = structurally_resolved_type(fcx, expr.span, oprnd_t);\n-                    oprnd_t = match oprnd_t.builtin_deref(true) {\n+                    oprnd_t = match oprnd_t.builtin_deref(true, NoPreference) {\n                         Some(mt) => mt.ty,\n                         None => match try_overloaded_deref(fcx, expr.span,\n                                                            Some(MethodCall::expr(expr.id)),"}, {"sha": "07754e8506b9c907eeccab1431900a5053f02cd1", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f77a59d1611f58efa8890e935bec271032cd235/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f77a59d1611f58efa8890e935bec271032cd235/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=2f77a59d1611f58efa8890e935bec271032cd235", "patch": "@@ -17,12 +17,11 @@ use super::{\n     demand,\n     method,\n     FnCtxt,\n-    PreferMutLvalue,\n     structurally_resolved_type,\n };\n use middle::def_id::DefId;\n use middle::traits;\n-use middle::ty::{Ty, HasTypeFlags};\n+use middle::ty::{Ty, HasTypeFlags, PreferMutLvalue};\n use syntax::ast;\n use syntax::parse::token;\n use rustc_front::hir;"}, {"sha": "844e143b9fa5b932470cdf7970cabe3c04a5d17b", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f77a59d1611f58efa8890e935bec271032cd235/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f77a59d1611f58efa8890e935bec271032cd235/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=2f77a59d1611f58efa8890e935bec271032cd235", "patch": "@@ -1031,7 +1031,7 @@ fn constrain_autoderefs<'a, 'tcx>(rcx: &mut Rcx<'a, 'tcx>,\n                                             r_deref_expr, *r_ptr);\n         }\n \n-        match derefd_ty.builtin_deref(true) {\n+        match derefd_ty.builtin_deref(true, ty::NoPreference) {\n             Some(mt) => derefd_ty = mt.ty,\n             /* if this type can't be dereferenced, then there's already an error\n                in the session saying so. Just bail out for now */"}, {"sha": "dd34612af0fc6a1515d45cfb74bdb5320b7cff8e", "filename": "src/test/run-pass/issue-26205.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/2f77a59d1611f58efa8890e935bec271032cd235/src%2Ftest%2Frun-pass%2Fissue-26205.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f77a59d1611f58efa8890e935bec271032cd235/src%2Ftest%2Frun-pass%2Fissue-26205.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-26205.rs?ref=2f77a59d1611f58efa8890e935bec271032cd235", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::ops::{Deref, DerefMut};\n+\n+struct Foo;\n+\n+impl Foo {\n+    fn foo_mut(&mut self) {}\n+}\n+\n+struct Bar(Foo);\n+\n+impl Deref for Bar {\n+    type Target = Foo;\n+\n+    fn deref(&self) -> &Foo {\n+        &self.0\n+    }\n+}\n+\n+impl DerefMut for Bar {\n+    fn deref_mut(&mut self) -> &mut Foo {\n+        &mut self.0\n+    }\n+}\n+\n+fn test(mut bar: Box<Bar>) {\n+    bar.foo_mut();\n+}\n+\n+fn main() {}"}]}