{"sha": "f85ab544dfbbce7448993c490ad16c176339b939", "node_id": "C_kwDOAAsO6NoAKGY4NWFiNTQ0ZGZiYmNlNzQ0ODk5M2M0OTBhZDE2YzE3NjMzOWI5Mzk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-01T23:39:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-01T23:39:56Z"}, "message": "Auto merge of #112184 - matthiaskrgr:rollup-tlh72el, r=matthiaskrgr\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #111496 (Extra context for unreachable_pub lint)\n - #111802 (Make `x test --dry-run` less verbose)\n - #112133 (Migrate GUI colors test to original CSS color format)\n - #112146 (Fix `src/etc/pre-push.sh` when `build.locked-deps` is already set)\n - #112147 (add inline-const test for elided lifetimes being infer vars)\n - #112154 (Fix bug in utf16_to_utf8 for zero length strings)\n - #112155 (Improve CGU debug printing.)\n - #112173 (Mention GuillaumeGomez in case GUI tests are updated)\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "37cf9b8fc996f465879b3d472823d7cba71df003", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37cf9b8fc996f465879b3d472823d7cba71df003"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f85ab544dfbbce7448993c490ad16c176339b939", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f85ab544dfbbce7448993c490ad16c176339b939", "html_url": "https://github.com/rust-lang/rust/commit/f85ab544dfbbce7448993c490ad16c176339b939", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f85ab544dfbbce7448993c490ad16c176339b939/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d59363ad0b6391b7fc5bbb02c9ccf9300eef3753", "url": "https://api.github.com/repos/rust-lang/rust/commits/d59363ad0b6391b7fc5bbb02c9ccf9300eef3753", "html_url": "https://github.com/rust-lang/rust/commit/d59363ad0b6391b7fc5bbb02c9ccf9300eef3753"}, {"sha": "d505702a7e5403498dba352dadc359ef8eb6fb9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d505702a7e5403498dba352dadc359ef8eb6fb9f", "html_url": "https://github.com/rust-lang/rust/commit/d505702a7e5403498dba352dadc359ef8eb6fb9f"}], "stats": {"total": 129, "additions": 92, "deletions": 37}, "files": [{"sha": "213e8db66a056527af688d6f96f196a86619a69e", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f85ab544dfbbce7448993c490ad16c176339b939/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f85ab544dfbbce7448993c490ad16c176339b939/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=f85ab544dfbbce7448993c490ad16c176339b939", "patch": "@@ -1317,10 +1317,14 @@ declare_lint! {\n     ///\n     /// ### Explanation\n     ///\n-    /// A bare `pub` visibility may be misleading if the item is not actually\n-    /// publicly exported from the crate. The `pub(crate)` visibility is\n-    /// recommended to be used instead, which more clearly expresses the intent\n-    /// that the item is only visible within its own crate.\n+    /// The `pub` keyword both expresses an intent for an item to be publicly available, and also\n+    /// signals to the compiler to make the item publicly accessible. The intent can only be\n+    /// satisfied, however, if all items which contain this item are *also* publicly accessible.\n+    /// Thus, this lint serves to identify situations where the intent does not match the reality.\n+    ///\n+    /// If you wish the item to be accessible elsewhere within the crate, but not outside it, the\n+    /// `pub(crate)` visibility is recommended to be used instead. This more clearly expresses the\n+    /// intent that the item is only visible within its own crate.\n     ///\n     /// This lint is \"allow\" by default because it will trigger for a large\n     /// amount existing Rust code, and has some false-positives. Eventually it"}, {"sha": "1511e25523559edd20cd0013fc0d0f7b9f20fc12", "filename": "compiler/rustc_middle/src/mir/mono.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f85ab544dfbbce7448993c490ad16c176339b939/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f85ab544dfbbce7448993c490ad16c176339b939/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs?ref=f85ab544dfbbce7448993c490ad16c176339b939", "patch": "@@ -291,10 +291,12 @@ impl<'tcx> CodegenUnit<'tcx> {\n         self.primary = true;\n     }\n \n+    /// The order of these items is non-determinstic.\n     pub fn items(&self) -> &FxHashMap<MonoItem<'tcx>, (Linkage, Visibility)> {\n         &self.items\n     }\n \n+    /// The order of these items is non-determinstic.\n     pub fn items_mut(&mut self) -> &mut FxHashMap<MonoItem<'tcx>, (Linkage, Visibility)> {\n         &mut self.items\n     }"}, {"sha": "89dadc782f2dad06518109c76f4eb9c13f875842", "filename": "compiler/rustc_monomorphize/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f85ab544dfbbce7448993c490ad16c176339b939/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f85ab544dfbbce7448993c490ad16c176339b939/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs?ref=f85ab544dfbbce7448993c490ad16c176339b939", "patch": "@@ -1,4 +1,5 @@\n #![feature(array_windows)]\n+#![feature(is_sorted)]\n #![recursion_limit = \"256\"]\n #![allow(rustc::potential_query_instability)]\n #![deny(rustc::untranslatable_diagnostic)]"}, {"sha": "015361f8ad5b71d18061e65a13c3d73f44b558a0", "filename": "compiler/rustc_monomorphize/src/partitioning.rs", "status": "modified", "additions": 40, "deletions": 28, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/f85ab544dfbbce7448993c490ad16c176339b939/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f85ab544dfbbce7448993c490ad16c176339b939/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning.rs?ref=f85ab544dfbbce7448993c490ad16c176339b939", "patch": "@@ -126,11 +126,14 @@ struct PartitioningCx<'a, 'tcx> {\n }\n \n struct PlacedRootMonoItems<'tcx> {\n+    /// The codegen units, sorted by name to make things deterministic.\n     codegen_units: Vec<CodegenUnit<'tcx>>,\n+\n     roots: FxHashSet<MonoItem<'tcx>>,\n     internalization_candidates: FxHashSet<MonoItem<'tcx>>,\n }\n \n+// The output CGUs are sorted by name.\n fn partition<'tcx, I>(\n     tcx: TyCtxt<'tcx>,\n     mono_items: &mut I,\n@@ -143,6 +146,7 @@ where\n     let _prof_timer = tcx.prof.generic_activity(\"cgu_partitioning\");\n \n     let cx = &PartitioningCx { tcx, target_cgu_count: max_cgu_count, inlining_map };\n+\n     // In the first step, we place all regular monomorphizations into their\n     // respective 'home' codegen unit. Regular monomorphizations are all\n     // functions and statics defined in the local crate.\n@@ -225,8 +229,8 @@ where\n         dead_code_cgu.make_code_coverage_dead_code_cgu();\n     }\n \n-    // Finally, sort by codegen unit name, so that we get deterministic results.\n-    codegen_units.sort_by(|a, b| a.name().as_str().cmp(b.name().as_str()));\n+    // Ensure CGUs are sorted by name, so that we get deterministic results.\n+    assert!(codegen_units.is_sorted_by(|a, b| Some(a.name().as_str().cmp(b.name().as_str()))));\n \n     debug_dump(tcx, \"FINAL\", &codegen_units);\n \n@@ -301,27 +305,22 @@ where\n         codegen_units.insert(codegen_unit_name, CodegenUnit::new(codegen_unit_name));\n     }\n \n-    let codegen_units = codegen_units.into_values().collect();\n+    let mut codegen_units: Vec<_> = codegen_units.into_values().collect();\n+    codegen_units.sort_by(|a, b| a.name().as_str().cmp(b.name().as_str()));\n+\n     PlacedRootMonoItems { codegen_units, roots, internalization_candidates }\n }\n \n+// This function requires the CGUs to be sorted by name on input, and ensures\n+// they are sorted by name on return, for deterministic behaviour.\n fn merge_codegen_units<'tcx>(\n     cx: &PartitioningCx<'_, 'tcx>,\n     codegen_units: &mut Vec<CodegenUnit<'tcx>>,\n ) {\n     assert!(cx.target_cgu_count >= 1);\n \n-    // Note that at this point in time the `codegen_units` here may not be\n-    // in a deterministic order (but we know they're deterministically the\n-    // same set). We want this merging to produce a deterministic ordering\n-    // of codegen units from the input.\n-    //\n-    // Due to basically how we've implemented the merging below (merge the\n-    // two smallest into each other) we're sure to start off with a\n-    // deterministic order (sorted by name). This'll mean that if two cgus\n-    // have the same size the stable sort below will keep everything nice\n-    // and deterministic.\n-    codegen_units.sort_by(|a, b| a.name().as_str().cmp(b.name().as_str()));\n+    // A sorted order here ensures merging is deterministic.\n+    assert!(codegen_units.is_sorted_by(|a, b| Some(a.name().as_str().cmp(b.name().as_str()))));\n \n     // This map keeps track of what got merged into what.\n     let mut cgu_contents: FxHashMap<Symbol, Vec<Symbol>> =\n@@ -400,6 +399,9 @@ fn merge_codegen_units<'tcx>(\n             cgu.set_name(numbered_codegen_unit_name);\n         }\n     }\n+\n+    // A sorted order here ensures what follows can be deterministic.\n+    codegen_units.sort_by(|a, b| a.name().as_str().cmp(b.name().as_str()));\n }\n \n /// For symbol internalization, we need to know whether a symbol/mono-item is\n@@ -859,36 +861,46 @@ fn default_visibility(tcx: TyCtxt<'_>, id: DefId, is_generic: bool) -> Visibilit\n         _ => Visibility::Hidden,\n     }\n }\n+\n fn debug_dump<'a, 'tcx: 'a>(tcx: TyCtxt<'tcx>, label: &str, cgus: &[CodegenUnit<'tcx>]) {\n     let dump = move || {\n         use std::fmt::Write;\n \n         let num_cgus = cgus.len();\n-        let max = cgus.iter().map(|cgu| cgu.size_estimate()).max().unwrap();\n-        let min = cgus.iter().map(|cgu| cgu.size_estimate()).min().unwrap();\n-        let ratio = max as f64 / min as f64;\n+        let num_items: usize = cgus.iter().map(|cgu| cgu.items().len()).sum();\n+        let total_size: usize = cgus.iter().map(|cgu| cgu.size_estimate()).sum();\n+        let max_size = cgus.iter().map(|cgu| cgu.size_estimate()).max().unwrap();\n+        let min_size = cgus.iter().map(|cgu| cgu.size_estimate()).min().unwrap();\n+        let max_min_size_ratio = max_size as f64 / min_size as f64;\n \n         let s = &mut String::new();\n         let _ = writeln!(\n             s,\n-            \"{label} ({num_cgus} CodegenUnits, max={max}, min={min}, max/min={ratio:.1}):\"\n+            \"{label} ({num_items} items, total_size={total_size}; {num_cgus} CGUs, \\\n+             max_size={max_size}, min_size={min_size}, max_size/min_size={max_min_size_ratio:.1}):\"\n         );\n-        for cgu in cgus {\n-            let _ =\n-                writeln!(s, \"CodegenUnit {} estimated size {}:\", cgu.name(), cgu.size_estimate());\n+        for (i, cgu) in cgus.iter().enumerate() {\n+            let num_items = cgu.items().len();\n+            let _ = writeln!(\n+                s,\n+                \"- CGU[{i}] {} ({num_items} items, size={}):\",\n+                cgu.name(),\n+                cgu.size_estimate()\n+            );\n \n-            for (mono_item, linkage) in cgu.items() {\n-                let symbol_name = mono_item.symbol_name(tcx).name;\n+            // The order of `cgu.items()` is non-deterministic; sort it by name\n+            // to give deterministic output.\n+            let mut items: Vec<_> = cgu.items().iter().collect();\n+            items.sort_by_key(|(item, _)| item.symbol_name(tcx).name);\n+            for (item, linkage) in items {\n+                let symbol_name = item.symbol_name(tcx).name;\n                 let symbol_hash_start = symbol_name.rfind('h');\n                 let symbol_hash = symbol_hash_start.map_or(\"<no hash>\", |i| &symbol_name[i..]);\n \n+                let size = item.size_estimate(tcx);\n                 let _ = with_no_trimmed_paths!(writeln!(\n                     s,\n-                    \" - {} [{:?}] [{}] estimated size {}\",\n-                    mono_item,\n-                    linkage,\n-                    symbol_hash,\n-                    mono_item.size_estimate(tcx)\n+                    \"  - {item} [{linkage:?}] [{symbol_hash}] (size={size})\"\n                 ));\n             }\n "}, {"sha": "3fcaaa508e3c89f6bf6039029c798b7ad5b0573d", "filename": "library/std/src/sys/windows/stdio.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f85ab544dfbbce7448993c490ad16c176339b939/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f85ab544dfbbce7448993c490ad16c176339b939/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstdio.rs?ref=f85ab544dfbbce7448993c490ad16c176339b939", "patch": "@@ -11,6 +11,9 @@ use crate::sys::cvt;\n use crate::sys::handle::Handle;\n use core::str::utf8_char_width;\n \n+#[cfg(test)]\n+mod tests;\n+\n // Don't cache handles but get them fresh for every read/write. This allows us to track changes to\n // the value over time (such as if a process calls `SetStdHandle` while it's running). See #40490.\n pub struct Stdin {\n@@ -383,6 +386,10 @@ fn utf16_to_utf8(utf16: &[u16], utf8: &mut [u8]) -> io::Result<usize> {\n     debug_assert!(utf16.len() <= c::c_int::MAX as usize);\n     debug_assert!(utf8.len() <= c::c_int::MAX as usize);\n \n+    if utf16.is_empty() {\n+        return Ok(0);\n+    }\n+\n     let result = unsafe {\n         c::WideCharToMultiByte(\n             c::CP_UTF8,              // CodePage"}, {"sha": "1e53e0bee636978f55f2f27ae9fbe78ea0e26c06", "filename": "library/std/src/sys/windows/stdio/tests.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f85ab544dfbbce7448993c490ad16c176339b939/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstdio%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f85ab544dfbbce7448993c490ad16c176339b939/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstdio%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstdio%2Ftests.rs?ref=f85ab544dfbbce7448993c490ad16c176339b939", "patch": "@@ -0,0 +1,6 @@\n+use super::utf16_to_utf8;\n+\n+#[test]\n+fn zero_size_read() {\n+    assert_eq!(utf16_to_utf8(&[], &mut []).unwrap(), 0);\n+}"}, {"sha": "eec8c4ad69f2343a002f18c8016be4f9038e7a73", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f85ab544dfbbce7448993c490ad16c176339b939/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f85ab544dfbbce7448993c490ad16c176339b939/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=f85ab544dfbbce7448993c490ad16c176339b939", "patch": "@@ -1772,6 +1772,14 @@ impl Step for BookTest {\n     ///\n     /// This uses the `rustdoc` that sits next to `compiler`.\n     fn run(self, builder: &Builder<'_>) {\n+        let host = self.compiler.host;\n+        let _guard = builder.msg(\n+            Kind::Test,\n+            self.compiler.stage,\n+            &format!(\"book {}\", self.name),\n+            host,\n+            host,\n+        );\n         // External docs are different from local because:\n         // - Some books need pre-processing by mdbook before being tested.\n         // - They need to save their state to toolstate.\n@@ -1963,7 +1971,7 @@ fn markdown_test(builder: &Builder<'_>, compiler: Compiler, markdown: &Path) ->\n         }\n     }\n \n-    builder.info(&format!(\"doc tests for: {}\", markdown.display()));\n+    builder.verbose(&format!(\"doc tests for: {}\", markdown.display()));\n     let mut cmd = builder.rustdoc_cmd(compiler);\n     builder.add_rust_test_threads(&mut cmd);\n     // allow for unstable options such as new editions"}, {"sha": "0807e0492c1134a606d8fd8c0353705f7dae9e62", "filename": "src/etc/pre-push.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f85ab544dfbbce7448993c490ad16c176339b939/src%2Fetc%2Fpre-push.sh", "raw_url": "https://github.com/rust-lang/rust/raw/f85ab544dfbbce7448993c490ad16c176339b939/src%2Fetc%2Fpre-push.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fpre-push.sh?ref=f85ab544dfbbce7448993c490ad16c176339b939", "patch": "@@ -14,4 +14,4 @@ ROOT_DIR=\"$(git rev-parse --show-toplevel)\"\n echo \"Running pre-push script $ROOT_DIR/x test tidy\"\n \n cd \"$ROOT_DIR\"\n-CARGOFLAGS=\"--locked\" ./x test tidy\n+./x test tidy --set build.locked-deps=true"}, {"sha": "42c5b5e6e69e3e08169c6904cb8461ba893fcf04", "filename": "tests/rustdoc-gui/theme-in-history.goml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f85ab544dfbbce7448993c490ad16c176339b939/tests%2Frustdoc-gui%2Ftheme-in-history.goml", "raw_url": "https://github.com/rust-lang/rust/raw/f85ab544dfbbce7448993c490ad16c176339b939/tests%2Frustdoc-gui%2Ftheme-in-history.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Ftheme-in-history.goml?ref=f85ab544dfbbce7448993c490ad16c176339b939", "patch": "@@ -7,21 +7,21 @@ set-local-storage: {\n }\n // We reload the page so the local storage settings are being used.\n reload:\n-assert-css: (\"body\", { \"background-color\": \"rgb(53, 53, 53)\" })\n+assert-css: (\"body\", { \"background-color\": \"#353535\" })\n assert-local-storage: { \"rustdoc-theme\": \"dark\" }\n \n // Now we go to the settings page.\n go-to: \"file://\" + |DOC_PATH| + \"/settings.html\"\n wait-for: \"#settings\"\n // We change the theme to \"light\".\n click: \"#theme-light\"\n-wait-for-css: (\"body\", { \"background-color\": \"rgb(255, 255, 255)\" })\n+wait-for-css: (\"body\", { \"background-color\": \"white\" })\n assert-local-storage: { \"rustdoc-theme\": \"light\" }\n \n // We go back in history.\n history-go-back:\n // Confirm that we're not on the settings page.\n assert-false: \"#settings\"\n // Check that the current theme is still \"light\".\n-assert-css: (\"body\", { \"background-color\": \"rgb(255, 255, 255)\" })\n+assert-css: (\"body\", { \"background-color\": \"white\" })\n assert-local-storage: { \"rustdoc-theme\": \"light\" }"}, {"sha": "5661db4a2530dafa64c5d12cdca07f181052a2ab", "filename": "tests/ui/inline-const/elided-lifetime-being-infer-vars.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f85ab544dfbbce7448993c490ad16c176339b939/tests%2Fui%2Finline-const%2Felided-lifetime-being-infer-vars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f85ab544dfbbce7448993c490ad16c176339b939/tests%2Fui%2Finline-const%2Felided-lifetime-being-infer-vars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finline-const%2Felided-lifetime-being-infer-vars.rs?ref=f85ab544dfbbce7448993c490ad16c176339b939", "patch": "@@ -0,0 +1,11 @@\n+// check-pass\n+\n+#![feature(inline_const)]\n+\n+fn main() {\n+    let _my_usize = const {\n+        let a = 10_usize;\n+        let b: &'_ usize = &a;\n+        *b\n+    };\n+}"}, {"sha": "b1f4e9c77fbd5625a0968ff9a42080e0dea48943", "filename": "triagebot.toml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f85ab544dfbbce7448993c490ad16c176339b939/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f85ab544dfbbce7448993c490ad16c176339b939/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=f85ab544dfbbce7448993c490ad16c176339b939", "patch": "@@ -387,6 +387,10 @@ cc = [\n message = \"Some changes occurred in HTML/CSS themes.\"\n cc = [\"@GuillaumeGomez\"]\n \n+[mentions.\"tests/rustdoc-gui/\"]\n+message = \"Some changes occurred in GUI tests.\"\n+cc = [\"@GuillaumeGomez\"]\n+\n [mentions.\"src/librustdoc/html/static/css/themes/ayu.css\"]\n message = \"A change occurred in the Ayu theme.\"\n cc = [\"@Cldfire\"]"}]}