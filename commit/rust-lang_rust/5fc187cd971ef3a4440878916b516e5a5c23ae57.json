{"sha": "5fc187cd971ef3a4440878916b516e5a5c23ae57", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmYzE4N2NkOTcxZWYzYTQ0NDA4Nzg5MTZiNTE2ZTVhNWMyM2FlNTc=", "commit": {"author": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-08-16T12:41:12Z"}, "committer": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-08-16T12:41:12Z"}, "message": "Fix a link, improve method resolution", "tree": {"sha": "8b8306e1421be44052a9db614c8458ee34e69382", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b8306e1421be44052a9db614c8458ee34e69382"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5fc187cd971ef3a4440878916b516e5a5c23ae57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5fc187cd971ef3a4440878916b516e5a5c23ae57", "html_url": "https://github.com/rust-lang/rust/commit/5fc187cd971ef3a4440878916b516e5a5c23ae57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5fc187cd971ef3a4440878916b516e5a5c23ae57/comments", "author": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "committer": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15cad1c46555912019615e47bd06cb538dfa7996", "url": "https://api.github.com/repos/rust-lang/rust/commits/15cad1c46555912019615e47bd06cb538dfa7996", "html_url": "https://github.com/rust-lang/rust/commit/15cad1c46555912019615e47bd06cb538dfa7996"}], "stats": {"total": 51, "additions": 27, "deletions": 24}, "files": [{"sha": "c11049fb98152e0696675f077293c4c3ed287867", "filename": "library/std/src/net/addr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fc187cd971ef3a4440878916b516e5a5c23ae57/library%2Fstd%2Fsrc%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fc187cd971ef3a4440878916b516e5a5c23ae57/library%2Fstd%2Fsrc%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Faddr.rs?ref=5fc187cd971ef3a4440878916b516e5a5c23ae57", "patch": "@@ -22,6 +22,8 @@ use crate::vec;\n /// The size of a `SocketAddr` instance may vary depending on the target operating\n /// system.\n ///\n+/// [IP address]: IpAddr\n+///\n /// # Examples\n ///\n /// ```"}, {"sha": "de28268ea368212ee8593e01a7f087dc20b103c4", "filename": "library/std/src/net/ip.rs", "status": "modified", "additions": 25, "deletions": 24, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/5fc187cd971ef3a4440878916b516e5a5c23ae57/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fc187cd971ef3a4440878916b516e5a5c23ae57/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip.rs?ref=5fc187cd971ef3a4440878916b516e5a5c23ae57", "patch": "@@ -133,8 +133,8 @@ pub enum Ipv6MulticastScope {\n impl IpAddr {\n     /// Returns [`true`] for the special 'unspecified' address.\n     ///\n-    /// See the documentation for [`Ipv4Addr::is_unspecified`] and\n-    /// [`Ipv6Addr::is_unspecified`] for more details.\n+    /// See the documentation for [`Ipv4Addr::is_unspecified()`] and\n+    /// [`Ipv6Addr::is_unspecified()`] for more details.\n     ///\n     /// [`true`]: ../../std/primitive.bool.html\n     ///\n@@ -156,8 +156,8 @@ impl IpAddr {\n \n     /// Returns [`true`] if this is a loopback address.\n     ///\n-    /// See the documentation for [`Ipv4Addr::is_loopback`] and\n-    /// [`Ipv6Addr::is_loopback`] for more details.\n+    /// See the documentation for [`Ipv4Addr::is_loopback()`] and\n+    /// [`Ipv6Addr::is_loopback()`] for more details.\n     ///\n     /// [`true`]: ../../std/primitive.bool.html\n     ///\n@@ -179,8 +179,8 @@ impl IpAddr {\n \n     /// Returns [`true`] if the address appears to be globally routable.\n     ///\n-    /// See the documentation for [`Ipv4Addr::is_global`] and\n-    /// [`Ipv6Addr::is_global`] for more details.\n+    /// See the documentation for [`Ipv4Addr::is_global()`] and\n+    /// [`Ipv6Addr::is_global()`] for more details.\n     ///\n     /// [`true`]: ../../std/primitive.bool.html\n     ///\n@@ -203,8 +203,8 @@ impl IpAddr {\n \n     /// Returns [`true`] if this is a multicast address.\n     ///\n-    /// See the documentation for [`Ipv4Addr::is_multicast`] and\n-    /// [`Ipv6Addr::is_multicast`] for more details.\n+    /// See the documentation for [`Ipv4Addr::is_multicast()`] and\n+    /// [`Ipv6Addr::is_multicast()`] for more details.\n     ///\n     /// [`true`]: ../../std/primitive.bool.html\n     ///\n@@ -226,8 +226,8 @@ impl IpAddr {\n \n     /// Returns [`true`] if this address is in a range designated for documentation.\n     ///\n-    /// See the documentation for [`Ipv4Addr::is_documentation`] and\n-    /// [`Ipv6Addr::is_documentation`] for more details.\n+    /// See the documentation for [`Ipv4Addr::is_documentation()`] and\n+    /// [`Ipv6Addr::is_documentation()`] for more details.\n     ///\n     /// [`true`]: ../../std/primitive.bool.html\n     ///\n@@ -470,23 +470,24 @@ impl Ipv4Addr {\n     /// Returns [`true`] if the address appears to be globally routable.\n     /// See [iana-ipv4-special-registry][ipv4-sr].\n     ///\n-    /// The following return false:\n+    /// The following return [`false`]:\n     ///\n-    /// - private addresses (see [`Ipv4Addr::is_private`])\n-    /// - the loopback address (see [`Ipv4Addr::is_loopback`])\n-    /// - the link-local address (see [`Ipv4Addr::is_link_local`])\n-    /// - the broadcast address (see [`Ipv4Addr::is_broadcast`])\n-    /// - addresses used for documentation (see [`Ipv4Addr::is_documentation`])\n-    /// - the unspecified address (see [`Ipv4Addr::is_unspecified`]), and the whole\n+    /// - private addresses (see [`Ipv4Addr::is_private()`])\n+    /// - the loopback address (see [`Ipv4Addr::is_loopback()`])\n+    /// - the link-local address (see [`Ipv4Addr::is_link_local()`])\n+    /// - the broadcast address (see [`Ipv4Addr::is_broadcast()`])\n+    /// - addresses used for documentation (see [`Ipv4Addr::is_documentation()`])\n+    /// - the unspecified address (see [`Ipv4Addr::is_unspecified()`]), and the whole\n     ///   0.0.0.0/8 block\n     /// - addresses reserved for future protocols (see\n-    /// [`Ipv4Addr::is_ietf_protocol_assignment`], except\n+    /// [`Ipv4Addr::is_ietf_protocol_assignment()`], except\n     /// `192.0.0.9/32` and `192.0.0.10/32` which are globally routable\n-    /// - addresses reserved for future use (see [`Ipv4Addr::is_reserved`]\n+    /// - addresses reserved for future use (see [`Ipv4Addr::is_reserved()`]\n     /// - addresses reserved for networking devices benchmarking (see\n-    /// [`Ipv4Addr::is_benchmarking`])\n+    /// [`Ipv4Addr::is_benchmarking()`])\n     ///\n     /// [`true`]: ../../std/primitive.bool.html\n+    /// [`false`]: ../../std/primitive.bool.html\n     /// [ipv4-sr]: https://www.iana.org/assignments/iana-ipv4-special-registry/iana-ipv4-special-registry.xhtml\n     ///\n     /// # Examples\n@@ -1218,7 +1219,7 @@ impl Ipv6Addr {\n     ///\n     /// This method validates the format defined in the RFC and won't recognize the following\n     /// addresses such as `fe80:0:0:1::` or `fe81::` as unicast link-local addresses for example.\n-    /// If you need a less strict validation use [`Ipv6Addr::is_unicast_link_local`] instead.\n+    /// If you need a less strict validation use [`Ipv6Addr::is_unicast_link_local()`] instead.\n     ///\n     /// [`true`]: ../../std/primitive.bool.html\n     ///\n@@ -1249,7 +1250,7 @@ impl Ipv6Addr {\n     /// - [IETF RFC 4291 section 2.5.6]\n     /// - [RFC 4291 errata 4406] (which has been rejected but provides useful\n     ///   insight)\n-    /// - [`Ipv6Addr::is_unicast_link_local`]\n+    /// - [`Ipv6Addr::is_unicast_link_local()`]\n     ///\n     /// [IETF RFC 4291]: https://tools.ietf.org/html/rfc4291\n     /// [IETF RFC 4291 section 2.5.6]: https://tools.ietf.org/html/rfc4291#section-2.5.6\n@@ -1275,9 +1276,9 @@ impl Ipv6Addr {\n     /// ```\n     ///\n     /// As a result, this method consider addresses such as `fe80:0:0:1::` or `fe81::` to be\n-    /// unicast link-local addresses, whereas [`Ipv6Addr::is_unicast_link_local_strict`] does not.\n+    /// unicast link-local addresses, whereas [`Ipv6Addr::is_unicast_link_local_strict()`] does not.\n     /// If you need a strict validation fully compliant with the RFC, use\n-    /// [`Ipv6Addr::is_unicast_link_local_strict`] instead.\n+    /// [`Ipv6Addr::is_unicast_link_local_strict()`] instead.\n     ///\n     /// [`true`]: ../../std/primitive.bool.html\n     ///"}]}