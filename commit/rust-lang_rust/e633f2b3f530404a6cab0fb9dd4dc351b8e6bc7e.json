{"sha": "e633f2b3f530404a6cab0fb9dd4dc351b8e6bc7e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2MzNmMmIzZjUzMDQwNGE2Y2FiMGZiOWRkNGRjMzUxYjhlNmJjN2U=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-10-18T06:56:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-10-18T06:56:17Z"}, "message": "Merge pull request #3109 from scampi/issue-3038\n\nforce a newline after the `if` condition if there is a different indentation level", "tree": {"sha": "98ddde2682a0034dcf0f485367244144e8172155", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98ddde2682a0034dcf0f485367244144e8172155"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e633f2b3f530404a6cab0fb9dd4dc351b8e6bc7e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbyC6RCRBK7hj4Ov3rIwAAdHIIAJDh0l7zdiKi/KTZzUlqa6G5\n9/YsuwWOKAR8IZ9qa2yDiSMf9/wZAZwL/G8Ip094B/J4TuNpquMaopwIC+Xl0f0H\nFiisf1Kfg6gN7QWGYytMd1PL+xyIGNpFtIvKYJbQspg9JB4bBtjUNVrKDuAoDUtR\n29egD/NTt//aCBMnhRoUHMVrQ4DgjfFCr9bFRXE/0gtVtQ8sLUTCiyyZqKcGWM97\nei7V+iVaN0zJwXTG/NwbzQGvd+tAzpiv7yUubtADf85HTXQES/kqvbHO76rlROFq\nUeGUh79roNzpe4pBcszzboBUedsb7UN3nLwR1WWcjT/cBqMY1TMccxIXFugPNXk=\n=LeSF\n-----END PGP SIGNATURE-----\n", "payload": "tree 98ddde2682a0034dcf0f485367244144e8172155\nparent 750b25261380b776de2518fd6863fe63f98d2722\nparent 30c06da78124dad8341689a15d6ccfe1450c5ab9\nauthor Nick Cameron <nrc@ncameron.org> 1539845777 +1300\ncommitter GitHub <noreply@github.com> 1539845777 +1300\n\nMerge pull request #3109 from scampi/issue-3038\n\nforce a newline after the `if` condition if there is a different indentation level"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e633f2b3f530404a6cab0fb9dd4dc351b8e6bc7e", "html_url": "https://github.com/rust-lang/rust/commit/e633f2b3f530404a6cab0fb9dd4dc351b8e6bc7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e633f2b3f530404a6cab0fb9dd4dc351b8e6bc7e/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "750b25261380b776de2518fd6863fe63f98d2722", "url": "https://api.github.com/repos/rust-lang/rust/commits/750b25261380b776de2518fd6863fe63f98d2722", "html_url": "https://github.com/rust-lang/rust/commit/750b25261380b776de2518fd6863fe63f98d2722"}, {"sha": "30c06da78124dad8341689a15d6ccfe1450c5ab9", "url": "https://api.github.com/repos/rust-lang/rust/commits/30c06da78124dad8341689a15d6ccfe1450c5ab9", "html_url": "https://github.com/rust-lang/rust/commit/30c06da78124dad8341689a15d6ccfe1450c5ab9"}], "stats": {"total": 95, "additions": 93, "deletions": 2}, "files": [{"sha": "fbbc592e547228c2b1175bd008a7013ff8ea5017", "filename": "src/expr.rs", "status": "modified", "additions": 42, "deletions": 1, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/e633f2b3f530404a6cab0fb9dd4dc351b8e6bc7e/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e633f2b3f530404a6cab0fb9dd4dc351b8e6bc7e/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=e633f2b3f530404a6cab0fb9dd4dc351b8e6bc7e", "patch": "@@ -801,6 +801,20 @@ impl<'a> ControlFlow<'a> {\n     }\n }\n \n+/// Returns true if the last line of pat_str has leading whitespace and it is wider than the\n+/// shape's indent.\n+fn last_line_offsetted(start_column: usize, pat_str: &str) -> bool {\n+    let mut leading_whitespaces = 0;\n+    for c in pat_str.chars().rev() {\n+        match c {\n+            '\\n' => break,\n+            _ if c.is_whitespace() => leading_whitespaces += 1,\n+            _ => leading_whitespaces = 0,\n+        }\n+    }\n+    leading_whitespaces > start_column\n+}\n+\n impl<'a> ControlFlow<'a> {\n     fn rewrite_pat_expr(\n         &self,\n@@ -885,7 +899,8 @@ impl<'a> ControlFlow<'a> {\n             .saturating_sub(constr_shape.used_width() + offset + brace_overhead);\n         let force_newline_brace = (pat_expr_string.contains('\\n')\n             || pat_expr_string.len() > one_line_budget)\n-            && !last_line_extendable(&pat_expr_string);\n+            && (!last_line_extendable(&pat_expr_string)\n+                || last_line_offsetted(shape.used_width(), &pat_expr_string));\n \n         // Try to format if-else on single line.\n         if self.allow_single_line\n@@ -1977,3 +1992,29 @@ pub fn is_method_call(expr: &ast::Expr) -> bool {\n         _ => false,\n     }\n }\n+\n+#[cfg(test)]\n+mod test {\n+    use super::last_line_offsetted;\n+\n+    #[test]\n+    fn test_last_line_offsetted() {\n+        let lines = \"one\\n    two\";\n+        assert_eq!(last_line_offsetted(2, lines), true);\n+        assert_eq!(last_line_offsetted(4, lines), false);\n+        assert_eq!(last_line_offsetted(6, lines), false);\n+\n+        let lines = \"one    two\";\n+        assert_eq!(last_line_offsetted(2, lines), false);\n+        assert_eq!(last_line_offsetted(0, lines), false);\n+\n+        let lines = \"\\ntwo\";\n+        assert_eq!(last_line_offsetted(2, lines), false);\n+        assert_eq!(last_line_offsetted(0, lines), false);\n+\n+        let lines = \"one\\n    two      three\";\n+        assert_eq!(last_line_offsetted(2, lines), true);\n+        let lines = \"one\\n two      three\";\n+        assert_eq!(last_line_offsetted(2, lines), false);\n+    }\n+}"}, {"sha": "0fbb05ddc0e62749704c51e1988590227260e07c", "filename": "tests/source/issue-3038.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e633f2b3f530404a6cab0fb9dd4dc351b8e6bc7e/tests%2Fsource%2Fissue-3038.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e633f2b3f530404a6cab0fb9dd4dc351b8e6bc7e/tests%2Fsource%2Fissue-3038.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-3038.rs?ref=e633f2b3f530404a6cab0fb9dd4dc351b8e6bc7e", "patch": "@@ -0,0 +1,20 @@\n+impl HTMLTableElement {\n+    fn func() {\n+        if number_of_row_elements == 0 {\n+            if let Some(last_tbody) = node.rev_children()\n+                    .filter_map(DomRoot::downcast::<Element>)\n+                    .find(|n| n.is::<HTMLTableSectionElement>() && n.local_name() == &local_name!(\"tbody\")) {\n+                        last_tbody.upcast::<Node>().AppendChild(new_row.upcast::<Node>())\n+                                                   .expect(\"InsertRow failed to append first row.\");\n+                    }\n+        }\n+\n+        if number_of_row_elements == 0 {\n+            if let Some(last_tbody) = node\n+                    .find(|n| n.is::<HTMLTableSectionElement>() && n.local_name() == &local_name!(\"tbody\")) {\n+                        last_tbody.upcast::<Node>().AppendChild(new_row.upcast::<Node>())\n+                                                   .expect(\"InsertRow failed to append first row.\");\n+                    }\n+        }\n+    }\n+}"}, {"sha": "faad859236dc911e9725465ad58b09be5ae1bfe5", "filename": "tests/target/issue-2985.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e633f2b3f530404a6cab0fb9dd4dc351b8e6bc7e/tests%2Ftarget%2Fissue-2985.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e633f2b3f530404a6cab0fb9dd4dc351b8e6bc7e/tests%2Ftarget%2Fissue-2985.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-2985.rs?ref=e633f2b3f530404a6cab0fb9dd4dc351b8e6bc7e", "patch": "@@ -27,7 +27,8 @@ fn foo() {\n                                                           .map(String::as_ref)\n                                                           .unwrap_or(\"\")\n                                                           .is_empty()\n-                                                    }) {\n+                                                    })\n+            {\n                 do_something();\n             }\n         }"}, {"sha": "3c398b825d7e70fffc589243d8a950e708b387fa", "filename": "tests/target/issue-3038.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e633f2b3f530404a6cab0fb9dd4dc351b8e6bc7e/tests%2Ftarget%2Fissue-3038.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e633f2b3f530404a6cab0fb9dd4dc351b8e6bc7e/tests%2Ftarget%2Fissue-3038.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-3038.rs?ref=e633f2b3f530404a6cab0fb9dd4dc351b8e6bc7e", "patch": "@@ -0,0 +1,29 @@\n+impl HTMLTableElement {\n+    fn func() {\n+        if number_of_row_elements == 0 {\n+            if let Some(last_tbody) = node\n+                .rev_children()\n+                .filter_map(DomRoot::downcast::<Element>)\n+                .find(|n| {\n+                    n.is::<HTMLTableSectionElement>() && n.local_name() == &local_name!(\"tbody\")\n+                })\n+            {\n+                last_tbody\n+                    .upcast::<Node>()\n+                    .AppendChild(new_row.upcast::<Node>())\n+                    .expect(\"InsertRow failed to append first row.\");\n+            }\n+        }\n+\n+        if number_of_row_elements == 0 {\n+            if let Some(last_tbody) = node.find(|n| {\n+                n.is::<HTMLTableSectionElement>() && n.local_name() == &local_name!(\"tbody\")\n+            }) {\n+                last_tbody\n+                    .upcast::<Node>()\n+                    .AppendChild(new_row.upcast::<Node>())\n+                    .expect(\"InsertRow failed to append first row.\");\n+            }\n+        }\n+    }\n+}"}]}