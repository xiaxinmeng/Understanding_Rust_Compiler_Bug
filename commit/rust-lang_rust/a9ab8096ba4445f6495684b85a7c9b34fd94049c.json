{"sha": "a9ab8096ba4445f6495684b85a7c9b34fd94049c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5YWI4MDk2YmE0NDQ1ZjY0OTU2ODRiODVhN2M5YjM0ZmQ5NDA0OWM=", "commit": {"author": {"name": "Piotr Czarnecki", "email": "pioczarn@gmail.com", "date": "2016-02-08T10:53:06Z"}, "committer": {"name": "Piotr Czarnecki", "email": "pioczarn@gmail.com", "date": "2016-02-08T10:53:06Z"}, "message": "Refactor storage of `LandingPad`s", "tree": {"sha": "9f07f0e6104017dc9b519d233277c123fc3ea649", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f07f0e6104017dc9b519d233277c123fc3ea649"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9ab8096ba4445f6495684b85a7c9b34fd94049c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9ab8096ba4445f6495684b85a7c9b34fd94049c", "html_url": "https://github.com/rust-lang/rust/commit/a9ab8096ba4445f6495684b85a7c9b34fd94049c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9ab8096ba4445f6495684b85a7c9b34fd94049c/comments", "author": {"login": "pczarn", "id": 3356767, "node_id": "MDQ6VXNlcjMzNTY3Njc=", "avatar_url": "https://avatars.githubusercontent.com/u/3356767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pczarn", "html_url": "https://github.com/pczarn", "followers_url": "https://api.github.com/users/pczarn/followers", "following_url": "https://api.github.com/users/pczarn/following{/other_user}", "gists_url": "https://api.github.com/users/pczarn/gists{/gist_id}", "starred_url": "https://api.github.com/users/pczarn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pczarn/subscriptions", "organizations_url": "https://api.github.com/users/pczarn/orgs", "repos_url": "https://api.github.com/users/pczarn/repos", "events_url": "https://api.github.com/users/pczarn/events{/privacy}", "received_events_url": "https://api.github.com/users/pczarn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pczarn", "id": 3356767, "node_id": "MDQ6VXNlcjMzNTY3Njc=", "avatar_url": "https://avatars.githubusercontent.com/u/3356767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pczarn", "html_url": "https://github.com/pczarn", "followers_url": "https://api.github.com/users/pczarn/followers", "following_url": "https://api.github.com/users/pczarn/following{/other_user}", "gists_url": "https://api.github.com/users/pczarn/gists{/gist_id}", "starred_url": "https://api.github.com/users/pczarn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pczarn/subscriptions", "organizations_url": "https://api.github.com/users/pczarn/orgs", "repos_url": "https://api.github.com/users/pczarn/repos", "events_url": "https://api.github.com/users/pczarn/events{/privacy}", "received_events_url": "https://api.github.com/users/pczarn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06266eb3bdd22e590e3a778d019d8b71b61567a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/06266eb3bdd22e590e3a778d019d8b71b61567a6", "html_url": "https://github.com/rust-lang/rust/commit/06266eb3bdd22e590e3a778d019d8b71b61567a6"}], "stats": {"total": 92, "additions": 58, "deletions": 34}, "files": [{"sha": "57e69a0efa95e6b1587ff8c8bd1947f49c3a20d2", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a9ab8096ba4445f6495684b85a7c9b34fd94049c/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ab8096ba4445f6495684b85a7c9b34fd94049c/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=a9ab8096ba4445f6495684b85a7c9b34fd94049c", "patch": "@@ -988,7 +988,7 @@ pub fn wants_msvc_seh(sess: &Session) -> bool {\n }\n \n pub fn avoid_invoke(bcx: Block) -> bool {\n-    bcx.sess().no_landing_pads() || bcx.lpad.borrow().is_some()\n+    bcx.sess().no_landing_pads() || bcx.lpad().is_some()\n }\n \n pub fn need_invoke(bcx: Block) -> bool {\n@@ -1616,6 +1616,7 @@ pub fn new_fn_ctxt<'a, 'tcx>(ccx: &'a CrateContext<'a, 'tcx>,\n         param_substs: param_substs,\n         span: sp,\n         block_arena: block_arena,\n+        lpad_arena: TypedArena::new(),\n         ccx: ccx,\n         debug_context: debug_context,\n         scopes: RefCell::new(Vec::new()),"}, {"sha": "ce541c8d411bb94bf3872f893bbf6c497d26b5b6", "filename": "src/librustc_trans/trans/build.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a9ab8096ba4445f6495684b85a7c9b34fd94049c/src%2Flibrustc_trans%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ab8096ba4445f6495684b85a7c9b34fd94049c/src%2Flibrustc_trans%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbuild.rs?ref=a9ab8096ba4445f6495684b85a7c9b34fd94049c", "patch": "@@ -150,8 +150,7 @@ pub fn Invoke(cx: Block,\n            cx.val_to_string(fn_),\n            args.iter().map(|a| cx.val_to_string(*a)).collect::<Vec<String>>().join(\", \"));\n     debug_loc.apply(cx.fcx);\n-    let lpad = cx.lpad.borrow();\n-    let bundle = lpad.as_ref().and_then(|b| b.bundle());\n+    let bundle = cx.lpad().and_then(|b| b.bundle());\n     B(cx).invoke(fn_, args, then, catch, bundle, attributes)\n }\n \n@@ -916,8 +915,7 @@ pub fn Call(cx: Block,\n         return _UndefReturn(cx, fn_);\n     }\n     debug_loc.apply(cx.fcx);\n-    let lpad = cx.lpad.borrow();\n-    let bundle = lpad.as_ref().and_then(|b| b.bundle());\n+    let bundle = cx.lpad.get().and_then(|b| b.bundle());\n     B(cx).call(fn_, args, bundle, attributes)\n }\n \n@@ -932,8 +930,7 @@ pub fn CallWithConv(cx: Block,\n         return _UndefReturn(cx, fn_);\n     }\n     debug_loc.apply(cx.fcx);\n-    let lpad = cx.lpad.borrow();\n-    let bundle = lpad.as_ref().and_then(|b| b.bundle());\n+    let bundle = cx.lpad.get().and_then(|b| b.bundle());\n     B(cx).call_with_conv(fn_, args, conv, bundle, attributes)\n }\n "}, {"sha": "1b69784c0966a0603cfddd4601100e5495549231", "filename": "src/librustc_trans/trans/cleanup.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a9ab8096ba4445f6495684b85a7c9b34fd94049c/src%2Flibrustc_trans%2Ftrans%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ab8096ba4445f6495684b85a7c9b34fd94049c/src%2Flibrustc_trans%2Ftrans%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcleanup.rs?ref=a9ab8096ba4445f6495684b85a7c9b34fd94049c", "patch": "@@ -740,7 +740,7 @@ impl<'blk, 'tcx> CleanupHelperMethods<'blk, 'tcx> for FunctionContext<'blk, 'tcx\n                     UnwindExit(val) => {\n                         // Generate a block that will resume unwinding to the\n                         // calling function\n-                        let bcx = self.new_block(\"resume\", None);\n+                        let bcx = self.new_block(\"resume\", None, None);\n                         match val {\n                             UnwindKind::LandingPad => {\n                                 let addr = self.landingpad_alloca.get()\n@@ -830,7 +830,7 @@ impl<'blk, 'tcx> CleanupHelperMethods<'blk, 'tcx> for FunctionContext<'blk, 'tcx\n                 let name = scope.block_name(\"clean\");\n                 debug!(\"generating cleanups for {}\", name);\n \n-                let bcx_in = self.new_block(&name[..], None);\n+                let bcx_in = self.new_block(&name[..], None, None);\n                 let exit_label = label.start(bcx_in);\n                 let mut bcx_out = bcx_in;\n                 let len = scope.cleanups.len();\n@@ -873,7 +873,7 @@ impl<'blk, 'tcx> CleanupHelperMethods<'blk, 'tcx> for FunctionContext<'blk, 'tcx\n                 Some(llbb) => return llbb,\n                 None => {\n                     let name = last_scope.block_name(\"unwind\");\n-                    pad_bcx = self.new_block(&name[..], None);\n+                    pad_bcx = self.new_block(&name[..], None, None);\n                     last_scope.cached_landing_pad = Some(pad_bcx.llbb);\n                 }\n             }\n@@ -1054,11 +1054,11 @@ impl EarlyExitLabel {\n         match *self {\n             UnwindExit(UnwindKind::CleanupPad(..)) => {\n                 let pad = build::CleanupPad(bcx, None, &[]);\n-                *bcx.lpad.borrow_mut() = Some(LandingPad::msvc(pad));\n+                bcx.lpad.set(Some(bcx.fcx.lpad_arena.alloc(LandingPad::msvc(pad))));\n                 UnwindExit(UnwindKind::CleanupPad(pad))\n             }\n             UnwindExit(UnwindKind::LandingPad) => {\n-                *bcx.lpad.borrow_mut() = Some(LandingPad::gnu());\n+                bcx.lpad.set(Some(bcx.fcx.lpad_arena.alloc(LandingPad::gnu())));\n                 *self\n             }\n             label => label,"}, {"sha": "20c48357719dbe067e2489eb7f5e2c86eac16d93", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a9ab8096ba4445f6495684b85a7c9b34fd94049c/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ab8096ba4445f6495684b85a7c9b34fd94049c/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=a9ab8096ba4445f6495684b85a7c9b34fd94049c", "patch": "@@ -367,6 +367,9 @@ pub struct FunctionContext<'a, 'tcx: 'a> {\n     // The arena that blocks are allocated from.\n     pub block_arena: &'a TypedArena<BlockS<'a, 'tcx>>,\n \n+    // The arena that landing pads are allocated from.\n+    pub lpad_arena: TypedArena<LandingPad>,\n+\n     // This function's enclosing crate context.\n     pub ccx: &'a CrateContext<'a, 'tcx>,\n \n@@ -431,28 +434,33 @@ impl<'a, 'tcx> FunctionContext<'a, 'tcx> {\n \n     pub fn new_block(&'a self,\n                      name: &str,\n-                     opt_node_id: Option<ast::NodeId>)\n+                     opt_node_id: Option<ast::NodeId>,\n+                     landing_pad: Option<LandingPad>)\n                      -> Block<'a, 'tcx> {\n         unsafe {\n             let name = CString::new(name).unwrap();\n             let llbb = llvm::LLVMAppendBasicBlockInContext(self.ccx.llcx(),\n                                                            self.llfn,\n                                                            name.as_ptr());\n-            BlockS::new(llbb, opt_node_id, self)\n+            let block = BlockS::new(llbb, opt_node_id, self);\n+            if let Some(landing_pad) = landing_pad {\n+                block.lpad.set(Some(self.lpad_arena.alloc(landing_pad)));\n+            }\n+            block\n         }\n     }\n \n     pub fn new_id_block(&'a self,\n                         name: &str,\n                         node_id: ast::NodeId)\n                         -> Block<'a, 'tcx> {\n-        self.new_block(name, Some(node_id))\n+        self.new_block(name, Some(node_id), None)\n     }\n \n     pub fn new_temp_block(&'a self,\n                           name: &str)\n                           -> Block<'a, 'tcx> {\n-        self.new_block(name, None)\n+        self.new_block(name, None, None)\n     }\n \n     pub fn join_blocks(&'a self,\n@@ -584,7 +592,7 @@ pub struct BlockS<'blk, 'tcx: 'blk> {\n \n     // If this block part of a landing pad, then this is `Some` indicating what\n     // kind of landing pad its in, otherwise this is none.\n-    pub lpad: RefCell<Option<LandingPad>>,\n+    pub lpad: Cell<Option<&'blk LandingPad>>,\n \n     // AST node-id associated with this block, if any. Used for\n     // debugging purposes only.\n@@ -606,7 +614,7 @@ impl<'blk, 'tcx> BlockS<'blk, 'tcx> {\n             llbb: llbb,\n             terminated: Cell::new(false),\n             unreachable: Cell::new(false),\n-            lpad: RefCell::new(None),\n+            lpad: Cell::new(None),\n             opt_node_id: opt_node_id,\n             fcx: fcx\n         })\n@@ -623,6 +631,10 @@ impl<'blk, 'tcx> BlockS<'blk, 'tcx> {\n     }\n     pub fn sess(&self) -> &'blk Session { self.fcx.ccx.sess() }\n \n+    pub fn lpad(&self) -> Option<&'blk LandingPad> {\n+        self.lpad.get()\n+    }\n+\n     pub fn mir(&self) -> &'blk Mir<'tcx> {\n         self.fcx.mir()\n     }\n@@ -747,6 +759,10 @@ impl<'blk, 'tcx> BlockAndBuilder<'blk, 'tcx> {\n         self.bcx.llbb\n     }\n \n+    pub fn lpad(&self) -> Option<&'blk LandingPad> {\n+        self.bcx.lpad()\n+    }\n+\n     pub fn mir(&self) -> &'blk Mir<'tcx> {\n         self.bcx.mir()\n     }"}, {"sha": "6c1a5ac74d013dbc788325ed8a52bd26c62a1433", "filename": "src/librustc_trans/trans/mir/block.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a9ab8096ba4445f6495684b85a7c9b34fd94049c/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ab8096ba4445f6495684b85a7c9b34fd94049c/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fblock.rs?ref=a9ab8096ba4445f6495684b85a7c9b34fd94049c", "patch": "@@ -119,13 +119,16 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                 if let Some(unwind) = unwind {\n                     let uwbcx = self.bcx(unwind);\n                     let unwind = self.make_landing_pad(uwbcx);\n+                    let bundle = bcx.lpad().and_then(|b| b.bundle());\n                     bcx.invoke(drop_fn,\n                                &[llvalue],\n                                self.llblock(target),\n                                unwind.llbb(),\n+                               bundle,\n                                None);\n                 } else {\n-                    bcx.call(drop_fn, &[llvalue], None);\n+                    let bundle = bcx.lpad().and_then(|b| b.bundle());\n+                    bcx.call(drop_fn, &[llvalue], bundle, None);\n                     bcx.br(self.llblock(target));\n                 }\n             }\n@@ -187,24 +190,28 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                         let cleanup = self.bcx(cleanup);\n                         let landingpad = self.make_landing_pad(cleanup);\n                         let unreachable_blk = self.unreachable_block();\n+                        let bundle = bcx.lpad().and_then(|b| b.bundle());\n                         bcx.invoke(callee.immediate(),\n                                    &llargs[..],\n                                    unreachable_blk.llbb,\n                                    landingpad.llbb(),\n+                                   bundle,\n                                    Some(attrs));\n                     },\n                     (false, false, &Some(cleanup), &Some((_, success))) => {\n                         let cleanup = self.bcx(cleanup);\n                         let landingpad = self.make_landing_pad(cleanup);\n                         let (target, postinvoke) = if must_copy_dest {\n-                            (bcx.fcx().new_block(\"\", None), Some(self.bcx(success)))\n+                            (bcx.fcx().new_block(\"\", None, None).build(), Some(self.bcx(success)))\n                         } else {\n                             (self.bcx(success), None)\n                         };\n+                        let bundle = bcx.lpad().and_then(|b| b.bundle());\n                         let invokeret = bcx.invoke(callee.immediate(),\n                                                    &llargs[..],\n                                                    target.llbb(),\n                                                    landingpad.llbb(),\n+                                                   bundle,\n                                                    Some(attrs));\n                         if let Some(postinvoketarget) = postinvoke {\n                             // We translate the copy into a temporary block. The temporary block is\n@@ -240,7 +247,8 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                         }\n                     },\n                     (false, _, _, &None) => {\n-                        bcx.call(callee.immediate(), &llargs[..], Some(attrs));\n+                        let bundle = bcx.lpad().and_then(|b| b.bundle());\n+                        bcx.call(callee.immediate(), &llargs[..], bundle, Some(attrs));\n                         bcx.unreachable();\n                     }\n                     (false, _, _, &Some((_, target))) => {\n@@ -301,26 +309,25 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                         cleanup: BlockAndBuilder<'bcx, 'tcx>)\n                         -> BlockAndBuilder<'bcx, 'tcx>\n     {\n+        let cleanup_llbb = cleanup.llbb();\n         let bcx = cleanup.map_block(|cleanup| {\n-            cleanup.fcx.new_block(\"cleanup\", None)\n+            // FIXME(#30941) this doesn't handle msvc-style exceptions\n+            cleanup.fcx.new_block(\"cleanup\", None, Some(LandingPad::gnu()))\n         });\n-        // FIXME(#30941) this doesn't handle msvc-style exceptions\n-        *bcx.lpad.borrow_mut() = Some(LandingPad::gnu());\n-        let bcx = bcx.build();\n         let ccx = bcx.ccx();\n         let llpersonality = bcx.fcx().eh_personality();\n         let llretty = Type::struct_(ccx, &[Type::i8p(ccx), Type::i32(ccx)], false);\n         let llretval = bcx.landing_pad(llretty, llpersonality, 1, bcx.fcx().llfn);\n         bcx.set_cleanup(llretval);\n         let slot = self.get_personality_slot(&bcx);\n         bcx.store(llretval, slot);\n-        bcx.br(cleanup.llbb());\n+        bcx.br(cleanup_llbb);\n         bcx\n     }\n \n     fn unreachable_block(&mut self) -> Block<'bcx, 'tcx> {\n         self.unreachable_block.unwrap_or_else(|| {\n-            let bl = self.fcx.new_block(\"unreachable\", None);\n+            let bl = self.fcx.new_block(\"unreachable\", None, None);\n             bl.build().unreachable();\n             self.unreachable_block = Some(bl);\n             bl"}, {"sha": "e93c920d9a3b9998312290bc211f9fe07d236c16", "filename": "src/librustc_trans/trans/mir/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a9ab8096ba4445f6495684b85a7c9b34fd94049c/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ab8096ba4445f6495684b85a7c9b34fd94049c/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fmod.rs?ref=a9ab8096ba4445f6495684b85a7c9b34fd94049c", "patch": "@@ -114,12 +114,13 @@ pub fn trans_mir<'bcx, 'tcx>(bcx: BlockAndBuilder<'bcx, 'tcx>) {\n     let block_bcxs: Vec<Block<'bcx,'tcx>> =\n         mir_blocks.iter()\n                   .map(|&bb|{\n-                      let bcx = fcx.new_block(&format!(\"{:?}\", bb), None);\n                       // FIXME(#30941) this doesn't handle msvc-style exceptions\n-                      if mir.basic_block_data(bb).is_cleanup {\n-                          *bcx.lpad.borrow_mut() = Some(LandingPad::gnu())\n-                      }\n-                      bcx\n+                      let lpad = if mir.basic_block_data(bb).is_cleanup {\n+                          Some(LandingPad::gnu())\n+                      } else {\n+                          None\n+                      };\n+                      fcx.new_block(&format!(\"{:?}\", bb), None, lpad)\n                   })\n                   .collect();\n "}, {"sha": "5debb76aa6c0d720b4ea48373252735786a6690c", "filename": "src/librustc_trans/trans/mir/rvalue.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a9ab8096ba4445f6495684b85a7c9b34fd94049c/src%2Flibrustc_trans%2Ftrans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ab8096ba4445f6495684b85a7c9b34fd94049c/src%2Flibrustc_trans%2Ftrans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmir%2Frvalue.rs?ref=a9ab8096ba4445f6495684b85a7c9b34fd94049c", "patch": "@@ -497,10 +497,12 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                     if input_ty == tcx.types.f32 {\n                         let lllhs = bcx.fpext(lhs, f64t);\n                         let llrhs = bcx.fpext(rhs, f64t);\n-                        let llres = bcx.call(llfn, &[lllhs, llrhs], None);\n+                        let bundle = bcx.lpad().and_then(|b| b.bundle());\n+                        let llres = bcx.call(llfn, &[lllhs, llrhs], bundle, None);\n                         bcx.fptrunc(llres, Type::f32(bcx.ccx()))\n                     } else {\n-                        bcx.call(llfn, &[lhs, rhs], None)\n+                        let bundle = bcx.lpad().and_then(|b| b.bundle());\n+                        bcx.call(llfn, &[lhs, rhs], bundle, None)\n                     }\n                 } else {\n                     bcx.frem(lhs, rhs)"}]}