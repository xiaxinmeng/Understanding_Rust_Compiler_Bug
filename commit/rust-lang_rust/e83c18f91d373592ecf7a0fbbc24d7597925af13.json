{"sha": "e83c18f91d373592ecf7a0fbbc24d7597925af13", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4M2MxOGY5MWQzNzM1OTJlY2Y3YTBmYmJjMjRkNzU5NzkyNWFmMTM=", "commit": {"author": {"name": "C Jones", "email": "code@calebjones.net", "date": "2018-05-08T17:28:49Z"}, "committer": {"name": "C Jones", "email": "code@calebjones.net", "date": "2018-05-08T17:28:49Z"}, "message": "Make an ensure_root_is_owned method to reduce duplication\n\nAlso remove some unnecessary debug_assert! when creating the shared\nroot, since the root should be stored in the rodata and thus be\nimpossible to accidentally modify.", "tree": {"sha": "d4a94d73d368dd7baadcc05b43fe9313cb92d43d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4a94d73d368dd7baadcc05b43fe9313cb92d43d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e83c18f91d373592ecf7a0fbbc24d7597925af13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e83c18f91d373592ecf7a0fbbc24d7597925af13", "html_url": "https://github.com/rust-lang/rust/commit/e83c18f91d373592ecf7a0fbbc24d7597925af13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e83c18f91d373592ecf7a0fbbc24d7597925af13/comments", "author": {"login": "porglezomp", "id": 1690225, "node_id": "MDQ6VXNlcjE2OTAyMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1690225?v=4", "gravatar_id": "", "url": "https://api.github.com/users/porglezomp", "html_url": "https://github.com/porglezomp", "followers_url": "https://api.github.com/users/porglezomp/followers", "following_url": "https://api.github.com/users/porglezomp/following{/other_user}", "gists_url": "https://api.github.com/users/porglezomp/gists{/gist_id}", "starred_url": "https://api.github.com/users/porglezomp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/porglezomp/subscriptions", "organizations_url": "https://api.github.com/users/porglezomp/orgs", "repos_url": "https://api.github.com/users/porglezomp/repos", "events_url": "https://api.github.com/users/porglezomp/events{/privacy}", "received_events_url": "https://api.github.com/users/porglezomp/received_events", "type": "User", "site_admin": false}, "committer": {"login": "porglezomp", "id": 1690225, "node_id": "MDQ6VXNlcjE2OTAyMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1690225?v=4", "gravatar_id": "", "url": "https://api.github.com/users/porglezomp", "html_url": "https://github.com/porglezomp", "followers_url": "https://api.github.com/users/porglezomp/followers", "following_url": "https://api.github.com/users/porglezomp/following{/other_user}", "gists_url": "https://api.github.com/users/porglezomp/gists{/gist_id}", "starred_url": "https://api.github.com/users/porglezomp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/porglezomp/subscriptions", "organizations_url": "https://api.github.com/users/porglezomp/orgs", "repos_url": "https://api.github.com/users/porglezomp/repos", "events_url": "https://api.github.com/users/porglezomp/events{/privacy}", "received_events_url": "https://api.github.com/users/porglezomp/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3a3599e090cb6aa63a327351738d7633c934728", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3a3599e090cb6aa63a327351738d7633c934728", "html_url": "https://github.com/rust-lang/rust/commit/f3a3599e090cb6aa63a327351738d7633c934728"}], "stats": {"total": 25, "additions": 10, "deletions": 15}, "files": [{"sha": "bb2c68a27ba308f3ba1e825d57bbabd678e20cc4", "filename": "src/liballoc/btree/map.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e83c18f91d373592ecf7a0fbbc24d7597925af13/src%2Fliballoc%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e83c18f91d373592ecf7a0fbbc24d7597925af13/src%2Fliballoc%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbtree%2Fmap.rs?ref=e83c18f91d373592ecf7a0fbbc24d7597925af13", "patch": "@@ -246,9 +246,7 @@ impl<K, Q: ?Sized> super::Recover<Q> for BTreeMap<K, ()>\n     }\n \n     fn replace(&mut self, key: K) -> Option<K> {\n-        if self.root.is_shared_root() {\n-            self.root = node::Root::new_leaf();\n-        }\n+        self.ensure_root_is_owned();\n         match search::search_tree::<marker::Mut, K, (), K>(self.root.as_mut(), &key) {\n             Found(handle) => Some(mem::replace(handle.into_kv_mut().0, key)),\n             GoDown(handle) => {\n@@ -893,10 +891,7 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn entry(&mut self, key: K) -> Entry<K, V> {\n         // FIXME(@porglezomp) Avoid allocating if we don't insert\n-        if self.root.is_shared_root() {\n-            self.root = node::Root::new_leaf();\n-        }\n-\n+        self.ensure_root_is_owned();\n         match search::search_tree(self.root.as_mut(), &key) {\n             Found(handle) => {\n                 Occupied(OccupiedEntry {\n@@ -917,10 +912,7 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     }\n \n     fn from_sorted_iter<I: Iterator<Item = (K, V)>>(&mut self, iter: I) {\n-        if self.root.is_shared_root() {\n-            self.root = node::Root::new_leaf();\n-        }\n-\n+        self.ensure_root_is_owned();\n         let mut cur_node = last_leaf_edge(self.root.as_mut()).into_node();\n         // Iterate through all key-value pairs, pushing them into nodes at the right level.\n         for (key, value) in iter {\n@@ -1165,6 +1157,13 @@ impl<K: Ord, V> BTreeMap<K, V> {\n \n         self.fix_top();\n     }\n+\n+    /// If the root node is the shared root node, allocate our own node.\n+    fn ensure_root_is_owned(&mut self) {\n+        if self.root.is_shared_root() {\n+            self.root = node::Root::new_leaf();\n+        }\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "431695c32ab68f8f9d35bef16a9442cb6a35d5cb", "filename": "src/liballoc/btree/node.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e83c18f91d373592ecf7a0fbbc24d7597925af13/src%2Fliballoc%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e83c18f91d373592ecf7a0fbbc24d7597925af13/src%2Fliballoc%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbtree%2Fnode.rs?ref=e83c18f91d373592ecf7a0fbbc24d7597925af13", "patch": "@@ -195,10 +195,6 @@ impl<K, V> Root<K, V> {\n     }\n \n     pub fn shared_empty_root() -> Self {\n-        // Ensuring that the shared node hasn't been corrupted by any mutations\n-        debug_assert!(EMPTY_ROOT_NODE.parent == ptr::null());\n-        debug_assert!(EMPTY_ROOT_NODE.parent_idx == 0);\n-        debug_assert!(EMPTY_ROOT_NODE.len == 0);\n         Root {\n             node: unsafe {\n                 BoxedNode::from_ptr(NonNull::new_unchecked("}]}