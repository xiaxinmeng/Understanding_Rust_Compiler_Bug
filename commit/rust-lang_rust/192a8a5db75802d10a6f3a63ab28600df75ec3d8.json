{"sha": "192a8a5db75802d10a6f3a63ab28600df75ec3d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5MmE4YTVkYjc1ODAyZDEwYTZmM2E2M2FiMjg2MDBkZjc1ZWMzZDg=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2014-07-03T00:06:03Z"}, "committer": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2014-08-01T08:20:20Z"}, "message": "Add is_unique(), try_unwrap(), get_mut() to alloc::rc\n\nAdd a few new free functions to alloc::rc for manipulating\nuniquely-owned Rc values. is_unique() can be used to test if the Rc is\nuniquely-owned, try_unwrap() can remove the value from a uniquely-owned\nRc, and get_mut() can return a &mut for a uniquely-owned Rc.\n\nThese are all free functions, because smart pointers should avoid having\nmethods when possible. They can't be static methods because UFCS will\nremove that distinction. I think we should probably change downgrade()\nand make_unique() into free functions as well, but that's out of scope.", "tree": {"sha": "59821304067831cb91fd559df22cdab620fc9daf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59821304067831cb91fd559df22cdab620fc9daf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/192a8a5db75802d10a6f3a63ab28600df75ec3d8", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/192a8a5db75802d10a6f3a63ab28600df75ec3d8", "html_url": "https://github.com/rust-lang/rust/commit/192a8a5db75802d10a6f3a63ab28600df75ec3d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/192a8a5db75802d10a6f3a63ab28600df75ec3d8/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f0b91985fb99730f145b62f2d3b4c10f54e27f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f0b91985fb99730f145b62f2d3b4c10f54e27f0", "html_url": "https://github.com/rust-lang/rust/commit/9f0b91985fb99730f145b62f2d3b4c10f54e27f0"}], "stats": {"total": 125, "additions": 116, "deletions": 9}, "files": [{"sha": "022928ce743314ce25f8b73775985844cf2cf13c", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 116, "deletions": 9, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/192a8a5db75802d10a6f3a63ab28600df75ec3d8/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/192a8a5db75802d10a6f3a63ab28600df75ec3d8/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=192a8a5db75802d10a6f3a63ab28600df75ec3d8", "patch": "@@ -150,18 +150,18 @@ fn main() {\n \n #![stable]\n \n-use core::mem::transmute;\n use core::cell::Cell;\n use core::clone::Clone;\n use core::cmp::{PartialEq, PartialOrd, Eq, Ord, Ordering};\n use core::default::Default;\n+use core::fmt;\n use core::kinds::marker;\n+use core::mem::{transmute, min_align_of, size_of, forget};\n use core::ops::{Deref, Drop};\n use core::option::{Option, Some, None};\n use core::ptr;\n use core::ptr::RawPtr;\n-use core::mem::{min_align_of, size_of};\n-use core::fmt;\n+use core::result::{Result, Ok, Err};\n \n use heap::deallocate;\n \n@@ -218,6 +218,76 @@ impl<T> Rc<T> {\n     }\n }\n \n+/// Returns true if the `Rc` currently has unique ownership.\n+///\n+/// Unique ownership means that there are no other `Rc` or `Weak` values\n+/// that share the same contents.\n+#[inline]\n+#[experimental]\n+pub fn is_unique<T>(rc: &Rc<T>) -> bool {\n+    // note that we hold both a strong and a weak reference\n+    rc.strong() == 1 && rc.weak() == 1\n+}\n+\n+/// Unwraps the contained value if the `Rc` has unique ownership.\n+///\n+/// If the `Rc` does not have unique ownership, `Err` is returned with the\n+/// same `Rc`.\n+///\n+/// # Example:\n+///\n+/// ```\n+/// use std::rc::{mod, Rc};\n+/// let x = Rc::new(3u);\n+/// assert_eq!(rc::try_unwrap(x), Ok(3u));\n+/// let x = Rc::new(4u);\n+/// let _y = x.clone();\n+/// assert_eq!(rc::try_unwrap(x), Err(Rc::new(4u)));\n+/// ```\n+#[inline]\n+#[experimental]\n+pub fn try_unwrap<T>(rc: Rc<T>) -> Result<T, Rc<T>> {\n+    if is_unique(&rc) {\n+        unsafe {\n+            let val = ptr::read(&*rc); // copy the contained object\n+            // destruct the box and skip our Drop\n+            // we can ignore the refcounts because we know we're unique\n+            deallocate(rc._ptr as *mut u8, size_of::<RcBox<T>>(),\n+                        min_align_of::<RcBox<T>>());\n+            forget(rc);\n+            Ok(val)\n+        }\n+    } else {\n+        Err(rc)\n+    }\n+}\n+\n+/// Returns a mutable reference to the contained value if the `Rc` has\n+/// unique ownership.\n+///\n+/// Returns `None` if the `Rc` does not have unique ownership.\n+///\n+/// # Example:\n+///\n+/// ```\n+/// use std::rc::{mod, Rc};\n+/// let mut x = Rc::new(3u);\n+/// *rc::get_mut(&mut x).unwrap() = 4u;\n+/// assert_eq!(*x, 4u);\n+/// let _y = x.clone();\n+/// assert!(rc::get_mut(&mut x).is_none());\n+/// ```\n+#[inline]\n+#[experimental]\n+pub fn get_mut<'a, T>(rc: &'a mut Rc<T>) -> Option<&'a mut T> {\n+    if is_unique(rc) {\n+        let inner = unsafe { &mut *rc._ptr };\n+        Some(&mut inner.value)\n+    } else {\n+        None\n+    }\n+}\n+\n impl<T: Clone> Rc<T> {\n     /// Acquires a mutable pointer to the inner contents by guaranteeing that\n     /// the reference count is one (no sharing is possible).\n@@ -227,11 +297,8 @@ impl<T: Clone> Rc<T> {\n     #[inline]\n     #[experimental]\n     pub fn make_unique(&mut self) -> &mut T {\n-        // Note that we hold a strong reference, which also counts as\n-        // a weak reference, so we only clone if there is an\n-        // additional reference of either kind.\n-        if self.strong() != 1 || self.weak() != 1 {\n-            *self = Rc::new(self.deref().clone())\n+        if !is_unique(self) {\n+            *self = Rc::new((**self).clone())\n         }\n         // This unsafety is ok because we're guaranteed that the pointer\n         // returned is the *only* pointer that will ever be returned to T. Our\n@@ -260,7 +327,7 @@ impl<T> Drop for Rc<T> {\n             if !self._ptr.is_null() {\n                 self.dec_strong();\n                 if self.strong() == 0 {\n-                    ptr::read(self.deref()); // destroy the contained object\n+                    ptr::read(&**self); // destroy the contained object\n \n                     // remove the implicit \"strong weak\" pointer now\n                     // that we've destroyed the contents.\n@@ -427,6 +494,7 @@ mod tests {\n     use super::{Rc, Weak};\n     use std::cell::RefCell;\n     use std::option::{Option, Some, None};\n+    use std::result::{Err, Ok};\n     use std::mem::drop;\n     use std::clone::Clone;\n \n@@ -494,6 +562,45 @@ mod tests {\n         // hopefully we don't double-free (or leak)...\n     }\n \n+    #[test]\n+    fn is_unique() {\n+        let x = Rc::new(3u);\n+        assert!(super::is_unique(&x));\n+        let y = x.clone();\n+        assert!(!super::is_unique(&x));\n+        drop(y);\n+        assert!(super::is_unique(&x));\n+        let w = x.downgrade();\n+        assert!(!super::is_unique(&x));\n+        drop(w);\n+        assert!(super::is_unique(&x));\n+    }\n+\n+    #[test]\n+    fn try_unwrap() {\n+        let x = Rc::new(3u);\n+        assert_eq!(super::try_unwrap(x), Ok(3u));\n+        let x = Rc::new(4u);\n+        let _y = x.clone();\n+        assert_eq!(super::try_unwrap(x), Err(Rc::new(4u)));\n+        let x = Rc::new(5u);\n+        let _w = x.downgrade();\n+        assert_eq!(super::try_unwrap(x), Err(Rc::new(5u)));\n+    }\n+\n+    #[test]\n+    fn get_mut() {\n+        let mut x = Rc::new(3u);\n+        *super::get_mut(&mut x).unwrap() = 4u;\n+        assert_eq!(*x, 4u);\n+        let y = x.clone();\n+        assert!(super::get_mut(&mut x).is_none());\n+        drop(y);\n+        assert!(super::get_mut(&mut x).is_some());\n+        let _w = x.downgrade();\n+        assert!(super::get_mut(&mut x).is_none());\n+    }\n+\n     #[test]\n     fn test_cowrc_clone_make_unique() {\n         let mut cow0 = Rc::new(75u);"}]}