{"sha": "d8ab47e7f9ed4c30c9ff3d4e2351b19992a380dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4YWI0N2U3ZjllZDRjMzBjOWZmM2Q0ZTIzNTFiMTk5OTJhMzgwZGQ=", "commit": {"author": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2013-03-13T07:32:23Z"}, "committer": {"name": "Luqman Aden", "email": "laden@mozilla.com", "date": "2013-03-16T01:55:43Z"}, "message": "Properly handle input operands for inline asm.", "tree": {"sha": "5160026796b9da6f67587a630249db9d18e0a80e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5160026796b9da6f67587a630249db9d18e0a80e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8ab47e7f9ed4c30c9ff3d4e2351b19992a380dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8ab47e7f9ed4c30c9ff3d4e2351b19992a380dd", "html_url": "https://github.com/rust-lang/rust/commit/d8ab47e7f9ed4c30c9ff3d4e2351b19992a380dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8ab47e7f9ed4c30c9ff3d4e2351b19992a380dd/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d078db952cf76b35bbd8577fe6a9f5d9e12c566", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d078db952cf76b35bbd8577fe6a9f5d9e12c566", "html_url": "https://github.com/rust-lang/rust/commit/6d078db952cf76b35bbd8577fe6a9f5d9e12c566"}], "stats": {"total": 58, "additions": 51, "deletions": 7}, "files": [{"sha": "9712bab2ceb3262679e7cb744aa67833eb1063f9", "filename": "src/librustc/middle/trans/build.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d8ab47e7f9ed4c30c9ff3d4e2351b19992a380dd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8ab47e7f9ed4c30c9ff3d4e2351b19992a380dd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs?ref=d8ab47e7f9ed4c30c9ff3d4e2351b19992a380dd", "patch": "@@ -873,6 +873,7 @@ pub fn add_comment(bcx: block, text: &str) {\n }\n \n pub fn InlineAsmCall(cx: block, asm: *c_char, cons: *c_char,\n+                     inputs: &[ValueRef],\n                      volatile: bool, alignstack: bool,\n                      dia: AsmDialect) -> ValueRef {\n     unsafe {\n@@ -883,11 +884,15 @@ pub fn InlineAsmCall(cx: block, asm: *c_char, cons: *c_char,\n         let alignstack = if alignstack { lib::llvm::True }\n                          else          { lib::llvm::False };\n \n-        let llfty = T_fn(~[], T_void());\n+        let argtys = do inputs.map |v| {\n+            io::println(fmt!(\"ARG TYPE: %?\", val_str(cx.ccx().tn, *v)));\n+            val_ty(*v)\n+        };\n+        let llfty = T_fn(argtys, T_void());\n         let v = llvm::LLVMInlineAsm(llfty, asm, cons, volatile,\n                                     alignstack, dia as c_uint);\n \n-        Call(cx, v, ~[])\n+        Call(cx, v, inputs)\n     }\n }\n "}, {"sha": "6c403e4f8bb48c3bf84be3961783835bc0e8f1ce", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 44, "deletions": 5, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/d8ab47e7f9ed4c30c9ff3d4e2351b19992a380dd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8ab47e7f9ed4c30c9ff3d4e2351b19992a380dd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=d8ab47e7f9ed4c30c9ff3d4e2351b19992a380dd", "patch": "@@ -558,12 +558,51 @@ fn trans_rvalue_stmt_unadjusted(bcx: block, expr: @ast::expr) -> block {\n             return trans_rvalue_stmt_unadjusted(bcx, a);\n         }\n         ast::expr_inline_asm(asm, ref ins, ref outs,\n-                             cons, volatile, alignstack) => {\n-            // XXX: cons doesn't actual contain ALL the stuff we should\n-            // be passing since the constraints for in/outputs aren't included\n+                             clobs, volatile, alignstack) => {\n+            let mut constraints = ~[];\n+            let mut cleanups = ~[];\n+\n+            // TODO: Handle outputs\n+\n+            let inputs = do ins.map |&(c, in)| {\n+\n+                constraints.push(copy *c);\n+\n+                let inty = ty::arg {\n+                    mode: ast::expl(ast::by_val),\n+                    ty: expr_ty(bcx, in)\n+                };\n+\n+                \n+                unpack_result!(bcx, {\n+                    callee::trans_arg_expr(bcx, inty, in, &mut cleanups,\n+                                           None, callee::DontAutorefArg)\n+                })\n+\n+            };\n+\n+            for cleanups.each |c| {\n+                revoke_clean(bcx, *c);\n+            }\n+\n+            let mut constraints = str::connect(constraints, \",\");\n+\n+            // Add the clobbers\n+            if *clobs != ~\"\" {\n+                if constraints == ~\"\" {\n+                    constraints += *clobs;\n+                } else {\n+                    constraints += ~\",\" + *clobs;\n+                }\n+            } else {\n+                constraints += *clobs;\n+            }\n+\n+            io::println(fmt!(\"Inputs: %?\\nConstraints: %?\\n\", ins, constraints));\n+\n             do str::as_c_str(*asm) |a| {\n-                do str::as_c_str(*cons) |c| {\n-                    InlineAsmCall(bcx, a, c, volatile, alignstack,\n+                do str::as_c_str(constraints) |c| {\n+                    InlineAsmCall(bcx, a, c, inputs, volatile, alignstack,\n                                   lib::llvm::AD_ATT);\n                 }\n             }"}]}