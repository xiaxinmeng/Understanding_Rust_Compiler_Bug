{"sha": "a3c0ef1a8bd3822a8008462a01056cc4090516af", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzYzBlZjFhOGJkMzgyMmE4MDA4NDYyYTAxMDU2Y2M0MDkwNTE2YWY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-03T13:21:03Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-20T21:41:29Z"}, "message": "refactor parse_incorrect_await_syntax", "tree": {"sha": "7539934c457058fc2da727a6caaf1ccecb785367", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7539934c457058fc2da727a6caaf1ccecb785367"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3c0ef1a8bd3822a8008462a01056cc4090516af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3c0ef1a8bd3822a8008462a01056cc4090516af", "html_url": "https://github.com/rust-lang/rust/commit/a3c0ef1a8bd3822a8008462a01056cc4090516af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3c0ef1a8bd3822a8008462a01056cc4090516af/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f9b191886457f16876fe9ef08369f8d0774e200", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f9b191886457f16876fe9ef08369f8d0774e200", "html_url": "https://github.com/rust-lang/rust/commit/2f9b191886457f16876fe9ef08369f8d0774e200"}], "stats": {"total": 38, "additions": 24, "deletions": 14}, "files": [{"sha": "cea17e4d0061dbe3b1363b1823594e8bcf971f98", "filename": "src/librustc_parse/parser/diagnostics.rs", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a3c0ef1a8bd3822a8008462a01056cc4090516af/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c0ef1a8bd3822a8008462a01056cc4090516af/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs?ref=a3c0ef1a8bd3822a8008462a01056cc4090516af", "patch": "@@ -4,7 +4,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{self, PResult, Applicability, DiagnosticBuilder, Handler, pluralize};\n use rustc_error_codes::*;\n use syntax::ast::{self, Param, BinOpKind, BindingMode, BlockCheckMode, Expr, ExprKind, Ident, Item};\n-use syntax::ast::{ItemKind, Mutability, Pat, PatKind, PathSegment, QSelf, Ty, TyKind};\n+use syntax::ast::{ItemKind, Mutability, Pat, PatKind, PathSegment, QSelf, Ty, TyKind, Attribute};\n use syntax::token::{self, TokenKind, token_can_begin_expr};\n use syntax::print::pprust;\n use syntax::ptr::P;\n@@ -970,21 +970,32 @@ impl<'a> Parser<'a> {\n \n     /// Consumes alternative await syntaxes like `await!(<expr>)`, `await <expr>`,\n     /// `await? <expr>`, `await(<expr>)`, and `await { <expr> }`.\n-    pub(super) fn parse_incorrect_await_syntax(\n+    pub(super) fn recover_incorrect_await_syntax(\n         &mut self,\n         lo: Span,\n         await_sp: Span,\n-    ) -> PResult<'a, (Span, ExprKind)> {\n-        if self.token == token::Not {\n+        attrs: ThinVec<Attribute>,\n+    ) -> PResult<'a, P<Expr>> {\n+        let (hi, expr, is_question) = if self.token == token::Not {\n             // Handle `await!(<expr>)`.\n-            self.expect(&token::Not)?;\n-            self.expect(&token::OpenDelim(token::Paren))?;\n-            let expr = self.parse_expr()?;\n-            self.expect(&token::CloseDelim(token::Paren))?;\n-            let sp = self.error_on_incorrect_await(lo, self.prev_span, &expr, false);\n-            return Ok((sp, ExprKind::Await(expr)))\n-        }\n+            self.recover_await_macro()?\n+        } else {\n+            self.recover_await_prefix(await_sp)?\n+        };\n+        let sp = self.error_on_incorrect_await(lo, hi, &expr, is_question);\n+        let expr = self.mk_expr(lo.to(sp), ExprKind::Await(expr), attrs);\n+        self.maybe_recover_from_bad_qpath(expr, true)\n+    }\n+\n+    fn recover_await_macro(&mut self) -> PResult<'a, (Span, P<Expr>, bool)> {\n+        self.expect(&token::Not)?;\n+        self.expect(&token::OpenDelim(token::Paren))?;\n+        let expr = self.parse_expr()?;\n+        self.expect(&token::CloseDelim(token::Paren))?;\n+        Ok((self.prev_span, expr, false))\n+    }\n \n+    fn recover_await_prefix(&mut self, await_sp: Span) -> PResult<'a, (Span, P<Expr>, bool)> {\n         let is_question = self.eat(&token::Question); // Handle `await? <expr>`.\n         let expr = if self.token == token::OpenDelim(token::Brace) {\n             // Handle `await { <expr> }`.\n@@ -1002,8 +1013,7 @@ impl<'a> Parser<'a> {\n             err.span_label(await_sp, \"while parsing this incorrect await expression\");\n             err\n         })?;\n-        let sp = self.error_on_incorrect_await(lo, expr.span, &expr, is_question);\n-        Ok((sp, ExprKind::Await(expr)))\n+        Ok((expr.span, expr, is_question))\n     }\n \n     fn error_on_incorrect_await(&self, lo: Span, hi: Span, expr: &Expr, is_question: bool) -> Span {"}, {"sha": "9bc89a6f240b8147cb4abfa9766c193b920312aa", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3c0ef1a8bd3822a8008462a01056cc4090516af/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c0ef1a8bd3822a8008462a01056cc4090516af/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=a3c0ef1a8bd3822a8008462a01056cc4090516af", "patch": "@@ -922,7 +922,7 @@ impl<'a> Parser<'a> {\n                 } else if self.eat_keyword(kw::Let) {\n                     return self.parse_let_expr(attrs);\n                 } else if is_span_rust_2018 && self.eat_keyword(kw::Await) {\n-                    self.parse_incorrect_await_syntax(lo, self.prev_span)?\n+                    return self.recover_incorrect_await_syntax(lo, self.prev_span, attrs);\n                 } else if !self.unclosed_delims.is_empty() && self.check(&token::Semi) {\n                     // Don't complain about bare semicolons after unclosed braces\n                     // recovery in order to keep the error count down. Fixing the"}]}