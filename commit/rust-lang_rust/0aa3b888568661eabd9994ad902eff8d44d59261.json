{"sha": "0aa3b888568661eabd9994ad902eff8d44d59261", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhYTNiODg4NTY4NjYxZWFiZDk5OTRhZDkwMmVmZjhkNDRkNTkyNjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-12T02:31:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-12T02:31:57Z"}, "message": "auto merge of #12650 : huonw/rust/librand, r=alexcrichton\n\nMove std::rand to a separate rand crate\r\n\r\nThis functionality is not super-core and so doesn't need to be included\r\nin std. It's possible that std may need rand (it does a little bit now,\r\nfor io::test) in which case the functionality required could be moved to\r\na secret hidden module and reexposed by librand.\r\n\r\nUnfortunately, using #[deprecated] here is hard: there's too much to\r\nmock to make it feasible, since we have to ensure that programs still\r\ntypecheck to reach the linting phase.\r\n\r\nAlso, deprecates/removes `rand::rng` (this time using `#[deprecated]`), since it's too easy to accidentally use inside a loop, making things very slow (have to read randomness from the OS and seed the RNG each time.)", "tree": {"sha": "f1b124415b95601fb001fe922b4e98b62f893c78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1b124415b95601fb001fe922b4e98b62f893c78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0aa3b888568661eabd9994ad902eff8d44d59261", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0aa3b888568661eabd9994ad902eff8d44d59261", "html_url": "https://github.com/rust-lang/rust/commit/0aa3b888568661eabd9994ad902eff8d44d59261", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0aa3b888568661eabd9994ad902eff8d44d59261/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74bfa7108a62c053fdeae2bb093f8035e19e2ef2", "url": "https://api.github.com/repos/rust-lang/rust/commits/74bfa7108a62c053fdeae2bb093f8035e19e2ef2", "html_url": "https://github.com/rust-lang/rust/commit/74bfa7108a62c053fdeae2bb093f8035e19e2ef2"}, {"sha": "689f19722fabd9aab61e826e00140a7fe7084afa", "url": "https://api.github.com/repos/rust-lang/rust/commits/689f19722fabd9aab61e826e00140a7fe7084afa", "html_url": "https://github.com/rust-lang/rust/commit/689f19722fabd9aab61e826e00140a7fe7084afa"}], "stats": {"total": 609, "additions": 329, "deletions": 280}, "files": [{"sha": "e4b56696b39e686514958d3e396265c68a1b7704", "filename": "mk/crates.mk", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/mk%2Fcrates.mk", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/mk%2Fcrates.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcrates.mk?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -50,14 +50,14 @@\n ################################################################################\n \n TARGET_CRATES := std extra green rustuv native flate arena glob term semver \\\n-                 uuid serialize sync getopts collections num test time\n+                 uuid serialize sync getopts collections num test time rand\n HOST_CRATES := syntax rustc rustdoc fourcc hexfloat\n CRATES := $(TARGET_CRATES) $(HOST_CRATES)\n TOOLS := compiletest rustdoc rustc\n \n DEPS_std := native:rustrt native:compiler-rt\n-DEPS_extra := std term sync serialize getopts collections time\n-DEPS_green := std native:context_switch\n+DEPS_extra := std term sync serialize getopts collections time rand\n+DEPS_green := std rand native:context_switch\n DEPS_rustuv := std native:uv native:uv_support\n DEPS_native := std\n DEPS_syntax := std term serialize collections\n@@ -71,15 +71,16 @@ DEPS_glob := std\n DEPS_serialize := std collections\n DEPS_term := std collections\n DEPS_semver := std\n-DEPS_uuid := std serialize\n+DEPS_uuid := std serialize rand\n DEPS_sync := std\n DEPS_getopts := std\n-DEPS_collections := std\n+DEPS_collections := std rand\n DEPS_fourcc := syntax std\n DEPS_hexfloat := syntax std\n-DEPS_num := std\n+DEPS_num := std rand\n DEPS_test := std extra collections getopts serialize term\n DEPS_time := std serialize\n+DEPS_rand := std\n \n TOOL_DEPS_compiletest := test green rustuv getopts\n TOOL_DEPS_rustdoc := rustdoc native"}, {"sha": "e20baa32c1a9a9ce21ebc3551abc6248ef489bf5", "filename": "src/doc/guide-tasks.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Fdoc%2Fguide-tasks.md", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Fdoc%2Fguide-tasks.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-tasks.md?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -50,13 +50,13 @@ concurrency at this writing:\n * [`sync::DuplexStream`] - An extension of `pipes::stream` that allows both sending and receiving,\n * [`sync::SyncChan`] - An extension of `pipes::stream` that provides synchronous message sending,\n * [`sync::SyncPort`] - An extension of `pipes::stream` that acknowledges each message received,\n-* [`sync::rendezvous`] - Creates a stream whose channel, upon sending a message, blocks until the \n+* [`sync::rendezvous`] - Creates a stream whose channel, upon sending a message, blocks until the\n     message is received.\n * [`sync::Arc`] - The Arc (atomically reference counted) type, for safely sharing immutable data,\n * [`sync::RWArc`] - A dual-mode Arc protected by a reader-writer lock,\n * [`sync::MutexArc`] - An Arc with mutable data protected by a blocking mutex,\n * [`sync::Semaphore`] - A counting, blocking, bounded-waiting semaphore,\n-* [`sync::Mutex`] - A blocking, bounded-waiting, mutual exclusion lock with an associated \n+* [`sync::Mutex`] - A blocking, bounded-waiting, mutual exclusion lock with an associated\n     FIFO condition variable,\n * [`sync::RWLock`] - A blocking, no-starvation, reader-writer lock with an associated condvar,\n * [`sync::Barrier`] - A barrier enables multiple tasks to synchronize the beginning\n@@ -343,8 +343,8 @@ a single large vector of floats. Each task needs the full vector to perform its\n \n ~~~\n # extern crate sync;\n+ extern crate rand;\n # use std::vec;\n-# use std::rand;\n use sync::Arc;\n \n fn pnorm(nums: &~[f64], p: uint) -> f64 {\n@@ -376,9 +376,9 @@ created by the line\n \n ~~~\n # extern crate sync;\n+# extern crate rand;\n # use sync::Arc;\n # use std::vec;\n-# use std::rand;\n # fn main() {\n # let numbers = vec::from_fn(1000000, |_| rand::random::<f64>());\n let numbers_arc=Arc::new(numbers);\n@@ -389,9 +389,9 @@ and a clone of it is sent to each task\n \n ~~~\n # extern crate sync;\n+# extern crate rand;\n # use sync::Arc;\n # use std::vec;\n-# use std::rand;\n # fn main() {\n # let numbers=vec::from_fn(1000000, |_| rand::random::<f64>());\n # let numbers_arc = Arc::new(numbers);\n@@ -406,9 +406,9 @@ Each task recovers the underlying data by\n \n ~~~\n # extern crate sync;\n+# extern crate rand;\n # use sync::Arc;\n # use std::vec;\n-# use std::rand;\n # fn main() {\n # let numbers=vec::from_fn(1000000, |_| rand::random::<f64>());\n # let numbers_arc=Arc::new(numbers);"}, {"sha": "8f37aecfc34c2edd8227e5d1a14dd86a4a267b7d", "filename": "src/doc/tutorial.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Fdoc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Fdoc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftutorial.md?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -2529,7 +2529,7 @@ of type `ABC` can be randomly generated and converted to a string:\n #[deriving(Eq)]\n struct Circle { radius: f64 }\n \n-#[deriving(Rand, Show)]\n+#[deriving(Clone, Show)]\n enum ABC { A, B, C }\n ~~~\n "}, {"sha": "260c1c8912475f7f7a850ae177c182100e5b73ea", "filename": "src/etc/generate-deriving-span-tests.py", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Fetc%2Fgenerate-deriving-span-tests.py", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Fetc%2Fgenerate-deriving-span-tests.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgenerate-deriving-span-tests.py?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -39,6 +39,7 @@\n \n #[feature(struct_variant)];\n extern crate extra;\n+extern crate rand;\n \n {error_deriving}\n struct Error;"}, {"sha": "762f9565b7802e41a93ca3e693d96ea825fb03c2", "filename": "src/etc/ziggurat_tables.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Fetc%2Fziggurat_tables.py", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Fetc%2Fziggurat_tables.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fziggurat_tables.py?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -11,7 +11,7 @@\n # except according to those terms.\n \n # This creates the tables used for distributions implemented using the\n-# ziggurat algorithm in `std::rand::distributions;`. They are\n+# ziggurat algorithm in `rand::distributions;`. They are\n # (basically) the tables as used in the ZIGNOR variant (Doornik 2005).\n # They are changed rarely, so the generated file should be checked in\n # to git."}, {"sha": "87e9c3f238ad50d4cf6452dd2abe265471a7e8e7", "filename": "src/libcollections/bitv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibcollections%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibcollections%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbitv.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -947,8 +947,8 @@ mod tests {\n \n     use std::uint;\n     use std::vec;\n-    use std::rand;\n-    use std::rand::Rng;\n+    use rand;\n+    use rand::Rng;\n \n     static BENCH_BITS : uint = 1 << 14;\n "}, {"sha": "f84354f9b009db98c058eff36b574919349f2291", "filename": "src/libcollections/deque.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibcollections%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibcollections%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdeque.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -44,8 +44,9 @@ pub mod bench {\n     extern crate test;\n     use self::test::BenchHarness;\n     use std::container::MutableMap;\n-    use std::{vec, rand};\n-    use std::rand::Rng;\n+    use std::vec;\n+    use rand;\n+    use rand::Rng;\n \n     pub fn insert_rand_n<M:MutableMap<uint,uint>>(n: uint,\n                                                   map: &mut M,"}, {"sha": "a3b65609b0a37a67e2337a6b05143101777ed9ba", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -633,7 +633,7 @@ mod tests {\n     extern crate test;\n     use self::test::BenchHarness;\n     use deque::Deque;\n-    use std::rand;\n+    use rand;\n     use super::{DList, Node, ListInsertion};\n \n     pub fn check_links<T>(list: &DList<T>) {"}, {"sha": "4a9f95dcb724de8c75d254742d1d494b288828f2", "filename": "src/libcollections/hashmap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibcollections%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibcollections%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fhashmap.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -61,8 +61,8 @@ use std::iter::{FilterMap, Chain, Repeat, Zip};\n use std::iter;\n use std::mem::replace;\n use std::num;\n-use std::rand::Rng;\n-use std::rand;\n+use rand::Rng;\n+use rand;\n use std::vec::{Items, MutItems};\n use std::vec_ng::Vec;\n use std::vec_ng;"}, {"sha": "a087180d9a50277f4729c550e34f83b220f6d1d5", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -23,6 +23,8 @@\n #[allow(unrecognized_lint)];\n #[allow(default_type_param_usage)];\n \n+extern crate rand;\n+\n #[cfg(test)] extern crate test;\n \n pub use bitv::Bitv;"}, {"sha": "5965417bac71b952f6d4481be4dbc2e53e5f7ddc", "filename": "src/libcollections/treemap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibcollections%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibcollections%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftreemap.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -1009,8 +1009,8 @@ mod test_treemap {\n \n     use super::{TreeMap, TreeNode};\n \n-    use std::rand::Rng;\n-    use std::rand;\n+    use rand::Rng;\n+    use rand;\n \n     #[test]\n     fn find_empty() {"}, {"sha": "2232af98eb311971d9ec4d3e26effd43a6745f2b", "filename": "src/libcollections/trie.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibcollections%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibcollections%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftrie.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -898,7 +898,7 @@ mod test_map {\n mod bench_map {\n     extern crate test;\n     use super::TrieMap;\n-    use std::rand::{weak_rng, Rng};\n+    use rand::{weak_rng, Rng};\n     use self::test::BenchHarness;\n \n     #[bench]"}, {"sha": "673eb7e76de492e50fe4ba5ac24a7711f1e3889d", "filename": "src/libextra/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibextra%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibextra%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Flib.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -34,9 +34,10 @@ Rust extras are part of the standard Rust distribution.\n #[deny(non_camel_case_types)];\n #[deny(missing_doc)];\n \n-extern crate sync;\n-extern crate serialize;\n extern crate collections;\n+extern crate rand;\n+extern crate serialize;\n+extern crate sync;\n extern crate time;\n \n // Utility modules"}, {"sha": "905541604e03d70202dadda55746b04c92119727", "filename": "src/libextra/tempfile.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibextra%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibextra%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftempfile.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -12,8 +12,7 @@\n \n \n use std::os;\n-use std::rand::Rng;\n-use std::rand;\n+use rand::{task_rng, Rng};\n use std::io;\n use std::io::fs;\n \n@@ -35,7 +34,7 @@ impl TempDir {\n             return TempDir::new_in(&abs_tmpdir, suffix);\n         }\n \n-        let mut r = rand::rng();\n+        let mut r = task_rng();\n         for _ in range(0u, 1000) {\n             let p = tmpdir.join(r.gen_ascii_str(16) + suffix);\n             match fs::mkdir(&p, io::UserRWX) {"}, {"sha": "6bf5092bb2d515249ad3abe897e6cd90125b42c1", "filename": "src/libflate/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibflate%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibflate%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibflate%2Flib.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -90,13 +90,14 @@ pub fn inflate_bytes_zlib(bytes: &[u8]) -> CVec<u8> {\n \n #[cfg(test)]\n mod tests {\n+    extern crate rand;\n+\n     use super::{inflate_bytes, deflate_bytes};\n-    use std::rand;\n-    use std::rand::Rng;\n+    use self::rand::Rng;\n \n     #[test]\n     fn test_flate_round_trip() {\n-        let mut r = rand::rng();\n+        let mut r = rand::task_rng();\n         let mut words = ~[];\n         for _ in range(0, 20) {\n             let range = r.gen_range(1u, 10);"}, {"sha": "22dd4c74936b451db698aea49696e30e0eef0aaf", "filename": "src/libgreen/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibgreen%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibgreen%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Flib.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -175,6 +175,8 @@\n #[feature(macro_rules)];\n #[allow(visible_private_types)];\n \n+extern crate rand;\n+\n use std::mem::replace;\n use std::os;\n use std::rt::crate_map;"}, {"sha": "aae0034263e373b8e99b5e7a55ec6d79836368b2", "filename": "src/libgreen/sched.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibgreen%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibgreen%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fsched.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use std::cast;\n-use std::rand::{XorShiftRng, Rng, Rand};\n use std::rt::local::Local;\n use std::rt::rtio::{RemoteCallback, PausableIdleCallback, Callback, EventLoop};\n use std::rt::task::BlockedTask;\n@@ -18,6 +17,8 @@ use std::sync::deque;\n use std::unstable::mutex::NativeMutex;\n use std::raw;\n \n+use rand::{XorShiftRng, Rng, Rand};\n+\n use TaskState;\n use context::Context;\n use coroutine::Coroutine;\n@@ -957,7 +958,7 @@ fn new_sched_rng() -> XorShiftRng {\n fn new_sched_rng() -> XorShiftRng {\n     use std::libc;\n     use std::mem;\n-    use std::rand::SeedableRng;\n+    use rand::SeedableRng;\n \n     let fd = \"/dev/urandom\".with_c_str(|name| {\n         unsafe { libc::open(name, libc::O_RDONLY, 0) }"}, {"sha": "c6203b3f234c98fbffa0a0273cbe83c65f4d170b", "filename": "src/libnum/bigint.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnum%2Fbigint.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -24,7 +24,7 @@ use std::from_str::FromStr;\n use std::num::CheckedDiv;\n use std::num::{Bitwise, ToPrimitive, FromPrimitive};\n use std::num::{Zero, One, ToStrRadix, FromStrRadix};\n-use std::rand::Rng;\n+use rand::Rng;\n use std::str;\n use std::uint;\n use std::vec;\n@@ -1470,7 +1470,7 @@ mod biguint_tests {\n     use std::num::{Zero, One, FromStrRadix, ToStrRadix};\n     use std::num::{ToPrimitive, FromPrimitive};\n     use std::num::CheckedDiv;\n-    use std::rand::{task_rng};\n+    use rand::{task_rng};\n     use std::str;\n     use std::u64;\n     use std::vec;\n@@ -2205,7 +2205,7 @@ mod bigint_tests {\n     use std::num::CheckedDiv;\n     use std::num::{Zero, One, FromStrRadix, ToStrRadix};\n     use std::num::{ToPrimitive, FromPrimitive};\n-    use std::rand::{task_rng};\n+    use rand::{task_rng};\n     use std::u64;\n \n     #[test]"}, {"sha": "8ff042ba3621ca94e3850d23349fc1f5805f9913", "filename": "src/libnum/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibnum%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibnum%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnum%2Flib.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -15,6 +15,8 @@\n #[crate_type = \"dylib\"];\n #[license = \"MIT/ASL2\"];\n \n+extern crate rand;\n+\n pub mod bigint;\n pub mod rational;\n pub mod complex;"}, {"sha": "369828d59696f1cfd2952cafe8ab0881d729fd10", "filename": "src/librand/distributions/exponential.rs", "status": "renamed", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibrand%2Fdistributions%2Fexponential.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibrand%2Fdistributions%2Fexponential.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fexponential.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -10,9 +10,9 @@\n \n //! The exponential distribution.\n \n-use num::Float;\n-use rand::{Rng, Rand};\n-use rand::distributions::{ziggurat, ziggurat_tables, Sample, IndependentSample};\n+use std::num::Float;\n+use {Rng, Rand};\n+use distributions::{ziggurat, ziggurat_tables, Sample, IndependentSample};\n \n /// A wrapper around an `f64` to generate Exp(1) random numbers.\n ///\n@@ -58,8 +58,7 @@ impl Rand for Exp1 {\n /// # Example\n ///\n /// ```rust\n-/// use std::rand;\n-/// use std::rand::distributions::{Exp, IndependentSample};\n+/// use rand::distributions::{Exp, IndependentSample};\n ///\n /// let exp = Exp::new(2.0);\n /// let v = exp.ind_sample(&mut rand::task_rng());\n@@ -91,10 +90,9 @@ impl IndependentSample<f64> for Exp {\n \n #[cfg(test)]\n mod test {\n-    use rand::distributions::*;\n-    use prelude::*;\n-    use rand::*;\n-    use super::*;\n+    use distributions::{Sample, IndependentSample};\n+    use {Rng, task_rng};\n+    use super::Exp;\n \n     #[test]\n     fn test_exp() {\n@@ -121,11 +119,10 @@ mod test {\n mod bench {\n     extern crate test;\n     use self::test::BenchHarness;\n-    use mem::size_of;\n-    use prelude::*;\n-    use rand::{XorShiftRng, RAND_BENCH_N};\n-    use super::*;\n-    use rand::distributions::*;\n+    use std::mem::size_of;\n+    use {XorShiftRng, RAND_BENCH_N};\n+    use super::Exp;\n+    use distributions::Sample;\n \n     #[bench]\n     fn rand_exp(bh: &mut BenchHarness) {", "previous_filename": "src/libstd/rand/distributions/exponential.rs"}, {"sha": "029333cd78894cafe6e322e572e5b90def413f0e", "filename": "src/librand/distributions/gamma.rs", "status": "renamed", "additions": 16, "deletions": 22, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibrand%2Fdistributions%2Fgamma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibrand%2Fdistributions%2Fgamma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fgamma.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -10,17 +10,17 @@\n \n //! The Gamma and derived distributions.\n \n-use num::Float;\n-use num;\n-use rand::{Rng, Open01};\n+use std::num::Float;\n+use std::num;\n+use {Rng, Open01};\n use super::normal::StandardNormal;\n use super::{IndependentSample, Sample, Exp};\n \n /// The Gamma distribution `Gamma(shape, scale)` distribution.\n ///\n /// The density function of this distribution is\n ///\n-/// ```ignore\n+/// ```notrust\n /// f(x) =  x^(k - 1) * exp(-x / \u03b8) / (\u0393(k) * \u03b8^k)\n /// ```\n ///\n@@ -35,8 +35,7 @@ use super::{IndependentSample, Sample, Exp};\n /// # Example\n ///\n /// ```rust\n-/// use std::rand;\n-/// use std::rand::distributions::{IndependentSample, Gamma};\n+/// use rand::distributions::{IndependentSample, Gamma};\n ///\n /// let gamma = Gamma::new(2.0, 5.0);\n /// let v = gamma.ind_sample(&mut rand::task_rng());\n@@ -179,8 +178,7 @@ impl IndependentSample<f64> for GammaLargeShape {\n /// # Example\n ///\n /// ```rust\n-/// use std::rand;\n-/// use std::rand::distributions::{ChiSquared, IndependentSample};\n+/// use rand::distributions::{ChiSquared, IndependentSample};\n ///\n /// let chi = ChiSquared::new(11.0);\n /// let v = chi.ind_sample(&mut rand::task_rng());\n@@ -231,8 +229,7 @@ impl IndependentSample<f64> for ChiSquared {\n /// # Example\n ///\n /// ```rust\n-/// use std::rand;\n-/// use std::rand::distributions::{FisherF, IndependentSample};\n+/// use rand::distributions::{FisherF, IndependentSample};\n ///\n /// let f = FisherF::new(2.0, 32.0);\n /// let v = f.ind_sample(&mut rand::task_rng());\n@@ -275,8 +272,7 @@ impl IndependentSample<f64> for FisherF {\n /// # Example\n ///\n /// ```rust\n-/// use std::rand;\n-/// use std::rand::distributions::{StudentT, IndependentSample};\n+/// use rand::distributions::{StudentT, IndependentSample};\n ///\n /// let t = StudentT::new(11.0);\n /// let v = t.ind_sample(&mut rand::task_rng());\n@@ -310,10 +306,9 @@ impl IndependentSample<f64> for StudentT {\n \n #[cfg(test)]\n mod test {\n-    use rand::distributions::*;\n-    use prelude::*;\n-    use rand::*;\n-    use super::*;\n+    use distributions::{Sample, IndependentSample};\n+    use {Rng, task_rng};\n+    use super::{ChiSquared, StudentT, FisherF};\n \n     #[test]\n     fn test_chi_squared_one() {\n@@ -344,7 +339,7 @@ mod test {\n     }\n     #[test]\n     #[should_fail]\n-    fn test_log_normal_invalid_dof() {\n+    fn test_chi_squared_invalid_dof() {\n         ChiSquared::new(-1.0);\n     }\n \n@@ -373,11 +368,10 @@ mod test {\n mod bench {\n     extern crate test;\n     use self::test::BenchHarness;\n-    use mem::size_of;\n-    use prelude::*;\n-    use rand::distributions::IndependentSample;\n-    use rand::{StdRng, RAND_BENCH_N};\n-    use super::*;\n+    use std::mem::size_of;\n+    use distributions::IndependentSample;\n+    use {StdRng, RAND_BENCH_N};\n+    use super::Gamma;\n \n \n     #[bench]", "previous_filename": "src/libstd/rand/distributions/gamma.rs"}, {"sha": "22a09b152c7f5e01794d2350648a3b45a3551fe1", "filename": "src/librand/distributions/mod.rs", "status": "renamed", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibrand%2Fdistributions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibrand%2Fdistributions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fmod.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -20,14 +20,9 @@ that do not need to record state.\n \n */\n \n-use container::Container;\n-use iter::{range, Iterator};\n-use option::{Some, None};\n-use num;\n-use num::CheckedAdd;\n-use rand::{Rng, Rand};\n-use clone::Clone;\n-use vec::MutableVector;\n+use std::num;\n+use std::num::CheckedAdd;\n+use {Rng, Rand};\n \n pub use self::range::Range;\n pub use self::gamma::{Gamma, ChiSquared, FisherF, StudentT};\n@@ -94,8 +89,7 @@ pub struct Weighted<T> {\n /// # Example\n ///\n /// ```rust\n-/// use std::rand;\n-/// use std::rand::distributions::{Weighted, WeightedChoice, IndependentSample};\n+/// use rand::distributions::{Weighted, WeightedChoice, IndependentSample};\n ///\n /// let wc = WeightedChoice::new(~[Weighted { weight: 2, item: 'a' },\n ///                                Weighted { weight: 4, item: 'b' },\n@@ -253,9 +247,8 @@ fn ziggurat<R:Rng>(\n \n #[cfg(test)]\n mod tests {\n-    use prelude::*;\n-    use rand::*;\n-    use super::*;\n+    use {task_rng, Rng, Rand};\n+    use super::{RandSample, WeightedChoice, Weighted, Sample, IndependentSample};\n \n     #[deriving(Eq, Show)]\n     struct ConstRand(uint);", "previous_filename": "src/libstd/rand/distributions/mod.rs"}, {"sha": "4c9567efc6e8885db9c3df8e45693b5a78ef0045", "filename": "src/librand/distributions/normal.rs", "status": "renamed", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibrand%2Fdistributions%2Fnormal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibrand%2Fdistributions%2Fnormal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fnormal.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -10,9 +10,9 @@\n \n //! The normal and derived distributions.\n \n-use num::Float;\n-use rand::{Rng, Rand, Open01};\n-use rand::distributions::{ziggurat, ziggurat_tables, Sample, IndependentSample};\n+use std::num::Float;\n+use {Rng, Rand, Open01};\n+use distributions::{ziggurat, ziggurat_tables, Sample, IndependentSample};\n \n /// A wrapper around an `f64` to generate N(0, 1) random numbers\n /// (a.k.a.  a standard normal, or Gaussian).\n@@ -74,8 +74,7 @@ impl Rand for StandardNormal {\n /// # Example\n ///\n /// ```rust\n-/// use std::rand;\n-/// use std::rand::distributions::{Normal, IndependentSample};\n+/// use rand::distributions::{Normal, IndependentSample};\n ///\n /// // mean 2, standard deviation 3\n /// let normal = Normal::new(2.0, 3.0);\n@@ -117,8 +116,7 @@ impl IndependentSample<f64> for Normal {\n /// # Example\n ///\n /// ```rust\n-/// use std::rand;\n-/// use std::rand::distributions::{LogNormal, IndependentSample};\n+/// use rand::distributions::{LogNormal, IndependentSample};\n ///\n /// // mean 2, standard deviation 3\n /// let log_normal = LogNormal::new(2.0, 3.0);\n@@ -148,10 +146,9 @@ impl IndependentSample<f64> for LogNormal {\n \n #[cfg(test)]\n mod tests {\n-    use prelude::*;\n-    use rand::*;\n-    use super::*;\n-    use rand::distributions::*;\n+    use distributions::{Sample, IndependentSample};\n+    use {Rng, task_rng};\n+    use super::{Normal, LogNormal};\n \n     #[test]\n     fn test_normal() {\n@@ -189,11 +186,10 @@ mod tests {\n mod bench {\n     extern crate test;\n     use self::test::BenchHarness;\n-    use mem::size_of;\n-    use prelude::*;\n-    use rand::{XorShiftRng, RAND_BENCH_N};\n-    use rand::distributions::*;\n-    use super::*;\n+    use std::mem::size_of;\n+    use {XorShiftRng, RAND_BENCH_N};\n+    use distributions::{Sample};\n+    use super::Normal;\n \n     #[bench]\n     fn rand_normal(bh: &mut BenchHarness) {", "previous_filename": "src/libstd/rand/distributions/normal.rs"}, {"sha": "8256a37f2ecdda86ba3ec88419b62a225389f395", "filename": "src/librand/distributions/range.rs", "status": "renamed", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibrand%2Fdistributions%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibrand%2Fdistributions%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Frange.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -12,10 +12,9 @@\n \n // this is surprisingly complicated to be both generic & correct\n \n-use cmp::Ord;\n-use num::Bounded;\n-use rand::Rng;\n-use rand::distributions::{Sample, IndependentSample};\n+use std::num::Bounded;\n+use Rng;\n+use distributions::{Sample, IndependentSample};\n \n /// Sample values uniformly between two bounds.\n ///\n@@ -34,8 +33,7 @@ use rand::distributions::{Sample, IndependentSample};\n /// # Example\n ///\n /// ```rust\n-/// use std::rand;\n-/// use std::rand::distributions::{IndependentSample, Range};\n+/// use rand::distributions::{IndependentSample, Range};\n ///\n /// fn main() {\n ///     let between = Range::new(10u, 10000u);\n@@ -163,11 +161,10 @@ float_impl! { f64 }\n \n #[cfg(test)]\n mod tests {\n-    use prelude::*;\n-    use super::*;\n-    use rand::*;\n-    use rand::distributions::*;\n-    use num::Bounded;\n+    use distributions::{Sample, IndependentSample};\n+    use {Rng, task_rng};\n+    use super::Range;\n+    use std::num::Bounded;\n \n     #[should_fail]\n     #[test]", "previous_filename": "src/libstd/rand/distributions/range.rs"}, {"sha": "049ef3dbb5936933b894b9dfe9891fa872affa97", "filename": "src/librand/distributions/ziggurat_tables.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibrand%2Fdistributions%2Fziggurat_tables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibrand%2Fdistributions%2Fziggurat_tables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fziggurat_tables.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "previous_filename": "src/libstd/rand/distributions/ziggurat_tables.rs"}, {"sha": "b3226d60095b986564c89e475d1f59a48e447a0b", "filename": "src/librand/isaac.rs", "status": "renamed", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibrand%2Fisaac.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibrand%2Fisaac.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fisaac.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -10,11 +10,10 @@\n \n //! The ISAAC random number generator.\n \n-use rand::{Rng, SeedableRng, OSRng};\n-use iter::{Iterator, range, range_step, Repeat};\n-use option::{None, Some};\n-use vec::{raw, MutableVector, ImmutableVector};\n-use mem;\n+use {Rng, SeedableRng, OSRng};\n+use std::iter::{range_step, Repeat};\n+use std::vec::raw;\n+use std::mem;\n \n static RAND_SIZE_LEN: u32 = 8;\n static RAND_SIZE: u32 = 1 << RAND_SIZE_LEN;\n@@ -430,10 +429,9 @@ impl<'a> SeedableRng<&'a [u64]> for Isaac64Rng {\n \n #[cfg(test)]\n mod test {\n-    use super::*;\n-    use rand::{Rng, SeedableRng, OSRng};\n-    use prelude::*;\n-    use vec;\n+    use super::{IsaacRng, Isaac64Rng};\n+    use {Rng, SeedableRng, OSRng};\n+    use std::vec;\n \n     #[test]\n     fn test_rng_32_rand_seeded() {", "previous_filename": "src/libstd/rand/isaac.rs"}, {"sha": "87a18497b8afd77ee5e082e0f4b7d2593b46fe00", "filename": "src/librand/lib.rs", "status": "renamed", "additions": 72, "deletions": 58, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -48,38 +48,41 @@ randomness.\n # Examples\n \n ```rust\n-use std::rand;\n-use std::rand::Rng;\n+use rand::Rng;\n \n-let mut rng = rand::rng();\n+let mut rng = rand::task_rng();\n if rng.gen() { // bool\n     println!(\"int: {}, uint: {}\", rng.gen::<int>(), rng.gen::<uint>())\n }\n- ```\n+```\n \n ```rust\n-use std::rand;\n-\n let tuple_ptr = rand::random::<~(f64, char)>();\n println!(\"{:?}\", tuple_ptr)\n- ```\n+```\n */\n \n-use cast;\n-use cmp::Ord;\n-use container::Container;\n-use iter::{Iterator, range};\n-use kinds::marker;\n-use local_data;\n-use prelude::*;\n-use str;\n-use vec;\n+#[crate_id = \"rand#0.10-pre\"];\n+#[license = \"MIT/ASL2\"];\n+#[crate_type = \"dylib\"];\n+#[crate_type = \"rlib\"];\n+#[doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk.png\",\n+      html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n+      html_root_url = \"http://static.rust-lang.org/doc/master\")];\n+\n+#[feature(macro_rules, managed_boxes)];\n+\n+use std::cast;\n+use std::kinds::marker;\n+use std::local_data;\n+use std::str;\n+use std::vec;\n \n-pub use self::isaac::{IsaacRng, Isaac64Rng};\n-pub use self::os::OSRng;\n+pub use isaac::{IsaacRng, Isaac64Rng};\n+pub use os::OSRng;\n \n-use self::distributions::{Range, IndependentSample};\n-use self::distributions::range::SampleRange;\n+use distributions::{Range, IndependentSample};\n+use distributions::range::SampleRange;\n \n pub mod distributions;\n pub mod isaac;\n@@ -135,7 +138,7 @@ pub trait Rng {\n     /// # Example\n     ///\n     /// ```rust\n-    /// use std::rand::{task_rng, Rng};\n+    /// use rand::{task_rng, Rng};\n     ///\n     /// let mut v = [0u8, .. 13579];\n     /// task_rng().fill_bytes(v);\n@@ -170,7 +173,7 @@ pub trait Rng {\n     /// # Example\n     ///\n     /// ```rust\n-    /// use std::rand::{task_rng, Rng};\n+    /// use rand::{task_rng, Rng};\n     ///\n     /// let mut rng = task_rng();\n     /// let x: uint = rng.gen();\n@@ -187,7 +190,7 @@ pub trait Rng {\n     /// # Example\n     ///\n     /// ```rust\n-    /// use std::rand::{task_rng, Rng};\n+    /// use rand::{task_rng, Rng};\n     ///\n     /// let mut rng = task_rng();\n     /// let x: ~[uint] = rng.gen_vec(10);\n@@ -210,7 +213,7 @@ pub trait Rng {\n     /// # Example\n     ///\n     /// ```rust\n-    /// use std::rand::{task_rng, Rng};\n+    /// use rand::{task_rng, Rng};\n     ///\n     /// let mut rng = task_rng();\n     /// let n: uint = rng.gen_range(0u, 10);\n@@ -228,7 +231,7 @@ pub trait Rng {\n     /// # Example\n     ///\n     /// ```rust\n-    /// use std::rand::{task_rng, Rng};\n+    /// use rand::{task_rng, Rng};\n     ///\n     /// let mut rng = task_rng();\n     /// println!(\"{:b}\", rng.gen_weighted_bool(3));\n@@ -243,7 +246,7 @@ pub trait Rng {\n     /// # Example\n     ///\n     /// ```rust\n-    /// use std::rand::{task_rng, Rng};\n+    /// use rand::{task_rng, Rng};\n     ///\n     /// println!(\"{}\", task_rng().gen_ascii_str(10));\n     /// ```\n@@ -269,7 +272,7 @@ pub trait Rng {\n     /// # Example\n     ///\n     /// ```rust\n-    /// use std::rand::{task_rng, Rng};\n+    /// use rand::{task_rng, Rng};\n     ///\n     /// let choices = [1, 2, 4, 8, 16, 32];\n     /// let mut rng = task_rng();\n@@ -289,7 +292,7 @@ pub trait Rng {\n     /// # Example\n     ///\n     /// ```rust\n-    /// use std::rand::{task_rng, Rng};\n+    /// use rand::{task_rng, Rng};\n     ///\n     /// println!(\"{:?}\", task_rng().shuffle(~[1,2,3]));\n     /// ```\n@@ -304,7 +307,7 @@ pub trait Rng {\n     /// # Example\n     ///\n     /// ```rust\n-    /// use std::rand::{task_rng, Rng};\n+    /// use rand::{task_rng, Rng};\n     ///\n     /// let mut rng = task_rng();\n     /// let mut y = [1,2,3];\n@@ -328,7 +331,7 @@ pub trait Rng {\n     /// # Example\n     ///\n     /// ```rust\n-    /// use std::rand::{task_rng, Rng};\n+    /// use rand::{task_rng, Rng};\n     ///\n     /// let mut rng = task_rng();\n     /// let sample = rng.sample(range(1, 100), 5);\n@@ -359,7 +362,7 @@ pub trait SeedableRng<Seed>: Rng {\n     /// # Example\n     ///\n     /// ```rust\n-    /// use std::rand::{Rng, SeedableRng, StdRng};\n+    /// use rand::{Rng, SeedableRng, StdRng};\n     ///\n     /// let mut rng: StdRng = SeedableRng::from_seed(&[1, 2, 3, 4]);\n     /// println!(\"{}\", rng.gen::<f64>());\n@@ -373,7 +376,7 @@ pub trait SeedableRng<Seed>: Rng {\n     /// # Example\n     ///\n     /// ```rust\n-    /// use std::rand::{Rng, SeedableRng, StdRng};\n+    /// use rand::{Rng, SeedableRng, StdRng};\n     ///\n     /// let mut rng: StdRng = SeedableRng::from_seed(&[1, 2, 3, 4]);\n     /// println!(\"{}\", rng.gen::<f64>());\n@@ -393,6 +396,7 @@ pub trait SeedableRng<Seed>: Rng {\n /// operation. If one does not require high performance generation of\n /// random numbers, `task_rng` and/or `random` may be more\n /// appropriate.\n+#[deprecated=\"use `task_rng` or `StdRng::new`\"]\n pub fn rng() -> StdRng {\n     StdRng::new()\n }\n@@ -408,14 +412,26 @@ pub struct StdRng { priv rng: IsaacRng }\n pub struct StdRng { priv rng: Isaac64Rng }\n \n impl StdRng {\n-    /// Create a randomly seeded instance of `StdRng`. This reads\n-    /// randomness from the OS to seed the PRNG.\n+    /// Create a randomly seeded instance of `StdRng`.\n+    ///\n+    /// This is a very expensive operation as it has to read\n+    /// randomness from the operating system and use this in an\n+    /// expensive seeding operation. If one is only generating a small\n+    /// number of random numbers, or doesn't need the utmost speed for\n+    /// generating each number, `task_rng` and/or `random` may be more\n+    /// appropriate.\n     #[cfg(not(target_word_size=\"64\"))]\n     pub fn new() -> StdRng {\n         StdRng { rng: IsaacRng::new() }\n     }\n-    /// Create a randomly seeded instance of `StdRng`. This reads\n-    /// randomness from the OS to seed the PRNG.\n+    /// Create a randomly seeded instance of `StdRng`.\n+    ///\n+    /// This is a very expensive operation as it has to read\n+    /// randomness from the operating system and use this in an\n+    /// expensive seeding operation. If one is only generating a small\n+    /// number of random numbers, or doesn't need the utmost speed for\n+    /// generating each number, `task_rng` and/or `random` may be more\n+    /// appropriate.\n     #[cfg(target_word_size=\"64\")]\n     pub fn new() -> StdRng {\n         StdRng { rng: Isaac64Rng::new() }\n@@ -609,7 +625,7 @@ impl Rng for TaskRng {\n /// # Example\n ///\n /// ```rust\n-/// use std::rand::random;\n+/// use rand::random;\n ///\n /// if random() {\n ///     let x = random();\n@@ -631,8 +647,8 @@ pub fn random<T: Rand>() -> T {\n /// `[0,1)`.\n ///\n /// # Example\n-/// ```rust,ignore\n-/// use std::rand::{random, Open01};\n+/// ```rust\n+/// use rand::{random, Open01};\n ///\n /// let Open01(val) = random::<Open01<f32>>();\n /// println!(\"f32 from (0,1): {}\", val);\n@@ -647,8 +663,8 @@ pub struct Open01<F>(F);\n /// `[0,1)`.\n ///\n /// # Example\n-/// ```rust,ignore\n-/// use std::rand::{random, Closed01};\n+/// ```rust\n+/// use rand::{random, Closed01};\n ///\n /// let Closed01(val) = random::<Closed01<f32>>();\n /// println!(\"f32 from [0,1]: {}\", val);\n@@ -657,9 +673,8 @@ pub struct Closed01<F>(F);\n \n #[cfg(test)]\n mod test {\n-    use prelude::*;\n-    use vec;\n-    use super::*;\n+    use std::vec;\n+    use super::{Rng, task_rng, random, OSRng, SeedableRng, StdRng};\n \n     struct ConstRng { i: u64 }\n     impl Rng for ConstRng {\n@@ -691,7 +706,7 @@ mod test {\n \n     #[test]\n     fn test_gen_range() {\n-        let mut r = rng();\n+        let mut r = task_rng();\n         for _ in range(0, 1000) {\n             let a = r.gen_range(-3i, 42);\n             assert!(a >= -3 && a < 42);\n@@ -711,35 +726,35 @@ mod test {\n     #[test]\n     #[should_fail]\n     fn test_gen_range_fail_int() {\n-        let mut r = rng();\n+        let mut r = task_rng();\n         r.gen_range(5i, -2);\n     }\n \n     #[test]\n     #[should_fail]\n     fn test_gen_range_fail_uint() {\n-        let mut r = rng();\n+        let mut r = task_rng();\n         r.gen_range(5u, 2u);\n     }\n \n     #[test]\n     fn test_gen_f64() {\n-        let mut r = rng();\n+        let mut r = task_rng();\n         let a = r.gen::<f64>();\n         let b = r.gen::<f64>();\n         debug!(\"{:?}\", (a, b));\n     }\n \n     #[test]\n     fn test_gen_weighted_bool() {\n-        let mut r = rng();\n+        let mut r = task_rng();\n         assert_eq!(r.gen_weighted_bool(0u), true);\n         assert_eq!(r.gen_weighted_bool(1u), true);\n     }\n \n     #[test]\n     fn test_gen_ascii_str() {\n-        let mut r = rng();\n+        let mut r = task_rng();\n         debug!(\"{}\", r.gen_ascii_str(10u));\n         debug!(\"{}\", r.gen_ascii_str(10u));\n         debug!(\"{}\", r.gen_ascii_str(10u));\n@@ -750,21 +765,21 @@ mod test {\n \n     #[test]\n     fn test_gen_vec() {\n-        let mut r = rng();\n+        let mut r = task_rng();\n         assert_eq!(r.gen_vec::<u8>(0u).len(), 0u);\n         assert_eq!(r.gen_vec::<u8>(10u).len(), 10u);\n         assert_eq!(r.gen_vec::<f64>(16u).len(), 16u);\n     }\n \n     #[test]\n     fn test_choose() {\n-        let mut r = rng();\n+        let mut r = task_rng();\n         assert_eq!(r.choose([1, 1, 1]), 1);\n     }\n \n     #[test]\n     fn test_choose_option() {\n-        let mut r = rng();\n+        let mut r = task_rng();\n         let v: &[int] = &[];\n         assert!(r.choose_option(v).is_none());\n \n@@ -775,7 +790,7 @@ mod test {\n \n     #[test]\n     fn test_shuffle() {\n-        let mut r = rng();\n+        let mut r = task_rng();\n         let empty: ~[int] = ~[];\n         assert_eq!(r.shuffle(~[]), empty);\n         assert_eq!(r.shuffle(~[1, 1, 1]), ~[1, 1, 1]);\n@@ -806,7 +821,7 @@ mod test {\n         let min_val = 1;\n         let max_val = 100;\n \n-        let mut r = rng();\n+        let mut r = task_rng();\n         let vals = range(min_val, max_val).to_owned_vec();\n         let small_sample = r.sample(vals.iter(), 5);\n         let large_sample = r.sample(vals.iter(), vals.len() + 5);\n@@ -847,9 +862,8 @@ static RAND_BENCH_N: u64 = 100;\n mod bench {\n     extern crate test;\n     use self::test::BenchHarness;\n-    use prelude::*;\n-    use rand::{XorShiftRng, StdRng, IsaacRng, Isaac64Rng, Rng, RAND_BENCH_N};\n-    use mem::size_of;\n+    use {XorShiftRng, StdRng, IsaacRng, Isaac64Rng, Rng, RAND_BENCH_N};\n+    use std::mem::size_of;\n \n     #[bench]\n     fn rand_xorshift(bh: &mut BenchHarness) {", "previous_filename": "src/libstd/rand/mod.rs"}, {"sha": "826c1640b69a38f6ebb0b4edc2d0c46a5bec169d", "filename": "src/librand/os.rs", "status": "renamed", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibrand%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibrand%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fos.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -11,18 +11,17 @@\n //! Interfaces to the operating system provided random number\n //! generators.\n \n-use rand::Rng;\n-use ops::Drop;\n+use Rng;\n \n #[cfg(unix)]\n-use rand::reader::ReaderRng;\n+use reader::ReaderRng;\n #[cfg(unix)]\n-use io::File;\n+use std::io::File;\n \n #[cfg(windows)]\n-use cast;\n+use std::cast;\n #[cfg(windows)]\n-use libc::{c_long, DWORD, BYTE};\n+use std::libc::{c_long, DWORD, BYTE};\n #[cfg(windows)]\n type HCRYPTPROV = c_long;\n // the extern functions imported from the runtime on Windows are\n@@ -60,7 +59,6 @@ impl OSRng {\n     /// Create a new `OSRng`.\n     #[cfg(unix)]\n     pub fn new() -> OSRng {\n-        use path::Path;\n         let reader = File::open(&Path::new(\"/dev/urandom\"));\n         let reader = reader.ok().expect(\"Error opening /dev/urandom\");\n         let reader_rng = ReaderRng::new(reader);\n@@ -106,9 +104,6 @@ impl Rng for OSRng {\n         unsafe { cast::transmute(v) }\n     }\n     fn fill_bytes(&mut self, v: &mut [u8]) {\n-        use container::Container;\n-        use vec::MutableVector;\n-\n         extern {\n             fn rust_win32_rand_gen(hProv: HCRYPTPROV, dwLen: DWORD,\n                                    pbBuffer: *mut BYTE);\n@@ -136,10 +131,9 @@ impl Drop for OSRng {\n \n #[cfg(test)]\n mod test {\n-    use prelude::*;\n-    use super::*;\n-    use rand::Rng;\n-    use task;\n+    use super::OSRng;\n+    use Rng;\n+    use std::task;\n \n     #[test]\n     fn test_os_rng() {", "previous_filename": "src/libstd/rand/os.rs"}, {"sha": "fbd160554602f3afac4b807e4976737d303e22d7", "filename": "src/librand/rand_impls.rs", "status": "renamed", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibrand%2Frand_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibrand%2Frand_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Frand_impls.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -10,11 +10,11 @@\n \n //! The implementations of `Rand` for the built-in types.\n \n-use char;\n-use int;\n-use option::{Option, Some, None};\n-use rand::{Rand,Rng};\n-use uint;\n+use std::char;\n+use std::int;\n+use std::uint;\n+\n+use {Rand,Rng};\n \n impl Rand for int {\n     #[inline]\n@@ -97,7 +97,7 @@ impl Rand for u64 {\n macro_rules! float_impls {\n     ($mod_name:ident, $ty:ty, $mantissa_bits:expr, $method_name:ident, $ignored_bits:expr) => {\n         mod $mod_name {\n-            use rand::{Rand, Rng, Open01, Closed01};\n+            use {Rand, Rng, Open01, Closed01};\n \n             static SCALE: $ty = (1u64 << $mantissa_bits) as $ty;\n \n@@ -226,8 +226,7 @@ impl<T: Rand + 'static> Rand for @T {\n \n #[cfg(test)]\n mod tests {\n-    use prelude::*;\n-    use rand::{Rng, task_rng, Open01, Closed01};\n+    use {Rng, task_rng, Open01, Closed01};\n \n     struct ConstantRng(u64);\n     impl Rng for ConstantRng {", "previous_filename": "src/libstd/rand/rand_impls.rs"}, {"sha": "744930e028cb9caa8fa869981154a13e2e2e9c8d", "filename": "src/librand/reader.rs", "status": "renamed", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibrand%2Freader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibrand%2Freader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Freader.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -10,11 +10,7 @@\n \n //! A wrapper around any Reader to treat it as an RNG.\n \n-use container::Container;\n-use result::{Ok, Err};\n-use io::Reader;\n-\n-use rand::Rng;\n+use Rng;\n \n /// An RNG that reads random bytes straight from a `Reader`. This will\n /// work best with an infinite reader, but this is not required.\n@@ -24,7 +20,7 @@ use rand::Rng;\n /// # Example\n ///\n /// ```rust\n-/// use std::rand::{reader, Rng};\n+/// use rand::{reader, Rng};\n /// use std::io::MemReader;\n ///\n /// let mut rng = reader::ReaderRng::new(MemReader::new(~[1,2,3,4,5,6,7,8]));\n@@ -75,11 +71,10 @@ impl<R: Reader> Rng for ReaderRng<R> {\n \n #[cfg(test)]\n mod test {\n-    use super::*;\n-    use io::MemReader;\n-    use cast;\n-    use rand::*;\n-    use prelude::*;\n+    use super::ReaderRng;\n+    use std::io::MemReader;\n+    use std::cast;\n+    use Rng;\n \n     #[test]\n     fn test_reader_rng_u64() {", "previous_filename": "src/libstd/rand/reader.rs"}, {"sha": "a64124e637ec4fadbc307c85c3f33b844ec1470c", "filename": "src/librand/reseeding.rs", "status": "renamed", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibrand%2Freseeding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibrand%2Freseeding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Freseeding.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -11,9 +11,8 @@\n //! A wrapper around another RNG that reseeds it after it\n //! generates a certain number of random bytes.\n \n-use container::Container;\n-use default::Default;\n-use rand::{Rng, SeedableRng};\n+use std::default::Default;\n+use {Rng, SeedableRng};\n \n /// How many bytes of entropy the underling RNG is allowed to generate\n /// before it is reseeded.\n@@ -101,9 +100,8 @@ impl<S, R: SeedableRng<S>, Rsdr: Reseeder<R>>\n /// # Example\n ///\n /// ```rust\n-/// use std::rand;\n-/// use std::rand::{Rng, SeedableRng};\n-/// use std::rand::reseeding::{Reseeder, ReseedingRng};\n+/// use rand::{Rng, SeedableRng};\n+/// use rand::reseeding::{Reseeder, ReseedingRng};\n ///\n /// struct TickTockReseeder { tick: bool }\n /// impl Reseeder<rand::StdRng> for TickTockReseeder {\n@@ -142,10 +140,9 @@ impl Default for ReseedWithDefault {\n \n #[cfg(test)]\n mod test {\n-    use prelude::*;\n-    use super::*;\n-    use default::Default;\n-    use rand::{SeedableRng, Rng};\n+    use super::{ReseedingRng, ReseedWithDefault};\n+    use std::default::Default;\n+    use {SeedableRng, Rng};\n \n     struct Counter {\n         i: u32\n@@ -205,7 +202,7 @@ mod test {\n     static fill_bytes_v_len: uint = 13579;\n     #[test]\n     fn test_rng_fill_bytes() {\n-        use rand::task_rng;\n+        use task_rng;\n         let mut v = ~[0u8, .. fill_bytes_v_len];\n         task_rng().fill_bytes(v);\n ", "previous_filename": "src/libstd/rand/reseeding.rs"}, {"sha": "5dbebbb4db1719e1f119c882d6f0e7f51dad39e7", "filename": "src/librustc/util/sha2.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibrustc%2Futil%2Fsha2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibrustc%2Futil%2Fsha2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fsha2.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -524,12 +524,14 @@ static H256: [u32, ..8] = [\n \n #[cfg(test)]\n mod tests {\n+    extern crate rand;\n+\n     use super::{Digest, Sha256, FixedBuffer};\n     use std::num::Bounded;\n     use std::vec;\n     use std::vec_ng::Vec;\n-    use std::rand::isaac::IsaacRng;\n-    use std::rand::Rng;\n+    use self::rand::isaac::IsaacRng;\n+    use self::rand::Rng;\n     use serialize::hex::FromHex;\n \n     // A normal addition - no overflow occurs"}, {"sha": "a09b03ec58a2edb8547b1ff48063cec2909eb4b9", "filename": "src/libserialize/base64.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibserialize%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibserialize%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fbase64.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -263,6 +263,7 @@ impl<'a> FromBase64 for &'a str {\n #[cfg(test)]\n mod tests {\n     extern crate test;\n+    extern crate rand;\n     use self::test::BenchHarness;\n     use base64::{Config, FromBase64, ToBase64, STANDARD, URL_SAFE};\n \n@@ -335,7 +336,7 @@ mod tests {\n \n     #[test]\n     fn test_base64_random() {\n-        use std::rand::{task_rng, random, Rng};\n+        use self::rand::{task_rng, random, Rng};\n         use std::vec;\n \n         for _ in range(0, 1000) {"}, {"sha": "d6f7f58f01c84b966fc1249e52590b94a9497579", "filename": "src/libstd/io/test.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibstd%2Fio%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibstd%2Fio%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ftest.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -12,10 +12,9 @@\n \n #[macro_escape];\n \n+use libc;\n use os;\n use prelude::*;\n-use rand;\n-use rand::Rng;\n use std::io::net::ip::*;\n use sync::atomics::{AtomicUint, INIT_ATOMIC_UINT, Relaxed};\n \n@@ -65,10 +64,18 @@ pub fn next_test_port() -> u16 {\n \n /// Get a temporary path which could be the location of a unix socket\n pub fn next_test_unix() -> Path {\n+    static mut COUNT: AtomicUint = INIT_ATOMIC_UINT;\n+    // base port and pid are an attempt to be unique between multiple\n+    // test-runners of different configurations running on one\n+    // buildbot, the count is to be unique within this executable.\n+    let string = format!(\"rust-test-unix-path-{}-{}-{}\",\n+                         base_port(),\n+                         unsafe {libc::getpid()},\n+                         unsafe {COUNT.fetch_add(1, Relaxed)});\n     if cfg!(unix) {\n-        os::tmpdir().join(rand::task_rng().gen_ascii_str(20))\n+        os::tmpdir().join(string)\n     } else {\n-        Path::new(r\"\\\\.\\pipe\\\" + rand::task_rng().gen_ascii_str(20))\n+        Path::new(r\"\\\\.\\pipe\\\" + string)\n     }\n }\n "}, {"sha": "a873eccfb038a756737a9af9a695c09287953b96", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -73,7 +73,8 @@\n #[cfg(test)] extern crate native;\n #[cfg(test)] extern crate green;\n \n-// Make extra accessible for benchmarking\n+// Make extra and rand accessible for benchmarking/testcases\n+#[cfg(test)] extern crate rand;\n #[cfg(test)] extern crate extra = \"extra\";\n \n // Make std testable by not duplicating lang items. See #2912\n@@ -173,7 +174,6 @@ pub mod c_str;\n pub mod os;\n pub mod io;\n pub mod path;\n-pub mod rand;\n pub mod cast;\n pub mod fmt;\n pub mod cleanup;"}, {"sha": "e529daaa500d6242923fb3b577af32f6332d5440", "filename": "src/libstd/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -1409,7 +1409,7 @@ mod tests {\n     }\n \n     fn make_rand_name() -> ~str {\n-        let mut rng = rand::rng();\n+        let mut rng = rand::task_rng();\n         let n = ~\"TEST\" + rng.gen_ascii_str(10u);\n         assert!(getenv(n).is_none());\n         n"}, {"sha": "b50d527e3f596c8f0e7ec16c3f28257ff743f4d8", "filename": "src/libsync/arc.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibsync%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibsync%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Farc.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -18,23 +18,27 @@\n  * With simple pipes, without Arc, a copy would have to be made for each task.\n  *\n  * ```rust\n+ * extern crate sync;\n+ * extern crate rand;\n  * use sync::Arc;\n- * use std::{rand, vec};\n+ * use std::vec;\n  *\n- * let numbers = vec::from_fn(100, |i| (i as f32) * rand::random());\n- * let shared_numbers = Arc::new(numbers);\n+ * fn main() {\n+ *     let numbers = vec::from_fn(100, |i| (i as f32) * rand::random());\n+ *     let shared_numbers = Arc::new(numbers);\n  *\n- *   for _ in range(0, 10) {\n- *       let (port, chan) = Chan::new();\n- *       chan.send(shared_numbers.clone());\n+ *     for _ in range(0, 10) {\n+ *         let (port, chan) = Chan::new();\n+ *         chan.send(shared_numbers.clone());\n  *\n- *       spawn(proc() {\n- *           let shared_numbers = port.recv();\n- *           let local_numbers = shared_numbers.get();\n+ *         spawn(proc() {\n+ *             let shared_numbers = port.recv();\n+ *             let local_numbers = shared_numbers.get();\n  *\n- *           // Work with the local numbers\n- *       });\n- *   }\n+ *             // Work with the local numbers\n+ *         });\n+ *     }\n+ * }\n  * ```\n  */\n "}, {"sha": "bc314bc204bec9e08046890ac68722bda271af2f", "filename": "src/libsyntax/ext/deriving/generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -216,7 +216,7 @@ pub struct TraitDef<'a> {\n pub struct MethodDef<'a> {\n     /// name of the method\n     name: &'a str,\n-    /// List of generics, e.g. `R: std::rand::Rng`\n+    /// List of generics, e.g. `R: rand::Rng`\n     generics: LifetimeBounds<'a>,\n \n     /// Whether there is a self argument (outer Option) i.e. whether"}, {"sha": "2d16c87b78b1972de4f0d9dd0bb7d4a031f8e1dd", "filename": "src/libsyntax/ext/deriving/rand.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -26,7 +26,7 @@ pub fn expand_deriving_rand(cx: &mut ExtCtxt,\n     let trait_def = TraitDef {\n         span: span,\n         attributes: Vec::new(),\n-        path: Path::new(vec!(\"std\", \"rand\", \"Rand\")),\n+        path: Path::new(vec!(\"rand\", \"Rand\")),\n         additional_bounds: Vec::new(),\n         generics: LifetimeBounds::empty(),\n         methods: vec!(\n@@ -35,7 +35,7 @@ pub fn expand_deriving_rand(cx: &mut ExtCtxt,\n                 generics: LifetimeBounds {\n                     lifetimes: Vec::new(),\n                     bounds: vec!((\"R\",\n-                               vec!( Path::new(vec!(\"std\", \"rand\", \"Rng\")) )))\n+                               vec!( Path::new(vec!(\"rand\", \"Rng\")) )))\n                 },\n                 explicit_self: None,\n                 args: vec!(\n@@ -58,7 +58,6 @@ fn rand_substructure(cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure)\n         _ => cx.bug(\"Incorrect number of arguments to `rand` in `deriving(Rand)`\")\n     };\n     let rand_ident = vec!(\n-        cx.ident_of(\"std\"),\n         cx.ident_of(\"rand\"),\n         cx.ident_of(\"Rand\"),\n         cx.ident_of(\"rand\")\n@@ -89,7 +88,7 @@ fn rand_substructure(cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure)\n                                         Vec::new());\n             let rand_name = cx.expr_path(rand_name);\n \n-            // ::std::rand::Rand::rand(rng)\n+            // ::rand::Rand::rand(rng)\n             let rv_call = cx.expr_call(trait_span,\n                                        rand_name,\n                                        vec!( *rng.get(0) ));"}, {"sha": "cd52ff4b0ac71ac328ffadc0a10a140c489591f8", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -670,7 +670,7 @@ pub fn fresh_name(src: &ast::Ident) -> Name {\n     // following: debug version. Could work in final except that it's incompatible with\n     // good error messages and uses of struct names in ambiguous could-be-binding\n     // locations. Also definitely destroys the guarantee given above about ptr_eq.\n-    /*let num = rand::rng().gen_uint_range(0,0xffff);\n+    /*let num = rand::task_rng().gen_uint_range(0,0xffff);\n     gensym(format!(\"{}_{}\",ident_to_str(src),num))*/\n }\n "}, {"sha": "aa17cd468094809a9a658e82220abf5890e9083a", "filename": "src/libuuid/lib.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibuuid%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Flibuuid%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibuuid%2Flib.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -62,6 +62,8 @@ Examples of string representations:\n // test harness access\n #[cfg(test)]\n extern crate test;\n+\n+extern crate rand;\n extern crate serialize;\n \n use std::cast::{transmute,transmute_copy};\n@@ -71,11 +73,11 @@ use std::fmt;\n use std::from_str::FromStr;\n use std::hash::{Hash, sip};\n use std::num::FromStrRadix;\n-use std::rand::Rng;\n-use std::rand;\n use std::str;\n use std::vec;\n \n+use rand::Rng;\n+\n use serialize::{Encoder, Encodable, Decoder, Decodable};\n \n /// A 128-bit (16 byte) buffer containing the ID\n@@ -519,12 +521,12 @@ impl rand::Rand for Uuid {\n #[cfg(test)]\n mod test {\n     extern crate collections;\n+    extern crate rand;\n \n     use super::{Uuid, VariantMicrosoft, VariantNCS, VariantRFC4122,\n                 Version1Mac, Version2Dce, Version3Md5, Version4Random,\n                 Version5Sha1};\n     use std::str;\n-    use std::rand;\n     use std::io::MemWriter;\n \n     #[test]\n@@ -778,7 +780,7 @@ mod test {\n \n     #[test]\n     fn test_rand_rand() {\n-        let mut rng = rand::rng();\n+        let mut rng = rand::task_rng();\n         let u: ~Uuid = rand::Rand::rand(&mut rng);\n         let ub = u.as_bytes();\n "}, {"sha": "8ab8636aa3a28fca32546b72dc4514e1643061f3", "filename": "src/rt/rust_builtin.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Frt%2Frust_builtin.c", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Frt%2Frust_builtin.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.c?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -410,7 +410,7 @@ rust_win32_rand_acquire(HCRYPTPROV* phProv) {\n     win32_require\n         (_T(\"CryptAcquireContext\"),\n          // changes to the parameters here should be reflected in the docs of\n-         // std::rand::os::OSRng\n+         // rand::os::OSRng\n          CryptAcquireContext(phProv, NULL, NULL, PROV_RSA_FULL,\n                              CRYPT_VERIFYCONTEXT|CRYPT_SILENT));\n "}, {"sha": "fcea5222e108b9bb4a717d0b7ec16d262cc1189a", "filename": "src/test/bench/core-map.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fbench%2Fcore-map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fbench%2Fcore-map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-map.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -9,11 +9,12 @@\n // except according to those terms.\n \n extern crate collections;\n+extern crate rand;\n extern crate time;\n \n use collections::{TrieMap, TreeMap, HashMap, HashSet};\n use std::os;\n-use std::rand::{Rng, IsaacRng, SeedableRng};\n+use rand::{Rng, IsaacRng, SeedableRng};\n use std::uint;\n use std::vec;\n "}, {"sha": "96f3c6814ab931f6170e1a4b77fb29cd606c8723", "filename": "src/test/bench/core-set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fbench%2Fcore-set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fbench%2Fcore-set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-set.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -11,13 +11,13 @@\n // except according to those terms.\n \n extern crate collections;\n+extern crate rand;\n extern crate time;\n \n use collections::bitv::BitvSet;\n use collections::TreeSet;\n use collections::HashSet;\n use std::os;\n-use std::rand;\n use std::uint;\n \n struct Results {"}, {"sha": "120caa53293a16701fad4e1c21026e310abf7204", "filename": "src/test/bench/core-std.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fbench%2Fcore-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fbench%2Fcore-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-std.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -12,13 +12,13 @@\n \n #[feature(macro_rules)];\n \n+extern crate rand;\n extern crate time;\n \n use time::precise_time_s;\n+use rand::Rng;\n use std::mem::swap;\n use std::os;\n-use std::rand::Rng;\n-use std::rand;\n use std::str;\n use std::vec;\n use std::io::File;\n@@ -83,7 +83,7 @@ fn read_line() {\n }\n \n fn vec_plus() {\n-    let mut r = rand::rng();\n+    let mut r = rand::task_rng();\n \n     let mut v = ~[];\n     let mut i = 0;\n@@ -99,7 +99,7 @@ fn vec_plus() {\n }\n \n fn vec_append() {\n-    let mut r = rand::rng();\n+    let mut r = rand::task_rng();\n \n     let mut v = ~[];\n     let mut i = 0;\n@@ -116,7 +116,7 @@ fn vec_append() {\n }\n \n fn vec_push_all() {\n-    let mut r = rand::rng();\n+    let mut r = rand::task_rng();\n \n     let mut v = ~[];\n     for i in range(0u, 1500) {"}, {"sha": "4954f083b36949f494b961d5c5c75e1b2b391203", "filename": "src/test/bench/noise.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fbench%2Fnoise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fbench%2Fnoise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fnoise.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -11,8 +11,10 @@\n // Multi-language Perlin noise benchmark.\n // See https://github.com/nsf/pnoise for timings and alternative implementations.\n \n+extern crate rand;\n+\n use std::f32::consts::PI;\n-use std::rand::{Rng, StdRng};\n+use rand::{Rng, StdRng};\n \n struct Vec2 {\n     x: f32,"}, {"sha": "1ec5dfa2da9f20a77268dea5abd45565ebfde283", "filename": "src/test/compile-fail/box-static-bound.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fbox-static-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fbox-static-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbox-static-bound.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -19,4 +19,3 @@ fn g<T:'static>(x: T) -> @T {\n }\n \n fn main() {}\n-"}, {"sha": "6f3ce6abe1a765c332a167f3d8633baf961fbedc", "filename": "src/test/compile-fail/deriving-span-Clone-enum-struct-variant.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-enum-struct-variant.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -12,6 +12,7 @@\n \n #[feature(struct_variant)];\n extern crate extra;\n+extern crate rand;\n \n \n struct Error;"}, {"sha": "c138c259a0f123b79a578e7bbd8809d85d4b07ad", "filename": "src/test/compile-fail/deriving-span-Clone-enum.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-enum.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -12,6 +12,7 @@\n \n #[feature(struct_variant)];\n extern crate extra;\n+extern crate rand;\n \n \n struct Error;"}, {"sha": "9226c4a79603bc3d09dd5f1fad8fb54af2742414", "filename": "src/test/compile-fail/deriving-span-Clone-struct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-struct.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -12,6 +12,7 @@\n \n #[feature(struct_variant)];\n extern crate extra;\n+extern crate rand;\n \n \n struct Error;"}, {"sha": "e49bd45f4d0751f622f29a388069c784aba872ad", "filename": "src/test/compile-fail/deriving-span-Clone-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-tuple-struct.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -12,6 +12,7 @@\n \n #[feature(struct_variant)];\n extern crate extra;\n+extern crate rand;\n \n \n struct Error;"}, {"sha": "5da4ae5ca4242d3be630df4f68031680ff6682ef", "filename": "src/test/compile-fail/deriving-span-Default-struct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-Default-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-Default-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Default-struct.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -12,6 +12,7 @@\n \n #[feature(struct_variant)];\n extern crate extra;\n+extern crate rand;\n \n \n struct Error;"}, {"sha": "3f44ea926b5c94a78ccd01c00362f0627a3e9468", "filename": "src/test/compile-fail/deriving-span-Default-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-Default-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-Default-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Default-tuple-struct.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -12,6 +12,7 @@\n \n #[feature(struct_variant)];\n extern crate extra;\n+extern crate rand;\n \n \n struct Error;"}, {"sha": "482954b39f7f2f72496f20b32e1d41f52f51b5cb", "filename": "src/test/compile-fail/deriving-span-Eq-enum-struct-variant.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-Eq-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-Eq-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Eq-enum-struct-variant.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -12,6 +12,7 @@\n \n #[feature(struct_variant)];\n extern crate extra;\n+extern crate rand;\n \n \n struct Error;"}, {"sha": "5221869a2850323416c60f8153deababd8710560", "filename": "src/test/compile-fail/deriving-span-Eq-enum.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-Eq-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-Eq-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Eq-enum.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -12,6 +12,7 @@\n \n #[feature(struct_variant)];\n extern crate extra;\n+extern crate rand;\n \n \n struct Error;"}, {"sha": "a063628993e5ace4e3507ce41a552c500b376d19", "filename": "src/test/compile-fail/deriving-span-Eq-struct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-Eq-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-Eq-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Eq-struct.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -12,6 +12,7 @@\n \n #[feature(struct_variant)];\n extern crate extra;\n+extern crate rand;\n \n \n struct Error;"}, {"sha": "efa92c0a29a14c08b21276e8934ff7f4fb007893", "filename": "src/test/compile-fail/deriving-span-Eq-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-Eq-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-Eq-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Eq-tuple-struct.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -12,6 +12,7 @@\n \n #[feature(struct_variant)];\n extern crate extra;\n+extern crate rand;\n \n \n struct Error;"}, {"sha": "b08f7305cfc48205f9b324deed5f2dc80328ea80", "filename": "src/test/compile-fail/deriving-span-Hash-enum-struct-variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-Hash-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-Hash-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Hash-enum-struct-variant.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -12,8 +12,8 @@\n \n #[feature(struct_variant)];\n extern crate extra;\n+extern crate rand;\n \n-use std::hash::Hash;\n \n struct Error;\n "}, {"sha": "6fe0094c8d21090f5db7754c3c6c44e425d42f2c", "filename": "src/test/compile-fail/deriving-span-Hash-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-Hash-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-Hash-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Hash-enum.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -12,8 +12,8 @@\n \n #[feature(struct_variant)];\n extern crate extra;\n+extern crate rand;\n \n-use std::hash::Hash;\n \n struct Error;\n "}, {"sha": "0ae28d084ec04f2ca0e9cd57d71d92bf2f157885", "filename": "src/test/compile-fail/deriving-span-Hash-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-Hash-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-Hash-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Hash-struct.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -12,8 +12,8 @@\n \n #[feature(struct_variant)];\n extern crate extra;\n+extern crate rand;\n \n-use std::hash::Hash;\n \n struct Error;\n "}, {"sha": "1b69abb3e16e7cf01fe28023d3aa8ec1ffc52cb8", "filename": "src/test/compile-fail/deriving-span-Hash-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-Hash-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-Hash-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Hash-tuple-struct.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -12,8 +12,8 @@\n \n #[feature(struct_variant)];\n extern crate extra;\n+extern crate rand;\n \n-use std::hash::Hash;\n \n struct Error;\n "}, {"sha": "edfc949970f2ed92f551cb918f958b17c741c7d5", "filename": "src/test/compile-fail/deriving-span-Ord-enum-struct-variant.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-Ord-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-Ord-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Ord-enum-struct-variant.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -12,6 +12,7 @@\n \n #[feature(struct_variant)];\n extern crate extra;\n+extern crate rand;\n \n #[deriving(Eq)]\n struct Error;"}, {"sha": "13da4454c3e276170b0370a278190b574c10a5be", "filename": "src/test/compile-fail/deriving-span-Ord-enum.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-Ord-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-Ord-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Ord-enum.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -12,6 +12,7 @@\n \n #[feature(struct_variant)];\n extern crate extra;\n+extern crate rand;\n \n #[deriving(Eq)]\n struct Error;"}, {"sha": "bab38983dfb1916ebd440eb77d484adc2549461b", "filename": "src/test/compile-fail/deriving-span-Ord-struct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-Ord-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-Ord-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Ord-struct.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -12,6 +12,7 @@\n \n #[feature(struct_variant)];\n extern crate extra;\n+extern crate rand;\n \n #[deriving(Eq)]\n struct Error;"}, {"sha": "bb211d7781e425171f385f06a1301f22280a3239", "filename": "src/test/compile-fail/deriving-span-Ord-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-Ord-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-Ord-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Ord-tuple-struct.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -12,6 +12,7 @@\n \n #[feature(struct_variant)];\n extern crate extra;\n+extern crate rand;\n \n #[deriving(Eq)]\n struct Error;"}, {"sha": "9338e23fbb475c1f1cc1339ec8e8a5bd3ab6b6e4", "filename": "src/test/compile-fail/deriving-span-Rand-enum-struct-variant.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-enum-struct-variant.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -12,6 +12,7 @@\n \n #[feature(struct_variant)];\n extern crate extra;\n+extern crate rand;\n \n \n struct Error;"}, {"sha": "1a978176d7983967547282ae325f3118b062415b", "filename": "src/test/compile-fail/deriving-span-Rand-enum.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-enum.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -12,6 +12,7 @@\n \n #[feature(struct_variant)];\n extern crate extra;\n+extern crate rand;\n \n \n struct Error;"}, {"sha": "7f62850398071527df391711cacd4d23f91b2cca", "filename": "src/test/compile-fail/deriving-span-Rand-struct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-struct.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -12,6 +12,7 @@\n \n #[feature(struct_variant)];\n extern crate extra;\n+extern crate rand;\n \n \n struct Error;"}, {"sha": "9b11c02784654c4db82d00699675d0901cf9f1da", "filename": "src/test/compile-fail/deriving-span-Rand-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-tuple-struct.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -12,6 +12,7 @@\n \n #[feature(struct_variant)];\n extern crate extra;\n+extern crate rand;\n \n \n struct Error;"}, {"sha": "972f60bf2c9ab363d8dcbf81fb38c0a6ad0d1bfb", "filename": "src/test/compile-fail/deriving-span-Show-enum-struct-variant.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-enum-struct-variant.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -12,6 +12,7 @@\n \n #[feature(struct_variant)];\n extern crate extra;\n+extern crate rand;\n \n \n struct Error;"}, {"sha": "ba3fd1766b2f8841471d8cd5ccfc47269bacd1e5", "filename": "src/test/compile-fail/deriving-span-Show-enum.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-enum.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -12,6 +12,7 @@\n \n #[feature(struct_variant)];\n extern crate extra;\n+extern crate rand;\n \n \n struct Error;"}, {"sha": "1e38c9dda5bd7a56fae2b26f0ce50de58c2bd7f0", "filename": "src/test/compile-fail/deriving-span-Show-struct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-struct.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -12,6 +12,7 @@\n \n #[feature(struct_variant)];\n extern crate extra;\n+extern crate rand;\n \n \n struct Error;"}, {"sha": "7347b324a235b61992cb382ecf4c707620e7cba1", "filename": "src/test/compile-fail/deriving-span-Show-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-tuple-struct.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -12,6 +12,7 @@\n \n #[feature(struct_variant)];\n extern crate extra;\n+extern crate rand;\n \n \n struct Error;"}, {"sha": "4d362678283d3590bd344e7e734b4d05d97d8df9", "filename": "src/test/compile-fail/deriving-span-TotalEq-enum-struct-variant.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-enum-struct-variant.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -12,6 +12,7 @@\n \n #[feature(struct_variant)];\n extern crate extra;\n+extern crate rand;\n \n #[deriving(Eq)]\n struct Error;"}, {"sha": "66f84612f81150d674c4a13c80d1c963c7a900f3", "filename": "src/test/compile-fail/deriving-span-TotalEq-enum.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-enum.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -12,6 +12,7 @@\n \n #[feature(struct_variant)];\n extern crate extra;\n+extern crate rand;\n \n #[deriving(Eq)]\n struct Error;"}, {"sha": "ba29180e5e68ba4add28c36f729950fdaeb7d39a", "filename": "src/test/compile-fail/deriving-span-TotalEq-struct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-struct.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -12,6 +12,7 @@\n \n #[feature(struct_variant)];\n extern crate extra;\n+extern crate rand;\n \n #[deriving(Eq)]\n struct Error;"}, {"sha": "6dbd1e3cee94645d20a23db10b8510a3e33b257e", "filename": "src/test/compile-fail/deriving-span-TotalEq-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-tuple-struct.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -12,6 +12,7 @@\n \n #[feature(struct_variant)];\n extern crate extra;\n+extern crate rand;\n \n #[deriving(Eq)]\n struct Error;"}, {"sha": "54f7667be30a73e2a39878587ae3cbb6641902ec", "filename": "src/test/compile-fail/deriving-span-TotalOrd-enum-struct-variant.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-enum-struct-variant.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -12,6 +12,7 @@\n \n #[feature(struct_variant)];\n extern crate extra;\n+extern crate rand;\n \n #[deriving(Eq, Ord, TotalEq)]\n struct Error;"}, {"sha": "6f51522d1a60f69627a1c0c0cd5d5f87bf1fe0a3", "filename": "src/test/compile-fail/deriving-span-TotalOrd-enum.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-enum.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -12,6 +12,7 @@\n \n #[feature(struct_variant)];\n extern crate extra;\n+extern crate rand;\n \n #[deriving(Eq, Ord, TotalEq)]\n struct Error;"}, {"sha": "b659e4cee220110e33f387e9c5c420a4e6a2ccd0", "filename": "src/test/compile-fail/deriving-span-TotalOrd-struct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-struct.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -12,6 +12,7 @@\n \n #[feature(struct_variant)];\n extern crate extra;\n+extern crate rand;\n \n #[deriving(Eq, Ord, TotalEq)]\n struct Error;"}, {"sha": "d4f30946d8ec8ce35bbccfa219bafcfb158d5a5a", "filename": "src/test/compile-fail/deriving-span-TotalOrd-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-tuple-struct.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -12,6 +12,7 @@\n \n #[feature(struct_variant)];\n extern crate extra;\n+extern crate rand;\n \n #[deriving(Eq, Ord, TotalEq)]\n struct Error;"}, {"sha": "2e00c92f469e6a65c651cdd91c9c5b0c1841632a", "filename": "src/test/compile-fail/deriving-span-Zero-struct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-Zero-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-Zero-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Zero-struct.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -12,6 +12,7 @@\n \n #[feature(struct_variant)];\n extern crate extra;\n+extern crate rand;\n \n \n struct Error;"}, {"sha": "9487c6ced629fb6fe9c689d241c80ea7c17dc913", "filename": "src/test/compile-fail/deriving-span-Zero-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-Zero-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Fderiving-span-Zero-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Zero-tuple-struct.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -12,6 +12,7 @@\n \n #[feature(struct_variant)];\n extern crate extra;\n+extern crate rand;\n \n \n struct Error;"}, {"sha": "8b9d4de9f04c1d3194a439c1bbcd43e61150aef1", "filename": "src/test/compile-fail/task-rng-isnt-sendable.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Ftask-rng-isnt-sendable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Fcompile-fail%2Ftask-rng-isnt-sendable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftask-rng-isnt-sendable.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -10,9 +10,11 @@\n \n // ensure that the TaskRng isn't/doesn't become accidentally sendable.\n \n+extern crate rand;\n+\n fn test_send<S: Send>() {}\n \n pub fn main() {\n-    test_send::<::std::rand::TaskRng>();\n-    //~^ ERROR: incompatible type `std::rand::TaskRng`, which does not fulfill `Send`\n+    test_send::<::rand::TaskRng>();\n+    //~^ ERROR: incompatible type `rand::TaskRng`, which does not fulfill `Send`\n }"}, {"sha": "45bb29f617fdb9b432ebe06fc1de4973f92a7d8b", "filename": "src/test/run-make/unicode-input/multiple_files.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Frun-make%2Funicode-input%2Fmultiple_files.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Frun-make%2Funicode-input%2Fmultiple_files.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Funicode-input%2Fmultiple_files.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -8,8 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate rand;\n+use rand::{task_rng, Rng};\n+\n use std::{char, os, str};\n-use std::rand::{task_rng, Rng};\n use std::io::{File, Process};\n \n // creates unicode_input_multiple_files_{main,chars}.rs, where the"}, {"sha": "1ae6838be5bccc38c1831c28ab7be75756e32880", "filename": "src/test/run-make/unicode-input/span_length.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Frun-make%2Funicode-input%2Fspan_length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Frun-make%2Funicode-input%2Fspan_length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Funicode-input%2Fspan_length.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -8,8 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate rand;\n+use rand::{task_rng, Rng};\n+\n use std::{char, os, str};\n-use std::rand::{task_rng, Rng};\n use std::io::{File, Process};\n \n // creates a file with `fn main() { <random ident> }` and checks the"}, {"sha": "75567efa4703d5f768d04d2d8cb8f95d6aa2a689", "filename": "src/test/run-pass/deriving-encodable-decodable.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -16,10 +16,11 @@\n \n #[feature(struct_variant, managed_boxes)];\n \n+extern crate rand;\n extern crate serialize;\n \n use std::io::MemWriter;\n-use std::rand::{random, Rand};\n+use rand::{random, Rand};\n use serialize::{Encodable, Decodable};\n use serialize::ebml;\n use serialize::ebml::writer::Encoder;"}, {"sha": "a174b2c7ab1a448bf1ad41229f41bdcc8a83bab5", "filename": "src/test/run-pass/deriving-global.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Frun-pass%2Fderiving-global.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Frun-pass%2Fderiving-global.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-global.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -22,6 +22,8 @@\n // except according to those terms.\n \n extern crate serialize; // {En,De}codable\n+extern crate rand; // Rand\n+\n mod submod {\n     // if any of these are implemented without global calls for any\n     // function calls, then being in a submodule will (correctly)"}, {"sha": "c43d8a26fd9c4bbf5a7b01adf5ea3637ca181991", "filename": "src/test/run-pass/deriving-rand.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Frun-pass%2Fderiving-rand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Frun-pass%2Fderiving-rand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-rand.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -9,9 +9,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-fast #7103 `extern crate` does not work on check-fast\n+\n #[feature(struct_variant)];\n \n-use std::rand;\n+extern crate rand;\n \n #[deriving(Rand)]\n struct A;"}, {"sha": "c09b90ba6fb8b13a72d138b85ed69bd3e1c0a623", "filename": "src/test/run-pass/morestack6.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Frun-pass%2Fmorestack6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Frun-pass%2Fmorestack6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmorestack6.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -13,7 +13,8 @@\n // This test attempts to force the dynamic linker to resolve\n // external symbols as close to the red zone as possible.\n \n-use std::rand;\n+extern crate rand;\n+\n use std::task;\n \n mod rustrt {\n@@ -59,14 +60,14 @@ fn runtest2(f: extern fn(), frame_backoff: u32, last_stk: *u8) -> u32 {\n }\n \n pub fn main() {\n-    use std::rand::Rng;\n+    use rand::Rng;\n     let fns = ~[\n         calllink01,\n         calllink02,\n         calllink08,\n         calllink10\n     ];\n-    let mut rng = rand::rng();\n+    let mut rng = rand::task_rng();\n     for f in fns.iter() {\n         let f = *f;\n         let sz = rng.gen::<u32>() % 256u32 + 256u32;"}, {"sha": "e307ae36f96c1da6781cf399a3c9e276d37572f5", "filename": "src/test/run-pass/vector-sort-failure-safe.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Frun-pass%2Fvector-sort-failure-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa3b888568661eabd9994ad902eff8d44d59261/src%2Ftest%2Frun-pass%2Fvector-sort-failure-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvector-sort-failure-safe.rs?ref=0aa3b888568661eabd9994ad902eff8d44d59261", "patch": "@@ -8,8 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-fast #7103 `extern crate` does not work on check-fast\n+extern crate rand;\n+\n use std::task;\n-use std::rand::{task_rng, Rng};\n+use rand::{task_rng, Rng};\n \n static MAX_LEN: uint = 20;\n static mut drop_counts: [uint, .. MAX_LEN] = [0, .. MAX_LEN];"}]}