{"sha": "902b419b216750303a965fe4e3b4185e55c1bbf2", "node_id": "C_kwDOAAsO6NoAKDkwMmI0MTliMjE2NzUwMzAzYTk2NWZlNGUzYjQxODVlNTVjMWJiZjI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-04-17T06:09:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-17T06:09:41Z"}, "message": "Rollup merge of #110421 - jsoref:spelling-librustdoc, r=notriddle\n\nSpelling librustdoc\n\nThis is split from https://github.com/rust-lang/rust/pull/110392\n\nThere's one change to src/tools/rustdoc-gui/tester.js which feels like a reasonable thing to piggy-back here.", "tree": {"sha": "5b63b0f5a61e5892e2ae26e0af378cfd8544b157", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b63b0f5a61e5892e2ae26e0af378cfd8544b157"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/902b419b216750303a965fe4e3b4185e55c1bbf2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkPOKlCRBK7hj4Ov3rIwAAbIUIALIeDgP2sF18g9vssb+O6u4M\nrFcgGhbrL7flkj5d4JLCF2s9kWL7+DuXo4GSHNGFRx2PV4Rs0g2XNhqbcFfCDXpR\nTsvbc00k0s8zlK1/SKnuTEgahYVlwj5hFleJ0jx0QO2AbD62SEe3zHXbn5lGZnGD\nbINxz3suiuprYYQVM2hl8XRmBVPM0WMTu5U/599hdwRJyXfopD14xehoe3WCZhZw\npAUCJ+nIe6YaCYfIkQ31bik4vWzi4KZuFotFlmj7h/kfxJcTs8zvNwlB4zajlPhU\nRi+2sD8LwNXtPDT2KhTNWSvoNqTr27Ex8a7cM9Y0x9aT9Yds63EjTD3AxGzZRM8=\n=Oiya\n-----END PGP SIGNATURE-----\n", "payload": "tree 5b63b0f5a61e5892e2ae26e0af378cfd8544b157\nparent 1795bf82229ee929203d9548edf13adf514429d4\nparent bb2f23c34f805e3df0baec1ac9b9cd8669b5f4be\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1681711781 +0200\ncommitter GitHub <noreply@github.com> 1681711781 +0200\n\nRollup merge of #110421 - jsoref:spelling-librustdoc, r=notriddle\n\nSpelling librustdoc\n\nThis is split from https://github.com/rust-lang/rust/pull/110392\n\nThere's one change to src/tools/rustdoc-gui/tester.js which feels like a reasonable thing to piggy-back here.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/902b419b216750303a965fe4e3b4185e55c1bbf2", "html_url": "https://github.com/rust-lang/rust/commit/902b419b216750303a965fe4e3b4185e55c1bbf2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/902b419b216750303a965fe4e3b4185e55c1bbf2/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1795bf82229ee929203d9548edf13adf514429d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/1795bf82229ee929203d9548edf13adf514429d4", "html_url": "https://github.com/rust-lang/rust/commit/1795bf82229ee929203d9548edf13adf514429d4"}, {"sha": "bb2f23c34f805e3df0baec1ac9b9cd8669b5f4be", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb2f23c34f805e3df0baec1ac9b9cd8669b5f4be", "html_url": "https://github.com/rust-lang/rust/commit/bb2f23c34f805e3df0baec1ac9b9cd8669b5f4be"}], "stats": {"total": 56, "additions": 28, "deletions": 28}, "files": [{"sha": "3f6a5d6d9017a6d348710de6e5017157b1ad98eb", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/902b419b216750303a965fe4e3b4185e55c1bbf2/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/902b419b216750303a965fe4e3b4185e55c1bbf2/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=902b419b216750303a965fe4e3b4185e55c1bbf2", "patch": "@@ -528,7 +528,7 @@ pub(crate) fn build_impl(\n             items: trait_items,\n             polarity,\n             kind: if utils::has_doc_flag(tcx, did, sym::fake_variadic) {\n-                ImplKind::FakeVaradic\n+                ImplKind::FakeVariadic\n             } else {\n                 ImplKind::Normal\n             },"}, {"sha": "04379c2bca97dddd17e4c4b752b89d42951773ba", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/902b419b216750303a965fe4e3b4185e55c1bbf2/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/902b419b216750303a965fe4e3b4185e55c1bbf2/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=902b419b216750303a965fe4e3b4185e55c1bbf2", "patch": "@@ -2356,7 +2356,7 @@ fn clean_impl<'tcx>(\n             items,\n             polarity: tcx.impl_polarity(def_id),\n             kind: if utils::has_doc_flag(tcx, def_id.to_def_id(), sym::fake_variadic) {\n-                ImplKind::FakeVaradic\n+                ImplKind::FakeVariadic\n             } else {\n                 ImplKind::Normal\n             },"}, {"sha": "03129b972f2ec25d2eb3befbd724bfc2a49fc6b2", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/902b419b216750303a965fe4e3b4185e55c1bbf2/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/902b419b216750303a965fe4e3b4185e55c1bbf2/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=902b419b216750303a965fe4e3b4185e55c1bbf2", "patch": "@@ -156,7 +156,7 @@ impl ExternalCrate {\n     }\n \n     /// Attempts to find where an external crate is located, given that we're\n-    /// rendering in to the specified source destination.\n+    /// rendering into the specified source destination.\n     pub(crate) fn location(\n         &self,\n         extern_url: Option<&str>,\n@@ -751,7 +751,7 @@ pub(crate) enum ItemKind {\n     PrimitiveItem(PrimitiveType),\n     /// A required associated constant in a trait declaration.\n     TyAssocConstItem(Type),\n-    /// An associated associated constant in a trait impl or a provided one in a trait declaration.\n+    /// An associated constant in a trait impl or a provided one in a trait declaration.\n     AssocConstItem(Type, ConstantKind),\n     /// A required associated type in a trait declaration.\n     ///\n@@ -2305,7 +2305,7 @@ impl Impl {\n pub(crate) enum ImplKind {\n     Normal,\n     Auto,\n-    FakeVaradic,\n+    FakeVariadic,\n     Blanket(Box<Type>),\n }\n \n@@ -2319,7 +2319,7 @@ impl ImplKind {\n     }\n \n     pub(crate) fn is_fake_variadic(&self) -> bool {\n-        matches!(self, ImplKind::FakeVaradic)\n+        matches!(self, ImplKind::FakeVariadic)\n     }\n \n     pub(crate) fn as_blanket_ty(&self) -> Option<&Type> {"}, {"sha": "b579e7f5ae9caa394f243f36b17ab97fd4d3b183", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/902b419b216750303a965fe4e3b4185e55c1bbf2/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/902b419b216750303a965fe4e3b4185e55c1bbf2/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=902b419b216750303a965fe4e3b4185e55c1bbf2", "patch": "@@ -491,7 +491,7 @@ impl Options {\n                 //   https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dataset\n                 //\n                 // The original key values we have are the same as the DOM storage API keys and the\n-                // command line options, so contain `-`.  Our Javascript needs to be able to look\n+                // command line options, so contain `-`.  Our JavaScript needs to be able to look\n                 // these values up both in `dataset` and in the storage API, so it needs to be able\n                 // to convert the names back and forth.  Despite doing this kebab-case to\n                 // StudlyCaps transformation automatically, the JS DOM API does not provide a"}, {"sha": "946c85a205f5a9104bcf3a5043fde37e6a65a3cd", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/902b419b216750303a965fe4e3b4185e55c1bbf2/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/902b419b216750303a965fe4e3b4185e55c1bbf2/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=902b419b216750303a965fe4e3b4185e55c1bbf2", "patch": "@@ -514,7 +514,7 @@ struct Classifier<'src> {\n \n impl<'src> Classifier<'src> {\n     /// Takes as argument the source code to HTML-ify, the rust edition to use and the source code\n-    /// file span which will be used later on by the `span_correspondance_map`.\n+    /// file span which will be used later on by the `span_correspondence_map`.\n     fn new(src: &str, file_span: Span, decoration_info: Option<DecorationInfo>) -> Classifier<'_> {\n         let tokens = PeekIter::new(TokenIter { src, cursor: Cursor::new(src) });\n         let decorations = decoration_info.map(Decorations::new);\n@@ -649,7 +649,7 @@ impl<'src> Classifier<'src> {\n     ///\n     /// `before` is the position of the given token in the `source` string and is used as \"lo\" byte\n     /// in case we want to try to generate a link for this token using the\n-    /// `span_correspondance_map`.\n+    /// `span_correspondence_map`.\n     fn advance(\n         &mut self,\n         token: TokenKind,\n@@ -895,7 +895,7 @@ fn exit_span(out: &mut impl Write, closing_tag: &str) {\n /// flexible.\n ///\n /// Note that if `context` is not `None` and that the given `klass` contains a `Span`, the function\n-/// will then try to find this `span` in the `span_correspondance_map`. If found, it'll then\n+/// will then try to find this `span` in the `span_correspondence_map`. If found, it'll then\n /// generate a link for this element (which corresponds to where its definition is located).\n fn string<T: Display>(\n     out: &mut impl Write,\n@@ -916,7 +916,7 @@ fn string<T: Display>(\n /// * If `klass` is `Some` but `klass.get_span()` is `None`, it writes the text wrapped in a\n ///   `<span>` with the provided `klass`.\n /// * If `klass` is `Some` and has a [`rustc_span::Span`], it then tries to generate a link (`<a>`\n-///   element) by retrieving the link information from the `span_correspondance_map` that was filled\n+///   element) by retrieving the link information from the `span_correspondence_map` that was filled\n ///   in `span_map.rs::collect_spans_and_sources`. If it cannot retrieve the information, then it's\n ///   the same as the second point (`klass` is `Some` but doesn't have a [`rustc_span::Span`]).\n fn string_without_closing_tag<T: Display>(\n@@ -963,7 +963,7 @@ fn string_without_closing_tag<T: Display>(\n \n     if let Some(href_context) = href_context {\n         if let Some(href) =\n-            href_context.context.shared.span_correspondance_map.get(&def_span).and_then(|href| {\n+            href_context.context.shared.span_correspondence_map.get(&def_span).and_then(|href| {\n                 let context = href_context.context;\n                 // FIXME: later on, it'd be nice to provide two links (if possible) for all items:\n                 // one to the documentation page and one to the source definition."}, {"sha": "4b0aee9c3add90f08a7629d050b500e7ad99a5b9", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/902b419b216750303a965fe4e3b4185e55c1bbf2/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/902b419b216750303a965fe4e3b4185e55c1bbf2/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=902b419b216750303a965fe4e3b4185e55c1bbf2", "patch": "@@ -1392,7 +1392,7 @@ static DEFAULT_ID_MAP: Lazy<FxHashMap<Cow<'static, str>, usize>> = Lazy::new(||\n \n fn init_id_map() -> FxHashMap<Cow<'static, str>, usize> {\n     let mut map = FxHashMap::default();\n-    // This is the list of IDs used in Javascript.\n+    // This is the list of IDs used in JavaScript.\n     map.insert(\"help\".into(), 1);\n     map.insert(\"settings\".into(), 1);\n     map.insert(\"not-displayed\".into(), 1);"}, {"sha": "a063c8c9f02ddf402147330eb72bf23843e2e066", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/902b419b216750303a965fe4e3b4185e55c1bbf2/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/902b419b216750303a965fe4e3b4185e55c1bbf2/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=902b419b216750303a965fe4e3b4185e55c1bbf2", "patch": "@@ -122,9 +122,9 @@ pub(crate) struct SharedContext<'tcx> {\n     /// the crate.\n     redirections: Option<RefCell<FxHashMap<String, String>>>,\n \n-    /// Correspondance map used to link types used in the source code pages to allow to click on\n+    /// Correspondence map used to link types used in the source code pages to allow to click on\n     /// links to jump to the type's definition.\n-    pub(crate) span_correspondance_map: FxHashMap<rustc_span::Span, LinkFromSrc>,\n+    pub(crate) span_correspondence_map: FxHashMap<rustc_span::Span, LinkFromSrc>,\n     /// The [`Cache`] used during rendering.\n     pub(crate) cache: Cache,\n \n@@ -531,7 +531,7 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             errors: receiver,\n             redirections: if generate_redirect_map { Some(Default::default()) } else { None },\n             show_type_layout,\n-            span_correspondance_map: matches,\n+            span_correspondence_map: matches,\n             cache,\n             call_locations,\n         };\n@@ -647,7 +647,7 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n                      </div>\\\n                      <noscript>\\\n                         <section>\\\n-                            You need to enable Javascript be able to update your settings.\\\n+                            You need to enable JavaScript be able to update your settings.\\\n                         </section>\\\n                      </noscript>\\\n                      <link rel=\\\"stylesheet\\\" \\\n@@ -709,7 +709,7 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n                      </div>\\\n                      <noscript>\\\n                         <section>\\\n-                            <p>You need to enable Javascript to use keyboard commands or search.</p>\\\n+                            <p>You need to enable JavaScript to use keyboard commands or search.</p>\\\n                             <p>For more information, browse the <a href=\\\"https://doc.rust-lang.org/rustdoc/\\\">rustdoc handbook</a>.</p>\\\n                         </section>\\\n                      </noscript>\","}, {"sha": "edd046ab7723361963cb74d1132a15756646920d", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/902b419b216750303a965fe4e3b4185e55c1bbf2/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/902b419b216750303a965fe4e3b4185e55c1bbf2/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=902b419b216750303a965fe4e3b4185e55c1bbf2", "patch": "@@ -665,7 +665,7 @@ impl FromWithTcx<clean::Impl> for Impl {\n         let clean::Impl { unsafety, generics, trait_, for_, items, polarity, kind } = impl_;\n         // FIXME: use something like ImplKind in JSON?\n         let (synthetic, blanket_impl) = match kind {\n-            clean::ImplKind::Normal | clean::ImplKind::FakeVaradic => (false, None),\n+            clean::ImplKind::Normal | clean::ImplKind::FakeVariadic => (false, None),\n             clean::ImplKind::Auto => (true, None),\n             clean::ImplKind::Blanket(ty) => (false, Some(*ty)),\n         };\n@@ -740,7 +740,7 @@ impl FromWithTcx<clean::Variant> for Variant {\n impl FromWithTcx<clean::Discriminant> for Discriminant {\n     fn from_tcx(disr: clean::Discriminant, tcx: TyCtxt<'_>) -> Self {\n         Discriminant {\n-            // expr is only none if going through the inlineing path, which gets\n+            // expr is only none if going through the inlining path, which gets\n             // `rustc_middle` types, not `rustc_hir`, but because JSON never inlines\n             // the expr is always some.\n             expr: disr.expr(tcx).unwrap(),"}, {"sha": "dfa99ffcb7c7d49b7d5f82b40d2cc0c8272c5bb3", "filename": "src/librustdoc/scrape_examples.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/902b419b216750303a965fe4e3b4185e55c1bbf2/src%2Flibrustdoc%2Fscrape_examples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/902b419b216750303a965fe4e3b4185e55c1bbf2/src%2Flibrustdoc%2Fscrape_examples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fscrape_examples.rs?ref=902b419b216750303a965fe4e3b4185e55c1bbf2", "patch": "@@ -286,7 +286,7 @@ pub(crate) fn run(\n         let (cx, _) = Context::init(krate, renderopts, cache, tcx).map_err(|e| e.to_string())?;\n \n         // Collect CrateIds corresponding to provided target crates\n-        // If two different versions of the crate in the dependency tree, then examples will be collcted from both.\n+        // If two different versions of the crate in the dependency tree, then examples will be collected from both.\n         let all_crates = tcx\n             .crates(())\n             .iter()"}, {"sha": "2a28c19c3fe75c9bbbf7f6a8ea4c45d46bc02eec", "filename": "src/librustdoc/theme/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/902b419b216750303a965fe4e3b4185e55c1bbf2/src%2Flibrustdoc%2Ftheme%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/902b419b216750303a965fe4e3b4185e55c1bbf2/src%2Flibrustdoc%2Ftheme%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftheme%2Ftests.rs?ref=902b419b216750303a965fe4e3b4185e55c1bbf2", "patch": "@@ -13,11 +13,11 @@ rule d\n // another line comment\n e {}\n \n-rule f/* a multine\n+rule f/* a multiline\n \n comment*/{}\n \n-rule g/* another multine\n+rule g/* another multiline\n \n comment*/h\n "}, {"sha": "692d5e3fcef90a61793afa703c0844a2071223e4", "filename": "src/tools/rustdoc-gui/tester.js", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/902b419b216750303a965fe4e3b4185e55c1bbf2/src%2Ftools%2Frustdoc-gui%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/902b419b216750303a965fe4e3b4185e55c1bbf2/src%2Ftools%2Frustdoc-gui%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-gui%2Ftester.js?ref=902b419b216750303a965fe4e3b4185e55c1bbf2", "patch": "@@ -42,7 +42,7 @@ function parseOptions(args) {\n         \"executable_path\": null,\n         \"no_sandbox\": false,\n     };\n-    const correspondances = {\n+    const correspondences = {\n         \"--doc-folder\": \"doc_folder\",\n         \"--tests-folder\": \"tests_folder\",\n         \"--debug\": \"debug\",\n@@ -73,7 +73,7 @@ function parseOptions(args) {\n                 }\n                 opts[\"jobs\"] = parseInt(arg_value);\n             } else if (arg !== \"--file\") {\n-                opts[correspondances[arg]] = arg_value;\n+                opts[correspondences[arg]] = arg_value;\n             } else {\n                 opts[\"files\"].push(arg_value);\n             }\n@@ -82,9 +82,9 @@ function parseOptions(args) {\n             process.exit(0);\n         } else if (arg === \"--no-sandbox\") {\n             console.log(\"`--no-sandbox` is being used. Be very careful!\");\n-            opts[correspondances[arg]] = true;\n-        } else if (correspondances[arg]) {\n-            opts[correspondances[arg]] = true;\n+            opts[correspondences[arg]] = true;\n+        } else if (correspondences[arg]) {\n+            opts[correspondences[arg]] = true;\n         } else {\n             console.log(\"Unknown option `\" + arg + \"`.\");\n             console.log(\"Use `--help` to see the list of options\");"}]}