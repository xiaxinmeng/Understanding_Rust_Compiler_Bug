{"sha": "39184741bce5087337c3a8ee185b4c0a251d3e24", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5MTg0NzQxYmNlNTA4NzMzN2MzYThlZTE4NWI0YzBhMjUxZDNlMjQ=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-05-10T20:24:17Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-05-24T22:20:55Z"}, "message": "trans: remove unused symbol_names::exported_name_with_suffix.", "tree": {"sha": "d47406734d73cc0f8954c8efe747466f4307e4cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d47406734d73cc0f8954c8efe747466f4307e4cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39184741bce5087337c3a8ee185b4c0a251d3e24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39184741bce5087337c3a8ee185b4c0a251d3e24", "html_url": "https://github.com/rust-lang/rust/commit/39184741bce5087337c3a8ee185b4c0a251d3e24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39184741bce5087337c3a8ee185b4c0a251d3e24/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7462da5c38db350292d1eae8961ea714232c612d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7462da5c38db350292d1eae8961ea714232c612d", "html_url": "https://github.com/rust-lang/rust/commit/7462da5c38db350292d1eae8961ea714232c612d"}], "stats": {"total": 30, "additions": 6, "deletions": 24}, "files": [{"sha": "0495cf5eb6718746035c2d9f6ad5992fdaba3470", "filename": "src/librustc_trans/back/symbol_names.rs", "status": "modified", "additions": 6, "deletions": 24, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/39184741bce5087337c3a8ee185b4c0a251d3e24/src%2Flibrustc_trans%2Fback%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39184741bce5087337c3a8ee185b4c0a251d3e24/src%2Flibrustc_trans%2Fback%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fsymbol_names.rs?ref=39184741bce5087337c3a8ee185b4c0a251d3e24", "patch": "@@ -116,7 +116,7 @@ pub fn def_id_to_string<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) ->\n     def_path_to_string(tcx, &def_path)\n }\n \n-pub fn def_path_to_string<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_path: &DefPath) -> String {\n+fn def_path_to_string<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_path: &DefPath) -> String {\n     let mut s = String::with_capacity(def_path.data.len() * 16);\n \n     s.push_str(&tcx.crate_name(def_path.krate));\n@@ -187,14 +187,13 @@ fn get_symbol_hash<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     }\n }\n \n-fn exported_name_with_opt_suffix<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n-                                           instance: &Instance<'tcx>,\n-                                           suffix: Option<&str>)\n-                                           -> String {\n+pub fn exported_name<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n+                               instance: &Instance<'tcx>)\n+                               -> String {\n     let &Instance { def: mut def_id, ref substs } = instance;\n \n-    debug!(\"exported_name_with_opt_suffix(def_id={:?}, substs={:?}, suffix={:?})\",\n-           def_id, substs, suffix);\n+    debug!(\"exported_name(def_id={:?}, substs={:?})\",\n+           def_id, substs);\n \n     if let Some(node_id) = ccx.tcx().map.as_local_node_id(def_id) {\n         if let Some(&src_def_id) = ccx.external_srcs().borrow().get(&node_id) {\n@@ -242,10 +241,6 @@ fn exported_name_with_opt_suffix<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     };\n     ccx.tcx().push_item_path(&mut buffer, def_id);\n \n-    if let Some(suffix) = suffix {\n-        buffer.push(suffix);\n-    }\n-\n     mangle(buffer.names.into_iter(), Some(&hash[..]))\n }\n \n@@ -264,19 +259,6 @@ impl ItemPathBuffer for SymbolPathBuffer {\n     }\n }\n \n-pub fn exported_name<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n-                               instance: &Instance<'tcx>)\n-                               -> String {\n-    exported_name_with_opt_suffix(ccx, instance, None)\n-}\n-\n-pub fn exported_name_with_suffix<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n-                                           instance: &Instance<'tcx>,\n-                                           suffix: &str)\n-                                           -> String {\n-   exported_name_with_opt_suffix(ccx, instance, Some(suffix))\n-}\n-\n /// Only symbols that are invisible outside their compilation unit should use a\n /// name generated by this function.\n pub fn internal_name_from_type_and_suffix<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,"}]}