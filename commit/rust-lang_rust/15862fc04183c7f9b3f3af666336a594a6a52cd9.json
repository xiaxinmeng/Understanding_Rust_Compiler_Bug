{"sha": "15862fc04183c7f9b3f3af666336a594a6a52cd9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1ODYyZmMwNDE4M2M3ZjliM2YzYWY2NjYzMzZhNTk0YTZhNTJjZDk=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-07-07T16:14:56Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-07-08T19:20:17Z"}, "message": "Use environment for associated type normalization as well", "tree": {"sha": "3593ee969c943d4881839e527e4305a1c3db2991", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3593ee969c943d4881839e527e4305a1c3db2991"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15862fc04183c7f9b3f3af666336a594a6a52cd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15862fc04183c7f9b3f3af666336a594a6a52cd9", "html_url": "https://github.com/rust-lang/rust/commit/15862fc04183c7f9b3f3af666336a594a6a52cd9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15862fc04183c7f9b3f3af666336a594a6a52cd9/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1b12072eddaf989fb08ed7a2e39ec2dbbb83dde", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1b12072eddaf989fb08ed7a2e39ec2dbbb83dde", "html_url": "https://github.com/rust-lang/rust/commit/b1b12072eddaf989fb08ed7a2e39ec2dbbb83dde"}], "stats": {"total": 72, "additions": 52, "deletions": 20}, "files": [{"sha": "e0a37e13d93cc1aca74ccd19a0a92b31ee0893e7", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15862fc04183c7f9b3f3af666336a594a6a52cd9/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15862fc04183c7f9b3f3af666336a594a6a52cd9/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=15862fc04183c7f9b3f3af666336a594a6a52cd9", "patch": "@@ -224,7 +224,7 @@ pub trait HirDatabase: DefDatabase + AstDatabase {\n     fn normalize(\n         &self,\n         krate: Crate,\n-        goal: crate::ty::Canonical<crate::ty::ProjectionPredicate>,\n+        goal: crate::ty::Canonical<crate::ty::InEnvironment<crate::ty::ProjectionPredicate>>,\n     ) -> Option<crate::ty::traits::Solution>;\n }\n "}, {"sha": "214aa7d03f4dfe1408e6606a16642a35757ef15f", "filename": "crates/ra_hir/src/ty/autoderef.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15862fc04183c7f9b3f3af666336a594a6a52cd9/crates%2Fra_hir%2Fsrc%2Fty%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15862fc04183c7f9b3f3af666336a594a6a52cd9/crates%2Fra_hir%2Fsrc%2Fty%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fautoderef.rs?ref=15862fc04183c7f9b3f3af666336a594a6a52cd9", "patch": "@@ -52,6 +52,8 @@ fn deref_by_trait(\n \n     // FIXME make the Canonical handling nicer\n \n+    let env = super::lower::trait_env(db, resolver);\n+\n     let projection = super::traits::ProjectionPredicate {\n         ty: Ty::Bound(0),\n         projection_ty: super::ProjectionTy {\n@@ -60,7 +62,9 @@ fn deref_by_trait(\n         },\n     };\n \n-    let canonical = super::Canonical { num_vars: 1 + ty.num_vars, value: projection };\n+    let in_env = super::traits::InEnvironment { value: projection, environment: env };\n+\n+    let canonical = super::Canonical { num_vars: 1 + ty.num_vars, value: in_env };\n \n     let solution = db.normalize(krate, canonical)?;\n "}, {"sha": "f6cf61ad2b146e312e0beb034801b114b46d9657", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15862fc04183c7f9b3f3af666336a594a6a52cd9/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15862fc04183c7f9b3f3af666336a594a6a52cd9/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=15862fc04183c7f9b3f3af666336a594a6a52cd9", "patch": "@@ -356,7 +356,8 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                     };\n                 }\n                 Obligation::Projection(pr) => {\n-                    let canonicalized = self.canonicalizer().canonicalize_projection(pr.clone());\n+                    let in_env = InEnvironment::new(self.trait_env.clone(), pr.clone());\n+                    let canonicalized = self.canonicalizer().canonicalize_projection(in_env);\n                     let solution = self\n                         .db\n                         .normalize(self.resolver.krate().unwrap(), canonicalized.value.clone());"}, {"sha": "2ed326cd550b089cce409189a129cea06e816916", "filename": "crates/ra_hir/src/ty/infer/unify.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/15862fc04183c7f9b3f3af666336a594a6a52cd9/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15862fc04183c7f9b3f3af666336a594a6a52cd9/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Funify.rs?ref=15862fc04183c7f9b3f3af666336a594a6a52cd9", "patch": "@@ -129,10 +129,14 @@ where\n \n     pub fn canonicalize_projection(\n         mut self,\n-        projection: ProjectionPredicate,\n-    ) -> Canonicalized<ProjectionPredicate> {\n-        let result = self.do_canonicalize_projection_predicate(projection);\n-        self.into_canonicalized(result)\n+        projection: InEnvironment<ProjectionPredicate>,\n+    ) -> Canonicalized<InEnvironment<ProjectionPredicate>> {\n+        let result = self.do_canonicalize_projection_predicate(projection.value);\n+        // FIXME canonicalize env\n+        self.into_canonicalized(InEnvironment {\n+            value: result,\n+            environment: projection.environment,\n+        })\n     }\n }\n "}, {"sha": "7340bb9bd754b5f43f3459261066f5a0ce9924e6", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/15862fc04183c7f9b3f3af666336a594a6a52cd9/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15862fc04183c7f9b3f3af666336a594a6a52cd9/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=15862fc04183c7f9b3f3af666336a594a6a52cd9", "patch": "@@ -3010,6 +3010,25 @@ fn test<T>(t: T) { t.foo()<|>; }\n     assert_eq!(t, \"{unknown}\");\n }\n \n+#[test]\n+fn generic_param_env_deref() {\n+    let t = type_at(\n+        r#\"\n+//- /main.rs\n+#[lang = \"deref\"]\n+trait Deref {\n+    type Target;\n+}\n+trait Trait {}\n+impl<T> Deref for T where T: Trait {\n+    type Target = i128;\n+}\n+fn test<T: Trait>(t: T) { (*t)<|>; }\n+\"#,\n+    );\n+    assert_eq!(t, \"i128\");\n+}\n+\n fn type_at_pos(db: &MockDatabase, pos: FilePosition) -> String {\n     let file = db.parse(pos.file_id).ok().unwrap();\n     let expr = algo::find_node_at_offset::<ast::Expr>(file.syntax(), pos.offset).unwrap();"}, {"sha": "01f350bc199744e89f1bd5eec89518d24438553d", "filename": "crates/ra_hir/src/ty/traits.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/15862fc04183c7f9b3f3af666336a594a6a52cd9/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15862fc04183c7f9b3f3af666336a594a6a52cd9/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs?ref=15862fc04183c7f9b3f3af666336a594a6a52cd9", "patch": "@@ -134,20 +134,9 @@ pub(crate) fn implements_query(\n pub(crate) fn normalize_query(\n     db: &impl HirDatabase,\n     krate: Crate,\n-    projection: Canonical<ProjectionPredicate>,\n+    projection: Canonical<InEnvironment<ProjectionPredicate>>,\n ) -> Option<Solution> {\n-    let goal: chalk_ir::Goal = chalk_ir::Normalize {\n-        projection: projection.value.projection_ty.to_chalk(db),\n-        ty: projection.value.ty.to_chalk(db),\n-    }\n-    .cast();\n-    debug!(\"goal: {:?}\", goal);\n-    // FIXME unify with `implements`\n-    let env = chalk_ir::Environment::new();\n-    let in_env = chalk_ir::InEnvironment::new(&env, goal);\n-    let parameter = chalk_ir::ParameterKind::Ty(chalk_ir::UniverseIndex::ROOT);\n-    let canonical =\n-        chalk_ir::Canonical { value: in_env, binders: vec![parameter; projection.num_vars] };\n+    let canonical = projection.to_chalk(db).cast();\n     // We currently don't deal with universes (I think / hope they're not yet\n     // relevant for our use cases?)\n     let u_canonical = chalk_ir::UCanonical { canonical, universes: 1 };"}, {"sha": "32a45731d02d8a68937cdeae129599cd07d310e3", "filename": "crates/ra_hir/src/ty/traits/chalk.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/15862fc04183c7f9b3f3af666336a594a6a52cd9/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15862fc04183c7f9b3f3af666336a594a6a52cd9/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs?ref=15862fc04183c7f9b3f3af666336a594a6a52cd9", "patch": "@@ -218,6 +218,21 @@ impl ToChalk for ProjectionTy {\n     }\n }\n \n+impl ToChalk for super::ProjectionPredicate {\n+    type Chalk = chalk_ir::Normalize;\n+\n+    fn to_chalk(self, db: &impl HirDatabase) -> chalk_ir::Normalize {\n+        chalk_ir::Normalize {\n+            projection: self.projection_ty.to_chalk(db),\n+            ty: self.ty.to_chalk(db),\n+        }\n+    }\n+\n+    fn from_chalk(_db: &impl HirDatabase, _normalize: chalk_ir::Normalize) -> Self {\n+        unimplemented!()\n+    }\n+}\n+\n impl<T> ToChalk for Canonical<T>\n where\n     T: ToChalk,"}]}