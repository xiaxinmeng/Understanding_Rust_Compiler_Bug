{"sha": "363fa51c66a5cffc5e29a59dcfafc4222b07189c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2M2ZhNTFjNjZhNWNmZmM1ZTI5YTU5ZGNmYWZjNDIyMmIwNzE4OWM=", "commit": {"author": {"name": "Jack Moffitt", "email": "jack@metajack.im", "date": "2013-12-20T17:22:10Z"}, "committer": {"name": "Jack Moffitt", "email": "jack@metajack.im", "date": "2014-01-17T21:45:07Z"}, "message": "Use the libsyntax PkgId parser in Rustpkg, but keep Rustpkg's version smarts.\n\nThis fixes a bug where new syntax crate IDs would cause rustpkg to fail to\nbuild crates.", "tree": {"sha": "1b5f4400cdc82e4cb8e66ad48b003d9ad8864140", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b5f4400cdc82e4cb8e66ad48b003d9ad8864140"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/363fa51c66a5cffc5e29a59dcfafc4222b07189c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/363fa51c66a5cffc5e29a59dcfafc4222b07189c", "html_url": "https://github.com/rust-lang/rust/commit/363fa51c66a5cffc5e29a59dcfafc4222b07189c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/363fa51c66a5cffc5e29a59dcfafc4222b07189c/comments", "author": {"login": "metajack", "id": 28357, "node_id": "MDQ6VXNlcjI4MzU3", "avatar_url": "https://avatars.githubusercontent.com/u/28357?v=4", "gravatar_id": "", "url": "https://api.github.com/users/metajack", "html_url": "https://github.com/metajack", "followers_url": "https://api.github.com/users/metajack/followers", "following_url": "https://api.github.com/users/metajack/following{/other_user}", "gists_url": "https://api.github.com/users/metajack/gists{/gist_id}", "starred_url": "https://api.github.com/users/metajack/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/metajack/subscriptions", "organizations_url": "https://api.github.com/users/metajack/orgs", "repos_url": "https://api.github.com/users/metajack/repos", "events_url": "https://api.github.com/users/metajack/events{/privacy}", "received_events_url": "https://api.github.com/users/metajack/received_events", "type": "User", "site_admin": false}, "committer": {"login": "metajack", "id": 28357, "node_id": "MDQ6VXNlcjI4MzU3", "avatar_url": "https://avatars.githubusercontent.com/u/28357?v=4", "gravatar_id": "", "url": "https://api.github.com/users/metajack", "html_url": "https://github.com/metajack", "followers_url": "https://api.github.com/users/metajack/followers", "following_url": "https://api.github.com/users/metajack/following{/other_user}", "gists_url": "https://api.github.com/users/metajack/gists{/gist_id}", "starred_url": "https://api.github.com/users/metajack/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/metajack/subscriptions", "organizations_url": "https://api.github.com/users/metajack/orgs", "repos_url": "https://api.github.com/users/metajack/repos", "events_url": "https://api.github.com/users/metajack/events{/privacy}", "received_events_url": "https://api.github.com/users/metajack/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4098327b1fe1112ddf661b587be9eeec1d80adde", "url": "https://api.github.com/repos/rust-lang/rust/commits/4098327b1fe1112ddf661b587be9eeec1d80adde", "html_url": "https://github.com/rust-lang/rust/commit/4098327b1fe1112ddf661b587be9eeec1d80adde"}], "stats": {"total": 40, "additions": 14, "deletions": 26}, "files": [{"sha": "9a3c47823e07b86d04d57be6ca35b1d8699890fe", "filename": "src/librustpkg/crate_id.rs", "status": "modified", "additions": 11, "deletions": 23, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/363fa51c66a5cffc5e29a59dcfafc4222b07189c/src%2Flibrustpkg%2Fcrate_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/363fa51c66a5cffc5e29a59dcfafc4222b07189c/src%2Flibrustpkg%2Fcrate_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fcrate_id.rs?ref=363fa51c66a5cffc5e29a59dcfafc4222b07189c", "patch": "@@ -9,9 +9,10 @@\n // except according to those terms.\n \n use version::{try_getting_version, try_getting_local_version,\n-              Version, NoVersion, split_version};\n+              Version, NoVersion, ExactRevision};\n use std::hash::Streaming;\n use std::hash;\n+use syntax::crateid;\n \n /// Path-fragment identifier of a package such as\n /// 'github.com/graydon/test'; path must be a relative\n@@ -45,27 +46,14 @@ impl CrateId {\n     pub fn new(s: &str) -> CrateId {\n         use conditions::bad_pkg_id::cond;\n \n-        let mut given_version = None;\n-\n-        // Did the user request a specific version?\n-        let s = match split_version(s) {\n-            Some((path, v)) => {\n-                given_version = Some(v);\n-                path\n-            }\n-            None => {\n-                s\n-            }\n-        };\n-\n-        let path = Path::new(s);\n-        if !path.is_relative() {\n-            return cond.raise((path, ~\"absolute crate_id\"));\n-        }\n-        if path.filename().is_none() {\n-            return cond.raise((path, ~\"0-length crate_id\"));\n+        let raw_crateid: Option<crateid::CrateId> = from_str(s);\n+        if raw_crateid.is_none() {\n+            return cond.raise((Path::new(s), ~\"bad crateid\"))\n         }\n-        let short_name = path.filestem_str().expect(format!(\"Strange path! {}\", s));\n+        let raw_crateid = raw_crateid.unwrap();\n+        let crateid::CrateId { path, name, version } = raw_crateid;\n+        let path = Path::new(path);\n+        let given_version = version.map(|v| ExactRevision(v));\n \n         let version = match given_version {\n             Some(v) => v,\n@@ -79,8 +67,8 @@ impl CrateId {\n         };\n \n         CrateId {\n-            path: path.clone(),\n-            short_name: short_name.to_owned(),\n+            path: path,\n+            short_name: name,\n             version: version\n         }\n     }"}, {"sha": "8e3e6357181db3407e4c8d4e6fb9302d9cee8d3b", "filename": "src/librustpkg/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/363fa51c66a5cffc5e29a59dcfafc4222b07189c/src%2Flibrustpkg%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/363fa51c66a5cffc5e29a59dcfafc4222b07189c/src%2Flibrustpkg%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Ftests.rs?ref=363fa51c66a5cffc5e29a59dcfafc4222b07189c", "patch": "@@ -746,8 +746,8 @@ fn test_crate_ids_must_be_relative_path_like() {\n             CrateId::new(\"github.com/catamorphism/test-pkg\").to_str());\n \n     cond.trap(|(p, e)| {\n-        assert!(p.filename().is_none())\n-        assert!(\"0-length crate_id\" == e);\n+        assert!(p.filename().is_none());\n+        assert!(\"bad crateid\" == e);\n         whatever.clone()\n     }).inside(|| {\n         let x = CrateId::new(\"\");\n@@ -757,7 +757,7 @@ fn test_crate_ids_must_be_relative_path_like() {\n     cond.trap(|(p, e)| {\n         let abs = os::make_absolute(&Path::new(\"foo/bar/quux\"));\n         assert_eq!(p, abs);\n-        assert!(\"absolute crate_id\" == e);\n+        assert!(\"bad crateid\" == e);\n         whatever.clone()\n     }).inside(|| {\n         let zp = os::make_absolute(&Path::new(\"foo/bar/quux\"));"}]}