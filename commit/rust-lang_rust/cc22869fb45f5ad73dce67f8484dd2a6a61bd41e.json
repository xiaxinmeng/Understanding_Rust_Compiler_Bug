{"sha": "cc22869fb45f5ad73dce67f8484dd2a6a61bd41e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjMjI4NjlmYjQ1ZjVhZDczZGNlNjdmODQ4NGRkMmE2YTYxYmQ0MWU=", "commit": {"author": {"name": "moxian", "email": "moxian@google.com", "date": "2018-06-29T06:47:51Z"}, "committer": {"name": "moxian", "email": "moxian@google.com", "date": "2018-09-26T14:35:38Z"}, "message": "Add option to vertically align enum discriminants.", "tree": {"sha": "926453c33e9dac5a4d5af7c001fcfd659c0ffb69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/926453c33e9dac5a4d5af7c001fcfd659c0ffb69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc22869fb45f5ad73dce67f8484dd2a6a61bd41e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc22869fb45f5ad73dce67f8484dd2a6a61bd41e", "html_url": "https://github.com/rust-lang/rust/commit/cc22869fb45f5ad73dce67f8484dd2a6a61bd41e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc22869fb45f5ad73dce67f8484dd2a6a61bd41e/comments", "author": {"login": "moxian", "id": 7831163, "node_id": "MDQ6VXNlcjc4MzExNjM=", "avatar_url": "https://avatars.githubusercontent.com/u/7831163?v=4", "gravatar_id": "", "url": "https://api.github.com/users/moxian", "html_url": "https://github.com/moxian", "followers_url": "https://api.github.com/users/moxian/followers", "following_url": "https://api.github.com/users/moxian/following{/other_user}", "gists_url": "https://api.github.com/users/moxian/gists{/gist_id}", "starred_url": "https://api.github.com/users/moxian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/moxian/subscriptions", "organizations_url": "https://api.github.com/users/moxian/orgs", "repos_url": "https://api.github.com/users/moxian/repos", "events_url": "https://api.github.com/users/moxian/events{/privacy}", "received_events_url": "https://api.github.com/users/moxian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "moxian", "id": 7831163, "node_id": "MDQ6VXNlcjc4MzExNjM=", "avatar_url": "https://avatars.githubusercontent.com/u/7831163?v=4", "gravatar_id": "", "url": "https://api.github.com/users/moxian", "html_url": "https://github.com/moxian", "followers_url": "https://api.github.com/users/moxian/followers", "following_url": "https://api.github.com/users/moxian/following{/other_user}", "gists_url": "https://api.github.com/users/moxian/gists{/gist_id}", "starred_url": "https://api.github.com/users/moxian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/moxian/subscriptions", "organizations_url": "https://api.github.com/users/moxian/orgs", "repos_url": "https://api.github.com/users/moxian/repos", "events_url": "https://api.github.com/users/moxian/events{/privacy}", "received_events_url": "https://api.github.com/users/moxian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90692a5917ac595a9d6b68b88c5f1ad4485670f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/90692a5917ac595a9d6b68b88c5f1ad4485670f9", "html_url": "https://github.com/rust-lang/rust/commit/90692a5917ac595a9d6b68b88c5f1ad4485670f9"}], "stats": {"total": 137, "additions": 134, "deletions": 3}, "files": [{"sha": "6ac376efa68288252c8922831901737854aa1017", "filename": "Configurations.md", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/cc22869fb45f5ad73dce67f8484dd2a6a61bd41e/Configurations.md", "raw_url": "https://github.com/rust-lang/rust/raw/cc22869fb45f5ad73dce67f8484dd2a6a61bd41e/Configurations.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Configurations.md?ref=cc22869fb45f5ad73dce67f8484dd2a6a61bd41e", "patch": "@@ -885,6 +885,52 @@ impl Lorem {\n See also [`brace_style`](#brace_style), [`control_brace_style`](#control_brace_style).\n \n \n+## `enum_discrim_align_threshold`\n+\n+The maximum diff of width between enum variants to have discriminants aligned with each other.\n+Variants without discriminants would be ignored for the purpose of alignment.\n+\n+- **Default value** : 0\n+- **Possible values**: any positive integer\n+- **Stable**: No\n+\n+#### `0` (default):\n+\n+```rust\n+enum Foo {\n+    A = 0,\n+    Bb = 1,\n+    RandomLongVariantWithoutDiscriminant,\n+    Ccc = 71,\n+}\n+\n+enum Bar {\n+    A = 0,\n+    Bb = 1,\n+    ThisOneisWithDiscriminantAndPreventsAlignment = 10,\n+    Ccc = 71,\n+}\n+```\n+\n+#### `20`:\n+\n+```rust\n+enum Foo {\n+    A   = 0,\n+    Bb  = 1,\n+    RandomLongVariantWithoutDiscriminant,\n+    Ccc = 2,\n+}\n+\n+enum Bar {\n+    A = 0,\n+    Bb = 1,\n+    ThisOneisWithDiscriminantAndPreventsAlignment = 10,\n+    Ccc = 71,\n+}\n+```\n+\n+\n ## `fn_single_line`\n \n Put single-expression functions on a single line"}, {"sha": "a553bf2ee3c708284cda6132bfb7eff34b0624e9", "filename": "src/config/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc22869fb45f5ad73dce67f8484dd2a6a61bd41e/src%2Fconfig%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc22869fb45f5ad73dce67f8484dd2a6a61bd41e/src%2Fconfig%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fmod.rs?ref=cc22869fb45f5ad73dce67f8484dd2a6a61bd41e", "patch": "@@ -89,6 +89,8 @@ create_config! {\n     combine_control_expr: bool, true, false, \"Combine control expressions with function calls\";\n     struct_field_align_threshold: usize, 0, false, \"Align struct fields if their diffs fits within \\\n                                              threshold\";\n+    enum_discrim_align_threshold: usize, 0, false,\n+        \"Align enum variants discrims, if their diffs fit within threshold\";\n     match_arm_blocks: bool, true, false, \"Wrap the body of arms in blocks when it does not fit on \\\n         the same line with the pattern of arms\";\n     force_multiline_blocks: bool, false, false,"}, {"sha": "a341267681e6349da01d8a0bb12d7893eb04e4be", "filename": "src/items.rs", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/cc22869fb45f5ad73dce67f8484dd2a6a61bd41e/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc22869fb45f5ad73dce67f8484dd2a6a61bd41e/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=cc22869fb45f5ad73dce67f8484dd2a6a61bd41e", "patch": "@@ -500,6 +500,24 @@ impl<'a> FmtVisitor<'a> {\n         let original_offset = self.block_indent;\n         self.block_indent = self.block_indent.block_indent(self.config);\n \n+        // If enum variants have discriminants, try to vertically align those,\n+        // provided it does not result in too much padding\n+        let pad_discrim_ident_to;\n+        let diff_threshold = self.config.enum_discrim_align_threshold();\n+        let discr_ident_lens: Vec<_> = enum_def\n+            .variants\n+            .iter()\n+            .filter(|var| var.node.disr_expr.is_some())\n+            .map(|var| rewrite_ident(&self.get_context(), var.node.ident).len())\n+            .collect();\n+        let shortest_w_discr = *discr_ident_lens.iter().min().unwrap_or(&0);\n+        let longest_w_discr = *discr_ident_lens.iter().max().unwrap_or(&0);\n+        if longest_w_discr > shortest_w_discr + diff_threshold {\n+            pad_discrim_ident_to = 0;\n+        } else {\n+            pad_discrim_ident_to = longest_w_discr;\n+        }\n+\n         let itemize_list_with = |one_line_width: usize| {\n             itemize_list(\n                 self.snippet_provider,\n@@ -514,7 +532,7 @@ impl<'a> FmtVisitor<'a> {\n                     }\n                 },\n                 |f| f.span.hi(),\n-                |f| self.format_variant(f, one_line_width),\n+                |f| self.format_variant(f, one_line_width, pad_discrim_ident_to),\n                 body_lo,\n                 body_hi,\n                 false,\n@@ -543,7 +561,12 @@ impl<'a> FmtVisitor<'a> {\n     }\n \n     // Variant of an enum.\n-    fn format_variant(&self, field: &ast::Variant, one_line_width: usize) -> Option<String> {\n+    fn format_variant(\n+        &self,\n+        field: &ast::Variant,\n+        one_line_width: usize,\n+        pad_discrim_ident_to: usize,\n+    ) -> Option<String> {\n         if contains_skip(&field.node.attrs) {\n             let lo = field.node.attrs[0].span.lo();\n             let span = mk_sp(lo, field.span.hi());\n@@ -570,7 +593,11 @@ impl<'a> FmtVisitor<'a> {\n             )?,\n             ast::VariantData::Unit(..) => {\n                 if let Some(ref expr) = field.node.disr_expr {\n-                    let lhs = format!(\"{} =\", rewrite_ident(&context, field.node.ident));\n+                    let lhs = format!(\n+                        \"{:1$} =\",\n+                        rewrite_ident(&context, field.node.ident),\n+                        pad_discrim_ident_to\n+                    );\n                     rewrite_assign_rhs(&context, lhs, &*expr.value, shape)?\n                 } else {\n                     rewrite_ident(&context, field.node.ident).to_owned()"}, {"sha": "d619d17922ae9780eb3e9a231e6ef3a773d1c205", "filename": "tests/source/configs/enum_discrim_align_threshold/20.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/cc22869fb45f5ad73dce67f8484dd2a6a61bd41e/tests%2Fsource%2Fconfigs%2Fenum_discrim_align_threshold%2F20.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc22869fb45f5ad73dce67f8484dd2a6a61bd41e/tests%2Fsource%2Fconfigs%2Fenum_discrim_align_threshold%2F20.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs%2Fenum_discrim_align_threshold%2F20.rs?ref=cc22869fb45f5ad73dce67f8484dd2a6a61bd41e", "patch": "@@ -0,0 +1,28 @@\n+// rustfmt-enum_discrim_align_threshold: 20\r\n+\r\n+enum Standard {\r\n+    A = 1,\r\n+    Bcdef = 2,\r\n+}\r\n+\r\n+enum Mixed {\r\n+    ThisIsAFairlyLongEnumVariantWithoutDiscrim,\r\n+    A = 1,\r\n+    ThisIsAFairlyLongEnumVariantWithoutDiscrim2,\r\n+    Bcdef = 2,\r\n+}\r\n+\r\n+enum TooLong {\r\n+    ThisOneHasDiscrimAaaaaaaaaaaaaaaaaaaaaaaaaaaa = 10,\r\n+    A = 1,\r\n+    Bcdef = 2,\r\n+}\r\n+\r\n+// Live specimen from #1686\r\n+enum LongWithSmallDiff {\r\n+    SceneColorimetryEstimates = 0x73636F65,\r\n+    SceneAppearanceEstimates = 0x73617065,\r\n+    FocalPlaneColorimetryEstimates = 0x66706365,\r\n+    ReflectionHardcopyOriginalColorimetry = 0x72686F63,\r\n+    ReflectionPrintOutputColorimetry = 0x72706F63,\r\n+}\n\\ No newline at end of file"}, {"sha": "06d621a34ccbe3b2ebdf9513457e11c6c100b3b5", "filename": "tests/target/configs/enum_discrim_align_threshold/20.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/cc22869fb45f5ad73dce67f8484dd2a6a61bd41e/tests%2Ftarget%2Fconfigs%2Fenum_discrim_align_threshold%2F20.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc22869fb45f5ad73dce67f8484dd2a6a61bd41e/tests%2Ftarget%2Fconfigs%2Fenum_discrim_align_threshold%2F20.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs%2Fenum_discrim_align_threshold%2F20.rs?ref=cc22869fb45f5ad73dce67f8484dd2a6a61bd41e", "patch": "@@ -0,0 +1,28 @@\n+// rustfmt-enum_discrim_align_threshold: 20\r\n+\r\n+enum Standard {\r\n+    A     = 1,\r\n+    Bcdef = 2,\r\n+}\r\n+\r\n+enum Mixed {\r\n+    ThisIsAFairlyLongEnumVariantWithoutDiscrim,\r\n+    A     = 1,\r\n+    ThisIsAFairlyLongEnumVariantWithoutDiscrim2,\r\n+    Bcdef = 2,\r\n+}\r\n+\r\n+enum TooLong {\r\n+    ThisOneHasDiscrimAaaaaaaaaaaaaaaaaaaaaaaaaaaa = 10,\r\n+    A = 1,\r\n+    Bcdef = 2,\r\n+}\r\n+\r\n+// Live specimen from #1686\r\n+enum LongWithSmallDiff {\r\n+    SceneColorimetryEstimates             = 0x73636F65,\r\n+    SceneAppearanceEstimates              = 0x73617065,\r\n+    FocalPlaneColorimetryEstimates        = 0x66706365,\r\n+    ReflectionHardcopyOriginalColorimetry = 0x72686F63,\r\n+    ReflectionPrintOutputColorimetry      = 0x72706F63,\r\n+}\r"}]}