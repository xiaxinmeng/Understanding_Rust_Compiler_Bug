{"sha": "dc075b426675e61cc46089046cf41d85edd79aaa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjMDc1YjQyNjY3NWU2MWNjNDYwODkwNDZjZjQxZDg1ZWRkNzlhYWE=", "commit": {"author": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2020-11-25T01:01:05Z"}, "committer": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2020-11-25T01:01:05Z"}, "message": "Change `redundant_pattern_matching` to also lint `std::net::IpAddr`\n\nSuggest using utility methods `is_ipv4` and `is_ipv6`.", "tree": {"sha": "2d91a4c52af11b82953779483727c9ef58a1d4b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d91a4c52af11b82953779483727c9ef58a1d4b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc075b426675e61cc46089046cf41d85edd79aaa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc075b426675e61cc46089046cf41d85edd79aaa", "html_url": "https://github.com/rust-lang/rust/commit/dc075b426675e61cc46089046cf41d85edd79aaa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc075b426675e61cc46089046cf41d85edd79aaa/comments", "author": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f897d27d8b394464048a60e5bf38d4cd1e31a5fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/f897d27d8b394464048a60e5bf38d4cd1e31a5fe", "html_url": "https://github.com/rust-lang/rust/commit/f897d27d8b394464048a60e5bf38d4cd1e31a5fe"}], "stats": {"total": 377, "additions": 341, "deletions": 36}, "files": [{"sha": "a14b63faf78045cb83e837dea55987dc4a99d288", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/dc075b426675e61cc46089046cf41d85edd79aaa/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc075b426675e61cc46089046cf41d85edd79aaa/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=dc075b426675e61cc46089046cf41d85edd79aaa", "patch": "@@ -411,8 +411,8 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Lint for redundant pattern matching over `Result`, `Option` or\n-    /// `std::task::Poll`\n+    /// **What it does:** Lint for redundant pattern matching over `Result`, `Option`,\n+    /// `std::task::Poll` or `std::net::IpAddr`\n     ///\n     /// **Why is this bad?** It's more concise and clear to just use the proper\n     /// utility function\n@@ -423,12 +423,15 @@ declare_clippy_lint! {\n     ///\n     /// ```rust\n     /// # use std::task::Poll;\n+    /// # use std::net::{IpAddr, Ipv4Addr, Ipv6Addr};\n     /// if let Ok(_) = Ok::<i32, i32>(42) {}\n     /// if let Err(_) = Err::<i32, i32>(42) {}\n     /// if let None = None::<()> {}\n     /// if let Some(_) = Some(42) {}\n     /// if let Poll::Pending = Poll::Pending::<()> {}\n     /// if let Poll::Ready(_) = Poll::Ready(42) {}\n+    /// if let IpAddr::V4(_) = IpAddr::V4(Ipv4Addr::LOCALHOST) {}\n+    /// if let IpAddr::V6(_) = IpAddr::V6(Ipv6Addr::LOCALHOST) {}\n     /// match Ok::<i32, i32>(42) {\n     ///     Ok(_) => true,\n     ///     Err(_) => false,\n@@ -439,12 +442,15 @@ declare_clippy_lint! {\n     ///\n     /// ```rust\n     /// # use std::task::Poll;\n+    /// # use std::net::{IpAddr, Ipv4Addr, Ipv6Addr};\n     /// if Ok::<i32, i32>(42).is_ok() {}\n     /// if Err::<i32, i32>(42).is_err() {}\n     /// if None::<()>.is_none() {}\n     /// if Some(42).is_some() {}\n     /// if Poll::Pending::<()>.is_pending() {}\n     /// if Poll::Ready(42).is_ready() {}\n+    /// if IpAddr::V4(Ipv4Addr::LOCALHOST).is_ipv4() {}\n+    /// if IpAddr::V6(Ipv6Addr::LOCALHOST).is_ipv6() {}\n     /// Ok::<i32, i32>(42).is_ok();\n     /// ```\n     pub REDUNDANT_PATTERN_MATCHING,\n@@ -1546,6 +1552,10 @@ mod redundant_pattern_match {\n                         \"is_some()\"\n                     } else if match_qpath(path, &paths::POLL_READY) {\n                         \"is_ready()\"\n+                    } else if match_qpath(path, &paths::IPADDR_V4) {\n+                        \"is_ipv4()\"\n+                    } else if match_qpath(path, &paths::IPADDR_V6) {\n+                        \"is_ipv6()\"\n                     } else {\n                         return;\n                     }\n@@ -1626,6 +1636,17 @@ mod redundant_pattern_match {\n                             \"is_ok()\",\n                             \"is_err()\",\n                         )\n+                        .or_else(|| {\n+                            find_good_method_for_match(\n+                                arms,\n+                                path_left,\n+                                path_right,\n+                                &paths::IPADDR_V4,\n+                                &paths::IPADDR_V6,\n+                                \"is_ipv4()\",\n+                                \"is_ipv6()\",\n+                            )\n+                        })\n                     } else {\n                         None\n                     }"}, {"sha": "61aeabb7ba72b7db6f652cf2110d121d65a71f61", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc075b426675e61cc46089046cf41d85edd79aaa/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc075b426675e61cc46089046cf41d85edd79aaa/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=dc075b426675e61cc46089046cf41d85edd79aaa", "patch": "@@ -58,6 +58,8 @@ pub const INTO: [&str; 3] = [\"core\", \"convert\", \"Into\"];\n pub const INTO_ITERATOR: [&str; 5] = [\"core\", \"iter\", \"traits\", \"collect\", \"IntoIterator\"];\n pub const IO_READ: [&str; 3] = [\"std\", \"io\", \"Read\"];\n pub const IO_WRITE: [&str; 3] = [\"std\", \"io\", \"Write\"];\n+pub const IPADDR_V4: [&str; 4] = [\"std\", \"net\", \"IpAddr\", \"V4\"];\n+pub const IPADDR_V6: [&str; 4] = [\"std\", \"net\", \"IpAddr\", \"V6\"];\n pub const ITERATOR: [&str; 5] = [\"core\", \"iter\", \"traits\", \"iterator\", \"Iterator\"];\n pub const LATE_CONTEXT: [&str; 2] = [\"rustc_lint\", \"LateContext\"];\n pub const LINKED_LIST: [&str; 4] = [\"alloc\", \"collections\", \"linked_list\", \"LinkedList\"];"}, {"sha": "acc8de5f41ee879e282c50a49ae1f1e7f756587e", "filename": "tests/ui/redundant_pattern_matching_ipaddr.fixed", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/dc075b426675e61cc46089046cf41d85edd79aaa/tests%2Fui%2Fredundant_pattern_matching_ipaddr.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/dc075b426675e61cc46089046cf41d85edd79aaa/tests%2Fui%2Fredundant_pattern_matching_ipaddr.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_ipaddr.fixed?ref=dc075b426675e61cc46089046cf41d85edd79aaa", "patch": "@@ -0,0 +1,73 @@\n+// run-rustfix\n+\n+#![warn(clippy::all)]\n+#![warn(clippy::redundant_pattern_matching)]\n+#![allow(unused_must_use, clippy::needless_bool, clippy::match_like_matches_macro)]\n+\n+use std::net::{\n+    IpAddr::{self, V4, V6},\n+    Ipv4Addr, Ipv6Addr,\n+};\n+\n+fn main() {\n+    let ipaddr: IpAddr = V4(Ipv4Addr::LOCALHOST);\n+    if ipaddr.is_ipv4() {}\n+\n+    if V4(Ipv4Addr::LOCALHOST).is_ipv4() {}\n+\n+    if V6(Ipv6Addr::LOCALHOST).is_ipv6() {}\n+\n+    while V4(Ipv4Addr::LOCALHOST).is_ipv4() {}\n+\n+    while V6(Ipv6Addr::LOCALHOST).is_ipv6() {}\n+\n+    if V4(Ipv4Addr::LOCALHOST).is_ipv4() {}\n+\n+    if V6(Ipv6Addr::LOCALHOST).is_ipv6() {}\n+\n+    if let V4(ipaddr) = V4(Ipv4Addr::LOCALHOST) {\n+        println!(\"{}\", ipaddr);\n+    }\n+\n+    V4(Ipv4Addr::LOCALHOST).is_ipv4();\n+\n+    V4(Ipv4Addr::LOCALHOST).is_ipv6();\n+\n+    V6(Ipv6Addr::LOCALHOST).is_ipv6();\n+\n+    V6(Ipv6Addr::LOCALHOST).is_ipv4();\n+\n+    let _ = if V4(Ipv4Addr::LOCALHOST).is_ipv4() {\n+        true\n+    } else {\n+        false\n+    };\n+\n+    ipaddr_const();\n+\n+    let _ = if gen_ipaddr().is_ipv4() {\n+        1\n+    } else if gen_ipaddr().is_ipv6() {\n+        2\n+    } else {\n+        3\n+    };\n+}\n+\n+fn gen_ipaddr() -> IpAddr {\n+    V4(Ipv4Addr::LOCALHOST)\n+}\n+\n+const fn ipaddr_const() {\n+    if V4(Ipv4Addr::LOCALHOST).is_ipv4() {}\n+\n+    if V6(Ipv6Addr::LOCALHOST).is_ipv6() {}\n+\n+    while V4(Ipv4Addr::LOCALHOST).is_ipv4() {}\n+\n+    while V6(Ipv6Addr::LOCALHOST).is_ipv6() {}\n+\n+    V4(Ipv4Addr::LOCALHOST).is_ipv4();\n+\n+    V6(Ipv6Addr::LOCALHOST).is_ipv6();\n+}"}, {"sha": "678d91ce93acda75d753e0222792723338c59fb5", "filename": "tests/ui/redundant_pattern_matching_ipaddr.rs", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/dc075b426675e61cc46089046cf41d85edd79aaa/tests%2Fui%2Fredundant_pattern_matching_ipaddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc075b426675e61cc46089046cf41d85edd79aaa/tests%2Fui%2Fredundant_pattern_matching_ipaddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_ipaddr.rs?ref=dc075b426675e61cc46089046cf41d85edd79aaa", "patch": "@@ -0,0 +1,91 @@\n+// run-rustfix\n+\n+#![warn(clippy::all)]\n+#![warn(clippy::redundant_pattern_matching)]\n+#![allow(unused_must_use, clippy::needless_bool, clippy::match_like_matches_macro)]\n+\n+use std::net::{\n+    IpAddr::{self, V4, V6},\n+    Ipv4Addr, Ipv6Addr,\n+};\n+\n+fn main() {\n+    let ipaddr: IpAddr = V4(Ipv4Addr::LOCALHOST);\n+    if let V4(_) = &ipaddr {}\n+\n+    if let V4(_) = V4(Ipv4Addr::LOCALHOST) {}\n+\n+    if let V6(_) = V6(Ipv6Addr::LOCALHOST) {}\n+\n+    while let V4(_) = V4(Ipv4Addr::LOCALHOST) {}\n+\n+    while let V6(_) = V6(Ipv6Addr::LOCALHOST) {}\n+\n+    if V4(Ipv4Addr::LOCALHOST).is_ipv4() {}\n+\n+    if V6(Ipv6Addr::LOCALHOST).is_ipv6() {}\n+\n+    if let V4(ipaddr) = V4(Ipv4Addr::LOCALHOST) {\n+        println!(\"{}\", ipaddr);\n+    }\n+\n+    match V4(Ipv4Addr::LOCALHOST) {\n+        V4(_) => true,\n+        V6(_) => false,\n+    };\n+\n+    match V4(Ipv4Addr::LOCALHOST) {\n+        V4(_) => false,\n+        V6(_) => true,\n+    };\n+\n+    match V6(Ipv6Addr::LOCALHOST) {\n+        V4(_) => false,\n+        V6(_) => true,\n+    };\n+\n+    match V6(Ipv6Addr::LOCALHOST) {\n+        V4(_) => true,\n+        V6(_) => false,\n+    };\n+\n+    let _ = if let V4(_) = V4(Ipv4Addr::LOCALHOST) {\n+        true\n+    } else {\n+        false\n+    };\n+\n+    ipaddr_const();\n+\n+    let _ = if let V4(_) = gen_ipaddr() {\n+        1\n+    } else if let V6(_) = gen_ipaddr() {\n+        2\n+    } else {\n+        3\n+    };\n+}\n+\n+fn gen_ipaddr() -> IpAddr {\n+    V4(Ipv4Addr::LOCALHOST)\n+}\n+\n+const fn ipaddr_const() {\n+    if let V4(_) = V4(Ipv4Addr::LOCALHOST) {}\n+\n+    if let V6(_) = V6(Ipv6Addr::LOCALHOST) {}\n+\n+    while let V4(_) = V4(Ipv4Addr::LOCALHOST) {}\n+\n+    while let V6(_) = V6(Ipv6Addr::LOCALHOST) {}\n+\n+    match V4(Ipv4Addr::LOCALHOST) {\n+        V4(_) => true,\n+        V6(_) => false,\n+    };\n+\n+    match V6(Ipv6Addr::LOCALHOST) {\n+        V4(_) => false,\n+        V6(_) => true,\n+    };\n+}"}, {"sha": "caf458cd862e01a27b7e53cd2343483667cae4ca", "filename": "tests/ui/redundant_pattern_matching_ipaddr.stderr", "status": "added", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/dc075b426675e61cc46089046cf41d85edd79aaa/tests%2Fui%2Fredundant_pattern_matching_ipaddr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc075b426675e61cc46089046cf41d85edd79aaa/tests%2Fui%2Fredundant_pattern_matching_ipaddr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_ipaddr.stderr?ref=dc075b426675e61cc46089046cf41d85edd79aaa", "patch": "@@ -0,0 +1,130 @@\n+error: redundant pattern matching, consider using `is_ipv4()`\n+  --> $DIR/redundant_pattern_matching_ipaddr.rs:14:12\n+   |\n+LL |     if let V4(_) = &ipaddr {}\n+   |     -------^^^^^---------- help: try this: `if ipaddr.is_ipv4()`\n+   |\n+   = note: `-D clippy::redundant-pattern-matching` implied by `-D warnings`\n+\n+error: redundant pattern matching, consider using `is_ipv4()`\n+  --> $DIR/redundant_pattern_matching_ipaddr.rs:16:12\n+   |\n+LL |     if let V4(_) = V4(Ipv4Addr::LOCALHOST) {}\n+   |     -------^^^^^-------------------------- help: try this: `if V4(Ipv4Addr::LOCALHOST).is_ipv4()`\n+\n+error: redundant pattern matching, consider using `is_ipv6()`\n+  --> $DIR/redundant_pattern_matching_ipaddr.rs:18:12\n+   |\n+LL |     if let V6(_) = V6(Ipv6Addr::LOCALHOST) {}\n+   |     -------^^^^^-------------------------- help: try this: `if V6(Ipv6Addr::LOCALHOST).is_ipv6()`\n+\n+error: redundant pattern matching, consider using `is_ipv4()`\n+  --> $DIR/redundant_pattern_matching_ipaddr.rs:20:15\n+   |\n+LL |     while let V4(_) = V4(Ipv4Addr::LOCALHOST) {}\n+   |     ----------^^^^^-------------------------- help: try this: `while V4(Ipv4Addr::LOCALHOST).is_ipv4()`\n+\n+error: redundant pattern matching, consider using `is_ipv6()`\n+  --> $DIR/redundant_pattern_matching_ipaddr.rs:22:15\n+   |\n+LL |     while let V6(_) = V6(Ipv6Addr::LOCALHOST) {}\n+   |     ----------^^^^^-------------------------- help: try this: `while V6(Ipv6Addr::LOCALHOST).is_ipv6()`\n+\n+error: redundant pattern matching, consider using `is_ipv4()`\n+  --> $DIR/redundant_pattern_matching_ipaddr.rs:32:5\n+   |\n+LL | /     match V4(Ipv4Addr::LOCALHOST) {\n+LL | |         V4(_) => true,\n+LL | |         V6(_) => false,\n+LL | |     };\n+   | |_____^ help: try this: `V4(Ipv4Addr::LOCALHOST).is_ipv4()`\n+\n+error: redundant pattern matching, consider using `is_ipv6()`\n+  --> $DIR/redundant_pattern_matching_ipaddr.rs:37:5\n+   |\n+LL | /     match V4(Ipv4Addr::LOCALHOST) {\n+LL | |         V4(_) => false,\n+LL | |         V6(_) => true,\n+LL | |     };\n+   | |_____^ help: try this: `V4(Ipv4Addr::LOCALHOST).is_ipv6()`\n+\n+error: redundant pattern matching, consider using `is_ipv6()`\n+  --> $DIR/redundant_pattern_matching_ipaddr.rs:42:5\n+   |\n+LL | /     match V6(Ipv6Addr::LOCALHOST) {\n+LL | |         V4(_) => false,\n+LL | |         V6(_) => true,\n+LL | |     };\n+   | |_____^ help: try this: `V6(Ipv6Addr::LOCALHOST).is_ipv6()`\n+\n+error: redundant pattern matching, consider using `is_ipv4()`\n+  --> $DIR/redundant_pattern_matching_ipaddr.rs:47:5\n+   |\n+LL | /     match V6(Ipv6Addr::LOCALHOST) {\n+LL | |         V4(_) => true,\n+LL | |         V6(_) => false,\n+LL | |     };\n+   | |_____^ help: try this: `V6(Ipv6Addr::LOCALHOST).is_ipv4()`\n+\n+error: redundant pattern matching, consider using `is_ipv4()`\n+  --> $DIR/redundant_pattern_matching_ipaddr.rs:52:20\n+   |\n+LL |     let _ = if let V4(_) = V4(Ipv4Addr::LOCALHOST) {\n+   |             -------^^^^^-------------------------- help: try this: `if V4(Ipv4Addr::LOCALHOST).is_ipv4()`\n+\n+error: redundant pattern matching, consider using `is_ipv4()`\n+  --> $DIR/redundant_pattern_matching_ipaddr.rs:60:20\n+   |\n+LL |     let _ = if let V4(_) = gen_ipaddr() {\n+   |             -------^^^^^--------------- help: try this: `if gen_ipaddr().is_ipv4()`\n+\n+error: redundant pattern matching, consider using `is_ipv6()`\n+  --> $DIR/redundant_pattern_matching_ipaddr.rs:62:19\n+   |\n+LL |     } else if let V6(_) = gen_ipaddr() {\n+   |            -------^^^^^--------------- help: try this: `if gen_ipaddr().is_ipv6()`\n+\n+error: redundant pattern matching, consider using `is_ipv4()`\n+  --> $DIR/redundant_pattern_matching_ipaddr.rs:74:12\n+   |\n+LL |     if let V4(_) = V4(Ipv4Addr::LOCALHOST) {}\n+   |     -------^^^^^-------------------------- help: try this: `if V4(Ipv4Addr::LOCALHOST).is_ipv4()`\n+\n+error: redundant pattern matching, consider using `is_ipv6()`\n+  --> $DIR/redundant_pattern_matching_ipaddr.rs:76:12\n+   |\n+LL |     if let V6(_) = V6(Ipv6Addr::LOCALHOST) {}\n+   |     -------^^^^^-------------------------- help: try this: `if V6(Ipv6Addr::LOCALHOST).is_ipv6()`\n+\n+error: redundant pattern matching, consider using `is_ipv4()`\n+  --> $DIR/redundant_pattern_matching_ipaddr.rs:78:15\n+   |\n+LL |     while let V4(_) = V4(Ipv4Addr::LOCALHOST) {}\n+   |     ----------^^^^^-------------------------- help: try this: `while V4(Ipv4Addr::LOCALHOST).is_ipv4()`\n+\n+error: redundant pattern matching, consider using `is_ipv6()`\n+  --> $DIR/redundant_pattern_matching_ipaddr.rs:80:15\n+   |\n+LL |     while let V6(_) = V6(Ipv6Addr::LOCALHOST) {}\n+   |     ----------^^^^^-------------------------- help: try this: `while V6(Ipv6Addr::LOCALHOST).is_ipv6()`\n+\n+error: redundant pattern matching, consider using `is_ipv4()`\n+  --> $DIR/redundant_pattern_matching_ipaddr.rs:82:5\n+   |\n+LL | /     match V4(Ipv4Addr::LOCALHOST) {\n+LL | |         V4(_) => true,\n+LL | |         V6(_) => false,\n+LL | |     };\n+   | |_____^ help: try this: `V4(Ipv4Addr::LOCALHOST).is_ipv4()`\n+\n+error: redundant pattern matching, consider using `is_ipv6()`\n+  --> $DIR/redundant_pattern_matching_ipaddr.rs:87:5\n+   |\n+LL | /     match V6(Ipv6Addr::LOCALHOST) {\n+LL | |         V4(_) => false,\n+LL | |         V6(_) => true,\n+LL | |     };\n+   | |_____^ help: try this: `V6(Ipv6Addr::LOCALHOST).is_ipv6()`\n+\n+error: aborting due to 18 previous errors\n+"}, {"sha": "66f580a0a683426e250479c01e5a8a6c1ff86dd6", "filename": "tests/ui/redundant_pattern_matching_option.fixed", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dc075b426675e61cc46089046cf41d85edd79aaa/tests%2Fui%2Fredundant_pattern_matching_option.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/dc075b426675e61cc46089046cf41d85edd79aaa/tests%2Fui%2Fredundant_pattern_matching_option.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_option.fixed?ref=dc075b426675e61cc46089046cf41d85edd79aaa", "patch": "@@ -37,8 +37,7 @@ fn main() {\n     let _ = None::<()>.is_none();\n \n     let opt = Some(false);\n-    let x = if opt.is_some() { true } else { false };\n-    takes_bool(x);\n+    let _ = if opt.is_some() { true } else { false };\n \n     issue6067();\n \n@@ -55,8 +54,6 @@ fn gen_opt() -> Option<()> {\n     None\n }\n \n-fn takes_bool(_: bool) {}\n-\n fn foo() {}\n \n fn bar() {}"}, {"sha": "f18b27b8b95c30b4cc33e5756e2d51d4bf5bcd75", "filename": "tests/ui/redundant_pattern_matching_option.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dc075b426675e61cc46089046cf41d85edd79aaa/tests%2Fui%2Fredundant_pattern_matching_option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc075b426675e61cc46089046cf41d85edd79aaa/tests%2Fui%2Fredundant_pattern_matching_option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_option.rs?ref=dc075b426675e61cc46089046cf41d85edd79aaa", "patch": "@@ -46,8 +46,7 @@ fn main() {\n     };\n \n     let opt = Some(false);\n-    let x = if let Some(_) = opt { true } else { false };\n-    takes_bool(x);\n+    let _ = if let Some(_) = opt { true } else { false };\n \n     issue6067();\n \n@@ -64,8 +63,6 @@ fn gen_opt() -> Option<()> {\n     None\n }\n \n-fn takes_bool(_: bool) {}\n-\n fn foo() {}\n \n fn bar() {}"}, {"sha": "58482a0ab70dcbe0c4c1a2bef214861dcbd06d3a", "filename": "tests/ui/redundant_pattern_matching_option.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/dc075b426675e61cc46089046cf41d85edd79aaa/tests%2Fui%2Fredundant_pattern_matching_option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc075b426675e61cc46089046cf41d85edd79aaa/tests%2Fui%2Fredundant_pattern_matching_option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_option.stderr?ref=dc075b426675e61cc46089046cf41d85edd79aaa", "patch": "@@ -73,47 +73,47 @@ LL | |     };\n error: redundant pattern matching, consider using `is_some()`\n   --> $DIR/redundant_pattern_matching_option.rs:49:20\n    |\n-LL |     let x = if let Some(_) = opt { true } else { false };\n+LL |     let _ = if let Some(_) = opt { true } else { false };\n    |             -------^^^^^^^------ help: try this: `if opt.is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:54:20\n+  --> $DIR/redundant_pattern_matching_option.rs:53:20\n    |\n LL |     let _ = if let Some(_) = gen_opt() {\n    |             -------^^^^^^^------------ help: try this: `if gen_opt().is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:56:19\n+  --> $DIR/redundant_pattern_matching_option.rs:55:19\n    |\n LL |     } else if let None = gen_opt() {\n    |            -------^^^^------------ help: try this: `if gen_opt().is_none()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:77:12\n+  --> $DIR/redundant_pattern_matching_option.rs:74:12\n    |\n LL |     if let Some(_) = Some(42) {}\n    |     -------^^^^^^^----------- help: try this: `if Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:79:12\n+  --> $DIR/redundant_pattern_matching_option.rs:76:12\n    |\n LL |     if let None = None::<()> {}\n    |     -------^^^^------------- help: try this: `if None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:81:15\n+  --> $DIR/redundant_pattern_matching_option.rs:78:15\n    |\n LL |     while let Some(_) = Some(42) {}\n    |     ----------^^^^^^^----------- help: try this: `while Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:83:15\n+  --> $DIR/redundant_pattern_matching_option.rs:80:15\n    |\n LL |     while let None = None::<()> {}\n    |     ----------^^^^------------- help: try this: `while None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:85:5\n+  --> $DIR/redundant_pattern_matching_option.rs:82:5\n    |\n LL | /     match Some(42) {\n LL | |         Some(_) => true,\n@@ -122,7 +122,7 @@ LL | |     };\n    | |_____^ help: try this: `Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:90:5\n+  --> $DIR/redundant_pattern_matching_option.rs:87:5\n    |\n LL | /     match None::<()> {\n LL | |         Some(_) => false,"}, {"sha": "465aa80dac27c4512eef6b6011dbe4840fea1f22", "filename": "tests/ui/redundant_pattern_matching_poll.fixed", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dc075b426675e61cc46089046cf41d85edd79aaa/tests%2Fui%2Fredundant_pattern_matching_poll.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/dc075b426675e61cc46089046cf41d85edd79aaa/tests%2Fui%2Fredundant_pattern_matching_poll.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_poll.fixed?ref=dc075b426675e61cc46089046cf41d85edd79aaa", "patch": "@@ -34,8 +34,7 @@ fn main() {\n     let _ = Pending::<()>.is_pending();\n \n     let poll = Ready(false);\n-    let x = if poll.is_ready() { true } else { false };\n-    takes_poll(x);\n+    let _ = if poll.is_ready() { true } else { false };\n \n     poll_const();\n \n@@ -52,8 +51,6 @@ fn gen_poll() -> Poll<()> {\n     Pending\n }\n \n-fn takes_poll(_: bool) {}\n-\n fn foo() {}\n \n fn bar() {}"}, {"sha": "7891ff353b13ee5d9ba4c81a5bde2004a3c68dde", "filename": "tests/ui/redundant_pattern_matching_poll.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dc075b426675e61cc46089046cf41d85edd79aaa/tests%2Fui%2Fredundant_pattern_matching_poll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc075b426675e61cc46089046cf41d85edd79aaa/tests%2Fui%2Fredundant_pattern_matching_poll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_poll.rs?ref=dc075b426675e61cc46089046cf41d85edd79aaa", "patch": "@@ -43,8 +43,7 @@ fn main() {\n     };\n \n     let poll = Ready(false);\n-    let x = if let Ready(_) = poll { true } else { false };\n-    takes_poll(x);\n+    let _ = if let Ready(_) = poll { true } else { false };\n \n     poll_const();\n \n@@ -61,8 +60,6 @@ fn gen_poll() -> Poll<()> {\n     Pending\n }\n \n-fn takes_poll(_: bool) {}\n-\n fn foo() {}\n \n fn bar() {}"}, {"sha": "5ffc6c47c90a220691a4069329a5ec0a3b279167", "filename": "tests/ui/redundant_pattern_matching_poll.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/dc075b426675e61cc46089046cf41d85edd79aaa/tests%2Fui%2Fredundant_pattern_matching_poll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc075b426675e61cc46089046cf41d85edd79aaa/tests%2Fui%2Fredundant_pattern_matching_poll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_poll.stderr?ref=dc075b426675e61cc46089046cf41d85edd79aaa", "patch": "@@ -67,47 +67,47 @@ LL | |     };\n error: redundant pattern matching, consider using `is_ready()`\n   --> $DIR/redundant_pattern_matching_poll.rs:46:20\n    |\n-LL |     let x = if let Ready(_) = poll { true } else { false };\n+LL |     let _ = if let Ready(_) = poll { true } else { false };\n    |             -------^^^^^^^^------- help: try this: `if poll.is_ready()`\n \n error: redundant pattern matching, consider using `is_ready()`\n-  --> $DIR/redundant_pattern_matching_poll.rs:51:20\n+  --> $DIR/redundant_pattern_matching_poll.rs:50:20\n    |\n LL |     let _ = if let Ready(_) = gen_poll() {\n    |             -------^^^^^^^^------------- help: try this: `if gen_poll().is_ready()`\n \n error: redundant pattern matching, consider using `is_pending()`\n-  --> $DIR/redundant_pattern_matching_poll.rs:53:19\n+  --> $DIR/redundant_pattern_matching_poll.rs:52:19\n    |\n LL |     } else if let Pending = gen_poll() {\n    |            -------^^^^^^^------------- help: try this: `if gen_poll().is_pending()`\n \n error: redundant pattern matching, consider using `is_ready()`\n-  --> $DIR/redundant_pattern_matching_poll.rs:71:12\n+  --> $DIR/redundant_pattern_matching_poll.rs:68:12\n    |\n LL |     if let Ready(_) = Ready(42) {}\n    |     -------^^^^^^^^------------ help: try this: `if Ready(42).is_ready()`\n \n error: redundant pattern matching, consider using `is_pending()`\n-  --> $DIR/redundant_pattern_matching_poll.rs:73:12\n+  --> $DIR/redundant_pattern_matching_poll.rs:70:12\n    |\n LL |     if let Pending = Pending::<()> {}\n    |     -------^^^^^^^---------------- help: try this: `if Pending::<()>.is_pending()`\n \n error: redundant pattern matching, consider using `is_ready()`\n-  --> $DIR/redundant_pattern_matching_poll.rs:75:15\n+  --> $DIR/redundant_pattern_matching_poll.rs:72:15\n    |\n LL |     while let Ready(_) = Ready(42) {}\n    |     ----------^^^^^^^^------------ help: try this: `while Ready(42).is_ready()`\n \n error: redundant pattern matching, consider using `is_pending()`\n-  --> $DIR/redundant_pattern_matching_poll.rs:77:15\n+  --> $DIR/redundant_pattern_matching_poll.rs:74:15\n    |\n LL |     while let Pending = Pending::<()> {}\n    |     ----------^^^^^^^---------------- help: try this: `while Pending::<()>.is_pending()`\n \n error: redundant pattern matching, consider using `is_ready()`\n-  --> $DIR/redundant_pattern_matching_poll.rs:79:5\n+  --> $DIR/redundant_pattern_matching_poll.rs:76:5\n    |\n LL | /     match Ready(42) {\n LL | |         Ready(_) => true,\n@@ -116,7 +116,7 @@ LL | |     };\n    | |_____^ help: try this: `Ready(42).is_ready()`\n \n error: redundant pattern matching, consider using `is_pending()`\n-  --> $DIR/redundant_pattern_matching_poll.rs:84:5\n+  --> $DIR/redundant_pattern_matching_poll.rs:81:5\n    |\n LL | /     match Pending::<()> {\n LL | |         Ready(_) => false,"}]}