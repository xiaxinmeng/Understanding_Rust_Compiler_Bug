{"sha": "29901e027c8f343e0366e308a9bf7edb2618c867", "node_id": "C_kwDOAAsO6NoAKDI5OTAxZTAyN2M4ZjM0M2UwMzY2ZTMwOGE5YmY3ZWRiMjYxOGM4Njc", "commit": {"author": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2023-01-27T19:29:04Z"}, "committer": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2023-01-27T19:29:04Z"}, "message": "yeet", "tree": {"sha": "9e8f260538cb5a331d3e2af3860668424135b8b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e8f260538cb5a331d3e2af3860668424135b8b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29901e027c8f343e0366e308a9bf7edb2618c867", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29901e027c8f343e0366e308a9bf7edb2618c867", "html_url": "https://github.com/rust-lang/rust/commit/29901e027c8f343e0366e308a9bf7edb2618c867", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29901e027c8f343e0366e308a9bf7edb2618c867/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7948c843de94245c794e8c63dd4301a78bb5ba3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7948c843de94245c794e8c63dd4301a78bb5ba3", "html_url": "https://github.com/rust-lang/rust/commit/d7948c843de94245c794e8c63dd4301a78bb5ba3"}], "stats": {"total": 114, "additions": 26, "deletions": 88}, "files": [{"sha": "a567b6acdbeeb2dc802175bea078a979d6795a7c", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 26, "deletions": 88, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/29901e027c8f343e0366e308a9bf7edb2618c867/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29901e027c8f343e0366e308a9bf7edb2618c867/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=29901e027c8f343e0366e308a9bf7edb2618c867", "patch": "@@ -37,7 +37,10 @@ use rustc_middle::traits::ObligationCause;\n use rustc_middle::ty::error::{ExpectedFound, TypeError};\n use rustc_middle::ty::relate::{self, Relate, RelateResult, TypeRelation};\n use rustc_middle::ty::subst::SubstsRef;\n-use rustc_middle::ty::{self, InferConst, Ty, TyCtxt, TypeVisitable};\n+use rustc_middle::ty::{\n+    self, FallibleTypeFolder, InferConst, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable,\n+    TypeVisitable,\n+};\n use rustc_middle::ty::{IntType, UintType};\n use rustc_span::{Span, DUMMY_SP};\n \n@@ -140,8 +143,6 @@ impl<'tcx> InferCtxt<'tcx> {\n         let a = self.shallow_resolve(a);\n         let b = self.shallow_resolve(b);\n \n-        let a_is_expected = relation.a_is_expected();\n-\n         match (a.kind(), b.kind()) {\n             (\n                 ty::ConstKind::Infer(InferConst::Var(a_vid)),\n@@ -158,11 +159,11 @@ impl<'tcx> InferCtxt<'tcx> {\n             }\n \n             (ty::ConstKind::Infer(InferConst::Var(vid)), _) => {\n-                return self.unify_const_variable(relation.param_env(), vid, b, a_is_expected);\n+                return self.unify_const_variable(vid, b);\n             }\n \n             (_, ty::ConstKind::Infer(InferConst::Var(vid))) => {\n-                return self.unify_const_variable(relation.param_env(), vid, a, !a_is_expected);\n+                return self.unify_const_variable(vid, a);\n             }\n             (ty::ConstKind::Unevaluated(..), _) if self.tcx.lazy_normalization() => {\n                 // FIXME(#59490): Need to remove the leak check to accommodate\n@@ -223,10 +224,8 @@ impl<'tcx> InferCtxt<'tcx> {\n     #[instrument(level = \"debug\", skip(self))]\n     fn unify_const_variable(\n         &self,\n-        param_env: ty::ParamEnv<'tcx>,\n         target_vid: ty::ConstVid<'tcx>,\n         ct: ty::Const<'tcx>,\n-        vid_is_expected: bool,\n     ) -> RelateResult<'tcx, ty::Const<'tcx>> {\n         let (for_universe, span) = {\n             let mut inner = self.inner.borrow_mut();\n@@ -239,8 +238,12 @@ impl<'tcx> InferCtxt<'tcx> {\n                 ConstVariableValue::Unknown { universe } => (universe, var_value.origin.span),\n             }\n         };\n-        let value = ConstInferUnifier { infcx: self, span, param_env, for_universe, target_vid }\n-            .relate(ct, ct)?;\n+        let value = ct.try_fold_with(&mut ConstInferUnifier {\n+            infcx: self,\n+            span,\n+            for_universe,\n+            target_vid,\n+        })?;\n \n         self.inner.borrow_mut().const_unification_table().union_value(\n             target_vid,\n@@ -800,8 +803,6 @@ struct ConstInferUnifier<'cx, 'tcx> {\n \n     span: Span,\n \n-    param_env: ty::ParamEnv<'tcx>,\n-\n     for_universe: ty::UniverseIndex,\n \n     /// The vid of the const variable that is in the process of being\n@@ -810,69 +811,23 @@ struct ConstInferUnifier<'cx, 'tcx> {\n     target_vid: ty::ConstVid<'tcx>,\n }\n \n-// We use `TypeRelation` here to propagate `RelateResult` upwards.\n-//\n-// Both inputs are expected to be the same.\n-impl<'tcx> TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {\n-    fn tcx(&self) -> TyCtxt<'tcx> {\n-        self.infcx.tcx\n-    }\n-\n-    fn intercrate(&self) -> bool {\n-        assert!(!self.infcx.intercrate);\n-        false\n-    }\n-\n-    fn param_env(&self) -> ty::ParamEnv<'tcx> {\n-        self.param_env\n-    }\n-\n-    fn tag(&self) -> &'static str {\n-        \"ConstInferUnifier\"\n-    }\n-\n-    fn a_is_expected(&self) -> bool {\n-        true\n-    }\n-\n-    fn mark_ambiguous(&mut self) {\n-        bug!()\n-    }\n-\n-    fn relate_with_variance<T: Relate<'tcx>>(\n-        &mut self,\n-        _variance: ty::Variance,\n-        _info: ty::VarianceDiagInfo<'tcx>,\n-        a: T,\n-        b: T,\n-    ) -> RelateResult<'tcx, T> {\n-        // We don't care about variance here.\n-        self.relate(a, b)\n-    }\n+impl<'tcx> FallibleTypeFolder<'tcx> for ConstInferUnifier<'_, 'tcx> {\n+    type Error = TypeError<'tcx>;\n \n-    fn binders<T>(\n-        &mut self,\n-        a: ty::Binder<'tcx, T>,\n-        b: ty::Binder<'tcx, T>,\n-    ) -> RelateResult<'tcx, ty::Binder<'tcx, T>>\n-    where\n-        T: Relate<'tcx>,\n-    {\n-        Ok(a.rebind(self.relate(a.skip_binder(), b.skip_binder())?))\n+    fn tcx<'a>(&'a self) -> TyCtxt<'tcx> {\n+        self.infcx.tcx\n     }\n \n     #[instrument(level = \"debug\", skip(self), ret)]\n-    fn tys(&mut self, t: Ty<'tcx>, _t: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> {\n-        debug_assert_eq!(t, _t);\n-\n+    fn try_fold_ty(&mut self, t: Ty<'tcx>) -> Result<Ty<'tcx>, TypeError<'tcx>> {\n         match t.kind() {\n             &ty::Infer(ty::TyVar(vid)) => {\n                 let vid = self.infcx.inner.borrow_mut().type_variables().root_var(vid);\n                 let probe = self.infcx.inner.borrow_mut().type_variables().probe(vid);\n                 match probe {\n                     TypeVariableValue::Known { value: u } => {\n                         debug!(\"ConstOccursChecker: known value {:?}\", u);\n-                        self.tys(u, u)\n+                        u.try_fold_with(self)\n                     }\n                     TypeVariableValue::Unknown { universe } => {\n                         if self.for_universe.can_name(universe) {\n@@ -892,16 +847,15 @@ impl<'tcx> TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {\n                 }\n             }\n             ty::Infer(ty::IntVar(_) | ty::FloatVar(_)) => Ok(t),\n-            _ => relate::super_relate_tys(self, t, t),\n+            _ => t.try_super_fold_with(self),\n         }\n     }\n \n-    fn regions(\n+    #[instrument(level = \"debug\", skip(self), ret)]\n+    fn try_fold_region(\n         &mut self,\n         r: ty::Region<'tcx>,\n-        _r: ty::Region<'tcx>,\n-    ) -> RelateResult<'tcx, ty::Region<'tcx>> {\n-        debug_assert_eq!(r, _r);\n+    ) -> Result<ty::Region<'tcx>, TypeError<'tcx>> {\n         debug!(\"ConstInferUnifier: r={:?}\", r);\n \n         match *r {\n@@ -930,14 +884,8 @@ impl<'tcx> TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {\n         }\n     }\n \n-    #[instrument(level = \"debug\", skip(self))]\n-    fn consts(\n-        &mut self,\n-        c: ty::Const<'tcx>,\n-        _c: ty::Const<'tcx>,\n-    ) -> RelateResult<'tcx, ty::Const<'tcx>> {\n-        debug_assert_eq!(c, _c);\n-\n+    #[instrument(level = \"debug\", skip(self), ret)]\n+    fn try_fold_const(&mut self, c: ty::Const<'tcx>) -> Result<ty::Const<'tcx>, TypeError<'tcx>> {\n         match c.kind() {\n             ty::ConstKind::Infer(InferConst::Var(vid)) => {\n                 // Check if the current unification would end up\n@@ -958,7 +906,7 @@ impl<'tcx> TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {\n                 let var_value =\n                     self.infcx.inner.borrow_mut().const_unification_table().probe_value(vid);\n                 match var_value.val {\n-                    ConstVariableValue::Known { value: u } => self.consts(u, u),\n+                    ConstVariableValue::Known { value: u } => u.try_fold_with(self),\n                     ConstVariableValue::Unknown { universe } => {\n                         if self.for_universe.can_name(universe) {\n                             Ok(c)\n@@ -977,17 +925,7 @@ impl<'tcx> TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {\n                     }\n                 }\n             }\n-            ty::ConstKind::Unevaluated(ty::UnevaluatedConst { def, substs }) => {\n-                let substs = self.relate_with_variance(\n-                    ty::Variance::Invariant,\n-                    ty::VarianceDiagInfo::default(),\n-                    substs,\n-                    substs,\n-                )?;\n-\n-                Ok(self.tcx().mk_const(ty::UnevaluatedConst { def, substs }, c.ty()))\n-            }\n-            _ => relate::super_relate_consts(self, c, c),\n+            _ => c.try_super_fold_with(self),\n         }\n     }\n }"}]}