{"sha": "552024a52eb17b2542e87f9fc97b7b643707d759", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1MjAyNGE1MmViMTdiMjU0MmU4N2Y5ZmM5N2I3YjY0MzcwN2Q3NTk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-02-05T19:49:27Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-02-14T18:17:54Z"}, "message": "check that types \"need drop\" before we access them\n\nAlso, add some comments and remove extra deref.", "tree": {"sha": "4b5932b3eb0947c61bad5e9958640d49c2f1f165", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b5932b3eb0947c61bad5e9958640d49c2f1f165"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/552024a52eb17b2542e87f9fc97b7b643707d759", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlqEfVIACgkQAXYLT59T\n8VSAjA//WrIpFspz0D8rMp378oGb4EkT1HY47B6I7H6DqKDXU46suWp7eXg/4zPh\nIr8lbcb38oGQnEUD6fqiygRqCmdNwGUy2yGR76h6ZXSJF+rX0GgDc3w/1YjSi6cb\n2dTY8Y76VQaFDxuAbaeWx6ATET5c3qK9OgWXr1/nirf/EDiW+WYl/BfsRo34EYn8\nLG5EUsiAenQiAbO0m5XRCp3ViZof0VlKhBey5AMk4v0g4/+zDuMgGbLl7HiR7bWd\n6XFtSRv11nxh45OlxXb3bqnb9n3iyQGLIboy1e5ODc8ZDuk2hmZvY5xsrE/iRzqc\nHMczdlF2T8onLXjRGD3uXWmZqob1gvrh3DysW/PIdKL3s370Tf9BkAvkZI66fOAS\nQc5mnRcszxSzMGYn0U927Wk0RbkBFz9fOPmw5oeT0EQj+yE8ku57Z3OwFr1rgisU\nB5D90bj9wAaK/YYERqhxkJw0KgmU9G1dyLeLopLHyxxpJ/pVu7McCKbuCKuebkwP\nomio5cprgBvuee07FfnAuRTCG6b77ocuZrRpvO+k2LAtNEF6V+cEX4a6+BDvJIjS\nkOsttw+Z4VMiMLRVjDQj/C+u8hpUthSvvmHBSPyDH13P8ICF50j0ZAdohyv8TAqq\nJG9J8hbol6c8Vax0+g8tHKG2JkHYZ8R2wqXkPBygNCpjn/by8lQ=\n=XeCE\n-----END PGP SIGNATURE-----", "payload": "tree 4b5932b3eb0947c61bad5e9958640d49c2f1f165\nparent 5fd64dde2198971df0869cbf4944d3996395b826\nauthor Niko Matsakis <niko@alum.mit.edu> 1517860167 -0500\ncommitter David Wood <david@davidtw.co> 1518632274 +0000\n\ncheck that types \"need drop\" before we access them\n\nAlso, add some comments and remove extra deref.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/552024a52eb17b2542e87f9fc97b7b643707d759", "html_url": "https://github.com/rust-lang/rust/commit/552024a52eb17b2542e87f9fc97b7b643707d759", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/552024a52eb17b2542e87f9fc97b7b643707d759/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fd64dde2198971df0869cbf4944d3996395b826", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fd64dde2198971df0869cbf4944d3996395b826", "html_url": "https://github.com/rust-lang/rust/commit/5fd64dde2198971df0869cbf4944d3996395b826"}], "stats": {"total": 40, "additions": 28, "deletions": 12}, "files": [{"sha": "3cdfe64000624e2158526d37677c14a6a3fcbc28", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 28, "deletions": 12, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/552024a52eb17b2542e87f9fc97b7b643707d759/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552024a52eb17b2542e87f9fc97b7b643707d759/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=552024a52eb17b2542e87f9fc97b7b643707d759", "patch": "@@ -711,6 +711,12 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n              self.tcx.sess.opts.debugging_opts.two_phase_beyond_autoref)\n     }\n \n+    /// Invokes `access_place` as appropriate for dropping the value\n+    /// at `drop_place`. Note that the *actual* `Drop` in the MIR is\n+    /// always for a variable (e.g., `Drop(x)`) -- but we recursively\n+    /// break this variable down into subpaths (e.g., `Drop(x.foo)`)\n+    /// to indicate more precisely which fields might actually be\n+    /// accessed by a destructor.\n     fn visit_terminator_drop(\n         &mut self,\n         loc: Location,\n@@ -721,15 +727,16 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n     ) {\n         let ty = drop_place.ty(self.mir, self.tcx).to_ty(self.tcx);\n         match ty.sty {\n-            // When a struct is being dropped, we need to check whether it has a\n-            // destructor, if it does, then we can call it, if it does not then we\n-            // need to check the individual fields instead.\n-            // See #47703.\n+            // When a struct is being dropped, we need to check\n+            // whether it has a destructor, if it does, then we can\n+            // call it, if it does not then we need to check the\n+            // individual fields instead. This way if `foo` has a\n+            // destructor but `bar` does not, we will only check for\n+            // borrows of `x.foo` and not `x.bar`. See #47703.\n             ty::TyAdt(def, substs) if def.is_struct() && !def.has_dtor(self.tcx) => {\n                 for (index, field) in def.all_fields().enumerate() {\n                     let place = drop_place.clone();\n                     let place = place.field(Field::new(index), field.ty(self.tcx, substs));\n-                    let place = place.deref();\n \n                     self.visit_terminator_drop(\n                         loc,\n@@ -741,13 +748,22 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 }\n             },\n             _ => {\n-                self.access_place(\n-                    ContextKind::Drop.new(loc),\n-                    (drop_place, span),\n-                    (Deep, Write(WriteKind::StorageDeadOrDrop)),\n-                    LocalMutationIsAllowed::Yes,\n-                    flow_state,\n-                );\n+                // We have now refined the type of the value being\n+                // dropped (potentially) to just the type of a\n+                // subfield; so check whether that field's type still\n+                // \"needs drop\". If so, we assume that the destructor\n+                // may access any data it likes (i.e., a Deep Write).\n+                let gcx = self.tcx.global_tcx();\n+                let erased_ty = gcx.lift(&self.tcx.erase_regions(&ty)).unwrap();\n+                if erased_ty.needs_drop(gcx, self.param_env) {\n+                    self.access_place(\n+                        ContextKind::Drop.new(loc),\n+                        (drop_place, span),\n+                        (Deep, Write(WriteKind::StorageDeadOrDrop)),\n+                        LocalMutationIsAllowed::Yes,\n+                        flow_state,\n+                    );\n+                }\n             },\n         }\n     }"}]}