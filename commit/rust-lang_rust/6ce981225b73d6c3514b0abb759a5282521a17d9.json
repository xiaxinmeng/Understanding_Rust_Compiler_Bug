{"sha": "6ce981225b73d6c3514b0abb759a5282521a17d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjZTk4MTIyNWI3M2Q2YzM1MTRiMGFiYjc1OWE1MjgyNTIxYTE3ZDk=", "commit": {"author": {"name": "JarredAllen", "email": "jarredallen73@gmail.com", "date": "2020-06-25T18:58:47Z"}, "committer": {"name": "JarredAllen", "email": "jarredallen73@gmail.com", "date": "2020-07-03T23:51:44Z"}, "message": "Clean existing lint code to match new lint", "tree": {"sha": "663dc21b1d6d598193cb26a1b063eab358d2c123", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/663dc21b1d6d598193cb26a1b063eab358d2c123"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ce981225b73d6c3514b0abb759a5282521a17d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ce981225b73d6c3514b0abb759a5282521a17d9", "html_url": "https://github.com/rust-lang/rust/commit/6ce981225b73d6c3514b0abb759a5282521a17d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ce981225b73d6c3514b0abb759a5282521a17d9/comments", "author": {"login": "JarredAllen", "id": 19656507, "node_id": "MDQ6VXNlcjE5NjU2NTA3", "avatar_url": "https://avatars.githubusercontent.com/u/19656507?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JarredAllen", "html_url": "https://github.com/JarredAllen", "followers_url": "https://api.github.com/users/JarredAllen/followers", "following_url": "https://api.github.com/users/JarredAllen/following{/other_user}", "gists_url": "https://api.github.com/users/JarredAllen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JarredAllen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JarredAllen/subscriptions", "organizations_url": "https://api.github.com/users/JarredAllen/orgs", "repos_url": "https://api.github.com/users/JarredAllen/repos", "events_url": "https://api.github.com/users/JarredAllen/events{/privacy}", "received_events_url": "https://api.github.com/users/JarredAllen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JarredAllen", "id": 19656507, "node_id": "MDQ6VXNlcjE5NjU2NTA3", "avatar_url": "https://avatars.githubusercontent.com/u/19656507?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JarredAllen", "html_url": "https://github.com/JarredAllen", "followers_url": "https://api.github.com/users/JarredAllen/followers", "following_url": "https://api.github.com/users/JarredAllen/following{/other_user}", "gists_url": "https://api.github.com/users/JarredAllen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JarredAllen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JarredAllen/subscriptions", "organizations_url": "https://api.github.com/users/JarredAllen/orgs", "repos_url": "https://api.github.com/users/JarredAllen/repos", "events_url": "https://api.github.com/users/JarredAllen/events{/privacy}", "received_events_url": "https://api.github.com/users/JarredAllen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ccb999851aaa4d3e9cd97110bd6523a6c3df46fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccb999851aaa4d3e9cd97110bd6523a6c3df46fd", "html_url": "https://github.com/rust-lang/rust/commit/ccb999851aaa4d3e9cd97110bd6523a6c3df46fd"}], "stats": {"total": 262, "additions": 147, "deletions": 115}, "files": [{"sha": "c4397560d7db10390f921851488551c738e34a2e", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6ce981225b73d6c3514b0abb759a5282521a17d9/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce981225b73d6c3514b0abb759a5282521a17d9/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=6ce981225b73d6c3514b0abb759a5282521a17d9", "patch": "@@ -480,12 +480,15 @@ fn is_relevant_trait(cx: &LateContext<'_>, item: &TraitItem<'_>) -> bool {\n     }\n }\n \n-fn is_relevant_block(cx: &LateContext<'_>, tables: &ty::TypeckTables<'_>, block: &Block<'_>) -> bool {\n-    block.stmts.first().map_or(block.expr.as_ref().map_or(false, |e| is_relevant_expr(cx, tables, e)), |stmt| match &stmt.kind {\n+fn is_relevant_block(cx: &LateContext<'_, '_>, tables: &ty::TypeckTables<'_>, block: &Block<'_>) -> bool {\n+    block.stmts.first().map_or(\n+        block.expr.as_ref().map_or(false, |e| is_relevant_expr(cx, tables, e)),\n+        |stmt| match &stmt.kind {\n             StmtKind::Local(_) => true,\n             StmtKind::Expr(expr) | StmtKind::Semi(expr) => is_relevant_expr(cx, tables, expr),\n             _ => false,\n-        })\n+        },\n+    )\n }\n \n fn is_relevant_expr(cx: &LateContext<'_>, tables: &ty::TypeckTables<'_>, expr: &Expr<'_>) -> bool {\n@@ -495,7 +498,10 @@ fn is_relevant_expr(cx: &LateContext<'_>, tables: &ty::TypeckTables<'_>, expr: &\n         ExprKind::Ret(None) | ExprKind::Break(_, None) => false,\n         ExprKind::Call(path_expr, _) => {\n             if let ExprKind::Path(qpath) = &path_expr.kind {\n-                tables.qpath_res(qpath, path_expr.hir_id).opt_def_id().map_or(true, |fun_id| !match_def_path(cx, fun_id, &paths::BEGIN_PANIC))\n+                tables\n+                    .qpath_res(qpath, path_expr.hir_id)\n+                    .opt_def_id()\n+                    .map_or(true, |fun_id| !match_def_path(cx, fun_id, &paths::BEGIN_PANIC))\n             } else {\n                 true\n             }"}, {"sha": "5426e14ead573133b24e32c7bd1de1cb76cec0d3", "filename": "clippy_lints/src/if_let_mutex.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6ce981225b73d6c3514b0abb759a5282521a17d9/clippy_lints%2Fsrc%2Fif_let_mutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce981225b73d6c3514b0abb759a5282521a17d9/clippy_lints%2Fsrc%2Fif_let_mutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_let_mutex.rs?ref=6ce981225b73d6c3514b0abb759a5282521a17d9", "patch": "@@ -136,8 +136,9 @@ impl<'tcx> Visitor<'tcx> for ArmVisitor<'_, 'tcx> {\n }\n \n impl<'tcx, 'l> ArmVisitor<'tcx, 'l> {\n-    fn same_mutex(&self, cx: &LateContext<'_>, op_mutex: &Expr<'_>) -> bool {\n-        self.found_mutex.map_or(false, |arm_mutex| SpanlessEq::new(cx).eq_expr(op_mutex, arm_mutex))\n+    fn same_mutex(&self, cx: &LateContext<'_, '_>, op_mutex: &Expr<'_>) -> bool {\n+        self.found_mutex\n+            .map_or(false, |arm_mutex| SpanlessEq::new(cx).eq_expr(op_mutex, arm_mutex))\n     }\n }\n "}, {"sha": "1b09328ceabb004275f41c031f913d132154ec64", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6ce981225b73d6c3514b0abb759a5282521a17d9/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce981225b73d6c3514b0abb759a5282521a17d9/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=6ce981225b73d6c3514b0abb759a5282521a17d9", "patch": "@@ -302,12 +302,12 @@ fn has_is_empty(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n \n     let ty = &walk_ptrs_ty(cx.tables().expr_ty(expr));\n     match ty.kind {\n-        ty::Dynamic(ref tt, ..) => {\n-            tt.principal().map_or(false, |principal| cx.tcx\n-                    .associated_items(principal.def_id())\n-                    .in_definition_order()\n-                    .any(|item| is_is_empty(cx, &item)))\n-        },\n+        ty::Dynamic(ref tt, ..) => tt.principal().map_or(false, |principal| {\n+            cx.tcx\n+                .associated_items(principal.def_id())\n+                .in_definition_order()\n+                .any(|item| is_is_empty(cx, &item))\n+        }),\n         ty::Projection(ref proj) => has_is_empty_impl(cx, proj.item_def_id),\n         ty::Adt(id, _) => has_is_empty_impl(cx, id.did),\n         ty::Array(..) | ty::Slice(..) | ty::Str => true,"}, {"sha": "a36fdca5d5de6a5816d8ff369501fad9c651b3dd", "filename": "clippy_lints/src/literal_representation.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6ce981225b73d6c3514b0abb759a5282521a17d9/clippy_lints%2Fsrc%2Fliteral_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce981225b73d6c3514b0abb759a5282521a17d9/clippy_lints%2Fsrc%2Fliteral_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_representation.rs?ref=6ce981225b73d6c3514b0abb759a5282521a17d9", "patch": "@@ -265,10 +265,12 @@ impl LiteralDigitGrouping {\n         let (part, mistyped_suffixes, missing_char) = if let Some((_, exponent)) = &mut num_lit.exponent {\n             (exponent, &[\"32\", \"64\"][..], 'f')\n         } else {\n-            num_lit.fraction.as_mut().map_or(\n-                (&mut num_lit.integer, &[\"8\", \"16\", \"32\", \"64\"][..], 'i'),\n-                |fraction| (fraction, &[\"32\", \"64\"][..], 'f')\n-            )\n+            num_lit\n+                .fraction\n+                .as_mut()\n+                .map_or((&mut num_lit.integer, &[\"8\", \"16\", \"32\", \"64\"][..], 'i'), |fraction| {\n+                    (fraction, &[\"32\", \"64\"][..], 'f')\n+                })\n         };\n \n         let mut split = part.rsplit('_');"}, {"sha": "b803d753b6d0474c9d17b28e910ca610816dd5ab", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6ce981225b73d6c3514b0abb759a5282521a17d9/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce981225b73d6c3514b0abb759a5282521a17d9/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=6ce981225b73d6c3514b0abb759a5282521a17d9", "patch": "@@ -686,9 +686,9 @@ fn never_loop_expr(expr: &Expr<'_>, main_loop_id: HirId) -> NeverLoopResult {\n                 NeverLoopResult::AlwaysBreak\n             }\n         },\n-        ExprKind::Break(_, ref e) | ExprKind::Ret(ref e) => {\n-            e.as_ref().map_or(NeverLoopResult::AlwaysBreak, |e| combine_seq(never_loop_expr(e, main_loop_id), NeverLoopResult::AlwaysBreak))\n-        },\n+        ExprKind::Break(_, ref e) | ExprKind::Ret(ref e) => e.as_ref().map_or(NeverLoopResult::AlwaysBreak, |e| {\n+            combine_seq(never_loop_expr(e, main_loop_id), NeverLoopResult::AlwaysBreak)\n+        }),\n         ExprKind::InlineAsm(ref asm) => asm\n             .operands\n             .iter()\n@@ -1877,9 +1877,9 @@ fn is_ref_iterable_type(cx: &LateContext<'_>, e: &Expr<'_>) -> bool {\n fn is_iterable_array<'tcx>(ty: Ty<'tcx>, cx: &LateContext<'tcx>) -> bool {\n     // IntoIterator is currently only implemented for array sizes <= 32 in rustc\n     match ty.kind {\n-        ty::Array(_, n) => {\n-            n.try_eval_usize(cx.tcx, cx.param_env).map_or(false, |val| (0..=32).contains(&val))\n-        },\n+        ty::Array(_, n) => n\n+            .try_eval_usize(cx.tcx, cx.param_env)\n+            .map_or(false, |val| (0..=32).contains(&val)),\n         _ => false,\n     }\n }\n@@ -1891,7 +1891,7 @@ fn extract_expr_from_first_stmt<'tcx>(block: &Block<'tcx>) -> Option<&'tcx Expr<\n         return None;\n     }\n     if let StmtKind::Local(ref local) = block.stmts[0].kind {\n-        local.init.map(|expr| expr)\n+        local.init //.map(|expr| expr)\n     } else {\n         None\n     }\n@@ -2011,11 +2011,13 @@ impl<'a, 'tcx> Visitor<'tcx> for InitializeVisitor<'a, 'tcx> {\n                 if let PatKind::Binding(.., ident, _) = local.pat.kind {\n                     self.name = Some(ident.name);\n \n-                    self.state = local.init.as_ref().map_or(VarState::Declared, |init| if is_integer_const(&self.cx, init, 0) {\n+                    self.state = local.init.as_ref().map_or(VarState::Declared, |init| {\n+                        if is_integer_const(&self.cx, init, 0) {\n                             VarState::Warn\n                         } else {\n                             VarState::Declared\n-                        })\n+                        }\n+                    })\n                 }\n             }\n         }"}, {"sha": "f1c8894c0ee2973311bf06f2ab6f1618e721fd46", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6ce981225b73d6c3514b0abb759a5282521a17d9/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce981225b73d6c3514b0abb759a5282521a17d9/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=6ce981225b73d6c3514b0abb759a5282521a17d9", "patch": "@@ -2460,9 +2460,9 @@ fn derefs_to_slice<'tcx>(\n             ty::Slice(_) => true,\n             ty::Adt(def, _) if def.is_box() => may_slice(cx, ty.boxed_ty()),\n             ty::Adt(..) => is_type_diagnostic_item(cx, ty, sym!(vec_type)),\n-            ty::Array(_, size) => {\n-                size.try_eval_usize(cx.tcx, cx.param_env).map_or(false, |size| size < 32)\n-            },\n+            ty::Array(_, size) => size\n+                .try_eval_usize(cx.tcx, cx.param_env)\n+                .map_or(false, |size| size < 32),\n             ty::Ref(_, inner, _) => may_slice(cx, inner),\n             _ => false,\n         }"}, {"sha": "75e123eb5939d971b7c7943485ea569894377ee1", "filename": "clippy_lints/src/methods/unnecessary_filter_map.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6ce981225b73d6c3514b0abb759a5282521a17d9/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce981225b73d6c3514b0abb759a5282521a17d9/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs?ref=6ce981225b73d6c3514b0abb759a5282521a17d9", "patch": "@@ -77,9 +77,10 @@ fn check_expression<'tcx>(cx: &LateContext<'tcx>, arg_id: hir::HirId, expr: &'tc\n             }\n             (true, true)\n         },\n-        hir::ExprKind::Block(ref block, _) => {\n-            block.expr.as_ref().map_or((false, false), |expr| check_expression(cx, arg_id, &expr))\n-        },\n+        hir::ExprKind::Block(ref block, _) => block\n+            .expr\n+            .as_ref()\n+            .map_or((false, false), |expr| check_expression(cx, arg_id, &expr)),\n         hir::ExprKind::Match(_, arms, _) => {\n             let mut found_mapping = false;\n             let mut found_filtering = false;"}, {"sha": "5eb8398d68e510f79434c57f42c3913a820f3345", "filename": "clippy_lints/src/minmax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ce981225b73d6c3514b0abb759a5282521a17d9/clippy_lints%2Fsrc%2Fminmax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce981225b73d6c3514b0abb759a5282521a17d9/clippy_lints%2Fsrc%2Fminmax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fminmax.rs?ref=6ce981225b73d6c3514b0abb759a5282521a17d9", "patch": "@@ -53,7 +53,7 @@ impl<'tcx> LateLintPass<'tcx> for MinMaxPass {\n     }\n }\n \n-#[derive(PartialEq, Eq, Debug)]\n+#[derive(PartialEq, Eq, Debug, Clone, Copy)]\n enum MinMax {\n     Min,\n     Max,"}, {"sha": "3d4225f36a7d046cb56922c3f23e7ef23dbaa329", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6ce981225b73d6c3514b0abb759a5282521a17d9/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce981225b73d6c3514b0abb759a5282521a17d9/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=6ce981225b73d6c3514b0abb759a5282521a17d9", "patch": "@@ -683,11 +683,9 @@ fn check_to_owned(cx: &LateContext<'_>, expr: &Expr<'_>, other: &Expr<'_>, left:\n /// of what it means for an expression to be \"used\".\n fn is_used(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     get_parent_expr(cx, expr).map_or(true, |parent| match parent.kind {\n-            ExprKind::Assign(_, ref rhs, _) | ExprKind::AssignOp(_, _, ref rhs) => {\n-                SpanlessEq::new(cx).eq_expr(rhs, expr)\n-            },\n-            _ => is_used(cx, parent),\n-        })\n+        ExprKind::Assign(_, ref rhs, _) | ExprKind::AssignOp(_, _, ref rhs) => SpanlessEq::new(cx).eq_expr(rhs, expr),\n+        _ => is_used(cx, parent),\n+    })\n }\n \n /// Tests whether an expression is in a macro expansion (e.g., something"}, {"sha": "ab9ea76a8389645ee4a9fad17381c1720f00d2e8", "filename": "clippy_lints/src/option_if_let_else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ce981225b73d6c3514b0abb759a5282521a17d9/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce981225b73d6c3514b0abb759a5282521a17d9/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foption_if_let_else.rs?ref=6ce981225b73d6c3514b0abb759a5282521a17d9", "patch": "@@ -260,7 +260,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for OptionIfLetElse {\n                     detection.some_expr,\n                     if detection.wrap_braces { \" }\" } else { \"\" },\n                 ),\n-                Applicability::MachineApplicable,\n+                Applicability::MaybeIncorrect,\n             );\n         }\n     }"}, {"sha": "faef7e724dd056a8464957cfb91a5b4e6c53f157", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6ce981225b73d6c3514b0abb759a5282521a17d9/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce981225b73d6c3514b0abb759a5282521a17d9/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=6ce981225b73d6c3514b0abb759a5282521a17d9", "patch": "@@ -259,15 +259,15 @@ fn is_unit_expr(expr: &ast::Expr) -> bool {\n \n fn lint_unneeded_unit_return(cx: &EarlyContext<'_>, ty: &ast::Ty, span: Span) {\n     let (ret_span, appl) = if let Ok(fn_source) = cx.sess().source_map().span_to_snippet(span.with_hi(ty.span.hi())) {\n-        if let Some(rpos) = fn_source.rfind(\"->\") {\n-            #[allow(clippy::cast_possible_truncation)]\n-            (\n-                ty.span.with_lo(BytePos(span.lo().0 + rpos as u32)),\n-                Applicability::MachineApplicable,\n-            )\n-        } else {\n-            (ty.span, Applicability::MaybeIncorrect)\n-        }\n+        fn_source\n+            .rfind(\"->\")\n+            .map_or((ty.span, Applicability::MaybeIncorrect), |rpos| {\n+                (\n+                    #[allow(clippy::cast_possible_truncation)]\n+                    ty.span.with_lo(BytePos(span.lo().0 + rpos as u32)),\n+                    Applicability::MachineApplicable,\n+                )\n+            })\n     } else {\n         (ty.span, Applicability::MaybeIncorrect)\n     };"}, {"sha": "f16db2df3a927a219f3a7b6e33ad7f3dda1ff6a1", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6ce981225b73d6c3514b0abb759a5282521a17d9/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce981225b73d6c3514b0abb759a5282521a17d9/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=6ce981225b73d6c3514b0abb759a5282521a17d9", "patch": "@@ -166,9 +166,9 @@ fn check_local<'tcx>(cx: &LateContext<'tcx>, local: &'tcx Local<'_>, bindings: &\n fn is_binding(cx: &LateContext<'_>, pat_id: HirId) -> bool {\n     let var_ty = cx.tables.node_type_opt(pat_id);\n     var_ty.map_or(false, |var_ty| match var_ty.kind {\n-            ty::Adt(..) => false,\n-            _ => true,\n-        })\n+        ty::Adt(..) => false,\n+        _ => true,\n+    })\n }\n \n fn check_pat<'tcx>("}, {"sha": "d6f31a99bb36a8df1fe4151513bc2e4a46c7b180", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6ce981225b73d6c3514b0abb759a5282521a17d9/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce981225b73d6c3514b0abb759a5282521a17d9/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=6ce981225b73d6c3514b0abb759a5282521a17d9", "patch": "@@ -1205,14 +1205,19 @@ fn span_lossless_lint(cx: &LateContext<'_>, expr: &Expr<'_>, op: &Expr<'_>, cast\n     // has parens on the outside, they are no longer needed.\n     let mut applicability = Applicability::MachineApplicable;\n     let opt = snippet_opt(cx, op.span);\n-    let sugg = opt.as_ref().map_or_else(|| {\n-        applicability = Applicability::HasPlaceholders;\n-        \"..\"\n-    }, |snip| if should_strip_parens(op, snip) {\n-            &snip[1..snip.len() - 1]\n-        } else {\n-            snip.as_str()\n-        });\n+    let sugg = opt.as_ref().map_or_else(\n+        || {\n+            applicability = Applicability::HasPlaceholders;\n+            \"..\"\n+        },\n+        |snip| {\n+            if should_strip_parens(op, snip) {\n+                &snip[1..snip.len() - 1]\n+            } else {\n+                snip.as_str()\n+            }\n+        },\n+    );\n \n     span_lint_and_sugg(\n         cx,"}, {"sha": "39a8c0208728466b4cff8903424e9bfe0acab801", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6ce981225b73d6c3514b0abb759a5282521a17d9/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce981225b73d6c3514b0abb759a5282521a17d9/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=6ce981225b73d6c3514b0abb759a5282521a17d9", "patch": "@@ -167,10 +167,13 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n             if let TyKind::Path(QPath::Resolved(_, ref item_path)) = item_type.kind;\n             then {\n                 let parameters = &item_path.segments.last().expect(SEGMENTS_MSG).args;\n-                let should_check = parameters.as_ref().map_or(true, |params| !params.parenthesized && !params.args.iter().any(|arg| match arg {\n+                let should_check = parameters.as_ref().map_or(\n+                    true,\n+                    |params| !params.parenthesized && !params.args.iter().any(|arg| match arg {\n                         GenericArg::Lifetime(_) => true,\n                         _ => false,\n-                    }));\n+                    })\n+                );\n \n                 if should_check {\n                     let visitor = &mut UseSelfVisitor {"}, {"sha": "4bb4b087c5566773b5dfa9249c936a486b103f98", "filename": "clippy_lints/src/utils/attrs.rs", "status": "modified", "additions": 35, "deletions": 30, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/6ce981225b73d6c3514b0abb759a5282521a17d9/clippy_lints%2Fsrc%2Futils%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce981225b73d6c3514b0abb759a5282521a17d9/clippy_lints%2Fsrc%2Futils%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fattrs.rs?ref=6ce981225b73d6c3514b0abb759a5282521a17d9", "patch": "@@ -66,39 +66,44 @@ pub fn get_attr<'a>(\n         let attr_segments = &attr.path.segments;\n         if attr_segments.len() == 2 && attr_segments[0].ident.to_string() == \"clippy\" {\n             BUILTIN_ATTRIBUTES\n-                    .iter()\n-                    .find_map(|(builtin_name, deprecation_status)| {\n-                        if *builtin_name == attr_segments[1].ident.to_string() {\n-                            Some(deprecation_status)\n-                        } else {\n-                            None\n-                        }\n-                    }).map_or_else(|| {\n-                sess.span_err(attr_segments[1].ident.span, \"Usage of unknown attribute\");\n-                false\n-            }, |deprecation_status| {\n-                let mut diag = sess.struct_span_err(attr_segments[1].ident.span, \"Usage of deprecated attribute\");\n-                match *deprecation_status {\n-                    DeprecationStatus::Deprecated => {\n-                        diag.emit();\n-                        false\n-                    },\n-                    DeprecationStatus::Replaced(new_name) => {\n-                        diag.span_suggestion(\n-                            attr_segments[1].ident.span,\n-                            \"consider using\",\n-                            new_name.to_string(),\n-                            Applicability::MachineApplicable,\n-                        );\n-                        diag.emit();\n+                .iter()\n+                .find_map(|(builtin_name, deprecation_status)| {\n+                    if *builtin_name == attr_segments[1].ident.to_string() {\n+                        Some(deprecation_status)\n+                    } else {\n+                        None\n+                    }\n+                })\n+                .map_or_else(\n+                    || {\n+                        sess.span_err(attr_segments[1].ident.span, \"Usage of unknown attribute\");\n                         false\n                     },\n-                    DeprecationStatus::None => {\n-                        diag.cancel();\n-                        attr_segments[1].ident.to_string() == name\n+                    |deprecation_status| {\n+                        let mut diag =\n+                            sess.struct_span_err(attr_segments[1].ident.span, \"Usage of deprecated attribute\");\n+                        match *deprecation_status {\n+                            DeprecationStatus::Deprecated => {\n+                                diag.emit();\n+                                false\n+                            },\n+                            DeprecationStatus::Replaced(new_name) => {\n+                                diag.span_suggestion(\n+                                    attr_segments[1].ident.span,\n+                                    \"consider using\",\n+                                    new_name.to_string(),\n+                                    Applicability::MachineApplicable,\n+                                );\n+                                diag.emit();\n+                                false\n+                            },\n+                            DeprecationStatus::None => {\n+                                diag.cancel();\n+                                attr_segments[1].ident.to_string() == name\n+                            },\n+                        }\n                     },\n-                }\n-            })\n+                )\n         } else {\n             false\n         }"}, {"sha": "3a3b79925ff9aec8d241ebb03cbf0532a4048173", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6ce981225b73d6c3514b0abb759a5282521a17d9/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce981225b73d6c3514b0abb759a5282521a17d9/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=6ce981225b73d6c3514b0abb759a5282521a17d9", "patch": "@@ -601,8 +601,10 @@ pub fn first_line_of_span<T: LintContext>(cx: &T, span: Span) -> Span {\n \n fn first_char_in_first_line<T: LintContext>(cx: &T, span: Span) -> Option<BytePos> {\n     let line_span = line_span(cx, span);\n-    snippet_opt(cx, line_span).and_then(|snip| snip.find(|c: char| !c.is_whitespace())\n-            .map(|pos| line_span.lo() + BytePos::from_usize(pos)))\n+    snippet_opt(cx, line_span).and_then(|snip| {\n+        snip.find(|c: char| !c.is_whitespace())\n+            .map(|pos| line_span.lo() + BytePos::from_usize(pos))\n+    })\n }\n \n /// Returns the indentation of the line of a span\n@@ -723,20 +725,20 @@ pub fn get_enclosing_block<'tcx>(cx: &LateContext<'tcx>, hir_id: HirId) -> Optio\n         .get_enclosing_scope(hir_id)\n         .and_then(|enclosing_id| map.find(enclosing_id));\n     enclosing_node.and_then(|node| match node {\n-            Node::Block(block) => Some(block),\n-            Node::Item(&Item {\n-                kind: ItemKind::Fn(_, _, eid),\n-                ..\n-            })\n-            | Node::ImplItem(&ImplItem {\n-                kind: ImplItemKind::Fn(_, eid),\n-                ..\n-            }) => match cx.tcx.hir().body(eid).value.kind {\n-                ExprKind::Block(ref block, _) => Some(block),\n-                _ => None,\n-            },\n-            _ => None,\n+        Node::Block(block) => Some(block),\n+        Node::Item(&Item {\n+            kind: ItemKind::Fn(_, _, eid),\n+            ..\n         })\n+        | Node::ImplItem(&ImplItem {\n+            kind: ImplItemKind::Fn(_, eid),\n+            ..\n+        }) => match cx.tcx.hir().body(eid).value.kind {\n+            ExprKind::Block(ref block, _) => Some(block),\n+            _ => None,\n+        },\n+        _ => None,\n+    })\n }\n \n /// Returns the base type for HIR references and pointers."}, {"sha": "0ac7714fbeb79cd9b3feb6d3665b437c72aabcd0", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6ce981225b73d6c3514b0abb759a5282521a17d9/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce981225b73d6c3514b0abb759a5282521a17d9/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=6ce981225b73d6c3514b0abb759a5282521a17d9", "patch": "@@ -492,15 +492,19 @@ fn astbinop2assignop(op: ast::BinOp) -> AssocOp {\n /// before it on its line.\n fn indentation<T: LintContext>(cx: &T, span: Span) -> Option<String> {\n     let lo = cx.sess().source_map().lookup_char_pos(span.lo());\n-    lo.file.get_line(lo.line - 1 /* line numbers in `Loc` are 1-based */).and_then(|line| if let Some((pos, _)) = line.char_indices().find(|&(_, c)| c != ' ' && c != '\\t') {\n-            // We can mix char and byte positions here because we only consider `[ \\t]`.\n-            if lo.col == CharPos(pos) {\n-                Some(line[..pos].into())\n+    lo.file\n+        .get_line(lo.line - 1 /* line numbers in `Loc` are 1-based */)\n+        .and_then(|line| {\n+            if let Some((pos, _)) = line.char_indices().find(|&(_, c)| c != ' ' && c != '\\t') {\n+                // We can mix char and byte positions here because we only consider `[ \\t]`.\n+                if lo.col == CharPos(pos) {\n+                    Some(line[..pos].into())\n+                } else {\n+                    None\n+                }\n             } else {\n                 None\n             }\n-        } else {\n-            None\n         })\n }\n "}, {"sha": "063f94582b9d14cc38f138d8914e8ce178aaae66", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6ce981225b73d6c3514b0abb759a5282521a17d9/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce981225b73d6c3514b0abb759a5282521a17d9/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=6ce981225b73d6c3514b0abb759a5282521a17d9", "patch": "@@ -297,10 +297,13 @@ impl EarlyLintPass for Write {\n             if let (Some(fmt_str), expr) = self.check_tts(cx, &mac.args.inner_tokens(), true) {\n                 if fmt_str.symbol == Symbol::intern(\"\") {\n                     let mut applicability = Applicability::MachineApplicable;\n-                    let suggestion = expr.map_or_else(|| {\n-                        applicability = Applicability::HasPlaceholders;\n-                        Cow::Borrowed(\"v\")\n-                    }, |e| snippet_with_applicability(cx, e.span, \"v\", &mut Applicability::MachineApplicable));\n+                    let suggestion = expr.map_or_else(\n+                        || {\n+                            applicability = Applicability::HasPlaceholders;\n+                            Cow::Borrowed(\"v\")\n+                        },\n+                        |e| snippet_with_applicability(cx, e.span, \"v\", &mut Applicability::MachineApplicable),\n+                    );\n \n                     span_lint_and_sugg(\n                         cx,"}]}