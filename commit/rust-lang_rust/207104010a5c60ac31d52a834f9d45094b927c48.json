{"sha": "207104010a5c60ac31d52a834f9d45094b927c48", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwNzEwNDAxMGE1YzYwYWMzMWQ1MmE4MzRmOWQ0NTA5NGI5MjdjNDg=", "commit": {"author": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-02-13T19:28:18Z"}, "committer": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-03-01T18:47:43Z"}, "message": "limit tidy parallelism by taking -j into account", "tree": {"sha": "5c0586be6c89501bb315f56e751d3b8e9da6554d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c0586be6c89501bb315f56e751d3b8e9da6554d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/207104010a5c60ac31d52a834f9d45094b927c48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/207104010a5c60ac31d52a834f9d45094b927c48", "html_url": "https://github.com/rust-lang/rust/commit/207104010a5c60ac31d52a834f9d45094b927c48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/207104010a5c60ac31d52a834f9d45094b927c48/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77d1185f00699236c4caec6504d758644d747453", "url": "https://api.github.com/repos/rust-lang/rust/commits/77d1185f00699236c4caec6504d758644d747453", "html_url": "https://github.com/rust-lang/rust/commit/77d1185f00699236c4caec6504d758644d747453"}], "stats": {"total": 22, "additions": 20, "deletions": 2}, "files": [{"sha": "af4263d85c3efe63442628aae56c52135d497f41", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/207104010a5c60ac31d52a834f9d45094b927c48/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/207104010a5c60ac31d52a834f9d45094b927c48/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=207104010a5c60ac31d52a834f9d45094b927c48", "patch": "@@ -782,6 +782,7 @@ impl Step for Tidy {\n         cmd.arg(&builder.src);\n         cmd.arg(&builder.initial_cargo);\n         cmd.arg(&builder.out);\n+        cmd.arg(builder.jobs().to_string());\n         if builder.is_verbose() {\n             cmd.arg(\"--verbose\");\n         }"}, {"sha": "2d19db38799f4b9962febaf34f1ca4ca9644acf7", "filename": "src/tools/tidy/src/main.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/207104010a5c60ac31d52a834f9d45094b927c48/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/207104010a5c60ac31d52a834f9d45094b927c48/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs?ref=207104010a5c60ac31d52a834f9d45094b927c48", "patch": "@@ -6,17 +6,23 @@\n \n use tidy::*;\n \n-use crossbeam_utils::thread::scope;\n+use crossbeam_utils::thread::{scope, ScopedJoinHandle};\n+use std::collections::VecDeque;\n use std::env;\n+use std::num::NonZeroUsize;\n use std::path::PathBuf;\n use std::process;\n+use std::str::FromStr;\n use std::sync::atomic::{AtomicBool, Ordering};\n \n fn main() {\n     let root_path: PathBuf = env::args_os().nth(1).expect(\"need path to root of repo\").into();\n     let cargo: PathBuf = env::args_os().nth(2).expect(\"need path to cargo\").into();\n     let output_directory: PathBuf =\n         env::args_os().nth(3).expect(\"need path to output directory\").into();\n+    let concurrency: NonZeroUsize =\n+        FromStr::from_str(&env::args().nth(4).expect(\"need concurrency\"))\n+            .expect(\"concurrency must be a number\");\n \n     let src_path = root_path.join(\"src\");\n     let library_path = root_path.join(\"library\");\n@@ -29,15 +35,23 @@ fn main() {\n     let bad = std::sync::Arc::new(AtomicBool::new(false));\n \n     scope(|s| {\n+        let mut handles: VecDeque<ScopedJoinHandle<'_, ()>> =\n+            VecDeque::with_capacity(concurrency.get());\n+\n         macro_rules! check {\n             ($p:ident $(, $args:expr)* ) => {\n-                s.spawn(|_| {\n+                while handles.len() >= concurrency.get() {\n+                    handles.pop_front().unwrap().join().unwrap();\n+                }\n+\n+                let handle = s.spawn(|_| {\n                     let mut flag = false;\n                     $p::check($($args),* , &mut flag);\n                     if (flag) {\n                         bad.store(true, Ordering::Relaxed);\n                     }\n                 });\n+                handles.push_back(handle);\n             }\n         }\n \n@@ -74,6 +88,9 @@ fn main() {\n         check!(edition, &library_path);\n \n         let collected = {\n+            while handles.len() >= concurrency.get() {\n+                handles.pop_front().unwrap().join().unwrap();\n+            }\n             let mut flag = false;\n             let r = features::check(&src_path, &compiler_path, &library_path, &mut flag, verbose);\n             if flag {"}]}