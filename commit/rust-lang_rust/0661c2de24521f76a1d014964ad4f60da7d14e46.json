{"sha": "0661c2de24521f76a1d014964ad4f60da7d14e46", "node_id": "C_kwDOAAsO6NoAKDA2NjFjMmRlMjQ1MjFmNzZhMWQwMTQ5NjRhZDRmNjBkYTdkMTRlNDY", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2021-09-26T07:16:04Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2021-09-26T07:43:44Z"}, "message": "suggest both immutable and mutable trait implementations", "tree": {"sha": "602fa970b6971e41b8e0a24acade240ec4033802", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/602fa970b6971e41b8e0a24acade240ec4033802"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0661c2de24521f76a1d014964ad4f60da7d14e46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0661c2de24521f76a1d014964ad4f60da7d14e46", "html_url": "https://github.com/rust-lang/rust/commit/0661c2de24521f76a1d014964ad4f60da7d14e46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0661c2de24521f76a1d014964ad4f60da7d14e46/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4da89a180facdecf168cbe0ddbc6bfbdd9f6e696", "url": "https://api.github.com/repos/rust-lang/rust/commits/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696", "html_url": "https://github.com/rust-lang/rust/commit/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696"}], "stats": {"total": 102, "additions": 70, "deletions": 32}, "files": [{"sha": "01fa3a50d8182c94afeebdf3432d6251a550fe83", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 34, "deletions": 32, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/0661c2de24521f76a1d014964ad4f60da7d14e46/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0661c2de24521f76a1d014964ad4f60da7d14e46/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=0661c2de24521f76a1d014964ad4f60da7d14e46", "patch": "@@ -714,22 +714,28 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         let mut_substs = self.tcx.mk_substs_trait(mut_borrowed_found_ty, &[]);\n \n         // Try to apply the original trait binding obligation by borrowing.\n-        let mut try_borrowing = |new_trait_ref: ty::TraitRef<'tcx>,\n+        let mut try_borrowing = |new_imm_trait_ref: ty::TraitRef<'tcx>,\n+                                 new_mut_trait_ref: ty::TraitRef<'tcx>,\n                                  expected_trait_ref: ty::TraitRef<'tcx>,\n-                                 mtbl: bool,\n                                  blacklist: &[DefId]|\n          -> bool {\n             if blacklist.contains(&expected_trait_ref.def_id) {\n                 return false;\n             }\n \n-            let new_obligation = Obligation::new(\n+            let imm_result = self.predicate_must_hold_modulo_regions(&Obligation::new(\n                 ObligationCause::dummy(),\n                 param_env,\n-                ty::Binder::dummy(new_trait_ref).without_const().to_predicate(self.tcx),\n-            );\n+                ty::Binder::dummy(new_imm_trait_ref).without_const().to_predicate(self.tcx),\n+            ));\n \n-            if self.predicate_must_hold_modulo_regions(&new_obligation) {\n+            let mut_result = self.predicate_must_hold_modulo_regions(&Obligation::new(\n+                ObligationCause::dummy(),\n+                param_env,\n+                ty::Binder::dummy(new_mut_trait_ref).without_const().to_predicate(self.tcx),\n+            ));\n+\n+            if imm_result || mut_result {\n                 if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span) {\n                     // We have a very specific type of error, where just borrowing this argument\n                     // might solve the problem. In cases like this, the important part is the\n@@ -773,15 +779,24 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         // }\n                         // ```\n \n-                        err.span_suggestion(\n-                            span,\n-                            &format!(\n-                                \"consider{} borrowing here\",\n-                                if mtbl { \" mutably\" } else { \"\" }\n-                            ),\n-                            format!(\"&{}{}\", if mtbl { \"mut \" } else { \"\" }, snippet),\n-                            Applicability::MaybeIncorrect,\n-                        );\n+                        if imm_result && mut_result {\n+                            err.span_suggestions(\n+                                span,\n+                                \"consider borrowing here\",\n+                                [format!(\"&{}\", snippet), format!(\"&mut {}\", snippet)].into_iter(),\n+                                Applicability::MaybeIncorrect,\n+                            );\n+                        } else {\n+                            err.span_suggestion(\n+                                span,\n+                                &format!(\n+                                    \"consider{} borrowing here\",\n+                                    if mut_result { \" mutably\" } else { \"\" }\n+                                ),\n+                                format!(\"&{}{}\", if mut_result { \"mut \" } else { \"\" }, snippet),\n+                                Applicability::MaybeIncorrect,\n+                            );\n+                        }\n                     }\n                     return true;\n                 }\n@@ -795,29 +810,16 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 ty::TraitRef::new(obligation.parent_trait_ref.def_id(), imm_substs);\n             let new_mut_trait_ref =\n                 ty::TraitRef::new(obligation.parent_trait_ref.def_id(), mut_substs);\n-            if try_borrowing(new_imm_trait_ref, expected_trait_ref, false, &[]) {\n-                return true;\n-            } else {\n-                return try_borrowing(new_mut_trait_ref, expected_trait_ref, true, &[]);\n-            }\n+            return try_borrowing(new_imm_trait_ref, new_mut_trait_ref, expected_trait_ref, &[]);\n         } else if let ObligationCauseCode::BindingObligation(_, _)\n         | ObligationCauseCode::ItemObligation(_) = &*code\n         {\n-            if try_borrowing(\n+            return try_borrowing(\n                 ty::TraitRef::new(trait_ref.def_id, imm_substs),\n+                ty::TraitRef::new(trait_ref.def_id, mut_substs),\n                 trait_ref,\n-                false,\n                 &never_suggest_borrow[..],\n-            ) {\n-                return true;\n-            } else {\n-                return try_borrowing(\n-                    ty::TraitRef::new(trait_ref.def_id, mut_substs),\n-                    trait_ref,\n-                    true,\n-                    &never_suggest_borrow[..],\n-                );\n-            }\n+            );\n         } else {\n             false\n         }"}, {"sha": "0a4f0b489fc117bf719a44745d7ab225a205cefa", "filename": "src/test/ui/suggestions/suggest-both-imm-and-mut-trait-implementation.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0661c2de24521f76a1d014964ad4f60da7d14e46/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-both-imm-and-mut-trait-implementation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0661c2de24521f76a1d014964ad4f60da7d14e46/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-both-imm-and-mut-trait-implementation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-both-imm-and-mut-trait-implementation.rs?ref=0661c2de24521f76a1d014964ad4f60da7d14e46", "patch": "@@ -0,0 +1,13 @@\n+trait Trait {}\n+\n+struct S;\n+\n+impl Trait for &S {}\n+impl Trait for &mut S {}\n+\n+fn foo<X: Trait>(_: X) {}\n+\n+fn main() {\n+    let s = S;\n+    foo(s); //~ ERROR the trait bound `S: Trait` is not satisfied\n+}"}, {"sha": "420f5e65cad159688a220effacf85339ab6cd407", "filename": "src/test/ui/suggestions/suggest-both-imm-and-mut-trait-implementation.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0661c2de24521f76a1d014964ad4f60da7d14e46/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-both-imm-and-mut-trait-implementation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0661c2de24521f76a1d014964ad4f60da7d14e46/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-both-imm-and-mut-trait-implementation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-both-imm-and-mut-trait-implementation.stderr?ref=0661c2de24521f76a1d014964ad4f60da7d14e46", "patch": "@@ -0,0 +1,23 @@\n+error[E0277]: the trait bound `S: Trait` is not satisfied\n+  --> $DIR/suggest-both-imm-and-mut-trait-implementation.rs:12:9\n+   |\n+LL |     foo(s);\n+   |     --- ^ expected an implementor of trait `Trait`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required by a bound in `foo`\n+  --> $DIR/suggest-both-imm-and-mut-trait-implementation.rs:8:11\n+   |\n+LL | fn foo<X: Trait>(_: X) {}\n+   |           ^^^^^ required by this bound in `foo`\n+help: consider borrowing here\n+   |\n+LL |     foo(&s);\n+   |         ~~\n+LL |     foo(&mut s);\n+   |         ~~~~~~\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}