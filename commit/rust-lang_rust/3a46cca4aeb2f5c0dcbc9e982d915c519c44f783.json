{"sha": "3a46cca4aeb2f5c0dcbc9e982d915c519c44f783", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhNDZjY2E0YWViMmY1YzBkY2JjOWU5ODJkOTE1YzUxOWM0NGY3ODM=", "commit": {"author": {"name": "maekawatoshiki", "email": "konndennsa@gmail.com", "date": "2020-08-21T05:14:58Z"}, "committer": {"name": "maekawatoshiki", "email": "konndennsa@gmail.com", "date": "2020-08-21T05:14:58Z"}, "message": "Revert \"`#![deny(unsafe_op_in_unsafe_fn)]` in sys/hermit\"\n\nThis reverts commit 7cae9e8c88e468e94c157d9aaee4b8e3cf90b9a4.", "tree": {"sha": "24e5dc86c3a427f5a0e44c81379cef5de214e7c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24e5dc86c3a427f5a0e44c81379cef5de214e7c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a46cca4aeb2f5c0dcbc9e982d915c519c44f783", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a46cca4aeb2f5c0dcbc9e982d915c519c44f783", "html_url": "https://github.com/rust-lang/rust/commit/3a46cca4aeb2f5c0dcbc9e982d915c519c44f783", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a46cca4aeb2f5c0dcbc9e982d915c519c44f783/comments", "author": {"login": "maekawatoshiki", "id": 9913176, "node_id": "MDQ6VXNlcjk5MTMxNzY=", "avatar_url": "https://avatars.githubusercontent.com/u/9913176?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maekawatoshiki", "html_url": "https://github.com/maekawatoshiki", "followers_url": "https://api.github.com/users/maekawatoshiki/followers", "following_url": "https://api.github.com/users/maekawatoshiki/following{/other_user}", "gists_url": "https://api.github.com/users/maekawatoshiki/gists{/gist_id}", "starred_url": "https://api.github.com/users/maekawatoshiki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maekawatoshiki/subscriptions", "organizations_url": "https://api.github.com/users/maekawatoshiki/orgs", "repos_url": "https://api.github.com/users/maekawatoshiki/repos", "events_url": "https://api.github.com/users/maekawatoshiki/events{/privacy}", "received_events_url": "https://api.github.com/users/maekawatoshiki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "maekawatoshiki", "id": 9913176, "node_id": "MDQ6VXNlcjk5MTMxNzY=", "avatar_url": "https://avatars.githubusercontent.com/u/9913176?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maekawatoshiki", "html_url": "https://github.com/maekawatoshiki", "followers_url": "https://api.github.com/users/maekawatoshiki/followers", "following_url": "https://api.github.com/users/maekawatoshiki/following{/other_user}", "gists_url": "https://api.github.com/users/maekawatoshiki/gists{/gist_id}", "starred_url": "https://api.github.com/users/maekawatoshiki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maekawatoshiki/subscriptions", "organizations_url": "https://api.github.com/users/maekawatoshiki/orgs", "repos_url": "https://api.github.com/users/maekawatoshiki/repos", "events_url": "https://api.github.com/users/maekawatoshiki/events{/privacy}", "received_events_url": "https://api.github.com/users/maekawatoshiki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7cae9e8c88e468e94c157d9aaee4b8e3cf90b9a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/7cae9e8c88e468e94c157d9aaee4b8e3cf90b9a4", "html_url": "https://github.com/rust-lang/rust/commit/7cae9e8c88e468e94c157d9aaee4b8e3cf90b9a4"}], "stats": {"total": 222, "additions": 75, "deletions": 147}, "files": [{"sha": "d153914e77e10235294109f575e627882e34c926", "filename": "library/std/src/sys/hermit/alloc.rs", "status": "modified", "additions": 8, "deletions": 17, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3a46cca4aeb2f5c0dcbc9e982d915c519c44f783/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a46cca4aeb2f5c0dcbc9e982d915c519c44f783/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Falloc.rs?ref=3a46cca4aeb2f5c0dcbc9e982d915c519c44f783", "patch": "@@ -1,5 +1,3 @@\n-#![deny(unsafe_op_in_unsafe_fn)]\n-\n use crate::alloc::{GlobalAlloc, Layout, System};\n use crate::ptr;\n use crate::sys::hermit::abi;\n@@ -8,33 +6,26 @@ use crate::sys::hermit::abi;\n unsafe impl GlobalAlloc for System {\n     #[inline]\n     unsafe fn alloc(&self, layout: Layout) -> *mut u8 {\n-        // SAFETY: The safety contract for `malloc` must be upheld by the caller.\n-        unsafe { abi::malloc(layout.size(), layout.align()) }\n+        abi::malloc(layout.size(), layout.align())\n     }\n \n     unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {\n-        // SAFETY: The safety contract for `malloc` must be upheld by the caller.\n-        // Also, `addr` must be valid for writes of `layout.size() * size_of::<u8>()` bytes.\n-        unsafe {\n-            let addr = abi::malloc(layout.size(), layout.align());\n-\n-            if !addr.is_null() {\n-                ptr::write_bytes(addr, 0x00, layout.size());\n-            }\n+        let addr = abi::malloc(layout.size(), layout.align());\n \n-            addr\n+        if !addr.is_null() {\n+            ptr::write_bytes(addr, 0x00, layout.size());\n         }\n+\n+        addr\n     }\n \n     #[inline]\n     unsafe fn dealloc(&self, ptr: *mut u8, layout: Layout) {\n-        // SAFETY: The safety contract for `free` must be upheld by the caller.\n-        unsafe { abi::free(ptr, layout.size(), layout.align()) }\n+        abi::free(ptr, layout.size(), layout.align())\n     }\n \n     #[inline]\n     unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {\n-        // SAFETY: The safety contract for `realloc` must be upheld by the caller.\n-        unsafe { abi::realloc(ptr, layout.size(), layout.align(), new_size) }\n+        abi::realloc(ptr, layout.size(), layout.align(), new_size)\n     }\n }"}, {"sha": "72c1b8511cac8cc25a8d196c8336572626742913", "filename": "library/std/src/sys/hermit/args.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3a46cca4aeb2f5c0dcbc9e982d915c519c44f783/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a46cca4aeb2f5c0dcbc9e982d915c519c44f783/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fargs.rs?ref=3a46cca4aeb2f5c0dcbc9e982d915c519c44f783", "patch": "@@ -1,17 +1,15 @@\n-#![deny(unsafe_op_in_unsafe_fn)]\n-\n use crate::ffi::OsString;\n use crate::marker::PhantomData;\n use crate::vec;\n \n /// One-time global initialization.\n pub unsafe fn init(argc: isize, argv: *const *const u8) {\n-    unsafe { imp::init(argc, argv) }\n+    imp::init(argc, argv)\n }\n \n /// One-time global cleanup.\n pub unsafe fn cleanup() {\n-    unsafe { imp::cleanup() }\n+    imp::cleanup()\n }\n \n /// Returns the command line arguments\n@@ -67,18 +65,14 @@ mod imp {\n \n     pub unsafe fn init(argc: isize, argv: *const *const u8) {\n         let _guard = LOCK.lock();\n-        unsafe {\n-            ARGC = argc;\n-            ARGV = argv;\n-        }\n+        ARGC = argc;\n+        ARGV = argv;\n     }\n \n     pub unsafe fn cleanup() {\n         let _guard = LOCK.lock();\n         ARGC = 0;\n-        unsafe {\n-            ARGV = ptr::null();\n-        }\n+        ARGV = ptr::null();\n     }\n \n     pub fn args() -> Args {"}, {"sha": "52c8c3b17e8262571775b4a41b1ab543fbd78b39", "filename": "library/std/src/sys/hermit/condvar.rs", "status": "modified", "additions": 10, "deletions": 24, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/3a46cca4aeb2f5c0dcbc9e982d915c519c44f783/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a46cca4aeb2f5c0dcbc9e982d915c519c44f783/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fcondvar.rs?ref=3a46cca4aeb2f5c0dcbc9e982d915c519c44f783", "patch": "@@ -1,5 +1,3 @@\n-#![deny(unsafe_op_in_unsafe_fn)]\n-\n use crate::ffi::c_void;\n use crate::ptr;\n use crate::sync::atomic::{AtomicUsize, Ordering::SeqCst};\n@@ -25,43 +23,33 @@ impl Condvar {\n     }\n \n     pub unsafe fn init(&mut self) {\n-        unsafe {\n-            let _ = abi::sem_init(&mut self.sem1 as *mut *const c_void, 0);\n-            let _ = abi::sem_init(&mut self.sem2 as *mut *const c_void, 0);\n-        }\n+        let _ = abi::sem_init(&mut self.sem1 as *mut *const c_void, 0);\n+        let _ = abi::sem_init(&mut self.sem2 as *mut *const c_void, 0);\n     }\n \n     pub unsafe fn notify_one(&self) {\n         if self.counter.load(SeqCst) > 0 {\n             self.counter.fetch_sub(1, SeqCst);\n-            unsafe {\n-                abi::sem_post(self.sem1);\n-                abi::sem_timedwait(self.sem2, 0);\n-            }\n+            abi::sem_post(self.sem1);\n+            abi::sem_timedwait(self.sem2, 0);\n         }\n     }\n \n     pub unsafe fn notify_all(&self) {\n         let counter = self.counter.swap(0, SeqCst);\n         for _ in 0..counter {\n-            unsafe {\n-                abi::sem_post(self.sem1);\n-            }\n+            abi::sem_post(self.sem1);\n         }\n         for _ in 0..counter {\n-            unsafe {\n-                abi::sem_timedwait(self.sem2, 0);\n-            }\n+            abi::sem_timedwait(self.sem2, 0);\n         }\n     }\n \n     pub unsafe fn wait(&self, mutex: &Mutex) {\n         self.counter.fetch_add(1, SeqCst);\n         mutex.unlock();\n-        unsafe {\n-            abi::sem_timedwait(self.sem1, 0);\n-            abi::sem_post(self.sem2);\n-        }\n+        abi::sem_timedwait(self.sem1, 0);\n+        abi::sem_post(self.sem2);\n         mutex.lock();\n     }\n \n@@ -70,9 +58,7 @@ impl Condvar {\n     }\n \n     pub unsafe fn destroy(&self) {\n-        unsafe {\n-            let _ = abi::sem_destroy(self.sem1);\n-            let _ = abi::sem_destroy(self.sem2);\n-        }\n+        let _ = abi::sem_destroy(self.sem1);\n+        let _ = abi::sem_destroy(self.sem2);\n     }\n }"}, {"sha": "97d1a38b41ab17eec4637c2532de60797e81333b", "filename": "library/std/src/sys/hermit/fd.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3a46cca4aeb2f5c0dcbc9e982d915c519c44f783/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a46cca4aeb2f5c0dcbc9e982d915c519c44f783/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffd.rs?ref=3a46cca4aeb2f5c0dcbc9e982d915c519c44f783", "patch": "@@ -1,4 +1,3 @@\n-#![deny(unsafe_op_in_unsafe_fn)]\n #![unstable(reason = \"not public\", issue = \"none\", feature = \"fd\")]\n \n use crate::io::{self, ErrorKind, Read};"}, {"sha": "675b82ceb775f7b0a35c116cc54b2c39d0c93b90", "filename": "library/std/src/sys/hermit/mod.rs", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3a46cca4aeb2f5c0dcbc9e982d915c519c44f783/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a46cca4aeb2f5c0dcbc9e982d915c519c44f783/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmod.rs?ref=3a46cca4aeb2f5c0dcbc9e982d915c519c44f783", "patch": "@@ -13,8 +13,6 @@\n //! compiling for wasm. That way it's a compile time error for something that's\n //! guaranteed to be a runtime error!\n \n-#![deny(unsafe_op_in_unsafe_fn)]\n-\n use crate::intrinsics;\n use crate::os::raw::c_char;\n \n@@ -64,12 +62,8 @@ pub enum Void {}\n pub unsafe fn strlen(start: *const c_char) -> usize {\n     let mut str = start;\n \n-    // SAFETY: The safety contract for `*str != 0` must be upheld by the caller.\n-    // `start` must not be null.\n-    unsafe {\n-        while *str != 0 {\n-            str = str.offset(1);\n-        }\n+    while *str != 0 {\n+        str = str.offset(1);\n     }\n \n     (str as usize) - (start as usize)\n@@ -117,15 +111,13 @@ pub unsafe extern \"C\" fn runtime_entry(\n         fn main(argc: isize, argv: *const *const c_char) -> i32;\n     }\n \n-    unsafe {\n-        // initialize environment\n-        os::init_environment(env as *const *const i8);\n+    // initialize environment\n+    os::init_environment(env as *const *const i8);\n \n-        let result = main(argc as isize, argv);\n+    let result = main(argc as isize, argv);\n \n-        run_dtors();\n-        abi::exit(result);\n-    }\n+    run_dtors();\n+    abi::exit(result);\n }\n \n pub fn decode_error_kind(errno: i32) -> ErrorKind {"}, {"sha": "3d4813209cbc4d0030dca9030f28afe18e6a83e7", "filename": "library/std/src/sys/hermit/mutex.rs", "status": "modified", "additions": 9, "deletions": 17, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3a46cca4aeb2f5c0dcbc9e982d915c519c44f783/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a46cca4aeb2f5c0dcbc9e982d915c519c44f783/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmutex.rs?ref=3a46cca4aeb2f5c0dcbc9e982d915c519c44f783", "patch": "@@ -1,5 +1,3 @@\n-#![deny(unsafe_op_in_unsafe_fn)]\n-\n use crate::ffi::c_void;\n use crate::ptr;\n use crate::sys::hermit::abi;\n@@ -18,34 +16,28 @@ impl Mutex {\n \n     #[inline]\n     pub unsafe fn init(&mut self) {\n-        unsafe {\n-            let _ = abi::sem_init(&mut self.inner as *mut *const c_void, 1);\n-        }\n+        let _ = abi::sem_init(&mut self.inner as *mut *const c_void, 1);\n     }\n \n     #[inline]\n     pub unsafe fn lock(&self) {\n-        unsafe {\n-            let _ = abi::sem_timedwait(self.inner, 0);\n-        }\n+        let _ = abi::sem_timedwait(self.inner, 0);\n     }\n \n     #[inline]\n     pub unsafe fn unlock(&self) {\n-        unsafe {\n-            let _ = abi::sem_post(self.inner);\n-        }\n+        let _ = abi::sem_post(self.inner);\n     }\n \n     #[inline]\n     pub unsafe fn try_lock(&self) -> bool {\n-        let result = unsafe { abi::sem_trywait(self.inner) };\n+        let result = abi::sem_trywait(self.inner);\n         result == 0\n     }\n \n     #[inline]\n     pub unsafe fn destroy(&self) {\n-        let _ = unsafe { abi::sem_destroy(self.inner) };\n+        let _ = abi::sem_destroy(self.inner);\n     }\n }\n \n@@ -60,12 +52,12 @@ impl ReentrantMutex {\n \n     #[inline]\n     pub unsafe fn init(&self) {\n-        let _ = unsafe { abi::recmutex_init(&self.inner as *const *const c_void as *mut _) };\n+        let _ = abi::recmutex_init(&self.inner as *const *const c_void as *mut _);\n     }\n \n     #[inline]\n     pub unsafe fn lock(&self) {\n-        let _ = unsafe { abi::recmutex_lock(self.inner) };\n+        let _ = abi::recmutex_lock(self.inner);\n     }\n \n     #[inline]\n@@ -75,11 +67,11 @@ impl ReentrantMutex {\n \n     #[inline]\n     pub unsafe fn unlock(&self) {\n-        let _ = unsafe { abi::recmutex_unlock(self.inner) };\n+        let _ = abi::recmutex_unlock(self.inner);\n     }\n \n     #[inline]\n     pub unsafe fn destroy(&self) {\n-        let _ = unsafe { abi::recmutex_destroy(self.inner) };\n+        let _ = abi::recmutex_destroy(self.inner);\n     }\n }"}, {"sha": "78eabf8f81e984e149bd551efed65503381eed02", "filename": "library/std/src/sys/hermit/os.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a46cca4aeb2f5c0dcbc9e982d915c519c44f783/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a46cca4aeb2f5c0dcbc9e982d915c519c44f783/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fos.rs?ref=3a46cca4aeb2f5c0dcbc9e982d915c519c44f783", "patch": "@@ -1,5 +1,3 @@\n-#![deny(unsafe_op_in_unsafe_fn)]\n-\n use crate::collections::HashMap;\n use crate::error::Error as StdError;\n use crate::ffi::{CStr, OsStr, OsString};"}, {"sha": "06442e925f4c8710d33caf6fff3e18a54e495081", "filename": "library/std/src/sys/hermit/rwlock.rs", "status": "modified", "additions": 26, "deletions": 42, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/3a46cca4aeb2f5c0dcbc9e982d915c519c44f783/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a46cca4aeb2f5c0dcbc9e982d915c519c44f783/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Frwlock.rs?ref=3a46cca4aeb2f5c0dcbc9e982d915c519c44f783", "patch": "@@ -1,5 +1,3 @@\n-#![deny(unsafe_op_in_unsafe_fn)]\n-\n use crate::cell::UnsafeCell;\n use crate::sys::condvar::Condvar;\n use crate::sys::mutex::Mutex;\n@@ -34,76 +32,62 @@ impl RWLock {\n \n     #[inline]\n     pub unsafe fn read(&self) {\n-        unsafe {\n-            self.lock.lock();\n-            while !(*self.state.get()).inc_readers() {\n-                self.cond.wait(&self.lock);\n-            }\n-            self.lock.unlock();\n+        self.lock.lock();\n+        while !(*self.state.get()).inc_readers() {\n+            self.cond.wait(&self.lock);\n         }\n+        self.lock.unlock();\n     }\n \n     #[inline]\n     pub unsafe fn try_read(&self) -> bool {\n-        unsafe {\n-            self.lock.lock();\n-            let ok = (*self.state.get()).inc_readers();\n-            self.lock.unlock();\n-        }\n+        self.lock.lock();\n+        let ok = (*self.state.get()).inc_readers();\n+        self.lock.unlock();\n         return ok;\n     }\n \n     #[inline]\n     pub unsafe fn write(&self) {\n-        unsafe {\n-            self.lock.lock();\n-            while !(*self.state.get()).inc_writers() {\n-                self.cond.wait(&self.lock);\n-            }\n+        self.lock.lock();\n+        while !(*self.state.get()).inc_writers() {\n+            self.cond.wait(&self.lock);\n         }\n         self.lock.unlock();\n     }\n \n     #[inline]\n     pub unsafe fn try_write(&self) -> bool {\n-        unsafe {\n-            self.lock.lock();\n-            let ok = (*self.state.get()).inc_writers();\n-            self.lock.unlock();\n-        }\n+        self.lock.lock();\n+        let ok = (*self.state.get()).inc_writers();\n+        self.lock.unlock();\n         return ok;\n     }\n \n     #[inline]\n     pub unsafe fn read_unlock(&self) {\n-        unsafe {\n-            self.lock.lock();\n-            let notify = (*self.state.get()).dec_readers();\n-            self.lock.unlock();\n-            if notify {\n-                // FIXME: should only wake up one of these some of the time\n-                self.cond.notify_all();\n-            }\n+        self.lock.lock();\n+        let notify = (*self.state.get()).dec_readers();\n+        self.lock.unlock();\n+        if notify {\n+            // FIXME: should only wake up one of these some of the time\n+            self.cond.notify_all();\n         }\n     }\n \n     #[inline]\n     pub unsafe fn write_unlock(&self) {\n-        unsafe {\n-            self.lock.lock();\n-            (*self.state.get()).dec_writers();\n-            self.lock.unlock();\n-            // FIXME: should only wake up one of these some of the time\n-            self.cond.notify_all();\n-        }\n+        self.lock.lock();\n+        (*self.state.get()).dec_writers();\n+        self.lock.unlock();\n+        // FIXME: should only wake up one of these some of the time\n+        self.cond.notify_all();\n     }\n \n     #[inline]\n     pub unsafe fn destroy(&self) {\n-        unsafe {\n-            self.lock.destroy();\n-            self.cond.destroy();\n-        }\n+        self.lock.destroy();\n+        self.cond.destroy();\n     }\n }\n "}, {"sha": "e11afed668728f08abe9be030ca22af6f231bab7", "filename": "library/std/src/sys/hermit/thread.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3a46cca4aeb2f5c0dcbc9e982d915c519c44f783/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a46cca4aeb2f5c0dcbc9e982d915c519c44f783/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fthread.rs?ref=3a46cca4aeb2f5c0dcbc9e982d915c519c44f783", "patch": "@@ -1,5 +1,4 @@\n #![allow(dead_code)]\n-#![deny(unsafe_op_in_unsafe_fn)]\n \n use crate::ffi::CStr;\n use crate::io;\n@@ -26,22 +25,18 @@ impl Thread {\n         core_id: isize,\n     ) -> io::Result<Thread> {\n         let p = Box::into_raw(box p);\n-        let tid = unsafe {\n-            abi::spawn2(\n-                thread_start,\n-                p as usize,\n-                abi::Priority::into(abi::NORMAL_PRIO),\n-                stack,\n-                core_id,\n-            )\n-        };\n+        let tid = abi::spawn2(\n+            thread_start,\n+            p as usize,\n+            abi::Priority::into(abi::NORMAL_PRIO),\n+            stack,\n+            core_id,\n+        );\n \n         return if tid == 0 {\n             // The thread failed to start and as a result p was not consumed. Therefore, it is\n             // safe to reconstruct the box so that it gets deallocated.\n-            unsafe {\n-                drop(Box::from_raw(p));\n-            }\n+            drop(Box::from_raw(p));\n             Err(io::Error::new(io::ErrorKind::Other, \"Unable to create thread!\"))\n         } else {\n             Ok(Thread { tid: tid })"}, {"sha": "9b683fce157488df8d26ee08184e278578e5c17b", "filename": "library/std/src/sys/hermit/thread_local_dtor.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3a46cca4aeb2f5c0dcbc9e982d915c519c44f783/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fthread_local_dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a46cca4aeb2f5c0dcbc9e982d915c519c44f783/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fthread_local_dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fthread_local_dtor.rs?ref=3a46cca4aeb2f5c0dcbc9e982d915c519c44f783", "patch": "@@ -1,6 +1,5 @@\n #![cfg(target_thread_local)]\n #![unstable(feature = \"thread_local_internals\", issue = \"none\")]\n-#![deny(unsafe_op_in_unsafe_fn)]\n \n // Simplify dtor registration by using a list of destructors.\n // The this solution works like the implementation of macOS and\n@@ -20,17 +19,15 @@ pub unsafe fn register_dtor(t: *mut u8, dtor: unsafe extern \"C\" fn(*mut u8)) {\n         DTORS.set(Box::into_raw(v));\n     }\n \n-    // SAFETY: `DTORS.get()` is not null.\n-    let list: &mut List = unsafe { &mut *DTORS.get() };\n+    let list: &mut List = &mut *DTORS.get();\n     list.push((t, dtor));\n }\n \n // every thread call this function to run through all possible destructors\n pub unsafe fn run_dtors() {\n     let mut ptr = DTORS.replace(ptr::null_mut());\n     while !ptr.is_null() {\n-        // SAFETY: `ptr` is not null.\n-        let list = unsafe { Box::from_raw(ptr) };\n+        let list = Box::from_raw(ptr);\n         for (ptr, dtor) in list.into_iter() {\n             dtor(ptr);\n         }"}]}