{"sha": "bbef531518a3b4977a9c1f40808f950514b400fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiZWY1MzE1MThhM2I0OTc3YTljMWY0MDgwOGY5NTA1MTRiNDAwZmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-30T21:06:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-30T21:06:47Z"}, "message": "Auto merge of #5108 - JohnTitor:split-up-0130, r=flip1995\n\nSplit up `match` ui test\n\nPart of #2038\n\nAlso, this decreases the line length limit to 220.\n\nchangelog: none", "tree": {"sha": "8a522e81bb8e59c37010b9c92856d204783e23b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a522e81bb8e59c37010b9c92856d204783e23b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbef531518a3b4977a9c1f40808f950514b400fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbef531518a3b4977a9c1f40808f950514b400fc", "html_url": "https://github.com/rust-lang/rust/commit/bbef531518a3b4977a9c1f40808f950514b400fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbef531518a3b4977a9c1f40808f950514b400fc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "668bc485da68efd4d9a10718088c301c5f7ab402", "url": "https://api.github.com/repos/rust-lang/rust/commits/668bc485da68efd4d9a10718088c301c5f7ab402", "html_url": "https://github.com/rust-lang/rust/commit/668bc485da68efd4d9a10718088c301c5f7ab402"}, {"sha": "411317bd2c5964f1ff4841bcdc6e565ea641c8d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/411317bd2c5964f1ff4841bcdc6e565ea641c8d2", "html_url": "https://github.com/rust-lang/rust/commit/411317bd2c5964f1ff4841bcdc6e565ea641c8d2"}], "stats": {"total": 525, "additions": 178, "deletions": 347}, "files": [{"sha": "3319ec82ed08941d03b5e7f442cf4dfbfcbf64f6", "filename": "clippy_dev/src/stderr_length_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbef531518a3b4977a9c1f40808f950514b400fc/clippy_dev%2Fsrc%2Fstderr_length_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbef531518a3b4977a9c1f40808f950514b400fc/clippy_dev%2Fsrc%2Fstderr_length_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fstderr_length_check.rs?ref=bbef531518a3b4977a9c1f40808f950514b400fc", "patch": "@@ -7,7 +7,7 @@ use std::io::prelude::*;\n // The maximum length allowed for stderr files.\n //\n // We limit this because small files are easier to deal with than bigger files.\n-const LIMIT: usize = 245;\n+const LIMIT: usize = 220;\n \n pub fn check() {\n     let stderr_files = stderr_files();"}, {"sha": "e1401d2796a52870068e125744826766deb3010a", "filename": "tests/ui/match_same_arms2.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/bbef531518a3b4977a9c1f40808f950514b400fc/tests%2Fui%2Fmatch_same_arms2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbef531518a3b4977a9c1f40808f950514b400fc/tests%2Fui%2Fmatch_same_arms2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_same_arms2.rs?ref=bbef531518a3b4977a9c1f40808f950514b400fc", "patch": "@@ -79,6 +79,46 @@ fn match_same_arms() {\n         (None, Some(a)) => bar(a), // bindings have different types\n         _ => (),\n     }\n+\n+    let x: Result<i32, &str> = Ok(3);\n+\n+    // No warning because of the guard.\n+    match x {\n+        Ok(x) if x * x == 64 => println!(\"ok\"),\n+        Ok(_) => println!(\"ok\"),\n+        Err(_) => println!(\"err\"),\n+    }\n+\n+    // This used to be a false positive; see issue #1996.\n+    match x {\n+        Ok(3) => println!(\"ok\"),\n+        Ok(x) if x * x == 64 => println!(\"ok 64\"),\n+        Ok(_) => println!(\"ok\"),\n+        Err(_) => println!(\"err\"),\n+    }\n+\n+    match (x, Some(1i32)) {\n+        (Ok(x), Some(_)) => println!(\"ok {}\", x),\n+        (Ok(_), Some(x)) => println!(\"ok {}\", x),\n+        _ => println!(\"err\"),\n+    }\n+\n+    // No warning; different types for `x`.\n+    match (x, Some(1.0f64)) {\n+        (Ok(x), Some(_)) => println!(\"ok {}\", x),\n+        (Ok(_), Some(x)) => println!(\"ok {}\", x),\n+        _ => println!(\"err\"),\n+    }\n+\n+    // False negative #2251.\n+    match x {\n+        Ok(_tmp) => println!(\"ok\"),\n+        Ok(3) => println!(\"ok\"),\n+        Ok(_) => println!(\"ok\"),\n+        Err(_) => {\n+            unreachable!();\n+        },\n+    }\n }\n \n fn main() {}"}, {"sha": "28abb2fc9bf23c2ee6860002fc018c8697dbe7f6", "filename": "tests/ui/match_same_arms2.stderr", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/bbef531518a3b4977a9c1f40808f950514b400fc/tests%2Fui%2Fmatch_same_arms2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbef531518a3b4977a9c1f40808f950514b400fc/tests%2Fui%2Fmatch_same_arms2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_same_arms2.stderr?ref=bbef531518a3b4977a9c1f40808f950514b400fc", "patch": "@@ -105,5 +105,41 @@ help: consider refactoring into `(Some(a), ..) | (.., Some(a))`\n LL |         (Some(a), ..) => bar(a),\n    |         ^^^^^^^^^^^^^\n \n-error: aborting due to 5 previous errors\n+error: this `match` has identical arm bodies\n+  --> $DIR/match_same_arms2.rs:102:29\n+   |\n+LL |         (Ok(_), Some(x)) => println!(\"ok {}\", x),\n+   |                             ^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: same as this\n+  --> $DIR/match_same_arms2.rs:101:29\n+   |\n+LL |         (Ok(x), Some(_)) => println!(\"ok {}\", x),\n+   |                             ^^^^^^^^^^^^^^^^^^^^\n+help: consider refactoring into `(Ok(x), Some(_)) | (Ok(_), Some(x))`\n+  --> $DIR/match_same_arms2.rs:101:9\n+   |\n+LL |         (Ok(x), Some(_)) => println!(\"ok {}\", x),\n+   |         ^^^^^^^^^^^^^^^^\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: this `match` has identical arm bodies\n+  --> $DIR/match_same_arms2.rs:117:18\n+   |\n+LL |         Ok(_) => println!(\"ok\"),\n+   |                  ^^^^^^^^^^^^^^\n+   |\n+note: same as this\n+  --> $DIR/match_same_arms2.rs:116:18\n+   |\n+LL |         Ok(3) => println!(\"ok\"),\n+   |                  ^^^^^^^^^^^^^^\n+help: consider refactoring into `Ok(3) | Ok(_)`\n+  --> $DIR/match_same_arms2.rs:116:9\n+   |\n+LL |         Ok(3) => println!(\"ok\"),\n+   |         ^^^^^\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: aborting due to 7 previous errors\n "}, {"sha": "823be65efe065703b8481ced833636d15b245373", "filename": "tests/ui/match_wild_err_arm.rs", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/bbef531518a3b4977a9c1f40808f950514b400fc/tests%2Fui%2Fmatch_wild_err_arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbef531518a3b4977a9c1f40808f950514b400fc/tests%2Fui%2Fmatch_wild_err_arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_wild_err_arm.rs?ref=bbef531518a3b4977a9c1f40808f950514b400fc", "patch": "@@ -0,0 +1,65 @@\n+#![feature(exclusive_range_pattern)]\n+#![allow(clippy::match_same_arms)]\n+#![warn(clippy::match_wild_err_arm)]\n+\n+fn match_wild_err_arm() {\n+    let x: Result<i32, &str> = Ok(3);\n+\n+    match x {\n+        Ok(3) => println!(\"ok\"),\n+        Ok(_) => println!(\"ok\"),\n+        Err(_) => panic!(\"err\"),\n+    }\n+\n+    match x {\n+        Ok(3) => println!(\"ok\"),\n+        Ok(_) => println!(\"ok\"),\n+        Err(_) => panic!(),\n+    }\n+\n+    match x {\n+        Ok(3) => println!(\"ok\"),\n+        Ok(_) => println!(\"ok\"),\n+        Err(_) => {\n+            panic!();\n+        },\n+    }\n+\n+    match x {\n+        Ok(3) => println!(\"ok\"),\n+        Ok(_) => println!(\"ok\"),\n+        Err(_e) => panic!(),\n+    }\n+\n+    // Allowed when used in `panic!`.\n+    match x {\n+        Ok(3) => println!(\"ok\"),\n+        Ok(_) => println!(\"ok\"),\n+        Err(_e) => panic!(\"{}\", _e),\n+    }\n+\n+    // Allowed when not with `panic!` block.\n+    match x {\n+        Ok(3) => println!(\"ok\"),\n+        Ok(_) => println!(\"ok\"),\n+        Err(_) => println!(\"err\"),\n+    }\n+\n+    // Allowed when used with `unreachable!`.\n+    match x {\n+        Ok(3) => println!(\"ok\"),\n+        Ok(_) => println!(\"ok\"),\n+        Err(_) => unreachable!(),\n+    }\n+\n+    // Allowed when used with `unreachable!`.\n+    match x {\n+        Ok(3) => println!(\"ok\"),\n+        Ok(_) => println!(\"ok\"),\n+        Err(_) => {\n+            unreachable!();\n+        },\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "20d4c933418b7a928cd2b292e799a4f6161b547e", "filename": "tests/ui/match_wild_err_arm.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/bbef531518a3b4977a9c1f40808f950514b400fc/tests%2Fui%2Fmatch_wild_err_arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbef531518a3b4977a9c1f40808f950514b400fc/tests%2Fui%2Fmatch_wild_err_arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_wild_err_arm.stderr?ref=bbef531518a3b4977a9c1f40808f950514b400fc", "patch": "@@ -0,0 +1,35 @@\n+error: `Err(_)` matches all errors\n+  --> $DIR/match_wild_err_arm.rs:11:9\n+   |\n+LL |         Err(_) => panic!(\"err\"),\n+   |         ^^^^^^\n+   |\n+   = note: `-D clippy::match-wild-err-arm` implied by `-D warnings`\n+   = note: match each error separately or use the error output\n+\n+error: `Err(_)` matches all errors\n+  --> $DIR/match_wild_err_arm.rs:17:9\n+   |\n+LL |         Err(_) => panic!(),\n+   |         ^^^^^^\n+   |\n+   = note: match each error separately or use the error output\n+\n+error: `Err(_)` matches all errors\n+  --> $DIR/match_wild_err_arm.rs:23:9\n+   |\n+LL |         Err(_) => {\n+   |         ^^^^^^\n+   |\n+   = note: match each error separately or use the error output\n+\n+error: `Err(_e)` matches all errors\n+  --> $DIR/match_wild_err_arm.rs:31:9\n+   |\n+LL |         Err(_e) => panic!(),\n+   |         ^^^^^^^\n+   |\n+   = note: match each error separately or use the error output\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "2ce0b574929e3c924360dd6b9ab89fcc097c70a9", "filename": "tests/ui/matches.rs", "status": "removed", "additions": 0, "deletions": 111, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/668bc485da68efd4d9a10718088c301c5f7ab402/tests%2Fui%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/668bc485da68efd4d9a10718088c301c5f7ab402/tests%2Fui%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatches.rs?ref=668bc485da68efd4d9a10718088c301c5f7ab402", "patch": "@@ -1,111 +0,0 @@\n-#![feature(exclusive_range_pattern)]\n-#![warn(clippy::all)]\n-#![allow(unused, clippy::redundant_pattern_matching, clippy::too_many_lines)]\n-#![warn(clippy::match_same_arms)]\n-\n-fn dummy() {}\n-\n-fn match_wild_err_arm() {\n-    let x: Result<i32, &str> = Ok(3);\n-\n-    match x {\n-        Ok(3) => println!(\"ok\"),\n-        Ok(_) => println!(\"ok\"),\n-        Err(_) => panic!(\"err\"),\n-    }\n-\n-    match x {\n-        Ok(3) => println!(\"ok\"),\n-        Ok(_) => println!(\"ok\"),\n-        Err(_) => panic!(),\n-    }\n-\n-    match x {\n-        Ok(3) => println!(\"ok\"),\n-        Ok(_) => println!(\"ok\"),\n-        Err(_) => {\n-            panic!();\n-        },\n-    }\n-\n-    match x {\n-        Ok(3) => println!(\"ok\"),\n-        Ok(_) => println!(\"ok\"),\n-        Err(_e) => panic!(),\n-    }\n-\n-    // Allowed when used in `panic!`.\n-    match x {\n-        Ok(3) => println!(\"ok\"),\n-        Ok(_) => println!(\"ok\"),\n-        Err(_e) => panic!(\"{}\", _e),\n-    }\n-\n-    // Allowed when not with `panic!` block.\n-    match x {\n-        Ok(3) => println!(\"ok\"),\n-        Ok(_) => println!(\"ok\"),\n-        Err(_) => println!(\"err\"),\n-    }\n-\n-    // Allowed when used with `unreachable!`.\n-    match x {\n-        Ok(3) => println!(\"ok\"),\n-        Ok(_) => println!(\"ok\"),\n-        Err(_) => unreachable!(),\n-    }\n-\n-    match x {\n-        Ok(3) => println!(\"ok\"),\n-        Ok(_) => println!(\"ok\"),\n-        Err(_) => unreachable!(),\n-    }\n-\n-    match x {\n-        Ok(3) => println!(\"ok\"),\n-        Ok(_) => println!(\"ok\"),\n-        Err(_) => {\n-            unreachable!();\n-        },\n-    }\n-\n-    // No warning because of the guard.\n-    match x {\n-        Ok(x) if x * x == 64 => println!(\"ok\"),\n-        Ok(_) => println!(\"ok\"),\n-        Err(_) => println!(\"err\"),\n-    }\n-\n-    // This used to be a false positive; see issue #1996.\n-    match x {\n-        Ok(3) => println!(\"ok\"),\n-        Ok(x) if x * x == 64 => println!(\"ok 64\"),\n-        Ok(_) => println!(\"ok\"),\n-        Err(_) => println!(\"err\"),\n-    }\n-\n-    match (x, Some(1i32)) {\n-        (Ok(x), Some(_)) => println!(\"ok {}\", x),\n-        (Ok(_), Some(x)) => println!(\"ok {}\", x),\n-        _ => println!(\"err\"),\n-    }\n-\n-    // No warning; different types for `x`.\n-    match (x, Some(1.0f64)) {\n-        (Ok(x), Some(_)) => println!(\"ok {}\", x),\n-        (Ok(_), Some(x)) => println!(\"ok {}\", x),\n-        _ => println!(\"err\"),\n-    }\n-\n-    // Because of a bug, no warning was generated for this case before #2251.\n-    match x {\n-        Ok(_tmp) => println!(\"ok\"),\n-        Ok(3) => println!(\"ok\"),\n-        Ok(_) => println!(\"ok\"),\n-        Err(_) => {\n-            unreachable!();\n-        },\n-    }\n-}\n-\n-fn main() {}"}, {"sha": "1c5c636fee61e461360453a55af24e2fb8faba26", "filename": "tests/ui/matches.stderr", "status": "removed", "additions": 0, "deletions": 234, "changes": 234, "blob_url": "https://github.com/rust-lang/rust/blob/668bc485da68efd4d9a10718088c301c5f7ab402/tests%2Fui%2Fmatches.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/668bc485da68efd4d9a10718088c301c5f7ab402/tests%2Fui%2Fmatches.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatches.stderr?ref=668bc485da68efd4d9a10718088c301c5f7ab402", "patch": "@@ -1,234 +0,0 @@\n-error: `Err(_)` matches all errors\n-  --> $DIR/matches.rs:14:9\n-   |\n-LL |         Err(_) => panic!(\"err\"),\n-   |         ^^^^^^\n-   |\n-   = note: `-D clippy::match-wild-err-arm` implied by `-D warnings`\n-   = note: match each error separately or use the error output\n-\n-error: this `match` has identical arm bodies\n-  --> $DIR/matches.rs:13:18\n-   |\n-LL |         Ok(_) => println!(\"ok\"),\n-   |                  ^^^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::match-same-arms` implied by `-D warnings`\n-note: same as this\n-  --> $DIR/matches.rs:12:18\n-   |\n-LL |         Ok(3) => println!(\"ok\"),\n-   |                  ^^^^^^^^^^^^^^\n-help: consider refactoring into `Ok(3) | Ok(_)`\n-  --> $DIR/matches.rs:12:9\n-   |\n-LL |         Ok(3) => println!(\"ok\"),\n-   |         ^^^^^\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n-\n-error: `Err(_)` matches all errors\n-  --> $DIR/matches.rs:20:9\n-   |\n-LL |         Err(_) => panic!(),\n-   |         ^^^^^^\n-   |\n-   = note: match each error separately or use the error output\n-\n-error: this `match` has identical arm bodies\n-  --> $DIR/matches.rs:19:18\n-   |\n-LL |         Ok(_) => println!(\"ok\"),\n-   |                  ^^^^^^^^^^^^^^\n-   |\n-note: same as this\n-  --> $DIR/matches.rs:18:18\n-   |\n-LL |         Ok(3) => println!(\"ok\"),\n-   |                  ^^^^^^^^^^^^^^\n-help: consider refactoring into `Ok(3) | Ok(_)`\n-  --> $DIR/matches.rs:18:9\n-   |\n-LL |         Ok(3) => println!(\"ok\"),\n-   |         ^^^^^\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n-\n-error: `Err(_)` matches all errors\n-  --> $DIR/matches.rs:26:9\n-   |\n-LL |         Err(_) => {\n-   |         ^^^^^^\n-   |\n-   = note: match each error separately or use the error output\n-\n-error: this `match` has identical arm bodies\n-  --> $DIR/matches.rs:25:18\n-   |\n-LL |         Ok(_) => println!(\"ok\"),\n-   |                  ^^^^^^^^^^^^^^\n-   |\n-note: same as this\n-  --> $DIR/matches.rs:24:18\n-   |\n-LL |         Ok(3) => println!(\"ok\"),\n-   |                  ^^^^^^^^^^^^^^\n-help: consider refactoring into `Ok(3) | Ok(_)`\n-  --> $DIR/matches.rs:24:9\n-   |\n-LL |         Ok(3) => println!(\"ok\"),\n-   |         ^^^^^\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n-\n-error: `Err(_e)` matches all errors\n-  --> $DIR/matches.rs:34:9\n-   |\n-LL |         Err(_e) => panic!(),\n-   |         ^^^^^^^\n-   |\n-   = note: match each error separately or use the error output\n-\n-error: this `match` has identical arm bodies\n-  --> $DIR/matches.rs:33:18\n-   |\n-LL |         Ok(_) => println!(\"ok\"),\n-   |                  ^^^^^^^^^^^^^^\n-   |\n-note: same as this\n-  --> $DIR/matches.rs:32:18\n-   |\n-LL |         Ok(3) => println!(\"ok\"),\n-   |                  ^^^^^^^^^^^^^^\n-help: consider refactoring into `Ok(3) | Ok(_)`\n-  --> $DIR/matches.rs:32:9\n-   |\n-LL |         Ok(3) => println!(\"ok\"),\n-   |         ^^^^^\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n-\n-error: this `match` has identical arm bodies\n-  --> $DIR/matches.rs:40:18\n-   |\n-LL |         Ok(_) => println!(\"ok\"),\n-   |                  ^^^^^^^^^^^^^^\n-   |\n-note: same as this\n-  --> $DIR/matches.rs:39:18\n-   |\n-LL |         Ok(3) => println!(\"ok\"),\n-   |                  ^^^^^^^^^^^^^^\n-help: consider refactoring into `Ok(3) | Ok(_)`\n-  --> $DIR/matches.rs:39:9\n-   |\n-LL |         Ok(3) => println!(\"ok\"),\n-   |         ^^^^^\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n-\n-error: this `match` has identical arm bodies\n-  --> $DIR/matches.rs:47:18\n-   |\n-LL |         Ok(_) => println!(\"ok\"),\n-   |                  ^^^^^^^^^^^^^^\n-   |\n-note: same as this\n-  --> $DIR/matches.rs:46:18\n-   |\n-LL |         Ok(3) => println!(\"ok\"),\n-   |                  ^^^^^^^^^^^^^^\n-help: consider refactoring into `Ok(3) | Ok(_)`\n-  --> $DIR/matches.rs:46:9\n-   |\n-LL |         Ok(3) => println!(\"ok\"),\n-   |         ^^^^^\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n-\n-error: this `match` has identical arm bodies\n-  --> $DIR/matches.rs:54:18\n-   |\n-LL |         Ok(_) => println!(\"ok\"),\n-   |                  ^^^^^^^^^^^^^^\n-   |\n-note: same as this\n-  --> $DIR/matches.rs:53:18\n-   |\n-LL |         Ok(3) => println!(\"ok\"),\n-   |                  ^^^^^^^^^^^^^^\n-help: consider refactoring into `Ok(3) | Ok(_)`\n-  --> $DIR/matches.rs:53:9\n-   |\n-LL |         Ok(3) => println!(\"ok\"),\n-   |         ^^^^^\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n-\n-error: this `match` has identical arm bodies\n-  --> $DIR/matches.rs:60:18\n-   |\n-LL |         Ok(_) => println!(\"ok\"),\n-   |                  ^^^^^^^^^^^^^^\n-   |\n-note: same as this\n-  --> $DIR/matches.rs:59:18\n-   |\n-LL |         Ok(3) => println!(\"ok\"),\n-   |                  ^^^^^^^^^^^^^^\n-help: consider refactoring into `Ok(3) | Ok(_)`\n-  --> $DIR/matches.rs:59:9\n-   |\n-LL |         Ok(3) => println!(\"ok\"),\n-   |         ^^^^^\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n-\n-error: this `match` has identical arm bodies\n-  --> $DIR/matches.rs:66:18\n-   |\n-LL |         Ok(_) => println!(\"ok\"),\n-   |                  ^^^^^^^^^^^^^^\n-   |\n-note: same as this\n-  --> $DIR/matches.rs:65:18\n-   |\n-LL |         Ok(3) => println!(\"ok\"),\n-   |                  ^^^^^^^^^^^^^^\n-help: consider refactoring into `Ok(3) | Ok(_)`\n-  --> $DIR/matches.rs:65:9\n-   |\n-LL |         Ok(3) => println!(\"ok\"),\n-   |         ^^^^^\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n-\n-error: this `match` has identical arm bodies\n-  --> $DIR/matches.rs:89:29\n-   |\n-LL |         (Ok(_), Some(x)) => println!(\"ok {}\", x),\n-   |                             ^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: same as this\n-  --> $DIR/matches.rs:88:29\n-   |\n-LL |         (Ok(x), Some(_)) => println!(\"ok {}\", x),\n-   |                             ^^^^^^^^^^^^^^^^^^^^\n-help: consider refactoring into `(Ok(x), Some(_)) | (Ok(_), Some(x))`\n-  --> $DIR/matches.rs:88:9\n-   |\n-LL |         (Ok(x), Some(_)) => println!(\"ok {}\", x),\n-   |         ^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n-\n-error: this `match` has identical arm bodies\n-  --> $DIR/matches.rs:104:18\n-   |\n-LL |         Ok(_) => println!(\"ok\"),\n-   |                  ^^^^^^^^^^^^^^\n-   |\n-note: same as this\n-  --> $DIR/matches.rs:103:18\n-   |\n-LL |         Ok(3) => println!(\"ok\"),\n-   |                  ^^^^^^^^^^^^^^\n-help: consider refactoring into `Ok(3) | Ok(_)`\n-  --> $DIR/matches.rs:103:9\n-   |\n-LL |         Ok(3) => println!(\"ok\"),\n-   |         ^^^^^\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n-\n-error: aborting due to 15 previous errors\n-"}]}