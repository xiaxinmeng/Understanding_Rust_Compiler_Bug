{"sha": "9676fb2d0ad8867aa90d946deb23fd6c5dd33bce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2NzZmYjJkMGFkODg2N2FhOTBkOTQ2ZGViMjNmZDZjNWRkMzNiY2U=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-12-31T01:00:59Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-12-31T01:00:59Z"}, "message": "Assign method types properly by sorted-order.", "tree": {"sha": "88d50eb2b74f58bd814c7cb0d2f9152238338a36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88d50eb2b74f58bd814c7cb0d2f9152238338a36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9676fb2d0ad8867aa90d946deb23fd6c5dd33bce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9676fb2d0ad8867aa90d946deb23fd6c5dd33bce", "html_url": "https://github.com/rust-lang/rust/commit/9676fb2d0ad8867aa90d946deb23fd6c5dd33bce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9676fb2d0ad8867aa90d946deb23fd6c5dd33bce/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "153efb58bc1a50d12997081a0cbb0db19c12103b", "url": "https://api.github.com/repos/rust-lang/rust/commits/153efb58bc1a50d12997081a0cbb0db19c12103b", "html_url": "https://github.com/rust-lang/rust/commit/153efb58bc1a50d12997081a0cbb0db19c12103b"}], "stats": {"total": 20, "additions": 12, "deletions": 8}, "files": [{"sha": "229a15bbeb82d0645a1c7e9f2f060f664db62625", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9676fb2d0ad8867aa90d946deb23fd6c5dd33bce/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9676fb2d0ad8867aa90d946deb23fd6c5dd33bce/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=9676fb2d0ad8867aa90d946deb23fd6c5dd33bce", "patch": "@@ -164,7 +164,8 @@ fn ast_ty_to_ty_crate(@crate_ctxt ccx, &@ast.ty ast_ty) -> @ty.t {\n // We then annotate the AST with the resulting types and return the annotated\n // AST, along with a table mapping item IDs to their types.\n \n-fn collect_item_types(@ast.crate crate) -> tup(@ast.crate, @ty_table) {\n+fn collect_item_types(session.session sess, @ast.crate crate)\n+    -> tup(@ast.crate, @ty_table) {\n \n     type ty_item_table = hashmap[ast.def_id,@ast.item];\n \n@@ -344,9 +345,11 @@ fn collect_item_types(@ast.crate crate) -> tup(@ast.crate, @ty_table) {\n     // Second pass: translate the types of all items.\n     let @ty_table item_to_ty = @common.new_def_hash[@ty.t]();\n \n-    type env = rec(@ty_item_table id_to_ty_item,\n+    type env = rec(session.session sess,\n+                   @ty_item_table id_to_ty_item,\n                    @ty_table item_to_ty);\n-    let @env e = @rec(id_to_ty_item=id_to_ty_item,\n+    let @env e = @rec(sess=sess,\n+                      id_to_ty_item=id_to_ty_item,\n                       item_to_ty=item_to_ty);\n \n     fn convert(&@env e, @ast.item i) -> @env {\n@@ -413,17 +416,18 @@ fn collect_item_types(@ast.crate crate) -> tup(@ast.crate, @ty_table) {\n         let vec[@ast.method] methods = vec();\n         let vec[ast.obj_field] fields = vec();\n \n-        let uint n = 0u;\n-        for (method meth_ty in meth_tys) {\n-            let @ast.method meth = ob.methods.(n);\n+        for (@ast.method meth in ob.methods) {\n+            let uint ix = ty.method_idx(e.sess,\n+                                        sp, meth.node.ident,\n+                                        meth_tys);\n+            let method meth_ty = meth_tys.(ix);\n             let ast.method_ m_;\n             let @ast.method m;\n             auto meth_tfn = plain_ty(ty.ty_fn(meth_ty.inputs,\n                                               meth_ty.output));\n             m_ = rec(ann=ast.ann_type(meth_tfn) with meth.node);\n             m = @rec(node=m_ with *meth);\n             append[@ast.method](methods, m);\n-            n += 1u;\n         }\n         auto g = bind getter(e.id_to_ty_item, e.item_to_ty, _);\n         for (ast.obj_field fld in ob.fields) {\n@@ -1529,7 +1533,7 @@ fn update_obj_fields(&@crate_ctxt ccx, @ast.item i) -> @crate_ctxt {\n }\n \n fn check_crate(session.session sess, @ast.crate crate) -> @ast.crate {\n-    auto result = collect_item_types(crate);\n+    auto result = collect_item_types(sess, crate);\n \n     let vec[ast.obj_field] fields = vec();\n "}]}