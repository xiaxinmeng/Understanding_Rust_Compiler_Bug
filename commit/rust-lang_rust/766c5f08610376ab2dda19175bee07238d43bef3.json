{"sha": "766c5f08610376ab2dda19175bee07238d43bef3", "node_id": "C_kwDOAAsO6NoAKDc2NmM1ZjA4NjEwMzc2YWIyZGRhMTkxNzViZWUwNzIzOGQ0M2JlZjM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-16T16:45:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-16T16:45:26Z"}, "message": "Auto merge of #12689 - Veykril:macro-rec, r=Veykril\n\ninternal: Record all macro definitions in ItemScope\n\nFixes https://github.com/rust-lang/rust-analyzer/issues/12100\n\nDoesn't resolve the shadowing issues though, fixing those is gonna be really tricky I believe unless we can come up with a nice scheme to \"order\" item tree items (using syntax ranges and file ids would be a pain and also a bad idea since that'll require us to potentially reparse files in collection).", "tree": {"sha": "625be67e4449559d2388295ea2e818b2d7da9936", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/625be67e4449559d2388295ea2e818b2d7da9936"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/766c5f08610376ab2dda19175bee07238d43bef3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/766c5f08610376ab2dda19175bee07238d43bef3", "html_url": "https://github.com/rust-lang/rust/commit/766c5f08610376ab2dda19175bee07238d43bef3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/766c5f08610376ab2dda19175bee07238d43bef3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01d251789f3fee16b9f9a2663ca2922abec5269f", "url": "https://api.github.com/repos/rust-lang/rust/commits/01d251789f3fee16b9f9a2663ca2922abec5269f", "html_url": "https://github.com/rust-lang/rust/commit/01d251789f3fee16b9f9a2663ca2922abec5269f"}, {"sha": "db49ac8734e7d6e26012d56b0786c7d80da82699", "url": "https://api.github.com/repos/rust-lang/rust/commits/db49ac8734e7d6e26012d56b0786c7d80da82699", "html_url": "https://github.com/rust-lang/rust/commit/db49ac8734e7d6e26012d56b0786c7d80da82699"}], "stats": {"total": 84, "additions": 57, "deletions": 27}, "files": [{"sha": "5b1435e8f44248f121bf079456bbc7d4cbf0c8b9", "filename": "crates/hir-def/src/child_by_source.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/766c5f08610376ab2dda19175bee07238d43bef3/crates%2Fhir-def%2Fsrc%2Fchild_by_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/766c5f08610376ab2dda19175bee07238d43bef3/crates%2Fhir-def%2Fsrc%2Fchild_by_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fchild_by_source.rs?ref=766c5f08610376ab2dda19175bee07238d43bef3", "patch": "@@ -102,13 +102,15 @@ impl ChildBySource for ItemScope {\n                 res[keys::ATTR_MACRO_CALL].insert(ast_id.to_node(db.upcast()), call_id);\n             },\n         );\n-        self.legacy_macros().for_each(|(_, id)| {\n-            if let MacroId::MacroRulesId(id) = id {\n-                let loc = id.lookup(db);\n-                if loc.id.file_id() == file_id {\n-                    res[keys::MACRO_RULES].insert(loc.source(db).value, id);\n+        self.legacy_macros().for_each(|(_, ids)| {\n+            ids.iter().for_each(|&id| {\n+                if let MacroId::MacroRulesId(id) = id {\n+                    let loc = id.lookup(db);\n+                    if loc.id.file_id() == file_id {\n+                        res[keys::MACRO_RULES].insert(loc.source(db).value, id);\n+                    }\n                 }\n-            }\n+            })\n         });\n         self.derive_macro_invocs().filter(|(id, _)| id.file_id == file_id).for_each(\n             |(ast_id, calls)| {"}, {"sha": "b98b2855cb084848aed44860d8a784bdad59ca6a", "filename": "crates/hir-def/src/item_scope.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/766c5f08610376ab2dda19175bee07238d43bef3/crates%2Fhir-def%2Fsrc%2Fitem_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/766c5f08610376ab2dda19175bee07238d43bef3/crates%2Fhir-def%2Fsrc%2Fitem_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fitem_scope.rs?ref=766c5f08610376ab2dda19175bee07238d43bef3", "patch": "@@ -61,7 +61,7 @@ pub struct ItemScope {\n     /// Module scoped macros will be inserted into `items` instead of here.\n     // FIXME: Macro shadowing in one module is not properly handled. Non-item place macros will\n     // be all resolved to the last one defined if shadowing happens.\n-    legacy_macros: FxHashMap<Name, MacroId>,\n+    legacy_macros: FxHashMap<Name, SmallVec<[MacroId; 1]>>,\n     /// The derive macro invocations in this scope.\n     attr_macros: FxHashMap<AstId<ast::Item>, MacroCallId>,\n     /// The derive macro invocations in this scope, keyed by the owner item over the actual derive attributes\n@@ -129,13 +129,13 @@ impl ItemScope {\n     }\n \n     /// Iterate over all module scoped macros\n-    pub(crate) fn macros<'a>(&'a self) -> impl Iterator<Item = (&'a Name, MacroId)> + 'a {\n+    pub(crate) fn macros(&self) -> impl Iterator<Item = (&Name, MacroId)> + '_ {\n         self.entries().filter_map(|(name, def)| def.take_macros().map(|macro_| (name, macro_)))\n     }\n \n     /// Iterate over all legacy textual scoped macros visible at the end of the module\n-    pub fn legacy_macros<'a>(&'a self) -> impl Iterator<Item = (&'a Name, MacroId)> + 'a {\n-        self.legacy_macros.iter().map(|(name, def)| (name, *def))\n+    pub fn legacy_macros(&self) -> impl Iterator<Item = (&Name, &[MacroId])> + '_ {\n+        self.legacy_macros.iter().map(|(name, def)| (name, &**def))\n     }\n \n     /// Get a name from current module scope, legacy macros are not included\n@@ -180,8 +180,8 @@ impl ItemScope {\n         self.declarations.push(def)\n     }\n \n-    pub(crate) fn get_legacy_macro(&self, name: &Name) -> Option<MacroId> {\n-        self.legacy_macros.get(name).copied()\n+    pub(crate) fn get_legacy_macro(&self, name: &Name) -> Option<&[MacroId]> {\n+        self.legacy_macros.get(name).map(|it| &**it)\n     }\n \n     pub(crate) fn define_impl(&mut self, imp: ImplId) {\n@@ -193,7 +193,7 @@ impl ItemScope {\n     }\n \n     pub(crate) fn define_legacy_macro(&mut self, name: Name, mac: MacroId) {\n-        self.legacy_macros.insert(name, mac);\n+        self.legacy_macros.entry(name).or_default().push(mac);\n     }\n \n     pub(crate) fn add_attr_macro_invoc(&mut self, item: AstId<ast::Item>, call: MacroCallId) {\n@@ -320,7 +320,7 @@ impl ItemScope {\n         )\n     }\n \n-    pub(crate) fn collect_legacy_macros(&self) -> FxHashMap<Name, MacroId> {\n+    pub(crate) fn collect_legacy_macros(&self) -> FxHashMap<Name, SmallVec<[MacroId; 1]>> {\n         self.legacy_macros.clone()\n     }\n "}, {"sha": "317e21538b0da6afe14086e033c8fe0b59ac9ff2", "filename": "crates/hir-def/src/nameres/collector.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/766c5f08610376ab2dda19175bee07238d43bef3/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/766c5f08610376ab2dda19175bee07238d43bef3/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs?ref=766c5f08610376ab2dda19175bee07238d43bef3", "patch": "@@ -1806,7 +1806,9 @@ impl ModCollector<'_, '_> {\n         let res = modules.alloc(ModuleData::new(origin, vis));\n         modules[res].parent = Some(self.module_id);\n         for (name, mac) in modules[self.module_id].scope.collect_legacy_macros() {\n-            modules[res].scope.define_legacy_macro(name, mac)\n+            for &mac in &mac {\n+                modules[res].scope.define_legacy_macro(name.clone(), mac);\n+            }\n         }\n         modules[self.module_id].children.insert(name.clone(), res);\n \n@@ -2024,7 +2026,8 @@ impl ModCollector<'_, '_> {\n                             map[module]\n                                 .scope\n                                 .get_legacy_macro(name)\n-                                .map(|it| macro_id_to_def_id(self.def_collector.db, it.into()))\n+                                .and_then(|it| it.last())\n+                                .map(|&it| macro_id_to_def_id(self.def_collector.db, it.into()))\n                         },\n                     )\n                 })\n@@ -2077,8 +2080,10 @@ impl ModCollector<'_, '_> {\n \n     fn import_all_legacy_macros(&mut self, module_id: LocalModuleId) {\n         let macros = self.def_collector.def_map[module_id].scope.collect_legacy_macros();\n-        for (name, macro_) in macros {\n-            self.def_collector.define_legacy_macro(self.module_id, name.clone(), macro_);\n+        for (name, macs) in macros {\n+            macs.last().map(|&mac| {\n+                self.def_collector.define_legacy_macro(self.module_id, name.clone(), mac)\n+            });\n         }\n     }\n "}, {"sha": "c579bc9194c30bfbe88232fec290fa7d1e8790e8", "filename": "crates/hir-def/src/nameres/path_resolution.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/766c5f08610376ab2dda19175bee07238d43bef3/crates%2Fhir-def%2Fsrc%2Fnameres%2Fpath_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/766c5f08610376ab2dda19175bee07238d43bef3/crates%2Fhir-def%2Fsrc%2Fnameres%2Fpath_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Fpath_resolution.rs?ref=766c5f08610376ab2dda19175bee07238d43bef3", "patch": "@@ -381,7 +381,9 @@ impl DefMap {\n         let from_legacy_macro = self[module]\n             .scope\n             .get_legacy_macro(name)\n-            .map_or_else(PerNs::none, |m| PerNs::macros(m.into(), Visibility::Public));\n+            // FIXME: shadowing\n+            .and_then(|it| it.last())\n+            .map_or_else(PerNs::none, |&m| PerNs::macros(m.into(), Visibility::Public));\n         let from_scope = self[module].scope.get(name);\n         let from_builtin = match self.block {\n             Some(_) => {"}, {"sha": "c8d3052102f452666580f2b4d60c3b2abb29b970", "filename": "crates/hir-def/src/resolver.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/766c5f08610376ab2dda19175bee07238d43bef3/crates%2Fhir-def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/766c5f08610376ab2dda19175bee07238d43bef3/crates%2Fhir-def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fresolver.rs?ref=766c5f08610376ab2dda19175bee07238d43bef3", "patch": "@@ -508,8 +508,13 @@ impl Scope {\n                 m.def_map[m.module_id].scope.entries().for_each(|(name, def)| {\n                     acc.add_per_ns(name, def);\n                 });\n-                m.def_map[m.module_id].scope.legacy_macros().for_each(|(name, mac)| {\n-                    acc.add(name, ScopeDef::ModuleDef(ModuleDefId::MacroId(MacroId::from(mac))));\n+                m.def_map[m.module_id].scope.legacy_macros().for_each(|(name, macs)| {\n+                    macs.iter().for_each(|&mac| {\n+                        acc.add(\n+                            name,\n+                            ScopeDef::ModuleDef(ModuleDefId::MacroId(MacroId::from(mac))),\n+                        );\n+                    })\n                 });\n                 m.def_map.extern_prelude().for_each(|(name, &def)| {\n                     acc.add(name, ScopeDef::ModuleDef(ModuleDefId::ModuleId(def)));"}, {"sha": "7e262b4e4cb2f0254b3bb018c4cb8db2b4e0e06f", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/766c5f08610376ab2dda19175bee07238d43bef3/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/766c5f08610376ab2dda19175bee07238d43bef3/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=766c5f08610376ab2dda19175bee07238d43bef3", "patch": "@@ -560,7 +560,7 @@ impl Module {\n     pub fn legacy_macros(self, db: &dyn HirDatabase) -> Vec<Macro> {\n         let def_map = self.id.def_map(db.upcast());\n         let scope = &def_map[self.id.local_id].scope;\n-        scope.legacy_macros().map(|(_, it)| MacroId::from(it).into()).collect()\n+        scope.legacy_macros().flat_map(|(_, it)| it).map(|&it| MacroId::from(it).into()).collect()\n     }\n \n     pub fn impl_defs(self, db: &dyn HirDatabase) -> Vec<Impl> {"}, {"sha": "3b84877dd363c01dbd3b06327517cf240b0f7f6d", "filename": "crates/hir/src/symbols.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/766c5f08610376ab2dda19175bee07238d43bef3/crates%2Fhir%2Fsrc%2Fsymbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/766c5f08610376ab2dda19175bee07238d43bef3/crates%2Fhir%2Fsrc%2Fsymbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsymbols.rs?ref=766c5f08610376ab2dda19175bee07238d43bef3", "patch": "@@ -176,11 +176,13 @@ impl<'a> SymbolCollector<'a> {\n         }\n \n         for (_, id) in scope.legacy_macros() {\n-            if id.module(self.db.upcast()) == module_id {\n-                match id {\n-                    MacroId::Macro2Id(id) => self.push_decl(id, FileSymbolKind::Macro),\n-                    MacroId::MacroRulesId(id) => self.push_decl(id, FileSymbolKind::Macro),\n-                    MacroId::ProcMacroId(id) => self.push_decl(id, FileSymbolKind::Macro),\n+            for &id in id {\n+                if id.module(self.db.upcast()) == module_id {\n+                    match id {\n+                        MacroId::Macro2Id(id) => self.push_decl(id, FileSymbolKind::Macro),\n+                        MacroId::MacroRulesId(id) => self.push_decl(id, FileSymbolKind::Macro),\n+                        MacroId::ProcMacroId(id) => self.push_decl(id, FileSymbolKind::Macro),\n+                    }\n                 }\n             }\n         }"}, {"sha": "54d4279525dd599501ec27a0f09e7f7473da5d5c", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_macros.html", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/766c5f08610376ab2dda19175bee07238d43bef3/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_macros.html", "raw_url": "https://github.com/rust-lang/rust/raw/766c5f08610376ab2dda19175bee07238d43bef3/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_macros.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_macros.html?ref=766c5f08610376ab2dda19175bee07238d43bef3", "patch": "@@ -68,6 +68,13 @@\n     <span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n \n+<span class=\"comment documentation\">/// textually shadow previous definition</span>\n+<span class=\"keyword\">macro_rules</span><span class=\"macro_bang\">!</span> <span class=\"macro declaration\">noop</span> <span class=\"brace\">{</span>\n+    <span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>expr<span class=\"colon\">:</span>expr<span class=\"parenthesis\">)</span> <span class=\"operator\">=</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span>\n+        <span class=\"punctuation\">$</span>expr\n+    <span class=\"brace\">}</span>\n+<span class=\"brace\">}</span>\n+\n <span class=\"keyword\">macro_rules</span><span class=\"macro_bang\">!</span> <span class=\"macro declaration\">keyword_frag</span> <span class=\"brace\">{</span>\n     <span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>type<span class=\"colon\">:</span>ty<span class=\"parenthesis\">)</span> <span class=\"operator\">=</span><span class=\"angle\">&gt;</span> <span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>type<span class=\"parenthesis\">)</span>\n <span class=\"brace\">}</span>"}, {"sha": "6ba6153178da9ce5aceedffe45add51ebc615621", "filename": "crates/ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/766c5f08610376ab2dda19175bee07238d43bef3/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/766c5f08610376ab2dda19175bee07238d43bef3/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=766c5f08610376ab2dda19175bee07238d43bef3", "patch": "@@ -63,6 +63,13 @@ macro_rules! noop {\n     }\n }\n \n+/// textually shadow previous definition\n+macro_rules! noop {\n+    ($expr:expr) => {\n+        $expr\n+    }\n+}\n+\n macro_rules! keyword_frag {\n     ($type:ty) => ($type)\n }"}]}