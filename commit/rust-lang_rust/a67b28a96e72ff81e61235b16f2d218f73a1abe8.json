{"sha": "a67b28a96e72ff81e61235b16f2d218f73a1abe8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2N2IyOGE5NmU3MmZmODFlNjEyMzViMTZmMmQyMThmNzNhMWFiZTg=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-03-30T21:51:48Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-03-31T17:42:21Z"}, "message": "Use Place directly on borrow_of_local_data, it's Copy", "tree": {"sha": "82c63abddeece93bff82416dd2aec21f6be080e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82c63abddeece93bff82416dd2aec21f6be080e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a67b28a96e72ff81e61235b16f2d218f73a1abe8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAl6DgP0ACgkQgTGiTgx5\n768UgRAAqeqzg5NoYQhshFnnksNfGThURywdCWjGx9XfStMusAI1b0tm5k8AHL8z\nQ0KXh+4u1IOsAcDbYWjrGwiHFfU2vFPBlH3m7qrNAJ6ANa4P9cozjbBq49FYZpgP\nnbsRq76RvRdukynkF9KqMA/VqtxyoNsl2T+LEbSWZmPRyMEmVDuCsSbbEX7muib6\nVj1CQbzOWxrTev/P+1g8QjV185ECA6zYnKPMcFtpibyxE/UrTLRwFGemYI7gGVCA\n9Iuc7hNKoXkl6DgqGftukquBa9F0igYDJXKdXyLlDYHBLRTA1UIDgEdVnP2dTc79\nyIl3sf/zi2f+Z1Q9twWTh4S/WnsJJSxz4dDxjbS6Hipx6fGkEQ+Dvpo5PZiaR+74\nN3NdcQdBlcfBuUD6MGMI0YqUEFxmsAyTW6VukvXSRitzX73KAZcYGGG1KCXPneKG\nIl583k+uL3UludPuzVkFThGBfBE1n9X2HhjRB1tprEw5NmEpno4qWS1ESe39V2J1\nE8YUjc8zl8/htqASkrCAvYp8FmTfrBF+UkAiQDDAIp8dZKVd9Zdq6kC7m2xu7nDc\nAmR8UWaYsRXSDTkWK9ydJ+Sm2vrsuGCYic9H0oWbAs+wMwWqgZrIr5LJiG1mI/32\nMxUa1H9SVvxITL+4wOBbpMN2xwjN8FfgYwov2lvmEBWFkRFLG6M=\n=JaFR\n-----END PGP SIGNATURE-----", "payload": "tree 82c63abddeece93bff82416dd2aec21f6be080e0\nparent f026441e322277fc2cdd9360598c62966293ff1c\nauthor Santiago Pastorino <spastorino@gmail.com> 1585605108 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1585676541 -0300\n\nUse Place directly on borrow_of_local_data, it's Copy\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a67b28a96e72ff81e61235b16f2d218f73a1abe8", "html_url": "https://github.com/rust-lang/rust/commit/a67b28a96e72ff81e61235b16f2d218f73a1abe8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a67b28a96e72ff81e61235b16f2d218f73a1abe8/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f026441e322277fc2cdd9360598c62966293ff1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f026441e322277fc2cdd9360598c62966293ff1c", "html_url": "https://github.com/rust-lang/rust/commit/f026441e322277fc2cdd9360598c62966293ff1c"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "318751113b283817adf8f35d1f7a5925be11267f", "filename": "src/librustc_mir/borrow_check/invalidation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a67b28a96e72ff81e61235b16f2d218f73a1abe8/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a67b28a96e72ff81e61235b16f2d218f73a1abe8/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs?ref=a67b28a96e72ff81e61235b16f2d218f73a1abe8", "patch": "@@ -166,7 +166,7 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n                 let borrow_set = self.borrow_set.clone();\n                 let resume = self.location_table.start_index(resume.start_location());\n                 for i in borrow_set.borrows.indices() {\n-                    if borrow_of_local_data(&borrow_set.borrows[i].borrowed_place) {\n+                    if borrow_of_local_data(borrow_set.borrows[i].borrowed_place) {\n                         self.all_facts.invalidates.push((resume, i));\n                     }\n                 }\n@@ -178,7 +178,7 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n                 let borrow_set = self.borrow_set.clone();\n                 let start = self.location_table.start_index(location);\n                 for i in borrow_set.borrows.indices() {\n-                    if borrow_of_local_data(&borrow_set.borrows[i].borrowed_place) {\n+                    if borrow_of_local_data(borrow_set.borrows[i].borrowed_place) {\n                         self.all_facts.invalidates.push((start, i));\n                     }\n                 }"}, {"sha": "52847af214f6c760e90cb5dfbfcfdc09d2a92bbe", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a67b28a96e72ff81e61235b16f2d218f73a1abe8/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a67b28a96e72ff81e61235b16f2d218f73a1abe8/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=a67b28a96e72ff81e61235b16f2d218f73a1abe8", "patch": "@@ -1463,7 +1463,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     fn check_for_local_borrow(&mut self, borrow: &BorrowData<'tcx>, yield_span: Span) {\n         debug!(\"check_for_local_borrow({:?})\", borrow);\n \n-        if borrow_of_local_data(&borrow.borrowed_place) {\n+        if borrow_of_local_data(borrow.borrowed_place) {\n             let err = self.cannot_borrow_across_generator_yield(\n                 self.retrieve_borrow_spans(borrow).var_or_use(),\n                 yield_span,"}, {"sha": "f5238e7b7bedcf64baaec6039dd10a1eee762efc", "filename": "src/librustc_mir/borrow_check/path_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a67b28a96e72ff81e61235b16f2d218f73a1abe8/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a67b28a96e72ff81e61235b16f2d218f73a1abe8/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs?ref=a67b28a96e72ff81e61235b16f2d218f73a1abe8", "patch": "@@ -130,7 +130,7 @@ pub(super) fn is_active<'tcx>(\n \n /// Determines if a given borrow is borrowing local data\n /// This is called for all Yield expressions on movable generators\n-pub(super) fn borrow_of_local_data(place: &Place<'_>) -> bool {\n+pub(super) fn borrow_of_local_data(place: Place<'_>) -> bool {\n     // Reborrow of already borrowed data is ignored\n     // Any errors will be caught on the initial borrow\n     !place.is_indirect()"}]}