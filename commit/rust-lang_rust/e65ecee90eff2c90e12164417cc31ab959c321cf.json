{"sha": "e65ecee90eff2c90e12164417cc31ab959c321cf", "node_id": "C_kwDOAAsO6NoAKGU2NWVjZWU5MGVmZjJjOTBlMTIxNjQ0MTdjYzMxYWI5NTljMzIxY2Y", "commit": {"author": {"name": "Thom Chiovoloni", "email": "chiovolonit@gmail.com", "date": "2022-05-14T19:37:19Z"}, "committer": {"name": "Thom Chiovoloni", "email": "thom@shift.click", "date": "2022-07-01T13:21:19Z"}, "message": "Rename AtomicPtr::fetch_{add,sub}{,_bytes}", "tree": {"sha": "b5dd84852e1ad606a9186f6f0901f4e513afedfb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5dd84852e1ad606a9186f6f0901f4e513afedfb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e65ecee90eff2c90e12164417cc31ab959c321cf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQQszICQ1r0Zqrp7OLPXcz0dendfCgUCYr70zwAKCRDXcz0dendf\nChFhAP0U/SDfRUxhmNMjpUwKWoorKQDzkMXe3a11Gyv0UxIQJQEArpeR+ZQsvLFH\nS6IXULYwiECw6j5KzmDfMWF73m4lUgs=\n=TI2E\n-----END PGP SIGNATURE-----", "payload": "tree b5dd84852e1ad606a9186f6f0901f4e513afedfb\nparent 2f872afdb514032f746b8641672eb13936fc897d\nauthor Thom Chiovoloni <chiovolonit@gmail.com> 1652557039 -0700\ncommitter Thom Chiovoloni <thom@shift.click> 1656681679 -0700\n\nRename AtomicPtr::fetch_{add,sub}{,_bytes}\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e65ecee90eff2c90e12164417cc31ab959c321cf", "html_url": "https://github.com/rust-lang/rust/commit/e65ecee90eff2c90e12164417cc31ab959c321cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e65ecee90eff2c90e12164417cc31ab959c321cf/comments", "author": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f872afdb514032f746b8641672eb13936fc897d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f872afdb514032f746b8641672eb13936fc897d", "html_url": "https://github.com/rust-lang/rust/commit/2f872afdb514032f746b8641672eb13936fc897d"}], "stats": {"total": 58, "additions": 29, "deletions": 29}, "files": [{"sha": "bf8ce6971b87e12bc1477cf3bb6251b0834ae5ad", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/e65ecee90eff2c90e12164417cc31ab959c321cf/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e65ecee90eff2c90e12164417cc31ab959c321cf/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=e65ecee90eff2c90e12164417cc31ab959c321cf", "patch": "@@ -1462,12 +1462,12 @@ impl<T> AtomicPtr<T> {\n     /// to offset the pointer by an amount which is not a multiple of\n     /// `size_of::<T>()`. This can sometimes be inconvenient, as you may want to\n     /// work with a deliberately misaligned pointer. In such cases, you may use\n-    /// the [`fetch_add_bytes`](Self::fetch_add_bytes) method instead.\n+    /// the [`fetch_byte_add`](Self::fetch_byte_add) method instead.\n     ///\n-    /// `fetch_add` takes an [`Ordering`] argument which describes the memory\n-    /// ordering of this operation. All ordering modes are possible. Note that\n-    /// using [`Acquire`] makes the store part of this operation [`Relaxed`],\n-    /// and using [`Release`] makes the load part [`Relaxed`].\n+    /// `fetch_ptr_add` takes an [`Ordering`] argument which describes the\n+    /// memory ordering of this operation. All ordering modes are possible. Note\n+    /// that using [`Acquire`] makes the store part of this operation\n+    /// [`Relaxed`], and using [`Release`] makes the load part [`Relaxed`].\n     ///\n     /// **Note**: This method is only available on platforms that support atomic\n     /// operations on [`AtomicPtr`].\n@@ -1481,15 +1481,15 @@ impl<T> AtomicPtr<T> {\n     /// use core::sync::atomic::{AtomicPtr, Ordering};\n     ///\n     /// let atom = AtomicPtr::<i64>::new(core::ptr::null_mut());\n-    /// assert_eq!(atom.fetch_add(1, Ordering::Relaxed).addr(), 0);\n+    /// assert_eq!(atom.fetch_ptr_add(1, Ordering::Relaxed).addr(), 0);\n     /// // Note: units of `size_of::<i64>()`.\n     /// assert_eq!(atom.load(Ordering::Relaxed).addr(), 8);\n     /// ```\n     #[inline]\n     #[cfg(target_has_atomic = \"ptr\")]\n     #[unstable(feature = \"strict_provenance_atomic_ptr\", issue = \"95228\")]\n-    pub fn fetch_add(&self, val: usize, order: Ordering) -> *mut T {\n-        self.fetch_add_bytes(val.wrapping_mul(core::mem::size_of::<T>()), order)\n+    pub fn fetch_ptr_add(&self, val: usize, order: Ordering) -> *mut T {\n+        self.fetch_byte_add(val.wrapping_mul(core::mem::size_of::<T>()), order)\n     }\n \n     /// Offsets the pointer's address by subtracting `val` (in units of `T`),\n@@ -1502,9 +1502,9 @@ impl<T> AtomicPtr<T> {\n     /// to offset the pointer by an amount which is not a multiple of\n     /// `size_of::<T>()`. This can sometimes be inconvenient, as you may want to\n     /// work with a deliberately misaligned pointer. In such cases, you may use\n-    /// the [`fetch_sub_bytes`](Self::fetch_sub_bytes) method instead.\n+    /// the [`fetch_byte_sub`](Self::fetch_byte_sub) method instead.\n     ///\n-    /// `fetch_sub` takes an [`Ordering`] argument which describes the memory\n+    /// `fetch_ptr_sub` takes an [`Ordering`] argument which describes the memory\n     /// ordering of this operation. All ordering modes are possible. Note that\n     /// using [`Acquire`] makes the store part of this operation [`Relaxed`],\n     /// and using [`Release`] makes the load part [`Relaxed`].\n@@ -1524,16 +1524,16 @@ impl<T> AtomicPtr<T> {\n     /// let atom = AtomicPtr::new(array.as_ptr().wrapping_add(1) as *mut _);\n     ///\n     /// assert!(core::ptr::eq(\n-    ///     atom.fetch_sub(1, Ordering::Relaxed),\n+    ///     atom.fetch_ptr_sub(1, Ordering::Relaxed),\n     ///     &array[1],\n     /// ));\n     /// assert!(core::ptr::eq(atom.load(Ordering::Relaxed), &array[0]));\n     /// ```\n     #[inline]\n     #[cfg(target_has_atomic = \"ptr\")]\n     #[unstable(feature = \"strict_provenance_atomic_ptr\", issue = \"95228\")]\n-    pub fn fetch_sub(&self, val: usize, order: Ordering) -> *mut T {\n-        self.fetch_sub_bytes(val.wrapping_mul(core::mem::size_of::<T>()), order)\n+    pub fn fetch_ptr_sub(&self, val: usize, order: Ordering) -> *mut T {\n+        self.fetch_byte_sub(val.wrapping_mul(core::mem::size_of::<T>()), order)\n     }\n \n     /// Offsets the pointer's address by adding `val` *bytes*, returning the\n@@ -1542,7 +1542,7 @@ impl<T> AtomicPtr<T> {\n     /// This is equivalent to using [`wrapping_add`] and [`cast`] to atomically\n     /// perform `ptr = ptr.cast::<u8>().wrapping_add(val).cast::<T>()`.\n     ///\n-    /// `fetch_add_bytes` takes an [`Ordering`] argument which describes the\n+    /// `fetch_byte_add` takes an [`Ordering`] argument which describes the\n     /// memory ordering of this operation. All ordering modes are possible. Note\n     /// that using [`Acquire`] makes the store part of this operation\n     /// [`Relaxed`], and using [`Release`] makes the load part [`Relaxed`].\n@@ -1560,14 +1560,14 @@ impl<T> AtomicPtr<T> {\n     /// use core::sync::atomic::{AtomicPtr, Ordering};\n     ///\n     /// let atom = AtomicPtr::<i64>::new(core::ptr::null_mut());\n-    /// assert_eq!(atom.fetch_add_bytes(1, Ordering::Relaxed).addr(), 0);\n+    /// assert_eq!(atom.fetch_byte_add(1, Ordering::Relaxed).addr(), 0);\n     /// // Note: in units of bytes, not `size_of::<i64>()`.\n     /// assert_eq!(atom.load(Ordering::Relaxed).addr(), 1);\n     /// ```\n     #[inline]\n     #[cfg(target_has_atomic = \"ptr\")]\n     #[unstable(feature = \"strict_provenance_atomic_ptr\", issue = \"95228\")]\n-    pub fn fetch_add_bytes(&self, val: usize, order: Ordering) -> *mut T {\n+    pub fn fetch_byte_add(&self, val: usize, order: Ordering) -> *mut T {\n         #[cfg(not(bootstrap))]\n         // SAFETY: data races are prevented by atomic intrinsics.\n         unsafe {\n@@ -1586,7 +1586,7 @@ impl<T> AtomicPtr<T> {\n     /// This is equivalent to using [`wrapping_sub`] and [`cast`] to atomically\n     /// perform `ptr = ptr.cast::<u8>().wrapping_sub(val).cast::<T>()`.\n     ///\n-    /// `fetch_add_bytes` takes an [`Ordering`] argument which describes the\n+    /// `fetch_byte_sub` takes an [`Ordering`] argument which describes the\n     /// memory ordering of this operation. All ordering modes are possible. Note\n     /// that using [`Acquire`] makes the store part of this operation\n     /// [`Relaxed`], and using [`Release`] makes the load part [`Relaxed`].\n@@ -1604,13 +1604,13 @@ impl<T> AtomicPtr<T> {\n     /// use core::sync::atomic::{AtomicPtr, Ordering};\n     ///\n     /// let atom = AtomicPtr::<i64>::new(core::ptr::invalid_mut(1));\n-    /// assert_eq!(atom.fetch_sub_bytes(1, Ordering::Relaxed).addr(), 1);\n+    /// assert_eq!(atom.fetch_byte_sub(1, Ordering::Relaxed).addr(), 1);\n     /// assert_eq!(atom.load(Ordering::Relaxed).addr(), 0);\n     /// ```\n     #[inline]\n     #[cfg(target_has_atomic = \"ptr\")]\n     #[unstable(feature = \"strict_provenance_atomic_ptr\", issue = \"95228\")]\n-    pub fn fetch_sub_bytes(&self, val: usize, order: Ordering) -> *mut T {\n+    pub fn fetch_byte_sub(&self, val: usize, order: Ordering) -> *mut T {\n         #[cfg(not(bootstrap))]\n         // SAFETY: data races are prevented by atomic intrinsics.\n         unsafe {"}, {"sha": "13b12db209a76ea59415aafb61195d4b9543e376", "filename": "library/core/tests/atomic.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e65ecee90eff2c90e12164417cc31ab959c321cf/library%2Fcore%2Ftests%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e65ecee90eff2c90e12164417cc31ab959c321cf/library%2Fcore%2Ftests%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fatomic.rs?ref=e65ecee90eff2c90e12164417cc31ab959c321cf", "patch": "@@ -131,16 +131,16 @@ fn int_max() {\n #[cfg(any(not(target_arch = \"arm\"), target_os = \"linux\"))] // Missing intrinsic in compiler-builtins\n fn ptr_add_null() {\n     let atom = AtomicPtr::<i64>::new(core::ptr::null_mut());\n-    assert_eq!(atom.fetch_add(1, SeqCst).addr(), 0);\n+    assert_eq!(atom.fetch_ptr_add(1, SeqCst).addr(), 0);\n     assert_eq!(atom.load(SeqCst).addr(), 8);\n \n-    assert_eq!(atom.fetch_add_bytes(1, SeqCst).addr(), 8);\n+    assert_eq!(atom.fetch_byte_add(1, SeqCst).addr(), 8);\n     assert_eq!(atom.load(SeqCst).addr(), 9);\n \n-    assert_eq!(atom.fetch_sub(1, SeqCst).addr(), 9);\n+    assert_eq!(atom.fetch_ptr_sub(1, SeqCst).addr(), 9);\n     assert_eq!(atom.load(SeqCst).addr(), 1);\n \n-    assert_eq!(atom.fetch_sub_bytes(1, SeqCst).addr(), 1);\n+    assert_eq!(atom.fetch_byte_sub(1, SeqCst).addr(), 1);\n     assert_eq!(atom.load(SeqCst).addr(), 0);\n }\n \n@@ -150,23 +150,23 @@ fn ptr_add_data() {\n     let num = 0i64;\n     let n = &num as *const i64 as *mut _;\n     let atom = AtomicPtr::<i64>::new(n);\n-    assert_eq!(atom.fetch_add(1, SeqCst), n);\n+    assert_eq!(atom.fetch_ptr_add(1, SeqCst), n);\n     assert_eq!(atom.load(SeqCst), n.wrapping_add(1));\n \n-    assert_eq!(atom.fetch_sub(1, SeqCst), n.wrapping_add(1));\n+    assert_eq!(atom.fetch_ptr_sub(1, SeqCst), n.wrapping_add(1));\n     assert_eq!(atom.load(SeqCst), n);\n     let bytes_from_n = |b| n.cast::<u8>().wrapping_add(b).cast::<i64>();\n \n-    assert_eq!(atom.fetch_add_bytes(1, SeqCst), n);\n+    assert_eq!(atom.fetch_byte_add(1, SeqCst), n);\n     assert_eq!(atom.load(SeqCst), bytes_from_n(1));\n \n-    assert_eq!(atom.fetch_add_bytes(5, SeqCst), bytes_from_n(1));\n+    assert_eq!(atom.fetch_byte_add(5, SeqCst), bytes_from_n(1));\n     assert_eq!(atom.load(SeqCst), bytes_from_n(6));\n \n-    assert_eq!(atom.fetch_sub_bytes(1, SeqCst), bytes_from_n(6));\n+    assert_eq!(atom.fetch_byte_sub(1, SeqCst), bytes_from_n(6));\n     assert_eq!(atom.load(SeqCst), bytes_from_n(5));\n \n-    assert_eq!(atom.fetch_sub_bytes(5, SeqCst), bytes_from_n(5));\n+    assert_eq!(atom.fetch_byte_sub(5, SeqCst), bytes_from_n(5));\n     assert_eq!(atom.load(SeqCst), n);\n }\n "}]}