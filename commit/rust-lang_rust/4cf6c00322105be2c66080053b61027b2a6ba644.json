{"sha": "4cf6c00322105be2c66080053b61027b2a6ba644", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjZjZjMDAzMjIxMDViZTJjNjYwODAwNTNiNjEwMjdiMmE2YmE2NDQ=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-08-05T14:12:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-05T14:12:54Z"}, "message": "Rollup merge of #35109 - GuillaumeGomez:io_docs, r=steveklabnik\n\nAdd io::Error doc examples\n\nFixes #29359.\n\nr? @steveklabnik", "tree": {"sha": "d068eb5826d4441ed2e448e60530997387c77015", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d068eb5826d4441ed2e448e60530997387c77015"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4cf6c00322105be2c66080053b61027b2a6ba644", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4cf6c00322105be2c66080053b61027b2a6ba644", "html_url": "https://github.com/rust-lang/rust/commit/4cf6c00322105be2c66080053b61027b2a6ba644", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4cf6c00322105be2c66080053b61027b2a6ba644/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56a89f53145fd45574de54fb01699e7b1c616386", "url": "https://api.github.com/repos/rust-lang/rust/commits/56a89f53145fd45574de54fb01699e7b1c616386", "html_url": "https://github.com/rust-lang/rust/commit/56a89f53145fd45574de54fb01699e7b1c616386"}, {"sha": "fda473f00fa07b9a8246b104396f9922e54bff16", "url": "https://api.github.com/repos/rust-lang/rust/commits/fda473f00fa07b9a8246b104396f9922e54bff16", "html_url": "https://github.com/rust-lang/rust/commit/fda473f00fa07b9a8246b104396f9922e54bff16"}], "stats": {"total": 224, "additions": 222, "deletions": 2}, "files": [{"sha": "5333b0a531eaebd671245e8081c71a4cb72cc028", "filename": "src/libstd/io/error.rs", "status": "modified", "additions": 152, "deletions": 1, "changes": 153, "blob_url": "https://github.com/rust-lang/rust/blob/4cf6c00322105be2c66080053b61027b2a6ba644/src%2Flibstd%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf6c00322105be2c66080053b61027b2a6ba644/src%2Flibstd%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ferror.rs?ref=4cf6c00322105be2c66080053b61027b2a6ba644", "patch": "@@ -55,7 +55,9 @@ pub type Result<T> = result::Result<T, Error>;\n ///\n /// Errors mostly originate from the underlying OS, but custom instances of\n /// `Error` can be created with crafted error messages and a particular value of\n-/// `ErrorKind`.\n+/// [`ErrorKind`].\n+///\n+/// [`ErrorKind`]: enum.ErrorKind.html\n #[derive(Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Error {\n@@ -77,6 +79,10 @@ struct Custom {\n ///\n /// This list is intended to grow over time and it is not recommended to\n /// exhaustively match against it.\n+///\n+/// It is used with the [`io::Error`] type.\n+///\n+/// [`io::Error`]: struct.Error.html\n #[derive(Copy, PartialEq, Eq, Clone, Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow(deprecated)]\n@@ -208,6 +214,14 @@ impl Error {\n     /// This function reads the value of `errno` for the target platform (e.g.\n     /// `GetLastError` on Windows) and will return a corresponding instance of\n     /// `Error` for the error code.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::io::Error;\n+    ///\n+    /// println!(\"last OS error: {:?}\", Error::last_os_error());\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn last_os_error() -> Error {\n         Error::from_raw_os_error(sys::os::errno() as i32)\n@@ -248,6 +262,27 @@ impl Error {\n     /// If this `Error` was constructed via `last_os_error` or\n     /// `from_raw_os_error`, then this function will return `Some`, otherwise\n     /// it will return `None`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::io::{Error, ErrorKind};\n+    ///\n+    /// fn print_os_error(err: &Error) {\n+    ///     if let Some(raw_os_err) = err.raw_os_error() {\n+    ///         println!(\"raw OS error: {:?}\", raw_os_err);\n+    ///     } else {\n+    ///         println!(\"Not an OS error\");\n+    ///     }\n+    /// }\n+    ///\n+    /// fn main() {\n+    ///     // Will print \"raw OS error: ...\".\n+    ///     print_os_error(&Error::last_os_error());\n+    ///     // Will print \"Not an OS error\".\n+    ///     print_os_error(&Error::new(ErrorKind::Other, \"oh no!\"));\n+    /// }\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn raw_os_error(&self) -> Option<i32> {\n         match self.repr {\n@@ -260,6 +295,27 @@ impl Error {\n     ///\n     /// If this `Error` was constructed via `new` then this function will\n     /// return `Some`, otherwise it will return `None`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::io::{Error, ErrorKind};\n+    ///\n+    /// fn print_error(err: &Error) {\n+    ///     if let Some(inner_err) = err.get_ref() {\n+    ///         println!(\"Inner error: {:?}\", inner_err);\n+    ///     } else {\n+    ///         println!(\"No inner error\");\n+    ///     }\n+    /// }\n+    ///\n+    /// fn main() {\n+    ///     // Will print \"No inner error\".\n+    ///     print_error(&Error::last_os_error());\n+    ///     // Will print \"Inner error: ...\".\n+    ///     print_error(&Error::new(ErrorKind::Other, \"oh no!\"));\n+    /// }\n+    /// ```\n     #[stable(feature = \"io_error_inner\", since = \"1.3.0\")]\n     pub fn get_ref(&self) -> Option<&(error::Error+Send+Sync+'static)> {\n         match self.repr {\n@@ -273,6 +329,63 @@ impl Error {\n     ///\n     /// If this `Error` was constructed via `new` then this function will\n     /// return `Some`, otherwise it will return `None`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::io::{Error, ErrorKind};\n+    /// use std::{error, fmt};\n+    /// use std::fmt::Display;\n+    ///\n+    /// #[derive(Debug)]\n+    /// struct MyError {\n+    ///     v: String,\n+    /// }\n+    ///\n+    /// impl MyError {\n+    ///     fn new() -> MyError {\n+    ///         MyError {\n+    ///             v: \"oh no!\".to_owned()\n+    ///         }\n+    ///     }\n+    ///\n+    ///     fn change_message(&mut self, new_message: &str) {\n+    ///         self.v = new_message.to_owned();\n+    ///     }\n+    /// }\n+    ///\n+    /// impl error::Error for MyError {\n+    ///     fn description(&self) -> &str { &self.v }\n+    /// }\n+    ///\n+    /// impl Display for MyError {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    ///         write!(f, \"MyError: {}\", &self.v)\n+    ///     }\n+    /// }\n+    ///\n+    /// fn change_error(mut err: Error) -> Error {\n+    ///     if let Some(inner_err) = err.get_mut() {\n+    ///         inner_err.downcast_mut::<MyError>().unwrap().change_message(\"I've been changed!\");\n+    ///     }\n+    ///     err\n+    /// }\n+    ///\n+    /// fn print_error(err: &Error) {\n+    ///     if let Some(inner_err) = err.get_ref() {\n+    ///         println!(\"Inner error: {}\", inner_err);\n+    ///     } else {\n+    ///         println!(\"No inner error\");\n+    ///     }\n+    /// }\n+    ///\n+    /// fn main() {\n+    ///     // Will print \"No inner error\".\n+    ///     print_error(&change_error(Error::last_os_error()));\n+    ///     // Will print \"Inner error: ...\".\n+    ///     print_error(&change_error(Error::new(ErrorKind::Other, MyError::new())));\n+    /// }\n+    /// ```\n     #[stable(feature = \"io_error_inner\", since = \"1.3.0\")]\n     pub fn get_mut(&mut self) -> Option<&mut (error::Error+Send+Sync+'static)> {\n         match self.repr {\n@@ -285,6 +398,27 @@ impl Error {\n     ///\n     /// If this `Error` was constructed via `new` then this function will\n     /// return `Some`, otherwise it will return `None`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::io::{Error, ErrorKind};\n+    ///\n+    /// fn print_error(err: Error) {\n+    ///     if let Some(inner_err) = err.into_inner() {\n+    ///         println!(\"Inner error: {}\", inner_err);\n+    ///     } else {\n+    ///         println!(\"No inner error\");\n+    ///     }\n+    /// }\n+    ///\n+    /// fn main() {\n+    ///     // Will print \"No inner error\".\n+    ///     print_error(Error::last_os_error());\n+    ///     // Will print \"Inner error: ...\".\n+    ///     print_error(Error::new(ErrorKind::Other, \"oh no!\"));\n+    /// }\n+    /// ```\n     #[stable(feature = \"io_error_inner\", since = \"1.3.0\")]\n     pub fn into_inner(self) -> Option<Box<error::Error+Send+Sync>> {\n         match self.repr {\n@@ -294,6 +428,23 @@ impl Error {\n     }\n \n     /// Returns the corresponding `ErrorKind` for this error.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::io::{Error, ErrorKind};\n+    ///\n+    /// fn print_error(err: Error) {\n+    ///     println!(\"{:?}\", err.kind());\n+    /// }\n+    ///\n+    /// fn main() {\n+    ///     // Will print \"No inner error\".\n+    ///     print_error(Error::last_os_error());\n+    ///     // Will print \"Inner error: ...\".\n+    ///     print_error(Error::new(ErrorKind::AddrInUse, \"oh no!\"));\n+    /// }\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn kind(&self) -> ErrorKind {\n         match self.repr {"}, {"sha": "88fd4186e0a2a73be02e98964f822de8c46c692d", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4cf6c00322105be2c66080053b61027b2a6ba644/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf6c00322105be2c66080053b61027b2a6ba644/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=4cf6c00322105be2c66080053b61027b2a6ba644", "patch": "@@ -1082,16 +1082,22 @@ pub trait Seek {\n     ///\n     /// If the seek operation completed successfully,\n     /// this method returns the new position from the start of the stream.\n-    /// That position can be used later with `SeekFrom::Start`.\n+    /// That position can be used later with [`SeekFrom::Start`].\n     ///\n     /// # Errors\n     ///\n     /// Seeking to a negative offset is considered an error.\n+    ///\n+    /// [`SeekFrom::Start`]: enum.SeekFrom.html#variant.Start\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn seek(&mut self, pos: SeekFrom) -> Result<u64>;\n }\n \n /// Enumeration of possible methods to seek within an I/O object.\n+///\n+/// It is used by the [`Seek`] trait.\n+///\n+/// [`Seek`]: trait.Seek.html\n #[derive(Copy, PartialEq, Eq, Clone, Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum SeekFrom {\n@@ -1482,6 +1488,24 @@ impl<T> Take<T> {\n     ///\n     /// This instance may reach EOF after reading fewer bytes than indicated by\n     /// this method if the underlying `Read` instance reaches EOF.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::io;\n+    /// use std::io::prelude::*;\n+    /// use std::fs::File;\n+    ///\n+    /// # fn foo() -> io::Result<()> {\n+    /// let f = try!(File::open(\"foo.txt\"));\n+    ///\n+    /// // read at most five bytes\n+    /// let handle = f.take(5);\n+    ///\n+    /// println!(\"limit: {}\", handle.limit());\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn limit(&self) -> u64 { self.limit }\n }"}, {"sha": "b8b66a58359e7013d135713767a4936c1a3d8c0d", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/4cf6c00322105be2c66080053b61027b2a6ba644/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf6c00322105be2c66080053b61027b2a6ba644/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=4cf6c00322105be2c66080053b61027b2a6ba644", "patch": "@@ -240,6 +240,21 @@ impl Stdin {\n     ///\n     /// [`Read`]: trait.Read.html\n     /// [`BufRead`]: trait.BufRead.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::io::{self, Read};\n+    ///\n+    /// # fn foo() -> io::Result<String> {\n+    /// let mut buffer = String::new();\n+    /// let stdin = io::stdin();\n+    /// let mut handle = stdin.lock();\n+    ///\n+    /// try!(handle.read_to_string(&mut buffer));\n+    /// # Ok(buffer)\n+    /// # }\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn lock(&self) -> StdinLock {\n         StdinLock { inner: self.inner.lock().unwrap_or_else(|e| e.into_inner()) }\n@@ -399,6 +414,21 @@ impl Stdout {\n     ///\n     /// The lock is released when the returned lock goes out of scope. The\n     /// returned guard also implements the `Write` trait for writing data.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::io::{self, Write};\n+    ///\n+    /// # fn foo() -> io::Result<()> {\n+    /// let stdout = io::stdout();\n+    /// let mut handle = stdout.lock();\n+    ///\n+    /// try!(handle.write(b\"hello world\"));\n+    ///\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn lock(&self) -> StdoutLock {\n         StdoutLock { inner: self.inner.lock().unwrap_or_else(|e| e.into_inner()) }\n@@ -505,6 +535,21 @@ impl Stderr {\n     ///\n     /// The lock is released when the returned lock goes out of scope. The\n     /// returned guard also implements the `Write` trait for writing data.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::io::{self, Write};\n+    ///\n+    /// fn foo() -> io::Result<()> {\n+    ///     let stderr = io::stderr();\n+    ///     let mut handle = stderr.lock();\n+    ///\n+    ///     try!(handle.write(b\"hello world\"));\n+    ///\n+    ///     Ok(())\n+    /// }\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn lock(&self) -> StderrLock {\n         StderrLock { inner: self.inner.lock().unwrap_or_else(|e| e.into_inner()) }"}]}