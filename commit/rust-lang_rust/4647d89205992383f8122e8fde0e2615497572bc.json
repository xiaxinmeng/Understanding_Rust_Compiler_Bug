{"sha": "4647d89205992383f8122e8fde0e2615497572bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2NDdkODkyMDU5OTIzODNmODEyMmU4ZmRlMGUyNjE1NDk3NTcyYmM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-17T10:21:53Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-17T12:03:19Z"}, "message": "Rollup merge of #22364 - Manishearth:rfc-572-forbid-attr, r=nikomatsakis\n\n fixes #22203\n\nr? @nikomatsakis\n\nThis breaks code that might be using attributes randomly, so it's technically a\n\n[breaking-change]", "tree": {"sha": "f850baa569de3bb0ab21cd29d5cd0f43b458eb98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f850baa569de3bb0ab21cd29d5cd0f43b458eb98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4647d89205992383f8122e8fde0e2615497572bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4647d89205992383f8122e8fde0e2615497572bc", "html_url": "https://github.com/rust-lang/rust/commit/4647d89205992383f8122e8fde0e2615497572bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4647d89205992383f8122e8fde0e2615497572bc/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a1ac6c1abea03154b510d4788f4f4192a639955", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a1ac6c1abea03154b510d4788f4f4192a639955", "html_url": "https://github.com/rust-lang/rust/commit/1a1ac6c1abea03154b510d4788f4f4192a639955"}, {"sha": "f64d71b6ed3ae9bd2d20c9c43fa6fa9ef46ad16d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f64d71b6ed3ae9bd2d20c9c43fa6fa9ef46ad16d", "html_url": "https://github.com/rust-lang/rust/commit/f64d71b6ed3ae9bd2d20c9c43fa6fa9ef46ad16d"}], "stats": {"total": 362, "additions": 244, "deletions": 118}, "files": [{"sha": "00ed5d4562b11e248da5d959486910e08ec4dcad", "filename": "src/doc/reference.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4647d89205992383f8122e8fde0e2615497572bc/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/4647d89205992383f8122e8fde0e2615497572bc/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=4647d89205992383f8122e8fde0e2615497572bc", "patch": "@@ -2398,6 +2398,10 @@ The currently implemented features of the reference compiler are:\n                     ways insufficient for concatenating identifiers, and may be\n                     removed entirely for something more wholesome.\n \n+* `custom_attribute` - Allows the usage of attributes unknown to the compiler\n+                       so that new attributes can be added in a bacwards compatible\n+                       manner (RFC 572).\n+\n * `intrinsics` - Allows use of the \"rust-intrinsics\" ABI. Compiler intrinsics\n                  are inherently unstable and no promise about them is made.\n \n@@ -2458,6 +2462,9 @@ The currently implemented features of the reference compiler are:\n             implemented very poorly and will likely change significantly\n             with a proper implementation.\n \n+* `rustc_attrs` - Gates internal `#[rustc_*]` attributes which may be\n+                  for internal use only or have meaning added to them in the future.\n+\n * `rustc_diagnostic_macros`- A mysterious feature, used in the implementation\n                              of rustc, not meant for mortals.\n "}, {"sha": "f1808bc1fb503116a11df360dbb52c069a612bd4", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4647d89205992383f8122e8fde0e2615497572bc/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4647d89205992383f8122e8fde0e2615497572bc/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=4647d89205992383f8122e8fde0e2615497572bc", "patch": "@@ -67,6 +67,7 @@\n #![feature(simd, unsafe_destructor)]\n #![feature(staged_api)]\n #![feature(unboxed_closures)]\n+#![feature(rustc_attrs)]\n \n #[macro_use]\n mod macros;"}, {"sha": "afd6db4dbbc3523cac5c828491a58e9e869df8a8", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 9, "deletions": 56, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/4647d89205992383f8122e8fde0e2615497572bc/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4647d89205992383f8122e8fde0e2615497572bc/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=4647d89205992383f8122e8fde0e2615497572bc", "patch": "@@ -47,6 +47,7 @@ use syntax::{abi, ast, ast_map};\n use syntax::ast_util::is_shift_binop;\n use syntax::attr::{self, AttrMetaMethods};\n use syntax::codemap::{self, Span};\n+use syntax::feature_gate::{KNOWN_ATTRIBUTES, AttributeType};\n use syntax::parse::token;\n use syntax::ast::{TyIs, TyUs, TyI8, TyU8, TyI16, TyU16, TyI32, TyU32, TyI64, TyU64};\n use syntax::ast_util;\n@@ -640,67 +641,19 @@ impl LintPass for UnusedAttributes {\n     }\n \n     fn check_attribute(&mut self, cx: &Context, attr: &ast::Attribute) {\n-        static ATTRIBUTE_WHITELIST: &'static [&'static str] = &[\n-            // FIXME: #14408 whitelist docs since rustdoc looks at them\n-            \"doc\",\n-\n-            // FIXME: #14406 these are processed in trans, which happens after the\n-            // lint pass\n-            \"cold\",\n-            \"export_name\",\n-            \"inline\",\n-            \"link\",\n-            \"link_name\",\n-            \"link_section\",\n-            \"linkage\",\n-            \"no_builtins\",\n-            \"no_mangle\",\n-            \"no_split_stack\",\n-            \"no_stack_check\",\n-            \"packed\",\n-            \"static_assert\",\n-            \"thread_local\",\n-            \"no_debug\",\n-            \"omit_gdb_pretty_printer_section\",\n-            \"unsafe_no_drop_flag\",\n-\n-            // used in resolve\n-            \"prelude_import\",\n-\n-            // FIXME: #14407 these are only looked at on-demand so we can't\n-            // guarantee they'll have already been checked\n-            \"deprecated\",\n-            \"must_use\",\n-            \"stable\",\n-            \"unstable\",\n-            \"rustc_on_unimplemented\",\n-            \"rustc_error\",\n-\n-            // FIXME: #19470 this shouldn't be needed forever\n-            \"old_orphan_check\",\n-            \"old_impl_check\",\n-            \"rustc_paren_sugar\", // FIXME: #18101 temporary unboxed closure hack\n-        ];\n-\n-        static CRATE_ATTRS: &'static [&'static str] = &[\n-            \"crate_name\",\n-            \"crate_type\",\n-            \"feature\",\n-            \"no_start\",\n-            \"no_main\",\n-            \"no_std\",\n-            \"no_builtins\",\n-        ];\n-\n-        for &name in ATTRIBUTE_WHITELIST {\n-            if attr.check_name(name) {\n-                break;\n+        for &(ref name, ty) in KNOWN_ATTRIBUTES {\n+            match ty {\n+                AttributeType::Whitelisted\n+                | AttributeType::Gated(_, _) if attr.check_name(name) => {\n+                    break;\n+                },\n+                _ => ()\n             }\n         }\n \n         if !attr::is_used(attr) {\n             cx.span_lint(UNUSED_ATTRIBUTES, attr.span, \"unused attribute\");\n-            if CRATE_ATTRS.contains(&&attr.name()[]) {\n+            if KNOWN_ATTRIBUTES.contains(&(&attr.name()[], AttributeType::CrateLevel)) {\n                 let msg = match attr.node.style {\n                     ast::AttrOuter => \"crate-level attribute should be an inner \\\n                                        attribute: add an exclamation mark: #![foo]\","}, {"sha": "f6424167bde045f3c3e58ad180b646eff3743817", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 159, "deletions": 40, "changes": 199, "blob_url": "https://github.com/rust-lang/rust/blob/4647d89205992383f8122e8fde0e2615497572bc/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4647d89205992383f8122e8fde0e2615497572bc/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=4647d89205992383f8122e8fde0e2615497572bc", "patch": "@@ -23,6 +23,7 @@\n //! becomes stable.\n \n use self::Status::*;\n+use self::AttributeType::*;\n \n use abi::RustIntrinsic;\n use ast::NodeId;\n@@ -35,7 +36,6 @@ use visit;\n use visit::Visitor;\n use parse::token::{self, InternedString};\n \n-use std::slice;\n use std::ascii::AsciiExt;\n \n // If you change this list without updating src/doc/reference.md, @cmr will be sad\n@@ -133,6 +133,12 @@ static KNOWN_FEATURES: &'static [(&'static str, &'static str, Status)] = &[\n     // Allows using the unsafe_no_drop_flag attribute (unlikely to\n     // switch to Accepted; see RFC 320)\n     (\"unsafe_no_drop_flag\", \"1.0.0\", Active),\n+\n+    // Allows the use of custom attributes; RFC 572\n+    (\"custom_attribute\", \"1.0.0\", Active),\n+\n+    // Allows the use of rustc_* attributes; RFC 572\n+    (\"rustc_attrs\", \"1.0.0\", Active),\n ];\n // (changing above list without updating src/doc/reference.md makes @cmr sad)\n \n@@ -152,6 +158,138 @@ enum Status {\n     Accepted,\n }\n \n+// Attributes that have a special meaning to rustc or rustdoc\n+pub static KNOWN_ATTRIBUTES: &'static [(&'static str, AttributeType)] = &[\n+    // Normal attributes\n+\n+    (\"warn\", Normal),\n+    (\"allow\", Normal),\n+    (\"forbid\", Normal),\n+    (\"deny\", Normal),\n+\n+    (\"macro_reexport\", Normal),\n+    (\"macro_use\", Normal),\n+    (\"macro_export\", Normal),\n+    (\"plugin_registrar\", Normal),\n+\n+    (\"cfg\", Normal),\n+    (\"main\", Normal),\n+    (\"start\", Normal),\n+    (\"test\", Normal),\n+    (\"bench\", Normal),\n+    (\"simd\", Normal),\n+    (\"repr\", Normal),\n+    (\"path\", Normal),\n+    (\"abi\", Normal),\n+    (\"unsafe_destructor\", Normal),\n+    (\"automatically_derived\", Normal),\n+    (\"no_mangle\", Normal),\n+    (\"no_link\", Normal),\n+    (\"derive\", Normal),\n+    (\"should_fail\", Normal),\n+    (\"ignore\", Normal),\n+    (\"no_implicit_prelude\", Normal),\n+    (\"reexport_test_harness_main\", Normal),\n+    (\"link_args\", Normal),\n+    (\"macro_escape\", Normal),\n+\n+\n+    (\"staged_api\", Gated(\"staged_api\",\n+                         \"staged_api is for use by rustc only\")),\n+    (\"plugin\", Gated(\"plugin\",\n+                     \"compiler plugins are experimental \\\n+                      and possibly buggy\")),\n+    (\"no_std\", Gated(\"no_std\",\n+                     \"no_std is experimental\")),\n+    (\"lang\", Gated(\"lang_items\",\n+                     \"language items are subject to change\")),\n+    (\"linkage\", Gated(\"linkage\",\n+                      \"the `linkage` attribute is experimental \\\n+                       and not portable across platforms\")),\n+    (\"thread_local\", Gated(\"thread_local\",\n+                            \"`#[thread_local]` is an experimental feature, and does not \\\n+                             currently handle destructors. There is no corresponding \\\n+                             `#[task_local]` mapping to the task model\")),\n+\n+    (\"rustc_on_unimplemented\", Gated(\"on_unimplemented\",\n+                                     \"the `#[rustc_on_unimplemented]` attribute \\\n+                                      is an experimental feature\")),\n+    (\"rustc_variance\", Gated(\"rustc_attrs\",\n+                             \"the `#[rustc_variance]` attribute \\\n+                              is an experimental feature\")),\n+    (\"rustc_error\", Gated(\"rustc_attrs\",\n+                          \"the `#[rustc_error]` attribute \\\n+                           is an experimental feature\")),\n+    (\"rustc_move_fragments\", Gated(\"rustc_attrs\",\n+                                   \"the `#[rustc_move_fragments]` attribute \\\n+                                    is an experimental feature\")),\n+\n+    // FIXME: #14408 whitelist docs since rustdoc looks at them\n+    (\"doc\", Whitelisted),\n+\n+    // FIXME: #14406 these are processed in trans, which happens after the\n+    // lint pass\n+    (\"cold\", Whitelisted),\n+    (\"export_name\", Whitelisted),\n+    (\"inline\", Whitelisted),\n+    (\"link\", Whitelisted),\n+    (\"link_name\", Whitelisted),\n+    (\"link_section\", Whitelisted),\n+    (\"no_builtins\", Whitelisted),\n+    (\"no_mangle\", Whitelisted),\n+    (\"no_split_stack\", Whitelisted),\n+    (\"no_stack_check\", Whitelisted),\n+    (\"packed\", Whitelisted),\n+    (\"static_assert\", Whitelisted),\n+    (\"no_debug\", Whitelisted),\n+    (\"omit_gdb_pretty_printer_section\", Whitelisted),\n+    (\"unsafe_no_drop_flag\", Whitelisted),\n+\n+    // used in resolve\n+    (\"prelude_import\", Whitelisted),\n+\n+    // FIXME: #14407 these are only looked at on-demand so we can't\n+    // guarantee they'll have already been checked\n+    (\"deprecated\", Whitelisted),\n+    (\"must_use\", Whitelisted),\n+    (\"stable\", Whitelisted),\n+    (\"unstable\", Whitelisted),\n+\n+    // FIXME: #19470 this shouldn't be needed forever\n+    (\"old_orphan_check\", Whitelisted),\n+    (\"old_impl_check\", Whitelisted),\n+    (\"rustc_paren_sugar\", Whitelisted), // FIXME: #18101 temporary unboxed closure hack\n+\n+    // Crate level attributes\n+    (\"crate_name\", CrateLevel),\n+    (\"crate_type\", CrateLevel),\n+    (\"crate_id\", CrateLevel),\n+    (\"feature\", CrateLevel),\n+    (\"no_start\", CrateLevel),\n+    (\"no_main\", CrateLevel),\n+    (\"no_builtins\", CrateLevel),\n+    (\"recursion_limit\", CrateLevel),\n+];\n+\n+#[derive(PartialEq, Copy)]\n+pub enum AttributeType {\n+    /// Normal, builtin attribute that is consumed\n+    /// by the compiler before the unused_attribute check\n+    Normal,\n+\n+    /// Builtin attribute that may not be consumed by the compiler\n+    /// before the unused_attribute check. These attributes\n+    /// will be ignored by the unused_attribute lint\n+    Whitelisted,\n+\n+    /// Is gated by a given feature gate and reason\n+    /// These get whitelisted too\n+    Gated(&'static str, &'static str),\n+\n+    /// Builtin attribute that is only allowed at the crate level\n+    CrateLevel,\n+}\n+\n /// A set of features to be used by later passes.\n pub struct Features {\n     pub unboxed_closures: bool,\n@@ -274,22 +412,6 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n     }\n \n     fn visit_item(&mut self, i: &ast::Item) {\n-        for attr in &i.attrs {\n-            if attr.name() == \"thread_local\" {\n-                self.gate_feature(\"thread_local\", i.span,\n-                                  \"`#[thread_local]` is an experimental feature, and does not \\\n-                                  currently handle destructors. There is no corresponding \\\n-                                  `#[task_local]` mapping to the task model\");\n-            } else if attr.name() == \"linkage\" {\n-                self.gate_feature(\"linkage\", i.span,\n-                                  \"the `linkage` attribute is experimental \\\n-                                   and not portable across platforms\")\n-            } else if attr.name() == \"rustc_on_unimplemented\" {\n-                self.gate_feature(\"on_unimplemented\", i.span,\n-                                  \"the `#[rustc_on_unimplemented]` attribute \\\n-                                  is an experimental feature\")\n-            }\n-        }\n         match i.node {\n             ast::ItemExternCrate(_) => {\n                 if attr::contains_name(&i.attrs[], \"macro_reexport\") {\n@@ -463,30 +585,27 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n     }\n \n     fn visit_attribute(&mut self, attr: &ast::Attribute) {\n-        if attr.check_name(\"staged_api\") {\n-            self.gate_feature(\"staged_api\", attr.span,\n-                              \"staged_api is for use by rustc only\");\n-        } else if attr.check_name(\"plugin\") {\n-            self.gate_feature(\"plugin\", attr.span,\n-                              \"compiler plugins are experimental \\\n-                               and possibly buggy\");\n-        }\n-\n-        if attr::contains_name(slice::ref_slice(attr), \"lang\") {\n-            self.gate_feature(\"lang_items\",\n-                              attr.span,\n-                              \"language items are subject to change\");\n-        }\n-\n-        if attr.check_name(\"no_std\") {\n-            self.gate_feature(\"no_std\", attr.span,\n-                              \"no_std is experimental\");\n+        let name = &*attr.name();\n+        for &(n, ty) in KNOWN_ATTRIBUTES {\n+            if n == name {\n+                if let Gated(gate, desc) = ty {\n+                    self.gate_feature(gate, attr.span, desc);\n+                }\n+                return;\n+            }\n         }\n-\n-        if attr.check_name(\"unsafe_no_drop_flag\") {\n-            self.gate_feature(\"unsafe_no_drop_flag\", attr.span,\n-                              \"unsafe_no_drop_flag has unstable semantics \\\n-                               and may be removed in the future\");\n+        if name.starts_with(\"rustc_\") {\n+            self.gate_feature(\"rustc_attrs\", attr.span,\n+                              \"unless otherwise specified, attributes \\\n+                               with the prefix `rustc_` \\\n+                               are reserved for internal compiler diagnostics\");\n+        } else {\n+            self.gate_feature(\"custom_attribute\", attr.span,\n+                       format!(\"The attribute `{}` is currently \\\n+                                unknown to the the compiler and \\\n+                                may have meaning \\\n+                                added to it in the future\",\n+                                name).as_slice());\n         }\n     }\n "}, {"sha": "01b2b748ba9d83910105567c020b3fb8fd52d311", "filename": "src/test/auxiliary/lint_stability.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4647d89205992383f8122e8fde0e2615497572bc/src%2Ftest%2Fauxiliary%2Flint_stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4647d89205992383f8122e8fde0e2615497572bc/src%2Ftest%2Fauxiliary%2Flint_stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flint_stability.rs?ref=4647d89205992383f8122e8fde0e2615497572bc", "patch": "@@ -64,16 +64,6 @@ impl MethodTester {\n     pub fn method_stable(&self) {}\n     #[stable(feature = \"rust1\", since = \"1.0.0\", reason = \"text\")]\n     pub fn method_stable_text(&self) {}\n-\n-    #[locked]\n-    pub fn method_locked(&self) {}\n-    #[locked=\"text\"]\n-    pub fn method_locked_text(&self) {}\n-\n-    #[frozen]\n-    pub fn method_frozen(&self) {}\n-    #[frozen=\"text\"]\n-    pub fn method_frozen_text(&self) {}\n }\n \n #[stable(feature = \"test_feature\", since = \"1.0.0\")]\n@@ -101,16 +91,6 @@ pub trait Trait {\n     fn trait_stable(&self) {}\n     #[stable(feature = \"rust1\", since = \"1.0.0\", reason = \"text\")]\n     fn trait_stable_text(&self) {}\n-\n-    #[locked]\n-    fn trait_locked(&self) {}\n-    #[locked=\"text\"]\n-    fn trait_locked_text(&self) {}\n-\n-    #[frozen]\n-    fn trait_frozen(&self) {}\n-    #[frozen=\"text\"]\n-    fn trait_frozen_text(&self) {}\n }\n \n impl Trait for MethodTester {}"}, {"sha": "193063a98cb0057865629edcdfd7d8268b46367a", "filename": "src/test/compile-fail/custom_attribute.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4647d89205992383f8122e8fde0e2615497572bc/src%2Ftest%2Fcompile-fail%2Fcustom_attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4647d89205992383f8122e8fde0e2615497572bc/src%2Ftest%2Fcompile-fail%2Fcustom_attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcustom_attribute.rs?ref=4647d89205992383f8122e8fde0e2615497572bc", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[foo] //~ ERROR The attribute `foo`\n+fn main() {\n+\n+}\n\\ No newline at end of file"}, {"sha": "35f93c13fb5e23792d071df8a27293f168a4fb5d", "filename": "src/test/compile-fail/linkage1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4647d89205992383f8122e8fde0e2615497572bc/src%2Ftest%2Fcompile-fail%2Flinkage1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4647d89205992383f8122e8fde0e2615497572bc/src%2Ftest%2Fcompile-fail%2Flinkage1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flinkage1.rs?ref=4647d89205992383f8122e8fde0e2615497572bc", "patch": "@@ -11,4 +11,5 @@\n extern {\n     #[linkage = \"extern_weak\"] static foo: isize;\n     //~^ ERROR: the `linkage` attribute is experimental and not portable\n+    //~^^ ERROR: the `linkage` attribute is experimental and not portable\n }"}, {"sha": "1cf6e90d6c855e079de891b4eedfd0c134c28a97", "filename": "src/test/compile-fail/linkage4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4647d89205992383f8122e8fde0e2615497572bc/src%2Ftest%2Fcompile-fail%2Flinkage4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4647d89205992383f8122e8fde0e2615497572bc/src%2Ftest%2Fcompile-fail%2Flinkage4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flinkage4.rs?ref=4647d89205992383f8122e8fde0e2615497572bc", "patch": "@@ -10,6 +10,6 @@\n \n #[linkage = \"external\"]\n static foo: isize = 0;\n-//~^ ERROR: the `linkage` attribute is experimental and not portable\n+//~^^ ERROR: the `linkage` attribute is experimental and not portable\n \n fn main() {}"}, {"sha": "dd4e1212a00ca0b508a1f820b622f3c302f221da", "filename": "src/test/compile-fail/lint-obsolete-attr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4647d89205992383f8122e8fde0e2615497572bc/src%2Ftest%2Fcompile-fail%2Flint-obsolete-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4647d89205992383f8122e8fde0e2615497572bc/src%2Ftest%2Fcompile-fail%2Flint-obsolete-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-obsolete-attr.rs?ref=4647d89205992383f8122e8fde0e2615497572bc", "patch": "@@ -13,6 +13,7 @@\n \n #![deny(unused_attributes)]\n #![allow(dead_code)]\n+#![feature(custom_attribute)]\n \n #[abi=\"stdcall\"] extern {} //~ ERROR unused attribute\n "}, {"sha": "af4e81be1951d86d73dcf6a08be63ea973311e80", "filename": "src/test/compile-fail/lint-unknown-attr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4647d89205992383f8122e8fde0e2615497572bc/src%2Ftest%2Fcompile-fail%2Flint-unknown-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4647d89205992383f8122e8fde0e2615497572bc/src%2Ftest%2Fcompile-fail%2Flint-unknown-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unknown-attr.rs?ref=4647d89205992383f8122e8fde0e2615497572bc", "patch": "@@ -11,6 +11,7 @@\n // When denying at the crate level, be sure to not get random warnings from the\n // injected intrinsics by the compiler.\n \n+#![feature(custom_attribute)]\n #![deny(unused_attributes)]\n \n #![mutable_doc] //~ ERROR unused attribute"}, {"sha": "e76eaea365ea6e0e8707341f54a86e93b421ec1c", "filename": "src/test/compile-fail/macro-inner-attributes.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4647d89205992383f8122e8fde0e2615497572bc/src%2Ftest%2Fcompile-fail%2Fmacro-inner-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4647d89205992383f8122e8fde0e2615497572bc/src%2Ftest%2Fcompile-fail%2Fmacro-inner-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-inner-attributes.rs?ref=4647d89205992383f8122e8fde0e2615497572bc", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(custom_attribute)]\n+\n macro_rules! test { ($nm:ident,\n                      #[$a:meta],\n                      $i:item) => (mod $nm { #![$a] $i }); }"}, {"sha": "cff01f36f3ad72132a4694725a2435fe45b8f82e", "filename": "src/test/compile-fail/macro-outer-attributes.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4647d89205992383f8122e8fde0e2615497572bc/src%2Ftest%2Fcompile-fail%2Fmacro-outer-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4647d89205992383f8122e8fde0e2615497572bc/src%2Ftest%2Fcompile-fail%2Fmacro-outer-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-outer-attributes.rs?ref=4647d89205992383f8122e8fde0e2615497572bc", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(custom_attribute)]\n+\n macro_rules! test { ($nm:ident,\n                      #[$a:meta],\n                      $i:item) => (mod $nm { #[$a] $i }); }"}, {"sha": "0219f5b6becb3bae271892a3cc559bebacc8ae56", "filename": "src/test/compile-fail/move-fragments-1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4647d89205992383f8122e8fde0e2615497572bc/src%2Ftest%2Fcompile-fail%2Fmove-fragments-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4647d89205992383f8122e8fde0e2615497572bc/src%2Ftest%2Fcompile-fail%2Fmove-fragments-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmove-fragments-1.rs?ref=4647d89205992383f8122e8fde0e2615497572bc", "patch": "@@ -18,6 +18,8 @@\n // These are all fairly trivial cases: unused variables or direct\n // drops of substructure.\n \n+#![feature(rustc_attrs)]\n+\n pub struct D { d: isize }\n impl Drop for D { fn drop(&mut self) { } }\n "}, {"sha": "175488bf2fcd02f38c0c4a926a9aeb858342cd3c", "filename": "src/test/compile-fail/move-fragments-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4647d89205992383f8122e8fde0e2615497572bc/src%2Ftest%2Fcompile-fail%2Fmove-fragments-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4647d89205992383f8122e8fde0e2615497572bc/src%2Ftest%2Fcompile-fail%2Fmove-fragments-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmove-fragments-2.rs?ref=4647d89205992383f8122e8fde0e2615497572bc", "patch": "@@ -18,6 +18,8 @@\n // These are checking that enums are tracked; note that their output\n // paths include \"downcasts\" of the path to a particular enum.\n \n+#![feature(rustc_attrs)]\n+\n use self::Lonely::{Zero, One, Two};\n \n pub struct D { d: isize }"}, {"sha": "b65921177adaaf145db68235d20778b3f6c6a99c", "filename": "src/test/compile-fail/move-fragments-3.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4647d89205992383f8122e8fde0e2615497572bc/src%2Ftest%2Fcompile-fail%2Fmove-fragments-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4647d89205992383f8122e8fde0e2615497572bc/src%2Ftest%2Fcompile-fail%2Fmove-fragments-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmove-fragments-3.rs?ref=4647d89205992383f8122e8fde0e2615497572bc", "patch": "@@ -18,6 +18,8 @@\n // This checks the handling of `_` within variants, especially when mixed\n // with bindings.\n \n+#![feature(rustc_attrs)]\n+\n use self::Lonely::{Zero, One, Two};\n \n pub struct D { d: isize }"}, {"sha": "191e23a28638b59c8119386ae18525d6f172cc36", "filename": "src/test/compile-fail/move-fragments-4.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4647d89205992383f8122e8fde0e2615497572bc/src%2Ftest%2Fcompile-fail%2Fmove-fragments-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4647d89205992383f8122e8fde0e2615497572bc/src%2Ftest%2Fcompile-fail%2Fmove-fragments-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmove-fragments-4.rs?ref=4647d89205992383f8122e8fde0e2615497572bc", "patch": "@@ -19,6 +19,8 @@\n // early draft of the code did not properly traverse up through all of\n // the parents of the leaf fragment.)\n \n+#![feature(rustc_attrs)]\n+\n pub struct D { d: isize }\n impl Drop for D { fn drop(&mut self) { } }\n "}, {"sha": "38a385eacac5c07795c9a19e49c5d9288b3b7e63", "filename": "src/test/compile-fail/move-fragments-5.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4647d89205992383f8122e8fde0e2615497572bc/src%2Ftest%2Fcompile-fail%2Fmove-fragments-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4647d89205992383f8122e8fde0e2615497572bc/src%2Ftest%2Fcompile-fail%2Fmove-fragments-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmove-fragments-5.rs?ref=4647d89205992383f8122e8fde0e2615497572bc", "patch": "@@ -17,6 +17,8 @@\n \n // This is the first test that checks moving into local variables.\n \n+#![feature(rustc_attrs)]\n+\n pub struct D { d: isize }\n impl Drop for D { fn drop(&mut self) { } }\n "}, {"sha": "122727c3f6b64a0c1cf75e4ca4a216cf51df98b3", "filename": "src/test/compile-fail/move-fragments-6.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4647d89205992383f8122e8fde0e2615497572bc/src%2Ftest%2Fcompile-fail%2Fmove-fragments-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4647d89205992383f8122e8fde0e2615497572bc/src%2Ftest%2Fcompile-fail%2Fmove-fragments-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmove-fragments-6.rs?ref=4647d89205992383f8122e8fde0e2615497572bc", "patch": "@@ -18,6 +18,8 @@\n // Test that moving into a field (i.e. overwriting it) fragments the\n // receiver.\n \n+#![feature(rustc_attrs)]\n+\n use std::mem::drop;\n \n pub struct Pair<X,Y> { x: X, y: Y }"}, {"sha": "a2a37208cd6168b61f4dcbdce75f59cf93e4b65d", "filename": "src/test/compile-fail/move-fragments-7.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4647d89205992383f8122e8fde0e2615497572bc/src%2Ftest%2Fcompile-fail%2Fmove-fragments-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4647d89205992383f8122e8fde0e2615497572bc/src%2Ftest%2Fcompile-fail%2Fmove-fragments-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmove-fragments-7.rs?ref=4647d89205992383f8122e8fde0e2615497572bc", "patch": "@@ -19,6 +19,8 @@\n // both moving out of the structure (i.e. reading `*p.x`) and writing\n // into the container (i.e. writing `*p.x`).\n \n+#![feature(rustc_attrs)]\n+\n pub struct D { d: isize }\n impl Drop for D { fn drop(&mut self) { } }\n "}, {"sha": "e57268dbfa32aa985afb154168824b5916186a22", "filename": "src/test/compile-fail/move-fragments-8.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4647d89205992383f8122e8fde0e2615497572bc/src%2Ftest%2Fcompile-fail%2Fmove-fragments-8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4647d89205992383f8122e8fde0e2615497572bc/src%2Ftest%2Fcompile-fail%2Fmove-fragments-8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmove-fragments-8.rs?ref=4647d89205992383f8122e8fde0e2615497572bc", "patch": "@@ -22,6 +22,8 @@\n // also that in this case we cannot do a move out of `&T`, so we only\n // test writing `*p.x` here.\n \n+#![feature(rustc_attrs)]\n+\n pub struct D { d: isize }\n impl Drop for D { fn drop(&mut self) { } }\n "}, {"sha": "350f4169034004620cae6bf2cb6367532dfb27b2", "filename": "src/test/compile-fail/move-fragments-9.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4647d89205992383f8122e8fde0e2615497572bc/src%2Ftest%2Fcompile-fail%2Fmove-fragments-9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4647d89205992383f8122e8fde0e2615497572bc/src%2Ftest%2Fcompile-fail%2Fmove-fragments-9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmove-fragments-9.rs?ref=4647d89205992383f8122e8fde0e2615497572bc", "patch": "@@ -14,6 +14,8 @@\n // Note also that the `test_move_array_then_overwrite` tests represent\n // cases that we probably should make illegal.\n \n+#![feature(rustc_attrs)]\n+\n pub struct D { d: isize }\n impl Drop for D { fn drop(&mut self) { } }\n "}, {"sha": "82f32cbcd14e46028916269eaf210b822e7e54d8", "filename": "src/test/compile-fail/rustc-error.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4647d89205992383f8122e8fde0e2615497572bc/src%2Ftest%2Fcompile-fail%2Frustc-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4647d89205992383f8122e8fde0e2615497572bc/src%2Ftest%2Fcompile-fail%2Frustc-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frustc-error.rs?ref=4647d89205992383f8122e8fde0e2615497572bc", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(rustc_attrs)]\n+\n #[rustc_error]\n fn main() {\n     //~^ ERROR compilation successful"}, {"sha": "2d4bc0c857a9a7ad7f8c77f05e77300e3346b644", "filename": "src/test/compile-fail/unused-attr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4647d89205992383f8122e8fde0e2615497572bc/src%2Ftest%2Fcompile-fail%2Funused-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4647d89205992383f8122e8fde0e2615497572bc/src%2Ftest%2Fcompile-fail%2Funused-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funused-attr.rs?ref=4647d89205992383f8122e8fde0e2615497572bc", "patch": "@@ -7,9 +7,10 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+\n #![deny(unused_attributes)]\n #![allow(dead_code, unused_imports)]\n-#![feature(core)]\n+#![feature(core, custom_attribute)]\n \n #![foo] //~ ERROR unused attribute\n "}, {"sha": "0ed0861d34af1fe7744a6db319611db233e7e1ca", "filename": "src/test/compile-fail/variance-associated-types.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4647d89205992383f8122e8fde0e2615497572bc/src%2Ftest%2Fcompile-fail%2Fvariance-associated-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4647d89205992383f8122e8fde0e2615497572bc/src%2Ftest%2Fcompile-fail%2Fvariance-associated-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariance-associated-types.rs?ref=4647d89205992383f8122e8fde0e2615497572bc", "patch": "@@ -11,6 +11,8 @@\n // Test that the variance computation considers types/regions that\n // appear in projections to be invariant.\n \n+#![feature(rustc_attrs)]\n+\n trait Trait<'a> {\n     type Type;\n "}, {"sha": "2b7b05970d90f4c15f8830398eeaa50b76cc1e5d", "filename": "src/test/compile-fail/variance-object-types.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4647d89205992383f8122e8fde0e2615497572bc/src%2Ftest%2Fcompile-fail%2Fvariance-object-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4647d89205992383f8122e8fde0e2615497572bc/src%2Ftest%2Fcompile-fail%2Fvariance-object-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariance-object-types.rs?ref=4647d89205992383f8122e8fde0e2615497572bc", "patch": "@@ -11,6 +11,8 @@\n // Test that Cell is considered invariant with respect to its\n // type.\n \n+#![feature(rustc_attrs)]\n+\n use std::cell::Cell;\n \n // For better or worse, associated types are invariant, and hence we"}, {"sha": "d70305d1106ecd64c8a1535fddea6449fad35320", "filename": "src/test/compile-fail/variance-regions-direct.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4647d89205992383f8122e8fde0e2615497572bc/src%2Ftest%2Fcompile-fail%2Fvariance-regions-direct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4647d89205992383f8122e8fde0e2615497572bc/src%2Ftest%2Fcompile-fail%2Fvariance-regions-direct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariance-regions-direct.rs?ref=4647d89205992383f8122e8fde0e2615497572bc", "patch": "@@ -11,6 +11,8 @@\n // Test that we correctly infer variance for region parameters in\n // various self-contained types.\n \n+#![feature(rustc_attrs)]\n+\n // Regions that just appear in normal spots are contravariant:\n \n #[rustc_variance]"}, {"sha": "4bb329d6304cf3ec1333f980bde394d063ff5f16", "filename": "src/test/compile-fail/variance-regions-indirect.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4647d89205992383f8122e8fde0e2615497572bc/src%2Ftest%2Fcompile-fail%2Fvariance-regions-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4647d89205992383f8122e8fde0e2615497572bc/src%2Ftest%2Fcompile-fail%2Fvariance-regions-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariance-regions-indirect.rs?ref=4647d89205992383f8122e8fde0e2615497572bc", "patch": "@@ -12,6 +12,8 @@\n // case that involve multiple intricate types.\n // Try enums too.\n \n+#![feature(rustc_attrs)]\n+\n #[rustc_variance]\n enum Base<'a, 'b, 'c:'b, 'd> { //~ ERROR regions=[[+, -, o, *];[];[]]\n     Test8A(extern \"Rust\" fn(&'a isize)),"}, {"sha": "965b9430a5e2d44095266a7b08abf700728e2147", "filename": "src/test/compile-fail/variance-trait-object-bound.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4647d89205992383f8122e8fde0e2615497572bc/src%2Ftest%2Fcompile-fail%2Fvariance-trait-object-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4647d89205992383f8122e8fde0e2615497572bc/src%2Ftest%2Fcompile-fail%2Fvariance-trait-object-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariance-trait-object-bound.rs?ref=4647d89205992383f8122e8fde0e2615497572bc", "patch": "@@ -14,6 +14,8 @@\n //\n // Issue #18262.\n \n+#![feature(rustc_attrs)]\n+\n use std::mem;\n \n trait T { fn foo(); }"}, {"sha": "951a716879fce782c8f45effa67497ced90d438f", "filename": "src/test/run-pass/attr-before-view-item.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4647d89205992383f8122e8fde0e2615497572bc/src%2Ftest%2Frun-pass%2Fattr-before-view-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4647d89205992383f8122e8fde0e2615497572bc/src%2Ftest%2Frun-pass%2Fattr-before-view-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-before-view-item.rs?ref=4647d89205992383f8122e8fde0e2615497572bc", "patch": "@@ -10,6 +10,8 @@\n \n // error-pattern:expected item\n \n+#![feature(custom_attribute)]\n+\n #[foo = \"bar\"]\n extern crate test;\n "}, {"sha": "ad8ce608bd05dcb30fe4f6067c5f93558cac8798", "filename": "src/test/run-pass/attr-before-view-item2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4647d89205992383f8122e8fde0e2615497572bc/src%2Ftest%2Frun-pass%2Fattr-before-view-item2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4647d89205992383f8122e8fde0e2615497572bc/src%2Ftest%2Frun-pass%2Fattr-before-view-item2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-before-view-item2.rs?ref=4647d89205992383f8122e8fde0e2615497572bc", "patch": "@@ -10,6 +10,8 @@\n \n // error-pattern:expected item\n \n+#![feature(custom_attribute)]\n+\n mod m {\n     #[foo = \"bar\"]\n     extern crate test;"}, {"sha": "7980937ce2a159f84aa129871dbeb59b183906c1", "filename": "src/test/run-pass/attr-mix-new.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4647d89205992383f8122e8fde0e2615497572bc/src%2Ftest%2Frun-pass%2Fattr-mix-new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4647d89205992383f8122e8fde0e2615497572bc/src%2Ftest%2Frun-pass%2Fattr-mix-new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-mix-new.rs?ref=4647d89205992383f8122e8fde0e2615497572bc", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n #![allow(unused_attribute)]\n+#![feature(custom_attribute)]\n \n #[foo(bar)]\n mod foo {"}, {"sha": "4e05c263a48bafddc0486e40b311ae2e865d62a4", "filename": "src/test/run-pass/check-static-recursion-foreign.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4647d89205992383f8122e8fde0e2615497572bc/src%2Ftest%2Frun-pass%2Fcheck-static-recursion-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4647d89205992383f8122e8fde0e2615497572bc/src%2Ftest%2Frun-pass%2Fcheck-static-recursion-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcheck-static-recursion-foreign.rs?ref=4647d89205992383f8122e8fde0e2615497572bc", "patch": "@@ -11,6 +11,9 @@\n // Static recursion check shouldn't fail when given a foreign item (#18279)\n \n // aux-build:check_static_recursion_foreign_helper.rs\n+\n+#![feature(custom_attribute)]\n+\n extern crate check_static_recursion_foreign_helper;\n extern crate libc;\n "}, {"sha": "5dc27472184d7e72a184094dcd267c37950eb8d9", "filename": "src/test/run-pass/class-attributes-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4647d89205992383f8122e8fde0e2615497572bc/src%2Ftest%2Frun-pass%2Fclass-attributes-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4647d89205992383f8122e8fde0e2615497572bc/src%2Ftest%2Frun-pass%2Fclass-attributes-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-attributes-1.rs?ref=4647d89205992383f8122e8fde0e2615497572bc", "patch": "@@ -10,6 +10,7 @@\n \n // pp-exact - Make sure we actually print the attributes\n #![allow(unused_attribute)]\n+#![feature(custom_attribute)]\n \n struct cat {\n     name: String,"}, {"sha": "cc1b15bcb81cda70c2ce6d4d2dcb5ba2680a0138", "filename": "src/test/run-pass/class-attributes-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4647d89205992383f8122e8fde0e2615497572bc/src%2Ftest%2Frun-pass%2Fclass-attributes-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4647d89205992383f8122e8fde0e2615497572bc/src%2Ftest%2Frun-pass%2Fclass-attributes-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-attributes-2.rs?ref=4647d89205992383f8122e8fde0e2615497572bc", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n #![allow(unused_attribute)]\n+#![feature(custom_attribute)]\n \n struct cat {\n   name: String,"}, {"sha": "2aa5a57966672178e924c11630f2cf8fb395cdd2", "filename": "src/test/run-pass/item-attributes.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4647d89205992383f8122e8fde0e2615497572bc/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4647d89205992383f8122e8fde0e2615497572bc/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fitem-attributes.rs?ref=4647d89205992383f8122e8fde0e2615497572bc", "patch": "@@ -11,6 +11,8 @@\n // These are attributes of the implicit crate. Really this just needs to parse\n // for completeness since .rs files linked from .rc files support this\n // notation to specify their module's attributes\n+\n+#![feature(custom_attribute)]\n #![allow(unused_attribute)]\n #![attr1 = \"val\"]\n #![attr2 = \"val\"]"}, {"sha": "92af96e0d8f2c81068f5958e1bd72ef810c47e73", "filename": "src/test/run-pass/method-attributes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4647d89205992383f8122e8fde0e2615497572bc/src%2Ftest%2Frun-pass%2Fmethod-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4647d89205992383f8122e8fde0e2615497572bc/src%2Ftest%2Frun-pass%2Fmethod-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-attributes.rs?ref=4647d89205992383f8122e8fde0e2615497572bc", "patch": "@@ -10,6 +10,7 @@\n \n // pp-exact - Make sure we print all the attributes\n #![allow(unused_attribute)]\n+#![feature(custom_attribute)]\n \n #[frobable]\n trait frobable {"}, {"sha": "16dca2db396e7f716d3f13ef35fa5baf1c7eca92", "filename": "src/test/run-pass/variant-attributes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4647d89205992383f8122e8fde0e2615497572bc/src%2Ftest%2Frun-pass%2Fvariant-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4647d89205992383f8122e8fde0e2615497572bc/src%2Ftest%2Frun-pass%2Fvariant-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvariant-attributes.rs?ref=4647d89205992383f8122e8fde0e2615497572bc", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // pp-exact - Make sure we actually print the attributes\n+#![feature(custom_attribute)]\n \n enum crew_of_enterprise_d {\n "}]}