{"sha": "697c75ef4b39f1560bf087841aebc8799b5c64d6", "node_id": "C_kwDOAAsO6NoAKDY5N2M3NWVmNGIzOWYxNTYwYmYwODc4NDFhZWJjODc5OWI1YzY0ZDY", "commit": {"author": {"name": "kyoto7250", "email": "50972773+kyoto7250@users.noreply.github.com", "date": "2022-06-17T15:19:30Z"}, "committer": {"name": "kyoto7250", "email": "50972773+kyoto7250@users.noreply.github.com", "date": "2022-06-17T15:19:30Z"}, "message": "check only the end", "tree": {"sha": "827aee91cffaf9c2be500c9d184f06b28c154374", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/827aee91cffaf9c2be500c9d184f06b28c154374"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/697c75ef4b39f1560bf087841aebc8799b5c64d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/697c75ef4b39f1560bf087841aebc8799b5c64d6", "html_url": "https://github.com/rust-lang/rust/commit/697c75ef4b39f1560bf087841aebc8799b5c64d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/697c75ef4b39f1560bf087841aebc8799b5c64d6/comments", "author": {"login": "kyoto7250", "id": 50972773, "node_id": "MDQ6VXNlcjUwOTcyNzcz", "avatar_url": "https://avatars.githubusercontent.com/u/50972773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kyoto7250", "html_url": "https://github.com/kyoto7250", "followers_url": "https://api.github.com/users/kyoto7250/followers", "following_url": "https://api.github.com/users/kyoto7250/following{/other_user}", "gists_url": "https://api.github.com/users/kyoto7250/gists{/gist_id}", "starred_url": "https://api.github.com/users/kyoto7250/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kyoto7250/subscriptions", "organizations_url": "https://api.github.com/users/kyoto7250/orgs", "repos_url": "https://api.github.com/users/kyoto7250/repos", "events_url": "https://api.github.com/users/kyoto7250/events{/privacy}", "received_events_url": "https://api.github.com/users/kyoto7250/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kyoto7250", "id": 50972773, "node_id": "MDQ6VXNlcjUwOTcyNzcz", "avatar_url": "https://avatars.githubusercontent.com/u/50972773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kyoto7250", "html_url": "https://github.com/kyoto7250", "followers_url": "https://api.github.com/users/kyoto7250/followers", "following_url": "https://api.github.com/users/kyoto7250/following{/other_user}", "gists_url": "https://api.github.com/users/kyoto7250/gists{/gist_id}", "starred_url": "https://api.github.com/users/kyoto7250/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kyoto7250/subscriptions", "organizations_url": "https://api.github.com/users/kyoto7250/orgs", "repos_url": "https://api.github.com/users/kyoto7250/repos", "events_url": "https://api.github.com/users/kyoto7250/events{/privacy}", "received_events_url": "https://api.github.com/users/kyoto7250/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5b6d25ca4f1600a158ffb68301dd816c8eda3cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5b6d25ca4f1600a158ffb68301dd816c8eda3cf", "html_url": "https://github.com/rust-lang/rust/commit/a5b6d25ca4f1600a158ffb68301dd816c8eda3cf"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "f0f2c7420349eabcdc50ff428cf776ce5bc3bc09", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/697c75ef4b39f1560bf087841aebc8799b5c64d6/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697c75ef4b39f1560bf087841aebc8799b5c64d6/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=697c75ef4b39f1560bf087841aebc8799b5c64d6", "patch": "@@ -391,12 +391,12 @@ fn contains_acceptable_macro(cx: &LateContext<'_>, block: &Block<'_>) -> bool {\n fn acceptable_macro(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     if let ExprKind::Call(call_expr, _)  = expr.kind\n         && let ExprKind::Path(QPath::Resolved(None, path)) = call_expr.kind\n-        && macro_backtrace(path.span).any(|macro_call| {\n+        && macro_backtrace(path.span).last().map_or(false, |macro_call|\n             matches!(\n                 &cx.tcx.get_diagnostic_name(macro_call.def_id),\n                 Some(sym::todo_macro | sym::unimplemented_macro)\n             )\n-    }) {\n+    ) {\n         return true;\n     }\n "}]}