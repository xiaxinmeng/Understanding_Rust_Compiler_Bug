{"sha": "57c31b2849ea499fae4a9f6f049d1ab0512e70fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3YzMxYjI4NDllYTQ5OWZhZTRhOWY2ZjA0OWQxYWIwNTEyZTcwZmQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-01-11T20:49:30Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-01-16T10:22:33Z"}, "message": "Implement a hacky version of the DAG support we ultimately want, leaving\na FIXME for later.", "tree": {"sha": "f76dc155a43ba71f381cb2be66afd9e776c67fad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f76dc155a43ba71f381cb2be66afd9e776c67fad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57c31b2849ea499fae4a9f6f049d1ab0512e70fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57c31b2849ea499fae4a9f6f049d1ab0512e70fd", "html_url": "https://github.com/rust-lang/rust/commit/57c31b2849ea499fae4a9f6f049d1ab0512e70fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57c31b2849ea499fae4a9f6f049d1ab0512e70fd/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3046ac217fbc8c8962ee83025b47cdf4048c39f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/3046ac217fbc8c8962ee83025b47cdf4048c39f0", "html_url": "https://github.com/rust-lang/rust/commit/3046ac217fbc8c8962ee83025b47cdf4048c39f0"}], "stats": {"total": 63, "additions": 54, "deletions": 9}, "files": [{"sha": "7d1af8ca83aa02285f6153863f5c277504f3bc7b", "filename": "src/librustc/middle/traits/fulfill.rs", "status": "modified", "additions": 52, "deletions": 6, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/57c31b2849ea499fae4a9f6f049d1ab0512e70fd/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c31b2849ea499fae4a9f6f049d1ab0512e70fd/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs?ref=57c31b2849ea499fae4a9f6f049d1ab0512e70fd", "patch": "@@ -319,12 +319,58 @@ fn process_predicate<'a,'tcx>(selcx: &mut SelectionContext<'a,'tcx>,\n                                         FulfillmentErrorCode<'tcx>>\n {\n     match process_predicate1(selcx, pending_obligation, backtrace, region_obligations) {\n-        Ok(Some(v)) => Ok(Some(v.into_iter()\n-                                .map(|o| PendingPredicateObligation {\n-                                    obligation: o,\n-                                    stalled_on: vec![]\n-                                })\n-                               .collect())),\n+        Ok(Some(v)) => {\n+            // FIXME the right thing to do here, I think, is to permit\n+            // DAGs. That is, we should detect whenever this predicate\n+            // has appeared somewhere in the current tree./ If it's a\n+            // parent, that's a cycle, and we should either error out\n+            // or consider it ok. But if it's NOT a parent, we can\n+            // ignore it, since it will be proven (or not) separately.\n+            // However, this is a touch tricky, so I'm doing something\n+            // a bit hackier for now so that the `huge-struct.rs` passes.\n+\n+            let retain_vec: Vec<_> = {\n+                let mut dedup = FnvHashSet();\n+                v.iter()\n+                 .map(|o| {\n+                     // Screen out obligations that we know globally\n+                     // are true. This should really be the DAG check\n+                     // mentioned above.\n+                     if\n+                         o.predicate.is_global() &&\n+                         selcx.tcx().fulfilled_predicates.borrow().is_duplicate(&o.predicate)\n+                     {\n+                         return false;\n+                     }\n+\n+                     // If we see two siblings that are exactly the\n+                     // same, no need to add them twice.\n+                     if !dedup.insert(&o.predicate) {\n+                         return false;\n+                     }\n+\n+                     true\n+                 })\n+                 .collect()\n+            };\n+\n+            let pending_predicate_obligations =\n+                v.into_iter()\n+                 .zip(retain_vec)\n+                 .flat_map(|(o, retain)| {\n+                     if retain {\n+                         Some(PendingPredicateObligation {\n+                             obligation: o,\n+                             stalled_on: vec![]\n+                         })\n+                     } else {\n+                         None\n+                     }\n+                 })\n+                .collect();\n+\n+            Ok(Some(pending_predicate_obligations))\n+        }\n         Ok(None) => Ok(None),\n         Err(e) => Err(e)\n     }"}, {"sha": "3f96a9c342283d0678db124b5d7bfe0e4ca200bc", "filename": "src/test/compile-fail/issue-20831-debruijn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/57c31b2849ea499fae4a9f6f049d1ab0512e70fd/src%2Ftest%2Fcompile-fail%2Fissue-20831-debruijn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c31b2849ea499fae4a9f6f049d1ab0512e70fd/src%2Ftest%2Fcompile-fail%2Fissue-20831-debruijn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20831-debruijn.rs?ref=57c31b2849ea499fae4a9f6f049d1ab0512e70fd", "patch": "@@ -40,7 +40,6 @@ impl<'a> Publisher<'a> for MyStruct<'a> {\n         //~^^ ERROR cannot infer\n         //~|  ERROR cannot infer\n         //~|  ERROR cannot infer\n-        //~|  ERROR cannot infer\n         //\n         // The fact that `Publisher` is using an implicit lifetime is\n         // what was causing the debruijn accounting to be off, so"}, {"sha": "3221ae4629643a68ffa2c2ebee619bf11117ce17", "filename": "src/test/compile-fail/recursion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57c31b2849ea499fae4a9f6f049d1ab0512e70fd/src%2Ftest%2Fcompile-fail%2Frecursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c31b2849ea499fae4a9f6f049d1ab0512e70fd/src%2Ftest%2Fcompile-fail%2Frecursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frecursion.rs?ref=57c31b2849ea499fae4a9f6f049d1ab0512e70fd", "patch": "@@ -19,8 +19,8 @@ impl<T:Dot> Dot for Cons<T> {\n     self.head * other.head + self.tail.dot(other.tail)\n   }\n }\n-fn test<T:Dot> (n:isize, i:isize, first:T, second:T) ->isize {\n-  match n {    0 => {first.dot(second)} //~ ERROR overflow\n+fn test<T:Dot> (n:isize, i:isize, first:T, second:T) ->isize { //~ ERROR recursion limit\n+  match n {    0 => {first.dot(second)}\n       // FIXME(#4287) Error message should be here. It should be\n       // a type error to instantiate `test` at a type other than T.\n     _ => {test (n-1, i+1, Cons {head:2*i+1, tail:first}, Cons{head:i*i, tail:second})}"}]}