{"sha": "eb378d2015d10b6b99955512ab005665f417e014", "node_id": "C_kwDOAAsO6NoAKGViMzc4ZDIwMTVkMTBiNmI5OTk1NTUxMmFiMDA1NjY1ZjQxN2UwMTQ", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-07-30T15:09:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-30T15:09:47Z"}, "message": "Rollup merge of #99862 - WaffleLapkin:type_mismatch_fix, r=compiler-errors\n\nImprove type mismatch w/ function signatures\n\nThis PR makes use of `note: expected/found` (instead of labeling types in labels) in type mismatch with function signatures. Pros: it's easier to compare the signatures, cons: the error is a little more verbose now.\n\nThis is especially nice when\n- The signatures differ in a small subset of parameters (same parameters are elided)\n- The difference is in details, for example `isize` vs `usize` (there is a better chance that the types align)\n\nAlso this PR fixes the inconsistency in variable names in the edited code (`expected` and `found`).\n\nA zulip thread from which this pr started: [[link]](https://rust-lang.zulipchat.com/#narrow/stream/147480-t-compiler.2Fwg-diagnostics/topic/Type.20error.20regression.3F.2E.2E.2E/near/289756602).\n\nAn example diagnostic:\n\n<table>\n<tr>\n<th>this pr</th>\n<th>nightly</th>\n</tr>\n<tr>\n<td>\n\n```text\nerror[E0631]: type mismatch in function arguments\n  --> ./t.rs:4:12\n   |\n4  |     expect(&f);\n   |     ------ ^^ expected due to this\n   |     |\n   |     required by a bound introduced by this call\n...\n10 | fn f(_: isize, _: u8, _: Vec<u32>) {}\n   | ---------------------------------- found signature defined here\n   |\n   = note: expected function signature `fn(usize, _, Vec<u64>) -> _`\n              found function signature `fn(isize, _, Vec<u32>) -> _`\nnote: required because of the requirements on the impl of `Trait` for `fn(isize, u8, Vec<u32>) {f}`\n  --> ./t.rs:8:9\n   |\n8  | impl<F> Trait for F where F: Fn(usize, u8, Vec<u64>) -> u8 {}\n   |         ^^^^^     ^\n   = note: required for the cast from `fn(isize, u8, Vec<u32>) {f}` to the object type `dyn Trait`\n```\n\n</td>\n<td>\n\n```text\nerror[E0631]: type mismatch in function arguments\n  --> ./t.rs:4:12\n   |\n4  |     expect(&f);\n   |     ------ ^^ expected signature of `fn(usize, u8, Vec<u64>) -> _`\n   |     |\n   |     required by a bound introduced by this call\n...\n10 | fn f(_: isize, _: u8, _: Vec<u32>) {}\n   | ---------------------------------- found signature of `fn(isize, u8, Vec<u32>) -> _`\n   |\nnote: required because of the requirements on the impl of `Trait` for `fn(isize, u8, Vec<u32>) {f}`\n  --> ./t.rs:8:9\n   |\n8  | impl<F> Trait for F where F: Fn(usize, u8, Vec<u64>) -> u8 {}\n   |         ^^^^^     ^\n   = note: required for the cast to the object type `dyn Trait`\n```\n\n</td>\n</tr>\n</table>\n\n<details><summary>code</summary>\n<p>\n\n```rust\nfn main() {\n    fn expect(_: &dyn Trait) {}\n\n    expect(&f);\n}\n\ntrait Trait {}\nimpl<F> Trait for F where F: Fn(usize, u8, Vec<u64>) -> u8 {}\n\nfn f(_: isize, _: u8, _: Vec<u32>) {}\n```\n\n</p>\n</details>\n\nr? `@compiler-errors`", "tree": {"sha": "a127271a4e8d242b84f55cebf51d801bc3695e5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a127271a4e8d242b84f55cebf51d801bc3695e5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb378d2015d10b6b99955512ab005665f417e014", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi5Um8CRBK7hj4Ov3rIwAAH88IACiuRuWQqRodXkjGafcU/4uR\nlTD/KeM5/NOMzmFzNeciXghz1LYvkM0SE96qew2Ph5K8fFgN7wGKSXpnO2VifESk\nT2ro0N01rRIha0UHXsoa2xx362i0s1aZrhmeaA0y3ZntC1Aub09TP//pZ1t2/EZz\nVn4JGXVLEhPDahf4COYCm70zHyQ9Nwk8DxRLQ4TKKbvSJvFheLJXs4HL/rdCiKNe\nb1/VvnPH+iXubS3NLTWWgMZTf3sqvMAdI4oAH9WsrWnfjWz/ej60VJAo04WEg2o0\n41TEBqsfbi4dJp5c3bh1t+xt+68QV5RLSzwVqcIoeTr6rCz5QU7JliqwpgpiJ0w=\n=xjtx\n-----END PGP SIGNATURE-----\n", "payload": "tree a127271a4e8d242b84f55cebf51d801bc3695e5c\nparent c668820365bc9c66408b993cda84d48532a9e0ce\nparent 7da578b8f818cef1957502298f30ff10729278b5\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1659193787 +0530\ncommitter GitHub <noreply@github.com> 1659193787 +0530\n\nRollup merge of #99862 - WaffleLapkin:type_mismatch_fix, r=compiler-errors\n\nImprove type mismatch w/ function signatures\n\nThis PR makes use of `note: expected/found` (instead of labeling types in labels) in type mismatch with function signatures. Pros: it's easier to compare the signatures, cons: the error is a little more verbose now.\n\nThis is especially nice when\n- The signatures differ in a small subset of parameters (same parameters are elided)\n- The difference is in details, for example `isize` vs `usize` (there is a better chance that the types align)\n\nAlso this PR fixes the inconsistency in variable names in the edited code (`expected` and `found`).\n\nA zulip thread from which this pr started: [[link]](https://rust-lang.zulipchat.com/#narrow/stream/147480-t-compiler.2Fwg-diagnostics/topic/Type.20error.20regression.3F.2E.2E.2E/near/289756602).\n\nAn example diagnostic:\n\n<table>\n<tr>\n<th>this pr</th>\n<th>nightly</th>\n</tr>\n<tr>\n<td>\n\n```text\nerror[E0631]: type mismatch in function arguments\n  --> ./t.rs:4:12\n   |\n4  |     expect(&f);\n   |     ------ ^^ expected due to this\n   |     |\n   |     required by a bound introduced by this call\n...\n10 | fn f(_: isize, _: u8, _: Vec<u32>) {}\n   | ---------------------------------- found signature defined here\n   |\n   = note: expected function signature `fn(usize, _, Vec<u64>) -> _`\n              found function signature `fn(isize, _, Vec<u32>) -> _`\nnote: required because of the requirements on the impl of `Trait` for `fn(isize, u8, Vec<u32>) {f}`\n  --> ./t.rs:8:9\n   |\n8  | impl<F> Trait for F where F: Fn(usize, u8, Vec<u64>) -> u8 {}\n   |         ^^^^^     ^\n   = note: required for the cast from `fn(isize, u8, Vec<u32>) {f}` to the object type `dyn Trait`\n```\n\n</td>\n<td>\n\n```text\nerror[E0631]: type mismatch in function arguments\n  --> ./t.rs:4:12\n   |\n4  |     expect(&f);\n   |     ------ ^^ expected signature of `fn(usize, u8, Vec<u64>) -> _`\n   |     |\n   |     required by a bound introduced by this call\n...\n10 | fn f(_: isize, _: u8, _: Vec<u32>) {}\n   | ---------------------------------- found signature of `fn(isize, u8, Vec<u32>) -> _`\n   |\nnote: required because of the requirements on the impl of `Trait` for `fn(isize, u8, Vec<u32>) {f}`\n  --> ./t.rs:8:9\n   |\n8  | impl<F> Trait for F where F: Fn(usize, u8, Vec<u64>) -> u8 {}\n   |         ^^^^^     ^\n   = note: required for the cast to the object type `dyn Trait`\n```\n\n</td>\n</tr>\n</table>\n\n<details><summary>code</summary>\n<p>\n\n```rust\nfn main() {\n    fn expect(_: &dyn Trait) {}\n\n    expect(&f);\n}\n\ntrait Trait {}\nimpl<F> Trait for F where F: Fn(usize, u8, Vec<u64>) -> u8 {}\n\nfn f(_: isize, _: u8, _: Vec<u32>) {}\n```\n\n</p>\n</details>\n\nr? `@compiler-errors`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb378d2015d10b6b99955512ab005665f417e014", "html_url": "https://github.com/rust-lang/rust/commit/eb378d2015d10b6b99955512ab005665f417e014", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb378d2015d10b6b99955512ab005665f417e014/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c668820365bc9c66408b993cda84d48532a9e0ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/c668820365bc9c66408b993cda84d48532a9e0ce", "html_url": "https://github.com/rust-lang/rust/commit/c668820365bc9c66408b993cda84d48532a9e0ce"}, {"sha": "7da578b8f818cef1957502298f30ff10729278b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/7da578b8f818cef1957502298f30ff10729278b5", "html_url": "https://github.com/rust-lang/rust/commit/7da578b8f818cef1957502298f30ff10729278b5"}], "stats": {"total": 215, "additions": 139, "deletions": 76}, "files": [{"sha": "b2eb8fdf8a5444dda1e66b09bd68d607cce5302a", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/eb378d2015d10b6b99955512ab005665f417e014/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb378d2015d10b6b99955512ab005665f417e014/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=eb378d2015d10b6b99955512ab005665f417e014", "patch": "@@ -20,6 +20,7 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::Visitor;\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::{AsyncGeneratorKind, GeneratorKind, Node};\n+use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::hir::map;\n use rustc_middle::ty::{\n     self, suggest_arbitrary_trait_bound, suggest_constraining_type_param, AdtKind, DefIdTree,\n@@ -253,8 +254,8 @@ pub trait InferCtxtExt<'tcx> {\n         &self,\n         span: Span,\n         found_span: Option<Span>,\n-        expected_ref: ty::PolyTraitRef<'tcx>,\n         found: ty::PolyTraitRef<'tcx>,\n+        expected: ty::PolyTraitRef<'tcx>,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed>;\n \n     fn suggest_fully_qualified_path(\n@@ -1536,13 +1537,13 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         &self,\n         span: Span,\n         found_span: Option<Span>,\n-        expected_ref: ty::PolyTraitRef<'tcx>,\n         found: ty::PolyTraitRef<'tcx>,\n+        expected: ty::PolyTraitRef<'tcx>,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n-        pub(crate) fn build_fn_sig_string<'tcx>(\n+        pub(crate) fn build_fn_sig_ty<'tcx>(\n             tcx: TyCtxt<'tcx>,\n             trait_ref: ty::PolyTraitRef<'tcx>,\n-        ) -> String {\n+        ) -> Ty<'tcx> {\n             let inputs = trait_ref.skip_binder().substs.type_at(1);\n             let sig = match inputs.kind() {\n                 ty::Tuple(inputs)\n@@ -1564,10 +1565,11 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     abi::Abi::Rust,\n                 ),\n             };\n-            trait_ref.rebind(sig).to_string()\n+\n+            tcx.mk_fn_ptr(trait_ref.rebind(sig))\n         }\n \n-        let argument_kind = match expected_ref.skip_binder().self_ty().kind() {\n+        let argument_kind = match expected.skip_binder().self_ty().kind() {\n             ty::Closure(..) => \"closure\",\n             ty::Generator(..) => \"generator\",\n             _ => \"function\",\n@@ -1576,17 +1578,22 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             self.tcx.sess,\n             span,\n             E0631,\n-            \"type mismatch in {} arguments\",\n-            argument_kind\n+            \"type mismatch in {argument_kind} arguments\",\n         );\n \n-        let found_str = format!(\"expected signature of `{}`\", build_fn_sig_string(self.tcx, found));\n-        err.span_label(span, found_str);\n+        err.span_label(span, \"expected due to this\");\n \n         let found_span = found_span.unwrap_or(span);\n-        let expected_str =\n-            format!(\"found signature of `{}`\", build_fn_sig_string(self.tcx, expected_ref));\n-        err.span_label(found_span, expected_str);\n+        err.span_label(found_span, \"found signature defined here\");\n+\n+        let expected = build_fn_sig_ty(self.tcx, expected);\n+        let found = build_fn_sig_ty(self.tcx, found);\n+\n+        let (expected_str, found_str) =\n+            self.tcx.infer_ctxt().enter(|infcx| infcx.cmp(expected, found));\n+\n+        let signature_kind = format!(\"{argument_kind} signature\");\n+        err.note_expected_found(&signature_kind, expected_str, &signature_kind, found_str);\n \n         err\n     }"}, {"sha": "1a0a5fdf4eb233c5bebdf316be4e738ad7295a6d", "filename": "src/test/ui/anonymous-higher-ranked-lifetime.stderr", "status": "modified", "additions": 44, "deletions": 22, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/eb378d2015d10b6b99955512ab005665f417e014/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb378d2015d10b6b99955512ab005665f417e014/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr?ref=eb378d2015d10b6b99955512ab005665f417e014", "patch": "@@ -2,10 +2,12 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:2:5\n    |\n LL |     f1(|_: (), _: ()| {});\n-   |     ^^ -------------- found signature of `fn((), ()) -> _`\n+   |     ^^ -------------- found signature defined here\n    |     |\n-   |     expected signature of `for<'r, 's> fn(&'r (), &'s ()) -> _`\n+   |     expected due to this\n    |\n+   = note: expected closure signature `for<'r, 's> fn(&'r (), &'s ()) -> _`\n+              found closure signature `fn((), ()) -> _`\n note: required by a bound in `f1`\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:16:25\n    |\n@@ -16,10 +18,12 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:3:5\n    |\n LL |     f2(|_: (), _: ()| {});\n-   |     ^^ -------------- found signature of `fn((), ()) -> _`\n+   |     ^^ -------------- found signature defined here\n    |     |\n-   |     expected signature of `for<'a, 'r> fn(&'a (), &'r ()) -> _`\n+   |     expected due to this\n    |\n+   = note: expected closure signature `for<'a, 'r> fn(&'a (), &'r ()) -> _`\n+              found closure signature `fn((), ()) -> _`\n note: required by a bound in `f2`\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:17:25\n    |\n@@ -30,10 +34,12 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:4:5\n    |\n LL |     f3(|_: (), _: ()| {});\n-   |     ^^ -------------- found signature of `fn((), ()) -> _`\n+   |     ^^ -------------- found signature defined here\n    |     |\n-   |     expected signature of `for<'r> fn(&(), &'r ()) -> _`\n+   |     expected due to this\n    |\n+   = note: expected closure signature `for<'r> fn(&(), &'r ()) -> _`\n+              found closure signature `fn((), ()) -> _`\n note: required by a bound in `f3`\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:18:29\n    |\n@@ -44,10 +50,12 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:5:5\n    |\n LL |     f4(|_: (), _: ()| {});\n-   |     ^^ -------------- found signature of `fn((), ()) -> _`\n+   |     ^^ -------------- found signature defined here\n    |     |\n-   |     expected signature of `for<'s, 'r> fn(&'s (), &'r ()) -> _`\n+   |     expected due to this\n    |\n+   = note: expected closure signature `for<'r, 's> fn(&'s (), &'r ()) -> _`\n+              found closure signature `fn((), ()) -> _`\n note: required by a bound in `f4`\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:19:25\n    |\n@@ -58,10 +66,12 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:6:5\n    |\n LL |     f5(|_: (), _: ()| {});\n-   |     ^^ -------------- found signature of `fn((), ()) -> _`\n+   |     ^^ -------------- found signature defined here\n    |     |\n-   |     expected signature of `for<'r> fn(&'r (), &'r ()) -> _`\n+   |     expected due to this\n    |\n+   = note: expected closure signature `for<'r> fn(&'r (), &'r ()) -> _`\n+              found closure signature `fn((), ()) -> _`\n note: required by a bound in `f5`\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:20:25\n    |\n@@ -72,10 +82,12 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:7:5\n    |\n LL |     g1(|_: (), _: ()| {});\n-   |     ^^ -------------- found signature of `fn((), ()) -> _`\n+   |     ^^ -------------- found signature defined here\n    |     |\n-   |     expected signature of `for<'r> fn(&'r (), Box<(dyn for<'s> Fn(&'s ()) + 'static)>) -> _`\n+   |     expected due to this\n    |\n+   = note: expected closure signature `for<'r> fn(&'r (), Box<(dyn for<'r> Fn(&'r ()) + 'static)>) -> _`\n+              found closure signature `fn((), ()) -> _`\n note: required by a bound in `g1`\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:23:25\n    |\n@@ -86,10 +98,12 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:8:5\n    |\n LL |     g2(|_: (), _: ()| {});\n-   |     ^^ -------------- found signature of `fn((), ()) -> _`\n+   |     ^^ -------------- found signature defined here\n    |     |\n-   |     expected signature of `for<'r> fn(&'r (), for<'s> fn(&'s ())) -> _`\n+   |     expected due to this\n    |\n+   = note: expected closure signature `for<'r> fn(&'r (), for<'r> fn(&'r ())) -> _`\n+              found closure signature `fn((), ()) -> _`\n note: required by a bound in `g2`\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:24:25\n    |\n@@ -100,10 +114,12 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:9:5\n    |\n LL |     g3(|_: (), _: ()| {});\n-   |     ^^ -------------- found signature of `fn((), ()) -> _`\n+   |     ^^ -------------- found signature defined here\n    |     |\n-   |     expected signature of `for<'s> fn(&'s (), Box<(dyn for<'r> Fn(&'r ()) + 'static)>) -> _`\n+   |     expected due to this\n    |\n+   = note: expected closure signature `for<'s> fn(&'s (), Box<(dyn for<'r> Fn(&'r ()) + 'static)>) -> _`\n+              found closure signature `fn((), ()) -> _`\n note: required by a bound in `g3`\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:25:25\n    |\n@@ -114,10 +130,12 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:10:5\n    |\n LL |     g4(|_: (), _: ()| {});\n-   |     ^^ -------------- found signature of `fn((), ()) -> _`\n+   |     ^^ -------------- found signature defined here\n    |     |\n-   |     expected signature of `for<'s> fn(&'s (), for<'r> fn(&'r ())) -> _`\n+   |     expected due to this\n    |\n+   = note: expected closure signature `for<'s> fn(&'s (), for<'r> fn(&'r ())) -> _`\n+              found closure signature `fn((), ()) -> _`\n note: required by a bound in `g4`\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:26:25\n    |\n@@ -128,10 +146,12 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:11:5\n    |\n LL |     h1(|_: (), _: (), _: (), _: ()| {});\n-   |     ^^ ---------------------------- found signature of `fn((), (), (), ()) -> _`\n+   |     ^^ ---------------------------- found signature defined here\n    |     |\n-   |     expected signature of `for<'r, 's> fn(&'r (), Box<(dyn for<'t0> Fn(&'t0 ()) + 'static)>, &'s (), for<'t0, 't1> fn(&'t0 (), &'t1 ())) -> _`\n+   |     expected due to this\n    |\n+   = note: expected closure signature `for<'r, 's> fn(&'r (), Box<(dyn for<'r> Fn(&'r ()) + 'static)>, &'s (), for<'r, 's> fn(&'r (), &'s ())) -> _`\n+              found closure signature `fn((), (), (), ()) -> _`\n note: required by a bound in `h1`\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:29:25\n    |\n@@ -142,10 +162,12 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:12:5\n    |\n LL |     h2(|_: (), _: (), _: (), _: ()| {});\n-   |     ^^ ---------------------------- found signature of `fn((), (), (), ()) -> _`\n+   |     ^^ ---------------------------- found signature defined here\n    |     |\n-   |     expected signature of `for<'r, 't0> fn(&'r (), Box<(dyn for<'s> Fn(&'s ()) + 'static)>, &'t0 (), for<'s, 't1> fn(&'s (), &'t1 ())) -> _`\n+   |     expected due to this\n    |\n+   = note: expected closure signature `for<'t0, 'r> fn(&'r (), Box<(dyn for<'r> Fn(&'r ()) + 'static)>, &'t0 (), for<'r, 's> fn(&'r (), &'s ())) -> _`\n+              found closure signature `fn((), (), (), ()) -> _`\n note: required by a bound in `h2`\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:30:25\n    |"}, {"sha": "8dccf929b2bd1fd73727cecaf062d7b485c2c60b", "filename": "src/test/ui/closure-expected-type/expect-infer-var-appearing-twice.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb378d2015d10b6b99955512ab005665f417e014/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-infer-var-appearing-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb378d2015d10b6b99955512ab005665f417e014/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-infer-var-appearing-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-infer-var-appearing-twice.stderr?ref=eb378d2015d10b6b99955512ab005665f417e014", "patch": "@@ -2,10 +2,12 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/expect-infer-var-appearing-twice.rs:14:5\n    |\n LL |     with_closure(|x: u32, y: i32| {\n-   |     ^^^^^^^^^^^^ ---------------- found signature of `fn(u32, i32) -> _`\n+   |     ^^^^^^^^^^^^ ---------------- found signature defined here\n    |     |\n-   |     expected signature of `fn(_, _) -> _`\n+   |     expected due to this\n    |\n+   = note: expected closure signature `fn(_, _) -> _`\n+              found closure signature `fn(u32, i32) -> _`\n note: required by a bound in `with_closure`\n   --> $DIR/expect-infer-var-appearing-twice.rs:2:14\n    |"}, {"sha": "1d9377bcef4de4e7b47418731b81d3001cc92746", "filename": "src/test/ui/generator/issue-88653.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb378d2015d10b6b99955512ab005665f417e014/src%2Ftest%2Fui%2Fgenerator%2Fissue-88653.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb378d2015d10b6b99955512ab005665f417e014/src%2Ftest%2Fui%2Fgenerator%2Fissue-88653.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-88653.rs?ref=eb378d2015d10b6b99955512ab005665f417e014", "patch": "@@ -7,10 +7,12 @@ use std::ops::Generator;\n \n fn foo(bar: bool) -> impl Generator<(bool,)> {\n     //~^ ERROR: type mismatch in generator arguments [E0631]\n-    //~| NOTE: expected signature of `fn((bool,)) -> _`\n+    //~| NOTE: expected due to this\n+    //~| NOTE: expected generator signature `fn((bool,)) -> _`\n+    //~| NOTE: in this expansion of desugaring of `impl Trait`\n     //~| NOTE: in this expansion of desugaring of `impl Trait`\n     |bar| {\n-        //~^ NOTE: found signature of `fn(bool) -> _`\n+        //~^ NOTE: found signature defined here\n         if bar {\n             yield bar;\n         }"}, {"sha": "b742c6e2f1c08b1c40c569c4f34e195d933a1ef6", "filename": "src/test/ui/generator/issue-88653.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/eb378d2015d10b6b99955512ab005665f417e014/src%2Ftest%2Fui%2Fgenerator%2Fissue-88653.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb378d2015d10b6b99955512ab005665f417e014/src%2Ftest%2Fui%2Fgenerator%2Fissue-88653.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-88653.stderr?ref=eb378d2015d10b6b99955512ab005665f417e014", "patch": "@@ -2,10 +2,13 @@ error[E0631]: type mismatch in generator arguments\n   --> $DIR/issue-88653.rs:8:22\n    |\n LL | fn foo(bar: bool) -> impl Generator<(bool,)> {\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^^ expected signature of `fn((bool,)) -> _`\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^ expected due to this\n ...\n LL |     |bar| {\n-   |     ----- found signature of `fn(bool) -> _`\n+   |     ----- found signature defined here\n+   |\n+   = note: expected generator signature `fn((bool,)) -> _`\n+              found generator signature `fn(bool) -> _`\n \n error: aborting due to previous error\n "}, {"sha": "7210895b79bc331ebc65fbb3b3fa22a788a74a59", "filename": "src/test/ui/generic-associated-types/bugs/issue-88382.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb378d2015d10b6b99955512ab005665f417e014/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88382.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb378d2015d10b6b99955512ab005665f417e014/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88382.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88382.stderr?ref=eb378d2015d10b6b99955512ab005665f417e014", "patch": "@@ -2,13 +2,15 @@ error[E0631]: type mismatch in function arguments\n   --> $DIR/issue-88382.rs:28:40\n    |\n LL |     do_something(SomeImplementation(), test);\n-   |     ------------                       ^^^^ expected signature of `for<'r> fn(&'r mut std::iter::Empty<usize>) -> _`\n+   |     ------------                       ^^^^ expected due to this\n    |     |\n    |     required by a bound introduced by this call\n ...\n LL | fn test<'a, I: Iterable>(_: &mut I::Iterator<'a>) {}\n-   | ------------------------------------------------- found signature of `for<'r, 'a> fn(&'r mut <_ as Iterable>::Iterator<'a>) -> _`\n+   | ------------------------------------------------- found signature defined here\n    |\n+   = note: expected function signature `for<'r> fn(&'r mut std::iter::Empty<usize>) -> _`\n+              found function signature `for<'a, 'r> fn(&'r mut <_ as Iterable>::Iterator<'a>) -> _`\n note: required by a bound in `do_something`\n   --> $DIR/issue-88382.rs:22:48\n    |"}, {"sha": "89dba12c818c8ab3564410ee1d4ac6c7778bc0cb", "filename": "src/test/ui/intrinsics/const-eval-select-bad.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb378d2015d10b6b99955512ab005665f417e014/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb378d2015d10b6b99955512ab005665f417e014/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.stderr?ref=eb378d2015d10b6b99955512ab005665f417e014", "patch": "@@ -67,13 +67,15 @@ error[E0631]: type mismatch in function arguments\n   --> $DIR/const-eval-select-bad.rs:34:32\n    |\n LL | const fn foo(n: i32) -> i32 {\n-   | --------------------------- found signature of `fn(i32) -> _`\n+   | --------------------------- found signature defined here\n ...\n LL |     const_eval_select((true,), foo, baz);\n-   |     -----------------          ^^^ expected signature of `fn(bool) -> _`\n+   |     -----------------          ^^^ expected due to this\n    |     |\n    |     required by a bound introduced by this call\n    |\n+   = note: expected function signature `fn(bool) -> _`\n+              found function signature `fn(i32) -> _`\n note: required by a bound in `const_eval_select`\n   --> $SRC_DIR/core/src/intrinsics.rs:LL:COL\n    |"}, {"sha": "4d673d45559a9758fed9c8d02d3076a979ed6f93", "filename": "src/test/ui/mismatched_types/E0631.stderr", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/eb378d2015d10b6b99955512ab005665f417e014/src%2Ftest%2Fui%2Fmismatched_types%2FE0631.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb378d2015d10b6b99955512ab005665f417e014/src%2Ftest%2Fui%2Fmismatched_types%2FE0631.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2FE0631.stderr?ref=eb378d2015d10b6b99955512ab005665f417e014", "patch": "@@ -2,10 +2,12 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/E0631.rs:7:5\n    |\n LL |     foo(|_: isize| {});\n-   |     ^^^ ---------- found signature of `fn(isize) -> _`\n+   |     ^^^ ---------- found signature defined here\n    |     |\n-   |     expected signature of `fn(usize) -> _`\n+   |     expected due to this\n    |\n+   = note: expected closure signature `fn(usize) -> _`\n+              found closure signature `fn(isize) -> _`\n note: required by a bound in `foo`\n   --> $DIR/E0631.rs:3:11\n    |\n@@ -16,10 +18,12 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/E0631.rs:8:5\n    |\n LL |     bar(|_: isize| {});\n-   |     ^^^ ---------- found signature of `fn(isize) -> _`\n+   |     ^^^ ---------- found signature defined here\n    |     |\n-   |     expected signature of `fn(usize) -> _`\n+   |     expected due to this\n    |\n+   = note: expected closure signature `fn(usize) -> _`\n+              found closure signature `fn(isize) -> _`\n note: required by a bound in `bar`\n   --> $DIR/E0631.rs:4:11\n    |\n@@ -30,13 +34,15 @@ error[E0631]: type mismatch in function arguments\n   --> $DIR/E0631.rs:9:9\n    |\n LL |     fn f(_: u64) {}\n-   |     ------------ found signature of `fn(u64) -> _`\n+   |     ------------ found signature defined here\n ...\n LL |     foo(f);\n-   |     --- ^ expected signature of `fn(usize) -> _`\n+   |     --- ^ expected due to this\n    |     |\n    |     required by a bound introduced by this call\n    |\n+   = note: expected function signature `fn(usize) -> _`\n+              found function signature `fn(u64) -> _`\n note: required by a bound in `foo`\n   --> $DIR/E0631.rs:3:11\n    |\n@@ -47,13 +53,15 @@ error[E0631]: type mismatch in function arguments\n   --> $DIR/E0631.rs:10:9\n    |\n LL |     fn f(_: u64) {}\n-   |     ------------ found signature of `fn(u64) -> _`\n+   |     ------------ found signature defined here\n ...\n LL |     bar(f);\n-   |     --- ^ expected signature of `fn(usize) -> _`\n+   |     --- ^ expected due to this\n    |     |\n    |     required by a bound introduced by this call\n    |\n+   = note: expected function signature `fn(usize) -> _`\n+              found function signature `fn(u64) -> _`\n note: required by a bound in `bar`\n   --> $DIR/E0631.rs:4:11\n    |"}, {"sha": "71469bfec2d393a5419740b319aef973033d2c56", "filename": "src/test/ui/mismatched_types/closure-arg-type-mismatch.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/eb378d2015d10b6b99955512ab005665f417e014/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb378d2015d10b6b99955512ab005665f417e014/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr?ref=eb378d2015d10b6b99955512ab005665f417e014", "patch": "@@ -2,10 +2,12 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/closure-arg-type-mismatch.rs:3:14\n    |\n LL |     a.iter().map(|_: (u32, u32)| 45);\n-   |              ^^^ --------------- found signature of `fn((u32, u32)) -> _`\n+   |              ^^^ --------------- found signature defined here\n    |              |\n-   |              expected signature of `fn(&(u32, u32)) -> _`\n+   |              expected due to this\n    |\n+   = note: expected closure signature `fn(&(u32, u32)) -> _`\n+              found closure signature `fn((u32, u32)) -> _`\n note: required by a bound in `map`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n@@ -16,10 +18,12 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/closure-arg-type-mismatch.rs:4:14\n    |\n LL |     a.iter().map(|_: &(u16, u16)| 45);\n-   |              ^^^ ---------------- found signature of `for<'r> fn(&'r (u16, u16)) -> _`\n+   |              ^^^ ---------------- found signature defined here\n    |              |\n-   |              expected signature of `fn(&(u32, u32)) -> _`\n+   |              expected due to this\n    |\n+   = note: expected closure signature `fn(&(u32, u32)) -> _`\n+              found closure signature `for<'r> fn(&'r (u16, u16)) -> _`\n note: required by a bound in `map`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n@@ -30,10 +34,12 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/closure-arg-type-mismatch.rs:5:14\n    |\n LL |     a.iter().map(|_: (u16, u16)| 45);\n-   |              ^^^ --------------- found signature of `fn((u16, u16)) -> _`\n+   |              ^^^ --------------- found signature defined here\n    |              |\n-   |              expected signature of `fn(&(u32, u32)) -> _`\n+   |              expected due to this\n    |\n+   = note: expected closure signature `fn(&(u32, u32)) -> _`\n+              found closure signature `fn((u16, u16)) -> _`\n note: required by a bound in `map`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |"}, {"sha": "eec6d83fe223cf7a81502eb51f416e08eae6a372", "filename": "src/test/ui/mismatched_types/fn-variance-1.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eb378d2015d10b6b99955512ab005665f417e014/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb378d2015d10b6b99955512ab005665f417e014/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.stderr?ref=eb378d2015d10b6b99955512ab005665f417e014", "patch": "@@ -2,13 +2,15 @@ error[E0631]: type mismatch in function arguments\n   --> $DIR/fn-variance-1.rs:11:15\n    |\n LL | fn takes_mut(x: &mut isize) { }\n-   | --------------------------- found signature of `for<'r> fn(&'r mut isize) -> _`\n+   | --------------------------- found signature defined here\n ...\n LL |     apply(&3, takes_mut);\n-   |     -----     ^^^^^^^^^ expected signature of `fn(&{integer}) -> _`\n+   |     -----     ^^^^^^^^^ expected due to this\n    |     |\n    |     required by a bound introduced by this call\n    |\n+   = note: expected function signature `fn(&{integer}) -> _`\n+              found function signature `for<'r> fn(&'r mut isize) -> _`\n note: required by a bound in `apply`\n   --> $DIR/fn-variance-1.rs:5:37\n    |\n@@ -19,13 +21,15 @@ error[E0631]: type mismatch in function arguments\n   --> $DIR/fn-variance-1.rs:15:19\n    |\n LL | fn takes_imm(x: &isize) { }\n-   | ----------------------- found signature of `for<'r> fn(&'r isize) -> _`\n+   | ----------------------- found signature defined here\n ...\n LL |     apply(&mut 3, takes_imm);\n-   |     -----         ^^^^^^^^^ expected signature of `fn(&mut {integer}) -> _`\n+   |     -----         ^^^^^^^^^ expected due to this\n    |     |\n    |     required by a bound introduced by this call\n    |\n+   = note: expected function signature `fn(&mut {integer}) -> _`\n+              found function signature `for<'r> fn(&'r isize) -> _`\n note: required by a bound in `apply`\n   --> $DIR/fn-variance-1.rs:5:37\n    |"}, {"sha": "b11ea97d160be12b8866bf99577bc1f06ca2efec", "filename": "src/test/ui/mismatched_types/issue-36053-2.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb378d2015d10b6b99955512ab005665f417e014/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb378d2015d10b6b99955512ab005665f417e014/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr?ref=eb378d2015d10b6b99955512ab005665f417e014", "patch": "@@ -2,10 +2,12 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/issue-36053-2.rs:7:32\n    |\n LL |     once::<&str>(\"str\").fuse().filter(|a: &str| true).count();\n-   |                                ^^^^^^ --------- found signature of `for<'r> fn(&'r str) -> _`\n+   |                                ^^^^^^ --------- found signature defined here\n    |                                |\n-   |                                expected signature of `for<'r> fn(&'r &str) -> _`\n+   |                                expected due to this\n    |\n+   = note: expected closure signature `for<'r> fn(&'r &str) -> _`\n+              found closure signature `for<'r> fn(&'r str) -> _`\n note: required by a bound in `filter`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |"}, {"sha": "8dbe3472ea893d9d03b7f783a0001ec8333d120e", "filename": "src/test/ui/mismatched_types/unboxed-closures-vtable-mismatch.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/eb378d2015d10b6b99955512ab005665f417e014/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb378d2015d10b6b99955512ab005665f417e014/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.rs?ref=eb378d2015d10b6b99955512ab005665f417e014", "patch": "@@ -2,20 +2,21 @@\n \n use std::ops::FnMut;\n \n-fn to_fn_mut<A,F:FnMut<A>>(f: F) -> F { f }\n+fn to_fn_mut<A, F: FnMut<A>>(f: F) -> F { f }\n \n-fn call_it<F:FnMut(isize,isize)->isize>(y: isize, mut f: F) -> isize {\n-//~^ NOTE required by this bound in `call_it`\n-//~| NOTE required by a bound in `call_it`\n+fn call_it<F: FnMut(isize, isize) -> isize>(y: isize, mut f: F) -> isize {\n+    //~^ NOTE required by this bound in `call_it`\n+    //~| NOTE required by a bound in `call_it`\n     f(2, y)\n }\n \n pub fn main() {\n     let f = to_fn_mut(|x: usize, y: isize| -> isize { (x as isize) + y });\n-    //~^ NOTE found signature of `fn(usize, isize) -> _`\n+    //~^ NOTE found signature defined here\n     let z = call_it(3, f);\n     //~^ ERROR type mismatch\n-    //~| NOTE expected signature of `fn(isize, isize) -> _`\n+    //~| NOTE expected due to this\n+    //~| NOTE expected closure signature `fn(isize, _) -> _`\n     //~| NOTE required by a bound introduced by this call\n     println!(\"{}\", z);\n }"}, {"sha": "54b2200652746fb2d0bc3afe0d5074f01362f3bc", "filename": "src/test/ui/mismatched_types/unboxed-closures-vtable-mismatch.stderr", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eb378d2015d10b6b99955512ab005665f417e014/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb378d2015d10b6b99955512ab005665f417e014/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr?ref=eb378d2015d10b6b99955512ab005665f417e014", "patch": "@@ -2,18 +2,20 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/unboxed-closures-vtable-mismatch.rs:16:24\n    |\n LL |     let f = to_fn_mut(|x: usize, y: isize| -> isize { (x as isize) + y });\n-   |                       ----------------------------- found signature of `fn(usize, isize) -> _`\n+   |                       ----------------------------- found signature defined here\n LL |\n LL |     let z = call_it(3, f);\n-   |             -------    ^ expected signature of `fn(isize, isize) -> _`\n+   |             -------    ^ expected due to this\n    |             |\n    |             required by a bound introduced by this call\n    |\n+   = note: expected closure signature `fn(isize, _) -> _`\n+              found closure signature `fn(usize, _) -> _`\n note: required by a bound in `call_it`\n-  --> $DIR/unboxed-closures-vtable-mismatch.rs:7:14\n+  --> $DIR/unboxed-closures-vtable-mismatch.rs:7:15\n    |\n-LL | fn call_it<F:FnMut(isize,isize)->isize>(y: isize, mut f: F) -> isize {\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `call_it`\n+LL | fn call_it<F: FnMut(isize, isize) -> isize>(y: isize, mut f: F) -> isize {\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `call_it`\n \n error: aborting due to previous error\n "}]}