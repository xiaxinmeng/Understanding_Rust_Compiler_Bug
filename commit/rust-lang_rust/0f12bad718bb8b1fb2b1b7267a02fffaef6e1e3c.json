{"sha": "0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmMTJiYWQ3MThiYjhiMWZiMmIxYjcyNjdhMDJmZmZhZWY2ZTFlM2M=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-13T00:42:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-13T00:42:19Z"}, "message": "Auto merge of #66156 - Mark-Simulacrum:stage0-step, r=pietroalbini\n\nStage0 step\n\nr? @pietroalbini", "tree": {"sha": "74dbcc9dbde2f0d8bcbe1aead405c51193bf3b33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74dbcc9dbde2f0d8bcbe1aead405c51193bf3b33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c", "html_url": "https://github.com/rust-lang/rust/commit/0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a333eed7fc0c903df9d6befcfb40af02148bf255", "url": "https://api.github.com/repos/rust-lang/rust/commits/a333eed7fc0c903df9d6befcfb40af02148bf255", "html_url": "https://github.com/rust-lang/rust/commit/a333eed7fc0c903df9d6befcfb40af02148bf255"}, {"sha": "994d83666defc0cc6b0fde305d164fbf23433114", "url": "https://api.github.com/repos/rust-lang/rust/commits/994d83666defc0cc6b0fde305d164fbf23433114", "html_url": "https://github.com/rust-lang/rust/commit/994d83666defc0cc6b0fde305d164fbf23433114"}], "stats": {"total": 244, "additions": 51, "deletions": 193}, "files": [{"sha": "2edcef203ad2680ad8546d30c84c9e0c9cf47a49", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c", "patch": "@@ -886,7 +886,18 @@ impl<'a> Builder<'a> {\n         // things still build right, please do!\n         match mode {\n             Mode::Std => metadata.push_str(\"std\"),\n-            _ => {},\n+            // When we're building rustc tools, they're built with a search path\n+            // that contains things built during the rustc build. For example,\n+            // bitflags is built during the rustc build, and is a dependency of\n+            // rustdoc as well. We're building rustdoc in a different target\n+            // directory, though, which means that Cargo will rebuild the\n+            // dependency. When we go on to build rustdoc, we'll look for\n+            // bitflags, and find two different copies: one built during the\n+            // rustc step and one that we just built. This isn't always a\n+            // problem, somehow -- not really clear why -- but we know that this\n+            // fixes things.\n+            Mode::ToolRustc => metadata.push_str(\"tool-rustc\"),\n+            _ => {}\n         }\n         cargo.env(\"__CARGO_DEFAULT_LIB_METADATA\", &metadata);\n "}, {"sha": "b17ee098ff62ad2863ec60a01eb21e972539c800", "filename": "src/bootstrap/channel.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c/src%2Fbootstrap%2Fchannel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c/src%2Fbootstrap%2Fchannel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fchannel.rs?ref=0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c", "patch": "@@ -13,7 +13,7 @@ use build_helper::output;\n use crate::Build;\n \n // The version number\n-pub const CFG_RELEASE_NUM: &str = \"1.40.0\";\n+pub const CFG_RELEASE_NUM: &str = \"1.41.0\";\n \n pub struct GitInfo {\n     inner: Option<Info>,"}, {"sha": "901c1ee33cda42082903f8c96249c040aa8a3216", "filename": "src/libcore/array/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c/src%2Flibcore%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c/src%2Flibcore%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Farray%2Fmod.rs?ref=0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c", "patch": "@@ -14,10 +14,8 @@ use crate::hash::{Hash, self};\n use crate::marker::Unsize;\n use crate::slice::{Iter, IterMut};\n \n-#[cfg(not(bootstrap))]\n mod iter;\n \n-#[cfg(not(bootstrap))]\n #[unstable(feature = \"array_value_iter\", issue = \"65798\")]\n pub use iter::IntoIter;\n "}, {"sha": "e16c3840260454bd765fb0d63b257351bc17a2ce", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c", "patch": "@@ -557,7 +557,6 @@ impl<T> From<T> for T {\n ///\n /// [#64715]: https://github.com/rust-lang/rust/issues/64715\n #[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\n-#[cfg(not(bootstrap))]\n #[rustc_reservation_impl=\"permitting this impl would forbid us from adding \\\n `impl<T> From<!> for T` later; see rust-lang/rust#64715 for details\"]\n impl<T> From<!> for T {"}, {"sha": "6de20418bb2b83377b5820761e3702cf946c742f", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c", "patch": "@@ -697,7 +697,6 @@ extern \"rust-intrinsic\" {\n     pub fn panic_if_uninhabited<T>();\n \n     /// Gets a reference to a static `Location` indicating where it was called.\n-    #[cfg(not(bootstrap))]\n     pub fn caller_location() -> &'static crate::panic::Location<'static>;\n \n     /// Creates a value initialized to zero.\n@@ -1346,7 +1345,6 @@ extern \"rust-intrinsic\" {\n     pub fn nontemporal_store<T>(ptr: *mut T, val: T);\n \n     /// See documentation of `<*const T>::offset_from` for details.\n-    #[cfg(not(bootstrap))]\n     pub fn ptr_offset_from<T>(ptr: *const T, base: *const T) -> isize;\n \n     /// Internal hook used by Miri to implement unwinding."}, {"sha": "ea5536eb50caec8eaf6290c22fd18625e97ccb7a", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c", "patch": "@@ -121,7 +121,6 @@\n #![feature(hexagon_target_feature)]\n #![feature(const_int_conversion)]\n #![feature(const_transmute)]\n-#![cfg_attr(bootstrap, feature(non_exhaustive))]\n #![feature(structural_match)]\n #![feature(abi_unadjusted)]\n #![feature(adx_target_feature)]"}, {"sha": "d6b6e26436f31d3af34acc46a3f2729b547023ee", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c", "patch": "@@ -1,30 +1,6 @@\n /// Panics the current thread.\n ///\n /// For details, see `std::macros`.\n-#[cfg(bootstrap)]\n-#[macro_export]\n-#[allow_internal_unstable(core_panic, panic_internals)]\n-#[stable(feature = \"core\", since = \"1.6.0\")]\n-macro_rules! panic {\n-    () => (\n-        $crate::panic!(\"explicit panic\")\n-    );\n-    ($msg:expr) => ({\n-        $crate::panicking::panic(&($msg, $crate::file!(), $crate::line!(), $crate::column!()))\n-    });\n-    ($msg:expr,) => (\n-        $crate::panic!($msg)\n-    );\n-    ($fmt:expr, $($arg:tt)+) => ({\n-        $crate::panicking::panic_fmt($crate::format_args!($fmt, $($arg)+),\n-                                     &($crate::file!(), $crate::line!(), $crate::column!()))\n-    });\n-}\n-\n-/// Panics the current thread.\n-///\n-/// For details, see `std::macros`.\n-#[cfg(not(bootstrap))]\n #[macro_export]\n #[allow_internal_unstable(core_panic,\n     // FIXME(anp, eddyb) `core_intrinsics` is used here to allow calling"}, {"sha": "2d2fc4102e190a4918af1b376048cea86e73f9be", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c", "patch": "@@ -146,7 +146,6 @@ pub trait Unsize<T: ?Sized> {\n ///\n /// [RFC1445]: https://github.com/rust-lang/rfcs/blob/master/text/1445-restrict-constants-in-patterns.md\n /// [issue 63438]: https://github.com/rust-lang/rust/issues/63438\n-#[cfg(not(bootstrap))]\n #[unstable(feature = \"structural_match\", issue = \"31434\")]\n #[rustc_on_unimplemented(message=\"the type `{Self}` does not `#[derive(PartialEq)]`\")]\n #[lang = \"structural_peq\"]\n@@ -197,7 +196,6 @@ pub trait StructuralPartialEq {\n /// As a hack to work around this, we use two separate traits injected by each\n /// of the two derives (`#[derive(PartialEq)]` and `#[derive(Eq)]`) and check\n /// that both of them are present as part of structural-match checking.\n-#[cfg(not(bootstrap))]\n #[unstable(feature = \"structural_match\", issue = \"31434\")]\n #[rustc_on_unimplemented(message=\"the type `{Self}` does not `#[derive(Eq)]`\")]\n #[lang = \"structural_teq\"]\n@@ -517,11 +515,9 @@ macro_rules! impls{\n             }\n         }\n \n-        #[cfg(not(bootstrap))]\n         #[unstable(feature = \"structural_match\", issue = \"31434\")]\n         impl<T: ?Sized> StructuralPartialEq for $t<T> { }\n \n-        #[cfg(not(bootstrap))]\n         #[unstable(feature = \"structural_match\", issue = \"31434\")]\n         impl<T: ?Sized> StructuralEq for $t<T> { }\n         )"}, {"sha": "4f4652084a80133e7e9d79f76995131cbbe29760", "filename": "src/libcore/ops/try.rs", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c/src%2Flibcore%2Fops%2Ftry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c/src%2Flibcore%2Fops%2Ftry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Ftry.rs?ref=0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c", "patch": "@@ -5,20 +5,7 @@\n /// extracting those success or failure values from an existing instance and\n /// creating a new instance from a success or failure value.\n #[unstable(feature = \"try_trait\", issue = \"42327\")]\n-#[cfg_attr(bootstrap, rustc_on_unimplemented(\n-   on(all(\n-       any(from_method=\"from_error\", from_method=\"from_ok\"),\n-       from_desugaring=\"QuestionMark\"),\n-      message=\"the `?` operator can only be used in a \\\n-               function that returns `Result` or `Option` \\\n-               (or another type that implements `{Try}`)\",\n-      label=\"cannot use the `?` operator in a function that returns `{Self}`\"),\n-   on(all(from_method=\"into_result\", from_desugaring=\"QuestionMark\"),\n-      message=\"the `?` operator can only be applied to values \\\n-               that implement `{Try}`\",\n-      label=\"the `?` operator cannot be applied to type `{Self}`\")\n-))]\n-#[cfg_attr(not(bootstrap), rustc_on_unimplemented(\n+#[rustc_on_unimplemented(\n on(all(\n any(from_method=\"from_error\", from_method=\"from_ok\"),\n from_desugaring=\"QuestionMark\"),\n@@ -30,7 +17,7 @@ on(all(from_method=\"into_result\", from_desugaring=\"QuestionMark\"),\n message=\"the `?` operator can only be applied to values \\\n                that implement `{Try}`\",\n label=\"the `?` operator cannot be applied to type `{Self}`\")\n-))]\n+)]\n #[doc(alias = \"?\")]\n pub trait Try {\n     /// The type of this value when viewed as successful."}, {"sha": "cdd38449a1be277d80bb1e02d21b8c7f0261aba9", "filename": "src/libcore/panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c/src%2Flibcore%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c/src%2Flibcore%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanic.rs?ref=0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c", "patch": "@@ -167,7 +167,7 @@ impl fmt::Display for PanicInfo<'_> {\n ///\n /// panic!(\"Normal panic\");\n /// ```\n-#[cfg_attr(not(bootstrap), lang = \"panic_location\")]\n+#[lang = \"panic_location\"]\n #[derive(Debug)]\n #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n pub struct Location<'a> {"}, {"sha": "8a6ab99c65a3c4d5cb9689869857ac6a5fcfe8f5", "filename": "src/libcore/panicking.rs", "status": "modified", "additions": 0, "deletions": 59, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c/src%2Flibcore%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c/src%2Flibcore%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanicking.rs?ref=0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c", "patch": "@@ -31,28 +31,6 @@\n use crate::fmt;\n use crate::panic::{Location, PanicInfo};\n \n-#[cfg(bootstrap)]\n-#[cold]\n-// never inline unless panic_immediate_abort to avoid code\n-// bloat at the call sites as much as possible\n-#[cfg_attr(not(feature=\"panic_immediate_abort\"),inline(never))]\n-#[lang = \"panic\"]\n-pub fn panic(expr_file_line_col: &(&'static str, &'static str, u32, u32)) -> ! {\n-    if cfg!(feature = \"panic_immediate_abort\") {\n-        unsafe { super::intrinsics::abort() }\n-    }\n-\n-    // Use Arguments::new_v1 instead of format_args!(\"{}\", expr) to potentially\n-    // reduce size overhead. The format_args! macro uses str's Display trait to\n-    // write expr, which calls Formatter::pad, which must accommodate string\n-    // truncation and padding (even though none is used here). Using\n-    // Arguments::new_v1 may allow the compiler to omit Formatter::pad from the\n-    // output binary, saving up to a few kilobytes.\n-    let (expr, file, line, col) = *expr_file_line_col;\n-    panic_fmt(fmt::Arguments::new_v1(&[expr], &[]), &(file, line, col))\n-}\n-\n-#[cfg(not(bootstrap))]\n #[cold]\n // never inline unless panic_immediate_abort to avoid code\n // bloat at the call sites as much as possible\n@@ -72,21 +50,6 @@ pub fn panic(expr: &str, location: &Location<'_>) -> ! {\n     panic_fmt(fmt::Arguments::new_v1(&[expr], &[]), location)\n }\n \n-#[cfg(bootstrap)]\n-#[cold]\n-#[cfg_attr(not(feature=\"panic_immediate_abort\"),inline(never))]\n-#[lang = \"panic_bounds_check\"]\n-fn panic_bounds_check(file_line_col: &(&'static str, u32, u32),\n-                     index: usize, len: usize) -> ! {\n-    if cfg!(feature = \"panic_immediate_abort\") {\n-        unsafe { super::intrinsics::abort() }\n-    }\n-\n-    panic_fmt(format_args!(\"index out of bounds: the len is {} but the index is {}\",\n-                           len, index), file_line_col)\n-}\n-\n-#[cfg(not(bootstrap))]\n #[cold]\n #[cfg_attr(not(feature=\"panic_immediate_abort\"),inline(never))]\n #[lang = \"panic_bounds_check\"]\n@@ -101,28 +64,6 @@ fn panic_bounds_check(location: &Location<'_>, index: usize, len: usize) -> ! {\n     )\n }\n \n-#[cfg(bootstrap)]\n-#[cold]\n-#[cfg_attr(not(feature=\"panic_immediate_abort\"),inline(never))]\n-#[cfg_attr(    feature=\"panic_immediate_abort\" ,inline)]\n-pub fn panic_fmt(fmt: fmt::Arguments<'_>, file_line_col: &(&'static str, u32, u32)) -> ! {\n-    if cfg!(feature = \"panic_immediate_abort\") {\n-        unsafe { super::intrinsics::abort() }\n-    }\n-\n-    // NOTE This function never crosses the FFI boundary; it's a Rust-to-Rust call\n-    extern \"Rust\" {\n-        #[lang = \"panic_impl\"]\n-        fn panic_impl(pi: &PanicInfo<'_>) -> !;\n-    }\n-\n-    let (file, line, col) = *file_line_col;\n-    let location = Location::internal_constructor(file, line, col);\n-    let pi = PanicInfo::internal_constructor(Some(&fmt), &location);\n-    unsafe { panic_impl(&pi) }\n-}\n-\n-#[cfg(not(bootstrap))]\n #[cold]\n #[cfg_attr(not(feature=\"panic_immediate_abort\"),inline(never))]\n #[cfg_attr(    feature=\"panic_immediate_abort\" ,inline)]"}, {"sha": "39d56958f5de03167dc25d14e19897cff778c42d", "filename": "src/libcore/ptr/mod.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c/src%2Flibcore%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c/src%2Flibcore%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fmod.rs?ref=0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c", "patch": "@@ -1301,7 +1301,6 @@ impl<T: ?Sized> *const T {\n     /// }\n     /// ```\n     #[unstable(feature = \"ptr_offset_from\", issue = \"41079\")]\n-    #[cfg(not(bootstrap))]\n     #[rustc_const_unstable(feature = \"const_ptr_offset_from\")]\n     #[inline]\n     pub const unsafe fn offset_from(self, origin: *const T) -> isize where T: Sized {\n@@ -1313,21 +1312,6 @@ impl<T: ?Sized> *const T {\n         intrinsics::ptr_offset_from(self, origin)\n     }\n \n-    #[unstable(feature = \"ptr_offset_from\", issue = \"41079\")]\n-    #[inline]\n-    #[cfg(bootstrap)]\n-    /// bootstrap\n-    pub unsafe fn offset_from(self, origin: *const T) -> isize where T: Sized {\n-        let pointee_size = mem::size_of::<T>();\n-        assert!(0 < pointee_size && pointee_size <= isize::max_value() as usize);\n-\n-        // This is the same sequence that Clang emits for pointer subtraction.\n-        // It can be neither `nsw` nor `nuw` because the input is treated as\n-        // unsigned but then the output is treated as signed, so neither works.\n-        let d = isize::wrapping_sub(self as _, origin as _);\n-        intrinsics::exact_div(d, pointee_size as _)\n-    }\n-\n     /// Calculates the distance between two pointers. The returned value is in\n     /// units of T: the distance in bytes is divided by `mem::size_of::<T>()`.\n     ///"}, {"sha": "820c1edf930d77c959ebf406cf3814f776a3cdc8", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 29, "deletions": 35, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c", "patch": "@@ -162,14 +162,14 @@ pub fn spin_loop_hint() {\n /// This type has the same in-memory representation as a [`bool`].\n ///\n /// [`bool`]: ../../../std/primitive.bool.html\n-#[cfg(any(bootstrap, target_has_atomic_load_store = \"8\"))]\n+#[cfg(target_has_atomic_load_store = \"8\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[repr(C, align(1))]\n pub struct AtomicBool {\n     v: UnsafeCell<u8>,\n }\n \n-#[cfg(any(bootstrap, target_has_atomic_load_store = \"8\"))]\n+#[cfg(target_has_atomic_load_store = \"8\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Default for AtomicBool {\n     /// Creates an `AtomicBool` initialized to `false`.\n@@ -179,14 +179,14 @@ impl Default for AtomicBool {\n }\n \n // Send is implicitly implemented for AtomicBool.\n-#[cfg(any(bootstrap, target_has_atomic_load_store = \"8\"))]\n+#[cfg(target_has_atomic_load_store = \"8\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl Sync for AtomicBool {}\n \n /// A raw pointer type which can be safely shared between threads.\n ///\n /// This type has the same in-memory representation as a `*mut T`.\n-#[cfg(any(bootstrap, target_has_atomic_load_store = \"ptr\"))]\n+#[cfg(target_has_atomic_load_store = \"ptr\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[cfg_attr(target_pointer_width = \"16\", repr(C, align(2)))]\n #[cfg_attr(target_pointer_width = \"32\", repr(C, align(4)))]\n@@ -195,7 +195,7 @@ pub struct AtomicPtr<T> {\n     p: UnsafeCell<*mut T>,\n }\n \n-#[cfg(any(bootstrap, target_has_atomic_load_store = \"ptr\"))]\n+#[cfg(target_has_atomic_load_store = \"ptr\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Default for AtomicPtr<T> {\n     /// Creates a null `AtomicPtr<T>`.\n@@ -204,10 +204,10 @@ impl<T> Default for AtomicPtr<T> {\n     }\n }\n \n-#[cfg(any(bootstrap, target_has_atomic_load_store = \"ptr\"))]\n+#[cfg(target_has_atomic_load_store = \"ptr\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl<T> Send for AtomicPtr<T> {}\n-#[cfg(any(bootstrap, target_has_atomic_load_store = \"ptr\"))]\n+#[cfg(target_has_atomic_load_store = \"ptr\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl<T> Sync for AtomicPtr<T> {}\n \n@@ -308,7 +308,7 @@ pub enum Ordering {\n /// An [`AtomicBool`] initialized to `false`.\n ///\n /// [`AtomicBool`]: struct.AtomicBool.html\n-#[cfg(any(bootstrap, target_has_atomic_load_store = \"8\"))]\n+#[cfg(target_has_atomic_load_store = \"8\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_deprecated(\n     since = \"1.34.0\",\n@@ -317,7 +317,7 @@ pub enum Ordering {\n )]\n pub const ATOMIC_BOOL_INIT: AtomicBool = AtomicBool::new(false);\n \n-#[cfg(any(bootstrap, target_has_atomic_load_store = \"8\"))]\n+#[cfg(target_has_atomic_load_store = \"8\")]\n impl AtomicBool {\n     /// Creates a new `AtomicBool`.\n     ///\n@@ -804,7 +804,7 @@ impl AtomicBool {\n     }\n }\n \n-#[cfg(any(bootstrap, target_has_atomic_load_store = \"ptr\"))]\n+#[cfg(target_has_atomic_load_store = \"ptr\")]\n impl<T> AtomicPtr<T> {\n     /// Creates a new `AtomicPtr`.\n     ///\n@@ -1114,7 +1114,7 @@ impl<T> AtomicPtr<T> {\n     }\n }\n \n-#[cfg(any(bootstrap, target_has_atomic_load_store = \"8\"))]\n+#[cfg(target_has_atomic_load_store = \"8\")]\n #[stable(feature = \"atomic_bool_from\", since = \"1.24.0\")]\n impl From<bool> for AtomicBool {\n     /// Converts a `bool` into an `AtomicBool`.\n@@ -1130,14 +1130,14 @@ impl From<bool> for AtomicBool {\n     fn from(b: bool) -> Self { Self::new(b) }\n }\n \n-#[cfg(any(bootstrap, target_has_atomic_load_store = \"ptr\"))]\n+#[cfg(target_has_atomic_load_store = \"ptr\")]\n #[stable(feature = \"atomic_from\", since = \"1.23.0\")]\n impl<T> From<*mut T> for AtomicPtr<T> {\n     #[inline]\n     fn from(p: *mut T) -> Self { Self::new(p) }\n }\n \n-#[cfg(any(bootstrap, target_has_atomic_load_store = \"8\"))]\n+#[cfg(target_has_atomic_load_store = \"8\")]\n macro_rules! atomic_int {\n     ($cfg_cas:meta,\n      $stable:meta,\n@@ -1895,7 +1895,7 @@ assert_eq!(min_foo, 12);\n     }\n }\n \n-#[cfg(any(bootstrap, target_has_atomic_load_store = \"8\"))]\n+#[cfg(target_has_atomic_load_store = \"8\")]\n atomic_int! {\n     cfg(target_has_atomic = \"8\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n@@ -1912,7 +1912,7 @@ atomic_int! {\n     \"AtomicI8::new(0)\",\n     i8 AtomicI8 ATOMIC_I8_INIT\n }\n-#[cfg(any(bootstrap, target_has_atomic_load_store = \"8\"))]\n+#[cfg(target_has_atomic_load_store = \"8\")]\n atomic_int! {\n     cfg(target_has_atomic = \"8\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n@@ -1929,7 +1929,7 @@ atomic_int! {\n     \"AtomicU8::new(0)\",\n     u8 AtomicU8 ATOMIC_U8_INIT\n }\n-#[cfg(any(bootstrap, target_has_atomic_load_store = \"16\"))]\n+#[cfg(target_has_atomic_load_store = \"16\")]\n atomic_int! {\n     cfg(target_has_atomic = \"16\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n@@ -1946,7 +1946,7 @@ atomic_int! {\n     \"AtomicI16::new(0)\",\n     i16 AtomicI16 ATOMIC_I16_INIT\n }\n-#[cfg(any(bootstrap, target_has_atomic_load_store = \"16\"))]\n+#[cfg(target_has_atomic_load_store = \"16\")]\n atomic_int! {\n     cfg(target_has_atomic = \"16\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n@@ -1963,7 +1963,7 @@ atomic_int! {\n     \"AtomicU16::new(0)\",\n     u16 AtomicU16 ATOMIC_U16_INIT\n }\n-#[cfg(any(bootstrap, target_has_atomic_load_store = \"32\"))]\n+#[cfg(target_has_atomic_load_store = \"32\")]\n atomic_int! {\n     cfg(target_has_atomic = \"32\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n@@ -1980,7 +1980,7 @@ atomic_int! {\n     \"AtomicI32::new(0)\",\n     i32 AtomicI32 ATOMIC_I32_INIT\n }\n-#[cfg(any(bootstrap, target_has_atomic_load_store = \"32\"))]\n+#[cfg(target_has_atomic_load_store = \"32\")]\n atomic_int! {\n     cfg(target_has_atomic = \"32\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n@@ -1997,10 +1997,7 @@ atomic_int! {\n     \"AtomicU32::new(0)\",\n     u32 AtomicU32 ATOMIC_U32_INIT\n }\n-#[cfg(any(\n-    all(bootstrap, target_has_atomic = \"64\"),\n-    target_has_atomic_load_store = \"64\"\n-))]\n+#[cfg(target_has_atomic_load_store = \"64\")]\n atomic_int! {\n     cfg(target_has_atomic = \"64\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n@@ -2017,10 +2014,7 @@ atomic_int! {\n     \"AtomicI64::new(0)\",\n     i64 AtomicI64 ATOMIC_I64_INIT\n }\n-#[cfg(any(\n-    all(bootstrap, target_has_atomic = \"64\"),\n-    target_has_atomic_load_store = \"64\"\n-))]\n+#[cfg(target_has_atomic_load_store = \"64\")]\n atomic_int! {\n     cfg(target_has_atomic = \"64\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n@@ -2071,22 +2065,22 @@ atomic_int! {\n     \"AtomicU128::new(0)\",\n     u128 AtomicU128 ATOMIC_U128_INIT\n }\n-#[cfg(any(bootstrap, target_has_atomic_load_store = \"ptr\"))]\n+#[cfg(target_has_atomic_load_store = \"ptr\")]\n #[cfg(target_pointer_width = \"16\")]\n macro_rules! ptr_width {\n     () => { 2 }\n }\n-#[cfg(any(bootstrap, target_has_atomic_load_store = \"ptr\"))]\n+#[cfg(target_has_atomic_load_store = \"ptr\")]\n #[cfg(target_pointer_width = \"32\")]\n macro_rules! ptr_width {\n     () => { 4 }\n }\n-#[cfg(any(bootstrap, target_has_atomic_load_store = \"ptr\"))]\n+#[cfg(target_has_atomic_load_store = \"ptr\")]\n #[cfg(target_pointer_width = \"64\")]\n macro_rules! ptr_width {\n     () => { 8 }\n }\n-#[cfg(any(bootstrap, target_has_atomic_load_store = \"ptr\"))]\n+#[cfg(target_has_atomic_load_store = \"ptr\")]\n atomic_int!{\n     cfg(target_has_atomic = \"ptr\"),\n     stable(feature = \"rust1\", since = \"1.0.0\"),\n@@ -2103,7 +2097,7 @@ atomic_int!{\n     \"AtomicIsize::new(0)\",\n     isize AtomicIsize ATOMIC_ISIZE_INIT\n }\n-#[cfg(any(bootstrap, target_has_atomic_load_store = \"ptr\"))]\n+#[cfg(target_has_atomic_load_store = \"ptr\")]\n atomic_int!{\n     cfg(target_has_atomic = \"ptr\"),\n     stable(feature = \"rust1\", since = \"1.0.0\"),\n@@ -2530,23 +2524,23 @@ pub fn compiler_fence(order: Ordering) {\n }\n \n \n-#[cfg(any(bootstrap, target_has_atomic_load_store = \"8\"))]\n+#[cfg(target_has_atomic_load_store = \"8\")]\n #[stable(feature = \"atomic_debug\", since = \"1.3.0\")]\n impl fmt::Debug for AtomicBool {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Debug::fmt(&self.load(Ordering::SeqCst), f)\n     }\n }\n \n-#[cfg(any(bootstrap, target_has_atomic_load_store = \"ptr\"))]\n+#[cfg(target_has_atomic_load_store = \"ptr\")]\n #[stable(feature = \"atomic_debug\", since = \"1.3.0\")]\n impl<T> fmt::Debug for AtomicPtr<T> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Debug::fmt(&self.load(Ordering::SeqCst), f)\n     }\n }\n \n-#[cfg(any(bootstrap, target_has_atomic_load_store = \"ptr\"))]\n+#[cfg(target_has_atomic_load_store = \"ptr\")]\n #[stable(feature = \"atomic_pointer\", since = \"1.24.0\")]\n impl<T> fmt::Pointer for AtomicPtr<T> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {"}, {"sha": "ff9a215d339e3c39db32005c9119862e12f70182", "filename": "src/libpanic_unwind/seh.rs", "status": "modified", "additions": 3, "deletions": 23, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c/src%2Flibpanic_unwind%2Fseh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c/src%2Flibpanic_unwind%2Fseh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fseh.rs?ref=0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c", "patch": "@@ -98,9 +98,6 @@ use libc::{c_int, c_uint, c_void};\n mod imp {\n     pub type ptr_t = *mut u8;\n \n-    #[cfg(bootstrap)]\n-    pub const NAME1: [u8; 7] = [b'.', b'P', b'A', b'_', b'K', 0, 0];\n-\n     macro_rules! ptr {\n         (0) => (core::ptr::null_mut());\n         ($e:expr) => ($e as *mut u8);\n@@ -112,9 +109,6 @@ mod imp {\n mod imp {\n     pub type ptr_t = u32;\n \n-    #[cfg(bootstrap)]\n-    pub const NAME1: [u8; 7] = [b'.', b'P', b'E', b'A', b'_', b'K', 0];\n-\n     extern \"C\" {\n         pub static __ImageBase: u8;\n     }\n@@ -161,17 +155,11 @@ pub struct _PMD {\n pub struct _TypeDescriptor {\n     pub pVFTable: *const u8,\n     pub spare: *mut u8,\n-    #[cfg(bootstrap)]\n-    pub name: [u8; 7],\n-    #[cfg(not(bootstrap))]\n     pub name: [u8; 11],\n }\n \n // Note that we intentionally ignore name mangling rules here: we don't want C++\n // to be able to catch Rust panics by simply declaring a `struct rust_panic`.\n-#[cfg(bootstrap)]\n-use imp::NAME1 as TYPE_NAME;\n-#[cfg(not(bootstrap))]\n const TYPE_NAME: [u8; 11] = *b\"rust_panic\\0\";\n \n static mut THROW_INFO: _ThrowInfo = _ThrowInfo {\n@@ -194,9 +182,6 @@ static mut CATCHABLE_TYPE: _CatchableType = _CatchableType {\n         pdisp: -1,\n         vdisp: 0,\n     },\n-    #[cfg(bootstrap)]\n-    sizeOrOffset: mem::size_of::<*mut u64>() as c_int,\n-    #[cfg(not(bootstrap))]\n     sizeOrOffset: mem::size_of::<[u64; 2]>() as c_int,\n     copy_function: ptr!(0),\n };\n@@ -218,8 +203,7 @@ extern \"C\" {\n // an argument to the C++ personality function.\n //\n // Again, I'm not entirely sure what this is describing, it just seems to work.\n-#[cfg_attr(bootstrap, lang = \"msvc_try_filter\")]\n-#[cfg_attr(not(any(test, bootstrap)), lang = \"eh_catch_typeinfo\")]\n+#[cfg_attr(not(test), lang = \"eh_catch_typeinfo\")]\n static mut TYPE_DESCRIPTOR: _TypeDescriptor = _TypeDescriptor {\n     pVFTable: unsafe { &TYPE_INFO_VTABLE } as *const _ as *const _,\n     spare: core::ptr::null_mut(),\n@@ -238,12 +222,8 @@ pub unsafe fn panic(data: Box<dyn Any + Send>) -> u32 {\n     // exception (constructed above).\n     let ptrs = mem::transmute::<_, raw::TraitObject>(data);\n     let mut ptrs = [ptrs.data as u64, ptrs.vtable as u64];\n-    let mut ptrs_ptr = ptrs.as_mut_ptr();\n-    let throw_ptr = if cfg!(bootstrap) {\n-        &mut ptrs_ptr as *mut _ as *mut _\n-    } else {\n-        ptrs_ptr as *mut _\n-    };\n+    let ptrs_ptr = ptrs.as_mut_ptr();\n+    let throw_ptr = ptrs_ptr as *mut _;\n \n     // This... may seems surprising, and justifiably so. On 32-bit MSVC the\n     // pointers between these structure are just that, pointers. On 64-bit MSVC,"}, {"sha": "87cd8fcb14385490c9bf560cd79d928e10f63ba5", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c", "patch": "@@ -25,7 +25,6 @@\n #![feature(extern_types)]\n #![feature(in_band_lifetimes)]\n #![feature(optin_builtin_traits)]\n-#![cfg_attr(bootstrap, feature(non_exhaustive))]\n #![feature(rustc_attrs)]\n #![feature(specialization)]\n "}, {"sha": "0ea33d725f1e71ff1fbe120c1d936e29a2ef5807", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c", "patch": "@@ -41,7 +41,6 @@\n #![feature(overlapping_marker_traits)]\n #![feature(extern_types)]\n #![feature(nll)]\n-#![cfg_attr(bootstrap, feature(non_exhaustive))]\n #![feature(optin_builtin_traits)]\n #![feature(option_expect_none)]\n #![feature(range_is_empty)]\n@@ -57,7 +56,6 @@\n #![feature(test)]\n #![feature(in_band_lifetimes)]\n #![feature(crate_visibility_modifier)]\n-#![cfg_attr(bootstrap, feature(proc_macro_hygiene))]\n #![feature(log_syntax)]\n #![feature(associated_type_bounds)]\n #![feature(rustc_attrs)]"}, {"sha": "72d998de9c4b71ad7242dddd93ecc25587416cbb", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c", "patch": "@@ -283,7 +283,6 @@\n #![feature(needs_panic_runtime)]\n #![feature(never_type)]\n #![feature(nll)]\n-#![cfg_attr(bootstrap, feature(non_exhaustive))]\n #![cfg_attr(bootstrap, feature(on_unimplemented))]\n #![feature(optin_builtin_traits)]\n #![feature(panic_info_message)]"}, {"sha": "e36496d4c1c0d6df9944335c86e1bd36eafe44c9", "filename": "src/libstd/panic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c/src%2Flibstd%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c/src%2Flibstd%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanic.rs?ref=0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c", "patch": "@@ -13,7 +13,6 @@ use crate::panicking;\n use crate::ptr::{Unique, NonNull};\n use crate::rc::Rc;\n use crate::sync::{Arc, Mutex, RwLock};\n-#[cfg(not(bootstrap))]\n use crate::sync::atomic;\n use crate::task::{Context, Poll};\n use crate::thread::Result;"}, {"sha": "a762d8af49a21149d10c03e7bfc7dae70c7081d4", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c", "patch": "@@ -9,10 +9,8 @@\n #![feature(const_fn)]\n #![feature(crate_visibility_modifier)]\n #![feature(nll)]\n-#![cfg_attr(bootstrap, feature(non_exhaustive))]\n #![feature(optin_builtin_traits)]\n #![feature(rustc_attrs)]\n-#![cfg_attr(bootstrap, feature(proc_macro_hygiene))]\n #![feature(specialization)]\n #![feature(step_trait)]\n "}, {"sha": "3c8489015838188b5b59b4bc60dca02f5424bb08", "filename": "src/stage0.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c/src%2Fstage0.txt", "raw_url": "https://github.com/rust-lang/rust/raw/0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c/src%2Fstage0.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstage0.txt?ref=0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c", "patch": "@@ -12,7 +12,7 @@\n # source tarball for a stable release you'll likely see `1.x.0` for rustc and\n # `0.x.0` for Cargo where they were released on `date`.\n \n-date: 2019-09-25\n+date: 2019-11-06\n rustc: beta\n cargo: beta\n "}, {"sha": "b115539b4af3b2e61cd140fd5877a026113a11ab", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c", "patch": "@@ -568,6 +568,7 @@ pub fn test_opts(config: &Config) -> test::TestOpts {\n         skip: vec![],\n         list: false,\n         options: test::Options::new(),\n+        time_options: None,\n     }\n }\n \n@@ -703,6 +704,7 @@ pub fn make_test(config: &Config, testpaths: &TestPaths) -> Vec<test::TestDescAn\n                     ignore,\n                     should_panic,\n                     allow_fail: false,\n+                    test_type: test::TestType::Unknown,\n                 },\n                 testfn: make_test_closure(config, early_props.ignore, testpaths, revision),\n             }"}]}