{"sha": "38e0ae590caab982a4305da58a0a62385c2dd880", "node_id": "C_kwDOAAsO6NoAKDM4ZTBhZTU5MGNhYWI5ODJhNDMwNWRhNThhMGE2MjM4NWMyZGQ4ODA", "commit": {"author": {"name": "Grisha Vartanyan", "email": "grisha@vartanyan.com", "date": "2022-03-23T21:13:55Z"}, "committer": {"name": "Grisha Vartanyan", "email": "grisha@vartanyan.com", "date": "2022-03-23T21:13:55Z"}, "message": "Reduce max hash in raw strings from u16 to u8", "tree": {"sha": "2636e3ecd95141cf5eae54852ec62cfe56aa1130", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2636e3ecd95141cf5eae54852ec62cfe56aa1130"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38e0ae590caab982a4305da58a0a62385c2dd880", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38e0ae590caab982a4305da58a0a62385c2dd880", "html_url": "https://github.com/rust-lang/rust/commit/38e0ae590caab982a4305da58a0a62385c2dd880", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38e0ae590caab982a4305da58a0a62385c2dd880/comments", "author": {"login": "GrishaVar", "id": 33952698, "node_id": "MDQ6VXNlcjMzOTUyNjk4", "avatar_url": "https://avatars.githubusercontent.com/u/33952698?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GrishaVar", "html_url": "https://github.com/GrishaVar", "followers_url": "https://api.github.com/users/GrishaVar/followers", "following_url": "https://api.github.com/users/GrishaVar/following{/other_user}", "gists_url": "https://api.github.com/users/GrishaVar/gists{/gist_id}", "starred_url": "https://api.github.com/users/GrishaVar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GrishaVar/subscriptions", "organizations_url": "https://api.github.com/users/GrishaVar/orgs", "repos_url": "https://api.github.com/users/GrishaVar/repos", "events_url": "https://api.github.com/users/GrishaVar/events{/privacy}", "received_events_url": "https://api.github.com/users/GrishaVar/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GrishaVar", "id": 33952698, "node_id": "MDQ6VXNlcjMzOTUyNjk4", "avatar_url": "https://avatars.githubusercontent.com/u/33952698?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GrishaVar", "html_url": "https://github.com/GrishaVar", "followers_url": "https://api.github.com/users/GrishaVar/followers", "following_url": "https://api.github.com/users/GrishaVar/following{/other_user}", "gists_url": "https://api.github.com/users/GrishaVar/gists{/gist_id}", "starred_url": "https://api.github.com/users/GrishaVar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GrishaVar/subscriptions", "organizations_url": "https://api.github.com/users/GrishaVar/orgs", "repos_url": "https://api.github.com/users/GrishaVar/repos", "events_url": "https://api.github.com/users/GrishaVar/events{/privacy}", "received_events_url": "https://api.github.com/users/GrishaVar/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "547369d3d881a9eb1de0d3e368f9a59aa7c648b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/547369d3d881a9eb1de0d3e368f9a59aa7c648b0", "html_url": "https://github.com/rust-lang/rust/commit/547369d3d881a9eb1de0d3e368f9a59aa7c648b0"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "a41e0374f410ae969dacb26a62afc50fb6d73d09", "filename": "compiler/rustc_lexer/src/lib.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/38e0ae590caab982a4305da58a0a62385c2dd880/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e0ae590caab982a4305da58a0a62385c2dd880/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2Fsrc%2Flib.rs?ref=38e0ae590caab982a4305da58a0a62385c2dd880", "patch": "@@ -161,15 +161,15 @@ pub enum LiteralKind {\n     /// \"b\"abc\"\", \"b\"abc\"\n     ByteStr { terminated: bool },\n     /// \"r\"abc\"\", \"r#\"abc\"#\", \"r####\"ab\"###\"c\"####\", \"r#\"a\"\n-    RawStr { n_hashes: u16, err: Option<RawStrError> },\n+    RawStr { n_hashes: u8, err: Option<RawStrError> },\n     /// \"br\"abc\"\", \"br#\"abc\"#\", \"br####\"ab\"###\"c\"####\", \"br#\"a\"\n-    RawByteStr { n_hashes: u16, err: Option<RawStrError> },\n+    RawByteStr { n_hashes: u8, err: Option<RawStrError> },\n }\n \n /// Error produced validating a raw string. Represents cases like:\n /// - `r##~\"abcde\"##`: `InvalidStarter`\n /// - `r###\"abcde\"##`: `NoTerminator { expected: 3, found: 2, possible_terminator_offset: Some(11)`\n-/// - Too many `#`s (>65535): `TooManyDelimiters`\n+/// - Too many `#`s (>255): `TooManyDelimiters`\n // perf note: It doesn't matter that this makes `Token` 36 bytes bigger. See #77629\n #[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]\n pub enum RawStrError {\n@@ -178,7 +178,7 @@ pub enum RawStrError {\n     /// The string was never terminated. `possible_terminator_offset` is the number of characters after `r` or `br` where they\n     /// may have intended to terminate it.\n     NoTerminator { expected: usize, found: usize, possible_terminator_offset: Option<usize> },\n-    /// More than 65535 `#`s exist.\n+    /// More than 255 `#`s exist.\n     TooManyDelimiters { found: usize },\n }\n \n@@ -698,12 +698,12 @@ impl Cursor<'_> {\n     }\n \n     /// Eats the double-quoted string and returns `n_hashes` and an error if encountered.\n-    fn raw_double_quoted_string(&mut self, prefix_len: usize) -> (u16, Option<RawStrError>) {\n+    fn raw_double_quoted_string(&mut self, prefix_len: usize) -> (u8, Option<RawStrError>) {\n         // Wrap the actual function to handle the error with too many hashes.\n         // This way, it eats the whole raw string.\n         let (n_hashes, err) = self.raw_string_unvalidated(prefix_len);\n-        // Only up to 65535 `#`s are allowed in raw strings\n-        match u16::try_from(n_hashes) {\n+        // Only up to 255 `#`s are allowed in raw strings\n+        match u8::try_from(n_hashes) {\n             Ok(num) => (num, err),\n             // We lie about the number of hashes here :P\n             Err(_) => (0, Some(RawStrError::TooManyDelimiters { found: n_hashes })),"}, {"sha": "07daee06f0f860d911db92bf847e686960bab832", "filename": "compiler/rustc_lexer/src/tests.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/38e0ae590caab982a4305da58a0a62385c2dd880/compiler%2Frustc_lexer%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e0ae590caab982a4305da58a0a62385c2dd880/compiler%2Frustc_lexer%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2Fsrc%2Ftests.rs?ref=38e0ae590caab982a4305da58a0a62385c2dd880", "patch": "@@ -2,7 +2,7 @@ use super::*;\n \n use expect_test::{expect, Expect};\n \n-fn check_raw_str(s: &str, expected_hashes: u16, expected_err: Option<RawStrError>) {\n+fn check_raw_str(s: &str, expected_hashes: u8, expected_err: Option<RawStrError>) {\n     let s = &format!(\"r{}\", s);\n     let mut cursor = Cursor::new(s);\n     cursor.bump();\n@@ -68,13 +68,13 @@ fn test_unterminated_no_pound() {\n \n #[test]\n fn test_too_many_hashes() {\n-    let max_count = u16::MAX;\n+    let max_count = u8::MAX;\n     let mut hashes: String = \"#\".repeat(max_count.into());\n \n-    // Valid number of hashes (65535 = 2^16 - 1), but invalid string.\n+    // Valid number of hashes (255 = 2^8 - 1 = u8::MAX), but invalid string.\n     check_raw_str(&hashes, max_count, Some(RawStrError::InvalidStarter { bad_char: '\\u{0}' }));\n \n-    // One more hash sign (65536 = 2^16) becomes too many.\n+    // One more hash sign (256 = 2^8) becomes too many.\n     hashes.push('#');\n     check_raw_str(\n         &hashes,"}]}