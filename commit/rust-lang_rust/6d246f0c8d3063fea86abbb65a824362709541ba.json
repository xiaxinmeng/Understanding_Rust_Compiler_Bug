{"sha": "6d246f0c8d3063fea86abbb65a824362709541ba", "node_id": "C_kwDOAAsO6NoAKDZkMjQ2ZjBjOGQzMDYzZmVhODZhYmJiNjVhODI0MzYyNzA5NTQxYmE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-26T16:30:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-26T16:30:42Z"}, "message": "Auto merge of #91253 - matthiaskrgr:rollup-dnlcjmr, r=matthiaskrgr\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #91169 (Change cg_ssa's get_param to borrow the builder mutably)\n - #91176 (If the thread does not get the lock in the short term, yield the CPU)\n - #91212 (Fix ICE due to out-of-bounds statement index when reporting borrowck error)\n - #91225 (Fix invalid scrollbar display on source code page)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "89367aa9a510b1c1dec9bd2151cf00c9182222f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89367aa9a510b1c1dec9bd2151cf00c9182222f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d246f0c8d3063fea86abbb65a824362709541ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d246f0c8d3063fea86abbb65a824362709541ba", "html_url": "https://github.com/rust-lang/rust/commit/6d246f0c8d3063fea86abbb65a824362709541ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d246f0c8d3063fea86abbb65a824362709541ba/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "454cc5fb86be180b3ec1138b6f2b480fbf3f1388", "url": "https://api.github.com/repos/rust-lang/rust/commits/454cc5fb86be180b3ec1138b6f2b480fbf3f1388", "html_url": "https://github.com/rust-lang/rust/commit/454cc5fb86be180b3ec1138b6f2b480fbf3f1388"}, {"sha": "a9710deebcfc0d24ea7b3510c9afa6afb40d2ae1", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9710deebcfc0d24ea7b3510c9afa6afb40d2ae1", "html_url": "https://github.com/rust-lang/rust/commit/a9710deebcfc0d24ea7b3510c9afa6afb40d2ae1"}], "stats": {"total": 72, "additions": 58, "deletions": 14}, "files": [{"sha": "a0f8aabbe0e72351b8d34471f3266a572a6191ca", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6d246f0c8d3063fea86abbb65a824362709541ba/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d246f0c8d3063fea86abbb65a824362709541ba/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=6d246f0c8d3063fea86abbb65a824362709541ba", "patch": "@@ -447,16 +447,20 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                                 // check if the RHS is from desugaring\n                                 let opt_assignment_rhs_span =\n                                     self.body.find_assignments(local).first().map(|&location| {\n-                                        let stmt = &self.body[location.block].statements\n-                                            [location.statement_index];\n-                                        match stmt.kind {\n-                                            mir::StatementKind::Assign(box (\n-                                                _,\n-                                                mir::Rvalue::Use(mir::Operand::Copy(place)),\n-                                            )) => {\n-                                                self.body.local_decls[place.local].source_info.span\n-                                            }\n-                                            _ => self.body.source_info(location).span,\n+                                        if let Some(mir::Statement {\n+                                            source_info: _,\n+                                            kind:\n+                                                mir::StatementKind::Assign(box (\n+                                                    _,\n+                                                    mir::Rvalue::Use(mir::Operand::Copy(place)),\n+                                                )),\n+                                        }) = self.body[location.block]\n+                                            .statements\n+                                            .get(location.statement_index)\n+                                        {\n+                                            self.body.local_decls[place.local].source_info.span\n+                                        } else {\n+                                            self.body.source_info(location).span\n                                         }\n                                     });\n                                 match opt_assignment_rhs_span.and_then(|s| s.desugaring_kind()) {"}, {"sha": "2bbb199c8998285a06d689753102c0be6a0bb4e6", "filename": "compiler/rustc_codegen_gcc/src/abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d246f0c8d3063fea86abbb65a824362709541ba/compiler%2Frustc_codegen_gcc%2Fsrc%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d246f0c8d3063fea86abbb65a824362709541ba/compiler%2Frustc_codegen_gcc%2Fsrc%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fabi.rs?ref=6d246f0c8d3063fea86abbb65a824362709541ba", "patch": "@@ -14,7 +14,7 @@ impl<'a, 'gcc, 'tcx> AbiBuilderMethods<'tcx> for Builder<'a, 'gcc, 'tcx> {\n         // TODO(antoyo)\n     }\n \n-    fn get_param(&self, index: usize) -> Self::Value {\n+    fn get_param(&mut self, index: usize) -> Self::Value {\n         self.cx.current_func.borrow().expect(\"current func\")\n             .get_param(index as i32)\n             .to_rvalue()"}, {"sha": "07adfff0901a1963af2da03b8349c7dc72785088", "filename": "compiler/rustc_codegen_llvm/src/abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d246f0c8d3063fea86abbb65a824362709541ba/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d246f0c8d3063fea86abbb65a824362709541ba/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs?ref=6d246f0c8d3063fea86abbb65a824362709541ba", "patch": "@@ -607,7 +607,7 @@ impl AbiBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n         fn_abi.apply_attrs_callsite(self, callsite)\n     }\n \n-    fn get_param(&self, index: usize) -> Self::Value {\n+    fn get_param(&mut self, index: usize) -> Self::Value {\n         llvm::get_param(self.llfn(), index as c_uint)\n     }\n }"}, {"sha": "a00d78daf4dcbd0c58a2429a4917c0a2e088aca1", "filename": "compiler/rustc_codegen_ssa/src/traits/abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d246f0c8d3063fea86abbb65a824362709541ba/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d246f0c8d3063fea86abbb65a824362709541ba/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fabi.rs?ref=6d246f0c8d3063fea86abbb65a824362709541ba", "patch": "@@ -4,5 +4,5 @@ use rustc_target::abi::call::FnAbi;\n \n pub trait AbiBuilderMethods<'tcx>: BackendTypes {\n     fn apply_attrs_callsite(&mut self, fn_abi: &FnAbi<'tcx, Ty<'tcx>>, callsite: Self::Value);\n-    fn get_param(&self, index: usize) -> Self::Value;\n+    fn get_param(&mut self, index: usize) -> Self::Value;\n }"}, {"sha": "415cbba101c67061fd197808fc1463b344f829f0", "filename": "library/std/src/sys/hermit/mutex.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6d246f0c8d3063fea86abbb65a824362709541ba/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d246f0c8d3063fea86abbb65a824362709541ba/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmutex.rs?ref=6d246f0c8d3063fea86abbb65a824362709541ba", "patch": "@@ -46,8 +46,17 @@ impl<T> Spinlock<T> {\n     #[inline]\n     fn obtain_lock(&self) {\n         let ticket = self.queue.fetch_add(1, Ordering::SeqCst) + 1;\n+        let mut counter: u16 = 0;\n         while self.dequeue.load(Ordering::SeqCst) != ticket {\n-            hint::spin_loop();\n+            counter += 1;\n+            if counter < 100 {\n+                hint::spin_loop();\n+            } else {\n+                counter = 0;\n+                unsafe {\n+                    abi::yield_now();\n+                }\n+            }\n         }\n     }\n "}, {"sha": "bfad51069513149b0b24dcfdadc4bdeb86b9b66b", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d246f0c8d3063fea86abbb65a824362709541ba/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/6d246f0c8d3063fea86abbb65a824362709541ba/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=6d246f0c8d3063fea86abbb65a824362709541ba", "patch": "@@ -305,6 +305,10 @@ nav.sub {\n \toverflow-y: scroll;\n }\n \n+.rustdoc.source .sidebar {\n+\toverflow-y: auto;\n+}\n+\n /* Improve the scrollbar display on firefox */\n * {\n \tscrollbar-width: initial;"}, {"sha": "3b1fbf4b69902828b695ec08fca20bdc6bac12c7", "filename": "src/test/ui/borrowck/issue-91206.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6d246f0c8d3063fea86abbb65a824362709541ba/src%2Ftest%2Fui%2Fborrowck%2Fissue-91206.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d246f0c8d3063fea86abbb65a824362709541ba/src%2Ftest%2Fui%2Fborrowck%2Fissue-91206.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-91206.rs?ref=6d246f0c8d3063fea86abbb65a824362709541ba", "patch": "@@ -0,0 +1,15 @@\n+struct TestClient;\n+\n+impl TestClient {\n+    fn get_inner_ref(&self) -> &Vec<usize> {\n+        todo!()\n+    }\n+}\n+\n+fn main() {\n+    let client = TestClient;\n+    let inner = client.get_inner_ref();\n+    //~^ HELP consider changing this to be a mutable reference\n+    inner.clear();\n+    //~^ ERROR cannot borrow `*inner` as mutable, as it is behind a `&` reference [E0596]\n+}"}, {"sha": "535d247452a59a21d47474e0cffa653735fdf02d", "filename": "src/test/ui/borrowck/issue-91206.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6d246f0c8d3063fea86abbb65a824362709541ba/src%2Ftest%2Fui%2Fborrowck%2Fissue-91206.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d246f0c8d3063fea86abbb65a824362709541ba/src%2Ftest%2Fui%2Fborrowck%2Fissue-91206.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-91206.stderr?ref=6d246f0c8d3063fea86abbb65a824362709541ba", "patch": "@@ -0,0 +1,12 @@\n+error[E0596]: cannot borrow `*inner` as mutable, as it is behind a `&` reference\n+  --> $DIR/issue-91206.rs:13:5\n+   |\n+LL |     let inner = client.get_inner_ref();\n+   |         ----- help: consider changing this to be a mutable reference: `&mut Vec<usize>`\n+LL |\n+LL |     inner.clear();\n+   |     ^^^^^^^^^^^^^ `inner` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0596`."}]}