{"sha": "051abae802318d8401c9b5e6baa9ffc863f7f8eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1MWFiYWU4MDIzMThkODQwMWM5YjVlNmJhYTlmZmM4NjNmN2Y4ZWI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-06-14T06:35:54Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-06-17T01:15:48Z"}, "message": "alloc: Refactor OOM into a common routine", "tree": {"sha": "e07e148b118dee75de8f65b8ba3254a64ff516b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e07e148b118dee75de8f65b8ba3254a64ff516b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/051abae802318d8401c9b5e6baa9ffc863f7f8eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/051abae802318d8401c9b5e6baa9ffc863f7f8eb", "html_url": "https://github.com/rust-lang/rust/commit/051abae802318d8401c9b5e6baa9ffc863f7f8eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/051abae802318d8401c9b5e6baa9ffc863f7f8eb/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cd932f94e76046500e180bc941e36a2a17cade8", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cd932f94e76046500e180bc941e36a2a17cade8", "html_url": "https://github.com/rust-lang/rust/commit/4cd932f94e76046500e180bc941e36a2a17cade8"}], "stats": {"total": 20, "additions": 12, "deletions": 8}, "files": [{"sha": "79a616b9555aa1a80c8688c424ab29ea3ccb6226", "filename": "src/liballoc/heap.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/051abae802318d8401c9b5e6baa9ffc863f7f8eb/src%2Fliballoc%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/051abae802318d8401c9b5e6baa9ffc863f7f8eb/src%2Fliballoc%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fheap.rs?ref=051abae802318d8401c9b5e6baa9ffc863f7f8eb", "patch": "@@ -130,7 +130,6 @@ unsafe fn closure_exchange_malloc(drop_glue: fn(*mut u8), size: uint,\n \n #[cfg(jemalloc)]\n mod imp {\n-    use core::intrinsics::abort;\n     use core::option::{None, Option};\n     use core::ptr::{RawPtr, mut_null, null};\n     use core::num::Bitwise;\n@@ -163,7 +162,7 @@ mod imp {\n     pub unsafe fn allocate(size: uint, align: uint) -> *mut u8 {\n         let ptr = je_mallocx(size as size_t, mallocx_align(align)) as *mut u8;\n         if ptr.is_null() {\n-            abort()\n+            ::oom()\n         }\n         ptr\n     }\n@@ -174,7 +173,7 @@ mod imp {\n         let ptr = je_rallocx(ptr as *mut c_void, size as size_t,\n                              mallocx_align(align)) as *mut u8;\n         if ptr.is_null() {\n-            abort()\n+            ::oom()\n         }\n         ptr\n     }"}, {"sha": "a947378f768c938f9b2014b506044f4a2556de23", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/051abae802318d8401c9b5e6baa9ffc863f7f8eb/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/051abae802318d8401c9b5e6baa9ffc863f7f8eb/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=051abae802318d8401c9b5e6baa9ffc863f7f8eb", "patch": "@@ -94,6 +94,14 @@ pub mod owned;\n pub mod arc;\n pub mod rc;\n \n+/// Common OOM routine used by liballoc\n+fn oom() -> ! {\n+    // FIXME(#14674): This really needs to do something other than just abort\n+    //                here, but any printing done must be *guaranteed* to not\n+    //                allocate.\n+    unsafe { core::intrinsics::abort() }\n+}\n+\n // FIXME(#14344): When linking liballoc with libstd, this library will be linked\n //                as an rlib (it only exists as an rlib). It turns out that an\n //                optimized standard library doesn't actually use *any* symbols"}, {"sha": "25938ba0d54482c205b677b99633e841dc79535b", "filename": "src/liballoc/libc_heap.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/051abae802318d8401c9b5e6baa9ffc863f7f8eb/src%2Fliballoc%2Flibc_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/051abae802318d8401c9b5e6baa9ffc863f7f8eb/src%2Fliballoc%2Flibc_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flibc_heap.rs?ref=051abae802318d8401c9b5e6baa9ffc863f7f8eb", "patch": "@@ -13,7 +13,6 @@\n \n use libc::{c_void, size_t, free, malloc, realloc};\n use core::ptr::{RawPtr, mut_null};\n-use core::intrinsics::abort;\n \n /// A wrapper around libc::malloc, aborting on out-of-memory\n #[inline]\n@@ -25,8 +24,7 @@ pub unsafe fn malloc_raw(size: uint) -> *mut u8 {\n     } else {\n         let p = malloc(size as size_t);\n         if p.is_null() {\n-            // we need a non-allocating way to print an error here\n-            abort();\n+            ::oom();\n         }\n         p as *mut u8\n     }\n@@ -43,8 +41,7 @@ pub unsafe fn realloc_raw(ptr: *mut u8, size: uint) -> *mut u8 {\n     } else {\n         let p = realloc(ptr as *mut c_void, size as size_t);\n         if p.is_null() {\n-            // we need a non-allocating way to print an error here\n-            abort();\n+            ::oom();\n         }\n         p as *mut u8\n     }"}]}