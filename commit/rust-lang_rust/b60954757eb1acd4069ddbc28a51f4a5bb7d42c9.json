{"sha": "b60954757eb1acd4069ddbc28a51f4a5bb7d42c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2MDk1NDc1N2ViMWFjZDQwNjlkZGJjMjhhNTFmNGE1YmI3ZDQyYzk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-09-14T08:23:10Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-09-14T08:23:51Z"}, "message": "std: always depend on backtrace, but only enable its features on demand", "tree": {"sha": "deda1c332a73e20c428ae5ea31893ff7d110136c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/deda1c332a73e20c428ae5ea31893ff7d110136c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b60954757eb1acd4069ddbc28a51f4a5bb7d42c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b60954757eb1acd4069ddbc28a51f4a5bb7d42c9", "html_url": "https://github.com/rust-lang/rust/commit/b60954757eb1acd4069ddbc28a51f4a5bb7d42c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b60954757eb1acd4069ddbc28a51f4a5bb7d42c9/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3287a65fc05028dce3b521765f4643384ebc4346", "url": "https://api.github.com/repos/rust-lang/rust/commits/3287a65fc05028dce3b521765f4643384ebc4346", "html_url": "https://github.com/rust-lang/rust/commit/3287a65fc05028dce3b521765f4643384ebc4346"}], "stats": {"total": 44, "additions": 23, "deletions": 21}, "files": [{"sha": "e4f1b773a690d5c936e61f8733fab80e609839ad", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b60954757eb1acd4069ddbc28a51f4a5bb7d42c9/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b60954757eb1acd4069ddbc28a51f4a5bb7d42c9/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=b60954757eb1acd4069ddbc28a51f4a5bb7d42c9", "patch": "@@ -490,7 +490,7 @@ impl Build {\n             features.push_str(\" llvm-libunwind\");\n         }\n         if self.config.backtrace {\n-            features.push_str(\" backtrace\");\n+            features.push_str(\" backtrace_support\");\n         }\n         if self.config.profiler {\n             features.push_str(\" profiler\");"}, {"sha": "2da73c11907de6a79b6d80332c7fcbb5b600b0b6", "filename": "src/libstd/Cargo.toml", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b60954757eb1acd4069ddbc28a51f4a5bb7d42c9/src%2Flibstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b60954757eb1acd4069ddbc28a51f4a5bb7d42c9/src%2Flibstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2FCargo.toml?ref=b60954757eb1acd4069ddbc28a51f4a5bb7d42c9", "patch": "@@ -27,15 +27,8 @@ hashbrown = { version = \"0.5.0\", features = ['rustc-dep-of-std'] }\n \n [dependencies.backtrace]\n version = \"0.3.37\"\n-default-features = false # don't use coresymbolication on OSX\n-features = [\n-  \"rustc-dep-of-std\", # enable build support for integrating into libstd\n-  \"dbghelp\",          # backtrace/symbolize on MSVC\n-  \"libbacktrace\",     # symbolize on most platforms\n-  \"libunwind\",        # backtrace on most platforms\n-  \"dladdr\",           # symbolize on platforms w/o libbacktrace\n-]\n-optional = true\n+default-features = false # without the libstd `backtrace` feature, stub out everything\n+features = [ \"rustc-dep-of-std\" ] # enable build support for integrating into libstd\n \n [dev-dependencies]\n rand = \"0.7\"\n@@ -65,6 +58,13 @@ cc = \"1.0\"\n [features]\n default = [\"std_detect_file_io\", \"std_detect_dlsym_getauxval\"]\n \n+backtrace_support = [\n+  \"backtrace/dbghelp\",          # backtrace/symbolize on MSVC\n+  \"backtrace/libbacktrace\",     # symbolize on most platforms\n+  \"backtrace/libunwind\",        # backtrace on most platforms\n+  \"backtrace/dladdr\",           # symbolize on platforms w/o libbacktrace\n+]\n+\n panic-unwind = [\"panic_unwind\"]\n profiler = [\"profiler_builtins\"]\n compiler-builtins-c = [\"alloc/compiler-builtins-c\"]"}, {"sha": "3209332eeb622ce96de9eaa15987b0dbb173ea23", "filename": "src/libstd/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b60954757eb1acd4069ddbc28a51f4a5bb7d42c9/src%2Flibstd%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b60954757eb1acd4069ddbc28a51f4a5bb7d42c9/src%2Flibstd%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbuild.rs?ref=b60954757eb1acd4069ddbc28a51f4a5bb7d42c9", "patch": "@@ -49,7 +49,7 @@ fn main() {\n         println!(\"cargo:rustc-link-lib=zircon\");\n         println!(\"cargo:rustc-link-lib=fdio\");\n     } else if target.contains(\"cloudabi\") {\n-        if cfg!(feature = \"backtrace\") {\n+        if cfg!(feature = \"backtrace_support\") {\n             println!(\"cargo:rustc-link-lib=unwind\");\n         }\n         println!(\"cargo:rustc-link-lib=c\");"}, {"sha": "93a17d6eea54e52257f229b3ea295754d6f126c4", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b60954757eb1acd4069ddbc28a51f4a5bb7d42c9/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b60954757eb1acd4069ddbc28a51f4a5bb7d42c9/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=b60954757eb1acd4069ddbc28a51f4a5bb7d42c9", "patch": "@@ -157,12 +157,12 @@ pub fn take_hook() -> Box<dyn Fn(&PanicInfo<'_>) + 'static + Sync + Send> {\n }\n \n fn default_hook(info: &PanicInfo<'_>) {\n-    #[cfg(feature = \"backtrace\")]\n+    #[cfg(feature = \"backtrace_support\")]\n     use crate::sys_common::{backtrace as backtrace_mod};\n \n     // If this is a double panic, make sure that we print a backtrace\n     // for this panic. Otherwise only print it if logging is enabled.\n-    #[cfg(feature = \"backtrace\")]\n+    #[cfg(feature = \"backtrace_support\")]\n     let log_backtrace = {\n         let panics = update_panic_count(0);\n \n@@ -190,7 +190,7 @@ fn default_hook(info: &PanicInfo<'_>) {\n         let _ = writeln!(err, \"thread '{}' panicked at '{}', {}\",\n                          name, msg, location);\n \n-        #[cfg(feature = \"backtrace\")]\n+        #[cfg(feature = \"backtrace_support\")]\n         {\n             use crate::sync::atomic::{AtomicBool, Ordering};\n "}, {"sha": "f73bd6c6e74fa4e8dcc9b11526dd1aa07f5c014e", "filename": "src/libstd/rt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b60954757eb1acd4069ddbc28a51f4a5bb7d42c9/src%2Flibstd%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b60954757eb1acd4069ddbc28a51f4a5bb7d42c9/src%2Flibstd%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt.rs?ref=b60954757eb1acd4069ddbc28a51f4a5bb7d42c9", "patch": "@@ -44,11 +44,11 @@ fn lang_start_internal(main: &(dyn Fn() -> i32 + Sync + crate::panic::RefUnwindS\n         sys::args::init(argc, argv);\n \n         // Let's run some code!\n-        #[cfg(feature = \"backtrace\")]\n+        #[cfg(feature = \"backtrace_support\")]\n         let exit_code = panic::catch_unwind(|| {\n             sys_common::backtrace::__rust_begin_short_backtrace(move || main())\n         });\n-        #[cfg(not(feature = \"backtrace\"))]\n+        #[cfg(not(feature = \"backtrace_support\"))]\n         let exit_code = panic::catch_unwind(move || main());\n \n         sys_common::cleanup();"}, {"sha": "52890668c35ee0cff904c0c73e2393dc9c458f84", "filename": "src/libstd/sys_common/backtrace.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b60954757eb1acd4069ddbc28a51f4a5bb7d42c9/src%2Flibstd%2Fsys_common%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b60954757eb1acd4069ddbc28a51f4a5bb7d42c9/src%2Flibstd%2Fsys_common%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fbacktrace.rs?ref=b60954757eb1acd4069ddbc28a51f4a5bb7d42c9", "patch": "@@ -7,7 +7,6 @@ use crate::io;\n use crate::borrow::Cow;\n use crate::io::prelude::*;\n use crate::path::{self, Path, PathBuf};\n-use crate::sync::atomic::{self, Ordering};\n use crate::sys::mutex::Mutex;\n \n use backtrace::{BacktraceFmt, BytesOrWideString, PrintFmt};\n@@ -34,6 +33,7 @@ pub fn lock() -> impl Drop {\n }\n \n /// Prints the current backtrace.\n+#[cfg(feature = \"backtrace_support\")]\n pub fn print(w: &mut dyn Write, format: PrintFmt) -> io::Result<()> {\n     // There are issues currently linking libbacktrace into tests, and in\n     // general during libstd's own unit tests we're not testing this path. In\n@@ -129,7 +129,10 @@ where\n \n // For now logging is turned off by default, and this function checks to see\n // whether the magical environment variable is present to see if it's turned on.\n+#[cfg(feature = \"backtrace_support\")]\n pub fn log_enabled() -> Option<PrintFmt> {\n+    use crate::sync::atomic::{self, Ordering};\n+\n     // Setting environment variables for Fuchsia components isn't a standard\n     // or easily supported workflow. For now, always display backtraces.\n     if cfg!(target_os = \"fuchsia\") {"}, {"sha": "cba3eca53862593a653553f325ec4ed460df83de", "filename": "src/libstd/sys_common/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b60954757eb1acd4069ddbc28a51f4a5bb7d42c9/src%2Flibstd%2Fsys_common%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b60954757eb1acd4069ddbc28a51f4a5bb7d42c9/src%2Flibstd%2Fsys_common%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fmod.rs?ref=b60954757eb1acd4069ddbc28a51f4a5bb7d42c9", "patch": "@@ -41,7 +41,6 @@ macro_rules! rtunwrap {\n \n pub mod alloc;\n pub mod at_exit_imp;\n-#[cfg(feature = \"backtrace\")]\n pub mod backtrace;\n pub mod condvar;\n pub mod io;"}, {"sha": "85fd80e16afb3500c5f6cc2c97941b0c74df098e", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b60954757eb1acd4069ddbc28a51f4a5bb7d42c9/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b60954757eb1acd4069ddbc28a51f4a5bb7d42c9/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=b60954757eb1acd4069ddbc28a51f4a5bb7d42c9", "patch": "@@ -465,11 +465,11 @@ impl Builder {\n             }\n \n             thread_info::set(imp::guard::current(), their_thread);\n-            #[cfg(feature = \"backtrace\")]\n+            #[cfg(feature = \"backtrace_support\")]\n             let try_result = panic::catch_unwind(panic::AssertUnwindSafe(|| {\n                 crate::sys_common::backtrace::__rust_begin_short_backtrace(f)\n             }));\n-            #[cfg(not(feature = \"backtrace\"))]\n+            #[cfg(not(feature = \"backtrace_support\"))]\n             let try_result = panic::catch_unwind(panic::AssertUnwindSafe(f));\n             *their_packet.get() = Some(try_result);\n         };"}, {"sha": "f0041bcf67cb0237b82d5988da6456467fff7668", "filename": "src/libtest/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b60954757eb1acd4069ddbc28a51f4a5bb7d42c9/src%2Flibtest%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b60954757eb1acd4069ddbc28a51f4a5bb7d42c9/src%2Flibtest%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2FCargo.toml?ref=b60954757eb1acd4069ddbc28a51f4a5bb7d42c9", "patch": "@@ -23,7 +23,7 @@ proc_macro = { path = \"../libproc_macro\" }\n \n # Forward features to the `std` crate as necessary\n [features]\n-backtrace = [\"std/backtrace\"]\n+backtrace_support = [\"std/backtrace_support\"]\n compiler-builtins-c = [\"std/compiler-builtins-c\"]\n llvm-libunwind = [\"std/llvm-libunwind\"]\n panic-unwind = [\"std/panic_unwind\"]"}]}