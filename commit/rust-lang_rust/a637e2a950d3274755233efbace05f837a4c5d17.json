{"sha": "a637e2a950d3274755233efbace05f837a4c5d17", "node_id": "C_kwDOAAsO6NoAKGE2MzdlMmE5NTBkMzI3NDc1NTIzM2VmYmFjZTA1ZjgzN2E0YzVkMTc", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-18T23:00:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-18T23:00:29Z"}, "message": "Rollup merge of #106917 - compiler-errors:const-closure-foreign, r=tmiasko\n\nEncode const mir for closures if they're const\n\nFixes #106913", "tree": {"sha": "5f23000d57a4f98020b64a677489fa91b41328d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f23000d57a4f98020b64a677489fa91b41328d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a637e2a950d3274755233efbace05f837a4c5d17", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjyHoNCRBK7hj4Ov3rIwAA/qwIAG9om0wRn6AYXtA/oKPUrMOM\ncDsuDoG5YiXh4cV23id/ZR0ch9eLluTztuFAguEV930Fap2TBbJ2M/xGmrJ/eN5T\n+00bSyesyf5UfZs0pE7N1dlzO94spfEwNKqpKDYCrjp6uDrDSQ8uo/m6RV62+5o2\nFgzFLmoMW76X9Jyfn+hX6x7uK9UUq6Y1HaL0CoFkC+ipy9N0N7zoV3EsKbQ64Izu\nznbY/UpYI3PTq02FF6OE+OhLOoERJ488/zhEdi6bgeikCMzqMKvV447NfIQuNsXb\nHQl0HHymzWF2ZSuV3Eo4T6dm7xLq5LO1vkG8/N4+suvAamv47X+RNBVhxclnp5M=\n=8x01\n-----END PGP SIGNATURE-----\n", "payload": "tree 5f23000d57a4f98020b64a677489fa91b41328d0\nparent 685c77305c4109508b52d6642a7d11b9005a0abb\nparent 3a4fdcf86cea75796ed947853ea9544f2d11afff\nauthor Michael Goulet <michael@errs.io> 1674082829 -0500\ncommitter GitHub <noreply@github.com> 1674082829 -0500\n\nRollup merge of #106917 - compiler-errors:const-closure-foreign, r=tmiasko\n\nEncode const mir for closures if they're const\n\nFixes #106913\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a637e2a950d3274755233efbace05f837a4c5d17", "html_url": "https://github.com/rust-lang/rust/commit/a637e2a950d3274755233efbace05f837a4c5d17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a637e2a950d3274755233efbace05f837a4c5d17/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "685c77305c4109508b52d6642a7d11b9005a0abb", "url": "https://api.github.com/repos/rust-lang/rust/commits/685c77305c4109508b52d6642a7d11b9005a0abb", "html_url": "https://github.com/rust-lang/rust/commit/685c77305c4109508b52d6642a7d11b9005a0abb"}, {"sha": "3a4fdcf86cea75796ed947853ea9544f2d11afff", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a4fdcf86cea75796ed947853ea9544f2d11afff", "html_url": "https://github.com/rust-lang/rust/commit/3a4fdcf86cea75796ed947853ea9544f2d11afff"}], "stats": {"total": 29, "additions": 18, "deletions": 11}, "files": [{"sha": "a3d44fa890dd11cde627344d1679715fd5130518", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a637e2a950d3274755233efbace05f837a4c5d17/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a637e2a950d3274755233efbace05f837a4c5d17/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=a637e2a950d3274755233efbace05f837a4c5d17", "patch": "@@ -888,8 +888,8 @@ fn should_encode_mir(tcx: TyCtxt<'_>, def_id: LocalDefId) -> (bool, bool) {\n         | DefKind::AssocConst\n         | DefKind::Static(..)\n         | DefKind::Const => (true, false),\n-        // Full-fledged functions\n-        DefKind::AssocFn | DefKind::Fn => {\n+        // Full-fledged functions + closures\n+        DefKind::AssocFn | DefKind::Fn | DefKind::Closure => {\n             let generics = tcx.generics_of(def_id);\n             let needs_inline = (generics.requires_monomorphization(tcx)\n                 || tcx.codegen_fn_attrs(def_id).requests_inline())\n@@ -900,15 +900,6 @@ fn should_encode_mir(tcx: TyCtxt<'_>, def_id: LocalDefId) -> (bool, bool) {\n             let always_encode_mir = tcx.sess.opts.unstable_opts.always_encode_mir;\n             (is_const_fn, needs_inline || always_encode_mir)\n         }\n-        // Closures can't be const fn.\n-        DefKind::Closure => {\n-            let generics = tcx.generics_of(def_id);\n-            let needs_inline = (generics.requires_monomorphization(tcx)\n-                || tcx.codegen_fn_attrs(def_id).requests_inline())\n-                && tcx.sess.opts.output_types.should_codegen();\n-            let always_encode_mir = tcx.sess.opts.unstable_opts.always_encode_mir;\n-            (false, needs_inline || always_encode_mir)\n-        }\n         // Generators require optimized MIR to compute layout.\n         DefKind::Generator => (false, true),\n         // The others don't have MIR."}, {"sha": "edc7fa81abb4fc97269a88a857308b97548fd895", "filename": "tests/ui/consts/auxiliary/closure-in-foreign-crate.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a637e2a950d3274755233efbace05f837a4c5d17/tests%2Fui%2Fconsts%2Fauxiliary%2Fclosure-in-foreign-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a637e2a950d3274755233efbace05f837a4c5d17/tests%2Fui%2Fconsts%2Fauxiliary%2Fclosure-in-foreign-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fauxiliary%2Fclosure-in-foreign-crate.rs?ref=a637e2a950d3274755233efbace05f837a4c5d17", "patch": "@@ -0,0 +1,8 @@\n+#![crate_type = \"lib\"]\n+#![feature(const_closures, const_trait_impl)]\n+#![allow(incomplete_features)]\n+\n+pub const fn test() {\n+    let cl = const || {};\n+    cl();\n+}"}, {"sha": "fc8f480e706bcd695f0e74057061991266fa672c", "filename": "tests/ui/consts/closure-in-foreign-crate.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a637e2a950d3274755233efbace05f837a4c5d17/tests%2Fui%2Fconsts%2Fclosure-in-foreign-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a637e2a950d3274755233efbace05f837a4c5d17/tests%2Fui%2Fconsts%2Fclosure-in-foreign-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fclosure-in-foreign-crate.rs?ref=a637e2a950d3274755233efbace05f837a4c5d17", "patch": "@@ -0,0 +1,8 @@\n+// aux-build:closure-in-foreign-crate.rs\n+// build-pass\n+\n+extern crate closure_in_foreign_crate;\n+\n+const _: () = closure_in_foreign_crate::test();\n+\n+fn main() {}"}]}