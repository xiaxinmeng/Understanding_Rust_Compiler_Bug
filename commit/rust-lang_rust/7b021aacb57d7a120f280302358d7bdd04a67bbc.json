{"sha": "7b021aacb57d7a120f280302358d7bdd04a67bbc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiMDIxYWFjYjU3ZDdhMTIwZjI4MDMwMjM1OGQ3YmRkMDRhNjdiYmM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-01-28T21:59:20Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-02-11T07:15:29Z"}, "message": "resolve: Reduce scope of `pub_use_of_private_extern_crate` deprecation lint", "tree": {"sha": "12d49109717d4fa8cc92331600ece1479d5f85e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12d49109717d4fa8cc92331600ece1479d5f85e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b021aacb57d7a120f280302358d7bdd04a67bbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b021aacb57d7a120f280302358d7bdd04a67bbc", "html_url": "https://github.com/rust-lang/rust/commit/7b021aacb57d7a120f280302358d7bdd04a67bbc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b021aacb57d7a120f280302358d7bdd04a67bbc/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ce7268bcfc17265bd05e4c08713d170d39618ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ce7268bcfc17265bd05e4c08713d170d39618ad", "html_url": "https://github.com/rust-lang/rust/commit/9ce7268bcfc17265bd05e4c08713d170d39618ad"}], "stats": {"total": 83, "additions": 47, "deletions": 36}, "files": [{"sha": "61f4c00a4ca42fca2d062d5dd50aab703100f75d", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7b021aacb57d7a120f280302358d7bdd04a67bbc/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b021aacb57d7a120f280302358d7bdd04a67bbc/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=7b021aacb57d7a120f280302358d7bdd04a67bbc", "patch": "@@ -156,6 +156,21 @@ impl<'a> NameResolution<'a> {\n     }\n }\n \n+// Reexports of the form `pub use foo as bar;` where `foo` is `extern crate foo;`\n+// are permitted for backward-compatibility under a deprecation lint.\n+fn pub_use_of_private_extern_crate_hack(import: &Import<'_>, binding: &NameBinding<'_>) -> bool {\n+    match (&import.kind, &binding.kind) {\n+        (\n+            ImportKind::Single { .. },\n+            NameBindingKind::Import {\n+                import: Import { kind: ImportKind::ExternCrate { .. }, .. },\n+                ..\n+            },\n+        ) => import.vis.get() == ty::Visibility::Public,\n+        _ => false,\n+    }\n+}\n+\n impl<'a> Resolver<'a> {\n     crate fn resolve_ident_in_module_unadjusted(\n         &mut self,\n@@ -263,10 +278,7 @@ impl<'a> Resolver<'a> {\n                     return Err((Determined, Weak::No));\n                 }\n             }\n-            // `extern crate` are always usable for backwards compatibility, see issue #37020,\n-            // remove this together with `PUB_USE_OF_PRIVATE_EXTERN_CRATE`.\n-            let usable = this.is_accessible_from(binding.vis, parent_scope.module)\n-                || binding.is_extern_crate();\n+            let usable = this.is_accessible_from(binding.vis, parent_scope.module);\n             if usable { Ok(binding) } else { Err((Determined, Weak::No)) }\n         };\n \n@@ -309,10 +321,7 @@ impl<'a> Resolver<'a> {\n                             }\n                         }\n \n-                        if !(self.is_accessible_from(binding.vis, parent_scope.module) ||\n-                       // Remove this together with `PUB_USE_OF_PRIVATE_EXTERN_CRATE`\n-                       (self.last_import_segment && binding.is_extern_crate()))\n-                        {\n+                        if !self.is_accessible_from(binding.vis, parent_scope.module) {\n                             self.privacy_errors.push(PrivacyError {\n                                 ident,\n                                 binding,\n@@ -455,9 +464,8 @@ impl<'a> Resolver<'a> {\n         binding: &'a NameBinding<'a>,\n         import: &'a Import<'a>,\n     ) -> &'a NameBinding<'a> {\n-        let vis = if binding.vis.is_at_least(import.vis.get(), self) ||\n-                     // cf. `PUB_USE_OF_PRIVATE_EXTERN_CRATE`\n-                     !import.is_glob() && binding.is_extern_crate()\n+        let vis = if binding.vis.is_at_least(import.vis.get(), self)\n+            || pub_use_of_private_extern_crate_hack(import, binding)\n         {\n             import.vis.get()\n         } else {\n@@ -1188,7 +1196,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n         // All namespaces must be re-exported with extra visibility for an error to occur.\n         if !any_successful_reexport {\n             let (ns, binding) = reexport_error.unwrap();\n-            if ns == TypeNS && binding.is_extern_crate() {\n+            if pub_use_of_private_extern_crate_hack(import, binding) {\n                 let msg = format!(\n                     \"extern crate `{}` is private, and cannot be \\\n                                    re-exported (error E0365), consider declaring with \\"}, {"sha": "0383ccf7db666492997aa7663df2ab69454b51d9", "filename": "src/test/rustdoc/extern-links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b021aacb57d7a120f280302358d7bdd04a67bbc/src%2Ftest%2Frustdoc%2Fextern-links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b021aacb57d7a120f280302358d7bdd04a67bbc/src%2Ftest%2Frustdoc%2Fextern-links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fextern-links.rs?ref=7b021aacb57d7a120f280302358d7bdd04a67bbc", "patch": "@@ -3,7 +3,7 @@\n \n #![crate_name = \"foo\"]\n \n-extern crate extern_links;\n+pub extern crate extern_links;\n \n // @!has foo/index.html '//a' 'extern_links'\n #[doc(no_inline)]"}, {"sha": "38a520850b6dd44b9e20d9b15671178d418ca987", "filename": "src/test/rustdoc/issue-28927.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b021aacb57d7a120f280302358d7bdd04a67bbc/src%2Ftest%2Frustdoc%2Fissue-28927.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b021aacb57d7a120f280302358d7bdd04a67bbc/src%2Ftest%2Frustdoc%2Fissue-28927.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-28927.rs?ref=7b021aacb57d7a120f280302358d7bdd04a67bbc", "patch": "@@ -2,5 +2,5 @@\n // aux-build:issue-28927-1.rs\n // ignore-cross-compile\n \n-extern crate issue_28927_1 as inner1;\n+pub extern crate issue_28927_1 as inner1;\n pub use inner1 as foo;"}, {"sha": "dd5cd420fa546df0c3d779783d18d04d3f247a09", "filename": "src/test/ui/pub/pub-reexport-priv-extern-crate.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7b021aacb57d7a120f280302358d7bdd04a67bbc/src%2Ftest%2Fui%2Fpub%2Fpub-reexport-priv-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b021aacb57d7a120f280302358d7bdd04a67bbc/src%2Ftest%2Fui%2Fpub%2Fpub-reexport-priv-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-reexport-priv-extern-crate.rs?ref=7b021aacb57d7a120f280302358d7bdd04a67bbc", "patch": "@@ -1,5 +1,3 @@\n-#![allow(unused)]\n-\n extern crate core;\n pub use core as reexported_core; //~ ERROR `core` is private, and cannot be re-exported\n                                  //~^ WARN this was previously accepted\n@@ -9,16 +7,14 @@ mod foo1 {\n }\n \n mod foo2 {\n-    use foo1::core; //~ ERROR `core` is private, and cannot be re-exported\n-                    //~^ WARN this was previously accepted\n+    use foo1::core; //~ ERROR crate import `core` is private\n     pub mod bar {\n         extern crate core;\n     }\n }\n \n mod baz {\n-    pub use foo2::bar::core; //~ ERROR `core` is private, and cannot be re-exported\n-                             //~^ WARN this was previously accepted\n+    pub use foo2::bar::core; //~ ERROR crate import `core` is private\n }\n \n fn main() {}"}, {"sha": "e4d73c6475dc4b20a841f24cd4eb1d2b60951207", "filename": "src/test/ui/pub/pub-reexport-priv-extern-crate.stderr", "status": "modified", "additions": 23, "deletions": 16, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/7b021aacb57d7a120f280302358d7bdd04a67bbc/src%2Ftest%2Fui%2Fpub%2Fpub-reexport-priv-extern-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b021aacb57d7a120f280302358d7bdd04a67bbc/src%2Ftest%2Fui%2Fpub%2Fpub-reexport-priv-extern-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-reexport-priv-extern-crate.stderr?ref=7b021aacb57d7a120f280302358d7bdd04a67bbc", "patch": "@@ -1,30 +1,37 @@\n-error: extern crate `core` is private, and cannot be re-exported (error E0365), consider declaring with `pub`\n-  --> $DIR/pub-reexport-priv-extern-crate.rs:4:9\n+error[E0603]: crate import `core` is private\n+  --> $DIR/pub-reexport-priv-extern-crate.rs:10:15\n    |\n-LL | pub use core as reexported_core;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     use foo1::core;\n+   |               ^^^^ private crate import\n    |\n-   = note: `#[deny(pub_use_of_private_extern_crate)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n+note: the crate import `core` is defined here\n+  --> $DIR/pub-reexport-priv-extern-crate.rs:6:5\n+   |\n+LL |     extern crate core;\n+   |     ^^^^^^^^^^^^^^^^^^\n \n-error: extern crate `core` is private, and cannot be re-exported (error E0365), consider declaring with `pub`\n-  --> $DIR/pub-reexport-priv-extern-crate.rs:12:9\n+error[E0603]: crate import `core` is private\n+  --> $DIR/pub-reexport-priv-extern-crate.rs:17:24\n    |\n-LL |     use foo1::core;\n-   |         ^^^^^^^^^^\n+LL |     pub use foo2::bar::core;\n+   |                        ^^^^ private crate import\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n+note: the crate import `core` is defined here\n+  --> $DIR/pub-reexport-priv-extern-crate.rs:12:9\n+   |\n+LL |         extern crate core;\n+   |         ^^^^^^^^^^^^^^^^^^\n \n error: extern crate `core` is private, and cannot be re-exported (error E0365), consider declaring with `pub`\n-  --> $DIR/pub-reexport-priv-extern-crate.rs:20:13\n+  --> $DIR/pub-reexport-priv-extern-crate.rs:2:9\n    |\n-LL |     pub use foo2::bar::core;\n-   |             ^^^^^^^^^^^^^^^\n+LL | pub use core as reexported_core;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: `#[deny(pub_use_of_private_extern_crate)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n error: aborting due to 3 previous errors\n \n+For more information about this error, try `rustc --explain E0603`."}]}