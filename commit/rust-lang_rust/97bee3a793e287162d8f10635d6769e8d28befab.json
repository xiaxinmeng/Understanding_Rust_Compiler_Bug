{"sha": "97bee3a793e287162d8f10635d6769e8d28befab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3YmVlM2E3OTNlMjg3MTYyZDhmMTA2MzVkNjc2OWU4ZDI4YmVmYWI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-22T18:46:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-22T18:46:07Z"}, "message": "Rollup merge of #66877 - skinny121:const-eval-entry-points, r=oli-obk\n\nAdd simpler entry points to const eval for common usages.\n\nI found the `tcx.const_eval` API to be complex/awkward to work with, because of the inherent complexity from all of the different situations it is called from. Though it mainly used in one of the following ways:\n- Evaluates the value of a constant without any substitutions, e.g. evaluating a static, discriminant, etc.\n- Evaluates the value of a resolved instance of a constant. this happens when evaluating unevaluated constants or normalising trait constants.\n- Evaluates a promoted constant.\n\nThis PR adds three new functions `const_eval_mono`, `const_eval_resolve`, and `const_eval_promoted` to `TyCtxt`, which each cater to one of the three ways `tcx.const_eval`\n is normally used.", "tree": {"sha": "622673b10419d797b82ece48ca3b7f8fb15e022a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/622673b10419d797b82ece48ca3b7f8fb15e022a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97bee3a793e287162d8f10635d6769e8d28befab", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd/7nvCRBK7hj4Ov3rIwAAdHIIAH8jNS0PVPiSRgKqwLkd5F5+\n1P1jmO/75JHpBHfhTVCn07P0XKtepFgeiNk/kBVXXe4nJLLq5M5P3UOXNs5p73MR\n6ZbsMT9F4M0O43yMt9scujLN9LTSMIpKvSVCtKDl+nRwoqxMpUiheauI5NEc+7Cr\n+FjxHP/iRSsc1afxKE7hRbv6lRm6QbVCxS/1qH188v0VR+M/0wVJTTpbWlfZMjZF\niL9niEJdpuCZ+TneePDZ8JQ3jqDTrsdIrVNckvEcD6MAAMnVhGod6HWtwLjFFazr\n4A6xT/Jj7y/fqcEYKdQoZhinXNyqxbq+BckRXdXM4RAVUiAy3lQcDH72MeHWmV0=\n=j6WZ\n-----END PGP SIGNATURE-----\n", "payload": "tree 622673b10419d797b82ece48ca3b7f8fb15e022a\nparent 0d2817a439c2ad9fe343f6347eb6d90947893363\nparent c010d843aacc32ed2bc03d36121aa7f6e08ef045\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1577040367 +0100\ncommitter GitHub <noreply@github.com> 1577040367 +0100\n\nRollup merge of #66877 - skinny121:const-eval-entry-points, r=oli-obk\n\nAdd simpler entry points to const eval for common usages.\n\nI found the `tcx.const_eval` API to be complex/awkward to work with, because of the inherent complexity from all of the different situations it is called from. Though it mainly used in one of the following ways:\n- Evaluates the value of a constant without any substitutions, e.g. evaluating a static, discriminant, etc.\n- Evaluates the value of a resolved instance of a constant. this happens when evaluating unevaluated constants or normalising trait constants.\n- Evaluates a promoted constant.\n\nThis PR adds three new functions `const_eval_mono`, `const_eval_resolve`, and `const_eval_promoted` to `TyCtxt`, which each cater to one of the three ways `tcx.const_eval`\n is normally used.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97bee3a793e287162d8f10635d6769e8d28befab", "html_url": "https://github.com/rust-lang/rust/commit/97bee3a793e287162d8f10635d6769e8d28befab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97bee3a793e287162d8f10635d6769e8d28befab/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d2817a439c2ad9fe343f6347eb6d90947893363", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d2817a439c2ad9fe343f6347eb6d90947893363", "html_url": "https://github.com/rust-lang/rust/commit/0d2817a439c2ad9fe343f6347eb6d90947893363"}, {"sha": "c010d843aacc32ed2bc03d36121aa7f6e08ef045", "url": "https://api.github.com/repos/rust-lang/rust/commits/c010d843aacc32ed2bc03d36121aa7f6e08ef045", "html_url": "https://github.com/rust-lang/rust/commit/c010d843aacc32ed2bc03d36121aa7f6e08ef045"}], "stats": {"total": 448, "additions": 195, "deletions": 253}, "files": [{"sha": "80bac92d003548f441435d0a51f134e1027ed0bd", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97bee3a793e287162d8f10635d6769e8d28befab/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97bee3a793e287162d8f10635d6769e8d28befab/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=97bee3a793e287162d8f10635d6769e8d28befab", "patch": "@@ -101,6 +101,7 @@ mod error;\n mod value;\n mod allocation;\n mod pointer;\n+mod queries;\n \n pub use self::error::{\n     InterpErrorInfo, InterpResult, InterpError, AssertMessage, ConstEvalErr, struct_error,\n@@ -116,9 +117,10 @@ pub use self::pointer::{Pointer, PointerArithmetic, CheckInAllocMsg};\n \n use crate::mir;\n use crate::hir::def_id::DefId;\n-use crate::ty::{self, TyCtxt, Instance, subst::GenericArgKind};\n+use crate::ty::{self, TyCtxt, Instance};\n use crate::ty::codec::TyDecoder;\n use crate::ty::layout::{self, Size};\n+use crate::ty::subst::GenericArgKind;\n use std::io;\n use std::fmt;\n use std::num::NonZeroU32;"}, {"sha": "5fd49a056d22c6233d47dd2578799a340412add6", "filename": "src/librustc/mir/interpret/queries.rs", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/97bee3a793e287162d8f10635d6769e8d28befab/src%2Flibrustc%2Fmir%2Finterpret%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97bee3a793e287162d8f10635d6769e8d28befab/src%2Flibrustc%2Fmir%2Finterpret%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fqueries.rs?ref=97bee3a793e287162d8f10635d6769e8d28befab", "patch": "@@ -0,0 +1,89 @@\n+use super::{ConstEvalResult, ErrorHandled, GlobalId};\n+\n+use crate::mir;\n+use crate::hir::def_id::DefId;\n+use crate::ty::{self, TyCtxt};\n+use crate::ty::subst::{InternalSubsts, SubstsRef};\n+use syntax_pos::Span;\n+\n+\n+impl<'tcx> TyCtxt<'tcx> {\n+\n+    /// Evaluates a constant without providing any substitutions. This is useful to evaluate consts\n+    /// that can't take any generic arguments like statics, const items or enum discriminants. If a\n+    /// generic parameter is used within the constant `ErrorHandled::ToGeneric` will be returned.\n+    pub fn const_eval_poly(self, def_id: DefId) -> ConstEvalResult<'tcx> {\n+        // In some situations def_id will have substitutions within scope, but they aren't allowed\n+        // to be used. So we can't use `Instance::mono`, instead we feed unresolved substitutions\n+        // into `const_eval` which will return `ErrorHandled::ToGeneric` if any og them are\n+        // encountered.\n+        let substs = InternalSubsts::identity_for_item(self, def_id);\n+        let instance = ty::Instance::new(def_id, substs);\n+        let cid = GlobalId {\n+            instance,\n+            promoted: None,\n+        };\n+        let param_env = self.param_env(def_id);\n+        self.const_eval_validated(param_env.and(cid))\n+    }\n+\n+    /// Resolves and evaluates a constant.\n+    ///\n+    /// The constant can be located on a trait like `<A as B>::C`, in which case the given\n+    /// substitutions and environment are used to resolve the constant. Alternatively if the\n+    /// constant has generic parameters in scope the substitutions are used to evaluate the value of\n+    /// the constant. For example in `fn foo<T>() { let _ = [0; bar::<T>()]; }` the repeat count\n+    /// constant `bar::<T>()` requires a substitution for `T`, if the substitution for `T` is still\n+    /// too generic for the constant to be evaluated then `Err(ErrorHandled::TooGeneric)` is\n+    /// returned.\n+    pub fn const_eval_resolve(\n+        self,\n+        param_env: ty::ParamEnv<'tcx>,\n+        def_id: DefId,\n+        substs: SubstsRef<'tcx>,\n+        span: Option<Span>\n+    ) -> ConstEvalResult<'tcx> {\n+        let instance = ty::Instance::resolve(\n+            self,\n+            param_env,\n+            def_id,\n+            substs,\n+        );\n+        if let Some(instance) = instance {\n+            self.const_eval_instance(param_env, instance, span)\n+        } else {\n+            Err(ErrorHandled::TooGeneric)\n+        }\n+    }\n+\n+    pub fn const_eval_instance(\n+        self,\n+        param_env: ty::ParamEnv<'tcx>,\n+        instance: ty::Instance<'tcx>,\n+        span: Option<Span>\n+    ) -> ConstEvalResult<'tcx> {\n+        let cid = GlobalId {\n+            instance,\n+            promoted: None,\n+        };\n+        if let Some(span) = span {\n+            self.at(span).const_eval_validated(param_env.and(cid))\n+        } else {\n+            self.const_eval_validated(param_env.and(cid))\n+        }\n+    }\n+\n+    /// Evaluate a promoted constant.\n+    pub fn const_eval_promoted(\n+        self,\n+        instance: ty::Instance<'tcx>,\n+        promoted: mir::Promoted\n+    ) -> ConstEvalResult<'tcx> {\n+        let cid = GlobalId {\n+            instance,\n+            promoted: Some(promoted),\n+        };\n+        let param_env = ty::ParamEnv::reveal_all();\n+        self.const_eval_validated(param_env.and(cid))\n+    }\n+}"}, {"sha": "a9dd856e75857442f3f84fec3059b91609a63b0a", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/97bee3a793e287162d8f10635d6769e8d28befab/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97bee3a793e287162d8f10635d6769e8d28befab/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=97bee3a793e287162d8f10635d6769e8d28befab", "patch": "@@ -448,7 +448,8 @@ rustc_queries! {\n         ///\n         /// **Do not use this** outside const eval. Const eval uses this to break query cycles\n         /// during validation. Please add a comment to every use site explaining why using\n-        /// `const_eval` isn't sufficient.\n+        /// `const_eval_validated` isn't sufficient. The returned constant also isn't in a suitable\n+        /// form to be used outside of const eval.\n         query const_eval_raw(key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>)\n             -> ConstEvalRawResult<'tcx> {\n             no_force\n@@ -460,7 +461,13 @@ rustc_queries! {\n \n         /// Results of evaluating const items or constants embedded in\n         /// other items (such as enum variant explicit discriminants).\n-        query const_eval(key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>)\n+        ///\n+        /// In contrast to `const_eval_raw` this performs some validation on the constant, and\n+        /// returns a proper constant that is usable by the rest of the compiler.\n+        ///\n+        /// **Do not use this** directly, use one of the following wrappers: `tcx.const_eval_poly`,\n+        /// `tcx.const_eval_resolve`, `tcx.const_eval_instance`, or `tcx.const_eval_promoted`.\n+        query const_eval_validated(key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>)\n             -> ConstEvalResult<'tcx> {\n             no_force\n             desc { |tcx|"}, {"sha": "3fd2415c83c0c9e793e96a8905367ddad38dbbf0", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 7, "deletions": 22, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/97bee3a793e287162d8f10635d6769e8d28befab/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97bee3a793e287162d8f10635d6769e8d28befab/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=97bee3a793e287162d8f10635d6769e8d28befab", "patch": "@@ -1,5 +1,4 @@\n use crate::infer::{InferCtxt, ShallowResolver};\n-use crate::mir::interpret::{GlobalId, ErrorHandled};\n use crate::ty::{self, Ty, TypeFoldable, ToPolyTraitRef};\n use crate::ty::error::ExpectedFound;\n use rustc_data_structures::obligation_forest::{DoCompleted, Error, ForestObligation};\n@@ -501,27 +500,13 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n                         ProcessResult::Unchanged\n                 } else {\n                     if !substs.has_local_value() {\n-                        let instance = ty::Instance::resolve(\n-                            self.selcx.tcx(),\n-                            obligation.param_env,\n-                            def_id,\n-                            substs,\n-                        );\n-                        if let Some(instance) = instance {\n-                            let cid = GlobalId {\n-                                instance,\n-                                promoted: None,\n-                            };\n-                            match self.selcx.tcx().at(obligation.cause.span)\n-                                                    .const_eval(obligation.param_env.and(cid)) {\n-                                Ok(_) => ProcessResult::Changed(vec![]),\n-                                Err(err) => ProcessResult::Error(\n-                                    CodeSelectionError(ConstEvalFailure(err)))\n-                            }\n-                        } else {\n-                            ProcessResult::Error(CodeSelectionError(\n-                                ConstEvalFailure(ErrorHandled::TooGeneric)\n-                            ))\n+                        match self.selcx.tcx().const_eval_resolve(obligation.param_env,\n+                                                                  def_id,\n+                                                                  substs,\n+                                                                  Some(obligation.cause.span)) {\n+                            Ok(_) => ProcessResult::Changed(vec![]),\n+                            Err(err) => ProcessResult::Error(\n+                                CodeSelectionError(ConstEvalFailure(err)))\n                         }\n                     } else {\n                         pending_obligation.stalled_on ="}, {"sha": "afc8a4d9e1415decfcd049a405da092b0e3a4a26", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/97bee3a793e287162d8f10635d6769e8d28befab/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97bee3a793e287162d8f10635d6769e8d28befab/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=97bee3a793e287162d8f10635d6769e8d28befab", "patch": "@@ -33,7 +33,6 @@ use crate::dep_graph::{DepKind, DepNodeIndex};\n use crate::hir::def_id::DefId;\n use crate::infer::{CombinedSnapshot, InferCtxt, InferOk, PlaceholderMap, TypeFreshener};\n use crate::middle::lang_items;\n-use crate::mir::interpret::GlobalId;\n use crate::ty::fast_reject;\n use crate::ty::relate::TypeRelation;\n use crate::ty::subst::{Subst, SubstsRef};\n@@ -820,22 +819,13 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             }\n \n             ty::Predicate::ConstEvaluatable(def_id, substs) => {\n-                let tcx = self.tcx();\n                 if !(obligation.param_env, substs).has_local_value() {\n-                    let param_env = obligation.param_env;\n-                    let instance =\n-                        ty::Instance::resolve(tcx, param_env, def_id, substs);\n-                    if let Some(instance) = instance {\n-                        let cid = GlobalId {\n-                            instance,\n-                            promoted: None,\n-                        };\n-                        match self.tcx().const_eval(param_env.and(cid)) {\n-                            Ok(_) => Ok(EvaluatedToOk),\n-                            Err(_) => Ok(EvaluatedToErr),\n-                        }\n-                    } else {\n-                        Ok(EvaluatedToErr)\n+                    match self.tcx().const_eval_resolve(obligation.param_env,\n+                                                        def_id,\n+                                                        substs,\n+                                                        None) {\n+                        Ok(_) => Ok(EvaluatedToOk),\n+                        Err(_) => Ok(EvaluatedToErr),\n                     }\n                 } else {\n                     // Inference variables still left in param_env or substs."}, {"sha": "30356d59a7ce653412f035757fa2b2e60bfeae18", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/97bee3a793e287162d8f10635d6769e8d28befab/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97bee3a793e287162d8f10635d6769e8d28befab/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=97bee3a793e287162d8f10635d6769e8d28befab", "patch": "@@ -19,7 +19,7 @@ use crate::middle::cstore::CrateStoreDyn;\n use crate::middle::lang_items::{FnTraitLangItem, FnMutTraitLangItem, FnOnceTraitLangItem};\n use crate::middle::resolve_lifetime::ObjectLifetimeDefault;\n use crate::mir::ReadOnlyBodyAndCache;\n-use crate::mir::interpret::{GlobalId, ErrorHandled};\n+use crate::mir::interpret::ErrorHandled;\n use crate::mir::GeneratorLayout;\n use crate::session::CrateDisambiguator;\n use crate::traits::{self, Reveal};\n@@ -2344,13 +2344,7 @@ impl<'tcx> AdtDef {\n     pub fn eval_explicit_discr(&self, tcx: TyCtxt<'tcx>, expr_did: DefId) -> Option<Discr<'tcx>> {\n         let param_env = tcx.param_env(expr_did);\n         let repr_type = self.repr.discr_type();\n-        let substs = InternalSubsts::identity_for_item(tcx, expr_did);\n-        let instance = ty::Instance::new(expr_did, substs);\n-        let cid = GlobalId {\n-            instance,\n-            promoted: None\n-        };\n-        match tcx.const_eval(param_env.and(cid)) {\n+        match tcx.const_eval_poly(expr_did) {\n             Ok(val) => {\n                 // FIXME: Find the right type and use it instead of `val.ty` here\n                 if let Some(b) = val.try_eval_bits(tcx, param_env, val.ty) {"}, {"sha": "604dc03ea17bca31638af7f7eebdd0a3d0cc2e7f", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/97bee3a793e287162d8f10635d6769e8d28befab/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97bee3a793e287162d8f10635d6769e8d28befab/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=97bee3a793e287162d8f10635d6769e8d28befab", "patch": "@@ -15,7 +15,7 @@ use crate::ty::{self, AdtDef, Discr, DefIdTree, TypeFlags, Ty, TyCtxt, TypeFolda\n use crate::ty::{List, TyS, ParamEnvAnd, ParamEnv};\n use crate::ty::layout::VariantIdx;\n use crate::util::captures::Captures;\n-use crate::mir::interpret::{Scalar, GlobalId};\n+use crate::mir::interpret::Scalar;\n \n use polonius_engine::Atom;\n use rustc_index::vec::Idx;\n@@ -2340,13 +2340,9 @@ impl<'tcx> Const<'tcx> {\n \n             let (param_env, substs) = param_env_and_substs.into_parts();\n \n-            // try to resolve e.g. associated constants to their definition on an impl\n-            let instance = ty::Instance::resolve(tcx, param_env, did, substs)?;\n-            let gid = GlobalId {\n-                instance,\n-                promoted: None,\n-            };\n-            tcx.const_eval(param_env.and(gid)).ok()\n+            // try to resolve e.g. associated constants to their definition on an impl, and then\n+            // evaluate the const.\n+            tcx.const_eval_resolve(param_env, did, substs, None).ok()\n         };\n \n         match self.val {"}, {"sha": "78a86d33a145b0466febb2ad8904de21ba3e38eb", "filename": "src/librustc_codegen_llvm/consts.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/97bee3a793e287162d8f10635d6769e8d28befab/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97bee3a793e287162d8f10635d6769e8d28befab/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fconsts.rs?ref=97bee3a793e287162d8f10635d6769e8d28befab", "patch": "@@ -8,7 +8,7 @@ use crate::value::Value;\n use libc::c_uint;\n use rustc::hir::def_id::DefId;\n use rustc::mir::interpret::{ConstValue, Allocation, read_target_uint,\n-    Pointer, ErrorHandled, GlobalId};\n+    Pointer, ErrorHandled};\n use rustc::mir::mono::MonoItem;\n use rustc::hir::Node;\n use rustc_target::abi::HasDataLayout;\n@@ -81,13 +81,7 @@ pub fn codegen_static_initializer(\n     cx: &CodegenCx<'ll, 'tcx>,\n     def_id: DefId,\n ) -> Result<(&'ll Value, &'tcx Allocation), ErrorHandled> {\n-    let instance = ty::Instance::mono(cx.tcx, def_id);\n-    let cid = GlobalId {\n-        instance,\n-        promoted: None,\n-    };\n-    let param_env = ty::ParamEnv::reveal_all();\n-    let static_ = cx.tcx.const_eval(param_env.and(cid))?;\n+    let static_ = cx.tcx.const_eval_poly(def_id)?;\n \n     let alloc = match static_.val {\n         ty::ConstKind::Value(ConstValue::ByRef {"}, {"sha": "e5a7583a8cc7049749b818cbce582c3a6a3696dc", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/97bee3a793e287162d8f10635d6769e8d28befab/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97bee3a793e287162d8f10635d6769e8d28befab/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=97bee3a793e287162d8f10635d6769e8d28befab", "patch": "@@ -14,7 +14,6 @@ use rustc_codegen_ssa::glue;\n use rustc_codegen_ssa::base::{to_immediate, wants_msvc_seh, compare_simd_types};\n use rustc::ty::{self, Ty};\n use rustc::ty::layout::{self, FnAbiExt, LayoutOf, HasTyCtxt, Primitive};\n-use rustc::mir::interpret::GlobalId;\n use rustc_codegen_ssa::common::{IntPredicate, TypeKind};\n use rustc::hir;\n use rustc_target::abi::HasDataLayout;\n@@ -202,11 +201,9 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n             \"needs_drop\" |\n             \"type_id\" |\n             \"type_name\" => {\n-                let gid = GlobalId {\n-                    instance,\n-                    promoted: None,\n-                };\n-                let ty_name = self.tcx.const_eval(ty::ParamEnv::reveal_all().and(gid)).unwrap();\n+                let ty_name = self.tcx\n+                    .const_eval_instance(ty::ParamEnv::reveal_all(), instance, None)\n+                    .unwrap();\n                 OperandRef::from_const(self, ty_name).immediate_or_packed_pair(self)\n             }\n             \"init\" => {"}, {"sha": "a532c23a6e0a25c25414daf15b327b572bf5235f", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/97bee3a793e287162d8f10635d6769e8d28befab/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97bee3a793e287162d8f10635d6769e8d28befab/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=97bee3a793e287162d8f10635d6769e8d28befab", "patch": "@@ -638,12 +638,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                                 projection: &[],\n                             } = place.as_ref()\n                             {\n-                                let param_env = ty::ParamEnv::reveal_all();\n-                                let cid = mir::interpret::GlobalId {\n-                                    instance: self.instance,\n-                                    promoted: Some(promoted),\n-                                };\n-                                let c = bx.tcx().const_eval(param_env.and(cid));\n+                                let c = bx.tcx().const_eval_promoted(self.instance, promoted);\n                                 let (llval, ty) = self.simd_shuffle_indices(\n                                     &bx,\n                                     terminator.source_info.span,"}, {"sha": "fc17e2c0c71b7a282b9802e9520d4816bcf7aaa5", "filename": "src/librustc_codegen_ssa/mir/constant.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/97bee3a793e287162d8f10635d6769e8d28befab/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97bee3a793e287162d8f10635d6769e8d28befab/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs?ref=97bee3a793e287162d8f10635d6769e8d28befab", "patch": "@@ -43,17 +43,14 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         match constant.literal.val {\n             ty::ConstKind::Unevaluated(def_id, substs) => {\n                 let substs = self.monomorphize(&substs);\n-                let instance = ty::Instance::resolve(\n-                    self.cx.tcx(), ty::ParamEnv::reveal_all(), def_id, substs,\n-                ).unwrap();\n-                let cid = mir::interpret::GlobalId {\n-                    instance,\n-                    promoted: None,\n-                };\n-                self.cx.tcx().const_eval(ty::ParamEnv::reveal_all().and(cid)).map_err(|err| {\n-                    self.cx.tcx().sess.span_err(constant.span, \"erroneous constant encountered\");\n-                    err\n-                })\n+                self.cx.tcx()\n+                    .const_eval_resolve(ty::ParamEnv::reveal_all(), def_id, substs, None)\n+                    .map_err(|err| {\n+                        self.cx.tcx().sess.span_err(\n+                            constant.span,\n+                            \"erroneous constant encountered\");\n+                        err\n+                    })\n             },\n             _ => Ok(self.monomorphize(&constant.literal)),\n         }"}, {"sha": "98d239d353d3a53163ff368e8c4b703fe9c08af8", "filename": "src/librustc_codegen_ssa/mir/place.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/97bee3a793e287162d8f10635d6769e8d28befab/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97bee3a793e287162d8f10635d6769e8d28befab/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs?ref=97bee3a793e287162d8f10635d6769e8d28befab", "patch": "@@ -473,14 +473,9 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 }),\n                 projection: [],\n             } => {\n-                let param_env = ty::ParamEnv::reveal_all();\n                 let instance = Instance::new(*def_id, self.monomorphize(substs));\n-                let cid = mir::interpret::GlobalId {\n-                    instance: instance,\n-                    promoted: Some(*promoted),\n-                };\n                 let layout = cx.layout_of(self.monomorphize(&ty));\n-                match bx.tcx().const_eval(param_env.and(cid)) {\n+                match bx.tcx().const_eval_promoted(instance, *promoted) {\n                     Ok(val) => match val.val {\n                         ty::ConstKind::Value(mir::interpret::ConstValue::ByRef {\n                             alloc, offset"}, {"sha": "340af64adad56c5b003ffe6ae0ab735374c271f2", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/97bee3a793e287162d8f10635d6769e8d28befab/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97bee3a793e287162d8f10635d6769e8d28befab/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=97bee3a793e287162d8f10635d6769e8d28befab", "patch": "@@ -1147,19 +1147,9 @@ declare_lint_pass!(\n \n fn check_const(cx: &LateContext<'_, '_>, body_id: hir::BodyId) {\n     let def_id = cx.tcx.hir().body_owner_def_id(body_id);\n-    let param_env = if cx.tcx.is_static(def_id) {\n-        // Use the same param_env as `codegen_static_initializer`, to reuse the cache.\n-        ty::ParamEnv::reveal_all()\n-    } else {\n-        cx.tcx.param_env(def_id)\n-    };\n-    let cid = ::rustc::mir::interpret::GlobalId {\n-        instance: ty::Instance::mono(cx.tcx, def_id),\n-        promoted: None\n-    };\n     // trigger the query once for all constants since that will already report the errors\n     // FIXME: Use ensure here\n-    let _ = cx.tcx.const_eval(param_env.and(cid));\n+    let _ = cx.tcx.const_eval_poly(def_id);\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedBrokenConst {"}, {"sha": "a2f066bee08d1ca54887bf79f4b3a95cee710781", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97bee3a793e287162d8f10635d6769e8d28befab/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97bee3a793e287162d8f10635d6769e8d28befab/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=97bee3a793e287162d8f10635d6769e8d28befab", "patch": "@@ -652,15 +652,15 @@ fn validate_and_turn_into_const<'tcx>(\n     })\n }\n \n-pub fn const_eval_provider<'tcx>(\n+pub fn const_eval_validated_provider<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>,\n ) -> ::rustc::mir::interpret::ConstEvalResult<'tcx> {\n     // see comment in const_eval_raw_provider for what we're doing here\n     if key.param_env.reveal == Reveal::All {\n         let mut key = key.clone();\n         key.param_env.reveal = Reveal::UserFacing;\n-        match tcx.const_eval(key) {\n+        match tcx.const_eval_validated(key) {\n             // try again with reveal all as requested\n             Err(ErrorHandled::TooGeneric) => {\n                 // Promoteds should never be \"too generic\" when getting evaluated."}, {"sha": "589016a2ca253153c0264460e7eab6a66e9e50e0", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/97bee3a793e287162d8f10635d6769e8d28befab/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97bee3a793e287162d8f10635d6769e8d28befab/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=97bee3a793e287162d8f10635d6769e8d28befab", "patch": "@@ -5,7 +5,7 @@ use crate::hair::cx::to_ref::ToRef;\n use crate::hair::util::UserAnnotatedTyHelpers;\n use rustc_index::vec::Idx;\n use rustc::hir::def::{CtorOf, Res, DefKind, CtorKind};\n-use rustc::mir::interpret::{GlobalId, ErrorHandled, Scalar};\n+use rustc::mir::interpret::{ErrorHandled, Scalar};\n use rustc::ty::{self, AdtKind, Ty};\n use rustc::ty::adjustment::{Adjustment, Adjust, AutoBorrow, AutoBorrowMutability, PointerCast};\n use rustc::ty::subst::{InternalSubsts, SubstsRef};\n@@ -511,21 +511,15 @@ fn make_mirror_unadjusted<'a, 'tcx>(\n         hir::ExprKind::Repeat(ref v, ref count) => {\n             let def_id = cx.tcx.hir().local_def_id(count.hir_id);\n             let substs = InternalSubsts::identity_for_item(cx.tcx, def_id);\n-            let instance = ty::Instance::resolve(\n-                cx.tcx,\n-                cx.param_env,\n-                def_id,\n-                substs,\n-            ).unwrap();\n-            let global_id = GlobalId {\n-                instance,\n-                promoted: None\n-            };\n             let span = cx.tcx.def_span(def_id);\n-            let count = match cx.tcx.at(span).const_eval(cx.param_env.and(global_id)) {\n+            let count = match cx.tcx.const_eval_resolve(cx.param_env,\n+                                                        def_id,\n+                                                        substs,\n+                                                        Some(span)) {\n                 Ok(cv) => cv.eval_usize(cx.tcx, cx.param_env),\n                 Err(ErrorHandled::Reported) => 0,\n                 Err(ErrorHandled::TooGeneric) => {\n+                    let span = cx.tcx.def_span(def_id);\n                     cx.tcx.sess.span_err(span, \"array lengths can't depend on generic parameters\");\n                     0\n                 },"}, {"sha": "fdef6633925daa4a57f3347f2b1cf20aa8173bbf", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 34, "deletions": 47, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/97bee3a793e287162d8f10635d6769e8d28befab/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97bee3a793e287162d8f10635d6769e8d28befab/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=97bee3a793e287162d8f10635d6769e8d28befab", "patch": "@@ -11,7 +11,7 @@ use crate::hair::constant::*;\n \n use rustc::mir::{Field, BorrowKind, Mutability};\n use rustc::mir::{UserTypeProjection};\n-use rustc::mir::interpret::{GlobalId, ConstValue, get_slice_bytes, sign_extend};\n+use rustc::mir::interpret::{ConstValue, ErrorHandled, get_slice_bytes, sign_extend};\n use rustc::ty::{self, Region, TyCtxt, AdtDef, Ty, UserType, DefIdTree};\n use rustc::ty::{CanonicalUserType, CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations};\n use rustc::ty::subst::{SubstsRef, GenericArg};\n@@ -771,64 +771,51 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n         let kind = match res {\n             Res::Def(DefKind::Const, def_id) | Res::Def(DefKind::AssocConst, def_id) => {\n                 let substs = self.tables.node_substs(id);\n-                match ty::Instance::resolve(\n-                    self.tcx,\n-                    self.param_env,\n-                    def_id,\n-                    substs,\n-                ) {\n-                    Some(instance) => {\n-                        let cid = GlobalId {\n-                            instance,\n-                            promoted: None,\n-                        };\n-                        match self.tcx.at(span).const_eval(self.param_env.and(cid)) {\n-                            Ok(value) => {\n-                                let pattern = self.const_to_pat(value, id, span);\n-                                if !is_associated_const {\n-                                    return pattern;\n-                                }\n+                match self.tcx.const_eval_resolve(self.param_env, def_id, substs, Some(span)) {\n+                    Ok(value) => {\n+                        let pattern = self.const_to_pat(value, id, span);\n+                        if !is_associated_const {\n+                            return pattern;\n+                        }\n \n-                                let user_provided_types = self.tables().user_provided_types();\n-                                return if let Some(u_ty) = user_provided_types.get(id) {\n-                                    let user_ty = PatTyProj::from_user_type(*u_ty);\n-                                    Pat {\n-                                        span,\n-                                        kind: Box::new(\n-                                            PatKind::AscribeUserType {\n-                                                subpattern: pattern,\n-                                                ascription: Ascription {\n-                                                    /// Note that use `Contravariant` here. See the\n-                                                    /// `variance` field documentation for details.\n-                                                    variance: ty::Variance::Contravariant,\n-                                                    user_ty,\n-                                                    user_ty_span: span,\n-                                                },\n-                                            }\n-                                        ),\n-                                        ty: value.ty,\n+                        let user_provided_types = self.tables().user_provided_types();\n+                        return if let Some(u_ty) = user_provided_types.get(id) {\n+                            let user_ty = PatTyProj::from_user_type(*u_ty);\n+                            Pat {\n+                                span,\n+                                kind: Box::new(\n+                                    PatKind::AscribeUserType {\n+                                        subpattern: pattern,\n+                                        ascription: Ascription {\n+                                            /// Note that use `Contravariant` here. See the\n+                                            /// `variance` field documentation for details.\n+                                            variance: ty::Variance::Contravariant,\n+                                            user_ty,\n+                                            user_ty_span: span,\n+                                        },\n                                     }\n-                                } else {\n-                                    pattern\n-                                }\n-                            },\n-                            Err(_) => {\n-                                self.tcx.sess.span_err(\n-                                    span,\n-                                    \"could not evaluate constant pattern\",\n-                                );\n-                                PatKind::Wild\n+                                ),\n+                                ty: value.ty,\n                             }\n+                        } else {\n+                            pattern\n                         }\n                     },\n-                    None => {\n+                    Err(ErrorHandled::TooGeneric) => {\n                         self.errors.push(if is_associated_const {\n                             PatternError::AssocConstInPattern(span)\n                         } else {\n                             PatternError::StaticInPattern(span)\n                         });\n                         PatKind::Wild\n                     },\n+                    Err(_) => {\n+                        self.tcx.sess.span_err(\n+                            span,\n+                            \"could not evaluate constant pattern\",\n+                        );\n+                        PatKind::Wild\n+                    }\n                 }\n             }\n             _ => self.lower_variant_or_leaf(res, id, span, ty, vec![]),"}, {"sha": "46782ef0a806b051196c7fb55477f2880088faef", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/97bee3a793e287162d8f10635d6769e8d28befab/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97bee3a793e287162d8f10635d6769e8d28befab/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=97bee3a793e287162d8f10635d6769e8d28befab", "patch": "@@ -11,7 +11,7 @@ use rustc::hir::def_id::DefId;\n use rustc::ty::TyCtxt;\n use rustc::mir::{\n     self, BinOp,\n-    interpret::{InterpResult, Scalar, GlobalId, ConstValue}\n+    interpret::{InterpResult, Scalar, ConstValue}\n };\n \n use super::{\n@@ -123,11 +123,9 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             sym::size_of |\n             sym::type_id |\n             sym::type_name => {\n-                let gid = GlobalId {\n-                    instance,\n-                    promoted: None,\n-                };\n-                let val = self.tcx.const_eval(self.param_env.and(gid))?;\n+                let val = self.tcx.const_eval_instance(self.param_env,\n+                                                       instance,\n+                                                       Some(self.tcx.span))?;\n                 let val = self.eval_const_to_op(val, None)?;\n                 self.copy_op(val, dest)?;\n             }"}, {"sha": "a1e6eb69b9d0d371cd7fe9da294cc26fdf9f2dd0", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/97bee3a793e287162d8f10635d6769e8d28befab/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97bee3a793e287162d8f10635d6769e8d28befab/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=97bee3a793e287162d8f10635d6769e8d28befab", "patch": "@@ -626,11 +626,6 @@ where\n                 let ty = place_static.ty;\n                 assert!(!ty.needs_subst());\n                 let layout = self.layout_of(ty)?;\n-                let instance = ty::Instance::mono(*self.tcx, place_static.def_id);\n-                let cid = GlobalId {\n-                    instance,\n-                    promoted: None\n-                };\n                 // Just create a lazy reference, so we can support recursive statics.\n                 // tcx takes care of assigning every static one and only one unique AllocId.\n                 // When the data here is ever actually used, memory will notice,\n@@ -646,7 +641,7 @@ where\n                 // Notice that statics have *two* AllocIds: the lazy one, and the resolved\n                 // one.  Here we make sure that the interpreted program never sees the\n                 // resolved ID.  Also see the doc comment of `Memory::get_static_alloc`.\n-                let alloc_id = self.tcx.alloc_map.lock().create_static_alloc(cid.instance.def_id());\n+                let alloc_id = self.tcx.alloc_map.lock().create_static_alloc(place_static.def_id);\n                 let ptr = self.tag_static_base_pointer(Pointer::from(alloc_id));\n                 MPlaceTy::from_aligned_ptr(ptr, layout)\n             }"}, {"sha": "cf54530317c4337d94c755134469b2d26510fa12", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97bee3a793e287162d8f10635d6769e8d28befab/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97bee3a793e287162d8f10635d6769e8d28befab/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=97bee3a793e287162d8f10635d6769e8d28befab", "patch": "@@ -56,7 +56,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n     shim::provide(providers);\n     transform::provide(providers);\n     monomorphize::partitioning::provide(providers);\n-    providers.const_eval = const_eval::const_eval_provider;\n+    providers.const_eval_validated = const_eval::const_eval_validated_provider;\n     providers.const_eval_raw = const_eval::const_eval_raw_provider;\n     providers.check_match = hair::pattern::check_match;\n     providers.const_caller_location = const_eval::const_caller_location;"}, {"sha": "ac627d32392b8162603db67be574bb93ce2822dc", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 6, "deletions": 32, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/97bee3a793e287162d8f10635d6769e8d28befab/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97bee3a793e287162d8f10635d6769e8d28befab/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=97bee3a793e287162d8f10635d6769e8d28befab", "patch": "@@ -189,7 +189,7 @@ use rustc::session::config::EntryFnType;\n use rustc::mir::{self, Location, PlaceBase, Static, StaticKind};\n use rustc::mir::visit::Visitor as MirVisitor;\n use rustc::mir::mono::{MonoItem, InstantiationMode};\n-use rustc::mir::interpret::{Scalar, GlobalId, GlobalAlloc, ErrorHandled};\n+use rustc::mir::interpret::{Scalar, GlobalAlloc, ErrorHandled};\n use rustc::util::nodemap::{FxHashSet, FxHashMap, DefIdMap};\n use rustc::util::common::time;\n \n@@ -379,13 +379,7 @@ fn collect_items_rec<'tcx>(\n \n             recursion_depth_reset = None;\n \n-            let cid = GlobalId {\n-                instance,\n-                promoted: None,\n-            };\n-            let param_env = ty::ParamEnv::reveal_all();\n-\n-            if let Ok(val) = tcx.const_eval(param_env.and(cid)) {\n+            if let Ok(val) = tcx.const_eval_poly(def_id) {\n                 collect_const(tcx, val, InternalSubsts::empty(), &mut neighbors);\n             }\n         }\n@@ -681,12 +675,8 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                 def_id,\n                 ..\n             }) => {\n-                let param_env = ty::ParamEnv::reveal_all();\n-                let cid = GlobalId {\n-                    instance: Instance::new(*def_id, substs.subst(self.tcx, self.param_substs)),\n-                    promoted: Some(*promoted),\n-                };\n-                match self.tcx.const_eval(param_env.and(cid)) {\n+                let instance = Instance::new(*def_id, substs.subst(self.tcx, self.param_substs));\n+                match self.tcx.const_eval_promoted(instance, *promoted) {\n                     Ok(val) => collect_const(self.tcx, val, substs, self.output),\n                     Err(ErrorHandled::Reported) => {},\n                     Err(ErrorHandled::TooGeneric) => {\n@@ -1041,14 +1031,7 @@ impl ItemLikeVisitor<'v> for RootCollector<'_, 'v> {\n                 // but even just declaring them must collect the items they refer to\n                 let def_id = self.tcx.hir().local_def_id(item.hir_id);\n \n-                let instance = Instance::mono(self.tcx, def_id);\n-                let cid = GlobalId {\n-                    instance,\n-                    promoted: None,\n-                };\n-                let param_env = ty::ParamEnv::reveal_all();\n-\n-                if let Ok(val) = self.tcx.const_eval(param_env.and(cid)) {\n+                if let Ok(val) = self.tcx.const_eval_poly(def_id) {\n                     collect_const(self.tcx, val, InternalSubsts::empty(), &mut self.output);\n                 }\n             }\n@@ -1288,16 +1271,7 @@ fn collect_const<'tcx>(\n             }\n         }\n         ty::ConstKind::Unevaluated(def_id, substs) => {\n-            let instance = ty::Instance::resolve(tcx,\n-                                                param_env,\n-                                                def_id,\n-                                                substs).unwrap();\n-\n-            let cid = GlobalId {\n-                instance,\n-                promoted: None,\n-            };\n-            match tcx.const_eval(param_env.and(cid)) {\n+            match tcx.const_eval_resolve(param_env, def_id, substs, None) {\n                 Ok(val) => collect_const(tcx, val, param_substs, output),\n                 Err(ErrorHandled::Reported) => {},\n                 Err(ErrorHandled::TooGeneric) => span_bug!("}, {"sha": "a6ae10b3dea399ae687d63d6054eb012b21967ea", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/97bee3a793e287162d8f10635d6769e8d28befab/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97bee3a793e287162d8f10635d6769e8d28befab/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=97bee3a793e287162d8f10635d6769e8d28befab", "patch": "@@ -31,15 +31,13 @@ use rustc::hir::ptr::P;\n use rustc::infer;\n use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc::middle::lang_items;\n-use rustc::mir::interpret::GlobalId;\n use rustc::ty;\n use rustc::ty::adjustment::{\n     Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability,\n };\n use rustc::ty::{AdtKind, Visibility};\n use rustc::ty::Ty;\n use rustc::ty::TypeFoldable;\n-use rustc::ty::subst::InternalSubsts;\n use rustc::traits::{self, ObligationCauseCode};\n \n use rustc_error_codes::*;\n@@ -1023,20 +1021,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let count = if self.const_param_def_id(count).is_some() {\n             Ok(self.to_const(count, tcx.type_of(count_def_id)))\n         } else {\n-            let param_env = ty::ParamEnv::empty();\n-            let substs = InternalSubsts::identity_for_item(tcx, count_def_id);\n-            let instance = ty::Instance::resolve(\n-                tcx,\n-                param_env,\n-                count_def_id,\n-                substs,\n-            ).unwrap();\n-            let global_id = GlobalId {\n-                instance,\n-                promoted: None\n-            };\n-\n-            tcx.const_eval(param_env.and(global_id))\n+            tcx.const_eval_poly(count_def_id)\n         };\n \n         let uty = match expected {"}, {"sha": "ea295103982b04b4852a1ded9cbe36e22980bfd7", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/97bee3a793e287162d8f10635d6769e8d28befab/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97bee3a793e287162d8f10635d6769e8d28befab/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=97bee3a793e287162d8f10635d6769e8d28befab", "patch": "@@ -106,7 +106,7 @@ use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc::infer::error_reporting::TypeAnnotationNeeded::E0282;\n use rustc::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n use rustc::middle::region;\n-use rustc::mir::interpret::{ConstValue, GlobalId};\n+use rustc::mir::interpret::ConstValue;\n use rustc::traits::{self, ObligationCause, ObligationCauseCode, TraitEngine};\n use rustc::ty::{\n     self, AdtKind, CanonicalUserType, Ty, TyCtxt, Const, GenericParamDefKind,\n@@ -1836,13 +1836,7 @@ fn maybe_check_static_with_link_section(tcx: TyCtxt<'_>, id: DefId, span: Span)\n     // `#[link_section]` may contain arbitrary, or even undefined bytes, but it is\n     // the consumer's responsibility to ensure all bytes that have been read\n     // have defined values.\n-    let instance = ty::Instance::mono(tcx, id);\n-    let cid = GlobalId {\n-        instance,\n-        promoted: None\n-    };\n-    let param_env = ty::ParamEnv::reveal_all();\n-    if let Ok(static_) = tcx.const_eval(param_env.and(cid)) {\n+    if let Ok(static_) = tcx.const_eval_poly(id) {\n         let alloc = if let ty::ConstKind::Value(ConstValue::ByRef { alloc, .. }) = static_.val {\n             alloc\n         } else {"}, {"sha": "93a1d5845ad284b9b44e254179390e3b93bafb61", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/97bee3a793e287162d8f10635d6769e8d28befab/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97bee3a793e287162d8f10635d6769e8d28befab/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=97bee3a793e287162d8f10635d6769e8d28befab", "patch": "@@ -15,7 +15,6 @@ use rustc::infer::region_constraints::{RegionConstraintData, Constraint};\n use rustc::middle::resolve_lifetime as rl;\n use rustc::middle::lang_items;\n use rustc::middle::stability;\n-use rustc::mir::interpret::GlobalId;\n use rustc::hir;\n use rustc::hir::def::{CtorKind, DefKind, Res};\n use rustc::hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX};\n@@ -1341,13 +1340,7 @@ impl Clean<Type> for hir::Ty {\n             TyKind::Slice(ref ty) => Slice(box ty.clean(cx)),\n             TyKind::Array(ref ty, ref length) => {\n                 let def_id = cx.tcx.hir().local_def_id(length.hir_id);\n-                let param_env = cx.tcx.param_env(def_id);\n-                let substs = InternalSubsts::identity_for_item(cx.tcx, def_id);\n-                let cid = GlobalId {\n-                    instance: ty::Instance::new(def_id, substs),\n-                    promoted: None\n-                };\n-                let length = match cx.tcx.const_eval(param_env.and(cid)) {\n+                let length = match cx.tcx.const_eval_poly(def_id) {\n                     Ok(length) => print_const(cx, length),\n                     Err(_) => cx.sess()\n                                 .source_map()\n@@ -1541,16 +1534,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n             ty::Slice(ty) => Slice(box ty.clean(cx)),\n             ty::Array(ty, n) => {\n                 let mut n = cx.tcx.lift(&n).expect(\"array lift failed\");\n-                if let ty::ConstKind::Unevaluated(def_id, substs) = n.val {\n-                    let param_env = cx.tcx.param_env(def_id);\n-                    let cid = GlobalId {\n-                        instance: ty::Instance::new(def_id, substs),\n-                        promoted: None\n-                    };\n-                    if let Ok(new_n) = cx.tcx.const_eval(param_env.and(cid)) {\n-                        n = new_n;\n-                    }\n-                };\n+                n = n.eval(cx.tcx, ty::ParamEnv::reveal_all());\n                 let n = print_const(cx, n);\n                 Array(box ty.clean(cx), n)\n             }"}]}