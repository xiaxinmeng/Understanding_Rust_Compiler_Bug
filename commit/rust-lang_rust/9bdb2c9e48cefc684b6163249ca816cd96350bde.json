{"sha": "9bdb2c9e48cefc684b6163249ca816cd96350bde", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliZGIyYzllNDhjZWZjNjg0YjYxNjMyNDljYTgxNmNkOTYzNTBiZGU=", "commit": {"author": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-06-14T18:38:45Z"}, "committer": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-06-21T23:11:11Z"}, "message": "Library vecs are fast now.", "tree": {"sha": "a1f34c68a5490f86915133815c1bbf8d20de88c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1f34c68a5490f86915133815c1bbf8d20de88c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9bdb2c9e48cefc684b6163249ca816cd96350bde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9bdb2c9e48cefc684b6163249ca816cd96350bde", "html_url": "https://github.com/rust-lang/rust/commit/9bdb2c9e48cefc684b6163249ca816cd96350bde", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9bdb2c9e48cefc684b6163249ca816cd96350bde/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e5cfd9f339c78384ef3fbcb4d230fa0bb363d54", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e5cfd9f339c78384ef3fbcb4d230fa0bb363d54", "html_url": "https://github.com/rust-lang/rust/commit/0e5cfd9f339c78384ef3fbcb4d230fa0bb363d54"}], "stats": {"total": 56, "additions": 40, "deletions": 16}, "files": [{"sha": "d30179fd8812492a573a4461c857261515052ceb", "filename": "src/libcore/dvec.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9bdb2c9e48cefc684b6163249ca816cd96350bde/src%2Flibcore%2Fdvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bdb2c9e48cefc684b6163249ca816cd96350bde/src%2Flibcore%2Fdvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdvec.rs?ref=9bdb2c9e48cefc684b6163249ca816cd96350bde", "patch": "@@ -113,6 +113,7 @@ impl extensions<A> for dvec<A> {\n     and return a new vector to replace it with.\n \n     \"]\n+    #[inline(always)]\n     fn swap(f: fn(-[mut A]) -> [mut A]) {\n         self.borrow { |v| self.return(f(v)) }\n     }\n@@ -136,11 +137,8 @@ impl extensions<A> for dvec<A> {\n impl extensions<A:copy> for dvec<A> {\n     #[doc = \"Append a single item to the end of the list\"]\n     fn push(t: A) {\n-        self.swap { |v|\n-            let mut v <- v;\n-            vec::push(v, t);\n-            v\n-        }\n+        self.check_not_borrowed();\n+        vec::push(self.data, t);\n     }\n \n     #[doc = \"Remove and return the last element\"]"}, {"sha": "77207d8aebf78cfeca93d35eb64ba0175b7a4d71", "filename": "src/libcore/sys.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bdb2c9e48cefc684b6163249ca816cd96350bde/src%2Flibcore%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bdb2c9e48cefc684b6163249ca816cd96350bde/src%2Flibcore%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsys.rs?ref=9bdb2c9e48cefc684b6163249ca816cd96350bde", "patch": "@@ -51,6 +51,7 @@ pure fn get_type_desc<T>() -> *type_desc {\n }\n \n #[doc = \"Returns the size of a type\"]\n+#[inline(always)]\n pure fn size_of<T>() -> uint unsafe {\n     unchecked { rusti::size_of::<T>() }\n }"}, {"sha": "843215bd4b9b3e6e7badf797f743fd3bf5e2ee47", "filename": "src/libcore/uint-template/uint.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bdb2c9e48cefc684b6163249ca816cd96350bde/src%2Flibcore%2Fuint-template%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bdb2c9e48cefc684b6163249ca816cd96350bde/src%2Flibcore%2Fuint-template%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template%2Fuint.rs?ref=9bdb2c9e48cefc684b6163249ca816cd96350bde", "patch": "@@ -81,6 +81,7 @@ fn iterate(lo: uint, hi: uint, it: fn(uint) -> bool) -> bool {\n }\n \n #[doc = \"Returns the smallest power of 2 greater than or equal to `n`\"]\n+#[inline(always)]\n fn next_power_of_two(n: uint) -> uint {\n     let halfbits: uint = sys::size_of::<uint>() * 4u;\n     let mut tmp: uint = n - 1u;"}, {"sha": "c029e9f2448146606a077fde3bee9012c3301f24", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 31, "deletions": 9, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/9bdb2c9e48cefc684b6163249ca816cd96350bde/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bdb2c9e48cefc684b6163249ca816cd96350bde/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=9bdb2c9e48cefc684b6163249ca816cd96350bde", "patch": "@@ -92,6 +92,11 @@ native mod rustrt {\n                            ++count: libc::size_t) -> *unsafe::vec_repr;\n }\n \n+#[abi = \"rust-intrinsic\"]\n+native mod rusti {\n+    fn move_val_init<T>(&dst: T, -src: T);\n+}\n+\n #[doc = \"A function used to initialize the elements of a vector\"]\n type init_op<T> = fn(uint) -> T;\n \n@@ -392,17 +397,33 @@ fn pop<T>(&v: [const T]) -> T unsafe {\n #[doc = \"Append an element to a vector\"]\n #[inline(always)]\n fn push<T>(&v: [const T], +initval: T) {\n-    let ln = v.len();\n     unsafe {\n-        reserve_at_least(v, ln + 1u);\n-        unsafe::set_len(v, ln + 1u);\n-        let p = ptr::mut_addr_of(v[ln]);\n+        let repr: **unsafe::vec_repr = ::unsafe::reinterpret_cast(addr_of(v));\n+        let fill = (**repr).fill;\n+        if (**repr).alloc > fill {\n+            let sz = sys::size_of::<T>();\n+            (**repr).fill += sz;\n+            let p = ptr::addr_of((**repr).data);\n+            let p = ptr::offset(p, fill) as *mut T;\n+            rusti::move_val_init(*p, initval);\n+        }\n+        else {\n+            push_slow(v, initval);\n+        }\n+    }\n+}\n \n-        // FIXME: for performance, try replacing the memmove and <- with a\n-        // memset and unsafe::forget.\n-        ptr::memset(p, 0, 1u); // needed to stop drop glue from running on\n-                               // garbage data.\n-        *p = initval;\n+fn push_slow<T>(&v: [const T], +initval: T) {\n+    unsafe {\n+        let ln = v.len();\n+        reserve_at_least(v, ln + 1u);\n+        let repr: **unsafe::vec_repr = ::unsafe::reinterpret_cast(addr_of(v));\n+        let fill = (**repr).fill;\n+        let sz = sys::size_of::<T>();\n+        (**repr).fill += sz;\n+        let p = ptr::addr_of((**repr).data);\n+        let p = ptr::offset(p, fill) as *mut T;\n+        rusti::move_val_init(*p, initval);\n     }\n }\n \n@@ -497,6 +518,7 @@ Sets the element at position `index` to `val`. If `index` is past the end\n of the vector, expands the vector by replicating `initval` to fill the\n intervening space.\n \"]\n+#[inline(always)]\n fn grow_set<T: copy>(&v: [mut T], index: uint, initval: T, val: T) {\n     if index >= len(v) { grow(v, index - len(v) + 1u, initval); }\n     v[index] = val;"}, {"sha": "3a3b90d2513e9b1d733375cddae967bb54ba267f", "filename": "src/libstd/smallintmap.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bdb2c9e48cefc684b6163249ca816cd96350bde/src%2Flibstd%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bdb2c9e48cefc684b6163249ca816cd96350bde/src%2Flibstd%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsmallintmap.rs?ref=9bdb2c9e48cefc684b6163249ca816cd96350bde", "patch": "@@ -19,6 +19,7 @@ fn mk<T: copy>() -> smallintmap<T> {\n Add a value to the map. If the map already contains a value for\n the specified key then the original value is replaced.\n \"]\n+#[inline(always)]\n fn insert<T: copy>(self: smallintmap<T>, key: uint, val: T) {\n     self.v.grow_set_elt(key, none, some(val));\n }\n@@ -62,6 +63,7 @@ impl <V: copy> of map::map<uint, V> for smallintmap<V> {\n         }\n         sz\n     }\n+    #[inline(always)]\n     fn insert(+key: uint, +value: V) -> bool {\n         let exists = contains_key(self, key);\n         insert(self, key, value);"}, {"sha": "dec12c69aa6f6e937f7bdbe10ba65f27d1d4bbc7", "filename": "src/test/bench/core-vec-append.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9bdb2c9e48cefc684b6163249ca816cd96350bde/src%2Ftest%2Fbench%2Fcore-vec-append.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bdb2c9e48cefc684b6163249ca816cd96350bde/src%2Ftest%2Fbench%2Fcore-vec-append.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-vec-append.rs?ref=9bdb2c9e48cefc684b6163249ca816cd96350bde", "patch": "@@ -7,8 +7,8 @@ import io::writer_util;\n fn collect_raw(num: uint) -> [uint] {\n     let mut result = [];\n     for uint::range(0u, num) { |i|\n-        result += [i];\n-        //vec::push(result, i);\n+        //result += [i];\n+        vec::push(result, i);\n         //result = vec::append(result, [i]);\n     }\n     ret result;"}]}