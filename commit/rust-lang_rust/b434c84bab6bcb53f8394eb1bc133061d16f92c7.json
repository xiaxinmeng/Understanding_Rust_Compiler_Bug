{"sha": "b434c84bab6bcb53f8394eb1bc133061d16f92c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0MzRjODRiYWI2YmNiNTNmODM5NGViMWJjMTMzMDYxZDE2ZjkyYzc=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-10-08T08:41:12Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-10-09T19:36:08Z"}, "message": "cleanup: rustc doesn't use an external archiver", "tree": {"sha": "12891bc830d0691bb5cfb9b52aac3e533f90abc0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12891bc830d0691bb5cfb9b52aac3e533f90abc0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b434c84bab6bcb53f8394eb1bc133061d16f92c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b434c84bab6bcb53f8394eb1bc133061d16f92c7", "html_url": "https://github.com/rust-lang/rust/commit/b434c84bab6bcb53f8394eb1bc133061d16f92c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b434c84bab6bcb53f8394eb1bc133061d16f92c7/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72d65019c789138f555c7cf7139508d2f9f0dffe", "url": "https://api.github.com/repos/rust-lang/rust/commits/72d65019c789138f555c7cf7139508d2f9f0dffe", "html_url": "https://github.com/rust-lang/rust/commit/72d65019c789138f555c7cf7139508d2f9f0dffe"}], "stats": {"total": 74, "additions": 9, "deletions": 65}, "files": [{"sha": "a2f64e6b70588e99175034cb2cd3171553fa5dd7", "filename": "config.toml.example", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b434c84bab6bcb53f8394eb1bc133061d16f92c7/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/b434c84bab6bcb53f8394eb1bc133061d16f92c7/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=b434c84bab6bcb53f8394eb1bc133061d16f92c7", "patch": "@@ -250,14 +250,11 @@\n # Whether or not `panic!`s generate backtraces (RUST_BACKTRACE)\n #backtrace = true\n \n-# The default linker that will be used by the generated compiler. Note that this\n-# is not the linker used to link said compiler.\n+# The default linker that will be hard-coded into the generated compiler for\n+# targets that don't specify linker explicitly in their target specifications.\n+# Note that this is not the linker used to link said compiler.\n #default-linker = \"cc\"\n \n-# The default ar utility that will be used by the generated compiler if LLVM\n-# cannot be used. Note that this is not used to assemble said compiler.\n-#default-ar = \"ar\"\n-\n # The \"channel\" for the Rust build to produce. The stable/beta channels only\n # allow using stable features, whereas the nightly and dev channels allow using\n # nightly features"}, {"sha": "b1c630a8de9e504e811d415ddc105bc69b69c82c", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b434c84bab6bcb53f8394eb1bc133061d16f92c7/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b434c84bab6bcb53f8394eb1bc133061d16f92c7/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=b434c84bab6bcb53f8394eb1bc133061d16f92c7", "patch": "@@ -560,9 +560,6 @@ pub fn rustc_cargo(build: &Build,\n     if let Some(ref s) = build.config.rustc_default_linker {\n         cargo.env(\"CFG_DEFAULT_LINKER\", s);\n     }\n-    if let Some(ref s) = build.config.rustc_default_ar {\n-        cargo.env(\"CFG_DEFAULT_AR\", s);\n-    }\n }\n \n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]"}, {"sha": "5fb5eb3b7f1a586167014bed3e68c5a404f6fde3", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b434c84bab6bcb53f8394eb1bc133061d16f92c7/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b434c84bab6bcb53f8394eb1bc133061d16f92c7/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=b434c84bab6bcb53f8394eb1bc133061d16f92c7", "patch": "@@ -88,7 +88,6 @@ pub struct Config {\n     pub rust_debuginfo_only_std: bool,\n     pub rust_rpath: bool,\n     pub rustc_default_linker: Option<String>,\n-    pub rustc_default_ar: Option<String>,\n     pub rust_optimize_tests: bool,\n     pub rust_debuginfo_tests: bool,\n     pub rust_dist_src: bool,\n@@ -262,7 +261,6 @@ struct Rust {\n     use_jemalloc: Option<bool>,\n     backtrace: Option<bool>,\n     default_linker: Option<String>,\n-    default_ar: Option<String>,\n     channel: Option<String>,\n     musl_root: Option<String>,\n     rpath: Option<bool>,\n@@ -464,7 +462,6 @@ impl Config {\n             set(&mut config.quiet_tests, rust.quiet_tests);\n             set(&mut config.test_miri, rust.test_miri);\n             config.rustc_default_linker = rust.default_linker.clone();\n-            config.rustc_default_ar = rust.default_ar.clone();\n             config.musl_root = rust.musl_root.clone().map(PathBuf::from);\n \n             match rust.codegen_units {"}, {"sha": "29ffa2c926debc5eacda64c74f092b9fd4f5bcfc", "filename": "src/bootstrap/configure.py", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b434c84bab6bcb53f8394eb1bc133061d16f92c7/src%2Fbootstrap%2Fconfigure.py", "raw_url": "https://github.com/rust-lang/rust/raw/b434c84bab6bcb53f8394eb1bc133061d16f92c7/src%2Fbootstrap%2Fconfigure.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfigure.py?ref=b434c84bab6bcb53f8394eb1bc133061d16f92c7", "patch": "@@ -119,9 +119,8 @@ def v(*args):\n   \"experimental LLVM targets to build\")\n v(\"release-channel\", \"rust.channel\", \"the name of the release channel to build\")\n \n-# Used on systems where \"cc\" and \"ar\" are unavailable\n+# Used on systems where \"cc\" is unavailable\n v(\"default-linker\", \"rust.default-linker\", \"the default linker\")\n-v(\"default-ar\", \"rust.default-ar\", \"the default ar\")\n \n # Many of these are saved below during the \"writing configuration\" step\n # (others are conditionally saved)."}, {"sha": "b57661715cc7028eb0ece07e1ec8e4ef8d3013e9", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b434c84bab6bcb53f8394eb1bc133061d16f92c7/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b434c84bab6bcb53f8394eb1bc133061d16f92c7/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=b434c84bab6bcb53f8394eb1bc133061d16f92c7", "patch": "@@ -176,7 +176,7 @@ fn make_win_dist(\n         }\n     }\n \n-    let target_tools = [\"gcc.exe\", \"ld.exe\", \"ar.exe\", \"dlltool.exe\", \"libwinpthread-1.dll\"];\n+    let target_tools = [\"gcc.exe\", \"ld.exe\", \"dlltool.exe\", \"libwinpthread-1.dll\"];\n     let mut rustc_dlls = vec![\"libstdc++-6.dll\", \"libwinpthread-1.dll\"];\n     if target_triple.starts_with(\"i686-\") {\n         rustc_dlls.push(\"libgcc_s_dw2-1.dll\");"}, {"sha": "0bb41cee2c518fbed9a7196bd2eb2f1cd373cc4c", "filename": "src/doc/man/rustc.1", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b434c84bab6bcb53f8394eb1bc133061d16f92c7/src%2Fdoc%2Fman%2Frustc.1", "raw_url": "https://github.com/rust-lang/rust/raw/b434c84bab6bcb53f8394eb1bc133061d16f92c7/src%2Fdoc%2Fman%2Frustc.1", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fman%2Frustc.1?ref=b434c84bab6bcb53f8394eb1bc133061d16f92c7", "patch": "@@ -152,9 +152,6 @@ never colorize output.\n \n .SH CODEGEN OPTIONS\n \n-.TP\n-\\fBar\\fR=\\fI/path/to/ar\\fR\n-Path to the archive utility to use when assembling archives.\n .TP\n \\fBlinker\\fR=\\fI/path/to/cc\\fR\n Path to the linker utility to use when linking libraries, executables, and"}, {"sha": "9ffb3ac332e968f46769ed78874dbbfa3895e4a0", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b434c84bab6bcb53f8394eb1bc133061d16f92c7/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b434c84bab6bcb53f8394eb1bc133061d16f92c7/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=b434c84bab6bcb53f8394eb1bc133061d16f92c7", "patch": "@@ -864,8 +864,7 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n          build_codegen_options, \"C\", \"codegen\",\n          CG_OPTIONS, cg_type_desc, cgsetters,\n     ar: Option<String> = (None, parse_opt_string, [UNTRACKED],\n-        \"tool to assemble archives with (has no effect currently, \\\n-         rustc doesn't use an external archiver)\"),\n+        \"this option is deprecated and does nothing\"),\n     linker: Option<String> = (None, parse_opt_string, [UNTRACKED],\n         \"system linker to link outputs with\"),\n     link_arg: Vec<String> = (vec![], parse_string_push, [UNTRACKED],"}, {"sha": "6f6fde1e9e7786155aad5f994a3b14b220f4b469", "filename": "src/librustc_back/build.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b434c84bab6bcb53f8394eb1bc133061d16f92c7/src%2Flibrustc_back%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b434c84bab6bcb53f8394eb1bc133061d16f92c7/src%2Flibrustc_back%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fbuild.rs?ref=b434c84bab6bcb53f8394eb1bc133061d16f92c7", "patch": "@@ -11,5 +11,4 @@\n fn main() {\n     println!(\"cargo:rerun-if-changed=build.rs\");\n     println!(\"cargo:rerun-if-env-changed=CFG_DEFAULT_LINKER\");\n-    println!(\"cargo:rerun-if-env-changed=CFG_DEFAULT_AR\");\n }"}, {"sha": "a54627279b02c2a4a7179057e3ceae05dc88324b", "filename": "src/librustc_back/target/asmjs_unknown_emscripten.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b434c84bab6bcb53f8394eb1bc133061d16f92c7/src%2Flibrustc_back%2Ftarget%2Fasmjs_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b434c84bab6bcb53f8394eb1bc133061d16f92c7/src%2Flibrustc_back%2Ftarget%2Fasmjs_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fasmjs_unknown_emscripten.rs?ref=b434c84bab6bcb53f8394eb1bc133061d16f92c7", "patch": "@@ -20,7 +20,6 @@ pub fn target() -> Result<Target, String> {\n \n     let opts = TargetOptions {\n         linker: cmd(\"emcc\"),\n-        ar: cmd(\"emar\"),\n \n         dynamic_linking: false,\n         executables: true,"}, {"sha": "1d0fc3cf6e57cc09e5f9e7032cc920c18ac77cdc", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b434c84bab6bcb53f8394eb1bc133061d16f92c7/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b434c84bab6bcb53f8394eb1bc133061d16f92c7/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=b434c84bab6bcb53f8394eb1bc133061d16f92c7", "patch": "@@ -268,8 +268,6 @@ pub struct TargetOptions {\n \n     /// Linker to invoke. Defaults to \"cc\".\n     pub linker: String,\n-    /// Archive utility to use when managing archives. Defaults to \"ar\".\n-    pub ar: String,\n \n     /// Linker arguments that are unconditionally passed *before* any\n     /// user-defined libraries.\n@@ -439,7 +437,6 @@ impl Default for TargetOptions {\n         TargetOptions {\n             is_builtin: false,\n             linker: option_env!(\"CFG_DEFAULT_LINKER\").unwrap_or(\"cc\").to_string(),\n-            ar: option_env!(\"CFG_DEFAULT_AR\").unwrap_or(\"ar\").to_string(),\n             pre_link_args: LinkArgs::new(),\n             post_link_args: LinkArgs::new(),\n             asm_args: Vec::new(),\n@@ -680,7 +677,6 @@ impl Target {\n \n         key!(is_builtin, bool);\n         key!(linker);\n-        key!(ar);\n         key!(pre_link_args, link_args);\n         key!(pre_link_objects_exe, list);\n         key!(pre_link_objects_dll, list);\n@@ -872,7 +868,6 @@ impl ToJson for Target {\n \n         target_option_val!(is_builtin);\n         target_option_val!(linker);\n-        target_option_val!(ar);\n         target_option_val!(link_args - pre_link_args);\n         target_option_val!(pre_link_objects_exe);\n         target_option_val!(pre_link_objects_dll);"}, {"sha": "a261c982b3f2414d14424a28e2471048040873d9", "filename": "src/librustc_back/target/wasm32_experimental_emscripten.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b434c84bab6bcb53f8394eb1bc133061d16f92c7/src%2Flibrustc_back%2Ftarget%2Fwasm32_experimental_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b434c84bab6bcb53f8394eb1bc133061d16f92c7/src%2Flibrustc_back%2Ftarget%2Fwasm32_experimental_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fwasm32_experimental_emscripten.rs?ref=b434c84bab6bcb53f8394eb1bc133061d16f92c7", "patch": "@@ -25,7 +25,6 @@ pub fn target() -> Result<Target, String> {\n \n     let opts = TargetOptions {\n         linker: cmd(\"emcc\"),\n-        ar: cmd(\"emar\"),\n \n         dynamic_linking: false,\n         executables: true,"}, {"sha": "197c1f7a4da494c2f9f649f69ea57e3aeee5c092", "filename": "src/librustc_back/target/wasm32_unknown_emscripten.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b434c84bab6bcb53f8394eb1bc133061d16f92c7/src%2Flibrustc_back%2Ftarget%2Fwasm32_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b434c84bab6bcb53f8394eb1bc133061d16f92c7/src%2Flibrustc_back%2Ftarget%2Fwasm32_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fwasm32_unknown_emscripten.rs?ref=b434c84bab6bcb53f8394eb1bc133061d16f92c7", "patch": "@@ -22,7 +22,6 @@ pub fn target() -> Result<Target, String> {\n \n     let opts = TargetOptions {\n         linker: cmd(\"emcc\"),\n-        ar: cmd(\"emar\"),\n \n         dynamic_linking: false,\n         executables: true,"}, {"sha": "64df6624dd1c23df62a5a696aadb3384d3f7611b", "filename": "src/librustc_back/target/windows_msvc_base.rs", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b434c84bab6bcb53f8394eb1bc133061d16f92c7/src%2Flibrustc_back%2Ftarget%2Fwindows_msvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b434c84bab6bcb53f8394eb1bc133061d16f92c7/src%2Flibrustc_back%2Ftarget%2Fwindows_msvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fwindows_msvc_base.rs?ref=b434c84bab6bcb53f8394eb1bc133061d16f92c7", "patch": "@@ -21,37 +21,6 @@ pub fn opts() -> TargetOptions {\n     TargetOptions {\n         function_sections: true,\n         linker: \"link.exe\".to_string(),\n-        // When taking a look at the value of this `ar` field, one might expect\n-        // `lib.exe` to be the value here! The `lib.exe` program is the default\n-        // tool for managing `.lib` archives on Windows, but unfortunately the\n-        // compiler cannot use it.\n-        //\n-        // To recap, we use `ar` here to manage rlibs (which are just archives).\n-        // LLVM does not expose bindings for modifying archives so we have to\n-        // invoke this utility for write operations (e.g. deleting files, adding\n-        // files, etc). Normally archives only have object files within them,\n-        // but the compiler also uses archives for storing metadata and\n-        // compressed bytecode, so we don't exactly fall within \"normal use\n-        // cases\".\n-        //\n-        // MSVC's `lib.exe` tool by default will choke when adding a non-object\n-        // file to an archive, which we do on a regular basis, making it\n-        // inoperable for us. Luckily, however, LLVM has already rewritten `ar`\n-        // in the form of `llvm-ar` which is built by default when we build\n-        // LLVM. This tool, unlike `lib.exe`, works just fine with non-object\n-        // files, so we use it instead.\n-        //\n-        // Note that there's a few caveats associated with this:\n-        //\n-        // * This still requires that the *linker* (the consumer of rlibs) will\n-        //   ignore non-object files. Thankfully `link.exe` on Windows does\n-        //   indeed ignore non-object files in archives.\n-        // * This requires `llvm-ar.exe` to be distributed with the compiler\n-        //   itself, but we already make sure of this elsewhere.\n-        //\n-        // Perhaps one day we won't even need this tool at all and we'll just be\n-        // able to make library calls into LLVM!\n-        ar: \"llvm-ar.exe\".to_string(),\n         dynamic_linking: true,\n         executables: true,\n         dll_prefix: \"\".to_string(),"}, {"sha": "18f6380b6eedf17e8ced966c880bd4dbade20dd1", "filename": "src/librustc_back/target/x86_64_rumprun_netbsd.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b434c84bab6bcb53f8394eb1bc133061d16f92c7/src%2Flibrustc_back%2Ftarget%2Fx86_64_rumprun_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b434c84bab6bcb53f8394eb1bc133061d16f92c7/src%2Flibrustc_back%2Ftarget%2Fx86_64_rumprun_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_rumprun_netbsd.rs?ref=b434c84bab6bcb53f8394eb1bc133061d16f92c7", "patch": "@@ -16,7 +16,6 @@ pub fn target() -> TargetResult {\n     base.cpu = \"x86-64\".to_string();\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n     base.linker = \"x86_64-rumprun-netbsd-gcc\".to_string();\n-    base.ar = \"x86_64-rumprun-netbsd-ar\".to_string();\n     base.max_atomic_width = Some(64);\n \n     base.dynamic_linking = false;"}, {"sha": "775cf3ac4c934b087b1786886170adc3530e7dd8", "filename": "src/librustc_trans/back/archive.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b434c84bab6bcb53f8394eb1bc133061d16f92c7/src%2Flibrustc_trans%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b434c84bab6bcb53f8394eb1bc133061d16f92c7/src%2Flibrustc_trans%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Farchive.rs?ref=b434c84bab6bcb53f8394eb1bc133061d16f92c7", "patch": "@@ -31,8 +31,7 @@ pub struct ArchiveConfig<'a> {\n     pub lib_search_paths: Vec<PathBuf>,\n }\n \n-/// Helper for adding many files to an archive with a single invocation of\n-/// `ar`.\n+/// Helper for adding many files to an archive.\n #[must_use = \"must call build() to finish building the archive\"]\n pub struct ArchiveBuilder<'a> {\n     config: ArchiveConfig<'a>,\n@@ -201,8 +200,8 @@ impl<'a> ArchiveBuilder<'a> {\n         });\n     }\n \n-    /// Indicate that the next call to `build` should updates all symbols in\n-    /// the archive (run 'ar s' over it).\n+    /// Indicate that the next call to `build` should update all symbols in\n+    /// the archive (equivalent to running 'ar s' over it).\n     pub fn update_symbols(&mut self) {\n         self.should_update_symbols = true;\n     }"}]}