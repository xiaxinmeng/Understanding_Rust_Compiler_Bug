{"sha": "520c82e0e971f4107d09ae18670274a278fac382", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyMGM4MmUwZTk3MWY0MTA3ZDA5YWUxODY3MDI3NGEyNzhmYWMzODI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-01-10T01:42:08Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-01-10T02:46:21Z"}, "message": "rustc: Fix style of OutputType enum", "tree": {"sha": "2945ee4504955a97021c76c4fa4a37b887830c48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2945ee4504955a97021c76c4fa4a37b887830c48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/520c82e0e971f4107d09ae18670274a278fac382", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/520c82e0e971f4107d09ae18670274a278fac382", "html_url": "https://github.com/rust-lang/rust/commit/520c82e0e971f4107d09ae18670274a278fac382", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/520c82e0e971f4107d09ae18670274a278fac382/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff3d5d460399070f660f5a59855fbb4698c797ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff3d5d460399070f660f5a59855fbb4698c797ee", "html_url": "https://github.com/rust-lang/rust/commit/ff3d5d460399070f660f5a59855fbb4698c797ee"}], "stats": {"total": 82, "additions": 41, "deletions": 41}, "files": [{"sha": "ffb9cce033ed71deaca769e86304e69a73df967e", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/520c82e0e971f4107d09ae18670274a278fac382/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/520c82e0e971f4107d09ae18670274a278fac382/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=520c82e0e971f4107d09ae18670274a278fac382", "patch": "@@ -45,13 +45,13 @@ use syntax::attr::AttrMetaMethods;\n use syntax::crateid::CrateId;\n \n #[deriving(Clone, Eq)]\n-pub enum output_type {\n-    output_type_none,\n-    output_type_bitcode,\n-    output_type_assembly,\n-    output_type_llvm_assembly,\n-    output_type_object,\n-    output_type_exe,\n+pub enum OutputType {\n+    OutputTypeNone,\n+    OutputTypeBitcode,\n+    OutputTypeAssembly,\n+    OutputTypeLlvmAssembly,\n+    OutputTypeObject,\n+    OutputTypeExe,\n }\n \n pub fn llvm_err(sess: Session, msg: ~str) -> ! {\n@@ -86,10 +86,10 @@ pub fn WriteOutputFile(\n pub mod write {\n \n     use back::lto;\n-    use back::link::{WriteOutputFile, output_type};\n-    use back::link::{output_type_assembly, output_type_bitcode};\n-    use back::link::{output_type_exe, output_type_llvm_assembly};\n-    use back::link::{output_type_object};\n+    use back::link::{WriteOutputFile, OutputType};\n+    use back::link::{OutputTypeAssembly, OutputTypeBitcode};\n+    use back::link::{OutputTypeExe, OutputTypeLlvmAssembly};\n+    use back::link::{OutputTypeObject};\n     use driver::driver::CrateTranslation;\n     use driver::session::Session;\n     use driver::session;\n@@ -107,7 +107,7 @@ pub mod write {\n \n     pub fn run_passes(sess: Session,\n                       trans: &CrateTranslation,\n-                      output_type: output_type,\n+                      output_type: OutputType,\n                       output: &Path) {\n         let llmod = trans.module;\n         let llcx = trans.context;\n@@ -225,20 +225,20 @@ pub mod write {\n \n             time(sess.time_passes(), \"codegen passes\", (), |()| {\n                 match output_type {\n-                    output_type_none => {}\n-                    output_type_bitcode => {\n+                    OutputTypeNone => {}\n+                    OutputTypeBitcode => {\n                         output.with_c_str(|buf| {\n                             llvm::LLVMWriteBitcodeToFile(llmod, buf);\n                         })\n                     }\n-                    output_type_llvm_assembly => {\n+                    OutputTypeLlvmAssembly => {\n                         output.with_c_str(|output| {\n                             with_codegen(tm, llmod, |cpm| {\n                                 llvm::LLVMRustPrintModule(cpm, llmod, output);\n                             })\n                         })\n                     }\n-                    output_type_assembly => {\n+                    OutputTypeAssembly => {\n                         with_codegen(tm, llmod, |cpm| {\n                             WriteOutputFile(sess, tm, cpm, llmod, output,\n                                             lib::llvm::AssemblyFile);\n@@ -248,7 +248,7 @@ pub mod write {\n                         // could be invoked specially with output_type_assembly,\n                         // so in this case we still want the metadata object\n                         // file.\n-                        if sess.opts.output_type != output_type_assembly {\n+                        if sess.opts.output_type != OutputTypeAssembly {\n                             with_codegen(tm, trans.metadata_module, |cpm| {\n                                 let out = output.with_extension(\"metadata.o\");\n                                 WriteOutputFile(sess, tm, cpm,\n@@ -257,7 +257,7 @@ pub mod write {\n                             })\n                         }\n                     }\n-                    output_type_exe | output_type_object => {\n+                    OutputTypeExe | OutputTypeObject => {\n                         with_codegen(tm, llmod, |cpm| {\n                             WriteOutputFile(sess, tm, cpm, llmod, output,\n                                             lib::llvm::ObjectFile);"}, {"sha": "aa3ab80b487970753eda1ddbd1515c318ca0f7f1", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/520c82e0e971f4107d09ae18670274a278fac382/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/520c82e0e971f4107d09ae18670274a278fac382/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=520c82e0e971f4107d09ae18670274a278fac382", "patch": "@@ -362,7 +362,7 @@ pub fn phase_5_run_llvm_passes(sess: Session,\n                                outputs: &OutputFilenames) {\n \n     if sess.no_integrated_as() {\n-        let output_type = link::output_type_assembly;\n+        let output_type = link::OutputTypeAssembly;\n         let asm_filename = outputs.obj_filename.with_extension(\"s\");\n \n         time(sess.time_passes(), \"LLVM passes\", (), |_|\n@@ -424,7 +424,7 @@ pub fn stop_after_phase_2(sess: Session) -> bool {\n }\n \n pub fn stop_after_phase_5(sess: Session) -> bool {\n-    if sess.opts.output_type != link::output_type_exe {\n+    if sess.opts.output_type != link::OutputTypeExe {\n         debug!(\"not building executable, returning early from compile_input\");\n         return true;\n     }\n@@ -765,17 +765,17 @@ pub fn build_session_options(binary: ~str,\n \n     let output_type =\n         if parse_only || no_trans {\n-            link::output_type_none\n+            link::OutputTypeNone\n         } else if matches.opt_present(\"S\") &&\n                   matches.opt_present(\"emit-llvm\") {\n-            link::output_type_llvm_assembly\n+            link::OutputTypeLlvmAssembly\n         } else if matches.opt_present(\"S\") {\n-            link::output_type_assembly\n+            link::OutputTypeAssembly\n         } else if matches.opt_present(\"c\") {\n-            link::output_type_object\n+            link::OutputTypeObject\n         } else if matches.opt_present(\"emit-llvm\") {\n-            link::output_type_bitcode\n-        } else { link::output_type_exe };\n+            link::OutputTypeBitcode\n+        } else { link::OutputTypeExe };\n     let sysroot_opt = matches.opt_str(\"sysroot\").map(|m| @Path::new(m));\n     let target = matches.opt_str(\"target\").unwrap_or(host_triple());\n     let target_cpu = matches.opt_str(\"target-cpu\").unwrap_or(~\"generic\");\n@@ -1039,15 +1039,15 @@ pub fn build_output_filenames(input: &input,\n     let obj_path;\n     let out_path;\n     let sopts = sess.opts;\n-    let stop_after_codegen = sopts.output_type != link::output_type_exe;\n+    let stop_after_codegen = sopts.output_type != link::OutputTypeExe;\n \n     let obj_suffix = match sopts.output_type {\n-        link::output_type_none => ~\"none\",\n-        link::output_type_bitcode => ~\"bc\",\n-        link::output_type_assembly => ~\"s\",\n-        link::output_type_llvm_assembly => ~\"ll\",\n+        link::OutputTypeNone => ~\"none\",\n+        link::OutputTypeBitcode => ~\"bc\",\n+        link::OutputTypeAssembly => ~\"s\",\n+        link::OutputTypeLlvmAssembly => ~\"ll\",\n         // Object and exe output both use the '.o' extension here\n-        link::output_type_object | link::output_type_exe => ~\"o\"\n+        link::OutputTypeObject | link::OutputTypeExe => ~\"o\"\n     };\n \n     match *ofile {"}, {"sha": "524ef938dd8bc260845ef374a2eb88992cb49cde", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/520c82e0e971f4107d09ae18670274a278fac382/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/520c82e0e971f4107d09ae18670274a278fac382/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=520c82e0e971f4107d09ae18670274a278fac382", "patch": "@@ -147,7 +147,7 @@ pub struct options {\n     extra_debuginfo: bool,\n     lint_opts: ~[(lint::lint, lint::level)],\n     save_temps: bool,\n-    output_type: back::link::output_type,\n+    output_type: back::link::OutputType,\n     // This is mutable for rustpkg, which updates search paths based on the\n     // parsed code.\n     addl_lib_search_paths: @RefCell<HashSet<Path>>,\n@@ -385,7 +385,7 @@ pub fn basic_options() -> @options {\n         extra_debuginfo: false,\n         lint_opts: ~[],\n         save_temps: false,\n-        output_type: link::output_type_exe,\n+        output_type: link::OutputTypeExe,\n         addl_lib_search_paths: @RefCell::new(HashSet::new()),\n         ar: None,\n         linker: None,"}, {"sha": "c1fa67171b5caa70f6a71cccacba651006a4b4ba", "filename": "src/librustpkg/util.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/520c82e0e971f4107d09ae18670274a278fac382/src%2Flibrustpkg%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/520c82e0e971f4107d09ae18670274a278fac382/src%2Flibrustpkg%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Futil.rs?ref=520c82e0e971f4107d09ae18670274a278fac382", "patch": "@@ -26,7 +26,7 @@ use syntax::attr::AttrMetaMethods;\n use syntax::fold::Folder;\n use syntax::visit::Visitor;\n use syntax::util::small_vector::SmallVector;\n-use rustc::back::link::output_type_exe;\n+use rustc::back::link::OutputTypeExe;\n use rustc::back::link;\n use CtxMethods;\n use context::{in_target, StopBefore, Link, Assemble, BuildContext};\n@@ -219,12 +219,12 @@ pub fn compile_input(context: &BuildContext,\n     debug!(\"sysroot_to_use = {}\", sysroot_to_use.display());\n \n     let output_type = match context.compile_upto() {\n-        Assemble => link::output_type_assembly,\n-        Link     => link::output_type_object,\n-        Pretty | Trans | Analysis => link::output_type_none,\n-        LLVMAssemble => link::output_type_llvm_assembly,\n-        LLVMCompileBitcode => link::output_type_bitcode,\n-        Nothing => link::output_type_exe\n+        Assemble => link::OutputTypeAssembly,\n+        Link     => link::OutputTypeObject,\n+        Pretty | Trans | Analysis => link::OutputTypeNone,\n+        LLVMAssemble => link::OutputTypeLlvmAssembly,\n+        LLVMCompileBitcode => link::OutputTypeBitcode,\n+        Nothing => link::OutputTypeExe\n     };\n \n     debug!(\"Output type = {:?}\", output_type);"}]}