{"sha": "5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b", "node_id": "C_kwDOAAsO6NoAKDVjYTZmN2QyYzM0OTUzZWUzNjBjY2Y3ZDNjODRjNzg1M2VhMmRmNGI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-13T10:56:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-13T10:56:53Z"}, "message": "Auto merge of #106801 - JohnTitor:rollup-xqkraw0, r=JohnTitor\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #106608 (Render missing generics suggestion verbosely)\n - #106716 ([RFC 2397] Deny incorrect locations)\n - #106754 (Rename `Ty::is_ty_infer` -> `Ty::is_ty_or_numeric_infer`)\n - #106782 (Ignore tests move in git blame)\n - #106785 (Make blame spans better for impl wfcheck)\n - #106791 (Fix ICE formatting)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "305d6145c0f91464cbf1bd64f12555c4cb81e584", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/305d6145c0f91464cbf1bd64f12555c4cb81e584"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b", "html_url": "https://github.com/rust-lang/rust/commit/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a04f252f91b2ccef6fc16817b3e7a3aeda703b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a04f252f91b2ccef6fc16817b3e7a3aeda703b6", "html_url": "https://github.com/rust-lang/rust/commit/4a04f252f91b2ccef6fc16817b3e7a3aeda703b6"}, {"sha": "c06d57eb198004b3c6dd151594a1137b8875f6f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/c06d57eb198004b3c6dd151594a1137b8875f6f1", "html_url": "https://github.com/rust-lang/rust/commit/c06d57eb198004b3c6dd151594a1137b8875f6f1"}], "stats": {"total": 491, "additions": 338, "deletions": 153}, "files": [{"sha": "d20f19e60e86033722853348908ff38b73898ac4", "filename": ".git-blame-ignore-revs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/.git-blame-ignore-revs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/.git-blame-ignore-revs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.git-blame-ignore-revs?ref=5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b", "patch": "@@ -8,3 +8,5 @@ a06baa56b95674fc626b3c3fd680d6a65357fe60\n 283abbf0e7d20176f76006825b5c52e9a4234e4c\n # format libstd/sys\n c34fbfaad38cf5829ef5cfe780dc9d58480adeaa\n+# move tests\n+cf2dff2b1e3fa55fa5415d524200070d0d7aacfe"}, {"sha": "f3050a6ef3f07f7964cf58a23bc3a858dd05b717", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b", "patch": "@@ -79,7 +79,7 @@ impl<'tcx> RegionErrors<'tcx> {\n     #[track_caller]\n     pub fn push(&mut self, val: impl Into<RegionErrorKind<'tcx>>) {\n         let val = val.into();\n-        self.1.sess.delay_span_bug(DUMMY_SP, \"{val:?}\");\n+        self.1.sess.delay_span_bug(DUMMY_SP, format!(\"{val:?}\"));\n         self.0.push(val);\n     }\n     pub fn is_empty(&self) -> bool {"}, {"sha": "91857dd227ddd602bb0eeee9eee8a291faa3ebbc", "filename": "compiler/rustc_error_messages/locales/en-US/passes.ftl", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl?ref=5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b", "patch": "@@ -4,6 +4,9 @@\n -passes_see_issue =\n     see issue #{$issue} <https://github.com/rust-lang/rust/issues/{$issue}> for more information\n \n+passes_incorrect_do_not_recommend_location =\n+    `#[do_not_recommend]` can only be placed on trait implementations\n+\n passes_outer_crate_level_attr =\n     crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n "}, {"sha": "92fd4625ee83574dbe515e06928cfe2373b5878a", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b", "patch": "@@ -1254,7 +1254,11 @@ fn check_impl<'tcx>(\n                 // therefore don't need to be WF (the trait's `Self: Trait` predicate\n                 // won't hold).\n                 let trait_ref = tcx.impl_trait_ref(item.owner_id).unwrap();\n-                let trait_ref = wfcx.normalize(ast_trait_ref.path.span, None, trait_ref);\n+                let trait_ref = wfcx.normalize(\n+                    ast_trait_ref.path.span,\n+                    Some(WellFormedLoc::Ty(item.hir_id().expect_owner().def_id)),\n+                    trait_ref,\n+                );\n                 let trait_pred = ty::TraitPredicate {\n                     trait_ref,\n                     constness: match constness {\n@@ -1263,14 +1267,21 @@ fn check_impl<'tcx>(\n                     },\n                     polarity: ty::ImplPolarity::Positive,\n                 };\n-                let obligations = traits::wf::trait_obligations(\n+                let mut obligations = traits::wf::trait_obligations(\n                     wfcx.infcx,\n                     wfcx.param_env,\n                     wfcx.body_id,\n                     &trait_pred,\n                     ast_trait_ref.path.span,\n                     item,\n                 );\n+                for obligation in &mut obligations {\n+                    if let Some(pred) = obligation.predicate.to_opt_poly_trait_pred()\n+                        && pred.self_ty().skip_binder() == trait_ref.self_ty()\n+                    {\n+                        obligation.cause.span = ast_self_ty.span;\n+                    }\n+                }\n                 debug!(?obligations);\n                 wfcx.register_obligations(obligations);\n             }"}, {"sha": "2dbfc1bc9a229c4a4a069ddf76ab79cbb26db179", "filename": "compiler/rustc_hir_analysis/src/hir_wf_check.rs", "status": "modified", "additions": 29, "deletions": 17, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/compiler%2Frustc_hir_analysis%2Fsrc%2Fhir_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/compiler%2Frustc_hir_analysis%2Fsrc%2Fhir_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fhir_wf_check.rs?ref=5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b", "patch": "@@ -114,51 +114,63 @@ fn diagnostic_hir_wf_check<'tcx>(\n     // Get the starting `hir::Ty` using our `WellFormedLoc`.\n     // We will walk 'into' this type to try to find\n     // a more precise span for our predicate.\n-    let ty = match loc {\n+    let tys = match loc {\n         WellFormedLoc::Ty(_) => match hir.get(hir_id) {\n             hir::Node::ImplItem(item) => match item.kind {\n-                hir::ImplItemKind::Type(ty) => Some(ty),\n-                hir::ImplItemKind::Const(ty, _) => Some(ty),\n+                hir::ImplItemKind::Type(ty) => vec![ty],\n+                hir::ImplItemKind::Const(ty, _) => vec![ty],\n                 ref item => bug!(\"Unexpected ImplItem {:?}\", item),\n             },\n             hir::Node::TraitItem(item) => match item.kind {\n-                hir::TraitItemKind::Type(_, ty) => ty,\n-                hir::TraitItemKind::Const(ty, _) => Some(ty),\n+                hir::TraitItemKind::Type(_, ty) => ty.into_iter().collect(),\n+                hir::TraitItemKind::Const(ty, _) => vec![ty],\n                 ref item => bug!(\"Unexpected TraitItem {:?}\", item),\n             },\n             hir::Node::Item(item) => match item.kind {\n-                hir::ItemKind::Static(ty, _, _) | hir::ItemKind::Const(ty, _) => Some(ty),\n-                hir::ItemKind::Impl(ref impl_) => {\n-                    assert!(impl_.of_trait.is_none(), \"Unexpected trait impl: {:?}\", impl_);\n-                    Some(impl_.self_ty)\n-                }\n+                hir::ItemKind::Static(ty, _, _) | hir::ItemKind::Const(ty, _) => vec![ty],\n+                hir::ItemKind::Impl(ref impl_) => match &impl_.of_trait {\n+                    Some(t) => t\n+                        .path\n+                        .segments\n+                        .last()\n+                        .iter()\n+                        .flat_map(|seg| seg.args().args)\n+                        .filter_map(|arg| {\n+                            if let hir::GenericArg::Type(ty) = arg { Some(*ty) } else { None }\n+                        })\n+                        .chain([impl_.self_ty])\n+                        .collect(),\n+                    None => {\n+                        vec![impl_.self_ty]\n+                    }\n+                },\n                 ref item => bug!(\"Unexpected item {:?}\", item),\n             },\n-            hir::Node::Field(field) => Some(field.ty),\n+            hir::Node::Field(field) => vec![field.ty],\n             hir::Node::ForeignItem(ForeignItem {\n                 kind: ForeignItemKind::Static(ty, _), ..\n-            }) => Some(*ty),\n+            }) => vec![*ty],\n             hir::Node::GenericParam(hir::GenericParam {\n                 kind: hir::GenericParamKind::Type { default: Some(ty), .. },\n                 ..\n-            }) => Some(*ty),\n+            }) => vec![*ty],\n             ref node => bug!(\"Unexpected node {:?}\", node),\n         },\n         WellFormedLoc::Param { function: _, param_idx } => {\n             let fn_decl = hir.fn_decl_by_hir_id(hir_id).unwrap();\n             // Get return type\n             if param_idx as usize == fn_decl.inputs.len() {\n                 match fn_decl.output {\n-                    hir::FnRetTy::Return(ty) => Some(ty),\n+                    hir::FnRetTy::Return(ty) => vec![ty],\n                     // The unit type `()` is always well-formed\n-                    hir::FnRetTy::DefaultReturn(_span) => None,\n+                    hir::FnRetTy::DefaultReturn(_span) => vec![],\n                 }\n             } else {\n-                Some(&fn_decl.inputs[param_idx as usize])\n+                vec![&fn_decl.inputs[param_idx as usize]]\n             }\n         }\n     };\n-    if let Some(ty) = ty {\n+    for ty in tys {\n         visitor.visit_ty(ty);\n     }\n     visitor.cause"}, {"sha": "533a3c768eb1693144f6673fcb5175bb2ab68b95", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b", "patch": "@@ -1782,9 +1782,9 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                             // like when you have two references but one is `usize` and the other\n                             // is `f32`. In those cases we still want to show the `note`. If the\n                             // value from `ef` is `Infer(_)`, then we ignore it.\n-                            if !ef.expected.is_ty_infer() {\n+                            if !ef.expected.is_ty_or_numeric_infer() {\n                                 ef.expected != values.expected\n-                            } else if !ef.found.is_ty_infer() {\n+                            } else if !ef.found.is_ty_or_numeric_infer() {\n                                 ef.found != values.found\n                             } else {\n                                 false"}, {"sha": "b8c843a8a5a225f36b692f6c786d29f4a9c85d4b", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b", "patch": "@@ -78,7 +78,7 @@ impl InferenceDiagnosticsData {\n     }\n \n     fn where_x_is_kind(&self, in_type: Ty<'_>) -> &'static str {\n-        if in_type.is_ty_infer() {\n+        if in_type.is_ty_or_numeric_infer() {\n             \"\"\n         } else if self.name == \"_\" {\n             // FIXME: Consider specializing this message if there is a single `_`\n@@ -195,12 +195,12 @@ fn ty_to_string<'tcx>(\n         // invalid pseudo-syntax, we want the `fn`-pointer output instead.\n         (ty::FnDef(..), _) => ty.fn_sig(infcx.tcx).print(printer).unwrap().into_buffer(),\n         (_, Some(def_id))\n-            if ty.is_ty_infer()\n+            if ty.is_ty_or_numeric_infer()\n                 && infcx.tcx.get_diagnostic_item(sym::iterator_collect_fn) == Some(def_id) =>\n         {\n             \"Vec<_>\".to_string()\n         }\n-        _ if ty.is_ty_infer() => \"/* Type */\".to_string(),\n+        _ if ty.is_ty_or_numeric_infer() => \"/* Type */\".to_string(),\n         // FIXME: The same thing for closures, but this only works when the closure\n         // does not capture anything.\n         //\n@@ -680,7 +680,7 @@ impl<'tcx> InferSourceKind<'tcx> {\n             | InferSourceKind::ClosureReturn { ty, .. } => {\n                 if ty.is_closure() {\n                     (\"closure\", closure_as_fn_str(infcx, ty))\n-                } else if !ty.is_ty_infer() {\n+                } else if !ty.is_ty_or_numeric_infer() {\n                     (\"normal\", ty_to_string(infcx, ty, None))\n                 } else {\n                     (\"other\", String::new())\n@@ -813,7 +813,7 @@ impl<'a, 'tcx> FindInferSourceVisitor<'a, 'tcx> {\n         self.attempt += 1;\n         if let Some(InferSource { kind: InferSourceKind::GenericArg { def_id: did, ..}, .. }) = self.infer_source\n             && let InferSourceKind::LetBinding { ref ty, ref mut def_id, ..} = new_source.kind\n-            && ty.is_ty_infer()\n+            && ty.is_ty_or_numeric_infer()\n         {\n             // Customize the output so we talk about `let x: Vec<_> = iter.collect();` instead of\n             // `let x: _ = iter.collect();`, as this is a very common case."}, {"sha": "bd5b04d5b2baac92b05047c271e24954d8817df8", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b", "patch": "@@ -1686,7 +1686,7 @@ impl<'tcx> Ty<'tcx> {\n     }\n \n     #[inline]\n-    pub fn is_ty_infer(self) -> bool {\n+    pub fn is_ty_or_numeric_infer(self) -> bool {\n         matches!(self.kind(), Infer(_))\n     }\n "}, {"sha": "2dec58ea82a30cbecb1c214e48a7047dd6a780e6", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b", "patch": "@@ -202,7 +202,7 @@ impl<'tcx> GenericArg<'tcx> {\n     pub fn is_non_region_infer(self) -> bool {\n         match self.unpack() {\n             GenericArgKind::Lifetime(_) => false,\n-            GenericArgKind::Type(ty) => ty.is_ty_infer(),\n+            GenericArgKind::Type(ty) => ty.is_ty_or_numeric_infer(),\n             GenericArgKind::Const(ct) => ct.is_ct_infer(),\n         }\n     }"}, {"sha": "f9f9799d3e4f2058bf9911a23a60c22d9cf2837f", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b", "patch": "@@ -82,6 +82,7 @@ impl CheckAttrVisitor<'_> {\n         let attrs = self.tcx.hir().attrs(hir_id);\n         for attr in attrs {\n             let attr_is_valid = match attr.name_or_empty() {\n+                sym::do_not_recommend => self.check_do_not_recommend(attr.span, target),\n                 sym::inline => self.check_inline(hir_id, attr, span, target),\n                 sym::no_coverage => self.check_no_coverage(hir_id, attr, span, target),\n                 sym::non_exhaustive => self.check_non_exhaustive(hir_id, attr, span, target),\n@@ -241,6 +242,16 @@ impl CheckAttrVisitor<'_> {\n         );\n     }\n \n+    /// Checks if `#[do_not_recommend]` is applied on a trait impl.\n+    fn check_do_not_recommend(&self, attr_span: Span, target: Target) -> bool {\n+        if let Target::Impl = target {\n+            true\n+        } else {\n+            self.tcx.sess.emit_err(errors::IncorrectDoNotRecommendLocation { span: attr_span });\n+            false\n+        }\n+    }\n+\n     /// Checks if an `#[inline]` is applied to a function or a closure. Returns `true` if valid.\n     fn check_inline(&self, hir_id: HirId, attr: &Attribute, span: Span, target: Target) -> bool {\n         match target {"}, {"sha": "9c6519ea4bb24be91a133b22d716ca376593ae4d", "filename": "compiler/rustc_passes/src/errors.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs?ref=5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b", "patch": "@@ -14,6 +14,13 @@ use rustc_span::{Span, Symbol, DUMMY_SP};\n \n use crate::lang_items::Duplicate;\n \n+#[derive(Diagnostic)]\n+#[diag(passes_incorrect_do_not_recommend_location)]\n+pub struct IncorrectDoNotRecommendLocation {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n #[derive(LintDiagnostic)]\n #[diag(passes_outer_crate_level_attr)]\n pub struct OuterCrateLevelAttr;"}, {"sha": "fb2aebbd18a3d8508e5d06fc0eeba2e58f479f7a", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b", "patch": "@@ -167,7 +167,7 @@ impl<'a> Resolver<'a> {\n                 );\n                 err.emit();\n             } else if let Some((span, msg, sugg, appl)) = suggestion {\n-                err.span_suggestion(span, msg, sugg, appl);\n+                err.span_suggestion_verbose(span, msg, sugg, appl);\n                 err.emit();\n             } else if let [segment] = path.as_slice() && is_call {\n                 err.stash(segment.ident.span, rustc_errors::StashKey::CallIntoMethod);"}, {"sha": "d92b046d0b9f226fe3bb0f3111a09658acef8303", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b", "patch": "@@ -2065,7 +2065,11 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         path: &[Segment],\n     ) -> Option<(Span, &'static str, String, Applicability)> {\n         let (ident, span) = match path {\n-            [segment] if !segment.has_generic_args && segment.ident.name != kw::SelfUpper => {\n+            [segment]\n+                if !segment.has_generic_args\n+                    && segment.ident.name != kw::SelfUpper\n+                    && segment.ident.name != kw::Dyn =>\n+            {\n                 (segment.ident.to_string(), segment.ident.span)\n             }\n             _ => return None,"}, {"sha": "0c7ffb056cc0256e4177ba9a4a1aba7943eba29e", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b", "patch": "@@ -2252,8 +2252,11 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     Ok(None) => {\n                         let ambiguities =\n                             ambiguity::recompute_applicable_impls(self.infcx, &obligation);\n-                        let has_non_region_infer =\n-                            trait_ref.skip_binder().substs.types().any(|t| !t.is_ty_infer());\n+                        let has_non_region_infer = trait_ref\n+                            .skip_binder()\n+                            .substs\n+                            .types()\n+                            .any(|t| !t.is_ty_or_numeric_infer());\n                         // It doesn't make sense to talk about applicable impls if there are more\n                         // than a handful of them.\n                         if ambiguities.len() > 1 && ambiguities.len() < 10 && has_non_region_infer {"}, {"sha": "efdd56dd47d396329b653c03804c8ed1db98d75c", "filename": "src/tools/clippy/tests/ui/crashes/ice-6252.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-6252.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-6252.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-6252.stderr?ref=5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b", "patch": "@@ -17,9 +17,12 @@ error[E0412]: cannot find type `VAL` in this scope\n   --> $DIR/ice-6252.rs:10:63\n    |\n LL | impl<N, M> TypeVal<usize> for Multiply<N, M> where N: TypeVal<VAL> {}\n-   |          -                                                    ^^^ not found in this scope\n-   |          |\n-   |          help: you might be missing a type parameter: `, VAL`\n+   |                                                               ^^^ not found in this scope\n+   |\n+help: you might be missing a type parameter\n+   |\n+LL | impl<N, M, VAL> TypeVal<usize> for Multiply<N, M> where N: TypeVal<VAL> {}\n+   |          +++++\n \n error[E0046]: not all trait items implemented, missing: `VAL`\n   --> $DIR/ice-6252.rs:10:1"}, {"sha": "592aa4369ce0d404606962514f33ea83a08f623e", "filename": "tests/ui/builtin-superkinds/builtin-superkinds-double-superkind.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-double-superkind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-double-superkind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-double-superkind.stderr?ref=5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: `T` cannot be sent between threads safely\n-  --> $DIR/builtin-superkinds-double-superkind.rs:6:24\n+  --> $DIR/builtin-superkinds-double-superkind.rs:6:32\n    |\n LL | impl <T: Sync+'static> Foo for (T,) { }\n-   |                        ^^^ `T` cannot be sent between threads safely\n+   |                                ^^^^ `T` cannot be sent between threads safely\n    |\n    = note: required because it appears within the type `(T,)`\n note: required by a bound in `Foo`\n@@ -16,10 +16,10 @@ LL | impl <T: Sync+'static + std::marker::Send> Foo for (T,) { }\n    |                       +++++++++++++++++++\n \n error[E0277]: `T` cannot be shared between threads safely\n-  --> $DIR/builtin-superkinds-double-superkind.rs:9:16\n+  --> $DIR/builtin-superkinds-double-superkind.rs:9:24\n    |\n LL | impl <T: Send> Foo for (T,T) { }\n-   |                ^^^ `T` cannot be shared between threads safely\n+   |                        ^^^^^ `T` cannot be shared between threads safely\n    |\n    = note: required because it appears within the type `(T, T)`\n note: required by a bound in `Foo`"}, {"sha": "f9d548bb8fbe938a3e4093337db91eec8996c784", "filename": "tests/ui/builtin-superkinds/builtin-superkinds-in-metadata.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-in-metadata.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-in-metadata.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-in-metadata.stderr?ref=5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: `T` cannot be sent between threads safely\n-  --> $DIR/builtin-superkinds-in-metadata.rs:13:23\n+  --> $DIR/builtin-superkinds-in-metadata.rs:13:56\n    |\n LL | impl <T:Sync+'static> RequiresRequiresShareAndSend for X<T> { }\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `T` cannot be sent between threads safely\n+   |                                                        ^^^^ `T` cannot be sent between threads safely\n    |\n note: required because it appears within the type `X<T>`\n   --> $DIR/builtin-superkinds-in-metadata.rs:9:8"}, {"sha": "8b19170b0f100e86ea03c8aeed6be1fdf059c46c", "filename": "tests/ui/builtin-superkinds/builtin-superkinds-simple.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-simple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-simple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-simple.stderr?ref=5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: `Rc<i8>` cannot be sent between threads safely\n-  --> $DIR/builtin-superkinds-simple.rs:6:6\n+  --> $DIR/builtin-superkinds-simple.rs:6:14\n    |\n LL | impl Foo for std::rc::Rc<i8> { }\n-   |      ^^^ `Rc<i8>` cannot be sent between threads safely\n+   |              ^^^^^^^^^^^^^^^ `Rc<i8>` cannot be sent between threads safely\n    |\n    = help: the trait `Send` is not implemented for `Rc<i8>`\n note: required by a bound in `Foo`"}, {"sha": "0cfea72d5f184dddebc0027c2fc9a9def07c7afd", "filename": "tests/ui/builtin-superkinds/builtin-superkinds-typaram-not-send.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-typaram-not-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-typaram-not-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-typaram-not-send.stderr?ref=5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: `T` cannot be sent between threads safely\n-  --> $DIR/builtin-superkinds-typaram-not-send.rs:5:24\n+  --> $DIR/builtin-superkinds-typaram-not-send.rs:5:32\n    |\n LL | impl <T: Sync+'static> Foo for T { }\n-   |                        ^^^ `T` cannot be sent between threads safely\n+   |                                ^ `T` cannot be sent between threads safely\n    |\n note: required by a bound in `Foo`\n   --> $DIR/builtin-superkinds-typaram-not-send.rs:3:13"}, {"sha": "84c32fa3771a061a2c365335dcfd993f0df8dce4", "filename": "tests/ui/chalkify/impl_wf.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Fchalkify%2Fimpl_wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Fchalkify%2Fimpl_wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchalkify%2Fimpl_wf.stderr?ref=5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the size for values of type `str` cannot be known at compilation time\n-  --> $DIR/impl_wf.rs:11:6\n+  --> $DIR/impl_wf.rs:11:14\n    |\n LL | impl Foo for str { }\n-   |      ^^^ doesn't have a size known at compile-time\n+   |              ^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `str`\n note: required by a bound in `Foo`\n@@ -12,10 +12,10 @@ LL | trait Foo: Sized { }\n    |            ^^^^^ required by this bound in `Foo`\n \n error[E0277]: the trait bound `f32: Foo` is not satisfied\n-  --> $DIR/impl_wf.rs:22:6\n+  --> $DIR/impl_wf.rs:22:19\n    |\n LL | impl Baz<f32> for f32 { }\n-   |      ^^^^^^^^ the trait `Foo` is not implemented for `f32`\n+   |                   ^^^ the trait `Foo` is not implemented for `f32`\n    |\n    = help: the trait `Foo` is implemented for `i32`\n note: required by a bound in `Baz`"}, {"sha": "668b8319b3875fba17d26ceda66a8b3700ced1bc", "filename": "tests/ui/coherence/coherence-overlap-trait-alias.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Fcoherence%2Fcoherence-overlap-trait-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Fcoherence%2Fcoherence-overlap-trait-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcoherence%2Fcoherence-overlap-trait-alias.stderr?ref=5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b", "patch": "@@ -1,8 +1,8 @@\n error[E0283]: type annotations needed: cannot satisfy `u32: C`\n-  --> $DIR/coherence-overlap-trait-alias.rs:15:6\n+  --> $DIR/coherence-overlap-trait-alias.rs:15:12\n    |\n LL | impl C for u32 {}\n-   |      ^\n+   |            ^^^\n    |\n note: multiple `impl`s satisfying `u32: C` found\n   --> $DIR/coherence-overlap-trait-alias.rs:14:1"}, {"sha": "60e9de90332cc381dff3058e401659ece13e34f4", "filename": "tests/ui/dst/dst-sized-trait-param.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Fdst%2Fdst-sized-trait-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Fdst%2Fdst-sized-trait-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdst%2Fdst-sized-trait-param.stderr?ref=5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b", "patch": "@@ -16,10 +16,10 @@ LL | trait Foo<T: ?Sized> : Sized { fn take(self, x: &T) { } } // Note: T is siz\n    |            ++++++++\n \n error[E0277]: the size for values of type `[usize]` cannot be known at compilation time\n-  --> $DIR/dst-sized-trait-param.rs:10:6\n+  --> $DIR/dst-sized-trait-param.rs:10:21\n    |\n LL | impl Foo<isize> for [usize] { }\n-   |      ^^^^^^^^^^ doesn't have a size known at compile-time\n+   |                     ^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `[usize]`\n note: required by a bound in `Foo`"}, {"sha": "3a8a81a73a6cec4a598845accd4d88f6350f0619", "filename": "tests/ui/error-codes/E0308-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Ferror-codes%2FE0308-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Ferror-codes%2FE0308-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0308-2.stderr?ref=5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b", "patch": "@@ -1,8 +1,8 @@\n error[E0308]: mismatched types\n-  --> $DIR/E0308-2.rs:9:6\n+  --> $DIR/E0308-2.rs:9:13\n    |\n LL | impl Eq for &dyn DynEq {}\n-   |      ^^ lifetime mismatch\n+   |             ^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected trait `<&dyn DynEq as PartialEq>`\n               found trait `<&(dyn DynEq + 'static) as PartialEq>`"}, {"sha": "9d4ea01152cc9d0374ede99fba3fb24d377a4548", "filename": "tests/ui/functions-closures/fn-help-with-err-generic-is-not-function.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Ffunctions-closures%2Ffn-help-with-err-generic-is-not-function.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Ffunctions-closures%2Ffn-help-with-err-generic-is-not-function.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffunctions-closures%2Ffn-help-with-err-generic-is-not-function.stderr?ref=5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b", "patch": "@@ -2,9 +2,12 @@ error[E0412]: cannot find type `T` in this scope\n   --> $DIR/fn-help-with-err-generic-is-not-function.rs:2:13\n    |\n LL | impl Struct<T>\n-   |     -       ^ not found in this scope\n-   |     |\n-   |     help: you might be missing a type parameter: `<T>`\n+   |             ^ not found in this scope\n+   |\n+help: you might be missing a type parameter\n+   |\n+LL | impl<T> Struct<T>\n+   |     +++\n \n error[E0412]: cannot find type `T` in this scope\n   --> $DIR/fn-help-with-err-generic-is-not-function.rs:7:5"}, {"sha": "f4bd4d1e826a0d16224a5b76fe79c36e957fd590", "filename": "tests/ui/issues/issue-58712.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Fissues%2Fissue-58712.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Fissues%2Fissue-58712.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-58712.stderr?ref=5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b", "patch": "@@ -2,9 +2,12 @@ error[E0412]: cannot find type `DeviceId` in this scope\n   --> $DIR/issue-58712.rs:6:20\n    |\n LL | impl<H> AddrVec<H, DeviceId> {\n-   |       -            ^^^^^^^^ not found in this scope\n-   |       |\n-   |       help: you might be missing a type parameter: `, DeviceId`\n+   |                    ^^^^^^^^ not found in this scope\n+   |\n+help: you might be missing a type parameter\n+   |\n+LL | impl<H, DeviceId> AddrVec<H, DeviceId> {\n+   |       ++++++++++\n \n error[E0412]: cannot find type `DeviceId` in this scope\n   --> $DIR/issue-58712.rs:8:29"}, {"sha": "7ccab88948371bd63ec4885fd722919f8736c518", "filename": "tests/ui/issues/issue-65230.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Fissues%2Fissue-65230.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Fissues%2Fissue-65230.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-65230.stderr?ref=5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b", "patch": "@@ -1,8 +1,8 @@\n error[E0308]: mismatched types\n-  --> $DIR/issue-65230.rs:8:6\n+  --> $DIR/issue-65230.rs:8:13\n    |\n LL | impl T1 for &dyn T2 {}\n-   |      ^^ lifetime mismatch\n+   |             ^^^^^^^ lifetime mismatch\n    |\n    = note: expected trait `<&dyn T2 as T0>`\n               found trait `<&(dyn T2 + 'static) as T0>`"}, {"sha": "d154bfe0cb553daec484377669b5cfec1693e8b5", "filename": "tests/ui/issues/issue-77919.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Fissues%2Fissue-77919.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Fissues%2Fissue-77919.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-77919.stderr?ref=5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b", "patch": "@@ -13,9 +13,12 @@ error[E0412]: cannot find type `VAL` in this scope\n   --> $DIR/issue-77919.rs:11:63\n    |\n LL | impl<N, M> TypeVal<usize> for Multiply<N, M> where N: TypeVal<VAL> {}\n-   |          -                                                    ^^^ not found in this scope\n-   |          |\n-   |          help: you might be missing a type parameter: `, VAL`\n+   |                                                               ^^^ not found in this scope\n+   |\n+help: you might be missing a type parameter\n+   |\n+LL | impl<N, M, VAL> TypeVal<usize> for Multiply<N, M> where N: TypeVal<VAL> {}\n+   |          +++++\n \n error[E0046]: not all trait items implemented, missing: `VAL`\n   --> $DIR/issue-77919.rs:11:1"}, {"sha": "bfa7459ab4a39088bb377be499d24dfce7b3b1a0", "filename": "tests/ui/issues/issue-86756.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Fissues%2Fissue-86756.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Fissues%2Fissue-86756.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-86756.stderr?ref=5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b", "patch": "@@ -9,8 +9,6 @@ LL | trait Foo<T, T = T> {}\n error[E0412]: cannot find type `dyn` in this scope\n   --> $DIR/issue-86756.rs:5:10\n    |\n-LL | fn eq<A, B>() {\n-   |           - help: you might be missing a type parameter: `, dyn`\n LL |     eq::<dyn, Foo>\n    |          ^^^ not found in this scope\n "}, {"sha": "3cd59d6926eb4a3f6c6c0c381baf77fb1f5c4047", "filename": "tests/ui/marker_trait_attr/overlap-marker-trait-with-underscore-lifetime.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Fmarker_trait_attr%2Foverlap-marker-trait-with-underscore-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Fmarker_trait_attr%2Foverlap-marker-trait-with-underscore-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmarker_trait_attr%2Foverlap-marker-trait-with-underscore-lifetime.stderr?ref=5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b", "patch": "@@ -1,8 +1,8 @@\n error[E0283]: type annotations needed: cannot satisfy `&(): Marker`\n-  --> $DIR/overlap-marker-trait-with-underscore-lifetime.rs:6:6\n+  --> $DIR/overlap-marker-trait-with-underscore-lifetime.rs:6:17\n    |\n LL | impl Marker for &'_ () {}\n-   |      ^^^^^^\n+   |                 ^^^^^^\n    |\n note: multiple `impl`s satisfying `&(): Marker` found\n   --> $DIR/overlap-marker-trait-with-underscore-lifetime.rs:6:1\n@@ -13,10 +13,10 @@ LL | impl Marker for &'_ () {}\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0283]: type annotations needed: cannot satisfy `&(): Marker`\n-  --> $DIR/overlap-marker-trait-with-underscore-lifetime.rs:7:6\n+  --> $DIR/overlap-marker-trait-with-underscore-lifetime.rs:7:17\n    |\n LL | impl Marker for &'_ () {}\n-   |      ^^^^^^\n+   |                 ^^^^^^\n    |\n note: multiple `impl`s satisfying `&(): Marker` found\n   --> $DIR/overlap-marker-trait-with-underscore-lifetime.rs:6:1"}, {"sha": "c6497b4669de6666eec7bb017f5b53b05d2c0245", "filename": "tests/ui/marker_trait_attr/region-overlap.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Fmarker_trait_attr%2Fregion-overlap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Fmarker_trait_attr%2Fregion-overlap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmarker_trait_attr%2Fregion-overlap.stderr?ref=5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b", "patch": "@@ -1,8 +1,8 @@\n error[E0283]: type annotations needed: cannot satisfy `(&'static (), &'a ()): A`\n-  --> $DIR/region-overlap.rs:5:10\n+  --> $DIR/region-overlap.rs:5:16\n    |\n LL | impl<'a> A for (&'static (), &'a ()) {}\n-   |          ^\n+   |                ^^^^^^^^^^^^^^^^^^^^^\n    |\n note: multiple `impl`s satisfying `(&'static (), &'a ()): A` found\n   --> $DIR/region-overlap.rs:5:1\n@@ -13,10 +13,10 @@ LL | impl<'a> A for (&'a (), &'static ()) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0283]: type annotations needed: cannot satisfy `(&'a (), &'static ()): A`\n-  --> $DIR/region-overlap.rs:6:10\n+  --> $DIR/region-overlap.rs:6:16\n    |\n LL | impl<'a> A for (&'a (), &'static ()) {}\n-   |          ^\n+   |                ^^^^^^^^^^^^^^^^^^^^^\n    |\n note: multiple `impl`s satisfying `(&'a (), &'static ()): A` found\n   --> $DIR/region-overlap.rs:5:1"}, {"sha": "0cae01bd1e32988a5d32043d8ed8f4303e809819", "filename": "tests/ui/parser/dyn-trait-compatibility.stderr", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Fparser%2Fdyn-trait-compatibility.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Fparser%2Fdyn-trait-compatibility.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fdyn-trait-compatibility.stderr?ref=5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b", "patch": "@@ -26,17 +26,13 @@ error[E0412]: cannot find type `dyn` in this scope\n   --> $DIR/dyn-trait-compatibility.rs:5:15\n    |\n LL | type A2 = dyn<dyn, dyn>;\n-   |        -      ^^^ not found in this scope\n-   |        |\n-   |        help: you might be missing a type parameter: `<dyn>`\n+   |               ^^^ not found in this scope\n \n error[E0412]: cannot find type `dyn` in this scope\n   --> $DIR/dyn-trait-compatibility.rs:5:20\n    |\n LL | type A2 = dyn<dyn, dyn>;\n-   |        -           ^^^ not found in this scope\n-   |        |\n-   |        help: you might be missing a type parameter: `<dyn>`\n+   |                    ^^^ not found in this scope\n \n error[E0412]: cannot find type `dyn` in this scope\n   --> $DIR/dyn-trait-compatibility.rs:9:11\n@@ -48,9 +44,7 @@ error[E0412]: cannot find type `dyn` in this scope\n   --> $DIR/dyn-trait-compatibility.rs:9:16\n    |\n LL | type A3 = dyn<<dyn as dyn>::dyn>;\n-   |        -       ^^^ not found in this scope\n-   |        |\n-   |        help: you might be missing a type parameter: `<dyn>`\n+   |                ^^^ not found in this scope\n \n error: aborting due to 8 previous errors\n "}, {"sha": "91863f5e497878d70e112e3e02d12d807582b84f", "filename": "tests/ui/rfc-2397-do-not-recommend/incorrect-locations.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Frfc-2397-do-not-recommend%2Fincorrect-locations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Frfc-2397-do-not-recommend%2Fincorrect-locations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2397-do-not-recommend%2Fincorrect-locations.rs?ref=5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b", "patch": "@@ -0,0 +1,45 @@\n+#![feature(do_not_recommend)]\n+\n+#[do_not_recommend]\n+//~^ `#[do_not_recommend]` can only be placed\n+const CONST: () = ();\n+\n+#[do_not_recommend]\n+//~^ `#[do_not_recommend]` can only be placed\n+static Static: () = ();\n+\n+#[do_not_recommend]\n+//~^ `#[do_not_recommend]` can only be placed\n+type Type = ();\n+\n+#[do_not_recommend]\n+//~^ `#[do_not_recommend]` can only be placed\n+enum Enum {\n+}\n+\n+#[do_not_recommend]\n+//~^ `#[do_not_recommend]` can only be placed\n+extern {\n+}\n+\n+#[do_not_recommend]\n+//~^ `#[do_not_recommend]` can only be placed\n+fn fun() {\n+}\n+\n+#[do_not_recommend]\n+//~^ `#[do_not_recommend]` can only be placed\n+struct Struct {\n+}\n+\n+#[do_not_recommend]\n+//~^ `#[do_not_recommend]` can only be placed\n+trait Trait {\n+}\n+\n+#[do_not_recommend]\n+impl Trait for i32 {\n+}\n+\n+fn main() {\n+}"}, {"sha": "01ebc23c86e198d6e468fa71bd1d2bf1b485fc29", "filename": "tests/ui/rfc-2397-do-not-recommend/incorrect-locations.stderr", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Frfc-2397-do-not-recommend%2Fincorrect-locations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Frfc-2397-do-not-recommend%2Fincorrect-locations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2397-do-not-recommend%2Fincorrect-locations.stderr?ref=5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b", "patch": "@@ -0,0 +1,50 @@\n+error: `#[do_not_recommend]` can only be placed on trait implementations\n+  --> $DIR/incorrect-locations.rs:3:1\n+   |\n+LL | #[do_not_recommend]\n+   | ^^^^^^^^^^^^^^^^^^^\n+\n+error: `#[do_not_recommend]` can only be placed on trait implementations\n+  --> $DIR/incorrect-locations.rs:7:1\n+   |\n+LL | #[do_not_recommend]\n+   | ^^^^^^^^^^^^^^^^^^^\n+\n+error: `#[do_not_recommend]` can only be placed on trait implementations\n+  --> $DIR/incorrect-locations.rs:11:1\n+   |\n+LL | #[do_not_recommend]\n+   | ^^^^^^^^^^^^^^^^^^^\n+\n+error: `#[do_not_recommend]` can only be placed on trait implementations\n+  --> $DIR/incorrect-locations.rs:15:1\n+   |\n+LL | #[do_not_recommend]\n+   | ^^^^^^^^^^^^^^^^^^^\n+\n+error: `#[do_not_recommend]` can only be placed on trait implementations\n+  --> $DIR/incorrect-locations.rs:20:1\n+   |\n+LL | #[do_not_recommend]\n+   | ^^^^^^^^^^^^^^^^^^^\n+\n+error: `#[do_not_recommend]` can only be placed on trait implementations\n+  --> $DIR/incorrect-locations.rs:25:1\n+   |\n+LL | #[do_not_recommend]\n+   | ^^^^^^^^^^^^^^^^^^^\n+\n+error: `#[do_not_recommend]` can only be placed on trait implementations\n+  --> $DIR/incorrect-locations.rs:30:1\n+   |\n+LL | #[do_not_recommend]\n+   | ^^^^^^^^^^^^^^^^^^^\n+\n+error: `#[do_not_recommend]` can only be placed on trait implementations\n+  --> $DIR/incorrect-locations.rs:35:1\n+   |\n+LL | #[do_not_recommend]\n+   | ^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 8 previous errors\n+"}, {"sha": "f0c5c222e786f041132421b64149804c36d8f7e7", "filename": "tests/ui/rfc-2397-do-not-recommend/unstable-feature.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Frfc-2397-do-not-recommend%2Funstable-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Frfc-2397-do-not-recommend%2Funstable-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2397-do-not-recommend%2Funstable-feature.rs?ref=5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b", "patch": "@@ -1,6 +1,9 @@\n+trait Foo {\n+}\n+\n #[do_not_recommend]\n //~^ ERROR the `#[do_not_recommend]` attribute is an experimental feature\n-trait Foo {\n+impl Foo for i32 {\n }\n \n fn main() {"}, {"sha": "1597e5be45f8c68157f92c2f147ad158172bd85b", "filename": "tests/ui/rfc-2397-do-not-recommend/unstable-feature.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Frfc-2397-do-not-recommend%2Funstable-feature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Frfc-2397-do-not-recommend%2Funstable-feature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2397-do-not-recommend%2Funstable-feature.stderr?ref=5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: the `#[do_not_recommend]` attribute is an experimental feature\n-  --> $DIR/unstable-feature.rs:1:1\n+  --> $DIR/unstable-feature.rs:4:1\n    |\n LL | #[do_not_recommend]\n    | ^^^^^^^^^^^^^^^^^^^"}, {"sha": "bf12ef1ca77dfa9b0138f5f6000c4bb793c6bb39", "filename": "tests/ui/rfc-2632-const-trait-impl/super-traits-fail.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail.stderr?ref=5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b", "patch": "@@ -1,14 +1,14 @@\n error[E0277]: the trait bound `S: ~const Foo` is not satisfied\n-  --> $DIR/super-traits-fail.rs:15:12\n+  --> $DIR/super-traits-fail.rs:15:20\n    |\n LL | impl const Bar for S {}\n-   |            ^^^ the trait `~const Foo` is not implemented for `S`\n+   |                    ^ the trait `~const Foo` is not implemented for `S`\n    |\n note: the trait `Foo` is implemented for `S`, but that implementation is not `const`\n-  --> $DIR/super-traits-fail.rs:15:12\n+  --> $DIR/super-traits-fail.rs:15:20\n    |\n LL | impl const Bar for S {}\n-   |            ^^^\n+   |                    ^\n note: required by a bound in `Bar`\n   --> $DIR/super-traits-fail.rs:8:12\n    |"}, {"sha": "cb5cc320276d85b4ffcb40e9a8d949b045e99528", "filename": "tests/ui/span/issue-71363.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Fspan%2Fissue-71363.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Fspan%2Fissue-71363.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fissue-71363.stderr?ref=5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b", "patch": "@@ -1,19 +1,19 @@\n error[E0277]: `MyError` doesn't implement `std::fmt::Display`\n- --> $DIR/issue-71363.rs:4:6\n+ --> $DIR/issue-71363.rs:4:28\n   |\n 4 | impl std::error::Error for MyError {}\n-  |      ^^^^^^^^^^^^^^^^^ `MyError` cannot be formatted with the default formatter\n+  |                            ^^^^^^^ `MyError` cannot be formatted with the default formatter\n   |\n   = help: the trait `std::fmt::Display` is not implemented for `MyError`\n   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n note: required by a bound in `std::error::Error`\n  --> $SRC_DIR/core/src/error.rs:LL:COL\n \n error[E0277]: `MyError` doesn't implement `Debug`\n- --> $DIR/issue-71363.rs:4:6\n+ --> $DIR/issue-71363.rs:4:28\n   |\n 4 | impl std::error::Error for MyError {}\n-  |      ^^^^^^^^^^^^^^^^^ `MyError` cannot be formatted using `{:?}`\n+  |                            ^^^^^^^ `MyError` cannot be formatted using `{:?}`\n   |\n   = help: the trait `Debug` is not implemented for `MyError`\n   = note: add `#[derive(Debug)]` to `MyError` or manually `impl Debug for MyError`"}, {"sha": "505baa23ca336c8c6202f23d14fec317fca13838", "filename": "tests/ui/specialization/min_specialization/issue-79224.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fissue-79224.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fissue-79224.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fissue-79224.stderr?ref=5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `B: Clone` is not satisfied\n-  --> $DIR/issue-79224.rs:18:17\n+  --> $DIR/issue-79224.rs:18:29\n    |\n LL | impl<B: ?Sized> Display for Cow<'_, B> {\n-   |                 ^^^^^^^ the trait `Clone` is not implemented for `B`\n+   |                             ^^^^^^^^^^ the trait `Clone` is not implemented for `B`\n    |\n    = note: required for `B` to implement `ToOwned`\n help: consider further restricting this bound"}, {"sha": "934ba87bbaa8872fd649cbc22920c9c4a5c7bb05", "filename": "tests/ui/suggestions/type-not-found-in-adt-field.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Fsuggestions%2Ftype-not-found-in-adt-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Fsuggestions%2Ftype-not-found-in-adt-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Ftype-not-found-in-adt-field.stderr?ref=5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b", "patch": "@@ -7,10 +7,13 @@ LL |     m: Vec<Someunknownname<String, ()>>,\n error[E0412]: cannot find type `K` in this scope\n   --> $DIR/type-not-found-in-adt-field.rs:6:8\n    |\n-LL | struct OtherStruct {\n-   |                   - help: you might be missing a type parameter: `<K>`\n LL |     m: K,\n    |        ^ not found in this scope\n+   |\n+help: you might be missing a type parameter\n+   |\n+LL | struct OtherStruct<K> {\n+   |                   +++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "da27ba1c58dbee7913b913838477ca5d751859c7", "filename": "tests/ui/trait-bounds/unsized-bound.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Ftrait-bounds%2Funsized-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Ftrait-bounds%2Funsized-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrait-bounds%2Funsized-bound.stderr?ref=5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the size for values of type `B` cannot be known at compilation time\n-  --> $DIR/unsized-bound.rs:2:12\n+  --> $DIR/unsized-bound.rs:2:30\n    |\n LL | impl<A, B> Trait<(A, B)> for (A, B) where A: ?Sized, B: ?Sized, {}\n-   |         -  ^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |         -                    ^^^^^^ doesn't have a size known at compile-time\n    |         |\n    |         this type parameter needs to be `std::marker::Sized`\n    |\n@@ -38,10 +38,10 @@ LL + impl<A, B> Trait<(A, B)> for (A, B) where B: ?Sized, {}\n    |\n \n error[E0277]: the size for values of type `C` cannot be known at compilation time\n-  --> $DIR/unsized-bound.rs:5:31\n+  --> $DIR/unsized-bound.rs:5:52\n    |\n LL | impl<A, B: ?Sized, C: ?Sized> Trait<(A, B, C)> for (A, B, C) where A: ?Sized, {}\n-   |                    -          ^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |                    -                               ^^^^^^^^^ doesn't have a size known at compile-time\n    |                    |\n    |                    this type parameter needs to be `std::marker::Sized`\n    |\n@@ -92,10 +92,10 @@ LL + impl<A, B, C: ?Sized> Trait<(A, B, C)> for (A, B, C) where A: ?Sized, {}\n    |\n \n error[E0277]: the size for values of type `B` cannot be known at compilation time\n-  --> $DIR/unsized-bound.rs:10:28\n+  --> $DIR/unsized-bound.rs:10:47\n    |\n LL | impl<A: ?Sized, B: ?Sized> Trait2<(A, B)> for (A, B) {}\n-   |                 -          ^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |                 -                             ^^^^^^ doesn't have a size known at compile-time\n    |                 |\n    |                 this type parameter needs to be `std::marker::Sized`\n    |\n@@ -131,10 +131,10 @@ LL + impl<A, B: ?Sized> Trait2<(A, B)> for (A, B) {}\n    |\n \n error[E0277]: the size for values of type `A` cannot be known at compilation time\n-  --> $DIR/unsized-bound.rs:14:9\n+  --> $DIR/unsized-bound.rs:14:23\n    |\n LL | impl<A> Trait3<A> for A where A: ?Sized {}\n-   |      -  ^^^^^^^^^ doesn't have a size known at compile-time\n+   |      -                ^ doesn't have a size known at compile-time\n    |      |\n    |      this type parameter needs to be `std::marker::Sized`\n    |\n@@ -154,10 +154,10 @@ LL | trait Trait3<A: ?Sized> {}\n    |               ++++++++\n \n error[E0277]: the size for values of type `A` cannot be known at compilation time\n-  --> $DIR/unsized-bound.rs:17:17\n+  --> $DIR/unsized-bound.rs:17:31\n    |\n LL | impl<A: ?Sized> Trait4<A> for A {}\n-   |      -          ^^^^^^^^^ doesn't have a size known at compile-time\n+   |      -                        ^ doesn't have a size known at compile-time\n    |      |\n    |      this type parameter needs to be `std::marker::Sized`\n    |\n@@ -177,10 +177,10 @@ LL | trait Trait4<A: ?Sized> {}\n    |               ++++++++\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n-  --> $DIR/unsized-bound.rs:20:12\n+  --> $DIR/unsized-bound.rs:20:29\n    |\n LL | impl<X, Y> Trait5<X, Y> for X where X: ?Sized {}\n-   |      -     ^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |      -                      ^ doesn't have a size known at compile-time\n    |      |\n    |      this type parameter needs to be `std::marker::Sized`\n    |\n@@ -200,10 +200,10 @@ LL | trait Trait5<A: ?Sized, B> {}\n    |               ++++++++\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n-  --> $DIR/unsized-bound.rs:23:20\n+  --> $DIR/unsized-bound.rs:23:37\n    |\n LL | impl<X: ?Sized, Y> Trait6<X, Y> for X {}\n-   |      -             ^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |      -                              ^ doesn't have a size known at compile-time\n    |      |\n    |      this type parameter needs to be `std::marker::Sized`\n    |"}, {"sha": "45bd533b5c6f0adc830330bf9100b94c31bf5bf5", "filename": "tests/ui/traits/ignore-err-impls.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Ftraits%2Fignore-err-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Ftraits%2Fignore-err-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fignore-err-impls.stderr?ref=5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b", "patch": "@@ -2,9 +2,12 @@ error[E0412]: cannot find type `Type` in this scope\n   --> $DIR/ignore-err-impls.rs:6:14\n    |\n LL | impl Generic<Type> for S {}\n-   |     -        ^^^^ not found in this scope\n-   |     |\n-   |     help: you might be missing a type parameter: `<Type>`\n+   |              ^^^^ not found in this scope\n+   |\n+help: you might be missing a type parameter\n+   |\n+LL | impl<Type> Generic<Type> for S {}\n+   |     ++++++\n \n error: aborting due to previous error\n "}, {"sha": "1f969efe1141d8dab48aaacd1200f467957fb6f9", "filename": "tests/ui/traits/impl-bounds-checking.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Ftraits%2Fimpl-bounds-checking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Ftraits%2Fimpl-bounds-checking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fimpl-bounds-checking.stderr?ref=5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `isize: Clone2` is not satisfied\n-  --> $DIR/impl-bounds-checking.rs:10:6\n+  --> $DIR/impl-bounds-checking.rs:10:24\n    |\n LL | impl Getter<isize> for isize {\n-   |      ^^^^^^^^^^^^^ the trait `Clone2` is not implemented for `isize`\n+   |                        ^^^^^ the trait `Clone2` is not implemented for `isize`\n    |\n note: required by a bound in `Getter`\n   --> $DIR/impl-bounds-checking.rs:6:17"}, {"sha": "1bace8ab2864bf4b14c7d9c3cdbafc4e529e4263", "filename": "tests/ui/traits/impl-of-supertrait-has-wrong-lifetime-parameters.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Ftraits%2Fimpl-of-supertrait-has-wrong-lifetime-parameters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Ftraits%2Fimpl-of-supertrait-has-wrong-lifetime-parameters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fimpl-of-supertrait-has-wrong-lifetime-parameters.stderr?ref=5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b", "patch": "@@ -1,8 +1,8 @@\n error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'b` due to conflicting requirements\n-  --> $DIR/impl-of-supertrait-has-wrong-lifetime-parameters.rs:24:13\n+  --> $DIR/impl-of-supertrait-has-wrong-lifetime-parameters.rs:24:28\n    |\n LL | impl<'a,'b> T2<'a, 'b> for S<'a, 'b> {\n-   |             ^^^^^^^^^^\n+   |                            ^^^^^^^^^\n    |\n note: first, the lifetime cannot outlive the lifetime `'a` as defined here...\n   --> $DIR/impl-of-supertrait-has-wrong-lifetime-parameters.rs:24:6\n@@ -15,10 +15,10 @@ note: ...but the lifetime must also be valid for the lifetime `'b` as defined he\n LL | impl<'a,'b> T2<'a, 'b> for S<'a, 'b> {\n    |         ^^\n note: ...so that the types are compatible\n-  --> $DIR/impl-of-supertrait-has-wrong-lifetime-parameters.rs:24:13\n+  --> $DIR/impl-of-supertrait-has-wrong-lifetime-parameters.rs:24:28\n    |\n LL | impl<'a,'b> T2<'a, 'b> for S<'a, 'b> {\n-   |             ^^^^^^^^^^\n+   |                            ^^^^^^^^^\n    = note: expected `T1<'a>`\n               found `T1<'_>`\n "}, {"sha": "4fe12731475b493d8e9426b04cae17c35f95410e", "filename": "tests/ui/traits/issue-43784-supertrait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Ftraits%2Fissue-43784-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Ftraits%2Fissue-43784-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fissue-43784-supertrait.stderr?ref=5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `T: Copy` is not satisfied\n-  --> $DIR/issue-43784-supertrait.rs:8:9\n+  --> $DIR/issue-43784-supertrait.rs:8:22\n    |\n LL | impl<T> Complete for T {}\n-   |         ^^^^^^^^ the trait `Copy` is not implemented for `T`\n+   |                      ^ the trait `Copy` is not implemented for `T`\n    |\n note: required by a bound in `Complete`\n   --> $DIR/issue-43784-supertrait.rs:4:21"}, {"sha": "aa8384e98053969edf0601e4739900f1c7a843f4", "filename": "tests/ui/traits/issue-50480.stderr", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Ftraits%2Fissue-50480.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Ftraits%2Fissue-50480.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fissue-50480.stderr?ref=5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b", "patch": "@@ -2,9 +2,12 @@ error[E0412]: cannot find type `N` in this scope\n   --> $DIR/issue-50480.rs:3:12\n    |\n LL | struct Foo(N, NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n-   |           -^ not found in this scope\n-   |           |\n-   |           help: you might be missing a type parameter: `<N>`\n+   |            ^ not found in this scope\n+   |\n+help: you might be missing a type parameter\n+   |\n+LL | struct Foo<N>(N, NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n+   |           +++\n \n error[E0412]: cannot find type `NotDefined` in this scope\n   --> $DIR/issue-50480.rs:3:15\n@@ -16,17 +19,23 @@ error[E0412]: cannot find type `N` in this scope\n   --> $DIR/issue-50480.rs:3:12\n    |\n LL | struct Foo(N, NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n-   |           -^ not found in this scope\n-   |           |\n-   |           help: you might be missing a type parameter: `<N>`\n+   |            ^ not found in this scope\n+   |\n+help: you might be missing a type parameter\n+   |\n+LL | struct Foo<N>(N, NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n+   |           +++\n \n error[E0412]: cannot find type `NotDefined` in this scope\n   --> $DIR/issue-50480.rs:3:15\n    |\n LL | struct Foo(N, NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n-   |           -   ^^^^^^^^^^ not found in this scope\n-   |           |\n-   |           help: you might be missing a type parameter: `<NotDefined>`\n+   |               ^^^^^^^^^^ not found in this scope\n+   |\n+help: you might be missing a type parameter\n+   |\n+LL | struct Foo<NotDefined>(N, NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n+   |           ++++++++++++\n \n error[E0412]: cannot find type `N` in this scope\n   --> $DIR/issue-50480.rs:12:18"}, {"sha": "1675edc9ff0b99715dd63dbdfcc5c8e96f337ad5", "filename": "tests/ui/traits/issue-75627.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Ftraits%2Fissue-75627.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Ftraits%2Fissue-75627.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fissue-75627.stderr?ref=5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b", "patch": "@@ -2,9 +2,12 @@ error[E0412]: cannot find type `T` in this scope\n   --> $DIR/issue-75627.rs:3:26\n    |\n LL | unsafe impl Send for Foo<T> {}\n-   |            -             ^ not found in this scope\n-   |            |\n-   |            help: you might be missing a type parameter: `<T>`\n+   |                          ^ not found in this scope\n+   |\n+help: you might be missing a type parameter\n+   |\n+LL | unsafe impl<T> Send for Foo<T> {}\n+   |            +++\n \n error: aborting due to previous error\n "}, {"sha": "8e7fd5f2557108ab1b59363d453cc8cf1b807ceb", "filename": "tests/ui/traits/issue-78372.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Ftraits%2Fissue-78372.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Ftraits%2Fissue-78372.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fissue-78372.stderr?ref=5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b", "patch": "@@ -30,9 +30,12 @@ error[E0412]: cannot find type `MISC` in this scope\n   --> $DIR/issue-78372.rs:3:34\n    |\n LL | impl<T> DispatchFromDyn<Smaht<U, MISC>> for T {}\n-   |       -                          ^^^^ not found in this scope\n-   |       |\n-   |       help: you might be missing a type parameter: `, MISC`\n+   |                                  ^^^^ not found in this scope\n+   |\n+help: you might be missing a type parameter\n+   |\n+LL | impl<T, MISC> DispatchFromDyn<Smaht<U, MISC>> for T {}\n+   |       ++++++\n \n error[E0658]: use of unstable library feature 'dispatch_from_dyn'\n   --> $DIR/issue-78372.rs:1:5"}, {"sha": "85d903fadd120ac36831dbd02c5e80ed0c7780a4", "filename": "tests/ui/traits/issue-91594.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Ftraits%2Fissue-91594.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Ftraits%2Fissue-91594.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fissue-91594.stderr?ref=5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `Foo: HasComponent<()>` is not satisfied\n-  --> $DIR/issue-91594.rs:10:6\n+  --> $DIR/issue-91594.rs:10:19\n    |\n LL | impl HasComponent<<Foo as Component<Foo>>::Interface> for Foo {}\n-   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `HasComponent<()>` is not implemented for `Foo`\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `HasComponent<()>` is not implemented for `Foo`\n    |\n    = help: the trait `HasComponent<<Foo as Component<Foo>>::Interface>` is implemented for `Foo`\n note: required for `Foo` to implement `Component<Foo>`"}, {"sha": "b4591778f8e7b98c04c5d9a246c2e76289d0b060", "filename": "tests/ui/transmutability/malformed-program-gracefulness/unknown_dst.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Ftransmutability%2Fmalformed-program-gracefulness%2Funknown_dst.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Ftransmutability%2Fmalformed-program-gracefulness%2Funknown_dst.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fmalformed-program-gracefulness%2Funknown_dst.stderr?ref=5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b", "patch": "@@ -1,11 +1,13 @@\n error[E0412]: cannot find type `Dst` in this scope\n   --> $DIR/unknown_dst.rs:20:36\n    |\n-LL | fn should_gracefully_handle_unknown_dst() {\n-   |                                        - help: you might be missing a type parameter: `<Dst>`\n-...\n LL |     assert::is_transmutable::<Src, Dst, Context>();\n    |                                    ^^^ not found in this scope\n+   |\n+help: you might be missing a type parameter\n+   |\n+LL | fn should_gracefully_handle_unknown_dst<Dst>() {\n+   |                                        +++++\n \n error: aborting due to previous error\n "}, {"sha": "a55d71d8068244f94c80afe6287eb9613c0bcb6e", "filename": "tests/ui/transmutability/malformed-program-gracefulness/unknown_src.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Ftransmutability%2Fmalformed-program-gracefulness%2Funknown_src.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Ftransmutability%2Fmalformed-program-gracefulness%2Funknown_src.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fmalformed-program-gracefulness%2Funknown_src.stderr?ref=5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b", "patch": "@@ -1,11 +1,13 @@\n error[E0412]: cannot find type `Src` in this scope\n   --> $DIR/unknown_src.rs:20:31\n    |\n-LL | fn should_gracefully_handle_unknown_src() {\n-   |                                        - help: you might be missing a type parameter: `<Src>`\n-...\n LL |     assert::is_transmutable::<Src, Dst, Context>();\n    |                               ^^^ not found in this scope\n+   |\n+help: you might be missing a type parameter\n+   |\n+LL | fn should_gracefully_handle_unknown_src<Src>() {\n+   |                                        +++++\n \n error: aborting due to previous error\n "}, {"sha": "182612d5ee70e2e77fec57ffc710164ca6e76163", "filename": "tests/ui/typeck/autoderef-with-param-env-error.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Ftypeck%2Fautoderef-with-param-env-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Ftypeck%2Fautoderef-with-param-env-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fautoderef-with-param-env-error.stderr?ref=5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b", "patch": "@@ -1,11 +1,13 @@\n error[E0412]: cannot find type `T` in this scope\n   --> $DIR/autoderef-with-param-env-error.rs:3:5\n    |\n-LL | fn foo()\n-   |       - help: you might be missing a type parameter: `<T>`\n-LL | where\n LL |     T: Send,\n    |     ^ not found in this scope\n+   |\n+help: you might be missing a type parameter\n+   |\n+LL | fn foo<T>()\n+   |       +++\n \n error: aborting due to previous error\n "}, {"sha": "5561673f3c6728e6bba507c3fd1305e82d85b498", "filename": "tests/ui/typeck/issue-104513-ice.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Ftypeck%2Fissue-104513-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b/tests%2Fui%2Ftypeck%2Fissue-104513-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-104513-ice.stderr?ref=5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b", "patch": "@@ -1,10 +1,13 @@\n error[E0405]: cannot find trait `Oops` in this scope\n   --> $DIR/issue-104513-ice.rs:3:19\n    |\n-LL | fn f() {\n-   |     - help: you might be missing a type parameter: `<Oops>`\n LL |     let _: S<impl Oops> = S;\n    |                   ^^^^ not found in this scope\n+   |\n+help: you might be missing a type parameter\n+   |\n+LL | fn f<Oops>() {\n+   |     ++++++\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable binding\n   --> $DIR/issue-104513-ice.rs:3:14"}]}