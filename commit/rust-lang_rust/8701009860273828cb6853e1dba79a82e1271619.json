{"sha": "8701009860273828cb6853e1dba79a82e1271619", "node_id": "C_kwDOAAsO6NoAKDg3MDEwMDk4NjAyNzM4MjhjYjY4NTNlMWRiYTc5YTgyZTEyNzE2MTk", "commit": {"author": {"name": "Icxolu", "email": "10486322+Icxolu@users.noreply.github.com", "date": "2023-05-03T18:06:29Z"}, "committer": {"name": "Icxolu", "email": "10486322+Icxolu@users.noreply.github.com", "date": "2023-05-03T18:55:14Z"}, "message": "add more test cases", "tree": {"sha": "7863b5d7fd1232f3f0e23dd0d065b7ec39227ee7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7863b5d7fd1232f3f0e23dd0d065b7ec39227ee7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8701009860273828cb6853e1dba79a82e1271619", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8701009860273828cb6853e1dba79a82e1271619", "html_url": "https://github.com/rust-lang/rust/commit/8701009860273828cb6853e1dba79a82e1271619", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8701009860273828cb6853e1dba79a82e1271619/comments", "author": {"login": "Icxolu", "id": 10486322, "node_id": "MDQ6VXNlcjEwNDg2MzIy", "avatar_url": "https://avatars.githubusercontent.com/u/10486322?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Icxolu", "html_url": "https://github.com/Icxolu", "followers_url": "https://api.github.com/users/Icxolu/followers", "following_url": "https://api.github.com/users/Icxolu/following{/other_user}", "gists_url": "https://api.github.com/users/Icxolu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Icxolu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Icxolu/subscriptions", "organizations_url": "https://api.github.com/users/Icxolu/orgs", "repos_url": "https://api.github.com/users/Icxolu/repos", "events_url": "https://api.github.com/users/Icxolu/events{/privacy}", "received_events_url": "https://api.github.com/users/Icxolu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Icxolu", "id": 10486322, "node_id": "MDQ6VXNlcjEwNDg2MzIy", "avatar_url": "https://avatars.githubusercontent.com/u/10486322?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Icxolu", "html_url": "https://github.com/Icxolu", "followers_url": "https://api.github.com/users/Icxolu/followers", "following_url": "https://api.github.com/users/Icxolu/following{/other_user}", "gists_url": "https://api.github.com/users/Icxolu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Icxolu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Icxolu/subscriptions", "organizations_url": "https://api.github.com/users/Icxolu/orgs", "repos_url": "https://api.github.com/users/Icxolu/repos", "events_url": "https://api.github.com/users/Icxolu/events{/privacy}", "received_events_url": "https://api.github.com/users/Icxolu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e049036313759df55c4c68ad87e1cd7ad5cf214", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e049036313759df55c4c68ad87e1cd7ad5cf214", "html_url": "https://github.com/rust-lang/rust/commit/4e049036313759df55c4c68ad87e1cd7ad5cf214"}], "stats": {"total": 73, "additions": 62, "deletions": 11}, "files": [{"sha": "dab76a2c41ffb6c16c065f3352f381b912cd90e4", "filename": "clippy_lints/src/default_constructed_unit_structs.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8701009860273828cb6853e1dba79a82e1271619/clippy_lints%2Fsrc%2Fdefault_constructed_unit_structs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8701009860273828cb6853e1dba79a82e1271619/clippy_lints%2Fsrc%2Fdefault_constructed_unit_structs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault_constructed_unit_structs.rs?ref=8701009860273828cb6853e1dba79a82e1271619", "patch": "@@ -42,14 +42,14 @@ impl LateLintPass<'_> for DefaultConstructedUnitStructs {\n         if_chain!(\n             // make sure we have a call to `Default::default`\n             if let hir::ExprKind::Call(fn_expr, &[]) = expr.kind;\n-            if let ExprKind::Path(ref qpath) = fn_expr.kind;\n+            if let ExprKind::Path(ref qpath@ hir::QPath::TypeRelative(_,_)) = fn_expr.kind;\n             if let Res::Def(_, def_id) = cx.qpath_res(qpath, fn_expr.hir_id);\n             if match_def_path(cx, def_id, &paths::DEFAULT_TRAIT_METHOD);\n             // make sure we have a struct with no fields (unit struct)\n             if let ty::Adt(def, ..) = cx.typeck_results().expr_ty(expr).kind();\n-            if def.is_struct() && def.is_payloadfree()\n-                && !def.non_enum_variant().is_field_list_non_exhaustive()\n-                && !is_from_proc_macro(cx, expr);\n+            if def.is_struct();\n+            if let var @ ty::VariantDef { ctor: Some((hir::def::CtorKind::Const, _)), .. } = def.non_enum_variant();\n+            if !var.is_field_list_non_exhaustive() && !is_from_proc_macro(cx, expr);\n             then {\n                 span_lint_and_sugg(\n                     cx,"}, {"sha": "276fc40aa189b8dab8e0dfd55ddfac7ed05bc3f1", "filename": "tests/ui/default_constructed_unit_structs.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/8701009860273828cb6853e1dba79a82e1271619/tests%2Fui%2Fdefault_constructed_unit_structs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8701009860273828cb6853e1dba79a82e1271619/tests%2Fui%2Fdefault_constructed_unit_structs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_constructed_unit_structs.rs?ref=8701009860273828cb6853e1dba79a82e1271619", "patch": "@@ -5,9 +5,23 @@ use std::marker::PhantomData;\n #[derive(Default)]\n struct UnitStruct;\n \n+impl UnitStruct {\n+    fn new() -> Self {\n+        //should lint\n+        Self::default()\n+    }\n+}\n+\n #[derive(Default)]\n struct TupleStruct(usize);\n \n+impl TupleStruct {\n+    fn new() -> Self {\n+        // should not lint\n+        Self(Default::default())\n+    }\n+}\n+\n // no lint for derived impl\n #[derive(Default)]\n struct NormalStruct {\n@@ -39,6 +53,13 @@ impl NormalStruct {\n             inner: PhantomData::default(),\n         }\n     }\n+\n+    fn new2() -> Self {\n+        // should not lint\n+        Self {\n+            inner: Default::default(),\n+        }\n+    }\n }\n \n #[derive(Default)]\n@@ -51,8 +72,29 @@ impl<T: Default> GenericStruct<T> {\n         // should not lint\n         Self { t: T::default() }\n     }\n+\n+    fn new2() -> Self {\n+        // should not lint\n+        Self { t: Default::default() }\n+    }\n+}\n+\n+struct FakeDefault;\n+impl FakeDefault {\n+    fn default() -> Self {\n+        Self\n+    }\n }\n \n+impl Default for FakeDefault {\n+    fn default() -> Self {\n+        Self\n+    }\n+}\n+\n+#[derive(Default)]\n+struct EmptyStruct {}\n+\n #[derive(Default)]\n #[non_exhaustive]\n struct NonExhaustiveStruct;\n@@ -69,4 +111,7 @@ fn main() {\n     let _ = NonExhaustiveStruct::default();\n     let _ = SomeEnum::default();\n     let _ = NonDefaultStruct::default();\n+    let _ = EmptyStruct::default();\n+    let _ = FakeDefault::default();\n+    let _ = <FakeDefault as Default>::default();\n }"}, {"sha": "fa39ef4cda16057268bfa561879cdf5ab8e238a6", "filename": "tests/ui/default_constructed_unit_structs.stderr", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8701009860273828cb6853e1dba79a82e1271619/tests%2Fui%2Fdefault_constructed_unit_structs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8701009860273828cb6853e1dba79a82e1271619/tests%2Fui%2Fdefault_constructed_unit_structs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_constructed_unit_structs.stderr?ref=8701009860273828cb6853e1dba79a82e1271619", "patch": "@@ -1,28 +1,34 @@\n error: use of `default` to create a unit struct\n-  --> $DIR/default_constructed_unit_structs.rs:39:31\n+  --> $DIR/default_constructed_unit_structs.rs:11:13\n    |\n-LL |             inner: PhantomData::default(),\n-   |                               ^^^^^^^^^^^ help: remove this call to `default`\n+LL |         Self::default()\n+   |             ^^^^^^^^^^^ help: remove this call to `default`\n    |\n    = note: `-D clippy::default-constructed-unit-structs` implied by `-D warnings`\n \n error: use of `default` to create a unit struct\n-  --> $DIR/default_constructed_unit_structs.rs:62:33\n+  --> $DIR/default_constructed_unit_structs.rs:53:31\n+   |\n+LL |             inner: PhantomData::default(),\n+   |                               ^^^^^^^^^^^ help: remove this call to `default`\n+\n+error: use of `default` to create a unit struct\n+  --> $DIR/default_constructed_unit_structs.rs:104:33\n    |\n LL |     let _ = PhantomData::<usize>::default();\n    |                                 ^^^^^^^^^^^ help: remove this call to `default`\n \n error: use of `default` to create a unit struct\n-  --> $DIR/default_constructed_unit_structs.rs:63:42\n+  --> $DIR/default_constructed_unit_structs.rs:105:42\n    |\n LL |     let _: PhantomData<i32> = PhantomData::default();\n    |                                          ^^^^^^^^^^^ help: remove this call to `default`\n \n error: use of `default` to create a unit struct\n-  --> $DIR/default_constructed_unit_structs.rs:64:23\n+  --> $DIR/default_constructed_unit_structs.rs:106:23\n    |\n LL |     let _ = UnitStruct::default();\n    |                       ^^^^^^^^^^^ help: remove this call to `default`\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 5 previous errors\n "}]}