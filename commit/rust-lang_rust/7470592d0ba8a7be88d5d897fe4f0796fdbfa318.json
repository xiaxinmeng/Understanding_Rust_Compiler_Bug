{"sha": "7470592d0ba8a7be88d5d897fe4f0796fdbfa318", "node_id": "C_kwDOAAsO6NoAKDc0NzA1OTJkMGJhOGE3YmU4OGQ1ZDg5N2ZlNGYwNzk2ZmRiZmEzMTg", "commit": {"author": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-03-27T22:04:21Z"}, "committer": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-03-29T18:21:33Z"}, "message": "Fix `x test src/tools/error_index_generator --stage {0,1}`\n\nThere were two fixes needed:\n1. Use `top_stage` instead of `top_stage - 1`. There was a long and torturous comment about trying to match rustdoc's version, but it works better without the hard-coding than with.\n2. Make sure that `ci-llvm/lib` is added to LD_LIBRARY_PATH. Previously the error index would be unable to load LLVM for stage0 builds.\n\nAt some point we should probably have a discussion about how rustdoc stages should be numbered;\nconfusion between 0/1/2 has come up several times in bootstrap now.\n\nNote that this is still broken when using `download-rustc = true` and `--stage 1`,\nbut that's *really* a corner case and should affect almost no one. `--stage {0,2}`\nwork fine with download-rustc.", "tree": {"sha": "b578f27d172c39c038cb95595b0350c5b9e63bbc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b578f27d172c39c038cb95595b0350c5b9e63bbc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7470592d0ba8a7be88d5d897fe4f0796fdbfa318", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7470592d0ba8a7be88d5d897fe4f0796fdbfa318", "html_url": "https://github.com/rust-lang/rust/commit/7470592d0ba8a7be88d5d897fe4f0796fdbfa318", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7470592d0ba8a7be88d5d897fe4f0796fdbfa318/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02af015d1c85474b8213868be3febc342927a3b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/02af015d1c85474b8213868be3febc342927a3b6", "html_url": "https://github.com/rust-lang/rust/commit/02af015d1c85474b8213868be3febc342927a3b6"}], "stats": {"total": 46, "additions": 21, "deletions": 25}, "files": [{"sha": "f8f2676e10b74b3d6dc846f6a5ef0ce0b4e03668", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7470592d0ba8a7be88d5d897fe4f0796fdbfa318/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7470592d0ba8a7be88d5d897fe4f0796fdbfa318/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=7470592d0ba8a7be88d5d897fe4f0796fdbfa318", "patch": "@@ -835,6 +835,18 @@ impl<'a> Builder<'a> {\n         }\n     }\n \n+    pub fn rustc_lib_paths(&self, compiler: Compiler) -> Vec<PathBuf> {\n+        let mut dylib_dirs = vec![self.rustc_libdir(compiler)];\n+\n+        // Ensure that the downloaded LLVM libraries can be found.\n+        if self.config.llvm_from_ci {\n+            let ci_llvm_lib = self.out.join(&*compiler.host.triple).join(\"ci-llvm\").join(\"lib\");\n+            dylib_dirs.push(ci_llvm_lib);\n+        }\n+\n+        dylib_dirs\n+    }\n+\n     /// Adds the compiler's directory of dynamic libraries to `cmd`'s dynamic\n     /// library lookup path.\n     pub fn add_rustc_lib_path(&self, compiler: Compiler, cmd: &mut Command) {\n@@ -845,15 +857,7 @@ impl<'a> Builder<'a> {\n             return;\n         }\n \n-        let mut dylib_dirs = vec![self.rustc_libdir(compiler)];\n-\n-        // Ensure that the downloaded LLVM libraries can be found.\n-        if self.config.llvm_from_ci {\n-            let ci_llvm_lib = self.out.join(&*compiler.host.triple).join(\"ci-llvm\").join(\"lib\");\n-            dylib_dirs.push(ci_llvm_lib);\n-        }\n-\n-        add_dylib_path(dylib_dirs, cmd);\n+        add_dylib_path(self.rustc_lib_paths(compiler), cmd);\n     }\n \n     /// Gets a path to the compiler specified."}, {"sha": "fc1c2f04fabff08239adcb8a261a7b2ab4f886f4", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7470592d0ba8a7be88d5d897fe4f0796fdbfa318/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7470592d0ba8a7be88d5d897fe4f0796fdbfa318/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=7470592d0ba8a7be88d5d897fe4f0796fdbfa318", "patch": "@@ -379,22 +379,14 @@ pub struct ErrorIndex {\n \n impl ErrorIndex {\n     pub fn command(builder: &Builder<'_>) -> Command {\n-        // This uses stage-1 to match the behavior of building rustdoc.\n-        // Error-index-generator links with the rustdoc library, so we want to\n-        // use the same librustdoc to avoid building rustdoc twice (and to\n-        // avoid building the compiler an extra time). This uses\n-        // saturating_sub to deal with building with stage 0. (Using stage 0\n-        // isn't recommended, since it will fail if any new error index tests\n-        // use new syntax, but it should work otherwise.)\n-        let compiler = builder.compiler(builder.top_stage.saturating_sub(1), builder.config.build);\n+        // Error-index-generator links with the rustdoc library, so we need to add `rustc_lib_paths`\n+        // for rustc_private and libLLVM.so, and `sysroot_lib` for libstd, etc.\n+        let host = builder.config.build;\n+        let compiler = builder.compiler_for(builder.top_stage, host, host);\n         let mut cmd = Command::new(builder.ensure(ErrorIndex { compiler }));\n-        add_dylib_path(\n-            vec![\n-                PathBuf::from(&builder.sysroot_libdir(compiler, compiler.host)),\n-                builder.rustc_libdir(compiler),\n-            ],\n-            &mut cmd,\n-        );\n+        let mut dylib_paths = builder.rustc_lib_paths(compiler);\n+        dylib_paths.push(PathBuf::from(&builder.sysroot_libdir(compiler, compiler.host)));\n+        add_dylib_path(dylib_paths, &mut cmd);\n         cmd\n     }\n }"}, {"sha": "2da30dfa765e56e5b6db09040bd9ff6371973636", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7470592d0ba8a7be88d5d897fe4f0796fdbfa318/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7470592d0ba8a7be88d5d897fe4f0796fdbfa318/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=7470592d0ba8a7be88d5d897fe4f0796fdbfa318", "patch": "@@ -63,7 +63,7 @@ pub fn libdir(target: TargetSelection) -> &'static str {\n }\n \n /// Adds a list of lookup paths to `cmd`'s dynamic library lookup path.\n-/// If The dylib_path_par is already set for this cmd, the old value will be overwritten!\n+/// If the dylib_path_var is already set for this cmd, the old value will be overwritten!\n pub fn add_dylib_path(path: Vec<PathBuf>, cmd: &mut Command) {\n     let mut list = dylib_path();\n     for path in path {"}]}