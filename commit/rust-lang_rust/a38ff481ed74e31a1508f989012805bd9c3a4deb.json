{"sha": "a38ff481ed74e31a1508f989012805bd9c3a4deb", "node_id": "C_kwDOAAsO6NoAKGEzOGZmNDgxZWQ3NGUzMWExNTA4Zjk4OTAxMjgwNWJkOWMzYTRkZWI", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-02-08T02:37:37Z"}, "committer": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-02-08T18:14:46Z"}, "message": "Add some known GAT bugs as tests", "tree": {"sha": "5c47361da673a233d8028111e414c762e5b08824", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c47361da673a233d8028111e414c762e5b08824"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a38ff481ed74e31a1508f989012805bd9c3a4deb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a38ff481ed74e31a1508f989012805bd9c3a4deb", "html_url": "https://github.com/rust-lang/rust/commit/a38ff481ed74e31a1508f989012805bd9c3a4deb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a38ff481ed74e31a1508f989012805bd9c3a4deb/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f52c31840df7ec9c9350baff51a8964b20b5e1ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/f52c31840df7ec9c9350baff51a8964b20b5e1ba", "html_url": "https://github.com/rust-lang/rust/commit/f52c31840df7ec9c9350baff51a8964b20b5e1ba"}], "stats": {"total": 450, "additions": 450, "deletions": 0}, "files": [{"sha": "aea8aaf4bb3939285745cb28bbfe20af3de80f4d", "filename": "src/test/ui/generic-associated-types/bugs/issue-80626.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a38ff481ed74e31a1508f989012805bd9c3a4deb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-80626.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a38ff481ed74e31a1508f989012805bd9c3a4deb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-80626.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-80626.rs?ref=a38ff481ed74e31a1508f989012805bd9c3a4deb", "patch": "@@ -0,0 +1,17 @@\n+// check-fail\n+\n+// This should pass, but it requires `Sized` to be coinductive.\n+\n+#![feature(generic_associated_types)]\n+\n+trait Allocator {\n+    type Allocated<T>;\n+}\n+\n+enum LinkedList<A: Allocator> {\n+    Head,\n+    Next(A::Allocated<Self>)\n+    //~^ overflow\n+}\n+\n+fn main() {}"}, {"sha": "e18af9c257f7ffa6c18cf8b3b4d6a8c584d13135", "filename": "src/test/ui/generic-associated-types/bugs/issue-80626.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a38ff481ed74e31a1508f989012805bd9c3a4deb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-80626.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a38ff481ed74e31a1508f989012805bd9c3a4deb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-80626.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-80626.stderr?ref=a38ff481ed74e31a1508f989012805bd9c3a4deb", "patch": "@@ -0,0 +1,20 @@\n+error[E0275]: overflow evaluating the requirement `LinkedList<A>: Sized`\n+  --> $DIR/issue-80626.rs:13:10\n+   |\n+LL |     Next(A::Allocated<Self>)\n+   |          ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: no field of an enum variant may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     Next(&A::Allocated<Self>)\n+   |          +\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n+   |\n+LL |     Next(Box<A::Allocated<Self>>)\n+   |          ++++                  +\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0275`."}, {"sha": "3f8776a363770301165c638152c612b874a8e8a3", "filename": "src/test/ui/generic-associated-types/bugs/issue-86218.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a38ff481ed74e31a1508f989012805bd9c3a4deb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-86218.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a38ff481ed74e31a1508f989012805bd9c3a4deb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-86218.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-86218.rs?ref=a38ff481ed74e31a1508f989012805bd9c3a4deb", "patch": "@@ -0,0 +1,27 @@\n+// check-fail\n+\n+// This should pass, but seems to run into a TAIT issue.\n+\n+#![feature(generic_associated_types)]\n+#![feature(type_alias_impl_trait)]\n+\n+pub trait Stream {\n+    type Item;\n+}\n+\n+impl Stream for () {\n+    type Item = i32;\n+}\n+\n+trait Yay<AdditionalValue> {\n+    type InnerStream<'s>: Stream<Item = i32> + 's;\n+    fn foo<'s>() -> Self::InnerStream<'s>;\n+}\n+\n+impl<'a> Yay<&'a ()> for () {\n+    type InnerStream<'s> = impl Stream<Item = i32> + 's;\n+    //~^ the type\n+    fn foo<'s>() -> Self::InnerStream<'s> { todo!() }\n+}\n+\n+fn main() {}"}, {"sha": "9f4efc0addb735ec74be590c3d683543bd406172", "filename": "src/test/ui/generic-associated-types/bugs/issue-86218.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a38ff481ed74e31a1508f989012805bd9c3a4deb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-86218.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a38ff481ed74e31a1508f989012805bd9c3a4deb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-86218.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-86218.stderr?ref=a38ff481ed74e31a1508f989012805bd9c3a4deb", "patch": "@@ -0,0 +1,15 @@\n+error[E0477]: the type `impl Stream<Item = i32>` does not fulfill the required lifetime\n+  --> $DIR/issue-86218.rs:22:28\n+   |\n+LL |     type InnerStream<'s> = impl Stream<Item = i32> + 's;\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: type must outlive the lifetime `'s` as defined here as required by this binding\n+  --> $DIR/issue-86218.rs:22:22\n+   |\n+LL |     type InnerStream<'s> = impl Stream<Item = i32> + 's;\n+   |                      ^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0477`."}, {"sha": "5f7a42a740df67282b0c84bc20cc9c2023c1e61e", "filename": "src/test/ui/generic-associated-types/bugs/issue-87735.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/a38ff481ed74e31a1508f989012805bd9c3a4deb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87735.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a38ff481ed74e31a1508f989012805bd9c3a4deb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87735.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87735.rs?ref=a38ff481ed74e31a1508f989012805bd9c3a4deb", "patch": "@@ -0,0 +1,45 @@\n+// check-fail\n+\n+// This should pass, but we need an extension of implied bounds (probably).\n+\n+#![feature(generic_associated_types)]\n+\n+pub trait AsRef2 {\n+  type Output<'a> where Self: 'a;\n+\n+  fn as_ref2<'a>(&'a self) -> Self::Output<'a>;\n+}\n+\n+impl<T> AsRef2 for Vec<T> {\n+  type Output<'a> where Self: 'a = &'a [T];\n+\n+  fn as_ref2<'a>(&'a self) -> Self::Output<'a> {\n+    &self[..]\n+  }\n+}\n+\n+#[derive(Debug)]\n+struct Foo<T>(T);\n+#[derive(Debug)]\n+struct FooRef<'a, U>(&'a [U]);\n+\n+impl<'b, T, U> AsRef2 for Foo<T> //~ the type parameter\n+where\n+    // * `for<'b, 'c> T: AsRef2<Output<'b> = &'c [U]>>` does not work\n+    //\n+    // * `U` is unconstrained but should be allowed in this context because `Output` is\n+    // an associated type\n+    T: AsRef2<Output<'b> = &'b [U]>,\n+    U: 'b\n+{\n+  type Output<'a> where Self: 'a = FooRef<'a, U>;\n+\n+  fn as_ref2<'a>(&'a self) -> Self::Output<'a> {\n+    FooRef(self.0.as_ref2())\n+  }\n+}\n+\n+fn main() {\n+    let foo = Foo(vec![1, 2, 3]);\n+    dbg!(foo.as_ref2());\n+}"}, {"sha": "31b3a9619b6af5d1ab703c5ceb0b921baf9624f0", "filename": "src/test/ui/generic-associated-types/bugs/issue-87735.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a38ff481ed74e31a1508f989012805bd9c3a4deb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87735.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a38ff481ed74e31a1508f989012805bd9c3a4deb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87735.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87735.stderr?ref=a38ff481ed74e31a1508f989012805bd9c3a4deb", "patch": "@@ -0,0 +1,9 @@\n+error[E0207]: the type parameter `U` is not constrained by the impl trait, self type, or predicates\n+  --> $DIR/issue-87735.rs:26:13\n+   |\n+LL | impl<'b, T, U> AsRef2 for Foo<T>\n+   |             ^ unconstrained type parameter\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0207`."}, {"sha": "4dbaf429ead26b8e33c4a700e7f206d1b891bcdb", "filename": "src/test/ui/generic-associated-types/bugs/issue-87748.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a38ff481ed74e31a1508f989012805bd9c3a4deb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87748.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a38ff481ed74e31a1508f989012805bd9c3a4deb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87748.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87748.rs?ref=a38ff481ed74e31a1508f989012805bd9c3a4deb", "patch": "@@ -0,0 +1,22 @@\n+// check-fail\n+\n+// This should pass, but unnormalized input args aren't treated as implied.\n+\n+#![feature(generic_associated_types)]\n+\n+trait MyTrait {\n+    type Assoc<'a, 'b> where 'b: 'a;\n+    fn do_sth(arg: Self::Assoc<'_, '_>);\n+}\n+\n+struct Foo;\n+\n+impl MyTrait for Foo {\n+    type Assoc<'a, 'b> where 'b: 'a = u32;\n+\n+    fn do_sth(_: u32) {} //~ lifetime bound\n+    // fn do_sth(_: Self::Assoc<'static, 'static>) {}\n+    // fn do_sth(_: Self::Assoc<'_, '_>) {}\n+}\n+\n+fn main() {}"}, {"sha": "c38d44785923327406414d9408914d36940250ef", "filename": "src/test/ui/generic-associated-types/bugs/issue-87748.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a38ff481ed74e31a1508f989012805bd9c3a4deb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87748.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a38ff481ed74e31a1508f989012805bd9c3a4deb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87748.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87748.stderr?ref=a38ff481ed74e31a1508f989012805bd9c3a4deb", "patch": "@@ -0,0 +1,20 @@\n+error[E0478]: lifetime bound not satisfied\n+  --> $DIR/issue-87748.rs:17:5\n+   |\n+LL |     fn do_sth(_: u32) {}\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+note: lifetime parameter instantiated with the anonymous lifetime #2 defined here\n+  --> $DIR/issue-87748.rs:17:5\n+   |\n+LL |     fn do_sth(_: u32) {}\n+   |     ^^^^^^^^^^^^^^^^^\n+note: but lifetime parameter must outlive the anonymous lifetime #1 defined here\n+  --> $DIR/issue-87748.rs:17:5\n+   |\n+LL |     fn do_sth(_: u32) {}\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0478`."}, {"sha": "1cd3534ba77a0bcc992eec026a7df030cf252ad1", "filename": "src/test/ui/generic-associated-types/bugs/issue-87755.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a38ff481ed74e31a1508f989012805bd9c3a4deb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87755.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a38ff481ed74e31a1508f989012805bd9c3a4deb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87755.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87755.rs?ref=a38ff481ed74e31a1508f989012805bd9c3a4deb", "patch": "@@ -0,0 +1,21 @@\n+// check-fail\n+\n+// This should pass.\n+\n+#![feature(generic_associated_types)]\n+\n+use std::fmt::Debug;\n+\n+trait Foo {\n+    type Ass where Self::Ass: Debug;\n+}\n+\n+#[derive(Debug)]\n+struct Bar;\n+\n+impl Foo for Bar {\n+    type Ass = Bar;\n+    //~^ overflow\n+}\n+\n+fn main() {}"}, {"sha": "d2dc991a2b6408c36e1e7f37674ea83f8d82e6d0", "filename": "src/test/ui/generic-associated-types/bugs/issue-87755.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a38ff481ed74e31a1508f989012805bd9c3a4deb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87755.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a38ff481ed74e31a1508f989012805bd9c3a4deb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87755.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87755.stderr?ref=a38ff481ed74e31a1508f989012805bd9c3a4deb", "patch": "@@ -0,0 +1,9 @@\n+error[E0275]: overflow evaluating the requirement `<Bar as Foo>::Ass == _`\n+  --> $DIR/issue-87755.rs:17:16\n+   |\n+LL |     type Ass = Bar;\n+   |                ^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0275`."}, {"sha": "3d2ff38ab049e9dc289ee2c2ae16e5249d40d18c", "filename": "src/test/ui/generic-associated-types/bugs/issue-87803.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a38ff481ed74e31a1508f989012805bd9c3a4deb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87803.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a38ff481ed74e31a1508f989012805bd9c3a4deb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87803.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87803.rs?ref=a38ff481ed74e31a1508f989012805bd9c3a4deb", "patch": "@@ -0,0 +1,26 @@\n+// check-fail\n+\n+// This should pass, but using a type alias vs a reference directly\n+// changes late-bound -> early-bound.\n+\n+#![feature(generic_associated_types)]\n+\n+trait Scanner {\n+    type Input<'a>;\n+    type Token<'a>;\n+\n+    fn scan<'a>(&mut self, i : Self::Input<'a>) -> Self::Token<'a>;\n+}\n+\n+struct IdScanner();\n+\n+impl Scanner for IdScanner {\n+    type Input<'a> = &'a str;\n+    type Token<'a> = &'a str;\n+\n+    fn scan<'a>(&mut self, s : &'a str) -> &'a str { //~ lifetime parameters\n+        s\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "fe2abdedbf37c6a519fb0407ec7daa1f43111ed3", "filename": "src/test/ui/generic-associated-types/bugs/issue-87803.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a38ff481ed74e31a1508f989012805bd9c3a4deb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87803.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a38ff481ed74e31a1508f989012805bd9c3a4deb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87803.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87803.stderr?ref=a38ff481ed74e31a1508f989012805bd9c3a4deb", "patch": "@@ -0,0 +1,12 @@\n+error[E0195]: lifetime parameters or bounds on method `scan` do not match the trait declaration\n+  --> $DIR/issue-87803.rs:20:12\n+   |\n+LL |     fn scan<'a>(&mut self, i : Self::Input<'a>) -> Self::Token<'a>;\n+   |            ---- lifetimes in impl do not match this method in trait\n+...\n+LL |     fn scan<'a>(&mut self, s : &'a str) -> &'a str {\n+   |            ^^^^ lifetimes do not match method in trait\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0195`."}, {"sha": "f4633ca5169999188f573667cb6631e3324be70f", "filename": "src/test/ui/generic-associated-types/bugs/issue-88382.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a38ff481ed74e31a1508f989012805bd9c3a4deb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88382.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a38ff481ed74e31a1508f989012805bd9c3a4deb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88382.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88382.rs?ref=a38ff481ed74e31a1508f989012805bd9c3a4deb", "patch": "@@ -0,0 +1,31 @@\n+// check-fail\n+\n+// This should pass, but has a missed normalization due to HRTB.\n+\n+#![feature(generic_associated_types)]\n+\n+trait Iterable {\n+    type Iterator<'a> where Self: 'a;\n+    fn iter(&self) -> Self::Iterator<'_>;\n+}\n+\n+struct SomeImplementation();\n+\n+impl Iterable for SomeImplementation {\n+    type Iterator<'a> = std::iter::Empty<usize>;\n+    fn iter(&self) -> Self::Iterator<'_> {\n+        std::iter::empty()\n+    }\n+}\n+\n+fn do_something<I: Iterable>(i: I, mut f: impl for<'a> Fn(&mut I::Iterator<'a>)) {\n+    f(&mut i.iter());\n+}\n+\n+fn main() {\n+    do_something(SomeImplementation(), |_| ());\n+    do_something(SomeImplementation(), test);\n+    //~^ type mismatch\n+}\n+\n+fn test<'a, I: Iterable>(_: &mut I::Iterator<'a>) {}"}, {"sha": "05bc58cbba4e6062da43b0cb67b5fe9a8c12b9f6", "filename": "src/test/ui/generic-associated-types/bugs/issue-88382.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a38ff481ed74e31a1508f989012805bd9c3a4deb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88382.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a38ff481ed74e31a1508f989012805bd9c3a4deb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88382.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88382.stderr?ref=a38ff481ed74e31a1508f989012805bd9c3a4deb", "patch": "@@ -0,0 +1,20 @@\n+error[E0631]: type mismatch in function arguments\n+  --> $DIR/issue-88382.rs:27:40\n+   |\n+LL |     do_something(SomeImplementation(), test);\n+   |     ------------                       ^^^^ expected signature of `for<'a> fn(&mut <SomeImplementation as Iterable>::Iterator<'a>) -> _`\n+   |     |\n+   |     required by a bound introduced by this call\n+...\n+LL | fn test<'a, I: Iterable>(_: &mut I::Iterator<'a>) {}\n+   | ------------------------------------------------- found signature of `for<'r> fn(&'r mut std::iter::Empty<usize>) -> _`\n+   |\n+note: required by a bound in `do_something`\n+  --> $DIR/issue-88382.rs:21:56\n+   |\n+LL | fn do_something<I: Iterable>(i: I, mut f: impl for<'a> Fn(&mut I::Iterator<'a>)) {\n+   |                                                        ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `do_something`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0631`."}, {"sha": "7e62790cc50c309e18f3da973702f1d4c44dd15e", "filename": "src/test/ui/generic-associated-types/bugs/issue-88460.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a38ff481ed74e31a1508f989012805bd9c3a4deb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88460.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a38ff481ed74e31a1508f989012805bd9c3a4deb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88460.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88460.rs?ref=a38ff481ed74e31a1508f989012805bd9c3a4deb", "patch": "@@ -0,0 +1,31 @@\n+// check-fail\n+\n+// This should pass, but has a missed normalization due to HRTB.\n+\n+#![feature(generic_associated_types)]\n+\n+pub trait Marker {}\n+\n+pub trait Trait {\n+    type Assoc<'a>;\n+}\n+\n+fn test<T>(value: T)\n+where\n+    T: Trait,\n+    for<'a> T::Assoc<'a>: Marker,\n+{\n+}\n+\n+impl Marker for () {}\n+\n+struct Foo;\n+\n+impl Trait for Foo {\n+    type Assoc<'a> = ();\n+}\n+\n+fn main() {\n+    test(Foo);\n+    //~^ the trait bound\n+}"}, {"sha": "604658da7d2c2adcaa25c43a825f8d7871059d7e", "filename": "src/test/ui/generic-associated-types/bugs/issue-88460.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a38ff481ed74e31a1508f989012805bd9c3a4deb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88460.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a38ff481ed74e31a1508f989012805bd9c3a4deb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88460.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88460.stderr?ref=a38ff481ed74e31a1508f989012805bd9c3a4deb", "patch": "@@ -0,0 +1,18 @@\n+error[E0277]: the trait bound `for<'a> <_ as Trait>::Assoc<'a>: Marker` is not satisfied\n+  --> $DIR/issue-88460.rs:29:5\n+   |\n+LL |     test(Foo);\n+   |     ^^^^ the trait `for<'a> Marker` is not implemented for `<_ as Trait>::Assoc<'a>`\n+   |\n+note: required by a bound in `test`\n+  --> $DIR/issue-88460.rs:16:27\n+   |\n+LL | fn test<T>(value: T)\n+   |    ---- required by a bound in this\n+...\n+LL |     for<'a> T::Assoc<'a>: Marker,\n+   |                           ^^^^^^ required by this bound in `test`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "90568fcb40125181fe4448a1905021a07841783d", "filename": "src/test/ui/generic-associated-types/bugs/issue-88526.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a38ff481ed74e31a1508f989012805bd9c3a4deb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88526.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a38ff481ed74e31a1508f989012805bd9c3a4deb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88526.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88526.rs?ref=a38ff481ed74e31a1508f989012805bd9c3a4deb", "patch": "@@ -0,0 +1,34 @@\n+// check-fail\n+\n+// This should pass, but requires more logic.\n+\n+#![feature(generic_associated_types)]\n+\n+trait A {\n+    type I<'a>;\n+}\n+\n+pub struct TestA<F>\n+{\n+    f: F,\n+}\n+\n+impl<F> A for TestA<F> {\n+    type I<'a> = &'a F;\n+}\n+\n+struct TestB<Q, F>\n+{\n+    q: Q,\n+    f: F,\n+}\n+\n+impl<'q, Q, I, F> A for TestB<Q, F> //~ the type parameter\n+where\n+    Q: A<I<'q> = &'q I>,\n+    F: Fn(I),\n+{\n+    type I<'a> = ();\n+}\n+\n+fn main() {}"}, {"sha": "ccc5ae0b621a103214db7455c15e0e09dd787687", "filename": "src/test/ui/generic-associated-types/bugs/issue-88526.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a38ff481ed74e31a1508f989012805bd9c3a4deb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88526.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a38ff481ed74e31a1508f989012805bd9c3a4deb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88526.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88526.stderr?ref=a38ff481ed74e31a1508f989012805bd9c3a4deb", "patch": "@@ -0,0 +1,9 @@\n+error[E0207]: the type parameter `I` is not constrained by the impl trait, self type, or predicates\n+  --> $DIR/issue-88526.rs:26:13\n+   |\n+LL | impl<'q, Q, I, F> A for TestB<Q, F>\n+   |             ^ unconstrained type parameter\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0207`."}, {"sha": "5d850849fd21cc9931fe46d9b5d22d094ba25a37", "filename": "src/test/ui/generic-associated-types/bugs/issue-89008.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/a38ff481ed74e31a1508f989012805bd9c3a4deb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-89008.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a38ff481ed74e31a1508f989012805bd9c3a4deb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-89008.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-89008.rs?ref=a38ff481ed74e31a1508f989012805bd9c3a4deb", "patch": "@@ -0,0 +1,43 @@\n+// check-fail\n+// edition:2021\n+\n+// This should pass, but seems to run into a TAIT bug.\n+\n+#![feature(type_alias_impl_trait)]\n+#![feature(generic_associated_types)]\n+\n+use std::future::Future;\n+\n+trait Stream {\n+    type Item;\n+}\n+\n+struct Empty<T>(T);\n+impl<T> Stream for Empty<T> {\n+    type Item = ();\n+}\n+fn empty<T>() -> Empty<T> {\n+    todo!()\n+}\n+\n+trait X {\n+    type LineStream<'a, Repr>: Stream<Item = Repr> where Self: 'a;\n+\n+    type LineStreamFut<'a,Repr>: Future<Output = Self::LineStream<'a, Repr>> where Self: 'a;\n+\n+    fn line_stream<'a,Repr>(&'a self) -> Self::LineStreamFut<'a,Repr>;\n+}\n+\n+struct Y;\n+\n+impl X for Y {\n+    type LineStream<'a, Repr> = impl Stream<Item = Repr>; //~ could not find\n+\n+    type LineStreamFut<'a, Repr> = impl Future<Output = Self::LineStream<'a, Repr>> ;\n+\n+    fn line_stream<'a, Repr>(&'a self) -> Self::LineStreamFut<'a, Repr> { //~ type mismatch\n+        async {empty()}\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "48745fe0fbd96d308abf327c170b10cad8e6678f", "filename": "src/test/ui/generic-associated-types/bugs/issue-89008.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a38ff481ed74e31a1508f989012805bd9c3a4deb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-89008.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a38ff481ed74e31a1508f989012805bd9c3a4deb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-89008.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-89008.stderr?ref=a38ff481ed74e31a1508f989012805bd9c3a4deb", "patch": "@@ -0,0 +1,21 @@\n+error[E0271]: type mismatch resolving `<impl Future<Output = [async output]> as Future>::Output == impl Stream<Item = Repr>`\n+  --> $DIR/issue-89008.rs:38:43\n+   |\n+LL |     type LineStream<'a, Repr> = impl Stream<Item = Repr>;\n+   |                                 ------------------------ the expected opaque type\n+...\n+LL |     fn line_stream<'a, Repr>(&'a self) -> Self::LineStreamFut<'a, Repr> {\n+   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected opaque type, found struct `Empty`\n+   |\n+   = note: expected opaque type `impl Stream<Item = Repr>`\n+                   found struct `Empty<_>`\n+\n+error: could not find defining uses\n+  --> $DIR/issue-89008.rs:34:33\n+   |\n+LL |     type LineStream<'a, Repr> = impl Stream<Item = Repr>;\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0271`."}]}