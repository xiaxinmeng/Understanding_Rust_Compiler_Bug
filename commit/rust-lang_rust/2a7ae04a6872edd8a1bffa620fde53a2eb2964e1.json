{"sha": "2a7ae04a6872edd8a1bffa620fde53a2eb2964e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhN2FlMDRhNjg3MmVkZDhhMWJmZmE2MjBmZGU1M2EyZWIyOTY0ZTE=", "commit": {"author": {"name": "mark", "email": "markm@cs.wisc.edu", "date": "2018-07-12T01:54:12Z"}, "committer": {"name": "mark", "email": "markm@cs.wisc.edu", "date": "2018-07-24T02:54:43Z"}, "message": "Extend ParseSess to support buffering lints", "tree": {"sha": "1bac89ee27dfd99f1f5e88fed3182d8d0884e657", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1bac89ee27dfd99f1f5e88fed3182d8d0884e657"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a7ae04a6872edd8a1bffa620fde53a2eb2964e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a7ae04a6872edd8a1bffa620fde53a2eb2964e1", "html_url": "https://github.com/rust-lang/rust/commit/2a7ae04a6872edd8a1bffa620fde53a2eb2964e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a7ae04a6872edd8a1bffa620fde53a2eb2964e1/comments", "author": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d", "html_url": "https://github.com/rust-lang/rust/commit/6a1c0637ce44aeea6c60527f4c0e7fb33f2bcd0d"}], "stats": {"total": 81, "additions": 79, "deletions": 2}, "files": [{"sha": "495b4d32e0651897a2031846c347f8cd7f9a40ba", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2a7ae04a6872edd8a1bffa620fde53a2eb2964e1/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a7ae04a6872edd8a1bffa620fde53a2eb2964e1/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=2a7ae04a6872edd8a1bffa620fde53a2eb2964e1", "patch": "@@ -331,6 +331,15 @@ declare_lint! {\n      via the module system\"\n }\n \n+/// Some lints that are buffered from `libsyntax`. See `syntax::early_buffered_lints`.\n+pub mod parser {\n+    declare_lint! {\n+        pub QUESTION_MARK_MACRO_SEP,\n+        Warn,\n+        \"detects the use of `?` as a macro separator\"\n+    }\n+}\n+\n /// Does nothing as a lint pass, but registers some `Lint`s\n /// which are used by other parts of the compiler.\n #[derive(Copy, Clone)]\n@@ -389,6 +398,7 @@ impl LintPass for HardwiredLints {\n             WHERE_CLAUSES_OBJECT_SAFETY,\n             PROC_MACRO_DERIVE_RESOLUTION_FALLBACK,\n             MACRO_USE_EXTERN_CRATE,\n+            parser::QUESTION_MARK_MACRO_SEP,\n         )\n     }\n }"}, {"sha": "a5c82aa63034fc9ad94a56c8f5bd1d7a99d2faf5", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2a7ae04a6872edd8a1bffa620fde53a2eb2964e1/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a7ae04a6872edd8a1bffa620fde53a2eb2964e1/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=2a7ae04a6872edd8a1bffa620fde53a2eb2964e1", "patch": "@@ -38,10 +38,12 @@ use hir::def_id::{CrateNum, LOCAL_CRATE};\n use hir::intravisit;\n use hir;\n use lint::builtin::BuiltinLintDiagnostics;\n+use lint::builtin::parser::QUESTION_MARK_MACRO_SEP;\n use session::{Session, DiagnosticMessageId};\n use std::{hash, ptr};\n use syntax::ast;\n use syntax::codemap::{MultiSpan, ExpnFormat};\n+use syntax::early_buffered_lints::BufferedEarlyLintId;\n use syntax::edition::Edition;\n use syntax::symbol::Symbol;\n use syntax::visit as ast_visit;\n@@ -86,6 +88,13 @@ pub struct Lint {\n }\n \n impl Lint {\n+    /// Returns the `rust::lint::Lint` for a `syntax::early_buffered_lints::BufferedEarlyLintId`.\n+    pub fn from_parser_lint_id(lint_id: BufferedEarlyLintId) -> &'static Self {\n+        match lint_id {\n+            BufferedEarlyLintId::QuestionMarkMacroSep => QUESTION_MARK_MACRO_SEP,\n+        }\n+    }\n+\n     /// Get the lint's name, with ASCII letters converted to lowercase.\n     pub fn name_lower(&self) -> String {\n         self.name.to_ascii_lowercase()"}, {"sha": "3e14ec6f8d4909763f6572d81df5c2ee8a8ffdc8", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2a7ae04a6872edd8a1bffa620fde53a2eb2964e1/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a7ae04a6872edd8a1bffa620fde53a2eb2964e1/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=2a7ae04a6872edd8a1bffa620fde53a2eb2964e1", "patch": "@@ -52,6 +52,7 @@ use std::path::{Path, PathBuf};\n use rustc_data_structures::sync::{self, Lrc, Lock};\n use std::sync::mpsc;\n use syntax::{self, ast, attr, diagnostics, visit};\n+use syntax::early_buffered_lints::BufferedEarlyLint;\n use syntax::ext::base::ExtCtxt;\n use syntax::fold::Folder;\n use syntax::parse::{self, PResult};\n@@ -696,6 +697,13 @@ pub fn phase_1_parse_input<'a>(\n         hir_stats::print_ast_stats(&krate, \"PRE EXPANSION AST STATS\");\n     }\n \n+    // Add all buffered lints from the `ParseSess` to the `Session`.\n+    let mut parse_sess_buffered = sess.parse_sess.buffered_lints.borrow_mut();\n+    for BufferedEarlyLint{id, span, msg, lint_id} in parse_sess_buffered.drain(..) {\n+        let lint = lint::Lint::from_parser_lint_id(lint_id);\n+        sess.buffer_lint(lint, id, span, &msg);\n+    }\n+\n     Ok(krate)\n }\n "}, {"sha": "204e07625adef153c989f690cddb229e41cbb9bf", "filename": "src/libsyntax/early_buffered_lints.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/2a7ae04a6872edd8a1bffa620fde53a2eb2964e1/src%2Flibsyntax%2Fearly_buffered_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a7ae04a6872edd8a1bffa620fde53a2eb2964e1/src%2Flibsyntax%2Fearly_buffered_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fearly_buffered_lints.rs?ref=2a7ae04a6872edd8a1bffa620fde53a2eb2964e1", "patch": "@@ -0,0 +1,29 @@\n+//! Allows the buffering of lints for later.\n+//!\n+//! Since we cannot have a dependency on `librustc`, we implement some types here that are somewhat\n+//! redundant. Later, these types can be converted to types for use by the rest of the compiler.\n+\n+use syntax::ast::NodeId;\n+use syntax_pos::MultiSpan;\n+\n+/// Since we cannot import `LintId`s from `rustc::lint`, we define some Ids here which can later be\n+/// passed to `rustc::lint::Lint::from_parser_lint_id` to get a `rustc::lint::Lint`.\n+pub enum BufferedEarlyLintId {\n+    /// Usage of `?` as a macro separator is deprecated.\n+    QuestionMarkMacroSep,\n+}\n+\n+/// Stores buffered lint info which can later be passed to `librustc`.\n+pub struct BufferedEarlyLint {\n+    /// The span of code that we are linting on.\n+   pub span: MultiSpan,\n+\n+   /// The lint message.\n+   pub msg: String,\n+\n+   /// The `NodeId` of the AST node that generated the lint.\n+   pub id: NodeId,\n+\n+   /// A lint Id that can be passed to `rustc::lint::Lint::from_parser_lint_id`.\n+   pub lint_id: BufferedEarlyLintId,\n+}"}, {"sha": "d241ae1d44227bd4f0539abb06bba18e8f453f6e", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a7ae04a6872edd8a1bffa620fde53a2eb2964e1/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a7ae04a6872edd8a1bffa620fde53a2eb2964e1/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=2a7ae04a6872edd8a1bffa620fde53a2eb2964e1", "patch": "@@ -181,6 +181,8 @@ pub mod ext {\n     }\n }\n \n+pub mod early_buffered_lints;\n+\n #[cfg(test)]\n mod test_snippet;\n "}, {"sha": "5dbf569766e5aa2bdbf495cd8308f0772a9d6008", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2a7ae04a6872edd8a1bffa620fde53a2eb2964e1/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a7ae04a6872edd8a1bffa620fde53a2eb2964e1/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=2a7ae04a6872edd8a1bffa620fde53a2eb2964e1", "patch": "@@ -11,9 +11,10 @@\n //! The main parser interface\n \n use rustc_data_structures::sync::{Lrc, Lock};\n-use ast::{self, CrateConfig};\n+use ast::{self, CrateConfig, NodeId};\n+use early_buffered_lints::{BufferedEarlyLint, BufferedEarlyLintId};\n use codemap::{CodeMap, FilePathMapping};\n-use syntax_pos::{Span, FileMap, FileName};\n+use syntax_pos::{Span, FileMap, FileName, MultiSpan};\n use errors::{Handler, ColorConfig, DiagnosticBuilder};\n use feature_gate::UnstableFeatures;\n use parse::parser::Parser;\n@@ -57,6 +58,7 @@ pub struct ParseSess {\n     /// Used to determine and report recursive mod inclusions\n     included_mod_stack: Lock<Vec<PathBuf>>,\n     code_map: Lrc<CodeMap>,\n+    pub buffered_lints: Lock<Vec<BufferedEarlyLint>>,\n }\n \n impl ParseSess {\n@@ -80,12 +82,29 @@ impl ParseSess {\n             included_mod_stack: Lock::new(vec![]),\n             code_map,\n             non_modrs_mods: Lock::new(vec![]),\n+            buffered_lints: Lock::new(vec![]),\n         }\n     }\n \n     pub fn codemap(&self) -> &CodeMap {\n         &self.code_map\n     }\n+\n+    pub fn buffer_lint<S: Into<MultiSpan>>(&self,\n+        lint_id: BufferedEarlyLintId,\n+        span: S,\n+        id: NodeId,\n+        msg: &str,\n+    ) {\n+        self.buffered_lints\n+            .borrow_mut()\n+            .push(BufferedEarlyLint{\n+                span: span.into(),\n+                id,\n+                msg: msg.into(),\n+                lint_id,\n+            });\n+    }\n }\n \n #[derive(Clone)]"}]}