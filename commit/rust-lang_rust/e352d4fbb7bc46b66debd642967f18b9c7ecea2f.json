{"sha": "e352d4fbb7bc46b66debd642967f18b9c7ecea2f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzNTJkNGZiYjdiYzQ2YjY2ZGViZDY0Mjk2N2YxOGI5YzdlY2VhMmY=", "commit": {"author": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-06-06T16:54:13Z"}, "committer": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-06-06T16:54:13Z"}, "message": "Finish fixing Windows host support", "tree": {"sha": "fbb83572663867219e4d6d1a434830c57ad0d98d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbb83572663867219e4d6d1a434830c57ad0d98d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e352d4fbb7bc46b66debd642967f18b9c7ecea2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e352d4fbb7bc46b66debd642967f18b9c7ecea2f", "html_url": "https://github.com/rust-lang/rust/commit/e352d4fbb7bc46b66debd642967f18b9c7ecea2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e352d4fbb7bc46b66debd642967f18b9c7ecea2f/comments", "author": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "committer": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c01bc142194ae294356ac3b5b8666c3c351f14d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c01bc142194ae294356ac3b5b8666c3c351f14d5", "html_url": "https://github.com/rust-lang/rust/commit/c01bc142194ae294356ac3b5b8666c3c351f14d5"}], "stats": {"total": 59, "additions": 48, "deletions": 11}, "files": [{"sha": "ece4d236ba0d9463da1764814cce00f8152c6ecb", "filename": "src/shims/fs.rs", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e352d4fbb7bc46b66debd642967f18b9c7ecea2f/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e352d4fbb7bc46b66debd642967f18b9c7ecea2f/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=e352d4fbb7bc46b66debd642967f18b9c7ecea2f", "patch": "@@ -379,9 +379,16 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             && cmd == this.eval_libc_i32(\"F_FULLFSYNC\")?\n         {\n             let &[_, _] = check_arg_count(args)?;\n-            if let Some(FileHandle { file, writable: _ }) = this.machine.file_handler.handles.get_mut(&fd) {\n-                let result = file.sync_all();\n-                this.try_unwrap_io_result(result.map(|_| 0i32))\n+            if let Some(FileHandle { file, writable }) = this.machine.file_handler.handles.get_mut(&fd) {\n+                if !*writable && cfg!(windows) {\n+                    // sync_all() will return an error on Windows hosts if the file is not opened\n+                    // for writing. (FlushFileBuffers requires that the file handle have the\n+                    // GENERIC_WRITE right)\n+                    Ok(0i32)\n+                } else {\n+                    let result = file.sync_all();\n+                    this.try_unwrap_io_result(result.map(|_| 0i32))\n+                }\n             } else {\n                 this.handle_not_found()\n             }\n@@ -1128,6 +1135,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         if let Some(FileHandle { file, writable }) = this.machine.file_handler.handles.get_mut(&fd) {\n             if !*writable && cfg!(windows) {\n                 // sync_all() will return an error on Windows hosts if the file is not opened for writing.\n+                // (FlushFileBuffers requires that the file handle have the GENERIC_WRITE right)\n                 Ok(0i32)\n             } else {\n                 let result = file.sync_all();\n@@ -1147,6 +1155,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         if let Some(FileHandle { file, writable }) = this.machine.file_handler.handles.get_mut(&fd) {\n             if !*writable && cfg!(windows) {\n                 // sync_data() will return an error on Windows hosts if the file is not opened for writing.\n+                // (FlushFileBuffers requires that the file handle have the GENERIC_WRITE right)\n                 Ok(0i32)\n             } else {\n                 let result = file.sync_data();\n@@ -1187,11 +1196,18 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             return Ok(-1);\n         }\n \n-        if let Some(FileHandle { file, writable: _ }) = this.machine.file_handler.handles.get_mut(&fd) {\n-            // In the interest of host compatibility, we conservatively ignore\n-            // offset, nbytes, and flags, and sync the entire file.\n-            let result = file.sync_data();\n-            this.try_unwrap_io_result(result.map(|_| 0i32))\n+        if let Some(FileHandle { file, writable }) = this.machine.file_handler.handles.get_mut(&fd) {\n+            if !*writable && cfg!(windows) {\n+                // sync_data() will return an error on Windows hosts if the file is not opened for\n+                // writing. (FlushFileBuffers requires that the file handle have the GENERIC_WRITE\n+                // right)\n+                Ok(0i32)\n+            } else {\n+                // In the interest of host compatibility, we conservatively ignore\n+                // offset, nbytes, and flags, and sync the entire file.\n+                let result = file.sync_data();\n+                this.try_unwrap_io_result(result.map(|_| 0i32))\n+            }\n         } else {\n             this.handle_not_found()\n         }"}, {"sha": "caa9bffc2bc860375b129dcc5e40b7eb4f3188cc", "filename": "tests/run-pass/fs.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e352d4fbb7bc46b66debd642967f18b9c7ecea2f/tests%2Frun-pass%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e352d4fbb7bc46b66debd642967f18b9c7ecea2f/tests%2Frun-pass%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffs.rs?ref=e352d4fbb7bc46b66debd642967f18b9c7ecea2f", "patch": "@@ -192,6 +192,11 @@ fn test_file_sync() {\n     file.sync_data().unwrap();\n     file.sync_all().unwrap();\n \n+    // Test that we can call sync_data and sync_all on a file opened for reading.\n+    let file = File::open(&path).unwrap();\n+    file.sync_data().unwrap();\n+    file.sync_all().unwrap();\n+\n     remove_file(&path).unwrap();\n }\n "}, {"sha": "6f30cb5a9150fe6ae6ae32c3360a84f0a1c54e83", "filename": "tests/run-pass/libc.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e352d4fbb7bc46b66debd642967f18b9c7ecea2f/tests%2Frun-pass%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e352d4fbb7bc46b66debd642967f18b9c7ecea2f/tests%2Frun-pass%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Flibc.rs?ref=e352d4fbb7bc46b66debd642967f18b9c7ecea2f", "patch": "@@ -55,8 +55,22 @@ fn test_sync_file_range() {\n     let bytes = b\"Hello, World!\\n\";\n     file.write(bytes).unwrap();\n \n-    // Test calling sync_file_range on a file.\n-    let result = unsafe {\n+    // Test calling sync_file_range on the file.\n+    let result_1 = unsafe {\n+        libc::sync_file_range(\n+            file.as_raw_fd(),\n+            0,\n+            0,\n+            libc::SYNC_FILE_RANGE_WAIT_BEFORE\n+                | libc::SYNC_FILE_RANGE_WRITE\n+                | libc::SYNC_FILE_RANGE_WAIT_AFTER,\n+        )\n+    };\n+    drop(file);\n+\n+    // Test calling sync_file_range on a file opened for reading.\n+    let file = File::open(&path).unwrap();\n+    let result_2 = unsafe {\n         libc::sync_file_range(\n             file.as_raw_fd(),\n             0,\n@@ -67,8 +81,10 @@ fn test_sync_file_range() {\n         )\n     };\n     drop(file);\n+\n     remove_file(&path).unwrap();\n-    assert_eq!(result, 0);\n+    assert_eq!(result_1, 0);\n+    assert_eq!(result_2, 0);\n }\n \n fn test_mutex_libc_init_recursive() {"}]}