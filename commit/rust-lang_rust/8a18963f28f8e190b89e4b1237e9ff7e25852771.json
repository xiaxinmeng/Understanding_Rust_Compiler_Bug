{"sha": "8a18963f28f8e190b89e4b1237e9ff7e25852771", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhMTg5NjNmMjhmOGUxOTBiODllNGIxMjM3ZTlmZjdlMjU4NTI3NzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-01T16:52:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-01T16:52:28Z"}, "message": "Auto merge of #75534 - Aaron1011:feature/new-future-breakage, r=pnkfelix\n\nImplement rustc side of report-future-incompat\n\ncc https://github.com/rust-lang/rust/issues/71249\n\nThis is an alternative to `@pnkfelix's` initial implementation in https://github.com/pnkfelix/rust/commits/prototype-rustc-side-of-report-future-incompat (mainly because I started working before seeing that branch :smile: ).\n\nMy approach outputs the entire original `Diagnostic`, in a way that is compatible with incremental compilation. This is not yet integrated with compiletest, but can be used manually by passing `-Z emit-future-incompat-report` to `rustc`.\n\nSeveral changes are made to support this feature:\n* The `librustc_session/lint` module is moved to a new crate `librustc_lint_defs` (name bikesheddable). This allows accessing lint definitions from `librustc_errors`.\n* The `Lint` struct is extended with an `Option<FutureBreakage>`. When present, it indicates that we should display a lint in the future-compat report. `FutureBreakage` contains additional information that we may want to display in the report (currently, a `date` field indicating when the crate will stop compiling).\n* A new variant `rustc_error::Level::Allow` is added. This is used when constructing a diagnostic for a future-breakage lint that is marked as allowed (via `#[allow]` or `--cap-lints`). This allows us to capture any future-breakage diagnostics in one place, while still discarding them before they are passed to the `Emitter`.\n* `DiagnosticId::Lint` is extended with a `has_future_breakage` field, indicating whether or not the `Lint` has future breakage information (and should therefore show up in the report).\n* `Session` is given access to the `LintStore` via a new `SessionLintStore` trait (since `librustc_session` cannot directly reference `LintStore` without a cyclic dependency). We use this to turn a string `DiagnosticId::Lint` back into a `Lint`, to retrieve the `FutureBreakage` data.\n\nCurrently, `FutureBreakage.date` is always set to `None`. However, this could potentially be interpreted by Cargo in the future.\n\nI've enabled the future-breakage report for the `ARRAY_INTO_ITER` lint, which can be used to test out this PR. The intent is to use the field to allow Cargo to determine the date of future breakage (as described in [RFC 2834](https://github.com/rust-lang/rfcs/blob/master/text/2834-cargo-report-future-incompat.md)) without needing to parse the diagnostic itself.\n\ncc `@pnkfelix`", "tree": {"sha": "861b222ecc796abdb6f978039796973abbb628fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/861b222ecc796abdb6f978039796973abbb628fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a18963f28f8e190b89e4b1237e9ff7e25852771", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a18963f28f8e190b89e4b1237e9ff7e25852771", "html_url": "https://github.com/rust-lang/rust/commit/8a18963f28f8e190b89e4b1237e9ff7e25852771", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a18963f28f8e190b89e4b1237e9ff7e25852771/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c8c3d14ef6f9ab297103c526ba4b6023822aa87", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c8c3d14ef6f9ab297103c526ba4b6023822aa87", "html_url": "https://github.com/rust-lang/rust/commit/1c8c3d14ef6f9ab297103c526ba4b6023822aa87"}, {"sha": "4bbc7712fca4593b38635313609049e58e7a7718", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bbc7712fca4593b38635313609049e58e7a7718", "html_url": "https://github.com/rust-lang/rust/commit/4bbc7712fca4593b38635313609049e58e7a7718"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "736a531eda657d9856aeb2575d36bed3937ece95", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a18963f28f8e190b89e4b1237e9ff7e25852771/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a18963f28f8e190b89e4b1237e9ff7e25852771/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=8a18963f28f8e190b89e4b1237e9ff7e25852771", "patch": "@@ -59,7 +59,7 @@ pub const IO_WRITE: [&str; 3] = [\"std\", \"io\", \"Write\"];\n pub const ITERATOR: [&str; 5] = [\"core\", \"iter\", \"traits\", \"iterator\", \"Iterator\"];\n pub const LATE_CONTEXT: [&str; 2] = [\"rustc_lint\", \"LateContext\"];\n pub const LINKED_LIST: [&str; 4] = [\"alloc\", \"collections\", \"linked_list\", \"LinkedList\"];\n-pub const LINT: [&str; 3] = [\"rustc_session\", \"lint\", \"Lint\"];\n+pub const LINT: [&str; 2] = [\"rustc_lint_defs\", \"Lint\"];\n pub const MEM_DISCRIMINANT: [&str; 3] = [\"core\", \"mem\", \"discriminant\"];\n pub const MEM_FORGET: [&str; 3] = [\"core\", \"mem\", \"forget\"];\n pub const MEM_MANUALLY_DROP: [&str; 4] = [\"core\", \"mem\", \"manually_drop\", \"ManuallyDrop\"];"}]}