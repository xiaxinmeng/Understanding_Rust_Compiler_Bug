{"sha": "c354509343b0a3a9b935cc18b2d4aa07da8d4261", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzNTQ1MDkzNDNiMGEzYTliOTM1Y2MxOGIyZDRhYTA3ZGE4ZDQyNjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-27T22:49:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-27T22:49:05Z"}, "message": "Auto merge of #71620 - Dylan-DPC:rollup-9wgtisb, r=Dylan-DPC\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #67841 (Add Read/Write::can_read/write_vectored)\n - #71524 (Minimize parameter of coerce_borrowed_pointer())\n - #71558 (Cleanup and document `-Z tls-model` )\n - #71578 (linkchecker: fix typo in main.rs)\n - #71596 (Fix broken link in `QPath` documentation)\n - #71604 (make recursive-zst test unleashed)\n - #71605 (No need to whitelist E0750 anymore)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "0e1d9d4856c49bdd319b2a3b5c31e334da7940c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e1d9d4856c49bdd319b2a3b5c31e334da7940c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c354509343b0a3a9b935cc18b2d4aa07da8d4261", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c354509343b0a3a9b935cc18b2d4aa07da8d4261", "html_url": "https://github.com/rust-lang/rust/commit/c354509343b0a3a9b935cc18b2d4aa07da8d4261", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c354509343b0a3a9b935cc18b2d4aa07da8d4261/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d03399f53d28a8be645625376c0c9fbe601a01d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d03399f53d28a8be645625376c0c9fbe601a01d", "html_url": "https://github.com/rust-lang/rust/commit/2d03399f53d28a8be645625376c0c9fbe601a01d"}, {"sha": "c890912da1742b5aae42c56e85758335de3af850", "url": "https://api.github.com/repos/rust-lang/rust/commits/c890912da1742b5aae42c56e85758335de3af850", "html_url": "https://github.com/rust-lang/rust/commit/c890912da1742b5aae42c56e85758335de3af850"}], "stats": {"total": 785, "additions": 723, "deletions": 62}, "files": [{"sha": "0aefaa7fb01773794d5ca522ab18952ea8bc79cb", "filename": "src/doc/unstable-book/src/compiler-flags/tls-model.md", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Ftls-model.md", "raw_url": "https://github.com/rust-lang/rust/raw/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Ftls-model.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Ftls-model.md?ref=c354509343b0a3a9b935cc18b2d4aa07da8d4261", "patch": "@@ -0,0 +1,25 @@\n+# `tls_model`\n+\n+The tracking issue for this feature is: None.\n+\n+------------------------\n+\n+Option `-Z tls-model` controls [TLS model](https://www.akkadia.org/drepper/tls.pdf) used to\n+generate code for accessing `#[thread_local]` `static` items.\n+\n+Supported values for this option are:\n+\n+- `global-dynamic` - General Dynamic TLS Model (alternatively called Global Dynamic) is the most\n+general option usable in all circumstances, even if the TLS data is defined in a shared library\n+loaded at runtime and is accessed from code outside of that library.  \n+This is the default for most targets.\n+- `local-dynamic` - model usable if the TLS data is only accessed from the shared library or\n+executable it is defined in. The TLS data may be in a library loaded after startup (via `dlopen`).\n+- `initial-exec` - model usable if the TLS data is defined in the executable or in a shared library\n+loaded at program startup.\n+The TLS data must not be in a library loaded after startup (via `dlopen`).\n+- `local-exec` - model usable only if the TLS data is defined directly in the executable,\n+but not in a shared library, and is accessed only from that executable.\n+\n+`rustc` and LLVM may use a more optimized model than specified if they know that we are producing\n+and executable rather than a library, or that the `static` item is private enough."}, {"sha": "3ec7ef831b54b5b0af59c206dd647901b14f763d", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=c354509343b0a3a9b935cc18b2d4aa07da8d4261", "patch": "@@ -43,13 +43,6 @@ pub const CODE_GEN_MODEL_ARGS: &[(&str, llvm::CodeModel)] = &[\n     (\"large\", llvm::CodeModel::Large),\n ];\n \n-pub const TLS_MODEL_ARGS: [(&str, llvm::ThreadLocalMode); 4] = [\n-    (\"global-dynamic\", llvm::ThreadLocalMode::GeneralDynamic),\n-    (\"local-dynamic\", llvm::ThreadLocalMode::LocalDynamic),\n-    (\"initial-exec\", llvm::ThreadLocalMode::InitialExec),\n-    (\"local-exec\", llvm::ThreadLocalMode::LocalExec),\n-];\n-\n pub fn llvm_err(handler: &rustc_errors::Handler, msg: &str) -> FatalError {\n     match llvm::last_error() {\n         Some(err) => handler.fatal(&format!(\"{}: {}\", msg, err)),"}, {"sha": "f868385ee869a5908ecfee7441bae94c2ef2fc65", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=c354509343b0a3a9b935cc18b2d4aa07da8d4261", "patch": "@@ -21,7 +21,7 @@ use rustc_session::Session;\n use rustc_span::source_map::{Span, DUMMY_SP};\n use rustc_span::symbol::Symbol;\n use rustc_target::abi::{HasDataLayout, LayoutOf, PointeeInfo, Size, TargetDataLayout, VariantIdx};\n-use rustc_target::spec::{HasTargetSpec, RelocModel, Target};\n+use rustc_target::spec::{HasTargetSpec, RelocModel, Target, TlsModel};\n \n use std::cell::{Cell, RefCell};\n use std::ffi::CStr;\n@@ -87,19 +87,12 @@ pub struct CodegenCx<'ll, 'tcx> {\n     local_gen_sym_counter: Cell<usize>,\n }\n \n-fn get_tls_model(sess: &Session) -> llvm::ThreadLocalMode {\n-    let tls_model_arg = match sess.opts.debugging_opts.tls_model {\n-        Some(ref s) => &s[..],\n-        None => &sess.target.target.options.tls_model[..],\n-    };\n-\n-    match crate::back::write::TLS_MODEL_ARGS.iter().find(|&&arg| arg.0 == tls_model_arg) {\n-        Some(x) => x.1,\n-        _ => {\n-            sess.err(&format!(\"{:?} is not a valid TLS model\", tls_model_arg));\n-            sess.abort_if_errors();\n-            bug!();\n-        }\n+fn to_llvm_tls_model(tls_model: TlsModel) -> llvm::ThreadLocalMode {\n+    match tls_model {\n+        TlsModel::GeneralDynamic => llvm::ThreadLocalMode::GeneralDynamic,\n+        TlsModel::LocalDynamic => llvm::ThreadLocalMode::LocalDynamic,\n+        TlsModel::InitialExec => llvm::ThreadLocalMode::InitialExec,\n+        TlsModel::LocalExec => llvm::ThreadLocalMode::LocalExec,\n     }\n }\n \n@@ -267,7 +260,7 @@ impl<'ll, 'tcx> CodegenCx<'ll, 'tcx> {\n \n         let check_overflow = tcx.sess.overflow_checks();\n \n-        let tls_model = get_tls_model(&tcx.sess);\n+        let tls_model = to_llvm_tls_model(tcx.sess.tls_model());\n \n         let (llcx, llmod) = (&*llvm_module.llcx, llvm_module.llmod());\n "}, {"sha": "42302a56b41883d78ecb5bc907a8bf0d465f78f4", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=c354509343b0a3a9b935cc18b2d4aa07da8d4261", "patch": "@@ -216,7 +216,7 @@ impl CodegenBackend for LlvmCodegenBackend {\n             }\n             PrintRequest::TlsModels => {\n                 println!(\"Available TLS models:\");\n-                for &(name, _) in back::write::TLS_MODEL_ARGS.iter() {\n+                for name in &[\"global-dynamic\", \"local-dynamic\", \"initial-exec\", \"local-exec\"] {\n                     println!(\"    {}\", name);\n                 }\n                 println!();"}, {"sha": "654cd4980a4e16f3cd89db88b40f7bcef0e67570", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=c354509343b0a3a9b935cc18b2d4aa07da8d4261", "patch": "@@ -1601,7 +1601,7 @@ pub enum ExprKind<'hir> {\n ///\n /// To resolve the path to a `DefId`, call [`qpath_res`].\n ///\n-/// [`qpath_res`]: ../ty/struct.TypeckTables.html#method.qpath_res\n+/// [`qpath_res`]: ../rustc_middle/ty/struct.TypeckTables.html#method.qpath_res\n #[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub enum QPath<'hir> {\n     /// Path to a definition, optionally \"fully-qualified\" with a `Self`"}, {"sha": "cee2e5b5becdb350c3d833805522370f86d06a19", "filename": "src/librustc_interface/tests.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibrustc_interface%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibrustc_interface%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Ftests.rs?ref=c354509343b0a3a9b935cc18b2d4aa07da8d4261", "patch": "@@ -14,7 +14,8 @@ use rustc_session::{build_session, Session};\n use rustc_span::edition::{Edition, DEFAULT_EDITION};\n use rustc_span::symbol::sym;\n use rustc_span::SourceFileHashAlgorithm;\n-use rustc_target::spec::{LinkerFlavor, MergeFunctions, PanicStrategy, RelocModel, RelroLevel};\n+use rustc_target::spec::{LinkerFlavor, MergeFunctions, PanicStrategy};\n+use rustc_target::spec::{RelocModel, RelroLevel, TlsModel};\n use std::collections::{BTreeMap, BTreeSet};\n use std::iter::FromIterator;\n use std::path::PathBuf;\n@@ -567,7 +568,7 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(symbol_mangling_version, SymbolManglingVersion::V0);\n     tracked!(teach, true);\n     tracked!(thinlto, Some(true));\n-    tracked!(tls_model, Some(String::from(\"tls model\")));\n+    tracked!(tls_model, Some(TlsModel::GeneralDynamic));\n     tracked!(treat_err_as_bug, Some(1));\n     tracked!(unleash_the_miri_inside_of_you, true);\n     tracked!(verify_llvm_ir, true);"}, {"sha": "0dfc391d9cd3bf6634c77b32e937d3bbe52cad60", "filename": "src/librustc_session/config.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibrustc_session%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibrustc_session%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fconfig.rs?ref=c354509343b0a3a9b935cc18b2d4aa07da8d4261", "patch": "@@ -1315,10 +1315,6 @@ fn collect_print_requests(\n         prints.push(PrintRequest::CodeModels);\n         cg.code_model = None;\n     }\n-    if dopts.tls_model.as_ref().map_or(false, |s| s == \"help\") {\n-        prints.push(PrintRequest::TlsModels);\n-        dopts.tls_model = None;\n-    }\n \n     prints.extend(matches.opt_strs(\"print\").into_iter().map(|s| match &*s {\n         \"crate-name\" => PrintRequest::CrateName,\n@@ -2001,7 +1997,8 @@ crate mod dep_tracking {\n     use crate::utils::NativeLibraryKind;\n     use rustc_feature::UnstableFeatures;\n     use rustc_span::edition::Edition;\n-    use rustc_target::spec::{MergeFunctions, PanicStrategy, RelocModel, RelroLevel, TargetTriple};\n+    use rustc_target::spec::{MergeFunctions, PanicStrategy, RelocModel};\n+    use rustc_target::spec::{RelroLevel, TargetTriple, TlsModel};\n     use std::collections::hash_map::DefaultHasher;\n     use std::collections::BTreeMap;\n     use std::hash::Hash;\n@@ -2050,6 +2047,7 @@ crate mod dep_tracking {\n     impl_dep_tracking_hash_via_hash!(Option<Vec<String>>);\n     impl_dep_tracking_hash_via_hash!(Option<MergeFunctions>);\n     impl_dep_tracking_hash_via_hash!(Option<RelocModel>);\n+    impl_dep_tracking_hash_via_hash!(Option<TlsModel>);\n     impl_dep_tracking_hash_via_hash!(Option<PanicStrategy>);\n     impl_dep_tracking_hash_via_hash!(Option<RelroLevel>);\n     impl_dep_tracking_hash_via_hash!(Option<lint::Level>);"}, {"sha": "5b983d1105de46039ca8d18c959ca5376ee2a3dc", "filename": "src/librustc_session/options.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibrustc_session%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibrustc_session%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Foptions.rs?ref=c354509343b0a3a9b935cc18b2d4aa07da8d4261", "patch": "@@ -6,7 +6,8 @@ use crate::search_paths::SearchPath;\n use crate::utils::NativeLibraryKind;\n \n use rustc_target::spec::TargetTriple;\n-use rustc_target::spec::{LinkerFlavor, MergeFunctions, PanicStrategy, RelocModel, RelroLevel};\n+use rustc_target::spec::{LinkerFlavor, MergeFunctions, PanicStrategy};\n+use rustc_target::spec::{RelocModel, RelroLevel, TlsModel};\n \n use rustc_feature::UnstableFeatures;\n use rustc_span::edition::Edition;\n@@ -267,6 +268,8 @@ macro_rules! options {\n         pub const parse_src_file_hash: &str = \"either `md5` or `sha1`\";\n         pub const parse_relocation_model: &str =\n             \"one of supported relocation models (`rustc --print relocation-models`)\";\n+        pub const parse_tls_model: &str =\n+            \"one of supported TLS models (`rustc --print tls-models`)\";\n     }\n \n     #[allow(dead_code)]\n@@ -606,6 +609,14 @@ macro_rules! options {\n             true\n         }\n \n+        fn parse_tls_model(slot: &mut Option<TlsModel>, v: Option<&str>) -> bool {\n+            match v.and_then(|s| TlsModel::from_str(s).ok()) {\n+                Some(tls_model) => *slot = Some(tls_model),\n+                _ => return false,\n+            }\n+            true\n+        }\n+\n         fn parse_symbol_mangling_version(\n             slot: &mut SymbolManglingVersion,\n             v: Option<&str>,\n@@ -977,7 +988,7 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"measure time of each LLVM pass (default: no)\"),\n     time_passes: bool = (false, parse_bool, [UNTRACKED],\n         \"measure time of each rustc pass (default: no)\"),\n-    tls_model: Option<String> = (None, parse_opt_string, [TRACKED],\n+    tls_model: Option<TlsModel> = (None, parse_tls_model, [TRACKED],\n         \"choose the TLS model to use (`rustc --print tls-models` for details)\"),\n     trace_macros: bool = (false, parse_bool, [UNTRACKED],\n         \"for every macro invocation, print its name and arguments (default: no)\"),"}, {"sha": "42f9a8d6b05949320ebd5146e7bad7e452c4d1e8", "filename": "src/librustc_session/session.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibrustc_session%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibrustc_session%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fsession.rs?ref=c354509343b0a3a9b935cc18b2d4aa07da8d4261", "patch": "@@ -22,7 +22,7 @@ use rustc_errors::{Applicability, DiagnosticBuilder, DiagnosticId, ErrorReported\n use rustc_span::edition::Edition;\n use rustc_span::source_map::{self, FileLoader, MultiSpan, RealFileLoader, SourceMap, Span};\n use rustc_span::SourceFileHashAlgorithm;\n-use rustc_target::spec::{PanicStrategy, RelocModel, RelroLevel, Target, TargetTriple};\n+use rustc_target::spec::{PanicStrategy, RelocModel, RelroLevel, Target, TargetTriple, TlsModel};\n \n use std::cell::{self, RefCell};\n use std::env;\n@@ -588,6 +588,10 @@ impl Session {\n         self.opts.cg.relocation_model.unwrap_or(self.target.target.options.relocation_model)\n     }\n \n+    pub fn tls_model(&self) -> TlsModel {\n+        self.opts.debugging_opts.tls_model.unwrap_or(self.target.target.options.tls_model)\n+    }\n+\n     pub fn must_not_eliminate_frame_pointers(&self) -> bool {\n         // \"mcount\" function relies on stack pointer.\n         // See <https://sourceware.org/binutils/docs/gprof/Implementation.html>."}, {"sha": "3659c9ecdfca654cd206a37583b39a75c1bfda19", "filename": "src/librustc_target/spec/cloudabi_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibrustc_target%2Fspec%2Fcloudabi_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibrustc_target%2Fspec%2Fcloudabi_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fcloudabi_base.rs?ref=c354509343b0a3a9b935cc18b2d4aa07da8d4261", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkArgs, LinkerFlavor, RelroLevel, TargetOptions};\n+use crate::spec::{LinkArgs, LinkerFlavor, RelroLevel, TargetOptions, TlsModel};\n \n pub fn opts() -> TargetOptions {\n     let mut args = LinkArgs::new();\n@@ -29,7 +29,7 @@ pub fn opts() -> TargetOptions {\n         // (Global Offset Table) to obtain the effective address of a\n         // thread-local variable. Using a GOT is useful only when doing\n         // dynamic linking.\n-        tls_model: \"local-exec\".to_string(),\n+        tls_model: TlsModel::LocalExec,\n         relro_level: RelroLevel::Full,\n         ..Default::default()\n     }"}, {"sha": "18fb2aa3d5693f00ab0afbde139a8fb1ec5d8d84", "filename": "src/librustc_target/spec/hermit_base.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibrustc_target%2Fspec%2Fhermit_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibrustc_target%2Fspec%2Fhermit_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fhermit_base.rs?ref=c354509343b0a3a9b935cc18b2d4aa07da8d4261", "patch": "@@ -1,4 +1,5 @@\n-use crate::spec::{LinkArgs, LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, TargetOptions};\n+use crate::spec::{LinkArgs, LinkerFlavor, LldFlavor, PanicStrategy};\n+use crate::spec::{RelocModel, TargetOptions, TlsModel};\n \n pub fn opts() -> TargetOptions {\n     let mut pre_link_args = LinkArgs::new();\n@@ -17,7 +18,7 @@ pub fn opts() -> TargetOptions {\n         position_independent_executables: true,\n         relocation_model: RelocModel::Static,\n         target_family: None,\n-        tls_model: \"initial-exec\".to_string(),\n+        tls_model: TlsModel::InitialExec,\n         ..Default::default()\n     }\n }"}, {"sha": "7f2dada714d8f721145d3968dc3ce4924a0befa5", "filename": "src/librustc_target/spec/hermit_kernel_base.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibrustc_target%2Fspec%2Fhermit_kernel_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibrustc_target%2Fspec%2Fhermit_kernel_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fhermit_kernel_base.rs?ref=c354509343b0a3a9b935cc18b2d4aa07da8d4261", "patch": "@@ -1,4 +1,5 @@\n-use crate::spec::{LinkArgs, LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, TargetOptions};\n+use crate::spec::{LinkArgs, LinkerFlavor, LldFlavor, PanicStrategy};\n+use crate::spec::{RelocModel, TargetOptions, TlsModel};\n \n pub fn opts() -> TargetOptions {\n     let mut pre_link_args = LinkArgs::new();\n@@ -18,7 +19,7 @@ pub fn opts() -> TargetOptions {\n         position_independent_executables: true,\n         relocation_model: RelocModel::Static,\n         target_family: None,\n-        tls_model: \"initial-exec\".to_string(),\n+        tls_model: TlsModel::InitialExec,\n         ..Default::default()\n     }\n }"}, {"sha": "e853c07632f9043fb744750373580bca2e9e620c", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 51, "deletions": 3, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=c354509343b0a3a9b935cc18b2d4aa07da8d4261", "patch": "@@ -305,6 +305,42 @@ impl ToJson for RelocModel {\n     }\n }\n \n+#[derive(Clone, Copy, PartialEq, Hash, Debug)]\n+pub enum TlsModel {\n+    GeneralDynamic,\n+    LocalDynamic,\n+    InitialExec,\n+    LocalExec,\n+}\n+\n+impl FromStr for TlsModel {\n+    type Err = ();\n+\n+    fn from_str(s: &str) -> Result<TlsModel, ()> {\n+        Ok(match s {\n+            // Note the difference \"general\" vs \"global\" difference. The model name is \"general\",\n+            // but the user-facing option name is \"global\" for consistency with other compilers.\n+            \"global-dynamic\" => TlsModel::GeneralDynamic,\n+            \"local-dynamic\" => TlsModel::LocalDynamic,\n+            \"initial-exec\" => TlsModel::InitialExec,\n+            \"local-exec\" => TlsModel::LocalExec,\n+            _ => return Err(()),\n+        })\n+    }\n+}\n+\n+impl ToJson for TlsModel {\n+    fn to_json(&self) -> Json {\n+        match *self {\n+            TlsModel::GeneralDynamic => \"global-dynamic\",\n+            TlsModel::LocalDynamic => \"local-dynamic\",\n+            TlsModel::InitialExec => \"initial-exec\",\n+            TlsModel::LocalExec => \"local-exec\",\n+        }\n+        .to_json()\n+    }\n+}\n+\n pub enum LoadTargetError {\n     BuiltinTargetNotFound(String),\n     Other(String),\n@@ -660,7 +696,7 @@ pub struct TargetOptions {\n     pub code_model: Option<String>,\n     /// TLS model to use. Options are \"global-dynamic\" (default), \"local-dynamic\", \"initial-exec\"\n     /// and \"local-exec\". This is similar to the -ftls-model option in GCC/Clang.\n-    pub tls_model: String,\n+    pub tls_model: TlsModel,\n     /// Do not emit code that uses the \"red zone\", if the ABI has one. Defaults to false.\n     pub disable_redzone: bool,\n     /// Eliminate frame pointers from stack frames if possible. Defaults to true.\n@@ -863,7 +899,7 @@ impl Default for TargetOptions {\n             executables: false,\n             relocation_model: RelocModel::Pic,\n             code_model: None,\n-            tls_model: \"global-dynamic\".to_string(),\n+            tls_model: TlsModel::GeneralDynamic,\n             disable_redzone: false,\n             eliminate_frame_pointer: true,\n             function_sections: true,\n@@ -1060,6 +1096,18 @@ impl Target {\n                     Some(Ok(()))\n                 })).unwrap_or(Ok(()))\n             } );\n+            ($key_name:ident, TlsModel) => ( {\n+                let name = (stringify!($key_name)).replace(\"_\", \"-\");\n+                obj.find(&name[..]).and_then(|o| o.as_string().and_then(|s| {\n+                    match s.parse::<TlsModel>() {\n+                        Ok(tls_model) => base.options.$key_name = tls_model,\n+                        _ => return Some(Err(format!(\"'{}' is not a valid TLS model. \\\n+                                                      Run `rustc --print tls-models` to \\\n+                                                      see the list of supported values.\", s))),\n+                    }\n+                    Some(Ok(()))\n+                })).unwrap_or(Ok(()))\n+            } );\n             ($key_name:ident, PanicStrategy) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n                 obj.find(&name[..]).and_then(|o| o.as_string().and_then(|s| {\n@@ -1200,7 +1248,7 @@ impl Target {\n         key!(executables, bool);\n         key!(relocation_model, RelocModel)?;\n         key!(code_model, optional);\n-        key!(tls_model);\n+        key!(tls_model, TlsModel)?;\n         key!(disable_redzone, bool);\n         key!(eliminate_frame_pointer, bool);\n         key!(function_sections, bool);"}, {"sha": "bb19b9d00e8bf5e235541665332e47296a9e7d14", "filename": "src/librustc_target/spec/wasm32_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibrustc_target%2Fspec%2Fwasm32_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibrustc_target%2Fspec%2Fwasm32_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwasm32_base.rs?ref=c354509343b0a3a9b935cc18b2d4aa07da8d4261", "patch": "@@ -1,4 +1,4 @@\n-use super::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, TargetOptions};\n+use super::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, TargetOptions, TlsModel};\n use std::collections::BTreeMap;\n \n pub fn options() -> TargetOptions {\n@@ -138,7 +138,7 @@ pub fn options() -> TargetOptions {\n         // `has_elf_tls`) and we need to get it to work by specifying\n         // `local-exec` as that's all that's implemented in LLVM today for wasm.\n         has_elf_tls: true,\n-        tls_model: \"local-exec\".to_string(),\n+        tls_model: TlsModel::LocalExec,\n \n         // gdb scripts don't work on wasm blobs\n         emit_debug_gdb_scripts: false,"}, {"sha": "3d665123f6767dd07b268b35fa5e2857ef3cf410", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=c354509343b0a3a9b935cc18b2d4aa07da8d4261", "patch": "@@ -211,12 +211,9 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n             ty::RawPtr(mt_b) => {\n                 return self.coerce_unsafe_ptr(a, b, mt_b.mutbl);\n             }\n-\n-            ty::Ref(r_b, ty, mutbl) => {\n-                let mt_b = ty::TypeAndMut { ty, mutbl };\n-                return self.coerce_borrowed_pointer(a, b, r_b, mt_b);\n+            ty::Ref(r_b, _, mutbl_b) => {\n+                return self.coerce_borrowed_pointer(a, b, r_b, mutbl_b);\n             }\n-\n             _ => {}\n         }\n \n@@ -255,7 +252,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n         a: Ty<'tcx>,\n         b: Ty<'tcx>,\n         r_b: ty::Region<'tcx>,\n-        mt_b: TypeAndMut<'tcx>,\n+        mutbl_b: hir::Mutability,\n     ) -> CoerceResult<'tcx> {\n         debug!(\"coerce_borrowed_pointer(a={:?}, b={:?})\", a, b);\n \n@@ -268,7 +265,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n         let (r_a, mt_a) = match a.kind {\n             ty::Ref(r_a, ty, mutbl) => {\n                 let mt_a = ty::TypeAndMut { ty, mutbl };\n-                coerce_mutbls(mt_a.mutbl, mt_b.mutbl)?;\n+                coerce_mutbls(mt_a.mutbl, mutbl_b)?;\n                 (r_a, mt_a)\n             }\n             _ => return self.unify_and(a, b, identity),\n@@ -364,7 +361,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n                 r_a // [3] above\n             } else {\n                 if r_borrow_var.is_none() {\n-                    // create var lazilly, at most once\n+                    // create var lazily, at most once\n                     let coercion = Coercion(span);\n                     let r = self.next_region_var(coercion);\n                     r_borrow_var = Some(r); // [4] above\n@@ -375,7 +372,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n                 r,\n                 TypeAndMut {\n                     ty: referent_ty,\n-                    mutbl: mt_b.mutbl, // [1] above\n+                    mutbl: mutbl_b, // [1] above\n                 },\n             );\n             match self.unify(derefd_ty_a, b) {\n@@ -417,11 +414,11 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n             // `self.x` both have `&mut `type would be a move of\n             // `self.x`, but we auto-coerce it to `foo(&mut *self.x)`,\n             // which is a borrow.\n-            assert_eq!(mt_b.mutbl, hir::Mutability::Not); // can only coerce &T -> &U\n+            assert_eq!(mutbl_b, hir::Mutability::Not); // can only coerce &T -> &U\n             return success(vec![], ty, obligations);\n         }\n \n-        let needs = Needs::maybe_mut_place(mt_b.mutbl);\n+        let needs = Needs::maybe_mut_place(mutbl_b);\n         let InferOk { value: mut adjustments, obligations: o } =\n             autoderef.adjust_steps_as_infer_ok(self, needs);\n         obligations.extend(o);\n@@ -433,7 +430,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n             ty::Ref(r_borrow, _, _) => r_borrow,\n             _ => span_bug!(span, \"expected a ref type, got {:?}\", ty),\n         };\n-        let mutbl = match mt_b.mutbl {\n+        let mutbl = match mutbl_b {\n             hir::Mutability::Not => AutoBorrowMutability::Not,\n             hir::Mutability::Mut => {\n                 AutoBorrowMutability::Mut { allow_two_phase_borrow: self.allow_two_phase }"}, {"sha": "f4c164a324e32e387bd157dbc6f2f78993e7d348", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=c354509343b0a3a9b935cc18b2d4aa07da8d4261", "patch": "@@ -659,6 +659,11 @@ impl Read for File {\n         self.inner.read_vectored(bufs)\n     }\n \n+    #[inline]\n+    fn is_read_vectored(&self) -> bool {\n+        self.inner.is_read_vectored()\n+    }\n+\n     #[inline]\n     unsafe fn initializer(&self) -> Initializer {\n         Initializer::nop()\n@@ -674,6 +679,11 @@ impl Write for File {\n         self.inner.write_vectored(bufs)\n     }\n \n+    #[inline]\n+    fn is_write_vectored(&self) -> bool {\n+        self.inner.is_write_vectored()\n+    }\n+\n     fn flush(&mut self) -> io::Result<()> {\n         self.inner.flush()\n     }\n@@ -694,6 +704,11 @@ impl Read for &File {\n         self.inner.read_vectored(bufs)\n     }\n \n+    #[inline]\n+    fn is_read_vectored(&self) -> bool {\n+        self.inner.is_read_vectored()\n+    }\n+\n     #[inline]\n     unsafe fn initializer(&self) -> Initializer {\n         Initializer::nop()\n@@ -709,6 +724,11 @@ impl Write for &File {\n         self.inner.write_vectored(bufs)\n     }\n \n+    #[inline]\n+    fn is_write_vectored(&self) -> bool {\n+        self.inner.is_write_vectored()\n+    }\n+\n     fn flush(&mut self) -> io::Result<()> {\n         self.inner.flush()\n     }"}, {"sha": "046b1a68880248577058f819601a6f34e541cd08", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=c354509343b0a3a9b935cc18b2d4aa07da8d4261", "patch": "@@ -292,6 +292,10 @@ impl<R: Read> Read for BufReader<R> {\n         Ok(nread)\n     }\n \n+    fn is_read_vectored(&self) -> bool {\n+        self.inner.is_read_vectored()\n+    }\n+\n     // we can't skip unconditionally because of the large buffer case in read.\n     unsafe fn initializer(&self) -> Initializer {\n         self.inner.initializer()\n@@ -680,6 +684,10 @@ impl<W: Write> Write for BufWriter<W> {\n         }\n     }\n \n+    fn is_write_vectored(&self) -> bool {\n+        self.get_ref().is_write_vectored()\n+    }\n+\n     fn flush(&mut self) -> io::Result<()> {\n         self.flush_buf().and_then(|()| self.get_mut().flush())\n     }"}, {"sha": "f3e3fc81a5d8249d029ed65d82de764bdeddf2dd", "filename": "src/libstd/io/cursor.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fio%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fio%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcursor.rs?ref=c354509343b0a3a9b935cc18b2d4aa07da8d4261", "patch": "@@ -266,6 +266,10 @@ where\n         Ok(nread)\n     }\n \n+    fn is_read_vectored(&self) -> bool {\n+        true\n+    }\n+\n     fn read_exact(&mut self, buf: &mut [u8]) -> io::Result<()> {\n         let n = buf.len();\n         Read::read_exact(&mut self.fill_buf()?, buf)?;\n@@ -372,6 +376,11 @@ impl Write for Cursor<&mut [u8]> {\n         slice_write_vectored(&mut self.pos, self.inner, bufs)\n     }\n \n+    #[inline]\n+    fn is_write_vectored(&self) -> bool {\n+        true\n+    }\n+\n     #[inline]\n     fn flush(&mut self) -> io::Result<()> {\n         Ok(())\n@@ -388,6 +397,11 @@ impl Write for Cursor<&mut Vec<u8>> {\n         vec_write_vectored(&mut self.pos, self.inner, bufs)\n     }\n \n+    #[inline]\n+    fn is_write_vectored(&self) -> bool {\n+        true\n+    }\n+\n     #[inline]\n     fn flush(&mut self) -> io::Result<()> {\n         Ok(())\n@@ -404,6 +418,11 @@ impl Write for Cursor<Vec<u8>> {\n         vec_write_vectored(&mut self.pos, &mut self.inner, bufs)\n     }\n \n+    #[inline]\n+    fn is_write_vectored(&self) -> bool {\n+        true\n+    }\n+\n     #[inline]\n     fn flush(&mut self) -> io::Result<()> {\n         Ok(())\n@@ -422,6 +441,11 @@ impl Write for Cursor<Box<[u8]>> {\n         slice_write_vectored(&mut self.pos, &mut self.inner, bufs)\n     }\n \n+    #[inline]\n+    fn is_write_vectored(&self) -> bool {\n+        true\n+    }\n+\n     #[inline]\n     fn flush(&mut self) -> io::Result<()> {\n         Ok(())"}, {"sha": "01dff0b3eb3909c25b05057e84089a43ca763699", "filename": "src/libstd/io/impls.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fio%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fio%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fimpls.rs?ref=c354509343b0a3a9b935cc18b2d4aa07da8d4261", "patch": "@@ -20,6 +20,11 @@ impl<R: Read + ?Sized> Read for &mut R {\n         (**self).read_vectored(bufs)\n     }\n \n+    #[inline]\n+    fn is_read_vectored(&self) -> bool {\n+        (**self).is_read_vectored()\n+    }\n+\n     #[inline]\n     unsafe fn initializer(&self) -> Initializer {\n         (**self).initializer()\n@@ -52,6 +57,11 @@ impl<W: Write + ?Sized> Write for &mut W {\n         (**self).write_vectored(bufs)\n     }\n \n+    #[inline]\n+    fn is_write_vectored(&self) -> bool {\n+        (**self).is_write_vectored()\n+    }\n+\n     #[inline]\n     fn flush(&mut self) -> io::Result<()> {\n         (**self).flush()\n@@ -109,6 +119,11 @@ impl<R: Read + ?Sized> Read for Box<R> {\n         (**self).read_vectored(bufs)\n     }\n \n+    #[inline]\n+    fn is_read_vectored(&self) -> bool {\n+        (**self).is_read_vectored()\n+    }\n+\n     #[inline]\n     unsafe fn initializer(&self) -> Initializer {\n         (**self).initializer()\n@@ -141,6 +156,11 @@ impl<W: Write + ?Sized> Write for Box<W> {\n         (**self).write_vectored(bufs)\n     }\n \n+    #[inline]\n+    fn is_write_vectored(&self) -> bool {\n+        (**self).is_write_vectored()\n+    }\n+\n     #[inline]\n     fn flush(&mut self) -> io::Result<()> {\n         (**self).flush()\n@@ -240,6 +260,11 @@ impl Read for &[u8] {\n         Ok(nread)\n     }\n \n+    #[inline]\n+    fn is_read_vectored(&self) -> bool {\n+        true\n+    }\n+\n     #[inline]\n     unsafe fn initializer(&self) -> Initializer {\n         Initializer::nop()\n@@ -316,6 +341,11 @@ impl Write for &mut [u8] {\n         Ok(nwritten)\n     }\n \n+    #[inline]\n+    fn is_write_vectored(&self) -> bool {\n+        true\n+    }\n+\n     #[inline]\n     fn write_all(&mut self, data: &[u8]) -> io::Result<()> {\n         if self.write(data)? == data.len() {\n@@ -351,6 +381,11 @@ impl Write for Vec<u8> {\n         Ok(len)\n     }\n \n+    #[inline]\n+    fn is_write_vectored(&self) -> bool {\n+        true\n+    }\n+\n     #[inline]\n     fn write_all(&mut self, buf: &[u8]) -> io::Result<()> {\n         self.extend_from_slice(buf);"}, {"sha": "9cfb1728c04e4fc07128d4864d0bb6091507fe32", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=c354509343b0a3a9b935cc18b2d4aa07da8d4261", "patch": "@@ -256,6 +256,7 @@\n //! [`Read::read`]: trait.Read.html#tymethod.read\n //! [`Result`]: ../result/enum.Result.html\n //! [`.unwrap()`]: ../result/enum.Result.html#method.unwrap\n+// ignore-tidy-filelength\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n@@ -580,6 +581,19 @@ pub trait Read {\n         default_read_vectored(|b| self.read(b), bufs)\n     }\n \n+    /// Determines if this `Read`er has an efficient `read_vectored`\n+    /// implementation.\n+    ///\n+    /// If a `Read`er does not override the default `read_vectored`\n+    /// implementation, code using it may want to avoid the method all together\n+    /// and coalesce writes into a single buffer for higher performance.\n+    ///\n+    /// The default implementation returns `false`.\n+    #[unstable(feature = \"can_vector\", issue = \"69941\")]\n+    fn is_read_vectored(&self) -> bool {\n+        false\n+    }\n+\n     /// Determines if this `Read`er can work with buffers of uninitialized\n     /// memory.\n     ///\n@@ -1304,6 +1318,19 @@ pub trait Write {\n         default_write_vectored(|b| self.write(b), bufs)\n     }\n \n+    /// Determines if this `Write`er has an efficient `write_vectored`\n+    /// implementation.\n+    ///\n+    /// If a `Write`er does not override the default `write_vectored`\n+    /// implementation, code using it may want to avoid the method all together\n+    /// and coalesce writes into a single buffer for higher performance.\n+    ///\n+    /// The default implementation returns `false`.\n+    #[unstable(feature = \"can_vector\", issue = \"69941\")]\n+    fn is_write_vectored(&self) -> bool {\n+        false\n+    }\n+\n     /// Flush this output stream, ensuring that all intermediately buffered\n     /// contents reach their destination.\n     ///"}, {"sha": "b65b150d2c3a18ef41bf55d91b36abbce3dd5dac", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=c354509343b0a3a9b935cc18b2d4aa07da8d4261", "patch": "@@ -87,6 +87,11 @@ impl Read for StdinRaw {\n         self.0.read_vectored(bufs)\n     }\n \n+    #[inline]\n+    fn is_read_vectored(&self) -> bool {\n+        self.0.is_read_vectored()\n+    }\n+\n     #[inline]\n     unsafe fn initializer(&self) -> Initializer {\n         Initializer::nop()\n@@ -101,6 +106,11 @@ impl Write for StdoutRaw {\n         self.0.write_vectored(bufs)\n     }\n \n+    #[inline]\n+    fn is_write_vectored(&self) -> bool {\n+        self.0.is_write_vectored()\n+    }\n+\n     fn flush(&mut self) -> io::Result<()> {\n         self.0.flush()\n     }\n@@ -114,6 +124,11 @@ impl Write for StderrRaw {\n         self.0.write_vectored(bufs)\n     }\n \n+    #[inline]\n+    fn is_write_vectored(&self) -> bool {\n+        self.0.is_write_vectored()\n+    }\n+\n     fn flush(&mut self) -> io::Result<()> {\n         self.0.flush()\n     }\n@@ -140,6 +155,14 @@ impl<W: io::Write> io::Write for Maybe<W> {\n         }\n     }\n \n+    #[inline]\n+    fn is_write_vectored(&self) -> bool {\n+        match self {\n+            Maybe::Real(w) => w.is_write_vectored(),\n+            Maybe::Fake => true,\n+        }\n+    }\n+\n     fn flush(&mut self) -> io::Result<()> {\n         match *self {\n             Maybe::Real(ref mut w) => handle_ebadf(w.flush(), ()),\n@@ -162,6 +185,14 @@ impl<R: io::Read> io::Read for Maybe<R> {\n             Maybe::Fake => Ok(0),\n         }\n     }\n+\n+    #[inline]\n+    fn is_read_vectored(&self) -> bool {\n+        match self {\n+            Maybe::Real(w) => w.is_read_vectored(),\n+            Maybe::Fake => true,\n+        }\n+    }\n }\n \n fn handle_ebadf<T>(r: io::Result<T>, default: T) -> io::Result<T> {\n@@ -352,6 +383,10 @@ impl Read for Stdin {\n         self.lock().read_vectored(bufs)\n     }\n     #[inline]\n+    fn is_read_vectored(&self) -> bool {\n+        self.lock().is_read_vectored()\n+    }\n+    #[inline]\n     unsafe fn initializer(&self) -> Initializer {\n         Initializer::nop()\n     }\n@@ -376,6 +411,11 @@ impl Read for StdinLock<'_> {\n         self.inner.read_vectored(bufs)\n     }\n \n+    #[inline]\n+    fn is_read_vectored(&self) -> bool {\n+        self.inner.is_read_vectored()\n+    }\n+\n     #[inline]\n     unsafe fn initializer(&self) -> Initializer {\n         Initializer::nop()\n@@ -543,6 +583,10 @@ impl Write for Stdout {\n     fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         self.lock().write_vectored(bufs)\n     }\n+    #[inline]\n+    fn is_write_vectored(&self) -> bool {\n+        self.lock().is_write_vectored()\n+    }\n     fn flush(&mut self) -> io::Result<()> {\n         self.lock().flush()\n     }\n@@ -561,6 +605,10 @@ impl Write for StdoutLock<'_> {\n     fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         self.inner.borrow_mut().write_vectored(bufs)\n     }\n+    #[inline]\n+    fn is_write_vectored(&self) -> bool {\n+        self.inner.borrow_mut().is_write_vectored()\n+    }\n     fn flush(&mut self) -> io::Result<()> {\n         self.inner.borrow_mut().flush()\n     }\n@@ -709,6 +757,10 @@ impl Write for Stderr {\n     fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         self.lock().write_vectored(bufs)\n     }\n+    #[inline]\n+    fn is_write_vectored(&self) -> bool {\n+        self.lock().is_write_vectored()\n+    }\n     fn flush(&mut self) -> io::Result<()> {\n         self.lock().flush()\n     }\n@@ -727,6 +779,10 @@ impl Write for StderrLock<'_> {\n     fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         self.inner.borrow_mut().write_vectored(bufs)\n     }\n+    #[inline]\n+    fn is_write_vectored(&self) -> bool {\n+        self.inner.borrow_mut().is_write_vectored()\n+    }\n     fn flush(&mut self) -> io::Result<()> {\n         self.inner.borrow_mut().flush()\n     }"}, {"sha": "b9d5dc27db0063d80bde763d74e51400f361e6e0", "filename": "src/libstd/io/util.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Futil.rs?ref=c354509343b0a3a9b935cc18b2d4aa07da8d4261", "patch": "@@ -179,6 +179,11 @@ impl Read for Repeat {\n         Ok(nwritten)\n     }\n \n+    #[inline]\n+    fn is_read_vectored(&self) -> bool {\n+        true\n+    }\n+\n     #[inline]\n     unsafe fn initializer(&self) -> Initializer {\n         Initializer::nop()\n@@ -235,6 +240,11 @@ impl Write for Sink {\n         Ok(total_len)\n     }\n \n+    #[inline]\n+    fn is_write_vectored(&self) -> bool {\n+        true\n+    }\n+\n     #[inline]\n     fn flush(&mut self) -> io::Result<()> {\n         Ok(())"}, {"sha": "ac07af5e278fbe902425aeaab38e12799cebf8bb", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=c354509343b0a3a9b935cc18b2d4aa07da8d4261", "patch": "@@ -243,6 +243,7 @@\n #![feature(box_syntax)]\n #![feature(c_variadic)]\n #![feature(cfg_accessible)]\n+#![feature(can_vector)]\n #![feature(cfg_target_has_atomic)]\n #![feature(cfg_target_thread_local)]\n #![feature(char_error_internals)]"}, {"sha": "9ac54dd5f7a65e328092e72bf1aae22438310125", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=c354509343b0a3a9b935cc18b2d4aa07da8d4261", "patch": "@@ -576,6 +576,11 @@ impl Read for TcpStream {\n         self.0.read_vectored(bufs)\n     }\n \n+    #[inline]\n+    fn is_read_vectored(&self) -> bool {\n+        self.0.is_read_vectored()\n+    }\n+\n     #[inline]\n     unsafe fn initializer(&self) -> Initializer {\n         Initializer::nop()\n@@ -591,6 +596,11 @@ impl Write for TcpStream {\n         self.0.write_vectored(bufs)\n     }\n \n+    #[inline]\n+    fn is_write_vectored(&self) -> bool {\n+        self.0.is_write_vectored()\n+    }\n+\n     fn flush(&mut self) -> io::Result<()> {\n         Ok(())\n     }\n@@ -605,6 +615,11 @@ impl Read for &TcpStream {\n         self.0.read_vectored(bufs)\n     }\n \n+    #[inline]\n+    fn is_read_vectored(&self) -> bool {\n+        self.0.is_read_vectored()\n+    }\n+\n     #[inline]\n     unsafe fn initializer(&self) -> Initializer {\n         Initializer::nop()\n@@ -620,6 +635,11 @@ impl Write for &TcpStream {\n         self.0.write_vectored(bufs)\n     }\n \n+    #[inline]\n+    fn is_write_vectored(&self) -> bool {\n+        self.0.is_write_vectored()\n+    }\n+\n     fn flush(&mut self) -> io::Result<()> {\n         Ok(())\n     }"}, {"sha": "b457d190b951066d429b92cafbd1b6b0564de0a4", "filename": "src/libstd/process.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=c354509343b0a3a9b935cc18b2d4aa07da8d4261", "patch": "@@ -245,6 +245,10 @@ impl Write for ChildStdin {\n         self.inner.write_vectored(bufs)\n     }\n \n+    fn is_write_vectored(&self) -> bool {\n+        self.inner.is_write_vectored()\n+    }\n+\n     fn flush(&mut self) -> io::Result<()> {\n         Ok(())\n     }\n@@ -300,6 +304,11 @@ impl Read for ChildStdout {\n         self.inner.read_vectored(bufs)\n     }\n \n+    #[inline]\n+    fn is_read_vectored(&self) -> bool {\n+        self.inner.is_read_vectored()\n+    }\n+\n     #[inline]\n     unsafe fn initializer(&self) -> Initializer {\n         Initializer::nop()\n@@ -356,6 +365,11 @@ impl Read for ChildStderr {\n         self.inner.read_vectored(bufs)\n     }\n \n+    #[inline]\n+    fn is_read_vectored(&self) -> bool {\n+        self.inner.is_read_vectored()\n+    }\n+\n     #[inline]\n     unsafe fn initializer(&self) -> Initializer {\n         Initializer::nop()"}, {"sha": "ecb5b51cccdcd965d85e9ee8e22ecb878d876719", "filename": "src/libstd/sys/cloudabi/shims/fs.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Ffs.rs?ref=c354509343b0a3a9b935cc18b2d4aa07da8d4261", "patch": "@@ -202,6 +202,10 @@ impl File {\n         match self.0 {}\n     }\n \n+    pub fn is_read_vectored(&self) -> bool {\n+        match self.0 {}\n+    }\n+\n     pub fn write(&self, _buf: &[u8]) -> io::Result<usize> {\n         match self.0 {}\n     }\n@@ -210,6 +214,10 @@ impl File {\n         match self.0 {}\n     }\n \n+    pub fn is_write_vectored(&self) -> bool {\n+        match self.0 {}\n+    }\n+\n     pub fn flush(&self) -> io::Result<()> {\n         match self.0 {}\n     }"}, {"sha": "375aaab405dff13b9de4ae81c4d104b622182647", "filename": "src/libstd/sys/cloudabi/shims/net.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fnet.rs?ref=c354509343b0a3a9b935cc18b2d4aa07da8d4261", "patch": "@@ -47,6 +47,10 @@ impl TcpStream {\n         match self.0 {}\n     }\n \n+    pub fn is_read_vectored(&self) -> bool {\n+        match self.0 {}\n+    }\n+\n     pub fn write(&self, _: &[u8]) -> io::Result<usize> {\n         match self.0 {}\n     }\n@@ -55,6 +59,10 @@ impl TcpStream {\n         match self.0 {}\n     }\n \n+    pub fn is_write_vectored(&self) -> bool {\n+        match self.0 {}\n+    }\n+\n     pub fn peer_addr(&self) -> io::Result<SocketAddr> {\n         match self.0 {}\n     }"}, {"sha": "10d0925823eb94660278ce2390c892c093d7e3c6", "filename": "src/libstd/sys/cloudabi/shims/pipe.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fpipe.rs?ref=c354509343b0a3a9b935cc18b2d4aa07da8d4261", "patch": "@@ -12,6 +12,10 @@ impl AnonPipe {\n         match self.0 {}\n     }\n \n+    pub fn is_read_vectored(&self) -> bool {\n+        match self.0 {}\n+    }\n+\n     pub fn write(&self, _buf: &[u8]) -> io::Result<usize> {\n         match self.0 {}\n     }\n@@ -20,6 +24,10 @@ impl AnonPipe {\n         match self.0 {}\n     }\n \n+    pub fn is_write_vectored(&self) -> bool {\n+        match self.0 {}\n+    }\n+\n     pub fn diverge(&self) -> ! {\n         match self.0 {}\n     }"}, {"sha": "82ccab1462ba868bc3a9315bcac5a0716ca2830e", "filename": "src/libstd/sys/hermit/fs.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys%2Fhermit%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys%2Fhermit%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fhermit%2Ffs.rs?ref=c354509343b0a3a9b935cc18b2d4aa07da8d4261", "patch": "@@ -301,6 +301,11 @@ impl File {\n         crate::io::default_read_vectored(|buf| self.read(buf), bufs)\n     }\n \n+    #[inline]\n+    pub fn is_read_vectored(&self) -> bool {\n+        false\n+    }\n+\n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n         self.0.write(buf)\n     }\n@@ -309,6 +314,11 @@ impl File {\n         crate::io::default_write_vectored(|buf| self.write(buf), bufs)\n     }\n \n+    #[inline]\n+    pub fn is_write_vectored(&self) -> bool {\n+        false\n+    }\n+\n     pub fn flush(&self) -> io::Result<()> {\n         Ok(())\n     }"}, {"sha": "5b5379c8b0581fe334096dd77a2940c55f5634df", "filename": "src/libstd/sys/hermit/net.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys%2Fhermit%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys%2Fhermit%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fhermit%2Fnet.rs?ref=c354509343b0a3a9b935cc18b2d4aa07da8d4261", "patch": "@@ -99,6 +99,11 @@ impl TcpStream {\n         Ok(size)\n     }\n \n+    #[inline]\n+    pub fn is_read_vectored(&self) -> bool {\n+        true\n+    }\n+\n     pub fn write(&self, buffer: &[u8]) -> io::Result<usize> {\n         self.write_vectored(&[IoSlice::new(buffer)])\n     }\n@@ -114,6 +119,11 @@ impl TcpStream {\n         Ok(size)\n     }\n \n+    #[inline]\n+    pub fn is_write_vectored(&self) -> bool {\n+        true\n+    }\n+\n     pub fn peer_addr(&self) -> io::Result<SocketAddr> {\n         Err(io::Error::new(ErrorKind::Other, \"peer_addr isn't supported\"))\n     }"}, {"sha": "10d0925823eb94660278ce2390c892c093d7e3c6", "filename": "src/libstd/sys/hermit/pipe.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys%2Fhermit%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys%2Fhermit%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fhermit%2Fpipe.rs?ref=c354509343b0a3a9b935cc18b2d4aa07da8d4261", "patch": "@@ -12,6 +12,10 @@ impl AnonPipe {\n         match self.0 {}\n     }\n \n+    pub fn is_read_vectored(&self) -> bool {\n+        match self.0 {}\n+    }\n+\n     pub fn write(&self, _buf: &[u8]) -> io::Result<usize> {\n         match self.0 {}\n     }\n@@ -20,6 +24,10 @@ impl AnonPipe {\n         match self.0 {}\n     }\n \n+    pub fn is_write_vectored(&self) -> bool {\n+        match self.0 {}\n+    }\n+\n     pub fn diverge(&self) -> ! {\n         match self.0 {}\n     }"}, {"sha": "208265de465adf3a1b81120c1eabe0f7f599a159", "filename": "src/libstd/sys/hermit/stdio.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys%2Fhermit%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys%2Fhermit%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fhermit%2Fstdio.rs?ref=c354509343b0a3a9b935cc18b2d4aa07da8d4261", "patch": "@@ -20,6 +20,11 @@ impl Stdin {\n         //    .read(data)\n         Ok(0)\n     }\n+\n+    #[inline]\n+    pub fn is_read_vectored(&self) -> bool {\n+        true\n+    }\n }\n \n impl Stdout {\n@@ -51,6 +56,11 @@ impl Stdout {\n         }\n     }\n \n+    #[inline]\n+    pub fn is_write_vectored(&self) -> bool {\n+        true\n+    }\n+\n     pub fn flush(&self) -> io::Result<()> {\n         Ok(())\n     }\n@@ -85,6 +95,11 @@ impl Stderr {\n         }\n     }\n \n+    #[inline]\n+    pub fn is_write_vectored(&self) -> bool {\n+        true\n+    }\n+\n     pub fn flush(&self) -> io::Result<()> {\n         Ok(())\n     }"}, {"sha": "90158030c7fbe19c8a6c00f8d2e367fb8bc6fa45", "filename": "src/libstd/sys/sgx/fd.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys%2Fsgx%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys%2Fsgx%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Ffd.rs?ref=c354509343b0a3a9b935cc18b2d4aa07da8d4261", "patch": "@@ -34,6 +34,11 @@ impl FileDesc {\n         usercalls::read(self.fd, bufs)\n     }\n \n+    #[inline]\n+    pub fn is_read_vectored(&self) -> bool {\n+        true\n+    }\n+\n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n         usercalls::write(self.fd, &[IoSlice::new(buf)])\n     }\n@@ -42,6 +47,11 @@ impl FileDesc {\n         usercalls::write(self.fd, bufs)\n     }\n \n+    #[inline]\n+    pub fn is_write_vectored(&self) -> bool {\n+        true\n+    }\n+\n     pub fn flush(&self) -> io::Result<()> {\n         usercalls::flush(self.fd)\n     }"}, {"sha": "ecb5b51cccdcd965d85e9ee8e22ecb878d876719", "filename": "src/libstd/sys/sgx/fs.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys%2Fsgx%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys%2Fsgx%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Ffs.rs?ref=c354509343b0a3a9b935cc18b2d4aa07da8d4261", "patch": "@@ -202,6 +202,10 @@ impl File {\n         match self.0 {}\n     }\n \n+    pub fn is_read_vectored(&self) -> bool {\n+        match self.0 {}\n+    }\n+\n     pub fn write(&self, _buf: &[u8]) -> io::Result<usize> {\n         match self.0 {}\n     }\n@@ -210,6 +214,10 @@ impl File {\n         match self.0 {}\n     }\n \n+    pub fn is_write_vectored(&self) -> bool {\n+        match self.0 {}\n+    }\n+\n     pub fn flush(&self) -> io::Result<()> {\n         match self.0 {}\n     }"}, {"sha": "666a157b09cd0e88ebaf79709bbc0b5a164d015e", "filename": "src/libstd/sys/sgx/net.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys%2Fsgx%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys%2Fsgx%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fnet.rs?ref=c354509343b0a3a9b935cc18b2d4aa07da8d4261", "patch": "@@ -149,6 +149,11 @@ impl TcpStream {\n         self.inner.inner.read_vectored(bufs)\n     }\n \n+    #[inline]\n+    pub fn is_read_vectored(&self) -> bool {\n+        self.inner.inner.is_read_vectored()\n+    }\n+\n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n         self.inner.inner.write(buf)\n     }\n@@ -157,6 +162,11 @@ impl TcpStream {\n         self.inner.inner.write_vectored(bufs)\n     }\n \n+    #[inline]\n+    pub fn is_write_vectored(&self) -> bool {\n+        self.inner.inner.is_write_vectored()\n+    }\n+\n     pub fn peer_addr(&self) -> io::Result<SocketAddr> {\n         addr_to_sockaddr(&self.peer_addr)\n     }"}, {"sha": "10d0925823eb94660278ce2390c892c093d7e3c6", "filename": "src/libstd/sys/sgx/pipe.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys%2Fsgx%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys%2Fsgx%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fpipe.rs?ref=c354509343b0a3a9b935cc18b2d4aa07da8d4261", "patch": "@@ -12,6 +12,10 @@ impl AnonPipe {\n         match self.0 {}\n     }\n \n+    pub fn is_read_vectored(&self) -> bool {\n+        match self.0 {}\n+    }\n+\n     pub fn write(&self, _buf: &[u8]) -> io::Result<usize> {\n         match self.0 {}\n     }\n@@ -20,6 +24,10 @@ impl AnonPipe {\n         match self.0 {}\n     }\n \n+    pub fn is_write_vectored(&self) -> bool {\n+        match self.0 {}\n+    }\n+\n     pub fn diverge(&self) -> ! {\n         match self.0 {}\n     }"}, {"sha": "bfdc39ada75ebaf99d78f34d75c85ca6a2e1c906", "filename": "src/libstd/sys/unix/ext/net.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs?ref=c354509343b0a3a9b935cc18b2d4aa07da8d4261", "patch": "@@ -613,6 +613,11 @@ impl io::Read for UnixStream {\n         io::Read::read_vectored(&mut &*self, bufs)\n     }\n \n+    #[inline]\n+    fn is_read_vectored(&self) -> bool {\n+        io::Read::is_read_vectored(&&*self)\n+    }\n+\n     #[inline]\n     unsafe fn initializer(&self) -> Initializer {\n         Initializer::nop()\n@@ -629,6 +634,11 @@ impl<'a> io::Read for &'a UnixStream {\n         self.0.read_vectored(bufs)\n     }\n \n+    #[inline]\n+    fn is_read_vectored(&self) -> bool {\n+        self.0.is_read_vectored()\n+    }\n+\n     #[inline]\n     unsafe fn initializer(&self) -> Initializer {\n         Initializer::nop()\n@@ -645,6 +655,11 @@ impl io::Write for UnixStream {\n         io::Write::write_vectored(&mut &*self, bufs)\n     }\n \n+    #[inline]\n+    fn is_write_vectored(&self) -> bool {\n+        io::Write::is_write_vectored(&&*self)\n+    }\n+\n     fn flush(&mut self) -> io::Result<()> {\n         io::Write::flush(&mut &*self)\n     }\n@@ -660,6 +675,11 @@ impl<'a> io::Write for &'a UnixStream {\n         self.0.write_vectored(bufs)\n     }\n \n+    #[inline]\n+    fn is_write_vectored(&self) -> bool {\n+        self.0.is_write_vectored()\n+    }\n+\n     fn flush(&mut self) -> io::Result<()> {\n         Ok(())\n     }"}, {"sha": "1ef7ffacfcf1413d2143ceea2477cbe0b44c9bda", "filename": "src/libstd/sys/unix/fd.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffd.rs?ref=c354509343b0a3a9b935cc18b2d4aa07da8d4261", "patch": "@@ -64,6 +64,11 @@ impl FileDesc {\n         Ok(ret as usize)\n     }\n \n+    #[inline]\n+    pub fn is_read_vectored(&self) -> bool {\n+        true\n+    }\n+\n     pub fn read_to_end(&self, buf: &mut Vec<u8>) -> io::Result<usize> {\n         let mut me = self;\n         (&mut me).read_to_end(buf)\n@@ -116,6 +121,11 @@ impl FileDesc {\n         Ok(ret as usize)\n     }\n \n+    #[inline]\n+    pub fn is_write_vectored(&self) -> bool {\n+        true\n+    }\n+\n     pub fn write_at(&self, buf: &[u8], offset: u64) -> io::Result<usize> {\n         #[cfg(target_os = \"android\")]\n         use super::android::cvt_pwrite64;"}, {"sha": "2cfc63d94922daea14b0894edbf848192eb84ca2", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=c354509343b0a3a9b935cc18b2d4aa07da8d4261", "patch": "@@ -828,6 +828,11 @@ impl File {\n         self.0.read_vectored(bufs)\n     }\n \n+    #[inline]\n+    pub fn is_read_vectored(&self) -> bool {\n+        self.0.is_read_vectored()\n+    }\n+\n     pub fn read_at(&self, buf: &mut [u8], offset: u64) -> io::Result<usize> {\n         self.0.read_at(buf, offset)\n     }\n@@ -840,6 +845,11 @@ impl File {\n         self.0.write_vectored(bufs)\n     }\n \n+    #[inline]\n+    pub fn is_write_vectored(&self) -> bool {\n+        self.0.is_write_vectored()\n+    }\n+\n     pub fn write_at(&self, buf: &[u8], offset: u64) -> io::Result<usize> {\n         self.0.write_at(buf, offset)\n     }"}, {"sha": "a2912387108e136ebdac33134937e9a95d6ff444", "filename": "src/libstd/sys/unix/l4re.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys%2Funix%2Fl4re.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys%2Funix%2Fl4re.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fl4re.rs?ref=c354509343b0a3a9b935cc18b2d4aa07da8d4261", "patch": "@@ -55,6 +55,10 @@ pub mod net {\n             unimpl!();\n         }\n \n+        pub fn is_read_vectored(&self) -> bool {\n+            unimpl!();\n+        }\n+\n         pub fn peek(&self, _: &mut [u8]) -> io::Result<usize> {\n             unimpl!();\n         }\n@@ -75,6 +79,10 @@ pub mod net {\n             unimpl!();\n         }\n \n+        pub fn is_write_vectored(&self) -> bool {\n+            unimpl!();\n+        }\n+\n         pub fn set_timeout(&self, _: Option<Duration>, _: libc::c_int) -> io::Result<()> {\n             unimpl!();\n         }\n@@ -171,6 +179,10 @@ pub mod net {\n             unimpl!();\n         }\n \n+        pub fn is_read_vectored(&self) -> bool {\n+            unimpl!();\n+        }\n+\n         pub fn write(&self, _: &[u8]) -> io::Result<usize> {\n             unimpl!();\n         }\n@@ -179,6 +191,10 @@ pub mod net {\n             unimpl!();\n         }\n \n+        pub fn is_write_vectored(&self) -> bool {\n+            unimpl!();\n+        }\n+\n         pub fn peer_addr(&self) -> io::Result<SocketAddr> {\n             unimpl!();\n         }"}, {"sha": "f062bc012f7ef2c14c1e6900cb2da04bcaf7ba81", "filename": "src/libstd/sys/unix/net.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys%2Funix%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys%2Funix%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fnet.rs?ref=c354509343b0a3a9b935cc18b2d4aa07da8d4261", "patch": "@@ -226,6 +226,11 @@ impl Socket {\n         self.0.read_vectored(bufs)\n     }\n \n+    #[inline]\n+    pub fn is_read_vectored(&self) -> bool {\n+        self.0.is_read_vectored()\n+    }\n+\n     fn recv_from_with_flags(\n         &self,\n         buf: &mut [u8],\n@@ -263,6 +268,11 @@ impl Socket {\n         self.0.write_vectored(bufs)\n     }\n \n+    #[inline]\n+    pub fn is_write_vectored(&self) -> bool {\n+        self.0.is_write_vectored()\n+    }\n+\n     pub fn set_timeout(&self, dur: Option<Duration>, kind: libc::c_int) -> io::Result<()> {\n         let timeout = match dur {\n             Some(dur) => {"}, {"sha": "f2a2eabef9132509db4c864a40ba769b0974fb0f", "filename": "src/libstd/sys/unix/pipe.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs?ref=c354509343b0a3a9b935cc18b2d4aa07da8d4261", "patch": "@@ -64,6 +64,11 @@ impl AnonPipe {\n         self.0.read_vectored(bufs)\n     }\n \n+    #[inline]\n+    pub fn is_read_vectored(&self) -> bool {\n+        self.0.is_read_vectored()\n+    }\n+\n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n         self.0.write(buf)\n     }\n@@ -72,6 +77,11 @@ impl AnonPipe {\n         self.0.write_vectored(bufs)\n     }\n \n+    #[inline]\n+    pub fn is_write_vectored(&self) -> bool {\n+        self.0.is_write_vectored()\n+    }\n+\n     pub fn fd(&self) -> &FileDesc {\n         &self.0\n     }"}, {"sha": "f8353214cbca037fa635f342bf6e700a0aabf8e1", "filename": "src/libstd/sys/unix/stdio.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys%2Funix%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys%2Funix%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fstdio.rs?ref=c354509343b0a3a9b935cc18b2d4aa07da8d4261", "patch": "@@ -20,6 +20,11 @@ impl io::Read for Stdin {\n     fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         ManuallyDrop::new(FileDesc::new(libc::STDIN_FILENO)).read_vectored(bufs)\n     }\n+\n+    #[inline]\n+    fn is_read_vectored(&self) -> bool {\n+        true\n+    }\n }\n \n impl Stdout {\n@@ -37,6 +42,11 @@ impl io::Write for Stdout {\n         ManuallyDrop::new(FileDesc::new(libc::STDOUT_FILENO)).write_vectored(bufs)\n     }\n \n+    #[inline]\n+    fn is_write_vectored(&self) -> bool {\n+        true\n+    }\n+\n     fn flush(&mut self) -> io::Result<()> {\n         Ok(())\n     }\n@@ -57,6 +67,11 @@ impl io::Write for Stderr {\n         ManuallyDrop::new(FileDesc::new(libc::STDERR_FILENO)).write_vectored(bufs)\n     }\n \n+    #[inline]\n+    fn is_write_vectored(&self) -> bool {\n+        true\n+    }\n+\n     fn flush(&mut self) -> io::Result<()> {\n         Ok(())\n     }"}, {"sha": "23e9dc428ce2366999c52a3b6855f8799c8c4adb", "filename": "src/libstd/sys/vxworks/fd.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys%2Fvxworks%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys%2Fvxworks%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Ffd.rs?ref=c354509343b0a3a9b935cc18b2d4aa07da8d4261", "patch": "@@ -54,6 +54,11 @@ impl FileDesc {\n         Ok(ret as usize)\n     }\n \n+    #[inline]\n+    fn is_read_vectored(&self) -> bool {\n+        true\n+    }\n+\n     pub fn read_to_end(&self, buf: &mut Vec<u8>) -> io::Result<usize> {\n         let mut me = self;\n         (&mut me).read_to_end(buf)\n@@ -99,6 +104,11 @@ impl FileDesc {\n         Ok(ret as usize)\n     }\n \n+    #[inline]\n+    pub fn is_write_vectored(&self) -> bool {\n+        true\n+    }\n+\n     pub fn write_at(&self, buf: &[u8], offset: u64) -> io::Result<usize> {\n         unsafe fn cvt_pwrite(\n             fd: c_int,"}, {"sha": "557e65ca01b1cca63e92b556335042e81ed5acee", "filename": "src/libstd/sys/vxworks/fs.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys%2Fvxworks%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys%2Fvxworks%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Ffs.rs?ref=c354509343b0a3a9b935cc18b2d4aa07da8d4261", "patch": "@@ -351,6 +351,11 @@ impl File {\n         self.0.read_vectored(bufs)\n     }\n \n+    #[inline]\n+    pub fn is_read_vectored(&self) -> bool {\n+        self.0.is_read_vectored()\n+    }\n+\n     pub fn read_at(&self, buf: &mut [u8], offset: u64) -> io::Result<usize> {\n         self.0.read_at(buf, offset)\n     }\n@@ -363,6 +368,11 @@ impl File {\n         self.0.write_vectored(bufs)\n     }\n \n+    #[inline]\n+    pub fn is_write_vectored(&self) -> bool {\n+        self.0.is_write_vectored()\n+    }\n+\n     pub fn write_at(&self, buf: &[u8], offset: u64) -> io::Result<usize> {\n         self.0.write_at(buf, offset)\n     }"}, {"sha": "de0b15b43a2e2dd12918bfd0c978469df3a75e11", "filename": "src/libstd/sys/vxworks/net.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys%2Fvxworks%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys%2Fvxworks%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Fnet.rs?ref=c354509343b0a3a9b935cc18b2d4aa07da8d4261", "patch": "@@ -163,6 +163,11 @@ impl Socket {\n         self.0.read_vectored(bufs)\n     }\n \n+    #[inline]\n+    pub fn is_read_vectored(&self) -> bool {\n+        self.0.is_read_vectored()\n+    }\n+\n     fn recv_from_with_flags(\n         &self,\n         buf: &mut [u8],\n@@ -200,6 +205,11 @@ impl Socket {\n         self.0.write_vectored(bufs)\n     }\n \n+    #[inline]\n+    pub fn is_write_vectored(&self) -> bool {\n+        self.0.is_write_vectored()\n+    }\n+\n     pub fn set_timeout(&self, dur: Option<Duration>, kind: libc::c_int) -> io::Result<()> {\n         let timeout = match dur {\n             Some(dur) => {"}, {"sha": "a18376212af51a32e8044194fa39892aced42b1d", "filename": "src/libstd/sys/vxworks/pipe.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys%2Fvxworks%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys%2Fvxworks%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Fpipe.rs?ref=c354509343b0a3a9b935cc18b2d4aa07da8d4261", "patch": "@@ -24,10 +24,16 @@ impl AnonPipe {\n     pub fn read(&self, buf: &mut [u8]) -> io::Result<usize> {\n         self.0.read(buf)\n     }\n+\n     pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         self.0.read_vectored(bufs)\n     }\n \n+    #[inline]\n+    pub fn is_read_vectored(&self) -> bool {\n+        self.0.is_read_vectored()\n+    }\n+\n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n         self.0.write(buf)\n     }\n@@ -36,6 +42,11 @@ impl AnonPipe {\n         self.0.write_vectored(bufs)\n     }\n \n+    #[inline]\n+    pub fn is_write_vectored(&self) -> bool {\n+        self.0.is_write_vectored()\n+    }\n+\n     pub fn fd(&self) -> &FileDesc {\n         &self.0\n     }"}, {"sha": "793daea43c215baf07149e2157d73781a7102634", "filename": "src/libstd/sys/wasi/fs.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys%2Fwasi%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys%2Fwasi%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Ffs.rs?ref=c354509343b0a3a9b935cc18b2d4aa07da8d4261", "patch": "@@ -399,6 +399,11 @@ impl File {\n         self.fd.read(bufs)\n     }\n \n+    #[inline]\n+    pub fn is_read_vectored(&self) -> bool {\n+        true\n+    }\n+\n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n         self.write_vectored(&[IoSlice::new(buf)])\n     }\n@@ -407,6 +412,11 @@ impl File {\n         self.fd.write(bufs)\n     }\n \n+    #[inline]\n+    pub fn is_write_vectored(&self) -> bool {\n+        true\n+    }\n+\n     pub fn flush(&self) -> io::Result<()> {\n         Ok(())\n     }"}, {"sha": "e186453588de5762af42ba6bdcd5c47a8f3870ce", "filename": "src/libstd/sys/wasi/net.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys%2Fwasi%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys%2Fwasi%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fnet.rs?ref=c354509343b0a3a9b935cc18b2d4aa07da8d4261", "patch": "@@ -48,6 +48,10 @@ impl TcpStream {\n         unsupported()\n     }\n \n+    pub fn is_read_vectored(&self) -> bool {\n+        true\n+    }\n+\n     pub fn write(&self, _: &[u8]) -> io::Result<usize> {\n         unsupported()\n     }\n@@ -56,6 +60,10 @@ impl TcpStream {\n         unsupported()\n     }\n \n+    pub fn is_write_vectored(&self) -> bool {\n+        true\n+    }\n+\n     pub fn peer_addr(&self) -> io::Result<SocketAddr> {\n         unsupported()\n     }"}, {"sha": "10d0925823eb94660278ce2390c892c093d7e3c6", "filename": "src/libstd/sys/wasi/pipe.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys%2Fwasi%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys%2Fwasi%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fpipe.rs?ref=c354509343b0a3a9b935cc18b2d4aa07da8d4261", "patch": "@@ -12,6 +12,10 @@ impl AnonPipe {\n         match self.0 {}\n     }\n \n+    pub fn is_read_vectored(&self) -> bool {\n+        match self.0 {}\n+    }\n+\n     pub fn write(&self, _buf: &[u8]) -> io::Result<usize> {\n         match self.0 {}\n     }\n@@ -20,6 +24,10 @@ impl AnonPipe {\n         match self.0 {}\n     }\n \n+    pub fn is_write_vectored(&self) -> bool {\n+        match self.0 {}\n+    }\n+\n     pub fn diverge(&self) -> ! {\n         match self.0 {}\n     }"}, {"sha": "9f9e35566ecf59bcbc46291a6deed0558f09740b", "filename": "src/libstd/sys/wasi/stdio.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys%2Fwasi%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys%2Fwasi%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fstdio.rs?ref=c354509343b0a3a9b935cc18b2d4aa07da8d4261", "patch": "@@ -19,6 +19,11 @@ impl Stdin {\n         ManuallyDrop::new(unsafe { WasiFd::from_raw(self.as_raw_fd()) }).read(data)\n     }\n \n+    #[inline]\n+    pub fn is_read_vectored(&self) -> bool {\n+        true\n+    }\n+\n     pub fn as_raw_fd(&self) -> u32 {\n         0\n     }\n@@ -37,6 +42,11 @@ impl Stdout {\n         ManuallyDrop::new(unsafe { WasiFd::from_raw(self.as_raw_fd()) }).write(data)\n     }\n \n+    #[inline]\n+    pub fn is_write_vectored(&self) -> bool {\n+        true\n+    }\n+\n     pub fn flush(&self) -> io::Result<()> {\n         Ok(())\n     }\n@@ -59,6 +69,11 @@ impl Stderr {\n         ManuallyDrop::new(unsafe { WasiFd::from_raw(self.as_raw_fd()) }).write(data)\n     }\n \n+    #[inline]\n+    pub fn is_write_vectored(&self) -> bool {\n+        true\n+    }\n+\n     pub fn flush(&self) -> io::Result<()> {\n         Ok(())\n     }"}, {"sha": "ecb5b51cccdcd965d85e9ee8e22ecb878d876719", "filename": "src/libstd/sys/wasm/fs.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys%2Fwasm%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys%2Fwasm%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Ffs.rs?ref=c354509343b0a3a9b935cc18b2d4aa07da8d4261", "patch": "@@ -202,6 +202,10 @@ impl File {\n         match self.0 {}\n     }\n \n+    pub fn is_read_vectored(&self) -> bool {\n+        match self.0 {}\n+    }\n+\n     pub fn write(&self, _buf: &[u8]) -> io::Result<usize> {\n         match self.0 {}\n     }\n@@ -210,6 +214,10 @@ impl File {\n         match self.0 {}\n     }\n \n+    pub fn is_write_vectored(&self) -> bool {\n+        match self.0 {}\n+    }\n+\n     pub fn flush(&self) -> io::Result<()> {\n         match self.0 {}\n     }"}, {"sha": "5c9f1098f9b7f0e8422840ffcce0a91d5ae1223b", "filename": "src/libstd/sys/wasm/net.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys%2Fwasm%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys%2Fwasm%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fnet.rs?ref=c354509343b0a3a9b935cc18b2d4aa07da8d4261", "patch": "@@ -44,6 +44,10 @@ impl TcpStream {\n         match self.0 {}\n     }\n \n+    pub fn is_read_vectored(&self) -> bool {\n+        match self.0 {}\n+    }\n+\n     pub fn write(&self, _: &[u8]) -> io::Result<usize> {\n         match self.0 {}\n     }\n@@ -52,6 +56,10 @@ impl TcpStream {\n         match self.0 {}\n     }\n \n+    pub fn is_write_vectored(&self) -> bool {\n+        match self.0 {}\n+    }\n+\n     pub fn peer_addr(&self) -> io::Result<SocketAddr> {\n         match self.0 {}\n     }"}, {"sha": "10d0925823eb94660278ce2390c892c093d7e3c6", "filename": "src/libstd/sys/wasm/pipe.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys%2Fwasm%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys%2Fwasm%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fpipe.rs?ref=c354509343b0a3a9b935cc18b2d4aa07da8d4261", "patch": "@@ -12,6 +12,10 @@ impl AnonPipe {\n         match self.0 {}\n     }\n \n+    pub fn is_read_vectored(&self) -> bool {\n+        match self.0 {}\n+    }\n+\n     pub fn write(&self, _buf: &[u8]) -> io::Result<usize> {\n         match self.0 {}\n     }\n@@ -20,6 +24,10 @@ impl AnonPipe {\n         match self.0 {}\n     }\n \n+    pub fn is_write_vectored(&self) -> bool {\n+        match self.0 {}\n+    }\n+\n     pub fn diverge(&self) -> ! {\n         match self.0 {}\n     }"}, {"sha": "cdbfac267b9a1ac60722998f49df00165116f88b", "filename": "src/libstd/sys/windows/fs.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs?ref=c354509343b0a3a9b935cc18b2d4aa07da8d4261", "patch": "@@ -409,6 +409,11 @@ impl File {\n         self.handle.read_vectored(bufs)\n     }\n \n+    #[inline]\n+    pub fn is_read_vectored(&self) -> bool {\n+        self.handle.is_read_vectored()\n+    }\n+\n     pub fn read_at(&self, buf: &mut [u8], offset: u64) -> io::Result<usize> {\n         self.handle.read_at(buf, offset)\n     }\n@@ -421,6 +426,11 @@ impl File {\n         self.handle.write_vectored(bufs)\n     }\n \n+    #[inline]\n+    pub fn is_write_vectored(&self) -> bool {\n+        self.handle.is_write_vectored()\n+    }\n+\n     pub fn write_at(&self, buf: &[u8], offset: u64) -> io::Result<usize> {\n         self.handle.write_at(buf, offset)\n     }"}, {"sha": "2131cfc2c94bccba1458215e7b4d5c8ba7c03b14", "filename": "src/libstd/sys/windows/handle.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys%2Fwindows%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys%2Fwindows%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fhandle.rs?ref=c354509343b0a3a9b935cc18b2d4aa07da8d4261", "patch": "@@ -92,6 +92,11 @@ impl RawHandle {\n         crate::io::default_read_vectored(|buf| self.read(buf), bufs)\n     }\n \n+    #[inline]\n+    pub fn is_read_vectored(&self) -> bool {\n+        false\n+    }\n+\n     pub fn read_at(&self, buf: &mut [u8], offset: u64) -> io::Result<usize> {\n         let mut read = 0;\n         let len = cmp::min(buf.len(), <c::DWORD>::max_value() as usize) as c::DWORD;\n@@ -171,6 +176,11 @@ impl RawHandle {\n         crate::io::default_write_vectored(|buf| self.write(buf), bufs)\n     }\n \n+    #[inline]\n+    pub fn is_write_vectored(&self) -> bool {\n+        false\n+    }\n+\n     pub fn write_at(&self, buf: &[u8], offset: u64) -> io::Result<usize> {\n         let mut written = 0;\n         let len = cmp::min(buf.len(), <c::DWORD>::max_value() as usize) as c::DWORD;"}, {"sha": "a15ded92f08c4a463510774d8ced2ce43c7820a8", "filename": "src/libstd/sys/windows/net.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs?ref=c354509343b0a3a9b935cc18b2d4aa07da8d4261", "patch": "@@ -266,6 +266,11 @@ impl Socket {\n         }\n     }\n \n+    #[inline]\n+    pub fn is_read_vectored(&self) -> bool {\n+        true\n+    }\n+\n     pub fn peek(&self, buf: &mut [u8]) -> io::Result<usize> {\n         self.recv_with_flags(buf, c::MSG_PEEK)\n     }\n@@ -324,6 +329,11 @@ impl Socket {\n         Ok(nwritten as usize)\n     }\n \n+    #[inline]\n+    pub fn is_write_vectored(&self) -> bool {\n+        true\n+    }\n+\n     pub fn set_timeout(&self, dur: Option<Duration>, kind: c_int) -> io::Result<()> {\n         let timeout = match dur {\n             Some(dur) => {"}, {"sha": "104a8db46596e17c3067983b8b0ebab04f98ea78", "filename": "src/libstd/sys/windows/pipe.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs?ref=c354509343b0a3a9b935cc18b2d4aa07da8d4261", "patch": "@@ -182,13 +182,23 @@ impl AnonPipe {\n         self.inner.read_vectored(bufs)\n     }\n \n+    #[inline]\n+    pub fn is_read_vectored(&self) -> bool {\n+        self.inner.is_read_vectored()\n+    }\n+\n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n         self.inner.write(buf)\n     }\n \n     pub fn write_vectored(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         self.inner.write_vectored(bufs)\n     }\n+\n+    #[inline]\n+    pub fn is_write_vectored(&self) -> bool {\n+        self.inner.is_write_vectored()\n+    }\n }\n \n pub fn read2(p1: AnonPipe, v1: &mut Vec<u8>, p2: AnonPipe, v2: &mut Vec<u8>) -> io::Result<()> {"}, {"sha": "a9b6079de7564e612d3b0efa88bdb04a9f0b9c5c", "filename": "src/libstd/sys_common/net.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys_common%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Flibstd%2Fsys_common%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fnet.rs?ref=c354509343b0a3a9b935cc18b2d4aa07da8d4261", "patch": "@@ -265,6 +265,11 @@ impl TcpStream {\n         self.inner.read_vectored(bufs)\n     }\n \n+    #[inline]\n+    pub fn is_read_vectored(&self) -> bool {\n+        self.inner.is_read_vectored()\n+    }\n+\n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n         let len = cmp::min(buf.len(), <wrlen_t>::max_value() as usize) as wrlen_t;\n         let ret = cvt(unsafe {\n@@ -277,6 +282,11 @@ impl TcpStream {\n         self.inner.write_vectored(bufs)\n     }\n \n+    #[inline]\n+    pub fn is_write_vectored(&self) -> bool {\n+        self.inner.is_write_vectored()\n+    }\n+\n     pub fn peer_addr(&self) -> io::Result<SocketAddr> {\n         sockname(|buf, len| unsafe { c::getpeername(*self.inner.as_inner(), buf, len) })\n     }"}, {"sha": "d424b22f000bfa81b050b310a1e82055f49692b4", "filename": "src/test/ui/consts/recursive-zst-static.default.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.default.stderr?ref=c354509343b0a3a9b935cc18b2d4aa07da8d4261", "patch": "@@ -1,17 +1,17 @@\n error[E0391]: cycle detected when const-evaluating `FOO`\n-  --> $DIR/recursive-zst-static.rs:7:18\n+  --> $DIR/recursive-zst-static.rs:10:18\n    |\n LL | static FOO: () = FOO;\n    |                  ^^^\n    |\n note: ...which requires const-evaluating `FOO`...\n-  --> $DIR/recursive-zst-static.rs:7:1\n+  --> $DIR/recursive-zst-static.rs:10:1\n    |\n LL | static FOO: () = FOO;\n    | ^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which again requires const-evaluating `FOO`, completing the cycle\n note: cycle used when const-evaluating + checking `FOO`\n-  --> $DIR/recursive-zst-static.rs:7:1\n+  --> $DIR/recursive-zst-static.rs:10:1\n    |\n LL | static FOO: () = FOO;\n    | ^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/consts/recursive-zst-static.stderr"}, {"sha": "29a467c006a492d6f16e3676672ce2452795ddbc", "filename": "src/test/ui/consts/recursive-zst-static.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.rs?ref=c354509343b0a3a9b935cc18b2d4aa07da8d4261", "patch": "@@ -1,3 +1,6 @@\n+// revisions: default unleash\n+//[unleash]compile-flags: -Zunleash-the-miri-inside-of-you\n+\n // This test ensures that we do not allow ZST statics to initialize themselves without ever\n // actually creating a value of that type. This is important, as the ZST may have private fields\n // that users can reasonably expect to only get initialized by their own code. Thus unsafe code"}, {"sha": "d424b22f000bfa81b050b310a1e82055f49692b4", "filename": "src/test/ui/consts/recursive-zst-static.unleash.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.unleash.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.unleash.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.unleash.stderr?ref=c354509343b0a3a9b935cc18b2d4aa07da8d4261", "patch": "@@ -0,0 +1,21 @@\n+error[E0391]: cycle detected when const-evaluating `FOO`\n+  --> $DIR/recursive-zst-static.rs:10:18\n+   |\n+LL | static FOO: () = FOO;\n+   |                  ^^^\n+   |\n+note: ...which requires const-evaluating `FOO`...\n+  --> $DIR/recursive-zst-static.rs:10:1\n+   |\n+LL | static FOO: () = FOO;\n+   | ^^^^^^^^^^^^^^^^^^^^^\n+   = note: ...which again requires const-evaluating `FOO`, completing the cycle\n+note: cycle used when const-evaluating + checking `FOO`\n+  --> $DIR/recursive-zst-static.rs:10:1\n+   |\n+LL | static FOO: () = FOO;\n+   | ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0391`."}, {"sha": "570ffd5d306227ed228d2d9e8bd85c19d6b394b9", "filename": "src/tools/linkchecker/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Ftools%2Flinkchecker%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Ftools%2Flinkchecker%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flinkchecker%2Fmain.rs?ref=c354509343b0a3a9b935cc18b2d4aa07da8d4261", "patch": "@@ -114,7 +114,7 @@ fn walk(cache: &mut Cache, root: &Path, dir: &Path, errors: &mut bool) {\n }\n \n fn check(cache: &mut Cache, root: &Path, file: &Path, errors: &mut bool) -> Option<PathBuf> {\n-    // Ignore none HTML files.\n+    // Ignore non-HTML files.\n     if file.extension().and_then(|s| s.to_str()) != Some(\"html\") {\n         return None;\n     }"}, {"sha": "f7fd0c670d7049df31a570abca9b0a9836943395", "filename": "src/tools/tidy/src/error_codes_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354509343b0a3a9b935cc18b2d4aa07da8d4261/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs?ref=c354509343b0a3a9b935cc18b2d4aa07da8d4261", "patch": "@@ -17,7 +17,7 @@ const WHITELIST: &[&str] = &[\n \n // Some error codes don't have any tests apparently...\n const IGNORE_EXPLANATION_CHECK: &[&str] =\n-    &[\"E0570\", \"E0601\", \"E0602\", \"E0639\", \"E0729\", \"E0749\", \"E0750\", \"E0751\"];\n+    &[\"E0570\", \"E0601\", \"E0602\", \"E0639\", \"E0729\", \"E0749\", \"E0750\"];\n \n fn check_error_code_explanation(\n     f: &str,"}]}