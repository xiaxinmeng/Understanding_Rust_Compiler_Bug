{"sha": "0a666f87caa3590d2dad54b30ac752e01c6b372c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhNjY2Zjg3Y2FhMzU5MGQyZGFkNTRiMzBhYzc1MmUwMWM2YjM3MmM=", "commit": {"author": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2017-08-10T18:44:08Z"}, "committer": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2017-08-16T15:45:06Z"}, "message": "remove `working_dir` argument", "tree": {"sha": "043b944e96d7fd12fcb463c5907eebaeaaa8acde", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/043b944e96d7fd12fcb463c5907eebaeaaa8acde"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a666f87caa3590d2dad54b30ac752e01c6b372c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEJ9c9OhXB85uXPmbOeLE+KEl68t8FAlmUaIIACgkQeLE+KEl6\n8t9M6w//fgT+W6+HyCWu/4K7F5afEqeMbs25KFs4JaHajOsW3ulUr9tLFE1rUiDm\neQFkbGWmS/0i5gYYmhnDRUUZpNOWjQsdbWtf2Ak/OOsXXqA63OrW9e+DWnrb0nD2\njG4la8HflURNn5Hh6lAInDdsUgEUqtPgVYnZsfR7WwgFyNntCciuiveuTFasKagd\nbnKTjfttHcX6WcL41wNNGJwYvNRwwmBd/GkC7XcazqC9mlJG0uO+f8wERlJueeDz\nWT+sLD+/t7m3QZ80e+y7zKRIlXaMkM22ocAYVheCb0LiTtiOoXlHr032ZKSogQEx\nUhQ+53U65ZO6VOLXKDt7g1rrvZM7DfapdLXtMJmFbqA4dz9FzMpUwwgGKsOw3DrS\nAlSMKSxT8kEQTViJix5MI5lb5Lx6QAbNV/7bJ/aTsiyB00lFKNRFFyqXy5GVGuZO\nMB9Jc7XTtaWacODK5teMz0Iyryl+3uelN6hPmMHboEMniKjE/7PpuVnE0Kd7eR9k\noCi4V9rqfmzKemR7Kt1ArzphljcMvPFMKR5fW8iMqmp7Mg86v1KU9+ealum4/O4b\n7jg+Wba1H4movMP2hjUVe8OV/N+y8biDRJqWgxJR9FZ4j1oNARLJBmTRZKhpLSmD\nuuDpPcQWRLajLZHOy8NXLPP+jO5UNam3ZaTr1NQ6Xyg3pC4ctEg=\n=9Hn6\n-----END PGP SIGNATURE-----", "payload": "tree 043b944e96d7fd12fcb463c5907eebaeaaa8acde\nparent e385bc5bcceaeca1c3e0a0b8c0ae38b9ff462a3a\nauthor Andy Russell <arussell123@gmail.com> 1502390648 -0400\ncommitter Andy Russell <arussell123@gmail.com> 1502898306 -0400\n\nremove `working_dir` argument\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a666f87caa3590d2dad54b30ac752e01c6b372c", "html_url": "https://github.com/rust-lang/rust/commit/0a666f87caa3590d2dad54b30ac752e01c6b372c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a666f87caa3590d2dad54b30ac752e01c6b372c/comments", "author": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e385bc5bcceaeca1c3e0a0b8c0ae38b9ff462a3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e385bc5bcceaeca1c3e0a0b8c0ae38b9ff462a3a", "html_url": "https://github.com/rust-lang/rust/commit/e385bc5bcceaeca1c3e0a0b8c0ae38b9ff462a3a"}], "stats": {"total": 60, "additions": 20, "deletions": 40}, "files": [{"sha": "300861b22a168aca97fe8bb512173430990c8535", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 20, "deletions": 40, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/0a666f87caa3590d2dad54b30ac752e01c6b372c/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a666f87caa3590d2dad54b30ac752e01c6b372c/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=0a666f87caa3590d2dad54b30ac752e01c6b372c", "patch": "@@ -335,14 +335,13 @@ impl<'test> TestCx<'test> {\n             .args(&[\"--target\", &self.config.target])\n             .arg(\"-L\").arg(&aux_dir)\n             .args(self.split_maybe_args(&self.config.target_rustcflags))\n-            .args(&self.props.compile_flags);\n+            .args(&self.props.compile_flags)\n+            .envs(self.props.exec_env.clone());\n \n         self.compose_and_run(rustc,\n-                             self.props.exec_env.clone(),\n                              self.config.compile_lib_path.to_str().unwrap(),\n                              Some(aux_dir.to_str().unwrap()),\n-                             Some(src),\n-                             None)\n+                             Some(src))\n     }\n \n     fn compare_source(&self,\n@@ -642,16 +641,13 @@ actual:\\n\\\n                          format!(\"-command={}\", debugger_script.to_str().unwrap())];\n \n                 let mut gdb = Command::new(self.config.gdb.as_ref().unwrap());\n-                gdb.args(&debugger_opts);\n-\n-                let environment = vec![(\"PYTHONPATH\".to_owned(), rust_pp_module_abs_path)];\n+                gdb.args(&debugger_opts)\n+                    .env(\"PYTHONPATH\", rust_pp_module_abs_path);\n \n                 debugger_run_result =\n                     self.compose_and_run(gdb,\n-                                         environment,\n                                          self.config.run_lib_path.to_str().unwrap(),\n                                          None,\n-                                         None,\n                                          None);\n             }\n         }\n@@ -1203,30 +1199,26 @@ actual:\\n\\\n                 }\n                 let mut test_client = Command::new(\n                     self.config.remote_test_client.as_ref().unwrap());\n-                test_client.args(&[\"run\", &prog]);\n-                test_client.args(args);\n+                test_client\n+                    .args(&[\"run\", &prog])\n+                    .args(args)\n+                    .envs(env.clone());\n                 self.compose_and_run(test_client,\n-                                     env,\n                                      self.config.run_lib_path.to_str().unwrap(),\n                                      Some(aux_dir.to_str().unwrap()),\n-                                     None,\n                                      None)\n             }\n             _ => {\n                 let aux_dir = self.aux_output_dir_name();\n-                let working_dir =\n-                    Some(self.output_base_name()\n-                             .parent().unwrap()\n-                             .to_str().unwrap().to_owned());\n                 let ProcArgs { prog, args } = self.make_run_args();\n                 let mut program = Command::new(&prog);\n-                program.args(args);\n+                program.args(args)\n+                    .current_dir(&self.output_base_name().parent().unwrap())\n+                    .envs(env.clone());\n                 self.compose_and_run(program,\n-                                     env,\n                                      self.config.run_lib_path.to_str().unwrap(),\n                                      Some(aux_dir.to_str().unwrap()),\n-                                     None,\n-                                     working_dir)\n+                                     None)\n             }\n         }\n     }\n@@ -1304,10 +1296,8 @@ actual:\\n\\\n             let mut rustc = Command::new(prog);\n             rustc.args(&args);\n             let auxres = aux_cx.compose_and_run(rustc,\n-                                                Vec::new(),\n                                                 aux_cx.config.compile_lib_path.to_str().unwrap(),\n                                                 Some(aux_dir.to_str().unwrap()),\n-                                                None,\n                                                 None);\n             if !auxres.status.success() {\n                 self.fatal_proc_rec(\n@@ -1319,23 +1309,20 @@ actual:\\n\\\n \n         let ProcArgs { prog, args } = args;\n         let mut rustc = Command::new(prog);\n-        rustc.args(args);\n+        rustc.args(args)\n+            .envs(self.props.rustc_env.clone());\n \n         self.compose_and_run(rustc,\n-                             self.props.rustc_env.clone(),\n                              self.config.compile_lib_path.to_str().unwrap(),\n                              Some(aux_dir.to_str().unwrap()),\n-                             input,\n-                             None)\n+                             input)\n     }\n \n     fn compose_and_run(&self,\n                        mut command: Command,\n-                       procenv: Vec<(String, String)> ,\n                        lib_path: &str,\n                        aux_path: Option<&str>,\n-                       input: Option<String>,\n-                       working_dir: Option<String>) -> ProcRes {\n+                       input: Option<String>) -> ProcRes {\n         let cmdline =\n         {\n             let cmdline = self.make_cmdline(&command, lib_path);\n@@ -1349,12 +1336,6 @@ actual:\\n\\\n             .stdin(Stdio::piped());\n \n         procsrv::add_target_env(&mut command, lib_path, aux_path);\n-        for (key, val) in procenv {\n-            command.env(&key, &val);\n-        }\n-        if let Some(cwd) = working_dir {\n-            command.current_dir(cwd);\n-        }\n \n         let mut child = command.spawn().expect(&format!(\"failed to exec `{:?}`\", &command));\n         if let Some(input) = input {\n@@ -1706,10 +1687,9 @@ actual:\\n\\\n     fn check_ir_with_filecheck(&self) -> ProcRes {\n         let irfile = self.output_base_name().with_extension(\"ll\");\n         let mut filecheck = Command::new(self.config.llvm_filecheck.as_ref().unwrap());\n-        // FIXME (#9639): This needs to handle non-utf8 paths\n-        filecheck.arg(&format!(\"-input-file={}\", irfile.to_str().unwrap()));\n-        filecheck.arg(&self.testpaths.file);\n-        self.compose_and_run(filecheck, Vec::new(), \"\", None, None, None)\n+        filecheck.arg(\"--input-file\").arg(irfile)\n+            .arg(&self.testpaths.file);\n+        self.compose_and_run(filecheck, \"\", None, None)\n     }\n \n     fn run_codegen_test(&self) {"}]}