{"sha": "b3c00a69f23b68cba2901eb98b3de7dfc6990396", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzYzAwYTY5ZjIzYjY4Y2JhMjkwMWViOThiM2RlN2RmYzY5OTAzOTY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-12T15:33:53Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-18T15:25:12Z"}, "message": "Fallout: btree. Rephrase invariant lifetime in terms of PhantomData.", "tree": {"sha": "faf3a12ad08cd82d963f2b12b64f2d9815a9aedb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/faf3a12ad08cd82d963f2b12b64f2d9815a9aedb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3c00a69f23b68cba2901eb98b3de7dfc6990396", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3c00a69f23b68cba2901eb98b3de7dfc6990396", "html_url": "https://github.com/rust-lang/rust/commit/b3c00a69f23b68cba2901eb98b3de7dfc6990396", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3c00a69f23b68cba2901eb98b3de7dfc6990396/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5579ca340b346f1b685887f7784c2e7f2090dcb", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5579ca340b346f1b685887f7784c2e7f2090dcb", "html_url": "https://github.com/rust-lang/rust/commit/c5579ca340b346f1b685887f7784c2e7f2090dcb"}], "stats": {"total": 17, "additions": 13, "deletions": 4}, "files": [{"sha": "f0e558e6f9105afaa8ed8c88e115f14540774ef8", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b3c00a69f23b68cba2901eb98b3de7dfc6990396/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3c00a69f23b68cba2901eb98b3de7dfc6990396/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=b3c00a69f23b68cba2901eb98b3de7dfc6990396", "patch": "@@ -512,13 +512,22 @@ mod stack {\n     use super::super::node::handle;\n     use vec::Vec;\n \n+    struct InvariantLifetime<'id>(\n+        marker::PhantomData<::core::cell::Cell<&'id ()>>);\n+\n+    impl<'id> InvariantLifetime<'id> {\n+        fn new() -> InvariantLifetime<'id> {\n+            InvariantLifetime(marker::PhantomData)\n+        }\n+    }\n+\n     /// A generic mutable reference, identical to `&mut` except for the fact that its lifetime\n     /// parameter is invariant. This means that wherever an `IdRef` is expected, only an `IdRef`\n     /// with the exact requested lifetime can be used. This is in contrast to normal references,\n     /// where `&'static` can be used in any function expecting any lifetime reference.\n     pub struct IdRef<'id, T: 'id> {\n         inner: &'id mut T,\n-        marker: marker::InvariantLifetime<'id>\n+        _marker: InvariantLifetime<'id>,\n     }\n \n     impl<'id, T> Deref for IdRef<'id, T> {\n@@ -560,7 +569,7 @@ mod stack {\n     pub struct Pusher<'id, 'a, K:'a, V:'a> {\n         map: &'a mut BTreeMap<K, V>,\n         stack: Stack<K, V>,\n-        marker: marker::InvariantLifetime<'id>\n+        _marker: InvariantLifetime<'id>,\n     }\n \n     impl<'a, K, V> PartialSearchStack<'a, K, V> {\n@@ -595,11 +604,11 @@ mod stack {\n             let pusher = Pusher {\n                 map: self.map,\n                 stack: self.stack,\n-                marker: marker::InvariantLifetime\n+                _marker: InvariantLifetime::new(),\n             };\n             let node = IdRef {\n                 inner: unsafe { &mut *self.next },\n-                marker: marker::InvariantLifetime\n+                _marker: InvariantLifetime::new(),\n             };\n \n             closure(pusher, node)"}]}