{"sha": "f67586066d5299c11ee69823a6dfd3148eaa5ec7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2NzU4NjA2NmQ1Mjk5YzExZWU2OTgyM2E2ZGZkMzE0OGVhYTVlYzc=", "commit": {"author": {"name": "Domantas Jadenkus", "email": "djadenkus@gmail.com", "date": "2021-02-14T09:09:56Z"}, "committer": {"name": "Domantas Jadenkus", "email": "djadenkus@gmail.com", "date": "2021-02-27T10:05:59Z"}, "message": "rename existing assist to generate_enum_is_method", "tree": {"sha": "2cbd4b5d6e9d28d95eb2b1b66708a712031040ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cbd4b5d6e9d28d95eb2b1b66708a712031040ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f67586066d5299c11ee69823a6dfd3148eaa5ec7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f67586066d5299c11ee69823a6dfd3148eaa5ec7", "html_url": "https://github.com/rust-lang/rust/commit/f67586066d5299c11ee69823a6dfd3148eaa5ec7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f67586066d5299c11ee69823a6dfd3148eaa5ec7/comments", "author": {"login": "jDomantas", "id": 8329015, "node_id": "MDQ6VXNlcjgzMjkwMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8329015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jDomantas", "html_url": "https://github.com/jDomantas", "followers_url": "https://api.github.com/users/jDomantas/followers", "following_url": "https://api.github.com/users/jDomantas/following{/other_user}", "gists_url": "https://api.github.com/users/jDomantas/gists{/gist_id}", "starred_url": "https://api.github.com/users/jDomantas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jDomantas/subscriptions", "organizations_url": "https://api.github.com/users/jDomantas/orgs", "repos_url": "https://api.github.com/users/jDomantas/repos", "events_url": "https://api.github.com/users/jDomantas/events{/privacy}", "received_events_url": "https://api.github.com/users/jDomantas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jDomantas", "id": 8329015, "node_id": "MDQ6VXNlcjgzMjkwMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8329015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jDomantas", "html_url": "https://github.com/jDomantas", "followers_url": "https://api.github.com/users/jDomantas/followers", "following_url": "https://api.github.com/users/jDomantas/following{/other_user}", "gists_url": "https://api.github.com/users/jDomantas/gists{/gist_id}", "starred_url": "https://api.github.com/users/jDomantas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jDomantas/subscriptions", "organizations_url": "https://api.github.com/users/jDomantas/orgs", "repos_url": "https://api.github.com/users/jDomantas/repos", "events_url": "https://api.github.com/users/jDomantas/events{/privacy}", "received_events_url": "https://api.github.com/users/jDomantas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a4076c14d0e3f7ae03908c2b9cd1a52851d401c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a4076c14d0e3f7ae03908c2b9cd1a52851d401c", "html_url": "https://github.com/rust-lang/rust/commit/2a4076c14d0e3f7ae03908c2b9cd1a52851d401c"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "3a7177dbf1b37da7bb254844b9229e3c07c271e1", "filename": "crates/ide_assists/src/handlers/generate_enum_match_method.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f67586066d5299c11ee69823a6dfd3148eaa5ec7/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_enum_match_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f67586066d5299c11ee69823a6dfd3148eaa5ec7/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_enum_match_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_enum_match_method.rs?ref=f67586066d5299c11ee69823a6dfd3148eaa5ec7", "patch": "@@ -8,7 +8,7 @@ use crate::{\n     AssistContext, AssistId, AssistKind, Assists,\n };\n \n-// Assist: generate_enum_match_method\n+// Assist: generate_enum_is_method\n //\n // Generate an `is_` method for an enum variant.\n //\n@@ -34,7 +34,7 @@ use crate::{\n //     }\n // }\n // ```\n-pub(crate) fn generate_enum_match_method(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+pub(crate) fn generate_enum_is_method(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let variant = ctx.find_node_at_offset::<ast::Variant>()?;\n     let variant_name = variant.name()?;\n     let parent_enum = variant.parent_enum();\n@@ -55,7 +55,7 @@ pub(crate) fn generate_enum_match_method(acc: &mut Assists, ctx: &AssistContext)\n \n     let target = variant.syntax().text_range();\n     acc.add(\n-        AssistId(\"generate_enum_match_method\", AssistKind::Generate),\n+        AssistId(\"generate_enum_is_method\", AssistKind::Generate),\n         \"Generate an `is_` method for an enum variant\",\n         target,\n         |builder| {\n@@ -100,13 +100,13 @@ mod tests {\n     use super::*;\n \n     fn check_not_applicable(ra_fixture: &str) {\n-        check_assist_not_applicable(generate_enum_match_method, ra_fixture)\n+        check_assist_not_applicable(generate_enum_is_method, ra_fixture)\n     }\n \n     #[test]\n     fn test_generate_enum_match_from_variant() {\n         check_assist(\n-            generate_enum_match_method,\n+            generate_enum_is_method,\n             r#\"\n enum Variant {\n     Undefined,\n@@ -162,7 +162,7 @@ enum Variant {\n     #[test]\n     fn test_generate_enum_match_from_variant_with_one_variant() {\n         check_assist(\n-            generate_enum_match_method,\n+            generate_enum_is_method,\n             r#\"enum Variant { Undefi$0ned }\"#,\n             r#\"\n enum Variant { Undefined }\n@@ -179,7 +179,7 @@ impl Variant {\n     #[test]\n     fn test_generate_enum_match_from_variant_with_visibility_marker() {\n         check_assist(\n-            generate_enum_match_method,\n+            generate_enum_is_method,\n             r#\"\n pub(crate) enum Variant {\n     Undefined,\n@@ -204,7 +204,7 @@ impl Variant {\n     #[test]\n     fn test_multiple_generate_enum_match_from_variant() {\n         check_assist(\n-            generate_enum_match_method,\n+            generate_enum_is_method,\n             r#\"\n enum Variant {\n     Undefined,"}, {"sha": "601199cd08eb3f3929d3cd6a7cc0e1cc6d17633f", "filename": "crates/ide_assists/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f67586066d5299c11ee69823a6dfd3148eaa5ec7/crates%2Fide_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f67586066d5299c11ee69823a6dfd3148eaa5ec7/crates%2Fide_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Flib.rs?ref=f67586066d5299c11ee69823a6dfd3148eaa5ec7", "patch": "@@ -189,7 +189,7 @@ mod handlers {\n             flip_trait_bound::flip_trait_bound,\n             generate_default_from_enum_variant::generate_default_from_enum_variant,\n             generate_derive::generate_derive,\n-            generate_enum_match_method::generate_enum_match_method,\n+            generate_enum_match_method::generate_enum_is_method,\n             generate_from_impl_for_enum::generate_from_impl_for_enum,\n             generate_function::generate_function,\n             generate_getter::generate_getter,"}, {"sha": "44bede0d98e99912b1677e60ce04c02a43e89816", "filename": "crates/ide_assists/src/tests/generated.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f67586066d5299c11ee69823a6dfd3148eaa5ec7/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f67586066d5299c11ee69823a6dfd3148eaa5ec7/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=f67586066d5299c11ee69823a6dfd3148eaa5ec7", "patch": "@@ -483,9 +483,9 @@ struct Point {\n }\n \n #[test]\n-fn doctest_generate_enum_match_method() {\n+fn doctest_generate_enum_is_method() {\n     check_doc_test(\n-        \"generate_enum_match_method\",\n+        \"generate_enum_is_method\",\n         r#####\"\n enum Version {\n  Undefined,"}]}