{"sha": "f3edf8dd5e83544d769b5deb9eb1d391f8f826ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzZWRmOGRkNWU4MzU0NGQ3NjliNWRlYjllYjFkMzkxZjhmODI2ZWU=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-09-07T10:12:20Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-09-07T10:12:20Z"}, "message": "Make it possible to take the value of (and bind) native fns\n\nCloses #820", "tree": {"sha": "aeecf22fef47a3974cf50d86b63f41e3e9571abc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aeecf22fef47a3974cf50d86b63f41e3e9571abc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3edf8dd5e83544d769b5deb9eb1d391f8f826ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3edf8dd5e83544d769b5deb9eb1d391f8f826ee", "html_url": "https://github.com/rust-lang/rust/commit/f3edf8dd5e83544d769b5deb9eb1d391f8f826ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3edf8dd5e83544d769b5deb9eb1d391f8f826ee/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ab02f7b211cc87a3cc52a3c02c86457dde3e8d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ab02f7b211cc87a3cc52a3c02c86457dde3e8d3", "html_url": "https://github.com/rust-lang/rust/commit/8ab02f7b211cc87a3cc52a3c02c86457dde3e8d3"}], "stats": {"total": 61, "additions": 28, "deletions": 33}, "files": [{"sha": "e8152dc1dd6710ae8d33b63756ce080e8f8a9cc4", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f3edf8dd5e83544d769b5deb9eb1d391f8f826ee/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3edf8dd5e83544d769b5deb9eb1d391f8f826ee/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=f3edf8dd5e83544d769b5deb9eb1d391f8f826ee", "patch": "@@ -1737,7 +1737,7 @@ fn iter_structural_ty(cx: @block_ctxt, av: ValueRef, t: ty::t,\n         }\n         ret next_cx;\n       }\n-      ty::ty_fn(_, _, _, _, _) {\n+      ty::ty_fn(_, _, _, _, _) | ty::ty_native_fn(_, _, _) {\n         let box_cell_a = GEP(cx, av, [C_int(0), C_int(abi::fn_field_box)]);\n         ret iter_boxpp(cx, box_cell_a, f);\n       }\n@@ -3047,7 +3047,7 @@ fn trans_var(cx: &@block_ctxt, sp: &span, def: &ast::def, id: ast::node_id) ->\n    lval_result {\n     let ccx = bcx_ccx(cx);\n     alt def {\n-      ast::def_fn(did, _) {\n+      ast::def_fn(did, _) | ast::def_native_fn(did) {\n         let tyt = ty::lookup_item_type(ccx.tcx, did);\n         ret lval_generic_fn(cx, tyt, did, id);\n       }\n@@ -3092,10 +3092,6 @@ fn trans_var(cx: &@block_ctxt, sp: &span, def: &ast::def, id: ast::node_id) ->\n                                            tp));\n         }\n       }\n-      ast::def_native_fn(did) {\n-        let tyt = ty::lookup_item_type(ccx.tcx, did);\n-        ret lval_generic_fn(cx, tyt, did, id);\n-      }\n       _ { ret trans_local_var(cx, def); }\n     }\n }\n@@ -5743,8 +5739,7 @@ fn decl_native_fn_and_pair(ccx: &@crate_ctxt, sp: &span, path: &[str],\n         rptr = result.rptr;\n       }\n       _ {\n-        r =\n-            trans_native_call(new_raw_block_ctxt(bcx.fcx, bcx.llbb),\n+        r = trans_native_call(new_raw_block_ctxt(bcx.fcx, bcx.llbb),\n                               ccx.externs, ccx.llmod, name, call_args);\n         rptr = BitCast(bcx, fcx.llretptr, T_ptr(T_i32()));\n       }"}, {"sha": "a6cd2a7ec76b39e85c68bbc845f1f06867899de4", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f3edf8dd5e83544d769b5deb9eb1d391f8f826ee/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3edf8dd5e83544d769b5deb9eb1d391f8f826ee/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=f3edf8dd5e83544d769b5deb9eb1d391f8f826ee", "patch": "@@ -801,6 +801,7 @@ fn type_is_structural(cx: &ctxt, ty: t) -> bool {\n       ty_tup(_) { ret true; }\n       ty_tag(_, _) { ret true; }\n       ty_fn(_, _, _, _, _) { ret true; }\n+      ty_native_fn(_, _, _) { ret true; }\n       ty_obj(_) { ret true; }\n       ty_res(_, _, _) { ret true; }\n       _ { ret false; }"}, {"sha": "ea157ea910d0318e280629c2906a3f437c878215", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 24, "deletions": 25, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/f3edf8dd5e83544d769b5deb9eb1d391f8f826ee/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3edf8dd5e83544d769b5deb9eb1d391f8f826ee/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=f3edf8dd5e83544d769b5deb9eb1d391f8f826ee", "patch": "@@ -2055,34 +2055,33 @@ fn check_expr_with_unifier(fcx: &@fn_ctxt, expr: &@ast::expr, unify: &unifier,\n         bot = check_call_or_bind(fcx, expr.span, f, args, kind_bind);\n \n         // Pull the argument and return types out.\n-        let proto_1;\n-        let arg_tys_1: [ty::arg] = [];\n-        let rt_1;\n-        let fty = expr_ty(tcx, f);\n-        let t_1;\n-        alt structure_of(fcx, expr.span, fty) {\n-          ty::ty_fn(proto, arg_tys, rt, cf, constrs) {\n-            proto_1 = proto;\n-            rt_1 = rt;\n-            // FIXME:\n-            // probably need to munge the constrs to drop constraints\n-            // for any bound args\n+        let (proto, arg_tys, rt, cf, constrs) =\n+            alt structure_of(fcx, expr.span, expr_ty(tcx, f)) {\n+              // FIXME:\n+              // probably need to munge the constrs to drop constraints\n+              // for any bound args\n+              ty::ty_fn(proto, arg_tys, rt, cf, constrs) {\n+                (proto, arg_tys, rt, cf, constrs)\n+              }\n+              ty::ty_native_fn(_, arg_tys, rt) {\n+                (ast::proto_fn, arg_tys, rt, ast::return, [])\n+              }\n+              _ { fail \"LHS of bind expr didn't have a function type?!\"; }\n+            };\n \n-            // For each blank argument, add the type of that argument\n-            // to the resulting function type.\n-            let i = 0u;\n-            while i < vec::len::<option::t<@ast::expr>>(args) {\n-                alt args[i] {\n-                  some(_) {/* no-op */ }\n-                  none. { arg_tys_1 += [arg_tys[i]]; }\n-                }\n-                i += 1u;\n+        // For each blank argument, add the type of that argument\n+        // to the resulting function type.\n+        let out_args = [];\n+        let i = 0u;\n+        while i < vec::len(args) {\n+            alt args[i] {\n+              some(_) {/* no-op */ }\n+              none. { out_args += [arg_tys[i]]; }\n             }\n-            t_1 = ty::mk_fn(tcx, proto_1, arg_tys_1, rt_1, cf, constrs);\n-          }\n-          _ { fail \"LHS of bind expr didn't have a function type?!\"; }\n+            i += 1u;\n         }\n-        write::ty_only_fixup(fcx, id, t_1);\n+        let ft = ty::mk_fn(tcx, proto, out_args, rt, cf, constrs);\n+        write::ty_only_fixup(fcx, id, ft);\n       }\n       ast::expr_call(f, args) {\n         bot = check_call_full(fcx, expr.span, f, args, kind_call, expr.id);"}]}