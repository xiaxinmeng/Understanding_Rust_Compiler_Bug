{"sha": "413c87f155ab6b389b1cc122b5739716acccb476", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxM2M4N2YxNTVhYjZiMzg5YjFjYzEyMmI1NzM5NzE2YWNjY2I0NzY=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-03-26T22:07:26Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-04-14T09:28:53Z"}, "message": "Get substs for trait refs in impl blocks", "tree": {"sha": "ece00ee4bb46d32ec2a3c4124a43e3634eacd007", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ece00ee4bb46d32ec2a3c4124a43e3634eacd007"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/413c87f155ab6b389b1cc122b5739716acccb476", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/413c87f155ab6b389b1cc122b5739716acccb476", "html_url": "https://github.com/rust-lang/rust/commit/413c87f155ab6b389b1cc122b5739716acccb476", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/413c87f155ab6b389b1cc122b5739716acccb476/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23b876bc3b00c53ce24b8a99b4f4bf190fc6300e", "url": "https://api.github.com/repos/rust-lang/rust/commits/23b876bc3b00c53ce24b8a99b4f4bf190fc6300e", "html_url": "https://github.com/rust-lang/rust/commit/23b876bc3b00c53ce24b8a99b4f4bf190fc6300e"}], "stats": {"total": 129, "additions": 85, "deletions": 44}, "files": [{"sha": "4d82fe25f8e35c416d15a4d139e770177ea31de4", "filename": "crates/ra_hir/src/generics.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/413c87f155ab6b389b1cc122b5739716acccb476/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413c87f155ab6b389b1cc122b5739716acccb476/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fgenerics.rs?ref=413c87f155ab6b389b1cc122b5739716acccb476", "patch": "@@ -56,7 +56,11 @@ impl GenericParams {\n             GenericDef::Function(it) => generics.fill(&*it.source(db).1, start),\n             GenericDef::Struct(it) => generics.fill(&*it.source(db).1, start),\n             GenericDef::Enum(it) => generics.fill(&*it.source(db).1, start),\n-            GenericDef::Trait(it) => generics.fill(&*it.source(db).1, start),\n+            GenericDef::Trait(it) => {\n+                // traits get the Self type as an implicit first type parameter\n+                generics.params.push(GenericParam { idx: start, name: Name::self_type() });\n+                generics.fill(&*it.source(db).1, start + 1);\n+            }\n             GenericDef::TypeAlias(it) => generics.fill(&*it.source(db).1, start),\n             GenericDef::ImplBlock(it) => generics.fill(&*it.source(db).1, start),\n         }"}, {"sha": "822a1a0db3fb31f5f01692d5d1a3bc1703e3f16b", "filename": "crates/ra_hir/src/impl_block.rs", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/413c87f155ab6b389b1cc122b5739716acccb476/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413c87f155ab6b389b1cc122b5739716acccb476/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs?ref=413c87f155ab6b389b1cc122b5739716acccb476", "patch": "@@ -10,15 +10,13 @@ use ra_syntax::{\n use crate::{\n     Const, TypeAlias, Function, HirFileId,\n     HirDatabase, DefDatabase,\n-    ModuleDef, Trait, Resolution,\n     type_ref::TypeRef,\n     ids::LocationCtx,\n     resolve::Resolver,\n     ty::Ty, generics::GenericParams,\n+    TraitRef, code_model_api::{Module, ModuleSource}\n };\n \n-use crate::code_model_api::{Module, ModuleSource};\n-\n #[derive(Debug, Default, PartialEq, Eq)]\n pub struct ImplSourceMap {\n     map: ArenaMap<ImplId, AstPtr<ast::ImplBlock>>,\n@@ -73,7 +71,7 @@ impl ImplBlock {\n         self.module\n     }\n \n-    pub fn target_trait_ref(&self, db: &impl DefDatabase) -> Option<TypeRef> {\n+    pub fn target_trait(&self, db: &impl DefDatabase) -> Option<TypeRef> {\n         db.impls_in_module(self.module).impls[self.impl_id].target_trait().cloned()\n     }\n \n@@ -85,16 +83,8 @@ impl ImplBlock {\n         Ty::from_hir(db, &self.resolver(db), &self.target_type(db))\n     }\n \n-    pub fn target_trait(&self, db: &impl HirDatabase) -> Option<Trait> {\n-        if let Some(TypeRef::Path(path)) = self.target_trait_ref(db) {\n-            let resolver = self.resolver(db);\n-            if let Some(Resolution::Def(ModuleDef::Trait(tr))) =\n-                resolver.resolve_path(db, &path).take_types()\n-            {\n-                return Some(tr);\n-            }\n-        }\n-        None\n+    pub fn target_trait_ref(&self, db: &impl HirDatabase) -> Option<TraitRef> {\n+        TraitRef::from_hir(db, &self.resolver(db), &self.target_trait(db)?)\n     }\n \n     pub fn items(&self, db: &impl DefDatabase) -> Vec<ImplItem> {"}, {"sha": "c284d1693f1fbcd327f5294d7ac11fe2caeda456", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413c87f155ab6b389b1cc122b5739716acccb476/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413c87f155ab6b389b1cc122b5739716acccb476/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=413c87f155ab6b389b1cc122b5739716acccb476", "patch": "@@ -61,7 +61,7 @@ pub use self::{\n     source_id::{AstIdMap, ErasedFileAstId},\n     ids::{HirFileId, MacroDefId, MacroCallId, MacroCallLoc},\n     nameres::{PerNs, Namespace, ImportId},\n-    ty::{Ty, ApplicationTy, TypeCtor, Substs, display::HirDisplay, CallableDef},\n+    ty::{Ty, ApplicationTy, TypeCtor, TraitRef, Substs, display::HirDisplay, CallableDef},\n     impl_block::{ImplBlock, ImplItem},\n     docs::{Docs, Documentation},\n     adt::AdtDef,"}, {"sha": "4523b3954666a9e534ac470b4444f65a457f771f", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 70, "deletions": 25, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/413c87f155ab6b389b1cc122b5739716acccb476/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413c87f155ab6b389b1cc122b5739716acccb476/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=413c87f155ab6b389b1cc122b5739716acccb476", "patch": "@@ -17,9 +17,9 @@ use crate::{\n     resolve::{Resolver, Resolution},\n     path::{ PathSegment, GenericArg},\n     generics::GenericParams,\n-    adt::VariantDef,\n+    adt::VariantDef, Trait\n };\n-use super::{Ty, primitive, FnSig, Substs, TypeCtor};\n+use super::{Ty, primitive, FnSig, Substs, TypeCtor, TraitRef};\n \n impl Ty {\n     pub(crate) fn from_hir(db: &impl HirDatabase, resolver: &Resolver, type_ref: &TypeRef) -> Self {\n@@ -115,7 +115,6 @@ impl Ty {\n         segment: &PathSegment,\n         resolved: TypableDef,\n     ) -> Substs {\n-        let mut substs = Vec::new();\n         let def_generics = match resolved {\n             TypableDef::Function(func) => func.generic_params(db),\n             TypableDef::Struct(s) => s.generic_params(db),\n@@ -124,28 +123,7 @@ impl Ty {\n             TypableDef::TypeAlias(t) => t.generic_params(db),\n             TypableDef::Const(_) | TypableDef::Static(_) => GenericParams::default().into(),\n         };\n-        let parent_param_count = def_generics.count_parent_params();\n-        substs.extend((0..parent_param_count).map(|_| Ty::Unknown));\n-        if let Some(generic_args) = &segment.args_and_bindings {\n-            // if args are provided, it should be all of them, but we can't rely on that\n-            let param_count = def_generics.params.len();\n-            for arg in generic_args.args.iter().take(param_count) {\n-                match arg {\n-                    GenericArg::Type(type_ref) => {\n-                        let ty = Ty::from_hir(db, resolver, type_ref);\n-                        substs.push(ty);\n-                    }\n-                }\n-            }\n-        }\n-        // add placeholders for args that were not provided\n-        // FIXME: handle defaults\n-        let supplied_params = substs.len();\n-        for _ in supplied_params..def_generics.count_params_including_parent() {\n-            substs.push(Ty::Unknown);\n-        }\n-        assert_eq!(substs.len(), def_generics.count_params_including_parent());\n-        Substs(substs.into())\n+        substs_from_path_segment(db, resolver, segment, &def_generics, false)\n     }\n \n     /// Collect generic arguments from a path into a `Substs`. See also\n@@ -185,6 +163,73 @@ impl Ty {\n     }\n }\n \n+pub(super) fn substs_from_path_segment(\n+    db: &impl HirDatabase,\n+    resolver: &Resolver,\n+    segment: &PathSegment,\n+    def_generics: &GenericParams,\n+    add_self_param: bool,\n+) -> Substs {\n+    let mut substs = Vec::new();\n+    let parent_param_count = def_generics.count_parent_params();\n+    substs.extend((0..parent_param_count).map(|_| Ty::Unknown));\n+    if add_self_param {\n+        // FIXME this add_self_param argument is kind of a hack: Traits have the\n+        // Self type as an implicit first type parameter, but it can't be\n+        // actually provided in the type arguments\n+        substs.push(Ty::Unknown);\n+    }\n+    if let Some(generic_args) = &segment.args_and_bindings {\n+        // if args are provided, it should be all of them, but we can't rely on that\n+        let param_count = def_generics.params.len();\n+        for arg in generic_args.args.iter().take(param_count) {\n+            match arg {\n+                GenericArg::Type(type_ref) => {\n+                    let ty = Ty::from_hir(db, resolver, type_ref);\n+                    substs.push(ty);\n+                }\n+            }\n+        }\n+    }\n+    // add placeholders for args that were not provided\n+    // FIXME: handle defaults\n+    let supplied_params = substs.len();\n+    for _ in supplied_params..def_generics.count_params_including_parent() {\n+        substs.push(Ty::Unknown);\n+    }\n+    assert_eq!(substs.len(), def_generics.count_params_including_parent());\n+    Substs(substs.into())\n+}\n+\n+impl TraitRef {\n+    pub(crate) fn from_hir(\n+        db: &impl HirDatabase,\n+        resolver: &Resolver,\n+        type_ref: &TypeRef,\n+    ) -> Option<Self> {\n+        let path = match type_ref {\n+            TypeRef::Path(path) => path,\n+            _ => return None,\n+        };\n+        let resolved = match resolver.resolve_path(db, &path).take_types()? {\n+            Resolution::Def(ModuleDef::Trait(tr)) => tr,\n+            _ => return None,\n+        };\n+        let substs = Self::substs_from_path(db, resolver, path, resolved);\n+        Some(TraitRef { trait_: resolved, substs })\n+    }\n+\n+    fn substs_from_path(\n+        db: &impl HirDatabase,\n+        resolver: &Resolver,\n+        path: &Path,\n+        resolved: Trait,\n+    ) -> Substs {\n+        let segment = path.segments.last().expect(\"path should have at least one segment\");\n+        substs_from_path_segment(db, resolver, segment, &resolved.generic_params(db), true)\n+    }\n+}\n+\n /// Build the declared type of an item. This depends on the namespace; e.g. for\n /// `struct Foo(usize)`, we have two types: The type of the struct itself, and\n /// the constructor function `(usize) -> Foo` which lives in the values"}, {"sha": "aac7d63840096100502ea09a5624442fd6041a9a", "filename": "crates/ra_hir/src/ty/method_resolution.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/413c87f155ab6b389b1cc122b5739716acccb476/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413c87f155ab6b389b1cc122b5739716acccb476/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs?ref=413c87f155ab6b389b1cc122b5739716acccb476", "patch": "@@ -72,9 +72,9 @@ impl CrateImplBlocks {\n \n             let target_ty = impl_block.target_ty(db);\n \n-            if let Some(tr) = impl_block.target_trait(db) {\n+            if let Some(tr) = impl_block.target_trait_ref(db) {\n                 self.impls_by_trait\n-                    .entry(tr)\n+                    .entry(tr.trait_)\n                     .or_insert_with(Vec::new)\n                     .push((module.module_id, impl_id));\n             } else {\n@@ -185,6 +185,8 @@ impl Ty {\n         //    well (in fact, the 'implements' condition could just be considered a\n         //    'where Self: Trait' clause)\n         candidates.retain(|(t, _m)| {\n+            // FIXME construct substs of the correct length for the trait\n+            //  - check in rustc whether it does anything smarter than putting variables for everything\n             let trait_ref = TraitRef { trait_: *t, substs: Substs::single(self.clone()) };\n             db.implements(trait_ref)\n         });"}, {"sha": "40a2bd148d7c1211fcc94297920cead26f3c3523", "filename": "crates/ra_ide_api/src/goto_definition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413c87f155ab6b389b1cc122b5739716acccb476/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413c87f155ab6b389b1cc122b5739716acccb476/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs?ref=413c87f155ab6b389b1cc122b5739716acccb476", "patch": "@@ -104,7 +104,7 @@ pub(crate) fn reference_definition(\n                     }\n                 }\n                 hir::PathResolution::AssocItem(assoc) => {\n-                    return Exact(NavigationTarget::from_impl_item(db, assoc))\n+                    return Exact(NavigationTarget::from_impl_item(db, assoc));\n                 }\n             }\n         }"}]}