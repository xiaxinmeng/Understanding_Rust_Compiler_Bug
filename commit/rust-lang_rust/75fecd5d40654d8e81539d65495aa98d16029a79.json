{"sha": "75fecd5d40654d8e81539d65495aa98d16029a79", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1ZmVjZDVkNDA2NTRkOGU4MTUzOWQ2NTQ5NWFhOThkMTYwMjlhNzk=", "commit": {"author": {"name": "Erik Desjardins", "email": "erikdesjardins@users.noreply.github.com", "date": "2021-08-15T16:24:58Z"}, "committer": {"name": "Erik Desjardins", "email": "erikdesjardins@users.noreply.github.com", "date": "2021-08-25T21:49:28Z"}, "message": "improve comments", "tree": {"sha": "ba3925ca83deb9ff25a096bb2936aae01bf9c3d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba3925ca83deb9ff25a096bb2936aae01bf9c3d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75fecd5d40654d8e81539d65495aa98d16029a79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75fecd5d40654d8e81539d65495aa98d16029a79", "html_url": "https://github.com/rust-lang/rust/commit/75fecd5d40654d8e81539d65495aa98d16029a79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75fecd5d40654d8e81539d65495aa98d16029a79/comments", "author": {"login": "erikdesjardins", "id": 7673145, "node_id": "MDQ6VXNlcjc2NzMxNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7673145?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikdesjardins", "html_url": "https://github.com/erikdesjardins", "followers_url": "https://api.github.com/users/erikdesjardins/followers", "following_url": "https://api.github.com/users/erikdesjardins/following{/other_user}", "gists_url": "https://api.github.com/users/erikdesjardins/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikdesjardins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikdesjardins/subscriptions", "organizations_url": "https://api.github.com/users/erikdesjardins/orgs", "repos_url": "https://api.github.com/users/erikdesjardins/repos", "events_url": "https://api.github.com/users/erikdesjardins/events{/privacy}", "received_events_url": "https://api.github.com/users/erikdesjardins/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erikdesjardins", "id": 7673145, "node_id": "MDQ6VXNlcjc2NzMxNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7673145?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikdesjardins", "html_url": "https://github.com/erikdesjardins", "followers_url": "https://api.github.com/users/erikdesjardins/followers", "following_url": "https://api.github.com/users/erikdesjardins/following{/other_user}", "gists_url": "https://api.github.com/users/erikdesjardins/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikdesjardins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikdesjardins/subscriptions", "organizations_url": "https://api.github.com/users/erikdesjardins/orgs", "repos_url": "https://api.github.com/users/erikdesjardins/repos", "events_url": "https://api.github.com/users/erikdesjardins/events{/privacy}", "received_events_url": "https://api.github.com/users/erikdesjardins/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e950f110194c4f9f513fab48448ceb451f818e46", "url": "https://api.github.com/repos/rust-lang/rust/commits/e950f110194c4f9f513fab48448ceb451f818e46", "html_url": "https://github.com/rust-lang/rust/commit/e950f110194c4f9f513fab48448ceb451f818e46"}], "stats": {"total": 23, "additions": 14, "deletions": 9}, "files": [{"sha": "01f80c8d903ae9b9dcade91b2214dba9d3655145", "filename": "compiler/rustc_middle/src/mir/interpret/allocation.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/75fecd5d40654d8e81539d65495aa98d16029a79/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75fecd5d40654d8e81539d65495aa98d16029a79/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs?ref=75fecd5d40654d8e81539d65495aa98d16029a79", "patch": "@@ -583,6 +583,9 @@ impl InitMask {\n \n     #[inline]\n     fn bit_index(bits: Size) -> (usize, usize) {\n+        // BLOCK_SIZE is the number of bits that can fit in a `Block`.\n+        // Each bit in a `Block` represents the initialization state of one byte of an allocation,\n+        // so we use `.bytes()` here.\n         let bits = bits.bytes();\n         let a = bits / InitMask::BLOCK_SIZE;\n         let b = bits % InitMask::BLOCK_SIZE;\n@@ -721,23 +724,23 @@ impl InitMask {\n                 is_init: bool,\n             ) -> Option<Size> {\n                 // For the following examples, assume this function was called with:\n-                //   bits = 11011100\n+                //   bits = 0b00111011\n                 //   start_bit = 3\n                 //   is_init = false\n-                // Note again that the least significant bit is written first,\n-                // which is backwards compared to how we normally write numbers.\n+                // Note that, for the examples in this function, the most significant bit is written first,\n+                // which is backwards compared to the comments in `find_bit`/`find_bit_fast`.\n \n                 // Invert bits so we're always looking for the first set bit.\n-                //        ! 11011100\n-                //   bits = 00100011\n+                //        ! 0b00111011\n+                //   bits = 0b11000100\n                 let bits = if is_init { bits } else { !bits };\n                 // Mask off unused start bits.\n-                //          00100011\n-                //        & 00011111\n-                //   bits = 00000011\n+                //          0b11000100\n+                //        & 0b11111000\n+                //   bits = 0b11000000\n                 let bits = bits & (!0 << start_bit);\n                 // Find set bit, if any.\n-                //   bit = trailing_zeros(00000011)\n+                //   bit = trailing_zeros(0b11000000)\n                 //   bit = 6\n                 if bits == 0 {\n                     None\n@@ -772,6 +775,7 @@ impl InitMask {\n             // For (a), the block index of `end_inclusive` is 1, and for (b), it's 0.\n             // This provides the desired behavior of searching blocks 0 and 1 for (a),\n             // and searching only block 0 for (b).\n+            // There is no concern of overflows since we checked for `start >= end` above.\n             let (start_block, start_bit) = InitMask::bit_index(start);\n             let end_inclusive = Size::from_bytes(end.bytes() - 1);\n             let (end_block_inclusive, _) = InitMask::bit_index(end_inclusive);\n@@ -1046,6 +1050,7 @@ impl<Tag, Extra> Allocation<Tag, Extra> {\n         let mut ranges = smallvec::SmallVec::<[u64; 1]>::new();\n         let initial = self.init_mask.get(range.start);\n \n+        // Here we rely on `range_as_init_chunks` to yield alternating init/uninit chunks.\n         for chunk in self.init_mask.range_as_init_chunks(range.start, range.end()) {\n             let len = chunk.range().end.bytes() - chunk.range().start.bytes();\n             ranges.push(len);"}]}