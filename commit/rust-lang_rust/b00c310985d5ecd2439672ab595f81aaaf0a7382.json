{"sha": "b00c310985d5ecd2439672ab595f81aaaf0a7382", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwMGMzMTA5ODVkNWVjZDI0Mzk2NzJhYjU5NWY4MWFhYWYwYTczODI=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-13T12:41:34Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-13T12:41:34Z"}, "message": "Rollup merge of #23312 - gkoz:ptr_from_box_docs, r=steveklabnik\n\n Show how to get a pointer without destroying the box.\nUse `boxed::into_raw` instead of `mem::transmute`.\n\nI removed the `let my_num: *const i32 = mem::transmute(my_num);` case altogether because we own the box, a `*mut` pointer is good anywhere a `*const` is needed, `from_raw` takes a mutable pointer and casting from a `*const` caused an ICE.", "tree": {"sha": "ab86a014b93863c6f80a60d25764e984df9a31f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab86a014b93863c6f80a60d25764e984df9a31f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b00c310985d5ecd2439672ab595f81aaaf0a7382", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b00c310985d5ecd2439672ab595f81aaaf0a7382", "html_url": "https://github.com/rust-lang/rust/commit/b00c310985d5ecd2439672ab595f81aaaf0a7382", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b00c310985d5ecd2439672ab595f81aaaf0a7382/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da054a5f87cb857e0c1b8684d32bb04064b9aaf1", "url": "https://api.github.com/repos/rust-lang/rust/commits/da054a5f87cb857e0c1b8684d32bb04064b9aaf1", "html_url": "https://github.com/rust-lang/rust/commit/da054a5f87cb857e0c1b8684d32bb04064b9aaf1"}, {"sha": "5d9ed0bc0e7922fb1fbdc518edc9bacb342fad6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d9ed0bc0e7922fb1fbdc518edc9bacb342fad6e", "html_url": "https://github.com/rust-lang/rust/commit/5d9ed0bc0e7922fb1fbdc518edc9bacb342fad6e"}], "stats": {"total": 29, "additions": 16, "deletions": 13}, "files": [{"sha": "32123a8271ce4fff85a78a5ff325d0742c0e8541", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b00c310985d5ecd2439672ab595f81aaaf0a7382/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b00c310985d5ecd2439672ab595f81aaaf0a7382/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=b00c310985d5ecd2439672ab595f81aaaf0a7382", "patch": "@@ -33,31 +33,34 @@\n //! let my_speed_ptr: *mut i32 = &mut my_speed;\n //! ```\n //!\n+//! To get a pointer to a boxed value, dereference the box:\n+//!\n+//! ```\n+//! let my_num: Box<i32> = Box::new(10);\n+//! let my_num_ptr: *const i32 = &*my_num;\n+//! let mut my_speed: Box<i32> = Box::new(88);\n+//! let my_speed_ptr: *mut i32 = &mut *my_speed;\n+//! ```\n+//!\n //! This does not take ownership of the original allocation\n //! and requires no resource management later,\n //! but you must not use the pointer after its lifetime.\n //!\n-//! ## 2. Transmute an owned box (`Box<T>`).\n+//! ## 2. Consume a box (`Box<T>`).\n //!\n-//! The `transmute` function takes, by value, whatever it's given\n-//! and returns it as whatever type is requested, as long as the\n-//! types are the same size. Because `Box<T>` and `*mut T` have the same\n-//! representation they can be trivially,\n-//! though unsafely, transformed from one type to the other.\n+//! The `into_raw` function consumes a box and returns\n+//! the raw pointer. It doesn't destroy `T` or deallocate any memory.\n //!\n //! ```\n-//! use std::mem;\n+//! use std::boxed;\n //!\n //! unsafe {\n-//!     let my_num: Box<i32> = Box::new(10);\n-//!     let my_num: *const i32 = mem::transmute(my_num);\n //!     let my_speed: Box<i32> = Box::new(88);\n-//!     let my_speed: *mut i32 = mem::transmute(my_speed);\n+//!     let my_speed: *mut i32 = boxed::into_raw(my_speed);\n //!\n //!     // By taking ownership of the original `Box<T>` though\n-//!     // we are obligated to transmute it back later to be destroyed.\n-//!     drop(mem::transmute::<_, Box<i32>>(my_speed));\n-//!     drop(mem::transmute::<_, Box<i32>>(my_num));\n+//!     // we are obligated to put it together later to be destroyed.\n+//!     drop(Box::from_raw(my_speed));\n //! }\n //! ```\n //!"}]}