{"sha": "a03222c2b16648c466f836d5eec425fc3c648aa4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwMzIyMmMyYjE2NjQ4YzQ2NmY4MzZkNWVlYzQyNWZjM2M2NDhhYTQ=", "commit": {"author": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2016-03-04T20:01:59Z"}, "committer": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2016-03-04T20:07:11Z"}, "message": "Do not trigger unused_assignments for overloaded AssignOps\n\nIf `v` were a type with some kind of indirection, so that `v += 1` would\nhave an effect even if `v` were not used anymore, the unused_assignments lint\nwould mark a false positive.\n\nThis exempts overloaded (non-primitive) assign ops from being treated as\nassignments (they are method calls).\n\nThe previous compile-fail tests that ensure x += 1 can trigger for\nprimitive types continue to pass. Added a representative test for the\n\"view\" indirection.", "tree": {"sha": "238d13ac9cfa9b7f14746bdcc0c2a61b47fd1600", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/238d13ac9cfa9b7f14746bdcc0c2a61b47fd1600"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a03222c2b16648c466f836d5eec425fc3c648aa4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a03222c2b16648c466f836d5eec425fc3c648aa4", "html_url": "https://github.com/rust-lang/rust/commit/a03222c2b16648c466f836d5eec425fc3c648aa4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a03222c2b16648c466f836d5eec425fc3c648aa4/comments", "author": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c97524bef9e59a80875110b402b3fc8c139d4d64", "url": "https://api.github.com/repos/rust-lang/rust/commits/c97524bef9e59a80875110b402b3fc8c139d4d64", "html_url": "https://github.com/rust-lang/rust/commit/c97524bef9e59a80875110b402b3fc8c139d4d64"}], "stats": {"total": 22, "additions": 21, "deletions": 1}, "files": [{"sha": "b581466fedeec452f03c963ea5b21c7b2521811e", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a03222c2b16648c466f836d5eec425fc3c648aa4/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a03222c2b16648c466f836d5eec425fc3c648aa4/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=a03222c2b16648c466f836d5eec425fc3c648aa4", "patch": "@@ -1415,7 +1415,9 @@ fn check_expr(this: &mut Liveness, expr: &Expr) {\n       }\n \n       hir::ExprAssignOp(_, ref l, _) => {\n-        this.check_lvalue(&l);\n+        if !this.ir.tcx.is_method_call(expr.id) {\n+            this.check_lvalue(&l);\n+        }\n \n         intravisit::walk_expr(this, expr);\n       }"}, {"sha": "3ed9e8548dcbc05d693d888f49e4d651998c3963", "filename": "src/test/run-pass/augmented-assignments.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a03222c2b16648c466f836d5eec425fc3c648aa4/src%2Ftest%2Frun-pass%2Faugmented-assignments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a03222c2b16648c466f836d5eec425fc3c648aa4/src%2Ftest%2Frun-pass%2Faugmented-assignments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Faugmented-assignments.rs?ref=a03222c2b16648c466f836d5eec425fc3c648aa4", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![deny(unused_assignments)]\n+\n use std::mem;\n use std::ops::{\n     AddAssign, BitAndAssign, BitOrAssign, BitXorAssign, DivAssign, Index, MulAssign, RemAssign,\n@@ -27,6 +29,8 @@ impl Slice {\n     }\n }\n \n+struct View<'a>(&'a mut [i32]);\n+\n fn main() {\n     let mut x = Int(1);\n \n@@ -78,6 +82,12 @@ fn main() {\n     assert_eq!(array[0], 1);\n     assert_eq!(array[1], 2);\n     assert_eq!(array[2], 3);\n+\n+    // sized indirection\n+    // check that this does *not* trigger the unused_assignments lint\n+    let mut array = [0, 1, 2];\n+    let mut view = View(&mut array);\n+    view += 1;\n }\n \n impl AddAssign for Int {\n@@ -159,3 +169,11 @@ impl AddAssign<i32> for Slice {\n         }\n     }\n }\n+\n+impl<'a> AddAssign<i32> for View<'a> {\n+    fn add_assign(&mut self, rhs: i32) {\n+        for lhs in self.0.iter_mut() {\n+            *lhs += rhs;\n+        }\n+    }\n+}"}]}