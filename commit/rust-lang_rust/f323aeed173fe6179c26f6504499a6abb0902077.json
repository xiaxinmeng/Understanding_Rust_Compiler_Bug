{"sha": "f323aeed173fe6179c26f6504499a6abb0902077", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzMjNhZWVkMTczZmU2MTc5YzI2ZjY1MDQ0OTlhNmFiYjA5MDIwNzc=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-12T06:11:15Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-12T19:14:06Z"}, "message": "Remove more vectors from std", "tree": {"sha": "0715c1785da785fa43ad8cffef4df8ee513a5d1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0715c1785da785fa43ad8cffef4df8ee513a5d1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f323aeed173fe6179c26f6504499a6abb0902077", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f323aeed173fe6179c26f6504499a6abb0902077", "html_url": "https://github.com/rust-lang/rust/commit/f323aeed173fe6179c26f6504499a6abb0902077", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f323aeed173fe6179c26f6504499a6abb0902077/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fed53921f9f73e60cc576737688c901192011c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fed53921f9f73e60cc576737688c901192011c9", "html_url": "https://github.com/rust-lang/rust/commit/0fed53921f9f73e60cc576737688c901192011c9"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "9465963fce5cae655715a409446e7821cacdca28", "filename": "src/lib/extfmt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f323aeed173fe6179c26f6504499a6abb0902077/src%2Flib%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f323aeed173fe6179c26f6504499a6abb0902077/src%2Flib%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fextfmt.rs?ref=f323aeed173fe6179c26f6504499a6abb0902077", "patch": "@@ -356,9 +356,9 @@ mod rt {\n \n     // FIXME: This might be useful in str: but needs to be utf8 safe first\n     fn str_init_elt(c: char, n_elts: uint) -> str {\n-        let svec = ivec::from_vec(vec::init_elt[u8](c as u8, n_elts));\n+        let svec = ivec::init_elt[u8](c as u8, n_elts);\n \n-        ret str::unsafe_from_bytes((svec));\n+        ret str::unsafe_from_bytes(svec);\n     }\n     tag pad_mode { pad_signed; pad_unsigned; pad_nozero; }\n     fn pad(cv: &conv, s: str, mode: pad_mode) -> str {"}, {"sha": "f096d5fd2e9f0a43a002b5c08cf4cbf5092387cc", "filename": "src/lib/list.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f323aeed173fe6179c26f6504499a6abb0902077/src%2Flib%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f323aeed173fe6179c26f6504499a6abb0902077/src%2Flib%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Flist.rs?ref=f323aeed173fe6179c26f6504499a6abb0902077", "patch": "@@ -3,13 +3,13 @@ import option::none;\n \n tag list[T] { cons(T, @list[T]); nil; }\n \n-fn from_vec[@T](v: vec[T]) -> list[T] {\n+fn from_vec[@T](v: &[T]) -> list[T] {\n     let l = nil[T];\n     // FIXME: This would be faster and more space efficient if it looped over\n     // a reverse vector iterator. Unfortunately generic iterators seem not to\n     // work yet.\n \n-    for item: T  in vec::reversed(v) { l = cons[T](item, @l); }\n+    for item: T  in ivec::reversed(v) { l = cons[T](item, @l); }\n     ret l;\n }\n "}, {"sha": "443a275ab1e0bc69ccec6ad784738c80ad630e56", "filename": "src/lib/posix_fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f323aeed173fe6179c26f6504499a6abb0902077/src%2Flib%2Fposix_fs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f323aeed173fe6179c26f6504499a6abb0902077/src%2Flib%2Fposix_fs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fposix_fs.rs?ref=f323aeed173fe6179c26f6504499a6abb0902077", "patch": "@@ -25,7 +25,7 @@ fn list_dir(path: str) -> [str] {\n             os::libc::closedir(dir);\n             ret result;\n         }\n-        vec::push[str](result, rustrt::rust_dirent_filename(ent));\n+        ivec::push[str](result, rustrt::rust_dirent_filename(ent));\n     }\n     os::libc::closedir(dir);\n     ret result;"}, {"sha": "65d092c3655bf733b44d91e4b283f71441815573", "filename": "src/lib/ufind.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f323aeed173fe6179c26f6504499a6abb0902077/src%2Flib%2Fufind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f323aeed173fe6179c26f6504499a6abb0902077/src%2Flib%2Fufind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fufind.rs?ref=f323aeed173fe6179c26f6504499a6abb0902077", "patch": "@@ -8,13 +8,13 @@ import option::some;\n // than the node itself.\n type node = option::t[uint];\n \n-type ufind = {mutable nodes: vec[mutable node]};\n+type ufind = {nodes: @mutable [mutable node]};\n \n-fn make() -> ufind { ret {mutable nodes: [mutable]}; }\n+fn make() -> ufind { ret {nodes: @mutable ~[mutable]}; }\n \n fn make_set(ufnd: &ufind) -> uint {\n-    let idx = vec::len(ufnd.nodes);\n-    ufnd.nodes += [mutable none[uint]];\n+    let idx = ivec::len(*ufnd.nodes);\n+    *ufnd.nodes += ~[mutable none[uint]];\n     ret idx;\n }\n \n@@ -40,13 +40,13 @@ fn union(ufnd: &ufind, m: uint, n: uint) {\n     } else if (m_root > n_root) { ufnd.nodes.(m_root) = some[uint](n_root); }\n }\n \n-fn set_count(ufnd: &ufind) -> uint { ret vec::len[node](ufnd.nodes); }\n+fn set_count(ufnd: &ufind) -> uint { ret ivec::len[node](*ufnd.nodes); }\n \n \n // Removes all sets with IDs greater than or equal to the given value.\n fn prune(ufnd: &ufind, n: uint) {\n     // TODO: Use \"slice\" once we get rid of \"mutable?\"\n \n-    let len = vec::len[node](ufnd.nodes);\n-    while len != n { vec::pop[node](ufnd.nodes); len -= 1u; }\n+    let len = ivec::len[node](*ufnd.nodes);\n+    while len != n { ivec::pop[node](*ufnd.nodes); len -= 1u; }\n }"}, {"sha": "389fab07c157aa1500a92f11a89a1dc5ba18b046", "filename": "src/test/stdtest/list.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f323aeed173fe6179c26f6504499a6abb0902077/src%2Ftest%2Fstdtest%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f323aeed173fe6179c26f6504499a6abb0902077/src%2Ftest%2Fstdtest%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Flist.rs?ref=f323aeed173fe6179c26f6504499a6abb0902077", "patch": "@@ -8,23 +8,23 @@ import std::option;\n \n #[test]\n fn test_from_vec() {\n-    let l = from_vec([0, 1, 2]);\n+    let l = from_vec(~[0, 1, 2]);\n     assert (car(l) == 0);\n     assert (car(cdr(l)) == 1);\n     assert (car(cdr(cdr(l))) == 2);\n }\n \n #[test]\n fn test_foldl() {\n-    let l = from_vec([0, 1, 2, 3, 4]);\n+    let l = from_vec(~[0, 1, 2, 3, 4]);\n     fn add(a: &int, b: &uint) -> uint { ret (a as uint) + b; }\n     let rs = list::foldl(l, 0u, add);\n     assert (rs == 10u);\n }\n \n #[test]\n fn test_find_success() {\n-    let l = from_vec([0, 1, 2]);\n+    let l = from_vec(~[0, 1, 2]);\n     fn match(i: &int) -> option::t[int] {\n         ret if i == 2 { option::some(i) } else { option::none[int] };\n     }\n@@ -34,15 +34,15 @@ fn test_find_success() {\n \n #[test]\n fn test_find_fail() {\n-    let l = from_vec([0, 1, 2]);\n+    let l = from_vec(~[0, 1, 2]);\n     fn match(i: &int) -> option::t[int] { ret option::none[int]; }\n     let rs = list::find(l, match);\n     assert (rs == option::none[int]);\n }\n \n #[test]\n fn test_has() {\n-    let l = from_vec([5, 8, 6]);\n+    let l = from_vec(~[5, 8, 6]);\n     let empty = list::nil[int];\n     assert (list::has(l, 5));\n     assert (!list::has(l, 7));\n@@ -52,7 +52,7 @@ fn test_has() {\n \n #[test]\n fn test_length() {\n-    let l = from_vec([0, 1, 2]);\n+    let l = from_vec(~[0, 1, 2]);\n     assert (list::length(l) == 3u);\n }\n "}]}