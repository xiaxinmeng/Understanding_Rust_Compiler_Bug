{"sha": "bfa6fdc72c5d650e68e09eac6025bd7d577bb11e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmYTZmZGM3MmM1ZDY1MGU2OGUwOWVhYzYwMjViZDdkNTc3YmIxMWU=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-09-16T00:39:58Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-09-16T00:39:58Z"}, "message": "trans: Allow base::internalize_symbols() to internalize #[no_mangle] symbols", "tree": {"sha": "b0bc693adf57601221fea80b757a688870967787", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0bc693adf57601221fea80b757a688870967787"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bfa6fdc72c5d650e68e09eac6025bd7d577bb11e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bfa6fdc72c5d650e68e09eac6025bd7d577bb11e", "html_url": "https://github.com/rust-lang/rust/commit/bfa6fdc72c5d650e68e09eac6025bd7d577bb11e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bfa6fdc72c5d650e68e09eac6025bd7d577bb11e/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "928c3981b63e63307a020e99ae67474a75652588", "url": "https://api.github.com/repos/rust-lang/rust/commits/928c3981b63e63307a020e99ae67474a75652588", "html_url": "https://github.com/rust-lang/rust/commit/928c3981b63e63307a020e99ae67474a75652588"}], "stats": {"total": 40, "additions": 15, "deletions": 25}, "files": [{"sha": "2c3880d21ad1ad3c90a2043e632d6b94665c1c3a", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/bfa6fdc72c5d650e68e09eac6025bd7d577bb11e/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfa6fdc72c5d650e68e09eac6025bd7d577bb11e/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=bfa6fdc72c5d650e68e09eac6025bd7d577bb11e", "patch": "@@ -1421,21 +1421,7 @@ fn internalize_symbols<'a, 'tcx>(sess: &Session,\n             .iter()\n             .cloned()\n             .filter(|trans_item|{\n-                let def_id = match *trans_item {\n-                    TransItem::DropGlue(..) => {\n-                        return false\n-                    },\n-                    TransItem::Fn(ref instance) => {\n-                        instance.def\n-                    }\n-                    TransItem::Static(node_id) => {\n-                        tcx.map.local_def_id(node_id)\n-                    }\n-                };\n-\n-                trans_item.explicit_linkage(tcx).is_some() ||\n-                attr::contains_extern_indicator(tcx.sess.diagnostic(),\n-                                                &tcx.get_attrs(def_id))\n+                trans_item.explicit_linkage(tcx).is_some()\n             })\n             .map(|trans_item| symbol_map.get_or_compute(scx, trans_item))\n             .collect();\n@@ -1900,8 +1886,7 @@ fn collect_and_partition_translation_items<'a, 'tcx>(scx: &SharedCrateContext<'a\n         partitioning::partition(scx,\n                                 items.iter().cloned(),\n                                 strategy,\n-                                &inlining_map,\n-                                scx.reachable())\n+                                &inlining_map)\n     });\n \n     assert!(scx.tcx().sess.opts.cg.codegen_units == codegen_units.len() ||"}, {"sha": "65615e6b6440cb45513120e86bd9a453f7e4b3f6", "filename": "src/librustc_trans/partitioning.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bfa6fdc72c5d650e68e09eac6025bd7d577bb11e/src%2Flibrustc_trans%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfa6fdc72c5d650e68e09eac6025bd7d577bb11e/src%2Flibrustc_trans%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fpartitioning.rs?ref=bfa6fdc72c5d650e68e09eac6025bd7d577bb11e", "patch": "@@ -133,7 +133,7 @@ use symbol_map::SymbolMap;\n use syntax::ast::NodeId;\n use syntax::parse::token::{self, InternedString};\n use trans_item::TransItem;\n-use util::nodemap::{FnvHashMap, FnvHashSet, NodeSet};\n+use util::nodemap::{FnvHashMap, FnvHashSet};\n \n pub enum PartitioningStrategy {\n     /// Generate one codegen unit per source-level module.\n@@ -254,8 +254,7 @@ const FALLBACK_CODEGEN_UNIT: &'static str = \"__rustc_fallback_codegen_unit\";\n pub fn partition<'a, 'tcx, I>(scx: &SharedCrateContext<'a, 'tcx>,\n                               trans_items: I,\n                               strategy: PartitioningStrategy,\n-                              inlining_map: &InliningMap<'tcx>,\n-                              reachable: &NodeSet)\n+                              inlining_map: &InliningMap<'tcx>)\n                               -> Vec<CodegenUnit<'tcx>>\n     where I: Iterator<Item = TransItem<'tcx>>\n {\n@@ -265,8 +264,7 @@ pub fn partition<'a, 'tcx, I>(scx: &SharedCrateContext<'a, 'tcx>,\n     // respective 'home' codegen unit. Regular translation items are all\n     // functions and statics defined in the local crate.\n     let mut initial_partitioning = place_root_translation_items(scx,\n-                                                                trans_items,\n-                                                                reachable);\n+                                                                trans_items);\n \n     debug_dump(tcx, \"INITIAL PARTITONING:\", initial_partitioning.codegen_units.iter());\n \n@@ -304,8 +302,7 @@ struct PreInliningPartitioning<'tcx> {\n struct PostInliningPartitioning<'tcx>(Vec<CodegenUnit<'tcx>>);\n \n fn place_root_translation_items<'a, 'tcx, I>(scx: &SharedCrateContext<'a, 'tcx>,\n-                                             trans_items: I,\n-                                             _reachable: &NodeSet)\n+                                             trans_items: I)\n                                              -> PreInliningPartitioning<'tcx>\n     where I: Iterator<Item = TransItem<'tcx>>\n {\n@@ -344,6 +341,10 @@ fn place_root_translation_items<'a, 'tcx, I>(scx: &SharedCrateContext<'a, 'tcx>,\n                                 // This is a non-generic functions, we always\n                                 // make it visible externally on the chance that\n                                 // it might be used in another codegen unit.\n+                                // Later on base::internalize_symbols() will\n+                                // assign \"internal\" linkage to those symbols\n+                                // that are not referenced from other codegen\n+                                // units (and are not publicly visible).\n                                 llvm::ExternalLinkage\n                             } else {\n                                 // In the current setup, generic functions cannot"}, {"sha": "5c7cbbbd88d46ced274471bd4a333b4f05e1da81", "filename": "src/librustc_trans/trans_item.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bfa6fdc72c5d650e68e09eac6025bd7d577bb11e/src%2Flibrustc_trans%2Ftrans_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfa6fdc72c5d650e68e09eac6025bd7d577bb11e/src%2Flibrustc_trans%2Ftrans_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans_item.rs?ref=bfa6fdc72c5d650e68e09eac6025bd7d577bb11e", "patch": "@@ -251,7 +251,11 @@ impl<'a, 'tcx> TransItem<'tcx> {\n \n     /// True if the translation item should only be translated to LLVM IR if\n     /// it is referenced somewhere (like inline functions, for example).\n-    pub fn is_instantiated_only_on_demand(&self, tcx: TyCtxt) -> bool {\n+    pub fn is_instantiated_only_on_demand(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> bool {\n+        if self.explicit_linkage(tcx).is_some() {\n+            return false;\n+        }\n+\n         match *self {\n             TransItem::Fn(ref instance) => {\n                 !instance.def.is_local() ||"}]}