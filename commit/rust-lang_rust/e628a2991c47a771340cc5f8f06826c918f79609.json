{"sha": "e628a2991c47a771340cc5f8f06826c918f79609", "node_id": "C_kwDOAAsO6NoAKGU2MjhhMjk5MWM0N2E3NzEzNDBjYzVmOGYwNjgyNmM5MThmNzk2MDk", "commit": {"author": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2022-02-08T22:15:45Z"}, "committer": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2022-02-08T23:40:52Z"}, "message": "Document Simd is Simd<Wrapping<T>, N>\n\nand other quirks like panicking\nand the equivalence to zipping and mapping binary ops", "tree": {"sha": "357c0ca1cecc4eee370ef866a5e091d1eb089003", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/357c0ca1cecc4eee370ef866a5e091d1eb089003"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e628a2991c47a771340cc5f8f06826c918f79609", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e628a2991c47a771340cc5f8f06826c918f79609", "html_url": "https://github.com/rust-lang/rust/commit/e628a2991c47a771340cc5f8f06826c918f79609", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e628a2991c47a771340cc5f8f06826c918f79609/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "672bfebfd89b7d7ebdac3dbcf714c6010430d5fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/672bfebfd89b7d7ebdac3dbcf714c6010430d5fc", "html_url": "https://github.com/rust-lang/rust/commit/672bfebfd89b7d7ebdac3dbcf714c6010430d5fc"}], "stats": {"total": 34, "additions": 33, "deletions": 1}, "files": [{"sha": "0a2f681f66b2b7042c0c02450226d8f646b1020f", "filename": "crates/core_simd/src/vector.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e628a2991c47a771340cc5f8f06826c918f79609/crates%2Fcore_simd%2Fsrc%2Fvector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e628a2991c47a771340cc5f8f06826c918f79609/crates%2Fcore_simd%2Fsrc%2Fvector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector.rs?ref=e628a2991c47a771340cc5f8f06826c918f79609", "patch": "@@ -12,7 +12,39 @@ pub(crate) mod ptr;\n use crate::simd::intrinsics;\n use crate::simd::{LaneCount, Mask, MaskElement, SupportedLaneCount};\n \n-/// A SIMD vector of `LANES` elements of type `T`.\n+/// A SIMD vector of `LANES` elements of type `T`. `Simd<T, N>` has the same shape as [`[T; N]`](array), but operates like `T`.\n+/// This type is commonly known by names like `f32x4` or `Vec4` in many programming languages.\n+///\n+/// Two vectors of the same type and length will, by convention, support the binary operations (+, *, etc.) that `T` does.\n+/// These take the lanes at each index on the left-hand side and right-hand side, perform the binary operation,\n+/// and return the result in the same lane in a vector of equal size. For a given operator, this is equivalent to zipping\n+/// the two arrays together and mapping the operator over each lane.\n+///\n+/// ```rust\n+/// # #![feature(array_zip, portable_simd)]\n+/// # use core::simd::{Simd};\n+/// let a0: [i32; 4] = [-2, 0, 2, 4];\n+/// let a1 = [10, 9, 8, 7];\n+/// let zm_add = a0.zip(a1).map(|(lhs, rhs)| lhs + rhs);\n+/// let zm_mul = a0.zip(a1).map(|(lhs, rhs)| lhs * rhs);\n+///\n+/// // `Simd<T, N>` implements `From<[T; N]>\n+/// let [v0, v1] = [a0, a1].map(|a| Simd::from(a));\n+/// // Which means arrays implement `Into<Simd<T, N>>`.\n+/// assert_eq!(v0 + v1, zm_add.into());\n+/// assert_eq!(v0 * v1, zm_mul.into());\n+/// ```\n+///\n+/// `Simd` with integers has the quirk that these operations are also inherently wrapping, as if `T` was [`Wrapping<T>`].\n+/// Thus, `Simd` does not implement `wrapping_add`, because that is the behavior of the normal operation.\n+/// This means there is no warning on overflows, even in \"debug\" builds.\n+/// For most applications where `Simd` is appropriate, it is \"not a bug\" to wrap,\n+/// and even \"debug builds\" are unlikely to tolerate the loss of performance.\n+/// You may want to consider using explicitly checked arithmetic if such is required.\n+/// Division by zero still causes a panic, so you may want to consider using floating point numbers if that is unacceptable.\n+///\n+/// [`Wrapping<T>`]: core::num::Wrapping\n+///\n #[repr(simd)]\n pub struct Simd<T, const LANES: usize>([T; LANES])\n where"}]}